// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 568 0 0
// CreateDeposits ;
  12: CALL 739 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 1312 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 37800
  80: PUSH
  81: LD_INT 33600
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// schulzSecondSquad := [ ] ;
 233: LD_ADDR_EXP 26
 237: PUSH
 238: EMPTY
 239: ST_TO_ADDR
// for i := 1 to 3 do
 240: LD_ADDR_VAR 0 2
 244: PUSH
 245: DOUBLE
 246: LD_INT 1
 248: DEC
 249: ST_TO_ADDR
 250: LD_INT 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 293
// begin PrepareHuman ( false , i , 6 ) ;
 256: LD_INT 0
 258: PPUSH
 259: LD_VAR 0 2
 263: PPUSH
 264: LD_INT 6
 266: PPUSH
 267: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_EXP 26
 280: PPUSH
 281: CALL_OW 44
 285: PPUSH
 286: CALL 40757 0 2
 290: ST_TO_ADDR
// end ;
 291: GO 253
 293: POP
 294: POP
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: LD_EXP 20
 304: PUSH
 305: LD_EXP 21
 309: PUSH
 310: LD_EXP 22
 314: PUSH
 315: LD_EXP 23
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_EXP 26
 330: UNION
 331: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 4
 346: PPUSH
 347: CALL 5391 0 1
 351: PUSH
 352: FOR_TO
 353: IFFALSE 478
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 355: LD_INT 13
 357: PPUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 1
 363: PPUSH
 364: LD_INT 25
 366: PUSH
 367: LD_INT 27
 369: PUSH
 370: LD_INT 26
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: MOD
 390: PUSH
 391: LD_INT 1
 393: PLUS
 394: ARRAY
 395: PPUSH
 396: LD_INT 20
 398: PPUSH
 399: CALL 8304 0 5
// un := CreateVehicle ;
 403: LD_ADDR_VAR 0 3
 407: PUSH
 408: CALL_OW 45
 412: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 413: LD_VAR 0 3
 417: PPUSH
 418: LD_INT 2
 420: PPUSH
 421: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 425: LD_VAR 0 3
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 440: LD_VAR 0 4
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: LD_VAR 0 3
 453: PPUSH
 454: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 4
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL_OW 3
 475: ST_TO_ADDR
// end ;
 476: GO 352
 478: POP
 479: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 480: LD_INT 14
 482: PPUSH
 483: LD_INT 1
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: LD_INT 27
 491: PPUSH
 492: LD_INT 30
 494: PPUSH
 495: CALL 8304 0 5
// un := CreateVehicle ;
 499: LD_ADDR_VAR 0 3
 503: PUSH
 504: CALL_OW 45
 508: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 509: LD_VAR 0 3
 513: PPUSH
 514: LD_INT 2
 516: PPUSH
 517: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 521: LD_VAR 0 3
 525: PPUSH
 526: LD_INT 4
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// SetMark ( un , - 2 ) ;
 536: LD_VAR 0 3
 540: PPUSH
 541: LD_INT 2
 543: NEG
 544: PPUSH
 545: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 549: LD_EXP 18
 553: PPUSH
 554: LD_VAR 0 3
 558: PPUSH
 559: CALL_OW 52
// end ; end_of_file end_of_file
 563: LD_VAR 0 1
 567: RET
// export function CreateNature ; var i ; begin
 568: LD_INT 0
 570: PPUSH
 571: PPUSH
// PrepareApeman ( 0 ) ;
 572: LD_INT 0
 574: PPUSH
 575: CALL 37037 0 1
// for i := 1 to 5 do
 579: LD_ADDR_VAR 0 2
 583: PUSH
 584: DOUBLE
 585: LD_INT 1
 587: DEC
 588: ST_TO_ADDR
 589: LD_INT 5
 591: PUSH
 592: FOR_TO
 593: IFFALSE 612
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 595: CALL_OW 44
 599: PPUSH
 600: LD_INT 8
 602: PPUSH
 603: LD_INT 0
 605: PPUSH
 606: CALL_OW 49
 610: GO 592
 612: POP
 613: POP
// PrepareTiger ( 0 ) ;
 614: LD_INT 0
 616: PPUSH
 617: CALL 37145 0 1
// for i := 1 to 2 do
 621: LD_ADDR_VAR 0 2
 625: PUSH
 626: DOUBLE
 627: LD_INT 1
 629: DEC
 630: ST_TO_ADDR
 631: LD_INT 2
 633: PUSH
 634: FOR_TO
 635: IFFALSE 654
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 637: CALL_OW 44
 641: PPUSH
 642: LD_INT 8
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
 652: GO 634
 654: POP
 655: POP
// PrepareBird ;
 656: CALL 37326 0 0
// for i := 1 to 3 do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_INT 3
 672: PUSH
 673: FOR_TO
 674: IFFALSE 693
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 676: CALL_OW 44
 680: PPUSH
 681: LD_INT 8
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: CALL_OW 49
 691: GO 673
 693: POP
 694: POP
// PrepareFrog ;
 695: CALL 37246 0 0
// for i := 1 to 3 do
 699: LD_ADDR_VAR 0 2
 703: PUSH
 704: DOUBLE
 705: LD_INT 1
 707: DEC
 708: ST_TO_ADDR
 709: LD_INT 3
 711: PUSH
 712: FOR_TO
 713: IFFALSE 732
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 715: CALL_OW 44
 719: PPUSH
 720: LD_INT 9
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 49
 730: GO 712
 732: POP
 733: POP
// end ;
 734: LD_VAR 0 1
 738: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 739: LD_INT 0
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 745: LD_ADDR_VAR 0 3
 749: PUSH
 750: LD_INT 91
 752: PUSH
 753: LD_INT 13
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 52
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: LD_INT 115
 772: PUSH
 773: LD_INT 150
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 785: LD_ADDR_VAR 0 4
 789: PUSH
 790: LD_INT 82
 792: PUSH
 793: LD_INT 42
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 128
 802: PUSH
 803: LD_INT 132
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// for i in oil do
 814: LD_ADDR_VAR 0 2
 818: PUSH
 819: LD_VAR 0 3
 823: PUSH
 824: FOR_IN
 825: IFFALSE 854
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 2
 843: ARRAY
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: CALL_OW 62
 852: GO 824
 854: POP
 855: POP
// for i in sib do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: LD_VAR 0 4
 865: PUSH
 866: FOR_IN
 867: IFFALSE 896
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 1
 876: ARRAY
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 2
 885: ARRAY
 886: PPUSH
 887: LD_INT 3
 889: PPUSH
 890: CALL_OW 62
 894: GO 866
 896: POP
 897: POP
// end ; end_of_file
 898: LD_VAR 0 1
 902: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_EXP 18
 912: EQUAL
 913: IFFALSE 922
// YouLost ( Schulz ) ;
 915: LD_STRING Schulz
 917: PPUSH
 918: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
 922: LD_VAR 0 1
 926: PPUSH
 927: CALL_OW 266
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: IN
 942: IFFALSE 951
// YouLost ( Depot ) ;
 944: LD_STRING Depot
 946: PPUSH
 947: CALL_OW 104
// end ;
 951: PPOPN 1
 953: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
 954: LD_VAR 0 1
 958: PUSH
 959: LD_INT 22
 961: PUSH
 962: LD_INT 2
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: PUSH
 969: LD_INT 21
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 23
 981: PUSH
 982: LD_INT 2
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PPUSH
 994: CALL_OW 69
 998: PUSH
 999: LD_EXP 18
1003: DIFF
1004: IN
1005: IFFALSE 1033
// if killerSide = 2 then
1007: LD_VAR 0 2
1011: PUSH
1012: LD_INT 2
1014: EQUAL
1015: IFFALSE 1026
// YouLost ( TeamKiller ) else
1017: LD_STRING TeamKiller
1019: PPUSH
1020: CALL_OW 104
1024: GO 1033
// YouLost ( SoldierKilled ) ;
1026: LD_STRING SoldierKilled
1028: PPUSH
1029: CALL_OW 104
// end ;
1033: PPOPN 3
1035: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1036: LD_ADDR_EXP 3
1040: PUSH
1041: LD_EXP 3
1045: PPUSH
1046: LD_VAR 0 3
1050: PUSH
1051: LD_VAR 0 4
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL 40757 0 2
1064: ST_TO_ADDR
// end ;
1065: PPOPN 4
1067: END
// on SailEvent ( event ) do var i , eng ;
1068: LD_INT 0
1070: PPUSH
1071: PPUSH
// begin if event = 1 then
1072: LD_VAR 0 1
1076: PUSH
1077: LD_INT 1
1079: EQUAL
1080: IFFALSE 1309
// begin ComExitVehicle ( Lemmy ) ;
1082: LD_EXP 20
1086: PPUSH
1087: CALL_OW 121
// wait ( 1 ) ;
1091: LD_INT 1
1093: PPUSH
1094: CALL_OW 67
// AddComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1098: LD_EXP 20
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: LD_INT 69
1108: PPUSH
1109: LD_INT 14
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 205
// wait ( 0 0$2 ) ;
1119: LD_INT 70
1121: PPUSH
1122: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1126: LD_ADDR_VAR 0 2
1130: PUSH
1131: LD_EXP 26
1135: PPUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 25
1141: PUSH
1142: LD_INT 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PPUSH
1153: CALL_OW 72
1157: PUSH
1158: LD_EXP 21
1162: UNION
1163: PUSH
1164: LD_EXP 23
1168: UNION
1169: PUSH
1170: LD_EXP 22
1174: UNION
1175: PUSH
1176: FOR_IN
1177: IFFALSE 1212
// begin ComExitVehicle ( i ) ;
1179: LD_VAR 0 2
1183: PPUSH
1184: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1188: LD_INT 10
1190: PPUSH
1191: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1195: LD_VAR 0 2
1199: PPUSH
1200: LD_INT 69
1202: PPUSH
1203: LD_INT 14
1205: PPUSH
1206: CALL_OW 171
// end ;
1210: GO 1176
1212: POP
1213: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1214: LD_ADDR_VAR 0 3
1218: PUSH
1219: LD_EXP 26
1223: PPUSH
1224: LD_INT 25
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 72
1238: ST_TO_ADDR
// if not eng then
1239: LD_VAR 0 3
1243: NOT
1244: IFFALSE 1248
// exit ;
1246: GO 1309
// ComExitVehicle ( eng ) ;
1248: LD_VAR 0 3
1252: PPUSH
1253: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1257: LD_INT 10
1259: PPUSH
1260: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
1264: LD_VAR 0 3
1268: PPUSH
1269: LD_INT 55
1271: PPUSH
1272: LD_INT 42
1274: PPUSH
1275: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
1279: LD_VAR 0 3
1283: PPUSH
1284: LD_INT 84
1286: PPUSH
1287: LD_INT 47
1289: PPUSH
1290: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
1294: LD_VAR 0 3
1298: PPUSH
1299: LD_INT 70
1301: PPUSH
1302: LD_INT 19
1304: PPUSH
1305: CALL_OW 171
// end ; end ; end_of_file
1309: PPOPN 3
1311: END
// export function Action ; var i ; begin
1312: LD_INT 0
1314: PPUSH
1315: PPUSH
// Video ( true ) ;
1316: LD_INT 1
1318: PPUSH
1319: CALL 40729 0 1
// CenterNowOnXY ( 18 , 15 ) ;
1323: LD_INT 18
1325: PPUSH
1326: LD_INT 15
1328: PPUSH
1329: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_INT 80
1340: PPUSH
1341: LD_INT 28
1343: PPUSH
1344: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
1348: LD_EXP 20
1352: PPUSH
1353: LD_INT 61
1355: PPUSH
1356: LD_INT 17
1358: PPUSH
1359: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
1363: LD_EXP 22
1367: PPUSH
1368: LD_INT 72
1370: PPUSH
1371: LD_INT 28
1373: PPUSH
1374: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
1378: LD_EXP 23
1382: PPUSH
1383: LD_INT 74
1385: PPUSH
1386: LD_INT 22
1388: PPUSH
1389: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
1393: LD_EXP 21
1397: PPUSH
1398: LD_INT 68
1400: PPUSH
1401: LD_INT 22
1403: PPUSH
1404: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
1408: LD_EXP 26
1412: PPUSH
1413: LD_INT 83
1415: PPUSH
1416: LD_INT 37
1418: PPUSH
1419: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
1423: LD_EXP 18
1427: PPUSH
1428: LD_STRING DL-Intro-8
1430: PPUSH
1431: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1435: LD_EXP 18
1439: PPUSH
1440: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
1444: LD_EXP 18
1448: PPUSH
1449: LD_STRING DL-Intro-9
1451: PPUSH
1452: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1456: LD_EXP 18
1460: PPUSH
1461: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
1465: LD_EXP 18
1469: PPUSH
1470: LD_STRING DL-Intro-10
1472: PPUSH
1473: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
1477: LD_INT 80
1479: PPUSH
1480: LD_INT 28
1482: PPUSH
1483: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
1494: LD_INT 22
1496: PUSH
1497: LD_INT 2
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 92
1506: PUSH
1507: LD_INT 80
1509: PUSH
1510: LD_INT 28
1512: PUSH
1513: LD_INT 6
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: IFFALSE 1487
// RaiseSailEvent ( 1 ) ;
1532: LD_INT 1
1534: PPUSH
1535: CALL_OW 427
// wait ( 0 0$0.3 ) ;
1539: LD_INT 10
1541: PPUSH
1542: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
1546: LD_EXP 18
1550: PPUSH
1551: LD_STRING DL-Intro-11
1553: PPUSH
1554: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
1558: LD_EXP 24
1562: PPUSH
1563: LD_STRING DOm-Intro-12
1565: PPUSH
1566: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
1570: LD_EXP 24
1574: PPUSH
1575: LD_STRING DOm-Intro-13
1577: PPUSH
1578: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
1582: LD_EXP 18
1586: PPUSH
1587: LD_STRING DL-Intro-14
1589: PPUSH
1590: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
1594: LD_EXP 18
1598: PPUSH
1599: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1603: LD_INT 10
1605: PPUSH
1606: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
1610: LD_EXP 18
1614: PPUSH
1615: LD_INT 73
1617: PPUSH
1618: LD_INT 17
1620: PPUSH
1621: CALL_OW 111
// wait ( 0 0$2 ) ;
1625: LD_INT 70
1627: PPUSH
1628: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
1632: LD_EXP 18
1636: PPUSH
1637: LD_STRING DL-Intro-15
1639: PPUSH
1640: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
1644: LD_EXP 20
1648: PPUSH
1649: LD_STRING DLt-Intro-16
1651: PPUSH
1652: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
1656: LD_EXP 20
1660: PPUSH
1661: LD_STRING DLt-Intro-17
1663: PPUSH
1664: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
1668: LD_INT 35
1670: PPUSH
1671: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
1675: LD_INT 22
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 30
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 69
1703: IFFALSE 1668
// Video ( false ) ;
1705: LD_INT 0
1707: PPUSH
1708: CALL 40729 0 1
// tick := 0 ;
1712: LD_ADDR_OWVAR 1
1716: PUSH
1717: LD_INT 0
1719: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
1720: LD_STRING M1
1722: PPUSH
1723: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
1727: LD_INT 0
1729: PPUSH
1730: LD_INT 2
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
1740: LD_INT 35
1742: PPUSH
1743: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
1747: LD_INT 22
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 57
1769: PUSH
1770: EMPTY
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 69
1782: IFFALSE 1740
// DialogueOn ;
1784: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
1788: LD_EXP 18
1792: PPUSH
1793: LD_STRING DL-Intro-18
1795: PPUSH
1796: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
1800: LD_EXP 18
1804: PPUSH
1805: LD_STRING DL-Intro-19
1807: PPUSH
1808: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
1812: LD_EXP 18
1816: PPUSH
1817: LD_STRING DL-Intro-20
1819: PPUSH
1820: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
1824: LD_EXP 20
1828: PPUSH
1829: LD_STRING DLt-Intro-21
1831: PPUSH
1832: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
1836: LD_EXP 20
1840: PPUSH
1841: LD_STRING DLt-Intro-22
1843: PPUSH
1844: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
1848: LD_EXP 20
1852: PPUSH
1853: LD_STRING DLt-Intro-23
1855: PPUSH
1856: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
1860: LD_EXP 18
1864: PPUSH
1865: LD_STRING DL-Intro-24
1867: PPUSH
1868: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
1872: LD_EXP 20
1876: PPUSH
1877: LD_STRING DLt-Intro-25
1879: PPUSH
1880: CALL_OW 88
// DialogueOff ;
1884: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
1888: LD_STRING M2
1890: PPUSH
1891: CALL_OW 337
// Query ( Prepare ) ;
1895: LD_STRING Prepare
1897: PPUSH
1898: CALL_OW 97
// end ;
1902: LD_VAR 0 1
1906: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
1907: LD_INT 22
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 15
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: IFFALSE 1952
1937: GO 1939
1939: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
1940: LD_EXP 18
1944: PPUSH
1945: LD_STRING DL-Cam-1
1947: PPUSH
1948: CALL_OW 88
1952: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
1953: LD_OWVAR 1
1957: PUSH
1958: LD_EXP 4
1962: PUSH
1963: LD_INT 2
1965: DIV
1966: GREATEREQUAL
1967: IFFALSE 1992
1969: GO 1971
1971: DISABLE
// begin DialogueOn ;
1972: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
1976: LD_EXP 18
1980: PPUSH
1981: LD_STRING DL-Faster-1
1983: PPUSH
1984: CALL_OW 88
// DialogueOff ;
1988: CALL_OW 7
// end ;
1992: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
1993: LD_OWVAR 1
1997: PUSH
1998: LD_EXP 4
2002: PUSH
2003: LD_INT 2
2005: DIV
2006: PUSH
2007: LD_INT 10500
2009: PLUS
2010: GREATEREQUAL
2011: IFFALSE 2036
2013: GO 2015
2015: DISABLE
// begin DialogueOn ;
2016: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2020: LD_EXP 18
2024: PPUSH
2025: LD_STRING DL-Faster-2
2027: PPUSH
2028: CALL_OW 88
// DialogueOff ;
2032: CALL_OW 7
// end ;
2036: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2037: LD_INT 22
2039: PUSH
2040: LD_INT 2
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 2
2049: PUSH
2050: LD_INT 30
2052: PUSH
2053: LD_INT 6
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 30
2062: PUSH
2063: LD_INT 7
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 8
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_INT 22
2097: PUSH
2098: LD_INT 2
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 30
2107: PUSH
2108: LD_INT 3
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: AND
2124: PUSH
2125: LD_INT 22
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 30
2137: PUSH
2138: LD_INT 32
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 69
2153: PUSH
2154: LD_INT 3
2156: GREATEREQUAL
2157: AND
2158: PUSH
2159: LD_INT 22
2161: PUSH
2162: LD_INT 2
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 30
2171: PUSH
2172: LD_INT 5
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PPUSH
2183: CALL_OW 69
2187: AND
2188: PUSH
2189: LD_INT 22
2191: PUSH
2192: LD_INT 2
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: LD_INT 30
2204: PUSH
2205: LD_INT 26
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 30
2214: PUSH
2215: LD_INT 28
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PPUSH
2231: CALL_OW 69
2235: AND
2236: IFFALSE 2256
2238: GO 2240
2240: DISABLE
// begin baseDone := true ;
2241: LD_ADDR_EXP 5
2245: PUSH
2246: LD_INT 1
2248: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
2249: LD_STRING M1out
2251: PPUSH
2252: CALL_OW 337
// end ;
2256: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
2257: LD_EXP 5
2261: PUSH
2262: LD_INT 22
2264: PUSH
2265: LD_INT 2
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: LD_INT 21
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 3
2284: PUSH
2285: LD_INT 2
2287: PUSH
2288: LD_INT 34
2290: PUSH
2291: LD_INT 32
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 34
2300: PUSH
2301: LD_INT 88
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: LIST
2321: PPUSH
2322: CALL_OW 69
2326: PUSH
2327: LD_INT 22
2329: PUSH
2330: LD_INT 2
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 21
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 23
2349: PUSH
2350: LD_INT 2
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 69
2366: PPUSH
2367: CALL 5391 0 1
2371: GREATEREQUAL
2372: AND
2373: IFFALSE 2465
2375: GO 2377
2377: DISABLE
// begin DialogueOn ;
2378: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
2382: LD_EXP 18
2386: PPUSH
2387: LD_STRING DL-Ready-1
2389: PPUSH
2390: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
2394: LD_INT 22
2396: PUSH
2397: LD_INT 2
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 23
2406: PUSH
2407: LD_INT 0
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PPUSH
2418: CALL_OW 69
2422: IFFALSE 2436
// Say ( Schulz , DL-Ready-2 ) ;
2424: LD_EXP 18
2428: PPUSH
2429: LD_STRING DL-Ready-2
2431: PPUSH
2432: CALL_OW 88
// DialogueOff ;
2436: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
2440: LD_STRING M3
2442: PPUSH
2443: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
2447: LD_INT 7
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
// canGo := true ;
2457: LD_ADDR_EXP 6
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// end ;
2465: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles ;
2466: LD_EXP 6
2470: PUSH
2471: LD_INT 7
2473: PPUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 2
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 21
2486: PUSH
2487: LD_INT 2
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 33
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 3
2506: PUSH
2507: LD_INT 58
2509: PUSH
2510: EMPTY
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 70
2527: PPUSH
2528: CALL 5391 0 1
2532: PUSH
2533: LD_INT 22
2535: PUSH
2536: LD_INT 2
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 21
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 23
2555: PUSH
2556: LD_INT 2
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: LIST
2567: PPUSH
2568: CALL_OW 69
2572: PPUSH
2573: CALL 5391 0 1
2577: GREATEREQUAL
2578: AND
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 2
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 21
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 3
2602: PUSH
2603: LD_INT 55
2605: PUSH
2606: EMPTY
2607: LIST
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 23
2615: PUSH
2616: LD_INT 2
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: PPUSH
2629: CALL_OW 69
2633: PPUSH
2634: CALL 5391 0 1
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: AND
2643: IFFALSE 3164
2645: GO 2647
2647: DISABLE
2648: LD_INT 0
2650: PPUSH
2651: PPUSH
2652: PPUSH
// begin enable ;
2653: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
2654: LD_ADDR_VAR 0 2
2658: PUSH
2659: LD_INT 7
2661: PPUSH
2662: LD_INT 22
2664: PUSH
2665: LD_INT 2
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 21
2674: PUSH
2675: LD_INT 2
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: CALL_OW 70
2690: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
2691: LD_VAR 0 2
2695: PPUSH
2696: LD_INT 2
2698: PUSH
2699: LD_INT 34
2701: PUSH
2702: LD_INT 88
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 34
2711: PUSH
2712: LD_INT 32
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: LIST
2723: PPUSH
2724: CALL_OW 72
2728: IFFALSE 2739
// begin Query ( InvalidWeapon ) ;
2730: LD_STRING InvalidWeapon
2732: PPUSH
2733: CALL_OW 97
// exit ;
2737: GO 3164
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
2739: LD_VAR 0 2
2743: PPUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 24
2749: PUSH
2750: LD_INT 1000
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 72
2765: IFFALSE 2776
// begin Query ( HealthLevel ) ;
2767: LD_STRING HealthLevel
2769: PPUSH
2770: CALL_OW 97
// exit ;
2774: GO 3164
// end ; for i in tmp do
2776: LD_ADDR_VAR 0 1
2780: PUSH
2781: LD_VAR 0 2
2785: PUSH
2786: FOR_IN
2787: IFFALSE 2832
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 80 then
2789: LD_VAR 0 1
2793: PPUSH
2794: CALL_OW 262
2798: PUSH
2799: LD_INT 1
2801: EQUAL
2802: PUSH
2803: LD_VAR 0 1
2807: PPUSH
2808: CALL_OW 261
2812: PUSH
2813: LD_INT 80
2815: LESS
2816: AND
2817: IFFALSE 2830
// begin Query ( FuelLevel ) ;
2819: LD_STRING FuelLevel
2821: PPUSH
2822: CALL_OW 97
// exit ;
2826: POP
2827: POP
2828: GO 3164
// end ;
2830: GO 2786
2832: POP
2833: POP
// disable ;
2834: DISABLE
// saveVehicles := [ ] ;
2835: LD_ADDR_VAR 0 3
2839: PUSH
2840: EMPTY
2841: ST_TO_ADDR
// for i in tmp do
2842: LD_ADDR_VAR 0 1
2846: PUSH
2847: LD_VAR 0 2
2851: PUSH
2852: FOR_IN
2853: IFFALSE 2962
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: LD_VAR 0 3
2864: PPUSH
2865: LD_VAR 0 1
2869: PPUSH
2870: CALL_OW 265
2874: PUSH
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL_OW 262
2884: PUSH
2885: LD_VAR 0 1
2889: PPUSH
2890: CALL_OW 263
2894: PUSH
2895: LD_VAR 0 1
2899: PPUSH
2900: CALL_OW 264
2904: PUSH
2905: LD_VAR 0 1
2909: PPUSH
2910: CALL_OW 248
2914: PUSH
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 261
2924: PUSH
2925: LD_VAR 0 1
2929: PPUSH
2930: CALL_OW 271
2934: PUSH
2935: LD_VAR 0 1
2939: PPUSH
2940: CALL_OW 311
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL 40757 0 2
2959: ST_TO_ADDR
2960: GO 2852
2962: POP
2963: POP
// SaveCharacters ( Schulz , 09_Schulz ) ;
2964: LD_EXP 18
2968: PPUSH
2969: LD_STRING 09_Schulz
2971: PPUSH
2972: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
2976: LD_EXP 18
2980: PPUSH
2981: LD_STRING 09_Schulz_ID
2983: PPUSH
2984: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
2988: LD_EXP 20
2992: PPUSH
2993: LD_STRING 09_Lemmy
2995: PPUSH
2996: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
3000: LD_EXP 20
3004: PPUSH
3005: LD_STRING 09_Lemmy_ID
3007: PPUSH
3008: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
3012: LD_EXP 22
3016: PPUSH
3017: LD_STRING 09_Nia
3019: PPUSH
3020: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
3024: LD_EXP 22
3028: PPUSH
3029: LD_STRING 09_Nia_ID
3031: PPUSH
3032: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
3036: LD_EXP 21
3040: PPUSH
3041: LD_STRING 09_Mia
3043: PPUSH
3044: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
3048: LD_EXP 21
3052: PPUSH
3053: LD_STRING 09_Mia_ID
3055: PPUSH
3056: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
3060: LD_EXP 23
3064: PPUSH
3065: LD_STRING 09_Jenna
3067: PPUSH
3068: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
3072: LD_EXP 23
3076: PPUSH
3077: LD_STRING 09_Jenna_ID
3079: PPUSH
3080: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
3084: LD_EXP 26
3088: PPUSH
3089: LD_STRING 09_schulzSecondSquad
3091: PPUSH
3092: CALL_OW 38
// for i := 1 to schulzSecondSquad do
3096: LD_ADDR_VAR 0 1
3100: PUSH
3101: DOUBLE
3102: LD_INT 1
3104: DEC
3105: ST_TO_ADDR
3106: LD_EXP 26
3110: PUSH
3111: FOR_TO
3112: IFFALSE 3140
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
3114: LD_EXP 26
3118: PUSH
3119: LD_VAR 0 1
3123: ARRAY
3124: PPUSH
3125: LD_STRING 09_random_ID_
3127: PUSH
3128: LD_VAR 0 1
3132: STR
3133: PPUSH
3134: CALL_OW 39
3138: GO 3111
3140: POP
3141: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
3142: LD_VAR 0 3
3146: PPUSH
3147: LD_STRING 09_vehicles
3149: PPUSH
3150: CALL_OW 39
// ChangeMap ( 1 , %2 ) ;
3154: LD_INT 1
3156: PPUSH
3157: LD_STRING %2
3159: PPUSH
3160: CALL_OW 340
// end ; end_of_file
3164: PPOPN 3
3166: END
// every 0 0$25 + 0 0$30 trigger tick < 5 5$00 do
3167: LD_OWVAR 1
3171: PUSH
3172: LD_INT 10500
3174: LESS
3175: IFFALSE 3208
3177: GO 3179
3179: DISABLE
// begin enable ;
3180: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 5
3186: PPUSH
3187: CALL_OW 12
3191: PPUSH
3192: LD_INT 85
3194: PPUSH
3195: LD_INT 44
3197: PPUSH
3198: LD_INT 30
3200: PPUSH
3201: LD_INT 1
3203: PPUSH
3204: CALL_OW 56
// end ;
3208: END
// every 0 0$45 trigger tick < 15 15$00 do
3209: LD_OWVAR 1
3213: PUSH
3214: LD_INT 31500
3216: LESS
3217: IFFALSE 3288
3219: GO 3221
3221: DISABLE
// begin enable ;
3222: ENABLE
// if Prob ( 50 ) then
3223: LD_INT 50
3225: PPUSH
3226: CALL_OW 13
3230: IFFALSE 3261
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 5
3237: PPUSH
3238: CALL_OW 12
3242: PPUSH
3243: LD_INT 72
3245: PPUSH
3246: LD_INT 109
3248: PPUSH
3249: LD_INT 22
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: CALL_OW 56
3259: GO 3288
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
3261: LD_INT 1
3263: PPUSH
3264: LD_INT 5
3266: PPUSH
3267: CALL_OW 12
3271: PPUSH
3272: LD_INT 140
3274: PPUSH
3275: LD_INT 73
3277: PPUSH
3278: LD_INT 22
3280: PPUSH
3281: LD_INT 1
3283: PPUSH
3284: CALL_OW 56
3288: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3289: LD_INT 0
3291: PPUSH
3292: PPUSH
// if exist_mode then
3293: LD_VAR 0 2
3297: IFFALSE 3322
// unit := CreateCharacter ( prefix & ident ) else
3299: LD_ADDR_VAR 0 5
3303: PUSH
3304: LD_VAR 0 3
3308: PUSH
3309: LD_VAR 0 1
3313: STR
3314: PPUSH
3315: CALL_OW 34
3319: ST_TO_ADDR
3320: GO 3337
// unit := NewCharacter ( ident ) ;
3322: LD_ADDR_VAR 0 5
3326: PUSH
3327: LD_VAR 0 1
3331: PPUSH
3332: CALL_OW 25
3336: ST_TO_ADDR
// result := unit ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_VAR 0 5
3346: ST_TO_ADDR
// end ;
3347: LD_VAR 0 4
3351: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3352: LD_INT 0
3354: PPUSH
3355: PPUSH
// if not side or not nation then
3356: LD_VAR 0 1
3360: NOT
3361: PUSH
3362: LD_VAR 0 2
3366: NOT
3367: OR
3368: IFFALSE 3372
// exit ;
3370: GO 4140
// case nation of nation_american :
3372: LD_VAR 0 2
3376: PUSH
3377: LD_INT 1
3379: DOUBLE
3380: EQUAL
3381: IFTRUE 3385
3383: GO 3599
3385: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: LD_INT 35
3393: PUSH
3394: LD_INT 45
3396: PUSH
3397: LD_INT 46
3399: PUSH
3400: LD_INT 47
3402: PUSH
3403: LD_INT 82
3405: PUSH
3406: LD_INT 83
3408: PUSH
3409: LD_INT 84
3411: PUSH
3412: LD_INT 85
3414: PUSH
3415: LD_INT 86
3417: PUSH
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 6
3426: PUSH
3427: LD_INT 15
3429: PUSH
3430: LD_INT 16
3432: PUSH
3433: LD_INT 7
3435: PUSH
3436: LD_INT 12
3438: PUSH
3439: LD_INT 13
3441: PUSH
3442: LD_INT 10
3444: PUSH
3445: LD_INT 14
3447: PUSH
3448: LD_INT 20
3450: PUSH
3451: LD_INT 21
3453: PUSH
3454: LD_INT 22
3456: PUSH
3457: LD_INT 25
3459: PUSH
3460: LD_INT 32
3462: PUSH
3463: LD_INT 27
3465: PUSH
3466: LD_INT 36
3468: PUSH
3469: LD_INT 69
3471: PUSH
3472: LD_INT 39
3474: PUSH
3475: LD_INT 34
3477: PUSH
3478: LD_INT 40
3480: PUSH
3481: LD_INT 48
3483: PUSH
3484: LD_INT 49
3486: PUSH
3487: LD_INT 50
3489: PUSH
3490: LD_INT 51
3492: PUSH
3493: LD_INT 52
3495: PUSH
3496: LD_INT 53
3498: PUSH
3499: LD_INT 54
3501: PUSH
3502: LD_INT 55
3504: PUSH
3505: LD_INT 56
3507: PUSH
3508: LD_INT 57
3510: PUSH
3511: LD_INT 58
3513: PUSH
3514: LD_INT 59
3516: PUSH
3517: LD_INT 60
3519: PUSH
3520: LD_INT 61
3522: PUSH
3523: LD_INT 62
3525: PUSH
3526: LD_INT 80
3528: PUSH
3529: LD_INT 82
3531: PUSH
3532: LD_INT 83
3534: PUSH
3535: LD_INT 84
3537: PUSH
3538: LD_INT 85
3540: PUSH
3541: LD_INT 86
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: ST_TO_ADDR
3597: GO 4064
3599: LD_INT 2
3601: DOUBLE
3602: EQUAL
3603: IFTRUE 3607
3605: GO 3833
3607: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3608: LD_ADDR_VAR 0 4
3612: PUSH
3613: LD_INT 35
3615: PUSH
3616: LD_INT 45
3618: PUSH
3619: LD_INT 46
3621: PUSH
3622: LD_INT 47
3624: PUSH
3625: LD_INT 82
3627: PUSH
3628: LD_INT 83
3630: PUSH
3631: LD_INT 84
3633: PUSH
3634: LD_INT 85
3636: PUSH
3637: LD_INT 87
3639: PUSH
3640: LD_INT 70
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: LD_INT 11
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: LD_INT 5
3657: PUSH
3658: LD_INT 6
3660: PUSH
3661: LD_INT 15
3663: PUSH
3664: LD_INT 18
3666: PUSH
3667: LD_INT 7
3669: PUSH
3670: LD_INT 17
3672: PUSH
3673: LD_INT 8
3675: PUSH
3676: LD_INT 20
3678: PUSH
3679: LD_INT 21
3681: PUSH
3682: LD_INT 22
3684: PUSH
3685: LD_INT 72
3687: PUSH
3688: LD_INT 26
3690: PUSH
3691: LD_INT 69
3693: PUSH
3694: LD_INT 39
3696: PUSH
3697: LD_INT 40
3699: PUSH
3700: LD_INT 41
3702: PUSH
3703: LD_INT 42
3705: PUSH
3706: LD_INT 43
3708: PUSH
3709: LD_INT 48
3711: PUSH
3712: LD_INT 49
3714: PUSH
3715: LD_INT 50
3717: PUSH
3718: LD_INT 51
3720: PUSH
3721: LD_INT 52
3723: PUSH
3724: LD_INT 53
3726: PUSH
3727: LD_INT 54
3729: PUSH
3730: LD_INT 55
3732: PUSH
3733: LD_INT 56
3735: PUSH
3736: LD_INT 60
3738: PUSH
3739: LD_INT 61
3741: PUSH
3742: LD_INT 62
3744: PUSH
3745: LD_INT 66
3747: PUSH
3748: LD_INT 67
3750: PUSH
3751: LD_INT 68
3753: PUSH
3754: LD_INT 81
3756: PUSH
3757: LD_INT 82
3759: PUSH
3760: LD_INT 83
3762: PUSH
3763: LD_INT 84
3765: PUSH
3766: LD_INT 85
3768: PUSH
3769: LD_INT 87
3771: PUSH
3772: LD_INT 88
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: ST_TO_ADDR
3831: GO 4064
3833: LD_INT 3
3835: DOUBLE
3836: EQUAL
3837: IFTRUE 3841
3839: GO 4063
3841: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3842: LD_ADDR_VAR 0 4
3846: PUSH
3847: LD_INT 46
3849: PUSH
3850: LD_INT 47
3852: PUSH
3853: LD_INT 1
3855: PUSH
3856: LD_INT 2
3858: PUSH
3859: LD_INT 82
3861: PUSH
3862: LD_INT 83
3864: PUSH
3865: LD_INT 84
3867: PUSH
3868: LD_INT 85
3870: PUSH
3871: LD_INT 86
3873: PUSH
3874: LD_INT 11
3876: PUSH
3877: LD_INT 9
3879: PUSH
3880: LD_INT 20
3882: PUSH
3883: LD_INT 19
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 24
3891: PUSH
3892: LD_INT 22
3894: PUSH
3895: LD_INT 25
3897: PUSH
3898: LD_INT 28
3900: PUSH
3901: LD_INT 29
3903: PUSH
3904: LD_INT 30
3906: PUSH
3907: LD_INT 31
3909: PUSH
3910: LD_INT 37
3912: PUSH
3913: LD_INT 38
3915: PUSH
3916: LD_INT 32
3918: PUSH
3919: LD_INT 27
3921: PUSH
3922: LD_INT 33
3924: PUSH
3925: LD_INT 69
3927: PUSH
3928: LD_INT 39
3930: PUSH
3931: LD_INT 34
3933: PUSH
3934: LD_INT 40
3936: PUSH
3937: LD_INT 71
3939: PUSH
3940: LD_INT 23
3942: PUSH
3943: LD_INT 44
3945: PUSH
3946: LD_INT 48
3948: PUSH
3949: LD_INT 49
3951: PUSH
3952: LD_INT 50
3954: PUSH
3955: LD_INT 51
3957: PUSH
3958: LD_INT 52
3960: PUSH
3961: LD_INT 53
3963: PUSH
3964: LD_INT 54
3966: PUSH
3967: LD_INT 55
3969: PUSH
3970: LD_INT 56
3972: PUSH
3973: LD_INT 57
3975: PUSH
3976: LD_INT 58
3978: PUSH
3979: LD_INT 59
3981: PUSH
3982: LD_INT 63
3984: PUSH
3985: LD_INT 64
3987: PUSH
3988: LD_INT 65
3990: PUSH
3991: LD_INT 82
3993: PUSH
3994: LD_INT 83
3996: PUSH
3997: LD_INT 84
3999: PUSH
4000: LD_INT 85
4002: PUSH
4003: LD_INT 86
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: ST_TO_ADDR
4061: GO 4064
4063: POP
// if state > - 1 and state < 3 then
4064: LD_VAR 0 3
4068: PUSH
4069: LD_INT 1
4071: NEG
4072: GREATER
4073: PUSH
4074: LD_VAR 0 3
4078: PUSH
4079: LD_INT 3
4081: LESS
4082: AND
4083: IFFALSE 4140
// for i in result do
4085: LD_ADDR_VAR 0 5
4089: PUSH
4090: LD_VAR 0 4
4094: PUSH
4095: FOR_IN
4096: IFFALSE 4138
// if GetTech ( i , side ) <> state then
4098: LD_VAR 0 5
4102: PPUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: CALL_OW 321
4112: PUSH
4113: LD_VAR 0 3
4117: NONEQUAL
4118: IFFALSE 4136
// result := result diff i ;
4120: LD_ADDR_VAR 0 4
4124: PUSH
4125: LD_VAR 0 4
4129: PUSH
4130: LD_VAR 0 5
4134: DIFF
4135: ST_TO_ADDR
4136: GO 4095
4138: POP
4139: POP
// end ;
4140: LD_VAR 0 4
4144: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4145: LD_INT 0
4147: PPUSH
4148: PPUSH
4149: PPUSH
// result := true ;
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: LD_INT 1
4157: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4158: LD_ADDR_VAR 0 5
4162: PUSH
4163: LD_VAR 0 2
4167: PPUSH
4168: CALL_OW 480
4172: ST_TO_ADDR
// if not tmp then
4173: LD_VAR 0 5
4177: NOT
4178: IFFALSE 4182
// exit ;
4180: GO 4231
// for i in tmp do
4182: LD_ADDR_VAR 0 4
4186: PUSH
4187: LD_VAR 0 5
4191: PUSH
4192: FOR_IN
4193: IFFALSE 4229
// if GetTech ( i , side ) <> state_researched then
4195: LD_VAR 0 4
4199: PPUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 321
4209: PUSH
4210: LD_INT 2
4212: NONEQUAL
4213: IFFALSE 4227
// begin result := false ;
4215: LD_ADDR_VAR 0 3
4219: PUSH
4220: LD_INT 0
4222: ST_TO_ADDR
// exit ;
4223: POP
4224: POP
4225: GO 4231
// end ;
4227: GO 4192
4229: POP
4230: POP
// end ;
4231: LD_VAR 0 3
4235: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4236: LD_INT 0
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
4242: PPUSH
4243: PPUSH
4244: PPUSH
4245: PPUSH
4246: PPUSH
4247: PPUSH
4248: PPUSH
4249: PPUSH
4250: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4251: LD_VAR 0 1
4255: NOT
4256: PUSH
4257: LD_VAR 0 1
4261: PPUSH
4262: CALL_OW 257
4266: PUSH
4267: LD_INT 9
4269: NONEQUAL
4270: OR
4271: IFFALSE 4275
// exit ;
4273: GO 4848
// side := GetSide ( unit ) ;
4275: LD_ADDR_VAR 0 9
4279: PUSH
4280: LD_VAR 0 1
4284: PPUSH
4285: CALL_OW 255
4289: ST_TO_ADDR
// tech_space := tech_spacanom ;
4290: LD_ADDR_VAR 0 12
4294: PUSH
4295: LD_INT 29
4297: ST_TO_ADDR
// tech_time := tech_taurad ;
4298: LD_ADDR_VAR 0 13
4302: PUSH
4303: LD_INT 28
4305: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4306: LD_ADDR_VAR 0 11
4310: PUSH
4311: LD_VAR 0 1
4315: PPUSH
4316: CALL_OW 310
4320: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4321: LD_VAR 0 11
4325: PPUSH
4326: CALL_OW 247
4330: PUSH
4331: LD_INT 2
4333: EQUAL
4334: IFFALSE 4338
// exit ;
4336: GO 4848
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4338: LD_ADDR_VAR 0 8
4342: PUSH
4343: LD_INT 81
4345: PUSH
4346: LD_VAR 0 9
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: LD_INT 21
4360: PUSH
4361: LD_INT 3
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 69
4380: ST_TO_ADDR
// if not tmp then
4381: LD_VAR 0 8
4385: NOT
4386: IFFALSE 4390
// exit ;
4388: GO 4848
// if in_unit then
4390: LD_VAR 0 11
4394: IFFALSE 4418
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4396: LD_ADDR_VAR 0 10
4400: PUSH
4401: LD_VAR 0 8
4405: PPUSH
4406: LD_VAR 0 11
4410: PPUSH
4411: CALL_OW 74
4415: ST_TO_ADDR
4416: GO 4438
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4418: LD_ADDR_VAR 0 10
4422: PUSH
4423: LD_VAR 0 8
4427: PPUSH
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 74
4437: ST_TO_ADDR
// if not enemy then
4438: LD_VAR 0 10
4442: NOT
4443: IFFALSE 4447
// exit ;
4445: GO 4848
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4447: LD_VAR 0 11
4451: PUSH
4452: LD_VAR 0 11
4456: PPUSH
4457: LD_VAR 0 10
4461: PPUSH
4462: CALL_OW 296
4466: PUSH
4467: LD_INT 13
4469: GREATER
4470: AND
4471: PUSH
4472: LD_VAR 0 1
4476: PPUSH
4477: LD_VAR 0 10
4481: PPUSH
4482: CALL_OW 296
4486: PUSH
4487: LD_INT 12
4489: GREATER
4490: OR
4491: IFFALSE 4495
// exit ;
4493: GO 4848
// missile := [ 1 ] ;
4495: LD_ADDR_VAR 0 14
4499: PUSH
4500: LD_INT 1
4502: PUSH
4503: EMPTY
4504: LIST
4505: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4506: LD_VAR 0 9
4510: PPUSH
4511: LD_VAR 0 12
4515: PPUSH
4516: CALL_OW 325
4520: IFFALSE 4549
// missile := Replace ( missile , missile + 1 , 2 ) ;
4522: LD_ADDR_VAR 0 14
4526: PUSH
4527: LD_VAR 0 14
4531: PPUSH
4532: LD_VAR 0 14
4536: PUSH
4537: LD_INT 1
4539: PLUS
4540: PPUSH
4541: LD_INT 2
4543: PPUSH
4544: CALL_OW 1
4548: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4549: LD_VAR 0 9
4553: PPUSH
4554: LD_VAR 0 13
4558: PPUSH
4559: CALL_OW 325
4563: PUSH
4564: LD_VAR 0 10
4568: PPUSH
4569: CALL_OW 255
4573: PPUSH
4574: LD_VAR 0 13
4578: PPUSH
4579: CALL_OW 325
4583: NOT
4584: AND
4585: IFFALSE 4614
// missile := Replace ( missile , missile + 1 , 3 ) ;
4587: LD_ADDR_VAR 0 14
4591: PUSH
4592: LD_VAR 0 14
4596: PPUSH
4597: LD_VAR 0 14
4601: PUSH
4602: LD_INT 1
4604: PLUS
4605: PPUSH
4606: LD_INT 3
4608: PPUSH
4609: CALL_OW 1
4613: ST_TO_ADDR
// if missile < 2 then
4614: LD_VAR 0 14
4618: PUSH
4619: LD_INT 2
4621: LESS
4622: IFFALSE 4626
// exit ;
4624: GO 4848
// x := GetX ( enemy ) ;
4626: LD_ADDR_VAR 0 4
4630: PUSH
4631: LD_VAR 0 10
4635: PPUSH
4636: CALL_OW 250
4640: ST_TO_ADDR
// y := GetY ( enemy ) ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_VAR 0 10
4650: PPUSH
4651: CALL_OW 251
4655: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4656: LD_ADDR_VAR 0 6
4660: PUSH
4661: LD_VAR 0 4
4665: PUSH
4666: LD_INT 1
4668: NEG
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL_OW 12
4677: PLUS
4678: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4679: LD_ADDR_VAR 0 7
4683: PUSH
4684: LD_VAR 0 5
4688: PUSH
4689: LD_INT 1
4691: NEG
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 12
4700: PLUS
4701: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4702: LD_VAR 0 6
4706: PPUSH
4707: LD_VAR 0 7
4711: PPUSH
4712: CALL_OW 488
4716: NOT
4717: IFFALSE 4739
// begin _x := x ;
4719: LD_ADDR_VAR 0 6
4723: PUSH
4724: LD_VAR 0 4
4728: ST_TO_ADDR
// _y := y ;
4729: LD_ADDR_VAR 0 7
4733: PUSH
4734: LD_VAR 0 5
4738: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4739: LD_ADDR_VAR 0 3
4743: PUSH
4744: LD_INT 1
4746: PPUSH
4747: LD_VAR 0 14
4751: PPUSH
4752: CALL_OW 12
4756: ST_TO_ADDR
// case i of 1 :
4757: LD_VAR 0 3
4761: PUSH
4762: LD_INT 1
4764: DOUBLE
4765: EQUAL
4766: IFTRUE 4770
4768: GO 4787
4770: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4771: LD_VAR 0 1
4775: PPUSH
4776: LD_VAR 0 10
4780: PPUSH
4781: CALL_OW 115
4785: GO 4848
4787: LD_INT 2
4789: DOUBLE
4790: EQUAL
4791: IFTRUE 4795
4793: GO 4817
4795: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_VAR 0 6
4805: PPUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: CALL_OW 153
4815: GO 4848
4817: LD_INT 3
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4847
4825: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4826: LD_VAR 0 1
4830: PPUSH
4831: LD_VAR 0 6
4835: PPUSH
4836: LD_VAR 0 7
4840: PPUSH
4841: CALL_OW 154
4845: GO 4848
4847: POP
// end ;
4848: LD_VAR 0 2
4852: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4853: LD_INT 0
4855: PPUSH
4856: PPUSH
4857: PPUSH
4858: PPUSH
4859: PPUSH
4860: PPUSH
// if not unit or not building then
4861: LD_VAR 0 1
4865: NOT
4866: PUSH
4867: LD_VAR 0 2
4871: NOT
4872: OR
4873: IFFALSE 4877
// exit ;
4875: GO 5035
// x := GetX ( building ) ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_VAR 0 2
4886: PPUSH
4887: CALL_OW 250
4891: ST_TO_ADDR
// y := GetY ( building ) ;
4892: LD_ADDR_VAR 0 6
4896: PUSH
4897: LD_VAR 0 2
4901: PPUSH
4902: CALL_OW 251
4906: ST_TO_ADDR
// for i = 0 to 5 do
4907: LD_ADDR_VAR 0 4
4911: PUSH
4912: DOUBLE
4913: LD_INT 0
4915: DEC
4916: ST_TO_ADDR
4917: LD_INT 5
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5033
// begin _x := ShiftX ( x , i , 3 ) ;
4923: LD_ADDR_VAR 0 7
4927: PUSH
4928: LD_VAR 0 5
4932: PPUSH
4933: LD_VAR 0 4
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 272
4945: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4946: LD_ADDR_VAR 0 8
4950: PUSH
4951: LD_VAR 0 6
4955: PPUSH
4956: LD_VAR 0 4
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: CALL_OW 273
4968: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4969: LD_VAR 0 7
4973: PPUSH
4974: LD_VAR 0 8
4978: PPUSH
4979: CALL_OW 488
4983: NOT
4984: IFFALSE 4988
// continue ;
4986: GO 4920
// if HexInfo ( _x , _y ) = 0 then
4988: LD_VAR 0 7
4992: PPUSH
4993: LD_VAR 0 8
4997: PPUSH
4998: CALL_OW 428
5002: PUSH
5003: LD_INT 0
5005: EQUAL
5006: IFFALSE 5031
// begin ComMoveXY ( unit , _x , _y ) ;
5008: LD_VAR 0 1
5012: PPUSH
5013: LD_VAR 0 7
5017: PPUSH
5018: LD_VAR 0 8
5022: PPUSH
5023: CALL_OW 111
// exit ;
5027: POP
5028: POP
5029: GO 5035
// end ; end ;
5031: GO 4920
5033: POP
5034: POP
// end ;
5035: LD_VAR 0 3
5039: RET
// export function ScanBase ( side , base_area ) ; begin
5040: LD_INT 0
5042: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5043: LD_ADDR_VAR 0 3
5047: PUSH
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 81
5055: PUSH
5056: LD_VAR 0 1
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 70
5069: ST_TO_ADDR
// end ;
5070: LD_VAR 0 3
5074: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5075: LD_INT 0
5077: PPUSH
5078: PPUSH
5079: PPUSH
5080: PPUSH
// result := false ;
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: LD_INT 0
5088: ST_TO_ADDR
// side := GetSide ( unit ) ;
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 255
5103: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5104: LD_ADDR_VAR 0 4
5108: PUSH
5109: LD_VAR 0 1
5113: PPUSH
5114: CALL_OW 248
5118: ST_TO_ADDR
// case nat of 1 :
5119: LD_VAR 0 4
5123: PUSH
5124: LD_INT 1
5126: DOUBLE
5127: EQUAL
5128: IFTRUE 5132
5130: GO 5143
5132: POP
// tech := tech_lassight ; 2 :
5133: LD_ADDR_VAR 0 5
5137: PUSH
5138: LD_INT 12
5140: ST_TO_ADDR
5141: GO 5182
5143: LD_INT 2
5145: DOUBLE
5146: EQUAL
5147: IFTRUE 5151
5149: GO 5162
5151: POP
// tech := tech_mortar ; 3 :
5152: LD_ADDR_VAR 0 5
5156: PUSH
5157: LD_INT 41
5159: ST_TO_ADDR
5160: GO 5182
5162: LD_INT 3
5164: DOUBLE
5165: EQUAL
5166: IFTRUE 5170
5168: GO 5181
5170: POP
// tech := tech_bazooka ; end ;
5171: LD_ADDR_VAR 0 5
5175: PUSH
5176: LD_INT 44
5178: ST_TO_ADDR
5179: GO 5182
5181: POP
// if Researched ( side , tech ) then
5182: LD_VAR 0 3
5186: PPUSH
5187: LD_VAR 0 5
5191: PPUSH
5192: CALL_OW 325
5196: IFFALSE 5223
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5198: LD_ADDR_VAR 0 2
5202: PUSH
5203: LD_INT 5
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: LD_INT 9
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: PUSH
5217: LD_VAR 0 4
5221: ARRAY
5222: ST_TO_ADDR
// end ;
5223: LD_VAR 0 2
5227: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5228: LD_INT 0
5230: PPUSH
5231: PPUSH
5232: PPUSH
// if not mines then
5233: LD_VAR 0 2
5237: NOT
5238: IFFALSE 5242
// exit ;
5240: GO 5386
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5242: LD_ADDR_VAR 0 5
5246: PUSH
5247: LD_INT 81
5249: PUSH
5250: LD_VAR 0 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 3
5261: PUSH
5262: LD_INT 21
5264: PUSH
5265: LD_INT 3
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PPUSH
5280: CALL_OW 69
5284: ST_TO_ADDR
// for i in mines do
5285: LD_ADDR_VAR 0 4
5289: PUSH
5290: LD_VAR 0 2
5294: PUSH
5295: FOR_IN
5296: IFFALSE 5384
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_VAR 0 4
5311: PUSH
5312: LD_INT 2
5314: ARRAY
5315: PPUSH
5316: CALL_OW 458
5320: NOT
5321: IFFALSE 5325
// continue ;
5323: GO 5295
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5325: LD_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ARRAY
5333: PPUSH
5334: LD_VAR 0 4
5338: PUSH
5339: LD_INT 2
5341: ARRAY
5342: PPUSH
5343: CALL_OW 428
5347: PUSH
5348: LD_VAR 0 5
5352: IN
5353: IFFALSE 5382
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5355: LD_VAR 0 4
5359: PUSH
5360: LD_INT 1
5362: ARRAY
5363: PPUSH
5364: LD_VAR 0 4
5368: PUSH
5369: LD_INT 2
5371: ARRAY
5372: PPUSH
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 456
// end ;
5382: GO 5295
5384: POP
5385: POP
// end ;
5386: LD_VAR 0 3
5390: RET
// export function Count ( array ) ; var i ; begin
5391: LD_INT 0
5393: PPUSH
5394: PPUSH
// result := 0 ;
5395: LD_ADDR_VAR 0 2
5399: PUSH
5400: LD_INT 0
5402: ST_TO_ADDR
// for i in array do
5403: LD_ADDR_VAR 0 3
5407: PUSH
5408: LD_VAR 0 1
5412: PUSH
5413: FOR_IN
5414: IFFALSE 5438
// if i then
5416: LD_VAR 0 3
5420: IFFALSE 5436
// result := result + 1 ;
5422: LD_ADDR_VAR 0 2
5426: PUSH
5427: LD_VAR 0 2
5431: PUSH
5432: LD_INT 1
5434: PLUS
5435: ST_TO_ADDR
5436: GO 5413
5438: POP
5439: POP
// end ;
5440: LD_VAR 0 2
5444: RET
// export function IsEmpty ( building ) ; begin
5445: LD_INT 0
5447: PPUSH
// if not building then
5448: LD_VAR 0 1
5452: NOT
5453: IFFALSE 5457
// exit ;
5455: GO 5500
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5457: LD_ADDR_VAR 0 2
5461: PUSH
5462: LD_VAR 0 1
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_VAR 0 1
5474: PPUSH
5475: CALL_OW 255
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 58
5486: PUSH
5487: EMPTY
5488: LIST
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: IN
5499: ST_TO_ADDR
// end ;
5500: LD_VAR 0 2
5504: RET
// export function IsNotFull ( building ) ; var places ; begin
5505: LD_INT 0
5507: PPUSH
5508: PPUSH
// if not building then
5509: LD_VAR 0 1
5513: NOT
5514: IFFALSE 5518
// exit ;
5516: GO 5689
// result := false ;
5518: LD_ADDR_VAR 0 2
5522: PUSH
5523: LD_INT 0
5525: ST_TO_ADDR
// places := 0 ;
5526: LD_ADDR_VAR 0 3
5530: PUSH
5531: LD_INT 0
5533: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 266
5543: PUSH
5544: LD_INT 0
5546: DOUBLE
5547: EQUAL
5548: IFTRUE 5606
5550: LD_INT 1
5552: DOUBLE
5553: EQUAL
5554: IFTRUE 5606
5556: LD_INT 6
5558: DOUBLE
5559: EQUAL
5560: IFTRUE 5606
5562: LD_INT 7
5564: DOUBLE
5565: EQUAL
5566: IFTRUE 5606
5568: LD_INT 8
5570: DOUBLE
5571: EQUAL
5572: IFTRUE 5606
5574: LD_INT 4
5576: DOUBLE
5577: EQUAL
5578: IFTRUE 5606
5580: LD_INT 5
5582: DOUBLE
5583: EQUAL
5584: IFTRUE 5606
5586: LD_INT 2
5588: DOUBLE
5589: EQUAL
5590: IFTRUE 5606
5592: LD_INT 3
5594: DOUBLE
5595: EQUAL
5596: IFTRUE 5606
5598: LD_INT 35
5600: DOUBLE
5601: EQUAL
5602: IFTRUE 5606
5604: GO 5617
5606: POP
// places := 6 ; b_bunker , b_breastwork :
5607: LD_ADDR_VAR 0 3
5611: PUSH
5612: LD_INT 6
5614: ST_TO_ADDR
5615: GO 5662
5617: LD_INT 32
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5631
5623: LD_INT 31
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5631
5629: GO 5642
5631: POP
// places := 1 ; b_control_tower :
5632: LD_ADDR_VAR 0 3
5636: PUSH
5637: LD_INT 1
5639: ST_TO_ADDR
5640: GO 5662
5642: LD_INT 36
5644: DOUBLE
5645: EQUAL
5646: IFTRUE 5650
5648: GO 5661
5650: POP
// places := 3 ; end ;
5651: LD_ADDR_VAR 0 3
5655: PUSH
5656: LD_INT 3
5658: ST_TO_ADDR
5659: GO 5662
5661: POP
// if places then
5662: LD_VAR 0 3
5666: IFFALSE 5689
// result := UnitsInside ( building ) < places ;
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 313
5682: PUSH
5683: LD_VAR 0 3
5687: LESS
5688: ST_TO_ADDR
// end ;
5689: LD_VAR 0 2
5693: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
5699: PPUSH
// tmp := [ ] ;
5700: LD_ADDR_VAR 0 3
5704: PUSH
5705: EMPTY
5706: ST_TO_ADDR
// list := [ ] ;
5707: LD_ADDR_VAR 0 5
5711: PUSH
5712: EMPTY
5713: ST_TO_ADDR
// for i = 16 to 25 do
5714: LD_ADDR_VAR 0 4
5718: PUSH
5719: DOUBLE
5720: LD_INT 16
5722: DEC
5723: ST_TO_ADDR
5724: LD_INT 25
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5801
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5730: LD_ADDR_VAR 0 3
5734: PUSH
5735: LD_VAR 0 3
5739: PUSH
5740: LD_INT 22
5742: PUSH
5743: LD_VAR 0 1
5747: PPUSH
5748: CALL_OW 255
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PUSH
5757: LD_INT 91
5759: PUSH
5760: LD_VAR 0 1
5764: PUSH
5765: LD_INT 6
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 30
5775: PUSH
5776: LD_VAR 0 4
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: PPUSH
5793: CALL_OW 69
5797: ADD
5798: ST_TO_ADDR
5799: GO 5727
5801: POP
5802: POP
// for i = 1 to tmp do
5803: LD_ADDR_VAR 0 4
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_VAR 0 3
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5907
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5821: LD_ADDR_VAR 0 5
5825: PUSH
5826: LD_VAR 0 5
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: LD_VAR 0 4
5840: ARRAY
5841: PPUSH
5842: CALL_OW 266
5846: PUSH
5847: LD_VAR 0 3
5851: PUSH
5852: LD_VAR 0 4
5856: ARRAY
5857: PPUSH
5858: CALL_OW 250
5862: PUSH
5863: LD_VAR 0 3
5867: PUSH
5868: LD_VAR 0 4
5872: ARRAY
5873: PPUSH
5874: CALL_OW 251
5878: PUSH
5879: LD_VAR 0 3
5883: PUSH
5884: LD_VAR 0 4
5888: ARRAY
5889: PPUSH
5890: CALL_OW 254
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: ADD
5904: ST_TO_ADDR
5905: GO 5818
5907: POP
5908: POP
// result := list ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 5
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
5930: PPUSH
5931: PPUSH
5932: PPUSH
// if not factory then
5933: LD_VAR 0 1
5937: NOT
5938: IFFALSE 5942
// exit ;
5940: GO 6535
// if control = control_apeman then
5942: LD_VAR 0 4
5946: PUSH
5947: LD_INT 5
5949: EQUAL
5950: IFFALSE 6059
// begin tmp := UnitsInside ( factory ) ;
5952: LD_ADDR_VAR 0 8
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 313
5966: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5967: LD_VAR 0 8
5971: PPUSH
5972: LD_INT 25
5974: PUSH
5975: LD_INT 12
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PPUSH
5982: CALL_OW 72
5986: NOT
5987: IFFALSE 5997
// control := control_manual ;
5989: LD_ADDR_VAR 0 4
5993: PUSH
5994: LD_INT 1
5996: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5997: LD_ADDR_VAR 0 8
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL 5694 0 1
6011: ST_TO_ADDR
// if tmp then
6012: LD_VAR 0 8
6016: IFFALSE 6059
// begin for i in tmp do
6018: LD_ADDR_VAR 0 7
6022: PUSH
6023: LD_VAR 0 8
6027: PUSH
6028: FOR_IN
6029: IFFALSE 6057
// if i [ 1 ] = b_ext_radio then
6031: LD_VAR 0 7
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PUSH
6040: LD_INT 22
6042: EQUAL
6043: IFFALSE 6055
// begin control := control_remote ;
6045: LD_ADDR_VAR 0 4
6049: PUSH
6050: LD_INT 2
6052: ST_TO_ADDR
// break ;
6053: GO 6057
// end ;
6055: GO 6028
6057: POP
6058: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6059: LD_VAR 0 1
6063: PPUSH
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_VAR 0 3
6073: PPUSH
6074: LD_VAR 0 4
6078: PPUSH
6079: LD_VAR 0 5
6083: PPUSH
6084: CALL_OW 448
6088: IFFALSE 6123
// begin result := [ chassis , engine , control , weapon ] ;
6090: LD_ADDR_VAR 0 6
6094: PUSH
6095: LD_VAR 0 2
6099: PUSH
6100: LD_VAR 0 3
6104: PUSH
6105: LD_VAR 0 4
6109: PUSH
6110: LD_VAR 0 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: ST_TO_ADDR
// exit ;
6121: GO 6535
// end ; _chassis := AvailableChassisList ( factory ) ;
6123: LD_ADDR_VAR 0 9
6127: PUSH
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 475
6137: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6138: LD_ADDR_VAR 0 11
6142: PUSH
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 476
6152: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6153: LD_ADDR_VAR 0 12
6157: PUSH
6158: LD_VAR 0 1
6162: PPUSH
6163: CALL_OW 477
6167: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6168: LD_ADDR_VAR 0 10
6172: PUSH
6173: LD_VAR 0 1
6177: PPUSH
6178: CALL_OW 478
6182: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6183: LD_VAR 0 9
6187: NOT
6188: PUSH
6189: LD_VAR 0 11
6193: NOT
6194: OR
6195: PUSH
6196: LD_VAR 0 12
6200: NOT
6201: OR
6202: PUSH
6203: LD_VAR 0 10
6207: NOT
6208: OR
6209: IFFALSE 6244
// begin result := [ chassis , engine , control , weapon ] ;
6211: LD_ADDR_VAR 0 6
6215: PUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_VAR 0 3
6225: PUSH
6226: LD_VAR 0 4
6230: PUSH
6231: LD_VAR 0 5
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: ST_TO_ADDR
// exit ;
6242: GO 6535
// end ; if not chassis in _chassis then
6244: LD_VAR 0 2
6248: PUSH
6249: LD_VAR 0 9
6253: IN
6254: NOT
6255: IFFALSE 6281
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6257: LD_ADDR_VAR 0 2
6261: PUSH
6262: LD_VAR 0 9
6266: PUSH
6267: LD_INT 1
6269: PPUSH
6270: LD_VAR 0 9
6274: PPUSH
6275: CALL_OW 12
6279: ARRAY
6280: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6281: LD_VAR 0 2
6285: PPUSH
6286: LD_VAR 0 3
6290: PPUSH
6291: CALL 6540 0 2
6295: NOT
6296: IFFALSE 6355
// repeat engine := _engine [ 1 ] ;
6298: LD_ADDR_VAR 0 3
6302: PUSH
6303: LD_VAR 0 11
6307: PUSH
6308: LD_INT 1
6310: ARRAY
6311: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6312: LD_ADDR_VAR 0 11
6316: PUSH
6317: LD_VAR 0 11
6321: PPUSH
6322: LD_INT 1
6324: PPUSH
6325: CALL_OW 3
6329: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6330: LD_VAR 0 2
6334: PPUSH
6335: LD_VAR 0 3
6339: PPUSH
6340: CALL 6540 0 2
6344: PUSH
6345: LD_VAR 0 11
6349: PUSH
6350: EMPTY
6351: EQUAL
6352: OR
6353: IFFALSE 6298
// if not control in _control then
6355: LD_VAR 0 4
6359: PUSH
6360: LD_VAR 0 12
6364: IN
6365: NOT
6366: IFFALSE 6392
// control := _control [ rand ( 1 , _control ) ] ;
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: LD_VAR 0 12
6377: PUSH
6378: LD_INT 1
6380: PPUSH
6381: LD_VAR 0 12
6385: PPUSH
6386: CALL_OW 12
6390: ARRAY
6391: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6392: LD_VAR 0 2
6396: PPUSH
6397: LD_VAR 0 5
6401: PPUSH
6402: CALL 6760 0 2
6406: NOT
6407: IFFALSE 6466
// repeat weapon := _weapon [ 1 ] ;
6409: LD_ADDR_VAR 0 5
6413: PUSH
6414: LD_VAR 0 10
6418: PUSH
6419: LD_INT 1
6421: ARRAY
6422: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6423: LD_ADDR_VAR 0 10
6427: PUSH
6428: LD_VAR 0 10
6432: PPUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 3
6440: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6441: LD_VAR 0 2
6445: PPUSH
6446: LD_VAR 0 5
6450: PPUSH
6451: CALL 6760 0 2
6455: PUSH
6456: LD_VAR 0 10
6460: PUSH
6461: EMPTY
6462: EQUAL
6463: OR
6464: IFFALSE 6409
// result := [ ] ;
6466: LD_ADDR_VAR 0 6
6470: PUSH
6471: EMPTY
6472: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_VAR 0 3
6487: PPUSH
6488: LD_VAR 0 4
6492: PPUSH
6493: LD_VAR 0 5
6497: PPUSH
6498: CALL_OW 448
6502: IFFALSE 6535
// result := [ chassis , engine , control , weapon ] ;
6504: LD_ADDR_VAR 0 6
6508: PUSH
6509: LD_VAR 0 2
6513: PUSH
6514: LD_VAR 0 3
6518: PUSH
6519: LD_VAR 0 4
6523: PUSH
6524: LD_VAR 0 5
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: ST_TO_ADDR
// end ;
6535: LD_VAR 0 6
6539: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6540: LD_INT 0
6542: PPUSH
// if not chassis or not engine then
6543: LD_VAR 0 1
6547: NOT
6548: PUSH
6549: LD_VAR 0 2
6553: NOT
6554: OR
6555: IFFALSE 6559
// exit ;
6557: GO 6755
// case engine of engine_solar :
6559: LD_VAR 0 2
6563: PUSH
6564: LD_INT 2
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6610
6572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 11
6580: PUSH
6581: LD_INT 12
6583: PUSH
6584: LD_INT 13
6586: PUSH
6587: LD_INT 14
6589: PUSH
6590: LD_INT 1
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: ST_TO_ADDR
6608: GO 6739
6610: LD_INT 1
6612: DOUBLE
6613: EQUAL
6614: IFTRUE 6618
6616: GO 6680
6618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_INT 11
6626: PUSH
6627: LD_INT 12
6629: PUSH
6630: LD_INT 13
6632: PUSH
6633: LD_INT 14
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 4
6647: PUSH
6648: LD_INT 5
6650: PUSH
6651: LD_INT 21
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 22
6659: PUSH
6660: LD_INT 24
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
6678: GO 6739
6680: LD_INT 3
6682: DOUBLE
6683: EQUAL
6684: IFTRUE 6688
6686: GO 6738
6688: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6689: LD_ADDR_VAR 0 3
6693: PUSH
6694: LD_INT 13
6696: PUSH
6697: LD_INT 14
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 3
6705: PUSH
6706: LD_INT 4
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: LD_INT 21
6714: PUSH
6715: LD_INT 22
6717: PUSH
6718: LD_INT 23
6720: PUSH
6721: LD_INT 24
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: ST_TO_ADDR
6736: GO 6739
6738: POP
// result := ( chassis in result ) ;
6739: LD_ADDR_VAR 0 3
6743: PUSH
6744: LD_VAR 0 1
6748: PUSH
6749: LD_VAR 0 3
6753: IN
6754: ST_TO_ADDR
// end ;
6755: LD_VAR 0 3
6759: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6760: LD_INT 0
6762: PPUSH
// if not chassis or not weapon then
6763: LD_VAR 0 1
6767: NOT
6768: PUSH
6769: LD_VAR 0 2
6773: NOT
6774: OR
6775: IFFALSE 6779
// exit ;
6777: GO 7839
// case weapon of us_machine_gun :
6779: LD_VAR 0 2
6783: PUSH
6784: LD_INT 2
6786: DOUBLE
6787: EQUAL
6788: IFTRUE 6792
6790: GO 6822
6792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: LD_INT 2
6803: PUSH
6804: LD_INT 3
6806: PUSH
6807: LD_INT 4
6809: PUSH
6810: LD_INT 5
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: ST_TO_ADDR
6820: GO 7823
6822: LD_INT 3
6824: DOUBLE
6825: EQUAL
6826: IFTRUE 6830
6828: GO 6860
6830: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: LD_INT 2
6841: PUSH
6842: LD_INT 3
6844: PUSH
6845: LD_INT 4
6847: PUSH
6848: LD_INT 5
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: ST_TO_ADDR
6858: GO 7823
6860: LD_INT 11
6862: DOUBLE
6863: EQUAL
6864: IFTRUE 6868
6866: GO 6898
6868: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6869: LD_ADDR_VAR 0 3
6873: PUSH
6874: LD_INT 1
6876: PUSH
6877: LD_INT 2
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 4
6885: PUSH
6886: LD_INT 5
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: ST_TO_ADDR
6896: GO 7823
6898: LD_INT 4
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6906
6904: GO 6932
6906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: LD_INT 2
6914: PUSH
6915: LD_INT 3
6917: PUSH
6918: LD_INT 4
6920: PUSH
6921: LD_INT 5
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 7823
6932: LD_INT 5
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 6966
6940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6941: LD_ADDR_VAR 0 3
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: LD_INT 3
6951: PUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: ST_TO_ADDR
6964: GO 7823
6966: LD_INT 9
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 7000
6974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: LD_INT 2
6982: PUSH
6983: LD_INT 3
6985: PUSH
6986: LD_INT 4
6988: PUSH
6989: LD_INT 5
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: ST_TO_ADDR
6998: GO 7823
7000: LD_INT 7
7002: DOUBLE
7003: EQUAL
7004: IFTRUE 7008
7006: GO 7034
7008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: LD_INT 4
7022: PUSH
7023: LD_INT 5
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: ST_TO_ADDR
7032: GO 7823
7034: LD_INT 12
7036: DOUBLE
7037: EQUAL
7038: IFTRUE 7042
7040: GO 7068
7042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7043: LD_ADDR_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 3
7053: PUSH
7054: LD_INT 4
7056: PUSH
7057: LD_INT 5
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: ST_TO_ADDR
7066: GO 7823
7068: LD_INT 13
7070: DOUBLE
7071: EQUAL
7072: IFTRUE 7076
7074: GO 7102
7076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7077: LD_ADDR_VAR 0 3
7081: PUSH
7082: LD_INT 2
7084: PUSH
7085: LD_INT 3
7087: PUSH
7088: LD_INT 4
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 7823
7102: LD_INT 14
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7128
7110: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_INT 4
7118: PUSH
7119: LD_INT 5
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7823
7128: LD_INT 6
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7154
7136: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_INT 4
7144: PUSH
7145: LD_INT 5
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: ST_TO_ADDR
7152: GO 7823
7154: LD_INT 10
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7180
7162: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 4
7170: PUSH
7171: LD_INT 5
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: ST_TO_ADDR
7178: GO 7823
7180: LD_INT 22
7182: DOUBLE
7183: EQUAL
7184: IFTRUE 7188
7186: GO 7214
7188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7189: LD_ADDR_VAR 0 3
7193: PUSH
7194: LD_INT 11
7196: PUSH
7197: LD_INT 12
7199: PUSH
7200: LD_INT 13
7202: PUSH
7203: LD_INT 14
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: ST_TO_ADDR
7212: GO 7823
7214: LD_INT 23
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7248
7222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7223: LD_ADDR_VAR 0 3
7227: PUSH
7228: LD_INT 11
7230: PUSH
7231: LD_INT 12
7233: PUSH
7234: LD_INT 13
7236: PUSH
7237: LD_INT 14
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 7823
7248: LD_INT 24
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7282
7256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_INT 11
7264: PUSH
7265: LD_INT 12
7267: PUSH
7268: LD_INT 13
7270: PUSH
7271: LD_INT 14
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 7823
7282: LD_INT 30
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7316
7290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 11
7298: PUSH
7299: LD_INT 12
7301: PUSH
7302: LD_INT 13
7304: PUSH
7305: LD_INT 14
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
7314: GO 7823
7316: LD_INT 25
7318: DOUBLE
7319: EQUAL
7320: IFTRUE 7324
7322: GO 7342
7324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_INT 13
7332: PUSH
7333: LD_INT 14
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
7340: GO 7823
7342: LD_INT 27
7344: DOUBLE
7345: EQUAL
7346: IFTRUE 7350
7348: GO 7368
7350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7351: LD_ADDR_VAR 0 3
7355: PUSH
7356: LD_INT 13
7358: PUSH
7359: LD_INT 14
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: ST_TO_ADDR
7366: GO 7823
7368: LD_INT 92
7370: DOUBLE
7371: EQUAL
7372: IFTRUE 7376
7374: GO 7402
7376: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7377: LD_ADDR_VAR 0 3
7381: PUSH
7382: LD_INT 11
7384: PUSH
7385: LD_INT 12
7387: PUSH
7388: LD_INT 13
7390: PUSH
7391: LD_INT 14
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: ST_TO_ADDR
7400: GO 7823
7402: LD_INT 28
7404: DOUBLE
7405: EQUAL
7406: IFTRUE 7410
7408: GO 7428
7410: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7411: LD_ADDR_VAR 0 3
7415: PUSH
7416: LD_INT 13
7418: PUSH
7419: LD_INT 14
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: ST_TO_ADDR
7426: GO 7823
7428: LD_INT 29
7430: DOUBLE
7431: EQUAL
7432: IFTRUE 7436
7434: GO 7454
7436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7437: LD_ADDR_VAR 0 3
7441: PUSH
7442: LD_INT 13
7444: PUSH
7445: LD_INT 14
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: ST_TO_ADDR
7452: GO 7823
7454: LD_INT 31
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7480
7462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7463: LD_ADDR_VAR 0 3
7467: PUSH
7468: LD_INT 13
7470: PUSH
7471: LD_INT 14
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
7478: GO 7823
7480: LD_INT 26
7482: DOUBLE
7483: EQUAL
7484: IFTRUE 7488
7486: GO 7506
7488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7489: LD_ADDR_VAR 0 3
7493: PUSH
7494: LD_INT 13
7496: PUSH
7497: LD_INT 14
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: ST_TO_ADDR
7504: GO 7823
7506: LD_INT 42
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7540
7514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7515: LD_ADDR_VAR 0 3
7519: PUSH
7520: LD_INT 21
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 23
7528: PUSH
7529: LD_INT 24
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: ST_TO_ADDR
7538: GO 7823
7540: LD_INT 43
7542: DOUBLE
7543: EQUAL
7544: IFTRUE 7548
7546: GO 7574
7548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7549: LD_ADDR_VAR 0 3
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 23
7562: PUSH
7563: LD_INT 24
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: ST_TO_ADDR
7572: GO 7823
7574: LD_INT 44
7576: DOUBLE
7577: EQUAL
7578: IFTRUE 7582
7580: GO 7608
7582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7583: LD_ADDR_VAR 0 3
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 22
7593: PUSH
7594: LD_INT 23
7596: PUSH
7597: LD_INT 24
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: ST_TO_ADDR
7606: GO 7823
7608: LD_INT 45
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7642
7616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7617: LD_ADDR_VAR 0 3
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 22
7627: PUSH
7628: LD_INT 23
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: ST_TO_ADDR
7640: GO 7823
7642: LD_INT 49
7644: DOUBLE
7645: EQUAL
7646: IFTRUE 7650
7648: GO 7676
7650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7651: LD_ADDR_VAR 0 3
7655: PUSH
7656: LD_INT 21
7658: PUSH
7659: LD_INT 22
7661: PUSH
7662: LD_INT 23
7664: PUSH
7665: LD_INT 24
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
7674: GO 7823
7676: LD_INT 51
7678: DOUBLE
7679: EQUAL
7680: IFTRUE 7684
7682: GO 7710
7684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7685: LD_ADDR_VAR 0 3
7689: PUSH
7690: LD_INT 21
7692: PUSH
7693: LD_INT 22
7695: PUSH
7696: LD_INT 23
7698: PUSH
7699: LD_INT 24
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: ST_TO_ADDR
7708: GO 7823
7710: LD_INT 52
7712: DOUBLE
7713: EQUAL
7714: IFTRUE 7718
7716: GO 7744
7718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7719: LD_ADDR_VAR 0 3
7723: PUSH
7724: LD_INT 21
7726: PUSH
7727: LD_INT 22
7729: PUSH
7730: LD_INT 23
7732: PUSH
7733: LD_INT 24
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
7742: GO 7823
7744: LD_INT 53
7746: DOUBLE
7747: EQUAL
7748: IFTRUE 7752
7750: GO 7770
7752: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7753: LD_ADDR_VAR 0 3
7757: PUSH
7758: LD_INT 23
7760: PUSH
7761: LD_INT 24
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: ST_TO_ADDR
7768: GO 7823
7770: LD_INT 46
7772: DOUBLE
7773: EQUAL
7774: IFTRUE 7778
7776: GO 7796
7778: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7779: LD_ADDR_VAR 0 3
7783: PUSH
7784: LD_INT 23
7786: PUSH
7787: LD_INT 24
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: ST_TO_ADDR
7794: GO 7823
7796: LD_INT 47
7798: DOUBLE
7799: EQUAL
7800: IFTRUE 7804
7802: GO 7822
7804: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7805: LD_ADDR_VAR 0 3
7809: PUSH
7810: LD_INT 23
7812: PUSH
7813: LD_INT 24
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: ST_TO_ADDR
7820: GO 7823
7822: POP
// result := ( chassis in result ) ;
7823: LD_ADDR_VAR 0 3
7827: PUSH
7828: LD_VAR 0 1
7832: PUSH
7833: LD_VAR 0 3
7837: IN
7838: ST_TO_ADDR
// end ;
7839: LD_VAR 0 3
7843: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7844: LD_INT 0
7846: PPUSH
7847: PPUSH
7848: PPUSH
7849: PPUSH
7850: PPUSH
7851: PPUSH
7852: PPUSH
// result := array ;
7853: LD_ADDR_VAR 0 5
7857: PUSH
7858: LD_VAR 0 1
7862: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7863: LD_VAR 0 1
7867: NOT
7868: PUSH
7869: LD_VAR 0 2
7873: NOT
7874: OR
7875: PUSH
7876: LD_VAR 0 3
7880: NOT
7881: OR
7882: PUSH
7883: LD_VAR 0 2
7887: PUSH
7888: LD_VAR 0 1
7892: GREATER
7893: OR
7894: PUSH
7895: LD_VAR 0 3
7899: PUSH
7900: LD_VAR 0 1
7904: GREATER
7905: OR
7906: IFFALSE 7910
// exit ;
7908: GO 8206
// if direction then
7910: LD_VAR 0 4
7914: IFFALSE 7978
// begin d := 1 ;
7916: LD_ADDR_VAR 0 9
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if i_from > i_to then
7924: LD_VAR 0 2
7928: PUSH
7929: LD_VAR 0 3
7933: GREATER
7934: IFFALSE 7960
// length := ( array - i_from ) + i_to else
7936: LD_ADDR_VAR 0 11
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_VAR 0 2
7950: MINUS
7951: PUSH
7952: LD_VAR 0 3
7956: PLUS
7957: ST_TO_ADDR
7958: GO 7976
// length := i_to - i_from ;
7960: LD_ADDR_VAR 0 11
7964: PUSH
7965: LD_VAR 0 3
7969: PUSH
7970: LD_VAR 0 2
7974: MINUS
7975: ST_TO_ADDR
// end else
7976: GO 8039
// begin d := - 1 ;
7978: LD_ADDR_VAR 0 9
7982: PUSH
7983: LD_INT 1
7985: NEG
7986: ST_TO_ADDR
// if i_from > i_to then
7987: LD_VAR 0 2
7991: PUSH
7992: LD_VAR 0 3
7996: GREATER
7997: IFFALSE 8017
// length := i_from - i_to else
7999: LD_ADDR_VAR 0 11
8003: PUSH
8004: LD_VAR 0 2
8008: PUSH
8009: LD_VAR 0 3
8013: MINUS
8014: ST_TO_ADDR
8015: GO 8039
// length := ( array - i_to ) + i_from ;
8017: LD_ADDR_VAR 0 11
8021: PUSH
8022: LD_VAR 0 1
8026: PUSH
8027: LD_VAR 0 3
8031: MINUS
8032: PUSH
8033: LD_VAR 0 2
8037: PLUS
8038: ST_TO_ADDR
// end ; if not length then
8039: LD_VAR 0 11
8043: NOT
8044: IFFALSE 8048
// exit ;
8046: GO 8206
// tmp := array ;
8048: LD_ADDR_VAR 0 10
8052: PUSH
8053: LD_VAR 0 1
8057: ST_TO_ADDR
// for i = 1 to length do
8058: LD_ADDR_VAR 0 6
8062: PUSH
8063: DOUBLE
8064: LD_INT 1
8066: DEC
8067: ST_TO_ADDR
8068: LD_VAR 0 11
8072: PUSH
8073: FOR_TO
8074: IFFALSE 8194
// begin for j = 1 to array do
8076: LD_ADDR_VAR 0 7
8080: PUSH
8081: DOUBLE
8082: LD_INT 1
8084: DEC
8085: ST_TO_ADDR
8086: LD_VAR 0 1
8090: PUSH
8091: FOR_TO
8092: IFFALSE 8180
// begin k := j + d ;
8094: LD_ADDR_VAR 0 8
8098: PUSH
8099: LD_VAR 0 7
8103: PUSH
8104: LD_VAR 0 9
8108: PLUS
8109: ST_TO_ADDR
// if k > array then
8110: LD_VAR 0 8
8114: PUSH
8115: LD_VAR 0 1
8119: GREATER
8120: IFFALSE 8130
// k := 1 ;
8122: LD_ADDR_VAR 0 8
8126: PUSH
8127: LD_INT 1
8129: ST_TO_ADDR
// if not k then
8130: LD_VAR 0 8
8134: NOT
8135: IFFALSE 8147
// k := array ;
8137: LD_ADDR_VAR 0 8
8141: PUSH
8142: LD_VAR 0 1
8146: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8147: LD_ADDR_VAR 0 10
8151: PUSH
8152: LD_VAR 0 10
8156: PPUSH
8157: LD_VAR 0 8
8161: PPUSH
8162: LD_VAR 0 1
8166: PUSH
8167: LD_VAR 0 7
8171: ARRAY
8172: PPUSH
8173: CALL_OW 1
8177: ST_TO_ADDR
// end ;
8178: GO 8091
8180: POP
8181: POP
// array := tmp ;
8182: LD_ADDR_VAR 0 1
8186: PUSH
8187: LD_VAR 0 10
8191: ST_TO_ADDR
// end ;
8192: GO 8073
8194: POP
8195: POP
// result := array ;
8196: LD_ADDR_VAR 0 5
8200: PUSH
8201: LD_VAR 0 1
8205: ST_TO_ADDR
// end ;
8206: LD_VAR 0 5
8210: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8211: LD_INT 0
8213: PPUSH
8214: PPUSH
// result := 0 ;
8215: LD_ADDR_VAR 0 3
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// if not array or not value in array then
8223: LD_VAR 0 1
8227: NOT
8228: PUSH
8229: LD_VAR 0 2
8233: PUSH
8234: LD_VAR 0 1
8238: IN
8239: NOT
8240: OR
8241: IFFALSE 8245
// exit ;
8243: GO 8299
// for i = 1 to array do
8245: LD_ADDR_VAR 0 4
8249: PUSH
8250: DOUBLE
8251: LD_INT 1
8253: DEC
8254: ST_TO_ADDR
8255: LD_VAR 0 1
8259: PUSH
8260: FOR_TO
8261: IFFALSE 8297
// if value = array [ i ] then
8263: LD_VAR 0 2
8267: PUSH
8268: LD_VAR 0 1
8272: PUSH
8273: LD_VAR 0 4
8277: ARRAY
8278: EQUAL
8279: IFFALSE 8295
// begin result := i ;
8281: LD_ADDR_VAR 0 3
8285: PUSH
8286: LD_VAR 0 4
8290: ST_TO_ADDR
// exit ;
8291: POP
8292: POP
8293: GO 8299
// end ;
8295: GO 8260
8297: POP
8298: POP
// end ;
8299: LD_VAR 0 3
8303: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8304: LD_INT 0
8306: PPUSH
// vc_chassis := chassis ;
8307: LD_ADDR_OWVAR 37
8311: PUSH
8312: LD_VAR 0 1
8316: ST_TO_ADDR
// vc_engine := engine ;
8317: LD_ADDR_OWVAR 39
8321: PUSH
8322: LD_VAR 0 2
8326: ST_TO_ADDR
// vc_control := control ;
8327: LD_ADDR_OWVAR 38
8331: PUSH
8332: LD_VAR 0 3
8336: ST_TO_ADDR
// vc_weapon := weapon ;
8337: LD_ADDR_OWVAR 40
8341: PUSH
8342: LD_VAR 0 4
8346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8347: LD_ADDR_OWVAR 41
8351: PUSH
8352: LD_VAR 0 5
8356: ST_TO_ADDR
// end ;
8357: LD_VAR 0 6
8361: RET
// export function WantPlant ( unit ) ; var task ; begin
8362: LD_INT 0
8364: PPUSH
8365: PPUSH
// result := false ;
8366: LD_ADDR_VAR 0 2
8370: PUSH
8371: LD_INT 0
8373: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8374: LD_ADDR_VAR 0 3
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 437
8388: ST_TO_ADDR
// if task then
8389: LD_VAR 0 3
8393: IFFALSE 8421
// if task [ 1 ] [ 1 ] = p then
8395: LD_VAR 0 3
8399: PUSH
8400: LD_INT 1
8402: ARRAY
8403: PUSH
8404: LD_INT 1
8406: ARRAY
8407: PUSH
8408: LD_STRING p
8410: EQUAL
8411: IFFALSE 8421
// result := true ;
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 2
8425: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8426: LD_INT 0
8428: PPUSH
8429: PPUSH
8430: PPUSH
8431: PPUSH
// if pos < 1 then
8432: LD_VAR 0 2
8436: PUSH
8437: LD_INT 1
8439: LESS
8440: IFFALSE 8444
// exit ;
8442: GO 8747
// if pos = 1 then
8444: LD_VAR 0 2
8448: PUSH
8449: LD_INT 1
8451: EQUAL
8452: IFFALSE 8485
// result := Replace ( arr , pos [ 1 ] , value ) else
8454: LD_ADDR_VAR 0 4
8458: PUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: LD_VAR 0 2
8468: PUSH
8469: LD_INT 1
8471: ARRAY
8472: PPUSH
8473: LD_VAR 0 3
8477: PPUSH
8478: CALL_OW 1
8482: ST_TO_ADDR
8483: GO 8747
// begin tmp := arr ;
8485: LD_ADDR_VAR 0 6
8489: PUSH
8490: LD_VAR 0 1
8494: ST_TO_ADDR
// s_arr := [ tmp ] ;
8495: LD_ADDR_VAR 0 7
8499: PUSH
8500: LD_VAR 0 6
8504: PUSH
8505: EMPTY
8506: LIST
8507: ST_TO_ADDR
// for i = 1 to pos - 1 do
8508: LD_ADDR_VAR 0 5
8512: PUSH
8513: DOUBLE
8514: LD_INT 1
8516: DEC
8517: ST_TO_ADDR
8518: LD_VAR 0 2
8522: PUSH
8523: LD_INT 1
8525: MINUS
8526: PUSH
8527: FOR_TO
8528: IFFALSE 8573
// begin tmp := tmp [ pos [ i ] ] ;
8530: LD_ADDR_VAR 0 6
8534: PUSH
8535: LD_VAR 0 6
8539: PUSH
8540: LD_VAR 0 2
8544: PUSH
8545: LD_VAR 0 5
8549: ARRAY
8550: ARRAY
8551: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8552: LD_ADDR_VAR 0 7
8556: PUSH
8557: LD_VAR 0 7
8561: PUSH
8562: LD_VAR 0 6
8566: PUSH
8567: EMPTY
8568: LIST
8569: ADD
8570: ST_TO_ADDR
// end ;
8571: GO 8527
8573: POP
8574: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8575: LD_ADDR_VAR 0 6
8579: PUSH
8580: LD_VAR 0 6
8584: PPUSH
8585: LD_VAR 0 2
8589: PUSH
8590: LD_VAR 0 2
8594: ARRAY
8595: PPUSH
8596: LD_VAR 0 3
8600: PPUSH
8601: CALL_OW 1
8605: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8606: LD_ADDR_VAR 0 7
8610: PUSH
8611: LD_VAR 0 7
8615: PPUSH
8616: LD_VAR 0 7
8620: PPUSH
8621: LD_VAR 0 6
8625: PPUSH
8626: CALL_OW 1
8630: ST_TO_ADDR
// for i = s_arr downto 2 do
8631: LD_ADDR_VAR 0 5
8635: PUSH
8636: DOUBLE
8637: LD_VAR 0 7
8641: INC
8642: ST_TO_ADDR
8643: LD_INT 2
8645: PUSH
8646: FOR_DOWNTO
8647: IFFALSE 8731
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8649: LD_ADDR_VAR 0 6
8653: PUSH
8654: LD_VAR 0 7
8658: PUSH
8659: LD_VAR 0 5
8663: PUSH
8664: LD_INT 1
8666: MINUS
8667: ARRAY
8668: PPUSH
8669: LD_VAR 0 2
8673: PUSH
8674: LD_VAR 0 5
8678: PUSH
8679: LD_INT 1
8681: MINUS
8682: ARRAY
8683: PPUSH
8684: LD_VAR 0 7
8688: PUSH
8689: LD_VAR 0 5
8693: ARRAY
8694: PPUSH
8695: CALL_OW 1
8699: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8700: LD_ADDR_VAR 0 7
8704: PUSH
8705: LD_VAR 0 7
8709: PPUSH
8710: LD_VAR 0 5
8714: PUSH
8715: LD_INT 1
8717: MINUS
8718: PPUSH
8719: LD_VAR 0 6
8723: PPUSH
8724: CALL_OW 1
8728: ST_TO_ADDR
// end ;
8729: GO 8646
8731: POP
8732: POP
// result := s_arr [ 1 ] ;
8733: LD_ADDR_VAR 0 4
8737: PUSH
8738: LD_VAR 0 7
8742: PUSH
8743: LD_INT 1
8745: ARRAY
8746: ST_TO_ADDR
// end ; end ;
8747: LD_VAR 0 4
8751: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8752: LD_INT 0
8754: PPUSH
8755: PPUSH
// if not list then
8756: LD_VAR 0 1
8760: NOT
8761: IFFALSE 8765
// exit ;
8763: GO 8856
// i := list [ pos1 ] ;
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: LD_VAR 0 1
8774: PUSH
8775: LD_VAR 0 2
8779: ARRAY
8780: ST_TO_ADDR
// if not i then
8781: LD_VAR 0 5
8785: NOT
8786: IFFALSE 8790
// exit ;
8788: GO 8856
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8790: LD_ADDR_VAR 0 1
8794: PUSH
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_VAR 0 2
8804: PPUSH
8805: LD_VAR 0 1
8809: PUSH
8810: LD_VAR 0 3
8814: ARRAY
8815: PPUSH
8816: CALL_OW 1
8820: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8821: LD_ADDR_VAR 0 1
8825: PUSH
8826: LD_VAR 0 1
8830: PPUSH
8831: LD_VAR 0 3
8835: PPUSH
8836: LD_VAR 0 5
8840: PPUSH
8841: CALL_OW 1
8845: ST_TO_ADDR
// result := list ;
8846: LD_ADDR_VAR 0 4
8850: PUSH
8851: LD_VAR 0 1
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 4
8860: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8861: LD_INT 0
8863: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8864: LD_ADDR_VAR 0 5
8868: PUSH
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 250
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 251
8888: PPUSH
8889: LD_VAR 0 2
8893: PPUSH
8894: LD_VAR 0 3
8898: PPUSH
8899: LD_VAR 0 4
8903: PPUSH
8904: CALL 8914 0 5
8908: ST_TO_ADDR
// end ;
8909: LD_VAR 0 5
8913: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8914: LD_INT 0
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
// if not list then
8920: LD_VAR 0 3
8924: NOT
8925: IFFALSE 8929
// exit ;
8927: GO 9317
// result := [ ] ;
8929: LD_ADDR_VAR 0 6
8933: PUSH
8934: EMPTY
8935: ST_TO_ADDR
// for i in list do
8936: LD_ADDR_VAR 0 7
8940: PUSH
8941: LD_VAR 0 3
8945: PUSH
8946: FOR_IN
8947: IFFALSE 9149
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8949: LD_ADDR_VAR 0 9
8953: PUSH
8954: LD_VAR 0 7
8958: PPUSH
8959: LD_VAR 0 1
8963: PPUSH
8964: LD_VAR 0 2
8968: PPUSH
8969: CALL_OW 297
8973: ST_TO_ADDR
// if not result then
8974: LD_VAR 0 6
8978: NOT
8979: IFFALSE 9005
// result := [ [ i , tmp ] ] else
8981: LD_ADDR_VAR 0 6
8985: PUSH
8986: LD_VAR 0 7
8990: PUSH
8991: LD_VAR 0 9
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: ST_TO_ADDR
9003: GO 9147
// begin if result [ result ] [ 2 ] < tmp then
9005: LD_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: ARRAY
9015: PUSH
9016: LD_INT 2
9018: ARRAY
9019: PUSH
9020: LD_VAR 0 9
9024: LESS
9025: IFFALSE 9067
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9027: LD_ADDR_VAR 0 6
9031: PUSH
9032: LD_VAR 0 6
9036: PPUSH
9037: LD_VAR 0 6
9041: PUSH
9042: LD_INT 1
9044: PLUS
9045: PPUSH
9046: LD_VAR 0 7
9050: PUSH
9051: LD_VAR 0 9
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 2
9064: ST_TO_ADDR
9065: GO 9147
// for j = 1 to result do
9067: LD_ADDR_VAR 0 8
9071: PUSH
9072: DOUBLE
9073: LD_INT 1
9075: DEC
9076: ST_TO_ADDR
9077: LD_VAR 0 6
9081: PUSH
9082: FOR_TO
9083: IFFALSE 9145
// begin if tmp < result [ j ] [ 2 ] then
9085: LD_VAR 0 9
9089: PUSH
9090: LD_VAR 0 6
9094: PUSH
9095: LD_VAR 0 8
9099: ARRAY
9100: PUSH
9101: LD_INT 2
9103: ARRAY
9104: LESS
9105: IFFALSE 9143
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9107: LD_ADDR_VAR 0 6
9111: PUSH
9112: LD_VAR 0 6
9116: PPUSH
9117: LD_VAR 0 8
9121: PPUSH
9122: LD_VAR 0 7
9126: PUSH
9127: LD_VAR 0 9
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 2
9140: ST_TO_ADDR
// break ;
9141: GO 9145
// end ; end ;
9143: GO 9082
9145: POP
9146: POP
// end ; end ;
9147: GO 8946
9149: POP
9150: POP
// if result and not asc then
9151: LD_VAR 0 6
9155: PUSH
9156: LD_VAR 0 4
9160: NOT
9161: AND
9162: IFFALSE 9237
// begin tmp := result ;
9164: LD_ADDR_VAR 0 9
9168: PUSH
9169: LD_VAR 0 6
9173: ST_TO_ADDR
// for i = tmp downto 1 do
9174: LD_ADDR_VAR 0 7
9178: PUSH
9179: DOUBLE
9180: LD_VAR 0 9
9184: INC
9185: ST_TO_ADDR
9186: LD_INT 1
9188: PUSH
9189: FOR_DOWNTO
9190: IFFALSE 9235
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9192: LD_ADDR_VAR 0 6
9196: PUSH
9197: LD_VAR 0 6
9201: PPUSH
9202: LD_VAR 0 9
9206: PUSH
9207: LD_VAR 0 7
9211: MINUS
9212: PUSH
9213: LD_INT 1
9215: PLUS
9216: PPUSH
9217: LD_VAR 0 9
9221: PUSH
9222: LD_VAR 0 7
9226: ARRAY
9227: PPUSH
9228: CALL_OW 1
9232: ST_TO_ADDR
9233: GO 9189
9235: POP
9236: POP
// end ; tmp := [ ] ;
9237: LD_ADDR_VAR 0 9
9241: PUSH
9242: EMPTY
9243: ST_TO_ADDR
// if mode then
9244: LD_VAR 0 5
9248: IFFALSE 9317
// begin for i = 1 to result do
9250: LD_ADDR_VAR 0 7
9254: PUSH
9255: DOUBLE
9256: LD_INT 1
9258: DEC
9259: ST_TO_ADDR
9260: LD_VAR 0 6
9264: PUSH
9265: FOR_TO
9266: IFFALSE 9305
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9268: LD_ADDR_VAR 0 9
9272: PUSH
9273: LD_VAR 0 9
9277: PPUSH
9278: LD_VAR 0 7
9282: PPUSH
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 7
9292: ARRAY
9293: PUSH
9294: LD_INT 1
9296: ARRAY
9297: PPUSH
9298: CALL_OW 1
9302: ST_TO_ADDR
9303: GO 9265
9305: POP
9306: POP
// result := tmp ;
9307: LD_ADDR_VAR 0 6
9311: PUSH
9312: LD_VAR 0 9
9316: ST_TO_ADDR
// end ; end ;
9317: LD_VAR 0 6
9321: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9322: LD_INT 0
9324: PPUSH
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
9329: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9330: LD_ADDR_VAR 0 5
9334: PUSH
9335: LD_INT 0
9337: PUSH
9338: LD_INT 0
9340: PUSH
9341: LD_INT 0
9343: PUSH
9344: EMPTY
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: ST_TO_ADDR
// if not x or not y then
9352: LD_VAR 0 2
9356: NOT
9357: PUSH
9358: LD_VAR 0 3
9362: NOT
9363: OR
9364: IFFALSE 9368
// exit ;
9366: GO 11018
// if not range then
9368: LD_VAR 0 4
9372: NOT
9373: IFFALSE 9383
// range := 10 ;
9375: LD_ADDR_VAR 0 4
9379: PUSH
9380: LD_INT 10
9382: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9383: LD_ADDR_VAR 0 8
9387: PUSH
9388: LD_INT 81
9390: PUSH
9391: LD_VAR 0 1
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 92
9402: PUSH
9403: LD_VAR 0 2
9407: PUSH
9408: LD_VAR 0 3
9412: PUSH
9413: LD_VAR 0 4
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 21
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 69
9450: ST_TO_ADDR
// if not tmp then
9451: LD_VAR 0 8
9455: NOT
9456: IFFALSE 9460
// exit ;
9458: GO 11018
// for i in tmp do
9460: LD_ADDR_VAR 0 6
9464: PUSH
9465: LD_VAR 0 8
9469: PUSH
9470: FOR_IN
9471: IFFALSE 10993
// begin points := [ 0 , 0 , 0 ] ;
9473: LD_ADDR_VAR 0 9
9477: PUSH
9478: LD_INT 0
9480: PUSH
9481: LD_INT 0
9483: PUSH
9484: LD_INT 0
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: ST_TO_ADDR
// bpoints := 1 ;
9492: LD_ADDR_VAR 0 10
9496: PUSH
9497: LD_INT 1
9499: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9500: LD_VAR 0 6
9504: PPUSH
9505: CALL_OW 247
9509: PUSH
9510: LD_INT 1
9512: DOUBLE
9513: EQUAL
9514: IFTRUE 9518
9516: GO 10096
9518: POP
// begin if GetClass ( i ) = 1 then
9519: LD_VAR 0 6
9523: PPUSH
9524: CALL_OW 257
9528: PUSH
9529: LD_INT 1
9531: EQUAL
9532: IFFALSE 9553
// points := [ 10 , 5 , 3 ] ;
9534: LD_ADDR_VAR 0 9
9538: PUSH
9539: LD_INT 10
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: LD_INT 3
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 257
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 3
9568: PUSH
9569: LD_INT 4
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: IN
9577: IFFALSE 9598
// points := [ 3 , 2 , 1 ] ;
9579: LD_ADDR_VAR 0 9
9583: PUSH
9584: LD_INT 3
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 257
9607: PUSH
9608: LD_INT 5
9610: EQUAL
9611: IFFALSE 9632
// points := [ 130 , 5 , 2 ] ;
9613: LD_ADDR_VAR 0 9
9617: PUSH
9618: LD_INT 130
9620: PUSH
9621: LD_INT 5
9623: PUSH
9624: LD_INT 2
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9632: LD_VAR 0 6
9636: PPUSH
9637: CALL_OW 257
9641: PUSH
9642: LD_INT 8
9644: EQUAL
9645: IFFALSE 9666
// points := [ 35 , 35 , 30 ] ;
9647: LD_ADDR_VAR 0 9
9651: PUSH
9652: LD_INT 35
9654: PUSH
9655: LD_INT 35
9657: PUSH
9658: LD_INT 30
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9666: LD_VAR 0 6
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 9
9678: EQUAL
9679: IFFALSE 9700
// points := [ 20 , 55 , 40 ] ;
9681: LD_ADDR_VAR 0 9
9685: PUSH
9686: LD_INT 20
9688: PUSH
9689: LD_INT 55
9691: PUSH
9692: LD_INT 40
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9700: LD_VAR 0 6
9704: PPUSH
9705: CALL_OW 257
9709: PUSH
9710: LD_INT 12
9712: PUSH
9713: LD_INT 16
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: IN
9720: IFFALSE 9741
// points := [ 5 , 3 , 2 ] ;
9722: LD_ADDR_VAR 0 9
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 3
9732: PUSH
9733: LD_INT 2
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9741: LD_VAR 0 6
9745: PPUSH
9746: CALL_OW 257
9750: PUSH
9751: LD_INT 17
9753: EQUAL
9754: IFFALSE 9775
// points := [ 100 , 50 , 75 ] ;
9756: LD_ADDR_VAR 0 9
9760: PUSH
9761: LD_INT 100
9763: PUSH
9764: LD_INT 50
9766: PUSH
9767: LD_INT 75
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9775: LD_VAR 0 6
9779: PPUSH
9780: CALL_OW 257
9784: PUSH
9785: LD_INT 15
9787: EQUAL
9788: IFFALSE 9809
// points := [ 10 , 5 , 3 ] ;
9790: LD_ADDR_VAR 0 9
9794: PUSH
9795: LD_INT 10
9797: PUSH
9798: LD_INT 5
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9809: LD_VAR 0 6
9813: PPUSH
9814: CALL_OW 257
9818: PUSH
9819: LD_INT 14
9821: EQUAL
9822: IFFALSE 9843
// points := [ 10 , 0 , 0 ] ;
9824: LD_ADDR_VAR 0 9
9828: PUSH
9829: LD_INT 10
9831: PUSH
9832: LD_INT 0
9834: PUSH
9835: LD_INT 0
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9843: LD_VAR 0 6
9847: PPUSH
9848: CALL_OW 257
9852: PUSH
9853: LD_INT 11
9855: EQUAL
9856: IFFALSE 9877
// points := [ 30 , 10 , 5 ] ;
9858: LD_ADDR_VAR 0 9
9862: PUSH
9863: LD_INT 30
9865: PUSH
9866: LD_INT 10
9868: PUSH
9869: LD_INT 5
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9877: LD_VAR 0 1
9881: PPUSH
9882: LD_INT 5
9884: PPUSH
9885: CALL_OW 321
9889: PUSH
9890: LD_INT 2
9892: EQUAL
9893: IFFALSE 9910
// bpoints := bpoints * 1.8 ;
9895: LD_ADDR_VAR 0 10
9899: PUSH
9900: LD_VAR 0 10
9904: PUSH
9905: LD_REAL  1.80000000000000E+0000
9908: MUL
9909: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9910: LD_VAR 0 6
9914: PPUSH
9915: CALL_OW 257
9919: PUSH
9920: LD_INT 1
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: LD_INT 3
9928: PUSH
9929: LD_INT 4
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: IN
9938: PUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: LD_INT 51
9946: PPUSH
9947: CALL_OW 321
9951: PUSH
9952: LD_INT 2
9954: EQUAL
9955: AND
9956: IFFALSE 9973
// bpoints := bpoints * 1.2 ;
9958: LD_ADDR_VAR 0 10
9962: PUSH
9963: LD_VAR 0 10
9967: PUSH
9968: LD_REAL  1.20000000000000E+0000
9971: MUL
9972: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 257
9982: PUSH
9983: LD_INT 5
9985: PUSH
9986: LD_INT 7
9988: PUSH
9989: LD_INT 9
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: IN
9997: PUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: LD_INT 52
10005: PPUSH
10006: CALL_OW 321
10010: PUSH
10011: LD_INT 2
10013: EQUAL
10014: AND
10015: IFFALSE 10032
// bpoints := bpoints * 1.5 ;
10017: LD_ADDR_VAR 0 10
10021: PUSH
10022: LD_VAR 0 10
10026: PUSH
10027: LD_REAL  1.50000000000000E+0000
10030: MUL
10031: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10032: LD_VAR 0 1
10036: PPUSH
10037: LD_INT 66
10039: PPUSH
10040: CALL_OW 321
10044: PUSH
10045: LD_INT 2
10047: EQUAL
10048: IFFALSE 10065
// bpoints := bpoints * 1.1 ;
10050: LD_ADDR_VAR 0 10
10054: PUSH
10055: LD_VAR 0 10
10059: PUSH
10060: LD_REAL  1.10000000000000E+0000
10063: MUL
10064: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10065: LD_ADDR_VAR 0 10
10069: PUSH
10070: LD_VAR 0 10
10074: PUSH
10075: LD_VAR 0 6
10079: PPUSH
10080: LD_INT 1
10082: PPUSH
10083: CALL_OW 259
10087: PUSH
10088: LD_REAL  1.15000000000000E+0000
10091: MUL
10092: MUL
10093: ST_TO_ADDR
// end ; unit_vehicle :
10094: GO 10922
10096: LD_INT 2
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10910
10104: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10105: LD_VAR 0 6
10109: PPUSH
10110: CALL_OW 264
10114: PUSH
10115: LD_INT 2
10117: PUSH
10118: LD_INT 42
10120: PUSH
10121: LD_INT 24
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: IN
10129: IFFALSE 10150
// points := [ 25 , 5 , 3 ] ;
10131: LD_ADDR_VAR 0 9
10135: PUSH
10136: LD_INT 25
10138: PUSH
10139: LD_INT 5
10141: PUSH
10142: LD_INT 3
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: LIST
10149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL_OW 264
10159: PUSH
10160: LD_INT 4
10162: PUSH
10163: LD_INT 43
10165: PUSH
10166: LD_INT 25
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: IN
10174: IFFALSE 10195
// points := [ 40 , 15 , 5 ] ;
10176: LD_ADDR_VAR 0 9
10180: PUSH
10181: LD_INT 40
10183: PUSH
10184: LD_INT 15
10186: PUSH
10187: LD_INT 5
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10195: LD_VAR 0 6
10199: PPUSH
10200: CALL_OW 264
10204: PUSH
10205: LD_INT 3
10207: PUSH
10208: LD_INT 23
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: IN
10215: IFFALSE 10236
// points := [ 7 , 25 , 8 ] ;
10217: LD_ADDR_VAR 0 9
10221: PUSH
10222: LD_INT 7
10224: PUSH
10225: LD_INT 25
10227: PUSH
10228: LD_INT 8
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 264
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: LD_INT 27
10251: PUSH
10252: LD_INT 44
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: IN
10260: IFFALSE 10281
// points := [ 14 , 50 , 16 ] ;
10262: LD_ADDR_VAR 0 9
10266: PUSH
10267: LD_INT 14
10269: PUSH
10270: LD_INT 50
10272: PUSH
10273: LD_INT 16
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10281: LD_VAR 0 6
10285: PPUSH
10286: CALL_OW 264
10290: PUSH
10291: LD_INT 6
10293: PUSH
10294: LD_INT 46
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: IN
10301: IFFALSE 10322
// points := [ 32 , 120 , 70 ] ;
10303: LD_ADDR_VAR 0 9
10307: PUSH
10308: LD_INT 32
10310: PUSH
10311: LD_INT 120
10313: PUSH
10314: LD_INT 70
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10322: LD_VAR 0 6
10326: PPUSH
10327: CALL_OW 264
10331: PUSH
10332: LD_INT 7
10334: PUSH
10335: LD_INT 28
10337: PUSH
10338: LD_INT 45
10340: PUSH
10341: LD_INT 92
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: IN
10350: IFFALSE 10371
// points := [ 35 , 20 , 45 ] ;
10352: LD_ADDR_VAR 0 9
10356: PUSH
10357: LD_INT 35
10359: PUSH
10360: LD_INT 20
10362: PUSH
10363: LD_INT 45
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10371: LD_VAR 0 6
10375: PPUSH
10376: CALL_OW 264
10380: PUSH
10381: LD_INT 47
10383: PUSH
10384: EMPTY
10385: LIST
10386: IN
10387: IFFALSE 10408
// points := [ 67 , 45 , 75 ] ;
10389: LD_ADDR_VAR 0 9
10393: PUSH
10394: LD_INT 67
10396: PUSH
10397: LD_INT 45
10399: PUSH
10400: LD_INT 75
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10408: LD_VAR 0 6
10412: PPUSH
10413: CALL_OW 264
10417: PUSH
10418: LD_INT 26
10420: PUSH
10421: EMPTY
10422: LIST
10423: IN
10424: IFFALSE 10445
// points := [ 120 , 30 , 80 ] ;
10426: LD_ADDR_VAR 0 9
10430: PUSH
10431: LD_INT 120
10433: PUSH
10434: LD_INT 30
10436: PUSH
10437: LD_INT 80
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10445: LD_VAR 0 6
10449: PPUSH
10450: CALL_OW 264
10454: PUSH
10455: LD_INT 22
10457: PUSH
10458: EMPTY
10459: LIST
10460: IN
10461: IFFALSE 10482
// points := [ 40 , 1 , 1 ] ;
10463: LD_ADDR_VAR 0 9
10467: PUSH
10468: LD_INT 40
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: LD_INT 1
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10482: LD_VAR 0 6
10486: PPUSH
10487: CALL_OW 264
10491: PUSH
10492: LD_INT 29
10494: PUSH
10495: EMPTY
10496: LIST
10497: IN
10498: IFFALSE 10519
// points := [ 70 , 200 , 400 ] ;
10500: LD_ADDR_VAR 0 9
10504: PUSH
10505: LD_INT 70
10507: PUSH
10508: LD_INT 200
10510: PUSH
10511: LD_INT 400
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10519: LD_VAR 0 6
10523: PPUSH
10524: CALL_OW 264
10528: PUSH
10529: LD_INT 14
10531: PUSH
10532: LD_INT 53
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: IN
10539: IFFALSE 10560
// points := [ 40 , 10 , 20 ] ;
10541: LD_ADDR_VAR 0 9
10545: PUSH
10546: LD_INT 40
10548: PUSH
10549: LD_INT 10
10551: PUSH
10552: LD_INT 20
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10560: LD_VAR 0 6
10564: PPUSH
10565: CALL_OW 264
10569: PUSH
10570: LD_INT 9
10572: PUSH
10573: EMPTY
10574: LIST
10575: IN
10576: IFFALSE 10597
// points := [ 5 , 70 , 20 ] ;
10578: LD_ADDR_VAR 0 9
10582: PUSH
10583: LD_INT 5
10585: PUSH
10586: LD_INT 70
10588: PUSH
10589: LD_INT 20
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10597: LD_VAR 0 6
10601: PPUSH
10602: CALL_OW 264
10606: PUSH
10607: LD_INT 10
10609: PUSH
10610: EMPTY
10611: LIST
10612: IN
10613: IFFALSE 10634
// points := [ 35 , 110 , 70 ] ;
10615: LD_ADDR_VAR 0 9
10619: PUSH
10620: LD_INT 35
10622: PUSH
10623: LD_INT 110
10625: PUSH
10626: LD_INT 70
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10634: LD_VAR 0 6
10638: PPUSH
10639: CALL_OW 265
10643: PUSH
10644: LD_INT 25
10646: EQUAL
10647: IFFALSE 10668
// points := [ 80 , 65 , 100 ] ;
10649: LD_ADDR_VAR 0 9
10653: PUSH
10654: LD_INT 80
10656: PUSH
10657: LD_INT 65
10659: PUSH
10660: LD_INT 100
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10668: LD_VAR 0 6
10672: PPUSH
10673: CALL_OW 263
10677: PUSH
10678: LD_INT 1
10680: EQUAL
10681: IFFALSE 10716
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10683: LD_ADDR_VAR 0 10
10687: PUSH
10688: LD_VAR 0 10
10692: PUSH
10693: LD_VAR 0 6
10697: PPUSH
10698: CALL_OW 311
10702: PPUSH
10703: LD_INT 3
10705: PPUSH
10706: CALL_OW 259
10710: PUSH
10711: LD_INT 4
10713: MUL
10714: MUL
10715: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10716: LD_VAR 0 6
10720: PPUSH
10721: CALL_OW 263
10725: PUSH
10726: LD_INT 2
10728: EQUAL
10729: IFFALSE 10780
// begin j := IsControledBy ( i ) ;
10731: LD_ADDR_VAR 0 7
10735: PUSH
10736: LD_VAR 0 6
10740: PPUSH
10741: CALL_OW 312
10745: ST_TO_ADDR
// if j then
10746: LD_VAR 0 7
10750: IFFALSE 10780
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10752: LD_ADDR_VAR 0 10
10756: PUSH
10757: LD_VAR 0 10
10761: PUSH
10762: LD_VAR 0 7
10766: PPUSH
10767: LD_INT 3
10769: PPUSH
10770: CALL_OW 259
10774: PUSH
10775: LD_INT 3
10777: MUL
10778: MUL
10779: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10780: LD_VAR 0 6
10784: PPUSH
10785: CALL_OW 264
10789: PUSH
10790: LD_INT 5
10792: PUSH
10793: LD_INT 6
10795: PUSH
10796: LD_INT 46
10798: PUSH
10799: LD_INT 44
10801: PUSH
10802: LD_INT 47
10804: PUSH
10805: LD_INT 45
10807: PUSH
10808: LD_INT 28
10810: PUSH
10811: LD_INT 7
10813: PUSH
10814: LD_INT 27
10816: PUSH
10817: LD_INT 29
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: IN
10832: PUSH
10833: LD_VAR 0 1
10837: PPUSH
10838: LD_INT 52
10840: PPUSH
10841: CALL_OW 321
10845: PUSH
10846: LD_INT 2
10848: EQUAL
10849: AND
10850: IFFALSE 10867
// bpoints := bpoints * 1.2 ;
10852: LD_ADDR_VAR 0 10
10856: PUSH
10857: LD_VAR 0 10
10861: PUSH
10862: LD_REAL  1.20000000000000E+0000
10865: MUL
10866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10867: LD_VAR 0 6
10871: PPUSH
10872: CALL_OW 264
10876: PUSH
10877: LD_INT 6
10879: PUSH
10880: LD_INT 46
10882: PUSH
10883: LD_INT 47
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: IN
10891: IFFALSE 10908
// bpoints := bpoints * 1.2 ;
10893: LD_ADDR_VAR 0 10
10897: PUSH
10898: LD_VAR 0 10
10902: PUSH
10903: LD_REAL  1.20000000000000E+0000
10906: MUL
10907: ST_TO_ADDR
// end ; unit_building :
10908: GO 10922
10910: LD_INT 3
10912: DOUBLE
10913: EQUAL
10914: IFTRUE 10918
10916: GO 10921
10918: POP
// ; end ;
10919: GO 10922
10921: POP
// for j = 1 to 3 do
10922: LD_ADDR_VAR 0 7
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_INT 3
10934: PUSH
10935: FOR_TO
10936: IFFALSE 10989
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10938: LD_ADDR_VAR 0 5
10942: PUSH
10943: LD_VAR 0 5
10947: PPUSH
10948: LD_VAR 0 7
10952: PPUSH
10953: LD_VAR 0 5
10957: PUSH
10958: LD_VAR 0 7
10962: ARRAY
10963: PUSH
10964: LD_VAR 0 9
10968: PUSH
10969: LD_VAR 0 7
10973: ARRAY
10974: PUSH
10975: LD_VAR 0 10
10979: MUL
10980: PLUS
10981: PPUSH
10982: CALL_OW 1
10986: ST_TO_ADDR
10987: GO 10935
10989: POP
10990: POP
// end ;
10991: GO 9470
10993: POP
10994: POP
// result := Replace ( result , 4 , tmp ) ;
10995: LD_ADDR_VAR 0 5
10999: PUSH
11000: LD_VAR 0 5
11004: PPUSH
11005: LD_INT 4
11007: PPUSH
11008: LD_VAR 0 8
11012: PPUSH
11013: CALL_OW 1
11017: ST_TO_ADDR
// end ;
11018: LD_VAR 0 5
11022: RET
// export function DangerAtRange ( unit , range ) ; begin
11023: LD_INT 0
11025: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11026: LD_ADDR_VAR 0 3
11030: PUSH
11031: LD_VAR 0 1
11035: PPUSH
11036: CALL_OW 255
11040: PPUSH
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL_OW 250
11050: PPUSH
11051: LD_VAR 0 1
11055: PPUSH
11056: CALL_OW 251
11060: PPUSH
11061: LD_VAR 0 2
11065: PPUSH
11066: CALL 9322 0 4
11070: ST_TO_ADDR
// end ;
11071: LD_VAR 0 3
11075: RET
// export function DangerInArea ( side , area ) ; begin
11076: LD_INT 0
11078: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11079: LD_ADDR_VAR 0 3
11083: PUSH
11084: LD_VAR 0 2
11088: PPUSH
11089: LD_INT 81
11091: PUSH
11092: LD_VAR 0 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 70
11105: ST_TO_ADDR
// end ;
11106: LD_VAR 0 3
11110: RET
// export function IsExtension ( b ) ; begin
11111: LD_INT 0
11113: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: LD_VAR 0 1
11123: PUSH
11124: LD_INT 23
11126: PUSH
11127: LD_INT 20
11129: PUSH
11130: LD_INT 22
11132: PUSH
11133: LD_INT 17
11135: PUSH
11136: LD_INT 24
11138: PUSH
11139: LD_INT 21
11141: PUSH
11142: LD_INT 19
11144: PUSH
11145: LD_INT 16
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 18
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: IN
11166: ST_TO_ADDR
// end ;
11167: LD_VAR 0 2
11171: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11172: LD_INT 0
11174: PPUSH
11175: PPUSH
11176: PPUSH
// result := [ ] ;
11177: LD_ADDR_VAR 0 4
11181: PUSH
11182: EMPTY
11183: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11184: LD_ADDR_VAR 0 5
11188: PUSH
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 21
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PPUSH
11204: CALL_OW 70
11208: ST_TO_ADDR
// if not tmp then
11209: LD_VAR 0 5
11213: NOT
11214: IFFALSE 11218
// exit ;
11216: GO 11282
// if checkLink then
11218: LD_VAR 0 3
11222: IFFALSE 11272
// begin for i in tmp do
11224: LD_ADDR_VAR 0 6
11228: PUSH
11229: LD_VAR 0 5
11233: PUSH
11234: FOR_IN
11235: IFFALSE 11270
// if GetBase ( i ) <> base then
11237: LD_VAR 0 6
11241: PPUSH
11242: CALL_OW 274
11246: PUSH
11247: LD_VAR 0 1
11251: NONEQUAL
11252: IFFALSE 11268
// ComLinkToBase ( base , i ) ;
11254: LD_VAR 0 1
11258: PPUSH
11259: LD_VAR 0 6
11263: PPUSH
11264: CALL_OW 169
11268: GO 11234
11270: POP
11271: POP
// end ; result := tmp ;
11272: LD_ADDR_VAR 0 4
11276: PUSH
11277: LD_VAR 0 5
11281: ST_TO_ADDR
// end ;
11282: LD_VAR 0 4
11286: RET
// export function ComComplete ( units , b ) ; var i ; begin
11287: LD_INT 0
11289: PPUSH
11290: PPUSH
// if not units then
11291: LD_VAR 0 1
11295: NOT
11296: IFFALSE 11300
// exit ;
11298: GO 11390
// for i in units do
11300: LD_ADDR_VAR 0 4
11304: PUSH
11305: LD_VAR 0 1
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11388
// if BuildingStatus ( b ) = bs_build then
11313: LD_VAR 0 2
11317: PPUSH
11318: CALL_OW 461
11322: PUSH
11323: LD_INT 1
11325: EQUAL
11326: IFFALSE 11386
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11328: LD_VAR 0 4
11332: PPUSH
11333: LD_STRING h
11335: PUSH
11336: LD_VAR 0 2
11340: PPUSH
11341: CALL_OW 250
11345: PUSH
11346: LD_VAR 0 2
11350: PPUSH
11351: CALL_OW 251
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: LD_INT 0
11363: PUSH
11364: LD_INT 0
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: PPUSH
11382: CALL_OW 446
11386: GO 11310
11388: POP
11389: POP
// end ;
11390: LD_VAR 0 3
11394: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11403: LD_VAR 0 1
11407: NOT
11408: PUSH
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 263
11418: PUSH
11419: LD_INT 2
11421: NONEQUAL
11422: OR
11423: IFFALSE 11427
// exit ;
11425: GO 11743
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11427: LD_ADDR_VAR 0 6
11431: PUSH
11432: LD_INT 22
11434: PUSH
11435: LD_VAR 0 1
11439: PPUSH
11440: CALL_OW 255
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 2
11451: PUSH
11452: LD_INT 30
11454: PUSH
11455: LD_INT 36
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 34
11464: PUSH
11465: LD_INT 31
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: ST_TO_ADDR
// if not tmp then
11486: LD_VAR 0 6
11490: NOT
11491: IFFALSE 11495
// exit ;
11493: GO 11743
// result := [ ] ;
11495: LD_ADDR_VAR 0 2
11499: PUSH
11500: EMPTY
11501: ST_TO_ADDR
// for i in tmp do
11502: LD_ADDR_VAR 0 3
11506: PUSH
11507: LD_VAR 0 6
11511: PUSH
11512: FOR_IN
11513: IFFALSE 11584
// begin t := UnitsInside ( i ) ;
11515: LD_ADDR_VAR 0 4
11519: PUSH
11520: LD_VAR 0 3
11524: PPUSH
11525: CALL_OW 313
11529: ST_TO_ADDR
// if t then
11530: LD_VAR 0 4
11534: IFFALSE 11582
// for j in t do
11536: LD_ADDR_VAR 0 7
11540: PUSH
11541: LD_VAR 0 4
11545: PUSH
11546: FOR_IN
11547: IFFALSE 11580
// result := Replace ( result , result + 1 , j ) ;
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: LD_VAR 0 2
11558: PPUSH
11559: LD_VAR 0 2
11563: PUSH
11564: LD_INT 1
11566: PLUS
11567: PPUSH
11568: LD_VAR 0 7
11572: PPUSH
11573: CALL_OW 1
11577: ST_TO_ADDR
11578: GO 11546
11580: POP
11581: POP
// end ;
11582: GO 11512
11584: POP
11585: POP
// if not result then
11586: LD_VAR 0 2
11590: NOT
11591: IFFALSE 11595
// exit ;
11593: GO 11743
// mech := result [ 1 ] ;
11595: LD_ADDR_VAR 0 5
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_INT 1
11607: ARRAY
11608: ST_TO_ADDR
// if result > 1 then
11609: LD_VAR 0 2
11613: PUSH
11614: LD_INT 1
11616: GREATER
11617: IFFALSE 11729
// begin for i = 2 to result do
11619: LD_ADDR_VAR 0 3
11623: PUSH
11624: DOUBLE
11625: LD_INT 2
11627: DEC
11628: ST_TO_ADDR
11629: LD_VAR 0 2
11633: PUSH
11634: FOR_TO
11635: IFFALSE 11727
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11637: LD_ADDR_VAR 0 4
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_VAR 0 3
11651: ARRAY
11652: PPUSH
11653: LD_INT 3
11655: PPUSH
11656: CALL_OW 259
11660: PUSH
11661: LD_VAR 0 2
11665: PUSH
11666: LD_VAR 0 3
11670: ARRAY
11671: PPUSH
11672: CALL_OW 432
11676: MINUS
11677: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11678: LD_VAR 0 4
11682: PUSH
11683: LD_VAR 0 5
11687: PPUSH
11688: LD_INT 3
11690: PPUSH
11691: CALL_OW 259
11695: PUSH
11696: LD_VAR 0 5
11700: PPUSH
11701: CALL_OW 432
11705: MINUS
11706: GREATEREQUAL
11707: IFFALSE 11725
// mech := result [ i ] ;
11709: LD_ADDR_VAR 0 5
11713: PUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_VAR 0 3
11723: ARRAY
11724: ST_TO_ADDR
// end ;
11725: GO 11634
11727: POP
11728: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11729: LD_VAR 0 1
11733: PPUSH
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 135
// end ;
11743: LD_VAR 0 2
11747: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
11762: PPUSH
// result := [ ] ;
11763: LD_ADDR_VAR 0 7
11767: PUSH
11768: EMPTY
11769: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 266
11779: PUSH
11780: LD_INT 0
11782: PUSH
11783: LD_INT 1
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: IN
11790: NOT
11791: IFFALSE 11795
// exit ;
11793: GO 13429
// if name then
11795: LD_VAR 0 3
11799: IFFALSE 11815
// SetBName ( base_dep , name ) ;
11801: LD_VAR 0 1
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: CALL_OW 500
// base := GetBase ( base_dep ) ;
11815: LD_ADDR_VAR 0 15
11819: PUSH
11820: LD_VAR 0 1
11824: PPUSH
11825: CALL_OW 274
11829: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11830: LD_ADDR_VAR 0 16
11834: PUSH
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 255
11844: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11845: LD_ADDR_VAR 0 17
11849: PUSH
11850: LD_VAR 0 1
11854: PPUSH
11855: CALL_OW 248
11859: ST_TO_ADDR
// if sources then
11860: LD_VAR 0 5
11864: IFFALSE 11911
// for i = 1 to 3 do
11866: LD_ADDR_VAR 0 8
11870: PUSH
11871: DOUBLE
11872: LD_INT 1
11874: DEC
11875: ST_TO_ADDR
11876: LD_INT 3
11878: PUSH
11879: FOR_TO
11880: IFFALSE 11909
// AddResourceType ( base , i , sources [ i ] ) ;
11882: LD_VAR 0 15
11886: PPUSH
11887: LD_VAR 0 8
11891: PPUSH
11892: LD_VAR 0 5
11896: PUSH
11897: LD_VAR 0 8
11901: ARRAY
11902: PPUSH
11903: CALL_OW 276
11907: GO 11879
11909: POP
11910: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11911: LD_ADDR_VAR 0 18
11915: PUSH
11916: LD_VAR 0 15
11920: PPUSH
11921: LD_VAR 0 2
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL 11172 0 3
11933: ST_TO_ADDR
// InitHc ;
11934: CALL_OW 19
// InitUc ;
11938: CALL_OW 18
// uc_side := side ;
11942: LD_ADDR_OWVAR 20
11946: PUSH
11947: LD_VAR 0 16
11951: ST_TO_ADDR
// uc_nation := nation ;
11952: LD_ADDR_OWVAR 21
11956: PUSH
11957: LD_VAR 0 17
11961: ST_TO_ADDR
// if buildings then
11962: LD_VAR 0 18
11966: IFFALSE 13288
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11968: LD_ADDR_VAR 0 19
11972: PUSH
11973: LD_VAR 0 18
11977: PPUSH
11978: LD_INT 2
11980: PUSH
11981: LD_INT 30
11983: PUSH
11984: LD_INT 29
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 30
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: PPUSH
12006: CALL_OW 72
12010: ST_TO_ADDR
// if tmp then
12011: LD_VAR 0 19
12015: IFFALSE 12063
// for i in tmp do
12017: LD_ADDR_VAR 0 8
12021: PUSH
12022: LD_VAR 0 19
12026: PUSH
12027: FOR_IN
12028: IFFALSE 12061
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12030: LD_VAR 0 8
12034: PPUSH
12035: CALL_OW 250
12039: PPUSH
12040: LD_VAR 0 8
12044: PPUSH
12045: CALL_OW 251
12049: PPUSH
12050: LD_VAR 0 16
12054: PPUSH
12055: CALL_OW 441
12059: GO 12027
12061: POP
12062: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12063: LD_VAR 0 18
12067: PPUSH
12068: LD_INT 2
12070: PUSH
12071: LD_INT 30
12073: PUSH
12074: LD_INT 32
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 30
12083: PUSH
12084: LD_INT 33
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 72
12100: IFFALSE 12188
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12102: LD_ADDR_VAR 0 8
12106: PUSH
12107: LD_VAR 0 18
12111: PPUSH
12112: LD_INT 2
12114: PUSH
12115: LD_INT 30
12117: PUSH
12118: LD_INT 32
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 30
12127: PUSH
12128: LD_INT 33
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 72
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12186
// begin if not GetBWeapon ( i ) then
12148: LD_VAR 0 8
12152: PPUSH
12153: CALL_OW 269
12157: NOT
12158: IFFALSE 12184
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12160: LD_VAR 0 8
12164: PPUSH
12165: LD_VAR 0 8
12169: PPUSH
12170: LD_VAR 0 2
12174: PPUSH
12175: CALL 13434 0 2
12179: PPUSH
12180: CALL_OW 431
// end ;
12184: GO 12145
12186: POP
12187: POP
// end ; for i = 1 to personel do
12188: LD_ADDR_VAR 0 8
12192: PUSH
12193: DOUBLE
12194: LD_INT 1
12196: DEC
12197: ST_TO_ADDR
12198: LD_VAR 0 6
12202: PUSH
12203: FOR_TO
12204: IFFALSE 13268
// begin if i > 4 then
12206: LD_VAR 0 8
12210: PUSH
12211: LD_INT 4
12213: GREATER
12214: IFFALSE 12218
// break ;
12216: GO 13268
// case i of 1 :
12218: LD_VAR 0 8
12222: PUSH
12223: LD_INT 1
12225: DOUBLE
12226: EQUAL
12227: IFTRUE 12231
12229: GO 12311
12231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12232: LD_ADDR_VAR 0 12
12236: PUSH
12237: LD_VAR 0 18
12241: PPUSH
12242: LD_INT 22
12244: PUSH
12245: LD_VAR 0 16
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 58
12256: PUSH
12257: EMPTY
12258: LIST
12259: PUSH
12260: LD_INT 2
12262: PUSH
12263: LD_INT 30
12265: PUSH
12266: LD_INT 32
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 30
12275: PUSH
12276: LD_INT 4
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 30
12285: PUSH
12286: LD_INT 5
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: PPUSH
12304: CALL_OW 72
12308: ST_TO_ADDR
12309: GO 12533
12311: LD_INT 2
12313: DOUBLE
12314: EQUAL
12315: IFTRUE 12319
12317: GO 12381
12319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12320: LD_ADDR_VAR 0 12
12324: PUSH
12325: LD_VAR 0 18
12329: PPUSH
12330: LD_INT 22
12332: PUSH
12333: LD_VAR 0 16
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 2
12344: PUSH
12345: LD_INT 30
12347: PUSH
12348: LD_INT 0
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 30
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PPUSH
12374: CALL_OW 72
12378: ST_TO_ADDR
12379: GO 12533
12381: LD_INT 3
12383: DOUBLE
12384: EQUAL
12385: IFTRUE 12389
12387: GO 12451
12389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12390: LD_ADDR_VAR 0 12
12394: PUSH
12395: LD_VAR 0 18
12399: PPUSH
12400: LD_INT 22
12402: PUSH
12403: LD_VAR 0 16
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: LD_INT 30
12417: PUSH
12418: LD_INT 2
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 30
12427: PUSH
12428: LD_INT 3
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 72
12448: ST_TO_ADDR
12449: GO 12533
12451: LD_INT 4
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12532
12459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12460: LD_ADDR_VAR 0 12
12464: PUSH
12465: LD_VAR 0 18
12469: PPUSH
12470: LD_INT 22
12472: PUSH
12473: LD_VAR 0 16
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 6
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 7
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 8
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PPUSH
12525: CALL_OW 72
12529: ST_TO_ADDR
12530: GO 12533
12532: POP
// if i = 1 then
12533: LD_VAR 0 8
12537: PUSH
12538: LD_INT 1
12540: EQUAL
12541: IFFALSE 12652
// begin tmp := [ ] ;
12543: LD_ADDR_VAR 0 19
12547: PUSH
12548: EMPTY
12549: ST_TO_ADDR
// for j in f do
12550: LD_ADDR_VAR 0 9
12554: PUSH
12555: LD_VAR 0 12
12559: PUSH
12560: FOR_IN
12561: IFFALSE 12634
// if GetBType ( j ) = b_bunker then
12563: LD_VAR 0 9
12567: PPUSH
12568: CALL_OW 266
12572: PUSH
12573: LD_INT 32
12575: EQUAL
12576: IFFALSE 12603
// tmp := Insert ( tmp , 1 , j ) else
12578: LD_ADDR_VAR 0 19
12582: PUSH
12583: LD_VAR 0 19
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: LD_VAR 0 9
12595: PPUSH
12596: CALL_OW 2
12600: ST_TO_ADDR
12601: GO 12632
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12603: LD_ADDR_VAR 0 19
12607: PUSH
12608: LD_VAR 0 19
12612: PPUSH
12613: LD_VAR 0 19
12617: PUSH
12618: LD_INT 1
12620: PLUS
12621: PPUSH
12622: LD_VAR 0 9
12626: PPUSH
12627: CALL_OW 2
12631: ST_TO_ADDR
12632: GO 12560
12634: POP
12635: POP
// if tmp then
12636: LD_VAR 0 19
12640: IFFALSE 12652
// f := tmp ;
12642: LD_ADDR_VAR 0 12
12646: PUSH
12647: LD_VAR 0 19
12651: ST_TO_ADDR
// end ; x := personel [ i ] ;
12652: LD_ADDR_VAR 0 13
12656: PUSH
12657: LD_VAR 0 6
12661: PUSH
12662: LD_VAR 0 8
12666: ARRAY
12667: ST_TO_ADDR
// if x = - 1 then
12668: LD_VAR 0 13
12672: PUSH
12673: LD_INT 1
12675: NEG
12676: EQUAL
12677: IFFALSE 12886
// begin for j in f do
12679: LD_ADDR_VAR 0 9
12683: PUSH
12684: LD_VAR 0 12
12688: PUSH
12689: FOR_IN
12690: IFFALSE 12882
// repeat InitHc ;
12692: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12696: LD_VAR 0 9
12700: PPUSH
12701: CALL_OW 266
12705: PUSH
12706: LD_INT 5
12708: EQUAL
12709: IFFALSE 12779
// begin if UnitsInside ( j ) < 3 then
12711: LD_VAR 0 9
12715: PPUSH
12716: CALL_OW 313
12720: PUSH
12721: LD_INT 3
12723: LESS
12724: IFFALSE 12760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12726: LD_INT 0
12728: PPUSH
12729: LD_INT 5
12731: PUSH
12732: LD_INT 8
12734: PUSH
12735: LD_INT 9
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: PUSH
12743: LD_VAR 0 17
12747: ARRAY
12748: PPUSH
12749: LD_VAR 0 4
12753: PPUSH
12754: CALL_OW 380
12758: GO 12777
// PrepareHuman ( false , i , skill ) ;
12760: LD_INT 0
12762: PPUSH
12763: LD_VAR 0 8
12767: PPUSH
12768: LD_VAR 0 4
12772: PPUSH
12773: CALL_OW 380
// end else
12777: GO 12796
// PrepareHuman ( false , i , skill ) ;
12779: LD_INT 0
12781: PPUSH
12782: LD_VAR 0 8
12786: PPUSH
12787: LD_VAR 0 4
12791: PPUSH
12792: CALL_OW 380
// un := CreateHuman ;
12796: LD_ADDR_VAR 0 14
12800: PUSH
12801: CALL_OW 44
12805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12806: LD_ADDR_VAR 0 7
12810: PUSH
12811: LD_VAR 0 7
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: LD_VAR 0 14
12823: PPUSH
12824: CALL_OW 2
12828: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12829: LD_VAR 0 14
12833: PPUSH
12834: LD_VAR 0 9
12838: PPUSH
12839: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12843: LD_VAR 0 9
12847: PPUSH
12848: CALL_OW 313
12852: PUSH
12853: LD_INT 6
12855: EQUAL
12856: PUSH
12857: LD_VAR 0 9
12861: PPUSH
12862: CALL_OW 266
12866: PUSH
12867: LD_INT 32
12869: PUSH
12870: LD_INT 31
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: IN
12877: OR
12878: IFFALSE 12692
12880: GO 12689
12882: POP
12883: POP
// end else
12884: GO 13266
// for j = 1 to x do
12886: LD_ADDR_VAR 0 9
12890: PUSH
12891: DOUBLE
12892: LD_INT 1
12894: DEC
12895: ST_TO_ADDR
12896: LD_VAR 0 13
12900: PUSH
12901: FOR_TO
12902: IFFALSE 13264
// begin InitHc ;
12904: CALL_OW 19
// if not f then
12908: LD_VAR 0 12
12912: NOT
12913: IFFALSE 13002
// begin PrepareHuman ( false , i , skill ) ;
12915: LD_INT 0
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: LD_VAR 0 4
12927: PPUSH
12928: CALL_OW 380
// un := CreateHuman ;
12932: LD_ADDR_VAR 0 14
12936: PUSH
12937: CALL_OW 44
12941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12942: LD_ADDR_VAR 0 7
12946: PUSH
12947: LD_VAR 0 7
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: LD_VAR 0 14
12959: PPUSH
12960: CALL_OW 2
12964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12965: LD_VAR 0 14
12969: PPUSH
12970: LD_VAR 0 1
12974: PPUSH
12975: CALL_OW 250
12979: PPUSH
12980: LD_VAR 0 1
12984: PPUSH
12985: CALL_OW 251
12989: PPUSH
12990: LD_INT 10
12992: PPUSH
12993: LD_INT 0
12995: PPUSH
12996: CALL_OW 50
// continue ;
13000: GO 12901
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13002: LD_VAR 0 12
13006: PUSH
13007: LD_INT 1
13009: ARRAY
13010: PPUSH
13011: CALL_OW 313
13015: PUSH
13016: LD_VAR 0 12
13020: PUSH
13021: LD_INT 1
13023: ARRAY
13024: PPUSH
13025: CALL_OW 266
13029: PUSH
13030: LD_INT 32
13032: PUSH
13033: LD_INT 31
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: IN
13040: AND
13041: PUSH
13042: LD_VAR 0 12
13046: PUSH
13047: LD_INT 1
13049: ARRAY
13050: PPUSH
13051: CALL_OW 313
13055: PUSH
13056: LD_INT 6
13058: EQUAL
13059: OR
13060: IFFALSE 13080
// f := Delete ( f , 1 ) ;
13062: LD_ADDR_VAR 0 12
13066: PUSH
13067: LD_VAR 0 12
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 3
13079: ST_TO_ADDR
// if not f then
13080: LD_VAR 0 12
13084: NOT
13085: IFFALSE 13103
// begin x := x + 2 ;
13087: LD_ADDR_VAR 0 13
13091: PUSH
13092: LD_VAR 0 13
13096: PUSH
13097: LD_INT 2
13099: PLUS
13100: ST_TO_ADDR
// continue ;
13101: GO 12901
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13103: LD_VAR 0 12
13107: PUSH
13108: LD_INT 1
13110: ARRAY
13111: PPUSH
13112: CALL_OW 266
13116: PUSH
13117: LD_INT 5
13119: EQUAL
13120: IFFALSE 13194
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13122: LD_VAR 0 12
13126: PUSH
13127: LD_INT 1
13129: ARRAY
13130: PPUSH
13131: CALL_OW 313
13135: PUSH
13136: LD_INT 3
13138: LESS
13139: IFFALSE 13175
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13141: LD_INT 0
13143: PPUSH
13144: LD_INT 5
13146: PUSH
13147: LD_INT 8
13149: PUSH
13150: LD_INT 9
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: LD_VAR 0 17
13162: ARRAY
13163: PPUSH
13164: LD_VAR 0 4
13168: PPUSH
13169: CALL_OW 380
13173: GO 13192
// PrepareHuman ( false , i , skill ) ;
13175: LD_INT 0
13177: PPUSH
13178: LD_VAR 0 8
13182: PPUSH
13183: LD_VAR 0 4
13187: PPUSH
13188: CALL_OW 380
// end else
13192: GO 13211
// PrepareHuman ( false , i , skill ) ;
13194: LD_INT 0
13196: PPUSH
13197: LD_VAR 0 8
13201: PPUSH
13202: LD_VAR 0 4
13206: PPUSH
13207: CALL_OW 380
// un := CreateHuman ;
13211: LD_ADDR_VAR 0 14
13215: PUSH
13216: CALL_OW 44
13220: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13221: LD_ADDR_VAR 0 7
13225: PUSH
13226: LD_VAR 0 7
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: LD_VAR 0 14
13238: PPUSH
13239: CALL_OW 2
13243: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13244: LD_VAR 0 14
13248: PPUSH
13249: LD_VAR 0 12
13253: PUSH
13254: LD_INT 1
13256: ARRAY
13257: PPUSH
13258: CALL_OW 52
// end ;
13262: GO 12901
13264: POP
13265: POP
// end ;
13266: GO 12203
13268: POP
13269: POP
// result := result ^ buildings ;
13270: LD_ADDR_VAR 0 7
13274: PUSH
13275: LD_VAR 0 7
13279: PUSH
13280: LD_VAR 0 18
13284: ADD
13285: ST_TO_ADDR
// end else
13286: GO 13429
// begin for i = 1 to personel do
13288: LD_ADDR_VAR 0 8
13292: PUSH
13293: DOUBLE
13294: LD_INT 1
13296: DEC
13297: ST_TO_ADDR
13298: LD_VAR 0 6
13302: PUSH
13303: FOR_TO
13304: IFFALSE 13427
// begin if i > 4 then
13306: LD_VAR 0 8
13310: PUSH
13311: LD_INT 4
13313: GREATER
13314: IFFALSE 13318
// break ;
13316: GO 13427
// x := personel [ i ] ;
13318: LD_ADDR_VAR 0 13
13322: PUSH
13323: LD_VAR 0 6
13327: PUSH
13328: LD_VAR 0 8
13332: ARRAY
13333: ST_TO_ADDR
// if x = - 1 then
13334: LD_VAR 0 13
13338: PUSH
13339: LD_INT 1
13341: NEG
13342: EQUAL
13343: IFFALSE 13347
// continue ;
13345: GO 13303
// PrepareHuman ( false , i , skill ) ;
13347: LD_INT 0
13349: PPUSH
13350: LD_VAR 0 8
13354: PPUSH
13355: LD_VAR 0 4
13359: PPUSH
13360: CALL_OW 380
// un := CreateHuman ;
13364: LD_ADDR_VAR 0 14
13368: PUSH
13369: CALL_OW 44
13373: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13374: LD_VAR 0 14
13378: PPUSH
13379: LD_VAR 0 1
13383: PPUSH
13384: CALL_OW 250
13388: PPUSH
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 251
13398: PPUSH
13399: LD_INT 10
13401: PPUSH
13402: LD_INT 0
13404: PPUSH
13405: CALL_OW 50
// result := result ^ un ;
13409: LD_ADDR_VAR 0 7
13413: PUSH
13414: LD_VAR 0 7
13418: PUSH
13419: LD_VAR 0 14
13423: ADD
13424: ST_TO_ADDR
// end ;
13425: GO 13303
13427: POP
13428: POP
// end ; end ;
13429: LD_VAR 0 7
13433: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13434: LD_INT 0
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
// result := false ;
13452: LD_ADDR_VAR 0 3
13456: PUSH
13457: LD_INT 0
13459: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13460: LD_VAR 0 1
13464: NOT
13465: PUSH
13466: LD_VAR 0 1
13470: PPUSH
13471: CALL_OW 266
13475: PUSH
13476: LD_INT 32
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: IN
13486: NOT
13487: OR
13488: IFFALSE 13492
// exit ;
13490: GO 14601
// nat := GetNation ( tower ) ;
13492: LD_ADDR_VAR 0 12
13496: PUSH
13497: LD_VAR 0 1
13501: PPUSH
13502: CALL_OW 248
13506: ST_TO_ADDR
// side := GetSide ( tower ) ;
13507: LD_ADDR_VAR 0 16
13511: PUSH
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 255
13521: ST_TO_ADDR
// x := GetX ( tower ) ;
13522: LD_ADDR_VAR 0 10
13526: PUSH
13527: LD_VAR 0 1
13531: PPUSH
13532: CALL_OW 250
13536: ST_TO_ADDR
// y := GetY ( tower ) ;
13537: LD_ADDR_VAR 0 11
13541: PUSH
13542: LD_VAR 0 1
13546: PPUSH
13547: CALL_OW 251
13551: ST_TO_ADDR
// if not x or not y then
13552: LD_VAR 0 10
13556: NOT
13557: PUSH
13558: LD_VAR 0 11
13562: NOT
13563: OR
13564: IFFALSE 13568
// exit ;
13566: GO 14601
// weapon := 0 ;
13568: LD_ADDR_VAR 0 18
13572: PUSH
13573: LD_INT 0
13575: ST_TO_ADDR
// fac_list := [ ] ;
13576: LD_ADDR_VAR 0 17
13580: PUSH
13581: EMPTY
13582: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13583: LD_ADDR_VAR 0 6
13587: PUSH
13588: LD_VAR 0 1
13592: PPUSH
13593: CALL_OW 274
13597: PPUSH
13598: LD_VAR 0 2
13602: PPUSH
13603: LD_INT 0
13605: PPUSH
13606: CALL 11172 0 3
13610: PPUSH
13611: LD_INT 30
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 72
13625: ST_TO_ADDR
// if not factories then
13626: LD_VAR 0 6
13630: NOT
13631: IFFALSE 13635
// exit ;
13633: GO 14601
// for i in factories do
13635: LD_ADDR_VAR 0 8
13639: PUSH
13640: LD_VAR 0 6
13644: PUSH
13645: FOR_IN
13646: IFFALSE 13671
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13648: LD_ADDR_VAR 0 17
13652: PUSH
13653: LD_VAR 0 17
13657: PUSH
13658: LD_VAR 0 8
13662: PPUSH
13663: CALL_OW 478
13667: UNION
13668: ST_TO_ADDR
13669: GO 13645
13671: POP
13672: POP
// if not fac_list then
13673: LD_VAR 0 17
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 14601
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13682: LD_ADDR_VAR 0 5
13686: PUSH
13687: LD_INT 4
13689: PUSH
13690: LD_INT 5
13692: PUSH
13693: LD_INT 9
13695: PUSH
13696: LD_INT 10
13698: PUSH
13699: LD_INT 6
13701: PUSH
13702: LD_INT 7
13704: PUSH
13705: LD_INT 11
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 27
13719: PUSH
13720: LD_INT 28
13722: PUSH
13723: LD_INT 26
13725: PUSH
13726: LD_INT 30
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 43
13737: PUSH
13738: LD_INT 44
13740: PUSH
13741: LD_INT 46
13743: PUSH
13744: LD_INT 45
13746: PUSH
13747: LD_INT 47
13749: PUSH
13750: LD_INT 49
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PUSH
13766: LD_VAR 0 12
13770: ARRAY
13771: ST_TO_ADDR
// list := list isect fac_list ;
13772: LD_ADDR_VAR 0 5
13776: PUSH
13777: LD_VAR 0 5
13781: PUSH
13782: LD_VAR 0 17
13786: ISECT
13787: ST_TO_ADDR
// if not list then
13788: LD_VAR 0 5
13792: NOT
13793: IFFALSE 13797
// exit ;
13795: GO 14601
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13797: LD_VAR 0 12
13801: PUSH
13802: LD_INT 3
13804: EQUAL
13805: PUSH
13806: LD_INT 49
13808: PUSH
13809: LD_VAR 0 5
13813: IN
13814: AND
13815: PUSH
13816: LD_INT 31
13818: PPUSH
13819: LD_VAR 0 16
13823: PPUSH
13824: CALL_OW 321
13828: PUSH
13829: LD_INT 2
13831: EQUAL
13832: AND
13833: IFFALSE 13893
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13835: LD_INT 22
13837: PUSH
13838: LD_VAR 0 16
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 35
13849: PUSH
13850: LD_INT 49
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 91
13859: PUSH
13860: LD_VAR 0 1
13864: PUSH
13865: LD_INT 10
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 69
13882: NOT
13883: IFFALSE 13893
// weapon := ru_time_lapser ;
13885: LD_ADDR_VAR 0 18
13889: PUSH
13890: LD_INT 49
13892: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13893: LD_VAR 0 12
13897: PUSH
13898: LD_INT 1
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: IN
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_VAR 0 5
13916: IN
13917: PUSH
13918: LD_INT 30
13920: PUSH
13921: LD_VAR 0 5
13925: IN
13926: OR
13927: AND
13928: PUSH
13929: LD_INT 6
13931: PPUSH
13932: LD_VAR 0 16
13936: PPUSH
13937: CALL_OW 321
13941: PUSH
13942: LD_INT 2
13944: EQUAL
13945: AND
13946: IFFALSE 14111
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13948: LD_INT 22
13950: PUSH
13951: LD_VAR 0 16
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: LD_INT 35
13965: PUSH
13966: LD_INT 11
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 35
13975: PUSH
13976: LD_INT 30
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 91
13990: PUSH
13991: LD_VAR 0 1
13995: PUSH
13996: LD_INT 18
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 69
14013: NOT
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_VAR 0 16
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 2
14029: PUSH
14030: LD_INT 30
14032: PUSH
14033: LD_INT 32
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 30
14042: PUSH
14043: LD_INT 33
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 91
14057: PUSH
14058: LD_VAR 0 1
14062: PUSH
14063: LD_INT 12
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: PPUSH
14079: CALL_OW 69
14083: PUSH
14084: LD_INT 2
14086: GREATER
14087: AND
14088: IFFALSE 14111
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14090: LD_ADDR_VAR 0 18
14094: PUSH
14095: LD_INT 11
14097: PUSH
14098: LD_INT 30
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_VAR 0 12
14109: ARRAY
14110: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14111: LD_VAR 0 18
14115: NOT
14116: PUSH
14117: LD_INT 40
14119: PPUSH
14120: LD_VAR 0 16
14124: PPUSH
14125: CALL_OW 321
14129: PUSH
14130: LD_INT 2
14132: EQUAL
14133: AND
14134: PUSH
14135: LD_INT 7
14137: PUSH
14138: LD_VAR 0 5
14142: IN
14143: PUSH
14144: LD_INT 28
14146: PUSH
14147: LD_VAR 0 5
14151: IN
14152: OR
14153: PUSH
14154: LD_INT 45
14156: PUSH
14157: LD_VAR 0 5
14161: IN
14162: OR
14163: AND
14164: IFFALSE 14418
// begin hex := GetHexInfo ( x , y ) ;
14166: LD_ADDR_VAR 0 4
14170: PUSH
14171: LD_VAR 0 10
14175: PPUSH
14176: LD_VAR 0 11
14180: PPUSH
14181: CALL_OW 546
14185: ST_TO_ADDR
// if hex [ 1 ] then
14186: LD_VAR 0 4
14190: PUSH
14191: LD_INT 1
14193: ARRAY
14194: IFFALSE 14198
// exit ;
14196: GO 14601
// height := hex [ 2 ] ;
14198: LD_ADDR_VAR 0 15
14202: PUSH
14203: LD_VAR 0 4
14207: PUSH
14208: LD_INT 2
14210: ARRAY
14211: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14212: LD_ADDR_VAR 0 14
14216: PUSH
14217: LD_INT 0
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: LD_INT 3
14225: PUSH
14226: LD_INT 5
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: ST_TO_ADDR
// for i in tmp do
14235: LD_ADDR_VAR 0 8
14239: PUSH
14240: LD_VAR 0 14
14244: PUSH
14245: FOR_IN
14246: IFFALSE 14416
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14248: LD_ADDR_VAR 0 9
14252: PUSH
14253: LD_VAR 0 10
14257: PPUSH
14258: LD_VAR 0 8
14262: PPUSH
14263: LD_INT 5
14265: PPUSH
14266: CALL_OW 272
14270: PUSH
14271: LD_VAR 0 11
14275: PPUSH
14276: LD_VAR 0 8
14280: PPUSH
14281: LD_INT 5
14283: PPUSH
14284: CALL_OW 273
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14293: LD_VAR 0 9
14297: PUSH
14298: LD_INT 1
14300: ARRAY
14301: PPUSH
14302: LD_VAR 0 9
14306: PUSH
14307: LD_INT 2
14309: ARRAY
14310: PPUSH
14311: CALL_OW 488
14315: IFFALSE 14414
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14317: LD_ADDR_VAR 0 4
14321: PUSH
14322: LD_VAR 0 9
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: LD_VAR 0 9
14335: PUSH
14336: LD_INT 2
14338: ARRAY
14339: PPUSH
14340: CALL_OW 546
14344: ST_TO_ADDR
// if hex [ 1 ] then
14345: LD_VAR 0 4
14349: PUSH
14350: LD_INT 1
14352: ARRAY
14353: IFFALSE 14357
// continue ;
14355: GO 14245
// h := hex [ 2 ] ;
14357: LD_ADDR_VAR 0 13
14361: PUSH
14362: LD_VAR 0 4
14366: PUSH
14367: LD_INT 2
14369: ARRAY
14370: ST_TO_ADDR
// if h + 7 < height then
14371: LD_VAR 0 13
14375: PUSH
14376: LD_INT 7
14378: PLUS
14379: PUSH
14380: LD_VAR 0 15
14384: LESS
14385: IFFALSE 14414
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14387: LD_ADDR_VAR 0 18
14391: PUSH
14392: LD_INT 7
14394: PUSH
14395: LD_INT 28
14397: PUSH
14398: LD_INT 45
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: LD_VAR 0 12
14410: ARRAY
14411: ST_TO_ADDR
// break ;
14412: GO 14416
// end ; end ; end ;
14414: GO 14245
14416: POP
14417: POP
// end ; if not weapon then
14418: LD_VAR 0 18
14422: NOT
14423: IFFALSE 14483
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14425: LD_ADDR_VAR 0 5
14429: PUSH
14430: LD_VAR 0 5
14434: PUSH
14435: LD_INT 11
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 49
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: DIFF
14449: ST_TO_ADDR
// if not list then
14450: LD_VAR 0 5
14454: NOT
14455: IFFALSE 14459
// exit ;
14457: GO 14601
// weapon := list [ rand ( 1 , list ) ] ;
14459: LD_ADDR_VAR 0 18
14463: PUSH
14464: LD_VAR 0 5
14468: PUSH
14469: LD_INT 1
14471: PPUSH
14472: LD_VAR 0 5
14476: PPUSH
14477: CALL_OW 12
14481: ARRAY
14482: ST_TO_ADDR
// end ; if weapon then
14483: LD_VAR 0 18
14487: IFFALSE 14601
// begin tmp := CostOfWeapon ( weapon ) ;
14489: LD_ADDR_VAR 0 14
14493: PUSH
14494: LD_VAR 0 18
14498: PPUSH
14499: CALL_OW 451
14503: ST_TO_ADDR
// j := GetBase ( tower ) ;
14504: LD_ADDR_VAR 0 9
14508: PUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 274
14518: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14519: LD_VAR 0 9
14523: PPUSH
14524: LD_INT 1
14526: PPUSH
14527: CALL_OW 275
14531: PUSH
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: GREATEREQUAL
14541: PUSH
14542: LD_VAR 0 9
14546: PPUSH
14547: LD_INT 2
14549: PPUSH
14550: CALL_OW 275
14554: PUSH
14555: LD_VAR 0 14
14559: PUSH
14560: LD_INT 2
14562: ARRAY
14563: GREATEREQUAL
14564: AND
14565: PUSH
14566: LD_VAR 0 9
14570: PPUSH
14571: LD_INT 3
14573: PPUSH
14574: CALL_OW 275
14578: PUSH
14579: LD_VAR 0 14
14583: PUSH
14584: LD_INT 3
14586: ARRAY
14587: GREATEREQUAL
14588: AND
14589: IFFALSE 14601
// result := weapon ;
14591: LD_ADDR_VAR 0 3
14595: PUSH
14596: LD_VAR 0 18
14600: ST_TO_ADDR
// end ; end ;
14601: LD_VAR 0 3
14605: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
// result := true ;
14610: LD_ADDR_VAR 0 3
14614: PUSH
14615: LD_INT 1
14617: ST_TO_ADDR
// if array1 = array2 then
14618: LD_VAR 0 1
14622: PUSH
14623: LD_VAR 0 2
14627: EQUAL
14628: IFFALSE 14688
// begin for i = 1 to array1 do
14630: LD_ADDR_VAR 0 4
14634: PUSH
14635: DOUBLE
14636: LD_INT 1
14638: DEC
14639: ST_TO_ADDR
14640: LD_VAR 0 1
14644: PUSH
14645: FOR_TO
14646: IFFALSE 14684
// if array1 [ i ] <> array2 [ i ] then
14648: LD_VAR 0 1
14652: PUSH
14653: LD_VAR 0 4
14657: ARRAY
14658: PUSH
14659: LD_VAR 0 2
14663: PUSH
14664: LD_VAR 0 4
14668: ARRAY
14669: NONEQUAL
14670: IFFALSE 14682
// begin result := false ;
14672: LD_ADDR_VAR 0 3
14676: PUSH
14677: LD_INT 0
14679: ST_TO_ADDR
// break ;
14680: GO 14684
// end ;
14682: GO 14645
14684: POP
14685: POP
// end else
14686: GO 14696
// result := false ;
14688: LD_ADDR_VAR 0 3
14692: PUSH
14693: LD_INT 0
14695: ST_TO_ADDR
// end ;
14696: LD_VAR 0 3
14700: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14701: LD_INT 0
14703: PPUSH
14704: PPUSH
// if not array1 or not array2 then
14705: LD_VAR 0 1
14709: NOT
14710: PUSH
14711: LD_VAR 0 2
14715: NOT
14716: OR
14717: IFFALSE 14721
// exit ;
14719: GO 14785
// result := true ;
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_INT 1
14728: ST_TO_ADDR
// for i = 1 to array1 do
14729: LD_ADDR_VAR 0 4
14733: PUSH
14734: DOUBLE
14735: LD_INT 1
14737: DEC
14738: ST_TO_ADDR
14739: LD_VAR 0 1
14743: PUSH
14744: FOR_TO
14745: IFFALSE 14783
// if array1 [ i ] <> array2 [ i ] then
14747: LD_VAR 0 1
14751: PUSH
14752: LD_VAR 0 4
14756: ARRAY
14757: PUSH
14758: LD_VAR 0 2
14762: PUSH
14763: LD_VAR 0 4
14767: ARRAY
14768: NONEQUAL
14769: IFFALSE 14781
// begin result := false ;
14771: LD_ADDR_VAR 0 3
14775: PUSH
14776: LD_INT 0
14778: ST_TO_ADDR
// break ;
14779: GO 14783
// end ;
14781: GO 14744
14783: POP
14784: POP
// end ;
14785: LD_VAR 0 3
14789: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14790: LD_INT 0
14792: PPUSH
14793: PPUSH
14794: PPUSH
// pom := GetBase ( fac ) ;
14795: LD_ADDR_VAR 0 5
14799: PUSH
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL_OW 274
14809: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14810: LD_ADDR_VAR 0 4
14814: PUSH
14815: LD_VAR 0 2
14819: PUSH
14820: LD_INT 1
14822: ARRAY
14823: PPUSH
14824: LD_VAR 0 2
14828: PUSH
14829: LD_INT 2
14831: ARRAY
14832: PPUSH
14833: LD_VAR 0 2
14837: PUSH
14838: LD_INT 3
14840: ARRAY
14841: PPUSH
14842: LD_VAR 0 2
14846: PUSH
14847: LD_INT 4
14849: ARRAY
14850: PPUSH
14851: CALL_OW 449
14855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14856: LD_ADDR_VAR 0 3
14860: PUSH
14861: LD_VAR 0 5
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 275
14873: PUSH
14874: LD_VAR 0 4
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: GREATEREQUAL
14883: PUSH
14884: LD_VAR 0 5
14888: PPUSH
14889: LD_INT 2
14891: PPUSH
14892: CALL_OW 275
14896: PUSH
14897: LD_VAR 0 4
14901: PUSH
14902: LD_INT 2
14904: ARRAY
14905: GREATEREQUAL
14906: AND
14907: PUSH
14908: LD_VAR 0 5
14912: PPUSH
14913: LD_INT 3
14915: PPUSH
14916: CALL_OW 275
14920: PUSH
14921: LD_VAR 0 4
14925: PUSH
14926: LD_INT 3
14928: ARRAY
14929: GREATEREQUAL
14930: AND
14931: ST_TO_ADDR
// end ;
14932: LD_VAR 0 3
14936: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
// pom := GetBase ( building ) ;
14943: LD_ADDR_VAR 0 3
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 274
14957: ST_TO_ADDR
// if not pom then
14958: LD_VAR 0 3
14962: NOT
14963: IFFALSE 14967
// exit ;
14965: GO 15137
// btype := GetBType ( building ) ;
14967: LD_ADDR_VAR 0 5
14971: PUSH
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 266
14981: ST_TO_ADDR
// if btype = b_armoury then
14982: LD_VAR 0 5
14986: PUSH
14987: LD_INT 4
14989: EQUAL
14990: IFFALSE 15000
// btype := b_barracks ;
14992: LD_ADDR_VAR 0 5
14996: PUSH
14997: LD_INT 5
14999: ST_TO_ADDR
// if btype = b_depot then
15000: LD_VAR 0 5
15004: PUSH
15005: LD_INT 0
15007: EQUAL
15008: IFFALSE 15018
// btype := b_warehouse ;
15010: LD_ADDR_VAR 0 5
15014: PUSH
15015: LD_INT 1
15017: ST_TO_ADDR
// if btype = b_workshop then
15018: LD_VAR 0 5
15022: PUSH
15023: LD_INT 2
15025: EQUAL
15026: IFFALSE 15036
// btype := b_factory ;
15028: LD_ADDR_VAR 0 5
15032: PUSH
15033: LD_INT 3
15035: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15036: LD_ADDR_VAR 0 4
15040: PUSH
15041: LD_VAR 0 5
15045: PPUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: CALL_OW 248
15055: PPUSH
15056: CALL_OW 450
15060: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15061: LD_ADDR_VAR 0 2
15065: PUSH
15066: LD_VAR 0 3
15070: PPUSH
15071: LD_INT 1
15073: PPUSH
15074: CALL_OW 275
15078: PUSH
15079: LD_VAR 0 4
15083: PUSH
15084: LD_INT 1
15086: ARRAY
15087: GREATEREQUAL
15088: PUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: LD_INT 2
15096: PPUSH
15097: CALL_OW 275
15101: PUSH
15102: LD_VAR 0 4
15106: PUSH
15107: LD_INT 2
15109: ARRAY
15110: GREATEREQUAL
15111: AND
15112: PUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: LD_INT 3
15120: PPUSH
15121: CALL_OW 275
15125: PUSH
15126: LD_VAR 0 4
15130: PUSH
15131: LD_INT 3
15133: ARRAY
15134: GREATEREQUAL
15135: AND
15136: ST_TO_ADDR
// end ;
15137: LD_VAR 0 2
15141: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15142: LD_INT 0
15144: PPUSH
15145: PPUSH
15146: PPUSH
// pom := GetBase ( building ) ;
15147: LD_ADDR_VAR 0 4
15151: PUSH
15152: LD_VAR 0 1
15156: PPUSH
15157: CALL_OW 274
15161: ST_TO_ADDR
// if not pom then
15162: LD_VAR 0 4
15166: NOT
15167: IFFALSE 15171
// exit ;
15169: GO 15272
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15171: LD_ADDR_VAR 0 5
15175: PUSH
15176: LD_VAR 0 2
15180: PPUSH
15181: LD_VAR 0 1
15185: PPUSH
15186: CALL_OW 248
15190: PPUSH
15191: CALL_OW 450
15195: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15196: LD_ADDR_VAR 0 3
15200: PUSH
15201: LD_VAR 0 4
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 275
15213: PUSH
15214: LD_VAR 0 5
15218: PUSH
15219: LD_INT 1
15221: ARRAY
15222: GREATEREQUAL
15223: PUSH
15224: LD_VAR 0 4
15228: PPUSH
15229: LD_INT 2
15231: PPUSH
15232: CALL_OW 275
15236: PUSH
15237: LD_VAR 0 5
15241: PUSH
15242: LD_INT 2
15244: ARRAY
15245: GREATEREQUAL
15246: AND
15247: PUSH
15248: LD_VAR 0 4
15252: PPUSH
15253: LD_INT 3
15255: PPUSH
15256: CALL_OW 275
15260: PUSH
15261: LD_VAR 0 5
15265: PUSH
15266: LD_INT 3
15268: ARRAY
15269: GREATEREQUAL
15270: AND
15271: ST_TO_ADDR
// end ;
15272: LD_VAR 0 3
15276: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
15289: PPUSH
// result := false ;
15290: LD_ADDR_VAR 0 8
15294: PUSH
15295: LD_INT 0
15297: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15298: LD_VAR 0 5
15302: NOT
15303: PUSH
15304: LD_VAR 0 1
15308: NOT
15309: OR
15310: PUSH
15311: LD_VAR 0 2
15315: NOT
15316: OR
15317: PUSH
15318: LD_VAR 0 3
15322: NOT
15323: OR
15324: IFFALSE 15328
// exit ;
15326: GO 16142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15328: LD_ADDR_VAR 0 14
15332: PUSH
15333: LD_VAR 0 1
15337: PPUSH
15338: LD_VAR 0 2
15342: PPUSH
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_VAR 0 4
15352: PPUSH
15353: LD_VAR 0 5
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: PPUSH
15362: CALL_OW 248
15366: PPUSH
15367: LD_INT 0
15369: PPUSH
15370: CALL 17375 0 6
15374: ST_TO_ADDR
// if not hexes then
15375: LD_VAR 0 14
15379: NOT
15380: IFFALSE 15384
// exit ;
15382: GO 16142
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15384: LD_ADDR_VAR 0 17
15388: PUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: LD_INT 22
15396: PUSH
15397: LD_VAR 0 13
15401: PPUSH
15402: CALL_OW 255
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: LD_INT 30
15416: PUSH
15417: LD_INT 0
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 30
15426: PUSH
15427: LD_INT 1
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PPUSH
15443: CALL_OW 72
15447: ST_TO_ADDR
// for i = 1 to hexes do
15448: LD_ADDR_VAR 0 9
15452: PUSH
15453: DOUBLE
15454: LD_INT 1
15456: DEC
15457: ST_TO_ADDR
15458: LD_VAR 0 14
15462: PUSH
15463: FOR_TO
15464: IFFALSE 16140
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15466: LD_ADDR_VAR 0 13
15470: PUSH
15471: LD_VAR 0 14
15475: PUSH
15476: LD_VAR 0 9
15480: ARRAY
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: PPUSH
15486: LD_VAR 0 14
15490: PUSH
15491: LD_VAR 0 9
15495: ARRAY
15496: PUSH
15497: LD_INT 2
15499: ARRAY
15500: PPUSH
15501: CALL_OW 428
15505: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15506: LD_VAR 0 14
15510: PUSH
15511: LD_VAR 0 9
15515: ARRAY
15516: PUSH
15517: LD_INT 1
15519: ARRAY
15520: PPUSH
15521: LD_VAR 0 14
15525: PUSH
15526: LD_VAR 0 9
15530: ARRAY
15531: PUSH
15532: LD_INT 2
15534: ARRAY
15535: PPUSH
15536: CALL_OW 351
15540: PUSH
15541: LD_VAR 0 14
15545: PUSH
15546: LD_VAR 0 9
15550: ARRAY
15551: PUSH
15552: LD_INT 1
15554: ARRAY
15555: PPUSH
15556: LD_VAR 0 14
15560: PUSH
15561: LD_VAR 0 9
15565: ARRAY
15566: PUSH
15567: LD_INT 2
15569: ARRAY
15570: PPUSH
15571: CALL_OW 488
15575: NOT
15576: OR
15577: PUSH
15578: LD_VAR 0 13
15582: PPUSH
15583: CALL_OW 247
15587: PUSH
15588: LD_INT 3
15590: EQUAL
15591: OR
15592: IFFALSE 15598
// exit ;
15594: POP
15595: POP
15596: GO 16142
// if not tmp then
15598: LD_VAR 0 13
15602: NOT
15603: IFFALSE 15607
// continue ;
15605: GO 15463
// result := true ;
15607: LD_ADDR_VAR 0 8
15611: PUSH
15612: LD_INT 1
15614: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15615: LD_VAR 0 6
15619: PUSH
15620: LD_VAR 0 13
15624: PPUSH
15625: CALL_OW 247
15629: PUSH
15630: LD_INT 2
15632: EQUAL
15633: AND
15634: PUSH
15635: LD_VAR 0 13
15639: PPUSH
15640: CALL_OW 263
15644: PUSH
15645: LD_INT 1
15647: EQUAL
15648: AND
15649: IFFALSE 15813
// begin if IsDrivenBy ( tmp ) then
15651: LD_VAR 0 13
15655: PPUSH
15656: CALL_OW 311
15660: IFFALSE 15664
// continue ;
15662: GO 15463
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15664: LD_VAR 0 6
15668: PPUSH
15669: LD_INT 3
15671: PUSH
15672: LD_INT 60
15674: PUSH
15675: EMPTY
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: LD_INT 55
15687: PUSH
15688: EMPTY
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 72
15703: IFFALSE 15811
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15705: LD_ADDR_VAR 0 18
15709: PUSH
15710: LD_VAR 0 6
15714: PPUSH
15715: LD_INT 3
15717: PUSH
15718: LD_INT 60
15720: PUSH
15721: EMPTY
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 55
15733: PUSH
15734: EMPTY
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 72
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: ST_TO_ADDR
// if IsInUnit ( driver ) then
15754: LD_VAR 0 18
15758: PPUSH
15759: CALL_OW 310
15763: IFFALSE 15774
// ComExit ( driver ) ;
15765: LD_VAR 0 18
15769: PPUSH
15770: CALL 41155 0 1
// AddComEnterUnit ( driver , tmp ) ;
15774: LD_VAR 0 18
15778: PPUSH
15779: LD_VAR 0 13
15783: PPUSH
15784: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15788: LD_VAR 0 18
15792: PPUSH
15793: LD_VAR 0 7
15797: PPUSH
15798: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15802: LD_VAR 0 18
15806: PPUSH
15807: CALL_OW 181
// end ; continue ;
15811: GO 15463
// end ; if not cleaners or not tmp in cleaners then
15813: LD_VAR 0 6
15817: NOT
15818: PUSH
15819: LD_VAR 0 13
15823: PUSH
15824: LD_VAR 0 6
15828: IN
15829: NOT
15830: OR
15831: IFFALSE 16138
// begin if dep then
15833: LD_VAR 0 17
15837: IFFALSE 15973
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15839: LD_ADDR_VAR 0 16
15843: PUSH
15844: LD_VAR 0 17
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: CALL_OW 250
15857: PPUSH
15858: LD_VAR 0 17
15862: PUSH
15863: LD_INT 1
15865: ARRAY
15866: PPUSH
15867: CALL_OW 254
15871: PPUSH
15872: LD_INT 5
15874: PPUSH
15875: CALL_OW 272
15879: PUSH
15880: LD_VAR 0 17
15884: PUSH
15885: LD_INT 1
15887: ARRAY
15888: PPUSH
15889: CALL_OW 251
15893: PPUSH
15894: LD_VAR 0 17
15898: PUSH
15899: LD_INT 1
15901: ARRAY
15902: PPUSH
15903: CALL_OW 254
15907: PPUSH
15908: LD_INT 5
15910: PPUSH
15911: CALL_OW 273
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15920: LD_VAR 0 16
15924: PUSH
15925: LD_INT 1
15927: ARRAY
15928: PPUSH
15929: LD_VAR 0 16
15933: PUSH
15934: LD_INT 2
15936: ARRAY
15937: PPUSH
15938: CALL_OW 488
15942: IFFALSE 15973
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15944: LD_VAR 0 13
15948: PPUSH
15949: LD_VAR 0 16
15953: PUSH
15954: LD_INT 1
15956: ARRAY
15957: PPUSH
15958: LD_VAR 0 16
15962: PUSH
15963: LD_INT 2
15965: ARRAY
15966: PPUSH
15967: CALL_OW 111
// continue ;
15971: GO 15463
// end ; end ; r := GetDir ( tmp ) ;
15973: LD_ADDR_VAR 0 15
15977: PUSH
15978: LD_VAR 0 13
15982: PPUSH
15983: CALL_OW 254
15987: ST_TO_ADDR
// if r = 5 then
15988: LD_VAR 0 15
15992: PUSH
15993: LD_INT 5
15995: EQUAL
15996: IFFALSE 16006
// r := 0 ;
15998: LD_ADDR_VAR 0 15
16002: PUSH
16003: LD_INT 0
16005: ST_TO_ADDR
// for j = r to 5 do
16006: LD_ADDR_VAR 0 10
16010: PUSH
16011: DOUBLE
16012: LD_VAR 0 15
16016: DEC
16017: ST_TO_ADDR
16018: LD_INT 5
16020: PUSH
16021: FOR_TO
16022: IFFALSE 16136
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16024: LD_ADDR_VAR 0 11
16028: PUSH
16029: LD_VAR 0 13
16033: PPUSH
16034: CALL_OW 250
16038: PPUSH
16039: LD_VAR 0 10
16043: PPUSH
16044: LD_INT 2
16046: PPUSH
16047: CALL_OW 272
16051: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16052: LD_ADDR_VAR 0 12
16056: PUSH
16057: LD_VAR 0 13
16061: PPUSH
16062: CALL_OW 251
16066: PPUSH
16067: LD_VAR 0 10
16071: PPUSH
16072: LD_INT 2
16074: PPUSH
16075: CALL_OW 273
16079: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16080: LD_VAR 0 11
16084: PPUSH
16085: LD_VAR 0 12
16089: PPUSH
16090: CALL_OW 488
16094: PUSH
16095: LD_VAR 0 11
16099: PPUSH
16100: LD_VAR 0 12
16104: PPUSH
16105: CALL_OW 428
16109: NOT
16110: AND
16111: IFFALSE 16134
// begin ComMoveXY ( tmp , _x , _y ) ;
16113: LD_VAR 0 13
16117: PPUSH
16118: LD_VAR 0 11
16122: PPUSH
16123: LD_VAR 0 12
16127: PPUSH
16128: CALL_OW 111
// break ;
16132: GO 16136
// end ; end ;
16134: GO 16021
16136: POP
16137: POP
// end ; end ;
16138: GO 15463
16140: POP
16141: POP
// end ;
16142: LD_VAR 0 8
16146: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16147: LD_INT 0
16149: PPUSH
// result := true ;
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16158: LD_VAR 0 2
16162: PUSH
16163: LD_INT 24
16165: DOUBLE
16166: EQUAL
16167: IFTRUE 16177
16169: LD_INT 33
16171: DOUBLE
16172: EQUAL
16173: IFTRUE 16177
16175: GO 16202
16177: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16178: LD_ADDR_VAR 0 3
16182: PUSH
16183: LD_INT 32
16185: PPUSH
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 321
16195: PUSH
16196: LD_INT 2
16198: EQUAL
16199: ST_TO_ADDR
16200: GO 16518
16202: LD_INT 20
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16235
16210: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16211: LD_ADDR_VAR 0 3
16215: PUSH
16216: LD_INT 6
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: CALL_OW 321
16228: PUSH
16229: LD_INT 2
16231: EQUAL
16232: ST_TO_ADDR
16233: GO 16518
16235: LD_INT 22
16237: DOUBLE
16238: EQUAL
16239: IFTRUE 16249
16241: LD_INT 36
16243: DOUBLE
16244: EQUAL
16245: IFTRUE 16249
16247: GO 16274
16249: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: LD_INT 15
16257: PPUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 321
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: ST_TO_ADDR
16272: GO 16518
16274: LD_INT 30
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16307
16282: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16283: LD_ADDR_VAR 0 3
16287: PUSH
16288: LD_INT 20
16290: PPUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 321
16300: PUSH
16301: LD_INT 2
16303: EQUAL
16304: ST_TO_ADDR
16305: GO 16518
16307: LD_INT 28
16309: DOUBLE
16310: EQUAL
16311: IFTRUE 16321
16313: LD_INT 21
16315: DOUBLE
16316: EQUAL
16317: IFTRUE 16321
16319: GO 16346
16321: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16322: LD_ADDR_VAR 0 3
16326: PUSH
16327: LD_INT 21
16329: PPUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 321
16339: PUSH
16340: LD_INT 2
16342: EQUAL
16343: ST_TO_ADDR
16344: GO 16518
16346: LD_INT 16
16348: DOUBLE
16349: EQUAL
16350: IFTRUE 16354
16352: GO 16379
16354: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16355: LD_ADDR_VAR 0 3
16359: PUSH
16360: LD_INT 84
16362: PPUSH
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 321
16372: PUSH
16373: LD_INT 2
16375: EQUAL
16376: ST_TO_ADDR
16377: GO 16518
16379: LD_INT 19
16381: DOUBLE
16382: EQUAL
16383: IFTRUE 16393
16385: LD_INT 23
16387: DOUBLE
16388: EQUAL
16389: IFTRUE 16393
16391: GO 16418
16393: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16394: LD_ADDR_VAR 0 3
16398: PUSH
16399: LD_INT 83
16401: PPUSH
16402: LD_VAR 0 1
16406: PPUSH
16407: CALL_OW 321
16411: PUSH
16412: LD_INT 2
16414: EQUAL
16415: ST_TO_ADDR
16416: GO 16518
16418: LD_INT 17
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16451
16426: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16427: LD_ADDR_VAR 0 3
16431: PUSH
16432: LD_INT 39
16434: PPUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 321
16444: PUSH
16445: LD_INT 2
16447: EQUAL
16448: ST_TO_ADDR
16449: GO 16518
16451: LD_INT 18
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16484
16459: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16460: LD_ADDR_VAR 0 3
16464: PUSH
16465: LD_INT 40
16467: PPUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL_OW 321
16477: PUSH
16478: LD_INT 2
16480: EQUAL
16481: ST_TO_ADDR
16482: GO 16518
16484: LD_INT 27
16486: DOUBLE
16487: EQUAL
16488: IFTRUE 16492
16490: GO 16517
16492: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16493: LD_ADDR_VAR 0 3
16497: PUSH
16498: LD_INT 35
16500: PPUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 321
16510: PUSH
16511: LD_INT 2
16513: EQUAL
16514: ST_TO_ADDR
16515: GO 16518
16517: POP
// end ;
16518: LD_VAR 0 3
16522: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16523: LD_INT 0
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
// result := false ;
16536: LD_ADDR_VAR 0 6
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16544: LD_VAR 0 1
16548: NOT
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 266
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: IN
16570: NOT
16571: OR
16572: PUSH
16573: LD_VAR 0 2
16577: NOT
16578: OR
16579: PUSH
16580: LD_VAR 0 5
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 3
16596: PUSH
16597: LD_INT 4
16599: PUSH
16600: LD_INT 5
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: IN
16611: NOT
16612: OR
16613: PUSH
16614: LD_VAR 0 3
16618: PPUSH
16619: LD_VAR 0 4
16623: PPUSH
16624: CALL_OW 488
16628: NOT
16629: OR
16630: IFFALSE 16634
// exit ;
16632: GO 17370
// side := GetSide ( depot ) ;
16634: LD_ADDR_VAR 0 9
16638: PUSH
16639: LD_VAR 0 1
16643: PPUSH
16644: CALL_OW 255
16648: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16649: LD_VAR 0 9
16653: PPUSH
16654: LD_VAR 0 2
16658: PPUSH
16659: CALL 16147 0 2
16663: NOT
16664: IFFALSE 16668
// exit ;
16666: GO 17370
// pom := GetBase ( depot ) ;
16668: LD_ADDR_VAR 0 10
16672: PUSH
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 274
16682: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16683: LD_ADDR_VAR 0 11
16687: PUSH
16688: LD_VAR 0 2
16692: PPUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 248
16702: PPUSH
16703: CALL_OW 450
16707: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16708: LD_VAR 0 10
16712: PPUSH
16713: LD_INT 1
16715: PPUSH
16716: CALL_OW 275
16720: PUSH
16721: LD_VAR 0 11
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: GREATEREQUAL
16730: PUSH
16731: LD_VAR 0 10
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 275
16743: PUSH
16744: LD_VAR 0 11
16748: PUSH
16749: LD_INT 2
16751: ARRAY
16752: GREATEREQUAL
16753: AND
16754: PUSH
16755: LD_VAR 0 10
16759: PPUSH
16760: LD_INT 3
16762: PPUSH
16763: CALL_OW 275
16767: PUSH
16768: LD_VAR 0 11
16772: PUSH
16773: LD_INT 3
16775: ARRAY
16776: GREATEREQUAL
16777: AND
16778: NOT
16779: IFFALSE 16783
// exit ;
16781: GO 17370
// if GetBType ( depot ) = b_depot then
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 266
16792: PUSH
16793: LD_INT 0
16795: EQUAL
16796: IFFALSE 16808
// dist := 28 else
16798: LD_ADDR_VAR 0 14
16802: PUSH
16803: LD_INT 28
16805: ST_TO_ADDR
16806: GO 16816
// dist := 36 ;
16808: LD_ADDR_VAR 0 14
16812: PUSH
16813: LD_INT 36
16815: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16816: LD_VAR 0 1
16820: PPUSH
16821: LD_VAR 0 3
16825: PPUSH
16826: LD_VAR 0 4
16830: PPUSH
16831: CALL_OW 297
16835: PUSH
16836: LD_VAR 0 14
16840: GREATER
16841: IFFALSE 16845
// exit ;
16843: GO 17370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16845: LD_ADDR_VAR 0 12
16849: PUSH
16850: LD_VAR 0 2
16854: PPUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_VAR 0 4
16864: PPUSH
16865: LD_VAR 0 5
16869: PPUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 248
16879: PPUSH
16880: LD_INT 0
16882: PPUSH
16883: CALL 17375 0 6
16887: ST_TO_ADDR
// if not hexes then
16888: LD_VAR 0 12
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 17370
// hex := GetHexInfo ( x , y ) ;
16897: LD_ADDR_VAR 0 15
16901: PUSH
16902: LD_VAR 0 3
16906: PPUSH
16907: LD_VAR 0 4
16911: PPUSH
16912: CALL_OW 546
16916: ST_TO_ADDR
// if hex [ 1 ] then
16917: LD_VAR 0 15
16921: PUSH
16922: LD_INT 1
16924: ARRAY
16925: IFFALSE 16929
// exit ;
16927: GO 17370
// height := hex [ 2 ] ;
16929: LD_ADDR_VAR 0 13
16933: PUSH
16934: LD_VAR 0 15
16938: PUSH
16939: LD_INT 2
16941: ARRAY
16942: ST_TO_ADDR
// for i = 1 to hexes do
16943: LD_ADDR_VAR 0 7
16947: PUSH
16948: DOUBLE
16949: LD_INT 1
16951: DEC
16952: ST_TO_ADDR
16953: LD_VAR 0 12
16957: PUSH
16958: FOR_TO
16959: IFFALSE 17289
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16961: LD_VAR 0 12
16965: PUSH
16966: LD_VAR 0 7
16970: ARRAY
16971: PUSH
16972: LD_INT 1
16974: ARRAY
16975: PPUSH
16976: LD_VAR 0 12
16980: PUSH
16981: LD_VAR 0 7
16985: ARRAY
16986: PUSH
16987: LD_INT 2
16989: ARRAY
16990: PPUSH
16991: CALL_OW 488
16995: NOT
16996: PUSH
16997: LD_VAR 0 12
17001: PUSH
17002: LD_VAR 0 7
17006: ARRAY
17007: PUSH
17008: LD_INT 1
17010: ARRAY
17011: PPUSH
17012: LD_VAR 0 12
17016: PUSH
17017: LD_VAR 0 7
17021: ARRAY
17022: PUSH
17023: LD_INT 2
17025: ARRAY
17026: PPUSH
17027: CALL_OW 428
17031: PUSH
17032: LD_INT 0
17034: GREATER
17035: OR
17036: PUSH
17037: LD_VAR 0 12
17041: PUSH
17042: LD_VAR 0 7
17046: ARRAY
17047: PUSH
17048: LD_INT 1
17050: ARRAY
17051: PPUSH
17052: LD_VAR 0 12
17056: PUSH
17057: LD_VAR 0 7
17061: ARRAY
17062: PUSH
17063: LD_INT 2
17065: ARRAY
17066: PPUSH
17067: CALL_OW 351
17071: OR
17072: IFFALSE 17078
// exit ;
17074: POP
17075: POP
17076: GO 17370
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17078: LD_ADDR_VAR 0 8
17082: PUSH
17083: LD_VAR 0 12
17087: PUSH
17088: LD_VAR 0 7
17092: ARRAY
17093: PUSH
17094: LD_INT 1
17096: ARRAY
17097: PPUSH
17098: LD_VAR 0 12
17102: PUSH
17103: LD_VAR 0 7
17107: ARRAY
17108: PUSH
17109: LD_INT 2
17111: ARRAY
17112: PPUSH
17113: CALL_OW 546
17117: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17118: LD_VAR 0 8
17122: PUSH
17123: LD_INT 1
17125: ARRAY
17126: PUSH
17127: LD_VAR 0 8
17131: PUSH
17132: LD_INT 2
17134: ARRAY
17135: PUSH
17136: LD_VAR 0 13
17140: PUSH
17141: LD_INT 2
17143: PLUS
17144: GREATER
17145: OR
17146: PUSH
17147: LD_VAR 0 8
17151: PUSH
17152: LD_INT 2
17154: ARRAY
17155: PUSH
17156: LD_VAR 0 13
17160: PUSH
17161: LD_INT 2
17163: MINUS
17164: LESS
17165: OR
17166: PUSH
17167: LD_VAR 0 8
17171: PUSH
17172: LD_INT 3
17174: ARRAY
17175: PUSH
17176: LD_INT 0
17178: PUSH
17179: LD_INT 8
17181: PUSH
17182: LD_INT 9
17184: PUSH
17185: LD_INT 10
17187: PUSH
17188: LD_INT 11
17190: PUSH
17191: LD_INT 12
17193: PUSH
17194: LD_INT 13
17196: PUSH
17197: LD_INT 16
17199: PUSH
17200: LD_INT 17
17202: PUSH
17203: LD_INT 18
17205: PUSH
17206: LD_INT 19
17208: PUSH
17209: LD_INT 20
17211: PUSH
17212: LD_INT 21
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: IN
17230: NOT
17231: OR
17232: PUSH
17233: LD_VAR 0 8
17237: PUSH
17238: LD_INT 5
17240: ARRAY
17241: NOT
17242: OR
17243: PUSH
17244: LD_VAR 0 8
17248: PUSH
17249: LD_INT 6
17251: ARRAY
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: LD_INT 2
17258: PUSH
17259: LD_INT 7
17261: PUSH
17262: LD_INT 9
17264: PUSH
17265: LD_INT 10
17267: PUSH
17268: LD_INT 11
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: IN
17279: NOT
17280: OR
17281: IFFALSE 17287
// exit ;
17283: POP
17284: POP
17285: GO 17370
// end ;
17287: GO 16958
17289: POP
17290: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17291: LD_VAR 0 9
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: LD_VAR 0 4
17305: PPUSH
17306: LD_INT 20
17308: PPUSH
17309: CALL 9322 0 4
17313: PUSH
17314: LD_INT 4
17316: ARRAY
17317: IFFALSE 17321
// exit ;
17319: GO 17370
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17321: LD_VAR 0 2
17325: PUSH
17326: LD_INT 29
17328: PUSH
17329: LD_INT 30
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: IN
17336: PUSH
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_VAR 0 4
17346: PPUSH
17347: LD_VAR 0 9
17351: PPUSH
17352: CALL_OW 440
17356: NOT
17357: AND
17358: IFFALSE 17362
// exit ;
17360: GO 17370
// result := true ;
17362: LD_ADDR_VAR 0 6
17366: PUSH
17367: LD_INT 1
17369: ST_TO_ADDR
// end ;
17370: LD_VAR 0 6
17374: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17375: LD_INT 0
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
17434: PPUSH
// result = [ ] ;
17435: LD_ADDR_VAR 0 7
17439: PUSH
17440: EMPTY
17441: ST_TO_ADDR
// temp_list = [ ] ;
17442: LD_ADDR_VAR 0 9
17446: PUSH
17447: EMPTY
17448: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17449: LD_VAR 0 4
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: LD_INT 2
17462: PUSH
17463: LD_INT 3
17465: PUSH
17466: LD_INT 4
17468: PUSH
17469: LD_INT 5
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: IN
17480: NOT
17481: PUSH
17482: LD_VAR 0 1
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: IN
17497: PUSH
17498: LD_VAR 0 5
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: LD_INT 2
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: LIST
17516: IN
17517: NOT
17518: AND
17519: OR
17520: IFFALSE 17524
// exit ;
17522: GO 35915
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17524: LD_VAR 0 1
17528: PUSH
17529: LD_INT 6
17531: PUSH
17532: LD_INT 7
17534: PUSH
17535: LD_INT 8
17537: PUSH
17538: LD_INT 13
17540: PUSH
17541: LD_INT 12
17543: PUSH
17544: LD_INT 15
17546: PUSH
17547: LD_INT 11
17549: PUSH
17550: LD_INT 14
17552: PUSH
17553: LD_INT 10
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: IN
17567: IFFALSE 17577
// btype = b_lab ;
17569: LD_ADDR_VAR 0 1
17573: PUSH
17574: LD_INT 6
17576: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17577: LD_VAR 0 6
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: IN
17596: NOT
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 1
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 36
17620: PUSH
17621: LD_INT 4
17623: PUSH
17624: LD_INT 5
17626: PUSH
17627: LD_INT 31
17629: PUSH
17630: LD_INT 32
17632: PUSH
17633: LD_INT 33
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: IN
17649: NOT
17650: PUSH
17651: LD_VAR 0 6
17655: PUSH
17656: LD_INT 1
17658: EQUAL
17659: AND
17660: OR
17661: PUSH
17662: LD_VAR 0 1
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 3
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: IN
17677: NOT
17678: PUSH
17679: LD_VAR 0 6
17683: PUSH
17684: LD_INT 2
17686: EQUAL
17687: AND
17688: OR
17689: IFFALSE 17699
// mode = 0 ;
17691: LD_ADDR_VAR 0 6
17695: PUSH
17696: LD_INT 0
17698: ST_TO_ADDR
// case mode of 0 :
17699: LD_VAR 0 6
17703: PUSH
17704: LD_INT 0
17706: DOUBLE
17707: EQUAL
17708: IFTRUE 17712
17710: GO 29165
17712: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17713: LD_ADDR_VAR 0 11
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: LD_INT 1
17733: NEG
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 0
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: LD_INT 1
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: LD_INT 1
17786: NEG
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: LD_INT 2
17798: NEG
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: LD_INT 2
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 1
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: PUSH
17829: LD_INT 2
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: LD_INT 3
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: LD_INT 3
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 1
17879: NEG
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17906: LD_ADDR_VAR 0 12
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: LD_INT 0
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 0
17954: PUSH
17955: LD_INT 1
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 1
17964: NEG
17965: PUSH
17966: LD_INT 0
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 1
17979: NEG
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 1
17987: PUSH
17988: LD_INT 1
17990: NEG
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 2
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 1
18018: NEG
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: NEG
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 2
18040: NEG
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: NEG
18053: PUSH
18054: LD_INT 1
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 3
18063: NEG
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 3
18074: NEG
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18102: LD_ADDR_VAR 0 13
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: LD_INT 1
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 0
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 1
18160: NEG
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 1
18171: NEG
18172: PUSH
18173: LD_INT 1
18175: NEG
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: LD_INT 2
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 2
18225: NEG
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: LD_INT 2
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: NEG
18250: PUSH
18251: LD_INT 3
18253: NEG
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 3
18261: NEG
18262: PUSH
18263: LD_INT 2
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 3
18273: NEG
18274: PUSH
18275: LD_INT 3
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18301: LD_ADDR_VAR 0 14
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 1
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: LD_INT 1
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: LD_INT 2
18386: NEG
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 2
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 2
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 3
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 3
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: LD_INT 2
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18497: LD_ADDR_VAR 0 15
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 0
18514: PUSH
18515: LD_INT 1
18517: NEG
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: LD_INT 1
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: LD_INT 1
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: NEG
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: NEG
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 3
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 3
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18690: LD_ADDR_VAR 0 16
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 0
18707: PUSH
18708: LD_INT 1
18710: NEG
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 0
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: LD_INT 2
18775: NEG
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 2
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 2
18813: NEG
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 2
18825: NEG
18826: PUSH
18827: LD_INT 2
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 3
18847: PUSH
18848: LD_INT 3
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: LD_INT 3
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18883: LD_ADDR_VAR 0 17
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: LD_INT 2
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: LD_INT 2
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: NEG
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: LD_INT 2
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19113: LD_ADDR_VAR 0 18
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: LD_INT 1
19133: NEG
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: NEG
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: NEG
19195: PUSH
19196: LD_INT 2
19198: NEG
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 1
19220: NEG
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 2
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 2
19289: NEG
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: NEG
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19343: LD_ADDR_VAR 0 19
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 2
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 1
19450: NEG
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 2
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 2
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 1
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 0
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: NEG
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: NEG
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: LD_INT 2
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19573: LD_ADDR_VAR 0 20
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: LD_INT 1
19593: NEG
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 2
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: LD_INT 0
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 2
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 2
19760: NEG
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: NEG
19773: PUSH
19774: LD_INT 2
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19803: LD_ADDR_VAR 0 21
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: LD_INT 1
19823: NEG
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: NEG
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: NEG
20003: PUSH
20004: LD_INT 2
20006: NEG
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20033: LD_ADDR_VAR 0 22
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: LD_INT 1
20053: NEG
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: LD_INT 2
20118: NEG
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: LD_INT 2
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: NEG
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: LD_INT 0
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: NEG
20233: PUSH
20234: LD_INT 2
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20263: LD_ADDR_VAR 0 23
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: LD_INT 1
20283: NEG
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: NEG
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 2
20439: NEG
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 2
20474: NEG
20475: PUSH
20476: LD_INT 3
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: NEG
20487: PUSH
20488: LD_INT 3
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: LD_INT 2
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 1
20512: NEG
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20543: LD_ADDR_VAR 0 24
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: LD_INT 2
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: LD_INT 2
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 2
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 0
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: LD_INT 2
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: LD_INT 2
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 3
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 3
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20819: LD_ADDR_VAR 0 25
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 1
20839: NEG
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 2
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: NEG
21019: PUSH
21020: LD_INT 2
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 3
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 3
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: LD_INT 3
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21093: LD_ADDR_VAR 0 26
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: LD_INT 2
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: LD_INT 3
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 3
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: NEG
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21369: LD_ADDR_VAR 0 27
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 1
21438: NEG
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: NEG
21451: PUSH
21452: LD_INT 2
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: LD_INT 2
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: LD_INT 1
21476: NEG
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: LD_INT 2
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: NEG
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 2
21568: NEG
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 2
21591: NEG
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 3
21602: NEG
21603: PUSH
21604: LD_INT 1
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 3
21614: NEG
21615: PUSH
21616: LD_INT 2
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21649: LD_ADDR_VAR 0 28
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: LD_INT 1
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: LD_INT 1
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: LD_INT 2
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: LD_INT 0
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 2
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 2
21860: NEG
21861: PUSH
21862: LD_INT 3
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: NEG
21873: PUSH
21874: LD_INT 3
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 3
21884: NEG
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 3
21896: NEG
21897: PUSH
21898: LD_INT 2
21900: NEG
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21931: LD_ADDR_VAR 0 29
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 1
22012: NEG
22013: PUSH
22014: LD_INT 2
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 2
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 2
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: NEG
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 2
22121: NEG
22122: PUSH
22123: LD_INT 3
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 1
22136: NEG
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 3
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 3
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: LD_INT 2
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 3
22175: NEG
22176: PUSH
22177: LD_INT 2
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22210: LD_ADDR_VAR 0 30
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: LD_INT 2
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: NEG
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 2
22376: NEG
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: LD_INT 3
22403: NEG
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: LD_INT 2
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 3
22422: PUSH
22423: LD_INT 2
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 3
22453: NEG
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22488: LD_ADDR_VAR 0 31
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 0
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 2
22653: NEG
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 2
22665: NEG
22666: PUSH
22667: LD_INT 2
22669: NEG
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 2
22677: NEG
22678: PUSH
22679: LD_INT 3
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 1
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 3
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: LD_INT 3
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 3
22731: NEG
22732: PUSH
22733: LD_INT 2
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22766: LD_ADDR_VAR 0 32
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: LD_INT 2
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 1
22921: NEG
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 2
22932: NEG
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: LD_INT 3
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 3
23009: NEG
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23044: LD_ADDR_VAR 0 33
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 2
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: NEG
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 2
23222: NEG
23223: PUSH
23224: LD_INT 2
23226: NEG
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 2
23234: NEG
23235: PUSH
23236: LD_INT 3
23238: NEG
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 3
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 3
23288: NEG
23289: PUSH
23290: LD_INT 2
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23323: LD_ADDR_VAR 0 34
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: LD_INT 1
23343: NEG
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: LD_INT 1
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: LD_INT 1
23430: NEG
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 2
23502: NEG
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 3
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 2
23557: NEG
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 3
23568: NEG
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23603: LD_ADDR_VAR 0 35
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 1
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 2
23694: NEG
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23715: LD_ADDR_VAR 0 36
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 1
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 0
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23827: LD_ADDR_VAR 0 37
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: NEG
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23939: LD_ADDR_VAR 0 38
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: LD_INT 0
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 2
24030: NEG
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24051: LD_ADDR_VAR 0 39
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: LD_INT 2
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24163: LD_ADDR_VAR 0 40
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24275: LD_ADDR_VAR 0 41
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 2
24441: NEG
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: NEG
24454: PUSH
24455: LD_INT 2
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: LD_INT 3
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 3
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 3
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 3
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 3
24518: PUSH
24519: LD_INT 3
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: LD_INT 3
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 2
24538: NEG
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 3
24549: NEG
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 3
24560: NEG
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 3
24572: NEG
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 3
24584: NEG
24585: PUSH
24586: LD_INT 3
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24625: LD_ADDR_VAR 0 42
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: LD_INT 2
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 2
24791: NEG
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 2
24803: NEG
24804: PUSH
24805: LD_INT 2
24807: NEG
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: NEG
24816: PUSH
24817: LD_INT 3
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 3
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: LD_INT 3
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: LD_INT 2
24853: NEG
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 3
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 3
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: LD_INT 3
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 3
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: LD_INT 3
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 3
24922: NEG
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 3
24934: NEG
24935: PUSH
24936: LD_INT 3
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24975: LD_ADDR_VAR 0 43
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 3
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_INT 3
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 3
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 3
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 3
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 3
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 2
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 3
25271: NEG
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 3
25282: NEG
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25323: LD_ADDR_VAR 0 44
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: LD_INT 2
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: NEG
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 2
25489: NEG
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: NEG
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 2
25513: NEG
25514: PUSH
25515: LD_INT 3
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 3
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 3
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 3
25566: PUSH
25567: LD_INT 3
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 2
25586: NEG
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 3
25597: NEG
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 3
25608: NEG
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 3
25620: NEG
25621: PUSH
25622: LD_INT 2
25624: NEG
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 3
25632: NEG
25633: PUSH
25634: LD_INT 3
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25673: LD_ADDR_VAR 0 45
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 2
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 2
25839: NEG
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: LD_INT 3
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: LD_INT 3
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 3
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: LD_INT 2
25901: NEG
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 3
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: LD_INT 3
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: LD_INT 3
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: NEG
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 3
25970: NEG
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 3
25982: NEG
25983: PUSH
25984: LD_INT 3
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26023: LD_ADDR_VAR 0 46
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 2
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: LD_INT 3
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: LD_INT 3
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 3
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: LD_INT 3
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: LD_INT 3
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 3
26319: NEG
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 3
26330: NEG
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26371: LD_ADDR_VAR 0 47
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: LD_INT 2
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 2
26486: NEG
26487: PUSH
26488: LD_INT 1
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: NEG
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26522: LD_ADDR_VAR 0 48
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 2
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: LD_INT 2
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 2
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26669: LD_ADDR_VAR 0 49
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 2
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 2
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26813: LD_ADDR_VAR 0 50
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26957: LD_ADDR_VAR 0 51
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27104: LD_ADDR_VAR 0 52
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: LD_INT 2
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27255: LD_ADDR_VAR 0 53
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 2
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 2
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 2
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27485: LD_ADDR_VAR 0 54
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 2
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27715: LD_ADDR_VAR 0 55
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 2
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: NEG
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: LD_INT 2
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27945: LD_ADDR_VAR 0 56
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: LD_INT 2
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: NEG
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: LD_INT 2
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28175: LD_ADDR_VAR 0 57
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28405: LD_ADDR_VAR 0 58
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 0
28560: PUSH
28561: LD_INT 2
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: NEG
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 2
28604: NEG
28605: PUSH
28606: LD_INT 2
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28635: LD_ADDR_VAR 0 59
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28723: LD_ADDR_VAR 0 60
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28811: LD_ADDR_VAR 0 61
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28899: LD_ADDR_VAR 0 62
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28987: LD_ADDR_VAR 0 63
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29075: LD_ADDR_VAR 0 64
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: ST_TO_ADDR
// end ; 1 :
29163: GO 35060
29165: LD_INT 1
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 31796
29173: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29174: LD_ADDR_VAR 0 11
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: LD_INT 2
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29218: LD_ADDR_VAR 0 12
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 3
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29259: LD_ADDR_VAR 0 13
29263: PUSH
29264: LD_INT 3
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29299: LD_ADDR_VAR 0 14
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: LD_INT 3
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: LD_INT 2
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29340: LD_ADDR_VAR 0 15
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 3
29358: NEG
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 3
29369: NEG
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29384: LD_ADDR_VAR 0 16
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: LD_INT 3
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: LD_INT 3
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29430: LD_ADDR_VAR 0 17
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: LD_INT 3
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 3
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29474: LD_ADDR_VAR 0 18
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 3
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29515: LD_ADDR_VAR 0 19
29519: PUSH
29520: LD_INT 3
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29555: LD_ADDR_VAR 0 20
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 3
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29596: LD_ADDR_VAR 0 21
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 3
29614: NEG
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29640: LD_ADDR_VAR 0 22
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: LD_INT 2
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 3
29671: NEG
29672: PUSH
29673: LD_INT 3
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29686: LD_ADDR_VAR 0 23
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: LD_INT 4
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: LD_INT 3
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29730: LD_ADDR_VAR 0 24
29734: PUSH
29735: LD_INT 3
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 3
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 4
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29771: LD_ADDR_VAR 0 25
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 4
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: LD_INT 4
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29811: LD_ADDR_VAR 0 26
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: LD_INT 3
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: LD_INT 4
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: LD_INT 3
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29852: LD_ADDR_VAR 0 27
29856: PUSH
29857: LD_INT 3
29859: NEG
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: LD_INT 1
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 4
29881: NEG
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29896: LD_ADDR_VAR 0 28
29900: PUSH
29901: LD_INT 3
29903: NEG
29904: PUSH
29905: LD_INT 3
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 3
29915: NEG
29916: PUSH
29917: LD_INT 4
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 4
29927: NEG
29928: PUSH
29929: LD_INT 3
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29942: LD_ADDR_VAR 0 29
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 3
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 2
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 4
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 0
29995: PUSH
29996: LD_INT 4
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: LD_INT 5
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: LD_INT 5
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 4
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: LD_INT 6
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 6
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 5
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30097: LD_ADDR_VAR 0 30
30101: PUSH
30102: LD_INT 2
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 4
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 4
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 4
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 5
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 5
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 5
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 6
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 6
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30240: LD_ADDR_VAR 0 31
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 3
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 4
30277: PUSH
30278: LD_INT 3
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: LD_INT 4
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: LD_INT 4
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 5
30317: PUSH
30318: LD_INT 5
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 4
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 6
30337: PUSH
30338: LD_INT 5
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 6
30347: PUSH
30348: LD_INT 6
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 5
30357: PUSH
30358: LD_INT 6
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30379: LD_ADDR_VAR 0 32
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: LD_INT 4
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: LD_INT 4
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 5
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: LD_INT 4
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 6
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: LD_INT 6
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: LD_INT 5
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30522: LD_ADDR_VAR 0 33
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: NEG
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 4
30585: NEG
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 5
30608: NEG
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 5
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 5
30631: NEG
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 6
30642: NEG
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 6
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30677: LD_ADDR_VAR 0 34
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 3
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: NEG
30697: PUSH
30698: LD_INT 2
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: LD_INT 3
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: LD_INT 4
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 4
30732: NEG
30733: PUSH
30734: LD_INT 3
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 4
30744: NEG
30745: PUSH
30746: LD_INT 4
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 4
30756: NEG
30757: PUSH
30758: LD_INT 5
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 5
30768: NEG
30769: PUSH
30770: LD_INT 4
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 5
30780: NEG
30781: PUSH
30782: LD_INT 5
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 5
30792: NEG
30793: PUSH
30794: LD_INT 6
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 6
30804: NEG
30805: PUSH
30806: LD_INT 5
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 6
30816: NEG
30817: PUSH
30818: LD_INT 6
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30840: LD_ADDR_VAR 0 41
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 2
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: LD_INT 3
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30884: LD_ADDR_VAR 0 42
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 0
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 1
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30925: LD_ADDR_VAR 0 43
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 3
30942: PUSH
30943: LD_INT 2
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30965: LD_ADDR_VAR 0 44
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31006: LD_ADDR_VAR 0 45
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 3
31035: NEG
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31050: LD_ADDR_VAR 0 46
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 2
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 2
31069: NEG
31070: PUSH
31071: LD_INT 3
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 3
31081: NEG
31082: PUSH
31083: LD_INT 2
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31096: LD_ADDR_VAR 0 47
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31129: LD_ADDR_VAR 0 48
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31160: LD_ADDR_VAR 0 49
31164: PUSH
31165: LD_INT 3
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 3
31177: PUSH
31178: LD_INT 2
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31189: LD_ADDR_VAR 0 50
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31218: LD_ADDR_VAR 0 51
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 2
31236: NEG
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31249: LD_ADDR_VAR 0 52
31253: PUSH
31254: LD_INT 3
31256: NEG
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 3
31268: NEG
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31282: LD_ADDR_VAR 0 53
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 3
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: LD_INT 2
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31326: LD_ADDR_VAR 0 54
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31367: LD_ADDR_VAR 0 55
31371: PUSH
31372: LD_INT 3
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 3
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 3
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31407: LD_ADDR_VAR 0 56
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 3
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: LIST
31447: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31448: LD_ADDR_VAR 0 57
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 3
31466: NEG
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31492: LD_ADDR_VAR 0 58
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: LD_INT 3
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 3
31523: NEG
31524: PUSH
31525: LD_INT 3
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31538: LD_ADDR_VAR 0 59
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31582: LD_ADDR_VAR 0 60
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31623: LD_ADDR_VAR 0 61
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31663: LD_ADDR_VAR 0 62
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: LD_INT 1
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31704: LD_ADDR_VAR 0 63
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31748: LD_ADDR_VAR 0 64
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: ST_TO_ADDR
// end ; 2 :
31794: GO 35060
31796: LD_INT 2
31798: DOUBLE
31799: EQUAL
31800: IFTRUE 31804
31802: GO 35059
31804: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31805: LD_ADDR_VAR 0 29
31809: PUSH
31810: LD_INT 4
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 4
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 5
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 5
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: LD_INT 1
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 3
31905: PUSH
31906: LD_INT 3
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 3
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 4
31935: PUSH
31936: LD_INT 4
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 3
31945: PUSH
31946: LD_INT 4
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: LD_INT 4
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 4
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: LD_INT 3
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: LD_INT 4
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 5
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: LD_INT 4
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 5
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: LD_INT 3
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 4
32155: NEG
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 4
32167: NEG
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 4
32190: NEG
32191: PUSH
32192: LD_INT 4
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 4
32202: NEG
32203: PUSH
32204: LD_INT 5
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 3
32214: NEG
32215: PUSH
32216: LD_INT 4
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: NEG
32227: PUSH
32228: LD_INT 3
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 4
32238: NEG
32239: PUSH
32240: LD_INT 3
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 5
32250: NEG
32251: PUSH
32252: LD_INT 4
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 5
32262: NEG
32263: PUSH
32264: LD_INT 5
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: NEG
32275: PUSH
32276: LD_INT 5
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 5
32286: NEG
32287: PUSH
32288: LD_INT 3
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32343: LD_ADDR_VAR 0 30
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: PUSH
32361: LD_INT 3
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 5
32370: PUSH
32371: LD_INT 4
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 5
32380: PUSH
32381: LD_INT 5
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: LD_INT 5
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 5
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 3
32430: PUSH
32431: LD_INT 5
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 4
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 3
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: LD_INT 4
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 4
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 4
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 5
32589: NEG
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 5
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 5
32612: NEG
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 3
32635: NEG
32636: PUSH
32637: LD_INT 3
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: LD_INT 4
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 2
32659: NEG
32660: PUSH
32661: LD_INT 3
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 3
32683: NEG
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 4
32695: NEG
32696: PUSH
32697: LD_INT 3
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 4
32707: NEG
32708: PUSH
32709: LD_INT 4
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: LD_INT 4
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 4
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 4
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: LD_INT 5
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 4
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 3
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 4
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: PUSH
32812: LD_INT 5
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: LD_INT 5
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32890: LD_ADDR_VAR 0 31
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 4
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 4
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: LD_INT 5
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 2
32969: PUSH
32970: LD_INT 5
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 3
32990: NEG
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 3
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 4
33057: NEG
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 4
33069: NEG
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 4
33092: NEG
33093: PUSH
33094: LD_INT 4
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 4
33104: NEG
33105: PUSH
33106: LD_INT 5
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 3
33116: NEG
33117: PUSH
33118: LD_INT 4
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: NEG
33129: PUSH
33130: LD_INT 3
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 4
33140: NEG
33141: PUSH
33142: LD_INT 3
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 5
33152: NEG
33153: PUSH
33154: LD_INT 4
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 5
33164: NEG
33165: PUSH
33166: LD_INT 5
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: NEG
33177: PUSH
33178: LD_INT 5
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 5
33188: NEG
33189: PUSH
33190: LD_INT 3
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 4
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 3
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: LD_INT 3
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: LD_INT 4
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 2
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: LD_INT 4
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 4
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: PUSH
33313: LD_INT 1
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 5
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 5
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 4
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 2
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33440: LD_ADDR_VAR 0 32
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 4
33458: NEG
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 3
33470: NEG
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 4
33492: NEG
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 5
33503: NEG
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 5
33514: NEG
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 5
33526: NEG
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 2
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: NEG
33550: PUSH
33551: LD_INT 3
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 3
33561: NEG
33562: PUSH
33563: LD_INT 4
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: LD_INT 3
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: NEG
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: NEG
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 4
33609: NEG
33610: PUSH
33611: LD_INT 3
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 4
33621: NEG
33622: PUSH
33623: LD_INT 4
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: LD_INT 4
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 4
33645: NEG
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 4
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 5
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: LD_INT 4
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 3
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: LD_INT 4
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: LD_INT 5
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: LD_INT 3
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: LD_INT 5
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 3
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 4
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 4
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: LD_INT 1
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 4
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 4
33852: PUSH
33853: LD_INT 4
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 4
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: LD_INT 4
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 5
33882: PUSH
33883: LD_INT 5
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 4
33892: PUSH
33893: LD_INT 5
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 4
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 5
33922: PUSH
33923: LD_INT 3
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: LD_INT 5
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33987: LD_ADDR_VAR 0 33
33991: PUSH
33992: LD_INT 4
33994: NEG
33995: PUSH
33996: LD_INT 4
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 4
34006: NEG
34007: PUSH
34008: LD_INT 5
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 3
34018: NEG
34019: PUSH
34020: LD_INT 4
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 3
34030: NEG
34031: PUSH
34032: LD_INT 3
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 4
34042: NEG
34043: PUSH
34044: LD_INT 3
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 5
34054: NEG
34055: PUSH
34056: LD_INT 4
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 5
34066: NEG
34067: PUSH
34068: LD_INT 5
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: LD_INT 5
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 5
34090: NEG
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 4
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 3
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: LD_INT 3
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: LD_INT 4
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: LD_INT 4
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 4
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 4
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 5
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 4
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 3
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 3
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 5
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 3
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 4
34317: PUSH
34318: LD_INT 3
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 4
34327: PUSH
34328: LD_INT 4
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: LD_INT 4
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 4
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 4
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 4
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 3
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 4
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 5
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: LD_INT 5
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 4
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 5
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 2
34469: NEG
34470: PUSH
34471: LD_INT 3
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34525: LD_ADDR_VAR 0 34
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 4
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 5
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 4
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: LD_INT 3
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 3
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: LD_INT 4
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: LD_INT 5
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 3
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: LD_INT 5
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 3
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 4
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 4
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 3
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 2
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 4
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 4
34727: PUSH
34728: LD_INT 4
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 4
34737: PUSH
34738: LD_INT 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 5
34747: PUSH
34748: LD_INT 4
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 5
34757: PUSH
34758: LD_INT 5
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 5
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 3
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 5
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 3
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: LD_INT 3
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 4
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 4
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: LD_INT 4
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 4
34910: NEG
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 4
34921: NEG
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 3
34944: NEG
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 4
34955: NEG
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 5
34966: NEG
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 5
34977: NEG
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 5
34989: NEG
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 3
35001: NEG
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: ST_TO_ADDR
// end ; end ;
35057: GO 35060
35059: POP
// case btype of b_depot , b_warehouse :
35060: LD_VAR 0 1
35064: PUSH
35065: LD_INT 0
35067: DOUBLE
35068: EQUAL
35069: IFTRUE 35079
35071: LD_INT 1
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35079
35077: GO 35280
35079: POP
// case nation of nation_american :
35080: LD_VAR 0 5
35084: PUSH
35085: LD_INT 1
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35093
35091: GO 35149
35093: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35094: LD_ADDR_VAR 0 9
35098: PUSH
35099: LD_VAR 0 11
35103: PUSH
35104: LD_VAR 0 12
35108: PUSH
35109: LD_VAR 0 13
35113: PUSH
35114: LD_VAR 0 14
35118: PUSH
35119: LD_VAR 0 15
35123: PUSH
35124: LD_VAR 0 16
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: PUSH
35137: LD_VAR 0 4
35141: PUSH
35142: LD_INT 1
35144: PLUS
35145: ARRAY
35146: ST_TO_ADDR
35147: GO 35278
35149: LD_INT 2
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35157
35155: GO 35213
35157: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35158: LD_ADDR_VAR 0 9
35162: PUSH
35163: LD_VAR 0 17
35167: PUSH
35168: LD_VAR 0 18
35172: PUSH
35173: LD_VAR 0 19
35177: PUSH
35178: LD_VAR 0 20
35182: PUSH
35183: LD_VAR 0 21
35187: PUSH
35188: LD_VAR 0 22
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: PUSH
35201: LD_VAR 0 4
35205: PUSH
35206: LD_INT 1
35208: PLUS
35209: ARRAY
35210: ST_TO_ADDR
35211: GO 35278
35213: LD_INT 3
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35221
35219: GO 35277
35221: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35222: LD_ADDR_VAR 0 9
35226: PUSH
35227: LD_VAR 0 23
35231: PUSH
35232: LD_VAR 0 24
35236: PUSH
35237: LD_VAR 0 25
35241: PUSH
35242: LD_VAR 0 26
35246: PUSH
35247: LD_VAR 0 27
35251: PUSH
35252: LD_VAR 0 28
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: PUSH
35265: LD_VAR 0 4
35269: PUSH
35270: LD_INT 1
35272: PLUS
35273: ARRAY
35274: ST_TO_ADDR
35275: GO 35278
35277: POP
35278: GO 35833
35280: LD_INT 2
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35294
35286: LD_INT 3
35288: DOUBLE
35289: EQUAL
35290: IFTRUE 35294
35292: GO 35350
35294: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35295: LD_ADDR_VAR 0 9
35299: PUSH
35300: LD_VAR 0 29
35304: PUSH
35305: LD_VAR 0 30
35309: PUSH
35310: LD_VAR 0 31
35314: PUSH
35315: LD_VAR 0 32
35319: PUSH
35320: LD_VAR 0 33
35324: PUSH
35325: LD_VAR 0 34
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: PUSH
35338: LD_VAR 0 4
35342: PUSH
35343: LD_INT 1
35345: PLUS
35346: ARRAY
35347: ST_TO_ADDR
35348: GO 35833
35350: LD_INT 16
35352: DOUBLE
35353: EQUAL
35354: IFTRUE 35412
35356: LD_INT 17
35358: DOUBLE
35359: EQUAL
35360: IFTRUE 35412
35362: LD_INT 18
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35412
35368: LD_INT 19
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35412
35374: LD_INT 22
35376: DOUBLE
35377: EQUAL
35378: IFTRUE 35412
35380: LD_INT 20
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35412
35386: LD_INT 21
35388: DOUBLE
35389: EQUAL
35390: IFTRUE 35412
35392: LD_INT 23
35394: DOUBLE
35395: EQUAL
35396: IFTRUE 35412
35398: LD_INT 24
35400: DOUBLE
35401: EQUAL
35402: IFTRUE 35412
35404: LD_INT 25
35406: DOUBLE
35407: EQUAL
35408: IFTRUE 35412
35410: GO 35468
35412: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35413: LD_ADDR_VAR 0 9
35417: PUSH
35418: LD_VAR 0 35
35422: PUSH
35423: LD_VAR 0 36
35427: PUSH
35428: LD_VAR 0 37
35432: PUSH
35433: LD_VAR 0 38
35437: PUSH
35438: LD_VAR 0 39
35442: PUSH
35443: LD_VAR 0 40
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: PUSH
35456: LD_VAR 0 4
35460: PUSH
35461: LD_INT 1
35463: PLUS
35464: ARRAY
35465: ST_TO_ADDR
35466: GO 35833
35468: LD_INT 6
35470: DOUBLE
35471: EQUAL
35472: IFTRUE 35524
35474: LD_INT 7
35476: DOUBLE
35477: EQUAL
35478: IFTRUE 35524
35480: LD_INT 8
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35524
35486: LD_INT 13
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35524
35492: LD_INT 12
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35524
35498: LD_INT 15
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35524
35504: LD_INT 11
35506: DOUBLE
35507: EQUAL
35508: IFTRUE 35524
35510: LD_INT 14
35512: DOUBLE
35513: EQUAL
35514: IFTRUE 35524
35516: LD_INT 10
35518: DOUBLE
35519: EQUAL
35520: IFTRUE 35524
35522: GO 35580
35524: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35525: LD_ADDR_VAR 0 9
35529: PUSH
35530: LD_VAR 0 41
35534: PUSH
35535: LD_VAR 0 42
35539: PUSH
35540: LD_VAR 0 43
35544: PUSH
35545: LD_VAR 0 44
35549: PUSH
35550: LD_VAR 0 45
35554: PUSH
35555: LD_VAR 0 46
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: PUSH
35568: LD_VAR 0 4
35572: PUSH
35573: LD_INT 1
35575: PLUS
35576: ARRAY
35577: ST_TO_ADDR
35578: GO 35833
35580: LD_INT 36
35582: DOUBLE
35583: EQUAL
35584: IFTRUE 35588
35586: GO 35644
35588: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35589: LD_ADDR_VAR 0 9
35593: PUSH
35594: LD_VAR 0 47
35598: PUSH
35599: LD_VAR 0 48
35603: PUSH
35604: LD_VAR 0 49
35608: PUSH
35609: LD_VAR 0 50
35613: PUSH
35614: LD_VAR 0 51
35618: PUSH
35619: LD_VAR 0 52
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: PUSH
35632: LD_VAR 0 4
35636: PUSH
35637: LD_INT 1
35639: PLUS
35640: ARRAY
35641: ST_TO_ADDR
35642: GO 35833
35644: LD_INT 4
35646: DOUBLE
35647: EQUAL
35648: IFTRUE 35670
35650: LD_INT 5
35652: DOUBLE
35653: EQUAL
35654: IFTRUE 35670
35656: LD_INT 34
35658: DOUBLE
35659: EQUAL
35660: IFTRUE 35670
35662: LD_INT 37
35664: DOUBLE
35665: EQUAL
35666: IFTRUE 35670
35668: GO 35726
35670: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35671: LD_ADDR_VAR 0 9
35675: PUSH
35676: LD_VAR 0 53
35680: PUSH
35681: LD_VAR 0 54
35685: PUSH
35686: LD_VAR 0 55
35690: PUSH
35691: LD_VAR 0 56
35695: PUSH
35696: LD_VAR 0 57
35700: PUSH
35701: LD_VAR 0 58
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: PUSH
35714: LD_VAR 0 4
35718: PUSH
35719: LD_INT 1
35721: PLUS
35722: ARRAY
35723: ST_TO_ADDR
35724: GO 35833
35726: LD_INT 31
35728: DOUBLE
35729: EQUAL
35730: IFTRUE 35776
35732: LD_INT 32
35734: DOUBLE
35735: EQUAL
35736: IFTRUE 35776
35738: LD_INT 33
35740: DOUBLE
35741: EQUAL
35742: IFTRUE 35776
35744: LD_INT 27
35746: DOUBLE
35747: EQUAL
35748: IFTRUE 35776
35750: LD_INT 26
35752: DOUBLE
35753: EQUAL
35754: IFTRUE 35776
35756: LD_INT 28
35758: DOUBLE
35759: EQUAL
35760: IFTRUE 35776
35762: LD_INT 29
35764: DOUBLE
35765: EQUAL
35766: IFTRUE 35776
35768: LD_INT 30
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35776
35774: GO 35832
35776: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35777: LD_ADDR_VAR 0 9
35781: PUSH
35782: LD_VAR 0 59
35786: PUSH
35787: LD_VAR 0 60
35791: PUSH
35792: LD_VAR 0 61
35796: PUSH
35797: LD_VAR 0 62
35801: PUSH
35802: LD_VAR 0 63
35806: PUSH
35807: LD_VAR 0 64
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: PUSH
35820: LD_VAR 0 4
35824: PUSH
35825: LD_INT 1
35827: PLUS
35828: ARRAY
35829: ST_TO_ADDR
35830: GO 35833
35832: POP
// temp_list2 = [ ] ;
35833: LD_ADDR_VAR 0 10
35837: PUSH
35838: EMPTY
35839: ST_TO_ADDR
// for i in temp_list do
35840: LD_ADDR_VAR 0 8
35844: PUSH
35845: LD_VAR 0 9
35849: PUSH
35850: FOR_IN
35851: IFFALSE 35903
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35853: LD_ADDR_VAR 0 10
35857: PUSH
35858: LD_VAR 0 10
35862: PUSH
35863: LD_VAR 0 8
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: PUSH
35872: LD_VAR 0 2
35876: PLUS
35877: PUSH
35878: LD_VAR 0 8
35882: PUSH
35883: LD_INT 2
35885: ARRAY
35886: PUSH
35887: LD_VAR 0 3
35891: PLUS
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: ADD
35900: ST_TO_ADDR
35901: GO 35850
35903: POP
35904: POP
// result = temp_list2 ;
35905: LD_ADDR_VAR 0 7
35909: PUSH
35910: LD_VAR 0 10
35914: ST_TO_ADDR
// end ;
35915: LD_VAR 0 7
35919: RET
// export function EnemyInRange ( unit , dist ) ; begin
35920: LD_INT 0
35922: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35923: LD_ADDR_VAR 0 3
35927: PUSH
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL_OW 255
35937: PPUSH
35938: LD_VAR 0 1
35942: PPUSH
35943: CALL_OW 250
35947: PPUSH
35948: LD_VAR 0 1
35952: PPUSH
35953: CALL_OW 251
35957: PPUSH
35958: LD_VAR 0 2
35962: PPUSH
35963: CALL 9322 0 4
35967: PUSH
35968: LD_INT 4
35970: ARRAY
35971: ST_TO_ADDR
// end ;
35972: LD_VAR 0 3
35976: RET
// export function PlayerSeeMe ( unit ) ; begin
35977: LD_INT 0
35979: PPUSH
// result := See ( your_side , unit ) ;
35980: LD_ADDR_VAR 0 2
35984: PUSH
35985: LD_OWVAR 2
35989: PPUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 292
35999: ST_TO_ADDR
// end ;
36000: LD_VAR 0 2
36004: RET
// export function ReverseDir ( unit ) ; begin
36005: LD_INT 0
36007: PPUSH
// if not unit then
36008: LD_VAR 0 1
36012: NOT
36013: IFFALSE 36017
// exit ;
36015: GO 36040
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36017: LD_ADDR_VAR 0 2
36021: PUSH
36022: LD_VAR 0 1
36026: PPUSH
36027: CALL_OW 254
36031: PUSH
36032: LD_INT 3
36034: PLUS
36035: PUSH
36036: LD_INT 6
36038: MOD
36039: ST_TO_ADDR
// end ;
36040: LD_VAR 0 2
36044: RET
// export function ReverseArray ( array ) ; var i ; begin
36045: LD_INT 0
36047: PPUSH
36048: PPUSH
// if not array then
36049: LD_VAR 0 1
36053: NOT
36054: IFFALSE 36058
// exit ;
36056: GO 36113
// result := [ ] ;
36058: LD_ADDR_VAR 0 2
36062: PUSH
36063: EMPTY
36064: ST_TO_ADDR
// for i := array downto 1 do
36065: LD_ADDR_VAR 0 3
36069: PUSH
36070: DOUBLE
36071: LD_VAR 0 1
36075: INC
36076: ST_TO_ADDR
36077: LD_INT 1
36079: PUSH
36080: FOR_DOWNTO
36081: IFFALSE 36111
// result := Join ( result , array [ i ] ) ;
36083: LD_ADDR_VAR 0 2
36087: PUSH
36088: LD_VAR 0 2
36092: PPUSH
36093: LD_VAR 0 1
36097: PUSH
36098: LD_VAR 0 3
36102: ARRAY
36103: PPUSH
36104: CALL 40757 0 2
36108: ST_TO_ADDR
36109: GO 36080
36111: POP
36112: POP
// end ;
36113: LD_VAR 0 2
36117: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36118: LD_INT 0
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
// if not unit or not hexes then
36126: LD_VAR 0 1
36130: NOT
36131: PUSH
36132: LD_VAR 0 2
36136: NOT
36137: OR
36138: IFFALSE 36142
// exit ;
36140: GO 36265
// dist := 9999 ;
36142: LD_ADDR_VAR 0 5
36146: PUSH
36147: LD_INT 9999
36149: ST_TO_ADDR
// for i = 1 to hexes do
36150: LD_ADDR_VAR 0 4
36154: PUSH
36155: DOUBLE
36156: LD_INT 1
36158: DEC
36159: ST_TO_ADDR
36160: LD_VAR 0 2
36164: PUSH
36165: FOR_TO
36166: IFFALSE 36253
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36168: LD_ADDR_VAR 0 6
36172: PUSH
36173: LD_VAR 0 1
36177: PPUSH
36178: LD_VAR 0 2
36182: PUSH
36183: LD_VAR 0 4
36187: ARRAY
36188: PUSH
36189: LD_INT 1
36191: ARRAY
36192: PPUSH
36193: LD_VAR 0 2
36197: PUSH
36198: LD_VAR 0 4
36202: ARRAY
36203: PUSH
36204: LD_INT 2
36206: ARRAY
36207: PPUSH
36208: CALL_OW 297
36212: ST_TO_ADDR
// if tdist < dist then
36213: LD_VAR 0 6
36217: PUSH
36218: LD_VAR 0 5
36222: LESS
36223: IFFALSE 36251
// begin hex := hexes [ i ] ;
36225: LD_ADDR_VAR 0 8
36229: PUSH
36230: LD_VAR 0 2
36234: PUSH
36235: LD_VAR 0 4
36239: ARRAY
36240: ST_TO_ADDR
// dist := tdist ;
36241: LD_ADDR_VAR 0 5
36245: PUSH
36246: LD_VAR 0 6
36250: ST_TO_ADDR
// end ; end ;
36251: GO 36165
36253: POP
36254: POP
// result := hex ;
36255: LD_ADDR_VAR 0 3
36259: PUSH
36260: LD_VAR 0 8
36264: ST_TO_ADDR
// end ;
36265: LD_VAR 0 3
36269: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36270: LD_INT 0
36272: PPUSH
36273: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36274: LD_VAR 0 1
36278: NOT
36279: PUSH
36280: LD_VAR 0 1
36284: PUSH
36285: LD_INT 21
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 23
36297: PUSH
36298: LD_INT 2
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PPUSH
36309: CALL_OW 69
36313: IN
36314: NOT
36315: OR
36316: IFFALSE 36320
// exit ;
36318: GO 36367
// for i = 1 to 3 do
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: DOUBLE
36326: LD_INT 1
36328: DEC
36329: ST_TO_ADDR
36330: LD_INT 3
36332: PUSH
36333: FOR_TO
36334: IFFALSE 36365
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36336: LD_VAR 0 1
36340: PPUSH
36341: CALL_OW 250
36345: PPUSH
36346: LD_VAR 0 1
36350: PPUSH
36351: CALL_OW 251
36355: PPUSH
36356: LD_INT 1
36358: PPUSH
36359: CALL_OW 453
36363: GO 36333
36365: POP
36366: POP
// end ;
36367: LD_VAR 0 2
36371: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36372: LD_INT 0
36374: PPUSH
36375: PPUSH
36376: PPUSH
36377: PPUSH
36378: PPUSH
36379: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36380: LD_VAR 0 1
36384: NOT
36385: PUSH
36386: LD_VAR 0 2
36390: NOT
36391: OR
36392: PUSH
36393: LD_VAR 0 1
36397: PPUSH
36398: CALL_OW 314
36402: OR
36403: IFFALSE 36407
// exit ;
36405: GO 36874
// if GetLives ( i ) < 250 then
36407: LD_VAR 0 4
36411: PPUSH
36412: CALL_OW 256
36416: PUSH
36417: LD_INT 250
36419: LESS
36420: IFFALSE 36433
// begin ComAutodestruct ( i ) ;
36422: LD_VAR 0 4
36426: PPUSH
36427: CALL 36270 0 1
// exit ;
36431: GO 36874
// end ; x := GetX ( enemy_unit ) ;
36433: LD_ADDR_VAR 0 7
36437: PUSH
36438: LD_VAR 0 2
36442: PPUSH
36443: CALL_OW 250
36447: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36448: LD_ADDR_VAR 0 8
36452: PUSH
36453: LD_VAR 0 2
36457: PPUSH
36458: CALL_OW 251
36462: ST_TO_ADDR
// if not x or not y then
36463: LD_VAR 0 7
36467: NOT
36468: PUSH
36469: LD_VAR 0 8
36473: NOT
36474: OR
36475: IFFALSE 36479
// exit ;
36477: GO 36874
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36479: LD_ADDR_VAR 0 6
36483: PUSH
36484: LD_VAR 0 7
36488: PPUSH
36489: LD_INT 0
36491: PPUSH
36492: LD_INT 4
36494: PPUSH
36495: CALL_OW 272
36499: PUSH
36500: LD_VAR 0 8
36504: PPUSH
36505: LD_INT 0
36507: PPUSH
36508: LD_INT 4
36510: PPUSH
36511: CALL_OW 273
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_VAR 0 7
36524: PPUSH
36525: LD_INT 1
36527: PPUSH
36528: LD_INT 4
36530: PPUSH
36531: CALL_OW 272
36535: PUSH
36536: LD_VAR 0 8
36540: PPUSH
36541: LD_INT 1
36543: PPUSH
36544: LD_INT 4
36546: PPUSH
36547: CALL_OW 273
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_VAR 0 7
36560: PPUSH
36561: LD_INT 2
36563: PPUSH
36564: LD_INT 4
36566: PPUSH
36567: CALL_OW 272
36571: PUSH
36572: LD_VAR 0 8
36576: PPUSH
36577: LD_INT 2
36579: PPUSH
36580: LD_INT 4
36582: PPUSH
36583: CALL_OW 273
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_VAR 0 7
36596: PPUSH
36597: LD_INT 3
36599: PPUSH
36600: LD_INT 4
36602: PPUSH
36603: CALL_OW 272
36607: PUSH
36608: LD_VAR 0 8
36612: PPUSH
36613: LD_INT 3
36615: PPUSH
36616: LD_INT 4
36618: PPUSH
36619: CALL_OW 273
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_VAR 0 7
36632: PPUSH
36633: LD_INT 4
36635: PPUSH
36636: LD_INT 4
36638: PPUSH
36639: CALL_OW 272
36643: PUSH
36644: LD_VAR 0 8
36648: PPUSH
36649: LD_INT 4
36651: PPUSH
36652: LD_INT 4
36654: PPUSH
36655: CALL_OW 273
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_VAR 0 7
36668: PPUSH
36669: LD_INT 5
36671: PPUSH
36672: LD_INT 4
36674: PPUSH
36675: CALL_OW 272
36679: PUSH
36680: LD_VAR 0 8
36684: PPUSH
36685: LD_INT 5
36687: PPUSH
36688: LD_INT 4
36690: PPUSH
36691: CALL_OW 273
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: ST_TO_ADDR
// for i = tmp downto 1 do
36708: LD_ADDR_VAR 0 4
36712: PUSH
36713: DOUBLE
36714: LD_VAR 0 6
36718: INC
36719: ST_TO_ADDR
36720: LD_INT 1
36722: PUSH
36723: FOR_DOWNTO
36724: IFFALSE 36825
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36726: LD_VAR 0 6
36730: PUSH
36731: LD_VAR 0 4
36735: ARRAY
36736: PUSH
36737: LD_INT 1
36739: ARRAY
36740: PPUSH
36741: LD_VAR 0 6
36745: PUSH
36746: LD_VAR 0 4
36750: ARRAY
36751: PUSH
36752: LD_INT 2
36754: ARRAY
36755: PPUSH
36756: CALL_OW 488
36760: NOT
36761: PUSH
36762: LD_VAR 0 6
36766: PUSH
36767: LD_VAR 0 4
36771: ARRAY
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: PPUSH
36777: LD_VAR 0 6
36781: PUSH
36782: LD_VAR 0 4
36786: ARRAY
36787: PUSH
36788: LD_INT 2
36790: ARRAY
36791: PPUSH
36792: CALL_OW 428
36796: PUSH
36797: LD_INT 0
36799: NONEQUAL
36800: OR
36801: IFFALSE 36823
// tmp := Delete ( tmp , i ) ;
36803: LD_ADDR_VAR 0 6
36807: PUSH
36808: LD_VAR 0 6
36812: PPUSH
36813: LD_VAR 0 4
36817: PPUSH
36818: CALL_OW 3
36822: ST_TO_ADDR
36823: GO 36723
36825: POP
36826: POP
// j := GetClosestHex ( unit , tmp ) ;
36827: LD_ADDR_VAR 0 5
36831: PUSH
36832: LD_VAR 0 1
36836: PPUSH
36837: LD_VAR 0 6
36841: PPUSH
36842: CALL 36118 0 2
36846: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36847: LD_VAR 0 1
36851: PPUSH
36852: LD_VAR 0 5
36856: PUSH
36857: LD_INT 1
36859: ARRAY
36860: PPUSH
36861: LD_VAR 0 5
36865: PUSH
36866: LD_INT 2
36868: ARRAY
36869: PPUSH
36870: CALL_OW 111
// end ;
36874: LD_VAR 0 3
36878: RET
// export function PrepareApemanSoldier ( ) ; begin
36879: LD_INT 0
36881: PPUSH
// uc_nation := 0 ;
36882: LD_ADDR_OWVAR 21
36886: PUSH
36887: LD_INT 0
36889: ST_TO_ADDR
// hc_sex := sex_male ;
36890: LD_ADDR_OWVAR 27
36894: PUSH
36895: LD_INT 1
36897: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36898: LD_ADDR_OWVAR 28
36902: PUSH
36903: LD_INT 15
36905: ST_TO_ADDR
// hc_gallery :=  ;
36906: LD_ADDR_OWVAR 33
36910: PUSH
36911: LD_STRING 
36913: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36914: LD_ADDR_OWVAR 31
36918: PUSH
36919: LD_INT 0
36921: PPUSH
36922: LD_INT 3
36924: PPUSH
36925: CALL_OW 12
36929: PUSH
36930: LD_INT 0
36932: PPUSH
36933: LD_INT 3
36935: PPUSH
36936: CALL_OW 12
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
// end ;
36953: LD_VAR 0 1
36957: RET
// export function PrepareApemanEngineer ( ) ; begin
36958: LD_INT 0
36960: PPUSH
// uc_nation := 0 ;
36961: LD_ADDR_OWVAR 21
36965: PUSH
36966: LD_INT 0
36968: ST_TO_ADDR
// hc_sex := sex_male ;
36969: LD_ADDR_OWVAR 27
36973: PUSH
36974: LD_INT 1
36976: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36977: LD_ADDR_OWVAR 28
36981: PUSH
36982: LD_INT 16
36984: ST_TO_ADDR
// hc_gallery :=  ;
36985: LD_ADDR_OWVAR 33
36989: PUSH
36990: LD_STRING 
36992: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36993: LD_ADDR_OWVAR 31
36997: PUSH
36998: LD_INT 0
37000: PPUSH
37001: LD_INT 3
37003: PPUSH
37004: CALL_OW 12
37008: PUSH
37009: LD_INT 0
37011: PPUSH
37012: LD_INT 3
37014: PPUSH
37015: CALL_OW 12
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: ST_TO_ADDR
// end ;
37032: LD_VAR 0 1
37036: RET
// export function PrepareApeman ( agressivity ) ; begin
37037: LD_INT 0
37039: PPUSH
// uc_side := 0 ;
37040: LD_ADDR_OWVAR 20
37044: PUSH
37045: LD_INT 0
37047: ST_TO_ADDR
// uc_nation := 0 ;
37048: LD_ADDR_OWVAR 21
37052: PUSH
37053: LD_INT 0
37055: ST_TO_ADDR
// hc_sex := sex_male ;
37056: LD_ADDR_OWVAR 27
37060: PUSH
37061: LD_INT 1
37063: ST_TO_ADDR
// hc_class := class_apeman ;
37064: LD_ADDR_OWVAR 28
37068: PUSH
37069: LD_INT 12
37071: ST_TO_ADDR
// hc_gallery :=  ;
37072: LD_ADDR_OWVAR 33
37076: PUSH
37077: LD_STRING 
37079: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37080: LD_ADDR_OWVAR 35
37084: PUSH
37085: LD_VAR 0 1
37089: NEG
37090: PPUSH
37091: LD_VAR 0 1
37095: PPUSH
37096: CALL_OW 12
37100: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37101: LD_ADDR_OWVAR 31
37105: PUSH
37106: LD_INT 0
37108: PPUSH
37109: LD_INT 3
37111: PPUSH
37112: CALL_OW 12
37116: PUSH
37117: LD_INT 0
37119: PPUSH
37120: LD_INT 3
37122: PPUSH
37123: CALL_OW 12
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: ST_TO_ADDR
// end ;
37140: LD_VAR 0 2
37144: RET
// export function PrepareTiger ( agressivity ) ; begin
37145: LD_INT 0
37147: PPUSH
// uc_side := 0 ;
37148: LD_ADDR_OWVAR 20
37152: PUSH
37153: LD_INT 0
37155: ST_TO_ADDR
// uc_nation := 0 ;
37156: LD_ADDR_OWVAR 21
37160: PUSH
37161: LD_INT 0
37163: ST_TO_ADDR
// hc_class := class_tiger ;
37164: LD_ADDR_OWVAR 28
37168: PUSH
37169: LD_INT 14
37171: ST_TO_ADDR
// hc_gallery :=  ;
37172: LD_ADDR_OWVAR 33
37176: PUSH
37177: LD_STRING 
37179: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37180: LD_ADDR_OWVAR 35
37184: PUSH
37185: LD_VAR 0 1
37189: NEG
37190: PPUSH
37191: LD_VAR 0 1
37195: PPUSH
37196: CALL_OW 12
37200: ST_TO_ADDR
// end ;
37201: LD_VAR 0 2
37205: RET
// export function PrepareEnchidna ( ) ; begin
37206: LD_INT 0
37208: PPUSH
// uc_side := 0 ;
37209: LD_ADDR_OWVAR 20
37213: PUSH
37214: LD_INT 0
37216: ST_TO_ADDR
// uc_nation := 0 ;
37217: LD_ADDR_OWVAR 21
37221: PUSH
37222: LD_INT 0
37224: ST_TO_ADDR
// hc_class := class_baggie ;
37225: LD_ADDR_OWVAR 28
37229: PUSH
37230: LD_INT 13
37232: ST_TO_ADDR
// hc_gallery :=  ;
37233: LD_ADDR_OWVAR 33
37237: PUSH
37238: LD_STRING 
37240: ST_TO_ADDR
// end ;
37241: LD_VAR 0 1
37245: RET
// export function PrepareFrog ( ) ; begin
37246: LD_INT 0
37248: PPUSH
// uc_side := 0 ;
37249: LD_ADDR_OWVAR 20
37253: PUSH
37254: LD_INT 0
37256: ST_TO_ADDR
// uc_nation := 0 ;
37257: LD_ADDR_OWVAR 21
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// hc_class := class_frog ;
37265: LD_ADDR_OWVAR 28
37269: PUSH
37270: LD_INT 19
37272: ST_TO_ADDR
// hc_gallery :=  ;
37273: LD_ADDR_OWVAR 33
37277: PUSH
37278: LD_STRING 
37280: ST_TO_ADDR
// end ;
37281: LD_VAR 0 1
37285: RET
// export function PrepareFish ( ) ; begin
37286: LD_INT 0
37288: PPUSH
// uc_side := 0 ;
37289: LD_ADDR_OWVAR 20
37293: PUSH
37294: LD_INT 0
37296: ST_TO_ADDR
// uc_nation := 0 ;
37297: LD_ADDR_OWVAR 21
37301: PUSH
37302: LD_INT 0
37304: ST_TO_ADDR
// hc_class := class_fish ;
37305: LD_ADDR_OWVAR 28
37309: PUSH
37310: LD_INT 20
37312: ST_TO_ADDR
// hc_gallery :=  ;
37313: LD_ADDR_OWVAR 33
37317: PUSH
37318: LD_STRING 
37320: ST_TO_ADDR
// end ;
37321: LD_VAR 0 1
37325: RET
// export function PrepareBird ( ) ; begin
37326: LD_INT 0
37328: PPUSH
// uc_side := 0 ;
37329: LD_ADDR_OWVAR 20
37333: PUSH
37334: LD_INT 0
37336: ST_TO_ADDR
// uc_nation := 0 ;
37337: LD_ADDR_OWVAR 21
37341: PUSH
37342: LD_INT 0
37344: ST_TO_ADDR
// hc_class := class_phororhacos ;
37345: LD_ADDR_OWVAR 28
37349: PUSH
37350: LD_INT 18
37352: ST_TO_ADDR
// hc_gallery :=  ;
37353: LD_ADDR_OWVAR 33
37357: PUSH
37358: LD_STRING 
37360: ST_TO_ADDR
// end ;
37361: LD_VAR 0 1
37365: RET
// export function PrepareHorse ( ) ; begin
37366: LD_INT 0
37368: PPUSH
// uc_side := 0 ;
37369: LD_ADDR_OWVAR 20
37373: PUSH
37374: LD_INT 0
37376: ST_TO_ADDR
// uc_nation := 0 ;
37377: LD_ADDR_OWVAR 21
37381: PUSH
37382: LD_INT 0
37384: ST_TO_ADDR
// hc_class := class_horse ;
37385: LD_ADDR_OWVAR 28
37389: PUSH
37390: LD_INT 21
37392: ST_TO_ADDR
// hc_gallery :=  ;
37393: LD_ADDR_OWVAR 33
37397: PUSH
37398: LD_STRING 
37400: ST_TO_ADDR
// end ;
37401: LD_VAR 0 1
37405: RET
// export function PrepareMastodont ( ) ; begin
37406: LD_INT 0
37408: PPUSH
// uc_side := 0 ;
37409: LD_ADDR_OWVAR 20
37413: PUSH
37414: LD_INT 0
37416: ST_TO_ADDR
// uc_nation := 0 ;
37417: LD_ADDR_OWVAR 21
37421: PUSH
37422: LD_INT 0
37424: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37425: LD_ADDR_OWVAR 37
37429: PUSH
37430: LD_INT 31
37432: ST_TO_ADDR
// vc_control := control_rider ;
37433: LD_ADDR_OWVAR 38
37437: PUSH
37438: LD_INT 4
37440: ST_TO_ADDR
// end ;
37441: LD_VAR 0 1
37445: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37446: LD_INT 0
37448: PPUSH
37449: PPUSH
37450: PPUSH
// uc_side = 0 ;
37451: LD_ADDR_OWVAR 20
37455: PUSH
37456: LD_INT 0
37458: ST_TO_ADDR
// uc_nation = 0 ;
37459: LD_ADDR_OWVAR 21
37463: PUSH
37464: LD_INT 0
37466: ST_TO_ADDR
// InitHc_All ( ) ;
37467: CALL_OW 584
// InitVc ;
37471: CALL_OW 20
// if mastodonts then
37475: LD_VAR 0 6
37479: IFFALSE 37546
// for i = 1 to mastodonts do
37481: LD_ADDR_VAR 0 11
37485: PUSH
37486: DOUBLE
37487: LD_INT 1
37489: DEC
37490: ST_TO_ADDR
37491: LD_VAR 0 6
37495: PUSH
37496: FOR_TO
37497: IFFALSE 37544
// begin vc_chassis := 31 ;
37499: LD_ADDR_OWVAR 37
37503: PUSH
37504: LD_INT 31
37506: ST_TO_ADDR
// vc_control := control_rider ;
37507: LD_ADDR_OWVAR 38
37511: PUSH
37512: LD_INT 4
37514: ST_TO_ADDR
// animal := CreateVehicle ;
37515: LD_ADDR_VAR 0 12
37519: PUSH
37520: CALL_OW 45
37524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37525: LD_VAR 0 12
37529: PPUSH
37530: LD_VAR 0 8
37534: PPUSH
37535: LD_INT 0
37537: PPUSH
37538: CALL 39674 0 3
// end ;
37542: GO 37496
37544: POP
37545: POP
// if horses then
37546: LD_VAR 0 5
37550: IFFALSE 37617
// for i = 1 to horses do
37552: LD_ADDR_VAR 0 11
37556: PUSH
37557: DOUBLE
37558: LD_INT 1
37560: DEC
37561: ST_TO_ADDR
37562: LD_VAR 0 5
37566: PUSH
37567: FOR_TO
37568: IFFALSE 37615
// begin hc_class := 21 ;
37570: LD_ADDR_OWVAR 28
37574: PUSH
37575: LD_INT 21
37577: ST_TO_ADDR
// hc_gallery :=  ;
37578: LD_ADDR_OWVAR 33
37582: PUSH
37583: LD_STRING 
37585: ST_TO_ADDR
// animal := CreateHuman ;
37586: LD_ADDR_VAR 0 12
37590: PUSH
37591: CALL_OW 44
37595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37596: LD_VAR 0 12
37600: PPUSH
37601: LD_VAR 0 8
37605: PPUSH
37606: LD_INT 0
37608: PPUSH
37609: CALL 39674 0 3
// end ;
37613: GO 37567
37615: POP
37616: POP
// if birds then
37617: LD_VAR 0 1
37621: IFFALSE 37688
// for i = 1 to birds do
37623: LD_ADDR_VAR 0 11
37627: PUSH
37628: DOUBLE
37629: LD_INT 1
37631: DEC
37632: ST_TO_ADDR
37633: LD_VAR 0 1
37637: PUSH
37638: FOR_TO
37639: IFFALSE 37686
// begin hc_class = 18 ;
37641: LD_ADDR_OWVAR 28
37645: PUSH
37646: LD_INT 18
37648: ST_TO_ADDR
// hc_gallery =  ;
37649: LD_ADDR_OWVAR 33
37653: PUSH
37654: LD_STRING 
37656: ST_TO_ADDR
// animal := CreateHuman ;
37657: LD_ADDR_VAR 0 12
37661: PUSH
37662: CALL_OW 44
37666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37667: LD_VAR 0 12
37671: PPUSH
37672: LD_VAR 0 8
37676: PPUSH
37677: LD_INT 0
37679: PPUSH
37680: CALL 39674 0 3
// end ;
37684: GO 37638
37686: POP
37687: POP
// if tigers then
37688: LD_VAR 0 2
37692: IFFALSE 37776
// for i = 1 to tigers do
37694: LD_ADDR_VAR 0 11
37698: PUSH
37699: DOUBLE
37700: LD_INT 1
37702: DEC
37703: ST_TO_ADDR
37704: LD_VAR 0 2
37708: PUSH
37709: FOR_TO
37710: IFFALSE 37774
// begin hc_class = class_tiger ;
37712: LD_ADDR_OWVAR 28
37716: PUSH
37717: LD_INT 14
37719: ST_TO_ADDR
// hc_gallery =  ;
37720: LD_ADDR_OWVAR 33
37724: PUSH
37725: LD_STRING 
37727: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37728: LD_ADDR_OWVAR 35
37732: PUSH
37733: LD_INT 7
37735: NEG
37736: PPUSH
37737: LD_INT 7
37739: PPUSH
37740: CALL_OW 12
37744: ST_TO_ADDR
// animal := CreateHuman ;
37745: LD_ADDR_VAR 0 12
37749: PUSH
37750: CALL_OW 44
37754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37755: LD_VAR 0 12
37759: PPUSH
37760: LD_VAR 0 8
37764: PPUSH
37765: LD_INT 0
37767: PPUSH
37768: CALL 39674 0 3
// end ;
37772: GO 37709
37774: POP
37775: POP
// if apemans then
37776: LD_VAR 0 3
37780: IFFALSE 37903
// for i = 1 to apemans do
37782: LD_ADDR_VAR 0 11
37786: PUSH
37787: DOUBLE
37788: LD_INT 1
37790: DEC
37791: ST_TO_ADDR
37792: LD_VAR 0 3
37796: PUSH
37797: FOR_TO
37798: IFFALSE 37901
// begin hc_class = class_apeman ;
37800: LD_ADDR_OWVAR 28
37804: PUSH
37805: LD_INT 12
37807: ST_TO_ADDR
// hc_gallery =  ;
37808: LD_ADDR_OWVAR 33
37812: PUSH
37813: LD_STRING 
37815: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37816: LD_ADDR_OWVAR 35
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PPUSH
37825: LD_INT 2
37827: PPUSH
37828: CALL_OW 12
37832: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37833: LD_ADDR_OWVAR 31
37837: PUSH
37838: LD_INT 1
37840: PPUSH
37841: LD_INT 3
37843: PPUSH
37844: CALL_OW 12
37848: PUSH
37849: LD_INT 1
37851: PPUSH
37852: LD_INT 3
37854: PPUSH
37855: CALL_OW 12
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// animal := CreateHuman ;
37872: LD_ADDR_VAR 0 12
37876: PUSH
37877: CALL_OW 44
37881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37882: LD_VAR 0 12
37886: PPUSH
37887: LD_VAR 0 8
37891: PPUSH
37892: LD_INT 0
37894: PPUSH
37895: CALL 39674 0 3
// end ;
37899: GO 37797
37901: POP
37902: POP
// if enchidnas then
37903: LD_VAR 0 4
37907: IFFALSE 37974
// for i = 1 to enchidnas do
37909: LD_ADDR_VAR 0 11
37913: PUSH
37914: DOUBLE
37915: LD_INT 1
37917: DEC
37918: ST_TO_ADDR
37919: LD_VAR 0 4
37923: PUSH
37924: FOR_TO
37925: IFFALSE 37972
// begin hc_class = 13 ;
37927: LD_ADDR_OWVAR 28
37931: PUSH
37932: LD_INT 13
37934: ST_TO_ADDR
// hc_gallery =  ;
37935: LD_ADDR_OWVAR 33
37939: PUSH
37940: LD_STRING 
37942: ST_TO_ADDR
// animal := CreateHuman ;
37943: LD_ADDR_VAR 0 12
37947: PUSH
37948: CALL_OW 44
37952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37953: LD_VAR 0 12
37957: PPUSH
37958: LD_VAR 0 8
37962: PPUSH
37963: LD_INT 0
37965: PPUSH
37966: CALL 39674 0 3
// end ;
37970: GO 37924
37972: POP
37973: POP
// if fishes then
37974: LD_VAR 0 7
37978: IFFALSE 38045
// for i = 1 to fishes do
37980: LD_ADDR_VAR 0 11
37984: PUSH
37985: DOUBLE
37986: LD_INT 1
37988: DEC
37989: ST_TO_ADDR
37990: LD_VAR 0 7
37994: PUSH
37995: FOR_TO
37996: IFFALSE 38043
// begin hc_class = 20 ;
37998: LD_ADDR_OWVAR 28
38002: PUSH
38003: LD_INT 20
38005: ST_TO_ADDR
// hc_gallery =  ;
38006: LD_ADDR_OWVAR 33
38010: PUSH
38011: LD_STRING 
38013: ST_TO_ADDR
// animal := CreateHuman ;
38014: LD_ADDR_VAR 0 12
38018: PUSH
38019: CALL_OW 44
38023: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38024: LD_VAR 0 12
38028: PPUSH
38029: LD_VAR 0 9
38033: PPUSH
38034: LD_INT 0
38036: PPUSH
38037: CALL 39674 0 3
// end ;
38041: GO 37995
38043: POP
38044: POP
// end ;
38045: LD_VAR 0 10
38049: RET
// export function WantHeal ( sci , unit ) ; begin
38050: LD_INT 0
38052: PPUSH
// if GetTaskList ( sci ) > 0 then
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 437
38062: PUSH
38063: LD_INT 0
38065: GREATER
38066: IFFALSE 38136
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38068: LD_VAR 0 1
38072: PPUSH
38073: CALL_OW 437
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PUSH
38082: LD_INT 1
38084: ARRAY
38085: PUSH
38086: LD_STRING l
38088: EQUAL
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 437
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: PUSH
38104: LD_INT 4
38106: ARRAY
38107: PUSH
38108: LD_VAR 0 2
38112: EQUAL
38113: AND
38114: IFFALSE 38126
// result := true else
38116: LD_ADDR_VAR 0 3
38120: PUSH
38121: LD_INT 1
38123: ST_TO_ADDR
38124: GO 38134
// result := false ;
38126: LD_ADDR_VAR 0 3
38130: PUSH
38131: LD_INT 0
38133: ST_TO_ADDR
// end else
38134: GO 38144
// result := false ;
38136: LD_ADDR_VAR 0 3
38140: PUSH
38141: LD_INT 0
38143: ST_TO_ADDR
// end ;
38144: LD_VAR 0 3
38148: RET
// export function HealTarget ( sci ) ; begin
38149: LD_INT 0
38151: PPUSH
// if not sci then
38152: LD_VAR 0 1
38156: NOT
38157: IFFALSE 38161
// exit ;
38159: GO 38226
// result := 0 ;
38161: LD_ADDR_VAR 0 2
38165: PUSH
38166: LD_INT 0
38168: ST_TO_ADDR
// if GetTaskList ( sci ) then
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 437
38178: IFFALSE 38226
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38180: LD_VAR 0 1
38184: PPUSH
38185: CALL_OW 437
38189: PUSH
38190: LD_INT 1
38192: ARRAY
38193: PUSH
38194: LD_INT 1
38196: ARRAY
38197: PUSH
38198: LD_STRING l
38200: EQUAL
38201: IFFALSE 38226
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38203: LD_ADDR_VAR 0 2
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 437
38217: PUSH
38218: LD_INT 1
38220: ARRAY
38221: PUSH
38222: LD_INT 4
38224: ARRAY
38225: ST_TO_ADDR
// end ;
38226: LD_VAR 0 2
38230: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38231: LD_INT 0
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
// if not base_units then
38237: LD_VAR 0 1
38241: NOT
38242: IFFALSE 38246
// exit ;
38244: GO 38333
// result := false ;
38246: LD_ADDR_VAR 0 2
38250: PUSH
38251: LD_INT 0
38253: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38254: LD_ADDR_VAR 0 5
38258: PUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_INT 21
38266: PUSH
38267: LD_INT 3
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PPUSH
38274: CALL_OW 72
38278: ST_TO_ADDR
// if not tmp then
38279: LD_VAR 0 5
38283: NOT
38284: IFFALSE 38288
// exit ;
38286: GO 38333
// for i in tmp do
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: LD_VAR 0 5
38297: PUSH
38298: FOR_IN
38299: IFFALSE 38331
// begin result := EnemyInRange ( i , 22 ) ;
38301: LD_ADDR_VAR 0 2
38305: PUSH
38306: LD_VAR 0 3
38310: PPUSH
38311: LD_INT 22
38313: PPUSH
38314: CALL 35920 0 2
38318: ST_TO_ADDR
// if result then
38319: LD_VAR 0 2
38323: IFFALSE 38329
// exit ;
38325: POP
38326: POP
38327: GO 38333
// end ;
38329: GO 38298
38331: POP
38332: POP
// end ;
38333: LD_VAR 0 2
38337: RET
// export function FilterByTag ( units , tag ) ; begin
38338: LD_INT 0
38340: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_VAR 0 1
38350: PPUSH
38351: LD_INT 120
38353: PUSH
38354: LD_VAR 0 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PPUSH
38363: CALL_OW 72
38367: ST_TO_ADDR
// end ;
38368: LD_VAR 0 3
38372: RET
// export function IsDriver ( un ) ; begin
38373: LD_INT 0
38375: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38376: LD_ADDR_VAR 0 2
38380: PUSH
38381: LD_VAR 0 1
38385: PUSH
38386: LD_INT 55
38388: PUSH
38389: EMPTY
38390: LIST
38391: PPUSH
38392: CALL_OW 69
38396: IN
38397: ST_TO_ADDR
// end ;
38398: LD_VAR 0 2
38402: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38403: LD_INT 0
38405: PPUSH
38406: PPUSH
// list := [ ] ;
38407: LD_ADDR_VAR 0 5
38411: PUSH
38412: EMPTY
38413: ST_TO_ADDR
// case d of 0 :
38414: LD_VAR 0 3
38418: PUSH
38419: LD_INT 0
38421: DOUBLE
38422: EQUAL
38423: IFTRUE 38427
38425: GO 38560
38427: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38428: LD_ADDR_VAR 0 5
38432: PUSH
38433: LD_VAR 0 1
38437: PUSH
38438: LD_INT 4
38440: MINUS
38441: PUSH
38442: LD_VAR 0 2
38446: PUSH
38447: LD_INT 4
38449: MINUS
38450: PUSH
38451: LD_INT 2
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: LIST
38458: PUSH
38459: LD_VAR 0 1
38463: PUSH
38464: LD_INT 3
38466: MINUS
38467: PUSH
38468: LD_VAR 0 2
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: PUSH
38481: LD_VAR 0 1
38485: PUSH
38486: LD_INT 4
38488: PLUS
38489: PUSH
38490: LD_VAR 0 2
38494: PUSH
38495: LD_INT 4
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: LD_VAR 0 1
38507: PUSH
38508: LD_INT 3
38510: PLUS
38511: PUSH
38512: LD_VAR 0 2
38516: PUSH
38517: LD_INT 3
38519: PLUS
38520: PUSH
38521: LD_INT 5
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: PUSH
38529: LD_VAR 0 1
38533: PUSH
38534: LD_VAR 0 2
38538: PUSH
38539: LD_INT 4
38541: PLUS
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// end ; 1 :
38558: GO 39258
38560: LD_INT 1
38562: DOUBLE
38563: EQUAL
38564: IFTRUE 38568
38566: GO 38701
38568: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38569: LD_ADDR_VAR 0 5
38573: PUSH
38574: LD_VAR 0 1
38578: PUSH
38579: LD_VAR 0 2
38583: PUSH
38584: LD_INT 4
38586: MINUS
38587: PUSH
38588: LD_INT 3
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: PUSH
38596: LD_VAR 0 1
38600: PUSH
38601: LD_INT 3
38603: MINUS
38604: PUSH
38605: LD_VAR 0 2
38609: PUSH
38610: LD_INT 3
38612: MINUS
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: PUSH
38622: LD_VAR 0 1
38626: PUSH
38627: LD_INT 4
38629: MINUS
38630: PUSH
38631: LD_VAR 0 2
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: PUSH
38644: LD_VAR 0 1
38648: PUSH
38649: LD_VAR 0 2
38653: PUSH
38654: LD_INT 3
38656: PLUS
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: PUSH
38666: LD_VAR 0 1
38670: PUSH
38671: LD_INT 4
38673: PLUS
38674: PUSH
38675: LD_VAR 0 2
38679: PUSH
38680: LD_INT 4
38682: PLUS
38683: PUSH
38684: LD_INT 5
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// end ; 2 :
38699: GO 39258
38701: LD_INT 2
38703: DOUBLE
38704: EQUAL
38705: IFTRUE 38709
38707: GO 38838
38709: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38710: LD_ADDR_VAR 0 5
38714: PUSH
38715: LD_VAR 0 1
38719: PUSH
38720: LD_VAR 0 2
38724: PUSH
38725: LD_INT 3
38727: MINUS
38728: PUSH
38729: LD_INT 3
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: PUSH
38737: LD_VAR 0 1
38741: PUSH
38742: LD_INT 4
38744: PLUS
38745: PUSH
38746: LD_VAR 0 2
38750: PUSH
38751: LD_INT 4
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: PUSH
38759: LD_VAR 0 1
38763: PUSH
38764: LD_VAR 0 2
38768: PUSH
38769: LD_INT 4
38771: PLUS
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: PUSH
38781: LD_VAR 0 1
38785: PUSH
38786: LD_INT 3
38788: MINUS
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PUSH
38803: LD_VAR 0 1
38807: PUSH
38808: LD_INT 4
38810: MINUS
38811: PUSH
38812: LD_VAR 0 2
38816: PUSH
38817: LD_INT 4
38819: MINUS
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// end ; 3 :
38836: GO 39258
38838: LD_INT 3
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38846
38844: GO 38979
38846: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38847: LD_ADDR_VAR 0 5
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 3
38859: PLUS
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 4
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: PUSH
38874: LD_VAR 0 1
38878: PUSH
38879: LD_INT 4
38881: PLUS
38882: PUSH
38883: LD_VAR 0 2
38887: PUSH
38888: LD_INT 4
38890: PLUS
38891: PUSH
38892: LD_INT 5
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: PUSH
38900: LD_VAR 0 1
38904: PUSH
38905: LD_INT 4
38907: MINUS
38908: PUSH
38909: LD_VAR 0 2
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PUSH
38922: LD_VAR 0 1
38926: PUSH
38927: LD_VAR 0 2
38931: PUSH
38932: LD_INT 4
38934: MINUS
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: PUSH
38944: LD_VAR 0 1
38948: PUSH
38949: LD_INT 3
38951: MINUS
38952: PUSH
38953: LD_VAR 0 2
38957: PUSH
38958: LD_INT 3
38960: MINUS
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: ST_TO_ADDR
// end ; 4 :
38977: GO 39258
38979: LD_INT 4
38981: DOUBLE
38982: EQUAL
38983: IFTRUE 38987
38985: GO 39120
38987: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38988: LD_ADDR_VAR 0 5
38992: PUSH
38993: LD_VAR 0 1
38997: PUSH
38998: LD_VAR 0 2
39002: PUSH
39003: LD_INT 4
39005: PLUS
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: LD_VAR 0 1
39019: PUSH
39020: LD_INT 3
39022: PLUS
39023: PUSH
39024: LD_VAR 0 2
39028: PUSH
39029: LD_INT 3
39031: PLUS
39032: PUSH
39033: LD_INT 5
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: PUSH
39041: LD_VAR 0 1
39045: PUSH
39046: LD_INT 4
39048: PLUS
39049: PUSH
39050: LD_VAR 0 2
39054: PUSH
39055: LD_INT 4
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: PUSH
39063: LD_VAR 0 1
39067: PUSH
39068: LD_VAR 0 2
39072: PUSH
39073: LD_INT 3
39075: MINUS
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: PUSH
39085: LD_VAR 0 1
39089: PUSH
39090: LD_INT 4
39092: MINUS
39093: PUSH
39094: LD_VAR 0 2
39098: PUSH
39099: LD_INT 4
39101: MINUS
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// end ; 5 :
39118: GO 39258
39120: LD_INT 5
39122: DOUBLE
39123: EQUAL
39124: IFTRUE 39128
39126: GO 39257
39128: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39129: LD_ADDR_VAR 0 5
39133: PUSH
39134: LD_VAR 0 1
39138: PUSH
39139: LD_INT 4
39141: MINUS
39142: PUSH
39143: LD_VAR 0 2
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: PUSH
39156: LD_VAR 0 1
39160: PUSH
39161: LD_VAR 0 2
39165: PUSH
39166: LD_INT 4
39168: MINUS
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: PUSH
39178: LD_VAR 0 1
39182: PUSH
39183: LD_INT 4
39185: PLUS
39186: PUSH
39187: LD_VAR 0 2
39191: PUSH
39192: LD_INT 4
39194: PLUS
39195: PUSH
39196: LD_INT 5
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: PUSH
39204: LD_VAR 0 1
39208: PUSH
39209: LD_INT 3
39211: PLUS
39212: PUSH
39213: LD_VAR 0 2
39217: PUSH
39218: LD_INT 4
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: PUSH
39226: LD_VAR 0 1
39230: PUSH
39231: LD_VAR 0 2
39235: PUSH
39236: LD_INT 3
39238: PLUS
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// end ; end ;
39255: GO 39258
39257: POP
// result := list ;
39258: LD_ADDR_VAR 0 4
39262: PUSH
39263: LD_VAR 0 5
39267: ST_TO_ADDR
// end ;
39268: LD_VAR 0 4
39272: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39273: LD_INT 0
39275: PPUSH
39276: PPUSH
39277: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39278: LD_VAR 0 1
39282: NOT
39283: PUSH
39284: LD_VAR 0 2
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 3
39297: PUSH
39298: LD_INT 4
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: IN
39307: NOT
39308: OR
39309: IFFALSE 39313
// exit ;
39311: GO 39396
// tmp := [ ] ;
39313: LD_ADDR_VAR 0 5
39317: PUSH
39318: EMPTY
39319: ST_TO_ADDR
// for i in units do
39320: LD_ADDR_VAR 0 4
39324: PUSH
39325: LD_VAR 0 1
39329: PUSH
39330: FOR_IN
39331: IFFALSE 39365
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39333: LD_ADDR_VAR 0 5
39337: PUSH
39338: LD_VAR 0 5
39342: PPUSH
39343: LD_VAR 0 4
39347: PPUSH
39348: LD_VAR 0 2
39352: PPUSH
39353: CALL_OW 259
39357: PPUSH
39358: CALL 40757 0 2
39362: ST_TO_ADDR
39363: GO 39330
39365: POP
39366: POP
// if not tmp then
39367: LD_VAR 0 5
39371: NOT
39372: IFFALSE 39376
// exit ;
39374: GO 39396
// result := SortListByListDesc ( units , tmp ) ;
39376: LD_ADDR_VAR 0 3
39380: PUSH
39381: LD_VAR 0 1
39385: PPUSH
39386: LD_VAR 0 5
39390: PPUSH
39391: CALL_OW 77
39395: ST_TO_ADDR
// end ;
39396: LD_VAR 0 3
39400: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39401: LD_INT 0
39403: PPUSH
39404: PPUSH
39405: PPUSH
// result := false ;
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_INT 0
39413: ST_TO_ADDR
// if not building then
39414: LD_VAR 0 2
39418: NOT
39419: IFFALSE 39423
// exit ;
39421: GO 39561
// x := GetX ( building ) ;
39423: LD_ADDR_VAR 0 4
39427: PUSH
39428: LD_VAR 0 2
39432: PPUSH
39433: CALL_OW 250
39437: ST_TO_ADDR
// y := GetY ( building ) ;
39438: LD_ADDR_VAR 0 5
39442: PUSH
39443: LD_VAR 0 2
39447: PPUSH
39448: CALL_OW 251
39452: ST_TO_ADDR
// if not x or not y then
39453: LD_VAR 0 4
39457: NOT
39458: PUSH
39459: LD_VAR 0 5
39463: NOT
39464: OR
39465: IFFALSE 39469
// exit ;
39467: GO 39561
// if GetTaskList ( unit ) then
39469: LD_VAR 0 1
39473: PPUSH
39474: CALL_OW 437
39478: IFFALSE 39561
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39480: LD_STRING e
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: CALL_OW 437
39492: PUSH
39493: LD_INT 1
39495: ARRAY
39496: PUSH
39497: LD_INT 1
39499: ARRAY
39500: EQUAL
39501: PUSH
39502: LD_VAR 0 4
39506: PUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 437
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: PUSH
39521: LD_INT 2
39523: ARRAY
39524: EQUAL
39525: AND
39526: PUSH
39527: LD_VAR 0 5
39531: PUSH
39532: LD_VAR 0 1
39536: PPUSH
39537: CALL_OW 437
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PUSH
39546: LD_INT 3
39548: ARRAY
39549: EQUAL
39550: AND
39551: IFFALSE 39561
// result := true end ;
39553: LD_ADDR_VAR 0 3
39557: PUSH
39558: LD_INT 1
39560: ST_TO_ADDR
// end ;
39561: LD_VAR 0 3
39565: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39566: LD_INT 0
39568: PPUSH
// result := false ;
39569: LD_ADDR_VAR 0 4
39573: PUSH
39574: LD_INT 0
39576: ST_TO_ADDR
// if GetTaskList ( unit ) then
39577: LD_VAR 0 1
39581: PPUSH
39582: CALL_OW 437
39586: IFFALSE 39669
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39588: LD_STRING M
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: CALL_OW 437
39600: PUSH
39601: LD_INT 1
39603: ARRAY
39604: PUSH
39605: LD_INT 1
39607: ARRAY
39608: EQUAL
39609: PUSH
39610: LD_VAR 0 2
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 437
39624: PUSH
39625: LD_INT 1
39627: ARRAY
39628: PUSH
39629: LD_INT 2
39631: ARRAY
39632: EQUAL
39633: AND
39634: PUSH
39635: LD_VAR 0 3
39639: PUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 437
39649: PUSH
39650: LD_INT 1
39652: ARRAY
39653: PUSH
39654: LD_INT 3
39656: ARRAY
39657: EQUAL
39658: AND
39659: IFFALSE 39669
// result := true ;
39661: LD_ADDR_VAR 0 4
39665: PUSH
39666: LD_INT 1
39668: ST_TO_ADDR
// end ; end ;
39669: LD_VAR 0 4
39673: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39674: LD_INT 0
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
// if not unit or not area then
39680: LD_VAR 0 1
39684: NOT
39685: PUSH
39686: LD_VAR 0 2
39690: NOT
39691: OR
39692: IFFALSE 39696
// exit ;
39694: GO 39860
// tmp := AreaToList ( area , i ) ;
39696: LD_ADDR_VAR 0 6
39700: PUSH
39701: LD_VAR 0 2
39705: PPUSH
39706: LD_VAR 0 5
39710: PPUSH
39711: CALL_OW 517
39715: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39716: LD_ADDR_VAR 0 5
39720: PUSH
39721: DOUBLE
39722: LD_INT 1
39724: DEC
39725: ST_TO_ADDR
39726: LD_VAR 0 6
39730: PUSH
39731: LD_INT 1
39733: ARRAY
39734: PUSH
39735: FOR_TO
39736: IFFALSE 39858
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39738: LD_ADDR_VAR 0 7
39742: PUSH
39743: LD_VAR 0 6
39747: PUSH
39748: LD_INT 1
39750: ARRAY
39751: PUSH
39752: LD_VAR 0 5
39756: ARRAY
39757: PUSH
39758: LD_VAR 0 6
39762: PUSH
39763: LD_INT 2
39765: ARRAY
39766: PUSH
39767: LD_VAR 0 5
39771: ARRAY
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39777: LD_VAR 0 7
39781: PUSH
39782: LD_INT 1
39784: ARRAY
39785: PPUSH
39786: LD_VAR 0 7
39790: PUSH
39791: LD_INT 2
39793: ARRAY
39794: PPUSH
39795: CALL_OW 428
39799: PUSH
39800: LD_INT 0
39802: EQUAL
39803: IFFALSE 39856
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39805: LD_VAR 0 1
39809: PPUSH
39810: LD_VAR 0 7
39814: PUSH
39815: LD_INT 1
39817: ARRAY
39818: PPUSH
39819: LD_VAR 0 7
39823: PUSH
39824: LD_INT 2
39826: ARRAY
39827: PPUSH
39828: LD_VAR 0 3
39832: PPUSH
39833: CALL_OW 48
// result := IsPlaced ( unit ) ;
39837: LD_ADDR_VAR 0 4
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 305
39851: ST_TO_ADDR
// exit ;
39852: POP
39853: POP
39854: GO 39860
// end ; end ;
39856: GO 39735
39858: POP
39859: POP
// end ;
39860: LD_VAR 0 4
39864: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39865: LD_INT 0
39867: PPUSH
39868: PPUSH
39869: PPUSH
// if not side or side > 8 then
39870: LD_VAR 0 1
39874: NOT
39875: PUSH
39876: LD_VAR 0 1
39880: PUSH
39881: LD_INT 8
39883: GREATER
39884: OR
39885: IFFALSE 39889
// exit ;
39887: GO 40076
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39889: LD_ADDR_VAR 0 4
39893: PUSH
39894: LD_INT 22
39896: PUSH
39897: LD_VAR 0 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 21
39908: PUSH
39909: LD_INT 3
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 69
39924: ST_TO_ADDR
// if not tmp then
39925: LD_VAR 0 4
39929: NOT
39930: IFFALSE 39934
// exit ;
39932: GO 40076
// enable_addtolog := true ;
39934: LD_ADDR_OWVAR 81
39938: PUSH
39939: LD_INT 1
39941: ST_TO_ADDR
// AddToLog ( [ ) ;
39942: LD_STRING [
39944: PPUSH
39945: CALL_OW 561
// for i in tmp do
39949: LD_ADDR_VAR 0 3
39953: PUSH
39954: LD_VAR 0 4
39958: PUSH
39959: FOR_IN
39960: IFFALSE 40067
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39962: LD_STRING [
39964: PUSH
39965: LD_VAR 0 3
39969: PPUSH
39970: CALL_OW 266
39974: STR
39975: PUSH
39976: LD_STRING , 
39978: STR
39979: PUSH
39980: LD_VAR 0 3
39984: PPUSH
39985: CALL_OW 250
39989: STR
39990: PUSH
39991: LD_STRING , 
39993: STR
39994: PUSH
39995: LD_VAR 0 3
39999: PPUSH
40000: CALL_OW 251
40004: STR
40005: PUSH
40006: LD_STRING , 
40008: STR
40009: PUSH
40010: LD_VAR 0 3
40014: PPUSH
40015: CALL_OW 254
40019: STR
40020: PUSH
40021: LD_STRING , 
40023: STR
40024: PUSH
40025: LD_VAR 0 3
40029: PPUSH
40030: LD_INT 1
40032: PPUSH
40033: CALL_OW 268
40037: STR
40038: PUSH
40039: LD_STRING , 
40041: STR
40042: PUSH
40043: LD_VAR 0 3
40047: PPUSH
40048: LD_INT 2
40050: PPUSH
40051: CALL_OW 268
40055: STR
40056: PUSH
40057: LD_STRING ],
40059: STR
40060: PPUSH
40061: CALL_OW 561
// end ;
40065: GO 39959
40067: POP
40068: POP
// AddToLog ( ]; ) ;
40069: LD_STRING ];
40071: PPUSH
40072: CALL_OW 561
// end ;
40076: LD_VAR 0 2
40080: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40081: LD_INT 0
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
// if not area or not rate or not max then
40088: LD_VAR 0 1
40092: NOT
40093: PUSH
40094: LD_VAR 0 2
40098: NOT
40099: OR
40100: PUSH
40101: LD_VAR 0 4
40105: NOT
40106: OR
40107: IFFALSE 40111
// exit ;
40109: GO 40300
// while 1 do
40111: LD_INT 1
40113: IFFALSE 40300
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40115: LD_ADDR_VAR 0 9
40119: PUSH
40120: LD_VAR 0 1
40124: PPUSH
40125: LD_INT 1
40127: PPUSH
40128: CALL_OW 287
40132: PUSH
40133: LD_INT 10
40135: MUL
40136: ST_TO_ADDR
// r := rate / 10 ;
40137: LD_ADDR_VAR 0 7
40141: PUSH
40142: LD_VAR 0 2
40146: PUSH
40147: LD_INT 10
40149: DIVREAL
40150: ST_TO_ADDR
// time := 1 1$00 ;
40151: LD_ADDR_VAR 0 8
40155: PUSH
40156: LD_INT 2100
40158: ST_TO_ADDR
// if amount < min then
40159: LD_VAR 0 9
40163: PUSH
40164: LD_VAR 0 3
40168: LESS
40169: IFFALSE 40187
// r := r * 2 else
40171: LD_ADDR_VAR 0 7
40175: PUSH
40176: LD_VAR 0 7
40180: PUSH
40181: LD_INT 2
40183: MUL
40184: ST_TO_ADDR
40185: GO 40213
// if amount > max then
40187: LD_VAR 0 9
40191: PUSH
40192: LD_VAR 0 4
40196: GREATER
40197: IFFALSE 40213
// r := r / 2 ;
40199: LD_ADDR_VAR 0 7
40203: PUSH
40204: LD_VAR 0 7
40208: PUSH
40209: LD_INT 2
40211: DIVREAL
40212: ST_TO_ADDR
// time := time / r ;
40213: LD_ADDR_VAR 0 8
40217: PUSH
40218: LD_VAR 0 8
40222: PUSH
40223: LD_VAR 0 7
40227: DIVREAL
40228: ST_TO_ADDR
// if time < 0 then
40229: LD_VAR 0 8
40233: PUSH
40234: LD_INT 0
40236: LESS
40237: IFFALSE 40254
// time := time * - 1 ;
40239: LD_ADDR_VAR 0 8
40243: PUSH
40244: LD_VAR 0 8
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: MUL
40253: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40254: LD_VAR 0 8
40258: PUSH
40259: LD_INT 35
40261: PPUSH
40262: LD_INT 875
40264: PPUSH
40265: CALL_OW 12
40269: PLUS
40270: PPUSH
40271: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40275: LD_INT 1
40277: PPUSH
40278: LD_INT 5
40280: PPUSH
40281: CALL_OW 12
40285: PPUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: LD_INT 1
40293: PPUSH
40294: CALL_OW 55
// end ;
40298: GO 40111
// end ;
40300: LD_VAR 0 5
40304: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40305: LD_INT 0
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
// if not turrets or not factories then
40315: LD_VAR 0 1
40319: NOT
40320: PUSH
40321: LD_VAR 0 2
40325: NOT
40326: OR
40327: IFFALSE 40331
// exit ;
40329: GO 40638
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40331: LD_ADDR_VAR 0 10
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: LD_INT 6
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 4
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: LD_INT 5
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 24
40373: PUSH
40374: LD_INT 25
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 23
40383: PUSH
40384: LD_INT 27
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 42
40397: PUSH
40398: LD_INT 43
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 44
40407: PUSH
40408: LD_INT 46
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 45
40417: PUSH
40418: LD_INT 47
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: ST_TO_ADDR
// result := [ ] ;
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: EMPTY
40441: ST_TO_ADDR
// for i in turrets do
40442: LD_ADDR_VAR 0 4
40446: PUSH
40447: LD_VAR 0 1
40451: PUSH
40452: FOR_IN
40453: IFFALSE 40636
// begin nat := GetNation ( i ) ;
40455: LD_ADDR_VAR 0 7
40459: PUSH
40460: LD_VAR 0 4
40464: PPUSH
40465: CALL_OW 248
40469: ST_TO_ADDR
// weapon := 0 ;
40470: LD_ADDR_VAR 0 8
40474: PUSH
40475: LD_INT 0
40477: ST_TO_ADDR
// if not nat then
40478: LD_VAR 0 7
40482: NOT
40483: IFFALSE 40487
// continue ;
40485: GO 40452
// for j in list [ nat ] do
40487: LD_ADDR_VAR 0 5
40491: PUSH
40492: LD_VAR 0 10
40496: PUSH
40497: LD_VAR 0 7
40501: ARRAY
40502: PUSH
40503: FOR_IN
40504: IFFALSE 40545
// if GetBWeapon ( i ) = j [ 1 ] then
40506: LD_VAR 0 4
40510: PPUSH
40511: CALL_OW 269
40515: PUSH
40516: LD_VAR 0 5
40520: PUSH
40521: LD_INT 1
40523: ARRAY
40524: EQUAL
40525: IFFALSE 40543
// begin weapon := j [ 2 ] ;
40527: LD_ADDR_VAR 0 8
40531: PUSH
40532: LD_VAR 0 5
40536: PUSH
40537: LD_INT 2
40539: ARRAY
40540: ST_TO_ADDR
// break ;
40541: GO 40545
// end ;
40543: GO 40503
40545: POP
40546: POP
// if not weapon then
40547: LD_VAR 0 8
40551: NOT
40552: IFFALSE 40556
// continue ;
40554: GO 40452
// for k in factories do
40556: LD_ADDR_VAR 0 6
40560: PUSH
40561: LD_VAR 0 2
40565: PUSH
40566: FOR_IN
40567: IFFALSE 40632
// begin weapons := AvailableWeaponList ( k ) ;
40569: LD_ADDR_VAR 0 9
40573: PUSH
40574: LD_VAR 0 6
40578: PPUSH
40579: CALL_OW 478
40583: ST_TO_ADDR
// if not weapons then
40584: LD_VAR 0 9
40588: NOT
40589: IFFALSE 40593
// continue ;
40591: GO 40566
// if weapon in weapons then
40593: LD_VAR 0 8
40597: PUSH
40598: LD_VAR 0 9
40602: IN
40603: IFFALSE 40630
// begin result := [ i , weapon ] ;
40605: LD_ADDR_VAR 0 3
40609: PUSH
40610: LD_VAR 0 4
40614: PUSH
40615: LD_VAR 0 8
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: ST_TO_ADDR
// exit ;
40624: POP
40625: POP
40626: POP
40627: POP
40628: GO 40638
// end ; end ;
40630: GO 40566
40632: POP
40633: POP
// end ;
40634: GO 40452
40636: POP
40637: POP
// end ;
40638: LD_VAR 0 3
40642: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40643: LD_INT 0
40645: PPUSH
// if not side or side > 8 then
40646: LD_VAR 0 3
40650: NOT
40651: PUSH
40652: LD_VAR 0 3
40656: PUSH
40657: LD_INT 8
40659: GREATER
40660: OR
40661: IFFALSE 40665
// exit ;
40663: GO 40724
// if not range then
40665: LD_VAR 0 4
40669: NOT
40670: IFFALSE 40681
// range := - 12 ;
40672: LD_ADDR_VAR 0 4
40676: PUSH
40677: LD_INT 12
40679: NEG
40680: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40681: LD_VAR 0 1
40685: PPUSH
40686: LD_VAR 0 2
40690: PPUSH
40691: LD_VAR 0 3
40695: PPUSH
40696: LD_VAR 0 4
40700: PPUSH
40701: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40705: LD_VAR 0 1
40709: PPUSH
40710: LD_VAR 0 2
40714: PPUSH
40715: LD_VAR 0 3
40719: PPUSH
40720: CALL_OW 331
// end ;
40724: LD_VAR 0 5
40728: RET
// export function Video ( mode ) ; begin
40729: LD_INT 0
40731: PPUSH
// ingame_video = mode ;
40732: LD_ADDR_OWVAR 52
40736: PUSH
40737: LD_VAR 0 1
40741: ST_TO_ADDR
// interface_hidden = mode ;
40742: LD_ADDR_OWVAR 54
40746: PUSH
40747: LD_VAR 0 1
40751: ST_TO_ADDR
// end ;
40752: LD_VAR 0 2
40756: RET
// export function Join ( array , element ) ; begin
40757: LD_INT 0
40759: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40760: LD_ADDR_VAR 0 3
40764: PUSH
40765: LD_VAR 0 1
40769: PPUSH
40770: LD_VAR 0 1
40774: PUSH
40775: LD_INT 1
40777: PLUS
40778: PPUSH
40779: LD_VAR 0 2
40783: PPUSH
40784: CALL_OW 1
40788: ST_TO_ADDR
// end ;
40789: LD_VAR 0 3
40793: RET
// export function JoinUnion ( array , element ) ; begin
40794: LD_INT 0
40796: PPUSH
// result := array union element ;
40797: LD_ADDR_VAR 0 3
40801: PUSH
40802: LD_VAR 0 1
40806: PUSH
40807: LD_VAR 0 2
40811: UNION
40812: ST_TO_ADDR
// end ;
40813: LD_VAR 0 3
40817: RET
// export function GetBehemoths ( side ) ; begin
40818: LD_INT 0
40820: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40821: LD_ADDR_VAR 0 2
40825: PUSH
40826: LD_INT 22
40828: PUSH
40829: LD_VAR 0 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 31
40840: PUSH
40841: LD_INT 25
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PPUSH
40852: CALL_OW 69
40856: ST_TO_ADDR
// end ;
40857: LD_VAR 0 2
40861: RET
// export function Shuffle ( array ) ; var i , index ; begin
40862: LD_INT 0
40864: PPUSH
40865: PPUSH
40866: PPUSH
// result := [ ] ;
40867: LD_ADDR_VAR 0 2
40871: PUSH
40872: EMPTY
40873: ST_TO_ADDR
// if not array then
40874: LD_VAR 0 1
40878: NOT
40879: IFFALSE 40883
// exit ;
40881: GO 40982
// Randomize ;
40883: CALL_OW 10
// for i = array downto 1 do
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: DOUBLE
40893: LD_VAR 0 1
40897: INC
40898: ST_TO_ADDR
40899: LD_INT 1
40901: PUSH
40902: FOR_DOWNTO
40903: IFFALSE 40980
// begin index := rand ( 1 , array ) ;
40905: LD_ADDR_VAR 0 4
40909: PUSH
40910: LD_INT 1
40912: PPUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 12
40922: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40923: LD_ADDR_VAR 0 2
40927: PUSH
40928: LD_VAR 0 2
40932: PPUSH
40933: LD_VAR 0 2
40937: PUSH
40938: LD_INT 1
40940: PLUS
40941: PPUSH
40942: LD_VAR 0 1
40946: PUSH
40947: LD_VAR 0 4
40951: ARRAY
40952: PPUSH
40953: CALL_OW 2
40957: ST_TO_ADDR
// array := Delete ( array , index ) ;
40958: LD_ADDR_VAR 0 1
40962: PUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: LD_VAR 0 4
40972: PPUSH
40973: CALL_OW 3
40977: ST_TO_ADDR
// end ;
40978: GO 40902
40980: POP
40981: POP
// end ;
40982: LD_VAR 0 2
40986: RET
// export function GetBaseMaterials ( base ) ; begin
40987: LD_INT 0
40989: PPUSH
// result := [ 0 , 0 , 0 ] ;
40990: LD_ADDR_VAR 0 2
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: ST_TO_ADDR
// if not base then
41009: LD_VAR 0 1
41013: NOT
41014: IFFALSE 41018
// exit ;
41016: GO 41067
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41018: LD_ADDR_VAR 0 2
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: LD_INT 1
41030: PPUSH
41031: CALL_OW 275
41035: PUSH
41036: LD_VAR 0 1
41040: PPUSH
41041: LD_INT 2
41043: PPUSH
41044: CALL_OW 275
41048: PUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: LD_INT 3
41056: PPUSH
41057: CALL_OW 275
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 2
41071: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
// result := array ;
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: LD_VAR 0 1
41085: ST_TO_ADDR
// if size >= result then
41086: LD_VAR 0 2
41090: PUSH
41091: LD_VAR 0 3
41095: GREATEREQUAL
41096: IFFALSE 41100
// exit ;
41098: GO 41150
// if size then
41100: LD_VAR 0 2
41104: IFFALSE 41150
// for i := array downto size do
41106: LD_ADDR_VAR 0 4
41110: PUSH
41111: DOUBLE
41112: LD_VAR 0 1
41116: INC
41117: ST_TO_ADDR
41118: LD_VAR 0 2
41122: PUSH
41123: FOR_DOWNTO
41124: IFFALSE 41148
// result := Delete ( result , result ) ;
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_VAR 0 3
41135: PPUSH
41136: LD_VAR 0 3
41140: PPUSH
41141: CALL_OW 3
41145: ST_TO_ADDR
41146: GO 41123
41148: POP
41149: POP
// end ;
41150: LD_VAR 0 3
41154: RET
// export function ComExit ( unit ) ; var tmp ; begin
41155: LD_INT 0
41157: PPUSH
41158: PPUSH
// if not IsInUnit ( unit ) then
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 310
41168: NOT
41169: IFFALSE 41173
// exit ;
41171: GO 41233
// tmp := IsInUnit ( unit ) ;
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_VAR 0 1
41182: PPUSH
41183: CALL_OW 310
41187: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41188: LD_VAR 0 3
41192: PPUSH
41193: CALL_OW 247
41197: PUSH
41198: LD_INT 2
41200: EQUAL
41201: IFFALSE 41214
// ComExitVehicle ( unit ) else
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 121
41212: GO 41223
// ComExitBuilding ( unit ) ;
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 122
// result := tmp ;
41223: LD_ADDR_VAR 0 2
41227: PUSH
41228: LD_VAR 0 3
41232: ST_TO_ADDR
// end ;
41233: LD_VAR 0 2
41237: RET
// export function ComExitAll ( units ) ; var i ; begin
41238: LD_INT 0
41240: PPUSH
41241: PPUSH
// if not units then
41242: LD_VAR 0 1
41246: NOT
41247: IFFALSE 41251
// exit ;
41249: GO 41277
// for i in units do
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_VAR 0 1
41260: PUSH
41261: FOR_IN
41262: IFFALSE 41275
// ComExit ( i ) ;
41264: LD_VAR 0 3
41268: PPUSH
41269: CALL 41155 0 1
41273: GO 41261
41275: POP
41276: POP
// end ;
41277: LD_VAR 0 2
41281: RET
// export function ResetHc ; begin
41282: LD_INT 0
41284: PPUSH
// InitHc ;
41285: CALL_OW 19
// hc_importance := 0 ;
41289: LD_ADDR_OWVAR 32
41293: PUSH
41294: LD_INT 0
41296: ST_TO_ADDR
// end ;
41297: LD_VAR 0 1
41301: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41302: LD_INT 0
41304: PPUSH
41305: PPUSH
41306: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41307: LD_ADDR_VAR 0 6
41311: PUSH
41312: LD_VAR 0 1
41316: PUSH
41317: LD_VAR 0 3
41321: PLUS
41322: PUSH
41323: LD_INT 2
41325: DIV
41326: ST_TO_ADDR
// if _x < 0 then
41327: LD_VAR 0 6
41331: PUSH
41332: LD_INT 0
41334: LESS
41335: IFFALSE 41352
// _x := _x * - 1 ;
41337: LD_ADDR_VAR 0 6
41341: PUSH
41342: LD_VAR 0 6
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: MUL
41351: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41352: LD_ADDR_VAR 0 7
41356: PUSH
41357: LD_VAR 0 2
41361: PUSH
41362: LD_VAR 0 4
41366: PLUS
41367: PUSH
41368: LD_INT 2
41370: DIV
41371: ST_TO_ADDR
// if _y < 0 then
41372: LD_VAR 0 7
41376: PUSH
41377: LD_INT 0
41379: LESS
41380: IFFALSE 41397
// _y := _y * - 1 ;
41382: LD_ADDR_VAR 0 7
41386: PUSH
41387: LD_VAR 0 7
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: MUL
41396: ST_TO_ADDR
// result := [ _x , _y ] ;
41397: LD_ADDR_VAR 0 5
41401: PUSH
41402: LD_VAR 0 6
41406: PUSH
41407: LD_VAR 0 7
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: ST_TO_ADDR
// end ;
41416: LD_VAR 0 5
41420: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41421: LD_INT 0
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
// task := GetTaskList ( unit ) ;
41427: LD_ADDR_VAR 0 7
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 437
41441: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41442: LD_VAR 0 7
41446: NOT
41447: PUSH
41448: LD_VAR 0 1
41452: PPUSH
41453: LD_VAR 0 2
41457: PPUSH
41458: CALL_OW 308
41462: NOT
41463: AND
41464: IFFALSE 41468
// exit ;
41466: GO 41586
// if IsInArea ( unit , area ) then
41468: LD_VAR 0 1
41472: PPUSH
41473: LD_VAR 0 2
41477: PPUSH
41478: CALL_OW 308
41482: IFFALSE 41500
// begin ComMoveToArea ( unit , goAway ) ;
41484: LD_VAR 0 1
41488: PPUSH
41489: LD_VAR 0 3
41493: PPUSH
41494: CALL_OW 113
// exit ;
41498: GO 41586
// end ; if task [ 1 ] [ 1 ] <> M then
41500: LD_VAR 0 7
41504: PUSH
41505: LD_INT 1
41507: ARRAY
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: PUSH
41513: LD_STRING M
41515: NONEQUAL
41516: IFFALSE 41520
// exit ;
41518: GO 41586
// x := task [ 1 ] [ 2 ] ;
41520: LD_ADDR_VAR 0 5
41524: PUSH
41525: LD_VAR 0 7
41529: PUSH
41530: LD_INT 1
41532: ARRAY
41533: PUSH
41534: LD_INT 2
41536: ARRAY
41537: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41538: LD_ADDR_VAR 0 6
41542: PUSH
41543: LD_VAR 0 7
41547: PUSH
41548: LD_INT 1
41550: ARRAY
41551: PUSH
41552: LD_INT 3
41554: ARRAY
41555: ST_TO_ADDR
// if InArea ( x , y , area ) then
41556: LD_VAR 0 5
41560: PPUSH
41561: LD_VAR 0 6
41565: PPUSH
41566: LD_VAR 0 2
41570: PPUSH
41571: CALL_OW 309
41575: IFFALSE 41586
// ComStop ( unit ) ;
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 141
// end ;
41586: LD_VAR 0 4
41590: RET
// export function Abs ( value ) ; begin
41591: LD_INT 0
41593: PPUSH
// result := value ;
41594: LD_ADDR_VAR 0 2
41598: PUSH
41599: LD_VAR 0 1
41603: ST_TO_ADDR
// if value < 0 then
41604: LD_VAR 0 1
41608: PUSH
41609: LD_INT 0
41611: LESS
41612: IFFALSE 41629
// result := value * - 1 ;
41614: LD_ADDR_VAR 0 2
41618: PUSH
41619: LD_VAR 0 1
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: MUL
41628: ST_TO_ADDR
// end ;
41629: LD_VAR 0 2
41633: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41634: LD_INT 0
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
// if not unit or not building then
41644: LD_VAR 0 1
41648: NOT
41649: PUSH
41650: LD_VAR 0 2
41654: NOT
41655: OR
41656: IFFALSE 41660
// exit ;
41658: GO 41886
// x := GetX ( building ) ;
41660: LD_ADDR_VAR 0 4
41664: PUSH
41665: LD_VAR 0 2
41669: PPUSH
41670: CALL_OW 250
41674: ST_TO_ADDR
// y := GetY ( building ) ;
41675: LD_ADDR_VAR 0 6
41679: PUSH
41680: LD_VAR 0 2
41684: PPUSH
41685: CALL_OW 251
41689: ST_TO_ADDR
// d := GetDir ( building ) ;
41690: LD_ADDR_VAR 0 8
41694: PUSH
41695: LD_VAR 0 2
41699: PPUSH
41700: CALL_OW 254
41704: ST_TO_ADDR
// r := 4 ;
41705: LD_ADDR_VAR 0 9
41709: PUSH
41710: LD_INT 4
41712: ST_TO_ADDR
// for i := 1 to 5 do
41713: LD_ADDR_VAR 0 10
41717: PUSH
41718: DOUBLE
41719: LD_INT 1
41721: DEC
41722: ST_TO_ADDR
41723: LD_INT 5
41725: PUSH
41726: FOR_TO
41727: IFFALSE 41884
// begin _x := ShiftX ( x , d , r + i ) ;
41729: LD_ADDR_VAR 0 5
41733: PUSH
41734: LD_VAR 0 4
41738: PPUSH
41739: LD_VAR 0 8
41743: PPUSH
41744: LD_VAR 0 9
41748: PUSH
41749: LD_VAR 0 10
41753: PLUS
41754: PPUSH
41755: CALL_OW 272
41759: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41760: LD_ADDR_VAR 0 7
41764: PUSH
41765: LD_VAR 0 6
41769: PPUSH
41770: LD_VAR 0 8
41774: PPUSH
41775: LD_VAR 0 9
41779: PUSH
41780: LD_VAR 0 10
41784: PLUS
41785: PPUSH
41786: CALL_OW 273
41790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41791: LD_VAR 0 5
41795: PPUSH
41796: LD_VAR 0 7
41800: PPUSH
41801: CALL_OW 488
41805: PUSH
41806: LD_VAR 0 5
41810: PPUSH
41811: LD_VAR 0 7
41815: PPUSH
41816: CALL_OW 428
41820: PPUSH
41821: CALL_OW 247
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: IN
41836: NOT
41837: AND
41838: IFFALSE 41882
// begin ComMoveXY ( unit , _x , _y ) ;
41840: LD_VAR 0 1
41844: PPUSH
41845: LD_VAR 0 5
41849: PPUSH
41850: LD_VAR 0 7
41854: PPUSH
41855: CALL_OW 111
// result := [ _x , _y ] ;
41859: LD_ADDR_VAR 0 3
41863: PUSH
41864: LD_VAR 0 5
41868: PUSH
41869: LD_VAR 0 7
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: ST_TO_ADDR
// exit ;
41878: POP
41879: POP
41880: GO 41886
// end ; end ;
41882: GO 41726
41884: POP
41885: POP
// end ;
41886: LD_VAR 0 3
41890: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41891: LD_INT 0
41893: PPUSH
41894: PPUSH
41895: PPUSH
// result := 0 ;
41896: LD_ADDR_VAR 0 3
41900: PUSH
41901: LD_INT 0
41903: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41904: LD_VAR 0 1
41908: PUSH
41909: LD_INT 0
41911: LESS
41912: PUSH
41913: LD_VAR 0 1
41917: PUSH
41918: LD_INT 8
41920: GREATER
41921: OR
41922: PUSH
41923: LD_VAR 0 2
41927: PUSH
41928: LD_INT 0
41930: LESS
41931: OR
41932: PUSH
41933: LD_VAR 0 2
41937: PUSH
41938: LD_INT 8
41940: GREATER
41941: OR
41942: IFFALSE 41946
// exit ;
41944: GO 42021
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41946: LD_ADDR_VAR 0 4
41950: PUSH
41951: LD_INT 22
41953: PUSH
41954: LD_VAR 0 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PPUSH
41963: CALL_OW 69
41967: PUSH
41968: FOR_IN
41969: IFFALSE 42019
// begin un := UnitShoot ( i ) ;
41971: LD_ADDR_VAR 0 5
41975: PUSH
41976: LD_VAR 0 4
41980: PPUSH
41981: CALL_OW 504
41985: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41986: LD_VAR 0 5
41990: PPUSH
41991: CALL_OW 255
41995: PUSH
41996: LD_VAR 0 1
42000: EQUAL
42001: IFFALSE 42017
// begin result := un ;
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_VAR 0 5
42012: ST_TO_ADDR
// exit ;
42013: POP
42014: POP
42015: GO 42021
// end ; end ;
42017: GO 41968
42019: POP
42020: POP
// end ;
42021: LD_VAR 0 3
42025: RET
// export function GetCargoBay ( units ) ; begin
42026: LD_INT 0
42028: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42029: LD_ADDR_VAR 0 2
42033: PUSH
42034: LD_VAR 0 1
42038: PPUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 34
42044: PUSH
42045: LD_INT 12
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 34
42054: PUSH
42055: LD_INT 51
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 34
42064: PUSH
42065: LD_INT 32
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 34
42074: PUSH
42075: LD_INT 89
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: PPUSH
42089: CALL_OW 72
42093: ST_TO_ADDR
// end ;
42094: LD_VAR 0 2
42098: RET
// export function Negate ( value ) ; begin
42099: LD_INT 0
42101: PPUSH
// result := not value ;
42102: LD_ADDR_VAR 0 2
42106: PUSH
42107: LD_VAR 0 1
42111: NOT
42112: ST_TO_ADDR
// end ;
42113: LD_VAR 0 2
42117: RET
// export function Inc ( value ) ; begin
42118: LD_INT 0
42120: PPUSH
// result := value + 1 ;
42121: LD_ADDR_VAR 0 2
42125: PUSH
42126: LD_VAR 0 1
42130: PUSH
42131: LD_INT 1
42133: PLUS
42134: ST_TO_ADDR
// end ;
42135: LD_VAR 0 2
42139: RET
// export function Dec ( value ) ; begin
42140: LD_INT 0
42142: PPUSH
// result := value - 1 ;
42143: LD_ADDR_VAR 0 2
42147: PUSH
42148: LD_VAR 0 1
42152: PUSH
42153: LD_INT 1
42155: MINUS
42156: ST_TO_ADDR
// end ;
42157: LD_VAR 0 2
42161: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42162: LD_INT 0
42164: PPUSH
42165: PPUSH
42166: PPUSH
42167: PPUSH
42168: PPUSH
42169: PPUSH
42170: PPUSH
42171: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42172: LD_VAR 0 1
42176: PPUSH
42177: LD_VAR 0 2
42181: PPUSH
42182: CALL_OW 488
42186: NOT
42187: PUSH
42188: LD_VAR 0 3
42192: PPUSH
42193: LD_VAR 0 4
42197: PPUSH
42198: CALL_OW 488
42202: NOT
42203: OR
42204: IFFALSE 42217
// begin result := - 1 ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: ST_TO_ADDR
// exit ;
42215: GO 42452
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42217: LD_ADDR_VAR 0 12
42221: PUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: LD_VAR 0 2
42231: PPUSH
42232: LD_VAR 0 3
42236: PPUSH
42237: LD_VAR 0 4
42241: PPUSH
42242: CALL 41302 0 4
42246: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42247: LD_ADDR_VAR 0 11
42251: PUSH
42252: LD_VAR 0 1
42256: PPUSH
42257: LD_VAR 0 2
42261: PPUSH
42262: LD_VAR 0 12
42266: PUSH
42267: LD_INT 1
42269: ARRAY
42270: PPUSH
42271: LD_VAR 0 12
42275: PUSH
42276: LD_INT 2
42278: ARRAY
42279: PPUSH
42280: CALL_OW 298
42284: ST_TO_ADDR
// distance := 9999 ;
42285: LD_ADDR_VAR 0 10
42289: PUSH
42290: LD_INT 9999
42292: ST_TO_ADDR
// for i := 0 to 5 do
42293: LD_ADDR_VAR 0 6
42297: PUSH
42298: DOUBLE
42299: LD_INT 0
42301: DEC
42302: ST_TO_ADDR
42303: LD_INT 5
42305: PUSH
42306: FOR_TO
42307: IFFALSE 42450
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42309: LD_ADDR_VAR 0 7
42313: PUSH
42314: LD_VAR 0 1
42318: PPUSH
42319: LD_VAR 0 6
42323: PPUSH
42324: LD_VAR 0 11
42328: PPUSH
42329: CALL_OW 272
42333: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42334: LD_ADDR_VAR 0 8
42338: PUSH
42339: LD_VAR 0 2
42343: PPUSH
42344: LD_VAR 0 6
42348: PPUSH
42349: LD_VAR 0 11
42353: PPUSH
42354: CALL_OW 273
42358: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42359: LD_VAR 0 7
42363: PPUSH
42364: LD_VAR 0 8
42368: PPUSH
42369: CALL_OW 488
42373: NOT
42374: IFFALSE 42378
// continue ;
42376: GO 42306
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42378: LD_ADDR_VAR 0 9
42382: PUSH
42383: LD_VAR 0 12
42387: PUSH
42388: LD_INT 1
42390: ARRAY
42391: PPUSH
42392: LD_VAR 0 12
42396: PUSH
42397: LD_INT 2
42399: ARRAY
42400: PPUSH
42401: LD_VAR 0 7
42405: PPUSH
42406: LD_VAR 0 8
42410: PPUSH
42411: CALL_OW 298
42415: ST_TO_ADDR
// if tmp < distance then
42416: LD_VAR 0 9
42420: PUSH
42421: LD_VAR 0 10
42425: LESS
42426: IFFALSE 42448
// begin result := i ;
42428: LD_ADDR_VAR 0 5
42432: PUSH
42433: LD_VAR 0 6
42437: ST_TO_ADDR
// distance := tmp ;
42438: LD_ADDR_VAR 0 10
42442: PUSH
42443: LD_VAR 0 9
42447: ST_TO_ADDR
// end ; end ;
42448: GO 42306
42450: POP
42451: POP
// end ;
42452: LD_VAR 0 5
42456: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42457: LD_INT 0
42459: PPUSH
42460: PPUSH
// if not driver or not IsInUnit ( driver ) then
42461: LD_VAR 0 1
42465: NOT
42466: PUSH
42467: LD_VAR 0 1
42471: PPUSH
42472: CALL_OW 310
42476: NOT
42477: OR
42478: IFFALSE 42482
// exit ;
42480: GO 42572
// vehicle := IsInUnit ( driver ) ;
42482: LD_ADDR_VAR 0 3
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 310
42496: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42497: LD_VAR 0 1
42501: PPUSH
42502: LD_STRING \
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: PUSH
42532: LD_STRING E
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_VAR 0 3
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PPUSH
42568: CALL_OW 446
// end ;
42572: LD_VAR 0 2
42576: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42577: LD_INT 0
42579: PPUSH
42580: PPUSH
// if not driver or not IsInUnit ( driver ) then
42581: LD_VAR 0 1
42585: NOT
42586: PUSH
42587: LD_VAR 0 1
42591: PPUSH
42592: CALL_OW 310
42596: NOT
42597: OR
42598: IFFALSE 42602
// exit ;
42600: GO 42692
// vehicle := IsInUnit ( driver ) ;
42602: LD_ADDR_VAR 0 3
42606: PUSH
42607: LD_VAR 0 1
42611: PPUSH
42612: CALL_OW 310
42616: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42617: LD_VAR 0 1
42621: PPUSH
42622: LD_STRING \
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: PUSH
42652: LD_STRING E
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_VAR 0 3
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PPUSH
42688: CALL_OW 447
// end ;
42692: LD_VAR 0 2
42696: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42697: LD_INT 0
42699: PPUSH
42700: PPUSH
42701: PPUSH
// tmp := [ ] ;
42702: LD_ADDR_VAR 0 5
42706: PUSH
42707: EMPTY
42708: ST_TO_ADDR
// for i in units do
42709: LD_ADDR_VAR 0 4
42713: PUSH
42714: LD_VAR 0 1
42718: PUSH
42719: FOR_IN
42720: IFFALSE 42758
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42722: LD_ADDR_VAR 0 5
42726: PUSH
42727: LD_VAR 0 5
42731: PPUSH
42732: LD_VAR 0 5
42736: PUSH
42737: LD_INT 1
42739: PLUS
42740: PPUSH
42741: LD_VAR 0 4
42745: PPUSH
42746: CALL_OW 256
42750: PPUSH
42751: CALL_OW 2
42755: ST_TO_ADDR
42756: GO 42719
42758: POP
42759: POP
// if not tmp then
42760: LD_VAR 0 5
42764: NOT
42765: IFFALSE 42769
// exit ;
42767: GO 42817
// if asc then
42769: LD_VAR 0 2
42773: IFFALSE 42797
// result := SortListByListAsc ( units , tmp ) else
42775: LD_ADDR_VAR 0 3
42779: PUSH
42780: LD_VAR 0 1
42784: PPUSH
42785: LD_VAR 0 5
42789: PPUSH
42790: CALL_OW 76
42794: ST_TO_ADDR
42795: GO 42817
// result := SortListByListDesc ( units , tmp ) ;
42797: LD_ADDR_VAR 0 3
42801: PUSH
42802: LD_VAR 0 1
42806: PPUSH
42807: LD_VAR 0 5
42811: PPUSH
42812: CALL_OW 77
42816: ST_TO_ADDR
// end ;
42817: LD_VAR 0 3
42821: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42822: LD_INT 0
42824: PPUSH
42825: PPUSH
// task := GetTaskList ( mech ) ;
42826: LD_ADDR_VAR 0 4
42830: PUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 437
42840: ST_TO_ADDR
// if not task then
42841: LD_VAR 0 4
42845: NOT
42846: IFFALSE 42850
// exit ;
42848: GO 42892
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_VAR 0 4
42859: PUSH
42860: LD_INT 1
42862: ARRAY
42863: PUSH
42864: LD_INT 1
42866: ARRAY
42867: PUSH
42868: LD_STRING r
42870: EQUAL
42871: PUSH
42872: LD_VAR 0 4
42876: PUSH
42877: LD_INT 1
42879: ARRAY
42880: PUSH
42881: LD_INT 4
42883: ARRAY
42884: PUSH
42885: LD_VAR 0 2
42889: EQUAL
42890: AND
42891: ST_TO_ADDR
// end ;
42892: LD_VAR 0 3
42896: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42897: LD_INT 0
42899: PPUSH
// SetDir ( unit , d ) ;
42900: LD_VAR 0 1
42904: PPUSH
42905: LD_VAR 0 4
42909: PPUSH
42910: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42914: LD_VAR 0 1
42918: PPUSH
42919: LD_VAR 0 2
42923: PPUSH
42924: LD_VAR 0 3
42928: PPUSH
42929: LD_VAR 0 5
42933: PPUSH
42934: CALL_OW 48
// end ;
42938: LD_VAR 0 6
42942: RET
// export function ToNaturalNumber ( number ) ; begin
42943: LD_INT 0
42945: PPUSH
// result := number div 1 ;
42946: LD_ADDR_VAR 0 2
42950: PUSH
42951: LD_VAR 0 1
42955: PUSH
42956: LD_INT 1
42958: DIV
42959: ST_TO_ADDR
// if number < 0 then
42960: LD_VAR 0 1
42964: PUSH
42965: LD_INT 0
42967: LESS
42968: IFFALSE 42978
// result := 0 ;
42970: LD_ADDR_VAR 0 2
42974: PUSH
42975: LD_INT 0
42977: ST_TO_ADDR
// end ;
42978: LD_VAR 0 2
42982: RET
// export function SortByClass ( units , class ) ; var un ; begin
42983: LD_INT 0
42985: PPUSH
42986: PPUSH
// if not units or not class then
42987: LD_VAR 0 1
42991: NOT
42992: PUSH
42993: LD_VAR 0 2
42997: NOT
42998: OR
42999: IFFALSE 43003
// exit ;
43001: GO 43098
// result := [ ] ;
43003: LD_ADDR_VAR 0 3
43007: PUSH
43008: EMPTY
43009: ST_TO_ADDR
// for un in units do
43010: LD_ADDR_VAR 0 4
43014: PUSH
43015: LD_VAR 0 1
43019: PUSH
43020: FOR_IN
43021: IFFALSE 43096
// if GetClass ( un ) = class then
43023: LD_VAR 0 4
43027: PPUSH
43028: CALL_OW 257
43032: PUSH
43033: LD_VAR 0 2
43037: EQUAL
43038: IFFALSE 43065
// result := Insert ( result , 1 , un ) else
43040: LD_ADDR_VAR 0 3
43044: PUSH
43045: LD_VAR 0 3
43049: PPUSH
43050: LD_INT 1
43052: PPUSH
43053: LD_VAR 0 4
43057: PPUSH
43058: CALL_OW 2
43062: ST_TO_ADDR
43063: GO 43094
// result := Replace ( result , result + 1 , un ) ;
43065: LD_ADDR_VAR 0 3
43069: PUSH
43070: LD_VAR 0 3
43074: PPUSH
43075: LD_VAR 0 3
43079: PUSH
43080: LD_INT 1
43082: PLUS
43083: PPUSH
43084: LD_VAR 0 4
43088: PPUSH
43089: CALL_OW 1
43093: ST_TO_ADDR
43094: GO 43020
43096: POP
43097: POP
// end ;
43098: LD_VAR 0 3
43102: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43103: LD_INT 0
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
// result := [ ] ;
43112: LD_ADDR_VAR 0 4
43116: PUSH
43117: EMPTY
43118: ST_TO_ADDR
// if x - r < 0 then
43119: LD_VAR 0 1
43123: PUSH
43124: LD_VAR 0 3
43128: MINUS
43129: PUSH
43130: LD_INT 0
43132: LESS
43133: IFFALSE 43145
// min_x := 0 else
43135: LD_ADDR_VAR 0 8
43139: PUSH
43140: LD_INT 0
43142: ST_TO_ADDR
43143: GO 43161
// min_x := x - r ;
43145: LD_ADDR_VAR 0 8
43149: PUSH
43150: LD_VAR 0 1
43154: PUSH
43155: LD_VAR 0 3
43159: MINUS
43160: ST_TO_ADDR
// if y - r < 0 then
43161: LD_VAR 0 2
43165: PUSH
43166: LD_VAR 0 3
43170: MINUS
43171: PUSH
43172: LD_INT 0
43174: LESS
43175: IFFALSE 43187
// min_y := 0 else
43177: LD_ADDR_VAR 0 7
43181: PUSH
43182: LD_INT 0
43184: ST_TO_ADDR
43185: GO 43203
// min_y := y - r ;
43187: LD_ADDR_VAR 0 7
43191: PUSH
43192: LD_VAR 0 2
43196: PUSH
43197: LD_VAR 0 3
43201: MINUS
43202: ST_TO_ADDR
// max_x := x + r ;
43203: LD_ADDR_VAR 0 9
43207: PUSH
43208: LD_VAR 0 1
43212: PUSH
43213: LD_VAR 0 3
43217: PLUS
43218: ST_TO_ADDR
// max_y := y + r ;
43219: LD_ADDR_VAR 0 10
43223: PUSH
43224: LD_VAR 0 2
43228: PUSH
43229: LD_VAR 0 3
43233: PLUS
43234: ST_TO_ADDR
// for _x = min_x to max_x do
43235: LD_ADDR_VAR 0 5
43239: PUSH
43240: DOUBLE
43241: LD_VAR 0 8
43245: DEC
43246: ST_TO_ADDR
43247: LD_VAR 0 9
43251: PUSH
43252: FOR_TO
43253: IFFALSE 43354
// for _y = min_y to max_y do
43255: LD_ADDR_VAR 0 6
43259: PUSH
43260: DOUBLE
43261: LD_VAR 0 7
43265: DEC
43266: ST_TO_ADDR
43267: LD_VAR 0 10
43271: PUSH
43272: FOR_TO
43273: IFFALSE 43350
// begin if not ValidHex ( _x , _y ) then
43275: LD_VAR 0 5
43279: PPUSH
43280: LD_VAR 0 6
43284: PPUSH
43285: CALL_OW 488
43289: NOT
43290: IFFALSE 43294
// continue ;
43292: GO 43272
// if GetResourceTypeXY ( _x , _y ) then
43294: LD_VAR 0 5
43298: PPUSH
43299: LD_VAR 0 6
43303: PPUSH
43304: CALL_OW 283
43308: IFFALSE 43348
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43310: LD_ADDR_VAR 0 4
43314: PUSH
43315: LD_VAR 0 4
43319: PPUSH
43320: LD_VAR 0 4
43324: PUSH
43325: LD_INT 1
43327: PLUS
43328: PPUSH
43329: LD_VAR 0 5
43333: PUSH
43334: LD_VAR 0 6
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PPUSH
43343: CALL_OW 1
43347: ST_TO_ADDR
// end ;
43348: GO 43272
43350: POP
43351: POP
43352: GO 43252
43354: POP
43355: POP
// end ;
43356: LD_VAR 0 4
43360: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43361: LD_INT 0
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
// if not units then
43371: LD_VAR 0 1
43375: NOT
43376: IFFALSE 43380
// exit ;
43378: GO 43904
// result := UnitFilter ( units , [ f_ok ] ) ;
43380: LD_ADDR_VAR 0 3
43384: PUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: LD_INT 50
43392: PUSH
43393: EMPTY
43394: LIST
43395: PPUSH
43396: CALL_OW 72
43400: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43401: LD_ADDR_VAR 0 8
43405: PUSH
43406: LD_VAR 0 1
43410: PUSH
43411: LD_INT 1
43413: ARRAY
43414: PPUSH
43415: CALL_OW 255
43419: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43420: LD_ADDR_VAR 0 10
43424: PUSH
43425: LD_INT 29
43427: PUSH
43428: LD_INT 91
43430: PUSH
43431: LD_INT 49
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: ST_TO_ADDR
// if not result then
43439: LD_VAR 0 3
43443: NOT
43444: IFFALSE 43448
// exit ;
43446: GO 43904
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43448: LD_ADDR_VAR 0 5
43452: PUSH
43453: LD_INT 81
43455: PUSH
43456: LD_VAR 0 8
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PPUSH
43465: CALL_OW 69
43469: ST_TO_ADDR
// for i in result do
43470: LD_ADDR_VAR 0 4
43474: PUSH
43475: LD_VAR 0 3
43479: PUSH
43480: FOR_IN
43481: IFFALSE 43902
// begin tag := GetTag ( i ) + 1 ;
43483: LD_ADDR_VAR 0 9
43487: PUSH
43488: LD_VAR 0 4
43492: PPUSH
43493: CALL_OW 110
43497: PUSH
43498: LD_INT 1
43500: PLUS
43501: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43502: LD_ADDR_VAR 0 7
43506: PUSH
43507: LD_VAR 0 4
43511: PPUSH
43512: CALL_OW 250
43516: PPUSH
43517: LD_VAR 0 4
43521: PPUSH
43522: CALL_OW 251
43526: PPUSH
43527: LD_INT 6
43529: PPUSH
43530: CALL 43103 0 3
43534: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43535: LD_VAR 0 4
43539: PPUSH
43540: CALL_OW 247
43544: PUSH
43545: LD_INT 2
43547: EQUAL
43548: PUSH
43549: LD_VAR 0 7
43553: AND
43554: PUSH
43555: LD_VAR 0 4
43559: PPUSH
43560: CALL_OW 264
43564: PUSH
43565: LD_VAR 0 10
43569: IN
43570: NOT
43571: AND
43572: IFFALSE 43611
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43574: LD_VAR 0 4
43578: PPUSH
43579: LD_VAR 0 7
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PUSH
43588: LD_INT 1
43590: ARRAY
43591: PPUSH
43592: LD_VAR 0 7
43596: PUSH
43597: LD_INT 1
43599: ARRAY
43600: PUSH
43601: LD_INT 2
43603: ARRAY
43604: PPUSH
43605: CALL_OW 116
43609: GO 43900
// if path > tag then
43611: LD_VAR 0 2
43615: PUSH
43616: LD_VAR 0 9
43620: GREATER
43621: IFFALSE 43829
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43623: LD_ADDR_VAR 0 6
43627: PUSH
43628: LD_VAR 0 5
43632: PPUSH
43633: LD_INT 91
43635: PUSH
43636: LD_VAR 0 4
43640: PUSH
43641: LD_INT 8
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: PPUSH
43649: CALL_OW 72
43653: ST_TO_ADDR
// if nearEnemy then
43654: LD_VAR 0 6
43658: IFFALSE 43727
// begin if GetWeapon ( i ) = ru_time_lapser then
43660: LD_VAR 0 4
43664: PPUSH
43665: CALL_OW 264
43669: PUSH
43670: LD_INT 49
43672: EQUAL
43673: IFFALSE 43701
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43675: LD_VAR 0 4
43679: PPUSH
43680: LD_VAR 0 6
43684: PPUSH
43685: LD_VAR 0 4
43689: PPUSH
43690: CALL_OW 74
43694: PPUSH
43695: CALL_OW 112
43699: GO 43725
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43701: LD_VAR 0 4
43705: PPUSH
43706: LD_VAR 0 6
43710: PPUSH
43711: LD_VAR 0 4
43715: PPUSH
43716: CALL_OW 74
43720: PPUSH
43721: CALL_OW 115
// end else
43725: GO 43827
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43727: LD_VAR 0 4
43731: PPUSH
43732: LD_VAR 0 2
43736: PUSH
43737: LD_VAR 0 9
43741: ARRAY
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PPUSH
43747: LD_VAR 0 2
43751: PUSH
43752: LD_VAR 0 9
43756: ARRAY
43757: PUSH
43758: LD_INT 2
43760: ARRAY
43761: PPUSH
43762: CALL_OW 297
43766: PUSH
43767: LD_INT 6
43769: GREATER
43770: IFFALSE 43813
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43772: LD_VAR 0 4
43776: PPUSH
43777: LD_VAR 0 2
43781: PUSH
43782: LD_VAR 0 9
43786: ARRAY
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: PPUSH
43792: LD_VAR 0 2
43796: PUSH
43797: LD_VAR 0 9
43801: ARRAY
43802: PUSH
43803: LD_INT 2
43805: ARRAY
43806: PPUSH
43807: CALL_OW 114
43811: GO 43827
// SetTag ( i , tag ) ;
43813: LD_VAR 0 4
43817: PPUSH
43818: LD_VAR 0 9
43822: PPUSH
43823: CALL_OW 109
// end else
43827: GO 43900
// if enemy then
43829: LD_VAR 0 5
43833: IFFALSE 43900
// begin if GetWeapon ( i ) = ru_time_lapser then
43835: LD_VAR 0 4
43839: PPUSH
43840: CALL_OW 264
43844: PUSH
43845: LD_INT 49
43847: EQUAL
43848: IFFALSE 43876
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43850: LD_VAR 0 4
43854: PPUSH
43855: LD_VAR 0 5
43859: PPUSH
43860: LD_VAR 0 4
43864: PPUSH
43865: CALL_OW 74
43869: PPUSH
43870: CALL_OW 112
43874: GO 43900
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43876: LD_VAR 0 4
43880: PPUSH
43881: LD_VAR 0 5
43885: PPUSH
43886: LD_VAR 0 4
43890: PPUSH
43891: CALL_OW 74
43895: PPUSH
43896: CALL_OW 115
// end ; end ;
43900: GO 43480
43902: POP
43903: POP
// end ;
43904: LD_VAR 0 3
43908: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43909: LD_INT 0
43911: PPUSH
43912: PPUSH
43913: PPUSH
// if not unit or IsInUnit ( unit ) then
43914: LD_VAR 0 1
43918: NOT
43919: PUSH
43920: LD_VAR 0 1
43924: PPUSH
43925: CALL_OW 310
43929: OR
43930: IFFALSE 43934
// exit ;
43932: GO 44025
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43934: LD_ADDR_VAR 0 4
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 250
43948: PPUSH
43949: LD_VAR 0 2
43953: PPUSH
43954: LD_INT 1
43956: PPUSH
43957: CALL_OW 272
43961: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43962: LD_ADDR_VAR 0 5
43966: PUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: CALL_OW 251
43976: PPUSH
43977: LD_VAR 0 2
43981: PPUSH
43982: LD_INT 1
43984: PPUSH
43985: CALL_OW 273
43989: ST_TO_ADDR
// if ValidHex ( x , y ) then
43990: LD_VAR 0 4
43994: PPUSH
43995: LD_VAR 0 5
43999: PPUSH
44000: CALL_OW 488
44004: IFFALSE 44025
// ComTurnXY ( unit , x , y ) ;
44006: LD_VAR 0 1
44010: PPUSH
44011: LD_VAR 0 4
44015: PPUSH
44016: LD_VAR 0 5
44020: PPUSH
44021: CALL_OW 118
// end ;
44025: LD_VAR 0 3
44029: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44030: LD_INT 0
44032: PPUSH
44033: PPUSH
// result := false ;
44034: LD_ADDR_VAR 0 3
44038: PUSH
44039: LD_INT 0
44041: ST_TO_ADDR
// if not units then
44042: LD_VAR 0 2
44046: NOT
44047: IFFALSE 44051
// exit ;
44049: GO 44096
// for i in units do
44051: LD_ADDR_VAR 0 4
44055: PUSH
44056: LD_VAR 0 2
44060: PUSH
44061: FOR_IN
44062: IFFALSE 44094
// if See ( side , i ) then
44064: LD_VAR 0 1
44068: PPUSH
44069: LD_VAR 0 4
44073: PPUSH
44074: CALL_OW 292
44078: IFFALSE 44092
// begin result := true ;
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_INT 1
44087: ST_TO_ADDR
// exit ;
44088: POP
44089: POP
44090: GO 44096
// end ;
44092: GO 44061
44094: POP
44095: POP
// end ;
44096: LD_VAR 0 3
44100: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44101: LD_INT 0
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
// if not unit or not points then
44107: LD_VAR 0 1
44111: NOT
44112: PUSH
44113: LD_VAR 0 2
44117: NOT
44118: OR
44119: IFFALSE 44123
// exit ;
44121: GO 44213
// dist := 99999 ;
44123: LD_ADDR_VAR 0 5
44127: PUSH
44128: LD_INT 99999
44130: ST_TO_ADDR
// for i in points do
44131: LD_ADDR_VAR 0 4
44135: PUSH
44136: LD_VAR 0 2
44140: PUSH
44141: FOR_IN
44142: IFFALSE 44211
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44144: LD_ADDR_VAR 0 6
44148: PUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: LD_VAR 0 4
44158: PUSH
44159: LD_INT 1
44161: ARRAY
44162: PPUSH
44163: LD_VAR 0 4
44167: PUSH
44168: LD_INT 2
44170: ARRAY
44171: PPUSH
44172: CALL_OW 297
44176: ST_TO_ADDR
// if tmpDist < dist then
44177: LD_VAR 0 6
44181: PUSH
44182: LD_VAR 0 5
44186: LESS
44187: IFFALSE 44209
// begin result := i ;
44189: LD_ADDR_VAR 0 3
44193: PUSH
44194: LD_VAR 0 4
44198: ST_TO_ADDR
// dist := tmpDist ;
44199: LD_ADDR_VAR 0 5
44203: PUSH
44204: LD_VAR 0 6
44208: ST_TO_ADDR
// end ; end ;
44209: GO 44141
44211: POP
44212: POP
// end ;
44213: LD_VAR 0 3
44217: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44218: LD_INT 0
44220: PPUSH
// uc_side := side ;
44221: LD_ADDR_OWVAR 20
44225: PUSH
44226: LD_VAR 0 1
44230: ST_TO_ADDR
// uc_nation := 3 ;
44231: LD_ADDR_OWVAR 21
44235: PUSH
44236: LD_INT 3
44238: ST_TO_ADDR
// vc_chassis := 25 ;
44239: LD_ADDR_OWVAR 37
44243: PUSH
44244: LD_INT 25
44246: ST_TO_ADDR
// vc_engine := engine_siberite ;
44247: LD_ADDR_OWVAR 39
44251: PUSH
44252: LD_INT 3
44254: ST_TO_ADDR
// vc_control := control_computer ;
44255: LD_ADDR_OWVAR 38
44259: PUSH
44260: LD_INT 3
44262: ST_TO_ADDR
// vc_weapon := 59 ;
44263: LD_ADDR_OWVAR 40
44267: PUSH
44268: LD_INT 59
44270: ST_TO_ADDR
// result := CreateVehicle ;
44271: LD_ADDR_VAR 0 5
44275: PUSH
44276: CALL_OW 45
44280: ST_TO_ADDR
// SetDir ( result , d ) ;
44281: LD_VAR 0 5
44285: PPUSH
44286: LD_VAR 0 4
44290: PPUSH
44291: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44295: LD_VAR 0 5
44299: PPUSH
44300: LD_VAR 0 2
44304: PPUSH
44305: LD_VAR 0 3
44309: PPUSH
44310: LD_INT 0
44312: PPUSH
44313: CALL_OW 48
// end ;
44317: LD_VAR 0 5
44321: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44322: LD_INT 0
44324: PPUSH
44325: PPUSH
44326: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44327: LD_ADDR_VAR 0 2
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44350: LD_VAR 0 1
44354: NOT
44355: PUSH
44356: LD_VAR 0 1
44360: PPUSH
44361: CALL_OW 264
44365: PUSH
44366: LD_INT 12
44368: PUSH
44369: LD_INT 51
44371: PUSH
44372: LD_INT 32
44374: PUSH
44375: LD_INT 89
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: IN
44384: NOT
44385: OR
44386: IFFALSE 44390
// exit ;
44388: GO 44488
// for i := 1 to 3 do
44390: LD_ADDR_VAR 0 3
44394: PUSH
44395: DOUBLE
44396: LD_INT 1
44398: DEC
44399: ST_TO_ADDR
44400: LD_INT 3
44402: PUSH
44403: FOR_TO
44404: IFFALSE 44486
// begin tmp := GetCargo ( cargo , i ) ;
44406: LD_ADDR_VAR 0 4
44410: PUSH
44411: LD_VAR 0 1
44415: PPUSH
44416: LD_VAR 0 3
44420: PPUSH
44421: CALL_OW 289
44425: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44426: LD_ADDR_VAR 0 2
44430: PUSH
44431: LD_VAR 0 2
44435: PPUSH
44436: LD_VAR 0 3
44440: PPUSH
44441: LD_VAR 0 4
44445: PPUSH
44446: CALL_OW 1
44450: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44451: LD_ADDR_VAR 0 2
44455: PUSH
44456: LD_VAR 0 2
44460: PPUSH
44461: LD_INT 4
44463: PPUSH
44464: LD_VAR 0 2
44468: PUSH
44469: LD_INT 4
44471: ARRAY
44472: PUSH
44473: LD_VAR 0 4
44477: PLUS
44478: PPUSH
44479: CALL_OW 1
44483: ST_TO_ADDR
// end ;
44484: GO 44403
44486: POP
44487: POP
// end ;
44488: LD_VAR 0 2
44492: RET
// export function Length ( array ) ; begin
44493: LD_INT 0
44495: PPUSH
// result := array + 0 ;
44496: LD_ADDR_VAR 0 2
44500: PUSH
44501: LD_VAR 0 1
44505: PUSH
44506: LD_INT 0
44508: PLUS
44509: ST_TO_ADDR
// end ;
44510: LD_VAR 0 2
44514: RET
// export function PrepareArray ( array ) ; begin
44515: LD_INT 0
44517: PPUSH
// result := array diff 0 ;
44518: LD_ADDR_VAR 0 2
44522: PUSH
44523: LD_VAR 0 1
44527: PUSH
44528: LD_INT 0
44530: DIFF
44531: ST_TO_ADDR
// if not result [ 1 ] then
44532: LD_VAR 0 2
44536: PUSH
44537: LD_INT 1
44539: ARRAY
44540: NOT
44541: IFFALSE 44561
// result := Delete ( result , 1 ) ;
44543: LD_ADDR_VAR 0 2
44547: PUSH
44548: LD_VAR 0 2
44552: PPUSH
44553: LD_INT 1
44555: PPUSH
44556: CALL_OW 3
44560: ST_TO_ADDR
// end ;
44561: LD_VAR 0 2
44565: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44566: LD_INT 0
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
// sibRocketRange := 25 ;
44572: LD_ADDR_VAR 0 6
44576: PUSH
44577: LD_INT 25
44579: ST_TO_ADDR
// result := false ;
44580: LD_ADDR_VAR 0 4
44584: PUSH
44585: LD_INT 0
44587: ST_TO_ADDR
// for i := 0 to 5 do
44588: LD_ADDR_VAR 0 5
44592: PUSH
44593: DOUBLE
44594: LD_INT 0
44596: DEC
44597: ST_TO_ADDR
44598: LD_INT 5
44600: PUSH
44601: FOR_TO
44602: IFFALSE 44669
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44604: LD_VAR 0 1
44608: PPUSH
44609: LD_VAR 0 5
44613: PPUSH
44614: LD_VAR 0 6
44618: PPUSH
44619: CALL_OW 272
44623: PPUSH
44624: LD_VAR 0 2
44628: PPUSH
44629: LD_VAR 0 5
44633: PPUSH
44634: LD_VAR 0 6
44638: PPUSH
44639: CALL_OW 273
44643: PPUSH
44644: LD_VAR 0 3
44648: PPUSH
44649: CALL_OW 309
44653: IFFALSE 44667
// begin result := true ;
44655: LD_ADDR_VAR 0 4
44659: PUSH
44660: LD_INT 1
44662: ST_TO_ADDR
// exit ;
44663: POP
44664: POP
44665: GO 44671
// end ;
44667: GO 44601
44669: POP
44670: POP
// end ;
44671: LD_VAR 0 4
44675: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44676: LD_INT 0
44678: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44679: LD_VAR 0 1
44683: PPUSH
44684: LD_VAR 0 2
44688: PPUSH
44689: LD_INT 0
44691: PPUSH
44692: LD_INT 0
44694: PPUSH
44695: LD_INT 1
44697: PPUSH
44698: LD_INT 0
44700: PPUSH
44701: CALL_OW 587
// end ; end_of_file end_of_file
44705: LD_VAR 0 3
44709: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44710: LD_VAR 0 1
44714: PPUSH
44715: LD_VAR 0 2
44719: PPUSH
44720: LD_VAR 0 3
44724: PPUSH
44725: LD_VAR 0 4
44729: PPUSH
44730: LD_VAR 0 5
44734: PPUSH
44735: LD_VAR 0 6
44739: PPUSH
44740: CALL 44924 0 6
// end ;
44744: PPOPN 6
44746: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44747: LD_INT 0
44749: PPUSH
// begin if not units then
44750: LD_VAR 0 1
44754: NOT
44755: IFFALSE 44759
// exit ;
44757: GO 44759
// end ;
44759: PPOPN 7
44761: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44762: CALL 44828 0 0
// end ; end_of_file
44766: PPOPN 1
44768: END
// export globalGameSaveCounter ; every 0 0$1 do
44769: GO 44771
44771: DISABLE
// begin enable ;
44772: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44773: LD_STRING updateTimer(
44775: PUSH
44776: LD_OWVAR 1
44780: STR
44781: PUSH
44782: LD_STRING );
44784: STR
44785: PPUSH
44786: CALL_OW 559
// end ;
44790: END
// every 0 0$1 do
44791: GO 44793
44793: DISABLE
// begin globalGameSaveCounter := 0 ;
44794: LD_ADDR_EXP 27
44798: PUSH
44799: LD_INT 0
44801: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
44802: LD_STRING setGameSaveCounter(0)
44804: PPUSH
44805: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
44809: LD_STRING initStreamRollete();
44811: PPUSH
44812: CALL_OW 559
// InitStreamMode ;
44816: CALL 46142 0 0
// DefineStreamItems ( false ) ;
44820: LD_INT 0
44822: PPUSH
44823: CALL 46606 0 1
// end ;
44827: END
// export function SOS_MapStart ( ) ; begin
44828: LD_INT 0
44830: PPUSH
// if streamModeActive then
44831: LD_EXP 28
44835: IFFALSE 44844
// DefineStreamItems ( true ) ;
44837: LD_INT 1
44839: PPUSH
44840: CALL 46606 0 1
// UpdateLuaVariables ( ) ;
44844: CALL 44861 0 0
// UpdateFactoryWaypoints ( ) ;
44848: CALL 59467 0 0
// UpdateWarehouseGatheringPoints ( ) ;
44852: CALL 59724 0 0
// end ;
44856: LD_VAR 0 1
44860: RET
// function UpdateLuaVariables ( ) ; begin
44861: LD_INT 0
44863: PPUSH
// if globalGameSaveCounter then
44864: LD_EXP 27
44868: IFFALSE 44902
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
44870: LD_ADDR_EXP 27
44874: PUSH
44875: LD_EXP 27
44879: PPUSH
44880: CALL 42118 0 1
44884: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
44885: LD_STRING setGameSaveCounter(
44887: PUSH
44888: LD_EXP 27
44892: STR
44893: PUSH
44894: LD_STRING )
44896: STR
44897: PPUSH
44898: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
44902: LD_STRING setGameDifficulty(
44904: PUSH
44905: LD_OWVAR 67
44909: STR
44910: PUSH
44911: LD_STRING )
44913: STR
44914: PPUSH
44915: CALL_OW 559
// end ;
44919: LD_VAR 0 1
44923: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44924: LD_INT 0
44926: PPUSH
// if p2 = stream_mode then
44927: LD_VAR 0 2
44931: PUSH
44932: LD_INT 100
44934: EQUAL
44935: IFFALSE 45938
// begin if not StreamModeActive then
44937: LD_EXP 28
44941: NOT
44942: IFFALSE 44952
// StreamModeActive := true ;
44944: LD_ADDR_EXP 28
44948: PUSH
44949: LD_INT 1
44951: ST_TO_ADDR
// if p3 = 0 then
44952: LD_VAR 0 3
44956: PUSH
44957: LD_INT 0
44959: EQUAL
44960: IFFALSE 44966
// InitStreamMode ;
44962: CALL 46142 0 0
// if p3 = 1 then
44966: LD_VAR 0 3
44970: PUSH
44971: LD_INT 1
44973: EQUAL
44974: IFFALSE 44984
// sRocket := true ;
44976: LD_ADDR_EXP 33
44980: PUSH
44981: LD_INT 1
44983: ST_TO_ADDR
// if p3 = 2 then
44984: LD_VAR 0 3
44988: PUSH
44989: LD_INT 2
44991: EQUAL
44992: IFFALSE 45002
// sSpeed := true ;
44994: LD_ADDR_EXP 32
44998: PUSH
44999: LD_INT 1
45001: ST_TO_ADDR
// if p3 = 3 then
45002: LD_VAR 0 3
45006: PUSH
45007: LD_INT 3
45009: EQUAL
45010: IFFALSE 45020
// sEngine := true ;
45012: LD_ADDR_EXP 34
45016: PUSH
45017: LD_INT 1
45019: ST_TO_ADDR
// if p3 = 4 then
45020: LD_VAR 0 3
45024: PUSH
45025: LD_INT 4
45027: EQUAL
45028: IFFALSE 45038
// sSpec := true ;
45030: LD_ADDR_EXP 31
45034: PUSH
45035: LD_INT 1
45037: ST_TO_ADDR
// if p3 = 5 then
45038: LD_VAR 0 3
45042: PUSH
45043: LD_INT 5
45045: EQUAL
45046: IFFALSE 45056
// sLevel := true ;
45048: LD_ADDR_EXP 35
45052: PUSH
45053: LD_INT 1
45055: ST_TO_ADDR
// if p3 = 6 then
45056: LD_VAR 0 3
45060: PUSH
45061: LD_INT 6
45063: EQUAL
45064: IFFALSE 45074
// sArmoury := true ;
45066: LD_ADDR_EXP 36
45070: PUSH
45071: LD_INT 1
45073: ST_TO_ADDR
// if p3 = 7 then
45074: LD_VAR 0 3
45078: PUSH
45079: LD_INT 7
45081: EQUAL
45082: IFFALSE 45092
// sRadar := true ;
45084: LD_ADDR_EXP 37
45088: PUSH
45089: LD_INT 1
45091: ST_TO_ADDR
// if p3 = 8 then
45092: LD_VAR 0 3
45096: PUSH
45097: LD_INT 8
45099: EQUAL
45100: IFFALSE 45110
// sBunker := true ;
45102: LD_ADDR_EXP 38
45106: PUSH
45107: LD_INT 1
45109: ST_TO_ADDR
// if p3 = 9 then
45110: LD_VAR 0 3
45114: PUSH
45115: LD_INT 9
45117: EQUAL
45118: IFFALSE 45128
// sHack := true ;
45120: LD_ADDR_EXP 39
45124: PUSH
45125: LD_INT 1
45127: ST_TO_ADDR
// if p3 = 10 then
45128: LD_VAR 0 3
45132: PUSH
45133: LD_INT 10
45135: EQUAL
45136: IFFALSE 45146
// sFire := true ;
45138: LD_ADDR_EXP 40
45142: PUSH
45143: LD_INT 1
45145: ST_TO_ADDR
// if p3 = 11 then
45146: LD_VAR 0 3
45150: PUSH
45151: LD_INT 11
45153: EQUAL
45154: IFFALSE 45164
// sRefresh := true ;
45156: LD_ADDR_EXP 41
45160: PUSH
45161: LD_INT 1
45163: ST_TO_ADDR
// if p3 = 12 then
45164: LD_VAR 0 3
45168: PUSH
45169: LD_INT 12
45171: EQUAL
45172: IFFALSE 45182
// sExp := true ;
45174: LD_ADDR_EXP 42
45178: PUSH
45179: LD_INT 1
45181: ST_TO_ADDR
// if p3 = 13 then
45182: LD_VAR 0 3
45186: PUSH
45187: LD_INT 13
45189: EQUAL
45190: IFFALSE 45200
// sDepot := true ;
45192: LD_ADDR_EXP 43
45196: PUSH
45197: LD_INT 1
45199: ST_TO_ADDR
// if p3 = 14 then
45200: LD_VAR 0 3
45204: PUSH
45205: LD_INT 14
45207: EQUAL
45208: IFFALSE 45218
// sFlag := true ;
45210: LD_ADDR_EXP 44
45214: PUSH
45215: LD_INT 1
45217: ST_TO_ADDR
// if p3 = 15 then
45218: LD_VAR 0 3
45222: PUSH
45223: LD_INT 15
45225: EQUAL
45226: IFFALSE 45236
// sKamikadze := true ;
45228: LD_ADDR_EXP 52
45232: PUSH
45233: LD_INT 1
45235: ST_TO_ADDR
// if p3 = 16 then
45236: LD_VAR 0 3
45240: PUSH
45241: LD_INT 16
45243: EQUAL
45244: IFFALSE 45254
// sTroll := true ;
45246: LD_ADDR_EXP 53
45250: PUSH
45251: LD_INT 1
45253: ST_TO_ADDR
// if p3 = 17 then
45254: LD_VAR 0 3
45258: PUSH
45259: LD_INT 17
45261: EQUAL
45262: IFFALSE 45272
// sSlow := true ;
45264: LD_ADDR_EXP 54
45268: PUSH
45269: LD_INT 1
45271: ST_TO_ADDR
// if p3 = 18 then
45272: LD_VAR 0 3
45276: PUSH
45277: LD_INT 18
45279: EQUAL
45280: IFFALSE 45290
// sLack := true ;
45282: LD_ADDR_EXP 55
45286: PUSH
45287: LD_INT 1
45289: ST_TO_ADDR
// if p3 = 19 then
45290: LD_VAR 0 3
45294: PUSH
45295: LD_INT 19
45297: EQUAL
45298: IFFALSE 45308
// sTank := true ;
45300: LD_ADDR_EXP 57
45304: PUSH
45305: LD_INT 1
45307: ST_TO_ADDR
// if p3 = 20 then
45308: LD_VAR 0 3
45312: PUSH
45313: LD_INT 20
45315: EQUAL
45316: IFFALSE 45326
// sRemote := true ;
45318: LD_ADDR_EXP 58
45322: PUSH
45323: LD_INT 1
45325: ST_TO_ADDR
// if p3 = 21 then
45326: LD_VAR 0 3
45330: PUSH
45331: LD_INT 21
45333: EQUAL
45334: IFFALSE 45344
// sPowell := true ;
45336: LD_ADDR_EXP 59
45340: PUSH
45341: LD_INT 1
45343: ST_TO_ADDR
// if p3 = 22 then
45344: LD_VAR 0 3
45348: PUSH
45349: LD_INT 22
45351: EQUAL
45352: IFFALSE 45362
// sTeleport := true ;
45354: LD_ADDR_EXP 62
45358: PUSH
45359: LD_INT 1
45361: ST_TO_ADDR
// if p3 = 23 then
45362: LD_VAR 0 3
45366: PUSH
45367: LD_INT 23
45369: EQUAL
45370: IFFALSE 45380
// sOilTower := true ;
45372: LD_ADDR_EXP 64
45376: PUSH
45377: LD_INT 1
45379: ST_TO_ADDR
// if p3 = 24 then
45380: LD_VAR 0 3
45384: PUSH
45385: LD_INT 24
45387: EQUAL
45388: IFFALSE 45398
// sShovel := true ;
45390: LD_ADDR_EXP 65
45394: PUSH
45395: LD_INT 1
45397: ST_TO_ADDR
// if p3 = 25 then
45398: LD_VAR 0 3
45402: PUSH
45403: LD_INT 25
45405: EQUAL
45406: IFFALSE 45416
// sSheik := true ;
45408: LD_ADDR_EXP 66
45412: PUSH
45413: LD_INT 1
45415: ST_TO_ADDR
// if p3 = 26 then
45416: LD_VAR 0 3
45420: PUSH
45421: LD_INT 26
45423: EQUAL
45424: IFFALSE 45434
// sEarthquake := true ;
45426: LD_ADDR_EXP 68
45430: PUSH
45431: LD_INT 1
45433: ST_TO_ADDR
// if p3 = 27 then
45434: LD_VAR 0 3
45438: PUSH
45439: LD_INT 27
45441: EQUAL
45442: IFFALSE 45452
// sAI := true ;
45444: LD_ADDR_EXP 69
45448: PUSH
45449: LD_INT 1
45451: ST_TO_ADDR
// if p3 = 28 then
45452: LD_VAR 0 3
45456: PUSH
45457: LD_INT 28
45459: EQUAL
45460: IFFALSE 45470
// sCargo := true ;
45462: LD_ADDR_EXP 72
45466: PUSH
45467: LD_INT 1
45469: ST_TO_ADDR
// if p3 = 29 then
45470: LD_VAR 0 3
45474: PUSH
45475: LD_INT 29
45477: EQUAL
45478: IFFALSE 45488
// sDLaser := true ;
45480: LD_ADDR_EXP 73
45484: PUSH
45485: LD_INT 1
45487: ST_TO_ADDR
// if p3 = 30 then
45488: LD_VAR 0 3
45492: PUSH
45493: LD_INT 30
45495: EQUAL
45496: IFFALSE 45506
// sExchange := true ;
45498: LD_ADDR_EXP 74
45502: PUSH
45503: LD_INT 1
45505: ST_TO_ADDR
// if p3 = 31 then
45506: LD_VAR 0 3
45510: PUSH
45511: LD_INT 31
45513: EQUAL
45514: IFFALSE 45524
// sFac := true ;
45516: LD_ADDR_EXP 75
45520: PUSH
45521: LD_INT 1
45523: ST_TO_ADDR
// if p3 = 32 then
45524: LD_VAR 0 3
45528: PUSH
45529: LD_INT 32
45531: EQUAL
45532: IFFALSE 45542
// sPower := true ;
45534: LD_ADDR_EXP 76
45538: PUSH
45539: LD_INT 1
45541: ST_TO_ADDR
// if p3 = 33 then
45542: LD_VAR 0 3
45546: PUSH
45547: LD_INT 33
45549: EQUAL
45550: IFFALSE 45560
// sRandom := true ;
45552: LD_ADDR_EXP 77
45556: PUSH
45557: LD_INT 1
45559: ST_TO_ADDR
// if p3 = 34 then
45560: LD_VAR 0 3
45564: PUSH
45565: LD_INT 34
45567: EQUAL
45568: IFFALSE 45578
// sShield := true ;
45570: LD_ADDR_EXP 78
45574: PUSH
45575: LD_INT 1
45577: ST_TO_ADDR
// if p3 = 35 then
45578: LD_VAR 0 3
45582: PUSH
45583: LD_INT 35
45585: EQUAL
45586: IFFALSE 45596
// sTime := true ;
45588: LD_ADDR_EXP 79
45592: PUSH
45593: LD_INT 1
45595: ST_TO_ADDR
// if p3 = 36 then
45596: LD_VAR 0 3
45600: PUSH
45601: LD_INT 36
45603: EQUAL
45604: IFFALSE 45614
// sTools := true ;
45606: LD_ADDR_EXP 80
45610: PUSH
45611: LD_INT 1
45613: ST_TO_ADDR
// if p3 = 101 then
45614: LD_VAR 0 3
45618: PUSH
45619: LD_INT 101
45621: EQUAL
45622: IFFALSE 45632
// sSold := true ;
45624: LD_ADDR_EXP 45
45628: PUSH
45629: LD_INT 1
45631: ST_TO_ADDR
// if p3 = 102 then
45632: LD_VAR 0 3
45636: PUSH
45637: LD_INT 102
45639: EQUAL
45640: IFFALSE 45650
// sDiff := true ;
45642: LD_ADDR_EXP 46
45646: PUSH
45647: LD_INT 1
45649: ST_TO_ADDR
// if p3 = 103 then
45650: LD_VAR 0 3
45654: PUSH
45655: LD_INT 103
45657: EQUAL
45658: IFFALSE 45668
// sFog := true ;
45660: LD_ADDR_EXP 49
45664: PUSH
45665: LD_INT 1
45667: ST_TO_ADDR
// if p3 = 104 then
45668: LD_VAR 0 3
45672: PUSH
45673: LD_INT 104
45675: EQUAL
45676: IFFALSE 45686
// sReset := true ;
45678: LD_ADDR_EXP 50
45682: PUSH
45683: LD_INT 1
45685: ST_TO_ADDR
// if p3 = 105 then
45686: LD_VAR 0 3
45690: PUSH
45691: LD_INT 105
45693: EQUAL
45694: IFFALSE 45704
// sSun := true ;
45696: LD_ADDR_EXP 51
45700: PUSH
45701: LD_INT 1
45703: ST_TO_ADDR
// if p3 = 106 then
45704: LD_VAR 0 3
45708: PUSH
45709: LD_INT 106
45711: EQUAL
45712: IFFALSE 45722
// sTiger := true ;
45714: LD_ADDR_EXP 47
45718: PUSH
45719: LD_INT 1
45721: ST_TO_ADDR
// if p3 = 107 then
45722: LD_VAR 0 3
45726: PUSH
45727: LD_INT 107
45729: EQUAL
45730: IFFALSE 45740
// sBomb := true ;
45732: LD_ADDR_EXP 48
45736: PUSH
45737: LD_INT 1
45739: ST_TO_ADDR
// if p3 = 108 then
45740: LD_VAR 0 3
45744: PUSH
45745: LD_INT 108
45747: EQUAL
45748: IFFALSE 45758
// sWound := true ;
45750: LD_ADDR_EXP 56
45754: PUSH
45755: LD_INT 1
45757: ST_TO_ADDR
// if p3 = 109 then
45758: LD_VAR 0 3
45762: PUSH
45763: LD_INT 109
45765: EQUAL
45766: IFFALSE 45776
// sBetray := true ;
45768: LD_ADDR_EXP 60
45772: PUSH
45773: LD_INT 1
45775: ST_TO_ADDR
// if p3 = 110 then
45776: LD_VAR 0 3
45780: PUSH
45781: LD_INT 110
45783: EQUAL
45784: IFFALSE 45794
// sContamin := true ;
45786: LD_ADDR_EXP 61
45790: PUSH
45791: LD_INT 1
45793: ST_TO_ADDR
// if p3 = 111 then
45794: LD_VAR 0 3
45798: PUSH
45799: LD_INT 111
45801: EQUAL
45802: IFFALSE 45812
// sOil := true ;
45804: LD_ADDR_EXP 63
45808: PUSH
45809: LD_INT 1
45811: ST_TO_ADDR
// if p3 = 112 then
45812: LD_VAR 0 3
45816: PUSH
45817: LD_INT 112
45819: EQUAL
45820: IFFALSE 45830
// sStu := true ;
45822: LD_ADDR_EXP 67
45826: PUSH
45827: LD_INT 1
45829: ST_TO_ADDR
// if p3 = 113 then
45830: LD_VAR 0 3
45834: PUSH
45835: LD_INT 113
45837: EQUAL
45838: IFFALSE 45848
// sBazooka := true ;
45840: LD_ADDR_EXP 70
45844: PUSH
45845: LD_INT 1
45847: ST_TO_ADDR
// if p3 = 114 then
45848: LD_VAR 0 3
45852: PUSH
45853: LD_INT 114
45855: EQUAL
45856: IFFALSE 45866
// sMortar := true ;
45858: LD_ADDR_EXP 71
45862: PUSH
45863: LD_INT 1
45865: ST_TO_ADDR
// if p3 = 115 then
45866: LD_VAR 0 3
45870: PUSH
45871: LD_INT 115
45873: EQUAL
45874: IFFALSE 45884
// sRanger := true ;
45876: LD_ADDR_EXP 81
45880: PUSH
45881: LD_INT 1
45883: ST_TO_ADDR
// if p3 = 116 then
45884: LD_VAR 0 3
45888: PUSH
45889: LD_INT 116
45891: EQUAL
45892: IFFALSE 45902
// sComputer := true ;
45894: LD_ADDR_EXP 82
45898: PUSH
45899: LD_INT 1
45901: ST_TO_ADDR
// if p3 = 117 then
45902: LD_VAR 0 3
45906: PUSH
45907: LD_INT 117
45909: EQUAL
45910: IFFALSE 45920
// s30 := true ;
45912: LD_ADDR_EXP 83
45916: PUSH
45917: LD_INT 1
45919: ST_TO_ADDR
// if p3 = 118 then
45920: LD_VAR 0 3
45924: PUSH
45925: LD_INT 118
45927: EQUAL
45928: IFFALSE 45938
// s60 := true ;
45930: LD_ADDR_EXP 84
45934: PUSH
45935: LD_INT 1
45937: ST_TO_ADDR
// end ; if p2 = hack_mode then
45938: LD_VAR 0 2
45942: PUSH
45943: LD_INT 101
45945: EQUAL
45946: IFFALSE 46074
// begin case p3 of 1 :
45948: LD_VAR 0 3
45952: PUSH
45953: LD_INT 1
45955: DOUBLE
45956: EQUAL
45957: IFTRUE 45961
45959: GO 45968
45961: POP
// hHackUnlimitedResources ; 2 :
45962: CALL 58213 0 0
45966: GO 46074
45968: LD_INT 2
45970: DOUBLE
45971: EQUAL
45972: IFTRUE 45976
45974: GO 45983
45976: POP
// hHackSetLevel10 ; 3 :
45977: CALL 58346 0 0
45981: GO 46074
45983: LD_INT 3
45985: DOUBLE
45986: EQUAL
45987: IFTRUE 45991
45989: GO 45998
45991: POP
// hHackSetLevel10YourUnits ; 4 :
45992: CALL 58431 0 0
45996: GO 46074
45998: LD_INT 4
46000: DOUBLE
46001: EQUAL
46002: IFTRUE 46006
46004: GO 46013
46006: POP
// hHackInvincible ; 5 :
46007: CALL 58879 0 0
46011: GO 46074
46013: LD_INT 5
46015: DOUBLE
46016: EQUAL
46017: IFTRUE 46021
46019: GO 46028
46021: POP
// hHackInvisible ; 6 :
46022: CALL 58990 0 0
46026: GO 46074
46028: LD_INT 6
46030: DOUBLE
46031: EQUAL
46032: IFTRUE 46036
46034: GO 46043
46036: POP
// hHackChangeYourSide ; 7 :
46037: CALL 59047 0 0
46041: GO 46074
46043: LD_INT 7
46045: DOUBLE
46046: EQUAL
46047: IFTRUE 46051
46049: GO 46058
46051: POP
// hHackChangeUnitSide ; 8 :
46052: CALL 59089 0 0
46056: GO 46074
46058: LD_INT 8
46060: DOUBLE
46061: EQUAL
46062: IFTRUE 46066
46064: GO 46073
46066: POP
// hHackFog ; end ;
46067: CALL 59190 0 0
46071: GO 46074
46073: POP
// end ; if p2 = game_save_mode then
46074: LD_VAR 0 2
46078: PUSH
46079: LD_INT 102
46081: EQUAL
46082: IFFALSE 46137
// begin if p3 = 1 then
46084: LD_VAR 0 3
46088: PUSH
46089: LD_INT 1
46091: EQUAL
46092: IFFALSE 46104
// globalGameSaveCounter := p4 ;
46094: LD_ADDR_EXP 27
46098: PUSH
46099: LD_VAR 0 4
46103: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
46104: LD_VAR 0 3
46108: PUSH
46109: LD_INT 2
46111: EQUAL
46112: PUSH
46113: LD_EXP 27
46117: AND
46118: IFFALSE 46137
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46120: LD_STRING setGameSaveCounter(
46122: PUSH
46123: LD_EXP 27
46127: STR
46128: PUSH
46129: LD_STRING )
46131: STR
46132: PPUSH
46133: CALL_OW 559
// end ; end ;
46137: LD_VAR 0 7
46141: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
46142: LD_INT 0
46144: PPUSH
// streamModeActive := false ;
46145: LD_ADDR_EXP 28
46149: PUSH
46150: LD_INT 0
46152: ST_TO_ADDR
// normalCounter := 36 ;
46153: LD_ADDR_EXP 29
46157: PUSH
46158: LD_INT 36
46160: ST_TO_ADDR
// hardcoreCounter := 18 ;
46161: LD_ADDR_EXP 30
46165: PUSH
46166: LD_INT 18
46168: ST_TO_ADDR
// sRocket := false ;
46169: LD_ADDR_EXP 33
46173: PUSH
46174: LD_INT 0
46176: ST_TO_ADDR
// sSpeed := false ;
46177: LD_ADDR_EXP 32
46181: PUSH
46182: LD_INT 0
46184: ST_TO_ADDR
// sEngine := false ;
46185: LD_ADDR_EXP 34
46189: PUSH
46190: LD_INT 0
46192: ST_TO_ADDR
// sSpec := false ;
46193: LD_ADDR_EXP 31
46197: PUSH
46198: LD_INT 0
46200: ST_TO_ADDR
// sLevel := false ;
46201: LD_ADDR_EXP 35
46205: PUSH
46206: LD_INT 0
46208: ST_TO_ADDR
// sArmoury := false ;
46209: LD_ADDR_EXP 36
46213: PUSH
46214: LD_INT 0
46216: ST_TO_ADDR
// sRadar := false ;
46217: LD_ADDR_EXP 37
46221: PUSH
46222: LD_INT 0
46224: ST_TO_ADDR
// sBunker := false ;
46225: LD_ADDR_EXP 38
46229: PUSH
46230: LD_INT 0
46232: ST_TO_ADDR
// sHack := false ;
46233: LD_ADDR_EXP 39
46237: PUSH
46238: LD_INT 0
46240: ST_TO_ADDR
// sFire := false ;
46241: LD_ADDR_EXP 40
46245: PUSH
46246: LD_INT 0
46248: ST_TO_ADDR
// sRefresh := false ;
46249: LD_ADDR_EXP 41
46253: PUSH
46254: LD_INT 0
46256: ST_TO_ADDR
// sExp := false ;
46257: LD_ADDR_EXP 42
46261: PUSH
46262: LD_INT 0
46264: ST_TO_ADDR
// sDepot := false ;
46265: LD_ADDR_EXP 43
46269: PUSH
46270: LD_INT 0
46272: ST_TO_ADDR
// sFlag := false ;
46273: LD_ADDR_EXP 44
46277: PUSH
46278: LD_INT 0
46280: ST_TO_ADDR
// sKamikadze := false ;
46281: LD_ADDR_EXP 52
46285: PUSH
46286: LD_INT 0
46288: ST_TO_ADDR
// sTroll := false ;
46289: LD_ADDR_EXP 53
46293: PUSH
46294: LD_INT 0
46296: ST_TO_ADDR
// sSlow := false ;
46297: LD_ADDR_EXP 54
46301: PUSH
46302: LD_INT 0
46304: ST_TO_ADDR
// sLack := false ;
46305: LD_ADDR_EXP 55
46309: PUSH
46310: LD_INT 0
46312: ST_TO_ADDR
// sTank := false ;
46313: LD_ADDR_EXP 57
46317: PUSH
46318: LD_INT 0
46320: ST_TO_ADDR
// sRemote := false ;
46321: LD_ADDR_EXP 58
46325: PUSH
46326: LD_INT 0
46328: ST_TO_ADDR
// sPowell := false ;
46329: LD_ADDR_EXP 59
46333: PUSH
46334: LD_INT 0
46336: ST_TO_ADDR
// sTeleport := false ;
46337: LD_ADDR_EXP 62
46341: PUSH
46342: LD_INT 0
46344: ST_TO_ADDR
// sOilTower := false ;
46345: LD_ADDR_EXP 64
46349: PUSH
46350: LD_INT 0
46352: ST_TO_ADDR
// sShovel := false ;
46353: LD_ADDR_EXP 65
46357: PUSH
46358: LD_INT 0
46360: ST_TO_ADDR
// sSheik := false ;
46361: LD_ADDR_EXP 66
46365: PUSH
46366: LD_INT 0
46368: ST_TO_ADDR
// sEarthquake := false ;
46369: LD_ADDR_EXP 68
46373: PUSH
46374: LD_INT 0
46376: ST_TO_ADDR
// sAI := false ;
46377: LD_ADDR_EXP 69
46381: PUSH
46382: LD_INT 0
46384: ST_TO_ADDR
// sCargo := false ;
46385: LD_ADDR_EXP 72
46389: PUSH
46390: LD_INT 0
46392: ST_TO_ADDR
// sDLaser := false ;
46393: LD_ADDR_EXP 73
46397: PUSH
46398: LD_INT 0
46400: ST_TO_ADDR
// sExchange := false ;
46401: LD_ADDR_EXP 74
46405: PUSH
46406: LD_INT 0
46408: ST_TO_ADDR
// sFac := false ;
46409: LD_ADDR_EXP 75
46413: PUSH
46414: LD_INT 0
46416: ST_TO_ADDR
// sPower := false ;
46417: LD_ADDR_EXP 76
46421: PUSH
46422: LD_INT 0
46424: ST_TO_ADDR
// sRandom := false ;
46425: LD_ADDR_EXP 77
46429: PUSH
46430: LD_INT 0
46432: ST_TO_ADDR
// sShield := false ;
46433: LD_ADDR_EXP 78
46437: PUSH
46438: LD_INT 0
46440: ST_TO_ADDR
// sTime := false ;
46441: LD_ADDR_EXP 79
46445: PUSH
46446: LD_INT 0
46448: ST_TO_ADDR
// sTools := false ;
46449: LD_ADDR_EXP 80
46453: PUSH
46454: LD_INT 0
46456: ST_TO_ADDR
// sSold := false ;
46457: LD_ADDR_EXP 45
46461: PUSH
46462: LD_INT 0
46464: ST_TO_ADDR
// sDiff := false ;
46465: LD_ADDR_EXP 46
46469: PUSH
46470: LD_INT 0
46472: ST_TO_ADDR
// sFog := false ;
46473: LD_ADDR_EXP 49
46477: PUSH
46478: LD_INT 0
46480: ST_TO_ADDR
// sReset := false ;
46481: LD_ADDR_EXP 50
46485: PUSH
46486: LD_INT 0
46488: ST_TO_ADDR
// sSun := false ;
46489: LD_ADDR_EXP 51
46493: PUSH
46494: LD_INT 0
46496: ST_TO_ADDR
// sTiger := false ;
46497: LD_ADDR_EXP 47
46501: PUSH
46502: LD_INT 0
46504: ST_TO_ADDR
// sBomb := false ;
46505: LD_ADDR_EXP 48
46509: PUSH
46510: LD_INT 0
46512: ST_TO_ADDR
// sWound := false ;
46513: LD_ADDR_EXP 56
46517: PUSH
46518: LD_INT 0
46520: ST_TO_ADDR
// sBetray := false ;
46521: LD_ADDR_EXP 60
46525: PUSH
46526: LD_INT 0
46528: ST_TO_ADDR
// sContamin := false ;
46529: LD_ADDR_EXP 61
46533: PUSH
46534: LD_INT 0
46536: ST_TO_ADDR
// sOil := false ;
46537: LD_ADDR_EXP 63
46541: PUSH
46542: LD_INT 0
46544: ST_TO_ADDR
// sStu := false ;
46545: LD_ADDR_EXP 67
46549: PUSH
46550: LD_INT 0
46552: ST_TO_ADDR
// sBazooka := false ;
46553: LD_ADDR_EXP 70
46557: PUSH
46558: LD_INT 0
46560: ST_TO_ADDR
// sMortar := false ;
46561: LD_ADDR_EXP 71
46565: PUSH
46566: LD_INT 0
46568: ST_TO_ADDR
// sRanger := false ;
46569: LD_ADDR_EXP 81
46573: PUSH
46574: LD_INT 0
46576: ST_TO_ADDR
// sComputer := false ;
46577: LD_ADDR_EXP 82
46581: PUSH
46582: LD_INT 0
46584: ST_TO_ADDR
// s30 := false ;
46585: LD_ADDR_EXP 83
46589: PUSH
46590: LD_INT 0
46592: ST_TO_ADDR
// s60 := false ;
46593: LD_ADDR_EXP 84
46597: PUSH
46598: LD_INT 0
46600: ST_TO_ADDR
// end ;
46601: LD_VAR 0 1
46605: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
46606: LD_INT 0
46608: PPUSH
46609: PPUSH
46610: PPUSH
46611: PPUSH
46612: PPUSH
46613: PPUSH
46614: PPUSH
// result := [ ] ;
46615: LD_ADDR_VAR 0 2
46619: PUSH
46620: EMPTY
46621: ST_TO_ADDR
// if campaign_id = 1 then
46622: LD_OWVAR 69
46626: PUSH
46627: LD_INT 1
46629: EQUAL
46630: IFFALSE 49796
// begin case mission_number of 1 :
46632: LD_OWVAR 70
46636: PUSH
46637: LD_INT 1
46639: DOUBLE
46640: EQUAL
46641: IFTRUE 46645
46643: GO 46721
46645: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
46646: LD_ADDR_VAR 0 2
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 11
46659: PUSH
46660: LD_INT 12
46662: PUSH
46663: LD_INT 15
46665: PUSH
46666: LD_INT 16
46668: PUSH
46669: LD_INT 22
46671: PUSH
46672: LD_INT 23
46674: PUSH
46675: LD_INT 26
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 101
46691: PUSH
46692: LD_INT 102
46694: PUSH
46695: LD_INT 106
46697: PUSH
46698: LD_INT 116
46700: PUSH
46701: LD_INT 117
46703: PUSH
46704: LD_INT 118
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: ST_TO_ADDR
46719: GO 49794
46721: LD_INT 2
46723: DOUBLE
46724: EQUAL
46725: IFTRUE 46729
46727: GO 46813
46729: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
46730: LD_ADDR_VAR 0 2
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 4
46740: PUSH
46741: LD_INT 11
46743: PUSH
46744: LD_INT 12
46746: PUSH
46747: LD_INT 15
46749: PUSH
46750: LD_INT 16
46752: PUSH
46753: LD_INT 22
46755: PUSH
46756: LD_INT 23
46758: PUSH
46759: LD_INT 26
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 101
46775: PUSH
46776: LD_INT 102
46778: PUSH
46779: LD_INT 105
46781: PUSH
46782: LD_INT 106
46784: PUSH
46785: LD_INT 108
46787: PUSH
46788: LD_INT 116
46790: PUSH
46791: LD_INT 117
46793: PUSH
46794: LD_INT 118
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: ST_TO_ADDR
46811: GO 49794
46813: LD_INT 3
46815: DOUBLE
46816: EQUAL
46817: IFTRUE 46821
46819: GO 46909
46821: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46822: LD_ADDR_VAR 0 2
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: LD_INT 5
46835: PUSH
46836: LD_INT 11
46838: PUSH
46839: LD_INT 12
46841: PUSH
46842: LD_INT 15
46844: PUSH
46845: LD_INT 16
46847: PUSH
46848: LD_INT 22
46850: PUSH
46851: LD_INT 26
46853: PUSH
46854: LD_INT 36
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 101
46871: PUSH
46872: LD_INT 102
46874: PUSH
46875: LD_INT 105
46877: PUSH
46878: LD_INT 106
46880: PUSH
46881: LD_INT 108
46883: PUSH
46884: LD_INT 116
46886: PUSH
46887: LD_INT 117
46889: PUSH
46890: LD_INT 118
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: ST_TO_ADDR
46907: GO 49794
46909: LD_INT 4
46911: DOUBLE
46912: EQUAL
46913: IFTRUE 46917
46915: GO 47013
46917: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
46918: LD_ADDR_VAR 0 2
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 4
46928: PUSH
46929: LD_INT 5
46931: PUSH
46932: LD_INT 8
46934: PUSH
46935: LD_INT 11
46937: PUSH
46938: LD_INT 12
46940: PUSH
46941: LD_INT 15
46943: PUSH
46944: LD_INT 16
46946: PUSH
46947: LD_INT 22
46949: PUSH
46950: LD_INT 23
46952: PUSH
46953: LD_INT 26
46955: PUSH
46956: LD_INT 36
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 101
46975: PUSH
46976: LD_INT 102
46978: PUSH
46979: LD_INT 105
46981: PUSH
46982: LD_INT 106
46984: PUSH
46985: LD_INT 108
46987: PUSH
46988: LD_INT 116
46990: PUSH
46991: LD_INT 117
46993: PUSH
46994: LD_INT 118
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: ST_TO_ADDR
47011: GO 49794
47013: LD_INT 5
47015: DOUBLE
47016: EQUAL
47017: IFTRUE 47021
47019: GO 47133
47021: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47022: LD_ADDR_VAR 0 2
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 4
47032: PUSH
47033: LD_INT 5
47035: PUSH
47036: LD_INT 6
47038: PUSH
47039: LD_INT 8
47041: PUSH
47042: LD_INT 11
47044: PUSH
47045: LD_INT 12
47047: PUSH
47048: LD_INT 15
47050: PUSH
47051: LD_INT 16
47053: PUSH
47054: LD_INT 22
47056: PUSH
47057: LD_INT 23
47059: PUSH
47060: LD_INT 25
47062: PUSH
47063: LD_INT 26
47065: PUSH
47066: LD_INT 36
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 101
47087: PUSH
47088: LD_INT 102
47090: PUSH
47091: LD_INT 105
47093: PUSH
47094: LD_INT 106
47096: PUSH
47097: LD_INT 108
47099: PUSH
47100: LD_INT 109
47102: PUSH
47103: LD_INT 112
47105: PUSH
47106: LD_INT 116
47108: PUSH
47109: LD_INT 117
47111: PUSH
47112: LD_INT 118
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: ST_TO_ADDR
47131: GO 49794
47133: LD_INT 6
47135: DOUBLE
47136: EQUAL
47137: IFTRUE 47141
47139: GO 47273
47141: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47142: LD_ADDR_VAR 0 2
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: LD_INT 5
47155: PUSH
47156: LD_INT 6
47158: PUSH
47159: LD_INT 8
47161: PUSH
47162: LD_INT 11
47164: PUSH
47165: LD_INT 12
47167: PUSH
47168: LD_INT 15
47170: PUSH
47171: LD_INT 16
47173: PUSH
47174: LD_INT 20
47176: PUSH
47177: LD_INT 21
47179: PUSH
47180: LD_INT 22
47182: PUSH
47183: LD_INT 23
47185: PUSH
47186: LD_INT 25
47188: PUSH
47189: LD_INT 26
47191: PUSH
47192: LD_INT 30
47194: PUSH
47195: LD_INT 31
47197: PUSH
47198: LD_INT 32
47200: PUSH
47201: LD_INT 36
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 101
47227: PUSH
47228: LD_INT 102
47230: PUSH
47231: LD_INT 105
47233: PUSH
47234: LD_INT 106
47236: PUSH
47237: LD_INT 108
47239: PUSH
47240: LD_INT 109
47242: PUSH
47243: LD_INT 112
47245: PUSH
47246: LD_INT 116
47248: PUSH
47249: LD_INT 117
47251: PUSH
47252: LD_INT 118
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: ST_TO_ADDR
47271: GO 49794
47273: LD_INT 7
47275: DOUBLE
47276: EQUAL
47277: IFTRUE 47281
47279: GO 47393
47281: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47282: LD_ADDR_VAR 0 2
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 4
47292: PUSH
47293: LD_INT 5
47295: PUSH
47296: LD_INT 7
47298: PUSH
47299: LD_INT 11
47301: PUSH
47302: LD_INT 12
47304: PUSH
47305: LD_INT 15
47307: PUSH
47308: LD_INT 16
47310: PUSH
47311: LD_INT 20
47313: PUSH
47314: LD_INT 21
47316: PUSH
47317: LD_INT 22
47319: PUSH
47320: LD_INT 23
47322: PUSH
47323: LD_INT 25
47325: PUSH
47326: LD_INT 26
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 101
47347: PUSH
47348: LD_INT 102
47350: PUSH
47351: LD_INT 103
47353: PUSH
47354: LD_INT 105
47356: PUSH
47357: LD_INT 106
47359: PUSH
47360: LD_INT 108
47362: PUSH
47363: LD_INT 112
47365: PUSH
47366: LD_INT 116
47368: PUSH
47369: LD_INT 117
47371: PUSH
47372: LD_INT 118
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: ST_TO_ADDR
47391: GO 49794
47393: LD_INT 8
47395: DOUBLE
47396: EQUAL
47397: IFTRUE 47401
47399: GO 47541
47401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47402: LD_ADDR_VAR 0 2
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 4
47412: PUSH
47413: LD_INT 5
47415: PUSH
47416: LD_INT 6
47418: PUSH
47419: LD_INT 7
47421: PUSH
47422: LD_INT 8
47424: PUSH
47425: LD_INT 11
47427: PUSH
47428: LD_INT 12
47430: PUSH
47431: LD_INT 15
47433: PUSH
47434: LD_INT 16
47436: PUSH
47437: LD_INT 20
47439: PUSH
47440: LD_INT 21
47442: PUSH
47443: LD_INT 22
47445: PUSH
47446: LD_INT 23
47448: PUSH
47449: LD_INT 25
47451: PUSH
47452: LD_INT 26
47454: PUSH
47455: LD_INT 30
47457: PUSH
47458: LD_INT 31
47460: PUSH
47461: LD_INT 32
47463: PUSH
47464: LD_INT 36
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 101
47491: PUSH
47492: LD_INT 102
47494: PUSH
47495: LD_INT 103
47497: PUSH
47498: LD_INT 105
47500: PUSH
47501: LD_INT 106
47503: PUSH
47504: LD_INT 108
47506: PUSH
47507: LD_INT 109
47509: PUSH
47510: LD_INT 112
47512: PUSH
47513: LD_INT 116
47515: PUSH
47516: LD_INT 117
47518: PUSH
47519: LD_INT 118
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: ST_TO_ADDR
47539: GO 49794
47541: LD_INT 9
47543: DOUBLE
47544: EQUAL
47545: IFTRUE 47549
47547: GO 47697
47549: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47550: LD_ADDR_VAR 0 2
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 4
47560: PUSH
47561: LD_INT 5
47563: PUSH
47564: LD_INT 6
47566: PUSH
47567: LD_INT 7
47569: PUSH
47570: LD_INT 8
47572: PUSH
47573: LD_INT 11
47575: PUSH
47576: LD_INT 12
47578: PUSH
47579: LD_INT 15
47581: PUSH
47582: LD_INT 16
47584: PUSH
47585: LD_INT 20
47587: PUSH
47588: LD_INT 21
47590: PUSH
47591: LD_INT 22
47593: PUSH
47594: LD_INT 23
47596: PUSH
47597: LD_INT 25
47599: PUSH
47600: LD_INT 26
47602: PUSH
47603: LD_INT 28
47605: PUSH
47606: LD_INT 30
47608: PUSH
47609: LD_INT 31
47611: PUSH
47612: LD_INT 32
47614: PUSH
47615: LD_INT 36
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 101
47643: PUSH
47644: LD_INT 102
47646: PUSH
47647: LD_INT 103
47649: PUSH
47650: LD_INT 105
47652: PUSH
47653: LD_INT 106
47655: PUSH
47656: LD_INT 108
47658: PUSH
47659: LD_INT 109
47661: PUSH
47662: LD_INT 112
47664: PUSH
47665: LD_INT 114
47667: PUSH
47668: LD_INT 116
47670: PUSH
47671: LD_INT 117
47673: PUSH
47674: LD_INT 118
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: ST_TO_ADDR
47695: GO 49794
47697: LD_INT 10
47699: DOUBLE
47700: EQUAL
47701: IFTRUE 47705
47703: GO 47901
47705: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
47706: LD_ADDR_VAR 0 2
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 4
47716: PUSH
47717: LD_INT 5
47719: PUSH
47720: LD_INT 6
47722: PUSH
47723: LD_INT 7
47725: PUSH
47726: LD_INT 8
47728: PUSH
47729: LD_INT 9
47731: PUSH
47732: LD_INT 10
47734: PUSH
47735: LD_INT 11
47737: PUSH
47738: LD_INT 12
47740: PUSH
47741: LD_INT 13
47743: PUSH
47744: LD_INT 14
47746: PUSH
47747: LD_INT 15
47749: PUSH
47750: LD_INT 16
47752: PUSH
47753: LD_INT 17
47755: PUSH
47756: LD_INT 18
47758: PUSH
47759: LD_INT 19
47761: PUSH
47762: LD_INT 20
47764: PUSH
47765: LD_INT 21
47767: PUSH
47768: LD_INT 22
47770: PUSH
47771: LD_INT 23
47773: PUSH
47774: LD_INT 24
47776: PUSH
47777: LD_INT 25
47779: PUSH
47780: LD_INT 26
47782: PUSH
47783: LD_INT 28
47785: PUSH
47786: LD_INT 30
47788: PUSH
47789: LD_INT 31
47791: PUSH
47792: LD_INT 32
47794: PUSH
47795: LD_INT 36
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 101
47831: PUSH
47832: LD_INT 102
47834: PUSH
47835: LD_INT 103
47837: PUSH
47838: LD_INT 104
47840: PUSH
47841: LD_INT 105
47843: PUSH
47844: LD_INT 106
47846: PUSH
47847: LD_INT 107
47849: PUSH
47850: LD_INT 108
47852: PUSH
47853: LD_INT 109
47855: PUSH
47856: LD_INT 110
47858: PUSH
47859: LD_INT 111
47861: PUSH
47862: LD_INT 112
47864: PUSH
47865: LD_INT 114
47867: PUSH
47868: LD_INT 116
47870: PUSH
47871: LD_INT 117
47873: PUSH
47874: LD_INT 118
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: ST_TO_ADDR
47899: GO 49794
47901: LD_INT 11
47903: DOUBLE
47904: EQUAL
47905: IFTRUE 47909
47907: GO 48113
47909: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
47910: LD_ADDR_VAR 0 2
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: LD_INT 4
47923: PUSH
47924: LD_INT 5
47926: PUSH
47927: LD_INT 6
47929: PUSH
47930: LD_INT 7
47932: PUSH
47933: LD_INT 8
47935: PUSH
47936: LD_INT 9
47938: PUSH
47939: LD_INT 10
47941: PUSH
47942: LD_INT 11
47944: PUSH
47945: LD_INT 12
47947: PUSH
47948: LD_INT 13
47950: PUSH
47951: LD_INT 14
47953: PUSH
47954: LD_INT 15
47956: PUSH
47957: LD_INT 16
47959: PUSH
47960: LD_INT 17
47962: PUSH
47963: LD_INT 18
47965: PUSH
47966: LD_INT 19
47968: PUSH
47969: LD_INT 20
47971: PUSH
47972: LD_INT 21
47974: PUSH
47975: LD_INT 22
47977: PUSH
47978: LD_INT 23
47980: PUSH
47981: LD_INT 24
47983: PUSH
47984: LD_INT 25
47986: PUSH
47987: LD_INT 26
47989: PUSH
47990: LD_INT 28
47992: PUSH
47993: LD_INT 30
47995: PUSH
47996: LD_INT 31
47998: PUSH
47999: LD_INT 32
48001: PUSH
48002: LD_INT 34
48004: PUSH
48005: LD_INT 36
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 101
48043: PUSH
48044: LD_INT 102
48046: PUSH
48047: LD_INT 103
48049: PUSH
48050: LD_INT 104
48052: PUSH
48053: LD_INT 105
48055: PUSH
48056: LD_INT 106
48058: PUSH
48059: LD_INT 107
48061: PUSH
48062: LD_INT 108
48064: PUSH
48065: LD_INT 109
48067: PUSH
48068: LD_INT 110
48070: PUSH
48071: LD_INT 111
48073: PUSH
48074: LD_INT 112
48076: PUSH
48077: LD_INT 114
48079: PUSH
48080: LD_INT 116
48082: PUSH
48083: LD_INT 117
48085: PUSH
48086: LD_INT 118
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: ST_TO_ADDR
48111: GO 49794
48113: LD_INT 12
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48121
48119: GO 48341
48121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48122: LD_ADDR_VAR 0 2
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 4
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 6
48144: PUSH
48145: LD_INT 7
48147: PUSH
48148: LD_INT 8
48150: PUSH
48151: LD_INT 9
48153: PUSH
48154: LD_INT 10
48156: PUSH
48157: LD_INT 11
48159: PUSH
48160: LD_INT 12
48162: PUSH
48163: LD_INT 13
48165: PUSH
48166: LD_INT 14
48168: PUSH
48169: LD_INT 15
48171: PUSH
48172: LD_INT 16
48174: PUSH
48175: LD_INT 17
48177: PUSH
48178: LD_INT 18
48180: PUSH
48181: LD_INT 19
48183: PUSH
48184: LD_INT 20
48186: PUSH
48187: LD_INT 21
48189: PUSH
48190: LD_INT 22
48192: PUSH
48193: LD_INT 23
48195: PUSH
48196: LD_INT 24
48198: PUSH
48199: LD_INT 25
48201: PUSH
48202: LD_INT 26
48204: PUSH
48205: LD_INT 27
48207: PUSH
48208: LD_INT 28
48210: PUSH
48211: LD_INT 30
48213: PUSH
48214: LD_INT 31
48216: PUSH
48217: LD_INT 32
48219: PUSH
48220: LD_INT 33
48222: PUSH
48223: LD_INT 34
48225: PUSH
48226: LD_INT 36
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 101
48267: PUSH
48268: LD_INT 102
48270: PUSH
48271: LD_INT 103
48273: PUSH
48274: LD_INT 104
48276: PUSH
48277: LD_INT 105
48279: PUSH
48280: LD_INT 106
48282: PUSH
48283: LD_INT 107
48285: PUSH
48286: LD_INT 108
48288: PUSH
48289: LD_INT 109
48291: PUSH
48292: LD_INT 110
48294: PUSH
48295: LD_INT 111
48297: PUSH
48298: LD_INT 112
48300: PUSH
48301: LD_INT 113
48303: PUSH
48304: LD_INT 114
48306: PUSH
48307: LD_INT 116
48309: PUSH
48310: LD_INT 117
48312: PUSH
48313: LD_INT 118
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: ST_TO_ADDR
48339: GO 49794
48341: LD_INT 13
48343: DOUBLE
48344: EQUAL
48345: IFTRUE 48349
48347: GO 48557
48349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48350: LD_ADDR_VAR 0 2
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 4
48366: PUSH
48367: LD_INT 5
48369: PUSH
48370: LD_INT 8
48372: PUSH
48373: LD_INT 9
48375: PUSH
48376: LD_INT 10
48378: PUSH
48379: LD_INT 11
48381: PUSH
48382: LD_INT 12
48384: PUSH
48385: LD_INT 14
48387: PUSH
48388: LD_INT 15
48390: PUSH
48391: LD_INT 16
48393: PUSH
48394: LD_INT 17
48396: PUSH
48397: LD_INT 18
48399: PUSH
48400: LD_INT 19
48402: PUSH
48403: LD_INT 20
48405: PUSH
48406: LD_INT 21
48408: PUSH
48409: LD_INT 22
48411: PUSH
48412: LD_INT 23
48414: PUSH
48415: LD_INT 24
48417: PUSH
48418: LD_INT 25
48420: PUSH
48421: LD_INT 26
48423: PUSH
48424: LD_INT 27
48426: PUSH
48427: LD_INT 28
48429: PUSH
48430: LD_INT 30
48432: PUSH
48433: LD_INT 31
48435: PUSH
48436: LD_INT 32
48438: PUSH
48439: LD_INT 33
48441: PUSH
48442: LD_INT 34
48444: PUSH
48445: LD_INT 36
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 101
48483: PUSH
48484: LD_INT 102
48486: PUSH
48487: LD_INT 103
48489: PUSH
48490: LD_INT 104
48492: PUSH
48493: LD_INT 105
48495: PUSH
48496: LD_INT 106
48498: PUSH
48499: LD_INT 107
48501: PUSH
48502: LD_INT 108
48504: PUSH
48505: LD_INT 109
48507: PUSH
48508: LD_INT 110
48510: PUSH
48511: LD_INT 111
48513: PUSH
48514: LD_INT 112
48516: PUSH
48517: LD_INT 113
48519: PUSH
48520: LD_INT 114
48522: PUSH
48523: LD_INT 116
48525: PUSH
48526: LD_INT 117
48528: PUSH
48529: LD_INT 118
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: ST_TO_ADDR
48555: GO 49794
48557: LD_INT 14
48559: DOUBLE
48560: EQUAL
48561: IFTRUE 48565
48563: GO 48789
48565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48566: LD_ADDR_VAR 0 2
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: LD_INT 4
48582: PUSH
48583: LD_INT 5
48585: PUSH
48586: LD_INT 6
48588: PUSH
48589: LD_INT 7
48591: PUSH
48592: LD_INT 8
48594: PUSH
48595: LD_INT 9
48597: PUSH
48598: LD_INT 10
48600: PUSH
48601: LD_INT 11
48603: PUSH
48604: LD_INT 12
48606: PUSH
48607: LD_INT 13
48609: PUSH
48610: LD_INT 14
48612: PUSH
48613: LD_INT 15
48615: PUSH
48616: LD_INT 16
48618: PUSH
48619: LD_INT 17
48621: PUSH
48622: LD_INT 18
48624: PUSH
48625: LD_INT 19
48627: PUSH
48628: LD_INT 20
48630: PUSH
48631: LD_INT 21
48633: PUSH
48634: LD_INT 22
48636: PUSH
48637: LD_INT 23
48639: PUSH
48640: LD_INT 24
48642: PUSH
48643: LD_INT 25
48645: PUSH
48646: LD_INT 26
48648: PUSH
48649: LD_INT 27
48651: PUSH
48652: LD_INT 28
48654: PUSH
48655: LD_INT 29
48657: PUSH
48658: LD_INT 30
48660: PUSH
48661: LD_INT 31
48663: PUSH
48664: LD_INT 32
48666: PUSH
48667: LD_INT 33
48669: PUSH
48670: LD_INT 34
48672: PUSH
48673: LD_INT 36
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 101
48715: PUSH
48716: LD_INT 102
48718: PUSH
48719: LD_INT 103
48721: PUSH
48722: LD_INT 104
48724: PUSH
48725: LD_INT 105
48727: PUSH
48728: LD_INT 106
48730: PUSH
48731: LD_INT 107
48733: PUSH
48734: LD_INT 108
48736: PUSH
48737: LD_INT 109
48739: PUSH
48740: LD_INT 110
48742: PUSH
48743: LD_INT 111
48745: PUSH
48746: LD_INT 112
48748: PUSH
48749: LD_INT 113
48751: PUSH
48752: LD_INT 114
48754: PUSH
48755: LD_INT 116
48757: PUSH
48758: LD_INT 117
48760: PUSH
48761: LD_INT 118
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: ST_TO_ADDR
48787: GO 49794
48789: LD_INT 15
48791: DOUBLE
48792: EQUAL
48793: IFTRUE 48797
48795: GO 49021
48797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48798: LD_ADDR_VAR 0 2
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 3
48811: PUSH
48812: LD_INT 4
48814: PUSH
48815: LD_INT 5
48817: PUSH
48818: LD_INT 6
48820: PUSH
48821: LD_INT 7
48823: PUSH
48824: LD_INT 8
48826: PUSH
48827: LD_INT 9
48829: PUSH
48830: LD_INT 10
48832: PUSH
48833: LD_INT 11
48835: PUSH
48836: LD_INT 12
48838: PUSH
48839: LD_INT 13
48841: PUSH
48842: LD_INT 14
48844: PUSH
48845: LD_INT 15
48847: PUSH
48848: LD_INT 16
48850: PUSH
48851: LD_INT 17
48853: PUSH
48854: LD_INT 18
48856: PUSH
48857: LD_INT 19
48859: PUSH
48860: LD_INT 20
48862: PUSH
48863: LD_INT 21
48865: PUSH
48866: LD_INT 22
48868: PUSH
48869: LD_INT 23
48871: PUSH
48872: LD_INT 24
48874: PUSH
48875: LD_INT 25
48877: PUSH
48878: LD_INT 26
48880: PUSH
48881: LD_INT 27
48883: PUSH
48884: LD_INT 28
48886: PUSH
48887: LD_INT 29
48889: PUSH
48890: LD_INT 30
48892: PUSH
48893: LD_INT 31
48895: PUSH
48896: LD_INT 32
48898: PUSH
48899: LD_INT 33
48901: PUSH
48902: LD_INT 34
48904: PUSH
48905: LD_INT 36
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 101
48947: PUSH
48948: LD_INT 102
48950: PUSH
48951: LD_INT 103
48953: PUSH
48954: LD_INT 104
48956: PUSH
48957: LD_INT 105
48959: PUSH
48960: LD_INT 106
48962: PUSH
48963: LD_INT 107
48965: PUSH
48966: LD_INT 108
48968: PUSH
48969: LD_INT 109
48971: PUSH
48972: LD_INT 110
48974: PUSH
48975: LD_INT 111
48977: PUSH
48978: LD_INT 112
48980: PUSH
48981: LD_INT 113
48983: PUSH
48984: LD_INT 114
48986: PUSH
48987: LD_INT 116
48989: PUSH
48990: LD_INT 117
48992: PUSH
48993: LD_INT 118
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: ST_TO_ADDR
49019: GO 49794
49021: LD_INT 16
49023: DOUBLE
49024: EQUAL
49025: IFTRUE 49029
49027: GO 49165
49029: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49030: LD_ADDR_VAR 0 2
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: LD_INT 4
49040: PUSH
49041: LD_INT 5
49043: PUSH
49044: LD_INT 7
49046: PUSH
49047: LD_INT 11
49049: PUSH
49050: LD_INT 12
49052: PUSH
49053: LD_INT 15
49055: PUSH
49056: LD_INT 16
49058: PUSH
49059: LD_INT 20
49061: PUSH
49062: LD_INT 21
49064: PUSH
49065: LD_INT 22
49067: PUSH
49068: LD_INT 23
49070: PUSH
49071: LD_INT 25
49073: PUSH
49074: LD_INT 26
49076: PUSH
49077: LD_INT 30
49079: PUSH
49080: LD_INT 31
49082: PUSH
49083: LD_INT 32
49085: PUSH
49086: LD_INT 33
49088: PUSH
49089: LD_INT 34
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 101
49115: PUSH
49116: LD_INT 102
49118: PUSH
49119: LD_INT 103
49121: PUSH
49122: LD_INT 106
49124: PUSH
49125: LD_INT 108
49127: PUSH
49128: LD_INT 112
49130: PUSH
49131: LD_INT 113
49133: PUSH
49134: LD_INT 114
49136: PUSH
49137: LD_INT 116
49139: PUSH
49140: LD_INT 117
49142: PUSH
49143: LD_INT 118
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: ST_TO_ADDR
49163: GO 49794
49165: LD_INT 17
49167: DOUBLE
49168: EQUAL
49169: IFTRUE 49173
49171: GO 49397
49173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49174: LD_ADDR_VAR 0 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 4
49190: PUSH
49191: LD_INT 5
49193: PUSH
49194: LD_INT 6
49196: PUSH
49197: LD_INT 7
49199: PUSH
49200: LD_INT 8
49202: PUSH
49203: LD_INT 9
49205: PUSH
49206: LD_INT 10
49208: PUSH
49209: LD_INT 11
49211: PUSH
49212: LD_INT 12
49214: PUSH
49215: LD_INT 13
49217: PUSH
49218: LD_INT 14
49220: PUSH
49221: LD_INT 15
49223: PUSH
49224: LD_INT 16
49226: PUSH
49227: LD_INT 17
49229: PUSH
49230: LD_INT 18
49232: PUSH
49233: LD_INT 19
49235: PUSH
49236: LD_INT 20
49238: PUSH
49239: LD_INT 21
49241: PUSH
49242: LD_INT 22
49244: PUSH
49245: LD_INT 23
49247: PUSH
49248: LD_INT 24
49250: PUSH
49251: LD_INT 25
49253: PUSH
49254: LD_INT 26
49256: PUSH
49257: LD_INT 27
49259: PUSH
49260: LD_INT 28
49262: PUSH
49263: LD_INT 29
49265: PUSH
49266: LD_INT 30
49268: PUSH
49269: LD_INT 31
49271: PUSH
49272: LD_INT 32
49274: PUSH
49275: LD_INT 33
49277: PUSH
49278: LD_INT 34
49280: PUSH
49281: LD_INT 36
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 101
49323: PUSH
49324: LD_INT 102
49326: PUSH
49327: LD_INT 103
49329: PUSH
49330: LD_INT 104
49332: PUSH
49333: LD_INT 105
49335: PUSH
49336: LD_INT 106
49338: PUSH
49339: LD_INT 107
49341: PUSH
49342: LD_INT 108
49344: PUSH
49345: LD_INT 109
49347: PUSH
49348: LD_INT 110
49350: PUSH
49351: LD_INT 111
49353: PUSH
49354: LD_INT 112
49356: PUSH
49357: LD_INT 113
49359: PUSH
49360: LD_INT 114
49362: PUSH
49363: LD_INT 116
49365: PUSH
49366: LD_INT 117
49368: PUSH
49369: LD_INT 118
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: ST_TO_ADDR
49395: GO 49794
49397: LD_INT 18
49399: DOUBLE
49400: EQUAL
49401: IFTRUE 49405
49403: GO 49553
49405: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49406: LD_ADDR_VAR 0 2
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 4
49416: PUSH
49417: LD_INT 5
49419: PUSH
49420: LD_INT 7
49422: PUSH
49423: LD_INT 11
49425: PUSH
49426: LD_INT 12
49428: PUSH
49429: LD_INT 15
49431: PUSH
49432: LD_INT 16
49434: PUSH
49435: LD_INT 20
49437: PUSH
49438: LD_INT 21
49440: PUSH
49441: LD_INT 22
49443: PUSH
49444: LD_INT 23
49446: PUSH
49447: LD_INT 25
49449: PUSH
49450: LD_INT 26
49452: PUSH
49453: LD_INT 30
49455: PUSH
49456: LD_INT 31
49458: PUSH
49459: LD_INT 32
49461: PUSH
49462: LD_INT 33
49464: PUSH
49465: LD_INT 34
49467: PUSH
49468: LD_INT 35
49470: PUSH
49471: LD_INT 36
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 101
49499: PUSH
49500: LD_INT 102
49502: PUSH
49503: LD_INT 103
49505: PUSH
49506: LD_INT 106
49508: PUSH
49509: LD_INT 108
49511: PUSH
49512: LD_INT 112
49514: PUSH
49515: LD_INT 113
49517: PUSH
49518: LD_INT 114
49520: PUSH
49521: LD_INT 115
49523: PUSH
49524: LD_INT 116
49526: PUSH
49527: LD_INT 117
49529: PUSH
49530: LD_INT 118
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: ST_TO_ADDR
49551: GO 49794
49553: LD_INT 19
49555: DOUBLE
49556: EQUAL
49557: IFTRUE 49561
49559: GO 49793
49561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49562: LD_ADDR_VAR 0 2
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 4
49578: PUSH
49579: LD_INT 5
49581: PUSH
49582: LD_INT 6
49584: PUSH
49585: LD_INT 7
49587: PUSH
49588: LD_INT 8
49590: PUSH
49591: LD_INT 9
49593: PUSH
49594: LD_INT 10
49596: PUSH
49597: LD_INT 11
49599: PUSH
49600: LD_INT 12
49602: PUSH
49603: LD_INT 13
49605: PUSH
49606: LD_INT 14
49608: PUSH
49609: LD_INT 15
49611: PUSH
49612: LD_INT 16
49614: PUSH
49615: LD_INT 17
49617: PUSH
49618: LD_INT 18
49620: PUSH
49621: LD_INT 19
49623: PUSH
49624: LD_INT 20
49626: PUSH
49627: LD_INT 21
49629: PUSH
49630: LD_INT 22
49632: PUSH
49633: LD_INT 23
49635: PUSH
49636: LD_INT 24
49638: PUSH
49639: LD_INT 25
49641: PUSH
49642: LD_INT 26
49644: PUSH
49645: LD_INT 27
49647: PUSH
49648: LD_INT 28
49650: PUSH
49651: LD_INT 29
49653: PUSH
49654: LD_INT 30
49656: PUSH
49657: LD_INT 31
49659: PUSH
49660: LD_INT 32
49662: PUSH
49663: LD_INT 33
49665: PUSH
49666: LD_INT 34
49668: PUSH
49669: LD_INT 35
49671: PUSH
49672: LD_INT 36
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 101
49715: PUSH
49716: LD_INT 102
49718: PUSH
49719: LD_INT 103
49721: PUSH
49722: LD_INT 104
49724: PUSH
49725: LD_INT 105
49727: PUSH
49728: LD_INT 106
49730: PUSH
49731: LD_INT 107
49733: PUSH
49734: LD_INT 108
49736: PUSH
49737: LD_INT 109
49739: PUSH
49740: LD_INT 110
49742: PUSH
49743: LD_INT 111
49745: PUSH
49746: LD_INT 112
49748: PUSH
49749: LD_INT 113
49751: PUSH
49752: LD_INT 114
49754: PUSH
49755: LD_INT 115
49757: PUSH
49758: LD_INT 116
49760: PUSH
49761: LD_INT 117
49763: PUSH
49764: LD_INT 118
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: ST_TO_ADDR
49791: GO 49794
49793: POP
// end else
49794: GO 50025
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49796: LD_ADDR_VAR 0 2
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: LD_INT 3
49809: PUSH
49810: LD_INT 4
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: LD_INT 6
49818: PUSH
49819: LD_INT 7
49821: PUSH
49822: LD_INT 8
49824: PUSH
49825: LD_INT 9
49827: PUSH
49828: LD_INT 10
49830: PUSH
49831: LD_INT 11
49833: PUSH
49834: LD_INT 12
49836: PUSH
49837: LD_INT 13
49839: PUSH
49840: LD_INT 14
49842: PUSH
49843: LD_INT 15
49845: PUSH
49846: LD_INT 16
49848: PUSH
49849: LD_INT 17
49851: PUSH
49852: LD_INT 18
49854: PUSH
49855: LD_INT 19
49857: PUSH
49858: LD_INT 20
49860: PUSH
49861: LD_INT 21
49863: PUSH
49864: LD_INT 22
49866: PUSH
49867: LD_INT 23
49869: PUSH
49870: LD_INT 24
49872: PUSH
49873: LD_INT 25
49875: PUSH
49876: LD_INT 26
49878: PUSH
49879: LD_INT 27
49881: PUSH
49882: LD_INT 28
49884: PUSH
49885: LD_INT 29
49887: PUSH
49888: LD_INT 30
49890: PUSH
49891: LD_INT 31
49893: PUSH
49894: LD_INT 32
49896: PUSH
49897: LD_INT 33
49899: PUSH
49900: LD_INT 34
49902: PUSH
49903: LD_INT 35
49905: PUSH
49906: LD_INT 36
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 101
49949: PUSH
49950: LD_INT 102
49952: PUSH
49953: LD_INT 103
49955: PUSH
49956: LD_INT 104
49958: PUSH
49959: LD_INT 105
49961: PUSH
49962: LD_INT 106
49964: PUSH
49965: LD_INT 107
49967: PUSH
49968: LD_INT 108
49970: PUSH
49971: LD_INT 109
49973: PUSH
49974: LD_INT 110
49976: PUSH
49977: LD_INT 111
49979: PUSH
49980: LD_INT 112
49982: PUSH
49983: LD_INT 113
49985: PUSH
49986: LD_INT 114
49988: PUSH
49989: LD_INT 115
49991: PUSH
49992: LD_INT 116
49994: PUSH
49995: LD_INT 117
49997: PUSH
49998: LD_INT 118
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: ST_TO_ADDR
// if result then
50025: LD_VAR 0 2
50029: IFFALSE 50815
// begin normal :=  ;
50031: LD_ADDR_VAR 0 5
50035: PUSH
50036: LD_STRING 
50038: ST_TO_ADDR
// hardcore :=  ;
50039: LD_ADDR_VAR 0 6
50043: PUSH
50044: LD_STRING 
50046: ST_TO_ADDR
// active :=  ;
50047: LD_ADDR_VAR 0 7
50051: PUSH
50052: LD_STRING 
50054: ST_TO_ADDR
// for i = 1 to normalCounter do
50055: LD_ADDR_VAR 0 8
50059: PUSH
50060: DOUBLE
50061: LD_INT 1
50063: DEC
50064: ST_TO_ADDR
50065: LD_EXP 29
50069: PUSH
50070: FOR_TO
50071: IFFALSE 50172
// begin tmp := 0 ;
50073: LD_ADDR_VAR 0 3
50077: PUSH
50078: LD_STRING 0
50080: ST_TO_ADDR
// if result [ 1 ] then
50081: LD_VAR 0 2
50085: PUSH
50086: LD_INT 1
50088: ARRAY
50089: IFFALSE 50154
// if result [ 1 ] [ 1 ] = i then
50091: LD_VAR 0 2
50095: PUSH
50096: LD_INT 1
50098: ARRAY
50099: PUSH
50100: LD_INT 1
50102: ARRAY
50103: PUSH
50104: LD_VAR 0 8
50108: EQUAL
50109: IFFALSE 50154
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50111: LD_ADDR_VAR 0 2
50115: PUSH
50116: LD_VAR 0 2
50120: PPUSH
50121: LD_INT 1
50123: PPUSH
50124: LD_VAR 0 2
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: PPUSH
50133: LD_INT 1
50135: PPUSH
50136: CALL_OW 3
50140: PPUSH
50141: CALL_OW 1
50145: ST_TO_ADDR
// tmp := 1 ;
50146: LD_ADDR_VAR 0 3
50150: PUSH
50151: LD_STRING 1
50153: ST_TO_ADDR
// end ; normal := normal & tmp ;
50154: LD_ADDR_VAR 0 5
50158: PUSH
50159: LD_VAR 0 5
50163: PUSH
50164: LD_VAR 0 3
50168: STR
50169: ST_TO_ADDR
// end ;
50170: GO 50070
50172: POP
50173: POP
// for i = 1 to hardcoreCounter do
50174: LD_ADDR_VAR 0 8
50178: PUSH
50179: DOUBLE
50180: LD_INT 1
50182: DEC
50183: ST_TO_ADDR
50184: LD_EXP 30
50188: PUSH
50189: FOR_TO
50190: IFFALSE 50295
// begin tmp := 0 ;
50192: LD_ADDR_VAR 0 3
50196: PUSH
50197: LD_STRING 0
50199: ST_TO_ADDR
// if result [ 2 ] then
50200: LD_VAR 0 2
50204: PUSH
50205: LD_INT 2
50207: ARRAY
50208: IFFALSE 50277
// if result [ 2 ] [ 1 ] = 100 + i then
50210: LD_VAR 0 2
50214: PUSH
50215: LD_INT 2
50217: ARRAY
50218: PUSH
50219: LD_INT 1
50221: ARRAY
50222: PUSH
50223: LD_INT 100
50225: PUSH
50226: LD_VAR 0 8
50230: PLUS
50231: EQUAL
50232: IFFALSE 50277
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50234: LD_ADDR_VAR 0 2
50238: PUSH
50239: LD_VAR 0 2
50243: PPUSH
50244: LD_INT 2
50246: PPUSH
50247: LD_VAR 0 2
50251: PUSH
50252: LD_INT 2
50254: ARRAY
50255: PPUSH
50256: LD_INT 1
50258: PPUSH
50259: CALL_OW 3
50263: PPUSH
50264: CALL_OW 1
50268: ST_TO_ADDR
// tmp := 1 ;
50269: LD_ADDR_VAR 0 3
50273: PUSH
50274: LD_STRING 1
50276: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50277: LD_ADDR_VAR 0 6
50281: PUSH
50282: LD_VAR 0 6
50286: PUSH
50287: LD_VAR 0 3
50291: STR
50292: ST_TO_ADDR
// end ;
50293: GO 50189
50295: POP
50296: POP
// if isGameLoad then
50297: LD_VAR 0 1
50301: IFFALSE 50776
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50303: LD_ADDR_VAR 0 4
50307: PUSH
50308: LD_EXP 33
50312: PUSH
50313: LD_EXP 32
50317: PUSH
50318: LD_EXP 34
50322: PUSH
50323: LD_EXP 31
50327: PUSH
50328: LD_EXP 35
50332: PUSH
50333: LD_EXP 36
50337: PUSH
50338: LD_EXP 37
50342: PUSH
50343: LD_EXP 38
50347: PUSH
50348: LD_EXP 39
50352: PUSH
50353: LD_EXP 40
50357: PUSH
50358: LD_EXP 41
50362: PUSH
50363: LD_EXP 42
50367: PUSH
50368: LD_EXP 43
50372: PUSH
50373: LD_EXP 44
50377: PUSH
50378: LD_EXP 52
50382: PUSH
50383: LD_EXP 53
50387: PUSH
50388: LD_EXP 54
50392: PUSH
50393: LD_EXP 55
50397: PUSH
50398: LD_EXP 57
50402: PUSH
50403: LD_EXP 58
50407: PUSH
50408: LD_EXP 59
50412: PUSH
50413: LD_EXP 62
50417: PUSH
50418: LD_EXP 64
50422: PUSH
50423: LD_EXP 65
50427: PUSH
50428: LD_EXP 66
50432: PUSH
50433: LD_EXP 68
50437: PUSH
50438: LD_EXP 69
50442: PUSH
50443: LD_EXP 72
50447: PUSH
50448: LD_EXP 73
50452: PUSH
50453: LD_EXP 74
50457: PUSH
50458: LD_EXP 75
50462: PUSH
50463: LD_EXP 76
50467: PUSH
50468: LD_EXP 77
50472: PUSH
50473: LD_EXP 78
50477: PUSH
50478: LD_EXP 79
50482: PUSH
50483: LD_EXP 80
50487: PUSH
50488: LD_EXP 45
50492: PUSH
50493: LD_EXP 46
50497: PUSH
50498: LD_EXP 49
50502: PUSH
50503: LD_EXP 50
50507: PUSH
50508: LD_EXP 51
50512: PUSH
50513: LD_EXP 47
50517: PUSH
50518: LD_EXP 48
50522: PUSH
50523: LD_EXP 56
50527: PUSH
50528: LD_EXP 60
50532: PUSH
50533: LD_EXP 61
50537: PUSH
50538: LD_EXP 63
50542: PUSH
50543: LD_EXP 67
50547: PUSH
50548: LD_EXP 70
50552: PUSH
50553: LD_EXP 71
50557: PUSH
50558: LD_EXP 81
50562: PUSH
50563: LD_EXP 82
50567: PUSH
50568: LD_EXP 83
50572: PUSH
50573: LD_EXP 84
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: ST_TO_ADDR
// tmp :=  ;
50634: LD_ADDR_VAR 0 3
50638: PUSH
50639: LD_STRING 
50641: ST_TO_ADDR
// for i = 1 to normalCounter do
50642: LD_ADDR_VAR 0 8
50646: PUSH
50647: DOUBLE
50648: LD_INT 1
50650: DEC
50651: ST_TO_ADDR
50652: LD_EXP 29
50656: PUSH
50657: FOR_TO
50658: IFFALSE 50694
// begin if flags [ i ] then
50660: LD_VAR 0 4
50664: PUSH
50665: LD_VAR 0 8
50669: ARRAY
50670: IFFALSE 50692
// tmp := tmp & i & ; ;
50672: LD_ADDR_VAR 0 3
50676: PUSH
50677: LD_VAR 0 3
50681: PUSH
50682: LD_VAR 0 8
50686: STR
50687: PUSH
50688: LD_STRING ;
50690: STR
50691: ST_TO_ADDR
// end ;
50692: GO 50657
50694: POP
50695: POP
// for i = 1 to hardcoreCounter do
50696: LD_ADDR_VAR 0 8
50700: PUSH
50701: DOUBLE
50702: LD_INT 1
50704: DEC
50705: ST_TO_ADDR
50706: LD_EXP 30
50710: PUSH
50711: FOR_TO
50712: IFFALSE 50758
// begin if flags [ normalCounter + i ] then
50714: LD_VAR 0 4
50718: PUSH
50719: LD_EXP 29
50723: PUSH
50724: LD_VAR 0 8
50728: PLUS
50729: ARRAY
50730: IFFALSE 50756
// tmp := tmp & ( 100 + i ) & ; ;
50732: LD_ADDR_VAR 0 3
50736: PUSH
50737: LD_VAR 0 3
50741: PUSH
50742: LD_INT 100
50744: PUSH
50745: LD_VAR 0 8
50749: PLUS
50750: STR
50751: PUSH
50752: LD_STRING ;
50754: STR
50755: ST_TO_ADDR
// end ;
50756: GO 50711
50758: POP
50759: POP
// if tmp then
50760: LD_VAR 0 3
50764: IFFALSE 50776
// active := tmp ;
50766: LD_ADDR_VAR 0 7
50770: PUSH
50771: LD_VAR 0 3
50775: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
50776: LD_STRING getStreamItemsFromMission("
50778: PUSH
50779: LD_VAR 0 5
50783: STR
50784: PUSH
50785: LD_STRING ","
50787: STR
50788: PUSH
50789: LD_VAR 0 6
50793: STR
50794: PUSH
50795: LD_STRING ","
50797: STR
50798: PUSH
50799: LD_VAR 0 7
50803: STR
50804: PUSH
50805: LD_STRING ")
50807: STR
50808: PPUSH
50809: CALL_OW 559
// end else
50813: GO 50822
// ToLua ( getStreamItemsFromMission("","","") ) ;
50815: LD_STRING getStreamItemsFromMission("","","")
50817: PPUSH
50818: CALL_OW 559
// end ;
50822: LD_VAR 0 2
50826: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50827: LD_EXP 28
50831: PUSH
50832: LD_EXP 33
50836: AND
50837: IFFALSE 50961
50839: GO 50841
50841: DISABLE
50842: LD_INT 0
50844: PPUSH
50845: PPUSH
// begin enable ;
50846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
50847: LD_ADDR_VAR 0 2
50851: PUSH
50852: LD_INT 22
50854: PUSH
50855: LD_OWVAR 2
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 34
50869: PUSH
50870: LD_INT 7
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 34
50879: PUSH
50880: LD_INT 45
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 34
50889: PUSH
50890: LD_INT 28
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 34
50899: PUSH
50900: LD_INT 47
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PPUSH
50918: CALL_OW 69
50922: ST_TO_ADDR
// if not tmp then
50923: LD_VAR 0 2
50927: NOT
50928: IFFALSE 50932
// exit ;
50930: GO 50961
// for i in tmp do
50932: LD_ADDR_VAR 0 1
50936: PUSH
50937: LD_VAR 0 2
50941: PUSH
50942: FOR_IN
50943: IFFALSE 50959
// begin SetLives ( i , 0 ) ;
50945: LD_VAR 0 1
50949: PPUSH
50950: LD_INT 0
50952: PPUSH
50953: CALL_OW 234
// end ;
50957: GO 50942
50959: POP
50960: POP
// end ;
50961: PPOPN 2
50963: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
50964: LD_EXP 28
50968: PUSH
50969: LD_EXP 34
50973: AND
50974: IFFALSE 51058
50976: GO 50978
50978: DISABLE
50979: LD_INT 0
50981: PPUSH
50982: PPUSH
// begin enable ;
50983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
50984: LD_ADDR_VAR 0 2
50988: PUSH
50989: LD_INT 22
50991: PUSH
50992: LD_OWVAR 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 32
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PPUSH
51015: CALL_OW 69
51019: ST_TO_ADDR
// if not tmp then
51020: LD_VAR 0 2
51024: NOT
51025: IFFALSE 51029
// exit ;
51027: GO 51058
// for i in tmp do
51029: LD_ADDR_VAR 0 1
51033: PUSH
51034: LD_VAR 0 2
51038: PUSH
51039: FOR_IN
51040: IFFALSE 51056
// begin SetLives ( i , 0 ) ;
51042: LD_VAR 0 1
51046: PPUSH
51047: LD_INT 0
51049: PPUSH
51050: CALL_OW 234
// end ;
51054: GO 51039
51056: POP
51057: POP
// end ;
51058: PPOPN 2
51060: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51061: LD_EXP 28
51065: PUSH
51066: LD_EXP 31
51070: AND
51071: IFFALSE 51164
51073: GO 51075
51075: DISABLE
51076: LD_INT 0
51078: PPUSH
// begin enable ;
51079: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51080: LD_ADDR_VAR 0 1
51084: PUSH
51085: LD_INT 22
51087: PUSH
51088: LD_OWVAR 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: LD_INT 25
51102: PUSH
51103: LD_INT 5
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 25
51112: PUSH
51113: LD_INT 9
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 25
51122: PUSH
51123: LD_INT 8
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PPUSH
51140: CALL_OW 69
51144: PUSH
51145: FOR_IN
51146: IFFALSE 51162
// begin SetClass ( i , 1 ) ;
51148: LD_VAR 0 1
51152: PPUSH
51153: LD_INT 1
51155: PPUSH
51156: CALL_OW 336
// end ;
51160: GO 51145
51162: POP
51163: POP
// end ;
51164: PPOPN 1
51166: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51167: LD_EXP 28
51171: PUSH
51172: LD_EXP 32
51176: AND
51177: PUSH
51178: LD_OWVAR 65
51182: PUSH
51183: LD_INT 7
51185: LESS
51186: AND
51187: IFFALSE 51201
51189: GO 51191
51191: DISABLE
// begin enable ;
51192: ENABLE
// game_speed := 7 ;
51193: LD_ADDR_OWVAR 65
51197: PUSH
51198: LD_INT 7
51200: ST_TO_ADDR
// end ;
51201: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51202: LD_EXP 28
51206: PUSH
51207: LD_EXP 35
51211: AND
51212: IFFALSE 51414
51214: GO 51216
51216: DISABLE
51217: LD_INT 0
51219: PPUSH
51220: PPUSH
51221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51222: LD_ADDR_VAR 0 3
51226: PUSH
51227: LD_INT 81
51229: PUSH
51230: LD_OWVAR 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 21
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PPUSH
51253: CALL_OW 69
51257: ST_TO_ADDR
// if not tmp then
51258: LD_VAR 0 3
51262: NOT
51263: IFFALSE 51267
// exit ;
51265: GO 51414
// if tmp > 5 then
51267: LD_VAR 0 3
51271: PUSH
51272: LD_INT 5
51274: GREATER
51275: IFFALSE 51287
// k := 5 else
51277: LD_ADDR_VAR 0 2
51281: PUSH
51282: LD_INT 5
51284: ST_TO_ADDR
51285: GO 51297
// k := tmp ;
51287: LD_ADDR_VAR 0 2
51291: PUSH
51292: LD_VAR 0 3
51296: ST_TO_ADDR
// for i := 1 to k do
51297: LD_ADDR_VAR 0 1
51301: PUSH
51302: DOUBLE
51303: LD_INT 1
51305: DEC
51306: ST_TO_ADDR
51307: LD_VAR 0 2
51311: PUSH
51312: FOR_TO
51313: IFFALSE 51412
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51315: LD_VAR 0 3
51319: PUSH
51320: LD_VAR 0 1
51324: ARRAY
51325: PPUSH
51326: LD_VAR 0 1
51330: PUSH
51331: LD_INT 4
51333: MOD
51334: PUSH
51335: LD_INT 1
51337: PLUS
51338: PPUSH
51339: CALL_OW 259
51343: PUSH
51344: LD_INT 10
51346: LESS
51347: IFFALSE 51410
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51349: LD_VAR 0 3
51353: PUSH
51354: LD_VAR 0 1
51358: ARRAY
51359: PPUSH
51360: LD_VAR 0 1
51364: PUSH
51365: LD_INT 4
51367: MOD
51368: PUSH
51369: LD_INT 1
51371: PLUS
51372: PPUSH
51373: LD_VAR 0 3
51377: PUSH
51378: LD_VAR 0 1
51382: ARRAY
51383: PPUSH
51384: LD_VAR 0 1
51388: PUSH
51389: LD_INT 4
51391: MOD
51392: PUSH
51393: LD_INT 1
51395: PLUS
51396: PPUSH
51397: CALL_OW 259
51401: PUSH
51402: LD_INT 1
51404: PLUS
51405: PPUSH
51406: CALL_OW 237
51410: GO 51312
51412: POP
51413: POP
// end ;
51414: PPOPN 3
51416: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51417: LD_EXP 28
51421: PUSH
51422: LD_EXP 36
51426: AND
51427: IFFALSE 51447
51429: GO 51431
51431: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51432: LD_INT 4
51434: PPUSH
51435: LD_OWVAR 2
51439: PPUSH
51440: LD_INT 0
51442: PPUSH
51443: CALL_OW 324
51447: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51448: LD_EXP 28
51452: PUSH
51453: LD_EXP 65
51457: AND
51458: IFFALSE 51478
51460: GO 51462
51462: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51463: LD_INT 19
51465: PPUSH
51466: LD_OWVAR 2
51470: PPUSH
51471: LD_INT 0
51473: PPUSH
51474: CALL_OW 324
51478: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51479: LD_EXP 28
51483: PUSH
51484: LD_EXP 37
51488: AND
51489: IFFALSE 51591
51491: GO 51493
51493: DISABLE
51494: LD_INT 0
51496: PPUSH
51497: PPUSH
// begin enable ;
51498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51499: LD_ADDR_VAR 0 2
51503: PUSH
51504: LD_INT 22
51506: PUSH
51507: LD_OWVAR 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 34
51521: PUSH
51522: LD_INT 11
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 34
51531: PUSH
51532: LD_INT 30
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PPUSH
51548: CALL_OW 69
51552: ST_TO_ADDR
// if not tmp then
51553: LD_VAR 0 2
51557: NOT
51558: IFFALSE 51562
// exit ;
51560: GO 51591
// for i in tmp do
51562: LD_ADDR_VAR 0 1
51566: PUSH
51567: LD_VAR 0 2
51571: PUSH
51572: FOR_IN
51573: IFFALSE 51589
// begin SetLives ( i , 0 ) ;
51575: LD_VAR 0 1
51579: PPUSH
51580: LD_INT 0
51582: PPUSH
51583: CALL_OW 234
// end ;
51587: GO 51572
51589: POP
51590: POP
// end ;
51591: PPOPN 2
51593: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51594: LD_EXP 28
51598: PUSH
51599: LD_EXP 38
51603: AND
51604: IFFALSE 51624
51606: GO 51608
51608: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51609: LD_INT 32
51611: PPUSH
51612: LD_OWVAR 2
51616: PPUSH
51617: LD_INT 0
51619: PPUSH
51620: CALL_OW 324
51624: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51625: LD_EXP 28
51629: PUSH
51630: LD_EXP 39
51634: AND
51635: IFFALSE 51816
51637: GO 51639
51639: DISABLE
51640: LD_INT 0
51642: PPUSH
51643: PPUSH
51644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51645: LD_ADDR_VAR 0 2
51649: PUSH
51650: LD_INT 22
51652: PUSH
51653: LD_OWVAR 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 33
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PPUSH
51676: CALL_OW 69
51680: ST_TO_ADDR
// if not tmp then
51681: LD_VAR 0 2
51685: NOT
51686: IFFALSE 51690
// exit ;
51688: GO 51816
// side := 0 ;
51690: LD_ADDR_VAR 0 3
51694: PUSH
51695: LD_INT 0
51697: ST_TO_ADDR
// for i := 1 to 8 do
51698: LD_ADDR_VAR 0 1
51702: PUSH
51703: DOUBLE
51704: LD_INT 1
51706: DEC
51707: ST_TO_ADDR
51708: LD_INT 8
51710: PUSH
51711: FOR_TO
51712: IFFALSE 51760
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
51714: LD_OWVAR 2
51718: PUSH
51719: LD_VAR 0 1
51723: NONEQUAL
51724: PUSH
51725: LD_OWVAR 2
51729: PPUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 81
51739: PUSH
51740: LD_INT 2
51742: EQUAL
51743: AND
51744: IFFALSE 51758
// begin side := i ;
51746: LD_ADDR_VAR 0 3
51750: PUSH
51751: LD_VAR 0 1
51755: ST_TO_ADDR
// break ;
51756: GO 51760
// end ;
51758: GO 51711
51760: POP
51761: POP
// if not side then
51762: LD_VAR 0 3
51766: NOT
51767: IFFALSE 51771
// exit ;
51769: GO 51816
// for i := 1 to tmp do
51771: LD_ADDR_VAR 0 1
51775: PUSH
51776: DOUBLE
51777: LD_INT 1
51779: DEC
51780: ST_TO_ADDR
51781: LD_VAR 0 2
51785: PUSH
51786: FOR_TO
51787: IFFALSE 51814
// if Prob ( 60 ) then
51789: LD_INT 60
51791: PPUSH
51792: CALL_OW 13
51796: IFFALSE 51812
// SetSide ( i , side ) ;
51798: LD_VAR 0 1
51802: PPUSH
51803: LD_VAR 0 3
51807: PPUSH
51808: CALL_OW 235
51812: GO 51786
51814: POP
51815: POP
// end ;
51816: PPOPN 3
51818: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51819: LD_EXP 28
51823: PUSH
51824: LD_EXP 41
51828: AND
51829: IFFALSE 51948
51831: GO 51833
51833: DISABLE
51834: LD_INT 0
51836: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51837: LD_ADDR_VAR 0 1
51841: PUSH
51842: LD_INT 22
51844: PUSH
51845: LD_OWVAR 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 21
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: LD_INT 23
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PPUSH
51886: CALL_OW 69
51890: PUSH
51891: FOR_IN
51892: IFFALSE 51946
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51894: LD_VAR 0 1
51898: PPUSH
51899: CALL_OW 257
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: LD_INT 4
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: IN
51922: IFFALSE 51944
// SetClass ( un , rand ( 1 , 4 ) ) ;
51924: LD_VAR 0 1
51928: PPUSH
51929: LD_INT 1
51931: PPUSH
51932: LD_INT 4
51934: PPUSH
51935: CALL_OW 12
51939: PPUSH
51940: CALL_OW 336
51944: GO 51891
51946: POP
51947: POP
// end ;
51948: PPOPN 1
51950: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
51951: LD_EXP 28
51955: PUSH
51956: LD_EXP 40
51960: AND
51961: IFFALSE 52040
51963: GO 51965
51965: DISABLE
51966: LD_INT 0
51968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51969: LD_ADDR_VAR 0 1
51973: PUSH
51974: LD_INT 22
51976: PUSH
51977: LD_OWVAR 2
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 21
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PPUSH
52000: CALL_OW 69
52004: ST_TO_ADDR
// if not tmp then
52005: LD_VAR 0 1
52009: NOT
52010: IFFALSE 52014
// exit ;
52012: GO 52040
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52014: LD_VAR 0 1
52018: PUSH
52019: LD_INT 1
52021: PPUSH
52022: LD_VAR 0 1
52026: PPUSH
52027: CALL_OW 12
52031: ARRAY
52032: PPUSH
52033: LD_INT 100
52035: PPUSH
52036: CALL_OW 234
// end ;
52040: PPOPN 1
52042: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52043: LD_EXP 28
52047: PUSH
52048: LD_EXP 42
52052: AND
52053: IFFALSE 52151
52055: GO 52057
52057: DISABLE
52058: LD_INT 0
52060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52061: LD_ADDR_VAR 0 1
52065: PUSH
52066: LD_INT 22
52068: PUSH
52069: LD_OWVAR 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 21
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PPUSH
52092: CALL_OW 69
52096: ST_TO_ADDR
// if not tmp then
52097: LD_VAR 0 1
52101: NOT
52102: IFFALSE 52106
// exit ;
52104: GO 52151
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52106: LD_VAR 0 1
52110: PUSH
52111: LD_INT 1
52113: PPUSH
52114: LD_VAR 0 1
52118: PPUSH
52119: CALL_OW 12
52123: ARRAY
52124: PPUSH
52125: LD_INT 1
52127: PPUSH
52128: LD_INT 4
52130: PPUSH
52131: CALL_OW 12
52135: PPUSH
52136: LD_INT 3000
52138: PPUSH
52139: LD_INT 9000
52141: PPUSH
52142: CALL_OW 12
52146: PPUSH
52147: CALL_OW 492
// end ;
52151: PPOPN 1
52153: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52154: LD_EXP 28
52158: PUSH
52159: LD_EXP 43
52163: AND
52164: IFFALSE 52184
52166: GO 52168
52168: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52169: LD_INT 1
52171: PPUSH
52172: LD_OWVAR 2
52176: PPUSH
52177: LD_INT 0
52179: PPUSH
52180: CALL_OW 324
52184: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52185: LD_EXP 28
52189: PUSH
52190: LD_EXP 44
52194: AND
52195: IFFALSE 52278
52197: GO 52199
52199: DISABLE
52200: LD_INT 0
52202: PPUSH
52203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52204: LD_ADDR_VAR 0 2
52208: PUSH
52209: LD_INT 22
52211: PUSH
52212: LD_OWVAR 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 21
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PPUSH
52235: CALL_OW 69
52239: ST_TO_ADDR
// if not tmp then
52240: LD_VAR 0 2
52244: NOT
52245: IFFALSE 52249
// exit ;
52247: GO 52278
// for i in tmp do
52249: LD_ADDR_VAR 0 1
52253: PUSH
52254: LD_VAR 0 2
52258: PUSH
52259: FOR_IN
52260: IFFALSE 52276
// SetBLevel ( i , 10 ) ;
52262: LD_VAR 0 1
52266: PPUSH
52267: LD_INT 10
52269: PPUSH
52270: CALL_OW 241
52274: GO 52259
52276: POP
52277: POP
// end ;
52278: PPOPN 2
52280: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52281: LD_EXP 28
52285: PUSH
52286: LD_EXP 45
52290: AND
52291: IFFALSE 52402
52293: GO 52295
52295: DISABLE
52296: LD_INT 0
52298: PPUSH
52299: PPUSH
52300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52301: LD_ADDR_VAR 0 3
52305: PUSH
52306: LD_INT 22
52308: PUSH
52309: LD_OWVAR 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 25
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PPUSH
52332: CALL_OW 69
52336: ST_TO_ADDR
// if not tmp then
52337: LD_VAR 0 3
52341: NOT
52342: IFFALSE 52346
// exit ;
52344: GO 52402
// un := tmp [ rand ( 1 , tmp ) ] ;
52346: LD_ADDR_VAR 0 2
52350: PUSH
52351: LD_VAR 0 3
52355: PUSH
52356: LD_INT 1
52358: PPUSH
52359: LD_VAR 0 3
52363: PPUSH
52364: CALL_OW 12
52368: ARRAY
52369: ST_TO_ADDR
// if Crawls ( un ) then
52370: LD_VAR 0 2
52374: PPUSH
52375: CALL_OW 318
52379: IFFALSE 52390
// ComWalk ( un ) ;
52381: LD_VAR 0 2
52385: PPUSH
52386: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52390: LD_VAR 0 2
52394: PPUSH
52395: LD_INT 5
52397: PPUSH
52398: CALL_OW 336
// end ;
52402: PPOPN 3
52404: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52405: LD_EXP 28
52409: PUSH
52410: LD_EXP 46
52414: AND
52415: PUSH
52416: LD_OWVAR 67
52420: PUSH
52421: LD_INT 4
52423: LESS
52424: AND
52425: IFFALSE 52444
52427: GO 52429
52429: DISABLE
// begin Difficulty := Difficulty + 1 ;
52430: LD_ADDR_OWVAR 67
52434: PUSH
52435: LD_OWVAR 67
52439: PUSH
52440: LD_INT 1
52442: PLUS
52443: ST_TO_ADDR
// end ;
52444: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52445: LD_EXP 28
52449: PUSH
52450: LD_EXP 47
52454: AND
52455: IFFALSE 52558
52457: GO 52459
52459: DISABLE
52460: LD_INT 0
52462: PPUSH
// begin for i := 1 to 5 do
52463: LD_ADDR_VAR 0 1
52467: PUSH
52468: DOUBLE
52469: LD_INT 1
52471: DEC
52472: ST_TO_ADDR
52473: LD_INT 5
52475: PUSH
52476: FOR_TO
52477: IFFALSE 52556
// begin uc_nation := nation_nature ;
52479: LD_ADDR_OWVAR 21
52483: PUSH
52484: LD_INT 0
52486: ST_TO_ADDR
// uc_side := 0 ;
52487: LD_ADDR_OWVAR 20
52491: PUSH
52492: LD_INT 0
52494: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52495: LD_ADDR_OWVAR 29
52499: PUSH
52500: LD_INT 12
52502: PUSH
52503: LD_INT 12
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// hc_agressivity := 20 ;
52510: LD_ADDR_OWVAR 35
52514: PUSH
52515: LD_INT 20
52517: ST_TO_ADDR
// hc_class := class_tiger ;
52518: LD_ADDR_OWVAR 28
52522: PUSH
52523: LD_INT 14
52525: ST_TO_ADDR
// hc_gallery :=  ;
52526: LD_ADDR_OWVAR 33
52530: PUSH
52531: LD_STRING 
52533: ST_TO_ADDR
// hc_name :=  ;
52534: LD_ADDR_OWVAR 26
52538: PUSH
52539: LD_STRING 
52541: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52542: CALL_OW 44
52546: PPUSH
52547: LD_INT 0
52549: PPUSH
52550: CALL_OW 51
// end ;
52554: GO 52476
52556: POP
52557: POP
// end ;
52558: PPOPN 1
52560: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52561: LD_EXP 28
52565: PUSH
52566: LD_EXP 48
52570: AND
52571: IFFALSE 52580
52573: GO 52575
52575: DISABLE
// StreamSibBomb ;
52576: CALL 52581 0 0
52580: END
// export function StreamSibBomb ; var i , x , y ; begin
52581: LD_INT 0
52583: PPUSH
52584: PPUSH
52585: PPUSH
52586: PPUSH
// result := false ;
52587: LD_ADDR_VAR 0 1
52591: PUSH
52592: LD_INT 0
52594: ST_TO_ADDR
// for i := 1 to 16 do
52595: LD_ADDR_VAR 0 2
52599: PUSH
52600: DOUBLE
52601: LD_INT 1
52603: DEC
52604: ST_TO_ADDR
52605: LD_INT 16
52607: PUSH
52608: FOR_TO
52609: IFFALSE 52808
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52611: LD_ADDR_VAR 0 3
52615: PUSH
52616: LD_INT 10
52618: PUSH
52619: LD_INT 20
52621: PUSH
52622: LD_INT 30
52624: PUSH
52625: LD_INT 40
52627: PUSH
52628: LD_INT 50
52630: PUSH
52631: LD_INT 60
52633: PUSH
52634: LD_INT 70
52636: PUSH
52637: LD_INT 80
52639: PUSH
52640: LD_INT 90
52642: PUSH
52643: LD_INT 100
52645: PUSH
52646: LD_INT 110
52648: PUSH
52649: LD_INT 120
52651: PUSH
52652: LD_INT 130
52654: PUSH
52655: LD_INT 140
52657: PUSH
52658: LD_INT 150
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PPUSH
52681: LD_INT 15
52683: PPUSH
52684: CALL_OW 12
52688: ARRAY
52689: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52690: LD_ADDR_VAR 0 4
52694: PUSH
52695: LD_INT 10
52697: PUSH
52698: LD_INT 20
52700: PUSH
52701: LD_INT 30
52703: PUSH
52704: LD_INT 40
52706: PUSH
52707: LD_INT 50
52709: PUSH
52710: LD_INT 60
52712: PUSH
52713: LD_INT 70
52715: PUSH
52716: LD_INT 80
52718: PUSH
52719: LD_INT 90
52721: PUSH
52722: LD_INT 100
52724: PUSH
52725: LD_INT 110
52727: PUSH
52728: LD_INT 120
52730: PUSH
52731: LD_INT 130
52733: PUSH
52734: LD_INT 140
52736: PUSH
52737: LD_INT 150
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PPUSH
52760: LD_INT 15
52762: PPUSH
52763: CALL_OW 12
52767: ARRAY
52768: ST_TO_ADDR
// if ValidHex ( x , y ) then
52769: LD_VAR 0 3
52773: PPUSH
52774: LD_VAR 0 4
52778: PPUSH
52779: CALL_OW 488
52783: IFFALSE 52806
// begin result := [ x , y ] ;
52785: LD_ADDR_VAR 0 1
52789: PUSH
52790: LD_VAR 0 3
52794: PUSH
52795: LD_VAR 0 4
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: ST_TO_ADDR
// break ;
52804: GO 52808
// end ; end ;
52806: GO 52608
52808: POP
52809: POP
// if result then
52810: LD_VAR 0 1
52814: IFFALSE 52874
// begin ToLua ( playSibBomb() ) ;
52816: LD_STRING playSibBomb()
52818: PPUSH
52819: CALL_OW 559
// wait ( 0 0$14 ) ;
52823: LD_INT 490
52825: PPUSH
52826: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52830: LD_VAR 0 1
52834: PUSH
52835: LD_INT 1
52837: ARRAY
52838: PPUSH
52839: LD_VAR 0 1
52843: PUSH
52844: LD_INT 2
52846: ARRAY
52847: PPUSH
52848: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52852: LD_VAR 0 1
52856: PUSH
52857: LD_INT 1
52859: ARRAY
52860: PPUSH
52861: LD_VAR 0 1
52865: PUSH
52866: LD_INT 2
52868: ARRAY
52869: PPUSH
52870: CALL_OW 429
// end ; end ;
52874: LD_VAR 0 1
52878: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52879: LD_EXP 28
52883: PUSH
52884: LD_EXP 50
52888: AND
52889: IFFALSE 52901
52891: GO 52893
52893: DISABLE
// YouLost (  ) ;
52894: LD_STRING 
52896: PPUSH
52897: CALL_OW 104
52901: END
// every 0 0$1 trigger StreamModeActive and sFog do
52902: LD_EXP 28
52906: PUSH
52907: LD_EXP 49
52911: AND
52912: IFFALSE 52926
52914: GO 52916
52916: DISABLE
// FogOff ( your_side ) ;
52917: LD_OWVAR 2
52921: PPUSH
52922: CALL_OW 344
52926: END
// every 0 0$1 trigger StreamModeActive and sSun do
52927: LD_EXP 28
52931: PUSH
52932: LD_EXP 51
52936: AND
52937: IFFALSE 52965
52939: GO 52941
52941: DISABLE
// begin solar_recharge_percent := 0 ;
52942: LD_ADDR_OWVAR 79
52946: PUSH
52947: LD_INT 0
52949: ST_TO_ADDR
// wait ( 5 5$00 ) ;
52950: LD_INT 10500
52952: PPUSH
52953: CALL_OW 67
// solar_recharge_percent := 100 ;
52957: LD_ADDR_OWVAR 79
52961: PUSH
52962: LD_INT 100
52964: ST_TO_ADDR
// end ;
52965: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
52966: LD_EXP 28
52970: PUSH
52971: LD_EXP 52
52975: AND
52976: IFFALSE 53215
52978: GO 52980
52980: DISABLE
52981: LD_INT 0
52983: PPUSH
52984: PPUSH
52985: PPUSH
// begin tmp := [ ] ;
52986: LD_ADDR_VAR 0 3
52990: PUSH
52991: EMPTY
52992: ST_TO_ADDR
// for i := 1 to 6 do
52993: LD_ADDR_VAR 0 1
52997: PUSH
52998: DOUBLE
52999: LD_INT 1
53001: DEC
53002: ST_TO_ADDR
53003: LD_INT 6
53005: PUSH
53006: FOR_TO
53007: IFFALSE 53112
// begin uc_nation := nation_nature ;
53009: LD_ADDR_OWVAR 21
53013: PUSH
53014: LD_INT 0
53016: ST_TO_ADDR
// uc_side := 0 ;
53017: LD_ADDR_OWVAR 20
53021: PUSH
53022: LD_INT 0
53024: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53025: LD_ADDR_OWVAR 29
53029: PUSH
53030: LD_INT 12
53032: PUSH
53033: LD_INT 12
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// hc_agressivity := 20 ;
53040: LD_ADDR_OWVAR 35
53044: PUSH
53045: LD_INT 20
53047: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53048: LD_ADDR_OWVAR 28
53052: PUSH
53053: LD_INT 17
53055: ST_TO_ADDR
// hc_gallery :=  ;
53056: LD_ADDR_OWVAR 33
53060: PUSH
53061: LD_STRING 
53063: ST_TO_ADDR
// hc_name :=  ;
53064: LD_ADDR_OWVAR 26
53068: PUSH
53069: LD_STRING 
53071: ST_TO_ADDR
// un := CreateHuman ;
53072: LD_ADDR_VAR 0 2
53076: PUSH
53077: CALL_OW 44
53081: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53082: LD_VAR 0 2
53086: PPUSH
53087: LD_INT 1
53089: PPUSH
53090: CALL_OW 51
// tmp := tmp ^ un ;
53094: LD_ADDR_VAR 0 3
53098: PUSH
53099: LD_VAR 0 3
53103: PUSH
53104: LD_VAR 0 2
53108: ADD
53109: ST_TO_ADDR
// end ;
53110: GO 53006
53112: POP
53113: POP
// repeat wait ( 0 0$1 ) ;
53114: LD_INT 35
53116: PPUSH
53117: CALL_OW 67
// for un in tmp do
53121: LD_ADDR_VAR 0 2
53125: PUSH
53126: LD_VAR 0 3
53130: PUSH
53131: FOR_IN
53132: IFFALSE 53206
// begin if IsDead ( un ) then
53134: LD_VAR 0 2
53138: PPUSH
53139: CALL_OW 301
53143: IFFALSE 53163
// begin tmp := tmp diff un ;
53145: LD_ADDR_VAR 0 3
53149: PUSH
53150: LD_VAR 0 3
53154: PUSH
53155: LD_VAR 0 2
53159: DIFF
53160: ST_TO_ADDR
// continue ;
53161: GO 53131
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53163: LD_VAR 0 2
53167: PPUSH
53168: LD_INT 3
53170: PUSH
53171: LD_INT 22
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PPUSH
53185: CALL_OW 69
53189: PPUSH
53190: LD_VAR 0 2
53194: PPUSH
53195: CALL_OW 74
53199: PPUSH
53200: CALL_OW 115
// end ;
53204: GO 53131
53206: POP
53207: POP
// until not tmp ;
53208: LD_VAR 0 3
53212: NOT
53213: IFFALSE 53114
// end ;
53215: PPOPN 3
53217: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53218: LD_EXP 28
53222: PUSH
53223: LD_EXP 53
53227: AND
53228: IFFALSE 53282
53230: GO 53232
53232: DISABLE
// begin ToLua ( displayTroll(); ) ;
53233: LD_STRING displayTroll();
53235: PPUSH
53236: CALL_OW 559
// wait ( 3 3$00 ) ;
53240: LD_INT 6300
53242: PPUSH
53243: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53247: LD_STRING hideTroll();
53249: PPUSH
53250: CALL_OW 559
// wait ( 1 1$00 ) ;
53254: LD_INT 2100
53256: PPUSH
53257: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53261: LD_STRING displayTroll();
53263: PPUSH
53264: CALL_OW 559
// wait ( 1 1$00 ) ;
53268: LD_INT 2100
53270: PPUSH
53271: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53275: LD_STRING hideTroll();
53277: PPUSH
53278: CALL_OW 559
// end ;
53282: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53283: LD_EXP 28
53287: PUSH
53288: LD_EXP 54
53292: AND
53293: IFFALSE 53356
53295: GO 53297
53297: DISABLE
53298: LD_INT 0
53300: PPUSH
// begin p := 0 ;
53301: LD_ADDR_VAR 0 1
53305: PUSH
53306: LD_INT 0
53308: ST_TO_ADDR
// repeat game_speed := 1 ;
53309: LD_ADDR_OWVAR 65
53313: PUSH
53314: LD_INT 1
53316: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53317: LD_INT 35
53319: PPUSH
53320: CALL_OW 67
// p := p + 1 ;
53324: LD_ADDR_VAR 0 1
53328: PUSH
53329: LD_VAR 0 1
53333: PUSH
53334: LD_INT 1
53336: PLUS
53337: ST_TO_ADDR
// until p >= 60 ;
53338: LD_VAR 0 1
53342: PUSH
53343: LD_INT 60
53345: GREATEREQUAL
53346: IFFALSE 53309
// game_speed := 4 ;
53348: LD_ADDR_OWVAR 65
53352: PUSH
53353: LD_INT 4
53355: ST_TO_ADDR
// end ;
53356: PPOPN 1
53358: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53359: LD_EXP 28
53363: PUSH
53364: LD_EXP 55
53368: AND
53369: IFFALSE 53515
53371: GO 53373
53373: DISABLE
53374: LD_INT 0
53376: PPUSH
53377: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53378: LD_ADDR_VAR 0 1
53382: PUSH
53383: LD_INT 22
53385: PUSH
53386: LD_OWVAR 2
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 30
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 30
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PPUSH
53427: CALL_OW 69
53431: ST_TO_ADDR
// if not depot then
53432: LD_VAR 0 1
53436: NOT
53437: IFFALSE 53441
// exit ;
53439: GO 53515
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53441: LD_ADDR_VAR 0 2
53445: PUSH
53446: LD_VAR 0 1
53450: PUSH
53451: LD_INT 1
53453: PPUSH
53454: LD_VAR 0 1
53458: PPUSH
53459: CALL_OW 12
53463: ARRAY
53464: PPUSH
53465: CALL_OW 274
53469: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53470: LD_VAR 0 2
53474: PPUSH
53475: LD_INT 1
53477: PPUSH
53478: LD_INT 0
53480: PPUSH
53481: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53485: LD_VAR 0 2
53489: PPUSH
53490: LD_INT 2
53492: PPUSH
53493: LD_INT 0
53495: PPUSH
53496: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53500: LD_VAR 0 2
53504: PPUSH
53505: LD_INT 3
53507: PPUSH
53508: LD_INT 0
53510: PPUSH
53511: CALL_OW 277
// end ;
53515: PPOPN 2
53517: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53518: LD_EXP 28
53522: PUSH
53523: LD_EXP 56
53527: AND
53528: IFFALSE 53625
53530: GO 53532
53532: DISABLE
53533: LD_INT 0
53535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53536: LD_ADDR_VAR 0 1
53540: PUSH
53541: LD_INT 22
53543: PUSH
53544: LD_OWVAR 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 21
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: LD_INT 23
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: PPUSH
53585: CALL_OW 69
53589: ST_TO_ADDR
// if not tmp then
53590: LD_VAR 0 1
53594: NOT
53595: IFFALSE 53599
// exit ;
53597: GO 53625
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53599: LD_VAR 0 1
53603: PUSH
53604: LD_INT 1
53606: PPUSH
53607: LD_VAR 0 1
53611: PPUSH
53612: CALL_OW 12
53616: ARRAY
53617: PPUSH
53618: LD_INT 200
53620: PPUSH
53621: CALL_OW 234
// end ;
53625: PPOPN 1
53627: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53628: LD_EXP 28
53632: PUSH
53633: LD_EXP 57
53637: AND
53638: IFFALSE 53717
53640: GO 53642
53642: DISABLE
53643: LD_INT 0
53645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53646: LD_ADDR_VAR 0 1
53650: PUSH
53651: LD_INT 22
53653: PUSH
53654: LD_OWVAR 2
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 21
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PPUSH
53677: CALL_OW 69
53681: ST_TO_ADDR
// if not tmp then
53682: LD_VAR 0 1
53686: NOT
53687: IFFALSE 53691
// exit ;
53689: GO 53717
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53691: LD_VAR 0 1
53695: PUSH
53696: LD_INT 1
53698: PPUSH
53699: LD_VAR 0 1
53703: PPUSH
53704: CALL_OW 12
53708: ARRAY
53709: PPUSH
53710: LD_INT 60
53712: PPUSH
53713: CALL_OW 234
// end ;
53717: PPOPN 1
53719: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53720: LD_EXP 28
53724: PUSH
53725: LD_EXP 58
53729: AND
53730: IFFALSE 53829
53732: GO 53734
53734: DISABLE
53735: LD_INT 0
53737: PPUSH
53738: PPUSH
// begin enable ;
53739: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
53740: LD_ADDR_VAR 0 1
53744: PUSH
53745: LD_INT 22
53747: PUSH
53748: LD_OWVAR 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 61
53759: PUSH
53760: EMPTY
53761: LIST
53762: PUSH
53763: LD_INT 33
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: PPUSH
53778: CALL_OW 69
53782: ST_TO_ADDR
// if not tmp then
53783: LD_VAR 0 1
53787: NOT
53788: IFFALSE 53792
// exit ;
53790: GO 53829
// for i in tmp do
53792: LD_ADDR_VAR 0 2
53796: PUSH
53797: LD_VAR 0 1
53801: PUSH
53802: FOR_IN
53803: IFFALSE 53827
// if IsControledBy ( i ) then
53805: LD_VAR 0 2
53809: PPUSH
53810: CALL_OW 312
53814: IFFALSE 53825
// ComUnlink ( i ) ;
53816: LD_VAR 0 2
53820: PPUSH
53821: CALL_OW 136
53825: GO 53802
53827: POP
53828: POP
// end ;
53829: PPOPN 2
53831: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53832: LD_EXP 28
53836: PUSH
53837: LD_EXP 59
53841: AND
53842: IFFALSE 53982
53844: GO 53846
53846: DISABLE
53847: LD_INT 0
53849: PPUSH
53850: PPUSH
// begin ToLua ( displayPowell(); ) ;
53851: LD_STRING displayPowell();
53853: PPUSH
53854: CALL_OW 559
// uc_side := 0 ;
53858: LD_ADDR_OWVAR 20
53862: PUSH
53863: LD_INT 0
53865: ST_TO_ADDR
// uc_nation := 2 ;
53866: LD_ADDR_OWVAR 21
53870: PUSH
53871: LD_INT 2
53873: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53874: LD_ADDR_OWVAR 37
53878: PUSH
53879: LD_INT 14
53881: ST_TO_ADDR
// vc_engine := engine_siberite ;
53882: LD_ADDR_OWVAR 39
53886: PUSH
53887: LD_INT 3
53889: ST_TO_ADDR
// vc_control := control_apeman ;
53890: LD_ADDR_OWVAR 38
53894: PUSH
53895: LD_INT 5
53897: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
53898: LD_ADDR_OWVAR 40
53902: PUSH
53903: LD_INT 29
53905: ST_TO_ADDR
// un := CreateVehicle ;
53906: LD_ADDR_VAR 0 2
53910: PUSH
53911: CALL_OW 45
53915: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53916: LD_VAR 0 2
53920: PPUSH
53921: LD_INT 1
53923: PPUSH
53924: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53928: LD_INT 35
53930: PPUSH
53931: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53935: LD_VAR 0 2
53939: PPUSH
53940: LD_INT 22
53942: PUSH
53943: LD_OWVAR 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PPUSH
53952: CALL_OW 69
53956: PPUSH
53957: LD_VAR 0 2
53961: PPUSH
53962: CALL_OW 74
53966: PPUSH
53967: CALL_OW 115
// until IsDead ( un ) ;
53971: LD_VAR 0 2
53975: PPUSH
53976: CALL_OW 301
53980: IFFALSE 53928
// end ;
53982: PPOPN 2
53984: END
// every 0 0$1 trigger StreamModeActive and sStu do
53985: LD_EXP 28
53989: PUSH
53990: LD_EXP 67
53994: AND
53995: IFFALSE 54011
53997: GO 53999
53999: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54000: LD_STRING displayStucuk();
54002: PPUSH
54003: CALL_OW 559
// ResetFog ;
54007: CALL_OW 335
// end ;
54011: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54012: LD_EXP 28
54016: PUSH
54017: LD_EXP 60
54021: AND
54022: IFFALSE 54163
54024: GO 54026
54026: DISABLE
54027: LD_INT 0
54029: PPUSH
54030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54031: LD_ADDR_VAR 0 2
54035: PUSH
54036: LD_INT 22
54038: PUSH
54039: LD_OWVAR 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 21
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PPUSH
54062: CALL_OW 69
54066: ST_TO_ADDR
// if not tmp then
54067: LD_VAR 0 2
54071: NOT
54072: IFFALSE 54076
// exit ;
54074: GO 54163
// un := tmp [ rand ( 1 , tmp ) ] ;
54076: LD_ADDR_VAR 0 1
54080: PUSH
54081: LD_VAR 0 2
54085: PUSH
54086: LD_INT 1
54088: PPUSH
54089: LD_VAR 0 2
54093: PPUSH
54094: CALL_OW 12
54098: ARRAY
54099: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54100: LD_VAR 0 1
54104: PPUSH
54105: LD_INT 0
54107: PPUSH
54108: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54112: LD_VAR 0 1
54116: PPUSH
54117: LD_OWVAR 3
54121: PUSH
54122: LD_VAR 0 1
54126: DIFF
54127: PPUSH
54128: LD_VAR 0 1
54132: PPUSH
54133: CALL_OW 74
54137: PPUSH
54138: CALL_OW 115
// wait ( 0 0$20 ) ;
54142: LD_INT 700
54144: PPUSH
54145: CALL_OW 67
// SetSide ( un , your_side ) ;
54149: LD_VAR 0 1
54153: PPUSH
54154: LD_OWVAR 2
54158: PPUSH
54159: CALL_OW 235
// end ;
54163: PPOPN 2
54165: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54166: LD_EXP 28
54170: PUSH
54171: LD_EXP 61
54175: AND
54176: IFFALSE 54282
54178: GO 54180
54180: DISABLE
54181: LD_INT 0
54183: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54184: LD_ADDR_VAR 0 1
54188: PUSH
54189: LD_INT 22
54191: PUSH
54192: LD_OWVAR 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 30
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 30
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PPUSH
54233: CALL_OW 69
54237: ST_TO_ADDR
// if not depot then
54238: LD_VAR 0 1
54242: NOT
54243: IFFALSE 54247
// exit ;
54245: GO 54282
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54247: LD_VAR 0 1
54251: PUSH
54252: LD_INT 1
54254: ARRAY
54255: PPUSH
54256: CALL_OW 250
54260: PPUSH
54261: LD_VAR 0 1
54265: PUSH
54266: LD_INT 1
54268: ARRAY
54269: PPUSH
54270: CALL_OW 251
54274: PPUSH
54275: LD_INT 70
54277: PPUSH
54278: CALL_OW 495
// end ;
54282: PPOPN 1
54284: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54285: LD_EXP 28
54289: PUSH
54290: LD_EXP 62
54294: AND
54295: IFFALSE 54506
54297: GO 54299
54299: DISABLE
54300: LD_INT 0
54302: PPUSH
54303: PPUSH
54304: PPUSH
54305: PPUSH
54306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54307: LD_ADDR_VAR 0 5
54311: PUSH
54312: LD_INT 22
54314: PUSH
54315: LD_OWVAR 2
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 21
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PPUSH
54338: CALL_OW 69
54342: ST_TO_ADDR
// if not tmp then
54343: LD_VAR 0 5
54347: NOT
54348: IFFALSE 54352
// exit ;
54350: GO 54506
// for i in tmp do
54352: LD_ADDR_VAR 0 1
54356: PUSH
54357: LD_VAR 0 5
54361: PUSH
54362: FOR_IN
54363: IFFALSE 54504
// begin d := rand ( 0 , 5 ) ;
54365: LD_ADDR_VAR 0 4
54369: PUSH
54370: LD_INT 0
54372: PPUSH
54373: LD_INT 5
54375: PPUSH
54376: CALL_OW 12
54380: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54381: LD_ADDR_VAR 0 2
54385: PUSH
54386: LD_VAR 0 1
54390: PPUSH
54391: CALL_OW 250
54395: PPUSH
54396: LD_VAR 0 4
54400: PPUSH
54401: LD_INT 3
54403: PPUSH
54404: LD_INT 12
54406: PPUSH
54407: CALL_OW 12
54411: PPUSH
54412: CALL_OW 272
54416: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54417: LD_ADDR_VAR 0 3
54421: PUSH
54422: LD_VAR 0 1
54426: PPUSH
54427: CALL_OW 251
54431: PPUSH
54432: LD_VAR 0 4
54436: PPUSH
54437: LD_INT 3
54439: PPUSH
54440: LD_INT 12
54442: PPUSH
54443: CALL_OW 12
54447: PPUSH
54448: CALL_OW 273
54452: ST_TO_ADDR
// if ValidHex ( x , y ) then
54453: LD_VAR 0 2
54457: PPUSH
54458: LD_VAR 0 3
54462: PPUSH
54463: CALL_OW 488
54467: IFFALSE 54502
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54469: LD_VAR 0 1
54473: PPUSH
54474: LD_VAR 0 2
54478: PPUSH
54479: LD_VAR 0 3
54483: PPUSH
54484: LD_INT 3
54486: PPUSH
54487: LD_INT 6
54489: PPUSH
54490: CALL_OW 12
54494: PPUSH
54495: LD_INT 1
54497: PPUSH
54498: CALL_OW 483
// end ;
54502: GO 54362
54504: POP
54505: POP
// end ;
54506: PPOPN 5
54508: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54509: LD_EXP 28
54513: PUSH
54514: LD_EXP 63
54518: AND
54519: IFFALSE 54613
54521: GO 54523
54523: DISABLE
54524: LD_INT 0
54526: PPUSH
54527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54528: LD_ADDR_VAR 0 2
54532: PUSH
54533: LD_INT 22
54535: PUSH
54536: LD_OWVAR 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 32
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 21
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: PPUSH
54570: CALL_OW 69
54574: ST_TO_ADDR
// if not tmp then
54575: LD_VAR 0 2
54579: NOT
54580: IFFALSE 54584
// exit ;
54582: GO 54613
// for i in tmp do
54584: LD_ADDR_VAR 0 1
54588: PUSH
54589: LD_VAR 0 2
54593: PUSH
54594: FOR_IN
54595: IFFALSE 54611
// SetFuel ( i , 0 ) ;
54597: LD_VAR 0 1
54601: PPUSH
54602: LD_INT 0
54604: PPUSH
54605: CALL_OW 240
54609: GO 54594
54611: POP
54612: POP
// end ;
54613: PPOPN 2
54615: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54616: LD_EXP 28
54620: PUSH
54621: LD_EXP 64
54625: AND
54626: IFFALSE 54692
54628: GO 54630
54630: DISABLE
54631: LD_INT 0
54633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54634: LD_ADDR_VAR 0 1
54638: PUSH
54639: LD_INT 22
54641: PUSH
54642: LD_OWVAR 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 30
54653: PUSH
54654: LD_INT 29
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PPUSH
54665: CALL_OW 69
54669: ST_TO_ADDR
// if not tmp then
54670: LD_VAR 0 1
54674: NOT
54675: IFFALSE 54679
// exit ;
54677: GO 54692
// DestroyUnit ( tmp [ 1 ] ) ;
54679: LD_VAR 0 1
54683: PUSH
54684: LD_INT 1
54686: ARRAY
54687: PPUSH
54688: CALL_OW 65
// end ;
54692: PPOPN 1
54694: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54695: LD_EXP 28
54699: PUSH
54700: LD_EXP 66
54704: AND
54705: IFFALSE 54834
54707: GO 54709
54709: DISABLE
54710: LD_INT 0
54712: PPUSH
// begin uc_side := 0 ;
54713: LD_ADDR_OWVAR 20
54717: PUSH
54718: LD_INT 0
54720: ST_TO_ADDR
// uc_nation := nation_arabian ;
54721: LD_ADDR_OWVAR 21
54725: PUSH
54726: LD_INT 2
54728: ST_TO_ADDR
// hc_gallery :=  ;
54729: LD_ADDR_OWVAR 33
54733: PUSH
54734: LD_STRING 
54736: ST_TO_ADDR
// hc_name :=  ;
54737: LD_ADDR_OWVAR 26
54741: PUSH
54742: LD_STRING 
54744: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
54745: LD_INT 1
54747: PPUSH
54748: LD_INT 11
54750: PPUSH
54751: LD_INT 10
54753: PPUSH
54754: CALL_OW 380
// un := CreateHuman ;
54758: LD_ADDR_VAR 0 1
54762: PUSH
54763: CALL_OW 44
54767: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54768: LD_VAR 0 1
54772: PPUSH
54773: LD_INT 1
54775: PPUSH
54776: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54780: LD_INT 35
54782: PPUSH
54783: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54787: LD_VAR 0 1
54791: PPUSH
54792: LD_INT 22
54794: PUSH
54795: LD_OWVAR 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PPUSH
54804: CALL_OW 69
54808: PPUSH
54809: LD_VAR 0 1
54813: PPUSH
54814: CALL_OW 74
54818: PPUSH
54819: CALL_OW 115
// until IsDead ( un ) ;
54823: LD_VAR 0 1
54827: PPUSH
54828: CALL_OW 301
54832: IFFALSE 54780
// end ;
54834: PPOPN 1
54836: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54837: LD_EXP 28
54841: PUSH
54842: LD_EXP 68
54846: AND
54847: IFFALSE 54859
54849: GO 54851
54851: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54852: LD_STRING earthquake(getX(game), 0, 32)
54854: PPUSH
54855: CALL_OW 559
54859: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54860: LD_EXP 28
54864: PUSH
54865: LD_EXP 69
54869: AND
54870: IFFALSE 54961
54872: GO 54874
54874: DISABLE
54875: LD_INT 0
54877: PPUSH
// begin enable ;
54878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54879: LD_ADDR_VAR 0 1
54883: PUSH
54884: LD_INT 22
54886: PUSH
54887: LD_OWVAR 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 21
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 33
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: PPUSH
54921: CALL_OW 69
54925: ST_TO_ADDR
// if not tmp then
54926: LD_VAR 0 1
54930: NOT
54931: IFFALSE 54935
// exit ;
54933: GO 54961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54935: LD_VAR 0 1
54939: PUSH
54940: LD_INT 1
54942: PPUSH
54943: LD_VAR 0 1
54947: PPUSH
54948: CALL_OW 12
54952: ARRAY
54953: PPUSH
54954: LD_INT 1
54956: PPUSH
54957: CALL_OW 234
// end ;
54961: PPOPN 1
54963: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
54964: LD_EXP 28
54968: PUSH
54969: LD_EXP 70
54973: AND
54974: IFFALSE 55115
54976: GO 54978
54978: DISABLE
54979: LD_INT 0
54981: PPUSH
54982: PPUSH
54983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54984: LD_ADDR_VAR 0 3
54988: PUSH
54989: LD_INT 22
54991: PUSH
54992: LD_OWVAR 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 25
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PPUSH
55015: CALL_OW 69
55019: ST_TO_ADDR
// if not tmp then
55020: LD_VAR 0 3
55024: NOT
55025: IFFALSE 55029
// exit ;
55027: GO 55115
// un := tmp [ rand ( 1 , tmp ) ] ;
55029: LD_ADDR_VAR 0 2
55033: PUSH
55034: LD_VAR 0 3
55038: PUSH
55039: LD_INT 1
55041: PPUSH
55042: LD_VAR 0 3
55046: PPUSH
55047: CALL_OW 12
55051: ARRAY
55052: ST_TO_ADDR
// if Crawls ( un ) then
55053: LD_VAR 0 2
55057: PPUSH
55058: CALL_OW 318
55062: IFFALSE 55073
// ComWalk ( un ) ;
55064: LD_VAR 0 2
55068: PPUSH
55069: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55073: LD_VAR 0 2
55077: PPUSH
55078: LD_INT 9
55080: PPUSH
55081: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55085: LD_INT 28
55087: PPUSH
55088: LD_OWVAR 2
55092: PPUSH
55093: LD_INT 2
55095: PPUSH
55096: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55100: LD_INT 29
55102: PPUSH
55103: LD_OWVAR 2
55107: PPUSH
55108: LD_INT 2
55110: PPUSH
55111: CALL_OW 322
// end ;
55115: PPOPN 3
55117: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55118: LD_EXP 28
55122: PUSH
55123: LD_EXP 71
55127: AND
55128: IFFALSE 55239
55130: GO 55132
55132: DISABLE
55133: LD_INT 0
55135: PPUSH
55136: PPUSH
55137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55138: LD_ADDR_VAR 0 3
55142: PUSH
55143: LD_INT 22
55145: PUSH
55146: LD_OWVAR 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 25
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PPUSH
55169: CALL_OW 69
55173: ST_TO_ADDR
// if not tmp then
55174: LD_VAR 0 3
55178: NOT
55179: IFFALSE 55183
// exit ;
55181: GO 55239
// un := tmp [ rand ( 1 , tmp ) ] ;
55183: LD_ADDR_VAR 0 2
55187: PUSH
55188: LD_VAR 0 3
55192: PUSH
55193: LD_INT 1
55195: PPUSH
55196: LD_VAR 0 3
55200: PPUSH
55201: CALL_OW 12
55205: ARRAY
55206: ST_TO_ADDR
// if Crawls ( un ) then
55207: LD_VAR 0 2
55211: PPUSH
55212: CALL_OW 318
55216: IFFALSE 55227
// ComWalk ( un ) ;
55218: LD_VAR 0 2
55222: PPUSH
55223: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55227: LD_VAR 0 2
55231: PPUSH
55232: LD_INT 8
55234: PPUSH
55235: CALL_OW 336
// end ;
55239: PPOPN 3
55241: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55242: LD_EXP 28
55246: PUSH
55247: LD_EXP 72
55251: AND
55252: IFFALSE 55396
55254: GO 55256
55256: DISABLE
55257: LD_INT 0
55259: PPUSH
55260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55261: LD_ADDR_VAR 0 2
55265: PUSH
55266: LD_INT 22
55268: PUSH
55269: LD_OWVAR 2
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 21
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 34
55293: PUSH
55294: LD_INT 12
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 34
55303: PUSH
55304: LD_INT 51
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 34
55313: PUSH
55314: LD_INT 32
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: PPUSH
55332: CALL_OW 69
55336: ST_TO_ADDR
// if not tmp then
55337: LD_VAR 0 2
55341: NOT
55342: IFFALSE 55346
// exit ;
55344: GO 55396
// for i in tmp do
55346: LD_ADDR_VAR 0 1
55350: PUSH
55351: LD_VAR 0 2
55355: PUSH
55356: FOR_IN
55357: IFFALSE 55394
// if GetCargo ( i , mat_artifact ) = 0 then
55359: LD_VAR 0 1
55363: PPUSH
55364: LD_INT 4
55366: PPUSH
55367: CALL_OW 289
55371: PUSH
55372: LD_INT 0
55374: EQUAL
55375: IFFALSE 55392
// SetCargo ( i , mat_siberit , 100 ) ;
55377: LD_VAR 0 1
55381: PPUSH
55382: LD_INT 3
55384: PPUSH
55385: LD_INT 100
55387: PPUSH
55388: CALL_OW 290
55392: GO 55356
55394: POP
55395: POP
// end ;
55396: PPOPN 2
55398: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55399: LD_EXP 28
55403: PUSH
55404: LD_EXP 73
55408: AND
55409: IFFALSE 55592
55411: GO 55413
55413: DISABLE
55414: LD_INT 0
55416: PPUSH
55417: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55418: LD_ADDR_VAR 0 2
55422: PUSH
55423: LD_INT 22
55425: PUSH
55426: LD_OWVAR 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PPUSH
55435: CALL_OW 69
55439: ST_TO_ADDR
// if not tmp then
55440: LD_VAR 0 2
55444: NOT
55445: IFFALSE 55449
// exit ;
55447: GO 55592
// for i := 1 to 2 do
55449: LD_ADDR_VAR 0 1
55453: PUSH
55454: DOUBLE
55455: LD_INT 1
55457: DEC
55458: ST_TO_ADDR
55459: LD_INT 2
55461: PUSH
55462: FOR_TO
55463: IFFALSE 55590
// begin uc_side := your_side ;
55465: LD_ADDR_OWVAR 20
55469: PUSH
55470: LD_OWVAR 2
55474: ST_TO_ADDR
// uc_nation := nation_american ;
55475: LD_ADDR_OWVAR 21
55479: PUSH
55480: LD_INT 1
55482: ST_TO_ADDR
// vc_chassis := us_morphling ;
55483: LD_ADDR_OWVAR 37
55487: PUSH
55488: LD_INT 5
55490: ST_TO_ADDR
// vc_engine := engine_siberite ;
55491: LD_ADDR_OWVAR 39
55495: PUSH
55496: LD_INT 3
55498: ST_TO_ADDR
// vc_control := control_computer ;
55499: LD_ADDR_OWVAR 38
55503: PUSH
55504: LD_INT 3
55506: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55507: LD_ADDR_OWVAR 40
55511: PUSH
55512: LD_INT 10
55514: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55515: LD_VAR 0 2
55519: PUSH
55520: LD_INT 1
55522: ARRAY
55523: PPUSH
55524: CALL_OW 310
55528: NOT
55529: IFFALSE 55576
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55531: CALL_OW 45
55535: PPUSH
55536: LD_VAR 0 2
55540: PUSH
55541: LD_INT 1
55543: ARRAY
55544: PPUSH
55545: CALL_OW 250
55549: PPUSH
55550: LD_VAR 0 2
55554: PUSH
55555: LD_INT 1
55557: ARRAY
55558: PPUSH
55559: CALL_OW 251
55563: PPUSH
55564: LD_INT 12
55566: PPUSH
55567: LD_INT 1
55569: PPUSH
55570: CALL_OW 50
55574: GO 55588
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55576: CALL_OW 45
55580: PPUSH
55581: LD_INT 1
55583: PPUSH
55584: CALL_OW 51
// end ;
55588: GO 55462
55590: POP
55591: POP
// end ;
55592: PPOPN 2
55594: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55595: LD_EXP 28
55599: PUSH
55600: LD_EXP 74
55604: AND
55605: IFFALSE 55827
55607: GO 55609
55609: DISABLE
55610: LD_INT 0
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55618: LD_ADDR_VAR 0 6
55622: PUSH
55623: LD_INT 22
55625: PUSH
55626: LD_OWVAR 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 21
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: LD_INT 23
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: PPUSH
55667: CALL_OW 69
55671: ST_TO_ADDR
// if not tmp then
55672: LD_VAR 0 6
55676: NOT
55677: IFFALSE 55681
// exit ;
55679: GO 55827
// s1 := rand ( 1 , 4 ) ;
55681: LD_ADDR_VAR 0 2
55685: PUSH
55686: LD_INT 1
55688: PPUSH
55689: LD_INT 4
55691: PPUSH
55692: CALL_OW 12
55696: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
55697: LD_ADDR_VAR 0 4
55701: PUSH
55702: LD_VAR 0 6
55706: PUSH
55707: LD_INT 1
55709: ARRAY
55710: PPUSH
55711: LD_VAR 0 2
55715: PPUSH
55716: CALL_OW 259
55720: ST_TO_ADDR
// if s1 = 1 then
55721: LD_VAR 0 2
55725: PUSH
55726: LD_INT 1
55728: EQUAL
55729: IFFALSE 55749
// s2 := rand ( 2 , 4 ) else
55731: LD_ADDR_VAR 0 3
55735: PUSH
55736: LD_INT 2
55738: PPUSH
55739: LD_INT 4
55741: PPUSH
55742: CALL_OW 12
55746: ST_TO_ADDR
55747: GO 55757
// s2 := 1 ;
55749: LD_ADDR_VAR 0 3
55753: PUSH
55754: LD_INT 1
55756: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
55757: LD_ADDR_VAR 0 5
55761: PUSH
55762: LD_VAR 0 6
55766: PUSH
55767: LD_INT 1
55769: ARRAY
55770: PPUSH
55771: LD_VAR 0 3
55775: PPUSH
55776: CALL_OW 259
55780: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
55781: LD_VAR 0 6
55785: PUSH
55786: LD_INT 1
55788: ARRAY
55789: PPUSH
55790: LD_VAR 0 2
55794: PPUSH
55795: LD_VAR 0 5
55799: PPUSH
55800: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55804: LD_VAR 0 6
55808: PUSH
55809: LD_INT 1
55811: ARRAY
55812: PPUSH
55813: LD_VAR 0 3
55817: PPUSH
55818: LD_VAR 0 4
55822: PPUSH
55823: CALL_OW 237
// end ;
55827: PPOPN 6
55829: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55830: LD_EXP 28
55834: PUSH
55835: LD_EXP 75
55839: AND
55840: IFFALSE 55919
55842: GO 55844
55844: DISABLE
55845: LD_INT 0
55847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
55848: LD_ADDR_VAR 0 1
55852: PUSH
55853: LD_INT 22
55855: PUSH
55856: LD_OWVAR 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 30
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PPUSH
55879: CALL_OW 69
55883: ST_TO_ADDR
// if not tmp then
55884: LD_VAR 0 1
55888: NOT
55889: IFFALSE 55893
// exit ;
55891: GO 55919
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55893: LD_VAR 0 1
55897: PUSH
55898: LD_INT 1
55900: PPUSH
55901: LD_VAR 0 1
55905: PPUSH
55906: CALL_OW 12
55910: ARRAY
55911: PPUSH
55912: LD_INT 1
55914: PPUSH
55915: CALL_OW 234
// end ;
55919: PPOPN 1
55921: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
55922: LD_EXP 28
55926: PUSH
55927: LD_EXP 76
55931: AND
55932: IFFALSE 56044
55934: GO 55936
55936: DISABLE
55937: LD_INT 0
55939: PPUSH
55940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
55941: LD_ADDR_VAR 0 2
55945: PUSH
55946: LD_INT 22
55948: PUSH
55949: LD_OWVAR 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 30
55963: PUSH
55964: LD_INT 27
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 30
55973: PUSH
55974: LD_INT 26
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 30
55983: PUSH
55984: LD_INT 28
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PPUSH
56001: CALL_OW 69
56005: ST_TO_ADDR
// if not tmp then
56006: LD_VAR 0 2
56010: NOT
56011: IFFALSE 56015
// exit ;
56013: GO 56044
// for i in tmp do
56015: LD_ADDR_VAR 0 1
56019: PUSH
56020: LD_VAR 0 2
56024: PUSH
56025: FOR_IN
56026: IFFALSE 56042
// SetLives ( i , 1 ) ;
56028: LD_VAR 0 1
56032: PPUSH
56033: LD_INT 1
56035: PPUSH
56036: CALL_OW 234
56040: GO 56025
56042: POP
56043: POP
// end ;
56044: PPOPN 2
56046: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56047: LD_EXP 28
56051: PUSH
56052: LD_EXP 77
56056: AND
56057: IFFALSE 56344
56059: GO 56061
56061: DISABLE
56062: LD_INT 0
56064: PPUSH
56065: PPUSH
56066: PPUSH
// begin i := rand ( 1 , 7 ) ;
56067: LD_ADDR_VAR 0 1
56071: PUSH
56072: LD_INT 1
56074: PPUSH
56075: LD_INT 7
56077: PPUSH
56078: CALL_OW 12
56082: ST_TO_ADDR
// case i of 1 :
56083: LD_VAR 0 1
56087: PUSH
56088: LD_INT 1
56090: DOUBLE
56091: EQUAL
56092: IFTRUE 56096
56094: GO 56106
56096: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56097: LD_STRING earthquake(getX(game), 0, 32)
56099: PPUSH
56100: CALL_OW 559
56104: GO 56344
56106: LD_INT 2
56108: DOUBLE
56109: EQUAL
56110: IFTRUE 56114
56112: GO 56128
56114: POP
// begin ToLua ( displayStucuk(); ) ;
56115: LD_STRING displayStucuk();
56117: PPUSH
56118: CALL_OW 559
// ResetFog ;
56122: CALL_OW 335
// end ; 3 :
56126: GO 56344
56128: LD_INT 3
56130: DOUBLE
56131: EQUAL
56132: IFTRUE 56136
56134: GO 56240
56136: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56137: LD_ADDR_VAR 0 2
56141: PUSH
56142: LD_INT 22
56144: PUSH
56145: LD_OWVAR 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 25
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PPUSH
56168: CALL_OW 69
56172: ST_TO_ADDR
// if not tmp then
56173: LD_VAR 0 2
56177: NOT
56178: IFFALSE 56182
// exit ;
56180: GO 56344
// un := tmp [ rand ( 1 , tmp ) ] ;
56182: LD_ADDR_VAR 0 3
56186: PUSH
56187: LD_VAR 0 2
56191: PUSH
56192: LD_INT 1
56194: PPUSH
56195: LD_VAR 0 2
56199: PPUSH
56200: CALL_OW 12
56204: ARRAY
56205: ST_TO_ADDR
// if Crawls ( un ) then
56206: LD_VAR 0 3
56210: PPUSH
56211: CALL_OW 318
56215: IFFALSE 56226
// ComWalk ( un ) ;
56217: LD_VAR 0 3
56221: PPUSH
56222: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56226: LD_VAR 0 3
56230: PPUSH
56231: LD_INT 8
56233: PPUSH
56234: CALL_OW 336
// end ; 4 :
56238: GO 56344
56240: LD_INT 4
56242: DOUBLE
56243: EQUAL
56244: IFTRUE 56248
56246: GO 56322
56248: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56249: LD_ADDR_VAR 0 2
56253: PUSH
56254: LD_INT 22
56256: PUSH
56257: LD_OWVAR 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 30
56268: PUSH
56269: LD_INT 29
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PPUSH
56280: CALL_OW 69
56284: ST_TO_ADDR
// if not tmp then
56285: LD_VAR 0 2
56289: NOT
56290: IFFALSE 56294
// exit ;
56292: GO 56344
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56294: LD_VAR 0 2
56298: PUSH
56299: LD_INT 1
56301: ARRAY
56302: PPUSH
56303: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56307: LD_VAR 0 2
56311: PUSH
56312: LD_INT 1
56314: ARRAY
56315: PPUSH
56316: CALL_OW 65
// end ; 5 .. 7 :
56320: GO 56344
56322: LD_INT 5
56324: DOUBLE
56325: GREATEREQUAL
56326: IFFALSE 56334
56328: LD_INT 7
56330: DOUBLE
56331: LESSEQUAL
56332: IFTRUE 56336
56334: GO 56343
56336: POP
// StreamSibBomb ; end ;
56337: CALL 52581 0 0
56341: GO 56344
56343: POP
// end ;
56344: PPOPN 3
56346: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56347: LD_EXP 28
56351: PUSH
56352: LD_EXP 78
56356: AND
56357: IFFALSE 56513
56359: GO 56361
56361: DISABLE
56362: LD_INT 0
56364: PPUSH
56365: PPUSH
56366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56367: LD_ADDR_VAR 0 2
56371: PUSH
56372: LD_INT 81
56374: PUSH
56375: LD_OWVAR 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: LD_INT 21
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 21
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PPUSH
56416: CALL_OW 69
56420: ST_TO_ADDR
// if not tmp then
56421: LD_VAR 0 2
56425: NOT
56426: IFFALSE 56430
// exit ;
56428: GO 56513
// p := 0 ;
56430: LD_ADDR_VAR 0 3
56434: PUSH
56435: LD_INT 0
56437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56438: LD_INT 35
56440: PPUSH
56441: CALL_OW 67
// p := p + 1 ;
56445: LD_ADDR_VAR 0 3
56449: PUSH
56450: LD_VAR 0 3
56454: PUSH
56455: LD_INT 1
56457: PLUS
56458: ST_TO_ADDR
// for i in tmp do
56459: LD_ADDR_VAR 0 1
56463: PUSH
56464: LD_VAR 0 2
56468: PUSH
56469: FOR_IN
56470: IFFALSE 56501
// if GetLives ( i ) < 1000 then
56472: LD_VAR 0 1
56476: PPUSH
56477: CALL_OW 256
56481: PUSH
56482: LD_INT 1000
56484: LESS
56485: IFFALSE 56499
// SetLives ( i , 1000 ) ;
56487: LD_VAR 0 1
56491: PPUSH
56492: LD_INT 1000
56494: PPUSH
56495: CALL_OW 234
56499: GO 56469
56501: POP
56502: POP
// until p > 20 ;
56503: LD_VAR 0 3
56507: PUSH
56508: LD_INT 20
56510: GREATER
56511: IFFALSE 56438
// end ;
56513: PPOPN 3
56515: END
// every 0 0$1 trigger StreamModeActive and sTime do
56516: LD_EXP 28
56520: PUSH
56521: LD_EXP 79
56525: AND
56526: IFFALSE 56561
56528: GO 56530
56530: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56531: LD_INT 28
56533: PPUSH
56534: LD_OWVAR 2
56538: PPUSH
56539: LD_INT 2
56541: PPUSH
56542: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56546: LD_INT 30
56548: PPUSH
56549: LD_OWVAR 2
56553: PPUSH
56554: LD_INT 2
56556: PPUSH
56557: CALL_OW 322
// end ;
56561: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56562: LD_EXP 28
56566: PUSH
56567: LD_EXP 80
56571: AND
56572: IFFALSE 56693
56574: GO 56576
56576: DISABLE
56577: LD_INT 0
56579: PPUSH
56580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56581: LD_ADDR_VAR 0 2
56585: PUSH
56586: LD_INT 22
56588: PUSH
56589: LD_OWVAR 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 21
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: LD_INT 23
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 69
56634: ST_TO_ADDR
// if not tmp then
56635: LD_VAR 0 2
56639: NOT
56640: IFFALSE 56644
// exit ;
56642: GO 56693
// for i in tmp do
56644: LD_ADDR_VAR 0 1
56648: PUSH
56649: LD_VAR 0 2
56653: PUSH
56654: FOR_IN
56655: IFFALSE 56691
// begin if Crawls ( i ) then
56657: LD_VAR 0 1
56661: PPUSH
56662: CALL_OW 318
56666: IFFALSE 56677
// ComWalk ( i ) ;
56668: LD_VAR 0 1
56672: PPUSH
56673: CALL_OW 138
// SetClass ( i , 2 ) ;
56677: LD_VAR 0 1
56681: PPUSH
56682: LD_INT 2
56684: PPUSH
56685: CALL_OW 336
// end ;
56689: GO 56654
56691: POP
56692: POP
// end ;
56693: PPOPN 2
56695: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56696: LD_EXP 28
56700: PUSH
56701: LD_EXP 81
56705: AND
56706: IFFALSE 56994
56708: GO 56710
56710: DISABLE
56711: LD_INT 0
56713: PPUSH
56714: PPUSH
56715: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
56716: LD_OWVAR 2
56720: PPUSH
56721: LD_INT 9
56723: PPUSH
56724: LD_INT 1
56726: PPUSH
56727: LD_INT 1
56729: PPUSH
56730: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56734: LD_INT 9
56736: PPUSH
56737: LD_OWVAR 2
56741: PPUSH
56742: CALL_OW 343
// uc_side := 9 ;
56746: LD_ADDR_OWVAR 20
56750: PUSH
56751: LD_INT 9
56753: ST_TO_ADDR
// uc_nation := 2 ;
56754: LD_ADDR_OWVAR 21
56758: PUSH
56759: LD_INT 2
56761: ST_TO_ADDR
// hc_name := Dark Warrior ;
56762: LD_ADDR_OWVAR 26
56766: PUSH
56767: LD_STRING Dark Warrior
56769: ST_TO_ADDR
// hc_gallery :=  ;
56770: LD_ADDR_OWVAR 33
56774: PUSH
56775: LD_STRING 
56777: ST_TO_ADDR
// hc_noskilllimit := true ;
56778: LD_ADDR_OWVAR 76
56782: PUSH
56783: LD_INT 1
56785: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56786: LD_ADDR_OWVAR 31
56790: PUSH
56791: LD_INT 30
56793: PUSH
56794: LD_INT 30
56796: PUSH
56797: LD_INT 30
56799: PUSH
56800: LD_INT 30
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// un := CreateHuman ;
56809: LD_ADDR_VAR 0 3
56813: PUSH
56814: CALL_OW 44
56818: ST_TO_ADDR
// hc_noskilllimit := false ;
56819: LD_ADDR_OWVAR 76
56823: PUSH
56824: LD_INT 0
56826: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56827: LD_VAR 0 3
56831: PPUSH
56832: LD_INT 1
56834: PPUSH
56835: CALL_OW 51
// ToLua ( playRanger() ) ;
56839: LD_STRING playRanger()
56841: PPUSH
56842: CALL_OW 559
// p := 0 ;
56846: LD_ADDR_VAR 0 2
56850: PUSH
56851: LD_INT 0
56853: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56854: LD_INT 35
56856: PPUSH
56857: CALL_OW 67
// p := p + 1 ;
56861: LD_ADDR_VAR 0 2
56865: PUSH
56866: LD_VAR 0 2
56870: PUSH
56871: LD_INT 1
56873: PLUS
56874: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56875: LD_VAR 0 3
56879: PPUSH
56880: CALL_OW 256
56884: PUSH
56885: LD_INT 1000
56887: LESS
56888: IFFALSE 56902
// SetLives ( un , 1000 ) ;
56890: LD_VAR 0 3
56894: PPUSH
56895: LD_INT 1000
56897: PPUSH
56898: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
56902: LD_VAR 0 3
56906: PPUSH
56907: LD_INT 81
56909: PUSH
56910: LD_OWVAR 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 91
56921: PUSH
56922: LD_VAR 0 3
56926: PUSH
56927: LD_INT 30
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PPUSH
56939: CALL_OW 69
56943: PPUSH
56944: LD_VAR 0 3
56948: PPUSH
56949: CALL_OW 74
56953: PPUSH
56954: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
56958: LD_VAR 0 2
56962: PUSH
56963: LD_INT 80
56965: GREATER
56966: PUSH
56967: LD_VAR 0 3
56971: PPUSH
56972: CALL_OW 301
56976: OR
56977: IFFALSE 56854
// if un then
56979: LD_VAR 0 3
56983: IFFALSE 56994
// RemoveUnit ( un ) ;
56985: LD_VAR 0 3
56989: PPUSH
56990: CALL_OW 64
// end ;
56994: PPOPN 3
56996: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
56997: LD_EXP 82
57001: IFFALSE 57117
57003: GO 57005
57005: DISABLE
57006: LD_INT 0
57008: PPUSH
57009: PPUSH
57010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57011: LD_ADDR_VAR 0 2
57015: PUSH
57016: LD_INT 81
57018: PUSH
57019: LD_OWVAR 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 21
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PPUSH
57042: CALL_OW 69
57046: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57047: LD_STRING playComputer()
57049: PPUSH
57050: CALL_OW 559
// if not tmp then
57054: LD_VAR 0 2
57058: NOT
57059: IFFALSE 57063
// exit ;
57061: GO 57117
// for i in tmp do
57063: LD_ADDR_VAR 0 1
57067: PUSH
57068: LD_VAR 0 2
57072: PUSH
57073: FOR_IN
57074: IFFALSE 57115
// for j := 1 to 4 do
57076: LD_ADDR_VAR 0 3
57080: PUSH
57081: DOUBLE
57082: LD_INT 1
57084: DEC
57085: ST_TO_ADDR
57086: LD_INT 4
57088: PUSH
57089: FOR_TO
57090: IFFALSE 57111
// SetSkill ( i , j , 10 ) ;
57092: LD_VAR 0 1
57096: PPUSH
57097: LD_VAR 0 3
57101: PPUSH
57102: LD_INT 10
57104: PPUSH
57105: CALL_OW 237
57109: GO 57089
57111: POP
57112: POP
57113: GO 57073
57115: POP
57116: POP
// end ;
57117: PPOPN 3
57119: END
// every 0 0$1 trigger s30 do var i , tmp ;
57120: LD_EXP 83
57124: IFFALSE 57193
57126: GO 57128
57128: DISABLE
57129: LD_INT 0
57131: PPUSH
57132: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57133: LD_ADDR_VAR 0 2
57137: PUSH
57138: LD_INT 22
57140: PUSH
57141: LD_OWVAR 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PPUSH
57150: CALL_OW 69
57154: ST_TO_ADDR
// if not tmp then
57155: LD_VAR 0 2
57159: NOT
57160: IFFALSE 57164
// exit ;
57162: GO 57193
// for i in tmp do
57164: LD_ADDR_VAR 0 1
57168: PUSH
57169: LD_VAR 0 2
57173: PUSH
57174: FOR_IN
57175: IFFALSE 57191
// SetLives ( i , 300 ) ;
57177: LD_VAR 0 1
57181: PPUSH
57182: LD_INT 300
57184: PPUSH
57185: CALL_OW 234
57189: GO 57174
57191: POP
57192: POP
// end ;
57193: PPOPN 2
57195: END
// every 0 0$1 trigger s60 do var i , tmp ;
57196: LD_EXP 84
57200: IFFALSE 57269
57202: GO 57204
57204: DISABLE
57205: LD_INT 0
57207: PPUSH
57208: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57209: LD_ADDR_VAR 0 2
57213: PUSH
57214: LD_INT 22
57216: PUSH
57217: LD_OWVAR 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PPUSH
57226: CALL_OW 69
57230: ST_TO_ADDR
// if not tmp then
57231: LD_VAR 0 2
57235: NOT
57236: IFFALSE 57240
// exit ;
57238: GO 57269
// for i in tmp do
57240: LD_ADDR_VAR 0 1
57244: PUSH
57245: LD_VAR 0 2
57249: PUSH
57250: FOR_IN
57251: IFFALSE 57267
// SetLives ( i , 600 ) ;
57253: LD_VAR 0 1
57257: PPUSH
57258: LD_INT 600
57260: PPUSH
57261: CALL_OW 234
57265: GO 57250
57267: POP
57268: POP
// end ;
57269: PPOPN 2
57271: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57272: LD_INT 0
57274: PPUSH
// case cmd of 301 :
57275: LD_VAR 0 1
57279: PUSH
57280: LD_INT 301
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57288
57286: GO 57320
57288: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57289: LD_VAR 0 6
57293: PPUSH
57294: LD_VAR 0 7
57298: PPUSH
57299: LD_VAR 0 8
57303: PPUSH
57304: LD_VAR 0 4
57308: PPUSH
57309: LD_VAR 0 5
57313: PPUSH
57314: CALL 58521 0 5
57318: GO 57441
57320: LD_INT 302
57322: DOUBLE
57323: EQUAL
57324: IFTRUE 57328
57326: GO 57365
57328: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57329: LD_VAR 0 6
57333: PPUSH
57334: LD_VAR 0 7
57338: PPUSH
57339: LD_VAR 0 8
57343: PPUSH
57344: LD_VAR 0 9
57348: PPUSH
57349: LD_VAR 0 4
57353: PPUSH
57354: LD_VAR 0 5
57358: PPUSH
57359: CALL 58612 0 6
57363: GO 57441
57365: LD_INT 303
57367: DOUBLE
57368: EQUAL
57369: IFTRUE 57373
57371: GO 57410
57373: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57374: LD_VAR 0 6
57378: PPUSH
57379: LD_VAR 0 7
57383: PPUSH
57384: LD_VAR 0 8
57388: PPUSH
57389: LD_VAR 0 9
57393: PPUSH
57394: LD_VAR 0 4
57398: PPUSH
57399: LD_VAR 0 5
57403: PPUSH
57404: CALL 57446 0 6
57408: GO 57441
57410: LD_INT 304
57412: DOUBLE
57413: EQUAL
57414: IFTRUE 57418
57416: GO 57440
57418: POP
// hHackTeleport ( unit , x , y ) ; end ;
57419: LD_VAR 0 2
57423: PPUSH
57424: LD_VAR 0 4
57428: PPUSH
57429: LD_VAR 0 5
57433: PPUSH
57434: CALL 59205 0 3
57438: GO 57441
57440: POP
// end ;
57441: LD_VAR 0 12
57445: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57446: LD_INT 0
57448: PPUSH
57449: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57450: LD_VAR 0 1
57454: PUSH
57455: LD_INT 1
57457: LESS
57458: PUSH
57459: LD_VAR 0 1
57463: PUSH
57464: LD_INT 3
57466: GREATER
57467: OR
57468: PUSH
57469: LD_VAR 0 5
57473: PPUSH
57474: LD_VAR 0 6
57478: PPUSH
57479: CALL_OW 428
57483: OR
57484: IFFALSE 57488
// exit ;
57486: GO 58208
// uc_side := your_side ;
57488: LD_ADDR_OWVAR 20
57492: PUSH
57493: LD_OWVAR 2
57497: ST_TO_ADDR
// uc_nation := nation ;
57498: LD_ADDR_OWVAR 21
57502: PUSH
57503: LD_VAR 0 1
57507: ST_TO_ADDR
// bc_level = 1 ;
57508: LD_ADDR_OWVAR 43
57512: PUSH
57513: LD_INT 1
57515: ST_TO_ADDR
// case btype of 1 :
57516: LD_VAR 0 2
57520: PUSH
57521: LD_INT 1
57523: DOUBLE
57524: EQUAL
57525: IFTRUE 57529
57527: GO 57540
57529: POP
// bc_type := b_depot ; 2 :
57530: LD_ADDR_OWVAR 42
57534: PUSH
57535: LD_INT 0
57537: ST_TO_ADDR
57538: GO 58152
57540: LD_INT 2
57542: DOUBLE
57543: EQUAL
57544: IFTRUE 57548
57546: GO 57559
57548: POP
// bc_type := b_warehouse ; 3 :
57549: LD_ADDR_OWVAR 42
57553: PUSH
57554: LD_INT 1
57556: ST_TO_ADDR
57557: GO 58152
57559: LD_INT 3
57561: DOUBLE
57562: EQUAL
57563: IFTRUE 57567
57565: GO 57578
57567: POP
// bc_type := b_lab ; 4 .. 9 :
57568: LD_ADDR_OWVAR 42
57572: PUSH
57573: LD_INT 6
57575: ST_TO_ADDR
57576: GO 58152
57578: LD_INT 4
57580: DOUBLE
57581: GREATEREQUAL
57582: IFFALSE 57590
57584: LD_INT 9
57586: DOUBLE
57587: LESSEQUAL
57588: IFTRUE 57592
57590: GO 57644
57592: POP
// begin bc_type := b_lab_half ;
57593: LD_ADDR_OWVAR 42
57597: PUSH
57598: LD_INT 7
57600: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57601: LD_ADDR_OWVAR 44
57605: PUSH
57606: LD_INT 10
57608: PUSH
57609: LD_INT 11
57611: PUSH
57612: LD_INT 12
57614: PUSH
57615: LD_INT 15
57617: PUSH
57618: LD_INT 14
57620: PUSH
57621: LD_INT 13
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: PUSH
57632: LD_VAR 0 2
57636: PUSH
57637: LD_INT 3
57639: MINUS
57640: ARRAY
57641: ST_TO_ADDR
// end ; 10 .. 13 :
57642: GO 58152
57644: LD_INT 10
57646: DOUBLE
57647: GREATEREQUAL
57648: IFFALSE 57656
57650: LD_INT 13
57652: DOUBLE
57653: LESSEQUAL
57654: IFTRUE 57658
57656: GO 57735
57658: POP
// begin bc_type := b_lab_full ;
57659: LD_ADDR_OWVAR 42
57663: PUSH
57664: LD_INT 8
57666: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57667: LD_ADDR_OWVAR 44
57671: PUSH
57672: LD_INT 10
57674: PUSH
57675: LD_INT 12
57677: PUSH
57678: LD_INT 14
57680: PUSH
57681: LD_INT 13
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: PUSH
57690: LD_VAR 0 2
57694: PUSH
57695: LD_INT 9
57697: MINUS
57698: ARRAY
57699: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57700: LD_ADDR_OWVAR 45
57704: PUSH
57705: LD_INT 11
57707: PUSH
57708: LD_INT 15
57710: PUSH
57711: LD_INT 12
57713: PUSH
57714: LD_INT 15
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: PUSH
57723: LD_VAR 0 2
57727: PUSH
57728: LD_INT 9
57730: MINUS
57731: ARRAY
57732: ST_TO_ADDR
// end ; 14 :
57733: GO 58152
57735: LD_INT 14
57737: DOUBLE
57738: EQUAL
57739: IFTRUE 57743
57741: GO 57754
57743: POP
// bc_type := b_workshop ; 15 :
57744: LD_ADDR_OWVAR 42
57748: PUSH
57749: LD_INT 2
57751: ST_TO_ADDR
57752: GO 58152
57754: LD_INT 15
57756: DOUBLE
57757: EQUAL
57758: IFTRUE 57762
57760: GO 57773
57762: POP
// bc_type := b_factory ; 16 :
57763: LD_ADDR_OWVAR 42
57767: PUSH
57768: LD_INT 3
57770: ST_TO_ADDR
57771: GO 58152
57773: LD_INT 16
57775: DOUBLE
57776: EQUAL
57777: IFTRUE 57781
57779: GO 57792
57781: POP
// bc_type := b_ext_gun ; 17 :
57782: LD_ADDR_OWVAR 42
57786: PUSH
57787: LD_INT 17
57789: ST_TO_ADDR
57790: GO 58152
57792: LD_INT 17
57794: DOUBLE
57795: EQUAL
57796: IFTRUE 57800
57798: GO 57828
57800: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57801: LD_ADDR_OWVAR 42
57805: PUSH
57806: LD_INT 19
57808: PUSH
57809: LD_INT 23
57811: PUSH
57812: LD_INT 19
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 1
57824: ARRAY
57825: ST_TO_ADDR
57826: GO 58152
57828: LD_INT 18
57830: DOUBLE
57831: EQUAL
57832: IFTRUE 57836
57834: GO 57847
57836: POP
// bc_type := b_ext_radar ; 19 :
57837: LD_ADDR_OWVAR 42
57841: PUSH
57842: LD_INT 20
57844: ST_TO_ADDR
57845: GO 58152
57847: LD_INT 19
57849: DOUBLE
57850: EQUAL
57851: IFTRUE 57855
57853: GO 57866
57855: POP
// bc_type := b_ext_radio ; 20 :
57856: LD_ADDR_OWVAR 42
57860: PUSH
57861: LD_INT 22
57863: ST_TO_ADDR
57864: GO 58152
57866: LD_INT 20
57868: DOUBLE
57869: EQUAL
57870: IFTRUE 57874
57872: GO 57885
57874: POP
// bc_type := b_ext_siberium ; 21 :
57875: LD_ADDR_OWVAR 42
57879: PUSH
57880: LD_INT 21
57882: ST_TO_ADDR
57883: GO 58152
57885: LD_INT 21
57887: DOUBLE
57888: EQUAL
57889: IFTRUE 57893
57891: GO 57904
57893: POP
// bc_type := b_ext_computer ; 22 :
57894: LD_ADDR_OWVAR 42
57898: PUSH
57899: LD_INT 24
57901: ST_TO_ADDR
57902: GO 58152
57904: LD_INT 22
57906: DOUBLE
57907: EQUAL
57908: IFTRUE 57912
57910: GO 57923
57912: POP
// bc_type := b_ext_track ; 23 :
57913: LD_ADDR_OWVAR 42
57917: PUSH
57918: LD_INT 16
57920: ST_TO_ADDR
57921: GO 58152
57923: LD_INT 23
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57931
57929: GO 57942
57931: POP
// bc_type := b_ext_laser ; 24 :
57932: LD_ADDR_OWVAR 42
57936: PUSH
57937: LD_INT 25
57939: ST_TO_ADDR
57940: GO 58152
57942: LD_INT 24
57944: DOUBLE
57945: EQUAL
57946: IFTRUE 57950
57948: GO 57961
57950: POP
// bc_type := b_control_tower ; 25 :
57951: LD_ADDR_OWVAR 42
57955: PUSH
57956: LD_INT 36
57958: ST_TO_ADDR
57959: GO 58152
57961: LD_INT 25
57963: DOUBLE
57964: EQUAL
57965: IFTRUE 57969
57967: GO 57980
57969: POP
// bc_type := b_breastwork ; 26 :
57970: LD_ADDR_OWVAR 42
57974: PUSH
57975: LD_INT 31
57977: ST_TO_ADDR
57978: GO 58152
57980: LD_INT 26
57982: DOUBLE
57983: EQUAL
57984: IFTRUE 57988
57986: GO 57999
57988: POP
// bc_type := b_bunker ; 27 :
57989: LD_ADDR_OWVAR 42
57993: PUSH
57994: LD_INT 32
57996: ST_TO_ADDR
57997: GO 58152
57999: LD_INT 27
58001: DOUBLE
58002: EQUAL
58003: IFTRUE 58007
58005: GO 58018
58007: POP
// bc_type := b_turret ; 28 :
58008: LD_ADDR_OWVAR 42
58012: PUSH
58013: LD_INT 33
58015: ST_TO_ADDR
58016: GO 58152
58018: LD_INT 28
58020: DOUBLE
58021: EQUAL
58022: IFTRUE 58026
58024: GO 58037
58026: POP
// bc_type := b_armoury ; 29 :
58027: LD_ADDR_OWVAR 42
58031: PUSH
58032: LD_INT 4
58034: ST_TO_ADDR
58035: GO 58152
58037: LD_INT 29
58039: DOUBLE
58040: EQUAL
58041: IFTRUE 58045
58043: GO 58056
58045: POP
// bc_type := b_barracks ; 30 :
58046: LD_ADDR_OWVAR 42
58050: PUSH
58051: LD_INT 5
58053: ST_TO_ADDR
58054: GO 58152
58056: LD_INT 30
58058: DOUBLE
58059: EQUAL
58060: IFTRUE 58064
58062: GO 58075
58064: POP
// bc_type := b_solar_power ; 31 :
58065: LD_ADDR_OWVAR 42
58069: PUSH
58070: LD_INT 27
58072: ST_TO_ADDR
58073: GO 58152
58075: LD_INT 31
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58083
58081: GO 58094
58083: POP
// bc_type := b_oil_power ; 32 :
58084: LD_ADDR_OWVAR 42
58088: PUSH
58089: LD_INT 26
58091: ST_TO_ADDR
58092: GO 58152
58094: LD_INT 32
58096: DOUBLE
58097: EQUAL
58098: IFTRUE 58102
58100: GO 58113
58102: POP
// bc_type := b_siberite_power ; 33 :
58103: LD_ADDR_OWVAR 42
58107: PUSH
58108: LD_INT 28
58110: ST_TO_ADDR
58111: GO 58152
58113: LD_INT 33
58115: DOUBLE
58116: EQUAL
58117: IFTRUE 58121
58119: GO 58132
58121: POP
// bc_type := b_oil_mine ; 34 :
58122: LD_ADDR_OWVAR 42
58126: PUSH
58127: LD_INT 29
58129: ST_TO_ADDR
58130: GO 58152
58132: LD_INT 34
58134: DOUBLE
58135: EQUAL
58136: IFTRUE 58140
58138: GO 58151
58140: POP
// bc_type := b_siberite_mine ; end ;
58141: LD_ADDR_OWVAR 42
58145: PUSH
58146: LD_INT 30
58148: ST_TO_ADDR
58149: GO 58152
58151: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58152: LD_ADDR_VAR 0 8
58156: PUSH
58157: LD_VAR 0 5
58161: PPUSH
58162: LD_VAR 0 6
58166: PPUSH
58167: LD_VAR 0 3
58171: PPUSH
58172: CALL_OW 47
58176: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58177: LD_OWVAR 42
58181: PUSH
58182: LD_INT 32
58184: PUSH
58185: LD_INT 33
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: IN
58192: IFFALSE 58208
// PlaceWeaponTurret ( b , weapon ) ;
58194: LD_VAR 0 8
58198: PPUSH
58199: LD_VAR 0 4
58203: PPUSH
58204: CALL_OW 431
// end ;
58208: LD_VAR 0 7
58212: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58213: LD_INT 0
58215: PPUSH
58216: PPUSH
58217: PPUSH
58218: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58219: LD_ADDR_VAR 0 4
58223: PUSH
58224: LD_INT 22
58226: PUSH
58227: LD_OWVAR 2
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 30
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 30
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PPUSH
58268: CALL_OW 69
58272: ST_TO_ADDR
// if not tmp then
58273: LD_VAR 0 4
58277: NOT
58278: IFFALSE 58282
// exit ;
58280: GO 58341
// for i in tmp do
58282: LD_ADDR_VAR 0 2
58286: PUSH
58287: LD_VAR 0 4
58291: PUSH
58292: FOR_IN
58293: IFFALSE 58339
// for j = 1 to 3 do
58295: LD_ADDR_VAR 0 3
58299: PUSH
58300: DOUBLE
58301: LD_INT 1
58303: DEC
58304: ST_TO_ADDR
58305: LD_INT 3
58307: PUSH
58308: FOR_TO
58309: IFFALSE 58335
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58311: LD_VAR 0 2
58315: PPUSH
58316: CALL_OW 274
58320: PPUSH
58321: LD_VAR 0 3
58325: PPUSH
58326: LD_INT 99999
58328: PPUSH
58329: CALL_OW 277
58333: GO 58308
58335: POP
58336: POP
58337: GO 58292
58339: POP
58340: POP
// end ;
58341: LD_VAR 0 1
58345: RET
// export function hHackSetLevel10 ; var i , j ; begin
58346: LD_INT 0
58348: PPUSH
58349: PPUSH
58350: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58351: LD_ADDR_VAR 0 2
58355: PUSH
58356: LD_INT 21
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PPUSH
58366: CALL_OW 69
58370: PUSH
58371: FOR_IN
58372: IFFALSE 58424
// if IsSelected ( i ) then
58374: LD_VAR 0 2
58378: PPUSH
58379: CALL_OW 306
58383: IFFALSE 58422
// begin for j := 1 to 4 do
58385: LD_ADDR_VAR 0 3
58389: PUSH
58390: DOUBLE
58391: LD_INT 1
58393: DEC
58394: ST_TO_ADDR
58395: LD_INT 4
58397: PUSH
58398: FOR_TO
58399: IFFALSE 58420
// SetSkill ( i , j , 10 ) ;
58401: LD_VAR 0 2
58405: PPUSH
58406: LD_VAR 0 3
58410: PPUSH
58411: LD_INT 10
58413: PPUSH
58414: CALL_OW 237
58418: GO 58398
58420: POP
58421: POP
// end ;
58422: GO 58371
58424: POP
58425: POP
// end ;
58426: LD_VAR 0 1
58430: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58431: LD_INT 0
58433: PPUSH
58434: PPUSH
58435: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58436: LD_ADDR_VAR 0 2
58440: PUSH
58441: LD_INT 22
58443: PUSH
58444: LD_OWVAR 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 21
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PPUSH
58467: CALL_OW 69
58471: PUSH
58472: FOR_IN
58473: IFFALSE 58514
// begin for j := 1 to 4 do
58475: LD_ADDR_VAR 0 3
58479: PUSH
58480: DOUBLE
58481: LD_INT 1
58483: DEC
58484: ST_TO_ADDR
58485: LD_INT 4
58487: PUSH
58488: FOR_TO
58489: IFFALSE 58510
// SetSkill ( i , j , 10 ) ;
58491: LD_VAR 0 2
58495: PPUSH
58496: LD_VAR 0 3
58500: PPUSH
58501: LD_INT 10
58503: PPUSH
58504: CALL_OW 237
58508: GO 58488
58510: POP
58511: POP
// end ;
58512: GO 58472
58514: POP
58515: POP
// end ;
58516: LD_VAR 0 1
58520: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58521: LD_INT 0
58523: PPUSH
// uc_side := your_side ;
58524: LD_ADDR_OWVAR 20
58528: PUSH
58529: LD_OWVAR 2
58533: ST_TO_ADDR
// uc_nation := nation ;
58534: LD_ADDR_OWVAR 21
58538: PUSH
58539: LD_VAR 0 1
58543: ST_TO_ADDR
// InitHc ;
58544: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58548: LD_INT 0
58550: PPUSH
58551: LD_VAR 0 2
58555: PPUSH
58556: LD_VAR 0 3
58560: PPUSH
58561: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58565: LD_VAR 0 4
58569: PPUSH
58570: LD_VAR 0 5
58574: PPUSH
58575: CALL_OW 428
58579: PUSH
58580: LD_INT 0
58582: EQUAL
58583: IFFALSE 58607
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58585: CALL_OW 44
58589: PPUSH
58590: LD_VAR 0 4
58594: PPUSH
58595: LD_VAR 0 5
58599: PPUSH
58600: LD_INT 1
58602: PPUSH
58603: CALL_OW 48
// end ;
58607: LD_VAR 0 6
58611: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58612: LD_INT 0
58614: PPUSH
58615: PPUSH
// uc_side := your_side ;
58616: LD_ADDR_OWVAR 20
58620: PUSH
58621: LD_OWVAR 2
58625: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58626: LD_VAR 0 1
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: LD_INT 4
58642: PUSH
58643: LD_INT 5
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: IN
58653: IFFALSE 58665
// uc_nation := nation_american else
58655: LD_ADDR_OWVAR 21
58659: PUSH
58660: LD_INT 1
58662: ST_TO_ADDR
58663: GO 58708
// if chassis in [ 11 , 12 , 13 , 14 ] then
58665: LD_VAR 0 1
58669: PUSH
58670: LD_INT 11
58672: PUSH
58673: LD_INT 12
58675: PUSH
58676: LD_INT 13
58678: PUSH
58679: LD_INT 14
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: IN
58688: IFFALSE 58700
// uc_nation := nation_arabian else
58690: LD_ADDR_OWVAR 21
58694: PUSH
58695: LD_INT 2
58697: ST_TO_ADDR
58698: GO 58708
// uc_nation := nation_russian ;
58700: LD_ADDR_OWVAR 21
58704: PUSH
58705: LD_INT 3
58707: ST_TO_ADDR
// vc_chassis := chassis ;
58708: LD_ADDR_OWVAR 37
58712: PUSH
58713: LD_VAR 0 1
58717: ST_TO_ADDR
// vc_engine := engine ;
58718: LD_ADDR_OWVAR 39
58722: PUSH
58723: LD_VAR 0 2
58727: ST_TO_ADDR
// vc_control := control ;
58728: LD_ADDR_OWVAR 38
58732: PUSH
58733: LD_VAR 0 3
58737: ST_TO_ADDR
// vc_weapon := weapon ;
58738: LD_ADDR_OWVAR 40
58742: PUSH
58743: LD_VAR 0 4
58747: ST_TO_ADDR
// un := CreateVehicle ;
58748: LD_ADDR_VAR 0 8
58752: PUSH
58753: CALL_OW 45
58757: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58758: LD_VAR 0 8
58762: PPUSH
58763: LD_INT 0
58765: PPUSH
58766: LD_INT 5
58768: PPUSH
58769: CALL_OW 12
58773: PPUSH
58774: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58778: LD_VAR 0 8
58782: PPUSH
58783: LD_VAR 0 5
58787: PPUSH
58788: LD_VAR 0 6
58792: PPUSH
58793: LD_INT 1
58795: PPUSH
58796: CALL_OW 48
// end ;
58800: LD_VAR 0 7
58804: RET
// export hInvincible ; every 1 do
58805: GO 58807
58807: DISABLE
// hInvincible := [ ] ;
58808: LD_ADDR_EXP 85
58812: PUSH
58813: EMPTY
58814: ST_TO_ADDR
58815: END
// every 10 do var i ;
58816: GO 58818
58818: DISABLE
58819: LD_INT 0
58821: PPUSH
// begin enable ;
58822: ENABLE
// if not hInvincible then
58823: LD_EXP 85
58827: NOT
58828: IFFALSE 58832
// exit ;
58830: GO 58876
// for i in hInvincible do
58832: LD_ADDR_VAR 0 1
58836: PUSH
58837: LD_EXP 85
58841: PUSH
58842: FOR_IN
58843: IFFALSE 58874
// if GetLives ( i ) < 1000 then
58845: LD_VAR 0 1
58849: PPUSH
58850: CALL_OW 256
58854: PUSH
58855: LD_INT 1000
58857: LESS
58858: IFFALSE 58872
// SetLives ( i , 1000 ) ;
58860: LD_VAR 0 1
58864: PPUSH
58865: LD_INT 1000
58867: PPUSH
58868: CALL_OW 234
58872: GO 58842
58874: POP
58875: POP
// end ;
58876: PPOPN 1
58878: END
// export function hHackInvincible ; var i ; begin
58879: LD_INT 0
58881: PPUSH
58882: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58883: LD_ADDR_VAR 0 2
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 21
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 21
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: LIST
58915: PPUSH
58916: CALL_OW 69
58920: PUSH
58921: FOR_IN
58922: IFFALSE 58983
// if IsSelected ( i ) then
58924: LD_VAR 0 2
58928: PPUSH
58929: CALL_OW 306
58933: IFFALSE 58981
// begin if i in hInvincible then
58935: LD_VAR 0 2
58939: PUSH
58940: LD_EXP 85
58944: IN
58945: IFFALSE 58965
// hInvincible := hInvincible diff i else
58947: LD_ADDR_EXP 85
58951: PUSH
58952: LD_EXP 85
58956: PUSH
58957: LD_VAR 0 2
58961: DIFF
58962: ST_TO_ADDR
58963: GO 58981
// hInvincible := hInvincible union i ;
58965: LD_ADDR_EXP 85
58969: PUSH
58970: LD_EXP 85
58974: PUSH
58975: LD_VAR 0 2
58979: UNION
58980: ST_TO_ADDR
// end ;
58981: GO 58921
58983: POP
58984: POP
// end ;
58985: LD_VAR 0 1
58989: RET
// export function hHackInvisible ; var i , j ; begin
58990: LD_INT 0
58992: PPUSH
58993: PPUSH
58994: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58995: LD_ADDR_VAR 0 2
58999: PUSH
59000: LD_INT 21
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PPUSH
59010: CALL_OW 69
59014: PUSH
59015: FOR_IN
59016: IFFALSE 59040
// if IsSelected ( i ) then
59018: LD_VAR 0 2
59022: PPUSH
59023: CALL_OW 306
59027: IFFALSE 59038
// ComForceInvisible ( i ) ;
59029: LD_VAR 0 2
59033: PPUSH
59034: CALL_OW 496
59038: GO 59015
59040: POP
59041: POP
// end ;
59042: LD_VAR 0 1
59046: RET
// export function hHackChangeYourSide ; begin
59047: LD_INT 0
59049: PPUSH
// if your_side = 8 then
59050: LD_OWVAR 2
59054: PUSH
59055: LD_INT 8
59057: EQUAL
59058: IFFALSE 59070
// your_side := 0 else
59060: LD_ADDR_OWVAR 2
59064: PUSH
59065: LD_INT 0
59067: ST_TO_ADDR
59068: GO 59084
// your_side := your_side + 1 ;
59070: LD_ADDR_OWVAR 2
59074: PUSH
59075: LD_OWVAR 2
59079: PUSH
59080: LD_INT 1
59082: PLUS
59083: ST_TO_ADDR
// end ;
59084: LD_VAR 0 1
59088: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59089: LD_INT 0
59091: PPUSH
59092: PPUSH
59093: PPUSH
// for i in all_units do
59094: LD_ADDR_VAR 0 2
59098: PUSH
59099: LD_OWVAR 3
59103: PUSH
59104: FOR_IN
59105: IFFALSE 59183
// if IsSelected ( i ) then
59107: LD_VAR 0 2
59111: PPUSH
59112: CALL_OW 306
59116: IFFALSE 59181
// begin j := GetSide ( i ) ;
59118: LD_ADDR_VAR 0 3
59122: PUSH
59123: LD_VAR 0 2
59127: PPUSH
59128: CALL_OW 255
59132: ST_TO_ADDR
// if j = 8 then
59133: LD_VAR 0 3
59137: PUSH
59138: LD_INT 8
59140: EQUAL
59141: IFFALSE 59153
// j := 0 else
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_INT 0
59150: ST_TO_ADDR
59151: GO 59167
// j := j + 1 ;
59153: LD_ADDR_VAR 0 3
59157: PUSH
59158: LD_VAR 0 3
59162: PUSH
59163: LD_INT 1
59165: PLUS
59166: ST_TO_ADDR
// SetSide ( i , j ) ;
59167: LD_VAR 0 2
59171: PPUSH
59172: LD_VAR 0 3
59176: PPUSH
59177: CALL_OW 235
// end ;
59181: GO 59104
59183: POP
59184: POP
// end ;
59185: LD_VAR 0 1
59189: RET
// export function hHackFog ; begin
59190: LD_INT 0
59192: PPUSH
// FogOff ( true ) ;
59193: LD_INT 1
59195: PPUSH
59196: CALL_OW 344
// end ;
59200: LD_VAR 0 1
59204: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59205: LD_INT 0
59207: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59208: LD_VAR 0 1
59212: PPUSH
59213: LD_VAR 0 2
59217: PPUSH
59218: LD_VAR 0 3
59222: PPUSH
59223: LD_INT 1
59225: PPUSH
59226: LD_INT 1
59228: PPUSH
59229: CALL_OW 483
// CenterOnXY ( x , y ) ;
59233: LD_VAR 0 2
59237: PPUSH
59238: LD_VAR 0 3
59242: PPUSH
59243: CALL_OW 84
// end ;
59247: LD_VAR 0 4
59251: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59252: LD_INT 0
59254: PPUSH
59255: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59256: LD_VAR 0 1
59260: NOT
59261: PUSH
59262: LD_VAR 0 2
59266: PPUSH
59267: LD_VAR 0 3
59271: PPUSH
59272: CALL_OW 488
59276: NOT
59277: OR
59278: PUSH
59279: LD_VAR 0 1
59283: PPUSH
59284: CALL_OW 266
59288: PUSH
59289: LD_INT 3
59291: NONEQUAL
59292: PUSH
59293: LD_VAR 0 1
59297: PPUSH
59298: CALL_OW 247
59302: PUSH
59303: LD_INT 1
59305: EQUAL
59306: NOT
59307: AND
59308: OR
59309: IFFALSE 59313
// exit ;
59311: GO 59462
// if GetType ( factory ) = unit_human then
59313: LD_VAR 0 1
59317: PPUSH
59318: CALL_OW 247
59322: PUSH
59323: LD_INT 1
59325: EQUAL
59326: IFFALSE 59343
// factory := IsInUnit ( factory ) ;
59328: LD_ADDR_VAR 0 1
59332: PUSH
59333: LD_VAR 0 1
59337: PPUSH
59338: CALL_OW 310
59342: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59343: LD_VAR 0 1
59347: PPUSH
59348: CALL_OW 266
59352: PUSH
59353: LD_INT 3
59355: NONEQUAL
59356: IFFALSE 59360
// exit ;
59358: GO 59462
// if HexInfo ( x , y ) = factory then
59360: LD_VAR 0 2
59364: PPUSH
59365: LD_VAR 0 3
59369: PPUSH
59370: CALL_OW 428
59374: PUSH
59375: LD_VAR 0 1
59379: EQUAL
59380: IFFALSE 59407
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59382: LD_ADDR_EXP 86
59386: PUSH
59387: LD_EXP 86
59391: PPUSH
59392: LD_VAR 0 1
59396: PPUSH
59397: LD_INT 0
59399: PPUSH
59400: CALL_OW 1
59404: ST_TO_ADDR
59405: GO 59458
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59407: LD_ADDR_EXP 86
59411: PUSH
59412: LD_EXP 86
59416: PPUSH
59417: LD_VAR 0 1
59421: PPUSH
59422: LD_VAR 0 1
59426: PPUSH
59427: CALL_OW 255
59431: PUSH
59432: LD_VAR 0 1
59436: PUSH
59437: LD_VAR 0 2
59441: PUSH
59442: LD_VAR 0 3
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: PPUSH
59453: CALL_OW 1
59457: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59458: CALL 59467 0 0
// end ;
59462: LD_VAR 0 4
59466: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59467: LD_INT 0
59469: PPUSH
59470: PPUSH
59471: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59472: LD_STRING resetFactoryWaypoint();
59474: PPUSH
59475: CALL_OW 559
// if factoryWaypoints then
59479: LD_EXP 86
59483: IFFALSE 59609
// begin list := PrepareArray ( factoryWaypoints ) ;
59485: LD_ADDR_VAR 0 3
59489: PUSH
59490: LD_EXP 86
59494: PPUSH
59495: CALL 44515 0 1
59499: ST_TO_ADDR
// for i := 1 to list do
59500: LD_ADDR_VAR 0 2
59504: PUSH
59505: DOUBLE
59506: LD_INT 1
59508: DEC
59509: ST_TO_ADDR
59510: LD_VAR 0 3
59514: PUSH
59515: FOR_TO
59516: IFFALSE 59607
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59518: LD_STRING setFactoryWaypointXY(
59520: PUSH
59521: LD_VAR 0 3
59525: PUSH
59526: LD_VAR 0 2
59530: ARRAY
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: STR
59536: PUSH
59537: LD_STRING ,
59539: STR
59540: PUSH
59541: LD_VAR 0 3
59545: PUSH
59546: LD_VAR 0 2
59550: ARRAY
59551: PUSH
59552: LD_INT 2
59554: ARRAY
59555: STR
59556: PUSH
59557: LD_STRING ,
59559: STR
59560: PUSH
59561: LD_VAR 0 3
59565: PUSH
59566: LD_VAR 0 2
59570: ARRAY
59571: PUSH
59572: LD_INT 3
59574: ARRAY
59575: STR
59576: PUSH
59577: LD_STRING ,
59579: STR
59580: PUSH
59581: LD_VAR 0 3
59585: PUSH
59586: LD_VAR 0 2
59590: ARRAY
59591: PUSH
59592: LD_INT 4
59594: ARRAY
59595: STR
59596: PUSH
59597: LD_STRING )
59599: STR
59600: PPUSH
59601: CALL_OW 559
59605: GO 59515
59607: POP
59608: POP
// end ; end ;
59609: LD_VAR 0 1
59613: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59614: LD_INT 0
59616: PPUSH
// if HexInfo ( x , y ) = warehouse then
59617: LD_VAR 0 2
59621: PPUSH
59622: LD_VAR 0 3
59626: PPUSH
59627: CALL_OW 428
59631: PUSH
59632: LD_VAR 0 1
59636: EQUAL
59637: IFFALSE 59664
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59639: LD_ADDR_EXP 87
59643: PUSH
59644: LD_EXP 87
59648: PPUSH
59649: LD_VAR 0 1
59653: PPUSH
59654: LD_INT 0
59656: PPUSH
59657: CALL_OW 1
59661: ST_TO_ADDR
59662: GO 59715
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59664: LD_ADDR_EXP 87
59668: PUSH
59669: LD_EXP 87
59673: PPUSH
59674: LD_VAR 0 1
59678: PPUSH
59679: LD_VAR 0 1
59683: PPUSH
59684: CALL_OW 255
59688: PUSH
59689: LD_VAR 0 1
59693: PUSH
59694: LD_VAR 0 2
59698: PUSH
59699: LD_VAR 0 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: PPUSH
59710: CALL_OW 1
59714: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59715: CALL 59724 0 0
// end ;
59719: LD_VAR 0 4
59723: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59724: LD_INT 0
59726: PPUSH
59727: PPUSH
59728: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59729: LD_STRING resetWarehouseGatheringPoints();
59731: PPUSH
59732: CALL_OW 559
// if warehouseGatheringPoints then
59736: LD_EXP 87
59740: IFFALSE 59866
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59742: LD_ADDR_VAR 0 3
59746: PUSH
59747: LD_EXP 87
59751: PPUSH
59752: CALL 44515 0 1
59756: ST_TO_ADDR
// for i := 1 to list do
59757: LD_ADDR_VAR 0 2
59761: PUSH
59762: DOUBLE
59763: LD_INT 1
59765: DEC
59766: ST_TO_ADDR
59767: LD_VAR 0 3
59771: PUSH
59772: FOR_TO
59773: IFFALSE 59864
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59775: LD_STRING setWarehouseGatheringPointXY(
59777: PUSH
59778: LD_VAR 0 3
59782: PUSH
59783: LD_VAR 0 2
59787: ARRAY
59788: PUSH
59789: LD_INT 1
59791: ARRAY
59792: STR
59793: PUSH
59794: LD_STRING ,
59796: STR
59797: PUSH
59798: LD_VAR 0 3
59802: PUSH
59803: LD_VAR 0 2
59807: ARRAY
59808: PUSH
59809: LD_INT 2
59811: ARRAY
59812: STR
59813: PUSH
59814: LD_STRING ,
59816: STR
59817: PUSH
59818: LD_VAR 0 3
59822: PUSH
59823: LD_VAR 0 2
59827: ARRAY
59828: PUSH
59829: LD_INT 3
59831: ARRAY
59832: STR
59833: PUSH
59834: LD_STRING ,
59836: STR
59837: PUSH
59838: LD_VAR 0 3
59842: PUSH
59843: LD_VAR 0 2
59847: ARRAY
59848: PUSH
59849: LD_INT 4
59851: ARRAY
59852: STR
59853: PUSH
59854: LD_STRING )
59856: STR
59857: PPUSH
59858: CALL_OW 559
59862: GO 59772
59864: POP
59865: POP
// end ; end ;
59866: LD_VAR 0 1
59870: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
59871: LD_EXP 87
59875: IFFALSE 60560
59877: GO 59879
59879: DISABLE
59880: LD_INT 0
59882: PPUSH
59883: PPUSH
59884: PPUSH
59885: PPUSH
59886: PPUSH
59887: PPUSH
59888: PPUSH
59889: PPUSH
59890: PPUSH
// begin enable ;
59891: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
59892: LD_ADDR_VAR 0 3
59896: PUSH
59897: LD_EXP 87
59901: PPUSH
59902: CALL 44515 0 1
59906: ST_TO_ADDR
// if not list then
59907: LD_VAR 0 3
59911: NOT
59912: IFFALSE 59916
// exit ;
59914: GO 60560
// for i := 1 to list do
59916: LD_ADDR_VAR 0 1
59920: PUSH
59921: DOUBLE
59922: LD_INT 1
59924: DEC
59925: ST_TO_ADDR
59926: LD_VAR 0 3
59930: PUSH
59931: FOR_TO
59932: IFFALSE 60558
// begin depot := list [ i ] [ 2 ] ;
59934: LD_ADDR_VAR 0 8
59938: PUSH
59939: LD_VAR 0 3
59943: PUSH
59944: LD_VAR 0 1
59948: ARRAY
59949: PUSH
59950: LD_INT 2
59952: ARRAY
59953: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
59954: LD_ADDR_VAR 0 5
59958: PUSH
59959: LD_VAR 0 3
59963: PUSH
59964: LD_VAR 0 1
59968: ARRAY
59969: PUSH
59970: LD_INT 1
59972: ARRAY
59973: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
59974: LD_VAR 0 8
59978: PPUSH
59979: CALL_OW 301
59983: PUSH
59984: LD_VAR 0 5
59988: PUSH
59989: LD_VAR 0 8
59993: PPUSH
59994: CALL_OW 255
59998: NONEQUAL
59999: OR
60000: IFFALSE 60029
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60002: LD_ADDR_EXP 87
60006: PUSH
60007: LD_EXP 87
60011: PPUSH
60012: LD_VAR 0 8
60016: PPUSH
60017: LD_INT 0
60019: PPUSH
60020: CALL_OW 1
60024: ST_TO_ADDR
// exit ;
60025: POP
60026: POP
60027: GO 60560
// end ; x := list [ i ] [ 3 ] ;
60029: LD_ADDR_VAR 0 6
60033: PUSH
60034: LD_VAR 0 3
60038: PUSH
60039: LD_VAR 0 1
60043: ARRAY
60044: PUSH
60045: LD_INT 3
60047: ARRAY
60048: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60049: LD_ADDR_VAR 0 7
60053: PUSH
60054: LD_VAR 0 3
60058: PUSH
60059: LD_VAR 0 1
60063: ARRAY
60064: PUSH
60065: LD_INT 4
60067: ARRAY
60068: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60069: LD_ADDR_VAR 0 9
60073: PUSH
60074: LD_VAR 0 6
60078: PPUSH
60079: LD_VAR 0 7
60083: PPUSH
60084: LD_INT 16
60086: PPUSH
60087: CALL 43103 0 3
60091: ST_TO_ADDR
// if not cratesNearbyPoint then
60092: LD_VAR 0 9
60096: NOT
60097: IFFALSE 60103
// exit ;
60099: POP
60100: POP
60101: GO 60560
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60103: LD_ADDR_VAR 0 4
60107: PUSH
60108: LD_INT 22
60110: PUSH
60111: LD_VAR 0 5
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 3
60122: PUSH
60123: LD_INT 60
60125: PUSH
60126: EMPTY
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 91
60135: PUSH
60136: LD_VAR 0 8
60140: PUSH
60141: LD_INT 6
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 25
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 25
60164: PUSH
60165: LD_INT 16
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: PPUSH
60183: CALL_OW 69
60187: PUSH
60188: LD_VAR 0 8
60192: PPUSH
60193: CALL_OW 313
60197: PPUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 60
60203: PUSH
60204: EMPTY
60205: LIST
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 25
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 25
60226: PUSH
60227: LD_INT 16
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PPUSH
60243: CALL_OW 72
60247: UNION
60248: ST_TO_ADDR
// if tmp then
60249: LD_VAR 0 4
60253: IFFALSE 60333
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60255: LD_ADDR_VAR 0 4
60259: PUSH
60260: LD_VAR 0 4
60264: PPUSH
60265: LD_INT 3
60267: PPUSH
60268: CALL 41072 0 2
60272: ST_TO_ADDR
// for j in tmp do
60273: LD_ADDR_VAR 0 2
60277: PUSH
60278: LD_VAR 0 4
60282: PUSH
60283: FOR_IN
60284: IFFALSE 60327
// begin if IsInUnit ( j ) then
60286: LD_VAR 0 2
60290: PPUSH
60291: CALL_OW 310
60295: IFFALSE 60306
// ComExit ( j ) ;
60297: LD_VAR 0 2
60301: PPUSH
60302: CALL 41155 0 1
// AddComCollect ( j , x , y ) ;
60306: LD_VAR 0 2
60310: PPUSH
60311: LD_VAR 0 6
60315: PPUSH
60316: LD_VAR 0 7
60320: PPUSH
60321: CALL_OW 177
// end ;
60325: GO 60283
60327: POP
60328: POP
// exit ;
60329: POP
60330: POP
60331: GO 60560
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60333: LD_ADDR_VAR 0 4
60337: PUSH
60338: LD_INT 22
60340: PUSH
60341: LD_VAR 0 5
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 91
60352: PUSH
60353: LD_VAR 0 8
60357: PUSH
60358: LD_INT 8
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: LD_INT 34
60371: PUSH
60372: LD_INT 12
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 34
60381: PUSH
60382: LD_INT 51
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 34
60391: PUSH
60392: LD_INT 32
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 34
60401: PUSH
60402: LD_INT 89
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: PPUSH
60421: CALL_OW 69
60425: ST_TO_ADDR
// if tmp then
60426: LD_VAR 0 4
60430: IFFALSE 60556
// begin for j in tmp do
60432: LD_ADDR_VAR 0 2
60436: PUSH
60437: LD_VAR 0 4
60441: PUSH
60442: FOR_IN
60443: IFFALSE 60554
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
60445: LD_VAR 0 2
60449: PPUSH
60450: CALL_OW 262
60454: PUSH
60455: LD_INT 3
60457: EQUAL
60458: PUSH
60459: LD_VAR 0 2
60463: PPUSH
60464: CALL_OW 261
60468: PUSH
60469: LD_INT 20
60471: GREATER
60472: OR
60473: PUSH
60474: LD_VAR 0 2
60478: PPUSH
60479: CALL_OW 314
60483: NOT
60484: AND
60485: PUSH
60486: LD_VAR 0 2
60490: PPUSH
60491: CALL_OW 263
60495: PUSH
60496: LD_INT 1
60498: NONEQUAL
60499: PUSH
60500: LD_VAR 0 2
60504: PPUSH
60505: CALL_OW 311
60509: OR
60510: AND
60511: IFFALSE 60552
// begin ComCollect ( j , x , y ) ;
60513: LD_VAR 0 2
60517: PPUSH
60518: LD_VAR 0 6
60522: PPUSH
60523: LD_VAR 0 7
60527: PPUSH
60528: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
60532: LD_VAR 0 2
60536: PPUSH
60537: LD_VAR 0 8
60541: PPUSH
60542: CALL_OW 172
// exit ;
60546: POP
60547: POP
60548: POP
60549: POP
60550: GO 60560
// end ;
60552: GO 60442
60554: POP
60555: POP
// end ; end ;
60556: GO 59931
60558: POP
60559: POP
// end ; end_of_file
60560: PPOPN 9
60562: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60563: LD_VAR 0 1
60567: PUSH
60568: LD_INT 200
60570: DOUBLE
60571: GREATEREQUAL
60572: IFFALSE 60580
60574: LD_INT 299
60576: DOUBLE
60577: LESSEQUAL
60578: IFTRUE 60582
60580: GO 60614
60582: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60583: LD_VAR 0 1
60587: PPUSH
60588: LD_VAR 0 2
60592: PPUSH
60593: LD_VAR 0 3
60597: PPUSH
60598: LD_VAR 0 4
60602: PPUSH
60603: LD_VAR 0 5
60607: PPUSH
60608: CALL 61102 0 5
60612: GO 60691
60614: LD_INT 300
60616: DOUBLE
60617: GREATEREQUAL
60618: IFFALSE 60626
60620: LD_INT 399
60622: DOUBLE
60623: LESSEQUAL
60624: IFTRUE 60628
60626: GO 60690
60628: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60629: LD_VAR 0 1
60633: PPUSH
60634: LD_VAR 0 2
60638: PPUSH
60639: LD_VAR 0 3
60643: PPUSH
60644: LD_VAR 0 4
60648: PPUSH
60649: LD_VAR 0 5
60653: PPUSH
60654: LD_VAR 0 6
60658: PPUSH
60659: LD_VAR 0 7
60663: PPUSH
60664: LD_VAR 0 8
60668: PPUSH
60669: LD_VAR 0 9
60673: PPUSH
60674: LD_VAR 0 10
60678: PPUSH
60679: LD_VAR 0 11
60683: PPUSH
60684: CALL 57272 0 11
60688: GO 60691
60690: POP
// end ;
60691: PPOPN 11
60693: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60694: LD_VAR 0 1
60698: PPUSH
60699: LD_VAR 0 2
60703: PPUSH
60704: LD_VAR 0 3
60708: PPUSH
60709: LD_VAR 0 4
60713: PPUSH
60714: LD_VAR 0 5
60718: PPUSH
60719: CALL 60838 0 5
// end ; end_of_file
60723: PPOPN 5
60725: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60726: LD_INT 0
60728: PPUSH
60729: PPUSH
60730: PPUSH
60731: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60732: LD_VAR 0 1
60736: PPUSH
60737: CALL_OW 264
60741: PUSH
60742: LD_INT 91
60744: EQUAL
60745: IFFALSE 60817
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60747: LD_INT 68
60749: PPUSH
60750: LD_VAR 0 1
60754: PPUSH
60755: CALL_OW 255
60759: PPUSH
60760: CALL_OW 321
60764: PUSH
60765: LD_INT 2
60767: EQUAL
60768: IFFALSE 60780
// eff := 70 else
60770: LD_ADDR_VAR 0 4
60774: PUSH
60775: LD_INT 70
60777: ST_TO_ADDR
60778: GO 60788
// eff := 30 ;
60780: LD_ADDR_VAR 0 4
60784: PUSH
60785: LD_INT 30
60787: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60788: LD_VAR 0 1
60792: PPUSH
60793: CALL_OW 250
60797: PPUSH
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 251
60807: PPUSH
60808: LD_VAR 0 4
60812: PPUSH
60813: CALL_OW 495
// end ; end ;
60817: LD_VAR 0 2
60821: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60822: LD_INT 0
60824: PPUSH
// end ;
60825: LD_VAR 0 4
60829: RET
// export function SOS_Command ( cmd ) ; begin
60830: LD_INT 0
60832: PPUSH
// end ;
60833: LD_VAR 0 2
60837: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60838: LD_INT 0
60840: PPUSH
// end ;
60841: LD_VAR 0 6
60845: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
60846: LD_INT 0
60848: PPUSH
60849: PPUSH
// if not vehicle or not factory then
60850: LD_VAR 0 1
60854: NOT
60855: PUSH
60856: LD_VAR 0 2
60860: NOT
60861: OR
60862: IFFALSE 60866
// exit ;
60864: GO 61097
// if factoryWaypoints >= factory then
60866: LD_EXP 86
60870: PUSH
60871: LD_VAR 0 2
60875: GREATEREQUAL
60876: IFFALSE 61097
// if factoryWaypoints [ factory ] then
60878: LD_EXP 86
60882: PUSH
60883: LD_VAR 0 2
60887: ARRAY
60888: IFFALSE 61097
// begin if GetControl ( vehicle ) = control_manual then
60890: LD_VAR 0 1
60894: PPUSH
60895: CALL_OW 263
60899: PUSH
60900: LD_INT 1
60902: EQUAL
60903: IFFALSE 60984
// begin driver := IsDrivenBy ( vehicle ) ;
60905: LD_ADDR_VAR 0 4
60909: PUSH
60910: LD_VAR 0 1
60914: PPUSH
60915: CALL_OW 311
60919: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60920: LD_VAR 0 4
60924: PPUSH
60925: LD_EXP 86
60929: PUSH
60930: LD_VAR 0 2
60934: ARRAY
60935: PUSH
60936: LD_INT 3
60938: ARRAY
60939: PPUSH
60940: LD_EXP 86
60944: PUSH
60945: LD_VAR 0 2
60949: ARRAY
60950: PUSH
60951: LD_INT 4
60953: ARRAY
60954: PPUSH
60955: CALL_OW 171
// AddComExitVehicle ( driver ) ;
60959: LD_VAR 0 4
60963: PPUSH
60964: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
60968: LD_VAR 0 4
60972: PPUSH
60973: LD_VAR 0 2
60977: PPUSH
60978: CALL_OW 180
// end else
60982: GO 61097
// if GetControl ( vehicle ) = control_remote then
60984: LD_VAR 0 1
60988: PPUSH
60989: CALL_OW 263
60993: PUSH
60994: LD_INT 2
60996: EQUAL
60997: IFFALSE 61058
// begin wait ( 0 0$2 ) ;
60999: LD_INT 70
61001: PPUSH
61002: CALL_OW 67
// if Connect ( vehicle ) then
61006: LD_VAR 0 1
61010: PPUSH
61011: CALL 11395 0 1
61015: IFFALSE 61056
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61017: LD_VAR 0 1
61021: PPUSH
61022: LD_EXP 86
61026: PUSH
61027: LD_VAR 0 2
61031: ARRAY
61032: PUSH
61033: LD_INT 3
61035: ARRAY
61036: PPUSH
61037: LD_EXP 86
61041: PUSH
61042: LD_VAR 0 2
61046: ARRAY
61047: PUSH
61048: LD_INT 4
61050: ARRAY
61051: PPUSH
61052: CALL_OW 171
// end else
61056: GO 61097
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61058: LD_VAR 0 1
61062: PPUSH
61063: LD_EXP 86
61067: PUSH
61068: LD_VAR 0 2
61072: ARRAY
61073: PUSH
61074: LD_INT 3
61076: ARRAY
61077: PPUSH
61078: LD_EXP 86
61082: PUSH
61083: LD_VAR 0 2
61087: ARRAY
61088: PUSH
61089: LD_INT 4
61091: ARRAY
61092: PPUSH
61093: CALL_OW 171
// end ; end ;
61097: LD_VAR 0 3
61101: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61102: LD_INT 0
61104: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61105: LD_VAR 0 1
61109: PUSH
61110: LD_INT 250
61112: EQUAL
61113: PUSH
61114: LD_VAR 0 2
61118: PPUSH
61119: CALL_OW 264
61123: PUSH
61124: LD_INT 81
61126: EQUAL
61127: AND
61128: IFFALSE 61149
// MinerPlaceMine ( unit , x , y ) ;
61130: LD_VAR 0 2
61134: PPUSH
61135: LD_VAR 0 4
61139: PPUSH
61140: LD_VAR 0 5
61144: PPUSH
61145: CALL 63534 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61149: LD_VAR 0 1
61153: PUSH
61154: LD_INT 251
61156: EQUAL
61157: PUSH
61158: LD_VAR 0 2
61162: PPUSH
61163: CALL_OW 264
61167: PUSH
61168: LD_INT 81
61170: EQUAL
61171: AND
61172: IFFALSE 61193
// MinerDetonateMine ( unit , x , y ) ;
61174: LD_VAR 0 2
61178: PPUSH
61179: LD_VAR 0 4
61183: PPUSH
61184: LD_VAR 0 5
61188: PPUSH
61189: CALL 63809 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61193: LD_VAR 0 1
61197: PUSH
61198: LD_INT 252
61200: EQUAL
61201: PUSH
61202: LD_VAR 0 2
61206: PPUSH
61207: CALL_OW 264
61211: PUSH
61212: LD_INT 81
61214: EQUAL
61215: AND
61216: IFFALSE 61237
// MinerCreateMinefield ( unit , x , y ) ;
61218: LD_VAR 0 2
61222: PPUSH
61223: LD_VAR 0 4
61227: PPUSH
61228: LD_VAR 0 5
61232: PPUSH
61233: CALL 64226 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61237: LD_VAR 0 1
61241: PUSH
61242: LD_INT 253
61244: EQUAL
61245: PUSH
61246: LD_VAR 0 2
61250: PPUSH
61251: CALL_OW 257
61255: PUSH
61256: LD_INT 5
61258: EQUAL
61259: AND
61260: IFFALSE 61281
// ComBinocular ( unit , x , y ) ;
61262: LD_VAR 0 2
61266: PPUSH
61267: LD_VAR 0 4
61271: PPUSH
61272: LD_VAR 0 5
61276: PPUSH
61277: CALL 64595 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61281: LD_VAR 0 1
61285: PUSH
61286: LD_INT 254
61288: EQUAL
61289: PUSH
61290: LD_VAR 0 2
61294: PPUSH
61295: CALL_OW 264
61299: PUSH
61300: LD_INT 99
61302: EQUAL
61303: AND
61304: PUSH
61305: LD_VAR 0 3
61309: PPUSH
61310: CALL_OW 263
61314: PUSH
61315: LD_INT 3
61317: EQUAL
61318: AND
61319: IFFALSE 61335
// HackDestroyVehicle ( unit , selectedUnit ) ;
61321: LD_VAR 0 2
61325: PPUSH
61326: LD_VAR 0 3
61330: PPUSH
61331: CALL 62898 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61335: LD_VAR 0 1
61339: PUSH
61340: LD_INT 255
61342: EQUAL
61343: PUSH
61344: LD_VAR 0 2
61348: PPUSH
61349: CALL_OW 264
61353: PUSH
61354: LD_INT 14
61356: PUSH
61357: LD_INT 53
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: IN
61364: AND
61365: PUSH
61366: LD_VAR 0 4
61370: PPUSH
61371: LD_VAR 0 5
61375: PPUSH
61376: CALL_OW 488
61380: AND
61381: IFFALSE 61405
// CutTreeXYR ( unit , x , y , 12 ) ;
61383: LD_VAR 0 2
61387: PPUSH
61388: LD_VAR 0 4
61392: PPUSH
61393: LD_VAR 0 5
61397: PPUSH
61398: LD_INT 12
61400: PPUSH
61401: CALL 61468 0 4
// if cmd = 256 then
61405: LD_VAR 0 1
61409: PUSH
61410: LD_INT 256
61412: EQUAL
61413: IFFALSE 61434
// SetFactoryWaypoint ( unit , x , y ) ;
61415: LD_VAR 0 2
61419: PPUSH
61420: LD_VAR 0 4
61424: PPUSH
61425: LD_VAR 0 5
61429: PPUSH
61430: CALL 59252 0 3
// if cmd = 257 then
61434: LD_VAR 0 1
61438: PUSH
61439: LD_INT 257
61441: EQUAL
61442: IFFALSE 61463
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61444: LD_VAR 0 2
61448: PPUSH
61449: LD_VAR 0 4
61453: PPUSH
61454: LD_VAR 0 5
61458: PPUSH
61459: CALL 59614 0 3
// end ;
61463: LD_VAR 0 6
61467: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61468: LD_INT 0
61470: PPUSH
61471: PPUSH
61472: PPUSH
61473: PPUSH
61474: PPUSH
61475: PPUSH
61476: PPUSH
61477: PPUSH
61478: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61479: LD_VAR 0 1
61483: NOT
61484: PUSH
61485: LD_VAR 0 2
61489: PPUSH
61490: LD_VAR 0 3
61494: PPUSH
61495: CALL_OW 488
61499: NOT
61500: OR
61501: PUSH
61502: LD_VAR 0 4
61506: NOT
61507: OR
61508: IFFALSE 61512
// exit ;
61510: GO 61852
// list := [ ] ;
61512: LD_ADDR_VAR 0 13
61516: PUSH
61517: EMPTY
61518: ST_TO_ADDR
// if x - r < 0 then
61519: LD_VAR 0 2
61523: PUSH
61524: LD_VAR 0 4
61528: MINUS
61529: PUSH
61530: LD_INT 0
61532: LESS
61533: IFFALSE 61545
// min_x := 0 else
61535: LD_ADDR_VAR 0 7
61539: PUSH
61540: LD_INT 0
61542: ST_TO_ADDR
61543: GO 61561
// min_x := x - r ;
61545: LD_ADDR_VAR 0 7
61549: PUSH
61550: LD_VAR 0 2
61554: PUSH
61555: LD_VAR 0 4
61559: MINUS
61560: ST_TO_ADDR
// if y - r < 0 then
61561: LD_VAR 0 3
61565: PUSH
61566: LD_VAR 0 4
61570: MINUS
61571: PUSH
61572: LD_INT 0
61574: LESS
61575: IFFALSE 61587
// min_y := 0 else
61577: LD_ADDR_VAR 0 8
61581: PUSH
61582: LD_INT 0
61584: ST_TO_ADDR
61585: GO 61603
// min_y := y - r ;
61587: LD_ADDR_VAR 0 8
61591: PUSH
61592: LD_VAR 0 3
61596: PUSH
61597: LD_VAR 0 4
61601: MINUS
61602: ST_TO_ADDR
// max_x := x + r ;
61603: LD_ADDR_VAR 0 9
61607: PUSH
61608: LD_VAR 0 2
61612: PUSH
61613: LD_VAR 0 4
61617: PLUS
61618: ST_TO_ADDR
// max_y := y + r ;
61619: LD_ADDR_VAR 0 10
61623: PUSH
61624: LD_VAR 0 3
61628: PUSH
61629: LD_VAR 0 4
61633: PLUS
61634: ST_TO_ADDR
// for _x = min_x to max_x do
61635: LD_ADDR_VAR 0 11
61639: PUSH
61640: DOUBLE
61641: LD_VAR 0 7
61645: DEC
61646: ST_TO_ADDR
61647: LD_VAR 0 9
61651: PUSH
61652: FOR_TO
61653: IFFALSE 61770
// for _y = min_y to max_y do
61655: LD_ADDR_VAR 0 12
61659: PUSH
61660: DOUBLE
61661: LD_VAR 0 8
61665: DEC
61666: ST_TO_ADDR
61667: LD_VAR 0 10
61671: PUSH
61672: FOR_TO
61673: IFFALSE 61766
// begin if not ValidHex ( _x , _y ) then
61675: LD_VAR 0 11
61679: PPUSH
61680: LD_VAR 0 12
61684: PPUSH
61685: CALL_OW 488
61689: NOT
61690: IFFALSE 61694
// continue ;
61692: GO 61672
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61694: LD_VAR 0 11
61698: PPUSH
61699: LD_VAR 0 12
61703: PPUSH
61704: CALL_OW 351
61708: PUSH
61709: LD_VAR 0 11
61713: PPUSH
61714: LD_VAR 0 12
61718: PPUSH
61719: CALL_OW 554
61723: AND
61724: IFFALSE 61764
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61726: LD_ADDR_VAR 0 13
61730: PUSH
61731: LD_VAR 0 13
61735: PPUSH
61736: LD_VAR 0 13
61740: PUSH
61741: LD_INT 1
61743: PLUS
61744: PPUSH
61745: LD_VAR 0 11
61749: PUSH
61750: LD_VAR 0 12
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PPUSH
61759: CALL_OW 2
61763: ST_TO_ADDR
// end ;
61764: GO 61672
61766: POP
61767: POP
61768: GO 61652
61770: POP
61771: POP
// if not list then
61772: LD_VAR 0 13
61776: NOT
61777: IFFALSE 61781
// exit ;
61779: GO 61852
// for i in list do
61781: LD_ADDR_VAR 0 6
61785: PUSH
61786: LD_VAR 0 13
61790: PUSH
61791: FOR_IN
61792: IFFALSE 61850
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61794: LD_VAR 0 1
61798: PPUSH
61799: LD_STRING M
61801: PUSH
61802: LD_VAR 0 6
61806: PUSH
61807: LD_INT 1
61809: ARRAY
61810: PUSH
61811: LD_VAR 0 6
61815: PUSH
61816: LD_INT 2
61818: ARRAY
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: PPUSH
61844: CALL_OW 447
61848: GO 61791
61850: POP
61851: POP
// end ;
61852: LD_VAR 0 5
61856: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61857: LD_EXP 89
61861: NOT
61862: IFFALSE 61912
61864: GO 61866
61866: DISABLE
// begin initHack := true ;
61867: LD_ADDR_EXP 89
61871: PUSH
61872: LD_INT 1
61874: ST_TO_ADDR
// hackTanks := [ ] ;
61875: LD_ADDR_EXP 90
61879: PUSH
61880: EMPTY
61881: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61882: LD_ADDR_EXP 91
61886: PUSH
61887: EMPTY
61888: ST_TO_ADDR
// hackLimit := 3 ;
61889: LD_ADDR_EXP 92
61893: PUSH
61894: LD_INT 3
61896: ST_TO_ADDR
// hackDist := 12 ;
61897: LD_ADDR_EXP 93
61901: PUSH
61902: LD_INT 12
61904: ST_TO_ADDR
// hackCounter := [ ] ;
61905: LD_ADDR_EXP 94
61909: PUSH
61910: EMPTY
61911: ST_TO_ADDR
// end ;
61912: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61913: LD_EXP 89
61917: PUSH
61918: LD_INT 34
61920: PUSH
61921: LD_INT 99
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PPUSH
61928: CALL_OW 69
61932: AND
61933: IFFALSE 62186
61935: GO 61937
61937: DISABLE
61938: LD_INT 0
61940: PPUSH
61941: PPUSH
// begin enable ;
61942: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61943: LD_ADDR_VAR 0 1
61947: PUSH
61948: LD_INT 34
61950: PUSH
61951: LD_INT 99
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PPUSH
61958: CALL_OW 69
61962: PUSH
61963: FOR_IN
61964: IFFALSE 62184
// begin if not i in hackTanks then
61966: LD_VAR 0 1
61970: PUSH
61971: LD_EXP 90
61975: IN
61976: NOT
61977: IFFALSE 62060
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61979: LD_ADDR_EXP 90
61983: PUSH
61984: LD_EXP 90
61988: PPUSH
61989: LD_EXP 90
61993: PUSH
61994: LD_INT 1
61996: PLUS
61997: PPUSH
61998: LD_VAR 0 1
62002: PPUSH
62003: CALL_OW 1
62007: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62008: LD_ADDR_EXP 91
62012: PUSH
62013: LD_EXP 91
62017: PPUSH
62018: LD_EXP 91
62022: PUSH
62023: LD_INT 1
62025: PLUS
62026: PPUSH
62027: EMPTY
62028: PPUSH
62029: CALL_OW 1
62033: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62034: LD_ADDR_EXP 94
62038: PUSH
62039: LD_EXP 94
62043: PPUSH
62044: LD_EXP 94
62048: PUSH
62049: LD_INT 1
62051: PLUS
62052: PPUSH
62053: EMPTY
62054: PPUSH
62055: CALL_OW 1
62059: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62060: LD_VAR 0 1
62064: PPUSH
62065: CALL_OW 302
62069: NOT
62070: IFFALSE 62083
// begin HackUnlinkAll ( i ) ;
62072: LD_VAR 0 1
62076: PPUSH
62077: CALL 62189 0 1
// continue ;
62081: GO 61963
// end ; HackCheckCapturedStatus ( i ) ;
62083: LD_VAR 0 1
62087: PPUSH
62088: CALL 62632 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62092: LD_ADDR_VAR 0 2
62096: PUSH
62097: LD_INT 81
62099: PUSH
62100: LD_VAR 0 1
62104: PPUSH
62105: CALL_OW 255
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 33
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 91
62126: PUSH
62127: LD_VAR 0 1
62131: PUSH
62132: LD_EXP 93
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 50
62144: PUSH
62145: EMPTY
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: PPUSH
62154: CALL_OW 69
62158: ST_TO_ADDR
// if not tmp then
62159: LD_VAR 0 2
62163: NOT
62164: IFFALSE 62168
// continue ;
62166: GO 61963
// HackLink ( i , tmp ) ;
62168: LD_VAR 0 1
62172: PPUSH
62173: LD_VAR 0 2
62177: PPUSH
62178: CALL 62325 0 2
// end ;
62182: GO 61963
62184: POP
62185: POP
// end ;
62186: PPOPN 2
62188: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62189: LD_INT 0
62191: PPUSH
62192: PPUSH
62193: PPUSH
// if not hack in hackTanks then
62194: LD_VAR 0 1
62198: PUSH
62199: LD_EXP 90
62203: IN
62204: NOT
62205: IFFALSE 62209
// exit ;
62207: GO 62320
// index := GetElementIndex ( hackTanks , hack ) ;
62209: LD_ADDR_VAR 0 4
62213: PUSH
62214: LD_EXP 90
62218: PPUSH
62219: LD_VAR 0 1
62223: PPUSH
62224: CALL 8211 0 2
62228: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62229: LD_EXP 91
62233: PUSH
62234: LD_VAR 0 4
62238: ARRAY
62239: IFFALSE 62320
// begin for i in hackTanksCaptured [ index ] do
62241: LD_ADDR_VAR 0 3
62245: PUSH
62246: LD_EXP 91
62250: PUSH
62251: LD_VAR 0 4
62255: ARRAY
62256: PUSH
62257: FOR_IN
62258: IFFALSE 62284
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62260: LD_VAR 0 3
62264: PUSH
62265: LD_INT 1
62267: ARRAY
62268: PPUSH
62269: LD_VAR 0 3
62273: PUSH
62274: LD_INT 2
62276: ARRAY
62277: PPUSH
62278: CALL_OW 235
62282: GO 62257
62284: POP
62285: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62286: LD_ADDR_EXP 91
62290: PUSH
62291: LD_EXP 91
62295: PPUSH
62296: LD_VAR 0 4
62300: PPUSH
62301: EMPTY
62302: PPUSH
62303: CALL_OW 1
62307: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62308: LD_VAR 0 1
62312: PPUSH
62313: LD_INT 0
62315: PPUSH
62316: CALL_OW 505
// end ; end ;
62320: LD_VAR 0 2
62324: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62325: LD_INT 0
62327: PPUSH
62328: PPUSH
62329: PPUSH
// if not hack in hackTanks or not vehicles then
62330: LD_VAR 0 1
62334: PUSH
62335: LD_EXP 90
62339: IN
62340: NOT
62341: PUSH
62342: LD_VAR 0 2
62346: NOT
62347: OR
62348: IFFALSE 62352
// exit ;
62350: GO 62627
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62352: LD_ADDR_VAR 0 2
62356: PUSH
62357: LD_VAR 0 1
62361: PPUSH
62362: LD_VAR 0 2
62366: PPUSH
62367: LD_INT 1
62369: PPUSH
62370: LD_INT 1
62372: PPUSH
62373: CALL 8861 0 4
62377: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62378: LD_ADDR_VAR 0 5
62382: PUSH
62383: LD_EXP 90
62387: PPUSH
62388: LD_VAR 0 1
62392: PPUSH
62393: CALL 8211 0 2
62397: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62398: LD_EXP 91
62402: PUSH
62403: LD_VAR 0 5
62407: ARRAY
62408: PUSH
62409: LD_EXP 92
62413: LESS
62414: IFFALSE 62603
// begin for i := 1 to vehicles do
62416: LD_ADDR_VAR 0 4
62420: PUSH
62421: DOUBLE
62422: LD_INT 1
62424: DEC
62425: ST_TO_ADDR
62426: LD_VAR 0 2
62430: PUSH
62431: FOR_TO
62432: IFFALSE 62601
// begin if hackTanksCaptured [ index ] = hackLimit then
62434: LD_EXP 91
62438: PUSH
62439: LD_VAR 0 5
62443: ARRAY
62444: PUSH
62445: LD_EXP 92
62449: EQUAL
62450: IFFALSE 62454
// break ;
62452: GO 62601
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62454: LD_ADDR_EXP 94
62458: PUSH
62459: LD_EXP 94
62463: PPUSH
62464: LD_VAR 0 5
62468: PPUSH
62469: LD_EXP 94
62473: PUSH
62474: LD_VAR 0 5
62478: ARRAY
62479: PUSH
62480: LD_INT 1
62482: PLUS
62483: PPUSH
62484: CALL_OW 1
62488: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62489: LD_ADDR_EXP 91
62493: PUSH
62494: LD_EXP 91
62498: PPUSH
62499: LD_VAR 0 5
62503: PUSH
62504: LD_EXP 91
62508: PUSH
62509: LD_VAR 0 5
62513: ARRAY
62514: PUSH
62515: LD_INT 1
62517: PLUS
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PPUSH
62523: LD_VAR 0 2
62527: PUSH
62528: LD_VAR 0 4
62532: ARRAY
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_VAR 0 4
62543: ARRAY
62544: PPUSH
62545: CALL_OW 255
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PPUSH
62554: CALL 8426 0 3
62558: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62559: LD_VAR 0 2
62563: PUSH
62564: LD_VAR 0 4
62568: ARRAY
62569: PPUSH
62570: LD_VAR 0 1
62574: PPUSH
62575: CALL_OW 255
62579: PPUSH
62580: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62584: LD_VAR 0 2
62588: PUSH
62589: LD_VAR 0 4
62593: ARRAY
62594: PPUSH
62595: CALL_OW 141
// end ;
62599: GO 62431
62601: POP
62602: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62603: LD_VAR 0 1
62607: PPUSH
62608: LD_EXP 91
62612: PUSH
62613: LD_VAR 0 5
62617: ARRAY
62618: PUSH
62619: LD_INT 0
62621: PLUS
62622: PPUSH
62623: CALL_OW 505
// end ;
62627: LD_VAR 0 3
62631: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62632: LD_INT 0
62634: PPUSH
62635: PPUSH
62636: PPUSH
62637: PPUSH
// if not hack in hackTanks then
62638: LD_VAR 0 1
62642: PUSH
62643: LD_EXP 90
62647: IN
62648: NOT
62649: IFFALSE 62653
// exit ;
62651: GO 62893
// index := GetElementIndex ( hackTanks , hack ) ;
62653: LD_ADDR_VAR 0 4
62657: PUSH
62658: LD_EXP 90
62662: PPUSH
62663: LD_VAR 0 1
62667: PPUSH
62668: CALL 8211 0 2
62672: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62673: LD_ADDR_VAR 0 3
62677: PUSH
62678: DOUBLE
62679: LD_EXP 91
62683: PUSH
62684: LD_VAR 0 4
62688: ARRAY
62689: INC
62690: ST_TO_ADDR
62691: LD_INT 1
62693: PUSH
62694: FOR_DOWNTO
62695: IFFALSE 62867
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62697: LD_ADDR_VAR 0 5
62701: PUSH
62702: LD_EXP 91
62706: PUSH
62707: LD_VAR 0 4
62711: ARRAY
62712: PUSH
62713: LD_VAR 0 3
62717: ARRAY
62718: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62719: LD_VAR 0 5
62723: PUSH
62724: LD_INT 1
62726: ARRAY
62727: PPUSH
62728: CALL_OW 302
62732: NOT
62733: PUSH
62734: LD_VAR 0 5
62738: PUSH
62739: LD_INT 1
62741: ARRAY
62742: PPUSH
62743: CALL_OW 255
62747: PUSH
62748: LD_VAR 0 1
62752: PPUSH
62753: CALL_OW 255
62757: NONEQUAL
62758: OR
62759: IFFALSE 62865
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62761: LD_VAR 0 5
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PPUSH
62770: CALL_OW 305
62774: PUSH
62775: LD_VAR 0 5
62779: PUSH
62780: LD_INT 1
62782: ARRAY
62783: PPUSH
62784: CALL_OW 255
62788: PUSH
62789: LD_VAR 0 1
62793: PPUSH
62794: CALL_OW 255
62798: EQUAL
62799: AND
62800: IFFALSE 62824
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62802: LD_VAR 0 5
62806: PUSH
62807: LD_INT 1
62809: ARRAY
62810: PPUSH
62811: LD_VAR 0 5
62815: PUSH
62816: LD_INT 2
62818: ARRAY
62819: PPUSH
62820: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62824: LD_ADDR_EXP 91
62828: PUSH
62829: LD_EXP 91
62833: PPUSH
62834: LD_VAR 0 4
62838: PPUSH
62839: LD_EXP 91
62843: PUSH
62844: LD_VAR 0 4
62848: ARRAY
62849: PPUSH
62850: LD_VAR 0 3
62854: PPUSH
62855: CALL_OW 3
62859: PPUSH
62860: CALL_OW 1
62864: ST_TO_ADDR
// end ; end ;
62865: GO 62694
62867: POP
62868: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62869: LD_VAR 0 1
62873: PPUSH
62874: LD_EXP 91
62878: PUSH
62879: LD_VAR 0 4
62883: ARRAY
62884: PUSH
62885: LD_INT 0
62887: PLUS
62888: PPUSH
62889: CALL_OW 505
// end ;
62893: LD_VAR 0 2
62897: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62898: LD_INT 0
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
// if not hack in hackTanks then
62904: LD_VAR 0 1
62908: PUSH
62909: LD_EXP 90
62913: IN
62914: NOT
62915: IFFALSE 62919
// exit ;
62917: GO 63004
// index := GetElementIndex ( hackTanks , hack ) ;
62919: LD_ADDR_VAR 0 5
62923: PUSH
62924: LD_EXP 90
62928: PPUSH
62929: LD_VAR 0 1
62933: PPUSH
62934: CALL 8211 0 2
62938: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62939: LD_ADDR_VAR 0 4
62943: PUSH
62944: DOUBLE
62945: LD_INT 1
62947: DEC
62948: ST_TO_ADDR
62949: LD_EXP 91
62953: PUSH
62954: LD_VAR 0 5
62958: ARRAY
62959: PUSH
62960: FOR_TO
62961: IFFALSE 63002
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62963: LD_EXP 91
62967: PUSH
62968: LD_VAR 0 5
62972: ARRAY
62973: PUSH
62974: LD_VAR 0 4
62978: ARRAY
62979: PUSH
62980: LD_INT 1
62982: ARRAY
62983: PUSH
62984: LD_VAR 0 2
62988: EQUAL
62989: IFFALSE 63000
// KillUnit ( vehicle ) ;
62991: LD_VAR 0 2
62995: PPUSH
62996: CALL_OW 66
63000: GO 62960
63002: POP
63003: POP
// end ;
63004: LD_VAR 0 3
63008: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63009: LD_EXP 95
63013: NOT
63014: IFFALSE 63049
63016: GO 63018
63018: DISABLE
// begin initMiner := true ;
63019: LD_ADDR_EXP 95
63023: PUSH
63024: LD_INT 1
63026: ST_TO_ADDR
// minersList := [ ] ;
63027: LD_ADDR_EXP 96
63031: PUSH
63032: EMPTY
63033: ST_TO_ADDR
// minerMinesList := [ ] ;
63034: LD_ADDR_EXP 97
63038: PUSH
63039: EMPTY
63040: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63041: LD_ADDR_EXP 98
63045: PUSH
63046: LD_INT 5
63048: ST_TO_ADDR
// end ;
63049: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63050: LD_EXP 95
63054: PUSH
63055: LD_INT 34
63057: PUSH
63058: LD_INT 81
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PPUSH
63065: CALL_OW 69
63069: AND
63070: IFFALSE 63531
63072: GO 63074
63074: DISABLE
63075: LD_INT 0
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
// begin enable ;
63081: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63082: LD_ADDR_VAR 0 1
63086: PUSH
63087: LD_INT 34
63089: PUSH
63090: LD_INT 81
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PPUSH
63097: CALL_OW 69
63101: PUSH
63102: FOR_IN
63103: IFFALSE 63175
// begin if not i in minersList then
63105: LD_VAR 0 1
63109: PUSH
63110: LD_EXP 96
63114: IN
63115: NOT
63116: IFFALSE 63173
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63118: LD_ADDR_EXP 96
63122: PUSH
63123: LD_EXP 96
63127: PPUSH
63128: LD_EXP 96
63132: PUSH
63133: LD_INT 1
63135: PLUS
63136: PPUSH
63137: LD_VAR 0 1
63141: PPUSH
63142: CALL_OW 1
63146: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63147: LD_ADDR_EXP 97
63151: PUSH
63152: LD_EXP 97
63156: PPUSH
63157: LD_EXP 97
63161: PUSH
63162: LD_INT 1
63164: PLUS
63165: PPUSH
63166: EMPTY
63167: PPUSH
63168: CALL_OW 1
63172: ST_TO_ADDR
// end end ;
63173: GO 63102
63175: POP
63176: POP
// for i := minerMinesList downto 1 do
63177: LD_ADDR_VAR 0 1
63181: PUSH
63182: DOUBLE
63183: LD_EXP 97
63187: INC
63188: ST_TO_ADDR
63189: LD_INT 1
63191: PUSH
63192: FOR_DOWNTO
63193: IFFALSE 63529
// begin if IsLive ( minersList [ i ] ) then
63195: LD_EXP 96
63199: PUSH
63200: LD_VAR 0 1
63204: ARRAY
63205: PPUSH
63206: CALL_OW 300
63210: IFFALSE 63238
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63212: LD_EXP 96
63216: PUSH
63217: LD_VAR 0 1
63221: ARRAY
63222: PPUSH
63223: LD_EXP 97
63227: PUSH
63228: LD_VAR 0 1
63232: ARRAY
63233: PPUSH
63234: CALL_OW 505
// if not minerMinesList [ i ] then
63238: LD_EXP 97
63242: PUSH
63243: LD_VAR 0 1
63247: ARRAY
63248: NOT
63249: IFFALSE 63253
// continue ;
63251: GO 63192
// for j := minerMinesList [ i ] downto 1 do
63253: LD_ADDR_VAR 0 2
63257: PUSH
63258: DOUBLE
63259: LD_EXP 97
63263: PUSH
63264: LD_VAR 0 1
63268: ARRAY
63269: INC
63270: ST_TO_ADDR
63271: LD_INT 1
63273: PUSH
63274: FOR_DOWNTO
63275: IFFALSE 63525
// begin side := GetSide ( minersList [ i ] ) ;
63277: LD_ADDR_VAR 0 3
63281: PUSH
63282: LD_EXP 96
63286: PUSH
63287: LD_VAR 0 1
63291: ARRAY
63292: PPUSH
63293: CALL_OW 255
63297: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63298: LD_ADDR_VAR 0 4
63302: PUSH
63303: LD_EXP 97
63307: PUSH
63308: LD_VAR 0 1
63312: ARRAY
63313: PUSH
63314: LD_VAR 0 2
63318: ARRAY
63319: PUSH
63320: LD_INT 1
63322: ARRAY
63323: PPUSH
63324: LD_EXP 97
63328: PUSH
63329: LD_VAR 0 1
63333: ARRAY
63334: PUSH
63335: LD_VAR 0 2
63339: ARRAY
63340: PUSH
63341: LD_INT 2
63343: ARRAY
63344: PPUSH
63345: CALL_OW 428
63349: ST_TO_ADDR
// if not tmp then
63350: LD_VAR 0 4
63354: NOT
63355: IFFALSE 63359
// continue ;
63357: GO 63274
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63359: LD_VAR 0 4
63363: PUSH
63364: LD_INT 81
63366: PUSH
63367: LD_VAR 0 3
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PPUSH
63376: CALL_OW 69
63380: IN
63381: PUSH
63382: LD_EXP 97
63386: PUSH
63387: LD_VAR 0 1
63391: ARRAY
63392: PUSH
63393: LD_VAR 0 2
63397: ARRAY
63398: PUSH
63399: LD_INT 1
63401: ARRAY
63402: PPUSH
63403: LD_EXP 97
63407: PUSH
63408: LD_VAR 0 1
63412: ARRAY
63413: PUSH
63414: LD_VAR 0 2
63418: ARRAY
63419: PUSH
63420: LD_INT 2
63422: ARRAY
63423: PPUSH
63424: CALL_OW 458
63428: AND
63429: IFFALSE 63523
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63431: LD_EXP 97
63435: PUSH
63436: LD_VAR 0 1
63440: ARRAY
63441: PUSH
63442: LD_VAR 0 2
63446: ARRAY
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: PPUSH
63452: LD_EXP 97
63456: PUSH
63457: LD_VAR 0 1
63461: ARRAY
63462: PUSH
63463: LD_VAR 0 2
63467: ARRAY
63468: PUSH
63469: LD_INT 2
63471: ARRAY
63472: PPUSH
63473: LD_VAR 0 3
63477: PPUSH
63478: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63482: LD_ADDR_EXP 97
63486: PUSH
63487: LD_EXP 97
63491: PPUSH
63492: LD_VAR 0 1
63496: PPUSH
63497: LD_EXP 97
63501: PUSH
63502: LD_VAR 0 1
63506: ARRAY
63507: PPUSH
63508: LD_VAR 0 2
63512: PPUSH
63513: CALL_OW 3
63517: PPUSH
63518: CALL_OW 1
63522: ST_TO_ADDR
// end ; end ;
63523: GO 63274
63525: POP
63526: POP
// end ;
63527: GO 63192
63529: POP
63530: POP
// end ;
63531: PPOPN 4
63533: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63534: LD_INT 0
63536: PPUSH
63537: PPUSH
// result := false ;
63538: LD_ADDR_VAR 0 4
63542: PUSH
63543: LD_INT 0
63545: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63546: LD_VAR 0 1
63550: PPUSH
63551: CALL_OW 264
63555: PUSH
63556: LD_INT 81
63558: EQUAL
63559: NOT
63560: IFFALSE 63564
// exit ;
63562: GO 63804
// index := GetElementIndex ( minersList , unit ) ;
63564: LD_ADDR_VAR 0 5
63568: PUSH
63569: LD_EXP 96
63573: PPUSH
63574: LD_VAR 0 1
63578: PPUSH
63579: CALL 8211 0 2
63583: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63584: LD_EXP 97
63588: PUSH
63589: LD_VAR 0 5
63593: ARRAY
63594: PUSH
63595: LD_EXP 98
63599: GREATEREQUAL
63600: IFFALSE 63604
// exit ;
63602: GO 63804
// ComMoveXY ( unit , x , y ) ;
63604: LD_VAR 0 1
63608: PPUSH
63609: LD_VAR 0 2
63613: PPUSH
63614: LD_VAR 0 3
63618: PPUSH
63619: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63623: LD_INT 35
63625: PPUSH
63626: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63630: LD_VAR 0 1
63634: PPUSH
63635: LD_VAR 0 2
63639: PPUSH
63640: LD_VAR 0 3
63644: PPUSH
63645: CALL 39566 0 3
63649: NOT
63650: PUSH
63651: LD_VAR 0 1
63655: PPUSH
63656: CALL_OW 314
63660: AND
63661: IFFALSE 63665
// exit ;
63663: GO 63804
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63665: LD_VAR 0 2
63669: PPUSH
63670: LD_VAR 0 3
63674: PPUSH
63675: CALL_OW 428
63679: PUSH
63680: LD_VAR 0 1
63684: EQUAL
63685: PUSH
63686: LD_VAR 0 1
63690: PPUSH
63691: CALL_OW 314
63695: NOT
63696: AND
63697: IFFALSE 63623
// PlaySoundXY ( x , y , PlantMine ) ;
63699: LD_VAR 0 2
63703: PPUSH
63704: LD_VAR 0 3
63708: PPUSH
63709: LD_STRING PlantMine
63711: PPUSH
63712: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63716: LD_VAR 0 2
63720: PPUSH
63721: LD_VAR 0 3
63725: PPUSH
63726: LD_VAR 0 1
63730: PPUSH
63731: CALL_OW 255
63735: PPUSH
63736: LD_INT 0
63738: PPUSH
63739: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63743: LD_ADDR_EXP 97
63747: PUSH
63748: LD_EXP 97
63752: PPUSH
63753: LD_VAR 0 5
63757: PUSH
63758: LD_EXP 97
63762: PUSH
63763: LD_VAR 0 5
63767: ARRAY
63768: PUSH
63769: LD_INT 1
63771: PLUS
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PPUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_VAR 0 3
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PPUSH
63791: CALL 8426 0 3
63795: ST_TO_ADDR
// result := true ;
63796: LD_ADDR_VAR 0 4
63800: PUSH
63801: LD_INT 1
63803: ST_TO_ADDR
// end ;
63804: LD_VAR 0 4
63808: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63809: LD_INT 0
63811: PPUSH
63812: PPUSH
63813: PPUSH
// if not unit in minersList then
63814: LD_VAR 0 1
63818: PUSH
63819: LD_EXP 96
63823: IN
63824: NOT
63825: IFFALSE 63829
// exit ;
63827: GO 64221
// index := GetElementIndex ( minersList , unit ) ;
63829: LD_ADDR_VAR 0 6
63833: PUSH
63834: LD_EXP 96
63838: PPUSH
63839: LD_VAR 0 1
63843: PPUSH
63844: CALL 8211 0 2
63848: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63849: LD_ADDR_VAR 0 5
63853: PUSH
63854: DOUBLE
63855: LD_EXP 97
63859: PUSH
63860: LD_VAR 0 6
63864: ARRAY
63865: INC
63866: ST_TO_ADDR
63867: LD_INT 1
63869: PUSH
63870: FOR_DOWNTO
63871: IFFALSE 64032
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63873: LD_EXP 97
63877: PUSH
63878: LD_VAR 0 6
63882: ARRAY
63883: PUSH
63884: LD_VAR 0 5
63888: ARRAY
63889: PUSH
63890: LD_INT 1
63892: ARRAY
63893: PUSH
63894: LD_VAR 0 2
63898: EQUAL
63899: PUSH
63900: LD_EXP 97
63904: PUSH
63905: LD_VAR 0 6
63909: ARRAY
63910: PUSH
63911: LD_VAR 0 5
63915: ARRAY
63916: PUSH
63917: LD_INT 2
63919: ARRAY
63920: PUSH
63921: LD_VAR 0 3
63925: EQUAL
63926: AND
63927: IFFALSE 64030
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63929: LD_EXP 97
63933: PUSH
63934: LD_VAR 0 6
63938: ARRAY
63939: PUSH
63940: LD_VAR 0 5
63944: ARRAY
63945: PUSH
63946: LD_INT 1
63948: ARRAY
63949: PPUSH
63950: LD_EXP 97
63954: PUSH
63955: LD_VAR 0 6
63959: ARRAY
63960: PUSH
63961: LD_VAR 0 5
63965: ARRAY
63966: PUSH
63967: LD_INT 2
63969: ARRAY
63970: PPUSH
63971: LD_VAR 0 1
63975: PPUSH
63976: CALL_OW 255
63980: PPUSH
63981: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63985: LD_ADDR_EXP 97
63989: PUSH
63990: LD_EXP 97
63994: PPUSH
63995: LD_VAR 0 6
63999: PPUSH
64000: LD_EXP 97
64004: PUSH
64005: LD_VAR 0 6
64009: ARRAY
64010: PPUSH
64011: LD_VAR 0 5
64015: PPUSH
64016: CALL_OW 3
64020: PPUSH
64021: CALL_OW 1
64025: ST_TO_ADDR
// exit ;
64026: POP
64027: POP
64028: GO 64221
// end ; end ;
64030: GO 63870
64032: POP
64033: POP
// for i := minerMinesList [ index ] downto 1 do
64034: LD_ADDR_VAR 0 5
64038: PUSH
64039: DOUBLE
64040: LD_EXP 97
64044: PUSH
64045: LD_VAR 0 6
64049: ARRAY
64050: INC
64051: ST_TO_ADDR
64052: LD_INT 1
64054: PUSH
64055: FOR_DOWNTO
64056: IFFALSE 64219
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64058: LD_EXP 97
64062: PUSH
64063: LD_VAR 0 6
64067: ARRAY
64068: PUSH
64069: LD_VAR 0 5
64073: ARRAY
64074: PUSH
64075: LD_INT 1
64077: ARRAY
64078: PPUSH
64079: LD_EXP 97
64083: PUSH
64084: LD_VAR 0 6
64088: ARRAY
64089: PUSH
64090: LD_VAR 0 5
64094: ARRAY
64095: PUSH
64096: LD_INT 2
64098: ARRAY
64099: PPUSH
64100: LD_VAR 0 2
64104: PPUSH
64105: LD_VAR 0 3
64109: PPUSH
64110: CALL_OW 298
64114: PUSH
64115: LD_INT 6
64117: LESS
64118: IFFALSE 64217
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64120: LD_EXP 97
64124: PUSH
64125: LD_VAR 0 6
64129: ARRAY
64130: PUSH
64131: LD_VAR 0 5
64135: ARRAY
64136: PUSH
64137: LD_INT 1
64139: ARRAY
64140: PPUSH
64141: LD_EXP 97
64145: PUSH
64146: LD_VAR 0 6
64150: ARRAY
64151: PUSH
64152: LD_VAR 0 5
64156: ARRAY
64157: PUSH
64158: LD_INT 2
64160: ARRAY
64161: PPUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: CALL_OW 255
64171: PPUSH
64172: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64176: LD_ADDR_EXP 97
64180: PUSH
64181: LD_EXP 97
64185: PPUSH
64186: LD_VAR 0 6
64190: PPUSH
64191: LD_EXP 97
64195: PUSH
64196: LD_VAR 0 6
64200: ARRAY
64201: PPUSH
64202: LD_VAR 0 5
64206: PPUSH
64207: CALL_OW 3
64211: PPUSH
64212: CALL_OW 1
64216: ST_TO_ADDR
// end ; end ;
64217: GO 64055
64219: POP
64220: POP
// end ;
64221: LD_VAR 0 4
64225: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64226: LD_INT 0
64228: PPUSH
64229: PPUSH
64230: PPUSH
64231: PPUSH
64232: PPUSH
64233: PPUSH
64234: PPUSH
64235: PPUSH
64236: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64237: LD_VAR 0 1
64241: PPUSH
64242: CALL_OW 264
64246: PUSH
64247: LD_INT 81
64249: EQUAL
64250: NOT
64251: PUSH
64252: LD_VAR 0 1
64256: PUSH
64257: LD_EXP 96
64261: IN
64262: NOT
64263: OR
64264: IFFALSE 64268
// exit ;
64266: GO 64590
// index := GetElementIndex ( minersList , unit ) ;
64268: LD_ADDR_VAR 0 6
64272: PUSH
64273: LD_EXP 96
64277: PPUSH
64278: LD_VAR 0 1
64282: PPUSH
64283: CALL 8211 0 2
64287: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64288: LD_ADDR_VAR 0 8
64292: PUSH
64293: LD_EXP 98
64297: PUSH
64298: LD_EXP 97
64302: PUSH
64303: LD_VAR 0 6
64307: ARRAY
64308: MINUS
64309: ST_TO_ADDR
// if not minesFreeAmount then
64310: LD_VAR 0 8
64314: NOT
64315: IFFALSE 64319
// exit ;
64317: GO 64590
// tmp := [ ] ;
64319: LD_ADDR_VAR 0 7
64323: PUSH
64324: EMPTY
64325: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64326: LD_ADDR_VAR 0 5
64330: PUSH
64331: DOUBLE
64332: LD_INT 1
64334: DEC
64335: ST_TO_ADDR
64336: LD_VAR 0 8
64340: PUSH
64341: FOR_TO
64342: IFFALSE 64537
// begin _d := rand ( 0 , 5 ) ;
64344: LD_ADDR_VAR 0 11
64348: PUSH
64349: LD_INT 0
64351: PPUSH
64352: LD_INT 5
64354: PPUSH
64355: CALL_OW 12
64359: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64360: LD_ADDR_VAR 0 12
64364: PUSH
64365: LD_INT 2
64367: PPUSH
64368: LD_INT 6
64370: PPUSH
64371: CALL_OW 12
64375: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64376: LD_ADDR_VAR 0 9
64380: PUSH
64381: LD_VAR 0 2
64385: PPUSH
64386: LD_VAR 0 11
64390: PPUSH
64391: LD_VAR 0 12
64395: PPUSH
64396: CALL_OW 272
64400: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64401: LD_ADDR_VAR 0 10
64405: PUSH
64406: LD_VAR 0 3
64410: PPUSH
64411: LD_VAR 0 11
64415: PPUSH
64416: LD_VAR 0 12
64420: PPUSH
64421: CALL_OW 273
64425: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64426: LD_VAR 0 9
64430: PPUSH
64431: LD_VAR 0 10
64435: PPUSH
64436: CALL_OW 488
64440: PUSH
64441: LD_VAR 0 9
64445: PUSH
64446: LD_VAR 0 10
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_VAR 0 7
64459: IN
64460: NOT
64461: AND
64462: PUSH
64463: LD_VAR 0 9
64467: PPUSH
64468: LD_VAR 0 10
64472: PPUSH
64473: CALL_OW 458
64477: NOT
64478: AND
64479: IFFALSE 64521
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64481: LD_ADDR_VAR 0 7
64485: PUSH
64486: LD_VAR 0 7
64490: PPUSH
64491: LD_VAR 0 7
64495: PUSH
64496: LD_INT 1
64498: PLUS
64499: PPUSH
64500: LD_VAR 0 9
64504: PUSH
64505: LD_VAR 0 10
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PPUSH
64514: CALL_OW 1
64518: ST_TO_ADDR
64519: GO 64535
// i := i - 1 ;
64521: LD_ADDR_VAR 0 5
64525: PUSH
64526: LD_VAR 0 5
64530: PUSH
64531: LD_INT 1
64533: MINUS
64534: ST_TO_ADDR
// end ;
64535: GO 64341
64537: POP
64538: POP
// for i in tmp do
64539: LD_ADDR_VAR 0 5
64543: PUSH
64544: LD_VAR 0 7
64548: PUSH
64549: FOR_IN
64550: IFFALSE 64588
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64552: LD_VAR 0 1
64556: PPUSH
64557: LD_VAR 0 5
64561: PUSH
64562: LD_INT 1
64564: ARRAY
64565: PPUSH
64566: LD_VAR 0 5
64570: PUSH
64571: LD_INT 2
64573: ARRAY
64574: PPUSH
64575: CALL 63534 0 3
64579: NOT
64580: IFFALSE 64586
// exit ;
64582: POP
64583: POP
64584: GO 64590
64586: GO 64549
64588: POP
64589: POP
// end ;
64590: LD_VAR 0 4
64594: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64595: LD_INT 0
64597: PPUSH
64598: PPUSH
64599: PPUSH
64600: PPUSH
64601: PPUSH
64602: PPUSH
64603: PPUSH
// if not GetClass ( unit ) = class_sniper then
64604: LD_VAR 0 1
64608: PPUSH
64609: CALL_OW 257
64613: PUSH
64614: LD_INT 5
64616: EQUAL
64617: NOT
64618: IFFALSE 64622
// exit ;
64620: GO 65010
// dist := 8 ;
64622: LD_ADDR_VAR 0 5
64626: PUSH
64627: LD_INT 8
64629: ST_TO_ADDR
// viewRange := 12 ;
64630: LD_ADDR_VAR 0 7
64634: PUSH
64635: LD_INT 12
64637: ST_TO_ADDR
// side := GetSide ( unit ) ;
64638: LD_ADDR_VAR 0 6
64642: PUSH
64643: LD_VAR 0 1
64647: PPUSH
64648: CALL_OW 255
64652: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64653: LD_INT 61
64655: PPUSH
64656: LD_VAR 0 6
64660: PPUSH
64661: CALL_OW 321
64665: PUSH
64666: LD_INT 2
64668: EQUAL
64669: IFFALSE 64679
// viewRange := 16 ;
64671: LD_ADDR_VAR 0 7
64675: PUSH
64676: LD_INT 16
64678: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64679: LD_VAR 0 1
64683: PPUSH
64684: LD_VAR 0 2
64688: PPUSH
64689: LD_VAR 0 3
64693: PPUSH
64694: CALL_OW 297
64698: PUSH
64699: LD_VAR 0 5
64703: GREATER
64704: IFFALSE 64783
// begin ComMoveXY ( unit , x , y ) ;
64706: LD_VAR 0 1
64710: PPUSH
64711: LD_VAR 0 2
64715: PPUSH
64716: LD_VAR 0 3
64720: PPUSH
64721: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64725: LD_INT 35
64727: PPUSH
64728: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64732: LD_VAR 0 1
64736: PPUSH
64737: LD_VAR 0 2
64741: PPUSH
64742: LD_VAR 0 3
64746: PPUSH
64747: CALL 39566 0 3
64751: NOT
64752: IFFALSE 64756
// exit ;
64754: GO 65010
// until GetDistUnitXY ( unit , x , y ) < dist ;
64756: LD_VAR 0 1
64760: PPUSH
64761: LD_VAR 0 2
64765: PPUSH
64766: LD_VAR 0 3
64770: PPUSH
64771: CALL_OW 297
64775: PUSH
64776: LD_VAR 0 5
64780: LESS
64781: IFFALSE 64725
// end ; ComTurnXY ( unit , x , y ) ;
64783: LD_VAR 0 1
64787: PPUSH
64788: LD_VAR 0 2
64792: PPUSH
64793: LD_VAR 0 3
64797: PPUSH
64798: CALL_OW 118
// wait ( 5 ) ;
64802: LD_INT 5
64804: PPUSH
64805: CALL_OW 67
// _d := GetDir ( unit ) ;
64809: LD_ADDR_VAR 0 10
64813: PUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: CALL_OW 254
64823: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64824: LD_ADDR_VAR 0 8
64828: PUSH
64829: LD_VAR 0 1
64833: PPUSH
64834: CALL_OW 250
64838: PPUSH
64839: LD_VAR 0 10
64843: PPUSH
64844: LD_VAR 0 5
64848: PPUSH
64849: CALL_OW 272
64853: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64854: LD_ADDR_VAR 0 9
64858: PUSH
64859: LD_VAR 0 1
64863: PPUSH
64864: CALL_OW 251
64868: PPUSH
64869: LD_VAR 0 10
64873: PPUSH
64874: LD_VAR 0 5
64878: PPUSH
64879: CALL_OW 273
64883: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64884: LD_VAR 0 8
64888: PPUSH
64889: LD_VAR 0 9
64893: PPUSH
64894: CALL_OW 488
64898: NOT
64899: IFFALSE 64903
// exit ;
64901: GO 65010
// ComAnimCustom ( unit , 1 ) ;
64903: LD_VAR 0 1
64907: PPUSH
64908: LD_INT 1
64910: PPUSH
64911: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64915: LD_VAR 0 8
64919: PPUSH
64920: LD_VAR 0 9
64924: PPUSH
64925: LD_VAR 0 6
64929: PPUSH
64930: LD_VAR 0 7
64934: PPUSH
64935: CALL_OW 330
// repeat wait ( 1 ) ;
64939: LD_INT 1
64941: PPUSH
64942: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64946: LD_VAR 0 1
64950: PPUSH
64951: CALL_OW 316
64955: PUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: CALL_OW 314
64965: OR
64966: PUSH
64967: LD_VAR 0 1
64971: PPUSH
64972: CALL_OW 302
64976: NOT
64977: OR
64978: PUSH
64979: LD_VAR 0 1
64983: PPUSH
64984: CALL_OW 301
64988: OR
64989: IFFALSE 64939
// RemoveSeeing ( _x , _y , side ) ;
64991: LD_VAR 0 8
64995: PPUSH
64996: LD_VAR 0 9
65000: PPUSH
65001: LD_VAR 0 6
65005: PPUSH
65006: CALL_OW 331
// end ;
65010: LD_VAR 0 4
65014: RET
