// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42905 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42905 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42905 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6973 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9735 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9735 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 39032 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 39183 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 39412 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 39308 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42905 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42905 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42905 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 64594 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 64652 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42905 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42877 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42877 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 57
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 69
2534: IFFALSE 2485
// DialogueOn ;
2536: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2540: LD_EXP 18
2544: PPUSH
2545: LD_STRING DL-Intro-18
2547: PPUSH
2548: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2552: LD_EXP 18
2556: PPUSH
2557: LD_STRING DL-Intro-19
2559: PPUSH
2560: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2564: LD_EXP 18
2568: PPUSH
2569: LD_STRING DL-Intro-20
2571: PPUSH
2572: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_STRING DLt-Intro-21
2583: PPUSH
2584: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2588: LD_EXP 20
2592: PPUSH
2593: LD_STRING DLt-Intro-22
2595: PPUSH
2596: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2600: LD_EXP 20
2604: PPUSH
2605: LD_STRING DLt-Intro-23
2607: PPUSH
2608: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2612: LD_EXP 18
2616: PPUSH
2617: LD_STRING DL-Intro-24
2619: PPUSH
2620: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2624: LD_EXP 20
2628: PPUSH
2629: LD_STRING DLt-Intro-25
2631: PPUSH
2632: CALL_OW 88
// DialogueOff ;
2636: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2640: LD_STRING M2
2642: PPUSH
2643: CALL_OW 337
// Query ( Prepare ) ;
2647: LD_STRING Prepare
2649: PPUSH
2650: CALL_OW 97
// SaveForQuickRestart ;
2654: CALL_OW 22
// end ;
2658: LD_VAR 0 1
2662: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2663: LD_INT 22
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 15
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: IFFALSE 2708
2693: GO 2695
2695: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2696: LD_EXP 18
2700: PPUSH
2701: LD_STRING DL-Cam-1
2703: PPUSH
2704: CALL_OW 88
2708: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2709: LD_OWVAR 1
2713: PUSH
2714: LD_EXP 4
2718: PUSH
2719: LD_INT 2
2721: DIV
2722: GREATEREQUAL
2723: IFFALSE 2748
2725: GO 2727
2727: DISABLE
// begin DialogueOn ;
2728: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2732: LD_EXP 18
2736: PPUSH
2737: LD_STRING DL-Faster-1
2739: PPUSH
2740: CALL_OW 88
// DialogueOff ;
2744: CALL_OW 7
// end ;
2748: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2749: LD_OWVAR 1
2753: PUSH
2754: LD_EXP 4
2758: PUSH
2759: LD_INT 2
2761: DIV
2762: PUSH
2763: LD_INT 10500
2765: PLUS
2766: GREATEREQUAL
2767: IFFALSE 2792
2769: GO 2771
2771: DISABLE
// begin DialogueOn ;
2772: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2776: LD_EXP 18
2780: PPUSH
2781: LD_STRING DL-Faster-2
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// end ;
2792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2793: LD_INT 22
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 57
2808: PUSH
2809: EMPTY
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 2
2818: PUSH
2819: LD_INT 30
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: IFFALSE 2910
2866: PUSH
2867: LD_INT 22
2869: PUSH
2870: LD_INT 2
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 3
2879: PUSH
2880: LD_INT 57
2882: PUSH
2883: EMPTY
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 30
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: LIST
2904: PPUSH
2905: CALL_OW 69
2909: AND
2910: IFFALSE 2960
2912: PUSH
2913: LD_INT 22
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 57
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 30
2938: PUSH
2939: LD_INT 32
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PPUSH
2951: CALL_OW 69
2955: PUSH
2956: LD_INT 3
2958: GREATEREQUAL
2959: AND
2960: IFFALSE 3006
2962: PUSH
2963: LD_INT 22
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: LD_INT 57
2978: PUSH
2979: EMPTY
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 30
2988: PUSH
2989: LD_INT 5
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: PPUSH
3001: CALL_OW 69
3005: AND
3006: IFFALSE 3052
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 2
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 3
3021: PUSH
3022: LD_INT 57
3024: PUSH
3025: EMPTY
3026: LIST
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 30
3034: PUSH
3035: LD_INT 30
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: AND
3052: IFFALSE 3116
3054: PUSH
3055: LD_INT 22
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 57
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 2
3080: PUSH
3081: LD_INT 30
3083: PUSH
3084: LD_INT 26
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 30
3093: PUSH
3094: LD_INT 28
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 69
3115: AND
3116: IFFALSE 3153
3118: GO 3120
3120: DISABLE
// begin if tick <= 10 10$00 then
3121: LD_OWVAR 1
3125: PUSH
3126: LD_INT 21000
3128: LESSEQUAL
3129: IFFALSE 3138
// SetAchievement ( ACH_BOB ) ;
3131: LD_STRING ACH_BOB
3133: PPUSH
3134: CALL_OW 543
// baseDone := true ;
3138: LD_ADDR_EXP 5
3142: PUSH
3143: LD_INT 1
3145: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3146: LD_STRING M1out
3148: PPUSH
3149: CALL_OW 337
// end ;
3153: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3154: LD_EXP 5
3158: IFFALSE 3272
3160: PUSH
3161: LD_INT 22
3163: PUSH
3164: LD_INT 2
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 21
3173: PUSH
3174: LD_INT 2
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: LD_INT 3
3183: PUSH
3184: LD_INT 2
3186: PUSH
3187: LD_INT 34
3189: PUSH
3190: LD_INT 32
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 34
3199: PUSH
3200: LD_INT 88
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: PUSH
3226: LD_INT 22
3228: PUSH
3229: LD_INT 2
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 21
3238: PUSH
3239: LD_INT 1
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 23
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: PPUSH
3261: CALL_OW 69
3265: PPUSH
3266: CALL 6973 0 1
3270: GREATEREQUAL
3271: AND
3272: IFFALSE 3364
3274: GO 3276
3276: DISABLE
// begin DialogueOn ;
3277: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3281: LD_EXP 18
3285: PPUSH
3286: LD_STRING DL-Ready-1
3288: PPUSH
3289: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3293: LD_INT 22
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 23
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: IFFALSE 3335
// Say ( Schulz , DL-Ready-2 ) ;
3323: LD_EXP 18
3327: PPUSH
3328: LD_STRING DL-Ready-2
3330: PPUSH
3331: CALL_OW 88
// DialogueOff ;
3335: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3339: LD_STRING M3
3341: PPUSH
3342: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3346: LD_INT 7
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: CALL_OW 424
// canGo := true ;
3356: LD_ADDR_EXP 6
3360: PUSH
3361: LD_INT 1
3363: ST_TO_ADDR
// end ;
3364: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3365: LD_EXP 6
3369: IFFALSE 3480
3371: PUSH
3372: LD_INT 7
3374: PPUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 2
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 21
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 33
3397: PUSH
3398: LD_INT 1
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 58
3410: PUSH
3411: EMPTY
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 70
3428: PPUSH
3429: CALL 6973 0 1
3433: PUSH
3434: LD_INT 22
3436: PUSH
3437: LD_INT 2
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 21
3446: PUSH
3447: LD_INT 1
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: LD_INT 23
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: PPUSH
3474: CALL 6973 0 1
3478: GREATEREQUAL
3479: AND
3480: IFFALSE 3546
3482: PUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 21
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 3
3505: PUSH
3506: LD_INT 55
3508: PUSH
3509: EMPTY
3510: LIST
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 23
3518: PUSH
3519: LD_INT 2
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 69
3536: PPUSH
3537: CALL 6973 0 1
3541: PUSH
3542: LD_INT 0
3544: EQUAL
3545: AND
3546: IFFALSE 4624
3548: GO 3550
3550: DISABLE
3551: LD_INT 0
3553: PPUSH
3554: PPUSH
3555: PPUSH
3556: PPUSH
3557: PPUSH
// begin enable ;
3558: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3559: LD_ADDR_VAR 0 2
3563: PUSH
3564: LD_INT 7
3566: PPUSH
3567: LD_INT 22
3569: PUSH
3570: LD_INT 2
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 21
3579: PUSH
3580: LD_INT 2
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PPUSH
3591: CALL_OW 70
3595: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 2
3603: PUSH
3604: LD_INT 34
3606: PUSH
3607: LD_INT 88
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 34
3616: PUSH
3617: LD_INT 32
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 72
3633: IFFALSE 3644
// begin Query ( InvalidWeapon ) ;
3635: LD_STRING InvalidWeapon
3637: PPUSH
3638: CALL_OW 97
// exit ;
3642: GO 4624
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3644: LD_VAR 0 2
3648: PPUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 24
3654: PUSH
3655: LD_INT 1000
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: CALL_OW 72
3670: IFFALSE 3681
// begin Query ( HealthLevel ) ;
3672: LD_STRING HealthLevel
3674: PPUSH
3675: CALL_OW 97
// exit ;
3679: GO 4624
// end ; for i in tmp do
3681: LD_ADDR_VAR 0 1
3685: PUSH
3686: LD_VAR 0 2
3690: PUSH
3691: FOR_IN
3692: IFFALSE 3739
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3694: LD_VAR 0 1
3698: PPUSH
3699: CALL_OW 262
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3724
3709: PUSH
3710: LD_VAR 0 1
3714: PPUSH
3715: CALL_OW 261
3719: PUSH
3720: LD_INT 60
3722: LESS
3723: AND
3724: IFFALSE 3737
// begin Query ( FuelLevel ) ;
3726: LD_STRING FuelLevel
3728: PPUSH
3729: CALL_OW 97
// exit ;
3733: POP
3734: POP
3735: GO 4624
// end ;
3737: GO 3691
3739: POP
3740: POP
// disable ;
3741: DISABLE
// saveVehicles := [ ] ;
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: EMPTY
3748: ST_TO_ADDR
// for i in tmp do
3749: LD_ADDR_VAR 0 1
3753: PUSH
3754: LD_VAR 0 2
3758: PUSH
3759: FOR_IN
3760: IFFALSE 3869
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_VAR 0 3
3771: PPUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 265
3781: PUSH
3782: LD_VAR 0 1
3786: PPUSH
3787: CALL_OW 262
3791: PUSH
3792: LD_VAR 0 1
3796: PPUSH
3797: CALL_OW 263
3801: PUSH
3802: LD_VAR 0 1
3806: PPUSH
3807: CALL_OW 264
3811: PUSH
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL_OW 248
3821: PUSH
3822: LD_VAR 0 1
3826: PPUSH
3827: CALL_OW 261
3831: PUSH
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 271
3841: PUSH
3842: LD_VAR 0 1
3846: PPUSH
3847: CALL_OW 311
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: PPUSH
3862: CALL 42905 0 2
3866: ST_TO_ADDR
3867: GO 3759
3869: POP
3870: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3871: LD_ADDR_VAR 0 4
3875: PUSH
3876: LD_INT 22
3878: PUSH
3879: LD_INT 2
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 50
3898: PUSH
3899: EMPTY
3900: LIST
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: PPUSH
3907: CALL_OW 69
3911: PUSH
3912: LD_VAR 0 2
3916: DIFF
3917: ST_TO_ADDR
// if otherVehicles then
3918: LD_VAR 0 4
3922: IFFALSE 4098
// begin tmp := [ ] ;
3924: LD_ADDR_VAR 0 2
3928: PUSH
3929: EMPTY
3930: ST_TO_ADDR
// for i in otherVehicles do
3931: LD_ADDR_VAR 0 1
3935: PUSH
3936: LD_VAR 0 4
3940: PUSH
3941: FOR_IN
3942: IFFALSE 4084
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3944: LD_ADDR_VAR 0 2
3948: PUSH
3949: LD_VAR 0 2
3953: PPUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: CALL_OW 265
3963: PUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 262
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 263
3983: PUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: CALL_OW 264
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 248
4003: PUSH
4004: LD_VAR 0 1
4008: PPUSH
4009: CALL_OW 261
4013: PUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 271
4023: PUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 250
4033: PUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: CALL_OW 251
4043: PUSH
4044: LD_VAR 0 1
4048: PPUSH
4049: CALL_OW 254
4053: PUSH
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 256
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL 42905 0 2
4081: ST_TO_ADDR
4082: GO 3941
4084: POP
4085: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4086: LD_VAR 0 2
4090: PPUSH
4091: LD_STRING 09_otherVehicles
4093: PPUSH
4094: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) and UnitFilter ( saveVehicles , [ f_engine , engine_siberite ] ) then
4098: LD_VAR 0 3
4102: PPUSH
4103: LD_INT 32
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PPUSH
4113: CALL_OW 72
4117: NOT
4118: IFFALSE 4141
4120: PUSH
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 32
4128: PUSH
4129: LD_INT 3
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: AND
4141: IFFALSE 4150
// SetAchievement ( ACH_GREEN ) ;
4143: LD_STRING ACH_GREEN
4145: PPUSH
4146: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4150: LD_EXP 18
4154: PPUSH
4155: LD_STRING 09_Schulz
4157: PPUSH
4158: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4162: LD_EXP 18
4166: PPUSH
4167: LD_STRING 09_Schulz_ID
4169: PPUSH
4170: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4174: LD_EXP 20
4178: PPUSH
4179: LD_STRING 09_Lemmy
4181: PPUSH
4182: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4186: LD_EXP 20
4190: PPUSH
4191: LD_STRING 09_Lemmy_ID
4193: PPUSH
4194: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4198: LD_EXP 22
4202: PPUSH
4203: LD_STRING 09_Nia
4205: PPUSH
4206: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4210: LD_EXP 22
4214: PPUSH
4215: LD_STRING 09_Nia_ID
4217: PPUSH
4218: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4222: LD_EXP 21
4226: PPUSH
4227: LD_STRING 09_Mia
4229: PPUSH
4230: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4234: LD_EXP 21
4238: PPUSH
4239: LD_STRING 09_Mia_ID
4241: PPUSH
4242: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4246: LD_EXP 23
4250: PPUSH
4251: LD_STRING 09_Jenna
4253: PPUSH
4254: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4258: LD_EXP 23
4262: PPUSH
4263: LD_STRING 09_Jenna_ID
4265: PPUSH
4266: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4270: LD_EXP 26
4274: PPUSH
4275: LD_STRING 09_schulzSecondSquad
4277: PPUSH
4278: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4282: LD_ADDR_VAR 0 1
4286: PUSH
4287: DOUBLE
4288: LD_INT 1
4290: DEC
4291: ST_TO_ADDR
4292: LD_EXP 26
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4326
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4300: LD_EXP 26
4304: PUSH
4305: LD_VAR 0 1
4309: ARRAY
4310: PPUSH
4311: LD_STRING 09_random_ID_
4313: PUSH
4314: LD_VAR 0 1
4318: STR
4319: PPUSH
4320: CALL_OW 39
4324: GO 4297
4326: POP
4327: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: LD_STRING 09_vehicles
4335: PPUSH
4336: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4340: LD_OWVAR 1
4344: PPUSH
4345: LD_STRING 09_tick
4347: PPUSH
4348: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4352: LD_INT 6
4354: PPUSH
4355: LD_STRING 09_env
4357: PPUSH
4358: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4362: LD_INT 2
4364: PPUSH
4365: LD_STRING 09_tech
4367: PPUSH
4368: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4372: LD_INT 2
4374: PPUSH
4375: LD_STRING 09_materials
4377: PPUSH
4378: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4382: LD_INT 2
4384: PPUSH
4385: LD_STRING 09_buildings
4387: PPUSH
4388: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4392: LD_INT 22
4394: PUSH
4395: LD_INT 2
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 23
4404: PUSH
4405: LD_INT 0
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PPUSH
4416: CALL_OW 69
4420: PPUSH
4421: LD_STRING 09_apes
4423: PPUSH
4424: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4428: LD_EXP 4
4432: PPUSH
4433: LD_STRING 09_timeToHeikeDead
4435: PPUSH
4436: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4440: LD_EXP 3
4444: PPUSH
4445: LD_STRING 09_cameras
4447: PPUSH
4448: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4452: LD_ADDR_VAR 0 2
4456: PUSH
4457: LD_INT 22
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 23
4469: PUSH
4470: LD_INT 0
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 50
4479: PUSH
4480: EMPTY
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: ST_TO_ADDR
// if tmp then
4493: LD_VAR 0 2
4497: IFFALSE 4607
// begin animals := [ ] ;
4499: LD_ADDR_VAR 0 5
4503: PUSH
4504: EMPTY
4505: ST_TO_ADDR
// for i in tmp do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: LD_VAR 0 2
4515: PUSH
4516: FOR_IN
4517: IFFALSE 4593
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: LD_VAR 0 5
4528: PPUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: CALL_OW 257
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 250
4548: PUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: CALL_OW 251
4558: PUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: CALL_OW 254
4568: PUSH
4569: LD_VAR 0 1
4573: PPUSH
4574: CALL_OW 256
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PPUSH
4586: CALL 42905 0 2
4590: ST_TO_ADDR
4591: GO 4516
4593: POP
4594: POP
// SaveVariable ( animals , 09_animals ) ;
4595: LD_VAR 0 5
4599: PPUSH
4600: LD_STRING 09_animals
4602: PPUSH
4603: CALL_OW 39
// end ; wait ( 3 ) ;
4607: LD_INT 3
4609: PPUSH
4610: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4614: LD_INT 1
4616: PPUSH
4617: LD_STRING %2
4619: PPUSH
4620: CALL_OW 340
// end ; end_of_file
4624: PPOPN 5
4626: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4627: LD_OWVAR 1
4631: PUSH
4632: LD_INT 14700
4634: LESS
4635: IFFALSE 4668
4637: GO 4639
4639: DISABLE
// begin enable ;
4640: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4641: LD_INT 1
4643: PPUSH
4644: LD_INT 5
4646: PPUSH
4647: CALL_OW 12
4651: PPUSH
4652: LD_INT 85
4654: PPUSH
4655: LD_INT 44
4657: PPUSH
4658: LD_INT 30
4660: PPUSH
4661: LD_INT 1
4663: PPUSH
4664: CALL_OW 56
// end ;
4668: END
// every 0 0$29 trigger tick < 20 20$00 do
4669: LD_OWVAR 1
4673: PUSH
4674: LD_INT 42000
4676: LESS
4677: IFFALSE 4748
4679: GO 4681
4681: DISABLE
// begin enable ;
4682: ENABLE
// if Prob ( 50 ) then
4683: LD_INT 50
4685: PPUSH
4686: CALL_OW 13
4690: IFFALSE 4721
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4692: LD_INT 1
4694: PPUSH
4695: LD_INT 5
4697: PPUSH
4698: CALL_OW 12
4702: PPUSH
4703: LD_INT 72
4705: PPUSH
4706: LD_INT 109
4708: PPUSH
4709: LD_INT 22
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: CALL_OW 56
4719: GO 4748
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4721: LD_INT 1
4723: PPUSH
4724: LD_INT 5
4726: PPUSH
4727: CALL_OW 12
4731: PPUSH
4732: LD_INT 140
4734: PPUSH
4735: LD_INT 73
4737: PPUSH
4738: LD_INT 22
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 56
4748: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4749: LD_INT 0
4751: PPUSH
4752: PPUSH
// if exist_mode then
4753: LD_VAR 0 2
4757: IFFALSE 4803
// begin unit := CreateCharacter ( prefix & ident ) ;
4759: LD_ADDR_VAR 0 5
4763: PUSH
4764: LD_VAR 0 3
4768: PUSH
4769: LD_VAR 0 1
4773: STR
4774: PPUSH
4775: CALL_OW 34
4779: ST_TO_ADDR
// if unit then
4780: LD_VAR 0 5
4784: IFFALSE 4801
// DeleteCharacters ( prefix & ident ) ;
4786: LD_VAR 0 3
4790: PUSH
4791: LD_VAR 0 1
4795: STR
4796: PPUSH
4797: CALL_OW 40
// end else
4801: GO 4818
// unit := NewCharacter ( ident ) ;
4803: LD_ADDR_VAR 0 5
4807: PUSH
4808: LD_VAR 0 1
4812: PPUSH
4813: CALL_OW 25
4817: ST_TO_ADDR
// result := unit ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 5
4827: ST_TO_ADDR
// end ;
4828: LD_VAR 0 4
4832: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
4833: LD_INT 0
4835: PPUSH
4836: PPUSH
// if exist_mode then
4837: LD_VAR 0 2
4841: IFFALSE 4866
// unit := CreateCharacter ( prefix & ident ) else
4843: LD_ADDR_VAR 0 5
4847: PUSH
4848: LD_VAR 0 3
4852: PUSH
4853: LD_VAR 0 1
4857: STR
4858: PPUSH
4859: CALL_OW 34
4863: ST_TO_ADDR
4864: GO 4881
// unit := NewCharacter ( ident ) ;
4866: LD_ADDR_VAR 0 5
4870: PUSH
4871: LD_VAR 0 1
4875: PPUSH
4876: CALL_OW 25
4880: ST_TO_ADDR
// result := unit ;
4881: LD_ADDR_VAR 0 4
4885: PUSH
4886: LD_VAR 0 5
4890: ST_TO_ADDR
// end ;
4891: LD_VAR 0 4
4895: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4896: LD_INT 0
4898: PPUSH
4899: PPUSH
// if not side or not nation then
4900: LD_VAR 0 1
4904: NOT
4905: IFTRUE 4914
4907: PUSH
4908: LD_VAR 0 2
4912: NOT
4913: OR
4914: IFFALSE 4918
// exit ;
4916: GO 5712
// case nation of nation_american :
4918: LD_VAR 0 2
4922: PUSH
4923: LD_INT 1
4925: DOUBLE
4926: EQUAL
4927: IFTRUE 4931
4929: GO 5153
4931: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_INT 35
4939: PUSH
4940: LD_INT 45
4942: PUSH
4943: LD_INT 46
4945: PUSH
4946: LD_INT 47
4948: PUSH
4949: LD_INT 82
4951: PUSH
4952: LD_INT 83
4954: PUSH
4955: LD_INT 84
4957: PUSH
4958: LD_INT 85
4960: PUSH
4961: LD_INT 86
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: LD_INT 6
4972: PUSH
4973: LD_INT 15
4975: PUSH
4976: LD_INT 16
4978: PUSH
4979: LD_INT 7
4981: PUSH
4982: LD_INT 12
4984: PUSH
4985: LD_INT 13
4987: PUSH
4988: LD_INT 10
4990: PUSH
4991: LD_INT 14
4993: PUSH
4994: LD_INT 20
4996: PUSH
4997: LD_INT 21
4999: PUSH
5000: LD_INT 22
5002: PUSH
5003: LD_INT 25
5005: PUSH
5006: LD_INT 32
5008: PUSH
5009: LD_INT 27
5011: PUSH
5012: LD_INT 36
5014: PUSH
5015: LD_INT 69
5017: PUSH
5018: LD_INT 39
5020: PUSH
5021: LD_INT 34
5023: PUSH
5024: LD_INT 40
5026: PUSH
5027: LD_INT 48
5029: PUSH
5030: LD_INT 49
5032: PUSH
5033: LD_INT 50
5035: PUSH
5036: LD_INT 51
5038: PUSH
5039: LD_INT 52
5041: PUSH
5042: LD_INT 53
5044: PUSH
5045: LD_INT 54
5047: PUSH
5048: LD_INT 55
5050: PUSH
5051: LD_INT 56
5053: PUSH
5054: LD_INT 57
5056: PUSH
5057: LD_INT 58
5059: PUSH
5060: LD_INT 59
5062: PUSH
5063: LD_INT 60
5065: PUSH
5066: LD_INT 61
5068: PUSH
5069: LD_INT 62
5071: PUSH
5072: LD_INT 80
5074: PUSH
5075: LD_INT 82
5077: PUSH
5078: LD_INT 83
5080: PUSH
5081: LD_INT 84
5083: PUSH
5084: LD_INT 85
5086: PUSH
5087: LD_INT 86
5089: PUSH
5090: LD_INT 90
5092: PUSH
5093: LD_INT 93
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: ST_TO_ADDR
5151: GO 5634
5153: LD_INT 2
5155: DOUBLE
5156: EQUAL
5157: IFTRUE 5161
5159: GO 5395
5161: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_INT 35
5169: PUSH
5170: LD_INT 45
5172: PUSH
5173: LD_INT 46
5175: PUSH
5176: LD_INT 47
5178: PUSH
5179: LD_INT 82
5181: PUSH
5182: LD_INT 83
5184: PUSH
5185: LD_INT 84
5187: PUSH
5188: LD_INT 85
5190: PUSH
5191: LD_INT 87
5193: PUSH
5194: LD_INT 70
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: LD_INT 11
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 4
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 15
5217: PUSH
5218: LD_INT 18
5220: PUSH
5221: LD_INT 7
5223: PUSH
5224: LD_INT 17
5226: PUSH
5227: LD_INT 8
5229: PUSH
5230: LD_INT 20
5232: PUSH
5233: LD_INT 21
5235: PUSH
5236: LD_INT 22
5238: PUSH
5239: LD_INT 72
5241: PUSH
5242: LD_INT 26
5244: PUSH
5245: LD_INT 69
5247: PUSH
5248: LD_INT 39
5250: PUSH
5251: LD_INT 40
5253: PUSH
5254: LD_INT 41
5256: PUSH
5257: LD_INT 42
5259: PUSH
5260: LD_INT 43
5262: PUSH
5263: LD_INT 48
5265: PUSH
5266: LD_INT 49
5268: PUSH
5269: LD_INT 50
5271: PUSH
5272: LD_INT 51
5274: PUSH
5275: LD_INT 52
5277: PUSH
5278: LD_INT 53
5280: PUSH
5281: LD_INT 54
5283: PUSH
5284: LD_INT 55
5286: PUSH
5287: LD_INT 56
5289: PUSH
5290: LD_INT 60
5292: PUSH
5293: LD_INT 61
5295: PUSH
5296: LD_INT 62
5298: PUSH
5299: LD_INT 66
5301: PUSH
5302: LD_INT 67
5304: PUSH
5305: LD_INT 68
5307: PUSH
5308: LD_INT 81
5310: PUSH
5311: LD_INT 82
5313: PUSH
5314: LD_INT 83
5316: PUSH
5317: LD_INT 84
5319: PUSH
5320: LD_INT 85
5322: PUSH
5323: LD_INT 87
5325: PUSH
5326: LD_INT 88
5328: PUSH
5329: LD_INT 92
5331: PUSH
5332: LD_INT 94
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: ST_TO_ADDR
5393: GO 5634
5395: LD_INT 3
5397: DOUBLE
5398: EQUAL
5399: IFTRUE 5403
5401: GO 5633
5403: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
5404: LD_ADDR_VAR 0 4
5408: PUSH
5409: LD_INT 46
5411: PUSH
5412: LD_INT 47
5414: PUSH
5415: LD_INT 1
5417: PUSH
5418: LD_INT 2
5420: PUSH
5421: LD_INT 82
5423: PUSH
5424: LD_INT 83
5426: PUSH
5427: LD_INT 84
5429: PUSH
5430: LD_INT 85
5432: PUSH
5433: LD_INT 86
5435: PUSH
5436: LD_INT 11
5438: PUSH
5439: LD_INT 9
5441: PUSH
5442: LD_INT 20
5444: PUSH
5445: LD_INT 19
5447: PUSH
5448: LD_INT 21
5450: PUSH
5451: LD_INT 24
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 25
5459: PUSH
5460: LD_INT 28
5462: PUSH
5463: LD_INT 29
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 31
5471: PUSH
5472: LD_INT 37
5474: PUSH
5475: LD_INT 38
5477: PUSH
5478: LD_INT 32
5480: PUSH
5481: LD_INT 27
5483: PUSH
5484: LD_INT 33
5486: PUSH
5487: LD_INT 69
5489: PUSH
5490: LD_INT 39
5492: PUSH
5493: LD_INT 34
5495: PUSH
5496: LD_INT 40
5498: PUSH
5499: LD_INT 71
5501: PUSH
5502: LD_INT 23
5504: PUSH
5505: LD_INT 44
5507: PUSH
5508: LD_INT 48
5510: PUSH
5511: LD_INT 49
5513: PUSH
5514: LD_INT 50
5516: PUSH
5517: LD_INT 51
5519: PUSH
5520: LD_INT 52
5522: PUSH
5523: LD_INT 53
5525: PUSH
5526: LD_INT 54
5528: PUSH
5529: LD_INT 55
5531: PUSH
5532: LD_INT 56
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 58
5540: PUSH
5541: LD_INT 59
5543: PUSH
5544: LD_INT 63
5546: PUSH
5547: LD_INT 64
5549: PUSH
5550: LD_INT 65
5552: PUSH
5553: LD_INT 82
5555: PUSH
5556: LD_INT 83
5558: PUSH
5559: LD_INT 84
5561: PUSH
5562: LD_INT 85
5564: PUSH
5565: LD_INT 86
5567: PUSH
5568: LD_INT 89
5570: PUSH
5571: LD_INT 91
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
5631: GO 5634
5633: POP
// if state > - 1 and state < 3 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 1
5641: NEG
5642: GREATER
5643: IFFALSE 5655
5645: PUSH
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 3
5653: LESS
5654: AND
5655: IFFALSE 5712
// for i in result do
5657: LD_ADDR_VAR 0 5
5661: PUSH
5662: LD_VAR 0 4
5666: PUSH
5667: FOR_IN
5668: IFFALSE 5710
// if GetTech ( i , side ) <> state then
5670: LD_VAR 0 5
5674: PPUSH
5675: LD_VAR 0 1
5679: PPUSH
5680: CALL_OW 321
5684: PUSH
5685: LD_VAR 0 3
5689: NONEQUAL
5690: IFFALSE 5708
// result := result diff i ;
5692: LD_ADDR_VAR 0 4
5696: PUSH
5697: LD_VAR 0 4
5701: PUSH
5702: LD_VAR 0 5
5706: DIFF
5707: ST_TO_ADDR
5708: GO 5667
5710: POP
5711: POP
// end ;
5712: LD_VAR 0 4
5716: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5717: LD_INT 0
5719: PPUSH
5720: PPUSH
5721: PPUSH
// result := true ;
5722: LD_ADDR_VAR 0 3
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5730: LD_ADDR_VAR 0 5
5734: PUSH
5735: LD_VAR 0 2
5739: PPUSH
5740: CALL_OW 480
5744: ST_TO_ADDR
// if not tmp then
5745: LD_VAR 0 5
5749: NOT
5750: IFFALSE 5754
// exit ;
5752: GO 5803
// for i in tmp do
5754: LD_ADDR_VAR 0 4
5758: PUSH
5759: LD_VAR 0 5
5763: PUSH
5764: FOR_IN
5765: IFFALSE 5801
// if GetTech ( i , side ) <> state_researched then
5767: LD_VAR 0 4
5771: PPUSH
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL_OW 321
5781: PUSH
5782: LD_INT 2
5784: NONEQUAL
5785: IFFALSE 5799
// begin result := false ;
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// exit ;
5795: POP
5796: POP
5797: GO 5803
// end ;
5799: GO 5764
5801: POP
5802: POP
// end ;
5803: LD_VAR 0 3
5807: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
5815: PPUSH
5816: PPUSH
5817: PPUSH
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5823: LD_VAR 0 1
5827: NOT
5828: IFTRUE 5845
5830: PUSH
5831: LD_VAR 0 1
5835: PPUSH
5836: CALL_OW 257
5840: PUSH
5841: LD_INT 9
5843: NONEQUAL
5844: OR
5845: IFFALSE 5849
// exit ;
5847: GO 6428
// side := GetSide ( unit ) ;
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: LD_VAR 0 1
5858: PPUSH
5859: CALL_OW 255
5863: ST_TO_ADDR
// tech_space := tech_spacanom ;
5864: LD_ADDR_VAR 0 12
5868: PUSH
5869: LD_INT 29
5871: ST_TO_ADDR
// tech_time := tech_taurad ;
5872: LD_ADDR_VAR 0 13
5876: PUSH
5877: LD_INT 28
5879: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5880: LD_ADDR_VAR 0 11
5884: PUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 310
5894: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5895: LD_VAR 0 11
5899: PPUSH
5900: CALL_OW 247
5904: PUSH
5905: LD_INT 2
5907: EQUAL
5908: IFFALSE 5912
// exit ;
5910: GO 6428
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5912: LD_ADDR_VAR 0 8
5916: PUSH
5917: LD_INT 81
5919: PUSH
5920: LD_VAR 0 9
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: LD_INT 3
5931: PUSH
5932: LD_INT 21
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PPUSH
5950: CALL_OW 69
5954: ST_TO_ADDR
// if not tmp then
5955: LD_VAR 0 8
5959: NOT
5960: IFFALSE 5964
// exit ;
5962: GO 6428
// if in_unit then
5964: LD_VAR 0 11
5968: IFFALSE 5992
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5970: LD_ADDR_VAR 0 10
5974: PUSH
5975: LD_VAR 0 8
5979: PPUSH
5980: LD_VAR 0 11
5984: PPUSH
5985: CALL_OW 74
5989: ST_TO_ADDR
5990: GO 6012
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5992: LD_ADDR_VAR 0 10
5996: PUSH
5997: LD_VAR 0 8
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 74
6011: ST_TO_ADDR
// if not enemy then
6012: LD_VAR 0 10
6016: NOT
6017: IFFALSE 6021
// exit ;
6019: GO 6428
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
6021: LD_VAR 0 11
6025: IFFALSE 6047
6027: PUSH
6028: LD_VAR 0 11
6032: PPUSH
6033: LD_VAR 0 10
6037: PPUSH
6038: CALL_OW 296
6042: PUSH
6043: LD_INT 13
6045: GREATER
6046: AND
6047: IFTRUE 6069
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: LD_VAR 0 10
6059: PPUSH
6060: CALL_OW 296
6064: PUSH
6065: LD_INT 12
6067: GREATER
6068: OR
6069: IFFALSE 6073
// exit ;
6071: GO 6428
// missile := [ 1 ] ;
6073: LD_ADDR_VAR 0 14
6077: PUSH
6078: LD_INT 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: ST_TO_ADDR
// if Researched ( side , tech_space ) then
6084: LD_VAR 0 9
6088: PPUSH
6089: LD_VAR 0 12
6093: PPUSH
6094: CALL_OW 325
6098: IFFALSE 6127
// missile := Replace ( missile , missile + 1 , 2 ) ;
6100: LD_ADDR_VAR 0 14
6104: PUSH
6105: LD_VAR 0 14
6109: PPUSH
6110: LD_VAR 0 14
6114: PUSH
6115: LD_INT 1
6117: PLUS
6118: PPUSH
6119: LD_INT 2
6121: PPUSH
6122: CALL_OW 1
6126: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
6127: LD_VAR 0 9
6131: PPUSH
6132: LD_VAR 0 13
6136: PPUSH
6137: CALL_OW 325
6141: IFFALSE 6165
6143: PUSH
6144: LD_VAR 0 10
6148: PPUSH
6149: CALL_OW 255
6153: PPUSH
6154: LD_VAR 0 13
6158: PPUSH
6159: CALL_OW 325
6163: NOT
6164: AND
6165: IFFALSE 6194
// missile := Replace ( missile , missile + 1 , 3 ) ;
6167: LD_ADDR_VAR 0 14
6171: PUSH
6172: LD_VAR 0 14
6176: PPUSH
6177: LD_VAR 0 14
6181: PUSH
6182: LD_INT 1
6184: PLUS
6185: PPUSH
6186: LD_INT 3
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// if missile < 2 then
6194: LD_VAR 0 14
6198: PUSH
6199: LD_INT 2
6201: LESS
6202: IFFALSE 6206
// exit ;
6204: GO 6428
// x := GetX ( enemy ) ;
6206: LD_ADDR_VAR 0 4
6210: PUSH
6211: LD_VAR 0 10
6215: PPUSH
6216: CALL_OW 250
6220: ST_TO_ADDR
// y := GetY ( enemy ) ;
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: LD_VAR 0 10
6230: PPUSH
6231: CALL_OW 251
6235: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6236: LD_ADDR_VAR 0 6
6240: PUSH
6241: LD_VAR 0 4
6245: PUSH
6246: LD_INT 1
6248: NEG
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 12
6257: PLUS
6258: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6259: LD_ADDR_VAR 0 7
6263: PUSH
6264: LD_VAR 0 5
6268: PUSH
6269: LD_INT 1
6271: NEG
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 12
6280: PLUS
6281: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6282: LD_VAR 0 6
6286: PPUSH
6287: LD_VAR 0 7
6291: PPUSH
6292: CALL_OW 488
6296: NOT
6297: IFFALSE 6319
// begin _x := x ;
6299: LD_ADDR_VAR 0 6
6303: PUSH
6304: LD_VAR 0 4
6308: ST_TO_ADDR
// _y := y ;
6309: LD_ADDR_VAR 0 7
6313: PUSH
6314: LD_VAR 0 5
6318: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 1
6326: PPUSH
6327: LD_VAR 0 14
6331: PPUSH
6332: CALL_OW 12
6336: ST_TO_ADDR
// case i of 1 :
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 1
6344: DOUBLE
6345: EQUAL
6346: IFTRUE 6350
6348: GO 6367
6350: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6351: LD_VAR 0 1
6355: PPUSH
6356: LD_VAR 0 10
6360: PPUSH
6361: CALL_OW 115
6365: GO 6428
6367: LD_INT 2
6369: DOUBLE
6370: EQUAL
6371: IFTRUE 6375
6373: GO 6397
6375: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6376: LD_VAR 0 1
6380: PPUSH
6381: LD_VAR 0 6
6385: PPUSH
6386: LD_VAR 0 7
6390: PPUSH
6391: CALL_OW 153
6395: GO 6428
6397: LD_INT 3
6399: DOUBLE
6400: EQUAL
6401: IFTRUE 6405
6403: GO 6427
6405: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6406: LD_VAR 0 1
6410: PPUSH
6411: LD_VAR 0 6
6415: PPUSH
6416: LD_VAR 0 7
6420: PPUSH
6421: CALL_OW 154
6425: GO 6428
6427: POP
// end ;
6428: LD_VAR 0 2
6432: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6433: LD_INT 0
6435: PPUSH
6436: PPUSH
6437: PPUSH
6438: PPUSH
6439: PPUSH
6440: PPUSH
// if not unit or not building then
6441: LD_VAR 0 1
6445: NOT
6446: IFTRUE 6455
6448: PUSH
6449: LD_VAR 0 2
6453: NOT
6454: OR
6455: IFFALSE 6459
// exit ;
6457: GO 6617
// x := GetX ( building ) ;
6459: LD_ADDR_VAR 0 5
6463: PUSH
6464: LD_VAR 0 2
6468: PPUSH
6469: CALL_OW 250
6473: ST_TO_ADDR
// y := GetY ( building ) ;
6474: LD_ADDR_VAR 0 6
6478: PUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: CALL_OW 251
6488: ST_TO_ADDR
// for i := 0 to 5 do
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: DOUBLE
6495: LD_INT 0
6497: DEC
6498: ST_TO_ADDR
6499: LD_INT 5
6501: PUSH
6502: FOR_TO
6503: IFFALSE 6615
// begin _x := ShiftX ( x , i , 3 ) ;
6505: LD_ADDR_VAR 0 7
6509: PUSH
6510: LD_VAR 0 5
6514: PPUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 3
6522: PPUSH
6523: CALL_OW 272
6527: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6528: LD_ADDR_VAR 0 8
6532: PUSH
6533: LD_VAR 0 6
6537: PPUSH
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: CALL_OW 273
6550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6551: LD_VAR 0 7
6555: PPUSH
6556: LD_VAR 0 8
6560: PPUSH
6561: CALL_OW 488
6565: NOT
6566: IFFALSE 6570
// continue ;
6568: GO 6502
// if HexInfo ( _x , _y ) = 0 then
6570: LD_VAR 0 7
6574: PPUSH
6575: LD_VAR 0 8
6579: PPUSH
6580: CALL_OW 428
6584: PUSH
6585: LD_INT 0
6587: EQUAL
6588: IFFALSE 6613
// begin ComMoveXY ( unit , _x , _y ) ;
6590: LD_VAR 0 1
6594: PPUSH
6595: LD_VAR 0 7
6599: PPUSH
6600: LD_VAR 0 8
6604: PPUSH
6605: CALL_OW 111
// exit ;
6609: POP
6610: POP
6611: GO 6617
// end ; end ;
6613: GO 6502
6615: POP
6616: POP
// end ;
6617: LD_VAR 0 3
6621: RET
// export function ScanBase ( side , base_area ) ; begin
6622: LD_INT 0
6624: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_VAR 0 2
6634: PPUSH
6635: LD_INT 81
6637: PUSH
6638: LD_VAR 0 1
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 70
6651: ST_TO_ADDR
// end ;
6652: LD_VAR 0 3
6656: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6657: LD_INT 0
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// result := false ;
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 0
6670: ST_TO_ADDR
// side := GetSide ( unit ) ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_VAR 0 1
6680: PPUSH
6681: CALL_OW 255
6685: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 248
6700: ST_TO_ADDR
// case nat of 1 :
6701: LD_VAR 0 4
6705: PUSH
6706: LD_INT 1
6708: DOUBLE
6709: EQUAL
6710: IFTRUE 6714
6712: GO 6725
6714: POP
// tech := tech_lassight ; 2 :
6715: LD_ADDR_VAR 0 5
6719: PUSH
6720: LD_INT 12
6722: ST_TO_ADDR
6723: GO 6764
6725: LD_INT 2
6727: DOUBLE
6728: EQUAL
6729: IFTRUE 6733
6731: GO 6744
6733: POP
// tech := tech_mortar ; 3 :
6734: LD_ADDR_VAR 0 5
6738: PUSH
6739: LD_INT 41
6741: ST_TO_ADDR
6742: GO 6764
6744: LD_INT 3
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6763
6752: POP
// tech := tech_bazooka ; end ;
6753: LD_ADDR_VAR 0 5
6757: PUSH
6758: LD_INT 44
6760: ST_TO_ADDR
6761: GO 6764
6763: POP
// if Researched ( side , tech ) then
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 5
6773: PPUSH
6774: CALL_OW 325
6778: IFFALSE 6805
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6780: LD_ADDR_VAR 0 2
6784: PUSH
6785: LD_INT 5
6787: PUSH
6788: LD_INT 8
6790: PUSH
6791: LD_INT 9
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_VAR 0 4
6803: ARRAY
6804: ST_TO_ADDR
// end ;
6805: LD_VAR 0 2
6809: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
// if not mines then
6815: LD_VAR 0 2
6819: NOT
6820: IFFALSE 6824
// exit ;
6822: GO 6968
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6824: LD_ADDR_VAR 0 5
6828: PUSH
6829: LD_INT 81
6831: PUSH
6832: LD_VAR 0 1
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 21
6846: PUSH
6847: LD_INT 3
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// for i in mines do
6867: LD_ADDR_VAR 0 4
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: FOR_IN
6878: IFFALSE 6966
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6880: LD_VAR 0 4
6884: PUSH
6885: LD_INT 1
6887: ARRAY
6888: PPUSH
6889: LD_VAR 0 4
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 458
6902: NOT
6903: IFFALSE 6907
// continue ;
6905: GO 6877
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6907: LD_VAR 0 4
6911: PUSH
6912: LD_INT 1
6914: ARRAY
6915: PPUSH
6916: LD_VAR 0 4
6920: PUSH
6921: LD_INT 2
6923: ARRAY
6924: PPUSH
6925: CALL_OW 428
6929: PUSH
6930: LD_VAR 0 5
6934: IN
6935: IFFALSE 6964
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6937: LD_VAR 0 4
6941: PUSH
6942: LD_INT 1
6944: ARRAY
6945: PPUSH
6946: LD_VAR 0 4
6950: PUSH
6951: LD_INT 2
6953: ARRAY
6954: PPUSH
6955: LD_VAR 0 1
6959: PPUSH
6960: CALL_OW 456
// end ;
6964: GO 6877
6966: POP
6967: POP
// end ;
6968: LD_VAR 0 3
6972: RET
// export function Count ( array ) ; begin
6973: LD_INT 0
6975: PPUSH
// result := array + 0 ;
6976: LD_ADDR_VAR 0 2
6980: PUSH
6981: LD_VAR 0 1
6985: PUSH
6986: LD_INT 0
6988: PLUS
6989: ST_TO_ADDR
// end ;
6990: LD_VAR 0 2
6994: RET
// export function IsEmpty ( building ) ; begin
6995: LD_INT 0
6997: PPUSH
// if not building then
6998: LD_VAR 0 1
7002: NOT
7003: IFFALSE 7007
// exit ;
7005: GO 7050
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
7007: LD_ADDR_VAR 0 2
7011: PUSH
7012: LD_VAR 0 1
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 255
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 58
7036: PUSH
7037: EMPTY
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 69
7048: IN
7049: ST_TO_ADDR
// end ;
7050: LD_VAR 0 2
7054: RET
// export function IsNotFull ( building ) ; var places ; begin
7055: LD_INT 0
7057: PPUSH
7058: PPUSH
// if not building then
7059: LD_VAR 0 1
7063: NOT
7064: IFFALSE 7068
// exit ;
7066: GO 7096
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_VAR 0 1
7077: PPUSH
7078: LD_INT 3
7080: PUSH
7081: LD_INT 62
7083: PUSH
7084: EMPTY
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: ST_TO_ADDR
// end ;
7096: LD_VAR 0 2
7100: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
7101: LD_INT 0
7103: PPUSH
7104: PPUSH
7105: PPUSH
7106: PPUSH
// tmp := [ ] ;
7107: LD_ADDR_VAR 0 3
7111: PUSH
7112: EMPTY
7113: ST_TO_ADDR
// list := [ ] ;
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: EMPTY
7120: ST_TO_ADDR
// for i = 16 to 25 do
7121: LD_ADDR_VAR 0 4
7125: PUSH
7126: DOUBLE
7127: LD_INT 16
7129: DEC
7130: ST_TO_ADDR
7131: LD_INT 25
7133: PUSH
7134: FOR_TO
7135: IFFALSE 7208
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_VAR 0 3
7146: PUSH
7147: LD_INT 22
7149: PUSH
7150: LD_VAR 0 1
7154: PPUSH
7155: CALL_OW 255
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 91
7166: PUSH
7167: LD_VAR 0 1
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 30
7182: PUSH
7183: LD_VAR 0 4
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: PPUSH
7200: CALL_OW 69
7204: ADD
7205: ST_TO_ADDR
7206: GO 7134
7208: POP
7209: POP
// for i = 1 to tmp do
7210: LD_ADDR_VAR 0 4
7214: PUSH
7215: DOUBLE
7216: LD_INT 1
7218: DEC
7219: ST_TO_ADDR
7220: LD_VAR 0 3
7224: PUSH
7225: FOR_TO
7226: IFFALSE 7314
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7228: LD_ADDR_VAR 0 5
7232: PUSH
7233: LD_VAR 0 5
7237: PUSH
7238: LD_VAR 0 3
7242: PUSH
7243: LD_VAR 0 4
7247: ARRAY
7248: PPUSH
7249: CALL_OW 266
7253: PUSH
7254: LD_VAR 0 3
7258: PUSH
7259: LD_VAR 0 4
7263: ARRAY
7264: PPUSH
7265: CALL_OW 250
7269: PUSH
7270: LD_VAR 0 3
7274: PUSH
7275: LD_VAR 0 4
7279: ARRAY
7280: PPUSH
7281: CALL_OW 251
7285: PUSH
7286: LD_VAR 0 3
7290: PUSH
7291: LD_VAR 0 4
7295: ARRAY
7296: PPUSH
7297: CALL_OW 254
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: ADD
7311: ST_TO_ADDR
7312: GO 7225
7314: POP
7315: POP
// result := list ;
7316: LD_ADDR_VAR 0 2
7320: PUSH
7321: LD_VAR 0 5
7325: ST_TO_ADDR
// end ;
7326: LD_VAR 0 2
7330: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7331: LD_INT 0
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
// if not factory then
7340: LD_VAR 0 1
7344: NOT
7345: IFFALSE 7349
// exit ;
7347: GO 7952
// if control = control_apeman then
7349: LD_VAR 0 4
7353: PUSH
7354: LD_INT 5
7356: EQUAL
7357: IFFALSE 7466
// begin tmp := UnitsInside ( factory ) ;
7359: LD_ADDR_VAR 0 8
7363: PUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 313
7373: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7374: LD_VAR 0 8
7378: PPUSH
7379: LD_INT 25
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 72
7393: NOT
7394: IFFALSE 7404
// control := control_manual ;
7396: LD_ADDR_VAR 0 4
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7404: LD_ADDR_VAR 0 8
7408: PUSH
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL 7101 0 1
7418: ST_TO_ADDR
// if tmp then
7419: LD_VAR 0 8
7423: IFFALSE 7466
// begin for i in tmp do
7425: LD_ADDR_VAR 0 7
7429: PUSH
7430: LD_VAR 0 8
7434: PUSH
7435: FOR_IN
7436: IFFALSE 7464
// if i [ 1 ] = b_ext_radio then
7438: LD_VAR 0 7
7442: PUSH
7443: LD_INT 1
7445: ARRAY
7446: PUSH
7447: LD_INT 22
7449: EQUAL
7450: IFFALSE 7462
// begin control := control_remote ;
7452: LD_ADDR_VAR 0 4
7456: PUSH
7457: LD_INT 2
7459: ST_TO_ADDR
// break ;
7460: GO 7464
// end ;
7462: GO 7435
7464: POP
7465: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7466: LD_VAR 0 1
7470: PPUSH
7471: LD_VAR 0 2
7475: PPUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_VAR 0 5
7490: PPUSH
7491: CALL_OW 448
7495: IFFALSE 7530
// begin result := [ chassis , engine , control , weapon ] ;
7497: LD_ADDR_VAR 0 6
7501: PUSH
7502: LD_VAR 0 2
7506: PUSH
7507: LD_VAR 0 3
7511: PUSH
7512: LD_VAR 0 4
7516: PUSH
7517: LD_VAR 0 5
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: ST_TO_ADDR
// exit ;
7528: GO 7952
// end ; _chassis := AvailableChassisList ( factory ) ;
7530: LD_ADDR_VAR 0 9
7534: PUSH
7535: LD_VAR 0 1
7539: PPUSH
7540: CALL_OW 475
7544: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7545: LD_ADDR_VAR 0 11
7549: PUSH
7550: LD_VAR 0 1
7554: PPUSH
7555: CALL_OW 476
7559: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7560: LD_ADDR_VAR 0 12
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 477
7574: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7575: LD_ADDR_VAR 0 10
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 478
7589: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7590: LD_VAR 0 9
7594: NOT
7595: IFTRUE 7604
7597: PUSH
7598: LD_VAR 0 11
7602: NOT
7603: OR
7604: IFTRUE 7613
7606: PUSH
7607: LD_VAR 0 12
7611: NOT
7612: OR
7613: IFTRUE 7622
7615: PUSH
7616: LD_VAR 0 10
7620: NOT
7621: OR
7622: IFFALSE 7657
// begin result := [ chassis , engine , control , weapon ] ;
7624: LD_ADDR_VAR 0 6
7628: PUSH
7629: LD_VAR 0 2
7633: PUSH
7634: LD_VAR 0 3
7638: PUSH
7639: LD_VAR 0 4
7643: PUSH
7644: LD_VAR 0 5
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// exit ;
7655: GO 7952
// end ; if not chassis in _chassis then
7657: LD_VAR 0 2
7661: PUSH
7662: LD_VAR 0 9
7666: IN
7667: NOT
7668: IFFALSE 7694
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: LD_VAR 0 9
7679: PUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 9
7687: PPUSH
7688: CALL_OW 12
7692: ARRAY
7693: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7694: LD_VAR 0 2
7698: PPUSH
7699: LD_VAR 0 3
7703: PPUSH
7704: CALL 7957 0 2
7708: NOT
7709: IFFALSE 7770
// repeat engine := _engine [ 1 ] ;
7711: LD_ADDR_VAR 0 3
7715: PUSH
7716: LD_VAR 0 11
7720: PUSH
7721: LD_INT 1
7723: ARRAY
7724: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7725: LD_ADDR_VAR 0 11
7729: PUSH
7730: LD_VAR 0 11
7734: PPUSH
7735: LD_INT 1
7737: PPUSH
7738: CALL_OW 3
7742: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL 7957 0 2
7757: IFTRUE 7768
7759: PUSH
7760: LD_VAR 0 11
7764: PUSH
7765: EMPTY
7766: EQUAL
7767: OR
7768: IFFALSE 7711
// if not control in _control then
7770: LD_VAR 0 4
7774: PUSH
7775: LD_VAR 0 12
7779: IN
7780: NOT
7781: IFFALSE 7807
// control := _control [ rand ( 1 , _control ) ] ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_VAR 0 12
7792: PUSH
7793: LD_INT 1
7795: PPUSH
7796: LD_VAR 0 12
7800: PPUSH
7801: CALL_OW 12
7805: ARRAY
7806: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7807: LD_VAR 0 2
7811: PPUSH
7812: LD_VAR 0 5
7816: PPUSH
7817: CALL 8179 0 2
7821: NOT
7822: IFFALSE 7883
// repeat weapon := _weapon [ 1 ] ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_VAR 0 10
7833: PUSH
7834: LD_INT 1
7836: ARRAY
7837: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7838: LD_ADDR_VAR 0 10
7842: PUSH
7843: LD_VAR 0 10
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: CALL_OW 3
7855: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7856: LD_VAR 0 2
7860: PPUSH
7861: LD_VAR 0 5
7865: PPUSH
7866: CALL 8179 0 2
7870: IFTRUE 7881
7872: PUSH
7873: LD_VAR 0 10
7877: PUSH
7878: EMPTY
7879: EQUAL
7880: OR
7881: IFFALSE 7824
// result := [ ] ;
7883: LD_ADDR_VAR 0 6
7887: PUSH
7888: EMPTY
7889: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7890: LD_VAR 0 1
7894: PPUSH
7895: LD_VAR 0 2
7899: PPUSH
7900: LD_VAR 0 3
7904: PPUSH
7905: LD_VAR 0 4
7909: PPUSH
7910: LD_VAR 0 5
7914: PPUSH
7915: CALL_OW 448
7919: IFFALSE 7952
// result := [ chassis , engine , control , weapon ] ;
7921: LD_ADDR_VAR 0 6
7925: PUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_VAR 0 3
7935: PUSH
7936: LD_VAR 0 4
7940: PUSH
7941: LD_VAR 0 5
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: ST_TO_ADDR
// end ;
7952: LD_VAR 0 6
7956: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7957: LD_INT 0
7959: PPUSH
// if not chassis or not engine then
7960: LD_VAR 0 1
7964: NOT
7965: IFTRUE 7974
7967: PUSH
7968: LD_VAR 0 2
7972: NOT
7973: OR
7974: IFFALSE 7978
// exit ;
7976: GO 8174
// case engine of engine_solar :
7978: LD_VAR 0 2
7982: PUSH
7983: LD_INT 2
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8029
7991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7992: LD_ADDR_VAR 0 3
7996: PUSH
7997: LD_INT 11
7999: PUSH
8000: LD_INT 12
8002: PUSH
8003: LD_INT 13
8005: PUSH
8006: LD_INT 14
8008: PUSH
8009: LD_INT 1
8011: PUSH
8012: LD_INT 2
8014: PUSH
8015: LD_INT 3
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
8027: GO 8158
8029: LD_INT 1
8031: DOUBLE
8032: EQUAL
8033: IFTRUE 8037
8035: GO 8099
8037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: LD_INT 11
8045: PUSH
8046: LD_INT 12
8048: PUSH
8049: LD_INT 13
8051: PUSH
8052: LD_INT 14
8054: PUSH
8055: LD_INT 1
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: LD_INT 4
8066: PUSH
8067: LD_INT 5
8069: PUSH
8070: LD_INT 21
8072: PUSH
8073: LD_INT 23
8075: PUSH
8076: LD_INT 22
8078: PUSH
8079: LD_INT 24
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: ST_TO_ADDR
8097: GO 8158
8099: LD_INT 3
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8157
8107: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_INT 13
8115: PUSH
8116: LD_INT 14
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_INT 3
8124: PUSH
8125: LD_INT 4
8127: PUSH
8128: LD_INT 5
8130: PUSH
8131: LD_INT 21
8133: PUSH
8134: LD_INT 22
8136: PUSH
8137: LD_INT 23
8139: PUSH
8140: LD_INT 24
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: ST_TO_ADDR
8155: GO 8158
8157: POP
// result := ( chassis in result ) ;
8158: LD_ADDR_VAR 0 3
8162: PUSH
8163: LD_VAR 0 1
8167: PUSH
8168: LD_VAR 0 3
8172: IN
8173: ST_TO_ADDR
// end ;
8174: LD_VAR 0 3
8178: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8179: LD_INT 0
8181: PPUSH
// if not chassis or not weapon then
8182: LD_VAR 0 1
8186: NOT
8187: IFTRUE 8196
8189: PUSH
8190: LD_VAR 0 2
8194: NOT
8195: OR
8196: IFFALSE 8200
// exit ;
8198: GO 9260
// case weapon of us_machine_gun :
8200: LD_VAR 0 2
8204: PUSH
8205: LD_INT 2
8207: DOUBLE
8208: EQUAL
8209: IFTRUE 8213
8211: GO 8243
8213: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8214: LD_ADDR_VAR 0 3
8218: PUSH
8219: LD_INT 1
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: LD_INT 4
8230: PUSH
8231: LD_INT 5
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: ST_TO_ADDR
8241: GO 9244
8243: LD_INT 3
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8281
8251: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8252: LD_ADDR_VAR 0 3
8256: PUSH
8257: LD_INT 1
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: LD_INT 4
8268: PUSH
8269: LD_INT 5
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: ST_TO_ADDR
8279: GO 9244
8281: LD_INT 11
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8319
8289: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8290: LD_ADDR_VAR 0 3
8294: PUSH
8295: LD_INT 1
8297: PUSH
8298: LD_INT 2
8300: PUSH
8301: LD_INT 3
8303: PUSH
8304: LD_INT 4
8306: PUSH
8307: LD_INT 5
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: ST_TO_ADDR
8317: GO 9244
8319: LD_INT 4
8321: DOUBLE
8322: EQUAL
8323: IFTRUE 8327
8325: GO 8353
8327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8328: LD_ADDR_VAR 0 3
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: LD_INT 5
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: ST_TO_ADDR
8351: GO 9244
8353: LD_INT 5
8355: DOUBLE
8356: EQUAL
8357: IFTRUE 8361
8359: GO 8387
8361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8362: LD_ADDR_VAR 0 3
8366: PUSH
8367: LD_INT 2
8369: PUSH
8370: LD_INT 3
8372: PUSH
8373: LD_INT 4
8375: PUSH
8376: LD_INT 5
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: ST_TO_ADDR
8385: GO 9244
8387: LD_INT 9
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8421
8395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8396: LD_ADDR_VAR 0 3
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: LD_INT 3
8406: PUSH
8407: LD_INT 4
8409: PUSH
8410: LD_INT 5
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: ST_TO_ADDR
8419: GO 9244
8421: LD_INT 7
8423: DOUBLE
8424: EQUAL
8425: IFTRUE 8429
8427: GO 8455
8429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8430: LD_ADDR_VAR 0 3
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 3
8440: PUSH
8441: LD_INT 4
8443: PUSH
8444: LD_INT 5
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: ST_TO_ADDR
8453: GO 9244
8455: LD_INT 12
8457: DOUBLE
8458: EQUAL
8459: IFTRUE 8463
8461: GO 8489
8463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: LD_INT 2
8471: PUSH
8472: LD_INT 3
8474: PUSH
8475: LD_INT 4
8477: PUSH
8478: LD_INT 5
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: ST_TO_ADDR
8487: GO 9244
8489: LD_INT 13
8491: DOUBLE
8492: EQUAL
8493: IFTRUE 8497
8495: GO 8523
8497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8498: LD_ADDR_VAR 0 3
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: LD_INT 4
8511: PUSH
8512: LD_INT 5
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: ST_TO_ADDR
8521: GO 9244
8523: LD_INT 14
8525: DOUBLE
8526: EQUAL
8527: IFTRUE 8531
8529: GO 8549
8531: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8532: LD_ADDR_VAR 0 3
8536: PUSH
8537: LD_INT 4
8539: PUSH
8540: LD_INT 5
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: ST_TO_ADDR
8547: GO 9244
8549: LD_INT 6
8551: DOUBLE
8552: EQUAL
8553: IFTRUE 8557
8555: GO 8575
8557: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8558: LD_ADDR_VAR 0 3
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: LD_INT 5
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: ST_TO_ADDR
8573: GO 9244
8575: LD_INT 10
8577: DOUBLE
8578: EQUAL
8579: IFTRUE 8583
8581: GO 8601
8583: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8584: LD_ADDR_VAR 0 3
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 5
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: ST_TO_ADDR
8599: GO 9244
8601: LD_INT 22
8603: DOUBLE
8604: EQUAL
8605: IFTRUE 8609
8607: GO 8635
8609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8610: LD_ADDR_VAR 0 3
8614: PUSH
8615: LD_INT 11
8617: PUSH
8618: LD_INT 12
8620: PUSH
8621: LD_INT 13
8623: PUSH
8624: LD_INT 14
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: ST_TO_ADDR
8633: GO 9244
8635: LD_INT 23
8637: DOUBLE
8638: EQUAL
8639: IFTRUE 8643
8641: GO 8669
8643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8644: LD_ADDR_VAR 0 3
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: LD_INT 12
8654: PUSH
8655: LD_INT 13
8657: PUSH
8658: LD_INT 14
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: ST_TO_ADDR
8667: GO 9244
8669: LD_INT 24
8671: DOUBLE
8672: EQUAL
8673: IFTRUE 8677
8675: GO 8703
8677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8678: LD_ADDR_VAR 0 3
8682: PUSH
8683: LD_INT 11
8685: PUSH
8686: LD_INT 12
8688: PUSH
8689: LD_INT 13
8691: PUSH
8692: LD_INT 14
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: ST_TO_ADDR
8701: GO 9244
8703: LD_INT 30
8705: DOUBLE
8706: EQUAL
8707: IFTRUE 8711
8709: GO 8737
8711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8712: LD_ADDR_VAR 0 3
8716: PUSH
8717: LD_INT 11
8719: PUSH
8720: LD_INT 12
8722: PUSH
8723: LD_INT 13
8725: PUSH
8726: LD_INT 14
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: ST_TO_ADDR
8735: GO 9244
8737: LD_INT 25
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8763
8745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8746: LD_ADDR_VAR 0 3
8750: PUSH
8751: LD_INT 13
8753: PUSH
8754: LD_INT 14
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: ST_TO_ADDR
8761: GO 9244
8763: LD_INT 27
8765: DOUBLE
8766: EQUAL
8767: IFTRUE 8771
8769: GO 8789
8771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8772: LD_ADDR_VAR 0 3
8776: PUSH
8777: LD_INT 13
8779: PUSH
8780: LD_INT 14
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: ST_TO_ADDR
8787: GO 9244
8789: LD_INT 92
8791: DOUBLE
8792: EQUAL
8793: IFTRUE 8797
8795: GO 8823
8797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8798: LD_ADDR_VAR 0 3
8802: PUSH
8803: LD_INT 11
8805: PUSH
8806: LD_INT 12
8808: PUSH
8809: LD_INT 13
8811: PUSH
8812: LD_INT 14
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: ST_TO_ADDR
8821: GO 9244
8823: LD_INT 28
8825: DOUBLE
8826: EQUAL
8827: IFTRUE 8831
8829: GO 8849
8831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_INT 13
8839: PUSH
8840: LD_INT 14
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: ST_TO_ADDR
8847: GO 9244
8849: LD_INT 29
8851: DOUBLE
8852: EQUAL
8853: IFTRUE 8857
8855: GO 8875
8857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8858: LD_ADDR_VAR 0 3
8862: PUSH
8863: LD_INT 13
8865: PUSH
8866: LD_INT 14
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: ST_TO_ADDR
8873: GO 9244
8875: LD_INT 31
8877: DOUBLE
8878: EQUAL
8879: IFTRUE 8883
8881: GO 8901
8883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8884: LD_ADDR_VAR 0 3
8888: PUSH
8889: LD_INT 13
8891: PUSH
8892: LD_INT 14
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: ST_TO_ADDR
8899: GO 9244
8901: LD_INT 26
8903: DOUBLE
8904: EQUAL
8905: IFTRUE 8909
8907: GO 8927
8909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8910: LD_ADDR_VAR 0 3
8914: PUSH
8915: LD_INT 13
8917: PUSH
8918: LD_INT 14
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: ST_TO_ADDR
8925: GO 9244
8927: LD_INT 42
8929: DOUBLE
8930: EQUAL
8931: IFTRUE 8935
8933: GO 8961
8935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8936: LD_ADDR_VAR 0 3
8940: PUSH
8941: LD_INT 21
8943: PUSH
8944: LD_INT 22
8946: PUSH
8947: LD_INT 23
8949: PUSH
8950: LD_INT 24
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: ST_TO_ADDR
8959: GO 9244
8961: LD_INT 43
8963: DOUBLE
8964: EQUAL
8965: IFTRUE 8969
8967: GO 8995
8969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8970: LD_ADDR_VAR 0 3
8974: PUSH
8975: LD_INT 21
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 23
8983: PUSH
8984: LD_INT 24
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: ST_TO_ADDR
8993: GO 9244
8995: LD_INT 44
8997: DOUBLE
8998: EQUAL
8999: IFTRUE 9003
9001: GO 9029
9003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
9004: LD_ADDR_VAR 0 3
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: LD_INT 22
9014: PUSH
9015: LD_INT 23
9017: PUSH
9018: LD_INT 24
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: ST_TO_ADDR
9027: GO 9244
9029: LD_INT 45
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9037
9035: GO 9063
9037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
9038: LD_ADDR_VAR 0 3
9042: PUSH
9043: LD_INT 21
9045: PUSH
9046: LD_INT 22
9048: PUSH
9049: LD_INT 23
9051: PUSH
9052: LD_INT 24
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: ST_TO_ADDR
9061: GO 9244
9063: LD_INT 49
9065: DOUBLE
9066: EQUAL
9067: IFTRUE 9071
9069: GO 9097
9071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9072: LD_ADDR_VAR 0 3
9076: PUSH
9077: LD_INT 21
9079: PUSH
9080: LD_INT 22
9082: PUSH
9083: LD_INT 23
9085: PUSH
9086: LD_INT 24
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: ST_TO_ADDR
9095: GO 9244
9097: LD_INT 51
9099: DOUBLE
9100: EQUAL
9101: IFTRUE 9105
9103: GO 9131
9105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
9106: LD_ADDR_VAR 0 3
9110: PUSH
9111: LD_INT 21
9113: PUSH
9114: LD_INT 22
9116: PUSH
9117: LD_INT 23
9119: PUSH
9120: LD_INT 24
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: ST_TO_ADDR
9129: GO 9244
9131: LD_INT 52
9133: DOUBLE
9134: EQUAL
9135: IFTRUE 9139
9137: GO 9165
9139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9140: LD_ADDR_VAR 0 3
9144: PUSH
9145: LD_INT 21
9147: PUSH
9148: LD_INT 22
9150: PUSH
9151: LD_INT 23
9153: PUSH
9154: LD_INT 24
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: ST_TO_ADDR
9163: GO 9244
9165: LD_INT 53
9167: DOUBLE
9168: EQUAL
9169: IFTRUE 9173
9171: GO 9191
9173: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9174: LD_ADDR_VAR 0 3
9178: PUSH
9179: LD_INT 23
9181: PUSH
9182: LD_INT 24
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: ST_TO_ADDR
9189: GO 9244
9191: LD_INT 46
9193: DOUBLE
9194: EQUAL
9195: IFTRUE 9199
9197: GO 9217
9199: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9200: LD_ADDR_VAR 0 3
9204: PUSH
9205: LD_INT 23
9207: PUSH
9208: LD_INT 24
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: ST_TO_ADDR
9215: GO 9244
9217: LD_INT 47
9219: DOUBLE
9220: EQUAL
9221: IFTRUE 9225
9223: GO 9243
9225: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9226: LD_ADDR_VAR 0 3
9230: PUSH
9231: LD_INT 23
9233: PUSH
9234: LD_INT 24
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: ST_TO_ADDR
9241: GO 9244
9243: POP
// result := ( chassis in result ) ;
9244: LD_ADDR_VAR 0 3
9248: PUSH
9249: LD_VAR 0 1
9253: PUSH
9254: LD_VAR 0 3
9258: IN
9259: ST_TO_ADDR
// end ;
9260: LD_VAR 0 3
9264: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
9273: PPUSH
// result := array ;
9274: LD_ADDR_VAR 0 5
9278: PUSH
9279: LD_VAR 0 1
9283: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9284: LD_VAR 0 1
9288: NOT
9289: IFTRUE 9298
9291: PUSH
9292: LD_VAR 0 2
9296: NOT
9297: OR
9298: IFTRUE 9307
9300: PUSH
9301: LD_VAR 0 3
9305: NOT
9306: OR
9307: IFTRUE 9321
9309: PUSH
9310: LD_VAR 0 2
9314: PUSH
9315: LD_VAR 0 1
9319: GREATER
9320: OR
9321: IFTRUE 9335
9323: PUSH
9324: LD_VAR 0 3
9328: PUSH
9329: LD_VAR 0 1
9333: GREATER
9334: OR
9335: IFFALSE 9339
// exit ;
9337: GO 9635
// if direction then
9339: LD_VAR 0 4
9343: IFFALSE 9407
// begin d := 1 ;
9345: LD_ADDR_VAR 0 9
9349: PUSH
9350: LD_INT 1
9352: ST_TO_ADDR
// if i_from > i_to then
9353: LD_VAR 0 2
9357: PUSH
9358: LD_VAR 0 3
9362: GREATER
9363: IFFALSE 9389
// length := ( array - i_from ) + i_to else
9365: LD_ADDR_VAR 0 11
9369: PUSH
9370: LD_VAR 0 1
9374: PUSH
9375: LD_VAR 0 2
9379: MINUS
9380: PUSH
9381: LD_VAR 0 3
9385: PLUS
9386: ST_TO_ADDR
9387: GO 9405
// length := i_to - i_from ;
9389: LD_ADDR_VAR 0 11
9393: PUSH
9394: LD_VAR 0 3
9398: PUSH
9399: LD_VAR 0 2
9403: MINUS
9404: ST_TO_ADDR
// end else
9405: GO 9468
// begin d := - 1 ;
9407: LD_ADDR_VAR 0 9
9411: PUSH
9412: LD_INT 1
9414: NEG
9415: ST_TO_ADDR
// if i_from > i_to then
9416: LD_VAR 0 2
9420: PUSH
9421: LD_VAR 0 3
9425: GREATER
9426: IFFALSE 9446
// length := i_from - i_to else
9428: LD_ADDR_VAR 0 11
9432: PUSH
9433: LD_VAR 0 2
9437: PUSH
9438: LD_VAR 0 3
9442: MINUS
9443: ST_TO_ADDR
9444: GO 9468
// length := ( array - i_to ) + i_from ;
9446: LD_ADDR_VAR 0 11
9450: PUSH
9451: LD_VAR 0 1
9455: PUSH
9456: LD_VAR 0 3
9460: MINUS
9461: PUSH
9462: LD_VAR 0 2
9466: PLUS
9467: ST_TO_ADDR
// end ; if not length then
9468: LD_VAR 0 11
9472: NOT
9473: IFFALSE 9477
// exit ;
9475: GO 9635
// tmp := array ;
9477: LD_ADDR_VAR 0 10
9481: PUSH
9482: LD_VAR 0 1
9486: ST_TO_ADDR
// for i = 1 to length do
9487: LD_ADDR_VAR 0 6
9491: PUSH
9492: DOUBLE
9493: LD_INT 1
9495: DEC
9496: ST_TO_ADDR
9497: LD_VAR 0 11
9501: PUSH
9502: FOR_TO
9503: IFFALSE 9623
// begin for j = 1 to array do
9505: LD_ADDR_VAR 0 7
9509: PUSH
9510: DOUBLE
9511: LD_INT 1
9513: DEC
9514: ST_TO_ADDR
9515: LD_VAR 0 1
9519: PUSH
9520: FOR_TO
9521: IFFALSE 9609
// begin k := j + d ;
9523: LD_ADDR_VAR 0 8
9527: PUSH
9528: LD_VAR 0 7
9532: PUSH
9533: LD_VAR 0 9
9537: PLUS
9538: ST_TO_ADDR
// if k > array then
9539: LD_VAR 0 8
9543: PUSH
9544: LD_VAR 0 1
9548: GREATER
9549: IFFALSE 9559
// k := 1 ;
9551: LD_ADDR_VAR 0 8
9555: PUSH
9556: LD_INT 1
9558: ST_TO_ADDR
// if not k then
9559: LD_VAR 0 8
9563: NOT
9564: IFFALSE 9576
// k := array ;
9566: LD_ADDR_VAR 0 8
9570: PUSH
9571: LD_VAR 0 1
9575: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9576: LD_ADDR_VAR 0 10
9580: PUSH
9581: LD_VAR 0 10
9585: PPUSH
9586: LD_VAR 0 8
9590: PPUSH
9591: LD_VAR 0 1
9595: PUSH
9596: LD_VAR 0 7
9600: ARRAY
9601: PPUSH
9602: CALL_OW 1
9606: ST_TO_ADDR
// end ;
9607: GO 9520
9609: POP
9610: POP
// array := tmp ;
9611: LD_ADDR_VAR 0 1
9615: PUSH
9616: LD_VAR 0 10
9620: ST_TO_ADDR
// end ;
9621: GO 9502
9623: POP
9624: POP
// result := array ;
9625: LD_ADDR_VAR 0 5
9629: PUSH
9630: LD_VAR 0 1
9634: ST_TO_ADDR
// end ;
9635: LD_VAR 0 5
9639: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9640: LD_INT 0
9642: PPUSH
9643: PPUSH
// result := 0 ;
9644: LD_ADDR_VAR 0 3
9648: PUSH
9649: LD_INT 0
9651: ST_TO_ADDR
// if not array or not value in array then
9652: LD_VAR 0 1
9656: NOT
9657: IFTRUE 9672
9659: PUSH
9660: LD_VAR 0 2
9664: PUSH
9665: LD_VAR 0 1
9669: IN
9670: NOT
9671: OR
9672: IFFALSE 9676
// exit ;
9674: GO 9730
// for i = 1 to array do
9676: LD_ADDR_VAR 0 4
9680: PUSH
9681: DOUBLE
9682: LD_INT 1
9684: DEC
9685: ST_TO_ADDR
9686: LD_VAR 0 1
9690: PUSH
9691: FOR_TO
9692: IFFALSE 9728
// if value = array [ i ] then
9694: LD_VAR 0 2
9698: PUSH
9699: LD_VAR 0 1
9703: PUSH
9704: LD_VAR 0 4
9708: ARRAY
9709: EQUAL
9710: IFFALSE 9726
// begin result := i ;
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_VAR 0 4
9721: ST_TO_ADDR
// exit ;
9722: POP
9723: POP
9724: GO 9730
// end ;
9726: GO 9691
9728: POP
9729: POP
// end ;
9730: LD_VAR 0 3
9734: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9735: LD_INT 0
9737: PPUSH
// vc_chassis := chassis ;
9738: LD_ADDR_OWVAR 37
9742: PUSH
9743: LD_VAR 0 1
9747: ST_TO_ADDR
// vc_engine := engine ;
9748: LD_ADDR_OWVAR 39
9752: PUSH
9753: LD_VAR 0 2
9757: ST_TO_ADDR
// vc_control := control ;
9758: LD_ADDR_OWVAR 38
9762: PUSH
9763: LD_VAR 0 3
9767: ST_TO_ADDR
// vc_weapon := weapon ;
9768: LD_ADDR_OWVAR 40
9772: PUSH
9773: LD_VAR 0 4
9777: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9778: LD_ADDR_OWVAR 41
9782: PUSH
9783: LD_VAR 0 5
9787: ST_TO_ADDR
// end ;
9788: LD_VAR 0 6
9792: RET
// export function WantPlant ( unit ) ; var task ; begin
9793: LD_INT 0
9795: PPUSH
9796: PPUSH
// result := false ;
9797: LD_ADDR_VAR 0 2
9801: PUSH
9802: LD_INT 0
9804: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9805: LD_ADDR_VAR 0 3
9809: PUSH
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 437
9819: ST_TO_ADDR
// if task then
9820: LD_VAR 0 3
9824: IFFALSE 9852
// if task [ 1 ] [ 1 ] = p then
9826: LD_VAR 0 3
9830: PUSH
9831: LD_INT 1
9833: ARRAY
9834: PUSH
9835: LD_INT 1
9837: ARRAY
9838: PUSH
9839: LD_STRING p
9841: EQUAL
9842: IFFALSE 9852
// result := true ;
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: LD_INT 1
9851: ST_TO_ADDR
// end ;
9852: LD_VAR 0 2
9856: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9857: LD_INT 0
9859: PPUSH
9860: PPUSH
9861: PPUSH
9862: PPUSH
// if pos < 1 then
9863: LD_VAR 0 2
9867: PUSH
9868: LD_INT 1
9870: LESS
9871: IFFALSE 9875
// exit ;
9873: GO 10178
// if pos = 1 then
9875: LD_VAR 0 2
9879: PUSH
9880: LD_INT 1
9882: EQUAL
9883: IFFALSE 9916
// result := Replace ( arr , pos [ 1 ] , value ) else
9885: LD_ADDR_VAR 0 4
9889: PUSH
9890: LD_VAR 0 1
9894: PPUSH
9895: LD_VAR 0 2
9899: PUSH
9900: LD_INT 1
9902: ARRAY
9903: PPUSH
9904: LD_VAR 0 3
9908: PPUSH
9909: CALL_OW 1
9913: ST_TO_ADDR
9914: GO 10178
// begin tmp := arr ;
9916: LD_ADDR_VAR 0 6
9920: PUSH
9921: LD_VAR 0 1
9925: ST_TO_ADDR
// s_arr := [ tmp ] ;
9926: LD_ADDR_VAR 0 7
9930: PUSH
9931: LD_VAR 0 6
9935: PUSH
9936: EMPTY
9937: LIST
9938: ST_TO_ADDR
// for i = 1 to pos - 1 do
9939: LD_ADDR_VAR 0 5
9943: PUSH
9944: DOUBLE
9945: LD_INT 1
9947: DEC
9948: ST_TO_ADDR
9949: LD_VAR 0 2
9953: PUSH
9954: LD_INT 1
9956: MINUS
9957: PUSH
9958: FOR_TO
9959: IFFALSE 10004
// begin tmp := tmp [ pos [ i ] ] ;
9961: LD_ADDR_VAR 0 6
9965: PUSH
9966: LD_VAR 0 6
9970: PUSH
9971: LD_VAR 0 2
9975: PUSH
9976: LD_VAR 0 5
9980: ARRAY
9981: ARRAY
9982: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9983: LD_ADDR_VAR 0 7
9987: PUSH
9988: LD_VAR 0 7
9992: PUSH
9993: LD_VAR 0 6
9997: PUSH
9998: EMPTY
9999: LIST
10000: ADD
10001: ST_TO_ADDR
// end ;
10002: GO 9958
10004: POP
10005: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
10006: LD_ADDR_VAR 0 6
10010: PUSH
10011: LD_VAR 0 6
10015: PPUSH
10016: LD_VAR 0 2
10020: PUSH
10021: LD_VAR 0 2
10025: ARRAY
10026: PPUSH
10027: LD_VAR 0 3
10031: PPUSH
10032: CALL_OW 1
10036: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
10037: LD_ADDR_VAR 0 7
10041: PUSH
10042: LD_VAR 0 7
10046: PPUSH
10047: LD_VAR 0 7
10051: PPUSH
10052: LD_VAR 0 6
10056: PPUSH
10057: CALL_OW 1
10061: ST_TO_ADDR
// for i = s_arr downto 2 do
10062: LD_ADDR_VAR 0 5
10066: PUSH
10067: DOUBLE
10068: LD_VAR 0 7
10072: INC
10073: ST_TO_ADDR
10074: LD_INT 2
10076: PUSH
10077: FOR_DOWNTO
10078: IFFALSE 10162
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
10080: LD_ADDR_VAR 0 6
10084: PUSH
10085: LD_VAR 0 7
10089: PUSH
10090: LD_VAR 0 5
10094: PUSH
10095: LD_INT 1
10097: MINUS
10098: ARRAY
10099: PPUSH
10100: LD_VAR 0 2
10104: PUSH
10105: LD_VAR 0 5
10109: PUSH
10110: LD_INT 1
10112: MINUS
10113: ARRAY
10114: PPUSH
10115: LD_VAR 0 7
10119: PUSH
10120: LD_VAR 0 5
10124: ARRAY
10125: PPUSH
10126: CALL_OW 1
10130: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
10131: LD_ADDR_VAR 0 7
10135: PUSH
10136: LD_VAR 0 7
10140: PPUSH
10141: LD_VAR 0 5
10145: PUSH
10146: LD_INT 1
10148: MINUS
10149: PPUSH
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL_OW 1
10159: ST_TO_ADDR
// end ;
10160: GO 10077
10162: POP
10163: POP
// result := s_arr [ 1 ] ;
10164: LD_ADDR_VAR 0 4
10168: PUSH
10169: LD_VAR 0 7
10173: PUSH
10174: LD_INT 1
10176: ARRAY
10177: ST_TO_ADDR
// end ; end ;
10178: LD_VAR 0 4
10182: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10183: LD_INT 0
10185: PPUSH
10186: PPUSH
// if not list then
10187: LD_VAR 0 1
10191: NOT
10192: IFFALSE 10196
// exit ;
10194: GO 10287
// i := list [ pos1 ] ;
10196: LD_ADDR_VAR 0 5
10200: PUSH
10201: LD_VAR 0 1
10205: PUSH
10206: LD_VAR 0 2
10210: ARRAY
10211: ST_TO_ADDR
// if not i then
10212: LD_VAR 0 5
10216: NOT
10217: IFFALSE 10221
// exit ;
10219: GO 10287
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10221: LD_ADDR_VAR 0 1
10225: PUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: LD_VAR 0 2
10235: PPUSH
10236: LD_VAR 0 1
10240: PUSH
10241: LD_VAR 0 3
10245: ARRAY
10246: PPUSH
10247: CALL_OW 1
10251: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10252: LD_ADDR_VAR 0 1
10256: PUSH
10257: LD_VAR 0 1
10261: PPUSH
10262: LD_VAR 0 3
10266: PPUSH
10267: LD_VAR 0 5
10271: PPUSH
10272: CALL_OW 1
10276: ST_TO_ADDR
// result := list ;
10277: LD_ADDR_VAR 0 4
10281: PUSH
10282: LD_VAR 0 1
10286: ST_TO_ADDR
// end ;
10287: LD_VAR 0 4
10291: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10292: LD_INT 0
10294: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10295: LD_ADDR_VAR 0 5
10299: PUSH
10300: LD_VAR 0 1
10304: PPUSH
10305: CALL_OW 250
10309: PPUSH
10310: LD_VAR 0 1
10314: PPUSH
10315: CALL_OW 251
10319: PPUSH
10320: LD_VAR 0 2
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: LD_VAR 0 4
10334: PPUSH
10335: CALL 10717 0 5
10339: ST_TO_ADDR
// end ;
10340: LD_VAR 0 5
10344: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10345: LD_INT 0
10347: PPUSH
10348: PPUSH
10349: PPUSH
10350: PPUSH
// if not list or not unit then
10351: LD_VAR 0 2
10355: NOT
10356: IFTRUE 10365
10358: PUSH
10359: LD_VAR 0 1
10363: NOT
10364: OR
10365: IFFALSE 10369
// exit ;
10367: GO 10712
// result := [ ] ;
10369: LD_ADDR_VAR 0 5
10373: PUSH
10374: EMPTY
10375: ST_TO_ADDR
// for i in list do
10376: LD_ADDR_VAR 0 6
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: FOR_IN
10387: IFFALSE 10605
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10389: LD_ADDR_VAR 0 8
10393: PUSH
10394: LD_VAR 0 1
10398: PPUSH
10399: LD_VAR 0 6
10403: PUSH
10404: LD_INT 1
10406: ARRAY
10407: PPUSH
10408: LD_VAR 0 6
10412: PUSH
10413: LD_INT 2
10415: ARRAY
10416: PPUSH
10417: CALL_OW 297
10421: ST_TO_ADDR
// if not Count ( result ) then
10422: LD_VAR 0 5
10426: PPUSH
10427: CALL 6973 0 1
10431: NOT
10432: IFFALSE 10465
// begin result := Join ( result , [ i , tmp ] ) ;
10434: LD_ADDR_VAR 0 5
10438: PUSH
10439: LD_VAR 0 5
10443: PPUSH
10444: LD_VAR 0 6
10448: PUSH
10449: LD_VAR 0 8
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PPUSH
10458: CALL 42905 0 2
10462: ST_TO_ADDR
// continue ;
10463: GO 10386
// end ; if result [ result ] [ 2 ] <= tmp then
10465: LD_VAR 0 5
10469: PUSH
10470: LD_VAR 0 5
10474: ARRAY
10475: PUSH
10476: LD_INT 2
10478: ARRAY
10479: PUSH
10480: LD_VAR 0 8
10484: LESSEQUAL
10485: IFFALSE 10518
// result := Join ( result , [ i , tmp ] ) else
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 6
10501: PUSH
10502: LD_VAR 0 8
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL 42905 0 2
10515: ST_TO_ADDR
10516: GO 10603
// begin for j := 1 to Count ( result ) do
10518: LD_ADDR_VAR 0 7
10522: PUSH
10523: DOUBLE
10524: LD_INT 1
10526: DEC
10527: ST_TO_ADDR
10528: LD_VAR 0 5
10532: PPUSH
10533: CALL 6973 0 1
10537: PUSH
10538: FOR_TO
10539: IFFALSE 10601
// begin if tmp < result [ j ] [ 2 ] then
10541: LD_VAR 0 8
10545: PUSH
10546: LD_VAR 0 5
10550: PUSH
10551: LD_VAR 0 7
10555: ARRAY
10556: PUSH
10557: LD_INT 2
10559: ARRAY
10560: LESS
10561: IFFALSE 10599
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10563: LD_ADDR_VAR 0 5
10567: PUSH
10568: LD_VAR 0 5
10572: PPUSH
10573: LD_VAR 0 7
10577: PPUSH
10578: LD_VAR 0 6
10582: PUSH
10583: LD_VAR 0 8
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PPUSH
10592: CALL_OW 2
10596: ST_TO_ADDR
// break ;
10597: GO 10601
// end ; end ;
10599: GO 10538
10601: POP
10602: POP
// end ; end ;
10603: GO 10386
10605: POP
10606: POP
// if result and not asc then
10607: LD_VAR 0 5
10611: IFFALSE 10620
10613: PUSH
10614: LD_VAR 0 3
10618: NOT
10619: AND
10620: IFFALSE 10637
// result := ReverseArray ( result ) ;
10622: LD_ADDR_VAR 0 5
10626: PUSH
10627: LD_VAR 0 5
10631: PPUSH
10632: CALL 37995 0 1
10636: ST_TO_ADDR
// tmp := [ ] ;
10637: LD_ADDR_VAR 0 8
10641: PUSH
10642: EMPTY
10643: ST_TO_ADDR
// if mode then
10644: LD_VAR 0 4
10648: IFFALSE 10712
// begin for i := 1 to result do
10650: LD_ADDR_VAR 0 6
10654: PUSH
10655: DOUBLE
10656: LD_INT 1
10658: DEC
10659: ST_TO_ADDR
10660: LD_VAR 0 5
10664: PUSH
10665: FOR_TO
10666: IFFALSE 10700
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10668: LD_ADDR_VAR 0 8
10672: PUSH
10673: LD_VAR 0 8
10677: PPUSH
10678: LD_VAR 0 5
10682: PUSH
10683: LD_VAR 0 6
10687: ARRAY
10688: PUSH
10689: LD_INT 1
10691: ARRAY
10692: PPUSH
10693: CALL 42905 0 2
10697: ST_TO_ADDR
10698: GO 10665
10700: POP
10701: POP
// result := tmp ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: LD_VAR 0 8
10711: ST_TO_ADDR
// end ; end ;
10712: LD_VAR 0 5
10716: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
10721: PPUSH
10722: PPUSH
// if not list then
10723: LD_VAR 0 3
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 11122
// result := [ ] ;
10732: LD_ADDR_VAR 0 6
10736: PUSH
10737: EMPTY
10738: ST_TO_ADDR
// for i in list do
10739: LD_ADDR_VAR 0 7
10743: PUSH
10744: LD_VAR 0 3
10748: PUSH
10749: FOR_IN
10750: IFFALSE 10952
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10752: LD_ADDR_VAR 0 9
10756: PUSH
10757: LD_VAR 0 7
10761: PPUSH
10762: LD_VAR 0 1
10766: PPUSH
10767: LD_VAR 0 2
10771: PPUSH
10772: CALL_OW 297
10776: ST_TO_ADDR
// if not result then
10777: LD_VAR 0 6
10781: NOT
10782: IFFALSE 10808
// result := [ [ i , tmp ] ] else
10784: LD_ADDR_VAR 0 6
10788: PUSH
10789: LD_VAR 0 7
10793: PUSH
10794: LD_VAR 0 9
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: ST_TO_ADDR
10806: GO 10950
// begin if result [ result ] [ 2 ] <= tmp then
10808: LD_VAR 0 6
10812: PUSH
10813: LD_VAR 0 6
10817: ARRAY
10818: PUSH
10819: LD_INT 2
10821: ARRAY
10822: PUSH
10823: LD_VAR 0 9
10827: LESSEQUAL
10828: IFFALSE 10870
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10830: LD_ADDR_VAR 0 6
10834: PUSH
10835: LD_VAR 0 6
10839: PPUSH
10840: LD_VAR 0 6
10844: PUSH
10845: LD_INT 1
10847: PLUS
10848: PPUSH
10849: LD_VAR 0 7
10853: PUSH
10854: LD_VAR 0 9
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 2
10867: ST_TO_ADDR
10868: GO 10950
// for j := 1 to result do
10870: LD_ADDR_VAR 0 8
10874: PUSH
10875: DOUBLE
10876: LD_INT 1
10878: DEC
10879: ST_TO_ADDR
10880: LD_VAR 0 6
10884: PUSH
10885: FOR_TO
10886: IFFALSE 10948
// begin if tmp < result [ j ] [ 2 ] then
10888: LD_VAR 0 9
10892: PUSH
10893: LD_VAR 0 6
10897: PUSH
10898: LD_VAR 0 8
10902: ARRAY
10903: PUSH
10904: LD_INT 2
10906: ARRAY
10907: LESS
10908: IFFALSE 10946
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10910: LD_ADDR_VAR 0 6
10914: PUSH
10915: LD_VAR 0 6
10919: PPUSH
10920: LD_VAR 0 8
10924: PPUSH
10925: LD_VAR 0 7
10929: PUSH
10930: LD_VAR 0 9
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 2
10943: ST_TO_ADDR
// break ;
10944: GO 10948
// end ; end ;
10946: GO 10885
10948: POP
10949: POP
// end ; end ;
10950: GO 10749
10952: POP
10953: POP
// if result and not asc then
10954: LD_VAR 0 6
10958: IFFALSE 10967
10960: PUSH
10961: LD_VAR 0 4
10965: NOT
10966: AND
10967: IFFALSE 11042
// begin tmp := result ;
10969: LD_ADDR_VAR 0 9
10973: PUSH
10974: LD_VAR 0 6
10978: ST_TO_ADDR
// for i = tmp downto 1 do
10979: LD_ADDR_VAR 0 7
10983: PUSH
10984: DOUBLE
10985: LD_VAR 0 9
10989: INC
10990: ST_TO_ADDR
10991: LD_INT 1
10993: PUSH
10994: FOR_DOWNTO
10995: IFFALSE 11040
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10997: LD_ADDR_VAR 0 6
11001: PUSH
11002: LD_VAR 0 6
11006: PPUSH
11007: LD_VAR 0 9
11011: PUSH
11012: LD_VAR 0 7
11016: MINUS
11017: PUSH
11018: LD_INT 1
11020: PLUS
11021: PPUSH
11022: LD_VAR 0 9
11026: PUSH
11027: LD_VAR 0 7
11031: ARRAY
11032: PPUSH
11033: CALL_OW 1
11037: ST_TO_ADDR
11038: GO 10994
11040: POP
11041: POP
// end ; tmp := [ ] ;
11042: LD_ADDR_VAR 0 9
11046: PUSH
11047: EMPTY
11048: ST_TO_ADDR
// if mode then
11049: LD_VAR 0 5
11053: IFFALSE 11122
// begin for i = 1 to result do
11055: LD_ADDR_VAR 0 7
11059: PUSH
11060: DOUBLE
11061: LD_INT 1
11063: DEC
11064: ST_TO_ADDR
11065: LD_VAR 0 6
11069: PUSH
11070: FOR_TO
11071: IFFALSE 11110
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11073: LD_ADDR_VAR 0 9
11077: PUSH
11078: LD_VAR 0 9
11082: PPUSH
11083: LD_VAR 0 7
11087: PPUSH
11088: LD_VAR 0 6
11092: PUSH
11093: LD_VAR 0 7
11097: ARRAY
11098: PUSH
11099: LD_INT 1
11101: ARRAY
11102: PPUSH
11103: CALL_OW 1
11107: ST_TO_ADDR
11108: GO 11070
11110: POP
11111: POP
// result := tmp ;
11112: LD_ADDR_VAR 0 6
11116: PUSH
11117: LD_VAR 0 9
11121: ST_TO_ADDR
// end ; end ;
11122: LD_VAR 0 6
11126: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11127: LD_INT 0
11129: PPUSH
11130: PPUSH
11131: PPUSH
11132: PPUSH
11133: PPUSH
11134: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11135: LD_ADDR_VAR 0 5
11139: PUSH
11140: LD_INT 0
11142: PUSH
11143: LD_INT 0
11145: PUSH
11146: LD_INT 0
11148: PUSH
11149: EMPTY
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: ST_TO_ADDR
// if not x or not y then
11157: LD_VAR 0 2
11161: NOT
11162: IFTRUE 11171
11164: PUSH
11165: LD_VAR 0 3
11169: NOT
11170: OR
11171: IFFALSE 11175
// exit ;
11173: GO 12831
// if not range then
11175: LD_VAR 0 4
11179: NOT
11180: IFFALSE 11190
// range := 10 ;
11182: LD_ADDR_VAR 0 4
11186: PUSH
11187: LD_INT 10
11189: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11190: LD_ADDR_VAR 0 8
11194: PUSH
11195: LD_INT 81
11197: PUSH
11198: LD_VAR 0 1
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 92
11209: PUSH
11210: LD_VAR 0 2
11214: PUSH
11215: LD_VAR 0 3
11219: PUSH
11220: LD_VAR 0 4
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 3
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: PPUSH
11253: CALL_OW 69
11257: ST_TO_ADDR
// if not tmp then
11258: LD_VAR 0 8
11262: NOT
11263: IFFALSE 11267
// exit ;
11265: GO 12831
// for i in tmp do
11267: LD_ADDR_VAR 0 6
11271: PUSH
11272: LD_VAR 0 8
11276: PUSH
11277: FOR_IN
11278: IFFALSE 12806
// begin points := [ 0 , 0 , 0 ] ;
11280: LD_ADDR_VAR 0 9
11284: PUSH
11285: LD_INT 0
11287: PUSH
11288: LD_INT 0
11290: PUSH
11291: LD_INT 0
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: ST_TO_ADDR
// bpoints := 1 ;
11299: LD_ADDR_VAR 0 10
11303: PUSH
11304: LD_INT 1
11306: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11307: LD_VAR 0 6
11311: PPUSH
11312: CALL_OW 247
11316: PUSH
11317: LD_INT 1
11319: DOUBLE
11320: EQUAL
11321: IFTRUE 11325
11323: GO 11907
11325: POP
// begin if GetClass ( i ) = 1 then
11326: LD_VAR 0 6
11330: PPUSH
11331: CALL_OW 257
11335: PUSH
11336: LD_INT 1
11338: EQUAL
11339: IFFALSE 11360
// points := [ 10 , 5 , 3 ] ;
11341: LD_ADDR_VAR 0 9
11345: PUSH
11346: LD_INT 10
11348: PUSH
11349: LD_INT 5
11351: PUSH
11352: LD_INT 3
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: LIST
11359: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11360: LD_VAR 0 6
11364: PPUSH
11365: CALL_OW 257
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 3
11375: PUSH
11376: LD_INT 4
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: IN
11384: IFFALSE 11405
// points := [ 3 , 2 , 1 ] ;
11386: LD_ADDR_VAR 0 9
11390: PUSH
11391: LD_INT 3
11393: PUSH
11394: LD_INT 2
11396: PUSH
11397: LD_INT 1
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11405: LD_VAR 0 6
11409: PPUSH
11410: CALL_OW 257
11414: PUSH
11415: LD_INT 5
11417: EQUAL
11418: IFFALSE 11439
// points := [ 130 , 5 , 2 ] ;
11420: LD_ADDR_VAR 0 9
11424: PUSH
11425: LD_INT 130
11427: PUSH
11428: LD_INT 5
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11439: LD_VAR 0 6
11443: PPUSH
11444: CALL_OW 257
11448: PUSH
11449: LD_INT 8
11451: EQUAL
11452: IFFALSE 11473
// points := [ 35 , 35 , 30 ] ;
11454: LD_ADDR_VAR 0 9
11458: PUSH
11459: LD_INT 35
11461: PUSH
11462: LD_INT 35
11464: PUSH
11465: LD_INT 30
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11473: LD_VAR 0 6
11477: PPUSH
11478: CALL_OW 257
11482: PUSH
11483: LD_INT 9
11485: EQUAL
11486: IFFALSE 11507
// points := [ 20 , 55 , 40 ] ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_INT 20
11495: PUSH
11496: LD_INT 55
11498: PUSH
11499: LD_INT 40
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11507: LD_VAR 0 6
11511: PPUSH
11512: CALL_OW 257
11516: PUSH
11517: LD_INT 12
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: IN
11527: IFFALSE 11548
// points := [ 5 , 3 , 2 ] ;
11529: LD_ADDR_VAR 0 9
11533: PUSH
11534: LD_INT 5
11536: PUSH
11537: LD_INT 3
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11548: LD_VAR 0 6
11552: PPUSH
11553: CALL_OW 257
11557: PUSH
11558: LD_INT 17
11560: EQUAL
11561: IFFALSE 11582
// points := [ 100 , 50 , 75 ] ;
11563: LD_ADDR_VAR 0 9
11567: PUSH
11568: LD_INT 100
11570: PUSH
11571: LD_INT 50
11573: PUSH
11574: LD_INT 75
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11582: LD_VAR 0 6
11586: PPUSH
11587: CALL_OW 257
11591: PUSH
11592: LD_INT 15
11594: EQUAL
11595: IFFALSE 11616
// points := [ 10 , 5 , 3 ] ;
11597: LD_ADDR_VAR 0 9
11601: PUSH
11602: LD_INT 10
11604: PUSH
11605: LD_INT 5
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11616: LD_VAR 0 6
11620: PPUSH
11621: CALL_OW 257
11625: PUSH
11626: LD_INT 14
11628: EQUAL
11629: IFFALSE 11650
// points := [ 10 , 0 , 0 ] ;
11631: LD_ADDR_VAR 0 9
11635: PUSH
11636: LD_INT 10
11638: PUSH
11639: LD_INT 0
11641: PUSH
11642: LD_INT 0
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11650: LD_VAR 0 6
11654: PPUSH
11655: CALL_OW 257
11659: PUSH
11660: LD_INT 11
11662: EQUAL
11663: IFFALSE 11684
// points := [ 30 , 10 , 5 ] ;
11665: LD_ADDR_VAR 0 9
11669: PUSH
11670: LD_INT 30
11672: PUSH
11673: LD_INT 10
11675: PUSH
11676: LD_INT 5
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11684: LD_VAR 0 1
11688: PPUSH
11689: LD_INT 5
11691: PPUSH
11692: CALL_OW 321
11696: PUSH
11697: LD_INT 2
11699: EQUAL
11700: IFFALSE 11717
// bpoints := bpoints * 1.8 ;
11702: LD_ADDR_VAR 0 10
11706: PUSH
11707: LD_VAR 0 10
11711: PUSH
11712: LD_REAL  1.80000000000000E+0000
11715: MUL
11716: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11717: LD_VAR 0 6
11721: PPUSH
11722: CALL_OW 257
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: LD_INT 2
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: LD_INT 4
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: IN
11745: IFFALSE 11765
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: LD_INT 51
11755: PPUSH
11756: CALL_OW 321
11760: PUSH
11761: LD_INT 2
11763: EQUAL
11764: AND
11765: IFFALSE 11782
// bpoints := bpoints * 1.2 ;
11767: LD_ADDR_VAR 0 10
11771: PUSH
11772: LD_VAR 0 10
11776: PUSH
11777: LD_REAL  1.20000000000000E+0000
11780: MUL
11781: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11782: LD_VAR 0 6
11786: PPUSH
11787: CALL_OW 257
11791: PUSH
11792: LD_INT 5
11794: PUSH
11795: LD_INT 7
11797: PUSH
11798: LD_INT 9
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: IN
11806: IFFALSE 11826
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: LD_INT 52
11816: PPUSH
11817: CALL_OW 321
11821: PUSH
11822: LD_INT 2
11824: EQUAL
11825: AND
11826: IFFALSE 11843
// bpoints := bpoints * 1.5 ;
11828: LD_ADDR_VAR 0 10
11832: PUSH
11833: LD_VAR 0 10
11837: PUSH
11838: LD_REAL  1.50000000000000E+0000
11841: MUL
11842: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11843: LD_VAR 0 1
11847: PPUSH
11848: LD_INT 66
11850: PPUSH
11851: CALL_OW 321
11855: PUSH
11856: LD_INT 2
11858: EQUAL
11859: IFFALSE 11876
// bpoints := bpoints * 1.1 ;
11861: LD_ADDR_VAR 0 10
11865: PUSH
11866: LD_VAR 0 10
11870: PUSH
11871: LD_REAL  1.10000000000000E+0000
11874: MUL
11875: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11876: LD_ADDR_VAR 0 10
11880: PUSH
11881: LD_VAR 0 10
11885: PUSH
11886: LD_VAR 0 6
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 259
11898: PUSH
11899: LD_REAL  1.15000000000000E+0000
11902: MUL
11903: MUL
11904: ST_TO_ADDR
// end ; unit_vehicle :
11905: GO 12735
11907: LD_INT 2
11909: DOUBLE
11910: EQUAL
11911: IFTRUE 11915
11913: GO 12723
11915: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11916: LD_VAR 0 6
11920: PPUSH
11921: CALL_OW 264
11925: PUSH
11926: LD_INT 2
11928: PUSH
11929: LD_INT 42
11931: PUSH
11932: LD_INT 24
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: IN
11940: IFFALSE 11961
// points := [ 25 , 5 , 3 ] ;
11942: LD_ADDR_VAR 0 9
11946: PUSH
11947: LD_INT 25
11949: PUSH
11950: LD_INT 5
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11961: LD_VAR 0 6
11965: PPUSH
11966: CALL_OW 264
11970: PUSH
11971: LD_INT 4
11973: PUSH
11974: LD_INT 43
11976: PUSH
11977: LD_INT 25
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: IN
11985: IFFALSE 12006
// points := [ 40 , 15 , 5 ] ;
11987: LD_ADDR_VAR 0 9
11991: PUSH
11992: LD_INT 40
11994: PUSH
11995: LD_INT 15
11997: PUSH
11998: LD_INT 5
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
12006: LD_VAR 0 6
12010: PPUSH
12011: CALL_OW 264
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: LD_INT 23
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: IN
12026: IFFALSE 12047
// points := [ 7 , 25 , 8 ] ;
12028: LD_ADDR_VAR 0 9
12032: PUSH
12033: LD_INT 7
12035: PUSH
12036: LD_INT 25
12038: PUSH
12039: LD_INT 8
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12047: LD_VAR 0 6
12051: PPUSH
12052: CALL_OW 264
12056: PUSH
12057: LD_INT 5
12059: PUSH
12060: LD_INT 27
12062: PUSH
12063: LD_INT 44
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: IN
12071: IFFALSE 12092
// points := [ 14 , 50 , 16 ] ;
12073: LD_ADDR_VAR 0 9
12077: PUSH
12078: LD_INT 14
12080: PUSH
12081: LD_INT 50
12083: PUSH
12084: LD_INT 16
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12092: LD_VAR 0 6
12096: PPUSH
12097: CALL_OW 264
12101: PUSH
12102: LD_INT 6
12104: PUSH
12105: LD_INT 46
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: IN
12112: IFFALSE 12133
// points := [ 32 , 120 , 70 ] ;
12114: LD_ADDR_VAR 0 9
12118: PUSH
12119: LD_INT 32
12121: PUSH
12122: LD_INT 120
12124: PUSH
12125: LD_INT 70
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
12133: LD_VAR 0 6
12137: PPUSH
12138: CALL_OW 264
12142: PUSH
12143: LD_INT 7
12145: PUSH
12146: LD_INT 28
12148: PUSH
12149: LD_INT 45
12151: PUSH
12152: LD_INT 92
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: IN
12161: IFFALSE 12182
// points := [ 35 , 20 , 45 ] ;
12163: LD_ADDR_VAR 0 9
12167: PUSH
12168: LD_INT 35
12170: PUSH
12171: LD_INT 20
12173: PUSH
12174: LD_INT 45
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: LIST
12181: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12182: LD_VAR 0 6
12186: PPUSH
12187: CALL_OW 264
12191: PUSH
12192: LD_INT 47
12194: PUSH
12195: EMPTY
12196: LIST
12197: IN
12198: IFFALSE 12219
// points := [ 67 , 45 , 75 ] ;
12200: LD_ADDR_VAR 0 9
12204: PUSH
12205: LD_INT 67
12207: PUSH
12208: LD_INT 45
12210: PUSH
12211: LD_INT 75
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12219: LD_VAR 0 6
12223: PPUSH
12224: CALL_OW 264
12228: PUSH
12229: LD_INT 26
12231: PUSH
12232: EMPTY
12233: LIST
12234: IN
12235: IFFALSE 12256
// points := [ 120 , 30 , 80 ] ;
12237: LD_ADDR_VAR 0 9
12241: PUSH
12242: LD_INT 120
12244: PUSH
12245: LD_INT 30
12247: PUSH
12248: LD_INT 80
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: LIST
12255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12256: LD_VAR 0 6
12260: PPUSH
12261: CALL_OW 264
12265: PUSH
12266: LD_INT 22
12268: PUSH
12269: EMPTY
12270: LIST
12271: IN
12272: IFFALSE 12293
// points := [ 40 , 1 , 1 ] ;
12274: LD_ADDR_VAR 0 9
12278: PUSH
12279: LD_INT 40
12281: PUSH
12282: LD_INT 1
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12293: LD_VAR 0 6
12297: PPUSH
12298: CALL_OW 264
12302: PUSH
12303: LD_INT 29
12305: PUSH
12306: EMPTY
12307: LIST
12308: IN
12309: IFFALSE 12330
// points := [ 70 , 200 , 400 ] ;
12311: LD_ADDR_VAR 0 9
12315: PUSH
12316: LD_INT 70
12318: PUSH
12319: LD_INT 200
12321: PUSH
12322: LD_INT 400
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12330: LD_VAR 0 6
12334: PPUSH
12335: CALL_OW 264
12339: PUSH
12340: LD_INT 14
12342: PUSH
12343: LD_INT 53
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: IN
12350: IFFALSE 12371
// points := [ 40 , 10 , 20 ] ;
12352: LD_ADDR_VAR 0 9
12356: PUSH
12357: LD_INT 40
12359: PUSH
12360: LD_INT 10
12362: PUSH
12363: LD_INT 20
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12371: LD_VAR 0 6
12375: PPUSH
12376: CALL_OW 264
12380: PUSH
12381: LD_INT 9
12383: PUSH
12384: EMPTY
12385: LIST
12386: IN
12387: IFFALSE 12408
// points := [ 5 , 70 , 20 ] ;
12389: LD_ADDR_VAR 0 9
12393: PUSH
12394: LD_INT 5
12396: PUSH
12397: LD_INT 70
12399: PUSH
12400: LD_INT 20
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12408: LD_VAR 0 6
12412: PPUSH
12413: CALL_OW 264
12417: PUSH
12418: LD_INT 10
12420: PUSH
12421: EMPTY
12422: LIST
12423: IN
12424: IFFALSE 12445
// points := [ 35 , 110 , 70 ] ;
12426: LD_ADDR_VAR 0 9
12430: PUSH
12431: LD_INT 35
12433: PUSH
12434: LD_INT 110
12436: PUSH
12437: LD_INT 70
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12445: LD_VAR 0 6
12449: PPUSH
12450: CALL_OW 265
12454: PUSH
12455: LD_INT 25
12457: EQUAL
12458: IFFALSE 12479
// points := [ 80 , 65 , 100 ] ;
12460: LD_ADDR_VAR 0 9
12464: PUSH
12465: LD_INT 80
12467: PUSH
12468: LD_INT 65
12470: PUSH
12471: LD_INT 100
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12479: LD_VAR 0 6
12483: PPUSH
12484: CALL_OW 263
12488: PUSH
12489: LD_INT 1
12491: EQUAL
12492: IFFALSE 12527
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12494: LD_ADDR_VAR 0 10
12498: PUSH
12499: LD_VAR 0 10
12503: PUSH
12504: LD_VAR 0 6
12508: PPUSH
12509: CALL_OW 311
12513: PPUSH
12514: LD_INT 3
12516: PPUSH
12517: CALL_OW 259
12521: PUSH
12522: LD_INT 4
12524: MUL
12525: MUL
12526: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12527: LD_VAR 0 6
12531: PPUSH
12532: CALL_OW 263
12536: PUSH
12537: LD_INT 2
12539: EQUAL
12540: IFFALSE 12591
// begin j := IsControledBy ( i ) ;
12542: LD_ADDR_VAR 0 7
12546: PUSH
12547: LD_VAR 0 6
12551: PPUSH
12552: CALL_OW 312
12556: ST_TO_ADDR
// if j then
12557: LD_VAR 0 7
12561: IFFALSE 12591
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12563: LD_ADDR_VAR 0 10
12567: PUSH
12568: LD_VAR 0 10
12572: PUSH
12573: LD_VAR 0 7
12577: PPUSH
12578: LD_INT 3
12580: PPUSH
12581: CALL_OW 259
12585: PUSH
12586: LD_INT 3
12588: MUL
12589: MUL
12590: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12591: LD_VAR 0 6
12595: PPUSH
12596: CALL_OW 264
12600: PUSH
12601: LD_INT 5
12603: PUSH
12604: LD_INT 6
12606: PUSH
12607: LD_INT 46
12609: PUSH
12610: LD_INT 44
12612: PUSH
12613: LD_INT 47
12615: PUSH
12616: LD_INT 45
12618: PUSH
12619: LD_INT 28
12621: PUSH
12622: LD_INT 7
12624: PUSH
12625: LD_INT 27
12627: PUSH
12628: LD_INT 29
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: IN
12643: IFFALSE 12663
12645: PUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 52
12653: PPUSH
12654: CALL_OW 321
12658: PUSH
12659: LD_INT 2
12661: EQUAL
12662: AND
12663: IFFALSE 12680
// bpoints := bpoints * 1.2 ;
12665: LD_ADDR_VAR 0 10
12669: PUSH
12670: LD_VAR 0 10
12674: PUSH
12675: LD_REAL  1.20000000000000E+0000
12678: MUL
12679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12680: LD_VAR 0 6
12684: PPUSH
12685: CALL_OW 264
12689: PUSH
12690: LD_INT 6
12692: PUSH
12693: LD_INT 46
12695: PUSH
12696: LD_INT 47
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: IN
12704: IFFALSE 12721
// bpoints := bpoints * 1.2 ;
12706: LD_ADDR_VAR 0 10
12710: PUSH
12711: LD_VAR 0 10
12715: PUSH
12716: LD_REAL  1.20000000000000E+0000
12719: MUL
12720: ST_TO_ADDR
// end ; unit_building :
12721: GO 12735
12723: LD_INT 3
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12734
12731: POP
// ; end ;
12732: GO 12735
12734: POP
// for j = 1 to 3 do
12735: LD_ADDR_VAR 0 7
12739: PUSH
12740: DOUBLE
12741: LD_INT 1
12743: DEC
12744: ST_TO_ADDR
12745: LD_INT 3
12747: PUSH
12748: FOR_TO
12749: IFFALSE 12802
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12751: LD_ADDR_VAR 0 5
12755: PUSH
12756: LD_VAR 0 5
12760: PPUSH
12761: LD_VAR 0 7
12765: PPUSH
12766: LD_VAR 0 5
12770: PUSH
12771: LD_VAR 0 7
12775: ARRAY
12776: PUSH
12777: LD_VAR 0 9
12781: PUSH
12782: LD_VAR 0 7
12786: ARRAY
12787: PUSH
12788: LD_VAR 0 10
12792: MUL
12793: PLUS
12794: PPUSH
12795: CALL_OW 1
12799: ST_TO_ADDR
12800: GO 12748
12802: POP
12803: POP
// end ;
12804: GO 11277
12806: POP
12807: POP
// result := Replace ( result , 4 , tmp ) ;
12808: LD_ADDR_VAR 0 5
12812: PUSH
12813: LD_VAR 0 5
12817: PPUSH
12818: LD_INT 4
12820: PPUSH
12821: LD_VAR 0 8
12825: PPUSH
12826: CALL_OW 1
12830: ST_TO_ADDR
// end ;
12831: LD_VAR 0 5
12835: RET
// export function DangerAtRange ( unit , range ) ; begin
12836: LD_INT 0
12838: PPUSH
// if not unit then
12839: LD_VAR 0 1
12843: NOT
12844: IFFALSE 12848
// exit ;
12846: GO 12893
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 255
12862: PPUSH
12863: LD_VAR 0 1
12867: PPUSH
12868: CALL_OW 250
12872: PPUSH
12873: LD_VAR 0 1
12877: PPUSH
12878: CALL_OW 251
12882: PPUSH
12883: LD_VAR 0 2
12887: PPUSH
12888: CALL 11127 0 4
12892: ST_TO_ADDR
// end ;
12893: LD_VAR 0 3
12897: RET
// export function DangerInArea ( side , area ) ; begin
12898: LD_INT 0
12900: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12901: LD_ADDR_VAR 0 3
12905: PUSH
12906: LD_VAR 0 2
12910: PPUSH
12911: LD_INT 81
12913: PUSH
12914: LD_VAR 0 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PPUSH
12923: CALL_OW 70
12927: ST_TO_ADDR
// end ;
12928: LD_VAR 0 3
12932: RET
// export function IsExtension ( b ) ; begin
12933: LD_INT 0
12935: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12936: LD_ADDR_VAR 0 2
12940: PUSH
12941: LD_VAR 0 1
12945: PUSH
12946: LD_INT 23
12948: PUSH
12949: LD_INT 20
12951: PUSH
12952: LD_INT 22
12954: PUSH
12955: LD_INT 17
12957: PUSH
12958: LD_INT 24
12960: PUSH
12961: LD_INT 21
12963: PUSH
12964: LD_INT 19
12966: PUSH
12967: LD_INT 16
12969: PUSH
12970: LD_INT 25
12972: PUSH
12973: LD_INT 18
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: IN
12988: ST_TO_ADDR
// end ;
12989: LD_VAR 0 2
12993: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12994: LD_INT 0
12996: PPUSH
12997: PPUSH
12998: PPUSH
// result := [ ] ;
12999: LD_ADDR_VAR 0 4
13003: PUSH
13004: EMPTY
13005: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
13006: LD_ADDR_VAR 0 5
13010: PUSH
13011: LD_VAR 0 2
13015: PPUSH
13016: LD_INT 21
13018: PUSH
13019: LD_INT 3
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 70
13030: ST_TO_ADDR
// if not tmp then
13031: LD_VAR 0 5
13035: NOT
13036: IFFALSE 13040
// exit ;
13038: GO 13104
// if checkLink then
13040: LD_VAR 0 3
13044: IFFALSE 13094
// begin for i in tmp do
13046: LD_ADDR_VAR 0 6
13050: PUSH
13051: LD_VAR 0 5
13055: PUSH
13056: FOR_IN
13057: IFFALSE 13092
// if GetBase ( i ) <> base then
13059: LD_VAR 0 6
13063: PPUSH
13064: CALL_OW 274
13068: PUSH
13069: LD_VAR 0 1
13073: NONEQUAL
13074: IFFALSE 13090
// ComLinkToBase ( base , i ) ;
13076: LD_VAR 0 1
13080: PPUSH
13081: LD_VAR 0 6
13085: PPUSH
13086: CALL_OW 169
13090: GO 13056
13092: POP
13093: POP
// end ; result := tmp ;
13094: LD_ADDR_VAR 0 4
13098: PUSH
13099: LD_VAR 0 5
13103: ST_TO_ADDR
// end ;
13104: LD_VAR 0 4
13108: RET
// export function ComComplete ( units , b ) ; var i ; begin
13109: LD_INT 0
13111: PPUSH
13112: PPUSH
// if not units then
13113: LD_VAR 0 1
13117: NOT
13118: IFFALSE 13122
// exit ;
13120: GO 13212
// for i in units do
13122: LD_ADDR_VAR 0 4
13126: PUSH
13127: LD_VAR 0 1
13131: PUSH
13132: FOR_IN
13133: IFFALSE 13210
// if BuildingStatus ( b ) = bs_build then
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL_OW 461
13144: PUSH
13145: LD_INT 1
13147: EQUAL
13148: IFFALSE 13208
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13150: LD_VAR 0 4
13154: PPUSH
13155: LD_STRING h
13157: PUSH
13158: LD_VAR 0 2
13162: PPUSH
13163: CALL_OW 250
13167: PUSH
13168: LD_VAR 0 2
13172: PPUSH
13173: CALL_OW 251
13177: PUSH
13178: LD_VAR 0 2
13182: PUSH
13183: LD_INT 0
13185: PUSH
13186: LD_INT 0
13188: PUSH
13189: LD_INT 0
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: PPUSH
13204: CALL_OW 446
13208: GO 13132
13210: POP
13211: POP
// end ;
13212: LD_VAR 0 3
13216: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13217: LD_INT 0
13219: PPUSH
13220: PPUSH
13221: PPUSH
13222: PPUSH
13223: PPUSH
13224: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13225: LD_VAR 0 1
13229: NOT
13230: IFTRUE 13247
13232: PUSH
13233: LD_VAR 0 1
13237: PPUSH
13238: CALL_OW 263
13242: PUSH
13243: LD_INT 2
13245: NONEQUAL
13246: OR
13247: IFFALSE 13251
// exit ;
13249: GO 13567
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13251: LD_ADDR_VAR 0 6
13255: PUSH
13256: LD_INT 22
13258: PUSH
13259: LD_VAR 0 1
13263: PPUSH
13264: CALL_OW 255
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 2
13275: PUSH
13276: LD_INT 30
13278: PUSH
13279: LD_INT 36
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 34
13288: PUSH
13289: LD_INT 31
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 69
13309: ST_TO_ADDR
// if not tmp then
13310: LD_VAR 0 6
13314: NOT
13315: IFFALSE 13319
// exit ;
13317: GO 13567
// result := [ ] ;
13319: LD_ADDR_VAR 0 2
13323: PUSH
13324: EMPTY
13325: ST_TO_ADDR
// for i in tmp do
13326: LD_ADDR_VAR 0 3
13330: PUSH
13331: LD_VAR 0 6
13335: PUSH
13336: FOR_IN
13337: IFFALSE 13408
// begin t := UnitsInside ( i ) ;
13339: LD_ADDR_VAR 0 4
13343: PUSH
13344: LD_VAR 0 3
13348: PPUSH
13349: CALL_OW 313
13353: ST_TO_ADDR
// if t then
13354: LD_VAR 0 4
13358: IFFALSE 13406
// for j in t do
13360: LD_ADDR_VAR 0 7
13364: PUSH
13365: LD_VAR 0 4
13369: PUSH
13370: FOR_IN
13371: IFFALSE 13404
// result := Replace ( result , result + 1 , j ) ;
13373: LD_ADDR_VAR 0 2
13377: PUSH
13378: LD_VAR 0 2
13382: PPUSH
13383: LD_VAR 0 2
13387: PUSH
13388: LD_INT 1
13390: PLUS
13391: PPUSH
13392: LD_VAR 0 7
13396: PPUSH
13397: CALL_OW 1
13401: ST_TO_ADDR
13402: GO 13370
13404: POP
13405: POP
// end ;
13406: GO 13336
13408: POP
13409: POP
// if not result then
13410: LD_VAR 0 2
13414: NOT
13415: IFFALSE 13419
// exit ;
13417: GO 13567
// mech := result [ 1 ] ;
13419: LD_ADDR_VAR 0 5
13423: PUSH
13424: LD_VAR 0 2
13428: PUSH
13429: LD_INT 1
13431: ARRAY
13432: ST_TO_ADDR
// if result > 1 then
13433: LD_VAR 0 2
13437: PUSH
13438: LD_INT 1
13440: GREATER
13441: IFFALSE 13553
// begin for i = 2 to result do
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: DOUBLE
13449: LD_INT 2
13451: DEC
13452: ST_TO_ADDR
13453: LD_VAR 0 2
13457: PUSH
13458: FOR_TO
13459: IFFALSE 13551
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13461: LD_ADDR_VAR 0 4
13465: PUSH
13466: LD_VAR 0 2
13470: PUSH
13471: LD_VAR 0 3
13475: ARRAY
13476: PPUSH
13477: LD_INT 3
13479: PPUSH
13480: CALL_OW 259
13484: PUSH
13485: LD_VAR 0 2
13489: PUSH
13490: LD_VAR 0 3
13494: ARRAY
13495: PPUSH
13496: CALL_OW 432
13500: MINUS
13501: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13502: LD_VAR 0 4
13506: PUSH
13507: LD_VAR 0 5
13511: PPUSH
13512: LD_INT 3
13514: PPUSH
13515: CALL_OW 259
13519: PUSH
13520: LD_VAR 0 5
13524: PPUSH
13525: CALL_OW 432
13529: MINUS
13530: GREATEREQUAL
13531: IFFALSE 13549
// mech := result [ i ] ;
13533: LD_ADDR_VAR 0 5
13537: PUSH
13538: LD_VAR 0 2
13542: PUSH
13543: LD_VAR 0 3
13547: ARRAY
13548: ST_TO_ADDR
// end ;
13549: GO 13458
13551: POP
13552: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13553: LD_VAR 0 1
13557: PPUSH
13558: LD_VAR 0 5
13562: PPUSH
13563: CALL_OW 135
// end ;
13567: LD_VAR 0 2
13571: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13572: LD_INT 0
13574: PPUSH
13575: PPUSH
13576: PPUSH
13577: PPUSH
13578: PPUSH
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
13586: PPUSH
// result := [ ] ;
13587: LD_ADDR_VAR 0 7
13591: PUSH
13592: EMPTY
13593: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13594: LD_VAR 0 1
13598: PPUSH
13599: CALL_OW 266
13603: PUSH
13604: LD_INT 0
13606: PUSH
13607: LD_INT 1
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: IN
13614: NOT
13615: IFFALSE 13619
// exit ;
13617: GO 15259
// if name then
13619: LD_VAR 0 3
13623: IFFALSE 13639
// SetBName ( base_dep , name ) ;
13625: LD_VAR 0 1
13629: PPUSH
13630: LD_VAR 0 3
13634: PPUSH
13635: CALL_OW 500
// base := GetBase ( base_dep ) ;
13639: LD_ADDR_VAR 0 15
13643: PUSH
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL_OW 274
13653: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13654: LD_ADDR_VAR 0 16
13658: PUSH
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 255
13668: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13669: LD_ADDR_VAR 0 17
13673: PUSH
13674: LD_VAR 0 1
13678: PPUSH
13679: CALL_OW 248
13683: ST_TO_ADDR
// if sources then
13684: LD_VAR 0 5
13688: IFFALSE 13735
// for i = 1 to 3 do
13690: LD_ADDR_VAR 0 8
13694: PUSH
13695: DOUBLE
13696: LD_INT 1
13698: DEC
13699: ST_TO_ADDR
13700: LD_INT 3
13702: PUSH
13703: FOR_TO
13704: IFFALSE 13733
// AddResourceType ( base , i , sources [ i ] ) ;
13706: LD_VAR 0 15
13710: PPUSH
13711: LD_VAR 0 8
13715: PPUSH
13716: LD_VAR 0 5
13720: PUSH
13721: LD_VAR 0 8
13725: ARRAY
13726: PPUSH
13727: CALL_OW 276
13731: GO 13703
13733: POP
13734: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13735: LD_ADDR_VAR 0 18
13739: PUSH
13740: LD_VAR 0 15
13744: PPUSH
13745: LD_VAR 0 2
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL 12994 0 3
13757: ST_TO_ADDR
// InitHc ;
13758: CALL_OW 19
// InitUc ;
13762: CALL_OW 18
// uc_side := side ;
13766: LD_ADDR_OWVAR 20
13770: PUSH
13771: LD_VAR 0 16
13775: ST_TO_ADDR
// uc_nation := nation ;
13776: LD_ADDR_OWVAR 21
13780: PUSH
13781: LD_VAR 0 17
13785: ST_TO_ADDR
// if buildings then
13786: LD_VAR 0 18
13790: IFFALSE 15118
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13792: LD_ADDR_VAR 0 19
13796: PUSH
13797: LD_VAR 0 18
13801: PPUSH
13802: LD_INT 2
13804: PUSH
13805: LD_INT 30
13807: PUSH
13808: LD_INT 29
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 30
13817: PUSH
13818: LD_INT 30
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: PPUSH
13830: CALL_OW 72
13834: ST_TO_ADDR
// if tmp then
13835: LD_VAR 0 19
13839: IFFALSE 13887
// for i in tmp do
13841: LD_ADDR_VAR 0 8
13845: PUSH
13846: LD_VAR 0 19
13850: PUSH
13851: FOR_IN
13852: IFFALSE 13885
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13854: LD_VAR 0 8
13858: PPUSH
13859: CALL_OW 250
13863: PPUSH
13864: LD_VAR 0 8
13868: PPUSH
13869: CALL_OW 251
13873: PPUSH
13874: LD_VAR 0 16
13878: PPUSH
13879: CALL_OW 441
13883: GO 13851
13885: POP
13886: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13887: LD_VAR 0 18
13891: PPUSH
13892: LD_INT 2
13894: PUSH
13895: LD_INT 30
13897: PUSH
13898: LD_INT 32
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 30
13907: PUSH
13908: LD_INT 33
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 72
13924: IFFALSE 14012
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13926: LD_ADDR_VAR 0 8
13930: PUSH
13931: LD_VAR 0 18
13935: PPUSH
13936: LD_INT 2
13938: PUSH
13939: LD_INT 30
13941: PUSH
13942: LD_INT 32
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 30
13951: PUSH
13952: LD_INT 33
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: PPUSH
13964: CALL_OW 72
13968: PUSH
13969: FOR_IN
13970: IFFALSE 14010
// begin if not GetBWeapon ( i ) then
13972: LD_VAR 0 8
13976: PPUSH
13977: CALL_OW 269
13981: NOT
13982: IFFALSE 14008
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13984: LD_VAR 0 8
13988: PPUSH
13989: LD_VAR 0 8
13993: PPUSH
13994: LD_VAR 0 2
13998: PPUSH
13999: CALL 15264 0 2
14003: PPUSH
14004: CALL_OW 431
// end ;
14008: GO 13969
14010: POP
14011: POP
// end ; for i = 1 to personel do
14012: LD_ADDR_VAR 0 8
14016: PUSH
14017: DOUBLE
14018: LD_INT 1
14020: DEC
14021: ST_TO_ADDR
14022: LD_VAR 0 6
14026: PUSH
14027: FOR_TO
14028: IFFALSE 15098
// begin if i > 4 then
14030: LD_VAR 0 8
14034: PUSH
14035: LD_INT 4
14037: GREATER
14038: IFFALSE 14042
// break ;
14040: GO 15098
// case i of 1 :
14042: LD_VAR 0 8
14046: PUSH
14047: LD_INT 1
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14135
14055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14056: LD_ADDR_VAR 0 12
14060: PUSH
14061: LD_VAR 0 18
14065: PPUSH
14066: LD_INT 22
14068: PUSH
14069: LD_VAR 0 16
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 58
14080: PUSH
14081: EMPTY
14082: LIST
14083: PUSH
14084: LD_INT 2
14086: PUSH
14087: LD_INT 30
14089: PUSH
14090: LD_INT 32
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 30
14099: PUSH
14100: LD_INT 4
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 30
14109: PUSH
14110: LD_INT 5
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 72
14132: ST_TO_ADDR
14133: GO 14357
14135: LD_INT 2
14137: DOUBLE
14138: EQUAL
14139: IFTRUE 14143
14141: GO 14205
14143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14144: LD_ADDR_VAR 0 12
14148: PUSH
14149: LD_VAR 0 18
14153: PPUSH
14154: LD_INT 22
14156: PUSH
14157: LD_VAR 0 16
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 2
14168: PUSH
14169: LD_INT 30
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 30
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 72
14202: ST_TO_ADDR
14203: GO 14357
14205: LD_INT 3
14207: DOUBLE
14208: EQUAL
14209: IFTRUE 14213
14211: GO 14275
14213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14214: LD_ADDR_VAR 0 12
14218: PUSH
14219: LD_VAR 0 18
14223: PPUSH
14224: LD_INT 22
14226: PUSH
14227: LD_VAR 0 16
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: LD_INT 30
14241: PUSH
14242: LD_INT 2
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 30
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 72
14272: ST_TO_ADDR
14273: GO 14357
14275: LD_INT 4
14277: DOUBLE
14278: EQUAL
14279: IFTRUE 14283
14281: GO 14356
14283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14284: LD_ADDR_VAR 0 12
14288: PUSH
14289: LD_VAR 0 18
14293: PPUSH
14294: LD_INT 22
14296: PUSH
14297: LD_VAR 0 16
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: LD_INT 30
14311: PUSH
14312: LD_INT 6
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 30
14321: PUSH
14322: LD_INT 7
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 30
14331: PUSH
14332: LD_INT 8
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 72
14353: ST_TO_ADDR
14354: GO 14357
14356: POP
// if i = 1 then
14357: LD_VAR 0 8
14361: PUSH
14362: LD_INT 1
14364: EQUAL
14365: IFFALSE 14476
// begin tmp := [ ] ;
14367: LD_ADDR_VAR 0 19
14371: PUSH
14372: EMPTY
14373: ST_TO_ADDR
// for j in f do
14374: LD_ADDR_VAR 0 9
14378: PUSH
14379: LD_VAR 0 12
14383: PUSH
14384: FOR_IN
14385: IFFALSE 14458
// if GetBType ( j ) = b_bunker then
14387: LD_VAR 0 9
14391: PPUSH
14392: CALL_OW 266
14396: PUSH
14397: LD_INT 32
14399: EQUAL
14400: IFFALSE 14427
// tmp := Insert ( tmp , 1 , j ) else
14402: LD_ADDR_VAR 0 19
14406: PUSH
14407: LD_VAR 0 19
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: LD_VAR 0 9
14419: PPUSH
14420: CALL_OW 2
14424: ST_TO_ADDR
14425: GO 14456
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14427: LD_ADDR_VAR 0 19
14431: PUSH
14432: LD_VAR 0 19
14436: PPUSH
14437: LD_VAR 0 19
14441: PUSH
14442: LD_INT 1
14444: PLUS
14445: PPUSH
14446: LD_VAR 0 9
14450: PPUSH
14451: CALL_OW 2
14455: ST_TO_ADDR
14456: GO 14384
14458: POP
14459: POP
// if tmp then
14460: LD_VAR 0 19
14464: IFFALSE 14476
// f := tmp ;
14466: LD_ADDR_VAR 0 12
14470: PUSH
14471: LD_VAR 0 19
14475: ST_TO_ADDR
// end ; x := personel [ i ] ;
14476: LD_ADDR_VAR 0 13
14480: PUSH
14481: LD_VAR 0 6
14485: PUSH
14486: LD_VAR 0 8
14490: ARRAY
14491: ST_TO_ADDR
// if x = - 1 then
14492: LD_VAR 0 13
14496: PUSH
14497: LD_INT 1
14499: NEG
14500: EQUAL
14501: IFFALSE 14712
// begin for j in f do
14503: LD_ADDR_VAR 0 9
14507: PUSH
14508: LD_VAR 0 12
14512: PUSH
14513: FOR_IN
14514: IFFALSE 14708
// repeat InitHc ;
14516: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14520: LD_VAR 0 9
14524: PPUSH
14525: CALL_OW 266
14529: PUSH
14530: LD_INT 5
14532: EQUAL
14533: IFFALSE 14603
// begin if UnitsInside ( j ) < 3 then
14535: LD_VAR 0 9
14539: PPUSH
14540: CALL_OW 313
14544: PUSH
14545: LD_INT 3
14547: LESS
14548: IFFALSE 14584
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14550: LD_INT 0
14552: PPUSH
14553: LD_INT 5
14555: PUSH
14556: LD_INT 8
14558: PUSH
14559: LD_INT 9
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: LD_VAR 0 17
14571: ARRAY
14572: PPUSH
14573: LD_VAR 0 4
14577: PPUSH
14578: CALL_OW 380
14582: GO 14601
// PrepareHuman ( false , i , skill ) ;
14584: LD_INT 0
14586: PPUSH
14587: LD_VAR 0 8
14591: PPUSH
14592: LD_VAR 0 4
14596: PPUSH
14597: CALL_OW 380
// end else
14601: GO 14620
// PrepareHuman ( false , i , skill ) ;
14603: LD_INT 0
14605: PPUSH
14606: LD_VAR 0 8
14610: PPUSH
14611: LD_VAR 0 4
14615: PPUSH
14616: CALL_OW 380
// un := CreateHuman ;
14620: LD_ADDR_VAR 0 14
14624: PUSH
14625: CALL_OW 44
14629: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14630: LD_ADDR_VAR 0 7
14634: PUSH
14635: LD_VAR 0 7
14639: PPUSH
14640: LD_INT 1
14642: PPUSH
14643: LD_VAR 0 14
14647: PPUSH
14648: CALL_OW 2
14652: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14653: LD_VAR 0 14
14657: PPUSH
14658: LD_VAR 0 9
14662: PPUSH
14663: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14667: LD_VAR 0 9
14671: PPUSH
14672: CALL_OW 313
14676: PUSH
14677: LD_INT 6
14679: EQUAL
14680: IFTRUE 14704
14682: PUSH
14683: LD_VAR 0 9
14687: PPUSH
14688: CALL_OW 266
14692: PUSH
14693: LD_INT 32
14695: PUSH
14696: LD_INT 31
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: IN
14703: OR
14704: IFFALSE 14516
14706: GO 14513
14708: POP
14709: POP
// end else
14710: GO 15096
// for j = 1 to x do
14712: LD_ADDR_VAR 0 9
14716: PUSH
14717: DOUBLE
14718: LD_INT 1
14720: DEC
14721: ST_TO_ADDR
14722: LD_VAR 0 13
14726: PUSH
14727: FOR_TO
14728: IFFALSE 15094
// begin InitHc ;
14730: CALL_OW 19
// if not f then
14734: LD_VAR 0 12
14738: NOT
14739: IFFALSE 14828
// begin PrepareHuman ( false , i , skill ) ;
14741: LD_INT 0
14743: PPUSH
14744: LD_VAR 0 8
14748: PPUSH
14749: LD_VAR 0 4
14753: PPUSH
14754: CALL_OW 380
// un := CreateHuman ;
14758: LD_ADDR_VAR 0 14
14762: PUSH
14763: CALL_OW 44
14767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14768: LD_ADDR_VAR 0 7
14772: PUSH
14773: LD_VAR 0 7
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: LD_VAR 0 14
14785: PPUSH
14786: CALL_OW 2
14790: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14791: LD_VAR 0 14
14795: PPUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 250
14805: PPUSH
14806: LD_VAR 0 1
14810: PPUSH
14811: CALL_OW 251
14815: PPUSH
14816: LD_INT 10
14818: PPUSH
14819: LD_INT 0
14821: PPUSH
14822: CALL_OW 50
// continue ;
14826: GO 14727
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14828: LD_VAR 0 12
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: PPUSH
14837: CALL_OW 313
14841: IFFALSE 14869
14843: PUSH
14844: LD_VAR 0 12
14848: PUSH
14849: LD_INT 1
14851: ARRAY
14852: PPUSH
14853: CALL_OW 266
14857: PUSH
14858: LD_INT 32
14860: PUSH
14861: LD_INT 31
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: IN
14868: AND
14869: IFTRUE 14890
14871: PUSH
14872: LD_VAR 0 12
14876: PUSH
14877: LD_INT 1
14879: ARRAY
14880: PPUSH
14881: CALL_OW 313
14885: PUSH
14886: LD_INT 6
14888: EQUAL
14889: OR
14890: IFFALSE 14910
// f := Delete ( f , 1 ) ;
14892: LD_ADDR_VAR 0 12
14896: PUSH
14897: LD_VAR 0 12
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 3
14909: ST_TO_ADDR
// if not f then
14910: LD_VAR 0 12
14914: NOT
14915: IFFALSE 14933
// begin x := x + 2 ;
14917: LD_ADDR_VAR 0 13
14921: PUSH
14922: LD_VAR 0 13
14926: PUSH
14927: LD_INT 2
14929: PLUS
14930: ST_TO_ADDR
// continue ;
14931: GO 14727
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14933: LD_VAR 0 12
14937: PUSH
14938: LD_INT 1
14940: ARRAY
14941: PPUSH
14942: CALL_OW 266
14946: PUSH
14947: LD_INT 5
14949: EQUAL
14950: IFFALSE 15024
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14952: LD_VAR 0 12
14956: PUSH
14957: LD_INT 1
14959: ARRAY
14960: PPUSH
14961: CALL_OW 313
14965: PUSH
14966: LD_INT 3
14968: LESS
14969: IFFALSE 15005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14971: LD_INT 0
14973: PPUSH
14974: LD_INT 5
14976: PUSH
14977: LD_INT 8
14979: PUSH
14980: LD_INT 9
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: LD_VAR 0 17
14992: ARRAY
14993: PPUSH
14994: LD_VAR 0 4
14998: PPUSH
14999: CALL_OW 380
15003: GO 15022
// PrepareHuman ( false , i , skill ) ;
15005: LD_INT 0
15007: PPUSH
15008: LD_VAR 0 8
15012: PPUSH
15013: LD_VAR 0 4
15017: PPUSH
15018: CALL_OW 380
// end else
15022: GO 15041
// PrepareHuman ( false , i , skill ) ;
15024: LD_INT 0
15026: PPUSH
15027: LD_VAR 0 8
15031: PPUSH
15032: LD_VAR 0 4
15036: PPUSH
15037: CALL_OW 380
// un := CreateHuman ;
15041: LD_ADDR_VAR 0 14
15045: PUSH
15046: CALL_OW 44
15050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15051: LD_ADDR_VAR 0 7
15055: PUSH
15056: LD_VAR 0 7
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: LD_VAR 0 14
15068: PPUSH
15069: CALL_OW 2
15073: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15074: LD_VAR 0 14
15078: PPUSH
15079: LD_VAR 0 12
15083: PUSH
15084: LD_INT 1
15086: ARRAY
15087: PPUSH
15088: CALL_OW 52
// end ;
15092: GO 14727
15094: POP
15095: POP
// end ;
15096: GO 14027
15098: POP
15099: POP
// result := result ^ buildings ;
15100: LD_ADDR_VAR 0 7
15104: PUSH
15105: LD_VAR 0 7
15109: PUSH
15110: LD_VAR 0 18
15114: ADD
15115: ST_TO_ADDR
// end else
15116: GO 15259
// begin for i = 1 to personel do
15118: LD_ADDR_VAR 0 8
15122: PUSH
15123: DOUBLE
15124: LD_INT 1
15126: DEC
15127: ST_TO_ADDR
15128: LD_VAR 0 6
15132: PUSH
15133: FOR_TO
15134: IFFALSE 15257
// begin if i > 4 then
15136: LD_VAR 0 8
15140: PUSH
15141: LD_INT 4
15143: GREATER
15144: IFFALSE 15148
// break ;
15146: GO 15257
// x := personel [ i ] ;
15148: LD_ADDR_VAR 0 13
15152: PUSH
15153: LD_VAR 0 6
15157: PUSH
15158: LD_VAR 0 8
15162: ARRAY
15163: ST_TO_ADDR
// if x = - 1 then
15164: LD_VAR 0 13
15168: PUSH
15169: LD_INT 1
15171: NEG
15172: EQUAL
15173: IFFALSE 15177
// continue ;
15175: GO 15133
// PrepareHuman ( false , i , skill ) ;
15177: LD_INT 0
15179: PPUSH
15180: LD_VAR 0 8
15184: PPUSH
15185: LD_VAR 0 4
15189: PPUSH
15190: CALL_OW 380
// un := CreateHuman ;
15194: LD_ADDR_VAR 0 14
15198: PUSH
15199: CALL_OW 44
15203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15204: LD_VAR 0 14
15208: PPUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 250
15218: PPUSH
15219: LD_VAR 0 1
15223: PPUSH
15224: CALL_OW 251
15228: PPUSH
15229: LD_INT 10
15231: PPUSH
15232: LD_INT 0
15234: PPUSH
15235: CALL_OW 50
// result := result ^ un ;
15239: LD_ADDR_VAR 0 7
15243: PUSH
15244: LD_VAR 0 7
15248: PUSH
15249: LD_VAR 0 14
15253: ADD
15254: ST_TO_ADDR
// end ;
15255: GO 15133
15257: POP
15258: POP
// end ; end ;
15259: LD_VAR 0 7
15263: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15264: LD_INT 0
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
// result := false ;
15282: LD_ADDR_VAR 0 3
15286: PUSH
15287: LD_INT 0
15289: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15290: LD_VAR 0 1
15294: NOT
15295: IFTRUE 15320
15297: PUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL_OW 266
15307: PUSH
15308: LD_INT 32
15310: PUSH
15311: LD_INT 33
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: IN
15318: NOT
15319: OR
15320: IFFALSE 15324
// exit ;
15322: GO 16459
// nat := GetNation ( tower ) ;
15324: LD_ADDR_VAR 0 12
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 248
15338: ST_TO_ADDR
// side := GetSide ( tower ) ;
15339: LD_ADDR_VAR 0 16
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 255
15353: ST_TO_ADDR
// x := GetX ( tower ) ;
15354: LD_ADDR_VAR 0 10
15358: PUSH
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 250
15368: ST_TO_ADDR
// y := GetY ( tower ) ;
15369: LD_ADDR_VAR 0 11
15373: PUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 251
15383: ST_TO_ADDR
// if not x or not y then
15384: LD_VAR 0 10
15388: NOT
15389: IFTRUE 15398
15391: PUSH
15392: LD_VAR 0 11
15396: NOT
15397: OR
15398: IFFALSE 15402
// exit ;
15400: GO 16459
// weapon := 0 ;
15402: LD_ADDR_VAR 0 18
15406: PUSH
15407: LD_INT 0
15409: ST_TO_ADDR
// fac_list := [ ] ;
15410: LD_ADDR_VAR 0 17
15414: PUSH
15415: EMPTY
15416: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15417: LD_ADDR_VAR 0 6
15421: PUSH
15422: LD_VAR 0 1
15426: PPUSH
15427: CALL_OW 274
15431: PPUSH
15432: LD_VAR 0 2
15436: PPUSH
15437: LD_INT 0
15439: PPUSH
15440: CALL 12994 0 3
15444: PPUSH
15445: LD_INT 30
15447: PUSH
15448: LD_INT 3
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PPUSH
15455: CALL_OW 72
15459: ST_TO_ADDR
// if not factories then
15460: LD_VAR 0 6
15464: NOT
15465: IFFALSE 15469
// exit ;
15467: GO 16459
// for i in factories do
15469: LD_ADDR_VAR 0 8
15473: PUSH
15474: LD_VAR 0 6
15478: PUSH
15479: FOR_IN
15480: IFFALSE 15505
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15482: LD_ADDR_VAR 0 17
15486: PUSH
15487: LD_VAR 0 17
15491: PUSH
15492: LD_VAR 0 8
15496: PPUSH
15497: CALL_OW 478
15501: UNION
15502: ST_TO_ADDR
15503: GO 15479
15505: POP
15506: POP
// if not fac_list then
15507: LD_VAR 0 17
15511: NOT
15512: IFFALSE 15516
// exit ;
15514: GO 16459
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15516: LD_ADDR_VAR 0 5
15520: PUSH
15521: LD_INT 4
15523: PUSH
15524: LD_INT 5
15526: PUSH
15527: LD_INT 9
15529: PUSH
15530: LD_INT 10
15532: PUSH
15533: LD_INT 6
15535: PUSH
15536: LD_INT 7
15538: PUSH
15539: LD_INT 11
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 27
15553: PUSH
15554: LD_INT 28
15556: PUSH
15557: LD_INT 26
15559: PUSH
15560: LD_INT 30
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 43
15571: PUSH
15572: LD_INT 44
15574: PUSH
15575: LD_INT 46
15577: PUSH
15578: LD_INT 45
15580: PUSH
15581: LD_INT 47
15583: PUSH
15584: LD_INT 49
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: LIST
15599: PUSH
15600: LD_VAR 0 12
15604: ARRAY
15605: ST_TO_ADDR
// list := list isect fac_list ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_VAR 0 5
15615: PUSH
15616: LD_VAR 0 17
15620: ISECT
15621: ST_TO_ADDR
// if not list then
15622: LD_VAR 0 5
15626: NOT
15627: IFFALSE 15631
// exit ;
15629: GO 16459
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15631: LD_VAR 0 12
15635: PUSH
15636: LD_INT 3
15638: EQUAL
15639: IFFALSE 15651
15641: PUSH
15642: LD_INT 49
15644: PUSH
15645: LD_VAR 0 5
15649: IN
15650: AND
15651: IFFALSE 15671
15653: PUSH
15654: LD_INT 31
15656: PPUSH
15657: LD_VAR 0 16
15661: PPUSH
15662: CALL_OW 321
15666: PUSH
15667: LD_INT 2
15669: EQUAL
15670: AND
15671: IFFALSE 15731
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15673: LD_INT 22
15675: PUSH
15676: LD_VAR 0 16
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 35
15687: PUSH
15688: LD_INT 49
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 91
15697: PUSH
15698: LD_VAR 0 1
15702: PUSH
15703: LD_INT 10
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: NOT
15721: IFFALSE 15731
// weapon := ru_time_lapser ;
15723: LD_ADDR_VAR 0 18
15727: PUSH
15728: LD_INT 49
15730: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15731: LD_VAR 0 12
15735: PUSH
15736: LD_INT 1
15738: PUSH
15739: LD_INT 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: IN
15746: IFFALSE 15770
15748: PUSH
15749: LD_INT 11
15751: PUSH
15752: LD_VAR 0 5
15756: IN
15757: IFTRUE 15769
15759: PUSH
15760: LD_INT 30
15762: PUSH
15763: LD_VAR 0 5
15767: IN
15768: OR
15769: AND
15770: IFFALSE 15790
15772: PUSH
15773: LD_INT 6
15775: PPUSH
15776: LD_VAR 0 16
15780: PPUSH
15781: CALL_OW 321
15785: PUSH
15786: LD_INT 2
15788: EQUAL
15789: AND
15790: IFFALSE 15957
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15792: LD_INT 22
15794: PUSH
15795: LD_VAR 0 16
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: LD_INT 35
15809: PUSH
15810: LD_INT 11
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 35
15819: PUSH
15820: LD_INT 30
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 91
15834: PUSH
15835: LD_VAR 0 1
15839: PUSH
15840: LD_INT 18
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: PPUSH
15853: CALL_OW 69
15857: NOT
15858: IFFALSE 15934
15860: PUSH
15861: LD_INT 22
15863: PUSH
15864: LD_VAR 0 16
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 2
15875: PUSH
15876: LD_INT 30
15878: PUSH
15879: LD_INT 32
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 33
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 91
15903: PUSH
15904: LD_VAR 0 1
15908: PUSH
15909: LD_INT 12
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: PPUSH
15925: CALL_OW 69
15929: PUSH
15930: LD_INT 2
15932: GREATER
15933: AND
15934: IFFALSE 15957
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15936: LD_ADDR_VAR 0 18
15940: PUSH
15941: LD_INT 11
15943: PUSH
15944: LD_INT 30
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_VAR 0 12
15955: ARRAY
15956: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15957: LD_VAR 0 18
15961: NOT
15962: IFFALSE 15982
15964: PUSH
15965: LD_INT 40
15967: PPUSH
15968: LD_VAR 0 16
15972: PPUSH
15973: CALL_OW 321
15977: PUSH
15978: LD_INT 2
15980: EQUAL
15981: AND
15982: IFFALSE 16018
15984: PUSH
15985: LD_INT 7
15987: PUSH
15988: LD_VAR 0 5
15992: IN
15993: IFTRUE 16005
15995: PUSH
15996: LD_INT 28
15998: PUSH
15999: LD_VAR 0 5
16003: IN
16004: OR
16005: IFTRUE 16017
16007: PUSH
16008: LD_INT 45
16010: PUSH
16011: LD_VAR 0 5
16015: IN
16016: OR
16017: AND
16018: IFFALSE 16272
// begin hex := GetHexInfo ( x , y ) ;
16020: LD_ADDR_VAR 0 4
16024: PUSH
16025: LD_VAR 0 10
16029: PPUSH
16030: LD_VAR 0 11
16034: PPUSH
16035: CALL_OW 546
16039: ST_TO_ADDR
// if hex [ 1 ] then
16040: LD_VAR 0 4
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: IFFALSE 16052
// exit ;
16050: GO 16459
// height := hex [ 2 ] ;
16052: LD_ADDR_VAR 0 15
16056: PUSH
16057: LD_VAR 0 4
16061: PUSH
16062: LD_INT 2
16064: ARRAY
16065: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16066: LD_ADDR_VAR 0 14
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: LD_INT 3
16079: PUSH
16080: LD_INT 5
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: ST_TO_ADDR
// for i in tmp do
16089: LD_ADDR_VAR 0 8
16093: PUSH
16094: LD_VAR 0 14
16098: PUSH
16099: FOR_IN
16100: IFFALSE 16270
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16102: LD_ADDR_VAR 0 9
16106: PUSH
16107: LD_VAR 0 10
16111: PPUSH
16112: LD_VAR 0 8
16116: PPUSH
16117: LD_INT 5
16119: PPUSH
16120: CALL_OW 272
16124: PUSH
16125: LD_VAR 0 11
16129: PPUSH
16130: LD_VAR 0 8
16134: PPUSH
16135: LD_INT 5
16137: PPUSH
16138: CALL_OW 273
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16147: LD_VAR 0 9
16151: PUSH
16152: LD_INT 1
16154: ARRAY
16155: PPUSH
16156: LD_VAR 0 9
16160: PUSH
16161: LD_INT 2
16163: ARRAY
16164: PPUSH
16165: CALL_OW 488
16169: IFFALSE 16268
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16171: LD_ADDR_VAR 0 4
16175: PUSH
16176: LD_VAR 0 9
16180: PUSH
16181: LD_INT 1
16183: ARRAY
16184: PPUSH
16185: LD_VAR 0 9
16189: PUSH
16190: LD_INT 2
16192: ARRAY
16193: PPUSH
16194: CALL_OW 546
16198: ST_TO_ADDR
// if hex [ 1 ] then
16199: LD_VAR 0 4
16203: PUSH
16204: LD_INT 1
16206: ARRAY
16207: IFFALSE 16211
// continue ;
16209: GO 16099
// h := hex [ 2 ] ;
16211: LD_ADDR_VAR 0 13
16215: PUSH
16216: LD_VAR 0 4
16220: PUSH
16221: LD_INT 2
16223: ARRAY
16224: ST_TO_ADDR
// if h + 7 < height then
16225: LD_VAR 0 13
16229: PUSH
16230: LD_INT 7
16232: PLUS
16233: PUSH
16234: LD_VAR 0 15
16238: LESS
16239: IFFALSE 16268
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16241: LD_ADDR_VAR 0 18
16245: PUSH
16246: LD_INT 7
16248: PUSH
16249: LD_INT 28
16251: PUSH
16252: LD_INT 45
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: PUSH
16260: LD_VAR 0 12
16264: ARRAY
16265: ST_TO_ADDR
// break ;
16266: GO 16270
// end ; end ; end ;
16268: GO 16099
16270: POP
16271: POP
// end ; if not weapon then
16272: LD_VAR 0 18
16276: NOT
16277: IFFALSE 16337
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16279: LD_ADDR_VAR 0 5
16283: PUSH
16284: LD_VAR 0 5
16288: PUSH
16289: LD_INT 11
16291: PUSH
16292: LD_INT 30
16294: PUSH
16295: LD_INT 49
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: LIST
16302: DIFF
16303: ST_TO_ADDR
// if not list then
16304: LD_VAR 0 5
16308: NOT
16309: IFFALSE 16313
// exit ;
16311: GO 16459
// weapon := list [ rand ( 1 , list ) ] ;
16313: LD_ADDR_VAR 0 18
16317: PUSH
16318: LD_VAR 0 5
16322: PUSH
16323: LD_INT 1
16325: PPUSH
16326: LD_VAR 0 5
16330: PPUSH
16331: CALL_OW 12
16335: ARRAY
16336: ST_TO_ADDR
// end ; if weapon then
16337: LD_VAR 0 18
16341: IFFALSE 16459
// begin tmp := CostOfWeapon ( weapon ) ;
16343: LD_ADDR_VAR 0 14
16347: PUSH
16348: LD_VAR 0 18
16352: PPUSH
16353: CALL_OW 451
16357: ST_TO_ADDR
// j := GetBase ( tower ) ;
16358: LD_ADDR_VAR 0 9
16362: PUSH
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 274
16372: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16373: LD_VAR 0 9
16377: PPUSH
16378: LD_INT 1
16380: PPUSH
16381: CALL_OW 275
16385: PUSH
16386: LD_VAR 0 14
16390: PUSH
16391: LD_INT 1
16393: ARRAY
16394: GREATEREQUAL
16395: IFFALSE 16421
16397: PUSH
16398: LD_VAR 0 9
16402: PPUSH
16403: LD_INT 2
16405: PPUSH
16406: CALL_OW 275
16410: PUSH
16411: LD_VAR 0 14
16415: PUSH
16416: LD_INT 2
16418: ARRAY
16419: GREATEREQUAL
16420: AND
16421: IFFALSE 16447
16423: PUSH
16424: LD_VAR 0 9
16428: PPUSH
16429: LD_INT 3
16431: PPUSH
16432: CALL_OW 275
16436: PUSH
16437: LD_VAR 0 14
16441: PUSH
16442: LD_INT 3
16444: ARRAY
16445: GREATEREQUAL
16446: AND
16447: IFFALSE 16459
// result := weapon ;
16449: LD_ADDR_VAR 0 3
16453: PUSH
16454: LD_VAR 0 18
16458: ST_TO_ADDR
// end ; end ;
16459: LD_VAR 0 3
16463: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16464: LD_INT 0
16466: PPUSH
16467: PPUSH
// result := true ;
16468: LD_ADDR_VAR 0 3
16472: PUSH
16473: LD_INT 1
16475: ST_TO_ADDR
// if array1 = array2 then
16476: LD_VAR 0 1
16480: PUSH
16481: LD_VAR 0 2
16485: EQUAL
16486: IFFALSE 16546
// begin for i = 1 to array1 do
16488: LD_ADDR_VAR 0 4
16492: PUSH
16493: DOUBLE
16494: LD_INT 1
16496: DEC
16497: ST_TO_ADDR
16498: LD_VAR 0 1
16502: PUSH
16503: FOR_TO
16504: IFFALSE 16542
// if array1 [ i ] <> array2 [ i ] then
16506: LD_VAR 0 1
16510: PUSH
16511: LD_VAR 0 4
16515: ARRAY
16516: PUSH
16517: LD_VAR 0 2
16521: PUSH
16522: LD_VAR 0 4
16526: ARRAY
16527: NONEQUAL
16528: IFFALSE 16540
// begin result := false ;
16530: LD_ADDR_VAR 0 3
16534: PUSH
16535: LD_INT 0
16537: ST_TO_ADDR
// break ;
16538: GO 16542
// end ;
16540: GO 16503
16542: POP
16543: POP
// end else
16544: GO 16554
// result := false ;
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_INT 0
16553: ST_TO_ADDR
// end ;
16554: LD_VAR 0 3
16558: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16559: LD_INT 0
16561: PPUSH
16562: PPUSH
// if not array1 or not array2 then
16563: LD_VAR 0 1
16567: NOT
16568: IFTRUE 16577
16570: PUSH
16571: LD_VAR 0 2
16575: NOT
16576: OR
16577: IFFALSE 16581
// exit ;
16579: GO 16645
// result := true ;
16581: LD_ADDR_VAR 0 3
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// for i = 1 to array1 do
16589: LD_ADDR_VAR 0 4
16593: PUSH
16594: DOUBLE
16595: LD_INT 1
16597: DEC
16598: ST_TO_ADDR
16599: LD_VAR 0 1
16603: PUSH
16604: FOR_TO
16605: IFFALSE 16643
// if array1 [ i ] <> array2 [ i ] then
16607: LD_VAR 0 1
16611: PUSH
16612: LD_VAR 0 4
16616: ARRAY
16617: PUSH
16618: LD_VAR 0 2
16622: PUSH
16623: LD_VAR 0 4
16627: ARRAY
16628: NONEQUAL
16629: IFFALSE 16641
// begin result := false ;
16631: LD_ADDR_VAR 0 3
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// break ;
16639: GO 16643
// end ;
16641: GO 16604
16643: POP
16644: POP
// end ;
16645: LD_VAR 0 3
16649: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16650: LD_INT 0
16652: PPUSH
16653: PPUSH
16654: PPUSH
// pom := GetBase ( fac ) ;
16655: LD_ADDR_VAR 0 5
16659: PUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 274
16669: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16670: LD_ADDR_VAR 0 4
16674: PUSH
16675: LD_VAR 0 2
16679: PUSH
16680: LD_INT 1
16682: ARRAY
16683: PPUSH
16684: LD_VAR 0 2
16688: PUSH
16689: LD_INT 2
16691: ARRAY
16692: PPUSH
16693: LD_VAR 0 2
16697: PUSH
16698: LD_INT 3
16700: ARRAY
16701: PPUSH
16702: LD_VAR 0 2
16706: PUSH
16707: LD_INT 4
16709: ARRAY
16710: PPUSH
16711: CALL_OW 449
16715: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16716: LD_ADDR_VAR 0 3
16720: PUSH
16721: LD_VAR 0 5
16725: PPUSH
16726: LD_INT 1
16728: PPUSH
16729: CALL_OW 275
16733: PUSH
16734: LD_VAR 0 4
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: GREATEREQUAL
16743: IFFALSE 16769
16745: PUSH
16746: LD_VAR 0 5
16750: PPUSH
16751: LD_INT 2
16753: PPUSH
16754: CALL_OW 275
16758: PUSH
16759: LD_VAR 0 4
16763: PUSH
16764: LD_INT 2
16766: ARRAY
16767: GREATEREQUAL
16768: AND
16769: IFFALSE 16795
16771: PUSH
16772: LD_VAR 0 5
16776: PPUSH
16777: LD_INT 3
16779: PPUSH
16780: CALL_OW 275
16784: PUSH
16785: LD_VAR 0 4
16789: PUSH
16790: LD_INT 3
16792: ARRAY
16793: GREATEREQUAL
16794: AND
16795: ST_TO_ADDR
// end ;
16796: LD_VAR 0 3
16800: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16801: LD_INT 0
16803: PPUSH
16804: PPUSH
16805: PPUSH
16806: PPUSH
// pom := GetBase ( building ) ;
16807: LD_ADDR_VAR 0 3
16811: PUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 274
16821: ST_TO_ADDR
// if not pom then
16822: LD_VAR 0 3
16826: NOT
16827: IFFALSE 16831
// exit ;
16829: GO 17005
// btype := GetBType ( building ) ;
16831: LD_ADDR_VAR 0 5
16835: PUSH
16836: LD_VAR 0 1
16840: PPUSH
16841: CALL_OW 266
16845: ST_TO_ADDR
// if btype = b_armoury then
16846: LD_VAR 0 5
16850: PUSH
16851: LD_INT 4
16853: EQUAL
16854: IFFALSE 16864
// btype := b_barracks ;
16856: LD_ADDR_VAR 0 5
16860: PUSH
16861: LD_INT 5
16863: ST_TO_ADDR
// if btype = b_depot then
16864: LD_VAR 0 5
16868: PUSH
16869: LD_INT 0
16871: EQUAL
16872: IFFALSE 16882
// btype := b_warehouse ;
16874: LD_ADDR_VAR 0 5
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
// if btype = b_workshop then
16882: LD_VAR 0 5
16886: PUSH
16887: LD_INT 2
16889: EQUAL
16890: IFFALSE 16900
// btype := b_factory ;
16892: LD_ADDR_VAR 0 5
16896: PUSH
16897: LD_INT 3
16899: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16900: LD_ADDR_VAR 0 4
16904: PUSH
16905: LD_VAR 0 5
16909: PPUSH
16910: LD_VAR 0 1
16914: PPUSH
16915: CALL_OW 248
16919: PPUSH
16920: CALL_OW 450
16924: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16925: LD_ADDR_VAR 0 2
16929: PUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: CALL_OW 275
16942: PUSH
16943: LD_VAR 0 4
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: GREATEREQUAL
16952: IFFALSE 16978
16954: PUSH
16955: LD_VAR 0 3
16959: PPUSH
16960: LD_INT 2
16962: PPUSH
16963: CALL_OW 275
16967: PUSH
16968: LD_VAR 0 4
16972: PUSH
16973: LD_INT 2
16975: ARRAY
16976: GREATEREQUAL
16977: AND
16978: IFFALSE 17004
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 3
16988: PPUSH
16989: CALL_OW 275
16993: PUSH
16994: LD_VAR 0 4
16998: PUSH
16999: LD_INT 3
17001: ARRAY
17002: GREATEREQUAL
17003: AND
17004: ST_TO_ADDR
// end ;
17005: LD_VAR 0 2
17009: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
17010: LD_INT 0
17012: PPUSH
17013: PPUSH
17014: PPUSH
// pom := GetBase ( building ) ;
17015: LD_ADDR_VAR 0 4
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 274
17029: ST_TO_ADDR
// if not pom then
17030: LD_VAR 0 4
17034: NOT
17035: IFFALSE 17039
// exit ;
17037: GO 17144
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17039: LD_ADDR_VAR 0 5
17043: PUSH
17044: LD_VAR 0 2
17048: PPUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: CALL_OW 248
17058: PPUSH
17059: CALL_OW 450
17063: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_VAR 0 4
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: CALL_OW 275
17081: PUSH
17082: LD_VAR 0 5
17086: PUSH
17087: LD_INT 1
17089: ARRAY
17090: GREATEREQUAL
17091: IFFALSE 17117
17093: PUSH
17094: LD_VAR 0 4
17098: PPUSH
17099: LD_INT 2
17101: PPUSH
17102: CALL_OW 275
17106: PUSH
17107: LD_VAR 0 5
17111: PUSH
17112: LD_INT 2
17114: ARRAY
17115: GREATEREQUAL
17116: AND
17117: IFFALSE 17143
17119: PUSH
17120: LD_VAR 0 4
17124: PPUSH
17125: LD_INT 3
17127: PPUSH
17128: CALL_OW 275
17132: PUSH
17133: LD_VAR 0 5
17137: PUSH
17138: LD_INT 3
17140: ARRAY
17141: GREATEREQUAL
17142: AND
17143: ST_TO_ADDR
// end ;
17144: LD_VAR 0 3
17148: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
17149: LD_INT 0
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
// result := false ;
17162: LD_ADDR_VAR 0 8
17166: PUSH
17167: LD_INT 0
17169: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
17170: LD_VAR 0 5
17174: NOT
17175: IFTRUE 17184
17177: PUSH
17178: LD_VAR 0 1
17182: NOT
17183: OR
17184: IFTRUE 17193
17186: PUSH
17187: LD_VAR 0 2
17191: NOT
17192: OR
17193: IFTRUE 17202
17195: PUSH
17196: LD_VAR 0 3
17200: NOT
17201: OR
17202: IFFALSE 17206
// exit ;
17204: GO 18032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
17206: LD_ADDR_VAR 0 14
17210: PUSH
17211: LD_VAR 0 1
17215: PPUSH
17216: LD_VAR 0 2
17220: PPUSH
17221: LD_VAR 0 3
17225: PPUSH
17226: LD_VAR 0 4
17230: PPUSH
17231: LD_VAR 0 5
17235: PUSH
17236: LD_INT 1
17238: ARRAY
17239: PPUSH
17240: CALL_OW 248
17244: PPUSH
17245: LD_INT 0
17247: PPUSH
17248: CALL 19313 0 6
17252: ST_TO_ADDR
// if not hexes then
17253: LD_VAR 0 14
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 18032
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17262: LD_ADDR_VAR 0 17
17266: PUSH
17267: LD_VAR 0 5
17271: PPUSH
17272: LD_INT 22
17274: PUSH
17275: LD_VAR 0 13
17279: PPUSH
17280: CALL_OW 255
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: LD_INT 0
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 30
17304: PUSH
17305: LD_INT 1
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 72
17325: ST_TO_ADDR
// for i = 1 to hexes do
17326: LD_ADDR_VAR 0 9
17330: PUSH
17331: DOUBLE
17332: LD_INT 1
17334: DEC
17335: ST_TO_ADDR
17336: LD_VAR 0 14
17340: PUSH
17341: FOR_TO
17342: IFFALSE 18030
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17344: LD_ADDR_VAR 0 13
17348: PUSH
17349: LD_VAR 0 14
17353: PUSH
17354: LD_VAR 0 9
17358: ARRAY
17359: PUSH
17360: LD_INT 1
17362: ARRAY
17363: PPUSH
17364: LD_VAR 0 14
17368: PUSH
17369: LD_VAR 0 9
17373: ARRAY
17374: PUSH
17375: LD_INT 2
17377: ARRAY
17378: PPUSH
17379: CALL_OW 428
17383: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17384: LD_VAR 0 14
17388: PUSH
17389: LD_VAR 0 9
17393: ARRAY
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: PPUSH
17399: LD_VAR 0 14
17403: PUSH
17404: LD_VAR 0 9
17408: ARRAY
17409: PUSH
17410: LD_INT 2
17412: ARRAY
17413: PPUSH
17414: CALL_OW 351
17418: IFTRUE 17457
17420: PUSH
17421: LD_VAR 0 14
17425: PUSH
17426: LD_VAR 0 9
17430: ARRAY
17431: PUSH
17432: LD_INT 1
17434: ARRAY
17435: PPUSH
17436: LD_VAR 0 14
17440: PUSH
17441: LD_VAR 0 9
17445: ARRAY
17446: PUSH
17447: LD_INT 2
17449: ARRAY
17450: PPUSH
17451: CALL_OW 488
17455: NOT
17456: OR
17457: IFTRUE 17474
17459: PUSH
17460: LD_VAR 0 13
17464: PPUSH
17465: CALL_OW 247
17469: PUSH
17470: LD_INT 3
17472: EQUAL
17473: OR
17474: IFFALSE 17480
// exit ;
17476: POP
17477: POP
17478: GO 18032
// if not tmp then
17480: LD_VAR 0 13
17484: NOT
17485: IFFALSE 17489
// continue ;
17487: GO 17341
// result := true ;
17489: LD_ADDR_VAR 0 8
17493: PUSH
17494: LD_INT 1
17496: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17497: LD_VAR 0 6
17501: IFFALSE 17518
17503: PUSH
17504: LD_VAR 0 13
17508: PPUSH
17509: CALL_OW 247
17513: PUSH
17514: LD_INT 2
17516: EQUAL
17517: AND
17518: IFFALSE 17535
17520: PUSH
17521: LD_VAR 0 13
17525: PPUSH
17526: CALL_OW 263
17530: PUSH
17531: LD_INT 1
17533: EQUAL
17534: AND
17535: IFFALSE 17699
// begin if IsDrivenBy ( tmp ) then
17537: LD_VAR 0 13
17541: PPUSH
17542: CALL_OW 311
17546: IFFALSE 17550
// continue ;
17548: GO 17341
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17550: LD_VAR 0 6
17554: PPUSH
17555: LD_INT 3
17557: PUSH
17558: LD_INT 60
17560: PUSH
17561: EMPTY
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: LD_INT 55
17573: PUSH
17574: EMPTY
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 72
17589: IFFALSE 17697
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17591: LD_ADDR_VAR 0 18
17595: PUSH
17596: LD_VAR 0 6
17600: PPUSH
17601: LD_INT 3
17603: PUSH
17604: LD_INT 60
17606: PUSH
17607: EMPTY
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 3
17616: PUSH
17617: LD_INT 55
17619: PUSH
17620: EMPTY
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PPUSH
17631: CALL_OW 72
17635: PUSH
17636: LD_INT 1
17638: ARRAY
17639: ST_TO_ADDR
// if IsInUnit ( driver ) then
17640: LD_VAR 0 18
17644: PPUSH
17645: CALL_OW 310
17649: IFFALSE 17660
// ComExit ( driver ) ;
17651: LD_VAR 0 18
17655: PPUSH
17656: CALL 43303 0 1
// AddComEnterUnit ( driver , tmp ) ;
17660: LD_VAR 0 18
17664: PPUSH
17665: LD_VAR 0 13
17669: PPUSH
17670: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17674: LD_VAR 0 18
17678: PPUSH
17679: LD_VAR 0 7
17683: PPUSH
17684: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17688: LD_VAR 0 18
17692: PPUSH
17693: CALL_OW 181
// end ; continue ;
17697: GO 17341
// end ; if not cleaners or not tmp in cleaners then
17699: LD_VAR 0 6
17703: NOT
17704: IFTRUE 17719
17706: PUSH
17707: LD_VAR 0 13
17711: PUSH
17712: LD_VAR 0 6
17716: IN
17717: NOT
17718: OR
17719: IFFALSE 18028
// begin if dep then
17721: LD_VAR 0 17
17725: IFFALSE 17861
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17727: LD_ADDR_VAR 0 16
17731: PUSH
17732: LD_VAR 0 17
17736: PUSH
17737: LD_INT 1
17739: ARRAY
17740: PPUSH
17741: CALL_OW 250
17745: PPUSH
17746: LD_VAR 0 17
17750: PUSH
17751: LD_INT 1
17753: ARRAY
17754: PPUSH
17755: CALL_OW 254
17759: PPUSH
17760: LD_INT 5
17762: PPUSH
17763: CALL_OW 272
17767: PUSH
17768: LD_VAR 0 17
17772: PUSH
17773: LD_INT 1
17775: ARRAY
17776: PPUSH
17777: CALL_OW 251
17781: PPUSH
17782: LD_VAR 0 17
17786: PUSH
17787: LD_INT 1
17789: ARRAY
17790: PPUSH
17791: CALL_OW 254
17795: PPUSH
17796: LD_INT 5
17798: PPUSH
17799: CALL_OW 273
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17808: LD_VAR 0 16
17812: PUSH
17813: LD_INT 1
17815: ARRAY
17816: PPUSH
17817: LD_VAR 0 16
17821: PUSH
17822: LD_INT 2
17824: ARRAY
17825: PPUSH
17826: CALL_OW 488
17830: IFFALSE 17861
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17832: LD_VAR 0 13
17836: PPUSH
17837: LD_VAR 0 16
17841: PUSH
17842: LD_INT 1
17844: ARRAY
17845: PPUSH
17846: LD_VAR 0 16
17850: PUSH
17851: LD_INT 2
17853: ARRAY
17854: PPUSH
17855: CALL_OW 111
// continue ;
17859: GO 17341
// end ; end ; r := GetDir ( tmp ) ;
17861: LD_ADDR_VAR 0 15
17865: PUSH
17866: LD_VAR 0 13
17870: PPUSH
17871: CALL_OW 254
17875: ST_TO_ADDR
// if r = 5 then
17876: LD_VAR 0 15
17880: PUSH
17881: LD_INT 5
17883: EQUAL
17884: IFFALSE 17894
// r := 0 ;
17886: LD_ADDR_VAR 0 15
17890: PUSH
17891: LD_INT 0
17893: ST_TO_ADDR
// for j = r to 5 do
17894: LD_ADDR_VAR 0 10
17898: PUSH
17899: DOUBLE
17900: LD_VAR 0 15
17904: DEC
17905: ST_TO_ADDR
17906: LD_INT 5
17908: PUSH
17909: FOR_TO
17910: IFFALSE 18026
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17912: LD_ADDR_VAR 0 11
17916: PUSH
17917: LD_VAR 0 13
17921: PPUSH
17922: CALL_OW 250
17926: PPUSH
17927: LD_VAR 0 10
17931: PPUSH
17932: LD_INT 2
17934: PPUSH
17935: CALL_OW 272
17939: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17940: LD_ADDR_VAR 0 12
17944: PUSH
17945: LD_VAR 0 13
17949: PPUSH
17950: CALL_OW 251
17954: PPUSH
17955: LD_VAR 0 10
17959: PPUSH
17960: LD_INT 2
17962: PPUSH
17963: CALL_OW 273
17967: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17968: LD_VAR 0 11
17972: PPUSH
17973: LD_VAR 0 12
17977: PPUSH
17978: CALL_OW 488
17982: IFFALSE 18001
17984: PUSH
17985: LD_VAR 0 11
17989: PPUSH
17990: LD_VAR 0 12
17994: PPUSH
17995: CALL_OW 428
17999: NOT
18000: AND
18001: IFFALSE 18024
// begin ComMoveXY ( tmp , _x , _y ) ;
18003: LD_VAR 0 13
18007: PPUSH
18008: LD_VAR 0 11
18012: PPUSH
18013: LD_VAR 0 12
18017: PPUSH
18018: CALL_OW 111
// break ;
18022: GO 18026
// end ; end ;
18024: GO 17909
18026: POP
18027: POP
// end ; end ;
18028: GO 17341
18030: POP
18031: POP
// end ;
18032: LD_VAR 0 8
18036: RET
// export function BuildingTechInvented ( side , btype ) ; begin
18037: LD_INT 0
18039: PPUSH
// result := true ;
18040: LD_ADDR_VAR 0 3
18044: PUSH
18045: LD_INT 1
18047: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
18048: LD_VAR 0 2
18052: PUSH
18053: LD_INT 24
18055: DOUBLE
18056: EQUAL
18057: IFTRUE 18067
18059: LD_INT 33
18061: DOUBLE
18062: EQUAL
18063: IFTRUE 18067
18065: GO 18092
18067: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
18068: LD_ADDR_VAR 0 3
18072: PUSH
18073: LD_INT 32
18075: PPUSH
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 321
18085: PUSH
18086: LD_INT 2
18088: EQUAL
18089: ST_TO_ADDR
18090: GO 18408
18092: LD_INT 20
18094: DOUBLE
18095: EQUAL
18096: IFTRUE 18100
18098: GO 18125
18100: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
18101: LD_ADDR_VAR 0 3
18105: PUSH
18106: LD_INT 6
18108: PPUSH
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 321
18118: PUSH
18119: LD_INT 2
18121: EQUAL
18122: ST_TO_ADDR
18123: GO 18408
18125: LD_INT 22
18127: DOUBLE
18128: EQUAL
18129: IFTRUE 18139
18131: LD_INT 36
18133: DOUBLE
18134: EQUAL
18135: IFTRUE 18139
18137: GO 18164
18139: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
18140: LD_ADDR_VAR 0 3
18144: PUSH
18145: LD_INT 15
18147: PPUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 321
18157: PUSH
18158: LD_INT 2
18160: EQUAL
18161: ST_TO_ADDR
18162: GO 18408
18164: LD_INT 30
18166: DOUBLE
18167: EQUAL
18168: IFTRUE 18172
18170: GO 18197
18172: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
18173: LD_ADDR_VAR 0 3
18177: PUSH
18178: LD_INT 20
18180: PPUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 321
18190: PUSH
18191: LD_INT 2
18193: EQUAL
18194: ST_TO_ADDR
18195: GO 18408
18197: LD_INT 28
18199: DOUBLE
18200: EQUAL
18201: IFTRUE 18211
18203: LD_INT 21
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18236
18211: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
18212: LD_ADDR_VAR 0 3
18216: PUSH
18217: LD_INT 21
18219: PPUSH
18220: LD_VAR 0 1
18224: PPUSH
18225: CALL_OW 321
18229: PUSH
18230: LD_INT 2
18232: EQUAL
18233: ST_TO_ADDR
18234: GO 18408
18236: LD_INT 16
18238: DOUBLE
18239: EQUAL
18240: IFTRUE 18244
18242: GO 18269
18244: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
18245: LD_ADDR_VAR 0 3
18249: PUSH
18250: LD_INT 84
18252: PPUSH
18253: LD_VAR 0 1
18257: PPUSH
18258: CALL_OW 321
18262: PUSH
18263: LD_INT 2
18265: EQUAL
18266: ST_TO_ADDR
18267: GO 18408
18269: LD_INT 19
18271: DOUBLE
18272: EQUAL
18273: IFTRUE 18283
18275: LD_INT 23
18277: DOUBLE
18278: EQUAL
18279: IFTRUE 18283
18281: GO 18308
18283: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18284: LD_ADDR_VAR 0 3
18288: PUSH
18289: LD_INT 83
18291: PPUSH
18292: LD_VAR 0 1
18296: PPUSH
18297: CALL_OW 321
18301: PUSH
18302: LD_INT 2
18304: EQUAL
18305: ST_TO_ADDR
18306: GO 18408
18308: LD_INT 17
18310: DOUBLE
18311: EQUAL
18312: IFTRUE 18316
18314: GO 18341
18316: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18317: LD_ADDR_VAR 0 3
18321: PUSH
18322: LD_INT 39
18324: PPUSH
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 321
18334: PUSH
18335: LD_INT 2
18337: EQUAL
18338: ST_TO_ADDR
18339: GO 18408
18341: LD_INT 18
18343: DOUBLE
18344: EQUAL
18345: IFTRUE 18349
18347: GO 18374
18349: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18350: LD_ADDR_VAR 0 3
18354: PUSH
18355: LD_INT 40
18357: PPUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 321
18367: PUSH
18368: LD_INT 2
18370: EQUAL
18371: ST_TO_ADDR
18372: GO 18408
18374: LD_INT 27
18376: DOUBLE
18377: EQUAL
18378: IFTRUE 18382
18380: GO 18407
18382: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18383: LD_ADDR_VAR 0 3
18387: PUSH
18388: LD_INT 35
18390: PPUSH
18391: LD_VAR 0 1
18395: PPUSH
18396: CALL_OW 321
18400: PUSH
18401: LD_INT 2
18403: EQUAL
18404: ST_TO_ADDR
18405: GO 18408
18407: POP
// end ;
18408: LD_VAR 0 3
18412: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18413: LD_INT 0
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
18425: PPUSH
// result := false ;
18426: LD_ADDR_VAR 0 6
18430: PUSH
18431: LD_INT 0
18433: ST_TO_ADDR
// if btype = b_depot then
18434: LD_VAR 0 2
18438: PUSH
18439: LD_INT 0
18441: EQUAL
18442: IFFALSE 18454
// begin result := true ;
18444: LD_ADDR_VAR 0 6
18448: PUSH
18449: LD_INT 1
18451: ST_TO_ADDR
// exit ;
18452: GO 19308
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18454: LD_VAR 0 1
18458: NOT
18459: IFTRUE 18484
18461: PUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 266
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: IN
18482: NOT
18483: OR
18484: IFTRUE 18493
18486: PUSH
18487: LD_VAR 0 2
18491: NOT
18492: OR
18493: IFTRUE 18529
18495: PUSH
18496: LD_VAR 0 5
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: LD_INT 4
18515: PUSH
18516: LD_INT 5
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: IN
18527: NOT
18528: OR
18529: IFTRUE 18548
18531: PUSH
18532: LD_VAR 0 3
18536: PPUSH
18537: LD_VAR 0 4
18541: PPUSH
18542: CALL_OW 488
18546: NOT
18547: OR
18548: IFFALSE 18552
// exit ;
18550: GO 19308
// side := GetSide ( depot ) ;
18552: LD_ADDR_VAR 0 9
18556: PUSH
18557: LD_VAR 0 1
18561: PPUSH
18562: CALL_OW 255
18566: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18567: LD_VAR 0 9
18571: PPUSH
18572: LD_VAR 0 2
18576: PPUSH
18577: CALL 18037 0 2
18581: NOT
18582: IFFALSE 18586
// exit ;
18584: GO 19308
// pom := GetBase ( depot ) ;
18586: LD_ADDR_VAR 0 10
18590: PUSH
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 274
18600: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18601: LD_ADDR_VAR 0 11
18605: PUSH
18606: LD_VAR 0 2
18610: PPUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 248
18620: PPUSH
18621: CALL_OW 450
18625: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18626: LD_VAR 0 10
18630: PPUSH
18631: LD_INT 1
18633: PPUSH
18634: CALL_OW 275
18638: PUSH
18639: LD_VAR 0 11
18643: PUSH
18644: LD_INT 1
18646: ARRAY
18647: GREATEREQUAL
18648: IFFALSE 18674
18650: PUSH
18651: LD_VAR 0 10
18655: PPUSH
18656: LD_INT 2
18658: PPUSH
18659: CALL_OW 275
18663: PUSH
18664: LD_VAR 0 11
18668: PUSH
18669: LD_INT 2
18671: ARRAY
18672: GREATEREQUAL
18673: AND
18674: IFFALSE 18700
18676: PUSH
18677: LD_VAR 0 10
18681: PPUSH
18682: LD_INT 3
18684: PPUSH
18685: CALL_OW 275
18689: PUSH
18690: LD_VAR 0 11
18694: PUSH
18695: LD_INT 3
18697: ARRAY
18698: GREATEREQUAL
18699: AND
18700: NOT
18701: IFFALSE 18705
// exit ;
18703: GO 19308
// if GetBType ( depot ) = b_depot then
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 266
18714: PUSH
18715: LD_INT 0
18717: EQUAL
18718: IFFALSE 18730
// dist := 28 else
18720: LD_ADDR_VAR 0 14
18724: PUSH
18725: LD_INT 28
18727: ST_TO_ADDR
18728: GO 18738
// dist := 36 ;
18730: LD_ADDR_VAR 0 14
18734: PUSH
18735: LD_INT 36
18737: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18738: LD_VAR 0 1
18742: PPUSH
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_VAR 0 4
18752: PPUSH
18753: CALL_OW 297
18757: PUSH
18758: LD_VAR 0 14
18762: GREATER
18763: IFFALSE 18767
// exit ;
18765: GO 19308
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18767: LD_ADDR_VAR 0 12
18771: PUSH
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_VAR 0 3
18781: PPUSH
18782: LD_VAR 0 4
18786: PPUSH
18787: LD_VAR 0 5
18791: PPUSH
18792: LD_VAR 0 1
18796: PPUSH
18797: CALL_OW 248
18801: PPUSH
18802: LD_INT 0
18804: PPUSH
18805: CALL 19313 0 6
18809: ST_TO_ADDR
// if not hexes then
18810: LD_VAR 0 12
18814: NOT
18815: IFFALSE 18819
// exit ;
18817: GO 19308
// hex := GetHexInfo ( x , y ) ;
18819: LD_ADDR_VAR 0 15
18823: PUSH
18824: LD_VAR 0 3
18828: PPUSH
18829: LD_VAR 0 4
18833: PPUSH
18834: CALL_OW 546
18838: ST_TO_ADDR
// if hex [ 1 ] then
18839: LD_VAR 0 15
18843: PUSH
18844: LD_INT 1
18846: ARRAY
18847: IFFALSE 18851
// exit ;
18849: GO 19308
// height := hex [ 2 ] ;
18851: LD_ADDR_VAR 0 13
18855: PUSH
18856: LD_VAR 0 15
18860: PUSH
18861: LD_INT 2
18863: ARRAY
18864: ST_TO_ADDR
// for i = 1 to hexes do
18865: LD_ADDR_VAR 0 7
18869: PUSH
18870: DOUBLE
18871: LD_INT 1
18873: DEC
18874: ST_TO_ADDR
18875: LD_VAR 0 12
18879: PUSH
18880: FOR_TO
18881: IFFALSE 19225
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18883: LD_VAR 0 12
18887: PUSH
18888: LD_VAR 0 7
18892: ARRAY
18893: PUSH
18894: LD_INT 1
18896: ARRAY
18897: PPUSH
18898: LD_VAR 0 12
18902: PUSH
18903: LD_VAR 0 7
18907: ARRAY
18908: PUSH
18909: LD_INT 2
18911: ARRAY
18912: PPUSH
18913: CALL_OW 488
18917: NOT
18918: IFTRUE 18960
18920: PUSH
18921: LD_VAR 0 12
18925: PUSH
18926: LD_VAR 0 7
18930: ARRAY
18931: PUSH
18932: LD_INT 1
18934: ARRAY
18935: PPUSH
18936: LD_VAR 0 12
18940: PUSH
18941: LD_VAR 0 7
18945: ARRAY
18946: PUSH
18947: LD_INT 2
18949: ARRAY
18950: PPUSH
18951: CALL_OW 428
18955: PUSH
18956: LD_INT 0
18958: GREATER
18959: OR
18960: IFTRUE 18998
18962: PUSH
18963: LD_VAR 0 12
18967: PUSH
18968: LD_VAR 0 7
18972: ARRAY
18973: PUSH
18974: LD_INT 1
18976: ARRAY
18977: PPUSH
18978: LD_VAR 0 12
18982: PUSH
18983: LD_VAR 0 7
18987: ARRAY
18988: PUSH
18989: LD_INT 2
18991: ARRAY
18992: PPUSH
18993: CALL_OW 351
18997: OR
18998: IFFALSE 19004
// exit ;
19000: POP
19001: POP
19002: GO 19308
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19004: LD_ADDR_VAR 0 8
19008: PUSH
19009: LD_VAR 0 12
19013: PUSH
19014: LD_VAR 0 7
19018: ARRAY
19019: PUSH
19020: LD_INT 1
19022: ARRAY
19023: PPUSH
19024: LD_VAR 0 12
19028: PUSH
19029: LD_VAR 0 7
19033: ARRAY
19034: PUSH
19035: LD_INT 2
19037: ARRAY
19038: PPUSH
19039: CALL_OW 546
19043: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
19044: LD_VAR 0 8
19048: PUSH
19049: LD_INT 1
19051: ARRAY
19052: IFTRUE 19074
19054: PUSH
19055: LD_VAR 0 8
19059: PUSH
19060: LD_INT 2
19062: ARRAY
19063: PUSH
19064: LD_VAR 0 13
19068: PUSH
19069: LD_INT 2
19071: PLUS
19072: GREATER
19073: OR
19074: IFTRUE 19096
19076: PUSH
19077: LD_VAR 0 8
19081: PUSH
19082: LD_INT 2
19084: ARRAY
19085: PUSH
19086: LD_VAR 0 13
19090: PUSH
19091: LD_INT 2
19093: MINUS
19094: LESS
19095: OR
19096: IFTRUE 19164
19098: PUSH
19099: LD_VAR 0 8
19103: PUSH
19104: LD_INT 3
19106: ARRAY
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: LD_INT 8
19113: PUSH
19114: LD_INT 9
19116: PUSH
19117: LD_INT 10
19119: PUSH
19120: LD_INT 11
19122: PUSH
19123: LD_INT 12
19125: PUSH
19126: LD_INT 13
19128: PUSH
19129: LD_INT 16
19131: PUSH
19132: LD_INT 17
19134: PUSH
19135: LD_INT 18
19137: PUSH
19138: LD_INT 19
19140: PUSH
19141: LD_INT 20
19143: PUSH
19144: LD_INT 21
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: IN
19162: NOT
19163: OR
19164: IFTRUE 19177
19166: PUSH
19167: LD_VAR 0 8
19171: PUSH
19172: LD_INT 5
19174: ARRAY
19175: NOT
19176: OR
19177: IFTRUE 19217
19179: PUSH
19180: LD_VAR 0 8
19184: PUSH
19185: LD_INT 6
19187: ARRAY
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 7
19197: PUSH
19198: LD_INT 9
19200: PUSH
19201: LD_INT 10
19203: PUSH
19204: LD_INT 11
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: IN
19215: NOT
19216: OR
19217: IFFALSE 19223
// exit ;
19219: POP
19220: POP
19221: GO 19308
// end ;
19223: GO 18880
19225: POP
19226: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
19227: LD_VAR 0 9
19231: PPUSH
19232: LD_VAR 0 3
19236: PPUSH
19237: LD_VAR 0 4
19241: PPUSH
19242: LD_INT 20
19244: PPUSH
19245: CALL 11127 0 4
19249: PUSH
19250: LD_INT 4
19252: ARRAY
19253: IFFALSE 19257
// exit ;
19255: GO 19308
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
19257: LD_VAR 0 2
19261: PUSH
19262: LD_INT 29
19264: PUSH
19265: LD_INT 30
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: IN
19272: IFFALSE 19296
19274: PUSH
19275: LD_VAR 0 3
19279: PPUSH
19280: LD_VAR 0 4
19284: PPUSH
19285: LD_VAR 0 9
19289: PPUSH
19290: CALL_OW 440
19294: NOT
19295: AND
19296: IFFALSE 19300
// exit ;
19298: GO 19308
// result := true ;
19300: LD_ADDR_VAR 0 6
19304: PUSH
19305: LD_INT 1
19307: ST_TO_ADDR
// end ;
19308: LD_VAR 0 6
19312: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19313: LD_INT 0
19315: PPUSH
19316: PPUSH
19317: PPUSH
19318: PPUSH
19319: PPUSH
19320: PPUSH
19321: PPUSH
19322: PPUSH
19323: PPUSH
19324: PPUSH
19325: PPUSH
19326: PPUSH
19327: PPUSH
19328: PPUSH
19329: PPUSH
19330: PPUSH
19331: PPUSH
19332: PPUSH
19333: PPUSH
19334: PPUSH
19335: PPUSH
19336: PPUSH
19337: PPUSH
19338: PPUSH
19339: PPUSH
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
19344: PPUSH
19345: PPUSH
19346: PPUSH
19347: PPUSH
19348: PPUSH
19349: PPUSH
19350: PPUSH
19351: PPUSH
19352: PPUSH
19353: PPUSH
19354: PPUSH
19355: PPUSH
19356: PPUSH
19357: PPUSH
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
19362: PPUSH
19363: PPUSH
19364: PPUSH
19365: PPUSH
19366: PPUSH
19367: PPUSH
19368: PPUSH
19369: PPUSH
19370: PPUSH
19371: PPUSH
19372: PPUSH
// result = [ ] ;
19373: LD_ADDR_VAR 0 7
19377: PUSH
19378: EMPTY
19379: ST_TO_ADDR
// temp_list = [ ] ;
19380: LD_ADDR_VAR 0 9
19384: PUSH
19385: EMPTY
19386: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19387: LD_VAR 0 4
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 3
19403: PUSH
19404: LD_INT 4
19406: PUSH
19407: LD_INT 5
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: IN
19418: NOT
19419: IFTRUE 19462
19421: PUSH
19422: LD_VAR 0 1
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: IN
19437: IFFALSE 19461
19439: PUSH
19440: LD_VAR 0 5
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 3
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: LIST
19458: IN
19459: NOT
19460: AND
19461: OR
19462: IFFALSE 19466
// exit ;
19464: GO 37865
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19466: LD_VAR 0 1
19470: PUSH
19471: LD_INT 6
19473: PUSH
19474: LD_INT 7
19476: PUSH
19477: LD_INT 8
19479: PUSH
19480: LD_INT 13
19482: PUSH
19483: LD_INT 12
19485: PUSH
19486: LD_INT 15
19488: PUSH
19489: LD_INT 11
19491: PUSH
19492: LD_INT 14
19494: PUSH
19495: LD_INT 10
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: IN
19509: IFFALSE 19519
// btype = b_lab ;
19511: LD_ADDR_VAR 0 1
19515: PUSH
19516: LD_INT 6
19518: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19519: LD_VAR 0 6
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: IN
19538: NOT
19539: IFTRUE 19607
19541: PUSH
19542: LD_VAR 0 1
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: LD_INT 3
19558: PUSH
19559: LD_INT 6
19561: PUSH
19562: LD_INT 36
19564: PUSH
19565: LD_INT 4
19567: PUSH
19568: LD_INT 5
19570: PUSH
19571: LD_INT 31
19573: PUSH
19574: LD_INT 32
19576: PUSH
19577: LD_INT 33
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: IN
19593: NOT
19594: IFFALSE 19606
19596: PUSH
19597: LD_VAR 0 6
19601: PUSH
19602: LD_INT 1
19604: EQUAL
19605: AND
19606: OR
19607: IFTRUE 19639
19609: PUSH
19610: LD_VAR 0 1
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: IN
19625: NOT
19626: IFFALSE 19638
19628: PUSH
19629: LD_VAR 0 6
19633: PUSH
19634: LD_INT 2
19636: EQUAL
19637: AND
19638: OR
19639: IFFALSE 19649
// mode = 0 ;
19641: LD_ADDR_VAR 0 6
19645: PUSH
19646: LD_INT 0
19648: ST_TO_ADDR
// case mode of 0 :
19649: LD_VAR 0 6
19653: PUSH
19654: LD_INT 0
19656: DOUBLE
19657: EQUAL
19658: IFTRUE 19662
19660: GO 31115
19662: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19663: LD_ADDR_VAR 0 11
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: NEG
19745: PUSH
19746: LD_INT 2
19748: NEG
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 0
19756: PUSH
19757: LD_INT 2
19759: NEG
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 3
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: LD_INT 3
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19856: LD_ADDR_VAR 0 12
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: LD_INT 0
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: NEG
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 3
20013: NEG
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 3
20024: NEG
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20052: LD_ADDR_VAR 0 13
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 0
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 1
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: PUSH
20135: LD_INT 2
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 2
20187: NEG
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: NEG
20200: PUSH
20201: LD_INT 3
20203: NEG
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 3
20211: NEG
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 3
20223: NEG
20224: PUSH
20225: LD_INT 3
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20251: LD_ADDR_VAR 0 14
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: LD_INT 1
20271: NEG
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 1
20309: NEG
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: LD_INT 2
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: LD_INT 2
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: LD_INT 3
20401: NEG
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: LD_INT 3
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: LD_INT 2
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20447: LD_ADDR_VAR 0 15
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: LD_INT 1
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: NEG
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 2
20570: NEG
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: LD_INT 1
20585: NEG
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 3
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 3
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20640: LD_ADDR_VAR 0 16
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 2
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 1
20753: PUSH
20754: LD_INT 2
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 2
20775: NEG
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 3
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 3
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: LD_INT 3
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20833: LD_ADDR_VAR 0 17
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: LD_INT 0
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: NEG
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: LD_INT 1
20906: NEG
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: LD_INT 2
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: LD_INT 2
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 2
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: LD_INT 2
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: LD_INT 2
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: LD_INT 0
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 2
21020: NEG
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: NEG
21033: PUSH
21034: LD_INT 2
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21063: LD_ADDR_VAR 0 18
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 2
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: NEG
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 2
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21293: LD_ADDR_VAR 0 19
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 1
21331: PUSH
21332: LD_INT 1
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: LD_INT 2
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: LD_INT 2
21389: NEG
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: LD_INT 2
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: NEG
21470: PUSH
21471: LD_INT 0
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: NEG
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 2
21492: NEG
21493: PUSH
21494: LD_INT 2
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21523: LD_ADDR_VAR 0 20
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 0
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: LD_INT 0
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 1
21561: PUSH
21562: LD_INT 1
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 0
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 2
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 0
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: NEG
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: NEG
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 2
21710: NEG
21711: PUSH
21712: LD_INT 1
21714: NEG
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: LD_INT 2
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21753: LD_ADDR_VAR 0 21
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: NEG
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 2
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: NEG
21941: PUSH
21942: LD_INT 1
21944: NEG
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: NEG
21953: PUSH
21954: LD_INT 2
21956: NEG
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21983: LD_ADDR_VAR 0 22
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 0
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: NEG
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 2
22159: NEG
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: NEG
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22213: LD_ADDR_VAR 0 23
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 2
22400: NEG
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 2
22412: NEG
22413: PUSH
22414: LD_INT 2
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 2
22424: NEG
22425: PUSH
22426: LD_INT 3
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: LD_INT 3
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 2
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 1
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22493: LD_ADDR_VAR 0 24
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: LD_INT 1
22513: NEG
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 1
22574: NEG
22575: PUSH
22576: LD_INT 2
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 2
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: LD_INT 1
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: NEG
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: LD_INT 2
22696: NEG
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 1
22704: PUSH
22705: LD_INT 2
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 3
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: LD_INT 2
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22769: LD_ADDR_VAR 0 25
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: LD_INT 1
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: LD_INT 2
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: LD_INT 2
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 2
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: NEG
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 2
22945: NEG
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 2
22968: NEG
22969: PUSH
22970: LD_INT 2
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 3
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: LD_INT 3
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: LD_INT 3
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23043: LD_ADDR_VAR 0 26
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 0
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 0
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: NEG
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: NEG
23113: PUSH
23114: LD_INT 1
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: LD_INT 2
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: LD_INT 2
23139: NEG
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: LD_INT 0
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 1
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 2
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 2
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: NEG
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 2
23242: NEG
23243: PUSH
23244: LD_INT 2
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: LD_INT 3
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: LD_INT 3
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23319: LD_ADDR_VAR 0 27
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 2
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: LD_INT 2
23415: NEG
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 2
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: LD_INT 2
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 3
23552: NEG
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 3
23564: NEG
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23599: LD_ADDR_VAR 0 28
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 0
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: LD_INT 0
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: NEG
23681: PUSH
23682: LD_INT 2
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 2
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 2
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 2
23786: NEG
23787: PUSH
23788: LD_INT 1
23790: NEG
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: NEG
23799: PUSH
23800: LD_INT 2
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 2
23810: NEG
23811: PUSH
23812: LD_INT 3
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: LD_INT 3
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 3
23834: NEG
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: NEG
23847: PUSH
23848: LD_INT 2
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23881: LD_ADDR_VAR 0 29
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: LD_INT 2
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 0
23974: PUSH
23975: LD_INT 2
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 2
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 2
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 2
24059: NEG
24060: PUSH
24061: LD_INT 2
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: NEG
24072: PUSH
24073: LD_INT 3
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 3
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 3
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 3
24125: NEG
24126: PUSH
24127: LD_INT 2
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24160: LD_ADDR_VAR 0 30
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: LD_INT 2
24245: NEG
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 3
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 3
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 2
24382: PUSH
24383: LD_INT 3
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 2
24392: NEG
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24438: LD_ADDR_VAR 0 31
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: NEG
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 2
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 2
24603: NEG
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: NEG
24616: PUSH
24617: LD_INT 2
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: NEG
24628: PUSH
24629: LD_INT 3
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: LD_INT 3
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 3
24681: NEG
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24716: LD_ADDR_VAR 0 32
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 2
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 3
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 3
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 3
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 2
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 3
24959: NEG
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24994: LD_ADDR_VAR 0 33
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: LD_INT 2
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 2
25160: NEG
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 2
25172: NEG
25173: PUSH
25174: LD_INT 2
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 2
25184: NEG
25185: PUSH
25186: LD_INT 3
25188: NEG
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 3
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 3
25238: NEG
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25273: LD_ADDR_VAR 0 34
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: LD_INT 1
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: PUSH
25356: LD_INT 2
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 2
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: LD_INT 2
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: LD_INT 2
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 2
25429: NEG
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: NEG
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 2
25452: NEG
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 3
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 2
25507: NEG
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 3
25518: NEG
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25553: LD_ADDR_VAR 0 35
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25665: LD_ADDR_VAR 0 36
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: LD_INT 2
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25777: LD_ADDR_VAR 0 37
25781: PUSH
25782: LD_INT 0
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: LD_INT 1
25850: NEG
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25889: LD_ADDR_VAR 0 38
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: NEG
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26001: LD_ADDR_VAR 0 39
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26113: LD_ADDR_VAR 0 40
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26225: LD_ADDR_VAR 0 41
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 2
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: NEG
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: LD_INT 3
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 3
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 3
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 3
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 3
26468: PUSH
26469: LD_INT 3
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 3
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 2
26488: NEG
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 3
26499: NEG
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 3
26510: NEG
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 3
26522: NEG
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 3
26534: NEG
26535: PUSH
26536: LD_INT 3
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26575: LD_ADDR_VAR 0 42
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 2
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 2
26741: NEG
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: NEG
26754: PUSH
26755: LD_INT 2
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: NEG
26766: PUSH
26767: LD_INT 3
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 3
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 3
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 3
26821: PUSH
26822: LD_INT 3
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 3
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 3
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 3
26872: NEG
26873: PUSH
26874: LD_INT 2
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 3
26884: NEG
26885: PUSH
26886: LD_INT 3
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26925: LD_ADDR_VAR 0 43
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 2
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 2
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: LD_INT 3
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 3
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 2
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 3
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 3
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 2
27210: NEG
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 3
27221: NEG
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 3
27232: NEG
27233: PUSH
27234: LD_INT 1
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27273: LD_ADDR_VAR 0 44
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 2
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 2
27451: NEG
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: LD_INT 3
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 3
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 3
27547: NEG
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 3
27558: NEG
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 3
27570: NEG
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 3
27582: NEG
27583: PUSH
27584: LD_INT 3
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27623: LD_ADDR_VAR 0 45
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: LD_INT 1
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: NEG
27705: PUSH
27706: LD_INT 2
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: NEG
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 2
27801: NEG
27802: PUSH
27803: LD_INT 2
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: LD_INT 3
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: LD_INT 3
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 3
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 2
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 3
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: LD_INT 3
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 3
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: LD_INT 3
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 3
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 3
27920: NEG
27921: PUSH
27922: LD_INT 2
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 3
27932: NEG
27933: PUSH
27934: LD_INT 3
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27973: LD_ADDR_VAR 0 46
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: LD_INT 2
28058: NEG
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: LD_INT 2
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 2
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 3
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 3
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 3
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 3
28269: NEG
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 3
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28321: LD_ADDR_VAR 0 47
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 2
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 2
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: LD_INT 2
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28472: LD_ADDR_VAR 0 48
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28619: LD_ADDR_VAR 0 49
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28763: LD_ADDR_VAR 0 50
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28907: LD_ADDR_VAR 0 51
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29054: LD_ADDR_VAR 0 52
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 1
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: LD_INT 2
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 2
29169: NEG
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29205: LD_ADDR_VAR 0 53
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: LD_INT 2
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: LD_INT 2
29408: NEG
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29435: LD_ADDR_VAR 0 54
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: LD_INT 2
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29665: LD_ADDR_VAR 0 55
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: NEG
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 2
29864: NEG
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29895: LD_ADDR_VAR 0 56
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: LD_INT 1
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: LD_INT 2
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: LD_INT 2
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 2
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 2
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: NEG
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: NEG
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: LD_INT 2
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30125: LD_ADDR_VAR 0 57
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: NEG
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 2
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: NEG
30325: PUSH
30326: LD_INT 2
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30355: LD_ADDR_VAR 0 58
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: LD_INT 1
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 2
30531: NEG
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 2
30542: NEG
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30585: LD_ADDR_VAR 0 59
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 1
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30673: LD_ADDR_VAR 0 60
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30761: LD_ADDR_VAR 0 61
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: NEG
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: NEG
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30849: LD_ADDR_VAR 0 62
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30937: LD_ADDR_VAR 0 63
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31025: LD_ADDR_VAR 0 64
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: ST_TO_ADDR
// end ; 1 :
31113: GO 37010
31115: LD_INT 1
31117: DOUBLE
31118: EQUAL
31119: IFTRUE 31123
31121: GO 33746
31123: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31124: LD_ADDR_VAR 0 11
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 3
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: LD_INT 2
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31168: LD_ADDR_VAR 0 12
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31209: LD_ADDR_VAR 0 13
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 3
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 3
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31249: LD_ADDR_VAR 0 14
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31290: LD_ADDR_VAR 0 15
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 3
31319: NEG
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31334: LD_ADDR_VAR 0 16
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: LD_INT 3
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: NEG
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31380: LD_ADDR_VAR 0 17
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 2
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: LIST
31423: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31424: LD_ADDR_VAR 0 18
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31465: LD_ADDR_VAR 0 19
31469: PUSH
31470: LD_INT 3
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 3
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31505: LD_ADDR_VAR 0 20
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31546: LD_ADDR_VAR 0 21
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 3
31564: NEG
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31590: LD_ADDR_VAR 0 22
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: NEG
31610: PUSH
31611: LD_INT 2
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 3
31621: NEG
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31636: LD_ADDR_VAR 0 23
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 3
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 4
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 3
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31680: LD_ADDR_VAR 0 24
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: LIST
31720: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31721: LD_ADDR_VAR 0 25
31725: PUSH
31726: LD_INT 3
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 4
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: LD_INT 4
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31761: LD_ADDR_VAR 0 26
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: LD_INT 3
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31802: LD_ADDR_VAR 0 27
31806: PUSH
31807: LD_INT 3
31809: NEG
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 3
31820: NEG
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 4
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31846: LD_ADDR_VAR 0 28
31850: PUSH
31851: LD_INT 3
31853: NEG
31854: PUSH
31855: LD_INT 3
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 4
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 4
31877: NEG
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31892: LD_ADDR_VAR 0 29
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 4
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 4
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: LD_INT 5
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 5
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 4
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: LD_INT 6
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 6
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: LD_INT 5
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
32047: LD_ADDR_VAR 0 30
32051: PUSH
32052: LD_INT 2
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 4
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 4
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 5
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 6
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 6
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
32190: LD_ADDR_VAR 0 31
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: LD_INT 3
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 4
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 4
32237: PUSH
32238: LD_INT 4
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 3
32247: PUSH
32248: LD_INT 4
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 5
32257: PUSH
32258: LD_INT 4
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 5
32267: PUSH
32268: LD_INT 5
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: LD_INT 5
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 6
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 6
32297: PUSH
32298: LD_INT 6
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 5
32307: PUSH
32308: LD_INT 6
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32329: LD_ADDR_VAR 0 32
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 4
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 5
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 5
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: LD_INT 4
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 6
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 6
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32472: LD_ADDR_VAR 0 33
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 3
32490: NEG
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 3
32513: NEG
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 4
32524: NEG
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 4
32535: NEG
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 4
32547: NEG
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 5
32558: NEG
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 5
32569: NEG
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 5
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 6
32592: NEG
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 6
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32627: LD_ADDR_VAR 0 34
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: LD_INT 3
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: NEG
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: LD_INT 3
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 3
32670: NEG
32671: PUSH
32672: LD_INT 4
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 4
32682: NEG
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 4
32694: NEG
32695: PUSH
32696: LD_INT 4
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 4
32706: NEG
32707: PUSH
32708: LD_INT 5
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 5
32718: NEG
32719: PUSH
32720: LD_INT 4
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 5
32730: NEG
32731: PUSH
32732: LD_INT 5
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 5
32742: NEG
32743: PUSH
32744: LD_INT 6
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 6
32754: NEG
32755: PUSH
32756: LD_INT 5
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 6
32766: NEG
32767: PUSH
32768: LD_INT 6
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32790: LD_ADDR_VAR 0 41
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: LD_INT 3
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32834: LD_ADDR_VAR 0 42
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32875: LD_ADDR_VAR 0 43
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32915: LD_ADDR_VAR 0 44
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32956: LD_ADDR_VAR 0 45
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 3
32985: NEG
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
33000: LD_ADDR_VAR 0 46
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 3
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 3
33031: NEG
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
33046: LD_ADDR_VAR 0 47
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: LD_INT 3
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: LD_INT 3
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33079: LD_ADDR_VAR 0 48
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
33110: LD_ADDR_VAR 0 49
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
33139: LD_ADDR_VAR 0 50
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33168: LD_ADDR_VAR 0 51
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: NEG
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33199: LD_ADDR_VAR 0 52
33203: PUSH
33204: LD_INT 3
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33232: LD_ADDR_VAR 0 53
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 3
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33276: LD_ADDR_VAR 0 54
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 3
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 3
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33317: LD_ADDR_VAR 0 55
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 3
33334: PUSH
33335: LD_INT 3
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33357: LD_ADDR_VAR 0 56
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 3
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33398: LD_ADDR_VAR 0 57
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 3
33416: NEG
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 3
33427: NEG
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33442: LD_ADDR_VAR 0 58
33446: PUSH
33447: LD_INT 2
33449: NEG
33450: PUSH
33451: LD_INT 3
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: NEG
33462: PUSH
33463: LD_INT 2
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: NEG
33474: PUSH
33475: LD_INT 3
33477: NEG
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33488: LD_ADDR_VAR 0 59
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33532: LD_ADDR_VAR 0 60
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33573: LD_ADDR_VAR 0 61
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33613: LD_ADDR_VAR 0 62
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33654: LD_ADDR_VAR 0 63
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33698: LD_ADDR_VAR 0 64
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 2
33717: NEG
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// end ; 2 :
33744: GO 37010
33746: LD_INT 2
33748: DOUBLE
33749: EQUAL
33750: IFTRUE 33754
33752: GO 37009
33754: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33755: LD_ADDR_VAR 0 29
33759: PUSH
33760: LD_INT 4
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 4
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 5
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 5
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 4
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: LD_INT 2
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 5
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 4
33875: PUSH
33876: LD_INT 3
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 4
33885: PUSH
33886: LD_INT 4
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 3
33895: PUSH
33896: LD_INT 4
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 3
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 4
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 4
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 4
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 4
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 5
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 5
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 4
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: LD_INT 5
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 2
34027: NEG
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: NEG
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 3
34049: NEG
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: NEG
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 3
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 4
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 4
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 4
34117: NEG
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 4
34140: NEG
34141: PUSH
34142: LD_INT 4
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 4
34152: NEG
34153: PUSH
34154: LD_INT 5
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 3
34164: NEG
34165: PUSH
34166: LD_INT 4
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 3
34176: NEG
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 4
34188: NEG
34189: PUSH
34190: LD_INT 3
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 5
34200: NEG
34201: PUSH
34202: LD_INT 4
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 5
34212: NEG
34213: PUSH
34214: LD_INT 5
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 3
34224: NEG
34225: PUSH
34226: LD_INT 5
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 5
34236: NEG
34237: PUSH
34238: LD_INT 3
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34293: LD_ADDR_VAR 0 30
34297: PUSH
34298: LD_INT 4
34300: PUSH
34301: LD_INT 4
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 4
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 5
34320: PUSH
34321: LD_INT 4
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 5
34330: PUSH
34331: LD_INT 5
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 4
34340: PUSH
34341: LD_INT 5
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: LD_INT 4
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 3
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 5
34370: PUSH
34371: LD_INT 3
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: LD_INT 5
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 3
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: LD_INT 4
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: LD_INT 4
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: LD_INT 3
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 4
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: LD_INT 2
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 4
34483: NEG
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 3
34506: NEG
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: NEG
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 4
34528: NEG
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 5
34539: NEG
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 5
34550: NEG
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 5
34562: NEG
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 3
34585: NEG
34586: PUSH
34587: LD_INT 3
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 3
34597: NEG
34598: PUSH
34599: LD_INT 4
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: NEG
34610: PUSH
34611: LD_INT 3
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: LD_INT 2
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 4
34645: NEG
34646: PUSH
34647: LD_INT 3
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 4
34657: NEG
34658: PUSH
34659: LD_INT 4
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: LD_INT 4
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 4
34681: NEG
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 4
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 5
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 4
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 3
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 3
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: LD_INT 4
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: LD_INT 5
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 3
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: NEG
34784: PUSH
34785: LD_INT 5
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34840: LD_ADDR_VAR 0 31
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 4
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 5
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 5
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: LD_INT 4
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: LD_INT 5
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 3
34940: NEG
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 3
34951: NEG
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 3
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 4
34996: NEG
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 4
35007: NEG
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 4
35019: NEG
35020: PUSH
35021: LD_INT 2
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 2
35031: NEG
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 4
35042: NEG
35043: PUSH
35044: LD_INT 4
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 4
35054: NEG
35055: PUSH
35056: LD_INT 5
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 3
35066: NEG
35067: PUSH
35068: LD_INT 4
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 3
35078: NEG
35079: PUSH
35080: LD_INT 3
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 4
35090: NEG
35091: PUSH
35092: LD_INT 3
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 5
35102: NEG
35103: PUSH
35104: LD_INT 4
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 5
35114: NEG
35115: PUSH
35116: LD_INT 5
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: NEG
35127: PUSH
35128: LD_INT 5
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 5
35138: NEG
35139: PUSH
35140: LD_INT 3
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 3
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 4
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: LD_INT 3
35175: NEG
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: LD_INT 3
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 4
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: LD_INT 4
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 4
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 4
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 5
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 5
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 4
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 5
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35390: LD_ADDR_VAR 0 32
35394: PUSH
35395: LD_INT 4
35397: NEG
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 4
35408: NEG
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 3
35420: NEG
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 3
35431: NEG
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 4
35442: NEG
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 5
35453: NEG
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 5
35464: NEG
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 5
35476: NEG
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 3
35488: NEG
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: LD_INT 3
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 3
35511: NEG
35512: PUSH
35513: LD_INT 4
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: LD_INT 3
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: LD_INT 2
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 3
35547: NEG
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 4
35559: NEG
35560: PUSH
35561: LD_INT 3
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 4
35571: NEG
35572: PUSH
35573: LD_INT 4
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 4
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 4
35595: NEG
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 4
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 5
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 4
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: LD_INT 3
35643: NEG
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 3
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 4
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 5
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 3
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: NEG
35698: PUSH
35699: LD_INT 5
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 3
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 3
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 4
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 4
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 3
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 4
35792: PUSH
35793: LD_INT 2
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 4
35802: PUSH
35803: LD_INT 4
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 4
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 5
35822: PUSH
35823: LD_INT 4
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 5
35832: PUSH
35833: LD_INT 5
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 4
35842: PUSH
35843: LD_INT 5
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 3
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 5
35872: PUSH
35873: LD_INT 3
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 5
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35937: LD_ADDR_VAR 0 33
35941: PUSH
35942: LD_INT 4
35944: NEG
35945: PUSH
35946: LD_INT 4
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 4
35956: NEG
35957: PUSH
35958: LD_INT 5
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 3
35968: NEG
35969: PUSH
35970: LD_INT 4
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 3
35980: NEG
35981: PUSH
35982: LD_INT 3
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 4
35992: NEG
35993: PUSH
35994: LD_INT 3
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 5
36004: NEG
36005: PUSH
36006: LD_INT 4
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 5
36016: NEG
36017: PUSH
36018: LD_INT 5
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 3
36028: NEG
36029: PUSH
36030: LD_INT 5
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 5
36040: NEG
36041: PUSH
36042: LD_INT 3
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 3
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 4
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 3
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: LD_INT 3
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: LD_INT 4
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: LD_INT 2
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: LD_INT 4
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 4
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 4
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 5
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 4
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 3
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 3
36226: PUSH
36227: LD_INT 2
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 5
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 3
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 3
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 4
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 4
36277: PUSH
36278: LD_INT 4
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 3
36287: PUSH
36288: LD_INT 4
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 3
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 4
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 4
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 4
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: LD_INT 3
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 4
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 5
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 5
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 4
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: LD_INT 5
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: NEG
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36475: LD_ADDR_VAR 0 34
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 4
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 5
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: LD_INT 4
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 3
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: LD_INT 3
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: LD_INT 4
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 5
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 3
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: LD_INT 5
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 4
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 4
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 3
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 4
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 4
36677: PUSH
36678: LD_INT 4
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 4
36687: PUSH
36688: LD_INT 3
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 5
36697: PUSH
36698: LD_INT 4
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 5
36707: PUSH
36708: LD_INT 5
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 4
36717: PUSH
36718: LD_INT 5
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 4
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 5
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 5
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 3
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 4
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 4
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: LD_INT 3
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: LD_INT 4
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 4
36860: NEG
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 4
36871: NEG
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 3
36883: NEG
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 3
36894: NEG
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 4
36905: NEG
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 5
36916: NEG
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 5
36927: NEG
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 5
36939: NEG
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 3
36951: NEG
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// end ; end ;
37007: GO 37010
37009: POP
// case btype of b_depot , b_warehouse :
37010: LD_VAR 0 1
37014: PUSH
37015: LD_INT 0
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37029
37021: LD_INT 1
37023: DOUBLE
37024: EQUAL
37025: IFTRUE 37029
37027: GO 37230
37029: POP
// case nation of nation_american :
37030: LD_VAR 0 5
37034: PUSH
37035: LD_INT 1
37037: DOUBLE
37038: EQUAL
37039: IFTRUE 37043
37041: GO 37099
37043: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
37044: LD_ADDR_VAR 0 9
37048: PUSH
37049: LD_VAR 0 11
37053: PUSH
37054: LD_VAR 0 12
37058: PUSH
37059: LD_VAR 0 13
37063: PUSH
37064: LD_VAR 0 14
37068: PUSH
37069: LD_VAR 0 15
37073: PUSH
37074: LD_VAR 0 16
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: PUSH
37087: LD_VAR 0 4
37091: PUSH
37092: LD_INT 1
37094: PLUS
37095: ARRAY
37096: ST_TO_ADDR
37097: GO 37228
37099: LD_INT 2
37101: DOUBLE
37102: EQUAL
37103: IFTRUE 37107
37105: GO 37163
37107: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
37108: LD_ADDR_VAR 0 9
37112: PUSH
37113: LD_VAR 0 17
37117: PUSH
37118: LD_VAR 0 18
37122: PUSH
37123: LD_VAR 0 19
37127: PUSH
37128: LD_VAR 0 20
37132: PUSH
37133: LD_VAR 0 21
37137: PUSH
37138: LD_VAR 0 22
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: PUSH
37151: LD_VAR 0 4
37155: PUSH
37156: LD_INT 1
37158: PLUS
37159: ARRAY
37160: ST_TO_ADDR
37161: GO 37228
37163: LD_INT 3
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37227
37171: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
37172: LD_ADDR_VAR 0 9
37176: PUSH
37177: LD_VAR 0 23
37181: PUSH
37182: LD_VAR 0 24
37186: PUSH
37187: LD_VAR 0 25
37191: PUSH
37192: LD_VAR 0 26
37196: PUSH
37197: LD_VAR 0 27
37201: PUSH
37202: LD_VAR 0 28
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: PUSH
37215: LD_VAR 0 4
37219: PUSH
37220: LD_INT 1
37222: PLUS
37223: ARRAY
37224: ST_TO_ADDR
37225: GO 37228
37227: POP
37228: GO 37783
37230: LD_INT 2
37232: DOUBLE
37233: EQUAL
37234: IFTRUE 37244
37236: LD_INT 3
37238: DOUBLE
37239: EQUAL
37240: IFTRUE 37244
37242: GO 37300
37244: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
37245: LD_ADDR_VAR 0 9
37249: PUSH
37250: LD_VAR 0 29
37254: PUSH
37255: LD_VAR 0 30
37259: PUSH
37260: LD_VAR 0 31
37264: PUSH
37265: LD_VAR 0 32
37269: PUSH
37270: LD_VAR 0 33
37274: PUSH
37275: LD_VAR 0 34
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: PUSH
37288: LD_VAR 0 4
37292: PUSH
37293: LD_INT 1
37295: PLUS
37296: ARRAY
37297: ST_TO_ADDR
37298: GO 37783
37300: LD_INT 16
37302: DOUBLE
37303: EQUAL
37304: IFTRUE 37362
37306: LD_INT 17
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37362
37312: LD_INT 18
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37362
37318: LD_INT 19
37320: DOUBLE
37321: EQUAL
37322: IFTRUE 37362
37324: LD_INT 22
37326: DOUBLE
37327: EQUAL
37328: IFTRUE 37362
37330: LD_INT 20
37332: DOUBLE
37333: EQUAL
37334: IFTRUE 37362
37336: LD_INT 21
37338: DOUBLE
37339: EQUAL
37340: IFTRUE 37362
37342: LD_INT 23
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37362
37348: LD_INT 24
37350: DOUBLE
37351: EQUAL
37352: IFTRUE 37362
37354: LD_INT 25
37356: DOUBLE
37357: EQUAL
37358: IFTRUE 37362
37360: GO 37418
37362: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37363: LD_ADDR_VAR 0 9
37367: PUSH
37368: LD_VAR 0 35
37372: PUSH
37373: LD_VAR 0 36
37377: PUSH
37378: LD_VAR 0 37
37382: PUSH
37383: LD_VAR 0 38
37387: PUSH
37388: LD_VAR 0 39
37392: PUSH
37393: LD_VAR 0 40
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: PUSH
37406: LD_VAR 0 4
37410: PUSH
37411: LD_INT 1
37413: PLUS
37414: ARRAY
37415: ST_TO_ADDR
37416: GO 37783
37418: LD_INT 6
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37474
37424: LD_INT 7
37426: DOUBLE
37427: EQUAL
37428: IFTRUE 37474
37430: LD_INT 8
37432: DOUBLE
37433: EQUAL
37434: IFTRUE 37474
37436: LD_INT 13
37438: DOUBLE
37439: EQUAL
37440: IFTRUE 37474
37442: LD_INT 12
37444: DOUBLE
37445: EQUAL
37446: IFTRUE 37474
37448: LD_INT 15
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37474
37454: LD_INT 11
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37474
37460: LD_INT 14
37462: DOUBLE
37463: EQUAL
37464: IFTRUE 37474
37466: LD_INT 10
37468: DOUBLE
37469: EQUAL
37470: IFTRUE 37474
37472: GO 37530
37474: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37475: LD_ADDR_VAR 0 9
37479: PUSH
37480: LD_VAR 0 41
37484: PUSH
37485: LD_VAR 0 42
37489: PUSH
37490: LD_VAR 0 43
37494: PUSH
37495: LD_VAR 0 44
37499: PUSH
37500: LD_VAR 0 45
37504: PUSH
37505: LD_VAR 0 46
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: PUSH
37518: LD_VAR 0 4
37522: PUSH
37523: LD_INT 1
37525: PLUS
37526: ARRAY
37527: ST_TO_ADDR
37528: GO 37783
37530: LD_INT 36
37532: DOUBLE
37533: EQUAL
37534: IFTRUE 37538
37536: GO 37594
37538: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37539: LD_ADDR_VAR 0 9
37543: PUSH
37544: LD_VAR 0 47
37548: PUSH
37549: LD_VAR 0 48
37553: PUSH
37554: LD_VAR 0 49
37558: PUSH
37559: LD_VAR 0 50
37563: PUSH
37564: LD_VAR 0 51
37568: PUSH
37569: LD_VAR 0 52
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: PUSH
37582: LD_VAR 0 4
37586: PUSH
37587: LD_INT 1
37589: PLUS
37590: ARRAY
37591: ST_TO_ADDR
37592: GO 37783
37594: LD_INT 4
37596: DOUBLE
37597: EQUAL
37598: IFTRUE 37620
37600: LD_INT 5
37602: DOUBLE
37603: EQUAL
37604: IFTRUE 37620
37606: LD_INT 34
37608: DOUBLE
37609: EQUAL
37610: IFTRUE 37620
37612: LD_INT 37
37614: DOUBLE
37615: EQUAL
37616: IFTRUE 37620
37618: GO 37676
37620: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37621: LD_ADDR_VAR 0 9
37625: PUSH
37626: LD_VAR 0 53
37630: PUSH
37631: LD_VAR 0 54
37635: PUSH
37636: LD_VAR 0 55
37640: PUSH
37641: LD_VAR 0 56
37645: PUSH
37646: LD_VAR 0 57
37650: PUSH
37651: LD_VAR 0 58
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: PUSH
37664: LD_VAR 0 4
37668: PUSH
37669: LD_INT 1
37671: PLUS
37672: ARRAY
37673: ST_TO_ADDR
37674: GO 37783
37676: LD_INT 31
37678: DOUBLE
37679: EQUAL
37680: IFTRUE 37726
37682: LD_INT 32
37684: DOUBLE
37685: EQUAL
37686: IFTRUE 37726
37688: LD_INT 33
37690: DOUBLE
37691: EQUAL
37692: IFTRUE 37726
37694: LD_INT 27
37696: DOUBLE
37697: EQUAL
37698: IFTRUE 37726
37700: LD_INT 26
37702: DOUBLE
37703: EQUAL
37704: IFTRUE 37726
37706: LD_INT 28
37708: DOUBLE
37709: EQUAL
37710: IFTRUE 37726
37712: LD_INT 29
37714: DOUBLE
37715: EQUAL
37716: IFTRUE 37726
37718: LD_INT 30
37720: DOUBLE
37721: EQUAL
37722: IFTRUE 37726
37724: GO 37782
37726: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37727: LD_ADDR_VAR 0 9
37731: PUSH
37732: LD_VAR 0 59
37736: PUSH
37737: LD_VAR 0 60
37741: PUSH
37742: LD_VAR 0 61
37746: PUSH
37747: LD_VAR 0 62
37751: PUSH
37752: LD_VAR 0 63
37756: PUSH
37757: LD_VAR 0 64
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: PUSH
37770: LD_VAR 0 4
37774: PUSH
37775: LD_INT 1
37777: PLUS
37778: ARRAY
37779: ST_TO_ADDR
37780: GO 37783
37782: POP
// temp_list2 = [ ] ;
37783: LD_ADDR_VAR 0 10
37787: PUSH
37788: EMPTY
37789: ST_TO_ADDR
// for i in temp_list do
37790: LD_ADDR_VAR 0 8
37794: PUSH
37795: LD_VAR 0 9
37799: PUSH
37800: FOR_IN
37801: IFFALSE 37853
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37803: LD_ADDR_VAR 0 10
37807: PUSH
37808: LD_VAR 0 10
37812: PUSH
37813: LD_VAR 0 8
37817: PUSH
37818: LD_INT 1
37820: ARRAY
37821: PUSH
37822: LD_VAR 0 2
37826: PLUS
37827: PUSH
37828: LD_VAR 0 8
37832: PUSH
37833: LD_INT 2
37835: ARRAY
37836: PUSH
37837: LD_VAR 0 3
37841: PLUS
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: ADD
37850: ST_TO_ADDR
37851: GO 37800
37853: POP
37854: POP
// result = temp_list2 ;
37855: LD_ADDR_VAR 0 7
37859: PUSH
37860: LD_VAR 0 10
37864: ST_TO_ADDR
// end ;
37865: LD_VAR 0 7
37869: RET
// export function EnemyInRange ( unit , dist ) ; begin
37870: LD_INT 0
37872: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37873: LD_ADDR_VAR 0 3
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: CALL_OW 255
37887: PPUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 250
37897: PPUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 251
37907: PPUSH
37908: LD_VAR 0 2
37912: PPUSH
37913: CALL 11127 0 4
37917: PUSH
37918: LD_INT 4
37920: ARRAY
37921: ST_TO_ADDR
// end ;
37922: LD_VAR 0 3
37926: RET
// export function PlayerSeeMe ( unit ) ; begin
37927: LD_INT 0
37929: PPUSH
// result := See ( your_side , unit ) ;
37930: LD_ADDR_VAR 0 2
37934: PUSH
37935: LD_OWVAR 2
37939: PPUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL_OW 292
37949: ST_TO_ADDR
// end ;
37950: LD_VAR 0 2
37954: RET
// export function ReverseDir ( unit ) ; begin
37955: LD_INT 0
37957: PPUSH
// if not unit then
37958: LD_VAR 0 1
37962: NOT
37963: IFFALSE 37967
// exit ;
37965: GO 37990
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37967: LD_ADDR_VAR 0 2
37971: PUSH
37972: LD_VAR 0 1
37976: PPUSH
37977: CALL_OW 254
37981: PUSH
37982: LD_INT 3
37984: PLUS
37985: PUSH
37986: LD_INT 6
37988: MOD
37989: ST_TO_ADDR
// end ;
37990: LD_VAR 0 2
37994: RET
// export function ReverseArray ( array ) ; var i ; begin
37995: LD_INT 0
37997: PPUSH
37998: PPUSH
// if not array then
37999: LD_VAR 0 1
38003: NOT
38004: IFFALSE 38008
// exit ;
38006: GO 38063
// result := [ ] ;
38008: LD_ADDR_VAR 0 2
38012: PUSH
38013: EMPTY
38014: ST_TO_ADDR
// for i := array downto 1 do
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: DOUBLE
38021: LD_VAR 0 1
38025: INC
38026: ST_TO_ADDR
38027: LD_INT 1
38029: PUSH
38030: FOR_DOWNTO
38031: IFFALSE 38061
// result := Join ( result , array [ i ] ) ;
38033: LD_ADDR_VAR 0 2
38037: PUSH
38038: LD_VAR 0 2
38042: PPUSH
38043: LD_VAR 0 1
38047: PUSH
38048: LD_VAR 0 3
38052: ARRAY
38053: PPUSH
38054: CALL 42905 0 2
38058: ST_TO_ADDR
38059: GO 38030
38061: POP
38062: POP
// end ;
38063: LD_VAR 0 2
38067: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
38068: LD_INT 0
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
// if not unit or not hexes then
38076: LD_VAR 0 1
38080: NOT
38081: IFTRUE 38090
38083: PUSH
38084: LD_VAR 0 2
38088: NOT
38089: OR
38090: IFFALSE 38094
// exit ;
38092: GO 38217
// dist := 9999 ;
38094: LD_ADDR_VAR 0 5
38098: PUSH
38099: LD_INT 9999
38101: ST_TO_ADDR
// for i = 1 to hexes do
38102: LD_ADDR_VAR 0 4
38106: PUSH
38107: DOUBLE
38108: LD_INT 1
38110: DEC
38111: ST_TO_ADDR
38112: LD_VAR 0 2
38116: PUSH
38117: FOR_TO
38118: IFFALSE 38205
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38120: LD_ADDR_VAR 0 6
38124: PUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_VAR 0 4
38139: ARRAY
38140: PUSH
38141: LD_INT 1
38143: ARRAY
38144: PPUSH
38145: LD_VAR 0 2
38149: PUSH
38150: LD_VAR 0 4
38154: ARRAY
38155: PUSH
38156: LD_INT 2
38158: ARRAY
38159: PPUSH
38160: CALL_OW 297
38164: ST_TO_ADDR
// if tdist < dist then
38165: LD_VAR 0 6
38169: PUSH
38170: LD_VAR 0 5
38174: LESS
38175: IFFALSE 38203
// begin hex := hexes [ i ] ;
38177: LD_ADDR_VAR 0 8
38181: PUSH
38182: LD_VAR 0 2
38186: PUSH
38187: LD_VAR 0 4
38191: ARRAY
38192: ST_TO_ADDR
// dist := tdist ;
38193: LD_ADDR_VAR 0 5
38197: PUSH
38198: LD_VAR 0 6
38202: ST_TO_ADDR
// end ; end ;
38203: GO 38117
38205: POP
38206: POP
// result := hex ;
38207: LD_ADDR_VAR 0 3
38211: PUSH
38212: LD_VAR 0 8
38216: ST_TO_ADDR
// end ;
38217: LD_VAR 0 3
38221: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
38222: LD_INT 0
38224: PPUSH
38225: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38226: LD_VAR 0 1
38230: NOT
38231: IFTRUE 38270
38233: PUSH
38234: LD_VAR 0 1
38238: PUSH
38239: LD_INT 21
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 23
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PPUSH
38263: CALL_OW 69
38267: IN
38268: NOT
38269: OR
38270: IFFALSE 38274
// exit ;
38272: GO 38321
// for i = 1 to 3 do
38274: LD_ADDR_VAR 0 3
38278: PUSH
38279: DOUBLE
38280: LD_INT 1
38282: DEC
38283: ST_TO_ADDR
38284: LD_INT 3
38286: PUSH
38287: FOR_TO
38288: IFFALSE 38319
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38290: LD_VAR 0 1
38294: PPUSH
38295: CALL_OW 250
38299: PPUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL_OW 251
38309: PPUSH
38310: LD_INT 1
38312: PPUSH
38313: CALL_OW 453
38317: GO 38287
38319: POP
38320: POP
// end ;
38321: LD_VAR 0 2
38325: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38326: LD_INT 0
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
// if not unit or not enemy_unit then
38334: LD_VAR 0 1
38338: NOT
38339: IFTRUE 38348
38341: PUSH
38342: LD_VAR 0 2
38346: NOT
38347: OR
38348: IFFALSE 38352
// exit ;
38350: GO 38823
// if GetLives ( i ) < 250 then
38352: LD_VAR 0 4
38356: PPUSH
38357: CALL_OW 256
38361: PUSH
38362: LD_INT 250
38364: LESS
38365: IFFALSE 38378
// begin ComAutodestruct ( i ) ;
38367: LD_VAR 0 4
38371: PPUSH
38372: CALL 38222 0 1
// exit ;
38376: GO 38823
// end ; x := GetX ( enemy_unit ) ;
38378: LD_ADDR_VAR 0 7
38382: PUSH
38383: LD_VAR 0 2
38387: PPUSH
38388: CALL_OW 250
38392: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38393: LD_ADDR_VAR 0 8
38397: PUSH
38398: LD_VAR 0 2
38402: PPUSH
38403: CALL_OW 251
38407: ST_TO_ADDR
// if not x or not y then
38408: LD_VAR 0 7
38412: NOT
38413: IFTRUE 38422
38415: PUSH
38416: LD_VAR 0 8
38420: NOT
38421: OR
38422: IFFALSE 38426
// exit ;
38424: GO 38823
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38426: LD_ADDR_VAR 0 6
38430: PUSH
38431: LD_VAR 0 7
38435: PPUSH
38436: LD_INT 0
38438: PPUSH
38439: LD_INT 4
38441: PPUSH
38442: CALL_OW 272
38446: PUSH
38447: LD_VAR 0 8
38451: PPUSH
38452: LD_INT 0
38454: PPUSH
38455: LD_INT 4
38457: PPUSH
38458: CALL_OW 273
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_VAR 0 7
38471: PPUSH
38472: LD_INT 1
38474: PPUSH
38475: LD_INT 4
38477: PPUSH
38478: CALL_OW 272
38482: PUSH
38483: LD_VAR 0 8
38487: PPUSH
38488: LD_INT 1
38490: PPUSH
38491: LD_INT 4
38493: PPUSH
38494: CALL_OW 273
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_VAR 0 7
38507: PPUSH
38508: LD_INT 2
38510: PPUSH
38511: LD_INT 4
38513: PPUSH
38514: CALL_OW 272
38518: PUSH
38519: LD_VAR 0 8
38523: PPUSH
38524: LD_INT 2
38526: PPUSH
38527: LD_INT 4
38529: PPUSH
38530: CALL_OW 273
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_VAR 0 7
38543: PPUSH
38544: LD_INT 3
38546: PPUSH
38547: LD_INT 4
38549: PPUSH
38550: CALL_OW 272
38554: PUSH
38555: LD_VAR 0 8
38559: PPUSH
38560: LD_INT 3
38562: PPUSH
38563: LD_INT 4
38565: PPUSH
38566: CALL_OW 273
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_VAR 0 7
38579: PPUSH
38580: LD_INT 4
38582: PPUSH
38583: LD_INT 4
38585: PPUSH
38586: CALL_OW 272
38590: PUSH
38591: LD_VAR 0 8
38595: PPUSH
38596: LD_INT 4
38598: PPUSH
38599: LD_INT 4
38601: PPUSH
38602: CALL_OW 273
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_VAR 0 7
38615: PPUSH
38616: LD_INT 5
38618: PPUSH
38619: LD_INT 4
38621: PPUSH
38622: CALL_OW 272
38626: PUSH
38627: LD_VAR 0 8
38631: PPUSH
38632: LD_INT 5
38634: PPUSH
38635: LD_INT 4
38637: PPUSH
38638: CALL_OW 273
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: ST_TO_ADDR
// for i = tmp downto 1 do
38655: LD_ADDR_VAR 0 4
38659: PUSH
38660: DOUBLE
38661: LD_VAR 0 6
38665: INC
38666: ST_TO_ADDR
38667: LD_INT 1
38669: PUSH
38670: FOR_DOWNTO
38671: IFFALSE 38774
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38673: LD_VAR 0 6
38677: PUSH
38678: LD_VAR 0 4
38682: ARRAY
38683: PUSH
38684: LD_INT 1
38686: ARRAY
38687: PPUSH
38688: LD_VAR 0 6
38692: PUSH
38693: LD_VAR 0 4
38697: ARRAY
38698: PUSH
38699: LD_INT 2
38701: ARRAY
38702: PPUSH
38703: CALL_OW 488
38707: NOT
38708: IFTRUE 38750
38710: PUSH
38711: LD_VAR 0 6
38715: PUSH
38716: LD_VAR 0 4
38720: ARRAY
38721: PUSH
38722: LD_INT 1
38724: ARRAY
38725: PPUSH
38726: LD_VAR 0 6
38730: PUSH
38731: LD_VAR 0 4
38735: ARRAY
38736: PUSH
38737: LD_INT 2
38739: ARRAY
38740: PPUSH
38741: CALL_OW 428
38745: PUSH
38746: LD_INT 0
38748: NONEQUAL
38749: OR
38750: IFFALSE 38772
// tmp := Delete ( tmp , i ) ;
38752: LD_ADDR_VAR 0 6
38756: PUSH
38757: LD_VAR 0 6
38761: PPUSH
38762: LD_VAR 0 4
38766: PPUSH
38767: CALL_OW 3
38771: ST_TO_ADDR
38772: GO 38670
38774: POP
38775: POP
// j := GetClosestHex ( unit , tmp ) ;
38776: LD_ADDR_VAR 0 5
38780: PUSH
38781: LD_VAR 0 1
38785: PPUSH
38786: LD_VAR 0 6
38790: PPUSH
38791: CALL 38068 0 2
38795: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38796: LD_VAR 0 1
38800: PPUSH
38801: LD_VAR 0 5
38805: PUSH
38806: LD_INT 1
38808: ARRAY
38809: PPUSH
38810: LD_VAR 0 5
38814: PUSH
38815: LD_INT 2
38817: ARRAY
38818: PPUSH
38819: CALL_OW 111
// end ;
38823: LD_VAR 0 3
38827: RET
// export function PrepareApemanSoldier ( ) ; begin
38828: LD_INT 0
38830: PPUSH
// uc_nation := 0 ;
38831: LD_ADDR_OWVAR 21
38835: PUSH
38836: LD_INT 0
38838: ST_TO_ADDR
// hc_sex := sex_male ;
38839: LD_ADDR_OWVAR 27
38843: PUSH
38844: LD_INT 1
38846: ST_TO_ADDR
// hc_name :=  ;
38847: LD_ADDR_OWVAR 26
38851: PUSH
38852: LD_STRING 
38854: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38855: LD_ADDR_OWVAR 28
38859: PUSH
38860: LD_INT 15
38862: ST_TO_ADDR
// hc_gallery :=  ;
38863: LD_ADDR_OWVAR 33
38867: PUSH
38868: LD_STRING 
38870: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38871: LD_ADDR_OWVAR 31
38875: PUSH
38876: LD_INT 0
38878: PPUSH
38879: LD_INT 3
38881: PPUSH
38882: CALL_OW 12
38886: PUSH
38887: LD_INT 0
38889: PPUSH
38890: LD_INT 3
38892: PPUSH
38893: CALL_OW 12
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38910: LD_ADDR_OWVAR 29
38914: PUSH
38915: LD_INT 12
38917: PUSH
38918: LD_INT 12
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: ST_TO_ADDR
// end ;
38925: LD_VAR 0 1
38929: RET
// export function PrepareApemanEngineer ( ) ; begin
38930: LD_INT 0
38932: PPUSH
// uc_nation := 0 ;
38933: LD_ADDR_OWVAR 21
38937: PUSH
38938: LD_INT 0
38940: ST_TO_ADDR
// hc_sex := sex_male ;
38941: LD_ADDR_OWVAR 27
38945: PUSH
38946: LD_INT 1
38948: ST_TO_ADDR
// hc_name :=  ;
38949: LD_ADDR_OWVAR 26
38953: PUSH
38954: LD_STRING 
38956: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38957: LD_ADDR_OWVAR 28
38961: PUSH
38962: LD_INT 16
38964: ST_TO_ADDR
// hc_gallery :=  ;
38965: LD_ADDR_OWVAR 33
38969: PUSH
38970: LD_STRING 
38972: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38973: LD_ADDR_OWVAR 31
38977: PUSH
38978: LD_INT 0
38980: PPUSH
38981: LD_INT 3
38983: PPUSH
38984: CALL_OW 12
38988: PUSH
38989: LD_INT 0
38991: PPUSH
38992: LD_INT 3
38994: PPUSH
38995: CALL_OW 12
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
39012: LD_ADDR_OWVAR 29
39016: PUSH
39017: LD_INT 12
39019: PUSH
39020: LD_INT 12
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: ST_TO_ADDR
// end ;
39027: LD_VAR 0 1
39031: RET
// export function PrepareApeman ( agressivity ) ; begin
39032: LD_INT 0
39034: PPUSH
// uc_side := 0 ;
39035: LD_ADDR_OWVAR 20
39039: PUSH
39040: LD_INT 0
39042: ST_TO_ADDR
// uc_nation := 0 ;
39043: LD_ADDR_OWVAR 21
39047: PUSH
39048: LD_INT 0
39050: ST_TO_ADDR
// hc_sex := sex_male ;
39051: LD_ADDR_OWVAR 27
39055: PUSH
39056: LD_INT 1
39058: ST_TO_ADDR
// hc_class := class_apeman ;
39059: LD_ADDR_OWVAR 28
39063: PUSH
39064: LD_INT 12
39066: ST_TO_ADDR
// hc_gallery :=  ;
39067: LD_ADDR_OWVAR 33
39071: PUSH
39072: LD_STRING 
39074: ST_TO_ADDR
// hc_name :=  ;
39075: LD_ADDR_OWVAR 26
39079: PUSH
39080: LD_STRING 
39082: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
39083: LD_ADDR_OWVAR 29
39087: PUSH
39088: LD_INT 12
39090: PUSH
39091: LD_INT 12
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: ST_TO_ADDR
// if agressivity = 0 then
39098: LD_VAR 0 1
39102: PUSH
39103: LD_INT 0
39105: EQUAL
39106: IFFALSE 39118
// hc_agressivity := 0 else
39108: LD_ADDR_OWVAR 35
39112: PUSH
39113: LD_INT 0
39115: ST_TO_ADDR
39116: GO 39139
// hc_agressivity := rand ( - agressivity , agressivity ) ;
39118: LD_ADDR_OWVAR 35
39122: PUSH
39123: LD_VAR 0 1
39127: NEG
39128: PPUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 12
39138: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39139: LD_ADDR_OWVAR 31
39143: PUSH
39144: LD_INT 0
39146: PPUSH
39147: LD_INT 3
39149: PPUSH
39150: CALL_OW 12
39154: PUSH
39155: LD_INT 0
39157: PPUSH
39158: LD_INT 3
39160: PPUSH
39161: CALL_OW 12
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: ST_TO_ADDR
// end ;
39178: LD_VAR 0 2
39182: RET
// export function PrepareTiger ( agressivity ) ; begin
39183: LD_INT 0
39185: PPUSH
// uc_side := 0 ;
39186: LD_ADDR_OWVAR 20
39190: PUSH
39191: LD_INT 0
39193: ST_TO_ADDR
// uc_nation := 0 ;
39194: LD_ADDR_OWVAR 21
39198: PUSH
39199: LD_INT 0
39201: ST_TO_ADDR
// InitHc ;
39202: CALL_OW 19
// hc_class := class_tiger ;
39206: LD_ADDR_OWVAR 28
39210: PUSH
39211: LD_INT 14
39213: ST_TO_ADDR
// hc_gallery :=  ;
39214: LD_ADDR_OWVAR 33
39218: PUSH
39219: LD_STRING 
39221: ST_TO_ADDR
// hc_name :=  ;
39222: LD_ADDR_OWVAR 26
39226: PUSH
39227: LD_STRING 
39229: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
39230: LD_ADDR_OWVAR 35
39234: PUSH
39235: LD_VAR 0 1
39239: NEG
39240: PPUSH
39241: LD_VAR 0 1
39245: PPUSH
39246: CALL_OW 12
39250: ST_TO_ADDR
// end ;
39251: LD_VAR 0 2
39255: RET
// export function PrepareEnchidna ( ) ; begin
39256: LD_INT 0
39258: PPUSH
// uc_side := 0 ;
39259: LD_ADDR_OWVAR 20
39263: PUSH
39264: LD_INT 0
39266: ST_TO_ADDR
// uc_nation := 0 ;
39267: LD_ADDR_OWVAR 21
39271: PUSH
39272: LD_INT 0
39274: ST_TO_ADDR
// InitHc ;
39275: CALL_OW 19
// hc_class := class_baggie ;
39279: LD_ADDR_OWVAR 28
39283: PUSH
39284: LD_INT 13
39286: ST_TO_ADDR
// hc_gallery :=  ;
39287: LD_ADDR_OWVAR 33
39291: PUSH
39292: LD_STRING 
39294: ST_TO_ADDR
// hc_name :=  ;
39295: LD_ADDR_OWVAR 26
39299: PUSH
39300: LD_STRING 
39302: ST_TO_ADDR
// end ;
39303: LD_VAR 0 1
39307: RET
// export function PrepareFrog ( ) ; begin
39308: LD_INT 0
39310: PPUSH
// uc_side := 0 ;
39311: LD_ADDR_OWVAR 20
39315: PUSH
39316: LD_INT 0
39318: ST_TO_ADDR
// uc_nation := 0 ;
39319: LD_ADDR_OWVAR 21
39323: PUSH
39324: LD_INT 0
39326: ST_TO_ADDR
// InitHc ;
39327: CALL_OW 19
// hc_class := class_frog ;
39331: LD_ADDR_OWVAR 28
39335: PUSH
39336: LD_INT 19
39338: ST_TO_ADDR
// hc_gallery :=  ;
39339: LD_ADDR_OWVAR 33
39343: PUSH
39344: LD_STRING 
39346: ST_TO_ADDR
// hc_name :=  ;
39347: LD_ADDR_OWVAR 26
39351: PUSH
39352: LD_STRING 
39354: ST_TO_ADDR
// end ;
39355: LD_VAR 0 1
39359: RET
// export function PrepareFish ( ) ; begin
39360: LD_INT 0
39362: PPUSH
// uc_side := 0 ;
39363: LD_ADDR_OWVAR 20
39367: PUSH
39368: LD_INT 0
39370: ST_TO_ADDR
// uc_nation := 0 ;
39371: LD_ADDR_OWVAR 21
39375: PUSH
39376: LD_INT 0
39378: ST_TO_ADDR
// InitHc ;
39379: CALL_OW 19
// hc_class := class_fish ;
39383: LD_ADDR_OWVAR 28
39387: PUSH
39388: LD_INT 20
39390: ST_TO_ADDR
// hc_gallery :=  ;
39391: LD_ADDR_OWVAR 33
39395: PUSH
39396: LD_STRING 
39398: ST_TO_ADDR
// hc_name :=  ;
39399: LD_ADDR_OWVAR 26
39403: PUSH
39404: LD_STRING 
39406: ST_TO_ADDR
// end ;
39407: LD_VAR 0 1
39411: RET
// export function PrepareBird ( ) ; begin
39412: LD_INT 0
39414: PPUSH
// uc_side := 0 ;
39415: LD_ADDR_OWVAR 20
39419: PUSH
39420: LD_INT 0
39422: ST_TO_ADDR
// uc_nation := 0 ;
39423: LD_ADDR_OWVAR 21
39427: PUSH
39428: LD_INT 0
39430: ST_TO_ADDR
// InitHc ;
39431: CALL_OW 19
// hc_class := class_phororhacos ;
39435: LD_ADDR_OWVAR 28
39439: PUSH
39440: LD_INT 18
39442: ST_TO_ADDR
// hc_gallery :=  ;
39443: LD_ADDR_OWVAR 33
39447: PUSH
39448: LD_STRING 
39450: ST_TO_ADDR
// hc_name :=  ;
39451: LD_ADDR_OWVAR 26
39455: PUSH
39456: LD_STRING 
39458: ST_TO_ADDR
// end ;
39459: LD_VAR 0 1
39463: RET
// export function PrepareHorse ( ) ; begin
39464: LD_INT 0
39466: PPUSH
// uc_side := 0 ;
39467: LD_ADDR_OWVAR 20
39471: PUSH
39472: LD_INT 0
39474: ST_TO_ADDR
// uc_nation := 0 ;
39475: LD_ADDR_OWVAR 21
39479: PUSH
39480: LD_INT 0
39482: ST_TO_ADDR
// InitHc ;
39483: CALL_OW 19
// hc_class := class_horse ;
39487: LD_ADDR_OWVAR 28
39491: PUSH
39492: LD_INT 21
39494: ST_TO_ADDR
// hc_gallery :=  ;
39495: LD_ADDR_OWVAR 33
39499: PUSH
39500: LD_STRING 
39502: ST_TO_ADDR
// hc_name :=  ;
39503: LD_ADDR_OWVAR 26
39507: PUSH
39508: LD_STRING 
39510: ST_TO_ADDR
// end ;
39511: LD_VAR 0 1
39515: RET
// export function PrepareMastodont ( ) ; begin
39516: LD_INT 0
39518: PPUSH
// uc_side := 0 ;
39519: LD_ADDR_OWVAR 20
39523: PUSH
39524: LD_INT 0
39526: ST_TO_ADDR
// uc_nation := 0 ;
39527: LD_ADDR_OWVAR 21
39531: PUSH
39532: LD_INT 0
39534: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39535: LD_ADDR_OWVAR 37
39539: PUSH
39540: LD_INT 31
39542: ST_TO_ADDR
// vc_control := control_rider ;
39543: LD_ADDR_OWVAR 38
39547: PUSH
39548: LD_INT 4
39550: ST_TO_ADDR
// end ;
39551: LD_VAR 0 1
39555: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39556: LD_INT 0
39558: PPUSH
39559: PPUSH
39560: PPUSH
// uc_side = 0 ;
39561: LD_ADDR_OWVAR 20
39565: PUSH
39566: LD_INT 0
39568: ST_TO_ADDR
// uc_nation = 0 ;
39569: LD_ADDR_OWVAR 21
39573: PUSH
39574: LD_INT 0
39576: ST_TO_ADDR
// InitHc_All ( ) ;
39577: CALL_OW 584
// InitVc ;
39581: CALL_OW 20
// if mastodonts then
39585: LD_VAR 0 6
39589: IFFALSE 39656
// for i = 1 to mastodonts do
39591: LD_ADDR_VAR 0 11
39595: PUSH
39596: DOUBLE
39597: LD_INT 1
39599: DEC
39600: ST_TO_ADDR
39601: LD_VAR 0 6
39605: PUSH
39606: FOR_TO
39607: IFFALSE 39654
// begin vc_chassis := 31 ;
39609: LD_ADDR_OWVAR 37
39613: PUSH
39614: LD_INT 31
39616: ST_TO_ADDR
// vc_control := control_rider ;
39617: LD_ADDR_OWVAR 38
39621: PUSH
39622: LD_INT 4
39624: ST_TO_ADDR
// animal := CreateVehicle ;
39625: LD_ADDR_VAR 0 12
39629: PUSH
39630: CALL_OW 45
39634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39635: LD_VAR 0 12
39639: PPUSH
39640: LD_VAR 0 8
39644: PPUSH
39645: LD_INT 0
39647: PPUSH
39648: CALL 41798 0 3
// end ;
39652: GO 39606
39654: POP
39655: POP
// if horses then
39656: LD_VAR 0 5
39660: IFFALSE 39727
// for i = 1 to horses do
39662: LD_ADDR_VAR 0 11
39666: PUSH
39667: DOUBLE
39668: LD_INT 1
39670: DEC
39671: ST_TO_ADDR
39672: LD_VAR 0 5
39676: PUSH
39677: FOR_TO
39678: IFFALSE 39725
// begin hc_class := 21 ;
39680: LD_ADDR_OWVAR 28
39684: PUSH
39685: LD_INT 21
39687: ST_TO_ADDR
// hc_gallery :=  ;
39688: LD_ADDR_OWVAR 33
39692: PUSH
39693: LD_STRING 
39695: ST_TO_ADDR
// animal := CreateHuman ;
39696: LD_ADDR_VAR 0 12
39700: PUSH
39701: CALL_OW 44
39705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39706: LD_VAR 0 12
39710: PPUSH
39711: LD_VAR 0 8
39715: PPUSH
39716: LD_INT 0
39718: PPUSH
39719: CALL 41798 0 3
// end ;
39723: GO 39677
39725: POP
39726: POP
// if birds then
39727: LD_VAR 0 1
39731: IFFALSE 39798
// for i = 1 to birds do
39733: LD_ADDR_VAR 0 11
39737: PUSH
39738: DOUBLE
39739: LD_INT 1
39741: DEC
39742: ST_TO_ADDR
39743: LD_VAR 0 1
39747: PUSH
39748: FOR_TO
39749: IFFALSE 39796
// begin hc_class := 18 ;
39751: LD_ADDR_OWVAR 28
39755: PUSH
39756: LD_INT 18
39758: ST_TO_ADDR
// hc_gallery =  ;
39759: LD_ADDR_OWVAR 33
39763: PUSH
39764: LD_STRING 
39766: ST_TO_ADDR
// animal := CreateHuman ;
39767: LD_ADDR_VAR 0 12
39771: PUSH
39772: CALL_OW 44
39776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39777: LD_VAR 0 12
39781: PPUSH
39782: LD_VAR 0 8
39786: PPUSH
39787: LD_INT 0
39789: PPUSH
39790: CALL 41798 0 3
// end ;
39794: GO 39748
39796: POP
39797: POP
// if tigers then
39798: LD_VAR 0 2
39802: IFFALSE 39886
// for i = 1 to tigers do
39804: LD_ADDR_VAR 0 11
39808: PUSH
39809: DOUBLE
39810: LD_INT 1
39812: DEC
39813: ST_TO_ADDR
39814: LD_VAR 0 2
39818: PUSH
39819: FOR_TO
39820: IFFALSE 39884
// begin hc_class = class_tiger ;
39822: LD_ADDR_OWVAR 28
39826: PUSH
39827: LD_INT 14
39829: ST_TO_ADDR
// hc_gallery =  ;
39830: LD_ADDR_OWVAR 33
39834: PUSH
39835: LD_STRING 
39837: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39838: LD_ADDR_OWVAR 35
39842: PUSH
39843: LD_INT 7
39845: NEG
39846: PPUSH
39847: LD_INT 7
39849: PPUSH
39850: CALL_OW 12
39854: ST_TO_ADDR
// animal := CreateHuman ;
39855: LD_ADDR_VAR 0 12
39859: PUSH
39860: CALL_OW 44
39864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39865: LD_VAR 0 12
39869: PPUSH
39870: LD_VAR 0 8
39874: PPUSH
39875: LD_INT 0
39877: PPUSH
39878: CALL 41798 0 3
// end ;
39882: GO 39819
39884: POP
39885: POP
// if apemans then
39886: LD_VAR 0 3
39890: IFFALSE 40013
// for i = 1 to apemans do
39892: LD_ADDR_VAR 0 11
39896: PUSH
39897: DOUBLE
39898: LD_INT 1
39900: DEC
39901: ST_TO_ADDR
39902: LD_VAR 0 3
39906: PUSH
39907: FOR_TO
39908: IFFALSE 40011
// begin hc_class = class_apeman ;
39910: LD_ADDR_OWVAR 28
39914: PUSH
39915: LD_INT 12
39917: ST_TO_ADDR
// hc_gallery =  ;
39918: LD_ADDR_OWVAR 33
39922: PUSH
39923: LD_STRING 
39925: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39926: LD_ADDR_OWVAR 35
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PPUSH
39935: LD_INT 2
39937: PPUSH
39938: CALL_OW 12
39942: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39943: LD_ADDR_OWVAR 31
39947: PUSH
39948: LD_INT 1
39950: PPUSH
39951: LD_INT 3
39953: PPUSH
39954: CALL_OW 12
39958: PUSH
39959: LD_INT 1
39961: PPUSH
39962: LD_INT 3
39964: PPUSH
39965: CALL_OW 12
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// animal := CreateHuman ;
39982: LD_ADDR_VAR 0 12
39986: PUSH
39987: CALL_OW 44
39991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39992: LD_VAR 0 12
39996: PPUSH
39997: LD_VAR 0 8
40001: PPUSH
40002: LD_INT 0
40004: PPUSH
40005: CALL 41798 0 3
// end ;
40009: GO 39907
40011: POP
40012: POP
// if enchidnas then
40013: LD_VAR 0 4
40017: IFFALSE 40084
// for i = 1 to enchidnas do
40019: LD_ADDR_VAR 0 11
40023: PUSH
40024: DOUBLE
40025: LD_INT 1
40027: DEC
40028: ST_TO_ADDR
40029: LD_VAR 0 4
40033: PUSH
40034: FOR_TO
40035: IFFALSE 40082
// begin hc_class = 13 ;
40037: LD_ADDR_OWVAR 28
40041: PUSH
40042: LD_INT 13
40044: ST_TO_ADDR
// hc_gallery =  ;
40045: LD_ADDR_OWVAR 33
40049: PUSH
40050: LD_STRING 
40052: ST_TO_ADDR
// animal := CreateHuman ;
40053: LD_ADDR_VAR 0 12
40057: PUSH
40058: CALL_OW 44
40062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40063: LD_VAR 0 12
40067: PPUSH
40068: LD_VAR 0 8
40072: PPUSH
40073: LD_INT 0
40075: PPUSH
40076: CALL 41798 0 3
// end ;
40080: GO 40034
40082: POP
40083: POP
// if fishes then
40084: LD_VAR 0 7
40088: IFFALSE 40155
// for i = 1 to fishes do
40090: LD_ADDR_VAR 0 11
40094: PUSH
40095: DOUBLE
40096: LD_INT 1
40098: DEC
40099: ST_TO_ADDR
40100: LD_VAR 0 7
40104: PUSH
40105: FOR_TO
40106: IFFALSE 40153
// begin hc_class = 20 ;
40108: LD_ADDR_OWVAR 28
40112: PUSH
40113: LD_INT 20
40115: ST_TO_ADDR
// hc_gallery =  ;
40116: LD_ADDR_OWVAR 33
40120: PUSH
40121: LD_STRING 
40123: ST_TO_ADDR
// animal := CreateHuman ;
40124: LD_ADDR_VAR 0 12
40128: PUSH
40129: CALL_OW 44
40133: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
40134: LD_VAR 0 12
40138: PPUSH
40139: LD_VAR 0 9
40143: PPUSH
40144: LD_INT 0
40146: PPUSH
40147: CALL 41798 0 3
// end ;
40151: GO 40105
40153: POP
40154: POP
// end ;
40155: LD_VAR 0 10
40159: RET
// export function WantHeal ( sci , unit ) ; begin
40160: LD_INT 0
40162: PPUSH
// if GetTaskList ( sci ) > 0 then
40163: LD_VAR 0 1
40167: PPUSH
40168: CALL_OW 437
40172: PUSH
40173: LD_INT 0
40175: GREATER
40176: IFFALSE 40248
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
40178: LD_VAR 0 1
40182: PPUSH
40183: CALL_OW 437
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PUSH
40192: LD_INT 1
40194: ARRAY
40195: PUSH
40196: LD_STRING l
40198: EQUAL
40199: IFFALSE 40226
40201: PUSH
40202: LD_VAR 0 1
40206: PPUSH
40207: CALL_OW 437
40211: PUSH
40212: LD_INT 1
40214: ARRAY
40215: PUSH
40216: LD_INT 4
40218: ARRAY
40219: PUSH
40220: LD_VAR 0 2
40224: EQUAL
40225: AND
40226: IFFALSE 40238
// result := true else
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: LD_INT 1
40235: ST_TO_ADDR
40236: GO 40246
// result := false ;
40238: LD_ADDR_VAR 0 3
40242: PUSH
40243: LD_INT 0
40245: ST_TO_ADDR
// end else
40246: GO 40256
// result := false ;
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 0
40255: ST_TO_ADDR
// end ;
40256: LD_VAR 0 3
40260: RET
// export function HealTarget ( sci ) ; begin
40261: LD_INT 0
40263: PPUSH
// if not sci then
40264: LD_VAR 0 1
40268: NOT
40269: IFFALSE 40273
// exit ;
40271: GO 40338
// result := 0 ;
40273: LD_ADDR_VAR 0 2
40277: PUSH
40278: LD_INT 0
40280: ST_TO_ADDR
// if GetTaskList ( sci ) then
40281: LD_VAR 0 1
40285: PPUSH
40286: CALL_OW 437
40290: IFFALSE 40338
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
40292: LD_VAR 0 1
40296: PPUSH
40297: CALL_OW 437
40301: PUSH
40302: LD_INT 1
40304: ARRAY
40305: PUSH
40306: LD_INT 1
40308: ARRAY
40309: PUSH
40310: LD_STRING l
40312: EQUAL
40313: IFFALSE 40338
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
40315: LD_ADDR_VAR 0 2
40319: PUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: CALL_OW 437
40329: PUSH
40330: LD_INT 1
40332: ARRAY
40333: PUSH
40334: LD_INT 4
40336: ARRAY
40337: ST_TO_ADDR
// end ;
40338: LD_VAR 0 2
40342: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
// if not base_units then
40349: LD_VAR 0 1
40353: NOT
40354: IFFALSE 40358
// exit ;
40356: GO 40445
// result := false ;
40358: LD_ADDR_VAR 0 2
40362: PUSH
40363: LD_INT 0
40365: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
40366: LD_ADDR_VAR 0 5
40370: PUSH
40371: LD_VAR 0 1
40375: PPUSH
40376: LD_INT 21
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PPUSH
40386: CALL_OW 72
40390: ST_TO_ADDR
// if not tmp then
40391: LD_VAR 0 5
40395: NOT
40396: IFFALSE 40400
// exit ;
40398: GO 40445
// for i in tmp do
40400: LD_ADDR_VAR 0 3
40404: PUSH
40405: LD_VAR 0 5
40409: PUSH
40410: FOR_IN
40411: IFFALSE 40443
// begin result := EnemyInRange ( i , 22 ) ;
40413: LD_ADDR_VAR 0 2
40417: PUSH
40418: LD_VAR 0 3
40422: PPUSH
40423: LD_INT 22
40425: PPUSH
40426: CALL 37870 0 2
40430: ST_TO_ADDR
// if result then
40431: LD_VAR 0 2
40435: IFFALSE 40441
// exit ;
40437: POP
40438: POP
40439: GO 40445
// end ;
40441: GO 40410
40443: POP
40444: POP
// end ;
40445: LD_VAR 0 2
40449: RET
// export function FilterByTag ( units , tag ) ; begin
40450: LD_INT 0
40452: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_INT 120
40465: PUSH
40466: LD_VAR 0 2
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PPUSH
40475: CALL_OW 72
40479: ST_TO_ADDR
// end ;
40480: LD_VAR 0 3
40484: RET
// export function IsDriver ( un ) ; begin
40485: LD_INT 0
40487: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40488: LD_ADDR_VAR 0 2
40492: PUSH
40493: LD_VAR 0 1
40497: PUSH
40498: LD_INT 55
40500: PUSH
40501: EMPTY
40502: LIST
40503: PPUSH
40504: CALL_OW 69
40508: IN
40509: ST_TO_ADDR
// end ;
40510: LD_VAR 0 2
40514: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40515: LD_INT 0
40517: PPUSH
40518: PPUSH
// list := [ ] ;
40519: LD_ADDR_VAR 0 5
40523: PUSH
40524: EMPTY
40525: ST_TO_ADDR
// case d of 0 :
40526: LD_VAR 0 3
40530: PUSH
40531: LD_INT 0
40533: DOUBLE
40534: EQUAL
40535: IFTRUE 40539
40537: GO 40672
40539: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40540: LD_ADDR_VAR 0 5
40544: PUSH
40545: LD_VAR 0 1
40549: PUSH
40550: LD_INT 4
40552: MINUS
40553: PUSH
40554: LD_VAR 0 2
40558: PUSH
40559: LD_INT 4
40561: MINUS
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: PUSH
40571: LD_VAR 0 1
40575: PUSH
40576: LD_INT 3
40578: MINUS
40579: PUSH
40580: LD_VAR 0 2
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: PUSH
40593: LD_VAR 0 1
40597: PUSH
40598: LD_INT 4
40600: PLUS
40601: PUSH
40602: LD_VAR 0 2
40606: PUSH
40607: LD_INT 4
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: LD_VAR 0 1
40619: PUSH
40620: LD_INT 3
40622: PLUS
40623: PUSH
40624: LD_VAR 0 2
40628: PUSH
40629: LD_INT 3
40631: PLUS
40632: PUSH
40633: LD_INT 5
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: PUSH
40641: LD_VAR 0 1
40645: PUSH
40646: LD_VAR 0 2
40650: PUSH
40651: LD_INT 4
40653: PLUS
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// end ; 1 :
40670: GO 41370
40672: LD_INT 1
40674: DOUBLE
40675: EQUAL
40676: IFTRUE 40680
40678: GO 40813
40680: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40681: LD_ADDR_VAR 0 5
40685: PUSH
40686: LD_VAR 0 1
40690: PUSH
40691: LD_VAR 0 2
40695: PUSH
40696: LD_INT 4
40698: MINUS
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: PUSH
40708: LD_VAR 0 1
40712: PUSH
40713: LD_INT 3
40715: MINUS
40716: PUSH
40717: LD_VAR 0 2
40721: PUSH
40722: LD_INT 3
40724: MINUS
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: PUSH
40734: LD_VAR 0 1
40738: PUSH
40739: LD_INT 4
40741: MINUS
40742: PUSH
40743: LD_VAR 0 2
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: PUSH
40756: LD_VAR 0 1
40760: PUSH
40761: LD_VAR 0 2
40765: PUSH
40766: LD_INT 3
40768: PLUS
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: PUSH
40778: LD_VAR 0 1
40782: PUSH
40783: LD_INT 4
40785: PLUS
40786: PUSH
40787: LD_VAR 0 2
40791: PUSH
40792: LD_INT 4
40794: PLUS
40795: PUSH
40796: LD_INT 5
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: ST_TO_ADDR
// end ; 2 :
40811: GO 41370
40813: LD_INT 2
40815: DOUBLE
40816: EQUAL
40817: IFTRUE 40821
40819: GO 40950
40821: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40822: LD_ADDR_VAR 0 5
40826: PUSH
40827: LD_VAR 0 1
40831: PUSH
40832: LD_VAR 0 2
40836: PUSH
40837: LD_INT 3
40839: MINUS
40840: PUSH
40841: LD_INT 3
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: PUSH
40849: LD_VAR 0 1
40853: PUSH
40854: LD_INT 4
40856: PLUS
40857: PUSH
40858: LD_VAR 0 2
40862: PUSH
40863: LD_INT 4
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: PUSH
40871: LD_VAR 0 1
40875: PUSH
40876: LD_VAR 0 2
40880: PUSH
40881: LD_INT 4
40883: PLUS
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: LIST
40892: PUSH
40893: LD_VAR 0 1
40897: PUSH
40898: LD_INT 3
40900: MINUS
40901: PUSH
40902: LD_VAR 0 2
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: LIST
40914: PUSH
40915: LD_VAR 0 1
40919: PUSH
40920: LD_INT 4
40922: MINUS
40923: PUSH
40924: LD_VAR 0 2
40928: PUSH
40929: LD_INT 4
40931: MINUS
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: ST_TO_ADDR
// end ; 3 :
40948: GO 41370
40950: LD_INT 3
40952: DOUBLE
40953: EQUAL
40954: IFTRUE 40958
40956: GO 41091
40958: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40959: LD_ADDR_VAR 0 5
40963: PUSH
40964: LD_VAR 0 1
40968: PUSH
40969: LD_INT 3
40971: PLUS
40972: PUSH
40973: LD_VAR 0 2
40977: PUSH
40978: LD_INT 4
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: PUSH
40986: LD_VAR 0 1
40990: PUSH
40991: LD_INT 4
40993: PLUS
40994: PUSH
40995: LD_VAR 0 2
40999: PUSH
41000: LD_INT 4
41002: PLUS
41003: PUSH
41004: LD_INT 5
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: LD_VAR 0 1
41016: PUSH
41017: LD_INT 4
41019: MINUS
41020: PUSH
41021: LD_VAR 0 2
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: PUSH
41034: LD_VAR 0 1
41038: PUSH
41039: LD_VAR 0 2
41043: PUSH
41044: LD_INT 4
41046: MINUS
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: PUSH
41056: LD_VAR 0 1
41060: PUSH
41061: LD_INT 3
41063: MINUS
41064: PUSH
41065: LD_VAR 0 2
41069: PUSH
41070: LD_INT 3
41072: MINUS
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: LIST
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: ST_TO_ADDR
// end ; 4 :
41089: GO 41370
41091: LD_INT 4
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41099
41097: GO 41232
41099: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
41100: LD_ADDR_VAR 0 5
41104: PUSH
41105: LD_VAR 0 1
41109: PUSH
41110: LD_VAR 0 2
41114: PUSH
41115: LD_INT 4
41117: PLUS
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: PUSH
41127: LD_VAR 0 1
41131: PUSH
41132: LD_INT 3
41134: PLUS
41135: PUSH
41136: LD_VAR 0 2
41140: PUSH
41141: LD_INT 3
41143: PLUS
41144: PUSH
41145: LD_INT 5
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: PUSH
41153: LD_VAR 0 1
41157: PUSH
41158: LD_INT 4
41160: PLUS
41161: PUSH
41162: LD_VAR 0 2
41166: PUSH
41167: LD_INT 4
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: LIST
41174: PUSH
41175: LD_VAR 0 1
41179: PUSH
41180: LD_VAR 0 2
41184: PUSH
41185: LD_INT 3
41187: MINUS
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: PUSH
41197: LD_VAR 0 1
41201: PUSH
41202: LD_INT 4
41204: MINUS
41205: PUSH
41206: LD_VAR 0 2
41210: PUSH
41211: LD_INT 4
41213: MINUS
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: ST_TO_ADDR
// end ; 5 :
41230: GO 41370
41232: LD_INT 5
41234: DOUBLE
41235: EQUAL
41236: IFTRUE 41240
41238: GO 41369
41240: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
41241: LD_ADDR_VAR 0 5
41245: PUSH
41246: LD_VAR 0 1
41250: PUSH
41251: LD_INT 4
41253: MINUS
41254: PUSH
41255: LD_VAR 0 2
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: PUSH
41268: LD_VAR 0 1
41272: PUSH
41273: LD_VAR 0 2
41277: PUSH
41278: LD_INT 4
41280: MINUS
41281: PUSH
41282: LD_INT 3
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: PUSH
41290: LD_VAR 0 1
41294: PUSH
41295: LD_INT 4
41297: PLUS
41298: PUSH
41299: LD_VAR 0 2
41303: PUSH
41304: LD_INT 4
41306: PLUS
41307: PUSH
41308: LD_INT 5
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: LIST
41315: PUSH
41316: LD_VAR 0 1
41320: PUSH
41321: LD_INT 3
41323: PLUS
41324: PUSH
41325: LD_VAR 0 2
41329: PUSH
41330: LD_INT 4
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: LIST
41337: PUSH
41338: LD_VAR 0 1
41342: PUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_INT 3
41350: PLUS
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
// end ; end ;
41367: GO 41370
41369: POP
// result := list ;
41370: LD_ADDR_VAR 0 4
41374: PUSH
41375: LD_VAR 0 5
41379: ST_TO_ADDR
// end ;
41380: LD_VAR 0 4
41384: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
41385: LD_INT 0
41387: PPUSH
41388: PPUSH
41389: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
41390: LD_VAR 0 1
41394: NOT
41395: IFTRUE 41423
41397: PUSH
41398: LD_VAR 0 2
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 4
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: IN
41421: NOT
41422: OR
41423: IFFALSE 41427
// exit ;
41425: GO 41510
// tmp := [ ] ;
41427: LD_ADDR_VAR 0 5
41431: PUSH
41432: EMPTY
41433: ST_TO_ADDR
// for i in units do
41434: LD_ADDR_VAR 0 4
41438: PUSH
41439: LD_VAR 0 1
41443: PUSH
41444: FOR_IN
41445: IFFALSE 41479
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
41447: LD_ADDR_VAR 0 5
41451: PUSH
41452: LD_VAR 0 5
41456: PPUSH
41457: LD_VAR 0 4
41461: PPUSH
41462: LD_VAR 0 2
41466: PPUSH
41467: CALL_OW 259
41471: PPUSH
41472: CALL 42905 0 2
41476: ST_TO_ADDR
41477: GO 41444
41479: POP
41480: POP
// if not tmp then
41481: LD_VAR 0 5
41485: NOT
41486: IFFALSE 41490
// exit ;
41488: GO 41510
// result := SortListByListDesc ( units , tmp ) ;
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_VAR 0 1
41499: PPUSH
41500: LD_VAR 0 5
41504: PPUSH
41505: CALL_OW 77
41509: ST_TO_ADDR
// end ;
41510: LD_VAR 0 3
41514: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41515: LD_INT 0
41517: PPUSH
41518: PPUSH
41519: PPUSH
// result := false ;
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_INT 0
41527: ST_TO_ADDR
// if not building then
41528: LD_VAR 0 2
41532: NOT
41533: IFFALSE 41537
// exit ;
41535: GO 41681
// x := GetX ( building ) ;
41537: LD_ADDR_VAR 0 4
41541: PUSH
41542: LD_VAR 0 2
41546: PPUSH
41547: CALL_OW 250
41551: ST_TO_ADDR
// y := GetY ( building ) ;
41552: LD_ADDR_VAR 0 5
41556: PUSH
41557: LD_VAR 0 2
41561: PPUSH
41562: CALL_OW 251
41566: ST_TO_ADDR
// if not x or not y then
41567: LD_VAR 0 4
41571: NOT
41572: IFTRUE 41581
41574: PUSH
41575: LD_VAR 0 5
41579: NOT
41580: OR
41581: IFFALSE 41585
// exit ;
41583: GO 41681
// if GetTaskList ( unit ) then
41585: LD_VAR 0 1
41589: PPUSH
41590: CALL_OW 437
41594: IFFALSE 41681
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41596: LD_STRING e
41598: PUSH
41599: LD_VAR 0 1
41603: PPUSH
41604: CALL_OW 437
41608: PUSH
41609: LD_INT 1
41611: ARRAY
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: EQUAL
41617: IFFALSE 41644
41619: PUSH
41620: LD_VAR 0 4
41624: PUSH
41625: LD_VAR 0 1
41629: PPUSH
41630: CALL_OW 437
41634: PUSH
41635: LD_INT 1
41637: ARRAY
41638: PUSH
41639: LD_INT 2
41641: ARRAY
41642: EQUAL
41643: AND
41644: IFFALSE 41671
41646: PUSH
41647: LD_VAR 0 5
41651: PUSH
41652: LD_VAR 0 1
41656: PPUSH
41657: CALL_OW 437
41661: PUSH
41662: LD_INT 1
41664: ARRAY
41665: PUSH
41666: LD_INT 3
41668: ARRAY
41669: EQUAL
41670: AND
41671: IFFALSE 41681
// result := true end ;
41673: LD_ADDR_VAR 0 3
41677: PUSH
41678: LD_INT 1
41680: ST_TO_ADDR
// end ;
41681: LD_VAR 0 3
41685: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41686: LD_INT 0
41688: PPUSH
// result := false ;
41689: LD_ADDR_VAR 0 4
41693: PUSH
41694: LD_INT 0
41696: ST_TO_ADDR
// if GetTaskList ( unit ) then
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 437
41706: IFFALSE 41793
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41708: LD_STRING M
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 437
41720: PUSH
41721: LD_INT 1
41723: ARRAY
41724: PUSH
41725: LD_INT 1
41727: ARRAY
41728: EQUAL
41729: IFFALSE 41756
41731: PUSH
41732: LD_VAR 0 2
41736: PUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL_OW 437
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: EQUAL
41755: AND
41756: IFFALSE 41783
41758: PUSH
41759: LD_VAR 0 3
41763: PUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL_OW 437
41773: PUSH
41774: LD_INT 1
41776: ARRAY
41777: PUSH
41778: LD_INT 3
41780: ARRAY
41781: EQUAL
41782: AND
41783: IFFALSE 41793
// result := true ;
41785: LD_ADDR_VAR 0 4
41789: PUSH
41790: LD_INT 1
41792: ST_TO_ADDR
// end ; end ;
41793: LD_VAR 0 4
41797: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41798: LD_INT 0
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
// if not unit or not area then
41804: LD_VAR 0 1
41808: NOT
41809: IFTRUE 41818
41811: PUSH
41812: LD_VAR 0 2
41816: NOT
41817: OR
41818: IFFALSE 41822
// exit ;
41820: GO 41998
// tmp := AreaToList ( area , i ) ;
41822: LD_ADDR_VAR 0 6
41826: PUSH
41827: LD_VAR 0 2
41831: PPUSH
41832: LD_VAR 0 5
41836: PPUSH
41837: CALL_OW 517
41841: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41842: LD_ADDR_VAR 0 5
41846: PUSH
41847: DOUBLE
41848: LD_INT 1
41850: DEC
41851: ST_TO_ADDR
41852: LD_VAR 0 6
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: PUSH
41861: FOR_TO
41862: IFFALSE 41996
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41864: LD_ADDR_VAR 0 7
41868: PUSH
41869: LD_VAR 0 6
41873: PUSH
41874: LD_INT 1
41876: ARRAY
41877: PUSH
41878: LD_VAR 0 5
41882: ARRAY
41883: PUSH
41884: LD_VAR 0 6
41888: PUSH
41889: LD_INT 2
41891: ARRAY
41892: PUSH
41893: LD_VAR 0 5
41897: ARRAY
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
41903: LD_INT 92
41905: PUSH
41906: LD_VAR 0 7
41910: PUSH
41911: LD_INT 1
41913: ARRAY
41914: PUSH
41915: LD_VAR 0 7
41919: PUSH
41920: LD_INT 2
41922: ARRAY
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: PPUSH
41933: CALL_OW 69
41937: PUSH
41938: LD_INT 0
41940: EQUAL
41941: IFFALSE 41994
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41943: LD_VAR 0 1
41947: PPUSH
41948: LD_VAR 0 7
41952: PUSH
41953: LD_INT 1
41955: ARRAY
41956: PPUSH
41957: LD_VAR 0 7
41961: PUSH
41962: LD_INT 2
41964: ARRAY
41965: PPUSH
41966: LD_VAR 0 3
41970: PPUSH
41971: CALL_OW 48
// result := IsPlaced ( unit ) ;
41975: LD_ADDR_VAR 0 4
41979: PUSH
41980: LD_VAR 0 1
41984: PPUSH
41985: CALL_OW 305
41989: ST_TO_ADDR
// exit ;
41990: POP
41991: POP
41992: GO 41998
// end ; end ;
41994: GO 41861
41996: POP
41997: POP
// end ;
41998: LD_VAR 0 4
42002: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42003: LD_INT 0
42005: PPUSH
42006: PPUSH
42007: PPUSH
// if not side or side > 8 then
42008: LD_VAR 0 1
42012: NOT
42013: IFTRUE 42025
42015: PUSH
42016: LD_VAR 0 1
42020: PUSH
42021: LD_INT 8
42023: GREATER
42024: OR
42025: IFFALSE 42029
// exit ;
42027: GO 42216
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42029: LD_ADDR_VAR 0 4
42033: PUSH
42034: LD_INT 22
42036: PUSH
42037: LD_VAR 0 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 21
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PPUSH
42060: CALL_OW 69
42064: ST_TO_ADDR
// if not tmp then
42065: LD_VAR 0 4
42069: NOT
42070: IFFALSE 42074
// exit ;
42072: GO 42216
// enable_addtolog := true ;
42074: LD_ADDR_OWVAR 81
42078: PUSH
42079: LD_INT 1
42081: ST_TO_ADDR
// AddToLog ( [ ) ;
42082: LD_STRING [
42084: PPUSH
42085: CALL_OW 561
// for i in tmp do
42089: LD_ADDR_VAR 0 3
42093: PUSH
42094: LD_VAR 0 4
42098: PUSH
42099: FOR_IN
42100: IFFALSE 42207
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
42102: LD_STRING [
42104: PUSH
42105: LD_VAR 0 3
42109: PPUSH
42110: CALL_OW 266
42114: STR
42115: PUSH
42116: LD_STRING , 
42118: STR
42119: PUSH
42120: LD_VAR 0 3
42124: PPUSH
42125: CALL_OW 250
42129: STR
42130: PUSH
42131: LD_STRING , 
42133: STR
42134: PUSH
42135: LD_VAR 0 3
42139: PPUSH
42140: CALL_OW 251
42144: STR
42145: PUSH
42146: LD_STRING , 
42148: STR
42149: PUSH
42150: LD_VAR 0 3
42154: PPUSH
42155: CALL_OW 254
42159: STR
42160: PUSH
42161: LD_STRING , 
42163: STR
42164: PUSH
42165: LD_VAR 0 3
42169: PPUSH
42170: LD_INT 1
42172: PPUSH
42173: CALL_OW 268
42177: STR
42178: PUSH
42179: LD_STRING , 
42181: STR
42182: PUSH
42183: LD_VAR 0 3
42187: PPUSH
42188: LD_INT 2
42190: PPUSH
42191: CALL_OW 268
42195: STR
42196: PUSH
42197: LD_STRING ],
42199: STR
42200: PPUSH
42201: CALL_OW 561
// end ;
42205: GO 42099
42207: POP
42208: POP
// AddToLog ( ]; ) ;
42209: LD_STRING ];
42211: PPUSH
42212: CALL_OW 561
// end ;
42216: LD_VAR 0 2
42220: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
42221: LD_INT 0
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
// if not area or not rate or not max then
42228: LD_VAR 0 1
42232: NOT
42233: IFTRUE 42242
42235: PUSH
42236: LD_VAR 0 2
42240: NOT
42241: OR
42242: IFTRUE 42251
42244: PUSH
42245: LD_VAR 0 4
42249: NOT
42250: OR
42251: IFFALSE 42255
// exit ;
42253: GO 42444
// while 1 do
42255: LD_INT 1
42257: IFFALSE 42444
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
42259: LD_ADDR_VAR 0 9
42263: PUSH
42264: LD_VAR 0 1
42268: PPUSH
42269: LD_INT 1
42271: PPUSH
42272: CALL_OW 287
42276: PUSH
42277: LD_INT 10
42279: MUL
42280: ST_TO_ADDR
// r := rate / 10 ;
42281: LD_ADDR_VAR 0 7
42285: PUSH
42286: LD_VAR 0 2
42290: PUSH
42291: LD_INT 10
42293: DIVREAL
42294: ST_TO_ADDR
// time := 1 1$00 ;
42295: LD_ADDR_VAR 0 8
42299: PUSH
42300: LD_INT 2100
42302: ST_TO_ADDR
// if amount < min then
42303: LD_VAR 0 9
42307: PUSH
42308: LD_VAR 0 3
42312: LESS
42313: IFFALSE 42331
// r := r * 2 else
42315: LD_ADDR_VAR 0 7
42319: PUSH
42320: LD_VAR 0 7
42324: PUSH
42325: LD_INT 2
42327: MUL
42328: ST_TO_ADDR
42329: GO 42357
// if amount > max then
42331: LD_VAR 0 9
42335: PUSH
42336: LD_VAR 0 4
42340: GREATER
42341: IFFALSE 42357
// r := r / 2 ;
42343: LD_ADDR_VAR 0 7
42347: PUSH
42348: LD_VAR 0 7
42352: PUSH
42353: LD_INT 2
42355: DIVREAL
42356: ST_TO_ADDR
// time := time / r ;
42357: LD_ADDR_VAR 0 8
42361: PUSH
42362: LD_VAR 0 8
42366: PUSH
42367: LD_VAR 0 7
42371: DIVREAL
42372: ST_TO_ADDR
// if time < 0 then
42373: LD_VAR 0 8
42377: PUSH
42378: LD_INT 0
42380: LESS
42381: IFFALSE 42398
// time := time * - 1 ;
42383: LD_ADDR_VAR 0 8
42387: PUSH
42388: LD_VAR 0 8
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: MUL
42397: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
42398: LD_VAR 0 8
42402: PUSH
42403: LD_INT 35
42405: PPUSH
42406: LD_INT 875
42408: PPUSH
42409: CALL_OW 12
42413: PLUS
42414: PPUSH
42415: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
42419: LD_INT 1
42421: PPUSH
42422: LD_INT 5
42424: PPUSH
42425: CALL_OW 12
42429: PPUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: LD_INT 1
42437: PPUSH
42438: CALL_OW 55
// end ;
42442: GO 42255
// end ;
42444: LD_VAR 0 5
42448: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
42449: LD_INT 0
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
// if not turrets or not factories then
42459: LD_VAR 0 1
42463: NOT
42464: IFTRUE 42473
42466: PUSH
42467: LD_VAR 0 2
42471: NOT
42472: OR
42473: IFFALSE 42477
// exit ;
42475: GO 42784
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
42477: LD_ADDR_VAR 0 10
42481: PUSH
42482: LD_INT 5
42484: PUSH
42485: LD_INT 6
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: LD_INT 4
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 3
42504: PUSH
42505: LD_INT 5
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 24
42519: PUSH
42520: LD_INT 25
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 23
42529: PUSH
42530: LD_INT 27
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 42
42543: PUSH
42544: LD_INT 43
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 44
42553: PUSH
42554: LD_INT 46
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 45
42563: PUSH
42564: LD_INT 47
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// result := [ ] ;
42581: LD_ADDR_VAR 0 3
42585: PUSH
42586: EMPTY
42587: ST_TO_ADDR
// for i in turrets do
42588: LD_ADDR_VAR 0 4
42592: PUSH
42593: LD_VAR 0 1
42597: PUSH
42598: FOR_IN
42599: IFFALSE 42782
// begin nat := GetNation ( i ) ;
42601: LD_ADDR_VAR 0 7
42605: PUSH
42606: LD_VAR 0 4
42610: PPUSH
42611: CALL_OW 248
42615: ST_TO_ADDR
// weapon := 0 ;
42616: LD_ADDR_VAR 0 8
42620: PUSH
42621: LD_INT 0
42623: ST_TO_ADDR
// if not nat then
42624: LD_VAR 0 7
42628: NOT
42629: IFFALSE 42633
// continue ;
42631: GO 42598
// for j in list [ nat ] do
42633: LD_ADDR_VAR 0 5
42637: PUSH
42638: LD_VAR 0 10
42642: PUSH
42643: LD_VAR 0 7
42647: ARRAY
42648: PUSH
42649: FOR_IN
42650: IFFALSE 42691
// if GetBWeapon ( i ) = j [ 1 ] then
42652: LD_VAR 0 4
42656: PPUSH
42657: CALL_OW 269
42661: PUSH
42662: LD_VAR 0 5
42666: PUSH
42667: LD_INT 1
42669: ARRAY
42670: EQUAL
42671: IFFALSE 42689
// begin weapon := j [ 2 ] ;
42673: LD_ADDR_VAR 0 8
42677: PUSH
42678: LD_VAR 0 5
42682: PUSH
42683: LD_INT 2
42685: ARRAY
42686: ST_TO_ADDR
// break ;
42687: GO 42691
// end ;
42689: GO 42649
42691: POP
42692: POP
// if not weapon then
42693: LD_VAR 0 8
42697: NOT
42698: IFFALSE 42702
// continue ;
42700: GO 42598
// for k in factories do
42702: LD_ADDR_VAR 0 6
42706: PUSH
42707: LD_VAR 0 2
42711: PUSH
42712: FOR_IN
42713: IFFALSE 42778
// begin weapons := AvailableWeaponList ( k ) ;
42715: LD_ADDR_VAR 0 9
42719: PUSH
42720: LD_VAR 0 6
42724: PPUSH
42725: CALL_OW 478
42729: ST_TO_ADDR
// if not weapons then
42730: LD_VAR 0 9
42734: NOT
42735: IFFALSE 42739
// continue ;
42737: GO 42712
// if weapon in weapons then
42739: LD_VAR 0 8
42743: PUSH
42744: LD_VAR 0 9
42748: IN
42749: IFFALSE 42776
// begin result := [ i , weapon ] ;
42751: LD_ADDR_VAR 0 3
42755: PUSH
42756: LD_VAR 0 4
42760: PUSH
42761: LD_VAR 0 8
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: ST_TO_ADDR
// exit ;
42770: POP
42771: POP
42772: POP
42773: POP
42774: GO 42784
// end ; end ;
42776: GO 42712
42778: POP
42779: POP
// end ;
42780: GO 42598
42782: POP
42783: POP
// end ;
42784: LD_VAR 0 3
42788: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42789: LD_INT 0
42791: PPUSH
// if not side or side > 8 then
42792: LD_VAR 0 3
42796: NOT
42797: IFTRUE 42809
42799: PUSH
42800: LD_VAR 0 3
42804: PUSH
42805: LD_INT 8
42807: GREATER
42808: OR
42809: IFFALSE 42813
// exit ;
42811: GO 42872
// if not range then
42813: LD_VAR 0 4
42817: NOT
42818: IFFALSE 42829
// range := - 12 ;
42820: LD_ADDR_VAR 0 4
42824: PUSH
42825: LD_INT 12
42827: NEG
42828: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42829: LD_VAR 0 1
42833: PPUSH
42834: LD_VAR 0 2
42838: PPUSH
42839: LD_VAR 0 3
42843: PPUSH
42844: LD_VAR 0 4
42848: PPUSH
42849: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42853: LD_VAR 0 1
42857: PPUSH
42858: LD_VAR 0 2
42862: PPUSH
42863: LD_VAR 0 3
42867: PPUSH
42868: CALL_OW 331
// end ;
42872: LD_VAR 0 5
42876: RET
// export function Video ( mode ) ; begin
42877: LD_INT 0
42879: PPUSH
// ingame_video = mode ;
42880: LD_ADDR_OWVAR 52
42884: PUSH
42885: LD_VAR 0 1
42889: ST_TO_ADDR
// interface_hidden = mode ;
42890: LD_ADDR_OWVAR 54
42894: PUSH
42895: LD_VAR 0 1
42899: ST_TO_ADDR
// end ;
42900: LD_VAR 0 2
42904: RET
// export function Join ( array , element ) ; begin
42905: LD_INT 0
42907: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42908: LD_ADDR_VAR 0 3
42912: PUSH
42913: LD_VAR 0 1
42917: PPUSH
42918: LD_VAR 0 1
42922: PUSH
42923: LD_INT 1
42925: PLUS
42926: PPUSH
42927: LD_VAR 0 2
42931: PPUSH
42932: CALL_OW 1
42936: ST_TO_ADDR
// end ;
42937: LD_VAR 0 3
42941: RET
// export function JoinUnion ( array , element ) ; begin
42942: LD_INT 0
42944: PPUSH
// result := array union element ;
42945: LD_ADDR_VAR 0 3
42949: PUSH
42950: LD_VAR 0 1
42954: PUSH
42955: LD_VAR 0 2
42959: UNION
42960: ST_TO_ADDR
// end ;
42961: LD_VAR 0 3
42965: RET
// export function GetBehemoths ( side ) ; begin
42966: LD_INT 0
42968: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42969: LD_ADDR_VAR 0 2
42973: PUSH
42974: LD_INT 22
42976: PUSH
42977: LD_VAR 0 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 31
42988: PUSH
42989: LD_INT 25
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PPUSH
43000: CALL_OW 69
43004: ST_TO_ADDR
// end ;
43005: LD_VAR 0 2
43009: RET
// export function Shuffle ( array ) ; var i , index ; begin
43010: LD_INT 0
43012: PPUSH
43013: PPUSH
43014: PPUSH
// result := [ ] ;
43015: LD_ADDR_VAR 0 2
43019: PUSH
43020: EMPTY
43021: ST_TO_ADDR
// if not array then
43022: LD_VAR 0 1
43026: NOT
43027: IFFALSE 43031
// exit ;
43029: GO 43130
// Randomize ;
43031: CALL_OW 10
// for i = array downto 1 do
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: DOUBLE
43041: LD_VAR 0 1
43045: INC
43046: ST_TO_ADDR
43047: LD_INT 1
43049: PUSH
43050: FOR_DOWNTO
43051: IFFALSE 43128
// begin index := rand ( 1 , array ) ;
43053: LD_ADDR_VAR 0 4
43057: PUSH
43058: LD_INT 1
43060: PPUSH
43061: LD_VAR 0 1
43065: PPUSH
43066: CALL_OW 12
43070: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43071: LD_ADDR_VAR 0 2
43075: PUSH
43076: LD_VAR 0 2
43080: PPUSH
43081: LD_VAR 0 2
43085: PUSH
43086: LD_INT 1
43088: PLUS
43089: PPUSH
43090: LD_VAR 0 1
43094: PUSH
43095: LD_VAR 0 4
43099: ARRAY
43100: PPUSH
43101: CALL_OW 2
43105: ST_TO_ADDR
// array := Delete ( array , index ) ;
43106: LD_ADDR_VAR 0 1
43110: PUSH
43111: LD_VAR 0 1
43115: PPUSH
43116: LD_VAR 0 4
43120: PPUSH
43121: CALL_OW 3
43125: ST_TO_ADDR
// end ;
43126: GO 43050
43128: POP
43129: POP
// end ;
43130: LD_VAR 0 2
43134: RET
// export function GetBaseMaterials ( base ) ; begin
43135: LD_INT 0
43137: PPUSH
// result := [ 0 , 0 , 0 ] ;
43138: LD_ADDR_VAR 0 2
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: ST_TO_ADDR
// if not base then
43157: LD_VAR 0 1
43161: NOT
43162: IFFALSE 43166
// exit ;
43164: GO 43215
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
43166: LD_ADDR_VAR 0 2
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: LD_INT 1
43178: PPUSH
43179: CALL_OW 275
43183: PUSH
43184: LD_VAR 0 1
43188: PPUSH
43189: LD_INT 2
43191: PPUSH
43192: CALL_OW 275
43196: PUSH
43197: LD_VAR 0 1
43201: PPUSH
43202: LD_INT 3
43204: PPUSH
43205: CALL_OW 275
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// end ;
43215: LD_VAR 0 2
43219: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
43220: LD_INT 0
43222: PPUSH
43223: PPUSH
// result := array ;
43224: LD_ADDR_VAR 0 3
43228: PUSH
43229: LD_VAR 0 1
43233: ST_TO_ADDR
// if size >= result then
43234: LD_VAR 0 2
43238: PUSH
43239: LD_VAR 0 3
43243: GREATEREQUAL
43244: IFFALSE 43248
// exit ;
43246: GO 43298
// if size then
43248: LD_VAR 0 2
43252: IFFALSE 43298
// for i := array downto size do
43254: LD_ADDR_VAR 0 4
43258: PUSH
43259: DOUBLE
43260: LD_VAR 0 1
43264: INC
43265: ST_TO_ADDR
43266: LD_VAR 0 2
43270: PUSH
43271: FOR_DOWNTO
43272: IFFALSE 43296
// result := Delete ( result , result ) ;
43274: LD_ADDR_VAR 0 3
43278: PUSH
43279: LD_VAR 0 3
43283: PPUSH
43284: LD_VAR 0 3
43288: PPUSH
43289: CALL_OW 3
43293: ST_TO_ADDR
43294: GO 43271
43296: POP
43297: POP
// end ;
43298: LD_VAR 0 3
43302: RET
// export function ComExit ( unit ) ; var tmp ; begin
43303: LD_INT 0
43305: PPUSH
43306: PPUSH
// if not IsInUnit ( unit ) then
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 310
43316: NOT
43317: IFFALSE 43321
// exit ;
43319: GO 43381
// tmp := IsInUnit ( unit ) ;
43321: LD_ADDR_VAR 0 3
43325: PUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 310
43335: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
43336: LD_VAR 0 3
43340: PPUSH
43341: CALL_OW 247
43345: PUSH
43346: LD_INT 2
43348: EQUAL
43349: IFFALSE 43362
// ComExitVehicle ( unit ) else
43351: LD_VAR 0 1
43355: PPUSH
43356: CALL_OW 121
43360: GO 43371
// ComExitBuilding ( unit ) ;
43362: LD_VAR 0 1
43366: PPUSH
43367: CALL_OW 122
// result := tmp ;
43371: LD_ADDR_VAR 0 2
43375: PUSH
43376: LD_VAR 0 3
43380: ST_TO_ADDR
// end ;
43381: LD_VAR 0 2
43385: RET
// export function ComExitAll ( units ) ; var i ; begin
43386: LD_INT 0
43388: PPUSH
43389: PPUSH
// if not units then
43390: LD_VAR 0 1
43394: NOT
43395: IFFALSE 43399
// exit ;
43397: GO 43425
// for i in units do
43399: LD_ADDR_VAR 0 3
43403: PUSH
43404: LD_VAR 0 1
43408: PUSH
43409: FOR_IN
43410: IFFALSE 43423
// ComExit ( i ) ;
43412: LD_VAR 0 3
43416: PPUSH
43417: CALL 43303 0 1
43421: GO 43409
43423: POP
43424: POP
// end ;
43425: LD_VAR 0 2
43429: RET
// export function ResetHc ; begin
43430: LD_INT 0
43432: PPUSH
// InitHc ;
43433: CALL_OW 19
// hc_importance := 0 ;
43437: LD_ADDR_OWVAR 32
43441: PUSH
43442: LD_INT 0
43444: ST_TO_ADDR
// end ;
43445: LD_VAR 0 1
43449: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
43450: LD_INT 0
43452: PPUSH
43453: PPUSH
43454: PPUSH
// _x := ( x1 + x2 ) div 2 ;
43455: LD_ADDR_VAR 0 6
43459: PUSH
43460: LD_VAR 0 1
43464: PUSH
43465: LD_VAR 0 3
43469: PLUS
43470: PUSH
43471: LD_INT 2
43473: DIV
43474: ST_TO_ADDR
// if _x < 0 then
43475: LD_VAR 0 6
43479: PUSH
43480: LD_INT 0
43482: LESS
43483: IFFALSE 43500
// _x := _x * - 1 ;
43485: LD_ADDR_VAR 0 6
43489: PUSH
43490: LD_VAR 0 6
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: MUL
43499: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43500: LD_ADDR_VAR 0 7
43504: PUSH
43505: LD_VAR 0 2
43509: PUSH
43510: LD_VAR 0 4
43514: PLUS
43515: PUSH
43516: LD_INT 2
43518: DIV
43519: ST_TO_ADDR
// if _y < 0 then
43520: LD_VAR 0 7
43524: PUSH
43525: LD_INT 0
43527: LESS
43528: IFFALSE 43545
// _y := _y * - 1 ;
43530: LD_ADDR_VAR 0 7
43534: PUSH
43535: LD_VAR 0 7
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: MUL
43544: ST_TO_ADDR
// result := [ _x , _y ] ;
43545: LD_ADDR_VAR 0 5
43549: PUSH
43550: LD_VAR 0 6
43554: PUSH
43555: LD_VAR 0 7
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: ST_TO_ADDR
// end ;
43564: LD_VAR 0 5
43568: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43569: LD_INT 0
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// task := GetTaskList ( unit ) ;
43575: LD_ADDR_VAR 0 7
43579: PUSH
43580: LD_VAR 0 1
43584: PPUSH
43585: CALL_OW 437
43589: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43590: LD_VAR 0 7
43594: NOT
43595: IFFALSE 43614
43597: PUSH
43598: LD_VAR 0 1
43602: PPUSH
43603: LD_VAR 0 2
43607: PPUSH
43608: CALL_OW 308
43612: NOT
43613: AND
43614: IFFALSE 43618
// exit ;
43616: GO 43736
// if IsInArea ( unit , area ) then
43618: LD_VAR 0 1
43622: PPUSH
43623: LD_VAR 0 2
43627: PPUSH
43628: CALL_OW 308
43632: IFFALSE 43650
// begin ComMoveToArea ( unit , goAway ) ;
43634: LD_VAR 0 1
43638: PPUSH
43639: LD_VAR 0 3
43643: PPUSH
43644: CALL_OW 113
// exit ;
43648: GO 43736
// end ; if task [ 1 ] [ 1 ] <> M then
43650: LD_VAR 0 7
43654: PUSH
43655: LD_INT 1
43657: ARRAY
43658: PUSH
43659: LD_INT 1
43661: ARRAY
43662: PUSH
43663: LD_STRING M
43665: NONEQUAL
43666: IFFALSE 43670
// exit ;
43668: GO 43736
// x := task [ 1 ] [ 2 ] ;
43670: LD_ADDR_VAR 0 5
43674: PUSH
43675: LD_VAR 0 7
43679: PUSH
43680: LD_INT 1
43682: ARRAY
43683: PUSH
43684: LD_INT 2
43686: ARRAY
43687: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43688: LD_ADDR_VAR 0 6
43692: PUSH
43693: LD_VAR 0 7
43697: PUSH
43698: LD_INT 1
43700: ARRAY
43701: PUSH
43702: LD_INT 3
43704: ARRAY
43705: ST_TO_ADDR
// if InArea ( x , y , area ) then
43706: LD_VAR 0 5
43710: PPUSH
43711: LD_VAR 0 6
43715: PPUSH
43716: LD_VAR 0 2
43720: PPUSH
43721: CALL_OW 309
43725: IFFALSE 43736
// ComStop ( unit ) ;
43727: LD_VAR 0 1
43731: PPUSH
43732: CALL_OW 141
// end ;
43736: LD_VAR 0 4
43740: RET
// export function Abs ( value ) ; begin
43741: LD_INT 0
43743: PPUSH
// result := value ;
43744: LD_ADDR_VAR 0 2
43748: PUSH
43749: LD_VAR 0 1
43753: ST_TO_ADDR
// if value < 0 then
43754: LD_VAR 0 1
43758: PUSH
43759: LD_INT 0
43761: LESS
43762: IFFALSE 43779
// result := value * - 1 ;
43764: LD_ADDR_VAR 0 2
43768: PUSH
43769: LD_VAR 0 1
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: MUL
43778: ST_TO_ADDR
// end ;
43779: LD_VAR 0 2
43783: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43784: LD_INT 0
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
// if not unit or not building then
43794: LD_VAR 0 1
43798: NOT
43799: IFTRUE 43808
43801: PUSH
43802: LD_VAR 0 2
43806: NOT
43807: OR
43808: IFFALSE 43812
// exit ;
43810: GO 44040
// x := GetX ( building ) ;
43812: LD_ADDR_VAR 0 4
43816: PUSH
43817: LD_VAR 0 2
43821: PPUSH
43822: CALL_OW 250
43826: ST_TO_ADDR
// y := GetY ( building ) ;
43827: LD_ADDR_VAR 0 6
43831: PUSH
43832: LD_VAR 0 2
43836: PPUSH
43837: CALL_OW 251
43841: ST_TO_ADDR
// d := GetDir ( building ) ;
43842: LD_ADDR_VAR 0 8
43846: PUSH
43847: LD_VAR 0 2
43851: PPUSH
43852: CALL_OW 254
43856: ST_TO_ADDR
// r := 4 ;
43857: LD_ADDR_VAR 0 9
43861: PUSH
43862: LD_INT 4
43864: ST_TO_ADDR
// for i := 1 to 5 do
43865: LD_ADDR_VAR 0 10
43869: PUSH
43870: DOUBLE
43871: LD_INT 1
43873: DEC
43874: ST_TO_ADDR
43875: LD_INT 5
43877: PUSH
43878: FOR_TO
43879: IFFALSE 44038
// begin _x := ShiftX ( x , d , r + i ) ;
43881: LD_ADDR_VAR 0 5
43885: PUSH
43886: LD_VAR 0 4
43890: PPUSH
43891: LD_VAR 0 8
43895: PPUSH
43896: LD_VAR 0 9
43900: PUSH
43901: LD_VAR 0 10
43905: PLUS
43906: PPUSH
43907: CALL_OW 272
43911: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43912: LD_ADDR_VAR 0 7
43916: PUSH
43917: LD_VAR 0 6
43921: PPUSH
43922: LD_VAR 0 8
43926: PPUSH
43927: LD_VAR 0 9
43931: PUSH
43932: LD_VAR 0 10
43936: PLUS
43937: PPUSH
43938: CALL_OW 273
43942: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43943: LD_VAR 0 5
43947: PPUSH
43948: LD_VAR 0 7
43952: PPUSH
43953: CALL_OW 488
43957: IFFALSE 43992
43959: PUSH
43960: LD_VAR 0 5
43964: PPUSH
43965: LD_VAR 0 7
43969: PPUSH
43970: CALL_OW 428
43974: PPUSH
43975: CALL_OW 247
43979: PUSH
43980: LD_INT 3
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: IN
43990: NOT
43991: AND
43992: IFFALSE 44036
// begin ComMoveXY ( unit , _x , _y ) ;
43994: LD_VAR 0 1
43998: PPUSH
43999: LD_VAR 0 5
44003: PPUSH
44004: LD_VAR 0 7
44008: PPUSH
44009: CALL_OW 111
// result := [ _x , _y ] ;
44013: LD_ADDR_VAR 0 3
44017: PUSH
44018: LD_VAR 0 5
44022: PUSH
44023: LD_VAR 0 7
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: ST_TO_ADDR
// exit ;
44032: POP
44033: POP
44034: GO 44040
// end ; end ;
44036: GO 43878
44038: POP
44039: POP
// end ;
44040: LD_VAR 0 3
44044: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44045: LD_INT 0
44047: PPUSH
44048: PPUSH
44049: PPUSH
// result := 0 ;
44050: LD_ADDR_VAR 0 3
44054: PUSH
44055: LD_INT 0
44057: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44058: LD_VAR 0 1
44062: PUSH
44063: LD_INT 0
44065: LESS
44066: IFTRUE 44078
44068: PUSH
44069: LD_VAR 0 1
44073: PUSH
44074: LD_INT 8
44076: GREATER
44077: OR
44078: IFTRUE 44090
44080: PUSH
44081: LD_VAR 0 2
44085: PUSH
44086: LD_INT 0
44088: LESS
44089: OR
44090: IFTRUE 44102
44092: PUSH
44093: LD_VAR 0 2
44097: PUSH
44098: LD_INT 8
44100: GREATER
44101: OR
44102: IFFALSE 44106
// exit ;
44104: GO 44181
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
44106: LD_ADDR_VAR 0 4
44110: PUSH
44111: LD_INT 22
44113: PUSH
44114: LD_VAR 0 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PPUSH
44123: CALL_OW 69
44127: PUSH
44128: FOR_IN
44129: IFFALSE 44179
// begin un := UnitShoot ( i ) ;
44131: LD_ADDR_VAR 0 5
44135: PUSH
44136: LD_VAR 0 4
44140: PPUSH
44141: CALL_OW 504
44145: ST_TO_ADDR
// if GetSide ( un ) = side1 then
44146: LD_VAR 0 5
44150: PPUSH
44151: CALL_OW 255
44155: PUSH
44156: LD_VAR 0 1
44160: EQUAL
44161: IFFALSE 44177
// begin result := un ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_VAR 0 5
44172: ST_TO_ADDR
// exit ;
44173: POP
44174: POP
44175: GO 44181
// end ; end ;
44177: GO 44128
44179: POP
44180: POP
// end ;
44181: LD_VAR 0 3
44185: RET
// export function GetCargoBay ( units ) ; begin
44186: LD_INT 0
44188: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
44189: LD_ADDR_VAR 0 2
44193: PUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 34
44204: PUSH
44205: LD_INT 12
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 34
44214: PUSH
44215: LD_INT 51
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 34
44224: PUSH
44225: LD_INT 32
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 34
44234: PUSH
44235: LD_INT 89
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: PPUSH
44249: CALL_OW 72
44253: ST_TO_ADDR
// end ;
44254: LD_VAR 0 2
44258: RET
// export function Negate ( value ) ; begin
44259: LD_INT 0
44261: PPUSH
// result := not value ;
44262: LD_ADDR_VAR 0 2
44266: PUSH
44267: LD_VAR 0 1
44271: NOT
44272: ST_TO_ADDR
// end ;
44273: LD_VAR 0 2
44277: RET
// export function Inc ( value ) ; begin
44278: LD_INT 0
44280: PPUSH
// result := value + 1 ;
44281: LD_ADDR_VAR 0 2
44285: PUSH
44286: LD_VAR 0 1
44290: PUSH
44291: LD_INT 1
44293: PLUS
44294: ST_TO_ADDR
// end ;
44295: LD_VAR 0 2
44299: RET
// export function Dec ( value ) ; begin
44300: LD_INT 0
44302: PPUSH
// result := value - 1 ;
44303: LD_ADDR_VAR 0 2
44307: PUSH
44308: LD_VAR 0 1
44312: PUSH
44313: LD_INT 1
44315: MINUS
44316: ST_TO_ADDR
// end ;
44317: LD_VAR 0 2
44321: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
44322: LD_INT 0
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
44332: LD_VAR 0 1
44336: PPUSH
44337: LD_VAR 0 2
44341: PPUSH
44342: CALL_OW 488
44346: NOT
44347: IFTRUE 44366
44349: PUSH
44350: LD_VAR 0 3
44354: PPUSH
44355: LD_VAR 0 4
44359: PPUSH
44360: CALL_OW 488
44364: NOT
44365: OR
44366: IFFALSE 44379
// begin result := - 1 ;
44368: LD_ADDR_VAR 0 5
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: ST_TO_ADDR
// exit ;
44377: GO 44614
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
44379: LD_ADDR_VAR 0 12
44383: PUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: LD_VAR 0 2
44393: PPUSH
44394: LD_VAR 0 3
44398: PPUSH
44399: LD_VAR 0 4
44403: PPUSH
44404: CALL 43450 0 4
44408: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
44409: LD_ADDR_VAR 0 11
44413: PUSH
44414: LD_VAR 0 1
44418: PPUSH
44419: LD_VAR 0 2
44423: PPUSH
44424: LD_VAR 0 12
44428: PUSH
44429: LD_INT 1
44431: ARRAY
44432: PPUSH
44433: LD_VAR 0 12
44437: PUSH
44438: LD_INT 2
44440: ARRAY
44441: PPUSH
44442: CALL_OW 298
44446: ST_TO_ADDR
// distance := 9999 ;
44447: LD_ADDR_VAR 0 10
44451: PUSH
44452: LD_INT 9999
44454: ST_TO_ADDR
// for i := 0 to 5 do
44455: LD_ADDR_VAR 0 6
44459: PUSH
44460: DOUBLE
44461: LD_INT 0
44463: DEC
44464: ST_TO_ADDR
44465: LD_INT 5
44467: PUSH
44468: FOR_TO
44469: IFFALSE 44612
// begin _x := ShiftX ( x1 , i , centerDist ) ;
44471: LD_ADDR_VAR 0 7
44475: PUSH
44476: LD_VAR 0 1
44480: PPUSH
44481: LD_VAR 0 6
44485: PPUSH
44486: LD_VAR 0 11
44490: PPUSH
44491: CALL_OW 272
44495: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
44496: LD_ADDR_VAR 0 8
44500: PUSH
44501: LD_VAR 0 2
44505: PPUSH
44506: LD_VAR 0 6
44510: PPUSH
44511: LD_VAR 0 11
44515: PPUSH
44516: CALL_OW 273
44520: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44521: LD_VAR 0 7
44525: PPUSH
44526: LD_VAR 0 8
44530: PPUSH
44531: CALL_OW 488
44535: NOT
44536: IFFALSE 44540
// continue ;
44538: GO 44468
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44540: LD_ADDR_VAR 0 9
44544: PUSH
44545: LD_VAR 0 12
44549: PUSH
44550: LD_INT 1
44552: ARRAY
44553: PPUSH
44554: LD_VAR 0 12
44558: PUSH
44559: LD_INT 2
44561: ARRAY
44562: PPUSH
44563: LD_VAR 0 7
44567: PPUSH
44568: LD_VAR 0 8
44572: PPUSH
44573: CALL_OW 298
44577: ST_TO_ADDR
// if tmp < distance then
44578: LD_VAR 0 9
44582: PUSH
44583: LD_VAR 0 10
44587: LESS
44588: IFFALSE 44610
// begin result := i ;
44590: LD_ADDR_VAR 0 5
44594: PUSH
44595: LD_VAR 0 6
44599: ST_TO_ADDR
// distance := tmp ;
44600: LD_ADDR_VAR 0 10
44604: PUSH
44605: LD_VAR 0 9
44609: ST_TO_ADDR
// end ; end ;
44610: GO 44468
44612: POP
44613: POP
// end ;
44614: LD_VAR 0 5
44618: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44619: LD_INT 0
44621: PPUSH
44622: PPUSH
// if not driver or not IsInUnit ( driver ) then
44623: LD_VAR 0 1
44627: NOT
44628: IFTRUE 44642
44630: PUSH
44631: LD_VAR 0 1
44635: PPUSH
44636: CALL_OW 310
44640: NOT
44641: OR
44642: IFFALSE 44646
// exit ;
44644: GO 44736
// vehicle := IsInUnit ( driver ) ;
44646: LD_ADDR_VAR 0 3
44650: PUSH
44651: LD_VAR 0 1
44655: PPUSH
44656: CALL_OW 310
44660: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44661: LD_VAR 0 1
44665: PPUSH
44666: LD_STRING \
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: PUSH
44696: LD_STRING E
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_VAR 0 3
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PPUSH
44732: CALL_OW 446
// end ;
44736: LD_VAR 0 2
44740: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44741: LD_INT 0
44743: PPUSH
44744: PPUSH
// if not driver or not IsInUnit ( driver ) then
44745: LD_VAR 0 1
44749: NOT
44750: IFTRUE 44764
44752: PUSH
44753: LD_VAR 0 1
44757: PPUSH
44758: CALL_OW 310
44762: NOT
44763: OR
44764: IFFALSE 44768
// exit ;
44766: GO 44858
// vehicle := IsInUnit ( driver ) ;
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_VAR 0 1
44777: PPUSH
44778: CALL_OW 310
44782: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44783: LD_VAR 0 1
44787: PPUSH
44788: LD_STRING \
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: PUSH
44818: LD_STRING E
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_VAR 0 3
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PPUSH
44854: CALL_OW 447
// end ;
44858: LD_VAR 0 2
44862: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44863: LD_INT 0
44865: PPUSH
44866: PPUSH
44867: PPUSH
// tmp := [ ] ;
44868: LD_ADDR_VAR 0 5
44872: PUSH
44873: EMPTY
44874: ST_TO_ADDR
// for i in units do
44875: LD_ADDR_VAR 0 4
44879: PUSH
44880: LD_VAR 0 1
44884: PUSH
44885: FOR_IN
44886: IFFALSE 44924
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44888: LD_ADDR_VAR 0 5
44892: PUSH
44893: LD_VAR 0 5
44897: PPUSH
44898: LD_VAR 0 5
44902: PUSH
44903: LD_INT 1
44905: PLUS
44906: PPUSH
44907: LD_VAR 0 4
44911: PPUSH
44912: CALL_OW 256
44916: PPUSH
44917: CALL_OW 2
44921: ST_TO_ADDR
44922: GO 44885
44924: POP
44925: POP
// if not tmp then
44926: LD_VAR 0 5
44930: NOT
44931: IFFALSE 44935
// exit ;
44933: GO 44983
// if asc then
44935: LD_VAR 0 2
44939: IFFALSE 44963
// result := SortListByListAsc ( units , tmp ) else
44941: LD_ADDR_VAR 0 3
44945: PUSH
44946: LD_VAR 0 1
44950: PPUSH
44951: LD_VAR 0 5
44955: PPUSH
44956: CALL_OW 76
44960: ST_TO_ADDR
44961: GO 44983
// result := SortListByListDesc ( units , tmp ) ;
44963: LD_ADDR_VAR 0 3
44967: PUSH
44968: LD_VAR 0 1
44972: PPUSH
44973: LD_VAR 0 5
44977: PPUSH
44978: CALL_OW 77
44982: ST_TO_ADDR
// end ;
44983: LD_VAR 0 3
44987: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44988: LD_INT 0
44990: PPUSH
44991: PPUSH
// task := GetTaskList ( mech ) ;
44992: LD_ADDR_VAR 0 4
44996: PUSH
44997: LD_VAR 0 1
45001: PPUSH
45002: CALL_OW 437
45006: ST_TO_ADDR
// if not task then
45007: LD_VAR 0 4
45011: NOT
45012: IFFALSE 45016
// exit ;
45014: GO 45060
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45016: LD_ADDR_VAR 0 3
45020: PUSH
45021: LD_VAR 0 4
45025: PUSH
45026: LD_INT 1
45028: ARRAY
45029: PUSH
45030: LD_INT 1
45032: ARRAY
45033: PUSH
45034: LD_STRING r
45036: EQUAL
45037: IFFALSE 45059
45039: PUSH
45040: LD_VAR 0 4
45044: PUSH
45045: LD_INT 1
45047: ARRAY
45048: PUSH
45049: LD_INT 4
45051: ARRAY
45052: PUSH
45053: LD_VAR 0 2
45057: EQUAL
45058: AND
45059: ST_TO_ADDR
// end ;
45060: LD_VAR 0 3
45064: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45065: LD_INT 0
45067: PPUSH
// SetDir ( unit , d ) ;
45068: LD_VAR 0 1
45072: PPUSH
45073: LD_VAR 0 4
45077: PPUSH
45078: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
45082: LD_ADDR_VAR 0 6
45086: PUSH
45087: LD_VAR 0 1
45091: PPUSH
45092: LD_VAR 0 2
45096: PPUSH
45097: LD_VAR 0 3
45101: PPUSH
45102: LD_VAR 0 5
45106: PPUSH
45107: CALL_OW 48
45111: ST_TO_ADDR
// end ;
45112: LD_VAR 0 6
45116: RET
// export function ToNaturalNumber ( number ) ; begin
45117: LD_INT 0
45119: PPUSH
// result := number div 1 ;
45120: LD_ADDR_VAR 0 2
45124: PUSH
45125: LD_VAR 0 1
45129: PUSH
45130: LD_INT 1
45132: DIV
45133: ST_TO_ADDR
// if number < 0 then
45134: LD_VAR 0 1
45138: PUSH
45139: LD_INT 0
45141: LESS
45142: IFFALSE 45152
// result := 0 ;
45144: LD_ADDR_VAR 0 2
45148: PUSH
45149: LD_INT 0
45151: ST_TO_ADDR
// end ;
45152: LD_VAR 0 2
45156: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
45157: LD_INT 0
45159: PPUSH
45160: PPUSH
45161: PPUSH
// if not buildings then
45162: LD_VAR 0 1
45166: NOT
45167: IFFALSE 45171
// exit ;
45169: GO 45286
// tmp := [ ] ;
45171: LD_ADDR_VAR 0 5
45175: PUSH
45176: EMPTY
45177: ST_TO_ADDR
// for b in buildings do
45178: LD_ADDR_VAR 0 4
45182: PUSH
45183: LD_VAR 0 1
45187: PUSH
45188: FOR_IN
45189: IFFALSE 45227
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
45191: LD_ADDR_VAR 0 5
45195: PUSH
45196: LD_VAR 0 5
45200: PPUSH
45201: LD_VAR 0 5
45205: PUSH
45206: LD_INT 1
45208: PLUS
45209: PPUSH
45210: LD_VAR 0 4
45214: PPUSH
45215: CALL_OW 266
45219: PPUSH
45220: CALL_OW 1
45224: ST_TO_ADDR
45225: GO 45188
45227: POP
45228: POP
// if not tmp then
45229: LD_VAR 0 5
45233: NOT
45234: IFFALSE 45238
// exit ;
45236: GO 45286
// if asc then
45238: LD_VAR 0 2
45242: IFFALSE 45266
// result := SortListByListAsc ( buildings , tmp ) else
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_VAR 0 1
45253: PPUSH
45254: LD_VAR 0 5
45258: PPUSH
45259: CALL_OW 76
45263: ST_TO_ADDR
45264: GO 45286
// result := SortListByListDesc ( buildings , tmp ) ;
45266: LD_ADDR_VAR 0 3
45270: PUSH
45271: LD_VAR 0 1
45275: PPUSH
45276: LD_VAR 0 5
45280: PPUSH
45281: CALL_OW 77
45285: ST_TO_ADDR
// end ;
45286: LD_VAR 0 3
45290: RET
// export function SortByClass ( units , class ) ; var un ; begin
45291: LD_INT 0
45293: PPUSH
45294: PPUSH
// if not units or not class then
45295: LD_VAR 0 1
45299: NOT
45300: IFTRUE 45309
45302: PUSH
45303: LD_VAR 0 2
45307: NOT
45308: OR
45309: IFFALSE 45313
// exit ;
45311: GO 45408
// result := [ ] ;
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: EMPTY
45319: ST_TO_ADDR
// for un in units do
45320: LD_ADDR_VAR 0 4
45324: PUSH
45325: LD_VAR 0 1
45329: PUSH
45330: FOR_IN
45331: IFFALSE 45406
// if GetClass ( un ) = class then
45333: LD_VAR 0 4
45337: PPUSH
45338: CALL_OW 257
45342: PUSH
45343: LD_VAR 0 2
45347: EQUAL
45348: IFFALSE 45375
// result := Insert ( result , 1 , un ) else
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_VAR 0 3
45359: PPUSH
45360: LD_INT 1
45362: PPUSH
45363: LD_VAR 0 4
45367: PPUSH
45368: CALL_OW 2
45372: ST_TO_ADDR
45373: GO 45404
// result := Replace ( result , result + 1 , un ) ;
45375: LD_ADDR_VAR 0 3
45379: PUSH
45380: LD_VAR 0 3
45384: PPUSH
45385: LD_VAR 0 3
45389: PUSH
45390: LD_INT 1
45392: PLUS
45393: PPUSH
45394: LD_VAR 0 4
45398: PPUSH
45399: CALL_OW 1
45403: ST_TO_ADDR
45404: GO 45330
45406: POP
45407: POP
// end ;
45408: LD_VAR 0 3
45412: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
45413: LD_INT 0
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
// result := [ ] ;
45422: LD_ADDR_VAR 0 4
45426: PUSH
45427: EMPTY
45428: ST_TO_ADDR
// if x - r < 0 then
45429: LD_VAR 0 1
45433: PUSH
45434: LD_VAR 0 3
45438: MINUS
45439: PUSH
45440: LD_INT 0
45442: LESS
45443: IFFALSE 45455
// min_x := 0 else
45445: LD_ADDR_VAR 0 8
45449: PUSH
45450: LD_INT 0
45452: ST_TO_ADDR
45453: GO 45471
// min_x := x - r ;
45455: LD_ADDR_VAR 0 8
45459: PUSH
45460: LD_VAR 0 1
45464: PUSH
45465: LD_VAR 0 3
45469: MINUS
45470: ST_TO_ADDR
// if y - r < 0 then
45471: LD_VAR 0 2
45475: PUSH
45476: LD_VAR 0 3
45480: MINUS
45481: PUSH
45482: LD_INT 0
45484: LESS
45485: IFFALSE 45497
// min_y := 0 else
45487: LD_ADDR_VAR 0 7
45491: PUSH
45492: LD_INT 0
45494: ST_TO_ADDR
45495: GO 45513
// min_y := y - r ;
45497: LD_ADDR_VAR 0 7
45501: PUSH
45502: LD_VAR 0 2
45506: PUSH
45507: LD_VAR 0 3
45511: MINUS
45512: ST_TO_ADDR
// max_x := x + r ;
45513: LD_ADDR_VAR 0 9
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_VAR 0 3
45527: PLUS
45528: ST_TO_ADDR
// max_y := y + r ;
45529: LD_ADDR_VAR 0 10
45533: PUSH
45534: LD_VAR 0 2
45538: PUSH
45539: LD_VAR 0 3
45543: PLUS
45544: ST_TO_ADDR
// for _x = min_x to max_x do
45545: LD_ADDR_VAR 0 5
45549: PUSH
45550: DOUBLE
45551: LD_VAR 0 8
45555: DEC
45556: ST_TO_ADDR
45557: LD_VAR 0 9
45561: PUSH
45562: FOR_TO
45563: IFFALSE 45664
// for _y = min_y to max_y do
45565: LD_ADDR_VAR 0 6
45569: PUSH
45570: DOUBLE
45571: LD_VAR 0 7
45575: DEC
45576: ST_TO_ADDR
45577: LD_VAR 0 10
45581: PUSH
45582: FOR_TO
45583: IFFALSE 45660
// begin if not ValidHex ( _x , _y ) then
45585: LD_VAR 0 5
45589: PPUSH
45590: LD_VAR 0 6
45594: PPUSH
45595: CALL_OW 488
45599: NOT
45600: IFFALSE 45604
// continue ;
45602: GO 45582
// if GetResourceTypeXY ( _x , _y ) then
45604: LD_VAR 0 5
45608: PPUSH
45609: LD_VAR 0 6
45613: PPUSH
45614: CALL_OW 283
45618: IFFALSE 45658
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
45620: LD_ADDR_VAR 0 4
45624: PUSH
45625: LD_VAR 0 4
45629: PPUSH
45630: LD_VAR 0 4
45634: PUSH
45635: LD_INT 1
45637: PLUS
45638: PPUSH
45639: LD_VAR 0 5
45643: PUSH
45644: LD_VAR 0 6
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PPUSH
45653: CALL_OW 1
45657: ST_TO_ADDR
// end ;
45658: GO 45582
45660: POP
45661: POP
45662: GO 45562
45664: POP
45665: POP
// end ;
45666: LD_VAR 0 4
45670: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45671: LD_INT 0
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
// if not units then
45681: LD_VAR 0 1
45685: NOT
45686: IFFALSE 45690
// exit ;
45688: GO 46222
// result := UnitFilter ( units , [ f_ok ] ) ;
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_VAR 0 1
45699: PPUSH
45700: LD_INT 50
45702: PUSH
45703: EMPTY
45704: LIST
45705: PPUSH
45706: CALL_OW 72
45710: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45711: LD_ADDR_VAR 0 8
45715: PUSH
45716: LD_VAR 0 1
45720: PUSH
45721: LD_INT 1
45723: ARRAY
45724: PPUSH
45725: CALL_OW 255
45729: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45730: LD_ADDR_VAR 0 10
45734: PUSH
45735: LD_INT 29
45737: PUSH
45738: LD_INT 91
45740: PUSH
45741: LD_INT 49
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// if not result then
45749: LD_VAR 0 3
45753: NOT
45754: IFFALSE 45758
// exit ;
45756: GO 46222
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45758: LD_ADDR_VAR 0 5
45762: PUSH
45763: LD_INT 81
45765: PUSH
45766: LD_VAR 0 8
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PPUSH
45775: CALL_OW 69
45779: ST_TO_ADDR
// for i in result do
45780: LD_ADDR_VAR 0 4
45784: PUSH
45785: LD_VAR 0 3
45789: PUSH
45790: FOR_IN
45791: IFFALSE 46220
// begin tag := GetTag ( i ) + 1 ;
45793: LD_ADDR_VAR 0 9
45797: PUSH
45798: LD_VAR 0 4
45802: PPUSH
45803: CALL_OW 110
45807: PUSH
45808: LD_INT 1
45810: PLUS
45811: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
45812: LD_ADDR_VAR 0 7
45816: PUSH
45817: LD_VAR 0 4
45821: PPUSH
45822: CALL_OW 250
45826: PPUSH
45827: LD_VAR 0 4
45831: PPUSH
45832: CALL_OW 251
45836: PPUSH
45837: LD_INT 4
45839: PPUSH
45840: CALL 45413 0 3
45844: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
45845: LD_VAR 0 4
45849: PPUSH
45850: CALL_OW 247
45854: PUSH
45855: LD_INT 2
45857: EQUAL
45858: IFFALSE 45870
45860: PUSH
45861: LD_VAR 0 7
45865: PUSH
45866: LD_INT 2
45868: GREATER
45869: AND
45870: IFFALSE 45890
45872: PUSH
45873: LD_VAR 0 4
45877: PPUSH
45878: CALL_OW 264
45882: PUSH
45883: LD_VAR 0 10
45887: IN
45888: NOT
45889: AND
45890: IFFALSE 45929
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45892: LD_VAR 0 4
45896: PPUSH
45897: LD_VAR 0 7
45901: PUSH
45902: LD_INT 1
45904: ARRAY
45905: PUSH
45906: LD_INT 1
45908: ARRAY
45909: PPUSH
45910: LD_VAR 0 7
45914: PUSH
45915: LD_INT 1
45917: ARRAY
45918: PUSH
45919: LD_INT 2
45921: ARRAY
45922: PPUSH
45923: CALL_OW 116
45927: GO 46218
// if path > tag then
45929: LD_VAR 0 2
45933: PUSH
45934: LD_VAR 0 9
45938: GREATER
45939: IFFALSE 46147
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45941: LD_ADDR_VAR 0 6
45945: PUSH
45946: LD_VAR 0 5
45950: PPUSH
45951: LD_INT 91
45953: PUSH
45954: LD_VAR 0 4
45958: PUSH
45959: LD_INT 8
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: PPUSH
45967: CALL_OW 72
45971: ST_TO_ADDR
// if nearEnemy then
45972: LD_VAR 0 6
45976: IFFALSE 46045
// begin if GetWeapon ( i ) = ru_time_lapser then
45978: LD_VAR 0 4
45982: PPUSH
45983: CALL_OW 264
45987: PUSH
45988: LD_INT 49
45990: EQUAL
45991: IFFALSE 46019
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45993: LD_VAR 0 4
45997: PPUSH
45998: LD_VAR 0 6
46002: PPUSH
46003: LD_VAR 0 4
46007: PPUSH
46008: CALL_OW 74
46012: PPUSH
46013: CALL_OW 112
46017: GO 46043
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46019: LD_VAR 0 4
46023: PPUSH
46024: LD_VAR 0 6
46028: PPUSH
46029: LD_VAR 0 4
46033: PPUSH
46034: CALL_OW 74
46038: PPUSH
46039: CALL 47303 0 2
// end else
46043: GO 46145
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46045: LD_VAR 0 4
46049: PPUSH
46050: LD_VAR 0 2
46054: PUSH
46055: LD_VAR 0 9
46059: ARRAY
46060: PUSH
46061: LD_INT 1
46063: ARRAY
46064: PPUSH
46065: LD_VAR 0 2
46069: PUSH
46070: LD_VAR 0 9
46074: ARRAY
46075: PUSH
46076: LD_INT 2
46078: ARRAY
46079: PPUSH
46080: CALL_OW 297
46084: PUSH
46085: LD_INT 6
46087: GREATER
46088: IFFALSE 46131
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46090: LD_VAR 0 4
46094: PPUSH
46095: LD_VAR 0 2
46099: PUSH
46100: LD_VAR 0 9
46104: ARRAY
46105: PUSH
46106: LD_INT 1
46108: ARRAY
46109: PPUSH
46110: LD_VAR 0 2
46114: PUSH
46115: LD_VAR 0 9
46119: ARRAY
46120: PUSH
46121: LD_INT 2
46123: ARRAY
46124: PPUSH
46125: CALL_OW 114
46129: GO 46145
// SetTag ( i , tag ) ;
46131: LD_VAR 0 4
46135: PPUSH
46136: LD_VAR 0 9
46140: PPUSH
46141: CALL_OW 109
// end else
46145: GO 46218
// if enemy then
46147: LD_VAR 0 5
46151: IFFALSE 46218
// begin if GetWeapon ( i ) = ru_time_lapser then
46153: LD_VAR 0 4
46157: PPUSH
46158: CALL_OW 264
46162: PUSH
46163: LD_INT 49
46165: EQUAL
46166: IFFALSE 46194
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46168: LD_VAR 0 4
46172: PPUSH
46173: LD_VAR 0 5
46177: PPUSH
46178: LD_VAR 0 4
46182: PPUSH
46183: CALL_OW 74
46187: PPUSH
46188: CALL_OW 112
46192: GO 46218
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46194: LD_VAR 0 4
46198: PPUSH
46199: LD_VAR 0 5
46203: PPUSH
46204: LD_VAR 0 4
46208: PPUSH
46209: CALL_OW 74
46213: PPUSH
46214: CALL 47303 0 2
// end ; end ;
46218: GO 45790
46220: POP
46221: POP
// end ;
46222: LD_VAR 0 3
46226: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46227: LD_INT 0
46229: PPUSH
46230: PPUSH
46231: PPUSH
// if not unit or IsInUnit ( unit ) then
46232: LD_VAR 0 1
46236: NOT
46237: IFTRUE 46250
46239: PUSH
46240: LD_VAR 0 1
46244: PPUSH
46245: CALL_OW 310
46249: OR
46250: IFFALSE 46254
// exit ;
46252: GO 46345
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
46254: LD_ADDR_VAR 0 4
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 250
46268: PPUSH
46269: LD_VAR 0 2
46273: PPUSH
46274: LD_INT 1
46276: PPUSH
46277: CALL_OW 272
46281: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
46282: LD_ADDR_VAR 0 5
46286: PUSH
46287: LD_VAR 0 1
46291: PPUSH
46292: CALL_OW 251
46296: PPUSH
46297: LD_VAR 0 2
46301: PPUSH
46302: LD_INT 1
46304: PPUSH
46305: CALL_OW 273
46309: ST_TO_ADDR
// if ValidHex ( x , y ) then
46310: LD_VAR 0 4
46314: PPUSH
46315: LD_VAR 0 5
46319: PPUSH
46320: CALL_OW 488
46324: IFFALSE 46345
// ComTurnXY ( unit , x , y ) ;
46326: LD_VAR 0 1
46330: PPUSH
46331: LD_VAR 0 4
46335: PPUSH
46336: LD_VAR 0 5
46340: PPUSH
46341: CALL_OW 118
// end ;
46345: LD_VAR 0 3
46349: RET
// export function SeeUnits ( side , units ) ; var i ; begin
46350: LD_INT 0
46352: PPUSH
46353: PPUSH
// result := false ;
46354: LD_ADDR_VAR 0 3
46358: PUSH
46359: LD_INT 0
46361: ST_TO_ADDR
// if not units then
46362: LD_VAR 0 2
46366: NOT
46367: IFFALSE 46371
// exit ;
46369: GO 46416
// for i in units do
46371: LD_ADDR_VAR 0 4
46375: PUSH
46376: LD_VAR 0 2
46380: PUSH
46381: FOR_IN
46382: IFFALSE 46414
// if See ( side , i ) then
46384: LD_VAR 0 1
46388: PPUSH
46389: LD_VAR 0 4
46393: PPUSH
46394: CALL_OW 292
46398: IFFALSE 46412
// begin result := true ;
46400: LD_ADDR_VAR 0 3
46404: PUSH
46405: LD_INT 1
46407: ST_TO_ADDR
// exit ;
46408: POP
46409: POP
46410: GO 46416
// end ;
46412: GO 46381
46414: POP
46415: POP
// end ;
46416: LD_VAR 0 3
46420: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
46421: LD_INT 0
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
// if not unit or not points then
46427: LD_VAR 0 1
46431: NOT
46432: IFTRUE 46441
46434: PUSH
46435: LD_VAR 0 2
46439: NOT
46440: OR
46441: IFFALSE 46445
// exit ;
46443: GO 46535
// dist := 99999 ;
46445: LD_ADDR_VAR 0 5
46449: PUSH
46450: LD_INT 99999
46452: ST_TO_ADDR
// for i in points do
46453: LD_ADDR_VAR 0 4
46457: PUSH
46458: LD_VAR 0 2
46462: PUSH
46463: FOR_IN
46464: IFFALSE 46533
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46466: LD_ADDR_VAR 0 6
46470: PUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: LD_VAR 0 4
46480: PUSH
46481: LD_INT 1
46483: ARRAY
46484: PPUSH
46485: LD_VAR 0 4
46489: PUSH
46490: LD_INT 2
46492: ARRAY
46493: PPUSH
46494: CALL_OW 297
46498: ST_TO_ADDR
// if tmpDist < dist then
46499: LD_VAR 0 6
46503: PUSH
46504: LD_VAR 0 5
46508: LESS
46509: IFFALSE 46531
// begin result := i ;
46511: LD_ADDR_VAR 0 3
46515: PUSH
46516: LD_VAR 0 4
46520: ST_TO_ADDR
// dist := tmpDist ;
46521: LD_ADDR_VAR 0 5
46525: PUSH
46526: LD_VAR 0 6
46530: ST_TO_ADDR
// end ; end ;
46531: GO 46463
46533: POP
46534: POP
// end ;
46535: LD_VAR 0 3
46539: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
46540: LD_INT 0
46542: PPUSH
// uc_side := side ;
46543: LD_ADDR_OWVAR 20
46547: PUSH
46548: LD_VAR 0 1
46552: ST_TO_ADDR
// uc_nation := 3 ;
46553: LD_ADDR_OWVAR 21
46557: PUSH
46558: LD_INT 3
46560: ST_TO_ADDR
// vc_chassis := 25 ;
46561: LD_ADDR_OWVAR 37
46565: PUSH
46566: LD_INT 25
46568: ST_TO_ADDR
// vc_engine := engine_siberite ;
46569: LD_ADDR_OWVAR 39
46573: PUSH
46574: LD_INT 3
46576: ST_TO_ADDR
// vc_control := control_computer ;
46577: LD_ADDR_OWVAR 38
46581: PUSH
46582: LD_INT 3
46584: ST_TO_ADDR
// vc_weapon := 59 ;
46585: LD_ADDR_OWVAR 40
46589: PUSH
46590: LD_INT 59
46592: ST_TO_ADDR
// result := CreateVehicle ;
46593: LD_ADDR_VAR 0 5
46597: PUSH
46598: CALL_OW 45
46602: ST_TO_ADDR
// SetDir ( result , d ) ;
46603: LD_VAR 0 5
46607: PPUSH
46608: LD_VAR 0 4
46612: PPUSH
46613: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
46617: LD_VAR 0 5
46621: PPUSH
46622: LD_VAR 0 2
46626: PPUSH
46627: LD_VAR 0 3
46631: PPUSH
46632: LD_INT 0
46634: PPUSH
46635: CALL_OW 48
// end ;
46639: LD_VAR 0 5
46643: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
46644: LD_INT 0
46646: PPUSH
46647: PPUSH
46648: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
46649: LD_ADDR_VAR 0 2
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46672: LD_VAR 0 1
46676: NOT
46677: IFTRUE 46710
46679: PUSH
46680: LD_VAR 0 1
46684: PPUSH
46685: CALL_OW 264
46689: PUSH
46690: LD_INT 12
46692: PUSH
46693: LD_INT 51
46695: PUSH
46696: LD_INT 32
46698: PUSH
46699: LD_INT 89
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: IN
46708: NOT
46709: OR
46710: IFFALSE 46714
// exit ;
46712: GO 46812
// for i := 1 to 3 do
46714: LD_ADDR_VAR 0 3
46718: PUSH
46719: DOUBLE
46720: LD_INT 1
46722: DEC
46723: ST_TO_ADDR
46724: LD_INT 3
46726: PUSH
46727: FOR_TO
46728: IFFALSE 46810
// begin tmp := GetCargo ( cargo , i ) ;
46730: LD_ADDR_VAR 0 4
46734: PUSH
46735: LD_VAR 0 1
46739: PPUSH
46740: LD_VAR 0 3
46744: PPUSH
46745: CALL_OW 289
46749: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46750: LD_ADDR_VAR 0 2
46754: PUSH
46755: LD_VAR 0 2
46759: PPUSH
46760: LD_VAR 0 3
46764: PPUSH
46765: LD_VAR 0 4
46769: PPUSH
46770: CALL_OW 1
46774: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46775: LD_ADDR_VAR 0 2
46779: PUSH
46780: LD_VAR 0 2
46784: PPUSH
46785: LD_INT 4
46787: PPUSH
46788: LD_VAR 0 2
46792: PUSH
46793: LD_INT 4
46795: ARRAY
46796: PUSH
46797: LD_VAR 0 4
46801: PLUS
46802: PPUSH
46803: CALL_OW 1
46807: ST_TO_ADDR
// end ;
46808: GO 46727
46810: POP
46811: POP
// end ;
46812: LD_VAR 0 2
46816: RET
// export function Length ( array ) ; begin
46817: LD_INT 0
46819: PPUSH
// result := array + 0 ;
46820: LD_ADDR_VAR 0 2
46824: PUSH
46825: LD_VAR 0 1
46829: PUSH
46830: LD_INT 0
46832: PLUS
46833: ST_TO_ADDR
// end ;
46834: LD_VAR 0 2
46838: RET
// export function PrepareArray ( array ) ; begin
46839: LD_INT 0
46841: PPUSH
// result := array diff 0 ;
46842: LD_ADDR_VAR 0 2
46846: PUSH
46847: LD_VAR 0 1
46851: PUSH
46852: LD_INT 0
46854: DIFF
46855: ST_TO_ADDR
// if not result [ 1 ] then
46856: LD_VAR 0 2
46860: PUSH
46861: LD_INT 1
46863: ARRAY
46864: NOT
46865: IFFALSE 46885
// result := Delete ( result , 1 ) ;
46867: LD_ADDR_VAR 0 2
46871: PUSH
46872: LD_VAR 0 2
46876: PPUSH
46877: LD_INT 1
46879: PPUSH
46880: CALL_OW 3
46884: ST_TO_ADDR
// end ;
46885: LD_VAR 0 2
46889: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46890: LD_INT 0
46892: PPUSH
46893: PPUSH
46894: PPUSH
46895: PPUSH
// sibRocketRange := 25 ;
46896: LD_ADDR_VAR 0 6
46900: PUSH
46901: LD_INT 25
46903: ST_TO_ADDR
// result := false ;
46904: LD_ADDR_VAR 0 4
46908: PUSH
46909: LD_INT 0
46911: ST_TO_ADDR
// for i := 0 to 5 do
46912: LD_ADDR_VAR 0 5
46916: PUSH
46917: DOUBLE
46918: LD_INT 0
46920: DEC
46921: ST_TO_ADDR
46922: LD_INT 5
46924: PUSH
46925: FOR_TO
46926: IFFALSE 46993
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46928: LD_VAR 0 1
46932: PPUSH
46933: LD_VAR 0 5
46937: PPUSH
46938: LD_VAR 0 6
46942: PPUSH
46943: CALL_OW 272
46947: PPUSH
46948: LD_VAR 0 2
46952: PPUSH
46953: LD_VAR 0 5
46957: PPUSH
46958: LD_VAR 0 6
46962: PPUSH
46963: CALL_OW 273
46967: PPUSH
46968: LD_VAR 0 3
46972: PPUSH
46973: CALL_OW 309
46977: IFFALSE 46991
// begin result := true ;
46979: LD_ADDR_VAR 0 4
46983: PUSH
46984: LD_INT 1
46986: ST_TO_ADDR
// exit ;
46987: POP
46988: POP
46989: GO 46995
// end ;
46991: GO 46925
46993: POP
46994: POP
// end ;
46995: LD_VAR 0 4
46999: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
47000: LD_INT 0
47002: PPUSH
47003: PPUSH
47004: PPUSH
// if btype = b_depot then
47005: LD_VAR 0 2
47009: PUSH
47010: LD_INT 0
47012: EQUAL
47013: IFFALSE 47025
// begin result := true ;
47015: LD_ADDR_VAR 0 3
47019: PUSH
47020: LD_INT 1
47022: ST_TO_ADDR
// exit ;
47023: GO 47145
// end ; pom := GetBase ( depot ) ;
47025: LD_ADDR_VAR 0 4
47029: PUSH
47030: LD_VAR 0 1
47034: PPUSH
47035: CALL_OW 274
47039: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47040: LD_ADDR_VAR 0 5
47044: PUSH
47045: LD_VAR 0 2
47049: PPUSH
47050: LD_VAR 0 1
47054: PPUSH
47055: CALL_OW 248
47059: PPUSH
47060: CALL_OW 450
47064: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
47065: LD_ADDR_VAR 0 3
47069: PUSH
47070: LD_VAR 0 4
47074: PPUSH
47075: LD_INT 1
47077: PPUSH
47078: CALL_OW 275
47082: PUSH
47083: LD_VAR 0 5
47087: PUSH
47088: LD_INT 1
47090: ARRAY
47091: GREATEREQUAL
47092: IFFALSE 47118
47094: PUSH
47095: LD_VAR 0 4
47099: PPUSH
47100: LD_INT 2
47102: PPUSH
47103: CALL_OW 275
47107: PUSH
47108: LD_VAR 0 5
47112: PUSH
47113: LD_INT 2
47115: ARRAY
47116: GREATEREQUAL
47117: AND
47118: IFFALSE 47144
47120: PUSH
47121: LD_VAR 0 4
47125: PPUSH
47126: LD_INT 3
47128: PPUSH
47129: CALL_OW 275
47133: PUSH
47134: LD_VAR 0 5
47138: PUSH
47139: LD_INT 3
47141: ARRAY
47142: GREATEREQUAL
47143: AND
47144: ST_TO_ADDR
// end ;
47145: LD_VAR 0 3
47149: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
47150: LD_INT 0
47152: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
47153: LD_VAR 0 1
47157: PPUSH
47158: LD_VAR 0 2
47162: PPUSH
47163: LD_INT 0
47165: PPUSH
47166: LD_INT 0
47168: PPUSH
47169: LD_INT 1
47171: PPUSH
47172: LD_INT 0
47174: PPUSH
47175: CALL_OW 587
// end ;
47179: LD_VAR 0 3
47183: RET
// export function CenterOnNow ( unit ) ; begin
47184: LD_INT 0
47186: PPUSH
// result := IsInUnit ( unit ) ;
47187: LD_ADDR_VAR 0 2
47191: PUSH
47192: LD_VAR 0 1
47196: PPUSH
47197: CALL_OW 310
47201: ST_TO_ADDR
// if not result then
47202: LD_VAR 0 2
47206: NOT
47207: IFFALSE 47219
// result := unit ;
47209: LD_ADDR_VAR 0 2
47213: PUSH
47214: LD_VAR 0 1
47218: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 87
// end ;
47228: LD_VAR 0 2
47232: RET
// export function ComMoveHex ( unit , hex ) ; begin
47233: LD_INT 0
47235: PPUSH
// if not hex then
47236: LD_VAR 0 2
47240: NOT
47241: IFFALSE 47245
// exit ;
47243: GO 47298
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
47245: LD_VAR 0 2
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: PPUSH
47254: LD_VAR 0 2
47258: PUSH
47259: LD_INT 2
47261: ARRAY
47262: PPUSH
47263: CALL_OW 428
47267: IFFALSE 47271
// exit ;
47269: GO 47298
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
47271: LD_VAR 0 1
47275: PPUSH
47276: LD_VAR 0 2
47280: PUSH
47281: LD_INT 1
47283: ARRAY
47284: PPUSH
47285: LD_VAR 0 2
47289: PUSH
47290: LD_INT 2
47292: ARRAY
47293: PPUSH
47294: CALL_OW 111
// end ;
47298: LD_VAR 0 3
47302: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
47303: LD_INT 0
47305: PPUSH
47306: PPUSH
47307: PPUSH
// if not unit or not enemy then
47308: LD_VAR 0 1
47312: NOT
47313: IFTRUE 47322
47315: PUSH
47316: LD_VAR 0 2
47320: NOT
47321: OR
47322: IFFALSE 47326
// exit ;
47324: GO 47452
// x := GetX ( enemy ) ;
47326: LD_ADDR_VAR 0 4
47330: PUSH
47331: LD_VAR 0 2
47335: PPUSH
47336: CALL_OW 250
47340: ST_TO_ADDR
// y := GetY ( enemy ) ;
47341: LD_ADDR_VAR 0 5
47345: PUSH
47346: LD_VAR 0 2
47350: PPUSH
47351: CALL_OW 251
47355: ST_TO_ADDR
// if ValidHex ( x , y ) then
47356: LD_VAR 0 4
47360: PPUSH
47361: LD_VAR 0 5
47365: PPUSH
47366: CALL_OW 488
47370: IFFALSE 47452
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
47372: LD_VAR 0 2
47376: PPUSH
47377: CALL_OW 247
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: IN
47392: IFTRUE 47415
47394: PUSH
47395: LD_VAR 0 1
47399: PPUSH
47400: CALL_OW 255
47404: PPUSH
47405: LD_VAR 0 2
47409: PPUSH
47410: CALL_OW 292
47414: OR
47415: IFFALSE 47433
// ComAttackUnit ( unit , enemy ) else
47417: LD_VAR 0 1
47421: PPUSH
47422: LD_VAR 0 2
47426: PPUSH
47427: CALL_OW 115
47431: GO 47452
// ComAgressiveMove ( unit , x , y ) ;
47433: LD_VAR 0 1
47437: PPUSH
47438: LD_VAR 0 4
47442: PPUSH
47443: LD_VAR 0 5
47447: PPUSH
47448: CALL_OW 114
// end ;
47452: LD_VAR 0 3
47456: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
47457: LD_INT 0
47459: PPUSH
47460: PPUSH
47461: PPUSH
// list := AreaToList ( area , 0 ) ;
47462: LD_ADDR_VAR 0 5
47466: PUSH
47467: LD_VAR 0 1
47471: PPUSH
47472: LD_INT 0
47474: PPUSH
47475: CALL_OW 517
47479: ST_TO_ADDR
// if not list then
47480: LD_VAR 0 5
47484: NOT
47485: IFFALSE 47489
// exit ;
47487: GO 47619
// if all then
47489: LD_VAR 0 2
47493: IFFALSE 47581
// begin for i := 1 to list [ 1 ] do
47495: LD_ADDR_VAR 0 4
47499: PUSH
47500: DOUBLE
47501: LD_INT 1
47503: DEC
47504: ST_TO_ADDR
47505: LD_VAR 0 5
47509: PUSH
47510: LD_INT 1
47512: ARRAY
47513: PUSH
47514: FOR_TO
47515: IFFALSE 47577
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
47517: LD_ADDR_VAR 0 3
47521: PUSH
47522: LD_VAR 0 3
47526: PPUSH
47527: LD_VAR 0 3
47531: PUSH
47532: LD_INT 1
47534: PLUS
47535: PPUSH
47536: LD_VAR 0 5
47540: PUSH
47541: LD_INT 1
47543: ARRAY
47544: PUSH
47545: LD_VAR 0 4
47549: ARRAY
47550: PUSH
47551: LD_VAR 0 5
47555: PUSH
47556: LD_INT 2
47558: ARRAY
47559: PUSH
47560: LD_VAR 0 4
47564: ARRAY
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PPUSH
47570: CALL_OW 1
47574: ST_TO_ADDR
47575: GO 47514
47577: POP
47578: POP
// exit ;
47579: GO 47619
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
47581: LD_ADDR_VAR 0 3
47585: PUSH
47586: LD_VAR 0 5
47590: PUSH
47591: LD_INT 1
47593: ARRAY
47594: PUSH
47595: LD_INT 1
47597: ARRAY
47598: PUSH
47599: LD_VAR 0 5
47603: PUSH
47604: LD_INT 2
47606: ARRAY
47607: PUSH
47608: LD_INT 1
47610: ARRAY
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: EMPTY
47617: LIST
47618: ST_TO_ADDR
// end ;
47619: LD_VAR 0 3
47623: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
47624: LD_INT 0
47626: PPUSH
47627: PPUSH
// list := AreaToList ( area , 0 ) ;
47628: LD_ADDR_VAR 0 4
47632: PUSH
47633: LD_VAR 0 1
47637: PPUSH
47638: LD_INT 0
47640: PPUSH
47641: CALL_OW 517
47645: ST_TO_ADDR
// if not list then
47646: LD_VAR 0 4
47650: NOT
47651: IFFALSE 47655
// exit ;
47653: GO 47696
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
47655: LD_ADDR_VAR 0 3
47659: PUSH
47660: LD_VAR 0 4
47664: PUSH
47665: LD_INT 1
47667: ARRAY
47668: PUSH
47669: LD_INT 1
47671: ARRAY
47672: PUSH
47673: LD_VAR 0 4
47677: PUSH
47678: LD_INT 2
47680: ARRAY
47681: PUSH
47682: LD_INT 1
47684: ARRAY
47685: PUSH
47686: LD_VAR 0 2
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: ST_TO_ADDR
// end ;
47696: LD_VAR 0 3
47700: RET
// export function First ( array ) ; begin
47701: LD_INT 0
47703: PPUSH
// if not array then
47704: LD_VAR 0 1
47708: NOT
47709: IFFALSE 47713
// exit ;
47711: GO 47727
// result := array [ 1 ] ;
47713: LD_ADDR_VAR 0 2
47717: PUSH
47718: LD_VAR 0 1
47722: PUSH
47723: LD_INT 1
47725: ARRAY
47726: ST_TO_ADDR
// end ;
47727: LD_VAR 0 2
47731: RET
// export function Last ( array ) ; begin
47732: LD_INT 0
47734: PPUSH
// if not array then
47735: LD_VAR 0 1
47739: NOT
47740: IFFALSE 47744
// exit ;
47742: GO 47760
// result := array [ array ] ;
47744: LD_ADDR_VAR 0 2
47748: PUSH
47749: LD_VAR 0 1
47753: PUSH
47754: LD_VAR 0 1
47758: ARRAY
47759: ST_TO_ADDR
// end ;
47760: LD_VAR 0 2
47764: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
47765: LD_INT 0
47767: PPUSH
47768: PPUSH
// result := [ ] ;
47769: LD_ADDR_VAR 0 5
47773: PUSH
47774: EMPTY
47775: ST_TO_ADDR
// if not array then
47776: LD_VAR 0 1
47780: NOT
47781: IFFALSE 47785
// exit ;
47783: GO 47897
// for i := 1 to array do
47785: LD_ADDR_VAR 0 6
47789: PUSH
47790: DOUBLE
47791: LD_INT 1
47793: DEC
47794: ST_TO_ADDR
47795: LD_VAR 0 1
47799: PUSH
47800: FOR_TO
47801: IFFALSE 47895
// if array [ i ] [ index ] = value then
47803: LD_VAR 0 1
47807: PUSH
47808: LD_VAR 0 6
47812: ARRAY
47813: PUSH
47814: LD_VAR 0 2
47818: ARRAY
47819: PUSH
47820: LD_VAR 0 3
47824: EQUAL
47825: IFFALSE 47893
// begin if indexColumn then
47827: LD_VAR 0 4
47831: IFFALSE 47867
// result := Join ( result , array [ i ] [ indexColumn ] ) else
47833: LD_ADDR_VAR 0 5
47837: PUSH
47838: LD_VAR 0 5
47842: PPUSH
47843: LD_VAR 0 1
47847: PUSH
47848: LD_VAR 0 6
47852: ARRAY
47853: PUSH
47854: LD_VAR 0 4
47858: ARRAY
47859: PPUSH
47860: CALL 42905 0 2
47864: ST_TO_ADDR
47865: GO 47893
// result := Join ( result , array [ i ] ) ;
47867: LD_ADDR_VAR 0 5
47871: PUSH
47872: LD_VAR 0 5
47876: PPUSH
47877: LD_VAR 0 1
47881: PUSH
47882: LD_VAR 0 6
47886: ARRAY
47887: PPUSH
47888: CALL 42905 0 2
47892: ST_TO_ADDR
// end ;
47893: GO 47800
47895: POP
47896: POP
// end ;
47897: LD_VAR 0 5
47901: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
47902: LD_INT 0
47904: PPUSH
// if not vehicles or not parkingPoint then
47905: LD_VAR 0 1
47909: NOT
47910: IFTRUE 47919
47912: PUSH
47913: LD_VAR 0 2
47917: NOT
47918: OR
47919: IFFALSE 47923
// exit ;
47921: GO 48021
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
47923: LD_ADDR_VAR 0 1
47927: PUSH
47928: LD_VAR 0 1
47932: PPUSH
47933: LD_INT 50
47935: PUSH
47936: EMPTY
47937: LIST
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: LD_INT 92
47944: PUSH
47945: LD_VAR 0 2
47949: PUSH
47950: LD_INT 1
47952: ARRAY
47953: PUSH
47954: LD_VAR 0 2
47958: PUSH
47959: LD_INT 2
47961: ARRAY
47962: PUSH
47963: LD_INT 8
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PPUSH
47980: CALL_OW 72
47984: ST_TO_ADDR
// if not vehicles then
47985: LD_VAR 0 1
47989: NOT
47990: IFFALSE 47994
// exit ;
47992: GO 48021
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
47994: LD_VAR 0 1
47998: PPUSH
47999: LD_VAR 0 2
48003: PUSH
48004: LD_INT 1
48006: ARRAY
48007: PPUSH
48008: LD_VAR 0 2
48012: PUSH
48013: LD_INT 2
48015: ARRAY
48016: PPUSH
48017: CALL_OW 111
// end ;
48021: LD_VAR 0 3
48025: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
48026: LD_INT 0
48028: PPUSH
48029: PPUSH
48030: PPUSH
// if not side or not area then
48031: LD_VAR 0 1
48035: NOT
48036: IFTRUE 48045
48038: PUSH
48039: LD_VAR 0 2
48043: NOT
48044: OR
48045: IFFALSE 48049
// exit ;
48047: GO 48168
// tmp := AreaToList ( area , 0 ) ;
48049: LD_ADDR_VAR 0 5
48053: PUSH
48054: LD_VAR 0 2
48058: PPUSH
48059: LD_INT 0
48061: PPUSH
48062: CALL_OW 517
48066: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
48067: LD_ADDR_VAR 0 4
48071: PUSH
48072: DOUBLE
48073: LD_INT 1
48075: DEC
48076: ST_TO_ADDR
48077: LD_VAR 0 5
48081: PUSH
48082: LD_INT 1
48084: ARRAY
48085: PUSH
48086: FOR_TO
48087: IFFALSE 48166
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
48089: LD_VAR 0 5
48093: PUSH
48094: LD_INT 1
48096: ARRAY
48097: PUSH
48098: LD_VAR 0 4
48102: ARRAY
48103: PPUSH
48104: LD_VAR 0 5
48108: PUSH
48109: LD_INT 2
48111: ARRAY
48112: PUSH
48113: LD_VAR 0 4
48117: ARRAY
48118: PPUSH
48119: CALL_OW 351
48123: IFFALSE 48164
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
48125: LD_VAR 0 5
48129: PUSH
48130: LD_INT 1
48132: ARRAY
48133: PUSH
48134: LD_VAR 0 4
48138: ARRAY
48139: PPUSH
48140: LD_VAR 0 5
48144: PUSH
48145: LD_INT 2
48147: ARRAY
48148: PUSH
48149: LD_VAR 0 4
48153: ARRAY
48154: PPUSH
48155: LD_VAR 0 1
48159: PPUSH
48160: CALL_OW 244
// end ;
48164: GO 48086
48166: POP
48167: POP
// end ;
48168: LD_VAR 0 3
48172: RET
// export function UniqueArray ( array ) ; var i ; begin
48173: LD_INT 0
48175: PPUSH
48176: PPUSH
// result := [ ] ;
48177: LD_ADDR_VAR 0 2
48181: PUSH
48182: EMPTY
48183: ST_TO_ADDR
// if not array then
48184: LD_VAR 0 1
48188: NOT
48189: IFFALSE 48193
// exit ;
48191: GO 48254
// for i := 1 to array do
48193: LD_ADDR_VAR 0 3
48197: PUSH
48198: DOUBLE
48199: LD_INT 1
48201: DEC
48202: ST_TO_ADDR
48203: LD_VAR 0 1
48207: PUSH
48208: FOR_TO
48209: IFFALSE 48252
// if not array [ i ] in result then
48211: LD_VAR 0 1
48215: PUSH
48216: LD_VAR 0 3
48220: ARRAY
48221: PUSH
48222: LD_VAR 0 2
48226: IN
48227: NOT
48228: IFFALSE 48250
// result := Join ( result , i ) ;
48230: LD_ADDR_VAR 0 2
48234: PUSH
48235: LD_VAR 0 2
48239: PPUSH
48240: LD_VAR 0 3
48244: PPUSH
48245: CALL 42905 0 2
48249: ST_TO_ADDR
48250: GO 48208
48252: POP
48253: POP
// end ; end_of_file end_of_file
48254: LD_VAR 0 2
48258: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
48259: LD_VAR 0 1
48263: PPUSH
48264: LD_VAR 0 2
48268: PPUSH
48269: LD_VAR 0 3
48273: PPUSH
48274: LD_VAR 0 4
48278: PPUSH
48279: LD_VAR 0 5
48283: PPUSH
48284: LD_VAR 0 6
48288: PPUSH
48289: CALL 48524 0 6
// end ;
48293: PPOPN 6
48295: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
48296: LD_INT 0
48298: PPUSH
// begin if not units then
48299: LD_VAR 0 1
48303: NOT
48304: IFFALSE 48308
// exit ;
48306: GO 48342
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
48308: LD_VAR 0 1
48312: PPUSH
48313: LD_VAR 0 2
48317: PPUSH
48318: LD_VAR 0 3
48322: PPUSH
48323: LD_VAR 0 4
48327: PPUSH
48328: LD_VAR 0 5
48332: PPUSH
48333: LD_VAR 0 6
48337: PPUSH
48338: CALL 70770 0 6
// end ;
48342: PPOPN 7
48344: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
48345: CALL 48411 0 0
// end ; end_of_file
48349: PPOPN 1
48351: END
// export globalGameSaveCounter ; every 0 0$1 do
48352: GO 48354
48354: DISABLE
// begin enable ;
48355: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48356: LD_STRING updateTimer(
48358: PUSH
48359: LD_OWVAR 1
48363: STR
48364: PUSH
48365: LD_STRING );
48367: STR
48368: PPUSH
48369: CALL_OW 559
// end ;
48373: END
// every 0 0$1 do
48374: GO 48376
48376: DISABLE
// begin globalGameSaveCounter := 0 ;
48377: LD_ADDR_EXP 27
48381: PUSH
48382: LD_INT 0
48384: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
48385: LD_STRING setGameSaveCounter(0)
48387: PPUSH
48388: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
48392: LD_STRING initStreamRollete();
48394: PPUSH
48395: CALL_OW 559
// InitStreamMode ;
48399: CALL 49744 0 0
// DefineStreamItems ( false ) ;
48403: LD_INT 0
48405: PPUSH
48406: CALL 50208 0 1
// end ;
48410: END
// export function SOS_MapStart ( ) ; begin
48411: LD_INT 0
48413: PPUSH
// if streamModeActive then
48414: LD_EXP 28
48418: IFFALSE 48427
// DefineStreamItems ( true ) ;
48420: LD_INT 1
48422: PPUSH
48423: CALL 50208 0 1
// UpdateLuaVariables ( ) ;
48427: CALL 48444 0 0
// UpdateFactoryWaypoints ( ) ;
48431: CALL 63330 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48435: CALL 63582 0 0
// end ;
48439: LD_VAR 0 1
48443: RET
// function UpdateLuaVariables ( ) ; begin
48444: LD_INT 0
48446: PPUSH
// if globalGameSaveCounter then
48447: LD_EXP 27
48451: IFFALSE 48485
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48453: LD_ADDR_EXP 27
48457: PUSH
48458: LD_EXP 27
48462: PPUSH
48463: CALL 44278 0 1
48467: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48468: LD_STRING setGameSaveCounter(
48470: PUSH
48471: LD_EXP 27
48475: STR
48476: PUSH
48477: LD_STRING )
48479: STR
48480: PPUSH
48481: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48485: LD_STRING setGameDifficulty(
48487: PUSH
48488: LD_OWVAR 67
48492: STR
48493: PUSH
48494: LD_STRING )
48496: STR
48497: PPUSH
48498: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
48502: LD_STRING displayDifficulty(
48504: PUSH
48505: LD_OWVAR 67
48509: STR
48510: PUSH
48511: LD_STRING )
48513: STR
48514: PPUSH
48515: CALL_OW 559
// end ;
48519: LD_VAR 0 1
48523: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48524: LD_INT 0
48526: PPUSH
// if p2 = stream_mode then
48527: LD_VAR 0 2
48531: PUSH
48532: LD_INT 100
48534: EQUAL
48535: IFFALSE 49538
// begin if not StreamModeActive then
48537: LD_EXP 28
48541: NOT
48542: IFFALSE 48552
// StreamModeActive := true ;
48544: LD_ADDR_EXP 28
48548: PUSH
48549: LD_INT 1
48551: ST_TO_ADDR
// if p3 = 0 then
48552: LD_VAR 0 3
48556: PUSH
48557: LD_INT 0
48559: EQUAL
48560: IFFALSE 48566
// InitStreamMode ;
48562: CALL 49744 0 0
// if p3 = 1 then
48566: LD_VAR 0 3
48570: PUSH
48571: LD_INT 1
48573: EQUAL
48574: IFFALSE 48584
// sRocket := true ;
48576: LD_ADDR_EXP 33
48580: PUSH
48581: LD_INT 1
48583: ST_TO_ADDR
// if p3 = 2 then
48584: LD_VAR 0 3
48588: PUSH
48589: LD_INT 2
48591: EQUAL
48592: IFFALSE 48602
// sSpeed := true ;
48594: LD_ADDR_EXP 32
48598: PUSH
48599: LD_INT 1
48601: ST_TO_ADDR
// if p3 = 3 then
48602: LD_VAR 0 3
48606: PUSH
48607: LD_INT 3
48609: EQUAL
48610: IFFALSE 48620
// sEngine := true ;
48612: LD_ADDR_EXP 34
48616: PUSH
48617: LD_INT 1
48619: ST_TO_ADDR
// if p3 = 4 then
48620: LD_VAR 0 3
48624: PUSH
48625: LD_INT 4
48627: EQUAL
48628: IFFALSE 48638
// sSpec := true ;
48630: LD_ADDR_EXP 31
48634: PUSH
48635: LD_INT 1
48637: ST_TO_ADDR
// if p3 = 5 then
48638: LD_VAR 0 3
48642: PUSH
48643: LD_INT 5
48645: EQUAL
48646: IFFALSE 48656
// sLevel := true ;
48648: LD_ADDR_EXP 35
48652: PUSH
48653: LD_INT 1
48655: ST_TO_ADDR
// if p3 = 6 then
48656: LD_VAR 0 3
48660: PUSH
48661: LD_INT 6
48663: EQUAL
48664: IFFALSE 48674
// sArmoury := true ;
48666: LD_ADDR_EXP 36
48670: PUSH
48671: LD_INT 1
48673: ST_TO_ADDR
// if p3 = 7 then
48674: LD_VAR 0 3
48678: PUSH
48679: LD_INT 7
48681: EQUAL
48682: IFFALSE 48692
// sRadar := true ;
48684: LD_ADDR_EXP 37
48688: PUSH
48689: LD_INT 1
48691: ST_TO_ADDR
// if p3 = 8 then
48692: LD_VAR 0 3
48696: PUSH
48697: LD_INT 8
48699: EQUAL
48700: IFFALSE 48710
// sBunker := true ;
48702: LD_ADDR_EXP 38
48706: PUSH
48707: LD_INT 1
48709: ST_TO_ADDR
// if p3 = 9 then
48710: LD_VAR 0 3
48714: PUSH
48715: LD_INT 9
48717: EQUAL
48718: IFFALSE 48728
// sHack := true ;
48720: LD_ADDR_EXP 39
48724: PUSH
48725: LD_INT 1
48727: ST_TO_ADDR
// if p3 = 10 then
48728: LD_VAR 0 3
48732: PUSH
48733: LD_INT 10
48735: EQUAL
48736: IFFALSE 48746
// sFire := true ;
48738: LD_ADDR_EXP 40
48742: PUSH
48743: LD_INT 1
48745: ST_TO_ADDR
// if p3 = 11 then
48746: LD_VAR 0 3
48750: PUSH
48751: LD_INT 11
48753: EQUAL
48754: IFFALSE 48764
// sRefresh := true ;
48756: LD_ADDR_EXP 41
48760: PUSH
48761: LD_INT 1
48763: ST_TO_ADDR
// if p3 = 12 then
48764: LD_VAR 0 3
48768: PUSH
48769: LD_INT 12
48771: EQUAL
48772: IFFALSE 48782
// sExp := true ;
48774: LD_ADDR_EXP 42
48778: PUSH
48779: LD_INT 1
48781: ST_TO_ADDR
// if p3 = 13 then
48782: LD_VAR 0 3
48786: PUSH
48787: LD_INT 13
48789: EQUAL
48790: IFFALSE 48800
// sDepot := true ;
48792: LD_ADDR_EXP 43
48796: PUSH
48797: LD_INT 1
48799: ST_TO_ADDR
// if p3 = 14 then
48800: LD_VAR 0 3
48804: PUSH
48805: LD_INT 14
48807: EQUAL
48808: IFFALSE 48818
// sFlag := true ;
48810: LD_ADDR_EXP 44
48814: PUSH
48815: LD_INT 1
48817: ST_TO_ADDR
// if p3 = 15 then
48818: LD_VAR 0 3
48822: PUSH
48823: LD_INT 15
48825: EQUAL
48826: IFFALSE 48836
// sKamikadze := true ;
48828: LD_ADDR_EXP 52
48832: PUSH
48833: LD_INT 1
48835: ST_TO_ADDR
// if p3 = 16 then
48836: LD_VAR 0 3
48840: PUSH
48841: LD_INT 16
48843: EQUAL
48844: IFFALSE 48854
// sTroll := true ;
48846: LD_ADDR_EXP 53
48850: PUSH
48851: LD_INT 1
48853: ST_TO_ADDR
// if p3 = 17 then
48854: LD_VAR 0 3
48858: PUSH
48859: LD_INT 17
48861: EQUAL
48862: IFFALSE 48872
// sSlow := true ;
48864: LD_ADDR_EXP 54
48868: PUSH
48869: LD_INT 1
48871: ST_TO_ADDR
// if p3 = 18 then
48872: LD_VAR 0 3
48876: PUSH
48877: LD_INT 18
48879: EQUAL
48880: IFFALSE 48890
// sLack := true ;
48882: LD_ADDR_EXP 55
48886: PUSH
48887: LD_INT 1
48889: ST_TO_ADDR
// if p3 = 19 then
48890: LD_VAR 0 3
48894: PUSH
48895: LD_INT 19
48897: EQUAL
48898: IFFALSE 48908
// sTank := true ;
48900: LD_ADDR_EXP 57
48904: PUSH
48905: LD_INT 1
48907: ST_TO_ADDR
// if p3 = 20 then
48908: LD_VAR 0 3
48912: PUSH
48913: LD_INT 20
48915: EQUAL
48916: IFFALSE 48926
// sRemote := true ;
48918: LD_ADDR_EXP 58
48922: PUSH
48923: LD_INT 1
48925: ST_TO_ADDR
// if p3 = 21 then
48926: LD_VAR 0 3
48930: PUSH
48931: LD_INT 21
48933: EQUAL
48934: IFFALSE 48944
// sPowell := true ;
48936: LD_ADDR_EXP 59
48940: PUSH
48941: LD_INT 1
48943: ST_TO_ADDR
// if p3 = 22 then
48944: LD_VAR 0 3
48948: PUSH
48949: LD_INT 22
48951: EQUAL
48952: IFFALSE 48962
// sTeleport := true ;
48954: LD_ADDR_EXP 62
48958: PUSH
48959: LD_INT 1
48961: ST_TO_ADDR
// if p3 = 23 then
48962: LD_VAR 0 3
48966: PUSH
48967: LD_INT 23
48969: EQUAL
48970: IFFALSE 48980
// sOilTower := true ;
48972: LD_ADDR_EXP 64
48976: PUSH
48977: LD_INT 1
48979: ST_TO_ADDR
// if p3 = 24 then
48980: LD_VAR 0 3
48984: PUSH
48985: LD_INT 24
48987: EQUAL
48988: IFFALSE 48998
// sShovel := true ;
48990: LD_ADDR_EXP 65
48994: PUSH
48995: LD_INT 1
48997: ST_TO_ADDR
// if p3 = 25 then
48998: LD_VAR 0 3
49002: PUSH
49003: LD_INT 25
49005: EQUAL
49006: IFFALSE 49016
// sSheik := true ;
49008: LD_ADDR_EXP 66
49012: PUSH
49013: LD_INT 1
49015: ST_TO_ADDR
// if p3 = 26 then
49016: LD_VAR 0 3
49020: PUSH
49021: LD_INT 26
49023: EQUAL
49024: IFFALSE 49034
// sEarthquake := true ;
49026: LD_ADDR_EXP 68
49030: PUSH
49031: LD_INT 1
49033: ST_TO_ADDR
// if p3 = 27 then
49034: LD_VAR 0 3
49038: PUSH
49039: LD_INT 27
49041: EQUAL
49042: IFFALSE 49052
// sAI := true ;
49044: LD_ADDR_EXP 69
49048: PUSH
49049: LD_INT 1
49051: ST_TO_ADDR
// if p3 = 28 then
49052: LD_VAR 0 3
49056: PUSH
49057: LD_INT 28
49059: EQUAL
49060: IFFALSE 49070
// sCargo := true ;
49062: LD_ADDR_EXP 72
49066: PUSH
49067: LD_INT 1
49069: ST_TO_ADDR
// if p3 = 29 then
49070: LD_VAR 0 3
49074: PUSH
49075: LD_INT 29
49077: EQUAL
49078: IFFALSE 49088
// sDLaser := true ;
49080: LD_ADDR_EXP 73
49084: PUSH
49085: LD_INT 1
49087: ST_TO_ADDR
// if p3 = 30 then
49088: LD_VAR 0 3
49092: PUSH
49093: LD_INT 30
49095: EQUAL
49096: IFFALSE 49106
// sExchange := true ;
49098: LD_ADDR_EXP 74
49102: PUSH
49103: LD_INT 1
49105: ST_TO_ADDR
// if p3 = 31 then
49106: LD_VAR 0 3
49110: PUSH
49111: LD_INT 31
49113: EQUAL
49114: IFFALSE 49124
// sFac := true ;
49116: LD_ADDR_EXP 75
49120: PUSH
49121: LD_INT 1
49123: ST_TO_ADDR
// if p3 = 32 then
49124: LD_VAR 0 3
49128: PUSH
49129: LD_INT 32
49131: EQUAL
49132: IFFALSE 49142
// sPower := true ;
49134: LD_ADDR_EXP 76
49138: PUSH
49139: LD_INT 1
49141: ST_TO_ADDR
// if p3 = 33 then
49142: LD_VAR 0 3
49146: PUSH
49147: LD_INT 33
49149: EQUAL
49150: IFFALSE 49160
// sRandom := true ;
49152: LD_ADDR_EXP 77
49156: PUSH
49157: LD_INT 1
49159: ST_TO_ADDR
// if p3 = 34 then
49160: LD_VAR 0 3
49164: PUSH
49165: LD_INT 34
49167: EQUAL
49168: IFFALSE 49178
// sShield := true ;
49170: LD_ADDR_EXP 78
49174: PUSH
49175: LD_INT 1
49177: ST_TO_ADDR
// if p3 = 35 then
49178: LD_VAR 0 3
49182: PUSH
49183: LD_INT 35
49185: EQUAL
49186: IFFALSE 49196
// sTime := true ;
49188: LD_ADDR_EXP 79
49192: PUSH
49193: LD_INT 1
49195: ST_TO_ADDR
// if p3 = 36 then
49196: LD_VAR 0 3
49200: PUSH
49201: LD_INT 36
49203: EQUAL
49204: IFFALSE 49214
// sTools := true ;
49206: LD_ADDR_EXP 80
49210: PUSH
49211: LD_INT 1
49213: ST_TO_ADDR
// if p3 = 101 then
49214: LD_VAR 0 3
49218: PUSH
49219: LD_INT 101
49221: EQUAL
49222: IFFALSE 49232
// sSold := true ;
49224: LD_ADDR_EXP 45
49228: PUSH
49229: LD_INT 1
49231: ST_TO_ADDR
// if p3 = 102 then
49232: LD_VAR 0 3
49236: PUSH
49237: LD_INT 102
49239: EQUAL
49240: IFFALSE 49250
// sDiff := true ;
49242: LD_ADDR_EXP 46
49246: PUSH
49247: LD_INT 1
49249: ST_TO_ADDR
// if p3 = 103 then
49250: LD_VAR 0 3
49254: PUSH
49255: LD_INT 103
49257: EQUAL
49258: IFFALSE 49268
// sFog := true ;
49260: LD_ADDR_EXP 49
49264: PUSH
49265: LD_INT 1
49267: ST_TO_ADDR
// if p3 = 104 then
49268: LD_VAR 0 3
49272: PUSH
49273: LD_INT 104
49275: EQUAL
49276: IFFALSE 49286
// sReset := true ;
49278: LD_ADDR_EXP 50
49282: PUSH
49283: LD_INT 1
49285: ST_TO_ADDR
// if p3 = 105 then
49286: LD_VAR 0 3
49290: PUSH
49291: LD_INT 105
49293: EQUAL
49294: IFFALSE 49304
// sSun := true ;
49296: LD_ADDR_EXP 51
49300: PUSH
49301: LD_INT 1
49303: ST_TO_ADDR
// if p3 = 106 then
49304: LD_VAR 0 3
49308: PUSH
49309: LD_INT 106
49311: EQUAL
49312: IFFALSE 49322
// sTiger := true ;
49314: LD_ADDR_EXP 47
49318: PUSH
49319: LD_INT 1
49321: ST_TO_ADDR
// if p3 = 107 then
49322: LD_VAR 0 3
49326: PUSH
49327: LD_INT 107
49329: EQUAL
49330: IFFALSE 49340
// sBomb := true ;
49332: LD_ADDR_EXP 48
49336: PUSH
49337: LD_INT 1
49339: ST_TO_ADDR
// if p3 = 108 then
49340: LD_VAR 0 3
49344: PUSH
49345: LD_INT 108
49347: EQUAL
49348: IFFALSE 49358
// sWound := true ;
49350: LD_ADDR_EXP 56
49354: PUSH
49355: LD_INT 1
49357: ST_TO_ADDR
// if p3 = 109 then
49358: LD_VAR 0 3
49362: PUSH
49363: LD_INT 109
49365: EQUAL
49366: IFFALSE 49376
// sBetray := true ;
49368: LD_ADDR_EXP 60
49372: PUSH
49373: LD_INT 1
49375: ST_TO_ADDR
// if p3 = 110 then
49376: LD_VAR 0 3
49380: PUSH
49381: LD_INT 110
49383: EQUAL
49384: IFFALSE 49394
// sContamin := true ;
49386: LD_ADDR_EXP 61
49390: PUSH
49391: LD_INT 1
49393: ST_TO_ADDR
// if p3 = 111 then
49394: LD_VAR 0 3
49398: PUSH
49399: LD_INT 111
49401: EQUAL
49402: IFFALSE 49412
// sOil := true ;
49404: LD_ADDR_EXP 63
49408: PUSH
49409: LD_INT 1
49411: ST_TO_ADDR
// if p3 = 112 then
49412: LD_VAR 0 3
49416: PUSH
49417: LD_INT 112
49419: EQUAL
49420: IFFALSE 49430
// sStu := true ;
49422: LD_ADDR_EXP 67
49426: PUSH
49427: LD_INT 1
49429: ST_TO_ADDR
// if p3 = 113 then
49430: LD_VAR 0 3
49434: PUSH
49435: LD_INT 113
49437: EQUAL
49438: IFFALSE 49448
// sBazooka := true ;
49440: LD_ADDR_EXP 70
49444: PUSH
49445: LD_INT 1
49447: ST_TO_ADDR
// if p3 = 114 then
49448: LD_VAR 0 3
49452: PUSH
49453: LD_INT 114
49455: EQUAL
49456: IFFALSE 49466
// sMortar := true ;
49458: LD_ADDR_EXP 71
49462: PUSH
49463: LD_INT 1
49465: ST_TO_ADDR
// if p3 = 115 then
49466: LD_VAR 0 3
49470: PUSH
49471: LD_INT 115
49473: EQUAL
49474: IFFALSE 49484
// sRanger := true ;
49476: LD_ADDR_EXP 81
49480: PUSH
49481: LD_INT 1
49483: ST_TO_ADDR
// if p3 = 116 then
49484: LD_VAR 0 3
49488: PUSH
49489: LD_INT 116
49491: EQUAL
49492: IFFALSE 49502
// sComputer := true ;
49494: LD_ADDR_EXP 82
49498: PUSH
49499: LD_INT 1
49501: ST_TO_ADDR
// if p3 = 117 then
49502: LD_VAR 0 3
49506: PUSH
49507: LD_INT 117
49509: EQUAL
49510: IFFALSE 49520
// s30 := true ;
49512: LD_ADDR_EXP 83
49516: PUSH
49517: LD_INT 1
49519: ST_TO_ADDR
// if p3 = 118 then
49520: LD_VAR 0 3
49524: PUSH
49525: LD_INT 118
49527: EQUAL
49528: IFFALSE 49538
// s60 := true ;
49530: LD_ADDR_EXP 84
49534: PUSH
49535: LD_INT 1
49537: ST_TO_ADDR
// end ; if p2 = hack_mode then
49538: LD_VAR 0 2
49542: PUSH
49543: LD_INT 101
49545: EQUAL
49546: IFFALSE 49674
// begin case p3 of 1 :
49548: LD_VAR 0 3
49552: PUSH
49553: LD_INT 1
49555: DOUBLE
49556: EQUAL
49557: IFTRUE 49561
49559: GO 49568
49561: POP
// hHackUnlimitedResources ; 2 :
49562: CALL 61937 0 0
49566: GO 49674
49568: LD_INT 2
49570: DOUBLE
49571: EQUAL
49572: IFTRUE 49576
49574: GO 49583
49576: POP
// hHackSetLevel10 ; 3 :
49577: CALL 62070 0 0
49581: GO 49674
49583: LD_INT 3
49585: DOUBLE
49586: EQUAL
49587: IFTRUE 49591
49589: GO 49598
49591: POP
// hHackSetLevel10YourUnits ; 4 :
49592: CALL 62155 0 0
49596: GO 49674
49598: LD_INT 4
49600: DOUBLE
49601: EQUAL
49602: IFTRUE 49606
49604: GO 49613
49606: POP
// hHackInvincible ; 5 :
49607: CALL 62603 0 0
49611: GO 49674
49613: LD_INT 5
49615: DOUBLE
49616: EQUAL
49617: IFTRUE 49621
49619: GO 49628
49621: POP
// hHackInvisible ; 6 :
49622: CALL 62714 0 0
49626: GO 49674
49628: LD_INT 6
49630: DOUBLE
49631: EQUAL
49632: IFTRUE 49636
49634: GO 49643
49636: POP
// hHackChangeYourSide ; 7 :
49637: CALL 62771 0 0
49641: GO 49674
49643: LD_INT 7
49645: DOUBLE
49646: EQUAL
49647: IFTRUE 49651
49649: GO 49658
49651: POP
// hHackChangeUnitSide ; 8 :
49652: CALL 62813 0 0
49656: GO 49674
49658: LD_INT 8
49660: DOUBLE
49661: EQUAL
49662: IFTRUE 49666
49664: GO 49673
49666: POP
// hHackFog ; end ;
49667: CALL 62914 0 0
49671: GO 49674
49673: POP
// end ; if p2 = game_save_mode then
49674: LD_VAR 0 2
49678: PUSH
49679: LD_INT 102
49681: EQUAL
49682: IFFALSE 49739
// begin if p3 = 1 then
49684: LD_VAR 0 3
49688: PUSH
49689: LD_INT 1
49691: EQUAL
49692: IFFALSE 49704
// globalGameSaveCounter := p4 ;
49694: LD_ADDR_EXP 27
49698: PUSH
49699: LD_VAR 0 4
49703: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49704: LD_VAR 0 3
49708: PUSH
49709: LD_INT 2
49711: EQUAL
49712: IFFALSE 49720
49714: PUSH
49715: LD_EXP 27
49719: AND
49720: IFFALSE 49739
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49722: LD_STRING setGameSaveCounter(
49724: PUSH
49725: LD_EXP 27
49729: STR
49730: PUSH
49731: LD_STRING )
49733: STR
49734: PPUSH
49735: CALL_OW 559
// end ; end ;
49739: LD_VAR 0 7
49743: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49744: LD_INT 0
49746: PPUSH
// streamModeActive := false ;
49747: LD_ADDR_EXP 28
49751: PUSH
49752: LD_INT 0
49754: ST_TO_ADDR
// normalCounter := 36 ;
49755: LD_ADDR_EXP 29
49759: PUSH
49760: LD_INT 36
49762: ST_TO_ADDR
// hardcoreCounter := 18 ;
49763: LD_ADDR_EXP 30
49767: PUSH
49768: LD_INT 18
49770: ST_TO_ADDR
// sRocket := false ;
49771: LD_ADDR_EXP 33
49775: PUSH
49776: LD_INT 0
49778: ST_TO_ADDR
// sSpeed := false ;
49779: LD_ADDR_EXP 32
49783: PUSH
49784: LD_INT 0
49786: ST_TO_ADDR
// sEngine := false ;
49787: LD_ADDR_EXP 34
49791: PUSH
49792: LD_INT 0
49794: ST_TO_ADDR
// sSpec := false ;
49795: LD_ADDR_EXP 31
49799: PUSH
49800: LD_INT 0
49802: ST_TO_ADDR
// sLevel := false ;
49803: LD_ADDR_EXP 35
49807: PUSH
49808: LD_INT 0
49810: ST_TO_ADDR
// sArmoury := false ;
49811: LD_ADDR_EXP 36
49815: PUSH
49816: LD_INT 0
49818: ST_TO_ADDR
// sRadar := false ;
49819: LD_ADDR_EXP 37
49823: PUSH
49824: LD_INT 0
49826: ST_TO_ADDR
// sBunker := false ;
49827: LD_ADDR_EXP 38
49831: PUSH
49832: LD_INT 0
49834: ST_TO_ADDR
// sHack := false ;
49835: LD_ADDR_EXP 39
49839: PUSH
49840: LD_INT 0
49842: ST_TO_ADDR
// sFire := false ;
49843: LD_ADDR_EXP 40
49847: PUSH
49848: LD_INT 0
49850: ST_TO_ADDR
// sRefresh := false ;
49851: LD_ADDR_EXP 41
49855: PUSH
49856: LD_INT 0
49858: ST_TO_ADDR
// sExp := false ;
49859: LD_ADDR_EXP 42
49863: PUSH
49864: LD_INT 0
49866: ST_TO_ADDR
// sDepot := false ;
49867: LD_ADDR_EXP 43
49871: PUSH
49872: LD_INT 0
49874: ST_TO_ADDR
// sFlag := false ;
49875: LD_ADDR_EXP 44
49879: PUSH
49880: LD_INT 0
49882: ST_TO_ADDR
// sKamikadze := false ;
49883: LD_ADDR_EXP 52
49887: PUSH
49888: LD_INT 0
49890: ST_TO_ADDR
// sTroll := false ;
49891: LD_ADDR_EXP 53
49895: PUSH
49896: LD_INT 0
49898: ST_TO_ADDR
// sSlow := false ;
49899: LD_ADDR_EXP 54
49903: PUSH
49904: LD_INT 0
49906: ST_TO_ADDR
// sLack := false ;
49907: LD_ADDR_EXP 55
49911: PUSH
49912: LD_INT 0
49914: ST_TO_ADDR
// sTank := false ;
49915: LD_ADDR_EXP 57
49919: PUSH
49920: LD_INT 0
49922: ST_TO_ADDR
// sRemote := false ;
49923: LD_ADDR_EXP 58
49927: PUSH
49928: LD_INT 0
49930: ST_TO_ADDR
// sPowell := false ;
49931: LD_ADDR_EXP 59
49935: PUSH
49936: LD_INT 0
49938: ST_TO_ADDR
// sTeleport := false ;
49939: LD_ADDR_EXP 62
49943: PUSH
49944: LD_INT 0
49946: ST_TO_ADDR
// sOilTower := false ;
49947: LD_ADDR_EXP 64
49951: PUSH
49952: LD_INT 0
49954: ST_TO_ADDR
// sShovel := false ;
49955: LD_ADDR_EXP 65
49959: PUSH
49960: LD_INT 0
49962: ST_TO_ADDR
// sSheik := false ;
49963: LD_ADDR_EXP 66
49967: PUSH
49968: LD_INT 0
49970: ST_TO_ADDR
// sEarthquake := false ;
49971: LD_ADDR_EXP 68
49975: PUSH
49976: LD_INT 0
49978: ST_TO_ADDR
// sAI := false ;
49979: LD_ADDR_EXP 69
49983: PUSH
49984: LD_INT 0
49986: ST_TO_ADDR
// sCargo := false ;
49987: LD_ADDR_EXP 72
49991: PUSH
49992: LD_INT 0
49994: ST_TO_ADDR
// sDLaser := false ;
49995: LD_ADDR_EXP 73
49999: PUSH
50000: LD_INT 0
50002: ST_TO_ADDR
// sExchange := false ;
50003: LD_ADDR_EXP 74
50007: PUSH
50008: LD_INT 0
50010: ST_TO_ADDR
// sFac := false ;
50011: LD_ADDR_EXP 75
50015: PUSH
50016: LD_INT 0
50018: ST_TO_ADDR
// sPower := false ;
50019: LD_ADDR_EXP 76
50023: PUSH
50024: LD_INT 0
50026: ST_TO_ADDR
// sRandom := false ;
50027: LD_ADDR_EXP 77
50031: PUSH
50032: LD_INT 0
50034: ST_TO_ADDR
// sShield := false ;
50035: LD_ADDR_EXP 78
50039: PUSH
50040: LD_INT 0
50042: ST_TO_ADDR
// sTime := false ;
50043: LD_ADDR_EXP 79
50047: PUSH
50048: LD_INT 0
50050: ST_TO_ADDR
// sTools := false ;
50051: LD_ADDR_EXP 80
50055: PUSH
50056: LD_INT 0
50058: ST_TO_ADDR
// sSold := false ;
50059: LD_ADDR_EXP 45
50063: PUSH
50064: LD_INT 0
50066: ST_TO_ADDR
// sDiff := false ;
50067: LD_ADDR_EXP 46
50071: PUSH
50072: LD_INT 0
50074: ST_TO_ADDR
// sFog := false ;
50075: LD_ADDR_EXP 49
50079: PUSH
50080: LD_INT 0
50082: ST_TO_ADDR
// sReset := false ;
50083: LD_ADDR_EXP 50
50087: PUSH
50088: LD_INT 0
50090: ST_TO_ADDR
// sSun := false ;
50091: LD_ADDR_EXP 51
50095: PUSH
50096: LD_INT 0
50098: ST_TO_ADDR
// sTiger := false ;
50099: LD_ADDR_EXP 47
50103: PUSH
50104: LD_INT 0
50106: ST_TO_ADDR
// sBomb := false ;
50107: LD_ADDR_EXP 48
50111: PUSH
50112: LD_INT 0
50114: ST_TO_ADDR
// sWound := false ;
50115: LD_ADDR_EXP 56
50119: PUSH
50120: LD_INT 0
50122: ST_TO_ADDR
// sBetray := false ;
50123: LD_ADDR_EXP 60
50127: PUSH
50128: LD_INT 0
50130: ST_TO_ADDR
// sContamin := false ;
50131: LD_ADDR_EXP 61
50135: PUSH
50136: LD_INT 0
50138: ST_TO_ADDR
// sOil := false ;
50139: LD_ADDR_EXP 63
50143: PUSH
50144: LD_INT 0
50146: ST_TO_ADDR
// sStu := false ;
50147: LD_ADDR_EXP 67
50151: PUSH
50152: LD_INT 0
50154: ST_TO_ADDR
// sBazooka := false ;
50155: LD_ADDR_EXP 70
50159: PUSH
50160: LD_INT 0
50162: ST_TO_ADDR
// sMortar := false ;
50163: LD_ADDR_EXP 71
50167: PUSH
50168: LD_INT 0
50170: ST_TO_ADDR
// sRanger := false ;
50171: LD_ADDR_EXP 81
50175: PUSH
50176: LD_INT 0
50178: ST_TO_ADDR
// sComputer := false ;
50179: LD_ADDR_EXP 82
50183: PUSH
50184: LD_INT 0
50186: ST_TO_ADDR
// s30 := false ;
50187: LD_ADDR_EXP 83
50191: PUSH
50192: LD_INT 0
50194: ST_TO_ADDR
// s60 := false ;
50195: LD_ADDR_EXP 84
50199: PUSH
50200: LD_INT 0
50202: ST_TO_ADDR
// end ;
50203: LD_VAR 0 1
50207: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50208: LD_INT 0
50210: PPUSH
50211: PPUSH
50212: PPUSH
50213: PPUSH
50214: PPUSH
50215: PPUSH
50216: PPUSH
// result := [ ] ;
50217: LD_ADDR_VAR 0 2
50221: PUSH
50222: EMPTY
50223: ST_TO_ADDR
// if campaign_id = 1 then
50224: LD_OWVAR 69
50228: PUSH
50229: LD_INT 1
50231: EQUAL
50232: IFFALSE 53398
// begin case mission_number of 1 :
50234: LD_OWVAR 70
50238: PUSH
50239: LD_INT 1
50241: DOUBLE
50242: EQUAL
50243: IFTRUE 50247
50245: GO 50323
50247: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50248: LD_ADDR_VAR 0 2
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 4
50258: PUSH
50259: LD_INT 11
50261: PUSH
50262: LD_INT 12
50264: PUSH
50265: LD_INT 15
50267: PUSH
50268: LD_INT 16
50270: PUSH
50271: LD_INT 22
50273: PUSH
50274: LD_INT 23
50276: PUSH
50277: LD_INT 26
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 101
50293: PUSH
50294: LD_INT 102
50296: PUSH
50297: LD_INT 106
50299: PUSH
50300: LD_INT 116
50302: PUSH
50303: LD_INT 117
50305: PUSH
50306: LD_INT 118
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: ST_TO_ADDR
50321: GO 53396
50323: LD_INT 2
50325: DOUBLE
50326: EQUAL
50327: IFTRUE 50331
50329: GO 50415
50331: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50332: LD_ADDR_VAR 0 2
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 4
50342: PUSH
50343: LD_INT 11
50345: PUSH
50346: LD_INT 12
50348: PUSH
50349: LD_INT 15
50351: PUSH
50352: LD_INT 16
50354: PUSH
50355: LD_INT 22
50357: PUSH
50358: LD_INT 23
50360: PUSH
50361: LD_INT 26
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 101
50377: PUSH
50378: LD_INT 102
50380: PUSH
50381: LD_INT 105
50383: PUSH
50384: LD_INT 106
50386: PUSH
50387: LD_INT 108
50389: PUSH
50390: LD_INT 116
50392: PUSH
50393: LD_INT 117
50395: PUSH
50396: LD_INT 118
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: ST_TO_ADDR
50413: GO 53396
50415: LD_INT 3
50417: DOUBLE
50418: EQUAL
50419: IFTRUE 50423
50421: GO 50511
50423: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50424: LD_ADDR_VAR 0 2
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 4
50434: PUSH
50435: LD_INT 5
50437: PUSH
50438: LD_INT 11
50440: PUSH
50441: LD_INT 12
50443: PUSH
50444: LD_INT 15
50446: PUSH
50447: LD_INT 16
50449: PUSH
50450: LD_INT 22
50452: PUSH
50453: LD_INT 26
50455: PUSH
50456: LD_INT 36
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 101
50473: PUSH
50474: LD_INT 102
50476: PUSH
50477: LD_INT 105
50479: PUSH
50480: LD_INT 106
50482: PUSH
50483: LD_INT 108
50485: PUSH
50486: LD_INT 116
50488: PUSH
50489: LD_INT 117
50491: PUSH
50492: LD_INT 118
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: ST_TO_ADDR
50509: GO 53396
50511: LD_INT 4
50513: DOUBLE
50514: EQUAL
50515: IFTRUE 50519
50517: GO 50615
50519: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50520: LD_ADDR_VAR 0 2
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 4
50530: PUSH
50531: LD_INT 5
50533: PUSH
50534: LD_INT 8
50536: PUSH
50537: LD_INT 11
50539: PUSH
50540: LD_INT 12
50542: PUSH
50543: LD_INT 15
50545: PUSH
50546: LD_INT 16
50548: PUSH
50549: LD_INT 22
50551: PUSH
50552: LD_INT 23
50554: PUSH
50555: LD_INT 26
50557: PUSH
50558: LD_INT 36
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 101
50577: PUSH
50578: LD_INT 102
50580: PUSH
50581: LD_INT 105
50583: PUSH
50584: LD_INT 106
50586: PUSH
50587: LD_INT 108
50589: PUSH
50590: LD_INT 116
50592: PUSH
50593: LD_INT 117
50595: PUSH
50596: LD_INT 118
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: ST_TO_ADDR
50613: GO 53396
50615: LD_INT 5
50617: DOUBLE
50618: EQUAL
50619: IFTRUE 50623
50621: GO 50735
50623: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50624: LD_ADDR_VAR 0 2
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 4
50634: PUSH
50635: LD_INT 5
50637: PUSH
50638: LD_INT 6
50640: PUSH
50641: LD_INT 8
50643: PUSH
50644: LD_INT 11
50646: PUSH
50647: LD_INT 12
50649: PUSH
50650: LD_INT 15
50652: PUSH
50653: LD_INT 16
50655: PUSH
50656: LD_INT 22
50658: PUSH
50659: LD_INT 23
50661: PUSH
50662: LD_INT 25
50664: PUSH
50665: LD_INT 26
50667: PUSH
50668: LD_INT 36
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 101
50689: PUSH
50690: LD_INT 102
50692: PUSH
50693: LD_INT 105
50695: PUSH
50696: LD_INT 106
50698: PUSH
50699: LD_INT 108
50701: PUSH
50702: LD_INT 109
50704: PUSH
50705: LD_INT 112
50707: PUSH
50708: LD_INT 116
50710: PUSH
50711: LD_INT 117
50713: PUSH
50714: LD_INT 118
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: ST_TO_ADDR
50733: GO 53396
50735: LD_INT 6
50737: DOUBLE
50738: EQUAL
50739: IFTRUE 50743
50741: GO 50875
50743: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50744: LD_ADDR_VAR 0 2
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 4
50754: PUSH
50755: LD_INT 5
50757: PUSH
50758: LD_INT 6
50760: PUSH
50761: LD_INT 8
50763: PUSH
50764: LD_INT 11
50766: PUSH
50767: LD_INT 12
50769: PUSH
50770: LD_INT 15
50772: PUSH
50773: LD_INT 16
50775: PUSH
50776: LD_INT 20
50778: PUSH
50779: LD_INT 21
50781: PUSH
50782: LD_INT 22
50784: PUSH
50785: LD_INT 23
50787: PUSH
50788: LD_INT 25
50790: PUSH
50791: LD_INT 26
50793: PUSH
50794: LD_INT 30
50796: PUSH
50797: LD_INT 31
50799: PUSH
50800: LD_INT 32
50802: PUSH
50803: LD_INT 36
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 101
50829: PUSH
50830: LD_INT 102
50832: PUSH
50833: LD_INT 105
50835: PUSH
50836: LD_INT 106
50838: PUSH
50839: LD_INT 108
50841: PUSH
50842: LD_INT 109
50844: PUSH
50845: LD_INT 112
50847: PUSH
50848: LD_INT 116
50850: PUSH
50851: LD_INT 117
50853: PUSH
50854: LD_INT 118
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: ST_TO_ADDR
50873: GO 53396
50875: LD_INT 7
50877: DOUBLE
50878: EQUAL
50879: IFTRUE 50883
50881: GO 50995
50883: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50884: LD_ADDR_VAR 0 2
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 4
50894: PUSH
50895: LD_INT 5
50897: PUSH
50898: LD_INT 7
50900: PUSH
50901: LD_INT 11
50903: PUSH
50904: LD_INT 12
50906: PUSH
50907: LD_INT 15
50909: PUSH
50910: LD_INT 16
50912: PUSH
50913: LD_INT 20
50915: PUSH
50916: LD_INT 21
50918: PUSH
50919: LD_INT 22
50921: PUSH
50922: LD_INT 23
50924: PUSH
50925: LD_INT 25
50927: PUSH
50928: LD_INT 26
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 101
50949: PUSH
50950: LD_INT 102
50952: PUSH
50953: LD_INT 103
50955: PUSH
50956: LD_INT 105
50958: PUSH
50959: LD_INT 106
50961: PUSH
50962: LD_INT 108
50964: PUSH
50965: LD_INT 112
50967: PUSH
50968: LD_INT 116
50970: PUSH
50971: LD_INT 117
50973: PUSH
50974: LD_INT 118
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: ST_TO_ADDR
50993: GO 53396
50995: LD_INT 8
50997: DOUBLE
50998: EQUAL
50999: IFTRUE 51003
51001: GO 51143
51003: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51004: LD_ADDR_VAR 0 2
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: LD_INT 4
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: LD_INT 6
51020: PUSH
51021: LD_INT 7
51023: PUSH
51024: LD_INT 8
51026: PUSH
51027: LD_INT 11
51029: PUSH
51030: LD_INT 12
51032: PUSH
51033: LD_INT 15
51035: PUSH
51036: LD_INT 16
51038: PUSH
51039: LD_INT 20
51041: PUSH
51042: LD_INT 21
51044: PUSH
51045: LD_INT 22
51047: PUSH
51048: LD_INT 23
51050: PUSH
51051: LD_INT 25
51053: PUSH
51054: LD_INT 26
51056: PUSH
51057: LD_INT 30
51059: PUSH
51060: LD_INT 31
51062: PUSH
51063: LD_INT 32
51065: PUSH
51066: LD_INT 36
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 101
51093: PUSH
51094: LD_INT 102
51096: PUSH
51097: LD_INT 103
51099: PUSH
51100: LD_INT 105
51102: PUSH
51103: LD_INT 106
51105: PUSH
51106: LD_INT 108
51108: PUSH
51109: LD_INT 109
51111: PUSH
51112: LD_INT 112
51114: PUSH
51115: LD_INT 116
51117: PUSH
51118: LD_INT 117
51120: PUSH
51121: LD_INT 118
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: ST_TO_ADDR
51141: GO 53396
51143: LD_INT 9
51145: DOUBLE
51146: EQUAL
51147: IFTRUE 51151
51149: GO 51299
51151: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51152: LD_ADDR_VAR 0 2
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 4
51162: PUSH
51163: LD_INT 5
51165: PUSH
51166: LD_INT 6
51168: PUSH
51169: LD_INT 7
51171: PUSH
51172: LD_INT 8
51174: PUSH
51175: LD_INT 11
51177: PUSH
51178: LD_INT 12
51180: PUSH
51181: LD_INT 15
51183: PUSH
51184: LD_INT 16
51186: PUSH
51187: LD_INT 20
51189: PUSH
51190: LD_INT 21
51192: PUSH
51193: LD_INT 22
51195: PUSH
51196: LD_INT 23
51198: PUSH
51199: LD_INT 25
51201: PUSH
51202: LD_INT 26
51204: PUSH
51205: LD_INT 28
51207: PUSH
51208: LD_INT 30
51210: PUSH
51211: LD_INT 31
51213: PUSH
51214: LD_INT 32
51216: PUSH
51217: LD_INT 36
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 101
51245: PUSH
51246: LD_INT 102
51248: PUSH
51249: LD_INT 103
51251: PUSH
51252: LD_INT 105
51254: PUSH
51255: LD_INT 106
51257: PUSH
51258: LD_INT 108
51260: PUSH
51261: LD_INT 109
51263: PUSH
51264: LD_INT 112
51266: PUSH
51267: LD_INT 114
51269: PUSH
51270: LD_INT 116
51272: PUSH
51273: LD_INT 117
51275: PUSH
51276: LD_INT 118
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: ST_TO_ADDR
51297: GO 53396
51299: LD_INT 10
51301: DOUBLE
51302: EQUAL
51303: IFTRUE 51307
51305: GO 51503
51307: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51308: LD_ADDR_VAR 0 2
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 4
51318: PUSH
51319: LD_INT 5
51321: PUSH
51322: LD_INT 6
51324: PUSH
51325: LD_INT 7
51327: PUSH
51328: LD_INT 8
51330: PUSH
51331: LD_INT 9
51333: PUSH
51334: LD_INT 10
51336: PUSH
51337: LD_INT 11
51339: PUSH
51340: LD_INT 12
51342: PUSH
51343: LD_INT 13
51345: PUSH
51346: LD_INT 14
51348: PUSH
51349: LD_INT 15
51351: PUSH
51352: LD_INT 16
51354: PUSH
51355: LD_INT 17
51357: PUSH
51358: LD_INT 18
51360: PUSH
51361: LD_INT 19
51363: PUSH
51364: LD_INT 20
51366: PUSH
51367: LD_INT 21
51369: PUSH
51370: LD_INT 22
51372: PUSH
51373: LD_INT 23
51375: PUSH
51376: LD_INT 24
51378: PUSH
51379: LD_INT 25
51381: PUSH
51382: LD_INT 26
51384: PUSH
51385: LD_INT 28
51387: PUSH
51388: LD_INT 30
51390: PUSH
51391: LD_INT 31
51393: PUSH
51394: LD_INT 32
51396: PUSH
51397: LD_INT 36
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 101
51433: PUSH
51434: LD_INT 102
51436: PUSH
51437: LD_INT 103
51439: PUSH
51440: LD_INT 104
51442: PUSH
51443: LD_INT 105
51445: PUSH
51446: LD_INT 106
51448: PUSH
51449: LD_INT 107
51451: PUSH
51452: LD_INT 108
51454: PUSH
51455: LD_INT 109
51457: PUSH
51458: LD_INT 110
51460: PUSH
51461: LD_INT 111
51463: PUSH
51464: LD_INT 112
51466: PUSH
51467: LD_INT 114
51469: PUSH
51470: LD_INT 116
51472: PUSH
51473: LD_INT 117
51475: PUSH
51476: LD_INT 118
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: ST_TO_ADDR
51501: GO 53396
51503: LD_INT 11
51505: DOUBLE
51506: EQUAL
51507: IFTRUE 51511
51509: GO 51715
51511: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51512: LD_ADDR_VAR 0 2
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 4
51525: PUSH
51526: LD_INT 5
51528: PUSH
51529: LD_INT 6
51531: PUSH
51532: LD_INT 7
51534: PUSH
51535: LD_INT 8
51537: PUSH
51538: LD_INT 9
51540: PUSH
51541: LD_INT 10
51543: PUSH
51544: LD_INT 11
51546: PUSH
51547: LD_INT 12
51549: PUSH
51550: LD_INT 13
51552: PUSH
51553: LD_INT 14
51555: PUSH
51556: LD_INT 15
51558: PUSH
51559: LD_INT 16
51561: PUSH
51562: LD_INT 17
51564: PUSH
51565: LD_INT 18
51567: PUSH
51568: LD_INT 19
51570: PUSH
51571: LD_INT 20
51573: PUSH
51574: LD_INT 21
51576: PUSH
51577: LD_INT 22
51579: PUSH
51580: LD_INT 23
51582: PUSH
51583: LD_INT 24
51585: PUSH
51586: LD_INT 25
51588: PUSH
51589: LD_INT 26
51591: PUSH
51592: LD_INT 28
51594: PUSH
51595: LD_INT 30
51597: PUSH
51598: LD_INT 31
51600: PUSH
51601: LD_INT 32
51603: PUSH
51604: LD_INT 34
51606: PUSH
51607: LD_INT 36
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 101
51645: PUSH
51646: LD_INT 102
51648: PUSH
51649: LD_INT 103
51651: PUSH
51652: LD_INT 104
51654: PUSH
51655: LD_INT 105
51657: PUSH
51658: LD_INT 106
51660: PUSH
51661: LD_INT 107
51663: PUSH
51664: LD_INT 108
51666: PUSH
51667: LD_INT 109
51669: PUSH
51670: LD_INT 110
51672: PUSH
51673: LD_INT 111
51675: PUSH
51676: LD_INT 112
51678: PUSH
51679: LD_INT 114
51681: PUSH
51682: LD_INT 116
51684: PUSH
51685: LD_INT 117
51687: PUSH
51688: LD_INT 118
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: ST_TO_ADDR
51713: GO 53396
51715: LD_INT 12
51717: DOUBLE
51718: EQUAL
51719: IFTRUE 51723
51721: GO 51943
51723: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51724: LD_ADDR_VAR 0 2
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 4
51740: PUSH
51741: LD_INT 5
51743: PUSH
51744: LD_INT 6
51746: PUSH
51747: LD_INT 7
51749: PUSH
51750: LD_INT 8
51752: PUSH
51753: LD_INT 9
51755: PUSH
51756: LD_INT 10
51758: PUSH
51759: LD_INT 11
51761: PUSH
51762: LD_INT 12
51764: PUSH
51765: LD_INT 13
51767: PUSH
51768: LD_INT 14
51770: PUSH
51771: LD_INT 15
51773: PUSH
51774: LD_INT 16
51776: PUSH
51777: LD_INT 17
51779: PUSH
51780: LD_INT 18
51782: PUSH
51783: LD_INT 19
51785: PUSH
51786: LD_INT 20
51788: PUSH
51789: LD_INT 21
51791: PUSH
51792: LD_INT 22
51794: PUSH
51795: LD_INT 23
51797: PUSH
51798: LD_INT 24
51800: PUSH
51801: LD_INT 25
51803: PUSH
51804: LD_INT 26
51806: PUSH
51807: LD_INT 27
51809: PUSH
51810: LD_INT 28
51812: PUSH
51813: LD_INT 30
51815: PUSH
51816: LD_INT 31
51818: PUSH
51819: LD_INT 32
51821: PUSH
51822: LD_INT 33
51824: PUSH
51825: LD_INT 34
51827: PUSH
51828: LD_INT 36
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 101
51869: PUSH
51870: LD_INT 102
51872: PUSH
51873: LD_INT 103
51875: PUSH
51876: LD_INT 104
51878: PUSH
51879: LD_INT 105
51881: PUSH
51882: LD_INT 106
51884: PUSH
51885: LD_INT 107
51887: PUSH
51888: LD_INT 108
51890: PUSH
51891: LD_INT 109
51893: PUSH
51894: LD_INT 110
51896: PUSH
51897: LD_INT 111
51899: PUSH
51900: LD_INT 112
51902: PUSH
51903: LD_INT 113
51905: PUSH
51906: LD_INT 114
51908: PUSH
51909: LD_INT 116
51911: PUSH
51912: LD_INT 117
51914: PUSH
51915: LD_INT 118
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: ST_TO_ADDR
51941: GO 53396
51943: LD_INT 13
51945: DOUBLE
51946: EQUAL
51947: IFTRUE 51951
51949: GO 52159
51951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51952: LD_ADDR_VAR 0 2
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 4
51968: PUSH
51969: LD_INT 5
51971: PUSH
51972: LD_INT 8
51974: PUSH
51975: LD_INT 9
51977: PUSH
51978: LD_INT 10
51980: PUSH
51981: LD_INT 11
51983: PUSH
51984: LD_INT 12
51986: PUSH
51987: LD_INT 14
51989: PUSH
51990: LD_INT 15
51992: PUSH
51993: LD_INT 16
51995: PUSH
51996: LD_INT 17
51998: PUSH
51999: LD_INT 18
52001: PUSH
52002: LD_INT 19
52004: PUSH
52005: LD_INT 20
52007: PUSH
52008: LD_INT 21
52010: PUSH
52011: LD_INT 22
52013: PUSH
52014: LD_INT 23
52016: PUSH
52017: LD_INT 24
52019: PUSH
52020: LD_INT 25
52022: PUSH
52023: LD_INT 26
52025: PUSH
52026: LD_INT 27
52028: PUSH
52029: LD_INT 28
52031: PUSH
52032: LD_INT 30
52034: PUSH
52035: LD_INT 31
52037: PUSH
52038: LD_INT 32
52040: PUSH
52041: LD_INT 33
52043: PUSH
52044: LD_INT 34
52046: PUSH
52047: LD_INT 36
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 101
52085: PUSH
52086: LD_INT 102
52088: PUSH
52089: LD_INT 103
52091: PUSH
52092: LD_INT 104
52094: PUSH
52095: LD_INT 105
52097: PUSH
52098: LD_INT 106
52100: PUSH
52101: LD_INT 107
52103: PUSH
52104: LD_INT 108
52106: PUSH
52107: LD_INT 109
52109: PUSH
52110: LD_INT 110
52112: PUSH
52113: LD_INT 111
52115: PUSH
52116: LD_INT 112
52118: PUSH
52119: LD_INT 113
52121: PUSH
52122: LD_INT 114
52124: PUSH
52125: LD_INT 116
52127: PUSH
52128: LD_INT 117
52130: PUSH
52131: LD_INT 118
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: ST_TO_ADDR
52157: GO 53396
52159: LD_INT 14
52161: DOUBLE
52162: EQUAL
52163: IFTRUE 52167
52165: GO 52391
52167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52168: LD_ADDR_VAR 0 2
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 4
52184: PUSH
52185: LD_INT 5
52187: PUSH
52188: LD_INT 6
52190: PUSH
52191: LD_INT 7
52193: PUSH
52194: LD_INT 8
52196: PUSH
52197: LD_INT 9
52199: PUSH
52200: LD_INT 10
52202: PUSH
52203: LD_INT 11
52205: PUSH
52206: LD_INT 12
52208: PUSH
52209: LD_INT 13
52211: PUSH
52212: LD_INT 14
52214: PUSH
52215: LD_INT 15
52217: PUSH
52218: LD_INT 16
52220: PUSH
52221: LD_INT 17
52223: PUSH
52224: LD_INT 18
52226: PUSH
52227: LD_INT 19
52229: PUSH
52230: LD_INT 20
52232: PUSH
52233: LD_INT 21
52235: PUSH
52236: LD_INT 22
52238: PUSH
52239: LD_INT 23
52241: PUSH
52242: LD_INT 24
52244: PUSH
52245: LD_INT 25
52247: PUSH
52248: LD_INT 26
52250: PUSH
52251: LD_INT 27
52253: PUSH
52254: LD_INT 28
52256: PUSH
52257: LD_INT 29
52259: PUSH
52260: LD_INT 30
52262: PUSH
52263: LD_INT 31
52265: PUSH
52266: LD_INT 32
52268: PUSH
52269: LD_INT 33
52271: PUSH
52272: LD_INT 34
52274: PUSH
52275: LD_INT 36
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 101
52317: PUSH
52318: LD_INT 102
52320: PUSH
52321: LD_INT 103
52323: PUSH
52324: LD_INT 104
52326: PUSH
52327: LD_INT 105
52329: PUSH
52330: LD_INT 106
52332: PUSH
52333: LD_INT 107
52335: PUSH
52336: LD_INT 108
52338: PUSH
52339: LD_INT 109
52341: PUSH
52342: LD_INT 110
52344: PUSH
52345: LD_INT 111
52347: PUSH
52348: LD_INT 112
52350: PUSH
52351: LD_INT 113
52353: PUSH
52354: LD_INT 114
52356: PUSH
52357: LD_INT 116
52359: PUSH
52360: LD_INT 117
52362: PUSH
52363: LD_INT 118
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: ST_TO_ADDR
52389: GO 53396
52391: LD_INT 15
52393: DOUBLE
52394: EQUAL
52395: IFTRUE 52399
52397: GO 52623
52399: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52400: LD_ADDR_VAR 0 2
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: LD_INT 5
52419: PUSH
52420: LD_INT 6
52422: PUSH
52423: LD_INT 7
52425: PUSH
52426: LD_INT 8
52428: PUSH
52429: LD_INT 9
52431: PUSH
52432: LD_INT 10
52434: PUSH
52435: LD_INT 11
52437: PUSH
52438: LD_INT 12
52440: PUSH
52441: LD_INT 13
52443: PUSH
52444: LD_INT 14
52446: PUSH
52447: LD_INT 15
52449: PUSH
52450: LD_INT 16
52452: PUSH
52453: LD_INT 17
52455: PUSH
52456: LD_INT 18
52458: PUSH
52459: LD_INT 19
52461: PUSH
52462: LD_INT 20
52464: PUSH
52465: LD_INT 21
52467: PUSH
52468: LD_INT 22
52470: PUSH
52471: LD_INT 23
52473: PUSH
52474: LD_INT 24
52476: PUSH
52477: LD_INT 25
52479: PUSH
52480: LD_INT 26
52482: PUSH
52483: LD_INT 27
52485: PUSH
52486: LD_INT 28
52488: PUSH
52489: LD_INT 29
52491: PUSH
52492: LD_INT 30
52494: PUSH
52495: LD_INT 31
52497: PUSH
52498: LD_INT 32
52500: PUSH
52501: LD_INT 33
52503: PUSH
52504: LD_INT 34
52506: PUSH
52507: LD_INT 36
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 101
52549: PUSH
52550: LD_INT 102
52552: PUSH
52553: LD_INT 103
52555: PUSH
52556: LD_INT 104
52558: PUSH
52559: LD_INT 105
52561: PUSH
52562: LD_INT 106
52564: PUSH
52565: LD_INT 107
52567: PUSH
52568: LD_INT 108
52570: PUSH
52571: LD_INT 109
52573: PUSH
52574: LD_INT 110
52576: PUSH
52577: LD_INT 111
52579: PUSH
52580: LD_INT 112
52582: PUSH
52583: LD_INT 113
52585: PUSH
52586: LD_INT 114
52588: PUSH
52589: LD_INT 116
52591: PUSH
52592: LD_INT 117
52594: PUSH
52595: LD_INT 118
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: ST_TO_ADDR
52621: GO 53396
52623: LD_INT 16
52625: DOUBLE
52626: EQUAL
52627: IFTRUE 52631
52629: GO 52767
52631: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52632: LD_ADDR_VAR 0 2
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: LD_INT 4
52642: PUSH
52643: LD_INT 5
52645: PUSH
52646: LD_INT 7
52648: PUSH
52649: LD_INT 11
52651: PUSH
52652: LD_INT 12
52654: PUSH
52655: LD_INT 15
52657: PUSH
52658: LD_INT 16
52660: PUSH
52661: LD_INT 20
52663: PUSH
52664: LD_INT 21
52666: PUSH
52667: LD_INT 22
52669: PUSH
52670: LD_INT 23
52672: PUSH
52673: LD_INT 25
52675: PUSH
52676: LD_INT 26
52678: PUSH
52679: LD_INT 30
52681: PUSH
52682: LD_INT 31
52684: PUSH
52685: LD_INT 32
52687: PUSH
52688: LD_INT 33
52690: PUSH
52691: LD_INT 34
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 101
52717: PUSH
52718: LD_INT 102
52720: PUSH
52721: LD_INT 103
52723: PUSH
52724: LD_INT 106
52726: PUSH
52727: LD_INT 108
52729: PUSH
52730: LD_INT 112
52732: PUSH
52733: LD_INT 113
52735: PUSH
52736: LD_INT 114
52738: PUSH
52739: LD_INT 116
52741: PUSH
52742: LD_INT 117
52744: PUSH
52745: LD_INT 118
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: ST_TO_ADDR
52765: GO 53396
52767: LD_INT 17
52769: DOUBLE
52770: EQUAL
52771: IFTRUE 52775
52773: GO 52999
52775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52776: LD_ADDR_VAR 0 2
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: LD_INT 5
52795: PUSH
52796: LD_INT 6
52798: PUSH
52799: LD_INT 7
52801: PUSH
52802: LD_INT 8
52804: PUSH
52805: LD_INT 9
52807: PUSH
52808: LD_INT 10
52810: PUSH
52811: LD_INT 11
52813: PUSH
52814: LD_INT 12
52816: PUSH
52817: LD_INT 13
52819: PUSH
52820: LD_INT 14
52822: PUSH
52823: LD_INT 15
52825: PUSH
52826: LD_INT 16
52828: PUSH
52829: LD_INT 17
52831: PUSH
52832: LD_INT 18
52834: PUSH
52835: LD_INT 19
52837: PUSH
52838: LD_INT 20
52840: PUSH
52841: LD_INT 21
52843: PUSH
52844: LD_INT 22
52846: PUSH
52847: LD_INT 23
52849: PUSH
52850: LD_INT 24
52852: PUSH
52853: LD_INT 25
52855: PUSH
52856: LD_INT 26
52858: PUSH
52859: LD_INT 27
52861: PUSH
52862: LD_INT 28
52864: PUSH
52865: LD_INT 29
52867: PUSH
52868: LD_INT 30
52870: PUSH
52871: LD_INT 31
52873: PUSH
52874: LD_INT 32
52876: PUSH
52877: LD_INT 33
52879: PUSH
52880: LD_INT 34
52882: PUSH
52883: LD_INT 36
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 101
52925: PUSH
52926: LD_INT 102
52928: PUSH
52929: LD_INT 103
52931: PUSH
52932: LD_INT 104
52934: PUSH
52935: LD_INT 105
52937: PUSH
52938: LD_INT 106
52940: PUSH
52941: LD_INT 107
52943: PUSH
52944: LD_INT 108
52946: PUSH
52947: LD_INT 109
52949: PUSH
52950: LD_INT 110
52952: PUSH
52953: LD_INT 111
52955: PUSH
52956: LD_INT 112
52958: PUSH
52959: LD_INT 113
52961: PUSH
52962: LD_INT 114
52964: PUSH
52965: LD_INT 116
52967: PUSH
52968: LD_INT 117
52970: PUSH
52971: LD_INT 118
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: ST_TO_ADDR
52997: GO 53396
52999: LD_INT 18
53001: DOUBLE
53002: EQUAL
53003: IFTRUE 53007
53005: GO 53155
53007: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53008: LD_ADDR_VAR 0 2
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 4
53018: PUSH
53019: LD_INT 5
53021: PUSH
53022: LD_INT 7
53024: PUSH
53025: LD_INT 11
53027: PUSH
53028: LD_INT 12
53030: PUSH
53031: LD_INT 15
53033: PUSH
53034: LD_INT 16
53036: PUSH
53037: LD_INT 20
53039: PUSH
53040: LD_INT 21
53042: PUSH
53043: LD_INT 22
53045: PUSH
53046: LD_INT 23
53048: PUSH
53049: LD_INT 25
53051: PUSH
53052: LD_INT 26
53054: PUSH
53055: LD_INT 30
53057: PUSH
53058: LD_INT 31
53060: PUSH
53061: LD_INT 32
53063: PUSH
53064: LD_INT 33
53066: PUSH
53067: LD_INT 34
53069: PUSH
53070: LD_INT 35
53072: PUSH
53073: LD_INT 36
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 101
53101: PUSH
53102: LD_INT 102
53104: PUSH
53105: LD_INT 103
53107: PUSH
53108: LD_INT 106
53110: PUSH
53111: LD_INT 108
53113: PUSH
53114: LD_INT 112
53116: PUSH
53117: LD_INT 113
53119: PUSH
53120: LD_INT 114
53122: PUSH
53123: LD_INT 115
53125: PUSH
53126: LD_INT 116
53128: PUSH
53129: LD_INT 117
53131: PUSH
53132: LD_INT 118
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: ST_TO_ADDR
53153: GO 53396
53155: LD_INT 19
53157: DOUBLE
53158: EQUAL
53159: IFTRUE 53163
53161: GO 53395
53163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53164: LD_ADDR_VAR 0 2
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: LD_INT 4
53180: PUSH
53181: LD_INT 5
53183: PUSH
53184: LD_INT 6
53186: PUSH
53187: LD_INT 7
53189: PUSH
53190: LD_INT 8
53192: PUSH
53193: LD_INT 9
53195: PUSH
53196: LD_INT 10
53198: PUSH
53199: LD_INT 11
53201: PUSH
53202: LD_INT 12
53204: PUSH
53205: LD_INT 13
53207: PUSH
53208: LD_INT 14
53210: PUSH
53211: LD_INT 15
53213: PUSH
53214: LD_INT 16
53216: PUSH
53217: LD_INT 17
53219: PUSH
53220: LD_INT 18
53222: PUSH
53223: LD_INT 19
53225: PUSH
53226: LD_INT 20
53228: PUSH
53229: LD_INT 21
53231: PUSH
53232: LD_INT 22
53234: PUSH
53235: LD_INT 23
53237: PUSH
53238: LD_INT 24
53240: PUSH
53241: LD_INT 25
53243: PUSH
53244: LD_INT 26
53246: PUSH
53247: LD_INT 27
53249: PUSH
53250: LD_INT 28
53252: PUSH
53253: LD_INT 29
53255: PUSH
53256: LD_INT 30
53258: PUSH
53259: LD_INT 31
53261: PUSH
53262: LD_INT 32
53264: PUSH
53265: LD_INT 33
53267: PUSH
53268: LD_INT 34
53270: PUSH
53271: LD_INT 35
53273: PUSH
53274: LD_INT 36
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 101
53317: PUSH
53318: LD_INT 102
53320: PUSH
53321: LD_INT 103
53323: PUSH
53324: LD_INT 104
53326: PUSH
53327: LD_INT 105
53329: PUSH
53330: LD_INT 106
53332: PUSH
53333: LD_INT 107
53335: PUSH
53336: LD_INT 108
53338: PUSH
53339: LD_INT 109
53341: PUSH
53342: LD_INT 110
53344: PUSH
53345: LD_INT 111
53347: PUSH
53348: LD_INT 112
53350: PUSH
53351: LD_INT 113
53353: PUSH
53354: LD_INT 114
53356: PUSH
53357: LD_INT 115
53359: PUSH
53360: LD_INT 116
53362: PUSH
53363: LD_INT 117
53365: PUSH
53366: LD_INT 118
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: ST_TO_ADDR
53393: GO 53396
53395: POP
// end else
53396: GO 53627
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53398: LD_ADDR_VAR 0 2
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 4
53414: PUSH
53415: LD_INT 5
53417: PUSH
53418: LD_INT 6
53420: PUSH
53421: LD_INT 7
53423: PUSH
53424: LD_INT 8
53426: PUSH
53427: LD_INT 9
53429: PUSH
53430: LD_INT 10
53432: PUSH
53433: LD_INT 11
53435: PUSH
53436: LD_INT 12
53438: PUSH
53439: LD_INT 13
53441: PUSH
53442: LD_INT 14
53444: PUSH
53445: LD_INT 15
53447: PUSH
53448: LD_INT 16
53450: PUSH
53451: LD_INT 17
53453: PUSH
53454: LD_INT 18
53456: PUSH
53457: LD_INT 19
53459: PUSH
53460: LD_INT 20
53462: PUSH
53463: LD_INT 21
53465: PUSH
53466: LD_INT 22
53468: PUSH
53469: LD_INT 23
53471: PUSH
53472: LD_INT 24
53474: PUSH
53475: LD_INT 25
53477: PUSH
53478: LD_INT 26
53480: PUSH
53481: LD_INT 27
53483: PUSH
53484: LD_INT 28
53486: PUSH
53487: LD_INT 29
53489: PUSH
53490: LD_INT 30
53492: PUSH
53493: LD_INT 31
53495: PUSH
53496: LD_INT 32
53498: PUSH
53499: LD_INT 33
53501: PUSH
53502: LD_INT 34
53504: PUSH
53505: LD_INT 35
53507: PUSH
53508: LD_INT 36
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 101
53551: PUSH
53552: LD_INT 102
53554: PUSH
53555: LD_INT 103
53557: PUSH
53558: LD_INT 104
53560: PUSH
53561: LD_INT 105
53563: PUSH
53564: LD_INT 106
53566: PUSH
53567: LD_INT 107
53569: PUSH
53570: LD_INT 108
53572: PUSH
53573: LD_INT 109
53575: PUSH
53576: LD_INT 110
53578: PUSH
53579: LD_INT 111
53581: PUSH
53582: LD_INT 112
53584: PUSH
53585: LD_INT 113
53587: PUSH
53588: LD_INT 114
53590: PUSH
53591: LD_INT 115
53593: PUSH
53594: LD_INT 116
53596: PUSH
53597: LD_INT 117
53599: PUSH
53600: LD_INT 118
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// if result then
53627: LD_VAR 0 2
53631: IFFALSE 54417
// begin normal :=  ;
53633: LD_ADDR_VAR 0 5
53637: PUSH
53638: LD_STRING 
53640: ST_TO_ADDR
// hardcore :=  ;
53641: LD_ADDR_VAR 0 6
53645: PUSH
53646: LD_STRING 
53648: ST_TO_ADDR
// active :=  ;
53649: LD_ADDR_VAR 0 7
53653: PUSH
53654: LD_STRING 
53656: ST_TO_ADDR
// for i = 1 to normalCounter do
53657: LD_ADDR_VAR 0 8
53661: PUSH
53662: DOUBLE
53663: LD_INT 1
53665: DEC
53666: ST_TO_ADDR
53667: LD_EXP 29
53671: PUSH
53672: FOR_TO
53673: IFFALSE 53774
// begin tmp := 0 ;
53675: LD_ADDR_VAR 0 3
53679: PUSH
53680: LD_STRING 0
53682: ST_TO_ADDR
// if result [ 1 ] then
53683: LD_VAR 0 2
53687: PUSH
53688: LD_INT 1
53690: ARRAY
53691: IFFALSE 53756
// if result [ 1 ] [ 1 ] = i then
53693: LD_VAR 0 2
53697: PUSH
53698: LD_INT 1
53700: ARRAY
53701: PUSH
53702: LD_INT 1
53704: ARRAY
53705: PUSH
53706: LD_VAR 0 8
53710: EQUAL
53711: IFFALSE 53756
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53713: LD_ADDR_VAR 0 2
53717: PUSH
53718: LD_VAR 0 2
53722: PPUSH
53723: LD_INT 1
53725: PPUSH
53726: LD_VAR 0 2
53730: PUSH
53731: LD_INT 1
53733: ARRAY
53734: PPUSH
53735: LD_INT 1
53737: PPUSH
53738: CALL_OW 3
53742: PPUSH
53743: CALL_OW 1
53747: ST_TO_ADDR
// tmp := 1 ;
53748: LD_ADDR_VAR 0 3
53752: PUSH
53753: LD_STRING 1
53755: ST_TO_ADDR
// end ; normal := normal & tmp ;
53756: LD_ADDR_VAR 0 5
53760: PUSH
53761: LD_VAR 0 5
53765: PUSH
53766: LD_VAR 0 3
53770: STR
53771: ST_TO_ADDR
// end ;
53772: GO 53672
53774: POP
53775: POP
// for i = 1 to hardcoreCounter do
53776: LD_ADDR_VAR 0 8
53780: PUSH
53781: DOUBLE
53782: LD_INT 1
53784: DEC
53785: ST_TO_ADDR
53786: LD_EXP 30
53790: PUSH
53791: FOR_TO
53792: IFFALSE 53897
// begin tmp := 0 ;
53794: LD_ADDR_VAR 0 3
53798: PUSH
53799: LD_STRING 0
53801: ST_TO_ADDR
// if result [ 2 ] then
53802: LD_VAR 0 2
53806: PUSH
53807: LD_INT 2
53809: ARRAY
53810: IFFALSE 53879
// if result [ 2 ] [ 1 ] = 100 + i then
53812: LD_VAR 0 2
53816: PUSH
53817: LD_INT 2
53819: ARRAY
53820: PUSH
53821: LD_INT 1
53823: ARRAY
53824: PUSH
53825: LD_INT 100
53827: PUSH
53828: LD_VAR 0 8
53832: PLUS
53833: EQUAL
53834: IFFALSE 53879
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53836: LD_ADDR_VAR 0 2
53840: PUSH
53841: LD_VAR 0 2
53845: PPUSH
53846: LD_INT 2
53848: PPUSH
53849: LD_VAR 0 2
53853: PUSH
53854: LD_INT 2
53856: ARRAY
53857: PPUSH
53858: LD_INT 1
53860: PPUSH
53861: CALL_OW 3
53865: PPUSH
53866: CALL_OW 1
53870: ST_TO_ADDR
// tmp := 1 ;
53871: LD_ADDR_VAR 0 3
53875: PUSH
53876: LD_STRING 1
53878: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53879: LD_ADDR_VAR 0 6
53883: PUSH
53884: LD_VAR 0 6
53888: PUSH
53889: LD_VAR 0 3
53893: STR
53894: ST_TO_ADDR
// end ;
53895: GO 53791
53897: POP
53898: POP
// if isGameLoad then
53899: LD_VAR 0 1
53903: IFFALSE 54378
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53905: LD_ADDR_VAR 0 4
53909: PUSH
53910: LD_EXP 33
53914: PUSH
53915: LD_EXP 32
53919: PUSH
53920: LD_EXP 34
53924: PUSH
53925: LD_EXP 31
53929: PUSH
53930: LD_EXP 35
53934: PUSH
53935: LD_EXP 36
53939: PUSH
53940: LD_EXP 37
53944: PUSH
53945: LD_EXP 38
53949: PUSH
53950: LD_EXP 39
53954: PUSH
53955: LD_EXP 40
53959: PUSH
53960: LD_EXP 41
53964: PUSH
53965: LD_EXP 42
53969: PUSH
53970: LD_EXP 43
53974: PUSH
53975: LD_EXP 44
53979: PUSH
53980: LD_EXP 52
53984: PUSH
53985: LD_EXP 53
53989: PUSH
53990: LD_EXP 54
53994: PUSH
53995: LD_EXP 55
53999: PUSH
54000: LD_EXP 57
54004: PUSH
54005: LD_EXP 58
54009: PUSH
54010: LD_EXP 59
54014: PUSH
54015: LD_EXP 62
54019: PUSH
54020: LD_EXP 64
54024: PUSH
54025: LD_EXP 65
54029: PUSH
54030: LD_EXP 66
54034: PUSH
54035: LD_EXP 68
54039: PUSH
54040: LD_EXP 69
54044: PUSH
54045: LD_EXP 72
54049: PUSH
54050: LD_EXP 73
54054: PUSH
54055: LD_EXP 74
54059: PUSH
54060: LD_EXP 75
54064: PUSH
54065: LD_EXP 76
54069: PUSH
54070: LD_EXP 77
54074: PUSH
54075: LD_EXP 78
54079: PUSH
54080: LD_EXP 79
54084: PUSH
54085: LD_EXP 80
54089: PUSH
54090: LD_EXP 45
54094: PUSH
54095: LD_EXP 46
54099: PUSH
54100: LD_EXP 49
54104: PUSH
54105: LD_EXP 50
54109: PUSH
54110: LD_EXP 51
54114: PUSH
54115: LD_EXP 47
54119: PUSH
54120: LD_EXP 48
54124: PUSH
54125: LD_EXP 56
54129: PUSH
54130: LD_EXP 60
54134: PUSH
54135: LD_EXP 61
54139: PUSH
54140: LD_EXP 63
54144: PUSH
54145: LD_EXP 67
54149: PUSH
54150: LD_EXP 70
54154: PUSH
54155: LD_EXP 71
54159: PUSH
54160: LD_EXP 81
54164: PUSH
54165: LD_EXP 82
54169: PUSH
54170: LD_EXP 83
54174: PUSH
54175: LD_EXP 84
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// tmp :=  ;
54236: LD_ADDR_VAR 0 3
54240: PUSH
54241: LD_STRING 
54243: ST_TO_ADDR
// for i = 1 to normalCounter do
54244: LD_ADDR_VAR 0 8
54248: PUSH
54249: DOUBLE
54250: LD_INT 1
54252: DEC
54253: ST_TO_ADDR
54254: LD_EXP 29
54258: PUSH
54259: FOR_TO
54260: IFFALSE 54296
// begin if flags [ i ] then
54262: LD_VAR 0 4
54266: PUSH
54267: LD_VAR 0 8
54271: ARRAY
54272: IFFALSE 54294
// tmp := tmp & i & ; ;
54274: LD_ADDR_VAR 0 3
54278: PUSH
54279: LD_VAR 0 3
54283: PUSH
54284: LD_VAR 0 8
54288: STR
54289: PUSH
54290: LD_STRING ;
54292: STR
54293: ST_TO_ADDR
// end ;
54294: GO 54259
54296: POP
54297: POP
// for i = 1 to hardcoreCounter do
54298: LD_ADDR_VAR 0 8
54302: PUSH
54303: DOUBLE
54304: LD_INT 1
54306: DEC
54307: ST_TO_ADDR
54308: LD_EXP 30
54312: PUSH
54313: FOR_TO
54314: IFFALSE 54360
// begin if flags [ normalCounter + i ] then
54316: LD_VAR 0 4
54320: PUSH
54321: LD_EXP 29
54325: PUSH
54326: LD_VAR 0 8
54330: PLUS
54331: ARRAY
54332: IFFALSE 54358
// tmp := tmp & ( 100 + i ) & ; ;
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_VAR 0 3
54343: PUSH
54344: LD_INT 100
54346: PUSH
54347: LD_VAR 0 8
54351: PLUS
54352: STR
54353: PUSH
54354: LD_STRING ;
54356: STR
54357: ST_TO_ADDR
// end ;
54358: GO 54313
54360: POP
54361: POP
// if tmp then
54362: LD_VAR 0 3
54366: IFFALSE 54378
// active := tmp ;
54368: LD_ADDR_VAR 0 7
54372: PUSH
54373: LD_VAR 0 3
54377: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54378: LD_STRING getStreamItemsFromMission("
54380: PUSH
54381: LD_VAR 0 5
54385: STR
54386: PUSH
54387: LD_STRING ","
54389: STR
54390: PUSH
54391: LD_VAR 0 6
54395: STR
54396: PUSH
54397: LD_STRING ","
54399: STR
54400: PUSH
54401: LD_VAR 0 7
54405: STR
54406: PUSH
54407: LD_STRING ")
54409: STR
54410: PPUSH
54411: CALL_OW 559
// end else
54415: GO 54424
// ToLua ( getStreamItemsFromMission("","","") ) ;
54417: LD_STRING getStreamItemsFromMission("","","")
54419: PPUSH
54420: CALL_OW 559
// end ;
54424: LD_VAR 0 2
54428: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54429: LD_EXP 28
54433: IFFALSE 54441
54435: PUSH
54436: LD_EXP 33
54440: AND
54441: IFFALSE 54565
54443: GO 54445
54445: DISABLE
54446: LD_INT 0
54448: PPUSH
54449: PPUSH
// begin enable ;
54450: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54451: LD_ADDR_VAR 0 2
54455: PUSH
54456: LD_INT 22
54458: PUSH
54459: LD_OWVAR 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 34
54473: PUSH
54474: LD_INT 7
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 34
54483: PUSH
54484: LD_INT 45
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 34
54493: PUSH
54494: LD_INT 28
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 34
54503: PUSH
54504: LD_INT 47
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PPUSH
54522: CALL_OW 69
54526: ST_TO_ADDR
// if not tmp then
54527: LD_VAR 0 2
54531: NOT
54532: IFFALSE 54536
// exit ;
54534: GO 54565
// for i in tmp do
54536: LD_ADDR_VAR 0 1
54540: PUSH
54541: LD_VAR 0 2
54545: PUSH
54546: FOR_IN
54547: IFFALSE 54563
// begin SetLives ( i , 0 ) ;
54549: LD_VAR 0 1
54553: PPUSH
54554: LD_INT 0
54556: PPUSH
54557: CALL_OW 234
// end ;
54561: GO 54546
54563: POP
54564: POP
// end ;
54565: PPOPN 2
54567: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54568: LD_EXP 28
54572: IFFALSE 54580
54574: PUSH
54575: LD_EXP 34
54579: AND
54580: IFFALSE 54664
54582: GO 54584
54584: DISABLE
54585: LD_INT 0
54587: PPUSH
54588: PPUSH
// begin enable ;
54589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54590: LD_ADDR_VAR 0 2
54594: PUSH
54595: LD_INT 22
54597: PUSH
54598: LD_OWVAR 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 32
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PPUSH
54621: CALL_OW 69
54625: ST_TO_ADDR
// if not tmp then
54626: LD_VAR 0 2
54630: NOT
54631: IFFALSE 54635
// exit ;
54633: GO 54664
// for i in tmp do
54635: LD_ADDR_VAR 0 1
54639: PUSH
54640: LD_VAR 0 2
54644: PUSH
54645: FOR_IN
54646: IFFALSE 54662
// begin SetLives ( i , 0 ) ;
54648: LD_VAR 0 1
54652: PPUSH
54653: LD_INT 0
54655: PPUSH
54656: CALL_OW 234
// end ;
54660: GO 54645
54662: POP
54663: POP
// end ;
54664: PPOPN 2
54666: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54667: LD_EXP 28
54671: IFFALSE 54679
54673: PUSH
54674: LD_EXP 31
54678: AND
54679: IFFALSE 54772
54681: GO 54683
54683: DISABLE
54684: LD_INT 0
54686: PPUSH
// begin enable ;
54687: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54688: LD_ADDR_VAR 0 1
54692: PUSH
54693: LD_INT 22
54695: PUSH
54696: LD_OWVAR 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: LD_INT 25
54710: PUSH
54711: LD_INT 5
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 25
54720: PUSH
54721: LD_INT 9
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 25
54730: PUSH
54731: LD_INT 8
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PPUSH
54748: CALL_OW 69
54752: PUSH
54753: FOR_IN
54754: IFFALSE 54770
// begin SetClass ( i , 1 ) ;
54756: LD_VAR 0 1
54760: PPUSH
54761: LD_INT 1
54763: PPUSH
54764: CALL_OW 336
// end ;
54768: GO 54753
54770: POP
54771: POP
// end ;
54772: PPOPN 1
54774: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54775: LD_EXP 28
54779: IFFALSE 54787
54781: PUSH
54782: LD_EXP 32
54786: AND
54787: IFFALSE 54799
54789: PUSH
54790: LD_OWVAR 65
54794: PUSH
54795: LD_INT 7
54797: LESS
54798: AND
54799: IFFALSE 54813
54801: GO 54803
54803: DISABLE
// begin enable ;
54804: ENABLE
// game_speed := 7 ;
54805: LD_ADDR_OWVAR 65
54809: PUSH
54810: LD_INT 7
54812: ST_TO_ADDR
// end ;
54813: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54814: LD_EXP 28
54818: IFFALSE 54826
54820: PUSH
54821: LD_EXP 35
54825: AND
54826: IFFALSE 55028
54828: GO 54830
54830: DISABLE
54831: LD_INT 0
54833: PPUSH
54834: PPUSH
54835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54836: LD_ADDR_VAR 0 3
54840: PUSH
54841: LD_INT 81
54843: PUSH
54844: LD_OWVAR 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 21
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PPUSH
54867: CALL_OW 69
54871: ST_TO_ADDR
// if not tmp then
54872: LD_VAR 0 3
54876: NOT
54877: IFFALSE 54881
// exit ;
54879: GO 55028
// if tmp > 5 then
54881: LD_VAR 0 3
54885: PUSH
54886: LD_INT 5
54888: GREATER
54889: IFFALSE 54901
// k := 5 else
54891: LD_ADDR_VAR 0 2
54895: PUSH
54896: LD_INT 5
54898: ST_TO_ADDR
54899: GO 54911
// k := tmp ;
54901: LD_ADDR_VAR 0 2
54905: PUSH
54906: LD_VAR 0 3
54910: ST_TO_ADDR
// for i := 1 to k do
54911: LD_ADDR_VAR 0 1
54915: PUSH
54916: DOUBLE
54917: LD_INT 1
54919: DEC
54920: ST_TO_ADDR
54921: LD_VAR 0 2
54925: PUSH
54926: FOR_TO
54927: IFFALSE 55026
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54929: LD_VAR 0 3
54933: PUSH
54934: LD_VAR 0 1
54938: ARRAY
54939: PPUSH
54940: LD_VAR 0 1
54944: PUSH
54945: LD_INT 4
54947: MOD
54948: PUSH
54949: LD_INT 1
54951: PLUS
54952: PPUSH
54953: CALL_OW 259
54957: PUSH
54958: LD_INT 10
54960: LESS
54961: IFFALSE 55024
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54963: LD_VAR 0 3
54967: PUSH
54968: LD_VAR 0 1
54972: ARRAY
54973: PPUSH
54974: LD_VAR 0 1
54978: PUSH
54979: LD_INT 4
54981: MOD
54982: PUSH
54983: LD_INT 1
54985: PLUS
54986: PPUSH
54987: LD_VAR 0 3
54991: PUSH
54992: LD_VAR 0 1
54996: ARRAY
54997: PPUSH
54998: LD_VAR 0 1
55002: PUSH
55003: LD_INT 4
55005: MOD
55006: PUSH
55007: LD_INT 1
55009: PLUS
55010: PPUSH
55011: CALL_OW 259
55015: PUSH
55016: LD_INT 1
55018: PLUS
55019: PPUSH
55020: CALL_OW 237
55024: GO 54926
55026: POP
55027: POP
// end ;
55028: PPOPN 3
55030: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55031: LD_EXP 28
55035: IFFALSE 55043
55037: PUSH
55038: LD_EXP 36
55042: AND
55043: IFFALSE 55063
55045: GO 55047
55047: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55048: LD_INT 4
55050: PPUSH
55051: LD_OWVAR 2
55055: PPUSH
55056: LD_INT 0
55058: PPUSH
55059: CALL_OW 324
55063: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55064: LD_EXP 28
55068: IFFALSE 55076
55070: PUSH
55071: LD_EXP 65
55075: AND
55076: IFFALSE 55096
55078: GO 55080
55080: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55081: LD_INT 19
55083: PPUSH
55084: LD_OWVAR 2
55088: PPUSH
55089: LD_INT 0
55091: PPUSH
55092: CALL_OW 324
55096: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55097: LD_EXP 28
55101: IFFALSE 55109
55103: PUSH
55104: LD_EXP 37
55108: AND
55109: IFFALSE 55211
55111: GO 55113
55113: DISABLE
55114: LD_INT 0
55116: PPUSH
55117: PPUSH
// begin enable ;
55118: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55119: LD_ADDR_VAR 0 2
55123: PUSH
55124: LD_INT 22
55126: PUSH
55127: LD_OWVAR 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: LD_INT 34
55141: PUSH
55142: LD_INT 11
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 34
55151: PUSH
55152: LD_INT 30
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PPUSH
55168: CALL_OW 69
55172: ST_TO_ADDR
// if not tmp then
55173: LD_VAR 0 2
55177: NOT
55178: IFFALSE 55182
// exit ;
55180: GO 55211
// for i in tmp do
55182: LD_ADDR_VAR 0 1
55186: PUSH
55187: LD_VAR 0 2
55191: PUSH
55192: FOR_IN
55193: IFFALSE 55209
// begin SetLives ( i , 0 ) ;
55195: LD_VAR 0 1
55199: PPUSH
55200: LD_INT 0
55202: PPUSH
55203: CALL_OW 234
// end ;
55207: GO 55192
55209: POP
55210: POP
// end ;
55211: PPOPN 2
55213: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55214: LD_EXP 28
55218: IFFALSE 55226
55220: PUSH
55221: LD_EXP 38
55225: AND
55226: IFFALSE 55246
55228: GO 55230
55230: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55231: LD_INT 32
55233: PPUSH
55234: LD_OWVAR 2
55238: PPUSH
55239: LD_INT 0
55241: PPUSH
55242: CALL_OW 324
55246: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55247: LD_EXP 28
55251: IFFALSE 55259
55253: PUSH
55254: LD_EXP 39
55258: AND
55259: IFFALSE 55442
55261: GO 55263
55263: DISABLE
55264: LD_INT 0
55266: PPUSH
55267: PPUSH
55268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55269: LD_ADDR_VAR 0 2
55273: PUSH
55274: LD_INT 22
55276: PUSH
55277: LD_OWVAR 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 33
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PPUSH
55300: CALL_OW 69
55304: ST_TO_ADDR
// if not tmp then
55305: LD_VAR 0 2
55309: NOT
55310: IFFALSE 55314
// exit ;
55312: GO 55442
// side := 0 ;
55314: LD_ADDR_VAR 0 3
55318: PUSH
55319: LD_INT 0
55321: ST_TO_ADDR
// for i := 1 to 8 do
55322: LD_ADDR_VAR 0 1
55326: PUSH
55327: DOUBLE
55328: LD_INT 1
55330: DEC
55331: ST_TO_ADDR
55332: LD_INT 8
55334: PUSH
55335: FOR_TO
55336: IFFALSE 55386
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55338: LD_OWVAR 2
55342: PUSH
55343: LD_VAR 0 1
55347: NONEQUAL
55348: IFFALSE 55370
55350: PUSH
55351: LD_OWVAR 2
55355: PPUSH
55356: LD_VAR 0 1
55360: PPUSH
55361: CALL_OW 81
55365: PUSH
55366: LD_INT 2
55368: EQUAL
55369: AND
55370: IFFALSE 55384
// begin side := i ;
55372: LD_ADDR_VAR 0 3
55376: PUSH
55377: LD_VAR 0 1
55381: ST_TO_ADDR
// break ;
55382: GO 55386
// end ;
55384: GO 55335
55386: POP
55387: POP
// if not side then
55388: LD_VAR 0 3
55392: NOT
55393: IFFALSE 55397
// exit ;
55395: GO 55442
// for i := 1 to tmp do
55397: LD_ADDR_VAR 0 1
55401: PUSH
55402: DOUBLE
55403: LD_INT 1
55405: DEC
55406: ST_TO_ADDR
55407: LD_VAR 0 2
55411: PUSH
55412: FOR_TO
55413: IFFALSE 55440
// if Prob ( 60 ) then
55415: LD_INT 60
55417: PPUSH
55418: CALL_OW 13
55422: IFFALSE 55438
// SetSide ( i , side ) ;
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_VAR 0 3
55433: PPUSH
55434: CALL_OW 235
55438: GO 55412
55440: POP
55441: POP
// end ;
55442: PPOPN 3
55444: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55445: LD_EXP 28
55449: IFFALSE 55457
55451: PUSH
55452: LD_EXP 41
55456: AND
55457: IFFALSE 55576
55459: GO 55461
55461: DISABLE
55462: LD_INT 0
55464: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55465: LD_ADDR_VAR 0 1
55469: PUSH
55470: LD_INT 22
55472: PUSH
55473: LD_OWVAR 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 21
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 23
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: PPUSH
55514: CALL_OW 69
55518: PUSH
55519: FOR_IN
55520: IFFALSE 55574
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55522: LD_VAR 0 1
55526: PPUSH
55527: CALL_OW 257
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: LD_INT 4
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: IN
55550: IFFALSE 55572
// SetClass ( un , rand ( 1 , 4 ) ) ;
55552: LD_VAR 0 1
55556: PPUSH
55557: LD_INT 1
55559: PPUSH
55560: LD_INT 4
55562: PPUSH
55563: CALL_OW 12
55567: PPUSH
55568: CALL_OW 336
55572: GO 55519
55574: POP
55575: POP
// end ;
55576: PPOPN 1
55578: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55579: LD_EXP 28
55583: IFFALSE 55591
55585: PUSH
55586: LD_EXP 40
55590: AND
55591: IFFALSE 55670
55593: GO 55595
55595: DISABLE
55596: LD_INT 0
55598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55599: LD_ADDR_VAR 0 1
55603: PUSH
55604: LD_INT 22
55606: PUSH
55607: LD_OWVAR 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 21
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PPUSH
55630: CALL_OW 69
55634: ST_TO_ADDR
// if not tmp then
55635: LD_VAR 0 1
55639: NOT
55640: IFFALSE 55644
// exit ;
55642: GO 55670
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55644: LD_VAR 0 1
55648: PUSH
55649: LD_INT 1
55651: PPUSH
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 12
55661: ARRAY
55662: PPUSH
55663: LD_INT 100
55665: PPUSH
55666: CALL_OW 234
// end ;
55670: PPOPN 1
55672: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55673: LD_EXP 28
55677: IFFALSE 55685
55679: PUSH
55680: LD_EXP 42
55684: AND
55685: IFFALSE 55783
55687: GO 55689
55689: DISABLE
55690: LD_INT 0
55692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55693: LD_ADDR_VAR 0 1
55697: PUSH
55698: LD_INT 22
55700: PUSH
55701: LD_OWVAR 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 21
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PPUSH
55724: CALL_OW 69
55728: ST_TO_ADDR
// if not tmp then
55729: LD_VAR 0 1
55733: NOT
55734: IFFALSE 55738
// exit ;
55736: GO 55783
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55738: LD_VAR 0 1
55742: PUSH
55743: LD_INT 1
55745: PPUSH
55746: LD_VAR 0 1
55750: PPUSH
55751: CALL_OW 12
55755: ARRAY
55756: PPUSH
55757: LD_INT 1
55759: PPUSH
55760: LD_INT 4
55762: PPUSH
55763: CALL_OW 12
55767: PPUSH
55768: LD_INT 3000
55770: PPUSH
55771: LD_INT 9000
55773: PPUSH
55774: CALL_OW 12
55778: PPUSH
55779: CALL_OW 492
// end ;
55783: PPOPN 1
55785: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55786: LD_EXP 28
55790: IFFALSE 55798
55792: PUSH
55793: LD_EXP 43
55797: AND
55798: IFFALSE 55818
55800: GO 55802
55802: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55803: LD_INT 1
55805: PPUSH
55806: LD_OWVAR 2
55810: PPUSH
55811: LD_INT 0
55813: PPUSH
55814: CALL_OW 324
55818: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55819: LD_EXP 28
55823: IFFALSE 55831
55825: PUSH
55826: LD_EXP 44
55830: AND
55831: IFFALSE 55914
55833: GO 55835
55835: DISABLE
55836: LD_INT 0
55838: PPUSH
55839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55840: LD_ADDR_VAR 0 2
55844: PUSH
55845: LD_INT 22
55847: PUSH
55848: LD_OWVAR 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 21
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PPUSH
55871: CALL_OW 69
55875: ST_TO_ADDR
// if not tmp then
55876: LD_VAR 0 2
55880: NOT
55881: IFFALSE 55885
// exit ;
55883: GO 55914
// for i in tmp do
55885: LD_ADDR_VAR 0 1
55889: PUSH
55890: LD_VAR 0 2
55894: PUSH
55895: FOR_IN
55896: IFFALSE 55912
// SetBLevel ( i , 10 ) ;
55898: LD_VAR 0 1
55902: PPUSH
55903: LD_INT 10
55905: PPUSH
55906: CALL_OW 241
55910: GO 55895
55912: POP
55913: POP
// end ;
55914: PPOPN 2
55916: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55917: LD_EXP 28
55921: IFFALSE 55929
55923: PUSH
55924: LD_EXP 45
55928: AND
55929: IFFALSE 56040
55931: GO 55933
55933: DISABLE
55934: LD_INT 0
55936: PPUSH
55937: PPUSH
55938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55939: LD_ADDR_VAR 0 3
55943: PUSH
55944: LD_INT 22
55946: PUSH
55947: LD_OWVAR 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 25
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PPUSH
55970: CALL_OW 69
55974: ST_TO_ADDR
// if not tmp then
55975: LD_VAR 0 3
55979: NOT
55980: IFFALSE 55984
// exit ;
55982: GO 56040
// un := tmp [ rand ( 1 , tmp ) ] ;
55984: LD_ADDR_VAR 0 2
55988: PUSH
55989: LD_VAR 0 3
55993: PUSH
55994: LD_INT 1
55996: PPUSH
55997: LD_VAR 0 3
56001: PPUSH
56002: CALL_OW 12
56006: ARRAY
56007: ST_TO_ADDR
// if Crawls ( un ) then
56008: LD_VAR 0 2
56012: PPUSH
56013: CALL_OW 318
56017: IFFALSE 56028
// ComWalk ( un ) ;
56019: LD_VAR 0 2
56023: PPUSH
56024: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56028: LD_VAR 0 2
56032: PPUSH
56033: LD_INT 5
56035: PPUSH
56036: CALL_OW 336
// end ;
56040: PPOPN 3
56042: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56043: LD_EXP 28
56047: IFFALSE 56055
56049: PUSH
56050: LD_EXP 46
56054: AND
56055: IFFALSE 56067
56057: PUSH
56058: LD_OWVAR 67
56062: PUSH
56063: LD_INT 4
56065: LESS
56066: AND
56067: IFFALSE 56086
56069: GO 56071
56071: DISABLE
// begin Difficulty := Difficulty + 1 ;
56072: LD_ADDR_OWVAR 67
56076: PUSH
56077: LD_OWVAR 67
56081: PUSH
56082: LD_INT 1
56084: PLUS
56085: ST_TO_ADDR
// end ;
56086: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56087: LD_EXP 28
56091: IFFALSE 56099
56093: PUSH
56094: LD_EXP 47
56098: AND
56099: IFFALSE 56202
56101: GO 56103
56103: DISABLE
56104: LD_INT 0
56106: PPUSH
// begin for i := 1 to 5 do
56107: LD_ADDR_VAR 0 1
56111: PUSH
56112: DOUBLE
56113: LD_INT 1
56115: DEC
56116: ST_TO_ADDR
56117: LD_INT 5
56119: PUSH
56120: FOR_TO
56121: IFFALSE 56200
// begin uc_nation := nation_nature ;
56123: LD_ADDR_OWVAR 21
56127: PUSH
56128: LD_INT 0
56130: ST_TO_ADDR
// uc_side := 0 ;
56131: LD_ADDR_OWVAR 20
56135: PUSH
56136: LD_INT 0
56138: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56139: LD_ADDR_OWVAR 29
56143: PUSH
56144: LD_INT 12
56146: PUSH
56147: LD_INT 12
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: ST_TO_ADDR
// hc_agressivity := 20 ;
56154: LD_ADDR_OWVAR 35
56158: PUSH
56159: LD_INT 20
56161: ST_TO_ADDR
// hc_class := class_tiger ;
56162: LD_ADDR_OWVAR 28
56166: PUSH
56167: LD_INT 14
56169: ST_TO_ADDR
// hc_gallery :=  ;
56170: LD_ADDR_OWVAR 33
56174: PUSH
56175: LD_STRING 
56177: ST_TO_ADDR
// hc_name :=  ;
56178: LD_ADDR_OWVAR 26
56182: PUSH
56183: LD_STRING 
56185: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56186: CALL_OW 44
56190: PPUSH
56191: LD_INT 0
56193: PPUSH
56194: CALL_OW 51
// end ;
56198: GO 56120
56200: POP
56201: POP
// end ;
56202: PPOPN 1
56204: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56205: LD_EXP 28
56209: IFFALSE 56217
56211: PUSH
56212: LD_EXP 48
56216: AND
56217: IFFALSE 56226
56219: GO 56221
56221: DISABLE
// StreamSibBomb ;
56222: CALL 56227 0 0
56226: END
// export function StreamSibBomb ; var i , x , y ; begin
56227: LD_INT 0
56229: PPUSH
56230: PPUSH
56231: PPUSH
56232: PPUSH
// result := false ;
56233: LD_ADDR_VAR 0 1
56237: PUSH
56238: LD_INT 0
56240: ST_TO_ADDR
// for i := 1 to 16 do
56241: LD_ADDR_VAR 0 2
56245: PUSH
56246: DOUBLE
56247: LD_INT 1
56249: DEC
56250: ST_TO_ADDR
56251: LD_INT 16
56253: PUSH
56254: FOR_TO
56255: IFFALSE 56454
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56257: LD_ADDR_VAR 0 3
56261: PUSH
56262: LD_INT 10
56264: PUSH
56265: LD_INT 20
56267: PUSH
56268: LD_INT 30
56270: PUSH
56271: LD_INT 40
56273: PUSH
56274: LD_INT 50
56276: PUSH
56277: LD_INT 60
56279: PUSH
56280: LD_INT 70
56282: PUSH
56283: LD_INT 80
56285: PUSH
56286: LD_INT 90
56288: PUSH
56289: LD_INT 100
56291: PUSH
56292: LD_INT 110
56294: PUSH
56295: LD_INT 120
56297: PUSH
56298: LD_INT 130
56300: PUSH
56301: LD_INT 140
56303: PUSH
56304: LD_INT 150
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PPUSH
56327: LD_INT 15
56329: PPUSH
56330: CALL_OW 12
56334: ARRAY
56335: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56336: LD_ADDR_VAR 0 4
56340: PUSH
56341: LD_INT 10
56343: PUSH
56344: LD_INT 20
56346: PUSH
56347: LD_INT 30
56349: PUSH
56350: LD_INT 40
56352: PUSH
56353: LD_INT 50
56355: PUSH
56356: LD_INT 60
56358: PUSH
56359: LD_INT 70
56361: PUSH
56362: LD_INT 80
56364: PUSH
56365: LD_INT 90
56367: PUSH
56368: LD_INT 100
56370: PUSH
56371: LD_INT 110
56373: PUSH
56374: LD_INT 120
56376: PUSH
56377: LD_INT 130
56379: PUSH
56380: LD_INT 140
56382: PUSH
56383: LD_INT 150
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PPUSH
56406: LD_INT 15
56408: PPUSH
56409: CALL_OW 12
56413: ARRAY
56414: ST_TO_ADDR
// if ValidHex ( x , y ) then
56415: LD_VAR 0 3
56419: PPUSH
56420: LD_VAR 0 4
56424: PPUSH
56425: CALL_OW 488
56429: IFFALSE 56452
// begin result := [ x , y ] ;
56431: LD_ADDR_VAR 0 1
56435: PUSH
56436: LD_VAR 0 3
56440: PUSH
56441: LD_VAR 0 4
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// break ;
56450: GO 56454
// end ; end ;
56452: GO 56254
56454: POP
56455: POP
// if result then
56456: LD_VAR 0 1
56460: IFFALSE 56520
// begin ToLua ( playSibBomb() ) ;
56462: LD_STRING playSibBomb()
56464: PPUSH
56465: CALL_OW 559
// wait ( 0 0$14 ) ;
56469: LD_INT 490
56471: PPUSH
56472: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56476: LD_VAR 0 1
56480: PUSH
56481: LD_INT 1
56483: ARRAY
56484: PPUSH
56485: LD_VAR 0 1
56489: PUSH
56490: LD_INT 2
56492: ARRAY
56493: PPUSH
56494: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56498: LD_VAR 0 1
56502: PUSH
56503: LD_INT 1
56505: ARRAY
56506: PPUSH
56507: LD_VAR 0 1
56511: PUSH
56512: LD_INT 2
56514: ARRAY
56515: PPUSH
56516: CALL_OW 429
// end ; end ;
56520: LD_VAR 0 1
56524: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56525: LD_EXP 28
56529: IFFALSE 56537
56531: PUSH
56532: LD_EXP 50
56536: AND
56537: IFFALSE 56549
56539: GO 56541
56541: DISABLE
// YouLost (  ) ;
56542: LD_STRING 
56544: PPUSH
56545: CALL_OW 104
56549: END
// every 0 0$1 trigger StreamModeActive and sFog do
56550: LD_EXP 28
56554: IFFALSE 56562
56556: PUSH
56557: LD_EXP 49
56561: AND
56562: IFFALSE 56576
56564: GO 56566
56566: DISABLE
// FogOff ( your_side ) ;
56567: LD_OWVAR 2
56571: PPUSH
56572: CALL_OW 344
56576: END
// every 0 0$1 trigger StreamModeActive and sSun do
56577: LD_EXP 28
56581: IFFALSE 56589
56583: PUSH
56584: LD_EXP 51
56588: AND
56589: IFFALSE 56617
56591: GO 56593
56593: DISABLE
// begin solar_recharge_percent := 0 ;
56594: LD_ADDR_OWVAR 79
56598: PUSH
56599: LD_INT 0
56601: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56602: LD_INT 10500
56604: PPUSH
56605: CALL_OW 67
// solar_recharge_percent := 100 ;
56609: LD_ADDR_OWVAR 79
56613: PUSH
56614: LD_INT 100
56616: ST_TO_ADDR
// end ;
56617: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56618: LD_EXP 28
56622: IFFALSE 56630
56624: PUSH
56625: LD_EXP 52
56629: AND
56630: IFFALSE 56869
56632: GO 56634
56634: DISABLE
56635: LD_INT 0
56637: PPUSH
56638: PPUSH
56639: PPUSH
// begin tmp := [ ] ;
56640: LD_ADDR_VAR 0 3
56644: PUSH
56645: EMPTY
56646: ST_TO_ADDR
// for i := 1 to 6 do
56647: LD_ADDR_VAR 0 1
56651: PUSH
56652: DOUBLE
56653: LD_INT 1
56655: DEC
56656: ST_TO_ADDR
56657: LD_INT 6
56659: PUSH
56660: FOR_TO
56661: IFFALSE 56766
// begin uc_nation := nation_nature ;
56663: LD_ADDR_OWVAR 21
56667: PUSH
56668: LD_INT 0
56670: ST_TO_ADDR
// uc_side := 0 ;
56671: LD_ADDR_OWVAR 20
56675: PUSH
56676: LD_INT 0
56678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56679: LD_ADDR_OWVAR 29
56683: PUSH
56684: LD_INT 12
56686: PUSH
56687: LD_INT 12
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// hc_agressivity := 20 ;
56694: LD_ADDR_OWVAR 35
56698: PUSH
56699: LD_INT 20
56701: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56702: LD_ADDR_OWVAR 28
56706: PUSH
56707: LD_INT 17
56709: ST_TO_ADDR
// hc_gallery :=  ;
56710: LD_ADDR_OWVAR 33
56714: PUSH
56715: LD_STRING 
56717: ST_TO_ADDR
// hc_name :=  ;
56718: LD_ADDR_OWVAR 26
56722: PUSH
56723: LD_STRING 
56725: ST_TO_ADDR
// un := CreateHuman ;
56726: LD_ADDR_VAR 0 2
56730: PUSH
56731: CALL_OW 44
56735: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56736: LD_VAR 0 2
56740: PPUSH
56741: LD_INT 1
56743: PPUSH
56744: CALL_OW 51
// tmp := tmp ^ un ;
56748: LD_ADDR_VAR 0 3
56752: PUSH
56753: LD_VAR 0 3
56757: PUSH
56758: LD_VAR 0 2
56762: ADD
56763: ST_TO_ADDR
// end ;
56764: GO 56660
56766: POP
56767: POP
// repeat wait ( 0 0$1 ) ;
56768: LD_INT 35
56770: PPUSH
56771: CALL_OW 67
// for un in tmp do
56775: LD_ADDR_VAR 0 2
56779: PUSH
56780: LD_VAR 0 3
56784: PUSH
56785: FOR_IN
56786: IFFALSE 56860
// begin if IsDead ( un ) then
56788: LD_VAR 0 2
56792: PPUSH
56793: CALL_OW 301
56797: IFFALSE 56817
// begin tmp := tmp diff un ;
56799: LD_ADDR_VAR 0 3
56803: PUSH
56804: LD_VAR 0 3
56808: PUSH
56809: LD_VAR 0 2
56813: DIFF
56814: ST_TO_ADDR
// continue ;
56815: GO 56785
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56817: LD_VAR 0 2
56821: PPUSH
56822: LD_INT 3
56824: PUSH
56825: LD_INT 22
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PPUSH
56839: CALL_OW 69
56843: PPUSH
56844: LD_VAR 0 2
56848: PPUSH
56849: CALL_OW 74
56853: PPUSH
56854: CALL_OW 115
// end ;
56858: GO 56785
56860: POP
56861: POP
// until not tmp ;
56862: LD_VAR 0 3
56866: NOT
56867: IFFALSE 56768
// end ;
56869: PPOPN 3
56871: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56872: LD_EXP 28
56876: IFFALSE 56884
56878: PUSH
56879: LD_EXP 53
56883: AND
56884: IFFALSE 56938
56886: GO 56888
56888: DISABLE
// begin ToLua ( displayTroll(); ) ;
56889: LD_STRING displayTroll();
56891: PPUSH
56892: CALL_OW 559
// wait ( 3 3$00 ) ;
56896: LD_INT 6300
56898: PPUSH
56899: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56903: LD_STRING hideTroll();
56905: PPUSH
56906: CALL_OW 559
// wait ( 1 1$00 ) ;
56910: LD_INT 2100
56912: PPUSH
56913: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56917: LD_STRING displayTroll();
56919: PPUSH
56920: CALL_OW 559
// wait ( 1 1$00 ) ;
56924: LD_INT 2100
56926: PPUSH
56927: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56931: LD_STRING hideTroll();
56933: PPUSH
56934: CALL_OW 559
// end ;
56938: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56939: LD_EXP 28
56943: IFFALSE 56951
56945: PUSH
56946: LD_EXP 54
56950: AND
56951: IFFALSE 57014
56953: GO 56955
56955: DISABLE
56956: LD_INT 0
56958: PPUSH
// begin p := 0 ;
56959: LD_ADDR_VAR 0 1
56963: PUSH
56964: LD_INT 0
56966: ST_TO_ADDR
// repeat game_speed := 1 ;
56967: LD_ADDR_OWVAR 65
56971: PUSH
56972: LD_INT 1
56974: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56975: LD_INT 35
56977: PPUSH
56978: CALL_OW 67
// p := p + 1 ;
56982: LD_ADDR_VAR 0 1
56986: PUSH
56987: LD_VAR 0 1
56991: PUSH
56992: LD_INT 1
56994: PLUS
56995: ST_TO_ADDR
// until p >= 60 ;
56996: LD_VAR 0 1
57000: PUSH
57001: LD_INT 60
57003: GREATEREQUAL
57004: IFFALSE 56967
// game_speed := 4 ;
57006: LD_ADDR_OWVAR 65
57010: PUSH
57011: LD_INT 4
57013: ST_TO_ADDR
// end ;
57014: PPOPN 1
57016: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57017: LD_EXP 28
57021: IFFALSE 57029
57023: PUSH
57024: LD_EXP 55
57028: AND
57029: IFFALSE 57175
57031: GO 57033
57033: DISABLE
57034: LD_INT 0
57036: PPUSH
57037: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57038: LD_ADDR_VAR 0 1
57042: PUSH
57043: LD_INT 22
57045: PUSH
57046: LD_OWVAR 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 30
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 30
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PPUSH
57087: CALL_OW 69
57091: ST_TO_ADDR
// if not depot then
57092: LD_VAR 0 1
57096: NOT
57097: IFFALSE 57101
// exit ;
57099: GO 57175
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57101: LD_ADDR_VAR 0 2
57105: PUSH
57106: LD_VAR 0 1
57110: PUSH
57111: LD_INT 1
57113: PPUSH
57114: LD_VAR 0 1
57118: PPUSH
57119: CALL_OW 12
57123: ARRAY
57124: PPUSH
57125: CALL_OW 274
57129: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57130: LD_VAR 0 2
57134: PPUSH
57135: LD_INT 1
57137: PPUSH
57138: LD_INT 0
57140: PPUSH
57141: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57145: LD_VAR 0 2
57149: PPUSH
57150: LD_INT 2
57152: PPUSH
57153: LD_INT 0
57155: PPUSH
57156: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57160: LD_VAR 0 2
57164: PPUSH
57165: LD_INT 3
57167: PPUSH
57168: LD_INT 0
57170: PPUSH
57171: CALL_OW 277
// end ;
57175: PPOPN 2
57177: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57178: LD_EXP 28
57182: IFFALSE 57190
57184: PUSH
57185: LD_EXP 56
57189: AND
57190: IFFALSE 57287
57192: GO 57194
57194: DISABLE
57195: LD_INT 0
57197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57198: LD_ADDR_VAR 0 1
57202: PUSH
57203: LD_INT 22
57205: PUSH
57206: LD_OWVAR 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 21
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: PUSH
57228: LD_INT 23
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: PPUSH
57247: CALL_OW 69
57251: ST_TO_ADDR
// if not tmp then
57252: LD_VAR 0 1
57256: NOT
57257: IFFALSE 57261
// exit ;
57259: GO 57287
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57261: LD_VAR 0 1
57265: PUSH
57266: LD_INT 1
57268: PPUSH
57269: LD_VAR 0 1
57273: PPUSH
57274: CALL_OW 12
57278: ARRAY
57279: PPUSH
57280: LD_INT 200
57282: PPUSH
57283: CALL_OW 234
// end ;
57287: PPOPN 1
57289: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57290: LD_EXP 28
57294: IFFALSE 57302
57296: PUSH
57297: LD_EXP 57
57301: AND
57302: IFFALSE 57381
57304: GO 57306
57306: DISABLE
57307: LD_INT 0
57309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57310: LD_ADDR_VAR 0 1
57314: PUSH
57315: LD_INT 22
57317: PUSH
57318: LD_OWVAR 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 21
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PPUSH
57341: CALL_OW 69
57345: ST_TO_ADDR
// if not tmp then
57346: LD_VAR 0 1
57350: NOT
57351: IFFALSE 57355
// exit ;
57353: GO 57381
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57355: LD_VAR 0 1
57359: PUSH
57360: LD_INT 1
57362: PPUSH
57363: LD_VAR 0 1
57367: PPUSH
57368: CALL_OW 12
57372: ARRAY
57373: PPUSH
57374: LD_INT 60
57376: PPUSH
57377: CALL_OW 234
// end ;
57381: PPOPN 1
57383: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57384: LD_EXP 28
57388: IFFALSE 57396
57390: PUSH
57391: LD_EXP 58
57395: AND
57396: IFFALSE 57495
57398: GO 57400
57400: DISABLE
57401: LD_INT 0
57403: PPUSH
57404: PPUSH
// begin enable ;
57405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57406: LD_ADDR_VAR 0 1
57410: PUSH
57411: LD_INT 22
57413: PUSH
57414: LD_OWVAR 2
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 61
57425: PUSH
57426: EMPTY
57427: LIST
57428: PUSH
57429: LD_INT 33
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: PPUSH
57444: CALL_OW 69
57448: ST_TO_ADDR
// if not tmp then
57449: LD_VAR 0 1
57453: NOT
57454: IFFALSE 57458
// exit ;
57456: GO 57495
// for i in tmp do
57458: LD_ADDR_VAR 0 2
57462: PUSH
57463: LD_VAR 0 1
57467: PUSH
57468: FOR_IN
57469: IFFALSE 57493
// if IsControledBy ( i ) then
57471: LD_VAR 0 2
57475: PPUSH
57476: CALL_OW 312
57480: IFFALSE 57491
// ComUnlink ( i ) ;
57482: LD_VAR 0 2
57486: PPUSH
57487: CALL_OW 136
57491: GO 57468
57493: POP
57494: POP
// end ;
57495: PPOPN 2
57497: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57498: LD_EXP 28
57502: IFFALSE 57510
57504: PUSH
57505: LD_EXP 59
57509: AND
57510: IFFALSE 57650
57512: GO 57514
57514: DISABLE
57515: LD_INT 0
57517: PPUSH
57518: PPUSH
// begin ToLua ( displayPowell(); ) ;
57519: LD_STRING displayPowell();
57521: PPUSH
57522: CALL_OW 559
// uc_side := 0 ;
57526: LD_ADDR_OWVAR 20
57530: PUSH
57531: LD_INT 0
57533: ST_TO_ADDR
// uc_nation := 2 ;
57534: LD_ADDR_OWVAR 21
57538: PUSH
57539: LD_INT 2
57541: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57542: LD_ADDR_OWVAR 37
57546: PUSH
57547: LD_INT 14
57549: ST_TO_ADDR
// vc_engine := engine_siberite ;
57550: LD_ADDR_OWVAR 39
57554: PUSH
57555: LD_INT 3
57557: ST_TO_ADDR
// vc_control := control_apeman ;
57558: LD_ADDR_OWVAR 38
57562: PUSH
57563: LD_INT 5
57565: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57566: LD_ADDR_OWVAR 40
57570: PUSH
57571: LD_INT 29
57573: ST_TO_ADDR
// un := CreateVehicle ;
57574: LD_ADDR_VAR 0 2
57578: PUSH
57579: CALL_OW 45
57583: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57584: LD_VAR 0 2
57588: PPUSH
57589: LD_INT 1
57591: PPUSH
57592: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57596: LD_INT 35
57598: PPUSH
57599: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57603: LD_VAR 0 2
57607: PPUSH
57608: LD_INT 22
57610: PUSH
57611: LD_OWVAR 2
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PPUSH
57620: CALL_OW 69
57624: PPUSH
57625: LD_VAR 0 2
57629: PPUSH
57630: CALL_OW 74
57634: PPUSH
57635: CALL_OW 115
// until IsDead ( un ) ;
57639: LD_VAR 0 2
57643: PPUSH
57644: CALL_OW 301
57648: IFFALSE 57596
// end ;
57650: PPOPN 2
57652: END
// every 0 0$1 trigger StreamModeActive and sStu do
57653: LD_EXP 28
57657: IFFALSE 57665
57659: PUSH
57660: LD_EXP 67
57664: AND
57665: IFFALSE 57681
57667: GO 57669
57669: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57670: LD_STRING displayStucuk();
57672: PPUSH
57673: CALL_OW 559
// ResetFog ;
57677: CALL_OW 335
// end ;
57681: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57682: LD_EXP 28
57686: IFFALSE 57694
57688: PUSH
57689: LD_EXP 60
57693: AND
57694: IFFALSE 57835
57696: GO 57698
57698: DISABLE
57699: LD_INT 0
57701: PPUSH
57702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57703: LD_ADDR_VAR 0 2
57707: PUSH
57708: LD_INT 22
57710: PUSH
57711: LD_OWVAR 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 21
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PPUSH
57734: CALL_OW 69
57738: ST_TO_ADDR
// if not tmp then
57739: LD_VAR 0 2
57743: NOT
57744: IFFALSE 57748
// exit ;
57746: GO 57835
// un := tmp [ rand ( 1 , tmp ) ] ;
57748: LD_ADDR_VAR 0 1
57752: PUSH
57753: LD_VAR 0 2
57757: PUSH
57758: LD_INT 1
57760: PPUSH
57761: LD_VAR 0 2
57765: PPUSH
57766: CALL_OW 12
57770: ARRAY
57771: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57772: LD_VAR 0 1
57776: PPUSH
57777: LD_INT 0
57779: PPUSH
57780: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57784: LD_VAR 0 1
57788: PPUSH
57789: LD_OWVAR 3
57793: PUSH
57794: LD_VAR 0 1
57798: DIFF
57799: PPUSH
57800: LD_VAR 0 1
57804: PPUSH
57805: CALL_OW 74
57809: PPUSH
57810: CALL_OW 115
// wait ( 0 0$20 ) ;
57814: LD_INT 700
57816: PPUSH
57817: CALL_OW 67
// SetSide ( un , your_side ) ;
57821: LD_VAR 0 1
57825: PPUSH
57826: LD_OWVAR 2
57830: PPUSH
57831: CALL_OW 235
// end ;
57835: PPOPN 2
57837: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57838: LD_EXP 28
57842: IFFALSE 57850
57844: PUSH
57845: LD_EXP 61
57849: AND
57850: IFFALSE 57956
57852: GO 57854
57854: DISABLE
57855: LD_INT 0
57857: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57858: LD_ADDR_VAR 0 1
57862: PUSH
57863: LD_INT 22
57865: PUSH
57866: LD_OWVAR 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 30
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 30
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PPUSH
57907: CALL_OW 69
57911: ST_TO_ADDR
// if not depot then
57912: LD_VAR 0 1
57916: NOT
57917: IFFALSE 57921
// exit ;
57919: GO 57956
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57921: LD_VAR 0 1
57925: PUSH
57926: LD_INT 1
57928: ARRAY
57929: PPUSH
57930: CALL_OW 250
57934: PPUSH
57935: LD_VAR 0 1
57939: PUSH
57940: LD_INT 1
57942: ARRAY
57943: PPUSH
57944: CALL_OW 251
57948: PPUSH
57949: LD_INT 70
57951: PPUSH
57952: CALL_OW 495
// end ;
57956: PPOPN 1
57958: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57959: LD_EXP 28
57963: IFFALSE 57971
57965: PUSH
57966: LD_EXP 62
57970: AND
57971: IFFALSE 58182
57973: GO 57975
57975: DISABLE
57976: LD_INT 0
57978: PPUSH
57979: PPUSH
57980: PPUSH
57981: PPUSH
57982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57983: LD_ADDR_VAR 0 5
57987: PUSH
57988: LD_INT 22
57990: PUSH
57991: LD_OWVAR 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 21
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PPUSH
58014: CALL_OW 69
58018: ST_TO_ADDR
// if not tmp then
58019: LD_VAR 0 5
58023: NOT
58024: IFFALSE 58028
// exit ;
58026: GO 58182
// for i in tmp do
58028: LD_ADDR_VAR 0 1
58032: PUSH
58033: LD_VAR 0 5
58037: PUSH
58038: FOR_IN
58039: IFFALSE 58180
// begin d := rand ( 0 , 5 ) ;
58041: LD_ADDR_VAR 0 4
58045: PUSH
58046: LD_INT 0
58048: PPUSH
58049: LD_INT 5
58051: PPUSH
58052: CALL_OW 12
58056: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58057: LD_ADDR_VAR 0 2
58061: PUSH
58062: LD_VAR 0 1
58066: PPUSH
58067: CALL_OW 250
58071: PPUSH
58072: LD_VAR 0 4
58076: PPUSH
58077: LD_INT 3
58079: PPUSH
58080: LD_INT 12
58082: PPUSH
58083: CALL_OW 12
58087: PPUSH
58088: CALL_OW 272
58092: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58093: LD_ADDR_VAR 0 3
58097: PUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 251
58107: PPUSH
58108: LD_VAR 0 4
58112: PPUSH
58113: LD_INT 3
58115: PPUSH
58116: LD_INT 12
58118: PPUSH
58119: CALL_OW 12
58123: PPUSH
58124: CALL_OW 273
58128: ST_TO_ADDR
// if ValidHex ( x , y ) then
58129: LD_VAR 0 2
58133: PPUSH
58134: LD_VAR 0 3
58138: PPUSH
58139: CALL_OW 488
58143: IFFALSE 58178
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58145: LD_VAR 0 1
58149: PPUSH
58150: LD_VAR 0 2
58154: PPUSH
58155: LD_VAR 0 3
58159: PPUSH
58160: LD_INT 3
58162: PPUSH
58163: LD_INT 6
58165: PPUSH
58166: CALL_OW 12
58170: PPUSH
58171: LD_INT 1
58173: PPUSH
58174: CALL_OW 483
// end ;
58178: GO 58038
58180: POP
58181: POP
// end ;
58182: PPOPN 5
58184: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58185: LD_EXP 28
58189: IFFALSE 58197
58191: PUSH
58192: LD_EXP 63
58196: AND
58197: IFFALSE 58291
58199: GO 58201
58201: DISABLE
58202: LD_INT 0
58204: PPUSH
58205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58206: LD_ADDR_VAR 0 2
58210: PUSH
58211: LD_INT 22
58213: PUSH
58214: LD_OWVAR 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 32
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 21
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: PPUSH
58248: CALL_OW 69
58252: ST_TO_ADDR
// if not tmp then
58253: LD_VAR 0 2
58257: NOT
58258: IFFALSE 58262
// exit ;
58260: GO 58291
// for i in tmp do
58262: LD_ADDR_VAR 0 1
58266: PUSH
58267: LD_VAR 0 2
58271: PUSH
58272: FOR_IN
58273: IFFALSE 58289
// SetFuel ( i , 0 ) ;
58275: LD_VAR 0 1
58279: PPUSH
58280: LD_INT 0
58282: PPUSH
58283: CALL_OW 240
58287: GO 58272
58289: POP
58290: POP
// end ;
58291: PPOPN 2
58293: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58294: LD_EXP 28
58298: IFFALSE 58306
58300: PUSH
58301: LD_EXP 64
58305: AND
58306: IFFALSE 58372
58308: GO 58310
58310: DISABLE
58311: LD_INT 0
58313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58314: LD_ADDR_VAR 0 1
58318: PUSH
58319: LD_INT 22
58321: PUSH
58322: LD_OWVAR 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 30
58333: PUSH
58334: LD_INT 29
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PPUSH
58345: CALL_OW 69
58349: ST_TO_ADDR
// if not tmp then
58350: LD_VAR 0 1
58354: NOT
58355: IFFALSE 58359
// exit ;
58357: GO 58372
// DestroyUnit ( tmp [ 1 ] ) ;
58359: LD_VAR 0 1
58363: PUSH
58364: LD_INT 1
58366: ARRAY
58367: PPUSH
58368: CALL_OW 65
// end ;
58372: PPOPN 1
58374: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58375: LD_EXP 28
58379: IFFALSE 58387
58381: PUSH
58382: LD_EXP 66
58386: AND
58387: IFFALSE 58516
58389: GO 58391
58391: DISABLE
58392: LD_INT 0
58394: PPUSH
// begin uc_side := 0 ;
58395: LD_ADDR_OWVAR 20
58399: PUSH
58400: LD_INT 0
58402: ST_TO_ADDR
// uc_nation := nation_arabian ;
58403: LD_ADDR_OWVAR 21
58407: PUSH
58408: LD_INT 2
58410: ST_TO_ADDR
// hc_gallery :=  ;
58411: LD_ADDR_OWVAR 33
58415: PUSH
58416: LD_STRING 
58418: ST_TO_ADDR
// hc_name :=  ;
58419: LD_ADDR_OWVAR 26
58423: PUSH
58424: LD_STRING 
58426: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58427: LD_INT 1
58429: PPUSH
58430: LD_INT 11
58432: PPUSH
58433: LD_INT 10
58435: PPUSH
58436: CALL_OW 380
// un := CreateHuman ;
58440: LD_ADDR_VAR 0 1
58444: PUSH
58445: CALL_OW 44
58449: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58450: LD_VAR 0 1
58454: PPUSH
58455: LD_INT 1
58457: PPUSH
58458: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58462: LD_INT 35
58464: PPUSH
58465: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58469: LD_VAR 0 1
58473: PPUSH
58474: LD_INT 22
58476: PUSH
58477: LD_OWVAR 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PPUSH
58486: CALL_OW 69
58490: PPUSH
58491: LD_VAR 0 1
58495: PPUSH
58496: CALL_OW 74
58500: PPUSH
58501: CALL_OW 115
// until IsDead ( un ) ;
58505: LD_VAR 0 1
58509: PPUSH
58510: CALL_OW 301
58514: IFFALSE 58462
// end ;
58516: PPOPN 1
58518: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58519: LD_EXP 28
58523: IFFALSE 58531
58525: PUSH
58526: LD_EXP 68
58530: AND
58531: IFFALSE 58543
58533: GO 58535
58535: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58536: LD_STRING earthquake(getX(game), 0, 32)
58538: PPUSH
58539: CALL_OW 559
58543: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58544: LD_EXP 28
58548: IFFALSE 58556
58550: PUSH
58551: LD_EXP 69
58555: AND
58556: IFFALSE 58647
58558: GO 58560
58560: DISABLE
58561: LD_INT 0
58563: PPUSH
// begin enable ;
58564: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58565: LD_ADDR_VAR 0 1
58569: PUSH
58570: LD_INT 22
58572: PUSH
58573: LD_OWVAR 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 21
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 33
58594: PUSH
58595: LD_INT 3
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: PPUSH
58607: CALL_OW 69
58611: ST_TO_ADDR
// if not tmp then
58612: LD_VAR 0 1
58616: NOT
58617: IFFALSE 58621
// exit ;
58619: GO 58647
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58621: LD_VAR 0 1
58625: PUSH
58626: LD_INT 1
58628: PPUSH
58629: LD_VAR 0 1
58633: PPUSH
58634: CALL_OW 12
58638: ARRAY
58639: PPUSH
58640: LD_INT 1
58642: PPUSH
58643: CALL_OW 234
// end ;
58647: PPOPN 1
58649: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58650: LD_EXP 28
58654: IFFALSE 58662
58656: PUSH
58657: LD_EXP 70
58661: AND
58662: IFFALSE 58803
58664: GO 58666
58666: DISABLE
58667: LD_INT 0
58669: PPUSH
58670: PPUSH
58671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58672: LD_ADDR_VAR 0 3
58676: PUSH
58677: LD_INT 22
58679: PUSH
58680: LD_OWVAR 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 25
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PPUSH
58703: CALL_OW 69
58707: ST_TO_ADDR
// if not tmp then
58708: LD_VAR 0 3
58712: NOT
58713: IFFALSE 58717
// exit ;
58715: GO 58803
// un := tmp [ rand ( 1 , tmp ) ] ;
58717: LD_ADDR_VAR 0 2
58721: PUSH
58722: LD_VAR 0 3
58726: PUSH
58727: LD_INT 1
58729: PPUSH
58730: LD_VAR 0 3
58734: PPUSH
58735: CALL_OW 12
58739: ARRAY
58740: ST_TO_ADDR
// if Crawls ( un ) then
58741: LD_VAR 0 2
58745: PPUSH
58746: CALL_OW 318
58750: IFFALSE 58761
// ComWalk ( un ) ;
58752: LD_VAR 0 2
58756: PPUSH
58757: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58761: LD_VAR 0 2
58765: PPUSH
58766: LD_INT 9
58768: PPUSH
58769: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58773: LD_INT 28
58775: PPUSH
58776: LD_OWVAR 2
58780: PPUSH
58781: LD_INT 2
58783: PPUSH
58784: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58788: LD_INT 29
58790: PPUSH
58791: LD_OWVAR 2
58795: PPUSH
58796: LD_INT 2
58798: PPUSH
58799: CALL_OW 322
// end ;
58803: PPOPN 3
58805: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58806: LD_EXP 28
58810: IFFALSE 58818
58812: PUSH
58813: LD_EXP 71
58817: AND
58818: IFFALSE 58929
58820: GO 58822
58822: DISABLE
58823: LD_INT 0
58825: PPUSH
58826: PPUSH
58827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58828: LD_ADDR_VAR 0 3
58832: PUSH
58833: LD_INT 22
58835: PUSH
58836: LD_OWVAR 2
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 25
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PPUSH
58859: CALL_OW 69
58863: ST_TO_ADDR
// if not tmp then
58864: LD_VAR 0 3
58868: NOT
58869: IFFALSE 58873
// exit ;
58871: GO 58929
// un := tmp [ rand ( 1 , tmp ) ] ;
58873: LD_ADDR_VAR 0 2
58877: PUSH
58878: LD_VAR 0 3
58882: PUSH
58883: LD_INT 1
58885: PPUSH
58886: LD_VAR 0 3
58890: PPUSH
58891: CALL_OW 12
58895: ARRAY
58896: ST_TO_ADDR
// if Crawls ( un ) then
58897: LD_VAR 0 2
58901: PPUSH
58902: CALL_OW 318
58906: IFFALSE 58917
// ComWalk ( un ) ;
58908: LD_VAR 0 2
58912: PPUSH
58913: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58917: LD_VAR 0 2
58921: PPUSH
58922: LD_INT 8
58924: PPUSH
58925: CALL_OW 336
// end ;
58929: PPOPN 3
58931: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58932: LD_EXP 28
58936: IFFALSE 58944
58938: PUSH
58939: LD_EXP 72
58943: AND
58944: IFFALSE 59088
58946: GO 58948
58948: DISABLE
58949: LD_INT 0
58951: PPUSH
58952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58953: LD_ADDR_VAR 0 2
58957: PUSH
58958: LD_INT 22
58960: PUSH
58961: LD_OWVAR 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 21
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 34
58985: PUSH
58986: LD_INT 12
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 34
58995: PUSH
58996: LD_INT 51
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 34
59005: PUSH
59006: LD_INT 32
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: LIST
59023: PPUSH
59024: CALL_OW 69
59028: ST_TO_ADDR
// if not tmp then
59029: LD_VAR 0 2
59033: NOT
59034: IFFALSE 59038
// exit ;
59036: GO 59088
// for i in tmp do
59038: LD_ADDR_VAR 0 1
59042: PUSH
59043: LD_VAR 0 2
59047: PUSH
59048: FOR_IN
59049: IFFALSE 59086
// if GetCargo ( i , mat_artifact ) = 0 then
59051: LD_VAR 0 1
59055: PPUSH
59056: LD_INT 4
59058: PPUSH
59059: CALL_OW 289
59063: PUSH
59064: LD_INT 0
59066: EQUAL
59067: IFFALSE 59084
// SetCargo ( i , mat_siberit , 100 ) ;
59069: LD_VAR 0 1
59073: PPUSH
59074: LD_INT 3
59076: PPUSH
59077: LD_INT 100
59079: PPUSH
59080: CALL_OW 290
59084: GO 59048
59086: POP
59087: POP
// end ;
59088: PPOPN 2
59090: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59091: LD_EXP 28
59095: IFFALSE 59103
59097: PUSH
59098: LD_EXP 73
59102: AND
59103: IFFALSE 59286
59105: GO 59107
59107: DISABLE
59108: LD_INT 0
59110: PPUSH
59111: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59112: LD_ADDR_VAR 0 2
59116: PUSH
59117: LD_INT 22
59119: PUSH
59120: LD_OWVAR 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PPUSH
59129: CALL_OW 69
59133: ST_TO_ADDR
// if not tmp then
59134: LD_VAR 0 2
59138: NOT
59139: IFFALSE 59143
// exit ;
59141: GO 59286
// for i := 1 to 2 do
59143: LD_ADDR_VAR 0 1
59147: PUSH
59148: DOUBLE
59149: LD_INT 1
59151: DEC
59152: ST_TO_ADDR
59153: LD_INT 2
59155: PUSH
59156: FOR_TO
59157: IFFALSE 59284
// begin uc_side := your_side ;
59159: LD_ADDR_OWVAR 20
59163: PUSH
59164: LD_OWVAR 2
59168: ST_TO_ADDR
// uc_nation := nation_american ;
59169: LD_ADDR_OWVAR 21
59173: PUSH
59174: LD_INT 1
59176: ST_TO_ADDR
// vc_chassis := us_morphling ;
59177: LD_ADDR_OWVAR 37
59181: PUSH
59182: LD_INT 5
59184: ST_TO_ADDR
// vc_engine := engine_siberite ;
59185: LD_ADDR_OWVAR 39
59189: PUSH
59190: LD_INT 3
59192: ST_TO_ADDR
// vc_control := control_computer ;
59193: LD_ADDR_OWVAR 38
59197: PUSH
59198: LD_INT 3
59200: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59201: LD_ADDR_OWVAR 40
59205: PUSH
59206: LD_INT 10
59208: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59209: LD_VAR 0 2
59213: PUSH
59214: LD_INT 1
59216: ARRAY
59217: PPUSH
59218: CALL_OW 310
59222: NOT
59223: IFFALSE 59270
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59225: CALL_OW 45
59229: PPUSH
59230: LD_VAR 0 2
59234: PUSH
59235: LD_INT 1
59237: ARRAY
59238: PPUSH
59239: CALL_OW 250
59243: PPUSH
59244: LD_VAR 0 2
59248: PUSH
59249: LD_INT 1
59251: ARRAY
59252: PPUSH
59253: CALL_OW 251
59257: PPUSH
59258: LD_INT 12
59260: PPUSH
59261: LD_INT 1
59263: PPUSH
59264: CALL_OW 50
59268: GO 59282
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59270: CALL_OW 45
59274: PPUSH
59275: LD_INT 1
59277: PPUSH
59278: CALL_OW 51
// end ;
59282: GO 59156
59284: POP
59285: POP
// end ;
59286: PPOPN 2
59288: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59289: LD_EXP 28
59293: IFFALSE 59301
59295: PUSH
59296: LD_EXP 74
59300: AND
59301: IFFALSE 59523
59303: GO 59305
59305: DISABLE
59306: LD_INT 0
59308: PPUSH
59309: PPUSH
59310: PPUSH
59311: PPUSH
59312: PPUSH
59313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59314: LD_ADDR_VAR 0 6
59318: PUSH
59319: LD_INT 22
59321: PUSH
59322: LD_OWVAR 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 21
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: LD_INT 23
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: PPUSH
59363: CALL_OW 69
59367: ST_TO_ADDR
// if not tmp then
59368: LD_VAR 0 6
59372: NOT
59373: IFFALSE 59377
// exit ;
59375: GO 59523
// s1 := rand ( 1 , 4 ) ;
59377: LD_ADDR_VAR 0 2
59381: PUSH
59382: LD_INT 1
59384: PPUSH
59385: LD_INT 4
59387: PPUSH
59388: CALL_OW 12
59392: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59393: LD_ADDR_VAR 0 4
59397: PUSH
59398: LD_VAR 0 6
59402: PUSH
59403: LD_INT 1
59405: ARRAY
59406: PPUSH
59407: LD_VAR 0 2
59411: PPUSH
59412: CALL_OW 259
59416: ST_TO_ADDR
// if s1 = 1 then
59417: LD_VAR 0 2
59421: PUSH
59422: LD_INT 1
59424: EQUAL
59425: IFFALSE 59445
// s2 := rand ( 2 , 4 ) else
59427: LD_ADDR_VAR 0 3
59431: PUSH
59432: LD_INT 2
59434: PPUSH
59435: LD_INT 4
59437: PPUSH
59438: CALL_OW 12
59442: ST_TO_ADDR
59443: GO 59453
// s2 := 1 ;
59445: LD_ADDR_VAR 0 3
59449: PUSH
59450: LD_INT 1
59452: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59453: LD_ADDR_VAR 0 5
59457: PUSH
59458: LD_VAR 0 6
59462: PUSH
59463: LD_INT 1
59465: ARRAY
59466: PPUSH
59467: LD_VAR 0 3
59471: PPUSH
59472: CALL_OW 259
59476: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59477: LD_VAR 0 6
59481: PUSH
59482: LD_INT 1
59484: ARRAY
59485: PPUSH
59486: LD_VAR 0 2
59490: PPUSH
59491: LD_VAR 0 5
59495: PPUSH
59496: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59500: LD_VAR 0 6
59504: PUSH
59505: LD_INT 1
59507: ARRAY
59508: PPUSH
59509: LD_VAR 0 3
59513: PPUSH
59514: LD_VAR 0 4
59518: PPUSH
59519: CALL_OW 237
// end ;
59523: PPOPN 6
59525: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59526: LD_EXP 28
59530: IFFALSE 59538
59532: PUSH
59533: LD_EXP 75
59537: AND
59538: IFFALSE 59617
59540: GO 59542
59542: DISABLE
59543: LD_INT 0
59545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59546: LD_ADDR_VAR 0 1
59550: PUSH
59551: LD_INT 22
59553: PUSH
59554: LD_OWVAR 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 30
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PPUSH
59577: CALL_OW 69
59581: ST_TO_ADDR
// if not tmp then
59582: LD_VAR 0 1
59586: NOT
59587: IFFALSE 59591
// exit ;
59589: GO 59617
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59591: LD_VAR 0 1
59595: PUSH
59596: LD_INT 1
59598: PPUSH
59599: LD_VAR 0 1
59603: PPUSH
59604: CALL_OW 12
59608: ARRAY
59609: PPUSH
59610: LD_INT 1
59612: PPUSH
59613: CALL_OW 234
// end ;
59617: PPOPN 1
59619: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59620: LD_EXP 28
59624: IFFALSE 59632
59626: PUSH
59627: LD_EXP 76
59631: AND
59632: IFFALSE 59744
59634: GO 59636
59636: DISABLE
59637: LD_INT 0
59639: PPUSH
59640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59641: LD_ADDR_VAR 0 2
59645: PUSH
59646: LD_INT 22
59648: PUSH
59649: LD_OWVAR 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 30
59663: PUSH
59664: LD_INT 27
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 30
59673: PUSH
59674: LD_INT 26
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 30
59683: PUSH
59684: LD_INT 28
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PPUSH
59701: CALL_OW 69
59705: ST_TO_ADDR
// if not tmp then
59706: LD_VAR 0 2
59710: NOT
59711: IFFALSE 59715
// exit ;
59713: GO 59744
// for i in tmp do
59715: LD_ADDR_VAR 0 1
59719: PUSH
59720: LD_VAR 0 2
59724: PUSH
59725: FOR_IN
59726: IFFALSE 59742
// SetLives ( i , 1 ) ;
59728: LD_VAR 0 1
59732: PPUSH
59733: LD_INT 1
59735: PPUSH
59736: CALL_OW 234
59740: GO 59725
59742: POP
59743: POP
// end ;
59744: PPOPN 2
59746: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59747: LD_EXP 28
59751: IFFALSE 59759
59753: PUSH
59754: LD_EXP 77
59758: AND
59759: IFFALSE 60046
59761: GO 59763
59763: DISABLE
59764: LD_INT 0
59766: PPUSH
59767: PPUSH
59768: PPUSH
// begin i := rand ( 1 , 7 ) ;
59769: LD_ADDR_VAR 0 1
59773: PUSH
59774: LD_INT 1
59776: PPUSH
59777: LD_INT 7
59779: PPUSH
59780: CALL_OW 12
59784: ST_TO_ADDR
// case i of 1 :
59785: LD_VAR 0 1
59789: PUSH
59790: LD_INT 1
59792: DOUBLE
59793: EQUAL
59794: IFTRUE 59798
59796: GO 59808
59798: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59799: LD_STRING earthquake(getX(game), 0, 32)
59801: PPUSH
59802: CALL_OW 559
59806: GO 60046
59808: LD_INT 2
59810: DOUBLE
59811: EQUAL
59812: IFTRUE 59816
59814: GO 59830
59816: POP
// begin ToLua ( displayStucuk(); ) ;
59817: LD_STRING displayStucuk();
59819: PPUSH
59820: CALL_OW 559
// ResetFog ;
59824: CALL_OW 335
// end ; 3 :
59828: GO 60046
59830: LD_INT 3
59832: DOUBLE
59833: EQUAL
59834: IFTRUE 59838
59836: GO 59942
59838: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59839: LD_ADDR_VAR 0 2
59843: PUSH
59844: LD_INT 22
59846: PUSH
59847: LD_OWVAR 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 25
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PPUSH
59870: CALL_OW 69
59874: ST_TO_ADDR
// if not tmp then
59875: LD_VAR 0 2
59879: NOT
59880: IFFALSE 59884
// exit ;
59882: GO 60046
// un := tmp [ rand ( 1 , tmp ) ] ;
59884: LD_ADDR_VAR 0 3
59888: PUSH
59889: LD_VAR 0 2
59893: PUSH
59894: LD_INT 1
59896: PPUSH
59897: LD_VAR 0 2
59901: PPUSH
59902: CALL_OW 12
59906: ARRAY
59907: ST_TO_ADDR
// if Crawls ( un ) then
59908: LD_VAR 0 3
59912: PPUSH
59913: CALL_OW 318
59917: IFFALSE 59928
// ComWalk ( un ) ;
59919: LD_VAR 0 3
59923: PPUSH
59924: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59928: LD_VAR 0 3
59932: PPUSH
59933: LD_INT 8
59935: PPUSH
59936: CALL_OW 336
// end ; 4 :
59940: GO 60046
59942: LD_INT 4
59944: DOUBLE
59945: EQUAL
59946: IFTRUE 59950
59948: GO 60024
59950: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59951: LD_ADDR_VAR 0 2
59955: PUSH
59956: LD_INT 22
59958: PUSH
59959: LD_OWVAR 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 30
59970: PUSH
59971: LD_INT 29
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PPUSH
59982: CALL_OW 69
59986: ST_TO_ADDR
// if not tmp then
59987: LD_VAR 0 2
59991: NOT
59992: IFFALSE 59996
// exit ;
59994: GO 60046
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59996: LD_VAR 0 2
60000: PUSH
60001: LD_INT 1
60003: ARRAY
60004: PPUSH
60005: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60009: LD_VAR 0 2
60013: PUSH
60014: LD_INT 1
60016: ARRAY
60017: PPUSH
60018: CALL_OW 65
// end ; 5 .. 7 :
60022: GO 60046
60024: LD_INT 5
60026: DOUBLE
60027: GREATEREQUAL
60028: IFFALSE 60036
60030: LD_INT 7
60032: DOUBLE
60033: LESSEQUAL
60034: IFTRUE 60038
60036: GO 60045
60038: POP
// StreamSibBomb ; end ;
60039: CALL 56227 0 0
60043: GO 60046
60045: POP
// end ;
60046: PPOPN 3
60048: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60049: LD_EXP 28
60053: IFFALSE 60061
60055: PUSH
60056: LD_EXP 78
60060: AND
60061: IFFALSE 60217
60063: GO 60065
60065: DISABLE
60066: LD_INT 0
60068: PPUSH
60069: PPUSH
60070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60071: LD_ADDR_VAR 0 2
60075: PUSH
60076: LD_INT 81
60078: PUSH
60079: LD_OWVAR 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: LD_INT 21
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 21
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: LIST
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PPUSH
60120: CALL_OW 69
60124: ST_TO_ADDR
// if not tmp then
60125: LD_VAR 0 2
60129: NOT
60130: IFFALSE 60134
// exit ;
60132: GO 60217
// p := 0 ;
60134: LD_ADDR_VAR 0 3
60138: PUSH
60139: LD_INT 0
60141: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60142: LD_INT 35
60144: PPUSH
60145: CALL_OW 67
// p := p + 1 ;
60149: LD_ADDR_VAR 0 3
60153: PUSH
60154: LD_VAR 0 3
60158: PUSH
60159: LD_INT 1
60161: PLUS
60162: ST_TO_ADDR
// for i in tmp do
60163: LD_ADDR_VAR 0 1
60167: PUSH
60168: LD_VAR 0 2
60172: PUSH
60173: FOR_IN
60174: IFFALSE 60205
// if GetLives ( i ) < 1000 then
60176: LD_VAR 0 1
60180: PPUSH
60181: CALL_OW 256
60185: PUSH
60186: LD_INT 1000
60188: LESS
60189: IFFALSE 60203
// SetLives ( i , 1000 ) ;
60191: LD_VAR 0 1
60195: PPUSH
60196: LD_INT 1000
60198: PPUSH
60199: CALL_OW 234
60203: GO 60173
60205: POP
60206: POP
// until p > 20 ;
60207: LD_VAR 0 3
60211: PUSH
60212: LD_INT 20
60214: GREATER
60215: IFFALSE 60142
// end ;
60217: PPOPN 3
60219: END
// every 0 0$1 trigger StreamModeActive and sTime do
60220: LD_EXP 28
60224: IFFALSE 60232
60226: PUSH
60227: LD_EXP 79
60231: AND
60232: IFFALSE 60267
60234: GO 60236
60236: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60237: LD_INT 28
60239: PPUSH
60240: LD_OWVAR 2
60244: PPUSH
60245: LD_INT 2
60247: PPUSH
60248: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60252: LD_INT 30
60254: PPUSH
60255: LD_OWVAR 2
60259: PPUSH
60260: LD_INT 2
60262: PPUSH
60263: CALL_OW 322
// end ;
60267: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60268: LD_EXP 28
60272: IFFALSE 60280
60274: PUSH
60275: LD_EXP 80
60279: AND
60280: IFFALSE 60401
60282: GO 60284
60284: DISABLE
60285: LD_INT 0
60287: PPUSH
60288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60289: LD_ADDR_VAR 0 2
60293: PUSH
60294: LD_INT 22
60296: PUSH
60297: LD_OWVAR 2
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 21
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: LD_INT 23
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: PPUSH
60338: CALL_OW 69
60342: ST_TO_ADDR
// if not tmp then
60343: LD_VAR 0 2
60347: NOT
60348: IFFALSE 60352
// exit ;
60350: GO 60401
// for i in tmp do
60352: LD_ADDR_VAR 0 1
60356: PUSH
60357: LD_VAR 0 2
60361: PUSH
60362: FOR_IN
60363: IFFALSE 60399
// begin if Crawls ( i ) then
60365: LD_VAR 0 1
60369: PPUSH
60370: CALL_OW 318
60374: IFFALSE 60385
// ComWalk ( i ) ;
60376: LD_VAR 0 1
60380: PPUSH
60381: CALL_OW 138
// SetClass ( i , 2 ) ;
60385: LD_VAR 0 1
60389: PPUSH
60390: LD_INT 2
60392: PPUSH
60393: CALL_OW 336
// end ;
60397: GO 60362
60399: POP
60400: POP
// end ;
60401: PPOPN 2
60403: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60404: LD_EXP 28
60408: IFFALSE 60416
60410: PUSH
60411: LD_EXP 81
60415: AND
60416: IFFALSE 60706
60418: GO 60420
60420: DISABLE
60421: LD_INT 0
60423: PPUSH
60424: PPUSH
60425: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60426: LD_OWVAR 2
60430: PPUSH
60431: LD_INT 9
60433: PPUSH
60434: LD_INT 1
60436: PPUSH
60437: LD_INT 1
60439: PPUSH
60440: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60444: LD_INT 9
60446: PPUSH
60447: LD_OWVAR 2
60451: PPUSH
60452: CALL_OW 343
// uc_side := 9 ;
60456: LD_ADDR_OWVAR 20
60460: PUSH
60461: LD_INT 9
60463: ST_TO_ADDR
// uc_nation := 2 ;
60464: LD_ADDR_OWVAR 21
60468: PUSH
60469: LD_INT 2
60471: ST_TO_ADDR
// hc_name := Dark Warrior ;
60472: LD_ADDR_OWVAR 26
60476: PUSH
60477: LD_STRING Dark Warrior
60479: ST_TO_ADDR
// hc_gallery :=  ;
60480: LD_ADDR_OWVAR 33
60484: PUSH
60485: LD_STRING 
60487: ST_TO_ADDR
// hc_noskilllimit := true ;
60488: LD_ADDR_OWVAR 76
60492: PUSH
60493: LD_INT 1
60495: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60496: LD_ADDR_OWVAR 31
60500: PUSH
60501: LD_INT 30
60503: PUSH
60504: LD_INT 30
60506: PUSH
60507: LD_INT 30
60509: PUSH
60510: LD_INT 30
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// un := CreateHuman ;
60519: LD_ADDR_VAR 0 3
60523: PUSH
60524: CALL_OW 44
60528: ST_TO_ADDR
// hc_noskilllimit := false ;
60529: LD_ADDR_OWVAR 76
60533: PUSH
60534: LD_INT 0
60536: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60537: LD_VAR 0 3
60541: PPUSH
60542: LD_INT 1
60544: PPUSH
60545: CALL_OW 51
// ToLua ( playRanger() ) ;
60549: LD_STRING playRanger()
60551: PPUSH
60552: CALL_OW 559
// p := 0 ;
60556: LD_ADDR_VAR 0 2
60560: PUSH
60561: LD_INT 0
60563: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60564: LD_INT 35
60566: PPUSH
60567: CALL_OW 67
// p := p + 1 ;
60571: LD_ADDR_VAR 0 2
60575: PUSH
60576: LD_VAR 0 2
60580: PUSH
60581: LD_INT 1
60583: PLUS
60584: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60585: LD_VAR 0 3
60589: PPUSH
60590: CALL_OW 256
60594: PUSH
60595: LD_INT 1000
60597: LESS
60598: IFFALSE 60612
// SetLives ( un , 1000 ) ;
60600: LD_VAR 0 3
60604: PPUSH
60605: LD_INT 1000
60607: PPUSH
60608: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60612: LD_VAR 0 3
60616: PPUSH
60617: LD_INT 81
60619: PUSH
60620: LD_OWVAR 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 91
60631: PUSH
60632: LD_VAR 0 3
60636: PUSH
60637: LD_INT 30
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: LIST
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PPUSH
60649: CALL_OW 69
60653: PPUSH
60654: LD_VAR 0 3
60658: PPUSH
60659: CALL_OW 74
60663: PPUSH
60664: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60668: LD_VAR 0 2
60672: PUSH
60673: LD_INT 80
60675: GREATER
60676: IFTRUE 60689
60678: PUSH
60679: LD_VAR 0 3
60683: PPUSH
60684: CALL_OW 301
60688: OR
60689: IFFALSE 60564
// if un then
60691: LD_VAR 0 3
60695: IFFALSE 60706
// RemoveUnit ( un ) ;
60697: LD_VAR 0 3
60701: PPUSH
60702: CALL_OW 64
// end ;
60706: PPOPN 3
60708: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60709: LD_EXP 82
60713: IFFALSE 60829
60715: GO 60717
60717: DISABLE
60718: LD_INT 0
60720: PPUSH
60721: PPUSH
60722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60723: LD_ADDR_VAR 0 2
60727: PUSH
60728: LD_INT 81
60730: PUSH
60731: LD_OWVAR 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 21
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PPUSH
60754: CALL_OW 69
60758: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60759: LD_STRING playComputer()
60761: PPUSH
60762: CALL_OW 559
// if not tmp then
60766: LD_VAR 0 2
60770: NOT
60771: IFFALSE 60775
// exit ;
60773: GO 60829
// for i in tmp do
60775: LD_ADDR_VAR 0 1
60779: PUSH
60780: LD_VAR 0 2
60784: PUSH
60785: FOR_IN
60786: IFFALSE 60827
// for j := 1 to 4 do
60788: LD_ADDR_VAR 0 3
60792: PUSH
60793: DOUBLE
60794: LD_INT 1
60796: DEC
60797: ST_TO_ADDR
60798: LD_INT 4
60800: PUSH
60801: FOR_TO
60802: IFFALSE 60823
// SetSkill ( i , j , 10 ) ;
60804: LD_VAR 0 1
60808: PPUSH
60809: LD_VAR 0 3
60813: PPUSH
60814: LD_INT 10
60816: PPUSH
60817: CALL_OW 237
60821: GO 60801
60823: POP
60824: POP
60825: GO 60785
60827: POP
60828: POP
// end ;
60829: PPOPN 3
60831: END
// every 0 0$1 trigger s30 do var i , tmp ;
60832: LD_EXP 83
60836: IFFALSE 60905
60838: GO 60840
60840: DISABLE
60841: LD_INT 0
60843: PPUSH
60844: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60845: LD_ADDR_VAR 0 2
60849: PUSH
60850: LD_INT 22
60852: PUSH
60853: LD_OWVAR 2
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PPUSH
60862: CALL_OW 69
60866: ST_TO_ADDR
// if not tmp then
60867: LD_VAR 0 2
60871: NOT
60872: IFFALSE 60876
// exit ;
60874: GO 60905
// for i in tmp do
60876: LD_ADDR_VAR 0 1
60880: PUSH
60881: LD_VAR 0 2
60885: PUSH
60886: FOR_IN
60887: IFFALSE 60903
// SetLives ( i , 300 ) ;
60889: LD_VAR 0 1
60893: PPUSH
60894: LD_INT 300
60896: PPUSH
60897: CALL_OW 234
60901: GO 60886
60903: POP
60904: POP
// end ;
60905: PPOPN 2
60907: END
// every 0 0$1 trigger s60 do var i , tmp ;
60908: LD_EXP 84
60912: IFFALSE 60981
60914: GO 60916
60916: DISABLE
60917: LD_INT 0
60919: PPUSH
60920: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60921: LD_ADDR_VAR 0 2
60925: PUSH
60926: LD_INT 22
60928: PUSH
60929: LD_OWVAR 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PPUSH
60938: CALL_OW 69
60942: ST_TO_ADDR
// if not tmp then
60943: LD_VAR 0 2
60947: NOT
60948: IFFALSE 60952
// exit ;
60950: GO 60981
// for i in tmp do
60952: LD_ADDR_VAR 0 1
60956: PUSH
60957: LD_VAR 0 2
60961: PUSH
60962: FOR_IN
60963: IFFALSE 60979
// SetLives ( i , 600 ) ;
60965: LD_VAR 0 1
60969: PPUSH
60970: LD_INT 600
60972: PPUSH
60973: CALL_OW 234
60977: GO 60962
60979: POP
60980: POP
// end ;
60981: PPOPN 2
60983: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60984: LD_INT 0
60986: PPUSH
// case cmd of 301 :
60987: LD_VAR 0 1
60991: PUSH
60992: LD_INT 301
60994: DOUBLE
60995: EQUAL
60996: IFTRUE 61000
60998: GO 61032
61000: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61001: LD_VAR 0 6
61005: PPUSH
61006: LD_VAR 0 7
61010: PPUSH
61011: LD_VAR 0 8
61015: PPUSH
61016: LD_VAR 0 4
61020: PPUSH
61021: LD_VAR 0 5
61025: PPUSH
61026: CALL 62245 0 5
61030: GO 61153
61032: LD_INT 302
61034: DOUBLE
61035: EQUAL
61036: IFTRUE 61040
61038: GO 61077
61040: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61041: LD_VAR 0 6
61045: PPUSH
61046: LD_VAR 0 7
61050: PPUSH
61051: LD_VAR 0 8
61055: PPUSH
61056: LD_VAR 0 9
61060: PPUSH
61061: LD_VAR 0 4
61065: PPUSH
61066: LD_VAR 0 5
61070: PPUSH
61071: CALL 62336 0 6
61075: GO 61153
61077: LD_INT 303
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61085
61083: GO 61122
61085: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61086: LD_VAR 0 6
61090: PPUSH
61091: LD_VAR 0 7
61095: PPUSH
61096: LD_VAR 0 8
61100: PPUSH
61101: LD_VAR 0 9
61105: PPUSH
61106: LD_VAR 0 4
61110: PPUSH
61111: LD_VAR 0 5
61115: PPUSH
61116: CALL 61158 0 6
61120: GO 61153
61122: LD_INT 304
61124: DOUBLE
61125: EQUAL
61126: IFTRUE 61130
61128: GO 61152
61130: POP
// hHackTeleport ( unit , x , y ) ; end ;
61131: LD_VAR 0 2
61135: PPUSH
61136: LD_VAR 0 4
61140: PPUSH
61141: LD_VAR 0 5
61145: PPUSH
61146: CALL 62929 0 3
61150: GO 61153
61152: POP
// end ;
61153: LD_VAR 0 12
61157: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61158: LD_INT 0
61160: PPUSH
61161: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61162: LD_VAR 0 1
61166: PUSH
61167: LD_INT 1
61169: LESS
61170: IFTRUE 61182
61172: PUSH
61173: LD_VAR 0 1
61177: PUSH
61178: LD_INT 3
61180: GREATER
61181: OR
61182: IFTRUE 61200
61184: PUSH
61185: LD_VAR 0 5
61189: PPUSH
61190: LD_VAR 0 6
61194: PPUSH
61195: CALL_OW 428
61199: OR
61200: IFFALSE 61204
// exit ;
61202: GO 61932
// uc_side := your_side ;
61204: LD_ADDR_OWVAR 20
61208: PUSH
61209: LD_OWVAR 2
61213: ST_TO_ADDR
// uc_nation := nation ;
61214: LD_ADDR_OWVAR 21
61218: PUSH
61219: LD_VAR 0 1
61223: ST_TO_ADDR
// bc_level = 1 ;
61224: LD_ADDR_OWVAR 43
61228: PUSH
61229: LD_INT 1
61231: ST_TO_ADDR
// case btype of 1 :
61232: LD_VAR 0 2
61236: PUSH
61237: LD_INT 1
61239: DOUBLE
61240: EQUAL
61241: IFTRUE 61245
61243: GO 61256
61245: POP
// bc_type := b_depot ; 2 :
61246: LD_ADDR_OWVAR 42
61250: PUSH
61251: LD_INT 0
61253: ST_TO_ADDR
61254: GO 61876
61256: LD_INT 2
61258: DOUBLE
61259: EQUAL
61260: IFTRUE 61264
61262: GO 61275
61264: POP
// bc_type := b_warehouse ; 3 :
61265: LD_ADDR_OWVAR 42
61269: PUSH
61270: LD_INT 1
61272: ST_TO_ADDR
61273: GO 61876
61275: LD_INT 3
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61283
61281: GO 61294
61283: POP
// bc_type := b_lab ; 4 .. 9 :
61284: LD_ADDR_OWVAR 42
61288: PUSH
61289: LD_INT 6
61291: ST_TO_ADDR
61292: GO 61876
61294: LD_INT 4
61296: DOUBLE
61297: GREATEREQUAL
61298: IFFALSE 61306
61300: LD_INT 9
61302: DOUBLE
61303: LESSEQUAL
61304: IFTRUE 61308
61306: GO 61368
61308: POP
// begin bc_type := b_lab_half ;
61309: LD_ADDR_OWVAR 42
61313: PUSH
61314: LD_INT 7
61316: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61317: LD_ADDR_OWVAR 44
61321: PUSH
61322: LD_INT 10
61324: PUSH
61325: LD_INT 11
61327: PUSH
61328: LD_INT 12
61330: PUSH
61331: LD_INT 15
61333: PUSH
61334: LD_INT 14
61336: PUSH
61337: LD_INT 13
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: PUSH
61348: LD_VAR 0 2
61352: PUSH
61353: LD_INT 3
61355: MINUS
61356: ARRAY
61357: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
61358: LD_ADDR_OWVAR 45
61362: PUSH
61363: LD_INT 9
61365: ST_TO_ADDR
// end ; 10 .. 13 :
61366: GO 61876
61368: LD_INT 10
61370: DOUBLE
61371: GREATEREQUAL
61372: IFFALSE 61380
61374: LD_INT 13
61376: DOUBLE
61377: LESSEQUAL
61378: IFTRUE 61382
61380: GO 61459
61382: POP
// begin bc_type := b_lab_full ;
61383: LD_ADDR_OWVAR 42
61387: PUSH
61388: LD_INT 8
61390: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61391: LD_ADDR_OWVAR 44
61395: PUSH
61396: LD_INT 10
61398: PUSH
61399: LD_INT 12
61401: PUSH
61402: LD_INT 14
61404: PUSH
61405: LD_INT 13
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: PUSH
61414: LD_VAR 0 2
61418: PUSH
61419: LD_INT 9
61421: MINUS
61422: ARRAY
61423: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61424: LD_ADDR_OWVAR 45
61428: PUSH
61429: LD_INT 11
61431: PUSH
61432: LD_INT 15
61434: PUSH
61435: LD_INT 12
61437: PUSH
61438: LD_INT 15
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: PUSH
61447: LD_VAR 0 2
61451: PUSH
61452: LD_INT 9
61454: MINUS
61455: ARRAY
61456: ST_TO_ADDR
// end ; 14 :
61457: GO 61876
61459: LD_INT 14
61461: DOUBLE
61462: EQUAL
61463: IFTRUE 61467
61465: GO 61478
61467: POP
// bc_type := b_workshop ; 15 :
61468: LD_ADDR_OWVAR 42
61472: PUSH
61473: LD_INT 2
61475: ST_TO_ADDR
61476: GO 61876
61478: LD_INT 15
61480: DOUBLE
61481: EQUAL
61482: IFTRUE 61486
61484: GO 61497
61486: POP
// bc_type := b_factory ; 16 :
61487: LD_ADDR_OWVAR 42
61491: PUSH
61492: LD_INT 3
61494: ST_TO_ADDR
61495: GO 61876
61497: LD_INT 16
61499: DOUBLE
61500: EQUAL
61501: IFTRUE 61505
61503: GO 61516
61505: POP
// bc_type := b_ext_gun ; 17 :
61506: LD_ADDR_OWVAR 42
61510: PUSH
61511: LD_INT 17
61513: ST_TO_ADDR
61514: GO 61876
61516: LD_INT 17
61518: DOUBLE
61519: EQUAL
61520: IFTRUE 61524
61522: GO 61552
61524: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61525: LD_ADDR_OWVAR 42
61529: PUSH
61530: LD_INT 19
61532: PUSH
61533: LD_INT 23
61535: PUSH
61536: LD_INT 19
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: PUSH
61544: LD_VAR 0 1
61548: ARRAY
61549: ST_TO_ADDR
61550: GO 61876
61552: LD_INT 18
61554: DOUBLE
61555: EQUAL
61556: IFTRUE 61560
61558: GO 61571
61560: POP
// bc_type := b_ext_radar ; 19 :
61561: LD_ADDR_OWVAR 42
61565: PUSH
61566: LD_INT 20
61568: ST_TO_ADDR
61569: GO 61876
61571: LD_INT 19
61573: DOUBLE
61574: EQUAL
61575: IFTRUE 61579
61577: GO 61590
61579: POP
// bc_type := b_ext_radio ; 20 :
61580: LD_ADDR_OWVAR 42
61584: PUSH
61585: LD_INT 22
61587: ST_TO_ADDR
61588: GO 61876
61590: LD_INT 20
61592: DOUBLE
61593: EQUAL
61594: IFTRUE 61598
61596: GO 61609
61598: POP
// bc_type := b_ext_siberium ; 21 :
61599: LD_ADDR_OWVAR 42
61603: PUSH
61604: LD_INT 21
61606: ST_TO_ADDR
61607: GO 61876
61609: LD_INT 21
61611: DOUBLE
61612: EQUAL
61613: IFTRUE 61617
61615: GO 61628
61617: POP
// bc_type := b_ext_computer ; 22 :
61618: LD_ADDR_OWVAR 42
61622: PUSH
61623: LD_INT 24
61625: ST_TO_ADDR
61626: GO 61876
61628: LD_INT 22
61630: DOUBLE
61631: EQUAL
61632: IFTRUE 61636
61634: GO 61647
61636: POP
// bc_type := b_ext_track ; 23 :
61637: LD_ADDR_OWVAR 42
61641: PUSH
61642: LD_INT 16
61644: ST_TO_ADDR
61645: GO 61876
61647: LD_INT 23
61649: DOUBLE
61650: EQUAL
61651: IFTRUE 61655
61653: GO 61666
61655: POP
// bc_type := b_ext_laser ; 24 :
61656: LD_ADDR_OWVAR 42
61660: PUSH
61661: LD_INT 25
61663: ST_TO_ADDR
61664: GO 61876
61666: LD_INT 24
61668: DOUBLE
61669: EQUAL
61670: IFTRUE 61674
61672: GO 61685
61674: POP
// bc_type := b_control_tower ; 25 :
61675: LD_ADDR_OWVAR 42
61679: PUSH
61680: LD_INT 36
61682: ST_TO_ADDR
61683: GO 61876
61685: LD_INT 25
61687: DOUBLE
61688: EQUAL
61689: IFTRUE 61693
61691: GO 61704
61693: POP
// bc_type := b_breastwork ; 26 :
61694: LD_ADDR_OWVAR 42
61698: PUSH
61699: LD_INT 31
61701: ST_TO_ADDR
61702: GO 61876
61704: LD_INT 26
61706: DOUBLE
61707: EQUAL
61708: IFTRUE 61712
61710: GO 61723
61712: POP
// bc_type := b_bunker ; 27 :
61713: LD_ADDR_OWVAR 42
61717: PUSH
61718: LD_INT 32
61720: ST_TO_ADDR
61721: GO 61876
61723: LD_INT 27
61725: DOUBLE
61726: EQUAL
61727: IFTRUE 61731
61729: GO 61742
61731: POP
// bc_type := b_turret ; 28 :
61732: LD_ADDR_OWVAR 42
61736: PUSH
61737: LD_INT 33
61739: ST_TO_ADDR
61740: GO 61876
61742: LD_INT 28
61744: DOUBLE
61745: EQUAL
61746: IFTRUE 61750
61748: GO 61761
61750: POP
// bc_type := b_armoury ; 29 :
61751: LD_ADDR_OWVAR 42
61755: PUSH
61756: LD_INT 4
61758: ST_TO_ADDR
61759: GO 61876
61761: LD_INT 29
61763: DOUBLE
61764: EQUAL
61765: IFTRUE 61769
61767: GO 61780
61769: POP
// bc_type := b_barracks ; 30 :
61770: LD_ADDR_OWVAR 42
61774: PUSH
61775: LD_INT 5
61777: ST_TO_ADDR
61778: GO 61876
61780: LD_INT 30
61782: DOUBLE
61783: EQUAL
61784: IFTRUE 61788
61786: GO 61799
61788: POP
// bc_type := b_solar_power ; 31 :
61789: LD_ADDR_OWVAR 42
61793: PUSH
61794: LD_INT 27
61796: ST_TO_ADDR
61797: GO 61876
61799: LD_INT 31
61801: DOUBLE
61802: EQUAL
61803: IFTRUE 61807
61805: GO 61818
61807: POP
// bc_type := b_oil_power ; 32 :
61808: LD_ADDR_OWVAR 42
61812: PUSH
61813: LD_INT 26
61815: ST_TO_ADDR
61816: GO 61876
61818: LD_INT 32
61820: DOUBLE
61821: EQUAL
61822: IFTRUE 61826
61824: GO 61837
61826: POP
// bc_type := b_siberite_power ; 33 :
61827: LD_ADDR_OWVAR 42
61831: PUSH
61832: LD_INT 28
61834: ST_TO_ADDR
61835: GO 61876
61837: LD_INT 33
61839: DOUBLE
61840: EQUAL
61841: IFTRUE 61845
61843: GO 61856
61845: POP
// bc_type := b_oil_mine ; 34 :
61846: LD_ADDR_OWVAR 42
61850: PUSH
61851: LD_INT 29
61853: ST_TO_ADDR
61854: GO 61876
61856: LD_INT 34
61858: DOUBLE
61859: EQUAL
61860: IFTRUE 61864
61862: GO 61875
61864: POP
// bc_type := b_siberite_mine ; end ;
61865: LD_ADDR_OWVAR 42
61869: PUSH
61870: LD_INT 30
61872: ST_TO_ADDR
61873: GO 61876
61875: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61876: LD_ADDR_VAR 0 8
61880: PUSH
61881: LD_VAR 0 5
61885: PPUSH
61886: LD_VAR 0 6
61890: PPUSH
61891: LD_VAR 0 3
61895: PPUSH
61896: CALL_OW 47
61900: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61901: LD_OWVAR 42
61905: PUSH
61906: LD_INT 32
61908: PUSH
61909: LD_INT 33
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: IN
61916: IFFALSE 61932
// PlaceWeaponTurret ( b , weapon ) ;
61918: LD_VAR 0 8
61922: PPUSH
61923: LD_VAR 0 4
61927: PPUSH
61928: CALL_OW 431
// end ;
61932: LD_VAR 0 7
61936: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61937: LD_INT 0
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61943: LD_ADDR_VAR 0 4
61947: PUSH
61948: LD_INT 22
61950: PUSH
61951: LD_OWVAR 2
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 30
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 30
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PPUSH
61992: CALL_OW 69
61996: ST_TO_ADDR
// if not tmp then
61997: LD_VAR 0 4
62001: NOT
62002: IFFALSE 62006
// exit ;
62004: GO 62065
// for i in tmp do
62006: LD_ADDR_VAR 0 2
62010: PUSH
62011: LD_VAR 0 4
62015: PUSH
62016: FOR_IN
62017: IFFALSE 62063
// for j = 1 to 3 do
62019: LD_ADDR_VAR 0 3
62023: PUSH
62024: DOUBLE
62025: LD_INT 1
62027: DEC
62028: ST_TO_ADDR
62029: LD_INT 3
62031: PUSH
62032: FOR_TO
62033: IFFALSE 62059
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62035: LD_VAR 0 2
62039: PPUSH
62040: CALL_OW 274
62044: PPUSH
62045: LD_VAR 0 3
62049: PPUSH
62050: LD_INT 99999
62052: PPUSH
62053: CALL_OW 277
62057: GO 62032
62059: POP
62060: POP
62061: GO 62016
62063: POP
62064: POP
// end ;
62065: LD_VAR 0 1
62069: RET
// export function hHackSetLevel10 ; var i , j ; begin
62070: LD_INT 0
62072: PPUSH
62073: PPUSH
62074: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62075: LD_ADDR_VAR 0 2
62079: PUSH
62080: LD_INT 21
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PPUSH
62090: CALL_OW 69
62094: PUSH
62095: FOR_IN
62096: IFFALSE 62148
// if IsSelected ( i ) then
62098: LD_VAR 0 2
62102: PPUSH
62103: CALL_OW 306
62107: IFFALSE 62146
// begin for j := 1 to 4 do
62109: LD_ADDR_VAR 0 3
62113: PUSH
62114: DOUBLE
62115: LD_INT 1
62117: DEC
62118: ST_TO_ADDR
62119: LD_INT 4
62121: PUSH
62122: FOR_TO
62123: IFFALSE 62144
// SetSkill ( i , j , 10 ) ;
62125: LD_VAR 0 2
62129: PPUSH
62130: LD_VAR 0 3
62134: PPUSH
62135: LD_INT 10
62137: PPUSH
62138: CALL_OW 237
62142: GO 62122
62144: POP
62145: POP
// end ;
62146: GO 62095
62148: POP
62149: POP
// end ;
62150: LD_VAR 0 1
62154: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62155: LD_INT 0
62157: PPUSH
62158: PPUSH
62159: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62160: LD_ADDR_VAR 0 2
62164: PUSH
62165: LD_INT 22
62167: PUSH
62168: LD_OWVAR 2
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 21
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PPUSH
62191: CALL_OW 69
62195: PUSH
62196: FOR_IN
62197: IFFALSE 62238
// begin for j := 1 to 4 do
62199: LD_ADDR_VAR 0 3
62203: PUSH
62204: DOUBLE
62205: LD_INT 1
62207: DEC
62208: ST_TO_ADDR
62209: LD_INT 4
62211: PUSH
62212: FOR_TO
62213: IFFALSE 62234
// SetSkill ( i , j , 10 ) ;
62215: LD_VAR 0 2
62219: PPUSH
62220: LD_VAR 0 3
62224: PPUSH
62225: LD_INT 10
62227: PPUSH
62228: CALL_OW 237
62232: GO 62212
62234: POP
62235: POP
// end ;
62236: GO 62196
62238: POP
62239: POP
// end ;
62240: LD_VAR 0 1
62244: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62245: LD_INT 0
62247: PPUSH
// uc_side := your_side ;
62248: LD_ADDR_OWVAR 20
62252: PUSH
62253: LD_OWVAR 2
62257: ST_TO_ADDR
// uc_nation := nation ;
62258: LD_ADDR_OWVAR 21
62262: PUSH
62263: LD_VAR 0 1
62267: ST_TO_ADDR
// InitHc ;
62268: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62272: LD_INT 0
62274: PPUSH
62275: LD_VAR 0 2
62279: PPUSH
62280: LD_VAR 0 3
62284: PPUSH
62285: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62289: LD_VAR 0 4
62293: PPUSH
62294: LD_VAR 0 5
62298: PPUSH
62299: CALL_OW 428
62303: PUSH
62304: LD_INT 0
62306: EQUAL
62307: IFFALSE 62331
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62309: CALL_OW 44
62313: PPUSH
62314: LD_VAR 0 4
62318: PPUSH
62319: LD_VAR 0 5
62323: PPUSH
62324: LD_INT 1
62326: PPUSH
62327: CALL_OW 48
// end ;
62331: LD_VAR 0 6
62335: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62336: LD_INT 0
62338: PPUSH
62339: PPUSH
// uc_side := your_side ;
62340: LD_ADDR_OWVAR 20
62344: PUSH
62345: LD_OWVAR 2
62349: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62350: LD_VAR 0 1
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: LD_INT 3
62363: PUSH
62364: LD_INT 4
62366: PUSH
62367: LD_INT 5
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: IN
62377: IFFALSE 62389
// uc_nation := nation_american else
62379: LD_ADDR_OWVAR 21
62383: PUSH
62384: LD_INT 1
62386: ST_TO_ADDR
62387: GO 62432
// if chassis in [ 11 , 12 , 13 , 14 ] then
62389: LD_VAR 0 1
62393: PUSH
62394: LD_INT 11
62396: PUSH
62397: LD_INT 12
62399: PUSH
62400: LD_INT 13
62402: PUSH
62403: LD_INT 14
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: IN
62412: IFFALSE 62424
// uc_nation := nation_arabian else
62414: LD_ADDR_OWVAR 21
62418: PUSH
62419: LD_INT 2
62421: ST_TO_ADDR
62422: GO 62432
// uc_nation := nation_russian ;
62424: LD_ADDR_OWVAR 21
62428: PUSH
62429: LD_INT 3
62431: ST_TO_ADDR
// vc_chassis := chassis ;
62432: LD_ADDR_OWVAR 37
62436: PUSH
62437: LD_VAR 0 1
62441: ST_TO_ADDR
// vc_engine := engine ;
62442: LD_ADDR_OWVAR 39
62446: PUSH
62447: LD_VAR 0 2
62451: ST_TO_ADDR
// vc_control := control ;
62452: LD_ADDR_OWVAR 38
62456: PUSH
62457: LD_VAR 0 3
62461: ST_TO_ADDR
// vc_weapon := weapon ;
62462: LD_ADDR_OWVAR 40
62466: PUSH
62467: LD_VAR 0 4
62471: ST_TO_ADDR
// un := CreateVehicle ;
62472: LD_ADDR_VAR 0 8
62476: PUSH
62477: CALL_OW 45
62481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62482: LD_VAR 0 8
62486: PPUSH
62487: LD_INT 0
62489: PPUSH
62490: LD_INT 5
62492: PPUSH
62493: CALL_OW 12
62497: PPUSH
62498: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62502: LD_VAR 0 8
62506: PPUSH
62507: LD_VAR 0 5
62511: PPUSH
62512: LD_VAR 0 6
62516: PPUSH
62517: LD_INT 1
62519: PPUSH
62520: CALL_OW 48
// end ;
62524: LD_VAR 0 7
62528: RET
// export hInvincible ; every 1 do
62529: GO 62531
62531: DISABLE
// hInvincible := [ ] ;
62532: LD_ADDR_EXP 85
62536: PUSH
62537: EMPTY
62538: ST_TO_ADDR
62539: END
// every 10 do var i ;
62540: GO 62542
62542: DISABLE
62543: LD_INT 0
62545: PPUSH
// begin enable ;
62546: ENABLE
// if not hInvincible then
62547: LD_EXP 85
62551: NOT
62552: IFFALSE 62556
// exit ;
62554: GO 62600
// for i in hInvincible do
62556: LD_ADDR_VAR 0 1
62560: PUSH
62561: LD_EXP 85
62565: PUSH
62566: FOR_IN
62567: IFFALSE 62598
// if GetLives ( i ) < 1000 then
62569: LD_VAR 0 1
62573: PPUSH
62574: CALL_OW 256
62578: PUSH
62579: LD_INT 1000
62581: LESS
62582: IFFALSE 62596
// SetLives ( i , 1000 ) ;
62584: LD_VAR 0 1
62588: PPUSH
62589: LD_INT 1000
62591: PPUSH
62592: CALL_OW 234
62596: GO 62566
62598: POP
62599: POP
// end ;
62600: PPOPN 1
62602: END
// export function hHackInvincible ; var i ; begin
62603: LD_INT 0
62605: PPUSH
62606: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62607: LD_ADDR_VAR 0 2
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: LD_INT 21
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 21
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: LIST
62639: PPUSH
62640: CALL_OW 69
62644: PUSH
62645: FOR_IN
62646: IFFALSE 62707
// if IsSelected ( i ) then
62648: LD_VAR 0 2
62652: PPUSH
62653: CALL_OW 306
62657: IFFALSE 62705
// begin if i in hInvincible then
62659: LD_VAR 0 2
62663: PUSH
62664: LD_EXP 85
62668: IN
62669: IFFALSE 62689
// hInvincible := hInvincible diff i else
62671: LD_ADDR_EXP 85
62675: PUSH
62676: LD_EXP 85
62680: PUSH
62681: LD_VAR 0 2
62685: DIFF
62686: ST_TO_ADDR
62687: GO 62705
// hInvincible := hInvincible union i ;
62689: LD_ADDR_EXP 85
62693: PUSH
62694: LD_EXP 85
62698: PUSH
62699: LD_VAR 0 2
62703: UNION
62704: ST_TO_ADDR
// end ;
62705: GO 62645
62707: POP
62708: POP
// end ;
62709: LD_VAR 0 1
62713: RET
// export function hHackInvisible ; var i , j ; begin
62714: LD_INT 0
62716: PPUSH
62717: PPUSH
62718: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62719: LD_ADDR_VAR 0 2
62723: PUSH
62724: LD_INT 21
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PPUSH
62734: CALL_OW 69
62738: PUSH
62739: FOR_IN
62740: IFFALSE 62764
// if IsSelected ( i ) then
62742: LD_VAR 0 2
62746: PPUSH
62747: CALL_OW 306
62751: IFFALSE 62762
// ComForceInvisible ( i ) ;
62753: LD_VAR 0 2
62757: PPUSH
62758: CALL_OW 496
62762: GO 62739
62764: POP
62765: POP
// end ;
62766: LD_VAR 0 1
62770: RET
// export function hHackChangeYourSide ; begin
62771: LD_INT 0
62773: PPUSH
// if your_side = 8 then
62774: LD_OWVAR 2
62778: PUSH
62779: LD_INT 8
62781: EQUAL
62782: IFFALSE 62794
// your_side := 0 else
62784: LD_ADDR_OWVAR 2
62788: PUSH
62789: LD_INT 0
62791: ST_TO_ADDR
62792: GO 62808
// your_side := your_side + 1 ;
62794: LD_ADDR_OWVAR 2
62798: PUSH
62799: LD_OWVAR 2
62803: PUSH
62804: LD_INT 1
62806: PLUS
62807: ST_TO_ADDR
// end ;
62808: LD_VAR 0 1
62812: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62813: LD_INT 0
62815: PPUSH
62816: PPUSH
62817: PPUSH
// for i in all_units do
62818: LD_ADDR_VAR 0 2
62822: PUSH
62823: LD_OWVAR 3
62827: PUSH
62828: FOR_IN
62829: IFFALSE 62907
// if IsSelected ( i ) then
62831: LD_VAR 0 2
62835: PPUSH
62836: CALL_OW 306
62840: IFFALSE 62905
// begin j := GetSide ( i ) ;
62842: LD_ADDR_VAR 0 3
62846: PUSH
62847: LD_VAR 0 2
62851: PPUSH
62852: CALL_OW 255
62856: ST_TO_ADDR
// if j = 8 then
62857: LD_VAR 0 3
62861: PUSH
62862: LD_INT 8
62864: EQUAL
62865: IFFALSE 62877
// j := 0 else
62867: LD_ADDR_VAR 0 3
62871: PUSH
62872: LD_INT 0
62874: ST_TO_ADDR
62875: GO 62891
// j := j + 1 ;
62877: LD_ADDR_VAR 0 3
62881: PUSH
62882: LD_VAR 0 3
62886: PUSH
62887: LD_INT 1
62889: PLUS
62890: ST_TO_ADDR
// SetSide ( i , j ) ;
62891: LD_VAR 0 2
62895: PPUSH
62896: LD_VAR 0 3
62900: PPUSH
62901: CALL_OW 235
// end ;
62905: GO 62828
62907: POP
62908: POP
// end ;
62909: LD_VAR 0 1
62913: RET
// export function hHackFog ; begin
62914: LD_INT 0
62916: PPUSH
// FogOff ( true ) ;
62917: LD_INT 1
62919: PPUSH
62920: CALL_OW 344
// end ;
62924: LD_VAR 0 1
62928: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62929: LD_INT 0
62931: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62932: LD_VAR 0 1
62936: PPUSH
62937: LD_VAR 0 2
62941: PPUSH
62942: LD_VAR 0 3
62946: PPUSH
62947: LD_INT 1
62949: PPUSH
62950: LD_INT 1
62952: PPUSH
62953: CALL_OW 483
// CenterOnXY ( x , y ) ;
62957: LD_VAR 0 2
62961: PPUSH
62962: LD_VAR 0 3
62966: PPUSH
62967: CALL_OW 84
// end ;
62971: LD_VAR 0 4
62975: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62976: LD_INT 0
62978: PPUSH
62979: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62980: LD_VAR 0 1
62984: NOT
62985: IFTRUE 63004
62987: PUSH
62988: LD_VAR 0 2
62992: PPUSH
62993: LD_VAR 0 3
62997: PPUSH
62998: CALL_OW 488
63002: NOT
63003: OR
63004: IFTRUE 63039
63006: PUSH
63007: LD_VAR 0 1
63011: PPUSH
63012: CALL_OW 266
63016: PUSH
63017: LD_INT 3
63019: NONEQUAL
63020: IFFALSE 63038
63022: PUSH
63023: LD_VAR 0 1
63027: PPUSH
63028: CALL_OW 247
63032: PUSH
63033: LD_INT 1
63035: EQUAL
63036: NOT
63037: AND
63038: OR
63039: IFFALSE 63043
// exit ;
63041: GO 63325
// if GetType ( factory ) = unit_human then
63043: LD_VAR 0 1
63047: PPUSH
63048: CALL_OW 247
63052: PUSH
63053: LD_INT 1
63055: EQUAL
63056: IFFALSE 63073
// factory := IsInUnit ( factory ) ;
63058: LD_ADDR_VAR 0 1
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 310
63072: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63073: LD_VAR 0 1
63077: PPUSH
63078: CALL_OW 266
63082: PUSH
63083: LD_INT 3
63085: NONEQUAL
63086: IFFALSE 63090
// exit ;
63088: GO 63325
// for i := 1 to Count ( factoryWaypoints ) do
63090: LD_ADDR_VAR 0 5
63094: PUSH
63095: DOUBLE
63096: LD_INT 1
63098: DEC
63099: ST_TO_ADDR
63100: LD_EXP 86
63104: PPUSH
63105: CALL 6973 0 1
63109: PUSH
63110: FOR_TO
63111: IFFALSE 63273
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63113: LD_VAR 0 2
63117: PPUSH
63118: LD_VAR 0 3
63122: PPUSH
63123: CALL_OW 428
63127: PUSH
63128: LD_EXP 86
63132: PUSH
63133: LD_VAR 0 5
63137: ARRAY
63138: PUSH
63139: LD_INT 2
63141: ARRAY
63142: EQUAL
63143: IFFALSE 63175
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63145: LD_ADDR_EXP 86
63149: PUSH
63150: LD_EXP 86
63154: PPUSH
63155: LD_VAR 0 5
63159: PPUSH
63160: CALL_OW 3
63164: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63165: CALL 63330 0 0
// exit ;
63169: POP
63170: POP
63171: GO 63325
// end else
63173: GO 63271
// if factory = factoryWaypoints [ i ] [ 2 ] then
63175: LD_VAR 0 1
63179: PUSH
63180: LD_EXP 86
63184: PUSH
63185: LD_VAR 0 5
63189: ARRAY
63190: PUSH
63191: LD_INT 2
63193: ARRAY
63194: EQUAL
63195: IFFALSE 63271
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63197: LD_ADDR_EXP 86
63201: PUSH
63202: LD_EXP 86
63206: PPUSH
63207: LD_VAR 0 5
63211: PPUSH
63212: CALL_OW 3
63216: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63217: LD_ADDR_EXP 86
63221: PUSH
63222: LD_EXP 86
63226: PPUSH
63227: LD_VAR 0 1
63231: PPUSH
63232: CALL_OW 255
63236: PUSH
63237: LD_VAR 0 1
63241: PUSH
63242: LD_VAR 0 2
63246: PUSH
63247: LD_VAR 0 3
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: PPUSH
63258: CALL 42905 0 2
63262: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63263: CALL 63330 0 0
// exit ;
63267: POP
63268: POP
63269: GO 63325
// end ; end ;
63271: GO 63110
63273: POP
63274: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63275: LD_ADDR_EXP 86
63279: PUSH
63280: LD_EXP 86
63284: PPUSH
63285: LD_VAR 0 1
63289: PPUSH
63290: CALL_OW 255
63294: PUSH
63295: LD_VAR 0 1
63299: PUSH
63300: LD_VAR 0 2
63304: PUSH
63305: LD_VAR 0 3
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: PPUSH
63316: CALL 42905 0 2
63320: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63321: CALL 63330 0 0
// end ;
63325: LD_VAR 0 4
63329: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63330: LD_INT 0
63332: PPUSH
63333: PPUSH
63334: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63335: LD_STRING resetFactoryWaypoint();
63337: PPUSH
63338: CALL_OW 559
// if factoryWaypoints then
63342: LD_EXP 86
63346: IFFALSE 63467
// begin list := factoryWaypoints ;
63348: LD_ADDR_VAR 0 3
63352: PUSH
63353: LD_EXP 86
63357: ST_TO_ADDR
// for i := 1 to list do
63358: LD_ADDR_VAR 0 2
63362: PUSH
63363: DOUBLE
63364: LD_INT 1
63366: DEC
63367: ST_TO_ADDR
63368: LD_VAR 0 3
63372: PUSH
63373: FOR_TO
63374: IFFALSE 63465
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63376: LD_STRING setFactoryWaypointXY(
63378: PUSH
63379: LD_VAR 0 3
63383: PUSH
63384: LD_VAR 0 2
63388: ARRAY
63389: PUSH
63390: LD_INT 1
63392: ARRAY
63393: STR
63394: PUSH
63395: LD_STRING ,
63397: STR
63398: PUSH
63399: LD_VAR 0 3
63403: PUSH
63404: LD_VAR 0 2
63408: ARRAY
63409: PUSH
63410: LD_INT 2
63412: ARRAY
63413: STR
63414: PUSH
63415: LD_STRING ,
63417: STR
63418: PUSH
63419: LD_VAR 0 3
63423: PUSH
63424: LD_VAR 0 2
63428: ARRAY
63429: PUSH
63430: LD_INT 3
63432: ARRAY
63433: STR
63434: PUSH
63435: LD_STRING ,
63437: STR
63438: PUSH
63439: LD_VAR 0 3
63443: PUSH
63444: LD_VAR 0 2
63448: ARRAY
63449: PUSH
63450: LD_INT 4
63452: ARRAY
63453: STR
63454: PUSH
63455: LD_STRING )
63457: STR
63458: PPUSH
63459: CALL_OW 559
63463: GO 63373
63465: POP
63466: POP
// end ; end ;
63467: LD_VAR 0 1
63471: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63472: LD_INT 0
63474: PPUSH
// if HexInfo ( x , y ) = warehouse then
63475: LD_VAR 0 2
63479: PPUSH
63480: LD_VAR 0 3
63484: PPUSH
63485: CALL_OW 428
63489: PUSH
63490: LD_VAR 0 1
63494: EQUAL
63495: IFFALSE 63522
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63497: LD_ADDR_EXP 88
63501: PUSH
63502: LD_EXP 88
63506: PPUSH
63507: LD_VAR 0 1
63511: PPUSH
63512: LD_INT 0
63514: PPUSH
63515: CALL_OW 1
63519: ST_TO_ADDR
63520: GO 63573
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63522: LD_ADDR_EXP 88
63526: PUSH
63527: LD_EXP 88
63531: PPUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: LD_VAR 0 1
63541: PPUSH
63542: CALL_OW 255
63546: PUSH
63547: LD_VAR 0 1
63551: PUSH
63552: LD_VAR 0 2
63556: PUSH
63557: LD_VAR 0 3
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: PPUSH
63568: CALL_OW 1
63572: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63573: CALL 63582 0 0
// end ;
63577: LD_VAR 0 4
63581: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63582: LD_INT 0
63584: PPUSH
63585: PPUSH
63586: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63587: LD_STRING resetWarehouseGatheringPoints();
63589: PPUSH
63590: CALL_OW 559
// if warehouseGatheringPoints then
63594: LD_EXP 88
63598: IFFALSE 63724
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63600: LD_ADDR_VAR 0 3
63604: PUSH
63605: LD_EXP 88
63609: PPUSH
63610: CALL 46839 0 1
63614: ST_TO_ADDR
// for i := 1 to list do
63615: LD_ADDR_VAR 0 2
63619: PUSH
63620: DOUBLE
63621: LD_INT 1
63623: DEC
63624: ST_TO_ADDR
63625: LD_VAR 0 3
63629: PUSH
63630: FOR_TO
63631: IFFALSE 63722
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63633: LD_STRING setWarehouseGatheringPointXY(
63635: PUSH
63636: LD_VAR 0 3
63640: PUSH
63641: LD_VAR 0 2
63645: ARRAY
63646: PUSH
63647: LD_INT 1
63649: ARRAY
63650: STR
63651: PUSH
63652: LD_STRING ,
63654: STR
63655: PUSH
63656: LD_VAR 0 3
63660: PUSH
63661: LD_VAR 0 2
63665: ARRAY
63666: PUSH
63667: LD_INT 2
63669: ARRAY
63670: STR
63671: PUSH
63672: LD_STRING ,
63674: STR
63675: PUSH
63676: LD_VAR 0 3
63680: PUSH
63681: LD_VAR 0 2
63685: ARRAY
63686: PUSH
63687: LD_INT 3
63689: ARRAY
63690: STR
63691: PUSH
63692: LD_STRING ,
63694: STR
63695: PUSH
63696: LD_VAR 0 3
63700: PUSH
63701: LD_VAR 0 2
63705: ARRAY
63706: PUSH
63707: LD_INT 4
63709: ARRAY
63710: STR
63711: PUSH
63712: LD_STRING )
63714: STR
63715: PPUSH
63716: CALL_OW 559
63720: GO 63630
63722: POP
63723: POP
// end ; end ;
63724: LD_VAR 0 1
63728: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63729: LD_EXP 88
63733: IFFALSE 64428
63735: GO 63737
63737: DISABLE
63738: LD_INT 0
63740: PPUSH
63741: PPUSH
63742: PPUSH
63743: PPUSH
63744: PPUSH
63745: PPUSH
63746: PPUSH
63747: PPUSH
63748: PPUSH
// begin enable ;
63749: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63750: LD_ADDR_VAR 0 3
63754: PUSH
63755: LD_EXP 88
63759: PPUSH
63760: CALL 46839 0 1
63764: ST_TO_ADDR
// if not list then
63765: LD_VAR 0 3
63769: NOT
63770: IFFALSE 63774
// exit ;
63772: GO 64428
// for i := 1 to list do
63774: LD_ADDR_VAR 0 1
63778: PUSH
63779: DOUBLE
63780: LD_INT 1
63782: DEC
63783: ST_TO_ADDR
63784: LD_VAR 0 3
63788: PUSH
63789: FOR_TO
63790: IFFALSE 64426
// begin depot := list [ i ] [ 2 ] ;
63792: LD_ADDR_VAR 0 8
63796: PUSH
63797: LD_VAR 0 3
63801: PUSH
63802: LD_VAR 0 1
63806: ARRAY
63807: PUSH
63808: LD_INT 2
63810: ARRAY
63811: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63812: LD_ADDR_VAR 0 5
63816: PUSH
63817: LD_VAR 0 3
63821: PUSH
63822: LD_VAR 0 1
63826: ARRAY
63827: PUSH
63828: LD_INT 1
63830: ARRAY
63831: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63832: LD_VAR 0 8
63836: PPUSH
63837: CALL_OW 301
63841: IFTRUE 63860
63843: PUSH
63844: LD_VAR 0 5
63848: PUSH
63849: LD_VAR 0 8
63853: PPUSH
63854: CALL_OW 255
63858: NONEQUAL
63859: OR
63860: IFFALSE 63889
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63862: LD_ADDR_EXP 88
63866: PUSH
63867: LD_EXP 88
63871: PPUSH
63872: LD_VAR 0 8
63876: PPUSH
63877: LD_INT 0
63879: PPUSH
63880: CALL_OW 1
63884: ST_TO_ADDR
// exit ;
63885: POP
63886: POP
63887: GO 64428
// end ; x := list [ i ] [ 3 ] ;
63889: LD_ADDR_VAR 0 6
63893: PUSH
63894: LD_VAR 0 3
63898: PUSH
63899: LD_VAR 0 1
63903: ARRAY
63904: PUSH
63905: LD_INT 3
63907: ARRAY
63908: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63909: LD_ADDR_VAR 0 7
63913: PUSH
63914: LD_VAR 0 3
63918: PUSH
63919: LD_VAR 0 1
63923: ARRAY
63924: PUSH
63925: LD_INT 4
63927: ARRAY
63928: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63929: LD_ADDR_VAR 0 9
63933: PUSH
63934: LD_VAR 0 6
63938: PPUSH
63939: LD_VAR 0 7
63943: PPUSH
63944: LD_INT 16
63946: PPUSH
63947: CALL 45413 0 3
63951: ST_TO_ADDR
// if not cratesNearbyPoint then
63952: LD_VAR 0 9
63956: NOT
63957: IFFALSE 63963
// exit ;
63959: POP
63960: POP
63961: GO 64428
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63963: LD_ADDR_VAR 0 4
63967: PUSH
63968: LD_INT 22
63970: PUSH
63971: LD_VAR 0 5
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: LD_INT 60
63985: PUSH
63986: EMPTY
63987: LIST
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 91
63995: PUSH
63996: LD_VAR 0 8
64000: PUSH
64001: LD_INT 6
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 25
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 25
64024: PUSH
64025: LD_INT 16
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: PPUSH
64043: CALL_OW 69
64047: PUSH
64048: LD_VAR 0 8
64052: PPUSH
64053: CALL_OW 313
64057: PPUSH
64058: LD_INT 3
64060: PUSH
64061: LD_INT 60
64063: PUSH
64064: EMPTY
64065: LIST
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: LD_INT 25
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 25
64086: PUSH
64087: LD_INT 16
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PPUSH
64103: CALL_OW 72
64107: UNION
64108: ST_TO_ADDR
// if tmp then
64109: LD_VAR 0 4
64113: IFFALSE 64193
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64115: LD_ADDR_VAR 0 4
64119: PUSH
64120: LD_VAR 0 4
64124: PPUSH
64125: LD_INT 3
64127: PPUSH
64128: CALL 43220 0 2
64132: ST_TO_ADDR
// for j in tmp do
64133: LD_ADDR_VAR 0 2
64137: PUSH
64138: LD_VAR 0 4
64142: PUSH
64143: FOR_IN
64144: IFFALSE 64187
// begin if IsInUnit ( j ) then
64146: LD_VAR 0 2
64150: PPUSH
64151: CALL_OW 310
64155: IFFALSE 64166
// ComExit ( j ) ;
64157: LD_VAR 0 2
64161: PPUSH
64162: CALL 43303 0 1
// AddComCollect ( j , x , y ) ;
64166: LD_VAR 0 2
64170: PPUSH
64171: LD_VAR 0 6
64175: PPUSH
64176: LD_VAR 0 7
64180: PPUSH
64181: CALL_OW 177
// end ;
64185: GO 64143
64187: POP
64188: POP
// exit ;
64189: POP
64190: POP
64191: GO 64428
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64193: LD_ADDR_VAR 0 4
64197: PUSH
64198: LD_INT 22
64200: PUSH
64201: LD_VAR 0 5
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 91
64212: PUSH
64213: LD_VAR 0 8
64217: PUSH
64218: LD_INT 8
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: LD_INT 34
64231: PUSH
64232: LD_INT 12
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 34
64241: PUSH
64242: LD_INT 51
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 34
64251: PUSH
64252: LD_INT 32
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 34
64261: PUSH
64262: LD_INT 89
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: PPUSH
64281: CALL_OW 69
64285: ST_TO_ADDR
// if tmp then
64286: LD_VAR 0 4
64290: IFFALSE 64424
// begin for j in tmp do
64292: LD_ADDR_VAR 0 2
64296: PUSH
64297: LD_VAR 0 4
64301: PUSH
64302: FOR_IN
64303: IFFALSE 64422
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64305: LD_VAR 0 2
64309: PPUSH
64310: CALL_OW 262
64314: PUSH
64315: LD_INT 3
64317: EQUAL
64318: IFTRUE 64335
64320: PUSH
64321: LD_VAR 0 2
64325: PPUSH
64326: CALL_OW 261
64330: PUSH
64331: LD_INT 20
64333: GREATER
64334: OR
64335: IFFALSE 64349
64337: PUSH
64338: LD_VAR 0 2
64342: PPUSH
64343: CALL_OW 314
64347: NOT
64348: AND
64349: IFFALSE 64379
64351: PUSH
64352: LD_VAR 0 2
64356: PPUSH
64357: CALL_OW 263
64361: PUSH
64362: LD_INT 1
64364: NONEQUAL
64365: IFTRUE 64378
64367: PUSH
64368: LD_VAR 0 2
64372: PPUSH
64373: CALL_OW 311
64377: OR
64378: AND
64379: IFFALSE 64420
// begin ComCollect ( j , x , y ) ;
64381: LD_VAR 0 2
64385: PPUSH
64386: LD_VAR 0 6
64390: PPUSH
64391: LD_VAR 0 7
64395: PPUSH
64396: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64400: LD_VAR 0 2
64404: PPUSH
64405: LD_VAR 0 8
64409: PPUSH
64410: CALL_OW 172
// exit ;
64414: POP
64415: POP
64416: POP
64417: POP
64418: GO 64428
// end ;
64420: GO 64302
64422: POP
64423: POP
// end ; end ;
64424: GO 63789
64426: POP
64427: POP
// end ; end_of_file
64428: PPOPN 9
64430: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64431: LD_VAR 0 1
64435: PUSH
64436: LD_INT 200
64438: DOUBLE
64439: GREATEREQUAL
64440: IFFALSE 64448
64442: LD_INT 299
64444: DOUBLE
64445: LESSEQUAL
64446: IFTRUE 64450
64448: GO 64482
64450: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64451: LD_VAR 0 1
64455: PPUSH
64456: LD_VAR 0 2
64460: PPUSH
64461: LD_VAR 0 3
64465: PPUSH
64466: LD_VAR 0 4
64470: PPUSH
64471: LD_VAR 0 5
64475: PPUSH
64476: CALL 65263 0 5
64480: GO 64559
64482: LD_INT 300
64484: DOUBLE
64485: GREATEREQUAL
64486: IFFALSE 64494
64488: LD_INT 399
64490: DOUBLE
64491: LESSEQUAL
64492: IFTRUE 64496
64494: GO 64558
64496: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64497: LD_VAR 0 1
64501: PPUSH
64502: LD_VAR 0 2
64506: PPUSH
64507: LD_VAR 0 3
64511: PPUSH
64512: LD_VAR 0 4
64516: PPUSH
64517: LD_VAR 0 5
64521: PPUSH
64522: LD_VAR 0 6
64526: PPUSH
64527: LD_VAR 0 7
64531: PPUSH
64532: LD_VAR 0 8
64536: PPUSH
64537: LD_VAR 0 9
64541: PPUSH
64542: LD_VAR 0 10
64546: PPUSH
64547: LD_VAR 0 11
64551: PPUSH
64552: CALL 60984 0 11
64556: GO 64559
64558: POP
// end ;
64559: PPOPN 11
64561: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64562: LD_VAR 0 1
64566: PPUSH
64567: LD_VAR 0 2
64571: PPUSH
64572: LD_VAR 0 3
64576: PPUSH
64577: LD_VAR 0 4
64581: PPUSH
64582: LD_VAR 0 5
64586: PPUSH
64587: CALL 64644 0 5
// end ; end_of_file
64591: PPOPN 5
64593: END
// export function SOS_UnitDestroyed ( un ) ; begin
64594: LD_INT 0
64596: PPUSH
// ComRadiation ( un ) ;
64597: LD_VAR 0 1
64601: PPUSH
64602: CALL 65683 0 1
// end ;
64606: LD_VAR 0 2
64610: RET
// export function SOS_UnitKamikazed ( un ) ; begin
64611: LD_INT 0
64613: PPUSH
// ComRadiation ( un ) ;
64614: LD_VAR 0 1
64618: PPUSH
64619: CALL 65683 0 1
// end ;
64623: LD_VAR 0 2
64627: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64628: LD_INT 0
64630: PPUSH
// end ;
64631: LD_VAR 0 4
64635: RET
// export function SOS_Command ( cmd ) ; begin
64636: LD_INT 0
64638: PPUSH
// end ;
64639: LD_VAR 0 2
64643: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
64644: LD_INT 0
64646: PPUSH
// end ;
64647: LD_VAR 0 6
64651: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
64652: LD_INT 0
64654: PPUSH
64655: PPUSH
64656: PPUSH
64657: PPUSH
// if not vehicle or not factory then
64658: LD_VAR 0 1
64662: NOT
64663: IFTRUE 64672
64665: PUSH
64666: LD_VAR 0 2
64670: NOT
64671: OR
64672: IFFALSE 64676
// exit ;
64674: GO 65258
// if not factoryWaypoints then
64676: LD_EXP 86
64680: NOT
64681: IFFALSE 64685
// exit ;
64683: GO 65258
// for i := 1 to Count ( factoryWaypoints ) do
64685: LD_ADDR_VAR 0 4
64689: PUSH
64690: DOUBLE
64691: LD_INT 1
64693: DEC
64694: ST_TO_ADDR
64695: LD_EXP 86
64699: PPUSH
64700: CALL 6973 0 1
64704: PUSH
64705: FOR_TO
64706: IFFALSE 65256
// if factoryWaypoints [ i ] [ 2 ] = factory then
64708: LD_EXP 86
64712: PUSH
64713: LD_VAR 0 4
64717: ARRAY
64718: PUSH
64719: LD_INT 2
64721: ARRAY
64722: PUSH
64723: LD_VAR 0 2
64727: EQUAL
64728: IFFALSE 65254
// begin if GetControl ( vehicle ) = control_manual then
64730: LD_VAR 0 1
64734: PPUSH
64735: CALL_OW 263
64739: PUSH
64740: LD_INT 1
64742: EQUAL
64743: IFFALSE 65107
// begin driver := IsDrivenBy ( vehicle ) ;
64745: LD_ADDR_VAR 0 5
64749: PUSH
64750: LD_VAR 0 1
64754: PPUSH
64755: CALL_OW 311
64759: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
64760: LD_VAR 0 5
64764: PUSH
64765: LD_EXP 87
64769: IN
64770: IFTRUE 64784
64772: PUSH
64773: LD_VAR 0 1
64777: PUSH
64778: LD_EXP 87
64782: IN
64783: OR
64784: IFFALSE 64790
// exit ;
64786: POP
64787: POP
64788: GO 65258
// if not HasTask ( driver ) then
64790: LD_VAR 0 5
64794: PPUSH
64795: CALL_OW 314
64799: NOT
64800: IFFALSE 65105
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
64802: LD_ADDR_EXP 87
64806: PUSH
64807: LD_EXP 87
64811: PPUSH
64812: LD_VAR 0 5
64816: PPUSH
64817: CALL 42905 0 2
64821: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
64822: LD_ADDR_EXP 87
64826: PUSH
64827: LD_EXP 87
64831: PPUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: CALL 42905 0 2
64841: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64842: LD_ADDR_VAR 0 6
64846: PUSH
64847: LD_EXP 86
64851: PUSH
64852: LD_VAR 0 4
64856: ARRAY
64857: PUSH
64858: LD_INT 3
64860: ARRAY
64861: PPUSH
64862: LD_EXP 86
64866: PUSH
64867: LD_VAR 0 4
64871: ARRAY
64872: PUSH
64873: LD_INT 4
64875: ARRAY
64876: PPUSH
64877: CALL_OW 428
64881: ST_TO_ADDR
// if hex then
64882: LD_VAR 0 6
64886: IFFALSE 64904
// ComMoveUnit ( driver , hex ) else
64888: LD_VAR 0 5
64892: PPUSH
64893: LD_VAR 0 6
64897: PPUSH
64898: CALL_OW 112
64902: GO 64988
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
64904: LD_VAR 0 1
64908: PPUSH
64909: LD_EXP 86
64913: PUSH
64914: LD_VAR 0 4
64918: ARRAY
64919: PUSH
64920: LD_INT 3
64922: ARRAY
64923: PPUSH
64924: LD_EXP 86
64928: PUSH
64929: LD_VAR 0 4
64933: ARRAY
64934: PUSH
64935: LD_INT 4
64937: ARRAY
64938: PPUSH
64939: CALL_OW 297
64943: PUSH
64944: LD_INT 0
64946: GREATER
64947: IFFALSE 64988
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64949: LD_VAR 0 5
64953: PPUSH
64954: LD_EXP 86
64958: PUSH
64959: LD_VAR 0 4
64963: ARRAY
64964: PUSH
64965: LD_INT 3
64967: ARRAY
64968: PPUSH
64969: LD_EXP 86
64973: PUSH
64974: LD_VAR 0 4
64978: ARRAY
64979: PUSH
64980: LD_INT 4
64982: ARRAY
64983: PPUSH
64984: CALL_OW 111
// AddComExitVehicle ( driver ) ;
64988: LD_VAR 0 5
64992: PPUSH
64993: CALL_OW 181
// if Multiplayer then
64997: LD_OWVAR 4
65001: IFFALSE 65050
// begin repeat wait ( 10 ) ;
65003: LD_INT 10
65005: PPUSH
65006: CALL_OW 67
// until not IsInUnit ( driver ) ;
65010: LD_VAR 0 5
65014: PPUSH
65015: CALL_OW 310
65019: NOT
65020: IFFALSE 65003
// if not HasTask ( driver ) then
65022: LD_VAR 0 5
65026: PPUSH
65027: CALL_OW 314
65031: NOT
65032: IFFALSE 65048
// ComEnterUnit ( driver , factory ) ;
65034: LD_VAR 0 5
65038: PPUSH
65039: LD_VAR 0 2
65043: PPUSH
65044: CALL_OW 120
// end else
65048: GO 65064
// AddComEnterUnit ( driver , factory ) ;
65050: LD_VAR 0 5
65054: PPUSH
65055: LD_VAR 0 2
65059: PPUSH
65060: CALL_OW 180
// wait ( 0 0$1 ) ;
65064: LD_INT 35
65066: PPUSH
65067: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
65071: LD_ADDR_EXP 87
65075: PUSH
65076: LD_EXP 87
65080: PUSH
65081: LD_VAR 0 5
65085: DIFF
65086: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
65087: LD_ADDR_EXP 87
65091: PUSH
65092: LD_EXP 87
65096: PUSH
65097: LD_VAR 0 1
65101: DIFF
65102: ST_TO_ADDR
// break ;
65103: GO 65256
// end ; end else
65105: GO 65254
// if GetControl ( vehicle ) = control_remote then
65107: LD_VAR 0 1
65111: PPUSH
65112: CALL_OW 263
65116: PUSH
65117: LD_INT 2
65119: EQUAL
65120: IFFALSE 65206
// begin wait ( 0 0$2 ) ;
65122: LD_INT 70
65124: PPUSH
65125: CALL_OW 67
// repeat wait ( 10 ) ;
65129: LD_INT 10
65131: PPUSH
65132: CALL_OW 67
// Connect ( vehicle ) ;
65136: LD_VAR 0 1
65140: PPUSH
65141: CALL 13217 0 1
// until IsControledBy ( vehicle ) ;
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 312
65154: IFFALSE 65129
// wait ( 10 ) ;
65156: LD_INT 10
65158: PPUSH
65159: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65163: LD_VAR 0 1
65167: PPUSH
65168: LD_EXP 86
65172: PUSH
65173: LD_VAR 0 4
65177: ARRAY
65178: PUSH
65179: LD_INT 3
65181: ARRAY
65182: PPUSH
65183: LD_EXP 86
65187: PUSH
65188: LD_VAR 0 4
65192: ARRAY
65193: PUSH
65194: LD_INT 4
65196: ARRAY
65197: PPUSH
65198: CALL_OW 111
// break ;
65202: GO 65256
// end else
65204: GO 65254
// begin wait ( 0 0$3 ) ;
65206: LD_INT 105
65208: PPUSH
65209: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65213: LD_VAR 0 1
65217: PPUSH
65218: LD_EXP 86
65222: PUSH
65223: LD_VAR 0 4
65227: ARRAY
65228: PUSH
65229: LD_INT 3
65231: ARRAY
65232: PPUSH
65233: LD_EXP 86
65237: PUSH
65238: LD_VAR 0 4
65242: ARRAY
65243: PUSH
65244: LD_INT 4
65246: ARRAY
65247: PPUSH
65248: CALL_OW 111
// break ;
65252: GO 65256
// end ; end ;
65254: GO 64705
65256: POP
65257: POP
// end ;
65258: LD_VAR 0 3
65262: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65263: LD_INT 0
65265: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65266: LD_VAR 0 1
65270: PUSH
65271: LD_INT 250
65273: EQUAL
65274: IFFALSE 65291
65276: PUSH
65277: LD_VAR 0 2
65281: PPUSH
65282: CALL_OW 264
65286: PUSH
65287: LD_INT 81
65289: EQUAL
65290: AND
65291: IFFALSE 65312
// MinerPlaceMine ( unit , x , y ) ;
65293: LD_VAR 0 2
65297: PPUSH
65298: LD_VAR 0 4
65302: PPUSH
65303: LD_VAR 0 5
65307: PPUSH
65308: CALL 68444 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65312: LD_VAR 0 1
65316: PUSH
65317: LD_INT 251
65319: EQUAL
65320: IFFALSE 65337
65322: PUSH
65323: LD_VAR 0 2
65327: PPUSH
65328: CALL_OW 264
65332: PUSH
65333: LD_INT 81
65335: EQUAL
65336: AND
65337: IFFALSE 65358
// MinerDetonateMine ( unit , x , y ) ;
65339: LD_VAR 0 2
65343: PPUSH
65344: LD_VAR 0 4
65348: PPUSH
65349: LD_VAR 0 5
65353: PPUSH
65354: CALL 68723 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65358: LD_VAR 0 1
65362: PUSH
65363: LD_INT 252
65365: EQUAL
65366: IFFALSE 65383
65368: PUSH
65369: LD_VAR 0 2
65373: PPUSH
65374: CALL_OW 264
65378: PUSH
65379: LD_INT 81
65381: EQUAL
65382: AND
65383: IFFALSE 65404
// MinerCreateMinefield ( unit , x , y ) ;
65385: LD_VAR 0 2
65389: PPUSH
65390: LD_VAR 0 4
65394: PPUSH
65395: LD_VAR 0 5
65399: PPUSH
65400: CALL 69142 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65404: LD_VAR 0 1
65408: PUSH
65409: LD_INT 253
65411: EQUAL
65412: IFFALSE 65429
65414: PUSH
65415: LD_VAR 0 2
65419: PPUSH
65420: CALL_OW 257
65424: PUSH
65425: LD_INT 5
65427: EQUAL
65428: AND
65429: IFFALSE 65450
// ComBinocular ( unit , x , y ) ;
65431: LD_VAR 0 2
65435: PPUSH
65436: LD_VAR 0 4
65440: PPUSH
65441: LD_VAR 0 5
65445: PPUSH
65446: CALL 69517 0 3
// if selectedUnit then
65450: LD_VAR 0 3
65454: IFFALSE 65514
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65456: LD_VAR 0 1
65460: PUSH
65461: LD_INT 254
65463: EQUAL
65464: IFFALSE 65481
65466: PUSH
65467: LD_VAR 0 2
65471: PPUSH
65472: CALL_OW 264
65476: PUSH
65477: LD_INT 99
65479: EQUAL
65480: AND
65481: IFFALSE 65498
65483: PUSH
65484: LD_VAR 0 3
65488: PPUSH
65489: CALL_OW 263
65493: PUSH
65494: LD_INT 3
65496: EQUAL
65497: AND
65498: IFFALSE 65514
// HackDestroyVehicle ( unit , selectedUnit ) ;
65500: LD_VAR 0 2
65504: PPUSH
65505: LD_VAR 0 3
65509: PPUSH
65510: CALL 67804 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65514: LD_VAR 0 1
65518: PUSH
65519: LD_INT 255
65521: EQUAL
65522: IFFALSE 65546
65524: PUSH
65525: LD_VAR 0 2
65529: PPUSH
65530: CALL_OW 264
65534: PUSH
65535: LD_INT 14
65537: PUSH
65538: LD_INT 53
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: IN
65545: AND
65546: IFFALSE 65564
65548: PUSH
65549: LD_VAR 0 4
65553: PPUSH
65554: LD_VAR 0 5
65558: PPUSH
65559: CALL_OW 488
65563: AND
65564: IFFALSE 65588
// CutTreeXYR ( unit , x , y , 12 ) ;
65566: LD_VAR 0 2
65570: PPUSH
65571: LD_VAR 0 4
65575: PPUSH
65576: LD_VAR 0 5
65580: PPUSH
65581: LD_INT 12
65583: PPUSH
65584: CALL 65779 0 4
// if cmd = 256 then
65588: LD_VAR 0 1
65592: PUSH
65593: LD_INT 256
65595: EQUAL
65596: IFFALSE 65617
// SetFactoryWaypoint ( unit , x , y ) ;
65598: LD_VAR 0 2
65602: PPUSH
65603: LD_VAR 0 4
65607: PPUSH
65608: LD_VAR 0 5
65612: PPUSH
65613: CALL 62976 0 3
// if cmd = 257 then
65617: LD_VAR 0 1
65621: PUSH
65622: LD_INT 257
65624: EQUAL
65625: IFFALSE 65646
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65627: LD_VAR 0 2
65631: PPUSH
65632: LD_VAR 0 4
65636: PPUSH
65637: LD_VAR 0 5
65641: PPUSH
65642: CALL 63472 0 3
// if cmd = 258 then
65646: LD_VAR 0 1
65650: PUSH
65651: LD_INT 258
65653: EQUAL
65654: IFFALSE 65678
// BurnTreeXYR ( unit , x , y , 8 ) ;
65656: LD_VAR 0 2
65660: PPUSH
65661: LD_VAR 0 4
65665: PPUSH
65666: LD_VAR 0 5
65670: PPUSH
65671: LD_INT 8
65673: PPUSH
65674: CALL 66179 0 4
// end ;
65678: LD_VAR 0 6
65682: RET
// export function ComRadiation ( un ) ; var eff ; begin
65683: LD_INT 0
65685: PPUSH
65686: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
65687: LD_VAR 0 1
65691: PPUSH
65692: CALL_OW 264
65696: PUSH
65697: LD_INT 91
65699: NONEQUAL
65700: IFFALSE 65704
// exit ;
65702: GO 65774
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65704: LD_INT 68
65706: PPUSH
65707: LD_VAR 0 1
65711: PPUSH
65712: CALL_OW 255
65716: PPUSH
65717: CALL_OW 321
65721: PUSH
65722: LD_INT 2
65724: EQUAL
65725: IFFALSE 65737
// eff := 50 else
65727: LD_ADDR_VAR 0 3
65731: PUSH
65732: LD_INT 50
65734: ST_TO_ADDR
65735: GO 65745
// eff := 25 ;
65737: LD_ADDR_VAR 0 3
65741: PUSH
65742: LD_INT 25
65744: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65745: LD_VAR 0 1
65749: PPUSH
65750: CALL_OW 250
65754: PPUSH
65755: LD_VAR 0 1
65759: PPUSH
65760: CALL_OW 251
65764: PPUSH
65765: LD_VAR 0 3
65769: PPUSH
65770: CALL_OW 495
// end ;
65774: LD_VAR 0 2
65778: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65779: LD_INT 0
65781: PPUSH
65782: PPUSH
65783: PPUSH
65784: PPUSH
65785: PPUSH
65786: PPUSH
65787: PPUSH
65788: PPUSH
65789: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
65790: LD_VAR 0 1
65794: PPUSH
65795: CALL_OW 302
65799: NOT
65800: IFTRUE 65819
65802: PUSH
65803: LD_VAR 0 2
65807: PPUSH
65808: LD_VAR 0 3
65812: PPUSH
65813: CALL_OW 488
65817: NOT
65818: OR
65819: IFTRUE 65828
65821: PUSH
65822: LD_VAR 0 4
65826: NOT
65827: OR
65828: IFFALSE 65832
// exit ;
65830: GO 66174
// list := [ ] ;
65832: LD_ADDR_VAR 0 13
65836: PUSH
65837: EMPTY
65838: ST_TO_ADDR
// if x - r < 0 then
65839: LD_VAR 0 2
65843: PUSH
65844: LD_VAR 0 4
65848: MINUS
65849: PUSH
65850: LD_INT 0
65852: LESS
65853: IFFALSE 65865
// min_x := 0 else
65855: LD_ADDR_VAR 0 7
65859: PUSH
65860: LD_INT 0
65862: ST_TO_ADDR
65863: GO 65881
// min_x := x - r ;
65865: LD_ADDR_VAR 0 7
65869: PUSH
65870: LD_VAR 0 2
65874: PUSH
65875: LD_VAR 0 4
65879: MINUS
65880: ST_TO_ADDR
// if y - r < 0 then
65881: LD_VAR 0 3
65885: PUSH
65886: LD_VAR 0 4
65890: MINUS
65891: PUSH
65892: LD_INT 0
65894: LESS
65895: IFFALSE 65907
// min_y := 0 else
65897: LD_ADDR_VAR 0 8
65901: PUSH
65902: LD_INT 0
65904: ST_TO_ADDR
65905: GO 65923
// min_y := y - r ;
65907: LD_ADDR_VAR 0 8
65911: PUSH
65912: LD_VAR 0 3
65916: PUSH
65917: LD_VAR 0 4
65921: MINUS
65922: ST_TO_ADDR
// max_x := x + r ;
65923: LD_ADDR_VAR 0 9
65927: PUSH
65928: LD_VAR 0 2
65932: PUSH
65933: LD_VAR 0 4
65937: PLUS
65938: ST_TO_ADDR
// max_y := y + r ;
65939: LD_ADDR_VAR 0 10
65943: PUSH
65944: LD_VAR 0 3
65948: PUSH
65949: LD_VAR 0 4
65953: PLUS
65954: ST_TO_ADDR
// for _x = min_x to max_x do
65955: LD_ADDR_VAR 0 11
65959: PUSH
65960: DOUBLE
65961: LD_VAR 0 7
65965: DEC
65966: ST_TO_ADDR
65967: LD_VAR 0 9
65971: PUSH
65972: FOR_TO
65973: IFFALSE 66092
// for _y = min_y to max_y do
65975: LD_ADDR_VAR 0 12
65979: PUSH
65980: DOUBLE
65981: LD_VAR 0 8
65985: DEC
65986: ST_TO_ADDR
65987: LD_VAR 0 10
65991: PUSH
65992: FOR_TO
65993: IFFALSE 66088
// begin if not ValidHex ( _x , _y ) then
65995: LD_VAR 0 11
65999: PPUSH
66000: LD_VAR 0 12
66004: PPUSH
66005: CALL_OW 488
66009: NOT
66010: IFFALSE 66014
// continue ;
66012: GO 65992
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66014: LD_VAR 0 11
66018: PPUSH
66019: LD_VAR 0 12
66023: PPUSH
66024: CALL_OW 351
66028: IFFALSE 66046
66030: PUSH
66031: LD_VAR 0 11
66035: PPUSH
66036: LD_VAR 0 12
66040: PPUSH
66041: CALL_OW 554
66045: AND
66046: IFFALSE 66086
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66048: LD_ADDR_VAR 0 13
66052: PUSH
66053: LD_VAR 0 13
66057: PPUSH
66058: LD_VAR 0 13
66062: PUSH
66063: LD_INT 1
66065: PLUS
66066: PPUSH
66067: LD_VAR 0 11
66071: PUSH
66072: LD_VAR 0 12
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PPUSH
66081: CALL_OW 2
66085: ST_TO_ADDR
// end ;
66086: GO 65992
66088: POP
66089: POP
66090: GO 65972
66092: POP
66093: POP
// if not list then
66094: LD_VAR 0 13
66098: NOT
66099: IFFALSE 66103
// exit ;
66101: GO 66174
// for i in list do
66103: LD_ADDR_VAR 0 6
66107: PUSH
66108: LD_VAR 0 13
66112: PUSH
66113: FOR_IN
66114: IFFALSE 66172
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66116: LD_VAR 0 1
66120: PPUSH
66121: LD_STRING M
66123: PUSH
66124: LD_VAR 0 6
66128: PUSH
66129: LD_INT 1
66131: ARRAY
66132: PUSH
66133: LD_VAR 0 6
66137: PUSH
66138: LD_INT 2
66140: ARRAY
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: PPUSH
66166: CALL_OW 447
66170: GO 66113
66172: POP
66173: POP
// end ;
66174: LD_VAR 0 5
66178: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
66179: LD_INT 0
66181: PPUSH
66182: PPUSH
66183: PPUSH
66184: PPUSH
66185: PPUSH
66186: PPUSH
66187: PPUSH
66188: PPUSH
66189: PPUSH
66190: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
66191: LD_VAR 0 1
66195: PPUSH
66196: CALL_OW 302
66200: NOT
66201: IFTRUE 66220
66203: PUSH
66204: LD_VAR 0 2
66208: PPUSH
66209: LD_VAR 0 3
66213: PPUSH
66214: CALL_OW 488
66218: NOT
66219: OR
66220: IFTRUE 66229
66222: PUSH
66223: LD_VAR 0 4
66227: NOT
66228: OR
66229: IFFALSE 66233
// exit ;
66231: GO 66750
// list := [ ] ;
66233: LD_ADDR_VAR 0 13
66237: PUSH
66238: EMPTY
66239: ST_TO_ADDR
// if x - r < 0 then
66240: LD_VAR 0 2
66244: PUSH
66245: LD_VAR 0 4
66249: MINUS
66250: PUSH
66251: LD_INT 0
66253: LESS
66254: IFFALSE 66266
// min_x := 0 else
66256: LD_ADDR_VAR 0 7
66260: PUSH
66261: LD_INT 0
66263: ST_TO_ADDR
66264: GO 66282
// min_x := x - r ;
66266: LD_ADDR_VAR 0 7
66270: PUSH
66271: LD_VAR 0 2
66275: PUSH
66276: LD_VAR 0 4
66280: MINUS
66281: ST_TO_ADDR
// if y - r < 0 then
66282: LD_VAR 0 3
66286: PUSH
66287: LD_VAR 0 4
66291: MINUS
66292: PUSH
66293: LD_INT 0
66295: LESS
66296: IFFALSE 66308
// min_y := 0 else
66298: LD_ADDR_VAR 0 8
66302: PUSH
66303: LD_INT 0
66305: ST_TO_ADDR
66306: GO 66324
// min_y := y - r ;
66308: LD_ADDR_VAR 0 8
66312: PUSH
66313: LD_VAR 0 3
66317: PUSH
66318: LD_VAR 0 4
66322: MINUS
66323: ST_TO_ADDR
// max_x := x + r ;
66324: LD_ADDR_VAR 0 9
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_VAR 0 4
66338: PLUS
66339: ST_TO_ADDR
// max_y := y + r ;
66340: LD_ADDR_VAR 0 10
66344: PUSH
66345: LD_VAR 0 3
66349: PUSH
66350: LD_VAR 0 4
66354: PLUS
66355: ST_TO_ADDR
// for _x = min_x to max_x do
66356: LD_ADDR_VAR 0 11
66360: PUSH
66361: DOUBLE
66362: LD_VAR 0 7
66366: DEC
66367: ST_TO_ADDR
66368: LD_VAR 0 9
66372: PUSH
66373: FOR_TO
66374: IFFALSE 66493
// for _y = min_y to max_y do
66376: LD_ADDR_VAR 0 12
66380: PUSH
66381: DOUBLE
66382: LD_VAR 0 8
66386: DEC
66387: ST_TO_ADDR
66388: LD_VAR 0 10
66392: PUSH
66393: FOR_TO
66394: IFFALSE 66489
// begin if not ValidHex ( _x , _y ) then
66396: LD_VAR 0 11
66400: PPUSH
66401: LD_VAR 0 12
66405: PPUSH
66406: CALL_OW 488
66410: NOT
66411: IFFALSE 66415
// continue ;
66413: GO 66393
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66415: LD_VAR 0 11
66419: PPUSH
66420: LD_VAR 0 12
66424: PPUSH
66425: CALL_OW 351
66429: IFFALSE 66447
66431: PUSH
66432: LD_VAR 0 11
66436: PPUSH
66437: LD_VAR 0 12
66441: PPUSH
66442: CALL_OW 554
66446: AND
66447: IFFALSE 66487
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66449: LD_ADDR_VAR 0 13
66453: PUSH
66454: LD_VAR 0 13
66458: PPUSH
66459: LD_VAR 0 13
66463: PUSH
66464: LD_INT 1
66466: PLUS
66467: PPUSH
66468: LD_VAR 0 11
66472: PUSH
66473: LD_VAR 0 12
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PPUSH
66482: CALL_OW 2
66486: ST_TO_ADDR
// end ;
66487: GO 66393
66489: POP
66490: POP
66491: GO 66373
66493: POP
66494: POP
// if not list then
66495: LD_VAR 0 13
66499: NOT
66500: IFFALSE 66504
// exit ;
66502: GO 66750
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
66504: LD_ADDR_VAR 0 13
66508: PUSH
66509: LD_VAR 0 1
66513: PPUSH
66514: LD_VAR 0 13
66518: PPUSH
66519: LD_INT 1
66521: PPUSH
66522: LD_INT 1
66524: PPUSH
66525: CALL 10345 0 4
66529: ST_TO_ADDR
// ComStop ( flame ) ;
66530: LD_VAR 0 1
66534: PPUSH
66535: CALL_OW 141
// for i in list do
66539: LD_ADDR_VAR 0 6
66543: PUSH
66544: LD_VAR 0 13
66548: PUSH
66549: FOR_IN
66550: IFFALSE 66581
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
66552: LD_VAR 0 1
66556: PPUSH
66557: LD_VAR 0 6
66561: PUSH
66562: LD_INT 1
66564: ARRAY
66565: PPUSH
66566: LD_VAR 0 6
66570: PUSH
66571: LD_INT 2
66573: ARRAY
66574: PPUSH
66575: CALL_OW 176
66579: GO 66549
66581: POP
66582: POP
// repeat wait ( 0 0$1 ) ;
66583: LD_INT 35
66585: PPUSH
66586: CALL_OW 67
// task := GetTaskList ( flame ) ;
66590: LD_ADDR_VAR 0 14
66594: PUSH
66595: LD_VAR 0 1
66599: PPUSH
66600: CALL_OW 437
66604: ST_TO_ADDR
// if not task then
66605: LD_VAR 0 14
66609: NOT
66610: IFFALSE 66614
// exit ;
66612: GO 66750
// if task [ 1 ] [ 1 ] <> | then
66614: LD_VAR 0 14
66618: PUSH
66619: LD_INT 1
66621: ARRAY
66622: PUSH
66623: LD_INT 1
66625: ARRAY
66626: PUSH
66627: LD_STRING |
66629: NONEQUAL
66630: IFFALSE 66634
// exit ;
66632: GO 66750
// _x := task [ 1 ] [ 2 ] ;
66634: LD_ADDR_VAR 0 11
66638: PUSH
66639: LD_VAR 0 14
66643: PUSH
66644: LD_INT 1
66646: ARRAY
66647: PUSH
66648: LD_INT 2
66650: ARRAY
66651: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
66652: LD_ADDR_VAR 0 12
66656: PUSH
66657: LD_VAR 0 14
66661: PUSH
66662: LD_INT 1
66664: ARRAY
66665: PUSH
66666: LD_INT 3
66668: ARRAY
66669: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
66670: LD_VAR 0 11
66674: PPUSH
66675: LD_VAR 0 12
66679: PPUSH
66680: CALL_OW 351
66684: NOT
66685: IFTRUE 66704
66687: PUSH
66688: LD_VAR 0 11
66692: PPUSH
66693: LD_VAR 0 12
66697: PPUSH
66698: CALL_OW 554
66702: NOT
66703: OR
66704: IFFALSE 66738
// begin task := Delete ( task , 1 ) ;
66706: LD_ADDR_VAR 0 14
66710: PUSH
66711: LD_VAR 0 14
66715: PPUSH
66716: LD_INT 1
66718: PPUSH
66719: CALL_OW 3
66723: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
66724: LD_VAR 0 1
66728: PPUSH
66729: LD_VAR 0 14
66733: PPUSH
66734: CALL_OW 446
// end ; until not HasTask ( flame ) ;
66738: LD_VAR 0 1
66742: PPUSH
66743: CALL_OW 314
66747: NOT
66748: IFFALSE 66583
// end ;
66750: LD_VAR 0 5
66754: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66755: LD_EXP 90
66759: NOT
66760: IFFALSE 66810
66762: GO 66764
66764: DISABLE
// begin initHack := true ;
66765: LD_ADDR_EXP 90
66769: PUSH
66770: LD_INT 1
66772: ST_TO_ADDR
// hackTanks := [ ] ;
66773: LD_ADDR_EXP 91
66777: PUSH
66778: EMPTY
66779: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66780: LD_ADDR_EXP 92
66784: PUSH
66785: EMPTY
66786: ST_TO_ADDR
// hackLimit := 3 ;
66787: LD_ADDR_EXP 93
66791: PUSH
66792: LD_INT 3
66794: ST_TO_ADDR
// hackDist := 12 ;
66795: LD_ADDR_EXP 94
66799: PUSH
66800: LD_INT 12
66802: ST_TO_ADDR
// hackCounter := [ ] ;
66803: LD_ADDR_EXP 95
66807: PUSH
66808: EMPTY
66809: ST_TO_ADDR
// end ;
66810: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66811: LD_EXP 90
66815: IFFALSE 66833
66817: PUSH
66818: LD_INT 34
66820: PUSH
66821: LD_INT 99
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PPUSH
66828: CALL_OW 69
66832: AND
66833: IFFALSE 67086
66835: GO 66837
66837: DISABLE
66838: LD_INT 0
66840: PPUSH
66841: PPUSH
// begin enable ;
66842: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66843: LD_ADDR_VAR 0 1
66847: PUSH
66848: LD_INT 34
66850: PUSH
66851: LD_INT 99
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PPUSH
66858: CALL_OW 69
66862: PUSH
66863: FOR_IN
66864: IFFALSE 67084
// begin if not i in hackTanks then
66866: LD_VAR 0 1
66870: PUSH
66871: LD_EXP 91
66875: IN
66876: NOT
66877: IFFALSE 66960
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66879: LD_ADDR_EXP 91
66883: PUSH
66884: LD_EXP 91
66888: PPUSH
66889: LD_EXP 91
66893: PUSH
66894: LD_INT 1
66896: PLUS
66897: PPUSH
66898: LD_VAR 0 1
66902: PPUSH
66903: CALL_OW 1
66907: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66908: LD_ADDR_EXP 92
66912: PUSH
66913: LD_EXP 92
66917: PPUSH
66918: LD_EXP 92
66922: PUSH
66923: LD_INT 1
66925: PLUS
66926: PPUSH
66927: EMPTY
66928: PPUSH
66929: CALL_OW 1
66933: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66934: LD_ADDR_EXP 95
66938: PUSH
66939: LD_EXP 95
66943: PPUSH
66944: LD_EXP 95
66948: PUSH
66949: LD_INT 1
66951: PLUS
66952: PPUSH
66953: EMPTY
66954: PPUSH
66955: CALL_OW 1
66959: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66960: LD_VAR 0 1
66964: PPUSH
66965: CALL_OW 302
66969: NOT
66970: IFFALSE 66983
// begin HackUnlinkAll ( i ) ;
66972: LD_VAR 0 1
66976: PPUSH
66977: CALL 67089 0 1
// continue ;
66981: GO 66863
// end ; HackCheckCapturedStatus ( i ) ;
66983: LD_VAR 0 1
66987: PPUSH
66988: CALL 67534 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66992: LD_ADDR_VAR 0 2
66996: PUSH
66997: LD_INT 81
66999: PUSH
67000: LD_VAR 0 1
67004: PPUSH
67005: CALL_OW 255
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 33
67016: PUSH
67017: LD_INT 3
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 91
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: LD_EXP 94
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 50
67044: PUSH
67045: EMPTY
67046: LIST
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: PPUSH
67054: CALL_OW 69
67058: ST_TO_ADDR
// if not tmp then
67059: LD_VAR 0 2
67063: NOT
67064: IFFALSE 67068
// continue ;
67066: GO 66863
// HackLink ( i , tmp ) ;
67068: LD_VAR 0 1
67072: PPUSH
67073: LD_VAR 0 2
67077: PPUSH
67078: CALL 67225 0 2
// end ;
67082: GO 66863
67084: POP
67085: POP
// end ;
67086: PPOPN 2
67088: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67089: LD_INT 0
67091: PPUSH
67092: PPUSH
67093: PPUSH
// if not hack in hackTanks then
67094: LD_VAR 0 1
67098: PUSH
67099: LD_EXP 91
67103: IN
67104: NOT
67105: IFFALSE 67109
// exit ;
67107: GO 67220
// index := GetElementIndex ( hackTanks , hack ) ;
67109: LD_ADDR_VAR 0 4
67113: PUSH
67114: LD_EXP 91
67118: PPUSH
67119: LD_VAR 0 1
67123: PPUSH
67124: CALL 9640 0 2
67128: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67129: LD_EXP 92
67133: PUSH
67134: LD_VAR 0 4
67138: ARRAY
67139: IFFALSE 67220
// begin for i in hackTanksCaptured [ index ] do
67141: LD_ADDR_VAR 0 3
67145: PUSH
67146: LD_EXP 92
67150: PUSH
67151: LD_VAR 0 4
67155: ARRAY
67156: PUSH
67157: FOR_IN
67158: IFFALSE 67184
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67160: LD_VAR 0 3
67164: PUSH
67165: LD_INT 1
67167: ARRAY
67168: PPUSH
67169: LD_VAR 0 3
67173: PUSH
67174: LD_INT 2
67176: ARRAY
67177: PPUSH
67178: CALL_OW 235
67182: GO 67157
67184: POP
67185: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67186: LD_ADDR_EXP 92
67190: PUSH
67191: LD_EXP 92
67195: PPUSH
67196: LD_VAR 0 4
67200: PPUSH
67201: EMPTY
67202: PPUSH
67203: CALL_OW 1
67207: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67208: LD_VAR 0 1
67212: PPUSH
67213: LD_INT 0
67215: PPUSH
67216: CALL_OW 505
// end ; end ;
67220: LD_VAR 0 2
67224: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67225: LD_INT 0
67227: PPUSH
67228: PPUSH
67229: PPUSH
// if not hack in hackTanks or not vehicles then
67230: LD_VAR 0 1
67234: PUSH
67235: LD_EXP 91
67239: IN
67240: NOT
67241: IFTRUE 67250
67243: PUSH
67244: LD_VAR 0 2
67248: NOT
67249: OR
67250: IFFALSE 67254
// exit ;
67252: GO 67529
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67254: LD_ADDR_VAR 0 2
67258: PUSH
67259: LD_VAR 0 1
67263: PPUSH
67264: LD_VAR 0 2
67268: PPUSH
67269: LD_INT 1
67271: PPUSH
67272: LD_INT 1
67274: PPUSH
67275: CALL 10292 0 4
67279: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67280: LD_ADDR_VAR 0 5
67284: PUSH
67285: LD_EXP 91
67289: PPUSH
67290: LD_VAR 0 1
67294: PPUSH
67295: CALL 9640 0 2
67299: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67300: LD_EXP 92
67304: PUSH
67305: LD_VAR 0 5
67309: ARRAY
67310: PUSH
67311: LD_EXP 93
67315: LESS
67316: IFFALSE 67505
// begin for i := 1 to vehicles do
67318: LD_ADDR_VAR 0 4
67322: PUSH
67323: DOUBLE
67324: LD_INT 1
67326: DEC
67327: ST_TO_ADDR
67328: LD_VAR 0 2
67332: PUSH
67333: FOR_TO
67334: IFFALSE 67503
// begin if hackTanksCaptured [ index ] = hackLimit then
67336: LD_EXP 92
67340: PUSH
67341: LD_VAR 0 5
67345: ARRAY
67346: PUSH
67347: LD_EXP 93
67351: EQUAL
67352: IFFALSE 67356
// break ;
67354: GO 67503
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67356: LD_ADDR_EXP 95
67360: PUSH
67361: LD_EXP 95
67365: PPUSH
67366: LD_VAR 0 5
67370: PPUSH
67371: LD_EXP 95
67375: PUSH
67376: LD_VAR 0 5
67380: ARRAY
67381: PUSH
67382: LD_INT 1
67384: PLUS
67385: PPUSH
67386: CALL_OW 1
67390: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67391: LD_ADDR_EXP 92
67395: PUSH
67396: LD_EXP 92
67400: PPUSH
67401: LD_VAR 0 5
67405: PUSH
67406: LD_EXP 92
67410: PUSH
67411: LD_VAR 0 5
67415: ARRAY
67416: PUSH
67417: LD_INT 1
67419: PLUS
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PPUSH
67425: LD_VAR 0 2
67429: PUSH
67430: LD_VAR 0 4
67434: ARRAY
67435: PUSH
67436: LD_VAR 0 2
67440: PUSH
67441: LD_VAR 0 4
67445: ARRAY
67446: PPUSH
67447: CALL_OW 255
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PPUSH
67456: CALL 9857 0 3
67460: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67461: LD_VAR 0 2
67465: PUSH
67466: LD_VAR 0 4
67470: ARRAY
67471: PPUSH
67472: LD_VAR 0 1
67476: PPUSH
67477: CALL_OW 255
67481: PPUSH
67482: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67486: LD_VAR 0 2
67490: PUSH
67491: LD_VAR 0 4
67495: ARRAY
67496: PPUSH
67497: CALL_OW 141
// end ;
67501: GO 67333
67503: POP
67504: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67505: LD_VAR 0 1
67509: PPUSH
67510: LD_EXP 92
67514: PUSH
67515: LD_VAR 0 5
67519: ARRAY
67520: PUSH
67521: LD_INT 0
67523: PLUS
67524: PPUSH
67525: CALL_OW 505
// end ;
67529: LD_VAR 0 3
67533: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67534: LD_INT 0
67536: PPUSH
67537: PPUSH
67538: PPUSH
67539: PPUSH
// if not hack in hackTanks then
67540: LD_VAR 0 1
67544: PUSH
67545: LD_EXP 91
67549: IN
67550: NOT
67551: IFFALSE 67555
// exit ;
67553: GO 67799
// index := GetElementIndex ( hackTanks , hack ) ;
67555: LD_ADDR_VAR 0 4
67559: PUSH
67560: LD_EXP 91
67564: PPUSH
67565: LD_VAR 0 1
67569: PPUSH
67570: CALL 9640 0 2
67574: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67575: LD_ADDR_VAR 0 3
67579: PUSH
67580: DOUBLE
67581: LD_EXP 92
67585: PUSH
67586: LD_VAR 0 4
67590: ARRAY
67591: INC
67592: ST_TO_ADDR
67593: LD_INT 1
67595: PUSH
67596: FOR_DOWNTO
67597: IFFALSE 67773
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67599: LD_ADDR_VAR 0 5
67603: PUSH
67604: LD_EXP 92
67608: PUSH
67609: LD_VAR 0 4
67613: ARRAY
67614: PUSH
67615: LD_VAR 0 3
67619: ARRAY
67620: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67621: LD_VAR 0 5
67625: PUSH
67626: LD_INT 1
67628: ARRAY
67629: PPUSH
67630: CALL_OW 302
67634: NOT
67635: IFTRUE 67663
67637: PUSH
67638: LD_VAR 0 5
67642: PUSH
67643: LD_INT 1
67645: ARRAY
67646: PPUSH
67647: CALL_OW 255
67651: PUSH
67652: LD_VAR 0 1
67656: PPUSH
67657: CALL_OW 255
67661: NONEQUAL
67662: OR
67663: IFFALSE 67771
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67665: LD_VAR 0 5
67669: PUSH
67670: LD_INT 1
67672: ARRAY
67673: PPUSH
67674: CALL_OW 305
67678: IFFALSE 67706
67680: PUSH
67681: LD_VAR 0 5
67685: PUSH
67686: LD_INT 1
67688: ARRAY
67689: PPUSH
67690: CALL_OW 255
67694: PUSH
67695: LD_VAR 0 1
67699: PPUSH
67700: CALL_OW 255
67704: EQUAL
67705: AND
67706: IFFALSE 67730
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67708: LD_VAR 0 5
67712: PUSH
67713: LD_INT 1
67715: ARRAY
67716: PPUSH
67717: LD_VAR 0 5
67721: PUSH
67722: LD_INT 2
67724: ARRAY
67725: PPUSH
67726: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67730: LD_ADDR_EXP 92
67734: PUSH
67735: LD_EXP 92
67739: PPUSH
67740: LD_VAR 0 4
67744: PPUSH
67745: LD_EXP 92
67749: PUSH
67750: LD_VAR 0 4
67754: ARRAY
67755: PPUSH
67756: LD_VAR 0 3
67760: PPUSH
67761: CALL_OW 3
67765: PPUSH
67766: CALL_OW 1
67770: ST_TO_ADDR
// end ; end ;
67771: GO 67596
67773: POP
67774: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67775: LD_VAR 0 1
67779: PPUSH
67780: LD_EXP 92
67784: PUSH
67785: LD_VAR 0 4
67789: ARRAY
67790: PUSH
67791: LD_INT 0
67793: PLUS
67794: PPUSH
67795: CALL_OW 505
// end ;
67799: LD_VAR 0 2
67803: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67804: LD_INT 0
67806: PPUSH
67807: PPUSH
67808: PPUSH
67809: PPUSH
// if not hack in hackTanks then
67810: LD_VAR 0 1
67814: PUSH
67815: LD_EXP 91
67819: IN
67820: NOT
67821: IFFALSE 67825
// exit ;
67823: GO 67910
// index := GetElementIndex ( hackTanks , hack ) ;
67825: LD_ADDR_VAR 0 5
67829: PUSH
67830: LD_EXP 91
67834: PPUSH
67835: LD_VAR 0 1
67839: PPUSH
67840: CALL 9640 0 2
67844: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67845: LD_ADDR_VAR 0 4
67849: PUSH
67850: DOUBLE
67851: LD_INT 1
67853: DEC
67854: ST_TO_ADDR
67855: LD_EXP 92
67859: PUSH
67860: LD_VAR 0 5
67864: ARRAY
67865: PUSH
67866: FOR_TO
67867: IFFALSE 67908
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67869: LD_EXP 92
67873: PUSH
67874: LD_VAR 0 5
67878: ARRAY
67879: PUSH
67880: LD_VAR 0 4
67884: ARRAY
67885: PUSH
67886: LD_INT 1
67888: ARRAY
67889: PUSH
67890: LD_VAR 0 2
67894: EQUAL
67895: IFFALSE 67906
// KillUnit ( vehicle ) ;
67897: LD_VAR 0 2
67901: PPUSH
67902: CALL_OW 66
67906: GO 67866
67908: POP
67909: POP
// end ;
67910: LD_VAR 0 3
67914: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67915: LD_EXP 96
67919: NOT
67920: IFFALSE 67955
67922: GO 67924
67924: DISABLE
// begin initMiner := true ;
67925: LD_ADDR_EXP 96
67929: PUSH
67930: LD_INT 1
67932: ST_TO_ADDR
// minersList := [ ] ;
67933: LD_ADDR_EXP 97
67937: PUSH
67938: EMPTY
67939: ST_TO_ADDR
// minerMinesList := [ ] ;
67940: LD_ADDR_EXP 98
67944: PUSH
67945: EMPTY
67946: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67947: LD_ADDR_EXP 99
67951: PUSH
67952: LD_INT 5
67954: ST_TO_ADDR
// end ;
67955: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67956: LD_EXP 96
67960: IFFALSE 67978
67962: PUSH
67963: LD_INT 34
67965: PUSH
67966: LD_INT 81
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PPUSH
67973: CALL_OW 69
67977: AND
67978: IFFALSE 68441
67980: GO 67982
67982: DISABLE
67983: LD_INT 0
67985: PPUSH
67986: PPUSH
67987: PPUSH
67988: PPUSH
// begin enable ;
67989: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67990: LD_ADDR_VAR 0 1
67994: PUSH
67995: LD_INT 34
67997: PUSH
67998: LD_INT 81
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PPUSH
68005: CALL_OW 69
68009: PUSH
68010: FOR_IN
68011: IFFALSE 68083
// begin if not i in minersList then
68013: LD_VAR 0 1
68017: PUSH
68018: LD_EXP 97
68022: IN
68023: NOT
68024: IFFALSE 68081
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68026: LD_ADDR_EXP 97
68030: PUSH
68031: LD_EXP 97
68035: PPUSH
68036: LD_EXP 97
68040: PUSH
68041: LD_INT 1
68043: PLUS
68044: PPUSH
68045: LD_VAR 0 1
68049: PPUSH
68050: CALL_OW 1
68054: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68055: LD_ADDR_EXP 98
68059: PUSH
68060: LD_EXP 98
68064: PPUSH
68065: LD_EXP 98
68069: PUSH
68070: LD_INT 1
68072: PLUS
68073: PPUSH
68074: EMPTY
68075: PPUSH
68076: CALL_OW 1
68080: ST_TO_ADDR
// end end ;
68081: GO 68010
68083: POP
68084: POP
// for i := minerMinesList downto 1 do
68085: LD_ADDR_VAR 0 1
68089: PUSH
68090: DOUBLE
68091: LD_EXP 98
68095: INC
68096: ST_TO_ADDR
68097: LD_INT 1
68099: PUSH
68100: FOR_DOWNTO
68101: IFFALSE 68439
// begin if IsLive ( minersList [ i ] ) then
68103: LD_EXP 97
68107: PUSH
68108: LD_VAR 0 1
68112: ARRAY
68113: PPUSH
68114: CALL_OW 300
68118: IFFALSE 68146
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68120: LD_EXP 97
68124: PUSH
68125: LD_VAR 0 1
68129: ARRAY
68130: PPUSH
68131: LD_EXP 98
68135: PUSH
68136: LD_VAR 0 1
68140: ARRAY
68141: PPUSH
68142: CALL_OW 505
// if not minerMinesList [ i ] then
68146: LD_EXP 98
68150: PUSH
68151: LD_VAR 0 1
68155: ARRAY
68156: NOT
68157: IFFALSE 68161
// continue ;
68159: GO 68100
// for j := minerMinesList [ i ] downto 1 do
68161: LD_ADDR_VAR 0 2
68165: PUSH
68166: DOUBLE
68167: LD_EXP 98
68171: PUSH
68172: LD_VAR 0 1
68176: ARRAY
68177: INC
68178: ST_TO_ADDR
68179: LD_INT 1
68181: PUSH
68182: FOR_DOWNTO
68183: IFFALSE 68435
// begin side := GetSide ( minersList [ i ] ) ;
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: LD_EXP 97
68194: PUSH
68195: LD_VAR 0 1
68199: ARRAY
68200: PPUSH
68201: CALL_OW 255
68205: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68206: LD_ADDR_VAR 0 4
68210: PUSH
68211: LD_EXP 98
68215: PUSH
68216: LD_VAR 0 1
68220: ARRAY
68221: PUSH
68222: LD_VAR 0 2
68226: ARRAY
68227: PUSH
68228: LD_INT 1
68230: ARRAY
68231: PPUSH
68232: LD_EXP 98
68236: PUSH
68237: LD_VAR 0 1
68241: ARRAY
68242: PUSH
68243: LD_VAR 0 2
68247: ARRAY
68248: PUSH
68249: LD_INT 2
68251: ARRAY
68252: PPUSH
68253: CALL_OW 428
68257: ST_TO_ADDR
// if not tmp then
68258: LD_VAR 0 4
68262: NOT
68263: IFFALSE 68267
// continue ;
68265: GO 68182
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68267: LD_VAR 0 4
68271: PUSH
68272: LD_INT 81
68274: PUSH
68275: LD_VAR 0 3
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PPUSH
68284: CALL_OW 69
68288: IN
68289: IFFALSE 68339
68291: PUSH
68292: LD_EXP 98
68296: PUSH
68297: LD_VAR 0 1
68301: ARRAY
68302: PUSH
68303: LD_VAR 0 2
68307: ARRAY
68308: PUSH
68309: LD_INT 1
68311: ARRAY
68312: PPUSH
68313: LD_EXP 98
68317: PUSH
68318: LD_VAR 0 1
68322: ARRAY
68323: PUSH
68324: LD_VAR 0 2
68328: ARRAY
68329: PUSH
68330: LD_INT 2
68332: ARRAY
68333: PPUSH
68334: CALL_OW 458
68338: AND
68339: IFFALSE 68433
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68341: LD_EXP 98
68345: PUSH
68346: LD_VAR 0 1
68350: ARRAY
68351: PUSH
68352: LD_VAR 0 2
68356: ARRAY
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PPUSH
68362: LD_EXP 98
68366: PUSH
68367: LD_VAR 0 1
68371: ARRAY
68372: PUSH
68373: LD_VAR 0 2
68377: ARRAY
68378: PUSH
68379: LD_INT 2
68381: ARRAY
68382: PPUSH
68383: LD_VAR 0 3
68387: PPUSH
68388: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68392: LD_ADDR_EXP 98
68396: PUSH
68397: LD_EXP 98
68401: PPUSH
68402: LD_VAR 0 1
68406: PPUSH
68407: LD_EXP 98
68411: PUSH
68412: LD_VAR 0 1
68416: ARRAY
68417: PPUSH
68418: LD_VAR 0 2
68422: PPUSH
68423: CALL_OW 3
68427: PPUSH
68428: CALL_OW 1
68432: ST_TO_ADDR
// end ; end ;
68433: GO 68182
68435: POP
68436: POP
// end ;
68437: GO 68100
68439: POP
68440: POP
// end ;
68441: PPOPN 4
68443: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
// result := false ;
68448: LD_ADDR_VAR 0 4
68452: PUSH
68453: LD_INT 0
68455: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68456: LD_VAR 0 1
68460: PPUSH
68461: CALL_OW 264
68465: PUSH
68466: LD_INT 81
68468: EQUAL
68469: NOT
68470: IFFALSE 68474
// exit ;
68472: GO 68718
// index := GetElementIndex ( minersList , unit ) ;
68474: LD_ADDR_VAR 0 5
68478: PUSH
68479: LD_EXP 97
68483: PPUSH
68484: LD_VAR 0 1
68488: PPUSH
68489: CALL 9640 0 2
68493: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68494: LD_EXP 98
68498: PUSH
68499: LD_VAR 0 5
68503: ARRAY
68504: PUSH
68505: LD_EXP 99
68509: GREATEREQUAL
68510: IFFALSE 68514
// exit ;
68512: GO 68718
// ComMoveXY ( unit , x , y ) ;
68514: LD_VAR 0 1
68518: PPUSH
68519: LD_VAR 0 2
68523: PPUSH
68524: LD_VAR 0 3
68528: PPUSH
68529: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68533: LD_INT 35
68535: PPUSH
68536: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68540: LD_VAR 0 1
68544: PPUSH
68545: LD_VAR 0 2
68549: PPUSH
68550: LD_VAR 0 3
68554: PPUSH
68555: CALL 41686 0 3
68559: NOT
68560: IFFALSE 68573
68562: PUSH
68563: LD_VAR 0 1
68567: PPUSH
68568: CALL_OW 314
68572: AND
68573: IFFALSE 68577
// exit ;
68575: GO 68718
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68577: LD_VAR 0 2
68581: PPUSH
68582: LD_VAR 0 3
68586: PPUSH
68587: CALL_OW 428
68591: PUSH
68592: LD_VAR 0 1
68596: EQUAL
68597: IFFALSE 68611
68599: PUSH
68600: LD_VAR 0 1
68604: PPUSH
68605: CALL_OW 314
68609: NOT
68610: AND
68611: IFFALSE 68533
// PlaySoundXY ( x , y , PlantMine ) ;
68613: LD_VAR 0 2
68617: PPUSH
68618: LD_VAR 0 3
68622: PPUSH
68623: LD_STRING PlantMine
68625: PPUSH
68626: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68630: LD_VAR 0 2
68634: PPUSH
68635: LD_VAR 0 3
68639: PPUSH
68640: LD_VAR 0 1
68644: PPUSH
68645: CALL_OW 255
68649: PPUSH
68650: LD_INT 0
68652: PPUSH
68653: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68657: LD_ADDR_EXP 98
68661: PUSH
68662: LD_EXP 98
68666: PPUSH
68667: LD_VAR 0 5
68671: PUSH
68672: LD_EXP 98
68676: PUSH
68677: LD_VAR 0 5
68681: ARRAY
68682: PUSH
68683: LD_INT 1
68685: PLUS
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PPUSH
68691: LD_VAR 0 2
68695: PUSH
68696: LD_VAR 0 3
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PPUSH
68705: CALL 9857 0 3
68709: ST_TO_ADDR
// result := true ;
68710: LD_ADDR_VAR 0 4
68714: PUSH
68715: LD_INT 1
68717: ST_TO_ADDR
// end ;
68718: LD_VAR 0 4
68722: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68723: LD_INT 0
68725: PPUSH
68726: PPUSH
68727: PPUSH
// if not unit in minersList then
68728: LD_VAR 0 1
68732: PUSH
68733: LD_EXP 97
68737: IN
68738: NOT
68739: IFFALSE 68743
// exit ;
68741: GO 69137
// index := GetElementIndex ( minersList , unit ) ;
68743: LD_ADDR_VAR 0 6
68747: PUSH
68748: LD_EXP 97
68752: PPUSH
68753: LD_VAR 0 1
68757: PPUSH
68758: CALL 9640 0 2
68762: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68763: LD_ADDR_VAR 0 5
68767: PUSH
68768: DOUBLE
68769: LD_EXP 98
68773: PUSH
68774: LD_VAR 0 6
68778: ARRAY
68779: INC
68780: ST_TO_ADDR
68781: LD_INT 1
68783: PUSH
68784: FOR_DOWNTO
68785: IFFALSE 68948
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68787: LD_EXP 98
68791: PUSH
68792: LD_VAR 0 6
68796: ARRAY
68797: PUSH
68798: LD_VAR 0 5
68802: ARRAY
68803: PUSH
68804: LD_INT 1
68806: ARRAY
68807: PUSH
68808: LD_VAR 0 2
68812: EQUAL
68813: IFFALSE 68843
68815: PUSH
68816: LD_EXP 98
68820: PUSH
68821: LD_VAR 0 6
68825: ARRAY
68826: PUSH
68827: LD_VAR 0 5
68831: ARRAY
68832: PUSH
68833: LD_INT 2
68835: ARRAY
68836: PUSH
68837: LD_VAR 0 3
68841: EQUAL
68842: AND
68843: IFFALSE 68946
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68845: LD_EXP 98
68849: PUSH
68850: LD_VAR 0 6
68854: ARRAY
68855: PUSH
68856: LD_VAR 0 5
68860: ARRAY
68861: PUSH
68862: LD_INT 1
68864: ARRAY
68865: PPUSH
68866: LD_EXP 98
68870: PUSH
68871: LD_VAR 0 6
68875: ARRAY
68876: PUSH
68877: LD_VAR 0 5
68881: ARRAY
68882: PUSH
68883: LD_INT 2
68885: ARRAY
68886: PPUSH
68887: LD_VAR 0 1
68891: PPUSH
68892: CALL_OW 255
68896: PPUSH
68897: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68901: LD_ADDR_EXP 98
68905: PUSH
68906: LD_EXP 98
68910: PPUSH
68911: LD_VAR 0 6
68915: PPUSH
68916: LD_EXP 98
68920: PUSH
68921: LD_VAR 0 6
68925: ARRAY
68926: PPUSH
68927: LD_VAR 0 5
68931: PPUSH
68932: CALL_OW 3
68936: PPUSH
68937: CALL_OW 1
68941: ST_TO_ADDR
// exit ;
68942: POP
68943: POP
68944: GO 69137
// end ; end ;
68946: GO 68784
68948: POP
68949: POP
// for i := minerMinesList [ index ] downto 1 do
68950: LD_ADDR_VAR 0 5
68954: PUSH
68955: DOUBLE
68956: LD_EXP 98
68960: PUSH
68961: LD_VAR 0 6
68965: ARRAY
68966: INC
68967: ST_TO_ADDR
68968: LD_INT 1
68970: PUSH
68971: FOR_DOWNTO
68972: IFFALSE 69135
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68974: LD_EXP 98
68978: PUSH
68979: LD_VAR 0 6
68983: ARRAY
68984: PUSH
68985: LD_VAR 0 5
68989: ARRAY
68990: PUSH
68991: LD_INT 1
68993: ARRAY
68994: PPUSH
68995: LD_EXP 98
68999: PUSH
69000: LD_VAR 0 6
69004: ARRAY
69005: PUSH
69006: LD_VAR 0 5
69010: ARRAY
69011: PUSH
69012: LD_INT 2
69014: ARRAY
69015: PPUSH
69016: LD_VAR 0 2
69020: PPUSH
69021: LD_VAR 0 3
69025: PPUSH
69026: CALL_OW 298
69030: PUSH
69031: LD_INT 6
69033: LESS
69034: IFFALSE 69133
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69036: LD_EXP 98
69040: PUSH
69041: LD_VAR 0 6
69045: ARRAY
69046: PUSH
69047: LD_VAR 0 5
69051: ARRAY
69052: PUSH
69053: LD_INT 1
69055: ARRAY
69056: PPUSH
69057: LD_EXP 98
69061: PUSH
69062: LD_VAR 0 6
69066: ARRAY
69067: PUSH
69068: LD_VAR 0 5
69072: ARRAY
69073: PUSH
69074: LD_INT 2
69076: ARRAY
69077: PPUSH
69078: LD_VAR 0 1
69082: PPUSH
69083: CALL_OW 255
69087: PPUSH
69088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69092: LD_ADDR_EXP 98
69096: PUSH
69097: LD_EXP 98
69101: PPUSH
69102: LD_VAR 0 6
69106: PPUSH
69107: LD_EXP 98
69111: PUSH
69112: LD_VAR 0 6
69116: ARRAY
69117: PPUSH
69118: LD_VAR 0 5
69122: PPUSH
69123: CALL_OW 3
69127: PPUSH
69128: CALL_OW 1
69132: ST_TO_ADDR
// end ; end ;
69133: GO 68971
69135: POP
69136: POP
// end ;
69137: LD_VAR 0 4
69141: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69142: LD_INT 0
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
69149: PPUSH
69150: PPUSH
69151: PPUSH
69152: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69153: LD_VAR 0 1
69157: PPUSH
69158: CALL_OW 264
69162: PUSH
69163: LD_INT 81
69165: EQUAL
69166: NOT
69167: IFTRUE 69182
69169: PUSH
69170: LD_VAR 0 1
69174: PUSH
69175: LD_EXP 97
69179: IN
69180: NOT
69181: OR
69182: IFFALSE 69186
// exit ;
69184: GO 69512
// index := GetElementIndex ( minersList , unit ) ;
69186: LD_ADDR_VAR 0 6
69190: PUSH
69191: LD_EXP 97
69195: PPUSH
69196: LD_VAR 0 1
69200: PPUSH
69201: CALL 9640 0 2
69205: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69206: LD_ADDR_VAR 0 8
69210: PUSH
69211: LD_EXP 99
69215: PUSH
69216: LD_EXP 98
69220: PUSH
69221: LD_VAR 0 6
69225: ARRAY
69226: MINUS
69227: ST_TO_ADDR
// if not minesFreeAmount then
69228: LD_VAR 0 8
69232: NOT
69233: IFFALSE 69237
// exit ;
69235: GO 69512
// tmp := [ ] ;
69237: LD_ADDR_VAR 0 7
69241: PUSH
69242: EMPTY
69243: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69244: LD_ADDR_VAR 0 5
69248: PUSH
69249: DOUBLE
69250: LD_INT 1
69252: DEC
69253: ST_TO_ADDR
69254: LD_VAR 0 8
69258: PUSH
69259: FOR_TO
69260: IFFALSE 69459
// begin _d := rand ( 0 , 5 ) ;
69262: LD_ADDR_VAR 0 11
69266: PUSH
69267: LD_INT 0
69269: PPUSH
69270: LD_INT 5
69272: PPUSH
69273: CALL_OW 12
69277: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69278: LD_ADDR_VAR 0 12
69282: PUSH
69283: LD_INT 2
69285: PPUSH
69286: LD_INT 6
69288: PPUSH
69289: CALL_OW 12
69293: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69294: LD_ADDR_VAR 0 9
69298: PUSH
69299: LD_VAR 0 2
69303: PPUSH
69304: LD_VAR 0 11
69308: PPUSH
69309: LD_VAR 0 12
69313: PPUSH
69314: CALL_OW 272
69318: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69319: LD_ADDR_VAR 0 10
69323: PUSH
69324: LD_VAR 0 3
69328: PPUSH
69329: LD_VAR 0 11
69333: PPUSH
69334: LD_VAR 0 12
69338: PPUSH
69339: CALL_OW 273
69343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69344: LD_VAR 0 9
69348: PPUSH
69349: LD_VAR 0 10
69353: PPUSH
69354: CALL_OW 488
69358: IFFALSE 69382
69360: PUSH
69361: LD_VAR 0 9
69365: PUSH
69366: LD_VAR 0 10
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_VAR 0 7
69379: IN
69380: NOT
69381: AND
69382: IFFALSE 69401
69384: PUSH
69385: LD_VAR 0 9
69389: PPUSH
69390: LD_VAR 0 10
69394: PPUSH
69395: CALL_OW 458
69399: NOT
69400: AND
69401: IFFALSE 69443
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69403: LD_ADDR_VAR 0 7
69407: PUSH
69408: LD_VAR 0 7
69412: PPUSH
69413: LD_VAR 0 7
69417: PUSH
69418: LD_INT 1
69420: PLUS
69421: PPUSH
69422: LD_VAR 0 9
69426: PUSH
69427: LD_VAR 0 10
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PPUSH
69436: CALL_OW 1
69440: ST_TO_ADDR
69441: GO 69457
// i := i - 1 ;
69443: LD_ADDR_VAR 0 5
69447: PUSH
69448: LD_VAR 0 5
69452: PUSH
69453: LD_INT 1
69455: MINUS
69456: ST_TO_ADDR
// end ;
69457: GO 69259
69459: POP
69460: POP
// for i in tmp do
69461: LD_ADDR_VAR 0 5
69465: PUSH
69466: LD_VAR 0 7
69470: PUSH
69471: FOR_IN
69472: IFFALSE 69510
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_VAR 0 5
69483: PUSH
69484: LD_INT 1
69486: ARRAY
69487: PPUSH
69488: LD_VAR 0 5
69492: PUSH
69493: LD_INT 2
69495: ARRAY
69496: PPUSH
69497: CALL 68444 0 3
69501: NOT
69502: IFFALSE 69508
// exit ;
69504: POP
69505: POP
69506: GO 69512
69508: GO 69471
69510: POP
69511: POP
// end ;
69512: LD_VAR 0 4
69516: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
69517: LD_INT 0
69519: PPUSH
69520: PPUSH
69521: PPUSH
69522: PPUSH
69523: PPUSH
69524: PPUSH
69525: PPUSH
69526: PPUSH
69527: PPUSH
// if GetClass ( unit ) <> class_sniper then
69528: LD_VAR 0 1
69532: PPUSH
69533: CALL_OW 257
69537: PUSH
69538: LD_INT 5
69540: NONEQUAL
69541: IFFALSE 69545
// exit ;
69543: GO 70015
// dist := 8 ;
69545: LD_ADDR_VAR 0 5
69549: PUSH
69550: LD_INT 8
69552: ST_TO_ADDR
// viewRange := 12 ;
69553: LD_ADDR_VAR 0 8
69557: PUSH
69558: LD_INT 12
69560: ST_TO_ADDR
// side := GetSide ( unit ) ;
69561: LD_ADDR_VAR 0 6
69565: PUSH
69566: LD_VAR 0 1
69570: PPUSH
69571: CALL_OW 255
69575: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69576: LD_INT 61
69578: PPUSH
69579: LD_VAR 0 6
69583: PPUSH
69584: CALL_OW 321
69588: PUSH
69589: LD_INT 2
69591: EQUAL
69592: IFFALSE 69602
// viewRange := 16 ;
69594: LD_ADDR_VAR 0 8
69598: PUSH
69599: LD_INT 16
69601: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69602: LD_VAR 0 1
69606: PPUSH
69607: LD_VAR 0 2
69611: PPUSH
69612: LD_VAR 0 3
69616: PPUSH
69617: CALL_OW 297
69621: PUSH
69622: LD_VAR 0 5
69626: GREATER
69627: IFFALSE 69706
// begin ComMoveXY ( unit , x , y ) ;
69629: LD_VAR 0 1
69633: PPUSH
69634: LD_VAR 0 2
69638: PPUSH
69639: LD_VAR 0 3
69643: PPUSH
69644: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69648: LD_INT 35
69650: PPUSH
69651: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69655: LD_VAR 0 1
69659: PPUSH
69660: LD_VAR 0 2
69664: PPUSH
69665: LD_VAR 0 3
69669: PPUSH
69670: CALL 41686 0 3
69674: NOT
69675: IFFALSE 69679
// exit ;
69677: GO 70015
// until GetDistUnitXY ( unit , x , y ) < dist ;
69679: LD_VAR 0 1
69683: PPUSH
69684: LD_VAR 0 2
69688: PPUSH
69689: LD_VAR 0 3
69693: PPUSH
69694: CALL_OW 297
69698: PUSH
69699: LD_VAR 0 5
69703: LESS
69704: IFFALSE 69648
// end ; ComTurnXY ( unit , x , y ) ;
69706: LD_VAR 0 1
69710: PPUSH
69711: LD_VAR 0 2
69715: PPUSH
69716: LD_VAR 0 3
69720: PPUSH
69721: CALL_OW 118
// repeat if Multiplayer then
69725: LD_OWVAR 4
69729: IFFALSE 69740
// wait ( 35 ) else
69731: LD_INT 35
69733: PPUSH
69734: CALL_OW 67
69738: GO 69747
// wait ( 5 ) ;
69740: LD_INT 5
69742: PPUSH
69743: CALL_OW 67
// _d := GetDir ( unit ) ;
69747: LD_ADDR_VAR 0 11
69751: PUSH
69752: LD_VAR 0 1
69756: PPUSH
69757: CALL_OW 254
69761: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
69762: LD_ADDR_VAR 0 7
69766: PUSH
69767: LD_VAR 0 1
69771: PPUSH
69772: CALL_OW 250
69776: PPUSH
69777: LD_VAR 0 1
69781: PPUSH
69782: CALL_OW 251
69786: PPUSH
69787: LD_VAR 0 2
69791: PPUSH
69792: LD_VAR 0 3
69796: PPUSH
69797: CALL 44322 0 4
69801: ST_TO_ADDR
// until dir = _d ;
69802: LD_VAR 0 7
69806: PUSH
69807: LD_VAR 0 11
69811: EQUAL
69812: IFFALSE 69725
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
69814: LD_ADDR_VAR 0 9
69818: PUSH
69819: LD_VAR 0 1
69823: PPUSH
69824: CALL_OW 250
69828: PPUSH
69829: LD_VAR 0 7
69833: PPUSH
69834: LD_VAR 0 5
69838: PPUSH
69839: CALL_OW 272
69843: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
69844: LD_ADDR_VAR 0 10
69848: PUSH
69849: LD_VAR 0 1
69853: PPUSH
69854: CALL_OW 251
69858: PPUSH
69859: LD_VAR 0 7
69863: PPUSH
69864: LD_VAR 0 5
69868: PPUSH
69869: CALL_OW 273
69873: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69874: LD_VAR 0 9
69878: PPUSH
69879: LD_VAR 0 10
69883: PPUSH
69884: CALL_OW 488
69888: NOT
69889: IFFALSE 69893
// exit ;
69891: GO 70015
// ComAnimCustom ( unit , 1 ) ;
69893: LD_VAR 0 1
69897: PPUSH
69898: LD_INT 1
69900: PPUSH
69901: CALL_OW 592
// p := 0 ;
69905: LD_ADDR_VAR 0 12
69909: PUSH
69910: LD_INT 0
69912: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69913: LD_VAR 0 9
69917: PPUSH
69918: LD_VAR 0 10
69922: PPUSH
69923: LD_VAR 0 6
69927: PPUSH
69928: LD_VAR 0 8
69932: PPUSH
69933: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
69937: LD_INT 35
69939: PPUSH
69940: CALL_OW 67
// p := Inc ( p ) ;
69944: LD_ADDR_VAR 0 12
69948: PUSH
69949: LD_VAR 0 12
69953: PPUSH
69954: CALL 44278 0 1
69958: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
69959: LD_VAR 0 12
69963: PUSH
69964: LD_INT 3
69966: EQUAL
69967: IFTRUE 69981
69969: PUSH
69970: LD_VAR 0 1
69974: PPUSH
69975: CALL_OW 302
69979: NOT
69980: OR
69981: IFTRUE 69994
69983: PUSH
69984: LD_VAR 0 1
69988: PPUSH
69989: CALL_OW 301
69993: OR
69994: IFFALSE 69937
// RemoveSeeing ( _x , _y , side ) ;
69996: LD_VAR 0 9
70000: PPUSH
70001: LD_VAR 0 10
70005: PPUSH
70006: LD_VAR 0 6
70010: PPUSH
70011: CALL_OW 331
// end ;
70015: LD_VAR 0 4
70019: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
70020: LD_INT 0
70022: PPUSH
70023: PPUSH
70024: PPUSH
70025: PPUSH
70026: PPUSH
70027: PPUSH
70028: PPUSH
70029: PPUSH
70030: PPUSH
70031: PPUSH
70032: PPUSH
// if not unit then
70033: LD_VAR 0 1
70037: NOT
70038: IFFALSE 70042
// exit ;
70040: GO 70313
// side := GetSide ( unit ) ;
70042: LD_ADDR_VAR 0 3
70046: PUSH
70047: LD_VAR 0 1
70051: PPUSH
70052: CALL_OW 255
70056: ST_TO_ADDR
// x := GetX ( unit ) ;
70057: LD_ADDR_VAR 0 5
70061: PUSH
70062: LD_VAR 0 1
70066: PPUSH
70067: CALL_OW 250
70071: ST_TO_ADDR
// y := GetY ( unit ) ;
70072: LD_ADDR_VAR 0 6
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: CALL_OW 251
70086: ST_TO_ADDR
// r := 8 ;
70087: LD_ADDR_VAR 0 4
70091: PUSH
70092: LD_INT 8
70094: ST_TO_ADDR
// if x - r < 0 then
70095: LD_VAR 0 5
70099: PUSH
70100: LD_VAR 0 4
70104: MINUS
70105: PUSH
70106: LD_INT 0
70108: LESS
70109: IFFALSE 70121
// min_x := 0 else
70111: LD_ADDR_VAR 0 7
70115: PUSH
70116: LD_INT 0
70118: ST_TO_ADDR
70119: GO 70137
// min_x := x - r ;
70121: LD_ADDR_VAR 0 7
70125: PUSH
70126: LD_VAR 0 5
70130: PUSH
70131: LD_VAR 0 4
70135: MINUS
70136: ST_TO_ADDR
// if y - r < 0 then
70137: LD_VAR 0 6
70141: PUSH
70142: LD_VAR 0 4
70146: MINUS
70147: PUSH
70148: LD_INT 0
70150: LESS
70151: IFFALSE 70163
// min_y := 0 else
70153: LD_ADDR_VAR 0 8
70157: PUSH
70158: LD_INT 0
70160: ST_TO_ADDR
70161: GO 70179
// min_y := y - r ;
70163: LD_ADDR_VAR 0 8
70167: PUSH
70168: LD_VAR 0 6
70172: PUSH
70173: LD_VAR 0 4
70177: MINUS
70178: ST_TO_ADDR
// max_x := x + r ;
70179: LD_ADDR_VAR 0 9
70183: PUSH
70184: LD_VAR 0 5
70188: PUSH
70189: LD_VAR 0 4
70193: PLUS
70194: ST_TO_ADDR
// max_y := y + r ;
70195: LD_ADDR_VAR 0 10
70199: PUSH
70200: LD_VAR 0 6
70204: PUSH
70205: LD_VAR 0 4
70209: PLUS
70210: ST_TO_ADDR
// for _x = min_x to max_x do
70211: LD_ADDR_VAR 0 11
70215: PUSH
70216: DOUBLE
70217: LD_VAR 0 7
70221: DEC
70222: ST_TO_ADDR
70223: LD_VAR 0 9
70227: PUSH
70228: FOR_TO
70229: IFFALSE 70311
// for _y = min_y to max_y do
70231: LD_ADDR_VAR 0 12
70235: PUSH
70236: DOUBLE
70237: LD_VAR 0 8
70241: DEC
70242: ST_TO_ADDR
70243: LD_VAR 0 10
70247: PUSH
70248: FOR_TO
70249: IFFALSE 70307
// begin if not ValidHex ( _x , _y ) then
70251: LD_VAR 0 11
70255: PPUSH
70256: LD_VAR 0 12
70260: PPUSH
70261: CALL_OW 488
70265: NOT
70266: IFFALSE 70270
// continue ;
70268: GO 70248
// if MineAtPos ( _x , _y ) then
70270: LD_VAR 0 11
70274: PPUSH
70275: LD_VAR 0 12
70279: PPUSH
70280: CALL_OW 458
70284: IFFALSE 70305
// ViewMineAtPos ( _x , _y , side ) ;
70286: LD_VAR 0 11
70290: PPUSH
70291: LD_VAR 0 12
70295: PPUSH
70296: LD_VAR 0 3
70300: PPUSH
70301: CALL_OW 457
// end ;
70305: GO 70248
70307: POP
70308: POP
70309: GO 70228
70311: POP
70312: POP
// end ;
70313: LD_VAR 0 2
70317: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
70318: LD_INT 0
70320: PPUSH
70321: PPUSH
70322: PPUSH
70323: PPUSH
70324: PPUSH
70325: PPUSH
// if not units then
70326: LD_VAR 0 1
70330: NOT
70331: IFFALSE 70335
// exit ;
70333: GO 70765
// scaners := [ ] ;
70335: LD_ADDR_VAR 0 6
70339: PUSH
70340: EMPTY
70341: ST_TO_ADDR
// for i in units do
70342: LD_ADDR_VAR 0 3
70346: PUSH
70347: LD_VAR 0 1
70351: PUSH
70352: FOR_IN
70353: IFFALSE 70510
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
70355: LD_VAR 0 3
70359: PPUSH
70360: CALL_OW 264
70364: PUSH
70365: LD_INT 11
70367: NONEQUAL
70368: IFTRUE 70382
70370: PUSH
70371: LD_VAR 0 3
70375: PPUSH
70376: CALL_OW 302
70380: NOT
70381: OR
70382: IFTRUE 70399
70384: PUSH
70385: LD_VAR 0 3
70389: PPUSH
70390: CALL_OW 110
70394: PUSH
70395: LD_INT 502
70397: EQUAL
70398: OR
70399: IFFALSE 70403
// continue ;
70401: GO 70352
// ComStop ( i ) ;
70403: LD_VAR 0 3
70407: PPUSH
70408: CALL_OW 141
// x := GetX ( i ) ;
70412: LD_ADDR_VAR 0 4
70416: PUSH
70417: LD_VAR 0 3
70421: PPUSH
70422: CALL_OW 250
70426: ST_TO_ADDR
// y := GetY ( i ) ;
70427: LD_ADDR_VAR 0 5
70431: PUSH
70432: LD_VAR 0 3
70436: PPUSH
70437: CALL_OW 251
70441: ST_TO_ADDR
// if GetSide ( i ) = your_side then
70442: LD_VAR 0 3
70446: PPUSH
70447: CALL_OW 255
70451: PUSH
70452: LD_OWVAR 2
70456: EQUAL
70457: IFFALSE 70476
// PlaySoundXY ( x , y , mineDetector ) ;
70459: LD_VAR 0 4
70463: PPUSH
70464: LD_VAR 0 5
70468: PPUSH
70469: LD_STRING mineDetector
70471: PPUSH
70472: CALL_OW 366
// scaners := Join ( scaners , i ) ;
70476: LD_ADDR_VAR 0 6
70480: PUSH
70481: LD_VAR 0 6
70485: PPUSH
70486: LD_VAR 0 3
70490: PPUSH
70491: CALL 42905 0 2
70495: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
70496: LD_VAR 0 3
70500: PPUSH
70501: LD_INT 502
70503: PPUSH
70504: CALL_OW 109
// end ;
70508: GO 70352
70510: POP
70511: POP
// if not scaners then
70512: LD_VAR 0 6
70516: NOT
70517: IFFALSE 70521
// exit ;
70519: GO 70765
// wait ( 3 ) ;
70521: LD_INT 3
70523: PPUSH
70524: CALL_OW 67
// timer := 6 ;
70528: LD_ADDR_VAR 0 7
70532: PUSH
70533: LD_INT 6
70535: ST_TO_ADDR
// repeat for i in scaners do
70536: LD_ADDR_VAR 0 3
70540: PUSH
70541: LD_VAR 0 6
70545: PUSH
70546: FOR_IN
70547: IFFALSE 70663
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
70549: LD_VAR 0 3
70553: PPUSH
70554: CALL_OW 302
70558: NOT
70559: IFTRUE 70572
70561: PUSH
70562: LD_VAR 0 3
70566: PPUSH
70567: CALL_OW 314
70571: OR
70572: IFTRUE 70603
70574: PUSH
70575: LD_VAR 0 3
70579: PPUSH
70580: CALL_OW 263
70584: PUSH
70585: LD_INT 1
70587: EQUAL
70588: IFFALSE 70602
70590: PUSH
70591: LD_VAR 0 3
70595: PPUSH
70596: CALL_OW 311
70600: NOT
70601: AND
70602: OR
70603: IFFALSE 70647
// begin SetUnitDisplayNumber ( i , 0 ) ;
70605: LD_VAR 0 3
70609: PPUSH
70610: LD_INT 0
70612: PPUSH
70613: CALL_OW 505
// SetTag ( i , 0 ) ;
70617: LD_VAR 0 3
70621: PPUSH
70622: LD_INT 0
70624: PPUSH
70625: CALL_OW 109
// scaners := scaners diff i ;
70629: LD_ADDR_VAR 0 6
70633: PUSH
70634: LD_VAR 0 6
70638: PUSH
70639: LD_VAR 0 3
70643: DIFF
70644: ST_TO_ADDR
// continue ;
70645: GO 70546
// end ; SetUnitDisplayNumber ( i , timer ) ;
70647: LD_VAR 0 3
70651: PPUSH
70652: LD_VAR 0 7
70656: PPUSH
70657: CALL_OW 505
// end ;
70661: GO 70546
70663: POP
70664: POP
// if not scaners then
70665: LD_VAR 0 6
70669: NOT
70670: IFFALSE 70674
// exit ;
70672: GO 70765
// timer := Dec ( timer ) ;
70674: LD_ADDR_VAR 0 7
70678: PUSH
70679: LD_VAR 0 7
70683: PPUSH
70684: CALL 44300 0 1
70688: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70689: LD_INT 35
70691: PPUSH
70692: CALL_OW 67
// until timer = 0 ;
70696: LD_VAR 0 7
70700: PUSH
70701: LD_INT 0
70703: EQUAL
70704: IFFALSE 70536
// if not scaners then
70706: LD_VAR 0 6
70710: NOT
70711: IFFALSE 70715
// exit ;
70713: GO 70765
// for i in scaners do
70715: LD_ADDR_VAR 0 3
70719: PUSH
70720: LD_VAR 0 6
70724: PUSH
70725: FOR_IN
70726: IFFALSE 70763
// begin SetUnitDisplayNumber ( i , 0 ) ;
70728: LD_VAR 0 3
70732: PPUSH
70733: LD_INT 0
70735: PPUSH
70736: CALL_OW 505
// SetTag ( i , 0 ) ;
70740: LD_VAR 0 3
70744: PPUSH
70745: LD_INT 0
70747: PPUSH
70748: CALL_OW 109
// RevealDetectorMine ( i ) ;
70752: LD_VAR 0 3
70756: PPUSH
70757: CALL 70020 0 1
// end ;
70761: GO 70725
70763: POP
70764: POP
// end ;
70765: LD_VAR 0 2
70769: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
70770: LD_INT 0
70772: PPUSH
// if p1 = mine_detector_mode then
70773: LD_VAR 0 2
70777: PUSH
70778: LD_INT 103
70780: EQUAL
70781: IFFALSE 70792
// DetectMine ( units ) ;
70783: LD_VAR 0 1
70787: PPUSH
70788: CALL 70318 0 1
// end ;
70792: LD_VAR 0 7
70796: RET
