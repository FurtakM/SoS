// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42022 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42022 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42022 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6803 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9541 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9541 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38303 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38411 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 38592 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 38512 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42022 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42022 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42022 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 62268 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 62388 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42022 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 41994 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 41994 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 57
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: IFFALSE 2485
// DialogueOn ;
2529: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2533: LD_EXP 18
2537: PPUSH
2538: LD_STRING DL-Intro-18
2540: PPUSH
2541: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2545: LD_EXP 18
2549: PPUSH
2550: LD_STRING DL-Intro-19
2552: PPUSH
2553: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2557: LD_EXP 18
2561: PPUSH
2562: LD_STRING DL-Intro-20
2564: PPUSH
2565: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2569: LD_EXP 20
2573: PPUSH
2574: LD_STRING DLt-Intro-21
2576: PPUSH
2577: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2581: LD_EXP 20
2585: PPUSH
2586: LD_STRING DLt-Intro-22
2588: PPUSH
2589: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2593: LD_EXP 20
2597: PPUSH
2598: LD_STRING DLt-Intro-23
2600: PPUSH
2601: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2605: LD_EXP 18
2609: PPUSH
2610: LD_STRING DL-Intro-24
2612: PPUSH
2613: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2617: LD_EXP 20
2621: PPUSH
2622: LD_STRING DLt-Intro-25
2624: PPUSH
2625: CALL_OW 88
// DialogueOff ;
2629: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2633: LD_STRING M2
2635: PPUSH
2636: CALL_OW 337
// Query ( Prepare ) ;
2640: LD_STRING Prepare
2642: PPUSH
2643: CALL_OW 97
// SaveForQuickRestart ;
2647: CALL_OW 22
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2656: LD_INT 22
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 30
2668: PUSH
2669: LD_INT 15
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: IFFALSE 2701
2686: GO 2688
2688: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2689: LD_EXP 18
2693: PPUSH
2694: LD_STRING DL-Cam-1
2696: PPUSH
2697: CALL_OW 88
2701: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2702: LD_OWVAR 1
2706: PUSH
2707: LD_EXP 4
2711: PUSH
2712: LD_INT 2
2714: DIV
2715: GREATEREQUAL
2716: IFFALSE 2741
2718: GO 2720
2720: DISABLE
// begin DialogueOn ;
2721: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2725: LD_EXP 18
2729: PPUSH
2730: LD_STRING DL-Faster-1
2732: PPUSH
2733: CALL_OW 88
// DialogueOff ;
2737: CALL_OW 7
// end ;
2741: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2742: LD_OWVAR 1
2746: PUSH
2747: LD_EXP 4
2751: PUSH
2752: LD_INT 2
2754: DIV
2755: PUSH
2756: LD_INT 10500
2758: PLUS
2759: GREATEREQUAL
2760: IFFALSE 2785
2762: GO 2764
2764: DISABLE
// begin DialogueOn ;
2765: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2769: LD_EXP 18
2773: PPUSH
2774: LD_STRING DL-Faster-2
2776: PPUSH
2777: CALL_OW 88
// DialogueOff ;
2781: CALL_OW 7
// end ;
2785: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2786: LD_INT 22
2788: PUSH
2789: LD_INT 2
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 57
2801: PUSH
2802: EMPTY
2803: LIST
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: LD_INT 30
2814: PUSH
2815: LD_INT 6
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 8
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 69
2857: PUSH
2858: LD_INT 22
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 3
2870: PUSH
2871: LD_INT 57
2873: PUSH
2874: EMPTY
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 3
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: AND
2901: PUSH
2902: LD_INT 22
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: LD_INT 57
2917: PUSH
2918: EMPTY
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 32
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: PUSH
2945: LD_INT 3
2947: GREATEREQUAL
2948: AND
2949: PUSH
2950: LD_INT 22
2952: PUSH
2953: LD_INT 2
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PUSH
2960: LD_INT 3
2962: PUSH
2963: LD_INT 57
2965: PUSH
2966: EMPTY
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 30
2975: PUSH
2976: LD_INT 5
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: AND
2993: PUSH
2994: LD_INT 22
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PUSH
3004: LD_INT 3
3006: PUSH
3007: LD_INT 57
3009: PUSH
3010: EMPTY
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 30
3019: PUSH
3020: LD_INT 30
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: PPUSH
3032: CALL_OW 69
3036: AND
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 2
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: LD_INT 57
3053: PUSH
3054: EMPTY
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: LD_INT 30
3066: PUSH
3067: LD_INT 26
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 30
3076: PUSH
3077: LD_INT 28
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 69
3098: AND
3099: IFFALSE 3136
3101: GO 3103
3103: DISABLE
// begin if tick <= 10 10$00 then
3104: LD_OWVAR 1
3108: PUSH
3109: LD_INT 21000
3111: LESSEQUAL
3112: IFFALSE 3121
// SetAchievement ( ACH_BOB ) ;
3114: LD_STRING ACH_BOB
3116: PPUSH
3117: CALL_OW 543
// baseDone := true ;
3121: LD_ADDR_EXP 5
3125: PUSH
3126: LD_INT 1
3128: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3129: LD_STRING M1out
3131: PPUSH
3132: CALL_OW 337
// end ;
3136: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3137: LD_EXP 5
3141: PUSH
3142: LD_INT 22
3144: PUSH
3145: LD_INT 2
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 21
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: LD_INT 2
3167: PUSH
3168: LD_INT 34
3170: PUSH
3171: LD_INT 32
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 34
3180: PUSH
3181: LD_INT 88
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 69
3206: PUSH
3207: LD_INT 22
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 21
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 23
3229: PUSH
3230: LD_INT 2
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: CALL 6803 0 1
3251: GREATEREQUAL
3252: AND
3253: IFFALSE 3345
3255: GO 3257
3257: DISABLE
// begin DialogueOn ;
3258: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3262: LD_EXP 18
3266: PPUSH
3267: LD_STRING DL-Ready-1
3269: PPUSH
3270: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3274: LD_INT 22
3276: PUSH
3277: LD_INT 2
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PUSH
3284: LD_INT 23
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: IFFALSE 3316
// Say ( Schulz , DL-Ready-2 ) ;
3304: LD_EXP 18
3308: PPUSH
3309: LD_STRING DL-Ready-2
3311: PPUSH
3312: CALL_OW 88
// DialogueOff ;
3316: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3320: LD_STRING M3
3322: PPUSH
3323: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3327: LD_INT 7
3329: PPUSH
3330: LD_INT 1
3332: PPUSH
3333: CALL_OW 424
// canGo := true ;
3337: LD_ADDR_EXP 6
3341: PUSH
3342: LD_INT 1
3344: ST_TO_ADDR
// end ;
3345: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3346: LD_EXP 6
3350: PUSH
3351: LD_INT 7
3353: PPUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 2
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 21
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 33
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: LD_INT 58
3389: PUSH
3390: EMPTY
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 70
3407: PPUSH
3408: CALL 6803 0 1
3412: PUSH
3413: LD_INT 22
3415: PUSH
3416: LD_INT 2
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 21
3425: PUSH
3426: LD_INT 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 23
3435: PUSH
3436: LD_INT 2
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 69
3452: PPUSH
3453: CALL 6803 0 1
3457: GREATEREQUAL
3458: AND
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 2
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 21
3472: PUSH
3473: LD_INT 1
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: LD_INT 55
3485: PUSH
3486: EMPTY
3487: LIST
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 23
3495: PUSH
3496: LD_INT 2
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PPUSH
3509: CALL_OW 69
3513: PPUSH
3514: CALL 6803 0 1
3518: PUSH
3519: LD_INT 0
3521: EQUAL
3522: AND
3523: IFFALSE 4576
3525: GO 3527
3527: DISABLE
3528: LD_INT 0
3530: PPUSH
3531: PPUSH
3532: PPUSH
3533: PPUSH
3534: PPUSH
// begin enable ;
3535: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 7
3543: PPUSH
3544: LD_INT 22
3546: PUSH
3547: LD_INT 2
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PPUSH
3568: CALL_OW 70
3572: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_INT 2
3580: PUSH
3581: LD_INT 34
3583: PUSH
3584: LD_INT 88
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 34
3593: PUSH
3594: LD_INT 32
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: PPUSH
3606: CALL_OW 72
3610: IFFALSE 3621
// begin Query ( InvalidWeapon ) ;
3612: LD_STRING InvalidWeapon
3614: PPUSH
3615: CALL_OW 97
// exit ;
3619: GO 4576
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3621: LD_VAR 0 2
3625: PPUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 24
3631: PUSH
3632: LD_INT 1000
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 72
3647: IFFALSE 3658
// begin Query ( HealthLevel ) ;
3649: LD_STRING HealthLevel
3651: PPUSH
3652: CALL_OW 97
// exit ;
3656: GO 4576
// end ; for i in tmp do
3658: LD_ADDR_VAR 0 1
3662: PUSH
3663: LD_VAR 0 2
3667: PUSH
3668: FOR_IN
3669: IFFALSE 3714
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3671: LD_VAR 0 1
3675: PPUSH
3676: CALL_OW 262
3680: PUSH
3681: LD_INT 1
3683: EQUAL
3684: PUSH
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 261
3694: PUSH
3695: LD_INT 60
3697: LESS
3698: AND
3699: IFFALSE 3712
// begin Query ( FuelLevel ) ;
3701: LD_STRING FuelLevel
3703: PPUSH
3704: CALL_OW 97
// exit ;
3708: POP
3709: POP
3710: GO 4576
// end ;
3712: GO 3668
3714: POP
3715: POP
// disable ;
3716: DISABLE
// saveVehicles := [ ] ;
3717: LD_ADDR_VAR 0 3
3721: PUSH
3722: EMPTY
3723: ST_TO_ADDR
// for i in tmp do
3724: LD_ADDR_VAR 0 1
3728: PUSH
3729: LD_VAR 0 2
3733: PUSH
3734: FOR_IN
3735: IFFALSE 3844
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: CALL_OW 265
3756: PUSH
3757: LD_VAR 0 1
3761: PPUSH
3762: CALL_OW 262
3766: PUSH
3767: LD_VAR 0 1
3771: PPUSH
3772: CALL_OW 263
3776: PUSH
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 264
3786: PUSH
3787: LD_VAR 0 1
3791: PPUSH
3792: CALL_OW 248
3796: PUSH
3797: LD_VAR 0 1
3801: PPUSH
3802: CALL_OW 261
3806: PUSH
3807: LD_VAR 0 1
3811: PPUSH
3812: CALL_OW 271
3816: PUSH
3817: LD_VAR 0 1
3821: PPUSH
3822: CALL_OW 311
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: PPUSH
3837: CALL 42022 0 2
3841: ST_TO_ADDR
3842: GO 3734
3844: POP
3845: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3846: LD_ADDR_VAR 0 4
3850: PUSH
3851: LD_INT 22
3853: PUSH
3854: LD_INT 2
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 21
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 50
3873: PUSH
3874: EMPTY
3875: LIST
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: PUSH
3887: LD_VAR 0 2
3891: DIFF
3892: ST_TO_ADDR
// if otherVehicles then
3893: LD_VAR 0 4
3897: IFFALSE 4073
// begin tmp := [ ] ;
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: EMPTY
3905: ST_TO_ADDR
// for i in otherVehicles do
3906: LD_ADDR_VAR 0 1
3910: PUSH
3911: LD_VAR 0 4
3915: PUSH
3916: FOR_IN
3917: IFFALSE 4059
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: LD_VAR 0 2
3928: PPUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: CALL_OW 265
3938: PUSH
3939: LD_VAR 0 1
3943: PPUSH
3944: CALL_OW 262
3948: PUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: CALL_OW 263
3958: PUSH
3959: LD_VAR 0 1
3963: PPUSH
3964: CALL_OW 264
3968: PUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: CALL_OW 248
3978: PUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 261
3988: PUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: CALL_OW 271
3998: PUSH
3999: LD_VAR 0 1
4003: PPUSH
4004: CALL_OW 250
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 251
4018: PUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: CALL_OW 254
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 256
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL 42022 0 2
4056: ST_TO_ADDR
4057: GO 3916
4059: POP
4060: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4061: LD_VAR 0 2
4065: PPUSH
4066: LD_STRING 09_otherVehicles
4068: PPUSH
4069: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) then
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_INT 32
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 72
4092: NOT
4093: IFFALSE 4102
// SetAchievement ( ACH_GREEN ) ;
4095: LD_STRING ACH_GREEN
4097: PPUSH
4098: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4102: LD_EXP 18
4106: PPUSH
4107: LD_STRING 09_Schulz
4109: PPUSH
4110: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4114: LD_EXP 18
4118: PPUSH
4119: LD_STRING 09_Schulz_ID
4121: PPUSH
4122: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4126: LD_EXP 20
4130: PPUSH
4131: LD_STRING 09_Lemmy
4133: PPUSH
4134: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4138: LD_EXP 20
4142: PPUSH
4143: LD_STRING 09_Lemmy_ID
4145: PPUSH
4146: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4150: LD_EXP 22
4154: PPUSH
4155: LD_STRING 09_Nia
4157: PPUSH
4158: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4162: LD_EXP 22
4166: PPUSH
4167: LD_STRING 09_Nia_ID
4169: PPUSH
4170: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4174: LD_EXP 21
4178: PPUSH
4179: LD_STRING 09_Mia
4181: PPUSH
4182: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4186: LD_EXP 21
4190: PPUSH
4191: LD_STRING 09_Mia_ID
4193: PPUSH
4194: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4198: LD_EXP 23
4202: PPUSH
4203: LD_STRING 09_Jenna
4205: PPUSH
4206: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4210: LD_EXP 23
4214: PPUSH
4215: LD_STRING 09_Jenna_ID
4217: PPUSH
4218: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4222: LD_EXP 26
4226: PPUSH
4227: LD_STRING 09_schulzSecondSquad
4229: PPUSH
4230: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4234: LD_ADDR_VAR 0 1
4238: PUSH
4239: DOUBLE
4240: LD_INT 1
4242: DEC
4243: ST_TO_ADDR
4244: LD_EXP 26
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4278
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4252: LD_EXP 26
4256: PUSH
4257: LD_VAR 0 1
4261: ARRAY
4262: PPUSH
4263: LD_STRING 09_random_ID_
4265: PUSH
4266: LD_VAR 0 1
4270: STR
4271: PPUSH
4272: CALL_OW 39
4276: GO 4249
4278: POP
4279: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4280: LD_VAR 0 3
4284: PPUSH
4285: LD_STRING 09_vehicles
4287: PPUSH
4288: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4292: LD_OWVAR 1
4296: PPUSH
4297: LD_STRING 09_tick
4299: PPUSH
4300: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4304: LD_INT 6
4306: PPUSH
4307: LD_STRING 09_env
4309: PPUSH
4310: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4314: LD_INT 2
4316: PPUSH
4317: LD_STRING 09_tech
4319: PPUSH
4320: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4324: LD_INT 2
4326: PPUSH
4327: LD_STRING 09_materials
4329: PPUSH
4330: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4334: LD_INT 2
4336: PPUSH
4337: LD_STRING 09_buildings
4339: PPUSH
4340: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4344: LD_INT 22
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 23
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: PPUSH
4373: LD_STRING 09_apes
4375: PPUSH
4376: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4380: LD_EXP 4
4384: PPUSH
4385: LD_STRING 09_timeToHeikeDead
4387: PPUSH
4388: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4392: LD_EXP 3
4396: PPUSH
4397: LD_STRING 09_cameras
4399: PPUSH
4400: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 23
4421: PUSH
4422: LD_INT 0
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 50
4431: PUSH
4432: EMPTY
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: ST_TO_ADDR
// if tmp then
4445: LD_VAR 0 2
4449: IFFALSE 4559
// begin animals := [ ] ;
4451: LD_ADDR_VAR 0 5
4455: PUSH
4456: EMPTY
4457: ST_TO_ADDR
// for i in tmp do
4458: LD_ADDR_VAR 0 1
4462: PUSH
4463: LD_VAR 0 2
4467: PUSH
4468: FOR_IN
4469: IFFALSE 4545
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4471: LD_ADDR_VAR 0 5
4475: PUSH
4476: LD_VAR 0 5
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 257
4490: PUSH
4491: LD_VAR 0 1
4495: PPUSH
4496: CALL_OW 250
4500: PUSH
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL_OW 251
4510: PUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 254
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL_OW 256
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL 42022 0 2
4542: ST_TO_ADDR
4543: GO 4468
4545: POP
4546: POP
// SaveVariable ( animals , 09_animals ) ;
4547: LD_VAR 0 5
4551: PPUSH
4552: LD_STRING 09_animals
4554: PPUSH
4555: CALL_OW 39
// end ; wait ( 3 ) ;
4559: LD_INT 3
4561: PPUSH
4562: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4566: LD_INT 1
4568: PPUSH
4569: LD_STRING %2
4571: PPUSH
4572: CALL_OW 340
// end ; end_of_file
4576: PPOPN 5
4578: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4579: LD_OWVAR 1
4583: PUSH
4584: LD_INT 14700
4586: LESS
4587: IFFALSE 4620
4589: GO 4591
4591: DISABLE
// begin enable ;
4592: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4593: LD_INT 1
4595: PPUSH
4596: LD_INT 5
4598: PPUSH
4599: CALL_OW 12
4603: PPUSH
4604: LD_INT 85
4606: PPUSH
4607: LD_INT 44
4609: PPUSH
4610: LD_INT 30
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 56
// end ;
4620: END
// every 0 0$29 trigger tick < 20 20$00 do
4621: LD_OWVAR 1
4625: PUSH
4626: LD_INT 42000
4628: LESS
4629: IFFALSE 4700
4631: GO 4633
4633: DISABLE
// begin enable ;
4634: ENABLE
// if Prob ( 50 ) then
4635: LD_INT 50
4637: PPUSH
4638: CALL_OW 13
4642: IFFALSE 4673
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 5
4649: PPUSH
4650: CALL_OW 12
4654: PPUSH
4655: LD_INT 72
4657: PPUSH
4658: LD_INT 109
4660: PPUSH
4661: LD_INT 22
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 56
4671: GO 4700
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4673: LD_INT 1
4675: PPUSH
4676: LD_INT 5
4678: PPUSH
4679: CALL_OW 12
4683: PPUSH
4684: LD_INT 140
4686: PPUSH
4687: LD_INT 73
4689: PPUSH
4690: LD_INT 22
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 56
4700: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4701: LD_INT 0
4703: PPUSH
4704: PPUSH
// if exist_mode then
4705: LD_VAR 0 2
4709: IFFALSE 4734
// unit := CreateCharacter ( prefix & ident ) else
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: LD_VAR 0 3
4720: PUSH
4721: LD_VAR 0 1
4725: STR
4726: PPUSH
4727: CALL_OW 34
4731: ST_TO_ADDR
4732: GO 4749
// unit := NewCharacter ( ident ) ;
4734: LD_ADDR_VAR 0 5
4738: PUSH
4739: LD_VAR 0 1
4743: PPUSH
4744: CALL_OW 25
4748: ST_TO_ADDR
// result := unit ;
4749: LD_ADDR_VAR 0 4
4753: PUSH
4754: LD_VAR 0 5
4758: ST_TO_ADDR
// end ;
4759: LD_VAR 0 4
4763: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4764: LD_INT 0
4766: PPUSH
4767: PPUSH
// if not side or not nation then
4768: LD_VAR 0 1
4772: NOT
4773: PUSH
4774: LD_VAR 0 2
4778: NOT
4779: OR
4780: IFFALSE 4784
// exit ;
4782: GO 5552
// case nation of nation_american :
4784: LD_VAR 0 2
4788: PUSH
4789: LD_INT 1
4791: DOUBLE
4792: EQUAL
4793: IFTRUE 4797
4795: GO 5011
4797: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_INT 35
4805: PUSH
4806: LD_INT 45
4808: PUSH
4809: LD_INT 46
4811: PUSH
4812: LD_INT 47
4814: PUSH
4815: LD_INT 82
4817: PUSH
4818: LD_INT 83
4820: PUSH
4821: LD_INT 84
4823: PUSH
4824: LD_INT 85
4826: PUSH
4827: LD_INT 86
4829: PUSH
4830: LD_INT 1
4832: PUSH
4833: LD_INT 2
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: LD_INT 15
4841: PUSH
4842: LD_INT 16
4844: PUSH
4845: LD_INT 7
4847: PUSH
4848: LD_INT 12
4850: PUSH
4851: LD_INT 13
4853: PUSH
4854: LD_INT 10
4856: PUSH
4857: LD_INT 14
4859: PUSH
4860: LD_INT 20
4862: PUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 22
4868: PUSH
4869: LD_INT 25
4871: PUSH
4872: LD_INT 32
4874: PUSH
4875: LD_INT 27
4877: PUSH
4878: LD_INT 36
4880: PUSH
4881: LD_INT 69
4883: PUSH
4884: LD_INT 39
4886: PUSH
4887: LD_INT 34
4889: PUSH
4890: LD_INT 40
4892: PUSH
4893: LD_INT 48
4895: PUSH
4896: LD_INT 49
4898: PUSH
4899: LD_INT 50
4901: PUSH
4902: LD_INT 51
4904: PUSH
4905: LD_INT 52
4907: PUSH
4908: LD_INT 53
4910: PUSH
4911: LD_INT 54
4913: PUSH
4914: LD_INT 55
4916: PUSH
4917: LD_INT 56
4919: PUSH
4920: LD_INT 57
4922: PUSH
4923: LD_INT 58
4925: PUSH
4926: LD_INT 59
4928: PUSH
4929: LD_INT 60
4931: PUSH
4932: LD_INT 61
4934: PUSH
4935: LD_INT 62
4937: PUSH
4938: LD_INT 80
4940: PUSH
4941: LD_INT 82
4943: PUSH
4944: LD_INT 83
4946: PUSH
4947: LD_INT 84
4949: PUSH
4950: LD_INT 85
4952: PUSH
4953: LD_INT 86
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
5009: GO 5476
5011: LD_INT 2
5013: DOUBLE
5014: EQUAL
5015: IFTRUE 5019
5017: GO 5245
5019: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: LD_INT 35
5027: PUSH
5028: LD_INT 45
5030: PUSH
5031: LD_INT 46
5033: PUSH
5034: LD_INT 47
5036: PUSH
5037: LD_INT 82
5039: PUSH
5040: LD_INT 83
5042: PUSH
5043: LD_INT 84
5045: PUSH
5046: LD_INT 85
5048: PUSH
5049: LD_INT 87
5051: PUSH
5052: LD_INT 70
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: LD_INT 11
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: LD_INT 4
5066: PUSH
5067: LD_INT 5
5069: PUSH
5070: LD_INT 6
5072: PUSH
5073: LD_INT 15
5075: PUSH
5076: LD_INT 18
5078: PUSH
5079: LD_INT 7
5081: PUSH
5082: LD_INT 17
5084: PUSH
5085: LD_INT 8
5087: PUSH
5088: LD_INT 20
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 72
5099: PUSH
5100: LD_INT 26
5102: PUSH
5103: LD_INT 69
5105: PUSH
5106: LD_INT 39
5108: PUSH
5109: LD_INT 40
5111: PUSH
5112: LD_INT 41
5114: PUSH
5115: LD_INT 42
5117: PUSH
5118: LD_INT 43
5120: PUSH
5121: LD_INT 48
5123: PUSH
5124: LD_INT 49
5126: PUSH
5127: LD_INT 50
5129: PUSH
5130: LD_INT 51
5132: PUSH
5133: LD_INT 52
5135: PUSH
5136: LD_INT 53
5138: PUSH
5139: LD_INT 54
5141: PUSH
5142: LD_INT 55
5144: PUSH
5145: LD_INT 56
5147: PUSH
5148: LD_INT 60
5150: PUSH
5151: LD_INT 61
5153: PUSH
5154: LD_INT 62
5156: PUSH
5157: LD_INT 66
5159: PUSH
5160: LD_INT 67
5162: PUSH
5163: LD_INT 68
5165: PUSH
5166: LD_INT 81
5168: PUSH
5169: LD_INT 82
5171: PUSH
5172: LD_INT 83
5174: PUSH
5175: LD_INT 84
5177: PUSH
5178: LD_INT 85
5180: PUSH
5181: LD_INT 87
5183: PUSH
5184: LD_INT 88
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: ST_TO_ADDR
5243: GO 5476
5245: LD_INT 3
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5475
5253: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: LD_INT 46
5261: PUSH
5262: LD_INT 47
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 82
5273: PUSH
5274: LD_INT 83
5276: PUSH
5277: LD_INT 84
5279: PUSH
5280: LD_INT 85
5282: PUSH
5283: LD_INT 86
5285: PUSH
5286: LD_INT 11
5288: PUSH
5289: LD_INT 9
5291: PUSH
5292: LD_INT 20
5294: PUSH
5295: LD_INT 19
5297: PUSH
5298: LD_INT 21
5300: PUSH
5301: LD_INT 24
5303: PUSH
5304: LD_INT 22
5306: PUSH
5307: LD_INT 25
5309: PUSH
5310: LD_INT 28
5312: PUSH
5313: LD_INT 29
5315: PUSH
5316: LD_INT 30
5318: PUSH
5319: LD_INT 31
5321: PUSH
5322: LD_INT 37
5324: PUSH
5325: LD_INT 38
5327: PUSH
5328: LD_INT 32
5330: PUSH
5331: LD_INT 27
5333: PUSH
5334: LD_INT 33
5336: PUSH
5337: LD_INT 69
5339: PUSH
5340: LD_INT 39
5342: PUSH
5343: LD_INT 34
5345: PUSH
5346: LD_INT 40
5348: PUSH
5349: LD_INT 71
5351: PUSH
5352: LD_INT 23
5354: PUSH
5355: LD_INT 44
5357: PUSH
5358: LD_INT 48
5360: PUSH
5361: LD_INT 49
5363: PUSH
5364: LD_INT 50
5366: PUSH
5367: LD_INT 51
5369: PUSH
5370: LD_INT 52
5372: PUSH
5373: LD_INT 53
5375: PUSH
5376: LD_INT 54
5378: PUSH
5379: LD_INT 55
5381: PUSH
5382: LD_INT 56
5384: PUSH
5385: LD_INT 57
5387: PUSH
5388: LD_INT 58
5390: PUSH
5391: LD_INT 59
5393: PUSH
5394: LD_INT 63
5396: PUSH
5397: LD_INT 64
5399: PUSH
5400: LD_INT 65
5402: PUSH
5403: LD_INT 82
5405: PUSH
5406: LD_INT 83
5408: PUSH
5409: LD_INT 84
5411: PUSH
5412: LD_INT 85
5414: PUSH
5415: LD_INT 86
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 5476
5475: POP
// if state > - 1 and state < 3 then
5476: LD_VAR 0 3
5480: PUSH
5481: LD_INT 1
5483: NEG
5484: GREATER
5485: PUSH
5486: LD_VAR 0 3
5490: PUSH
5491: LD_INT 3
5493: LESS
5494: AND
5495: IFFALSE 5552
// for i in result do
5497: LD_ADDR_VAR 0 5
5501: PUSH
5502: LD_VAR 0 4
5506: PUSH
5507: FOR_IN
5508: IFFALSE 5550
// if GetTech ( i , side ) <> state then
5510: LD_VAR 0 5
5514: PPUSH
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 321
5524: PUSH
5525: LD_VAR 0 3
5529: NONEQUAL
5530: IFFALSE 5548
// result := result diff i ;
5532: LD_ADDR_VAR 0 4
5536: PUSH
5537: LD_VAR 0 4
5541: PUSH
5542: LD_VAR 0 5
5546: DIFF
5547: ST_TO_ADDR
5548: GO 5507
5550: POP
5551: POP
// end ;
5552: LD_VAR 0 4
5556: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
// result := true ;
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_INT 1
5569: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5570: LD_ADDR_VAR 0 5
5574: PUSH
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 480
5584: ST_TO_ADDR
// if not tmp then
5585: LD_VAR 0 5
5589: NOT
5590: IFFALSE 5594
// exit ;
5592: GO 5643
// for i in tmp do
5594: LD_ADDR_VAR 0 4
5598: PUSH
5599: LD_VAR 0 5
5603: PUSH
5604: FOR_IN
5605: IFFALSE 5641
// if GetTech ( i , side ) <> state_researched then
5607: LD_VAR 0 4
5611: PPUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 321
5621: PUSH
5622: LD_INT 2
5624: NONEQUAL
5625: IFFALSE 5639
// begin result := false ;
5627: LD_ADDR_VAR 0 3
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// exit ;
5635: POP
5636: POP
5637: GO 5643
// end ;
5639: GO 5604
5641: POP
5642: POP
// end ;
5643: LD_VAR 0 3
5647: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5648: LD_INT 0
5650: PPUSH
5651: PPUSH
5652: PPUSH
5653: PPUSH
5654: PPUSH
5655: PPUSH
5656: PPUSH
5657: PPUSH
5658: PPUSH
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5663: LD_VAR 0 1
5667: NOT
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 257
5678: PUSH
5679: LD_INT 9
5681: NONEQUAL
5682: OR
5683: IFFALSE 5687
// exit ;
5685: GO 6260
// side := GetSide ( unit ) ;
5687: LD_ADDR_VAR 0 9
5691: PUSH
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 255
5701: ST_TO_ADDR
// tech_space := tech_spacanom ;
5702: LD_ADDR_VAR 0 12
5706: PUSH
5707: LD_INT 29
5709: ST_TO_ADDR
// tech_time := tech_taurad ;
5710: LD_ADDR_VAR 0 13
5714: PUSH
5715: LD_INT 28
5717: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5718: LD_ADDR_VAR 0 11
5722: PUSH
5723: LD_VAR 0 1
5727: PPUSH
5728: CALL_OW 310
5732: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5733: LD_VAR 0 11
5737: PPUSH
5738: CALL_OW 247
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5750
// exit ;
5748: GO 6260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5750: LD_ADDR_VAR 0 8
5754: PUSH
5755: LD_INT 81
5757: PUSH
5758: LD_VAR 0 9
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 3
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PPUSH
5788: CALL_OW 69
5792: ST_TO_ADDR
// if not tmp then
5793: LD_VAR 0 8
5797: NOT
5798: IFFALSE 5802
// exit ;
5800: GO 6260
// if in_unit then
5802: LD_VAR 0 11
5806: IFFALSE 5830
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5808: LD_ADDR_VAR 0 10
5812: PUSH
5813: LD_VAR 0 8
5817: PPUSH
5818: LD_VAR 0 11
5822: PPUSH
5823: CALL_OW 74
5827: ST_TO_ADDR
5828: GO 5850
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5830: LD_ADDR_VAR 0 10
5834: PUSH
5835: LD_VAR 0 8
5839: PPUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 74
5849: ST_TO_ADDR
// if not enemy then
5850: LD_VAR 0 10
5854: NOT
5855: IFFALSE 5859
// exit ;
5857: GO 6260
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5859: LD_VAR 0 11
5863: PUSH
5864: LD_VAR 0 11
5868: PPUSH
5869: LD_VAR 0 10
5873: PPUSH
5874: CALL_OW 296
5878: PUSH
5879: LD_INT 13
5881: GREATER
5882: AND
5883: PUSH
5884: LD_VAR 0 1
5888: PPUSH
5889: LD_VAR 0 10
5893: PPUSH
5894: CALL_OW 296
5898: PUSH
5899: LD_INT 12
5901: GREATER
5902: OR
5903: IFFALSE 5907
// exit ;
5905: GO 6260
// missile := [ 1 ] ;
5907: LD_ADDR_VAR 0 14
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: EMPTY
5916: LIST
5917: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5918: LD_VAR 0 9
5922: PPUSH
5923: LD_VAR 0 12
5927: PPUSH
5928: CALL_OW 325
5932: IFFALSE 5961
// missile := Replace ( missile , missile + 1 , 2 ) ;
5934: LD_ADDR_VAR 0 14
5938: PUSH
5939: LD_VAR 0 14
5943: PPUSH
5944: LD_VAR 0 14
5948: PUSH
5949: LD_INT 1
5951: PLUS
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 1
5960: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5961: LD_VAR 0 9
5965: PPUSH
5966: LD_VAR 0 13
5970: PPUSH
5971: CALL_OW 325
5975: PUSH
5976: LD_VAR 0 10
5980: PPUSH
5981: CALL_OW 255
5985: PPUSH
5986: LD_VAR 0 13
5990: PPUSH
5991: CALL_OW 325
5995: NOT
5996: AND
5997: IFFALSE 6026
// missile := Replace ( missile , missile + 1 , 3 ) ;
5999: LD_ADDR_VAR 0 14
6003: PUSH
6004: LD_VAR 0 14
6008: PPUSH
6009: LD_VAR 0 14
6013: PUSH
6014: LD_INT 1
6016: PLUS
6017: PPUSH
6018: LD_INT 3
6020: PPUSH
6021: CALL_OW 1
6025: ST_TO_ADDR
// if missile < 2 then
6026: LD_VAR 0 14
6030: PUSH
6031: LD_INT 2
6033: LESS
6034: IFFALSE 6038
// exit ;
6036: GO 6260
// x := GetX ( enemy ) ;
6038: LD_ADDR_VAR 0 4
6042: PUSH
6043: LD_VAR 0 10
6047: PPUSH
6048: CALL_OW 250
6052: ST_TO_ADDR
// y := GetY ( enemy ) ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_VAR 0 10
6062: PPUSH
6063: CALL_OW 251
6067: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6068: LD_ADDR_VAR 0 6
6072: PUSH
6073: LD_VAR 0 4
6077: PUSH
6078: LD_INT 1
6080: NEG
6081: PPUSH
6082: LD_INT 1
6084: PPUSH
6085: CALL_OW 12
6089: PLUS
6090: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6091: LD_ADDR_VAR 0 7
6095: PUSH
6096: LD_VAR 0 5
6100: PUSH
6101: LD_INT 1
6103: NEG
6104: PPUSH
6105: LD_INT 1
6107: PPUSH
6108: CALL_OW 12
6112: PLUS
6113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6114: LD_VAR 0 6
6118: PPUSH
6119: LD_VAR 0 7
6123: PPUSH
6124: CALL_OW 488
6128: NOT
6129: IFFALSE 6151
// begin _x := x ;
6131: LD_ADDR_VAR 0 6
6135: PUSH
6136: LD_VAR 0 4
6140: ST_TO_ADDR
// _y := y ;
6141: LD_ADDR_VAR 0 7
6145: PUSH
6146: LD_VAR 0 5
6150: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: LD_INT 1
6158: PPUSH
6159: LD_VAR 0 14
6163: PPUSH
6164: CALL_OW 12
6168: ST_TO_ADDR
// case i of 1 :
6169: LD_VAR 0 3
6173: PUSH
6174: LD_INT 1
6176: DOUBLE
6177: EQUAL
6178: IFTRUE 6182
6180: GO 6199
6182: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6183: LD_VAR 0 1
6187: PPUSH
6188: LD_VAR 0 10
6192: PPUSH
6193: CALL_OW 115
6197: GO 6260
6199: LD_INT 2
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6229
6207: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6208: LD_VAR 0 1
6212: PPUSH
6213: LD_VAR 0 6
6217: PPUSH
6218: LD_VAR 0 7
6222: PPUSH
6223: CALL_OW 153
6227: GO 6260
6229: LD_INT 3
6231: DOUBLE
6232: EQUAL
6233: IFTRUE 6237
6235: GO 6259
6237: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6238: LD_VAR 0 1
6242: PPUSH
6243: LD_VAR 0 6
6247: PPUSH
6248: LD_VAR 0 7
6252: PPUSH
6253: CALL_OW 154
6257: GO 6260
6259: POP
// end ;
6260: LD_VAR 0 2
6264: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
6270: PPUSH
6271: PPUSH
6272: PPUSH
// if not unit or not building then
6273: LD_VAR 0 1
6277: NOT
6278: PUSH
6279: LD_VAR 0 2
6283: NOT
6284: OR
6285: IFFALSE 6289
// exit ;
6287: GO 6447
// x := GetX ( building ) ;
6289: LD_ADDR_VAR 0 5
6293: PUSH
6294: LD_VAR 0 2
6298: PPUSH
6299: CALL_OW 250
6303: ST_TO_ADDR
// y := GetY ( building ) ;
6304: LD_ADDR_VAR 0 6
6308: PUSH
6309: LD_VAR 0 2
6313: PPUSH
6314: CALL_OW 251
6318: ST_TO_ADDR
// for i = 0 to 5 do
6319: LD_ADDR_VAR 0 4
6323: PUSH
6324: DOUBLE
6325: LD_INT 0
6327: DEC
6328: ST_TO_ADDR
6329: LD_INT 5
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6445
// begin _x := ShiftX ( x , i , 3 ) ;
6335: LD_ADDR_VAR 0 7
6339: PUSH
6340: LD_VAR 0 5
6344: PPUSH
6345: LD_VAR 0 4
6349: PPUSH
6350: LD_INT 3
6352: PPUSH
6353: CALL_OW 272
6357: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6358: LD_ADDR_VAR 0 8
6362: PUSH
6363: LD_VAR 0 6
6367: PPUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PPUSH
6376: CALL_OW 273
6380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6381: LD_VAR 0 7
6385: PPUSH
6386: LD_VAR 0 8
6390: PPUSH
6391: CALL_OW 488
6395: NOT
6396: IFFALSE 6400
// continue ;
6398: GO 6332
// if HexInfo ( _x , _y ) = 0 then
6400: LD_VAR 0 7
6404: PPUSH
6405: LD_VAR 0 8
6409: PPUSH
6410: CALL_OW 428
6414: PUSH
6415: LD_INT 0
6417: EQUAL
6418: IFFALSE 6443
// begin ComMoveXY ( unit , _x , _y ) ;
6420: LD_VAR 0 1
6424: PPUSH
6425: LD_VAR 0 7
6429: PPUSH
6430: LD_VAR 0 8
6434: PPUSH
6435: CALL_OW 111
// exit ;
6439: POP
6440: POP
6441: GO 6447
// end ; end ;
6443: GO 6332
6445: POP
6446: POP
// end ;
6447: LD_VAR 0 3
6451: RET
// export function ScanBase ( side , base_area ) ; begin
6452: LD_INT 0
6454: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: LD_VAR 0 2
6464: PPUSH
6465: LD_INT 81
6467: PUSH
6468: LD_VAR 0 1
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 70
6481: ST_TO_ADDR
// end ;
6482: LD_VAR 0 3
6486: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// result := false ;
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_INT 0
6500: ST_TO_ADDR
// side := GetSide ( unit ) ;
6501: LD_ADDR_VAR 0 3
6505: PUSH
6506: LD_VAR 0 1
6510: PPUSH
6511: CALL_OW 255
6515: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: CALL_OW 248
6530: ST_TO_ADDR
// case nat of 1 :
6531: LD_VAR 0 4
6535: PUSH
6536: LD_INT 1
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6555
6544: POP
// tech := tech_lassight ; 2 :
6545: LD_ADDR_VAR 0 5
6549: PUSH
6550: LD_INT 12
6552: ST_TO_ADDR
6553: GO 6594
6555: LD_INT 2
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6574
6563: POP
// tech := tech_mortar ; 3 :
6564: LD_ADDR_VAR 0 5
6568: PUSH
6569: LD_INT 41
6571: ST_TO_ADDR
6572: GO 6594
6574: LD_INT 3
6576: DOUBLE
6577: EQUAL
6578: IFTRUE 6582
6580: GO 6593
6582: POP
// tech := tech_bazooka ; end ;
6583: LD_ADDR_VAR 0 5
6587: PUSH
6588: LD_INT 44
6590: ST_TO_ADDR
6591: GO 6594
6593: POP
// if Researched ( side , tech ) then
6594: LD_VAR 0 3
6598: PPUSH
6599: LD_VAR 0 5
6603: PPUSH
6604: CALL_OW 325
6608: IFFALSE 6635
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6610: LD_ADDR_VAR 0 2
6614: PUSH
6615: LD_INT 5
6617: PUSH
6618: LD_INT 8
6620: PUSH
6621: LD_INT 9
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: LD_VAR 0 4
6633: ARRAY
6634: ST_TO_ADDR
// end ;
6635: LD_VAR 0 2
6639: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
6644: PPUSH
// if not mines then
6645: LD_VAR 0 2
6649: NOT
6650: IFFALSE 6654
// exit ;
6652: GO 6798
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6654: LD_ADDR_VAR 0 5
6658: PUSH
6659: LD_INT 81
6661: PUSH
6662: LD_VAR 0 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PPUSH
6692: CALL_OW 69
6696: ST_TO_ADDR
// for i in mines do
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: LD_VAR 0 2
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6796
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 4
6723: PUSH
6724: LD_INT 2
6726: ARRAY
6727: PPUSH
6728: CALL_OW 458
6732: NOT
6733: IFFALSE 6737
// continue ;
6735: GO 6707
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6737: LD_VAR 0 4
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 4
6750: PUSH
6751: LD_INT 2
6753: ARRAY
6754: PPUSH
6755: CALL_OW 428
6759: PUSH
6760: LD_VAR 0 5
6764: IN
6765: IFFALSE 6794
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6767: LD_VAR 0 4
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PPUSH
6776: LD_VAR 0 4
6780: PUSH
6781: LD_INT 2
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 1
6789: PPUSH
6790: CALL_OW 456
// end ;
6794: GO 6707
6796: POP
6797: POP
// end ;
6798: LD_VAR 0 3
6802: RET
// export function Count ( array ) ; begin
6803: LD_INT 0
6805: PPUSH
// result := array + 0 ;
6806: LD_ADDR_VAR 0 2
6810: PUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 0
6818: PLUS
6819: ST_TO_ADDR
// end ;
6820: LD_VAR 0 2
6824: RET
// export function IsEmpty ( building ) ; begin
6825: LD_INT 0
6827: PPUSH
// if not building then
6828: LD_VAR 0 1
6832: NOT
6833: IFFALSE 6837
// exit ;
6835: GO 6880
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6837: LD_ADDR_VAR 0 2
6841: PUSH
6842: LD_VAR 0 1
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 255
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 58
6866: PUSH
6867: EMPTY
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PPUSH
6874: CALL_OW 69
6878: IN
6879: ST_TO_ADDR
// end ;
6880: LD_VAR 0 2
6884: RET
// export function IsNotFull ( building ) ; var places ; begin
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// if not building then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6926
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_INT 3
6910: PUSH
6911: LD_INT 62
6913: PUSH
6914: EMPTY
6915: LIST
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PPUSH
6921: CALL_OW 72
6925: ST_TO_ADDR
// end ;
6926: LD_VAR 0 2
6930: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6931: LD_INT 0
6933: PPUSH
6934: PPUSH
6935: PPUSH
6936: PPUSH
// tmp := [ ] ;
6937: LD_ADDR_VAR 0 3
6941: PUSH
6942: EMPTY
6943: ST_TO_ADDR
// list := [ ] ;
6944: LD_ADDR_VAR 0 5
6948: PUSH
6949: EMPTY
6950: ST_TO_ADDR
// for i = 16 to 25 do
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: DOUBLE
6957: LD_INT 16
6959: DEC
6960: ST_TO_ADDR
6961: LD_INT 25
6963: PUSH
6964: FOR_TO
6965: IFFALSE 7038
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_VAR 0 3
6976: PUSH
6977: LD_INT 22
6979: PUSH
6980: LD_VAR 0 1
6984: PPUSH
6985: CALL_OW 255
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 91
6996: PUSH
6997: LD_VAR 0 1
7001: PUSH
7002: LD_INT 6
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_VAR 0 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: ADD
7035: ST_TO_ADDR
7036: GO 6964
7038: POP
7039: POP
// for i = 1 to tmp do
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_VAR 0 3
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7144
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7058: LD_ADDR_VAR 0 5
7062: PUSH
7063: LD_VAR 0 5
7067: PUSH
7068: LD_VAR 0 3
7072: PUSH
7073: LD_VAR 0 4
7077: ARRAY
7078: PPUSH
7079: CALL_OW 266
7083: PUSH
7084: LD_VAR 0 3
7088: PUSH
7089: LD_VAR 0 4
7093: ARRAY
7094: PPUSH
7095: CALL_OW 250
7099: PUSH
7100: LD_VAR 0 3
7104: PUSH
7105: LD_VAR 0 4
7109: ARRAY
7110: PPUSH
7111: CALL_OW 251
7115: PUSH
7116: LD_VAR 0 3
7120: PUSH
7121: LD_VAR 0 4
7125: ARRAY
7126: PPUSH
7127: CALL_OW 254
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: ADD
7141: ST_TO_ADDR
7142: GO 7055
7144: POP
7145: POP
// result := list ;
7146: LD_ADDR_VAR 0 2
7150: PUSH
7151: LD_VAR 0 5
7155: ST_TO_ADDR
// end ;
7156: LD_VAR 0 2
7160: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7161: LD_INT 0
7163: PPUSH
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
7169: PPUSH
// if not factory then
7170: LD_VAR 0 1
7174: NOT
7175: IFFALSE 7179
// exit ;
7177: GO 7772
// if control = control_apeman then
7179: LD_VAR 0 4
7183: PUSH
7184: LD_INT 5
7186: EQUAL
7187: IFFALSE 7296
// begin tmp := UnitsInside ( factory ) ;
7189: LD_ADDR_VAR 0 8
7193: PUSH
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 313
7203: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7204: LD_VAR 0 8
7208: PPUSH
7209: LD_INT 25
7211: PUSH
7212: LD_INT 12
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 72
7223: NOT
7224: IFFALSE 7234
// control := control_manual ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_INT 1
7233: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7234: LD_ADDR_VAR 0 8
7238: PUSH
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL 6931 0 1
7248: ST_TO_ADDR
// if tmp then
7249: LD_VAR 0 8
7253: IFFALSE 7296
// begin for i in tmp do
7255: LD_ADDR_VAR 0 7
7259: PUSH
7260: LD_VAR 0 8
7264: PUSH
7265: FOR_IN
7266: IFFALSE 7294
// if i [ 1 ] = b_ext_radio then
7268: LD_VAR 0 7
7272: PUSH
7273: LD_INT 1
7275: ARRAY
7276: PUSH
7277: LD_INT 22
7279: EQUAL
7280: IFFALSE 7292
// begin control := control_remote ;
7282: LD_ADDR_VAR 0 4
7286: PUSH
7287: LD_INT 2
7289: ST_TO_ADDR
// break ;
7290: GO 7294
// end ;
7292: GO 7265
7294: POP
7295: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_VAR 0 2
7305: PPUSH
7306: LD_VAR 0 3
7310: PPUSH
7311: LD_VAR 0 4
7315: PPUSH
7316: LD_VAR 0 5
7320: PPUSH
7321: CALL_OW 448
7325: IFFALSE 7360
// begin result := [ chassis , engine , control , weapon ] ;
7327: LD_ADDR_VAR 0 6
7331: PUSH
7332: LD_VAR 0 2
7336: PUSH
7337: LD_VAR 0 3
7341: PUSH
7342: LD_VAR 0 4
7346: PUSH
7347: LD_VAR 0 5
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: ST_TO_ADDR
// exit ;
7358: GO 7772
// end ; _chassis := AvailableChassisList ( factory ) ;
7360: LD_ADDR_VAR 0 9
7364: PUSH
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL_OW 475
7374: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7375: LD_ADDR_VAR 0 11
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 476
7389: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7390: LD_ADDR_VAR 0 12
7394: PUSH
7395: LD_VAR 0 1
7399: PPUSH
7400: CALL_OW 477
7404: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: LD_VAR 0 1
7414: PPUSH
7415: CALL_OW 478
7419: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7420: LD_VAR 0 9
7424: NOT
7425: PUSH
7426: LD_VAR 0 11
7430: NOT
7431: OR
7432: PUSH
7433: LD_VAR 0 12
7437: NOT
7438: OR
7439: PUSH
7440: LD_VAR 0 10
7444: NOT
7445: OR
7446: IFFALSE 7481
// begin result := [ chassis , engine , control , weapon ] ;
7448: LD_ADDR_VAR 0 6
7452: PUSH
7453: LD_VAR 0 2
7457: PUSH
7458: LD_VAR 0 3
7462: PUSH
7463: LD_VAR 0 4
7467: PUSH
7468: LD_VAR 0 5
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: ST_TO_ADDR
// exit ;
7479: GO 7772
// end ; if not chassis in _chassis then
7481: LD_VAR 0 2
7485: PUSH
7486: LD_VAR 0 9
7490: IN
7491: NOT
7492: IFFALSE 7518
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7494: LD_ADDR_VAR 0 2
7498: PUSH
7499: LD_VAR 0 9
7503: PUSH
7504: LD_INT 1
7506: PPUSH
7507: LD_VAR 0 9
7511: PPUSH
7512: CALL_OW 12
7516: ARRAY
7517: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_VAR 0 3
7527: PPUSH
7528: CALL 7777 0 2
7532: NOT
7533: IFFALSE 7592
// repeat engine := _engine [ 1 ] ;
7535: LD_ADDR_VAR 0 3
7539: PUSH
7540: LD_VAR 0 11
7544: PUSH
7545: LD_INT 1
7547: ARRAY
7548: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7549: LD_ADDR_VAR 0 11
7553: PUSH
7554: LD_VAR 0 11
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 3
7566: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7567: LD_VAR 0 2
7571: PPUSH
7572: LD_VAR 0 3
7576: PPUSH
7577: CALL 7777 0 2
7581: PUSH
7582: LD_VAR 0 11
7586: PUSH
7587: EMPTY
7588: EQUAL
7589: OR
7590: IFFALSE 7535
// if not control in _control then
7592: LD_VAR 0 4
7596: PUSH
7597: LD_VAR 0 12
7601: IN
7602: NOT
7603: IFFALSE 7629
// control := _control [ rand ( 1 , _control ) ] ;
7605: LD_ADDR_VAR 0 4
7609: PUSH
7610: LD_VAR 0 12
7614: PUSH
7615: LD_INT 1
7617: PPUSH
7618: LD_VAR 0 12
7622: PPUSH
7623: CALL_OW 12
7627: ARRAY
7628: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7629: LD_VAR 0 2
7633: PPUSH
7634: LD_VAR 0 5
7638: PPUSH
7639: CALL 7997 0 2
7643: NOT
7644: IFFALSE 7703
// repeat weapon := _weapon [ 1 ] ;
7646: LD_ADDR_VAR 0 5
7650: PUSH
7651: LD_VAR 0 10
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7660: LD_ADDR_VAR 0 10
7664: PUSH
7665: LD_VAR 0 10
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: CALL_OW 3
7677: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7678: LD_VAR 0 2
7682: PPUSH
7683: LD_VAR 0 5
7687: PPUSH
7688: CALL 7997 0 2
7692: PUSH
7693: LD_VAR 0 10
7697: PUSH
7698: EMPTY
7699: EQUAL
7700: OR
7701: IFFALSE 7646
// result := [ ] ;
7703: LD_ADDR_VAR 0 6
7707: PUSH
7708: EMPTY
7709: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7710: LD_VAR 0 1
7714: PPUSH
7715: LD_VAR 0 2
7719: PPUSH
7720: LD_VAR 0 3
7724: PPUSH
7725: LD_VAR 0 4
7729: PPUSH
7730: LD_VAR 0 5
7734: PPUSH
7735: CALL_OW 448
7739: IFFALSE 7772
// result := [ chassis , engine , control , weapon ] ;
7741: LD_ADDR_VAR 0 6
7745: PUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 3
7755: PUSH
7756: LD_VAR 0 4
7760: PUSH
7761: LD_VAR 0 5
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: ST_TO_ADDR
// end ;
7772: LD_VAR 0 6
7776: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7777: LD_INT 0
7779: PPUSH
// if not chassis or not engine then
7780: LD_VAR 0 1
7784: NOT
7785: PUSH
7786: LD_VAR 0 2
7790: NOT
7791: OR
7792: IFFALSE 7796
// exit ;
7794: GO 7992
// case engine of engine_solar :
7796: LD_VAR 0 2
7800: PUSH
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7847
7809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7810: LD_ADDR_VAR 0 3
7814: PUSH
7815: LD_INT 11
7817: PUSH
7818: LD_INT 12
7820: PUSH
7821: LD_INT 13
7823: PUSH
7824: LD_INT 14
7826: PUSH
7827: LD_INT 1
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: ST_TO_ADDR
7845: GO 7976
7847: LD_INT 1
7849: DOUBLE
7850: EQUAL
7851: IFTRUE 7855
7853: GO 7917
7855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7856: LD_ADDR_VAR 0 3
7860: PUSH
7861: LD_INT 11
7863: PUSH
7864: LD_INT 12
7866: PUSH
7867: LD_INT 13
7869: PUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: LD_INT 4
7884: PUSH
7885: LD_INT 5
7887: PUSH
7888: LD_INT 21
7890: PUSH
7891: LD_INT 23
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 24
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: ST_TO_ADDR
7915: GO 7976
7917: LD_INT 3
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7975
7925: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7926: LD_ADDR_VAR 0 3
7930: PUSH
7931: LD_INT 13
7933: PUSH
7934: LD_INT 14
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: LD_INT 3
7942: PUSH
7943: LD_INT 4
7945: PUSH
7946: LD_INT 5
7948: PUSH
7949: LD_INT 21
7951: PUSH
7952: LD_INT 22
7954: PUSH
7955: LD_INT 23
7957: PUSH
7958: LD_INT 24
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 7976
7975: POP
// result := ( chassis in result ) ;
7976: LD_ADDR_VAR 0 3
7980: PUSH
7981: LD_VAR 0 1
7985: PUSH
7986: LD_VAR 0 3
7990: IN
7991: ST_TO_ADDR
// end ;
7992: LD_VAR 0 3
7996: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7997: LD_INT 0
7999: PPUSH
// if not chassis or not weapon then
8000: LD_VAR 0 1
8004: NOT
8005: PUSH
8006: LD_VAR 0 2
8010: NOT
8011: OR
8012: IFFALSE 8016
// exit ;
8014: GO 9076
// case weapon of us_machine_gun :
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 2
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8059
8029: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8030: LD_ADDR_VAR 0 3
8034: PUSH
8035: LD_INT 1
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 3
8043: PUSH
8044: LD_INT 4
8046: PUSH
8047: LD_INT 5
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: ST_TO_ADDR
8057: GO 9060
8059: LD_INT 3
8061: DOUBLE
8062: EQUAL
8063: IFTRUE 8067
8065: GO 8097
8067: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8068: LD_ADDR_VAR 0 3
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 4
8084: PUSH
8085: LD_INT 5
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: ST_TO_ADDR
8095: GO 9060
8097: LD_INT 11
8099: DOUBLE
8100: EQUAL
8101: IFTRUE 8105
8103: GO 8135
8105: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8106: LD_ADDR_VAR 0 3
8110: PUSH
8111: LD_INT 1
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: LD_INT 5
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: ST_TO_ADDR
8133: GO 9060
8135: LD_INT 4
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8169
8143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: LD_INT 3
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: LD_INT 5
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: ST_TO_ADDR
8167: GO 9060
8169: LD_INT 5
8171: DOUBLE
8172: EQUAL
8173: IFTRUE 8177
8175: GO 8203
8177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8178: LD_ADDR_VAR 0 3
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: LD_INT 4
8191: PUSH
8192: LD_INT 5
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: ST_TO_ADDR
8201: GO 9060
8203: LD_INT 9
8205: DOUBLE
8206: EQUAL
8207: IFTRUE 8211
8209: GO 8237
8211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8212: LD_ADDR_VAR 0 3
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: LD_INT 5
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: ST_TO_ADDR
8235: GO 9060
8237: LD_INT 7
8239: DOUBLE
8240: EQUAL
8241: IFTRUE 8245
8243: GO 8271
8245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8246: LD_ADDR_VAR 0 3
8250: PUSH
8251: LD_INT 2
8253: PUSH
8254: LD_INT 3
8256: PUSH
8257: LD_INT 4
8259: PUSH
8260: LD_INT 5
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: ST_TO_ADDR
8269: GO 9060
8271: LD_INT 12
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8305
8279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8280: LD_ADDR_VAR 0 3
8284: PUSH
8285: LD_INT 2
8287: PUSH
8288: LD_INT 3
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: ST_TO_ADDR
8303: GO 9060
8305: LD_INT 13
8307: DOUBLE
8308: EQUAL
8309: IFTRUE 8313
8311: GO 8339
8313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8314: LD_ADDR_VAR 0 3
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: LD_INT 3
8324: PUSH
8325: LD_INT 4
8327: PUSH
8328: LD_INT 5
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: ST_TO_ADDR
8337: GO 9060
8339: LD_INT 14
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8365
8347: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8348: LD_ADDR_VAR 0 3
8352: PUSH
8353: LD_INT 4
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: ST_TO_ADDR
8363: GO 9060
8365: LD_INT 6
8367: DOUBLE
8368: EQUAL
8369: IFTRUE 8373
8371: GO 8391
8373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8374: LD_ADDR_VAR 0 3
8378: PUSH
8379: LD_INT 4
8381: PUSH
8382: LD_INT 5
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: ST_TO_ADDR
8389: GO 9060
8391: LD_INT 10
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8417
8399: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8400: LD_ADDR_VAR 0 3
8404: PUSH
8405: LD_INT 4
8407: PUSH
8408: LD_INT 5
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: ST_TO_ADDR
8415: GO 9060
8417: LD_INT 22
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8425
8423: GO 8451
8425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_INT 11
8433: PUSH
8434: LD_INT 12
8436: PUSH
8437: LD_INT 13
8439: PUSH
8440: LD_INT 14
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
8449: GO 9060
8451: LD_INT 23
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8485
8459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8460: LD_ADDR_VAR 0 3
8464: PUSH
8465: LD_INT 11
8467: PUSH
8468: LD_INT 12
8470: PUSH
8471: LD_INT 13
8473: PUSH
8474: LD_INT 14
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
8483: GO 9060
8485: LD_INT 24
8487: DOUBLE
8488: EQUAL
8489: IFTRUE 8493
8491: GO 8519
8493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8494: LD_ADDR_VAR 0 3
8498: PUSH
8499: LD_INT 11
8501: PUSH
8502: LD_INT 12
8504: PUSH
8505: LD_INT 13
8507: PUSH
8508: LD_INT 14
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: ST_TO_ADDR
8517: GO 9060
8519: LD_INT 30
8521: DOUBLE
8522: EQUAL
8523: IFTRUE 8527
8525: GO 8553
8527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8528: LD_ADDR_VAR 0 3
8532: PUSH
8533: LD_INT 11
8535: PUSH
8536: LD_INT 12
8538: PUSH
8539: LD_INT 13
8541: PUSH
8542: LD_INT 14
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: ST_TO_ADDR
8551: GO 9060
8553: LD_INT 25
8555: DOUBLE
8556: EQUAL
8557: IFTRUE 8561
8559: GO 8579
8561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8562: LD_ADDR_VAR 0 3
8566: PUSH
8567: LD_INT 13
8569: PUSH
8570: LD_INT 14
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: ST_TO_ADDR
8577: GO 9060
8579: LD_INT 27
8581: DOUBLE
8582: EQUAL
8583: IFTRUE 8587
8585: GO 8605
8587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8588: LD_ADDR_VAR 0 3
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: ST_TO_ADDR
8603: GO 9060
8605: LD_INT 92
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8613
8611: GO 8639
8613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 11
8621: PUSH
8622: LD_INT 12
8624: PUSH
8625: LD_INT 13
8627: PUSH
8628: LD_INT 14
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: ST_TO_ADDR
8637: GO 9060
8639: LD_INT 28
8641: DOUBLE
8642: EQUAL
8643: IFTRUE 8647
8645: GO 8665
8647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_INT 13
8655: PUSH
8656: LD_INT 14
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: ST_TO_ADDR
8663: GO 9060
8665: LD_INT 29
8667: DOUBLE
8668: EQUAL
8669: IFTRUE 8673
8671: GO 8691
8673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8674: LD_ADDR_VAR 0 3
8678: PUSH
8679: LD_INT 13
8681: PUSH
8682: LD_INT 14
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: ST_TO_ADDR
8689: GO 9060
8691: LD_INT 31
8693: DOUBLE
8694: EQUAL
8695: IFTRUE 8699
8697: GO 8717
8699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8700: LD_ADDR_VAR 0 3
8704: PUSH
8705: LD_INT 13
8707: PUSH
8708: LD_INT 14
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: ST_TO_ADDR
8715: GO 9060
8717: LD_INT 26
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8743
8725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8726: LD_ADDR_VAR 0 3
8730: PUSH
8731: LD_INT 13
8733: PUSH
8734: LD_INT 14
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: ST_TO_ADDR
8741: GO 9060
8743: LD_INT 42
8745: DOUBLE
8746: EQUAL
8747: IFTRUE 8751
8749: GO 8777
8751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: LD_INT 21
8759: PUSH
8760: LD_INT 22
8762: PUSH
8763: LD_INT 23
8765: PUSH
8766: LD_INT 24
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
8775: GO 9060
8777: LD_INT 43
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8811
8785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8786: LD_ADDR_VAR 0 3
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 23
8799: PUSH
8800: LD_INT 24
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: ST_TO_ADDR
8809: GO 9060
8811: LD_INT 44
8813: DOUBLE
8814: EQUAL
8815: IFTRUE 8819
8817: GO 8845
8819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8820: LD_ADDR_VAR 0 3
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_INT 23
8833: PUSH
8834: LD_INT 24
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: ST_TO_ADDR
8843: GO 9060
8845: LD_INT 45
8847: DOUBLE
8848: EQUAL
8849: IFTRUE 8853
8851: GO 8879
8853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8854: LD_ADDR_VAR 0 3
8858: PUSH
8859: LD_INT 21
8861: PUSH
8862: LD_INT 22
8864: PUSH
8865: LD_INT 23
8867: PUSH
8868: LD_INT 24
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: ST_TO_ADDR
8877: GO 9060
8879: LD_INT 49
8881: DOUBLE
8882: EQUAL
8883: IFTRUE 8887
8885: GO 8913
8887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8888: LD_ADDR_VAR 0 3
8892: PUSH
8893: LD_INT 21
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_INT 23
8901: PUSH
8902: LD_INT 24
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: ST_TO_ADDR
8911: GO 9060
8913: LD_INT 51
8915: DOUBLE
8916: EQUAL
8917: IFTRUE 8921
8919: GO 8947
8921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8922: LD_ADDR_VAR 0 3
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 22
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 24
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: ST_TO_ADDR
8945: GO 9060
8947: LD_INT 52
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 8981
8955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8956: LD_ADDR_VAR 0 3
8960: PUSH
8961: LD_INT 21
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_INT 23
8969: PUSH
8970: LD_INT 24
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: ST_TO_ADDR
8979: GO 9060
8981: LD_INT 53
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9007
8989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: LD_INT 23
8997: PUSH
8998: LD_INT 24
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: ST_TO_ADDR
9005: GO 9060
9007: LD_INT 46
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9033
9015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 23
9023: PUSH
9024: LD_INT 24
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: ST_TO_ADDR
9031: GO 9060
9033: LD_INT 47
9035: DOUBLE
9036: EQUAL
9037: IFTRUE 9041
9039: GO 9059
9041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_INT 23
9049: PUSH
9050: LD_INT 24
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: ST_TO_ADDR
9057: GO 9060
9059: POP
// result := ( chassis in result ) ;
9060: LD_ADDR_VAR 0 3
9064: PUSH
9065: LD_VAR 0 1
9069: PUSH
9070: LD_VAR 0 3
9074: IN
9075: ST_TO_ADDR
// end ;
9076: LD_VAR 0 3
9080: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9081: LD_INT 0
9083: PPUSH
9084: PPUSH
9085: PPUSH
9086: PPUSH
9087: PPUSH
9088: PPUSH
9089: PPUSH
// result := array ;
9090: LD_ADDR_VAR 0 5
9094: PUSH
9095: LD_VAR 0 1
9099: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9100: LD_VAR 0 1
9104: NOT
9105: PUSH
9106: LD_VAR 0 2
9110: NOT
9111: OR
9112: PUSH
9113: LD_VAR 0 3
9117: NOT
9118: OR
9119: PUSH
9120: LD_VAR 0 2
9124: PUSH
9125: LD_VAR 0 1
9129: GREATER
9130: OR
9131: PUSH
9132: LD_VAR 0 3
9136: PUSH
9137: LD_VAR 0 1
9141: GREATER
9142: OR
9143: IFFALSE 9147
// exit ;
9145: GO 9443
// if direction then
9147: LD_VAR 0 4
9151: IFFALSE 9215
// begin d := 1 ;
9153: LD_ADDR_VAR 0 9
9157: PUSH
9158: LD_INT 1
9160: ST_TO_ADDR
// if i_from > i_to then
9161: LD_VAR 0 2
9165: PUSH
9166: LD_VAR 0 3
9170: GREATER
9171: IFFALSE 9197
// length := ( array - i_from ) + i_to else
9173: LD_ADDR_VAR 0 11
9177: PUSH
9178: LD_VAR 0 1
9182: PUSH
9183: LD_VAR 0 2
9187: MINUS
9188: PUSH
9189: LD_VAR 0 3
9193: PLUS
9194: ST_TO_ADDR
9195: GO 9213
// length := i_to - i_from ;
9197: LD_ADDR_VAR 0 11
9201: PUSH
9202: LD_VAR 0 3
9206: PUSH
9207: LD_VAR 0 2
9211: MINUS
9212: ST_TO_ADDR
// end else
9213: GO 9276
// begin d := - 1 ;
9215: LD_ADDR_VAR 0 9
9219: PUSH
9220: LD_INT 1
9222: NEG
9223: ST_TO_ADDR
// if i_from > i_to then
9224: LD_VAR 0 2
9228: PUSH
9229: LD_VAR 0 3
9233: GREATER
9234: IFFALSE 9254
// length := i_from - i_to else
9236: LD_ADDR_VAR 0 11
9240: PUSH
9241: LD_VAR 0 2
9245: PUSH
9246: LD_VAR 0 3
9250: MINUS
9251: ST_TO_ADDR
9252: GO 9276
// length := ( array - i_to ) + i_from ;
9254: LD_ADDR_VAR 0 11
9258: PUSH
9259: LD_VAR 0 1
9263: PUSH
9264: LD_VAR 0 3
9268: MINUS
9269: PUSH
9270: LD_VAR 0 2
9274: PLUS
9275: ST_TO_ADDR
// end ; if not length then
9276: LD_VAR 0 11
9280: NOT
9281: IFFALSE 9285
// exit ;
9283: GO 9443
// tmp := array ;
9285: LD_ADDR_VAR 0 10
9289: PUSH
9290: LD_VAR 0 1
9294: ST_TO_ADDR
// for i = 1 to length do
9295: LD_ADDR_VAR 0 6
9299: PUSH
9300: DOUBLE
9301: LD_INT 1
9303: DEC
9304: ST_TO_ADDR
9305: LD_VAR 0 11
9309: PUSH
9310: FOR_TO
9311: IFFALSE 9431
// begin for j = 1 to array do
9313: LD_ADDR_VAR 0 7
9317: PUSH
9318: DOUBLE
9319: LD_INT 1
9321: DEC
9322: ST_TO_ADDR
9323: LD_VAR 0 1
9327: PUSH
9328: FOR_TO
9329: IFFALSE 9417
// begin k := j + d ;
9331: LD_ADDR_VAR 0 8
9335: PUSH
9336: LD_VAR 0 7
9340: PUSH
9341: LD_VAR 0 9
9345: PLUS
9346: ST_TO_ADDR
// if k > array then
9347: LD_VAR 0 8
9351: PUSH
9352: LD_VAR 0 1
9356: GREATER
9357: IFFALSE 9367
// k := 1 ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_INT 1
9366: ST_TO_ADDR
// if not k then
9367: LD_VAR 0 8
9371: NOT
9372: IFFALSE 9384
// k := array ;
9374: LD_ADDR_VAR 0 8
9378: PUSH
9379: LD_VAR 0 1
9383: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9384: LD_ADDR_VAR 0 10
9388: PUSH
9389: LD_VAR 0 10
9393: PPUSH
9394: LD_VAR 0 8
9398: PPUSH
9399: LD_VAR 0 1
9403: PUSH
9404: LD_VAR 0 7
9408: ARRAY
9409: PPUSH
9410: CALL_OW 1
9414: ST_TO_ADDR
// end ;
9415: GO 9328
9417: POP
9418: POP
// array := tmp ;
9419: LD_ADDR_VAR 0 1
9423: PUSH
9424: LD_VAR 0 10
9428: ST_TO_ADDR
// end ;
9429: GO 9310
9431: POP
9432: POP
// result := array ;
9433: LD_ADDR_VAR 0 5
9437: PUSH
9438: LD_VAR 0 1
9442: ST_TO_ADDR
// end ;
9443: LD_VAR 0 5
9447: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9448: LD_INT 0
9450: PPUSH
9451: PPUSH
// result := 0 ;
9452: LD_ADDR_VAR 0 3
9456: PUSH
9457: LD_INT 0
9459: ST_TO_ADDR
// if not array or not value in array then
9460: LD_VAR 0 1
9464: NOT
9465: PUSH
9466: LD_VAR 0 2
9470: PUSH
9471: LD_VAR 0 1
9475: IN
9476: NOT
9477: OR
9478: IFFALSE 9482
// exit ;
9480: GO 9536
// for i = 1 to array do
9482: LD_ADDR_VAR 0 4
9486: PUSH
9487: DOUBLE
9488: LD_INT 1
9490: DEC
9491: ST_TO_ADDR
9492: LD_VAR 0 1
9496: PUSH
9497: FOR_TO
9498: IFFALSE 9534
// if value = array [ i ] then
9500: LD_VAR 0 2
9504: PUSH
9505: LD_VAR 0 1
9509: PUSH
9510: LD_VAR 0 4
9514: ARRAY
9515: EQUAL
9516: IFFALSE 9532
// begin result := i ;
9518: LD_ADDR_VAR 0 3
9522: PUSH
9523: LD_VAR 0 4
9527: ST_TO_ADDR
// exit ;
9528: POP
9529: POP
9530: GO 9536
// end ;
9532: GO 9497
9534: POP
9535: POP
// end ;
9536: LD_VAR 0 3
9540: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9541: LD_INT 0
9543: PPUSH
// vc_chassis := chassis ;
9544: LD_ADDR_OWVAR 37
9548: PUSH
9549: LD_VAR 0 1
9553: ST_TO_ADDR
// vc_engine := engine ;
9554: LD_ADDR_OWVAR 39
9558: PUSH
9559: LD_VAR 0 2
9563: ST_TO_ADDR
// vc_control := control ;
9564: LD_ADDR_OWVAR 38
9568: PUSH
9569: LD_VAR 0 3
9573: ST_TO_ADDR
// vc_weapon := weapon ;
9574: LD_ADDR_OWVAR 40
9578: PUSH
9579: LD_VAR 0 4
9583: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9584: LD_ADDR_OWVAR 41
9588: PUSH
9589: LD_VAR 0 5
9593: ST_TO_ADDR
// end ;
9594: LD_VAR 0 6
9598: RET
// export function WantPlant ( unit ) ; var task ; begin
9599: LD_INT 0
9601: PPUSH
9602: PPUSH
// result := false ;
9603: LD_ADDR_VAR 0 2
9607: PUSH
9608: LD_INT 0
9610: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 437
9625: ST_TO_ADDR
// if task then
9626: LD_VAR 0 3
9630: IFFALSE 9658
// if task [ 1 ] [ 1 ] = p then
9632: LD_VAR 0 3
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: PUSH
9641: LD_INT 1
9643: ARRAY
9644: PUSH
9645: LD_STRING p
9647: EQUAL
9648: IFFALSE 9658
// result := true ;
9650: LD_ADDR_VAR 0 2
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// end ;
9658: LD_VAR 0 2
9662: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9663: LD_INT 0
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
// if pos < 1 then
9669: LD_VAR 0 2
9673: PUSH
9674: LD_INT 1
9676: LESS
9677: IFFALSE 9681
// exit ;
9679: GO 9984
// if pos = 1 then
9681: LD_VAR 0 2
9685: PUSH
9686: LD_INT 1
9688: EQUAL
9689: IFFALSE 9722
// result := Replace ( arr , pos [ 1 ] , value ) else
9691: LD_ADDR_VAR 0 4
9695: PUSH
9696: LD_VAR 0 1
9700: PPUSH
9701: LD_VAR 0 2
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PPUSH
9710: LD_VAR 0 3
9714: PPUSH
9715: CALL_OW 1
9719: ST_TO_ADDR
9720: GO 9984
// begin tmp := arr ;
9722: LD_ADDR_VAR 0 6
9726: PUSH
9727: LD_VAR 0 1
9731: ST_TO_ADDR
// s_arr := [ tmp ] ;
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_VAR 0 6
9741: PUSH
9742: EMPTY
9743: LIST
9744: ST_TO_ADDR
// for i = 1 to pos - 1 do
9745: LD_ADDR_VAR 0 5
9749: PUSH
9750: DOUBLE
9751: LD_INT 1
9753: DEC
9754: ST_TO_ADDR
9755: LD_VAR 0 2
9759: PUSH
9760: LD_INT 1
9762: MINUS
9763: PUSH
9764: FOR_TO
9765: IFFALSE 9810
// begin tmp := tmp [ pos [ i ] ] ;
9767: LD_ADDR_VAR 0 6
9771: PUSH
9772: LD_VAR 0 6
9776: PUSH
9777: LD_VAR 0 2
9781: PUSH
9782: LD_VAR 0 5
9786: ARRAY
9787: ARRAY
9788: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9789: LD_ADDR_VAR 0 7
9793: PUSH
9794: LD_VAR 0 7
9798: PUSH
9799: LD_VAR 0 6
9803: PUSH
9804: EMPTY
9805: LIST
9806: ADD
9807: ST_TO_ADDR
// end ;
9808: GO 9764
9810: POP
9811: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9812: LD_ADDR_VAR 0 6
9816: PUSH
9817: LD_VAR 0 6
9821: PPUSH
9822: LD_VAR 0 2
9826: PUSH
9827: LD_VAR 0 2
9831: ARRAY
9832: PPUSH
9833: LD_VAR 0 3
9837: PPUSH
9838: CALL_OW 1
9842: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9843: LD_ADDR_VAR 0 7
9847: PUSH
9848: LD_VAR 0 7
9852: PPUSH
9853: LD_VAR 0 7
9857: PPUSH
9858: LD_VAR 0 6
9862: PPUSH
9863: CALL_OW 1
9867: ST_TO_ADDR
// for i = s_arr downto 2 do
9868: LD_ADDR_VAR 0 5
9872: PUSH
9873: DOUBLE
9874: LD_VAR 0 7
9878: INC
9879: ST_TO_ADDR
9880: LD_INT 2
9882: PUSH
9883: FOR_DOWNTO
9884: IFFALSE 9968
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9886: LD_ADDR_VAR 0 6
9890: PUSH
9891: LD_VAR 0 7
9895: PUSH
9896: LD_VAR 0 5
9900: PUSH
9901: LD_INT 1
9903: MINUS
9904: ARRAY
9905: PPUSH
9906: LD_VAR 0 2
9910: PUSH
9911: LD_VAR 0 5
9915: PUSH
9916: LD_INT 1
9918: MINUS
9919: ARRAY
9920: PPUSH
9921: LD_VAR 0 7
9925: PUSH
9926: LD_VAR 0 5
9930: ARRAY
9931: PPUSH
9932: CALL_OW 1
9936: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9937: LD_ADDR_VAR 0 7
9941: PUSH
9942: LD_VAR 0 7
9946: PPUSH
9947: LD_VAR 0 5
9951: PUSH
9952: LD_INT 1
9954: MINUS
9955: PPUSH
9956: LD_VAR 0 6
9960: PPUSH
9961: CALL_OW 1
9965: ST_TO_ADDR
// end ;
9966: GO 9883
9968: POP
9969: POP
// result := s_arr [ 1 ] ;
9970: LD_ADDR_VAR 0 4
9974: PUSH
9975: LD_VAR 0 7
9979: PUSH
9980: LD_INT 1
9982: ARRAY
9983: ST_TO_ADDR
// end ; end ;
9984: LD_VAR 0 4
9988: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// if not list then
9993: LD_VAR 0 1
9997: NOT
9998: IFFALSE 10002
// exit ;
10000: GO 10093
// i := list [ pos1 ] ;
10002: LD_ADDR_VAR 0 5
10006: PUSH
10007: LD_VAR 0 1
10011: PUSH
10012: LD_VAR 0 2
10016: ARRAY
10017: ST_TO_ADDR
// if not i then
10018: LD_VAR 0 5
10022: NOT
10023: IFFALSE 10027
// exit ;
10025: GO 10093
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10027: LD_ADDR_VAR 0 1
10031: PUSH
10032: LD_VAR 0 1
10036: PPUSH
10037: LD_VAR 0 2
10041: PPUSH
10042: LD_VAR 0 1
10046: PUSH
10047: LD_VAR 0 3
10051: ARRAY
10052: PPUSH
10053: CALL_OW 1
10057: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10058: LD_ADDR_VAR 0 1
10062: PUSH
10063: LD_VAR 0 1
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: LD_VAR 0 5
10077: PPUSH
10078: CALL_OW 1
10082: ST_TO_ADDR
// result := list ;
10083: LD_ADDR_VAR 0 4
10087: PUSH
10088: LD_VAR 0 1
10092: ST_TO_ADDR
// end ;
10093: LD_VAR 0 4
10097: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10098: LD_INT 0
10100: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10101: LD_ADDR_VAR 0 5
10105: PUSH
10106: LD_VAR 0 1
10110: PPUSH
10111: CALL_OW 250
10115: PPUSH
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 251
10125: PPUSH
10126: LD_VAR 0 2
10130: PPUSH
10131: LD_VAR 0 3
10135: PPUSH
10136: LD_VAR 0 4
10140: PPUSH
10141: CALL 10151 0 5
10145: ST_TO_ADDR
// end ;
10146: LD_VAR 0 5
10150: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10151: LD_INT 0
10153: PPUSH
10154: PPUSH
10155: PPUSH
10156: PPUSH
// if not list then
10157: LD_VAR 0 3
10161: NOT
10162: IFFALSE 10166
// exit ;
10164: GO 10554
// result := [ ] ;
10166: LD_ADDR_VAR 0 6
10170: PUSH
10171: EMPTY
10172: ST_TO_ADDR
// for i in list do
10173: LD_ADDR_VAR 0 7
10177: PUSH
10178: LD_VAR 0 3
10182: PUSH
10183: FOR_IN
10184: IFFALSE 10386
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10186: LD_ADDR_VAR 0 9
10190: PUSH
10191: LD_VAR 0 7
10195: PPUSH
10196: LD_VAR 0 1
10200: PPUSH
10201: LD_VAR 0 2
10205: PPUSH
10206: CALL_OW 297
10210: ST_TO_ADDR
// if not result then
10211: LD_VAR 0 6
10215: NOT
10216: IFFALSE 10242
// result := [ [ i , tmp ] ] else
10218: LD_ADDR_VAR 0 6
10222: PUSH
10223: LD_VAR 0 7
10227: PUSH
10228: LD_VAR 0 9
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: ST_TO_ADDR
10240: GO 10384
// begin if result [ result ] [ 2 ] < tmp then
10242: LD_VAR 0 6
10246: PUSH
10247: LD_VAR 0 6
10251: ARRAY
10252: PUSH
10253: LD_INT 2
10255: ARRAY
10256: PUSH
10257: LD_VAR 0 9
10261: LESS
10262: IFFALSE 10304
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10264: LD_ADDR_VAR 0 6
10268: PUSH
10269: LD_VAR 0 6
10273: PPUSH
10274: LD_VAR 0 6
10278: PUSH
10279: LD_INT 1
10281: PLUS
10282: PPUSH
10283: LD_VAR 0 7
10287: PUSH
10288: LD_VAR 0 9
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PPUSH
10297: CALL_OW 2
10301: ST_TO_ADDR
10302: GO 10384
// for j = 1 to result do
10304: LD_ADDR_VAR 0 8
10308: PUSH
10309: DOUBLE
10310: LD_INT 1
10312: DEC
10313: ST_TO_ADDR
10314: LD_VAR 0 6
10318: PUSH
10319: FOR_TO
10320: IFFALSE 10382
// begin if tmp < result [ j ] [ 2 ] then
10322: LD_VAR 0 9
10326: PUSH
10327: LD_VAR 0 6
10331: PUSH
10332: LD_VAR 0 8
10336: ARRAY
10337: PUSH
10338: LD_INT 2
10340: ARRAY
10341: LESS
10342: IFFALSE 10380
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10344: LD_ADDR_VAR 0 6
10348: PUSH
10349: LD_VAR 0 6
10353: PPUSH
10354: LD_VAR 0 8
10358: PPUSH
10359: LD_VAR 0 7
10363: PUSH
10364: LD_VAR 0 9
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PPUSH
10373: CALL_OW 2
10377: ST_TO_ADDR
// break ;
10378: GO 10382
// end ; end ;
10380: GO 10319
10382: POP
10383: POP
// end ; end ;
10384: GO 10183
10386: POP
10387: POP
// if result and not asc then
10388: LD_VAR 0 6
10392: PUSH
10393: LD_VAR 0 4
10397: NOT
10398: AND
10399: IFFALSE 10474
// begin tmp := result ;
10401: LD_ADDR_VAR 0 9
10405: PUSH
10406: LD_VAR 0 6
10410: ST_TO_ADDR
// for i = tmp downto 1 do
10411: LD_ADDR_VAR 0 7
10415: PUSH
10416: DOUBLE
10417: LD_VAR 0 9
10421: INC
10422: ST_TO_ADDR
10423: LD_INT 1
10425: PUSH
10426: FOR_DOWNTO
10427: IFFALSE 10472
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10429: LD_ADDR_VAR 0 6
10433: PUSH
10434: LD_VAR 0 6
10438: PPUSH
10439: LD_VAR 0 9
10443: PUSH
10444: LD_VAR 0 7
10448: MINUS
10449: PUSH
10450: LD_INT 1
10452: PLUS
10453: PPUSH
10454: LD_VAR 0 9
10458: PUSH
10459: LD_VAR 0 7
10463: ARRAY
10464: PPUSH
10465: CALL_OW 1
10469: ST_TO_ADDR
10470: GO 10426
10472: POP
10473: POP
// end ; tmp := [ ] ;
10474: LD_ADDR_VAR 0 9
10478: PUSH
10479: EMPTY
10480: ST_TO_ADDR
// if mode then
10481: LD_VAR 0 5
10485: IFFALSE 10554
// begin for i = 1 to result do
10487: LD_ADDR_VAR 0 7
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_VAR 0 6
10501: PUSH
10502: FOR_TO
10503: IFFALSE 10542
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10505: LD_ADDR_VAR 0 9
10509: PUSH
10510: LD_VAR 0 9
10514: PPUSH
10515: LD_VAR 0 7
10519: PPUSH
10520: LD_VAR 0 6
10524: PUSH
10525: LD_VAR 0 7
10529: ARRAY
10530: PUSH
10531: LD_INT 1
10533: ARRAY
10534: PPUSH
10535: CALL_OW 1
10539: ST_TO_ADDR
10540: GO 10502
10542: POP
10543: POP
// result := tmp ;
10544: LD_ADDR_VAR 0 6
10548: PUSH
10549: LD_VAR 0 9
10553: ST_TO_ADDR
// end ; end ;
10554: LD_VAR 0 6
10558: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10559: LD_INT 0
10561: PPUSH
10562: PPUSH
10563: PPUSH
10564: PPUSH
10565: PPUSH
10566: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10567: LD_ADDR_VAR 0 5
10571: PUSH
10572: LD_INT 0
10574: PUSH
10575: LD_INT 0
10577: PUSH
10578: LD_INT 0
10580: PUSH
10581: EMPTY
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: ST_TO_ADDR
// if not x or not y then
10589: LD_VAR 0 2
10593: NOT
10594: PUSH
10595: LD_VAR 0 3
10599: NOT
10600: OR
10601: IFFALSE 10605
// exit ;
10603: GO 12255
// if not range then
10605: LD_VAR 0 4
10609: NOT
10610: IFFALSE 10620
// range := 10 ;
10612: LD_ADDR_VAR 0 4
10616: PUSH
10617: LD_INT 10
10619: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10620: LD_ADDR_VAR 0 8
10624: PUSH
10625: LD_INT 81
10627: PUSH
10628: LD_VAR 0 1
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 92
10639: PUSH
10640: LD_VAR 0 2
10644: PUSH
10645: LD_VAR 0 3
10649: PUSH
10650: LD_VAR 0 4
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 3
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: ST_TO_ADDR
// if not tmp then
10688: LD_VAR 0 8
10692: NOT
10693: IFFALSE 10697
// exit ;
10695: GO 12255
// for i in tmp do
10697: LD_ADDR_VAR 0 6
10701: PUSH
10702: LD_VAR 0 8
10706: PUSH
10707: FOR_IN
10708: IFFALSE 12230
// begin points := [ 0 , 0 , 0 ] ;
10710: LD_ADDR_VAR 0 9
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: LD_INT 0
10720: PUSH
10721: LD_INT 0
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: ST_TO_ADDR
// bpoints := 1 ;
10729: LD_ADDR_VAR 0 10
10733: PUSH
10734: LD_INT 1
10736: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10737: LD_VAR 0 6
10741: PPUSH
10742: CALL_OW 247
10746: PUSH
10747: LD_INT 1
10749: DOUBLE
10750: EQUAL
10751: IFTRUE 10755
10753: GO 11333
10755: POP
// begin if GetClass ( i ) = 1 then
10756: LD_VAR 0 6
10760: PPUSH
10761: CALL_OW 257
10765: PUSH
10766: LD_INT 1
10768: EQUAL
10769: IFFALSE 10790
// points := [ 10 , 5 , 3 ] ;
10771: LD_ADDR_VAR 0 9
10775: PUSH
10776: LD_INT 10
10778: PUSH
10779: LD_INT 5
10781: PUSH
10782: LD_INT 3
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10790: LD_VAR 0 6
10794: PPUSH
10795: CALL_OW 257
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 3
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: IN
10814: IFFALSE 10835
// points := [ 3 , 2 , 1 ] ;
10816: LD_ADDR_VAR 0 9
10820: PUSH
10821: LD_INT 3
10823: PUSH
10824: LD_INT 2
10826: PUSH
10827: LD_INT 1
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10835: LD_VAR 0 6
10839: PPUSH
10840: CALL_OW 257
10844: PUSH
10845: LD_INT 5
10847: EQUAL
10848: IFFALSE 10869
// points := [ 130 , 5 , 2 ] ;
10850: LD_ADDR_VAR 0 9
10854: PUSH
10855: LD_INT 130
10857: PUSH
10858: LD_INT 5
10860: PUSH
10861: LD_INT 2
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10869: LD_VAR 0 6
10873: PPUSH
10874: CALL_OW 257
10878: PUSH
10879: LD_INT 8
10881: EQUAL
10882: IFFALSE 10903
// points := [ 35 , 35 , 30 ] ;
10884: LD_ADDR_VAR 0 9
10888: PUSH
10889: LD_INT 35
10891: PUSH
10892: LD_INT 35
10894: PUSH
10895: LD_INT 30
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10903: LD_VAR 0 6
10907: PPUSH
10908: CALL_OW 257
10912: PUSH
10913: LD_INT 9
10915: EQUAL
10916: IFFALSE 10937
// points := [ 20 , 55 , 40 ] ;
10918: LD_ADDR_VAR 0 9
10922: PUSH
10923: LD_INT 20
10925: PUSH
10926: LD_INT 55
10928: PUSH
10929: LD_INT 40
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10937: LD_VAR 0 6
10941: PPUSH
10942: CALL_OW 257
10946: PUSH
10947: LD_INT 12
10949: PUSH
10950: LD_INT 16
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: IN
10957: IFFALSE 10978
// points := [ 5 , 3 , 2 ] ;
10959: LD_ADDR_VAR 0 9
10963: PUSH
10964: LD_INT 5
10966: PUSH
10967: LD_INT 3
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10978: LD_VAR 0 6
10982: PPUSH
10983: CALL_OW 257
10987: PUSH
10988: LD_INT 17
10990: EQUAL
10991: IFFALSE 11012
// points := [ 100 , 50 , 75 ] ;
10993: LD_ADDR_VAR 0 9
10997: PUSH
10998: LD_INT 100
11000: PUSH
11001: LD_INT 50
11003: PUSH
11004: LD_INT 75
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11012: LD_VAR 0 6
11016: PPUSH
11017: CALL_OW 257
11021: PUSH
11022: LD_INT 15
11024: EQUAL
11025: IFFALSE 11046
// points := [ 10 , 5 , 3 ] ;
11027: LD_ADDR_VAR 0 9
11031: PUSH
11032: LD_INT 10
11034: PUSH
11035: LD_INT 5
11037: PUSH
11038: LD_INT 3
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11046: LD_VAR 0 6
11050: PPUSH
11051: CALL_OW 257
11055: PUSH
11056: LD_INT 14
11058: EQUAL
11059: IFFALSE 11080
// points := [ 10 , 0 , 0 ] ;
11061: LD_ADDR_VAR 0 9
11065: PUSH
11066: LD_INT 10
11068: PUSH
11069: LD_INT 0
11071: PUSH
11072: LD_INT 0
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11080: LD_VAR 0 6
11084: PPUSH
11085: CALL_OW 257
11089: PUSH
11090: LD_INT 11
11092: EQUAL
11093: IFFALSE 11114
// points := [ 30 , 10 , 5 ] ;
11095: LD_ADDR_VAR 0 9
11099: PUSH
11100: LD_INT 30
11102: PUSH
11103: LD_INT 10
11105: PUSH
11106: LD_INT 5
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11114: LD_VAR 0 1
11118: PPUSH
11119: LD_INT 5
11121: PPUSH
11122: CALL_OW 321
11126: PUSH
11127: LD_INT 2
11129: EQUAL
11130: IFFALSE 11147
// bpoints := bpoints * 1.8 ;
11132: LD_ADDR_VAR 0 10
11136: PUSH
11137: LD_VAR 0 10
11141: PUSH
11142: LD_REAL  1.80000000000000E+0000
11145: MUL
11146: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11147: LD_VAR 0 6
11151: PPUSH
11152: CALL_OW 257
11156: PUSH
11157: LD_INT 1
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 3
11165: PUSH
11166: LD_INT 4
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: IN
11175: PUSH
11176: LD_VAR 0 1
11180: PPUSH
11181: LD_INT 51
11183: PPUSH
11184: CALL_OW 321
11188: PUSH
11189: LD_INT 2
11191: EQUAL
11192: AND
11193: IFFALSE 11210
// bpoints := bpoints * 1.2 ;
11195: LD_ADDR_VAR 0 10
11199: PUSH
11200: LD_VAR 0 10
11204: PUSH
11205: LD_REAL  1.20000000000000E+0000
11208: MUL
11209: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11210: LD_VAR 0 6
11214: PPUSH
11215: CALL_OW 257
11219: PUSH
11220: LD_INT 5
11222: PUSH
11223: LD_INT 7
11225: PUSH
11226: LD_INT 9
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: LIST
11233: IN
11234: PUSH
11235: LD_VAR 0 1
11239: PPUSH
11240: LD_INT 52
11242: PPUSH
11243: CALL_OW 321
11247: PUSH
11248: LD_INT 2
11250: EQUAL
11251: AND
11252: IFFALSE 11269
// bpoints := bpoints * 1.5 ;
11254: LD_ADDR_VAR 0 10
11258: PUSH
11259: LD_VAR 0 10
11263: PUSH
11264: LD_REAL  1.50000000000000E+0000
11267: MUL
11268: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11269: LD_VAR 0 1
11273: PPUSH
11274: LD_INT 66
11276: PPUSH
11277: CALL_OW 321
11281: PUSH
11282: LD_INT 2
11284: EQUAL
11285: IFFALSE 11302
// bpoints := bpoints * 1.1 ;
11287: LD_ADDR_VAR 0 10
11291: PUSH
11292: LD_VAR 0 10
11296: PUSH
11297: LD_REAL  1.10000000000000E+0000
11300: MUL
11301: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11302: LD_ADDR_VAR 0 10
11306: PUSH
11307: LD_VAR 0 10
11311: PUSH
11312: LD_VAR 0 6
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 259
11324: PUSH
11325: LD_REAL  1.15000000000000E+0000
11328: MUL
11329: MUL
11330: ST_TO_ADDR
// end ; unit_vehicle :
11331: GO 12159
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 12147
11341: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11342: LD_VAR 0 6
11346: PPUSH
11347: CALL_OW 264
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: LD_INT 42
11357: PUSH
11358: LD_INT 24
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: IN
11366: IFFALSE 11387
// points := [ 25 , 5 , 3 ] ;
11368: LD_ADDR_VAR 0 9
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 5
11378: PUSH
11379: LD_INT 3
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11387: LD_VAR 0 6
11391: PPUSH
11392: CALL_OW 264
11396: PUSH
11397: LD_INT 4
11399: PUSH
11400: LD_INT 43
11402: PUSH
11403: LD_INT 25
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: IN
11411: IFFALSE 11432
// points := [ 40 , 15 , 5 ] ;
11413: LD_ADDR_VAR 0 9
11417: PUSH
11418: LD_INT 40
11420: PUSH
11421: LD_INT 15
11423: PUSH
11424: LD_INT 5
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11432: LD_VAR 0 6
11436: PPUSH
11437: CALL_OW 264
11441: PUSH
11442: LD_INT 3
11444: PUSH
11445: LD_INT 23
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: IN
11452: IFFALSE 11473
// points := [ 7 , 25 , 8 ] ;
11454: LD_ADDR_VAR 0 9
11458: PUSH
11459: LD_INT 7
11461: PUSH
11462: LD_INT 25
11464: PUSH
11465: LD_INT 8
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11473: LD_VAR 0 6
11477: PPUSH
11478: CALL_OW 264
11482: PUSH
11483: LD_INT 5
11485: PUSH
11486: LD_INT 27
11488: PUSH
11489: LD_INT 44
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: IN
11497: IFFALSE 11518
// points := [ 14 , 50 , 16 ] ;
11499: LD_ADDR_VAR 0 9
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 50
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11518: LD_VAR 0 6
11522: PPUSH
11523: CALL_OW 264
11527: PUSH
11528: LD_INT 6
11530: PUSH
11531: LD_INT 46
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: IN
11538: IFFALSE 11559
// points := [ 32 , 120 , 70 ] ;
11540: LD_ADDR_VAR 0 9
11544: PUSH
11545: LD_INT 32
11547: PUSH
11548: LD_INT 120
11550: PUSH
11551: LD_INT 70
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11559: LD_VAR 0 6
11563: PPUSH
11564: CALL_OW 264
11568: PUSH
11569: LD_INT 7
11571: PUSH
11572: LD_INT 28
11574: PUSH
11575: LD_INT 45
11577: PUSH
11578: LD_INT 92
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: IN
11587: IFFALSE 11608
// points := [ 35 , 20 , 45 ] ;
11589: LD_ADDR_VAR 0 9
11593: PUSH
11594: LD_INT 35
11596: PUSH
11597: LD_INT 20
11599: PUSH
11600: LD_INT 45
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11608: LD_VAR 0 6
11612: PPUSH
11613: CALL_OW 264
11617: PUSH
11618: LD_INT 47
11620: PUSH
11621: EMPTY
11622: LIST
11623: IN
11624: IFFALSE 11645
// points := [ 67 , 45 , 75 ] ;
11626: LD_ADDR_VAR 0 9
11630: PUSH
11631: LD_INT 67
11633: PUSH
11634: LD_INT 45
11636: PUSH
11637: LD_INT 75
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11645: LD_VAR 0 6
11649: PPUSH
11650: CALL_OW 264
11654: PUSH
11655: LD_INT 26
11657: PUSH
11658: EMPTY
11659: LIST
11660: IN
11661: IFFALSE 11682
// points := [ 120 , 30 , 80 ] ;
11663: LD_ADDR_VAR 0 9
11667: PUSH
11668: LD_INT 120
11670: PUSH
11671: LD_INT 30
11673: PUSH
11674: LD_INT 80
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11682: LD_VAR 0 6
11686: PPUSH
11687: CALL_OW 264
11691: PUSH
11692: LD_INT 22
11694: PUSH
11695: EMPTY
11696: LIST
11697: IN
11698: IFFALSE 11719
// points := [ 40 , 1 , 1 ] ;
11700: LD_ADDR_VAR 0 9
11704: PUSH
11705: LD_INT 40
11707: PUSH
11708: LD_INT 1
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11719: LD_VAR 0 6
11723: PPUSH
11724: CALL_OW 264
11728: PUSH
11729: LD_INT 29
11731: PUSH
11732: EMPTY
11733: LIST
11734: IN
11735: IFFALSE 11756
// points := [ 70 , 200 , 400 ] ;
11737: LD_ADDR_VAR 0 9
11741: PUSH
11742: LD_INT 70
11744: PUSH
11745: LD_INT 200
11747: PUSH
11748: LD_INT 400
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11756: LD_VAR 0 6
11760: PPUSH
11761: CALL_OW 264
11765: PUSH
11766: LD_INT 14
11768: PUSH
11769: LD_INT 53
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: IN
11776: IFFALSE 11797
// points := [ 40 , 10 , 20 ] ;
11778: LD_ADDR_VAR 0 9
11782: PUSH
11783: LD_INT 40
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: LD_INT 20
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11797: LD_VAR 0 6
11801: PPUSH
11802: CALL_OW 264
11806: PUSH
11807: LD_INT 9
11809: PUSH
11810: EMPTY
11811: LIST
11812: IN
11813: IFFALSE 11834
// points := [ 5 , 70 , 20 ] ;
11815: LD_ADDR_VAR 0 9
11819: PUSH
11820: LD_INT 5
11822: PUSH
11823: LD_INT 70
11825: PUSH
11826: LD_INT 20
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11834: LD_VAR 0 6
11838: PPUSH
11839: CALL_OW 264
11843: PUSH
11844: LD_INT 10
11846: PUSH
11847: EMPTY
11848: LIST
11849: IN
11850: IFFALSE 11871
// points := [ 35 , 110 , 70 ] ;
11852: LD_ADDR_VAR 0 9
11856: PUSH
11857: LD_INT 35
11859: PUSH
11860: LD_INT 110
11862: PUSH
11863: LD_INT 70
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11871: LD_VAR 0 6
11875: PPUSH
11876: CALL_OW 265
11880: PUSH
11881: LD_INT 25
11883: EQUAL
11884: IFFALSE 11905
// points := [ 80 , 65 , 100 ] ;
11886: LD_ADDR_VAR 0 9
11890: PUSH
11891: LD_INT 80
11893: PUSH
11894: LD_INT 65
11896: PUSH
11897: LD_INT 100
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11905: LD_VAR 0 6
11909: PPUSH
11910: CALL_OW 263
11914: PUSH
11915: LD_INT 1
11917: EQUAL
11918: IFFALSE 11953
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11920: LD_ADDR_VAR 0 10
11924: PUSH
11925: LD_VAR 0 10
11929: PUSH
11930: LD_VAR 0 6
11934: PPUSH
11935: CALL_OW 311
11939: PPUSH
11940: LD_INT 3
11942: PPUSH
11943: CALL_OW 259
11947: PUSH
11948: LD_INT 4
11950: MUL
11951: MUL
11952: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11953: LD_VAR 0 6
11957: PPUSH
11958: CALL_OW 263
11962: PUSH
11963: LD_INT 2
11965: EQUAL
11966: IFFALSE 12017
// begin j := IsControledBy ( i ) ;
11968: LD_ADDR_VAR 0 7
11972: PUSH
11973: LD_VAR 0 6
11977: PPUSH
11978: CALL_OW 312
11982: ST_TO_ADDR
// if j then
11983: LD_VAR 0 7
11987: IFFALSE 12017
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11989: LD_ADDR_VAR 0 10
11993: PUSH
11994: LD_VAR 0 10
11998: PUSH
11999: LD_VAR 0 7
12003: PPUSH
12004: LD_INT 3
12006: PPUSH
12007: CALL_OW 259
12011: PUSH
12012: LD_INT 3
12014: MUL
12015: MUL
12016: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12017: LD_VAR 0 6
12021: PPUSH
12022: CALL_OW 264
12026: PUSH
12027: LD_INT 5
12029: PUSH
12030: LD_INT 6
12032: PUSH
12033: LD_INT 46
12035: PUSH
12036: LD_INT 44
12038: PUSH
12039: LD_INT 47
12041: PUSH
12042: LD_INT 45
12044: PUSH
12045: LD_INT 28
12047: PUSH
12048: LD_INT 7
12050: PUSH
12051: LD_INT 27
12053: PUSH
12054: LD_INT 29
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: IN
12069: PUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_INT 52
12077: PPUSH
12078: CALL_OW 321
12082: PUSH
12083: LD_INT 2
12085: EQUAL
12086: AND
12087: IFFALSE 12104
// bpoints := bpoints * 1.2 ;
12089: LD_ADDR_VAR 0 10
12093: PUSH
12094: LD_VAR 0 10
12098: PUSH
12099: LD_REAL  1.20000000000000E+0000
12102: MUL
12103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12104: LD_VAR 0 6
12108: PPUSH
12109: CALL_OW 264
12113: PUSH
12114: LD_INT 6
12116: PUSH
12117: LD_INT 46
12119: PUSH
12120: LD_INT 47
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: IN
12128: IFFALSE 12145
// bpoints := bpoints * 1.2 ;
12130: LD_ADDR_VAR 0 10
12134: PUSH
12135: LD_VAR 0 10
12139: PUSH
12140: LD_REAL  1.20000000000000E+0000
12143: MUL
12144: ST_TO_ADDR
// end ; unit_building :
12145: GO 12159
12147: LD_INT 3
12149: DOUBLE
12150: EQUAL
12151: IFTRUE 12155
12153: GO 12158
12155: POP
// ; end ;
12156: GO 12159
12158: POP
// for j = 1 to 3 do
12159: LD_ADDR_VAR 0 7
12163: PUSH
12164: DOUBLE
12165: LD_INT 1
12167: DEC
12168: ST_TO_ADDR
12169: LD_INT 3
12171: PUSH
12172: FOR_TO
12173: IFFALSE 12226
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12175: LD_ADDR_VAR 0 5
12179: PUSH
12180: LD_VAR 0 5
12184: PPUSH
12185: LD_VAR 0 7
12189: PPUSH
12190: LD_VAR 0 5
12194: PUSH
12195: LD_VAR 0 7
12199: ARRAY
12200: PUSH
12201: LD_VAR 0 9
12205: PUSH
12206: LD_VAR 0 7
12210: ARRAY
12211: PUSH
12212: LD_VAR 0 10
12216: MUL
12217: PLUS
12218: PPUSH
12219: CALL_OW 1
12223: ST_TO_ADDR
12224: GO 12172
12226: POP
12227: POP
// end ;
12228: GO 10707
12230: POP
12231: POP
// result := Replace ( result , 4 , tmp ) ;
12232: LD_ADDR_VAR 0 5
12236: PUSH
12237: LD_VAR 0 5
12241: PPUSH
12242: LD_INT 4
12244: PPUSH
12245: LD_VAR 0 8
12249: PPUSH
12250: CALL_OW 1
12254: ST_TO_ADDR
// end ;
12255: LD_VAR 0 5
12259: RET
// export function DangerAtRange ( unit , range ) ; begin
12260: LD_INT 0
12262: PPUSH
// if not unit then
12263: LD_VAR 0 1
12267: NOT
12268: IFFALSE 12272
// exit ;
12270: GO 12317
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12272: LD_ADDR_VAR 0 3
12276: PUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 255
12286: PPUSH
12287: LD_VAR 0 1
12291: PPUSH
12292: CALL_OW 250
12296: PPUSH
12297: LD_VAR 0 1
12301: PPUSH
12302: CALL_OW 251
12306: PPUSH
12307: LD_VAR 0 2
12311: PPUSH
12312: CALL 10559 0 4
12316: ST_TO_ADDR
// end ;
12317: LD_VAR 0 3
12321: RET
// export function DangerInArea ( side , area ) ; begin
12322: LD_INT 0
12324: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12325: LD_ADDR_VAR 0 3
12329: PUSH
12330: LD_VAR 0 2
12334: PPUSH
12335: LD_INT 81
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 70
12351: ST_TO_ADDR
// end ;
12352: LD_VAR 0 3
12356: RET
// export function IsExtension ( b ) ; begin
12357: LD_INT 0
12359: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: LD_VAR 0 1
12369: PUSH
12370: LD_INT 23
12372: PUSH
12373: LD_INT 20
12375: PUSH
12376: LD_INT 22
12378: PUSH
12379: LD_INT 17
12381: PUSH
12382: LD_INT 24
12384: PUSH
12385: LD_INT 21
12387: PUSH
12388: LD_INT 19
12390: PUSH
12391: LD_INT 16
12393: PUSH
12394: LD_INT 25
12396: PUSH
12397: LD_INT 18
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: IN
12412: ST_TO_ADDR
// end ;
12413: LD_VAR 0 2
12417: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12418: LD_INT 0
12420: PPUSH
12421: PPUSH
12422: PPUSH
// result := [ ] ;
12423: LD_ADDR_VAR 0 4
12427: PUSH
12428: EMPTY
12429: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12430: LD_ADDR_VAR 0 5
12434: PUSH
12435: LD_VAR 0 2
12439: PPUSH
12440: LD_INT 21
12442: PUSH
12443: LD_INT 3
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 70
12454: ST_TO_ADDR
// if not tmp then
12455: LD_VAR 0 5
12459: NOT
12460: IFFALSE 12464
// exit ;
12462: GO 12528
// if checkLink then
12464: LD_VAR 0 3
12468: IFFALSE 12518
// begin for i in tmp do
12470: LD_ADDR_VAR 0 6
12474: PUSH
12475: LD_VAR 0 5
12479: PUSH
12480: FOR_IN
12481: IFFALSE 12516
// if GetBase ( i ) <> base then
12483: LD_VAR 0 6
12487: PPUSH
12488: CALL_OW 274
12492: PUSH
12493: LD_VAR 0 1
12497: NONEQUAL
12498: IFFALSE 12514
// ComLinkToBase ( base , i ) ;
12500: LD_VAR 0 1
12504: PPUSH
12505: LD_VAR 0 6
12509: PPUSH
12510: CALL_OW 169
12514: GO 12480
12516: POP
12517: POP
// end ; result := tmp ;
12518: LD_ADDR_VAR 0 4
12522: PUSH
12523: LD_VAR 0 5
12527: ST_TO_ADDR
// end ;
12528: LD_VAR 0 4
12532: RET
// export function ComComplete ( units , b ) ; var i ; begin
12533: LD_INT 0
12535: PPUSH
12536: PPUSH
// if not units then
12537: LD_VAR 0 1
12541: NOT
12542: IFFALSE 12546
// exit ;
12544: GO 12636
// for i in units do
12546: LD_ADDR_VAR 0 4
12550: PUSH
12551: LD_VAR 0 1
12555: PUSH
12556: FOR_IN
12557: IFFALSE 12634
// if BuildingStatus ( b ) = bs_build then
12559: LD_VAR 0 2
12563: PPUSH
12564: CALL_OW 461
12568: PUSH
12569: LD_INT 1
12571: EQUAL
12572: IFFALSE 12632
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12574: LD_VAR 0 4
12578: PPUSH
12579: LD_STRING h
12581: PUSH
12582: LD_VAR 0 2
12586: PPUSH
12587: CALL_OW 250
12591: PUSH
12592: LD_VAR 0 2
12596: PPUSH
12597: CALL_OW 251
12601: PUSH
12602: LD_VAR 0 2
12606: PUSH
12607: LD_INT 0
12609: PUSH
12610: LD_INT 0
12612: PUSH
12613: LD_INT 0
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: PPUSH
12628: CALL_OW 446
12632: GO 12556
12634: POP
12635: POP
// end ;
12636: LD_VAR 0 3
12640: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12641: LD_INT 0
12643: PPUSH
12644: PPUSH
12645: PPUSH
12646: PPUSH
12647: PPUSH
12648: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12649: LD_VAR 0 1
12653: NOT
12654: PUSH
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 263
12664: PUSH
12665: LD_INT 2
12667: NONEQUAL
12668: OR
12669: IFFALSE 12673
// exit ;
12671: GO 12989
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12673: LD_ADDR_VAR 0 6
12677: PUSH
12678: LD_INT 22
12680: PUSH
12681: LD_VAR 0 1
12685: PPUSH
12686: CALL_OW 255
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: LD_INT 30
12700: PUSH
12701: LD_INT 36
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 34
12710: PUSH
12711: LD_INT 31
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 69
12731: ST_TO_ADDR
// if not tmp then
12732: LD_VAR 0 6
12736: NOT
12737: IFFALSE 12741
// exit ;
12739: GO 12989
// result := [ ] ;
12741: LD_ADDR_VAR 0 2
12745: PUSH
12746: EMPTY
12747: ST_TO_ADDR
// for i in tmp do
12748: LD_ADDR_VAR 0 3
12752: PUSH
12753: LD_VAR 0 6
12757: PUSH
12758: FOR_IN
12759: IFFALSE 12830
// begin t := UnitsInside ( i ) ;
12761: LD_ADDR_VAR 0 4
12765: PUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: CALL_OW 313
12775: ST_TO_ADDR
// if t then
12776: LD_VAR 0 4
12780: IFFALSE 12828
// for j in t do
12782: LD_ADDR_VAR 0 7
12786: PUSH
12787: LD_VAR 0 4
12791: PUSH
12792: FOR_IN
12793: IFFALSE 12826
// result := Replace ( result , result + 1 , j ) ;
12795: LD_ADDR_VAR 0 2
12799: PUSH
12800: LD_VAR 0 2
12804: PPUSH
12805: LD_VAR 0 2
12809: PUSH
12810: LD_INT 1
12812: PLUS
12813: PPUSH
12814: LD_VAR 0 7
12818: PPUSH
12819: CALL_OW 1
12823: ST_TO_ADDR
12824: GO 12792
12826: POP
12827: POP
// end ;
12828: GO 12758
12830: POP
12831: POP
// if not result then
12832: LD_VAR 0 2
12836: NOT
12837: IFFALSE 12841
// exit ;
12839: GO 12989
// mech := result [ 1 ] ;
12841: LD_ADDR_VAR 0 5
12845: PUSH
12846: LD_VAR 0 2
12850: PUSH
12851: LD_INT 1
12853: ARRAY
12854: ST_TO_ADDR
// if result > 1 then
12855: LD_VAR 0 2
12859: PUSH
12860: LD_INT 1
12862: GREATER
12863: IFFALSE 12975
// begin for i = 2 to result do
12865: LD_ADDR_VAR 0 3
12869: PUSH
12870: DOUBLE
12871: LD_INT 2
12873: DEC
12874: ST_TO_ADDR
12875: LD_VAR 0 2
12879: PUSH
12880: FOR_TO
12881: IFFALSE 12973
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12883: LD_ADDR_VAR 0 4
12887: PUSH
12888: LD_VAR 0 2
12892: PUSH
12893: LD_VAR 0 3
12897: ARRAY
12898: PPUSH
12899: LD_INT 3
12901: PPUSH
12902: CALL_OW 259
12906: PUSH
12907: LD_VAR 0 2
12911: PUSH
12912: LD_VAR 0 3
12916: ARRAY
12917: PPUSH
12918: CALL_OW 432
12922: MINUS
12923: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12924: LD_VAR 0 4
12928: PUSH
12929: LD_VAR 0 5
12933: PPUSH
12934: LD_INT 3
12936: PPUSH
12937: CALL_OW 259
12941: PUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 432
12951: MINUS
12952: GREATEREQUAL
12953: IFFALSE 12971
// mech := result [ i ] ;
12955: LD_ADDR_VAR 0 5
12959: PUSH
12960: LD_VAR 0 2
12964: PUSH
12965: LD_VAR 0 3
12969: ARRAY
12970: ST_TO_ADDR
// end ;
12971: GO 12880
12973: POP
12974: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_VAR 0 5
12984: PPUSH
12985: CALL_OW 135
// end ;
12989: LD_VAR 0 2
12993: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12994: LD_INT 0
12996: PPUSH
12997: PPUSH
12998: PPUSH
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
13005: PPUSH
13006: PPUSH
13007: PPUSH
13008: PPUSH
// result := [ ] ;
13009: LD_ADDR_VAR 0 7
13013: PUSH
13014: EMPTY
13015: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13016: LD_VAR 0 1
13020: PPUSH
13021: CALL_OW 266
13025: PUSH
13026: LD_INT 0
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: IN
13036: NOT
13037: IFFALSE 13041
// exit ;
13039: GO 14675
// if name then
13041: LD_VAR 0 3
13045: IFFALSE 13061
// SetBName ( base_dep , name ) ;
13047: LD_VAR 0 1
13051: PPUSH
13052: LD_VAR 0 3
13056: PPUSH
13057: CALL_OW 500
// base := GetBase ( base_dep ) ;
13061: LD_ADDR_VAR 0 15
13065: PUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 274
13075: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13076: LD_ADDR_VAR 0 16
13080: PUSH
13081: LD_VAR 0 1
13085: PPUSH
13086: CALL_OW 255
13090: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13091: LD_ADDR_VAR 0 17
13095: PUSH
13096: LD_VAR 0 1
13100: PPUSH
13101: CALL_OW 248
13105: ST_TO_ADDR
// if sources then
13106: LD_VAR 0 5
13110: IFFALSE 13157
// for i = 1 to 3 do
13112: LD_ADDR_VAR 0 8
13116: PUSH
13117: DOUBLE
13118: LD_INT 1
13120: DEC
13121: ST_TO_ADDR
13122: LD_INT 3
13124: PUSH
13125: FOR_TO
13126: IFFALSE 13155
// AddResourceType ( base , i , sources [ i ] ) ;
13128: LD_VAR 0 15
13132: PPUSH
13133: LD_VAR 0 8
13137: PPUSH
13138: LD_VAR 0 5
13142: PUSH
13143: LD_VAR 0 8
13147: ARRAY
13148: PPUSH
13149: CALL_OW 276
13153: GO 13125
13155: POP
13156: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13157: LD_ADDR_VAR 0 18
13161: PUSH
13162: LD_VAR 0 15
13166: PPUSH
13167: LD_VAR 0 2
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL 12418 0 3
13179: ST_TO_ADDR
// InitHc ;
13180: CALL_OW 19
// InitUc ;
13184: CALL_OW 18
// uc_side := side ;
13188: LD_ADDR_OWVAR 20
13192: PUSH
13193: LD_VAR 0 16
13197: ST_TO_ADDR
// uc_nation := nation ;
13198: LD_ADDR_OWVAR 21
13202: PUSH
13203: LD_VAR 0 17
13207: ST_TO_ADDR
// if buildings then
13208: LD_VAR 0 18
13212: IFFALSE 14534
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13214: LD_ADDR_VAR 0 19
13218: PUSH
13219: LD_VAR 0 18
13223: PPUSH
13224: LD_INT 2
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 29
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 30
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: PPUSH
13252: CALL_OW 72
13256: ST_TO_ADDR
// if tmp then
13257: LD_VAR 0 19
13261: IFFALSE 13309
// for i in tmp do
13263: LD_ADDR_VAR 0 8
13267: PUSH
13268: LD_VAR 0 19
13272: PUSH
13273: FOR_IN
13274: IFFALSE 13307
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13276: LD_VAR 0 8
13280: PPUSH
13281: CALL_OW 250
13285: PPUSH
13286: LD_VAR 0 8
13290: PPUSH
13291: CALL_OW 251
13295: PPUSH
13296: LD_VAR 0 16
13300: PPUSH
13301: CALL_OW 441
13305: GO 13273
13307: POP
13308: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13309: LD_VAR 0 18
13313: PPUSH
13314: LD_INT 2
13316: PUSH
13317: LD_INT 30
13319: PUSH
13320: LD_INT 32
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 30
13329: PUSH
13330: LD_INT 33
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 72
13346: IFFALSE 13434
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13348: LD_ADDR_VAR 0 8
13352: PUSH
13353: LD_VAR 0 18
13357: PPUSH
13358: LD_INT 2
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 32
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 30
13373: PUSH
13374: LD_INT 33
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 72
13390: PUSH
13391: FOR_IN
13392: IFFALSE 13432
// begin if not GetBWeapon ( i ) then
13394: LD_VAR 0 8
13398: PPUSH
13399: CALL_OW 269
13403: NOT
13404: IFFALSE 13430
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13406: LD_VAR 0 8
13410: PPUSH
13411: LD_VAR 0 8
13415: PPUSH
13416: LD_VAR 0 2
13420: PPUSH
13421: CALL 14680 0 2
13425: PPUSH
13426: CALL_OW 431
// end ;
13430: GO 13391
13432: POP
13433: POP
// end ; for i = 1 to personel do
13434: LD_ADDR_VAR 0 8
13438: PUSH
13439: DOUBLE
13440: LD_INT 1
13442: DEC
13443: ST_TO_ADDR
13444: LD_VAR 0 6
13448: PUSH
13449: FOR_TO
13450: IFFALSE 14514
// begin if i > 4 then
13452: LD_VAR 0 8
13456: PUSH
13457: LD_INT 4
13459: GREATER
13460: IFFALSE 13464
// break ;
13462: GO 14514
// case i of 1 :
13464: LD_VAR 0 8
13468: PUSH
13469: LD_INT 1
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13557
13477: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13478: LD_ADDR_VAR 0 12
13482: PUSH
13483: LD_VAR 0 18
13487: PPUSH
13488: LD_INT 22
13490: PUSH
13491: LD_VAR 0 16
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 58
13502: PUSH
13503: EMPTY
13504: LIST
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 30
13511: PUSH
13512: LD_INT 32
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 30
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 30
13531: PUSH
13532: LD_INT 5
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 72
13554: ST_TO_ADDR
13555: GO 13779
13557: LD_INT 2
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13627
13565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13566: LD_ADDR_VAR 0 12
13570: PUSH
13571: LD_VAR 0 18
13575: PPUSH
13576: LD_INT 22
13578: PUSH
13579: LD_VAR 0 16
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 2
13590: PUSH
13591: LD_INT 30
13593: PUSH
13594: LD_INT 0
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 30
13603: PUSH
13604: LD_INT 1
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 72
13624: ST_TO_ADDR
13625: GO 13779
13627: LD_INT 3
13629: DOUBLE
13630: EQUAL
13631: IFTRUE 13635
13633: GO 13697
13635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13636: LD_ADDR_VAR 0 12
13640: PUSH
13641: LD_VAR 0 18
13645: PPUSH
13646: LD_INT 22
13648: PUSH
13649: LD_VAR 0 16
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 2
13660: PUSH
13661: LD_INT 30
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 30
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 72
13694: ST_TO_ADDR
13695: GO 13779
13697: LD_INT 4
13699: DOUBLE
13700: EQUAL
13701: IFTRUE 13705
13703: GO 13778
13705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13706: LD_ADDR_VAR 0 12
13710: PUSH
13711: LD_VAR 0 18
13715: PPUSH
13716: LD_INT 22
13718: PUSH
13719: LD_VAR 0 16
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: LD_INT 30
13733: PUSH
13734: LD_INT 6
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 30
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 8
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PPUSH
13771: CALL_OW 72
13775: ST_TO_ADDR
13776: GO 13779
13778: POP
// if i = 1 then
13779: LD_VAR 0 8
13783: PUSH
13784: LD_INT 1
13786: EQUAL
13787: IFFALSE 13898
// begin tmp := [ ] ;
13789: LD_ADDR_VAR 0 19
13793: PUSH
13794: EMPTY
13795: ST_TO_ADDR
// for j in f do
13796: LD_ADDR_VAR 0 9
13800: PUSH
13801: LD_VAR 0 12
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13880
// if GetBType ( j ) = b_bunker then
13809: LD_VAR 0 9
13813: PPUSH
13814: CALL_OW 266
13818: PUSH
13819: LD_INT 32
13821: EQUAL
13822: IFFALSE 13849
// tmp := Insert ( tmp , 1 , j ) else
13824: LD_ADDR_VAR 0 19
13828: PUSH
13829: LD_VAR 0 19
13833: PPUSH
13834: LD_INT 1
13836: PPUSH
13837: LD_VAR 0 9
13841: PPUSH
13842: CALL_OW 2
13846: ST_TO_ADDR
13847: GO 13878
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13849: LD_ADDR_VAR 0 19
13853: PUSH
13854: LD_VAR 0 19
13858: PPUSH
13859: LD_VAR 0 19
13863: PUSH
13864: LD_INT 1
13866: PLUS
13867: PPUSH
13868: LD_VAR 0 9
13872: PPUSH
13873: CALL_OW 2
13877: ST_TO_ADDR
13878: GO 13806
13880: POP
13881: POP
// if tmp then
13882: LD_VAR 0 19
13886: IFFALSE 13898
// f := tmp ;
13888: LD_ADDR_VAR 0 12
13892: PUSH
13893: LD_VAR 0 19
13897: ST_TO_ADDR
// end ; x := personel [ i ] ;
13898: LD_ADDR_VAR 0 13
13902: PUSH
13903: LD_VAR 0 6
13907: PUSH
13908: LD_VAR 0 8
13912: ARRAY
13913: ST_TO_ADDR
// if x = - 1 then
13914: LD_VAR 0 13
13918: PUSH
13919: LD_INT 1
13921: NEG
13922: EQUAL
13923: IFFALSE 14132
// begin for j in f do
13925: LD_ADDR_VAR 0 9
13929: PUSH
13930: LD_VAR 0 12
13934: PUSH
13935: FOR_IN
13936: IFFALSE 14128
// repeat InitHc ;
13938: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13942: LD_VAR 0 9
13946: PPUSH
13947: CALL_OW 266
13951: PUSH
13952: LD_INT 5
13954: EQUAL
13955: IFFALSE 14025
// begin if UnitsInside ( j ) < 3 then
13957: LD_VAR 0 9
13961: PPUSH
13962: CALL_OW 313
13966: PUSH
13967: LD_INT 3
13969: LESS
13970: IFFALSE 14006
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13972: LD_INT 0
13974: PPUSH
13975: LD_INT 5
13977: PUSH
13978: LD_INT 8
13980: PUSH
13981: LD_INT 9
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: PUSH
13989: LD_VAR 0 17
13993: ARRAY
13994: PPUSH
13995: LD_VAR 0 4
13999: PPUSH
14000: CALL_OW 380
14004: GO 14023
// PrepareHuman ( false , i , skill ) ;
14006: LD_INT 0
14008: PPUSH
14009: LD_VAR 0 8
14013: PPUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 380
// end else
14023: GO 14042
// PrepareHuman ( false , i , skill ) ;
14025: LD_INT 0
14027: PPUSH
14028: LD_VAR 0 8
14032: PPUSH
14033: LD_VAR 0 4
14037: PPUSH
14038: CALL_OW 380
// un := CreateHuman ;
14042: LD_ADDR_VAR 0 14
14046: PUSH
14047: CALL_OW 44
14051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14052: LD_ADDR_VAR 0 7
14056: PUSH
14057: LD_VAR 0 7
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: LD_VAR 0 14
14069: PPUSH
14070: CALL_OW 2
14074: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14075: LD_VAR 0 14
14079: PPUSH
14080: LD_VAR 0 9
14084: PPUSH
14085: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14089: LD_VAR 0 9
14093: PPUSH
14094: CALL_OW 313
14098: PUSH
14099: LD_INT 6
14101: EQUAL
14102: PUSH
14103: LD_VAR 0 9
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 32
14115: PUSH
14116: LD_INT 31
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: IN
14123: OR
14124: IFFALSE 13938
14126: GO 13935
14128: POP
14129: POP
// end else
14130: GO 14512
// for j = 1 to x do
14132: LD_ADDR_VAR 0 9
14136: PUSH
14137: DOUBLE
14138: LD_INT 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_VAR 0 13
14146: PUSH
14147: FOR_TO
14148: IFFALSE 14510
// begin InitHc ;
14150: CALL_OW 19
// if not f then
14154: LD_VAR 0 12
14158: NOT
14159: IFFALSE 14248
// begin PrepareHuman ( false , i , skill ) ;
14161: LD_INT 0
14163: PPUSH
14164: LD_VAR 0 8
14168: PPUSH
14169: LD_VAR 0 4
14173: PPUSH
14174: CALL_OW 380
// un := CreateHuman ;
14178: LD_ADDR_VAR 0 14
14182: PUSH
14183: CALL_OW 44
14187: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14188: LD_ADDR_VAR 0 7
14192: PUSH
14193: LD_VAR 0 7
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: LD_VAR 0 14
14205: PPUSH
14206: CALL_OW 2
14210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14211: LD_VAR 0 14
14215: PPUSH
14216: LD_VAR 0 1
14220: PPUSH
14221: CALL_OW 250
14225: PPUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: CALL_OW 251
14235: PPUSH
14236: LD_INT 10
14238: PPUSH
14239: LD_INT 0
14241: PPUSH
14242: CALL_OW 50
// continue ;
14246: GO 14147
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14248: LD_VAR 0 12
14252: PUSH
14253: LD_INT 1
14255: ARRAY
14256: PPUSH
14257: CALL_OW 313
14261: PUSH
14262: LD_VAR 0 12
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: CALL_OW 266
14275: PUSH
14276: LD_INT 32
14278: PUSH
14279: LD_INT 31
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: IN
14286: AND
14287: PUSH
14288: LD_VAR 0 12
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PPUSH
14297: CALL_OW 313
14301: PUSH
14302: LD_INT 6
14304: EQUAL
14305: OR
14306: IFFALSE 14326
// f := Delete ( f , 1 ) ;
14308: LD_ADDR_VAR 0 12
14312: PUSH
14313: LD_VAR 0 12
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: CALL_OW 3
14325: ST_TO_ADDR
// if not f then
14326: LD_VAR 0 12
14330: NOT
14331: IFFALSE 14349
// begin x := x + 2 ;
14333: LD_ADDR_VAR 0 13
14337: PUSH
14338: LD_VAR 0 13
14342: PUSH
14343: LD_INT 2
14345: PLUS
14346: ST_TO_ADDR
// continue ;
14347: GO 14147
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14349: LD_VAR 0 12
14353: PUSH
14354: LD_INT 1
14356: ARRAY
14357: PPUSH
14358: CALL_OW 266
14362: PUSH
14363: LD_INT 5
14365: EQUAL
14366: IFFALSE 14440
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14368: LD_VAR 0 12
14372: PUSH
14373: LD_INT 1
14375: ARRAY
14376: PPUSH
14377: CALL_OW 313
14381: PUSH
14382: LD_INT 3
14384: LESS
14385: IFFALSE 14421
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14387: LD_INT 0
14389: PPUSH
14390: LD_INT 5
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: LD_INT 9
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: PUSH
14404: LD_VAR 0 17
14408: ARRAY
14409: PPUSH
14410: LD_VAR 0 4
14414: PPUSH
14415: CALL_OW 380
14419: GO 14438
// PrepareHuman ( false , i , skill ) ;
14421: LD_INT 0
14423: PPUSH
14424: LD_VAR 0 8
14428: PPUSH
14429: LD_VAR 0 4
14433: PPUSH
14434: CALL_OW 380
// end else
14438: GO 14457
// PrepareHuman ( false , i , skill ) ;
14440: LD_INT 0
14442: PPUSH
14443: LD_VAR 0 8
14447: PPUSH
14448: LD_VAR 0 4
14452: PPUSH
14453: CALL_OW 380
// un := CreateHuman ;
14457: LD_ADDR_VAR 0 14
14461: PUSH
14462: CALL_OW 44
14466: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14467: LD_ADDR_VAR 0 7
14471: PUSH
14472: LD_VAR 0 7
14476: PPUSH
14477: LD_INT 1
14479: PPUSH
14480: LD_VAR 0 14
14484: PPUSH
14485: CALL_OW 2
14489: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14490: LD_VAR 0 14
14494: PPUSH
14495: LD_VAR 0 12
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: PPUSH
14504: CALL_OW 52
// end ;
14508: GO 14147
14510: POP
14511: POP
// end ;
14512: GO 13449
14514: POP
14515: POP
// result := result ^ buildings ;
14516: LD_ADDR_VAR 0 7
14520: PUSH
14521: LD_VAR 0 7
14525: PUSH
14526: LD_VAR 0 18
14530: ADD
14531: ST_TO_ADDR
// end else
14532: GO 14675
// begin for i = 1 to personel do
14534: LD_ADDR_VAR 0 8
14538: PUSH
14539: DOUBLE
14540: LD_INT 1
14542: DEC
14543: ST_TO_ADDR
14544: LD_VAR 0 6
14548: PUSH
14549: FOR_TO
14550: IFFALSE 14673
// begin if i > 4 then
14552: LD_VAR 0 8
14556: PUSH
14557: LD_INT 4
14559: GREATER
14560: IFFALSE 14564
// break ;
14562: GO 14673
// x := personel [ i ] ;
14564: LD_ADDR_VAR 0 13
14568: PUSH
14569: LD_VAR 0 6
14573: PUSH
14574: LD_VAR 0 8
14578: ARRAY
14579: ST_TO_ADDR
// if x = - 1 then
14580: LD_VAR 0 13
14584: PUSH
14585: LD_INT 1
14587: NEG
14588: EQUAL
14589: IFFALSE 14593
// continue ;
14591: GO 14549
// PrepareHuman ( false , i , skill ) ;
14593: LD_INT 0
14595: PPUSH
14596: LD_VAR 0 8
14600: PPUSH
14601: LD_VAR 0 4
14605: PPUSH
14606: CALL_OW 380
// un := CreateHuman ;
14610: LD_ADDR_VAR 0 14
14614: PUSH
14615: CALL_OW 44
14619: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14620: LD_VAR 0 14
14624: PPUSH
14625: LD_VAR 0 1
14629: PPUSH
14630: CALL_OW 250
14634: PPUSH
14635: LD_VAR 0 1
14639: PPUSH
14640: CALL_OW 251
14644: PPUSH
14645: LD_INT 10
14647: PPUSH
14648: LD_INT 0
14650: PPUSH
14651: CALL_OW 50
// result := result ^ un ;
14655: LD_ADDR_VAR 0 7
14659: PUSH
14660: LD_VAR 0 7
14664: PUSH
14665: LD_VAR 0 14
14669: ADD
14670: ST_TO_ADDR
// end ;
14671: GO 14549
14673: POP
14674: POP
// end ; end ;
14675: LD_VAR 0 7
14679: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14680: LD_INT 0
14682: PPUSH
14683: PPUSH
14684: PPUSH
14685: PPUSH
14686: PPUSH
14687: PPUSH
14688: PPUSH
14689: PPUSH
14690: PPUSH
14691: PPUSH
14692: PPUSH
14693: PPUSH
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
// result := false ;
14698: LD_ADDR_VAR 0 3
14702: PUSH
14703: LD_INT 0
14705: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14706: LD_VAR 0 1
14710: NOT
14711: PUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 266
14721: PUSH
14722: LD_INT 32
14724: PUSH
14725: LD_INT 33
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: IN
14732: NOT
14733: OR
14734: IFFALSE 14738
// exit ;
14736: GO 15847
// nat := GetNation ( tower ) ;
14738: LD_ADDR_VAR 0 12
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 248
14752: ST_TO_ADDR
// side := GetSide ( tower ) ;
14753: LD_ADDR_VAR 0 16
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 255
14767: ST_TO_ADDR
// x := GetX ( tower ) ;
14768: LD_ADDR_VAR 0 10
14772: PUSH
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 250
14782: ST_TO_ADDR
// y := GetY ( tower ) ;
14783: LD_ADDR_VAR 0 11
14787: PUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 251
14797: ST_TO_ADDR
// if not x or not y then
14798: LD_VAR 0 10
14802: NOT
14803: PUSH
14804: LD_VAR 0 11
14808: NOT
14809: OR
14810: IFFALSE 14814
// exit ;
14812: GO 15847
// weapon := 0 ;
14814: LD_ADDR_VAR 0 18
14818: PUSH
14819: LD_INT 0
14821: ST_TO_ADDR
// fac_list := [ ] ;
14822: LD_ADDR_VAR 0 17
14826: PUSH
14827: EMPTY
14828: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14829: LD_ADDR_VAR 0 6
14833: PUSH
14834: LD_VAR 0 1
14838: PPUSH
14839: CALL_OW 274
14843: PPUSH
14844: LD_VAR 0 2
14848: PPUSH
14849: LD_INT 0
14851: PPUSH
14852: CALL 12418 0 3
14856: PPUSH
14857: LD_INT 30
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PPUSH
14867: CALL_OW 72
14871: ST_TO_ADDR
// if not factories then
14872: LD_VAR 0 6
14876: NOT
14877: IFFALSE 14881
// exit ;
14879: GO 15847
// for i in factories do
14881: LD_ADDR_VAR 0 8
14885: PUSH
14886: LD_VAR 0 6
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14917
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14894: LD_ADDR_VAR 0 17
14898: PUSH
14899: LD_VAR 0 17
14903: PUSH
14904: LD_VAR 0 8
14908: PPUSH
14909: CALL_OW 478
14913: UNION
14914: ST_TO_ADDR
14915: GO 14891
14917: POP
14918: POP
// if not fac_list then
14919: LD_VAR 0 17
14923: NOT
14924: IFFALSE 14928
// exit ;
14926: GO 15847
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14928: LD_ADDR_VAR 0 5
14932: PUSH
14933: LD_INT 4
14935: PUSH
14936: LD_INT 5
14938: PUSH
14939: LD_INT 9
14941: PUSH
14942: LD_INT 10
14944: PUSH
14945: LD_INT 6
14947: PUSH
14948: LD_INT 7
14950: PUSH
14951: LD_INT 11
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 27
14965: PUSH
14966: LD_INT 28
14968: PUSH
14969: LD_INT 26
14971: PUSH
14972: LD_INT 30
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 43
14983: PUSH
14984: LD_INT 44
14986: PUSH
14987: LD_INT 46
14989: PUSH
14990: LD_INT 45
14992: PUSH
14993: LD_INT 47
14995: PUSH
14996: LD_INT 49
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: LD_VAR 0 12
15016: ARRAY
15017: ST_TO_ADDR
// list := list isect fac_list ;
15018: LD_ADDR_VAR 0 5
15022: PUSH
15023: LD_VAR 0 5
15027: PUSH
15028: LD_VAR 0 17
15032: ISECT
15033: ST_TO_ADDR
// if not list then
15034: LD_VAR 0 5
15038: NOT
15039: IFFALSE 15043
// exit ;
15041: GO 15847
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15043: LD_VAR 0 12
15047: PUSH
15048: LD_INT 3
15050: EQUAL
15051: PUSH
15052: LD_INT 49
15054: PUSH
15055: LD_VAR 0 5
15059: IN
15060: AND
15061: PUSH
15062: LD_INT 31
15064: PPUSH
15065: LD_VAR 0 16
15069: PPUSH
15070: CALL_OW 321
15074: PUSH
15075: LD_INT 2
15077: EQUAL
15078: AND
15079: IFFALSE 15139
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15081: LD_INT 22
15083: PUSH
15084: LD_VAR 0 16
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 35
15095: PUSH
15096: LD_INT 49
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 91
15105: PUSH
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 10
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: PPUSH
15124: CALL_OW 69
15128: NOT
15129: IFFALSE 15139
// weapon := ru_time_lapser ;
15131: LD_ADDR_VAR 0 18
15135: PUSH
15136: LD_INT 49
15138: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15139: LD_VAR 0 12
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: LD_INT 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: IN
15154: PUSH
15155: LD_INT 11
15157: PUSH
15158: LD_VAR 0 5
15162: IN
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_VAR 0 5
15171: IN
15172: OR
15173: AND
15174: PUSH
15175: LD_INT 6
15177: PPUSH
15178: LD_VAR 0 16
15182: PPUSH
15183: CALL_OW 321
15187: PUSH
15188: LD_INT 2
15190: EQUAL
15191: AND
15192: IFFALSE 15357
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15194: LD_INT 22
15196: PUSH
15197: LD_VAR 0 16
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: LD_INT 35
15211: PUSH
15212: LD_INT 11
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 35
15221: PUSH
15222: LD_INT 30
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 91
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: LD_INT 18
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: PPUSH
15255: CALL_OW 69
15259: NOT
15260: PUSH
15261: LD_INT 22
15263: PUSH
15264: LD_VAR 0 16
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 2
15275: PUSH
15276: LD_INT 30
15278: PUSH
15279: LD_INT 32
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 30
15288: PUSH
15289: LD_INT 33
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 91
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: LD_INT 12
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: PUSH
15322: EMPTY
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: PUSH
15330: LD_INT 2
15332: GREATER
15333: AND
15334: IFFALSE 15357
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15336: LD_ADDR_VAR 0 18
15340: PUSH
15341: LD_INT 11
15343: PUSH
15344: LD_INT 30
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_VAR 0 12
15355: ARRAY
15356: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15357: LD_VAR 0 18
15361: NOT
15362: PUSH
15363: LD_INT 40
15365: PPUSH
15366: LD_VAR 0 16
15370: PPUSH
15371: CALL_OW 321
15375: PUSH
15376: LD_INT 2
15378: EQUAL
15379: AND
15380: PUSH
15381: LD_INT 7
15383: PUSH
15384: LD_VAR 0 5
15388: IN
15389: PUSH
15390: LD_INT 28
15392: PUSH
15393: LD_VAR 0 5
15397: IN
15398: OR
15399: PUSH
15400: LD_INT 45
15402: PUSH
15403: LD_VAR 0 5
15407: IN
15408: OR
15409: AND
15410: IFFALSE 15664
// begin hex := GetHexInfo ( x , y ) ;
15412: LD_ADDR_VAR 0 4
15416: PUSH
15417: LD_VAR 0 10
15421: PPUSH
15422: LD_VAR 0 11
15426: PPUSH
15427: CALL_OW 546
15431: ST_TO_ADDR
// if hex [ 1 ] then
15432: LD_VAR 0 4
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: IFFALSE 15444
// exit ;
15442: GO 15847
// height := hex [ 2 ] ;
15444: LD_ADDR_VAR 0 15
15448: PUSH
15449: LD_VAR 0 4
15453: PUSH
15454: LD_INT 2
15456: ARRAY
15457: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15458: LD_ADDR_VAR 0 14
15462: PUSH
15463: LD_INT 0
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: LD_INT 3
15471: PUSH
15472: LD_INT 5
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: ST_TO_ADDR
// for i in tmp do
15481: LD_ADDR_VAR 0 8
15485: PUSH
15486: LD_VAR 0 14
15490: PUSH
15491: FOR_IN
15492: IFFALSE 15662
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15494: LD_ADDR_VAR 0 9
15498: PUSH
15499: LD_VAR 0 10
15503: PPUSH
15504: LD_VAR 0 8
15508: PPUSH
15509: LD_INT 5
15511: PPUSH
15512: CALL_OW 272
15516: PUSH
15517: LD_VAR 0 11
15521: PPUSH
15522: LD_VAR 0 8
15526: PPUSH
15527: LD_INT 5
15529: PPUSH
15530: CALL_OW 273
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15539: LD_VAR 0 9
15543: PUSH
15544: LD_INT 1
15546: ARRAY
15547: PPUSH
15548: LD_VAR 0 9
15552: PUSH
15553: LD_INT 2
15555: ARRAY
15556: PPUSH
15557: CALL_OW 488
15561: IFFALSE 15660
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15563: LD_ADDR_VAR 0 4
15567: PUSH
15568: LD_VAR 0 9
15572: PUSH
15573: LD_INT 1
15575: ARRAY
15576: PPUSH
15577: LD_VAR 0 9
15581: PUSH
15582: LD_INT 2
15584: ARRAY
15585: PPUSH
15586: CALL_OW 546
15590: ST_TO_ADDR
// if hex [ 1 ] then
15591: LD_VAR 0 4
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: IFFALSE 15603
// continue ;
15601: GO 15491
// h := hex [ 2 ] ;
15603: LD_ADDR_VAR 0 13
15607: PUSH
15608: LD_VAR 0 4
15612: PUSH
15613: LD_INT 2
15615: ARRAY
15616: ST_TO_ADDR
// if h + 7 < height then
15617: LD_VAR 0 13
15621: PUSH
15622: LD_INT 7
15624: PLUS
15625: PUSH
15626: LD_VAR 0 15
15630: LESS
15631: IFFALSE 15660
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15633: LD_ADDR_VAR 0 18
15637: PUSH
15638: LD_INT 7
15640: PUSH
15641: LD_INT 28
15643: PUSH
15644: LD_INT 45
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: LIST
15651: PUSH
15652: LD_VAR 0 12
15656: ARRAY
15657: ST_TO_ADDR
// break ;
15658: GO 15662
// end ; end ; end ;
15660: GO 15491
15662: POP
15663: POP
// end ; if not weapon then
15664: LD_VAR 0 18
15668: NOT
15669: IFFALSE 15729
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15671: LD_ADDR_VAR 0 5
15675: PUSH
15676: LD_VAR 0 5
15680: PUSH
15681: LD_INT 11
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: LD_INT 49
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: DIFF
15695: ST_TO_ADDR
// if not list then
15696: LD_VAR 0 5
15700: NOT
15701: IFFALSE 15705
// exit ;
15703: GO 15847
// weapon := list [ rand ( 1 , list ) ] ;
15705: LD_ADDR_VAR 0 18
15709: PUSH
15710: LD_VAR 0 5
15714: PUSH
15715: LD_INT 1
15717: PPUSH
15718: LD_VAR 0 5
15722: PPUSH
15723: CALL_OW 12
15727: ARRAY
15728: ST_TO_ADDR
// end ; if weapon then
15729: LD_VAR 0 18
15733: IFFALSE 15847
// begin tmp := CostOfWeapon ( weapon ) ;
15735: LD_ADDR_VAR 0 14
15739: PUSH
15740: LD_VAR 0 18
15744: PPUSH
15745: CALL_OW 451
15749: ST_TO_ADDR
// j := GetBase ( tower ) ;
15750: LD_ADDR_VAR 0 9
15754: PUSH
15755: LD_VAR 0 1
15759: PPUSH
15760: CALL_OW 274
15764: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15765: LD_VAR 0 9
15769: PPUSH
15770: LD_INT 1
15772: PPUSH
15773: CALL_OW 275
15777: PUSH
15778: LD_VAR 0 14
15782: PUSH
15783: LD_INT 1
15785: ARRAY
15786: GREATEREQUAL
15787: PUSH
15788: LD_VAR 0 9
15792: PPUSH
15793: LD_INT 2
15795: PPUSH
15796: CALL_OW 275
15800: PUSH
15801: LD_VAR 0 14
15805: PUSH
15806: LD_INT 2
15808: ARRAY
15809: GREATEREQUAL
15810: AND
15811: PUSH
15812: LD_VAR 0 9
15816: PPUSH
15817: LD_INT 3
15819: PPUSH
15820: CALL_OW 275
15824: PUSH
15825: LD_VAR 0 14
15829: PUSH
15830: LD_INT 3
15832: ARRAY
15833: GREATEREQUAL
15834: AND
15835: IFFALSE 15847
// result := weapon ;
15837: LD_ADDR_VAR 0 3
15841: PUSH
15842: LD_VAR 0 18
15846: ST_TO_ADDR
// end ; end ;
15847: LD_VAR 0 3
15851: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15852: LD_INT 0
15854: PPUSH
15855: PPUSH
// result := true ;
15856: LD_ADDR_VAR 0 3
15860: PUSH
15861: LD_INT 1
15863: ST_TO_ADDR
// if array1 = array2 then
15864: LD_VAR 0 1
15868: PUSH
15869: LD_VAR 0 2
15873: EQUAL
15874: IFFALSE 15934
// begin for i = 1 to array1 do
15876: LD_ADDR_VAR 0 4
15880: PUSH
15881: DOUBLE
15882: LD_INT 1
15884: DEC
15885: ST_TO_ADDR
15886: LD_VAR 0 1
15890: PUSH
15891: FOR_TO
15892: IFFALSE 15930
// if array1 [ i ] <> array2 [ i ] then
15894: LD_VAR 0 1
15898: PUSH
15899: LD_VAR 0 4
15903: ARRAY
15904: PUSH
15905: LD_VAR 0 2
15909: PUSH
15910: LD_VAR 0 4
15914: ARRAY
15915: NONEQUAL
15916: IFFALSE 15928
// begin result := false ;
15918: LD_ADDR_VAR 0 3
15922: PUSH
15923: LD_INT 0
15925: ST_TO_ADDR
// break ;
15926: GO 15930
// end ;
15928: GO 15891
15930: POP
15931: POP
// end else
15932: GO 15942
// result := false ;
15934: LD_ADDR_VAR 0 3
15938: PUSH
15939: LD_INT 0
15941: ST_TO_ADDR
// end ;
15942: LD_VAR 0 3
15946: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15947: LD_INT 0
15949: PPUSH
15950: PPUSH
// if not array1 or not array2 then
15951: LD_VAR 0 1
15955: NOT
15956: PUSH
15957: LD_VAR 0 2
15961: NOT
15962: OR
15963: IFFALSE 15967
// exit ;
15965: GO 16031
// result := true ;
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// for i = 1 to array1 do
15975: LD_ADDR_VAR 0 4
15979: PUSH
15980: DOUBLE
15981: LD_INT 1
15983: DEC
15984: ST_TO_ADDR
15985: LD_VAR 0 1
15989: PUSH
15990: FOR_TO
15991: IFFALSE 16029
// if array1 [ i ] <> array2 [ i ] then
15993: LD_VAR 0 1
15997: PUSH
15998: LD_VAR 0 4
16002: ARRAY
16003: PUSH
16004: LD_VAR 0 2
16008: PUSH
16009: LD_VAR 0 4
16013: ARRAY
16014: NONEQUAL
16015: IFFALSE 16027
// begin result := false ;
16017: LD_ADDR_VAR 0 3
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// break ;
16025: GO 16029
// end ;
16027: GO 15990
16029: POP
16030: POP
// end ;
16031: LD_VAR 0 3
16035: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16036: LD_INT 0
16038: PPUSH
16039: PPUSH
16040: PPUSH
// pom := GetBase ( fac ) ;
16041: LD_ADDR_VAR 0 5
16045: PUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 274
16055: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16056: LD_ADDR_VAR 0 4
16060: PUSH
16061: LD_VAR 0 2
16065: PUSH
16066: LD_INT 1
16068: ARRAY
16069: PPUSH
16070: LD_VAR 0 2
16074: PUSH
16075: LD_INT 2
16077: ARRAY
16078: PPUSH
16079: LD_VAR 0 2
16083: PUSH
16084: LD_INT 3
16086: ARRAY
16087: PPUSH
16088: LD_VAR 0 2
16092: PUSH
16093: LD_INT 4
16095: ARRAY
16096: PPUSH
16097: CALL_OW 449
16101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16102: LD_ADDR_VAR 0 3
16106: PUSH
16107: LD_VAR 0 5
16111: PPUSH
16112: LD_INT 1
16114: PPUSH
16115: CALL_OW 275
16119: PUSH
16120: LD_VAR 0 4
16124: PUSH
16125: LD_INT 1
16127: ARRAY
16128: GREATEREQUAL
16129: PUSH
16130: LD_VAR 0 5
16134: PPUSH
16135: LD_INT 2
16137: PPUSH
16138: CALL_OW 275
16142: PUSH
16143: LD_VAR 0 4
16147: PUSH
16148: LD_INT 2
16150: ARRAY
16151: GREATEREQUAL
16152: AND
16153: PUSH
16154: LD_VAR 0 5
16158: PPUSH
16159: LD_INT 3
16161: PPUSH
16162: CALL_OW 275
16166: PUSH
16167: LD_VAR 0 4
16171: PUSH
16172: LD_INT 3
16174: ARRAY
16175: GREATEREQUAL
16176: AND
16177: ST_TO_ADDR
// end ;
16178: LD_VAR 0 3
16182: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16183: LD_INT 0
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
// pom := GetBase ( building ) ;
16189: LD_ADDR_VAR 0 3
16193: PUSH
16194: LD_VAR 0 1
16198: PPUSH
16199: CALL_OW 274
16203: ST_TO_ADDR
// if not pom then
16204: LD_VAR 0 3
16208: NOT
16209: IFFALSE 16213
// exit ;
16211: GO 16383
// btype := GetBType ( building ) ;
16213: LD_ADDR_VAR 0 5
16217: PUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 266
16227: ST_TO_ADDR
// if btype = b_armoury then
16228: LD_VAR 0 5
16232: PUSH
16233: LD_INT 4
16235: EQUAL
16236: IFFALSE 16246
// btype := b_barracks ;
16238: LD_ADDR_VAR 0 5
16242: PUSH
16243: LD_INT 5
16245: ST_TO_ADDR
// if btype = b_depot then
16246: LD_VAR 0 5
16250: PUSH
16251: LD_INT 0
16253: EQUAL
16254: IFFALSE 16264
// btype := b_warehouse ;
16256: LD_ADDR_VAR 0 5
16260: PUSH
16261: LD_INT 1
16263: ST_TO_ADDR
// if btype = b_workshop then
16264: LD_VAR 0 5
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: IFFALSE 16282
// btype := b_factory ;
16274: LD_ADDR_VAR 0 5
16278: PUSH
16279: LD_INT 3
16281: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16282: LD_ADDR_VAR 0 4
16286: PUSH
16287: LD_VAR 0 5
16291: PPUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 248
16301: PPUSH
16302: CALL_OW 450
16306: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16307: LD_ADDR_VAR 0 2
16311: PUSH
16312: LD_VAR 0 3
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 275
16324: PUSH
16325: LD_VAR 0 4
16329: PUSH
16330: LD_INT 1
16332: ARRAY
16333: GREATEREQUAL
16334: PUSH
16335: LD_VAR 0 3
16339: PPUSH
16340: LD_INT 2
16342: PPUSH
16343: CALL_OW 275
16347: PUSH
16348: LD_VAR 0 4
16352: PUSH
16353: LD_INT 2
16355: ARRAY
16356: GREATEREQUAL
16357: AND
16358: PUSH
16359: LD_VAR 0 3
16363: PPUSH
16364: LD_INT 3
16366: PPUSH
16367: CALL_OW 275
16371: PUSH
16372: LD_VAR 0 4
16376: PUSH
16377: LD_INT 3
16379: ARRAY
16380: GREATEREQUAL
16381: AND
16382: ST_TO_ADDR
// end ;
16383: LD_VAR 0 2
16387: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16388: LD_INT 0
16390: PPUSH
16391: PPUSH
16392: PPUSH
// pom := GetBase ( building ) ;
16393: LD_ADDR_VAR 0 4
16397: PUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 274
16407: ST_TO_ADDR
// if not pom then
16408: LD_VAR 0 4
16412: NOT
16413: IFFALSE 16417
// exit ;
16415: GO 16518
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16417: LD_ADDR_VAR 0 5
16421: PUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 248
16436: PPUSH
16437: CALL_OW 450
16441: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16442: LD_ADDR_VAR 0 3
16446: PUSH
16447: LD_VAR 0 4
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL_OW 275
16459: PUSH
16460: LD_VAR 0 5
16464: PUSH
16465: LD_INT 1
16467: ARRAY
16468: GREATEREQUAL
16469: PUSH
16470: LD_VAR 0 4
16474: PPUSH
16475: LD_INT 2
16477: PPUSH
16478: CALL_OW 275
16482: PUSH
16483: LD_VAR 0 5
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: GREATEREQUAL
16492: AND
16493: PUSH
16494: LD_VAR 0 4
16498: PPUSH
16499: LD_INT 3
16501: PPUSH
16502: CALL_OW 275
16506: PUSH
16507: LD_VAR 0 5
16511: PUSH
16512: LD_INT 3
16514: ARRAY
16515: GREATEREQUAL
16516: AND
16517: ST_TO_ADDR
// end ;
16518: LD_VAR 0 3
16522: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16523: LD_INT 0
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
// result := false ;
16536: LD_ADDR_VAR 0 8
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16544: LD_VAR 0 5
16548: NOT
16549: PUSH
16550: LD_VAR 0 1
16554: NOT
16555: OR
16556: PUSH
16557: LD_VAR 0 2
16561: NOT
16562: OR
16563: PUSH
16564: LD_VAR 0 3
16568: NOT
16569: OR
16570: IFFALSE 16574
// exit ;
16572: GO 17388
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16574: LD_ADDR_VAR 0 14
16578: PUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: LD_VAR 0 2
16588: PPUSH
16589: LD_VAR 0 3
16593: PPUSH
16594: LD_VAR 0 4
16598: PPUSH
16599: LD_VAR 0 5
16603: PUSH
16604: LD_INT 1
16606: ARRAY
16607: PPUSH
16608: CALL_OW 248
16612: PPUSH
16613: LD_INT 0
16615: PPUSH
16616: CALL 18641 0 6
16620: ST_TO_ADDR
// if not hexes then
16621: LD_VAR 0 14
16625: NOT
16626: IFFALSE 16630
// exit ;
16628: GO 17388
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16630: LD_ADDR_VAR 0 17
16634: PUSH
16635: LD_VAR 0 5
16639: PPUSH
16640: LD_INT 22
16642: PUSH
16643: LD_VAR 0 13
16647: PPUSH
16648: CALL_OW 255
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 30
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 30
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 72
16693: ST_TO_ADDR
// for i = 1 to hexes do
16694: LD_ADDR_VAR 0 9
16698: PUSH
16699: DOUBLE
16700: LD_INT 1
16702: DEC
16703: ST_TO_ADDR
16704: LD_VAR 0 14
16708: PUSH
16709: FOR_TO
16710: IFFALSE 17386
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16712: LD_ADDR_VAR 0 13
16716: PUSH
16717: LD_VAR 0 14
16721: PUSH
16722: LD_VAR 0 9
16726: ARRAY
16727: PUSH
16728: LD_INT 1
16730: ARRAY
16731: PPUSH
16732: LD_VAR 0 14
16736: PUSH
16737: LD_VAR 0 9
16741: ARRAY
16742: PUSH
16743: LD_INT 2
16745: ARRAY
16746: PPUSH
16747: CALL_OW 428
16751: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16752: LD_VAR 0 14
16756: PUSH
16757: LD_VAR 0 9
16761: ARRAY
16762: PUSH
16763: LD_INT 1
16765: ARRAY
16766: PPUSH
16767: LD_VAR 0 14
16771: PUSH
16772: LD_VAR 0 9
16776: ARRAY
16777: PUSH
16778: LD_INT 2
16780: ARRAY
16781: PPUSH
16782: CALL_OW 351
16786: PUSH
16787: LD_VAR 0 14
16791: PUSH
16792: LD_VAR 0 9
16796: ARRAY
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_VAR 0 14
16806: PUSH
16807: LD_VAR 0 9
16811: ARRAY
16812: PUSH
16813: LD_INT 2
16815: ARRAY
16816: PPUSH
16817: CALL_OW 488
16821: NOT
16822: OR
16823: PUSH
16824: LD_VAR 0 13
16828: PPUSH
16829: CALL_OW 247
16833: PUSH
16834: LD_INT 3
16836: EQUAL
16837: OR
16838: IFFALSE 16844
// exit ;
16840: POP
16841: POP
16842: GO 17388
// if not tmp then
16844: LD_VAR 0 13
16848: NOT
16849: IFFALSE 16853
// continue ;
16851: GO 16709
// result := true ;
16853: LD_ADDR_VAR 0 8
16857: PUSH
16858: LD_INT 1
16860: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16861: LD_VAR 0 6
16865: PUSH
16866: LD_VAR 0 13
16870: PPUSH
16871: CALL_OW 247
16875: PUSH
16876: LD_INT 2
16878: EQUAL
16879: AND
16880: PUSH
16881: LD_VAR 0 13
16885: PPUSH
16886: CALL_OW 263
16890: PUSH
16891: LD_INT 1
16893: EQUAL
16894: AND
16895: IFFALSE 17059
// begin if IsDrivenBy ( tmp ) then
16897: LD_VAR 0 13
16901: PPUSH
16902: CALL_OW 311
16906: IFFALSE 16910
// continue ;
16908: GO 16709
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16910: LD_VAR 0 6
16914: PPUSH
16915: LD_INT 3
16917: PUSH
16918: LD_INT 60
16920: PUSH
16921: EMPTY
16922: LIST
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 3
16930: PUSH
16931: LD_INT 55
16933: PUSH
16934: EMPTY
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 72
16949: IFFALSE 17057
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16951: LD_ADDR_VAR 0 18
16955: PUSH
16956: LD_VAR 0 6
16960: PPUSH
16961: LD_INT 3
16963: PUSH
16964: LD_INT 60
16966: PUSH
16967: EMPTY
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 3
16976: PUSH
16977: LD_INT 55
16979: PUSH
16980: EMPTY
16981: LIST
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PPUSH
16991: CALL_OW 72
16995: PUSH
16996: LD_INT 1
16998: ARRAY
16999: ST_TO_ADDR
// if IsInUnit ( driver ) then
17000: LD_VAR 0 18
17004: PPUSH
17005: CALL_OW 310
17009: IFFALSE 17020
// ComExit ( driver ) ;
17011: LD_VAR 0 18
17015: PPUSH
17016: CALL 42420 0 1
// AddComEnterUnit ( driver , tmp ) ;
17020: LD_VAR 0 18
17024: PPUSH
17025: LD_VAR 0 13
17029: PPUSH
17030: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17034: LD_VAR 0 18
17038: PPUSH
17039: LD_VAR 0 7
17043: PPUSH
17044: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17048: LD_VAR 0 18
17052: PPUSH
17053: CALL_OW 181
// end ; continue ;
17057: GO 16709
// end ; if not cleaners or not tmp in cleaners then
17059: LD_VAR 0 6
17063: NOT
17064: PUSH
17065: LD_VAR 0 13
17069: PUSH
17070: LD_VAR 0 6
17074: IN
17075: NOT
17076: OR
17077: IFFALSE 17384
// begin if dep then
17079: LD_VAR 0 17
17083: IFFALSE 17219
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17085: LD_ADDR_VAR 0 16
17089: PUSH
17090: LD_VAR 0 17
17094: PUSH
17095: LD_INT 1
17097: ARRAY
17098: PPUSH
17099: CALL_OW 250
17103: PPUSH
17104: LD_VAR 0 17
17108: PUSH
17109: LD_INT 1
17111: ARRAY
17112: PPUSH
17113: CALL_OW 254
17117: PPUSH
17118: LD_INT 5
17120: PPUSH
17121: CALL_OW 272
17125: PUSH
17126: LD_VAR 0 17
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: PPUSH
17135: CALL_OW 251
17139: PPUSH
17140: LD_VAR 0 17
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: PPUSH
17149: CALL_OW 254
17153: PPUSH
17154: LD_INT 5
17156: PPUSH
17157: CALL_OW 273
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17166: LD_VAR 0 16
17170: PUSH
17171: LD_INT 1
17173: ARRAY
17174: PPUSH
17175: LD_VAR 0 16
17179: PUSH
17180: LD_INT 2
17182: ARRAY
17183: PPUSH
17184: CALL_OW 488
17188: IFFALSE 17219
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17190: LD_VAR 0 13
17194: PPUSH
17195: LD_VAR 0 16
17199: PUSH
17200: LD_INT 1
17202: ARRAY
17203: PPUSH
17204: LD_VAR 0 16
17208: PUSH
17209: LD_INT 2
17211: ARRAY
17212: PPUSH
17213: CALL_OW 111
// continue ;
17217: GO 16709
// end ; end ; r := GetDir ( tmp ) ;
17219: LD_ADDR_VAR 0 15
17223: PUSH
17224: LD_VAR 0 13
17228: PPUSH
17229: CALL_OW 254
17233: ST_TO_ADDR
// if r = 5 then
17234: LD_VAR 0 15
17238: PUSH
17239: LD_INT 5
17241: EQUAL
17242: IFFALSE 17252
// r := 0 ;
17244: LD_ADDR_VAR 0 15
17248: PUSH
17249: LD_INT 0
17251: ST_TO_ADDR
// for j = r to 5 do
17252: LD_ADDR_VAR 0 10
17256: PUSH
17257: DOUBLE
17258: LD_VAR 0 15
17262: DEC
17263: ST_TO_ADDR
17264: LD_INT 5
17266: PUSH
17267: FOR_TO
17268: IFFALSE 17382
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17270: LD_ADDR_VAR 0 11
17274: PUSH
17275: LD_VAR 0 13
17279: PPUSH
17280: CALL_OW 250
17284: PPUSH
17285: LD_VAR 0 10
17289: PPUSH
17290: LD_INT 2
17292: PPUSH
17293: CALL_OW 272
17297: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17298: LD_ADDR_VAR 0 12
17302: PUSH
17303: LD_VAR 0 13
17307: PPUSH
17308: CALL_OW 251
17312: PPUSH
17313: LD_VAR 0 10
17317: PPUSH
17318: LD_INT 2
17320: PPUSH
17321: CALL_OW 273
17325: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17326: LD_VAR 0 11
17330: PPUSH
17331: LD_VAR 0 12
17335: PPUSH
17336: CALL_OW 488
17340: PUSH
17341: LD_VAR 0 11
17345: PPUSH
17346: LD_VAR 0 12
17350: PPUSH
17351: CALL_OW 428
17355: NOT
17356: AND
17357: IFFALSE 17380
// begin ComMoveXY ( tmp , _x , _y ) ;
17359: LD_VAR 0 13
17363: PPUSH
17364: LD_VAR 0 11
17368: PPUSH
17369: LD_VAR 0 12
17373: PPUSH
17374: CALL_OW 111
// break ;
17378: GO 17382
// end ; end ;
17380: GO 17267
17382: POP
17383: POP
// end ; end ;
17384: GO 16709
17386: POP
17387: POP
// end ;
17388: LD_VAR 0 8
17392: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17393: LD_INT 0
17395: PPUSH
// result := true ;
17396: LD_ADDR_VAR 0 3
17400: PUSH
17401: LD_INT 1
17403: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17404: LD_VAR 0 2
17408: PUSH
17409: LD_INT 24
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17423
17415: LD_INT 33
17417: DOUBLE
17418: EQUAL
17419: IFTRUE 17423
17421: GO 17448
17423: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 32
17431: PPUSH
17432: LD_VAR 0 1
17436: PPUSH
17437: CALL_OW 321
17441: PUSH
17442: LD_INT 2
17444: EQUAL
17445: ST_TO_ADDR
17446: GO 17764
17448: LD_INT 20
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17481
17456: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17457: LD_ADDR_VAR 0 3
17461: PUSH
17462: LD_INT 6
17464: PPUSH
17465: LD_VAR 0 1
17469: PPUSH
17470: CALL_OW 321
17474: PUSH
17475: LD_INT 2
17477: EQUAL
17478: ST_TO_ADDR
17479: GO 17764
17481: LD_INT 22
17483: DOUBLE
17484: EQUAL
17485: IFTRUE 17495
17487: LD_INT 36
17489: DOUBLE
17490: EQUAL
17491: IFTRUE 17495
17493: GO 17520
17495: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17496: LD_ADDR_VAR 0 3
17500: PUSH
17501: LD_INT 15
17503: PPUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 321
17513: PUSH
17514: LD_INT 2
17516: EQUAL
17517: ST_TO_ADDR
17518: GO 17764
17520: LD_INT 30
17522: DOUBLE
17523: EQUAL
17524: IFTRUE 17528
17526: GO 17553
17528: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17529: LD_ADDR_VAR 0 3
17533: PUSH
17534: LD_INT 20
17536: PPUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: CALL_OW 321
17546: PUSH
17547: LD_INT 2
17549: EQUAL
17550: ST_TO_ADDR
17551: GO 17764
17553: LD_INT 28
17555: DOUBLE
17556: EQUAL
17557: IFTRUE 17567
17559: LD_INT 21
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17592
17567: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_INT 21
17575: PPUSH
17576: LD_VAR 0 1
17580: PPUSH
17581: CALL_OW 321
17585: PUSH
17586: LD_INT 2
17588: EQUAL
17589: ST_TO_ADDR
17590: GO 17764
17592: LD_INT 16
17594: DOUBLE
17595: EQUAL
17596: IFTRUE 17600
17598: GO 17625
17600: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17601: LD_ADDR_VAR 0 3
17605: PUSH
17606: LD_INT 84
17608: PPUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 321
17618: PUSH
17619: LD_INT 2
17621: EQUAL
17622: ST_TO_ADDR
17623: GO 17764
17625: LD_INT 19
17627: DOUBLE
17628: EQUAL
17629: IFTRUE 17639
17631: LD_INT 23
17633: DOUBLE
17634: EQUAL
17635: IFTRUE 17639
17637: GO 17664
17639: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17640: LD_ADDR_VAR 0 3
17644: PUSH
17645: LD_INT 83
17647: PPUSH
17648: LD_VAR 0 1
17652: PPUSH
17653: CALL_OW 321
17657: PUSH
17658: LD_INT 2
17660: EQUAL
17661: ST_TO_ADDR
17662: GO 17764
17664: LD_INT 17
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 17697
17672: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17673: LD_ADDR_VAR 0 3
17677: PUSH
17678: LD_INT 39
17680: PPUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: CALL_OW 321
17690: PUSH
17691: LD_INT 2
17693: EQUAL
17694: ST_TO_ADDR
17695: GO 17764
17697: LD_INT 18
17699: DOUBLE
17700: EQUAL
17701: IFTRUE 17705
17703: GO 17730
17705: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17706: LD_ADDR_VAR 0 3
17710: PUSH
17711: LD_INT 40
17713: PPUSH
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 321
17723: PUSH
17724: LD_INT 2
17726: EQUAL
17727: ST_TO_ADDR
17728: GO 17764
17730: LD_INT 27
17732: DOUBLE
17733: EQUAL
17734: IFTRUE 17738
17736: GO 17763
17738: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17739: LD_ADDR_VAR 0 3
17743: PUSH
17744: LD_INT 35
17746: PPUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 321
17756: PUSH
17757: LD_INT 2
17759: EQUAL
17760: ST_TO_ADDR
17761: GO 17764
17763: POP
// end ;
17764: LD_VAR 0 3
17768: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17769: LD_INT 0
17771: PPUSH
17772: PPUSH
17773: PPUSH
17774: PPUSH
17775: PPUSH
17776: PPUSH
17777: PPUSH
17778: PPUSH
17779: PPUSH
17780: PPUSH
17781: PPUSH
// result := false ;
17782: LD_ADDR_VAR 0 6
17786: PUSH
17787: LD_INT 0
17789: ST_TO_ADDR
// if btype = b_depot then
17790: LD_VAR 0 2
17794: PUSH
17795: LD_INT 0
17797: EQUAL
17798: IFFALSE 17810
// begin result := true ;
17800: LD_ADDR_VAR 0 6
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// exit ;
17808: GO 18636
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17810: LD_VAR 0 1
17814: NOT
17815: PUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 266
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: IN
17836: NOT
17837: OR
17838: PUSH
17839: LD_VAR 0 2
17843: NOT
17844: OR
17845: PUSH
17846: LD_VAR 0 5
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 2
17859: PUSH
17860: LD_INT 3
17862: PUSH
17863: LD_INT 4
17865: PUSH
17866: LD_INT 5
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: IN
17877: NOT
17878: OR
17879: PUSH
17880: LD_VAR 0 3
17884: PPUSH
17885: LD_VAR 0 4
17889: PPUSH
17890: CALL_OW 488
17894: NOT
17895: OR
17896: IFFALSE 17900
// exit ;
17898: GO 18636
// side := GetSide ( depot ) ;
17900: LD_ADDR_VAR 0 9
17904: PUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 255
17914: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17915: LD_VAR 0 9
17919: PPUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: CALL 17393 0 2
17929: NOT
17930: IFFALSE 17934
// exit ;
17932: GO 18636
// pom := GetBase ( depot ) ;
17934: LD_ADDR_VAR 0 10
17938: PUSH
17939: LD_VAR 0 1
17943: PPUSH
17944: CALL_OW 274
17948: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17949: LD_ADDR_VAR 0 11
17953: PUSH
17954: LD_VAR 0 2
17958: PPUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 248
17968: PPUSH
17969: CALL_OW 450
17973: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17974: LD_VAR 0 10
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: CALL_OW 275
17986: PUSH
17987: LD_VAR 0 11
17991: PUSH
17992: LD_INT 1
17994: ARRAY
17995: GREATEREQUAL
17996: PUSH
17997: LD_VAR 0 10
18001: PPUSH
18002: LD_INT 2
18004: PPUSH
18005: CALL_OW 275
18009: PUSH
18010: LD_VAR 0 11
18014: PUSH
18015: LD_INT 2
18017: ARRAY
18018: GREATEREQUAL
18019: AND
18020: PUSH
18021: LD_VAR 0 10
18025: PPUSH
18026: LD_INT 3
18028: PPUSH
18029: CALL_OW 275
18033: PUSH
18034: LD_VAR 0 11
18038: PUSH
18039: LD_INT 3
18041: ARRAY
18042: GREATEREQUAL
18043: AND
18044: NOT
18045: IFFALSE 18049
// exit ;
18047: GO 18636
// if GetBType ( depot ) = b_depot then
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 266
18058: PUSH
18059: LD_INT 0
18061: EQUAL
18062: IFFALSE 18074
// dist := 28 else
18064: LD_ADDR_VAR 0 14
18068: PUSH
18069: LD_INT 28
18071: ST_TO_ADDR
18072: GO 18082
// dist := 36 ;
18074: LD_ADDR_VAR 0 14
18078: PUSH
18079: LD_INT 36
18081: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18082: LD_VAR 0 1
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_VAR 0 4
18096: PPUSH
18097: CALL_OW 297
18101: PUSH
18102: LD_VAR 0 14
18106: GREATER
18107: IFFALSE 18111
// exit ;
18109: GO 18636
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18111: LD_ADDR_VAR 0 12
18115: PUSH
18116: LD_VAR 0 2
18120: PPUSH
18121: LD_VAR 0 3
18125: PPUSH
18126: LD_VAR 0 4
18130: PPUSH
18131: LD_VAR 0 5
18135: PPUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 248
18145: PPUSH
18146: LD_INT 0
18148: PPUSH
18149: CALL 18641 0 6
18153: ST_TO_ADDR
// if not hexes then
18154: LD_VAR 0 12
18158: NOT
18159: IFFALSE 18163
// exit ;
18161: GO 18636
// hex := GetHexInfo ( x , y ) ;
18163: LD_ADDR_VAR 0 15
18167: PUSH
18168: LD_VAR 0 3
18172: PPUSH
18173: LD_VAR 0 4
18177: PPUSH
18178: CALL_OW 546
18182: ST_TO_ADDR
// if hex [ 1 ] then
18183: LD_VAR 0 15
18187: PUSH
18188: LD_INT 1
18190: ARRAY
18191: IFFALSE 18195
// exit ;
18193: GO 18636
// height := hex [ 2 ] ;
18195: LD_ADDR_VAR 0 13
18199: PUSH
18200: LD_VAR 0 15
18204: PUSH
18205: LD_INT 2
18207: ARRAY
18208: ST_TO_ADDR
// for i = 1 to hexes do
18209: LD_ADDR_VAR 0 7
18213: PUSH
18214: DOUBLE
18215: LD_INT 1
18217: DEC
18218: ST_TO_ADDR
18219: LD_VAR 0 12
18223: PUSH
18224: FOR_TO
18225: IFFALSE 18555
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18227: LD_VAR 0 12
18231: PUSH
18232: LD_VAR 0 7
18236: ARRAY
18237: PUSH
18238: LD_INT 1
18240: ARRAY
18241: PPUSH
18242: LD_VAR 0 12
18246: PUSH
18247: LD_VAR 0 7
18251: ARRAY
18252: PUSH
18253: LD_INT 2
18255: ARRAY
18256: PPUSH
18257: CALL_OW 488
18261: NOT
18262: PUSH
18263: LD_VAR 0 12
18267: PUSH
18268: LD_VAR 0 7
18272: ARRAY
18273: PUSH
18274: LD_INT 1
18276: ARRAY
18277: PPUSH
18278: LD_VAR 0 12
18282: PUSH
18283: LD_VAR 0 7
18287: ARRAY
18288: PUSH
18289: LD_INT 2
18291: ARRAY
18292: PPUSH
18293: CALL_OW 428
18297: PUSH
18298: LD_INT 0
18300: GREATER
18301: OR
18302: PUSH
18303: LD_VAR 0 12
18307: PUSH
18308: LD_VAR 0 7
18312: ARRAY
18313: PUSH
18314: LD_INT 1
18316: ARRAY
18317: PPUSH
18318: LD_VAR 0 12
18322: PUSH
18323: LD_VAR 0 7
18327: ARRAY
18328: PUSH
18329: LD_INT 2
18331: ARRAY
18332: PPUSH
18333: CALL_OW 351
18337: OR
18338: IFFALSE 18344
// exit ;
18340: POP
18341: POP
18342: GO 18636
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18344: LD_ADDR_VAR 0 8
18348: PUSH
18349: LD_VAR 0 12
18353: PUSH
18354: LD_VAR 0 7
18358: ARRAY
18359: PUSH
18360: LD_INT 1
18362: ARRAY
18363: PPUSH
18364: LD_VAR 0 12
18368: PUSH
18369: LD_VAR 0 7
18373: ARRAY
18374: PUSH
18375: LD_INT 2
18377: ARRAY
18378: PPUSH
18379: CALL_OW 546
18383: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18384: LD_VAR 0 8
18388: PUSH
18389: LD_INT 1
18391: ARRAY
18392: PUSH
18393: LD_VAR 0 8
18397: PUSH
18398: LD_INT 2
18400: ARRAY
18401: PUSH
18402: LD_VAR 0 13
18406: PUSH
18407: LD_INT 2
18409: PLUS
18410: GREATER
18411: OR
18412: PUSH
18413: LD_VAR 0 8
18417: PUSH
18418: LD_INT 2
18420: ARRAY
18421: PUSH
18422: LD_VAR 0 13
18426: PUSH
18427: LD_INT 2
18429: MINUS
18430: LESS
18431: OR
18432: PUSH
18433: LD_VAR 0 8
18437: PUSH
18438: LD_INT 3
18440: ARRAY
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: LD_INT 8
18447: PUSH
18448: LD_INT 9
18450: PUSH
18451: LD_INT 10
18453: PUSH
18454: LD_INT 11
18456: PUSH
18457: LD_INT 12
18459: PUSH
18460: LD_INT 13
18462: PUSH
18463: LD_INT 16
18465: PUSH
18466: LD_INT 17
18468: PUSH
18469: LD_INT 18
18471: PUSH
18472: LD_INT 19
18474: PUSH
18475: LD_INT 20
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: IN
18496: NOT
18497: OR
18498: PUSH
18499: LD_VAR 0 8
18503: PUSH
18504: LD_INT 5
18506: ARRAY
18507: NOT
18508: OR
18509: PUSH
18510: LD_VAR 0 8
18514: PUSH
18515: LD_INT 6
18517: ARRAY
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: LD_INT 7
18527: PUSH
18528: LD_INT 9
18530: PUSH
18531: LD_INT 10
18533: PUSH
18534: LD_INT 11
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: IN
18545: NOT
18546: OR
18547: IFFALSE 18553
// exit ;
18549: POP
18550: POP
18551: GO 18636
// end ;
18553: GO 18224
18555: POP
18556: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18557: LD_VAR 0 9
18561: PPUSH
18562: LD_VAR 0 3
18566: PPUSH
18567: LD_VAR 0 4
18571: PPUSH
18572: LD_INT 20
18574: PPUSH
18575: CALL 10559 0 4
18579: PUSH
18580: LD_INT 4
18582: ARRAY
18583: IFFALSE 18587
// exit ;
18585: GO 18636
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18587: LD_VAR 0 2
18591: PUSH
18592: LD_INT 29
18594: PUSH
18595: LD_INT 30
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: IN
18602: PUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: LD_VAR 0 4
18612: PPUSH
18613: LD_VAR 0 9
18617: PPUSH
18618: CALL_OW 440
18622: NOT
18623: AND
18624: IFFALSE 18628
// exit ;
18626: GO 18636
// result := true ;
18628: LD_ADDR_VAR 0 6
18632: PUSH
18633: LD_INT 1
18635: ST_TO_ADDR
// end ;
18636: LD_VAR 0 6
18640: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
18647: PPUSH
18648: PPUSH
18649: PPUSH
18650: PPUSH
18651: PPUSH
18652: PPUSH
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
18657: PPUSH
18658: PPUSH
18659: PPUSH
18660: PPUSH
18661: PPUSH
18662: PPUSH
18663: PPUSH
18664: PPUSH
18665: PPUSH
18666: PPUSH
18667: PPUSH
18668: PPUSH
18669: PPUSH
18670: PPUSH
18671: PPUSH
18672: PPUSH
18673: PPUSH
18674: PPUSH
18675: PPUSH
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
18681: PPUSH
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
18691: PPUSH
18692: PPUSH
18693: PPUSH
18694: PPUSH
18695: PPUSH
18696: PPUSH
18697: PPUSH
18698: PPUSH
18699: PPUSH
18700: PPUSH
// result = [ ] ;
18701: LD_ADDR_VAR 0 7
18705: PUSH
18706: EMPTY
18707: ST_TO_ADDR
// temp_list = [ ] ;
18708: LD_ADDR_VAR 0 9
18712: PUSH
18713: EMPTY
18714: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18715: LD_VAR 0 4
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: LD_INT 2
18728: PUSH
18729: LD_INT 3
18731: PUSH
18732: LD_INT 4
18734: PUSH
18735: LD_INT 5
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: IN
18746: NOT
18747: PUSH
18748: LD_VAR 0 1
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: IN
18763: PUSH
18764: LD_VAR 0 5
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: LD_INT 3
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: IN
18783: NOT
18784: AND
18785: OR
18786: IFFALSE 18790
// exit ;
18788: GO 37181
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18790: LD_VAR 0 1
18794: PUSH
18795: LD_INT 6
18797: PUSH
18798: LD_INT 7
18800: PUSH
18801: LD_INT 8
18803: PUSH
18804: LD_INT 13
18806: PUSH
18807: LD_INT 12
18809: PUSH
18810: LD_INT 15
18812: PUSH
18813: LD_INT 11
18815: PUSH
18816: LD_INT 14
18818: PUSH
18819: LD_INT 10
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: IN
18833: IFFALSE 18843
// btype = b_lab ;
18835: LD_ADDR_VAR 0 1
18839: PUSH
18840: LD_INT 6
18842: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18843: LD_VAR 0 6
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: IN
18862: NOT
18863: PUSH
18864: LD_VAR 0 1
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 3
18880: PUSH
18881: LD_INT 6
18883: PUSH
18884: LD_INT 36
18886: PUSH
18887: LD_INT 4
18889: PUSH
18890: LD_INT 5
18892: PUSH
18893: LD_INT 31
18895: PUSH
18896: LD_INT 32
18898: PUSH
18899: LD_INT 33
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: IN
18915: NOT
18916: PUSH
18917: LD_VAR 0 6
18921: PUSH
18922: LD_INT 1
18924: EQUAL
18925: AND
18926: OR
18927: PUSH
18928: LD_VAR 0 1
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 3
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: IN
18943: NOT
18944: PUSH
18945: LD_VAR 0 6
18949: PUSH
18950: LD_INT 2
18952: EQUAL
18953: AND
18954: OR
18955: IFFALSE 18965
// mode = 0 ;
18957: LD_ADDR_VAR 0 6
18961: PUSH
18962: LD_INT 0
18964: ST_TO_ADDR
// case mode of 0 :
18965: LD_VAR 0 6
18969: PUSH
18970: LD_INT 0
18972: DOUBLE
18973: EQUAL
18974: IFTRUE 18978
18976: GO 30431
18978: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18979: LD_ADDR_VAR 0 11
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: NEG
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: NEG
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: LD_INT 2
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: LD_INT 1
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: LD_INT 3
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 0
19135: PUSH
19136: LD_INT 3
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19172: LD_ADDR_VAR 0 12
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: NEG
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 1
19241: NEG
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 1
19256: NEG
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 2
19318: NEG
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 3
19329: NEG
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 3
19340: NEG
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19368: LD_ADDR_VAR 0 13
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 0
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: NEG
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 2
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: NEG
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: NEG
19504: PUSH
19505: LD_INT 2
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: NEG
19516: PUSH
19517: LD_INT 3
19519: NEG
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 3
19527: NEG
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 3
19539: NEG
19540: PUSH
19541: LD_INT 3
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19567: LD_ADDR_VAR 0 14
19571: PUSH
19572: LD_INT 0
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: LD_INT 1
19640: NEG
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: LD_INT 2
19652: NEG
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: LD_INT 1
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: LD_INT 3
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: LD_INT 3
19728: NEG
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: LD_INT 2
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19763: LD_ADDR_VAR 0 15
19767: PUSH
19768: LD_INT 0
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 1
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: NEG
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 3
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 3
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19956: LD_ADDR_VAR 0 16
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 1
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 0
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: NEG
20015: PUSH
20016: LD_INT 0
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 1
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: LD_INT 2
20041: NEG
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 2
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: PUSH
20060: LD_INT 2
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: NEG
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: NEG
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 3
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 3
20113: PUSH
20114: LD_INT 3
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: LD_INT 3
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20149: LD_ADDR_VAR 0 17
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 1
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: NEG
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 1
20222: NEG
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 1
20230: NEG
20231: PUSH
20232: LD_INT 2
20234: NEG
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: LD_INT 2
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: LD_INT 2
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20379: LD_ADDR_VAR 0 18
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: LD_INT 1
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: LD_INT 1
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: LD_INT 1
20486: NEG
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 2
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 2
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: LD_INT 2
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20609: LD_ADDR_VAR 0 19
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 0
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 1
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 2
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 2
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: LD_INT 2
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: LD_INT 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: NEG
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 2
20808: NEG
20809: PUSH
20810: LD_INT 2
20812: NEG
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20839: LD_ADDR_VAR 0 20
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: NEG
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: NEG
21039: PUSH
21040: LD_INT 2
21042: NEG
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21069: LD_ADDR_VAR 0 21
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: NEG
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: PUSH
21152: LD_INT 2
21154: NEG
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: LD_INT 2
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: NEG
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 2
21256: NEG
21257: PUSH
21258: LD_INT 1
21260: NEG
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 2
21268: NEG
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21299: LD_ADDR_VAR 0 22
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: LD_INT 0
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: NEG
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 2
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 2
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: NEG
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: LD_INT 2
21502: NEG
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21529: LD_ADDR_VAR 0 23
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PUSH
21612: LD_INT 2
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 2
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 2
21705: NEG
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 2
21716: NEG
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: NEG
21741: PUSH
21742: LD_INT 3
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: LD_INT 3
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21809: LD_ADDR_VAR 0 24
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 1
21878: NEG
21879: PUSH
21880: LD_INT 1
21882: NEG
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 1
21890: NEG
21891: PUSH
21892: LD_INT 2
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 0
21902: PUSH
21903: LD_INT 2
21905: NEG
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: LD_INT 2
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 2
21985: NEG
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 2
21996: NEG
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: NEG
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: LD_INT 2
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 3
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22085: LD_ADDR_VAR 0 25
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 2
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 2
22261: NEG
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: LD_INT 2
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 3
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 3
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22359: LD_ADDR_VAR 0 26
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 0
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: LD_INT 0
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 0
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 0
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: LD_INT 2
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 0
22452: PUSH
22453: LD_INT 2
22455: NEG
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 2
22535: NEG
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 2
22546: NEG
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 2
22558: NEG
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22635: LD_ADDR_VAR 0 27
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 0
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 1
22693: NEG
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 1
22704: NEG
22705: PUSH
22706: LD_INT 1
22708: NEG
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: LD_INT 2
22720: NEG
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 0
22728: PUSH
22729: LD_INT 2
22731: NEG
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: LD_INT 1
22742: NEG
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 2
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: LD_INT 2
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 2
22811: NEG
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: NEG
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: LD_INT 2
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 3
22868: NEG
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 3
22880: NEG
22881: PUSH
22882: LD_INT 2
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22915: LD_ADDR_VAR 0 28
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: LD_INT 2
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 0
23008: PUSH
23009: LD_INT 2
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 1
23022: NEG
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: LD_INT 0
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: LD_INT 2
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: NEG
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: NEG
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 2
23126: NEG
23127: PUSH
23128: LD_INT 3
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: LD_INT 3
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 3
23150: NEG
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 3
23162: NEG
23163: PUSH
23164: LD_INT 2
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23197: LD_ADDR_VAR 0 29
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: LD_INT 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 2
23363: NEG
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: NEG
23376: PUSH
23377: LD_INT 2
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: NEG
23388: PUSH
23389: LD_INT 3
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 3
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: LD_INT 3
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 1
23430: NEG
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 3
23441: NEG
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23476: LD_ADDR_VAR 0 30
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 1
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: LD_INT 2
23561: NEG
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: LD_INT 2
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 2
23642: NEG
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 2
23653: NEG
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: LD_INT 3
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 3
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 3
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23754: LD_ADDR_VAR 0 31
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 2
23878: PUSH
23879: LD_INT 2
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 2
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: NEG
23932: PUSH
23933: LD_INT 2
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 2
23943: NEG
23944: PUSH
23945: LD_INT 3
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 3
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 3
23997: NEG
23998: PUSH
23999: LD_INT 2
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24032: LD_ADDR_VAR 0 32
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: NEG
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: LD_INT 2
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: NEG
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: NEG
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: LD_INT 3
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: LD_INT 2
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 3
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 3
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: NEG
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 3
24275: NEG
24276: PUSH
24277: LD_INT 1
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24310: LD_ADDR_VAR 0 33
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 0
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: LD_INT 2
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 1
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: NEG
24489: PUSH
24490: LD_INT 2
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 2
24500: NEG
24501: PUSH
24502: LD_INT 3
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 3
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 3
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: LD_INT 2
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 3
24554: NEG
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24589: LD_ADDR_VAR 0 34
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: LD_INT 1
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: PUSH
24715: LD_INT 2
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: NEG
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 2
24756: NEG
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 2
24768: NEG
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: LD_INT 3
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 2
24795: NEG
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 3
24834: NEG
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24869: LD_ADDR_VAR 0 35
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 2
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24981: LD_ADDR_VAR 0 36
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 1
25001: NEG
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: NEG
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: LD_INT 2
25066: NEG
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25093: LD_ADDR_VAR 0 37
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 0
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: LD_INT 1
25177: NEG
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25205: LD_ADDR_VAR 0 38
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25317: LD_ADDR_VAR 0 39
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25429: LD_ADDR_VAR 0 40
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25541: LD_ADDR_VAR 0 41
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 2
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 2
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: NEG
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 2
25707: NEG
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: LD_INT 2
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: LD_INT 3
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 3
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 3
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: LD_INT 3
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 3
25815: NEG
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 3
25826: NEG
25827: PUSH
25828: LD_INT 1
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 3
25838: NEG
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 3
25850: NEG
25851: PUSH
25852: LD_INT 3
25854: NEG
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25891: LD_ADDR_VAR 0 42
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: LD_INT 2
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: LD_INT 2
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 2
26057: NEG
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: LD_INT 3
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 3
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 3
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 3
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: LD_INT 3
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 3
26188: NEG
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 3
26200: NEG
26201: PUSH
26202: LD_INT 3
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26241: LD_ADDR_VAR 0 43
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: NEG
26323: PUSH
26324: LD_INT 2
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 2
26337: NEG
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: NEG
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 3
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 3
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 3
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 3
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 3
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 3
26537: NEG
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 3
26548: NEG
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26589: LD_ADDR_VAR 0 44
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: LD_INT 1
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: LD_INT 3
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 3
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 3
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 3
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 3
26832: PUSH
26833: LD_INT 3
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 3
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 3
26863: NEG
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 3
26874: NEG
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 3
26886: NEG
26887: PUSH
26888: LD_INT 2
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 3
26898: NEG
26899: PUSH
26900: LD_INT 3
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26939: LD_ADDR_VAR 0 45
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 2
27105: NEG
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 2
27117: NEG
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: LD_INT 3
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 3
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 2
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 3
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 3
27185: PUSH
27186: LD_INT 3
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 3
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 3
27236: NEG
27237: PUSH
27238: LD_INT 2
27240: NEG
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 3
27248: NEG
27249: PUSH
27250: LD_INT 3
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27289: LD_ADDR_VAR 0 46
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 1
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: LD_INT 3
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: LD_INT 3
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 3
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 3
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 3
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 3
27585: NEG
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 3
27596: NEG
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27637: LD_ADDR_VAR 0 47
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: LD_INT 2
27722: NEG
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 2
27764: NEG
27765: PUSH
27766: LD_INT 2
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27788: LD_ADDR_VAR 0 48
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27935: LD_ADDR_VAR 0 49
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28079: LD_ADDR_VAR 0 50
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28223: LD_ADDR_VAR 0 51
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: LD_INT 2
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: NEG
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28370: LD_ADDR_VAR 0 52
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 2
28474: NEG
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: NEG
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28521: LD_ADDR_VAR 0 53
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: LD_INT 2
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: LD_INT 2
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 2
28697: NEG
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28751: LD_ADDR_VAR 0 54
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: LD_INT 2
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 2
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 2
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 2
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 2
28927: NEG
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: LD_INT 2
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28981: LD_ADDR_VAR 0 55
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 1
29050: NEG
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: LD_INT 2
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 2
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 2
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: LD_INT 2
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: LD_INT 1
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 2
29180: NEG
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29211: LD_ADDR_VAR 0 56
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: NEG
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 2
29410: NEG
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29441: LD_ADDR_VAR 0 57
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: NEG
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: LD_INT 1
29548: NEG
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: NEG
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 2
29640: NEG
29641: PUSH
29642: LD_INT 2
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29671: LD_ADDR_VAR 0 58
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: LD_INT 2
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 1
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 2
29870: NEG
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29901: LD_ADDR_VAR 0 59
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29989: LD_ADDR_VAR 0 60
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30077: LD_ADDR_VAR 0 61
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30165: LD_ADDR_VAR 0 62
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30253: LD_ADDR_VAR 0 63
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30341: LD_ADDR_VAR 0 64
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: ST_TO_ADDR
// end ; 1 :
30429: GO 36326
30431: LD_INT 1
30433: DOUBLE
30434: EQUAL
30435: IFTRUE 30439
30437: GO 33062
30439: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30440: LD_ADDR_VAR 0 11
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: LD_INT 3
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30484: LD_ADDR_VAR 0 12
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30525: LD_ADDR_VAR 0 13
30529: PUSH
30530: LD_INT 3
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 3
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: LD_INT 3
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30565: LD_ADDR_VAR 0 14
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 3
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30606: LD_ADDR_VAR 0 15
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 3
30635: NEG
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30650: LD_ADDR_VAR 0 16
30654: PUSH
30655: LD_INT 2
30657: NEG
30658: PUSH
30659: LD_INT 3
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 3
30669: NEG
30670: PUSH
30671: LD_INT 2
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 3
30681: NEG
30682: PUSH
30683: LD_INT 3
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30696: LD_ADDR_VAR 0 17
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 3
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: LD_INT 3
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: LD_INT 2
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30740: LD_ADDR_VAR 0 18
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 3
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30781: LD_ADDR_VAR 0 19
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 3
30798: PUSH
30799: LD_INT 3
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30821: LD_ADDR_VAR 0 20
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: LD_INT 3
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: LD_INT 2
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30862: LD_ADDR_VAR 0 21
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 3
30891: NEG
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30906: LD_ADDR_VAR 0 22
30910: PUSH
30911: LD_INT 2
30913: NEG
30914: PUSH
30915: LD_INT 3
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 3
30925: NEG
30926: PUSH
30927: LD_INT 2
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 3
30937: NEG
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30952: LD_ADDR_VAR 0 23
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 3
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: LD_INT 4
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 3
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: LIST
30995: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30996: LD_ADDR_VAR 0 24
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: LD_INT 1
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31037: LD_ADDR_VAR 0 25
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 4
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: LD_INT 4
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31077: LD_ADDR_VAR 0 26
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 4
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31118: LD_ADDR_VAR 0 27
31122: PUSH
31123: LD_INT 3
31125: NEG
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 4
31147: NEG
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31162: LD_ADDR_VAR 0 28
31166: PUSH
31167: LD_INT 3
31169: NEG
31170: PUSH
31171: LD_INT 3
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: NEG
31182: PUSH
31183: LD_INT 4
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 4
31193: NEG
31194: PUSH
31195: LD_INT 3
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31208: LD_ADDR_VAR 0 29
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 3
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 4
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 4
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 3
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: LD_INT 5
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: LD_INT 5
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: LD_INT 4
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: LD_INT 6
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: LD_INT 6
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 5
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31363: LD_ADDR_VAR 0 30
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 3
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 4
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 4
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 5
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 5
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 6
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 6
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31506: LD_ADDR_VAR 0 31
31510: PUSH
31511: LD_INT 3
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 3
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 4
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 4
31553: PUSH
31554: LD_INT 4
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: LD_INT 4
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 5
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 5
31583: PUSH
31584: LD_INT 5
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 4
31593: PUSH
31594: LD_INT 5
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 6
31603: PUSH
31604: LD_INT 5
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 6
31613: PUSH
31614: LD_INT 6
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 5
31623: PUSH
31624: LD_INT 6
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31645: LD_ADDR_VAR 0 32
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: LD_INT 3
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 4
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: LD_INT 4
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: LD_INT 5
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: LD_INT 5
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: LD_INT 4
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: LD_INT 6
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 6
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 5
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31788: LD_ADDR_VAR 0 33
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: NEG
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 3
31817: NEG
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: NEG
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 4
31840: NEG
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 4
31863: NEG
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 5
31874: NEG
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 5
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 5
31897: NEG
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 6
31908: NEG
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 6
31919: NEG
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31943: LD_ADDR_VAR 0 34
31947: PUSH
31948: LD_INT 2
31950: NEG
31951: PUSH
31952: LD_INT 3
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 3
31962: NEG
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: LD_INT 3
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 3
31986: NEG
31987: PUSH
31988: LD_INT 4
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 4
31998: NEG
31999: PUSH
32000: LD_INT 3
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 4
32010: NEG
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 4
32022: NEG
32023: PUSH
32024: LD_INT 5
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 5
32034: NEG
32035: PUSH
32036: LD_INT 4
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 5
32046: NEG
32047: PUSH
32048: LD_INT 5
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 5
32058: NEG
32059: PUSH
32060: LD_INT 6
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 6
32070: NEG
32071: PUSH
32072: LD_INT 5
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 6
32082: NEG
32083: PUSH
32084: LD_INT 6
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32106: LD_ADDR_VAR 0 41
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 2
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32150: LD_ADDR_VAR 0 42
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: LIST
32190: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32191: LD_ADDR_VAR 0 43
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 3
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32231: LD_ADDR_VAR 0 44
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32272: LD_ADDR_VAR 0 45
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 3
32301: NEG
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32316: LD_ADDR_VAR 0 46
32320: PUSH
32321: LD_INT 2
32323: NEG
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: LD_INT 3
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32362: LD_ADDR_VAR 0 47
32366: PUSH
32367: LD_INT 2
32369: NEG
32370: PUSH
32371: LD_INT 3
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 3
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32395: LD_ADDR_VAR 0 48
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: PUSH
32414: LD_INT 1
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32426: LD_ADDR_VAR 0 49
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32455: LD_ADDR_VAR 0 50
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 3
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32484: LD_ADDR_VAR 0 51
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32515: LD_ADDR_VAR 0 52
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: LD_INT 2
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32548: LD_ADDR_VAR 0 53
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 3
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32592: LD_ADDR_VAR 0 54
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 3
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32633: LD_ADDR_VAR 0 55
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: LD_INT 3
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32673: LD_ADDR_VAR 0 56
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 3
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: LD_INT 3
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32714: LD_ADDR_VAR 0 57
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32758: LD_ADDR_VAR 0 58
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 3
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 3
32789: NEG
32790: PUSH
32791: LD_INT 3
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32804: LD_ADDR_VAR 0 59
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32848: LD_ADDR_VAR 0 60
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32889: LD_ADDR_VAR 0 61
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: LIST
32928: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32929: LD_ADDR_VAR 0 62
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32970: LD_ADDR_VAR 0 63
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 2
32999: NEG
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33014: LD_ADDR_VAR 0 64
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: LD_INT 2
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
// end ; 2 :
33060: GO 36326
33062: LD_INT 2
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 36325
33070: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33071: LD_ADDR_VAR 0 29
33075: PUSH
33076: LD_INT 4
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 4
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 5
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 5
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 4
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 3
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 5
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 3
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 4
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: LD_INT 4
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: PUSH
33222: LD_INT 3
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 4
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 4
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: LD_INT 4
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: LD_INT 5
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 5
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: LD_INT 3
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 5
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: NEG
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 3
33354: NEG
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 3
33365: NEG
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 2
33377: NEG
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 3
33399: NEG
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 4
33410: NEG
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 4
33421: NEG
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 4
33433: NEG
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 4
33456: NEG
33457: PUSH
33458: LD_INT 4
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 4
33468: NEG
33469: PUSH
33470: LD_INT 5
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 3
33480: NEG
33481: PUSH
33482: LD_INT 4
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 4
33504: NEG
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 5
33516: NEG
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 5
33528: NEG
33529: PUSH
33530: LD_INT 5
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: NEG
33541: PUSH
33542: LD_INT 5
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 5
33552: NEG
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33609: LD_ADDR_VAR 0 30
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: LD_INT 4
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 4
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 5
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 4
33656: PUSH
33657: LD_INT 5
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: LD_INT 4
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 3
33676: PUSH
33677: LD_INT 3
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 5
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: LD_INT 5
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 3
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: LD_INT 4
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 4
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: LD_INT 3
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 4
33799: NEG
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 4
33810: NEG
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 3
33822: NEG
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 4
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 5
33855: NEG
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 5
33866: NEG
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 5
33878: NEG
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 3
33890: NEG
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: NEG
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: NEG
33914: PUSH
33915: LD_INT 4
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: LD_INT 3
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: LD_INT 2
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 3
33949: NEG
33950: PUSH
33951: LD_INT 2
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 4
33961: NEG
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 4
33973: NEG
33974: PUSH
33975: LD_INT 4
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: NEG
33986: PUSH
33987: LD_INT 4
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 4
33997: NEG
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 4
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 5
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 4
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 3
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 3
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: LD_INT 4
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 5
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 3
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: LD_INT 5
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34156: LD_ADDR_VAR 0 31
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 4
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 5
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 5
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 4
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: LD_INT 5
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 2
34245: NEG
34246: PUSH
34247: LD_INT 3
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 3
34256: NEG
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 3
34267: NEG
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 3
34301: NEG
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 4
34312: NEG
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 4
34323: NEG
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 4
34335: NEG
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 4
34358: NEG
34359: PUSH
34360: LD_INT 4
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 4
34370: NEG
34371: PUSH
34372: LD_INT 5
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: LD_INT 4
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 3
34394: NEG
34395: PUSH
34396: LD_INT 3
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 4
34406: NEG
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 5
34418: NEG
34419: PUSH
34420: LD_INT 4
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 5
34430: NEG
34431: PUSH
34432: LD_INT 5
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 3
34442: NEG
34443: PUSH
34444: LD_INT 5
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 5
34454: NEG
34455: PUSH
34456: LD_INT 3
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: LD_INT 3
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 4
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: LD_INT 3
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: LD_INT 2
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: LD_INT 3
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 4
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 2
34556: NEG
34557: PUSH
34558: LD_INT 4
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 4
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 4
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 5
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 5
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 4
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 5
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34706: LD_ADDR_VAR 0 32
34710: PUSH
34711: LD_INT 4
34713: NEG
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 4
34724: NEG
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: NEG
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 4
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 5
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 5
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 5
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: NEG
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 3
34815: NEG
34816: PUSH
34817: LD_INT 3
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: NEG
34828: PUSH
34829: LD_INT 4
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: LD_INT 3
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: NEG
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 3
34863: NEG
34864: PUSH
34865: LD_INT 2
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 4
34875: NEG
34876: PUSH
34877: LD_INT 3
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 4
34887: NEG
34888: PUSH
34889: LD_INT 4
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: LD_INT 4
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 4
34911: NEG
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: LD_INT 4
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: LD_INT 5
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 4
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 3
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 3
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: LD_INT 4
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: LD_INT 5
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 3
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: LD_INT 5
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 4
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 4
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 3
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 4
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 4
35118: PUSH
35119: LD_INT 4
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 5
35138: PUSH
35139: LD_INT 4
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 5
35148: PUSH
35149: LD_INT 5
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 4
35158: PUSH
35159: LD_INT 5
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 3
35168: PUSH
35169: LD_INT 4
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 3
35178: PUSH
35179: LD_INT 3
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 5
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 3
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35253: LD_ADDR_VAR 0 33
35257: PUSH
35258: LD_INT 4
35260: NEG
35261: PUSH
35262: LD_INT 4
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 4
35272: NEG
35273: PUSH
35274: LD_INT 5
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 3
35284: NEG
35285: PUSH
35286: LD_INT 4
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 3
35296: NEG
35297: PUSH
35298: LD_INT 3
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 4
35308: NEG
35309: PUSH
35310: LD_INT 3
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 5
35320: NEG
35321: PUSH
35322: LD_INT 4
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 5
35332: NEG
35333: PUSH
35334: LD_INT 5
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 3
35344: NEG
35345: PUSH
35346: LD_INT 5
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 5
35356: NEG
35357: PUSH
35358: LD_INT 3
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 3
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: LD_INT 4
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: LD_INT 3
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 2
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 2
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: LD_INT 3
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 4
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 4
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 4
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 4
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 5
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 5
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 4
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 3
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 3
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 3
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 5
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 3
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 4
35583: PUSH
35584: LD_INT 3
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 4
35593: PUSH
35594: LD_INT 4
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: LD_INT 4
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 4
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 4
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 4
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 3
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 4
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 5
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 5
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 4
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 3
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: LD_INT 5
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: NEG
35736: PUSH
35737: LD_INT 3
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35791: LD_ADDR_VAR 0 34
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 4
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 5
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 4
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 3
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 3
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 4
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: LD_INT 5
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: LD_INT 3
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: LD_INT 5
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 4
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 4
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 3
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: LD_INT 2
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 4
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 4
35993: PUSH
35994: LD_INT 4
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 4
36003: PUSH
36004: LD_INT 3
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 5
36013: PUSH
36014: LD_INT 4
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: LD_INT 5
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 4
36033: PUSH
36034: LD_INT 5
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 3
36043: PUSH
36044: LD_INT 4
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 3
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 5
36063: PUSH
36064: LD_INT 3
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: LD_INT 5
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 3
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 3
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 4
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 4
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 3
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: LD_INT 4
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 4
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 4
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 3
36199: NEG
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 3
36210: NEG
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 4
36221: NEG
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 5
36232: NEG
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 5
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 5
36255: NEG
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 3
36267: NEG
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: ST_TO_ADDR
// end ; end ;
36323: GO 36326
36325: POP
// case btype of b_depot , b_warehouse :
36326: LD_VAR 0 1
36330: PUSH
36331: LD_INT 0
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36345
36337: LD_INT 1
36339: DOUBLE
36340: EQUAL
36341: IFTRUE 36345
36343: GO 36546
36345: POP
// case nation of nation_american :
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 1
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36415
36359: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36360: LD_ADDR_VAR 0 9
36364: PUSH
36365: LD_VAR 0 11
36369: PUSH
36370: LD_VAR 0 12
36374: PUSH
36375: LD_VAR 0 13
36379: PUSH
36380: LD_VAR 0 14
36384: PUSH
36385: LD_VAR 0 15
36389: PUSH
36390: LD_VAR 0 16
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 4
36407: PUSH
36408: LD_INT 1
36410: PLUS
36411: ARRAY
36412: ST_TO_ADDR
36413: GO 36544
36415: LD_INT 2
36417: DOUBLE
36418: EQUAL
36419: IFTRUE 36423
36421: GO 36479
36423: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36424: LD_ADDR_VAR 0 9
36428: PUSH
36429: LD_VAR 0 17
36433: PUSH
36434: LD_VAR 0 18
36438: PUSH
36439: LD_VAR 0 19
36443: PUSH
36444: LD_VAR 0 20
36448: PUSH
36449: LD_VAR 0 21
36453: PUSH
36454: LD_VAR 0 22
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: PUSH
36467: LD_VAR 0 4
36471: PUSH
36472: LD_INT 1
36474: PLUS
36475: ARRAY
36476: ST_TO_ADDR
36477: GO 36544
36479: LD_INT 3
36481: DOUBLE
36482: EQUAL
36483: IFTRUE 36487
36485: GO 36543
36487: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36488: LD_ADDR_VAR 0 9
36492: PUSH
36493: LD_VAR 0 23
36497: PUSH
36498: LD_VAR 0 24
36502: PUSH
36503: LD_VAR 0 25
36507: PUSH
36508: LD_VAR 0 26
36512: PUSH
36513: LD_VAR 0 27
36517: PUSH
36518: LD_VAR 0 28
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: PUSH
36531: LD_VAR 0 4
36535: PUSH
36536: LD_INT 1
36538: PLUS
36539: ARRAY
36540: ST_TO_ADDR
36541: GO 36544
36543: POP
36544: GO 37099
36546: LD_INT 2
36548: DOUBLE
36549: EQUAL
36550: IFTRUE 36560
36552: LD_INT 3
36554: DOUBLE
36555: EQUAL
36556: IFTRUE 36560
36558: GO 36616
36560: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36561: LD_ADDR_VAR 0 9
36565: PUSH
36566: LD_VAR 0 29
36570: PUSH
36571: LD_VAR 0 30
36575: PUSH
36576: LD_VAR 0 31
36580: PUSH
36581: LD_VAR 0 32
36585: PUSH
36586: LD_VAR 0 33
36590: PUSH
36591: LD_VAR 0 34
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: PUSH
36604: LD_VAR 0 4
36608: PUSH
36609: LD_INT 1
36611: PLUS
36612: ARRAY
36613: ST_TO_ADDR
36614: GO 37099
36616: LD_INT 16
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36678
36622: LD_INT 17
36624: DOUBLE
36625: EQUAL
36626: IFTRUE 36678
36628: LD_INT 18
36630: DOUBLE
36631: EQUAL
36632: IFTRUE 36678
36634: LD_INT 19
36636: DOUBLE
36637: EQUAL
36638: IFTRUE 36678
36640: LD_INT 22
36642: DOUBLE
36643: EQUAL
36644: IFTRUE 36678
36646: LD_INT 20
36648: DOUBLE
36649: EQUAL
36650: IFTRUE 36678
36652: LD_INT 21
36654: DOUBLE
36655: EQUAL
36656: IFTRUE 36678
36658: LD_INT 23
36660: DOUBLE
36661: EQUAL
36662: IFTRUE 36678
36664: LD_INT 24
36666: DOUBLE
36667: EQUAL
36668: IFTRUE 36678
36670: LD_INT 25
36672: DOUBLE
36673: EQUAL
36674: IFTRUE 36678
36676: GO 36734
36678: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36679: LD_ADDR_VAR 0 9
36683: PUSH
36684: LD_VAR 0 35
36688: PUSH
36689: LD_VAR 0 36
36693: PUSH
36694: LD_VAR 0 37
36698: PUSH
36699: LD_VAR 0 38
36703: PUSH
36704: LD_VAR 0 39
36708: PUSH
36709: LD_VAR 0 40
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: PUSH
36722: LD_VAR 0 4
36726: PUSH
36727: LD_INT 1
36729: PLUS
36730: ARRAY
36731: ST_TO_ADDR
36732: GO 37099
36734: LD_INT 6
36736: DOUBLE
36737: EQUAL
36738: IFTRUE 36790
36740: LD_INT 7
36742: DOUBLE
36743: EQUAL
36744: IFTRUE 36790
36746: LD_INT 8
36748: DOUBLE
36749: EQUAL
36750: IFTRUE 36790
36752: LD_INT 13
36754: DOUBLE
36755: EQUAL
36756: IFTRUE 36790
36758: LD_INT 12
36760: DOUBLE
36761: EQUAL
36762: IFTRUE 36790
36764: LD_INT 15
36766: DOUBLE
36767: EQUAL
36768: IFTRUE 36790
36770: LD_INT 11
36772: DOUBLE
36773: EQUAL
36774: IFTRUE 36790
36776: LD_INT 14
36778: DOUBLE
36779: EQUAL
36780: IFTRUE 36790
36782: LD_INT 10
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36846
36790: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36791: LD_ADDR_VAR 0 9
36795: PUSH
36796: LD_VAR 0 41
36800: PUSH
36801: LD_VAR 0 42
36805: PUSH
36806: LD_VAR 0 43
36810: PUSH
36811: LD_VAR 0 44
36815: PUSH
36816: LD_VAR 0 45
36820: PUSH
36821: LD_VAR 0 46
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: PUSH
36834: LD_VAR 0 4
36838: PUSH
36839: LD_INT 1
36841: PLUS
36842: ARRAY
36843: ST_TO_ADDR
36844: GO 37099
36846: LD_INT 36
36848: DOUBLE
36849: EQUAL
36850: IFTRUE 36854
36852: GO 36910
36854: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36855: LD_ADDR_VAR 0 9
36859: PUSH
36860: LD_VAR 0 47
36864: PUSH
36865: LD_VAR 0 48
36869: PUSH
36870: LD_VAR 0 49
36874: PUSH
36875: LD_VAR 0 50
36879: PUSH
36880: LD_VAR 0 51
36884: PUSH
36885: LD_VAR 0 52
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: PUSH
36898: LD_VAR 0 4
36902: PUSH
36903: LD_INT 1
36905: PLUS
36906: ARRAY
36907: ST_TO_ADDR
36908: GO 37099
36910: LD_INT 4
36912: DOUBLE
36913: EQUAL
36914: IFTRUE 36936
36916: LD_INT 5
36918: DOUBLE
36919: EQUAL
36920: IFTRUE 36936
36922: LD_INT 34
36924: DOUBLE
36925: EQUAL
36926: IFTRUE 36936
36928: LD_INT 37
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36936
36934: GO 36992
36936: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36937: LD_ADDR_VAR 0 9
36941: PUSH
36942: LD_VAR 0 53
36946: PUSH
36947: LD_VAR 0 54
36951: PUSH
36952: LD_VAR 0 55
36956: PUSH
36957: LD_VAR 0 56
36961: PUSH
36962: LD_VAR 0 57
36966: PUSH
36967: LD_VAR 0 58
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: PUSH
36980: LD_VAR 0 4
36984: PUSH
36985: LD_INT 1
36987: PLUS
36988: ARRAY
36989: ST_TO_ADDR
36990: GO 37099
36992: LD_INT 31
36994: DOUBLE
36995: EQUAL
36996: IFTRUE 37042
36998: LD_INT 32
37000: DOUBLE
37001: EQUAL
37002: IFTRUE 37042
37004: LD_INT 33
37006: DOUBLE
37007: EQUAL
37008: IFTRUE 37042
37010: LD_INT 27
37012: DOUBLE
37013: EQUAL
37014: IFTRUE 37042
37016: LD_INT 26
37018: DOUBLE
37019: EQUAL
37020: IFTRUE 37042
37022: LD_INT 28
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37042
37028: LD_INT 29
37030: DOUBLE
37031: EQUAL
37032: IFTRUE 37042
37034: LD_INT 30
37036: DOUBLE
37037: EQUAL
37038: IFTRUE 37042
37040: GO 37098
37042: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37043: LD_ADDR_VAR 0 9
37047: PUSH
37048: LD_VAR 0 59
37052: PUSH
37053: LD_VAR 0 60
37057: PUSH
37058: LD_VAR 0 61
37062: PUSH
37063: LD_VAR 0 62
37067: PUSH
37068: LD_VAR 0 63
37072: PUSH
37073: LD_VAR 0 64
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: PUSH
37086: LD_VAR 0 4
37090: PUSH
37091: LD_INT 1
37093: PLUS
37094: ARRAY
37095: ST_TO_ADDR
37096: GO 37099
37098: POP
// temp_list2 = [ ] ;
37099: LD_ADDR_VAR 0 10
37103: PUSH
37104: EMPTY
37105: ST_TO_ADDR
// for i in temp_list do
37106: LD_ADDR_VAR 0 8
37110: PUSH
37111: LD_VAR 0 9
37115: PUSH
37116: FOR_IN
37117: IFFALSE 37169
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37119: LD_ADDR_VAR 0 10
37123: PUSH
37124: LD_VAR 0 10
37128: PUSH
37129: LD_VAR 0 8
37133: PUSH
37134: LD_INT 1
37136: ARRAY
37137: PUSH
37138: LD_VAR 0 2
37142: PLUS
37143: PUSH
37144: LD_VAR 0 8
37148: PUSH
37149: LD_INT 2
37151: ARRAY
37152: PUSH
37153: LD_VAR 0 3
37157: PLUS
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: ADD
37166: ST_TO_ADDR
37167: GO 37116
37169: POP
37170: POP
// result = temp_list2 ;
37171: LD_ADDR_VAR 0 7
37175: PUSH
37176: LD_VAR 0 10
37180: ST_TO_ADDR
// end ;
37181: LD_VAR 0 7
37185: RET
// export function EnemyInRange ( unit , dist ) ; begin
37186: LD_INT 0
37188: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37189: LD_ADDR_VAR 0 3
37193: PUSH
37194: LD_VAR 0 1
37198: PPUSH
37199: CALL_OW 255
37203: PPUSH
37204: LD_VAR 0 1
37208: PPUSH
37209: CALL_OW 250
37213: PPUSH
37214: LD_VAR 0 1
37218: PPUSH
37219: CALL_OW 251
37223: PPUSH
37224: LD_VAR 0 2
37228: PPUSH
37229: CALL 10559 0 4
37233: PUSH
37234: LD_INT 4
37236: ARRAY
37237: ST_TO_ADDR
// end ;
37238: LD_VAR 0 3
37242: RET
// export function PlayerSeeMe ( unit ) ; begin
37243: LD_INT 0
37245: PPUSH
// result := See ( your_side , unit ) ;
37246: LD_ADDR_VAR 0 2
37250: PUSH
37251: LD_OWVAR 2
37255: PPUSH
37256: LD_VAR 0 1
37260: PPUSH
37261: CALL_OW 292
37265: ST_TO_ADDR
// end ;
37266: LD_VAR 0 2
37270: RET
// export function ReverseDir ( unit ) ; begin
37271: LD_INT 0
37273: PPUSH
// if not unit then
37274: LD_VAR 0 1
37278: NOT
37279: IFFALSE 37283
// exit ;
37281: GO 37306
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37283: LD_ADDR_VAR 0 2
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 254
37297: PUSH
37298: LD_INT 3
37300: PLUS
37301: PUSH
37302: LD_INT 6
37304: MOD
37305: ST_TO_ADDR
// end ;
37306: LD_VAR 0 2
37310: RET
// export function ReverseArray ( array ) ; var i ; begin
37311: LD_INT 0
37313: PPUSH
37314: PPUSH
// if not array then
37315: LD_VAR 0 1
37319: NOT
37320: IFFALSE 37324
// exit ;
37322: GO 37379
// result := [ ] ;
37324: LD_ADDR_VAR 0 2
37328: PUSH
37329: EMPTY
37330: ST_TO_ADDR
// for i := array downto 1 do
37331: LD_ADDR_VAR 0 3
37335: PUSH
37336: DOUBLE
37337: LD_VAR 0 1
37341: INC
37342: ST_TO_ADDR
37343: LD_INT 1
37345: PUSH
37346: FOR_DOWNTO
37347: IFFALSE 37377
// result := Join ( result , array [ i ] ) ;
37349: LD_ADDR_VAR 0 2
37353: PUSH
37354: LD_VAR 0 2
37358: PPUSH
37359: LD_VAR 0 1
37363: PUSH
37364: LD_VAR 0 3
37368: ARRAY
37369: PPUSH
37370: CALL 42022 0 2
37374: ST_TO_ADDR
37375: GO 37346
37377: POP
37378: POP
// end ;
37379: LD_VAR 0 2
37383: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37384: LD_INT 0
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
37390: PPUSH
37391: PPUSH
// if not unit or not hexes then
37392: LD_VAR 0 1
37396: NOT
37397: PUSH
37398: LD_VAR 0 2
37402: NOT
37403: OR
37404: IFFALSE 37408
// exit ;
37406: GO 37531
// dist := 9999 ;
37408: LD_ADDR_VAR 0 5
37412: PUSH
37413: LD_INT 9999
37415: ST_TO_ADDR
// for i = 1 to hexes do
37416: LD_ADDR_VAR 0 4
37420: PUSH
37421: DOUBLE
37422: LD_INT 1
37424: DEC
37425: ST_TO_ADDR
37426: LD_VAR 0 2
37430: PUSH
37431: FOR_TO
37432: IFFALSE 37519
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37434: LD_ADDR_VAR 0 6
37438: PUSH
37439: LD_VAR 0 1
37443: PPUSH
37444: LD_VAR 0 2
37448: PUSH
37449: LD_VAR 0 4
37453: ARRAY
37454: PUSH
37455: LD_INT 1
37457: ARRAY
37458: PPUSH
37459: LD_VAR 0 2
37463: PUSH
37464: LD_VAR 0 4
37468: ARRAY
37469: PUSH
37470: LD_INT 2
37472: ARRAY
37473: PPUSH
37474: CALL_OW 297
37478: ST_TO_ADDR
// if tdist < dist then
37479: LD_VAR 0 6
37483: PUSH
37484: LD_VAR 0 5
37488: LESS
37489: IFFALSE 37517
// begin hex := hexes [ i ] ;
37491: LD_ADDR_VAR 0 8
37495: PUSH
37496: LD_VAR 0 2
37500: PUSH
37501: LD_VAR 0 4
37505: ARRAY
37506: ST_TO_ADDR
// dist := tdist ;
37507: LD_ADDR_VAR 0 5
37511: PUSH
37512: LD_VAR 0 6
37516: ST_TO_ADDR
// end ; end ;
37517: GO 37431
37519: POP
37520: POP
// result := hex ;
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_VAR 0 8
37530: ST_TO_ADDR
// end ;
37531: LD_VAR 0 3
37535: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37536: LD_INT 0
37538: PPUSH
37539: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37540: LD_VAR 0 1
37544: NOT
37545: PUSH
37546: LD_VAR 0 1
37550: PUSH
37551: LD_INT 21
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 23
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PPUSH
37575: CALL_OW 69
37579: IN
37580: NOT
37581: OR
37582: IFFALSE 37586
// exit ;
37584: GO 37633
// for i = 1 to 3 do
37586: LD_ADDR_VAR 0 3
37590: PUSH
37591: DOUBLE
37592: LD_INT 1
37594: DEC
37595: ST_TO_ADDR
37596: LD_INT 3
37598: PUSH
37599: FOR_TO
37600: IFFALSE 37631
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37602: LD_VAR 0 1
37606: PPUSH
37607: CALL_OW 250
37611: PPUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 251
37621: PPUSH
37622: LD_INT 1
37624: PPUSH
37625: CALL_OW 453
37629: GO 37599
37631: POP
37632: POP
// end ;
37633: LD_VAR 0 2
37637: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37638: LD_INT 0
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37646: LD_VAR 0 1
37650: NOT
37651: PUSH
37652: LD_VAR 0 2
37656: NOT
37657: OR
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 314
37668: OR
37669: IFFALSE 37673
// exit ;
37671: GO 38140
// if GetLives ( i ) < 250 then
37673: LD_VAR 0 4
37677: PPUSH
37678: CALL_OW 256
37682: PUSH
37683: LD_INT 250
37685: LESS
37686: IFFALSE 37699
// begin ComAutodestruct ( i ) ;
37688: LD_VAR 0 4
37692: PPUSH
37693: CALL 37536 0 1
// exit ;
37697: GO 38140
// end ; x := GetX ( enemy_unit ) ;
37699: LD_ADDR_VAR 0 7
37703: PUSH
37704: LD_VAR 0 2
37708: PPUSH
37709: CALL_OW 250
37713: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37714: LD_ADDR_VAR 0 8
37718: PUSH
37719: LD_VAR 0 2
37723: PPUSH
37724: CALL_OW 251
37728: ST_TO_ADDR
// if not x or not y then
37729: LD_VAR 0 7
37733: NOT
37734: PUSH
37735: LD_VAR 0 8
37739: NOT
37740: OR
37741: IFFALSE 37745
// exit ;
37743: GO 38140
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37745: LD_ADDR_VAR 0 6
37749: PUSH
37750: LD_VAR 0 7
37754: PPUSH
37755: LD_INT 0
37757: PPUSH
37758: LD_INT 4
37760: PPUSH
37761: CALL_OW 272
37765: PUSH
37766: LD_VAR 0 8
37770: PPUSH
37771: LD_INT 0
37773: PPUSH
37774: LD_INT 4
37776: PPUSH
37777: CALL_OW 273
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_VAR 0 7
37790: PPUSH
37791: LD_INT 1
37793: PPUSH
37794: LD_INT 4
37796: PPUSH
37797: CALL_OW 272
37801: PUSH
37802: LD_VAR 0 8
37806: PPUSH
37807: LD_INT 1
37809: PPUSH
37810: LD_INT 4
37812: PPUSH
37813: CALL_OW 273
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_VAR 0 7
37826: PPUSH
37827: LD_INT 2
37829: PPUSH
37830: LD_INT 4
37832: PPUSH
37833: CALL_OW 272
37837: PUSH
37838: LD_VAR 0 8
37842: PPUSH
37843: LD_INT 2
37845: PPUSH
37846: LD_INT 4
37848: PPUSH
37849: CALL_OW 273
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_VAR 0 7
37862: PPUSH
37863: LD_INT 3
37865: PPUSH
37866: LD_INT 4
37868: PPUSH
37869: CALL_OW 272
37873: PUSH
37874: LD_VAR 0 8
37878: PPUSH
37879: LD_INT 3
37881: PPUSH
37882: LD_INT 4
37884: PPUSH
37885: CALL_OW 273
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_VAR 0 7
37898: PPUSH
37899: LD_INT 4
37901: PPUSH
37902: LD_INT 4
37904: PPUSH
37905: CALL_OW 272
37909: PUSH
37910: LD_VAR 0 8
37914: PPUSH
37915: LD_INT 4
37917: PPUSH
37918: LD_INT 4
37920: PPUSH
37921: CALL_OW 273
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_VAR 0 7
37934: PPUSH
37935: LD_INT 5
37937: PPUSH
37938: LD_INT 4
37940: PPUSH
37941: CALL_OW 272
37945: PUSH
37946: LD_VAR 0 8
37950: PPUSH
37951: LD_INT 5
37953: PPUSH
37954: LD_INT 4
37956: PPUSH
37957: CALL_OW 273
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// for i = tmp downto 1 do
37974: LD_ADDR_VAR 0 4
37978: PUSH
37979: DOUBLE
37980: LD_VAR 0 6
37984: INC
37985: ST_TO_ADDR
37986: LD_INT 1
37988: PUSH
37989: FOR_DOWNTO
37990: IFFALSE 38091
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37992: LD_VAR 0 6
37996: PUSH
37997: LD_VAR 0 4
38001: ARRAY
38002: PUSH
38003: LD_INT 1
38005: ARRAY
38006: PPUSH
38007: LD_VAR 0 6
38011: PUSH
38012: LD_VAR 0 4
38016: ARRAY
38017: PUSH
38018: LD_INT 2
38020: ARRAY
38021: PPUSH
38022: CALL_OW 488
38026: NOT
38027: PUSH
38028: LD_VAR 0 6
38032: PUSH
38033: LD_VAR 0 4
38037: ARRAY
38038: PUSH
38039: LD_INT 1
38041: ARRAY
38042: PPUSH
38043: LD_VAR 0 6
38047: PUSH
38048: LD_VAR 0 4
38052: ARRAY
38053: PUSH
38054: LD_INT 2
38056: ARRAY
38057: PPUSH
38058: CALL_OW 428
38062: PUSH
38063: LD_INT 0
38065: NONEQUAL
38066: OR
38067: IFFALSE 38089
// tmp := Delete ( tmp , i ) ;
38069: LD_ADDR_VAR 0 6
38073: PUSH
38074: LD_VAR 0 6
38078: PPUSH
38079: LD_VAR 0 4
38083: PPUSH
38084: CALL_OW 3
38088: ST_TO_ADDR
38089: GO 37989
38091: POP
38092: POP
// j := GetClosestHex ( unit , tmp ) ;
38093: LD_ADDR_VAR 0 5
38097: PUSH
38098: LD_VAR 0 1
38102: PPUSH
38103: LD_VAR 0 6
38107: PPUSH
38108: CALL 37384 0 2
38112: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38113: LD_VAR 0 1
38117: PPUSH
38118: LD_VAR 0 5
38122: PUSH
38123: LD_INT 1
38125: ARRAY
38126: PPUSH
38127: LD_VAR 0 5
38131: PUSH
38132: LD_INT 2
38134: ARRAY
38135: PPUSH
38136: CALL_OW 111
// end ;
38140: LD_VAR 0 3
38144: RET
// export function PrepareApemanSoldier ( ) ; begin
38145: LD_INT 0
38147: PPUSH
// uc_nation := 0 ;
38148: LD_ADDR_OWVAR 21
38152: PUSH
38153: LD_INT 0
38155: ST_TO_ADDR
// hc_sex := sex_male ;
38156: LD_ADDR_OWVAR 27
38160: PUSH
38161: LD_INT 1
38163: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38164: LD_ADDR_OWVAR 28
38168: PUSH
38169: LD_INT 15
38171: ST_TO_ADDR
// hc_gallery :=  ;
38172: LD_ADDR_OWVAR 33
38176: PUSH
38177: LD_STRING 
38179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38180: LD_ADDR_OWVAR 31
38184: PUSH
38185: LD_INT 0
38187: PPUSH
38188: LD_INT 3
38190: PPUSH
38191: CALL_OW 12
38195: PUSH
38196: LD_INT 0
38198: PPUSH
38199: LD_INT 3
38201: PPUSH
38202: CALL_OW 12
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// end ;
38219: LD_VAR 0 1
38223: RET
// export function PrepareApemanEngineer ( ) ; begin
38224: LD_INT 0
38226: PPUSH
// uc_nation := 0 ;
38227: LD_ADDR_OWVAR 21
38231: PUSH
38232: LD_INT 0
38234: ST_TO_ADDR
// hc_sex := sex_male ;
38235: LD_ADDR_OWVAR 27
38239: PUSH
38240: LD_INT 1
38242: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38243: LD_ADDR_OWVAR 28
38247: PUSH
38248: LD_INT 16
38250: ST_TO_ADDR
// hc_gallery :=  ;
38251: LD_ADDR_OWVAR 33
38255: PUSH
38256: LD_STRING 
38258: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38259: LD_ADDR_OWVAR 31
38263: PUSH
38264: LD_INT 0
38266: PPUSH
38267: LD_INT 3
38269: PPUSH
38270: CALL_OW 12
38274: PUSH
38275: LD_INT 0
38277: PPUSH
38278: LD_INT 3
38280: PPUSH
38281: CALL_OW 12
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: ST_TO_ADDR
// end ;
38298: LD_VAR 0 1
38302: RET
// export function PrepareApeman ( agressivity ) ; begin
38303: LD_INT 0
38305: PPUSH
// uc_side := 0 ;
38306: LD_ADDR_OWVAR 20
38310: PUSH
38311: LD_INT 0
38313: ST_TO_ADDR
// uc_nation := 0 ;
38314: LD_ADDR_OWVAR 21
38318: PUSH
38319: LD_INT 0
38321: ST_TO_ADDR
// hc_sex := sex_male ;
38322: LD_ADDR_OWVAR 27
38326: PUSH
38327: LD_INT 1
38329: ST_TO_ADDR
// hc_class := class_apeman ;
38330: LD_ADDR_OWVAR 28
38334: PUSH
38335: LD_INT 12
38337: ST_TO_ADDR
// hc_gallery :=  ;
38338: LD_ADDR_OWVAR 33
38342: PUSH
38343: LD_STRING 
38345: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38346: LD_ADDR_OWVAR 35
38350: PUSH
38351: LD_VAR 0 1
38355: NEG
38356: PPUSH
38357: LD_VAR 0 1
38361: PPUSH
38362: CALL_OW 12
38366: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38367: LD_ADDR_OWVAR 31
38371: PUSH
38372: LD_INT 0
38374: PPUSH
38375: LD_INT 3
38377: PPUSH
38378: CALL_OW 12
38382: PUSH
38383: LD_INT 0
38385: PPUSH
38386: LD_INT 3
38388: PPUSH
38389: CALL_OW 12
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// end ;
38406: LD_VAR 0 2
38410: RET
// export function PrepareTiger ( agressivity ) ; begin
38411: LD_INT 0
38413: PPUSH
// uc_side := 0 ;
38414: LD_ADDR_OWVAR 20
38418: PUSH
38419: LD_INT 0
38421: ST_TO_ADDR
// uc_nation := 0 ;
38422: LD_ADDR_OWVAR 21
38426: PUSH
38427: LD_INT 0
38429: ST_TO_ADDR
// hc_class := class_tiger ;
38430: LD_ADDR_OWVAR 28
38434: PUSH
38435: LD_INT 14
38437: ST_TO_ADDR
// hc_gallery :=  ;
38438: LD_ADDR_OWVAR 33
38442: PUSH
38443: LD_STRING 
38445: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38446: LD_ADDR_OWVAR 35
38450: PUSH
38451: LD_VAR 0 1
38455: NEG
38456: PPUSH
38457: LD_VAR 0 1
38461: PPUSH
38462: CALL_OW 12
38466: ST_TO_ADDR
// end ;
38467: LD_VAR 0 2
38471: RET
// export function PrepareEnchidna ( ) ; begin
38472: LD_INT 0
38474: PPUSH
// uc_side := 0 ;
38475: LD_ADDR_OWVAR 20
38479: PUSH
38480: LD_INT 0
38482: ST_TO_ADDR
// uc_nation := 0 ;
38483: LD_ADDR_OWVAR 21
38487: PUSH
38488: LD_INT 0
38490: ST_TO_ADDR
// hc_class := class_baggie ;
38491: LD_ADDR_OWVAR 28
38495: PUSH
38496: LD_INT 13
38498: ST_TO_ADDR
// hc_gallery :=  ;
38499: LD_ADDR_OWVAR 33
38503: PUSH
38504: LD_STRING 
38506: ST_TO_ADDR
// end ;
38507: LD_VAR 0 1
38511: RET
// export function PrepareFrog ( ) ; begin
38512: LD_INT 0
38514: PPUSH
// uc_side := 0 ;
38515: LD_ADDR_OWVAR 20
38519: PUSH
38520: LD_INT 0
38522: ST_TO_ADDR
// uc_nation := 0 ;
38523: LD_ADDR_OWVAR 21
38527: PUSH
38528: LD_INT 0
38530: ST_TO_ADDR
// hc_class := class_frog ;
38531: LD_ADDR_OWVAR 28
38535: PUSH
38536: LD_INT 19
38538: ST_TO_ADDR
// hc_gallery :=  ;
38539: LD_ADDR_OWVAR 33
38543: PUSH
38544: LD_STRING 
38546: ST_TO_ADDR
// end ;
38547: LD_VAR 0 1
38551: RET
// export function PrepareFish ( ) ; begin
38552: LD_INT 0
38554: PPUSH
// uc_side := 0 ;
38555: LD_ADDR_OWVAR 20
38559: PUSH
38560: LD_INT 0
38562: ST_TO_ADDR
// uc_nation := 0 ;
38563: LD_ADDR_OWVAR 21
38567: PUSH
38568: LD_INT 0
38570: ST_TO_ADDR
// hc_class := class_fish ;
38571: LD_ADDR_OWVAR 28
38575: PUSH
38576: LD_INT 20
38578: ST_TO_ADDR
// hc_gallery :=  ;
38579: LD_ADDR_OWVAR 33
38583: PUSH
38584: LD_STRING 
38586: ST_TO_ADDR
// end ;
38587: LD_VAR 0 1
38591: RET
// export function PrepareBird ( ) ; begin
38592: LD_INT 0
38594: PPUSH
// uc_side := 0 ;
38595: LD_ADDR_OWVAR 20
38599: PUSH
38600: LD_INT 0
38602: ST_TO_ADDR
// uc_nation := 0 ;
38603: LD_ADDR_OWVAR 21
38607: PUSH
38608: LD_INT 0
38610: ST_TO_ADDR
// hc_class := class_phororhacos ;
38611: LD_ADDR_OWVAR 28
38615: PUSH
38616: LD_INT 18
38618: ST_TO_ADDR
// hc_gallery :=  ;
38619: LD_ADDR_OWVAR 33
38623: PUSH
38624: LD_STRING 
38626: ST_TO_ADDR
// end ;
38627: LD_VAR 0 1
38631: RET
// export function PrepareHorse ( ) ; begin
38632: LD_INT 0
38634: PPUSH
// uc_side := 0 ;
38635: LD_ADDR_OWVAR 20
38639: PUSH
38640: LD_INT 0
38642: ST_TO_ADDR
// uc_nation := 0 ;
38643: LD_ADDR_OWVAR 21
38647: PUSH
38648: LD_INT 0
38650: ST_TO_ADDR
// hc_class := class_horse ;
38651: LD_ADDR_OWVAR 28
38655: PUSH
38656: LD_INT 21
38658: ST_TO_ADDR
// hc_gallery :=  ;
38659: LD_ADDR_OWVAR 33
38663: PUSH
38664: LD_STRING 
38666: ST_TO_ADDR
// end ;
38667: LD_VAR 0 1
38671: RET
// export function PrepareMastodont ( ) ; begin
38672: LD_INT 0
38674: PPUSH
// uc_side := 0 ;
38675: LD_ADDR_OWVAR 20
38679: PUSH
38680: LD_INT 0
38682: ST_TO_ADDR
// uc_nation := 0 ;
38683: LD_ADDR_OWVAR 21
38687: PUSH
38688: LD_INT 0
38690: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38691: LD_ADDR_OWVAR 37
38695: PUSH
38696: LD_INT 31
38698: ST_TO_ADDR
// vc_control := control_rider ;
38699: LD_ADDR_OWVAR 38
38703: PUSH
38704: LD_INT 4
38706: ST_TO_ADDR
// end ;
38707: LD_VAR 0 1
38711: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38712: LD_INT 0
38714: PPUSH
38715: PPUSH
38716: PPUSH
// uc_side = 0 ;
38717: LD_ADDR_OWVAR 20
38721: PUSH
38722: LD_INT 0
38724: ST_TO_ADDR
// uc_nation = 0 ;
38725: LD_ADDR_OWVAR 21
38729: PUSH
38730: LD_INT 0
38732: ST_TO_ADDR
// InitHc_All ( ) ;
38733: CALL_OW 584
// InitVc ;
38737: CALL_OW 20
// if mastodonts then
38741: LD_VAR 0 6
38745: IFFALSE 38812
// for i = 1 to mastodonts do
38747: LD_ADDR_VAR 0 11
38751: PUSH
38752: DOUBLE
38753: LD_INT 1
38755: DEC
38756: ST_TO_ADDR
38757: LD_VAR 0 6
38761: PUSH
38762: FOR_TO
38763: IFFALSE 38810
// begin vc_chassis := 31 ;
38765: LD_ADDR_OWVAR 37
38769: PUSH
38770: LD_INT 31
38772: ST_TO_ADDR
// vc_control := control_rider ;
38773: LD_ADDR_OWVAR 38
38777: PUSH
38778: LD_INT 4
38780: ST_TO_ADDR
// animal := CreateVehicle ;
38781: LD_ADDR_VAR 0 12
38785: PUSH
38786: CALL_OW 45
38790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38791: LD_VAR 0 12
38795: PPUSH
38796: LD_VAR 0 8
38800: PPUSH
38801: LD_INT 0
38803: PPUSH
38804: CALL 40940 0 3
// end ;
38808: GO 38762
38810: POP
38811: POP
// if horses then
38812: LD_VAR 0 5
38816: IFFALSE 38883
// for i = 1 to horses do
38818: LD_ADDR_VAR 0 11
38822: PUSH
38823: DOUBLE
38824: LD_INT 1
38826: DEC
38827: ST_TO_ADDR
38828: LD_VAR 0 5
38832: PUSH
38833: FOR_TO
38834: IFFALSE 38881
// begin hc_class := 21 ;
38836: LD_ADDR_OWVAR 28
38840: PUSH
38841: LD_INT 21
38843: ST_TO_ADDR
// hc_gallery :=  ;
38844: LD_ADDR_OWVAR 33
38848: PUSH
38849: LD_STRING 
38851: ST_TO_ADDR
// animal := CreateHuman ;
38852: LD_ADDR_VAR 0 12
38856: PUSH
38857: CALL_OW 44
38861: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38862: LD_VAR 0 12
38866: PPUSH
38867: LD_VAR 0 8
38871: PPUSH
38872: LD_INT 0
38874: PPUSH
38875: CALL 40940 0 3
// end ;
38879: GO 38833
38881: POP
38882: POP
// if birds then
38883: LD_VAR 0 1
38887: IFFALSE 38954
// for i = 1 to birds do
38889: LD_ADDR_VAR 0 11
38893: PUSH
38894: DOUBLE
38895: LD_INT 1
38897: DEC
38898: ST_TO_ADDR
38899: LD_VAR 0 1
38903: PUSH
38904: FOR_TO
38905: IFFALSE 38952
// begin hc_class := 18 ;
38907: LD_ADDR_OWVAR 28
38911: PUSH
38912: LD_INT 18
38914: ST_TO_ADDR
// hc_gallery =  ;
38915: LD_ADDR_OWVAR 33
38919: PUSH
38920: LD_STRING 
38922: ST_TO_ADDR
// animal := CreateHuman ;
38923: LD_ADDR_VAR 0 12
38927: PUSH
38928: CALL_OW 44
38932: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38933: LD_VAR 0 12
38937: PPUSH
38938: LD_VAR 0 8
38942: PPUSH
38943: LD_INT 0
38945: PPUSH
38946: CALL 40940 0 3
// end ;
38950: GO 38904
38952: POP
38953: POP
// if tigers then
38954: LD_VAR 0 2
38958: IFFALSE 39042
// for i = 1 to tigers do
38960: LD_ADDR_VAR 0 11
38964: PUSH
38965: DOUBLE
38966: LD_INT 1
38968: DEC
38969: ST_TO_ADDR
38970: LD_VAR 0 2
38974: PUSH
38975: FOR_TO
38976: IFFALSE 39040
// begin hc_class = class_tiger ;
38978: LD_ADDR_OWVAR 28
38982: PUSH
38983: LD_INT 14
38985: ST_TO_ADDR
// hc_gallery =  ;
38986: LD_ADDR_OWVAR 33
38990: PUSH
38991: LD_STRING 
38993: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38994: LD_ADDR_OWVAR 35
38998: PUSH
38999: LD_INT 7
39001: NEG
39002: PPUSH
39003: LD_INT 7
39005: PPUSH
39006: CALL_OW 12
39010: ST_TO_ADDR
// animal := CreateHuman ;
39011: LD_ADDR_VAR 0 12
39015: PUSH
39016: CALL_OW 44
39020: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39021: LD_VAR 0 12
39025: PPUSH
39026: LD_VAR 0 8
39030: PPUSH
39031: LD_INT 0
39033: PPUSH
39034: CALL 40940 0 3
// end ;
39038: GO 38975
39040: POP
39041: POP
// if apemans then
39042: LD_VAR 0 3
39046: IFFALSE 39169
// for i = 1 to apemans do
39048: LD_ADDR_VAR 0 11
39052: PUSH
39053: DOUBLE
39054: LD_INT 1
39056: DEC
39057: ST_TO_ADDR
39058: LD_VAR 0 3
39062: PUSH
39063: FOR_TO
39064: IFFALSE 39167
// begin hc_class = class_apeman ;
39066: LD_ADDR_OWVAR 28
39070: PUSH
39071: LD_INT 12
39073: ST_TO_ADDR
// hc_gallery =  ;
39074: LD_ADDR_OWVAR 33
39078: PUSH
39079: LD_STRING 
39081: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39082: LD_ADDR_OWVAR 35
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PPUSH
39091: LD_INT 2
39093: PPUSH
39094: CALL_OW 12
39098: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39099: LD_ADDR_OWVAR 31
39103: PUSH
39104: LD_INT 1
39106: PPUSH
39107: LD_INT 3
39109: PPUSH
39110: CALL_OW 12
39114: PUSH
39115: LD_INT 1
39117: PPUSH
39118: LD_INT 3
39120: PPUSH
39121: CALL_OW 12
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: ST_TO_ADDR
// animal := CreateHuman ;
39138: LD_ADDR_VAR 0 12
39142: PUSH
39143: CALL_OW 44
39147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39148: LD_VAR 0 12
39152: PPUSH
39153: LD_VAR 0 8
39157: PPUSH
39158: LD_INT 0
39160: PPUSH
39161: CALL 40940 0 3
// end ;
39165: GO 39063
39167: POP
39168: POP
// if enchidnas then
39169: LD_VAR 0 4
39173: IFFALSE 39240
// for i = 1 to enchidnas do
39175: LD_ADDR_VAR 0 11
39179: PUSH
39180: DOUBLE
39181: LD_INT 1
39183: DEC
39184: ST_TO_ADDR
39185: LD_VAR 0 4
39189: PUSH
39190: FOR_TO
39191: IFFALSE 39238
// begin hc_class = 13 ;
39193: LD_ADDR_OWVAR 28
39197: PUSH
39198: LD_INT 13
39200: ST_TO_ADDR
// hc_gallery =  ;
39201: LD_ADDR_OWVAR 33
39205: PUSH
39206: LD_STRING 
39208: ST_TO_ADDR
// animal := CreateHuman ;
39209: LD_ADDR_VAR 0 12
39213: PUSH
39214: CALL_OW 44
39218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39219: LD_VAR 0 12
39223: PPUSH
39224: LD_VAR 0 8
39228: PPUSH
39229: LD_INT 0
39231: PPUSH
39232: CALL 40940 0 3
// end ;
39236: GO 39190
39238: POP
39239: POP
// if fishes then
39240: LD_VAR 0 7
39244: IFFALSE 39311
// for i = 1 to fishes do
39246: LD_ADDR_VAR 0 11
39250: PUSH
39251: DOUBLE
39252: LD_INT 1
39254: DEC
39255: ST_TO_ADDR
39256: LD_VAR 0 7
39260: PUSH
39261: FOR_TO
39262: IFFALSE 39309
// begin hc_class = 20 ;
39264: LD_ADDR_OWVAR 28
39268: PUSH
39269: LD_INT 20
39271: ST_TO_ADDR
// hc_gallery =  ;
39272: LD_ADDR_OWVAR 33
39276: PUSH
39277: LD_STRING 
39279: ST_TO_ADDR
// animal := CreateHuman ;
39280: LD_ADDR_VAR 0 12
39284: PUSH
39285: CALL_OW 44
39289: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39290: LD_VAR 0 12
39294: PPUSH
39295: LD_VAR 0 9
39299: PPUSH
39300: LD_INT 0
39302: PPUSH
39303: CALL 40940 0 3
// end ;
39307: GO 39261
39309: POP
39310: POP
// end ;
39311: LD_VAR 0 10
39315: RET
// export function WantHeal ( sci , unit ) ; begin
39316: LD_INT 0
39318: PPUSH
// if GetTaskList ( sci ) > 0 then
39319: LD_VAR 0 1
39323: PPUSH
39324: CALL_OW 437
39328: PUSH
39329: LD_INT 0
39331: GREATER
39332: IFFALSE 39402
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 437
39343: PUSH
39344: LD_INT 1
39346: ARRAY
39347: PUSH
39348: LD_INT 1
39350: ARRAY
39351: PUSH
39352: LD_STRING l
39354: EQUAL
39355: PUSH
39356: LD_VAR 0 1
39360: PPUSH
39361: CALL_OW 437
39365: PUSH
39366: LD_INT 1
39368: ARRAY
39369: PUSH
39370: LD_INT 4
39372: ARRAY
39373: PUSH
39374: LD_VAR 0 2
39378: EQUAL
39379: AND
39380: IFFALSE 39392
// result := true else
39382: LD_ADDR_VAR 0 3
39386: PUSH
39387: LD_INT 1
39389: ST_TO_ADDR
39390: GO 39400
// result := false ;
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_INT 0
39399: ST_TO_ADDR
// end else
39400: GO 39410
// result := false ;
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_INT 0
39409: ST_TO_ADDR
// end ;
39410: LD_VAR 0 3
39414: RET
// export function HealTarget ( sci ) ; begin
39415: LD_INT 0
39417: PPUSH
// if not sci then
39418: LD_VAR 0 1
39422: NOT
39423: IFFALSE 39427
// exit ;
39425: GO 39492
// result := 0 ;
39427: LD_ADDR_VAR 0 2
39431: PUSH
39432: LD_INT 0
39434: ST_TO_ADDR
// if GetTaskList ( sci ) then
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 437
39444: IFFALSE 39492
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39446: LD_VAR 0 1
39450: PPUSH
39451: CALL_OW 437
39455: PUSH
39456: LD_INT 1
39458: ARRAY
39459: PUSH
39460: LD_INT 1
39462: ARRAY
39463: PUSH
39464: LD_STRING l
39466: EQUAL
39467: IFFALSE 39492
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39469: LD_ADDR_VAR 0 2
39473: PUSH
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 437
39483: PUSH
39484: LD_INT 1
39486: ARRAY
39487: PUSH
39488: LD_INT 4
39490: ARRAY
39491: ST_TO_ADDR
// end ;
39492: LD_VAR 0 2
39496: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39497: LD_INT 0
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
// if not base_units then
39503: LD_VAR 0 1
39507: NOT
39508: IFFALSE 39512
// exit ;
39510: GO 39599
// result := false ;
39512: LD_ADDR_VAR 0 2
39516: PUSH
39517: LD_INT 0
39519: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39520: LD_ADDR_VAR 0 5
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: LD_INT 21
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PPUSH
39540: CALL_OW 72
39544: ST_TO_ADDR
// if not tmp then
39545: LD_VAR 0 5
39549: NOT
39550: IFFALSE 39554
// exit ;
39552: GO 39599
// for i in tmp do
39554: LD_ADDR_VAR 0 3
39558: PUSH
39559: LD_VAR 0 5
39563: PUSH
39564: FOR_IN
39565: IFFALSE 39597
// begin result := EnemyInRange ( i , 22 ) ;
39567: LD_ADDR_VAR 0 2
39571: PUSH
39572: LD_VAR 0 3
39576: PPUSH
39577: LD_INT 22
39579: PPUSH
39580: CALL 37186 0 2
39584: ST_TO_ADDR
// if result then
39585: LD_VAR 0 2
39589: IFFALSE 39595
// exit ;
39591: POP
39592: POP
39593: GO 39599
// end ;
39595: GO 39564
39597: POP
39598: POP
// end ;
39599: LD_VAR 0 2
39603: RET
// export function FilterByTag ( units , tag ) ; begin
39604: LD_INT 0
39606: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39607: LD_ADDR_VAR 0 3
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: LD_INT 120
39619: PUSH
39620: LD_VAR 0 2
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PPUSH
39629: CALL_OW 72
39633: ST_TO_ADDR
// end ;
39634: LD_VAR 0 3
39638: RET
// export function IsDriver ( un ) ; begin
39639: LD_INT 0
39641: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39642: LD_ADDR_VAR 0 2
39646: PUSH
39647: LD_VAR 0 1
39651: PUSH
39652: LD_INT 55
39654: PUSH
39655: EMPTY
39656: LIST
39657: PPUSH
39658: CALL_OW 69
39662: IN
39663: ST_TO_ADDR
// end ;
39664: LD_VAR 0 2
39668: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39669: LD_INT 0
39671: PPUSH
39672: PPUSH
// list := [ ] ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: EMPTY
39679: ST_TO_ADDR
// case d of 0 :
39680: LD_VAR 0 3
39684: PUSH
39685: LD_INT 0
39687: DOUBLE
39688: EQUAL
39689: IFTRUE 39693
39691: GO 39826
39693: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_VAR 0 1
39703: PUSH
39704: LD_INT 4
39706: MINUS
39707: PUSH
39708: LD_VAR 0 2
39712: PUSH
39713: LD_INT 4
39715: MINUS
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: PUSH
39725: LD_VAR 0 1
39729: PUSH
39730: LD_INT 3
39732: MINUS
39733: PUSH
39734: LD_VAR 0 2
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: PUSH
39747: LD_VAR 0 1
39751: PUSH
39752: LD_INT 4
39754: PLUS
39755: PUSH
39756: LD_VAR 0 2
39760: PUSH
39761: LD_INT 4
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: PUSH
39769: LD_VAR 0 1
39773: PUSH
39774: LD_INT 3
39776: PLUS
39777: PUSH
39778: LD_VAR 0 2
39782: PUSH
39783: LD_INT 3
39785: PLUS
39786: PUSH
39787: LD_INT 5
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: PUSH
39795: LD_VAR 0 1
39799: PUSH
39800: LD_VAR 0 2
39804: PUSH
39805: LD_INT 4
39807: PLUS
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// end ; 1 :
39824: GO 40524
39826: LD_INT 1
39828: DOUBLE
39829: EQUAL
39830: IFTRUE 39834
39832: GO 39967
39834: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39835: LD_ADDR_VAR 0 5
39839: PUSH
39840: LD_VAR 0 1
39844: PUSH
39845: LD_VAR 0 2
39849: PUSH
39850: LD_INT 4
39852: MINUS
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: PUSH
39862: LD_VAR 0 1
39866: PUSH
39867: LD_INT 3
39869: MINUS
39870: PUSH
39871: LD_VAR 0 2
39875: PUSH
39876: LD_INT 3
39878: MINUS
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: LIST
39887: PUSH
39888: LD_VAR 0 1
39892: PUSH
39893: LD_INT 4
39895: MINUS
39896: PUSH
39897: LD_VAR 0 2
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: PUSH
39910: LD_VAR 0 1
39914: PUSH
39915: LD_VAR 0 2
39919: PUSH
39920: LD_INT 3
39922: PLUS
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: PUSH
39932: LD_VAR 0 1
39936: PUSH
39937: LD_INT 4
39939: PLUS
39940: PUSH
39941: LD_VAR 0 2
39945: PUSH
39946: LD_INT 4
39948: PLUS
39949: PUSH
39950: LD_INT 5
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: ST_TO_ADDR
// end ; 2 :
39965: GO 40524
39967: LD_INT 2
39969: DOUBLE
39970: EQUAL
39971: IFTRUE 39975
39973: GO 40104
39975: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39976: LD_ADDR_VAR 0 5
39980: PUSH
39981: LD_VAR 0 1
39985: PUSH
39986: LD_VAR 0 2
39990: PUSH
39991: LD_INT 3
39993: MINUS
39994: PUSH
39995: LD_INT 3
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: PUSH
40003: LD_VAR 0 1
40007: PUSH
40008: LD_INT 4
40010: PLUS
40011: PUSH
40012: LD_VAR 0 2
40016: PUSH
40017: LD_INT 4
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: PUSH
40025: LD_VAR 0 1
40029: PUSH
40030: LD_VAR 0 2
40034: PUSH
40035: LD_INT 4
40037: PLUS
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: PUSH
40047: LD_VAR 0 1
40051: PUSH
40052: LD_INT 3
40054: MINUS
40055: PUSH
40056: LD_VAR 0 2
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: PUSH
40069: LD_VAR 0 1
40073: PUSH
40074: LD_INT 4
40076: MINUS
40077: PUSH
40078: LD_VAR 0 2
40082: PUSH
40083: LD_INT 4
40085: MINUS
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// end ; 3 :
40102: GO 40524
40104: LD_INT 3
40106: DOUBLE
40107: EQUAL
40108: IFTRUE 40112
40110: GO 40245
40112: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40113: LD_ADDR_VAR 0 5
40117: PUSH
40118: LD_VAR 0 1
40122: PUSH
40123: LD_INT 3
40125: PLUS
40126: PUSH
40127: LD_VAR 0 2
40131: PUSH
40132: LD_INT 4
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: LIST
40139: PUSH
40140: LD_VAR 0 1
40144: PUSH
40145: LD_INT 4
40147: PLUS
40148: PUSH
40149: LD_VAR 0 2
40153: PUSH
40154: LD_INT 4
40156: PLUS
40157: PUSH
40158: LD_INT 5
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: PUSH
40166: LD_VAR 0 1
40170: PUSH
40171: LD_INT 4
40173: MINUS
40174: PUSH
40175: LD_VAR 0 2
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: PUSH
40188: LD_VAR 0 1
40192: PUSH
40193: LD_VAR 0 2
40197: PUSH
40198: LD_INT 4
40200: MINUS
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: PUSH
40210: LD_VAR 0 1
40214: PUSH
40215: LD_INT 3
40217: MINUS
40218: PUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_INT 3
40226: MINUS
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: ST_TO_ADDR
// end ; 4 :
40243: GO 40524
40245: LD_INT 4
40247: DOUBLE
40248: EQUAL
40249: IFTRUE 40253
40251: GO 40386
40253: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40254: LD_ADDR_VAR 0 5
40258: PUSH
40259: LD_VAR 0 1
40263: PUSH
40264: LD_VAR 0 2
40268: PUSH
40269: LD_INT 4
40271: PLUS
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: PUSH
40281: LD_VAR 0 1
40285: PUSH
40286: LD_INT 3
40288: PLUS
40289: PUSH
40290: LD_VAR 0 2
40294: PUSH
40295: LD_INT 3
40297: PLUS
40298: PUSH
40299: LD_INT 5
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: PUSH
40307: LD_VAR 0 1
40311: PUSH
40312: LD_INT 4
40314: PLUS
40315: PUSH
40316: LD_VAR 0 2
40320: PUSH
40321: LD_INT 4
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: PUSH
40329: LD_VAR 0 1
40333: PUSH
40334: LD_VAR 0 2
40338: PUSH
40339: LD_INT 3
40341: MINUS
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: PUSH
40351: LD_VAR 0 1
40355: PUSH
40356: LD_INT 4
40358: MINUS
40359: PUSH
40360: LD_VAR 0 2
40364: PUSH
40365: LD_INT 4
40367: MINUS
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
// end ; 5 :
40384: GO 40524
40386: LD_INT 5
40388: DOUBLE
40389: EQUAL
40390: IFTRUE 40394
40392: GO 40523
40394: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40395: LD_ADDR_VAR 0 5
40399: PUSH
40400: LD_VAR 0 1
40404: PUSH
40405: LD_INT 4
40407: MINUS
40408: PUSH
40409: LD_VAR 0 2
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: PUSH
40422: LD_VAR 0 1
40426: PUSH
40427: LD_VAR 0 2
40431: PUSH
40432: LD_INT 4
40434: MINUS
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: PUSH
40444: LD_VAR 0 1
40448: PUSH
40449: LD_INT 4
40451: PLUS
40452: PUSH
40453: LD_VAR 0 2
40457: PUSH
40458: LD_INT 4
40460: PLUS
40461: PUSH
40462: LD_INT 5
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: PUSH
40470: LD_VAR 0 1
40474: PUSH
40475: LD_INT 3
40477: PLUS
40478: PUSH
40479: LD_VAR 0 2
40483: PUSH
40484: LD_INT 4
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: PUSH
40492: LD_VAR 0 1
40496: PUSH
40497: LD_VAR 0 2
40501: PUSH
40502: LD_INT 3
40504: PLUS
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: ST_TO_ADDR
// end ; end ;
40521: GO 40524
40523: POP
// result := list ;
40524: LD_ADDR_VAR 0 4
40528: PUSH
40529: LD_VAR 0 5
40533: ST_TO_ADDR
// end ;
40534: LD_VAR 0 4
40538: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40539: LD_INT 0
40541: PPUSH
40542: PPUSH
40543: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40544: LD_VAR 0 1
40548: NOT
40549: PUSH
40550: LD_VAR 0 2
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 3
40563: PUSH
40564: LD_INT 4
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: IN
40573: NOT
40574: OR
40575: IFFALSE 40579
// exit ;
40577: GO 40662
// tmp := [ ] ;
40579: LD_ADDR_VAR 0 5
40583: PUSH
40584: EMPTY
40585: ST_TO_ADDR
// for i in units do
40586: LD_ADDR_VAR 0 4
40590: PUSH
40591: LD_VAR 0 1
40595: PUSH
40596: FOR_IN
40597: IFFALSE 40631
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40599: LD_ADDR_VAR 0 5
40603: PUSH
40604: LD_VAR 0 5
40608: PPUSH
40609: LD_VAR 0 4
40613: PPUSH
40614: LD_VAR 0 2
40618: PPUSH
40619: CALL_OW 259
40623: PPUSH
40624: CALL 42022 0 2
40628: ST_TO_ADDR
40629: GO 40596
40631: POP
40632: POP
// if not tmp then
40633: LD_VAR 0 5
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 40662
// result := SortListByListDesc ( units , tmp ) ;
40642: LD_ADDR_VAR 0 3
40646: PUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: LD_VAR 0 5
40656: PPUSH
40657: CALL_OW 77
40661: ST_TO_ADDR
// end ;
40662: LD_VAR 0 3
40666: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40667: LD_INT 0
40669: PPUSH
40670: PPUSH
40671: PPUSH
// result := false ;
40672: LD_ADDR_VAR 0 3
40676: PUSH
40677: LD_INT 0
40679: ST_TO_ADDR
// if not building then
40680: LD_VAR 0 2
40684: NOT
40685: IFFALSE 40689
// exit ;
40687: GO 40827
// x := GetX ( building ) ;
40689: LD_ADDR_VAR 0 4
40693: PUSH
40694: LD_VAR 0 2
40698: PPUSH
40699: CALL_OW 250
40703: ST_TO_ADDR
// y := GetY ( building ) ;
40704: LD_ADDR_VAR 0 5
40708: PUSH
40709: LD_VAR 0 2
40713: PPUSH
40714: CALL_OW 251
40718: ST_TO_ADDR
// if not x or not y then
40719: LD_VAR 0 4
40723: NOT
40724: PUSH
40725: LD_VAR 0 5
40729: NOT
40730: OR
40731: IFFALSE 40735
// exit ;
40733: GO 40827
// if GetTaskList ( unit ) then
40735: LD_VAR 0 1
40739: PPUSH
40740: CALL_OW 437
40744: IFFALSE 40827
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40746: LD_STRING e
40748: PUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 437
40758: PUSH
40759: LD_INT 1
40761: ARRAY
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: EQUAL
40767: PUSH
40768: LD_VAR 0 4
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 437
40782: PUSH
40783: LD_INT 1
40785: ARRAY
40786: PUSH
40787: LD_INT 2
40789: ARRAY
40790: EQUAL
40791: AND
40792: PUSH
40793: LD_VAR 0 5
40797: PUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 437
40807: PUSH
40808: LD_INT 1
40810: ARRAY
40811: PUSH
40812: LD_INT 3
40814: ARRAY
40815: EQUAL
40816: AND
40817: IFFALSE 40827
// result := true end ;
40819: LD_ADDR_VAR 0 3
40823: PUSH
40824: LD_INT 1
40826: ST_TO_ADDR
// end ;
40827: LD_VAR 0 3
40831: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40832: LD_INT 0
40834: PPUSH
// result := false ;
40835: LD_ADDR_VAR 0 4
40839: PUSH
40840: LD_INT 0
40842: ST_TO_ADDR
// if GetTaskList ( unit ) then
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 437
40852: IFFALSE 40935
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40854: LD_STRING M
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 437
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PUSH
40871: LD_INT 1
40873: ARRAY
40874: EQUAL
40875: PUSH
40876: LD_VAR 0 2
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 437
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: PUSH
40895: LD_INT 2
40897: ARRAY
40898: EQUAL
40899: AND
40900: PUSH
40901: LD_VAR 0 3
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: CALL_OW 437
40915: PUSH
40916: LD_INT 1
40918: ARRAY
40919: PUSH
40920: LD_INT 3
40922: ARRAY
40923: EQUAL
40924: AND
40925: IFFALSE 40935
// result := true ;
40927: LD_ADDR_VAR 0 4
40931: PUSH
40932: LD_INT 1
40934: ST_TO_ADDR
// end ; end ;
40935: LD_VAR 0 4
40939: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40940: LD_INT 0
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
// if not unit or not area then
40946: LD_VAR 0 1
40950: NOT
40951: PUSH
40952: LD_VAR 0 2
40956: NOT
40957: OR
40958: IFFALSE 40962
// exit ;
40960: GO 41125
// tmp := AreaToList ( area , i ) ;
40962: LD_ADDR_VAR 0 6
40966: PUSH
40967: LD_VAR 0 2
40971: PPUSH
40972: LD_VAR 0 5
40976: PPUSH
40977: CALL_OW 517
40981: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40982: LD_ADDR_VAR 0 5
40986: PUSH
40987: DOUBLE
40988: LD_INT 1
40990: DEC
40991: ST_TO_ADDR
40992: LD_VAR 0 6
40996: PUSH
40997: LD_INT 1
40999: ARRAY
41000: PUSH
41001: FOR_TO
41002: IFFALSE 41123
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41004: LD_ADDR_VAR 0 7
41008: PUSH
41009: LD_VAR 0 6
41013: PUSH
41014: LD_INT 1
41016: ARRAY
41017: PUSH
41018: LD_VAR 0 5
41022: ARRAY
41023: PUSH
41024: LD_VAR 0 6
41028: PUSH
41029: LD_INT 2
41031: ARRAY
41032: PUSH
41033: LD_VAR 0 5
41037: ARRAY
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
41043: LD_INT 92
41045: PUSH
41046: LD_VAR 0 7
41050: PUSH
41051: LD_INT 1
41053: ARRAY
41054: PUSH
41055: LD_VAR 0 7
41059: PUSH
41060: LD_INT 2
41062: ARRAY
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: PPUSH
41073: CALL_OW 69
41077: PUSH
41078: LD_INT 0
41080: EQUAL
41081: IFFALSE 41121
// begin PlaceUnitArea ( unit , area , mode ) ;
41083: LD_VAR 0 1
41087: PPUSH
41088: LD_VAR 0 2
41092: PPUSH
41093: LD_VAR 0 3
41097: PPUSH
41098: CALL_OW 49
// result := IsPlaced ( unit ) ;
41102: LD_ADDR_VAR 0 4
41106: PUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 305
41116: ST_TO_ADDR
// exit ;
41117: POP
41118: POP
41119: GO 41125
// end ; end ;
41121: GO 41001
41123: POP
41124: POP
// end ;
41125: LD_VAR 0 4
41129: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41130: LD_INT 0
41132: PPUSH
41133: PPUSH
41134: PPUSH
// if not side or side > 8 then
41135: LD_VAR 0 1
41139: NOT
41140: PUSH
41141: LD_VAR 0 1
41145: PUSH
41146: LD_INT 8
41148: GREATER
41149: OR
41150: IFFALSE 41154
// exit ;
41152: GO 41341
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41154: LD_ADDR_VAR 0 4
41158: PUSH
41159: LD_INT 22
41161: PUSH
41162: LD_VAR 0 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 21
41173: PUSH
41174: LD_INT 3
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PPUSH
41185: CALL_OW 69
41189: ST_TO_ADDR
// if not tmp then
41190: LD_VAR 0 4
41194: NOT
41195: IFFALSE 41199
// exit ;
41197: GO 41341
// enable_addtolog := true ;
41199: LD_ADDR_OWVAR 81
41203: PUSH
41204: LD_INT 1
41206: ST_TO_ADDR
// AddToLog ( [ ) ;
41207: LD_STRING [
41209: PPUSH
41210: CALL_OW 561
// for i in tmp do
41214: LD_ADDR_VAR 0 3
41218: PUSH
41219: LD_VAR 0 4
41223: PUSH
41224: FOR_IN
41225: IFFALSE 41332
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41227: LD_STRING [
41229: PUSH
41230: LD_VAR 0 3
41234: PPUSH
41235: CALL_OW 266
41239: STR
41240: PUSH
41241: LD_STRING , 
41243: STR
41244: PUSH
41245: LD_VAR 0 3
41249: PPUSH
41250: CALL_OW 250
41254: STR
41255: PUSH
41256: LD_STRING , 
41258: STR
41259: PUSH
41260: LD_VAR 0 3
41264: PPUSH
41265: CALL_OW 251
41269: STR
41270: PUSH
41271: LD_STRING , 
41273: STR
41274: PUSH
41275: LD_VAR 0 3
41279: PPUSH
41280: CALL_OW 254
41284: STR
41285: PUSH
41286: LD_STRING , 
41288: STR
41289: PUSH
41290: LD_VAR 0 3
41294: PPUSH
41295: LD_INT 1
41297: PPUSH
41298: CALL_OW 268
41302: STR
41303: PUSH
41304: LD_STRING , 
41306: STR
41307: PUSH
41308: LD_VAR 0 3
41312: PPUSH
41313: LD_INT 2
41315: PPUSH
41316: CALL_OW 268
41320: STR
41321: PUSH
41322: LD_STRING ],
41324: STR
41325: PPUSH
41326: CALL_OW 561
// end ;
41330: GO 41224
41332: POP
41333: POP
// AddToLog ( ]; ) ;
41334: LD_STRING ];
41336: PPUSH
41337: CALL_OW 561
// end ;
41341: LD_VAR 0 2
41345: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
// if not area or not rate or not max then
41353: LD_VAR 0 1
41357: NOT
41358: PUSH
41359: LD_VAR 0 2
41363: NOT
41364: OR
41365: PUSH
41366: LD_VAR 0 4
41370: NOT
41371: OR
41372: IFFALSE 41376
// exit ;
41374: GO 41565
// while 1 do
41376: LD_INT 1
41378: IFFALSE 41565
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41380: LD_ADDR_VAR 0 9
41384: PUSH
41385: LD_VAR 0 1
41389: PPUSH
41390: LD_INT 1
41392: PPUSH
41393: CALL_OW 287
41397: PUSH
41398: LD_INT 10
41400: MUL
41401: ST_TO_ADDR
// r := rate / 10 ;
41402: LD_ADDR_VAR 0 7
41406: PUSH
41407: LD_VAR 0 2
41411: PUSH
41412: LD_INT 10
41414: DIVREAL
41415: ST_TO_ADDR
// time := 1 1$00 ;
41416: LD_ADDR_VAR 0 8
41420: PUSH
41421: LD_INT 2100
41423: ST_TO_ADDR
// if amount < min then
41424: LD_VAR 0 9
41428: PUSH
41429: LD_VAR 0 3
41433: LESS
41434: IFFALSE 41452
// r := r * 2 else
41436: LD_ADDR_VAR 0 7
41440: PUSH
41441: LD_VAR 0 7
41445: PUSH
41446: LD_INT 2
41448: MUL
41449: ST_TO_ADDR
41450: GO 41478
// if amount > max then
41452: LD_VAR 0 9
41456: PUSH
41457: LD_VAR 0 4
41461: GREATER
41462: IFFALSE 41478
// r := r / 2 ;
41464: LD_ADDR_VAR 0 7
41468: PUSH
41469: LD_VAR 0 7
41473: PUSH
41474: LD_INT 2
41476: DIVREAL
41477: ST_TO_ADDR
// time := time / r ;
41478: LD_ADDR_VAR 0 8
41482: PUSH
41483: LD_VAR 0 8
41487: PUSH
41488: LD_VAR 0 7
41492: DIVREAL
41493: ST_TO_ADDR
// if time < 0 then
41494: LD_VAR 0 8
41498: PUSH
41499: LD_INT 0
41501: LESS
41502: IFFALSE 41519
// time := time * - 1 ;
41504: LD_ADDR_VAR 0 8
41508: PUSH
41509: LD_VAR 0 8
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: MUL
41518: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41519: LD_VAR 0 8
41523: PUSH
41524: LD_INT 35
41526: PPUSH
41527: LD_INT 875
41529: PPUSH
41530: CALL_OW 12
41534: PLUS
41535: PPUSH
41536: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41540: LD_INT 1
41542: PPUSH
41543: LD_INT 5
41545: PPUSH
41546: CALL_OW 12
41550: PPUSH
41551: LD_VAR 0 1
41555: PPUSH
41556: LD_INT 1
41558: PPUSH
41559: CALL_OW 55
// end ;
41563: GO 41376
// end ;
41565: LD_VAR 0 5
41569: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41570: LD_INT 0
41572: PPUSH
41573: PPUSH
41574: PPUSH
41575: PPUSH
41576: PPUSH
41577: PPUSH
41578: PPUSH
41579: PPUSH
// if not turrets or not factories then
41580: LD_VAR 0 1
41584: NOT
41585: PUSH
41586: LD_VAR 0 2
41590: NOT
41591: OR
41592: IFFALSE 41596
// exit ;
41594: GO 41903
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41596: LD_ADDR_VAR 0 10
41600: PUSH
41601: LD_INT 5
41603: PUSH
41604: LD_INT 6
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 4
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 3
41623: PUSH
41624: LD_INT 5
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 24
41638: PUSH
41639: LD_INT 25
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 23
41648: PUSH
41649: LD_INT 27
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 42
41662: PUSH
41663: LD_INT 43
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 44
41672: PUSH
41673: LD_INT 46
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 45
41682: PUSH
41683: LD_INT 47
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: ST_TO_ADDR
// result := [ ] ;
41700: LD_ADDR_VAR 0 3
41704: PUSH
41705: EMPTY
41706: ST_TO_ADDR
// for i in turrets do
41707: LD_ADDR_VAR 0 4
41711: PUSH
41712: LD_VAR 0 1
41716: PUSH
41717: FOR_IN
41718: IFFALSE 41901
// begin nat := GetNation ( i ) ;
41720: LD_ADDR_VAR 0 7
41724: PUSH
41725: LD_VAR 0 4
41729: PPUSH
41730: CALL_OW 248
41734: ST_TO_ADDR
// weapon := 0 ;
41735: LD_ADDR_VAR 0 8
41739: PUSH
41740: LD_INT 0
41742: ST_TO_ADDR
// if not nat then
41743: LD_VAR 0 7
41747: NOT
41748: IFFALSE 41752
// continue ;
41750: GO 41717
// for j in list [ nat ] do
41752: LD_ADDR_VAR 0 5
41756: PUSH
41757: LD_VAR 0 10
41761: PUSH
41762: LD_VAR 0 7
41766: ARRAY
41767: PUSH
41768: FOR_IN
41769: IFFALSE 41810
// if GetBWeapon ( i ) = j [ 1 ] then
41771: LD_VAR 0 4
41775: PPUSH
41776: CALL_OW 269
41780: PUSH
41781: LD_VAR 0 5
41785: PUSH
41786: LD_INT 1
41788: ARRAY
41789: EQUAL
41790: IFFALSE 41808
// begin weapon := j [ 2 ] ;
41792: LD_ADDR_VAR 0 8
41796: PUSH
41797: LD_VAR 0 5
41801: PUSH
41802: LD_INT 2
41804: ARRAY
41805: ST_TO_ADDR
// break ;
41806: GO 41810
// end ;
41808: GO 41768
41810: POP
41811: POP
// if not weapon then
41812: LD_VAR 0 8
41816: NOT
41817: IFFALSE 41821
// continue ;
41819: GO 41717
// for k in factories do
41821: LD_ADDR_VAR 0 6
41825: PUSH
41826: LD_VAR 0 2
41830: PUSH
41831: FOR_IN
41832: IFFALSE 41897
// begin weapons := AvailableWeaponList ( k ) ;
41834: LD_ADDR_VAR 0 9
41838: PUSH
41839: LD_VAR 0 6
41843: PPUSH
41844: CALL_OW 478
41848: ST_TO_ADDR
// if not weapons then
41849: LD_VAR 0 9
41853: NOT
41854: IFFALSE 41858
// continue ;
41856: GO 41831
// if weapon in weapons then
41858: LD_VAR 0 8
41862: PUSH
41863: LD_VAR 0 9
41867: IN
41868: IFFALSE 41895
// begin result := [ i , weapon ] ;
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_VAR 0 4
41879: PUSH
41880: LD_VAR 0 8
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: ST_TO_ADDR
// exit ;
41889: POP
41890: POP
41891: POP
41892: POP
41893: GO 41903
// end ; end ;
41895: GO 41831
41897: POP
41898: POP
// end ;
41899: GO 41717
41901: POP
41902: POP
// end ;
41903: LD_VAR 0 3
41907: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41908: LD_INT 0
41910: PPUSH
// if not side or side > 8 then
41911: LD_VAR 0 3
41915: NOT
41916: PUSH
41917: LD_VAR 0 3
41921: PUSH
41922: LD_INT 8
41924: GREATER
41925: OR
41926: IFFALSE 41930
// exit ;
41928: GO 41989
// if not range then
41930: LD_VAR 0 4
41934: NOT
41935: IFFALSE 41946
// range := - 12 ;
41937: LD_ADDR_VAR 0 4
41941: PUSH
41942: LD_INT 12
41944: NEG
41945: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41946: LD_VAR 0 1
41950: PPUSH
41951: LD_VAR 0 2
41955: PPUSH
41956: LD_VAR 0 3
41960: PPUSH
41961: LD_VAR 0 4
41965: PPUSH
41966: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41970: LD_VAR 0 1
41974: PPUSH
41975: LD_VAR 0 2
41979: PPUSH
41980: LD_VAR 0 3
41984: PPUSH
41985: CALL_OW 331
// end ;
41989: LD_VAR 0 5
41993: RET
// export function Video ( mode ) ; begin
41994: LD_INT 0
41996: PPUSH
// ingame_video = mode ;
41997: LD_ADDR_OWVAR 52
42001: PUSH
42002: LD_VAR 0 1
42006: ST_TO_ADDR
// interface_hidden = mode ;
42007: LD_ADDR_OWVAR 54
42011: PUSH
42012: LD_VAR 0 1
42016: ST_TO_ADDR
// end ;
42017: LD_VAR 0 2
42021: RET
// export function Join ( array , element ) ; begin
42022: LD_INT 0
42024: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42025: LD_ADDR_VAR 0 3
42029: PUSH
42030: LD_VAR 0 1
42034: PPUSH
42035: LD_VAR 0 1
42039: PUSH
42040: LD_INT 1
42042: PLUS
42043: PPUSH
42044: LD_VAR 0 2
42048: PPUSH
42049: CALL_OW 1
42053: ST_TO_ADDR
// end ;
42054: LD_VAR 0 3
42058: RET
// export function JoinUnion ( array , element ) ; begin
42059: LD_INT 0
42061: PPUSH
// result := array union element ;
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_VAR 0 1
42071: PUSH
42072: LD_VAR 0 2
42076: UNION
42077: ST_TO_ADDR
// end ;
42078: LD_VAR 0 3
42082: RET
// export function GetBehemoths ( side ) ; begin
42083: LD_INT 0
42085: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42086: LD_ADDR_VAR 0 2
42090: PUSH
42091: LD_INT 22
42093: PUSH
42094: LD_VAR 0 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 31
42105: PUSH
42106: LD_INT 25
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PPUSH
42117: CALL_OW 69
42121: ST_TO_ADDR
// end ;
42122: LD_VAR 0 2
42126: RET
// export function Shuffle ( array ) ; var i , index ; begin
42127: LD_INT 0
42129: PPUSH
42130: PPUSH
42131: PPUSH
// result := [ ] ;
42132: LD_ADDR_VAR 0 2
42136: PUSH
42137: EMPTY
42138: ST_TO_ADDR
// if not array then
42139: LD_VAR 0 1
42143: NOT
42144: IFFALSE 42148
// exit ;
42146: GO 42247
// Randomize ;
42148: CALL_OW 10
// for i = array downto 1 do
42152: LD_ADDR_VAR 0 3
42156: PUSH
42157: DOUBLE
42158: LD_VAR 0 1
42162: INC
42163: ST_TO_ADDR
42164: LD_INT 1
42166: PUSH
42167: FOR_DOWNTO
42168: IFFALSE 42245
// begin index := rand ( 1 , array ) ;
42170: LD_ADDR_VAR 0 4
42174: PUSH
42175: LD_INT 1
42177: PPUSH
42178: LD_VAR 0 1
42182: PPUSH
42183: CALL_OW 12
42187: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42188: LD_ADDR_VAR 0 2
42192: PUSH
42193: LD_VAR 0 2
42197: PPUSH
42198: LD_VAR 0 2
42202: PUSH
42203: LD_INT 1
42205: PLUS
42206: PPUSH
42207: LD_VAR 0 1
42211: PUSH
42212: LD_VAR 0 4
42216: ARRAY
42217: PPUSH
42218: CALL_OW 2
42222: ST_TO_ADDR
// array := Delete ( array , index ) ;
42223: LD_ADDR_VAR 0 1
42227: PUSH
42228: LD_VAR 0 1
42232: PPUSH
42233: LD_VAR 0 4
42237: PPUSH
42238: CALL_OW 3
42242: ST_TO_ADDR
// end ;
42243: GO 42167
42245: POP
42246: POP
// end ;
42247: LD_VAR 0 2
42251: RET
// export function GetBaseMaterials ( base ) ; begin
42252: LD_INT 0
42254: PPUSH
// result := [ 0 , 0 , 0 ] ;
42255: LD_ADDR_VAR 0 2
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
// if not base then
42274: LD_VAR 0 1
42278: NOT
42279: IFFALSE 42283
// exit ;
42281: GO 42332
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42283: LD_ADDR_VAR 0 2
42287: PUSH
42288: LD_VAR 0 1
42292: PPUSH
42293: LD_INT 1
42295: PPUSH
42296: CALL_OW 275
42300: PUSH
42301: LD_VAR 0 1
42305: PPUSH
42306: LD_INT 2
42308: PPUSH
42309: CALL_OW 275
42313: PUSH
42314: LD_VAR 0 1
42318: PPUSH
42319: LD_INT 3
42321: PPUSH
42322: CALL_OW 275
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: ST_TO_ADDR
// end ;
42332: LD_VAR 0 2
42336: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42337: LD_INT 0
42339: PPUSH
42340: PPUSH
// result := array ;
42341: LD_ADDR_VAR 0 3
42345: PUSH
42346: LD_VAR 0 1
42350: ST_TO_ADDR
// if size >= result then
42351: LD_VAR 0 2
42355: PUSH
42356: LD_VAR 0 3
42360: GREATEREQUAL
42361: IFFALSE 42365
// exit ;
42363: GO 42415
// if size then
42365: LD_VAR 0 2
42369: IFFALSE 42415
// for i := array downto size do
42371: LD_ADDR_VAR 0 4
42375: PUSH
42376: DOUBLE
42377: LD_VAR 0 1
42381: INC
42382: ST_TO_ADDR
42383: LD_VAR 0 2
42387: PUSH
42388: FOR_DOWNTO
42389: IFFALSE 42413
// result := Delete ( result , result ) ;
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_VAR 0 3
42400: PPUSH
42401: LD_VAR 0 3
42405: PPUSH
42406: CALL_OW 3
42410: ST_TO_ADDR
42411: GO 42388
42413: POP
42414: POP
// end ;
42415: LD_VAR 0 3
42419: RET
// export function ComExit ( unit ) ; var tmp ; begin
42420: LD_INT 0
42422: PPUSH
42423: PPUSH
// if not IsInUnit ( unit ) then
42424: LD_VAR 0 1
42428: PPUSH
42429: CALL_OW 310
42433: NOT
42434: IFFALSE 42438
// exit ;
42436: GO 42498
// tmp := IsInUnit ( unit ) ;
42438: LD_ADDR_VAR 0 3
42442: PUSH
42443: LD_VAR 0 1
42447: PPUSH
42448: CALL_OW 310
42452: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42453: LD_VAR 0 3
42457: PPUSH
42458: CALL_OW 247
42462: PUSH
42463: LD_INT 2
42465: EQUAL
42466: IFFALSE 42479
// ComExitVehicle ( unit ) else
42468: LD_VAR 0 1
42472: PPUSH
42473: CALL_OW 121
42477: GO 42488
// ComExitBuilding ( unit ) ;
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 122
// result := tmp ;
42488: LD_ADDR_VAR 0 2
42492: PUSH
42493: LD_VAR 0 3
42497: ST_TO_ADDR
// end ;
42498: LD_VAR 0 2
42502: RET
// export function ComExitAll ( units ) ; var i ; begin
42503: LD_INT 0
42505: PPUSH
42506: PPUSH
// if not units then
42507: LD_VAR 0 1
42511: NOT
42512: IFFALSE 42516
// exit ;
42514: GO 42542
// for i in units do
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_VAR 0 1
42525: PUSH
42526: FOR_IN
42527: IFFALSE 42540
// ComExit ( i ) ;
42529: LD_VAR 0 3
42533: PPUSH
42534: CALL 42420 0 1
42538: GO 42526
42540: POP
42541: POP
// end ;
42542: LD_VAR 0 2
42546: RET
// export function ResetHc ; begin
42547: LD_INT 0
42549: PPUSH
// InitHc ;
42550: CALL_OW 19
// hc_importance := 0 ;
42554: LD_ADDR_OWVAR 32
42558: PUSH
42559: LD_INT 0
42561: ST_TO_ADDR
// end ;
42562: LD_VAR 0 1
42566: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42567: LD_INT 0
42569: PPUSH
42570: PPUSH
42571: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42572: LD_ADDR_VAR 0 6
42576: PUSH
42577: LD_VAR 0 1
42581: PUSH
42582: LD_VAR 0 3
42586: PLUS
42587: PUSH
42588: LD_INT 2
42590: DIV
42591: ST_TO_ADDR
// if _x < 0 then
42592: LD_VAR 0 6
42596: PUSH
42597: LD_INT 0
42599: LESS
42600: IFFALSE 42617
// _x := _x * - 1 ;
42602: LD_ADDR_VAR 0 6
42606: PUSH
42607: LD_VAR 0 6
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: MUL
42616: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42617: LD_ADDR_VAR 0 7
42621: PUSH
42622: LD_VAR 0 2
42626: PUSH
42627: LD_VAR 0 4
42631: PLUS
42632: PUSH
42633: LD_INT 2
42635: DIV
42636: ST_TO_ADDR
// if _y < 0 then
42637: LD_VAR 0 7
42641: PUSH
42642: LD_INT 0
42644: LESS
42645: IFFALSE 42662
// _y := _y * - 1 ;
42647: LD_ADDR_VAR 0 7
42651: PUSH
42652: LD_VAR 0 7
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: MUL
42661: ST_TO_ADDR
// result := [ _x , _y ] ;
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_VAR 0 6
42671: PUSH
42672: LD_VAR 0 7
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: ST_TO_ADDR
// end ;
42681: LD_VAR 0 5
42685: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42686: LD_INT 0
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
// task := GetTaskList ( unit ) ;
42692: LD_ADDR_VAR 0 7
42696: PUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: CALL_OW 437
42706: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42707: LD_VAR 0 7
42711: NOT
42712: PUSH
42713: LD_VAR 0 1
42717: PPUSH
42718: LD_VAR 0 2
42722: PPUSH
42723: CALL_OW 308
42727: NOT
42728: AND
42729: IFFALSE 42733
// exit ;
42731: GO 42851
// if IsInArea ( unit , area ) then
42733: LD_VAR 0 1
42737: PPUSH
42738: LD_VAR 0 2
42742: PPUSH
42743: CALL_OW 308
42747: IFFALSE 42765
// begin ComMoveToArea ( unit , goAway ) ;
42749: LD_VAR 0 1
42753: PPUSH
42754: LD_VAR 0 3
42758: PPUSH
42759: CALL_OW 113
// exit ;
42763: GO 42851
// end ; if task [ 1 ] [ 1 ] <> M then
42765: LD_VAR 0 7
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: PUSH
42774: LD_INT 1
42776: ARRAY
42777: PUSH
42778: LD_STRING M
42780: NONEQUAL
42781: IFFALSE 42785
// exit ;
42783: GO 42851
// x := task [ 1 ] [ 2 ] ;
42785: LD_ADDR_VAR 0 5
42789: PUSH
42790: LD_VAR 0 7
42794: PUSH
42795: LD_INT 1
42797: ARRAY
42798: PUSH
42799: LD_INT 2
42801: ARRAY
42802: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42803: LD_ADDR_VAR 0 6
42807: PUSH
42808: LD_VAR 0 7
42812: PUSH
42813: LD_INT 1
42815: ARRAY
42816: PUSH
42817: LD_INT 3
42819: ARRAY
42820: ST_TO_ADDR
// if InArea ( x , y , area ) then
42821: LD_VAR 0 5
42825: PPUSH
42826: LD_VAR 0 6
42830: PPUSH
42831: LD_VAR 0 2
42835: PPUSH
42836: CALL_OW 309
42840: IFFALSE 42851
// ComStop ( unit ) ;
42842: LD_VAR 0 1
42846: PPUSH
42847: CALL_OW 141
// end ;
42851: LD_VAR 0 4
42855: RET
// export function Abs ( value ) ; begin
42856: LD_INT 0
42858: PPUSH
// result := value ;
42859: LD_ADDR_VAR 0 2
42863: PUSH
42864: LD_VAR 0 1
42868: ST_TO_ADDR
// if value < 0 then
42869: LD_VAR 0 1
42873: PUSH
42874: LD_INT 0
42876: LESS
42877: IFFALSE 42894
// result := value * - 1 ;
42879: LD_ADDR_VAR 0 2
42883: PUSH
42884: LD_VAR 0 1
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: MUL
42893: ST_TO_ADDR
// end ;
42894: LD_VAR 0 2
42898: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42899: LD_INT 0
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
// if not unit or not building then
42909: LD_VAR 0 1
42913: NOT
42914: PUSH
42915: LD_VAR 0 2
42919: NOT
42920: OR
42921: IFFALSE 42925
// exit ;
42923: GO 43151
// x := GetX ( building ) ;
42925: LD_ADDR_VAR 0 4
42929: PUSH
42930: LD_VAR 0 2
42934: PPUSH
42935: CALL_OW 250
42939: ST_TO_ADDR
// y := GetY ( building ) ;
42940: LD_ADDR_VAR 0 6
42944: PUSH
42945: LD_VAR 0 2
42949: PPUSH
42950: CALL_OW 251
42954: ST_TO_ADDR
// d := GetDir ( building ) ;
42955: LD_ADDR_VAR 0 8
42959: PUSH
42960: LD_VAR 0 2
42964: PPUSH
42965: CALL_OW 254
42969: ST_TO_ADDR
// r := 4 ;
42970: LD_ADDR_VAR 0 9
42974: PUSH
42975: LD_INT 4
42977: ST_TO_ADDR
// for i := 1 to 5 do
42978: LD_ADDR_VAR 0 10
42982: PUSH
42983: DOUBLE
42984: LD_INT 1
42986: DEC
42987: ST_TO_ADDR
42988: LD_INT 5
42990: PUSH
42991: FOR_TO
42992: IFFALSE 43149
// begin _x := ShiftX ( x , d , r + i ) ;
42994: LD_ADDR_VAR 0 5
42998: PUSH
42999: LD_VAR 0 4
43003: PPUSH
43004: LD_VAR 0 8
43008: PPUSH
43009: LD_VAR 0 9
43013: PUSH
43014: LD_VAR 0 10
43018: PLUS
43019: PPUSH
43020: CALL_OW 272
43024: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43025: LD_ADDR_VAR 0 7
43029: PUSH
43030: LD_VAR 0 6
43034: PPUSH
43035: LD_VAR 0 8
43039: PPUSH
43040: LD_VAR 0 9
43044: PUSH
43045: LD_VAR 0 10
43049: PLUS
43050: PPUSH
43051: CALL_OW 273
43055: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43056: LD_VAR 0 5
43060: PPUSH
43061: LD_VAR 0 7
43065: PPUSH
43066: CALL_OW 488
43070: PUSH
43071: LD_VAR 0 5
43075: PPUSH
43076: LD_VAR 0 7
43080: PPUSH
43081: CALL_OW 428
43085: PPUSH
43086: CALL_OW 247
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: IN
43101: NOT
43102: AND
43103: IFFALSE 43147
// begin ComMoveXY ( unit , _x , _y ) ;
43105: LD_VAR 0 1
43109: PPUSH
43110: LD_VAR 0 5
43114: PPUSH
43115: LD_VAR 0 7
43119: PPUSH
43120: CALL_OW 111
// result := [ _x , _y ] ;
43124: LD_ADDR_VAR 0 3
43128: PUSH
43129: LD_VAR 0 5
43133: PUSH
43134: LD_VAR 0 7
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: ST_TO_ADDR
// exit ;
43143: POP
43144: POP
43145: GO 43151
// end ; end ;
43147: GO 42991
43149: POP
43150: POP
// end ;
43151: LD_VAR 0 3
43155: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43156: LD_INT 0
43158: PPUSH
43159: PPUSH
43160: PPUSH
// result := 0 ;
43161: LD_ADDR_VAR 0 3
43165: PUSH
43166: LD_INT 0
43168: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43169: LD_VAR 0 1
43173: PUSH
43174: LD_INT 0
43176: LESS
43177: PUSH
43178: LD_VAR 0 1
43182: PUSH
43183: LD_INT 8
43185: GREATER
43186: OR
43187: PUSH
43188: LD_VAR 0 2
43192: PUSH
43193: LD_INT 0
43195: LESS
43196: OR
43197: PUSH
43198: LD_VAR 0 2
43202: PUSH
43203: LD_INT 8
43205: GREATER
43206: OR
43207: IFFALSE 43211
// exit ;
43209: GO 43286
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43211: LD_ADDR_VAR 0 4
43215: PUSH
43216: LD_INT 22
43218: PUSH
43219: LD_VAR 0 2
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PPUSH
43228: CALL_OW 69
43232: PUSH
43233: FOR_IN
43234: IFFALSE 43284
// begin un := UnitShoot ( i ) ;
43236: LD_ADDR_VAR 0 5
43240: PUSH
43241: LD_VAR 0 4
43245: PPUSH
43246: CALL_OW 504
43250: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43251: LD_VAR 0 5
43255: PPUSH
43256: CALL_OW 255
43260: PUSH
43261: LD_VAR 0 1
43265: EQUAL
43266: IFFALSE 43282
// begin result := un ;
43268: LD_ADDR_VAR 0 3
43272: PUSH
43273: LD_VAR 0 5
43277: ST_TO_ADDR
// exit ;
43278: POP
43279: POP
43280: GO 43286
// end ; end ;
43282: GO 43233
43284: POP
43285: POP
// end ;
43286: LD_VAR 0 3
43290: RET
// export function GetCargoBay ( units ) ; begin
43291: LD_INT 0
43293: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43294: LD_ADDR_VAR 0 2
43298: PUSH
43299: LD_VAR 0 1
43303: PPUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 34
43309: PUSH
43310: LD_INT 12
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 34
43319: PUSH
43320: LD_INT 51
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 34
43329: PUSH
43330: LD_INT 32
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 34
43339: PUSH
43340: LD_INT 89
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: PPUSH
43354: CALL_OW 72
43358: ST_TO_ADDR
// end ;
43359: LD_VAR 0 2
43363: RET
// export function Negate ( value ) ; begin
43364: LD_INT 0
43366: PPUSH
// result := not value ;
43367: LD_ADDR_VAR 0 2
43371: PUSH
43372: LD_VAR 0 1
43376: NOT
43377: ST_TO_ADDR
// end ;
43378: LD_VAR 0 2
43382: RET
// export function Inc ( value ) ; begin
43383: LD_INT 0
43385: PPUSH
// result := value + 1 ;
43386: LD_ADDR_VAR 0 2
43390: PUSH
43391: LD_VAR 0 1
43395: PUSH
43396: LD_INT 1
43398: PLUS
43399: ST_TO_ADDR
// end ;
43400: LD_VAR 0 2
43404: RET
// export function Dec ( value ) ; begin
43405: LD_INT 0
43407: PPUSH
// result := value - 1 ;
43408: LD_ADDR_VAR 0 2
43412: PUSH
43413: LD_VAR 0 1
43417: PUSH
43418: LD_INT 1
43420: MINUS
43421: ST_TO_ADDR
// end ;
43422: LD_VAR 0 2
43426: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43427: LD_INT 0
43429: PPUSH
43430: PPUSH
43431: PPUSH
43432: PPUSH
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43437: LD_VAR 0 1
43441: PPUSH
43442: LD_VAR 0 2
43446: PPUSH
43447: CALL_OW 488
43451: NOT
43452: PUSH
43453: LD_VAR 0 3
43457: PPUSH
43458: LD_VAR 0 4
43462: PPUSH
43463: CALL_OW 488
43467: NOT
43468: OR
43469: IFFALSE 43482
// begin result := - 1 ;
43471: LD_ADDR_VAR 0 5
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: ST_TO_ADDR
// exit ;
43480: GO 43717
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43482: LD_ADDR_VAR 0 12
43486: PUSH
43487: LD_VAR 0 1
43491: PPUSH
43492: LD_VAR 0 2
43496: PPUSH
43497: LD_VAR 0 3
43501: PPUSH
43502: LD_VAR 0 4
43506: PPUSH
43507: CALL 42567 0 4
43511: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43512: LD_ADDR_VAR 0 11
43516: PUSH
43517: LD_VAR 0 1
43521: PPUSH
43522: LD_VAR 0 2
43526: PPUSH
43527: LD_VAR 0 12
43531: PUSH
43532: LD_INT 1
43534: ARRAY
43535: PPUSH
43536: LD_VAR 0 12
43540: PUSH
43541: LD_INT 2
43543: ARRAY
43544: PPUSH
43545: CALL_OW 298
43549: ST_TO_ADDR
// distance := 9999 ;
43550: LD_ADDR_VAR 0 10
43554: PUSH
43555: LD_INT 9999
43557: ST_TO_ADDR
// for i := 0 to 5 do
43558: LD_ADDR_VAR 0 6
43562: PUSH
43563: DOUBLE
43564: LD_INT 0
43566: DEC
43567: ST_TO_ADDR
43568: LD_INT 5
43570: PUSH
43571: FOR_TO
43572: IFFALSE 43715
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43574: LD_ADDR_VAR 0 7
43578: PUSH
43579: LD_VAR 0 1
43583: PPUSH
43584: LD_VAR 0 6
43588: PPUSH
43589: LD_VAR 0 11
43593: PPUSH
43594: CALL_OW 272
43598: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43599: LD_ADDR_VAR 0 8
43603: PUSH
43604: LD_VAR 0 2
43608: PPUSH
43609: LD_VAR 0 6
43613: PPUSH
43614: LD_VAR 0 11
43618: PPUSH
43619: CALL_OW 273
43623: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43624: LD_VAR 0 7
43628: PPUSH
43629: LD_VAR 0 8
43633: PPUSH
43634: CALL_OW 488
43638: NOT
43639: IFFALSE 43643
// continue ;
43641: GO 43571
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43643: LD_ADDR_VAR 0 9
43647: PUSH
43648: LD_VAR 0 12
43652: PUSH
43653: LD_INT 1
43655: ARRAY
43656: PPUSH
43657: LD_VAR 0 12
43661: PUSH
43662: LD_INT 2
43664: ARRAY
43665: PPUSH
43666: LD_VAR 0 7
43670: PPUSH
43671: LD_VAR 0 8
43675: PPUSH
43676: CALL_OW 298
43680: ST_TO_ADDR
// if tmp < distance then
43681: LD_VAR 0 9
43685: PUSH
43686: LD_VAR 0 10
43690: LESS
43691: IFFALSE 43713
// begin result := i ;
43693: LD_ADDR_VAR 0 5
43697: PUSH
43698: LD_VAR 0 6
43702: ST_TO_ADDR
// distance := tmp ;
43703: LD_ADDR_VAR 0 10
43707: PUSH
43708: LD_VAR 0 9
43712: ST_TO_ADDR
// end ; end ;
43713: GO 43571
43715: POP
43716: POP
// end ;
43717: LD_VAR 0 5
43721: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43722: LD_INT 0
43724: PPUSH
43725: PPUSH
// if not driver or not IsInUnit ( driver ) then
43726: LD_VAR 0 1
43730: NOT
43731: PUSH
43732: LD_VAR 0 1
43736: PPUSH
43737: CALL_OW 310
43741: NOT
43742: OR
43743: IFFALSE 43747
// exit ;
43745: GO 43837
// vehicle := IsInUnit ( driver ) ;
43747: LD_ADDR_VAR 0 3
43751: PUSH
43752: LD_VAR 0 1
43756: PPUSH
43757: CALL_OW 310
43761: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43762: LD_VAR 0 1
43766: PPUSH
43767: LD_STRING \
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: PUSH
43797: LD_STRING E
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_VAR 0 3
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PPUSH
43833: CALL_OW 446
// end ;
43837: LD_VAR 0 2
43841: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43842: LD_INT 0
43844: PPUSH
43845: PPUSH
// if not driver or not IsInUnit ( driver ) then
43846: LD_VAR 0 1
43850: NOT
43851: PUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL_OW 310
43861: NOT
43862: OR
43863: IFFALSE 43867
// exit ;
43865: GO 43957
// vehicle := IsInUnit ( driver ) ;
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: CALL_OW 310
43881: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43882: LD_VAR 0 1
43886: PPUSH
43887: LD_STRING \
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: PUSH
43917: LD_STRING E
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_VAR 0 3
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PPUSH
43953: CALL_OW 447
// end ;
43957: LD_VAR 0 2
43961: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43962: LD_INT 0
43964: PPUSH
43965: PPUSH
43966: PPUSH
// tmp := [ ] ;
43967: LD_ADDR_VAR 0 5
43971: PUSH
43972: EMPTY
43973: ST_TO_ADDR
// for i in units do
43974: LD_ADDR_VAR 0 4
43978: PUSH
43979: LD_VAR 0 1
43983: PUSH
43984: FOR_IN
43985: IFFALSE 44023
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43987: LD_ADDR_VAR 0 5
43991: PUSH
43992: LD_VAR 0 5
43996: PPUSH
43997: LD_VAR 0 5
44001: PUSH
44002: LD_INT 1
44004: PLUS
44005: PPUSH
44006: LD_VAR 0 4
44010: PPUSH
44011: CALL_OW 256
44015: PPUSH
44016: CALL_OW 2
44020: ST_TO_ADDR
44021: GO 43984
44023: POP
44024: POP
// if not tmp then
44025: LD_VAR 0 5
44029: NOT
44030: IFFALSE 44034
// exit ;
44032: GO 44082
// if asc then
44034: LD_VAR 0 2
44038: IFFALSE 44062
// result := SortListByListAsc ( units , tmp ) else
44040: LD_ADDR_VAR 0 3
44044: PUSH
44045: LD_VAR 0 1
44049: PPUSH
44050: LD_VAR 0 5
44054: PPUSH
44055: CALL_OW 76
44059: ST_TO_ADDR
44060: GO 44082
// result := SortListByListDesc ( units , tmp ) ;
44062: LD_ADDR_VAR 0 3
44066: PUSH
44067: LD_VAR 0 1
44071: PPUSH
44072: LD_VAR 0 5
44076: PPUSH
44077: CALL_OW 77
44081: ST_TO_ADDR
// end ;
44082: LD_VAR 0 3
44086: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44087: LD_INT 0
44089: PPUSH
44090: PPUSH
// task := GetTaskList ( mech ) ;
44091: LD_ADDR_VAR 0 4
44095: PUSH
44096: LD_VAR 0 1
44100: PPUSH
44101: CALL_OW 437
44105: ST_TO_ADDR
// if not task then
44106: LD_VAR 0 4
44110: NOT
44111: IFFALSE 44115
// exit ;
44113: GO 44157
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44115: LD_ADDR_VAR 0 3
44119: PUSH
44120: LD_VAR 0 4
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: PUSH
44129: LD_INT 1
44131: ARRAY
44132: PUSH
44133: LD_STRING r
44135: EQUAL
44136: PUSH
44137: LD_VAR 0 4
44141: PUSH
44142: LD_INT 1
44144: ARRAY
44145: PUSH
44146: LD_INT 4
44148: ARRAY
44149: PUSH
44150: LD_VAR 0 2
44154: EQUAL
44155: AND
44156: ST_TO_ADDR
// end ;
44157: LD_VAR 0 3
44161: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44162: LD_INT 0
44164: PPUSH
// SetDir ( unit , d ) ;
44165: LD_VAR 0 1
44169: PPUSH
44170: LD_VAR 0 4
44174: PPUSH
44175: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44179: LD_VAR 0 1
44183: PPUSH
44184: LD_VAR 0 2
44188: PPUSH
44189: LD_VAR 0 3
44193: PPUSH
44194: LD_VAR 0 5
44198: PPUSH
44199: CALL_OW 48
// end ;
44203: LD_VAR 0 6
44207: RET
// export function ToNaturalNumber ( number ) ; begin
44208: LD_INT 0
44210: PPUSH
// result := number div 1 ;
44211: LD_ADDR_VAR 0 2
44215: PUSH
44216: LD_VAR 0 1
44220: PUSH
44221: LD_INT 1
44223: DIV
44224: ST_TO_ADDR
// if number < 0 then
44225: LD_VAR 0 1
44229: PUSH
44230: LD_INT 0
44232: LESS
44233: IFFALSE 44243
// result := 0 ;
44235: LD_ADDR_VAR 0 2
44239: PUSH
44240: LD_INT 0
44242: ST_TO_ADDR
// end ;
44243: LD_VAR 0 2
44247: RET
// export function SortByClass ( units , class ) ; var un ; begin
44248: LD_INT 0
44250: PPUSH
44251: PPUSH
// if not units or not class then
44252: LD_VAR 0 1
44256: NOT
44257: PUSH
44258: LD_VAR 0 2
44262: NOT
44263: OR
44264: IFFALSE 44268
// exit ;
44266: GO 44363
// result := [ ] ;
44268: LD_ADDR_VAR 0 3
44272: PUSH
44273: EMPTY
44274: ST_TO_ADDR
// for un in units do
44275: LD_ADDR_VAR 0 4
44279: PUSH
44280: LD_VAR 0 1
44284: PUSH
44285: FOR_IN
44286: IFFALSE 44361
// if GetClass ( un ) = class then
44288: LD_VAR 0 4
44292: PPUSH
44293: CALL_OW 257
44297: PUSH
44298: LD_VAR 0 2
44302: EQUAL
44303: IFFALSE 44330
// result := Insert ( result , 1 , un ) else
44305: LD_ADDR_VAR 0 3
44309: PUSH
44310: LD_VAR 0 3
44314: PPUSH
44315: LD_INT 1
44317: PPUSH
44318: LD_VAR 0 4
44322: PPUSH
44323: CALL_OW 2
44327: ST_TO_ADDR
44328: GO 44359
// result := Replace ( result , result + 1 , un ) ;
44330: LD_ADDR_VAR 0 3
44334: PUSH
44335: LD_VAR 0 3
44339: PPUSH
44340: LD_VAR 0 3
44344: PUSH
44345: LD_INT 1
44347: PLUS
44348: PPUSH
44349: LD_VAR 0 4
44353: PPUSH
44354: CALL_OW 1
44358: ST_TO_ADDR
44359: GO 44285
44361: POP
44362: POP
// end ;
44363: LD_VAR 0 3
44367: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44368: LD_INT 0
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
// result := [ ] ;
44377: LD_ADDR_VAR 0 4
44381: PUSH
44382: EMPTY
44383: ST_TO_ADDR
// if x - r < 0 then
44384: LD_VAR 0 1
44388: PUSH
44389: LD_VAR 0 3
44393: MINUS
44394: PUSH
44395: LD_INT 0
44397: LESS
44398: IFFALSE 44410
// min_x := 0 else
44400: LD_ADDR_VAR 0 8
44404: PUSH
44405: LD_INT 0
44407: ST_TO_ADDR
44408: GO 44426
// min_x := x - r ;
44410: LD_ADDR_VAR 0 8
44414: PUSH
44415: LD_VAR 0 1
44419: PUSH
44420: LD_VAR 0 3
44424: MINUS
44425: ST_TO_ADDR
// if y - r < 0 then
44426: LD_VAR 0 2
44430: PUSH
44431: LD_VAR 0 3
44435: MINUS
44436: PUSH
44437: LD_INT 0
44439: LESS
44440: IFFALSE 44452
// min_y := 0 else
44442: LD_ADDR_VAR 0 7
44446: PUSH
44447: LD_INT 0
44449: ST_TO_ADDR
44450: GO 44468
// min_y := y - r ;
44452: LD_ADDR_VAR 0 7
44456: PUSH
44457: LD_VAR 0 2
44461: PUSH
44462: LD_VAR 0 3
44466: MINUS
44467: ST_TO_ADDR
// max_x := x + r ;
44468: LD_ADDR_VAR 0 9
44472: PUSH
44473: LD_VAR 0 1
44477: PUSH
44478: LD_VAR 0 3
44482: PLUS
44483: ST_TO_ADDR
// max_y := y + r ;
44484: LD_ADDR_VAR 0 10
44488: PUSH
44489: LD_VAR 0 2
44493: PUSH
44494: LD_VAR 0 3
44498: PLUS
44499: ST_TO_ADDR
// for _x = min_x to max_x do
44500: LD_ADDR_VAR 0 5
44504: PUSH
44505: DOUBLE
44506: LD_VAR 0 8
44510: DEC
44511: ST_TO_ADDR
44512: LD_VAR 0 9
44516: PUSH
44517: FOR_TO
44518: IFFALSE 44619
// for _y = min_y to max_y do
44520: LD_ADDR_VAR 0 6
44524: PUSH
44525: DOUBLE
44526: LD_VAR 0 7
44530: DEC
44531: ST_TO_ADDR
44532: LD_VAR 0 10
44536: PUSH
44537: FOR_TO
44538: IFFALSE 44615
// begin if not ValidHex ( _x , _y ) then
44540: LD_VAR 0 5
44544: PPUSH
44545: LD_VAR 0 6
44549: PPUSH
44550: CALL_OW 488
44554: NOT
44555: IFFALSE 44559
// continue ;
44557: GO 44537
// if GetResourceTypeXY ( _x , _y ) then
44559: LD_VAR 0 5
44563: PPUSH
44564: LD_VAR 0 6
44568: PPUSH
44569: CALL_OW 283
44573: IFFALSE 44613
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44575: LD_ADDR_VAR 0 4
44579: PUSH
44580: LD_VAR 0 4
44584: PPUSH
44585: LD_VAR 0 4
44589: PUSH
44590: LD_INT 1
44592: PLUS
44593: PPUSH
44594: LD_VAR 0 5
44598: PUSH
44599: LD_VAR 0 6
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PPUSH
44608: CALL_OW 1
44612: ST_TO_ADDR
// end ;
44613: GO 44537
44615: POP
44616: POP
44617: GO 44517
44619: POP
44620: POP
// end ;
44621: LD_VAR 0 4
44625: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44626: LD_INT 0
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
// if not units then
44636: LD_VAR 0 1
44640: NOT
44641: IFFALSE 44645
// exit ;
44643: GO 45169
// result := UnitFilter ( units , [ f_ok ] ) ;
44645: LD_ADDR_VAR 0 3
44649: PUSH
44650: LD_VAR 0 1
44654: PPUSH
44655: LD_INT 50
44657: PUSH
44658: EMPTY
44659: LIST
44660: PPUSH
44661: CALL_OW 72
44665: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44666: LD_ADDR_VAR 0 8
44670: PUSH
44671: LD_VAR 0 1
44675: PUSH
44676: LD_INT 1
44678: ARRAY
44679: PPUSH
44680: CALL_OW 255
44684: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44685: LD_ADDR_VAR 0 10
44689: PUSH
44690: LD_INT 29
44692: PUSH
44693: LD_INT 91
44695: PUSH
44696: LD_INT 49
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
// if not result then
44704: LD_VAR 0 3
44708: NOT
44709: IFFALSE 44713
// exit ;
44711: GO 45169
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44713: LD_ADDR_VAR 0 5
44717: PUSH
44718: LD_INT 81
44720: PUSH
44721: LD_VAR 0 8
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PPUSH
44730: CALL_OW 69
44734: ST_TO_ADDR
// for i in result do
44735: LD_ADDR_VAR 0 4
44739: PUSH
44740: LD_VAR 0 3
44744: PUSH
44745: FOR_IN
44746: IFFALSE 45167
// begin tag := GetTag ( i ) + 1 ;
44748: LD_ADDR_VAR 0 9
44752: PUSH
44753: LD_VAR 0 4
44757: PPUSH
44758: CALL_OW 110
44762: PUSH
44763: LD_INT 1
44765: PLUS
44766: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44767: LD_ADDR_VAR 0 7
44771: PUSH
44772: LD_VAR 0 4
44776: PPUSH
44777: CALL_OW 250
44781: PPUSH
44782: LD_VAR 0 4
44786: PPUSH
44787: CALL_OW 251
44791: PPUSH
44792: LD_INT 6
44794: PPUSH
44795: CALL 44368 0 3
44799: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44800: LD_VAR 0 4
44804: PPUSH
44805: CALL_OW 247
44809: PUSH
44810: LD_INT 2
44812: EQUAL
44813: PUSH
44814: LD_VAR 0 7
44818: AND
44819: PUSH
44820: LD_VAR 0 4
44824: PPUSH
44825: CALL_OW 264
44829: PUSH
44830: LD_VAR 0 10
44834: IN
44835: NOT
44836: AND
44837: IFFALSE 44876
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44839: LD_VAR 0 4
44843: PPUSH
44844: LD_VAR 0 7
44848: PUSH
44849: LD_INT 1
44851: ARRAY
44852: PUSH
44853: LD_INT 1
44855: ARRAY
44856: PPUSH
44857: LD_VAR 0 7
44861: PUSH
44862: LD_INT 1
44864: ARRAY
44865: PUSH
44866: LD_INT 2
44868: ARRAY
44869: PPUSH
44870: CALL_OW 116
44874: GO 45165
// if path > tag then
44876: LD_VAR 0 2
44880: PUSH
44881: LD_VAR 0 9
44885: GREATER
44886: IFFALSE 45094
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44888: LD_ADDR_VAR 0 6
44892: PUSH
44893: LD_VAR 0 5
44897: PPUSH
44898: LD_INT 91
44900: PUSH
44901: LD_VAR 0 4
44905: PUSH
44906: LD_INT 8
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: PPUSH
44914: CALL_OW 72
44918: ST_TO_ADDR
// if nearEnemy then
44919: LD_VAR 0 6
44923: IFFALSE 44992
// begin if GetWeapon ( i ) = ru_time_lapser then
44925: LD_VAR 0 4
44929: PPUSH
44930: CALL_OW 264
44934: PUSH
44935: LD_INT 49
44937: EQUAL
44938: IFFALSE 44966
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44940: LD_VAR 0 4
44944: PPUSH
44945: LD_VAR 0 6
44949: PPUSH
44950: LD_VAR 0 4
44954: PPUSH
44955: CALL_OW 74
44959: PPUSH
44960: CALL_OW 112
44964: GO 44990
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44966: LD_VAR 0 4
44970: PPUSH
44971: LD_VAR 0 6
44975: PPUSH
44976: LD_VAR 0 4
44980: PPUSH
44981: CALL_OW 74
44985: PPUSH
44986: CALL 46094 0 2
// end else
44990: GO 45092
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44992: LD_VAR 0 4
44996: PPUSH
44997: LD_VAR 0 2
45001: PUSH
45002: LD_VAR 0 9
45006: ARRAY
45007: PUSH
45008: LD_INT 1
45010: ARRAY
45011: PPUSH
45012: LD_VAR 0 2
45016: PUSH
45017: LD_VAR 0 9
45021: ARRAY
45022: PUSH
45023: LD_INT 2
45025: ARRAY
45026: PPUSH
45027: CALL_OW 297
45031: PUSH
45032: LD_INT 6
45034: GREATER
45035: IFFALSE 45078
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45037: LD_VAR 0 4
45041: PPUSH
45042: LD_VAR 0 2
45046: PUSH
45047: LD_VAR 0 9
45051: ARRAY
45052: PUSH
45053: LD_INT 1
45055: ARRAY
45056: PPUSH
45057: LD_VAR 0 2
45061: PUSH
45062: LD_VAR 0 9
45066: ARRAY
45067: PUSH
45068: LD_INT 2
45070: ARRAY
45071: PPUSH
45072: CALL_OW 114
45076: GO 45092
// SetTag ( i , tag ) ;
45078: LD_VAR 0 4
45082: PPUSH
45083: LD_VAR 0 9
45087: PPUSH
45088: CALL_OW 109
// end else
45092: GO 45165
// if enemy then
45094: LD_VAR 0 5
45098: IFFALSE 45165
// begin if GetWeapon ( i ) = ru_time_lapser then
45100: LD_VAR 0 4
45104: PPUSH
45105: CALL_OW 264
45109: PUSH
45110: LD_INT 49
45112: EQUAL
45113: IFFALSE 45141
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45115: LD_VAR 0 4
45119: PPUSH
45120: LD_VAR 0 5
45124: PPUSH
45125: LD_VAR 0 4
45129: PPUSH
45130: CALL_OW 74
45134: PPUSH
45135: CALL_OW 112
45139: GO 45165
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45141: LD_VAR 0 4
45145: PPUSH
45146: LD_VAR 0 5
45150: PPUSH
45151: LD_VAR 0 4
45155: PPUSH
45156: CALL_OW 74
45160: PPUSH
45161: CALL 46094 0 2
// end ; end ;
45165: GO 44745
45167: POP
45168: POP
// end ;
45169: LD_VAR 0 3
45173: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45174: LD_INT 0
45176: PPUSH
45177: PPUSH
45178: PPUSH
// if not unit or IsInUnit ( unit ) then
45179: LD_VAR 0 1
45183: NOT
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 310
45194: OR
45195: IFFALSE 45199
// exit ;
45197: GO 45290
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45199: LD_ADDR_VAR 0 4
45203: PUSH
45204: LD_VAR 0 1
45208: PPUSH
45209: CALL_OW 250
45213: PPUSH
45214: LD_VAR 0 2
45218: PPUSH
45219: LD_INT 1
45221: PPUSH
45222: CALL_OW 272
45226: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45227: LD_ADDR_VAR 0 5
45231: PUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 251
45241: PPUSH
45242: LD_VAR 0 2
45246: PPUSH
45247: LD_INT 1
45249: PPUSH
45250: CALL_OW 273
45254: ST_TO_ADDR
// if ValidHex ( x , y ) then
45255: LD_VAR 0 4
45259: PPUSH
45260: LD_VAR 0 5
45264: PPUSH
45265: CALL_OW 488
45269: IFFALSE 45290
// ComTurnXY ( unit , x , y ) ;
45271: LD_VAR 0 1
45275: PPUSH
45276: LD_VAR 0 4
45280: PPUSH
45281: LD_VAR 0 5
45285: PPUSH
45286: CALL_OW 118
// end ;
45290: LD_VAR 0 3
45294: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45295: LD_INT 0
45297: PPUSH
45298: PPUSH
// result := false ;
45299: LD_ADDR_VAR 0 3
45303: PUSH
45304: LD_INT 0
45306: ST_TO_ADDR
// if not units then
45307: LD_VAR 0 2
45311: NOT
45312: IFFALSE 45316
// exit ;
45314: GO 45361
// for i in units do
45316: LD_ADDR_VAR 0 4
45320: PUSH
45321: LD_VAR 0 2
45325: PUSH
45326: FOR_IN
45327: IFFALSE 45359
// if See ( side , i ) then
45329: LD_VAR 0 1
45333: PPUSH
45334: LD_VAR 0 4
45338: PPUSH
45339: CALL_OW 292
45343: IFFALSE 45357
// begin result := true ;
45345: LD_ADDR_VAR 0 3
45349: PUSH
45350: LD_INT 1
45352: ST_TO_ADDR
// exit ;
45353: POP
45354: POP
45355: GO 45361
// end ;
45357: GO 45326
45359: POP
45360: POP
// end ;
45361: LD_VAR 0 3
45365: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45366: LD_INT 0
45368: PPUSH
45369: PPUSH
45370: PPUSH
45371: PPUSH
// if not unit or not points then
45372: LD_VAR 0 1
45376: NOT
45377: PUSH
45378: LD_VAR 0 2
45382: NOT
45383: OR
45384: IFFALSE 45388
// exit ;
45386: GO 45478
// dist := 99999 ;
45388: LD_ADDR_VAR 0 5
45392: PUSH
45393: LD_INT 99999
45395: ST_TO_ADDR
// for i in points do
45396: LD_ADDR_VAR 0 4
45400: PUSH
45401: LD_VAR 0 2
45405: PUSH
45406: FOR_IN
45407: IFFALSE 45476
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45409: LD_ADDR_VAR 0 6
45413: PUSH
45414: LD_VAR 0 1
45418: PPUSH
45419: LD_VAR 0 4
45423: PUSH
45424: LD_INT 1
45426: ARRAY
45427: PPUSH
45428: LD_VAR 0 4
45432: PUSH
45433: LD_INT 2
45435: ARRAY
45436: PPUSH
45437: CALL_OW 297
45441: ST_TO_ADDR
// if tmpDist < dist then
45442: LD_VAR 0 6
45446: PUSH
45447: LD_VAR 0 5
45451: LESS
45452: IFFALSE 45474
// begin result := i ;
45454: LD_ADDR_VAR 0 3
45458: PUSH
45459: LD_VAR 0 4
45463: ST_TO_ADDR
// dist := tmpDist ;
45464: LD_ADDR_VAR 0 5
45468: PUSH
45469: LD_VAR 0 6
45473: ST_TO_ADDR
// end ; end ;
45474: GO 45406
45476: POP
45477: POP
// end ;
45478: LD_VAR 0 3
45482: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45483: LD_INT 0
45485: PPUSH
// uc_side := side ;
45486: LD_ADDR_OWVAR 20
45490: PUSH
45491: LD_VAR 0 1
45495: ST_TO_ADDR
// uc_nation := 3 ;
45496: LD_ADDR_OWVAR 21
45500: PUSH
45501: LD_INT 3
45503: ST_TO_ADDR
// vc_chassis := 25 ;
45504: LD_ADDR_OWVAR 37
45508: PUSH
45509: LD_INT 25
45511: ST_TO_ADDR
// vc_engine := engine_siberite ;
45512: LD_ADDR_OWVAR 39
45516: PUSH
45517: LD_INT 3
45519: ST_TO_ADDR
// vc_control := control_computer ;
45520: LD_ADDR_OWVAR 38
45524: PUSH
45525: LD_INT 3
45527: ST_TO_ADDR
// vc_weapon := 59 ;
45528: LD_ADDR_OWVAR 40
45532: PUSH
45533: LD_INT 59
45535: ST_TO_ADDR
// result := CreateVehicle ;
45536: LD_ADDR_VAR 0 5
45540: PUSH
45541: CALL_OW 45
45545: ST_TO_ADDR
// SetDir ( result , d ) ;
45546: LD_VAR 0 5
45550: PPUSH
45551: LD_VAR 0 4
45555: PPUSH
45556: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45560: LD_VAR 0 5
45564: PPUSH
45565: LD_VAR 0 2
45569: PPUSH
45570: LD_VAR 0 3
45574: PPUSH
45575: LD_INT 0
45577: PPUSH
45578: CALL_OW 48
// end ;
45582: LD_VAR 0 5
45586: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45587: LD_INT 0
45589: PPUSH
45590: PPUSH
45591: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45592: LD_ADDR_VAR 0 2
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45615: LD_VAR 0 1
45619: NOT
45620: PUSH
45621: LD_VAR 0 1
45625: PPUSH
45626: CALL_OW 264
45630: PUSH
45631: LD_INT 12
45633: PUSH
45634: LD_INT 51
45636: PUSH
45637: LD_INT 32
45639: PUSH
45640: LD_INT 89
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: IN
45649: NOT
45650: OR
45651: IFFALSE 45655
// exit ;
45653: GO 45753
// for i := 1 to 3 do
45655: LD_ADDR_VAR 0 3
45659: PUSH
45660: DOUBLE
45661: LD_INT 1
45663: DEC
45664: ST_TO_ADDR
45665: LD_INT 3
45667: PUSH
45668: FOR_TO
45669: IFFALSE 45751
// begin tmp := GetCargo ( cargo , i ) ;
45671: LD_ADDR_VAR 0 4
45675: PUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: LD_VAR 0 3
45685: PPUSH
45686: CALL_OW 289
45690: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45691: LD_ADDR_VAR 0 2
45695: PUSH
45696: LD_VAR 0 2
45700: PPUSH
45701: LD_VAR 0 3
45705: PPUSH
45706: LD_VAR 0 4
45710: PPUSH
45711: CALL_OW 1
45715: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45716: LD_ADDR_VAR 0 2
45720: PUSH
45721: LD_VAR 0 2
45725: PPUSH
45726: LD_INT 4
45728: PPUSH
45729: LD_VAR 0 2
45733: PUSH
45734: LD_INT 4
45736: ARRAY
45737: PUSH
45738: LD_VAR 0 4
45742: PLUS
45743: PPUSH
45744: CALL_OW 1
45748: ST_TO_ADDR
// end ;
45749: GO 45668
45751: POP
45752: POP
// end ;
45753: LD_VAR 0 2
45757: RET
// export function Length ( array ) ; begin
45758: LD_INT 0
45760: PPUSH
// result := array + 0 ;
45761: LD_ADDR_VAR 0 2
45765: PUSH
45766: LD_VAR 0 1
45770: PUSH
45771: LD_INT 0
45773: PLUS
45774: ST_TO_ADDR
// end ;
45775: LD_VAR 0 2
45779: RET
// export function PrepareArray ( array ) ; begin
45780: LD_INT 0
45782: PPUSH
// result := array diff 0 ;
45783: LD_ADDR_VAR 0 2
45787: PUSH
45788: LD_VAR 0 1
45792: PUSH
45793: LD_INT 0
45795: DIFF
45796: ST_TO_ADDR
// if not result [ 1 ] then
45797: LD_VAR 0 2
45801: PUSH
45802: LD_INT 1
45804: ARRAY
45805: NOT
45806: IFFALSE 45826
// result := Delete ( result , 1 ) ;
45808: LD_ADDR_VAR 0 2
45812: PUSH
45813: LD_VAR 0 2
45817: PPUSH
45818: LD_INT 1
45820: PPUSH
45821: CALL_OW 3
45825: ST_TO_ADDR
// end ;
45826: LD_VAR 0 2
45830: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45831: LD_INT 0
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
// sibRocketRange := 25 ;
45837: LD_ADDR_VAR 0 6
45841: PUSH
45842: LD_INT 25
45844: ST_TO_ADDR
// result := false ;
45845: LD_ADDR_VAR 0 4
45849: PUSH
45850: LD_INT 0
45852: ST_TO_ADDR
// for i := 0 to 5 do
45853: LD_ADDR_VAR 0 5
45857: PUSH
45858: DOUBLE
45859: LD_INT 0
45861: DEC
45862: ST_TO_ADDR
45863: LD_INT 5
45865: PUSH
45866: FOR_TO
45867: IFFALSE 45934
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45869: LD_VAR 0 1
45873: PPUSH
45874: LD_VAR 0 5
45878: PPUSH
45879: LD_VAR 0 6
45883: PPUSH
45884: CALL_OW 272
45888: PPUSH
45889: LD_VAR 0 2
45893: PPUSH
45894: LD_VAR 0 5
45898: PPUSH
45899: LD_VAR 0 6
45903: PPUSH
45904: CALL_OW 273
45908: PPUSH
45909: LD_VAR 0 3
45913: PPUSH
45914: CALL_OW 309
45918: IFFALSE 45932
// begin result := true ;
45920: LD_ADDR_VAR 0 4
45924: PUSH
45925: LD_INT 1
45927: ST_TO_ADDR
// exit ;
45928: POP
45929: POP
45930: GO 45936
// end ;
45932: GO 45866
45934: POP
45935: POP
// end ;
45936: LD_VAR 0 4
45940: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45941: LD_INT 0
45943: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45944: LD_VAR 0 1
45948: PPUSH
45949: LD_VAR 0 2
45953: PPUSH
45954: LD_INT 0
45956: PPUSH
45957: LD_INT 0
45959: PPUSH
45960: LD_INT 1
45962: PPUSH
45963: LD_INT 0
45965: PPUSH
45966: CALL_OW 587
// end ;
45970: LD_VAR 0 3
45974: RET
// export function CenterOnNow ( unit ) ; begin
45975: LD_INT 0
45977: PPUSH
// result := IsInUnit ( unit ) ;
45978: LD_ADDR_VAR 0 2
45982: PUSH
45983: LD_VAR 0 1
45987: PPUSH
45988: CALL_OW 310
45992: ST_TO_ADDR
// if not result then
45993: LD_VAR 0 2
45997: NOT
45998: IFFALSE 46010
// result := unit ;
46000: LD_ADDR_VAR 0 2
46004: PUSH
46005: LD_VAR 0 1
46009: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46010: LD_VAR 0 1
46014: PPUSH
46015: CALL_OW 87
// end ;
46019: LD_VAR 0 2
46023: RET
// export function ComMoveHex ( unit , hex ) ; begin
46024: LD_INT 0
46026: PPUSH
// if not hex then
46027: LD_VAR 0 2
46031: NOT
46032: IFFALSE 46036
// exit ;
46034: GO 46089
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46036: LD_VAR 0 2
46040: PUSH
46041: LD_INT 1
46043: ARRAY
46044: PPUSH
46045: LD_VAR 0 2
46049: PUSH
46050: LD_INT 2
46052: ARRAY
46053: PPUSH
46054: CALL_OW 428
46058: IFFALSE 46062
// exit ;
46060: GO 46089
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46062: LD_VAR 0 1
46066: PPUSH
46067: LD_VAR 0 2
46071: PUSH
46072: LD_INT 1
46074: ARRAY
46075: PPUSH
46076: LD_VAR 0 2
46080: PUSH
46081: LD_INT 2
46083: ARRAY
46084: PPUSH
46085: CALL_OW 111
// end ;
46089: LD_VAR 0 3
46093: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46094: LD_INT 0
46096: PPUSH
46097: PPUSH
46098: PPUSH
// if not unit or not enemy then
46099: LD_VAR 0 1
46103: NOT
46104: PUSH
46105: LD_VAR 0 2
46109: NOT
46110: OR
46111: IFFALSE 46115
// exit ;
46113: GO 46239
// x := GetX ( enemy ) ;
46115: LD_ADDR_VAR 0 4
46119: PUSH
46120: LD_VAR 0 2
46124: PPUSH
46125: CALL_OW 250
46129: ST_TO_ADDR
// y := GetY ( enemy ) ;
46130: LD_ADDR_VAR 0 5
46134: PUSH
46135: LD_VAR 0 2
46139: PPUSH
46140: CALL_OW 251
46144: ST_TO_ADDR
// if ValidHex ( x , y ) then
46145: LD_VAR 0 4
46149: PPUSH
46150: LD_VAR 0 5
46154: PPUSH
46155: CALL_OW 488
46159: IFFALSE 46239
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
46161: LD_VAR 0 2
46165: PPUSH
46166: CALL_OW 247
46170: PUSH
46171: LD_INT 3
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: IN
46181: PUSH
46182: LD_VAR 0 1
46186: PPUSH
46187: CALL_OW 255
46191: PPUSH
46192: LD_VAR 0 2
46196: PPUSH
46197: CALL_OW 292
46201: AND
46202: IFFALSE 46220
// ComAttackUnit ( unit , enemy ) else
46204: LD_VAR 0 1
46208: PPUSH
46209: LD_VAR 0 2
46213: PPUSH
46214: CALL_OW 115
46218: GO 46239
// ComAgressiveMove ( unit , x , y ) ;
46220: LD_VAR 0 1
46224: PPUSH
46225: LD_VAR 0 4
46229: PPUSH
46230: LD_VAR 0 5
46234: PPUSH
46235: CALL_OW 114
// end ; end_of_file end_of_file
46239: LD_VAR 0 3
46243: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
46244: LD_VAR 0 1
46248: PPUSH
46249: LD_VAR 0 2
46253: PPUSH
46254: LD_VAR 0 3
46258: PPUSH
46259: LD_VAR 0 4
46263: PPUSH
46264: LD_VAR 0 5
46268: PPUSH
46269: LD_VAR 0 6
46273: PPUSH
46274: CALL 46458 0 6
// end ;
46278: PPOPN 6
46280: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
46281: LD_INT 0
46283: PPUSH
// begin if not units then
46284: LD_VAR 0 1
46288: NOT
46289: IFFALSE 46293
// exit ;
46291: GO 46293
// end ;
46293: PPOPN 7
46295: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
46296: CALL 46362 0 0
// end ; end_of_file
46300: PPOPN 1
46302: END
// export globalGameSaveCounter ; every 0 0$1 do
46303: GO 46305
46305: DISABLE
// begin enable ;
46306: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46307: LD_STRING updateTimer(
46309: PUSH
46310: LD_OWVAR 1
46314: STR
46315: PUSH
46316: LD_STRING );
46318: STR
46319: PPUSH
46320: CALL_OW 559
// end ;
46324: END
// every 0 0$1 do
46325: GO 46327
46327: DISABLE
// begin globalGameSaveCounter := 0 ;
46328: LD_ADDR_EXP 27
46332: PUSH
46333: LD_INT 0
46335: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
46336: LD_STRING setGameSaveCounter(0)
46338: PPUSH
46339: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
46343: LD_STRING initStreamRollete();
46345: PPUSH
46346: CALL_OW 559
// InitStreamMode ;
46350: CALL 47676 0 0
// DefineStreamItems ( false ) ;
46354: LD_INT 0
46356: PPUSH
46357: CALL 48140 0 1
// end ;
46361: END
// export function SOS_MapStart ( ) ; begin
46362: LD_INT 0
46364: PPUSH
// if streamModeActive then
46365: LD_EXP 28
46369: IFFALSE 46378
// DefineStreamItems ( true ) ;
46371: LD_INT 1
46373: PPUSH
46374: CALL 48140 0 1
// UpdateLuaVariables ( ) ;
46378: CALL 46395 0 0
// UpdateFactoryWaypoints ( ) ;
46382: CALL 61009 0 0
// UpdateWarehouseGatheringPoints ( ) ;
46386: CALL 61266 0 0
// end ;
46390: LD_VAR 0 1
46394: RET
// function UpdateLuaVariables ( ) ; begin
46395: LD_INT 0
46397: PPUSH
// if globalGameSaveCounter then
46398: LD_EXP 27
46402: IFFALSE 46436
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
46404: LD_ADDR_EXP 27
46408: PUSH
46409: LD_EXP 27
46413: PPUSH
46414: CALL 43383 0 1
46418: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46419: LD_STRING setGameSaveCounter(
46421: PUSH
46422: LD_EXP 27
46426: STR
46427: PUSH
46428: LD_STRING )
46430: STR
46431: PPUSH
46432: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46436: LD_STRING setGameDifficulty(
46438: PUSH
46439: LD_OWVAR 67
46443: STR
46444: PUSH
46445: LD_STRING )
46447: STR
46448: PPUSH
46449: CALL_OW 559
// end ;
46453: LD_VAR 0 1
46457: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46458: LD_INT 0
46460: PPUSH
// if p2 = stream_mode then
46461: LD_VAR 0 2
46465: PUSH
46466: LD_INT 100
46468: EQUAL
46469: IFFALSE 47472
// begin if not StreamModeActive then
46471: LD_EXP 28
46475: NOT
46476: IFFALSE 46486
// StreamModeActive := true ;
46478: LD_ADDR_EXP 28
46482: PUSH
46483: LD_INT 1
46485: ST_TO_ADDR
// if p3 = 0 then
46486: LD_VAR 0 3
46490: PUSH
46491: LD_INT 0
46493: EQUAL
46494: IFFALSE 46500
// InitStreamMode ;
46496: CALL 47676 0 0
// if p3 = 1 then
46500: LD_VAR 0 3
46504: PUSH
46505: LD_INT 1
46507: EQUAL
46508: IFFALSE 46518
// sRocket := true ;
46510: LD_ADDR_EXP 33
46514: PUSH
46515: LD_INT 1
46517: ST_TO_ADDR
// if p3 = 2 then
46518: LD_VAR 0 3
46522: PUSH
46523: LD_INT 2
46525: EQUAL
46526: IFFALSE 46536
// sSpeed := true ;
46528: LD_ADDR_EXP 32
46532: PUSH
46533: LD_INT 1
46535: ST_TO_ADDR
// if p3 = 3 then
46536: LD_VAR 0 3
46540: PUSH
46541: LD_INT 3
46543: EQUAL
46544: IFFALSE 46554
// sEngine := true ;
46546: LD_ADDR_EXP 34
46550: PUSH
46551: LD_INT 1
46553: ST_TO_ADDR
// if p3 = 4 then
46554: LD_VAR 0 3
46558: PUSH
46559: LD_INT 4
46561: EQUAL
46562: IFFALSE 46572
// sSpec := true ;
46564: LD_ADDR_EXP 31
46568: PUSH
46569: LD_INT 1
46571: ST_TO_ADDR
// if p3 = 5 then
46572: LD_VAR 0 3
46576: PUSH
46577: LD_INT 5
46579: EQUAL
46580: IFFALSE 46590
// sLevel := true ;
46582: LD_ADDR_EXP 35
46586: PUSH
46587: LD_INT 1
46589: ST_TO_ADDR
// if p3 = 6 then
46590: LD_VAR 0 3
46594: PUSH
46595: LD_INT 6
46597: EQUAL
46598: IFFALSE 46608
// sArmoury := true ;
46600: LD_ADDR_EXP 36
46604: PUSH
46605: LD_INT 1
46607: ST_TO_ADDR
// if p3 = 7 then
46608: LD_VAR 0 3
46612: PUSH
46613: LD_INT 7
46615: EQUAL
46616: IFFALSE 46626
// sRadar := true ;
46618: LD_ADDR_EXP 37
46622: PUSH
46623: LD_INT 1
46625: ST_TO_ADDR
// if p3 = 8 then
46626: LD_VAR 0 3
46630: PUSH
46631: LD_INT 8
46633: EQUAL
46634: IFFALSE 46644
// sBunker := true ;
46636: LD_ADDR_EXP 38
46640: PUSH
46641: LD_INT 1
46643: ST_TO_ADDR
// if p3 = 9 then
46644: LD_VAR 0 3
46648: PUSH
46649: LD_INT 9
46651: EQUAL
46652: IFFALSE 46662
// sHack := true ;
46654: LD_ADDR_EXP 39
46658: PUSH
46659: LD_INT 1
46661: ST_TO_ADDR
// if p3 = 10 then
46662: LD_VAR 0 3
46666: PUSH
46667: LD_INT 10
46669: EQUAL
46670: IFFALSE 46680
// sFire := true ;
46672: LD_ADDR_EXP 40
46676: PUSH
46677: LD_INT 1
46679: ST_TO_ADDR
// if p3 = 11 then
46680: LD_VAR 0 3
46684: PUSH
46685: LD_INT 11
46687: EQUAL
46688: IFFALSE 46698
// sRefresh := true ;
46690: LD_ADDR_EXP 41
46694: PUSH
46695: LD_INT 1
46697: ST_TO_ADDR
// if p3 = 12 then
46698: LD_VAR 0 3
46702: PUSH
46703: LD_INT 12
46705: EQUAL
46706: IFFALSE 46716
// sExp := true ;
46708: LD_ADDR_EXP 42
46712: PUSH
46713: LD_INT 1
46715: ST_TO_ADDR
// if p3 = 13 then
46716: LD_VAR 0 3
46720: PUSH
46721: LD_INT 13
46723: EQUAL
46724: IFFALSE 46734
// sDepot := true ;
46726: LD_ADDR_EXP 43
46730: PUSH
46731: LD_INT 1
46733: ST_TO_ADDR
// if p3 = 14 then
46734: LD_VAR 0 3
46738: PUSH
46739: LD_INT 14
46741: EQUAL
46742: IFFALSE 46752
// sFlag := true ;
46744: LD_ADDR_EXP 44
46748: PUSH
46749: LD_INT 1
46751: ST_TO_ADDR
// if p3 = 15 then
46752: LD_VAR 0 3
46756: PUSH
46757: LD_INT 15
46759: EQUAL
46760: IFFALSE 46770
// sKamikadze := true ;
46762: LD_ADDR_EXP 52
46766: PUSH
46767: LD_INT 1
46769: ST_TO_ADDR
// if p3 = 16 then
46770: LD_VAR 0 3
46774: PUSH
46775: LD_INT 16
46777: EQUAL
46778: IFFALSE 46788
// sTroll := true ;
46780: LD_ADDR_EXP 53
46784: PUSH
46785: LD_INT 1
46787: ST_TO_ADDR
// if p3 = 17 then
46788: LD_VAR 0 3
46792: PUSH
46793: LD_INT 17
46795: EQUAL
46796: IFFALSE 46806
// sSlow := true ;
46798: LD_ADDR_EXP 54
46802: PUSH
46803: LD_INT 1
46805: ST_TO_ADDR
// if p3 = 18 then
46806: LD_VAR 0 3
46810: PUSH
46811: LD_INT 18
46813: EQUAL
46814: IFFALSE 46824
// sLack := true ;
46816: LD_ADDR_EXP 55
46820: PUSH
46821: LD_INT 1
46823: ST_TO_ADDR
// if p3 = 19 then
46824: LD_VAR 0 3
46828: PUSH
46829: LD_INT 19
46831: EQUAL
46832: IFFALSE 46842
// sTank := true ;
46834: LD_ADDR_EXP 57
46838: PUSH
46839: LD_INT 1
46841: ST_TO_ADDR
// if p3 = 20 then
46842: LD_VAR 0 3
46846: PUSH
46847: LD_INT 20
46849: EQUAL
46850: IFFALSE 46860
// sRemote := true ;
46852: LD_ADDR_EXP 58
46856: PUSH
46857: LD_INT 1
46859: ST_TO_ADDR
// if p3 = 21 then
46860: LD_VAR 0 3
46864: PUSH
46865: LD_INT 21
46867: EQUAL
46868: IFFALSE 46878
// sPowell := true ;
46870: LD_ADDR_EXP 59
46874: PUSH
46875: LD_INT 1
46877: ST_TO_ADDR
// if p3 = 22 then
46878: LD_VAR 0 3
46882: PUSH
46883: LD_INT 22
46885: EQUAL
46886: IFFALSE 46896
// sTeleport := true ;
46888: LD_ADDR_EXP 62
46892: PUSH
46893: LD_INT 1
46895: ST_TO_ADDR
// if p3 = 23 then
46896: LD_VAR 0 3
46900: PUSH
46901: LD_INT 23
46903: EQUAL
46904: IFFALSE 46914
// sOilTower := true ;
46906: LD_ADDR_EXP 64
46910: PUSH
46911: LD_INT 1
46913: ST_TO_ADDR
// if p3 = 24 then
46914: LD_VAR 0 3
46918: PUSH
46919: LD_INT 24
46921: EQUAL
46922: IFFALSE 46932
// sShovel := true ;
46924: LD_ADDR_EXP 65
46928: PUSH
46929: LD_INT 1
46931: ST_TO_ADDR
// if p3 = 25 then
46932: LD_VAR 0 3
46936: PUSH
46937: LD_INT 25
46939: EQUAL
46940: IFFALSE 46950
// sSheik := true ;
46942: LD_ADDR_EXP 66
46946: PUSH
46947: LD_INT 1
46949: ST_TO_ADDR
// if p3 = 26 then
46950: LD_VAR 0 3
46954: PUSH
46955: LD_INT 26
46957: EQUAL
46958: IFFALSE 46968
// sEarthquake := true ;
46960: LD_ADDR_EXP 68
46964: PUSH
46965: LD_INT 1
46967: ST_TO_ADDR
// if p3 = 27 then
46968: LD_VAR 0 3
46972: PUSH
46973: LD_INT 27
46975: EQUAL
46976: IFFALSE 46986
// sAI := true ;
46978: LD_ADDR_EXP 69
46982: PUSH
46983: LD_INT 1
46985: ST_TO_ADDR
// if p3 = 28 then
46986: LD_VAR 0 3
46990: PUSH
46991: LD_INT 28
46993: EQUAL
46994: IFFALSE 47004
// sCargo := true ;
46996: LD_ADDR_EXP 72
47000: PUSH
47001: LD_INT 1
47003: ST_TO_ADDR
// if p3 = 29 then
47004: LD_VAR 0 3
47008: PUSH
47009: LD_INT 29
47011: EQUAL
47012: IFFALSE 47022
// sDLaser := true ;
47014: LD_ADDR_EXP 73
47018: PUSH
47019: LD_INT 1
47021: ST_TO_ADDR
// if p3 = 30 then
47022: LD_VAR 0 3
47026: PUSH
47027: LD_INT 30
47029: EQUAL
47030: IFFALSE 47040
// sExchange := true ;
47032: LD_ADDR_EXP 74
47036: PUSH
47037: LD_INT 1
47039: ST_TO_ADDR
// if p3 = 31 then
47040: LD_VAR 0 3
47044: PUSH
47045: LD_INT 31
47047: EQUAL
47048: IFFALSE 47058
// sFac := true ;
47050: LD_ADDR_EXP 75
47054: PUSH
47055: LD_INT 1
47057: ST_TO_ADDR
// if p3 = 32 then
47058: LD_VAR 0 3
47062: PUSH
47063: LD_INT 32
47065: EQUAL
47066: IFFALSE 47076
// sPower := true ;
47068: LD_ADDR_EXP 76
47072: PUSH
47073: LD_INT 1
47075: ST_TO_ADDR
// if p3 = 33 then
47076: LD_VAR 0 3
47080: PUSH
47081: LD_INT 33
47083: EQUAL
47084: IFFALSE 47094
// sRandom := true ;
47086: LD_ADDR_EXP 77
47090: PUSH
47091: LD_INT 1
47093: ST_TO_ADDR
// if p3 = 34 then
47094: LD_VAR 0 3
47098: PUSH
47099: LD_INT 34
47101: EQUAL
47102: IFFALSE 47112
// sShield := true ;
47104: LD_ADDR_EXP 78
47108: PUSH
47109: LD_INT 1
47111: ST_TO_ADDR
// if p3 = 35 then
47112: LD_VAR 0 3
47116: PUSH
47117: LD_INT 35
47119: EQUAL
47120: IFFALSE 47130
// sTime := true ;
47122: LD_ADDR_EXP 79
47126: PUSH
47127: LD_INT 1
47129: ST_TO_ADDR
// if p3 = 36 then
47130: LD_VAR 0 3
47134: PUSH
47135: LD_INT 36
47137: EQUAL
47138: IFFALSE 47148
// sTools := true ;
47140: LD_ADDR_EXP 80
47144: PUSH
47145: LD_INT 1
47147: ST_TO_ADDR
// if p3 = 101 then
47148: LD_VAR 0 3
47152: PUSH
47153: LD_INT 101
47155: EQUAL
47156: IFFALSE 47166
// sSold := true ;
47158: LD_ADDR_EXP 45
47162: PUSH
47163: LD_INT 1
47165: ST_TO_ADDR
// if p3 = 102 then
47166: LD_VAR 0 3
47170: PUSH
47171: LD_INT 102
47173: EQUAL
47174: IFFALSE 47184
// sDiff := true ;
47176: LD_ADDR_EXP 46
47180: PUSH
47181: LD_INT 1
47183: ST_TO_ADDR
// if p3 = 103 then
47184: LD_VAR 0 3
47188: PUSH
47189: LD_INT 103
47191: EQUAL
47192: IFFALSE 47202
// sFog := true ;
47194: LD_ADDR_EXP 49
47198: PUSH
47199: LD_INT 1
47201: ST_TO_ADDR
// if p3 = 104 then
47202: LD_VAR 0 3
47206: PUSH
47207: LD_INT 104
47209: EQUAL
47210: IFFALSE 47220
// sReset := true ;
47212: LD_ADDR_EXP 50
47216: PUSH
47217: LD_INT 1
47219: ST_TO_ADDR
// if p3 = 105 then
47220: LD_VAR 0 3
47224: PUSH
47225: LD_INT 105
47227: EQUAL
47228: IFFALSE 47238
// sSun := true ;
47230: LD_ADDR_EXP 51
47234: PUSH
47235: LD_INT 1
47237: ST_TO_ADDR
// if p3 = 106 then
47238: LD_VAR 0 3
47242: PUSH
47243: LD_INT 106
47245: EQUAL
47246: IFFALSE 47256
// sTiger := true ;
47248: LD_ADDR_EXP 47
47252: PUSH
47253: LD_INT 1
47255: ST_TO_ADDR
// if p3 = 107 then
47256: LD_VAR 0 3
47260: PUSH
47261: LD_INT 107
47263: EQUAL
47264: IFFALSE 47274
// sBomb := true ;
47266: LD_ADDR_EXP 48
47270: PUSH
47271: LD_INT 1
47273: ST_TO_ADDR
// if p3 = 108 then
47274: LD_VAR 0 3
47278: PUSH
47279: LD_INT 108
47281: EQUAL
47282: IFFALSE 47292
// sWound := true ;
47284: LD_ADDR_EXP 56
47288: PUSH
47289: LD_INT 1
47291: ST_TO_ADDR
// if p3 = 109 then
47292: LD_VAR 0 3
47296: PUSH
47297: LD_INT 109
47299: EQUAL
47300: IFFALSE 47310
// sBetray := true ;
47302: LD_ADDR_EXP 60
47306: PUSH
47307: LD_INT 1
47309: ST_TO_ADDR
// if p3 = 110 then
47310: LD_VAR 0 3
47314: PUSH
47315: LD_INT 110
47317: EQUAL
47318: IFFALSE 47328
// sContamin := true ;
47320: LD_ADDR_EXP 61
47324: PUSH
47325: LD_INT 1
47327: ST_TO_ADDR
// if p3 = 111 then
47328: LD_VAR 0 3
47332: PUSH
47333: LD_INT 111
47335: EQUAL
47336: IFFALSE 47346
// sOil := true ;
47338: LD_ADDR_EXP 63
47342: PUSH
47343: LD_INT 1
47345: ST_TO_ADDR
// if p3 = 112 then
47346: LD_VAR 0 3
47350: PUSH
47351: LD_INT 112
47353: EQUAL
47354: IFFALSE 47364
// sStu := true ;
47356: LD_ADDR_EXP 67
47360: PUSH
47361: LD_INT 1
47363: ST_TO_ADDR
// if p3 = 113 then
47364: LD_VAR 0 3
47368: PUSH
47369: LD_INT 113
47371: EQUAL
47372: IFFALSE 47382
// sBazooka := true ;
47374: LD_ADDR_EXP 70
47378: PUSH
47379: LD_INT 1
47381: ST_TO_ADDR
// if p3 = 114 then
47382: LD_VAR 0 3
47386: PUSH
47387: LD_INT 114
47389: EQUAL
47390: IFFALSE 47400
// sMortar := true ;
47392: LD_ADDR_EXP 71
47396: PUSH
47397: LD_INT 1
47399: ST_TO_ADDR
// if p3 = 115 then
47400: LD_VAR 0 3
47404: PUSH
47405: LD_INT 115
47407: EQUAL
47408: IFFALSE 47418
// sRanger := true ;
47410: LD_ADDR_EXP 81
47414: PUSH
47415: LD_INT 1
47417: ST_TO_ADDR
// if p3 = 116 then
47418: LD_VAR 0 3
47422: PUSH
47423: LD_INT 116
47425: EQUAL
47426: IFFALSE 47436
// sComputer := true ;
47428: LD_ADDR_EXP 82
47432: PUSH
47433: LD_INT 1
47435: ST_TO_ADDR
// if p3 = 117 then
47436: LD_VAR 0 3
47440: PUSH
47441: LD_INT 117
47443: EQUAL
47444: IFFALSE 47454
// s30 := true ;
47446: LD_ADDR_EXP 83
47450: PUSH
47451: LD_INT 1
47453: ST_TO_ADDR
// if p3 = 118 then
47454: LD_VAR 0 3
47458: PUSH
47459: LD_INT 118
47461: EQUAL
47462: IFFALSE 47472
// s60 := true ;
47464: LD_ADDR_EXP 84
47468: PUSH
47469: LD_INT 1
47471: ST_TO_ADDR
// end ; if p2 = hack_mode then
47472: LD_VAR 0 2
47476: PUSH
47477: LD_INT 101
47479: EQUAL
47480: IFFALSE 47608
// begin case p3 of 1 :
47482: LD_VAR 0 3
47486: PUSH
47487: LD_INT 1
47489: DOUBLE
47490: EQUAL
47491: IFTRUE 47495
47493: GO 47502
47495: POP
// hHackUnlimitedResources ; 2 :
47496: CALL 59755 0 0
47500: GO 47608
47502: LD_INT 2
47504: DOUBLE
47505: EQUAL
47506: IFTRUE 47510
47508: GO 47517
47510: POP
// hHackSetLevel10 ; 3 :
47511: CALL 59888 0 0
47515: GO 47608
47517: LD_INT 3
47519: DOUBLE
47520: EQUAL
47521: IFTRUE 47525
47523: GO 47532
47525: POP
// hHackSetLevel10YourUnits ; 4 :
47526: CALL 59973 0 0
47530: GO 47608
47532: LD_INT 4
47534: DOUBLE
47535: EQUAL
47536: IFTRUE 47540
47538: GO 47547
47540: POP
// hHackInvincible ; 5 :
47541: CALL 60421 0 0
47545: GO 47608
47547: LD_INT 5
47549: DOUBLE
47550: EQUAL
47551: IFTRUE 47555
47553: GO 47562
47555: POP
// hHackInvisible ; 6 :
47556: CALL 60532 0 0
47560: GO 47608
47562: LD_INT 6
47564: DOUBLE
47565: EQUAL
47566: IFTRUE 47570
47568: GO 47577
47570: POP
// hHackChangeYourSide ; 7 :
47571: CALL 60589 0 0
47575: GO 47608
47577: LD_INT 7
47579: DOUBLE
47580: EQUAL
47581: IFTRUE 47585
47583: GO 47592
47585: POP
// hHackChangeUnitSide ; 8 :
47586: CALL 60631 0 0
47590: GO 47608
47592: LD_INT 8
47594: DOUBLE
47595: EQUAL
47596: IFTRUE 47600
47598: GO 47607
47600: POP
// hHackFog ; end ;
47601: CALL 60732 0 0
47605: GO 47608
47607: POP
// end ; if p2 = game_save_mode then
47608: LD_VAR 0 2
47612: PUSH
47613: LD_INT 102
47615: EQUAL
47616: IFFALSE 47671
// begin if p3 = 1 then
47618: LD_VAR 0 3
47622: PUSH
47623: LD_INT 1
47625: EQUAL
47626: IFFALSE 47638
// globalGameSaveCounter := p4 ;
47628: LD_ADDR_EXP 27
47632: PUSH
47633: LD_VAR 0 4
47637: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
47638: LD_VAR 0 3
47642: PUSH
47643: LD_INT 2
47645: EQUAL
47646: PUSH
47647: LD_EXP 27
47651: AND
47652: IFFALSE 47671
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47654: LD_STRING setGameSaveCounter(
47656: PUSH
47657: LD_EXP 27
47661: STR
47662: PUSH
47663: LD_STRING )
47665: STR
47666: PPUSH
47667: CALL_OW 559
// end ; end ;
47671: LD_VAR 0 7
47675: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
47676: LD_INT 0
47678: PPUSH
// streamModeActive := false ;
47679: LD_ADDR_EXP 28
47683: PUSH
47684: LD_INT 0
47686: ST_TO_ADDR
// normalCounter := 36 ;
47687: LD_ADDR_EXP 29
47691: PUSH
47692: LD_INT 36
47694: ST_TO_ADDR
// hardcoreCounter := 18 ;
47695: LD_ADDR_EXP 30
47699: PUSH
47700: LD_INT 18
47702: ST_TO_ADDR
// sRocket := false ;
47703: LD_ADDR_EXP 33
47707: PUSH
47708: LD_INT 0
47710: ST_TO_ADDR
// sSpeed := false ;
47711: LD_ADDR_EXP 32
47715: PUSH
47716: LD_INT 0
47718: ST_TO_ADDR
// sEngine := false ;
47719: LD_ADDR_EXP 34
47723: PUSH
47724: LD_INT 0
47726: ST_TO_ADDR
// sSpec := false ;
47727: LD_ADDR_EXP 31
47731: PUSH
47732: LD_INT 0
47734: ST_TO_ADDR
// sLevel := false ;
47735: LD_ADDR_EXP 35
47739: PUSH
47740: LD_INT 0
47742: ST_TO_ADDR
// sArmoury := false ;
47743: LD_ADDR_EXP 36
47747: PUSH
47748: LD_INT 0
47750: ST_TO_ADDR
// sRadar := false ;
47751: LD_ADDR_EXP 37
47755: PUSH
47756: LD_INT 0
47758: ST_TO_ADDR
// sBunker := false ;
47759: LD_ADDR_EXP 38
47763: PUSH
47764: LD_INT 0
47766: ST_TO_ADDR
// sHack := false ;
47767: LD_ADDR_EXP 39
47771: PUSH
47772: LD_INT 0
47774: ST_TO_ADDR
// sFire := false ;
47775: LD_ADDR_EXP 40
47779: PUSH
47780: LD_INT 0
47782: ST_TO_ADDR
// sRefresh := false ;
47783: LD_ADDR_EXP 41
47787: PUSH
47788: LD_INT 0
47790: ST_TO_ADDR
// sExp := false ;
47791: LD_ADDR_EXP 42
47795: PUSH
47796: LD_INT 0
47798: ST_TO_ADDR
// sDepot := false ;
47799: LD_ADDR_EXP 43
47803: PUSH
47804: LD_INT 0
47806: ST_TO_ADDR
// sFlag := false ;
47807: LD_ADDR_EXP 44
47811: PUSH
47812: LD_INT 0
47814: ST_TO_ADDR
// sKamikadze := false ;
47815: LD_ADDR_EXP 52
47819: PUSH
47820: LD_INT 0
47822: ST_TO_ADDR
// sTroll := false ;
47823: LD_ADDR_EXP 53
47827: PUSH
47828: LD_INT 0
47830: ST_TO_ADDR
// sSlow := false ;
47831: LD_ADDR_EXP 54
47835: PUSH
47836: LD_INT 0
47838: ST_TO_ADDR
// sLack := false ;
47839: LD_ADDR_EXP 55
47843: PUSH
47844: LD_INT 0
47846: ST_TO_ADDR
// sTank := false ;
47847: LD_ADDR_EXP 57
47851: PUSH
47852: LD_INT 0
47854: ST_TO_ADDR
// sRemote := false ;
47855: LD_ADDR_EXP 58
47859: PUSH
47860: LD_INT 0
47862: ST_TO_ADDR
// sPowell := false ;
47863: LD_ADDR_EXP 59
47867: PUSH
47868: LD_INT 0
47870: ST_TO_ADDR
// sTeleport := false ;
47871: LD_ADDR_EXP 62
47875: PUSH
47876: LD_INT 0
47878: ST_TO_ADDR
// sOilTower := false ;
47879: LD_ADDR_EXP 64
47883: PUSH
47884: LD_INT 0
47886: ST_TO_ADDR
// sShovel := false ;
47887: LD_ADDR_EXP 65
47891: PUSH
47892: LD_INT 0
47894: ST_TO_ADDR
// sSheik := false ;
47895: LD_ADDR_EXP 66
47899: PUSH
47900: LD_INT 0
47902: ST_TO_ADDR
// sEarthquake := false ;
47903: LD_ADDR_EXP 68
47907: PUSH
47908: LD_INT 0
47910: ST_TO_ADDR
// sAI := false ;
47911: LD_ADDR_EXP 69
47915: PUSH
47916: LD_INT 0
47918: ST_TO_ADDR
// sCargo := false ;
47919: LD_ADDR_EXP 72
47923: PUSH
47924: LD_INT 0
47926: ST_TO_ADDR
// sDLaser := false ;
47927: LD_ADDR_EXP 73
47931: PUSH
47932: LD_INT 0
47934: ST_TO_ADDR
// sExchange := false ;
47935: LD_ADDR_EXP 74
47939: PUSH
47940: LD_INT 0
47942: ST_TO_ADDR
// sFac := false ;
47943: LD_ADDR_EXP 75
47947: PUSH
47948: LD_INT 0
47950: ST_TO_ADDR
// sPower := false ;
47951: LD_ADDR_EXP 76
47955: PUSH
47956: LD_INT 0
47958: ST_TO_ADDR
// sRandom := false ;
47959: LD_ADDR_EXP 77
47963: PUSH
47964: LD_INT 0
47966: ST_TO_ADDR
// sShield := false ;
47967: LD_ADDR_EXP 78
47971: PUSH
47972: LD_INT 0
47974: ST_TO_ADDR
// sTime := false ;
47975: LD_ADDR_EXP 79
47979: PUSH
47980: LD_INT 0
47982: ST_TO_ADDR
// sTools := false ;
47983: LD_ADDR_EXP 80
47987: PUSH
47988: LD_INT 0
47990: ST_TO_ADDR
// sSold := false ;
47991: LD_ADDR_EXP 45
47995: PUSH
47996: LD_INT 0
47998: ST_TO_ADDR
// sDiff := false ;
47999: LD_ADDR_EXP 46
48003: PUSH
48004: LD_INT 0
48006: ST_TO_ADDR
// sFog := false ;
48007: LD_ADDR_EXP 49
48011: PUSH
48012: LD_INT 0
48014: ST_TO_ADDR
// sReset := false ;
48015: LD_ADDR_EXP 50
48019: PUSH
48020: LD_INT 0
48022: ST_TO_ADDR
// sSun := false ;
48023: LD_ADDR_EXP 51
48027: PUSH
48028: LD_INT 0
48030: ST_TO_ADDR
// sTiger := false ;
48031: LD_ADDR_EXP 47
48035: PUSH
48036: LD_INT 0
48038: ST_TO_ADDR
// sBomb := false ;
48039: LD_ADDR_EXP 48
48043: PUSH
48044: LD_INT 0
48046: ST_TO_ADDR
// sWound := false ;
48047: LD_ADDR_EXP 56
48051: PUSH
48052: LD_INT 0
48054: ST_TO_ADDR
// sBetray := false ;
48055: LD_ADDR_EXP 60
48059: PUSH
48060: LD_INT 0
48062: ST_TO_ADDR
// sContamin := false ;
48063: LD_ADDR_EXP 61
48067: PUSH
48068: LD_INT 0
48070: ST_TO_ADDR
// sOil := false ;
48071: LD_ADDR_EXP 63
48075: PUSH
48076: LD_INT 0
48078: ST_TO_ADDR
// sStu := false ;
48079: LD_ADDR_EXP 67
48083: PUSH
48084: LD_INT 0
48086: ST_TO_ADDR
// sBazooka := false ;
48087: LD_ADDR_EXP 70
48091: PUSH
48092: LD_INT 0
48094: ST_TO_ADDR
// sMortar := false ;
48095: LD_ADDR_EXP 71
48099: PUSH
48100: LD_INT 0
48102: ST_TO_ADDR
// sRanger := false ;
48103: LD_ADDR_EXP 81
48107: PUSH
48108: LD_INT 0
48110: ST_TO_ADDR
// sComputer := false ;
48111: LD_ADDR_EXP 82
48115: PUSH
48116: LD_INT 0
48118: ST_TO_ADDR
// s30 := false ;
48119: LD_ADDR_EXP 83
48123: PUSH
48124: LD_INT 0
48126: ST_TO_ADDR
// s60 := false ;
48127: LD_ADDR_EXP 84
48131: PUSH
48132: LD_INT 0
48134: ST_TO_ADDR
// end ;
48135: LD_VAR 0 1
48139: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48140: LD_INT 0
48142: PPUSH
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
// result := [ ] ;
48149: LD_ADDR_VAR 0 2
48153: PUSH
48154: EMPTY
48155: ST_TO_ADDR
// if campaign_id = 1 then
48156: LD_OWVAR 69
48160: PUSH
48161: LD_INT 1
48163: EQUAL
48164: IFFALSE 51330
// begin case mission_number of 1 :
48166: LD_OWVAR 70
48170: PUSH
48171: LD_INT 1
48173: DOUBLE
48174: EQUAL
48175: IFTRUE 48179
48177: GO 48255
48179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48180: LD_ADDR_VAR 0 2
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: LD_INT 4
48190: PUSH
48191: LD_INT 11
48193: PUSH
48194: LD_INT 12
48196: PUSH
48197: LD_INT 15
48199: PUSH
48200: LD_INT 16
48202: PUSH
48203: LD_INT 22
48205: PUSH
48206: LD_INT 23
48208: PUSH
48209: LD_INT 26
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 101
48225: PUSH
48226: LD_INT 102
48228: PUSH
48229: LD_INT 106
48231: PUSH
48232: LD_INT 116
48234: PUSH
48235: LD_INT 117
48237: PUSH
48238: LD_INT 118
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: ST_TO_ADDR
48253: GO 51328
48255: LD_INT 2
48257: DOUBLE
48258: EQUAL
48259: IFTRUE 48263
48261: GO 48347
48263: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48264: LD_ADDR_VAR 0 2
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 4
48274: PUSH
48275: LD_INT 11
48277: PUSH
48278: LD_INT 12
48280: PUSH
48281: LD_INT 15
48283: PUSH
48284: LD_INT 16
48286: PUSH
48287: LD_INT 22
48289: PUSH
48290: LD_INT 23
48292: PUSH
48293: LD_INT 26
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 101
48309: PUSH
48310: LD_INT 102
48312: PUSH
48313: LD_INT 105
48315: PUSH
48316: LD_INT 106
48318: PUSH
48319: LD_INT 108
48321: PUSH
48322: LD_INT 116
48324: PUSH
48325: LD_INT 117
48327: PUSH
48328: LD_INT 118
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: ST_TO_ADDR
48345: GO 51328
48347: LD_INT 3
48349: DOUBLE
48350: EQUAL
48351: IFTRUE 48355
48353: GO 48443
48355: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48356: LD_ADDR_VAR 0 2
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: LD_INT 4
48366: PUSH
48367: LD_INT 5
48369: PUSH
48370: LD_INT 11
48372: PUSH
48373: LD_INT 12
48375: PUSH
48376: LD_INT 15
48378: PUSH
48379: LD_INT 16
48381: PUSH
48382: LD_INT 22
48384: PUSH
48385: LD_INT 26
48387: PUSH
48388: LD_INT 36
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 101
48405: PUSH
48406: LD_INT 102
48408: PUSH
48409: LD_INT 105
48411: PUSH
48412: LD_INT 106
48414: PUSH
48415: LD_INT 108
48417: PUSH
48418: LD_INT 116
48420: PUSH
48421: LD_INT 117
48423: PUSH
48424: LD_INT 118
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: ST_TO_ADDR
48441: GO 51328
48443: LD_INT 4
48445: DOUBLE
48446: EQUAL
48447: IFTRUE 48451
48449: GO 48547
48451: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48452: LD_ADDR_VAR 0 2
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 4
48462: PUSH
48463: LD_INT 5
48465: PUSH
48466: LD_INT 8
48468: PUSH
48469: LD_INT 11
48471: PUSH
48472: LD_INT 12
48474: PUSH
48475: LD_INT 15
48477: PUSH
48478: LD_INT 16
48480: PUSH
48481: LD_INT 22
48483: PUSH
48484: LD_INT 23
48486: PUSH
48487: LD_INT 26
48489: PUSH
48490: LD_INT 36
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 101
48509: PUSH
48510: LD_INT 102
48512: PUSH
48513: LD_INT 105
48515: PUSH
48516: LD_INT 106
48518: PUSH
48519: LD_INT 108
48521: PUSH
48522: LD_INT 116
48524: PUSH
48525: LD_INT 117
48527: PUSH
48528: LD_INT 118
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: ST_TO_ADDR
48545: GO 51328
48547: LD_INT 5
48549: DOUBLE
48550: EQUAL
48551: IFTRUE 48555
48553: GO 48667
48555: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48556: LD_ADDR_VAR 0 2
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 4
48566: PUSH
48567: LD_INT 5
48569: PUSH
48570: LD_INT 6
48572: PUSH
48573: LD_INT 8
48575: PUSH
48576: LD_INT 11
48578: PUSH
48579: LD_INT 12
48581: PUSH
48582: LD_INT 15
48584: PUSH
48585: LD_INT 16
48587: PUSH
48588: LD_INT 22
48590: PUSH
48591: LD_INT 23
48593: PUSH
48594: LD_INT 25
48596: PUSH
48597: LD_INT 26
48599: PUSH
48600: LD_INT 36
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 101
48621: PUSH
48622: LD_INT 102
48624: PUSH
48625: LD_INT 105
48627: PUSH
48628: LD_INT 106
48630: PUSH
48631: LD_INT 108
48633: PUSH
48634: LD_INT 109
48636: PUSH
48637: LD_INT 112
48639: PUSH
48640: LD_INT 116
48642: PUSH
48643: LD_INT 117
48645: PUSH
48646: LD_INT 118
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: ST_TO_ADDR
48665: GO 51328
48667: LD_INT 6
48669: DOUBLE
48670: EQUAL
48671: IFTRUE 48675
48673: GO 48807
48675: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48676: LD_ADDR_VAR 0 2
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 4
48686: PUSH
48687: LD_INT 5
48689: PUSH
48690: LD_INT 6
48692: PUSH
48693: LD_INT 8
48695: PUSH
48696: LD_INT 11
48698: PUSH
48699: LD_INT 12
48701: PUSH
48702: LD_INT 15
48704: PUSH
48705: LD_INT 16
48707: PUSH
48708: LD_INT 20
48710: PUSH
48711: LD_INT 21
48713: PUSH
48714: LD_INT 22
48716: PUSH
48717: LD_INT 23
48719: PUSH
48720: LD_INT 25
48722: PUSH
48723: LD_INT 26
48725: PUSH
48726: LD_INT 30
48728: PUSH
48729: LD_INT 31
48731: PUSH
48732: LD_INT 32
48734: PUSH
48735: LD_INT 36
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 101
48761: PUSH
48762: LD_INT 102
48764: PUSH
48765: LD_INT 105
48767: PUSH
48768: LD_INT 106
48770: PUSH
48771: LD_INT 108
48773: PUSH
48774: LD_INT 109
48776: PUSH
48777: LD_INT 112
48779: PUSH
48780: LD_INT 116
48782: PUSH
48783: LD_INT 117
48785: PUSH
48786: LD_INT 118
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: ST_TO_ADDR
48805: GO 51328
48807: LD_INT 7
48809: DOUBLE
48810: EQUAL
48811: IFTRUE 48815
48813: GO 48927
48815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48816: LD_ADDR_VAR 0 2
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 4
48826: PUSH
48827: LD_INT 5
48829: PUSH
48830: LD_INT 7
48832: PUSH
48833: LD_INT 11
48835: PUSH
48836: LD_INT 12
48838: PUSH
48839: LD_INT 15
48841: PUSH
48842: LD_INT 16
48844: PUSH
48845: LD_INT 20
48847: PUSH
48848: LD_INT 21
48850: PUSH
48851: LD_INT 22
48853: PUSH
48854: LD_INT 23
48856: PUSH
48857: LD_INT 25
48859: PUSH
48860: LD_INT 26
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 101
48881: PUSH
48882: LD_INT 102
48884: PUSH
48885: LD_INT 103
48887: PUSH
48888: LD_INT 105
48890: PUSH
48891: LD_INT 106
48893: PUSH
48894: LD_INT 108
48896: PUSH
48897: LD_INT 112
48899: PUSH
48900: LD_INT 116
48902: PUSH
48903: LD_INT 117
48905: PUSH
48906: LD_INT 118
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: ST_TO_ADDR
48925: GO 51328
48927: LD_INT 8
48929: DOUBLE
48930: EQUAL
48931: IFTRUE 48935
48933: GO 49075
48935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48936: LD_ADDR_VAR 0 2
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 4
48946: PUSH
48947: LD_INT 5
48949: PUSH
48950: LD_INT 6
48952: PUSH
48953: LD_INT 7
48955: PUSH
48956: LD_INT 8
48958: PUSH
48959: LD_INT 11
48961: PUSH
48962: LD_INT 12
48964: PUSH
48965: LD_INT 15
48967: PUSH
48968: LD_INT 16
48970: PUSH
48971: LD_INT 20
48973: PUSH
48974: LD_INT 21
48976: PUSH
48977: LD_INT 22
48979: PUSH
48980: LD_INT 23
48982: PUSH
48983: LD_INT 25
48985: PUSH
48986: LD_INT 26
48988: PUSH
48989: LD_INT 30
48991: PUSH
48992: LD_INT 31
48994: PUSH
48995: LD_INT 32
48997: PUSH
48998: LD_INT 36
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 101
49025: PUSH
49026: LD_INT 102
49028: PUSH
49029: LD_INT 103
49031: PUSH
49032: LD_INT 105
49034: PUSH
49035: LD_INT 106
49037: PUSH
49038: LD_INT 108
49040: PUSH
49041: LD_INT 109
49043: PUSH
49044: LD_INT 112
49046: PUSH
49047: LD_INT 116
49049: PUSH
49050: LD_INT 117
49052: PUSH
49053: LD_INT 118
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: ST_TO_ADDR
49073: GO 51328
49075: LD_INT 9
49077: DOUBLE
49078: EQUAL
49079: IFTRUE 49083
49081: GO 49231
49083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49084: LD_ADDR_VAR 0 2
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 4
49094: PUSH
49095: LD_INT 5
49097: PUSH
49098: LD_INT 6
49100: PUSH
49101: LD_INT 7
49103: PUSH
49104: LD_INT 8
49106: PUSH
49107: LD_INT 11
49109: PUSH
49110: LD_INT 12
49112: PUSH
49113: LD_INT 15
49115: PUSH
49116: LD_INT 16
49118: PUSH
49119: LD_INT 20
49121: PUSH
49122: LD_INT 21
49124: PUSH
49125: LD_INT 22
49127: PUSH
49128: LD_INT 23
49130: PUSH
49131: LD_INT 25
49133: PUSH
49134: LD_INT 26
49136: PUSH
49137: LD_INT 28
49139: PUSH
49140: LD_INT 30
49142: PUSH
49143: LD_INT 31
49145: PUSH
49146: LD_INT 32
49148: PUSH
49149: LD_INT 36
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 101
49177: PUSH
49178: LD_INT 102
49180: PUSH
49181: LD_INT 103
49183: PUSH
49184: LD_INT 105
49186: PUSH
49187: LD_INT 106
49189: PUSH
49190: LD_INT 108
49192: PUSH
49193: LD_INT 109
49195: PUSH
49196: LD_INT 112
49198: PUSH
49199: LD_INT 114
49201: PUSH
49202: LD_INT 116
49204: PUSH
49205: LD_INT 117
49207: PUSH
49208: LD_INT 118
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: ST_TO_ADDR
49229: GO 51328
49231: LD_INT 10
49233: DOUBLE
49234: EQUAL
49235: IFTRUE 49239
49237: GO 49435
49239: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49240: LD_ADDR_VAR 0 2
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: LD_INT 4
49250: PUSH
49251: LD_INT 5
49253: PUSH
49254: LD_INT 6
49256: PUSH
49257: LD_INT 7
49259: PUSH
49260: LD_INT 8
49262: PUSH
49263: LD_INT 9
49265: PUSH
49266: LD_INT 10
49268: PUSH
49269: LD_INT 11
49271: PUSH
49272: LD_INT 12
49274: PUSH
49275: LD_INT 13
49277: PUSH
49278: LD_INT 14
49280: PUSH
49281: LD_INT 15
49283: PUSH
49284: LD_INT 16
49286: PUSH
49287: LD_INT 17
49289: PUSH
49290: LD_INT 18
49292: PUSH
49293: LD_INT 19
49295: PUSH
49296: LD_INT 20
49298: PUSH
49299: LD_INT 21
49301: PUSH
49302: LD_INT 22
49304: PUSH
49305: LD_INT 23
49307: PUSH
49308: LD_INT 24
49310: PUSH
49311: LD_INT 25
49313: PUSH
49314: LD_INT 26
49316: PUSH
49317: LD_INT 28
49319: PUSH
49320: LD_INT 30
49322: PUSH
49323: LD_INT 31
49325: PUSH
49326: LD_INT 32
49328: PUSH
49329: LD_INT 36
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 101
49365: PUSH
49366: LD_INT 102
49368: PUSH
49369: LD_INT 103
49371: PUSH
49372: LD_INT 104
49374: PUSH
49375: LD_INT 105
49377: PUSH
49378: LD_INT 106
49380: PUSH
49381: LD_INT 107
49383: PUSH
49384: LD_INT 108
49386: PUSH
49387: LD_INT 109
49389: PUSH
49390: LD_INT 110
49392: PUSH
49393: LD_INT 111
49395: PUSH
49396: LD_INT 112
49398: PUSH
49399: LD_INT 114
49401: PUSH
49402: LD_INT 116
49404: PUSH
49405: LD_INT 117
49407: PUSH
49408: LD_INT 118
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: ST_TO_ADDR
49433: GO 51328
49435: LD_INT 11
49437: DOUBLE
49438: EQUAL
49439: IFTRUE 49443
49441: GO 49647
49443: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49444: LD_ADDR_VAR 0 2
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: LD_INT 4
49457: PUSH
49458: LD_INT 5
49460: PUSH
49461: LD_INT 6
49463: PUSH
49464: LD_INT 7
49466: PUSH
49467: LD_INT 8
49469: PUSH
49470: LD_INT 9
49472: PUSH
49473: LD_INT 10
49475: PUSH
49476: LD_INT 11
49478: PUSH
49479: LD_INT 12
49481: PUSH
49482: LD_INT 13
49484: PUSH
49485: LD_INT 14
49487: PUSH
49488: LD_INT 15
49490: PUSH
49491: LD_INT 16
49493: PUSH
49494: LD_INT 17
49496: PUSH
49497: LD_INT 18
49499: PUSH
49500: LD_INT 19
49502: PUSH
49503: LD_INT 20
49505: PUSH
49506: LD_INT 21
49508: PUSH
49509: LD_INT 22
49511: PUSH
49512: LD_INT 23
49514: PUSH
49515: LD_INT 24
49517: PUSH
49518: LD_INT 25
49520: PUSH
49521: LD_INT 26
49523: PUSH
49524: LD_INT 28
49526: PUSH
49527: LD_INT 30
49529: PUSH
49530: LD_INT 31
49532: PUSH
49533: LD_INT 32
49535: PUSH
49536: LD_INT 34
49538: PUSH
49539: LD_INT 36
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 101
49577: PUSH
49578: LD_INT 102
49580: PUSH
49581: LD_INT 103
49583: PUSH
49584: LD_INT 104
49586: PUSH
49587: LD_INT 105
49589: PUSH
49590: LD_INT 106
49592: PUSH
49593: LD_INT 107
49595: PUSH
49596: LD_INT 108
49598: PUSH
49599: LD_INT 109
49601: PUSH
49602: LD_INT 110
49604: PUSH
49605: LD_INT 111
49607: PUSH
49608: LD_INT 112
49610: PUSH
49611: LD_INT 114
49613: PUSH
49614: LD_INT 116
49616: PUSH
49617: LD_INT 117
49619: PUSH
49620: LD_INT 118
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: ST_TO_ADDR
49645: GO 51328
49647: LD_INT 12
49649: DOUBLE
49650: EQUAL
49651: IFTRUE 49655
49653: GO 49875
49655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49656: LD_ADDR_VAR 0 2
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 3
49669: PUSH
49670: LD_INT 4
49672: PUSH
49673: LD_INT 5
49675: PUSH
49676: LD_INT 6
49678: PUSH
49679: LD_INT 7
49681: PUSH
49682: LD_INT 8
49684: PUSH
49685: LD_INT 9
49687: PUSH
49688: LD_INT 10
49690: PUSH
49691: LD_INT 11
49693: PUSH
49694: LD_INT 12
49696: PUSH
49697: LD_INT 13
49699: PUSH
49700: LD_INT 14
49702: PUSH
49703: LD_INT 15
49705: PUSH
49706: LD_INT 16
49708: PUSH
49709: LD_INT 17
49711: PUSH
49712: LD_INT 18
49714: PUSH
49715: LD_INT 19
49717: PUSH
49718: LD_INT 20
49720: PUSH
49721: LD_INT 21
49723: PUSH
49724: LD_INT 22
49726: PUSH
49727: LD_INT 23
49729: PUSH
49730: LD_INT 24
49732: PUSH
49733: LD_INT 25
49735: PUSH
49736: LD_INT 26
49738: PUSH
49739: LD_INT 27
49741: PUSH
49742: LD_INT 28
49744: PUSH
49745: LD_INT 30
49747: PUSH
49748: LD_INT 31
49750: PUSH
49751: LD_INT 32
49753: PUSH
49754: LD_INT 33
49756: PUSH
49757: LD_INT 34
49759: PUSH
49760: LD_INT 36
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 101
49801: PUSH
49802: LD_INT 102
49804: PUSH
49805: LD_INT 103
49807: PUSH
49808: LD_INT 104
49810: PUSH
49811: LD_INT 105
49813: PUSH
49814: LD_INT 106
49816: PUSH
49817: LD_INT 107
49819: PUSH
49820: LD_INT 108
49822: PUSH
49823: LD_INT 109
49825: PUSH
49826: LD_INT 110
49828: PUSH
49829: LD_INT 111
49831: PUSH
49832: LD_INT 112
49834: PUSH
49835: LD_INT 113
49837: PUSH
49838: LD_INT 114
49840: PUSH
49841: LD_INT 116
49843: PUSH
49844: LD_INT 117
49846: PUSH
49847: LD_INT 118
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: ST_TO_ADDR
49873: GO 51328
49875: LD_INT 13
49877: DOUBLE
49878: EQUAL
49879: IFTRUE 49883
49881: GO 50091
49883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49884: LD_ADDR_VAR 0 2
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: LD_INT 5
49903: PUSH
49904: LD_INT 8
49906: PUSH
49907: LD_INT 9
49909: PUSH
49910: LD_INT 10
49912: PUSH
49913: LD_INT 11
49915: PUSH
49916: LD_INT 12
49918: PUSH
49919: LD_INT 14
49921: PUSH
49922: LD_INT 15
49924: PUSH
49925: LD_INT 16
49927: PUSH
49928: LD_INT 17
49930: PUSH
49931: LD_INT 18
49933: PUSH
49934: LD_INT 19
49936: PUSH
49937: LD_INT 20
49939: PUSH
49940: LD_INT 21
49942: PUSH
49943: LD_INT 22
49945: PUSH
49946: LD_INT 23
49948: PUSH
49949: LD_INT 24
49951: PUSH
49952: LD_INT 25
49954: PUSH
49955: LD_INT 26
49957: PUSH
49958: LD_INT 27
49960: PUSH
49961: LD_INT 28
49963: PUSH
49964: LD_INT 30
49966: PUSH
49967: LD_INT 31
49969: PUSH
49970: LD_INT 32
49972: PUSH
49973: LD_INT 33
49975: PUSH
49976: LD_INT 34
49978: PUSH
49979: LD_INT 36
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 101
50017: PUSH
50018: LD_INT 102
50020: PUSH
50021: LD_INT 103
50023: PUSH
50024: LD_INT 104
50026: PUSH
50027: LD_INT 105
50029: PUSH
50030: LD_INT 106
50032: PUSH
50033: LD_INT 107
50035: PUSH
50036: LD_INT 108
50038: PUSH
50039: LD_INT 109
50041: PUSH
50042: LD_INT 110
50044: PUSH
50045: LD_INT 111
50047: PUSH
50048: LD_INT 112
50050: PUSH
50051: LD_INT 113
50053: PUSH
50054: LD_INT 114
50056: PUSH
50057: LD_INT 116
50059: PUSH
50060: LD_INT 117
50062: PUSH
50063: LD_INT 118
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: ST_TO_ADDR
50089: GO 51328
50091: LD_INT 14
50093: DOUBLE
50094: EQUAL
50095: IFTRUE 50099
50097: GO 50323
50099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50100: LD_ADDR_VAR 0 2
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: LD_INT 4
50116: PUSH
50117: LD_INT 5
50119: PUSH
50120: LD_INT 6
50122: PUSH
50123: LD_INT 7
50125: PUSH
50126: LD_INT 8
50128: PUSH
50129: LD_INT 9
50131: PUSH
50132: LD_INT 10
50134: PUSH
50135: LD_INT 11
50137: PUSH
50138: LD_INT 12
50140: PUSH
50141: LD_INT 13
50143: PUSH
50144: LD_INT 14
50146: PUSH
50147: LD_INT 15
50149: PUSH
50150: LD_INT 16
50152: PUSH
50153: LD_INT 17
50155: PUSH
50156: LD_INT 18
50158: PUSH
50159: LD_INT 19
50161: PUSH
50162: LD_INT 20
50164: PUSH
50165: LD_INT 21
50167: PUSH
50168: LD_INT 22
50170: PUSH
50171: LD_INT 23
50173: PUSH
50174: LD_INT 24
50176: PUSH
50177: LD_INT 25
50179: PUSH
50180: LD_INT 26
50182: PUSH
50183: LD_INT 27
50185: PUSH
50186: LD_INT 28
50188: PUSH
50189: LD_INT 29
50191: PUSH
50192: LD_INT 30
50194: PUSH
50195: LD_INT 31
50197: PUSH
50198: LD_INT 32
50200: PUSH
50201: LD_INT 33
50203: PUSH
50204: LD_INT 34
50206: PUSH
50207: LD_INT 36
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 101
50249: PUSH
50250: LD_INT 102
50252: PUSH
50253: LD_INT 103
50255: PUSH
50256: LD_INT 104
50258: PUSH
50259: LD_INT 105
50261: PUSH
50262: LD_INT 106
50264: PUSH
50265: LD_INT 107
50267: PUSH
50268: LD_INT 108
50270: PUSH
50271: LD_INT 109
50273: PUSH
50274: LD_INT 110
50276: PUSH
50277: LD_INT 111
50279: PUSH
50280: LD_INT 112
50282: PUSH
50283: LD_INT 113
50285: PUSH
50286: LD_INT 114
50288: PUSH
50289: LD_INT 116
50291: PUSH
50292: LD_INT 117
50294: PUSH
50295: LD_INT 118
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: ST_TO_ADDR
50321: GO 51328
50323: LD_INT 15
50325: DOUBLE
50326: EQUAL
50327: IFTRUE 50331
50329: GO 50555
50331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50332: LD_ADDR_VAR 0 2
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 4
50348: PUSH
50349: LD_INT 5
50351: PUSH
50352: LD_INT 6
50354: PUSH
50355: LD_INT 7
50357: PUSH
50358: LD_INT 8
50360: PUSH
50361: LD_INT 9
50363: PUSH
50364: LD_INT 10
50366: PUSH
50367: LD_INT 11
50369: PUSH
50370: LD_INT 12
50372: PUSH
50373: LD_INT 13
50375: PUSH
50376: LD_INT 14
50378: PUSH
50379: LD_INT 15
50381: PUSH
50382: LD_INT 16
50384: PUSH
50385: LD_INT 17
50387: PUSH
50388: LD_INT 18
50390: PUSH
50391: LD_INT 19
50393: PUSH
50394: LD_INT 20
50396: PUSH
50397: LD_INT 21
50399: PUSH
50400: LD_INT 22
50402: PUSH
50403: LD_INT 23
50405: PUSH
50406: LD_INT 24
50408: PUSH
50409: LD_INT 25
50411: PUSH
50412: LD_INT 26
50414: PUSH
50415: LD_INT 27
50417: PUSH
50418: LD_INT 28
50420: PUSH
50421: LD_INT 29
50423: PUSH
50424: LD_INT 30
50426: PUSH
50427: LD_INT 31
50429: PUSH
50430: LD_INT 32
50432: PUSH
50433: LD_INT 33
50435: PUSH
50436: LD_INT 34
50438: PUSH
50439: LD_INT 36
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 101
50481: PUSH
50482: LD_INT 102
50484: PUSH
50485: LD_INT 103
50487: PUSH
50488: LD_INT 104
50490: PUSH
50491: LD_INT 105
50493: PUSH
50494: LD_INT 106
50496: PUSH
50497: LD_INT 107
50499: PUSH
50500: LD_INT 108
50502: PUSH
50503: LD_INT 109
50505: PUSH
50506: LD_INT 110
50508: PUSH
50509: LD_INT 111
50511: PUSH
50512: LD_INT 112
50514: PUSH
50515: LD_INT 113
50517: PUSH
50518: LD_INT 114
50520: PUSH
50521: LD_INT 116
50523: PUSH
50524: LD_INT 117
50526: PUSH
50527: LD_INT 118
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: ST_TO_ADDR
50553: GO 51328
50555: LD_INT 16
50557: DOUBLE
50558: EQUAL
50559: IFTRUE 50563
50561: GO 50699
50563: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50564: LD_ADDR_VAR 0 2
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: LD_INT 4
50574: PUSH
50575: LD_INT 5
50577: PUSH
50578: LD_INT 7
50580: PUSH
50581: LD_INT 11
50583: PUSH
50584: LD_INT 12
50586: PUSH
50587: LD_INT 15
50589: PUSH
50590: LD_INT 16
50592: PUSH
50593: LD_INT 20
50595: PUSH
50596: LD_INT 21
50598: PUSH
50599: LD_INT 22
50601: PUSH
50602: LD_INT 23
50604: PUSH
50605: LD_INT 25
50607: PUSH
50608: LD_INT 26
50610: PUSH
50611: LD_INT 30
50613: PUSH
50614: LD_INT 31
50616: PUSH
50617: LD_INT 32
50619: PUSH
50620: LD_INT 33
50622: PUSH
50623: LD_INT 34
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 101
50649: PUSH
50650: LD_INT 102
50652: PUSH
50653: LD_INT 103
50655: PUSH
50656: LD_INT 106
50658: PUSH
50659: LD_INT 108
50661: PUSH
50662: LD_INT 112
50664: PUSH
50665: LD_INT 113
50667: PUSH
50668: LD_INT 114
50670: PUSH
50671: LD_INT 116
50673: PUSH
50674: LD_INT 117
50676: PUSH
50677: LD_INT 118
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: ST_TO_ADDR
50697: GO 51328
50699: LD_INT 17
50701: DOUBLE
50702: EQUAL
50703: IFTRUE 50707
50705: GO 50931
50707: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50708: LD_ADDR_VAR 0 2
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: LD_INT 3
50721: PUSH
50722: LD_INT 4
50724: PUSH
50725: LD_INT 5
50727: PUSH
50728: LD_INT 6
50730: PUSH
50731: LD_INT 7
50733: PUSH
50734: LD_INT 8
50736: PUSH
50737: LD_INT 9
50739: PUSH
50740: LD_INT 10
50742: PUSH
50743: LD_INT 11
50745: PUSH
50746: LD_INT 12
50748: PUSH
50749: LD_INT 13
50751: PUSH
50752: LD_INT 14
50754: PUSH
50755: LD_INT 15
50757: PUSH
50758: LD_INT 16
50760: PUSH
50761: LD_INT 17
50763: PUSH
50764: LD_INT 18
50766: PUSH
50767: LD_INT 19
50769: PUSH
50770: LD_INT 20
50772: PUSH
50773: LD_INT 21
50775: PUSH
50776: LD_INT 22
50778: PUSH
50779: LD_INT 23
50781: PUSH
50782: LD_INT 24
50784: PUSH
50785: LD_INT 25
50787: PUSH
50788: LD_INT 26
50790: PUSH
50791: LD_INT 27
50793: PUSH
50794: LD_INT 28
50796: PUSH
50797: LD_INT 29
50799: PUSH
50800: LD_INT 30
50802: PUSH
50803: LD_INT 31
50805: PUSH
50806: LD_INT 32
50808: PUSH
50809: LD_INT 33
50811: PUSH
50812: LD_INT 34
50814: PUSH
50815: LD_INT 36
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 101
50857: PUSH
50858: LD_INT 102
50860: PUSH
50861: LD_INT 103
50863: PUSH
50864: LD_INT 104
50866: PUSH
50867: LD_INT 105
50869: PUSH
50870: LD_INT 106
50872: PUSH
50873: LD_INT 107
50875: PUSH
50876: LD_INT 108
50878: PUSH
50879: LD_INT 109
50881: PUSH
50882: LD_INT 110
50884: PUSH
50885: LD_INT 111
50887: PUSH
50888: LD_INT 112
50890: PUSH
50891: LD_INT 113
50893: PUSH
50894: LD_INT 114
50896: PUSH
50897: LD_INT 116
50899: PUSH
50900: LD_INT 117
50902: PUSH
50903: LD_INT 118
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: ST_TO_ADDR
50929: GO 51328
50931: LD_INT 18
50933: DOUBLE
50934: EQUAL
50935: IFTRUE 50939
50937: GO 51087
50939: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50940: LD_ADDR_VAR 0 2
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 4
50950: PUSH
50951: LD_INT 5
50953: PUSH
50954: LD_INT 7
50956: PUSH
50957: LD_INT 11
50959: PUSH
50960: LD_INT 12
50962: PUSH
50963: LD_INT 15
50965: PUSH
50966: LD_INT 16
50968: PUSH
50969: LD_INT 20
50971: PUSH
50972: LD_INT 21
50974: PUSH
50975: LD_INT 22
50977: PUSH
50978: LD_INT 23
50980: PUSH
50981: LD_INT 25
50983: PUSH
50984: LD_INT 26
50986: PUSH
50987: LD_INT 30
50989: PUSH
50990: LD_INT 31
50992: PUSH
50993: LD_INT 32
50995: PUSH
50996: LD_INT 33
50998: PUSH
50999: LD_INT 34
51001: PUSH
51002: LD_INT 35
51004: PUSH
51005: LD_INT 36
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 101
51033: PUSH
51034: LD_INT 102
51036: PUSH
51037: LD_INT 103
51039: PUSH
51040: LD_INT 106
51042: PUSH
51043: LD_INT 108
51045: PUSH
51046: LD_INT 112
51048: PUSH
51049: LD_INT 113
51051: PUSH
51052: LD_INT 114
51054: PUSH
51055: LD_INT 115
51057: PUSH
51058: LD_INT 116
51060: PUSH
51061: LD_INT 117
51063: PUSH
51064: LD_INT 118
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: ST_TO_ADDR
51085: GO 51328
51087: LD_INT 19
51089: DOUBLE
51090: EQUAL
51091: IFTRUE 51095
51093: GO 51327
51095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51096: LD_ADDR_VAR 0 2
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: LD_INT 5
51115: PUSH
51116: LD_INT 6
51118: PUSH
51119: LD_INT 7
51121: PUSH
51122: LD_INT 8
51124: PUSH
51125: LD_INT 9
51127: PUSH
51128: LD_INT 10
51130: PUSH
51131: LD_INT 11
51133: PUSH
51134: LD_INT 12
51136: PUSH
51137: LD_INT 13
51139: PUSH
51140: LD_INT 14
51142: PUSH
51143: LD_INT 15
51145: PUSH
51146: LD_INT 16
51148: PUSH
51149: LD_INT 17
51151: PUSH
51152: LD_INT 18
51154: PUSH
51155: LD_INT 19
51157: PUSH
51158: LD_INT 20
51160: PUSH
51161: LD_INT 21
51163: PUSH
51164: LD_INT 22
51166: PUSH
51167: LD_INT 23
51169: PUSH
51170: LD_INT 24
51172: PUSH
51173: LD_INT 25
51175: PUSH
51176: LD_INT 26
51178: PUSH
51179: LD_INT 27
51181: PUSH
51182: LD_INT 28
51184: PUSH
51185: LD_INT 29
51187: PUSH
51188: LD_INT 30
51190: PUSH
51191: LD_INT 31
51193: PUSH
51194: LD_INT 32
51196: PUSH
51197: LD_INT 33
51199: PUSH
51200: LD_INT 34
51202: PUSH
51203: LD_INT 35
51205: PUSH
51206: LD_INT 36
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 101
51249: PUSH
51250: LD_INT 102
51252: PUSH
51253: LD_INT 103
51255: PUSH
51256: LD_INT 104
51258: PUSH
51259: LD_INT 105
51261: PUSH
51262: LD_INT 106
51264: PUSH
51265: LD_INT 107
51267: PUSH
51268: LD_INT 108
51270: PUSH
51271: LD_INT 109
51273: PUSH
51274: LD_INT 110
51276: PUSH
51277: LD_INT 111
51279: PUSH
51280: LD_INT 112
51282: PUSH
51283: LD_INT 113
51285: PUSH
51286: LD_INT 114
51288: PUSH
51289: LD_INT 115
51291: PUSH
51292: LD_INT 116
51294: PUSH
51295: LD_INT 117
51297: PUSH
51298: LD_INT 118
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: ST_TO_ADDR
51325: GO 51328
51327: POP
// end else
51328: GO 51559
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51330: LD_ADDR_VAR 0 2
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 4
51346: PUSH
51347: LD_INT 5
51349: PUSH
51350: LD_INT 6
51352: PUSH
51353: LD_INT 7
51355: PUSH
51356: LD_INT 8
51358: PUSH
51359: LD_INT 9
51361: PUSH
51362: LD_INT 10
51364: PUSH
51365: LD_INT 11
51367: PUSH
51368: LD_INT 12
51370: PUSH
51371: LD_INT 13
51373: PUSH
51374: LD_INT 14
51376: PUSH
51377: LD_INT 15
51379: PUSH
51380: LD_INT 16
51382: PUSH
51383: LD_INT 17
51385: PUSH
51386: LD_INT 18
51388: PUSH
51389: LD_INT 19
51391: PUSH
51392: LD_INT 20
51394: PUSH
51395: LD_INT 21
51397: PUSH
51398: LD_INT 22
51400: PUSH
51401: LD_INT 23
51403: PUSH
51404: LD_INT 24
51406: PUSH
51407: LD_INT 25
51409: PUSH
51410: LD_INT 26
51412: PUSH
51413: LD_INT 27
51415: PUSH
51416: LD_INT 28
51418: PUSH
51419: LD_INT 29
51421: PUSH
51422: LD_INT 30
51424: PUSH
51425: LD_INT 31
51427: PUSH
51428: LD_INT 32
51430: PUSH
51431: LD_INT 33
51433: PUSH
51434: LD_INT 34
51436: PUSH
51437: LD_INT 35
51439: PUSH
51440: LD_INT 36
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 101
51483: PUSH
51484: LD_INT 102
51486: PUSH
51487: LD_INT 103
51489: PUSH
51490: LD_INT 104
51492: PUSH
51493: LD_INT 105
51495: PUSH
51496: LD_INT 106
51498: PUSH
51499: LD_INT 107
51501: PUSH
51502: LD_INT 108
51504: PUSH
51505: LD_INT 109
51507: PUSH
51508: LD_INT 110
51510: PUSH
51511: LD_INT 111
51513: PUSH
51514: LD_INT 112
51516: PUSH
51517: LD_INT 113
51519: PUSH
51520: LD_INT 114
51522: PUSH
51523: LD_INT 115
51525: PUSH
51526: LD_INT 116
51528: PUSH
51529: LD_INT 117
51531: PUSH
51532: LD_INT 118
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// if result then
51559: LD_VAR 0 2
51563: IFFALSE 52349
// begin normal :=  ;
51565: LD_ADDR_VAR 0 5
51569: PUSH
51570: LD_STRING 
51572: ST_TO_ADDR
// hardcore :=  ;
51573: LD_ADDR_VAR 0 6
51577: PUSH
51578: LD_STRING 
51580: ST_TO_ADDR
// active :=  ;
51581: LD_ADDR_VAR 0 7
51585: PUSH
51586: LD_STRING 
51588: ST_TO_ADDR
// for i = 1 to normalCounter do
51589: LD_ADDR_VAR 0 8
51593: PUSH
51594: DOUBLE
51595: LD_INT 1
51597: DEC
51598: ST_TO_ADDR
51599: LD_EXP 29
51603: PUSH
51604: FOR_TO
51605: IFFALSE 51706
// begin tmp := 0 ;
51607: LD_ADDR_VAR 0 3
51611: PUSH
51612: LD_STRING 0
51614: ST_TO_ADDR
// if result [ 1 ] then
51615: LD_VAR 0 2
51619: PUSH
51620: LD_INT 1
51622: ARRAY
51623: IFFALSE 51688
// if result [ 1 ] [ 1 ] = i then
51625: LD_VAR 0 2
51629: PUSH
51630: LD_INT 1
51632: ARRAY
51633: PUSH
51634: LD_INT 1
51636: ARRAY
51637: PUSH
51638: LD_VAR 0 8
51642: EQUAL
51643: IFFALSE 51688
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51645: LD_ADDR_VAR 0 2
51649: PUSH
51650: LD_VAR 0 2
51654: PPUSH
51655: LD_INT 1
51657: PPUSH
51658: LD_VAR 0 2
51662: PUSH
51663: LD_INT 1
51665: ARRAY
51666: PPUSH
51667: LD_INT 1
51669: PPUSH
51670: CALL_OW 3
51674: PPUSH
51675: CALL_OW 1
51679: ST_TO_ADDR
// tmp := 1 ;
51680: LD_ADDR_VAR 0 3
51684: PUSH
51685: LD_STRING 1
51687: ST_TO_ADDR
// end ; normal := normal & tmp ;
51688: LD_ADDR_VAR 0 5
51692: PUSH
51693: LD_VAR 0 5
51697: PUSH
51698: LD_VAR 0 3
51702: STR
51703: ST_TO_ADDR
// end ;
51704: GO 51604
51706: POP
51707: POP
// for i = 1 to hardcoreCounter do
51708: LD_ADDR_VAR 0 8
51712: PUSH
51713: DOUBLE
51714: LD_INT 1
51716: DEC
51717: ST_TO_ADDR
51718: LD_EXP 30
51722: PUSH
51723: FOR_TO
51724: IFFALSE 51829
// begin tmp := 0 ;
51726: LD_ADDR_VAR 0 3
51730: PUSH
51731: LD_STRING 0
51733: ST_TO_ADDR
// if result [ 2 ] then
51734: LD_VAR 0 2
51738: PUSH
51739: LD_INT 2
51741: ARRAY
51742: IFFALSE 51811
// if result [ 2 ] [ 1 ] = 100 + i then
51744: LD_VAR 0 2
51748: PUSH
51749: LD_INT 2
51751: ARRAY
51752: PUSH
51753: LD_INT 1
51755: ARRAY
51756: PUSH
51757: LD_INT 100
51759: PUSH
51760: LD_VAR 0 8
51764: PLUS
51765: EQUAL
51766: IFFALSE 51811
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51768: LD_ADDR_VAR 0 2
51772: PUSH
51773: LD_VAR 0 2
51777: PPUSH
51778: LD_INT 2
51780: PPUSH
51781: LD_VAR 0 2
51785: PUSH
51786: LD_INT 2
51788: ARRAY
51789: PPUSH
51790: LD_INT 1
51792: PPUSH
51793: CALL_OW 3
51797: PPUSH
51798: CALL_OW 1
51802: ST_TO_ADDR
// tmp := 1 ;
51803: LD_ADDR_VAR 0 3
51807: PUSH
51808: LD_STRING 1
51810: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51811: LD_ADDR_VAR 0 6
51815: PUSH
51816: LD_VAR 0 6
51820: PUSH
51821: LD_VAR 0 3
51825: STR
51826: ST_TO_ADDR
// end ;
51827: GO 51723
51829: POP
51830: POP
// if isGameLoad then
51831: LD_VAR 0 1
51835: IFFALSE 52310
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51837: LD_ADDR_VAR 0 4
51841: PUSH
51842: LD_EXP 33
51846: PUSH
51847: LD_EXP 32
51851: PUSH
51852: LD_EXP 34
51856: PUSH
51857: LD_EXP 31
51861: PUSH
51862: LD_EXP 35
51866: PUSH
51867: LD_EXP 36
51871: PUSH
51872: LD_EXP 37
51876: PUSH
51877: LD_EXP 38
51881: PUSH
51882: LD_EXP 39
51886: PUSH
51887: LD_EXP 40
51891: PUSH
51892: LD_EXP 41
51896: PUSH
51897: LD_EXP 42
51901: PUSH
51902: LD_EXP 43
51906: PUSH
51907: LD_EXP 44
51911: PUSH
51912: LD_EXP 52
51916: PUSH
51917: LD_EXP 53
51921: PUSH
51922: LD_EXP 54
51926: PUSH
51927: LD_EXP 55
51931: PUSH
51932: LD_EXP 57
51936: PUSH
51937: LD_EXP 58
51941: PUSH
51942: LD_EXP 59
51946: PUSH
51947: LD_EXP 62
51951: PUSH
51952: LD_EXP 64
51956: PUSH
51957: LD_EXP 65
51961: PUSH
51962: LD_EXP 66
51966: PUSH
51967: LD_EXP 68
51971: PUSH
51972: LD_EXP 69
51976: PUSH
51977: LD_EXP 72
51981: PUSH
51982: LD_EXP 73
51986: PUSH
51987: LD_EXP 74
51991: PUSH
51992: LD_EXP 75
51996: PUSH
51997: LD_EXP 76
52001: PUSH
52002: LD_EXP 77
52006: PUSH
52007: LD_EXP 78
52011: PUSH
52012: LD_EXP 79
52016: PUSH
52017: LD_EXP 80
52021: PUSH
52022: LD_EXP 45
52026: PUSH
52027: LD_EXP 46
52031: PUSH
52032: LD_EXP 49
52036: PUSH
52037: LD_EXP 50
52041: PUSH
52042: LD_EXP 51
52046: PUSH
52047: LD_EXP 47
52051: PUSH
52052: LD_EXP 48
52056: PUSH
52057: LD_EXP 56
52061: PUSH
52062: LD_EXP 60
52066: PUSH
52067: LD_EXP 61
52071: PUSH
52072: LD_EXP 63
52076: PUSH
52077: LD_EXP 67
52081: PUSH
52082: LD_EXP 70
52086: PUSH
52087: LD_EXP 71
52091: PUSH
52092: LD_EXP 81
52096: PUSH
52097: LD_EXP 82
52101: PUSH
52102: LD_EXP 83
52106: PUSH
52107: LD_EXP 84
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: ST_TO_ADDR
// tmp :=  ;
52168: LD_ADDR_VAR 0 3
52172: PUSH
52173: LD_STRING 
52175: ST_TO_ADDR
// for i = 1 to normalCounter do
52176: LD_ADDR_VAR 0 8
52180: PUSH
52181: DOUBLE
52182: LD_INT 1
52184: DEC
52185: ST_TO_ADDR
52186: LD_EXP 29
52190: PUSH
52191: FOR_TO
52192: IFFALSE 52228
// begin if flags [ i ] then
52194: LD_VAR 0 4
52198: PUSH
52199: LD_VAR 0 8
52203: ARRAY
52204: IFFALSE 52226
// tmp := tmp & i & ; ;
52206: LD_ADDR_VAR 0 3
52210: PUSH
52211: LD_VAR 0 3
52215: PUSH
52216: LD_VAR 0 8
52220: STR
52221: PUSH
52222: LD_STRING ;
52224: STR
52225: ST_TO_ADDR
// end ;
52226: GO 52191
52228: POP
52229: POP
// for i = 1 to hardcoreCounter do
52230: LD_ADDR_VAR 0 8
52234: PUSH
52235: DOUBLE
52236: LD_INT 1
52238: DEC
52239: ST_TO_ADDR
52240: LD_EXP 30
52244: PUSH
52245: FOR_TO
52246: IFFALSE 52292
// begin if flags [ normalCounter + i ] then
52248: LD_VAR 0 4
52252: PUSH
52253: LD_EXP 29
52257: PUSH
52258: LD_VAR 0 8
52262: PLUS
52263: ARRAY
52264: IFFALSE 52290
// tmp := tmp & ( 100 + i ) & ; ;
52266: LD_ADDR_VAR 0 3
52270: PUSH
52271: LD_VAR 0 3
52275: PUSH
52276: LD_INT 100
52278: PUSH
52279: LD_VAR 0 8
52283: PLUS
52284: STR
52285: PUSH
52286: LD_STRING ;
52288: STR
52289: ST_TO_ADDR
// end ;
52290: GO 52245
52292: POP
52293: POP
// if tmp then
52294: LD_VAR 0 3
52298: IFFALSE 52310
// active := tmp ;
52300: LD_ADDR_VAR 0 7
52304: PUSH
52305: LD_VAR 0 3
52309: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52310: LD_STRING getStreamItemsFromMission("
52312: PUSH
52313: LD_VAR 0 5
52317: STR
52318: PUSH
52319: LD_STRING ","
52321: STR
52322: PUSH
52323: LD_VAR 0 6
52327: STR
52328: PUSH
52329: LD_STRING ","
52331: STR
52332: PUSH
52333: LD_VAR 0 7
52337: STR
52338: PUSH
52339: LD_STRING ")
52341: STR
52342: PPUSH
52343: CALL_OW 559
// end else
52347: GO 52356
// ToLua ( getStreamItemsFromMission("","","") ) ;
52349: LD_STRING getStreamItemsFromMission("","","")
52351: PPUSH
52352: CALL_OW 559
// end ;
52356: LD_VAR 0 2
52360: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52361: LD_EXP 28
52365: PUSH
52366: LD_EXP 33
52370: AND
52371: IFFALSE 52495
52373: GO 52375
52375: DISABLE
52376: LD_INT 0
52378: PPUSH
52379: PPUSH
// begin enable ;
52380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52381: LD_ADDR_VAR 0 2
52385: PUSH
52386: LD_INT 22
52388: PUSH
52389: LD_OWVAR 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 34
52403: PUSH
52404: LD_INT 7
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 34
52413: PUSH
52414: LD_INT 45
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 34
52423: PUSH
52424: LD_INT 28
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 34
52433: PUSH
52434: LD_INT 47
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PPUSH
52452: CALL_OW 69
52456: ST_TO_ADDR
// if not tmp then
52457: LD_VAR 0 2
52461: NOT
52462: IFFALSE 52466
// exit ;
52464: GO 52495
// for i in tmp do
52466: LD_ADDR_VAR 0 1
52470: PUSH
52471: LD_VAR 0 2
52475: PUSH
52476: FOR_IN
52477: IFFALSE 52493
// begin SetLives ( i , 0 ) ;
52479: LD_VAR 0 1
52483: PPUSH
52484: LD_INT 0
52486: PPUSH
52487: CALL_OW 234
// end ;
52491: GO 52476
52493: POP
52494: POP
// end ;
52495: PPOPN 2
52497: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52498: LD_EXP 28
52502: PUSH
52503: LD_EXP 34
52507: AND
52508: IFFALSE 52592
52510: GO 52512
52512: DISABLE
52513: LD_INT 0
52515: PPUSH
52516: PPUSH
// begin enable ;
52517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52518: LD_ADDR_VAR 0 2
52522: PUSH
52523: LD_INT 22
52525: PUSH
52526: LD_OWVAR 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 32
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PPUSH
52549: CALL_OW 69
52553: ST_TO_ADDR
// if not tmp then
52554: LD_VAR 0 2
52558: NOT
52559: IFFALSE 52563
// exit ;
52561: GO 52592
// for i in tmp do
52563: LD_ADDR_VAR 0 1
52567: PUSH
52568: LD_VAR 0 2
52572: PUSH
52573: FOR_IN
52574: IFFALSE 52590
// begin SetLives ( i , 0 ) ;
52576: LD_VAR 0 1
52580: PPUSH
52581: LD_INT 0
52583: PPUSH
52584: CALL_OW 234
// end ;
52588: GO 52573
52590: POP
52591: POP
// end ;
52592: PPOPN 2
52594: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52595: LD_EXP 28
52599: PUSH
52600: LD_EXP 31
52604: AND
52605: IFFALSE 52698
52607: GO 52609
52609: DISABLE
52610: LD_INT 0
52612: PPUSH
// begin enable ;
52613: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52614: LD_ADDR_VAR 0 1
52618: PUSH
52619: LD_INT 22
52621: PUSH
52622: LD_OWVAR 2
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 25
52636: PUSH
52637: LD_INT 5
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 25
52646: PUSH
52647: LD_INT 9
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 25
52656: PUSH
52657: LD_INT 8
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PPUSH
52674: CALL_OW 69
52678: PUSH
52679: FOR_IN
52680: IFFALSE 52696
// begin SetClass ( i , 1 ) ;
52682: LD_VAR 0 1
52686: PPUSH
52687: LD_INT 1
52689: PPUSH
52690: CALL_OW 336
// end ;
52694: GO 52679
52696: POP
52697: POP
// end ;
52698: PPOPN 1
52700: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52701: LD_EXP 28
52705: PUSH
52706: LD_EXP 32
52710: AND
52711: PUSH
52712: LD_OWVAR 65
52716: PUSH
52717: LD_INT 7
52719: LESS
52720: AND
52721: IFFALSE 52735
52723: GO 52725
52725: DISABLE
// begin enable ;
52726: ENABLE
// game_speed := 7 ;
52727: LD_ADDR_OWVAR 65
52731: PUSH
52732: LD_INT 7
52734: ST_TO_ADDR
// end ;
52735: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52736: LD_EXP 28
52740: PUSH
52741: LD_EXP 35
52745: AND
52746: IFFALSE 52948
52748: GO 52750
52750: DISABLE
52751: LD_INT 0
52753: PPUSH
52754: PPUSH
52755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: LD_INT 81
52763: PUSH
52764: LD_OWVAR 2
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 21
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PPUSH
52787: CALL_OW 69
52791: ST_TO_ADDR
// if not tmp then
52792: LD_VAR 0 3
52796: NOT
52797: IFFALSE 52801
// exit ;
52799: GO 52948
// if tmp > 5 then
52801: LD_VAR 0 3
52805: PUSH
52806: LD_INT 5
52808: GREATER
52809: IFFALSE 52821
// k := 5 else
52811: LD_ADDR_VAR 0 2
52815: PUSH
52816: LD_INT 5
52818: ST_TO_ADDR
52819: GO 52831
// k := tmp ;
52821: LD_ADDR_VAR 0 2
52825: PUSH
52826: LD_VAR 0 3
52830: ST_TO_ADDR
// for i := 1 to k do
52831: LD_ADDR_VAR 0 1
52835: PUSH
52836: DOUBLE
52837: LD_INT 1
52839: DEC
52840: ST_TO_ADDR
52841: LD_VAR 0 2
52845: PUSH
52846: FOR_TO
52847: IFFALSE 52946
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52849: LD_VAR 0 3
52853: PUSH
52854: LD_VAR 0 1
52858: ARRAY
52859: PPUSH
52860: LD_VAR 0 1
52864: PUSH
52865: LD_INT 4
52867: MOD
52868: PUSH
52869: LD_INT 1
52871: PLUS
52872: PPUSH
52873: CALL_OW 259
52877: PUSH
52878: LD_INT 10
52880: LESS
52881: IFFALSE 52944
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52883: LD_VAR 0 3
52887: PUSH
52888: LD_VAR 0 1
52892: ARRAY
52893: PPUSH
52894: LD_VAR 0 1
52898: PUSH
52899: LD_INT 4
52901: MOD
52902: PUSH
52903: LD_INT 1
52905: PLUS
52906: PPUSH
52907: LD_VAR 0 3
52911: PUSH
52912: LD_VAR 0 1
52916: ARRAY
52917: PPUSH
52918: LD_VAR 0 1
52922: PUSH
52923: LD_INT 4
52925: MOD
52926: PUSH
52927: LD_INT 1
52929: PLUS
52930: PPUSH
52931: CALL_OW 259
52935: PUSH
52936: LD_INT 1
52938: PLUS
52939: PPUSH
52940: CALL_OW 237
52944: GO 52846
52946: POP
52947: POP
// end ;
52948: PPOPN 3
52950: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52951: LD_EXP 28
52955: PUSH
52956: LD_EXP 36
52960: AND
52961: IFFALSE 52981
52963: GO 52965
52965: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52966: LD_INT 4
52968: PPUSH
52969: LD_OWVAR 2
52973: PPUSH
52974: LD_INT 0
52976: PPUSH
52977: CALL_OW 324
52981: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52982: LD_EXP 28
52986: PUSH
52987: LD_EXP 65
52991: AND
52992: IFFALSE 53012
52994: GO 52996
52996: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52997: LD_INT 19
52999: PPUSH
53000: LD_OWVAR 2
53004: PPUSH
53005: LD_INT 0
53007: PPUSH
53008: CALL_OW 324
53012: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53013: LD_EXP 28
53017: PUSH
53018: LD_EXP 37
53022: AND
53023: IFFALSE 53125
53025: GO 53027
53027: DISABLE
53028: LD_INT 0
53030: PPUSH
53031: PPUSH
// begin enable ;
53032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53033: LD_ADDR_VAR 0 2
53037: PUSH
53038: LD_INT 22
53040: PUSH
53041: LD_OWVAR 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 34
53055: PUSH
53056: LD_INT 11
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 34
53065: PUSH
53066: LD_INT 30
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PPUSH
53082: CALL_OW 69
53086: ST_TO_ADDR
// if not tmp then
53087: LD_VAR 0 2
53091: NOT
53092: IFFALSE 53096
// exit ;
53094: GO 53125
// for i in tmp do
53096: LD_ADDR_VAR 0 1
53100: PUSH
53101: LD_VAR 0 2
53105: PUSH
53106: FOR_IN
53107: IFFALSE 53123
// begin SetLives ( i , 0 ) ;
53109: LD_VAR 0 1
53113: PPUSH
53114: LD_INT 0
53116: PPUSH
53117: CALL_OW 234
// end ;
53121: GO 53106
53123: POP
53124: POP
// end ;
53125: PPOPN 2
53127: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53128: LD_EXP 28
53132: PUSH
53133: LD_EXP 38
53137: AND
53138: IFFALSE 53158
53140: GO 53142
53142: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53143: LD_INT 32
53145: PPUSH
53146: LD_OWVAR 2
53150: PPUSH
53151: LD_INT 0
53153: PPUSH
53154: CALL_OW 324
53158: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53159: LD_EXP 28
53163: PUSH
53164: LD_EXP 39
53168: AND
53169: IFFALSE 53350
53171: GO 53173
53173: DISABLE
53174: LD_INT 0
53176: PPUSH
53177: PPUSH
53178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53179: LD_ADDR_VAR 0 2
53183: PUSH
53184: LD_INT 22
53186: PUSH
53187: LD_OWVAR 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 33
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PPUSH
53210: CALL_OW 69
53214: ST_TO_ADDR
// if not tmp then
53215: LD_VAR 0 2
53219: NOT
53220: IFFALSE 53224
// exit ;
53222: GO 53350
// side := 0 ;
53224: LD_ADDR_VAR 0 3
53228: PUSH
53229: LD_INT 0
53231: ST_TO_ADDR
// for i := 1 to 8 do
53232: LD_ADDR_VAR 0 1
53236: PUSH
53237: DOUBLE
53238: LD_INT 1
53240: DEC
53241: ST_TO_ADDR
53242: LD_INT 8
53244: PUSH
53245: FOR_TO
53246: IFFALSE 53294
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53248: LD_OWVAR 2
53252: PUSH
53253: LD_VAR 0 1
53257: NONEQUAL
53258: PUSH
53259: LD_OWVAR 2
53263: PPUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL_OW 81
53273: PUSH
53274: LD_INT 2
53276: EQUAL
53277: AND
53278: IFFALSE 53292
// begin side := i ;
53280: LD_ADDR_VAR 0 3
53284: PUSH
53285: LD_VAR 0 1
53289: ST_TO_ADDR
// break ;
53290: GO 53294
// end ;
53292: GO 53245
53294: POP
53295: POP
// if not side then
53296: LD_VAR 0 3
53300: NOT
53301: IFFALSE 53305
// exit ;
53303: GO 53350
// for i := 1 to tmp do
53305: LD_ADDR_VAR 0 1
53309: PUSH
53310: DOUBLE
53311: LD_INT 1
53313: DEC
53314: ST_TO_ADDR
53315: LD_VAR 0 2
53319: PUSH
53320: FOR_TO
53321: IFFALSE 53348
// if Prob ( 60 ) then
53323: LD_INT 60
53325: PPUSH
53326: CALL_OW 13
53330: IFFALSE 53346
// SetSide ( i , side ) ;
53332: LD_VAR 0 1
53336: PPUSH
53337: LD_VAR 0 3
53341: PPUSH
53342: CALL_OW 235
53346: GO 53320
53348: POP
53349: POP
// end ;
53350: PPOPN 3
53352: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53353: LD_EXP 28
53357: PUSH
53358: LD_EXP 41
53362: AND
53363: IFFALSE 53482
53365: GO 53367
53367: DISABLE
53368: LD_INT 0
53370: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53371: LD_ADDR_VAR 0 1
53375: PUSH
53376: LD_INT 22
53378: PUSH
53379: LD_OWVAR 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 21
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 23
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: PPUSH
53420: CALL_OW 69
53424: PUSH
53425: FOR_IN
53426: IFFALSE 53480
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53428: LD_VAR 0 1
53432: PPUSH
53433: CALL_OW 257
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 4
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: IN
53456: IFFALSE 53478
// SetClass ( un , rand ( 1 , 4 ) ) ;
53458: LD_VAR 0 1
53462: PPUSH
53463: LD_INT 1
53465: PPUSH
53466: LD_INT 4
53468: PPUSH
53469: CALL_OW 12
53473: PPUSH
53474: CALL_OW 336
53478: GO 53425
53480: POP
53481: POP
// end ;
53482: PPOPN 1
53484: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53485: LD_EXP 28
53489: PUSH
53490: LD_EXP 40
53494: AND
53495: IFFALSE 53574
53497: GO 53499
53499: DISABLE
53500: LD_INT 0
53502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53503: LD_ADDR_VAR 0 1
53507: PUSH
53508: LD_INT 22
53510: PUSH
53511: LD_OWVAR 2
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 21
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PPUSH
53534: CALL_OW 69
53538: ST_TO_ADDR
// if not tmp then
53539: LD_VAR 0 1
53543: NOT
53544: IFFALSE 53548
// exit ;
53546: GO 53574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53548: LD_VAR 0 1
53552: PUSH
53553: LD_INT 1
53555: PPUSH
53556: LD_VAR 0 1
53560: PPUSH
53561: CALL_OW 12
53565: ARRAY
53566: PPUSH
53567: LD_INT 100
53569: PPUSH
53570: CALL_OW 234
// end ;
53574: PPOPN 1
53576: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53577: LD_EXP 28
53581: PUSH
53582: LD_EXP 42
53586: AND
53587: IFFALSE 53685
53589: GO 53591
53591: DISABLE
53592: LD_INT 0
53594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53595: LD_ADDR_VAR 0 1
53599: PUSH
53600: LD_INT 22
53602: PUSH
53603: LD_OWVAR 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 21
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PPUSH
53626: CALL_OW 69
53630: ST_TO_ADDR
// if not tmp then
53631: LD_VAR 0 1
53635: NOT
53636: IFFALSE 53640
// exit ;
53638: GO 53685
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53640: LD_VAR 0 1
53644: PUSH
53645: LD_INT 1
53647: PPUSH
53648: LD_VAR 0 1
53652: PPUSH
53653: CALL_OW 12
53657: ARRAY
53658: PPUSH
53659: LD_INT 1
53661: PPUSH
53662: LD_INT 4
53664: PPUSH
53665: CALL_OW 12
53669: PPUSH
53670: LD_INT 3000
53672: PPUSH
53673: LD_INT 9000
53675: PPUSH
53676: CALL_OW 12
53680: PPUSH
53681: CALL_OW 492
// end ;
53685: PPOPN 1
53687: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53688: LD_EXP 28
53692: PUSH
53693: LD_EXP 43
53697: AND
53698: IFFALSE 53718
53700: GO 53702
53702: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53703: LD_INT 1
53705: PPUSH
53706: LD_OWVAR 2
53710: PPUSH
53711: LD_INT 0
53713: PPUSH
53714: CALL_OW 324
53718: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53719: LD_EXP 28
53723: PUSH
53724: LD_EXP 44
53728: AND
53729: IFFALSE 53812
53731: GO 53733
53733: DISABLE
53734: LD_INT 0
53736: PPUSH
53737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53738: LD_ADDR_VAR 0 2
53742: PUSH
53743: LD_INT 22
53745: PUSH
53746: LD_OWVAR 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 21
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PPUSH
53769: CALL_OW 69
53773: ST_TO_ADDR
// if not tmp then
53774: LD_VAR 0 2
53778: NOT
53779: IFFALSE 53783
// exit ;
53781: GO 53812
// for i in tmp do
53783: LD_ADDR_VAR 0 1
53787: PUSH
53788: LD_VAR 0 2
53792: PUSH
53793: FOR_IN
53794: IFFALSE 53810
// SetBLevel ( i , 10 ) ;
53796: LD_VAR 0 1
53800: PPUSH
53801: LD_INT 10
53803: PPUSH
53804: CALL_OW 241
53808: GO 53793
53810: POP
53811: POP
// end ;
53812: PPOPN 2
53814: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53815: LD_EXP 28
53819: PUSH
53820: LD_EXP 45
53824: AND
53825: IFFALSE 53936
53827: GO 53829
53829: DISABLE
53830: LD_INT 0
53832: PPUSH
53833: PPUSH
53834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53835: LD_ADDR_VAR 0 3
53839: PUSH
53840: LD_INT 22
53842: PUSH
53843: LD_OWVAR 2
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 25
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PPUSH
53866: CALL_OW 69
53870: ST_TO_ADDR
// if not tmp then
53871: LD_VAR 0 3
53875: NOT
53876: IFFALSE 53880
// exit ;
53878: GO 53936
// un := tmp [ rand ( 1 , tmp ) ] ;
53880: LD_ADDR_VAR 0 2
53884: PUSH
53885: LD_VAR 0 3
53889: PUSH
53890: LD_INT 1
53892: PPUSH
53893: LD_VAR 0 3
53897: PPUSH
53898: CALL_OW 12
53902: ARRAY
53903: ST_TO_ADDR
// if Crawls ( un ) then
53904: LD_VAR 0 2
53908: PPUSH
53909: CALL_OW 318
53913: IFFALSE 53924
// ComWalk ( un ) ;
53915: LD_VAR 0 2
53919: PPUSH
53920: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53924: LD_VAR 0 2
53928: PPUSH
53929: LD_INT 5
53931: PPUSH
53932: CALL_OW 336
// end ;
53936: PPOPN 3
53938: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53939: LD_EXP 28
53943: PUSH
53944: LD_EXP 46
53948: AND
53949: PUSH
53950: LD_OWVAR 67
53954: PUSH
53955: LD_INT 4
53957: LESS
53958: AND
53959: IFFALSE 53978
53961: GO 53963
53963: DISABLE
// begin Difficulty := Difficulty + 1 ;
53964: LD_ADDR_OWVAR 67
53968: PUSH
53969: LD_OWVAR 67
53973: PUSH
53974: LD_INT 1
53976: PLUS
53977: ST_TO_ADDR
// end ;
53978: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53979: LD_EXP 28
53983: PUSH
53984: LD_EXP 47
53988: AND
53989: IFFALSE 54092
53991: GO 53993
53993: DISABLE
53994: LD_INT 0
53996: PPUSH
// begin for i := 1 to 5 do
53997: LD_ADDR_VAR 0 1
54001: PUSH
54002: DOUBLE
54003: LD_INT 1
54005: DEC
54006: ST_TO_ADDR
54007: LD_INT 5
54009: PUSH
54010: FOR_TO
54011: IFFALSE 54090
// begin uc_nation := nation_nature ;
54013: LD_ADDR_OWVAR 21
54017: PUSH
54018: LD_INT 0
54020: ST_TO_ADDR
// uc_side := 0 ;
54021: LD_ADDR_OWVAR 20
54025: PUSH
54026: LD_INT 0
54028: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54029: LD_ADDR_OWVAR 29
54033: PUSH
54034: LD_INT 12
54036: PUSH
54037: LD_INT 12
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// hc_agressivity := 20 ;
54044: LD_ADDR_OWVAR 35
54048: PUSH
54049: LD_INT 20
54051: ST_TO_ADDR
// hc_class := class_tiger ;
54052: LD_ADDR_OWVAR 28
54056: PUSH
54057: LD_INT 14
54059: ST_TO_ADDR
// hc_gallery :=  ;
54060: LD_ADDR_OWVAR 33
54064: PUSH
54065: LD_STRING 
54067: ST_TO_ADDR
// hc_name :=  ;
54068: LD_ADDR_OWVAR 26
54072: PUSH
54073: LD_STRING 
54075: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54076: CALL_OW 44
54080: PPUSH
54081: LD_INT 0
54083: PPUSH
54084: CALL_OW 51
// end ;
54088: GO 54010
54090: POP
54091: POP
// end ;
54092: PPOPN 1
54094: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54095: LD_EXP 28
54099: PUSH
54100: LD_EXP 48
54104: AND
54105: IFFALSE 54114
54107: GO 54109
54109: DISABLE
// StreamSibBomb ;
54110: CALL 54115 0 0
54114: END
// export function StreamSibBomb ; var i , x , y ; begin
54115: LD_INT 0
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
// result := false ;
54121: LD_ADDR_VAR 0 1
54125: PUSH
54126: LD_INT 0
54128: ST_TO_ADDR
// for i := 1 to 16 do
54129: LD_ADDR_VAR 0 2
54133: PUSH
54134: DOUBLE
54135: LD_INT 1
54137: DEC
54138: ST_TO_ADDR
54139: LD_INT 16
54141: PUSH
54142: FOR_TO
54143: IFFALSE 54342
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54145: LD_ADDR_VAR 0 3
54149: PUSH
54150: LD_INT 10
54152: PUSH
54153: LD_INT 20
54155: PUSH
54156: LD_INT 30
54158: PUSH
54159: LD_INT 40
54161: PUSH
54162: LD_INT 50
54164: PUSH
54165: LD_INT 60
54167: PUSH
54168: LD_INT 70
54170: PUSH
54171: LD_INT 80
54173: PUSH
54174: LD_INT 90
54176: PUSH
54177: LD_INT 100
54179: PUSH
54180: LD_INT 110
54182: PUSH
54183: LD_INT 120
54185: PUSH
54186: LD_INT 130
54188: PUSH
54189: LD_INT 140
54191: PUSH
54192: LD_INT 150
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PPUSH
54215: LD_INT 15
54217: PPUSH
54218: CALL_OW 12
54222: ARRAY
54223: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54224: LD_ADDR_VAR 0 4
54228: PUSH
54229: LD_INT 10
54231: PUSH
54232: LD_INT 20
54234: PUSH
54235: LD_INT 30
54237: PUSH
54238: LD_INT 40
54240: PUSH
54241: LD_INT 50
54243: PUSH
54244: LD_INT 60
54246: PUSH
54247: LD_INT 70
54249: PUSH
54250: LD_INT 80
54252: PUSH
54253: LD_INT 90
54255: PUSH
54256: LD_INT 100
54258: PUSH
54259: LD_INT 110
54261: PUSH
54262: LD_INT 120
54264: PUSH
54265: LD_INT 130
54267: PUSH
54268: LD_INT 140
54270: PUSH
54271: LD_INT 150
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PPUSH
54294: LD_INT 15
54296: PPUSH
54297: CALL_OW 12
54301: ARRAY
54302: ST_TO_ADDR
// if ValidHex ( x , y ) then
54303: LD_VAR 0 3
54307: PPUSH
54308: LD_VAR 0 4
54312: PPUSH
54313: CALL_OW 488
54317: IFFALSE 54340
// begin result := [ x , y ] ;
54319: LD_ADDR_VAR 0 1
54323: PUSH
54324: LD_VAR 0 3
54328: PUSH
54329: LD_VAR 0 4
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// break ;
54338: GO 54342
// end ; end ;
54340: GO 54142
54342: POP
54343: POP
// if result then
54344: LD_VAR 0 1
54348: IFFALSE 54408
// begin ToLua ( playSibBomb() ) ;
54350: LD_STRING playSibBomb()
54352: PPUSH
54353: CALL_OW 559
// wait ( 0 0$14 ) ;
54357: LD_INT 490
54359: PPUSH
54360: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54364: LD_VAR 0 1
54368: PUSH
54369: LD_INT 1
54371: ARRAY
54372: PPUSH
54373: LD_VAR 0 1
54377: PUSH
54378: LD_INT 2
54380: ARRAY
54381: PPUSH
54382: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54386: LD_VAR 0 1
54390: PUSH
54391: LD_INT 1
54393: ARRAY
54394: PPUSH
54395: LD_VAR 0 1
54399: PUSH
54400: LD_INT 2
54402: ARRAY
54403: PPUSH
54404: CALL_OW 429
// end ; end ;
54408: LD_VAR 0 1
54412: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54413: LD_EXP 28
54417: PUSH
54418: LD_EXP 50
54422: AND
54423: IFFALSE 54435
54425: GO 54427
54427: DISABLE
// YouLost (  ) ;
54428: LD_STRING 
54430: PPUSH
54431: CALL_OW 104
54435: END
// every 0 0$1 trigger StreamModeActive and sFog do
54436: LD_EXP 28
54440: PUSH
54441: LD_EXP 49
54445: AND
54446: IFFALSE 54460
54448: GO 54450
54450: DISABLE
// FogOff ( your_side ) ;
54451: LD_OWVAR 2
54455: PPUSH
54456: CALL_OW 344
54460: END
// every 0 0$1 trigger StreamModeActive and sSun do
54461: LD_EXP 28
54465: PUSH
54466: LD_EXP 51
54470: AND
54471: IFFALSE 54499
54473: GO 54475
54475: DISABLE
// begin solar_recharge_percent := 0 ;
54476: LD_ADDR_OWVAR 79
54480: PUSH
54481: LD_INT 0
54483: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54484: LD_INT 10500
54486: PPUSH
54487: CALL_OW 67
// solar_recharge_percent := 100 ;
54491: LD_ADDR_OWVAR 79
54495: PUSH
54496: LD_INT 100
54498: ST_TO_ADDR
// end ;
54499: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54500: LD_EXP 28
54504: PUSH
54505: LD_EXP 52
54509: AND
54510: IFFALSE 54749
54512: GO 54514
54514: DISABLE
54515: LD_INT 0
54517: PPUSH
54518: PPUSH
54519: PPUSH
// begin tmp := [ ] ;
54520: LD_ADDR_VAR 0 3
54524: PUSH
54525: EMPTY
54526: ST_TO_ADDR
// for i := 1 to 6 do
54527: LD_ADDR_VAR 0 1
54531: PUSH
54532: DOUBLE
54533: LD_INT 1
54535: DEC
54536: ST_TO_ADDR
54537: LD_INT 6
54539: PUSH
54540: FOR_TO
54541: IFFALSE 54646
// begin uc_nation := nation_nature ;
54543: LD_ADDR_OWVAR 21
54547: PUSH
54548: LD_INT 0
54550: ST_TO_ADDR
// uc_side := 0 ;
54551: LD_ADDR_OWVAR 20
54555: PUSH
54556: LD_INT 0
54558: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54559: LD_ADDR_OWVAR 29
54563: PUSH
54564: LD_INT 12
54566: PUSH
54567: LD_INT 12
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: ST_TO_ADDR
// hc_agressivity := 20 ;
54574: LD_ADDR_OWVAR 35
54578: PUSH
54579: LD_INT 20
54581: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54582: LD_ADDR_OWVAR 28
54586: PUSH
54587: LD_INT 17
54589: ST_TO_ADDR
// hc_gallery :=  ;
54590: LD_ADDR_OWVAR 33
54594: PUSH
54595: LD_STRING 
54597: ST_TO_ADDR
// hc_name :=  ;
54598: LD_ADDR_OWVAR 26
54602: PUSH
54603: LD_STRING 
54605: ST_TO_ADDR
// un := CreateHuman ;
54606: LD_ADDR_VAR 0 2
54610: PUSH
54611: CALL_OW 44
54615: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54616: LD_VAR 0 2
54620: PPUSH
54621: LD_INT 1
54623: PPUSH
54624: CALL_OW 51
// tmp := tmp ^ un ;
54628: LD_ADDR_VAR 0 3
54632: PUSH
54633: LD_VAR 0 3
54637: PUSH
54638: LD_VAR 0 2
54642: ADD
54643: ST_TO_ADDR
// end ;
54644: GO 54540
54646: POP
54647: POP
// repeat wait ( 0 0$1 ) ;
54648: LD_INT 35
54650: PPUSH
54651: CALL_OW 67
// for un in tmp do
54655: LD_ADDR_VAR 0 2
54659: PUSH
54660: LD_VAR 0 3
54664: PUSH
54665: FOR_IN
54666: IFFALSE 54740
// begin if IsDead ( un ) then
54668: LD_VAR 0 2
54672: PPUSH
54673: CALL_OW 301
54677: IFFALSE 54697
// begin tmp := tmp diff un ;
54679: LD_ADDR_VAR 0 3
54683: PUSH
54684: LD_VAR 0 3
54688: PUSH
54689: LD_VAR 0 2
54693: DIFF
54694: ST_TO_ADDR
// continue ;
54695: GO 54665
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54697: LD_VAR 0 2
54701: PPUSH
54702: LD_INT 3
54704: PUSH
54705: LD_INT 22
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PPUSH
54719: CALL_OW 69
54723: PPUSH
54724: LD_VAR 0 2
54728: PPUSH
54729: CALL_OW 74
54733: PPUSH
54734: CALL_OW 115
// end ;
54738: GO 54665
54740: POP
54741: POP
// until not tmp ;
54742: LD_VAR 0 3
54746: NOT
54747: IFFALSE 54648
// end ;
54749: PPOPN 3
54751: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54752: LD_EXP 28
54756: PUSH
54757: LD_EXP 53
54761: AND
54762: IFFALSE 54816
54764: GO 54766
54766: DISABLE
// begin ToLua ( displayTroll(); ) ;
54767: LD_STRING displayTroll();
54769: PPUSH
54770: CALL_OW 559
// wait ( 3 3$00 ) ;
54774: LD_INT 6300
54776: PPUSH
54777: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54781: LD_STRING hideTroll();
54783: PPUSH
54784: CALL_OW 559
// wait ( 1 1$00 ) ;
54788: LD_INT 2100
54790: PPUSH
54791: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54795: LD_STRING displayTroll();
54797: PPUSH
54798: CALL_OW 559
// wait ( 1 1$00 ) ;
54802: LD_INT 2100
54804: PPUSH
54805: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54809: LD_STRING hideTroll();
54811: PPUSH
54812: CALL_OW 559
// end ;
54816: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54817: LD_EXP 28
54821: PUSH
54822: LD_EXP 54
54826: AND
54827: IFFALSE 54890
54829: GO 54831
54831: DISABLE
54832: LD_INT 0
54834: PPUSH
// begin p := 0 ;
54835: LD_ADDR_VAR 0 1
54839: PUSH
54840: LD_INT 0
54842: ST_TO_ADDR
// repeat game_speed := 1 ;
54843: LD_ADDR_OWVAR 65
54847: PUSH
54848: LD_INT 1
54850: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54851: LD_INT 35
54853: PPUSH
54854: CALL_OW 67
// p := p + 1 ;
54858: LD_ADDR_VAR 0 1
54862: PUSH
54863: LD_VAR 0 1
54867: PUSH
54868: LD_INT 1
54870: PLUS
54871: ST_TO_ADDR
// until p >= 60 ;
54872: LD_VAR 0 1
54876: PUSH
54877: LD_INT 60
54879: GREATEREQUAL
54880: IFFALSE 54843
// game_speed := 4 ;
54882: LD_ADDR_OWVAR 65
54886: PUSH
54887: LD_INT 4
54889: ST_TO_ADDR
// end ;
54890: PPOPN 1
54892: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54893: LD_EXP 28
54897: PUSH
54898: LD_EXP 55
54902: AND
54903: IFFALSE 55049
54905: GO 54907
54907: DISABLE
54908: LD_INT 0
54910: PPUSH
54911: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54912: LD_ADDR_VAR 0 1
54916: PUSH
54917: LD_INT 22
54919: PUSH
54920: LD_OWVAR 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 30
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 30
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PPUSH
54961: CALL_OW 69
54965: ST_TO_ADDR
// if not depot then
54966: LD_VAR 0 1
54970: NOT
54971: IFFALSE 54975
// exit ;
54973: GO 55049
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54975: LD_ADDR_VAR 0 2
54979: PUSH
54980: LD_VAR 0 1
54984: PUSH
54985: LD_INT 1
54987: PPUSH
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL_OW 12
54997: ARRAY
54998: PPUSH
54999: CALL_OW 274
55003: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55004: LD_VAR 0 2
55008: PPUSH
55009: LD_INT 1
55011: PPUSH
55012: LD_INT 0
55014: PPUSH
55015: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55019: LD_VAR 0 2
55023: PPUSH
55024: LD_INT 2
55026: PPUSH
55027: LD_INT 0
55029: PPUSH
55030: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55034: LD_VAR 0 2
55038: PPUSH
55039: LD_INT 3
55041: PPUSH
55042: LD_INT 0
55044: PPUSH
55045: CALL_OW 277
// end ;
55049: PPOPN 2
55051: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55052: LD_EXP 28
55056: PUSH
55057: LD_EXP 56
55061: AND
55062: IFFALSE 55159
55064: GO 55066
55066: DISABLE
55067: LD_INT 0
55069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55070: LD_ADDR_VAR 0 1
55074: PUSH
55075: LD_INT 22
55077: PUSH
55078: LD_OWVAR 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 21
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: LD_INT 23
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: LIST
55118: PPUSH
55119: CALL_OW 69
55123: ST_TO_ADDR
// if not tmp then
55124: LD_VAR 0 1
55128: NOT
55129: IFFALSE 55133
// exit ;
55131: GO 55159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55133: LD_VAR 0 1
55137: PUSH
55138: LD_INT 1
55140: PPUSH
55141: LD_VAR 0 1
55145: PPUSH
55146: CALL_OW 12
55150: ARRAY
55151: PPUSH
55152: LD_INT 200
55154: PPUSH
55155: CALL_OW 234
// end ;
55159: PPOPN 1
55161: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55162: LD_EXP 28
55166: PUSH
55167: LD_EXP 57
55171: AND
55172: IFFALSE 55251
55174: GO 55176
55176: DISABLE
55177: LD_INT 0
55179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55180: LD_ADDR_VAR 0 1
55184: PUSH
55185: LD_INT 22
55187: PUSH
55188: LD_OWVAR 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 21
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PPUSH
55211: CALL_OW 69
55215: ST_TO_ADDR
// if not tmp then
55216: LD_VAR 0 1
55220: NOT
55221: IFFALSE 55225
// exit ;
55223: GO 55251
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55225: LD_VAR 0 1
55229: PUSH
55230: LD_INT 1
55232: PPUSH
55233: LD_VAR 0 1
55237: PPUSH
55238: CALL_OW 12
55242: ARRAY
55243: PPUSH
55244: LD_INT 60
55246: PPUSH
55247: CALL_OW 234
// end ;
55251: PPOPN 1
55253: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55254: LD_EXP 28
55258: PUSH
55259: LD_EXP 58
55263: AND
55264: IFFALSE 55363
55266: GO 55268
55268: DISABLE
55269: LD_INT 0
55271: PPUSH
55272: PPUSH
// begin enable ;
55273: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55274: LD_ADDR_VAR 0 1
55278: PUSH
55279: LD_INT 22
55281: PUSH
55282: LD_OWVAR 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 61
55293: PUSH
55294: EMPTY
55295: LIST
55296: PUSH
55297: LD_INT 33
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: PPUSH
55312: CALL_OW 69
55316: ST_TO_ADDR
// if not tmp then
55317: LD_VAR 0 1
55321: NOT
55322: IFFALSE 55326
// exit ;
55324: GO 55363
// for i in tmp do
55326: LD_ADDR_VAR 0 2
55330: PUSH
55331: LD_VAR 0 1
55335: PUSH
55336: FOR_IN
55337: IFFALSE 55361
// if IsControledBy ( i ) then
55339: LD_VAR 0 2
55343: PPUSH
55344: CALL_OW 312
55348: IFFALSE 55359
// ComUnlink ( i ) ;
55350: LD_VAR 0 2
55354: PPUSH
55355: CALL_OW 136
55359: GO 55336
55361: POP
55362: POP
// end ;
55363: PPOPN 2
55365: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55366: LD_EXP 28
55370: PUSH
55371: LD_EXP 59
55375: AND
55376: IFFALSE 55516
55378: GO 55380
55380: DISABLE
55381: LD_INT 0
55383: PPUSH
55384: PPUSH
// begin ToLua ( displayPowell(); ) ;
55385: LD_STRING displayPowell();
55387: PPUSH
55388: CALL_OW 559
// uc_side := 0 ;
55392: LD_ADDR_OWVAR 20
55396: PUSH
55397: LD_INT 0
55399: ST_TO_ADDR
// uc_nation := 2 ;
55400: LD_ADDR_OWVAR 21
55404: PUSH
55405: LD_INT 2
55407: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55408: LD_ADDR_OWVAR 37
55412: PUSH
55413: LD_INT 14
55415: ST_TO_ADDR
// vc_engine := engine_siberite ;
55416: LD_ADDR_OWVAR 39
55420: PUSH
55421: LD_INT 3
55423: ST_TO_ADDR
// vc_control := control_apeman ;
55424: LD_ADDR_OWVAR 38
55428: PUSH
55429: LD_INT 5
55431: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55432: LD_ADDR_OWVAR 40
55436: PUSH
55437: LD_INT 29
55439: ST_TO_ADDR
// un := CreateVehicle ;
55440: LD_ADDR_VAR 0 2
55444: PUSH
55445: CALL_OW 45
55449: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55450: LD_VAR 0 2
55454: PPUSH
55455: LD_INT 1
55457: PPUSH
55458: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55462: LD_INT 35
55464: PPUSH
55465: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55469: LD_VAR 0 2
55473: PPUSH
55474: LD_INT 22
55476: PUSH
55477: LD_OWVAR 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PPUSH
55486: CALL_OW 69
55490: PPUSH
55491: LD_VAR 0 2
55495: PPUSH
55496: CALL_OW 74
55500: PPUSH
55501: CALL_OW 115
// until IsDead ( un ) ;
55505: LD_VAR 0 2
55509: PPUSH
55510: CALL_OW 301
55514: IFFALSE 55462
// end ;
55516: PPOPN 2
55518: END
// every 0 0$1 trigger StreamModeActive and sStu do
55519: LD_EXP 28
55523: PUSH
55524: LD_EXP 67
55528: AND
55529: IFFALSE 55545
55531: GO 55533
55533: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55534: LD_STRING displayStucuk();
55536: PPUSH
55537: CALL_OW 559
// ResetFog ;
55541: CALL_OW 335
// end ;
55545: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55546: LD_EXP 28
55550: PUSH
55551: LD_EXP 60
55555: AND
55556: IFFALSE 55697
55558: GO 55560
55560: DISABLE
55561: LD_INT 0
55563: PPUSH
55564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55565: LD_ADDR_VAR 0 2
55569: PUSH
55570: LD_INT 22
55572: PUSH
55573: LD_OWVAR 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 21
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PPUSH
55596: CALL_OW 69
55600: ST_TO_ADDR
// if not tmp then
55601: LD_VAR 0 2
55605: NOT
55606: IFFALSE 55610
// exit ;
55608: GO 55697
// un := tmp [ rand ( 1 , tmp ) ] ;
55610: LD_ADDR_VAR 0 1
55614: PUSH
55615: LD_VAR 0 2
55619: PUSH
55620: LD_INT 1
55622: PPUSH
55623: LD_VAR 0 2
55627: PPUSH
55628: CALL_OW 12
55632: ARRAY
55633: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55634: LD_VAR 0 1
55638: PPUSH
55639: LD_INT 0
55641: PPUSH
55642: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55646: LD_VAR 0 1
55650: PPUSH
55651: LD_OWVAR 3
55655: PUSH
55656: LD_VAR 0 1
55660: DIFF
55661: PPUSH
55662: LD_VAR 0 1
55666: PPUSH
55667: CALL_OW 74
55671: PPUSH
55672: CALL_OW 115
// wait ( 0 0$20 ) ;
55676: LD_INT 700
55678: PPUSH
55679: CALL_OW 67
// SetSide ( un , your_side ) ;
55683: LD_VAR 0 1
55687: PPUSH
55688: LD_OWVAR 2
55692: PPUSH
55693: CALL_OW 235
// end ;
55697: PPOPN 2
55699: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55700: LD_EXP 28
55704: PUSH
55705: LD_EXP 61
55709: AND
55710: IFFALSE 55816
55712: GO 55714
55714: DISABLE
55715: LD_INT 0
55717: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55718: LD_ADDR_VAR 0 1
55722: PUSH
55723: LD_INT 22
55725: PUSH
55726: LD_OWVAR 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 30
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 30
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PPUSH
55767: CALL_OW 69
55771: ST_TO_ADDR
// if not depot then
55772: LD_VAR 0 1
55776: NOT
55777: IFFALSE 55781
// exit ;
55779: GO 55816
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55781: LD_VAR 0 1
55785: PUSH
55786: LD_INT 1
55788: ARRAY
55789: PPUSH
55790: CALL_OW 250
55794: PPUSH
55795: LD_VAR 0 1
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PPUSH
55804: CALL_OW 251
55808: PPUSH
55809: LD_INT 70
55811: PPUSH
55812: CALL_OW 495
// end ;
55816: PPOPN 1
55818: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55819: LD_EXP 28
55823: PUSH
55824: LD_EXP 62
55828: AND
55829: IFFALSE 56040
55831: GO 55833
55833: DISABLE
55834: LD_INT 0
55836: PPUSH
55837: PPUSH
55838: PPUSH
55839: PPUSH
55840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55841: LD_ADDR_VAR 0 5
55845: PUSH
55846: LD_INT 22
55848: PUSH
55849: LD_OWVAR 2
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 21
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PPUSH
55872: CALL_OW 69
55876: ST_TO_ADDR
// if not tmp then
55877: LD_VAR 0 5
55881: NOT
55882: IFFALSE 55886
// exit ;
55884: GO 56040
// for i in tmp do
55886: LD_ADDR_VAR 0 1
55890: PUSH
55891: LD_VAR 0 5
55895: PUSH
55896: FOR_IN
55897: IFFALSE 56038
// begin d := rand ( 0 , 5 ) ;
55899: LD_ADDR_VAR 0 4
55903: PUSH
55904: LD_INT 0
55906: PPUSH
55907: LD_INT 5
55909: PPUSH
55910: CALL_OW 12
55914: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55915: LD_ADDR_VAR 0 2
55919: PUSH
55920: LD_VAR 0 1
55924: PPUSH
55925: CALL_OW 250
55929: PPUSH
55930: LD_VAR 0 4
55934: PPUSH
55935: LD_INT 3
55937: PPUSH
55938: LD_INT 12
55940: PPUSH
55941: CALL_OW 12
55945: PPUSH
55946: CALL_OW 272
55950: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55951: LD_ADDR_VAR 0 3
55955: PUSH
55956: LD_VAR 0 1
55960: PPUSH
55961: CALL_OW 251
55965: PPUSH
55966: LD_VAR 0 4
55970: PPUSH
55971: LD_INT 3
55973: PPUSH
55974: LD_INT 12
55976: PPUSH
55977: CALL_OW 12
55981: PPUSH
55982: CALL_OW 273
55986: ST_TO_ADDR
// if ValidHex ( x , y ) then
55987: LD_VAR 0 2
55991: PPUSH
55992: LD_VAR 0 3
55996: PPUSH
55997: CALL_OW 488
56001: IFFALSE 56036
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56003: LD_VAR 0 1
56007: PPUSH
56008: LD_VAR 0 2
56012: PPUSH
56013: LD_VAR 0 3
56017: PPUSH
56018: LD_INT 3
56020: PPUSH
56021: LD_INT 6
56023: PPUSH
56024: CALL_OW 12
56028: PPUSH
56029: LD_INT 1
56031: PPUSH
56032: CALL_OW 483
// end ;
56036: GO 55896
56038: POP
56039: POP
// end ;
56040: PPOPN 5
56042: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56043: LD_EXP 28
56047: PUSH
56048: LD_EXP 63
56052: AND
56053: IFFALSE 56147
56055: GO 56057
56057: DISABLE
56058: LD_INT 0
56060: PPUSH
56061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56062: LD_ADDR_VAR 0 2
56066: PUSH
56067: LD_INT 22
56069: PUSH
56070: LD_OWVAR 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 32
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 21
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: PPUSH
56104: CALL_OW 69
56108: ST_TO_ADDR
// if not tmp then
56109: LD_VAR 0 2
56113: NOT
56114: IFFALSE 56118
// exit ;
56116: GO 56147
// for i in tmp do
56118: LD_ADDR_VAR 0 1
56122: PUSH
56123: LD_VAR 0 2
56127: PUSH
56128: FOR_IN
56129: IFFALSE 56145
// SetFuel ( i , 0 ) ;
56131: LD_VAR 0 1
56135: PPUSH
56136: LD_INT 0
56138: PPUSH
56139: CALL_OW 240
56143: GO 56128
56145: POP
56146: POP
// end ;
56147: PPOPN 2
56149: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56150: LD_EXP 28
56154: PUSH
56155: LD_EXP 64
56159: AND
56160: IFFALSE 56226
56162: GO 56164
56164: DISABLE
56165: LD_INT 0
56167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56168: LD_ADDR_VAR 0 1
56172: PUSH
56173: LD_INT 22
56175: PUSH
56176: LD_OWVAR 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 30
56187: PUSH
56188: LD_INT 29
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PPUSH
56199: CALL_OW 69
56203: ST_TO_ADDR
// if not tmp then
56204: LD_VAR 0 1
56208: NOT
56209: IFFALSE 56213
// exit ;
56211: GO 56226
// DestroyUnit ( tmp [ 1 ] ) ;
56213: LD_VAR 0 1
56217: PUSH
56218: LD_INT 1
56220: ARRAY
56221: PPUSH
56222: CALL_OW 65
// end ;
56226: PPOPN 1
56228: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56229: LD_EXP 28
56233: PUSH
56234: LD_EXP 66
56238: AND
56239: IFFALSE 56368
56241: GO 56243
56243: DISABLE
56244: LD_INT 0
56246: PPUSH
// begin uc_side := 0 ;
56247: LD_ADDR_OWVAR 20
56251: PUSH
56252: LD_INT 0
56254: ST_TO_ADDR
// uc_nation := nation_arabian ;
56255: LD_ADDR_OWVAR 21
56259: PUSH
56260: LD_INT 2
56262: ST_TO_ADDR
// hc_gallery :=  ;
56263: LD_ADDR_OWVAR 33
56267: PUSH
56268: LD_STRING 
56270: ST_TO_ADDR
// hc_name :=  ;
56271: LD_ADDR_OWVAR 26
56275: PUSH
56276: LD_STRING 
56278: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56279: LD_INT 1
56281: PPUSH
56282: LD_INT 11
56284: PPUSH
56285: LD_INT 10
56287: PPUSH
56288: CALL_OW 380
// un := CreateHuman ;
56292: LD_ADDR_VAR 0 1
56296: PUSH
56297: CALL_OW 44
56301: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56302: LD_VAR 0 1
56306: PPUSH
56307: LD_INT 1
56309: PPUSH
56310: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56314: LD_INT 35
56316: PPUSH
56317: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56321: LD_VAR 0 1
56325: PPUSH
56326: LD_INT 22
56328: PUSH
56329: LD_OWVAR 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PPUSH
56338: CALL_OW 69
56342: PPUSH
56343: LD_VAR 0 1
56347: PPUSH
56348: CALL_OW 74
56352: PPUSH
56353: CALL_OW 115
// until IsDead ( un ) ;
56357: LD_VAR 0 1
56361: PPUSH
56362: CALL_OW 301
56366: IFFALSE 56314
// end ;
56368: PPOPN 1
56370: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56371: LD_EXP 28
56375: PUSH
56376: LD_EXP 68
56380: AND
56381: IFFALSE 56393
56383: GO 56385
56385: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56386: LD_STRING earthquake(getX(game), 0, 32)
56388: PPUSH
56389: CALL_OW 559
56393: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56394: LD_EXP 28
56398: PUSH
56399: LD_EXP 69
56403: AND
56404: IFFALSE 56495
56406: GO 56408
56408: DISABLE
56409: LD_INT 0
56411: PPUSH
// begin enable ;
56412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56413: LD_ADDR_VAR 0 1
56417: PUSH
56418: LD_INT 22
56420: PUSH
56421: LD_OWVAR 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 21
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 33
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: PPUSH
56455: CALL_OW 69
56459: ST_TO_ADDR
// if not tmp then
56460: LD_VAR 0 1
56464: NOT
56465: IFFALSE 56469
// exit ;
56467: GO 56495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56469: LD_VAR 0 1
56473: PUSH
56474: LD_INT 1
56476: PPUSH
56477: LD_VAR 0 1
56481: PPUSH
56482: CALL_OW 12
56486: ARRAY
56487: PPUSH
56488: LD_INT 1
56490: PPUSH
56491: CALL_OW 234
// end ;
56495: PPOPN 1
56497: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56498: LD_EXP 28
56502: PUSH
56503: LD_EXP 70
56507: AND
56508: IFFALSE 56649
56510: GO 56512
56512: DISABLE
56513: LD_INT 0
56515: PPUSH
56516: PPUSH
56517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56518: LD_ADDR_VAR 0 3
56522: PUSH
56523: LD_INT 22
56525: PUSH
56526: LD_OWVAR 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 25
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PPUSH
56549: CALL_OW 69
56553: ST_TO_ADDR
// if not tmp then
56554: LD_VAR 0 3
56558: NOT
56559: IFFALSE 56563
// exit ;
56561: GO 56649
// un := tmp [ rand ( 1 , tmp ) ] ;
56563: LD_ADDR_VAR 0 2
56567: PUSH
56568: LD_VAR 0 3
56572: PUSH
56573: LD_INT 1
56575: PPUSH
56576: LD_VAR 0 3
56580: PPUSH
56581: CALL_OW 12
56585: ARRAY
56586: ST_TO_ADDR
// if Crawls ( un ) then
56587: LD_VAR 0 2
56591: PPUSH
56592: CALL_OW 318
56596: IFFALSE 56607
// ComWalk ( un ) ;
56598: LD_VAR 0 2
56602: PPUSH
56603: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56607: LD_VAR 0 2
56611: PPUSH
56612: LD_INT 9
56614: PPUSH
56615: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56619: LD_INT 28
56621: PPUSH
56622: LD_OWVAR 2
56626: PPUSH
56627: LD_INT 2
56629: PPUSH
56630: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56634: LD_INT 29
56636: PPUSH
56637: LD_OWVAR 2
56641: PPUSH
56642: LD_INT 2
56644: PPUSH
56645: CALL_OW 322
// end ;
56649: PPOPN 3
56651: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56652: LD_EXP 28
56656: PUSH
56657: LD_EXP 71
56661: AND
56662: IFFALSE 56773
56664: GO 56666
56666: DISABLE
56667: LD_INT 0
56669: PPUSH
56670: PPUSH
56671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56672: LD_ADDR_VAR 0 3
56676: PUSH
56677: LD_INT 22
56679: PUSH
56680: LD_OWVAR 2
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 25
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PPUSH
56703: CALL_OW 69
56707: ST_TO_ADDR
// if not tmp then
56708: LD_VAR 0 3
56712: NOT
56713: IFFALSE 56717
// exit ;
56715: GO 56773
// un := tmp [ rand ( 1 , tmp ) ] ;
56717: LD_ADDR_VAR 0 2
56721: PUSH
56722: LD_VAR 0 3
56726: PUSH
56727: LD_INT 1
56729: PPUSH
56730: LD_VAR 0 3
56734: PPUSH
56735: CALL_OW 12
56739: ARRAY
56740: ST_TO_ADDR
// if Crawls ( un ) then
56741: LD_VAR 0 2
56745: PPUSH
56746: CALL_OW 318
56750: IFFALSE 56761
// ComWalk ( un ) ;
56752: LD_VAR 0 2
56756: PPUSH
56757: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56761: LD_VAR 0 2
56765: PPUSH
56766: LD_INT 8
56768: PPUSH
56769: CALL_OW 336
// end ;
56773: PPOPN 3
56775: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56776: LD_EXP 28
56780: PUSH
56781: LD_EXP 72
56785: AND
56786: IFFALSE 56930
56788: GO 56790
56790: DISABLE
56791: LD_INT 0
56793: PPUSH
56794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56795: LD_ADDR_VAR 0 2
56799: PUSH
56800: LD_INT 22
56802: PUSH
56803: LD_OWVAR 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 21
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 34
56827: PUSH
56828: LD_INT 12
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 34
56837: PUSH
56838: LD_INT 51
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 34
56847: PUSH
56848: LD_INT 32
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: PPUSH
56866: CALL_OW 69
56870: ST_TO_ADDR
// if not tmp then
56871: LD_VAR 0 2
56875: NOT
56876: IFFALSE 56880
// exit ;
56878: GO 56930
// for i in tmp do
56880: LD_ADDR_VAR 0 1
56884: PUSH
56885: LD_VAR 0 2
56889: PUSH
56890: FOR_IN
56891: IFFALSE 56928
// if GetCargo ( i , mat_artifact ) = 0 then
56893: LD_VAR 0 1
56897: PPUSH
56898: LD_INT 4
56900: PPUSH
56901: CALL_OW 289
56905: PUSH
56906: LD_INT 0
56908: EQUAL
56909: IFFALSE 56926
// SetCargo ( i , mat_siberit , 100 ) ;
56911: LD_VAR 0 1
56915: PPUSH
56916: LD_INT 3
56918: PPUSH
56919: LD_INT 100
56921: PPUSH
56922: CALL_OW 290
56926: GO 56890
56928: POP
56929: POP
// end ;
56930: PPOPN 2
56932: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56933: LD_EXP 28
56937: PUSH
56938: LD_EXP 73
56942: AND
56943: IFFALSE 57126
56945: GO 56947
56947: DISABLE
56948: LD_INT 0
56950: PPUSH
56951: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56952: LD_ADDR_VAR 0 2
56956: PUSH
56957: LD_INT 22
56959: PUSH
56960: LD_OWVAR 2
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PPUSH
56969: CALL_OW 69
56973: ST_TO_ADDR
// if not tmp then
56974: LD_VAR 0 2
56978: NOT
56979: IFFALSE 56983
// exit ;
56981: GO 57126
// for i := 1 to 2 do
56983: LD_ADDR_VAR 0 1
56987: PUSH
56988: DOUBLE
56989: LD_INT 1
56991: DEC
56992: ST_TO_ADDR
56993: LD_INT 2
56995: PUSH
56996: FOR_TO
56997: IFFALSE 57124
// begin uc_side := your_side ;
56999: LD_ADDR_OWVAR 20
57003: PUSH
57004: LD_OWVAR 2
57008: ST_TO_ADDR
// uc_nation := nation_american ;
57009: LD_ADDR_OWVAR 21
57013: PUSH
57014: LD_INT 1
57016: ST_TO_ADDR
// vc_chassis := us_morphling ;
57017: LD_ADDR_OWVAR 37
57021: PUSH
57022: LD_INT 5
57024: ST_TO_ADDR
// vc_engine := engine_siberite ;
57025: LD_ADDR_OWVAR 39
57029: PUSH
57030: LD_INT 3
57032: ST_TO_ADDR
// vc_control := control_computer ;
57033: LD_ADDR_OWVAR 38
57037: PUSH
57038: LD_INT 3
57040: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57041: LD_ADDR_OWVAR 40
57045: PUSH
57046: LD_INT 10
57048: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57049: LD_VAR 0 2
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: PPUSH
57058: CALL_OW 310
57062: NOT
57063: IFFALSE 57110
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57065: CALL_OW 45
57069: PPUSH
57070: LD_VAR 0 2
57074: PUSH
57075: LD_INT 1
57077: ARRAY
57078: PPUSH
57079: CALL_OW 250
57083: PPUSH
57084: LD_VAR 0 2
57088: PUSH
57089: LD_INT 1
57091: ARRAY
57092: PPUSH
57093: CALL_OW 251
57097: PPUSH
57098: LD_INT 12
57100: PPUSH
57101: LD_INT 1
57103: PPUSH
57104: CALL_OW 50
57108: GO 57122
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57110: CALL_OW 45
57114: PPUSH
57115: LD_INT 1
57117: PPUSH
57118: CALL_OW 51
// end ;
57122: GO 56996
57124: POP
57125: POP
// end ;
57126: PPOPN 2
57128: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57129: LD_EXP 28
57133: PUSH
57134: LD_EXP 74
57138: AND
57139: IFFALSE 57361
57141: GO 57143
57143: DISABLE
57144: LD_INT 0
57146: PPUSH
57147: PPUSH
57148: PPUSH
57149: PPUSH
57150: PPUSH
57151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57152: LD_ADDR_VAR 0 6
57156: PUSH
57157: LD_INT 22
57159: PUSH
57160: LD_OWVAR 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 21
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: LD_INT 23
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: PPUSH
57201: CALL_OW 69
57205: ST_TO_ADDR
// if not tmp then
57206: LD_VAR 0 6
57210: NOT
57211: IFFALSE 57215
// exit ;
57213: GO 57361
// s1 := rand ( 1 , 4 ) ;
57215: LD_ADDR_VAR 0 2
57219: PUSH
57220: LD_INT 1
57222: PPUSH
57223: LD_INT 4
57225: PPUSH
57226: CALL_OW 12
57230: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57231: LD_ADDR_VAR 0 4
57235: PUSH
57236: LD_VAR 0 6
57240: PUSH
57241: LD_INT 1
57243: ARRAY
57244: PPUSH
57245: LD_VAR 0 2
57249: PPUSH
57250: CALL_OW 259
57254: ST_TO_ADDR
// if s1 = 1 then
57255: LD_VAR 0 2
57259: PUSH
57260: LD_INT 1
57262: EQUAL
57263: IFFALSE 57283
// s2 := rand ( 2 , 4 ) else
57265: LD_ADDR_VAR 0 3
57269: PUSH
57270: LD_INT 2
57272: PPUSH
57273: LD_INT 4
57275: PPUSH
57276: CALL_OW 12
57280: ST_TO_ADDR
57281: GO 57291
// s2 := 1 ;
57283: LD_ADDR_VAR 0 3
57287: PUSH
57288: LD_INT 1
57290: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57291: LD_ADDR_VAR 0 5
57295: PUSH
57296: LD_VAR 0 6
57300: PUSH
57301: LD_INT 1
57303: ARRAY
57304: PPUSH
57305: LD_VAR 0 3
57309: PPUSH
57310: CALL_OW 259
57314: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57315: LD_VAR 0 6
57319: PUSH
57320: LD_INT 1
57322: ARRAY
57323: PPUSH
57324: LD_VAR 0 2
57328: PPUSH
57329: LD_VAR 0 5
57333: PPUSH
57334: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57338: LD_VAR 0 6
57342: PUSH
57343: LD_INT 1
57345: ARRAY
57346: PPUSH
57347: LD_VAR 0 3
57351: PPUSH
57352: LD_VAR 0 4
57356: PPUSH
57357: CALL_OW 237
// end ;
57361: PPOPN 6
57363: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57364: LD_EXP 28
57368: PUSH
57369: LD_EXP 75
57373: AND
57374: IFFALSE 57453
57376: GO 57378
57378: DISABLE
57379: LD_INT 0
57381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57382: LD_ADDR_VAR 0 1
57386: PUSH
57387: LD_INT 22
57389: PUSH
57390: LD_OWVAR 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 30
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PPUSH
57413: CALL_OW 69
57417: ST_TO_ADDR
// if not tmp then
57418: LD_VAR 0 1
57422: NOT
57423: IFFALSE 57427
// exit ;
57425: GO 57453
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57427: LD_VAR 0 1
57431: PUSH
57432: LD_INT 1
57434: PPUSH
57435: LD_VAR 0 1
57439: PPUSH
57440: CALL_OW 12
57444: ARRAY
57445: PPUSH
57446: LD_INT 1
57448: PPUSH
57449: CALL_OW 234
// end ;
57453: PPOPN 1
57455: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57456: LD_EXP 28
57460: PUSH
57461: LD_EXP 76
57465: AND
57466: IFFALSE 57578
57468: GO 57470
57470: DISABLE
57471: LD_INT 0
57473: PPUSH
57474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57475: LD_ADDR_VAR 0 2
57479: PUSH
57480: LD_INT 22
57482: PUSH
57483: LD_OWVAR 2
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: LD_INT 30
57497: PUSH
57498: LD_INT 27
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 30
57507: PUSH
57508: LD_INT 26
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 30
57517: PUSH
57518: LD_INT 28
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PPUSH
57535: CALL_OW 69
57539: ST_TO_ADDR
// if not tmp then
57540: LD_VAR 0 2
57544: NOT
57545: IFFALSE 57549
// exit ;
57547: GO 57578
// for i in tmp do
57549: LD_ADDR_VAR 0 1
57553: PUSH
57554: LD_VAR 0 2
57558: PUSH
57559: FOR_IN
57560: IFFALSE 57576
// SetLives ( i , 1 ) ;
57562: LD_VAR 0 1
57566: PPUSH
57567: LD_INT 1
57569: PPUSH
57570: CALL_OW 234
57574: GO 57559
57576: POP
57577: POP
// end ;
57578: PPOPN 2
57580: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57581: LD_EXP 28
57585: PUSH
57586: LD_EXP 77
57590: AND
57591: IFFALSE 57878
57593: GO 57595
57595: DISABLE
57596: LD_INT 0
57598: PPUSH
57599: PPUSH
57600: PPUSH
// begin i := rand ( 1 , 7 ) ;
57601: LD_ADDR_VAR 0 1
57605: PUSH
57606: LD_INT 1
57608: PPUSH
57609: LD_INT 7
57611: PPUSH
57612: CALL_OW 12
57616: ST_TO_ADDR
// case i of 1 :
57617: LD_VAR 0 1
57621: PUSH
57622: LD_INT 1
57624: DOUBLE
57625: EQUAL
57626: IFTRUE 57630
57628: GO 57640
57630: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57631: LD_STRING earthquake(getX(game), 0, 32)
57633: PPUSH
57634: CALL_OW 559
57638: GO 57878
57640: LD_INT 2
57642: DOUBLE
57643: EQUAL
57644: IFTRUE 57648
57646: GO 57662
57648: POP
// begin ToLua ( displayStucuk(); ) ;
57649: LD_STRING displayStucuk();
57651: PPUSH
57652: CALL_OW 559
// ResetFog ;
57656: CALL_OW 335
// end ; 3 :
57660: GO 57878
57662: LD_INT 3
57664: DOUBLE
57665: EQUAL
57666: IFTRUE 57670
57668: GO 57774
57670: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57671: LD_ADDR_VAR 0 2
57675: PUSH
57676: LD_INT 22
57678: PUSH
57679: LD_OWVAR 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 25
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PPUSH
57702: CALL_OW 69
57706: ST_TO_ADDR
// if not tmp then
57707: LD_VAR 0 2
57711: NOT
57712: IFFALSE 57716
// exit ;
57714: GO 57878
// un := tmp [ rand ( 1 , tmp ) ] ;
57716: LD_ADDR_VAR 0 3
57720: PUSH
57721: LD_VAR 0 2
57725: PUSH
57726: LD_INT 1
57728: PPUSH
57729: LD_VAR 0 2
57733: PPUSH
57734: CALL_OW 12
57738: ARRAY
57739: ST_TO_ADDR
// if Crawls ( un ) then
57740: LD_VAR 0 3
57744: PPUSH
57745: CALL_OW 318
57749: IFFALSE 57760
// ComWalk ( un ) ;
57751: LD_VAR 0 3
57755: PPUSH
57756: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57760: LD_VAR 0 3
57764: PPUSH
57765: LD_INT 8
57767: PPUSH
57768: CALL_OW 336
// end ; 4 :
57772: GO 57878
57774: LD_INT 4
57776: DOUBLE
57777: EQUAL
57778: IFTRUE 57782
57780: GO 57856
57782: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57783: LD_ADDR_VAR 0 2
57787: PUSH
57788: LD_INT 22
57790: PUSH
57791: LD_OWVAR 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 30
57802: PUSH
57803: LD_INT 29
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PPUSH
57814: CALL_OW 69
57818: ST_TO_ADDR
// if not tmp then
57819: LD_VAR 0 2
57823: NOT
57824: IFFALSE 57828
// exit ;
57826: GO 57878
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57828: LD_VAR 0 2
57832: PUSH
57833: LD_INT 1
57835: ARRAY
57836: PPUSH
57837: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57841: LD_VAR 0 2
57845: PUSH
57846: LD_INT 1
57848: ARRAY
57849: PPUSH
57850: CALL_OW 65
// end ; 5 .. 7 :
57854: GO 57878
57856: LD_INT 5
57858: DOUBLE
57859: GREATEREQUAL
57860: IFFALSE 57868
57862: LD_INT 7
57864: DOUBLE
57865: LESSEQUAL
57866: IFTRUE 57870
57868: GO 57877
57870: POP
// StreamSibBomb ; end ;
57871: CALL 54115 0 0
57875: GO 57878
57877: POP
// end ;
57878: PPOPN 3
57880: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57881: LD_EXP 28
57885: PUSH
57886: LD_EXP 78
57890: AND
57891: IFFALSE 58047
57893: GO 57895
57895: DISABLE
57896: LD_INT 0
57898: PPUSH
57899: PPUSH
57900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57901: LD_ADDR_VAR 0 2
57905: PUSH
57906: LD_INT 81
57908: PUSH
57909: LD_OWVAR 2
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 21
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 21
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PPUSH
57950: CALL_OW 69
57954: ST_TO_ADDR
// if not tmp then
57955: LD_VAR 0 2
57959: NOT
57960: IFFALSE 57964
// exit ;
57962: GO 58047
// p := 0 ;
57964: LD_ADDR_VAR 0 3
57968: PUSH
57969: LD_INT 0
57971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57972: LD_INT 35
57974: PPUSH
57975: CALL_OW 67
// p := p + 1 ;
57979: LD_ADDR_VAR 0 3
57983: PUSH
57984: LD_VAR 0 3
57988: PUSH
57989: LD_INT 1
57991: PLUS
57992: ST_TO_ADDR
// for i in tmp do
57993: LD_ADDR_VAR 0 1
57997: PUSH
57998: LD_VAR 0 2
58002: PUSH
58003: FOR_IN
58004: IFFALSE 58035
// if GetLives ( i ) < 1000 then
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL_OW 256
58015: PUSH
58016: LD_INT 1000
58018: LESS
58019: IFFALSE 58033
// SetLives ( i , 1000 ) ;
58021: LD_VAR 0 1
58025: PPUSH
58026: LD_INT 1000
58028: PPUSH
58029: CALL_OW 234
58033: GO 58003
58035: POP
58036: POP
// until p > 20 ;
58037: LD_VAR 0 3
58041: PUSH
58042: LD_INT 20
58044: GREATER
58045: IFFALSE 57972
// end ;
58047: PPOPN 3
58049: END
// every 0 0$1 trigger StreamModeActive and sTime do
58050: LD_EXP 28
58054: PUSH
58055: LD_EXP 79
58059: AND
58060: IFFALSE 58095
58062: GO 58064
58064: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58065: LD_INT 28
58067: PPUSH
58068: LD_OWVAR 2
58072: PPUSH
58073: LD_INT 2
58075: PPUSH
58076: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58080: LD_INT 30
58082: PPUSH
58083: LD_OWVAR 2
58087: PPUSH
58088: LD_INT 2
58090: PPUSH
58091: CALL_OW 322
// end ;
58095: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58096: LD_EXP 28
58100: PUSH
58101: LD_EXP 80
58105: AND
58106: IFFALSE 58227
58108: GO 58110
58110: DISABLE
58111: LD_INT 0
58113: PPUSH
58114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58115: LD_ADDR_VAR 0 2
58119: PUSH
58120: LD_INT 22
58122: PUSH
58123: LD_OWVAR 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 21
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: LD_INT 23
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: PPUSH
58164: CALL_OW 69
58168: ST_TO_ADDR
// if not tmp then
58169: LD_VAR 0 2
58173: NOT
58174: IFFALSE 58178
// exit ;
58176: GO 58227
// for i in tmp do
58178: LD_ADDR_VAR 0 1
58182: PUSH
58183: LD_VAR 0 2
58187: PUSH
58188: FOR_IN
58189: IFFALSE 58225
// begin if Crawls ( i ) then
58191: LD_VAR 0 1
58195: PPUSH
58196: CALL_OW 318
58200: IFFALSE 58211
// ComWalk ( i ) ;
58202: LD_VAR 0 1
58206: PPUSH
58207: CALL_OW 138
// SetClass ( i , 2 ) ;
58211: LD_VAR 0 1
58215: PPUSH
58216: LD_INT 2
58218: PPUSH
58219: CALL_OW 336
// end ;
58223: GO 58188
58225: POP
58226: POP
// end ;
58227: PPOPN 2
58229: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58230: LD_EXP 28
58234: PUSH
58235: LD_EXP 81
58239: AND
58240: IFFALSE 58528
58242: GO 58244
58244: DISABLE
58245: LD_INT 0
58247: PPUSH
58248: PPUSH
58249: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58250: LD_OWVAR 2
58254: PPUSH
58255: LD_INT 9
58257: PPUSH
58258: LD_INT 1
58260: PPUSH
58261: LD_INT 1
58263: PPUSH
58264: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58268: LD_INT 9
58270: PPUSH
58271: LD_OWVAR 2
58275: PPUSH
58276: CALL_OW 343
// uc_side := 9 ;
58280: LD_ADDR_OWVAR 20
58284: PUSH
58285: LD_INT 9
58287: ST_TO_ADDR
// uc_nation := 2 ;
58288: LD_ADDR_OWVAR 21
58292: PUSH
58293: LD_INT 2
58295: ST_TO_ADDR
// hc_name := Dark Warrior ;
58296: LD_ADDR_OWVAR 26
58300: PUSH
58301: LD_STRING Dark Warrior
58303: ST_TO_ADDR
// hc_gallery :=  ;
58304: LD_ADDR_OWVAR 33
58308: PUSH
58309: LD_STRING 
58311: ST_TO_ADDR
// hc_noskilllimit := true ;
58312: LD_ADDR_OWVAR 76
58316: PUSH
58317: LD_INT 1
58319: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58320: LD_ADDR_OWVAR 31
58324: PUSH
58325: LD_INT 30
58327: PUSH
58328: LD_INT 30
58330: PUSH
58331: LD_INT 30
58333: PUSH
58334: LD_INT 30
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: ST_TO_ADDR
// un := CreateHuman ;
58343: LD_ADDR_VAR 0 3
58347: PUSH
58348: CALL_OW 44
58352: ST_TO_ADDR
// hc_noskilllimit := false ;
58353: LD_ADDR_OWVAR 76
58357: PUSH
58358: LD_INT 0
58360: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58361: LD_VAR 0 3
58365: PPUSH
58366: LD_INT 1
58368: PPUSH
58369: CALL_OW 51
// ToLua ( playRanger() ) ;
58373: LD_STRING playRanger()
58375: PPUSH
58376: CALL_OW 559
// p := 0 ;
58380: LD_ADDR_VAR 0 2
58384: PUSH
58385: LD_INT 0
58387: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58388: LD_INT 35
58390: PPUSH
58391: CALL_OW 67
// p := p + 1 ;
58395: LD_ADDR_VAR 0 2
58399: PUSH
58400: LD_VAR 0 2
58404: PUSH
58405: LD_INT 1
58407: PLUS
58408: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58409: LD_VAR 0 3
58413: PPUSH
58414: CALL_OW 256
58418: PUSH
58419: LD_INT 1000
58421: LESS
58422: IFFALSE 58436
// SetLives ( un , 1000 ) ;
58424: LD_VAR 0 3
58428: PPUSH
58429: LD_INT 1000
58431: PPUSH
58432: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58436: LD_VAR 0 3
58440: PPUSH
58441: LD_INT 81
58443: PUSH
58444: LD_OWVAR 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 91
58455: PUSH
58456: LD_VAR 0 3
58460: PUSH
58461: LD_INT 30
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PPUSH
58473: CALL_OW 69
58477: PPUSH
58478: LD_VAR 0 3
58482: PPUSH
58483: CALL_OW 74
58487: PPUSH
58488: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58492: LD_VAR 0 2
58496: PUSH
58497: LD_INT 80
58499: GREATER
58500: PUSH
58501: LD_VAR 0 3
58505: PPUSH
58506: CALL_OW 301
58510: OR
58511: IFFALSE 58388
// if un then
58513: LD_VAR 0 3
58517: IFFALSE 58528
// RemoveUnit ( un ) ;
58519: LD_VAR 0 3
58523: PPUSH
58524: CALL_OW 64
// end ;
58528: PPOPN 3
58530: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58531: LD_EXP 82
58535: IFFALSE 58651
58537: GO 58539
58539: DISABLE
58540: LD_INT 0
58542: PPUSH
58543: PPUSH
58544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58545: LD_ADDR_VAR 0 2
58549: PUSH
58550: LD_INT 81
58552: PUSH
58553: LD_OWVAR 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 21
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PPUSH
58576: CALL_OW 69
58580: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58581: LD_STRING playComputer()
58583: PPUSH
58584: CALL_OW 559
// if not tmp then
58588: LD_VAR 0 2
58592: NOT
58593: IFFALSE 58597
// exit ;
58595: GO 58651
// for i in tmp do
58597: LD_ADDR_VAR 0 1
58601: PUSH
58602: LD_VAR 0 2
58606: PUSH
58607: FOR_IN
58608: IFFALSE 58649
// for j := 1 to 4 do
58610: LD_ADDR_VAR 0 3
58614: PUSH
58615: DOUBLE
58616: LD_INT 1
58618: DEC
58619: ST_TO_ADDR
58620: LD_INT 4
58622: PUSH
58623: FOR_TO
58624: IFFALSE 58645
// SetSkill ( i , j , 10 ) ;
58626: LD_VAR 0 1
58630: PPUSH
58631: LD_VAR 0 3
58635: PPUSH
58636: LD_INT 10
58638: PPUSH
58639: CALL_OW 237
58643: GO 58623
58645: POP
58646: POP
58647: GO 58607
58649: POP
58650: POP
// end ;
58651: PPOPN 3
58653: END
// every 0 0$1 trigger s30 do var i , tmp ;
58654: LD_EXP 83
58658: IFFALSE 58727
58660: GO 58662
58662: DISABLE
58663: LD_INT 0
58665: PPUSH
58666: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58667: LD_ADDR_VAR 0 2
58671: PUSH
58672: LD_INT 22
58674: PUSH
58675: LD_OWVAR 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PPUSH
58684: CALL_OW 69
58688: ST_TO_ADDR
// if not tmp then
58689: LD_VAR 0 2
58693: NOT
58694: IFFALSE 58698
// exit ;
58696: GO 58727
// for i in tmp do
58698: LD_ADDR_VAR 0 1
58702: PUSH
58703: LD_VAR 0 2
58707: PUSH
58708: FOR_IN
58709: IFFALSE 58725
// SetLives ( i , 300 ) ;
58711: LD_VAR 0 1
58715: PPUSH
58716: LD_INT 300
58718: PPUSH
58719: CALL_OW 234
58723: GO 58708
58725: POP
58726: POP
// end ;
58727: PPOPN 2
58729: END
// every 0 0$1 trigger s60 do var i , tmp ;
58730: LD_EXP 84
58734: IFFALSE 58803
58736: GO 58738
58738: DISABLE
58739: LD_INT 0
58741: PPUSH
58742: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58743: LD_ADDR_VAR 0 2
58747: PUSH
58748: LD_INT 22
58750: PUSH
58751: LD_OWVAR 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PPUSH
58760: CALL_OW 69
58764: ST_TO_ADDR
// if not tmp then
58765: LD_VAR 0 2
58769: NOT
58770: IFFALSE 58774
// exit ;
58772: GO 58803
// for i in tmp do
58774: LD_ADDR_VAR 0 1
58778: PUSH
58779: LD_VAR 0 2
58783: PUSH
58784: FOR_IN
58785: IFFALSE 58801
// SetLives ( i , 600 ) ;
58787: LD_VAR 0 1
58791: PPUSH
58792: LD_INT 600
58794: PPUSH
58795: CALL_OW 234
58799: GO 58784
58801: POP
58802: POP
// end ;
58803: PPOPN 2
58805: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58806: LD_INT 0
58808: PPUSH
// case cmd of 301 :
58809: LD_VAR 0 1
58813: PUSH
58814: LD_INT 301
58816: DOUBLE
58817: EQUAL
58818: IFTRUE 58822
58820: GO 58854
58822: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58823: LD_VAR 0 6
58827: PPUSH
58828: LD_VAR 0 7
58832: PPUSH
58833: LD_VAR 0 8
58837: PPUSH
58838: LD_VAR 0 4
58842: PPUSH
58843: LD_VAR 0 5
58847: PPUSH
58848: CALL 60063 0 5
58852: GO 58975
58854: LD_INT 302
58856: DOUBLE
58857: EQUAL
58858: IFTRUE 58862
58860: GO 58899
58862: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58863: LD_VAR 0 6
58867: PPUSH
58868: LD_VAR 0 7
58872: PPUSH
58873: LD_VAR 0 8
58877: PPUSH
58878: LD_VAR 0 9
58882: PPUSH
58883: LD_VAR 0 4
58887: PPUSH
58888: LD_VAR 0 5
58892: PPUSH
58893: CALL 60154 0 6
58897: GO 58975
58899: LD_INT 303
58901: DOUBLE
58902: EQUAL
58903: IFTRUE 58907
58905: GO 58944
58907: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58908: LD_VAR 0 6
58912: PPUSH
58913: LD_VAR 0 7
58917: PPUSH
58918: LD_VAR 0 8
58922: PPUSH
58923: LD_VAR 0 9
58927: PPUSH
58928: LD_VAR 0 4
58932: PPUSH
58933: LD_VAR 0 5
58937: PPUSH
58938: CALL 58980 0 6
58942: GO 58975
58944: LD_INT 304
58946: DOUBLE
58947: EQUAL
58948: IFTRUE 58952
58950: GO 58974
58952: POP
// hHackTeleport ( unit , x , y ) ; end ;
58953: LD_VAR 0 2
58957: PPUSH
58958: LD_VAR 0 4
58962: PPUSH
58963: LD_VAR 0 5
58967: PPUSH
58968: CALL 60747 0 3
58972: GO 58975
58974: POP
// end ;
58975: LD_VAR 0 12
58979: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58980: LD_INT 0
58982: PPUSH
58983: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58984: LD_VAR 0 1
58988: PUSH
58989: LD_INT 1
58991: LESS
58992: PUSH
58993: LD_VAR 0 1
58997: PUSH
58998: LD_INT 3
59000: GREATER
59001: OR
59002: PUSH
59003: LD_VAR 0 5
59007: PPUSH
59008: LD_VAR 0 6
59012: PPUSH
59013: CALL_OW 428
59017: OR
59018: IFFALSE 59022
// exit ;
59020: GO 59750
// uc_side := your_side ;
59022: LD_ADDR_OWVAR 20
59026: PUSH
59027: LD_OWVAR 2
59031: ST_TO_ADDR
// uc_nation := nation ;
59032: LD_ADDR_OWVAR 21
59036: PUSH
59037: LD_VAR 0 1
59041: ST_TO_ADDR
// bc_level = 1 ;
59042: LD_ADDR_OWVAR 43
59046: PUSH
59047: LD_INT 1
59049: ST_TO_ADDR
// case btype of 1 :
59050: LD_VAR 0 2
59054: PUSH
59055: LD_INT 1
59057: DOUBLE
59058: EQUAL
59059: IFTRUE 59063
59061: GO 59074
59063: POP
// bc_type := b_depot ; 2 :
59064: LD_ADDR_OWVAR 42
59068: PUSH
59069: LD_INT 0
59071: ST_TO_ADDR
59072: GO 59694
59074: LD_INT 2
59076: DOUBLE
59077: EQUAL
59078: IFTRUE 59082
59080: GO 59093
59082: POP
// bc_type := b_warehouse ; 3 :
59083: LD_ADDR_OWVAR 42
59087: PUSH
59088: LD_INT 1
59090: ST_TO_ADDR
59091: GO 59694
59093: LD_INT 3
59095: DOUBLE
59096: EQUAL
59097: IFTRUE 59101
59099: GO 59112
59101: POP
// bc_type := b_lab ; 4 .. 9 :
59102: LD_ADDR_OWVAR 42
59106: PUSH
59107: LD_INT 6
59109: ST_TO_ADDR
59110: GO 59694
59112: LD_INT 4
59114: DOUBLE
59115: GREATEREQUAL
59116: IFFALSE 59124
59118: LD_INT 9
59120: DOUBLE
59121: LESSEQUAL
59122: IFTRUE 59126
59124: GO 59186
59126: POP
// begin bc_type := b_lab_half ;
59127: LD_ADDR_OWVAR 42
59131: PUSH
59132: LD_INT 7
59134: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59135: LD_ADDR_OWVAR 44
59139: PUSH
59140: LD_INT 10
59142: PUSH
59143: LD_INT 11
59145: PUSH
59146: LD_INT 12
59148: PUSH
59149: LD_INT 15
59151: PUSH
59152: LD_INT 14
59154: PUSH
59155: LD_INT 13
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: PUSH
59166: LD_VAR 0 2
59170: PUSH
59171: LD_INT 3
59173: MINUS
59174: ARRAY
59175: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
59176: LD_ADDR_OWVAR 45
59180: PUSH
59181: LD_INT 9
59183: ST_TO_ADDR
// end ; 10 .. 13 :
59184: GO 59694
59186: LD_INT 10
59188: DOUBLE
59189: GREATEREQUAL
59190: IFFALSE 59198
59192: LD_INT 13
59194: DOUBLE
59195: LESSEQUAL
59196: IFTRUE 59200
59198: GO 59277
59200: POP
// begin bc_type := b_lab_full ;
59201: LD_ADDR_OWVAR 42
59205: PUSH
59206: LD_INT 8
59208: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59209: LD_ADDR_OWVAR 44
59213: PUSH
59214: LD_INT 10
59216: PUSH
59217: LD_INT 12
59219: PUSH
59220: LD_INT 14
59222: PUSH
59223: LD_INT 13
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: PUSH
59232: LD_VAR 0 2
59236: PUSH
59237: LD_INT 9
59239: MINUS
59240: ARRAY
59241: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59242: LD_ADDR_OWVAR 45
59246: PUSH
59247: LD_INT 11
59249: PUSH
59250: LD_INT 15
59252: PUSH
59253: LD_INT 12
59255: PUSH
59256: LD_INT 15
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: PUSH
59265: LD_VAR 0 2
59269: PUSH
59270: LD_INT 9
59272: MINUS
59273: ARRAY
59274: ST_TO_ADDR
// end ; 14 :
59275: GO 59694
59277: LD_INT 14
59279: DOUBLE
59280: EQUAL
59281: IFTRUE 59285
59283: GO 59296
59285: POP
// bc_type := b_workshop ; 15 :
59286: LD_ADDR_OWVAR 42
59290: PUSH
59291: LD_INT 2
59293: ST_TO_ADDR
59294: GO 59694
59296: LD_INT 15
59298: DOUBLE
59299: EQUAL
59300: IFTRUE 59304
59302: GO 59315
59304: POP
// bc_type := b_factory ; 16 :
59305: LD_ADDR_OWVAR 42
59309: PUSH
59310: LD_INT 3
59312: ST_TO_ADDR
59313: GO 59694
59315: LD_INT 16
59317: DOUBLE
59318: EQUAL
59319: IFTRUE 59323
59321: GO 59334
59323: POP
// bc_type := b_ext_gun ; 17 :
59324: LD_ADDR_OWVAR 42
59328: PUSH
59329: LD_INT 17
59331: ST_TO_ADDR
59332: GO 59694
59334: LD_INT 17
59336: DOUBLE
59337: EQUAL
59338: IFTRUE 59342
59340: GO 59370
59342: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59343: LD_ADDR_OWVAR 42
59347: PUSH
59348: LD_INT 19
59350: PUSH
59351: LD_INT 23
59353: PUSH
59354: LD_INT 19
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: LIST
59361: PUSH
59362: LD_VAR 0 1
59366: ARRAY
59367: ST_TO_ADDR
59368: GO 59694
59370: LD_INT 18
59372: DOUBLE
59373: EQUAL
59374: IFTRUE 59378
59376: GO 59389
59378: POP
// bc_type := b_ext_radar ; 19 :
59379: LD_ADDR_OWVAR 42
59383: PUSH
59384: LD_INT 20
59386: ST_TO_ADDR
59387: GO 59694
59389: LD_INT 19
59391: DOUBLE
59392: EQUAL
59393: IFTRUE 59397
59395: GO 59408
59397: POP
// bc_type := b_ext_radio ; 20 :
59398: LD_ADDR_OWVAR 42
59402: PUSH
59403: LD_INT 22
59405: ST_TO_ADDR
59406: GO 59694
59408: LD_INT 20
59410: DOUBLE
59411: EQUAL
59412: IFTRUE 59416
59414: GO 59427
59416: POP
// bc_type := b_ext_siberium ; 21 :
59417: LD_ADDR_OWVAR 42
59421: PUSH
59422: LD_INT 21
59424: ST_TO_ADDR
59425: GO 59694
59427: LD_INT 21
59429: DOUBLE
59430: EQUAL
59431: IFTRUE 59435
59433: GO 59446
59435: POP
// bc_type := b_ext_computer ; 22 :
59436: LD_ADDR_OWVAR 42
59440: PUSH
59441: LD_INT 24
59443: ST_TO_ADDR
59444: GO 59694
59446: LD_INT 22
59448: DOUBLE
59449: EQUAL
59450: IFTRUE 59454
59452: GO 59465
59454: POP
// bc_type := b_ext_track ; 23 :
59455: LD_ADDR_OWVAR 42
59459: PUSH
59460: LD_INT 16
59462: ST_TO_ADDR
59463: GO 59694
59465: LD_INT 23
59467: DOUBLE
59468: EQUAL
59469: IFTRUE 59473
59471: GO 59484
59473: POP
// bc_type := b_ext_laser ; 24 :
59474: LD_ADDR_OWVAR 42
59478: PUSH
59479: LD_INT 25
59481: ST_TO_ADDR
59482: GO 59694
59484: LD_INT 24
59486: DOUBLE
59487: EQUAL
59488: IFTRUE 59492
59490: GO 59503
59492: POP
// bc_type := b_control_tower ; 25 :
59493: LD_ADDR_OWVAR 42
59497: PUSH
59498: LD_INT 36
59500: ST_TO_ADDR
59501: GO 59694
59503: LD_INT 25
59505: DOUBLE
59506: EQUAL
59507: IFTRUE 59511
59509: GO 59522
59511: POP
// bc_type := b_breastwork ; 26 :
59512: LD_ADDR_OWVAR 42
59516: PUSH
59517: LD_INT 31
59519: ST_TO_ADDR
59520: GO 59694
59522: LD_INT 26
59524: DOUBLE
59525: EQUAL
59526: IFTRUE 59530
59528: GO 59541
59530: POP
// bc_type := b_bunker ; 27 :
59531: LD_ADDR_OWVAR 42
59535: PUSH
59536: LD_INT 32
59538: ST_TO_ADDR
59539: GO 59694
59541: LD_INT 27
59543: DOUBLE
59544: EQUAL
59545: IFTRUE 59549
59547: GO 59560
59549: POP
// bc_type := b_turret ; 28 :
59550: LD_ADDR_OWVAR 42
59554: PUSH
59555: LD_INT 33
59557: ST_TO_ADDR
59558: GO 59694
59560: LD_INT 28
59562: DOUBLE
59563: EQUAL
59564: IFTRUE 59568
59566: GO 59579
59568: POP
// bc_type := b_armoury ; 29 :
59569: LD_ADDR_OWVAR 42
59573: PUSH
59574: LD_INT 4
59576: ST_TO_ADDR
59577: GO 59694
59579: LD_INT 29
59581: DOUBLE
59582: EQUAL
59583: IFTRUE 59587
59585: GO 59598
59587: POP
// bc_type := b_barracks ; 30 :
59588: LD_ADDR_OWVAR 42
59592: PUSH
59593: LD_INT 5
59595: ST_TO_ADDR
59596: GO 59694
59598: LD_INT 30
59600: DOUBLE
59601: EQUAL
59602: IFTRUE 59606
59604: GO 59617
59606: POP
// bc_type := b_solar_power ; 31 :
59607: LD_ADDR_OWVAR 42
59611: PUSH
59612: LD_INT 27
59614: ST_TO_ADDR
59615: GO 59694
59617: LD_INT 31
59619: DOUBLE
59620: EQUAL
59621: IFTRUE 59625
59623: GO 59636
59625: POP
// bc_type := b_oil_power ; 32 :
59626: LD_ADDR_OWVAR 42
59630: PUSH
59631: LD_INT 26
59633: ST_TO_ADDR
59634: GO 59694
59636: LD_INT 32
59638: DOUBLE
59639: EQUAL
59640: IFTRUE 59644
59642: GO 59655
59644: POP
// bc_type := b_siberite_power ; 33 :
59645: LD_ADDR_OWVAR 42
59649: PUSH
59650: LD_INT 28
59652: ST_TO_ADDR
59653: GO 59694
59655: LD_INT 33
59657: DOUBLE
59658: EQUAL
59659: IFTRUE 59663
59661: GO 59674
59663: POP
// bc_type := b_oil_mine ; 34 :
59664: LD_ADDR_OWVAR 42
59668: PUSH
59669: LD_INT 29
59671: ST_TO_ADDR
59672: GO 59694
59674: LD_INT 34
59676: DOUBLE
59677: EQUAL
59678: IFTRUE 59682
59680: GO 59693
59682: POP
// bc_type := b_siberite_mine ; end ;
59683: LD_ADDR_OWVAR 42
59687: PUSH
59688: LD_INT 30
59690: ST_TO_ADDR
59691: GO 59694
59693: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59694: LD_ADDR_VAR 0 8
59698: PUSH
59699: LD_VAR 0 5
59703: PPUSH
59704: LD_VAR 0 6
59708: PPUSH
59709: LD_VAR 0 3
59713: PPUSH
59714: CALL_OW 47
59718: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59719: LD_OWVAR 42
59723: PUSH
59724: LD_INT 32
59726: PUSH
59727: LD_INT 33
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: IN
59734: IFFALSE 59750
// PlaceWeaponTurret ( b , weapon ) ;
59736: LD_VAR 0 8
59740: PPUSH
59741: LD_VAR 0 4
59745: PPUSH
59746: CALL_OW 431
// end ;
59750: LD_VAR 0 7
59754: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59755: LD_INT 0
59757: PPUSH
59758: PPUSH
59759: PPUSH
59760: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59761: LD_ADDR_VAR 0 4
59765: PUSH
59766: LD_INT 22
59768: PUSH
59769: LD_OWVAR 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 30
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 30
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PPUSH
59810: CALL_OW 69
59814: ST_TO_ADDR
// if not tmp then
59815: LD_VAR 0 4
59819: NOT
59820: IFFALSE 59824
// exit ;
59822: GO 59883
// for i in tmp do
59824: LD_ADDR_VAR 0 2
59828: PUSH
59829: LD_VAR 0 4
59833: PUSH
59834: FOR_IN
59835: IFFALSE 59881
// for j = 1 to 3 do
59837: LD_ADDR_VAR 0 3
59841: PUSH
59842: DOUBLE
59843: LD_INT 1
59845: DEC
59846: ST_TO_ADDR
59847: LD_INT 3
59849: PUSH
59850: FOR_TO
59851: IFFALSE 59877
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59853: LD_VAR 0 2
59857: PPUSH
59858: CALL_OW 274
59862: PPUSH
59863: LD_VAR 0 3
59867: PPUSH
59868: LD_INT 99999
59870: PPUSH
59871: CALL_OW 277
59875: GO 59850
59877: POP
59878: POP
59879: GO 59834
59881: POP
59882: POP
// end ;
59883: LD_VAR 0 1
59887: RET
// export function hHackSetLevel10 ; var i , j ; begin
59888: LD_INT 0
59890: PPUSH
59891: PPUSH
59892: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59893: LD_ADDR_VAR 0 2
59897: PUSH
59898: LD_INT 21
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PPUSH
59908: CALL_OW 69
59912: PUSH
59913: FOR_IN
59914: IFFALSE 59966
// if IsSelected ( i ) then
59916: LD_VAR 0 2
59920: PPUSH
59921: CALL_OW 306
59925: IFFALSE 59964
// begin for j := 1 to 4 do
59927: LD_ADDR_VAR 0 3
59931: PUSH
59932: DOUBLE
59933: LD_INT 1
59935: DEC
59936: ST_TO_ADDR
59937: LD_INT 4
59939: PUSH
59940: FOR_TO
59941: IFFALSE 59962
// SetSkill ( i , j , 10 ) ;
59943: LD_VAR 0 2
59947: PPUSH
59948: LD_VAR 0 3
59952: PPUSH
59953: LD_INT 10
59955: PPUSH
59956: CALL_OW 237
59960: GO 59940
59962: POP
59963: POP
// end ;
59964: GO 59913
59966: POP
59967: POP
// end ;
59968: LD_VAR 0 1
59972: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59973: LD_INT 0
59975: PPUSH
59976: PPUSH
59977: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59978: LD_ADDR_VAR 0 2
59982: PUSH
59983: LD_INT 22
59985: PUSH
59986: LD_OWVAR 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 21
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PPUSH
60009: CALL_OW 69
60013: PUSH
60014: FOR_IN
60015: IFFALSE 60056
// begin for j := 1 to 4 do
60017: LD_ADDR_VAR 0 3
60021: PUSH
60022: DOUBLE
60023: LD_INT 1
60025: DEC
60026: ST_TO_ADDR
60027: LD_INT 4
60029: PUSH
60030: FOR_TO
60031: IFFALSE 60052
// SetSkill ( i , j , 10 ) ;
60033: LD_VAR 0 2
60037: PPUSH
60038: LD_VAR 0 3
60042: PPUSH
60043: LD_INT 10
60045: PPUSH
60046: CALL_OW 237
60050: GO 60030
60052: POP
60053: POP
// end ;
60054: GO 60014
60056: POP
60057: POP
// end ;
60058: LD_VAR 0 1
60062: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60063: LD_INT 0
60065: PPUSH
// uc_side := your_side ;
60066: LD_ADDR_OWVAR 20
60070: PUSH
60071: LD_OWVAR 2
60075: ST_TO_ADDR
// uc_nation := nation ;
60076: LD_ADDR_OWVAR 21
60080: PUSH
60081: LD_VAR 0 1
60085: ST_TO_ADDR
// InitHc ;
60086: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60090: LD_INT 0
60092: PPUSH
60093: LD_VAR 0 2
60097: PPUSH
60098: LD_VAR 0 3
60102: PPUSH
60103: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60107: LD_VAR 0 4
60111: PPUSH
60112: LD_VAR 0 5
60116: PPUSH
60117: CALL_OW 428
60121: PUSH
60122: LD_INT 0
60124: EQUAL
60125: IFFALSE 60149
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60127: CALL_OW 44
60131: PPUSH
60132: LD_VAR 0 4
60136: PPUSH
60137: LD_VAR 0 5
60141: PPUSH
60142: LD_INT 1
60144: PPUSH
60145: CALL_OW 48
// end ;
60149: LD_VAR 0 6
60153: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60154: LD_INT 0
60156: PPUSH
60157: PPUSH
// uc_side := your_side ;
60158: LD_ADDR_OWVAR 20
60162: PUSH
60163: LD_OWVAR 2
60167: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60168: LD_VAR 0 1
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: LD_INT 5
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: IN
60195: IFFALSE 60207
// uc_nation := nation_american else
60197: LD_ADDR_OWVAR 21
60201: PUSH
60202: LD_INT 1
60204: ST_TO_ADDR
60205: GO 60250
// if chassis in [ 11 , 12 , 13 , 14 ] then
60207: LD_VAR 0 1
60211: PUSH
60212: LD_INT 11
60214: PUSH
60215: LD_INT 12
60217: PUSH
60218: LD_INT 13
60220: PUSH
60221: LD_INT 14
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: IN
60230: IFFALSE 60242
// uc_nation := nation_arabian else
60232: LD_ADDR_OWVAR 21
60236: PUSH
60237: LD_INT 2
60239: ST_TO_ADDR
60240: GO 60250
// uc_nation := nation_russian ;
60242: LD_ADDR_OWVAR 21
60246: PUSH
60247: LD_INT 3
60249: ST_TO_ADDR
// vc_chassis := chassis ;
60250: LD_ADDR_OWVAR 37
60254: PUSH
60255: LD_VAR 0 1
60259: ST_TO_ADDR
// vc_engine := engine ;
60260: LD_ADDR_OWVAR 39
60264: PUSH
60265: LD_VAR 0 2
60269: ST_TO_ADDR
// vc_control := control ;
60270: LD_ADDR_OWVAR 38
60274: PUSH
60275: LD_VAR 0 3
60279: ST_TO_ADDR
// vc_weapon := weapon ;
60280: LD_ADDR_OWVAR 40
60284: PUSH
60285: LD_VAR 0 4
60289: ST_TO_ADDR
// un := CreateVehicle ;
60290: LD_ADDR_VAR 0 8
60294: PUSH
60295: CALL_OW 45
60299: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60300: LD_VAR 0 8
60304: PPUSH
60305: LD_INT 0
60307: PPUSH
60308: LD_INT 5
60310: PPUSH
60311: CALL_OW 12
60315: PPUSH
60316: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60320: LD_VAR 0 8
60324: PPUSH
60325: LD_VAR 0 5
60329: PPUSH
60330: LD_VAR 0 6
60334: PPUSH
60335: LD_INT 1
60337: PPUSH
60338: CALL_OW 48
// end ;
60342: LD_VAR 0 7
60346: RET
// export hInvincible ; every 1 do
60347: GO 60349
60349: DISABLE
// hInvincible := [ ] ;
60350: LD_ADDR_EXP 85
60354: PUSH
60355: EMPTY
60356: ST_TO_ADDR
60357: END
// every 10 do var i ;
60358: GO 60360
60360: DISABLE
60361: LD_INT 0
60363: PPUSH
// begin enable ;
60364: ENABLE
// if not hInvincible then
60365: LD_EXP 85
60369: NOT
60370: IFFALSE 60374
// exit ;
60372: GO 60418
// for i in hInvincible do
60374: LD_ADDR_VAR 0 1
60378: PUSH
60379: LD_EXP 85
60383: PUSH
60384: FOR_IN
60385: IFFALSE 60416
// if GetLives ( i ) < 1000 then
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 256
60396: PUSH
60397: LD_INT 1000
60399: LESS
60400: IFFALSE 60414
// SetLives ( i , 1000 ) ;
60402: LD_VAR 0 1
60406: PPUSH
60407: LD_INT 1000
60409: PPUSH
60410: CALL_OW 234
60414: GO 60384
60416: POP
60417: POP
// end ;
60418: PPOPN 1
60420: END
// export function hHackInvincible ; var i ; begin
60421: LD_INT 0
60423: PPUSH
60424: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60425: LD_ADDR_VAR 0 2
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: LD_INT 21
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 21
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: LIST
60457: PPUSH
60458: CALL_OW 69
60462: PUSH
60463: FOR_IN
60464: IFFALSE 60525
// if IsSelected ( i ) then
60466: LD_VAR 0 2
60470: PPUSH
60471: CALL_OW 306
60475: IFFALSE 60523
// begin if i in hInvincible then
60477: LD_VAR 0 2
60481: PUSH
60482: LD_EXP 85
60486: IN
60487: IFFALSE 60507
// hInvincible := hInvincible diff i else
60489: LD_ADDR_EXP 85
60493: PUSH
60494: LD_EXP 85
60498: PUSH
60499: LD_VAR 0 2
60503: DIFF
60504: ST_TO_ADDR
60505: GO 60523
// hInvincible := hInvincible union i ;
60507: LD_ADDR_EXP 85
60511: PUSH
60512: LD_EXP 85
60516: PUSH
60517: LD_VAR 0 2
60521: UNION
60522: ST_TO_ADDR
// end ;
60523: GO 60463
60525: POP
60526: POP
// end ;
60527: LD_VAR 0 1
60531: RET
// export function hHackInvisible ; var i , j ; begin
60532: LD_INT 0
60534: PPUSH
60535: PPUSH
60536: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60537: LD_ADDR_VAR 0 2
60541: PUSH
60542: LD_INT 21
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PPUSH
60552: CALL_OW 69
60556: PUSH
60557: FOR_IN
60558: IFFALSE 60582
// if IsSelected ( i ) then
60560: LD_VAR 0 2
60564: PPUSH
60565: CALL_OW 306
60569: IFFALSE 60580
// ComForceInvisible ( i ) ;
60571: LD_VAR 0 2
60575: PPUSH
60576: CALL_OW 496
60580: GO 60557
60582: POP
60583: POP
// end ;
60584: LD_VAR 0 1
60588: RET
// export function hHackChangeYourSide ; begin
60589: LD_INT 0
60591: PPUSH
// if your_side = 8 then
60592: LD_OWVAR 2
60596: PUSH
60597: LD_INT 8
60599: EQUAL
60600: IFFALSE 60612
// your_side := 0 else
60602: LD_ADDR_OWVAR 2
60606: PUSH
60607: LD_INT 0
60609: ST_TO_ADDR
60610: GO 60626
// your_side := your_side + 1 ;
60612: LD_ADDR_OWVAR 2
60616: PUSH
60617: LD_OWVAR 2
60621: PUSH
60622: LD_INT 1
60624: PLUS
60625: ST_TO_ADDR
// end ;
60626: LD_VAR 0 1
60630: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60631: LD_INT 0
60633: PPUSH
60634: PPUSH
60635: PPUSH
// for i in all_units do
60636: LD_ADDR_VAR 0 2
60640: PUSH
60641: LD_OWVAR 3
60645: PUSH
60646: FOR_IN
60647: IFFALSE 60725
// if IsSelected ( i ) then
60649: LD_VAR 0 2
60653: PPUSH
60654: CALL_OW 306
60658: IFFALSE 60723
// begin j := GetSide ( i ) ;
60660: LD_ADDR_VAR 0 3
60664: PUSH
60665: LD_VAR 0 2
60669: PPUSH
60670: CALL_OW 255
60674: ST_TO_ADDR
// if j = 8 then
60675: LD_VAR 0 3
60679: PUSH
60680: LD_INT 8
60682: EQUAL
60683: IFFALSE 60695
// j := 0 else
60685: LD_ADDR_VAR 0 3
60689: PUSH
60690: LD_INT 0
60692: ST_TO_ADDR
60693: GO 60709
// j := j + 1 ;
60695: LD_ADDR_VAR 0 3
60699: PUSH
60700: LD_VAR 0 3
60704: PUSH
60705: LD_INT 1
60707: PLUS
60708: ST_TO_ADDR
// SetSide ( i , j ) ;
60709: LD_VAR 0 2
60713: PPUSH
60714: LD_VAR 0 3
60718: PPUSH
60719: CALL_OW 235
// end ;
60723: GO 60646
60725: POP
60726: POP
// end ;
60727: LD_VAR 0 1
60731: RET
// export function hHackFog ; begin
60732: LD_INT 0
60734: PPUSH
// FogOff ( true ) ;
60735: LD_INT 1
60737: PPUSH
60738: CALL_OW 344
// end ;
60742: LD_VAR 0 1
60746: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60747: LD_INT 0
60749: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60750: LD_VAR 0 1
60754: PPUSH
60755: LD_VAR 0 2
60759: PPUSH
60760: LD_VAR 0 3
60764: PPUSH
60765: LD_INT 1
60767: PPUSH
60768: LD_INT 1
60770: PPUSH
60771: CALL_OW 483
// CenterOnXY ( x , y ) ;
60775: LD_VAR 0 2
60779: PPUSH
60780: LD_VAR 0 3
60784: PPUSH
60785: CALL_OW 84
// end ;
60789: LD_VAR 0 4
60793: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60794: LD_INT 0
60796: PPUSH
60797: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60798: LD_VAR 0 1
60802: NOT
60803: PUSH
60804: LD_VAR 0 2
60808: PPUSH
60809: LD_VAR 0 3
60813: PPUSH
60814: CALL_OW 488
60818: NOT
60819: OR
60820: PUSH
60821: LD_VAR 0 1
60825: PPUSH
60826: CALL_OW 266
60830: PUSH
60831: LD_INT 3
60833: NONEQUAL
60834: PUSH
60835: LD_VAR 0 1
60839: PPUSH
60840: CALL_OW 247
60844: PUSH
60845: LD_INT 1
60847: EQUAL
60848: NOT
60849: AND
60850: OR
60851: IFFALSE 60855
// exit ;
60853: GO 61004
// if GetType ( factory ) = unit_human then
60855: LD_VAR 0 1
60859: PPUSH
60860: CALL_OW 247
60864: PUSH
60865: LD_INT 1
60867: EQUAL
60868: IFFALSE 60885
// factory := IsInUnit ( factory ) ;
60870: LD_ADDR_VAR 0 1
60874: PUSH
60875: LD_VAR 0 1
60879: PPUSH
60880: CALL_OW 310
60884: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60885: LD_VAR 0 1
60889: PPUSH
60890: CALL_OW 266
60894: PUSH
60895: LD_INT 3
60897: NONEQUAL
60898: IFFALSE 60902
// exit ;
60900: GO 61004
// if HexInfo ( x , y ) = factory then
60902: LD_VAR 0 2
60906: PPUSH
60907: LD_VAR 0 3
60911: PPUSH
60912: CALL_OW 428
60916: PUSH
60917: LD_VAR 0 1
60921: EQUAL
60922: IFFALSE 60949
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60924: LD_ADDR_EXP 86
60928: PUSH
60929: LD_EXP 86
60933: PPUSH
60934: LD_VAR 0 1
60938: PPUSH
60939: LD_INT 0
60941: PPUSH
60942: CALL_OW 1
60946: ST_TO_ADDR
60947: GO 61000
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60949: LD_ADDR_EXP 86
60953: PUSH
60954: LD_EXP 86
60958: PPUSH
60959: LD_VAR 0 1
60963: PPUSH
60964: LD_VAR 0 1
60968: PPUSH
60969: CALL_OW 255
60973: PUSH
60974: LD_VAR 0 1
60978: PUSH
60979: LD_VAR 0 2
60983: PUSH
60984: LD_VAR 0 3
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: PPUSH
60995: CALL_OW 1
60999: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61000: CALL 61009 0 0
// end ;
61004: LD_VAR 0 4
61008: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61009: LD_INT 0
61011: PPUSH
61012: PPUSH
61013: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61014: LD_STRING resetFactoryWaypoint();
61016: PPUSH
61017: CALL_OW 559
// if factoryWaypoints then
61021: LD_EXP 86
61025: IFFALSE 61151
// begin list := PrepareArray ( factoryWaypoints ) ;
61027: LD_ADDR_VAR 0 3
61031: PUSH
61032: LD_EXP 86
61036: PPUSH
61037: CALL 45780 0 1
61041: ST_TO_ADDR
// for i := 1 to list do
61042: LD_ADDR_VAR 0 2
61046: PUSH
61047: DOUBLE
61048: LD_INT 1
61050: DEC
61051: ST_TO_ADDR
61052: LD_VAR 0 3
61056: PUSH
61057: FOR_TO
61058: IFFALSE 61149
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61060: LD_STRING setFactoryWaypointXY(
61062: PUSH
61063: LD_VAR 0 3
61067: PUSH
61068: LD_VAR 0 2
61072: ARRAY
61073: PUSH
61074: LD_INT 1
61076: ARRAY
61077: STR
61078: PUSH
61079: LD_STRING ,
61081: STR
61082: PUSH
61083: LD_VAR 0 3
61087: PUSH
61088: LD_VAR 0 2
61092: ARRAY
61093: PUSH
61094: LD_INT 2
61096: ARRAY
61097: STR
61098: PUSH
61099: LD_STRING ,
61101: STR
61102: PUSH
61103: LD_VAR 0 3
61107: PUSH
61108: LD_VAR 0 2
61112: ARRAY
61113: PUSH
61114: LD_INT 3
61116: ARRAY
61117: STR
61118: PUSH
61119: LD_STRING ,
61121: STR
61122: PUSH
61123: LD_VAR 0 3
61127: PUSH
61128: LD_VAR 0 2
61132: ARRAY
61133: PUSH
61134: LD_INT 4
61136: ARRAY
61137: STR
61138: PUSH
61139: LD_STRING )
61141: STR
61142: PPUSH
61143: CALL_OW 559
61147: GO 61057
61149: POP
61150: POP
// end ; end ;
61151: LD_VAR 0 1
61155: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61156: LD_INT 0
61158: PPUSH
// if HexInfo ( x , y ) = warehouse then
61159: LD_VAR 0 2
61163: PPUSH
61164: LD_VAR 0 3
61168: PPUSH
61169: CALL_OW 428
61173: PUSH
61174: LD_VAR 0 1
61178: EQUAL
61179: IFFALSE 61206
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61181: LD_ADDR_EXP 87
61185: PUSH
61186: LD_EXP 87
61190: PPUSH
61191: LD_VAR 0 1
61195: PPUSH
61196: LD_INT 0
61198: PPUSH
61199: CALL_OW 1
61203: ST_TO_ADDR
61204: GO 61257
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61206: LD_ADDR_EXP 87
61210: PUSH
61211: LD_EXP 87
61215: PPUSH
61216: LD_VAR 0 1
61220: PPUSH
61221: LD_VAR 0 1
61225: PPUSH
61226: CALL_OW 255
61230: PUSH
61231: LD_VAR 0 1
61235: PUSH
61236: LD_VAR 0 2
61240: PUSH
61241: LD_VAR 0 3
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: PPUSH
61252: CALL_OW 1
61256: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61257: CALL 61266 0 0
// end ;
61261: LD_VAR 0 4
61265: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61271: LD_STRING resetWarehouseGatheringPoints();
61273: PPUSH
61274: CALL_OW 559
// if warehouseGatheringPoints then
61278: LD_EXP 87
61282: IFFALSE 61408
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: LD_EXP 87
61293: PPUSH
61294: CALL 45780 0 1
61298: ST_TO_ADDR
// for i := 1 to list do
61299: LD_ADDR_VAR 0 2
61303: PUSH
61304: DOUBLE
61305: LD_INT 1
61307: DEC
61308: ST_TO_ADDR
61309: LD_VAR 0 3
61313: PUSH
61314: FOR_TO
61315: IFFALSE 61406
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61317: LD_STRING setWarehouseGatheringPointXY(
61319: PUSH
61320: LD_VAR 0 3
61324: PUSH
61325: LD_VAR 0 2
61329: ARRAY
61330: PUSH
61331: LD_INT 1
61333: ARRAY
61334: STR
61335: PUSH
61336: LD_STRING ,
61338: STR
61339: PUSH
61340: LD_VAR 0 3
61344: PUSH
61345: LD_VAR 0 2
61349: ARRAY
61350: PUSH
61351: LD_INT 2
61353: ARRAY
61354: STR
61355: PUSH
61356: LD_STRING ,
61358: STR
61359: PUSH
61360: LD_VAR 0 3
61364: PUSH
61365: LD_VAR 0 2
61369: ARRAY
61370: PUSH
61371: LD_INT 3
61373: ARRAY
61374: STR
61375: PUSH
61376: LD_STRING ,
61378: STR
61379: PUSH
61380: LD_VAR 0 3
61384: PUSH
61385: LD_VAR 0 2
61389: ARRAY
61390: PUSH
61391: LD_INT 4
61393: ARRAY
61394: STR
61395: PUSH
61396: LD_STRING )
61398: STR
61399: PPUSH
61400: CALL_OW 559
61404: GO 61314
61406: POP
61407: POP
// end ; end ;
61408: LD_VAR 0 1
61412: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61413: LD_EXP 87
61417: IFFALSE 62102
61419: GO 61421
61421: DISABLE
61422: LD_INT 0
61424: PPUSH
61425: PPUSH
61426: PPUSH
61427: PPUSH
61428: PPUSH
61429: PPUSH
61430: PPUSH
61431: PPUSH
61432: PPUSH
// begin enable ;
61433: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61434: LD_ADDR_VAR 0 3
61438: PUSH
61439: LD_EXP 87
61443: PPUSH
61444: CALL 45780 0 1
61448: ST_TO_ADDR
// if not list then
61449: LD_VAR 0 3
61453: NOT
61454: IFFALSE 61458
// exit ;
61456: GO 62102
// for i := 1 to list do
61458: LD_ADDR_VAR 0 1
61462: PUSH
61463: DOUBLE
61464: LD_INT 1
61466: DEC
61467: ST_TO_ADDR
61468: LD_VAR 0 3
61472: PUSH
61473: FOR_TO
61474: IFFALSE 62100
// begin depot := list [ i ] [ 2 ] ;
61476: LD_ADDR_VAR 0 8
61480: PUSH
61481: LD_VAR 0 3
61485: PUSH
61486: LD_VAR 0 1
61490: ARRAY
61491: PUSH
61492: LD_INT 2
61494: ARRAY
61495: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61496: LD_ADDR_VAR 0 5
61500: PUSH
61501: LD_VAR 0 3
61505: PUSH
61506: LD_VAR 0 1
61510: ARRAY
61511: PUSH
61512: LD_INT 1
61514: ARRAY
61515: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61516: LD_VAR 0 8
61520: PPUSH
61521: CALL_OW 301
61525: PUSH
61526: LD_VAR 0 5
61530: PUSH
61531: LD_VAR 0 8
61535: PPUSH
61536: CALL_OW 255
61540: NONEQUAL
61541: OR
61542: IFFALSE 61571
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61544: LD_ADDR_EXP 87
61548: PUSH
61549: LD_EXP 87
61553: PPUSH
61554: LD_VAR 0 8
61558: PPUSH
61559: LD_INT 0
61561: PPUSH
61562: CALL_OW 1
61566: ST_TO_ADDR
// exit ;
61567: POP
61568: POP
61569: GO 62102
// end ; x := list [ i ] [ 3 ] ;
61571: LD_ADDR_VAR 0 6
61575: PUSH
61576: LD_VAR 0 3
61580: PUSH
61581: LD_VAR 0 1
61585: ARRAY
61586: PUSH
61587: LD_INT 3
61589: ARRAY
61590: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61591: LD_ADDR_VAR 0 7
61595: PUSH
61596: LD_VAR 0 3
61600: PUSH
61601: LD_VAR 0 1
61605: ARRAY
61606: PUSH
61607: LD_INT 4
61609: ARRAY
61610: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61611: LD_ADDR_VAR 0 9
61615: PUSH
61616: LD_VAR 0 6
61620: PPUSH
61621: LD_VAR 0 7
61625: PPUSH
61626: LD_INT 16
61628: PPUSH
61629: CALL 44368 0 3
61633: ST_TO_ADDR
// if not cratesNearbyPoint then
61634: LD_VAR 0 9
61638: NOT
61639: IFFALSE 61645
// exit ;
61641: POP
61642: POP
61643: GO 62102
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
61645: LD_ADDR_VAR 0 4
61649: PUSH
61650: LD_INT 22
61652: PUSH
61653: LD_VAR 0 5
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: LD_INT 60
61667: PUSH
61668: EMPTY
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 91
61677: PUSH
61678: LD_VAR 0 8
61682: PUSH
61683: LD_INT 6
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: LD_INT 25
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 25
61706: PUSH
61707: LD_INT 16
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: PPUSH
61725: CALL_OW 69
61729: PUSH
61730: LD_VAR 0 8
61734: PPUSH
61735: CALL_OW 313
61739: PPUSH
61740: LD_INT 3
61742: PUSH
61743: LD_INT 60
61745: PUSH
61746: EMPTY
61747: LIST
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 25
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 25
61768: PUSH
61769: LD_INT 16
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PPUSH
61785: CALL_OW 72
61789: UNION
61790: ST_TO_ADDR
// if tmp then
61791: LD_VAR 0 4
61795: IFFALSE 61875
// begin tmp := ShrinkArray ( tmp , 3 ) ;
61797: LD_ADDR_VAR 0 4
61801: PUSH
61802: LD_VAR 0 4
61806: PPUSH
61807: LD_INT 3
61809: PPUSH
61810: CALL 42337 0 2
61814: ST_TO_ADDR
// for j in tmp do
61815: LD_ADDR_VAR 0 2
61819: PUSH
61820: LD_VAR 0 4
61824: PUSH
61825: FOR_IN
61826: IFFALSE 61869
// begin if IsInUnit ( j ) then
61828: LD_VAR 0 2
61832: PPUSH
61833: CALL_OW 310
61837: IFFALSE 61848
// ComExit ( j ) ;
61839: LD_VAR 0 2
61843: PPUSH
61844: CALL 42420 0 1
// AddComCollect ( j , x , y ) ;
61848: LD_VAR 0 2
61852: PPUSH
61853: LD_VAR 0 6
61857: PPUSH
61858: LD_VAR 0 7
61862: PPUSH
61863: CALL_OW 177
// end ;
61867: GO 61825
61869: POP
61870: POP
// exit ;
61871: POP
61872: POP
61873: GO 62102
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61875: LD_ADDR_VAR 0 4
61879: PUSH
61880: LD_INT 22
61882: PUSH
61883: LD_VAR 0 5
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 91
61894: PUSH
61895: LD_VAR 0 8
61899: PUSH
61900: LD_INT 8
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: LD_INT 34
61913: PUSH
61914: LD_INT 12
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 34
61923: PUSH
61924: LD_INT 51
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 34
61933: PUSH
61934: LD_INT 32
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 34
61943: PUSH
61944: LD_INT 89
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: PPUSH
61963: CALL_OW 69
61967: ST_TO_ADDR
// if tmp then
61968: LD_VAR 0 4
61972: IFFALSE 62098
// begin for j in tmp do
61974: LD_ADDR_VAR 0 2
61978: PUSH
61979: LD_VAR 0 4
61983: PUSH
61984: FOR_IN
61985: IFFALSE 62096
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61987: LD_VAR 0 2
61991: PPUSH
61992: CALL_OW 262
61996: PUSH
61997: LD_INT 3
61999: EQUAL
62000: PUSH
62001: LD_VAR 0 2
62005: PPUSH
62006: CALL_OW 261
62010: PUSH
62011: LD_INT 20
62013: GREATER
62014: OR
62015: PUSH
62016: LD_VAR 0 2
62020: PPUSH
62021: CALL_OW 314
62025: NOT
62026: AND
62027: PUSH
62028: LD_VAR 0 2
62032: PPUSH
62033: CALL_OW 263
62037: PUSH
62038: LD_INT 1
62040: NONEQUAL
62041: PUSH
62042: LD_VAR 0 2
62046: PPUSH
62047: CALL_OW 311
62051: OR
62052: AND
62053: IFFALSE 62094
// begin ComCollect ( j , x , y ) ;
62055: LD_VAR 0 2
62059: PPUSH
62060: LD_VAR 0 6
62064: PPUSH
62065: LD_VAR 0 7
62069: PPUSH
62070: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
62074: LD_VAR 0 2
62078: PPUSH
62079: LD_VAR 0 8
62083: PPUSH
62084: CALL_OW 172
// exit ;
62088: POP
62089: POP
62090: POP
62091: POP
62092: GO 62102
// end ;
62094: GO 61984
62096: POP
62097: POP
// end ; end ;
62098: GO 61473
62100: POP
62101: POP
// end ; end_of_file
62102: PPOPN 9
62104: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62105: LD_VAR 0 1
62109: PUSH
62110: LD_INT 200
62112: DOUBLE
62113: GREATEREQUAL
62114: IFFALSE 62122
62116: LD_INT 299
62118: DOUBLE
62119: LESSEQUAL
62120: IFTRUE 62124
62122: GO 62156
62124: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62125: LD_VAR 0 1
62129: PPUSH
62130: LD_VAR 0 2
62134: PPUSH
62135: LD_VAR 0 3
62139: PPUSH
62140: LD_VAR 0 4
62144: PPUSH
62145: LD_VAR 0 5
62149: PPUSH
62150: CALL 62644 0 5
62154: GO 62233
62156: LD_INT 300
62158: DOUBLE
62159: GREATEREQUAL
62160: IFFALSE 62168
62162: LD_INT 399
62164: DOUBLE
62165: LESSEQUAL
62166: IFTRUE 62170
62168: GO 62232
62170: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62171: LD_VAR 0 1
62175: PPUSH
62176: LD_VAR 0 2
62180: PPUSH
62181: LD_VAR 0 3
62185: PPUSH
62186: LD_VAR 0 4
62190: PPUSH
62191: LD_VAR 0 5
62195: PPUSH
62196: LD_VAR 0 6
62200: PPUSH
62201: LD_VAR 0 7
62205: PPUSH
62206: LD_VAR 0 8
62210: PPUSH
62211: LD_VAR 0 9
62215: PPUSH
62216: LD_VAR 0 10
62220: PPUSH
62221: LD_VAR 0 11
62225: PPUSH
62226: CALL 58806 0 11
62230: GO 62233
62232: POP
// end ;
62233: PPOPN 11
62235: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62236: LD_VAR 0 1
62240: PPUSH
62241: LD_VAR 0 2
62245: PPUSH
62246: LD_VAR 0 3
62250: PPUSH
62251: LD_VAR 0 4
62255: PPUSH
62256: LD_VAR 0 5
62260: PPUSH
62261: CALL 62380 0 5
// end ; end_of_file
62265: PPOPN 5
62267: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62268: LD_INT 0
62270: PPUSH
62271: PPUSH
62272: PPUSH
62273: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62274: LD_VAR 0 1
62278: PPUSH
62279: CALL_OW 264
62283: PUSH
62284: LD_INT 91
62286: EQUAL
62287: IFFALSE 62359
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62289: LD_INT 68
62291: PPUSH
62292: LD_VAR 0 1
62296: PPUSH
62297: CALL_OW 255
62301: PPUSH
62302: CALL_OW 321
62306: PUSH
62307: LD_INT 2
62309: EQUAL
62310: IFFALSE 62322
// eff := 70 else
62312: LD_ADDR_VAR 0 4
62316: PUSH
62317: LD_INT 70
62319: ST_TO_ADDR
62320: GO 62330
// eff := 30 ;
62322: LD_ADDR_VAR 0 4
62326: PUSH
62327: LD_INT 30
62329: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62330: LD_VAR 0 1
62334: PPUSH
62335: CALL_OW 250
62339: PPUSH
62340: LD_VAR 0 1
62344: PPUSH
62345: CALL_OW 251
62349: PPUSH
62350: LD_VAR 0 4
62354: PPUSH
62355: CALL_OW 495
// end ; end ;
62359: LD_VAR 0 2
62363: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62364: LD_INT 0
62366: PPUSH
// end ;
62367: LD_VAR 0 4
62371: RET
// export function SOS_Command ( cmd ) ; begin
62372: LD_INT 0
62374: PPUSH
// end ;
62375: LD_VAR 0 2
62379: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62380: LD_INT 0
62382: PPUSH
// end ;
62383: LD_VAR 0 6
62387: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
// if not vehicle or not factory then
62392: LD_VAR 0 1
62396: NOT
62397: PUSH
62398: LD_VAR 0 2
62402: NOT
62403: OR
62404: IFFALSE 62408
// exit ;
62406: GO 62639
// if factoryWaypoints >= factory then
62408: LD_EXP 86
62412: PUSH
62413: LD_VAR 0 2
62417: GREATEREQUAL
62418: IFFALSE 62639
// if factoryWaypoints [ factory ] then
62420: LD_EXP 86
62424: PUSH
62425: LD_VAR 0 2
62429: ARRAY
62430: IFFALSE 62639
// begin if GetControl ( vehicle ) = control_manual then
62432: LD_VAR 0 1
62436: PPUSH
62437: CALL_OW 263
62441: PUSH
62442: LD_INT 1
62444: EQUAL
62445: IFFALSE 62526
// begin driver := IsDrivenBy ( vehicle ) ;
62447: LD_ADDR_VAR 0 4
62451: PUSH
62452: LD_VAR 0 1
62456: PPUSH
62457: CALL_OW 311
62461: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62462: LD_VAR 0 4
62466: PPUSH
62467: LD_EXP 86
62471: PUSH
62472: LD_VAR 0 2
62476: ARRAY
62477: PUSH
62478: LD_INT 3
62480: ARRAY
62481: PPUSH
62482: LD_EXP 86
62486: PUSH
62487: LD_VAR 0 2
62491: ARRAY
62492: PUSH
62493: LD_INT 4
62495: ARRAY
62496: PPUSH
62497: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62501: LD_VAR 0 4
62505: PPUSH
62506: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62510: LD_VAR 0 4
62514: PPUSH
62515: LD_VAR 0 2
62519: PPUSH
62520: CALL_OW 180
// end else
62524: GO 62639
// if GetControl ( vehicle ) = control_remote then
62526: LD_VAR 0 1
62530: PPUSH
62531: CALL_OW 263
62535: PUSH
62536: LD_INT 2
62538: EQUAL
62539: IFFALSE 62600
// begin wait ( 0 0$2 ) ;
62541: LD_INT 70
62543: PPUSH
62544: CALL_OW 67
// if Connect ( vehicle ) then
62548: LD_VAR 0 1
62552: PPUSH
62553: CALL 12641 0 1
62557: IFFALSE 62598
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62559: LD_VAR 0 1
62563: PPUSH
62564: LD_EXP 86
62568: PUSH
62569: LD_VAR 0 2
62573: ARRAY
62574: PUSH
62575: LD_INT 3
62577: ARRAY
62578: PPUSH
62579: LD_EXP 86
62583: PUSH
62584: LD_VAR 0 2
62588: ARRAY
62589: PUSH
62590: LD_INT 4
62592: ARRAY
62593: PPUSH
62594: CALL_OW 171
// end else
62598: GO 62639
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62600: LD_VAR 0 1
62604: PPUSH
62605: LD_EXP 86
62609: PUSH
62610: LD_VAR 0 2
62614: ARRAY
62615: PUSH
62616: LD_INT 3
62618: ARRAY
62619: PPUSH
62620: LD_EXP 86
62624: PUSH
62625: LD_VAR 0 2
62629: ARRAY
62630: PUSH
62631: LD_INT 4
62633: ARRAY
62634: PPUSH
62635: CALL_OW 171
// end ; end ;
62639: LD_VAR 0 3
62643: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62644: LD_INT 0
62646: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62647: LD_VAR 0 1
62651: PUSH
62652: LD_INT 250
62654: EQUAL
62655: PUSH
62656: LD_VAR 0 2
62660: PPUSH
62661: CALL_OW 264
62665: PUSH
62666: LD_INT 81
62668: EQUAL
62669: AND
62670: IFFALSE 62691
// MinerPlaceMine ( unit , x , y ) ;
62672: LD_VAR 0 2
62676: PPUSH
62677: LD_VAR 0 4
62681: PPUSH
62682: LD_VAR 0 5
62686: PPUSH
62687: CALL 65076 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62691: LD_VAR 0 1
62695: PUSH
62696: LD_INT 251
62698: EQUAL
62699: PUSH
62700: LD_VAR 0 2
62704: PPUSH
62705: CALL_OW 264
62709: PUSH
62710: LD_INT 81
62712: EQUAL
62713: AND
62714: IFFALSE 62735
// MinerDetonateMine ( unit , x , y ) ;
62716: LD_VAR 0 2
62720: PPUSH
62721: LD_VAR 0 4
62725: PPUSH
62726: LD_VAR 0 5
62730: PPUSH
62731: CALL 65351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62735: LD_VAR 0 1
62739: PUSH
62740: LD_INT 252
62742: EQUAL
62743: PUSH
62744: LD_VAR 0 2
62748: PPUSH
62749: CALL_OW 264
62753: PUSH
62754: LD_INT 81
62756: EQUAL
62757: AND
62758: IFFALSE 62779
// MinerCreateMinefield ( unit , x , y ) ;
62760: LD_VAR 0 2
62764: PPUSH
62765: LD_VAR 0 4
62769: PPUSH
62770: LD_VAR 0 5
62774: PPUSH
62775: CALL 65768 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62779: LD_VAR 0 1
62783: PUSH
62784: LD_INT 253
62786: EQUAL
62787: PUSH
62788: LD_VAR 0 2
62792: PPUSH
62793: CALL_OW 257
62797: PUSH
62798: LD_INT 5
62800: EQUAL
62801: AND
62802: IFFALSE 62823
// ComBinocular ( unit , x , y ) ;
62804: LD_VAR 0 2
62808: PPUSH
62809: LD_VAR 0 4
62813: PPUSH
62814: LD_VAR 0 5
62818: PPUSH
62819: CALL 66137 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62823: LD_VAR 0 1
62827: PUSH
62828: LD_INT 254
62830: EQUAL
62831: PUSH
62832: LD_VAR 0 2
62836: PPUSH
62837: CALL_OW 264
62841: PUSH
62842: LD_INT 99
62844: EQUAL
62845: AND
62846: PUSH
62847: LD_VAR 0 3
62851: PPUSH
62852: CALL_OW 263
62856: PUSH
62857: LD_INT 3
62859: EQUAL
62860: AND
62861: IFFALSE 62877
// HackDestroyVehicle ( unit , selectedUnit ) ;
62863: LD_VAR 0 2
62867: PPUSH
62868: LD_VAR 0 3
62872: PPUSH
62873: CALL 64440 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62877: LD_VAR 0 1
62881: PUSH
62882: LD_INT 255
62884: EQUAL
62885: PUSH
62886: LD_VAR 0 2
62890: PPUSH
62891: CALL_OW 264
62895: PUSH
62896: LD_INT 14
62898: PUSH
62899: LD_INT 53
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: IN
62906: AND
62907: PUSH
62908: LD_VAR 0 4
62912: PPUSH
62913: LD_VAR 0 5
62917: PPUSH
62918: CALL_OW 488
62922: AND
62923: IFFALSE 62947
// CutTreeXYR ( unit , x , y , 12 ) ;
62925: LD_VAR 0 2
62929: PPUSH
62930: LD_VAR 0 4
62934: PPUSH
62935: LD_VAR 0 5
62939: PPUSH
62940: LD_INT 12
62942: PPUSH
62943: CALL 63010 0 4
// if cmd = 256 then
62947: LD_VAR 0 1
62951: PUSH
62952: LD_INT 256
62954: EQUAL
62955: IFFALSE 62976
// SetFactoryWaypoint ( unit , x , y ) ;
62957: LD_VAR 0 2
62961: PPUSH
62962: LD_VAR 0 4
62966: PPUSH
62967: LD_VAR 0 5
62971: PPUSH
62972: CALL 60794 0 3
// if cmd = 257 then
62976: LD_VAR 0 1
62980: PUSH
62981: LD_INT 257
62983: EQUAL
62984: IFFALSE 63005
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62986: LD_VAR 0 2
62990: PPUSH
62991: LD_VAR 0 4
62995: PPUSH
62996: LD_VAR 0 5
63000: PPUSH
63001: CALL 61156 0 3
// end ;
63005: LD_VAR 0 6
63009: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63010: LD_INT 0
63012: PPUSH
63013: PPUSH
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
63019: PPUSH
63020: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
63021: LD_VAR 0 1
63025: NOT
63026: PUSH
63027: LD_VAR 0 2
63031: PPUSH
63032: LD_VAR 0 3
63036: PPUSH
63037: CALL_OW 488
63041: NOT
63042: OR
63043: PUSH
63044: LD_VAR 0 4
63048: NOT
63049: OR
63050: IFFALSE 63054
// exit ;
63052: GO 63394
// list := [ ] ;
63054: LD_ADDR_VAR 0 13
63058: PUSH
63059: EMPTY
63060: ST_TO_ADDR
// if x - r < 0 then
63061: LD_VAR 0 2
63065: PUSH
63066: LD_VAR 0 4
63070: MINUS
63071: PUSH
63072: LD_INT 0
63074: LESS
63075: IFFALSE 63087
// min_x := 0 else
63077: LD_ADDR_VAR 0 7
63081: PUSH
63082: LD_INT 0
63084: ST_TO_ADDR
63085: GO 63103
// min_x := x - r ;
63087: LD_ADDR_VAR 0 7
63091: PUSH
63092: LD_VAR 0 2
63096: PUSH
63097: LD_VAR 0 4
63101: MINUS
63102: ST_TO_ADDR
// if y - r < 0 then
63103: LD_VAR 0 3
63107: PUSH
63108: LD_VAR 0 4
63112: MINUS
63113: PUSH
63114: LD_INT 0
63116: LESS
63117: IFFALSE 63129
// min_y := 0 else
63119: LD_ADDR_VAR 0 8
63123: PUSH
63124: LD_INT 0
63126: ST_TO_ADDR
63127: GO 63145
// min_y := y - r ;
63129: LD_ADDR_VAR 0 8
63133: PUSH
63134: LD_VAR 0 3
63138: PUSH
63139: LD_VAR 0 4
63143: MINUS
63144: ST_TO_ADDR
// max_x := x + r ;
63145: LD_ADDR_VAR 0 9
63149: PUSH
63150: LD_VAR 0 2
63154: PUSH
63155: LD_VAR 0 4
63159: PLUS
63160: ST_TO_ADDR
// max_y := y + r ;
63161: LD_ADDR_VAR 0 10
63165: PUSH
63166: LD_VAR 0 3
63170: PUSH
63171: LD_VAR 0 4
63175: PLUS
63176: ST_TO_ADDR
// for _x = min_x to max_x do
63177: LD_ADDR_VAR 0 11
63181: PUSH
63182: DOUBLE
63183: LD_VAR 0 7
63187: DEC
63188: ST_TO_ADDR
63189: LD_VAR 0 9
63193: PUSH
63194: FOR_TO
63195: IFFALSE 63312
// for _y = min_y to max_y do
63197: LD_ADDR_VAR 0 12
63201: PUSH
63202: DOUBLE
63203: LD_VAR 0 8
63207: DEC
63208: ST_TO_ADDR
63209: LD_VAR 0 10
63213: PUSH
63214: FOR_TO
63215: IFFALSE 63308
// begin if not ValidHex ( _x , _y ) then
63217: LD_VAR 0 11
63221: PPUSH
63222: LD_VAR 0 12
63226: PPUSH
63227: CALL_OW 488
63231: NOT
63232: IFFALSE 63236
// continue ;
63234: GO 63214
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63236: LD_VAR 0 11
63240: PPUSH
63241: LD_VAR 0 12
63245: PPUSH
63246: CALL_OW 351
63250: PUSH
63251: LD_VAR 0 11
63255: PPUSH
63256: LD_VAR 0 12
63260: PPUSH
63261: CALL_OW 554
63265: AND
63266: IFFALSE 63306
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63268: LD_ADDR_VAR 0 13
63272: PUSH
63273: LD_VAR 0 13
63277: PPUSH
63278: LD_VAR 0 13
63282: PUSH
63283: LD_INT 1
63285: PLUS
63286: PPUSH
63287: LD_VAR 0 11
63291: PUSH
63292: LD_VAR 0 12
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PPUSH
63301: CALL_OW 2
63305: ST_TO_ADDR
// end ;
63306: GO 63214
63308: POP
63309: POP
63310: GO 63194
63312: POP
63313: POP
// if not list then
63314: LD_VAR 0 13
63318: NOT
63319: IFFALSE 63323
// exit ;
63321: GO 63394
// for i in list do
63323: LD_ADDR_VAR 0 6
63327: PUSH
63328: LD_VAR 0 13
63332: PUSH
63333: FOR_IN
63334: IFFALSE 63392
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63336: LD_VAR 0 1
63340: PPUSH
63341: LD_STRING M
63343: PUSH
63344: LD_VAR 0 6
63348: PUSH
63349: LD_INT 1
63351: ARRAY
63352: PUSH
63353: LD_VAR 0 6
63357: PUSH
63358: LD_INT 2
63360: ARRAY
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: PUSH
63383: EMPTY
63384: LIST
63385: PPUSH
63386: CALL_OW 447
63390: GO 63333
63392: POP
63393: POP
// end ;
63394: LD_VAR 0 5
63398: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63399: LD_EXP 89
63403: NOT
63404: IFFALSE 63454
63406: GO 63408
63408: DISABLE
// begin initHack := true ;
63409: LD_ADDR_EXP 89
63413: PUSH
63414: LD_INT 1
63416: ST_TO_ADDR
// hackTanks := [ ] ;
63417: LD_ADDR_EXP 90
63421: PUSH
63422: EMPTY
63423: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63424: LD_ADDR_EXP 91
63428: PUSH
63429: EMPTY
63430: ST_TO_ADDR
// hackLimit := 3 ;
63431: LD_ADDR_EXP 92
63435: PUSH
63436: LD_INT 3
63438: ST_TO_ADDR
// hackDist := 12 ;
63439: LD_ADDR_EXP 93
63443: PUSH
63444: LD_INT 12
63446: ST_TO_ADDR
// hackCounter := [ ] ;
63447: LD_ADDR_EXP 94
63451: PUSH
63452: EMPTY
63453: ST_TO_ADDR
// end ;
63454: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63455: LD_EXP 89
63459: PUSH
63460: LD_INT 34
63462: PUSH
63463: LD_INT 99
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PPUSH
63470: CALL_OW 69
63474: AND
63475: IFFALSE 63728
63477: GO 63479
63479: DISABLE
63480: LD_INT 0
63482: PPUSH
63483: PPUSH
// begin enable ;
63484: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63485: LD_ADDR_VAR 0 1
63489: PUSH
63490: LD_INT 34
63492: PUSH
63493: LD_INT 99
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PPUSH
63500: CALL_OW 69
63504: PUSH
63505: FOR_IN
63506: IFFALSE 63726
// begin if not i in hackTanks then
63508: LD_VAR 0 1
63512: PUSH
63513: LD_EXP 90
63517: IN
63518: NOT
63519: IFFALSE 63602
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63521: LD_ADDR_EXP 90
63525: PUSH
63526: LD_EXP 90
63530: PPUSH
63531: LD_EXP 90
63535: PUSH
63536: LD_INT 1
63538: PLUS
63539: PPUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: CALL_OW 1
63549: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63550: LD_ADDR_EXP 91
63554: PUSH
63555: LD_EXP 91
63559: PPUSH
63560: LD_EXP 91
63564: PUSH
63565: LD_INT 1
63567: PLUS
63568: PPUSH
63569: EMPTY
63570: PPUSH
63571: CALL_OW 1
63575: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63576: LD_ADDR_EXP 94
63580: PUSH
63581: LD_EXP 94
63585: PPUSH
63586: LD_EXP 94
63590: PUSH
63591: LD_INT 1
63593: PLUS
63594: PPUSH
63595: EMPTY
63596: PPUSH
63597: CALL_OW 1
63601: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63602: LD_VAR 0 1
63606: PPUSH
63607: CALL_OW 302
63611: NOT
63612: IFFALSE 63625
// begin HackUnlinkAll ( i ) ;
63614: LD_VAR 0 1
63618: PPUSH
63619: CALL 63731 0 1
// continue ;
63623: GO 63505
// end ; HackCheckCapturedStatus ( i ) ;
63625: LD_VAR 0 1
63629: PPUSH
63630: CALL 64174 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63634: LD_ADDR_VAR 0 2
63638: PUSH
63639: LD_INT 81
63641: PUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 255
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 33
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 91
63668: PUSH
63669: LD_VAR 0 1
63673: PUSH
63674: LD_EXP 93
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 50
63686: PUSH
63687: EMPTY
63688: LIST
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: PPUSH
63696: CALL_OW 69
63700: ST_TO_ADDR
// if not tmp then
63701: LD_VAR 0 2
63705: NOT
63706: IFFALSE 63710
// continue ;
63708: GO 63505
// HackLink ( i , tmp ) ;
63710: LD_VAR 0 1
63714: PPUSH
63715: LD_VAR 0 2
63719: PPUSH
63720: CALL 63867 0 2
// end ;
63724: GO 63505
63726: POP
63727: POP
// end ;
63728: PPOPN 2
63730: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63731: LD_INT 0
63733: PPUSH
63734: PPUSH
63735: PPUSH
// if not hack in hackTanks then
63736: LD_VAR 0 1
63740: PUSH
63741: LD_EXP 90
63745: IN
63746: NOT
63747: IFFALSE 63751
// exit ;
63749: GO 63862
// index := GetElementIndex ( hackTanks , hack ) ;
63751: LD_ADDR_VAR 0 4
63755: PUSH
63756: LD_EXP 90
63760: PPUSH
63761: LD_VAR 0 1
63765: PPUSH
63766: CALL 9448 0 2
63770: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63771: LD_EXP 91
63775: PUSH
63776: LD_VAR 0 4
63780: ARRAY
63781: IFFALSE 63862
// begin for i in hackTanksCaptured [ index ] do
63783: LD_ADDR_VAR 0 3
63787: PUSH
63788: LD_EXP 91
63792: PUSH
63793: LD_VAR 0 4
63797: ARRAY
63798: PUSH
63799: FOR_IN
63800: IFFALSE 63826
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63802: LD_VAR 0 3
63806: PUSH
63807: LD_INT 1
63809: ARRAY
63810: PPUSH
63811: LD_VAR 0 3
63815: PUSH
63816: LD_INT 2
63818: ARRAY
63819: PPUSH
63820: CALL_OW 235
63824: GO 63799
63826: POP
63827: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63828: LD_ADDR_EXP 91
63832: PUSH
63833: LD_EXP 91
63837: PPUSH
63838: LD_VAR 0 4
63842: PPUSH
63843: EMPTY
63844: PPUSH
63845: CALL_OW 1
63849: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63850: LD_VAR 0 1
63854: PPUSH
63855: LD_INT 0
63857: PPUSH
63858: CALL_OW 505
// end ; end ;
63862: LD_VAR 0 2
63866: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63867: LD_INT 0
63869: PPUSH
63870: PPUSH
63871: PPUSH
// if not hack in hackTanks or not vehicles then
63872: LD_VAR 0 1
63876: PUSH
63877: LD_EXP 90
63881: IN
63882: NOT
63883: PUSH
63884: LD_VAR 0 2
63888: NOT
63889: OR
63890: IFFALSE 63894
// exit ;
63892: GO 64169
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63894: LD_ADDR_VAR 0 2
63898: PUSH
63899: LD_VAR 0 1
63903: PPUSH
63904: LD_VAR 0 2
63908: PPUSH
63909: LD_INT 1
63911: PPUSH
63912: LD_INT 1
63914: PPUSH
63915: CALL 10098 0 4
63919: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63920: LD_ADDR_VAR 0 5
63924: PUSH
63925: LD_EXP 90
63929: PPUSH
63930: LD_VAR 0 1
63934: PPUSH
63935: CALL 9448 0 2
63939: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63940: LD_EXP 91
63944: PUSH
63945: LD_VAR 0 5
63949: ARRAY
63950: PUSH
63951: LD_EXP 92
63955: LESS
63956: IFFALSE 64145
// begin for i := 1 to vehicles do
63958: LD_ADDR_VAR 0 4
63962: PUSH
63963: DOUBLE
63964: LD_INT 1
63966: DEC
63967: ST_TO_ADDR
63968: LD_VAR 0 2
63972: PUSH
63973: FOR_TO
63974: IFFALSE 64143
// begin if hackTanksCaptured [ index ] = hackLimit then
63976: LD_EXP 91
63980: PUSH
63981: LD_VAR 0 5
63985: ARRAY
63986: PUSH
63987: LD_EXP 92
63991: EQUAL
63992: IFFALSE 63996
// break ;
63994: GO 64143
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63996: LD_ADDR_EXP 94
64000: PUSH
64001: LD_EXP 94
64005: PPUSH
64006: LD_VAR 0 5
64010: PPUSH
64011: LD_EXP 94
64015: PUSH
64016: LD_VAR 0 5
64020: ARRAY
64021: PUSH
64022: LD_INT 1
64024: PLUS
64025: PPUSH
64026: CALL_OW 1
64030: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
64031: LD_ADDR_EXP 91
64035: PUSH
64036: LD_EXP 91
64040: PPUSH
64041: LD_VAR 0 5
64045: PUSH
64046: LD_EXP 91
64050: PUSH
64051: LD_VAR 0 5
64055: ARRAY
64056: PUSH
64057: LD_INT 1
64059: PLUS
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PPUSH
64065: LD_VAR 0 2
64069: PUSH
64070: LD_VAR 0 4
64074: ARRAY
64075: PUSH
64076: LD_VAR 0 2
64080: PUSH
64081: LD_VAR 0 4
64085: ARRAY
64086: PPUSH
64087: CALL_OW 255
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PPUSH
64096: CALL 9663 0 3
64100: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64101: LD_VAR 0 2
64105: PUSH
64106: LD_VAR 0 4
64110: ARRAY
64111: PPUSH
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL_OW 255
64121: PPUSH
64122: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64126: LD_VAR 0 2
64130: PUSH
64131: LD_VAR 0 4
64135: ARRAY
64136: PPUSH
64137: CALL_OW 141
// end ;
64141: GO 63973
64143: POP
64144: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_EXP 91
64154: PUSH
64155: LD_VAR 0 5
64159: ARRAY
64160: PUSH
64161: LD_INT 0
64163: PLUS
64164: PPUSH
64165: CALL_OW 505
// end ;
64169: LD_VAR 0 3
64173: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64174: LD_INT 0
64176: PPUSH
64177: PPUSH
64178: PPUSH
64179: PPUSH
// if not hack in hackTanks then
64180: LD_VAR 0 1
64184: PUSH
64185: LD_EXP 90
64189: IN
64190: NOT
64191: IFFALSE 64195
// exit ;
64193: GO 64435
// index := GetElementIndex ( hackTanks , hack ) ;
64195: LD_ADDR_VAR 0 4
64199: PUSH
64200: LD_EXP 90
64204: PPUSH
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL 9448 0 2
64214: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64215: LD_ADDR_VAR 0 3
64219: PUSH
64220: DOUBLE
64221: LD_EXP 91
64225: PUSH
64226: LD_VAR 0 4
64230: ARRAY
64231: INC
64232: ST_TO_ADDR
64233: LD_INT 1
64235: PUSH
64236: FOR_DOWNTO
64237: IFFALSE 64409
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64239: LD_ADDR_VAR 0 5
64243: PUSH
64244: LD_EXP 91
64248: PUSH
64249: LD_VAR 0 4
64253: ARRAY
64254: PUSH
64255: LD_VAR 0 3
64259: ARRAY
64260: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64261: LD_VAR 0 5
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: PPUSH
64270: CALL_OW 302
64274: NOT
64275: PUSH
64276: LD_VAR 0 5
64280: PUSH
64281: LD_INT 1
64283: ARRAY
64284: PPUSH
64285: CALL_OW 255
64289: PUSH
64290: LD_VAR 0 1
64294: PPUSH
64295: CALL_OW 255
64299: NONEQUAL
64300: OR
64301: IFFALSE 64407
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64303: LD_VAR 0 5
64307: PUSH
64308: LD_INT 1
64310: ARRAY
64311: PPUSH
64312: CALL_OW 305
64316: PUSH
64317: LD_VAR 0 5
64321: PUSH
64322: LD_INT 1
64324: ARRAY
64325: PPUSH
64326: CALL_OW 255
64330: PUSH
64331: LD_VAR 0 1
64335: PPUSH
64336: CALL_OW 255
64340: EQUAL
64341: AND
64342: IFFALSE 64366
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64344: LD_VAR 0 5
64348: PUSH
64349: LD_INT 1
64351: ARRAY
64352: PPUSH
64353: LD_VAR 0 5
64357: PUSH
64358: LD_INT 2
64360: ARRAY
64361: PPUSH
64362: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64366: LD_ADDR_EXP 91
64370: PUSH
64371: LD_EXP 91
64375: PPUSH
64376: LD_VAR 0 4
64380: PPUSH
64381: LD_EXP 91
64385: PUSH
64386: LD_VAR 0 4
64390: ARRAY
64391: PPUSH
64392: LD_VAR 0 3
64396: PPUSH
64397: CALL_OW 3
64401: PPUSH
64402: CALL_OW 1
64406: ST_TO_ADDR
// end ; end ;
64407: GO 64236
64409: POP
64410: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64411: LD_VAR 0 1
64415: PPUSH
64416: LD_EXP 91
64420: PUSH
64421: LD_VAR 0 4
64425: ARRAY
64426: PUSH
64427: LD_INT 0
64429: PLUS
64430: PPUSH
64431: CALL_OW 505
// end ;
64435: LD_VAR 0 2
64439: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64440: LD_INT 0
64442: PPUSH
64443: PPUSH
64444: PPUSH
64445: PPUSH
// if not hack in hackTanks then
64446: LD_VAR 0 1
64450: PUSH
64451: LD_EXP 90
64455: IN
64456: NOT
64457: IFFALSE 64461
// exit ;
64459: GO 64546
// index := GetElementIndex ( hackTanks , hack ) ;
64461: LD_ADDR_VAR 0 5
64465: PUSH
64466: LD_EXP 90
64470: PPUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL 9448 0 2
64480: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64481: LD_ADDR_VAR 0 4
64485: PUSH
64486: DOUBLE
64487: LD_INT 1
64489: DEC
64490: ST_TO_ADDR
64491: LD_EXP 91
64495: PUSH
64496: LD_VAR 0 5
64500: ARRAY
64501: PUSH
64502: FOR_TO
64503: IFFALSE 64544
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64505: LD_EXP 91
64509: PUSH
64510: LD_VAR 0 5
64514: ARRAY
64515: PUSH
64516: LD_VAR 0 4
64520: ARRAY
64521: PUSH
64522: LD_INT 1
64524: ARRAY
64525: PUSH
64526: LD_VAR 0 2
64530: EQUAL
64531: IFFALSE 64542
// KillUnit ( vehicle ) ;
64533: LD_VAR 0 2
64537: PPUSH
64538: CALL_OW 66
64542: GO 64502
64544: POP
64545: POP
// end ;
64546: LD_VAR 0 3
64550: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64551: LD_EXP 95
64555: NOT
64556: IFFALSE 64591
64558: GO 64560
64560: DISABLE
// begin initMiner := true ;
64561: LD_ADDR_EXP 95
64565: PUSH
64566: LD_INT 1
64568: ST_TO_ADDR
// minersList := [ ] ;
64569: LD_ADDR_EXP 96
64573: PUSH
64574: EMPTY
64575: ST_TO_ADDR
// minerMinesList := [ ] ;
64576: LD_ADDR_EXP 97
64580: PUSH
64581: EMPTY
64582: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64583: LD_ADDR_EXP 98
64587: PUSH
64588: LD_INT 5
64590: ST_TO_ADDR
// end ;
64591: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64592: LD_EXP 95
64596: PUSH
64597: LD_INT 34
64599: PUSH
64600: LD_INT 81
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PPUSH
64607: CALL_OW 69
64611: AND
64612: IFFALSE 65073
64614: GO 64616
64616: DISABLE
64617: LD_INT 0
64619: PPUSH
64620: PPUSH
64621: PPUSH
64622: PPUSH
// begin enable ;
64623: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64624: LD_ADDR_VAR 0 1
64628: PUSH
64629: LD_INT 34
64631: PUSH
64632: LD_INT 81
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PPUSH
64639: CALL_OW 69
64643: PUSH
64644: FOR_IN
64645: IFFALSE 64717
// begin if not i in minersList then
64647: LD_VAR 0 1
64651: PUSH
64652: LD_EXP 96
64656: IN
64657: NOT
64658: IFFALSE 64715
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64660: LD_ADDR_EXP 96
64664: PUSH
64665: LD_EXP 96
64669: PPUSH
64670: LD_EXP 96
64674: PUSH
64675: LD_INT 1
64677: PLUS
64678: PPUSH
64679: LD_VAR 0 1
64683: PPUSH
64684: CALL_OW 1
64688: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64689: LD_ADDR_EXP 97
64693: PUSH
64694: LD_EXP 97
64698: PPUSH
64699: LD_EXP 97
64703: PUSH
64704: LD_INT 1
64706: PLUS
64707: PPUSH
64708: EMPTY
64709: PPUSH
64710: CALL_OW 1
64714: ST_TO_ADDR
// end end ;
64715: GO 64644
64717: POP
64718: POP
// for i := minerMinesList downto 1 do
64719: LD_ADDR_VAR 0 1
64723: PUSH
64724: DOUBLE
64725: LD_EXP 97
64729: INC
64730: ST_TO_ADDR
64731: LD_INT 1
64733: PUSH
64734: FOR_DOWNTO
64735: IFFALSE 65071
// begin if IsLive ( minersList [ i ] ) then
64737: LD_EXP 96
64741: PUSH
64742: LD_VAR 0 1
64746: ARRAY
64747: PPUSH
64748: CALL_OW 300
64752: IFFALSE 64780
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64754: LD_EXP 96
64758: PUSH
64759: LD_VAR 0 1
64763: ARRAY
64764: PPUSH
64765: LD_EXP 97
64769: PUSH
64770: LD_VAR 0 1
64774: ARRAY
64775: PPUSH
64776: CALL_OW 505
// if not minerMinesList [ i ] then
64780: LD_EXP 97
64784: PUSH
64785: LD_VAR 0 1
64789: ARRAY
64790: NOT
64791: IFFALSE 64795
// continue ;
64793: GO 64734
// for j := minerMinesList [ i ] downto 1 do
64795: LD_ADDR_VAR 0 2
64799: PUSH
64800: DOUBLE
64801: LD_EXP 97
64805: PUSH
64806: LD_VAR 0 1
64810: ARRAY
64811: INC
64812: ST_TO_ADDR
64813: LD_INT 1
64815: PUSH
64816: FOR_DOWNTO
64817: IFFALSE 65067
// begin side := GetSide ( minersList [ i ] ) ;
64819: LD_ADDR_VAR 0 3
64823: PUSH
64824: LD_EXP 96
64828: PUSH
64829: LD_VAR 0 1
64833: ARRAY
64834: PPUSH
64835: CALL_OW 255
64839: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64840: LD_ADDR_VAR 0 4
64844: PUSH
64845: LD_EXP 97
64849: PUSH
64850: LD_VAR 0 1
64854: ARRAY
64855: PUSH
64856: LD_VAR 0 2
64860: ARRAY
64861: PUSH
64862: LD_INT 1
64864: ARRAY
64865: PPUSH
64866: LD_EXP 97
64870: PUSH
64871: LD_VAR 0 1
64875: ARRAY
64876: PUSH
64877: LD_VAR 0 2
64881: ARRAY
64882: PUSH
64883: LD_INT 2
64885: ARRAY
64886: PPUSH
64887: CALL_OW 428
64891: ST_TO_ADDR
// if not tmp then
64892: LD_VAR 0 4
64896: NOT
64897: IFFALSE 64901
// continue ;
64899: GO 64816
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64901: LD_VAR 0 4
64905: PUSH
64906: LD_INT 81
64908: PUSH
64909: LD_VAR 0 3
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PPUSH
64918: CALL_OW 69
64922: IN
64923: PUSH
64924: LD_EXP 97
64928: PUSH
64929: LD_VAR 0 1
64933: ARRAY
64934: PUSH
64935: LD_VAR 0 2
64939: ARRAY
64940: PUSH
64941: LD_INT 1
64943: ARRAY
64944: PPUSH
64945: LD_EXP 97
64949: PUSH
64950: LD_VAR 0 1
64954: ARRAY
64955: PUSH
64956: LD_VAR 0 2
64960: ARRAY
64961: PUSH
64962: LD_INT 2
64964: ARRAY
64965: PPUSH
64966: CALL_OW 458
64970: AND
64971: IFFALSE 65065
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64973: LD_EXP 97
64977: PUSH
64978: LD_VAR 0 1
64982: ARRAY
64983: PUSH
64984: LD_VAR 0 2
64988: ARRAY
64989: PUSH
64990: LD_INT 1
64992: ARRAY
64993: PPUSH
64994: LD_EXP 97
64998: PUSH
64999: LD_VAR 0 1
65003: ARRAY
65004: PUSH
65005: LD_VAR 0 2
65009: ARRAY
65010: PUSH
65011: LD_INT 2
65013: ARRAY
65014: PPUSH
65015: LD_VAR 0 3
65019: PPUSH
65020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
65024: LD_ADDR_EXP 97
65028: PUSH
65029: LD_EXP 97
65033: PPUSH
65034: LD_VAR 0 1
65038: PPUSH
65039: LD_EXP 97
65043: PUSH
65044: LD_VAR 0 1
65048: ARRAY
65049: PPUSH
65050: LD_VAR 0 2
65054: PPUSH
65055: CALL_OW 3
65059: PPUSH
65060: CALL_OW 1
65064: ST_TO_ADDR
// end ; end ;
65065: GO 64816
65067: POP
65068: POP
// end ;
65069: GO 64734
65071: POP
65072: POP
// end ;
65073: PPOPN 4
65075: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
65076: LD_INT 0
65078: PPUSH
65079: PPUSH
// result := false ;
65080: LD_ADDR_VAR 0 4
65084: PUSH
65085: LD_INT 0
65087: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 264
65097: PUSH
65098: LD_INT 81
65100: EQUAL
65101: NOT
65102: IFFALSE 65106
// exit ;
65104: GO 65346
// index := GetElementIndex ( minersList , unit ) ;
65106: LD_ADDR_VAR 0 5
65110: PUSH
65111: LD_EXP 96
65115: PPUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: CALL 9448 0 2
65125: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65126: LD_EXP 97
65130: PUSH
65131: LD_VAR 0 5
65135: ARRAY
65136: PUSH
65137: LD_EXP 98
65141: GREATEREQUAL
65142: IFFALSE 65146
// exit ;
65144: GO 65346
// ComMoveXY ( unit , x , y ) ;
65146: LD_VAR 0 1
65150: PPUSH
65151: LD_VAR 0 2
65155: PPUSH
65156: LD_VAR 0 3
65160: PPUSH
65161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65165: LD_INT 35
65167: PPUSH
65168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65172: LD_VAR 0 1
65176: PPUSH
65177: LD_VAR 0 2
65181: PPUSH
65182: LD_VAR 0 3
65186: PPUSH
65187: CALL 40832 0 3
65191: NOT
65192: PUSH
65193: LD_VAR 0 1
65197: PPUSH
65198: CALL_OW 314
65202: AND
65203: IFFALSE 65207
// exit ;
65205: GO 65346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65207: LD_VAR 0 2
65211: PPUSH
65212: LD_VAR 0 3
65216: PPUSH
65217: CALL_OW 428
65221: PUSH
65222: LD_VAR 0 1
65226: EQUAL
65227: PUSH
65228: LD_VAR 0 1
65232: PPUSH
65233: CALL_OW 314
65237: NOT
65238: AND
65239: IFFALSE 65165
// PlaySoundXY ( x , y , PlantMine ) ;
65241: LD_VAR 0 2
65245: PPUSH
65246: LD_VAR 0 3
65250: PPUSH
65251: LD_STRING PlantMine
65253: PPUSH
65254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65258: LD_VAR 0 2
65262: PPUSH
65263: LD_VAR 0 3
65267: PPUSH
65268: LD_VAR 0 1
65272: PPUSH
65273: CALL_OW 255
65277: PPUSH
65278: LD_INT 0
65280: PPUSH
65281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65285: LD_ADDR_EXP 97
65289: PUSH
65290: LD_EXP 97
65294: PPUSH
65295: LD_VAR 0 5
65299: PUSH
65300: LD_EXP 97
65304: PUSH
65305: LD_VAR 0 5
65309: ARRAY
65310: PUSH
65311: LD_INT 1
65313: PLUS
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PPUSH
65319: LD_VAR 0 2
65323: PUSH
65324: LD_VAR 0 3
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PPUSH
65333: CALL 9663 0 3
65337: ST_TO_ADDR
// result := true ;
65338: LD_ADDR_VAR 0 4
65342: PUSH
65343: LD_INT 1
65345: ST_TO_ADDR
// end ;
65346: LD_VAR 0 4
65350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65351: LD_INT 0
65353: PPUSH
65354: PPUSH
65355: PPUSH
// if not unit in minersList then
65356: LD_VAR 0 1
65360: PUSH
65361: LD_EXP 96
65365: IN
65366: NOT
65367: IFFALSE 65371
// exit ;
65369: GO 65763
// index := GetElementIndex ( minersList , unit ) ;
65371: LD_ADDR_VAR 0 6
65375: PUSH
65376: LD_EXP 96
65380: PPUSH
65381: LD_VAR 0 1
65385: PPUSH
65386: CALL 9448 0 2
65390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65391: LD_ADDR_VAR 0 5
65395: PUSH
65396: DOUBLE
65397: LD_EXP 97
65401: PUSH
65402: LD_VAR 0 6
65406: ARRAY
65407: INC
65408: ST_TO_ADDR
65409: LD_INT 1
65411: PUSH
65412: FOR_DOWNTO
65413: IFFALSE 65574
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65415: LD_EXP 97
65419: PUSH
65420: LD_VAR 0 6
65424: ARRAY
65425: PUSH
65426: LD_VAR 0 5
65430: ARRAY
65431: PUSH
65432: LD_INT 1
65434: ARRAY
65435: PUSH
65436: LD_VAR 0 2
65440: EQUAL
65441: PUSH
65442: LD_EXP 97
65446: PUSH
65447: LD_VAR 0 6
65451: ARRAY
65452: PUSH
65453: LD_VAR 0 5
65457: ARRAY
65458: PUSH
65459: LD_INT 2
65461: ARRAY
65462: PUSH
65463: LD_VAR 0 3
65467: EQUAL
65468: AND
65469: IFFALSE 65572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65471: LD_EXP 97
65475: PUSH
65476: LD_VAR 0 6
65480: ARRAY
65481: PUSH
65482: LD_VAR 0 5
65486: ARRAY
65487: PUSH
65488: LD_INT 1
65490: ARRAY
65491: PPUSH
65492: LD_EXP 97
65496: PUSH
65497: LD_VAR 0 6
65501: ARRAY
65502: PUSH
65503: LD_VAR 0 5
65507: ARRAY
65508: PUSH
65509: LD_INT 2
65511: ARRAY
65512: PPUSH
65513: LD_VAR 0 1
65517: PPUSH
65518: CALL_OW 255
65522: PPUSH
65523: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65527: LD_ADDR_EXP 97
65531: PUSH
65532: LD_EXP 97
65536: PPUSH
65537: LD_VAR 0 6
65541: PPUSH
65542: LD_EXP 97
65546: PUSH
65547: LD_VAR 0 6
65551: ARRAY
65552: PPUSH
65553: LD_VAR 0 5
65557: PPUSH
65558: CALL_OW 3
65562: PPUSH
65563: CALL_OW 1
65567: ST_TO_ADDR
// exit ;
65568: POP
65569: POP
65570: GO 65763
// end ; end ;
65572: GO 65412
65574: POP
65575: POP
// for i := minerMinesList [ index ] downto 1 do
65576: LD_ADDR_VAR 0 5
65580: PUSH
65581: DOUBLE
65582: LD_EXP 97
65586: PUSH
65587: LD_VAR 0 6
65591: ARRAY
65592: INC
65593: ST_TO_ADDR
65594: LD_INT 1
65596: PUSH
65597: FOR_DOWNTO
65598: IFFALSE 65761
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65600: LD_EXP 97
65604: PUSH
65605: LD_VAR 0 6
65609: ARRAY
65610: PUSH
65611: LD_VAR 0 5
65615: ARRAY
65616: PUSH
65617: LD_INT 1
65619: ARRAY
65620: PPUSH
65621: LD_EXP 97
65625: PUSH
65626: LD_VAR 0 6
65630: ARRAY
65631: PUSH
65632: LD_VAR 0 5
65636: ARRAY
65637: PUSH
65638: LD_INT 2
65640: ARRAY
65641: PPUSH
65642: LD_VAR 0 2
65646: PPUSH
65647: LD_VAR 0 3
65651: PPUSH
65652: CALL_OW 298
65656: PUSH
65657: LD_INT 6
65659: LESS
65660: IFFALSE 65759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65662: LD_EXP 97
65666: PUSH
65667: LD_VAR 0 6
65671: ARRAY
65672: PUSH
65673: LD_VAR 0 5
65677: ARRAY
65678: PUSH
65679: LD_INT 1
65681: ARRAY
65682: PPUSH
65683: LD_EXP 97
65687: PUSH
65688: LD_VAR 0 6
65692: ARRAY
65693: PUSH
65694: LD_VAR 0 5
65698: ARRAY
65699: PUSH
65700: LD_INT 2
65702: ARRAY
65703: PPUSH
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL_OW 255
65713: PPUSH
65714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65718: LD_ADDR_EXP 97
65722: PUSH
65723: LD_EXP 97
65727: PPUSH
65728: LD_VAR 0 6
65732: PPUSH
65733: LD_EXP 97
65737: PUSH
65738: LD_VAR 0 6
65742: ARRAY
65743: PPUSH
65744: LD_VAR 0 5
65748: PPUSH
65749: CALL_OW 3
65753: PPUSH
65754: CALL_OW 1
65758: ST_TO_ADDR
// end ; end ;
65759: GO 65597
65761: POP
65762: POP
// end ;
65763: LD_VAR 0 4
65767: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65768: LD_INT 0
65770: PPUSH
65771: PPUSH
65772: PPUSH
65773: PPUSH
65774: PPUSH
65775: PPUSH
65776: PPUSH
65777: PPUSH
65778: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65779: LD_VAR 0 1
65783: PPUSH
65784: CALL_OW 264
65788: PUSH
65789: LD_INT 81
65791: EQUAL
65792: NOT
65793: PUSH
65794: LD_VAR 0 1
65798: PUSH
65799: LD_EXP 96
65803: IN
65804: NOT
65805: OR
65806: IFFALSE 65810
// exit ;
65808: GO 66132
// index := GetElementIndex ( minersList , unit ) ;
65810: LD_ADDR_VAR 0 6
65814: PUSH
65815: LD_EXP 96
65819: PPUSH
65820: LD_VAR 0 1
65824: PPUSH
65825: CALL 9448 0 2
65829: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65830: LD_ADDR_VAR 0 8
65834: PUSH
65835: LD_EXP 98
65839: PUSH
65840: LD_EXP 97
65844: PUSH
65845: LD_VAR 0 6
65849: ARRAY
65850: MINUS
65851: ST_TO_ADDR
// if not minesFreeAmount then
65852: LD_VAR 0 8
65856: NOT
65857: IFFALSE 65861
// exit ;
65859: GO 66132
// tmp := [ ] ;
65861: LD_ADDR_VAR 0 7
65865: PUSH
65866: EMPTY
65867: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65868: LD_ADDR_VAR 0 5
65872: PUSH
65873: DOUBLE
65874: LD_INT 1
65876: DEC
65877: ST_TO_ADDR
65878: LD_VAR 0 8
65882: PUSH
65883: FOR_TO
65884: IFFALSE 66079
// begin _d := rand ( 0 , 5 ) ;
65886: LD_ADDR_VAR 0 11
65890: PUSH
65891: LD_INT 0
65893: PPUSH
65894: LD_INT 5
65896: PPUSH
65897: CALL_OW 12
65901: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65902: LD_ADDR_VAR 0 12
65906: PUSH
65907: LD_INT 2
65909: PPUSH
65910: LD_INT 6
65912: PPUSH
65913: CALL_OW 12
65917: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65918: LD_ADDR_VAR 0 9
65922: PUSH
65923: LD_VAR 0 2
65927: PPUSH
65928: LD_VAR 0 11
65932: PPUSH
65933: LD_VAR 0 12
65937: PPUSH
65938: CALL_OW 272
65942: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65943: LD_ADDR_VAR 0 10
65947: PUSH
65948: LD_VAR 0 3
65952: PPUSH
65953: LD_VAR 0 11
65957: PPUSH
65958: LD_VAR 0 12
65962: PPUSH
65963: CALL_OW 273
65967: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65968: LD_VAR 0 9
65972: PPUSH
65973: LD_VAR 0 10
65977: PPUSH
65978: CALL_OW 488
65982: PUSH
65983: LD_VAR 0 9
65987: PUSH
65988: LD_VAR 0 10
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_VAR 0 7
66001: IN
66002: NOT
66003: AND
66004: PUSH
66005: LD_VAR 0 9
66009: PPUSH
66010: LD_VAR 0 10
66014: PPUSH
66015: CALL_OW 458
66019: NOT
66020: AND
66021: IFFALSE 66063
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
66023: LD_ADDR_VAR 0 7
66027: PUSH
66028: LD_VAR 0 7
66032: PPUSH
66033: LD_VAR 0 7
66037: PUSH
66038: LD_INT 1
66040: PLUS
66041: PPUSH
66042: LD_VAR 0 9
66046: PUSH
66047: LD_VAR 0 10
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PPUSH
66056: CALL_OW 1
66060: ST_TO_ADDR
66061: GO 66077
// i := i - 1 ;
66063: LD_ADDR_VAR 0 5
66067: PUSH
66068: LD_VAR 0 5
66072: PUSH
66073: LD_INT 1
66075: MINUS
66076: ST_TO_ADDR
// end ;
66077: GO 65883
66079: POP
66080: POP
// for i in tmp do
66081: LD_ADDR_VAR 0 5
66085: PUSH
66086: LD_VAR 0 7
66090: PUSH
66091: FOR_IN
66092: IFFALSE 66130
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66094: LD_VAR 0 1
66098: PPUSH
66099: LD_VAR 0 5
66103: PUSH
66104: LD_INT 1
66106: ARRAY
66107: PPUSH
66108: LD_VAR 0 5
66112: PUSH
66113: LD_INT 2
66115: ARRAY
66116: PPUSH
66117: CALL 65076 0 3
66121: NOT
66122: IFFALSE 66128
// exit ;
66124: POP
66125: POP
66126: GO 66132
66128: GO 66091
66130: POP
66131: POP
// end ;
66132: LD_VAR 0 4
66136: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66137: LD_INT 0
66139: PPUSH
66140: PPUSH
66141: PPUSH
66142: PPUSH
66143: PPUSH
66144: PPUSH
66145: PPUSH
// if not GetClass ( unit ) = class_sniper then
66146: LD_VAR 0 1
66150: PPUSH
66151: CALL_OW 257
66155: PUSH
66156: LD_INT 5
66158: EQUAL
66159: NOT
66160: IFFALSE 66164
// exit ;
66162: GO 66552
// dist := 8 ;
66164: LD_ADDR_VAR 0 5
66168: PUSH
66169: LD_INT 8
66171: ST_TO_ADDR
// viewRange := 12 ;
66172: LD_ADDR_VAR 0 7
66176: PUSH
66177: LD_INT 12
66179: ST_TO_ADDR
// side := GetSide ( unit ) ;
66180: LD_ADDR_VAR 0 6
66184: PUSH
66185: LD_VAR 0 1
66189: PPUSH
66190: CALL_OW 255
66194: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66195: LD_INT 61
66197: PPUSH
66198: LD_VAR 0 6
66202: PPUSH
66203: CALL_OW 321
66207: PUSH
66208: LD_INT 2
66210: EQUAL
66211: IFFALSE 66221
// viewRange := 16 ;
66213: LD_ADDR_VAR 0 7
66217: PUSH
66218: LD_INT 16
66220: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66221: LD_VAR 0 1
66225: PPUSH
66226: LD_VAR 0 2
66230: PPUSH
66231: LD_VAR 0 3
66235: PPUSH
66236: CALL_OW 297
66240: PUSH
66241: LD_VAR 0 5
66245: GREATER
66246: IFFALSE 66325
// begin ComMoveXY ( unit , x , y ) ;
66248: LD_VAR 0 1
66252: PPUSH
66253: LD_VAR 0 2
66257: PPUSH
66258: LD_VAR 0 3
66262: PPUSH
66263: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66267: LD_INT 35
66269: PPUSH
66270: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66274: LD_VAR 0 1
66278: PPUSH
66279: LD_VAR 0 2
66283: PPUSH
66284: LD_VAR 0 3
66288: PPUSH
66289: CALL 40832 0 3
66293: NOT
66294: IFFALSE 66298
// exit ;
66296: GO 66552
// until GetDistUnitXY ( unit , x , y ) < dist ;
66298: LD_VAR 0 1
66302: PPUSH
66303: LD_VAR 0 2
66307: PPUSH
66308: LD_VAR 0 3
66312: PPUSH
66313: CALL_OW 297
66317: PUSH
66318: LD_VAR 0 5
66322: LESS
66323: IFFALSE 66267
// end ; ComTurnXY ( unit , x , y ) ;
66325: LD_VAR 0 1
66329: PPUSH
66330: LD_VAR 0 2
66334: PPUSH
66335: LD_VAR 0 3
66339: PPUSH
66340: CALL_OW 118
// wait ( 5 ) ;
66344: LD_INT 5
66346: PPUSH
66347: CALL_OW 67
// _d := GetDir ( unit ) ;
66351: LD_ADDR_VAR 0 10
66355: PUSH
66356: LD_VAR 0 1
66360: PPUSH
66361: CALL_OW 254
66365: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66366: LD_ADDR_VAR 0 8
66370: PUSH
66371: LD_VAR 0 1
66375: PPUSH
66376: CALL_OW 250
66380: PPUSH
66381: LD_VAR 0 10
66385: PPUSH
66386: LD_VAR 0 5
66390: PPUSH
66391: CALL_OW 272
66395: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66396: LD_ADDR_VAR 0 9
66400: PUSH
66401: LD_VAR 0 1
66405: PPUSH
66406: CALL_OW 251
66410: PPUSH
66411: LD_VAR 0 10
66415: PPUSH
66416: LD_VAR 0 5
66420: PPUSH
66421: CALL_OW 273
66425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66426: LD_VAR 0 8
66430: PPUSH
66431: LD_VAR 0 9
66435: PPUSH
66436: CALL_OW 488
66440: NOT
66441: IFFALSE 66445
// exit ;
66443: GO 66552
// ComAnimCustom ( unit , 1 ) ;
66445: LD_VAR 0 1
66449: PPUSH
66450: LD_INT 1
66452: PPUSH
66453: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66457: LD_VAR 0 8
66461: PPUSH
66462: LD_VAR 0 9
66466: PPUSH
66467: LD_VAR 0 6
66471: PPUSH
66472: LD_VAR 0 7
66476: PPUSH
66477: CALL_OW 330
// repeat wait ( 1 ) ;
66481: LD_INT 1
66483: PPUSH
66484: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66488: LD_VAR 0 1
66492: PPUSH
66493: CALL_OW 316
66497: PUSH
66498: LD_VAR 0 1
66502: PPUSH
66503: CALL_OW 314
66507: OR
66508: PUSH
66509: LD_VAR 0 1
66513: PPUSH
66514: CALL_OW 302
66518: NOT
66519: OR
66520: PUSH
66521: LD_VAR 0 1
66525: PPUSH
66526: CALL_OW 301
66530: OR
66531: IFFALSE 66481
// RemoveSeeing ( _x , _y , side ) ;
66533: LD_VAR 0 8
66537: PPUSH
66538: LD_VAR 0 9
66542: PPUSH
66543: LD_VAR 0 6
66547: PPUSH
66548: CALL_OW 331
// end ;
66552: LD_VAR 0 4
66556: RET
