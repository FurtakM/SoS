// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42420 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42420 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42420 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6831 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9569 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9569 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38688 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38796 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 38977 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 38897 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42420 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42420 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42420 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 63541 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 63661 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42420 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42392 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42392 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 57
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 69
2534: IFFALSE 2485
// DialogueOn ;
2536: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2540: LD_EXP 18
2544: PPUSH
2545: LD_STRING DL-Intro-18
2547: PPUSH
2548: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2552: LD_EXP 18
2556: PPUSH
2557: LD_STRING DL-Intro-19
2559: PPUSH
2560: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2564: LD_EXP 18
2568: PPUSH
2569: LD_STRING DL-Intro-20
2571: PPUSH
2572: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_STRING DLt-Intro-21
2583: PPUSH
2584: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2588: LD_EXP 20
2592: PPUSH
2593: LD_STRING DLt-Intro-22
2595: PPUSH
2596: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2600: LD_EXP 20
2604: PPUSH
2605: LD_STRING DLt-Intro-23
2607: PPUSH
2608: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2612: LD_EXP 18
2616: PPUSH
2617: LD_STRING DL-Intro-24
2619: PPUSH
2620: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2624: LD_EXP 20
2628: PPUSH
2629: LD_STRING DLt-Intro-25
2631: PPUSH
2632: CALL_OW 88
// DialogueOff ;
2636: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2640: LD_STRING M2
2642: PPUSH
2643: CALL_OW 337
// Query ( Prepare ) ;
2647: LD_STRING Prepare
2649: PPUSH
2650: CALL_OW 97
// SaveForQuickRestart ;
2654: CALL_OW 22
// end ;
2658: LD_VAR 0 1
2662: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2663: LD_INT 22
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 15
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: IFFALSE 2708
2693: GO 2695
2695: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2696: LD_EXP 18
2700: PPUSH
2701: LD_STRING DL-Cam-1
2703: PPUSH
2704: CALL_OW 88
2708: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2709: LD_OWVAR 1
2713: PUSH
2714: LD_EXP 4
2718: PUSH
2719: LD_INT 2
2721: DIV
2722: GREATEREQUAL
2723: IFFALSE 2748
2725: GO 2727
2727: DISABLE
// begin DialogueOn ;
2728: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2732: LD_EXP 18
2736: PPUSH
2737: LD_STRING DL-Faster-1
2739: PPUSH
2740: CALL_OW 88
// DialogueOff ;
2744: CALL_OW 7
// end ;
2748: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2749: LD_OWVAR 1
2753: PUSH
2754: LD_EXP 4
2758: PUSH
2759: LD_INT 2
2761: DIV
2762: PUSH
2763: LD_INT 10500
2765: PLUS
2766: GREATEREQUAL
2767: IFFALSE 2792
2769: GO 2771
2771: DISABLE
// begin DialogueOn ;
2772: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2776: LD_EXP 18
2780: PPUSH
2781: LD_STRING DL-Faster-2
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// end ;
2792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2793: LD_INT 22
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 57
2808: PUSH
2809: EMPTY
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 2
2818: PUSH
2819: LD_INT 30
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: PUSH
2865: LD_INT 22
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 3
2877: PUSH
2878: LD_INT 57
2880: PUSH
2881: EMPTY
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 30
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: PPUSH
2903: CALL_OW 69
2907: AND
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 3
2921: PUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 30
2934: PUSH
2935: LD_INT 32
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: PPUSH
2947: CALL_OW 69
2951: PUSH
2952: LD_INT 3
2954: GREATEREQUAL
2955: AND
2956: PUSH
2957: LD_INT 22
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 3
2969: PUSH
2970: LD_INT 57
2972: PUSH
2973: EMPTY
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 30
2982: PUSH
2983: LD_INT 5
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_INT 22
3003: PUSH
3004: LD_INT 2
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 3
3013: PUSH
3014: LD_INT 57
3016: PUSH
3017: EMPTY
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 30
3026: PUSH
3027: LD_INT 30
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: AND
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 2
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 3
3057: PUSH
3058: LD_INT 57
3060: PUSH
3061: EMPTY
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: LD_INT 30
3073: PUSH
3074: LD_INT 26
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_INT 30
3083: PUSH
3084: LD_INT 28
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PPUSH
3101: CALL_OW 69
3105: AND
3106: IFFALSE 3143
3108: GO 3110
3110: DISABLE
// begin if tick <= 10 10$00 then
3111: LD_OWVAR 1
3115: PUSH
3116: LD_INT 21000
3118: LESSEQUAL
3119: IFFALSE 3128
// SetAchievement ( ACH_BOB ) ;
3121: LD_STRING ACH_BOB
3123: PPUSH
3124: CALL_OW 543
// baseDone := true ;
3128: LD_ADDR_EXP 5
3132: PUSH
3133: LD_INT 1
3135: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3136: LD_STRING M1out
3138: PPUSH
3139: CALL_OW 337
// end ;
3143: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3144: LD_EXP 5
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 21
3161: PUSH
3162: LD_INT 2
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 34
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 34
3187: PUSH
3188: LD_INT 88
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 22
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 21
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 23
3236: PUSH
3237: LD_INT 2
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 69
3253: PPUSH
3254: CALL 6831 0 1
3258: GREATEREQUAL
3259: AND
3260: IFFALSE 3352
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3269: LD_EXP 18
3273: PPUSH
3274: LD_STRING DL-Ready-1
3276: PPUSH
3277: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3281: LD_INT 22
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 23
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: IFFALSE 3323
// Say ( Schulz , DL-Ready-2 ) ;
3311: LD_EXP 18
3315: PPUSH
3316: LD_STRING DL-Ready-2
3318: PPUSH
3319: CALL_OW 88
// DialogueOff ;
3323: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3327: LD_STRING M3
3329: PPUSH
3330: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3334: LD_INT 7
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: CALL_OW 424
// canGo := true ;
3344: LD_ADDR_EXP 6
3348: PUSH
3349: LD_INT 1
3351: ST_TO_ADDR
// end ;
3352: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3353: LD_EXP 6
3357: PUSH
3358: LD_INT 7
3360: PPUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 2
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 21
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 33
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: LD_INT 58
3396: PUSH
3397: EMPTY
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: PPUSH
3410: CALL_OW 70
3414: PPUSH
3415: CALL 6831 0 1
3419: PUSH
3420: LD_INT 22
3422: PUSH
3423: LD_INT 2
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 21
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 23
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PPUSH
3460: CALL 6831 0 1
3464: GREATEREQUAL
3465: AND
3466: PUSH
3467: LD_INT 22
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 21
3479: PUSH
3480: LD_INT 1
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 55
3492: PUSH
3493: EMPTY
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 23
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PPUSH
3516: CALL_OW 69
3520: PPUSH
3521: CALL 6831 0 1
3525: PUSH
3526: LD_INT 0
3528: EQUAL
3529: AND
3530: IFFALSE 4604
3532: GO 3534
3534: DISABLE
3535: LD_INT 0
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
// begin enable ;
3542: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_INT 7
3550: PPUSH
3551: LD_INT 22
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 21
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 2
3587: PUSH
3588: LD_INT 34
3590: PUSH
3591: LD_INT 88
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 34
3600: PUSH
3601: LD_INT 32
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 72
3617: IFFALSE 3628
// begin Query ( InvalidWeapon ) ;
3619: LD_STRING InvalidWeapon
3621: PPUSH
3622: CALL_OW 97
// exit ;
3626: GO 4604
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_INT 3
3635: PUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 72
3654: IFFALSE 3665
// begin Query ( HealthLevel ) ;
3656: LD_STRING HealthLevel
3658: PPUSH
3659: CALL_OW 97
// exit ;
3663: GO 4604
// end ; for i in tmp do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: LD_VAR 0 2
3674: PUSH
3675: FOR_IN
3676: IFFALSE 3721
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 262
3687: PUSH
3688: LD_INT 1
3690: EQUAL
3691: PUSH
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 261
3701: PUSH
3702: LD_INT 60
3704: LESS
3705: AND
3706: IFFALSE 3719
// begin Query ( FuelLevel ) ;
3708: LD_STRING FuelLevel
3710: PPUSH
3711: CALL_OW 97
// exit ;
3715: POP
3716: POP
3717: GO 4604
// end ;
3719: GO 3675
3721: POP
3722: POP
// disable ;
3723: DISABLE
// saveVehicles := [ ] ;
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: EMPTY
3730: ST_TO_ADDR
// for i in tmp do
3731: LD_ADDR_VAR 0 1
3735: PUSH
3736: LD_VAR 0 2
3740: PUSH
3741: FOR_IN
3742: IFFALSE 3851
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 265
3763: PUSH
3764: LD_VAR 0 1
3768: PPUSH
3769: CALL_OW 262
3773: PUSH
3774: LD_VAR 0 1
3778: PPUSH
3779: CALL_OW 263
3783: PUSH
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 264
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 248
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 261
3813: PUSH
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 271
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 311
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL 42420 0 2
3848: ST_TO_ADDR
3849: GO 3741
3851: POP
3852: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 21
3870: PUSH
3871: LD_INT 2
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 50
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: PUSH
3894: LD_VAR 0 2
3898: DIFF
3899: ST_TO_ADDR
// if otherVehicles then
3900: LD_VAR 0 4
3904: IFFALSE 4080
// begin tmp := [ ] ;
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: EMPTY
3912: ST_TO_ADDR
// for i in otherVehicles do
3913: LD_ADDR_VAR 0 1
3917: PUSH
3918: LD_VAR 0 4
3922: PUSH
3923: FOR_IN
3924: IFFALSE 4066
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: LD_VAR 0 2
3935: PPUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 265
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 262
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 263
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: CALL_OW 264
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 248
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 261
3995: PUSH
3996: LD_VAR 0 1
4000: PPUSH
4001: CALL_OW 271
4005: PUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: CALL_OW 250
4015: PUSH
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 251
4025: PUSH
4026: LD_VAR 0 1
4030: PPUSH
4031: CALL_OW 254
4035: PUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 256
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL 42420 0 2
4063: ST_TO_ADDR
4064: GO 3923
4066: POP
4067: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_STRING 09_otherVehicles
4075: PPUSH
4076: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) and UnitFilter ( saveVehicles , [ f_engine , engine_siberite ] ) then
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 1
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 72
4099: NOT
4100: PUSH
4101: LD_VAR 0 3
4105: PPUSH
4106: LD_INT 32
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 72
4120: AND
4121: IFFALSE 4130
// SetAchievement ( ACH_GREEN ) ;
4123: LD_STRING ACH_GREEN
4125: PPUSH
4126: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4130: LD_EXP 18
4134: PPUSH
4135: LD_STRING 09_Schulz
4137: PPUSH
4138: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4142: LD_EXP 18
4146: PPUSH
4147: LD_STRING 09_Schulz_ID
4149: PPUSH
4150: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4154: LD_EXP 20
4158: PPUSH
4159: LD_STRING 09_Lemmy
4161: PPUSH
4162: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4166: LD_EXP 20
4170: PPUSH
4171: LD_STRING 09_Lemmy_ID
4173: PPUSH
4174: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4178: LD_EXP 22
4182: PPUSH
4183: LD_STRING 09_Nia
4185: PPUSH
4186: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4190: LD_EXP 22
4194: PPUSH
4195: LD_STRING 09_Nia_ID
4197: PPUSH
4198: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4202: LD_EXP 21
4206: PPUSH
4207: LD_STRING 09_Mia
4209: PPUSH
4210: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4214: LD_EXP 21
4218: PPUSH
4219: LD_STRING 09_Mia_ID
4221: PPUSH
4222: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4226: LD_EXP 23
4230: PPUSH
4231: LD_STRING 09_Jenna
4233: PPUSH
4234: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4238: LD_EXP 23
4242: PPUSH
4243: LD_STRING 09_Jenna_ID
4245: PPUSH
4246: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4250: LD_EXP 26
4254: PPUSH
4255: LD_STRING 09_schulzSecondSquad
4257: PPUSH
4258: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4262: LD_ADDR_VAR 0 1
4266: PUSH
4267: DOUBLE
4268: LD_INT 1
4270: DEC
4271: ST_TO_ADDR
4272: LD_EXP 26
4276: PUSH
4277: FOR_TO
4278: IFFALSE 4306
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4280: LD_EXP 26
4284: PUSH
4285: LD_VAR 0 1
4289: ARRAY
4290: PPUSH
4291: LD_STRING 09_random_ID_
4293: PUSH
4294: LD_VAR 0 1
4298: STR
4299: PPUSH
4300: CALL_OW 39
4304: GO 4277
4306: POP
4307: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_STRING 09_vehicles
4315: PPUSH
4316: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4320: LD_OWVAR 1
4324: PPUSH
4325: LD_STRING 09_tick
4327: PPUSH
4328: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4332: LD_INT 6
4334: PPUSH
4335: LD_STRING 09_env
4337: PPUSH
4338: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4342: LD_INT 2
4344: PPUSH
4345: LD_STRING 09_tech
4347: PPUSH
4348: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4352: LD_INT 2
4354: PPUSH
4355: LD_STRING 09_materials
4357: PPUSH
4358: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4362: LD_INT 2
4364: PPUSH
4365: LD_STRING 09_buildings
4367: PPUSH
4368: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4372: LD_INT 22
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 23
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PPUSH
4401: LD_STRING 09_apes
4403: PPUSH
4404: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4408: LD_EXP 4
4412: PPUSH
4413: LD_STRING 09_timeToHeikeDead
4415: PPUSH
4416: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4420: LD_EXP 3
4424: PPUSH
4425: LD_STRING 09_cameras
4427: PPUSH
4428: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 23
4449: PUSH
4450: LD_INT 0
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 50
4459: PUSH
4460: EMPTY
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: ST_TO_ADDR
// if tmp then
4473: LD_VAR 0 2
4477: IFFALSE 4587
// begin animals := [ ] ;
4479: LD_ADDR_VAR 0 5
4483: PUSH
4484: EMPTY
4485: ST_TO_ADDR
// for i in tmp do
4486: LD_ADDR_VAR 0 1
4490: PUSH
4491: LD_VAR 0 2
4495: PUSH
4496: FOR_IN
4497: IFFALSE 4573
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4499: LD_ADDR_VAR 0 5
4503: PUSH
4504: LD_VAR 0 5
4508: PPUSH
4509: LD_VAR 0 1
4513: PPUSH
4514: CALL_OW 257
4518: PUSH
4519: LD_VAR 0 1
4523: PPUSH
4524: CALL_OW 250
4528: PUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: CALL_OW 251
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 254
4548: PUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: CALL_OW 256
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PPUSH
4566: CALL 42420 0 2
4570: ST_TO_ADDR
4571: GO 4496
4573: POP
4574: POP
// SaveVariable ( animals , 09_animals ) ;
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_STRING 09_animals
4582: PPUSH
4583: CALL_OW 39
// end ; wait ( 3 ) ;
4587: LD_INT 3
4589: PPUSH
4590: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4594: LD_INT 1
4596: PPUSH
4597: LD_STRING %2
4599: PPUSH
4600: CALL_OW 340
// end ; end_of_file
4604: PPOPN 5
4606: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4607: LD_OWVAR 1
4611: PUSH
4612: LD_INT 14700
4614: LESS
4615: IFFALSE 4648
4617: GO 4619
4619: DISABLE
// begin enable ;
4620: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4621: LD_INT 1
4623: PPUSH
4624: LD_INT 5
4626: PPUSH
4627: CALL_OW 12
4631: PPUSH
4632: LD_INT 85
4634: PPUSH
4635: LD_INT 44
4637: PPUSH
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL_OW 56
// end ;
4648: END
// every 0 0$29 trigger tick < 20 20$00 do
4649: LD_OWVAR 1
4653: PUSH
4654: LD_INT 42000
4656: LESS
4657: IFFALSE 4728
4659: GO 4661
4661: DISABLE
// begin enable ;
4662: ENABLE
// if Prob ( 50 ) then
4663: LD_INT 50
4665: PPUSH
4666: CALL_OW 13
4670: IFFALSE 4701
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 5
4677: PPUSH
4678: CALL_OW 12
4682: PPUSH
4683: LD_INT 72
4685: PPUSH
4686: LD_INT 109
4688: PPUSH
4689: LD_INT 22
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 56
4699: GO 4728
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4701: LD_INT 1
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 12
4711: PPUSH
4712: LD_INT 140
4714: PPUSH
4715: LD_INT 73
4717: PPUSH
4718: LD_INT 22
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 56
4728: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4729: LD_INT 0
4731: PPUSH
4732: PPUSH
// if exist_mode then
4733: LD_VAR 0 2
4737: IFFALSE 4762
// unit := CreateCharacter ( prefix & ident ) else
4739: LD_ADDR_VAR 0 5
4743: PUSH
4744: LD_VAR 0 3
4748: PUSH
4749: LD_VAR 0 1
4753: STR
4754: PPUSH
4755: CALL_OW 34
4759: ST_TO_ADDR
4760: GO 4777
// unit := NewCharacter ( ident ) ;
4762: LD_ADDR_VAR 0 5
4766: PUSH
4767: LD_VAR 0 1
4771: PPUSH
4772: CALL_OW 25
4776: ST_TO_ADDR
// result := unit ;
4777: LD_ADDR_VAR 0 4
4781: PUSH
4782: LD_VAR 0 5
4786: ST_TO_ADDR
// end ;
4787: LD_VAR 0 4
4791: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4792: LD_INT 0
4794: PPUSH
4795: PPUSH
// if not side or not nation then
4796: LD_VAR 0 1
4800: NOT
4801: PUSH
4802: LD_VAR 0 2
4806: NOT
4807: OR
4808: IFFALSE 4812
// exit ;
4810: GO 5580
// case nation of nation_american :
4812: LD_VAR 0 2
4816: PUSH
4817: LD_INT 1
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 5039
4825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4826: LD_ADDR_VAR 0 4
4830: PUSH
4831: LD_INT 35
4833: PUSH
4834: LD_INT 45
4836: PUSH
4837: LD_INT 46
4839: PUSH
4840: LD_INT 47
4842: PUSH
4843: LD_INT 82
4845: PUSH
4846: LD_INT 83
4848: PUSH
4849: LD_INT 84
4851: PUSH
4852: LD_INT 85
4854: PUSH
4855: LD_INT 86
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 6
4866: PUSH
4867: LD_INT 15
4869: PUSH
4870: LD_INT 16
4872: PUSH
4873: LD_INT 7
4875: PUSH
4876: LD_INT 12
4878: PUSH
4879: LD_INT 13
4881: PUSH
4882: LD_INT 10
4884: PUSH
4885: LD_INT 14
4887: PUSH
4888: LD_INT 20
4890: PUSH
4891: LD_INT 21
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 25
4899: PUSH
4900: LD_INT 32
4902: PUSH
4903: LD_INT 27
4905: PUSH
4906: LD_INT 36
4908: PUSH
4909: LD_INT 69
4911: PUSH
4912: LD_INT 39
4914: PUSH
4915: LD_INT 34
4917: PUSH
4918: LD_INT 40
4920: PUSH
4921: LD_INT 48
4923: PUSH
4924: LD_INT 49
4926: PUSH
4927: LD_INT 50
4929: PUSH
4930: LD_INT 51
4932: PUSH
4933: LD_INT 52
4935: PUSH
4936: LD_INT 53
4938: PUSH
4939: LD_INT 54
4941: PUSH
4942: LD_INT 55
4944: PUSH
4945: LD_INT 56
4947: PUSH
4948: LD_INT 57
4950: PUSH
4951: LD_INT 58
4953: PUSH
4954: LD_INT 59
4956: PUSH
4957: LD_INT 60
4959: PUSH
4960: LD_INT 61
4962: PUSH
4963: LD_INT 62
4965: PUSH
4966: LD_INT 80
4968: PUSH
4969: LD_INT 82
4971: PUSH
4972: LD_INT 83
4974: PUSH
4975: LD_INT 84
4977: PUSH
4978: LD_INT 85
4980: PUSH
4981: LD_INT 86
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: ST_TO_ADDR
5037: GO 5504
5039: LD_INT 2
5041: DOUBLE
5042: EQUAL
5043: IFTRUE 5047
5045: GO 5273
5047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5048: LD_ADDR_VAR 0 4
5052: PUSH
5053: LD_INT 35
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: LD_INT 46
5061: PUSH
5062: LD_INT 47
5064: PUSH
5065: LD_INT 82
5067: PUSH
5068: LD_INT 83
5070: PUSH
5071: LD_INT 84
5073: PUSH
5074: LD_INT 85
5076: PUSH
5077: LD_INT 87
5079: PUSH
5080: LD_INT 70
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: LD_INT 11
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: LD_INT 5
5097: PUSH
5098: LD_INT 6
5100: PUSH
5101: LD_INT 15
5103: PUSH
5104: LD_INT 18
5106: PUSH
5107: LD_INT 7
5109: PUSH
5110: LD_INT 17
5112: PUSH
5113: LD_INT 8
5115: PUSH
5116: LD_INT 20
5118: PUSH
5119: LD_INT 21
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 72
5127: PUSH
5128: LD_INT 26
5130: PUSH
5131: LD_INT 69
5133: PUSH
5134: LD_INT 39
5136: PUSH
5137: LD_INT 40
5139: PUSH
5140: LD_INT 41
5142: PUSH
5143: LD_INT 42
5145: PUSH
5146: LD_INT 43
5148: PUSH
5149: LD_INT 48
5151: PUSH
5152: LD_INT 49
5154: PUSH
5155: LD_INT 50
5157: PUSH
5158: LD_INT 51
5160: PUSH
5161: LD_INT 52
5163: PUSH
5164: LD_INT 53
5166: PUSH
5167: LD_INT 54
5169: PUSH
5170: LD_INT 55
5172: PUSH
5173: LD_INT 56
5175: PUSH
5176: LD_INT 60
5178: PUSH
5179: LD_INT 61
5181: PUSH
5182: LD_INT 62
5184: PUSH
5185: LD_INT 66
5187: PUSH
5188: LD_INT 67
5190: PUSH
5191: LD_INT 68
5193: PUSH
5194: LD_INT 81
5196: PUSH
5197: LD_INT 82
5199: PUSH
5200: LD_INT 83
5202: PUSH
5203: LD_INT 84
5205: PUSH
5206: LD_INT 85
5208: PUSH
5209: LD_INT 87
5211: PUSH
5212: LD_INT 88
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: ST_TO_ADDR
5271: GO 5504
5273: LD_INT 3
5275: DOUBLE
5276: EQUAL
5277: IFTRUE 5281
5279: GO 5503
5281: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5282: LD_ADDR_VAR 0 4
5286: PUSH
5287: LD_INT 46
5289: PUSH
5290: LD_INT 47
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: LD_INT 2
5298: PUSH
5299: LD_INT 82
5301: PUSH
5302: LD_INT 83
5304: PUSH
5305: LD_INT 84
5307: PUSH
5308: LD_INT 85
5310: PUSH
5311: LD_INT 86
5313: PUSH
5314: LD_INT 11
5316: PUSH
5317: LD_INT 9
5319: PUSH
5320: LD_INT 20
5322: PUSH
5323: LD_INT 19
5325: PUSH
5326: LD_INT 21
5328: PUSH
5329: LD_INT 24
5331: PUSH
5332: LD_INT 22
5334: PUSH
5335: LD_INT 25
5337: PUSH
5338: LD_INT 28
5340: PUSH
5341: LD_INT 29
5343: PUSH
5344: LD_INT 30
5346: PUSH
5347: LD_INT 31
5349: PUSH
5350: LD_INT 37
5352: PUSH
5353: LD_INT 38
5355: PUSH
5356: LD_INT 32
5358: PUSH
5359: LD_INT 27
5361: PUSH
5362: LD_INT 33
5364: PUSH
5365: LD_INT 69
5367: PUSH
5368: LD_INT 39
5370: PUSH
5371: LD_INT 34
5373: PUSH
5374: LD_INT 40
5376: PUSH
5377: LD_INT 71
5379: PUSH
5380: LD_INT 23
5382: PUSH
5383: LD_INT 44
5385: PUSH
5386: LD_INT 48
5388: PUSH
5389: LD_INT 49
5391: PUSH
5392: LD_INT 50
5394: PUSH
5395: LD_INT 51
5397: PUSH
5398: LD_INT 52
5400: PUSH
5401: LD_INT 53
5403: PUSH
5404: LD_INT 54
5406: PUSH
5407: LD_INT 55
5409: PUSH
5410: LD_INT 56
5412: PUSH
5413: LD_INT 57
5415: PUSH
5416: LD_INT 58
5418: PUSH
5419: LD_INT 59
5421: PUSH
5422: LD_INT 63
5424: PUSH
5425: LD_INT 64
5427: PUSH
5428: LD_INT 65
5430: PUSH
5431: LD_INT 82
5433: PUSH
5434: LD_INT 83
5436: PUSH
5437: LD_INT 84
5439: PUSH
5440: LD_INT 85
5442: PUSH
5443: LD_INT 86
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: ST_TO_ADDR
5501: GO 5504
5503: POP
// if state > - 1 and state < 3 then
5504: LD_VAR 0 3
5508: PUSH
5509: LD_INT 1
5511: NEG
5512: GREATER
5513: PUSH
5514: LD_VAR 0 3
5518: PUSH
5519: LD_INT 3
5521: LESS
5522: AND
5523: IFFALSE 5580
// for i in result do
5525: LD_ADDR_VAR 0 5
5529: PUSH
5530: LD_VAR 0 4
5534: PUSH
5535: FOR_IN
5536: IFFALSE 5578
// if GetTech ( i , side ) <> state then
5538: LD_VAR 0 5
5542: PPUSH
5543: LD_VAR 0 1
5547: PPUSH
5548: CALL_OW 321
5552: PUSH
5553: LD_VAR 0 3
5557: NONEQUAL
5558: IFFALSE 5576
// result := result diff i ;
5560: LD_ADDR_VAR 0 4
5564: PUSH
5565: LD_VAR 0 4
5569: PUSH
5570: LD_VAR 0 5
5574: DIFF
5575: ST_TO_ADDR
5576: GO 5535
5578: POP
5579: POP
// end ;
5580: LD_VAR 0 4
5584: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5585: LD_INT 0
5587: PPUSH
5588: PPUSH
5589: PPUSH
// result := true ;
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5598: LD_ADDR_VAR 0 5
5602: PUSH
5603: LD_VAR 0 2
5607: PPUSH
5608: CALL_OW 480
5612: ST_TO_ADDR
// if not tmp then
5613: LD_VAR 0 5
5617: NOT
5618: IFFALSE 5622
// exit ;
5620: GO 5671
// for i in tmp do
5622: LD_ADDR_VAR 0 4
5626: PUSH
5627: LD_VAR 0 5
5631: PUSH
5632: FOR_IN
5633: IFFALSE 5669
// if GetTech ( i , side ) <> state_researched then
5635: LD_VAR 0 4
5639: PPUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 321
5649: PUSH
5650: LD_INT 2
5652: NONEQUAL
5653: IFFALSE 5667
// begin result := false ;
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// exit ;
5663: POP
5664: POP
5665: GO 5671
// end ;
5667: GO 5632
5669: POP
5670: POP
// end ;
5671: LD_VAR 0 3
5675: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5676: LD_INT 0
5678: PPUSH
5679: PPUSH
5680: PPUSH
5681: PPUSH
5682: PPUSH
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
5689: PPUSH
5690: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5691: LD_VAR 0 1
5695: NOT
5696: PUSH
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL_OW 257
5706: PUSH
5707: LD_INT 9
5709: NONEQUAL
5710: OR
5711: IFFALSE 5715
// exit ;
5713: GO 6288
// side := GetSide ( unit ) ;
5715: LD_ADDR_VAR 0 9
5719: PUSH
5720: LD_VAR 0 1
5724: PPUSH
5725: CALL_OW 255
5729: ST_TO_ADDR
// tech_space := tech_spacanom ;
5730: LD_ADDR_VAR 0 12
5734: PUSH
5735: LD_INT 29
5737: ST_TO_ADDR
// tech_time := tech_taurad ;
5738: LD_ADDR_VAR 0 13
5742: PUSH
5743: LD_INT 28
5745: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5746: LD_ADDR_VAR 0 11
5750: PUSH
5751: LD_VAR 0 1
5755: PPUSH
5756: CALL_OW 310
5760: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5761: LD_VAR 0 11
5765: PPUSH
5766: CALL_OW 247
5770: PUSH
5771: LD_INT 2
5773: EQUAL
5774: IFFALSE 5778
// exit ;
5776: GO 6288
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5778: LD_ADDR_VAR 0 8
5782: PUSH
5783: LD_INT 81
5785: PUSH
5786: LD_VAR 0 9
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: LD_INT 21
5800: PUSH
5801: LD_INT 3
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: ST_TO_ADDR
// if not tmp then
5821: LD_VAR 0 8
5825: NOT
5826: IFFALSE 5830
// exit ;
5828: GO 6288
// if in_unit then
5830: LD_VAR 0 11
5834: IFFALSE 5858
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5836: LD_ADDR_VAR 0 10
5840: PUSH
5841: LD_VAR 0 8
5845: PPUSH
5846: LD_VAR 0 11
5850: PPUSH
5851: CALL_OW 74
5855: ST_TO_ADDR
5856: GO 5878
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5858: LD_ADDR_VAR 0 10
5862: PUSH
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_VAR 0 1
5872: PPUSH
5873: CALL_OW 74
5877: ST_TO_ADDR
// if not enemy then
5878: LD_VAR 0 10
5882: NOT
5883: IFFALSE 5887
// exit ;
5885: GO 6288
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5887: LD_VAR 0 11
5891: PUSH
5892: LD_VAR 0 11
5896: PPUSH
5897: LD_VAR 0 10
5901: PPUSH
5902: CALL_OW 296
5906: PUSH
5907: LD_INT 13
5909: GREATER
5910: AND
5911: PUSH
5912: LD_VAR 0 1
5916: PPUSH
5917: LD_VAR 0 10
5921: PPUSH
5922: CALL_OW 296
5926: PUSH
5927: LD_INT 12
5929: GREATER
5930: OR
5931: IFFALSE 5935
// exit ;
5933: GO 6288
// missile := [ 1 ] ;
5935: LD_ADDR_VAR 0 14
5939: PUSH
5940: LD_INT 1
5942: PUSH
5943: EMPTY
5944: LIST
5945: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5946: LD_VAR 0 9
5950: PPUSH
5951: LD_VAR 0 12
5955: PPUSH
5956: CALL_OW 325
5960: IFFALSE 5989
// missile := Replace ( missile , missile + 1 , 2 ) ;
5962: LD_ADDR_VAR 0 14
5966: PUSH
5967: LD_VAR 0 14
5971: PPUSH
5972: LD_VAR 0 14
5976: PUSH
5977: LD_INT 1
5979: PLUS
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: CALL_OW 1
5988: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5989: LD_VAR 0 9
5993: PPUSH
5994: LD_VAR 0 13
5998: PPUSH
5999: CALL_OW 325
6003: PUSH
6004: LD_VAR 0 10
6008: PPUSH
6009: CALL_OW 255
6013: PPUSH
6014: LD_VAR 0 13
6018: PPUSH
6019: CALL_OW 325
6023: NOT
6024: AND
6025: IFFALSE 6054
// missile := Replace ( missile , missile + 1 , 3 ) ;
6027: LD_ADDR_VAR 0 14
6031: PUSH
6032: LD_VAR 0 14
6036: PPUSH
6037: LD_VAR 0 14
6041: PUSH
6042: LD_INT 1
6044: PLUS
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: CALL_OW 1
6053: ST_TO_ADDR
// if missile < 2 then
6054: LD_VAR 0 14
6058: PUSH
6059: LD_INT 2
6061: LESS
6062: IFFALSE 6066
// exit ;
6064: GO 6288
// x := GetX ( enemy ) ;
6066: LD_ADDR_VAR 0 4
6070: PUSH
6071: LD_VAR 0 10
6075: PPUSH
6076: CALL_OW 250
6080: ST_TO_ADDR
// y := GetY ( enemy ) ;
6081: LD_ADDR_VAR 0 5
6085: PUSH
6086: LD_VAR 0 10
6090: PPUSH
6091: CALL_OW 251
6095: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6096: LD_ADDR_VAR 0 6
6100: PUSH
6101: LD_VAR 0 4
6105: PUSH
6106: LD_INT 1
6108: NEG
6109: PPUSH
6110: LD_INT 1
6112: PPUSH
6113: CALL_OW 12
6117: PLUS
6118: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6119: LD_ADDR_VAR 0 7
6123: PUSH
6124: LD_VAR 0 5
6128: PUSH
6129: LD_INT 1
6131: NEG
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: CALL_OW 12
6140: PLUS
6141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6142: LD_VAR 0 6
6146: PPUSH
6147: LD_VAR 0 7
6151: PPUSH
6152: CALL_OW 488
6156: NOT
6157: IFFALSE 6179
// begin _x := x ;
6159: LD_ADDR_VAR 0 6
6163: PUSH
6164: LD_VAR 0 4
6168: ST_TO_ADDR
// _y := y ;
6169: LD_ADDR_VAR 0 7
6173: PUSH
6174: LD_VAR 0 5
6178: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6179: LD_ADDR_VAR 0 3
6183: PUSH
6184: LD_INT 1
6186: PPUSH
6187: LD_VAR 0 14
6191: PPUSH
6192: CALL_OW 12
6196: ST_TO_ADDR
// case i of 1 :
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 1
6204: DOUBLE
6205: EQUAL
6206: IFTRUE 6210
6208: GO 6227
6210: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6211: LD_VAR 0 1
6215: PPUSH
6216: LD_VAR 0 10
6220: PPUSH
6221: CALL_OW 115
6225: GO 6288
6227: LD_INT 2
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6257
6235: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6236: LD_VAR 0 1
6240: PPUSH
6241: LD_VAR 0 6
6245: PPUSH
6246: LD_VAR 0 7
6250: PPUSH
6251: CALL_OW 153
6255: GO 6288
6257: LD_INT 3
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6287
6265: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6266: LD_VAR 0 1
6270: PPUSH
6271: LD_VAR 0 6
6275: PPUSH
6276: LD_VAR 0 7
6280: PPUSH
6281: CALL_OW 154
6285: GO 6288
6287: POP
// end ;
6288: LD_VAR 0 2
6292: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6293: LD_INT 0
6295: PPUSH
6296: PPUSH
6297: PPUSH
6298: PPUSH
6299: PPUSH
6300: PPUSH
// if not unit or not building then
6301: LD_VAR 0 1
6305: NOT
6306: PUSH
6307: LD_VAR 0 2
6311: NOT
6312: OR
6313: IFFALSE 6317
// exit ;
6315: GO 6475
// x := GetX ( building ) ;
6317: LD_ADDR_VAR 0 5
6321: PUSH
6322: LD_VAR 0 2
6326: PPUSH
6327: CALL_OW 250
6331: ST_TO_ADDR
// y := GetY ( building ) ;
6332: LD_ADDR_VAR 0 6
6336: PUSH
6337: LD_VAR 0 2
6341: PPUSH
6342: CALL_OW 251
6346: ST_TO_ADDR
// for i = 0 to 5 do
6347: LD_ADDR_VAR 0 4
6351: PUSH
6352: DOUBLE
6353: LD_INT 0
6355: DEC
6356: ST_TO_ADDR
6357: LD_INT 5
6359: PUSH
6360: FOR_TO
6361: IFFALSE 6473
// begin _x := ShiftX ( x , i , 3 ) ;
6363: LD_ADDR_VAR 0 7
6367: PUSH
6368: LD_VAR 0 5
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 3
6380: PPUSH
6381: CALL_OW 272
6385: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6386: LD_ADDR_VAR 0 8
6390: PUSH
6391: LD_VAR 0 6
6395: PPUSH
6396: LD_VAR 0 4
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: CALL_OW 273
6408: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6409: LD_VAR 0 7
6413: PPUSH
6414: LD_VAR 0 8
6418: PPUSH
6419: CALL_OW 488
6423: NOT
6424: IFFALSE 6428
// continue ;
6426: GO 6360
// if HexInfo ( _x , _y ) = 0 then
6428: LD_VAR 0 7
6432: PPUSH
6433: LD_VAR 0 8
6437: PPUSH
6438: CALL_OW 428
6442: PUSH
6443: LD_INT 0
6445: EQUAL
6446: IFFALSE 6471
// begin ComMoveXY ( unit , _x , _y ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_VAR 0 7
6457: PPUSH
6458: LD_VAR 0 8
6462: PPUSH
6463: CALL_OW 111
// exit ;
6467: POP
6468: POP
6469: GO 6475
// end ; end ;
6471: GO 6360
6473: POP
6474: POP
// end ;
6475: LD_VAR 0 3
6479: RET
// export function ScanBase ( side , base_area ) ; begin
6480: LD_INT 0
6482: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6483: LD_ADDR_VAR 0 3
6487: PUSH
6488: LD_VAR 0 2
6492: PPUSH
6493: LD_INT 81
6495: PUSH
6496: LD_VAR 0 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 70
6509: ST_TO_ADDR
// end ;
6510: LD_VAR 0 3
6514: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6515: LD_INT 0
6517: PPUSH
6518: PPUSH
6519: PPUSH
6520: PPUSH
// result := false ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// side := GetSide ( unit ) ;
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 255
6543: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6544: LD_ADDR_VAR 0 4
6548: PUSH
6549: LD_VAR 0 1
6553: PPUSH
6554: CALL_OW 248
6558: ST_TO_ADDR
// case nat of 1 :
6559: LD_VAR 0 4
6563: PUSH
6564: LD_INT 1
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6583
6572: POP
// tech := tech_lassight ; 2 :
6573: LD_ADDR_VAR 0 5
6577: PUSH
6578: LD_INT 12
6580: ST_TO_ADDR
6581: GO 6622
6583: LD_INT 2
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6602
6591: POP
// tech := tech_mortar ; 3 :
6592: LD_ADDR_VAR 0 5
6596: PUSH
6597: LD_INT 41
6599: ST_TO_ADDR
6600: GO 6622
6602: LD_INT 3
6604: DOUBLE
6605: EQUAL
6606: IFTRUE 6610
6608: GO 6621
6610: POP
// tech := tech_bazooka ; end ;
6611: LD_ADDR_VAR 0 5
6615: PUSH
6616: LD_INT 44
6618: ST_TO_ADDR
6619: GO 6622
6621: POP
// if Researched ( side , tech ) then
6622: LD_VAR 0 3
6626: PPUSH
6627: LD_VAR 0 5
6631: PPUSH
6632: CALL_OW 325
6636: IFFALSE 6663
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6638: LD_ADDR_VAR 0 2
6642: PUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 8
6648: PUSH
6649: LD_INT 9
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_VAR 0 4
6661: ARRAY
6662: ST_TO_ADDR
// end ;
6663: LD_VAR 0 2
6667: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
// if not mines then
6673: LD_VAR 0 2
6677: NOT
6678: IFFALSE 6682
// exit ;
6680: GO 6826
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6682: LD_ADDR_VAR 0 5
6686: PUSH
6687: LD_INT 81
6689: PUSH
6690: LD_VAR 0 1
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// for i in mines do
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: FOR_IN
6736: IFFALSE 6824
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6738: LD_VAR 0 4
6742: PUSH
6743: LD_INT 1
6745: ARRAY
6746: PPUSH
6747: LD_VAR 0 4
6751: PUSH
6752: LD_INT 2
6754: ARRAY
6755: PPUSH
6756: CALL_OW 458
6760: NOT
6761: IFFALSE 6765
// continue ;
6763: GO 6735
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6765: LD_VAR 0 4
6769: PUSH
6770: LD_INT 1
6772: ARRAY
6773: PPUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 2
6781: ARRAY
6782: PPUSH
6783: CALL_OW 428
6787: PUSH
6788: LD_VAR 0 5
6792: IN
6793: IFFALSE 6822
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6795: LD_VAR 0 4
6799: PUSH
6800: LD_INT 1
6802: ARRAY
6803: PPUSH
6804: LD_VAR 0 4
6808: PUSH
6809: LD_INT 2
6811: ARRAY
6812: PPUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 456
// end ;
6822: GO 6735
6824: POP
6825: POP
// end ;
6826: LD_VAR 0 3
6830: RET
// export function Count ( array ) ; begin
6831: LD_INT 0
6833: PPUSH
// result := array + 0 ;
6834: LD_ADDR_VAR 0 2
6838: PUSH
6839: LD_VAR 0 1
6843: PUSH
6844: LD_INT 0
6846: PLUS
6847: ST_TO_ADDR
// end ;
6848: LD_VAR 0 2
6852: RET
// export function IsEmpty ( building ) ; begin
6853: LD_INT 0
6855: PPUSH
// if not building then
6856: LD_VAR 0 1
6860: NOT
6861: IFFALSE 6865
// exit ;
6863: GO 6908
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 1
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_VAR 0 1
6882: PPUSH
6883: CALL_OW 255
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 58
6894: PUSH
6895: EMPTY
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 69
6906: IN
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 2
6912: RET
// export function IsNotFull ( building ) ; var places ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// if not building then
6917: LD_VAR 0 1
6921: NOT
6922: IFFALSE 6926
// exit ;
6924: GO 6954
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
6926: LD_ADDR_VAR 0 2
6930: PUSH
6931: LD_VAR 0 1
6935: PPUSH
6936: LD_INT 3
6938: PUSH
6939: LD_INT 62
6941: PUSH
6942: EMPTY
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 72
6953: ST_TO_ADDR
// end ;
6954: LD_VAR 0 2
6958: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
// tmp := [ ] ;
6965: LD_ADDR_VAR 0 3
6969: PUSH
6970: EMPTY
6971: ST_TO_ADDR
// list := [ ] ;
6972: LD_ADDR_VAR 0 5
6976: PUSH
6977: EMPTY
6978: ST_TO_ADDR
// for i = 16 to 25 do
6979: LD_ADDR_VAR 0 4
6983: PUSH
6984: DOUBLE
6985: LD_INT 16
6987: DEC
6988: ST_TO_ADDR
6989: LD_INT 25
6991: PUSH
6992: FOR_TO
6993: IFFALSE 7066
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6995: LD_ADDR_VAR 0 3
6999: PUSH
7000: LD_VAR 0 3
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_VAR 0 1
7012: PPUSH
7013: CALL_OW 255
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 91
7024: PUSH
7025: LD_VAR 0 1
7029: PUSH
7030: LD_INT 6
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 30
7040: PUSH
7041: LD_VAR 0 4
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: ADD
7063: ST_TO_ADDR
7064: GO 6992
7066: POP
7067: POP
// for i = 1 to tmp do
7068: LD_ADDR_VAR 0 4
7072: PUSH
7073: DOUBLE
7074: LD_INT 1
7076: DEC
7077: ST_TO_ADDR
7078: LD_VAR 0 3
7082: PUSH
7083: FOR_TO
7084: IFFALSE 7172
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7086: LD_ADDR_VAR 0 5
7090: PUSH
7091: LD_VAR 0 5
7095: PUSH
7096: LD_VAR 0 3
7100: PUSH
7101: LD_VAR 0 4
7105: ARRAY
7106: PPUSH
7107: CALL_OW 266
7111: PUSH
7112: LD_VAR 0 3
7116: PUSH
7117: LD_VAR 0 4
7121: ARRAY
7122: PPUSH
7123: CALL_OW 250
7127: PUSH
7128: LD_VAR 0 3
7132: PUSH
7133: LD_VAR 0 4
7137: ARRAY
7138: PPUSH
7139: CALL_OW 251
7143: PUSH
7144: LD_VAR 0 3
7148: PUSH
7149: LD_VAR 0 4
7153: ARRAY
7154: PPUSH
7155: CALL_OW 254
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: ADD
7169: ST_TO_ADDR
7170: GO 7083
7172: POP
7173: POP
// result := list ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_VAR 0 5
7183: ST_TO_ADDR
// end ;
7184: LD_VAR 0 2
7188: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
// if not factory then
7198: LD_VAR 0 1
7202: NOT
7203: IFFALSE 7207
// exit ;
7205: GO 7800
// if control = control_apeman then
7207: LD_VAR 0 4
7211: PUSH
7212: LD_INT 5
7214: EQUAL
7215: IFFALSE 7324
// begin tmp := UnitsInside ( factory ) ;
7217: LD_ADDR_VAR 0 8
7221: PUSH
7222: LD_VAR 0 1
7226: PPUSH
7227: CALL_OW 313
7231: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7232: LD_VAR 0 8
7236: PPUSH
7237: LD_INT 25
7239: PUSH
7240: LD_INT 12
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 72
7251: NOT
7252: IFFALSE 7262
// control := control_manual ;
7254: LD_ADDR_VAR 0 4
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7262: LD_ADDR_VAR 0 8
7266: PUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL 6959 0 1
7276: ST_TO_ADDR
// if tmp then
7277: LD_VAR 0 8
7281: IFFALSE 7324
// begin for i in tmp do
7283: LD_ADDR_VAR 0 7
7287: PUSH
7288: LD_VAR 0 8
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7322
// if i [ 1 ] = b_ext_radio then
7296: LD_VAR 0 7
7300: PUSH
7301: LD_INT 1
7303: ARRAY
7304: PUSH
7305: LD_INT 22
7307: EQUAL
7308: IFFALSE 7320
// begin control := control_remote ;
7310: LD_ADDR_VAR 0 4
7314: PUSH
7315: LD_INT 2
7317: ST_TO_ADDR
// break ;
7318: GO 7322
// end ;
7320: GO 7293
7322: POP
7323: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7324: LD_VAR 0 1
7328: PPUSH
7329: LD_VAR 0 2
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_VAR 0 4
7343: PPUSH
7344: LD_VAR 0 5
7348: PPUSH
7349: CALL_OW 448
7353: IFFALSE 7388
// begin result := [ chassis , engine , control , weapon ] ;
7355: LD_ADDR_VAR 0 6
7359: PUSH
7360: LD_VAR 0 2
7364: PUSH
7365: LD_VAR 0 3
7369: PUSH
7370: LD_VAR 0 4
7374: PUSH
7375: LD_VAR 0 5
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: ST_TO_ADDR
// exit ;
7386: GO 7800
// end ; _chassis := AvailableChassisList ( factory ) ;
7388: LD_ADDR_VAR 0 9
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 475
7402: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7403: LD_ADDR_VAR 0 11
7407: PUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 476
7417: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7418: LD_ADDR_VAR 0 12
7422: PUSH
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 477
7432: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7433: LD_ADDR_VAR 0 10
7437: PUSH
7438: LD_VAR 0 1
7442: PPUSH
7443: CALL_OW 478
7447: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7448: LD_VAR 0 9
7452: NOT
7453: PUSH
7454: LD_VAR 0 11
7458: NOT
7459: OR
7460: PUSH
7461: LD_VAR 0 12
7465: NOT
7466: OR
7467: PUSH
7468: LD_VAR 0 10
7472: NOT
7473: OR
7474: IFFALSE 7509
// begin result := [ chassis , engine , control , weapon ] ;
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_VAR 0 2
7485: PUSH
7486: LD_VAR 0 3
7490: PUSH
7491: LD_VAR 0 4
7495: PUSH
7496: LD_VAR 0 5
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
// exit ;
7507: GO 7800
// end ; if not chassis in _chassis then
7509: LD_VAR 0 2
7513: PUSH
7514: LD_VAR 0 9
7518: IN
7519: NOT
7520: IFFALSE 7546
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_VAR 0 9
7531: PUSH
7532: LD_INT 1
7534: PPUSH
7535: LD_VAR 0 9
7539: PPUSH
7540: CALL_OW 12
7544: ARRAY
7545: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7546: LD_VAR 0 2
7550: PPUSH
7551: LD_VAR 0 3
7555: PPUSH
7556: CALL 7805 0 2
7560: NOT
7561: IFFALSE 7620
// repeat engine := _engine [ 1 ] ;
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_VAR 0 11
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7577: LD_ADDR_VAR 0 11
7581: PUSH
7582: LD_VAR 0 11
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 3
7594: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7595: LD_VAR 0 2
7599: PPUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL 7805 0 2
7609: PUSH
7610: LD_VAR 0 11
7614: PUSH
7615: EMPTY
7616: EQUAL
7617: OR
7618: IFFALSE 7563
// if not control in _control then
7620: LD_VAR 0 4
7624: PUSH
7625: LD_VAR 0 12
7629: IN
7630: NOT
7631: IFFALSE 7657
// control := _control [ rand ( 1 , _control ) ] ;
7633: LD_ADDR_VAR 0 4
7637: PUSH
7638: LD_VAR 0 12
7642: PUSH
7643: LD_INT 1
7645: PPUSH
7646: LD_VAR 0 12
7650: PPUSH
7651: CALL_OW 12
7655: ARRAY
7656: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7657: LD_VAR 0 2
7661: PPUSH
7662: LD_VAR 0 5
7666: PPUSH
7667: CALL 8025 0 2
7671: NOT
7672: IFFALSE 7731
// repeat weapon := _weapon [ 1 ] ;
7674: LD_ADDR_VAR 0 5
7678: PUSH
7679: LD_VAR 0 10
7683: PUSH
7684: LD_INT 1
7686: ARRAY
7687: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7688: LD_ADDR_VAR 0 10
7692: PUSH
7693: LD_VAR 0 10
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 3
7705: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7706: LD_VAR 0 2
7710: PPUSH
7711: LD_VAR 0 5
7715: PPUSH
7716: CALL 8025 0 2
7720: PUSH
7721: LD_VAR 0 10
7725: PUSH
7726: EMPTY
7727: EQUAL
7728: OR
7729: IFFALSE 7674
// result := [ ] ;
7731: LD_ADDR_VAR 0 6
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_VAR 0 4
7757: PPUSH
7758: LD_VAR 0 5
7762: PPUSH
7763: CALL_OW 448
7767: IFFALSE 7800
// result := [ chassis , engine , control , weapon ] ;
7769: LD_ADDR_VAR 0 6
7773: PUSH
7774: LD_VAR 0 2
7778: PUSH
7779: LD_VAR 0 3
7783: PUSH
7784: LD_VAR 0 4
7788: PUSH
7789: LD_VAR 0 5
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: ST_TO_ADDR
// end ;
7800: LD_VAR 0 6
7804: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7805: LD_INT 0
7807: PPUSH
// if not chassis or not engine then
7808: LD_VAR 0 1
7812: NOT
7813: PUSH
7814: LD_VAR 0 2
7818: NOT
7819: OR
7820: IFFALSE 7824
// exit ;
7822: GO 8020
// case engine of engine_solar :
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 2
7831: DOUBLE
7832: EQUAL
7833: IFTRUE 7837
7835: GO 7875
7837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7838: LD_ADDR_VAR 0 3
7842: PUSH
7843: LD_INT 11
7845: PUSH
7846: LD_INT 12
7848: PUSH
7849: LD_INT 13
7851: PUSH
7852: LD_INT 14
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: ST_TO_ADDR
7873: GO 8004
7875: LD_INT 1
7877: DOUBLE
7878: EQUAL
7879: IFTRUE 7883
7881: GO 7945
7883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7884: LD_ADDR_VAR 0 3
7888: PUSH
7889: LD_INT 11
7891: PUSH
7892: LD_INT 12
7894: PUSH
7895: LD_INT 13
7897: PUSH
7898: LD_INT 14
7900: PUSH
7901: LD_INT 1
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: LD_INT 4
7912: PUSH
7913: LD_INT 5
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 23
7921: PUSH
7922: LD_INT 22
7924: PUSH
7925: LD_INT 24
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: ST_TO_ADDR
7943: GO 8004
7945: LD_INT 3
7947: DOUBLE
7948: EQUAL
7949: IFTRUE 7953
7951: GO 8003
7953: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7954: LD_ADDR_VAR 0 3
7958: PUSH
7959: LD_INT 13
7961: PUSH
7962: LD_INT 14
7964: PUSH
7965: LD_INT 2
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: LD_INT 4
7973: PUSH
7974: LD_INT 5
7976: PUSH
7977: LD_INT 21
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_INT 23
7985: PUSH
7986: LD_INT 24
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
8001: GO 8004
8003: POP
// result := ( chassis in result ) ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_VAR 0 1
8013: PUSH
8014: LD_VAR 0 3
8018: IN
8019: ST_TO_ADDR
// end ;
8020: LD_VAR 0 3
8024: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8025: LD_INT 0
8027: PPUSH
// if not chassis or not weapon then
8028: LD_VAR 0 1
8032: NOT
8033: PUSH
8034: LD_VAR 0 2
8038: NOT
8039: OR
8040: IFFALSE 8044
// exit ;
8042: GO 9104
// case weapon of us_machine_gun :
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: DOUBLE
8052: EQUAL
8053: IFTRUE 8057
8055: GO 8087
8057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8058: LD_ADDR_VAR 0 3
8062: PUSH
8063: LD_INT 1
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 3
8071: PUSH
8072: LD_INT 4
8074: PUSH
8075: LD_INT 5
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: ST_TO_ADDR
8085: GO 9088
8087: LD_INT 3
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8125
8095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8096: LD_ADDR_VAR 0 3
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: LD_INT 4
8112: PUSH
8113: LD_INT 5
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: ST_TO_ADDR
8123: GO 9088
8125: LD_INT 11
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8133
8131: GO 8163
8133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8134: LD_ADDR_VAR 0 3
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: LD_INT 2
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: LD_INT 4
8150: PUSH
8151: LD_INT 5
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: ST_TO_ADDR
8161: GO 9088
8163: LD_INT 4
8165: DOUBLE
8166: EQUAL
8167: IFTRUE 8171
8169: GO 8197
8171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8172: LD_ADDR_VAR 0 3
8176: PUSH
8177: LD_INT 2
8179: PUSH
8180: LD_INT 3
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: LD_INT 5
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: ST_TO_ADDR
8195: GO 9088
8197: LD_INT 5
8199: DOUBLE
8200: EQUAL
8201: IFTRUE 8205
8203: GO 8231
8205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8206: LD_ADDR_VAR 0 3
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: LD_INT 3
8216: PUSH
8217: LD_INT 4
8219: PUSH
8220: LD_INT 5
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: ST_TO_ADDR
8229: GO 9088
8231: LD_INT 9
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8239
8237: GO 8265
8239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8240: LD_ADDR_VAR 0 3
8244: PUSH
8245: LD_INT 2
8247: PUSH
8248: LD_INT 3
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: LD_INT 5
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: ST_TO_ADDR
8263: GO 9088
8265: LD_INT 7
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8299
8273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8274: LD_ADDR_VAR 0 3
8278: PUSH
8279: LD_INT 2
8281: PUSH
8282: LD_INT 3
8284: PUSH
8285: LD_INT 4
8287: PUSH
8288: LD_INT 5
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
8297: GO 9088
8299: LD_INT 12
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8333
8307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_INT 2
8315: PUSH
8316: LD_INT 3
8318: PUSH
8319: LD_INT 4
8321: PUSH
8322: LD_INT 5
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: ST_TO_ADDR
8331: GO 9088
8333: LD_INT 13
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8367
8341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8342: LD_ADDR_VAR 0 3
8346: PUSH
8347: LD_INT 2
8349: PUSH
8350: LD_INT 3
8352: PUSH
8353: LD_INT 4
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: ST_TO_ADDR
8365: GO 9088
8367: LD_INT 14
8369: DOUBLE
8370: EQUAL
8371: IFTRUE 8375
8373: GO 8393
8375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8376: LD_ADDR_VAR 0 3
8380: PUSH
8381: LD_INT 4
8383: PUSH
8384: LD_INT 5
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: ST_TO_ADDR
8391: GO 9088
8393: LD_INT 6
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8419
8401: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8402: LD_ADDR_VAR 0 3
8406: PUSH
8407: LD_INT 4
8409: PUSH
8410: LD_INT 5
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: ST_TO_ADDR
8417: GO 9088
8419: LD_INT 10
8421: DOUBLE
8422: EQUAL
8423: IFTRUE 8427
8425: GO 8445
8427: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8428: LD_ADDR_VAR 0 3
8432: PUSH
8433: LD_INT 4
8435: PUSH
8436: LD_INT 5
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: ST_TO_ADDR
8443: GO 9088
8445: LD_INT 22
8447: DOUBLE
8448: EQUAL
8449: IFTRUE 8453
8451: GO 8479
8453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8454: LD_ADDR_VAR 0 3
8458: PUSH
8459: LD_INT 11
8461: PUSH
8462: LD_INT 12
8464: PUSH
8465: LD_INT 13
8467: PUSH
8468: LD_INT 14
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: ST_TO_ADDR
8477: GO 9088
8479: LD_INT 23
8481: DOUBLE
8482: EQUAL
8483: IFTRUE 8487
8485: GO 8513
8487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8488: LD_ADDR_VAR 0 3
8492: PUSH
8493: LD_INT 11
8495: PUSH
8496: LD_INT 12
8498: PUSH
8499: LD_INT 13
8501: PUSH
8502: LD_INT 14
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
8511: GO 9088
8513: LD_INT 24
8515: DOUBLE
8516: EQUAL
8517: IFTRUE 8521
8519: GO 8547
8521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8522: LD_ADDR_VAR 0 3
8526: PUSH
8527: LD_INT 11
8529: PUSH
8530: LD_INT 12
8532: PUSH
8533: LD_INT 13
8535: PUSH
8536: LD_INT 14
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: ST_TO_ADDR
8545: GO 9088
8547: LD_INT 30
8549: DOUBLE
8550: EQUAL
8551: IFTRUE 8555
8553: GO 8581
8555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8556: LD_ADDR_VAR 0 3
8560: PUSH
8561: LD_INT 11
8563: PUSH
8564: LD_INT 12
8566: PUSH
8567: LD_INT 13
8569: PUSH
8570: LD_INT 14
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: ST_TO_ADDR
8579: GO 9088
8581: LD_INT 25
8583: DOUBLE
8584: EQUAL
8585: IFTRUE 8589
8587: GO 8607
8589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_INT 13
8597: PUSH
8598: LD_INT 14
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: ST_TO_ADDR
8605: GO 9088
8607: LD_INT 27
8609: DOUBLE
8610: EQUAL
8611: IFTRUE 8615
8613: GO 8633
8615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_INT 13
8623: PUSH
8624: LD_INT 14
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: ST_TO_ADDR
8631: GO 9088
8633: LD_INT 92
8635: DOUBLE
8636: EQUAL
8637: IFTRUE 8641
8639: GO 8667
8641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8642: LD_ADDR_VAR 0 3
8646: PUSH
8647: LD_INT 11
8649: PUSH
8650: LD_INT 12
8652: PUSH
8653: LD_INT 13
8655: PUSH
8656: LD_INT 14
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: ST_TO_ADDR
8665: GO 9088
8667: LD_INT 28
8669: DOUBLE
8670: EQUAL
8671: IFTRUE 8675
8673: GO 8693
8675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8676: LD_ADDR_VAR 0 3
8680: PUSH
8681: LD_INT 13
8683: PUSH
8684: LD_INT 14
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: ST_TO_ADDR
8691: GO 9088
8693: LD_INT 29
8695: DOUBLE
8696: EQUAL
8697: IFTRUE 8701
8699: GO 8719
8701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8702: LD_ADDR_VAR 0 3
8706: PUSH
8707: LD_INT 13
8709: PUSH
8710: LD_INT 14
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: ST_TO_ADDR
8717: GO 9088
8719: LD_INT 31
8721: DOUBLE
8722: EQUAL
8723: IFTRUE 8727
8725: GO 8745
8727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8728: LD_ADDR_VAR 0 3
8732: PUSH
8733: LD_INT 13
8735: PUSH
8736: LD_INT 14
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: ST_TO_ADDR
8743: GO 9088
8745: LD_INT 26
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8771
8753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8754: LD_ADDR_VAR 0 3
8758: PUSH
8759: LD_INT 13
8761: PUSH
8762: LD_INT 14
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: ST_TO_ADDR
8769: GO 9088
8771: LD_INT 42
8773: DOUBLE
8774: EQUAL
8775: IFTRUE 8779
8777: GO 8805
8779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8780: LD_ADDR_VAR 0 3
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 24
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: ST_TO_ADDR
8803: GO 9088
8805: LD_INT 43
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 8839
8813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8814: LD_ADDR_VAR 0 3
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 22
8824: PUSH
8825: LD_INT 23
8827: PUSH
8828: LD_INT 24
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: ST_TO_ADDR
8837: GO 9088
8839: LD_INT 44
8841: DOUBLE
8842: EQUAL
8843: IFTRUE 8847
8845: GO 8873
8847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8848: LD_ADDR_VAR 0 3
8852: PUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 23
8861: PUSH
8862: LD_INT 24
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: ST_TO_ADDR
8871: GO 9088
8873: LD_INT 45
8875: DOUBLE
8876: EQUAL
8877: IFTRUE 8881
8879: GO 8907
8881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8882: LD_ADDR_VAR 0 3
8886: PUSH
8887: LD_INT 21
8889: PUSH
8890: LD_INT 22
8892: PUSH
8893: LD_INT 23
8895: PUSH
8896: LD_INT 24
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: ST_TO_ADDR
8905: GO 9088
8907: LD_INT 49
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 8941
8915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8916: LD_ADDR_VAR 0 3
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 24
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: ST_TO_ADDR
8939: GO 9088
8941: LD_INT 51
8943: DOUBLE
8944: EQUAL
8945: IFTRUE 8949
8947: GO 8975
8949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8950: LD_ADDR_VAR 0 3
8954: PUSH
8955: LD_INT 21
8957: PUSH
8958: LD_INT 22
8960: PUSH
8961: LD_INT 23
8963: PUSH
8964: LD_INT 24
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
8973: GO 9088
8975: LD_INT 52
8977: DOUBLE
8978: EQUAL
8979: IFTRUE 8983
8981: GO 9009
8983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8984: LD_ADDR_VAR 0 3
8988: PUSH
8989: LD_INT 21
8991: PUSH
8992: LD_INT 22
8994: PUSH
8995: LD_INT 23
8997: PUSH
8998: LD_INT 24
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
9007: GO 9088
9009: LD_INT 53
9011: DOUBLE
9012: EQUAL
9013: IFTRUE 9017
9015: GO 9035
9017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9018: LD_ADDR_VAR 0 3
9022: PUSH
9023: LD_INT 23
9025: PUSH
9026: LD_INT 24
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: ST_TO_ADDR
9033: GO 9088
9035: LD_INT 46
9037: DOUBLE
9038: EQUAL
9039: IFTRUE 9043
9041: GO 9061
9043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 23
9051: PUSH
9052: LD_INT 24
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: ST_TO_ADDR
9059: GO 9088
9061: LD_INT 47
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9087
9069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9070: LD_ADDR_VAR 0 3
9074: PUSH
9075: LD_INT 23
9077: PUSH
9078: LD_INT 24
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: ST_TO_ADDR
9085: GO 9088
9087: POP
// result := ( chassis in result ) ;
9088: LD_ADDR_VAR 0 3
9092: PUSH
9093: LD_VAR 0 1
9097: PUSH
9098: LD_VAR 0 3
9102: IN
9103: ST_TO_ADDR
// end ;
9104: LD_VAR 0 3
9108: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9109: LD_INT 0
9111: PPUSH
9112: PPUSH
9113: PPUSH
9114: PPUSH
9115: PPUSH
9116: PPUSH
9117: PPUSH
// result := array ;
9118: LD_ADDR_VAR 0 5
9122: PUSH
9123: LD_VAR 0 1
9127: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9128: LD_VAR 0 1
9132: NOT
9133: PUSH
9134: LD_VAR 0 2
9138: NOT
9139: OR
9140: PUSH
9141: LD_VAR 0 3
9145: NOT
9146: OR
9147: PUSH
9148: LD_VAR 0 2
9152: PUSH
9153: LD_VAR 0 1
9157: GREATER
9158: OR
9159: PUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_VAR 0 1
9169: GREATER
9170: OR
9171: IFFALSE 9175
// exit ;
9173: GO 9471
// if direction then
9175: LD_VAR 0 4
9179: IFFALSE 9243
// begin d := 1 ;
9181: LD_ADDR_VAR 0 9
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// if i_from > i_to then
9189: LD_VAR 0 2
9193: PUSH
9194: LD_VAR 0 3
9198: GREATER
9199: IFFALSE 9225
// length := ( array - i_from ) + i_to else
9201: LD_ADDR_VAR 0 11
9205: PUSH
9206: LD_VAR 0 1
9210: PUSH
9211: LD_VAR 0 2
9215: MINUS
9216: PUSH
9217: LD_VAR 0 3
9221: PLUS
9222: ST_TO_ADDR
9223: GO 9241
// length := i_to - i_from ;
9225: LD_ADDR_VAR 0 11
9229: PUSH
9230: LD_VAR 0 3
9234: PUSH
9235: LD_VAR 0 2
9239: MINUS
9240: ST_TO_ADDR
// end else
9241: GO 9304
// begin d := - 1 ;
9243: LD_ADDR_VAR 0 9
9247: PUSH
9248: LD_INT 1
9250: NEG
9251: ST_TO_ADDR
// if i_from > i_to then
9252: LD_VAR 0 2
9256: PUSH
9257: LD_VAR 0 3
9261: GREATER
9262: IFFALSE 9282
// length := i_from - i_to else
9264: LD_ADDR_VAR 0 11
9268: PUSH
9269: LD_VAR 0 2
9273: PUSH
9274: LD_VAR 0 3
9278: MINUS
9279: ST_TO_ADDR
9280: GO 9304
// length := ( array - i_to ) + i_from ;
9282: LD_ADDR_VAR 0 11
9286: PUSH
9287: LD_VAR 0 1
9291: PUSH
9292: LD_VAR 0 3
9296: MINUS
9297: PUSH
9298: LD_VAR 0 2
9302: PLUS
9303: ST_TO_ADDR
// end ; if not length then
9304: LD_VAR 0 11
9308: NOT
9309: IFFALSE 9313
// exit ;
9311: GO 9471
// tmp := array ;
9313: LD_ADDR_VAR 0 10
9317: PUSH
9318: LD_VAR 0 1
9322: ST_TO_ADDR
// for i = 1 to length do
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_VAR 0 11
9337: PUSH
9338: FOR_TO
9339: IFFALSE 9459
// begin for j = 1 to array do
9341: LD_ADDR_VAR 0 7
9345: PUSH
9346: DOUBLE
9347: LD_INT 1
9349: DEC
9350: ST_TO_ADDR
9351: LD_VAR 0 1
9355: PUSH
9356: FOR_TO
9357: IFFALSE 9445
// begin k := j + d ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 7
9368: PUSH
9369: LD_VAR 0 9
9373: PLUS
9374: ST_TO_ADDR
// if k > array then
9375: LD_VAR 0 8
9379: PUSH
9380: LD_VAR 0 1
9384: GREATER
9385: IFFALSE 9395
// k := 1 ;
9387: LD_ADDR_VAR 0 8
9391: PUSH
9392: LD_INT 1
9394: ST_TO_ADDR
// if not k then
9395: LD_VAR 0 8
9399: NOT
9400: IFFALSE 9412
// k := array ;
9402: LD_ADDR_VAR 0 8
9406: PUSH
9407: LD_VAR 0 1
9411: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9412: LD_ADDR_VAR 0 10
9416: PUSH
9417: LD_VAR 0 10
9421: PPUSH
9422: LD_VAR 0 8
9426: PPUSH
9427: LD_VAR 0 1
9431: PUSH
9432: LD_VAR 0 7
9436: ARRAY
9437: PPUSH
9438: CALL_OW 1
9442: ST_TO_ADDR
// end ;
9443: GO 9356
9445: POP
9446: POP
// array := tmp ;
9447: LD_ADDR_VAR 0 1
9451: PUSH
9452: LD_VAR 0 10
9456: ST_TO_ADDR
// end ;
9457: GO 9338
9459: POP
9460: POP
// result := array ;
9461: LD_ADDR_VAR 0 5
9465: PUSH
9466: LD_VAR 0 1
9470: ST_TO_ADDR
// end ;
9471: LD_VAR 0 5
9475: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9476: LD_INT 0
9478: PPUSH
9479: PPUSH
// result := 0 ;
9480: LD_ADDR_VAR 0 3
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// if not array or not value in array then
9488: LD_VAR 0 1
9492: NOT
9493: PUSH
9494: LD_VAR 0 2
9498: PUSH
9499: LD_VAR 0 1
9503: IN
9504: NOT
9505: OR
9506: IFFALSE 9510
// exit ;
9508: GO 9564
// for i = 1 to array do
9510: LD_ADDR_VAR 0 4
9514: PUSH
9515: DOUBLE
9516: LD_INT 1
9518: DEC
9519: ST_TO_ADDR
9520: LD_VAR 0 1
9524: PUSH
9525: FOR_TO
9526: IFFALSE 9562
// if value = array [ i ] then
9528: LD_VAR 0 2
9532: PUSH
9533: LD_VAR 0 1
9537: PUSH
9538: LD_VAR 0 4
9542: ARRAY
9543: EQUAL
9544: IFFALSE 9560
// begin result := i ;
9546: LD_ADDR_VAR 0 3
9550: PUSH
9551: LD_VAR 0 4
9555: ST_TO_ADDR
// exit ;
9556: POP
9557: POP
9558: GO 9564
// end ;
9560: GO 9525
9562: POP
9563: POP
// end ;
9564: LD_VAR 0 3
9568: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9569: LD_INT 0
9571: PPUSH
// vc_chassis := chassis ;
9572: LD_ADDR_OWVAR 37
9576: PUSH
9577: LD_VAR 0 1
9581: ST_TO_ADDR
// vc_engine := engine ;
9582: LD_ADDR_OWVAR 39
9586: PUSH
9587: LD_VAR 0 2
9591: ST_TO_ADDR
// vc_control := control ;
9592: LD_ADDR_OWVAR 38
9596: PUSH
9597: LD_VAR 0 3
9601: ST_TO_ADDR
// vc_weapon := weapon ;
9602: LD_ADDR_OWVAR 40
9606: PUSH
9607: LD_VAR 0 4
9611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9612: LD_ADDR_OWVAR 41
9616: PUSH
9617: LD_VAR 0 5
9621: ST_TO_ADDR
// end ;
9622: LD_VAR 0 6
9626: RET
// export function WantPlant ( unit ) ; var task ; begin
9627: LD_INT 0
9629: PPUSH
9630: PPUSH
// result := false ;
9631: LD_ADDR_VAR 0 2
9635: PUSH
9636: LD_INT 0
9638: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9639: LD_ADDR_VAR 0 3
9643: PUSH
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 437
9653: ST_TO_ADDR
// if task then
9654: LD_VAR 0 3
9658: IFFALSE 9686
// if task [ 1 ] [ 1 ] = p then
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PUSH
9673: LD_STRING p
9675: EQUAL
9676: IFFALSE 9686
// result := true ;
9678: LD_ADDR_VAR 0 2
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// end ;
9686: LD_VAR 0 2
9690: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
9695: PPUSH
9696: PPUSH
// if pos < 1 then
9697: LD_VAR 0 2
9701: PUSH
9702: LD_INT 1
9704: LESS
9705: IFFALSE 9709
// exit ;
9707: GO 10012
// if pos = 1 then
9709: LD_VAR 0 2
9713: PUSH
9714: LD_INT 1
9716: EQUAL
9717: IFFALSE 9750
// result := Replace ( arr , pos [ 1 ] , value ) else
9719: LD_ADDR_VAR 0 4
9723: PUSH
9724: LD_VAR 0 1
9728: PPUSH
9729: LD_VAR 0 2
9733: PUSH
9734: LD_INT 1
9736: ARRAY
9737: PPUSH
9738: LD_VAR 0 3
9742: PPUSH
9743: CALL_OW 1
9747: ST_TO_ADDR
9748: GO 10012
// begin tmp := arr ;
9750: LD_ADDR_VAR 0 6
9754: PUSH
9755: LD_VAR 0 1
9759: ST_TO_ADDR
// s_arr := [ tmp ] ;
9760: LD_ADDR_VAR 0 7
9764: PUSH
9765: LD_VAR 0 6
9769: PUSH
9770: EMPTY
9771: LIST
9772: ST_TO_ADDR
// for i = 1 to pos - 1 do
9773: LD_ADDR_VAR 0 5
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_VAR 0 2
9787: PUSH
9788: LD_INT 1
9790: MINUS
9791: PUSH
9792: FOR_TO
9793: IFFALSE 9838
// begin tmp := tmp [ pos [ i ] ] ;
9795: LD_ADDR_VAR 0 6
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: LD_VAR 0 2
9809: PUSH
9810: LD_VAR 0 5
9814: ARRAY
9815: ARRAY
9816: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9817: LD_ADDR_VAR 0 7
9821: PUSH
9822: LD_VAR 0 7
9826: PUSH
9827: LD_VAR 0 6
9831: PUSH
9832: EMPTY
9833: LIST
9834: ADD
9835: ST_TO_ADDR
// end ;
9836: GO 9792
9838: POP
9839: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9840: LD_ADDR_VAR 0 6
9844: PUSH
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_VAR 0 2
9854: PUSH
9855: LD_VAR 0 2
9859: ARRAY
9860: PPUSH
9861: LD_VAR 0 3
9865: PPUSH
9866: CALL_OW 1
9870: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9871: LD_ADDR_VAR 0 7
9875: PUSH
9876: LD_VAR 0 7
9880: PPUSH
9881: LD_VAR 0 7
9885: PPUSH
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 1
9895: ST_TO_ADDR
// for i = s_arr downto 2 do
9896: LD_ADDR_VAR 0 5
9900: PUSH
9901: DOUBLE
9902: LD_VAR 0 7
9906: INC
9907: ST_TO_ADDR
9908: LD_INT 2
9910: PUSH
9911: FOR_DOWNTO
9912: IFFALSE 9996
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9914: LD_ADDR_VAR 0 6
9918: PUSH
9919: LD_VAR 0 7
9923: PUSH
9924: LD_VAR 0 5
9928: PUSH
9929: LD_INT 1
9931: MINUS
9932: ARRAY
9933: PPUSH
9934: LD_VAR 0 2
9938: PUSH
9939: LD_VAR 0 5
9943: PUSH
9944: LD_INT 1
9946: MINUS
9947: ARRAY
9948: PPUSH
9949: LD_VAR 0 7
9953: PUSH
9954: LD_VAR 0 5
9958: ARRAY
9959: PPUSH
9960: CALL_OW 1
9964: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9965: LD_ADDR_VAR 0 7
9969: PUSH
9970: LD_VAR 0 7
9974: PPUSH
9975: LD_VAR 0 5
9979: PUSH
9980: LD_INT 1
9982: MINUS
9983: PPUSH
9984: LD_VAR 0 6
9988: PPUSH
9989: CALL_OW 1
9993: ST_TO_ADDR
// end ;
9994: GO 9911
9996: POP
9997: POP
// result := s_arr [ 1 ] ;
9998: LD_ADDR_VAR 0 4
10002: PUSH
10003: LD_VAR 0 7
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: ST_TO_ADDR
// end ; end ;
10012: LD_VAR 0 4
10016: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
// if not list then
10021: LD_VAR 0 1
10025: NOT
10026: IFFALSE 10030
// exit ;
10028: GO 10121
// i := list [ pos1 ] ;
10030: LD_ADDR_VAR 0 5
10034: PUSH
10035: LD_VAR 0 1
10039: PUSH
10040: LD_VAR 0 2
10044: ARRAY
10045: ST_TO_ADDR
// if not i then
10046: LD_VAR 0 5
10050: NOT
10051: IFFALSE 10055
// exit ;
10053: GO 10121
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10055: LD_ADDR_VAR 0 1
10059: PUSH
10060: LD_VAR 0 1
10064: PPUSH
10065: LD_VAR 0 2
10069: PPUSH
10070: LD_VAR 0 1
10074: PUSH
10075: LD_VAR 0 3
10079: ARRAY
10080: PPUSH
10081: CALL_OW 1
10085: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10086: LD_ADDR_VAR 0 1
10090: PUSH
10091: LD_VAR 0 1
10095: PPUSH
10096: LD_VAR 0 3
10100: PPUSH
10101: LD_VAR 0 5
10105: PPUSH
10106: CALL_OW 1
10110: ST_TO_ADDR
// result := list ;
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: LD_VAR 0 1
10120: ST_TO_ADDR
// end ;
10121: LD_VAR 0 4
10125: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10126: LD_INT 0
10128: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10129: LD_ADDR_VAR 0 5
10133: PUSH
10134: LD_VAR 0 1
10138: PPUSH
10139: CALL_OW 250
10143: PPUSH
10144: LD_VAR 0 1
10148: PPUSH
10149: CALL_OW 251
10153: PPUSH
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_VAR 0 3
10163: PPUSH
10164: LD_VAR 0 4
10168: PPUSH
10169: CALL 10547 0 5
10173: ST_TO_ADDR
// end ;
10174: LD_VAR 0 5
10178: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10179: LD_INT 0
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// if not list or not unit then
10185: LD_VAR 0 2
10189: NOT
10190: PUSH
10191: LD_VAR 0 1
10195: NOT
10196: OR
10197: IFFALSE 10201
// exit ;
10199: GO 10542
// result := [ ] ;
10201: LD_ADDR_VAR 0 5
10205: PUSH
10206: EMPTY
10207: ST_TO_ADDR
// for i in list do
10208: LD_ADDR_VAR 0 6
10212: PUSH
10213: LD_VAR 0 2
10217: PUSH
10218: FOR_IN
10219: IFFALSE 10437
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10221: LD_ADDR_VAR 0 8
10225: PUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: LD_VAR 0 6
10235: PUSH
10236: LD_INT 1
10238: ARRAY
10239: PPUSH
10240: LD_VAR 0 6
10244: PUSH
10245: LD_INT 2
10247: ARRAY
10248: PPUSH
10249: CALL_OW 297
10253: ST_TO_ADDR
// if not Count ( result ) then
10254: LD_VAR 0 5
10258: PPUSH
10259: CALL 6831 0 1
10263: NOT
10264: IFFALSE 10297
// begin result := Join ( result , [ i , tmp ] ) ;
10266: LD_ADDR_VAR 0 5
10270: PUSH
10271: LD_VAR 0 5
10275: PPUSH
10276: LD_VAR 0 6
10280: PUSH
10281: LD_VAR 0 8
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL 42420 0 2
10294: ST_TO_ADDR
// continue ;
10295: GO 10218
// end ; if result [ result ] [ 2 ] <= tmp then
10297: LD_VAR 0 5
10301: PUSH
10302: LD_VAR 0 5
10306: ARRAY
10307: PUSH
10308: LD_INT 2
10310: ARRAY
10311: PUSH
10312: LD_VAR 0 8
10316: LESSEQUAL
10317: IFFALSE 10350
// result := Join ( result , [ i , tmp ] ) else
10319: LD_ADDR_VAR 0 5
10323: PUSH
10324: LD_VAR 0 5
10328: PPUSH
10329: LD_VAR 0 6
10333: PUSH
10334: LD_VAR 0 8
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL 42420 0 2
10347: ST_TO_ADDR
10348: GO 10435
// begin for j := 1 to Count ( result ) do
10350: LD_ADDR_VAR 0 7
10354: PUSH
10355: DOUBLE
10356: LD_INT 1
10358: DEC
10359: ST_TO_ADDR
10360: LD_VAR 0 5
10364: PPUSH
10365: CALL 6831 0 1
10369: PUSH
10370: FOR_TO
10371: IFFALSE 10433
// begin if tmp < result [ j ] [ 2 ] then
10373: LD_VAR 0 8
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: LD_VAR 0 7
10387: ARRAY
10388: PUSH
10389: LD_INT 2
10391: ARRAY
10392: LESS
10393: IFFALSE 10431
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10395: LD_ADDR_VAR 0 5
10399: PUSH
10400: LD_VAR 0 5
10404: PPUSH
10405: LD_VAR 0 7
10409: PPUSH
10410: LD_VAR 0 6
10414: PUSH
10415: LD_VAR 0 8
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PPUSH
10424: CALL_OW 2
10428: ST_TO_ADDR
// break ;
10429: GO 10433
// end ; end ;
10431: GO 10370
10433: POP
10434: POP
// end ; end ;
10435: GO 10218
10437: POP
10438: POP
// if result and not asc then
10439: LD_VAR 0 5
10443: PUSH
10444: LD_VAR 0 3
10448: NOT
10449: AND
10450: IFFALSE 10467
// result := ReverseArray ( result ) ;
10452: LD_ADDR_VAR 0 5
10456: PUSH
10457: LD_VAR 0 5
10461: PPUSH
10462: CALL 37707 0 1
10466: ST_TO_ADDR
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 8
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// if mode then
10474: LD_VAR 0 4
10478: IFFALSE 10542
// begin for i := 1 to result do
10480: LD_ADDR_VAR 0 6
10484: PUSH
10485: DOUBLE
10486: LD_INT 1
10488: DEC
10489: ST_TO_ADDR
10490: LD_VAR 0 5
10494: PUSH
10495: FOR_TO
10496: IFFALSE 10530
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10498: LD_ADDR_VAR 0 8
10502: PUSH
10503: LD_VAR 0 8
10507: PPUSH
10508: LD_VAR 0 5
10512: PUSH
10513: LD_VAR 0 6
10517: ARRAY
10518: PUSH
10519: LD_INT 1
10521: ARRAY
10522: PPUSH
10523: CALL 42420 0 2
10527: ST_TO_ADDR
10528: GO 10495
10530: POP
10531: POP
// result := tmp ;
10532: LD_ADDR_VAR 0 5
10536: PUSH
10537: LD_VAR 0 8
10541: ST_TO_ADDR
// end ; end ;
10542: LD_VAR 0 5
10546: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10547: LD_INT 0
10549: PPUSH
10550: PPUSH
10551: PPUSH
10552: PPUSH
// if not list then
10553: LD_VAR 0 3
10557: NOT
10558: IFFALSE 10562
// exit ;
10560: GO 10950
// result := [ ] ;
10562: LD_ADDR_VAR 0 6
10566: PUSH
10567: EMPTY
10568: ST_TO_ADDR
// for i in list do
10569: LD_ADDR_VAR 0 7
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: FOR_IN
10580: IFFALSE 10782
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10582: LD_ADDR_VAR 0 9
10586: PUSH
10587: LD_VAR 0 7
10591: PPUSH
10592: LD_VAR 0 1
10596: PPUSH
10597: LD_VAR 0 2
10601: PPUSH
10602: CALL_OW 297
10606: ST_TO_ADDR
// if not result then
10607: LD_VAR 0 6
10611: NOT
10612: IFFALSE 10638
// result := [ [ i , tmp ] ] else
10614: LD_ADDR_VAR 0 6
10618: PUSH
10619: LD_VAR 0 7
10623: PUSH
10624: LD_VAR 0 9
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: EMPTY
10634: LIST
10635: ST_TO_ADDR
10636: GO 10780
// begin if result [ result ] [ 2 ] < tmp then
10638: LD_VAR 0 6
10642: PUSH
10643: LD_VAR 0 6
10647: ARRAY
10648: PUSH
10649: LD_INT 2
10651: ARRAY
10652: PUSH
10653: LD_VAR 0 9
10657: LESS
10658: IFFALSE 10700
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10660: LD_ADDR_VAR 0 6
10664: PUSH
10665: LD_VAR 0 6
10669: PPUSH
10670: LD_VAR 0 6
10674: PUSH
10675: LD_INT 1
10677: PLUS
10678: PPUSH
10679: LD_VAR 0 7
10683: PUSH
10684: LD_VAR 0 9
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 2
10697: ST_TO_ADDR
10698: GO 10780
// for j = 1 to result do
10700: LD_ADDR_VAR 0 8
10704: PUSH
10705: DOUBLE
10706: LD_INT 1
10708: DEC
10709: ST_TO_ADDR
10710: LD_VAR 0 6
10714: PUSH
10715: FOR_TO
10716: IFFALSE 10778
// begin if tmp < result [ j ] [ 2 ] then
10718: LD_VAR 0 9
10722: PUSH
10723: LD_VAR 0 6
10727: PUSH
10728: LD_VAR 0 8
10732: ARRAY
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: LESS
10738: IFFALSE 10776
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10740: LD_ADDR_VAR 0 6
10744: PUSH
10745: LD_VAR 0 6
10749: PPUSH
10750: LD_VAR 0 8
10754: PPUSH
10755: LD_VAR 0 7
10759: PUSH
10760: LD_VAR 0 9
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 2
10773: ST_TO_ADDR
// break ;
10774: GO 10778
// end ; end ;
10776: GO 10715
10778: POP
10779: POP
// end ; end ;
10780: GO 10579
10782: POP
10783: POP
// if result and not asc then
10784: LD_VAR 0 6
10788: PUSH
10789: LD_VAR 0 4
10793: NOT
10794: AND
10795: IFFALSE 10870
// begin tmp := result ;
10797: LD_ADDR_VAR 0 9
10801: PUSH
10802: LD_VAR 0 6
10806: ST_TO_ADDR
// for i = tmp downto 1 do
10807: LD_ADDR_VAR 0 7
10811: PUSH
10812: DOUBLE
10813: LD_VAR 0 9
10817: INC
10818: ST_TO_ADDR
10819: LD_INT 1
10821: PUSH
10822: FOR_DOWNTO
10823: IFFALSE 10868
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10825: LD_ADDR_VAR 0 6
10829: PUSH
10830: LD_VAR 0 6
10834: PPUSH
10835: LD_VAR 0 9
10839: PUSH
10840: LD_VAR 0 7
10844: MINUS
10845: PUSH
10846: LD_INT 1
10848: PLUS
10849: PPUSH
10850: LD_VAR 0 9
10854: PUSH
10855: LD_VAR 0 7
10859: ARRAY
10860: PPUSH
10861: CALL_OW 1
10865: ST_TO_ADDR
10866: GO 10822
10868: POP
10869: POP
// end ; tmp := [ ] ;
10870: LD_ADDR_VAR 0 9
10874: PUSH
10875: EMPTY
10876: ST_TO_ADDR
// if mode then
10877: LD_VAR 0 5
10881: IFFALSE 10950
// begin for i = 1 to result do
10883: LD_ADDR_VAR 0 7
10887: PUSH
10888: DOUBLE
10889: LD_INT 1
10891: DEC
10892: ST_TO_ADDR
10893: LD_VAR 0 6
10897: PUSH
10898: FOR_TO
10899: IFFALSE 10938
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10901: LD_ADDR_VAR 0 9
10905: PUSH
10906: LD_VAR 0 9
10910: PPUSH
10911: LD_VAR 0 7
10915: PPUSH
10916: LD_VAR 0 6
10920: PUSH
10921: LD_VAR 0 7
10925: ARRAY
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: CALL_OW 1
10935: ST_TO_ADDR
10936: GO 10898
10938: POP
10939: POP
// result := tmp ;
10940: LD_ADDR_VAR 0 6
10944: PUSH
10945: LD_VAR 0 9
10949: ST_TO_ADDR
// end ; end ;
10950: LD_VAR 0 6
10954: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10955: LD_INT 0
10957: PPUSH
10958: PPUSH
10959: PPUSH
10960: PPUSH
10961: PPUSH
10962: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10963: LD_ADDR_VAR 0 5
10967: PUSH
10968: LD_INT 0
10970: PUSH
10971: LD_INT 0
10973: PUSH
10974: LD_INT 0
10976: PUSH
10977: EMPTY
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: ST_TO_ADDR
// if not x or not y then
10985: LD_VAR 0 2
10989: NOT
10990: PUSH
10991: LD_VAR 0 3
10995: NOT
10996: OR
10997: IFFALSE 11001
// exit ;
10999: GO 12651
// if not range then
11001: LD_VAR 0 4
11005: NOT
11006: IFFALSE 11016
// range := 10 ;
11008: LD_ADDR_VAR 0 4
11012: PUSH
11013: LD_INT 10
11015: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11016: LD_ADDR_VAR 0 8
11020: PUSH
11021: LD_INT 81
11023: PUSH
11024: LD_VAR 0 1
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 92
11035: PUSH
11036: LD_VAR 0 2
11040: PUSH
11041: LD_VAR 0 3
11045: PUSH
11046: LD_VAR 0 4
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: LD_INT 21
11062: PUSH
11063: LD_INT 3
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: ST_TO_ADDR
// if not tmp then
11084: LD_VAR 0 8
11088: NOT
11089: IFFALSE 11093
// exit ;
11091: GO 12651
// for i in tmp do
11093: LD_ADDR_VAR 0 6
11097: PUSH
11098: LD_VAR 0 8
11102: PUSH
11103: FOR_IN
11104: IFFALSE 12626
// begin points := [ 0 , 0 , 0 ] ;
11106: LD_ADDR_VAR 0 9
11110: PUSH
11111: LD_INT 0
11113: PUSH
11114: LD_INT 0
11116: PUSH
11117: LD_INT 0
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: LIST
11124: ST_TO_ADDR
// bpoints := 1 ;
11125: LD_ADDR_VAR 0 10
11129: PUSH
11130: LD_INT 1
11132: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11133: LD_VAR 0 6
11137: PPUSH
11138: CALL_OW 247
11142: PUSH
11143: LD_INT 1
11145: DOUBLE
11146: EQUAL
11147: IFTRUE 11151
11149: GO 11729
11151: POP
// begin if GetClass ( i ) = 1 then
11152: LD_VAR 0 6
11156: PPUSH
11157: CALL_OW 257
11161: PUSH
11162: LD_INT 1
11164: EQUAL
11165: IFFALSE 11186
// points := [ 10 , 5 , 3 ] ;
11167: LD_ADDR_VAR 0 9
11171: PUSH
11172: LD_INT 10
11174: PUSH
11175: LD_INT 5
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11186: LD_VAR 0 6
11190: PPUSH
11191: CALL_OW 257
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: LD_INT 3
11201: PUSH
11202: LD_INT 4
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: IN
11210: IFFALSE 11231
// points := [ 3 , 2 , 1 ] ;
11212: LD_ADDR_VAR 0 9
11216: PUSH
11217: LD_INT 3
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11231: LD_VAR 0 6
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: IFFALSE 11265
// points := [ 130 , 5 , 2 ] ;
11246: LD_ADDR_VAR 0 9
11250: PUSH
11251: LD_INT 130
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11265: LD_VAR 0 6
11269: PPUSH
11270: CALL_OW 257
11274: PUSH
11275: LD_INT 8
11277: EQUAL
11278: IFFALSE 11299
// points := [ 35 , 35 , 30 ] ;
11280: LD_ADDR_VAR 0 9
11284: PUSH
11285: LD_INT 35
11287: PUSH
11288: LD_INT 35
11290: PUSH
11291: LD_INT 30
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11299: LD_VAR 0 6
11303: PPUSH
11304: CALL_OW 257
11308: PUSH
11309: LD_INT 9
11311: EQUAL
11312: IFFALSE 11333
// points := [ 20 , 55 , 40 ] ;
11314: LD_ADDR_VAR 0 9
11318: PUSH
11319: LD_INT 20
11321: PUSH
11322: LD_INT 55
11324: PUSH
11325: LD_INT 40
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11333: LD_VAR 0 6
11337: PPUSH
11338: CALL_OW 257
11342: PUSH
11343: LD_INT 12
11345: PUSH
11346: LD_INT 16
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: IN
11353: IFFALSE 11374
// points := [ 5 , 3 , 2 ] ;
11355: LD_ADDR_VAR 0 9
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 3
11365: PUSH
11366: LD_INT 2
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11374: LD_VAR 0 6
11378: PPUSH
11379: CALL_OW 257
11383: PUSH
11384: LD_INT 17
11386: EQUAL
11387: IFFALSE 11408
// points := [ 100 , 50 , 75 ] ;
11389: LD_ADDR_VAR 0 9
11393: PUSH
11394: LD_INT 100
11396: PUSH
11397: LD_INT 50
11399: PUSH
11400: LD_INT 75
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11408: LD_VAR 0 6
11412: PPUSH
11413: CALL_OW 257
11417: PUSH
11418: LD_INT 15
11420: EQUAL
11421: IFFALSE 11442
// points := [ 10 , 5 , 3 ] ;
11423: LD_ADDR_VAR 0 9
11427: PUSH
11428: LD_INT 10
11430: PUSH
11431: LD_INT 5
11433: PUSH
11434: LD_INT 3
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11442: LD_VAR 0 6
11446: PPUSH
11447: CALL_OW 257
11451: PUSH
11452: LD_INT 14
11454: EQUAL
11455: IFFALSE 11476
// points := [ 10 , 0 , 0 ] ;
11457: LD_ADDR_VAR 0 9
11461: PUSH
11462: LD_INT 10
11464: PUSH
11465: LD_INT 0
11467: PUSH
11468: LD_INT 0
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11476: LD_VAR 0 6
11480: PPUSH
11481: CALL_OW 257
11485: PUSH
11486: LD_INT 11
11488: EQUAL
11489: IFFALSE 11510
// points := [ 30 , 10 , 5 ] ;
11491: LD_ADDR_VAR 0 9
11495: PUSH
11496: LD_INT 30
11498: PUSH
11499: LD_INT 10
11501: PUSH
11502: LD_INT 5
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11510: LD_VAR 0 1
11514: PPUSH
11515: LD_INT 5
11517: PPUSH
11518: CALL_OW 321
11522: PUSH
11523: LD_INT 2
11525: EQUAL
11526: IFFALSE 11543
// bpoints := bpoints * 1.8 ;
11528: LD_ADDR_VAR 0 10
11532: PUSH
11533: LD_VAR 0 10
11537: PUSH
11538: LD_REAL  1.80000000000000E+0000
11541: MUL
11542: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11543: LD_VAR 0 6
11547: PPUSH
11548: CALL_OW 257
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 3
11561: PUSH
11562: LD_INT 4
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: IN
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: LD_INT 51
11579: PPUSH
11580: CALL_OW 321
11584: PUSH
11585: LD_INT 2
11587: EQUAL
11588: AND
11589: IFFALSE 11606
// bpoints := bpoints * 1.2 ;
11591: LD_ADDR_VAR 0 10
11595: PUSH
11596: LD_VAR 0 10
11600: PUSH
11601: LD_REAL  1.20000000000000E+0000
11604: MUL
11605: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11606: LD_VAR 0 6
11610: PPUSH
11611: CALL_OW 257
11615: PUSH
11616: LD_INT 5
11618: PUSH
11619: LD_INT 7
11621: PUSH
11622: LD_INT 9
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: LIST
11629: IN
11630: PUSH
11631: LD_VAR 0 1
11635: PPUSH
11636: LD_INT 52
11638: PPUSH
11639: CALL_OW 321
11643: PUSH
11644: LD_INT 2
11646: EQUAL
11647: AND
11648: IFFALSE 11665
// bpoints := bpoints * 1.5 ;
11650: LD_ADDR_VAR 0 10
11654: PUSH
11655: LD_VAR 0 10
11659: PUSH
11660: LD_REAL  1.50000000000000E+0000
11663: MUL
11664: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_INT 66
11672: PPUSH
11673: CALL_OW 321
11677: PUSH
11678: LD_INT 2
11680: EQUAL
11681: IFFALSE 11698
// bpoints := bpoints * 1.1 ;
11683: LD_ADDR_VAR 0 10
11687: PUSH
11688: LD_VAR 0 10
11692: PUSH
11693: LD_REAL  1.10000000000000E+0000
11696: MUL
11697: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11698: LD_ADDR_VAR 0 10
11702: PUSH
11703: LD_VAR 0 10
11707: PUSH
11708: LD_VAR 0 6
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 259
11720: PUSH
11721: LD_REAL  1.15000000000000E+0000
11724: MUL
11725: MUL
11726: ST_TO_ADDR
// end ; unit_vehicle :
11727: GO 12555
11729: LD_INT 2
11731: DOUBLE
11732: EQUAL
11733: IFTRUE 11737
11735: GO 12543
11737: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11738: LD_VAR 0 6
11742: PPUSH
11743: CALL_OW 264
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 42
11753: PUSH
11754: LD_INT 24
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: IN
11762: IFFALSE 11783
// points := [ 25 , 5 , 3 ] ;
11764: LD_ADDR_VAR 0 9
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 5
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11783: LD_VAR 0 6
11787: PPUSH
11788: CALL_OW 264
11792: PUSH
11793: LD_INT 4
11795: PUSH
11796: LD_INT 43
11798: PUSH
11799: LD_INT 25
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: IN
11807: IFFALSE 11828
// points := [ 40 , 15 , 5 ] ;
11809: LD_ADDR_VAR 0 9
11813: PUSH
11814: LD_INT 40
11816: PUSH
11817: LD_INT 15
11819: PUSH
11820: LD_INT 5
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11828: LD_VAR 0 6
11832: PPUSH
11833: CALL_OW 264
11837: PUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 23
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: IN
11848: IFFALSE 11869
// points := [ 7 , 25 , 8 ] ;
11850: LD_ADDR_VAR 0 9
11854: PUSH
11855: LD_INT 7
11857: PUSH
11858: LD_INT 25
11860: PUSH
11861: LD_INT 8
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11869: LD_VAR 0 6
11873: PPUSH
11874: CALL_OW 264
11878: PUSH
11879: LD_INT 5
11881: PUSH
11882: LD_INT 27
11884: PUSH
11885: LD_INT 44
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: IN
11893: IFFALSE 11914
// points := [ 14 , 50 , 16 ] ;
11895: LD_ADDR_VAR 0 9
11899: PUSH
11900: LD_INT 14
11902: PUSH
11903: LD_INT 50
11905: PUSH
11906: LD_INT 16
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11914: LD_VAR 0 6
11918: PPUSH
11919: CALL_OW 264
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 46
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: IN
11934: IFFALSE 11955
// points := [ 32 , 120 , 70 ] ;
11936: LD_ADDR_VAR 0 9
11940: PUSH
11941: LD_INT 32
11943: PUSH
11944: LD_INT 120
11946: PUSH
11947: LD_INT 70
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11955: LD_VAR 0 6
11959: PPUSH
11960: CALL_OW 264
11964: PUSH
11965: LD_INT 7
11967: PUSH
11968: LD_INT 28
11970: PUSH
11971: LD_INT 45
11973: PUSH
11974: LD_INT 92
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: IN
11983: IFFALSE 12004
// points := [ 35 , 20 , 45 ] ;
11985: LD_ADDR_VAR 0 9
11989: PUSH
11990: LD_INT 35
11992: PUSH
11993: LD_INT 20
11995: PUSH
11996: LD_INT 45
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12004: LD_VAR 0 6
12008: PPUSH
12009: CALL_OW 264
12013: PUSH
12014: LD_INT 47
12016: PUSH
12017: EMPTY
12018: LIST
12019: IN
12020: IFFALSE 12041
// points := [ 67 , 45 , 75 ] ;
12022: LD_ADDR_VAR 0 9
12026: PUSH
12027: LD_INT 67
12029: PUSH
12030: LD_INT 45
12032: PUSH
12033: LD_INT 75
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12041: LD_VAR 0 6
12045: PPUSH
12046: CALL_OW 264
12050: PUSH
12051: LD_INT 26
12053: PUSH
12054: EMPTY
12055: LIST
12056: IN
12057: IFFALSE 12078
// points := [ 120 , 30 , 80 ] ;
12059: LD_ADDR_VAR 0 9
12063: PUSH
12064: LD_INT 120
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 80
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12078: LD_VAR 0 6
12082: PPUSH
12083: CALL_OW 264
12087: PUSH
12088: LD_INT 22
12090: PUSH
12091: EMPTY
12092: LIST
12093: IN
12094: IFFALSE 12115
// points := [ 40 , 1 , 1 ] ;
12096: LD_ADDR_VAR 0 9
12100: PUSH
12101: LD_INT 40
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12115: LD_VAR 0 6
12119: PPUSH
12120: CALL_OW 264
12124: PUSH
12125: LD_INT 29
12127: PUSH
12128: EMPTY
12129: LIST
12130: IN
12131: IFFALSE 12152
// points := [ 70 , 200 , 400 ] ;
12133: LD_ADDR_VAR 0 9
12137: PUSH
12138: LD_INT 70
12140: PUSH
12141: LD_INT 200
12143: PUSH
12144: LD_INT 400
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12152: LD_VAR 0 6
12156: PPUSH
12157: CALL_OW 264
12161: PUSH
12162: LD_INT 14
12164: PUSH
12165: LD_INT 53
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: IN
12172: IFFALSE 12193
// points := [ 40 , 10 , 20 ] ;
12174: LD_ADDR_VAR 0 9
12178: PUSH
12179: LD_INT 40
12181: PUSH
12182: LD_INT 10
12184: PUSH
12185: LD_INT 20
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12193: LD_VAR 0 6
12197: PPUSH
12198: CALL_OW 264
12202: PUSH
12203: LD_INT 9
12205: PUSH
12206: EMPTY
12207: LIST
12208: IN
12209: IFFALSE 12230
// points := [ 5 , 70 , 20 ] ;
12211: LD_ADDR_VAR 0 9
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: LD_INT 70
12221: PUSH
12222: LD_INT 20
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 264
12239: PUSH
12240: LD_INT 10
12242: PUSH
12243: EMPTY
12244: LIST
12245: IN
12246: IFFALSE 12267
// points := [ 35 , 110 , 70 ] ;
12248: LD_ADDR_VAR 0 9
12252: PUSH
12253: LD_INT 35
12255: PUSH
12256: LD_INT 110
12258: PUSH
12259: LD_INT 70
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12267: LD_VAR 0 6
12271: PPUSH
12272: CALL_OW 265
12276: PUSH
12277: LD_INT 25
12279: EQUAL
12280: IFFALSE 12301
// points := [ 80 , 65 , 100 ] ;
12282: LD_ADDR_VAR 0 9
12286: PUSH
12287: LD_INT 80
12289: PUSH
12290: LD_INT 65
12292: PUSH
12293: LD_INT 100
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12301: LD_VAR 0 6
12305: PPUSH
12306: CALL_OW 263
12310: PUSH
12311: LD_INT 1
12313: EQUAL
12314: IFFALSE 12349
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12316: LD_ADDR_VAR 0 10
12320: PUSH
12321: LD_VAR 0 10
12325: PUSH
12326: LD_VAR 0 6
12330: PPUSH
12331: CALL_OW 311
12335: PPUSH
12336: LD_INT 3
12338: PPUSH
12339: CALL_OW 259
12343: PUSH
12344: LD_INT 4
12346: MUL
12347: MUL
12348: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12349: LD_VAR 0 6
12353: PPUSH
12354: CALL_OW 263
12358: PUSH
12359: LD_INT 2
12361: EQUAL
12362: IFFALSE 12413
// begin j := IsControledBy ( i ) ;
12364: LD_ADDR_VAR 0 7
12368: PUSH
12369: LD_VAR 0 6
12373: PPUSH
12374: CALL_OW 312
12378: ST_TO_ADDR
// if j then
12379: LD_VAR 0 7
12383: IFFALSE 12413
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12385: LD_ADDR_VAR 0 10
12389: PUSH
12390: LD_VAR 0 10
12394: PUSH
12395: LD_VAR 0 7
12399: PPUSH
12400: LD_INT 3
12402: PPUSH
12403: CALL_OW 259
12407: PUSH
12408: LD_INT 3
12410: MUL
12411: MUL
12412: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12413: LD_VAR 0 6
12417: PPUSH
12418: CALL_OW 264
12422: PUSH
12423: LD_INT 5
12425: PUSH
12426: LD_INT 6
12428: PUSH
12429: LD_INT 46
12431: PUSH
12432: LD_INT 44
12434: PUSH
12435: LD_INT 47
12437: PUSH
12438: LD_INT 45
12440: PUSH
12441: LD_INT 28
12443: PUSH
12444: LD_INT 7
12446: PUSH
12447: LD_INT 27
12449: PUSH
12450: LD_INT 29
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: IN
12465: PUSH
12466: LD_VAR 0 1
12470: PPUSH
12471: LD_INT 52
12473: PPUSH
12474: CALL_OW 321
12478: PUSH
12479: LD_INT 2
12481: EQUAL
12482: AND
12483: IFFALSE 12500
// bpoints := bpoints * 1.2 ;
12485: LD_ADDR_VAR 0 10
12489: PUSH
12490: LD_VAR 0 10
12494: PUSH
12495: LD_REAL  1.20000000000000E+0000
12498: MUL
12499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12500: LD_VAR 0 6
12504: PPUSH
12505: CALL_OW 264
12509: PUSH
12510: LD_INT 6
12512: PUSH
12513: LD_INT 46
12515: PUSH
12516: LD_INT 47
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: IN
12524: IFFALSE 12541
// bpoints := bpoints * 1.2 ;
12526: LD_ADDR_VAR 0 10
12530: PUSH
12531: LD_VAR 0 10
12535: PUSH
12536: LD_REAL  1.20000000000000E+0000
12539: MUL
12540: ST_TO_ADDR
// end ; unit_building :
12541: GO 12555
12543: LD_INT 3
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12554
12551: POP
// ; end ;
12552: GO 12555
12554: POP
// for j = 1 to 3 do
12555: LD_ADDR_VAR 0 7
12559: PUSH
12560: DOUBLE
12561: LD_INT 1
12563: DEC
12564: ST_TO_ADDR
12565: LD_INT 3
12567: PUSH
12568: FOR_TO
12569: IFFALSE 12622
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12571: LD_ADDR_VAR 0 5
12575: PUSH
12576: LD_VAR 0 5
12580: PPUSH
12581: LD_VAR 0 7
12585: PPUSH
12586: LD_VAR 0 5
12590: PUSH
12591: LD_VAR 0 7
12595: ARRAY
12596: PUSH
12597: LD_VAR 0 9
12601: PUSH
12602: LD_VAR 0 7
12606: ARRAY
12607: PUSH
12608: LD_VAR 0 10
12612: MUL
12613: PLUS
12614: PPUSH
12615: CALL_OW 1
12619: ST_TO_ADDR
12620: GO 12568
12622: POP
12623: POP
// end ;
12624: GO 11103
12626: POP
12627: POP
// result := Replace ( result , 4 , tmp ) ;
12628: LD_ADDR_VAR 0 5
12632: PUSH
12633: LD_VAR 0 5
12637: PPUSH
12638: LD_INT 4
12640: PPUSH
12641: LD_VAR 0 8
12645: PPUSH
12646: CALL_OW 1
12650: ST_TO_ADDR
// end ;
12651: LD_VAR 0 5
12655: RET
// export function DangerAtRange ( unit , range ) ; begin
12656: LD_INT 0
12658: PPUSH
// if not unit then
12659: LD_VAR 0 1
12663: NOT
12664: IFFALSE 12668
// exit ;
12666: GO 12713
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12668: LD_ADDR_VAR 0 3
12672: PUSH
12673: LD_VAR 0 1
12677: PPUSH
12678: CALL_OW 255
12682: PPUSH
12683: LD_VAR 0 1
12687: PPUSH
12688: CALL_OW 250
12692: PPUSH
12693: LD_VAR 0 1
12697: PPUSH
12698: CALL_OW 251
12702: PPUSH
12703: LD_VAR 0 2
12707: PPUSH
12708: CALL 10955 0 4
12712: ST_TO_ADDR
// end ;
12713: LD_VAR 0 3
12717: RET
// export function DangerInArea ( side , area ) ; begin
12718: LD_INT 0
12720: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12721: LD_ADDR_VAR 0 3
12725: PUSH
12726: LD_VAR 0 2
12730: PPUSH
12731: LD_INT 81
12733: PUSH
12734: LD_VAR 0 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 70
12747: ST_TO_ADDR
// end ;
12748: LD_VAR 0 3
12752: RET
// export function IsExtension ( b ) ; begin
12753: LD_INT 0
12755: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: LD_VAR 0 1
12765: PUSH
12766: LD_INT 23
12768: PUSH
12769: LD_INT 20
12771: PUSH
12772: LD_INT 22
12774: PUSH
12775: LD_INT 17
12777: PUSH
12778: LD_INT 24
12780: PUSH
12781: LD_INT 21
12783: PUSH
12784: LD_INT 19
12786: PUSH
12787: LD_INT 16
12789: PUSH
12790: LD_INT 25
12792: PUSH
12793: LD_INT 18
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: IN
12808: ST_TO_ADDR
// end ;
12809: LD_VAR 0 2
12813: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12814: LD_INT 0
12816: PPUSH
12817: PPUSH
12818: PPUSH
// result := [ ] ;
12819: LD_ADDR_VAR 0 4
12823: PUSH
12824: EMPTY
12825: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12826: LD_ADDR_VAR 0 5
12830: PUSH
12831: LD_VAR 0 2
12835: PPUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 70
12850: ST_TO_ADDR
// if not tmp then
12851: LD_VAR 0 5
12855: NOT
12856: IFFALSE 12860
// exit ;
12858: GO 12924
// if checkLink then
12860: LD_VAR 0 3
12864: IFFALSE 12914
// begin for i in tmp do
12866: LD_ADDR_VAR 0 6
12870: PUSH
12871: LD_VAR 0 5
12875: PUSH
12876: FOR_IN
12877: IFFALSE 12912
// if GetBase ( i ) <> base then
12879: LD_VAR 0 6
12883: PPUSH
12884: CALL_OW 274
12888: PUSH
12889: LD_VAR 0 1
12893: NONEQUAL
12894: IFFALSE 12910
// ComLinkToBase ( base , i ) ;
12896: LD_VAR 0 1
12900: PPUSH
12901: LD_VAR 0 6
12905: PPUSH
12906: CALL_OW 169
12910: GO 12876
12912: POP
12913: POP
// end ; result := tmp ;
12914: LD_ADDR_VAR 0 4
12918: PUSH
12919: LD_VAR 0 5
12923: ST_TO_ADDR
// end ;
12924: LD_VAR 0 4
12928: RET
// export function ComComplete ( units , b ) ; var i ; begin
12929: LD_INT 0
12931: PPUSH
12932: PPUSH
// if not units then
12933: LD_VAR 0 1
12937: NOT
12938: IFFALSE 12942
// exit ;
12940: GO 13032
// for i in units do
12942: LD_ADDR_VAR 0 4
12946: PUSH
12947: LD_VAR 0 1
12951: PUSH
12952: FOR_IN
12953: IFFALSE 13030
// if BuildingStatus ( b ) = bs_build then
12955: LD_VAR 0 2
12959: PPUSH
12960: CALL_OW 461
12964: PUSH
12965: LD_INT 1
12967: EQUAL
12968: IFFALSE 13028
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12970: LD_VAR 0 4
12974: PPUSH
12975: LD_STRING h
12977: PUSH
12978: LD_VAR 0 2
12982: PPUSH
12983: CALL_OW 250
12987: PUSH
12988: LD_VAR 0 2
12992: PPUSH
12993: CALL_OW 251
12997: PUSH
12998: LD_VAR 0 2
13002: PUSH
13003: LD_INT 0
13005: PUSH
13006: LD_INT 0
13008: PUSH
13009: LD_INT 0
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: PPUSH
13024: CALL_OW 446
13028: GO 12952
13030: POP
13031: POP
// end ;
13032: LD_VAR 0 3
13036: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13045: LD_VAR 0 1
13049: NOT
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 263
13060: PUSH
13061: LD_INT 2
13063: NONEQUAL
13064: OR
13065: IFFALSE 13069
// exit ;
13067: GO 13385
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13069: LD_ADDR_VAR 0 6
13073: PUSH
13074: LD_INT 22
13076: PUSH
13077: LD_VAR 0 1
13081: PPUSH
13082: CALL_OW 255
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 36
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 34
13106: PUSH
13107: LD_INT 31
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ST_TO_ADDR
// if not tmp then
13128: LD_VAR 0 6
13132: NOT
13133: IFFALSE 13137
// exit ;
13135: GO 13385
// result := [ ] ;
13137: LD_ADDR_VAR 0 2
13141: PUSH
13142: EMPTY
13143: ST_TO_ADDR
// for i in tmp do
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: LD_VAR 0 6
13153: PUSH
13154: FOR_IN
13155: IFFALSE 13226
// begin t := UnitsInside ( i ) ;
13157: LD_ADDR_VAR 0 4
13161: PUSH
13162: LD_VAR 0 3
13166: PPUSH
13167: CALL_OW 313
13171: ST_TO_ADDR
// if t then
13172: LD_VAR 0 4
13176: IFFALSE 13224
// for j in t do
13178: LD_ADDR_VAR 0 7
13182: PUSH
13183: LD_VAR 0 4
13187: PUSH
13188: FOR_IN
13189: IFFALSE 13222
// result := Replace ( result , result + 1 , j ) ;
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_VAR 0 2
13200: PPUSH
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 1
13208: PLUS
13209: PPUSH
13210: LD_VAR 0 7
13214: PPUSH
13215: CALL_OW 1
13219: ST_TO_ADDR
13220: GO 13188
13222: POP
13223: POP
// end ;
13224: GO 13154
13226: POP
13227: POP
// if not result then
13228: LD_VAR 0 2
13232: NOT
13233: IFFALSE 13237
// exit ;
13235: GO 13385
// mech := result [ 1 ] ;
13237: LD_ADDR_VAR 0 5
13241: PUSH
13242: LD_VAR 0 2
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: ST_TO_ADDR
// if result > 1 then
13251: LD_VAR 0 2
13255: PUSH
13256: LD_INT 1
13258: GREATER
13259: IFFALSE 13371
// begin for i = 2 to result do
13261: LD_ADDR_VAR 0 3
13265: PUSH
13266: DOUBLE
13267: LD_INT 2
13269: DEC
13270: ST_TO_ADDR
13271: LD_VAR 0 2
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13369
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13279: LD_ADDR_VAR 0 4
13283: PUSH
13284: LD_VAR 0 2
13288: PUSH
13289: LD_VAR 0 3
13293: ARRAY
13294: PPUSH
13295: LD_INT 3
13297: PPUSH
13298: CALL_OW 259
13302: PUSH
13303: LD_VAR 0 2
13307: PUSH
13308: LD_VAR 0 3
13312: ARRAY
13313: PPUSH
13314: CALL_OW 432
13318: MINUS
13319: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13320: LD_VAR 0 4
13324: PUSH
13325: LD_VAR 0 5
13329: PPUSH
13330: LD_INT 3
13332: PPUSH
13333: CALL_OW 259
13337: PUSH
13338: LD_VAR 0 5
13342: PPUSH
13343: CALL_OW 432
13347: MINUS
13348: GREATEREQUAL
13349: IFFALSE 13367
// mech := result [ i ] ;
13351: LD_ADDR_VAR 0 5
13355: PUSH
13356: LD_VAR 0 2
13360: PUSH
13361: LD_VAR 0 3
13365: ARRAY
13366: ST_TO_ADDR
// end ;
13367: GO 13276
13369: POP
13370: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13371: LD_VAR 0 1
13375: PPUSH
13376: LD_VAR 0 5
13380: PPUSH
13381: CALL_OW 135
// end ;
13385: LD_VAR 0 2
13389: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13390: LD_INT 0
13392: PPUSH
13393: PPUSH
13394: PPUSH
13395: PPUSH
13396: PPUSH
13397: PPUSH
13398: PPUSH
13399: PPUSH
13400: PPUSH
13401: PPUSH
13402: PPUSH
13403: PPUSH
13404: PPUSH
// result := [ ] ;
13405: LD_ADDR_VAR 0 7
13409: PUSH
13410: EMPTY
13411: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13412: LD_VAR 0 1
13416: PPUSH
13417: CALL_OW 266
13421: PUSH
13422: LD_INT 0
13424: PUSH
13425: LD_INT 1
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: IN
13432: NOT
13433: IFFALSE 13437
// exit ;
13435: GO 15071
// if name then
13437: LD_VAR 0 3
13441: IFFALSE 13457
// SetBName ( base_dep , name ) ;
13443: LD_VAR 0 1
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: CALL_OW 500
// base := GetBase ( base_dep ) ;
13457: LD_ADDR_VAR 0 15
13461: PUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 274
13471: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13472: LD_ADDR_VAR 0 16
13476: PUSH
13477: LD_VAR 0 1
13481: PPUSH
13482: CALL_OW 255
13486: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13487: LD_ADDR_VAR 0 17
13491: PUSH
13492: LD_VAR 0 1
13496: PPUSH
13497: CALL_OW 248
13501: ST_TO_ADDR
// if sources then
13502: LD_VAR 0 5
13506: IFFALSE 13553
// for i = 1 to 3 do
13508: LD_ADDR_VAR 0 8
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_INT 3
13520: PUSH
13521: FOR_TO
13522: IFFALSE 13551
// AddResourceType ( base , i , sources [ i ] ) ;
13524: LD_VAR 0 15
13528: PPUSH
13529: LD_VAR 0 8
13533: PPUSH
13534: LD_VAR 0 5
13538: PUSH
13539: LD_VAR 0 8
13543: ARRAY
13544: PPUSH
13545: CALL_OW 276
13549: GO 13521
13551: POP
13552: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13553: LD_ADDR_VAR 0 18
13557: PUSH
13558: LD_VAR 0 15
13562: PPUSH
13563: LD_VAR 0 2
13567: PPUSH
13568: LD_INT 1
13570: PPUSH
13571: CALL 12814 0 3
13575: ST_TO_ADDR
// InitHc ;
13576: CALL_OW 19
// InitUc ;
13580: CALL_OW 18
// uc_side := side ;
13584: LD_ADDR_OWVAR 20
13588: PUSH
13589: LD_VAR 0 16
13593: ST_TO_ADDR
// uc_nation := nation ;
13594: LD_ADDR_OWVAR 21
13598: PUSH
13599: LD_VAR 0 17
13603: ST_TO_ADDR
// if buildings then
13604: LD_VAR 0 18
13608: IFFALSE 14930
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13610: LD_ADDR_VAR 0 19
13614: PUSH
13615: LD_VAR 0 18
13619: PPUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 29
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 30
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 72
13652: ST_TO_ADDR
// if tmp then
13653: LD_VAR 0 19
13657: IFFALSE 13705
// for i in tmp do
13659: LD_ADDR_VAR 0 8
13663: PUSH
13664: LD_VAR 0 19
13668: PUSH
13669: FOR_IN
13670: IFFALSE 13703
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13672: LD_VAR 0 8
13676: PPUSH
13677: CALL_OW 250
13681: PPUSH
13682: LD_VAR 0 8
13686: PPUSH
13687: CALL_OW 251
13691: PPUSH
13692: LD_VAR 0 16
13696: PPUSH
13697: CALL_OW 441
13701: GO 13669
13703: POP
13704: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13705: LD_VAR 0 18
13709: PPUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 32
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 30
13725: PUSH
13726: LD_INT 33
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 72
13742: IFFALSE 13830
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13744: LD_ADDR_VAR 0 8
13748: PUSH
13749: LD_VAR 0 18
13753: PPUSH
13754: LD_INT 2
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_INT 32
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 30
13769: PUSH
13770: LD_INT 33
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 72
13786: PUSH
13787: FOR_IN
13788: IFFALSE 13828
// begin if not GetBWeapon ( i ) then
13790: LD_VAR 0 8
13794: PPUSH
13795: CALL_OW 269
13799: NOT
13800: IFFALSE 13826
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13802: LD_VAR 0 8
13806: PPUSH
13807: LD_VAR 0 8
13811: PPUSH
13812: LD_VAR 0 2
13816: PPUSH
13817: CALL 15076 0 2
13821: PPUSH
13822: CALL_OW 431
// end ;
13826: GO 13787
13828: POP
13829: POP
// end ; for i = 1 to personel do
13830: LD_ADDR_VAR 0 8
13834: PUSH
13835: DOUBLE
13836: LD_INT 1
13838: DEC
13839: ST_TO_ADDR
13840: LD_VAR 0 6
13844: PUSH
13845: FOR_TO
13846: IFFALSE 14910
// begin if i > 4 then
13848: LD_VAR 0 8
13852: PUSH
13853: LD_INT 4
13855: GREATER
13856: IFFALSE 13860
// break ;
13858: GO 14910
// case i of 1 :
13860: LD_VAR 0 8
13864: PUSH
13865: LD_INT 1
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 13953
13873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13874: LD_ADDR_VAR 0 12
13878: PUSH
13879: LD_VAR 0 18
13883: PPUSH
13884: LD_INT 22
13886: PUSH
13887: LD_VAR 0 16
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 58
13898: PUSH
13899: EMPTY
13900: LIST
13901: PUSH
13902: LD_INT 2
13904: PUSH
13905: LD_INT 30
13907: PUSH
13908: LD_INT 32
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 30
13917: PUSH
13918: LD_INT 4
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 30
13927: PUSH
13928: LD_INT 5
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 72
13950: ST_TO_ADDR
13951: GO 14175
13953: LD_INT 2
13955: DOUBLE
13956: EQUAL
13957: IFTRUE 13961
13959: GO 14023
13961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13962: LD_ADDR_VAR 0 12
13966: PUSH
13967: LD_VAR 0 18
13971: PPUSH
13972: LD_INT 22
13974: PUSH
13975: LD_VAR 0 16
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: LD_INT 30
13989: PUSH
13990: LD_INT 0
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 30
13999: PUSH
14000: LD_INT 1
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PPUSH
14016: CALL_OW 72
14020: ST_TO_ADDR
14021: GO 14175
14023: LD_INT 3
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14093
14031: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14032: LD_ADDR_VAR 0 12
14036: PUSH
14037: LD_VAR 0 18
14041: PPUSH
14042: LD_INT 22
14044: PUSH
14045: LD_VAR 0 16
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: LD_INT 30
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 72
14090: ST_TO_ADDR
14091: GO 14175
14093: LD_INT 4
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14174
14101: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14102: LD_ADDR_VAR 0 12
14106: PUSH
14107: LD_VAR 0 18
14111: PPUSH
14112: LD_INT 22
14114: PUSH
14115: LD_VAR 0 16
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: LD_INT 30
14129: PUSH
14130: LD_INT 6
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 30
14139: PUSH
14140: LD_INT 7
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 30
14149: PUSH
14150: LD_INT 8
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PPUSH
14167: CALL_OW 72
14171: ST_TO_ADDR
14172: GO 14175
14174: POP
// if i = 1 then
14175: LD_VAR 0 8
14179: PUSH
14180: LD_INT 1
14182: EQUAL
14183: IFFALSE 14294
// begin tmp := [ ] ;
14185: LD_ADDR_VAR 0 19
14189: PUSH
14190: EMPTY
14191: ST_TO_ADDR
// for j in f do
14192: LD_ADDR_VAR 0 9
14196: PUSH
14197: LD_VAR 0 12
14201: PUSH
14202: FOR_IN
14203: IFFALSE 14276
// if GetBType ( j ) = b_bunker then
14205: LD_VAR 0 9
14209: PPUSH
14210: CALL_OW 266
14214: PUSH
14215: LD_INT 32
14217: EQUAL
14218: IFFALSE 14245
// tmp := Insert ( tmp , 1 , j ) else
14220: LD_ADDR_VAR 0 19
14224: PUSH
14225: LD_VAR 0 19
14229: PPUSH
14230: LD_INT 1
14232: PPUSH
14233: LD_VAR 0 9
14237: PPUSH
14238: CALL_OW 2
14242: ST_TO_ADDR
14243: GO 14274
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14245: LD_ADDR_VAR 0 19
14249: PUSH
14250: LD_VAR 0 19
14254: PPUSH
14255: LD_VAR 0 19
14259: PUSH
14260: LD_INT 1
14262: PLUS
14263: PPUSH
14264: LD_VAR 0 9
14268: PPUSH
14269: CALL_OW 2
14273: ST_TO_ADDR
14274: GO 14202
14276: POP
14277: POP
// if tmp then
14278: LD_VAR 0 19
14282: IFFALSE 14294
// f := tmp ;
14284: LD_ADDR_VAR 0 12
14288: PUSH
14289: LD_VAR 0 19
14293: ST_TO_ADDR
// end ; x := personel [ i ] ;
14294: LD_ADDR_VAR 0 13
14298: PUSH
14299: LD_VAR 0 6
14303: PUSH
14304: LD_VAR 0 8
14308: ARRAY
14309: ST_TO_ADDR
// if x = - 1 then
14310: LD_VAR 0 13
14314: PUSH
14315: LD_INT 1
14317: NEG
14318: EQUAL
14319: IFFALSE 14528
// begin for j in f do
14321: LD_ADDR_VAR 0 9
14325: PUSH
14326: LD_VAR 0 12
14330: PUSH
14331: FOR_IN
14332: IFFALSE 14524
// repeat InitHc ;
14334: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14338: LD_VAR 0 9
14342: PPUSH
14343: CALL_OW 266
14347: PUSH
14348: LD_INT 5
14350: EQUAL
14351: IFFALSE 14421
// begin if UnitsInside ( j ) < 3 then
14353: LD_VAR 0 9
14357: PPUSH
14358: CALL_OW 313
14362: PUSH
14363: LD_INT 3
14365: LESS
14366: IFFALSE 14402
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14368: LD_INT 0
14370: PPUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: LD_INT 9
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: PUSH
14385: LD_VAR 0 17
14389: ARRAY
14390: PPUSH
14391: LD_VAR 0 4
14395: PPUSH
14396: CALL_OW 380
14400: GO 14419
// PrepareHuman ( false , i , skill ) ;
14402: LD_INT 0
14404: PPUSH
14405: LD_VAR 0 8
14409: PPUSH
14410: LD_VAR 0 4
14414: PPUSH
14415: CALL_OW 380
// end else
14419: GO 14438
// PrepareHuman ( false , i , skill ) ;
14421: LD_INT 0
14423: PPUSH
14424: LD_VAR 0 8
14428: PPUSH
14429: LD_VAR 0 4
14433: PPUSH
14434: CALL_OW 380
// un := CreateHuman ;
14438: LD_ADDR_VAR 0 14
14442: PUSH
14443: CALL_OW 44
14447: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14448: LD_ADDR_VAR 0 7
14452: PUSH
14453: LD_VAR 0 7
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: LD_VAR 0 14
14465: PPUSH
14466: CALL_OW 2
14470: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14471: LD_VAR 0 14
14475: PPUSH
14476: LD_VAR 0 9
14480: PPUSH
14481: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14485: LD_VAR 0 9
14489: PPUSH
14490: CALL_OW 313
14494: PUSH
14495: LD_INT 6
14497: EQUAL
14498: PUSH
14499: LD_VAR 0 9
14503: PPUSH
14504: CALL_OW 266
14508: PUSH
14509: LD_INT 32
14511: PUSH
14512: LD_INT 31
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: IN
14519: OR
14520: IFFALSE 14334
14522: GO 14331
14524: POP
14525: POP
// end else
14526: GO 14908
// for j = 1 to x do
14528: LD_ADDR_VAR 0 9
14532: PUSH
14533: DOUBLE
14534: LD_INT 1
14536: DEC
14537: ST_TO_ADDR
14538: LD_VAR 0 13
14542: PUSH
14543: FOR_TO
14544: IFFALSE 14906
// begin InitHc ;
14546: CALL_OW 19
// if not f then
14550: LD_VAR 0 12
14554: NOT
14555: IFFALSE 14644
// begin PrepareHuman ( false , i , skill ) ;
14557: LD_INT 0
14559: PPUSH
14560: LD_VAR 0 8
14564: PPUSH
14565: LD_VAR 0 4
14569: PPUSH
14570: CALL_OW 380
// un := CreateHuman ;
14574: LD_ADDR_VAR 0 14
14578: PUSH
14579: CALL_OW 44
14583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14584: LD_ADDR_VAR 0 7
14588: PUSH
14589: LD_VAR 0 7
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: LD_VAR 0 14
14601: PPUSH
14602: CALL_OW 2
14606: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14607: LD_VAR 0 14
14611: PPUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 250
14621: PPUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 251
14631: PPUSH
14632: LD_INT 10
14634: PPUSH
14635: LD_INT 0
14637: PPUSH
14638: CALL_OW 50
// continue ;
14642: GO 14543
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14644: LD_VAR 0 12
14648: PUSH
14649: LD_INT 1
14651: ARRAY
14652: PPUSH
14653: CALL_OW 313
14657: PUSH
14658: LD_VAR 0 12
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: PPUSH
14667: CALL_OW 266
14671: PUSH
14672: LD_INT 32
14674: PUSH
14675: LD_INT 31
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: IN
14682: AND
14683: PUSH
14684: LD_VAR 0 12
14688: PUSH
14689: LD_INT 1
14691: ARRAY
14692: PPUSH
14693: CALL_OW 313
14697: PUSH
14698: LD_INT 6
14700: EQUAL
14701: OR
14702: IFFALSE 14722
// f := Delete ( f , 1 ) ;
14704: LD_ADDR_VAR 0 12
14708: PUSH
14709: LD_VAR 0 12
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 3
14721: ST_TO_ADDR
// if not f then
14722: LD_VAR 0 12
14726: NOT
14727: IFFALSE 14745
// begin x := x + 2 ;
14729: LD_ADDR_VAR 0 13
14733: PUSH
14734: LD_VAR 0 13
14738: PUSH
14739: LD_INT 2
14741: PLUS
14742: ST_TO_ADDR
// continue ;
14743: GO 14543
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14745: LD_VAR 0 12
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: PPUSH
14754: CALL_OW 266
14758: PUSH
14759: LD_INT 5
14761: EQUAL
14762: IFFALSE 14836
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14764: LD_VAR 0 12
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: CALL_OW 313
14777: PUSH
14778: LD_INT 3
14780: LESS
14781: IFFALSE 14817
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14783: LD_INT 0
14785: PPUSH
14786: LD_INT 5
14788: PUSH
14789: LD_INT 8
14791: PUSH
14792: LD_INT 9
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: PUSH
14800: LD_VAR 0 17
14804: ARRAY
14805: PPUSH
14806: LD_VAR 0 4
14810: PPUSH
14811: CALL_OW 380
14815: GO 14834
// PrepareHuman ( false , i , skill ) ;
14817: LD_INT 0
14819: PPUSH
14820: LD_VAR 0 8
14824: PPUSH
14825: LD_VAR 0 4
14829: PPUSH
14830: CALL_OW 380
// end else
14834: GO 14853
// PrepareHuman ( false , i , skill ) ;
14836: LD_INT 0
14838: PPUSH
14839: LD_VAR 0 8
14843: PPUSH
14844: LD_VAR 0 4
14848: PPUSH
14849: CALL_OW 380
// un := CreateHuman ;
14853: LD_ADDR_VAR 0 14
14857: PUSH
14858: CALL_OW 44
14862: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14863: LD_ADDR_VAR 0 7
14867: PUSH
14868: LD_VAR 0 7
14872: PPUSH
14873: LD_INT 1
14875: PPUSH
14876: LD_VAR 0 14
14880: PPUSH
14881: CALL_OW 2
14885: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14886: LD_VAR 0 14
14890: PPUSH
14891: LD_VAR 0 12
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 52
// end ;
14904: GO 14543
14906: POP
14907: POP
// end ;
14908: GO 13845
14910: POP
14911: POP
// result := result ^ buildings ;
14912: LD_ADDR_VAR 0 7
14916: PUSH
14917: LD_VAR 0 7
14921: PUSH
14922: LD_VAR 0 18
14926: ADD
14927: ST_TO_ADDR
// end else
14928: GO 15071
// begin for i = 1 to personel do
14930: LD_ADDR_VAR 0 8
14934: PUSH
14935: DOUBLE
14936: LD_INT 1
14938: DEC
14939: ST_TO_ADDR
14940: LD_VAR 0 6
14944: PUSH
14945: FOR_TO
14946: IFFALSE 15069
// begin if i > 4 then
14948: LD_VAR 0 8
14952: PUSH
14953: LD_INT 4
14955: GREATER
14956: IFFALSE 14960
// break ;
14958: GO 15069
// x := personel [ i ] ;
14960: LD_ADDR_VAR 0 13
14964: PUSH
14965: LD_VAR 0 6
14969: PUSH
14970: LD_VAR 0 8
14974: ARRAY
14975: ST_TO_ADDR
// if x = - 1 then
14976: LD_VAR 0 13
14980: PUSH
14981: LD_INT 1
14983: NEG
14984: EQUAL
14985: IFFALSE 14989
// continue ;
14987: GO 14945
// PrepareHuman ( false , i , skill ) ;
14989: LD_INT 0
14991: PPUSH
14992: LD_VAR 0 8
14996: PPUSH
14997: LD_VAR 0 4
15001: PPUSH
15002: CALL_OW 380
// un := CreateHuman ;
15006: LD_ADDR_VAR 0 14
15010: PUSH
15011: CALL_OW 44
15015: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15016: LD_VAR 0 14
15020: PPUSH
15021: LD_VAR 0 1
15025: PPUSH
15026: CALL_OW 250
15030: PPUSH
15031: LD_VAR 0 1
15035: PPUSH
15036: CALL_OW 251
15040: PPUSH
15041: LD_INT 10
15043: PPUSH
15044: LD_INT 0
15046: PPUSH
15047: CALL_OW 50
// result := result ^ un ;
15051: LD_ADDR_VAR 0 7
15055: PUSH
15056: LD_VAR 0 7
15060: PUSH
15061: LD_VAR 0 14
15065: ADD
15066: ST_TO_ADDR
// end ;
15067: GO 14945
15069: POP
15070: POP
// end ; end ;
15071: LD_VAR 0 7
15075: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
// result := false ;
15094: LD_ADDR_VAR 0 3
15098: PUSH
15099: LD_INT 0
15101: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15102: LD_VAR 0 1
15106: NOT
15107: PUSH
15108: LD_VAR 0 1
15112: PPUSH
15113: CALL_OW 266
15117: PUSH
15118: LD_INT 32
15120: PUSH
15121: LD_INT 33
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: IN
15128: NOT
15129: OR
15130: IFFALSE 15134
// exit ;
15132: GO 16243
// nat := GetNation ( tower ) ;
15134: LD_ADDR_VAR 0 12
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 248
15148: ST_TO_ADDR
// side := GetSide ( tower ) ;
15149: LD_ADDR_VAR 0 16
15153: PUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 255
15163: ST_TO_ADDR
// x := GetX ( tower ) ;
15164: LD_ADDR_VAR 0 10
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 250
15178: ST_TO_ADDR
// y := GetY ( tower ) ;
15179: LD_ADDR_VAR 0 11
15183: PUSH
15184: LD_VAR 0 1
15188: PPUSH
15189: CALL_OW 251
15193: ST_TO_ADDR
// if not x or not y then
15194: LD_VAR 0 10
15198: NOT
15199: PUSH
15200: LD_VAR 0 11
15204: NOT
15205: OR
15206: IFFALSE 15210
// exit ;
15208: GO 16243
// weapon := 0 ;
15210: LD_ADDR_VAR 0 18
15214: PUSH
15215: LD_INT 0
15217: ST_TO_ADDR
// fac_list := [ ] ;
15218: LD_ADDR_VAR 0 17
15222: PUSH
15223: EMPTY
15224: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15225: LD_ADDR_VAR 0 6
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 274
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: LD_INT 0
15247: PPUSH
15248: CALL 12814 0 3
15252: PPUSH
15253: LD_INT 30
15255: PUSH
15256: LD_INT 3
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PPUSH
15263: CALL_OW 72
15267: ST_TO_ADDR
// if not factories then
15268: LD_VAR 0 6
15272: NOT
15273: IFFALSE 15277
// exit ;
15275: GO 16243
// for i in factories do
15277: LD_ADDR_VAR 0 8
15281: PUSH
15282: LD_VAR 0 6
15286: PUSH
15287: FOR_IN
15288: IFFALSE 15313
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15290: LD_ADDR_VAR 0 17
15294: PUSH
15295: LD_VAR 0 17
15299: PUSH
15300: LD_VAR 0 8
15304: PPUSH
15305: CALL_OW 478
15309: UNION
15310: ST_TO_ADDR
15311: GO 15287
15313: POP
15314: POP
// if not fac_list then
15315: LD_VAR 0 17
15319: NOT
15320: IFFALSE 15324
// exit ;
15322: GO 16243
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 4
15331: PUSH
15332: LD_INT 5
15334: PUSH
15335: LD_INT 9
15337: PUSH
15338: LD_INT 10
15340: PUSH
15341: LD_INT 6
15343: PUSH
15344: LD_INT 7
15346: PUSH
15347: LD_INT 11
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 27
15361: PUSH
15362: LD_INT 28
15364: PUSH
15365: LD_INT 26
15367: PUSH
15368: LD_INT 30
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 43
15379: PUSH
15380: LD_INT 44
15382: PUSH
15383: LD_INT 46
15385: PUSH
15386: LD_INT 45
15388: PUSH
15389: LD_INT 47
15391: PUSH
15392: LD_INT 49
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 12
15412: ARRAY
15413: ST_TO_ADDR
// list := list isect fac_list ;
15414: LD_ADDR_VAR 0 5
15418: PUSH
15419: LD_VAR 0 5
15423: PUSH
15424: LD_VAR 0 17
15428: ISECT
15429: ST_TO_ADDR
// if not list then
15430: LD_VAR 0 5
15434: NOT
15435: IFFALSE 15439
// exit ;
15437: GO 16243
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15439: LD_VAR 0 12
15443: PUSH
15444: LD_INT 3
15446: EQUAL
15447: PUSH
15448: LD_INT 49
15450: PUSH
15451: LD_VAR 0 5
15455: IN
15456: AND
15457: PUSH
15458: LD_INT 31
15460: PPUSH
15461: LD_VAR 0 16
15465: PPUSH
15466: CALL_OW 321
15470: PUSH
15471: LD_INT 2
15473: EQUAL
15474: AND
15475: IFFALSE 15535
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15477: LD_INT 22
15479: PUSH
15480: LD_VAR 0 16
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 35
15491: PUSH
15492: LD_INT 49
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 91
15501: PUSH
15502: LD_VAR 0 1
15506: PUSH
15507: LD_INT 10
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: NOT
15525: IFFALSE 15535
// weapon := ru_time_lapser ;
15527: LD_ADDR_VAR 0 18
15531: PUSH
15532: LD_INT 49
15534: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15535: LD_VAR 0 12
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: IN
15550: PUSH
15551: LD_INT 11
15553: PUSH
15554: LD_VAR 0 5
15558: IN
15559: PUSH
15560: LD_INT 30
15562: PUSH
15563: LD_VAR 0 5
15567: IN
15568: OR
15569: AND
15570: PUSH
15571: LD_INT 6
15573: PPUSH
15574: LD_VAR 0 16
15578: PPUSH
15579: CALL_OW 321
15583: PUSH
15584: LD_INT 2
15586: EQUAL
15587: AND
15588: IFFALSE 15753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15590: LD_INT 22
15592: PUSH
15593: LD_VAR 0 16
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 2
15604: PUSH
15605: LD_INT 35
15607: PUSH
15608: LD_INT 11
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 35
15617: PUSH
15618: LD_INT 30
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 91
15632: PUSH
15633: LD_VAR 0 1
15637: PUSH
15638: LD_INT 18
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: PPUSH
15651: CALL_OW 69
15655: NOT
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_VAR 0 16
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: LD_INT 30
15674: PUSH
15675: LD_INT 32
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 30
15684: PUSH
15685: LD_INT 33
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 91
15699: PUSH
15700: LD_VAR 0 1
15704: PUSH
15705: LD_INT 12
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: LIST
15717: PUSH
15718: EMPTY
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: LD_INT 2
15728: GREATER
15729: AND
15730: IFFALSE 15753
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15732: LD_ADDR_VAR 0 18
15736: PUSH
15737: LD_INT 11
15739: PUSH
15740: LD_INT 30
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_VAR 0 12
15751: ARRAY
15752: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15753: LD_VAR 0 18
15757: NOT
15758: PUSH
15759: LD_INT 40
15761: PPUSH
15762: LD_VAR 0 16
15766: PPUSH
15767: CALL_OW 321
15771: PUSH
15772: LD_INT 2
15774: EQUAL
15775: AND
15776: PUSH
15777: LD_INT 7
15779: PUSH
15780: LD_VAR 0 5
15784: IN
15785: PUSH
15786: LD_INT 28
15788: PUSH
15789: LD_VAR 0 5
15793: IN
15794: OR
15795: PUSH
15796: LD_INT 45
15798: PUSH
15799: LD_VAR 0 5
15803: IN
15804: OR
15805: AND
15806: IFFALSE 16060
// begin hex := GetHexInfo ( x , y ) ;
15808: LD_ADDR_VAR 0 4
15812: PUSH
15813: LD_VAR 0 10
15817: PPUSH
15818: LD_VAR 0 11
15822: PPUSH
15823: CALL_OW 546
15827: ST_TO_ADDR
// if hex [ 1 ] then
15828: LD_VAR 0 4
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: IFFALSE 15840
// exit ;
15838: GO 16243
// height := hex [ 2 ] ;
15840: LD_ADDR_VAR 0 15
15844: PUSH
15845: LD_VAR 0 4
15849: PUSH
15850: LD_INT 2
15852: ARRAY
15853: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15854: LD_ADDR_VAR 0 14
15858: PUSH
15859: LD_INT 0
15861: PUSH
15862: LD_INT 2
15864: PUSH
15865: LD_INT 3
15867: PUSH
15868: LD_INT 5
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: ST_TO_ADDR
// for i in tmp do
15877: LD_ADDR_VAR 0 8
15881: PUSH
15882: LD_VAR 0 14
15886: PUSH
15887: FOR_IN
15888: IFFALSE 16058
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15890: LD_ADDR_VAR 0 9
15894: PUSH
15895: LD_VAR 0 10
15899: PPUSH
15900: LD_VAR 0 8
15904: PPUSH
15905: LD_INT 5
15907: PPUSH
15908: CALL_OW 272
15912: PUSH
15913: LD_VAR 0 11
15917: PPUSH
15918: LD_VAR 0 8
15922: PPUSH
15923: LD_INT 5
15925: PPUSH
15926: CALL_OW 273
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15935: LD_VAR 0 9
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PPUSH
15944: LD_VAR 0 9
15948: PUSH
15949: LD_INT 2
15951: ARRAY
15952: PPUSH
15953: CALL_OW 488
15957: IFFALSE 16056
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 9
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: PPUSH
15973: LD_VAR 0 9
15977: PUSH
15978: LD_INT 2
15980: ARRAY
15981: PPUSH
15982: CALL_OW 546
15986: ST_TO_ADDR
// if hex [ 1 ] then
15987: LD_VAR 0 4
15991: PUSH
15992: LD_INT 1
15994: ARRAY
15995: IFFALSE 15999
// continue ;
15997: GO 15887
// h := hex [ 2 ] ;
15999: LD_ADDR_VAR 0 13
16003: PUSH
16004: LD_VAR 0 4
16008: PUSH
16009: LD_INT 2
16011: ARRAY
16012: ST_TO_ADDR
// if h + 7 < height then
16013: LD_VAR 0 13
16017: PUSH
16018: LD_INT 7
16020: PLUS
16021: PUSH
16022: LD_VAR 0 15
16026: LESS
16027: IFFALSE 16056
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16029: LD_ADDR_VAR 0 18
16033: PUSH
16034: LD_INT 7
16036: PUSH
16037: LD_INT 28
16039: PUSH
16040: LD_INT 45
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: PUSH
16048: LD_VAR 0 12
16052: ARRAY
16053: ST_TO_ADDR
// break ;
16054: GO 16058
// end ; end ; end ;
16056: GO 15887
16058: POP
16059: POP
// end ; if not weapon then
16060: LD_VAR 0 18
16064: NOT
16065: IFFALSE 16125
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16067: LD_ADDR_VAR 0 5
16071: PUSH
16072: LD_VAR 0 5
16076: PUSH
16077: LD_INT 11
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 49
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: DIFF
16091: ST_TO_ADDR
// if not list then
16092: LD_VAR 0 5
16096: NOT
16097: IFFALSE 16101
// exit ;
16099: GO 16243
// weapon := list [ rand ( 1 , list ) ] ;
16101: LD_ADDR_VAR 0 18
16105: PUSH
16106: LD_VAR 0 5
16110: PUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_VAR 0 5
16118: PPUSH
16119: CALL_OW 12
16123: ARRAY
16124: ST_TO_ADDR
// end ; if weapon then
16125: LD_VAR 0 18
16129: IFFALSE 16243
// begin tmp := CostOfWeapon ( weapon ) ;
16131: LD_ADDR_VAR 0 14
16135: PUSH
16136: LD_VAR 0 18
16140: PPUSH
16141: CALL_OW 451
16145: ST_TO_ADDR
// j := GetBase ( tower ) ;
16146: LD_ADDR_VAR 0 9
16150: PUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 274
16160: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16161: LD_VAR 0 9
16165: PPUSH
16166: LD_INT 1
16168: PPUSH
16169: CALL_OW 275
16173: PUSH
16174: LD_VAR 0 14
16178: PUSH
16179: LD_INT 1
16181: ARRAY
16182: GREATEREQUAL
16183: PUSH
16184: LD_VAR 0 9
16188: PPUSH
16189: LD_INT 2
16191: PPUSH
16192: CALL_OW 275
16196: PUSH
16197: LD_VAR 0 14
16201: PUSH
16202: LD_INT 2
16204: ARRAY
16205: GREATEREQUAL
16206: AND
16207: PUSH
16208: LD_VAR 0 9
16212: PPUSH
16213: LD_INT 3
16215: PPUSH
16216: CALL_OW 275
16220: PUSH
16221: LD_VAR 0 14
16225: PUSH
16226: LD_INT 3
16228: ARRAY
16229: GREATEREQUAL
16230: AND
16231: IFFALSE 16243
// result := weapon ;
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_VAR 0 18
16242: ST_TO_ADDR
// end ; end ;
16243: LD_VAR 0 3
16247: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16248: LD_INT 0
16250: PPUSH
16251: PPUSH
// result := true ;
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// if array1 = array2 then
16260: LD_VAR 0 1
16264: PUSH
16265: LD_VAR 0 2
16269: EQUAL
16270: IFFALSE 16330
// begin for i = 1 to array1 do
16272: LD_ADDR_VAR 0 4
16276: PUSH
16277: DOUBLE
16278: LD_INT 1
16280: DEC
16281: ST_TO_ADDR
16282: LD_VAR 0 1
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16326
// if array1 [ i ] <> array2 [ i ] then
16290: LD_VAR 0 1
16294: PUSH
16295: LD_VAR 0 4
16299: ARRAY
16300: PUSH
16301: LD_VAR 0 2
16305: PUSH
16306: LD_VAR 0 4
16310: ARRAY
16311: NONEQUAL
16312: IFFALSE 16324
// begin result := false ;
16314: LD_ADDR_VAR 0 3
16318: PUSH
16319: LD_INT 0
16321: ST_TO_ADDR
// break ;
16322: GO 16326
// end ;
16324: GO 16287
16326: POP
16327: POP
// end else
16328: GO 16338
// result := false ;
16330: LD_ADDR_VAR 0 3
16334: PUSH
16335: LD_INT 0
16337: ST_TO_ADDR
// end ;
16338: LD_VAR 0 3
16342: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
// if not array1 or not array2 then
16347: LD_VAR 0 1
16351: NOT
16352: PUSH
16353: LD_VAR 0 2
16357: NOT
16358: OR
16359: IFFALSE 16363
// exit ;
16361: GO 16427
// result := true ;
16363: LD_ADDR_VAR 0 3
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
// for i = 1 to array1 do
16371: LD_ADDR_VAR 0 4
16375: PUSH
16376: DOUBLE
16377: LD_INT 1
16379: DEC
16380: ST_TO_ADDR
16381: LD_VAR 0 1
16385: PUSH
16386: FOR_TO
16387: IFFALSE 16425
// if array1 [ i ] <> array2 [ i ] then
16389: LD_VAR 0 1
16393: PUSH
16394: LD_VAR 0 4
16398: ARRAY
16399: PUSH
16400: LD_VAR 0 2
16404: PUSH
16405: LD_VAR 0 4
16409: ARRAY
16410: NONEQUAL
16411: IFFALSE 16423
// begin result := false ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// break ;
16421: GO 16425
// end ;
16423: GO 16386
16425: POP
16426: POP
// end ;
16427: LD_VAR 0 3
16431: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16432: LD_INT 0
16434: PPUSH
16435: PPUSH
16436: PPUSH
// pom := GetBase ( fac ) ;
16437: LD_ADDR_VAR 0 5
16441: PUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 274
16451: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16452: LD_ADDR_VAR 0 4
16456: PUSH
16457: LD_VAR 0 2
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PPUSH
16466: LD_VAR 0 2
16470: PUSH
16471: LD_INT 2
16473: ARRAY
16474: PPUSH
16475: LD_VAR 0 2
16479: PUSH
16480: LD_INT 3
16482: ARRAY
16483: PPUSH
16484: LD_VAR 0 2
16488: PUSH
16489: LD_INT 4
16491: ARRAY
16492: PPUSH
16493: CALL_OW 449
16497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_VAR 0 5
16507: PPUSH
16508: LD_INT 1
16510: PPUSH
16511: CALL_OW 275
16515: PUSH
16516: LD_VAR 0 4
16520: PUSH
16521: LD_INT 1
16523: ARRAY
16524: GREATEREQUAL
16525: PUSH
16526: LD_VAR 0 5
16530: PPUSH
16531: LD_INT 2
16533: PPUSH
16534: CALL_OW 275
16538: PUSH
16539: LD_VAR 0 4
16543: PUSH
16544: LD_INT 2
16546: ARRAY
16547: GREATEREQUAL
16548: AND
16549: PUSH
16550: LD_VAR 0 5
16554: PPUSH
16555: LD_INT 3
16557: PPUSH
16558: CALL_OW 275
16562: PUSH
16563: LD_VAR 0 4
16567: PUSH
16568: LD_INT 3
16570: ARRAY
16571: GREATEREQUAL
16572: AND
16573: ST_TO_ADDR
// end ;
16574: LD_VAR 0 3
16578: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16579: LD_INT 0
16581: PPUSH
16582: PPUSH
16583: PPUSH
16584: PPUSH
// pom := GetBase ( building ) ;
16585: LD_ADDR_VAR 0 3
16589: PUSH
16590: LD_VAR 0 1
16594: PPUSH
16595: CALL_OW 274
16599: ST_TO_ADDR
// if not pom then
16600: LD_VAR 0 3
16604: NOT
16605: IFFALSE 16609
// exit ;
16607: GO 16779
// btype := GetBType ( building ) ;
16609: LD_ADDR_VAR 0 5
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: ST_TO_ADDR
// if btype = b_armoury then
16624: LD_VAR 0 5
16628: PUSH
16629: LD_INT 4
16631: EQUAL
16632: IFFALSE 16642
// btype := b_barracks ;
16634: LD_ADDR_VAR 0 5
16638: PUSH
16639: LD_INT 5
16641: ST_TO_ADDR
// if btype = b_depot then
16642: LD_VAR 0 5
16646: PUSH
16647: LD_INT 0
16649: EQUAL
16650: IFFALSE 16660
// btype := b_warehouse ;
16652: LD_ADDR_VAR 0 5
16656: PUSH
16657: LD_INT 1
16659: ST_TO_ADDR
// if btype = b_workshop then
16660: LD_VAR 0 5
16664: PUSH
16665: LD_INT 2
16667: EQUAL
16668: IFFALSE 16678
// btype := b_factory ;
16670: LD_ADDR_VAR 0 5
16674: PUSH
16675: LD_INT 3
16677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16678: LD_ADDR_VAR 0 4
16682: PUSH
16683: LD_VAR 0 5
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 248
16697: PPUSH
16698: CALL_OW 450
16702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16703: LD_ADDR_VAR 0 2
16707: PUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: LD_INT 1
16715: PPUSH
16716: CALL_OW 275
16720: PUSH
16721: LD_VAR 0 4
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: GREATEREQUAL
16730: PUSH
16731: LD_VAR 0 3
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 275
16743: PUSH
16744: LD_VAR 0 4
16748: PUSH
16749: LD_INT 2
16751: ARRAY
16752: GREATEREQUAL
16753: AND
16754: PUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 3
16762: PPUSH
16763: CALL_OW 275
16767: PUSH
16768: LD_VAR 0 4
16772: PUSH
16773: LD_INT 3
16775: ARRAY
16776: GREATEREQUAL
16777: AND
16778: ST_TO_ADDR
// end ;
16779: LD_VAR 0 2
16783: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
// pom := GetBase ( building ) ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 274
16803: ST_TO_ADDR
// if not pom then
16804: LD_VAR 0 4
16808: NOT
16809: IFFALSE 16813
// exit ;
16811: GO 16914
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16813: LD_ADDR_VAR 0 5
16817: PUSH
16818: LD_VAR 0 2
16822: PPUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 248
16832: PPUSH
16833: CALL_OW 450
16837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16838: LD_ADDR_VAR 0 3
16842: PUSH
16843: LD_VAR 0 4
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 275
16855: PUSH
16856: LD_VAR 0 5
16860: PUSH
16861: LD_INT 1
16863: ARRAY
16864: GREATEREQUAL
16865: PUSH
16866: LD_VAR 0 4
16870: PPUSH
16871: LD_INT 2
16873: PPUSH
16874: CALL_OW 275
16878: PUSH
16879: LD_VAR 0 5
16883: PUSH
16884: LD_INT 2
16886: ARRAY
16887: GREATEREQUAL
16888: AND
16889: PUSH
16890: LD_VAR 0 4
16894: PPUSH
16895: LD_INT 3
16897: PPUSH
16898: CALL_OW 275
16902: PUSH
16903: LD_VAR 0 5
16907: PUSH
16908: LD_INT 3
16910: ARRAY
16911: GREATEREQUAL
16912: AND
16913: ST_TO_ADDR
// end ;
16914: LD_VAR 0 3
16918: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16919: LD_INT 0
16921: PPUSH
16922: PPUSH
16923: PPUSH
16924: PPUSH
16925: PPUSH
16926: PPUSH
16927: PPUSH
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
// result := false ;
16932: LD_ADDR_VAR 0 8
16936: PUSH
16937: LD_INT 0
16939: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16940: LD_VAR 0 5
16944: NOT
16945: PUSH
16946: LD_VAR 0 1
16950: NOT
16951: OR
16952: PUSH
16953: LD_VAR 0 2
16957: NOT
16958: OR
16959: PUSH
16960: LD_VAR 0 3
16964: NOT
16965: OR
16966: IFFALSE 16970
// exit ;
16968: GO 17784
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16970: LD_ADDR_VAR 0 14
16974: PUSH
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_VAR 0 2
16984: PPUSH
16985: LD_VAR 0 3
16989: PPUSH
16990: LD_VAR 0 4
16994: PPUSH
16995: LD_VAR 0 5
16999: PUSH
17000: LD_INT 1
17002: ARRAY
17003: PPUSH
17004: CALL_OW 248
17008: PPUSH
17009: LD_INT 0
17011: PPUSH
17012: CALL 19037 0 6
17016: ST_TO_ADDR
// if not hexes then
17017: LD_VAR 0 14
17021: NOT
17022: IFFALSE 17026
// exit ;
17024: GO 17784
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17026: LD_ADDR_VAR 0 17
17030: PUSH
17031: LD_VAR 0 5
17035: PPUSH
17036: LD_INT 22
17038: PUSH
17039: LD_VAR 0 13
17043: PPUSH
17044: CALL_OW 255
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: LD_INT 30
17058: PUSH
17059: LD_INT 0
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 72
17089: ST_TO_ADDR
// for i = 1 to hexes do
17090: LD_ADDR_VAR 0 9
17094: PUSH
17095: DOUBLE
17096: LD_INT 1
17098: DEC
17099: ST_TO_ADDR
17100: LD_VAR 0 14
17104: PUSH
17105: FOR_TO
17106: IFFALSE 17782
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17108: LD_ADDR_VAR 0 13
17112: PUSH
17113: LD_VAR 0 14
17117: PUSH
17118: LD_VAR 0 9
17122: ARRAY
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: LD_VAR 0 14
17132: PUSH
17133: LD_VAR 0 9
17137: ARRAY
17138: PUSH
17139: LD_INT 2
17141: ARRAY
17142: PPUSH
17143: CALL_OW 428
17147: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17148: LD_VAR 0 14
17152: PUSH
17153: LD_VAR 0 9
17157: ARRAY
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PPUSH
17163: LD_VAR 0 14
17167: PUSH
17168: LD_VAR 0 9
17172: ARRAY
17173: PUSH
17174: LD_INT 2
17176: ARRAY
17177: PPUSH
17178: CALL_OW 351
17182: PUSH
17183: LD_VAR 0 14
17187: PUSH
17188: LD_VAR 0 9
17192: ARRAY
17193: PUSH
17194: LD_INT 1
17196: ARRAY
17197: PPUSH
17198: LD_VAR 0 14
17202: PUSH
17203: LD_VAR 0 9
17207: ARRAY
17208: PUSH
17209: LD_INT 2
17211: ARRAY
17212: PPUSH
17213: CALL_OW 488
17217: NOT
17218: OR
17219: PUSH
17220: LD_VAR 0 13
17224: PPUSH
17225: CALL_OW 247
17229: PUSH
17230: LD_INT 3
17232: EQUAL
17233: OR
17234: IFFALSE 17240
// exit ;
17236: POP
17237: POP
17238: GO 17784
// if not tmp then
17240: LD_VAR 0 13
17244: NOT
17245: IFFALSE 17249
// continue ;
17247: GO 17105
// result := true ;
17249: LD_ADDR_VAR 0 8
17253: PUSH
17254: LD_INT 1
17256: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17257: LD_VAR 0 6
17261: PUSH
17262: LD_VAR 0 13
17266: PPUSH
17267: CALL_OW 247
17271: PUSH
17272: LD_INT 2
17274: EQUAL
17275: AND
17276: PUSH
17277: LD_VAR 0 13
17281: PPUSH
17282: CALL_OW 263
17286: PUSH
17287: LD_INT 1
17289: EQUAL
17290: AND
17291: IFFALSE 17455
// begin if IsDrivenBy ( tmp ) then
17293: LD_VAR 0 13
17297: PPUSH
17298: CALL_OW 311
17302: IFFALSE 17306
// continue ;
17304: GO 17105
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17306: LD_VAR 0 6
17310: PPUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 60
17316: PUSH
17317: EMPTY
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: LD_INT 55
17329: PUSH
17330: EMPTY
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 72
17345: IFFALSE 17453
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17347: LD_ADDR_VAR 0 18
17351: PUSH
17352: LD_VAR 0 6
17356: PPUSH
17357: LD_INT 3
17359: PUSH
17360: LD_INT 60
17362: PUSH
17363: EMPTY
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 55
17375: PUSH
17376: EMPTY
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 72
17391: PUSH
17392: LD_INT 1
17394: ARRAY
17395: ST_TO_ADDR
// if IsInUnit ( driver ) then
17396: LD_VAR 0 18
17400: PPUSH
17401: CALL_OW 310
17405: IFFALSE 17416
// ComExit ( driver ) ;
17407: LD_VAR 0 18
17411: PPUSH
17412: CALL 42818 0 1
// AddComEnterUnit ( driver , tmp ) ;
17416: LD_VAR 0 18
17420: PPUSH
17421: LD_VAR 0 13
17425: PPUSH
17426: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17430: LD_VAR 0 18
17434: PPUSH
17435: LD_VAR 0 7
17439: PPUSH
17440: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17444: LD_VAR 0 18
17448: PPUSH
17449: CALL_OW 181
// end ; continue ;
17453: GO 17105
// end ; if not cleaners or not tmp in cleaners then
17455: LD_VAR 0 6
17459: NOT
17460: PUSH
17461: LD_VAR 0 13
17465: PUSH
17466: LD_VAR 0 6
17470: IN
17471: NOT
17472: OR
17473: IFFALSE 17780
// begin if dep then
17475: LD_VAR 0 17
17479: IFFALSE 17615
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17481: LD_ADDR_VAR 0 16
17485: PUSH
17486: LD_VAR 0 17
17490: PUSH
17491: LD_INT 1
17493: ARRAY
17494: PPUSH
17495: CALL_OW 250
17499: PPUSH
17500: LD_VAR 0 17
17504: PUSH
17505: LD_INT 1
17507: ARRAY
17508: PPUSH
17509: CALL_OW 254
17513: PPUSH
17514: LD_INT 5
17516: PPUSH
17517: CALL_OW 272
17521: PUSH
17522: LD_VAR 0 17
17526: PUSH
17527: LD_INT 1
17529: ARRAY
17530: PPUSH
17531: CALL_OW 251
17535: PPUSH
17536: LD_VAR 0 17
17540: PUSH
17541: LD_INT 1
17543: ARRAY
17544: PPUSH
17545: CALL_OW 254
17549: PPUSH
17550: LD_INT 5
17552: PPUSH
17553: CALL_OW 273
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17562: LD_VAR 0 16
17566: PUSH
17567: LD_INT 1
17569: ARRAY
17570: PPUSH
17571: LD_VAR 0 16
17575: PUSH
17576: LD_INT 2
17578: ARRAY
17579: PPUSH
17580: CALL_OW 488
17584: IFFALSE 17615
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17586: LD_VAR 0 13
17590: PPUSH
17591: LD_VAR 0 16
17595: PUSH
17596: LD_INT 1
17598: ARRAY
17599: PPUSH
17600: LD_VAR 0 16
17604: PUSH
17605: LD_INT 2
17607: ARRAY
17608: PPUSH
17609: CALL_OW 111
// continue ;
17613: GO 17105
// end ; end ; r := GetDir ( tmp ) ;
17615: LD_ADDR_VAR 0 15
17619: PUSH
17620: LD_VAR 0 13
17624: PPUSH
17625: CALL_OW 254
17629: ST_TO_ADDR
// if r = 5 then
17630: LD_VAR 0 15
17634: PUSH
17635: LD_INT 5
17637: EQUAL
17638: IFFALSE 17648
// r := 0 ;
17640: LD_ADDR_VAR 0 15
17644: PUSH
17645: LD_INT 0
17647: ST_TO_ADDR
// for j = r to 5 do
17648: LD_ADDR_VAR 0 10
17652: PUSH
17653: DOUBLE
17654: LD_VAR 0 15
17658: DEC
17659: ST_TO_ADDR
17660: LD_INT 5
17662: PUSH
17663: FOR_TO
17664: IFFALSE 17778
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17666: LD_ADDR_VAR 0 11
17670: PUSH
17671: LD_VAR 0 13
17675: PPUSH
17676: CALL_OW 250
17680: PPUSH
17681: LD_VAR 0 10
17685: PPUSH
17686: LD_INT 2
17688: PPUSH
17689: CALL_OW 272
17693: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17694: LD_ADDR_VAR 0 12
17698: PUSH
17699: LD_VAR 0 13
17703: PPUSH
17704: CALL_OW 251
17708: PPUSH
17709: LD_VAR 0 10
17713: PPUSH
17714: LD_INT 2
17716: PPUSH
17717: CALL_OW 273
17721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17722: LD_VAR 0 11
17726: PPUSH
17727: LD_VAR 0 12
17731: PPUSH
17732: CALL_OW 488
17736: PUSH
17737: LD_VAR 0 11
17741: PPUSH
17742: LD_VAR 0 12
17746: PPUSH
17747: CALL_OW 428
17751: NOT
17752: AND
17753: IFFALSE 17776
// begin ComMoveXY ( tmp , _x , _y ) ;
17755: LD_VAR 0 13
17759: PPUSH
17760: LD_VAR 0 11
17764: PPUSH
17765: LD_VAR 0 12
17769: PPUSH
17770: CALL_OW 111
// break ;
17774: GO 17778
// end ; end ;
17776: GO 17663
17778: POP
17779: POP
// end ; end ;
17780: GO 17105
17782: POP
17783: POP
// end ;
17784: LD_VAR 0 8
17788: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17789: LD_INT 0
17791: PPUSH
// result := true ;
17792: LD_ADDR_VAR 0 3
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17800: LD_VAR 0 2
17804: PUSH
17805: LD_INT 24
17807: DOUBLE
17808: EQUAL
17809: IFTRUE 17819
17811: LD_INT 33
17813: DOUBLE
17814: EQUAL
17815: IFTRUE 17819
17817: GO 17844
17819: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17820: LD_ADDR_VAR 0 3
17824: PUSH
17825: LD_INT 32
17827: PPUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: CALL_OW 321
17837: PUSH
17838: LD_INT 2
17840: EQUAL
17841: ST_TO_ADDR
17842: GO 18160
17844: LD_INT 20
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 17877
17852: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_INT 6
17860: PPUSH
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 321
17870: PUSH
17871: LD_INT 2
17873: EQUAL
17874: ST_TO_ADDR
17875: GO 18160
17877: LD_INT 22
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17891
17883: LD_INT 36
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 17916
17891: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17892: LD_ADDR_VAR 0 3
17896: PUSH
17897: LD_INT 15
17899: PPUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 321
17909: PUSH
17910: LD_INT 2
17912: EQUAL
17913: ST_TO_ADDR
17914: GO 18160
17916: LD_INT 30
17918: DOUBLE
17919: EQUAL
17920: IFTRUE 17924
17922: GO 17949
17924: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: LD_INT 20
17932: PPUSH
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 321
17942: PUSH
17943: LD_INT 2
17945: EQUAL
17946: ST_TO_ADDR
17947: GO 18160
17949: LD_INT 28
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17963
17955: LD_INT 21
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17988
17963: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_INT 21
17971: PPUSH
17972: LD_VAR 0 1
17976: PPUSH
17977: CALL_OW 321
17981: PUSH
17982: LD_INT 2
17984: EQUAL
17985: ST_TO_ADDR
17986: GO 18160
17988: LD_INT 16
17990: DOUBLE
17991: EQUAL
17992: IFTRUE 17996
17994: GO 18021
17996: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_INT 84
18004: PPUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 321
18014: PUSH
18015: LD_INT 2
18017: EQUAL
18018: ST_TO_ADDR
18019: GO 18160
18021: LD_INT 19
18023: DOUBLE
18024: EQUAL
18025: IFTRUE 18035
18027: LD_INT 23
18029: DOUBLE
18030: EQUAL
18031: IFTRUE 18035
18033: GO 18060
18035: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_INT 83
18043: PPUSH
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 321
18053: PUSH
18054: LD_INT 2
18056: EQUAL
18057: ST_TO_ADDR
18058: GO 18160
18060: LD_INT 17
18062: DOUBLE
18063: EQUAL
18064: IFTRUE 18068
18066: GO 18093
18068: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18069: LD_ADDR_VAR 0 3
18073: PUSH
18074: LD_INT 39
18076: PPUSH
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 321
18086: PUSH
18087: LD_INT 2
18089: EQUAL
18090: ST_TO_ADDR
18091: GO 18160
18093: LD_INT 18
18095: DOUBLE
18096: EQUAL
18097: IFTRUE 18101
18099: GO 18126
18101: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18102: LD_ADDR_VAR 0 3
18106: PUSH
18107: LD_INT 40
18109: PPUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 321
18119: PUSH
18120: LD_INT 2
18122: EQUAL
18123: ST_TO_ADDR
18124: GO 18160
18126: LD_INT 27
18128: DOUBLE
18129: EQUAL
18130: IFTRUE 18134
18132: GO 18159
18134: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_INT 35
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 321
18152: PUSH
18153: LD_INT 2
18155: EQUAL
18156: ST_TO_ADDR
18157: GO 18160
18159: POP
// end ;
18160: LD_VAR 0 3
18164: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18165: LD_INT 0
18167: PPUSH
18168: PPUSH
18169: PPUSH
18170: PPUSH
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
18176: PPUSH
18177: PPUSH
// result := false ;
18178: LD_ADDR_VAR 0 6
18182: PUSH
18183: LD_INT 0
18185: ST_TO_ADDR
// if btype = b_depot then
18186: LD_VAR 0 2
18190: PUSH
18191: LD_INT 0
18193: EQUAL
18194: IFFALSE 18206
// begin result := true ;
18196: LD_ADDR_VAR 0 6
18200: PUSH
18201: LD_INT 1
18203: ST_TO_ADDR
// exit ;
18204: GO 19032
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18206: LD_VAR 0 1
18210: NOT
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 266
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: IN
18232: NOT
18233: OR
18234: PUSH
18235: LD_VAR 0 2
18239: NOT
18240: OR
18241: PUSH
18242: LD_VAR 0 5
18246: PUSH
18247: LD_INT 0
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 2
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: LD_INT 4
18261: PUSH
18262: LD_INT 5
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: IN
18273: NOT
18274: OR
18275: PUSH
18276: LD_VAR 0 3
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: CALL_OW 488
18290: NOT
18291: OR
18292: IFFALSE 18296
// exit ;
18294: GO 19032
// side := GetSide ( depot ) ;
18296: LD_ADDR_VAR 0 9
18300: PUSH
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 255
18310: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18311: LD_VAR 0 9
18315: PPUSH
18316: LD_VAR 0 2
18320: PPUSH
18321: CALL 17789 0 2
18325: NOT
18326: IFFALSE 18330
// exit ;
18328: GO 19032
// pom := GetBase ( depot ) ;
18330: LD_ADDR_VAR 0 10
18334: PUSH
18335: LD_VAR 0 1
18339: PPUSH
18340: CALL_OW 274
18344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18345: LD_ADDR_VAR 0 11
18349: PUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 248
18364: PPUSH
18365: CALL_OW 450
18369: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18370: LD_VAR 0 10
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 275
18382: PUSH
18383: LD_VAR 0 11
18387: PUSH
18388: LD_INT 1
18390: ARRAY
18391: GREATEREQUAL
18392: PUSH
18393: LD_VAR 0 10
18397: PPUSH
18398: LD_INT 2
18400: PPUSH
18401: CALL_OW 275
18405: PUSH
18406: LD_VAR 0 11
18410: PUSH
18411: LD_INT 2
18413: ARRAY
18414: GREATEREQUAL
18415: AND
18416: PUSH
18417: LD_VAR 0 10
18421: PPUSH
18422: LD_INT 3
18424: PPUSH
18425: CALL_OW 275
18429: PUSH
18430: LD_VAR 0 11
18434: PUSH
18435: LD_INT 3
18437: ARRAY
18438: GREATEREQUAL
18439: AND
18440: NOT
18441: IFFALSE 18445
// exit ;
18443: GO 19032
// if GetBType ( depot ) = b_depot then
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 266
18454: PUSH
18455: LD_INT 0
18457: EQUAL
18458: IFFALSE 18470
// dist := 28 else
18460: LD_ADDR_VAR 0 14
18464: PUSH
18465: LD_INT 28
18467: ST_TO_ADDR
18468: GO 18478
// dist := 36 ;
18470: LD_ADDR_VAR 0 14
18474: PUSH
18475: LD_INT 36
18477: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18478: LD_VAR 0 1
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_VAR 0 4
18492: PPUSH
18493: CALL_OW 297
18497: PUSH
18498: LD_VAR 0 14
18502: GREATER
18503: IFFALSE 18507
// exit ;
18505: GO 19032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18507: LD_ADDR_VAR 0 12
18511: PUSH
18512: LD_VAR 0 2
18516: PPUSH
18517: LD_VAR 0 3
18521: PPUSH
18522: LD_VAR 0 4
18526: PPUSH
18527: LD_VAR 0 5
18531: PPUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 248
18541: PPUSH
18542: LD_INT 0
18544: PPUSH
18545: CALL 19037 0 6
18549: ST_TO_ADDR
// if not hexes then
18550: LD_VAR 0 12
18554: NOT
18555: IFFALSE 18559
// exit ;
18557: GO 19032
// hex := GetHexInfo ( x , y ) ;
18559: LD_ADDR_VAR 0 15
18563: PUSH
18564: LD_VAR 0 3
18568: PPUSH
18569: LD_VAR 0 4
18573: PPUSH
18574: CALL_OW 546
18578: ST_TO_ADDR
// if hex [ 1 ] then
18579: LD_VAR 0 15
18583: PUSH
18584: LD_INT 1
18586: ARRAY
18587: IFFALSE 18591
// exit ;
18589: GO 19032
// height := hex [ 2 ] ;
18591: LD_ADDR_VAR 0 13
18595: PUSH
18596: LD_VAR 0 15
18600: PUSH
18601: LD_INT 2
18603: ARRAY
18604: ST_TO_ADDR
// for i = 1 to hexes do
18605: LD_ADDR_VAR 0 7
18609: PUSH
18610: DOUBLE
18611: LD_INT 1
18613: DEC
18614: ST_TO_ADDR
18615: LD_VAR 0 12
18619: PUSH
18620: FOR_TO
18621: IFFALSE 18951
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18623: LD_VAR 0 12
18627: PUSH
18628: LD_VAR 0 7
18632: ARRAY
18633: PUSH
18634: LD_INT 1
18636: ARRAY
18637: PPUSH
18638: LD_VAR 0 12
18642: PUSH
18643: LD_VAR 0 7
18647: ARRAY
18648: PUSH
18649: LD_INT 2
18651: ARRAY
18652: PPUSH
18653: CALL_OW 488
18657: NOT
18658: PUSH
18659: LD_VAR 0 12
18663: PUSH
18664: LD_VAR 0 7
18668: ARRAY
18669: PUSH
18670: LD_INT 1
18672: ARRAY
18673: PPUSH
18674: LD_VAR 0 12
18678: PUSH
18679: LD_VAR 0 7
18683: ARRAY
18684: PUSH
18685: LD_INT 2
18687: ARRAY
18688: PPUSH
18689: CALL_OW 428
18693: PUSH
18694: LD_INT 0
18696: GREATER
18697: OR
18698: PUSH
18699: LD_VAR 0 12
18703: PUSH
18704: LD_VAR 0 7
18708: ARRAY
18709: PUSH
18710: LD_INT 1
18712: ARRAY
18713: PPUSH
18714: LD_VAR 0 12
18718: PUSH
18719: LD_VAR 0 7
18723: ARRAY
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: CALL_OW 351
18733: OR
18734: IFFALSE 18740
// exit ;
18736: POP
18737: POP
18738: GO 19032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18740: LD_ADDR_VAR 0 8
18744: PUSH
18745: LD_VAR 0 12
18749: PUSH
18750: LD_VAR 0 7
18754: ARRAY
18755: PUSH
18756: LD_INT 1
18758: ARRAY
18759: PPUSH
18760: LD_VAR 0 12
18764: PUSH
18765: LD_VAR 0 7
18769: ARRAY
18770: PUSH
18771: LD_INT 2
18773: ARRAY
18774: PPUSH
18775: CALL_OW 546
18779: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18780: LD_VAR 0 8
18784: PUSH
18785: LD_INT 1
18787: ARRAY
18788: PUSH
18789: LD_VAR 0 8
18793: PUSH
18794: LD_INT 2
18796: ARRAY
18797: PUSH
18798: LD_VAR 0 13
18802: PUSH
18803: LD_INT 2
18805: PLUS
18806: GREATER
18807: OR
18808: PUSH
18809: LD_VAR 0 8
18813: PUSH
18814: LD_INT 2
18816: ARRAY
18817: PUSH
18818: LD_VAR 0 13
18822: PUSH
18823: LD_INT 2
18825: MINUS
18826: LESS
18827: OR
18828: PUSH
18829: LD_VAR 0 8
18833: PUSH
18834: LD_INT 3
18836: ARRAY
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 9
18846: PUSH
18847: LD_INT 10
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 13
18858: PUSH
18859: LD_INT 16
18861: PUSH
18862: LD_INT 17
18864: PUSH
18865: LD_INT 18
18867: PUSH
18868: LD_INT 19
18870: PUSH
18871: LD_INT 20
18873: PUSH
18874: LD_INT 21
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: IN
18892: NOT
18893: OR
18894: PUSH
18895: LD_VAR 0 8
18899: PUSH
18900: LD_INT 5
18902: ARRAY
18903: NOT
18904: OR
18905: PUSH
18906: LD_VAR 0 8
18910: PUSH
18911: LD_INT 6
18913: ARRAY
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 7
18923: PUSH
18924: LD_INT 9
18926: PUSH
18927: LD_INT 10
18929: PUSH
18930: LD_INT 11
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: IN
18941: NOT
18942: OR
18943: IFFALSE 18949
// exit ;
18945: POP
18946: POP
18947: GO 19032
// end ;
18949: GO 18620
18951: POP
18952: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18953: LD_VAR 0 9
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: LD_VAR 0 4
18967: PPUSH
18968: LD_INT 20
18970: PPUSH
18971: CALL 10955 0 4
18975: PUSH
18976: LD_INT 4
18978: ARRAY
18979: IFFALSE 18983
// exit ;
18981: GO 19032
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18983: LD_VAR 0 2
18987: PUSH
18988: LD_INT 29
18990: PUSH
18991: LD_INT 30
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: IN
18998: PUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: LD_VAR 0 4
19008: PPUSH
19009: LD_VAR 0 9
19013: PPUSH
19014: CALL_OW 440
19018: NOT
19019: AND
19020: IFFALSE 19024
// exit ;
19022: GO 19032
// result := true ;
19024: LD_ADDR_VAR 0 6
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// end ;
19032: LD_VAR 0 6
19036: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
19042: PPUSH
19043: PPUSH
19044: PPUSH
19045: PPUSH
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
19057: PPUSH
19058: PPUSH
19059: PPUSH
19060: PPUSH
19061: PPUSH
19062: PPUSH
19063: PPUSH
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
19074: PPUSH
19075: PPUSH
19076: PPUSH
19077: PPUSH
19078: PPUSH
19079: PPUSH
19080: PPUSH
19081: PPUSH
19082: PPUSH
19083: PPUSH
19084: PPUSH
19085: PPUSH
19086: PPUSH
19087: PPUSH
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
19094: PPUSH
19095: PPUSH
19096: PPUSH
// result = [ ] ;
19097: LD_ADDR_VAR 0 7
19101: PUSH
19102: EMPTY
19103: ST_TO_ADDR
// temp_list = [ ] ;
19104: LD_ADDR_VAR 0 9
19108: PUSH
19109: EMPTY
19110: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19111: LD_VAR 0 4
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: LD_INT 3
19127: PUSH
19128: LD_INT 4
19130: PUSH
19131: LD_INT 5
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: IN
19142: NOT
19143: PUSH
19144: LD_VAR 0 1
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: IN
19159: PUSH
19160: LD_VAR 0 5
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: LD_INT 3
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: IN
19179: NOT
19180: AND
19181: OR
19182: IFFALSE 19186
// exit ;
19184: GO 37577
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19186: LD_VAR 0 1
19190: PUSH
19191: LD_INT 6
19193: PUSH
19194: LD_INT 7
19196: PUSH
19197: LD_INT 8
19199: PUSH
19200: LD_INT 13
19202: PUSH
19203: LD_INT 12
19205: PUSH
19206: LD_INT 15
19208: PUSH
19209: LD_INT 11
19211: PUSH
19212: LD_INT 14
19214: PUSH
19215: LD_INT 10
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: IN
19229: IFFALSE 19239
// btype = b_lab ;
19231: LD_ADDR_VAR 0 1
19235: PUSH
19236: LD_INT 6
19238: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19239: LD_VAR 0 6
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: IN
19258: NOT
19259: PUSH
19260: LD_VAR 0 1
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: LD_INT 3
19276: PUSH
19277: LD_INT 6
19279: PUSH
19280: LD_INT 36
19282: PUSH
19283: LD_INT 4
19285: PUSH
19286: LD_INT 5
19288: PUSH
19289: LD_INT 31
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 33
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: IN
19311: NOT
19312: PUSH
19313: LD_VAR 0 6
19317: PUSH
19318: LD_INT 1
19320: EQUAL
19321: AND
19322: OR
19323: PUSH
19324: LD_VAR 0 1
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: LD_INT 3
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: IN
19339: NOT
19340: PUSH
19341: LD_VAR 0 6
19345: PUSH
19346: LD_INT 2
19348: EQUAL
19349: AND
19350: OR
19351: IFFALSE 19361
// mode = 0 ;
19353: LD_ADDR_VAR 0 6
19357: PUSH
19358: LD_INT 0
19360: ST_TO_ADDR
// case mode of 0 :
19361: LD_VAR 0 6
19365: PUSH
19366: LD_INT 0
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 30827
19374: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19375: LD_ADDR_VAR 0 11
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 0
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: LD_INT 0
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: NEG
19445: PUSH
19446: LD_INT 1
19448: NEG
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: NEG
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 3
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19568: LD_ADDR_VAR 0 12
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: LD_INT 0
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 2
19691: NEG
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: NEG
19703: PUSH
19704: LD_INT 1
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: NEG
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 3
19725: NEG
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 3
19736: NEG
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19764: LD_ADDR_VAR 0 13
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 0
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: NEG
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: PUSH
19847: LD_INT 2
19849: NEG
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 2
19887: NEG
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: LD_INT 2
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: LD_INT 3
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 3
19923: NEG
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 3
19935: NEG
19936: PUSH
19937: LD_INT 3
19939: NEG
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19963: LD_ADDR_VAR 0 14
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: NEG
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: LD_INT 2
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 3
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 3
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 2
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20159: LD_ADDR_VAR 0 15
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 1
20217: NEG
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: NEG
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: NEG
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: NEG
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 3
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 3
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20352: LD_ADDR_VAR 0 16
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 3
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 3
20509: PUSH
20510: LD_INT 3
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 3
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20545: LD_ADDR_VAR 0 17
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: NEG
20627: PUSH
20628: LD_INT 2
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: LD_INT 2
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 0
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: NEG
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20775: LD_ADDR_VAR 0 18
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 1
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: LD_INT 2
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: PUSH
20880: LD_INT 1
20882: NEG
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: NEG
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: LD_INT 2
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21005: LD_ADDR_VAR 0 19
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: NEG
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 2
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: LD_INT 2
21101: NEG
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: NEG
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: NEG
21205: PUSH
21206: LD_INT 2
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21235: LD_ADDR_VAR 0 20
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 2
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: LD_INT 2
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: NEG
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21465: LD_ADDR_VAR 0 21
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: NEG
21535: PUSH
21536: LD_INT 1
21538: NEG
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 0
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: LD_INT 1
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 2
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: NEG
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: NEG
21665: PUSH
21666: LD_INT 2
21668: NEG
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21695: LD_ADDR_VAR 0 22
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: LD_INT 2
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 2
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 2
21882: NEG
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: NEG
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21925: LD_ADDR_VAR 0 23
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: LD_INT 2
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 2
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: LD_INT 2
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: NEG
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: NEG
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: NEG
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 2
22136: NEG
22137: PUSH
22138: LD_INT 3
22140: NEG
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: LD_INT 3
22152: NEG
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22205: LD_ADDR_VAR 0 24
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: LD_INT 1
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 2
22381: NEG
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 2
22392: NEG
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 2
22404: NEG
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 1
22430: NEG
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22481: LD_ADDR_VAR 0 25
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 2
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: LD_INT 1
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 2
22657: NEG
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: NEG
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 3
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 3
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22755: LD_ADDR_VAR 0 26
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 1
22836: NEG
22837: PUSH
22838: LD_INT 2
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 2
22942: NEG
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: LD_INT 2
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: LD_INT 3
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23031: LD_ADDR_VAR 0 27
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: NEG
23113: PUSH
23114: LD_INT 2
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: LD_INT 2
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: LD_INT 2
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 3
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23311: LD_ADDR_VAR 0 28
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 2
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: LD_INT 3
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 3
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 3
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 3
23558: NEG
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23593: LD_ADDR_VAR 0 29
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 2
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: NEG
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: LD_INT 3
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 3
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 3
23837: NEG
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23872: LD_ADDR_VAR 0 30
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 2
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 2
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 2
24038: NEG
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: NEG
24050: PUSH
24051: LD_INT 1
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: LD_INT 3
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: LD_INT 2
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: LD_INT 3
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 3
24115: NEG
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24150: LD_ADDR_VAR 0 31
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 2
24327: NEG
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: LD_INT 3
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 3
24393: NEG
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24428: LD_ADDR_VAR 0 32
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: LD_INT 1
24501: NEG
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 2
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 2
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 3
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24706: LD_ADDR_VAR 0 33
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 2
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 2
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: LD_INT 2
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 2
24861: NEG
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 2
24872: NEG
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: LD_INT 3
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24985: LD_ADDR_VAR 0 34
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 2
25164: NEG
25165: PUSH
25166: LD_INT 2
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 3
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 3
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 3
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25265: LD_ADDR_VAR 0 35
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25377: LD_ADDR_VAR 0 36
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25489: LD_ADDR_VAR 0 37
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25601: LD_ADDR_VAR 0 38
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 2
25692: NEG
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25713: LD_ADDR_VAR 0 39
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25825: LD_ADDR_VAR 0 40
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25937: LD_ADDR_VAR 0 41
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 2
26092: NEG
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 2
26103: NEG
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 2
26115: NEG
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: NEG
26128: PUSH
26129: LD_INT 3
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 3
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 3
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 3
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 3
26246: NEG
26247: PUSH
26248: LD_INT 3
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26287: LD_ADDR_VAR 0 42
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: NEG
26466: PUSH
26467: LD_INT 2
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: LD_INT 3
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: LD_INT 3
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 3
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 3
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 3
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 3
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: LD_INT 3
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 3
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 3
26584: NEG
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 3
26596: NEG
26597: PUSH
26598: LD_INT 3
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26637: LD_ADDR_VAR 0 43
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 0
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 3
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 3
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 3
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 3
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 3
26933: NEG
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 3
26944: NEG
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26985: LD_ADDR_VAR 0 44
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 2
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 2
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: LD_INT 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: NEG
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: LD_INT 2
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: NEG
27176: PUSH
27177: LD_INT 3
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 3
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 3
27228: PUSH
27229: LD_INT 3
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 2
27248: NEG
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 3
27259: NEG
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 3
27270: NEG
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 3
27282: NEG
27283: PUSH
27284: LD_INT 2
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 3
27294: NEG
27295: PUSH
27296: LD_INT 3
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27335: LD_ADDR_VAR 0 45
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 2
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 2
27460: PUSH
27461: LD_INT 2
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: LD_INT 3
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 3
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 3
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 3
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 3
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 3
27632: NEG
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: NEG
27645: PUSH
27646: LD_INT 3
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27685: LD_ADDR_VAR 0 46
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 2
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: LD_INT 2
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 2
27851: NEG
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: LD_INT 3
27878: NEG
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 3
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 3
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 3
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 3
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 3
27981: NEG
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 3
27992: NEG
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28033: LD_ADDR_VAR 0 47
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 2
28148: NEG
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28184: LD_ADDR_VAR 0 48
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: LD_INT 1
28291: NEG
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28331: LD_ADDR_VAR 0 49
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28475: LD_ADDR_VAR 0 50
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28619: LD_ADDR_VAR 0 51
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28766: LD_ADDR_VAR 0 52
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 2
28881: NEG
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 2
28893: NEG
28894: PUSH
28895: LD_INT 2
28897: NEG
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28917: LD_ADDR_VAR 0 53
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: NEG
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29147: LD_ADDR_VAR 0 54
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29377: LD_ADDR_VAR 0 55
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29607: LD_ADDR_VAR 0 56
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 2
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: LD_INT 2
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29837: LD_ADDR_VAR 0 57
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: NEG
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: LD_INT 1
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 2
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 2
30013: NEG
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: NEG
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 2
30036: NEG
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30067: LD_ADDR_VAR 0 58
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 2
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 2
30266: NEG
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30297: LD_ADDR_VAR 0 59
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30385: LD_ADDR_VAR 0 60
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30473: LD_ADDR_VAR 0 61
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30561: LD_ADDR_VAR 0 62
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30649: LD_ADDR_VAR 0 63
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30737: LD_ADDR_VAR 0 64
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// end ; 1 :
30825: GO 36722
30827: LD_INT 1
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 33458
30835: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30836: LD_ADDR_VAR 0 11
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 3
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30880: LD_ADDR_VAR 0 12
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30921: LD_ADDR_VAR 0 13
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 3
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30961: LD_ADDR_VAR 0 14
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 3
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31002: LD_ADDR_VAR 0 15
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31046: LD_ADDR_VAR 0 16
31050: PUSH
31051: LD_INT 2
31053: NEG
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: LD_INT 2
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: LD_INT 3
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31092: LD_ADDR_VAR 0 17
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 3
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 3
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31136: LD_ADDR_VAR 0 18
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31177: LD_ADDR_VAR 0 19
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: LD_INT 3
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31217: LD_ADDR_VAR 0 20
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 3
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 3
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: LIST
31257: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31258: LD_ADDR_VAR 0 21
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31302: LD_ADDR_VAR 0 22
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: LD_INT 3
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 3
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31348: LD_ADDR_VAR 0 23
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 4
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: LD_INT 3
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31392: LD_ADDR_VAR 0 24
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 4
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31433: LD_ADDR_VAR 0 25
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 4
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31473: LD_ADDR_VAR 0 26
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31514: LD_ADDR_VAR 0 27
31518: PUSH
31519: LD_INT 3
31521: NEG
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 4
31543: NEG
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31558: LD_ADDR_VAR 0 28
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: LD_INT 4
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 4
31589: NEG
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31604: LD_ADDR_VAR 0 29
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: LD_INT 3
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 3
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: LD_INT 4
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 4
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 3
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 5
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 5
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 4
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 6
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: LD_INT 6
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: LD_INT 5
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31759: LD_ADDR_VAR 0 30
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 4
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 4
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 4
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 5
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 5
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 5
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 6
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 6
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31902: LD_ADDR_VAR 0 31
31906: PUSH
31907: LD_INT 3
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 4
31939: PUSH
31940: LD_INT 3
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 4
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: LD_INT 4
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 5
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 5
31979: PUSH
31980: LD_INT 5
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: LD_INT 5
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 6
31999: PUSH
32000: LD_INT 5
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 6
32009: PUSH
32010: LD_INT 6
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 5
32019: PUSH
32020: LD_INT 6
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32041: LD_ADDR_VAR 0 32
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 4
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 4
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: LD_INT 5
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 4
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: LD_INT 6
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 6
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: LD_INT 5
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32184: LD_ADDR_VAR 0 33
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 3
32202: NEG
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: NEG
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 4
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 4
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 4
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 5
32270: NEG
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 5
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 5
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 6
32304: NEG
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 6
32315: NEG
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32339: LD_ADDR_VAR 0 34
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: LD_INT 3
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 3
32358: NEG
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: LD_INT 3
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 4
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 4
32394: NEG
32395: PUSH
32396: LD_INT 3
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 4
32406: NEG
32407: PUSH
32408: LD_INT 4
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 4
32418: NEG
32419: PUSH
32420: LD_INT 5
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 5
32430: NEG
32431: PUSH
32432: LD_INT 4
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 5
32442: NEG
32443: PUSH
32444: LD_INT 5
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 5
32454: NEG
32455: PUSH
32456: LD_INT 6
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 6
32466: NEG
32467: PUSH
32468: LD_INT 5
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 6
32478: NEG
32479: PUSH
32480: LD_INT 6
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32502: LD_ADDR_VAR 0 41
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32546: LD_ADDR_VAR 0 42
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32587: LD_ADDR_VAR 0 43
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32627: LD_ADDR_VAR 0 44
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32668: LD_ADDR_VAR 0 45
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32712: LD_ADDR_VAR 0 46
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: LD_INT 3
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: LD_INT 2
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32758: LD_ADDR_VAR 0 47
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 3
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: LD_INT 3
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32791: LD_ADDR_VAR 0 48
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32822: LD_ADDR_VAR 0 49
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32851: LD_ADDR_VAR 0 50
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32880: LD_ADDR_VAR 0 51
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32911: LD_ADDR_VAR 0 52
32915: PUSH
32916: LD_INT 3
32918: NEG
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: NEG
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32944: LD_ADDR_VAR 0 53
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 3
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 2
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32988: LD_ADDR_VAR 0 54
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33029: LD_ADDR_VAR 0 55
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 3
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33069: LD_ADDR_VAR 0 56
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33110: LD_ADDR_VAR 0 57
33114: PUSH
33115: LD_INT 2
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: NEG
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33154: LD_ADDR_VAR 0 58
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: LD_INT 3
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 3
33173: NEG
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33200: LD_ADDR_VAR 0 59
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33244: LD_ADDR_VAR 0 60
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33285: LD_ADDR_VAR 0 61
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 2
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33325: LD_ADDR_VAR 0 62
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33366: LD_ADDR_VAR 0 63
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33410: LD_ADDR_VAR 0 64
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: ST_TO_ADDR
// end ; 2 :
33456: GO 36722
33458: LD_INT 2
33460: DOUBLE
33461: EQUAL
33462: IFTRUE 33466
33464: GO 36721
33466: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33467: LD_ADDR_VAR 0 29
33471: PUSH
33472: LD_INT 4
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 5
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 4
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 5
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: PUSH
33568: LD_INT 3
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: LD_INT 3
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 4
33597: PUSH
33598: LD_INT 4
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 4
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 4
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 4
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 4
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 5
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: LD_INT 4
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 3
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: LD_INT 5
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 3
33761: NEG
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 3
33795: NEG
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 4
33806: NEG
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 4
33817: NEG
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 4
33829: NEG
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: LD_INT 4
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 4
33864: NEG
33865: PUSH
33866: LD_INT 5
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: LD_INT 4
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 3
33888: NEG
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 4
33900: NEG
33901: PUSH
33902: LD_INT 3
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 5
33912: NEG
33913: PUSH
33914: LD_INT 4
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 5
33924: NEG
33925: PUSH
33926: LD_INT 5
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 3
33936: NEG
33937: PUSH
33938: LD_INT 5
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 5
33948: NEG
33949: PUSH
33950: LD_INT 3
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34005: LD_ADDR_VAR 0 30
34009: PUSH
34010: LD_INT 4
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 4
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 5
34032: PUSH
34033: LD_INT 4
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 5
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 4
34052: PUSH
34053: LD_INT 5
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: LD_INT 4
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 5
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 3
34092: PUSH
34093: LD_INT 5
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: LD_INT 4
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 4
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 4
34195: NEG
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 4
34206: NEG
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: NEG
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 4
34240: NEG
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 5
34251: NEG
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 5
34262: NEG
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 5
34274: NEG
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 3
34297: NEG
34298: PUSH
34299: LD_INT 3
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 3
34309: NEG
34310: PUSH
34311: LD_INT 4
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: LD_INT 3
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 3
34345: NEG
34346: PUSH
34347: LD_INT 2
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 4
34357: NEG
34358: PUSH
34359: LD_INT 3
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 4
34369: NEG
34370: PUSH
34371: LD_INT 4
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: LD_INT 4
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 4
34393: NEG
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 4
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 5
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 4
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: LD_INT 3
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: LD_INT 4
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 5
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: NEG
34496: PUSH
34497: LD_INT 5
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34552: LD_ADDR_VAR 0 31
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 4
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 3
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 5
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 5
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 4
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 5
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 3
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: NEG
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: NEG
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 4
34708: NEG
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 4
34719: NEG
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 4
34731: NEG
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 4
34754: NEG
34755: PUSH
34756: LD_INT 4
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 4
34766: NEG
34767: PUSH
34768: LD_INT 5
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: LD_INT 4
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 3
34790: NEG
34791: PUSH
34792: LD_INT 3
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 4
34802: NEG
34803: PUSH
34804: LD_INT 3
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 5
34814: NEG
34815: PUSH
34816: LD_INT 4
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 5
34826: NEG
34827: PUSH
34828: LD_INT 5
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: NEG
34839: PUSH
34840: LD_INT 5
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 5
34850: NEG
34851: PUSH
34852: LD_INT 3
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 3
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 4
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 4
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: LD_INT 4
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 4
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 5
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 5
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35102: LD_ADDR_VAR 0 32
35106: PUSH
35107: LD_INT 4
35109: NEG
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 4
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 3
35132: NEG
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 3
35143: NEG
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 4
35154: NEG
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 5
35165: NEG
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 5
35176: NEG
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 5
35188: NEG
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: LD_INT 3
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 3
35223: NEG
35224: PUSH
35225: LD_INT 4
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 2
35235: NEG
35236: PUSH
35237: LD_INT 3
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 3
35259: NEG
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 4
35271: NEG
35272: PUSH
35273: LD_INT 3
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 4
35283: NEG
35284: PUSH
35285: LD_INT 4
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 4
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 4
35307: NEG
35308: PUSH
35309: LD_INT 2
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: LD_INT 4
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 5
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 4
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 3
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 3
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: LD_INT 4
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 5
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 3
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: LD_INT 5
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 3
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 4
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 4
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 2
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 4
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 4
35514: PUSH
35515: LD_INT 4
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 4
35524: PUSH
35525: LD_INT 3
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 5
35534: PUSH
35535: LD_INT 4
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 5
35544: PUSH
35545: LD_INT 5
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 4
35554: PUSH
35555: LD_INT 5
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: LD_INT 4
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: LD_INT 3
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 5
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 3
35594: PUSH
35595: LD_INT 5
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35649: LD_ADDR_VAR 0 33
35653: PUSH
35654: LD_INT 4
35656: NEG
35657: PUSH
35658: LD_INT 4
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 4
35668: NEG
35669: PUSH
35670: LD_INT 5
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: LD_INT 4
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 3
35692: NEG
35693: PUSH
35694: LD_INT 3
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 4
35704: NEG
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 5
35716: NEG
35717: PUSH
35718: LD_INT 4
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 5
35728: NEG
35729: PUSH
35730: LD_INT 5
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 3
35740: NEG
35741: PUSH
35742: LD_INT 5
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 5
35752: NEG
35753: PUSH
35754: LD_INT 3
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 3
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 4
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 3
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 4
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: LD_INT 4
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 4
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 4
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 5
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 5
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 4
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 5
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 3
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 4
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 4
35989: PUSH
35990: LD_INT 4
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 3
35999: PUSH
36000: LD_INT 4
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 3
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 4
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: LD_INT 4
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 4
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 4
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 5
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 5
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: LD_INT 4
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 5
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36187: LD_ADDR_VAR 0 34
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: LD_INT 4
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 5
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 4
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 3
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 3
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 4
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: LD_INT 5
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 3
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: LD_INT 5
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 4
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 4
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 3
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 4
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 4
36389: PUSH
36390: LD_INT 4
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 4
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: LD_INT 4
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 5
36419: PUSH
36420: LD_INT 5
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 4
36429: PUSH
36430: LD_INT 5
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 3
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 5
36459: PUSH
36460: LD_INT 3
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 3
36469: PUSH
36470: LD_INT 5
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 3
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 3
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 4
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 4
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 3
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 4
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 4
36572: NEG
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 4
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 3
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 3
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 4
36617: NEG
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 5
36628: NEG
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 5
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 5
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 3
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// end ; end ;
36719: GO 36722
36721: POP
// case btype of b_depot , b_warehouse :
36722: LD_VAR 0 1
36726: PUSH
36727: LD_INT 0
36729: DOUBLE
36730: EQUAL
36731: IFTRUE 36741
36733: LD_INT 1
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36741
36739: GO 36942
36741: POP
// case nation of nation_american :
36742: LD_VAR 0 5
36746: PUSH
36747: LD_INT 1
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36811
36755: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36756: LD_ADDR_VAR 0 9
36760: PUSH
36761: LD_VAR 0 11
36765: PUSH
36766: LD_VAR 0 12
36770: PUSH
36771: LD_VAR 0 13
36775: PUSH
36776: LD_VAR 0 14
36780: PUSH
36781: LD_VAR 0 15
36785: PUSH
36786: LD_VAR 0 16
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: PUSH
36799: LD_VAR 0 4
36803: PUSH
36804: LD_INT 1
36806: PLUS
36807: ARRAY
36808: ST_TO_ADDR
36809: GO 36940
36811: LD_INT 2
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 36875
36819: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36820: LD_ADDR_VAR 0 9
36824: PUSH
36825: LD_VAR 0 17
36829: PUSH
36830: LD_VAR 0 18
36834: PUSH
36835: LD_VAR 0 19
36839: PUSH
36840: LD_VAR 0 20
36844: PUSH
36845: LD_VAR 0 21
36849: PUSH
36850: LD_VAR 0 22
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: PUSH
36863: LD_VAR 0 4
36867: PUSH
36868: LD_INT 1
36870: PLUS
36871: ARRAY
36872: ST_TO_ADDR
36873: GO 36940
36875: LD_INT 3
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 36939
36883: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: LD_VAR 0 23
36893: PUSH
36894: LD_VAR 0 24
36898: PUSH
36899: LD_VAR 0 25
36903: PUSH
36904: LD_VAR 0 26
36908: PUSH
36909: LD_VAR 0 27
36913: PUSH
36914: LD_VAR 0 28
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: PUSH
36927: LD_VAR 0 4
36931: PUSH
36932: LD_INT 1
36934: PLUS
36935: ARRAY
36936: ST_TO_ADDR
36937: GO 36940
36939: POP
36940: GO 37495
36942: LD_INT 2
36944: DOUBLE
36945: EQUAL
36946: IFTRUE 36956
36948: LD_INT 3
36950: DOUBLE
36951: EQUAL
36952: IFTRUE 36956
36954: GO 37012
36956: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36957: LD_ADDR_VAR 0 9
36961: PUSH
36962: LD_VAR 0 29
36966: PUSH
36967: LD_VAR 0 30
36971: PUSH
36972: LD_VAR 0 31
36976: PUSH
36977: LD_VAR 0 32
36981: PUSH
36982: LD_VAR 0 33
36986: PUSH
36987: LD_VAR 0 34
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: LD_VAR 0 4
37004: PUSH
37005: LD_INT 1
37007: PLUS
37008: ARRAY
37009: ST_TO_ADDR
37010: GO 37495
37012: LD_INT 16
37014: DOUBLE
37015: EQUAL
37016: IFTRUE 37074
37018: LD_INT 17
37020: DOUBLE
37021: EQUAL
37022: IFTRUE 37074
37024: LD_INT 18
37026: DOUBLE
37027: EQUAL
37028: IFTRUE 37074
37030: LD_INT 19
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37074
37036: LD_INT 22
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37074
37042: LD_INT 20
37044: DOUBLE
37045: EQUAL
37046: IFTRUE 37074
37048: LD_INT 21
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37074
37054: LD_INT 23
37056: DOUBLE
37057: EQUAL
37058: IFTRUE 37074
37060: LD_INT 24
37062: DOUBLE
37063: EQUAL
37064: IFTRUE 37074
37066: LD_INT 25
37068: DOUBLE
37069: EQUAL
37070: IFTRUE 37074
37072: GO 37130
37074: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37075: LD_ADDR_VAR 0 9
37079: PUSH
37080: LD_VAR 0 35
37084: PUSH
37085: LD_VAR 0 36
37089: PUSH
37090: LD_VAR 0 37
37094: PUSH
37095: LD_VAR 0 38
37099: PUSH
37100: LD_VAR 0 39
37104: PUSH
37105: LD_VAR 0 40
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: PUSH
37118: LD_VAR 0 4
37122: PUSH
37123: LD_INT 1
37125: PLUS
37126: ARRAY
37127: ST_TO_ADDR
37128: GO 37495
37130: LD_INT 6
37132: DOUBLE
37133: EQUAL
37134: IFTRUE 37186
37136: LD_INT 7
37138: DOUBLE
37139: EQUAL
37140: IFTRUE 37186
37142: LD_INT 8
37144: DOUBLE
37145: EQUAL
37146: IFTRUE 37186
37148: LD_INT 13
37150: DOUBLE
37151: EQUAL
37152: IFTRUE 37186
37154: LD_INT 12
37156: DOUBLE
37157: EQUAL
37158: IFTRUE 37186
37160: LD_INT 15
37162: DOUBLE
37163: EQUAL
37164: IFTRUE 37186
37166: LD_INT 11
37168: DOUBLE
37169: EQUAL
37170: IFTRUE 37186
37172: LD_INT 14
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37186
37178: LD_INT 10
37180: DOUBLE
37181: EQUAL
37182: IFTRUE 37186
37184: GO 37242
37186: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37187: LD_ADDR_VAR 0 9
37191: PUSH
37192: LD_VAR 0 41
37196: PUSH
37197: LD_VAR 0 42
37201: PUSH
37202: LD_VAR 0 43
37206: PUSH
37207: LD_VAR 0 44
37211: PUSH
37212: LD_VAR 0 45
37216: PUSH
37217: LD_VAR 0 46
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: PUSH
37230: LD_VAR 0 4
37234: PUSH
37235: LD_INT 1
37237: PLUS
37238: ARRAY
37239: ST_TO_ADDR
37240: GO 37495
37242: LD_INT 36
37244: DOUBLE
37245: EQUAL
37246: IFTRUE 37250
37248: GO 37306
37250: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37251: LD_ADDR_VAR 0 9
37255: PUSH
37256: LD_VAR 0 47
37260: PUSH
37261: LD_VAR 0 48
37265: PUSH
37266: LD_VAR 0 49
37270: PUSH
37271: LD_VAR 0 50
37275: PUSH
37276: LD_VAR 0 51
37280: PUSH
37281: LD_VAR 0 52
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: PUSH
37294: LD_VAR 0 4
37298: PUSH
37299: LD_INT 1
37301: PLUS
37302: ARRAY
37303: ST_TO_ADDR
37304: GO 37495
37306: LD_INT 4
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37332
37312: LD_INT 5
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37332
37318: LD_INT 34
37320: DOUBLE
37321: EQUAL
37322: IFTRUE 37332
37324: LD_INT 37
37326: DOUBLE
37327: EQUAL
37328: IFTRUE 37332
37330: GO 37388
37332: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37333: LD_ADDR_VAR 0 9
37337: PUSH
37338: LD_VAR 0 53
37342: PUSH
37343: LD_VAR 0 54
37347: PUSH
37348: LD_VAR 0 55
37352: PUSH
37353: LD_VAR 0 56
37357: PUSH
37358: LD_VAR 0 57
37362: PUSH
37363: LD_VAR 0 58
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: PUSH
37376: LD_VAR 0 4
37380: PUSH
37381: LD_INT 1
37383: PLUS
37384: ARRAY
37385: ST_TO_ADDR
37386: GO 37495
37388: LD_INT 31
37390: DOUBLE
37391: EQUAL
37392: IFTRUE 37438
37394: LD_INT 32
37396: DOUBLE
37397: EQUAL
37398: IFTRUE 37438
37400: LD_INT 33
37402: DOUBLE
37403: EQUAL
37404: IFTRUE 37438
37406: LD_INT 27
37408: DOUBLE
37409: EQUAL
37410: IFTRUE 37438
37412: LD_INT 26
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37438
37418: LD_INT 28
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37438
37424: LD_INT 29
37426: DOUBLE
37427: EQUAL
37428: IFTRUE 37438
37430: LD_INT 30
37432: DOUBLE
37433: EQUAL
37434: IFTRUE 37438
37436: GO 37494
37438: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37439: LD_ADDR_VAR 0 9
37443: PUSH
37444: LD_VAR 0 59
37448: PUSH
37449: LD_VAR 0 60
37453: PUSH
37454: LD_VAR 0 61
37458: PUSH
37459: LD_VAR 0 62
37463: PUSH
37464: LD_VAR 0 63
37468: PUSH
37469: LD_VAR 0 64
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: PUSH
37482: LD_VAR 0 4
37486: PUSH
37487: LD_INT 1
37489: PLUS
37490: ARRAY
37491: ST_TO_ADDR
37492: GO 37495
37494: POP
// temp_list2 = [ ] ;
37495: LD_ADDR_VAR 0 10
37499: PUSH
37500: EMPTY
37501: ST_TO_ADDR
// for i in temp_list do
37502: LD_ADDR_VAR 0 8
37506: PUSH
37507: LD_VAR 0 9
37511: PUSH
37512: FOR_IN
37513: IFFALSE 37565
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37515: LD_ADDR_VAR 0 10
37519: PUSH
37520: LD_VAR 0 10
37524: PUSH
37525: LD_VAR 0 8
37529: PUSH
37530: LD_INT 1
37532: ARRAY
37533: PUSH
37534: LD_VAR 0 2
37538: PLUS
37539: PUSH
37540: LD_VAR 0 8
37544: PUSH
37545: LD_INT 2
37547: ARRAY
37548: PUSH
37549: LD_VAR 0 3
37553: PLUS
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: ADD
37562: ST_TO_ADDR
37563: GO 37512
37565: POP
37566: POP
// result = temp_list2 ;
37567: LD_ADDR_VAR 0 7
37571: PUSH
37572: LD_VAR 0 10
37576: ST_TO_ADDR
// end ;
37577: LD_VAR 0 7
37581: RET
// export function EnemyInRange ( unit , dist ) ; begin
37582: LD_INT 0
37584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37585: LD_ADDR_VAR 0 3
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 255
37599: PPUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 250
37609: PPUSH
37610: LD_VAR 0 1
37614: PPUSH
37615: CALL_OW 251
37619: PPUSH
37620: LD_VAR 0 2
37624: PPUSH
37625: CALL 10955 0 4
37629: PUSH
37630: LD_INT 4
37632: ARRAY
37633: ST_TO_ADDR
// end ;
37634: LD_VAR 0 3
37638: RET
// export function PlayerSeeMe ( unit ) ; begin
37639: LD_INT 0
37641: PPUSH
// result := See ( your_side , unit ) ;
37642: LD_ADDR_VAR 0 2
37646: PUSH
37647: LD_OWVAR 2
37651: PPUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 292
37661: ST_TO_ADDR
// end ;
37662: LD_VAR 0 2
37666: RET
// export function ReverseDir ( unit ) ; begin
37667: LD_INT 0
37669: PPUSH
// if not unit then
37670: LD_VAR 0 1
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 37702
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 254
37693: PUSH
37694: LD_INT 3
37696: PLUS
37697: PUSH
37698: LD_INT 6
37700: MOD
37701: ST_TO_ADDR
// end ;
37702: LD_VAR 0 2
37706: RET
// export function ReverseArray ( array ) ; var i ; begin
37707: LD_INT 0
37709: PPUSH
37710: PPUSH
// if not array then
37711: LD_VAR 0 1
37715: NOT
37716: IFFALSE 37720
// exit ;
37718: GO 37775
// result := [ ] ;
37720: LD_ADDR_VAR 0 2
37724: PUSH
37725: EMPTY
37726: ST_TO_ADDR
// for i := array downto 1 do
37727: LD_ADDR_VAR 0 3
37731: PUSH
37732: DOUBLE
37733: LD_VAR 0 1
37737: INC
37738: ST_TO_ADDR
37739: LD_INT 1
37741: PUSH
37742: FOR_DOWNTO
37743: IFFALSE 37773
// result := Join ( result , array [ i ] ) ;
37745: LD_ADDR_VAR 0 2
37749: PUSH
37750: LD_VAR 0 2
37754: PPUSH
37755: LD_VAR 0 1
37759: PUSH
37760: LD_VAR 0 3
37764: ARRAY
37765: PPUSH
37766: CALL 42420 0 2
37770: ST_TO_ADDR
37771: GO 37742
37773: POP
37774: POP
// end ;
37775: LD_VAR 0 2
37779: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37780: LD_INT 0
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
// if not unit or not hexes then
37788: LD_VAR 0 1
37792: NOT
37793: PUSH
37794: LD_VAR 0 2
37798: NOT
37799: OR
37800: IFFALSE 37804
// exit ;
37802: GO 37927
// dist := 9999 ;
37804: LD_ADDR_VAR 0 5
37808: PUSH
37809: LD_INT 9999
37811: ST_TO_ADDR
// for i = 1 to hexes do
37812: LD_ADDR_VAR 0 4
37816: PUSH
37817: DOUBLE
37818: LD_INT 1
37820: DEC
37821: ST_TO_ADDR
37822: LD_VAR 0 2
37826: PUSH
37827: FOR_TO
37828: IFFALSE 37915
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37830: LD_ADDR_VAR 0 6
37834: PUSH
37835: LD_VAR 0 1
37839: PPUSH
37840: LD_VAR 0 2
37844: PUSH
37845: LD_VAR 0 4
37849: ARRAY
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: PPUSH
37855: LD_VAR 0 2
37859: PUSH
37860: LD_VAR 0 4
37864: ARRAY
37865: PUSH
37866: LD_INT 2
37868: ARRAY
37869: PPUSH
37870: CALL_OW 297
37874: ST_TO_ADDR
// if tdist < dist then
37875: LD_VAR 0 6
37879: PUSH
37880: LD_VAR 0 5
37884: LESS
37885: IFFALSE 37913
// begin hex := hexes [ i ] ;
37887: LD_ADDR_VAR 0 8
37891: PUSH
37892: LD_VAR 0 2
37896: PUSH
37897: LD_VAR 0 4
37901: ARRAY
37902: ST_TO_ADDR
// dist := tdist ;
37903: LD_ADDR_VAR 0 5
37907: PUSH
37908: LD_VAR 0 6
37912: ST_TO_ADDR
// end ; end ;
37913: GO 37827
37915: POP
37916: POP
// result := hex ;
37917: LD_ADDR_VAR 0 3
37921: PUSH
37922: LD_VAR 0 8
37926: ST_TO_ADDR
// end ;
37927: LD_VAR 0 3
37931: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37936: LD_VAR 0 1
37940: NOT
37941: PUSH
37942: LD_VAR 0 1
37946: PUSH
37947: LD_INT 21
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 23
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PPUSH
37971: CALL_OW 69
37975: IN
37976: NOT
37977: OR
37978: IFFALSE 37982
// exit ;
37980: GO 38029
// for i = 1 to 3 do
37982: LD_ADDR_VAR 0 3
37986: PUSH
37987: DOUBLE
37988: LD_INT 1
37990: DEC
37991: ST_TO_ADDR
37992: LD_INT 3
37994: PUSH
37995: FOR_TO
37996: IFFALSE 38027
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 250
38007: PPUSH
38008: LD_VAR 0 1
38012: PPUSH
38013: CALL_OW 251
38017: PPUSH
38018: LD_INT 1
38020: PPUSH
38021: CALL_OW 453
38025: GO 37995
38027: POP
38028: POP
// end ;
38029: LD_VAR 0 2
38033: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38034: LD_INT 0
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
// if not unit or not enemy_unit then
38042: LD_VAR 0 1
38046: NOT
38047: PUSH
38048: LD_VAR 0 2
38052: NOT
38053: OR
38054: IFFALSE 38058
// exit ;
38056: GO 38525
// if GetLives ( i ) < 250 then
38058: LD_VAR 0 4
38062: PPUSH
38063: CALL_OW 256
38067: PUSH
38068: LD_INT 250
38070: LESS
38071: IFFALSE 38084
// begin ComAutodestruct ( i ) ;
38073: LD_VAR 0 4
38077: PPUSH
38078: CALL 37932 0 1
// exit ;
38082: GO 38525
// end ; x := GetX ( enemy_unit ) ;
38084: LD_ADDR_VAR 0 7
38088: PUSH
38089: LD_VAR 0 2
38093: PPUSH
38094: CALL_OW 250
38098: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38099: LD_ADDR_VAR 0 8
38103: PUSH
38104: LD_VAR 0 2
38108: PPUSH
38109: CALL_OW 251
38113: ST_TO_ADDR
// if not x or not y then
38114: LD_VAR 0 7
38118: NOT
38119: PUSH
38120: LD_VAR 0 8
38124: NOT
38125: OR
38126: IFFALSE 38130
// exit ;
38128: GO 38525
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38130: LD_ADDR_VAR 0 6
38134: PUSH
38135: LD_VAR 0 7
38139: PPUSH
38140: LD_INT 0
38142: PPUSH
38143: LD_INT 4
38145: PPUSH
38146: CALL_OW 272
38150: PUSH
38151: LD_VAR 0 8
38155: PPUSH
38156: LD_INT 0
38158: PPUSH
38159: LD_INT 4
38161: PPUSH
38162: CALL_OW 273
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_VAR 0 7
38175: PPUSH
38176: LD_INT 1
38178: PPUSH
38179: LD_INT 4
38181: PPUSH
38182: CALL_OW 272
38186: PUSH
38187: LD_VAR 0 8
38191: PPUSH
38192: LD_INT 1
38194: PPUSH
38195: LD_INT 4
38197: PPUSH
38198: CALL_OW 273
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_VAR 0 7
38211: PPUSH
38212: LD_INT 2
38214: PPUSH
38215: LD_INT 4
38217: PPUSH
38218: CALL_OW 272
38222: PUSH
38223: LD_VAR 0 8
38227: PPUSH
38228: LD_INT 2
38230: PPUSH
38231: LD_INT 4
38233: PPUSH
38234: CALL_OW 273
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_VAR 0 7
38247: PPUSH
38248: LD_INT 3
38250: PPUSH
38251: LD_INT 4
38253: PPUSH
38254: CALL_OW 272
38258: PUSH
38259: LD_VAR 0 8
38263: PPUSH
38264: LD_INT 3
38266: PPUSH
38267: LD_INT 4
38269: PPUSH
38270: CALL_OW 273
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_VAR 0 7
38283: PPUSH
38284: LD_INT 4
38286: PPUSH
38287: LD_INT 4
38289: PPUSH
38290: CALL_OW 272
38294: PUSH
38295: LD_VAR 0 8
38299: PPUSH
38300: LD_INT 4
38302: PPUSH
38303: LD_INT 4
38305: PPUSH
38306: CALL_OW 273
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_VAR 0 7
38319: PPUSH
38320: LD_INT 5
38322: PPUSH
38323: LD_INT 4
38325: PPUSH
38326: CALL_OW 272
38330: PUSH
38331: LD_VAR 0 8
38335: PPUSH
38336: LD_INT 5
38338: PPUSH
38339: LD_INT 4
38341: PPUSH
38342: CALL_OW 273
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: ST_TO_ADDR
// for i = tmp downto 1 do
38359: LD_ADDR_VAR 0 4
38363: PUSH
38364: DOUBLE
38365: LD_VAR 0 6
38369: INC
38370: ST_TO_ADDR
38371: LD_INT 1
38373: PUSH
38374: FOR_DOWNTO
38375: IFFALSE 38476
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38377: LD_VAR 0 6
38381: PUSH
38382: LD_VAR 0 4
38386: ARRAY
38387: PUSH
38388: LD_INT 1
38390: ARRAY
38391: PPUSH
38392: LD_VAR 0 6
38396: PUSH
38397: LD_VAR 0 4
38401: ARRAY
38402: PUSH
38403: LD_INT 2
38405: ARRAY
38406: PPUSH
38407: CALL_OW 488
38411: NOT
38412: PUSH
38413: LD_VAR 0 6
38417: PUSH
38418: LD_VAR 0 4
38422: ARRAY
38423: PUSH
38424: LD_INT 1
38426: ARRAY
38427: PPUSH
38428: LD_VAR 0 6
38432: PUSH
38433: LD_VAR 0 4
38437: ARRAY
38438: PUSH
38439: LD_INT 2
38441: ARRAY
38442: PPUSH
38443: CALL_OW 428
38447: PUSH
38448: LD_INT 0
38450: NONEQUAL
38451: OR
38452: IFFALSE 38474
// tmp := Delete ( tmp , i ) ;
38454: LD_ADDR_VAR 0 6
38458: PUSH
38459: LD_VAR 0 6
38463: PPUSH
38464: LD_VAR 0 4
38468: PPUSH
38469: CALL_OW 3
38473: ST_TO_ADDR
38474: GO 38374
38476: POP
38477: POP
// j := GetClosestHex ( unit , tmp ) ;
38478: LD_ADDR_VAR 0 5
38482: PUSH
38483: LD_VAR 0 1
38487: PPUSH
38488: LD_VAR 0 6
38492: PPUSH
38493: CALL 37780 0 2
38497: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38498: LD_VAR 0 1
38502: PPUSH
38503: LD_VAR 0 5
38507: PUSH
38508: LD_INT 1
38510: ARRAY
38511: PPUSH
38512: LD_VAR 0 5
38516: PUSH
38517: LD_INT 2
38519: ARRAY
38520: PPUSH
38521: CALL_OW 111
// end ;
38525: LD_VAR 0 3
38529: RET
// export function PrepareApemanSoldier ( ) ; begin
38530: LD_INT 0
38532: PPUSH
// uc_nation := 0 ;
38533: LD_ADDR_OWVAR 21
38537: PUSH
38538: LD_INT 0
38540: ST_TO_ADDR
// hc_sex := sex_male ;
38541: LD_ADDR_OWVAR 27
38545: PUSH
38546: LD_INT 1
38548: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38549: LD_ADDR_OWVAR 28
38553: PUSH
38554: LD_INT 15
38556: ST_TO_ADDR
// hc_gallery :=  ;
38557: LD_ADDR_OWVAR 33
38561: PUSH
38562: LD_STRING 
38564: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38565: LD_ADDR_OWVAR 31
38569: PUSH
38570: LD_INT 0
38572: PPUSH
38573: LD_INT 3
38575: PPUSH
38576: CALL_OW 12
38580: PUSH
38581: LD_INT 0
38583: PPUSH
38584: LD_INT 3
38586: PPUSH
38587: CALL_OW 12
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: ST_TO_ADDR
// end ;
38604: LD_VAR 0 1
38608: RET
// export function PrepareApemanEngineer ( ) ; begin
38609: LD_INT 0
38611: PPUSH
// uc_nation := 0 ;
38612: LD_ADDR_OWVAR 21
38616: PUSH
38617: LD_INT 0
38619: ST_TO_ADDR
// hc_sex := sex_male ;
38620: LD_ADDR_OWVAR 27
38624: PUSH
38625: LD_INT 1
38627: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38628: LD_ADDR_OWVAR 28
38632: PUSH
38633: LD_INT 16
38635: ST_TO_ADDR
// hc_gallery :=  ;
38636: LD_ADDR_OWVAR 33
38640: PUSH
38641: LD_STRING 
38643: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38644: LD_ADDR_OWVAR 31
38648: PUSH
38649: LD_INT 0
38651: PPUSH
38652: LD_INT 3
38654: PPUSH
38655: CALL_OW 12
38659: PUSH
38660: LD_INT 0
38662: PPUSH
38663: LD_INT 3
38665: PPUSH
38666: CALL_OW 12
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: ST_TO_ADDR
// end ;
38683: LD_VAR 0 1
38687: RET
// export function PrepareApeman ( agressivity ) ; begin
38688: LD_INT 0
38690: PPUSH
// uc_side := 0 ;
38691: LD_ADDR_OWVAR 20
38695: PUSH
38696: LD_INT 0
38698: ST_TO_ADDR
// uc_nation := 0 ;
38699: LD_ADDR_OWVAR 21
38703: PUSH
38704: LD_INT 0
38706: ST_TO_ADDR
// hc_sex := sex_male ;
38707: LD_ADDR_OWVAR 27
38711: PUSH
38712: LD_INT 1
38714: ST_TO_ADDR
// hc_class := class_apeman ;
38715: LD_ADDR_OWVAR 28
38719: PUSH
38720: LD_INT 12
38722: ST_TO_ADDR
// hc_gallery :=  ;
38723: LD_ADDR_OWVAR 33
38727: PUSH
38728: LD_STRING 
38730: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38731: LD_ADDR_OWVAR 35
38735: PUSH
38736: LD_VAR 0 1
38740: NEG
38741: PPUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: CALL_OW 12
38751: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38752: LD_ADDR_OWVAR 31
38756: PUSH
38757: LD_INT 0
38759: PPUSH
38760: LD_INT 3
38762: PPUSH
38763: CALL_OW 12
38767: PUSH
38768: LD_INT 0
38770: PPUSH
38771: LD_INT 3
38773: PPUSH
38774: CALL_OW 12
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// end ;
38791: LD_VAR 0 2
38795: RET
// export function PrepareTiger ( agressivity ) ; begin
38796: LD_INT 0
38798: PPUSH
// uc_side := 0 ;
38799: LD_ADDR_OWVAR 20
38803: PUSH
38804: LD_INT 0
38806: ST_TO_ADDR
// uc_nation := 0 ;
38807: LD_ADDR_OWVAR 21
38811: PUSH
38812: LD_INT 0
38814: ST_TO_ADDR
// hc_class := class_tiger ;
38815: LD_ADDR_OWVAR 28
38819: PUSH
38820: LD_INT 14
38822: ST_TO_ADDR
// hc_gallery :=  ;
38823: LD_ADDR_OWVAR 33
38827: PUSH
38828: LD_STRING 
38830: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38831: LD_ADDR_OWVAR 35
38835: PUSH
38836: LD_VAR 0 1
38840: NEG
38841: PPUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 12
38851: ST_TO_ADDR
// end ;
38852: LD_VAR 0 2
38856: RET
// export function PrepareEnchidna ( ) ; begin
38857: LD_INT 0
38859: PPUSH
// uc_side := 0 ;
38860: LD_ADDR_OWVAR 20
38864: PUSH
38865: LD_INT 0
38867: ST_TO_ADDR
// uc_nation := 0 ;
38868: LD_ADDR_OWVAR 21
38872: PUSH
38873: LD_INT 0
38875: ST_TO_ADDR
// hc_class := class_baggie ;
38876: LD_ADDR_OWVAR 28
38880: PUSH
38881: LD_INT 13
38883: ST_TO_ADDR
// hc_gallery :=  ;
38884: LD_ADDR_OWVAR 33
38888: PUSH
38889: LD_STRING 
38891: ST_TO_ADDR
// end ;
38892: LD_VAR 0 1
38896: RET
// export function PrepareFrog ( ) ; begin
38897: LD_INT 0
38899: PPUSH
// uc_side := 0 ;
38900: LD_ADDR_OWVAR 20
38904: PUSH
38905: LD_INT 0
38907: ST_TO_ADDR
// uc_nation := 0 ;
38908: LD_ADDR_OWVAR 21
38912: PUSH
38913: LD_INT 0
38915: ST_TO_ADDR
// hc_class := class_frog ;
38916: LD_ADDR_OWVAR 28
38920: PUSH
38921: LD_INT 19
38923: ST_TO_ADDR
// hc_gallery :=  ;
38924: LD_ADDR_OWVAR 33
38928: PUSH
38929: LD_STRING 
38931: ST_TO_ADDR
// end ;
38932: LD_VAR 0 1
38936: RET
// export function PrepareFish ( ) ; begin
38937: LD_INT 0
38939: PPUSH
// uc_side := 0 ;
38940: LD_ADDR_OWVAR 20
38944: PUSH
38945: LD_INT 0
38947: ST_TO_ADDR
// uc_nation := 0 ;
38948: LD_ADDR_OWVAR 21
38952: PUSH
38953: LD_INT 0
38955: ST_TO_ADDR
// hc_class := class_fish ;
38956: LD_ADDR_OWVAR 28
38960: PUSH
38961: LD_INT 20
38963: ST_TO_ADDR
// hc_gallery :=  ;
38964: LD_ADDR_OWVAR 33
38968: PUSH
38969: LD_STRING 
38971: ST_TO_ADDR
// end ;
38972: LD_VAR 0 1
38976: RET
// export function PrepareBird ( ) ; begin
38977: LD_INT 0
38979: PPUSH
// uc_side := 0 ;
38980: LD_ADDR_OWVAR 20
38984: PUSH
38985: LD_INT 0
38987: ST_TO_ADDR
// uc_nation := 0 ;
38988: LD_ADDR_OWVAR 21
38992: PUSH
38993: LD_INT 0
38995: ST_TO_ADDR
// hc_class := class_phororhacos ;
38996: LD_ADDR_OWVAR 28
39000: PUSH
39001: LD_INT 18
39003: ST_TO_ADDR
// hc_gallery :=  ;
39004: LD_ADDR_OWVAR 33
39008: PUSH
39009: LD_STRING 
39011: ST_TO_ADDR
// end ;
39012: LD_VAR 0 1
39016: RET
// export function PrepareHorse ( ) ; begin
39017: LD_INT 0
39019: PPUSH
// uc_side := 0 ;
39020: LD_ADDR_OWVAR 20
39024: PUSH
39025: LD_INT 0
39027: ST_TO_ADDR
// uc_nation := 0 ;
39028: LD_ADDR_OWVAR 21
39032: PUSH
39033: LD_INT 0
39035: ST_TO_ADDR
// hc_class := class_horse ;
39036: LD_ADDR_OWVAR 28
39040: PUSH
39041: LD_INT 21
39043: ST_TO_ADDR
// hc_gallery :=  ;
39044: LD_ADDR_OWVAR 33
39048: PUSH
39049: LD_STRING 
39051: ST_TO_ADDR
// end ;
39052: LD_VAR 0 1
39056: RET
// export function PrepareMastodont ( ) ; begin
39057: LD_INT 0
39059: PPUSH
// uc_side := 0 ;
39060: LD_ADDR_OWVAR 20
39064: PUSH
39065: LD_INT 0
39067: ST_TO_ADDR
// uc_nation := 0 ;
39068: LD_ADDR_OWVAR 21
39072: PUSH
39073: LD_INT 0
39075: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39076: LD_ADDR_OWVAR 37
39080: PUSH
39081: LD_INT 31
39083: ST_TO_ADDR
// vc_control := control_rider ;
39084: LD_ADDR_OWVAR 38
39088: PUSH
39089: LD_INT 4
39091: ST_TO_ADDR
// end ;
39092: LD_VAR 0 1
39096: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39097: LD_INT 0
39099: PPUSH
39100: PPUSH
39101: PPUSH
// uc_side = 0 ;
39102: LD_ADDR_OWVAR 20
39106: PUSH
39107: LD_INT 0
39109: ST_TO_ADDR
// uc_nation = 0 ;
39110: LD_ADDR_OWVAR 21
39114: PUSH
39115: LD_INT 0
39117: ST_TO_ADDR
// InitHc_All ( ) ;
39118: CALL_OW 584
// InitVc ;
39122: CALL_OW 20
// if mastodonts then
39126: LD_VAR 0 6
39130: IFFALSE 39197
// for i = 1 to mastodonts do
39132: LD_ADDR_VAR 0 11
39136: PUSH
39137: DOUBLE
39138: LD_INT 1
39140: DEC
39141: ST_TO_ADDR
39142: LD_VAR 0 6
39146: PUSH
39147: FOR_TO
39148: IFFALSE 39195
// begin vc_chassis := 31 ;
39150: LD_ADDR_OWVAR 37
39154: PUSH
39155: LD_INT 31
39157: ST_TO_ADDR
// vc_control := control_rider ;
39158: LD_ADDR_OWVAR 38
39162: PUSH
39163: LD_INT 4
39165: ST_TO_ADDR
// animal := CreateVehicle ;
39166: LD_ADDR_VAR 0 12
39170: PUSH
39171: CALL_OW 45
39175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39176: LD_VAR 0 12
39180: PPUSH
39181: LD_VAR 0 8
39185: PPUSH
39186: LD_INT 0
39188: PPUSH
39189: CALL 41325 0 3
// end ;
39193: GO 39147
39195: POP
39196: POP
// if horses then
39197: LD_VAR 0 5
39201: IFFALSE 39268
// for i = 1 to horses do
39203: LD_ADDR_VAR 0 11
39207: PUSH
39208: DOUBLE
39209: LD_INT 1
39211: DEC
39212: ST_TO_ADDR
39213: LD_VAR 0 5
39217: PUSH
39218: FOR_TO
39219: IFFALSE 39266
// begin hc_class := 21 ;
39221: LD_ADDR_OWVAR 28
39225: PUSH
39226: LD_INT 21
39228: ST_TO_ADDR
// hc_gallery :=  ;
39229: LD_ADDR_OWVAR 33
39233: PUSH
39234: LD_STRING 
39236: ST_TO_ADDR
// animal := CreateHuman ;
39237: LD_ADDR_VAR 0 12
39241: PUSH
39242: CALL_OW 44
39246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39247: LD_VAR 0 12
39251: PPUSH
39252: LD_VAR 0 8
39256: PPUSH
39257: LD_INT 0
39259: PPUSH
39260: CALL 41325 0 3
// end ;
39264: GO 39218
39266: POP
39267: POP
// if birds then
39268: LD_VAR 0 1
39272: IFFALSE 39339
// for i = 1 to birds do
39274: LD_ADDR_VAR 0 11
39278: PUSH
39279: DOUBLE
39280: LD_INT 1
39282: DEC
39283: ST_TO_ADDR
39284: LD_VAR 0 1
39288: PUSH
39289: FOR_TO
39290: IFFALSE 39337
// begin hc_class := 18 ;
39292: LD_ADDR_OWVAR 28
39296: PUSH
39297: LD_INT 18
39299: ST_TO_ADDR
// hc_gallery =  ;
39300: LD_ADDR_OWVAR 33
39304: PUSH
39305: LD_STRING 
39307: ST_TO_ADDR
// animal := CreateHuman ;
39308: LD_ADDR_VAR 0 12
39312: PUSH
39313: CALL_OW 44
39317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39318: LD_VAR 0 12
39322: PPUSH
39323: LD_VAR 0 8
39327: PPUSH
39328: LD_INT 0
39330: PPUSH
39331: CALL 41325 0 3
// end ;
39335: GO 39289
39337: POP
39338: POP
// if tigers then
39339: LD_VAR 0 2
39343: IFFALSE 39427
// for i = 1 to tigers do
39345: LD_ADDR_VAR 0 11
39349: PUSH
39350: DOUBLE
39351: LD_INT 1
39353: DEC
39354: ST_TO_ADDR
39355: LD_VAR 0 2
39359: PUSH
39360: FOR_TO
39361: IFFALSE 39425
// begin hc_class = class_tiger ;
39363: LD_ADDR_OWVAR 28
39367: PUSH
39368: LD_INT 14
39370: ST_TO_ADDR
// hc_gallery =  ;
39371: LD_ADDR_OWVAR 33
39375: PUSH
39376: LD_STRING 
39378: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39379: LD_ADDR_OWVAR 35
39383: PUSH
39384: LD_INT 7
39386: NEG
39387: PPUSH
39388: LD_INT 7
39390: PPUSH
39391: CALL_OW 12
39395: ST_TO_ADDR
// animal := CreateHuman ;
39396: LD_ADDR_VAR 0 12
39400: PUSH
39401: CALL_OW 44
39405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39406: LD_VAR 0 12
39410: PPUSH
39411: LD_VAR 0 8
39415: PPUSH
39416: LD_INT 0
39418: PPUSH
39419: CALL 41325 0 3
// end ;
39423: GO 39360
39425: POP
39426: POP
// if apemans then
39427: LD_VAR 0 3
39431: IFFALSE 39554
// for i = 1 to apemans do
39433: LD_ADDR_VAR 0 11
39437: PUSH
39438: DOUBLE
39439: LD_INT 1
39441: DEC
39442: ST_TO_ADDR
39443: LD_VAR 0 3
39447: PUSH
39448: FOR_TO
39449: IFFALSE 39552
// begin hc_class = class_apeman ;
39451: LD_ADDR_OWVAR 28
39455: PUSH
39456: LD_INT 12
39458: ST_TO_ADDR
// hc_gallery =  ;
39459: LD_ADDR_OWVAR 33
39463: PUSH
39464: LD_STRING 
39466: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39467: LD_ADDR_OWVAR 35
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PPUSH
39476: LD_INT 2
39478: PPUSH
39479: CALL_OW 12
39483: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39484: LD_ADDR_OWVAR 31
39488: PUSH
39489: LD_INT 1
39491: PPUSH
39492: LD_INT 3
39494: PPUSH
39495: CALL_OW 12
39499: PUSH
39500: LD_INT 1
39502: PPUSH
39503: LD_INT 3
39505: PPUSH
39506: CALL_OW 12
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// animal := CreateHuman ;
39523: LD_ADDR_VAR 0 12
39527: PUSH
39528: CALL_OW 44
39532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39533: LD_VAR 0 12
39537: PPUSH
39538: LD_VAR 0 8
39542: PPUSH
39543: LD_INT 0
39545: PPUSH
39546: CALL 41325 0 3
// end ;
39550: GO 39448
39552: POP
39553: POP
// if enchidnas then
39554: LD_VAR 0 4
39558: IFFALSE 39625
// for i = 1 to enchidnas do
39560: LD_ADDR_VAR 0 11
39564: PUSH
39565: DOUBLE
39566: LD_INT 1
39568: DEC
39569: ST_TO_ADDR
39570: LD_VAR 0 4
39574: PUSH
39575: FOR_TO
39576: IFFALSE 39623
// begin hc_class = 13 ;
39578: LD_ADDR_OWVAR 28
39582: PUSH
39583: LD_INT 13
39585: ST_TO_ADDR
// hc_gallery =  ;
39586: LD_ADDR_OWVAR 33
39590: PUSH
39591: LD_STRING 
39593: ST_TO_ADDR
// animal := CreateHuman ;
39594: LD_ADDR_VAR 0 12
39598: PUSH
39599: CALL_OW 44
39603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39604: LD_VAR 0 12
39608: PPUSH
39609: LD_VAR 0 8
39613: PPUSH
39614: LD_INT 0
39616: PPUSH
39617: CALL 41325 0 3
// end ;
39621: GO 39575
39623: POP
39624: POP
// if fishes then
39625: LD_VAR 0 7
39629: IFFALSE 39696
// for i = 1 to fishes do
39631: LD_ADDR_VAR 0 11
39635: PUSH
39636: DOUBLE
39637: LD_INT 1
39639: DEC
39640: ST_TO_ADDR
39641: LD_VAR 0 7
39645: PUSH
39646: FOR_TO
39647: IFFALSE 39694
// begin hc_class = 20 ;
39649: LD_ADDR_OWVAR 28
39653: PUSH
39654: LD_INT 20
39656: ST_TO_ADDR
// hc_gallery =  ;
39657: LD_ADDR_OWVAR 33
39661: PUSH
39662: LD_STRING 
39664: ST_TO_ADDR
// animal := CreateHuman ;
39665: LD_ADDR_VAR 0 12
39669: PUSH
39670: CALL_OW 44
39674: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39675: LD_VAR 0 12
39679: PPUSH
39680: LD_VAR 0 9
39684: PPUSH
39685: LD_INT 0
39687: PPUSH
39688: CALL 41325 0 3
// end ;
39692: GO 39646
39694: POP
39695: POP
// end ;
39696: LD_VAR 0 10
39700: RET
// export function WantHeal ( sci , unit ) ; begin
39701: LD_INT 0
39703: PPUSH
// if GetTaskList ( sci ) > 0 then
39704: LD_VAR 0 1
39708: PPUSH
39709: CALL_OW 437
39713: PUSH
39714: LD_INT 0
39716: GREATER
39717: IFFALSE 39787
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 437
39728: PUSH
39729: LD_INT 1
39731: ARRAY
39732: PUSH
39733: LD_INT 1
39735: ARRAY
39736: PUSH
39737: LD_STRING l
39739: EQUAL
39740: PUSH
39741: LD_VAR 0 1
39745: PPUSH
39746: CALL_OW 437
39750: PUSH
39751: LD_INT 1
39753: ARRAY
39754: PUSH
39755: LD_INT 4
39757: ARRAY
39758: PUSH
39759: LD_VAR 0 2
39763: EQUAL
39764: AND
39765: IFFALSE 39777
// result := true else
39767: LD_ADDR_VAR 0 3
39771: PUSH
39772: LD_INT 1
39774: ST_TO_ADDR
39775: GO 39785
// result := false ;
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_INT 0
39784: ST_TO_ADDR
// end else
39785: GO 39795
// result := false ;
39787: LD_ADDR_VAR 0 3
39791: PUSH
39792: LD_INT 0
39794: ST_TO_ADDR
// end ;
39795: LD_VAR 0 3
39799: RET
// export function HealTarget ( sci ) ; begin
39800: LD_INT 0
39802: PPUSH
// if not sci then
39803: LD_VAR 0 1
39807: NOT
39808: IFFALSE 39812
// exit ;
39810: GO 39877
// result := 0 ;
39812: LD_ADDR_VAR 0 2
39816: PUSH
39817: LD_INT 0
39819: ST_TO_ADDR
// if GetTaskList ( sci ) then
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 437
39829: IFFALSE 39877
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 437
39840: PUSH
39841: LD_INT 1
39843: ARRAY
39844: PUSH
39845: LD_INT 1
39847: ARRAY
39848: PUSH
39849: LD_STRING l
39851: EQUAL
39852: IFFALSE 39877
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39854: LD_ADDR_VAR 0 2
39858: PUSH
39859: LD_VAR 0 1
39863: PPUSH
39864: CALL_OW 437
39868: PUSH
39869: LD_INT 1
39871: ARRAY
39872: PUSH
39873: LD_INT 4
39875: ARRAY
39876: ST_TO_ADDR
// end ;
39877: LD_VAR 0 2
39881: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39882: LD_INT 0
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
// if not base_units then
39888: LD_VAR 0 1
39892: NOT
39893: IFFALSE 39897
// exit ;
39895: GO 39984
// result := false ;
39897: LD_ADDR_VAR 0 2
39901: PUSH
39902: LD_INT 0
39904: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39905: LD_ADDR_VAR 0 5
39909: PUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: LD_INT 21
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PPUSH
39925: CALL_OW 72
39929: ST_TO_ADDR
// if not tmp then
39930: LD_VAR 0 5
39934: NOT
39935: IFFALSE 39939
// exit ;
39937: GO 39984
// for i in tmp do
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: LD_VAR 0 5
39948: PUSH
39949: FOR_IN
39950: IFFALSE 39982
// begin result := EnemyInRange ( i , 22 ) ;
39952: LD_ADDR_VAR 0 2
39956: PUSH
39957: LD_VAR 0 3
39961: PPUSH
39962: LD_INT 22
39964: PPUSH
39965: CALL 37582 0 2
39969: ST_TO_ADDR
// if result then
39970: LD_VAR 0 2
39974: IFFALSE 39980
// exit ;
39976: POP
39977: POP
39978: GO 39984
// end ;
39980: GO 39949
39982: POP
39983: POP
// end ;
39984: LD_VAR 0 2
39988: RET
// export function FilterByTag ( units , tag ) ; begin
39989: LD_INT 0
39991: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_VAR 0 1
40001: PPUSH
40002: LD_INT 120
40004: PUSH
40005: LD_VAR 0 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PPUSH
40014: CALL_OW 72
40018: ST_TO_ADDR
// end ;
40019: LD_VAR 0 3
40023: RET
// export function IsDriver ( un ) ; begin
40024: LD_INT 0
40026: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40027: LD_ADDR_VAR 0 2
40031: PUSH
40032: LD_VAR 0 1
40036: PUSH
40037: LD_INT 55
40039: PUSH
40040: EMPTY
40041: LIST
40042: PPUSH
40043: CALL_OW 69
40047: IN
40048: ST_TO_ADDR
// end ;
40049: LD_VAR 0 2
40053: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40054: LD_INT 0
40056: PPUSH
40057: PPUSH
// list := [ ] ;
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: EMPTY
40064: ST_TO_ADDR
// case d of 0 :
40065: LD_VAR 0 3
40069: PUSH
40070: LD_INT 0
40072: DOUBLE
40073: EQUAL
40074: IFTRUE 40078
40076: GO 40211
40078: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40079: LD_ADDR_VAR 0 5
40083: PUSH
40084: LD_VAR 0 1
40088: PUSH
40089: LD_INT 4
40091: MINUS
40092: PUSH
40093: LD_VAR 0 2
40097: PUSH
40098: LD_INT 4
40100: MINUS
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: PUSH
40110: LD_VAR 0 1
40114: PUSH
40115: LD_INT 3
40117: MINUS
40118: PUSH
40119: LD_VAR 0 2
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: PUSH
40132: LD_VAR 0 1
40136: PUSH
40137: LD_INT 4
40139: PLUS
40140: PUSH
40141: LD_VAR 0 2
40145: PUSH
40146: LD_INT 4
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: PUSH
40154: LD_VAR 0 1
40158: PUSH
40159: LD_INT 3
40161: PLUS
40162: PUSH
40163: LD_VAR 0 2
40167: PUSH
40168: LD_INT 3
40170: PLUS
40171: PUSH
40172: LD_INT 5
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: PUSH
40180: LD_VAR 0 1
40184: PUSH
40185: LD_VAR 0 2
40189: PUSH
40190: LD_INT 4
40192: PLUS
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: ST_TO_ADDR
// end ; 1 :
40209: GO 40909
40211: LD_INT 1
40213: DOUBLE
40214: EQUAL
40215: IFTRUE 40219
40217: GO 40352
40219: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40220: LD_ADDR_VAR 0 5
40224: PUSH
40225: LD_VAR 0 1
40229: PUSH
40230: LD_VAR 0 2
40234: PUSH
40235: LD_INT 4
40237: MINUS
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: PUSH
40247: LD_VAR 0 1
40251: PUSH
40252: LD_INT 3
40254: MINUS
40255: PUSH
40256: LD_VAR 0 2
40260: PUSH
40261: LD_INT 3
40263: MINUS
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: PUSH
40273: LD_VAR 0 1
40277: PUSH
40278: LD_INT 4
40280: MINUS
40281: PUSH
40282: LD_VAR 0 2
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: PUSH
40295: LD_VAR 0 1
40299: PUSH
40300: LD_VAR 0 2
40304: PUSH
40305: LD_INT 3
40307: PLUS
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: PUSH
40317: LD_VAR 0 1
40321: PUSH
40322: LD_INT 4
40324: PLUS
40325: PUSH
40326: LD_VAR 0 2
40330: PUSH
40331: LD_INT 4
40333: PLUS
40334: PUSH
40335: LD_INT 5
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// end ; 2 :
40350: GO 40909
40352: LD_INT 2
40354: DOUBLE
40355: EQUAL
40356: IFTRUE 40360
40358: GO 40489
40360: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40361: LD_ADDR_VAR 0 5
40365: PUSH
40366: LD_VAR 0 1
40370: PUSH
40371: LD_VAR 0 2
40375: PUSH
40376: LD_INT 3
40378: MINUS
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: PUSH
40388: LD_VAR 0 1
40392: PUSH
40393: LD_INT 4
40395: PLUS
40396: PUSH
40397: LD_VAR 0 2
40401: PUSH
40402: LD_INT 4
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: PUSH
40410: LD_VAR 0 1
40414: PUSH
40415: LD_VAR 0 2
40419: PUSH
40420: LD_INT 4
40422: PLUS
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: PUSH
40432: LD_VAR 0 1
40436: PUSH
40437: LD_INT 3
40439: MINUS
40440: PUSH
40441: LD_VAR 0 2
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: PUSH
40454: LD_VAR 0 1
40458: PUSH
40459: LD_INT 4
40461: MINUS
40462: PUSH
40463: LD_VAR 0 2
40467: PUSH
40468: LD_INT 4
40470: MINUS
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
// end ; 3 :
40487: GO 40909
40489: LD_INT 3
40491: DOUBLE
40492: EQUAL
40493: IFTRUE 40497
40495: GO 40630
40497: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40498: LD_ADDR_VAR 0 5
40502: PUSH
40503: LD_VAR 0 1
40507: PUSH
40508: LD_INT 3
40510: PLUS
40511: PUSH
40512: LD_VAR 0 2
40516: PUSH
40517: LD_INT 4
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: PUSH
40525: LD_VAR 0 1
40529: PUSH
40530: LD_INT 4
40532: PLUS
40533: PUSH
40534: LD_VAR 0 2
40538: PUSH
40539: LD_INT 4
40541: PLUS
40542: PUSH
40543: LD_INT 5
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: LIST
40550: PUSH
40551: LD_VAR 0 1
40555: PUSH
40556: LD_INT 4
40558: MINUS
40559: PUSH
40560: LD_VAR 0 2
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: PUSH
40573: LD_VAR 0 1
40577: PUSH
40578: LD_VAR 0 2
40582: PUSH
40583: LD_INT 4
40585: MINUS
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: PUSH
40595: LD_VAR 0 1
40599: PUSH
40600: LD_INT 3
40602: MINUS
40603: PUSH
40604: LD_VAR 0 2
40608: PUSH
40609: LD_INT 3
40611: MINUS
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
// end ; 4 :
40628: GO 40909
40630: LD_INT 4
40632: DOUBLE
40633: EQUAL
40634: IFTRUE 40638
40636: GO 40771
40638: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40639: LD_ADDR_VAR 0 5
40643: PUSH
40644: LD_VAR 0 1
40648: PUSH
40649: LD_VAR 0 2
40653: PUSH
40654: LD_INT 4
40656: PLUS
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: PUSH
40666: LD_VAR 0 1
40670: PUSH
40671: LD_INT 3
40673: PLUS
40674: PUSH
40675: LD_VAR 0 2
40679: PUSH
40680: LD_INT 3
40682: PLUS
40683: PUSH
40684: LD_INT 5
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: PUSH
40692: LD_VAR 0 1
40696: PUSH
40697: LD_INT 4
40699: PLUS
40700: PUSH
40701: LD_VAR 0 2
40705: PUSH
40706: LD_INT 4
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: PUSH
40714: LD_VAR 0 1
40718: PUSH
40719: LD_VAR 0 2
40723: PUSH
40724: LD_INT 3
40726: MINUS
40727: PUSH
40728: LD_INT 3
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: PUSH
40736: LD_VAR 0 1
40740: PUSH
40741: LD_INT 4
40743: MINUS
40744: PUSH
40745: LD_VAR 0 2
40749: PUSH
40750: LD_INT 4
40752: MINUS
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: ST_TO_ADDR
// end ; 5 :
40769: GO 40909
40771: LD_INT 5
40773: DOUBLE
40774: EQUAL
40775: IFTRUE 40779
40777: GO 40908
40779: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40780: LD_ADDR_VAR 0 5
40784: PUSH
40785: LD_VAR 0 1
40789: PUSH
40790: LD_INT 4
40792: MINUS
40793: PUSH
40794: LD_VAR 0 2
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: PUSH
40807: LD_VAR 0 1
40811: PUSH
40812: LD_VAR 0 2
40816: PUSH
40817: LD_INT 4
40819: MINUS
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: PUSH
40829: LD_VAR 0 1
40833: PUSH
40834: LD_INT 4
40836: PLUS
40837: PUSH
40838: LD_VAR 0 2
40842: PUSH
40843: LD_INT 4
40845: PLUS
40846: PUSH
40847: LD_INT 5
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: PUSH
40855: LD_VAR 0 1
40859: PUSH
40860: LD_INT 3
40862: PLUS
40863: PUSH
40864: LD_VAR 0 2
40868: PUSH
40869: LD_INT 4
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: PUSH
40877: LD_VAR 0 1
40881: PUSH
40882: LD_VAR 0 2
40886: PUSH
40887: LD_INT 3
40889: PLUS
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: ST_TO_ADDR
// end ; end ;
40906: GO 40909
40908: POP
// result := list ;
40909: LD_ADDR_VAR 0 4
40913: PUSH
40914: LD_VAR 0 5
40918: ST_TO_ADDR
// end ;
40919: LD_VAR 0 4
40923: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40924: LD_INT 0
40926: PPUSH
40927: PPUSH
40928: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40929: LD_VAR 0 1
40933: NOT
40934: PUSH
40935: LD_VAR 0 2
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: LD_INT 4
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: IN
40958: NOT
40959: OR
40960: IFFALSE 40964
// exit ;
40962: GO 41047
// tmp := [ ] ;
40964: LD_ADDR_VAR 0 5
40968: PUSH
40969: EMPTY
40970: ST_TO_ADDR
// for i in units do
40971: LD_ADDR_VAR 0 4
40975: PUSH
40976: LD_VAR 0 1
40980: PUSH
40981: FOR_IN
40982: IFFALSE 41016
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40984: LD_ADDR_VAR 0 5
40988: PUSH
40989: LD_VAR 0 5
40993: PPUSH
40994: LD_VAR 0 4
40998: PPUSH
40999: LD_VAR 0 2
41003: PPUSH
41004: CALL_OW 259
41008: PPUSH
41009: CALL 42420 0 2
41013: ST_TO_ADDR
41014: GO 40981
41016: POP
41017: POP
// if not tmp then
41018: LD_VAR 0 5
41022: NOT
41023: IFFALSE 41027
// exit ;
41025: GO 41047
// result := SortListByListDesc ( units , tmp ) ;
41027: LD_ADDR_VAR 0 3
41031: PUSH
41032: LD_VAR 0 1
41036: PPUSH
41037: LD_VAR 0 5
41041: PPUSH
41042: CALL_OW 77
41046: ST_TO_ADDR
// end ;
41047: LD_VAR 0 3
41051: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41052: LD_INT 0
41054: PPUSH
41055: PPUSH
41056: PPUSH
// result := false ;
41057: LD_ADDR_VAR 0 3
41061: PUSH
41062: LD_INT 0
41064: ST_TO_ADDR
// if not building then
41065: LD_VAR 0 2
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41212
// x := GetX ( building ) ;
41074: LD_ADDR_VAR 0 4
41078: PUSH
41079: LD_VAR 0 2
41083: PPUSH
41084: CALL_OW 250
41088: ST_TO_ADDR
// y := GetY ( building ) ;
41089: LD_ADDR_VAR 0 5
41093: PUSH
41094: LD_VAR 0 2
41098: PPUSH
41099: CALL_OW 251
41103: ST_TO_ADDR
// if not x or not y then
41104: LD_VAR 0 4
41108: NOT
41109: PUSH
41110: LD_VAR 0 5
41114: NOT
41115: OR
41116: IFFALSE 41120
// exit ;
41118: GO 41212
// if GetTaskList ( unit ) then
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 437
41129: IFFALSE 41212
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41131: LD_STRING e
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 437
41143: PUSH
41144: LD_INT 1
41146: ARRAY
41147: PUSH
41148: LD_INT 1
41150: ARRAY
41151: EQUAL
41152: PUSH
41153: LD_VAR 0 4
41157: PUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: CALL_OW 437
41167: PUSH
41168: LD_INT 1
41170: ARRAY
41171: PUSH
41172: LD_INT 2
41174: ARRAY
41175: EQUAL
41176: AND
41177: PUSH
41178: LD_VAR 0 5
41182: PUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: CALL_OW 437
41192: PUSH
41193: LD_INT 1
41195: ARRAY
41196: PUSH
41197: LD_INT 3
41199: ARRAY
41200: EQUAL
41201: AND
41202: IFFALSE 41212
// result := true end ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_INT 1
41211: ST_TO_ADDR
// end ;
41212: LD_VAR 0 3
41216: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41217: LD_INT 0
41219: PPUSH
// result := false ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_INT 0
41227: ST_TO_ADDR
// if GetTaskList ( unit ) then
41228: LD_VAR 0 1
41232: PPUSH
41233: CALL_OW 437
41237: IFFALSE 41320
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41239: LD_STRING M
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 437
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: EQUAL
41260: PUSH
41261: LD_VAR 0 2
41265: PUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: CALL_OW 437
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: PUSH
41280: LD_INT 2
41282: ARRAY
41283: EQUAL
41284: AND
41285: PUSH
41286: LD_VAR 0 3
41290: PUSH
41291: LD_VAR 0 1
41295: PPUSH
41296: CALL_OW 437
41300: PUSH
41301: LD_INT 1
41303: ARRAY
41304: PUSH
41305: LD_INT 3
41307: ARRAY
41308: EQUAL
41309: AND
41310: IFFALSE 41320
// result := true ;
41312: LD_ADDR_VAR 0 4
41316: PUSH
41317: LD_INT 1
41319: ST_TO_ADDR
// end ; end ;
41320: LD_VAR 0 4
41324: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41325: LD_INT 0
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
// if not unit or not area then
41331: LD_VAR 0 1
41335: NOT
41336: PUSH
41337: LD_VAR 0 2
41341: NOT
41342: OR
41343: IFFALSE 41347
// exit ;
41345: GO 41523
// tmp := AreaToList ( area , i ) ;
41347: LD_ADDR_VAR 0 6
41351: PUSH
41352: LD_VAR 0 2
41356: PPUSH
41357: LD_VAR 0 5
41361: PPUSH
41362: CALL_OW 517
41366: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41367: LD_ADDR_VAR 0 5
41371: PUSH
41372: DOUBLE
41373: LD_INT 1
41375: DEC
41376: ST_TO_ADDR
41377: LD_VAR 0 6
41381: PUSH
41382: LD_INT 1
41384: ARRAY
41385: PUSH
41386: FOR_TO
41387: IFFALSE 41521
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41389: LD_ADDR_VAR 0 7
41393: PUSH
41394: LD_VAR 0 6
41398: PUSH
41399: LD_INT 1
41401: ARRAY
41402: PUSH
41403: LD_VAR 0 5
41407: ARRAY
41408: PUSH
41409: LD_VAR 0 6
41413: PUSH
41414: LD_INT 2
41416: ARRAY
41417: PUSH
41418: LD_VAR 0 5
41422: ARRAY
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
41428: LD_INT 92
41430: PUSH
41431: LD_VAR 0 7
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PUSH
41440: LD_VAR 0 7
41444: PUSH
41445: LD_INT 2
41447: ARRAY
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: PPUSH
41458: CALL_OW 69
41462: PUSH
41463: LD_INT 0
41465: EQUAL
41466: IFFALSE 41519
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41468: LD_VAR 0 1
41472: PPUSH
41473: LD_VAR 0 7
41477: PUSH
41478: LD_INT 1
41480: ARRAY
41481: PPUSH
41482: LD_VAR 0 7
41486: PUSH
41487: LD_INT 2
41489: ARRAY
41490: PPUSH
41491: LD_VAR 0 3
41495: PPUSH
41496: CALL_OW 48
// result := IsPlaced ( unit ) ;
41500: LD_ADDR_VAR 0 4
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 305
41514: ST_TO_ADDR
// exit ;
41515: POP
41516: POP
41517: GO 41523
// end ; end ;
41519: GO 41386
41521: POP
41522: POP
// end ;
41523: LD_VAR 0 4
41527: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41528: LD_INT 0
41530: PPUSH
41531: PPUSH
41532: PPUSH
// if not side or side > 8 then
41533: LD_VAR 0 1
41537: NOT
41538: PUSH
41539: LD_VAR 0 1
41543: PUSH
41544: LD_INT 8
41546: GREATER
41547: OR
41548: IFFALSE 41552
// exit ;
41550: GO 41739
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41552: LD_ADDR_VAR 0 4
41556: PUSH
41557: LD_INT 22
41559: PUSH
41560: LD_VAR 0 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 21
41571: PUSH
41572: LD_INT 3
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PPUSH
41583: CALL_OW 69
41587: ST_TO_ADDR
// if not tmp then
41588: LD_VAR 0 4
41592: NOT
41593: IFFALSE 41597
// exit ;
41595: GO 41739
// enable_addtolog := true ;
41597: LD_ADDR_OWVAR 81
41601: PUSH
41602: LD_INT 1
41604: ST_TO_ADDR
// AddToLog ( [ ) ;
41605: LD_STRING [
41607: PPUSH
41608: CALL_OW 561
// for i in tmp do
41612: LD_ADDR_VAR 0 3
41616: PUSH
41617: LD_VAR 0 4
41621: PUSH
41622: FOR_IN
41623: IFFALSE 41730
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41625: LD_STRING [
41627: PUSH
41628: LD_VAR 0 3
41632: PPUSH
41633: CALL_OW 266
41637: STR
41638: PUSH
41639: LD_STRING , 
41641: STR
41642: PUSH
41643: LD_VAR 0 3
41647: PPUSH
41648: CALL_OW 250
41652: STR
41653: PUSH
41654: LD_STRING , 
41656: STR
41657: PUSH
41658: LD_VAR 0 3
41662: PPUSH
41663: CALL_OW 251
41667: STR
41668: PUSH
41669: LD_STRING , 
41671: STR
41672: PUSH
41673: LD_VAR 0 3
41677: PPUSH
41678: CALL_OW 254
41682: STR
41683: PUSH
41684: LD_STRING , 
41686: STR
41687: PUSH
41688: LD_VAR 0 3
41692: PPUSH
41693: LD_INT 1
41695: PPUSH
41696: CALL_OW 268
41700: STR
41701: PUSH
41702: LD_STRING , 
41704: STR
41705: PUSH
41706: LD_VAR 0 3
41710: PPUSH
41711: LD_INT 2
41713: PPUSH
41714: CALL_OW 268
41718: STR
41719: PUSH
41720: LD_STRING ],
41722: STR
41723: PPUSH
41724: CALL_OW 561
// end ;
41728: GO 41622
41730: POP
41731: POP
// AddToLog ( ]; ) ;
41732: LD_STRING ];
41734: PPUSH
41735: CALL_OW 561
// end ;
41739: LD_VAR 0 2
41743: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41744: LD_INT 0
41746: PPUSH
41747: PPUSH
41748: PPUSH
41749: PPUSH
41750: PPUSH
// if not area or not rate or not max then
41751: LD_VAR 0 1
41755: NOT
41756: PUSH
41757: LD_VAR 0 2
41761: NOT
41762: OR
41763: PUSH
41764: LD_VAR 0 4
41768: NOT
41769: OR
41770: IFFALSE 41774
// exit ;
41772: GO 41963
// while 1 do
41774: LD_INT 1
41776: IFFALSE 41963
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41778: LD_ADDR_VAR 0 9
41782: PUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: LD_INT 1
41790: PPUSH
41791: CALL_OW 287
41795: PUSH
41796: LD_INT 10
41798: MUL
41799: ST_TO_ADDR
// r := rate / 10 ;
41800: LD_ADDR_VAR 0 7
41804: PUSH
41805: LD_VAR 0 2
41809: PUSH
41810: LD_INT 10
41812: DIVREAL
41813: ST_TO_ADDR
// time := 1 1$00 ;
41814: LD_ADDR_VAR 0 8
41818: PUSH
41819: LD_INT 2100
41821: ST_TO_ADDR
// if amount < min then
41822: LD_VAR 0 9
41826: PUSH
41827: LD_VAR 0 3
41831: LESS
41832: IFFALSE 41850
// r := r * 2 else
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 7
41843: PUSH
41844: LD_INT 2
41846: MUL
41847: ST_TO_ADDR
41848: GO 41876
// if amount > max then
41850: LD_VAR 0 9
41854: PUSH
41855: LD_VAR 0 4
41859: GREATER
41860: IFFALSE 41876
// r := r / 2 ;
41862: LD_ADDR_VAR 0 7
41866: PUSH
41867: LD_VAR 0 7
41871: PUSH
41872: LD_INT 2
41874: DIVREAL
41875: ST_TO_ADDR
// time := time / r ;
41876: LD_ADDR_VAR 0 8
41880: PUSH
41881: LD_VAR 0 8
41885: PUSH
41886: LD_VAR 0 7
41890: DIVREAL
41891: ST_TO_ADDR
// if time < 0 then
41892: LD_VAR 0 8
41896: PUSH
41897: LD_INT 0
41899: LESS
41900: IFFALSE 41917
// time := time * - 1 ;
41902: LD_ADDR_VAR 0 8
41906: PUSH
41907: LD_VAR 0 8
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: MUL
41916: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41917: LD_VAR 0 8
41921: PUSH
41922: LD_INT 35
41924: PPUSH
41925: LD_INT 875
41927: PPUSH
41928: CALL_OW 12
41932: PLUS
41933: PPUSH
41934: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41938: LD_INT 1
41940: PPUSH
41941: LD_INT 5
41943: PPUSH
41944: CALL_OW 12
41948: PPUSH
41949: LD_VAR 0 1
41953: PPUSH
41954: LD_INT 1
41956: PPUSH
41957: CALL_OW 55
// end ;
41961: GO 41774
// end ;
41963: LD_VAR 0 5
41967: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41968: LD_INT 0
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
// if not turrets or not factories then
41978: LD_VAR 0 1
41982: NOT
41983: PUSH
41984: LD_VAR 0 2
41988: NOT
41989: OR
41990: IFFALSE 41994
// exit ;
41992: GO 42301
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41994: LD_ADDR_VAR 0 10
41998: PUSH
41999: LD_INT 5
42001: PUSH
42002: LD_INT 6
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 4
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 3
42021: PUSH
42022: LD_INT 5
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 24
42036: PUSH
42037: LD_INT 25
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 23
42046: PUSH
42047: LD_INT 27
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 42
42060: PUSH
42061: LD_INT 43
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 44
42070: PUSH
42071: LD_INT 46
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 45
42080: PUSH
42081: LD_INT 47
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
// result := [ ] ;
42098: LD_ADDR_VAR 0 3
42102: PUSH
42103: EMPTY
42104: ST_TO_ADDR
// for i in turrets do
42105: LD_ADDR_VAR 0 4
42109: PUSH
42110: LD_VAR 0 1
42114: PUSH
42115: FOR_IN
42116: IFFALSE 42299
// begin nat := GetNation ( i ) ;
42118: LD_ADDR_VAR 0 7
42122: PUSH
42123: LD_VAR 0 4
42127: PPUSH
42128: CALL_OW 248
42132: ST_TO_ADDR
// weapon := 0 ;
42133: LD_ADDR_VAR 0 8
42137: PUSH
42138: LD_INT 0
42140: ST_TO_ADDR
// if not nat then
42141: LD_VAR 0 7
42145: NOT
42146: IFFALSE 42150
// continue ;
42148: GO 42115
// for j in list [ nat ] do
42150: LD_ADDR_VAR 0 5
42154: PUSH
42155: LD_VAR 0 10
42159: PUSH
42160: LD_VAR 0 7
42164: ARRAY
42165: PUSH
42166: FOR_IN
42167: IFFALSE 42208
// if GetBWeapon ( i ) = j [ 1 ] then
42169: LD_VAR 0 4
42173: PPUSH
42174: CALL_OW 269
42178: PUSH
42179: LD_VAR 0 5
42183: PUSH
42184: LD_INT 1
42186: ARRAY
42187: EQUAL
42188: IFFALSE 42206
// begin weapon := j [ 2 ] ;
42190: LD_ADDR_VAR 0 8
42194: PUSH
42195: LD_VAR 0 5
42199: PUSH
42200: LD_INT 2
42202: ARRAY
42203: ST_TO_ADDR
// break ;
42204: GO 42208
// end ;
42206: GO 42166
42208: POP
42209: POP
// if not weapon then
42210: LD_VAR 0 8
42214: NOT
42215: IFFALSE 42219
// continue ;
42217: GO 42115
// for k in factories do
42219: LD_ADDR_VAR 0 6
42223: PUSH
42224: LD_VAR 0 2
42228: PUSH
42229: FOR_IN
42230: IFFALSE 42295
// begin weapons := AvailableWeaponList ( k ) ;
42232: LD_ADDR_VAR 0 9
42236: PUSH
42237: LD_VAR 0 6
42241: PPUSH
42242: CALL_OW 478
42246: ST_TO_ADDR
// if not weapons then
42247: LD_VAR 0 9
42251: NOT
42252: IFFALSE 42256
// continue ;
42254: GO 42229
// if weapon in weapons then
42256: LD_VAR 0 8
42260: PUSH
42261: LD_VAR 0 9
42265: IN
42266: IFFALSE 42293
// begin result := [ i , weapon ] ;
42268: LD_ADDR_VAR 0 3
42272: PUSH
42273: LD_VAR 0 4
42277: PUSH
42278: LD_VAR 0 8
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// exit ;
42287: POP
42288: POP
42289: POP
42290: POP
42291: GO 42301
// end ; end ;
42293: GO 42229
42295: POP
42296: POP
// end ;
42297: GO 42115
42299: POP
42300: POP
// end ;
42301: LD_VAR 0 3
42305: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42306: LD_INT 0
42308: PPUSH
// if not side or side > 8 then
42309: LD_VAR 0 3
42313: NOT
42314: PUSH
42315: LD_VAR 0 3
42319: PUSH
42320: LD_INT 8
42322: GREATER
42323: OR
42324: IFFALSE 42328
// exit ;
42326: GO 42387
// if not range then
42328: LD_VAR 0 4
42332: NOT
42333: IFFALSE 42344
// range := - 12 ;
42335: LD_ADDR_VAR 0 4
42339: PUSH
42340: LD_INT 12
42342: NEG
42343: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42344: LD_VAR 0 1
42348: PPUSH
42349: LD_VAR 0 2
42353: PPUSH
42354: LD_VAR 0 3
42358: PPUSH
42359: LD_VAR 0 4
42363: PPUSH
42364: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42368: LD_VAR 0 1
42372: PPUSH
42373: LD_VAR 0 2
42377: PPUSH
42378: LD_VAR 0 3
42382: PPUSH
42383: CALL_OW 331
// end ;
42387: LD_VAR 0 5
42391: RET
// export function Video ( mode ) ; begin
42392: LD_INT 0
42394: PPUSH
// ingame_video = mode ;
42395: LD_ADDR_OWVAR 52
42399: PUSH
42400: LD_VAR 0 1
42404: ST_TO_ADDR
// interface_hidden = mode ;
42405: LD_ADDR_OWVAR 54
42409: PUSH
42410: LD_VAR 0 1
42414: ST_TO_ADDR
// end ;
42415: LD_VAR 0 2
42419: RET
// export function Join ( array , element ) ; begin
42420: LD_INT 0
42422: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: LD_VAR 0 1
42437: PUSH
42438: LD_INT 1
42440: PLUS
42441: PPUSH
42442: LD_VAR 0 2
42446: PPUSH
42447: CALL_OW 1
42451: ST_TO_ADDR
// end ;
42452: LD_VAR 0 3
42456: RET
// export function JoinUnion ( array , element ) ; begin
42457: LD_INT 0
42459: PPUSH
// result := array union element ;
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_VAR 0 1
42469: PUSH
42470: LD_VAR 0 2
42474: UNION
42475: ST_TO_ADDR
// end ;
42476: LD_VAR 0 3
42480: RET
// export function GetBehemoths ( side ) ; begin
42481: LD_INT 0
42483: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42484: LD_ADDR_VAR 0 2
42488: PUSH
42489: LD_INT 22
42491: PUSH
42492: LD_VAR 0 1
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 31
42503: PUSH
42504: LD_INT 25
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PPUSH
42515: CALL_OW 69
42519: ST_TO_ADDR
// end ;
42520: LD_VAR 0 2
42524: RET
// export function Shuffle ( array ) ; var i , index ; begin
42525: LD_INT 0
42527: PPUSH
42528: PPUSH
42529: PPUSH
// result := [ ] ;
42530: LD_ADDR_VAR 0 2
42534: PUSH
42535: EMPTY
42536: ST_TO_ADDR
// if not array then
42537: LD_VAR 0 1
42541: NOT
42542: IFFALSE 42546
// exit ;
42544: GO 42645
// Randomize ;
42546: CALL_OW 10
// for i = array downto 1 do
42550: LD_ADDR_VAR 0 3
42554: PUSH
42555: DOUBLE
42556: LD_VAR 0 1
42560: INC
42561: ST_TO_ADDR
42562: LD_INT 1
42564: PUSH
42565: FOR_DOWNTO
42566: IFFALSE 42643
// begin index := rand ( 1 , array ) ;
42568: LD_ADDR_VAR 0 4
42572: PUSH
42573: LD_INT 1
42575: PPUSH
42576: LD_VAR 0 1
42580: PPUSH
42581: CALL_OW 12
42585: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42586: LD_ADDR_VAR 0 2
42590: PUSH
42591: LD_VAR 0 2
42595: PPUSH
42596: LD_VAR 0 2
42600: PUSH
42601: LD_INT 1
42603: PLUS
42604: PPUSH
42605: LD_VAR 0 1
42609: PUSH
42610: LD_VAR 0 4
42614: ARRAY
42615: PPUSH
42616: CALL_OW 2
42620: ST_TO_ADDR
// array := Delete ( array , index ) ;
42621: LD_ADDR_VAR 0 1
42625: PUSH
42626: LD_VAR 0 1
42630: PPUSH
42631: LD_VAR 0 4
42635: PPUSH
42636: CALL_OW 3
42640: ST_TO_ADDR
// end ;
42641: GO 42565
42643: POP
42644: POP
// end ;
42645: LD_VAR 0 2
42649: RET
// export function GetBaseMaterials ( base ) ; begin
42650: LD_INT 0
42652: PPUSH
// result := [ 0 , 0 , 0 ] ;
42653: LD_ADDR_VAR 0 2
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
// if not base then
42672: LD_VAR 0 1
42676: NOT
42677: IFFALSE 42681
// exit ;
42679: GO 42730
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42681: LD_ADDR_VAR 0 2
42685: PUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: LD_INT 1
42693: PPUSH
42694: CALL_OW 275
42698: PUSH
42699: LD_VAR 0 1
42703: PPUSH
42704: LD_INT 2
42706: PPUSH
42707: CALL_OW 275
42711: PUSH
42712: LD_VAR 0 1
42716: PPUSH
42717: LD_INT 3
42719: PPUSH
42720: CALL_OW 275
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: ST_TO_ADDR
// end ;
42730: LD_VAR 0 2
42734: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42735: LD_INT 0
42737: PPUSH
42738: PPUSH
// result := array ;
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_VAR 0 1
42748: ST_TO_ADDR
// if size >= result then
42749: LD_VAR 0 2
42753: PUSH
42754: LD_VAR 0 3
42758: GREATEREQUAL
42759: IFFALSE 42763
// exit ;
42761: GO 42813
// if size then
42763: LD_VAR 0 2
42767: IFFALSE 42813
// for i := array downto size do
42769: LD_ADDR_VAR 0 4
42773: PUSH
42774: DOUBLE
42775: LD_VAR 0 1
42779: INC
42780: ST_TO_ADDR
42781: LD_VAR 0 2
42785: PUSH
42786: FOR_DOWNTO
42787: IFFALSE 42811
// result := Delete ( result , result ) ;
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_VAR 0 3
42798: PPUSH
42799: LD_VAR 0 3
42803: PPUSH
42804: CALL_OW 3
42808: ST_TO_ADDR
42809: GO 42786
42811: POP
42812: POP
// end ;
42813: LD_VAR 0 3
42817: RET
// export function ComExit ( unit ) ; var tmp ; begin
42818: LD_INT 0
42820: PPUSH
42821: PPUSH
// if not IsInUnit ( unit ) then
42822: LD_VAR 0 1
42826: PPUSH
42827: CALL_OW 310
42831: NOT
42832: IFFALSE 42836
// exit ;
42834: GO 42896
// tmp := IsInUnit ( unit ) ;
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_VAR 0 1
42845: PPUSH
42846: CALL_OW 310
42850: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42851: LD_VAR 0 3
42855: PPUSH
42856: CALL_OW 247
42860: PUSH
42861: LD_INT 2
42863: EQUAL
42864: IFFALSE 42877
// ComExitVehicle ( unit ) else
42866: LD_VAR 0 1
42870: PPUSH
42871: CALL_OW 121
42875: GO 42886
// ComExitBuilding ( unit ) ;
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 122
// result := tmp ;
42886: LD_ADDR_VAR 0 2
42890: PUSH
42891: LD_VAR 0 3
42895: ST_TO_ADDR
// end ;
42896: LD_VAR 0 2
42900: RET
// export function ComExitAll ( units ) ; var i ; begin
42901: LD_INT 0
42903: PPUSH
42904: PPUSH
// if not units then
42905: LD_VAR 0 1
42909: NOT
42910: IFFALSE 42914
// exit ;
42912: GO 42940
// for i in units do
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: LD_VAR 0 1
42923: PUSH
42924: FOR_IN
42925: IFFALSE 42938
// ComExit ( i ) ;
42927: LD_VAR 0 3
42931: PPUSH
42932: CALL 42818 0 1
42936: GO 42924
42938: POP
42939: POP
// end ;
42940: LD_VAR 0 2
42944: RET
// export function ResetHc ; begin
42945: LD_INT 0
42947: PPUSH
// InitHc ;
42948: CALL_OW 19
// hc_importance := 0 ;
42952: LD_ADDR_OWVAR 32
42956: PUSH
42957: LD_INT 0
42959: ST_TO_ADDR
// end ;
42960: LD_VAR 0 1
42964: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42965: LD_INT 0
42967: PPUSH
42968: PPUSH
42969: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42970: LD_ADDR_VAR 0 6
42974: PUSH
42975: LD_VAR 0 1
42979: PUSH
42980: LD_VAR 0 3
42984: PLUS
42985: PUSH
42986: LD_INT 2
42988: DIV
42989: ST_TO_ADDR
// if _x < 0 then
42990: LD_VAR 0 6
42994: PUSH
42995: LD_INT 0
42997: LESS
42998: IFFALSE 43015
// _x := _x * - 1 ;
43000: LD_ADDR_VAR 0 6
43004: PUSH
43005: LD_VAR 0 6
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: MUL
43014: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43015: LD_ADDR_VAR 0 7
43019: PUSH
43020: LD_VAR 0 2
43024: PUSH
43025: LD_VAR 0 4
43029: PLUS
43030: PUSH
43031: LD_INT 2
43033: DIV
43034: ST_TO_ADDR
// if _y < 0 then
43035: LD_VAR 0 7
43039: PUSH
43040: LD_INT 0
43042: LESS
43043: IFFALSE 43060
// _y := _y * - 1 ;
43045: LD_ADDR_VAR 0 7
43049: PUSH
43050: LD_VAR 0 7
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: MUL
43059: ST_TO_ADDR
// result := [ _x , _y ] ;
43060: LD_ADDR_VAR 0 5
43064: PUSH
43065: LD_VAR 0 6
43069: PUSH
43070: LD_VAR 0 7
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// end ;
43079: LD_VAR 0 5
43083: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43084: LD_INT 0
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
// task := GetTaskList ( unit ) ;
43090: LD_ADDR_VAR 0 7
43094: PUSH
43095: LD_VAR 0 1
43099: PPUSH
43100: CALL_OW 437
43104: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43105: LD_VAR 0 7
43109: NOT
43110: PUSH
43111: LD_VAR 0 1
43115: PPUSH
43116: LD_VAR 0 2
43120: PPUSH
43121: CALL_OW 308
43125: NOT
43126: AND
43127: IFFALSE 43131
// exit ;
43129: GO 43249
// if IsInArea ( unit , area ) then
43131: LD_VAR 0 1
43135: PPUSH
43136: LD_VAR 0 2
43140: PPUSH
43141: CALL_OW 308
43145: IFFALSE 43163
// begin ComMoveToArea ( unit , goAway ) ;
43147: LD_VAR 0 1
43151: PPUSH
43152: LD_VAR 0 3
43156: PPUSH
43157: CALL_OW 113
// exit ;
43161: GO 43249
// end ; if task [ 1 ] [ 1 ] <> M then
43163: LD_VAR 0 7
43167: PUSH
43168: LD_INT 1
43170: ARRAY
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PUSH
43176: LD_STRING M
43178: NONEQUAL
43179: IFFALSE 43183
// exit ;
43181: GO 43249
// x := task [ 1 ] [ 2 ] ;
43183: LD_ADDR_VAR 0 5
43187: PUSH
43188: LD_VAR 0 7
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: PUSH
43197: LD_INT 2
43199: ARRAY
43200: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43201: LD_ADDR_VAR 0 6
43205: PUSH
43206: LD_VAR 0 7
43210: PUSH
43211: LD_INT 1
43213: ARRAY
43214: PUSH
43215: LD_INT 3
43217: ARRAY
43218: ST_TO_ADDR
// if InArea ( x , y , area ) then
43219: LD_VAR 0 5
43223: PPUSH
43224: LD_VAR 0 6
43228: PPUSH
43229: LD_VAR 0 2
43233: PPUSH
43234: CALL_OW 309
43238: IFFALSE 43249
// ComStop ( unit ) ;
43240: LD_VAR 0 1
43244: PPUSH
43245: CALL_OW 141
// end ;
43249: LD_VAR 0 4
43253: RET
// export function Abs ( value ) ; begin
43254: LD_INT 0
43256: PPUSH
// result := value ;
43257: LD_ADDR_VAR 0 2
43261: PUSH
43262: LD_VAR 0 1
43266: ST_TO_ADDR
// if value < 0 then
43267: LD_VAR 0 1
43271: PUSH
43272: LD_INT 0
43274: LESS
43275: IFFALSE 43292
// result := value * - 1 ;
43277: LD_ADDR_VAR 0 2
43281: PUSH
43282: LD_VAR 0 1
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: MUL
43291: ST_TO_ADDR
// end ;
43292: LD_VAR 0 2
43296: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43297: LD_INT 0
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
// if not unit or not building then
43307: LD_VAR 0 1
43311: NOT
43312: PUSH
43313: LD_VAR 0 2
43317: NOT
43318: OR
43319: IFFALSE 43323
// exit ;
43321: GO 43549
// x := GetX ( building ) ;
43323: LD_ADDR_VAR 0 4
43327: PUSH
43328: LD_VAR 0 2
43332: PPUSH
43333: CALL_OW 250
43337: ST_TO_ADDR
// y := GetY ( building ) ;
43338: LD_ADDR_VAR 0 6
43342: PUSH
43343: LD_VAR 0 2
43347: PPUSH
43348: CALL_OW 251
43352: ST_TO_ADDR
// d := GetDir ( building ) ;
43353: LD_ADDR_VAR 0 8
43357: PUSH
43358: LD_VAR 0 2
43362: PPUSH
43363: CALL_OW 254
43367: ST_TO_ADDR
// r := 4 ;
43368: LD_ADDR_VAR 0 9
43372: PUSH
43373: LD_INT 4
43375: ST_TO_ADDR
// for i := 1 to 5 do
43376: LD_ADDR_VAR 0 10
43380: PUSH
43381: DOUBLE
43382: LD_INT 1
43384: DEC
43385: ST_TO_ADDR
43386: LD_INT 5
43388: PUSH
43389: FOR_TO
43390: IFFALSE 43547
// begin _x := ShiftX ( x , d , r + i ) ;
43392: LD_ADDR_VAR 0 5
43396: PUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: LD_VAR 0 8
43406: PPUSH
43407: LD_VAR 0 9
43411: PUSH
43412: LD_VAR 0 10
43416: PLUS
43417: PPUSH
43418: CALL_OW 272
43422: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43423: LD_ADDR_VAR 0 7
43427: PUSH
43428: LD_VAR 0 6
43432: PPUSH
43433: LD_VAR 0 8
43437: PPUSH
43438: LD_VAR 0 9
43442: PUSH
43443: LD_VAR 0 10
43447: PLUS
43448: PPUSH
43449: CALL_OW 273
43453: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43454: LD_VAR 0 5
43458: PPUSH
43459: LD_VAR 0 7
43463: PPUSH
43464: CALL_OW 488
43468: PUSH
43469: LD_VAR 0 5
43473: PPUSH
43474: LD_VAR 0 7
43478: PPUSH
43479: CALL_OW 428
43483: PPUSH
43484: CALL_OW 247
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: IN
43499: NOT
43500: AND
43501: IFFALSE 43545
// begin ComMoveXY ( unit , _x , _y ) ;
43503: LD_VAR 0 1
43507: PPUSH
43508: LD_VAR 0 5
43512: PPUSH
43513: LD_VAR 0 7
43517: PPUSH
43518: CALL_OW 111
// result := [ _x , _y ] ;
43522: LD_ADDR_VAR 0 3
43526: PUSH
43527: LD_VAR 0 5
43531: PUSH
43532: LD_VAR 0 7
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: ST_TO_ADDR
// exit ;
43541: POP
43542: POP
43543: GO 43549
// end ; end ;
43545: GO 43389
43547: POP
43548: POP
// end ;
43549: LD_VAR 0 3
43553: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43554: LD_INT 0
43556: PPUSH
43557: PPUSH
43558: PPUSH
// result := 0 ;
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 0
43566: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43567: LD_VAR 0 1
43571: PUSH
43572: LD_INT 0
43574: LESS
43575: PUSH
43576: LD_VAR 0 1
43580: PUSH
43581: LD_INT 8
43583: GREATER
43584: OR
43585: PUSH
43586: LD_VAR 0 2
43590: PUSH
43591: LD_INT 0
43593: LESS
43594: OR
43595: PUSH
43596: LD_VAR 0 2
43600: PUSH
43601: LD_INT 8
43603: GREATER
43604: OR
43605: IFFALSE 43609
// exit ;
43607: GO 43684
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43609: LD_ADDR_VAR 0 4
43613: PUSH
43614: LD_INT 22
43616: PUSH
43617: LD_VAR 0 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PPUSH
43626: CALL_OW 69
43630: PUSH
43631: FOR_IN
43632: IFFALSE 43682
// begin un := UnitShoot ( i ) ;
43634: LD_ADDR_VAR 0 5
43638: PUSH
43639: LD_VAR 0 4
43643: PPUSH
43644: CALL_OW 504
43648: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43649: LD_VAR 0 5
43653: PPUSH
43654: CALL_OW 255
43658: PUSH
43659: LD_VAR 0 1
43663: EQUAL
43664: IFFALSE 43680
// begin result := un ;
43666: LD_ADDR_VAR 0 3
43670: PUSH
43671: LD_VAR 0 5
43675: ST_TO_ADDR
// exit ;
43676: POP
43677: POP
43678: GO 43684
// end ; end ;
43680: GO 43631
43682: POP
43683: POP
// end ;
43684: LD_VAR 0 3
43688: RET
// export function GetCargoBay ( units ) ; begin
43689: LD_INT 0
43691: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43692: LD_ADDR_VAR 0 2
43696: PUSH
43697: LD_VAR 0 1
43701: PPUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 34
43707: PUSH
43708: LD_INT 12
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 34
43717: PUSH
43718: LD_INT 51
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 34
43727: PUSH
43728: LD_INT 32
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 34
43737: PUSH
43738: LD_INT 89
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: PPUSH
43752: CALL_OW 72
43756: ST_TO_ADDR
// end ;
43757: LD_VAR 0 2
43761: RET
// export function Negate ( value ) ; begin
43762: LD_INT 0
43764: PPUSH
// result := not value ;
43765: LD_ADDR_VAR 0 2
43769: PUSH
43770: LD_VAR 0 1
43774: NOT
43775: ST_TO_ADDR
// end ;
43776: LD_VAR 0 2
43780: RET
// export function Inc ( value ) ; begin
43781: LD_INT 0
43783: PPUSH
// result := value + 1 ;
43784: LD_ADDR_VAR 0 2
43788: PUSH
43789: LD_VAR 0 1
43793: PUSH
43794: LD_INT 1
43796: PLUS
43797: ST_TO_ADDR
// end ;
43798: LD_VAR 0 2
43802: RET
// export function Dec ( value ) ; begin
43803: LD_INT 0
43805: PPUSH
// result := value - 1 ;
43806: LD_ADDR_VAR 0 2
43810: PUSH
43811: LD_VAR 0 1
43815: PUSH
43816: LD_INT 1
43818: MINUS
43819: ST_TO_ADDR
// end ;
43820: LD_VAR 0 2
43824: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43825: LD_INT 0
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43835: LD_VAR 0 1
43839: PPUSH
43840: LD_VAR 0 2
43844: PPUSH
43845: CALL_OW 488
43849: NOT
43850: PUSH
43851: LD_VAR 0 3
43855: PPUSH
43856: LD_VAR 0 4
43860: PPUSH
43861: CALL_OW 488
43865: NOT
43866: OR
43867: IFFALSE 43880
// begin result := - 1 ;
43869: LD_ADDR_VAR 0 5
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: ST_TO_ADDR
// exit ;
43878: GO 44115
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43880: LD_ADDR_VAR 0 12
43884: PUSH
43885: LD_VAR 0 1
43889: PPUSH
43890: LD_VAR 0 2
43894: PPUSH
43895: LD_VAR 0 3
43899: PPUSH
43900: LD_VAR 0 4
43904: PPUSH
43905: CALL 42965 0 4
43909: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43910: LD_ADDR_VAR 0 11
43914: PUSH
43915: LD_VAR 0 1
43919: PPUSH
43920: LD_VAR 0 2
43924: PPUSH
43925: LD_VAR 0 12
43929: PUSH
43930: LD_INT 1
43932: ARRAY
43933: PPUSH
43934: LD_VAR 0 12
43938: PUSH
43939: LD_INT 2
43941: ARRAY
43942: PPUSH
43943: CALL_OW 298
43947: ST_TO_ADDR
// distance := 9999 ;
43948: LD_ADDR_VAR 0 10
43952: PUSH
43953: LD_INT 9999
43955: ST_TO_ADDR
// for i := 0 to 5 do
43956: LD_ADDR_VAR 0 6
43960: PUSH
43961: DOUBLE
43962: LD_INT 0
43964: DEC
43965: ST_TO_ADDR
43966: LD_INT 5
43968: PUSH
43969: FOR_TO
43970: IFFALSE 44113
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43972: LD_ADDR_VAR 0 7
43976: PUSH
43977: LD_VAR 0 1
43981: PPUSH
43982: LD_VAR 0 6
43986: PPUSH
43987: LD_VAR 0 11
43991: PPUSH
43992: CALL_OW 272
43996: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43997: LD_ADDR_VAR 0 8
44001: PUSH
44002: LD_VAR 0 2
44006: PPUSH
44007: LD_VAR 0 6
44011: PPUSH
44012: LD_VAR 0 11
44016: PPUSH
44017: CALL_OW 273
44021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44022: LD_VAR 0 7
44026: PPUSH
44027: LD_VAR 0 8
44031: PPUSH
44032: CALL_OW 488
44036: NOT
44037: IFFALSE 44041
// continue ;
44039: GO 43969
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44041: LD_ADDR_VAR 0 9
44045: PUSH
44046: LD_VAR 0 12
44050: PUSH
44051: LD_INT 1
44053: ARRAY
44054: PPUSH
44055: LD_VAR 0 12
44059: PUSH
44060: LD_INT 2
44062: ARRAY
44063: PPUSH
44064: LD_VAR 0 7
44068: PPUSH
44069: LD_VAR 0 8
44073: PPUSH
44074: CALL_OW 298
44078: ST_TO_ADDR
// if tmp < distance then
44079: LD_VAR 0 9
44083: PUSH
44084: LD_VAR 0 10
44088: LESS
44089: IFFALSE 44111
// begin result := i ;
44091: LD_ADDR_VAR 0 5
44095: PUSH
44096: LD_VAR 0 6
44100: ST_TO_ADDR
// distance := tmp ;
44101: LD_ADDR_VAR 0 10
44105: PUSH
44106: LD_VAR 0 9
44110: ST_TO_ADDR
// end ; end ;
44111: GO 43969
44113: POP
44114: POP
// end ;
44115: LD_VAR 0 5
44119: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44120: LD_INT 0
44122: PPUSH
44123: PPUSH
// if not driver or not IsInUnit ( driver ) then
44124: LD_VAR 0 1
44128: NOT
44129: PUSH
44130: LD_VAR 0 1
44134: PPUSH
44135: CALL_OW 310
44139: NOT
44140: OR
44141: IFFALSE 44145
// exit ;
44143: GO 44235
// vehicle := IsInUnit ( driver ) ;
44145: LD_ADDR_VAR 0 3
44149: PUSH
44150: LD_VAR 0 1
44154: PPUSH
44155: CALL_OW 310
44159: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44160: LD_VAR 0 1
44164: PPUSH
44165: LD_STRING \
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: PUSH
44195: LD_STRING E
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_VAR 0 3
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PPUSH
44231: CALL_OW 446
// end ;
44235: LD_VAR 0 2
44239: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44240: LD_INT 0
44242: PPUSH
44243: PPUSH
// if not driver or not IsInUnit ( driver ) then
44244: LD_VAR 0 1
44248: NOT
44249: PUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: CALL_OW 310
44259: NOT
44260: OR
44261: IFFALSE 44265
// exit ;
44263: GO 44355
// vehicle := IsInUnit ( driver ) ;
44265: LD_ADDR_VAR 0 3
44269: PUSH
44270: LD_VAR 0 1
44274: PPUSH
44275: CALL_OW 310
44279: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44280: LD_VAR 0 1
44284: PPUSH
44285: LD_STRING \
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: PUSH
44315: LD_STRING E
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_VAR 0 3
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PPUSH
44351: CALL_OW 447
// end ;
44355: LD_VAR 0 2
44359: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44360: LD_INT 0
44362: PPUSH
44363: PPUSH
44364: PPUSH
// tmp := [ ] ;
44365: LD_ADDR_VAR 0 5
44369: PUSH
44370: EMPTY
44371: ST_TO_ADDR
// for i in units do
44372: LD_ADDR_VAR 0 4
44376: PUSH
44377: LD_VAR 0 1
44381: PUSH
44382: FOR_IN
44383: IFFALSE 44421
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44385: LD_ADDR_VAR 0 5
44389: PUSH
44390: LD_VAR 0 5
44394: PPUSH
44395: LD_VAR 0 5
44399: PUSH
44400: LD_INT 1
44402: PLUS
44403: PPUSH
44404: LD_VAR 0 4
44408: PPUSH
44409: CALL_OW 256
44413: PPUSH
44414: CALL_OW 2
44418: ST_TO_ADDR
44419: GO 44382
44421: POP
44422: POP
// if not tmp then
44423: LD_VAR 0 5
44427: NOT
44428: IFFALSE 44432
// exit ;
44430: GO 44480
// if asc then
44432: LD_VAR 0 2
44436: IFFALSE 44460
// result := SortListByListAsc ( units , tmp ) else
44438: LD_ADDR_VAR 0 3
44442: PUSH
44443: LD_VAR 0 1
44447: PPUSH
44448: LD_VAR 0 5
44452: PPUSH
44453: CALL_OW 76
44457: ST_TO_ADDR
44458: GO 44480
// result := SortListByListDesc ( units , tmp ) ;
44460: LD_ADDR_VAR 0 3
44464: PUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: LD_VAR 0 5
44474: PPUSH
44475: CALL_OW 77
44479: ST_TO_ADDR
// end ;
44480: LD_VAR 0 3
44484: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44485: LD_INT 0
44487: PPUSH
44488: PPUSH
// task := GetTaskList ( mech ) ;
44489: LD_ADDR_VAR 0 4
44493: PUSH
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 437
44503: ST_TO_ADDR
// if not task then
44504: LD_VAR 0 4
44508: NOT
44509: IFFALSE 44513
// exit ;
44511: GO 44555
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44513: LD_ADDR_VAR 0 3
44517: PUSH
44518: LD_VAR 0 4
44522: PUSH
44523: LD_INT 1
44525: ARRAY
44526: PUSH
44527: LD_INT 1
44529: ARRAY
44530: PUSH
44531: LD_STRING r
44533: EQUAL
44534: PUSH
44535: LD_VAR 0 4
44539: PUSH
44540: LD_INT 1
44542: ARRAY
44543: PUSH
44544: LD_INT 4
44546: ARRAY
44547: PUSH
44548: LD_VAR 0 2
44552: EQUAL
44553: AND
44554: ST_TO_ADDR
// end ;
44555: LD_VAR 0 3
44559: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44560: LD_INT 0
44562: PPUSH
// SetDir ( unit , d ) ;
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 4
44572: PPUSH
44573: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44577: LD_VAR 0 1
44581: PPUSH
44582: LD_VAR 0 2
44586: PPUSH
44587: LD_VAR 0 3
44591: PPUSH
44592: LD_VAR 0 5
44596: PPUSH
44597: CALL_OW 48
// end ;
44601: LD_VAR 0 6
44605: RET
// export function ToNaturalNumber ( number ) ; begin
44606: LD_INT 0
44608: PPUSH
// result := number div 1 ;
44609: LD_ADDR_VAR 0 2
44613: PUSH
44614: LD_VAR 0 1
44618: PUSH
44619: LD_INT 1
44621: DIV
44622: ST_TO_ADDR
// if number < 0 then
44623: LD_VAR 0 1
44627: PUSH
44628: LD_INT 0
44630: LESS
44631: IFFALSE 44641
// result := 0 ;
44633: LD_ADDR_VAR 0 2
44637: PUSH
44638: LD_INT 0
44640: ST_TO_ADDR
// end ;
44641: LD_VAR 0 2
44645: RET
// export function SortByClass ( units , class ) ; var un ; begin
44646: LD_INT 0
44648: PPUSH
44649: PPUSH
// if not units or not class then
44650: LD_VAR 0 1
44654: NOT
44655: PUSH
44656: LD_VAR 0 2
44660: NOT
44661: OR
44662: IFFALSE 44666
// exit ;
44664: GO 44761
// result := [ ] ;
44666: LD_ADDR_VAR 0 3
44670: PUSH
44671: EMPTY
44672: ST_TO_ADDR
// for un in units do
44673: LD_ADDR_VAR 0 4
44677: PUSH
44678: LD_VAR 0 1
44682: PUSH
44683: FOR_IN
44684: IFFALSE 44759
// if GetClass ( un ) = class then
44686: LD_VAR 0 4
44690: PPUSH
44691: CALL_OW 257
44695: PUSH
44696: LD_VAR 0 2
44700: EQUAL
44701: IFFALSE 44728
// result := Insert ( result , 1 , un ) else
44703: LD_ADDR_VAR 0 3
44707: PUSH
44708: LD_VAR 0 3
44712: PPUSH
44713: LD_INT 1
44715: PPUSH
44716: LD_VAR 0 4
44720: PPUSH
44721: CALL_OW 2
44725: ST_TO_ADDR
44726: GO 44757
// result := Replace ( result , result + 1 , un ) ;
44728: LD_ADDR_VAR 0 3
44732: PUSH
44733: LD_VAR 0 3
44737: PPUSH
44738: LD_VAR 0 3
44742: PUSH
44743: LD_INT 1
44745: PLUS
44746: PPUSH
44747: LD_VAR 0 4
44751: PPUSH
44752: CALL_OW 1
44756: ST_TO_ADDR
44757: GO 44683
44759: POP
44760: POP
// end ;
44761: LD_VAR 0 3
44765: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44766: LD_INT 0
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
44774: PPUSH
// result := [ ] ;
44775: LD_ADDR_VAR 0 4
44779: PUSH
44780: EMPTY
44781: ST_TO_ADDR
// if x - r < 0 then
44782: LD_VAR 0 1
44786: PUSH
44787: LD_VAR 0 3
44791: MINUS
44792: PUSH
44793: LD_INT 0
44795: LESS
44796: IFFALSE 44808
// min_x := 0 else
44798: LD_ADDR_VAR 0 8
44802: PUSH
44803: LD_INT 0
44805: ST_TO_ADDR
44806: GO 44824
// min_x := x - r ;
44808: LD_ADDR_VAR 0 8
44812: PUSH
44813: LD_VAR 0 1
44817: PUSH
44818: LD_VAR 0 3
44822: MINUS
44823: ST_TO_ADDR
// if y - r < 0 then
44824: LD_VAR 0 2
44828: PUSH
44829: LD_VAR 0 3
44833: MINUS
44834: PUSH
44835: LD_INT 0
44837: LESS
44838: IFFALSE 44850
// min_y := 0 else
44840: LD_ADDR_VAR 0 7
44844: PUSH
44845: LD_INT 0
44847: ST_TO_ADDR
44848: GO 44866
// min_y := y - r ;
44850: LD_ADDR_VAR 0 7
44854: PUSH
44855: LD_VAR 0 2
44859: PUSH
44860: LD_VAR 0 3
44864: MINUS
44865: ST_TO_ADDR
// max_x := x + r ;
44866: LD_ADDR_VAR 0 9
44870: PUSH
44871: LD_VAR 0 1
44875: PUSH
44876: LD_VAR 0 3
44880: PLUS
44881: ST_TO_ADDR
// max_y := y + r ;
44882: LD_ADDR_VAR 0 10
44886: PUSH
44887: LD_VAR 0 2
44891: PUSH
44892: LD_VAR 0 3
44896: PLUS
44897: ST_TO_ADDR
// for _x = min_x to max_x do
44898: LD_ADDR_VAR 0 5
44902: PUSH
44903: DOUBLE
44904: LD_VAR 0 8
44908: DEC
44909: ST_TO_ADDR
44910: LD_VAR 0 9
44914: PUSH
44915: FOR_TO
44916: IFFALSE 45017
// for _y = min_y to max_y do
44918: LD_ADDR_VAR 0 6
44922: PUSH
44923: DOUBLE
44924: LD_VAR 0 7
44928: DEC
44929: ST_TO_ADDR
44930: LD_VAR 0 10
44934: PUSH
44935: FOR_TO
44936: IFFALSE 45013
// begin if not ValidHex ( _x , _y ) then
44938: LD_VAR 0 5
44942: PPUSH
44943: LD_VAR 0 6
44947: PPUSH
44948: CALL_OW 488
44952: NOT
44953: IFFALSE 44957
// continue ;
44955: GO 44935
// if GetResourceTypeXY ( _x , _y ) then
44957: LD_VAR 0 5
44961: PPUSH
44962: LD_VAR 0 6
44966: PPUSH
44967: CALL_OW 283
44971: IFFALSE 45011
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44973: LD_ADDR_VAR 0 4
44977: PUSH
44978: LD_VAR 0 4
44982: PPUSH
44983: LD_VAR 0 4
44987: PUSH
44988: LD_INT 1
44990: PLUS
44991: PPUSH
44992: LD_VAR 0 5
44996: PUSH
44997: LD_VAR 0 6
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PPUSH
45006: CALL_OW 1
45010: ST_TO_ADDR
// end ;
45011: GO 44935
45013: POP
45014: POP
45015: GO 44915
45017: POP
45018: POP
// end ;
45019: LD_VAR 0 4
45023: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45024: LD_INT 0
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
// if not units then
45034: LD_VAR 0 1
45038: NOT
45039: IFFALSE 45043
// exit ;
45041: GO 45567
// result := UnitFilter ( units , [ f_ok ] ) ;
45043: LD_ADDR_VAR 0 3
45047: PUSH
45048: LD_VAR 0 1
45052: PPUSH
45053: LD_INT 50
45055: PUSH
45056: EMPTY
45057: LIST
45058: PPUSH
45059: CALL_OW 72
45063: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45064: LD_ADDR_VAR 0 8
45068: PUSH
45069: LD_VAR 0 1
45073: PUSH
45074: LD_INT 1
45076: ARRAY
45077: PPUSH
45078: CALL_OW 255
45082: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45083: LD_ADDR_VAR 0 10
45087: PUSH
45088: LD_INT 29
45090: PUSH
45091: LD_INT 91
45093: PUSH
45094: LD_INT 49
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// if not result then
45102: LD_VAR 0 3
45106: NOT
45107: IFFALSE 45111
// exit ;
45109: GO 45567
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45111: LD_ADDR_VAR 0 5
45115: PUSH
45116: LD_INT 81
45118: PUSH
45119: LD_VAR 0 8
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PPUSH
45128: CALL_OW 69
45132: ST_TO_ADDR
// for i in result do
45133: LD_ADDR_VAR 0 4
45137: PUSH
45138: LD_VAR 0 3
45142: PUSH
45143: FOR_IN
45144: IFFALSE 45565
// begin tag := GetTag ( i ) + 1 ;
45146: LD_ADDR_VAR 0 9
45150: PUSH
45151: LD_VAR 0 4
45155: PPUSH
45156: CALL_OW 110
45160: PUSH
45161: LD_INT 1
45163: PLUS
45164: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
45165: LD_ADDR_VAR 0 7
45169: PUSH
45170: LD_VAR 0 4
45174: PPUSH
45175: CALL_OW 250
45179: PPUSH
45180: LD_VAR 0 4
45184: PPUSH
45185: CALL_OW 251
45189: PPUSH
45190: LD_INT 6
45192: PPUSH
45193: CALL 44766 0 3
45197: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
45198: LD_VAR 0 4
45202: PPUSH
45203: CALL_OW 247
45207: PUSH
45208: LD_INT 2
45210: EQUAL
45211: PUSH
45212: LD_VAR 0 7
45216: AND
45217: PUSH
45218: LD_VAR 0 4
45222: PPUSH
45223: CALL_OW 264
45227: PUSH
45228: LD_VAR 0 10
45232: IN
45233: NOT
45234: AND
45235: IFFALSE 45274
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45237: LD_VAR 0 4
45241: PPUSH
45242: LD_VAR 0 7
45246: PUSH
45247: LD_INT 1
45249: ARRAY
45250: PUSH
45251: LD_INT 1
45253: ARRAY
45254: PPUSH
45255: LD_VAR 0 7
45259: PUSH
45260: LD_INT 1
45262: ARRAY
45263: PUSH
45264: LD_INT 2
45266: ARRAY
45267: PPUSH
45268: CALL_OW 116
45272: GO 45563
// if path > tag then
45274: LD_VAR 0 2
45278: PUSH
45279: LD_VAR 0 9
45283: GREATER
45284: IFFALSE 45492
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45286: LD_ADDR_VAR 0 6
45290: PUSH
45291: LD_VAR 0 5
45295: PPUSH
45296: LD_INT 91
45298: PUSH
45299: LD_VAR 0 4
45303: PUSH
45304: LD_INT 8
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: PPUSH
45312: CALL_OW 72
45316: ST_TO_ADDR
// if nearEnemy then
45317: LD_VAR 0 6
45321: IFFALSE 45390
// begin if GetWeapon ( i ) = ru_time_lapser then
45323: LD_VAR 0 4
45327: PPUSH
45328: CALL_OW 264
45332: PUSH
45333: LD_INT 49
45335: EQUAL
45336: IFFALSE 45364
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45338: LD_VAR 0 4
45342: PPUSH
45343: LD_VAR 0 6
45347: PPUSH
45348: LD_VAR 0 4
45352: PPUSH
45353: CALL_OW 74
45357: PPUSH
45358: CALL_OW 112
45362: GO 45388
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45364: LD_VAR 0 4
45368: PPUSH
45369: LD_VAR 0 6
45373: PPUSH
45374: LD_VAR 0 4
45378: PPUSH
45379: CALL_OW 74
45383: PPUSH
45384: CALL 46492 0 2
// end else
45388: GO 45490
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45390: LD_VAR 0 4
45394: PPUSH
45395: LD_VAR 0 2
45399: PUSH
45400: LD_VAR 0 9
45404: ARRAY
45405: PUSH
45406: LD_INT 1
45408: ARRAY
45409: PPUSH
45410: LD_VAR 0 2
45414: PUSH
45415: LD_VAR 0 9
45419: ARRAY
45420: PUSH
45421: LD_INT 2
45423: ARRAY
45424: PPUSH
45425: CALL_OW 297
45429: PUSH
45430: LD_INT 6
45432: GREATER
45433: IFFALSE 45476
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45435: LD_VAR 0 4
45439: PPUSH
45440: LD_VAR 0 2
45444: PUSH
45445: LD_VAR 0 9
45449: ARRAY
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PPUSH
45455: LD_VAR 0 2
45459: PUSH
45460: LD_VAR 0 9
45464: ARRAY
45465: PUSH
45466: LD_INT 2
45468: ARRAY
45469: PPUSH
45470: CALL_OW 114
45474: GO 45490
// SetTag ( i , tag ) ;
45476: LD_VAR 0 4
45480: PPUSH
45481: LD_VAR 0 9
45485: PPUSH
45486: CALL_OW 109
// end else
45490: GO 45563
// if enemy then
45492: LD_VAR 0 5
45496: IFFALSE 45563
// begin if GetWeapon ( i ) = ru_time_lapser then
45498: LD_VAR 0 4
45502: PPUSH
45503: CALL_OW 264
45507: PUSH
45508: LD_INT 49
45510: EQUAL
45511: IFFALSE 45539
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45513: LD_VAR 0 4
45517: PPUSH
45518: LD_VAR 0 5
45522: PPUSH
45523: LD_VAR 0 4
45527: PPUSH
45528: CALL_OW 74
45532: PPUSH
45533: CALL_OW 112
45537: GO 45563
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45539: LD_VAR 0 4
45543: PPUSH
45544: LD_VAR 0 5
45548: PPUSH
45549: LD_VAR 0 4
45553: PPUSH
45554: CALL_OW 74
45558: PPUSH
45559: CALL 46492 0 2
// end ; end ;
45563: GO 45143
45565: POP
45566: POP
// end ;
45567: LD_VAR 0 3
45571: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45572: LD_INT 0
45574: PPUSH
45575: PPUSH
45576: PPUSH
// if not unit or IsInUnit ( unit ) then
45577: LD_VAR 0 1
45581: NOT
45582: PUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: CALL_OW 310
45592: OR
45593: IFFALSE 45597
// exit ;
45595: GO 45688
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45597: LD_ADDR_VAR 0 4
45601: PUSH
45602: LD_VAR 0 1
45606: PPUSH
45607: CALL_OW 250
45611: PPUSH
45612: LD_VAR 0 2
45616: PPUSH
45617: LD_INT 1
45619: PPUSH
45620: CALL_OW 272
45624: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45625: LD_ADDR_VAR 0 5
45629: PUSH
45630: LD_VAR 0 1
45634: PPUSH
45635: CALL_OW 251
45639: PPUSH
45640: LD_VAR 0 2
45644: PPUSH
45645: LD_INT 1
45647: PPUSH
45648: CALL_OW 273
45652: ST_TO_ADDR
// if ValidHex ( x , y ) then
45653: LD_VAR 0 4
45657: PPUSH
45658: LD_VAR 0 5
45662: PPUSH
45663: CALL_OW 488
45667: IFFALSE 45688
// ComTurnXY ( unit , x , y ) ;
45669: LD_VAR 0 1
45673: PPUSH
45674: LD_VAR 0 4
45678: PPUSH
45679: LD_VAR 0 5
45683: PPUSH
45684: CALL_OW 118
// end ;
45688: LD_VAR 0 3
45692: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45693: LD_INT 0
45695: PPUSH
45696: PPUSH
// result := false ;
45697: LD_ADDR_VAR 0 3
45701: PUSH
45702: LD_INT 0
45704: ST_TO_ADDR
// if not units then
45705: LD_VAR 0 2
45709: NOT
45710: IFFALSE 45714
// exit ;
45712: GO 45759
// for i in units do
45714: LD_ADDR_VAR 0 4
45718: PUSH
45719: LD_VAR 0 2
45723: PUSH
45724: FOR_IN
45725: IFFALSE 45757
// if See ( side , i ) then
45727: LD_VAR 0 1
45731: PPUSH
45732: LD_VAR 0 4
45736: PPUSH
45737: CALL_OW 292
45741: IFFALSE 45755
// begin result := true ;
45743: LD_ADDR_VAR 0 3
45747: PUSH
45748: LD_INT 1
45750: ST_TO_ADDR
// exit ;
45751: POP
45752: POP
45753: GO 45759
// end ;
45755: GO 45724
45757: POP
45758: POP
// end ;
45759: LD_VAR 0 3
45763: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45764: LD_INT 0
45766: PPUSH
45767: PPUSH
45768: PPUSH
45769: PPUSH
// if not unit or not points then
45770: LD_VAR 0 1
45774: NOT
45775: PUSH
45776: LD_VAR 0 2
45780: NOT
45781: OR
45782: IFFALSE 45786
// exit ;
45784: GO 45876
// dist := 99999 ;
45786: LD_ADDR_VAR 0 5
45790: PUSH
45791: LD_INT 99999
45793: ST_TO_ADDR
// for i in points do
45794: LD_ADDR_VAR 0 4
45798: PUSH
45799: LD_VAR 0 2
45803: PUSH
45804: FOR_IN
45805: IFFALSE 45874
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45807: LD_ADDR_VAR 0 6
45811: PUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: LD_VAR 0 4
45821: PUSH
45822: LD_INT 1
45824: ARRAY
45825: PPUSH
45826: LD_VAR 0 4
45830: PUSH
45831: LD_INT 2
45833: ARRAY
45834: PPUSH
45835: CALL_OW 297
45839: ST_TO_ADDR
// if tmpDist < dist then
45840: LD_VAR 0 6
45844: PUSH
45845: LD_VAR 0 5
45849: LESS
45850: IFFALSE 45872
// begin result := i ;
45852: LD_ADDR_VAR 0 3
45856: PUSH
45857: LD_VAR 0 4
45861: ST_TO_ADDR
// dist := tmpDist ;
45862: LD_ADDR_VAR 0 5
45866: PUSH
45867: LD_VAR 0 6
45871: ST_TO_ADDR
// end ; end ;
45872: GO 45804
45874: POP
45875: POP
// end ;
45876: LD_VAR 0 3
45880: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45881: LD_INT 0
45883: PPUSH
// uc_side := side ;
45884: LD_ADDR_OWVAR 20
45888: PUSH
45889: LD_VAR 0 1
45893: ST_TO_ADDR
// uc_nation := 3 ;
45894: LD_ADDR_OWVAR 21
45898: PUSH
45899: LD_INT 3
45901: ST_TO_ADDR
// vc_chassis := 25 ;
45902: LD_ADDR_OWVAR 37
45906: PUSH
45907: LD_INT 25
45909: ST_TO_ADDR
// vc_engine := engine_siberite ;
45910: LD_ADDR_OWVAR 39
45914: PUSH
45915: LD_INT 3
45917: ST_TO_ADDR
// vc_control := control_computer ;
45918: LD_ADDR_OWVAR 38
45922: PUSH
45923: LD_INT 3
45925: ST_TO_ADDR
// vc_weapon := 59 ;
45926: LD_ADDR_OWVAR 40
45930: PUSH
45931: LD_INT 59
45933: ST_TO_ADDR
// result := CreateVehicle ;
45934: LD_ADDR_VAR 0 5
45938: PUSH
45939: CALL_OW 45
45943: ST_TO_ADDR
// SetDir ( result , d ) ;
45944: LD_VAR 0 5
45948: PPUSH
45949: LD_VAR 0 4
45953: PPUSH
45954: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45958: LD_VAR 0 5
45962: PPUSH
45963: LD_VAR 0 2
45967: PPUSH
45968: LD_VAR 0 3
45972: PPUSH
45973: LD_INT 0
45975: PPUSH
45976: CALL_OW 48
// end ;
45980: LD_VAR 0 5
45984: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45985: LD_INT 0
45987: PPUSH
45988: PPUSH
45989: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45990: LD_ADDR_VAR 0 2
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46013: LD_VAR 0 1
46017: NOT
46018: PUSH
46019: LD_VAR 0 1
46023: PPUSH
46024: CALL_OW 264
46028: PUSH
46029: LD_INT 12
46031: PUSH
46032: LD_INT 51
46034: PUSH
46035: LD_INT 32
46037: PUSH
46038: LD_INT 89
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: IN
46047: NOT
46048: OR
46049: IFFALSE 46053
// exit ;
46051: GO 46151
// for i := 1 to 3 do
46053: LD_ADDR_VAR 0 3
46057: PUSH
46058: DOUBLE
46059: LD_INT 1
46061: DEC
46062: ST_TO_ADDR
46063: LD_INT 3
46065: PUSH
46066: FOR_TO
46067: IFFALSE 46149
// begin tmp := GetCargo ( cargo , i ) ;
46069: LD_ADDR_VAR 0 4
46073: PUSH
46074: LD_VAR 0 1
46078: PPUSH
46079: LD_VAR 0 3
46083: PPUSH
46084: CALL_OW 289
46088: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46089: LD_ADDR_VAR 0 2
46093: PUSH
46094: LD_VAR 0 2
46098: PPUSH
46099: LD_VAR 0 3
46103: PPUSH
46104: LD_VAR 0 4
46108: PPUSH
46109: CALL_OW 1
46113: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46114: LD_ADDR_VAR 0 2
46118: PUSH
46119: LD_VAR 0 2
46123: PPUSH
46124: LD_INT 4
46126: PPUSH
46127: LD_VAR 0 2
46131: PUSH
46132: LD_INT 4
46134: ARRAY
46135: PUSH
46136: LD_VAR 0 4
46140: PLUS
46141: PPUSH
46142: CALL_OW 1
46146: ST_TO_ADDR
// end ;
46147: GO 46066
46149: POP
46150: POP
// end ;
46151: LD_VAR 0 2
46155: RET
// export function Length ( array ) ; begin
46156: LD_INT 0
46158: PPUSH
// result := array + 0 ;
46159: LD_ADDR_VAR 0 2
46163: PUSH
46164: LD_VAR 0 1
46168: PUSH
46169: LD_INT 0
46171: PLUS
46172: ST_TO_ADDR
// end ;
46173: LD_VAR 0 2
46177: RET
// export function PrepareArray ( array ) ; begin
46178: LD_INT 0
46180: PPUSH
// result := array diff 0 ;
46181: LD_ADDR_VAR 0 2
46185: PUSH
46186: LD_VAR 0 1
46190: PUSH
46191: LD_INT 0
46193: DIFF
46194: ST_TO_ADDR
// if not result [ 1 ] then
46195: LD_VAR 0 2
46199: PUSH
46200: LD_INT 1
46202: ARRAY
46203: NOT
46204: IFFALSE 46224
// result := Delete ( result , 1 ) ;
46206: LD_ADDR_VAR 0 2
46210: PUSH
46211: LD_VAR 0 2
46215: PPUSH
46216: LD_INT 1
46218: PPUSH
46219: CALL_OW 3
46223: ST_TO_ADDR
// end ;
46224: LD_VAR 0 2
46228: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46229: LD_INT 0
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
// sibRocketRange := 25 ;
46235: LD_ADDR_VAR 0 6
46239: PUSH
46240: LD_INT 25
46242: ST_TO_ADDR
// result := false ;
46243: LD_ADDR_VAR 0 4
46247: PUSH
46248: LD_INT 0
46250: ST_TO_ADDR
// for i := 0 to 5 do
46251: LD_ADDR_VAR 0 5
46255: PUSH
46256: DOUBLE
46257: LD_INT 0
46259: DEC
46260: ST_TO_ADDR
46261: LD_INT 5
46263: PUSH
46264: FOR_TO
46265: IFFALSE 46332
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46267: LD_VAR 0 1
46271: PPUSH
46272: LD_VAR 0 5
46276: PPUSH
46277: LD_VAR 0 6
46281: PPUSH
46282: CALL_OW 272
46286: PPUSH
46287: LD_VAR 0 2
46291: PPUSH
46292: LD_VAR 0 5
46296: PPUSH
46297: LD_VAR 0 6
46301: PPUSH
46302: CALL_OW 273
46306: PPUSH
46307: LD_VAR 0 3
46311: PPUSH
46312: CALL_OW 309
46316: IFFALSE 46330
// begin result := true ;
46318: LD_ADDR_VAR 0 4
46322: PUSH
46323: LD_INT 1
46325: ST_TO_ADDR
// exit ;
46326: POP
46327: POP
46328: GO 46334
// end ;
46330: GO 46264
46332: POP
46333: POP
// end ;
46334: LD_VAR 0 4
46338: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46339: LD_INT 0
46341: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46342: LD_VAR 0 1
46346: PPUSH
46347: LD_VAR 0 2
46351: PPUSH
46352: LD_INT 0
46354: PPUSH
46355: LD_INT 0
46357: PPUSH
46358: LD_INT 1
46360: PPUSH
46361: LD_INT 0
46363: PPUSH
46364: CALL_OW 587
// end ;
46368: LD_VAR 0 3
46372: RET
// export function CenterOnNow ( unit ) ; begin
46373: LD_INT 0
46375: PPUSH
// result := IsInUnit ( unit ) ;
46376: LD_ADDR_VAR 0 2
46380: PUSH
46381: LD_VAR 0 1
46385: PPUSH
46386: CALL_OW 310
46390: ST_TO_ADDR
// if not result then
46391: LD_VAR 0 2
46395: NOT
46396: IFFALSE 46408
// result := unit ;
46398: LD_ADDR_VAR 0 2
46402: PUSH
46403: LD_VAR 0 1
46407: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46408: LD_VAR 0 1
46412: PPUSH
46413: CALL_OW 87
// end ;
46417: LD_VAR 0 2
46421: RET
// export function ComMoveHex ( unit , hex ) ; begin
46422: LD_INT 0
46424: PPUSH
// if not hex then
46425: LD_VAR 0 2
46429: NOT
46430: IFFALSE 46434
// exit ;
46432: GO 46487
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46434: LD_VAR 0 2
46438: PUSH
46439: LD_INT 1
46441: ARRAY
46442: PPUSH
46443: LD_VAR 0 2
46447: PUSH
46448: LD_INT 2
46450: ARRAY
46451: PPUSH
46452: CALL_OW 428
46456: IFFALSE 46460
// exit ;
46458: GO 46487
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46460: LD_VAR 0 1
46464: PPUSH
46465: LD_VAR 0 2
46469: PUSH
46470: LD_INT 1
46472: ARRAY
46473: PPUSH
46474: LD_VAR 0 2
46478: PUSH
46479: LD_INT 2
46481: ARRAY
46482: PPUSH
46483: CALL_OW 111
// end ;
46487: LD_VAR 0 3
46491: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46492: LD_INT 0
46494: PPUSH
46495: PPUSH
46496: PPUSH
// if not unit or not enemy then
46497: LD_VAR 0 1
46501: NOT
46502: PUSH
46503: LD_VAR 0 2
46507: NOT
46508: OR
46509: IFFALSE 46513
// exit ;
46511: GO 46637
// x := GetX ( enemy ) ;
46513: LD_ADDR_VAR 0 4
46517: PUSH
46518: LD_VAR 0 2
46522: PPUSH
46523: CALL_OW 250
46527: ST_TO_ADDR
// y := GetY ( enemy ) ;
46528: LD_ADDR_VAR 0 5
46532: PUSH
46533: LD_VAR 0 2
46537: PPUSH
46538: CALL_OW 251
46542: ST_TO_ADDR
// if ValidHex ( x , y ) then
46543: LD_VAR 0 4
46547: PPUSH
46548: LD_VAR 0 5
46552: PPUSH
46553: CALL_OW 488
46557: IFFALSE 46637
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46559: LD_VAR 0 2
46563: PPUSH
46564: CALL_OW 247
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: IN
46579: PUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: CALL_OW 255
46589: PPUSH
46590: LD_VAR 0 2
46594: PPUSH
46595: CALL_OW 292
46599: OR
46600: IFFALSE 46618
// ComAttackUnit ( unit , enemy ) else
46602: LD_VAR 0 1
46606: PPUSH
46607: LD_VAR 0 2
46611: PPUSH
46612: CALL_OW 115
46616: GO 46637
// ComAgressiveMove ( unit , x , y ) ;
46618: LD_VAR 0 1
46622: PPUSH
46623: LD_VAR 0 4
46627: PPUSH
46628: LD_VAR 0 5
46632: PPUSH
46633: CALL_OW 114
// end ;
46637: LD_VAR 0 3
46641: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46642: LD_INT 0
46644: PPUSH
46645: PPUSH
46646: PPUSH
// list := AreaToList ( area , 0 ) ;
46647: LD_ADDR_VAR 0 5
46651: PUSH
46652: LD_VAR 0 1
46656: PPUSH
46657: LD_INT 0
46659: PPUSH
46660: CALL_OW 517
46664: ST_TO_ADDR
// if not list then
46665: LD_VAR 0 5
46669: NOT
46670: IFFALSE 46674
// exit ;
46672: GO 46804
// if all then
46674: LD_VAR 0 2
46678: IFFALSE 46766
// begin for i := 1 to list [ 1 ] do
46680: LD_ADDR_VAR 0 4
46684: PUSH
46685: DOUBLE
46686: LD_INT 1
46688: DEC
46689: ST_TO_ADDR
46690: LD_VAR 0 5
46694: PUSH
46695: LD_INT 1
46697: ARRAY
46698: PUSH
46699: FOR_TO
46700: IFFALSE 46762
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46702: LD_ADDR_VAR 0 3
46706: PUSH
46707: LD_VAR 0 3
46711: PPUSH
46712: LD_VAR 0 3
46716: PUSH
46717: LD_INT 1
46719: PLUS
46720: PPUSH
46721: LD_VAR 0 5
46725: PUSH
46726: LD_INT 1
46728: ARRAY
46729: PUSH
46730: LD_VAR 0 4
46734: ARRAY
46735: PUSH
46736: LD_VAR 0 5
46740: PUSH
46741: LD_INT 2
46743: ARRAY
46744: PUSH
46745: LD_VAR 0 4
46749: ARRAY
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PPUSH
46755: CALL_OW 1
46759: ST_TO_ADDR
46760: GO 46699
46762: POP
46763: POP
// exit ;
46764: GO 46804
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46766: LD_ADDR_VAR 0 3
46770: PUSH
46771: LD_VAR 0 5
46775: PUSH
46776: LD_INT 1
46778: ARRAY
46779: PUSH
46780: LD_INT 1
46782: ARRAY
46783: PUSH
46784: LD_VAR 0 5
46788: PUSH
46789: LD_INT 2
46791: ARRAY
46792: PUSH
46793: LD_INT 1
46795: ARRAY
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: EMPTY
46802: LIST
46803: ST_TO_ADDR
// end ;
46804: LD_VAR 0 3
46808: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46809: LD_INT 0
46811: PPUSH
46812: PPUSH
// list := AreaToList ( area , 0 ) ;
46813: LD_ADDR_VAR 0 4
46817: PUSH
46818: LD_VAR 0 1
46822: PPUSH
46823: LD_INT 0
46825: PPUSH
46826: CALL_OW 517
46830: ST_TO_ADDR
// if not list then
46831: LD_VAR 0 4
46835: NOT
46836: IFFALSE 46840
// exit ;
46838: GO 46881
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46840: LD_ADDR_VAR 0 3
46844: PUSH
46845: LD_VAR 0 4
46849: PUSH
46850: LD_INT 1
46852: ARRAY
46853: PUSH
46854: LD_INT 1
46856: ARRAY
46857: PUSH
46858: LD_VAR 0 4
46862: PUSH
46863: LD_INT 2
46865: ARRAY
46866: PUSH
46867: LD_INT 1
46869: ARRAY
46870: PUSH
46871: LD_VAR 0 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// end ;
46881: LD_VAR 0 3
46885: RET
// export function First ( array ) ; begin
46886: LD_INT 0
46888: PPUSH
// if not array then
46889: LD_VAR 0 1
46893: NOT
46894: IFFALSE 46898
// exit ;
46896: GO 46912
// result := array [ 1 ] ;
46898: LD_ADDR_VAR 0 2
46902: PUSH
46903: LD_VAR 0 1
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: ST_TO_ADDR
// end ;
46912: LD_VAR 0 2
46916: RET
// export function Last ( array ) ; begin
46917: LD_INT 0
46919: PPUSH
// if not array then
46920: LD_VAR 0 1
46924: NOT
46925: IFFALSE 46929
// exit ;
46927: GO 46945
// result := array [ array ] ;
46929: LD_ADDR_VAR 0 2
46933: PUSH
46934: LD_VAR 0 1
46938: PUSH
46939: LD_VAR 0 1
46943: ARRAY
46944: ST_TO_ADDR
// end ;
46945: LD_VAR 0 2
46949: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46950: LD_INT 0
46952: PPUSH
46953: PPUSH
// result := [ ] ;
46954: LD_ADDR_VAR 0 5
46958: PUSH
46959: EMPTY
46960: ST_TO_ADDR
// if not array then
46961: LD_VAR 0 1
46965: NOT
46966: IFFALSE 46970
// exit ;
46968: GO 47082
// for i := 1 to array do
46970: LD_ADDR_VAR 0 6
46974: PUSH
46975: DOUBLE
46976: LD_INT 1
46978: DEC
46979: ST_TO_ADDR
46980: LD_VAR 0 1
46984: PUSH
46985: FOR_TO
46986: IFFALSE 47080
// if array [ i ] [ index ] = value then
46988: LD_VAR 0 1
46992: PUSH
46993: LD_VAR 0 6
46997: ARRAY
46998: PUSH
46999: LD_VAR 0 2
47003: ARRAY
47004: PUSH
47005: LD_VAR 0 3
47009: EQUAL
47010: IFFALSE 47078
// begin if indexColumn then
47012: LD_VAR 0 4
47016: IFFALSE 47052
// result := Join ( result , array [ i ] [ indexColumn ] ) else
47018: LD_ADDR_VAR 0 5
47022: PUSH
47023: LD_VAR 0 5
47027: PPUSH
47028: LD_VAR 0 1
47032: PUSH
47033: LD_VAR 0 6
47037: ARRAY
47038: PUSH
47039: LD_VAR 0 4
47043: ARRAY
47044: PPUSH
47045: CALL 42420 0 2
47049: ST_TO_ADDR
47050: GO 47078
// result := Join ( result , array [ i ] ) ;
47052: LD_ADDR_VAR 0 5
47056: PUSH
47057: LD_VAR 0 5
47061: PPUSH
47062: LD_VAR 0 1
47066: PUSH
47067: LD_VAR 0 6
47071: ARRAY
47072: PPUSH
47073: CALL 42420 0 2
47077: ST_TO_ADDR
// end ;
47078: GO 46985
47080: POP
47081: POP
// end ;
47082: LD_VAR 0 5
47086: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
47087: LD_INT 0
47089: PPUSH
47090: PPUSH
47091: PPUSH
// if btype = b_depot then
47092: LD_VAR 0 2
47096: PUSH
47097: LD_INT 0
47099: EQUAL
47100: IFFALSE 47112
// begin result := true ;
47102: LD_ADDR_VAR 0 3
47106: PUSH
47107: LD_INT 1
47109: ST_TO_ADDR
// exit ;
47110: GO 47228
// end ; pom := GetBase ( depot ) ;
47112: LD_ADDR_VAR 0 4
47116: PUSH
47117: LD_VAR 0 1
47121: PPUSH
47122: CALL_OW 274
47126: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47127: LD_ADDR_VAR 0 5
47131: PUSH
47132: LD_VAR 0 2
47136: PPUSH
47137: LD_VAR 0 1
47141: PPUSH
47142: CALL_OW 248
47146: PPUSH
47147: CALL_OW 450
47151: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
47152: LD_ADDR_VAR 0 3
47156: PUSH
47157: LD_VAR 0 4
47161: PPUSH
47162: LD_INT 1
47164: PPUSH
47165: CALL_OW 275
47169: PUSH
47170: LD_VAR 0 5
47174: PUSH
47175: LD_INT 1
47177: ARRAY
47178: GREATEREQUAL
47179: PUSH
47180: LD_VAR 0 4
47184: PPUSH
47185: LD_INT 2
47187: PPUSH
47188: CALL_OW 275
47192: PUSH
47193: LD_VAR 0 5
47197: PUSH
47198: LD_INT 2
47200: ARRAY
47201: GREATEREQUAL
47202: AND
47203: PUSH
47204: LD_VAR 0 4
47208: PPUSH
47209: LD_INT 3
47211: PPUSH
47212: CALL_OW 275
47216: PUSH
47217: LD_VAR 0 5
47221: PUSH
47222: LD_INT 3
47224: ARRAY
47225: GREATEREQUAL
47226: AND
47227: ST_TO_ADDR
// end ;
47228: LD_VAR 0 3
47232: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
47233: LD_INT 0
47235: PPUSH
// if not vehicles or not parkingPoint then
47236: LD_VAR 0 1
47240: NOT
47241: PUSH
47242: LD_VAR 0 2
47246: NOT
47247: OR
47248: IFFALSE 47252
// exit ;
47250: GO 47350
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
47252: LD_ADDR_VAR 0 1
47256: PUSH
47257: LD_VAR 0 1
47261: PPUSH
47262: LD_INT 50
47264: PUSH
47265: EMPTY
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 92
47273: PUSH
47274: LD_VAR 0 2
47278: PUSH
47279: LD_INT 1
47281: ARRAY
47282: PUSH
47283: LD_VAR 0 2
47287: PUSH
47288: LD_INT 2
47290: ARRAY
47291: PUSH
47292: LD_INT 8
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PPUSH
47309: CALL_OW 72
47313: ST_TO_ADDR
// if not vehicles then
47314: LD_VAR 0 1
47318: NOT
47319: IFFALSE 47323
// exit ;
47321: GO 47350
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
47323: LD_VAR 0 1
47327: PPUSH
47328: LD_VAR 0 2
47332: PUSH
47333: LD_INT 1
47335: ARRAY
47336: PPUSH
47337: LD_VAR 0 2
47341: PUSH
47342: LD_INT 2
47344: ARRAY
47345: PPUSH
47346: CALL_OW 111
// end ;
47350: LD_VAR 0 3
47354: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
47355: LD_INT 0
47357: PPUSH
47358: PPUSH
47359: PPUSH
// if not side or not area then
47360: LD_VAR 0 1
47364: NOT
47365: PUSH
47366: LD_VAR 0 2
47370: NOT
47371: OR
47372: IFFALSE 47376
// exit ;
47374: GO 47495
// tmp := AreaToList ( area , 0 ) ;
47376: LD_ADDR_VAR 0 5
47380: PUSH
47381: LD_VAR 0 2
47385: PPUSH
47386: LD_INT 0
47388: PPUSH
47389: CALL_OW 517
47393: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
47394: LD_ADDR_VAR 0 4
47398: PUSH
47399: DOUBLE
47400: LD_INT 1
47402: DEC
47403: ST_TO_ADDR
47404: LD_VAR 0 5
47408: PUSH
47409: LD_INT 1
47411: ARRAY
47412: PUSH
47413: FOR_TO
47414: IFFALSE 47493
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
47416: LD_VAR 0 5
47420: PUSH
47421: LD_INT 1
47423: ARRAY
47424: PUSH
47425: LD_VAR 0 4
47429: ARRAY
47430: PPUSH
47431: LD_VAR 0 5
47435: PUSH
47436: LD_INT 2
47438: ARRAY
47439: PUSH
47440: LD_VAR 0 4
47444: ARRAY
47445: PPUSH
47446: CALL_OW 351
47450: IFFALSE 47491
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47452: LD_VAR 0 5
47456: PUSH
47457: LD_INT 1
47459: ARRAY
47460: PUSH
47461: LD_VAR 0 4
47465: ARRAY
47466: PPUSH
47467: LD_VAR 0 5
47471: PUSH
47472: LD_INT 2
47474: ARRAY
47475: PUSH
47476: LD_VAR 0 4
47480: ARRAY
47481: PPUSH
47482: LD_VAR 0 1
47486: PPUSH
47487: CALL_OW 244
// end ;
47491: GO 47413
47493: POP
47494: POP
// end ; end_of_file end_of_file
47495: LD_VAR 0 3
47499: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47500: LD_VAR 0 1
47504: PPUSH
47505: LD_VAR 0 2
47509: PPUSH
47510: LD_VAR 0 3
47514: PPUSH
47515: LD_VAR 0 4
47519: PPUSH
47520: LD_VAR 0 5
47524: PPUSH
47525: LD_VAR 0 6
47529: PPUSH
47530: CALL 47731 0 6
// end ;
47534: PPOPN 6
47536: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
47537: LD_INT 0
47539: PPUSH
// begin if not units then
47540: LD_VAR 0 1
47544: NOT
47545: IFFALSE 47549
// exit ;
47547: GO 47549
// end ;
47549: PPOPN 7
47551: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
47552: CALL 47618 0 0
// end ; end_of_file
47556: PPOPN 1
47558: END
// export globalGameSaveCounter ; every 0 0$1 do
47559: GO 47561
47561: DISABLE
// begin enable ;
47562: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47563: LD_STRING updateTimer(
47565: PUSH
47566: LD_OWVAR 1
47570: STR
47571: PUSH
47572: LD_STRING );
47574: STR
47575: PPUSH
47576: CALL_OW 559
// end ;
47580: END
// every 0 0$1 do
47581: GO 47583
47583: DISABLE
// begin globalGameSaveCounter := 0 ;
47584: LD_ADDR_EXP 27
47588: PUSH
47589: LD_INT 0
47591: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47592: LD_STRING setGameSaveCounter(0)
47594: PPUSH
47595: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47599: LD_STRING initStreamRollete();
47601: PPUSH
47602: CALL_OW 559
// InitStreamMode ;
47606: CALL 48949 0 0
// DefineStreamItems ( false ) ;
47610: LD_INT 0
47612: PPUSH
47613: CALL 49413 0 1
// end ;
47617: END
// export function SOS_MapStart ( ) ; begin
47618: LD_INT 0
47620: PPUSH
// if streamModeActive then
47621: LD_EXP 28
47625: IFFALSE 47634
// DefineStreamItems ( true ) ;
47627: LD_INT 1
47629: PPUSH
47630: CALL 49413 0 1
// UpdateLuaVariables ( ) ;
47634: CALL 47651 0 0
// UpdateFactoryWaypoints ( ) ;
47638: CALL 62282 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47642: CALL 62539 0 0
// end ;
47646: LD_VAR 0 1
47650: RET
// function UpdateLuaVariables ( ) ; begin
47651: LD_INT 0
47653: PPUSH
// if globalGameSaveCounter then
47654: LD_EXP 27
47658: IFFALSE 47692
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47660: LD_ADDR_EXP 27
47664: PUSH
47665: LD_EXP 27
47669: PPUSH
47670: CALL 43781 0 1
47674: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47675: LD_STRING setGameSaveCounter(
47677: PUSH
47678: LD_EXP 27
47682: STR
47683: PUSH
47684: LD_STRING )
47686: STR
47687: PPUSH
47688: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47692: LD_STRING setGameDifficulty(
47694: PUSH
47695: LD_OWVAR 67
47699: STR
47700: PUSH
47701: LD_STRING )
47703: STR
47704: PPUSH
47705: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
47709: LD_STRING displayDifficulty(
47711: PUSH
47712: LD_OWVAR 67
47716: STR
47717: PUSH
47718: LD_STRING )
47720: STR
47721: PPUSH
47722: CALL_OW 559
// end ;
47726: LD_VAR 0 1
47730: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47731: LD_INT 0
47733: PPUSH
// if p2 = stream_mode then
47734: LD_VAR 0 2
47738: PUSH
47739: LD_INT 100
47741: EQUAL
47742: IFFALSE 48745
// begin if not StreamModeActive then
47744: LD_EXP 28
47748: NOT
47749: IFFALSE 47759
// StreamModeActive := true ;
47751: LD_ADDR_EXP 28
47755: PUSH
47756: LD_INT 1
47758: ST_TO_ADDR
// if p3 = 0 then
47759: LD_VAR 0 3
47763: PUSH
47764: LD_INT 0
47766: EQUAL
47767: IFFALSE 47773
// InitStreamMode ;
47769: CALL 48949 0 0
// if p3 = 1 then
47773: LD_VAR 0 3
47777: PUSH
47778: LD_INT 1
47780: EQUAL
47781: IFFALSE 47791
// sRocket := true ;
47783: LD_ADDR_EXP 33
47787: PUSH
47788: LD_INT 1
47790: ST_TO_ADDR
// if p3 = 2 then
47791: LD_VAR 0 3
47795: PUSH
47796: LD_INT 2
47798: EQUAL
47799: IFFALSE 47809
// sSpeed := true ;
47801: LD_ADDR_EXP 32
47805: PUSH
47806: LD_INT 1
47808: ST_TO_ADDR
// if p3 = 3 then
47809: LD_VAR 0 3
47813: PUSH
47814: LD_INT 3
47816: EQUAL
47817: IFFALSE 47827
// sEngine := true ;
47819: LD_ADDR_EXP 34
47823: PUSH
47824: LD_INT 1
47826: ST_TO_ADDR
// if p3 = 4 then
47827: LD_VAR 0 3
47831: PUSH
47832: LD_INT 4
47834: EQUAL
47835: IFFALSE 47845
// sSpec := true ;
47837: LD_ADDR_EXP 31
47841: PUSH
47842: LD_INT 1
47844: ST_TO_ADDR
// if p3 = 5 then
47845: LD_VAR 0 3
47849: PUSH
47850: LD_INT 5
47852: EQUAL
47853: IFFALSE 47863
// sLevel := true ;
47855: LD_ADDR_EXP 35
47859: PUSH
47860: LD_INT 1
47862: ST_TO_ADDR
// if p3 = 6 then
47863: LD_VAR 0 3
47867: PUSH
47868: LD_INT 6
47870: EQUAL
47871: IFFALSE 47881
// sArmoury := true ;
47873: LD_ADDR_EXP 36
47877: PUSH
47878: LD_INT 1
47880: ST_TO_ADDR
// if p3 = 7 then
47881: LD_VAR 0 3
47885: PUSH
47886: LD_INT 7
47888: EQUAL
47889: IFFALSE 47899
// sRadar := true ;
47891: LD_ADDR_EXP 37
47895: PUSH
47896: LD_INT 1
47898: ST_TO_ADDR
// if p3 = 8 then
47899: LD_VAR 0 3
47903: PUSH
47904: LD_INT 8
47906: EQUAL
47907: IFFALSE 47917
// sBunker := true ;
47909: LD_ADDR_EXP 38
47913: PUSH
47914: LD_INT 1
47916: ST_TO_ADDR
// if p3 = 9 then
47917: LD_VAR 0 3
47921: PUSH
47922: LD_INT 9
47924: EQUAL
47925: IFFALSE 47935
// sHack := true ;
47927: LD_ADDR_EXP 39
47931: PUSH
47932: LD_INT 1
47934: ST_TO_ADDR
// if p3 = 10 then
47935: LD_VAR 0 3
47939: PUSH
47940: LD_INT 10
47942: EQUAL
47943: IFFALSE 47953
// sFire := true ;
47945: LD_ADDR_EXP 40
47949: PUSH
47950: LD_INT 1
47952: ST_TO_ADDR
// if p3 = 11 then
47953: LD_VAR 0 3
47957: PUSH
47958: LD_INT 11
47960: EQUAL
47961: IFFALSE 47971
// sRefresh := true ;
47963: LD_ADDR_EXP 41
47967: PUSH
47968: LD_INT 1
47970: ST_TO_ADDR
// if p3 = 12 then
47971: LD_VAR 0 3
47975: PUSH
47976: LD_INT 12
47978: EQUAL
47979: IFFALSE 47989
// sExp := true ;
47981: LD_ADDR_EXP 42
47985: PUSH
47986: LD_INT 1
47988: ST_TO_ADDR
// if p3 = 13 then
47989: LD_VAR 0 3
47993: PUSH
47994: LD_INT 13
47996: EQUAL
47997: IFFALSE 48007
// sDepot := true ;
47999: LD_ADDR_EXP 43
48003: PUSH
48004: LD_INT 1
48006: ST_TO_ADDR
// if p3 = 14 then
48007: LD_VAR 0 3
48011: PUSH
48012: LD_INT 14
48014: EQUAL
48015: IFFALSE 48025
// sFlag := true ;
48017: LD_ADDR_EXP 44
48021: PUSH
48022: LD_INT 1
48024: ST_TO_ADDR
// if p3 = 15 then
48025: LD_VAR 0 3
48029: PUSH
48030: LD_INT 15
48032: EQUAL
48033: IFFALSE 48043
// sKamikadze := true ;
48035: LD_ADDR_EXP 52
48039: PUSH
48040: LD_INT 1
48042: ST_TO_ADDR
// if p3 = 16 then
48043: LD_VAR 0 3
48047: PUSH
48048: LD_INT 16
48050: EQUAL
48051: IFFALSE 48061
// sTroll := true ;
48053: LD_ADDR_EXP 53
48057: PUSH
48058: LD_INT 1
48060: ST_TO_ADDR
// if p3 = 17 then
48061: LD_VAR 0 3
48065: PUSH
48066: LD_INT 17
48068: EQUAL
48069: IFFALSE 48079
// sSlow := true ;
48071: LD_ADDR_EXP 54
48075: PUSH
48076: LD_INT 1
48078: ST_TO_ADDR
// if p3 = 18 then
48079: LD_VAR 0 3
48083: PUSH
48084: LD_INT 18
48086: EQUAL
48087: IFFALSE 48097
// sLack := true ;
48089: LD_ADDR_EXP 55
48093: PUSH
48094: LD_INT 1
48096: ST_TO_ADDR
// if p3 = 19 then
48097: LD_VAR 0 3
48101: PUSH
48102: LD_INT 19
48104: EQUAL
48105: IFFALSE 48115
// sTank := true ;
48107: LD_ADDR_EXP 57
48111: PUSH
48112: LD_INT 1
48114: ST_TO_ADDR
// if p3 = 20 then
48115: LD_VAR 0 3
48119: PUSH
48120: LD_INT 20
48122: EQUAL
48123: IFFALSE 48133
// sRemote := true ;
48125: LD_ADDR_EXP 58
48129: PUSH
48130: LD_INT 1
48132: ST_TO_ADDR
// if p3 = 21 then
48133: LD_VAR 0 3
48137: PUSH
48138: LD_INT 21
48140: EQUAL
48141: IFFALSE 48151
// sPowell := true ;
48143: LD_ADDR_EXP 59
48147: PUSH
48148: LD_INT 1
48150: ST_TO_ADDR
// if p3 = 22 then
48151: LD_VAR 0 3
48155: PUSH
48156: LD_INT 22
48158: EQUAL
48159: IFFALSE 48169
// sTeleport := true ;
48161: LD_ADDR_EXP 62
48165: PUSH
48166: LD_INT 1
48168: ST_TO_ADDR
// if p3 = 23 then
48169: LD_VAR 0 3
48173: PUSH
48174: LD_INT 23
48176: EQUAL
48177: IFFALSE 48187
// sOilTower := true ;
48179: LD_ADDR_EXP 64
48183: PUSH
48184: LD_INT 1
48186: ST_TO_ADDR
// if p3 = 24 then
48187: LD_VAR 0 3
48191: PUSH
48192: LD_INT 24
48194: EQUAL
48195: IFFALSE 48205
// sShovel := true ;
48197: LD_ADDR_EXP 65
48201: PUSH
48202: LD_INT 1
48204: ST_TO_ADDR
// if p3 = 25 then
48205: LD_VAR 0 3
48209: PUSH
48210: LD_INT 25
48212: EQUAL
48213: IFFALSE 48223
// sSheik := true ;
48215: LD_ADDR_EXP 66
48219: PUSH
48220: LD_INT 1
48222: ST_TO_ADDR
// if p3 = 26 then
48223: LD_VAR 0 3
48227: PUSH
48228: LD_INT 26
48230: EQUAL
48231: IFFALSE 48241
// sEarthquake := true ;
48233: LD_ADDR_EXP 68
48237: PUSH
48238: LD_INT 1
48240: ST_TO_ADDR
// if p3 = 27 then
48241: LD_VAR 0 3
48245: PUSH
48246: LD_INT 27
48248: EQUAL
48249: IFFALSE 48259
// sAI := true ;
48251: LD_ADDR_EXP 69
48255: PUSH
48256: LD_INT 1
48258: ST_TO_ADDR
// if p3 = 28 then
48259: LD_VAR 0 3
48263: PUSH
48264: LD_INT 28
48266: EQUAL
48267: IFFALSE 48277
// sCargo := true ;
48269: LD_ADDR_EXP 72
48273: PUSH
48274: LD_INT 1
48276: ST_TO_ADDR
// if p3 = 29 then
48277: LD_VAR 0 3
48281: PUSH
48282: LD_INT 29
48284: EQUAL
48285: IFFALSE 48295
// sDLaser := true ;
48287: LD_ADDR_EXP 73
48291: PUSH
48292: LD_INT 1
48294: ST_TO_ADDR
// if p3 = 30 then
48295: LD_VAR 0 3
48299: PUSH
48300: LD_INT 30
48302: EQUAL
48303: IFFALSE 48313
// sExchange := true ;
48305: LD_ADDR_EXP 74
48309: PUSH
48310: LD_INT 1
48312: ST_TO_ADDR
// if p3 = 31 then
48313: LD_VAR 0 3
48317: PUSH
48318: LD_INT 31
48320: EQUAL
48321: IFFALSE 48331
// sFac := true ;
48323: LD_ADDR_EXP 75
48327: PUSH
48328: LD_INT 1
48330: ST_TO_ADDR
// if p3 = 32 then
48331: LD_VAR 0 3
48335: PUSH
48336: LD_INT 32
48338: EQUAL
48339: IFFALSE 48349
// sPower := true ;
48341: LD_ADDR_EXP 76
48345: PUSH
48346: LD_INT 1
48348: ST_TO_ADDR
// if p3 = 33 then
48349: LD_VAR 0 3
48353: PUSH
48354: LD_INT 33
48356: EQUAL
48357: IFFALSE 48367
// sRandom := true ;
48359: LD_ADDR_EXP 77
48363: PUSH
48364: LD_INT 1
48366: ST_TO_ADDR
// if p3 = 34 then
48367: LD_VAR 0 3
48371: PUSH
48372: LD_INT 34
48374: EQUAL
48375: IFFALSE 48385
// sShield := true ;
48377: LD_ADDR_EXP 78
48381: PUSH
48382: LD_INT 1
48384: ST_TO_ADDR
// if p3 = 35 then
48385: LD_VAR 0 3
48389: PUSH
48390: LD_INT 35
48392: EQUAL
48393: IFFALSE 48403
// sTime := true ;
48395: LD_ADDR_EXP 79
48399: PUSH
48400: LD_INT 1
48402: ST_TO_ADDR
// if p3 = 36 then
48403: LD_VAR 0 3
48407: PUSH
48408: LD_INT 36
48410: EQUAL
48411: IFFALSE 48421
// sTools := true ;
48413: LD_ADDR_EXP 80
48417: PUSH
48418: LD_INT 1
48420: ST_TO_ADDR
// if p3 = 101 then
48421: LD_VAR 0 3
48425: PUSH
48426: LD_INT 101
48428: EQUAL
48429: IFFALSE 48439
// sSold := true ;
48431: LD_ADDR_EXP 45
48435: PUSH
48436: LD_INT 1
48438: ST_TO_ADDR
// if p3 = 102 then
48439: LD_VAR 0 3
48443: PUSH
48444: LD_INT 102
48446: EQUAL
48447: IFFALSE 48457
// sDiff := true ;
48449: LD_ADDR_EXP 46
48453: PUSH
48454: LD_INT 1
48456: ST_TO_ADDR
// if p3 = 103 then
48457: LD_VAR 0 3
48461: PUSH
48462: LD_INT 103
48464: EQUAL
48465: IFFALSE 48475
// sFog := true ;
48467: LD_ADDR_EXP 49
48471: PUSH
48472: LD_INT 1
48474: ST_TO_ADDR
// if p3 = 104 then
48475: LD_VAR 0 3
48479: PUSH
48480: LD_INT 104
48482: EQUAL
48483: IFFALSE 48493
// sReset := true ;
48485: LD_ADDR_EXP 50
48489: PUSH
48490: LD_INT 1
48492: ST_TO_ADDR
// if p3 = 105 then
48493: LD_VAR 0 3
48497: PUSH
48498: LD_INT 105
48500: EQUAL
48501: IFFALSE 48511
// sSun := true ;
48503: LD_ADDR_EXP 51
48507: PUSH
48508: LD_INT 1
48510: ST_TO_ADDR
// if p3 = 106 then
48511: LD_VAR 0 3
48515: PUSH
48516: LD_INT 106
48518: EQUAL
48519: IFFALSE 48529
// sTiger := true ;
48521: LD_ADDR_EXP 47
48525: PUSH
48526: LD_INT 1
48528: ST_TO_ADDR
// if p3 = 107 then
48529: LD_VAR 0 3
48533: PUSH
48534: LD_INT 107
48536: EQUAL
48537: IFFALSE 48547
// sBomb := true ;
48539: LD_ADDR_EXP 48
48543: PUSH
48544: LD_INT 1
48546: ST_TO_ADDR
// if p3 = 108 then
48547: LD_VAR 0 3
48551: PUSH
48552: LD_INT 108
48554: EQUAL
48555: IFFALSE 48565
// sWound := true ;
48557: LD_ADDR_EXP 56
48561: PUSH
48562: LD_INT 1
48564: ST_TO_ADDR
// if p3 = 109 then
48565: LD_VAR 0 3
48569: PUSH
48570: LD_INT 109
48572: EQUAL
48573: IFFALSE 48583
// sBetray := true ;
48575: LD_ADDR_EXP 60
48579: PUSH
48580: LD_INT 1
48582: ST_TO_ADDR
// if p3 = 110 then
48583: LD_VAR 0 3
48587: PUSH
48588: LD_INT 110
48590: EQUAL
48591: IFFALSE 48601
// sContamin := true ;
48593: LD_ADDR_EXP 61
48597: PUSH
48598: LD_INT 1
48600: ST_TO_ADDR
// if p3 = 111 then
48601: LD_VAR 0 3
48605: PUSH
48606: LD_INT 111
48608: EQUAL
48609: IFFALSE 48619
// sOil := true ;
48611: LD_ADDR_EXP 63
48615: PUSH
48616: LD_INT 1
48618: ST_TO_ADDR
// if p3 = 112 then
48619: LD_VAR 0 3
48623: PUSH
48624: LD_INT 112
48626: EQUAL
48627: IFFALSE 48637
// sStu := true ;
48629: LD_ADDR_EXP 67
48633: PUSH
48634: LD_INT 1
48636: ST_TO_ADDR
// if p3 = 113 then
48637: LD_VAR 0 3
48641: PUSH
48642: LD_INT 113
48644: EQUAL
48645: IFFALSE 48655
// sBazooka := true ;
48647: LD_ADDR_EXP 70
48651: PUSH
48652: LD_INT 1
48654: ST_TO_ADDR
// if p3 = 114 then
48655: LD_VAR 0 3
48659: PUSH
48660: LD_INT 114
48662: EQUAL
48663: IFFALSE 48673
// sMortar := true ;
48665: LD_ADDR_EXP 71
48669: PUSH
48670: LD_INT 1
48672: ST_TO_ADDR
// if p3 = 115 then
48673: LD_VAR 0 3
48677: PUSH
48678: LD_INT 115
48680: EQUAL
48681: IFFALSE 48691
// sRanger := true ;
48683: LD_ADDR_EXP 81
48687: PUSH
48688: LD_INT 1
48690: ST_TO_ADDR
// if p3 = 116 then
48691: LD_VAR 0 3
48695: PUSH
48696: LD_INT 116
48698: EQUAL
48699: IFFALSE 48709
// sComputer := true ;
48701: LD_ADDR_EXP 82
48705: PUSH
48706: LD_INT 1
48708: ST_TO_ADDR
// if p3 = 117 then
48709: LD_VAR 0 3
48713: PUSH
48714: LD_INT 117
48716: EQUAL
48717: IFFALSE 48727
// s30 := true ;
48719: LD_ADDR_EXP 83
48723: PUSH
48724: LD_INT 1
48726: ST_TO_ADDR
// if p3 = 118 then
48727: LD_VAR 0 3
48731: PUSH
48732: LD_INT 118
48734: EQUAL
48735: IFFALSE 48745
// s60 := true ;
48737: LD_ADDR_EXP 84
48741: PUSH
48742: LD_INT 1
48744: ST_TO_ADDR
// end ; if p2 = hack_mode then
48745: LD_VAR 0 2
48749: PUSH
48750: LD_INT 101
48752: EQUAL
48753: IFFALSE 48881
// begin case p3 of 1 :
48755: LD_VAR 0 3
48759: PUSH
48760: LD_INT 1
48762: DOUBLE
48763: EQUAL
48764: IFTRUE 48768
48766: GO 48775
48768: POP
// hHackUnlimitedResources ; 2 :
48769: CALL 61028 0 0
48773: GO 48881
48775: LD_INT 2
48777: DOUBLE
48778: EQUAL
48779: IFTRUE 48783
48781: GO 48790
48783: POP
// hHackSetLevel10 ; 3 :
48784: CALL 61161 0 0
48788: GO 48881
48790: LD_INT 3
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48798
48796: GO 48805
48798: POP
// hHackSetLevel10YourUnits ; 4 :
48799: CALL 61246 0 0
48803: GO 48881
48805: LD_INT 4
48807: DOUBLE
48808: EQUAL
48809: IFTRUE 48813
48811: GO 48820
48813: POP
// hHackInvincible ; 5 :
48814: CALL 61694 0 0
48818: GO 48881
48820: LD_INT 5
48822: DOUBLE
48823: EQUAL
48824: IFTRUE 48828
48826: GO 48835
48828: POP
// hHackInvisible ; 6 :
48829: CALL 61805 0 0
48833: GO 48881
48835: LD_INT 6
48837: DOUBLE
48838: EQUAL
48839: IFTRUE 48843
48841: GO 48850
48843: POP
// hHackChangeYourSide ; 7 :
48844: CALL 61862 0 0
48848: GO 48881
48850: LD_INT 7
48852: DOUBLE
48853: EQUAL
48854: IFTRUE 48858
48856: GO 48865
48858: POP
// hHackChangeUnitSide ; 8 :
48859: CALL 61904 0 0
48863: GO 48881
48865: LD_INT 8
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48873
48871: GO 48880
48873: POP
// hHackFog ; end ;
48874: CALL 62005 0 0
48878: GO 48881
48880: POP
// end ; if p2 = game_save_mode then
48881: LD_VAR 0 2
48885: PUSH
48886: LD_INT 102
48888: EQUAL
48889: IFFALSE 48944
// begin if p3 = 1 then
48891: LD_VAR 0 3
48895: PUSH
48896: LD_INT 1
48898: EQUAL
48899: IFFALSE 48911
// globalGameSaveCounter := p4 ;
48901: LD_ADDR_EXP 27
48905: PUSH
48906: LD_VAR 0 4
48910: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48911: LD_VAR 0 3
48915: PUSH
48916: LD_INT 2
48918: EQUAL
48919: PUSH
48920: LD_EXP 27
48924: AND
48925: IFFALSE 48944
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48927: LD_STRING setGameSaveCounter(
48929: PUSH
48930: LD_EXP 27
48934: STR
48935: PUSH
48936: LD_STRING )
48938: STR
48939: PPUSH
48940: CALL_OW 559
// end ; end ;
48944: LD_VAR 0 7
48948: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48949: LD_INT 0
48951: PPUSH
// streamModeActive := false ;
48952: LD_ADDR_EXP 28
48956: PUSH
48957: LD_INT 0
48959: ST_TO_ADDR
// normalCounter := 36 ;
48960: LD_ADDR_EXP 29
48964: PUSH
48965: LD_INT 36
48967: ST_TO_ADDR
// hardcoreCounter := 18 ;
48968: LD_ADDR_EXP 30
48972: PUSH
48973: LD_INT 18
48975: ST_TO_ADDR
// sRocket := false ;
48976: LD_ADDR_EXP 33
48980: PUSH
48981: LD_INT 0
48983: ST_TO_ADDR
// sSpeed := false ;
48984: LD_ADDR_EXP 32
48988: PUSH
48989: LD_INT 0
48991: ST_TO_ADDR
// sEngine := false ;
48992: LD_ADDR_EXP 34
48996: PUSH
48997: LD_INT 0
48999: ST_TO_ADDR
// sSpec := false ;
49000: LD_ADDR_EXP 31
49004: PUSH
49005: LD_INT 0
49007: ST_TO_ADDR
// sLevel := false ;
49008: LD_ADDR_EXP 35
49012: PUSH
49013: LD_INT 0
49015: ST_TO_ADDR
// sArmoury := false ;
49016: LD_ADDR_EXP 36
49020: PUSH
49021: LD_INT 0
49023: ST_TO_ADDR
// sRadar := false ;
49024: LD_ADDR_EXP 37
49028: PUSH
49029: LD_INT 0
49031: ST_TO_ADDR
// sBunker := false ;
49032: LD_ADDR_EXP 38
49036: PUSH
49037: LD_INT 0
49039: ST_TO_ADDR
// sHack := false ;
49040: LD_ADDR_EXP 39
49044: PUSH
49045: LD_INT 0
49047: ST_TO_ADDR
// sFire := false ;
49048: LD_ADDR_EXP 40
49052: PUSH
49053: LD_INT 0
49055: ST_TO_ADDR
// sRefresh := false ;
49056: LD_ADDR_EXP 41
49060: PUSH
49061: LD_INT 0
49063: ST_TO_ADDR
// sExp := false ;
49064: LD_ADDR_EXP 42
49068: PUSH
49069: LD_INT 0
49071: ST_TO_ADDR
// sDepot := false ;
49072: LD_ADDR_EXP 43
49076: PUSH
49077: LD_INT 0
49079: ST_TO_ADDR
// sFlag := false ;
49080: LD_ADDR_EXP 44
49084: PUSH
49085: LD_INT 0
49087: ST_TO_ADDR
// sKamikadze := false ;
49088: LD_ADDR_EXP 52
49092: PUSH
49093: LD_INT 0
49095: ST_TO_ADDR
// sTroll := false ;
49096: LD_ADDR_EXP 53
49100: PUSH
49101: LD_INT 0
49103: ST_TO_ADDR
// sSlow := false ;
49104: LD_ADDR_EXP 54
49108: PUSH
49109: LD_INT 0
49111: ST_TO_ADDR
// sLack := false ;
49112: LD_ADDR_EXP 55
49116: PUSH
49117: LD_INT 0
49119: ST_TO_ADDR
// sTank := false ;
49120: LD_ADDR_EXP 57
49124: PUSH
49125: LD_INT 0
49127: ST_TO_ADDR
// sRemote := false ;
49128: LD_ADDR_EXP 58
49132: PUSH
49133: LD_INT 0
49135: ST_TO_ADDR
// sPowell := false ;
49136: LD_ADDR_EXP 59
49140: PUSH
49141: LD_INT 0
49143: ST_TO_ADDR
// sTeleport := false ;
49144: LD_ADDR_EXP 62
49148: PUSH
49149: LD_INT 0
49151: ST_TO_ADDR
// sOilTower := false ;
49152: LD_ADDR_EXP 64
49156: PUSH
49157: LD_INT 0
49159: ST_TO_ADDR
// sShovel := false ;
49160: LD_ADDR_EXP 65
49164: PUSH
49165: LD_INT 0
49167: ST_TO_ADDR
// sSheik := false ;
49168: LD_ADDR_EXP 66
49172: PUSH
49173: LD_INT 0
49175: ST_TO_ADDR
// sEarthquake := false ;
49176: LD_ADDR_EXP 68
49180: PUSH
49181: LD_INT 0
49183: ST_TO_ADDR
// sAI := false ;
49184: LD_ADDR_EXP 69
49188: PUSH
49189: LD_INT 0
49191: ST_TO_ADDR
// sCargo := false ;
49192: LD_ADDR_EXP 72
49196: PUSH
49197: LD_INT 0
49199: ST_TO_ADDR
// sDLaser := false ;
49200: LD_ADDR_EXP 73
49204: PUSH
49205: LD_INT 0
49207: ST_TO_ADDR
// sExchange := false ;
49208: LD_ADDR_EXP 74
49212: PUSH
49213: LD_INT 0
49215: ST_TO_ADDR
// sFac := false ;
49216: LD_ADDR_EXP 75
49220: PUSH
49221: LD_INT 0
49223: ST_TO_ADDR
// sPower := false ;
49224: LD_ADDR_EXP 76
49228: PUSH
49229: LD_INT 0
49231: ST_TO_ADDR
// sRandom := false ;
49232: LD_ADDR_EXP 77
49236: PUSH
49237: LD_INT 0
49239: ST_TO_ADDR
// sShield := false ;
49240: LD_ADDR_EXP 78
49244: PUSH
49245: LD_INT 0
49247: ST_TO_ADDR
// sTime := false ;
49248: LD_ADDR_EXP 79
49252: PUSH
49253: LD_INT 0
49255: ST_TO_ADDR
// sTools := false ;
49256: LD_ADDR_EXP 80
49260: PUSH
49261: LD_INT 0
49263: ST_TO_ADDR
// sSold := false ;
49264: LD_ADDR_EXP 45
49268: PUSH
49269: LD_INT 0
49271: ST_TO_ADDR
// sDiff := false ;
49272: LD_ADDR_EXP 46
49276: PUSH
49277: LD_INT 0
49279: ST_TO_ADDR
// sFog := false ;
49280: LD_ADDR_EXP 49
49284: PUSH
49285: LD_INT 0
49287: ST_TO_ADDR
// sReset := false ;
49288: LD_ADDR_EXP 50
49292: PUSH
49293: LD_INT 0
49295: ST_TO_ADDR
// sSun := false ;
49296: LD_ADDR_EXP 51
49300: PUSH
49301: LD_INT 0
49303: ST_TO_ADDR
// sTiger := false ;
49304: LD_ADDR_EXP 47
49308: PUSH
49309: LD_INT 0
49311: ST_TO_ADDR
// sBomb := false ;
49312: LD_ADDR_EXP 48
49316: PUSH
49317: LD_INT 0
49319: ST_TO_ADDR
// sWound := false ;
49320: LD_ADDR_EXP 56
49324: PUSH
49325: LD_INT 0
49327: ST_TO_ADDR
// sBetray := false ;
49328: LD_ADDR_EXP 60
49332: PUSH
49333: LD_INT 0
49335: ST_TO_ADDR
// sContamin := false ;
49336: LD_ADDR_EXP 61
49340: PUSH
49341: LD_INT 0
49343: ST_TO_ADDR
// sOil := false ;
49344: LD_ADDR_EXP 63
49348: PUSH
49349: LD_INT 0
49351: ST_TO_ADDR
// sStu := false ;
49352: LD_ADDR_EXP 67
49356: PUSH
49357: LD_INT 0
49359: ST_TO_ADDR
// sBazooka := false ;
49360: LD_ADDR_EXP 70
49364: PUSH
49365: LD_INT 0
49367: ST_TO_ADDR
// sMortar := false ;
49368: LD_ADDR_EXP 71
49372: PUSH
49373: LD_INT 0
49375: ST_TO_ADDR
// sRanger := false ;
49376: LD_ADDR_EXP 81
49380: PUSH
49381: LD_INT 0
49383: ST_TO_ADDR
// sComputer := false ;
49384: LD_ADDR_EXP 82
49388: PUSH
49389: LD_INT 0
49391: ST_TO_ADDR
// s30 := false ;
49392: LD_ADDR_EXP 83
49396: PUSH
49397: LD_INT 0
49399: ST_TO_ADDR
// s60 := false ;
49400: LD_ADDR_EXP 84
49404: PUSH
49405: LD_INT 0
49407: ST_TO_ADDR
// end ;
49408: LD_VAR 0 1
49412: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49413: LD_INT 0
49415: PPUSH
49416: PPUSH
49417: PPUSH
49418: PPUSH
49419: PPUSH
49420: PPUSH
49421: PPUSH
// result := [ ] ;
49422: LD_ADDR_VAR 0 2
49426: PUSH
49427: EMPTY
49428: ST_TO_ADDR
// if campaign_id = 1 then
49429: LD_OWVAR 69
49433: PUSH
49434: LD_INT 1
49436: EQUAL
49437: IFFALSE 52603
// begin case mission_number of 1 :
49439: LD_OWVAR 70
49443: PUSH
49444: LD_INT 1
49446: DOUBLE
49447: EQUAL
49448: IFTRUE 49452
49450: GO 49528
49452: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49453: LD_ADDR_VAR 0 2
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 4
49463: PUSH
49464: LD_INT 11
49466: PUSH
49467: LD_INT 12
49469: PUSH
49470: LD_INT 15
49472: PUSH
49473: LD_INT 16
49475: PUSH
49476: LD_INT 22
49478: PUSH
49479: LD_INT 23
49481: PUSH
49482: LD_INT 26
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 101
49498: PUSH
49499: LD_INT 102
49501: PUSH
49502: LD_INT 106
49504: PUSH
49505: LD_INT 116
49507: PUSH
49508: LD_INT 117
49510: PUSH
49511: LD_INT 118
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: ST_TO_ADDR
49526: GO 52601
49528: LD_INT 2
49530: DOUBLE
49531: EQUAL
49532: IFTRUE 49536
49534: GO 49620
49536: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49537: LD_ADDR_VAR 0 2
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 4
49547: PUSH
49548: LD_INT 11
49550: PUSH
49551: LD_INT 12
49553: PUSH
49554: LD_INT 15
49556: PUSH
49557: LD_INT 16
49559: PUSH
49560: LD_INT 22
49562: PUSH
49563: LD_INT 23
49565: PUSH
49566: LD_INT 26
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 101
49582: PUSH
49583: LD_INT 102
49585: PUSH
49586: LD_INT 105
49588: PUSH
49589: LD_INT 106
49591: PUSH
49592: LD_INT 108
49594: PUSH
49595: LD_INT 116
49597: PUSH
49598: LD_INT 117
49600: PUSH
49601: LD_INT 118
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: ST_TO_ADDR
49618: GO 52601
49620: LD_INT 3
49622: DOUBLE
49623: EQUAL
49624: IFTRUE 49628
49626: GO 49716
49628: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49629: LD_ADDR_VAR 0 2
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 4
49639: PUSH
49640: LD_INT 5
49642: PUSH
49643: LD_INT 11
49645: PUSH
49646: LD_INT 12
49648: PUSH
49649: LD_INT 15
49651: PUSH
49652: LD_INT 16
49654: PUSH
49655: LD_INT 22
49657: PUSH
49658: LD_INT 26
49660: PUSH
49661: LD_INT 36
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 101
49678: PUSH
49679: LD_INT 102
49681: PUSH
49682: LD_INT 105
49684: PUSH
49685: LD_INT 106
49687: PUSH
49688: LD_INT 108
49690: PUSH
49691: LD_INT 116
49693: PUSH
49694: LD_INT 117
49696: PUSH
49697: LD_INT 118
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: ST_TO_ADDR
49714: GO 52601
49716: LD_INT 4
49718: DOUBLE
49719: EQUAL
49720: IFTRUE 49724
49722: GO 49820
49724: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49725: LD_ADDR_VAR 0 2
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: LD_INT 4
49735: PUSH
49736: LD_INT 5
49738: PUSH
49739: LD_INT 8
49741: PUSH
49742: LD_INT 11
49744: PUSH
49745: LD_INT 12
49747: PUSH
49748: LD_INT 15
49750: PUSH
49751: LD_INT 16
49753: PUSH
49754: LD_INT 22
49756: PUSH
49757: LD_INT 23
49759: PUSH
49760: LD_INT 26
49762: PUSH
49763: LD_INT 36
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 101
49782: PUSH
49783: LD_INT 102
49785: PUSH
49786: LD_INT 105
49788: PUSH
49789: LD_INT 106
49791: PUSH
49792: LD_INT 108
49794: PUSH
49795: LD_INT 116
49797: PUSH
49798: LD_INT 117
49800: PUSH
49801: LD_INT 118
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: ST_TO_ADDR
49818: GO 52601
49820: LD_INT 5
49822: DOUBLE
49823: EQUAL
49824: IFTRUE 49828
49826: GO 49940
49828: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49829: LD_ADDR_VAR 0 2
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 4
49839: PUSH
49840: LD_INT 5
49842: PUSH
49843: LD_INT 6
49845: PUSH
49846: LD_INT 8
49848: PUSH
49849: LD_INT 11
49851: PUSH
49852: LD_INT 12
49854: PUSH
49855: LD_INT 15
49857: PUSH
49858: LD_INT 16
49860: PUSH
49861: LD_INT 22
49863: PUSH
49864: LD_INT 23
49866: PUSH
49867: LD_INT 25
49869: PUSH
49870: LD_INT 26
49872: PUSH
49873: LD_INT 36
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 101
49894: PUSH
49895: LD_INT 102
49897: PUSH
49898: LD_INT 105
49900: PUSH
49901: LD_INT 106
49903: PUSH
49904: LD_INT 108
49906: PUSH
49907: LD_INT 109
49909: PUSH
49910: LD_INT 112
49912: PUSH
49913: LD_INT 116
49915: PUSH
49916: LD_INT 117
49918: PUSH
49919: LD_INT 118
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: ST_TO_ADDR
49938: GO 52601
49940: LD_INT 6
49942: DOUBLE
49943: EQUAL
49944: IFTRUE 49948
49946: GO 50080
49948: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49949: LD_ADDR_VAR 0 2
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 4
49959: PUSH
49960: LD_INT 5
49962: PUSH
49963: LD_INT 6
49965: PUSH
49966: LD_INT 8
49968: PUSH
49969: LD_INT 11
49971: PUSH
49972: LD_INT 12
49974: PUSH
49975: LD_INT 15
49977: PUSH
49978: LD_INT 16
49980: PUSH
49981: LD_INT 20
49983: PUSH
49984: LD_INT 21
49986: PUSH
49987: LD_INT 22
49989: PUSH
49990: LD_INT 23
49992: PUSH
49993: LD_INT 25
49995: PUSH
49996: LD_INT 26
49998: PUSH
49999: LD_INT 30
50001: PUSH
50002: LD_INT 31
50004: PUSH
50005: LD_INT 32
50007: PUSH
50008: LD_INT 36
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 101
50034: PUSH
50035: LD_INT 102
50037: PUSH
50038: LD_INT 105
50040: PUSH
50041: LD_INT 106
50043: PUSH
50044: LD_INT 108
50046: PUSH
50047: LD_INT 109
50049: PUSH
50050: LD_INT 112
50052: PUSH
50053: LD_INT 116
50055: PUSH
50056: LD_INT 117
50058: PUSH
50059: LD_INT 118
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: ST_TO_ADDR
50078: GO 52601
50080: LD_INT 7
50082: DOUBLE
50083: EQUAL
50084: IFTRUE 50088
50086: GO 50200
50088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50089: LD_ADDR_VAR 0 2
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 4
50099: PUSH
50100: LD_INT 5
50102: PUSH
50103: LD_INT 7
50105: PUSH
50106: LD_INT 11
50108: PUSH
50109: LD_INT 12
50111: PUSH
50112: LD_INT 15
50114: PUSH
50115: LD_INT 16
50117: PUSH
50118: LD_INT 20
50120: PUSH
50121: LD_INT 21
50123: PUSH
50124: LD_INT 22
50126: PUSH
50127: LD_INT 23
50129: PUSH
50130: LD_INT 25
50132: PUSH
50133: LD_INT 26
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 101
50154: PUSH
50155: LD_INT 102
50157: PUSH
50158: LD_INT 103
50160: PUSH
50161: LD_INT 105
50163: PUSH
50164: LD_INT 106
50166: PUSH
50167: LD_INT 108
50169: PUSH
50170: LD_INT 112
50172: PUSH
50173: LD_INT 116
50175: PUSH
50176: LD_INT 117
50178: PUSH
50179: LD_INT 118
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: ST_TO_ADDR
50198: GO 52601
50200: LD_INT 8
50202: DOUBLE
50203: EQUAL
50204: IFTRUE 50208
50206: GO 50348
50208: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50209: LD_ADDR_VAR 0 2
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 4
50219: PUSH
50220: LD_INT 5
50222: PUSH
50223: LD_INT 6
50225: PUSH
50226: LD_INT 7
50228: PUSH
50229: LD_INT 8
50231: PUSH
50232: LD_INT 11
50234: PUSH
50235: LD_INT 12
50237: PUSH
50238: LD_INT 15
50240: PUSH
50241: LD_INT 16
50243: PUSH
50244: LD_INT 20
50246: PUSH
50247: LD_INT 21
50249: PUSH
50250: LD_INT 22
50252: PUSH
50253: LD_INT 23
50255: PUSH
50256: LD_INT 25
50258: PUSH
50259: LD_INT 26
50261: PUSH
50262: LD_INT 30
50264: PUSH
50265: LD_INT 31
50267: PUSH
50268: LD_INT 32
50270: PUSH
50271: LD_INT 36
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 101
50298: PUSH
50299: LD_INT 102
50301: PUSH
50302: LD_INT 103
50304: PUSH
50305: LD_INT 105
50307: PUSH
50308: LD_INT 106
50310: PUSH
50311: LD_INT 108
50313: PUSH
50314: LD_INT 109
50316: PUSH
50317: LD_INT 112
50319: PUSH
50320: LD_INT 116
50322: PUSH
50323: LD_INT 117
50325: PUSH
50326: LD_INT 118
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: ST_TO_ADDR
50346: GO 52601
50348: LD_INT 9
50350: DOUBLE
50351: EQUAL
50352: IFTRUE 50356
50354: GO 50504
50356: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50357: LD_ADDR_VAR 0 2
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 4
50367: PUSH
50368: LD_INT 5
50370: PUSH
50371: LD_INT 6
50373: PUSH
50374: LD_INT 7
50376: PUSH
50377: LD_INT 8
50379: PUSH
50380: LD_INT 11
50382: PUSH
50383: LD_INT 12
50385: PUSH
50386: LD_INT 15
50388: PUSH
50389: LD_INT 16
50391: PUSH
50392: LD_INT 20
50394: PUSH
50395: LD_INT 21
50397: PUSH
50398: LD_INT 22
50400: PUSH
50401: LD_INT 23
50403: PUSH
50404: LD_INT 25
50406: PUSH
50407: LD_INT 26
50409: PUSH
50410: LD_INT 28
50412: PUSH
50413: LD_INT 30
50415: PUSH
50416: LD_INT 31
50418: PUSH
50419: LD_INT 32
50421: PUSH
50422: LD_INT 36
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 101
50450: PUSH
50451: LD_INT 102
50453: PUSH
50454: LD_INT 103
50456: PUSH
50457: LD_INT 105
50459: PUSH
50460: LD_INT 106
50462: PUSH
50463: LD_INT 108
50465: PUSH
50466: LD_INT 109
50468: PUSH
50469: LD_INT 112
50471: PUSH
50472: LD_INT 114
50474: PUSH
50475: LD_INT 116
50477: PUSH
50478: LD_INT 117
50480: PUSH
50481: LD_INT 118
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: ST_TO_ADDR
50502: GO 52601
50504: LD_INT 10
50506: DOUBLE
50507: EQUAL
50508: IFTRUE 50512
50510: GO 50708
50512: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50513: LD_ADDR_VAR 0 2
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: LD_INT 5
50526: PUSH
50527: LD_INT 6
50529: PUSH
50530: LD_INT 7
50532: PUSH
50533: LD_INT 8
50535: PUSH
50536: LD_INT 9
50538: PUSH
50539: LD_INT 10
50541: PUSH
50542: LD_INT 11
50544: PUSH
50545: LD_INT 12
50547: PUSH
50548: LD_INT 13
50550: PUSH
50551: LD_INT 14
50553: PUSH
50554: LD_INT 15
50556: PUSH
50557: LD_INT 16
50559: PUSH
50560: LD_INT 17
50562: PUSH
50563: LD_INT 18
50565: PUSH
50566: LD_INT 19
50568: PUSH
50569: LD_INT 20
50571: PUSH
50572: LD_INT 21
50574: PUSH
50575: LD_INT 22
50577: PUSH
50578: LD_INT 23
50580: PUSH
50581: LD_INT 24
50583: PUSH
50584: LD_INT 25
50586: PUSH
50587: LD_INT 26
50589: PUSH
50590: LD_INT 28
50592: PUSH
50593: LD_INT 30
50595: PUSH
50596: LD_INT 31
50598: PUSH
50599: LD_INT 32
50601: PUSH
50602: LD_INT 36
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 101
50638: PUSH
50639: LD_INT 102
50641: PUSH
50642: LD_INT 103
50644: PUSH
50645: LD_INT 104
50647: PUSH
50648: LD_INT 105
50650: PUSH
50651: LD_INT 106
50653: PUSH
50654: LD_INT 107
50656: PUSH
50657: LD_INT 108
50659: PUSH
50660: LD_INT 109
50662: PUSH
50663: LD_INT 110
50665: PUSH
50666: LD_INT 111
50668: PUSH
50669: LD_INT 112
50671: PUSH
50672: LD_INT 114
50674: PUSH
50675: LD_INT 116
50677: PUSH
50678: LD_INT 117
50680: PUSH
50681: LD_INT 118
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: ST_TO_ADDR
50706: GO 52601
50708: LD_INT 11
50710: DOUBLE
50711: EQUAL
50712: IFTRUE 50716
50714: GO 50920
50716: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50717: LD_ADDR_VAR 0 2
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: LD_INT 4
50730: PUSH
50731: LD_INT 5
50733: PUSH
50734: LD_INT 6
50736: PUSH
50737: LD_INT 7
50739: PUSH
50740: LD_INT 8
50742: PUSH
50743: LD_INT 9
50745: PUSH
50746: LD_INT 10
50748: PUSH
50749: LD_INT 11
50751: PUSH
50752: LD_INT 12
50754: PUSH
50755: LD_INT 13
50757: PUSH
50758: LD_INT 14
50760: PUSH
50761: LD_INT 15
50763: PUSH
50764: LD_INT 16
50766: PUSH
50767: LD_INT 17
50769: PUSH
50770: LD_INT 18
50772: PUSH
50773: LD_INT 19
50775: PUSH
50776: LD_INT 20
50778: PUSH
50779: LD_INT 21
50781: PUSH
50782: LD_INT 22
50784: PUSH
50785: LD_INT 23
50787: PUSH
50788: LD_INT 24
50790: PUSH
50791: LD_INT 25
50793: PUSH
50794: LD_INT 26
50796: PUSH
50797: LD_INT 28
50799: PUSH
50800: LD_INT 30
50802: PUSH
50803: LD_INT 31
50805: PUSH
50806: LD_INT 32
50808: PUSH
50809: LD_INT 34
50811: PUSH
50812: LD_INT 36
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 101
50850: PUSH
50851: LD_INT 102
50853: PUSH
50854: LD_INT 103
50856: PUSH
50857: LD_INT 104
50859: PUSH
50860: LD_INT 105
50862: PUSH
50863: LD_INT 106
50865: PUSH
50866: LD_INT 107
50868: PUSH
50869: LD_INT 108
50871: PUSH
50872: LD_INT 109
50874: PUSH
50875: LD_INT 110
50877: PUSH
50878: LD_INT 111
50880: PUSH
50881: LD_INT 112
50883: PUSH
50884: LD_INT 114
50886: PUSH
50887: LD_INT 116
50889: PUSH
50890: LD_INT 117
50892: PUSH
50893: LD_INT 118
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: ST_TO_ADDR
50918: GO 52601
50920: LD_INT 12
50922: DOUBLE
50923: EQUAL
50924: IFTRUE 50928
50926: GO 51148
50928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50929: LD_ADDR_VAR 0 2
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 4
50945: PUSH
50946: LD_INT 5
50948: PUSH
50949: LD_INT 6
50951: PUSH
50952: LD_INT 7
50954: PUSH
50955: LD_INT 8
50957: PUSH
50958: LD_INT 9
50960: PUSH
50961: LD_INT 10
50963: PUSH
50964: LD_INT 11
50966: PUSH
50967: LD_INT 12
50969: PUSH
50970: LD_INT 13
50972: PUSH
50973: LD_INT 14
50975: PUSH
50976: LD_INT 15
50978: PUSH
50979: LD_INT 16
50981: PUSH
50982: LD_INT 17
50984: PUSH
50985: LD_INT 18
50987: PUSH
50988: LD_INT 19
50990: PUSH
50991: LD_INT 20
50993: PUSH
50994: LD_INT 21
50996: PUSH
50997: LD_INT 22
50999: PUSH
51000: LD_INT 23
51002: PUSH
51003: LD_INT 24
51005: PUSH
51006: LD_INT 25
51008: PUSH
51009: LD_INT 26
51011: PUSH
51012: LD_INT 27
51014: PUSH
51015: LD_INT 28
51017: PUSH
51018: LD_INT 30
51020: PUSH
51021: LD_INT 31
51023: PUSH
51024: LD_INT 32
51026: PUSH
51027: LD_INT 33
51029: PUSH
51030: LD_INT 34
51032: PUSH
51033: LD_INT 36
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 101
51074: PUSH
51075: LD_INT 102
51077: PUSH
51078: LD_INT 103
51080: PUSH
51081: LD_INT 104
51083: PUSH
51084: LD_INT 105
51086: PUSH
51087: LD_INT 106
51089: PUSH
51090: LD_INT 107
51092: PUSH
51093: LD_INT 108
51095: PUSH
51096: LD_INT 109
51098: PUSH
51099: LD_INT 110
51101: PUSH
51102: LD_INT 111
51104: PUSH
51105: LD_INT 112
51107: PUSH
51108: LD_INT 113
51110: PUSH
51111: LD_INT 114
51113: PUSH
51114: LD_INT 116
51116: PUSH
51117: LD_INT 117
51119: PUSH
51120: LD_INT 118
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: ST_TO_ADDR
51146: GO 52601
51148: LD_INT 13
51150: DOUBLE
51151: EQUAL
51152: IFTRUE 51156
51154: GO 51364
51156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51157: LD_ADDR_VAR 0 2
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: LD_INT 8
51179: PUSH
51180: LD_INT 9
51182: PUSH
51183: LD_INT 10
51185: PUSH
51186: LD_INT 11
51188: PUSH
51189: LD_INT 12
51191: PUSH
51192: LD_INT 14
51194: PUSH
51195: LD_INT 15
51197: PUSH
51198: LD_INT 16
51200: PUSH
51201: LD_INT 17
51203: PUSH
51204: LD_INT 18
51206: PUSH
51207: LD_INT 19
51209: PUSH
51210: LD_INT 20
51212: PUSH
51213: LD_INT 21
51215: PUSH
51216: LD_INT 22
51218: PUSH
51219: LD_INT 23
51221: PUSH
51222: LD_INT 24
51224: PUSH
51225: LD_INT 25
51227: PUSH
51228: LD_INT 26
51230: PUSH
51231: LD_INT 27
51233: PUSH
51234: LD_INT 28
51236: PUSH
51237: LD_INT 30
51239: PUSH
51240: LD_INT 31
51242: PUSH
51243: LD_INT 32
51245: PUSH
51246: LD_INT 33
51248: PUSH
51249: LD_INT 34
51251: PUSH
51252: LD_INT 36
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 101
51290: PUSH
51291: LD_INT 102
51293: PUSH
51294: LD_INT 103
51296: PUSH
51297: LD_INT 104
51299: PUSH
51300: LD_INT 105
51302: PUSH
51303: LD_INT 106
51305: PUSH
51306: LD_INT 107
51308: PUSH
51309: LD_INT 108
51311: PUSH
51312: LD_INT 109
51314: PUSH
51315: LD_INT 110
51317: PUSH
51318: LD_INT 111
51320: PUSH
51321: LD_INT 112
51323: PUSH
51324: LD_INT 113
51326: PUSH
51327: LD_INT 114
51329: PUSH
51330: LD_INT 116
51332: PUSH
51333: LD_INT 117
51335: PUSH
51336: LD_INT 118
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: ST_TO_ADDR
51362: GO 52601
51364: LD_INT 14
51366: DOUBLE
51367: EQUAL
51368: IFTRUE 51372
51370: GO 51596
51372: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51373: LD_ADDR_VAR 0 2
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: LD_INT 4
51389: PUSH
51390: LD_INT 5
51392: PUSH
51393: LD_INT 6
51395: PUSH
51396: LD_INT 7
51398: PUSH
51399: LD_INT 8
51401: PUSH
51402: LD_INT 9
51404: PUSH
51405: LD_INT 10
51407: PUSH
51408: LD_INT 11
51410: PUSH
51411: LD_INT 12
51413: PUSH
51414: LD_INT 13
51416: PUSH
51417: LD_INT 14
51419: PUSH
51420: LD_INT 15
51422: PUSH
51423: LD_INT 16
51425: PUSH
51426: LD_INT 17
51428: PUSH
51429: LD_INT 18
51431: PUSH
51432: LD_INT 19
51434: PUSH
51435: LD_INT 20
51437: PUSH
51438: LD_INT 21
51440: PUSH
51441: LD_INT 22
51443: PUSH
51444: LD_INT 23
51446: PUSH
51447: LD_INT 24
51449: PUSH
51450: LD_INT 25
51452: PUSH
51453: LD_INT 26
51455: PUSH
51456: LD_INT 27
51458: PUSH
51459: LD_INT 28
51461: PUSH
51462: LD_INT 29
51464: PUSH
51465: LD_INT 30
51467: PUSH
51468: LD_INT 31
51470: PUSH
51471: LD_INT 32
51473: PUSH
51474: LD_INT 33
51476: PUSH
51477: LD_INT 34
51479: PUSH
51480: LD_INT 36
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 101
51522: PUSH
51523: LD_INT 102
51525: PUSH
51526: LD_INT 103
51528: PUSH
51529: LD_INT 104
51531: PUSH
51532: LD_INT 105
51534: PUSH
51535: LD_INT 106
51537: PUSH
51538: LD_INT 107
51540: PUSH
51541: LD_INT 108
51543: PUSH
51544: LD_INT 109
51546: PUSH
51547: LD_INT 110
51549: PUSH
51550: LD_INT 111
51552: PUSH
51553: LD_INT 112
51555: PUSH
51556: LD_INT 113
51558: PUSH
51559: LD_INT 114
51561: PUSH
51562: LD_INT 116
51564: PUSH
51565: LD_INT 117
51567: PUSH
51568: LD_INT 118
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: ST_TO_ADDR
51594: GO 52601
51596: LD_INT 15
51598: DOUBLE
51599: EQUAL
51600: IFTRUE 51604
51602: GO 51828
51604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51605: LD_ADDR_VAR 0 2
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 4
51621: PUSH
51622: LD_INT 5
51624: PUSH
51625: LD_INT 6
51627: PUSH
51628: LD_INT 7
51630: PUSH
51631: LD_INT 8
51633: PUSH
51634: LD_INT 9
51636: PUSH
51637: LD_INT 10
51639: PUSH
51640: LD_INT 11
51642: PUSH
51643: LD_INT 12
51645: PUSH
51646: LD_INT 13
51648: PUSH
51649: LD_INT 14
51651: PUSH
51652: LD_INT 15
51654: PUSH
51655: LD_INT 16
51657: PUSH
51658: LD_INT 17
51660: PUSH
51661: LD_INT 18
51663: PUSH
51664: LD_INT 19
51666: PUSH
51667: LD_INT 20
51669: PUSH
51670: LD_INT 21
51672: PUSH
51673: LD_INT 22
51675: PUSH
51676: LD_INT 23
51678: PUSH
51679: LD_INT 24
51681: PUSH
51682: LD_INT 25
51684: PUSH
51685: LD_INT 26
51687: PUSH
51688: LD_INT 27
51690: PUSH
51691: LD_INT 28
51693: PUSH
51694: LD_INT 29
51696: PUSH
51697: LD_INT 30
51699: PUSH
51700: LD_INT 31
51702: PUSH
51703: LD_INT 32
51705: PUSH
51706: LD_INT 33
51708: PUSH
51709: LD_INT 34
51711: PUSH
51712: LD_INT 36
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 101
51754: PUSH
51755: LD_INT 102
51757: PUSH
51758: LD_INT 103
51760: PUSH
51761: LD_INT 104
51763: PUSH
51764: LD_INT 105
51766: PUSH
51767: LD_INT 106
51769: PUSH
51770: LD_INT 107
51772: PUSH
51773: LD_INT 108
51775: PUSH
51776: LD_INT 109
51778: PUSH
51779: LD_INT 110
51781: PUSH
51782: LD_INT 111
51784: PUSH
51785: LD_INT 112
51787: PUSH
51788: LD_INT 113
51790: PUSH
51791: LD_INT 114
51793: PUSH
51794: LD_INT 116
51796: PUSH
51797: LD_INT 117
51799: PUSH
51800: LD_INT 118
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: ST_TO_ADDR
51826: GO 52601
51828: LD_INT 16
51830: DOUBLE
51831: EQUAL
51832: IFTRUE 51836
51834: GO 51972
51836: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51837: LD_ADDR_VAR 0 2
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 4
51847: PUSH
51848: LD_INT 5
51850: PUSH
51851: LD_INT 7
51853: PUSH
51854: LD_INT 11
51856: PUSH
51857: LD_INT 12
51859: PUSH
51860: LD_INT 15
51862: PUSH
51863: LD_INT 16
51865: PUSH
51866: LD_INT 20
51868: PUSH
51869: LD_INT 21
51871: PUSH
51872: LD_INT 22
51874: PUSH
51875: LD_INT 23
51877: PUSH
51878: LD_INT 25
51880: PUSH
51881: LD_INT 26
51883: PUSH
51884: LD_INT 30
51886: PUSH
51887: LD_INT 31
51889: PUSH
51890: LD_INT 32
51892: PUSH
51893: LD_INT 33
51895: PUSH
51896: LD_INT 34
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 101
51922: PUSH
51923: LD_INT 102
51925: PUSH
51926: LD_INT 103
51928: PUSH
51929: LD_INT 106
51931: PUSH
51932: LD_INT 108
51934: PUSH
51935: LD_INT 112
51937: PUSH
51938: LD_INT 113
51940: PUSH
51941: LD_INT 114
51943: PUSH
51944: LD_INT 116
51946: PUSH
51947: LD_INT 117
51949: PUSH
51950: LD_INT 118
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: ST_TO_ADDR
51970: GO 52601
51972: LD_INT 17
51974: DOUBLE
51975: EQUAL
51976: IFTRUE 51980
51978: GO 52204
51980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51981: LD_ADDR_VAR 0 2
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 4
51997: PUSH
51998: LD_INT 5
52000: PUSH
52001: LD_INT 6
52003: PUSH
52004: LD_INT 7
52006: PUSH
52007: LD_INT 8
52009: PUSH
52010: LD_INT 9
52012: PUSH
52013: LD_INT 10
52015: PUSH
52016: LD_INT 11
52018: PUSH
52019: LD_INT 12
52021: PUSH
52022: LD_INT 13
52024: PUSH
52025: LD_INT 14
52027: PUSH
52028: LD_INT 15
52030: PUSH
52031: LD_INT 16
52033: PUSH
52034: LD_INT 17
52036: PUSH
52037: LD_INT 18
52039: PUSH
52040: LD_INT 19
52042: PUSH
52043: LD_INT 20
52045: PUSH
52046: LD_INT 21
52048: PUSH
52049: LD_INT 22
52051: PUSH
52052: LD_INT 23
52054: PUSH
52055: LD_INT 24
52057: PUSH
52058: LD_INT 25
52060: PUSH
52061: LD_INT 26
52063: PUSH
52064: LD_INT 27
52066: PUSH
52067: LD_INT 28
52069: PUSH
52070: LD_INT 29
52072: PUSH
52073: LD_INT 30
52075: PUSH
52076: LD_INT 31
52078: PUSH
52079: LD_INT 32
52081: PUSH
52082: LD_INT 33
52084: PUSH
52085: LD_INT 34
52087: PUSH
52088: LD_INT 36
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 101
52130: PUSH
52131: LD_INT 102
52133: PUSH
52134: LD_INT 103
52136: PUSH
52137: LD_INT 104
52139: PUSH
52140: LD_INT 105
52142: PUSH
52143: LD_INT 106
52145: PUSH
52146: LD_INT 107
52148: PUSH
52149: LD_INT 108
52151: PUSH
52152: LD_INT 109
52154: PUSH
52155: LD_INT 110
52157: PUSH
52158: LD_INT 111
52160: PUSH
52161: LD_INT 112
52163: PUSH
52164: LD_INT 113
52166: PUSH
52167: LD_INT 114
52169: PUSH
52170: LD_INT 116
52172: PUSH
52173: LD_INT 117
52175: PUSH
52176: LD_INT 118
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: ST_TO_ADDR
52202: GO 52601
52204: LD_INT 18
52206: DOUBLE
52207: EQUAL
52208: IFTRUE 52212
52210: GO 52360
52212: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52213: LD_ADDR_VAR 0 2
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: LD_INT 5
52226: PUSH
52227: LD_INT 7
52229: PUSH
52230: LD_INT 11
52232: PUSH
52233: LD_INT 12
52235: PUSH
52236: LD_INT 15
52238: PUSH
52239: LD_INT 16
52241: PUSH
52242: LD_INT 20
52244: PUSH
52245: LD_INT 21
52247: PUSH
52248: LD_INT 22
52250: PUSH
52251: LD_INT 23
52253: PUSH
52254: LD_INT 25
52256: PUSH
52257: LD_INT 26
52259: PUSH
52260: LD_INT 30
52262: PUSH
52263: LD_INT 31
52265: PUSH
52266: LD_INT 32
52268: PUSH
52269: LD_INT 33
52271: PUSH
52272: LD_INT 34
52274: PUSH
52275: LD_INT 35
52277: PUSH
52278: LD_INT 36
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 101
52306: PUSH
52307: LD_INT 102
52309: PUSH
52310: LD_INT 103
52312: PUSH
52313: LD_INT 106
52315: PUSH
52316: LD_INT 108
52318: PUSH
52319: LD_INT 112
52321: PUSH
52322: LD_INT 113
52324: PUSH
52325: LD_INT 114
52327: PUSH
52328: LD_INT 115
52330: PUSH
52331: LD_INT 116
52333: PUSH
52334: LD_INT 117
52336: PUSH
52337: LD_INT 118
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: ST_TO_ADDR
52358: GO 52601
52360: LD_INT 19
52362: DOUBLE
52363: EQUAL
52364: IFTRUE 52368
52366: GO 52600
52368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52369: LD_ADDR_VAR 0 2
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: LD_INT 4
52385: PUSH
52386: LD_INT 5
52388: PUSH
52389: LD_INT 6
52391: PUSH
52392: LD_INT 7
52394: PUSH
52395: LD_INT 8
52397: PUSH
52398: LD_INT 9
52400: PUSH
52401: LD_INT 10
52403: PUSH
52404: LD_INT 11
52406: PUSH
52407: LD_INT 12
52409: PUSH
52410: LD_INT 13
52412: PUSH
52413: LD_INT 14
52415: PUSH
52416: LD_INT 15
52418: PUSH
52419: LD_INT 16
52421: PUSH
52422: LD_INT 17
52424: PUSH
52425: LD_INT 18
52427: PUSH
52428: LD_INT 19
52430: PUSH
52431: LD_INT 20
52433: PUSH
52434: LD_INT 21
52436: PUSH
52437: LD_INT 22
52439: PUSH
52440: LD_INT 23
52442: PUSH
52443: LD_INT 24
52445: PUSH
52446: LD_INT 25
52448: PUSH
52449: LD_INT 26
52451: PUSH
52452: LD_INT 27
52454: PUSH
52455: LD_INT 28
52457: PUSH
52458: LD_INT 29
52460: PUSH
52461: LD_INT 30
52463: PUSH
52464: LD_INT 31
52466: PUSH
52467: LD_INT 32
52469: PUSH
52470: LD_INT 33
52472: PUSH
52473: LD_INT 34
52475: PUSH
52476: LD_INT 35
52478: PUSH
52479: LD_INT 36
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 101
52522: PUSH
52523: LD_INT 102
52525: PUSH
52526: LD_INT 103
52528: PUSH
52529: LD_INT 104
52531: PUSH
52532: LD_INT 105
52534: PUSH
52535: LD_INT 106
52537: PUSH
52538: LD_INT 107
52540: PUSH
52541: LD_INT 108
52543: PUSH
52544: LD_INT 109
52546: PUSH
52547: LD_INT 110
52549: PUSH
52550: LD_INT 111
52552: PUSH
52553: LD_INT 112
52555: PUSH
52556: LD_INT 113
52558: PUSH
52559: LD_INT 114
52561: PUSH
52562: LD_INT 115
52564: PUSH
52565: LD_INT 116
52567: PUSH
52568: LD_INT 117
52570: PUSH
52571: LD_INT 118
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: ST_TO_ADDR
52598: GO 52601
52600: POP
// end else
52601: GO 52832
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52603: LD_ADDR_VAR 0 2
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: LD_INT 4
52619: PUSH
52620: LD_INT 5
52622: PUSH
52623: LD_INT 6
52625: PUSH
52626: LD_INT 7
52628: PUSH
52629: LD_INT 8
52631: PUSH
52632: LD_INT 9
52634: PUSH
52635: LD_INT 10
52637: PUSH
52638: LD_INT 11
52640: PUSH
52641: LD_INT 12
52643: PUSH
52644: LD_INT 13
52646: PUSH
52647: LD_INT 14
52649: PUSH
52650: LD_INT 15
52652: PUSH
52653: LD_INT 16
52655: PUSH
52656: LD_INT 17
52658: PUSH
52659: LD_INT 18
52661: PUSH
52662: LD_INT 19
52664: PUSH
52665: LD_INT 20
52667: PUSH
52668: LD_INT 21
52670: PUSH
52671: LD_INT 22
52673: PUSH
52674: LD_INT 23
52676: PUSH
52677: LD_INT 24
52679: PUSH
52680: LD_INT 25
52682: PUSH
52683: LD_INT 26
52685: PUSH
52686: LD_INT 27
52688: PUSH
52689: LD_INT 28
52691: PUSH
52692: LD_INT 29
52694: PUSH
52695: LD_INT 30
52697: PUSH
52698: LD_INT 31
52700: PUSH
52701: LD_INT 32
52703: PUSH
52704: LD_INT 33
52706: PUSH
52707: LD_INT 34
52709: PUSH
52710: LD_INT 35
52712: PUSH
52713: LD_INT 36
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 101
52756: PUSH
52757: LD_INT 102
52759: PUSH
52760: LD_INT 103
52762: PUSH
52763: LD_INT 104
52765: PUSH
52766: LD_INT 105
52768: PUSH
52769: LD_INT 106
52771: PUSH
52772: LD_INT 107
52774: PUSH
52775: LD_INT 108
52777: PUSH
52778: LD_INT 109
52780: PUSH
52781: LD_INT 110
52783: PUSH
52784: LD_INT 111
52786: PUSH
52787: LD_INT 112
52789: PUSH
52790: LD_INT 113
52792: PUSH
52793: LD_INT 114
52795: PUSH
52796: LD_INT 115
52798: PUSH
52799: LD_INT 116
52801: PUSH
52802: LD_INT 117
52804: PUSH
52805: LD_INT 118
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// if result then
52832: LD_VAR 0 2
52836: IFFALSE 53622
// begin normal :=  ;
52838: LD_ADDR_VAR 0 5
52842: PUSH
52843: LD_STRING 
52845: ST_TO_ADDR
// hardcore :=  ;
52846: LD_ADDR_VAR 0 6
52850: PUSH
52851: LD_STRING 
52853: ST_TO_ADDR
// active :=  ;
52854: LD_ADDR_VAR 0 7
52858: PUSH
52859: LD_STRING 
52861: ST_TO_ADDR
// for i = 1 to normalCounter do
52862: LD_ADDR_VAR 0 8
52866: PUSH
52867: DOUBLE
52868: LD_INT 1
52870: DEC
52871: ST_TO_ADDR
52872: LD_EXP 29
52876: PUSH
52877: FOR_TO
52878: IFFALSE 52979
// begin tmp := 0 ;
52880: LD_ADDR_VAR 0 3
52884: PUSH
52885: LD_STRING 0
52887: ST_TO_ADDR
// if result [ 1 ] then
52888: LD_VAR 0 2
52892: PUSH
52893: LD_INT 1
52895: ARRAY
52896: IFFALSE 52961
// if result [ 1 ] [ 1 ] = i then
52898: LD_VAR 0 2
52902: PUSH
52903: LD_INT 1
52905: ARRAY
52906: PUSH
52907: LD_INT 1
52909: ARRAY
52910: PUSH
52911: LD_VAR 0 8
52915: EQUAL
52916: IFFALSE 52961
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52918: LD_ADDR_VAR 0 2
52922: PUSH
52923: LD_VAR 0 2
52927: PPUSH
52928: LD_INT 1
52930: PPUSH
52931: LD_VAR 0 2
52935: PUSH
52936: LD_INT 1
52938: ARRAY
52939: PPUSH
52940: LD_INT 1
52942: PPUSH
52943: CALL_OW 3
52947: PPUSH
52948: CALL_OW 1
52952: ST_TO_ADDR
// tmp := 1 ;
52953: LD_ADDR_VAR 0 3
52957: PUSH
52958: LD_STRING 1
52960: ST_TO_ADDR
// end ; normal := normal & tmp ;
52961: LD_ADDR_VAR 0 5
52965: PUSH
52966: LD_VAR 0 5
52970: PUSH
52971: LD_VAR 0 3
52975: STR
52976: ST_TO_ADDR
// end ;
52977: GO 52877
52979: POP
52980: POP
// for i = 1 to hardcoreCounter do
52981: LD_ADDR_VAR 0 8
52985: PUSH
52986: DOUBLE
52987: LD_INT 1
52989: DEC
52990: ST_TO_ADDR
52991: LD_EXP 30
52995: PUSH
52996: FOR_TO
52997: IFFALSE 53102
// begin tmp := 0 ;
52999: LD_ADDR_VAR 0 3
53003: PUSH
53004: LD_STRING 0
53006: ST_TO_ADDR
// if result [ 2 ] then
53007: LD_VAR 0 2
53011: PUSH
53012: LD_INT 2
53014: ARRAY
53015: IFFALSE 53084
// if result [ 2 ] [ 1 ] = 100 + i then
53017: LD_VAR 0 2
53021: PUSH
53022: LD_INT 2
53024: ARRAY
53025: PUSH
53026: LD_INT 1
53028: ARRAY
53029: PUSH
53030: LD_INT 100
53032: PUSH
53033: LD_VAR 0 8
53037: PLUS
53038: EQUAL
53039: IFFALSE 53084
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53041: LD_ADDR_VAR 0 2
53045: PUSH
53046: LD_VAR 0 2
53050: PPUSH
53051: LD_INT 2
53053: PPUSH
53054: LD_VAR 0 2
53058: PUSH
53059: LD_INT 2
53061: ARRAY
53062: PPUSH
53063: LD_INT 1
53065: PPUSH
53066: CALL_OW 3
53070: PPUSH
53071: CALL_OW 1
53075: ST_TO_ADDR
// tmp := 1 ;
53076: LD_ADDR_VAR 0 3
53080: PUSH
53081: LD_STRING 1
53083: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53084: LD_ADDR_VAR 0 6
53088: PUSH
53089: LD_VAR 0 6
53093: PUSH
53094: LD_VAR 0 3
53098: STR
53099: ST_TO_ADDR
// end ;
53100: GO 52996
53102: POP
53103: POP
// if isGameLoad then
53104: LD_VAR 0 1
53108: IFFALSE 53583
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53110: LD_ADDR_VAR 0 4
53114: PUSH
53115: LD_EXP 33
53119: PUSH
53120: LD_EXP 32
53124: PUSH
53125: LD_EXP 34
53129: PUSH
53130: LD_EXP 31
53134: PUSH
53135: LD_EXP 35
53139: PUSH
53140: LD_EXP 36
53144: PUSH
53145: LD_EXP 37
53149: PUSH
53150: LD_EXP 38
53154: PUSH
53155: LD_EXP 39
53159: PUSH
53160: LD_EXP 40
53164: PUSH
53165: LD_EXP 41
53169: PUSH
53170: LD_EXP 42
53174: PUSH
53175: LD_EXP 43
53179: PUSH
53180: LD_EXP 44
53184: PUSH
53185: LD_EXP 52
53189: PUSH
53190: LD_EXP 53
53194: PUSH
53195: LD_EXP 54
53199: PUSH
53200: LD_EXP 55
53204: PUSH
53205: LD_EXP 57
53209: PUSH
53210: LD_EXP 58
53214: PUSH
53215: LD_EXP 59
53219: PUSH
53220: LD_EXP 62
53224: PUSH
53225: LD_EXP 64
53229: PUSH
53230: LD_EXP 65
53234: PUSH
53235: LD_EXP 66
53239: PUSH
53240: LD_EXP 68
53244: PUSH
53245: LD_EXP 69
53249: PUSH
53250: LD_EXP 72
53254: PUSH
53255: LD_EXP 73
53259: PUSH
53260: LD_EXP 74
53264: PUSH
53265: LD_EXP 75
53269: PUSH
53270: LD_EXP 76
53274: PUSH
53275: LD_EXP 77
53279: PUSH
53280: LD_EXP 78
53284: PUSH
53285: LD_EXP 79
53289: PUSH
53290: LD_EXP 80
53294: PUSH
53295: LD_EXP 45
53299: PUSH
53300: LD_EXP 46
53304: PUSH
53305: LD_EXP 49
53309: PUSH
53310: LD_EXP 50
53314: PUSH
53315: LD_EXP 51
53319: PUSH
53320: LD_EXP 47
53324: PUSH
53325: LD_EXP 48
53329: PUSH
53330: LD_EXP 56
53334: PUSH
53335: LD_EXP 60
53339: PUSH
53340: LD_EXP 61
53344: PUSH
53345: LD_EXP 63
53349: PUSH
53350: LD_EXP 67
53354: PUSH
53355: LD_EXP 70
53359: PUSH
53360: LD_EXP 71
53364: PUSH
53365: LD_EXP 81
53369: PUSH
53370: LD_EXP 82
53374: PUSH
53375: LD_EXP 83
53379: PUSH
53380: LD_EXP 84
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: ST_TO_ADDR
// tmp :=  ;
53441: LD_ADDR_VAR 0 3
53445: PUSH
53446: LD_STRING 
53448: ST_TO_ADDR
// for i = 1 to normalCounter do
53449: LD_ADDR_VAR 0 8
53453: PUSH
53454: DOUBLE
53455: LD_INT 1
53457: DEC
53458: ST_TO_ADDR
53459: LD_EXP 29
53463: PUSH
53464: FOR_TO
53465: IFFALSE 53501
// begin if flags [ i ] then
53467: LD_VAR 0 4
53471: PUSH
53472: LD_VAR 0 8
53476: ARRAY
53477: IFFALSE 53499
// tmp := tmp & i & ; ;
53479: LD_ADDR_VAR 0 3
53483: PUSH
53484: LD_VAR 0 3
53488: PUSH
53489: LD_VAR 0 8
53493: STR
53494: PUSH
53495: LD_STRING ;
53497: STR
53498: ST_TO_ADDR
// end ;
53499: GO 53464
53501: POP
53502: POP
// for i = 1 to hardcoreCounter do
53503: LD_ADDR_VAR 0 8
53507: PUSH
53508: DOUBLE
53509: LD_INT 1
53511: DEC
53512: ST_TO_ADDR
53513: LD_EXP 30
53517: PUSH
53518: FOR_TO
53519: IFFALSE 53565
// begin if flags [ normalCounter + i ] then
53521: LD_VAR 0 4
53525: PUSH
53526: LD_EXP 29
53530: PUSH
53531: LD_VAR 0 8
53535: PLUS
53536: ARRAY
53537: IFFALSE 53563
// tmp := tmp & ( 100 + i ) & ; ;
53539: LD_ADDR_VAR 0 3
53543: PUSH
53544: LD_VAR 0 3
53548: PUSH
53549: LD_INT 100
53551: PUSH
53552: LD_VAR 0 8
53556: PLUS
53557: STR
53558: PUSH
53559: LD_STRING ;
53561: STR
53562: ST_TO_ADDR
// end ;
53563: GO 53518
53565: POP
53566: POP
// if tmp then
53567: LD_VAR 0 3
53571: IFFALSE 53583
// active := tmp ;
53573: LD_ADDR_VAR 0 7
53577: PUSH
53578: LD_VAR 0 3
53582: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53583: LD_STRING getStreamItemsFromMission("
53585: PUSH
53586: LD_VAR 0 5
53590: STR
53591: PUSH
53592: LD_STRING ","
53594: STR
53595: PUSH
53596: LD_VAR 0 6
53600: STR
53601: PUSH
53602: LD_STRING ","
53604: STR
53605: PUSH
53606: LD_VAR 0 7
53610: STR
53611: PUSH
53612: LD_STRING ")
53614: STR
53615: PPUSH
53616: CALL_OW 559
// end else
53620: GO 53629
// ToLua ( getStreamItemsFromMission("","","") ) ;
53622: LD_STRING getStreamItemsFromMission("","","")
53624: PPUSH
53625: CALL_OW 559
// end ;
53629: LD_VAR 0 2
53633: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53634: LD_EXP 28
53638: PUSH
53639: LD_EXP 33
53643: AND
53644: IFFALSE 53768
53646: GO 53648
53648: DISABLE
53649: LD_INT 0
53651: PPUSH
53652: PPUSH
// begin enable ;
53653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53654: LD_ADDR_VAR 0 2
53658: PUSH
53659: LD_INT 22
53661: PUSH
53662: LD_OWVAR 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: LD_INT 34
53676: PUSH
53677: LD_INT 7
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 34
53686: PUSH
53687: LD_INT 45
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 34
53696: PUSH
53697: LD_INT 28
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 34
53706: PUSH
53707: LD_INT 47
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PPUSH
53725: CALL_OW 69
53729: ST_TO_ADDR
// if not tmp then
53730: LD_VAR 0 2
53734: NOT
53735: IFFALSE 53739
// exit ;
53737: GO 53768
// for i in tmp do
53739: LD_ADDR_VAR 0 1
53743: PUSH
53744: LD_VAR 0 2
53748: PUSH
53749: FOR_IN
53750: IFFALSE 53766
// begin SetLives ( i , 0 ) ;
53752: LD_VAR 0 1
53756: PPUSH
53757: LD_INT 0
53759: PPUSH
53760: CALL_OW 234
// end ;
53764: GO 53749
53766: POP
53767: POP
// end ;
53768: PPOPN 2
53770: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53771: LD_EXP 28
53775: PUSH
53776: LD_EXP 34
53780: AND
53781: IFFALSE 53865
53783: GO 53785
53785: DISABLE
53786: LD_INT 0
53788: PPUSH
53789: PPUSH
// begin enable ;
53790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53791: LD_ADDR_VAR 0 2
53795: PUSH
53796: LD_INT 22
53798: PUSH
53799: LD_OWVAR 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 32
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PPUSH
53822: CALL_OW 69
53826: ST_TO_ADDR
// if not tmp then
53827: LD_VAR 0 2
53831: NOT
53832: IFFALSE 53836
// exit ;
53834: GO 53865
// for i in tmp do
53836: LD_ADDR_VAR 0 1
53840: PUSH
53841: LD_VAR 0 2
53845: PUSH
53846: FOR_IN
53847: IFFALSE 53863
// begin SetLives ( i , 0 ) ;
53849: LD_VAR 0 1
53853: PPUSH
53854: LD_INT 0
53856: PPUSH
53857: CALL_OW 234
// end ;
53861: GO 53846
53863: POP
53864: POP
// end ;
53865: PPOPN 2
53867: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53868: LD_EXP 28
53872: PUSH
53873: LD_EXP 31
53877: AND
53878: IFFALSE 53971
53880: GO 53882
53882: DISABLE
53883: LD_INT 0
53885: PPUSH
// begin enable ;
53886: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53887: LD_ADDR_VAR 0 1
53891: PUSH
53892: LD_INT 22
53894: PUSH
53895: LD_OWVAR 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 25
53909: PUSH
53910: LD_INT 5
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 25
53919: PUSH
53920: LD_INT 9
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 25
53929: PUSH
53930: LD_INT 8
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PPUSH
53947: CALL_OW 69
53951: PUSH
53952: FOR_IN
53953: IFFALSE 53969
// begin SetClass ( i , 1 ) ;
53955: LD_VAR 0 1
53959: PPUSH
53960: LD_INT 1
53962: PPUSH
53963: CALL_OW 336
// end ;
53967: GO 53952
53969: POP
53970: POP
// end ;
53971: PPOPN 1
53973: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53974: LD_EXP 28
53978: PUSH
53979: LD_EXP 32
53983: AND
53984: PUSH
53985: LD_OWVAR 65
53989: PUSH
53990: LD_INT 7
53992: LESS
53993: AND
53994: IFFALSE 54008
53996: GO 53998
53998: DISABLE
// begin enable ;
53999: ENABLE
// game_speed := 7 ;
54000: LD_ADDR_OWVAR 65
54004: PUSH
54005: LD_INT 7
54007: ST_TO_ADDR
// end ;
54008: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54009: LD_EXP 28
54013: PUSH
54014: LD_EXP 35
54018: AND
54019: IFFALSE 54221
54021: GO 54023
54023: DISABLE
54024: LD_INT 0
54026: PPUSH
54027: PPUSH
54028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54029: LD_ADDR_VAR 0 3
54033: PUSH
54034: LD_INT 81
54036: PUSH
54037: LD_OWVAR 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 21
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PPUSH
54060: CALL_OW 69
54064: ST_TO_ADDR
// if not tmp then
54065: LD_VAR 0 3
54069: NOT
54070: IFFALSE 54074
// exit ;
54072: GO 54221
// if tmp > 5 then
54074: LD_VAR 0 3
54078: PUSH
54079: LD_INT 5
54081: GREATER
54082: IFFALSE 54094
// k := 5 else
54084: LD_ADDR_VAR 0 2
54088: PUSH
54089: LD_INT 5
54091: ST_TO_ADDR
54092: GO 54104
// k := tmp ;
54094: LD_ADDR_VAR 0 2
54098: PUSH
54099: LD_VAR 0 3
54103: ST_TO_ADDR
// for i := 1 to k do
54104: LD_ADDR_VAR 0 1
54108: PUSH
54109: DOUBLE
54110: LD_INT 1
54112: DEC
54113: ST_TO_ADDR
54114: LD_VAR 0 2
54118: PUSH
54119: FOR_TO
54120: IFFALSE 54219
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54122: LD_VAR 0 3
54126: PUSH
54127: LD_VAR 0 1
54131: ARRAY
54132: PPUSH
54133: LD_VAR 0 1
54137: PUSH
54138: LD_INT 4
54140: MOD
54141: PUSH
54142: LD_INT 1
54144: PLUS
54145: PPUSH
54146: CALL_OW 259
54150: PUSH
54151: LD_INT 10
54153: LESS
54154: IFFALSE 54217
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54156: LD_VAR 0 3
54160: PUSH
54161: LD_VAR 0 1
54165: ARRAY
54166: PPUSH
54167: LD_VAR 0 1
54171: PUSH
54172: LD_INT 4
54174: MOD
54175: PUSH
54176: LD_INT 1
54178: PLUS
54179: PPUSH
54180: LD_VAR 0 3
54184: PUSH
54185: LD_VAR 0 1
54189: ARRAY
54190: PPUSH
54191: LD_VAR 0 1
54195: PUSH
54196: LD_INT 4
54198: MOD
54199: PUSH
54200: LD_INT 1
54202: PLUS
54203: PPUSH
54204: CALL_OW 259
54208: PUSH
54209: LD_INT 1
54211: PLUS
54212: PPUSH
54213: CALL_OW 237
54217: GO 54119
54219: POP
54220: POP
// end ;
54221: PPOPN 3
54223: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54224: LD_EXP 28
54228: PUSH
54229: LD_EXP 36
54233: AND
54234: IFFALSE 54254
54236: GO 54238
54238: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54239: LD_INT 4
54241: PPUSH
54242: LD_OWVAR 2
54246: PPUSH
54247: LD_INT 0
54249: PPUSH
54250: CALL_OW 324
54254: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54255: LD_EXP 28
54259: PUSH
54260: LD_EXP 65
54264: AND
54265: IFFALSE 54285
54267: GO 54269
54269: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54270: LD_INT 19
54272: PPUSH
54273: LD_OWVAR 2
54277: PPUSH
54278: LD_INT 0
54280: PPUSH
54281: CALL_OW 324
54285: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54286: LD_EXP 28
54290: PUSH
54291: LD_EXP 37
54295: AND
54296: IFFALSE 54398
54298: GO 54300
54300: DISABLE
54301: LD_INT 0
54303: PPUSH
54304: PPUSH
// begin enable ;
54305: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54306: LD_ADDR_VAR 0 2
54310: PUSH
54311: LD_INT 22
54313: PUSH
54314: LD_OWVAR 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 34
54328: PUSH
54329: LD_INT 11
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 34
54338: PUSH
54339: LD_INT 30
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PPUSH
54355: CALL_OW 69
54359: ST_TO_ADDR
// if not tmp then
54360: LD_VAR 0 2
54364: NOT
54365: IFFALSE 54369
// exit ;
54367: GO 54398
// for i in tmp do
54369: LD_ADDR_VAR 0 1
54373: PUSH
54374: LD_VAR 0 2
54378: PUSH
54379: FOR_IN
54380: IFFALSE 54396
// begin SetLives ( i , 0 ) ;
54382: LD_VAR 0 1
54386: PPUSH
54387: LD_INT 0
54389: PPUSH
54390: CALL_OW 234
// end ;
54394: GO 54379
54396: POP
54397: POP
// end ;
54398: PPOPN 2
54400: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54401: LD_EXP 28
54405: PUSH
54406: LD_EXP 38
54410: AND
54411: IFFALSE 54431
54413: GO 54415
54415: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54416: LD_INT 32
54418: PPUSH
54419: LD_OWVAR 2
54423: PPUSH
54424: LD_INT 0
54426: PPUSH
54427: CALL_OW 324
54431: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54432: LD_EXP 28
54436: PUSH
54437: LD_EXP 39
54441: AND
54442: IFFALSE 54623
54444: GO 54446
54446: DISABLE
54447: LD_INT 0
54449: PPUSH
54450: PPUSH
54451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54452: LD_ADDR_VAR 0 2
54456: PUSH
54457: LD_INT 22
54459: PUSH
54460: LD_OWVAR 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 33
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PPUSH
54483: CALL_OW 69
54487: ST_TO_ADDR
// if not tmp then
54488: LD_VAR 0 2
54492: NOT
54493: IFFALSE 54497
// exit ;
54495: GO 54623
// side := 0 ;
54497: LD_ADDR_VAR 0 3
54501: PUSH
54502: LD_INT 0
54504: ST_TO_ADDR
// for i := 1 to 8 do
54505: LD_ADDR_VAR 0 1
54509: PUSH
54510: DOUBLE
54511: LD_INT 1
54513: DEC
54514: ST_TO_ADDR
54515: LD_INT 8
54517: PUSH
54518: FOR_TO
54519: IFFALSE 54567
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54521: LD_OWVAR 2
54525: PUSH
54526: LD_VAR 0 1
54530: NONEQUAL
54531: PUSH
54532: LD_OWVAR 2
54536: PPUSH
54537: LD_VAR 0 1
54541: PPUSH
54542: CALL_OW 81
54546: PUSH
54547: LD_INT 2
54549: EQUAL
54550: AND
54551: IFFALSE 54565
// begin side := i ;
54553: LD_ADDR_VAR 0 3
54557: PUSH
54558: LD_VAR 0 1
54562: ST_TO_ADDR
// break ;
54563: GO 54567
// end ;
54565: GO 54518
54567: POP
54568: POP
// if not side then
54569: LD_VAR 0 3
54573: NOT
54574: IFFALSE 54578
// exit ;
54576: GO 54623
// for i := 1 to tmp do
54578: LD_ADDR_VAR 0 1
54582: PUSH
54583: DOUBLE
54584: LD_INT 1
54586: DEC
54587: ST_TO_ADDR
54588: LD_VAR 0 2
54592: PUSH
54593: FOR_TO
54594: IFFALSE 54621
// if Prob ( 60 ) then
54596: LD_INT 60
54598: PPUSH
54599: CALL_OW 13
54603: IFFALSE 54619
// SetSide ( i , side ) ;
54605: LD_VAR 0 1
54609: PPUSH
54610: LD_VAR 0 3
54614: PPUSH
54615: CALL_OW 235
54619: GO 54593
54621: POP
54622: POP
// end ;
54623: PPOPN 3
54625: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54626: LD_EXP 28
54630: PUSH
54631: LD_EXP 41
54635: AND
54636: IFFALSE 54755
54638: GO 54640
54640: DISABLE
54641: LD_INT 0
54643: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54644: LD_ADDR_VAR 0 1
54648: PUSH
54649: LD_INT 22
54651: PUSH
54652: LD_OWVAR 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 21
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 23
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: PPUSH
54693: CALL_OW 69
54697: PUSH
54698: FOR_IN
54699: IFFALSE 54753
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54701: LD_VAR 0 1
54705: PPUSH
54706: CALL_OW 257
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: LD_INT 4
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: IN
54729: IFFALSE 54751
// SetClass ( un , rand ( 1 , 4 ) ) ;
54731: LD_VAR 0 1
54735: PPUSH
54736: LD_INT 1
54738: PPUSH
54739: LD_INT 4
54741: PPUSH
54742: CALL_OW 12
54746: PPUSH
54747: CALL_OW 336
54751: GO 54698
54753: POP
54754: POP
// end ;
54755: PPOPN 1
54757: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54758: LD_EXP 28
54762: PUSH
54763: LD_EXP 40
54767: AND
54768: IFFALSE 54847
54770: GO 54772
54772: DISABLE
54773: LD_INT 0
54775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54776: LD_ADDR_VAR 0 1
54780: PUSH
54781: LD_INT 22
54783: PUSH
54784: LD_OWVAR 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 21
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PPUSH
54807: CALL_OW 69
54811: ST_TO_ADDR
// if not tmp then
54812: LD_VAR 0 1
54816: NOT
54817: IFFALSE 54821
// exit ;
54819: GO 54847
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54821: LD_VAR 0 1
54825: PUSH
54826: LD_INT 1
54828: PPUSH
54829: LD_VAR 0 1
54833: PPUSH
54834: CALL_OW 12
54838: ARRAY
54839: PPUSH
54840: LD_INT 100
54842: PPUSH
54843: CALL_OW 234
// end ;
54847: PPOPN 1
54849: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54850: LD_EXP 28
54854: PUSH
54855: LD_EXP 42
54859: AND
54860: IFFALSE 54958
54862: GO 54864
54864: DISABLE
54865: LD_INT 0
54867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54868: LD_ADDR_VAR 0 1
54872: PUSH
54873: LD_INT 22
54875: PUSH
54876: LD_OWVAR 2
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 21
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PPUSH
54899: CALL_OW 69
54903: ST_TO_ADDR
// if not tmp then
54904: LD_VAR 0 1
54908: NOT
54909: IFFALSE 54913
// exit ;
54911: GO 54958
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54913: LD_VAR 0 1
54917: PUSH
54918: LD_INT 1
54920: PPUSH
54921: LD_VAR 0 1
54925: PPUSH
54926: CALL_OW 12
54930: ARRAY
54931: PPUSH
54932: LD_INT 1
54934: PPUSH
54935: LD_INT 4
54937: PPUSH
54938: CALL_OW 12
54942: PPUSH
54943: LD_INT 3000
54945: PPUSH
54946: LD_INT 9000
54948: PPUSH
54949: CALL_OW 12
54953: PPUSH
54954: CALL_OW 492
// end ;
54958: PPOPN 1
54960: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54961: LD_EXP 28
54965: PUSH
54966: LD_EXP 43
54970: AND
54971: IFFALSE 54991
54973: GO 54975
54975: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54976: LD_INT 1
54978: PPUSH
54979: LD_OWVAR 2
54983: PPUSH
54984: LD_INT 0
54986: PPUSH
54987: CALL_OW 324
54991: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54992: LD_EXP 28
54996: PUSH
54997: LD_EXP 44
55001: AND
55002: IFFALSE 55085
55004: GO 55006
55006: DISABLE
55007: LD_INT 0
55009: PPUSH
55010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55011: LD_ADDR_VAR 0 2
55015: PUSH
55016: LD_INT 22
55018: PUSH
55019: LD_OWVAR 2
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 21
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PPUSH
55042: CALL_OW 69
55046: ST_TO_ADDR
// if not tmp then
55047: LD_VAR 0 2
55051: NOT
55052: IFFALSE 55056
// exit ;
55054: GO 55085
// for i in tmp do
55056: LD_ADDR_VAR 0 1
55060: PUSH
55061: LD_VAR 0 2
55065: PUSH
55066: FOR_IN
55067: IFFALSE 55083
// SetBLevel ( i , 10 ) ;
55069: LD_VAR 0 1
55073: PPUSH
55074: LD_INT 10
55076: PPUSH
55077: CALL_OW 241
55081: GO 55066
55083: POP
55084: POP
// end ;
55085: PPOPN 2
55087: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55088: LD_EXP 28
55092: PUSH
55093: LD_EXP 45
55097: AND
55098: IFFALSE 55209
55100: GO 55102
55102: DISABLE
55103: LD_INT 0
55105: PPUSH
55106: PPUSH
55107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55108: LD_ADDR_VAR 0 3
55112: PUSH
55113: LD_INT 22
55115: PUSH
55116: LD_OWVAR 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 25
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PPUSH
55139: CALL_OW 69
55143: ST_TO_ADDR
// if not tmp then
55144: LD_VAR 0 3
55148: NOT
55149: IFFALSE 55153
// exit ;
55151: GO 55209
// un := tmp [ rand ( 1 , tmp ) ] ;
55153: LD_ADDR_VAR 0 2
55157: PUSH
55158: LD_VAR 0 3
55162: PUSH
55163: LD_INT 1
55165: PPUSH
55166: LD_VAR 0 3
55170: PPUSH
55171: CALL_OW 12
55175: ARRAY
55176: ST_TO_ADDR
// if Crawls ( un ) then
55177: LD_VAR 0 2
55181: PPUSH
55182: CALL_OW 318
55186: IFFALSE 55197
// ComWalk ( un ) ;
55188: LD_VAR 0 2
55192: PPUSH
55193: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55197: LD_VAR 0 2
55201: PPUSH
55202: LD_INT 5
55204: PPUSH
55205: CALL_OW 336
// end ;
55209: PPOPN 3
55211: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55212: LD_EXP 28
55216: PUSH
55217: LD_EXP 46
55221: AND
55222: PUSH
55223: LD_OWVAR 67
55227: PUSH
55228: LD_INT 4
55230: LESS
55231: AND
55232: IFFALSE 55251
55234: GO 55236
55236: DISABLE
// begin Difficulty := Difficulty + 1 ;
55237: LD_ADDR_OWVAR 67
55241: PUSH
55242: LD_OWVAR 67
55246: PUSH
55247: LD_INT 1
55249: PLUS
55250: ST_TO_ADDR
// end ;
55251: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55252: LD_EXP 28
55256: PUSH
55257: LD_EXP 47
55261: AND
55262: IFFALSE 55365
55264: GO 55266
55266: DISABLE
55267: LD_INT 0
55269: PPUSH
// begin for i := 1 to 5 do
55270: LD_ADDR_VAR 0 1
55274: PUSH
55275: DOUBLE
55276: LD_INT 1
55278: DEC
55279: ST_TO_ADDR
55280: LD_INT 5
55282: PUSH
55283: FOR_TO
55284: IFFALSE 55363
// begin uc_nation := nation_nature ;
55286: LD_ADDR_OWVAR 21
55290: PUSH
55291: LD_INT 0
55293: ST_TO_ADDR
// uc_side := 0 ;
55294: LD_ADDR_OWVAR 20
55298: PUSH
55299: LD_INT 0
55301: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55302: LD_ADDR_OWVAR 29
55306: PUSH
55307: LD_INT 12
55309: PUSH
55310: LD_INT 12
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// hc_agressivity := 20 ;
55317: LD_ADDR_OWVAR 35
55321: PUSH
55322: LD_INT 20
55324: ST_TO_ADDR
// hc_class := class_tiger ;
55325: LD_ADDR_OWVAR 28
55329: PUSH
55330: LD_INT 14
55332: ST_TO_ADDR
// hc_gallery :=  ;
55333: LD_ADDR_OWVAR 33
55337: PUSH
55338: LD_STRING 
55340: ST_TO_ADDR
// hc_name :=  ;
55341: LD_ADDR_OWVAR 26
55345: PUSH
55346: LD_STRING 
55348: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55349: CALL_OW 44
55353: PPUSH
55354: LD_INT 0
55356: PPUSH
55357: CALL_OW 51
// end ;
55361: GO 55283
55363: POP
55364: POP
// end ;
55365: PPOPN 1
55367: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55368: LD_EXP 28
55372: PUSH
55373: LD_EXP 48
55377: AND
55378: IFFALSE 55387
55380: GO 55382
55382: DISABLE
// StreamSibBomb ;
55383: CALL 55388 0 0
55387: END
// export function StreamSibBomb ; var i , x , y ; begin
55388: LD_INT 0
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
// result := false ;
55394: LD_ADDR_VAR 0 1
55398: PUSH
55399: LD_INT 0
55401: ST_TO_ADDR
// for i := 1 to 16 do
55402: LD_ADDR_VAR 0 2
55406: PUSH
55407: DOUBLE
55408: LD_INT 1
55410: DEC
55411: ST_TO_ADDR
55412: LD_INT 16
55414: PUSH
55415: FOR_TO
55416: IFFALSE 55615
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55418: LD_ADDR_VAR 0 3
55422: PUSH
55423: LD_INT 10
55425: PUSH
55426: LD_INT 20
55428: PUSH
55429: LD_INT 30
55431: PUSH
55432: LD_INT 40
55434: PUSH
55435: LD_INT 50
55437: PUSH
55438: LD_INT 60
55440: PUSH
55441: LD_INT 70
55443: PUSH
55444: LD_INT 80
55446: PUSH
55447: LD_INT 90
55449: PUSH
55450: LD_INT 100
55452: PUSH
55453: LD_INT 110
55455: PUSH
55456: LD_INT 120
55458: PUSH
55459: LD_INT 130
55461: PUSH
55462: LD_INT 140
55464: PUSH
55465: LD_INT 150
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PPUSH
55488: LD_INT 15
55490: PPUSH
55491: CALL_OW 12
55495: ARRAY
55496: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55497: LD_ADDR_VAR 0 4
55501: PUSH
55502: LD_INT 10
55504: PUSH
55505: LD_INT 20
55507: PUSH
55508: LD_INT 30
55510: PUSH
55511: LD_INT 40
55513: PUSH
55514: LD_INT 50
55516: PUSH
55517: LD_INT 60
55519: PUSH
55520: LD_INT 70
55522: PUSH
55523: LD_INT 80
55525: PUSH
55526: LD_INT 90
55528: PUSH
55529: LD_INT 100
55531: PUSH
55532: LD_INT 110
55534: PUSH
55535: LD_INT 120
55537: PUSH
55538: LD_INT 130
55540: PUSH
55541: LD_INT 140
55543: PUSH
55544: LD_INT 150
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PPUSH
55567: LD_INT 15
55569: PPUSH
55570: CALL_OW 12
55574: ARRAY
55575: ST_TO_ADDR
// if ValidHex ( x , y ) then
55576: LD_VAR 0 3
55580: PPUSH
55581: LD_VAR 0 4
55585: PPUSH
55586: CALL_OW 488
55590: IFFALSE 55613
// begin result := [ x , y ] ;
55592: LD_ADDR_VAR 0 1
55596: PUSH
55597: LD_VAR 0 3
55601: PUSH
55602: LD_VAR 0 4
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: ST_TO_ADDR
// break ;
55611: GO 55615
// end ; end ;
55613: GO 55415
55615: POP
55616: POP
// if result then
55617: LD_VAR 0 1
55621: IFFALSE 55681
// begin ToLua ( playSibBomb() ) ;
55623: LD_STRING playSibBomb()
55625: PPUSH
55626: CALL_OW 559
// wait ( 0 0$14 ) ;
55630: LD_INT 490
55632: PPUSH
55633: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55637: LD_VAR 0 1
55641: PUSH
55642: LD_INT 1
55644: ARRAY
55645: PPUSH
55646: LD_VAR 0 1
55650: PUSH
55651: LD_INT 2
55653: ARRAY
55654: PPUSH
55655: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55659: LD_VAR 0 1
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PPUSH
55668: LD_VAR 0 1
55672: PUSH
55673: LD_INT 2
55675: ARRAY
55676: PPUSH
55677: CALL_OW 429
// end ; end ;
55681: LD_VAR 0 1
55685: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55686: LD_EXP 28
55690: PUSH
55691: LD_EXP 50
55695: AND
55696: IFFALSE 55708
55698: GO 55700
55700: DISABLE
// YouLost (  ) ;
55701: LD_STRING 
55703: PPUSH
55704: CALL_OW 104
55708: END
// every 0 0$1 trigger StreamModeActive and sFog do
55709: LD_EXP 28
55713: PUSH
55714: LD_EXP 49
55718: AND
55719: IFFALSE 55733
55721: GO 55723
55723: DISABLE
// FogOff ( your_side ) ;
55724: LD_OWVAR 2
55728: PPUSH
55729: CALL_OW 344
55733: END
// every 0 0$1 trigger StreamModeActive and sSun do
55734: LD_EXP 28
55738: PUSH
55739: LD_EXP 51
55743: AND
55744: IFFALSE 55772
55746: GO 55748
55748: DISABLE
// begin solar_recharge_percent := 0 ;
55749: LD_ADDR_OWVAR 79
55753: PUSH
55754: LD_INT 0
55756: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55757: LD_INT 10500
55759: PPUSH
55760: CALL_OW 67
// solar_recharge_percent := 100 ;
55764: LD_ADDR_OWVAR 79
55768: PUSH
55769: LD_INT 100
55771: ST_TO_ADDR
// end ;
55772: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55773: LD_EXP 28
55777: PUSH
55778: LD_EXP 52
55782: AND
55783: IFFALSE 56022
55785: GO 55787
55787: DISABLE
55788: LD_INT 0
55790: PPUSH
55791: PPUSH
55792: PPUSH
// begin tmp := [ ] ;
55793: LD_ADDR_VAR 0 3
55797: PUSH
55798: EMPTY
55799: ST_TO_ADDR
// for i := 1 to 6 do
55800: LD_ADDR_VAR 0 1
55804: PUSH
55805: DOUBLE
55806: LD_INT 1
55808: DEC
55809: ST_TO_ADDR
55810: LD_INT 6
55812: PUSH
55813: FOR_TO
55814: IFFALSE 55919
// begin uc_nation := nation_nature ;
55816: LD_ADDR_OWVAR 21
55820: PUSH
55821: LD_INT 0
55823: ST_TO_ADDR
// uc_side := 0 ;
55824: LD_ADDR_OWVAR 20
55828: PUSH
55829: LD_INT 0
55831: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55832: LD_ADDR_OWVAR 29
55836: PUSH
55837: LD_INT 12
55839: PUSH
55840: LD_INT 12
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// hc_agressivity := 20 ;
55847: LD_ADDR_OWVAR 35
55851: PUSH
55852: LD_INT 20
55854: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55855: LD_ADDR_OWVAR 28
55859: PUSH
55860: LD_INT 17
55862: ST_TO_ADDR
// hc_gallery :=  ;
55863: LD_ADDR_OWVAR 33
55867: PUSH
55868: LD_STRING 
55870: ST_TO_ADDR
// hc_name :=  ;
55871: LD_ADDR_OWVAR 26
55875: PUSH
55876: LD_STRING 
55878: ST_TO_ADDR
// un := CreateHuman ;
55879: LD_ADDR_VAR 0 2
55883: PUSH
55884: CALL_OW 44
55888: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55889: LD_VAR 0 2
55893: PPUSH
55894: LD_INT 1
55896: PPUSH
55897: CALL_OW 51
// tmp := tmp ^ un ;
55901: LD_ADDR_VAR 0 3
55905: PUSH
55906: LD_VAR 0 3
55910: PUSH
55911: LD_VAR 0 2
55915: ADD
55916: ST_TO_ADDR
// end ;
55917: GO 55813
55919: POP
55920: POP
// repeat wait ( 0 0$1 ) ;
55921: LD_INT 35
55923: PPUSH
55924: CALL_OW 67
// for un in tmp do
55928: LD_ADDR_VAR 0 2
55932: PUSH
55933: LD_VAR 0 3
55937: PUSH
55938: FOR_IN
55939: IFFALSE 56013
// begin if IsDead ( un ) then
55941: LD_VAR 0 2
55945: PPUSH
55946: CALL_OW 301
55950: IFFALSE 55970
// begin tmp := tmp diff un ;
55952: LD_ADDR_VAR 0 3
55956: PUSH
55957: LD_VAR 0 3
55961: PUSH
55962: LD_VAR 0 2
55966: DIFF
55967: ST_TO_ADDR
// continue ;
55968: GO 55938
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55970: LD_VAR 0 2
55974: PPUSH
55975: LD_INT 3
55977: PUSH
55978: LD_INT 22
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PPUSH
55992: CALL_OW 69
55996: PPUSH
55997: LD_VAR 0 2
56001: PPUSH
56002: CALL_OW 74
56006: PPUSH
56007: CALL_OW 115
// end ;
56011: GO 55938
56013: POP
56014: POP
// until not tmp ;
56015: LD_VAR 0 3
56019: NOT
56020: IFFALSE 55921
// end ;
56022: PPOPN 3
56024: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56025: LD_EXP 28
56029: PUSH
56030: LD_EXP 53
56034: AND
56035: IFFALSE 56089
56037: GO 56039
56039: DISABLE
// begin ToLua ( displayTroll(); ) ;
56040: LD_STRING displayTroll();
56042: PPUSH
56043: CALL_OW 559
// wait ( 3 3$00 ) ;
56047: LD_INT 6300
56049: PPUSH
56050: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56054: LD_STRING hideTroll();
56056: PPUSH
56057: CALL_OW 559
// wait ( 1 1$00 ) ;
56061: LD_INT 2100
56063: PPUSH
56064: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56068: LD_STRING displayTroll();
56070: PPUSH
56071: CALL_OW 559
// wait ( 1 1$00 ) ;
56075: LD_INT 2100
56077: PPUSH
56078: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56082: LD_STRING hideTroll();
56084: PPUSH
56085: CALL_OW 559
// end ;
56089: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56090: LD_EXP 28
56094: PUSH
56095: LD_EXP 54
56099: AND
56100: IFFALSE 56163
56102: GO 56104
56104: DISABLE
56105: LD_INT 0
56107: PPUSH
// begin p := 0 ;
56108: LD_ADDR_VAR 0 1
56112: PUSH
56113: LD_INT 0
56115: ST_TO_ADDR
// repeat game_speed := 1 ;
56116: LD_ADDR_OWVAR 65
56120: PUSH
56121: LD_INT 1
56123: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56124: LD_INT 35
56126: PPUSH
56127: CALL_OW 67
// p := p + 1 ;
56131: LD_ADDR_VAR 0 1
56135: PUSH
56136: LD_VAR 0 1
56140: PUSH
56141: LD_INT 1
56143: PLUS
56144: ST_TO_ADDR
// until p >= 60 ;
56145: LD_VAR 0 1
56149: PUSH
56150: LD_INT 60
56152: GREATEREQUAL
56153: IFFALSE 56116
// game_speed := 4 ;
56155: LD_ADDR_OWVAR 65
56159: PUSH
56160: LD_INT 4
56162: ST_TO_ADDR
// end ;
56163: PPOPN 1
56165: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56166: LD_EXP 28
56170: PUSH
56171: LD_EXP 55
56175: AND
56176: IFFALSE 56322
56178: GO 56180
56180: DISABLE
56181: LD_INT 0
56183: PPUSH
56184: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56185: LD_ADDR_VAR 0 1
56189: PUSH
56190: LD_INT 22
56192: PUSH
56193: LD_OWVAR 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 30
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 30
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PPUSH
56234: CALL_OW 69
56238: ST_TO_ADDR
// if not depot then
56239: LD_VAR 0 1
56243: NOT
56244: IFFALSE 56248
// exit ;
56246: GO 56322
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56248: LD_ADDR_VAR 0 2
56252: PUSH
56253: LD_VAR 0 1
56257: PUSH
56258: LD_INT 1
56260: PPUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: CALL_OW 12
56270: ARRAY
56271: PPUSH
56272: CALL_OW 274
56276: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56277: LD_VAR 0 2
56281: PPUSH
56282: LD_INT 1
56284: PPUSH
56285: LD_INT 0
56287: PPUSH
56288: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56292: LD_VAR 0 2
56296: PPUSH
56297: LD_INT 2
56299: PPUSH
56300: LD_INT 0
56302: PPUSH
56303: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56307: LD_VAR 0 2
56311: PPUSH
56312: LD_INT 3
56314: PPUSH
56315: LD_INT 0
56317: PPUSH
56318: CALL_OW 277
// end ;
56322: PPOPN 2
56324: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56325: LD_EXP 28
56329: PUSH
56330: LD_EXP 56
56334: AND
56335: IFFALSE 56432
56337: GO 56339
56339: DISABLE
56340: LD_INT 0
56342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56343: LD_ADDR_VAR 0 1
56347: PUSH
56348: LD_INT 22
56350: PUSH
56351: LD_OWVAR 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 21
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 23
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: PPUSH
56392: CALL_OW 69
56396: ST_TO_ADDR
// if not tmp then
56397: LD_VAR 0 1
56401: NOT
56402: IFFALSE 56406
// exit ;
56404: GO 56432
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56406: LD_VAR 0 1
56410: PUSH
56411: LD_INT 1
56413: PPUSH
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 12
56423: ARRAY
56424: PPUSH
56425: LD_INT 200
56427: PPUSH
56428: CALL_OW 234
// end ;
56432: PPOPN 1
56434: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56435: LD_EXP 28
56439: PUSH
56440: LD_EXP 57
56444: AND
56445: IFFALSE 56524
56447: GO 56449
56449: DISABLE
56450: LD_INT 0
56452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56453: LD_ADDR_VAR 0 1
56457: PUSH
56458: LD_INT 22
56460: PUSH
56461: LD_OWVAR 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 21
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PPUSH
56484: CALL_OW 69
56488: ST_TO_ADDR
// if not tmp then
56489: LD_VAR 0 1
56493: NOT
56494: IFFALSE 56498
// exit ;
56496: GO 56524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56498: LD_VAR 0 1
56502: PUSH
56503: LD_INT 1
56505: PPUSH
56506: LD_VAR 0 1
56510: PPUSH
56511: CALL_OW 12
56515: ARRAY
56516: PPUSH
56517: LD_INT 60
56519: PPUSH
56520: CALL_OW 234
// end ;
56524: PPOPN 1
56526: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56527: LD_EXP 28
56531: PUSH
56532: LD_EXP 58
56536: AND
56537: IFFALSE 56636
56539: GO 56541
56541: DISABLE
56542: LD_INT 0
56544: PPUSH
56545: PPUSH
// begin enable ;
56546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56547: LD_ADDR_VAR 0 1
56551: PUSH
56552: LD_INT 22
56554: PUSH
56555: LD_OWVAR 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 61
56566: PUSH
56567: EMPTY
56568: LIST
56569: PUSH
56570: LD_INT 33
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: PPUSH
56585: CALL_OW 69
56589: ST_TO_ADDR
// if not tmp then
56590: LD_VAR 0 1
56594: NOT
56595: IFFALSE 56599
// exit ;
56597: GO 56636
// for i in tmp do
56599: LD_ADDR_VAR 0 2
56603: PUSH
56604: LD_VAR 0 1
56608: PUSH
56609: FOR_IN
56610: IFFALSE 56634
// if IsControledBy ( i ) then
56612: LD_VAR 0 2
56616: PPUSH
56617: CALL_OW 312
56621: IFFALSE 56632
// ComUnlink ( i ) ;
56623: LD_VAR 0 2
56627: PPUSH
56628: CALL_OW 136
56632: GO 56609
56634: POP
56635: POP
// end ;
56636: PPOPN 2
56638: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56639: LD_EXP 28
56643: PUSH
56644: LD_EXP 59
56648: AND
56649: IFFALSE 56789
56651: GO 56653
56653: DISABLE
56654: LD_INT 0
56656: PPUSH
56657: PPUSH
// begin ToLua ( displayPowell(); ) ;
56658: LD_STRING displayPowell();
56660: PPUSH
56661: CALL_OW 559
// uc_side := 0 ;
56665: LD_ADDR_OWVAR 20
56669: PUSH
56670: LD_INT 0
56672: ST_TO_ADDR
// uc_nation := 2 ;
56673: LD_ADDR_OWVAR 21
56677: PUSH
56678: LD_INT 2
56680: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56681: LD_ADDR_OWVAR 37
56685: PUSH
56686: LD_INT 14
56688: ST_TO_ADDR
// vc_engine := engine_siberite ;
56689: LD_ADDR_OWVAR 39
56693: PUSH
56694: LD_INT 3
56696: ST_TO_ADDR
// vc_control := control_apeman ;
56697: LD_ADDR_OWVAR 38
56701: PUSH
56702: LD_INT 5
56704: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56705: LD_ADDR_OWVAR 40
56709: PUSH
56710: LD_INT 29
56712: ST_TO_ADDR
// un := CreateVehicle ;
56713: LD_ADDR_VAR 0 2
56717: PUSH
56718: CALL_OW 45
56722: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56723: LD_VAR 0 2
56727: PPUSH
56728: LD_INT 1
56730: PPUSH
56731: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56735: LD_INT 35
56737: PPUSH
56738: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56742: LD_VAR 0 2
56746: PPUSH
56747: LD_INT 22
56749: PUSH
56750: LD_OWVAR 2
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PPUSH
56759: CALL_OW 69
56763: PPUSH
56764: LD_VAR 0 2
56768: PPUSH
56769: CALL_OW 74
56773: PPUSH
56774: CALL_OW 115
// until IsDead ( un ) ;
56778: LD_VAR 0 2
56782: PPUSH
56783: CALL_OW 301
56787: IFFALSE 56735
// end ;
56789: PPOPN 2
56791: END
// every 0 0$1 trigger StreamModeActive and sStu do
56792: LD_EXP 28
56796: PUSH
56797: LD_EXP 67
56801: AND
56802: IFFALSE 56818
56804: GO 56806
56806: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56807: LD_STRING displayStucuk();
56809: PPUSH
56810: CALL_OW 559
// ResetFog ;
56814: CALL_OW 335
// end ;
56818: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56819: LD_EXP 28
56823: PUSH
56824: LD_EXP 60
56828: AND
56829: IFFALSE 56970
56831: GO 56833
56833: DISABLE
56834: LD_INT 0
56836: PPUSH
56837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56838: LD_ADDR_VAR 0 2
56842: PUSH
56843: LD_INT 22
56845: PUSH
56846: LD_OWVAR 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 21
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PPUSH
56869: CALL_OW 69
56873: ST_TO_ADDR
// if not tmp then
56874: LD_VAR 0 2
56878: NOT
56879: IFFALSE 56883
// exit ;
56881: GO 56970
// un := tmp [ rand ( 1 , tmp ) ] ;
56883: LD_ADDR_VAR 0 1
56887: PUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_INT 1
56895: PPUSH
56896: LD_VAR 0 2
56900: PPUSH
56901: CALL_OW 12
56905: ARRAY
56906: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56907: LD_VAR 0 1
56911: PPUSH
56912: LD_INT 0
56914: PPUSH
56915: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56919: LD_VAR 0 1
56923: PPUSH
56924: LD_OWVAR 3
56928: PUSH
56929: LD_VAR 0 1
56933: DIFF
56934: PPUSH
56935: LD_VAR 0 1
56939: PPUSH
56940: CALL_OW 74
56944: PPUSH
56945: CALL_OW 115
// wait ( 0 0$20 ) ;
56949: LD_INT 700
56951: PPUSH
56952: CALL_OW 67
// SetSide ( un , your_side ) ;
56956: LD_VAR 0 1
56960: PPUSH
56961: LD_OWVAR 2
56965: PPUSH
56966: CALL_OW 235
// end ;
56970: PPOPN 2
56972: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56973: LD_EXP 28
56977: PUSH
56978: LD_EXP 61
56982: AND
56983: IFFALSE 57089
56985: GO 56987
56987: DISABLE
56988: LD_INT 0
56990: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56991: LD_ADDR_VAR 0 1
56995: PUSH
56996: LD_INT 22
56998: PUSH
56999: LD_OWVAR 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 30
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 30
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PPUSH
57040: CALL_OW 69
57044: ST_TO_ADDR
// if not depot then
57045: LD_VAR 0 1
57049: NOT
57050: IFFALSE 57054
// exit ;
57052: GO 57089
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57054: LD_VAR 0 1
57058: PUSH
57059: LD_INT 1
57061: ARRAY
57062: PPUSH
57063: CALL_OW 250
57067: PPUSH
57068: LD_VAR 0 1
57072: PUSH
57073: LD_INT 1
57075: ARRAY
57076: PPUSH
57077: CALL_OW 251
57081: PPUSH
57082: LD_INT 70
57084: PPUSH
57085: CALL_OW 495
// end ;
57089: PPOPN 1
57091: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57092: LD_EXP 28
57096: PUSH
57097: LD_EXP 62
57101: AND
57102: IFFALSE 57313
57104: GO 57106
57106: DISABLE
57107: LD_INT 0
57109: PPUSH
57110: PPUSH
57111: PPUSH
57112: PPUSH
57113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57114: LD_ADDR_VAR 0 5
57118: PUSH
57119: LD_INT 22
57121: PUSH
57122: LD_OWVAR 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 21
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PPUSH
57145: CALL_OW 69
57149: ST_TO_ADDR
// if not tmp then
57150: LD_VAR 0 5
57154: NOT
57155: IFFALSE 57159
// exit ;
57157: GO 57313
// for i in tmp do
57159: LD_ADDR_VAR 0 1
57163: PUSH
57164: LD_VAR 0 5
57168: PUSH
57169: FOR_IN
57170: IFFALSE 57311
// begin d := rand ( 0 , 5 ) ;
57172: LD_ADDR_VAR 0 4
57176: PUSH
57177: LD_INT 0
57179: PPUSH
57180: LD_INT 5
57182: PPUSH
57183: CALL_OW 12
57187: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57188: LD_ADDR_VAR 0 2
57192: PUSH
57193: LD_VAR 0 1
57197: PPUSH
57198: CALL_OW 250
57202: PPUSH
57203: LD_VAR 0 4
57207: PPUSH
57208: LD_INT 3
57210: PPUSH
57211: LD_INT 12
57213: PPUSH
57214: CALL_OW 12
57218: PPUSH
57219: CALL_OW 272
57223: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57224: LD_ADDR_VAR 0 3
57228: PUSH
57229: LD_VAR 0 1
57233: PPUSH
57234: CALL_OW 251
57238: PPUSH
57239: LD_VAR 0 4
57243: PPUSH
57244: LD_INT 3
57246: PPUSH
57247: LD_INT 12
57249: PPUSH
57250: CALL_OW 12
57254: PPUSH
57255: CALL_OW 273
57259: ST_TO_ADDR
// if ValidHex ( x , y ) then
57260: LD_VAR 0 2
57264: PPUSH
57265: LD_VAR 0 3
57269: PPUSH
57270: CALL_OW 488
57274: IFFALSE 57309
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57276: LD_VAR 0 1
57280: PPUSH
57281: LD_VAR 0 2
57285: PPUSH
57286: LD_VAR 0 3
57290: PPUSH
57291: LD_INT 3
57293: PPUSH
57294: LD_INT 6
57296: PPUSH
57297: CALL_OW 12
57301: PPUSH
57302: LD_INT 1
57304: PPUSH
57305: CALL_OW 483
// end ;
57309: GO 57169
57311: POP
57312: POP
// end ;
57313: PPOPN 5
57315: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57316: LD_EXP 28
57320: PUSH
57321: LD_EXP 63
57325: AND
57326: IFFALSE 57420
57328: GO 57330
57330: DISABLE
57331: LD_INT 0
57333: PPUSH
57334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57335: LD_ADDR_VAR 0 2
57339: PUSH
57340: LD_INT 22
57342: PUSH
57343: LD_OWVAR 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 32
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 21
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: LIST
57376: PPUSH
57377: CALL_OW 69
57381: ST_TO_ADDR
// if not tmp then
57382: LD_VAR 0 2
57386: NOT
57387: IFFALSE 57391
// exit ;
57389: GO 57420
// for i in tmp do
57391: LD_ADDR_VAR 0 1
57395: PUSH
57396: LD_VAR 0 2
57400: PUSH
57401: FOR_IN
57402: IFFALSE 57418
// SetFuel ( i , 0 ) ;
57404: LD_VAR 0 1
57408: PPUSH
57409: LD_INT 0
57411: PPUSH
57412: CALL_OW 240
57416: GO 57401
57418: POP
57419: POP
// end ;
57420: PPOPN 2
57422: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57423: LD_EXP 28
57427: PUSH
57428: LD_EXP 64
57432: AND
57433: IFFALSE 57499
57435: GO 57437
57437: DISABLE
57438: LD_INT 0
57440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57441: LD_ADDR_VAR 0 1
57445: PUSH
57446: LD_INT 22
57448: PUSH
57449: LD_OWVAR 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 30
57460: PUSH
57461: LD_INT 29
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PPUSH
57472: CALL_OW 69
57476: ST_TO_ADDR
// if not tmp then
57477: LD_VAR 0 1
57481: NOT
57482: IFFALSE 57486
// exit ;
57484: GO 57499
// DestroyUnit ( tmp [ 1 ] ) ;
57486: LD_VAR 0 1
57490: PUSH
57491: LD_INT 1
57493: ARRAY
57494: PPUSH
57495: CALL_OW 65
// end ;
57499: PPOPN 1
57501: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57502: LD_EXP 28
57506: PUSH
57507: LD_EXP 66
57511: AND
57512: IFFALSE 57641
57514: GO 57516
57516: DISABLE
57517: LD_INT 0
57519: PPUSH
// begin uc_side := 0 ;
57520: LD_ADDR_OWVAR 20
57524: PUSH
57525: LD_INT 0
57527: ST_TO_ADDR
// uc_nation := nation_arabian ;
57528: LD_ADDR_OWVAR 21
57532: PUSH
57533: LD_INT 2
57535: ST_TO_ADDR
// hc_gallery :=  ;
57536: LD_ADDR_OWVAR 33
57540: PUSH
57541: LD_STRING 
57543: ST_TO_ADDR
// hc_name :=  ;
57544: LD_ADDR_OWVAR 26
57548: PUSH
57549: LD_STRING 
57551: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57552: LD_INT 1
57554: PPUSH
57555: LD_INT 11
57557: PPUSH
57558: LD_INT 10
57560: PPUSH
57561: CALL_OW 380
// un := CreateHuman ;
57565: LD_ADDR_VAR 0 1
57569: PUSH
57570: CALL_OW 44
57574: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57575: LD_VAR 0 1
57579: PPUSH
57580: LD_INT 1
57582: PPUSH
57583: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57587: LD_INT 35
57589: PPUSH
57590: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57594: LD_VAR 0 1
57598: PPUSH
57599: LD_INT 22
57601: PUSH
57602: LD_OWVAR 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PPUSH
57611: CALL_OW 69
57615: PPUSH
57616: LD_VAR 0 1
57620: PPUSH
57621: CALL_OW 74
57625: PPUSH
57626: CALL_OW 115
// until IsDead ( un ) ;
57630: LD_VAR 0 1
57634: PPUSH
57635: CALL_OW 301
57639: IFFALSE 57587
// end ;
57641: PPOPN 1
57643: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57644: LD_EXP 28
57648: PUSH
57649: LD_EXP 68
57653: AND
57654: IFFALSE 57666
57656: GO 57658
57658: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57659: LD_STRING earthquake(getX(game), 0, 32)
57661: PPUSH
57662: CALL_OW 559
57666: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57667: LD_EXP 28
57671: PUSH
57672: LD_EXP 69
57676: AND
57677: IFFALSE 57768
57679: GO 57681
57681: DISABLE
57682: LD_INT 0
57684: PPUSH
// begin enable ;
57685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57686: LD_ADDR_VAR 0 1
57690: PUSH
57691: LD_INT 22
57693: PUSH
57694: LD_OWVAR 2
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 21
57705: PUSH
57706: LD_INT 2
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 33
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: PPUSH
57728: CALL_OW 69
57732: ST_TO_ADDR
// if not tmp then
57733: LD_VAR 0 1
57737: NOT
57738: IFFALSE 57742
// exit ;
57740: GO 57768
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57742: LD_VAR 0 1
57746: PUSH
57747: LD_INT 1
57749: PPUSH
57750: LD_VAR 0 1
57754: PPUSH
57755: CALL_OW 12
57759: ARRAY
57760: PPUSH
57761: LD_INT 1
57763: PPUSH
57764: CALL_OW 234
// end ;
57768: PPOPN 1
57770: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57771: LD_EXP 28
57775: PUSH
57776: LD_EXP 70
57780: AND
57781: IFFALSE 57922
57783: GO 57785
57785: DISABLE
57786: LD_INT 0
57788: PPUSH
57789: PPUSH
57790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57791: LD_ADDR_VAR 0 3
57795: PUSH
57796: LD_INT 22
57798: PUSH
57799: LD_OWVAR 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 25
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PPUSH
57822: CALL_OW 69
57826: ST_TO_ADDR
// if not tmp then
57827: LD_VAR 0 3
57831: NOT
57832: IFFALSE 57836
// exit ;
57834: GO 57922
// un := tmp [ rand ( 1 , tmp ) ] ;
57836: LD_ADDR_VAR 0 2
57840: PUSH
57841: LD_VAR 0 3
57845: PUSH
57846: LD_INT 1
57848: PPUSH
57849: LD_VAR 0 3
57853: PPUSH
57854: CALL_OW 12
57858: ARRAY
57859: ST_TO_ADDR
// if Crawls ( un ) then
57860: LD_VAR 0 2
57864: PPUSH
57865: CALL_OW 318
57869: IFFALSE 57880
// ComWalk ( un ) ;
57871: LD_VAR 0 2
57875: PPUSH
57876: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57880: LD_VAR 0 2
57884: PPUSH
57885: LD_INT 9
57887: PPUSH
57888: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57892: LD_INT 28
57894: PPUSH
57895: LD_OWVAR 2
57899: PPUSH
57900: LD_INT 2
57902: PPUSH
57903: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57907: LD_INT 29
57909: PPUSH
57910: LD_OWVAR 2
57914: PPUSH
57915: LD_INT 2
57917: PPUSH
57918: CALL_OW 322
// end ;
57922: PPOPN 3
57924: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57925: LD_EXP 28
57929: PUSH
57930: LD_EXP 71
57934: AND
57935: IFFALSE 58046
57937: GO 57939
57939: DISABLE
57940: LD_INT 0
57942: PPUSH
57943: PPUSH
57944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57945: LD_ADDR_VAR 0 3
57949: PUSH
57950: LD_INT 22
57952: PUSH
57953: LD_OWVAR 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 25
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PPUSH
57976: CALL_OW 69
57980: ST_TO_ADDR
// if not tmp then
57981: LD_VAR 0 3
57985: NOT
57986: IFFALSE 57990
// exit ;
57988: GO 58046
// un := tmp [ rand ( 1 , tmp ) ] ;
57990: LD_ADDR_VAR 0 2
57994: PUSH
57995: LD_VAR 0 3
57999: PUSH
58000: LD_INT 1
58002: PPUSH
58003: LD_VAR 0 3
58007: PPUSH
58008: CALL_OW 12
58012: ARRAY
58013: ST_TO_ADDR
// if Crawls ( un ) then
58014: LD_VAR 0 2
58018: PPUSH
58019: CALL_OW 318
58023: IFFALSE 58034
// ComWalk ( un ) ;
58025: LD_VAR 0 2
58029: PPUSH
58030: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58034: LD_VAR 0 2
58038: PPUSH
58039: LD_INT 8
58041: PPUSH
58042: CALL_OW 336
// end ;
58046: PPOPN 3
58048: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58049: LD_EXP 28
58053: PUSH
58054: LD_EXP 72
58058: AND
58059: IFFALSE 58203
58061: GO 58063
58063: DISABLE
58064: LD_INT 0
58066: PPUSH
58067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58068: LD_ADDR_VAR 0 2
58072: PUSH
58073: LD_INT 22
58075: PUSH
58076: LD_OWVAR 2
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 21
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: LD_INT 34
58100: PUSH
58101: LD_INT 12
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 34
58110: PUSH
58111: LD_INT 51
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 34
58120: PUSH
58121: LD_INT 32
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: PPUSH
58139: CALL_OW 69
58143: ST_TO_ADDR
// if not tmp then
58144: LD_VAR 0 2
58148: NOT
58149: IFFALSE 58153
// exit ;
58151: GO 58203
// for i in tmp do
58153: LD_ADDR_VAR 0 1
58157: PUSH
58158: LD_VAR 0 2
58162: PUSH
58163: FOR_IN
58164: IFFALSE 58201
// if GetCargo ( i , mat_artifact ) = 0 then
58166: LD_VAR 0 1
58170: PPUSH
58171: LD_INT 4
58173: PPUSH
58174: CALL_OW 289
58178: PUSH
58179: LD_INT 0
58181: EQUAL
58182: IFFALSE 58199
// SetCargo ( i , mat_siberit , 100 ) ;
58184: LD_VAR 0 1
58188: PPUSH
58189: LD_INT 3
58191: PPUSH
58192: LD_INT 100
58194: PPUSH
58195: CALL_OW 290
58199: GO 58163
58201: POP
58202: POP
// end ;
58203: PPOPN 2
58205: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58206: LD_EXP 28
58210: PUSH
58211: LD_EXP 73
58215: AND
58216: IFFALSE 58399
58218: GO 58220
58220: DISABLE
58221: LD_INT 0
58223: PPUSH
58224: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58225: LD_ADDR_VAR 0 2
58229: PUSH
58230: LD_INT 22
58232: PUSH
58233: LD_OWVAR 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PPUSH
58242: CALL_OW 69
58246: ST_TO_ADDR
// if not tmp then
58247: LD_VAR 0 2
58251: NOT
58252: IFFALSE 58256
// exit ;
58254: GO 58399
// for i := 1 to 2 do
58256: LD_ADDR_VAR 0 1
58260: PUSH
58261: DOUBLE
58262: LD_INT 1
58264: DEC
58265: ST_TO_ADDR
58266: LD_INT 2
58268: PUSH
58269: FOR_TO
58270: IFFALSE 58397
// begin uc_side := your_side ;
58272: LD_ADDR_OWVAR 20
58276: PUSH
58277: LD_OWVAR 2
58281: ST_TO_ADDR
// uc_nation := nation_american ;
58282: LD_ADDR_OWVAR 21
58286: PUSH
58287: LD_INT 1
58289: ST_TO_ADDR
// vc_chassis := us_morphling ;
58290: LD_ADDR_OWVAR 37
58294: PUSH
58295: LD_INT 5
58297: ST_TO_ADDR
// vc_engine := engine_siberite ;
58298: LD_ADDR_OWVAR 39
58302: PUSH
58303: LD_INT 3
58305: ST_TO_ADDR
// vc_control := control_computer ;
58306: LD_ADDR_OWVAR 38
58310: PUSH
58311: LD_INT 3
58313: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58314: LD_ADDR_OWVAR 40
58318: PUSH
58319: LD_INT 10
58321: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58322: LD_VAR 0 2
58326: PUSH
58327: LD_INT 1
58329: ARRAY
58330: PPUSH
58331: CALL_OW 310
58335: NOT
58336: IFFALSE 58383
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58338: CALL_OW 45
58342: PPUSH
58343: LD_VAR 0 2
58347: PUSH
58348: LD_INT 1
58350: ARRAY
58351: PPUSH
58352: CALL_OW 250
58356: PPUSH
58357: LD_VAR 0 2
58361: PUSH
58362: LD_INT 1
58364: ARRAY
58365: PPUSH
58366: CALL_OW 251
58370: PPUSH
58371: LD_INT 12
58373: PPUSH
58374: LD_INT 1
58376: PPUSH
58377: CALL_OW 50
58381: GO 58395
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58383: CALL_OW 45
58387: PPUSH
58388: LD_INT 1
58390: PPUSH
58391: CALL_OW 51
// end ;
58395: GO 58269
58397: POP
58398: POP
// end ;
58399: PPOPN 2
58401: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58402: LD_EXP 28
58406: PUSH
58407: LD_EXP 74
58411: AND
58412: IFFALSE 58634
58414: GO 58416
58416: DISABLE
58417: LD_INT 0
58419: PPUSH
58420: PPUSH
58421: PPUSH
58422: PPUSH
58423: PPUSH
58424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58425: LD_ADDR_VAR 0 6
58429: PUSH
58430: LD_INT 22
58432: PUSH
58433: LD_OWVAR 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 21
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: LD_INT 23
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: PPUSH
58474: CALL_OW 69
58478: ST_TO_ADDR
// if not tmp then
58479: LD_VAR 0 6
58483: NOT
58484: IFFALSE 58488
// exit ;
58486: GO 58634
// s1 := rand ( 1 , 4 ) ;
58488: LD_ADDR_VAR 0 2
58492: PUSH
58493: LD_INT 1
58495: PPUSH
58496: LD_INT 4
58498: PPUSH
58499: CALL_OW 12
58503: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58504: LD_ADDR_VAR 0 4
58508: PUSH
58509: LD_VAR 0 6
58513: PUSH
58514: LD_INT 1
58516: ARRAY
58517: PPUSH
58518: LD_VAR 0 2
58522: PPUSH
58523: CALL_OW 259
58527: ST_TO_ADDR
// if s1 = 1 then
58528: LD_VAR 0 2
58532: PUSH
58533: LD_INT 1
58535: EQUAL
58536: IFFALSE 58556
// s2 := rand ( 2 , 4 ) else
58538: LD_ADDR_VAR 0 3
58542: PUSH
58543: LD_INT 2
58545: PPUSH
58546: LD_INT 4
58548: PPUSH
58549: CALL_OW 12
58553: ST_TO_ADDR
58554: GO 58564
// s2 := 1 ;
58556: LD_ADDR_VAR 0 3
58560: PUSH
58561: LD_INT 1
58563: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58564: LD_ADDR_VAR 0 5
58568: PUSH
58569: LD_VAR 0 6
58573: PUSH
58574: LD_INT 1
58576: ARRAY
58577: PPUSH
58578: LD_VAR 0 3
58582: PPUSH
58583: CALL_OW 259
58587: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58588: LD_VAR 0 6
58592: PUSH
58593: LD_INT 1
58595: ARRAY
58596: PPUSH
58597: LD_VAR 0 2
58601: PPUSH
58602: LD_VAR 0 5
58606: PPUSH
58607: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58611: LD_VAR 0 6
58615: PUSH
58616: LD_INT 1
58618: ARRAY
58619: PPUSH
58620: LD_VAR 0 3
58624: PPUSH
58625: LD_VAR 0 4
58629: PPUSH
58630: CALL_OW 237
// end ;
58634: PPOPN 6
58636: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58637: LD_EXP 28
58641: PUSH
58642: LD_EXP 75
58646: AND
58647: IFFALSE 58726
58649: GO 58651
58651: DISABLE
58652: LD_INT 0
58654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58655: LD_ADDR_VAR 0 1
58659: PUSH
58660: LD_INT 22
58662: PUSH
58663: LD_OWVAR 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 30
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PPUSH
58686: CALL_OW 69
58690: ST_TO_ADDR
// if not tmp then
58691: LD_VAR 0 1
58695: NOT
58696: IFFALSE 58700
// exit ;
58698: GO 58726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58700: LD_VAR 0 1
58704: PUSH
58705: LD_INT 1
58707: PPUSH
58708: LD_VAR 0 1
58712: PPUSH
58713: CALL_OW 12
58717: ARRAY
58718: PPUSH
58719: LD_INT 1
58721: PPUSH
58722: CALL_OW 234
// end ;
58726: PPOPN 1
58728: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58729: LD_EXP 28
58733: PUSH
58734: LD_EXP 76
58738: AND
58739: IFFALSE 58851
58741: GO 58743
58743: DISABLE
58744: LD_INT 0
58746: PPUSH
58747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58748: LD_ADDR_VAR 0 2
58752: PUSH
58753: LD_INT 22
58755: PUSH
58756: LD_OWVAR 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 30
58770: PUSH
58771: LD_INT 27
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 30
58780: PUSH
58781: LD_INT 26
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 30
58790: PUSH
58791: LD_INT 28
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PPUSH
58808: CALL_OW 69
58812: ST_TO_ADDR
// if not tmp then
58813: LD_VAR 0 2
58817: NOT
58818: IFFALSE 58822
// exit ;
58820: GO 58851
// for i in tmp do
58822: LD_ADDR_VAR 0 1
58826: PUSH
58827: LD_VAR 0 2
58831: PUSH
58832: FOR_IN
58833: IFFALSE 58849
// SetLives ( i , 1 ) ;
58835: LD_VAR 0 1
58839: PPUSH
58840: LD_INT 1
58842: PPUSH
58843: CALL_OW 234
58847: GO 58832
58849: POP
58850: POP
// end ;
58851: PPOPN 2
58853: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58854: LD_EXP 28
58858: PUSH
58859: LD_EXP 77
58863: AND
58864: IFFALSE 59151
58866: GO 58868
58868: DISABLE
58869: LD_INT 0
58871: PPUSH
58872: PPUSH
58873: PPUSH
// begin i := rand ( 1 , 7 ) ;
58874: LD_ADDR_VAR 0 1
58878: PUSH
58879: LD_INT 1
58881: PPUSH
58882: LD_INT 7
58884: PPUSH
58885: CALL_OW 12
58889: ST_TO_ADDR
// case i of 1 :
58890: LD_VAR 0 1
58894: PUSH
58895: LD_INT 1
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58903
58901: GO 58913
58903: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58904: LD_STRING earthquake(getX(game), 0, 32)
58906: PPUSH
58907: CALL_OW 559
58911: GO 59151
58913: LD_INT 2
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58921
58919: GO 58935
58921: POP
// begin ToLua ( displayStucuk(); ) ;
58922: LD_STRING displayStucuk();
58924: PPUSH
58925: CALL_OW 559
// ResetFog ;
58929: CALL_OW 335
// end ; 3 :
58933: GO 59151
58935: LD_INT 3
58937: DOUBLE
58938: EQUAL
58939: IFTRUE 58943
58941: GO 59047
58943: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58944: LD_ADDR_VAR 0 2
58948: PUSH
58949: LD_INT 22
58951: PUSH
58952: LD_OWVAR 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 25
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PPUSH
58975: CALL_OW 69
58979: ST_TO_ADDR
// if not tmp then
58980: LD_VAR 0 2
58984: NOT
58985: IFFALSE 58989
// exit ;
58987: GO 59151
// un := tmp [ rand ( 1 , tmp ) ] ;
58989: LD_ADDR_VAR 0 3
58993: PUSH
58994: LD_VAR 0 2
58998: PUSH
58999: LD_INT 1
59001: PPUSH
59002: LD_VAR 0 2
59006: PPUSH
59007: CALL_OW 12
59011: ARRAY
59012: ST_TO_ADDR
// if Crawls ( un ) then
59013: LD_VAR 0 3
59017: PPUSH
59018: CALL_OW 318
59022: IFFALSE 59033
// ComWalk ( un ) ;
59024: LD_VAR 0 3
59028: PPUSH
59029: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59033: LD_VAR 0 3
59037: PPUSH
59038: LD_INT 8
59040: PPUSH
59041: CALL_OW 336
// end ; 4 :
59045: GO 59151
59047: LD_INT 4
59049: DOUBLE
59050: EQUAL
59051: IFTRUE 59055
59053: GO 59129
59055: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59056: LD_ADDR_VAR 0 2
59060: PUSH
59061: LD_INT 22
59063: PUSH
59064: LD_OWVAR 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 30
59075: PUSH
59076: LD_INT 29
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PPUSH
59087: CALL_OW 69
59091: ST_TO_ADDR
// if not tmp then
59092: LD_VAR 0 2
59096: NOT
59097: IFFALSE 59101
// exit ;
59099: GO 59151
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59101: LD_VAR 0 2
59105: PUSH
59106: LD_INT 1
59108: ARRAY
59109: PPUSH
59110: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59114: LD_VAR 0 2
59118: PUSH
59119: LD_INT 1
59121: ARRAY
59122: PPUSH
59123: CALL_OW 65
// end ; 5 .. 7 :
59127: GO 59151
59129: LD_INT 5
59131: DOUBLE
59132: GREATEREQUAL
59133: IFFALSE 59141
59135: LD_INT 7
59137: DOUBLE
59138: LESSEQUAL
59139: IFTRUE 59143
59141: GO 59150
59143: POP
// StreamSibBomb ; end ;
59144: CALL 55388 0 0
59148: GO 59151
59150: POP
// end ;
59151: PPOPN 3
59153: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59154: LD_EXP 28
59158: PUSH
59159: LD_EXP 78
59163: AND
59164: IFFALSE 59320
59166: GO 59168
59168: DISABLE
59169: LD_INT 0
59171: PPUSH
59172: PPUSH
59173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59174: LD_ADDR_VAR 0 2
59178: PUSH
59179: LD_INT 81
59181: PUSH
59182: LD_OWVAR 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 21
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 21
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PPUSH
59223: CALL_OW 69
59227: ST_TO_ADDR
// if not tmp then
59228: LD_VAR 0 2
59232: NOT
59233: IFFALSE 59237
// exit ;
59235: GO 59320
// p := 0 ;
59237: LD_ADDR_VAR 0 3
59241: PUSH
59242: LD_INT 0
59244: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59245: LD_INT 35
59247: PPUSH
59248: CALL_OW 67
// p := p + 1 ;
59252: LD_ADDR_VAR 0 3
59256: PUSH
59257: LD_VAR 0 3
59261: PUSH
59262: LD_INT 1
59264: PLUS
59265: ST_TO_ADDR
// for i in tmp do
59266: LD_ADDR_VAR 0 1
59270: PUSH
59271: LD_VAR 0 2
59275: PUSH
59276: FOR_IN
59277: IFFALSE 59308
// if GetLives ( i ) < 1000 then
59279: LD_VAR 0 1
59283: PPUSH
59284: CALL_OW 256
59288: PUSH
59289: LD_INT 1000
59291: LESS
59292: IFFALSE 59306
// SetLives ( i , 1000 ) ;
59294: LD_VAR 0 1
59298: PPUSH
59299: LD_INT 1000
59301: PPUSH
59302: CALL_OW 234
59306: GO 59276
59308: POP
59309: POP
// until p > 20 ;
59310: LD_VAR 0 3
59314: PUSH
59315: LD_INT 20
59317: GREATER
59318: IFFALSE 59245
// end ;
59320: PPOPN 3
59322: END
// every 0 0$1 trigger StreamModeActive and sTime do
59323: LD_EXP 28
59327: PUSH
59328: LD_EXP 79
59332: AND
59333: IFFALSE 59368
59335: GO 59337
59337: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59338: LD_INT 28
59340: PPUSH
59341: LD_OWVAR 2
59345: PPUSH
59346: LD_INT 2
59348: PPUSH
59349: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59353: LD_INT 30
59355: PPUSH
59356: LD_OWVAR 2
59360: PPUSH
59361: LD_INT 2
59363: PPUSH
59364: CALL_OW 322
// end ;
59368: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59369: LD_EXP 28
59373: PUSH
59374: LD_EXP 80
59378: AND
59379: IFFALSE 59500
59381: GO 59383
59383: DISABLE
59384: LD_INT 0
59386: PPUSH
59387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59388: LD_ADDR_VAR 0 2
59392: PUSH
59393: LD_INT 22
59395: PUSH
59396: LD_OWVAR 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 21
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: LD_INT 23
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: PPUSH
59437: CALL_OW 69
59441: ST_TO_ADDR
// if not tmp then
59442: LD_VAR 0 2
59446: NOT
59447: IFFALSE 59451
// exit ;
59449: GO 59500
// for i in tmp do
59451: LD_ADDR_VAR 0 1
59455: PUSH
59456: LD_VAR 0 2
59460: PUSH
59461: FOR_IN
59462: IFFALSE 59498
// begin if Crawls ( i ) then
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL_OW 318
59473: IFFALSE 59484
// ComWalk ( i ) ;
59475: LD_VAR 0 1
59479: PPUSH
59480: CALL_OW 138
// SetClass ( i , 2 ) ;
59484: LD_VAR 0 1
59488: PPUSH
59489: LD_INT 2
59491: PPUSH
59492: CALL_OW 336
// end ;
59496: GO 59461
59498: POP
59499: POP
// end ;
59500: PPOPN 2
59502: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59503: LD_EXP 28
59507: PUSH
59508: LD_EXP 81
59512: AND
59513: IFFALSE 59801
59515: GO 59517
59517: DISABLE
59518: LD_INT 0
59520: PPUSH
59521: PPUSH
59522: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59523: LD_OWVAR 2
59527: PPUSH
59528: LD_INT 9
59530: PPUSH
59531: LD_INT 1
59533: PPUSH
59534: LD_INT 1
59536: PPUSH
59537: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59541: LD_INT 9
59543: PPUSH
59544: LD_OWVAR 2
59548: PPUSH
59549: CALL_OW 343
// uc_side := 9 ;
59553: LD_ADDR_OWVAR 20
59557: PUSH
59558: LD_INT 9
59560: ST_TO_ADDR
// uc_nation := 2 ;
59561: LD_ADDR_OWVAR 21
59565: PUSH
59566: LD_INT 2
59568: ST_TO_ADDR
// hc_name := Dark Warrior ;
59569: LD_ADDR_OWVAR 26
59573: PUSH
59574: LD_STRING Dark Warrior
59576: ST_TO_ADDR
// hc_gallery :=  ;
59577: LD_ADDR_OWVAR 33
59581: PUSH
59582: LD_STRING 
59584: ST_TO_ADDR
// hc_noskilllimit := true ;
59585: LD_ADDR_OWVAR 76
59589: PUSH
59590: LD_INT 1
59592: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59593: LD_ADDR_OWVAR 31
59597: PUSH
59598: LD_INT 30
59600: PUSH
59601: LD_INT 30
59603: PUSH
59604: LD_INT 30
59606: PUSH
59607: LD_INT 30
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: ST_TO_ADDR
// un := CreateHuman ;
59616: LD_ADDR_VAR 0 3
59620: PUSH
59621: CALL_OW 44
59625: ST_TO_ADDR
// hc_noskilllimit := false ;
59626: LD_ADDR_OWVAR 76
59630: PUSH
59631: LD_INT 0
59633: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59634: LD_VAR 0 3
59638: PPUSH
59639: LD_INT 1
59641: PPUSH
59642: CALL_OW 51
// ToLua ( playRanger() ) ;
59646: LD_STRING playRanger()
59648: PPUSH
59649: CALL_OW 559
// p := 0 ;
59653: LD_ADDR_VAR 0 2
59657: PUSH
59658: LD_INT 0
59660: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59661: LD_INT 35
59663: PPUSH
59664: CALL_OW 67
// p := p + 1 ;
59668: LD_ADDR_VAR 0 2
59672: PUSH
59673: LD_VAR 0 2
59677: PUSH
59678: LD_INT 1
59680: PLUS
59681: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59682: LD_VAR 0 3
59686: PPUSH
59687: CALL_OW 256
59691: PUSH
59692: LD_INT 1000
59694: LESS
59695: IFFALSE 59709
// SetLives ( un , 1000 ) ;
59697: LD_VAR 0 3
59701: PPUSH
59702: LD_INT 1000
59704: PPUSH
59705: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59709: LD_VAR 0 3
59713: PPUSH
59714: LD_INT 81
59716: PUSH
59717: LD_OWVAR 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 91
59728: PUSH
59729: LD_VAR 0 3
59733: PUSH
59734: LD_INT 30
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PPUSH
59746: CALL_OW 69
59750: PPUSH
59751: LD_VAR 0 3
59755: PPUSH
59756: CALL_OW 74
59760: PPUSH
59761: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59765: LD_VAR 0 2
59769: PUSH
59770: LD_INT 80
59772: GREATER
59773: PUSH
59774: LD_VAR 0 3
59778: PPUSH
59779: CALL_OW 301
59783: OR
59784: IFFALSE 59661
// if un then
59786: LD_VAR 0 3
59790: IFFALSE 59801
// RemoveUnit ( un ) ;
59792: LD_VAR 0 3
59796: PPUSH
59797: CALL_OW 64
// end ;
59801: PPOPN 3
59803: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59804: LD_EXP 82
59808: IFFALSE 59924
59810: GO 59812
59812: DISABLE
59813: LD_INT 0
59815: PPUSH
59816: PPUSH
59817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59818: LD_ADDR_VAR 0 2
59822: PUSH
59823: LD_INT 81
59825: PUSH
59826: LD_OWVAR 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 21
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PPUSH
59849: CALL_OW 69
59853: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59854: LD_STRING playComputer()
59856: PPUSH
59857: CALL_OW 559
// if not tmp then
59861: LD_VAR 0 2
59865: NOT
59866: IFFALSE 59870
// exit ;
59868: GO 59924
// for i in tmp do
59870: LD_ADDR_VAR 0 1
59874: PUSH
59875: LD_VAR 0 2
59879: PUSH
59880: FOR_IN
59881: IFFALSE 59922
// for j := 1 to 4 do
59883: LD_ADDR_VAR 0 3
59887: PUSH
59888: DOUBLE
59889: LD_INT 1
59891: DEC
59892: ST_TO_ADDR
59893: LD_INT 4
59895: PUSH
59896: FOR_TO
59897: IFFALSE 59918
// SetSkill ( i , j , 10 ) ;
59899: LD_VAR 0 1
59903: PPUSH
59904: LD_VAR 0 3
59908: PPUSH
59909: LD_INT 10
59911: PPUSH
59912: CALL_OW 237
59916: GO 59896
59918: POP
59919: POP
59920: GO 59880
59922: POP
59923: POP
// end ;
59924: PPOPN 3
59926: END
// every 0 0$1 trigger s30 do var i , tmp ;
59927: LD_EXP 83
59931: IFFALSE 60000
59933: GO 59935
59935: DISABLE
59936: LD_INT 0
59938: PPUSH
59939: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59940: LD_ADDR_VAR 0 2
59944: PUSH
59945: LD_INT 22
59947: PUSH
59948: LD_OWVAR 2
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PPUSH
59957: CALL_OW 69
59961: ST_TO_ADDR
// if not tmp then
59962: LD_VAR 0 2
59966: NOT
59967: IFFALSE 59971
// exit ;
59969: GO 60000
// for i in tmp do
59971: LD_ADDR_VAR 0 1
59975: PUSH
59976: LD_VAR 0 2
59980: PUSH
59981: FOR_IN
59982: IFFALSE 59998
// SetLives ( i , 300 ) ;
59984: LD_VAR 0 1
59988: PPUSH
59989: LD_INT 300
59991: PPUSH
59992: CALL_OW 234
59996: GO 59981
59998: POP
59999: POP
// end ;
60000: PPOPN 2
60002: END
// every 0 0$1 trigger s60 do var i , tmp ;
60003: LD_EXP 84
60007: IFFALSE 60076
60009: GO 60011
60011: DISABLE
60012: LD_INT 0
60014: PPUSH
60015: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60016: LD_ADDR_VAR 0 2
60020: PUSH
60021: LD_INT 22
60023: PUSH
60024: LD_OWVAR 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PPUSH
60033: CALL_OW 69
60037: ST_TO_ADDR
// if not tmp then
60038: LD_VAR 0 2
60042: NOT
60043: IFFALSE 60047
// exit ;
60045: GO 60076
// for i in tmp do
60047: LD_ADDR_VAR 0 1
60051: PUSH
60052: LD_VAR 0 2
60056: PUSH
60057: FOR_IN
60058: IFFALSE 60074
// SetLives ( i , 600 ) ;
60060: LD_VAR 0 1
60064: PPUSH
60065: LD_INT 600
60067: PPUSH
60068: CALL_OW 234
60072: GO 60057
60074: POP
60075: POP
// end ;
60076: PPOPN 2
60078: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60079: LD_INT 0
60081: PPUSH
// case cmd of 301 :
60082: LD_VAR 0 1
60086: PUSH
60087: LD_INT 301
60089: DOUBLE
60090: EQUAL
60091: IFTRUE 60095
60093: GO 60127
60095: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60096: LD_VAR 0 6
60100: PPUSH
60101: LD_VAR 0 7
60105: PPUSH
60106: LD_VAR 0 8
60110: PPUSH
60111: LD_VAR 0 4
60115: PPUSH
60116: LD_VAR 0 5
60120: PPUSH
60121: CALL 61336 0 5
60125: GO 60248
60127: LD_INT 302
60129: DOUBLE
60130: EQUAL
60131: IFTRUE 60135
60133: GO 60172
60135: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60136: LD_VAR 0 6
60140: PPUSH
60141: LD_VAR 0 7
60145: PPUSH
60146: LD_VAR 0 8
60150: PPUSH
60151: LD_VAR 0 9
60155: PPUSH
60156: LD_VAR 0 4
60160: PPUSH
60161: LD_VAR 0 5
60165: PPUSH
60166: CALL 61427 0 6
60170: GO 60248
60172: LD_INT 303
60174: DOUBLE
60175: EQUAL
60176: IFTRUE 60180
60178: GO 60217
60180: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60181: LD_VAR 0 6
60185: PPUSH
60186: LD_VAR 0 7
60190: PPUSH
60191: LD_VAR 0 8
60195: PPUSH
60196: LD_VAR 0 9
60200: PPUSH
60201: LD_VAR 0 4
60205: PPUSH
60206: LD_VAR 0 5
60210: PPUSH
60211: CALL 60253 0 6
60215: GO 60248
60217: LD_INT 304
60219: DOUBLE
60220: EQUAL
60221: IFTRUE 60225
60223: GO 60247
60225: POP
// hHackTeleport ( unit , x , y ) ; end ;
60226: LD_VAR 0 2
60230: PPUSH
60231: LD_VAR 0 4
60235: PPUSH
60236: LD_VAR 0 5
60240: PPUSH
60241: CALL 62020 0 3
60245: GO 60248
60247: POP
// end ;
60248: LD_VAR 0 12
60252: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60253: LD_INT 0
60255: PPUSH
60256: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60257: LD_VAR 0 1
60261: PUSH
60262: LD_INT 1
60264: LESS
60265: PUSH
60266: LD_VAR 0 1
60270: PUSH
60271: LD_INT 3
60273: GREATER
60274: OR
60275: PUSH
60276: LD_VAR 0 5
60280: PPUSH
60281: LD_VAR 0 6
60285: PPUSH
60286: CALL_OW 428
60290: OR
60291: IFFALSE 60295
// exit ;
60293: GO 61023
// uc_side := your_side ;
60295: LD_ADDR_OWVAR 20
60299: PUSH
60300: LD_OWVAR 2
60304: ST_TO_ADDR
// uc_nation := nation ;
60305: LD_ADDR_OWVAR 21
60309: PUSH
60310: LD_VAR 0 1
60314: ST_TO_ADDR
// bc_level = 1 ;
60315: LD_ADDR_OWVAR 43
60319: PUSH
60320: LD_INT 1
60322: ST_TO_ADDR
// case btype of 1 :
60323: LD_VAR 0 2
60327: PUSH
60328: LD_INT 1
60330: DOUBLE
60331: EQUAL
60332: IFTRUE 60336
60334: GO 60347
60336: POP
// bc_type := b_depot ; 2 :
60337: LD_ADDR_OWVAR 42
60341: PUSH
60342: LD_INT 0
60344: ST_TO_ADDR
60345: GO 60967
60347: LD_INT 2
60349: DOUBLE
60350: EQUAL
60351: IFTRUE 60355
60353: GO 60366
60355: POP
// bc_type := b_warehouse ; 3 :
60356: LD_ADDR_OWVAR 42
60360: PUSH
60361: LD_INT 1
60363: ST_TO_ADDR
60364: GO 60967
60366: LD_INT 3
60368: DOUBLE
60369: EQUAL
60370: IFTRUE 60374
60372: GO 60385
60374: POP
// bc_type := b_lab ; 4 .. 9 :
60375: LD_ADDR_OWVAR 42
60379: PUSH
60380: LD_INT 6
60382: ST_TO_ADDR
60383: GO 60967
60385: LD_INT 4
60387: DOUBLE
60388: GREATEREQUAL
60389: IFFALSE 60397
60391: LD_INT 9
60393: DOUBLE
60394: LESSEQUAL
60395: IFTRUE 60399
60397: GO 60459
60399: POP
// begin bc_type := b_lab_half ;
60400: LD_ADDR_OWVAR 42
60404: PUSH
60405: LD_INT 7
60407: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60408: LD_ADDR_OWVAR 44
60412: PUSH
60413: LD_INT 10
60415: PUSH
60416: LD_INT 11
60418: PUSH
60419: LD_INT 12
60421: PUSH
60422: LD_INT 15
60424: PUSH
60425: LD_INT 14
60427: PUSH
60428: LD_INT 13
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: PUSH
60439: LD_VAR 0 2
60443: PUSH
60444: LD_INT 3
60446: MINUS
60447: ARRAY
60448: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60449: LD_ADDR_OWVAR 45
60453: PUSH
60454: LD_INT 9
60456: ST_TO_ADDR
// end ; 10 .. 13 :
60457: GO 60967
60459: LD_INT 10
60461: DOUBLE
60462: GREATEREQUAL
60463: IFFALSE 60471
60465: LD_INT 13
60467: DOUBLE
60468: LESSEQUAL
60469: IFTRUE 60473
60471: GO 60550
60473: POP
// begin bc_type := b_lab_full ;
60474: LD_ADDR_OWVAR 42
60478: PUSH
60479: LD_INT 8
60481: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60482: LD_ADDR_OWVAR 44
60486: PUSH
60487: LD_INT 10
60489: PUSH
60490: LD_INT 12
60492: PUSH
60493: LD_INT 14
60495: PUSH
60496: LD_INT 13
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: PUSH
60505: LD_VAR 0 2
60509: PUSH
60510: LD_INT 9
60512: MINUS
60513: ARRAY
60514: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60515: LD_ADDR_OWVAR 45
60519: PUSH
60520: LD_INT 11
60522: PUSH
60523: LD_INT 15
60525: PUSH
60526: LD_INT 12
60528: PUSH
60529: LD_INT 15
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: PUSH
60538: LD_VAR 0 2
60542: PUSH
60543: LD_INT 9
60545: MINUS
60546: ARRAY
60547: ST_TO_ADDR
// end ; 14 :
60548: GO 60967
60550: LD_INT 14
60552: DOUBLE
60553: EQUAL
60554: IFTRUE 60558
60556: GO 60569
60558: POP
// bc_type := b_workshop ; 15 :
60559: LD_ADDR_OWVAR 42
60563: PUSH
60564: LD_INT 2
60566: ST_TO_ADDR
60567: GO 60967
60569: LD_INT 15
60571: DOUBLE
60572: EQUAL
60573: IFTRUE 60577
60575: GO 60588
60577: POP
// bc_type := b_factory ; 16 :
60578: LD_ADDR_OWVAR 42
60582: PUSH
60583: LD_INT 3
60585: ST_TO_ADDR
60586: GO 60967
60588: LD_INT 16
60590: DOUBLE
60591: EQUAL
60592: IFTRUE 60596
60594: GO 60607
60596: POP
// bc_type := b_ext_gun ; 17 :
60597: LD_ADDR_OWVAR 42
60601: PUSH
60602: LD_INT 17
60604: ST_TO_ADDR
60605: GO 60967
60607: LD_INT 17
60609: DOUBLE
60610: EQUAL
60611: IFTRUE 60615
60613: GO 60643
60615: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60616: LD_ADDR_OWVAR 42
60620: PUSH
60621: LD_INT 19
60623: PUSH
60624: LD_INT 23
60626: PUSH
60627: LD_INT 19
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: PUSH
60635: LD_VAR 0 1
60639: ARRAY
60640: ST_TO_ADDR
60641: GO 60967
60643: LD_INT 18
60645: DOUBLE
60646: EQUAL
60647: IFTRUE 60651
60649: GO 60662
60651: POP
// bc_type := b_ext_radar ; 19 :
60652: LD_ADDR_OWVAR 42
60656: PUSH
60657: LD_INT 20
60659: ST_TO_ADDR
60660: GO 60967
60662: LD_INT 19
60664: DOUBLE
60665: EQUAL
60666: IFTRUE 60670
60668: GO 60681
60670: POP
// bc_type := b_ext_radio ; 20 :
60671: LD_ADDR_OWVAR 42
60675: PUSH
60676: LD_INT 22
60678: ST_TO_ADDR
60679: GO 60967
60681: LD_INT 20
60683: DOUBLE
60684: EQUAL
60685: IFTRUE 60689
60687: GO 60700
60689: POP
// bc_type := b_ext_siberium ; 21 :
60690: LD_ADDR_OWVAR 42
60694: PUSH
60695: LD_INT 21
60697: ST_TO_ADDR
60698: GO 60967
60700: LD_INT 21
60702: DOUBLE
60703: EQUAL
60704: IFTRUE 60708
60706: GO 60719
60708: POP
// bc_type := b_ext_computer ; 22 :
60709: LD_ADDR_OWVAR 42
60713: PUSH
60714: LD_INT 24
60716: ST_TO_ADDR
60717: GO 60967
60719: LD_INT 22
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60727
60725: GO 60738
60727: POP
// bc_type := b_ext_track ; 23 :
60728: LD_ADDR_OWVAR 42
60732: PUSH
60733: LD_INT 16
60735: ST_TO_ADDR
60736: GO 60967
60738: LD_INT 23
60740: DOUBLE
60741: EQUAL
60742: IFTRUE 60746
60744: GO 60757
60746: POP
// bc_type := b_ext_laser ; 24 :
60747: LD_ADDR_OWVAR 42
60751: PUSH
60752: LD_INT 25
60754: ST_TO_ADDR
60755: GO 60967
60757: LD_INT 24
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60765
60763: GO 60776
60765: POP
// bc_type := b_control_tower ; 25 :
60766: LD_ADDR_OWVAR 42
60770: PUSH
60771: LD_INT 36
60773: ST_TO_ADDR
60774: GO 60967
60776: LD_INT 25
60778: DOUBLE
60779: EQUAL
60780: IFTRUE 60784
60782: GO 60795
60784: POP
// bc_type := b_breastwork ; 26 :
60785: LD_ADDR_OWVAR 42
60789: PUSH
60790: LD_INT 31
60792: ST_TO_ADDR
60793: GO 60967
60795: LD_INT 26
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60803
60801: GO 60814
60803: POP
// bc_type := b_bunker ; 27 :
60804: LD_ADDR_OWVAR 42
60808: PUSH
60809: LD_INT 32
60811: ST_TO_ADDR
60812: GO 60967
60814: LD_INT 27
60816: DOUBLE
60817: EQUAL
60818: IFTRUE 60822
60820: GO 60833
60822: POP
// bc_type := b_turret ; 28 :
60823: LD_ADDR_OWVAR 42
60827: PUSH
60828: LD_INT 33
60830: ST_TO_ADDR
60831: GO 60967
60833: LD_INT 28
60835: DOUBLE
60836: EQUAL
60837: IFTRUE 60841
60839: GO 60852
60841: POP
// bc_type := b_armoury ; 29 :
60842: LD_ADDR_OWVAR 42
60846: PUSH
60847: LD_INT 4
60849: ST_TO_ADDR
60850: GO 60967
60852: LD_INT 29
60854: DOUBLE
60855: EQUAL
60856: IFTRUE 60860
60858: GO 60871
60860: POP
// bc_type := b_barracks ; 30 :
60861: LD_ADDR_OWVAR 42
60865: PUSH
60866: LD_INT 5
60868: ST_TO_ADDR
60869: GO 60967
60871: LD_INT 30
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60879
60877: GO 60890
60879: POP
// bc_type := b_solar_power ; 31 :
60880: LD_ADDR_OWVAR 42
60884: PUSH
60885: LD_INT 27
60887: ST_TO_ADDR
60888: GO 60967
60890: LD_INT 31
60892: DOUBLE
60893: EQUAL
60894: IFTRUE 60898
60896: GO 60909
60898: POP
// bc_type := b_oil_power ; 32 :
60899: LD_ADDR_OWVAR 42
60903: PUSH
60904: LD_INT 26
60906: ST_TO_ADDR
60907: GO 60967
60909: LD_INT 32
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60917
60915: GO 60928
60917: POP
// bc_type := b_siberite_power ; 33 :
60918: LD_ADDR_OWVAR 42
60922: PUSH
60923: LD_INT 28
60925: ST_TO_ADDR
60926: GO 60967
60928: LD_INT 33
60930: DOUBLE
60931: EQUAL
60932: IFTRUE 60936
60934: GO 60947
60936: POP
// bc_type := b_oil_mine ; 34 :
60937: LD_ADDR_OWVAR 42
60941: PUSH
60942: LD_INT 29
60944: ST_TO_ADDR
60945: GO 60967
60947: LD_INT 34
60949: DOUBLE
60950: EQUAL
60951: IFTRUE 60955
60953: GO 60966
60955: POP
// bc_type := b_siberite_mine ; end ;
60956: LD_ADDR_OWVAR 42
60960: PUSH
60961: LD_INT 30
60963: ST_TO_ADDR
60964: GO 60967
60966: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60967: LD_ADDR_VAR 0 8
60971: PUSH
60972: LD_VAR 0 5
60976: PPUSH
60977: LD_VAR 0 6
60981: PPUSH
60982: LD_VAR 0 3
60986: PPUSH
60987: CALL_OW 47
60991: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60992: LD_OWVAR 42
60996: PUSH
60997: LD_INT 32
60999: PUSH
61000: LD_INT 33
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: IN
61007: IFFALSE 61023
// PlaceWeaponTurret ( b , weapon ) ;
61009: LD_VAR 0 8
61013: PPUSH
61014: LD_VAR 0 4
61018: PPUSH
61019: CALL_OW 431
// end ;
61023: LD_VAR 0 7
61027: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61028: LD_INT 0
61030: PPUSH
61031: PPUSH
61032: PPUSH
61033: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61034: LD_ADDR_VAR 0 4
61038: PUSH
61039: LD_INT 22
61041: PUSH
61042: LD_OWVAR 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 30
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 30
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: LIST
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PPUSH
61083: CALL_OW 69
61087: ST_TO_ADDR
// if not tmp then
61088: LD_VAR 0 4
61092: NOT
61093: IFFALSE 61097
// exit ;
61095: GO 61156
// for i in tmp do
61097: LD_ADDR_VAR 0 2
61101: PUSH
61102: LD_VAR 0 4
61106: PUSH
61107: FOR_IN
61108: IFFALSE 61154
// for j = 1 to 3 do
61110: LD_ADDR_VAR 0 3
61114: PUSH
61115: DOUBLE
61116: LD_INT 1
61118: DEC
61119: ST_TO_ADDR
61120: LD_INT 3
61122: PUSH
61123: FOR_TO
61124: IFFALSE 61150
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61126: LD_VAR 0 2
61130: PPUSH
61131: CALL_OW 274
61135: PPUSH
61136: LD_VAR 0 3
61140: PPUSH
61141: LD_INT 99999
61143: PPUSH
61144: CALL_OW 277
61148: GO 61123
61150: POP
61151: POP
61152: GO 61107
61154: POP
61155: POP
// end ;
61156: LD_VAR 0 1
61160: RET
// export function hHackSetLevel10 ; var i , j ; begin
61161: LD_INT 0
61163: PPUSH
61164: PPUSH
61165: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61166: LD_ADDR_VAR 0 2
61170: PUSH
61171: LD_INT 21
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PPUSH
61181: CALL_OW 69
61185: PUSH
61186: FOR_IN
61187: IFFALSE 61239
// if IsSelected ( i ) then
61189: LD_VAR 0 2
61193: PPUSH
61194: CALL_OW 306
61198: IFFALSE 61237
// begin for j := 1 to 4 do
61200: LD_ADDR_VAR 0 3
61204: PUSH
61205: DOUBLE
61206: LD_INT 1
61208: DEC
61209: ST_TO_ADDR
61210: LD_INT 4
61212: PUSH
61213: FOR_TO
61214: IFFALSE 61235
// SetSkill ( i , j , 10 ) ;
61216: LD_VAR 0 2
61220: PPUSH
61221: LD_VAR 0 3
61225: PPUSH
61226: LD_INT 10
61228: PPUSH
61229: CALL_OW 237
61233: GO 61213
61235: POP
61236: POP
// end ;
61237: GO 61186
61239: POP
61240: POP
// end ;
61241: LD_VAR 0 1
61245: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61246: LD_INT 0
61248: PPUSH
61249: PPUSH
61250: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61251: LD_ADDR_VAR 0 2
61255: PUSH
61256: LD_INT 22
61258: PUSH
61259: LD_OWVAR 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 21
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PPUSH
61282: CALL_OW 69
61286: PUSH
61287: FOR_IN
61288: IFFALSE 61329
// begin for j := 1 to 4 do
61290: LD_ADDR_VAR 0 3
61294: PUSH
61295: DOUBLE
61296: LD_INT 1
61298: DEC
61299: ST_TO_ADDR
61300: LD_INT 4
61302: PUSH
61303: FOR_TO
61304: IFFALSE 61325
// SetSkill ( i , j , 10 ) ;
61306: LD_VAR 0 2
61310: PPUSH
61311: LD_VAR 0 3
61315: PPUSH
61316: LD_INT 10
61318: PPUSH
61319: CALL_OW 237
61323: GO 61303
61325: POP
61326: POP
// end ;
61327: GO 61287
61329: POP
61330: POP
// end ;
61331: LD_VAR 0 1
61335: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61336: LD_INT 0
61338: PPUSH
// uc_side := your_side ;
61339: LD_ADDR_OWVAR 20
61343: PUSH
61344: LD_OWVAR 2
61348: ST_TO_ADDR
// uc_nation := nation ;
61349: LD_ADDR_OWVAR 21
61353: PUSH
61354: LD_VAR 0 1
61358: ST_TO_ADDR
// InitHc ;
61359: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61363: LD_INT 0
61365: PPUSH
61366: LD_VAR 0 2
61370: PPUSH
61371: LD_VAR 0 3
61375: PPUSH
61376: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61380: LD_VAR 0 4
61384: PPUSH
61385: LD_VAR 0 5
61389: PPUSH
61390: CALL_OW 428
61394: PUSH
61395: LD_INT 0
61397: EQUAL
61398: IFFALSE 61422
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61400: CALL_OW 44
61404: PPUSH
61405: LD_VAR 0 4
61409: PPUSH
61410: LD_VAR 0 5
61414: PPUSH
61415: LD_INT 1
61417: PPUSH
61418: CALL_OW 48
// end ;
61422: LD_VAR 0 6
61426: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61427: LD_INT 0
61429: PPUSH
61430: PPUSH
// uc_side := your_side ;
61431: LD_ADDR_OWVAR 20
61435: PUSH
61436: LD_OWVAR 2
61440: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61441: LD_VAR 0 1
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: LD_INT 3
61454: PUSH
61455: LD_INT 4
61457: PUSH
61458: LD_INT 5
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: IN
61468: IFFALSE 61480
// uc_nation := nation_american else
61470: LD_ADDR_OWVAR 21
61474: PUSH
61475: LD_INT 1
61477: ST_TO_ADDR
61478: GO 61523
// if chassis in [ 11 , 12 , 13 , 14 ] then
61480: LD_VAR 0 1
61484: PUSH
61485: LD_INT 11
61487: PUSH
61488: LD_INT 12
61490: PUSH
61491: LD_INT 13
61493: PUSH
61494: LD_INT 14
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: IN
61503: IFFALSE 61515
// uc_nation := nation_arabian else
61505: LD_ADDR_OWVAR 21
61509: PUSH
61510: LD_INT 2
61512: ST_TO_ADDR
61513: GO 61523
// uc_nation := nation_russian ;
61515: LD_ADDR_OWVAR 21
61519: PUSH
61520: LD_INT 3
61522: ST_TO_ADDR
// vc_chassis := chassis ;
61523: LD_ADDR_OWVAR 37
61527: PUSH
61528: LD_VAR 0 1
61532: ST_TO_ADDR
// vc_engine := engine ;
61533: LD_ADDR_OWVAR 39
61537: PUSH
61538: LD_VAR 0 2
61542: ST_TO_ADDR
// vc_control := control ;
61543: LD_ADDR_OWVAR 38
61547: PUSH
61548: LD_VAR 0 3
61552: ST_TO_ADDR
// vc_weapon := weapon ;
61553: LD_ADDR_OWVAR 40
61557: PUSH
61558: LD_VAR 0 4
61562: ST_TO_ADDR
// un := CreateVehicle ;
61563: LD_ADDR_VAR 0 8
61567: PUSH
61568: CALL_OW 45
61572: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61573: LD_VAR 0 8
61577: PPUSH
61578: LD_INT 0
61580: PPUSH
61581: LD_INT 5
61583: PPUSH
61584: CALL_OW 12
61588: PPUSH
61589: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61593: LD_VAR 0 8
61597: PPUSH
61598: LD_VAR 0 5
61602: PPUSH
61603: LD_VAR 0 6
61607: PPUSH
61608: LD_INT 1
61610: PPUSH
61611: CALL_OW 48
// end ;
61615: LD_VAR 0 7
61619: RET
// export hInvincible ; every 1 do
61620: GO 61622
61622: DISABLE
// hInvincible := [ ] ;
61623: LD_ADDR_EXP 85
61627: PUSH
61628: EMPTY
61629: ST_TO_ADDR
61630: END
// every 10 do var i ;
61631: GO 61633
61633: DISABLE
61634: LD_INT 0
61636: PPUSH
// begin enable ;
61637: ENABLE
// if not hInvincible then
61638: LD_EXP 85
61642: NOT
61643: IFFALSE 61647
// exit ;
61645: GO 61691
// for i in hInvincible do
61647: LD_ADDR_VAR 0 1
61651: PUSH
61652: LD_EXP 85
61656: PUSH
61657: FOR_IN
61658: IFFALSE 61689
// if GetLives ( i ) < 1000 then
61660: LD_VAR 0 1
61664: PPUSH
61665: CALL_OW 256
61669: PUSH
61670: LD_INT 1000
61672: LESS
61673: IFFALSE 61687
// SetLives ( i , 1000 ) ;
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_INT 1000
61682: PPUSH
61683: CALL_OW 234
61687: GO 61657
61689: POP
61690: POP
// end ;
61691: PPOPN 1
61693: END
// export function hHackInvincible ; var i ; begin
61694: LD_INT 0
61696: PPUSH
61697: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61698: LD_ADDR_VAR 0 2
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 21
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 21
61718: PUSH
61719: LD_INT 2
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: PPUSH
61731: CALL_OW 69
61735: PUSH
61736: FOR_IN
61737: IFFALSE 61798
// if IsSelected ( i ) then
61739: LD_VAR 0 2
61743: PPUSH
61744: CALL_OW 306
61748: IFFALSE 61796
// begin if i in hInvincible then
61750: LD_VAR 0 2
61754: PUSH
61755: LD_EXP 85
61759: IN
61760: IFFALSE 61780
// hInvincible := hInvincible diff i else
61762: LD_ADDR_EXP 85
61766: PUSH
61767: LD_EXP 85
61771: PUSH
61772: LD_VAR 0 2
61776: DIFF
61777: ST_TO_ADDR
61778: GO 61796
// hInvincible := hInvincible union i ;
61780: LD_ADDR_EXP 85
61784: PUSH
61785: LD_EXP 85
61789: PUSH
61790: LD_VAR 0 2
61794: UNION
61795: ST_TO_ADDR
// end ;
61796: GO 61736
61798: POP
61799: POP
// end ;
61800: LD_VAR 0 1
61804: RET
// export function hHackInvisible ; var i , j ; begin
61805: LD_INT 0
61807: PPUSH
61808: PPUSH
61809: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61810: LD_ADDR_VAR 0 2
61814: PUSH
61815: LD_INT 21
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PPUSH
61825: CALL_OW 69
61829: PUSH
61830: FOR_IN
61831: IFFALSE 61855
// if IsSelected ( i ) then
61833: LD_VAR 0 2
61837: PPUSH
61838: CALL_OW 306
61842: IFFALSE 61853
// ComForceInvisible ( i ) ;
61844: LD_VAR 0 2
61848: PPUSH
61849: CALL_OW 496
61853: GO 61830
61855: POP
61856: POP
// end ;
61857: LD_VAR 0 1
61861: RET
// export function hHackChangeYourSide ; begin
61862: LD_INT 0
61864: PPUSH
// if your_side = 8 then
61865: LD_OWVAR 2
61869: PUSH
61870: LD_INT 8
61872: EQUAL
61873: IFFALSE 61885
// your_side := 0 else
61875: LD_ADDR_OWVAR 2
61879: PUSH
61880: LD_INT 0
61882: ST_TO_ADDR
61883: GO 61899
// your_side := your_side + 1 ;
61885: LD_ADDR_OWVAR 2
61889: PUSH
61890: LD_OWVAR 2
61894: PUSH
61895: LD_INT 1
61897: PLUS
61898: ST_TO_ADDR
// end ;
61899: LD_VAR 0 1
61903: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61904: LD_INT 0
61906: PPUSH
61907: PPUSH
61908: PPUSH
// for i in all_units do
61909: LD_ADDR_VAR 0 2
61913: PUSH
61914: LD_OWVAR 3
61918: PUSH
61919: FOR_IN
61920: IFFALSE 61998
// if IsSelected ( i ) then
61922: LD_VAR 0 2
61926: PPUSH
61927: CALL_OW 306
61931: IFFALSE 61996
// begin j := GetSide ( i ) ;
61933: LD_ADDR_VAR 0 3
61937: PUSH
61938: LD_VAR 0 2
61942: PPUSH
61943: CALL_OW 255
61947: ST_TO_ADDR
// if j = 8 then
61948: LD_VAR 0 3
61952: PUSH
61953: LD_INT 8
61955: EQUAL
61956: IFFALSE 61968
// j := 0 else
61958: LD_ADDR_VAR 0 3
61962: PUSH
61963: LD_INT 0
61965: ST_TO_ADDR
61966: GO 61982
// j := j + 1 ;
61968: LD_ADDR_VAR 0 3
61972: PUSH
61973: LD_VAR 0 3
61977: PUSH
61978: LD_INT 1
61980: PLUS
61981: ST_TO_ADDR
// SetSide ( i , j ) ;
61982: LD_VAR 0 2
61986: PPUSH
61987: LD_VAR 0 3
61991: PPUSH
61992: CALL_OW 235
// end ;
61996: GO 61919
61998: POP
61999: POP
// end ;
62000: LD_VAR 0 1
62004: RET
// export function hHackFog ; begin
62005: LD_INT 0
62007: PPUSH
// FogOff ( true ) ;
62008: LD_INT 1
62010: PPUSH
62011: CALL_OW 344
// end ;
62015: LD_VAR 0 1
62019: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62020: LD_INT 0
62022: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62023: LD_VAR 0 1
62027: PPUSH
62028: LD_VAR 0 2
62032: PPUSH
62033: LD_VAR 0 3
62037: PPUSH
62038: LD_INT 1
62040: PPUSH
62041: LD_INT 1
62043: PPUSH
62044: CALL_OW 483
// CenterOnXY ( x , y ) ;
62048: LD_VAR 0 2
62052: PPUSH
62053: LD_VAR 0 3
62057: PPUSH
62058: CALL_OW 84
// end ;
62062: LD_VAR 0 4
62066: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62067: LD_INT 0
62069: PPUSH
62070: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62071: LD_VAR 0 1
62075: NOT
62076: PUSH
62077: LD_VAR 0 2
62081: PPUSH
62082: LD_VAR 0 3
62086: PPUSH
62087: CALL_OW 488
62091: NOT
62092: OR
62093: PUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: CALL_OW 266
62103: PUSH
62104: LD_INT 3
62106: NONEQUAL
62107: PUSH
62108: LD_VAR 0 1
62112: PPUSH
62113: CALL_OW 247
62117: PUSH
62118: LD_INT 1
62120: EQUAL
62121: NOT
62122: AND
62123: OR
62124: IFFALSE 62128
// exit ;
62126: GO 62277
// if GetType ( factory ) = unit_human then
62128: LD_VAR 0 1
62132: PPUSH
62133: CALL_OW 247
62137: PUSH
62138: LD_INT 1
62140: EQUAL
62141: IFFALSE 62158
// factory := IsInUnit ( factory ) ;
62143: LD_ADDR_VAR 0 1
62147: PUSH
62148: LD_VAR 0 1
62152: PPUSH
62153: CALL_OW 310
62157: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62158: LD_VAR 0 1
62162: PPUSH
62163: CALL_OW 266
62167: PUSH
62168: LD_INT 3
62170: NONEQUAL
62171: IFFALSE 62175
// exit ;
62173: GO 62277
// if HexInfo ( x , y ) = factory then
62175: LD_VAR 0 2
62179: PPUSH
62180: LD_VAR 0 3
62184: PPUSH
62185: CALL_OW 428
62189: PUSH
62190: LD_VAR 0 1
62194: EQUAL
62195: IFFALSE 62222
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62197: LD_ADDR_EXP 86
62201: PUSH
62202: LD_EXP 86
62206: PPUSH
62207: LD_VAR 0 1
62211: PPUSH
62212: LD_INT 0
62214: PPUSH
62215: CALL_OW 1
62219: ST_TO_ADDR
62220: GO 62273
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62222: LD_ADDR_EXP 86
62226: PUSH
62227: LD_EXP 86
62231: PPUSH
62232: LD_VAR 0 1
62236: PPUSH
62237: LD_VAR 0 1
62241: PPUSH
62242: CALL_OW 255
62246: PUSH
62247: LD_VAR 0 1
62251: PUSH
62252: LD_VAR 0 2
62256: PUSH
62257: LD_VAR 0 3
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: PPUSH
62268: CALL_OW 1
62272: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62273: CALL 62282 0 0
// end ;
62277: LD_VAR 0 4
62281: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62282: LD_INT 0
62284: PPUSH
62285: PPUSH
62286: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62287: LD_STRING resetFactoryWaypoint();
62289: PPUSH
62290: CALL_OW 559
// if factoryWaypoints then
62294: LD_EXP 86
62298: IFFALSE 62424
// begin list := PrepareArray ( factoryWaypoints ) ;
62300: LD_ADDR_VAR 0 3
62304: PUSH
62305: LD_EXP 86
62309: PPUSH
62310: CALL 46178 0 1
62314: ST_TO_ADDR
// for i := 1 to list do
62315: LD_ADDR_VAR 0 2
62319: PUSH
62320: DOUBLE
62321: LD_INT 1
62323: DEC
62324: ST_TO_ADDR
62325: LD_VAR 0 3
62329: PUSH
62330: FOR_TO
62331: IFFALSE 62422
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62333: LD_STRING setFactoryWaypointXY(
62335: PUSH
62336: LD_VAR 0 3
62340: PUSH
62341: LD_VAR 0 2
62345: ARRAY
62346: PUSH
62347: LD_INT 1
62349: ARRAY
62350: STR
62351: PUSH
62352: LD_STRING ,
62354: STR
62355: PUSH
62356: LD_VAR 0 3
62360: PUSH
62361: LD_VAR 0 2
62365: ARRAY
62366: PUSH
62367: LD_INT 2
62369: ARRAY
62370: STR
62371: PUSH
62372: LD_STRING ,
62374: STR
62375: PUSH
62376: LD_VAR 0 3
62380: PUSH
62381: LD_VAR 0 2
62385: ARRAY
62386: PUSH
62387: LD_INT 3
62389: ARRAY
62390: STR
62391: PUSH
62392: LD_STRING ,
62394: STR
62395: PUSH
62396: LD_VAR 0 3
62400: PUSH
62401: LD_VAR 0 2
62405: ARRAY
62406: PUSH
62407: LD_INT 4
62409: ARRAY
62410: STR
62411: PUSH
62412: LD_STRING )
62414: STR
62415: PPUSH
62416: CALL_OW 559
62420: GO 62330
62422: POP
62423: POP
// end ; end ;
62424: LD_VAR 0 1
62428: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62429: LD_INT 0
62431: PPUSH
// if HexInfo ( x , y ) = warehouse then
62432: LD_VAR 0 2
62436: PPUSH
62437: LD_VAR 0 3
62441: PPUSH
62442: CALL_OW 428
62446: PUSH
62447: LD_VAR 0 1
62451: EQUAL
62452: IFFALSE 62479
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62454: LD_ADDR_EXP 87
62458: PUSH
62459: LD_EXP 87
62463: PPUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: LD_INT 0
62471: PPUSH
62472: CALL_OW 1
62476: ST_TO_ADDR
62477: GO 62530
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62479: LD_ADDR_EXP 87
62483: PUSH
62484: LD_EXP 87
62488: PPUSH
62489: LD_VAR 0 1
62493: PPUSH
62494: LD_VAR 0 1
62498: PPUSH
62499: CALL_OW 255
62503: PUSH
62504: LD_VAR 0 1
62508: PUSH
62509: LD_VAR 0 2
62513: PUSH
62514: LD_VAR 0 3
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: PPUSH
62525: CALL_OW 1
62529: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62530: CALL 62539 0 0
// end ;
62534: LD_VAR 0 4
62538: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62539: LD_INT 0
62541: PPUSH
62542: PPUSH
62543: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62544: LD_STRING resetWarehouseGatheringPoints();
62546: PPUSH
62547: CALL_OW 559
// if warehouseGatheringPoints then
62551: LD_EXP 87
62555: IFFALSE 62681
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62557: LD_ADDR_VAR 0 3
62561: PUSH
62562: LD_EXP 87
62566: PPUSH
62567: CALL 46178 0 1
62571: ST_TO_ADDR
// for i := 1 to list do
62572: LD_ADDR_VAR 0 2
62576: PUSH
62577: DOUBLE
62578: LD_INT 1
62580: DEC
62581: ST_TO_ADDR
62582: LD_VAR 0 3
62586: PUSH
62587: FOR_TO
62588: IFFALSE 62679
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62590: LD_STRING setWarehouseGatheringPointXY(
62592: PUSH
62593: LD_VAR 0 3
62597: PUSH
62598: LD_VAR 0 2
62602: ARRAY
62603: PUSH
62604: LD_INT 1
62606: ARRAY
62607: STR
62608: PUSH
62609: LD_STRING ,
62611: STR
62612: PUSH
62613: LD_VAR 0 3
62617: PUSH
62618: LD_VAR 0 2
62622: ARRAY
62623: PUSH
62624: LD_INT 2
62626: ARRAY
62627: STR
62628: PUSH
62629: LD_STRING ,
62631: STR
62632: PUSH
62633: LD_VAR 0 3
62637: PUSH
62638: LD_VAR 0 2
62642: ARRAY
62643: PUSH
62644: LD_INT 3
62646: ARRAY
62647: STR
62648: PUSH
62649: LD_STRING ,
62651: STR
62652: PUSH
62653: LD_VAR 0 3
62657: PUSH
62658: LD_VAR 0 2
62662: ARRAY
62663: PUSH
62664: LD_INT 4
62666: ARRAY
62667: STR
62668: PUSH
62669: LD_STRING )
62671: STR
62672: PPUSH
62673: CALL_OW 559
62677: GO 62587
62679: POP
62680: POP
// end ; end ;
62681: LD_VAR 0 1
62685: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62686: LD_EXP 87
62690: IFFALSE 63375
62692: GO 62694
62694: DISABLE
62695: LD_INT 0
62697: PPUSH
62698: PPUSH
62699: PPUSH
62700: PPUSH
62701: PPUSH
62702: PPUSH
62703: PPUSH
62704: PPUSH
62705: PPUSH
// begin enable ;
62706: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62707: LD_ADDR_VAR 0 3
62711: PUSH
62712: LD_EXP 87
62716: PPUSH
62717: CALL 46178 0 1
62721: ST_TO_ADDR
// if not list then
62722: LD_VAR 0 3
62726: NOT
62727: IFFALSE 62731
// exit ;
62729: GO 63375
// for i := 1 to list do
62731: LD_ADDR_VAR 0 1
62735: PUSH
62736: DOUBLE
62737: LD_INT 1
62739: DEC
62740: ST_TO_ADDR
62741: LD_VAR 0 3
62745: PUSH
62746: FOR_TO
62747: IFFALSE 63373
// begin depot := list [ i ] [ 2 ] ;
62749: LD_ADDR_VAR 0 8
62753: PUSH
62754: LD_VAR 0 3
62758: PUSH
62759: LD_VAR 0 1
62763: ARRAY
62764: PUSH
62765: LD_INT 2
62767: ARRAY
62768: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62769: LD_ADDR_VAR 0 5
62773: PUSH
62774: LD_VAR 0 3
62778: PUSH
62779: LD_VAR 0 1
62783: ARRAY
62784: PUSH
62785: LD_INT 1
62787: ARRAY
62788: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
62789: LD_VAR 0 8
62793: PPUSH
62794: CALL_OW 301
62798: PUSH
62799: LD_VAR 0 5
62803: PUSH
62804: LD_VAR 0 8
62808: PPUSH
62809: CALL_OW 255
62813: NONEQUAL
62814: OR
62815: IFFALSE 62844
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
62817: LD_ADDR_EXP 87
62821: PUSH
62822: LD_EXP 87
62826: PPUSH
62827: LD_VAR 0 8
62831: PPUSH
62832: LD_INT 0
62834: PPUSH
62835: CALL_OW 1
62839: ST_TO_ADDR
// exit ;
62840: POP
62841: POP
62842: GO 63375
// end ; x := list [ i ] [ 3 ] ;
62844: LD_ADDR_VAR 0 6
62848: PUSH
62849: LD_VAR 0 3
62853: PUSH
62854: LD_VAR 0 1
62858: ARRAY
62859: PUSH
62860: LD_INT 3
62862: ARRAY
62863: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
62864: LD_ADDR_VAR 0 7
62868: PUSH
62869: LD_VAR 0 3
62873: PUSH
62874: LD_VAR 0 1
62878: ARRAY
62879: PUSH
62880: LD_INT 4
62882: ARRAY
62883: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
62884: LD_ADDR_VAR 0 9
62888: PUSH
62889: LD_VAR 0 6
62893: PPUSH
62894: LD_VAR 0 7
62898: PPUSH
62899: LD_INT 16
62901: PPUSH
62902: CALL 44766 0 3
62906: ST_TO_ADDR
// if not cratesNearbyPoint then
62907: LD_VAR 0 9
62911: NOT
62912: IFFALSE 62918
// exit ;
62914: POP
62915: POP
62916: GO 63375
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62918: LD_ADDR_VAR 0 4
62922: PUSH
62923: LD_INT 22
62925: PUSH
62926: LD_VAR 0 5
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: LD_INT 60
62940: PUSH
62941: EMPTY
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 91
62950: PUSH
62951: LD_VAR 0 8
62955: PUSH
62956: LD_INT 6
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: LD_INT 25
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 25
62979: PUSH
62980: LD_INT 16
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: PPUSH
62998: CALL_OW 69
63002: PUSH
63003: LD_VAR 0 8
63007: PPUSH
63008: CALL_OW 313
63012: PPUSH
63013: LD_INT 3
63015: PUSH
63016: LD_INT 60
63018: PUSH
63019: EMPTY
63020: LIST
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: LD_INT 25
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 25
63041: PUSH
63042: LD_INT 16
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PPUSH
63058: CALL_OW 72
63062: UNION
63063: ST_TO_ADDR
// if tmp then
63064: LD_VAR 0 4
63068: IFFALSE 63148
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63070: LD_ADDR_VAR 0 4
63074: PUSH
63075: LD_VAR 0 4
63079: PPUSH
63080: LD_INT 3
63082: PPUSH
63083: CALL 42735 0 2
63087: ST_TO_ADDR
// for j in tmp do
63088: LD_ADDR_VAR 0 2
63092: PUSH
63093: LD_VAR 0 4
63097: PUSH
63098: FOR_IN
63099: IFFALSE 63142
// begin if IsInUnit ( j ) then
63101: LD_VAR 0 2
63105: PPUSH
63106: CALL_OW 310
63110: IFFALSE 63121
// ComExit ( j ) ;
63112: LD_VAR 0 2
63116: PPUSH
63117: CALL 42818 0 1
// AddComCollect ( j , x , y ) ;
63121: LD_VAR 0 2
63125: PPUSH
63126: LD_VAR 0 6
63130: PPUSH
63131: LD_VAR 0 7
63135: PPUSH
63136: CALL_OW 177
// end ;
63140: GO 63098
63142: POP
63143: POP
// exit ;
63144: POP
63145: POP
63146: GO 63375
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63148: LD_ADDR_VAR 0 4
63152: PUSH
63153: LD_INT 22
63155: PUSH
63156: LD_VAR 0 5
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 91
63167: PUSH
63168: LD_VAR 0 8
63172: PUSH
63173: LD_INT 8
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 34
63186: PUSH
63187: LD_INT 12
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 34
63196: PUSH
63197: LD_INT 51
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 34
63206: PUSH
63207: LD_INT 32
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 34
63216: PUSH
63217: LD_INT 89
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: PPUSH
63236: CALL_OW 69
63240: ST_TO_ADDR
// if tmp then
63241: LD_VAR 0 4
63245: IFFALSE 63371
// begin for j in tmp do
63247: LD_ADDR_VAR 0 2
63251: PUSH
63252: LD_VAR 0 4
63256: PUSH
63257: FOR_IN
63258: IFFALSE 63369
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63260: LD_VAR 0 2
63264: PPUSH
63265: CALL_OW 262
63269: PUSH
63270: LD_INT 3
63272: EQUAL
63273: PUSH
63274: LD_VAR 0 2
63278: PPUSH
63279: CALL_OW 261
63283: PUSH
63284: LD_INT 20
63286: GREATER
63287: OR
63288: PUSH
63289: LD_VAR 0 2
63293: PPUSH
63294: CALL_OW 314
63298: NOT
63299: AND
63300: PUSH
63301: LD_VAR 0 2
63305: PPUSH
63306: CALL_OW 263
63310: PUSH
63311: LD_INT 1
63313: NONEQUAL
63314: PUSH
63315: LD_VAR 0 2
63319: PPUSH
63320: CALL_OW 311
63324: OR
63325: AND
63326: IFFALSE 63367
// begin ComCollect ( j , x , y ) ;
63328: LD_VAR 0 2
63332: PPUSH
63333: LD_VAR 0 6
63337: PPUSH
63338: LD_VAR 0 7
63342: PPUSH
63343: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63347: LD_VAR 0 2
63351: PPUSH
63352: LD_VAR 0 8
63356: PPUSH
63357: CALL_OW 172
// exit ;
63361: POP
63362: POP
63363: POP
63364: POP
63365: GO 63375
// end ;
63367: GO 63257
63369: POP
63370: POP
// end ; end ;
63371: GO 62746
63373: POP
63374: POP
// end ; end_of_file
63375: PPOPN 9
63377: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63378: LD_VAR 0 1
63382: PUSH
63383: LD_INT 200
63385: DOUBLE
63386: GREATEREQUAL
63387: IFFALSE 63395
63389: LD_INT 299
63391: DOUBLE
63392: LESSEQUAL
63393: IFTRUE 63397
63395: GO 63429
63397: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63398: LD_VAR 0 1
63402: PPUSH
63403: LD_VAR 0 2
63407: PPUSH
63408: LD_VAR 0 3
63412: PPUSH
63413: LD_VAR 0 4
63417: PPUSH
63418: LD_VAR 0 5
63422: PPUSH
63423: CALL 63917 0 5
63427: GO 63506
63429: LD_INT 300
63431: DOUBLE
63432: GREATEREQUAL
63433: IFFALSE 63441
63435: LD_INT 399
63437: DOUBLE
63438: LESSEQUAL
63439: IFTRUE 63443
63441: GO 63505
63443: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63444: LD_VAR 0 1
63448: PPUSH
63449: LD_VAR 0 2
63453: PPUSH
63454: LD_VAR 0 3
63458: PPUSH
63459: LD_VAR 0 4
63463: PPUSH
63464: LD_VAR 0 5
63468: PPUSH
63469: LD_VAR 0 6
63473: PPUSH
63474: LD_VAR 0 7
63478: PPUSH
63479: LD_VAR 0 8
63483: PPUSH
63484: LD_VAR 0 9
63488: PPUSH
63489: LD_VAR 0 10
63493: PPUSH
63494: LD_VAR 0 11
63498: PPUSH
63499: CALL 60079 0 11
63503: GO 63506
63505: POP
// end ;
63506: PPOPN 11
63508: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63509: LD_VAR 0 1
63513: PPUSH
63514: LD_VAR 0 2
63518: PPUSH
63519: LD_VAR 0 3
63523: PPUSH
63524: LD_VAR 0 4
63528: PPUSH
63529: LD_VAR 0 5
63533: PPUSH
63534: CALL 63653 0 5
// end ; end_of_file
63538: PPOPN 5
63540: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63541: LD_INT 0
63543: PPUSH
63544: PPUSH
63545: PPUSH
63546: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63547: LD_VAR 0 1
63551: PPUSH
63552: CALL_OW 264
63556: PUSH
63557: LD_INT 91
63559: EQUAL
63560: IFFALSE 63632
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63562: LD_INT 68
63564: PPUSH
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL_OW 255
63574: PPUSH
63575: CALL_OW 321
63579: PUSH
63580: LD_INT 2
63582: EQUAL
63583: IFFALSE 63595
// eff := 70 else
63585: LD_ADDR_VAR 0 4
63589: PUSH
63590: LD_INT 70
63592: ST_TO_ADDR
63593: GO 63603
// eff := 30 ;
63595: LD_ADDR_VAR 0 4
63599: PUSH
63600: LD_INT 30
63602: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63603: LD_VAR 0 1
63607: PPUSH
63608: CALL_OW 250
63612: PPUSH
63613: LD_VAR 0 1
63617: PPUSH
63618: CALL_OW 251
63622: PPUSH
63623: LD_VAR 0 4
63627: PPUSH
63628: CALL_OW 495
// end ; end ;
63632: LD_VAR 0 2
63636: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63637: LD_INT 0
63639: PPUSH
// end ;
63640: LD_VAR 0 4
63644: RET
// export function SOS_Command ( cmd ) ; begin
63645: LD_INT 0
63647: PPUSH
// end ;
63648: LD_VAR 0 2
63652: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63653: LD_INT 0
63655: PPUSH
// end ;
63656: LD_VAR 0 6
63660: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
63661: LD_INT 0
63663: PPUSH
63664: PPUSH
// if not vehicle or not factory then
63665: LD_VAR 0 1
63669: NOT
63670: PUSH
63671: LD_VAR 0 2
63675: NOT
63676: OR
63677: IFFALSE 63681
// exit ;
63679: GO 63912
// if factoryWaypoints >= factory then
63681: LD_EXP 86
63685: PUSH
63686: LD_VAR 0 2
63690: GREATEREQUAL
63691: IFFALSE 63912
// if factoryWaypoints [ factory ] then
63693: LD_EXP 86
63697: PUSH
63698: LD_VAR 0 2
63702: ARRAY
63703: IFFALSE 63912
// begin if GetControl ( vehicle ) = control_manual then
63705: LD_VAR 0 1
63709: PPUSH
63710: CALL_OW 263
63714: PUSH
63715: LD_INT 1
63717: EQUAL
63718: IFFALSE 63799
// begin driver := IsDrivenBy ( vehicle ) ;
63720: LD_ADDR_VAR 0 4
63724: PUSH
63725: LD_VAR 0 1
63729: PPUSH
63730: CALL_OW 311
63734: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63735: LD_VAR 0 4
63739: PPUSH
63740: LD_EXP 86
63744: PUSH
63745: LD_VAR 0 2
63749: ARRAY
63750: PUSH
63751: LD_INT 3
63753: ARRAY
63754: PPUSH
63755: LD_EXP 86
63759: PUSH
63760: LD_VAR 0 2
63764: ARRAY
63765: PUSH
63766: LD_INT 4
63768: ARRAY
63769: PPUSH
63770: CALL_OW 171
// AddComExitVehicle ( driver ) ;
63774: LD_VAR 0 4
63778: PPUSH
63779: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
63783: LD_VAR 0 4
63787: PPUSH
63788: LD_VAR 0 2
63792: PPUSH
63793: CALL_OW 180
// end else
63797: GO 63912
// if GetControl ( vehicle ) = control_remote then
63799: LD_VAR 0 1
63803: PPUSH
63804: CALL_OW 263
63808: PUSH
63809: LD_INT 2
63811: EQUAL
63812: IFFALSE 63873
// begin wait ( 0 0$2 ) ;
63814: LD_INT 70
63816: PPUSH
63817: CALL_OW 67
// if Connect ( vehicle ) then
63821: LD_VAR 0 1
63825: PPUSH
63826: CALL 13037 0 1
63830: IFFALSE 63871
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63832: LD_VAR 0 1
63836: PPUSH
63837: LD_EXP 86
63841: PUSH
63842: LD_VAR 0 2
63846: ARRAY
63847: PUSH
63848: LD_INT 3
63850: ARRAY
63851: PPUSH
63852: LD_EXP 86
63856: PUSH
63857: LD_VAR 0 2
63861: ARRAY
63862: PUSH
63863: LD_INT 4
63865: ARRAY
63866: PPUSH
63867: CALL_OW 171
// end else
63871: GO 63912
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63873: LD_VAR 0 1
63877: PPUSH
63878: LD_EXP 86
63882: PUSH
63883: LD_VAR 0 2
63887: ARRAY
63888: PUSH
63889: LD_INT 3
63891: ARRAY
63892: PPUSH
63893: LD_EXP 86
63897: PUSH
63898: LD_VAR 0 2
63902: ARRAY
63903: PUSH
63904: LD_INT 4
63906: ARRAY
63907: PPUSH
63908: CALL_OW 171
// end ; end ;
63912: LD_VAR 0 3
63916: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63917: LD_INT 0
63919: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63920: LD_VAR 0 1
63924: PUSH
63925: LD_INT 250
63927: EQUAL
63928: PUSH
63929: LD_VAR 0 2
63933: PPUSH
63934: CALL_OW 264
63938: PUSH
63939: LD_INT 81
63941: EQUAL
63942: AND
63943: IFFALSE 63964
// MinerPlaceMine ( unit , x , y ) ;
63945: LD_VAR 0 2
63949: PPUSH
63950: LD_VAR 0 4
63954: PPUSH
63955: LD_VAR 0 5
63959: PPUSH
63960: CALL 66954 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
63964: LD_VAR 0 1
63968: PUSH
63969: LD_INT 251
63971: EQUAL
63972: PUSH
63973: LD_VAR 0 2
63977: PPUSH
63978: CALL_OW 264
63982: PUSH
63983: LD_INT 81
63985: EQUAL
63986: AND
63987: IFFALSE 64008
// MinerDetonateMine ( unit , x , y ) ;
63989: LD_VAR 0 2
63993: PPUSH
63994: LD_VAR 0 4
63998: PPUSH
63999: LD_VAR 0 5
64003: PPUSH
64004: CALL 67229 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64008: LD_VAR 0 1
64012: PUSH
64013: LD_INT 252
64015: EQUAL
64016: PUSH
64017: LD_VAR 0 2
64021: PPUSH
64022: CALL_OW 264
64026: PUSH
64027: LD_INT 81
64029: EQUAL
64030: AND
64031: IFFALSE 64052
// MinerCreateMinefield ( unit , x , y ) ;
64033: LD_VAR 0 2
64037: PPUSH
64038: LD_VAR 0 4
64042: PPUSH
64043: LD_VAR 0 5
64047: PPUSH
64048: CALL 67646 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64052: LD_VAR 0 1
64056: PUSH
64057: LD_INT 253
64059: EQUAL
64060: PUSH
64061: LD_VAR 0 2
64065: PPUSH
64066: CALL_OW 257
64070: PUSH
64071: LD_INT 5
64073: EQUAL
64074: AND
64075: IFFALSE 64096
// ComBinocular ( unit , x , y ) ;
64077: LD_VAR 0 2
64081: PPUSH
64082: LD_VAR 0 4
64086: PPUSH
64087: LD_VAR 0 5
64091: PPUSH
64092: CALL 68015 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64096: LD_VAR 0 1
64100: PUSH
64101: LD_INT 254
64103: EQUAL
64104: PUSH
64105: LD_VAR 0 2
64109: PPUSH
64110: CALL_OW 264
64114: PUSH
64115: LD_INT 99
64117: EQUAL
64118: AND
64119: PUSH
64120: LD_VAR 0 3
64124: PPUSH
64125: CALL_OW 263
64129: PUSH
64130: LD_INT 3
64132: EQUAL
64133: AND
64134: IFFALSE 64150
// HackDestroyVehicle ( unit , selectedUnit ) ;
64136: LD_VAR 0 2
64140: PPUSH
64141: LD_VAR 0 3
64145: PPUSH
64146: CALL 66318 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64150: LD_VAR 0 1
64154: PUSH
64155: LD_INT 255
64157: EQUAL
64158: PUSH
64159: LD_VAR 0 2
64163: PPUSH
64164: CALL_OW 264
64168: PUSH
64169: LD_INT 14
64171: PUSH
64172: LD_INT 53
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: IN
64179: AND
64180: PUSH
64181: LD_VAR 0 4
64185: PPUSH
64186: LD_VAR 0 5
64190: PPUSH
64191: CALL_OW 488
64195: AND
64196: IFFALSE 64220
// CutTreeXYR ( unit , x , y , 12 ) ;
64198: LD_VAR 0 2
64202: PPUSH
64203: LD_VAR 0 4
64207: PPUSH
64208: LD_VAR 0 5
64212: PPUSH
64213: LD_INT 12
64215: PPUSH
64216: CALL 64315 0 4
// if cmd = 256 then
64220: LD_VAR 0 1
64224: PUSH
64225: LD_INT 256
64227: EQUAL
64228: IFFALSE 64249
// SetFactoryWaypoint ( unit , x , y ) ;
64230: LD_VAR 0 2
64234: PPUSH
64235: LD_VAR 0 4
64239: PPUSH
64240: LD_VAR 0 5
64244: PPUSH
64245: CALL 62067 0 3
// if cmd = 257 then
64249: LD_VAR 0 1
64253: PUSH
64254: LD_INT 257
64256: EQUAL
64257: IFFALSE 64278
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64259: LD_VAR 0 2
64263: PPUSH
64264: LD_VAR 0 4
64268: PPUSH
64269: LD_VAR 0 5
64273: PPUSH
64274: CALL 62429 0 3
// if cmd = 258 then
64278: LD_VAR 0 1
64282: PUSH
64283: LD_INT 258
64285: EQUAL
64286: IFFALSE 64310
// BurnTreeXYR ( unit , x , y , 8 ) ;
64288: LD_VAR 0 2
64292: PPUSH
64293: LD_VAR 0 4
64297: PPUSH
64298: LD_VAR 0 5
64302: PPUSH
64303: LD_INT 8
64305: PPUSH
64306: CALL 64709 0 4
// end ;
64310: LD_VAR 0 6
64314: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64315: LD_INT 0
64317: PPUSH
64318: PPUSH
64319: PPUSH
64320: PPUSH
64321: PPUSH
64322: PPUSH
64323: PPUSH
64324: PPUSH
64325: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
64326: LD_VAR 0 1
64330: PPUSH
64331: CALL_OW 302
64335: NOT
64336: PUSH
64337: LD_VAR 0 2
64341: PPUSH
64342: LD_VAR 0 3
64346: PPUSH
64347: CALL_OW 488
64351: NOT
64352: OR
64353: PUSH
64354: LD_VAR 0 4
64358: NOT
64359: OR
64360: IFFALSE 64364
// exit ;
64362: GO 64704
// list := [ ] ;
64364: LD_ADDR_VAR 0 13
64368: PUSH
64369: EMPTY
64370: ST_TO_ADDR
// if x - r < 0 then
64371: LD_VAR 0 2
64375: PUSH
64376: LD_VAR 0 4
64380: MINUS
64381: PUSH
64382: LD_INT 0
64384: LESS
64385: IFFALSE 64397
// min_x := 0 else
64387: LD_ADDR_VAR 0 7
64391: PUSH
64392: LD_INT 0
64394: ST_TO_ADDR
64395: GO 64413
// min_x := x - r ;
64397: LD_ADDR_VAR 0 7
64401: PUSH
64402: LD_VAR 0 2
64406: PUSH
64407: LD_VAR 0 4
64411: MINUS
64412: ST_TO_ADDR
// if y - r < 0 then
64413: LD_VAR 0 3
64417: PUSH
64418: LD_VAR 0 4
64422: MINUS
64423: PUSH
64424: LD_INT 0
64426: LESS
64427: IFFALSE 64439
// min_y := 0 else
64429: LD_ADDR_VAR 0 8
64433: PUSH
64434: LD_INT 0
64436: ST_TO_ADDR
64437: GO 64455
// min_y := y - r ;
64439: LD_ADDR_VAR 0 8
64443: PUSH
64444: LD_VAR 0 3
64448: PUSH
64449: LD_VAR 0 4
64453: MINUS
64454: ST_TO_ADDR
// max_x := x + r ;
64455: LD_ADDR_VAR 0 9
64459: PUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_VAR 0 4
64469: PLUS
64470: ST_TO_ADDR
// max_y := y + r ;
64471: LD_ADDR_VAR 0 10
64475: PUSH
64476: LD_VAR 0 3
64480: PUSH
64481: LD_VAR 0 4
64485: PLUS
64486: ST_TO_ADDR
// for _x = min_x to max_x do
64487: LD_ADDR_VAR 0 11
64491: PUSH
64492: DOUBLE
64493: LD_VAR 0 7
64497: DEC
64498: ST_TO_ADDR
64499: LD_VAR 0 9
64503: PUSH
64504: FOR_TO
64505: IFFALSE 64622
// for _y = min_y to max_y do
64507: LD_ADDR_VAR 0 12
64511: PUSH
64512: DOUBLE
64513: LD_VAR 0 8
64517: DEC
64518: ST_TO_ADDR
64519: LD_VAR 0 10
64523: PUSH
64524: FOR_TO
64525: IFFALSE 64618
// begin if not ValidHex ( _x , _y ) then
64527: LD_VAR 0 11
64531: PPUSH
64532: LD_VAR 0 12
64536: PPUSH
64537: CALL_OW 488
64541: NOT
64542: IFFALSE 64546
// continue ;
64544: GO 64524
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64546: LD_VAR 0 11
64550: PPUSH
64551: LD_VAR 0 12
64555: PPUSH
64556: CALL_OW 351
64560: PUSH
64561: LD_VAR 0 11
64565: PPUSH
64566: LD_VAR 0 12
64570: PPUSH
64571: CALL_OW 554
64575: AND
64576: IFFALSE 64616
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64578: LD_ADDR_VAR 0 13
64582: PUSH
64583: LD_VAR 0 13
64587: PPUSH
64588: LD_VAR 0 13
64592: PUSH
64593: LD_INT 1
64595: PLUS
64596: PPUSH
64597: LD_VAR 0 11
64601: PUSH
64602: LD_VAR 0 12
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PPUSH
64611: CALL_OW 2
64615: ST_TO_ADDR
// end ;
64616: GO 64524
64618: POP
64619: POP
64620: GO 64504
64622: POP
64623: POP
// if not list then
64624: LD_VAR 0 13
64628: NOT
64629: IFFALSE 64633
// exit ;
64631: GO 64704
// for i in list do
64633: LD_ADDR_VAR 0 6
64637: PUSH
64638: LD_VAR 0 13
64642: PUSH
64643: FOR_IN
64644: IFFALSE 64702
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64646: LD_VAR 0 1
64650: PPUSH
64651: LD_STRING M
64653: PUSH
64654: LD_VAR 0 6
64658: PUSH
64659: LD_INT 1
64661: ARRAY
64662: PUSH
64663: LD_VAR 0 6
64667: PUSH
64668: LD_INT 2
64670: ARRAY
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: PUSH
64693: EMPTY
64694: LIST
64695: PPUSH
64696: CALL_OW 447
64700: GO 64643
64702: POP
64703: POP
// end ;
64704: LD_VAR 0 5
64708: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
64709: LD_INT 0
64711: PPUSH
64712: PPUSH
64713: PPUSH
64714: PPUSH
64715: PPUSH
64716: PPUSH
64717: PPUSH
64718: PPUSH
64719: PPUSH
64720: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
64721: LD_VAR 0 1
64725: PPUSH
64726: CALL_OW 302
64730: NOT
64731: PUSH
64732: LD_VAR 0 2
64736: PPUSH
64737: LD_VAR 0 3
64741: PPUSH
64742: CALL_OW 488
64746: NOT
64747: OR
64748: PUSH
64749: LD_VAR 0 4
64753: NOT
64754: OR
64755: IFFALSE 64759
// exit ;
64757: GO 65272
// list := [ ] ;
64759: LD_ADDR_VAR 0 13
64763: PUSH
64764: EMPTY
64765: ST_TO_ADDR
// if x - r < 0 then
64766: LD_VAR 0 2
64770: PUSH
64771: LD_VAR 0 4
64775: MINUS
64776: PUSH
64777: LD_INT 0
64779: LESS
64780: IFFALSE 64792
// min_x := 0 else
64782: LD_ADDR_VAR 0 7
64786: PUSH
64787: LD_INT 0
64789: ST_TO_ADDR
64790: GO 64808
// min_x := x - r ;
64792: LD_ADDR_VAR 0 7
64796: PUSH
64797: LD_VAR 0 2
64801: PUSH
64802: LD_VAR 0 4
64806: MINUS
64807: ST_TO_ADDR
// if y - r < 0 then
64808: LD_VAR 0 3
64812: PUSH
64813: LD_VAR 0 4
64817: MINUS
64818: PUSH
64819: LD_INT 0
64821: LESS
64822: IFFALSE 64834
// min_y := 0 else
64824: LD_ADDR_VAR 0 8
64828: PUSH
64829: LD_INT 0
64831: ST_TO_ADDR
64832: GO 64850
// min_y := y - r ;
64834: LD_ADDR_VAR 0 8
64838: PUSH
64839: LD_VAR 0 3
64843: PUSH
64844: LD_VAR 0 4
64848: MINUS
64849: ST_TO_ADDR
// max_x := x + r ;
64850: LD_ADDR_VAR 0 9
64854: PUSH
64855: LD_VAR 0 2
64859: PUSH
64860: LD_VAR 0 4
64864: PLUS
64865: ST_TO_ADDR
// max_y := y + r ;
64866: LD_ADDR_VAR 0 10
64870: PUSH
64871: LD_VAR 0 3
64875: PUSH
64876: LD_VAR 0 4
64880: PLUS
64881: ST_TO_ADDR
// for _x = min_x to max_x do
64882: LD_ADDR_VAR 0 11
64886: PUSH
64887: DOUBLE
64888: LD_VAR 0 7
64892: DEC
64893: ST_TO_ADDR
64894: LD_VAR 0 9
64898: PUSH
64899: FOR_TO
64900: IFFALSE 65017
// for _y = min_y to max_y do
64902: LD_ADDR_VAR 0 12
64906: PUSH
64907: DOUBLE
64908: LD_VAR 0 8
64912: DEC
64913: ST_TO_ADDR
64914: LD_VAR 0 10
64918: PUSH
64919: FOR_TO
64920: IFFALSE 65013
// begin if not ValidHex ( _x , _y ) then
64922: LD_VAR 0 11
64926: PPUSH
64927: LD_VAR 0 12
64931: PPUSH
64932: CALL_OW 488
64936: NOT
64937: IFFALSE 64941
// continue ;
64939: GO 64919
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64941: LD_VAR 0 11
64945: PPUSH
64946: LD_VAR 0 12
64950: PPUSH
64951: CALL_OW 351
64955: PUSH
64956: LD_VAR 0 11
64960: PPUSH
64961: LD_VAR 0 12
64965: PPUSH
64966: CALL_OW 554
64970: AND
64971: IFFALSE 65011
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64973: LD_ADDR_VAR 0 13
64977: PUSH
64978: LD_VAR 0 13
64982: PPUSH
64983: LD_VAR 0 13
64987: PUSH
64988: LD_INT 1
64990: PLUS
64991: PPUSH
64992: LD_VAR 0 11
64996: PUSH
64997: LD_VAR 0 12
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PPUSH
65006: CALL_OW 2
65010: ST_TO_ADDR
// end ;
65011: GO 64919
65013: POP
65014: POP
65015: GO 64899
65017: POP
65018: POP
// if not list then
65019: LD_VAR 0 13
65023: NOT
65024: IFFALSE 65028
// exit ;
65026: GO 65272
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
65028: LD_ADDR_VAR 0 13
65032: PUSH
65033: LD_VAR 0 1
65037: PPUSH
65038: LD_VAR 0 13
65042: PPUSH
65043: LD_INT 1
65045: PPUSH
65046: LD_INT 1
65048: PPUSH
65049: CALL 10179 0 4
65053: ST_TO_ADDR
// ComStop ( flame ) ;
65054: LD_VAR 0 1
65058: PPUSH
65059: CALL_OW 141
// for i in list do
65063: LD_ADDR_VAR 0 6
65067: PUSH
65068: LD_VAR 0 13
65072: PUSH
65073: FOR_IN
65074: IFFALSE 65105
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
65076: LD_VAR 0 1
65080: PPUSH
65081: LD_VAR 0 6
65085: PUSH
65086: LD_INT 1
65088: ARRAY
65089: PPUSH
65090: LD_VAR 0 6
65094: PUSH
65095: LD_INT 2
65097: ARRAY
65098: PPUSH
65099: CALL_OW 176
65103: GO 65073
65105: POP
65106: POP
// repeat wait ( 0 0$1 ) ;
65107: LD_INT 35
65109: PPUSH
65110: CALL_OW 67
// task := GetTaskList ( flame ) ;
65114: LD_ADDR_VAR 0 14
65118: PUSH
65119: LD_VAR 0 1
65123: PPUSH
65124: CALL_OW 437
65128: ST_TO_ADDR
// if not task then
65129: LD_VAR 0 14
65133: NOT
65134: IFFALSE 65138
// exit ;
65136: GO 65272
// if task [ 1 ] [ 1 ] <> | then
65138: LD_VAR 0 14
65142: PUSH
65143: LD_INT 1
65145: ARRAY
65146: PUSH
65147: LD_INT 1
65149: ARRAY
65150: PUSH
65151: LD_STRING |
65153: NONEQUAL
65154: IFFALSE 65158
// exit ;
65156: GO 65272
// _x := task [ 1 ] [ 2 ] ;
65158: LD_ADDR_VAR 0 11
65162: PUSH
65163: LD_VAR 0 14
65167: PUSH
65168: LD_INT 1
65170: ARRAY
65171: PUSH
65172: LD_INT 2
65174: ARRAY
65175: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
65176: LD_ADDR_VAR 0 12
65180: PUSH
65181: LD_VAR 0 14
65185: PUSH
65186: LD_INT 1
65188: ARRAY
65189: PUSH
65190: LD_INT 3
65192: ARRAY
65193: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
65194: LD_VAR 0 11
65198: PPUSH
65199: LD_VAR 0 12
65203: PPUSH
65204: CALL_OW 351
65208: NOT
65209: PUSH
65210: LD_VAR 0 11
65214: PPUSH
65215: LD_VAR 0 12
65219: PPUSH
65220: CALL_OW 554
65224: NOT
65225: OR
65226: IFFALSE 65260
// begin task := Delete ( task , 1 ) ;
65228: LD_ADDR_VAR 0 14
65232: PUSH
65233: LD_VAR 0 14
65237: PPUSH
65238: LD_INT 1
65240: PPUSH
65241: CALL_OW 3
65245: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
65246: LD_VAR 0 1
65250: PPUSH
65251: LD_VAR 0 14
65255: PPUSH
65256: CALL_OW 446
// end ; until not HasTask ( flame ) ;
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL_OW 314
65269: NOT
65270: IFFALSE 65107
// end ;
65272: LD_VAR 0 5
65276: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65277: LD_EXP 89
65281: NOT
65282: IFFALSE 65332
65284: GO 65286
65286: DISABLE
// begin initHack := true ;
65287: LD_ADDR_EXP 89
65291: PUSH
65292: LD_INT 1
65294: ST_TO_ADDR
// hackTanks := [ ] ;
65295: LD_ADDR_EXP 90
65299: PUSH
65300: EMPTY
65301: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65302: LD_ADDR_EXP 91
65306: PUSH
65307: EMPTY
65308: ST_TO_ADDR
// hackLimit := 3 ;
65309: LD_ADDR_EXP 92
65313: PUSH
65314: LD_INT 3
65316: ST_TO_ADDR
// hackDist := 12 ;
65317: LD_ADDR_EXP 93
65321: PUSH
65322: LD_INT 12
65324: ST_TO_ADDR
// hackCounter := [ ] ;
65325: LD_ADDR_EXP 94
65329: PUSH
65330: EMPTY
65331: ST_TO_ADDR
// end ;
65332: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65333: LD_EXP 89
65337: PUSH
65338: LD_INT 34
65340: PUSH
65341: LD_INT 99
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PPUSH
65348: CALL_OW 69
65352: AND
65353: IFFALSE 65606
65355: GO 65357
65357: DISABLE
65358: LD_INT 0
65360: PPUSH
65361: PPUSH
// begin enable ;
65362: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65363: LD_ADDR_VAR 0 1
65367: PUSH
65368: LD_INT 34
65370: PUSH
65371: LD_INT 99
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PPUSH
65378: CALL_OW 69
65382: PUSH
65383: FOR_IN
65384: IFFALSE 65604
// begin if not i in hackTanks then
65386: LD_VAR 0 1
65390: PUSH
65391: LD_EXP 90
65395: IN
65396: NOT
65397: IFFALSE 65480
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65399: LD_ADDR_EXP 90
65403: PUSH
65404: LD_EXP 90
65408: PPUSH
65409: LD_EXP 90
65413: PUSH
65414: LD_INT 1
65416: PLUS
65417: PPUSH
65418: LD_VAR 0 1
65422: PPUSH
65423: CALL_OW 1
65427: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65428: LD_ADDR_EXP 91
65432: PUSH
65433: LD_EXP 91
65437: PPUSH
65438: LD_EXP 91
65442: PUSH
65443: LD_INT 1
65445: PLUS
65446: PPUSH
65447: EMPTY
65448: PPUSH
65449: CALL_OW 1
65453: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65454: LD_ADDR_EXP 94
65458: PUSH
65459: LD_EXP 94
65463: PPUSH
65464: LD_EXP 94
65468: PUSH
65469: LD_INT 1
65471: PLUS
65472: PPUSH
65473: EMPTY
65474: PPUSH
65475: CALL_OW 1
65479: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65480: LD_VAR 0 1
65484: PPUSH
65485: CALL_OW 302
65489: NOT
65490: IFFALSE 65503
// begin HackUnlinkAll ( i ) ;
65492: LD_VAR 0 1
65496: PPUSH
65497: CALL 65609 0 1
// continue ;
65501: GO 65383
// end ; HackCheckCapturedStatus ( i ) ;
65503: LD_VAR 0 1
65507: PPUSH
65508: CALL 66052 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65512: LD_ADDR_VAR 0 2
65516: PUSH
65517: LD_INT 81
65519: PUSH
65520: LD_VAR 0 1
65524: PPUSH
65525: CALL_OW 255
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 33
65536: PUSH
65537: LD_INT 3
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 91
65546: PUSH
65547: LD_VAR 0 1
65551: PUSH
65552: LD_EXP 93
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 50
65564: PUSH
65565: EMPTY
65566: LIST
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: PPUSH
65574: CALL_OW 69
65578: ST_TO_ADDR
// if not tmp then
65579: LD_VAR 0 2
65583: NOT
65584: IFFALSE 65588
// continue ;
65586: GO 65383
// HackLink ( i , tmp ) ;
65588: LD_VAR 0 1
65592: PPUSH
65593: LD_VAR 0 2
65597: PPUSH
65598: CALL 65745 0 2
// end ;
65602: GO 65383
65604: POP
65605: POP
// end ;
65606: PPOPN 2
65608: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65609: LD_INT 0
65611: PPUSH
65612: PPUSH
65613: PPUSH
// if not hack in hackTanks then
65614: LD_VAR 0 1
65618: PUSH
65619: LD_EXP 90
65623: IN
65624: NOT
65625: IFFALSE 65629
// exit ;
65627: GO 65740
// index := GetElementIndex ( hackTanks , hack ) ;
65629: LD_ADDR_VAR 0 4
65633: PUSH
65634: LD_EXP 90
65638: PPUSH
65639: LD_VAR 0 1
65643: PPUSH
65644: CALL 9476 0 2
65648: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65649: LD_EXP 91
65653: PUSH
65654: LD_VAR 0 4
65658: ARRAY
65659: IFFALSE 65740
// begin for i in hackTanksCaptured [ index ] do
65661: LD_ADDR_VAR 0 3
65665: PUSH
65666: LD_EXP 91
65670: PUSH
65671: LD_VAR 0 4
65675: ARRAY
65676: PUSH
65677: FOR_IN
65678: IFFALSE 65704
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65680: LD_VAR 0 3
65684: PUSH
65685: LD_INT 1
65687: ARRAY
65688: PPUSH
65689: LD_VAR 0 3
65693: PUSH
65694: LD_INT 2
65696: ARRAY
65697: PPUSH
65698: CALL_OW 235
65702: GO 65677
65704: POP
65705: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65706: LD_ADDR_EXP 91
65710: PUSH
65711: LD_EXP 91
65715: PPUSH
65716: LD_VAR 0 4
65720: PPUSH
65721: EMPTY
65722: PPUSH
65723: CALL_OW 1
65727: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65728: LD_VAR 0 1
65732: PPUSH
65733: LD_INT 0
65735: PPUSH
65736: CALL_OW 505
// end ; end ;
65740: LD_VAR 0 2
65744: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65745: LD_INT 0
65747: PPUSH
65748: PPUSH
65749: PPUSH
// if not hack in hackTanks or not vehicles then
65750: LD_VAR 0 1
65754: PUSH
65755: LD_EXP 90
65759: IN
65760: NOT
65761: PUSH
65762: LD_VAR 0 2
65766: NOT
65767: OR
65768: IFFALSE 65772
// exit ;
65770: GO 66047
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65772: LD_ADDR_VAR 0 2
65776: PUSH
65777: LD_VAR 0 1
65781: PPUSH
65782: LD_VAR 0 2
65786: PPUSH
65787: LD_INT 1
65789: PPUSH
65790: LD_INT 1
65792: PPUSH
65793: CALL 10126 0 4
65797: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65798: LD_ADDR_VAR 0 5
65802: PUSH
65803: LD_EXP 90
65807: PPUSH
65808: LD_VAR 0 1
65812: PPUSH
65813: CALL 9476 0 2
65817: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65818: LD_EXP 91
65822: PUSH
65823: LD_VAR 0 5
65827: ARRAY
65828: PUSH
65829: LD_EXP 92
65833: LESS
65834: IFFALSE 66023
// begin for i := 1 to vehicles do
65836: LD_ADDR_VAR 0 4
65840: PUSH
65841: DOUBLE
65842: LD_INT 1
65844: DEC
65845: ST_TO_ADDR
65846: LD_VAR 0 2
65850: PUSH
65851: FOR_TO
65852: IFFALSE 66021
// begin if hackTanksCaptured [ index ] = hackLimit then
65854: LD_EXP 91
65858: PUSH
65859: LD_VAR 0 5
65863: ARRAY
65864: PUSH
65865: LD_EXP 92
65869: EQUAL
65870: IFFALSE 65874
// break ;
65872: GO 66021
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65874: LD_ADDR_EXP 94
65878: PUSH
65879: LD_EXP 94
65883: PPUSH
65884: LD_VAR 0 5
65888: PPUSH
65889: LD_EXP 94
65893: PUSH
65894: LD_VAR 0 5
65898: ARRAY
65899: PUSH
65900: LD_INT 1
65902: PLUS
65903: PPUSH
65904: CALL_OW 1
65908: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65909: LD_ADDR_EXP 91
65913: PUSH
65914: LD_EXP 91
65918: PPUSH
65919: LD_VAR 0 5
65923: PUSH
65924: LD_EXP 91
65928: PUSH
65929: LD_VAR 0 5
65933: ARRAY
65934: PUSH
65935: LD_INT 1
65937: PLUS
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PPUSH
65943: LD_VAR 0 2
65947: PUSH
65948: LD_VAR 0 4
65952: ARRAY
65953: PUSH
65954: LD_VAR 0 2
65958: PUSH
65959: LD_VAR 0 4
65963: ARRAY
65964: PPUSH
65965: CALL_OW 255
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PPUSH
65974: CALL 9691 0 3
65978: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65979: LD_VAR 0 2
65983: PUSH
65984: LD_VAR 0 4
65988: ARRAY
65989: PPUSH
65990: LD_VAR 0 1
65994: PPUSH
65995: CALL_OW 255
65999: PPUSH
66000: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66004: LD_VAR 0 2
66008: PUSH
66009: LD_VAR 0 4
66013: ARRAY
66014: PPUSH
66015: CALL_OW 141
// end ;
66019: GO 65851
66021: POP
66022: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66023: LD_VAR 0 1
66027: PPUSH
66028: LD_EXP 91
66032: PUSH
66033: LD_VAR 0 5
66037: ARRAY
66038: PUSH
66039: LD_INT 0
66041: PLUS
66042: PPUSH
66043: CALL_OW 505
// end ;
66047: LD_VAR 0 3
66051: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66052: LD_INT 0
66054: PPUSH
66055: PPUSH
66056: PPUSH
66057: PPUSH
// if not hack in hackTanks then
66058: LD_VAR 0 1
66062: PUSH
66063: LD_EXP 90
66067: IN
66068: NOT
66069: IFFALSE 66073
// exit ;
66071: GO 66313
// index := GetElementIndex ( hackTanks , hack ) ;
66073: LD_ADDR_VAR 0 4
66077: PUSH
66078: LD_EXP 90
66082: PPUSH
66083: LD_VAR 0 1
66087: PPUSH
66088: CALL 9476 0 2
66092: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66093: LD_ADDR_VAR 0 3
66097: PUSH
66098: DOUBLE
66099: LD_EXP 91
66103: PUSH
66104: LD_VAR 0 4
66108: ARRAY
66109: INC
66110: ST_TO_ADDR
66111: LD_INT 1
66113: PUSH
66114: FOR_DOWNTO
66115: IFFALSE 66287
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66117: LD_ADDR_VAR 0 5
66121: PUSH
66122: LD_EXP 91
66126: PUSH
66127: LD_VAR 0 4
66131: ARRAY
66132: PUSH
66133: LD_VAR 0 3
66137: ARRAY
66138: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66139: LD_VAR 0 5
66143: PUSH
66144: LD_INT 1
66146: ARRAY
66147: PPUSH
66148: CALL_OW 302
66152: NOT
66153: PUSH
66154: LD_VAR 0 5
66158: PUSH
66159: LD_INT 1
66161: ARRAY
66162: PPUSH
66163: CALL_OW 255
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: CALL_OW 255
66177: NONEQUAL
66178: OR
66179: IFFALSE 66285
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66181: LD_VAR 0 5
66185: PUSH
66186: LD_INT 1
66188: ARRAY
66189: PPUSH
66190: CALL_OW 305
66194: PUSH
66195: LD_VAR 0 5
66199: PUSH
66200: LD_INT 1
66202: ARRAY
66203: PPUSH
66204: CALL_OW 255
66208: PUSH
66209: LD_VAR 0 1
66213: PPUSH
66214: CALL_OW 255
66218: EQUAL
66219: AND
66220: IFFALSE 66244
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66222: LD_VAR 0 5
66226: PUSH
66227: LD_INT 1
66229: ARRAY
66230: PPUSH
66231: LD_VAR 0 5
66235: PUSH
66236: LD_INT 2
66238: ARRAY
66239: PPUSH
66240: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66244: LD_ADDR_EXP 91
66248: PUSH
66249: LD_EXP 91
66253: PPUSH
66254: LD_VAR 0 4
66258: PPUSH
66259: LD_EXP 91
66263: PUSH
66264: LD_VAR 0 4
66268: ARRAY
66269: PPUSH
66270: LD_VAR 0 3
66274: PPUSH
66275: CALL_OW 3
66279: PPUSH
66280: CALL_OW 1
66284: ST_TO_ADDR
// end ; end ;
66285: GO 66114
66287: POP
66288: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66289: LD_VAR 0 1
66293: PPUSH
66294: LD_EXP 91
66298: PUSH
66299: LD_VAR 0 4
66303: ARRAY
66304: PUSH
66305: LD_INT 0
66307: PLUS
66308: PPUSH
66309: CALL_OW 505
// end ;
66313: LD_VAR 0 2
66317: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66318: LD_INT 0
66320: PPUSH
66321: PPUSH
66322: PPUSH
66323: PPUSH
// if not hack in hackTanks then
66324: LD_VAR 0 1
66328: PUSH
66329: LD_EXP 90
66333: IN
66334: NOT
66335: IFFALSE 66339
// exit ;
66337: GO 66424
// index := GetElementIndex ( hackTanks , hack ) ;
66339: LD_ADDR_VAR 0 5
66343: PUSH
66344: LD_EXP 90
66348: PPUSH
66349: LD_VAR 0 1
66353: PPUSH
66354: CALL 9476 0 2
66358: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66359: LD_ADDR_VAR 0 4
66363: PUSH
66364: DOUBLE
66365: LD_INT 1
66367: DEC
66368: ST_TO_ADDR
66369: LD_EXP 91
66373: PUSH
66374: LD_VAR 0 5
66378: ARRAY
66379: PUSH
66380: FOR_TO
66381: IFFALSE 66422
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66383: LD_EXP 91
66387: PUSH
66388: LD_VAR 0 5
66392: ARRAY
66393: PUSH
66394: LD_VAR 0 4
66398: ARRAY
66399: PUSH
66400: LD_INT 1
66402: ARRAY
66403: PUSH
66404: LD_VAR 0 2
66408: EQUAL
66409: IFFALSE 66420
// KillUnit ( vehicle ) ;
66411: LD_VAR 0 2
66415: PPUSH
66416: CALL_OW 66
66420: GO 66380
66422: POP
66423: POP
// end ;
66424: LD_VAR 0 3
66428: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66429: LD_EXP 95
66433: NOT
66434: IFFALSE 66469
66436: GO 66438
66438: DISABLE
// begin initMiner := true ;
66439: LD_ADDR_EXP 95
66443: PUSH
66444: LD_INT 1
66446: ST_TO_ADDR
// minersList := [ ] ;
66447: LD_ADDR_EXP 96
66451: PUSH
66452: EMPTY
66453: ST_TO_ADDR
// minerMinesList := [ ] ;
66454: LD_ADDR_EXP 97
66458: PUSH
66459: EMPTY
66460: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66461: LD_ADDR_EXP 98
66465: PUSH
66466: LD_INT 5
66468: ST_TO_ADDR
// end ;
66469: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66470: LD_EXP 95
66474: PUSH
66475: LD_INT 34
66477: PUSH
66478: LD_INT 81
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PPUSH
66485: CALL_OW 69
66489: AND
66490: IFFALSE 66951
66492: GO 66494
66494: DISABLE
66495: LD_INT 0
66497: PPUSH
66498: PPUSH
66499: PPUSH
66500: PPUSH
// begin enable ;
66501: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66502: LD_ADDR_VAR 0 1
66506: PUSH
66507: LD_INT 34
66509: PUSH
66510: LD_INT 81
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PPUSH
66517: CALL_OW 69
66521: PUSH
66522: FOR_IN
66523: IFFALSE 66595
// begin if not i in minersList then
66525: LD_VAR 0 1
66529: PUSH
66530: LD_EXP 96
66534: IN
66535: NOT
66536: IFFALSE 66593
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66538: LD_ADDR_EXP 96
66542: PUSH
66543: LD_EXP 96
66547: PPUSH
66548: LD_EXP 96
66552: PUSH
66553: LD_INT 1
66555: PLUS
66556: PPUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 1
66566: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66567: LD_ADDR_EXP 97
66571: PUSH
66572: LD_EXP 97
66576: PPUSH
66577: LD_EXP 97
66581: PUSH
66582: LD_INT 1
66584: PLUS
66585: PPUSH
66586: EMPTY
66587: PPUSH
66588: CALL_OW 1
66592: ST_TO_ADDR
// end end ;
66593: GO 66522
66595: POP
66596: POP
// for i := minerMinesList downto 1 do
66597: LD_ADDR_VAR 0 1
66601: PUSH
66602: DOUBLE
66603: LD_EXP 97
66607: INC
66608: ST_TO_ADDR
66609: LD_INT 1
66611: PUSH
66612: FOR_DOWNTO
66613: IFFALSE 66949
// begin if IsLive ( minersList [ i ] ) then
66615: LD_EXP 96
66619: PUSH
66620: LD_VAR 0 1
66624: ARRAY
66625: PPUSH
66626: CALL_OW 300
66630: IFFALSE 66658
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66632: LD_EXP 96
66636: PUSH
66637: LD_VAR 0 1
66641: ARRAY
66642: PPUSH
66643: LD_EXP 97
66647: PUSH
66648: LD_VAR 0 1
66652: ARRAY
66653: PPUSH
66654: CALL_OW 505
// if not minerMinesList [ i ] then
66658: LD_EXP 97
66662: PUSH
66663: LD_VAR 0 1
66667: ARRAY
66668: NOT
66669: IFFALSE 66673
// continue ;
66671: GO 66612
// for j := minerMinesList [ i ] downto 1 do
66673: LD_ADDR_VAR 0 2
66677: PUSH
66678: DOUBLE
66679: LD_EXP 97
66683: PUSH
66684: LD_VAR 0 1
66688: ARRAY
66689: INC
66690: ST_TO_ADDR
66691: LD_INT 1
66693: PUSH
66694: FOR_DOWNTO
66695: IFFALSE 66945
// begin side := GetSide ( minersList [ i ] ) ;
66697: LD_ADDR_VAR 0 3
66701: PUSH
66702: LD_EXP 96
66706: PUSH
66707: LD_VAR 0 1
66711: ARRAY
66712: PPUSH
66713: CALL_OW 255
66717: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66718: LD_ADDR_VAR 0 4
66722: PUSH
66723: LD_EXP 97
66727: PUSH
66728: LD_VAR 0 1
66732: ARRAY
66733: PUSH
66734: LD_VAR 0 2
66738: ARRAY
66739: PUSH
66740: LD_INT 1
66742: ARRAY
66743: PPUSH
66744: LD_EXP 97
66748: PUSH
66749: LD_VAR 0 1
66753: ARRAY
66754: PUSH
66755: LD_VAR 0 2
66759: ARRAY
66760: PUSH
66761: LD_INT 2
66763: ARRAY
66764: PPUSH
66765: CALL_OW 428
66769: ST_TO_ADDR
// if not tmp then
66770: LD_VAR 0 4
66774: NOT
66775: IFFALSE 66779
// continue ;
66777: GO 66694
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66779: LD_VAR 0 4
66783: PUSH
66784: LD_INT 81
66786: PUSH
66787: LD_VAR 0 3
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PPUSH
66796: CALL_OW 69
66800: IN
66801: PUSH
66802: LD_EXP 97
66806: PUSH
66807: LD_VAR 0 1
66811: ARRAY
66812: PUSH
66813: LD_VAR 0 2
66817: ARRAY
66818: PUSH
66819: LD_INT 1
66821: ARRAY
66822: PPUSH
66823: LD_EXP 97
66827: PUSH
66828: LD_VAR 0 1
66832: ARRAY
66833: PUSH
66834: LD_VAR 0 2
66838: ARRAY
66839: PUSH
66840: LD_INT 2
66842: ARRAY
66843: PPUSH
66844: CALL_OW 458
66848: AND
66849: IFFALSE 66943
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66851: LD_EXP 97
66855: PUSH
66856: LD_VAR 0 1
66860: ARRAY
66861: PUSH
66862: LD_VAR 0 2
66866: ARRAY
66867: PUSH
66868: LD_INT 1
66870: ARRAY
66871: PPUSH
66872: LD_EXP 97
66876: PUSH
66877: LD_VAR 0 1
66881: ARRAY
66882: PUSH
66883: LD_VAR 0 2
66887: ARRAY
66888: PUSH
66889: LD_INT 2
66891: ARRAY
66892: PPUSH
66893: LD_VAR 0 3
66897: PPUSH
66898: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66902: LD_ADDR_EXP 97
66906: PUSH
66907: LD_EXP 97
66911: PPUSH
66912: LD_VAR 0 1
66916: PPUSH
66917: LD_EXP 97
66921: PUSH
66922: LD_VAR 0 1
66926: ARRAY
66927: PPUSH
66928: LD_VAR 0 2
66932: PPUSH
66933: CALL_OW 3
66937: PPUSH
66938: CALL_OW 1
66942: ST_TO_ADDR
// end ; end ;
66943: GO 66694
66945: POP
66946: POP
// end ;
66947: GO 66612
66949: POP
66950: POP
// end ;
66951: PPOPN 4
66953: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66954: LD_INT 0
66956: PPUSH
66957: PPUSH
// result := false ;
66958: LD_ADDR_VAR 0 4
66962: PUSH
66963: LD_INT 0
66965: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66966: LD_VAR 0 1
66970: PPUSH
66971: CALL_OW 264
66975: PUSH
66976: LD_INT 81
66978: EQUAL
66979: NOT
66980: IFFALSE 66984
// exit ;
66982: GO 67224
// index := GetElementIndex ( minersList , unit ) ;
66984: LD_ADDR_VAR 0 5
66988: PUSH
66989: LD_EXP 96
66993: PPUSH
66994: LD_VAR 0 1
66998: PPUSH
66999: CALL 9476 0 2
67003: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67004: LD_EXP 97
67008: PUSH
67009: LD_VAR 0 5
67013: ARRAY
67014: PUSH
67015: LD_EXP 98
67019: GREATEREQUAL
67020: IFFALSE 67024
// exit ;
67022: GO 67224
// ComMoveXY ( unit , x , y ) ;
67024: LD_VAR 0 1
67028: PPUSH
67029: LD_VAR 0 2
67033: PPUSH
67034: LD_VAR 0 3
67038: PPUSH
67039: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67043: LD_INT 35
67045: PPUSH
67046: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67050: LD_VAR 0 1
67054: PPUSH
67055: LD_VAR 0 2
67059: PPUSH
67060: LD_VAR 0 3
67064: PPUSH
67065: CALL 41217 0 3
67069: NOT
67070: PUSH
67071: LD_VAR 0 1
67075: PPUSH
67076: CALL_OW 314
67080: AND
67081: IFFALSE 67085
// exit ;
67083: GO 67224
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67085: LD_VAR 0 2
67089: PPUSH
67090: LD_VAR 0 3
67094: PPUSH
67095: CALL_OW 428
67099: PUSH
67100: LD_VAR 0 1
67104: EQUAL
67105: PUSH
67106: LD_VAR 0 1
67110: PPUSH
67111: CALL_OW 314
67115: NOT
67116: AND
67117: IFFALSE 67043
// PlaySoundXY ( x , y , PlantMine ) ;
67119: LD_VAR 0 2
67123: PPUSH
67124: LD_VAR 0 3
67128: PPUSH
67129: LD_STRING PlantMine
67131: PPUSH
67132: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67136: LD_VAR 0 2
67140: PPUSH
67141: LD_VAR 0 3
67145: PPUSH
67146: LD_VAR 0 1
67150: PPUSH
67151: CALL_OW 255
67155: PPUSH
67156: LD_INT 0
67158: PPUSH
67159: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67163: LD_ADDR_EXP 97
67167: PUSH
67168: LD_EXP 97
67172: PPUSH
67173: LD_VAR 0 5
67177: PUSH
67178: LD_EXP 97
67182: PUSH
67183: LD_VAR 0 5
67187: ARRAY
67188: PUSH
67189: LD_INT 1
67191: PLUS
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PPUSH
67197: LD_VAR 0 2
67201: PUSH
67202: LD_VAR 0 3
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PPUSH
67211: CALL 9691 0 3
67215: ST_TO_ADDR
// result := true ;
67216: LD_ADDR_VAR 0 4
67220: PUSH
67221: LD_INT 1
67223: ST_TO_ADDR
// end ;
67224: LD_VAR 0 4
67228: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67229: LD_INT 0
67231: PPUSH
67232: PPUSH
67233: PPUSH
// if not unit in minersList then
67234: LD_VAR 0 1
67238: PUSH
67239: LD_EXP 96
67243: IN
67244: NOT
67245: IFFALSE 67249
// exit ;
67247: GO 67641
// index := GetElementIndex ( minersList , unit ) ;
67249: LD_ADDR_VAR 0 6
67253: PUSH
67254: LD_EXP 96
67258: PPUSH
67259: LD_VAR 0 1
67263: PPUSH
67264: CALL 9476 0 2
67268: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67269: LD_ADDR_VAR 0 5
67273: PUSH
67274: DOUBLE
67275: LD_EXP 97
67279: PUSH
67280: LD_VAR 0 6
67284: ARRAY
67285: INC
67286: ST_TO_ADDR
67287: LD_INT 1
67289: PUSH
67290: FOR_DOWNTO
67291: IFFALSE 67452
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67293: LD_EXP 97
67297: PUSH
67298: LD_VAR 0 6
67302: ARRAY
67303: PUSH
67304: LD_VAR 0 5
67308: ARRAY
67309: PUSH
67310: LD_INT 1
67312: ARRAY
67313: PUSH
67314: LD_VAR 0 2
67318: EQUAL
67319: PUSH
67320: LD_EXP 97
67324: PUSH
67325: LD_VAR 0 6
67329: ARRAY
67330: PUSH
67331: LD_VAR 0 5
67335: ARRAY
67336: PUSH
67337: LD_INT 2
67339: ARRAY
67340: PUSH
67341: LD_VAR 0 3
67345: EQUAL
67346: AND
67347: IFFALSE 67450
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67349: LD_EXP 97
67353: PUSH
67354: LD_VAR 0 6
67358: ARRAY
67359: PUSH
67360: LD_VAR 0 5
67364: ARRAY
67365: PUSH
67366: LD_INT 1
67368: ARRAY
67369: PPUSH
67370: LD_EXP 97
67374: PUSH
67375: LD_VAR 0 6
67379: ARRAY
67380: PUSH
67381: LD_VAR 0 5
67385: ARRAY
67386: PUSH
67387: LD_INT 2
67389: ARRAY
67390: PPUSH
67391: LD_VAR 0 1
67395: PPUSH
67396: CALL_OW 255
67400: PPUSH
67401: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67405: LD_ADDR_EXP 97
67409: PUSH
67410: LD_EXP 97
67414: PPUSH
67415: LD_VAR 0 6
67419: PPUSH
67420: LD_EXP 97
67424: PUSH
67425: LD_VAR 0 6
67429: ARRAY
67430: PPUSH
67431: LD_VAR 0 5
67435: PPUSH
67436: CALL_OW 3
67440: PPUSH
67441: CALL_OW 1
67445: ST_TO_ADDR
// exit ;
67446: POP
67447: POP
67448: GO 67641
// end ; end ;
67450: GO 67290
67452: POP
67453: POP
// for i := minerMinesList [ index ] downto 1 do
67454: LD_ADDR_VAR 0 5
67458: PUSH
67459: DOUBLE
67460: LD_EXP 97
67464: PUSH
67465: LD_VAR 0 6
67469: ARRAY
67470: INC
67471: ST_TO_ADDR
67472: LD_INT 1
67474: PUSH
67475: FOR_DOWNTO
67476: IFFALSE 67639
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67478: LD_EXP 97
67482: PUSH
67483: LD_VAR 0 6
67487: ARRAY
67488: PUSH
67489: LD_VAR 0 5
67493: ARRAY
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: PPUSH
67499: LD_EXP 97
67503: PUSH
67504: LD_VAR 0 6
67508: ARRAY
67509: PUSH
67510: LD_VAR 0 5
67514: ARRAY
67515: PUSH
67516: LD_INT 2
67518: ARRAY
67519: PPUSH
67520: LD_VAR 0 2
67524: PPUSH
67525: LD_VAR 0 3
67529: PPUSH
67530: CALL_OW 298
67534: PUSH
67535: LD_INT 6
67537: LESS
67538: IFFALSE 67637
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67540: LD_EXP 97
67544: PUSH
67545: LD_VAR 0 6
67549: ARRAY
67550: PUSH
67551: LD_VAR 0 5
67555: ARRAY
67556: PUSH
67557: LD_INT 1
67559: ARRAY
67560: PPUSH
67561: LD_EXP 97
67565: PUSH
67566: LD_VAR 0 6
67570: ARRAY
67571: PUSH
67572: LD_VAR 0 5
67576: ARRAY
67577: PUSH
67578: LD_INT 2
67580: ARRAY
67581: PPUSH
67582: LD_VAR 0 1
67586: PPUSH
67587: CALL_OW 255
67591: PPUSH
67592: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67596: LD_ADDR_EXP 97
67600: PUSH
67601: LD_EXP 97
67605: PPUSH
67606: LD_VAR 0 6
67610: PPUSH
67611: LD_EXP 97
67615: PUSH
67616: LD_VAR 0 6
67620: ARRAY
67621: PPUSH
67622: LD_VAR 0 5
67626: PPUSH
67627: CALL_OW 3
67631: PPUSH
67632: CALL_OW 1
67636: ST_TO_ADDR
// end ; end ;
67637: GO 67475
67639: POP
67640: POP
// end ;
67641: LD_VAR 0 4
67645: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67646: LD_INT 0
67648: PPUSH
67649: PPUSH
67650: PPUSH
67651: PPUSH
67652: PPUSH
67653: PPUSH
67654: PPUSH
67655: PPUSH
67656: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67657: LD_VAR 0 1
67661: PPUSH
67662: CALL_OW 264
67666: PUSH
67667: LD_INT 81
67669: EQUAL
67670: NOT
67671: PUSH
67672: LD_VAR 0 1
67676: PUSH
67677: LD_EXP 96
67681: IN
67682: NOT
67683: OR
67684: IFFALSE 67688
// exit ;
67686: GO 68010
// index := GetElementIndex ( minersList , unit ) ;
67688: LD_ADDR_VAR 0 6
67692: PUSH
67693: LD_EXP 96
67697: PPUSH
67698: LD_VAR 0 1
67702: PPUSH
67703: CALL 9476 0 2
67707: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67708: LD_ADDR_VAR 0 8
67712: PUSH
67713: LD_EXP 98
67717: PUSH
67718: LD_EXP 97
67722: PUSH
67723: LD_VAR 0 6
67727: ARRAY
67728: MINUS
67729: ST_TO_ADDR
// if not minesFreeAmount then
67730: LD_VAR 0 8
67734: NOT
67735: IFFALSE 67739
// exit ;
67737: GO 68010
// tmp := [ ] ;
67739: LD_ADDR_VAR 0 7
67743: PUSH
67744: EMPTY
67745: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67746: LD_ADDR_VAR 0 5
67750: PUSH
67751: DOUBLE
67752: LD_INT 1
67754: DEC
67755: ST_TO_ADDR
67756: LD_VAR 0 8
67760: PUSH
67761: FOR_TO
67762: IFFALSE 67957
// begin _d := rand ( 0 , 5 ) ;
67764: LD_ADDR_VAR 0 11
67768: PUSH
67769: LD_INT 0
67771: PPUSH
67772: LD_INT 5
67774: PPUSH
67775: CALL_OW 12
67779: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67780: LD_ADDR_VAR 0 12
67784: PUSH
67785: LD_INT 2
67787: PPUSH
67788: LD_INT 6
67790: PPUSH
67791: CALL_OW 12
67795: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67796: LD_ADDR_VAR 0 9
67800: PUSH
67801: LD_VAR 0 2
67805: PPUSH
67806: LD_VAR 0 11
67810: PPUSH
67811: LD_VAR 0 12
67815: PPUSH
67816: CALL_OW 272
67820: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67821: LD_ADDR_VAR 0 10
67825: PUSH
67826: LD_VAR 0 3
67830: PPUSH
67831: LD_VAR 0 11
67835: PPUSH
67836: LD_VAR 0 12
67840: PPUSH
67841: CALL_OW 273
67845: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67846: LD_VAR 0 9
67850: PPUSH
67851: LD_VAR 0 10
67855: PPUSH
67856: CALL_OW 488
67860: PUSH
67861: LD_VAR 0 9
67865: PUSH
67866: LD_VAR 0 10
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_VAR 0 7
67879: IN
67880: NOT
67881: AND
67882: PUSH
67883: LD_VAR 0 9
67887: PPUSH
67888: LD_VAR 0 10
67892: PPUSH
67893: CALL_OW 458
67897: NOT
67898: AND
67899: IFFALSE 67941
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67901: LD_ADDR_VAR 0 7
67905: PUSH
67906: LD_VAR 0 7
67910: PPUSH
67911: LD_VAR 0 7
67915: PUSH
67916: LD_INT 1
67918: PLUS
67919: PPUSH
67920: LD_VAR 0 9
67924: PUSH
67925: LD_VAR 0 10
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PPUSH
67934: CALL_OW 1
67938: ST_TO_ADDR
67939: GO 67955
// i := i - 1 ;
67941: LD_ADDR_VAR 0 5
67945: PUSH
67946: LD_VAR 0 5
67950: PUSH
67951: LD_INT 1
67953: MINUS
67954: ST_TO_ADDR
// end ;
67955: GO 67761
67957: POP
67958: POP
// for i in tmp do
67959: LD_ADDR_VAR 0 5
67963: PUSH
67964: LD_VAR 0 7
67968: PUSH
67969: FOR_IN
67970: IFFALSE 68008
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67972: LD_VAR 0 1
67976: PPUSH
67977: LD_VAR 0 5
67981: PUSH
67982: LD_INT 1
67984: ARRAY
67985: PPUSH
67986: LD_VAR 0 5
67990: PUSH
67991: LD_INT 2
67993: ARRAY
67994: PPUSH
67995: CALL 66954 0 3
67999: NOT
68000: IFFALSE 68006
// exit ;
68002: POP
68003: POP
68004: GO 68010
68006: GO 67969
68008: POP
68009: POP
// end ;
68010: LD_VAR 0 4
68014: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68015: LD_INT 0
68017: PPUSH
68018: PPUSH
68019: PPUSH
68020: PPUSH
68021: PPUSH
68022: PPUSH
68023: PPUSH
// if not GetClass ( unit ) = class_sniper then
68024: LD_VAR 0 1
68028: PPUSH
68029: CALL_OW 257
68033: PUSH
68034: LD_INT 5
68036: EQUAL
68037: NOT
68038: IFFALSE 68042
// exit ;
68040: GO 68430
// dist := 8 ;
68042: LD_ADDR_VAR 0 5
68046: PUSH
68047: LD_INT 8
68049: ST_TO_ADDR
// viewRange := 12 ;
68050: LD_ADDR_VAR 0 7
68054: PUSH
68055: LD_INT 12
68057: ST_TO_ADDR
// side := GetSide ( unit ) ;
68058: LD_ADDR_VAR 0 6
68062: PUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: CALL_OW 255
68072: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68073: LD_INT 61
68075: PPUSH
68076: LD_VAR 0 6
68080: PPUSH
68081: CALL_OW 321
68085: PUSH
68086: LD_INT 2
68088: EQUAL
68089: IFFALSE 68099
// viewRange := 16 ;
68091: LD_ADDR_VAR 0 7
68095: PUSH
68096: LD_INT 16
68098: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68099: LD_VAR 0 1
68103: PPUSH
68104: LD_VAR 0 2
68108: PPUSH
68109: LD_VAR 0 3
68113: PPUSH
68114: CALL_OW 297
68118: PUSH
68119: LD_VAR 0 5
68123: GREATER
68124: IFFALSE 68203
// begin ComMoveXY ( unit , x , y ) ;
68126: LD_VAR 0 1
68130: PPUSH
68131: LD_VAR 0 2
68135: PPUSH
68136: LD_VAR 0 3
68140: PPUSH
68141: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68145: LD_INT 35
68147: PPUSH
68148: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68152: LD_VAR 0 1
68156: PPUSH
68157: LD_VAR 0 2
68161: PPUSH
68162: LD_VAR 0 3
68166: PPUSH
68167: CALL 41217 0 3
68171: NOT
68172: IFFALSE 68176
// exit ;
68174: GO 68430
// until GetDistUnitXY ( unit , x , y ) < dist ;
68176: LD_VAR 0 1
68180: PPUSH
68181: LD_VAR 0 2
68185: PPUSH
68186: LD_VAR 0 3
68190: PPUSH
68191: CALL_OW 297
68195: PUSH
68196: LD_VAR 0 5
68200: LESS
68201: IFFALSE 68145
// end ; ComTurnXY ( unit , x , y ) ;
68203: LD_VAR 0 1
68207: PPUSH
68208: LD_VAR 0 2
68212: PPUSH
68213: LD_VAR 0 3
68217: PPUSH
68218: CALL_OW 118
// wait ( 5 ) ;
68222: LD_INT 5
68224: PPUSH
68225: CALL_OW 67
// _d := GetDir ( unit ) ;
68229: LD_ADDR_VAR 0 10
68233: PUSH
68234: LD_VAR 0 1
68238: PPUSH
68239: CALL_OW 254
68243: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
68244: LD_ADDR_VAR 0 8
68248: PUSH
68249: LD_VAR 0 1
68253: PPUSH
68254: CALL_OW 250
68258: PPUSH
68259: LD_VAR 0 10
68263: PPUSH
68264: LD_VAR 0 5
68268: PPUSH
68269: CALL_OW 272
68273: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
68274: LD_ADDR_VAR 0 9
68278: PUSH
68279: LD_VAR 0 1
68283: PPUSH
68284: CALL_OW 251
68288: PPUSH
68289: LD_VAR 0 10
68293: PPUSH
68294: LD_VAR 0 5
68298: PPUSH
68299: CALL_OW 273
68303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68304: LD_VAR 0 8
68308: PPUSH
68309: LD_VAR 0 9
68313: PPUSH
68314: CALL_OW 488
68318: NOT
68319: IFFALSE 68323
// exit ;
68321: GO 68430
// ComAnimCustom ( unit , 1 ) ;
68323: LD_VAR 0 1
68327: PPUSH
68328: LD_INT 1
68330: PPUSH
68331: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68335: LD_VAR 0 8
68339: PPUSH
68340: LD_VAR 0 9
68344: PPUSH
68345: LD_VAR 0 6
68349: PPUSH
68350: LD_VAR 0 7
68354: PPUSH
68355: CALL_OW 330
// repeat wait ( 1 ) ;
68359: LD_INT 1
68361: PPUSH
68362: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
68366: LD_VAR 0 1
68370: PPUSH
68371: CALL_OW 316
68375: PUSH
68376: LD_VAR 0 1
68380: PPUSH
68381: CALL_OW 314
68385: OR
68386: PUSH
68387: LD_VAR 0 1
68391: PPUSH
68392: CALL_OW 302
68396: NOT
68397: OR
68398: PUSH
68399: LD_VAR 0 1
68403: PPUSH
68404: CALL_OW 301
68408: OR
68409: IFFALSE 68359
// RemoveSeeing ( _x , _y , side ) ;
68411: LD_VAR 0 8
68415: PPUSH
68416: LD_VAR 0 9
68420: PPUSH
68421: LD_VAR 0 6
68425: PPUSH
68426: CALL_OW 331
// end ;
68430: LD_VAR 0 4
68434: RET
