// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 568 0 0
// CreateDeposits ;
  12: CALL 739 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 1301 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 37800
  80: PUSH
  81: LD_INT 33600
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// schulzSecondSquad := [ ] ;
 233: LD_ADDR_EXP 26
 237: PUSH
 238: EMPTY
 239: ST_TO_ADDR
// for i := 1 to 3 do
 240: LD_ADDR_VAR 0 2
 244: PUSH
 245: DOUBLE
 246: LD_INT 1
 248: DEC
 249: ST_TO_ADDR
 250: LD_INT 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 293
// begin PrepareHuman ( false , i , 6 ) ;
 256: LD_INT 0
 258: PPUSH
 259: LD_VAR 0 2
 263: PPUSH
 264: LD_INT 6
 266: PPUSH
 267: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_EXP 26
 280: PPUSH
 281: CALL_OW 44
 285: PPUSH
 286: CALL 40746 0 2
 290: ST_TO_ADDR
// end ;
 291: GO 253
 293: POP
 294: POP
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: LD_EXP 20
 304: PUSH
 305: LD_EXP 21
 309: PUSH
 310: LD_EXP 22
 314: PUSH
 315: LD_EXP 23
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_EXP 26
 330: UNION
 331: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 4
 346: PPUSH
 347: CALL 5380 0 1
 351: PUSH
 352: FOR_TO
 353: IFFALSE 478
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 355: LD_INT 13
 357: PPUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 1
 363: PPUSH
 364: LD_INT 25
 366: PUSH
 367: LD_INT 27
 369: PUSH
 370: LD_INT 26
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: MOD
 390: PUSH
 391: LD_INT 1
 393: PLUS
 394: ARRAY
 395: PPUSH
 396: LD_INT 20
 398: PPUSH
 399: CALL 8293 0 5
// un := CreateVehicle ;
 403: LD_ADDR_VAR 0 3
 407: PUSH
 408: CALL_OW 45
 412: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 413: LD_VAR 0 3
 417: PPUSH
 418: LD_INT 2
 420: PPUSH
 421: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 425: LD_VAR 0 3
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 440: LD_VAR 0 4
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: LD_VAR 0 3
 453: PPUSH
 454: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 4
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL_OW 3
 475: ST_TO_ADDR
// end ;
 476: GO 352
 478: POP
 479: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 480: LD_INT 14
 482: PPUSH
 483: LD_INT 1
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: LD_INT 27
 491: PPUSH
 492: LD_INT 30
 494: PPUSH
 495: CALL 8293 0 5
// un := CreateVehicle ;
 499: LD_ADDR_VAR 0 3
 503: PUSH
 504: CALL_OW 45
 508: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 509: LD_VAR 0 3
 513: PPUSH
 514: LD_INT 2
 516: PPUSH
 517: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 521: LD_VAR 0 3
 525: PPUSH
 526: LD_INT 4
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// SetMark ( un , - 2 ) ;
 536: LD_VAR 0 3
 540: PPUSH
 541: LD_INT 2
 543: NEG
 544: PPUSH
 545: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 549: LD_EXP 18
 553: PPUSH
 554: LD_VAR 0 3
 558: PPUSH
 559: CALL_OW 52
// end ; end_of_file end_of_file
 563: LD_VAR 0 1
 567: RET
// export function CreateNature ; var i ; begin
 568: LD_INT 0
 570: PPUSH
 571: PPUSH
// PrepareApeman ( 0 ) ;
 572: LD_INT 0
 574: PPUSH
 575: CALL 37026 0 1
// for i := 1 to 5 do
 579: LD_ADDR_VAR 0 2
 583: PUSH
 584: DOUBLE
 585: LD_INT 1
 587: DEC
 588: ST_TO_ADDR
 589: LD_INT 5
 591: PUSH
 592: FOR_TO
 593: IFFALSE 612
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 595: CALL_OW 44
 599: PPUSH
 600: LD_INT 8
 602: PPUSH
 603: LD_INT 0
 605: PPUSH
 606: CALL_OW 49
 610: GO 592
 612: POP
 613: POP
// PrepareTiger ( 0 ) ;
 614: LD_INT 0
 616: PPUSH
 617: CALL 37134 0 1
// for i := 1 to 2 do
 621: LD_ADDR_VAR 0 2
 625: PUSH
 626: DOUBLE
 627: LD_INT 1
 629: DEC
 630: ST_TO_ADDR
 631: LD_INT 2
 633: PUSH
 634: FOR_TO
 635: IFFALSE 654
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 637: CALL_OW 44
 641: PPUSH
 642: LD_INT 8
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
 652: GO 634
 654: POP
 655: POP
// PrepareBird ;
 656: CALL 37315 0 0
// for i := 1 to 3 do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_INT 3
 672: PUSH
 673: FOR_TO
 674: IFFALSE 693
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 676: CALL_OW 44
 680: PPUSH
 681: LD_INT 8
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: CALL_OW 49
 691: GO 673
 693: POP
 694: POP
// PrepareFrog ;
 695: CALL 37235 0 0
// for i := 1 to 3 do
 699: LD_ADDR_VAR 0 2
 703: PUSH
 704: DOUBLE
 705: LD_INT 1
 707: DEC
 708: ST_TO_ADDR
 709: LD_INT 3
 711: PUSH
 712: FOR_TO
 713: IFFALSE 732
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 715: CALL_OW 44
 719: PPUSH
 720: LD_INT 9
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 49
 730: GO 712
 732: POP
 733: POP
// end ;
 734: LD_VAR 0 1
 738: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 739: LD_INT 0
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 745: LD_ADDR_VAR 0 3
 749: PUSH
 750: LD_INT 91
 752: PUSH
 753: LD_INT 13
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 52
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: LD_INT 115
 772: PUSH
 773: LD_INT 150
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 785: LD_ADDR_VAR 0 4
 789: PUSH
 790: LD_INT 82
 792: PUSH
 793: LD_INT 42
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 128
 802: PUSH
 803: LD_INT 132
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// for i in oil do
 814: LD_ADDR_VAR 0 2
 818: PUSH
 819: LD_VAR 0 3
 823: PUSH
 824: FOR_IN
 825: IFFALSE 854
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 2
 843: ARRAY
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: CALL_OW 62
 852: GO 824
 854: POP
 855: POP
// for i in sib do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: LD_VAR 0 4
 865: PUSH
 866: FOR_IN
 867: IFFALSE 896
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 1
 876: ARRAY
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 2
 885: ARRAY
 886: PPUSH
 887: LD_INT 3
 889: PPUSH
 890: CALL_OW 62
 894: GO 866
 896: POP
 897: POP
// end ; end_of_file
 898: LD_VAR 0 1
 902: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_EXP 18
 912: EQUAL
 913: IFFALSE 922
// YouLost ( Schulz ) ;
 915: LD_STRING Schulz
 917: PPUSH
 918: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
 922: LD_VAR 0 1
 926: PPUSH
 927: CALL_OW 266
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: IN
 942: IFFALSE 951
// YouLost ( Depot ) ;
 944: LD_STRING Depot
 946: PPUSH
 947: CALL_OW 104
// end ;
 951: PPOPN 1
 953: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
 954: LD_VAR 0 1
 958: PUSH
 959: LD_INT 22
 961: PUSH
 962: LD_INT 2
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: PUSH
 969: LD_INT 23
 971: PUSH
 972: LD_INT 2
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: PPUSH
 983: CALL_OW 69
 987: PUSH
 988: LD_EXP 18
 992: DIFF
 993: IN
 994: IFFALSE 1022
// if killerSide = 2 then
 996: LD_VAR 0 2
1000: PUSH
1001: LD_INT 2
1003: EQUAL
1004: IFFALSE 1015
// YouLost ( TeamKiller ) else
1006: LD_STRING TeamKiller
1008: PPUSH
1009: CALL_OW 104
1013: GO 1022
// YouLost ( SoldierKilled ) ;
1015: LD_STRING SoldierKilled
1017: PPUSH
1018: CALL_OW 104
// end ;
1022: PPOPN 3
1024: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1025: LD_ADDR_EXP 3
1029: PUSH
1030: LD_EXP 3
1034: PPUSH
1035: LD_VAR 0 3
1039: PUSH
1040: LD_VAR 0 4
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PPUSH
1049: CALL 40746 0 2
1053: ST_TO_ADDR
// end ;
1054: PPOPN 4
1056: END
// on SailEvent ( event ) do var i , eng ;
1057: LD_INT 0
1059: PPUSH
1060: PPUSH
// begin if event = 1 then
1061: LD_VAR 0 1
1065: PUSH
1066: LD_INT 1
1068: EQUAL
1069: IFFALSE 1298
// begin ComExitVehicle ( Lemmy ) ;
1071: LD_EXP 20
1075: PPUSH
1076: CALL_OW 121
// wait ( 1 ) ;
1080: LD_INT 1
1082: PPUSH
1083: CALL_OW 67
// AddComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1087: LD_EXP 20
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: LD_INT 69
1097: PPUSH
1098: LD_INT 14
1100: PPUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 205
// wait ( 0 0$2 ) ;
1108: LD_INT 70
1110: PPUSH
1111: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_EXP 26
1124: PPUSH
1125: LD_INT 3
1127: PUSH
1128: LD_INT 25
1130: PUSH
1131: LD_INT 2
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 72
1146: PUSH
1147: LD_EXP 21
1151: UNION
1152: PUSH
1153: LD_EXP 23
1157: UNION
1158: PUSH
1159: LD_EXP 22
1163: UNION
1164: PUSH
1165: FOR_IN
1166: IFFALSE 1201
// begin ComExitVehicle ( i ) ;
1168: LD_VAR 0 2
1172: PPUSH
1173: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1177: LD_INT 10
1179: PPUSH
1180: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1184: LD_VAR 0 2
1188: PPUSH
1189: LD_INT 69
1191: PPUSH
1192: LD_INT 14
1194: PPUSH
1195: CALL_OW 171
// end ;
1199: GO 1165
1201: POP
1202: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1203: LD_ADDR_VAR 0 3
1207: PUSH
1208: LD_EXP 26
1212: PPUSH
1213: LD_INT 25
1215: PUSH
1216: LD_INT 2
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 72
1227: ST_TO_ADDR
// if not eng then
1228: LD_VAR 0 3
1232: NOT
1233: IFFALSE 1237
// exit ;
1235: GO 1298
// ComExitVehicle ( eng ) ;
1237: LD_VAR 0 3
1241: PPUSH
1242: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1246: LD_INT 10
1248: PPUSH
1249: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
1253: LD_VAR 0 3
1257: PPUSH
1258: LD_INT 55
1260: PPUSH
1261: LD_INT 42
1263: PPUSH
1264: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
1268: LD_VAR 0 3
1272: PPUSH
1273: LD_INT 84
1275: PPUSH
1276: LD_INT 47
1278: PPUSH
1279: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
1283: LD_VAR 0 3
1287: PPUSH
1288: LD_INT 70
1290: PPUSH
1291: LD_INT 19
1293: PPUSH
1294: CALL_OW 171
// end ; end ; end_of_file
1298: PPOPN 3
1300: END
// export function Action ; var i ; begin
1301: LD_INT 0
1303: PPUSH
1304: PPUSH
// Video ( true ) ;
1305: LD_INT 1
1307: PPUSH
1308: CALL 40718 0 1
// CenterNowOnXY ( 18 , 15 ) ;
1312: LD_INT 18
1314: PPUSH
1315: LD_INT 15
1317: PPUSH
1318: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
1322: LD_EXP 18
1326: PPUSH
1327: LD_INT 80
1329: PPUSH
1330: LD_INT 28
1332: PPUSH
1333: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
1337: LD_EXP 20
1341: PPUSH
1342: LD_INT 61
1344: PPUSH
1345: LD_INT 17
1347: PPUSH
1348: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
1352: LD_EXP 22
1356: PPUSH
1357: LD_INT 72
1359: PPUSH
1360: LD_INT 28
1362: PPUSH
1363: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
1367: LD_EXP 23
1371: PPUSH
1372: LD_INT 74
1374: PPUSH
1375: LD_INT 22
1377: PPUSH
1378: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
1382: LD_EXP 21
1386: PPUSH
1387: LD_INT 68
1389: PPUSH
1390: LD_INT 22
1392: PPUSH
1393: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
1397: LD_EXP 26
1401: PPUSH
1402: LD_INT 83
1404: PPUSH
1405: LD_INT 37
1407: PPUSH
1408: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
1412: LD_EXP 18
1416: PPUSH
1417: LD_STRING DL-Intro-8
1419: PPUSH
1420: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1424: LD_EXP 18
1428: PPUSH
1429: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
1433: LD_EXP 18
1437: PPUSH
1438: LD_STRING DL-Intro-9
1440: PPUSH
1441: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1445: LD_EXP 18
1449: PPUSH
1450: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
1454: LD_EXP 18
1458: PPUSH
1459: LD_STRING DL-Intro-10
1461: PPUSH
1462: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
1466: LD_INT 80
1468: PPUSH
1469: LD_INT 28
1471: PPUSH
1472: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1476: LD_INT 35
1478: PPUSH
1479: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
1483: LD_INT 22
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 92
1495: PUSH
1496: LD_INT 80
1498: PUSH
1499: LD_INT 28
1501: PUSH
1502: LD_INT 6
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: IFFALSE 1476
// RaiseSailEvent ( 1 ) ;
1521: LD_INT 1
1523: PPUSH
1524: CALL_OW 427
// wait ( 0 0$0.3 ) ;
1528: LD_INT 10
1530: PPUSH
1531: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
1535: LD_EXP 18
1539: PPUSH
1540: LD_STRING DL-Intro-11
1542: PPUSH
1543: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
1547: LD_EXP 24
1551: PPUSH
1552: LD_STRING DOm-Intro-12
1554: PPUSH
1555: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
1559: LD_EXP 24
1563: PPUSH
1564: LD_STRING DOm-Intro-13
1566: PPUSH
1567: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
1571: LD_EXP 18
1575: PPUSH
1576: LD_STRING DL-Intro-14
1578: PPUSH
1579: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
1583: LD_EXP 18
1587: PPUSH
1588: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1592: LD_INT 10
1594: PPUSH
1595: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
1599: LD_EXP 18
1603: PPUSH
1604: LD_INT 73
1606: PPUSH
1607: LD_INT 17
1609: PPUSH
1610: CALL_OW 111
// wait ( 0 0$2 ) ;
1614: LD_INT 70
1616: PPUSH
1617: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
1621: LD_EXP 18
1625: PPUSH
1626: LD_STRING DL-Intro-15
1628: PPUSH
1629: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
1633: LD_EXP 20
1637: PPUSH
1638: LD_STRING DLt-Intro-16
1640: PPUSH
1641: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
1645: LD_EXP 20
1649: PPUSH
1650: LD_STRING DLt-Intro-17
1652: PPUSH
1653: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
1657: LD_INT 35
1659: PPUSH
1660: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
1664: LD_INT 22
1666: PUSH
1667: LD_INT 2
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 30
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PPUSH
1688: CALL_OW 69
1692: IFFALSE 1657
// Video ( false ) ;
1694: LD_INT 0
1696: PPUSH
1697: CALL 40718 0 1
// tick := 0 ;
1701: LD_ADDR_OWVAR 1
1705: PUSH
1706: LD_INT 0
1708: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
1709: LD_STRING M1
1711: PPUSH
1712: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
1716: LD_INT 0
1718: PPUSH
1719: LD_INT 2
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
1729: LD_INT 35
1731: PPUSH
1732: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
1736: LD_INT 22
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 30
1748: PUSH
1749: LD_INT 0
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 57
1758: PUSH
1759: EMPTY
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PPUSH
1767: CALL_OW 69
1771: IFFALSE 1729
// DialogueOn ;
1773: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
1777: LD_EXP 18
1781: PPUSH
1782: LD_STRING DL-Intro-18
1784: PPUSH
1785: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
1789: LD_EXP 18
1793: PPUSH
1794: LD_STRING DL-Intro-19
1796: PPUSH
1797: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
1801: LD_EXP 18
1805: PPUSH
1806: LD_STRING DL-Intro-20
1808: PPUSH
1809: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
1813: LD_EXP 20
1817: PPUSH
1818: LD_STRING DLt-Intro-21
1820: PPUSH
1821: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
1825: LD_EXP 20
1829: PPUSH
1830: LD_STRING DLt-Intro-22
1832: PPUSH
1833: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
1837: LD_EXP 20
1841: PPUSH
1842: LD_STRING DLt-Intro-23
1844: PPUSH
1845: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
1849: LD_EXP 18
1853: PPUSH
1854: LD_STRING DL-Intro-24
1856: PPUSH
1857: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
1861: LD_EXP 20
1865: PPUSH
1866: LD_STRING DLt-Intro-25
1868: PPUSH
1869: CALL_OW 88
// DialogueOff ;
1873: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
1877: LD_STRING M2
1879: PPUSH
1880: CALL_OW 337
// Query ( Prepare ) ;
1884: LD_STRING Prepare
1886: PPUSH
1887: CALL_OW 97
// end ;
1891: LD_VAR 0 1
1895: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
1896: LD_INT 22
1898: PUSH
1899: LD_INT 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 30
1908: PUSH
1909: LD_INT 15
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: IFFALSE 1941
1926: GO 1928
1928: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
1929: LD_EXP 18
1933: PPUSH
1934: LD_STRING DL-Cam-1
1936: PPUSH
1937: CALL_OW 88
1941: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
1942: LD_OWVAR 1
1946: PUSH
1947: LD_EXP 4
1951: PUSH
1952: LD_INT 2
1954: DIV
1955: GREATEREQUAL
1956: IFFALSE 1981
1958: GO 1960
1960: DISABLE
// begin DialogueOn ;
1961: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
1965: LD_EXP 18
1969: PPUSH
1970: LD_STRING DL-Faster-1
1972: PPUSH
1973: CALL_OW 88
// DialogueOff ;
1977: CALL_OW 7
// end ;
1981: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
1982: LD_OWVAR 1
1986: PUSH
1987: LD_EXP 4
1991: PUSH
1992: LD_INT 2
1994: DIV
1995: PUSH
1996: LD_INT 10500
1998: PLUS
1999: GREATEREQUAL
2000: IFFALSE 2025
2002: GO 2004
2004: DISABLE
// begin DialogueOn ;
2005: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2009: LD_EXP 18
2013: PPUSH
2014: LD_STRING DL-Faster-2
2016: PPUSH
2017: CALL_OW 88
// DialogueOff ;
2021: CALL_OW 7
// end ;
2025: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2026: LD_INT 22
2028: PUSH
2029: LD_INT 2
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 2
2038: PUSH
2039: LD_INT 30
2041: PUSH
2042: LD_INT 6
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 30
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 30
2061: PUSH
2062: LD_INT 8
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL_OW 69
2083: PUSH
2084: LD_INT 22
2086: PUSH
2087: LD_INT 2
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 30
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PPUSH
2108: CALL_OW 69
2112: AND
2113: PUSH
2114: LD_INT 22
2116: PUSH
2117: LD_INT 2
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 32
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 3
2145: GREATEREQUAL
2146: AND
2147: PUSH
2148: LD_INT 22
2150: PUSH
2151: LD_INT 2
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 5
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL_OW 69
2176: AND
2177: PUSH
2178: LD_INT 22
2180: PUSH
2181: LD_INT 2
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 2
2190: PUSH
2191: LD_INT 30
2193: PUSH
2194: LD_INT 26
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 30
2203: PUSH
2204: LD_INT 28
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: AND
2225: IFFALSE 2245
2227: GO 2229
2229: DISABLE
// begin baseDone := true ;
2230: LD_ADDR_EXP 5
2234: PUSH
2235: LD_INT 1
2237: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
2238: LD_STRING M1out
2240: PPUSH
2241: CALL_OW 337
// end ;
2245: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
2246: LD_EXP 5
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 2
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 21
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 3
2273: PUSH
2274: LD_INT 2
2276: PUSH
2277: LD_INT 34
2279: PUSH
2280: LD_INT 32
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 34
2289: PUSH
2290: LD_INT 88
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: PPUSH
2311: CALL_OW 69
2315: PUSH
2316: LD_INT 22
2318: PUSH
2319: LD_INT 2
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: LD_INT 21
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 23
2338: PUSH
2339: LD_INT 2
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PPUSH
2351: CALL_OW 69
2355: PPUSH
2356: CALL 5380 0 1
2360: GREATEREQUAL
2361: AND
2362: IFFALSE 2454
2364: GO 2366
2366: DISABLE
// begin DialogueOn ;
2367: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
2371: LD_EXP 18
2375: PPUSH
2376: LD_STRING DL-Ready-1
2378: PPUSH
2379: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
2383: LD_INT 22
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: LD_INT 23
2395: PUSH
2396: LD_INT 0
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PPUSH
2407: CALL_OW 69
2411: IFFALSE 2425
// Say ( Schulz , DL-Ready-2 ) ;
2413: LD_EXP 18
2417: PPUSH
2418: LD_STRING DL-Ready-2
2420: PPUSH
2421: CALL_OW 88
// DialogueOff ;
2425: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
2429: LD_STRING M3
2431: PPUSH
2432: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
2436: LD_INT 7
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 424
// canGo := true ;
2446: LD_ADDR_EXP 6
2450: PUSH
2451: LD_INT 1
2453: ST_TO_ADDR
// end ;
2454: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles ;
2455: LD_EXP 6
2459: PUSH
2460: LD_INT 7
2462: PPUSH
2463: LD_INT 22
2465: PUSH
2466: LD_INT 2
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 21
2475: PUSH
2476: LD_INT 2
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 33
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 3
2495: PUSH
2496: LD_INT 58
2498: PUSH
2499: EMPTY
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: PPUSH
2512: CALL_OW 70
2516: PPUSH
2517: CALL 5380 0 1
2521: PUSH
2522: LD_INT 22
2524: PUSH
2525: LD_INT 2
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 1
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: PUSH
2542: LD_INT 23
2544: PUSH
2545: LD_INT 2
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: PPUSH
2557: CALL_OW 69
2561: PPUSH
2562: CALL 5380 0 1
2566: GREATEREQUAL
2567: AND
2568: PUSH
2569: LD_INT 22
2571: PUSH
2572: LD_INT 2
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 21
2581: PUSH
2582: LD_INT 1
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 3
2591: PUSH
2592: LD_INT 55
2594: PUSH
2595: EMPTY
2596: LIST
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PPUSH
2618: CALL_OW 69
2622: PPUSH
2623: CALL 5380 0 1
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 3153
2634: GO 2636
2636: DISABLE
2637: LD_INT 0
2639: PPUSH
2640: PPUSH
2641: PPUSH
// begin enable ;
2642: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
2643: LD_ADDR_VAR 0 2
2647: PUSH
2648: LD_INT 7
2650: PPUSH
2651: LD_INT 22
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PUSH
2661: LD_INT 21
2663: PUSH
2664: LD_INT 2
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PPUSH
2675: CALL_OW 70
2679: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
2680: LD_VAR 0 2
2684: PPUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 34
2690: PUSH
2691: LD_INT 88
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 34
2700: PUSH
2701: LD_INT 32
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: PPUSH
2713: CALL_OW 72
2717: IFFALSE 2728
// begin Query ( InvalidWeapon ) ;
2719: LD_STRING InvalidWeapon
2721: PPUSH
2722: CALL_OW 97
// exit ;
2726: GO 3153
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
2728: LD_VAR 0 2
2732: PPUSH
2733: LD_INT 3
2735: PUSH
2736: LD_INT 24
2738: PUSH
2739: LD_INT 1000
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PPUSH
2750: CALL_OW 72
2754: IFFALSE 2765
// begin Query ( HealthLevel ) ;
2756: LD_STRING HealthLevel
2758: PPUSH
2759: CALL_OW 97
// exit ;
2763: GO 3153
// end ; for i in tmp do
2765: LD_ADDR_VAR 0 1
2769: PUSH
2770: LD_VAR 0 2
2774: PUSH
2775: FOR_IN
2776: IFFALSE 2821
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 80 then
2778: LD_VAR 0 1
2782: PPUSH
2783: CALL_OW 262
2787: PUSH
2788: LD_INT 1
2790: EQUAL
2791: PUSH
2792: LD_VAR 0 1
2796: PPUSH
2797: CALL_OW 261
2801: PUSH
2802: LD_INT 80
2804: LESS
2805: AND
2806: IFFALSE 2819
// begin Query ( FuelLevel ) ;
2808: LD_STRING FuelLevel
2810: PPUSH
2811: CALL_OW 97
// exit ;
2815: POP
2816: POP
2817: GO 3153
// end ;
2819: GO 2775
2821: POP
2822: POP
// disable ;
2823: DISABLE
// saveVehicles := [ ] ;
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: EMPTY
2830: ST_TO_ADDR
// for i in tmp do
2831: LD_ADDR_VAR 0 1
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: FOR_IN
2842: IFFALSE 2951
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
2844: LD_ADDR_VAR 0 3
2848: PUSH
2849: LD_VAR 0 3
2853: PPUSH
2854: LD_VAR 0 1
2858: PPUSH
2859: CALL_OW 265
2863: PUSH
2864: LD_VAR 0 1
2868: PPUSH
2869: CALL_OW 262
2873: PUSH
2874: LD_VAR 0 1
2878: PPUSH
2879: CALL_OW 263
2883: PUSH
2884: LD_VAR 0 1
2888: PPUSH
2889: CALL_OW 264
2893: PUSH
2894: LD_VAR 0 1
2898: PPUSH
2899: CALL_OW 248
2903: PUSH
2904: LD_VAR 0 1
2908: PPUSH
2909: CALL_OW 261
2913: PUSH
2914: LD_VAR 0 1
2918: PPUSH
2919: CALL_OW 271
2923: PUSH
2924: LD_VAR 0 1
2928: PPUSH
2929: CALL_OW 311
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL 40746 0 2
2948: ST_TO_ADDR
2949: GO 2841
2951: POP
2952: POP
// SaveCharacters ( Schulz , 09_Schulz ) ;
2953: LD_EXP 18
2957: PPUSH
2958: LD_STRING 09_Schulz
2960: PPUSH
2961: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
2965: LD_EXP 18
2969: PPUSH
2970: LD_STRING 09_Schulz_ID
2972: PPUSH
2973: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
2977: LD_EXP 20
2981: PPUSH
2982: LD_STRING 09_Lemmy
2984: PPUSH
2985: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
2989: LD_EXP 20
2993: PPUSH
2994: LD_STRING 09_Lemmy_ID
2996: PPUSH
2997: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
3001: LD_EXP 22
3005: PPUSH
3006: LD_STRING 09_Nia
3008: PPUSH
3009: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
3013: LD_EXP 22
3017: PPUSH
3018: LD_STRING 09_Nia_ID
3020: PPUSH
3021: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
3025: LD_EXP 21
3029: PPUSH
3030: LD_STRING 09_Mia
3032: PPUSH
3033: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
3037: LD_EXP 21
3041: PPUSH
3042: LD_STRING 09_Mia_ID
3044: PPUSH
3045: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
3049: LD_EXP 23
3053: PPUSH
3054: LD_STRING 09_Jenna
3056: PPUSH
3057: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
3061: LD_EXP 23
3065: PPUSH
3066: LD_STRING 09_Jenna_ID
3068: PPUSH
3069: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
3073: LD_EXP 26
3077: PPUSH
3078: LD_STRING 09_schulzSecondSquad
3080: PPUSH
3081: CALL_OW 38
// for i := 1 to schulzSecondSquad do
3085: LD_ADDR_VAR 0 1
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_EXP 26
3099: PUSH
3100: FOR_TO
3101: IFFALSE 3129
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
3103: LD_EXP 26
3107: PUSH
3108: LD_VAR 0 1
3112: ARRAY
3113: PPUSH
3114: LD_STRING 09_random_ID_
3116: PUSH
3117: LD_VAR 0 1
3121: STR
3122: PPUSH
3123: CALL_OW 39
3127: GO 3100
3129: POP
3130: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
3131: LD_VAR 0 3
3135: PPUSH
3136: LD_STRING 09_vehicles
3138: PPUSH
3139: CALL_OW 39
// ChangeMap ( 1 , %2 ) ;
3143: LD_INT 1
3145: PPUSH
3146: LD_STRING %2
3148: PPUSH
3149: CALL_OW 340
// end ; end_of_file
3153: PPOPN 3
3155: END
// every 0 0$25 + 0 0$30 trigger tick < 5 5$00 do
3156: LD_OWVAR 1
3160: PUSH
3161: LD_INT 10500
3163: LESS
3164: IFFALSE 3197
3166: GO 3168
3168: DISABLE
// begin enable ;
3169: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
3170: LD_INT 1
3172: PPUSH
3173: LD_INT 5
3175: PPUSH
3176: CALL_OW 12
3180: PPUSH
3181: LD_INT 85
3183: PPUSH
3184: LD_INT 44
3186: PPUSH
3187: LD_INT 30
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: CALL_OW 56
// end ;
3197: END
// every 0 0$45 trigger tick < 15 15$00 do
3198: LD_OWVAR 1
3202: PUSH
3203: LD_INT 31500
3205: LESS
3206: IFFALSE 3277
3208: GO 3210
3210: DISABLE
// begin enable ;
3211: ENABLE
// if Prob ( 50 ) then
3212: LD_INT 50
3214: PPUSH
3215: CALL_OW 13
3219: IFFALSE 3250
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 5
3226: PPUSH
3227: CALL_OW 12
3231: PPUSH
3232: LD_INT 72
3234: PPUSH
3235: LD_INT 109
3237: PPUSH
3238: LD_INT 22
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: CALL_OW 56
3248: GO 3277
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
3250: LD_INT 1
3252: PPUSH
3253: LD_INT 5
3255: PPUSH
3256: CALL_OW 12
3260: PPUSH
3261: LD_INT 140
3263: PPUSH
3264: LD_INT 73
3266: PPUSH
3267: LD_INT 22
3269: PPUSH
3270: LD_INT 1
3272: PPUSH
3273: CALL_OW 56
3277: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
// if exist_mode then
3282: LD_VAR 0 2
3286: IFFALSE 3311
// unit := CreateCharacter ( prefix & ident ) else
3288: LD_ADDR_VAR 0 5
3292: PUSH
3293: LD_VAR 0 3
3297: PUSH
3298: LD_VAR 0 1
3302: STR
3303: PPUSH
3304: CALL_OW 34
3308: ST_TO_ADDR
3309: GO 3326
// unit := NewCharacter ( ident ) ;
3311: LD_ADDR_VAR 0 5
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 25
3325: ST_TO_ADDR
// result := unit ;
3326: LD_ADDR_VAR 0 4
3330: PUSH
3331: LD_VAR 0 5
3335: ST_TO_ADDR
// end ;
3336: LD_VAR 0 4
3340: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3341: LD_INT 0
3343: PPUSH
3344: PPUSH
// if not side or not nation then
3345: LD_VAR 0 1
3349: NOT
3350: PUSH
3351: LD_VAR 0 2
3355: NOT
3356: OR
3357: IFFALSE 3361
// exit ;
3359: GO 4129
// case nation of nation_american :
3361: LD_VAR 0 2
3365: PUSH
3366: LD_INT 1
3368: DOUBLE
3369: EQUAL
3370: IFTRUE 3374
3372: GO 3588
3374: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_INT 35
3382: PUSH
3383: LD_INT 45
3385: PUSH
3386: LD_INT 46
3388: PUSH
3389: LD_INT 47
3391: PUSH
3392: LD_INT 82
3394: PUSH
3395: LD_INT 83
3397: PUSH
3398: LD_INT 84
3400: PUSH
3401: LD_INT 85
3403: PUSH
3404: LD_INT 86
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 2
3412: PUSH
3413: LD_INT 6
3415: PUSH
3416: LD_INT 15
3418: PUSH
3419: LD_INT 16
3421: PUSH
3422: LD_INT 7
3424: PUSH
3425: LD_INT 12
3427: PUSH
3428: LD_INT 13
3430: PUSH
3431: LD_INT 10
3433: PUSH
3434: LD_INT 14
3436: PUSH
3437: LD_INT 20
3439: PUSH
3440: LD_INT 21
3442: PUSH
3443: LD_INT 22
3445: PUSH
3446: LD_INT 25
3448: PUSH
3449: LD_INT 32
3451: PUSH
3452: LD_INT 27
3454: PUSH
3455: LD_INT 36
3457: PUSH
3458: LD_INT 69
3460: PUSH
3461: LD_INT 39
3463: PUSH
3464: LD_INT 34
3466: PUSH
3467: LD_INT 40
3469: PUSH
3470: LD_INT 48
3472: PUSH
3473: LD_INT 49
3475: PUSH
3476: LD_INT 50
3478: PUSH
3479: LD_INT 51
3481: PUSH
3482: LD_INT 52
3484: PUSH
3485: LD_INT 53
3487: PUSH
3488: LD_INT 54
3490: PUSH
3491: LD_INT 55
3493: PUSH
3494: LD_INT 56
3496: PUSH
3497: LD_INT 57
3499: PUSH
3500: LD_INT 58
3502: PUSH
3503: LD_INT 59
3505: PUSH
3506: LD_INT 60
3508: PUSH
3509: LD_INT 61
3511: PUSH
3512: LD_INT 62
3514: PUSH
3515: LD_INT 80
3517: PUSH
3518: LD_INT 82
3520: PUSH
3521: LD_INT 83
3523: PUSH
3524: LD_INT 84
3526: PUSH
3527: LD_INT 85
3529: PUSH
3530: LD_INT 86
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: ST_TO_ADDR
3586: GO 4053
3588: LD_INT 2
3590: DOUBLE
3591: EQUAL
3592: IFTRUE 3596
3594: GO 3822
3596: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3597: LD_ADDR_VAR 0 4
3601: PUSH
3602: LD_INT 35
3604: PUSH
3605: LD_INT 45
3607: PUSH
3608: LD_INT 46
3610: PUSH
3611: LD_INT 47
3613: PUSH
3614: LD_INT 82
3616: PUSH
3617: LD_INT 83
3619: PUSH
3620: LD_INT 84
3622: PUSH
3623: LD_INT 85
3625: PUSH
3626: LD_INT 87
3628: PUSH
3629: LD_INT 70
3631: PUSH
3632: LD_INT 1
3634: PUSH
3635: LD_INT 11
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 4
3643: PUSH
3644: LD_INT 5
3646: PUSH
3647: LD_INT 6
3649: PUSH
3650: LD_INT 15
3652: PUSH
3653: LD_INT 18
3655: PUSH
3656: LD_INT 7
3658: PUSH
3659: LD_INT 17
3661: PUSH
3662: LD_INT 8
3664: PUSH
3665: LD_INT 20
3667: PUSH
3668: LD_INT 21
3670: PUSH
3671: LD_INT 22
3673: PUSH
3674: LD_INT 72
3676: PUSH
3677: LD_INT 26
3679: PUSH
3680: LD_INT 69
3682: PUSH
3683: LD_INT 39
3685: PUSH
3686: LD_INT 40
3688: PUSH
3689: LD_INT 41
3691: PUSH
3692: LD_INT 42
3694: PUSH
3695: LD_INT 43
3697: PUSH
3698: LD_INT 48
3700: PUSH
3701: LD_INT 49
3703: PUSH
3704: LD_INT 50
3706: PUSH
3707: LD_INT 51
3709: PUSH
3710: LD_INT 52
3712: PUSH
3713: LD_INT 53
3715: PUSH
3716: LD_INT 54
3718: PUSH
3719: LD_INT 55
3721: PUSH
3722: LD_INT 56
3724: PUSH
3725: LD_INT 60
3727: PUSH
3728: LD_INT 61
3730: PUSH
3731: LD_INT 62
3733: PUSH
3734: LD_INT 66
3736: PUSH
3737: LD_INT 67
3739: PUSH
3740: LD_INT 68
3742: PUSH
3743: LD_INT 81
3745: PUSH
3746: LD_INT 82
3748: PUSH
3749: LD_INT 83
3751: PUSH
3752: LD_INT 84
3754: PUSH
3755: LD_INT 85
3757: PUSH
3758: LD_INT 87
3760: PUSH
3761: LD_INT 88
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
3820: GO 4053
3822: LD_INT 3
3824: DOUBLE
3825: EQUAL
3826: IFTRUE 3830
3828: GO 4052
3830: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3831: LD_ADDR_VAR 0 4
3835: PUSH
3836: LD_INT 46
3838: PUSH
3839: LD_INT 47
3841: PUSH
3842: LD_INT 1
3844: PUSH
3845: LD_INT 2
3847: PUSH
3848: LD_INT 82
3850: PUSH
3851: LD_INT 83
3853: PUSH
3854: LD_INT 84
3856: PUSH
3857: LD_INT 85
3859: PUSH
3860: LD_INT 86
3862: PUSH
3863: LD_INT 11
3865: PUSH
3866: LD_INT 9
3868: PUSH
3869: LD_INT 20
3871: PUSH
3872: LD_INT 19
3874: PUSH
3875: LD_INT 21
3877: PUSH
3878: LD_INT 24
3880: PUSH
3881: LD_INT 22
3883: PUSH
3884: LD_INT 25
3886: PUSH
3887: LD_INT 28
3889: PUSH
3890: LD_INT 29
3892: PUSH
3893: LD_INT 30
3895: PUSH
3896: LD_INT 31
3898: PUSH
3899: LD_INT 37
3901: PUSH
3902: LD_INT 38
3904: PUSH
3905: LD_INT 32
3907: PUSH
3908: LD_INT 27
3910: PUSH
3911: LD_INT 33
3913: PUSH
3914: LD_INT 69
3916: PUSH
3917: LD_INT 39
3919: PUSH
3920: LD_INT 34
3922: PUSH
3923: LD_INT 40
3925: PUSH
3926: LD_INT 71
3928: PUSH
3929: LD_INT 23
3931: PUSH
3932: LD_INT 44
3934: PUSH
3935: LD_INT 48
3937: PUSH
3938: LD_INT 49
3940: PUSH
3941: LD_INT 50
3943: PUSH
3944: LD_INT 51
3946: PUSH
3947: LD_INT 52
3949: PUSH
3950: LD_INT 53
3952: PUSH
3953: LD_INT 54
3955: PUSH
3956: LD_INT 55
3958: PUSH
3959: LD_INT 56
3961: PUSH
3962: LD_INT 57
3964: PUSH
3965: LD_INT 58
3967: PUSH
3968: LD_INT 59
3970: PUSH
3971: LD_INT 63
3973: PUSH
3974: LD_INT 64
3976: PUSH
3977: LD_INT 65
3979: PUSH
3980: LD_INT 82
3982: PUSH
3983: LD_INT 83
3985: PUSH
3986: LD_INT 84
3988: PUSH
3989: LD_INT 85
3991: PUSH
3992: LD_INT 86
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: ST_TO_ADDR
4050: GO 4053
4052: POP
// if state > - 1 and state < 3 then
4053: LD_VAR 0 3
4057: PUSH
4058: LD_INT 1
4060: NEG
4061: GREATER
4062: PUSH
4063: LD_VAR 0 3
4067: PUSH
4068: LD_INT 3
4070: LESS
4071: AND
4072: IFFALSE 4129
// for i in result do
4074: LD_ADDR_VAR 0 5
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4127
// if GetTech ( i , side ) <> state then
4087: LD_VAR 0 5
4091: PPUSH
4092: LD_VAR 0 1
4096: PPUSH
4097: CALL_OW 321
4101: PUSH
4102: LD_VAR 0 3
4106: NONEQUAL
4107: IFFALSE 4125
// result := result diff i ;
4109: LD_ADDR_VAR 0 4
4113: PUSH
4114: LD_VAR 0 4
4118: PUSH
4119: LD_VAR 0 5
4123: DIFF
4124: ST_TO_ADDR
4125: GO 4084
4127: POP
4128: POP
// end ;
4129: LD_VAR 0 4
4133: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4134: LD_INT 0
4136: PPUSH
4137: PPUSH
4138: PPUSH
// result := true ;
4139: LD_ADDR_VAR 0 3
4143: PUSH
4144: LD_INT 1
4146: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: LD_VAR 0 2
4156: PPUSH
4157: CALL_OW 480
4161: ST_TO_ADDR
// if not tmp then
4162: LD_VAR 0 5
4166: NOT
4167: IFFALSE 4171
// exit ;
4169: GO 4220
// for i in tmp do
4171: LD_ADDR_VAR 0 4
4175: PUSH
4176: LD_VAR 0 5
4180: PUSH
4181: FOR_IN
4182: IFFALSE 4218
// if GetTech ( i , side ) <> state_researched then
4184: LD_VAR 0 4
4188: PPUSH
4189: LD_VAR 0 1
4193: PPUSH
4194: CALL_OW 321
4198: PUSH
4199: LD_INT 2
4201: NONEQUAL
4202: IFFALSE 4216
// begin result := false ;
4204: LD_ADDR_VAR 0 3
4208: PUSH
4209: LD_INT 0
4211: ST_TO_ADDR
// exit ;
4212: POP
4213: POP
4214: GO 4220
// end ;
4216: GO 4181
4218: POP
4219: POP
// end ;
4220: LD_VAR 0 3
4224: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4225: LD_INT 0
4227: PPUSH
4228: PPUSH
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
4236: PPUSH
4237: PPUSH
4238: PPUSH
4239: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4240: LD_VAR 0 1
4244: NOT
4245: PUSH
4246: LD_VAR 0 1
4250: PPUSH
4251: CALL_OW 257
4255: PUSH
4256: LD_INT 9
4258: NONEQUAL
4259: OR
4260: IFFALSE 4264
// exit ;
4262: GO 4837
// side := GetSide ( unit ) ;
4264: LD_ADDR_VAR 0 9
4268: PUSH
4269: LD_VAR 0 1
4273: PPUSH
4274: CALL_OW 255
4278: ST_TO_ADDR
// tech_space := tech_spacanom ;
4279: LD_ADDR_VAR 0 12
4283: PUSH
4284: LD_INT 29
4286: ST_TO_ADDR
// tech_time := tech_taurad ;
4287: LD_ADDR_VAR 0 13
4291: PUSH
4292: LD_INT 28
4294: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4295: LD_ADDR_VAR 0 11
4299: PUSH
4300: LD_VAR 0 1
4304: PPUSH
4305: CALL_OW 310
4309: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4310: LD_VAR 0 11
4314: PPUSH
4315: CALL_OW 247
4319: PUSH
4320: LD_INT 2
4322: EQUAL
4323: IFFALSE 4327
// exit ;
4325: GO 4837
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4327: LD_ADDR_VAR 0 8
4331: PUSH
4332: LD_INT 81
4334: PUSH
4335: LD_VAR 0 9
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: LD_INT 3
4346: PUSH
4347: LD_INT 21
4349: PUSH
4350: LD_INT 3
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PPUSH
4365: CALL_OW 69
4369: ST_TO_ADDR
// if not tmp then
4370: LD_VAR 0 8
4374: NOT
4375: IFFALSE 4379
// exit ;
4377: GO 4837
// if in_unit then
4379: LD_VAR 0 11
4383: IFFALSE 4407
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4385: LD_ADDR_VAR 0 10
4389: PUSH
4390: LD_VAR 0 8
4394: PPUSH
4395: LD_VAR 0 11
4399: PPUSH
4400: CALL_OW 74
4404: ST_TO_ADDR
4405: GO 4427
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4407: LD_ADDR_VAR 0 10
4411: PUSH
4412: LD_VAR 0 8
4416: PPUSH
4417: LD_VAR 0 1
4421: PPUSH
4422: CALL_OW 74
4426: ST_TO_ADDR
// if not enemy then
4427: LD_VAR 0 10
4431: NOT
4432: IFFALSE 4436
// exit ;
4434: GO 4837
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4436: LD_VAR 0 11
4440: PUSH
4441: LD_VAR 0 11
4445: PPUSH
4446: LD_VAR 0 10
4450: PPUSH
4451: CALL_OW 296
4455: PUSH
4456: LD_INT 13
4458: GREATER
4459: AND
4460: PUSH
4461: LD_VAR 0 1
4465: PPUSH
4466: LD_VAR 0 10
4470: PPUSH
4471: CALL_OW 296
4475: PUSH
4476: LD_INT 12
4478: GREATER
4479: OR
4480: IFFALSE 4484
// exit ;
4482: GO 4837
// missile := [ 1 ] ;
4484: LD_ADDR_VAR 0 14
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4495: LD_VAR 0 9
4499: PPUSH
4500: LD_VAR 0 12
4504: PPUSH
4505: CALL_OW 325
4509: IFFALSE 4538
// missile := Replace ( missile , missile + 1 , 2 ) ;
4511: LD_ADDR_VAR 0 14
4515: PUSH
4516: LD_VAR 0 14
4520: PPUSH
4521: LD_VAR 0 14
4525: PUSH
4526: LD_INT 1
4528: PLUS
4529: PPUSH
4530: LD_INT 2
4532: PPUSH
4533: CALL_OW 1
4537: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4538: LD_VAR 0 9
4542: PPUSH
4543: LD_VAR 0 13
4547: PPUSH
4548: CALL_OW 325
4552: PUSH
4553: LD_VAR 0 10
4557: PPUSH
4558: CALL_OW 255
4562: PPUSH
4563: LD_VAR 0 13
4567: PPUSH
4568: CALL_OW 325
4572: NOT
4573: AND
4574: IFFALSE 4603
// missile := Replace ( missile , missile + 1 , 3 ) ;
4576: LD_ADDR_VAR 0 14
4580: PUSH
4581: LD_VAR 0 14
4585: PPUSH
4586: LD_VAR 0 14
4590: PUSH
4591: LD_INT 1
4593: PLUS
4594: PPUSH
4595: LD_INT 3
4597: PPUSH
4598: CALL_OW 1
4602: ST_TO_ADDR
// if missile < 2 then
4603: LD_VAR 0 14
4607: PUSH
4608: LD_INT 2
4610: LESS
4611: IFFALSE 4615
// exit ;
4613: GO 4837
// x := GetX ( enemy ) ;
4615: LD_ADDR_VAR 0 4
4619: PUSH
4620: LD_VAR 0 10
4624: PPUSH
4625: CALL_OW 250
4629: ST_TO_ADDR
// y := GetY ( enemy ) ;
4630: LD_ADDR_VAR 0 5
4634: PUSH
4635: LD_VAR 0 10
4639: PPUSH
4640: CALL_OW 251
4644: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4645: LD_ADDR_VAR 0 6
4649: PUSH
4650: LD_VAR 0 4
4654: PUSH
4655: LD_INT 1
4657: NEG
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 12
4666: PLUS
4667: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4668: LD_ADDR_VAR 0 7
4672: PUSH
4673: LD_VAR 0 5
4677: PUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: CALL_OW 12
4689: PLUS
4690: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4691: LD_VAR 0 6
4695: PPUSH
4696: LD_VAR 0 7
4700: PPUSH
4701: CALL_OW 488
4705: NOT
4706: IFFALSE 4728
// begin _x := x ;
4708: LD_ADDR_VAR 0 6
4712: PUSH
4713: LD_VAR 0 4
4717: ST_TO_ADDR
// _y := y ;
4718: LD_ADDR_VAR 0 7
4722: PUSH
4723: LD_VAR 0 5
4727: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4728: LD_ADDR_VAR 0 3
4732: PUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_VAR 0 14
4740: PPUSH
4741: CALL_OW 12
4745: ST_TO_ADDR
// case i of 1 :
4746: LD_VAR 0 3
4750: PUSH
4751: LD_INT 1
4753: DOUBLE
4754: EQUAL
4755: IFTRUE 4759
4757: GO 4776
4759: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_VAR 0 10
4769: PPUSH
4770: CALL_OW 115
4774: GO 4837
4776: LD_INT 2
4778: DOUBLE
4779: EQUAL
4780: IFTRUE 4784
4782: GO 4806
4784: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4785: LD_VAR 0 1
4789: PPUSH
4790: LD_VAR 0 6
4794: PPUSH
4795: LD_VAR 0 7
4799: PPUSH
4800: CALL_OW 153
4804: GO 4837
4806: LD_INT 3
4808: DOUBLE
4809: EQUAL
4810: IFTRUE 4814
4812: GO 4836
4814: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4815: LD_VAR 0 1
4819: PPUSH
4820: LD_VAR 0 6
4824: PPUSH
4825: LD_VAR 0 7
4829: PPUSH
4830: CALL_OW 154
4834: GO 4837
4836: POP
// end ;
4837: LD_VAR 0 2
4841: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4842: LD_INT 0
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
// if not unit or not building then
4850: LD_VAR 0 1
4854: NOT
4855: PUSH
4856: LD_VAR 0 2
4860: NOT
4861: OR
4862: IFFALSE 4866
// exit ;
4864: GO 5024
// x := GetX ( building ) ;
4866: LD_ADDR_VAR 0 5
4870: PUSH
4871: LD_VAR 0 2
4875: PPUSH
4876: CALL_OW 250
4880: ST_TO_ADDR
// y := GetY ( building ) ;
4881: LD_ADDR_VAR 0 6
4885: PUSH
4886: LD_VAR 0 2
4890: PPUSH
4891: CALL_OW 251
4895: ST_TO_ADDR
// for i = 0 to 5 do
4896: LD_ADDR_VAR 0 4
4900: PUSH
4901: DOUBLE
4902: LD_INT 0
4904: DEC
4905: ST_TO_ADDR
4906: LD_INT 5
4908: PUSH
4909: FOR_TO
4910: IFFALSE 5022
// begin _x := ShiftX ( x , i , 3 ) ;
4912: LD_ADDR_VAR 0 7
4916: PUSH
4917: LD_VAR 0 5
4921: PPUSH
4922: LD_VAR 0 4
4926: PPUSH
4927: LD_INT 3
4929: PPUSH
4930: CALL_OW 272
4934: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4935: LD_ADDR_VAR 0 8
4939: PUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: LD_VAR 0 4
4949: PPUSH
4950: LD_INT 3
4952: PPUSH
4953: CALL_OW 273
4957: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4958: LD_VAR 0 7
4962: PPUSH
4963: LD_VAR 0 8
4967: PPUSH
4968: CALL_OW 488
4972: NOT
4973: IFFALSE 4977
// continue ;
4975: GO 4909
// if HexInfo ( _x , _y ) = 0 then
4977: LD_VAR 0 7
4981: PPUSH
4982: LD_VAR 0 8
4986: PPUSH
4987: CALL_OW 428
4991: PUSH
4992: LD_INT 0
4994: EQUAL
4995: IFFALSE 5020
// begin ComMoveXY ( unit , _x , _y ) ;
4997: LD_VAR 0 1
5001: PPUSH
5002: LD_VAR 0 7
5006: PPUSH
5007: LD_VAR 0 8
5011: PPUSH
5012: CALL_OW 111
// exit ;
5016: POP
5017: POP
5018: GO 5024
// end ; end ;
5020: GO 4909
5022: POP
5023: POP
// end ;
5024: LD_VAR 0 3
5028: RET
// export function ScanBase ( side , base_area ) ; begin
5029: LD_INT 0
5031: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5032: LD_ADDR_VAR 0 3
5036: PUSH
5037: LD_VAR 0 2
5041: PPUSH
5042: LD_INT 81
5044: PUSH
5045: LD_VAR 0 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PPUSH
5054: CALL_OW 70
5058: ST_TO_ADDR
// end ;
5059: LD_VAR 0 3
5063: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5064: LD_INT 0
5066: PPUSH
5067: PPUSH
5068: PPUSH
5069: PPUSH
// result := false ;
5070: LD_ADDR_VAR 0 2
5074: PUSH
5075: LD_INT 0
5077: ST_TO_ADDR
// side := GetSide ( unit ) ;
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: LD_VAR 0 1
5087: PPUSH
5088: CALL_OW 255
5092: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5093: LD_ADDR_VAR 0 4
5097: PUSH
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL_OW 248
5107: ST_TO_ADDR
// case nat of 1 :
5108: LD_VAR 0 4
5112: PUSH
5113: LD_INT 1
5115: DOUBLE
5116: EQUAL
5117: IFTRUE 5121
5119: GO 5132
5121: POP
// tech := tech_lassight ; 2 :
5122: LD_ADDR_VAR 0 5
5126: PUSH
5127: LD_INT 12
5129: ST_TO_ADDR
5130: GO 5171
5132: LD_INT 2
5134: DOUBLE
5135: EQUAL
5136: IFTRUE 5140
5138: GO 5151
5140: POP
// tech := tech_mortar ; 3 :
5141: LD_ADDR_VAR 0 5
5145: PUSH
5146: LD_INT 41
5148: ST_TO_ADDR
5149: GO 5171
5151: LD_INT 3
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5159
5157: GO 5170
5159: POP
// tech := tech_bazooka ; end ;
5160: LD_ADDR_VAR 0 5
5164: PUSH
5165: LD_INT 44
5167: ST_TO_ADDR
5168: GO 5171
5170: POP
// if Researched ( side , tech ) then
5171: LD_VAR 0 3
5175: PPUSH
5176: LD_VAR 0 5
5180: PPUSH
5181: CALL_OW 325
5185: IFFALSE 5212
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_INT 5
5194: PUSH
5195: LD_INT 8
5197: PUSH
5198: LD_INT 9
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: PUSH
5206: LD_VAR 0 4
5210: ARRAY
5211: ST_TO_ADDR
// end ;
5212: LD_VAR 0 2
5216: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5217: LD_INT 0
5219: PPUSH
5220: PPUSH
5221: PPUSH
// if not mines then
5222: LD_VAR 0 2
5226: NOT
5227: IFFALSE 5231
// exit ;
5229: GO 5375
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5231: LD_ADDR_VAR 0 5
5235: PUSH
5236: LD_INT 81
5238: PUSH
5239: LD_VAR 0 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 3
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 3
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 69
5273: ST_TO_ADDR
// for i in mines do
5274: LD_ADDR_VAR 0 4
5278: PUSH
5279: LD_VAR 0 2
5283: PUSH
5284: FOR_IN
5285: IFFALSE 5373
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5287: LD_VAR 0 4
5291: PUSH
5292: LD_INT 1
5294: ARRAY
5295: PPUSH
5296: LD_VAR 0 4
5300: PUSH
5301: LD_INT 2
5303: ARRAY
5304: PPUSH
5305: CALL_OW 458
5309: NOT
5310: IFFALSE 5314
// continue ;
5312: GO 5284
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5314: LD_VAR 0 4
5318: PUSH
5319: LD_INT 1
5321: ARRAY
5322: PPUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 2
5330: ARRAY
5331: PPUSH
5332: CALL_OW 428
5336: PUSH
5337: LD_VAR 0 5
5341: IN
5342: IFFALSE 5371
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5344: LD_VAR 0 4
5348: PUSH
5349: LD_INT 1
5351: ARRAY
5352: PPUSH
5353: LD_VAR 0 4
5357: PUSH
5358: LD_INT 2
5360: ARRAY
5361: PPUSH
5362: LD_VAR 0 1
5366: PPUSH
5367: CALL_OW 456
// end ;
5371: GO 5284
5373: POP
5374: POP
// end ;
5375: LD_VAR 0 3
5379: RET
// export function Count ( array ) ; var i ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
// result := 0 ;
5384: LD_ADDR_VAR 0 2
5388: PUSH
5389: LD_INT 0
5391: ST_TO_ADDR
// for i in array do
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 1
5401: PUSH
5402: FOR_IN
5403: IFFALSE 5427
// if i then
5405: LD_VAR 0 3
5409: IFFALSE 5425
// result := result + 1 ;
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 2
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: ST_TO_ADDR
5425: GO 5402
5427: POP
5428: POP
// end ;
5429: LD_VAR 0 2
5433: RET
// export function IsEmpty ( building ) ; begin
5434: LD_INT 0
5436: PPUSH
// if not building then
5437: LD_VAR 0 1
5441: NOT
5442: IFFALSE 5446
// exit ;
5444: GO 5489
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: LD_VAR 0 1
5455: PUSH
5456: LD_INT 22
5458: PUSH
5459: LD_VAR 0 1
5463: PPUSH
5464: CALL_OW 255
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 58
5475: PUSH
5476: EMPTY
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 69
5487: IN
5488: ST_TO_ADDR
// end ;
5489: LD_VAR 0 2
5493: RET
// export function IsNotFull ( building ) ; var places ; begin
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
// if not building then
5498: LD_VAR 0 1
5502: NOT
5503: IFFALSE 5507
// exit ;
5505: GO 5678
// result := false ;
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
// places := 0 ;
5515: LD_ADDR_VAR 0 3
5519: PUSH
5520: LD_INT 0
5522: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5523: LD_VAR 0 1
5527: PPUSH
5528: CALL_OW 266
5532: PUSH
5533: LD_INT 0
5535: DOUBLE
5536: EQUAL
5537: IFTRUE 5595
5539: LD_INT 1
5541: DOUBLE
5542: EQUAL
5543: IFTRUE 5595
5545: LD_INT 6
5547: DOUBLE
5548: EQUAL
5549: IFTRUE 5595
5551: LD_INT 7
5553: DOUBLE
5554: EQUAL
5555: IFTRUE 5595
5557: LD_INT 8
5559: DOUBLE
5560: EQUAL
5561: IFTRUE 5595
5563: LD_INT 4
5565: DOUBLE
5566: EQUAL
5567: IFTRUE 5595
5569: LD_INT 5
5571: DOUBLE
5572: EQUAL
5573: IFTRUE 5595
5575: LD_INT 2
5577: DOUBLE
5578: EQUAL
5579: IFTRUE 5595
5581: LD_INT 3
5583: DOUBLE
5584: EQUAL
5585: IFTRUE 5595
5587: LD_INT 35
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5606
5595: POP
// places := 6 ; b_bunker , b_breastwork :
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: LD_INT 6
5603: ST_TO_ADDR
5604: GO 5651
5606: LD_INT 32
5608: DOUBLE
5609: EQUAL
5610: IFTRUE 5620
5612: LD_INT 31
5614: DOUBLE
5615: EQUAL
5616: IFTRUE 5620
5618: GO 5631
5620: POP
// places := 1 ; b_control_tower :
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
5629: GO 5651
5631: LD_INT 36
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5650
5639: POP
// places := 3 ; end ;
5640: LD_ADDR_VAR 0 3
5644: PUSH
5645: LD_INT 3
5647: ST_TO_ADDR
5648: GO 5651
5650: POP
// if places then
5651: LD_VAR 0 3
5655: IFFALSE 5678
// result := UnitsInside ( building ) < places ;
5657: LD_ADDR_VAR 0 2
5661: PUSH
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 313
5671: PUSH
5672: LD_VAR 0 3
5676: LESS
5677: ST_TO_ADDR
// end ;
5678: LD_VAR 0 2
5682: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5683: LD_INT 0
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
// tmp := [ ] ;
5689: LD_ADDR_VAR 0 3
5693: PUSH
5694: EMPTY
5695: ST_TO_ADDR
// list := [ ] ;
5696: LD_ADDR_VAR 0 5
5700: PUSH
5701: EMPTY
5702: ST_TO_ADDR
// for i = 16 to 25 do
5703: LD_ADDR_VAR 0 4
5707: PUSH
5708: DOUBLE
5709: LD_INT 16
5711: DEC
5712: ST_TO_ADDR
5713: LD_INT 25
5715: PUSH
5716: FOR_TO
5717: IFFALSE 5790
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_VAR 0 3
5728: PUSH
5729: LD_INT 22
5731: PUSH
5732: LD_VAR 0 1
5736: PPUSH
5737: CALL_OW 255
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PUSH
5746: LD_INT 91
5748: PUSH
5749: LD_VAR 0 1
5753: PUSH
5754: LD_INT 6
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 30
5764: PUSH
5765: LD_VAR 0 4
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: LIST
5778: PUSH
5779: EMPTY
5780: LIST
5781: PPUSH
5782: CALL_OW 69
5786: ADD
5787: ST_TO_ADDR
5788: GO 5716
5790: POP
5791: POP
// for i = 1 to tmp do
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_VAR 0 3
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5896
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5810: LD_ADDR_VAR 0 5
5814: PUSH
5815: LD_VAR 0 5
5819: PUSH
5820: LD_VAR 0 3
5824: PUSH
5825: LD_VAR 0 4
5829: ARRAY
5830: PPUSH
5831: CALL_OW 266
5835: PUSH
5836: LD_VAR 0 3
5840: PUSH
5841: LD_VAR 0 4
5845: ARRAY
5846: PPUSH
5847: CALL_OW 250
5851: PUSH
5852: LD_VAR 0 3
5856: PUSH
5857: LD_VAR 0 4
5861: ARRAY
5862: PPUSH
5863: CALL_OW 251
5867: PUSH
5868: LD_VAR 0 3
5872: PUSH
5873: LD_VAR 0 4
5877: ARRAY
5878: PPUSH
5879: CALL_OW 254
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: PUSH
5890: EMPTY
5891: LIST
5892: ADD
5893: ST_TO_ADDR
5894: GO 5807
5896: POP
5897: POP
// result := list ;
5898: LD_ADDR_VAR 0 2
5902: PUSH
5903: LD_VAR 0 5
5907: ST_TO_ADDR
// end ;
5908: LD_VAR 0 2
5912: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5913: LD_INT 0
5915: PPUSH
5916: PPUSH
5917: PPUSH
5918: PPUSH
5919: PPUSH
5920: PPUSH
5921: PPUSH
// if not factory then
5922: LD_VAR 0 1
5926: NOT
5927: IFFALSE 5931
// exit ;
5929: GO 6524
// if control = control_apeman then
5931: LD_VAR 0 4
5935: PUSH
5936: LD_INT 5
5938: EQUAL
5939: IFFALSE 6048
// begin tmp := UnitsInside ( factory ) ;
5941: LD_ADDR_VAR 0 8
5945: PUSH
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL_OW 313
5955: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5956: LD_VAR 0 8
5960: PPUSH
5961: LD_INT 25
5963: PUSH
5964: LD_INT 12
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 72
5975: NOT
5976: IFFALSE 5986
// control := control_manual ;
5978: LD_ADDR_VAR 0 4
5982: PUSH
5983: LD_INT 1
5985: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5986: LD_ADDR_VAR 0 8
5990: PUSH
5991: LD_VAR 0 1
5995: PPUSH
5996: CALL 5683 0 1
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 8
6005: IFFALSE 6048
// begin for i in tmp do
6007: LD_ADDR_VAR 0 7
6011: PUSH
6012: LD_VAR 0 8
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6046
// if i [ 1 ] = b_ext_radio then
6020: LD_VAR 0 7
6024: PUSH
6025: LD_INT 1
6027: ARRAY
6028: PUSH
6029: LD_INT 22
6031: EQUAL
6032: IFFALSE 6044
// begin control := control_remote ;
6034: LD_ADDR_VAR 0 4
6038: PUSH
6039: LD_INT 2
6041: ST_TO_ADDR
// break ;
6042: GO 6046
// end ;
6044: GO 6017
6046: POP
6047: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6048: LD_VAR 0 1
6052: PPUSH
6053: LD_VAR 0 2
6057: PPUSH
6058: LD_VAR 0 3
6062: PPUSH
6063: LD_VAR 0 4
6067: PPUSH
6068: LD_VAR 0 5
6072: PPUSH
6073: CALL_OW 448
6077: IFFALSE 6112
// begin result := [ chassis , engine , control , weapon ] ;
6079: LD_ADDR_VAR 0 6
6083: PUSH
6084: LD_VAR 0 2
6088: PUSH
6089: LD_VAR 0 3
6093: PUSH
6094: LD_VAR 0 4
6098: PUSH
6099: LD_VAR 0 5
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: ST_TO_ADDR
// exit ;
6110: GO 6524
// end ; _chassis := AvailableChassisList ( factory ) ;
6112: LD_ADDR_VAR 0 9
6116: PUSH
6117: LD_VAR 0 1
6121: PPUSH
6122: CALL_OW 475
6126: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6127: LD_ADDR_VAR 0 11
6131: PUSH
6132: LD_VAR 0 1
6136: PPUSH
6137: CALL_OW 476
6141: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6142: LD_ADDR_VAR 0 12
6146: PUSH
6147: LD_VAR 0 1
6151: PPUSH
6152: CALL_OW 477
6156: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6157: LD_ADDR_VAR 0 10
6161: PUSH
6162: LD_VAR 0 1
6166: PPUSH
6167: CALL_OW 478
6171: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6172: LD_VAR 0 9
6176: NOT
6177: PUSH
6178: LD_VAR 0 11
6182: NOT
6183: OR
6184: PUSH
6185: LD_VAR 0 12
6189: NOT
6190: OR
6191: PUSH
6192: LD_VAR 0 10
6196: NOT
6197: OR
6198: IFFALSE 6233
// begin result := [ chassis , engine , control , weapon ] ;
6200: LD_ADDR_VAR 0 6
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: LD_VAR 0 3
6214: PUSH
6215: LD_VAR 0 4
6219: PUSH
6220: LD_VAR 0 5
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: ST_TO_ADDR
// exit ;
6231: GO 6524
// end ; if not chassis in _chassis then
6233: LD_VAR 0 2
6237: PUSH
6238: LD_VAR 0 9
6242: IN
6243: NOT
6244: IFFALSE 6270
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6246: LD_ADDR_VAR 0 2
6250: PUSH
6251: LD_VAR 0 9
6255: PUSH
6256: LD_INT 1
6258: PPUSH
6259: LD_VAR 0 9
6263: PPUSH
6264: CALL_OW 12
6268: ARRAY
6269: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6270: LD_VAR 0 2
6274: PPUSH
6275: LD_VAR 0 3
6279: PPUSH
6280: CALL 6529 0 2
6284: NOT
6285: IFFALSE 6344
// repeat engine := _engine [ 1 ] ;
6287: LD_ADDR_VAR 0 3
6291: PUSH
6292: LD_VAR 0 11
6296: PUSH
6297: LD_INT 1
6299: ARRAY
6300: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6301: LD_ADDR_VAR 0 11
6305: PUSH
6306: LD_VAR 0 11
6310: PPUSH
6311: LD_INT 1
6313: PPUSH
6314: CALL_OW 3
6318: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6319: LD_VAR 0 2
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL 6529 0 2
6333: PUSH
6334: LD_VAR 0 11
6338: PUSH
6339: EMPTY
6340: EQUAL
6341: OR
6342: IFFALSE 6287
// if not control in _control then
6344: LD_VAR 0 4
6348: PUSH
6349: LD_VAR 0 12
6353: IN
6354: NOT
6355: IFFALSE 6381
// control := _control [ rand ( 1 , _control ) ] ;
6357: LD_ADDR_VAR 0 4
6361: PUSH
6362: LD_VAR 0 12
6366: PUSH
6367: LD_INT 1
6369: PPUSH
6370: LD_VAR 0 12
6374: PPUSH
6375: CALL_OW 12
6379: ARRAY
6380: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_VAR 0 5
6390: PPUSH
6391: CALL 6749 0 2
6395: NOT
6396: IFFALSE 6455
// repeat weapon := _weapon [ 1 ] ;
6398: LD_ADDR_VAR 0 5
6402: PUSH
6403: LD_VAR 0 10
6407: PUSH
6408: LD_INT 1
6410: ARRAY
6411: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6412: LD_ADDR_VAR 0 10
6416: PUSH
6417: LD_VAR 0 10
6421: PPUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 3
6429: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6430: LD_VAR 0 2
6434: PPUSH
6435: LD_VAR 0 5
6439: PPUSH
6440: CALL 6749 0 2
6444: PUSH
6445: LD_VAR 0 10
6449: PUSH
6450: EMPTY
6451: EQUAL
6452: OR
6453: IFFALSE 6398
// result := [ ] ;
6455: LD_ADDR_VAR 0 6
6459: PUSH
6460: EMPTY
6461: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_VAR 0 4
6481: PPUSH
6482: LD_VAR 0 5
6486: PPUSH
6487: CALL_OW 448
6491: IFFALSE 6524
// result := [ chassis , engine , control , weapon ] ;
6493: LD_ADDR_VAR 0 6
6497: PUSH
6498: LD_VAR 0 2
6502: PUSH
6503: LD_VAR 0 3
6507: PUSH
6508: LD_VAR 0 4
6512: PUSH
6513: LD_VAR 0 5
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: ST_TO_ADDR
// end ;
6524: LD_VAR 0 6
6528: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6529: LD_INT 0
6531: PPUSH
// if not chassis or not engine then
6532: LD_VAR 0 1
6536: NOT
6537: PUSH
6538: LD_VAR 0 2
6542: NOT
6543: OR
6544: IFFALSE 6548
// exit ;
6546: GO 6744
// case engine of engine_solar :
6548: LD_VAR 0 2
6552: PUSH
6553: LD_INT 2
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6599
6561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 13
6575: PUSH
6576: LD_INT 14
6578: PUSH
6579: LD_INT 1
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 3
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: ST_TO_ADDR
6597: GO 6728
6599: LD_INT 1
6601: DOUBLE
6602: EQUAL
6603: IFTRUE 6607
6605: GO 6669
6607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 11
6615: PUSH
6616: LD_INT 12
6618: PUSH
6619: LD_INT 13
6621: PUSH
6622: LD_INT 14
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 4
6636: PUSH
6637: LD_INT 5
6639: PUSH
6640: LD_INT 21
6642: PUSH
6643: LD_INT 23
6645: PUSH
6646: LD_INT 22
6648: PUSH
6649: LD_INT 24
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: ST_TO_ADDR
6667: GO 6728
6669: LD_INT 3
6671: DOUBLE
6672: EQUAL
6673: IFTRUE 6677
6675: GO 6727
6677: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6678: LD_ADDR_VAR 0 3
6682: PUSH
6683: LD_INT 13
6685: PUSH
6686: LD_INT 14
6688: PUSH
6689: LD_INT 2
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: LD_INT 5
6700: PUSH
6701: LD_INT 21
6703: PUSH
6704: LD_INT 22
6706: PUSH
6707: LD_INT 23
6709: PUSH
6710: LD_INT 24
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: ST_TO_ADDR
6725: GO 6728
6727: POP
// result := ( chassis in result ) ;
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: LD_VAR 0 1
6737: PUSH
6738: LD_VAR 0 3
6742: IN
6743: ST_TO_ADDR
// end ;
6744: LD_VAR 0 3
6748: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6749: LD_INT 0
6751: PPUSH
// if not chassis or not weapon then
6752: LD_VAR 0 1
6756: NOT
6757: PUSH
6758: LD_VAR 0 2
6762: NOT
6763: OR
6764: IFFALSE 6768
// exit ;
6766: GO 7828
// case weapon of us_machine_gun :
6768: LD_VAR 0 2
6772: PUSH
6773: LD_INT 2
6775: DOUBLE
6776: EQUAL
6777: IFTRUE 6781
6779: GO 6811
6781: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 1
6789: PUSH
6790: LD_INT 2
6792: PUSH
6793: LD_INT 3
6795: PUSH
6796: LD_INT 4
6798: PUSH
6799: LD_INT 5
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: ST_TO_ADDR
6809: GO 7812
6811: LD_INT 3
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6849
6819: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: LD_INT 2
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 4
6836: PUSH
6837: LD_INT 5
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: ST_TO_ADDR
6847: GO 7812
6849: LD_INT 11
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6887
6857: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_INT 1
6865: PUSH
6866: LD_INT 2
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: LD_INT 4
6874: PUSH
6875: LD_INT 5
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: ST_TO_ADDR
6885: GO 7812
6887: LD_INT 4
6889: DOUBLE
6890: EQUAL
6891: IFTRUE 6895
6893: GO 6921
6895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 2
6903: PUSH
6904: LD_INT 3
6906: PUSH
6907: LD_INT 4
6909: PUSH
6910: LD_INT 5
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: ST_TO_ADDR
6919: GO 7812
6921: LD_INT 5
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 6955
6929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: LD_INT 4
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: ST_TO_ADDR
6953: GO 7812
6955: LD_INT 9
6957: DOUBLE
6958: EQUAL
6959: IFTRUE 6963
6961: GO 6989
6963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6964: LD_ADDR_VAR 0 3
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: LD_INT 5
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: ST_TO_ADDR
6987: GO 7812
6989: LD_INT 7
6991: DOUBLE
6992: EQUAL
6993: IFTRUE 6997
6995: GO 7023
6997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6998: LD_ADDR_VAR 0 3
7002: PUSH
7003: LD_INT 2
7005: PUSH
7006: LD_INT 3
7008: PUSH
7009: LD_INT 4
7011: PUSH
7012: LD_INT 5
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
7021: GO 7812
7023: LD_INT 12
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7057
7031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7032: LD_ADDR_VAR 0 3
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: LD_INT 4
7045: PUSH
7046: LD_INT 5
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: ST_TO_ADDR
7055: GO 7812
7057: LD_INT 13
7059: DOUBLE
7060: EQUAL
7061: IFTRUE 7065
7063: GO 7091
7065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7066: LD_ADDR_VAR 0 3
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 4
7079: PUSH
7080: LD_INT 5
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: ST_TO_ADDR
7089: GO 7812
7091: LD_INT 14
7093: DOUBLE
7094: EQUAL
7095: IFTRUE 7099
7097: GO 7117
7099: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7100: LD_ADDR_VAR 0 3
7104: PUSH
7105: LD_INT 4
7107: PUSH
7108: LD_INT 5
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: ST_TO_ADDR
7115: GO 7812
7117: LD_INT 6
7119: DOUBLE
7120: EQUAL
7121: IFTRUE 7125
7123: GO 7143
7125: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_INT 4
7133: PUSH
7134: LD_INT 5
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: ST_TO_ADDR
7141: GO 7812
7143: LD_INT 10
7145: DOUBLE
7146: EQUAL
7147: IFTRUE 7151
7149: GO 7169
7151: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7152: LD_ADDR_VAR 0 3
7156: PUSH
7157: LD_INT 4
7159: PUSH
7160: LD_INT 5
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: ST_TO_ADDR
7167: GO 7812
7169: LD_INT 22
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7203
7177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7178: LD_ADDR_VAR 0 3
7182: PUSH
7183: LD_INT 11
7185: PUSH
7186: LD_INT 12
7188: PUSH
7189: LD_INT 13
7191: PUSH
7192: LD_INT 14
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: ST_TO_ADDR
7201: GO 7812
7203: LD_INT 23
7205: DOUBLE
7206: EQUAL
7207: IFTRUE 7211
7209: GO 7237
7211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7212: LD_ADDR_VAR 0 3
7216: PUSH
7217: LD_INT 11
7219: PUSH
7220: LD_INT 12
7222: PUSH
7223: LD_INT 13
7225: PUSH
7226: LD_INT 14
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 7812
7237: LD_INT 24
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7271
7245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7246: LD_ADDR_VAR 0 3
7250: PUSH
7251: LD_INT 11
7253: PUSH
7254: LD_INT 12
7256: PUSH
7257: LD_INT 13
7259: PUSH
7260: LD_INT 14
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: ST_TO_ADDR
7269: GO 7812
7271: LD_INT 30
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7305
7279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7280: LD_ADDR_VAR 0 3
7284: PUSH
7285: LD_INT 11
7287: PUSH
7288: LD_INT 12
7290: PUSH
7291: LD_INT 13
7293: PUSH
7294: LD_INT 14
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: ST_TO_ADDR
7303: GO 7812
7305: LD_INT 25
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7331
7313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_INT 13
7321: PUSH
7322: LD_INT 14
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: ST_TO_ADDR
7329: GO 7812
7331: LD_INT 27
7333: DOUBLE
7334: EQUAL
7335: IFTRUE 7339
7337: GO 7357
7339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 13
7347: PUSH
7348: LD_INT 14
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: ST_TO_ADDR
7355: GO 7812
7357: LD_INT 92
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7391
7365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: ST_TO_ADDR
7389: GO 7812
7391: LD_INT 28
7393: DOUBLE
7394: EQUAL
7395: IFTRUE 7399
7397: GO 7417
7399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 13
7407: PUSH
7408: LD_INT 14
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: ST_TO_ADDR
7415: GO 7812
7417: LD_INT 29
7419: DOUBLE
7420: EQUAL
7421: IFTRUE 7425
7423: GO 7443
7425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_INT 13
7433: PUSH
7434: LD_INT 14
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 7812
7443: LD_INT 31
7445: DOUBLE
7446: EQUAL
7447: IFTRUE 7451
7449: GO 7469
7451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7452: LD_ADDR_VAR 0 3
7456: PUSH
7457: LD_INT 13
7459: PUSH
7460: LD_INT 14
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: ST_TO_ADDR
7467: GO 7812
7469: LD_INT 26
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7495
7477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 13
7485: PUSH
7486: LD_INT 14
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: ST_TO_ADDR
7493: GO 7812
7495: LD_INT 42
7497: DOUBLE
7498: EQUAL
7499: IFTRUE 7503
7501: GO 7529
7503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7504: LD_ADDR_VAR 0 3
7508: PUSH
7509: LD_INT 21
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 23
7517: PUSH
7518: LD_INT 24
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
7527: GO 7812
7529: LD_INT 43
7531: DOUBLE
7532: EQUAL
7533: IFTRUE 7537
7535: GO 7563
7537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7538: LD_ADDR_VAR 0 3
7542: PUSH
7543: LD_INT 21
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_INT 23
7551: PUSH
7552: LD_INT 24
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: ST_TO_ADDR
7561: GO 7812
7563: LD_INT 44
7565: DOUBLE
7566: EQUAL
7567: IFTRUE 7571
7569: GO 7597
7571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7572: LD_ADDR_VAR 0 3
7576: PUSH
7577: LD_INT 21
7579: PUSH
7580: LD_INT 22
7582: PUSH
7583: LD_INT 23
7585: PUSH
7586: LD_INT 24
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
7595: GO 7812
7597: LD_INT 45
7599: DOUBLE
7600: EQUAL
7601: IFTRUE 7605
7603: GO 7631
7605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7606: LD_ADDR_VAR 0 3
7610: PUSH
7611: LD_INT 21
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_INT 23
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: ST_TO_ADDR
7629: GO 7812
7631: LD_INT 49
7633: DOUBLE
7634: EQUAL
7635: IFTRUE 7639
7637: GO 7665
7639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7640: LD_ADDR_VAR 0 3
7644: PUSH
7645: LD_INT 21
7647: PUSH
7648: LD_INT 22
7650: PUSH
7651: LD_INT 23
7653: PUSH
7654: LD_INT 24
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: ST_TO_ADDR
7663: GO 7812
7665: LD_INT 51
7667: DOUBLE
7668: EQUAL
7669: IFTRUE 7673
7671: GO 7699
7673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7674: LD_ADDR_VAR 0 3
7678: PUSH
7679: LD_INT 21
7681: PUSH
7682: LD_INT 22
7684: PUSH
7685: LD_INT 23
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: ST_TO_ADDR
7697: GO 7812
7699: LD_INT 52
7701: DOUBLE
7702: EQUAL
7703: IFTRUE 7707
7705: GO 7733
7707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 21
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_INT 23
7721: PUSH
7722: LD_INT 24
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: ST_TO_ADDR
7731: GO 7812
7733: LD_INT 53
7735: DOUBLE
7736: EQUAL
7737: IFTRUE 7741
7739: GO 7759
7741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7742: LD_ADDR_VAR 0 3
7746: PUSH
7747: LD_INT 23
7749: PUSH
7750: LD_INT 24
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: ST_TO_ADDR
7757: GO 7812
7759: LD_INT 46
7761: DOUBLE
7762: EQUAL
7763: IFTRUE 7767
7765: GO 7785
7767: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7768: LD_ADDR_VAR 0 3
7772: PUSH
7773: LD_INT 23
7775: PUSH
7776: LD_INT 24
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: ST_TO_ADDR
7783: GO 7812
7785: LD_INT 47
7787: DOUBLE
7788: EQUAL
7789: IFTRUE 7793
7791: GO 7811
7793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7794: LD_ADDR_VAR 0 3
7798: PUSH
7799: LD_INT 23
7801: PUSH
7802: LD_INT 24
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: ST_TO_ADDR
7809: GO 7812
7811: POP
// result := ( chassis in result ) ;
7812: LD_ADDR_VAR 0 3
7816: PUSH
7817: LD_VAR 0 1
7821: PUSH
7822: LD_VAR 0 3
7826: IN
7827: ST_TO_ADDR
// end ;
7828: LD_VAR 0 3
7832: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7833: LD_INT 0
7835: PPUSH
7836: PPUSH
7837: PPUSH
7838: PPUSH
7839: PPUSH
7840: PPUSH
7841: PPUSH
// result := array ;
7842: LD_ADDR_VAR 0 5
7846: PUSH
7847: LD_VAR 0 1
7851: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7852: LD_VAR 0 1
7856: NOT
7857: PUSH
7858: LD_VAR 0 2
7862: NOT
7863: OR
7864: PUSH
7865: LD_VAR 0 3
7869: NOT
7870: OR
7871: PUSH
7872: LD_VAR 0 2
7876: PUSH
7877: LD_VAR 0 1
7881: GREATER
7882: OR
7883: PUSH
7884: LD_VAR 0 3
7888: PUSH
7889: LD_VAR 0 1
7893: GREATER
7894: OR
7895: IFFALSE 7899
// exit ;
7897: GO 8195
// if direction then
7899: LD_VAR 0 4
7903: IFFALSE 7967
// begin d := 1 ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: ST_TO_ADDR
// if i_from > i_to then
7913: LD_VAR 0 2
7917: PUSH
7918: LD_VAR 0 3
7922: GREATER
7923: IFFALSE 7949
// length := ( array - i_from ) + i_to else
7925: LD_ADDR_VAR 0 11
7929: PUSH
7930: LD_VAR 0 1
7934: PUSH
7935: LD_VAR 0 2
7939: MINUS
7940: PUSH
7941: LD_VAR 0 3
7945: PLUS
7946: ST_TO_ADDR
7947: GO 7965
// length := i_to - i_from ;
7949: LD_ADDR_VAR 0 11
7953: PUSH
7954: LD_VAR 0 3
7958: PUSH
7959: LD_VAR 0 2
7963: MINUS
7964: ST_TO_ADDR
// end else
7965: GO 8028
// begin d := - 1 ;
7967: LD_ADDR_VAR 0 9
7971: PUSH
7972: LD_INT 1
7974: NEG
7975: ST_TO_ADDR
// if i_from > i_to then
7976: LD_VAR 0 2
7980: PUSH
7981: LD_VAR 0 3
7985: GREATER
7986: IFFALSE 8006
// length := i_from - i_to else
7988: LD_ADDR_VAR 0 11
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_VAR 0 3
8002: MINUS
8003: ST_TO_ADDR
8004: GO 8028
// length := ( array - i_to ) + i_from ;
8006: LD_ADDR_VAR 0 11
8010: PUSH
8011: LD_VAR 0 1
8015: PUSH
8016: LD_VAR 0 3
8020: MINUS
8021: PUSH
8022: LD_VAR 0 2
8026: PLUS
8027: ST_TO_ADDR
// end ; if not length then
8028: LD_VAR 0 11
8032: NOT
8033: IFFALSE 8037
// exit ;
8035: GO 8195
// tmp := array ;
8037: LD_ADDR_VAR 0 10
8041: PUSH
8042: LD_VAR 0 1
8046: ST_TO_ADDR
// for i = 1 to length do
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: DOUBLE
8053: LD_INT 1
8055: DEC
8056: ST_TO_ADDR
8057: LD_VAR 0 11
8061: PUSH
8062: FOR_TO
8063: IFFALSE 8183
// begin for j = 1 to array do
8065: LD_ADDR_VAR 0 7
8069: PUSH
8070: DOUBLE
8071: LD_INT 1
8073: DEC
8074: ST_TO_ADDR
8075: LD_VAR 0 1
8079: PUSH
8080: FOR_TO
8081: IFFALSE 8169
// begin k := j + d ;
8083: LD_ADDR_VAR 0 8
8087: PUSH
8088: LD_VAR 0 7
8092: PUSH
8093: LD_VAR 0 9
8097: PLUS
8098: ST_TO_ADDR
// if k > array then
8099: LD_VAR 0 8
8103: PUSH
8104: LD_VAR 0 1
8108: GREATER
8109: IFFALSE 8119
// k := 1 ;
8111: LD_ADDR_VAR 0 8
8115: PUSH
8116: LD_INT 1
8118: ST_TO_ADDR
// if not k then
8119: LD_VAR 0 8
8123: NOT
8124: IFFALSE 8136
// k := array ;
8126: LD_ADDR_VAR 0 8
8130: PUSH
8131: LD_VAR 0 1
8135: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8136: LD_ADDR_VAR 0 10
8140: PUSH
8141: LD_VAR 0 10
8145: PPUSH
8146: LD_VAR 0 8
8150: PPUSH
8151: LD_VAR 0 1
8155: PUSH
8156: LD_VAR 0 7
8160: ARRAY
8161: PPUSH
8162: CALL_OW 1
8166: ST_TO_ADDR
// end ;
8167: GO 8080
8169: POP
8170: POP
// array := tmp ;
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 10
8180: ST_TO_ADDR
// end ;
8181: GO 8062
8183: POP
8184: POP
// result := array ;
8185: LD_ADDR_VAR 0 5
8189: PUSH
8190: LD_VAR 0 1
8194: ST_TO_ADDR
// end ;
8195: LD_VAR 0 5
8199: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8200: LD_INT 0
8202: PPUSH
8203: PPUSH
// result := 0 ;
8204: LD_ADDR_VAR 0 3
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// if not array or not value in array then
8212: LD_VAR 0 1
8216: NOT
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: LD_VAR 0 1
8227: IN
8228: NOT
8229: OR
8230: IFFALSE 8234
// exit ;
8232: GO 8288
// for i = 1 to array do
8234: LD_ADDR_VAR 0 4
8238: PUSH
8239: DOUBLE
8240: LD_INT 1
8242: DEC
8243: ST_TO_ADDR
8244: LD_VAR 0 1
8248: PUSH
8249: FOR_TO
8250: IFFALSE 8286
// if value = array [ i ] then
8252: LD_VAR 0 2
8256: PUSH
8257: LD_VAR 0 1
8261: PUSH
8262: LD_VAR 0 4
8266: ARRAY
8267: EQUAL
8268: IFFALSE 8284
// begin result := i ;
8270: LD_ADDR_VAR 0 3
8274: PUSH
8275: LD_VAR 0 4
8279: ST_TO_ADDR
// exit ;
8280: POP
8281: POP
8282: GO 8288
// end ;
8284: GO 8249
8286: POP
8287: POP
// end ;
8288: LD_VAR 0 3
8292: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8293: LD_INT 0
8295: PPUSH
// vc_chassis := chassis ;
8296: LD_ADDR_OWVAR 37
8300: PUSH
8301: LD_VAR 0 1
8305: ST_TO_ADDR
// vc_engine := engine ;
8306: LD_ADDR_OWVAR 39
8310: PUSH
8311: LD_VAR 0 2
8315: ST_TO_ADDR
// vc_control := control ;
8316: LD_ADDR_OWVAR 38
8320: PUSH
8321: LD_VAR 0 3
8325: ST_TO_ADDR
// vc_weapon := weapon ;
8326: LD_ADDR_OWVAR 40
8330: PUSH
8331: LD_VAR 0 4
8335: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8336: LD_ADDR_OWVAR 41
8340: PUSH
8341: LD_VAR 0 5
8345: ST_TO_ADDR
// end ;
8346: LD_VAR 0 6
8350: RET
// export function WantPlant ( unit ) ; var task ; begin
8351: LD_INT 0
8353: PPUSH
8354: PPUSH
// result := false ;
8355: LD_ADDR_VAR 0 2
8359: PUSH
8360: LD_INT 0
8362: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8363: LD_ADDR_VAR 0 3
8367: PUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 437
8377: ST_TO_ADDR
// if task then
8378: LD_VAR 0 3
8382: IFFALSE 8410
// if task [ 1 ] [ 1 ] = p then
8384: LD_VAR 0 3
8388: PUSH
8389: LD_INT 1
8391: ARRAY
8392: PUSH
8393: LD_INT 1
8395: ARRAY
8396: PUSH
8397: LD_STRING p
8399: EQUAL
8400: IFFALSE 8410
// result := true ;
8402: LD_ADDR_VAR 0 2
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// end ;
8410: LD_VAR 0 2
8414: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8415: LD_INT 0
8417: PPUSH
8418: PPUSH
8419: PPUSH
8420: PPUSH
// if pos < 1 then
8421: LD_VAR 0 2
8425: PUSH
8426: LD_INT 1
8428: LESS
8429: IFFALSE 8433
// exit ;
8431: GO 8736
// if pos = 1 then
8433: LD_VAR 0 2
8437: PUSH
8438: LD_INT 1
8440: EQUAL
8441: IFFALSE 8474
// result := Replace ( arr , pos [ 1 ] , value ) else
8443: LD_ADDR_VAR 0 4
8447: PUSH
8448: LD_VAR 0 1
8452: PPUSH
8453: LD_VAR 0 2
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PPUSH
8462: LD_VAR 0 3
8466: PPUSH
8467: CALL_OW 1
8471: ST_TO_ADDR
8472: GO 8736
// begin tmp := arr ;
8474: LD_ADDR_VAR 0 6
8478: PUSH
8479: LD_VAR 0 1
8483: ST_TO_ADDR
// s_arr := [ tmp ] ;
8484: LD_ADDR_VAR 0 7
8488: PUSH
8489: LD_VAR 0 6
8493: PUSH
8494: EMPTY
8495: LIST
8496: ST_TO_ADDR
// for i = 1 to pos - 1 do
8497: LD_ADDR_VAR 0 5
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_VAR 0 2
8511: PUSH
8512: LD_INT 1
8514: MINUS
8515: PUSH
8516: FOR_TO
8517: IFFALSE 8562
// begin tmp := tmp [ pos [ i ] ] ;
8519: LD_ADDR_VAR 0 6
8523: PUSH
8524: LD_VAR 0 6
8528: PUSH
8529: LD_VAR 0 2
8533: PUSH
8534: LD_VAR 0 5
8538: ARRAY
8539: ARRAY
8540: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8541: LD_ADDR_VAR 0 7
8545: PUSH
8546: LD_VAR 0 7
8550: PUSH
8551: LD_VAR 0 6
8555: PUSH
8556: EMPTY
8557: LIST
8558: ADD
8559: ST_TO_ADDR
// end ;
8560: GO 8516
8562: POP
8563: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8564: LD_ADDR_VAR 0 6
8568: PUSH
8569: LD_VAR 0 6
8573: PPUSH
8574: LD_VAR 0 2
8578: PUSH
8579: LD_VAR 0 2
8583: ARRAY
8584: PPUSH
8585: LD_VAR 0 3
8589: PPUSH
8590: CALL_OW 1
8594: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8595: LD_ADDR_VAR 0 7
8599: PUSH
8600: LD_VAR 0 7
8604: PPUSH
8605: LD_VAR 0 7
8609: PPUSH
8610: LD_VAR 0 6
8614: PPUSH
8615: CALL_OW 1
8619: ST_TO_ADDR
// for i = s_arr downto 2 do
8620: LD_ADDR_VAR 0 5
8624: PUSH
8625: DOUBLE
8626: LD_VAR 0 7
8630: INC
8631: ST_TO_ADDR
8632: LD_INT 2
8634: PUSH
8635: FOR_DOWNTO
8636: IFFALSE 8720
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8638: LD_ADDR_VAR 0 6
8642: PUSH
8643: LD_VAR 0 7
8647: PUSH
8648: LD_VAR 0 5
8652: PUSH
8653: LD_INT 1
8655: MINUS
8656: ARRAY
8657: PPUSH
8658: LD_VAR 0 2
8662: PUSH
8663: LD_VAR 0 5
8667: PUSH
8668: LD_INT 1
8670: MINUS
8671: ARRAY
8672: PPUSH
8673: LD_VAR 0 7
8677: PUSH
8678: LD_VAR 0 5
8682: ARRAY
8683: PPUSH
8684: CALL_OW 1
8688: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8689: LD_ADDR_VAR 0 7
8693: PUSH
8694: LD_VAR 0 7
8698: PPUSH
8699: LD_VAR 0 5
8703: PUSH
8704: LD_INT 1
8706: MINUS
8707: PPUSH
8708: LD_VAR 0 6
8712: PPUSH
8713: CALL_OW 1
8717: ST_TO_ADDR
// end ;
8718: GO 8635
8720: POP
8721: POP
// result := s_arr [ 1 ] ;
8722: LD_ADDR_VAR 0 4
8726: PUSH
8727: LD_VAR 0 7
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: ST_TO_ADDR
// end ; end ;
8736: LD_VAR 0 4
8740: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8741: LD_INT 0
8743: PPUSH
8744: PPUSH
// if not list then
8745: LD_VAR 0 1
8749: NOT
8750: IFFALSE 8754
// exit ;
8752: GO 8845
// i := list [ pos1 ] ;
8754: LD_ADDR_VAR 0 5
8758: PUSH
8759: LD_VAR 0 1
8763: PUSH
8764: LD_VAR 0 2
8768: ARRAY
8769: ST_TO_ADDR
// if not i then
8770: LD_VAR 0 5
8774: NOT
8775: IFFALSE 8779
// exit ;
8777: GO 8845
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8779: LD_ADDR_VAR 0 1
8783: PUSH
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_VAR 0 2
8793: PPUSH
8794: LD_VAR 0 1
8798: PUSH
8799: LD_VAR 0 3
8803: ARRAY
8804: PPUSH
8805: CALL_OW 1
8809: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: LD_VAR 0 1
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: LD_VAR 0 5
8829: PPUSH
8830: CALL_OW 1
8834: ST_TO_ADDR
// result := list ;
8835: LD_ADDR_VAR 0 4
8839: PUSH
8840: LD_VAR 0 1
8844: ST_TO_ADDR
// end ;
8845: LD_VAR 0 4
8849: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8850: LD_INT 0
8852: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8853: LD_ADDR_VAR 0 5
8857: PUSH
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 250
8867: PPUSH
8868: LD_VAR 0 1
8872: PPUSH
8873: CALL_OW 251
8877: PPUSH
8878: LD_VAR 0 2
8882: PPUSH
8883: LD_VAR 0 3
8887: PPUSH
8888: LD_VAR 0 4
8892: PPUSH
8893: CALL 8903 0 5
8897: ST_TO_ADDR
// end ;
8898: LD_VAR 0 5
8902: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8903: LD_INT 0
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
// if not list then
8909: LD_VAR 0 3
8913: NOT
8914: IFFALSE 8918
// exit ;
8916: GO 9306
// result := [ ] ;
8918: LD_ADDR_VAR 0 6
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// for i in list do
8925: LD_ADDR_VAR 0 7
8929: PUSH
8930: LD_VAR 0 3
8934: PUSH
8935: FOR_IN
8936: IFFALSE 9138
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8938: LD_ADDR_VAR 0 9
8942: PUSH
8943: LD_VAR 0 7
8947: PPUSH
8948: LD_VAR 0 1
8952: PPUSH
8953: LD_VAR 0 2
8957: PPUSH
8958: CALL_OW 297
8962: ST_TO_ADDR
// if not result then
8963: LD_VAR 0 6
8967: NOT
8968: IFFALSE 8994
// result := [ [ i , tmp ] ] else
8970: LD_ADDR_VAR 0 6
8974: PUSH
8975: LD_VAR 0 7
8979: PUSH
8980: LD_VAR 0 9
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: ST_TO_ADDR
8992: GO 9136
// begin if result [ result ] [ 2 ] < tmp then
8994: LD_VAR 0 6
8998: PUSH
8999: LD_VAR 0 6
9003: ARRAY
9004: PUSH
9005: LD_INT 2
9007: ARRAY
9008: PUSH
9009: LD_VAR 0 9
9013: LESS
9014: IFFALSE 9056
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9016: LD_ADDR_VAR 0 6
9020: PUSH
9021: LD_VAR 0 6
9025: PPUSH
9026: LD_VAR 0 6
9030: PUSH
9031: LD_INT 1
9033: PLUS
9034: PPUSH
9035: LD_VAR 0 7
9039: PUSH
9040: LD_VAR 0 9
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 2
9053: ST_TO_ADDR
9054: GO 9136
// for j = 1 to result do
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: DOUBLE
9062: LD_INT 1
9064: DEC
9065: ST_TO_ADDR
9066: LD_VAR 0 6
9070: PUSH
9071: FOR_TO
9072: IFFALSE 9134
// begin if tmp < result [ j ] [ 2 ] then
9074: LD_VAR 0 9
9078: PUSH
9079: LD_VAR 0 6
9083: PUSH
9084: LD_VAR 0 8
9088: ARRAY
9089: PUSH
9090: LD_INT 2
9092: ARRAY
9093: LESS
9094: IFFALSE 9132
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9096: LD_ADDR_VAR 0 6
9100: PUSH
9101: LD_VAR 0 6
9105: PPUSH
9106: LD_VAR 0 8
9110: PPUSH
9111: LD_VAR 0 7
9115: PUSH
9116: LD_VAR 0 9
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PPUSH
9125: CALL_OW 2
9129: ST_TO_ADDR
// break ;
9130: GO 9134
// end ; end ;
9132: GO 9071
9134: POP
9135: POP
// end ; end ;
9136: GO 8935
9138: POP
9139: POP
// if result and not asc then
9140: LD_VAR 0 6
9144: PUSH
9145: LD_VAR 0 4
9149: NOT
9150: AND
9151: IFFALSE 9226
// begin tmp := result ;
9153: LD_ADDR_VAR 0 9
9157: PUSH
9158: LD_VAR 0 6
9162: ST_TO_ADDR
// for i = tmp downto 1 do
9163: LD_ADDR_VAR 0 7
9167: PUSH
9168: DOUBLE
9169: LD_VAR 0 9
9173: INC
9174: ST_TO_ADDR
9175: LD_INT 1
9177: PUSH
9178: FOR_DOWNTO
9179: IFFALSE 9224
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9181: LD_ADDR_VAR 0 6
9185: PUSH
9186: LD_VAR 0 6
9190: PPUSH
9191: LD_VAR 0 9
9195: PUSH
9196: LD_VAR 0 7
9200: MINUS
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PPUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_VAR 0 7
9215: ARRAY
9216: PPUSH
9217: CALL_OW 1
9221: ST_TO_ADDR
9222: GO 9178
9224: POP
9225: POP
// end ; tmp := [ ] ;
9226: LD_ADDR_VAR 0 9
9230: PUSH
9231: EMPTY
9232: ST_TO_ADDR
// if mode then
9233: LD_VAR 0 5
9237: IFFALSE 9306
// begin for i = 1 to result do
9239: LD_ADDR_VAR 0 7
9243: PUSH
9244: DOUBLE
9245: LD_INT 1
9247: DEC
9248: ST_TO_ADDR
9249: LD_VAR 0 6
9253: PUSH
9254: FOR_TO
9255: IFFALSE 9294
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9257: LD_ADDR_VAR 0 9
9261: PUSH
9262: LD_VAR 0 9
9266: PPUSH
9267: LD_VAR 0 7
9271: PPUSH
9272: LD_VAR 0 6
9276: PUSH
9277: LD_VAR 0 7
9281: ARRAY
9282: PUSH
9283: LD_INT 1
9285: ARRAY
9286: PPUSH
9287: CALL_OW 1
9291: ST_TO_ADDR
9292: GO 9254
9294: POP
9295: POP
// result := tmp ;
9296: LD_ADDR_VAR 0 6
9300: PUSH
9301: LD_VAR 0 9
9305: ST_TO_ADDR
// end ; end ;
9306: LD_VAR 0 6
9310: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9319: LD_ADDR_VAR 0 5
9323: PUSH
9324: LD_INT 0
9326: PUSH
9327: LD_INT 0
9329: PUSH
9330: LD_INT 0
9332: PUSH
9333: EMPTY
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: ST_TO_ADDR
// if not x or not y then
9341: LD_VAR 0 2
9345: NOT
9346: PUSH
9347: LD_VAR 0 3
9351: NOT
9352: OR
9353: IFFALSE 9357
// exit ;
9355: GO 11007
// if not range then
9357: LD_VAR 0 4
9361: NOT
9362: IFFALSE 9372
// range := 10 ;
9364: LD_ADDR_VAR 0 4
9368: PUSH
9369: LD_INT 10
9371: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_INT 81
9379: PUSH
9380: LD_VAR 0 1
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 92
9391: PUSH
9392: LD_VAR 0 2
9396: PUSH
9397: LD_VAR 0 3
9401: PUSH
9402: LD_VAR 0 4
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 3
9415: PUSH
9416: LD_INT 21
9418: PUSH
9419: LD_INT 3
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: ST_TO_ADDR
// if not tmp then
9440: LD_VAR 0 8
9444: NOT
9445: IFFALSE 9449
// exit ;
9447: GO 11007
// for i in tmp do
9449: LD_ADDR_VAR 0 6
9453: PUSH
9454: LD_VAR 0 8
9458: PUSH
9459: FOR_IN
9460: IFFALSE 10982
// begin points := [ 0 , 0 , 0 ] ;
9462: LD_ADDR_VAR 0 9
9466: PUSH
9467: LD_INT 0
9469: PUSH
9470: LD_INT 0
9472: PUSH
9473: LD_INT 0
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: LIST
9480: ST_TO_ADDR
// bpoints := 1 ;
9481: LD_ADDR_VAR 0 10
9485: PUSH
9486: LD_INT 1
9488: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9489: LD_VAR 0 6
9493: PPUSH
9494: CALL_OW 247
9498: PUSH
9499: LD_INT 1
9501: DOUBLE
9502: EQUAL
9503: IFTRUE 9507
9505: GO 10085
9507: POP
// begin if GetClass ( i ) = 1 then
9508: LD_VAR 0 6
9512: PPUSH
9513: CALL_OW 257
9517: PUSH
9518: LD_INT 1
9520: EQUAL
9521: IFFALSE 9542
// points := [ 10 , 5 , 3 ] ;
9523: LD_ADDR_VAR 0 9
9527: PUSH
9528: LD_INT 10
9530: PUSH
9531: LD_INT 5
9533: PUSH
9534: LD_INT 3
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9542: LD_VAR 0 6
9546: PPUSH
9547: CALL_OW 257
9551: PUSH
9552: LD_INT 2
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 4
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: IN
9566: IFFALSE 9587
// points := [ 3 , 2 , 1 ] ;
9568: LD_ADDR_VAR 0 9
9572: PUSH
9573: LD_INT 3
9575: PUSH
9576: LD_INT 2
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9587: LD_VAR 0 6
9591: PPUSH
9592: CALL_OW 257
9596: PUSH
9597: LD_INT 5
9599: EQUAL
9600: IFFALSE 9621
// points := [ 130 , 5 , 2 ] ;
9602: LD_ADDR_VAR 0 9
9606: PUSH
9607: LD_INT 130
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: LD_INT 2
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 257
9630: PUSH
9631: LD_INT 8
9633: EQUAL
9634: IFFALSE 9655
// points := [ 35 , 35 , 30 ] ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_INT 35
9643: PUSH
9644: LD_INT 35
9646: PUSH
9647: LD_INT 30
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9655: LD_VAR 0 6
9659: PPUSH
9660: CALL_OW 257
9664: PUSH
9665: LD_INT 9
9667: EQUAL
9668: IFFALSE 9689
// points := [ 20 , 55 , 40 ] ;
9670: LD_ADDR_VAR 0 9
9674: PUSH
9675: LD_INT 20
9677: PUSH
9678: LD_INT 55
9680: PUSH
9681: LD_INT 40
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 257
9698: PUSH
9699: LD_INT 12
9701: PUSH
9702: LD_INT 16
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: IN
9709: IFFALSE 9730
// points := [ 5 , 3 , 2 ] ;
9711: LD_ADDR_VAR 0 9
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 3
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9730: LD_VAR 0 6
9734: PPUSH
9735: CALL_OW 257
9739: PUSH
9740: LD_INT 17
9742: EQUAL
9743: IFFALSE 9764
// points := [ 100 , 50 , 75 ] ;
9745: LD_ADDR_VAR 0 9
9749: PUSH
9750: LD_INT 100
9752: PUSH
9753: LD_INT 50
9755: PUSH
9756: LD_INT 75
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9764: LD_VAR 0 6
9768: PPUSH
9769: CALL_OW 257
9773: PUSH
9774: LD_INT 15
9776: EQUAL
9777: IFFALSE 9798
// points := [ 10 , 5 , 3 ] ;
9779: LD_ADDR_VAR 0 9
9783: PUSH
9784: LD_INT 10
9786: PUSH
9787: LD_INT 5
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9798: LD_VAR 0 6
9802: PPUSH
9803: CALL_OW 257
9807: PUSH
9808: LD_INT 14
9810: EQUAL
9811: IFFALSE 9832
// points := [ 10 , 0 , 0 ] ;
9813: LD_ADDR_VAR 0 9
9817: PUSH
9818: LD_INT 10
9820: PUSH
9821: LD_INT 0
9823: PUSH
9824: LD_INT 0
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9832: LD_VAR 0 6
9836: PPUSH
9837: CALL_OW 257
9841: PUSH
9842: LD_INT 11
9844: EQUAL
9845: IFFALSE 9866
// points := [ 30 , 10 , 5 ] ;
9847: LD_ADDR_VAR 0 9
9851: PUSH
9852: LD_INT 30
9854: PUSH
9855: LD_INT 10
9857: PUSH
9858: LD_INT 5
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9866: LD_VAR 0 1
9870: PPUSH
9871: LD_INT 5
9873: PPUSH
9874: CALL_OW 321
9878: PUSH
9879: LD_INT 2
9881: EQUAL
9882: IFFALSE 9899
// bpoints := bpoints * 1.8 ;
9884: LD_ADDR_VAR 0 10
9888: PUSH
9889: LD_VAR 0 10
9893: PUSH
9894: LD_REAL  1.80000000000000E+0000
9897: MUL
9898: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9899: LD_VAR 0 6
9903: PPUSH
9904: CALL_OW 257
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: LD_INT 3
9917: PUSH
9918: LD_INT 4
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: IN
9927: PUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: LD_INT 51
9935: PPUSH
9936: CALL_OW 321
9940: PUSH
9941: LD_INT 2
9943: EQUAL
9944: AND
9945: IFFALSE 9962
// bpoints := bpoints * 1.2 ;
9947: LD_ADDR_VAR 0 10
9951: PUSH
9952: LD_VAR 0 10
9956: PUSH
9957: LD_REAL  1.20000000000000E+0000
9960: MUL
9961: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9962: LD_VAR 0 6
9966: PPUSH
9967: CALL_OW 257
9971: PUSH
9972: LD_INT 5
9974: PUSH
9975: LD_INT 7
9977: PUSH
9978: LD_INT 9
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: IN
9986: PUSH
9987: LD_VAR 0 1
9991: PPUSH
9992: LD_INT 52
9994: PPUSH
9995: CALL_OW 321
9999: PUSH
10000: LD_INT 2
10002: EQUAL
10003: AND
10004: IFFALSE 10021
// bpoints := bpoints * 1.5 ;
10006: LD_ADDR_VAR 0 10
10010: PUSH
10011: LD_VAR 0 10
10015: PUSH
10016: LD_REAL  1.50000000000000E+0000
10019: MUL
10020: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10021: LD_VAR 0 1
10025: PPUSH
10026: LD_INT 66
10028: PPUSH
10029: CALL_OW 321
10033: PUSH
10034: LD_INT 2
10036: EQUAL
10037: IFFALSE 10054
// bpoints := bpoints * 1.1 ;
10039: LD_ADDR_VAR 0 10
10043: PUSH
10044: LD_VAR 0 10
10048: PUSH
10049: LD_REAL  1.10000000000000E+0000
10052: MUL
10053: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10054: LD_ADDR_VAR 0 10
10058: PUSH
10059: LD_VAR 0 10
10063: PUSH
10064: LD_VAR 0 6
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 259
10076: PUSH
10077: LD_REAL  1.15000000000000E+0000
10080: MUL
10081: MUL
10082: ST_TO_ADDR
// end ; unit_vehicle :
10083: GO 10911
10085: LD_INT 2
10087: DOUBLE
10088: EQUAL
10089: IFTRUE 10093
10091: GO 10899
10093: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10094: LD_VAR 0 6
10098: PPUSH
10099: CALL_OW 264
10103: PUSH
10104: LD_INT 2
10106: PUSH
10107: LD_INT 42
10109: PUSH
10110: LD_INT 24
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: IN
10118: IFFALSE 10139
// points := [ 25 , 5 , 3 ] ;
10120: LD_ADDR_VAR 0 9
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 5
10130: PUSH
10131: LD_INT 3
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10139: LD_VAR 0 6
10143: PPUSH
10144: CALL_OW 264
10148: PUSH
10149: LD_INT 4
10151: PUSH
10152: LD_INT 43
10154: PUSH
10155: LD_INT 25
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: IN
10163: IFFALSE 10184
// points := [ 40 , 15 , 5 ] ;
10165: LD_ADDR_VAR 0 9
10169: PUSH
10170: LD_INT 40
10172: PUSH
10173: LD_INT 15
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10184: LD_VAR 0 6
10188: PPUSH
10189: CALL_OW 264
10193: PUSH
10194: LD_INT 3
10196: PUSH
10197: LD_INT 23
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: IN
10204: IFFALSE 10225
// points := [ 7 , 25 , 8 ] ;
10206: LD_ADDR_VAR 0 9
10210: PUSH
10211: LD_INT 7
10213: PUSH
10214: LD_INT 25
10216: PUSH
10217: LD_INT 8
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10225: LD_VAR 0 6
10229: PPUSH
10230: CALL_OW 264
10234: PUSH
10235: LD_INT 5
10237: PUSH
10238: LD_INT 27
10240: PUSH
10241: LD_INT 44
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: IN
10249: IFFALSE 10270
// points := [ 14 , 50 , 16 ] ;
10251: LD_ADDR_VAR 0 9
10255: PUSH
10256: LD_INT 14
10258: PUSH
10259: LD_INT 50
10261: PUSH
10262: LD_INT 16
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10270: LD_VAR 0 6
10274: PPUSH
10275: CALL_OW 264
10279: PUSH
10280: LD_INT 6
10282: PUSH
10283: LD_INT 46
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: IN
10290: IFFALSE 10311
// points := [ 32 , 120 , 70 ] ;
10292: LD_ADDR_VAR 0 9
10296: PUSH
10297: LD_INT 32
10299: PUSH
10300: LD_INT 120
10302: PUSH
10303: LD_INT 70
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10311: LD_VAR 0 6
10315: PPUSH
10316: CALL_OW 264
10320: PUSH
10321: LD_INT 7
10323: PUSH
10324: LD_INT 28
10326: PUSH
10327: LD_INT 45
10329: PUSH
10330: LD_INT 92
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: IN
10339: IFFALSE 10360
// points := [ 35 , 20 , 45 ] ;
10341: LD_ADDR_VAR 0 9
10345: PUSH
10346: LD_INT 35
10348: PUSH
10349: LD_INT 20
10351: PUSH
10352: LD_INT 45
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10360: LD_VAR 0 6
10364: PPUSH
10365: CALL_OW 264
10369: PUSH
10370: LD_INT 47
10372: PUSH
10373: EMPTY
10374: LIST
10375: IN
10376: IFFALSE 10397
// points := [ 67 , 45 , 75 ] ;
10378: LD_ADDR_VAR 0 9
10382: PUSH
10383: LD_INT 67
10385: PUSH
10386: LD_INT 45
10388: PUSH
10389: LD_INT 75
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: LIST
10396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10397: LD_VAR 0 6
10401: PPUSH
10402: CALL_OW 264
10406: PUSH
10407: LD_INT 26
10409: PUSH
10410: EMPTY
10411: LIST
10412: IN
10413: IFFALSE 10434
// points := [ 120 , 30 , 80 ] ;
10415: LD_ADDR_VAR 0 9
10419: PUSH
10420: LD_INT 120
10422: PUSH
10423: LD_INT 30
10425: PUSH
10426: LD_INT 80
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10434: LD_VAR 0 6
10438: PPUSH
10439: CALL_OW 264
10443: PUSH
10444: LD_INT 22
10446: PUSH
10447: EMPTY
10448: LIST
10449: IN
10450: IFFALSE 10471
// points := [ 40 , 1 , 1 ] ;
10452: LD_ADDR_VAR 0 9
10456: PUSH
10457: LD_INT 40
10459: PUSH
10460: LD_INT 1
10462: PUSH
10463: LD_INT 1
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10471: LD_VAR 0 6
10475: PPUSH
10476: CALL_OW 264
10480: PUSH
10481: LD_INT 29
10483: PUSH
10484: EMPTY
10485: LIST
10486: IN
10487: IFFALSE 10508
// points := [ 70 , 200 , 400 ] ;
10489: LD_ADDR_VAR 0 9
10493: PUSH
10494: LD_INT 70
10496: PUSH
10497: LD_INT 200
10499: PUSH
10500: LD_INT 400
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10508: LD_VAR 0 6
10512: PPUSH
10513: CALL_OW 264
10517: PUSH
10518: LD_INT 14
10520: PUSH
10521: LD_INT 53
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: IN
10528: IFFALSE 10549
// points := [ 40 , 10 , 20 ] ;
10530: LD_ADDR_VAR 0 9
10534: PUSH
10535: LD_INT 40
10537: PUSH
10538: LD_INT 10
10540: PUSH
10541: LD_INT 20
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10549: LD_VAR 0 6
10553: PPUSH
10554: CALL_OW 264
10558: PUSH
10559: LD_INT 9
10561: PUSH
10562: EMPTY
10563: LIST
10564: IN
10565: IFFALSE 10586
// points := [ 5 , 70 , 20 ] ;
10567: LD_ADDR_VAR 0 9
10571: PUSH
10572: LD_INT 5
10574: PUSH
10575: LD_INT 70
10577: PUSH
10578: LD_INT 20
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10586: LD_VAR 0 6
10590: PPUSH
10591: CALL_OW 264
10595: PUSH
10596: LD_INT 10
10598: PUSH
10599: EMPTY
10600: LIST
10601: IN
10602: IFFALSE 10623
// points := [ 35 , 110 , 70 ] ;
10604: LD_ADDR_VAR 0 9
10608: PUSH
10609: LD_INT 35
10611: PUSH
10612: LD_INT 110
10614: PUSH
10615: LD_INT 70
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10623: LD_VAR 0 6
10627: PPUSH
10628: CALL_OW 265
10632: PUSH
10633: LD_INT 25
10635: EQUAL
10636: IFFALSE 10657
// points := [ 80 , 65 , 100 ] ;
10638: LD_ADDR_VAR 0 9
10642: PUSH
10643: LD_INT 80
10645: PUSH
10646: LD_INT 65
10648: PUSH
10649: LD_INT 100
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10657: LD_VAR 0 6
10661: PPUSH
10662: CALL_OW 263
10666: PUSH
10667: LD_INT 1
10669: EQUAL
10670: IFFALSE 10705
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10672: LD_ADDR_VAR 0 10
10676: PUSH
10677: LD_VAR 0 10
10681: PUSH
10682: LD_VAR 0 6
10686: PPUSH
10687: CALL_OW 311
10691: PPUSH
10692: LD_INT 3
10694: PPUSH
10695: CALL_OW 259
10699: PUSH
10700: LD_INT 4
10702: MUL
10703: MUL
10704: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10705: LD_VAR 0 6
10709: PPUSH
10710: CALL_OW 263
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10769
// begin j := IsControledBy ( i ) ;
10720: LD_ADDR_VAR 0 7
10724: PUSH
10725: LD_VAR 0 6
10729: PPUSH
10730: CALL_OW 312
10734: ST_TO_ADDR
// if j then
10735: LD_VAR 0 7
10739: IFFALSE 10769
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10741: LD_ADDR_VAR 0 10
10745: PUSH
10746: LD_VAR 0 10
10750: PUSH
10751: LD_VAR 0 7
10755: PPUSH
10756: LD_INT 3
10758: PPUSH
10759: CALL_OW 259
10763: PUSH
10764: LD_INT 3
10766: MUL
10767: MUL
10768: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10769: LD_VAR 0 6
10773: PPUSH
10774: CALL_OW 264
10778: PUSH
10779: LD_INT 5
10781: PUSH
10782: LD_INT 6
10784: PUSH
10785: LD_INT 46
10787: PUSH
10788: LD_INT 44
10790: PUSH
10791: LD_INT 47
10793: PUSH
10794: LD_INT 45
10796: PUSH
10797: LD_INT 28
10799: PUSH
10800: LD_INT 7
10802: PUSH
10803: LD_INT 27
10805: PUSH
10806: LD_INT 29
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: IN
10821: PUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: LD_INT 52
10829: PPUSH
10830: CALL_OW 321
10834: PUSH
10835: LD_INT 2
10837: EQUAL
10838: AND
10839: IFFALSE 10856
// bpoints := bpoints * 1.2 ;
10841: LD_ADDR_VAR 0 10
10845: PUSH
10846: LD_VAR 0 10
10850: PUSH
10851: LD_REAL  1.20000000000000E+0000
10854: MUL
10855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10856: LD_VAR 0 6
10860: PPUSH
10861: CALL_OW 264
10865: PUSH
10866: LD_INT 6
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: LD_INT 47
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: IN
10880: IFFALSE 10897
// bpoints := bpoints * 1.2 ;
10882: LD_ADDR_VAR 0 10
10886: PUSH
10887: LD_VAR 0 10
10891: PUSH
10892: LD_REAL  1.20000000000000E+0000
10895: MUL
10896: ST_TO_ADDR
// end ; unit_building :
10897: GO 10911
10899: LD_INT 3
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10910
10907: POP
// ; end ;
10908: GO 10911
10910: POP
// for j = 1 to 3 do
10911: LD_ADDR_VAR 0 7
10915: PUSH
10916: DOUBLE
10917: LD_INT 1
10919: DEC
10920: ST_TO_ADDR
10921: LD_INT 3
10923: PUSH
10924: FOR_TO
10925: IFFALSE 10978
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10927: LD_ADDR_VAR 0 5
10931: PUSH
10932: LD_VAR 0 5
10936: PPUSH
10937: LD_VAR 0 7
10941: PPUSH
10942: LD_VAR 0 5
10946: PUSH
10947: LD_VAR 0 7
10951: ARRAY
10952: PUSH
10953: LD_VAR 0 9
10957: PUSH
10958: LD_VAR 0 7
10962: ARRAY
10963: PUSH
10964: LD_VAR 0 10
10968: MUL
10969: PLUS
10970: PPUSH
10971: CALL_OW 1
10975: ST_TO_ADDR
10976: GO 10924
10978: POP
10979: POP
// end ;
10980: GO 9459
10982: POP
10983: POP
// result := Replace ( result , 4 , tmp ) ;
10984: LD_ADDR_VAR 0 5
10988: PUSH
10989: LD_VAR 0 5
10993: PPUSH
10994: LD_INT 4
10996: PPUSH
10997: LD_VAR 0 8
11001: PPUSH
11002: CALL_OW 1
11006: ST_TO_ADDR
// end ;
11007: LD_VAR 0 5
11011: RET
// export function DangerAtRange ( unit , range ) ; begin
11012: LD_INT 0
11014: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 255
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: LD_VAR 0 2
11054: PPUSH
11055: CALL 9311 0 4
11059: ST_TO_ADDR
// end ;
11060: LD_VAR 0 3
11064: RET
// export function DangerInArea ( side , area ) ; begin
11065: LD_INT 0
11067: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11068: LD_ADDR_VAR 0 3
11072: PUSH
11073: LD_VAR 0 2
11077: PPUSH
11078: LD_INT 81
11080: PUSH
11081: LD_VAR 0 1
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PPUSH
11090: CALL_OW 70
11094: ST_TO_ADDR
// end ;
11095: LD_VAR 0 3
11099: RET
// export function IsExtension ( b ) ; begin
11100: LD_INT 0
11102: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11103: LD_ADDR_VAR 0 2
11107: PUSH
11108: LD_VAR 0 1
11112: PUSH
11113: LD_INT 23
11115: PUSH
11116: LD_INT 20
11118: PUSH
11119: LD_INT 22
11121: PUSH
11122: LD_INT 17
11124: PUSH
11125: LD_INT 24
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: LD_INT 19
11133: PUSH
11134: LD_INT 16
11136: PUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 18
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: IN
11155: ST_TO_ADDR
// end ;
11156: LD_VAR 0 2
11160: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
// result := [ ] ;
11166: LD_ADDR_VAR 0 4
11170: PUSH
11171: EMPTY
11172: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11173: LD_ADDR_VAR 0 5
11177: PUSH
11178: LD_VAR 0 2
11182: PPUSH
11183: LD_INT 21
11185: PUSH
11186: LD_INT 3
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 70
11197: ST_TO_ADDR
// if not tmp then
11198: LD_VAR 0 5
11202: NOT
11203: IFFALSE 11207
// exit ;
11205: GO 11271
// if checkLink then
11207: LD_VAR 0 3
11211: IFFALSE 11261
// begin for i in tmp do
11213: LD_ADDR_VAR 0 6
11217: PUSH
11218: LD_VAR 0 5
11222: PUSH
11223: FOR_IN
11224: IFFALSE 11259
// if GetBase ( i ) <> base then
11226: LD_VAR 0 6
11230: PPUSH
11231: CALL_OW 274
11235: PUSH
11236: LD_VAR 0 1
11240: NONEQUAL
11241: IFFALSE 11257
// ComLinkToBase ( base , i ) ;
11243: LD_VAR 0 1
11247: PPUSH
11248: LD_VAR 0 6
11252: PPUSH
11253: CALL_OW 169
11257: GO 11223
11259: POP
11260: POP
// end ; result := tmp ;
11261: LD_ADDR_VAR 0 4
11265: PUSH
11266: LD_VAR 0 5
11270: ST_TO_ADDR
// end ;
11271: LD_VAR 0 4
11275: RET
// export function ComComplete ( units , b ) ; var i ; begin
11276: LD_INT 0
11278: PPUSH
11279: PPUSH
// if not units then
11280: LD_VAR 0 1
11284: NOT
11285: IFFALSE 11289
// exit ;
11287: GO 11379
// for i in units do
11289: LD_ADDR_VAR 0 4
11293: PUSH
11294: LD_VAR 0 1
11298: PUSH
11299: FOR_IN
11300: IFFALSE 11377
// if BuildingStatus ( b ) = bs_build then
11302: LD_VAR 0 2
11306: PPUSH
11307: CALL_OW 461
11311: PUSH
11312: LD_INT 1
11314: EQUAL
11315: IFFALSE 11375
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11317: LD_VAR 0 4
11321: PPUSH
11322: LD_STRING h
11324: PUSH
11325: LD_VAR 0 2
11329: PPUSH
11330: CALL_OW 250
11334: PUSH
11335: LD_VAR 0 2
11339: PPUSH
11340: CALL_OW 251
11344: PUSH
11345: LD_VAR 0 2
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 0
11355: PUSH
11356: LD_INT 0
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: PPUSH
11371: CALL_OW 446
11375: GO 11299
11377: POP
11378: POP
// end ;
11379: LD_VAR 0 3
11383: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11384: LD_INT 0
11386: PPUSH
11387: PPUSH
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11392: LD_VAR 0 1
11396: NOT
11397: PUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 263
11407: PUSH
11408: LD_INT 2
11410: NONEQUAL
11411: OR
11412: IFFALSE 11416
// exit ;
11414: GO 11732
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11416: LD_ADDR_VAR 0 6
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 255
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 2
11440: PUSH
11441: LD_INT 30
11443: PUSH
11444: LD_INT 36
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 34
11453: PUSH
11454: LD_INT 31
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: ST_TO_ADDR
// if not tmp then
11475: LD_VAR 0 6
11479: NOT
11480: IFFALSE 11484
// exit ;
11482: GO 11732
// result := [ ] ;
11484: LD_ADDR_VAR 0 2
11488: PUSH
11489: EMPTY
11490: ST_TO_ADDR
// for i in tmp do
11491: LD_ADDR_VAR 0 3
11495: PUSH
11496: LD_VAR 0 6
11500: PUSH
11501: FOR_IN
11502: IFFALSE 11573
// begin t := UnitsInside ( i ) ;
11504: LD_ADDR_VAR 0 4
11508: PUSH
11509: LD_VAR 0 3
11513: PPUSH
11514: CALL_OW 313
11518: ST_TO_ADDR
// if t then
11519: LD_VAR 0 4
11523: IFFALSE 11571
// for j in t do
11525: LD_ADDR_VAR 0 7
11529: PUSH
11530: LD_VAR 0 4
11534: PUSH
11535: FOR_IN
11536: IFFALSE 11569
// result := Replace ( result , result + 1 , j ) ;
11538: LD_ADDR_VAR 0 2
11542: PUSH
11543: LD_VAR 0 2
11547: PPUSH
11548: LD_VAR 0 2
11552: PUSH
11553: LD_INT 1
11555: PLUS
11556: PPUSH
11557: LD_VAR 0 7
11561: PPUSH
11562: CALL_OW 1
11566: ST_TO_ADDR
11567: GO 11535
11569: POP
11570: POP
// end ;
11571: GO 11501
11573: POP
11574: POP
// if not result then
11575: LD_VAR 0 2
11579: NOT
11580: IFFALSE 11584
// exit ;
11582: GO 11732
// mech := result [ 1 ] ;
11584: LD_ADDR_VAR 0 5
11588: PUSH
11589: LD_VAR 0 2
11593: PUSH
11594: LD_INT 1
11596: ARRAY
11597: ST_TO_ADDR
// if result > 1 then
11598: LD_VAR 0 2
11602: PUSH
11603: LD_INT 1
11605: GREATER
11606: IFFALSE 11718
// begin for i = 2 to result do
11608: LD_ADDR_VAR 0 3
11612: PUSH
11613: DOUBLE
11614: LD_INT 2
11616: DEC
11617: ST_TO_ADDR
11618: LD_VAR 0 2
11622: PUSH
11623: FOR_TO
11624: IFFALSE 11716
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11626: LD_ADDR_VAR 0 4
11630: PUSH
11631: LD_VAR 0 2
11635: PUSH
11636: LD_VAR 0 3
11640: ARRAY
11641: PPUSH
11642: LD_INT 3
11644: PPUSH
11645: CALL_OW 259
11649: PUSH
11650: LD_VAR 0 2
11654: PUSH
11655: LD_VAR 0 3
11659: ARRAY
11660: PPUSH
11661: CALL_OW 432
11665: MINUS
11666: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11667: LD_VAR 0 4
11671: PUSH
11672: LD_VAR 0 5
11676: PPUSH
11677: LD_INT 3
11679: PPUSH
11680: CALL_OW 259
11684: PUSH
11685: LD_VAR 0 5
11689: PPUSH
11690: CALL_OW 432
11694: MINUS
11695: GREATEREQUAL
11696: IFFALSE 11714
// mech := result [ i ] ;
11698: LD_ADDR_VAR 0 5
11702: PUSH
11703: LD_VAR 0 2
11707: PUSH
11708: LD_VAR 0 3
11712: ARRAY
11713: ST_TO_ADDR
// end ;
11714: GO 11623
11716: POP
11717: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11718: LD_VAR 0 1
11722: PPUSH
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL_OW 135
// end ;
11732: LD_VAR 0 2
11736: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11737: LD_INT 0
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
// result := [ ] ;
11752: LD_ADDR_VAR 0 7
11756: PUSH
11757: EMPTY
11758: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11759: LD_VAR 0 1
11763: PPUSH
11764: CALL_OW 266
11768: PUSH
11769: LD_INT 0
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: IN
11779: NOT
11780: IFFALSE 11784
// exit ;
11782: GO 13418
// if name then
11784: LD_VAR 0 3
11788: IFFALSE 11804
// SetBName ( base_dep , name ) ;
11790: LD_VAR 0 1
11794: PPUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: CALL_OW 500
// base := GetBase ( base_dep ) ;
11804: LD_ADDR_VAR 0 15
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 274
11818: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11819: LD_ADDR_VAR 0 16
11823: PUSH
11824: LD_VAR 0 1
11828: PPUSH
11829: CALL_OW 255
11833: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11834: LD_ADDR_VAR 0 17
11838: PUSH
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 248
11848: ST_TO_ADDR
// if sources then
11849: LD_VAR 0 5
11853: IFFALSE 11900
// for i = 1 to 3 do
11855: LD_ADDR_VAR 0 8
11859: PUSH
11860: DOUBLE
11861: LD_INT 1
11863: DEC
11864: ST_TO_ADDR
11865: LD_INT 3
11867: PUSH
11868: FOR_TO
11869: IFFALSE 11898
// AddResourceType ( base , i , sources [ i ] ) ;
11871: LD_VAR 0 15
11875: PPUSH
11876: LD_VAR 0 8
11880: PPUSH
11881: LD_VAR 0 5
11885: PUSH
11886: LD_VAR 0 8
11890: ARRAY
11891: PPUSH
11892: CALL_OW 276
11896: GO 11868
11898: POP
11899: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11900: LD_ADDR_VAR 0 18
11904: PUSH
11905: LD_VAR 0 15
11909: PPUSH
11910: LD_VAR 0 2
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL 11161 0 3
11922: ST_TO_ADDR
// InitHc ;
11923: CALL_OW 19
// InitUc ;
11927: CALL_OW 18
// uc_side := side ;
11931: LD_ADDR_OWVAR 20
11935: PUSH
11936: LD_VAR 0 16
11940: ST_TO_ADDR
// uc_nation := nation ;
11941: LD_ADDR_OWVAR 21
11945: PUSH
11946: LD_VAR 0 17
11950: ST_TO_ADDR
// if buildings then
11951: LD_VAR 0 18
11955: IFFALSE 13277
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11957: LD_ADDR_VAR 0 19
11961: PUSH
11962: LD_VAR 0 18
11966: PPUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 29
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 30
11982: PUSH
11983: LD_INT 30
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 72
11999: ST_TO_ADDR
// if tmp then
12000: LD_VAR 0 19
12004: IFFALSE 12052
// for i in tmp do
12006: LD_ADDR_VAR 0 8
12010: PUSH
12011: LD_VAR 0 19
12015: PUSH
12016: FOR_IN
12017: IFFALSE 12050
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12019: LD_VAR 0 8
12023: PPUSH
12024: CALL_OW 250
12028: PPUSH
12029: LD_VAR 0 8
12033: PPUSH
12034: CALL_OW 251
12038: PPUSH
12039: LD_VAR 0 16
12043: PPUSH
12044: CALL_OW 441
12048: GO 12016
12050: POP
12051: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12052: LD_VAR 0 18
12056: PPUSH
12057: LD_INT 2
12059: PUSH
12060: LD_INT 30
12062: PUSH
12063: LD_INT 32
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 30
12072: PUSH
12073: LD_INT 33
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 72
12089: IFFALSE 12177
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12091: LD_ADDR_VAR 0 8
12095: PUSH
12096: LD_VAR 0 18
12100: PPUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 30
12106: PUSH
12107: LD_INT 32
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 30
12116: PUSH
12117: LD_INT 33
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: PPUSH
12129: CALL_OW 72
12133: PUSH
12134: FOR_IN
12135: IFFALSE 12175
// begin if not GetBWeapon ( i ) then
12137: LD_VAR 0 8
12141: PPUSH
12142: CALL_OW 269
12146: NOT
12147: IFFALSE 12173
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12149: LD_VAR 0 8
12153: PPUSH
12154: LD_VAR 0 8
12158: PPUSH
12159: LD_VAR 0 2
12163: PPUSH
12164: CALL 13423 0 2
12168: PPUSH
12169: CALL_OW 431
// end ;
12173: GO 12134
12175: POP
12176: POP
// end ; for i = 1 to personel do
12177: LD_ADDR_VAR 0 8
12181: PUSH
12182: DOUBLE
12183: LD_INT 1
12185: DEC
12186: ST_TO_ADDR
12187: LD_VAR 0 6
12191: PUSH
12192: FOR_TO
12193: IFFALSE 13257
// begin if i > 4 then
12195: LD_VAR 0 8
12199: PUSH
12200: LD_INT 4
12202: GREATER
12203: IFFALSE 12207
// break ;
12205: GO 13257
// case i of 1 :
12207: LD_VAR 0 8
12211: PUSH
12212: LD_INT 1
12214: DOUBLE
12215: EQUAL
12216: IFTRUE 12220
12218: GO 12300
12220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12221: LD_ADDR_VAR 0 12
12225: PUSH
12226: LD_VAR 0 18
12230: PPUSH
12231: LD_INT 22
12233: PUSH
12234: LD_VAR 0 16
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 58
12245: PUSH
12246: EMPTY
12247: LIST
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: LD_INT 30
12254: PUSH
12255: LD_INT 32
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 30
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 30
12274: PUSH
12275: LD_INT 5
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: PPUSH
12293: CALL_OW 72
12297: ST_TO_ADDR
12298: GO 12522
12300: LD_INT 2
12302: DOUBLE
12303: EQUAL
12304: IFTRUE 12308
12306: GO 12370
12308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12309: LD_ADDR_VAR 0 12
12313: PUSH
12314: LD_VAR 0 18
12318: PPUSH
12319: LD_INT 22
12321: PUSH
12322: LD_VAR 0 16
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 0
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: LD_INT 1
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PPUSH
12363: CALL_OW 72
12367: ST_TO_ADDR
12368: GO 12522
12370: LD_INT 3
12372: DOUBLE
12373: EQUAL
12374: IFTRUE 12378
12376: GO 12440
12378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12379: LD_ADDR_VAR 0 12
12383: PUSH
12384: LD_VAR 0 18
12388: PPUSH
12389: LD_INT 22
12391: PUSH
12392: LD_VAR 0 16
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: LD_INT 30
12406: PUSH
12407: LD_INT 2
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 30
12416: PUSH
12417: LD_INT 3
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PPUSH
12433: CALL_OW 72
12437: ST_TO_ADDR
12438: GO 12522
12440: LD_INT 4
12442: DOUBLE
12443: EQUAL
12444: IFTRUE 12448
12446: GO 12521
12448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12449: LD_ADDR_VAR 0 12
12453: PUSH
12454: LD_VAR 0 18
12458: PPUSH
12459: LD_INT 22
12461: PUSH
12462: LD_VAR 0 16
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 2
12473: PUSH
12474: LD_INT 30
12476: PUSH
12477: LD_INT 6
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 30
12486: PUSH
12487: LD_INT 7
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 30
12496: PUSH
12497: LD_INT 8
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 72
12518: ST_TO_ADDR
12519: GO 12522
12521: POP
// if i = 1 then
12522: LD_VAR 0 8
12526: PUSH
12527: LD_INT 1
12529: EQUAL
12530: IFFALSE 12641
// begin tmp := [ ] ;
12532: LD_ADDR_VAR 0 19
12536: PUSH
12537: EMPTY
12538: ST_TO_ADDR
// for j in f do
12539: LD_ADDR_VAR 0 9
12543: PUSH
12544: LD_VAR 0 12
12548: PUSH
12549: FOR_IN
12550: IFFALSE 12623
// if GetBType ( j ) = b_bunker then
12552: LD_VAR 0 9
12556: PPUSH
12557: CALL_OW 266
12561: PUSH
12562: LD_INT 32
12564: EQUAL
12565: IFFALSE 12592
// tmp := Insert ( tmp , 1 , j ) else
12567: LD_ADDR_VAR 0 19
12571: PUSH
12572: LD_VAR 0 19
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: LD_VAR 0 9
12584: PPUSH
12585: CALL_OW 2
12589: ST_TO_ADDR
12590: GO 12621
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12592: LD_ADDR_VAR 0 19
12596: PUSH
12597: LD_VAR 0 19
12601: PPUSH
12602: LD_VAR 0 19
12606: PUSH
12607: LD_INT 1
12609: PLUS
12610: PPUSH
12611: LD_VAR 0 9
12615: PPUSH
12616: CALL_OW 2
12620: ST_TO_ADDR
12621: GO 12549
12623: POP
12624: POP
// if tmp then
12625: LD_VAR 0 19
12629: IFFALSE 12641
// f := tmp ;
12631: LD_ADDR_VAR 0 12
12635: PUSH
12636: LD_VAR 0 19
12640: ST_TO_ADDR
// end ; x := personel [ i ] ;
12641: LD_ADDR_VAR 0 13
12645: PUSH
12646: LD_VAR 0 6
12650: PUSH
12651: LD_VAR 0 8
12655: ARRAY
12656: ST_TO_ADDR
// if x = - 1 then
12657: LD_VAR 0 13
12661: PUSH
12662: LD_INT 1
12664: NEG
12665: EQUAL
12666: IFFALSE 12875
// begin for j in f do
12668: LD_ADDR_VAR 0 9
12672: PUSH
12673: LD_VAR 0 12
12677: PUSH
12678: FOR_IN
12679: IFFALSE 12871
// repeat InitHc ;
12681: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12685: LD_VAR 0 9
12689: PPUSH
12690: CALL_OW 266
12694: PUSH
12695: LD_INT 5
12697: EQUAL
12698: IFFALSE 12768
// begin if UnitsInside ( j ) < 3 then
12700: LD_VAR 0 9
12704: PPUSH
12705: CALL_OW 313
12709: PUSH
12710: LD_INT 3
12712: LESS
12713: IFFALSE 12749
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12715: LD_INT 0
12717: PPUSH
12718: LD_INT 5
12720: PUSH
12721: LD_INT 8
12723: PUSH
12724: LD_INT 9
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_VAR 0 17
12736: ARRAY
12737: PPUSH
12738: LD_VAR 0 4
12742: PPUSH
12743: CALL_OW 380
12747: GO 12766
// PrepareHuman ( false , i , skill ) ;
12749: LD_INT 0
12751: PPUSH
12752: LD_VAR 0 8
12756: PPUSH
12757: LD_VAR 0 4
12761: PPUSH
12762: CALL_OW 380
// end else
12766: GO 12785
// PrepareHuman ( false , i , skill ) ;
12768: LD_INT 0
12770: PPUSH
12771: LD_VAR 0 8
12775: PPUSH
12776: LD_VAR 0 4
12780: PPUSH
12781: CALL_OW 380
// un := CreateHuman ;
12785: LD_ADDR_VAR 0 14
12789: PUSH
12790: CALL_OW 44
12794: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12795: LD_ADDR_VAR 0 7
12799: PUSH
12800: LD_VAR 0 7
12804: PPUSH
12805: LD_INT 1
12807: PPUSH
12808: LD_VAR 0 14
12812: PPUSH
12813: CALL_OW 2
12817: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12818: LD_VAR 0 14
12822: PPUSH
12823: LD_VAR 0 9
12827: PPUSH
12828: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12832: LD_VAR 0 9
12836: PPUSH
12837: CALL_OW 313
12841: PUSH
12842: LD_INT 6
12844: EQUAL
12845: PUSH
12846: LD_VAR 0 9
12850: PPUSH
12851: CALL_OW 266
12855: PUSH
12856: LD_INT 32
12858: PUSH
12859: LD_INT 31
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: IN
12866: OR
12867: IFFALSE 12681
12869: GO 12678
12871: POP
12872: POP
// end else
12873: GO 13255
// for j = 1 to x do
12875: LD_ADDR_VAR 0 9
12879: PUSH
12880: DOUBLE
12881: LD_INT 1
12883: DEC
12884: ST_TO_ADDR
12885: LD_VAR 0 13
12889: PUSH
12890: FOR_TO
12891: IFFALSE 13253
// begin InitHc ;
12893: CALL_OW 19
// if not f then
12897: LD_VAR 0 12
12901: NOT
12902: IFFALSE 12991
// begin PrepareHuman ( false , i , skill ) ;
12904: LD_INT 0
12906: PPUSH
12907: LD_VAR 0 8
12911: PPUSH
12912: LD_VAR 0 4
12916: PPUSH
12917: CALL_OW 380
// un := CreateHuman ;
12921: LD_ADDR_VAR 0 14
12925: PUSH
12926: CALL_OW 44
12930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12931: LD_ADDR_VAR 0 7
12935: PUSH
12936: LD_VAR 0 7
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: LD_VAR 0 14
12948: PPUSH
12949: CALL_OW 2
12953: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12954: LD_VAR 0 14
12958: PPUSH
12959: LD_VAR 0 1
12963: PPUSH
12964: CALL_OW 250
12968: PPUSH
12969: LD_VAR 0 1
12973: PPUSH
12974: CALL_OW 251
12978: PPUSH
12979: LD_INT 10
12981: PPUSH
12982: LD_INT 0
12984: PPUSH
12985: CALL_OW 50
// continue ;
12989: GO 12890
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12991: LD_VAR 0 12
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: CALL_OW 313
13004: PUSH
13005: LD_VAR 0 12
13009: PUSH
13010: LD_INT 1
13012: ARRAY
13013: PPUSH
13014: CALL_OW 266
13018: PUSH
13019: LD_INT 32
13021: PUSH
13022: LD_INT 31
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: IN
13029: AND
13030: PUSH
13031: LD_VAR 0 12
13035: PUSH
13036: LD_INT 1
13038: ARRAY
13039: PPUSH
13040: CALL_OW 313
13044: PUSH
13045: LD_INT 6
13047: EQUAL
13048: OR
13049: IFFALSE 13069
// f := Delete ( f , 1 ) ;
13051: LD_ADDR_VAR 0 12
13055: PUSH
13056: LD_VAR 0 12
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 3
13068: ST_TO_ADDR
// if not f then
13069: LD_VAR 0 12
13073: NOT
13074: IFFALSE 13092
// begin x := x + 2 ;
13076: LD_ADDR_VAR 0 13
13080: PUSH
13081: LD_VAR 0 13
13085: PUSH
13086: LD_INT 2
13088: PLUS
13089: ST_TO_ADDR
// continue ;
13090: GO 12890
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13092: LD_VAR 0 12
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: PPUSH
13101: CALL_OW 266
13105: PUSH
13106: LD_INT 5
13108: EQUAL
13109: IFFALSE 13183
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13111: LD_VAR 0 12
13115: PUSH
13116: LD_INT 1
13118: ARRAY
13119: PPUSH
13120: CALL_OW 313
13124: PUSH
13125: LD_INT 3
13127: LESS
13128: IFFALSE 13164
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13130: LD_INT 0
13132: PPUSH
13133: LD_INT 5
13135: PUSH
13136: LD_INT 8
13138: PUSH
13139: LD_INT 9
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: PUSH
13147: LD_VAR 0 17
13151: ARRAY
13152: PPUSH
13153: LD_VAR 0 4
13157: PPUSH
13158: CALL_OW 380
13162: GO 13181
// PrepareHuman ( false , i , skill ) ;
13164: LD_INT 0
13166: PPUSH
13167: LD_VAR 0 8
13171: PPUSH
13172: LD_VAR 0 4
13176: PPUSH
13177: CALL_OW 380
// end else
13181: GO 13200
// PrepareHuman ( false , i , skill ) ;
13183: LD_INT 0
13185: PPUSH
13186: LD_VAR 0 8
13190: PPUSH
13191: LD_VAR 0 4
13195: PPUSH
13196: CALL_OW 380
// un := CreateHuman ;
13200: LD_ADDR_VAR 0 14
13204: PUSH
13205: CALL_OW 44
13209: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13210: LD_ADDR_VAR 0 7
13214: PUSH
13215: LD_VAR 0 7
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: LD_VAR 0 14
13227: PPUSH
13228: CALL_OW 2
13232: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13233: LD_VAR 0 14
13237: PPUSH
13238: LD_VAR 0 12
13242: PUSH
13243: LD_INT 1
13245: ARRAY
13246: PPUSH
13247: CALL_OW 52
// end ;
13251: GO 12890
13253: POP
13254: POP
// end ;
13255: GO 12192
13257: POP
13258: POP
// result := result ^ buildings ;
13259: LD_ADDR_VAR 0 7
13263: PUSH
13264: LD_VAR 0 7
13268: PUSH
13269: LD_VAR 0 18
13273: ADD
13274: ST_TO_ADDR
// end else
13275: GO 13418
// begin for i = 1 to personel do
13277: LD_ADDR_VAR 0 8
13281: PUSH
13282: DOUBLE
13283: LD_INT 1
13285: DEC
13286: ST_TO_ADDR
13287: LD_VAR 0 6
13291: PUSH
13292: FOR_TO
13293: IFFALSE 13416
// begin if i > 4 then
13295: LD_VAR 0 8
13299: PUSH
13300: LD_INT 4
13302: GREATER
13303: IFFALSE 13307
// break ;
13305: GO 13416
// x := personel [ i ] ;
13307: LD_ADDR_VAR 0 13
13311: PUSH
13312: LD_VAR 0 6
13316: PUSH
13317: LD_VAR 0 8
13321: ARRAY
13322: ST_TO_ADDR
// if x = - 1 then
13323: LD_VAR 0 13
13327: PUSH
13328: LD_INT 1
13330: NEG
13331: EQUAL
13332: IFFALSE 13336
// continue ;
13334: GO 13292
// PrepareHuman ( false , i , skill ) ;
13336: LD_INT 0
13338: PPUSH
13339: LD_VAR 0 8
13343: PPUSH
13344: LD_VAR 0 4
13348: PPUSH
13349: CALL_OW 380
// un := CreateHuman ;
13353: LD_ADDR_VAR 0 14
13357: PUSH
13358: CALL_OW 44
13362: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13363: LD_VAR 0 14
13367: PPUSH
13368: LD_VAR 0 1
13372: PPUSH
13373: CALL_OW 250
13377: PPUSH
13378: LD_VAR 0 1
13382: PPUSH
13383: CALL_OW 251
13387: PPUSH
13388: LD_INT 10
13390: PPUSH
13391: LD_INT 0
13393: PPUSH
13394: CALL_OW 50
// result := result ^ un ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_VAR 0 7
13407: PUSH
13408: LD_VAR 0 14
13412: ADD
13413: ST_TO_ADDR
// end ;
13414: GO 13292
13416: POP
13417: POP
// end ; end ;
13418: LD_VAR 0 7
13422: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13423: LD_INT 0
13425: PPUSH
13426: PPUSH
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
13434: PPUSH
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
13440: PPUSH
// result := false ;
13441: LD_ADDR_VAR 0 3
13445: PUSH
13446: LD_INT 0
13448: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13449: LD_VAR 0 1
13453: NOT
13454: PUSH
13455: LD_VAR 0 1
13459: PPUSH
13460: CALL_OW 266
13464: PUSH
13465: LD_INT 32
13467: PUSH
13468: LD_INT 33
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: IN
13475: NOT
13476: OR
13477: IFFALSE 13481
// exit ;
13479: GO 14590
// nat := GetNation ( tower ) ;
13481: LD_ADDR_VAR 0 12
13485: PUSH
13486: LD_VAR 0 1
13490: PPUSH
13491: CALL_OW 248
13495: ST_TO_ADDR
// side := GetSide ( tower ) ;
13496: LD_ADDR_VAR 0 16
13500: PUSH
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 255
13510: ST_TO_ADDR
// x := GetX ( tower ) ;
13511: LD_ADDR_VAR 0 10
13515: PUSH
13516: LD_VAR 0 1
13520: PPUSH
13521: CALL_OW 250
13525: ST_TO_ADDR
// y := GetY ( tower ) ;
13526: LD_ADDR_VAR 0 11
13530: PUSH
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 251
13540: ST_TO_ADDR
// if not x or not y then
13541: LD_VAR 0 10
13545: NOT
13546: PUSH
13547: LD_VAR 0 11
13551: NOT
13552: OR
13553: IFFALSE 13557
// exit ;
13555: GO 14590
// weapon := 0 ;
13557: LD_ADDR_VAR 0 18
13561: PUSH
13562: LD_INT 0
13564: ST_TO_ADDR
// fac_list := [ ] ;
13565: LD_ADDR_VAR 0 17
13569: PUSH
13570: EMPTY
13571: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13572: LD_ADDR_VAR 0 6
13576: PUSH
13577: LD_VAR 0 1
13581: PPUSH
13582: CALL_OW 274
13586: PPUSH
13587: LD_VAR 0 2
13591: PPUSH
13592: LD_INT 0
13594: PPUSH
13595: CALL 11161 0 3
13599: PPUSH
13600: LD_INT 30
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 72
13614: ST_TO_ADDR
// if not factories then
13615: LD_VAR 0 6
13619: NOT
13620: IFFALSE 13624
// exit ;
13622: GO 14590
// for i in factories do
13624: LD_ADDR_VAR 0 8
13628: PUSH
13629: LD_VAR 0 6
13633: PUSH
13634: FOR_IN
13635: IFFALSE 13660
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13637: LD_ADDR_VAR 0 17
13641: PUSH
13642: LD_VAR 0 17
13646: PUSH
13647: LD_VAR 0 8
13651: PPUSH
13652: CALL_OW 478
13656: UNION
13657: ST_TO_ADDR
13658: GO 13634
13660: POP
13661: POP
// if not fac_list then
13662: LD_VAR 0 17
13666: NOT
13667: IFFALSE 13671
// exit ;
13669: GO 14590
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13671: LD_ADDR_VAR 0 5
13675: PUSH
13676: LD_INT 4
13678: PUSH
13679: LD_INT 5
13681: PUSH
13682: LD_INT 9
13684: PUSH
13685: LD_INT 10
13687: PUSH
13688: LD_INT 6
13690: PUSH
13691: LD_INT 7
13693: PUSH
13694: LD_INT 11
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 27
13708: PUSH
13709: LD_INT 28
13711: PUSH
13712: LD_INT 26
13714: PUSH
13715: LD_INT 30
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 43
13726: PUSH
13727: LD_INT 44
13729: PUSH
13730: LD_INT 46
13732: PUSH
13733: LD_INT 45
13735: PUSH
13736: LD_INT 47
13738: PUSH
13739: LD_INT 49
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: LD_VAR 0 12
13759: ARRAY
13760: ST_TO_ADDR
// list := list isect fac_list ;
13761: LD_ADDR_VAR 0 5
13765: PUSH
13766: LD_VAR 0 5
13770: PUSH
13771: LD_VAR 0 17
13775: ISECT
13776: ST_TO_ADDR
// if not list then
13777: LD_VAR 0 5
13781: NOT
13782: IFFALSE 13786
// exit ;
13784: GO 14590
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13786: LD_VAR 0 12
13790: PUSH
13791: LD_INT 3
13793: EQUAL
13794: PUSH
13795: LD_INT 49
13797: PUSH
13798: LD_VAR 0 5
13802: IN
13803: AND
13804: PUSH
13805: LD_INT 31
13807: PPUSH
13808: LD_VAR 0 16
13812: PPUSH
13813: CALL_OW 321
13817: PUSH
13818: LD_INT 2
13820: EQUAL
13821: AND
13822: IFFALSE 13882
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13824: LD_INT 22
13826: PUSH
13827: LD_VAR 0 16
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 35
13838: PUSH
13839: LD_INT 49
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 91
13848: PUSH
13849: LD_VAR 0 1
13853: PUSH
13854: LD_INT 10
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: PPUSH
13867: CALL_OW 69
13871: NOT
13872: IFFALSE 13882
// weapon := ru_time_lapser ;
13874: LD_ADDR_VAR 0 18
13878: PUSH
13879: LD_INT 49
13881: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13882: LD_VAR 0 12
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: LD_INT 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: IN
13897: PUSH
13898: LD_INT 11
13900: PUSH
13901: LD_VAR 0 5
13905: IN
13906: PUSH
13907: LD_INT 30
13909: PUSH
13910: LD_VAR 0 5
13914: IN
13915: OR
13916: AND
13917: PUSH
13918: LD_INT 6
13920: PPUSH
13921: LD_VAR 0 16
13925: PPUSH
13926: CALL_OW 321
13930: PUSH
13931: LD_INT 2
13933: EQUAL
13934: AND
13935: IFFALSE 14100
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 16
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 2
13951: PUSH
13952: LD_INT 35
13954: PUSH
13955: LD_INT 11
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 35
13964: PUSH
13965: LD_INT 30
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 91
13979: PUSH
13980: LD_VAR 0 1
13984: PUSH
13985: LD_INT 18
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 69
14002: NOT
14003: PUSH
14004: LD_INT 22
14006: PUSH
14007: LD_VAR 0 16
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 2
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 32
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 33
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 91
14046: PUSH
14047: LD_VAR 0 1
14051: PUSH
14052: LD_INT 12
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: PPUSH
14068: CALL_OW 69
14072: PUSH
14073: LD_INT 2
14075: GREATER
14076: AND
14077: IFFALSE 14100
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14079: LD_ADDR_VAR 0 18
14083: PUSH
14084: LD_INT 11
14086: PUSH
14087: LD_INT 30
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_VAR 0 12
14098: ARRAY
14099: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14100: LD_VAR 0 18
14104: NOT
14105: PUSH
14106: LD_INT 40
14108: PPUSH
14109: LD_VAR 0 16
14113: PPUSH
14114: CALL_OW 321
14118: PUSH
14119: LD_INT 2
14121: EQUAL
14122: AND
14123: PUSH
14124: LD_INT 7
14126: PUSH
14127: LD_VAR 0 5
14131: IN
14132: PUSH
14133: LD_INT 28
14135: PUSH
14136: LD_VAR 0 5
14140: IN
14141: OR
14142: PUSH
14143: LD_INT 45
14145: PUSH
14146: LD_VAR 0 5
14150: IN
14151: OR
14152: AND
14153: IFFALSE 14407
// begin hex := GetHexInfo ( x , y ) ;
14155: LD_ADDR_VAR 0 4
14159: PUSH
14160: LD_VAR 0 10
14164: PPUSH
14165: LD_VAR 0 11
14169: PPUSH
14170: CALL_OW 546
14174: ST_TO_ADDR
// if hex [ 1 ] then
14175: LD_VAR 0 4
14179: PUSH
14180: LD_INT 1
14182: ARRAY
14183: IFFALSE 14187
// exit ;
14185: GO 14590
// height := hex [ 2 ] ;
14187: LD_ADDR_VAR 0 15
14191: PUSH
14192: LD_VAR 0 4
14196: PUSH
14197: LD_INT 2
14199: ARRAY
14200: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14201: LD_ADDR_VAR 0 14
14205: PUSH
14206: LD_INT 0
14208: PUSH
14209: LD_INT 2
14211: PUSH
14212: LD_INT 3
14214: PUSH
14215: LD_INT 5
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: ST_TO_ADDR
// for i in tmp do
14224: LD_ADDR_VAR 0 8
14228: PUSH
14229: LD_VAR 0 14
14233: PUSH
14234: FOR_IN
14235: IFFALSE 14405
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14237: LD_ADDR_VAR 0 9
14241: PUSH
14242: LD_VAR 0 10
14246: PPUSH
14247: LD_VAR 0 8
14251: PPUSH
14252: LD_INT 5
14254: PPUSH
14255: CALL_OW 272
14259: PUSH
14260: LD_VAR 0 11
14264: PPUSH
14265: LD_VAR 0 8
14269: PPUSH
14270: LD_INT 5
14272: PPUSH
14273: CALL_OW 273
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14282: LD_VAR 0 9
14286: PUSH
14287: LD_INT 1
14289: ARRAY
14290: PPUSH
14291: LD_VAR 0 9
14295: PUSH
14296: LD_INT 2
14298: ARRAY
14299: PPUSH
14300: CALL_OW 488
14304: IFFALSE 14403
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14306: LD_ADDR_VAR 0 4
14310: PUSH
14311: LD_VAR 0 9
14315: PUSH
14316: LD_INT 1
14318: ARRAY
14319: PPUSH
14320: LD_VAR 0 9
14324: PUSH
14325: LD_INT 2
14327: ARRAY
14328: PPUSH
14329: CALL_OW 546
14333: ST_TO_ADDR
// if hex [ 1 ] then
14334: LD_VAR 0 4
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: IFFALSE 14346
// continue ;
14344: GO 14234
// h := hex [ 2 ] ;
14346: LD_ADDR_VAR 0 13
14350: PUSH
14351: LD_VAR 0 4
14355: PUSH
14356: LD_INT 2
14358: ARRAY
14359: ST_TO_ADDR
// if h + 7 < height then
14360: LD_VAR 0 13
14364: PUSH
14365: LD_INT 7
14367: PLUS
14368: PUSH
14369: LD_VAR 0 15
14373: LESS
14374: IFFALSE 14403
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14376: LD_ADDR_VAR 0 18
14380: PUSH
14381: LD_INT 7
14383: PUSH
14384: LD_INT 28
14386: PUSH
14387: LD_INT 45
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_VAR 0 12
14399: ARRAY
14400: ST_TO_ADDR
// break ;
14401: GO 14405
// end ; end ; end ;
14403: GO 14234
14405: POP
14406: POP
// end ; if not weapon then
14407: LD_VAR 0 18
14411: NOT
14412: IFFALSE 14472
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14414: LD_ADDR_VAR 0 5
14418: PUSH
14419: LD_VAR 0 5
14423: PUSH
14424: LD_INT 11
14426: PUSH
14427: LD_INT 30
14429: PUSH
14430: LD_INT 49
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: DIFF
14438: ST_TO_ADDR
// if not list then
14439: LD_VAR 0 5
14443: NOT
14444: IFFALSE 14448
// exit ;
14446: GO 14590
// weapon := list [ rand ( 1 , list ) ] ;
14448: LD_ADDR_VAR 0 18
14452: PUSH
14453: LD_VAR 0 5
14457: PUSH
14458: LD_INT 1
14460: PPUSH
14461: LD_VAR 0 5
14465: PPUSH
14466: CALL_OW 12
14470: ARRAY
14471: ST_TO_ADDR
// end ; if weapon then
14472: LD_VAR 0 18
14476: IFFALSE 14590
// begin tmp := CostOfWeapon ( weapon ) ;
14478: LD_ADDR_VAR 0 14
14482: PUSH
14483: LD_VAR 0 18
14487: PPUSH
14488: CALL_OW 451
14492: ST_TO_ADDR
// j := GetBase ( tower ) ;
14493: LD_ADDR_VAR 0 9
14497: PUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 274
14507: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14508: LD_VAR 0 9
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: CALL_OW 275
14520: PUSH
14521: LD_VAR 0 14
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: GREATEREQUAL
14530: PUSH
14531: LD_VAR 0 9
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: CALL_OW 275
14543: PUSH
14544: LD_VAR 0 14
14548: PUSH
14549: LD_INT 2
14551: ARRAY
14552: GREATEREQUAL
14553: AND
14554: PUSH
14555: LD_VAR 0 9
14559: PPUSH
14560: LD_INT 3
14562: PPUSH
14563: CALL_OW 275
14567: PUSH
14568: LD_VAR 0 14
14572: PUSH
14573: LD_INT 3
14575: ARRAY
14576: GREATEREQUAL
14577: AND
14578: IFFALSE 14590
// result := weapon ;
14580: LD_ADDR_VAR 0 3
14584: PUSH
14585: LD_VAR 0 18
14589: ST_TO_ADDR
// end ; end ;
14590: LD_VAR 0 3
14594: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14595: LD_INT 0
14597: PPUSH
14598: PPUSH
// result := true ;
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: LD_INT 1
14606: ST_TO_ADDR
// if array1 = array2 then
14607: LD_VAR 0 1
14611: PUSH
14612: LD_VAR 0 2
14616: EQUAL
14617: IFFALSE 14677
// begin for i = 1 to array1 do
14619: LD_ADDR_VAR 0 4
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_VAR 0 1
14633: PUSH
14634: FOR_TO
14635: IFFALSE 14673
// if array1 [ i ] <> array2 [ i ] then
14637: LD_VAR 0 1
14641: PUSH
14642: LD_VAR 0 4
14646: ARRAY
14647: PUSH
14648: LD_VAR 0 2
14652: PUSH
14653: LD_VAR 0 4
14657: ARRAY
14658: NONEQUAL
14659: IFFALSE 14671
// begin result := false ;
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_INT 0
14668: ST_TO_ADDR
// break ;
14669: GO 14673
// end ;
14671: GO 14634
14673: POP
14674: POP
// end else
14675: GO 14685
// result := false ;
14677: LD_ADDR_VAR 0 3
14681: PUSH
14682: LD_INT 0
14684: ST_TO_ADDR
// end ;
14685: LD_VAR 0 3
14689: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14690: LD_INT 0
14692: PPUSH
14693: PPUSH
// if not array1 or not array2 then
14694: LD_VAR 0 1
14698: NOT
14699: PUSH
14700: LD_VAR 0 2
14704: NOT
14705: OR
14706: IFFALSE 14710
// exit ;
14708: GO 14774
// result := true ;
14710: LD_ADDR_VAR 0 3
14714: PUSH
14715: LD_INT 1
14717: ST_TO_ADDR
// for i = 1 to array1 do
14718: LD_ADDR_VAR 0 4
14722: PUSH
14723: DOUBLE
14724: LD_INT 1
14726: DEC
14727: ST_TO_ADDR
14728: LD_VAR 0 1
14732: PUSH
14733: FOR_TO
14734: IFFALSE 14772
// if array1 [ i ] <> array2 [ i ] then
14736: LD_VAR 0 1
14740: PUSH
14741: LD_VAR 0 4
14745: ARRAY
14746: PUSH
14747: LD_VAR 0 2
14751: PUSH
14752: LD_VAR 0 4
14756: ARRAY
14757: NONEQUAL
14758: IFFALSE 14770
// begin result := false ;
14760: LD_ADDR_VAR 0 3
14764: PUSH
14765: LD_INT 0
14767: ST_TO_ADDR
// break ;
14768: GO 14772
// end ;
14770: GO 14733
14772: POP
14773: POP
// end ;
14774: LD_VAR 0 3
14778: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14779: LD_INT 0
14781: PPUSH
14782: PPUSH
14783: PPUSH
// pom := GetBase ( fac ) ;
14784: LD_ADDR_VAR 0 5
14788: PUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 274
14798: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14799: LD_ADDR_VAR 0 4
14803: PUSH
14804: LD_VAR 0 2
14808: PUSH
14809: LD_INT 1
14811: ARRAY
14812: PPUSH
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 2
14820: ARRAY
14821: PPUSH
14822: LD_VAR 0 2
14826: PUSH
14827: LD_INT 3
14829: ARRAY
14830: PPUSH
14831: LD_VAR 0 2
14835: PUSH
14836: LD_INT 4
14838: ARRAY
14839: PPUSH
14840: CALL_OW 449
14844: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14845: LD_ADDR_VAR 0 3
14849: PUSH
14850: LD_VAR 0 5
14854: PPUSH
14855: LD_INT 1
14857: PPUSH
14858: CALL_OW 275
14862: PUSH
14863: LD_VAR 0 4
14867: PUSH
14868: LD_INT 1
14870: ARRAY
14871: GREATEREQUAL
14872: PUSH
14873: LD_VAR 0 5
14877: PPUSH
14878: LD_INT 2
14880: PPUSH
14881: CALL_OW 275
14885: PUSH
14886: LD_VAR 0 4
14890: PUSH
14891: LD_INT 2
14893: ARRAY
14894: GREATEREQUAL
14895: AND
14896: PUSH
14897: LD_VAR 0 5
14901: PPUSH
14902: LD_INT 3
14904: PPUSH
14905: CALL_OW 275
14909: PUSH
14910: LD_VAR 0 4
14914: PUSH
14915: LD_INT 3
14917: ARRAY
14918: GREATEREQUAL
14919: AND
14920: ST_TO_ADDR
// end ;
14921: LD_VAR 0 3
14925: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14926: LD_INT 0
14928: PPUSH
14929: PPUSH
14930: PPUSH
14931: PPUSH
// pom := GetBase ( building ) ;
14932: LD_ADDR_VAR 0 3
14936: PUSH
14937: LD_VAR 0 1
14941: PPUSH
14942: CALL_OW 274
14946: ST_TO_ADDR
// if not pom then
14947: LD_VAR 0 3
14951: NOT
14952: IFFALSE 14956
// exit ;
14954: GO 15126
// btype := GetBType ( building ) ;
14956: LD_ADDR_VAR 0 5
14960: PUSH
14961: LD_VAR 0 1
14965: PPUSH
14966: CALL_OW 266
14970: ST_TO_ADDR
// if btype = b_armoury then
14971: LD_VAR 0 5
14975: PUSH
14976: LD_INT 4
14978: EQUAL
14979: IFFALSE 14989
// btype := b_barracks ;
14981: LD_ADDR_VAR 0 5
14985: PUSH
14986: LD_INT 5
14988: ST_TO_ADDR
// if btype = b_depot then
14989: LD_VAR 0 5
14993: PUSH
14994: LD_INT 0
14996: EQUAL
14997: IFFALSE 15007
// btype := b_warehouse ;
14999: LD_ADDR_VAR 0 5
15003: PUSH
15004: LD_INT 1
15006: ST_TO_ADDR
// if btype = b_workshop then
15007: LD_VAR 0 5
15011: PUSH
15012: LD_INT 2
15014: EQUAL
15015: IFFALSE 15025
// btype := b_factory ;
15017: LD_ADDR_VAR 0 5
15021: PUSH
15022: LD_INT 3
15024: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15025: LD_ADDR_VAR 0 4
15029: PUSH
15030: LD_VAR 0 5
15034: PPUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 248
15044: PPUSH
15045: CALL_OW 450
15049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15050: LD_ADDR_VAR 0 2
15054: PUSH
15055: LD_VAR 0 3
15059: PPUSH
15060: LD_INT 1
15062: PPUSH
15063: CALL_OW 275
15067: PUSH
15068: LD_VAR 0 4
15072: PUSH
15073: LD_INT 1
15075: ARRAY
15076: GREATEREQUAL
15077: PUSH
15078: LD_VAR 0 3
15082: PPUSH
15083: LD_INT 2
15085: PPUSH
15086: CALL_OW 275
15090: PUSH
15091: LD_VAR 0 4
15095: PUSH
15096: LD_INT 2
15098: ARRAY
15099: GREATEREQUAL
15100: AND
15101: PUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: LD_INT 3
15109: PPUSH
15110: CALL_OW 275
15114: PUSH
15115: LD_VAR 0 4
15119: PUSH
15120: LD_INT 3
15122: ARRAY
15123: GREATEREQUAL
15124: AND
15125: ST_TO_ADDR
// end ;
15126: LD_VAR 0 2
15130: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
15135: PPUSH
// pom := GetBase ( building ) ;
15136: LD_ADDR_VAR 0 4
15140: PUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 274
15150: ST_TO_ADDR
// if not pom then
15151: LD_VAR 0 4
15155: NOT
15156: IFFALSE 15160
// exit ;
15158: GO 15261
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15160: LD_ADDR_VAR 0 5
15164: PUSH
15165: LD_VAR 0 2
15169: PPUSH
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 248
15179: PPUSH
15180: CALL_OW 450
15184: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15185: LD_ADDR_VAR 0 3
15189: PUSH
15190: LD_VAR 0 4
15194: PPUSH
15195: LD_INT 1
15197: PPUSH
15198: CALL_OW 275
15202: PUSH
15203: LD_VAR 0 5
15207: PUSH
15208: LD_INT 1
15210: ARRAY
15211: GREATEREQUAL
15212: PUSH
15213: LD_VAR 0 4
15217: PPUSH
15218: LD_INT 2
15220: PPUSH
15221: CALL_OW 275
15225: PUSH
15226: LD_VAR 0 5
15230: PUSH
15231: LD_INT 2
15233: ARRAY
15234: GREATEREQUAL
15235: AND
15236: PUSH
15237: LD_VAR 0 4
15241: PPUSH
15242: LD_INT 3
15244: PPUSH
15245: CALL_OW 275
15249: PUSH
15250: LD_VAR 0 5
15254: PUSH
15255: LD_INT 3
15257: ARRAY
15258: GREATEREQUAL
15259: AND
15260: ST_TO_ADDR
// end ;
15261: LD_VAR 0 3
15265: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15266: LD_INT 0
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
// result := false ;
15279: LD_ADDR_VAR 0 8
15283: PUSH
15284: LD_INT 0
15286: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15287: LD_VAR 0 5
15291: NOT
15292: PUSH
15293: LD_VAR 0 1
15297: NOT
15298: OR
15299: PUSH
15300: LD_VAR 0 2
15304: NOT
15305: OR
15306: PUSH
15307: LD_VAR 0 3
15311: NOT
15312: OR
15313: IFFALSE 15317
// exit ;
15315: GO 16131
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15317: LD_ADDR_VAR 0 14
15321: PUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: LD_VAR 0 2
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: LD_VAR 0 4
15341: PPUSH
15342: LD_VAR 0 5
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: CALL_OW 248
15355: PPUSH
15356: LD_INT 0
15358: PPUSH
15359: CALL 17364 0 6
15363: ST_TO_ADDR
// if not hexes then
15364: LD_VAR 0 14
15368: NOT
15369: IFFALSE 15373
// exit ;
15371: GO 16131
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15373: LD_ADDR_VAR 0 17
15377: PUSH
15378: LD_VAR 0 5
15382: PPUSH
15383: LD_INT 22
15385: PUSH
15386: LD_VAR 0 13
15390: PPUSH
15391: CALL_OW 255
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 30
15405: PUSH
15406: LD_INT 0
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 30
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 72
15436: ST_TO_ADDR
// for i = 1 to hexes do
15437: LD_ADDR_VAR 0 9
15441: PUSH
15442: DOUBLE
15443: LD_INT 1
15445: DEC
15446: ST_TO_ADDR
15447: LD_VAR 0 14
15451: PUSH
15452: FOR_TO
15453: IFFALSE 16129
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15455: LD_ADDR_VAR 0 13
15459: PUSH
15460: LD_VAR 0 14
15464: PUSH
15465: LD_VAR 0 9
15469: ARRAY
15470: PUSH
15471: LD_INT 1
15473: ARRAY
15474: PPUSH
15475: LD_VAR 0 14
15479: PUSH
15480: LD_VAR 0 9
15484: ARRAY
15485: PUSH
15486: LD_INT 2
15488: ARRAY
15489: PPUSH
15490: CALL_OW 428
15494: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15495: LD_VAR 0 14
15499: PUSH
15500: LD_VAR 0 9
15504: ARRAY
15505: PUSH
15506: LD_INT 1
15508: ARRAY
15509: PPUSH
15510: LD_VAR 0 14
15514: PUSH
15515: LD_VAR 0 9
15519: ARRAY
15520: PUSH
15521: LD_INT 2
15523: ARRAY
15524: PPUSH
15525: CALL_OW 351
15529: PUSH
15530: LD_VAR 0 14
15534: PUSH
15535: LD_VAR 0 9
15539: ARRAY
15540: PUSH
15541: LD_INT 1
15543: ARRAY
15544: PPUSH
15545: LD_VAR 0 14
15549: PUSH
15550: LD_VAR 0 9
15554: ARRAY
15555: PUSH
15556: LD_INT 2
15558: ARRAY
15559: PPUSH
15560: CALL_OW 488
15564: NOT
15565: OR
15566: PUSH
15567: LD_VAR 0 13
15571: PPUSH
15572: CALL_OW 247
15576: PUSH
15577: LD_INT 3
15579: EQUAL
15580: OR
15581: IFFALSE 15587
// exit ;
15583: POP
15584: POP
15585: GO 16131
// if not tmp then
15587: LD_VAR 0 13
15591: NOT
15592: IFFALSE 15596
// continue ;
15594: GO 15452
// result := true ;
15596: LD_ADDR_VAR 0 8
15600: PUSH
15601: LD_INT 1
15603: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15604: LD_VAR 0 6
15608: PUSH
15609: LD_VAR 0 13
15613: PPUSH
15614: CALL_OW 247
15618: PUSH
15619: LD_INT 2
15621: EQUAL
15622: AND
15623: PUSH
15624: LD_VAR 0 13
15628: PPUSH
15629: CALL_OW 263
15633: PUSH
15634: LD_INT 1
15636: EQUAL
15637: AND
15638: IFFALSE 15802
// begin if IsDrivenBy ( tmp ) then
15640: LD_VAR 0 13
15644: PPUSH
15645: CALL_OW 311
15649: IFFALSE 15653
// continue ;
15651: GO 15452
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15653: LD_VAR 0 6
15657: PPUSH
15658: LD_INT 3
15660: PUSH
15661: LD_INT 60
15663: PUSH
15664: EMPTY
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 3
15673: PUSH
15674: LD_INT 55
15676: PUSH
15677: EMPTY
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 72
15692: IFFALSE 15800
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15694: LD_ADDR_VAR 0 18
15698: PUSH
15699: LD_VAR 0 6
15703: PPUSH
15704: LD_INT 3
15706: PUSH
15707: LD_INT 60
15709: PUSH
15710: EMPTY
15711: LIST
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 3
15719: PUSH
15720: LD_INT 55
15722: PUSH
15723: EMPTY
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 72
15738: PUSH
15739: LD_INT 1
15741: ARRAY
15742: ST_TO_ADDR
// if IsInUnit ( driver ) then
15743: LD_VAR 0 18
15747: PPUSH
15748: CALL_OW 310
15752: IFFALSE 15763
// ComExit ( driver ) ;
15754: LD_VAR 0 18
15758: PPUSH
15759: CALL 41144 0 1
// AddComEnterUnit ( driver , tmp ) ;
15763: LD_VAR 0 18
15767: PPUSH
15768: LD_VAR 0 13
15772: PPUSH
15773: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15777: LD_VAR 0 18
15781: PPUSH
15782: LD_VAR 0 7
15786: PPUSH
15787: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15791: LD_VAR 0 18
15795: PPUSH
15796: CALL_OW 181
// end ; continue ;
15800: GO 15452
// end ; if not cleaners or not tmp in cleaners then
15802: LD_VAR 0 6
15806: NOT
15807: PUSH
15808: LD_VAR 0 13
15812: PUSH
15813: LD_VAR 0 6
15817: IN
15818: NOT
15819: OR
15820: IFFALSE 16127
// begin if dep then
15822: LD_VAR 0 17
15826: IFFALSE 15962
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15828: LD_ADDR_VAR 0 16
15832: PUSH
15833: LD_VAR 0 17
15837: PUSH
15838: LD_INT 1
15840: ARRAY
15841: PPUSH
15842: CALL_OW 250
15846: PPUSH
15847: LD_VAR 0 17
15851: PUSH
15852: LD_INT 1
15854: ARRAY
15855: PPUSH
15856: CALL_OW 254
15860: PPUSH
15861: LD_INT 5
15863: PPUSH
15864: CALL_OW 272
15868: PUSH
15869: LD_VAR 0 17
15873: PUSH
15874: LD_INT 1
15876: ARRAY
15877: PPUSH
15878: CALL_OW 251
15882: PPUSH
15883: LD_VAR 0 17
15887: PUSH
15888: LD_INT 1
15890: ARRAY
15891: PPUSH
15892: CALL_OW 254
15896: PPUSH
15897: LD_INT 5
15899: PPUSH
15900: CALL_OW 273
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15909: LD_VAR 0 16
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PPUSH
15918: LD_VAR 0 16
15922: PUSH
15923: LD_INT 2
15925: ARRAY
15926: PPUSH
15927: CALL_OW 488
15931: IFFALSE 15962
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15933: LD_VAR 0 13
15937: PPUSH
15938: LD_VAR 0 16
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: LD_VAR 0 16
15951: PUSH
15952: LD_INT 2
15954: ARRAY
15955: PPUSH
15956: CALL_OW 111
// continue ;
15960: GO 15452
// end ; end ; r := GetDir ( tmp ) ;
15962: LD_ADDR_VAR 0 15
15966: PUSH
15967: LD_VAR 0 13
15971: PPUSH
15972: CALL_OW 254
15976: ST_TO_ADDR
// if r = 5 then
15977: LD_VAR 0 15
15981: PUSH
15982: LD_INT 5
15984: EQUAL
15985: IFFALSE 15995
// r := 0 ;
15987: LD_ADDR_VAR 0 15
15991: PUSH
15992: LD_INT 0
15994: ST_TO_ADDR
// for j = r to 5 do
15995: LD_ADDR_VAR 0 10
15999: PUSH
16000: DOUBLE
16001: LD_VAR 0 15
16005: DEC
16006: ST_TO_ADDR
16007: LD_INT 5
16009: PUSH
16010: FOR_TO
16011: IFFALSE 16125
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16013: LD_ADDR_VAR 0 11
16017: PUSH
16018: LD_VAR 0 13
16022: PPUSH
16023: CALL_OW 250
16027: PPUSH
16028: LD_VAR 0 10
16032: PPUSH
16033: LD_INT 2
16035: PPUSH
16036: CALL_OW 272
16040: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16041: LD_ADDR_VAR 0 12
16045: PUSH
16046: LD_VAR 0 13
16050: PPUSH
16051: CALL_OW 251
16055: PPUSH
16056: LD_VAR 0 10
16060: PPUSH
16061: LD_INT 2
16063: PPUSH
16064: CALL_OW 273
16068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16069: LD_VAR 0 11
16073: PPUSH
16074: LD_VAR 0 12
16078: PPUSH
16079: CALL_OW 488
16083: PUSH
16084: LD_VAR 0 11
16088: PPUSH
16089: LD_VAR 0 12
16093: PPUSH
16094: CALL_OW 428
16098: NOT
16099: AND
16100: IFFALSE 16123
// begin ComMoveXY ( tmp , _x , _y ) ;
16102: LD_VAR 0 13
16106: PPUSH
16107: LD_VAR 0 11
16111: PPUSH
16112: LD_VAR 0 12
16116: PPUSH
16117: CALL_OW 111
// break ;
16121: GO 16125
// end ; end ;
16123: GO 16010
16125: POP
16126: POP
// end ; end ;
16127: GO 15452
16129: POP
16130: POP
// end ;
16131: LD_VAR 0 8
16135: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16136: LD_INT 0
16138: PPUSH
// result := true ;
16139: LD_ADDR_VAR 0 3
16143: PUSH
16144: LD_INT 1
16146: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16147: LD_VAR 0 2
16151: PUSH
16152: LD_INT 24
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16166
16158: LD_INT 33
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16191
16166: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16167: LD_ADDR_VAR 0 3
16171: PUSH
16172: LD_INT 32
16174: PPUSH
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL_OW 321
16184: PUSH
16185: LD_INT 2
16187: EQUAL
16188: ST_TO_ADDR
16189: GO 16507
16191: LD_INT 20
16193: DOUBLE
16194: EQUAL
16195: IFTRUE 16199
16197: GO 16224
16199: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_INT 6
16207: PPUSH
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 321
16217: PUSH
16218: LD_INT 2
16220: EQUAL
16221: ST_TO_ADDR
16222: GO 16507
16224: LD_INT 22
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16238
16230: LD_INT 36
16232: DOUBLE
16233: EQUAL
16234: IFTRUE 16238
16236: GO 16263
16238: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16239: LD_ADDR_VAR 0 3
16243: PUSH
16244: LD_INT 15
16246: PPUSH
16247: LD_VAR 0 1
16251: PPUSH
16252: CALL_OW 321
16256: PUSH
16257: LD_INT 2
16259: EQUAL
16260: ST_TO_ADDR
16261: GO 16507
16263: LD_INT 30
16265: DOUBLE
16266: EQUAL
16267: IFTRUE 16271
16269: GO 16296
16271: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16272: LD_ADDR_VAR 0 3
16276: PUSH
16277: LD_INT 20
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 321
16289: PUSH
16290: LD_INT 2
16292: EQUAL
16293: ST_TO_ADDR
16294: GO 16507
16296: LD_INT 28
16298: DOUBLE
16299: EQUAL
16300: IFTRUE 16310
16302: LD_INT 21
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16310
16308: GO 16335
16310: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16311: LD_ADDR_VAR 0 3
16315: PUSH
16316: LD_INT 21
16318: PPUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 321
16328: PUSH
16329: LD_INT 2
16331: EQUAL
16332: ST_TO_ADDR
16333: GO 16507
16335: LD_INT 16
16337: DOUBLE
16338: EQUAL
16339: IFTRUE 16343
16341: GO 16368
16343: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16344: LD_ADDR_VAR 0 3
16348: PUSH
16349: LD_INT 84
16351: PPUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 321
16361: PUSH
16362: LD_INT 2
16364: EQUAL
16365: ST_TO_ADDR
16366: GO 16507
16368: LD_INT 19
16370: DOUBLE
16371: EQUAL
16372: IFTRUE 16382
16374: LD_INT 23
16376: DOUBLE
16377: EQUAL
16378: IFTRUE 16382
16380: GO 16407
16382: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16383: LD_ADDR_VAR 0 3
16387: PUSH
16388: LD_INT 83
16390: PPUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 321
16400: PUSH
16401: LD_INT 2
16403: EQUAL
16404: ST_TO_ADDR
16405: GO 16507
16407: LD_INT 17
16409: DOUBLE
16410: EQUAL
16411: IFTRUE 16415
16413: GO 16440
16415: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16416: LD_ADDR_VAR 0 3
16420: PUSH
16421: LD_INT 39
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 321
16433: PUSH
16434: LD_INT 2
16436: EQUAL
16437: ST_TO_ADDR
16438: GO 16507
16440: LD_INT 18
16442: DOUBLE
16443: EQUAL
16444: IFTRUE 16448
16446: GO 16473
16448: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16449: LD_ADDR_VAR 0 3
16453: PUSH
16454: LD_INT 40
16456: PPUSH
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 321
16466: PUSH
16467: LD_INT 2
16469: EQUAL
16470: ST_TO_ADDR
16471: GO 16507
16473: LD_INT 27
16475: DOUBLE
16476: EQUAL
16477: IFTRUE 16481
16479: GO 16506
16481: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16482: LD_ADDR_VAR 0 3
16486: PUSH
16487: LD_INT 35
16489: PPUSH
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 321
16499: PUSH
16500: LD_INT 2
16502: EQUAL
16503: ST_TO_ADDR
16504: GO 16507
16506: POP
// end ;
16507: LD_VAR 0 3
16511: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16512: LD_INT 0
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
// result := false ;
16525: LD_ADDR_VAR 0 6
16529: PUSH
16530: LD_INT 0
16532: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16533: LD_VAR 0 1
16537: NOT
16538: PUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 266
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: LD_INT 1
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: IN
16559: NOT
16560: OR
16561: PUSH
16562: LD_VAR 0 2
16566: NOT
16567: OR
16568: PUSH
16569: LD_VAR 0 5
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: LD_INT 3
16585: PUSH
16586: LD_INT 4
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: IN
16600: NOT
16601: OR
16602: PUSH
16603: LD_VAR 0 3
16607: PPUSH
16608: LD_VAR 0 4
16612: PPUSH
16613: CALL_OW 488
16617: NOT
16618: OR
16619: IFFALSE 16623
// exit ;
16621: GO 17359
// side := GetSide ( depot ) ;
16623: LD_ADDR_VAR 0 9
16627: PUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: CALL_OW 255
16637: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16638: LD_VAR 0 9
16642: PPUSH
16643: LD_VAR 0 2
16647: PPUSH
16648: CALL 16136 0 2
16652: NOT
16653: IFFALSE 16657
// exit ;
16655: GO 17359
// pom := GetBase ( depot ) ;
16657: LD_ADDR_VAR 0 10
16661: PUSH
16662: LD_VAR 0 1
16666: PPUSH
16667: CALL_OW 274
16671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16672: LD_ADDR_VAR 0 11
16676: PUSH
16677: LD_VAR 0 2
16681: PPUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 248
16691: PPUSH
16692: CALL_OW 450
16696: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16697: LD_VAR 0 10
16701: PPUSH
16702: LD_INT 1
16704: PPUSH
16705: CALL_OW 275
16709: PUSH
16710: LD_VAR 0 11
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: GREATEREQUAL
16719: PUSH
16720: LD_VAR 0 10
16724: PPUSH
16725: LD_INT 2
16727: PPUSH
16728: CALL_OW 275
16732: PUSH
16733: LD_VAR 0 11
16737: PUSH
16738: LD_INT 2
16740: ARRAY
16741: GREATEREQUAL
16742: AND
16743: PUSH
16744: LD_VAR 0 10
16748: PPUSH
16749: LD_INT 3
16751: PPUSH
16752: CALL_OW 275
16756: PUSH
16757: LD_VAR 0 11
16761: PUSH
16762: LD_INT 3
16764: ARRAY
16765: GREATEREQUAL
16766: AND
16767: NOT
16768: IFFALSE 16772
// exit ;
16770: GO 17359
// if GetBType ( depot ) = b_depot then
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 266
16781: PUSH
16782: LD_INT 0
16784: EQUAL
16785: IFFALSE 16797
// dist := 28 else
16787: LD_ADDR_VAR 0 14
16791: PUSH
16792: LD_INT 28
16794: ST_TO_ADDR
16795: GO 16805
// dist := 36 ;
16797: LD_ADDR_VAR 0 14
16801: PUSH
16802: LD_INT 36
16804: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16805: LD_VAR 0 1
16809: PPUSH
16810: LD_VAR 0 3
16814: PPUSH
16815: LD_VAR 0 4
16819: PPUSH
16820: CALL_OW 297
16824: PUSH
16825: LD_VAR 0 14
16829: GREATER
16830: IFFALSE 16834
// exit ;
16832: GO 17359
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16834: LD_ADDR_VAR 0 12
16838: PUSH
16839: LD_VAR 0 2
16843: PPUSH
16844: LD_VAR 0 3
16848: PPUSH
16849: LD_VAR 0 4
16853: PPUSH
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 248
16868: PPUSH
16869: LD_INT 0
16871: PPUSH
16872: CALL 17364 0 6
16876: ST_TO_ADDR
// if not hexes then
16877: LD_VAR 0 12
16881: NOT
16882: IFFALSE 16886
// exit ;
16884: GO 17359
// hex := GetHexInfo ( x , y ) ;
16886: LD_ADDR_VAR 0 15
16890: PUSH
16891: LD_VAR 0 3
16895: PPUSH
16896: LD_VAR 0 4
16900: PPUSH
16901: CALL_OW 546
16905: ST_TO_ADDR
// if hex [ 1 ] then
16906: LD_VAR 0 15
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: IFFALSE 16918
// exit ;
16916: GO 17359
// height := hex [ 2 ] ;
16918: LD_ADDR_VAR 0 13
16922: PUSH
16923: LD_VAR 0 15
16927: PUSH
16928: LD_INT 2
16930: ARRAY
16931: ST_TO_ADDR
// for i = 1 to hexes do
16932: LD_ADDR_VAR 0 7
16936: PUSH
16937: DOUBLE
16938: LD_INT 1
16940: DEC
16941: ST_TO_ADDR
16942: LD_VAR 0 12
16946: PUSH
16947: FOR_TO
16948: IFFALSE 17278
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16950: LD_VAR 0 12
16954: PUSH
16955: LD_VAR 0 7
16959: ARRAY
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PPUSH
16965: LD_VAR 0 12
16969: PUSH
16970: LD_VAR 0 7
16974: ARRAY
16975: PUSH
16976: LD_INT 2
16978: ARRAY
16979: PPUSH
16980: CALL_OW 488
16984: NOT
16985: PUSH
16986: LD_VAR 0 12
16990: PUSH
16991: LD_VAR 0 7
16995: ARRAY
16996: PUSH
16997: LD_INT 1
16999: ARRAY
17000: PPUSH
17001: LD_VAR 0 12
17005: PUSH
17006: LD_VAR 0 7
17010: ARRAY
17011: PUSH
17012: LD_INT 2
17014: ARRAY
17015: PPUSH
17016: CALL_OW 428
17020: PUSH
17021: LD_INT 0
17023: GREATER
17024: OR
17025: PUSH
17026: LD_VAR 0 12
17030: PUSH
17031: LD_VAR 0 7
17035: ARRAY
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: LD_VAR 0 12
17045: PUSH
17046: LD_VAR 0 7
17050: ARRAY
17051: PUSH
17052: LD_INT 2
17054: ARRAY
17055: PPUSH
17056: CALL_OW 351
17060: OR
17061: IFFALSE 17067
// exit ;
17063: POP
17064: POP
17065: GO 17359
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17067: LD_ADDR_VAR 0 8
17071: PUSH
17072: LD_VAR 0 12
17076: PUSH
17077: LD_VAR 0 7
17081: ARRAY
17082: PUSH
17083: LD_INT 1
17085: ARRAY
17086: PPUSH
17087: LD_VAR 0 12
17091: PUSH
17092: LD_VAR 0 7
17096: ARRAY
17097: PUSH
17098: LD_INT 2
17100: ARRAY
17101: PPUSH
17102: CALL_OW 546
17106: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17107: LD_VAR 0 8
17111: PUSH
17112: LD_INT 1
17114: ARRAY
17115: PUSH
17116: LD_VAR 0 8
17120: PUSH
17121: LD_INT 2
17123: ARRAY
17124: PUSH
17125: LD_VAR 0 13
17129: PUSH
17130: LD_INT 2
17132: PLUS
17133: GREATER
17134: OR
17135: PUSH
17136: LD_VAR 0 8
17140: PUSH
17141: LD_INT 2
17143: ARRAY
17144: PUSH
17145: LD_VAR 0 13
17149: PUSH
17150: LD_INT 2
17152: MINUS
17153: LESS
17154: OR
17155: PUSH
17156: LD_VAR 0 8
17160: PUSH
17161: LD_INT 3
17163: ARRAY
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: LD_INT 8
17170: PUSH
17171: LD_INT 9
17173: PUSH
17174: LD_INT 10
17176: PUSH
17177: LD_INT 11
17179: PUSH
17180: LD_INT 12
17182: PUSH
17183: LD_INT 13
17185: PUSH
17186: LD_INT 16
17188: PUSH
17189: LD_INT 17
17191: PUSH
17192: LD_INT 18
17194: PUSH
17195: LD_INT 19
17197: PUSH
17198: LD_INT 20
17200: PUSH
17201: LD_INT 21
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: IN
17219: NOT
17220: OR
17221: PUSH
17222: LD_VAR 0 8
17226: PUSH
17227: LD_INT 5
17229: ARRAY
17230: NOT
17231: OR
17232: PUSH
17233: LD_VAR 0 8
17237: PUSH
17238: LD_INT 6
17240: ARRAY
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: LD_INT 2
17247: PUSH
17248: LD_INT 7
17250: PUSH
17251: LD_INT 9
17253: PUSH
17254: LD_INT 10
17256: PUSH
17257: LD_INT 11
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: IN
17268: NOT
17269: OR
17270: IFFALSE 17276
// exit ;
17272: POP
17273: POP
17274: GO 17359
// end ;
17276: GO 16947
17278: POP
17279: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17280: LD_VAR 0 9
17284: PPUSH
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_VAR 0 4
17294: PPUSH
17295: LD_INT 20
17297: PPUSH
17298: CALL 9311 0 4
17302: PUSH
17303: LD_INT 4
17305: ARRAY
17306: IFFALSE 17310
// exit ;
17308: GO 17359
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17310: LD_VAR 0 2
17314: PUSH
17315: LD_INT 29
17317: PUSH
17318: LD_INT 30
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: IN
17325: PUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: LD_VAR 0 4
17335: PPUSH
17336: LD_VAR 0 9
17340: PPUSH
17341: CALL_OW 440
17345: NOT
17346: AND
17347: IFFALSE 17351
// exit ;
17349: GO 17359
// result := true ;
17351: LD_ADDR_VAR 0 6
17355: PUSH
17356: LD_INT 1
17358: ST_TO_ADDR
// end ;
17359: LD_VAR 0 6
17363: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17364: LD_INT 0
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
// result = [ ] ;
17424: LD_ADDR_VAR 0 7
17428: PUSH
17429: EMPTY
17430: ST_TO_ADDR
// temp_list = [ ] ;
17431: LD_ADDR_VAR 0 9
17435: PUSH
17436: EMPTY
17437: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17438: LD_VAR 0 4
17442: PUSH
17443: LD_INT 0
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: LD_INT 4
17457: PUSH
17458: LD_INT 5
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: IN
17469: NOT
17470: PUSH
17471: LD_VAR 0 1
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: IN
17486: PUSH
17487: LD_VAR 0 5
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: LD_INT 3
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: IN
17506: NOT
17507: AND
17508: OR
17509: IFFALSE 17513
// exit ;
17511: GO 35904
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17513: LD_VAR 0 1
17517: PUSH
17518: LD_INT 6
17520: PUSH
17521: LD_INT 7
17523: PUSH
17524: LD_INT 8
17526: PUSH
17527: LD_INT 13
17529: PUSH
17530: LD_INT 12
17532: PUSH
17533: LD_INT 15
17535: PUSH
17536: LD_INT 11
17538: PUSH
17539: LD_INT 14
17541: PUSH
17542: LD_INT 10
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: IN
17556: IFFALSE 17566
// btype = b_lab ;
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: LD_INT 6
17565: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17566: LD_VAR 0 6
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: IN
17585: NOT
17586: PUSH
17587: LD_VAR 0 1
17591: PUSH
17592: LD_INT 0
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: LD_INT 2
17600: PUSH
17601: LD_INT 3
17603: PUSH
17604: LD_INT 6
17606: PUSH
17607: LD_INT 36
17609: PUSH
17610: LD_INT 4
17612: PUSH
17613: LD_INT 5
17615: PUSH
17616: LD_INT 31
17618: PUSH
17619: LD_INT 32
17621: PUSH
17622: LD_INT 33
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: IN
17638: NOT
17639: PUSH
17640: LD_VAR 0 6
17644: PUSH
17645: LD_INT 1
17647: EQUAL
17648: AND
17649: OR
17650: PUSH
17651: LD_VAR 0 1
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 3
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: IN
17666: NOT
17667: PUSH
17668: LD_VAR 0 6
17672: PUSH
17673: LD_INT 2
17675: EQUAL
17676: AND
17677: OR
17678: IFFALSE 17688
// mode = 0 ;
17680: LD_ADDR_VAR 0 6
17684: PUSH
17685: LD_INT 0
17687: ST_TO_ADDR
// case mode of 0 :
17688: LD_VAR 0 6
17692: PUSH
17693: LD_INT 0
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 29154
17701: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17702: LD_ADDR_VAR 0 11
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: LD_INT 1
17722: NEG
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: LD_INT 0
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 0
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 1
17760: NEG
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: LD_INT 1
17775: NEG
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: NEG
17784: PUSH
17785: LD_INT 2
17787: NEG
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: LD_INT 2
17798: NEG
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: LD_INT 1
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: LD_INT 1
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: LD_INT 3
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: LD_INT 3
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17895: LD_ADDR_VAR 0 12
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 1
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 0
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 1
17964: NEG
17965: PUSH
17966: LD_INT 1
17968: NEG
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: LD_INT 1
17979: NEG
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 2
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 2
17997: PUSH
17998: LD_INT 1
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 1
18007: NEG
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 2
18018: NEG
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: NEG
18030: PUSH
18031: LD_INT 1
18033: NEG
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 2
18041: NEG
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 3
18052: NEG
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 3
18063: NEG
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18091: LD_ADDR_VAR 0 13
18095: PUSH
18096: LD_INT 0
18098: PUSH
18099: LD_INT 0
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 0
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 0
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 1
18160: NEG
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: LD_INT 2
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 1
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: LD_INT 2
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: NEG
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 2
18226: NEG
18227: PUSH
18228: LD_INT 2
18230: NEG
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 2
18238: NEG
18239: PUSH
18240: LD_INT 3
18242: NEG
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 3
18250: NEG
18251: PUSH
18252: LD_INT 2
18254: NEG
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 3
18262: NEG
18263: PUSH
18264: LD_INT 3
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18290: LD_ADDR_VAR 0 14
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: LD_INT 1
18310: NEG
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: LD_INT 1
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: LD_INT 2
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 0
18383: PUSH
18384: LD_INT 2
18386: NEG
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: LD_INT 2
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: NEG
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: LD_INT 3
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: LD_INT 3
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 2
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18486: LD_ADDR_VAR 0 15
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: NEG
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: LD_INT 1
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 2
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 2
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 2
18609: NEG
18610: PUSH
18611: LD_INT 0
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: NEG
18621: PUSH
18622: LD_INT 1
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 2
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 3
18653: PUSH
18654: LD_INT 1
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18679: LD_ADDR_VAR 0 16
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: LD_INT 1
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: LD_INT 2
18764: NEG
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 2
18802: NEG
18803: PUSH
18804: LD_INT 1
18806: NEG
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 3
18826: PUSH
18827: LD_INT 2
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 3
18836: PUSH
18837: LD_INT 3
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18872: LD_ADDR_VAR 0 17
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: NEG
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: NEG
19049: PUSH
19050: LD_INT 0
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 1
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: LD_INT 2
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19102: LD_ADDR_VAR 0 18
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: LD_INT 1
19122: NEG
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: LD_INT 0
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: LD_INT 2
19187: NEG
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 0
19195: PUSH
19196: LD_INT 2
19198: NEG
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 2
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 2
19289: NEG
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19332: LD_ADDR_VAR 0 19
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: LD_INT 2
19417: NEG
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: LD_INT 2
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 2
19508: NEG
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: NEG
19520: PUSH
19521: LD_INT 1
19523: NEG
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: LD_INT 2
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19562: LD_ADDR_VAR 0 20
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: LD_INT 1
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19792: LD_ADDR_VAR 0 21
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: LD_INT 1
19812: NEG
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 1
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: LD_INT 1
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: LD_INT 1
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: LD_INT 2
19877: NEG
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 0
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 2
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: LD_INT 2
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 1
19957: NEG
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20022: LD_ADDR_VAR 0 22
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: LD_INT 1
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: NEG
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 1
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: LD_INT 2
20107: NEG
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 0
20115: PUSH
20116: LD_INT 2
20118: NEG
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 2
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: NEG
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: LD_INT 2
20225: NEG
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20252: LD_ADDR_VAR 0 23
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 0
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_INT 0
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: LD_INT 2
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 0
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: LD_INT 2
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: NEG
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 2
20439: NEG
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 2
20451: NEG
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: NEG
20464: PUSH
20465: LD_INT 3
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: LD_INT 3
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20532: LD_ADDR_VAR 0 24
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: LD_INT 1
20552: NEG
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: LD_INT 2
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: NEG
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 2
20731: NEG
20732: PUSH
20733: LD_INT 2
20735: NEG
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: LD_INT 2
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 3
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 3
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20808: LD_ADDR_VAR 0 25
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: LD_INT 0
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 1
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: NEG
20890: PUSH
20891: LD_INT 2
20893: NEG
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: LD_INT 2
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: NEG
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 2
21007: NEG
21008: PUSH
21009: LD_INT 2
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 3
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: LD_INT 3
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21082: LD_ADDR_VAR 0 26
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: LD_INT 1
21102: NEG
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: LD_INT 1
21155: NEG
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: LD_INT 2
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 2
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 0
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 2
21258: NEG
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: LD_INT 1
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: NEG
21282: PUSH
21283: LD_INT 2
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: PUSH
21294: LD_INT 3
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 3
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 2
21324: NEG
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21358: LD_ADDR_VAR 0 27
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 1
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 2
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 2
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 2
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 2
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 2
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 2
21534: NEG
21535: PUSH
21536: LD_INT 0
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: LD_INT 2
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 2
21580: NEG
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 3
21591: NEG
21592: PUSH
21593: LD_INT 1
21595: NEG
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 3
21603: NEG
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21638: LD_ADDR_VAR 0 28
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: LD_INT 0
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 1
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: LD_INT 2
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 2
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: LD_INT 1
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: LD_INT 2
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 2
21814: NEG
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: LD_INT 2
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: LD_INT 3
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: LD_INT 3
21865: NEG
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 3
21873: NEG
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 3
21885: NEG
21886: PUSH
21887: LD_INT 2
21889: NEG
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21920: LD_ADDR_VAR 0 29
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: NEG
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: NEG
22002: PUSH
22003: LD_INT 2
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: LD_INT 2
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: LD_INT 2
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: NEG
22111: PUSH
22112: LD_INT 3
22114: NEG
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 3
22164: NEG
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22199: LD_ADDR_VAR 0 30
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 2
22376: NEG
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: LD_INT 3
22392: NEG
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: LD_INT 2
22403: NEG
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 3
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 3
22442: NEG
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22477: LD_ADDR_VAR 0 31
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: NEG
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 3
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: LD_INT 3
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 3
22720: NEG
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22755: LD_ADDR_VAR 0 32
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 1
22836: NEG
22837: PUSH
22838: LD_INT 2
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 2
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 2
22932: NEG
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: LD_INT 3
22948: NEG
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 2
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 3
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 2
22987: NEG
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 3
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23033: LD_ADDR_VAR 0 33
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 2
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 2
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: NEG
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: NEG
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: LD_INT 2
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 2
23223: NEG
23224: PUSH
23225: LD_INT 3
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: LD_INT 1
23238: NEG
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 3
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23312: LD_ADDR_VAR 0 34
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: NEG
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 2
23491: NEG
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: LD_INT 3
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: LD_INT 3
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 3
23557: NEG
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23592: LD_ADDR_VAR 0 35
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 2
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 2
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23704: LD_ADDR_VAR 0 36
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 1
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 1
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23816: LD_ADDR_VAR 0 37
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: LD_INT 0
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23928: LD_ADDR_VAR 0 38
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: NEG
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24040: LD_ADDR_VAR 0 39
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: LD_INT 1
24060: NEG
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 1
24098: NEG
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24152: LD_ADDR_VAR 0 40
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: NEG
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: LD_INT 1
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24264: LD_ADDR_VAR 0 41
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: NEG
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: LD_INT 2
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: LD_INT 3
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 3
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 3
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 3
24507: PUSH
24508: LD_INT 3
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: LD_INT 3
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 3
24538: NEG
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 3
24549: NEG
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 3
24561: NEG
24562: PUSH
24563: LD_INT 2
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 3
24573: NEG
24574: PUSH
24575: LD_INT 3
24577: NEG
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24614: LD_ADDR_VAR 0 42
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 2
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: LD_INT 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: LD_INT 2
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 2
24780: NEG
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: LD_INT 3
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 3
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 3
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: LD_INT 3
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 3
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 3
24911: NEG
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 3
24923: NEG
24924: PUSH
24925: LD_INT 3
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24964: LD_ADDR_VAR 0 43
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: NEG
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 3
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 3
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 3
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 3
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 3
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 3
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 3
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 3
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25312: LD_ADDR_VAR 0 44
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 2
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: NEG
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: LD_INT 3
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 3
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 3
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 3
25555: PUSH
25556: LD_INT 3
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 3
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 3
25586: NEG
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 3
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: NEG
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 3
25621: NEG
25622: PUSH
25623: LD_INT 3
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25662: LD_ADDR_VAR 0 45
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 0
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 2
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: LD_INT 3
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 3
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 2
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 3
25959: NEG
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: NEG
25972: PUSH
25973: LD_INT 3
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26012: LD_ADDR_VAR 0 46
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 2
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 3
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 3
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 3
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 3
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 3
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 3
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26360: LD_ADDR_VAR 0 47
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: NEG
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26511: LD_ADDR_VAR 0 48
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: LD_INT 2
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26658: LD_ADDR_VAR 0 49
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 2
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26802: LD_ADDR_VAR 0 50
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26946: LD_ADDR_VAR 0 51
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27093: LD_ADDR_VAR 0 52
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27244: LD_ADDR_VAR 0 53
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 2
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 2
27443: NEG
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27474: LD_ADDR_VAR 0 54
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 2
27650: NEG
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27704: LD_ADDR_VAR 0 55
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 2
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 2
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: NEG
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27934: LD_ADDR_VAR 0 56
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: LD_INT 2
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: LD_INT 2
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 2
28110: NEG
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: LD_INT 2
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28164: LD_ADDR_VAR 0 57
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: LD_INT 2
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28394: LD_ADDR_VAR 0 58
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 0
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: NEG
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: LD_INT 2
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 2
28570: NEG
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28624: LD_ADDR_VAR 0 59
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28712: LD_ADDR_VAR 0 60
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28800: LD_ADDR_VAR 0 61
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28888: LD_ADDR_VAR 0 62
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28976: LD_ADDR_VAR 0 63
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29064: LD_ADDR_VAR 0 64
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// end ; 1 :
29152: GO 35049
29154: LD_INT 1
29156: DOUBLE
29157: EQUAL
29158: IFTRUE 29162
29160: GO 31785
29162: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29163: LD_ADDR_VAR 0 11
29167: PUSH
29168: LD_INT 1
29170: NEG
29171: PUSH
29172: LD_INT 3
29174: NEG
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 2
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29207: LD_ADDR_VAR 0 12
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29248: LD_ADDR_VAR 0 13
29252: PUSH
29253: LD_INT 3
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 3
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29288: LD_ADDR_VAR 0 14
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: LD_INT 3
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: LD_INT 3
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 1
29315: NEG
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29329: LD_ADDR_VAR 0 15
29333: PUSH
29334: LD_INT 2
29336: NEG
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 3
29347: NEG
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 3
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29373: LD_ADDR_VAR 0 16
29377: PUSH
29378: LD_INT 2
29380: NEG
29381: PUSH
29382: LD_INT 3
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 3
29392: NEG
29393: PUSH
29394: LD_INT 2
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 3
29404: NEG
29405: PUSH
29406: LD_INT 3
29408: NEG
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29419: LD_ADDR_VAR 0 17
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: LD_INT 3
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: LD_INT 3
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29463: LD_ADDR_VAR 0 18
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29504: LD_ADDR_VAR 0 19
29508: PUSH
29509: LD_INT 3
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 3
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29544: LD_ADDR_VAR 0 20
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 3
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 1
29571: NEG
29572: PUSH
29573: LD_INT 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29585: LD_ADDR_VAR 0 21
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 3
29614: NEG
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29629: LD_ADDR_VAR 0 22
29633: PUSH
29634: LD_INT 2
29636: NEG
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 3
29660: NEG
29661: PUSH
29662: LD_INT 3
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29675: LD_ADDR_VAR 0 23
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: LD_INT 4
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29719: LD_ADDR_VAR 0 24
29723: PUSH
29724: LD_INT 3
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 3
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: LD_INT 1
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: LIST
29759: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29760: LD_ADDR_VAR 0 25
29764: PUSH
29765: LD_INT 3
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 4
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29800: LD_ADDR_VAR 0 26
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 4
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 1
29827: NEG
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29841: LD_ADDR_VAR 0 27
29845: PUSH
29846: LD_INT 3
29848: NEG
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 3
29859: NEG
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 4
29870: NEG
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29885: LD_ADDR_VAR 0 28
29889: PUSH
29890: LD_INT 3
29892: NEG
29893: PUSH
29894: LD_INT 3
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 3
29904: NEG
29905: PUSH
29906: LD_INT 4
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 4
29916: NEG
29917: PUSH
29918: LD_INT 3
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29931: LD_ADDR_VAR 0 29
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: LD_INT 3
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 2
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 4
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: LD_INT 4
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: LD_INT 5
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 5
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 4
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: LD_INT 6
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: LD_INT 6
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: LD_INT 5
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30086: LD_ADDR_VAR 0 30
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 3
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 3
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 3
30124: PUSH
30125: LD_INT 1
30127: NEG
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 4
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 4
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 4
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 5
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 5
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 5
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 6
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 6
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30229: LD_ADDR_VAR 0 31
30233: PUSH
30234: LD_INT 3
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 3
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 4
30276: PUSH
30277: LD_INT 4
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 4
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 5
30296: PUSH
30297: LD_INT 4
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 5
30306: PUSH
30307: LD_INT 5
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 4
30316: PUSH
30317: LD_INT 5
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 6
30326: PUSH
30327: LD_INT 5
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 6
30336: PUSH
30337: LD_INT 6
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 5
30346: PUSH
30347: LD_INT 6
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30368: LD_ADDR_VAR 0 32
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: LD_INT 4
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: LD_INT 4
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 3
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: LD_INT 5
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: LD_INT 5
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: LD_INT 4
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 6
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 6
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: LD_INT 5
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30511: LD_ADDR_VAR 0 33
30515: PUSH
30516: LD_INT 2
30518: NEG
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 3
30529: NEG
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: NEG
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: NEG
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 4
30563: NEG
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 4
30586: NEG
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 5
30597: NEG
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 5
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 5
30620: NEG
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 6
30631: NEG
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 6
30642: NEG
30643: PUSH
30644: LD_INT 1
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30666: LD_ADDR_VAR 0 34
30670: PUSH
30671: LD_INT 2
30673: NEG
30674: PUSH
30675: LD_INT 3
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 3
30685: NEG
30686: PUSH
30687: LD_INT 2
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: LD_INT 3
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: LD_INT 4
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 4
30721: NEG
30722: PUSH
30723: LD_INT 3
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 4
30733: NEG
30734: PUSH
30735: LD_INT 4
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 4
30745: NEG
30746: PUSH
30747: LD_INT 5
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 5
30757: NEG
30758: PUSH
30759: LD_INT 4
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 5
30769: NEG
30770: PUSH
30771: LD_INT 5
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 5
30781: NEG
30782: PUSH
30783: LD_INT 6
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 6
30793: NEG
30794: PUSH
30795: LD_INT 5
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 6
30805: NEG
30806: PUSH
30807: LD_INT 6
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30829: LD_ADDR_VAR 0 41
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 3
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: LD_INT 2
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30873: LD_ADDR_VAR 0 42
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: LD_INT 1
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30914: LD_ADDR_VAR 0 43
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 3
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30954: LD_ADDR_VAR 0 44
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: LD_INT 3
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30995: LD_ADDR_VAR 0 45
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31039: LD_ADDR_VAR 0 46
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 2
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: NEG
31059: PUSH
31060: LD_INT 3
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 3
31070: NEG
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31085: LD_ADDR_VAR 0 47
31089: PUSH
31090: LD_INT 2
31092: NEG
31093: PUSH
31094: LD_INT 3
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: LD_INT 3
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31118: LD_ADDR_VAR 0 48
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 2
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31149: LD_ADDR_VAR 0 49
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31178: LD_ADDR_VAR 0 50
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31207: LD_ADDR_VAR 0 51
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31238: LD_ADDR_VAR 0 52
31242: PUSH
31243: LD_INT 3
31245: NEG
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: NEG
31258: PUSH
31259: LD_INT 2
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31271: LD_ADDR_VAR 0 53
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 3
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31315: LD_ADDR_VAR 0 54
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31356: LD_ADDR_VAR 0 55
31360: PUSH
31361: LD_INT 3
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 3
31373: PUSH
31374: LD_INT 3
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: LIST
31395: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31396: LD_ADDR_VAR 0 56
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: LD_INT 2
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31437: LD_ADDR_VAR 0 57
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 3
31455: NEG
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 3
31466: NEG
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31481: LD_ADDR_VAR 0 58
31485: PUSH
31486: LD_INT 2
31488: NEG
31489: PUSH
31490: LD_INT 3
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: LD_INT 3
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31527: LD_ADDR_VAR 0 59
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31571: LD_ADDR_VAR 0 60
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31612: LD_ADDR_VAR 0 61
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31652: LD_ADDR_VAR 0 62
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31693: LD_ADDR_VAR 0 63
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31737: LD_ADDR_VAR 0 64
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: NEG
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: LD_INT 2
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: ST_TO_ADDR
// end ; 2 :
31783: GO 35049
31785: LD_INT 2
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 35048
31793: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31794: LD_ADDR_VAR 0 29
31798: PUSH
31799: LD_INT 4
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 4
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 5
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 5
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 4
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 5
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: LD_INT 4
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: LD_INT 4
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: LD_INT 3
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: LD_INT 2
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 4
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: LD_INT 4
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 4
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: LD_INT 5
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: LD_INT 5
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 4
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: LD_INT 3
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 3
32077: NEG
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 4
32133: NEG
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 4
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 4
32179: NEG
32180: PUSH
32181: LD_INT 4
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 4
32191: NEG
32192: PUSH
32193: LD_INT 5
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: LD_INT 4
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: NEG
32216: PUSH
32217: LD_INT 3
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 4
32227: NEG
32228: PUSH
32229: LD_INT 3
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 5
32239: NEG
32240: PUSH
32241: LD_INT 4
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 5
32251: NEG
32252: PUSH
32253: LD_INT 5
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 3
32263: NEG
32264: PUSH
32265: LD_INT 5
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 5
32275: NEG
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32332: LD_ADDR_VAR 0 30
32336: PUSH
32337: LD_INT 4
32339: PUSH
32340: LD_INT 4
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 4
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 5
32359: PUSH
32360: LD_INT 4
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 5
32369: PUSH
32370: LD_INT 5
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 4
32379: PUSH
32380: LD_INT 5
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 3
32389: PUSH
32390: LD_INT 4
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 3
32399: PUSH
32400: LD_INT 3
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 5
32409: PUSH
32410: LD_INT 3
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: LD_INT 5
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 3
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 4
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 3
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 4
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 3
32545: NEG
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: NEG
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 5
32578: NEG
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 5
32589: NEG
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 5
32601: NEG
32602: PUSH
32603: LD_INT 2
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 3
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: LD_INT 4
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 4
32684: NEG
32685: PUSH
32686: LD_INT 3
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 4
32696: NEG
32697: PUSH
32698: LD_INT 4
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 4
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 4
32720: NEG
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 4
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 5
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 3
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: LD_INT 3
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 4
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: LD_INT 5
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 3
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: LD_INT 5
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32879: LD_ADDR_VAR 0 31
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 4
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 3
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 4
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 5
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 5
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: LD_INT 4
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: LD_INT 3
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 5
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 3
32979: NEG
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 3
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 4
33035: NEG
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 4
33058: NEG
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 4
33081: NEG
33082: PUSH
33083: LD_INT 4
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 4
33093: NEG
33094: PUSH
33095: LD_INT 5
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: NEG
33106: PUSH
33107: LD_INT 4
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: LD_INT 3
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 4
33129: NEG
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 5
33141: NEG
33142: PUSH
33143: LD_INT 4
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 5
33153: NEG
33154: PUSH
33155: LD_INT 5
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: NEG
33166: PUSH
33167: LD_INT 5
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 5
33177: NEG
33178: PUSH
33179: LD_INT 3
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 3
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 4
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: LD_INT 3
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: LD_INT 3
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: LD_INT 4
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: LD_INT 4
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 4
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 4
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 5
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 4
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 3
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 5
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33429: LD_ADDR_VAR 0 32
33433: PUSH
33434: LD_INT 4
33436: NEG
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 3
33459: NEG
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 3
33470: NEG
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 4
33481: NEG
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 5
33492: NEG
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 5
33503: NEG
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 5
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 3
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 3
33550: NEG
33551: PUSH
33552: LD_INT 4
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 3
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 2
33574: NEG
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 3
33586: NEG
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 4
33598: NEG
33599: PUSH
33600: LD_INT 3
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 4
33610: NEG
33611: PUSH
33612: LD_INT 4
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: LD_INT 4
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 4
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 5
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: LD_INT 4
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: LD_INT 3
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 3
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 4
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: LD_INT 5
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: LD_INT 3
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: LD_INT 5
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 3
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 3
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 4
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 4
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 4
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 4
33841: PUSH
33842: LD_INT 4
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 4
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: LD_INT 4
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 5
33871: PUSH
33872: LD_INT 5
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 4
33881: PUSH
33882: LD_INT 5
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: LD_INT 4
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 5
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: LD_INT 5
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33976: LD_ADDR_VAR 0 33
33980: PUSH
33981: LD_INT 4
33983: NEG
33984: PUSH
33985: LD_INT 4
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 4
33995: NEG
33996: PUSH
33997: LD_INT 5
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 3
34019: NEG
34020: PUSH
34021: LD_INT 3
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 4
34031: NEG
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 5
34043: NEG
34044: PUSH
34045: LD_INT 4
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 5
34055: NEG
34056: PUSH
34057: LD_INT 5
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 3
34067: NEG
34068: PUSH
34069: LD_INT 5
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 5
34079: NEG
34080: PUSH
34081: LD_INT 3
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 4
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: LD_INT 3
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 3
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: LD_INT 4
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: LD_INT 4
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 4
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 4
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 5
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 4
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 3
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 5
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 3
34296: PUSH
34297: LD_INT 2
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 4
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 4
34316: PUSH
34317: LD_INT 4
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: LD_INT 4
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: LD_INT 3
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 2
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 4
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: LD_INT 4
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: LD_INT 4
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 4
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: LD_INT 5
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 5
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 5
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: LD_INT 3
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34514: LD_ADDR_VAR 0 34
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 4
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 5
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 4
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 3
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: LD_INT 3
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: LD_INT 4
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: LD_INT 5
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 3
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: LD_INT 5
34615: NEG
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 3
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 4
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 2
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 4
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 5
34736: PUSH
34737: LD_INT 4
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 5
34746: PUSH
34747: LD_INT 5
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 4
34756: PUSH
34757: LD_INT 5
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: LD_INT 4
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 3
34776: PUSH
34777: LD_INT 3
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 3
34796: PUSH
34797: LD_INT 5
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 3
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 4
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 4
34899: NEG
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 4
34910: NEG
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 4
34944: NEG
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 5
34955: NEG
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 5
34966: NEG
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 5
34978: NEG
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 3
34990: NEG
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
// end ; end ;
35046: GO 35049
35048: POP
// case btype of b_depot , b_warehouse :
35049: LD_VAR 0 1
35053: PUSH
35054: LD_INT 0
35056: DOUBLE
35057: EQUAL
35058: IFTRUE 35068
35060: LD_INT 1
35062: DOUBLE
35063: EQUAL
35064: IFTRUE 35068
35066: GO 35269
35068: POP
// case nation of nation_american :
35069: LD_VAR 0 5
35073: PUSH
35074: LD_INT 1
35076: DOUBLE
35077: EQUAL
35078: IFTRUE 35082
35080: GO 35138
35082: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35083: LD_ADDR_VAR 0 9
35087: PUSH
35088: LD_VAR 0 11
35092: PUSH
35093: LD_VAR 0 12
35097: PUSH
35098: LD_VAR 0 13
35102: PUSH
35103: LD_VAR 0 14
35107: PUSH
35108: LD_VAR 0 15
35112: PUSH
35113: LD_VAR 0 16
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: PUSH
35126: LD_VAR 0 4
35130: PUSH
35131: LD_INT 1
35133: PLUS
35134: ARRAY
35135: ST_TO_ADDR
35136: GO 35267
35138: LD_INT 2
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35146
35144: GO 35202
35146: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35147: LD_ADDR_VAR 0 9
35151: PUSH
35152: LD_VAR 0 17
35156: PUSH
35157: LD_VAR 0 18
35161: PUSH
35162: LD_VAR 0 19
35166: PUSH
35167: LD_VAR 0 20
35171: PUSH
35172: LD_VAR 0 21
35176: PUSH
35177: LD_VAR 0 22
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: PUSH
35190: LD_VAR 0 4
35194: PUSH
35195: LD_INT 1
35197: PLUS
35198: ARRAY
35199: ST_TO_ADDR
35200: GO 35267
35202: LD_INT 3
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35210
35208: GO 35266
35210: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35211: LD_ADDR_VAR 0 9
35215: PUSH
35216: LD_VAR 0 23
35220: PUSH
35221: LD_VAR 0 24
35225: PUSH
35226: LD_VAR 0 25
35230: PUSH
35231: LD_VAR 0 26
35235: PUSH
35236: LD_VAR 0 27
35240: PUSH
35241: LD_VAR 0 28
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: PUSH
35254: LD_VAR 0 4
35258: PUSH
35259: LD_INT 1
35261: PLUS
35262: ARRAY
35263: ST_TO_ADDR
35264: GO 35267
35266: POP
35267: GO 35822
35269: LD_INT 2
35271: DOUBLE
35272: EQUAL
35273: IFTRUE 35283
35275: LD_INT 3
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35339
35283: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35284: LD_ADDR_VAR 0 9
35288: PUSH
35289: LD_VAR 0 29
35293: PUSH
35294: LD_VAR 0 30
35298: PUSH
35299: LD_VAR 0 31
35303: PUSH
35304: LD_VAR 0 32
35308: PUSH
35309: LD_VAR 0 33
35313: PUSH
35314: LD_VAR 0 34
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: PUSH
35327: LD_VAR 0 4
35331: PUSH
35332: LD_INT 1
35334: PLUS
35335: ARRAY
35336: ST_TO_ADDR
35337: GO 35822
35339: LD_INT 16
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35401
35345: LD_INT 17
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35401
35351: LD_INT 18
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35401
35357: LD_INT 19
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35401
35363: LD_INT 22
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35401
35369: LD_INT 20
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35401
35375: LD_INT 21
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35401
35381: LD_INT 23
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35401
35387: LD_INT 24
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35401
35393: LD_INT 25
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35401
35399: GO 35457
35401: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_VAR 0 35
35411: PUSH
35412: LD_VAR 0 36
35416: PUSH
35417: LD_VAR 0 37
35421: PUSH
35422: LD_VAR 0 38
35426: PUSH
35427: LD_VAR 0 39
35431: PUSH
35432: LD_VAR 0 40
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: PUSH
35445: LD_VAR 0 4
35449: PUSH
35450: LD_INT 1
35452: PLUS
35453: ARRAY
35454: ST_TO_ADDR
35455: GO 35822
35457: LD_INT 6
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35513
35463: LD_INT 7
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35513
35469: LD_INT 8
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35513
35475: LD_INT 13
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35513
35481: LD_INT 12
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35513
35487: LD_INT 15
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35513
35493: LD_INT 11
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35513
35499: LD_INT 14
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35513
35505: LD_INT 10
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35513
35511: GO 35569
35513: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35514: LD_ADDR_VAR 0 9
35518: PUSH
35519: LD_VAR 0 41
35523: PUSH
35524: LD_VAR 0 42
35528: PUSH
35529: LD_VAR 0 43
35533: PUSH
35534: LD_VAR 0 44
35538: PUSH
35539: LD_VAR 0 45
35543: PUSH
35544: LD_VAR 0 46
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: LD_VAR 0 4
35561: PUSH
35562: LD_INT 1
35564: PLUS
35565: ARRAY
35566: ST_TO_ADDR
35567: GO 35822
35569: LD_INT 36
35571: DOUBLE
35572: EQUAL
35573: IFTRUE 35577
35575: GO 35633
35577: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35578: LD_ADDR_VAR 0 9
35582: PUSH
35583: LD_VAR 0 47
35587: PUSH
35588: LD_VAR 0 48
35592: PUSH
35593: LD_VAR 0 49
35597: PUSH
35598: LD_VAR 0 50
35602: PUSH
35603: LD_VAR 0 51
35607: PUSH
35608: LD_VAR 0 52
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: PUSH
35621: LD_VAR 0 4
35625: PUSH
35626: LD_INT 1
35628: PLUS
35629: ARRAY
35630: ST_TO_ADDR
35631: GO 35822
35633: LD_INT 4
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35659
35639: LD_INT 5
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35659
35645: LD_INT 34
35647: DOUBLE
35648: EQUAL
35649: IFTRUE 35659
35651: LD_INT 37
35653: DOUBLE
35654: EQUAL
35655: IFTRUE 35659
35657: GO 35715
35659: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35660: LD_ADDR_VAR 0 9
35664: PUSH
35665: LD_VAR 0 53
35669: PUSH
35670: LD_VAR 0 54
35674: PUSH
35675: LD_VAR 0 55
35679: PUSH
35680: LD_VAR 0 56
35684: PUSH
35685: LD_VAR 0 57
35689: PUSH
35690: LD_VAR 0 58
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: PUSH
35703: LD_VAR 0 4
35707: PUSH
35708: LD_INT 1
35710: PLUS
35711: ARRAY
35712: ST_TO_ADDR
35713: GO 35822
35715: LD_INT 31
35717: DOUBLE
35718: EQUAL
35719: IFTRUE 35765
35721: LD_INT 32
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35765
35727: LD_INT 33
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35765
35733: LD_INT 27
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35765
35739: LD_INT 26
35741: DOUBLE
35742: EQUAL
35743: IFTRUE 35765
35745: LD_INT 28
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35765
35751: LD_INT 29
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35765
35757: LD_INT 30
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35765
35763: GO 35821
35765: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35766: LD_ADDR_VAR 0 9
35770: PUSH
35771: LD_VAR 0 59
35775: PUSH
35776: LD_VAR 0 60
35780: PUSH
35781: LD_VAR 0 61
35785: PUSH
35786: LD_VAR 0 62
35790: PUSH
35791: LD_VAR 0 63
35795: PUSH
35796: LD_VAR 0 64
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: PUSH
35809: LD_VAR 0 4
35813: PUSH
35814: LD_INT 1
35816: PLUS
35817: ARRAY
35818: ST_TO_ADDR
35819: GO 35822
35821: POP
// temp_list2 = [ ] ;
35822: LD_ADDR_VAR 0 10
35826: PUSH
35827: EMPTY
35828: ST_TO_ADDR
// for i in temp_list do
35829: LD_ADDR_VAR 0 8
35833: PUSH
35834: LD_VAR 0 9
35838: PUSH
35839: FOR_IN
35840: IFFALSE 35892
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35842: LD_ADDR_VAR 0 10
35846: PUSH
35847: LD_VAR 0 10
35851: PUSH
35852: LD_VAR 0 8
35856: PUSH
35857: LD_INT 1
35859: ARRAY
35860: PUSH
35861: LD_VAR 0 2
35865: PLUS
35866: PUSH
35867: LD_VAR 0 8
35871: PUSH
35872: LD_INT 2
35874: ARRAY
35875: PUSH
35876: LD_VAR 0 3
35880: PLUS
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: EMPTY
35887: LIST
35888: ADD
35889: ST_TO_ADDR
35890: GO 35839
35892: POP
35893: POP
// result = temp_list2 ;
35894: LD_ADDR_VAR 0 7
35898: PUSH
35899: LD_VAR 0 10
35903: ST_TO_ADDR
// end ;
35904: LD_VAR 0 7
35908: RET
// export function EnemyInRange ( unit , dist ) ; begin
35909: LD_INT 0
35911: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35912: LD_ADDR_VAR 0 3
35916: PUSH
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 255
35926: PPUSH
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL_OW 250
35936: PPUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL_OW 251
35946: PPUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: CALL 9311 0 4
35956: PUSH
35957: LD_INT 4
35959: ARRAY
35960: ST_TO_ADDR
// end ;
35961: LD_VAR 0 3
35965: RET
// export function PlayerSeeMe ( unit ) ; begin
35966: LD_INT 0
35968: PPUSH
// result := See ( your_side , unit ) ;
35969: LD_ADDR_VAR 0 2
35973: PUSH
35974: LD_OWVAR 2
35978: PPUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: CALL_OW 292
35988: ST_TO_ADDR
// end ;
35989: LD_VAR 0 2
35993: RET
// export function ReverseDir ( unit ) ; begin
35994: LD_INT 0
35996: PPUSH
// if not unit then
35997: LD_VAR 0 1
36001: NOT
36002: IFFALSE 36006
// exit ;
36004: GO 36029
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36006: LD_ADDR_VAR 0 2
36010: PUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: CALL_OW 254
36020: PUSH
36021: LD_INT 3
36023: PLUS
36024: PUSH
36025: LD_INT 6
36027: MOD
36028: ST_TO_ADDR
// end ;
36029: LD_VAR 0 2
36033: RET
// export function ReverseArray ( array ) ; var i ; begin
36034: LD_INT 0
36036: PPUSH
36037: PPUSH
// if not array then
36038: LD_VAR 0 1
36042: NOT
36043: IFFALSE 36047
// exit ;
36045: GO 36102
// result := [ ] ;
36047: LD_ADDR_VAR 0 2
36051: PUSH
36052: EMPTY
36053: ST_TO_ADDR
// for i := array downto 1 do
36054: LD_ADDR_VAR 0 3
36058: PUSH
36059: DOUBLE
36060: LD_VAR 0 1
36064: INC
36065: ST_TO_ADDR
36066: LD_INT 1
36068: PUSH
36069: FOR_DOWNTO
36070: IFFALSE 36100
// result := Join ( result , array [ i ] ) ;
36072: LD_ADDR_VAR 0 2
36076: PUSH
36077: LD_VAR 0 2
36081: PPUSH
36082: LD_VAR 0 1
36086: PUSH
36087: LD_VAR 0 3
36091: ARRAY
36092: PPUSH
36093: CALL 40746 0 2
36097: ST_TO_ADDR
36098: GO 36069
36100: POP
36101: POP
// end ;
36102: LD_VAR 0 2
36106: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36107: LD_INT 0
36109: PPUSH
36110: PPUSH
36111: PPUSH
36112: PPUSH
36113: PPUSH
36114: PPUSH
// if not unit or not hexes then
36115: LD_VAR 0 1
36119: NOT
36120: PUSH
36121: LD_VAR 0 2
36125: NOT
36126: OR
36127: IFFALSE 36131
// exit ;
36129: GO 36254
// dist := 9999 ;
36131: LD_ADDR_VAR 0 5
36135: PUSH
36136: LD_INT 9999
36138: ST_TO_ADDR
// for i = 1 to hexes do
36139: LD_ADDR_VAR 0 4
36143: PUSH
36144: DOUBLE
36145: LD_INT 1
36147: DEC
36148: ST_TO_ADDR
36149: LD_VAR 0 2
36153: PUSH
36154: FOR_TO
36155: IFFALSE 36242
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36157: LD_ADDR_VAR 0 6
36161: PUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: LD_VAR 0 2
36171: PUSH
36172: LD_VAR 0 4
36176: ARRAY
36177: PUSH
36178: LD_INT 1
36180: ARRAY
36181: PPUSH
36182: LD_VAR 0 2
36186: PUSH
36187: LD_VAR 0 4
36191: ARRAY
36192: PUSH
36193: LD_INT 2
36195: ARRAY
36196: PPUSH
36197: CALL_OW 297
36201: ST_TO_ADDR
// if tdist < dist then
36202: LD_VAR 0 6
36206: PUSH
36207: LD_VAR 0 5
36211: LESS
36212: IFFALSE 36240
// begin hex := hexes [ i ] ;
36214: LD_ADDR_VAR 0 8
36218: PUSH
36219: LD_VAR 0 2
36223: PUSH
36224: LD_VAR 0 4
36228: ARRAY
36229: ST_TO_ADDR
// dist := tdist ;
36230: LD_ADDR_VAR 0 5
36234: PUSH
36235: LD_VAR 0 6
36239: ST_TO_ADDR
// end ; end ;
36240: GO 36154
36242: POP
36243: POP
// result := hex ;
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: LD_VAR 0 8
36253: ST_TO_ADDR
// end ;
36254: LD_VAR 0 3
36258: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36259: LD_INT 0
36261: PPUSH
36262: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36263: LD_VAR 0 1
36267: NOT
36268: PUSH
36269: LD_VAR 0 1
36273: PUSH
36274: LD_INT 21
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 23
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PPUSH
36298: CALL_OW 69
36302: IN
36303: NOT
36304: OR
36305: IFFALSE 36309
// exit ;
36307: GO 36356
// for i = 1 to 3 do
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: DOUBLE
36315: LD_INT 1
36317: DEC
36318: ST_TO_ADDR
36319: LD_INT 3
36321: PUSH
36322: FOR_TO
36323: IFFALSE 36354
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 250
36334: PPUSH
36335: LD_VAR 0 1
36339: PPUSH
36340: CALL_OW 251
36344: PPUSH
36345: LD_INT 1
36347: PPUSH
36348: CALL_OW 453
36352: GO 36322
36354: POP
36355: POP
// end ;
36356: LD_VAR 0 2
36360: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36361: LD_INT 0
36363: PPUSH
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36369: LD_VAR 0 1
36373: NOT
36374: PUSH
36375: LD_VAR 0 2
36379: NOT
36380: OR
36381: PUSH
36382: LD_VAR 0 1
36386: PPUSH
36387: CALL_OW 314
36391: OR
36392: IFFALSE 36396
// exit ;
36394: GO 36863
// if GetLives ( i ) < 250 then
36396: LD_VAR 0 4
36400: PPUSH
36401: CALL_OW 256
36405: PUSH
36406: LD_INT 250
36408: LESS
36409: IFFALSE 36422
// begin ComAutodestruct ( i ) ;
36411: LD_VAR 0 4
36415: PPUSH
36416: CALL 36259 0 1
// exit ;
36420: GO 36863
// end ; x := GetX ( enemy_unit ) ;
36422: LD_ADDR_VAR 0 7
36426: PUSH
36427: LD_VAR 0 2
36431: PPUSH
36432: CALL_OW 250
36436: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36437: LD_ADDR_VAR 0 8
36441: PUSH
36442: LD_VAR 0 2
36446: PPUSH
36447: CALL_OW 251
36451: ST_TO_ADDR
// if not x or not y then
36452: LD_VAR 0 7
36456: NOT
36457: PUSH
36458: LD_VAR 0 8
36462: NOT
36463: OR
36464: IFFALSE 36468
// exit ;
36466: GO 36863
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36468: LD_ADDR_VAR 0 6
36472: PUSH
36473: LD_VAR 0 7
36477: PPUSH
36478: LD_INT 0
36480: PPUSH
36481: LD_INT 4
36483: PPUSH
36484: CALL_OW 272
36488: PUSH
36489: LD_VAR 0 8
36493: PPUSH
36494: LD_INT 0
36496: PPUSH
36497: LD_INT 4
36499: PPUSH
36500: CALL_OW 273
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_VAR 0 7
36513: PPUSH
36514: LD_INT 1
36516: PPUSH
36517: LD_INT 4
36519: PPUSH
36520: CALL_OW 272
36524: PUSH
36525: LD_VAR 0 8
36529: PPUSH
36530: LD_INT 1
36532: PPUSH
36533: LD_INT 4
36535: PPUSH
36536: CALL_OW 273
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_VAR 0 7
36549: PPUSH
36550: LD_INT 2
36552: PPUSH
36553: LD_INT 4
36555: PPUSH
36556: CALL_OW 272
36560: PUSH
36561: LD_VAR 0 8
36565: PPUSH
36566: LD_INT 2
36568: PPUSH
36569: LD_INT 4
36571: PPUSH
36572: CALL_OW 273
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_VAR 0 7
36585: PPUSH
36586: LD_INT 3
36588: PPUSH
36589: LD_INT 4
36591: PPUSH
36592: CALL_OW 272
36596: PUSH
36597: LD_VAR 0 8
36601: PPUSH
36602: LD_INT 3
36604: PPUSH
36605: LD_INT 4
36607: PPUSH
36608: CALL_OW 273
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_VAR 0 7
36621: PPUSH
36622: LD_INT 4
36624: PPUSH
36625: LD_INT 4
36627: PPUSH
36628: CALL_OW 272
36632: PUSH
36633: LD_VAR 0 8
36637: PPUSH
36638: LD_INT 4
36640: PPUSH
36641: LD_INT 4
36643: PPUSH
36644: CALL_OW 273
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_VAR 0 7
36657: PPUSH
36658: LD_INT 5
36660: PPUSH
36661: LD_INT 4
36663: PPUSH
36664: CALL_OW 272
36668: PUSH
36669: LD_VAR 0 8
36673: PPUSH
36674: LD_INT 5
36676: PPUSH
36677: LD_INT 4
36679: PPUSH
36680: CALL_OW 273
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// for i = tmp downto 1 do
36697: LD_ADDR_VAR 0 4
36701: PUSH
36702: DOUBLE
36703: LD_VAR 0 6
36707: INC
36708: ST_TO_ADDR
36709: LD_INT 1
36711: PUSH
36712: FOR_DOWNTO
36713: IFFALSE 36814
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36715: LD_VAR 0 6
36719: PUSH
36720: LD_VAR 0 4
36724: ARRAY
36725: PUSH
36726: LD_INT 1
36728: ARRAY
36729: PPUSH
36730: LD_VAR 0 6
36734: PUSH
36735: LD_VAR 0 4
36739: ARRAY
36740: PUSH
36741: LD_INT 2
36743: ARRAY
36744: PPUSH
36745: CALL_OW 488
36749: NOT
36750: PUSH
36751: LD_VAR 0 6
36755: PUSH
36756: LD_VAR 0 4
36760: ARRAY
36761: PUSH
36762: LD_INT 1
36764: ARRAY
36765: PPUSH
36766: LD_VAR 0 6
36770: PUSH
36771: LD_VAR 0 4
36775: ARRAY
36776: PUSH
36777: LD_INT 2
36779: ARRAY
36780: PPUSH
36781: CALL_OW 428
36785: PUSH
36786: LD_INT 0
36788: NONEQUAL
36789: OR
36790: IFFALSE 36812
// tmp := Delete ( tmp , i ) ;
36792: LD_ADDR_VAR 0 6
36796: PUSH
36797: LD_VAR 0 6
36801: PPUSH
36802: LD_VAR 0 4
36806: PPUSH
36807: CALL_OW 3
36811: ST_TO_ADDR
36812: GO 36712
36814: POP
36815: POP
// j := GetClosestHex ( unit , tmp ) ;
36816: LD_ADDR_VAR 0 5
36820: PUSH
36821: LD_VAR 0 1
36825: PPUSH
36826: LD_VAR 0 6
36830: PPUSH
36831: CALL 36107 0 2
36835: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36836: LD_VAR 0 1
36840: PPUSH
36841: LD_VAR 0 5
36845: PUSH
36846: LD_INT 1
36848: ARRAY
36849: PPUSH
36850: LD_VAR 0 5
36854: PUSH
36855: LD_INT 2
36857: ARRAY
36858: PPUSH
36859: CALL_OW 111
// end ;
36863: LD_VAR 0 3
36867: RET
// export function PrepareApemanSoldier ( ) ; begin
36868: LD_INT 0
36870: PPUSH
// uc_nation := 0 ;
36871: LD_ADDR_OWVAR 21
36875: PUSH
36876: LD_INT 0
36878: ST_TO_ADDR
// hc_sex := sex_male ;
36879: LD_ADDR_OWVAR 27
36883: PUSH
36884: LD_INT 1
36886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36887: LD_ADDR_OWVAR 28
36891: PUSH
36892: LD_INT 15
36894: ST_TO_ADDR
// hc_gallery :=  ;
36895: LD_ADDR_OWVAR 33
36899: PUSH
36900: LD_STRING 
36902: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36903: LD_ADDR_OWVAR 31
36907: PUSH
36908: LD_INT 0
36910: PPUSH
36911: LD_INT 3
36913: PPUSH
36914: CALL_OW 12
36918: PUSH
36919: LD_INT 0
36921: PPUSH
36922: LD_INT 3
36924: PPUSH
36925: CALL_OW 12
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// end ;
36942: LD_VAR 0 1
36946: RET
// export function PrepareApemanEngineer ( ) ; begin
36947: LD_INT 0
36949: PPUSH
// uc_nation := 0 ;
36950: LD_ADDR_OWVAR 21
36954: PUSH
36955: LD_INT 0
36957: ST_TO_ADDR
// hc_sex := sex_male ;
36958: LD_ADDR_OWVAR 27
36962: PUSH
36963: LD_INT 1
36965: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36966: LD_ADDR_OWVAR 28
36970: PUSH
36971: LD_INT 16
36973: ST_TO_ADDR
// hc_gallery :=  ;
36974: LD_ADDR_OWVAR 33
36978: PUSH
36979: LD_STRING 
36981: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36982: LD_ADDR_OWVAR 31
36986: PUSH
36987: LD_INT 0
36989: PPUSH
36990: LD_INT 3
36992: PPUSH
36993: CALL_OW 12
36997: PUSH
36998: LD_INT 0
37000: PPUSH
37001: LD_INT 3
37003: PPUSH
37004: CALL_OW 12
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: ST_TO_ADDR
// end ;
37021: LD_VAR 0 1
37025: RET
// export function PrepareApeman ( agressivity ) ; begin
37026: LD_INT 0
37028: PPUSH
// uc_side := 0 ;
37029: LD_ADDR_OWVAR 20
37033: PUSH
37034: LD_INT 0
37036: ST_TO_ADDR
// uc_nation := 0 ;
37037: LD_ADDR_OWVAR 21
37041: PUSH
37042: LD_INT 0
37044: ST_TO_ADDR
// hc_sex := sex_male ;
37045: LD_ADDR_OWVAR 27
37049: PUSH
37050: LD_INT 1
37052: ST_TO_ADDR
// hc_class := class_apeman ;
37053: LD_ADDR_OWVAR 28
37057: PUSH
37058: LD_INT 12
37060: ST_TO_ADDR
// hc_gallery :=  ;
37061: LD_ADDR_OWVAR 33
37065: PUSH
37066: LD_STRING 
37068: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37069: LD_ADDR_OWVAR 35
37073: PUSH
37074: LD_VAR 0 1
37078: NEG
37079: PPUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 12
37089: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37090: LD_ADDR_OWVAR 31
37094: PUSH
37095: LD_INT 0
37097: PPUSH
37098: LD_INT 3
37100: PPUSH
37101: CALL_OW 12
37105: PUSH
37106: LD_INT 0
37108: PPUSH
37109: LD_INT 3
37111: PPUSH
37112: CALL_OW 12
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// end ;
37129: LD_VAR 0 2
37133: RET
// export function PrepareTiger ( agressivity ) ; begin
37134: LD_INT 0
37136: PPUSH
// uc_side := 0 ;
37137: LD_ADDR_OWVAR 20
37141: PUSH
37142: LD_INT 0
37144: ST_TO_ADDR
// uc_nation := 0 ;
37145: LD_ADDR_OWVAR 21
37149: PUSH
37150: LD_INT 0
37152: ST_TO_ADDR
// hc_class := class_tiger ;
37153: LD_ADDR_OWVAR 28
37157: PUSH
37158: LD_INT 14
37160: ST_TO_ADDR
// hc_gallery :=  ;
37161: LD_ADDR_OWVAR 33
37165: PUSH
37166: LD_STRING 
37168: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37169: LD_ADDR_OWVAR 35
37173: PUSH
37174: LD_VAR 0 1
37178: NEG
37179: PPUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 12
37189: ST_TO_ADDR
// end ;
37190: LD_VAR 0 2
37194: RET
// export function PrepareEnchidna ( ) ; begin
37195: LD_INT 0
37197: PPUSH
// uc_side := 0 ;
37198: LD_ADDR_OWVAR 20
37202: PUSH
37203: LD_INT 0
37205: ST_TO_ADDR
// uc_nation := 0 ;
37206: LD_ADDR_OWVAR 21
37210: PUSH
37211: LD_INT 0
37213: ST_TO_ADDR
// hc_class := class_baggie ;
37214: LD_ADDR_OWVAR 28
37218: PUSH
37219: LD_INT 13
37221: ST_TO_ADDR
// hc_gallery :=  ;
37222: LD_ADDR_OWVAR 33
37226: PUSH
37227: LD_STRING 
37229: ST_TO_ADDR
// end ;
37230: LD_VAR 0 1
37234: RET
// export function PrepareFrog ( ) ; begin
37235: LD_INT 0
37237: PPUSH
// uc_side := 0 ;
37238: LD_ADDR_OWVAR 20
37242: PUSH
37243: LD_INT 0
37245: ST_TO_ADDR
// uc_nation := 0 ;
37246: LD_ADDR_OWVAR 21
37250: PUSH
37251: LD_INT 0
37253: ST_TO_ADDR
// hc_class := class_frog ;
37254: LD_ADDR_OWVAR 28
37258: PUSH
37259: LD_INT 19
37261: ST_TO_ADDR
// hc_gallery :=  ;
37262: LD_ADDR_OWVAR 33
37266: PUSH
37267: LD_STRING 
37269: ST_TO_ADDR
// end ;
37270: LD_VAR 0 1
37274: RET
// export function PrepareFish ( ) ; begin
37275: LD_INT 0
37277: PPUSH
// uc_side := 0 ;
37278: LD_ADDR_OWVAR 20
37282: PUSH
37283: LD_INT 0
37285: ST_TO_ADDR
// uc_nation := 0 ;
37286: LD_ADDR_OWVAR 21
37290: PUSH
37291: LD_INT 0
37293: ST_TO_ADDR
// hc_class := class_fish ;
37294: LD_ADDR_OWVAR 28
37298: PUSH
37299: LD_INT 20
37301: ST_TO_ADDR
// hc_gallery :=  ;
37302: LD_ADDR_OWVAR 33
37306: PUSH
37307: LD_STRING 
37309: ST_TO_ADDR
// end ;
37310: LD_VAR 0 1
37314: RET
// export function PrepareBird ( ) ; begin
37315: LD_INT 0
37317: PPUSH
// uc_side := 0 ;
37318: LD_ADDR_OWVAR 20
37322: PUSH
37323: LD_INT 0
37325: ST_TO_ADDR
// uc_nation := 0 ;
37326: LD_ADDR_OWVAR 21
37330: PUSH
37331: LD_INT 0
37333: ST_TO_ADDR
// hc_class := class_phororhacos ;
37334: LD_ADDR_OWVAR 28
37338: PUSH
37339: LD_INT 18
37341: ST_TO_ADDR
// hc_gallery :=  ;
37342: LD_ADDR_OWVAR 33
37346: PUSH
37347: LD_STRING 
37349: ST_TO_ADDR
// end ;
37350: LD_VAR 0 1
37354: RET
// export function PrepareHorse ( ) ; begin
37355: LD_INT 0
37357: PPUSH
// uc_side := 0 ;
37358: LD_ADDR_OWVAR 20
37362: PUSH
37363: LD_INT 0
37365: ST_TO_ADDR
// uc_nation := 0 ;
37366: LD_ADDR_OWVAR 21
37370: PUSH
37371: LD_INT 0
37373: ST_TO_ADDR
// hc_class := class_horse ;
37374: LD_ADDR_OWVAR 28
37378: PUSH
37379: LD_INT 21
37381: ST_TO_ADDR
// hc_gallery :=  ;
37382: LD_ADDR_OWVAR 33
37386: PUSH
37387: LD_STRING 
37389: ST_TO_ADDR
// end ;
37390: LD_VAR 0 1
37394: RET
// export function PrepareMastodont ( ) ; begin
37395: LD_INT 0
37397: PPUSH
// uc_side := 0 ;
37398: LD_ADDR_OWVAR 20
37402: PUSH
37403: LD_INT 0
37405: ST_TO_ADDR
// uc_nation := 0 ;
37406: LD_ADDR_OWVAR 21
37410: PUSH
37411: LD_INT 0
37413: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37414: LD_ADDR_OWVAR 37
37418: PUSH
37419: LD_INT 31
37421: ST_TO_ADDR
// vc_control := control_rider ;
37422: LD_ADDR_OWVAR 38
37426: PUSH
37427: LD_INT 4
37429: ST_TO_ADDR
// end ;
37430: LD_VAR 0 1
37434: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37435: LD_INT 0
37437: PPUSH
37438: PPUSH
37439: PPUSH
// uc_side = 0 ;
37440: LD_ADDR_OWVAR 20
37444: PUSH
37445: LD_INT 0
37447: ST_TO_ADDR
// uc_nation = 0 ;
37448: LD_ADDR_OWVAR 21
37452: PUSH
37453: LD_INT 0
37455: ST_TO_ADDR
// InitHc_All ( ) ;
37456: CALL_OW 584
// InitVc ;
37460: CALL_OW 20
// if mastodonts then
37464: LD_VAR 0 6
37468: IFFALSE 37535
// for i = 1 to mastodonts do
37470: LD_ADDR_VAR 0 11
37474: PUSH
37475: DOUBLE
37476: LD_INT 1
37478: DEC
37479: ST_TO_ADDR
37480: LD_VAR 0 6
37484: PUSH
37485: FOR_TO
37486: IFFALSE 37533
// begin vc_chassis := 31 ;
37488: LD_ADDR_OWVAR 37
37492: PUSH
37493: LD_INT 31
37495: ST_TO_ADDR
// vc_control := control_rider ;
37496: LD_ADDR_OWVAR 38
37500: PUSH
37501: LD_INT 4
37503: ST_TO_ADDR
// animal := CreateVehicle ;
37504: LD_ADDR_VAR 0 12
37508: PUSH
37509: CALL_OW 45
37513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37514: LD_VAR 0 12
37518: PPUSH
37519: LD_VAR 0 8
37523: PPUSH
37524: LD_INT 0
37526: PPUSH
37527: CALL 39663 0 3
// end ;
37531: GO 37485
37533: POP
37534: POP
// if horses then
37535: LD_VAR 0 5
37539: IFFALSE 37606
// for i = 1 to horses do
37541: LD_ADDR_VAR 0 11
37545: PUSH
37546: DOUBLE
37547: LD_INT 1
37549: DEC
37550: ST_TO_ADDR
37551: LD_VAR 0 5
37555: PUSH
37556: FOR_TO
37557: IFFALSE 37604
// begin hc_class := 21 ;
37559: LD_ADDR_OWVAR 28
37563: PUSH
37564: LD_INT 21
37566: ST_TO_ADDR
// hc_gallery :=  ;
37567: LD_ADDR_OWVAR 33
37571: PUSH
37572: LD_STRING 
37574: ST_TO_ADDR
// animal := CreateHuman ;
37575: LD_ADDR_VAR 0 12
37579: PUSH
37580: CALL_OW 44
37584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37585: LD_VAR 0 12
37589: PPUSH
37590: LD_VAR 0 8
37594: PPUSH
37595: LD_INT 0
37597: PPUSH
37598: CALL 39663 0 3
// end ;
37602: GO 37556
37604: POP
37605: POP
// if birds then
37606: LD_VAR 0 1
37610: IFFALSE 37677
// for i = 1 to birds do
37612: LD_ADDR_VAR 0 11
37616: PUSH
37617: DOUBLE
37618: LD_INT 1
37620: DEC
37621: ST_TO_ADDR
37622: LD_VAR 0 1
37626: PUSH
37627: FOR_TO
37628: IFFALSE 37675
// begin hc_class = 18 ;
37630: LD_ADDR_OWVAR 28
37634: PUSH
37635: LD_INT 18
37637: ST_TO_ADDR
// hc_gallery =  ;
37638: LD_ADDR_OWVAR 33
37642: PUSH
37643: LD_STRING 
37645: ST_TO_ADDR
// animal := CreateHuman ;
37646: LD_ADDR_VAR 0 12
37650: PUSH
37651: CALL_OW 44
37655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37656: LD_VAR 0 12
37660: PPUSH
37661: LD_VAR 0 8
37665: PPUSH
37666: LD_INT 0
37668: PPUSH
37669: CALL 39663 0 3
// end ;
37673: GO 37627
37675: POP
37676: POP
// if tigers then
37677: LD_VAR 0 2
37681: IFFALSE 37765
// for i = 1 to tigers do
37683: LD_ADDR_VAR 0 11
37687: PUSH
37688: DOUBLE
37689: LD_INT 1
37691: DEC
37692: ST_TO_ADDR
37693: LD_VAR 0 2
37697: PUSH
37698: FOR_TO
37699: IFFALSE 37763
// begin hc_class = class_tiger ;
37701: LD_ADDR_OWVAR 28
37705: PUSH
37706: LD_INT 14
37708: ST_TO_ADDR
// hc_gallery =  ;
37709: LD_ADDR_OWVAR 33
37713: PUSH
37714: LD_STRING 
37716: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37717: LD_ADDR_OWVAR 35
37721: PUSH
37722: LD_INT 7
37724: NEG
37725: PPUSH
37726: LD_INT 7
37728: PPUSH
37729: CALL_OW 12
37733: ST_TO_ADDR
// animal := CreateHuman ;
37734: LD_ADDR_VAR 0 12
37738: PUSH
37739: CALL_OW 44
37743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37744: LD_VAR 0 12
37748: PPUSH
37749: LD_VAR 0 8
37753: PPUSH
37754: LD_INT 0
37756: PPUSH
37757: CALL 39663 0 3
// end ;
37761: GO 37698
37763: POP
37764: POP
// if apemans then
37765: LD_VAR 0 3
37769: IFFALSE 37892
// for i = 1 to apemans do
37771: LD_ADDR_VAR 0 11
37775: PUSH
37776: DOUBLE
37777: LD_INT 1
37779: DEC
37780: ST_TO_ADDR
37781: LD_VAR 0 3
37785: PUSH
37786: FOR_TO
37787: IFFALSE 37890
// begin hc_class = class_apeman ;
37789: LD_ADDR_OWVAR 28
37793: PUSH
37794: LD_INT 12
37796: ST_TO_ADDR
// hc_gallery =  ;
37797: LD_ADDR_OWVAR 33
37801: PUSH
37802: LD_STRING 
37804: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37805: LD_ADDR_OWVAR 35
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PPUSH
37814: LD_INT 2
37816: PPUSH
37817: CALL_OW 12
37821: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37822: LD_ADDR_OWVAR 31
37826: PUSH
37827: LD_INT 1
37829: PPUSH
37830: LD_INT 3
37832: PPUSH
37833: CALL_OW 12
37837: PUSH
37838: LD_INT 1
37840: PPUSH
37841: LD_INT 3
37843: PPUSH
37844: CALL_OW 12
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: ST_TO_ADDR
// animal := CreateHuman ;
37861: LD_ADDR_VAR 0 12
37865: PUSH
37866: CALL_OW 44
37870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37871: LD_VAR 0 12
37875: PPUSH
37876: LD_VAR 0 8
37880: PPUSH
37881: LD_INT 0
37883: PPUSH
37884: CALL 39663 0 3
// end ;
37888: GO 37786
37890: POP
37891: POP
// if enchidnas then
37892: LD_VAR 0 4
37896: IFFALSE 37963
// for i = 1 to enchidnas do
37898: LD_ADDR_VAR 0 11
37902: PUSH
37903: DOUBLE
37904: LD_INT 1
37906: DEC
37907: ST_TO_ADDR
37908: LD_VAR 0 4
37912: PUSH
37913: FOR_TO
37914: IFFALSE 37961
// begin hc_class = 13 ;
37916: LD_ADDR_OWVAR 28
37920: PUSH
37921: LD_INT 13
37923: ST_TO_ADDR
// hc_gallery =  ;
37924: LD_ADDR_OWVAR 33
37928: PUSH
37929: LD_STRING 
37931: ST_TO_ADDR
// animal := CreateHuman ;
37932: LD_ADDR_VAR 0 12
37936: PUSH
37937: CALL_OW 44
37941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37942: LD_VAR 0 12
37946: PPUSH
37947: LD_VAR 0 8
37951: PPUSH
37952: LD_INT 0
37954: PPUSH
37955: CALL 39663 0 3
// end ;
37959: GO 37913
37961: POP
37962: POP
// if fishes then
37963: LD_VAR 0 7
37967: IFFALSE 38034
// for i = 1 to fishes do
37969: LD_ADDR_VAR 0 11
37973: PUSH
37974: DOUBLE
37975: LD_INT 1
37977: DEC
37978: ST_TO_ADDR
37979: LD_VAR 0 7
37983: PUSH
37984: FOR_TO
37985: IFFALSE 38032
// begin hc_class = 20 ;
37987: LD_ADDR_OWVAR 28
37991: PUSH
37992: LD_INT 20
37994: ST_TO_ADDR
// hc_gallery =  ;
37995: LD_ADDR_OWVAR 33
37999: PUSH
38000: LD_STRING 
38002: ST_TO_ADDR
// animal := CreateHuman ;
38003: LD_ADDR_VAR 0 12
38007: PUSH
38008: CALL_OW 44
38012: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38013: LD_VAR 0 12
38017: PPUSH
38018: LD_VAR 0 9
38022: PPUSH
38023: LD_INT 0
38025: PPUSH
38026: CALL 39663 0 3
// end ;
38030: GO 37984
38032: POP
38033: POP
// end ;
38034: LD_VAR 0 10
38038: RET
// export function WantHeal ( sci , unit ) ; begin
38039: LD_INT 0
38041: PPUSH
// if GetTaskList ( sci ) > 0 then
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 437
38051: PUSH
38052: LD_INT 0
38054: GREATER
38055: IFFALSE 38125
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38057: LD_VAR 0 1
38061: PPUSH
38062: CALL_OW 437
38066: PUSH
38067: LD_INT 1
38069: ARRAY
38070: PUSH
38071: LD_INT 1
38073: ARRAY
38074: PUSH
38075: LD_STRING l
38077: EQUAL
38078: PUSH
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 437
38088: PUSH
38089: LD_INT 1
38091: ARRAY
38092: PUSH
38093: LD_INT 4
38095: ARRAY
38096: PUSH
38097: LD_VAR 0 2
38101: EQUAL
38102: AND
38103: IFFALSE 38115
// result := true else
38105: LD_ADDR_VAR 0 3
38109: PUSH
38110: LD_INT 1
38112: ST_TO_ADDR
38113: GO 38123
// result := false ;
38115: LD_ADDR_VAR 0 3
38119: PUSH
38120: LD_INT 0
38122: ST_TO_ADDR
// end else
38123: GO 38133
// result := false ;
38125: LD_ADDR_VAR 0 3
38129: PUSH
38130: LD_INT 0
38132: ST_TO_ADDR
// end ;
38133: LD_VAR 0 3
38137: RET
// export function HealTarget ( sci ) ; begin
38138: LD_INT 0
38140: PPUSH
// if not sci then
38141: LD_VAR 0 1
38145: NOT
38146: IFFALSE 38150
// exit ;
38148: GO 38215
// result := 0 ;
38150: LD_ADDR_VAR 0 2
38154: PUSH
38155: LD_INT 0
38157: ST_TO_ADDR
// if GetTaskList ( sci ) then
38158: LD_VAR 0 1
38162: PPUSH
38163: CALL_OW 437
38167: IFFALSE 38215
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 437
38178: PUSH
38179: LD_INT 1
38181: ARRAY
38182: PUSH
38183: LD_INT 1
38185: ARRAY
38186: PUSH
38187: LD_STRING l
38189: EQUAL
38190: IFFALSE 38215
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38192: LD_ADDR_VAR 0 2
38196: PUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 437
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: PUSH
38211: LD_INT 4
38213: ARRAY
38214: ST_TO_ADDR
// end ;
38215: LD_VAR 0 2
38219: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38220: LD_INT 0
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
// if not base_units then
38226: LD_VAR 0 1
38230: NOT
38231: IFFALSE 38235
// exit ;
38233: GO 38322
// result := false ;
38235: LD_ADDR_VAR 0 2
38239: PUSH
38240: LD_INT 0
38242: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38243: LD_ADDR_VAR 0 5
38247: PUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: LD_INT 21
38255: PUSH
38256: LD_INT 3
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PPUSH
38263: CALL_OW 72
38267: ST_TO_ADDR
// if not tmp then
38268: LD_VAR 0 5
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 38322
// for i in tmp do
38277: LD_ADDR_VAR 0 3
38281: PUSH
38282: LD_VAR 0 5
38286: PUSH
38287: FOR_IN
38288: IFFALSE 38320
// begin result := EnemyInRange ( i , 22 ) ;
38290: LD_ADDR_VAR 0 2
38294: PUSH
38295: LD_VAR 0 3
38299: PPUSH
38300: LD_INT 22
38302: PPUSH
38303: CALL 35909 0 2
38307: ST_TO_ADDR
// if result then
38308: LD_VAR 0 2
38312: IFFALSE 38318
// exit ;
38314: POP
38315: POP
38316: GO 38322
// end ;
38318: GO 38287
38320: POP
38321: POP
// end ;
38322: LD_VAR 0 2
38326: RET
// export function FilterByTag ( units , tag ) ; begin
38327: LD_INT 0
38329: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38330: LD_ADDR_VAR 0 3
38334: PUSH
38335: LD_VAR 0 1
38339: PPUSH
38340: LD_INT 120
38342: PUSH
38343: LD_VAR 0 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PPUSH
38352: CALL_OW 72
38356: ST_TO_ADDR
// end ;
38357: LD_VAR 0 3
38361: RET
// export function IsDriver ( un ) ; begin
38362: LD_INT 0
38364: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38365: LD_ADDR_VAR 0 2
38369: PUSH
38370: LD_VAR 0 1
38374: PUSH
38375: LD_INT 55
38377: PUSH
38378: EMPTY
38379: LIST
38380: PPUSH
38381: CALL_OW 69
38385: IN
38386: ST_TO_ADDR
// end ;
38387: LD_VAR 0 2
38391: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38392: LD_INT 0
38394: PPUSH
38395: PPUSH
// list := [ ] ;
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: EMPTY
38402: ST_TO_ADDR
// case d of 0 :
38403: LD_VAR 0 3
38407: PUSH
38408: LD_INT 0
38410: DOUBLE
38411: EQUAL
38412: IFTRUE 38416
38414: GO 38549
38416: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38417: LD_ADDR_VAR 0 5
38421: PUSH
38422: LD_VAR 0 1
38426: PUSH
38427: LD_INT 4
38429: MINUS
38430: PUSH
38431: LD_VAR 0 2
38435: PUSH
38436: LD_INT 4
38438: MINUS
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: PUSH
38448: LD_VAR 0 1
38452: PUSH
38453: LD_INT 3
38455: MINUS
38456: PUSH
38457: LD_VAR 0 2
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: PUSH
38470: LD_VAR 0 1
38474: PUSH
38475: LD_INT 4
38477: PLUS
38478: PUSH
38479: LD_VAR 0 2
38483: PUSH
38484: LD_INT 4
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: PUSH
38492: LD_VAR 0 1
38496: PUSH
38497: LD_INT 3
38499: PLUS
38500: PUSH
38501: LD_VAR 0 2
38505: PUSH
38506: LD_INT 3
38508: PLUS
38509: PUSH
38510: LD_INT 5
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: PUSH
38518: LD_VAR 0 1
38522: PUSH
38523: LD_VAR 0 2
38527: PUSH
38528: LD_INT 4
38530: PLUS
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// end ; 1 :
38547: GO 39247
38549: LD_INT 1
38551: DOUBLE
38552: EQUAL
38553: IFTRUE 38557
38555: GO 38690
38557: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38558: LD_ADDR_VAR 0 5
38562: PUSH
38563: LD_VAR 0 1
38567: PUSH
38568: LD_VAR 0 2
38572: PUSH
38573: LD_INT 4
38575: MINUS
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: PUSH
38585: LD_VAR 0 1
38589: PUSH
38590: LD_INT 3
38592: MINUS
38593: PUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_INT 3
38601: MINUS
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: PUSH
38611: LD_VAR 0 1
38615: PUSH
38616: LD_INT 4
38618: MINUS
38619: PUSH
38620: LD_VAR 0 2
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: PUSH
38633: LD_VAR 0 1
38637: PUSH
38638: LD_VAR 0 2
38642: PUSH
38643: LD_INT 3
38645: PLUS
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: PUSH
38655: LD_VAR 0 1
38659: PUSH
38660: LD_INT 4
38662: PLUS
38663: PUSH
38664: LD_VAR 0 2
38668: PUSH
38669: LD_INT 4
38671: PLUS
38672: PUSH
38673: LD_INT 5
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: ST_TO_ADDR
// end ; 2 :
38688: GO 39247
38690: LD_INT 2
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38698
38696: GO 38827
38698: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38699: LD_ADDR_VAR 0 5
38703: PUSH
38704: LD_VAR 0 1
38708: PUSH
38709: LD_VAR 0 2
38713: PUSH
38714: LD_INT 3
38716: MINUS
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: PUSH
38726: LD_VAR 0 1
38730: PUSH
38731: LD_INT 4
38733: PLUS
38734: PUSH
38735: LD_VAR 0 2
38739: PUSH
38740: LD_INT 4
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: PUSH
38748: LD_VAR 0 1
38752: PUSH
38753: LD_VAR 0 2
38757: PUSH
38758: LD_INT 4
38760: PLUS
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: PUSH
38770: LD_VAR 0 1
38774: PUSH
38775: LD_INT 3
38777: MINUS
38778: PUSH
38779: LD_VAR 0 2
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: PUSH
38792: LD_VAR 0 1
38796: PUSH
38797: LD_INT 4
38799: MINUS
38800: PUSH
38801: LD_VAR 0 2
38805: PUSH
38806: LD_INT 4
38808: MINUS
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
// end ; 3 :
38825: GO 39247
38827: LD_INT 3
38829: DOUBLE
38830: EQUAL
38831: IFTRUE 38835
38833: GO 38968
38835: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38836: LD_ADDR_VAR 0 5
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: LD_INT 3
38848: PLUS
38849: PUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_INT 4
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_VAR 0 1
38867: PUSH
38868: LD_INT 4
38870: PLUS
38871: PUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_INT 4
38879: PLUS
38880: PUSH
38881: LD_INT 5
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: LD_VAR 0 1
38893: PUSH
38894: LD_INT 4
38896: MINUS
38897: PUSH
38898: LD_VAR 0 2
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: LD_VAR 0 1
38915: PUSH
38916: LD_VAR 0 2
38920: PUSH
38921: LD_INT 4
38923: MINUS
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: PUSH
38933: LD_VAR 0 1
38937: PUSH
38938: LD_INT 3
38940: MINUS
38941: PUSH
38942: LD_VAR 0 2
38946: PUSH
38947: LD_INT 3
38949: MINUS
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: ST_TO_ADDR
// end ; 4 :
38966: GO 39247
38968: LD_INT 4
38970: DOUBLE
38971: EQUAL
38972: IFTRUE 38976
38974: GO 39109
38976: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38977: LD_ADDR_VAR 0 5
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_INT 4
38994: PLUS
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: PUSH
39004: LD_VAR 0 1
39008: PUSH
39009: LD_INT 3
39011: PLUS
39012: PUSH
39013: LD_VAR 0 2
39017: PUSH
39018: LD_INT 3
39020: PLUS
39021: PUSH
39022: LD_INT 5
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: PUSH
39030: LD_VAR 0 1
39034: PUSH
39035: LD_INT 4
39037: PLUS
39038: PUSH
39039: LD_VAR 0 2
39043: PUSH
39044: LD_INT 4
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: LD_VAR 0 1
39056: PUSH
39057: LD_VAR 0 2
39061: PUSH
39062: LD_INT 3
39064: MINUS
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: PUSH
39074: LD_VAR 0 1
39078: PUSH
39079: LD_INT 4
39081: MINUS
39082: PUSH
39083: LD_VAR 0 2
39087: PUSH
39088: LD_INT 4
39090: MINUS
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: LIST
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: ST_TO_ADDR
// end ; 5 :
39107: GO 39247
39109: LD_INT 5
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39246
39117: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39118: LD_ADDR_VAR 0 5
39122: PUSH
39123: LD_VAR 0 1
39127: PUSH
39128: LD_INT 4
39130: MINUS
39131: PUSH
39132: LD_VAR 0 2
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: PUSH
39145: LD_VAR 0 1
39149: PUSH
39150: LD_VAR 0 2
39154: PUSH
39155: LD_INT 4
39157: MINUS
39158: PUSH
39159: LD_INT 3
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: PUSH
39167: LD_VAR 0 1
39171: PUSH
39172: LD_INT 4
39174: PLUS
39175: PUSH
39176: LD_VAR 0 2
39180: PUSH
39181: LD_INT 4
39183: PLUS
39184: PUSH
39185: LD_INT 5
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: PUSH
39193: LD_VAR 0 1
39197: PUSH
39198: LD_INT 3
39200: PLUS
39201: PUSH
39202: LD_VAR 0 2
39206: PUSH
39207: LD_INT 4
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: PUSH
39215: LD_VAR 0 1
39219: PUSH
39220: LD_VAR 0 2
39224: PUSH
39225: LD_INT 3
39227: PLUS
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: ST_TO_ADDR
// end ; end ;
39244: GO 39247
39246: POP
// result := list ;
39247: LD_ADDR_VAR 0 4
39251: PUSH
39252: LD_VAR 0 5
39256: ST_TO_ADDR
// end ;
39257: LD_VAR 0 4
39261: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39262: LD_INT 0
39264: PPUSH
39265: PPUSH
39266: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39267: LD_VAR 0 1
39271: NOT
39272: PUSH
39273: LD_VAR 0 2
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 3
39286: PUSH
39287: LD_INT 4
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: IN
39296: NOT
39297: OR
39298: IFFALSE 39302
// exit ;
39300: GO 39385
// tmp := [ ] ;
39302: LD_ADDR_VAR 0 5
39306: PUSH
39307: EMPTY
39308: ST_TO_ADDR
// for i in units do
39309: LD_ADDR_VAR 0 4
39313: PUSH
39314: LD_VAR 0 1
39318: PUSH
39319: FOR_IN
39320: IFFALSE 39354
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 5
39331: PPUSH
39332: LD_VAR 0 4
39336: PPUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: CALL_OW 259
39346: PPUSH
39347: CALL 40746 0 2
39351: ST_TO_ADDR
39352: GO 39319
39354: POP
39355: POP
// if not tmp then
39356: LD_VAR 0 5
39360: NOT
39361: IFFALSE 39365
// exit ;
39363: GO 39385
// result := SortListByListDesc ( units , tmp ) ;
39365: LD_ADDR_VAR 0 3
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: LD_VAR 0 5
39379: PPUSH
39380: CALL_OW 77
39384: ST_TO_ADDR
// end ;
39385: LD_VAR 0 3
39389: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39390: LD_INT 0
39392: PPUSH
39393: PPUSH
39394: PPUSH
// result := false ;
39395: LD_ADDR_VAR 0 3
39399: PUSH
39400: LD_INT 0
39402: ST_TO_ADDR
// if not building then
39403: LD_VAR 0 2
39407: NOT
39408: IFFALSE 39412
// exit ;
39410: GO 39550
// x := GetX ( building ) ;
39412: LD_ADDR_VAR 0 4
39416: PUSH
39417: LD_VAR 0 2
39421: PPUSH
39422: CALL_OW 250
39426: ST_TO_ADDR
// y := GetY ( building ) ;
39427: LD_ADDR_VAR 0 5
39431: PUSH
39432: LD_VAR 0 2
39436: PPUSH
39437: CALL_OW 251
39441: ST_TO_ADDR
// if not x or not y then
39442: LD_VAR 0 4
39446: NOT
39447: PUSH
39448: LD_VAR 0 5
39452: NOT
39453: OR
39454: IFFALSE 39458
// exit ;
39456: GO 39550
// if GetTaskList ( unit ) then
39458: LD_VAR 0 1
39462: PPUSH
39463: CALL_OW 437
39467: IFFALSE 39550
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39469: LD_STRING e
39471: PUSH
39472: LD_VAR 0 1
39476: PPUSH
39477: CALL_OW 437
39481: PUSH
39482: LD_INT 1
39484: ARRAY
39485: PUSH
39486: LD_INT 1
39488: ARRAY
39489: EQUAL
39490: PUSH
39491: LD_VAR 0 4
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 437
39505: PUSH
39506: LD_INT 1
39508: ARRAY
39509: PUSH
39510: LD_INT 2
39512: ARRAY
39513: EQUAL
39514: AND
39515: PUSH
39516: LD_VAR 0 5
39520: PUSH
39521: LD_VAR 0 1
39525: PPUSH
39526: CALL_OW 437
39530: PUSH
39531: LD_INT 1
39533: ARRAY
39534: PUSH
39535: LD_INT 3
39537: ARRAY
39538: EQUAL
39539: AND
39540: IFFALSE 39550
// result := true end ;
39542: LD_ADDR_VAR 0 3
39546: PUSH
39547: LD_INT 1
39549: ST_TO_ADDR
// end ;
39550: LD_VAR 0 3
39554: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39555: LD_INT 0
39557: PPUSH
// result := false ;
39558: LD_ADDR_VAR 0 4
39562: PUSH
39563: LD_INT 0
39565: ST_TO_ADDR
// if GetTaskList ( unit ) then
39566: LD_VAR 0 1
39570: PPUSH
39571: CALL_OW 437
39575: IFFALSE 39658
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39577: LD_STRING M
39579: PUSH
39580: LD_VAR 0 1
39584: PPUSH
39585: CALL_OW 437
39589: PUSH
39590: LD_INT 1
39592: ARRAY
39593: PUSH
39594: LD_INT 1
39596: ARRAY
39597: EQUAL
39598: PUSH
39599: LD_VAR 0 2
39603: PUSH
39604: LD_VAR 0 1
39608: PPUSH
39609: CALL_OW 437
39613: PUSH
39614: LD_INT 1
39616: ARRAY
39617: PUSH
39618: LD_INT 2
39620: ARRAY
39621: EQUAL
39622: AND
39623: PUSH
39624: LD_VAR 0 3
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 437
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: PUSH
39643: LD_INT 3
39645: ARRAY
39646: EQUAL
39647: AND
39648: IFFALSE 39658
// result := true ;
39650: LD_ADDR_VAR 0 4
39654: PUSH
39655: LD_INT 1
39657: ST_TO_ADDR
// end ; end ;
39658: LD_VAR 0 4
39662: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39663: LD_INT 0
39665: PPUSH
39666: PPUSH
39667: PPUSH
39668: PPUSH
// if not unit or not area then
39669: LD_VAR 0 1
39673: NOT
39674: PUSH
39675: LD_VAR 0 2
39679: NOT
39680: OR
39681: IFFALSE 39685
// exit ;
39683: GO 39849
// tmp := AreaToList ( area , i ) ;
39685: LD_ADDR_VAR 0 6
39689: PUSH
39690: LD_VAR 0 2
39694: PPUSH
39695: LD_VAR 0 5
39699: PPUSH
39700: CALL_OW 517
39704: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39705: LD_ADDR_VAR 0 5
39709: PUSH
39710: DOUBLE
39711: LD_INT 1
39713: DEC
39714: ST_TO_ADDR
39715: LD_VAR 0 6
39719: PUSH
39720: LD_INT 1
39722: ARRAY
39723: PUSH
39724: FOR_TO
39725: IFFALSE 39847
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39727: LD_ADDR_VAR 0 7
39731: PUSH
39732: LD_VAR 0 6
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PUSH
39741: LD_VAR 0 5
39745: ARRAY
39746: PUSH
39747: LD_VAR 0 6
39751: PUSH
39752: LD_INT 2
39754: ARRAY
39755: PUSH
39756: LD_VAR 0 5
39760: ARRAY
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39766: LD_VAR 0 7
39770: PUSH
39771: LD_INT 1
39773: ARRAY
39774: PPUSH
39775: LD_VAR 0 7
39779: PUSH
39780: LD_INT 2
39782: ARRAY
39783: PPUSH
39784: CALL_OW 428
39788: PUSH
39789: LD_INT 0
39791: EQUAL
39792: IFFALSE 39845
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39794: LD_VAR 0 1
39798: PPUSH
39799: LD_VAR 0 7
39803: PUSH
39804: LD_INT 1
39806: ARRAY
39807: PPUSH
39808: LD_VAR 0 7
39812: PUSH
39813: LD_INT 2
39815: ARRAY
39816: PPUSH
39817: LD_VAR 0 3
39821: PPUSH
39822: CALL_OW 48
// result := IsPlaced ( unit ) ;
39826: LD_ADDR_VAR 0 4
39830: PUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 305
39840: ST_TO_ADDR
// exit ;
39841: POP
39842: POP
39843: GO 39849
// end ; end ;
39845: GO 39724
39847: POP
39848: POP
// end ;
39849: LD_VAR 0 4
39853: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39854: LD_INT 0
39856: PPUSH
39857: PPUSH
39858: PPUSH
// if not side or side > 8 then
39859: LD_VAR 0 1
39863: NOT
39864: PUSH
39865: LD_VAR 0 1
39869: PUSH
39870: LD_INT 8
39872: GREATER
39873: OR
39874: IFFALSE 39878
// exit ;
39876: GO 40065
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39878: LD_ADDR_VAR 0 4
39882: PUSH
39883: LD_INT 22
39885: PUSH
39886: LD_VAR 0 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 21
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PPUSH
39909: CALL_OW 69
39913: ST_TO_ADDR
// if not tmp then
39914: LD_VAR 0 4
39918: NOT
39919: IFFALSE 39923
// exit ;
39921: GO 40065
// enable_addtolog := true ;
39923: LD_ADDR_OWVAR 81
39927: PUSH
39928: LD_INT 1
39930: ST_TO_ADDR
// AddToLog ( [ ) ;
39931: LD_STRING [
39933: PPUSH
39934: CALL_OW 561
// for i in tmp do
39938: LD_ADDR_VAR 0 3
39942: PUSH
39943: LD_VAR 0 4
39947: PUSH
39948: FOR_IN
39949: IFFALSE 40056
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39951: LD_STRING [
39953: PUSH
39954: LD_VAR 0 3
39958: PPUSH
39959: CALL_OW 266
39963: STR
39964: PUSH
39965: LD_STRING , 
39967: STR
39968: PUSH
39969: LD_VAR 0 3
39973: PPUSH
39974: CALL_OW 250
39978: STR
39979: PUSH
39980: LD_STRING , 
39982: STR
39983: PUSH
39984: LD_VAR 0 3
39988: PPUSH
39989: CALL_OW 251
39993: STR
39994: PUSH
39995: LD_STRING , 
39997: STR
39998: PUSH
39999: LD_VAR 0 3
40003: PPUSH
40004: CALL_OW 254
40008: STR
40009: PUSH
40010: LD_STRING , 
40012: STR
40013: PUSH
40014: LD_VAR 0 3
40018: PPUSH
40019: LD_INT 1
40021: PPUSH
40022: CALL_OW 268
40026: STR
40027: PUSH
40028: LD_STRING , 
40030: STR
40031: PUSH
40032: LD_VAR 0 3
40036: PPUSH
40037: LD_INT 2
40039: PPUSH
40040: CALL_OW 268
40044: STR
40045: PUSH
40046: LD_STRING ],
40048: STR
40049: PPUSH
40050: CALL_OW 561
// end ;
40054: GO 39948
40056: POP
40057: POP
// AddToLog ( ]; ) ;
40058: LD_STRING ];
40060: PPUSH
40061: CALL_OW 561
// end ;
40065: LD_VAR 0 2
40069: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40070: LD_INT 0
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
// if not area or not rate or not max then
40077: LD_VAR 0 1
40081: NOT
40082: PUSH
40083: LD_VAR 0 2
40087: NOT
40088: OR
40089: PUSH
40090: LD_VAR 0 4
40094: NOT
40095: OR
40096: IFFALSE 40100
// exit ;
40098: GO 40289
// while 1 do
40100: LD_INT 1
40102: IFFALSE 40289
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40104: LD_ADDR_VAR 0 9
40108: PUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: LD_INT 1
40116: PPUSH
40117: CALL_OW 287
40121: PUSH
40122: LD_INT 10
40124: MUL
40125: ST_TO_ADDR
// r := rate / 10 ;
40126: LD_ADDR_VAR 0 7
40130: PUSH
40131: LD_VAR 0 2
40135: PUSH
40136: LD_INT 10
40138: DIVREAL
40139: ST_TO_ADDR
// time := 1 1$00 ;
40140: LD_ADDR_VAR 0 8
40144: PUSH
40145: LD_INT 2100
40147: ST_TO_ADDR
// if amount < min then
40148: LD_VAR 0 9
40152: PUSH
40153: LD_VAR 0 3
40157: LESS
40158: IFFALSE 40176
// r := r * 2 else
40160: LD_ADDR_VAR 0 7
40164: PUSH
40165: LD_VAR 0 7
40169: PUSH
40170: LD_INT 2
40172: MUL
40173: ST_TO_ADDR
40174: GO 40202
// if amount > max then
40176: LD_VAR 0 9
40180: PUSH
40181: LD_VAR 0 4
40185: GREATER
40186: IFFALSE 40202
// r := r / 2 ;
40188: LD_ADDR_VAR 0 7
40192: PUSH
40193: LD_VAR 0 7
40197: PUSH
40198: LD_INT 2
40200: DIVREAL
40201: ST_TO_ADDR
// time := time / r ;
40202: LD_ADDR_VAR 0 8
40206: PUSH
40207: LD_VAR 0 8
40211: PUSH
40212: LD_VAR 0 7
40216: DIVREAL
40217: ST_TO_ADDR
// if time < 0 then
40218: LD_VAR 0 8
40222: PUSH
40223: LD_INT 0
40225: LESS
40226: IFFALSE 40243
// time := time * - 1 ;
40228: LD_ADDR_VAR 0 8
40232: PUSH
40233: LD_VAR 0 8
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: MUL
40242: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40243: LD_VAR 0 8
40247: PUSH
40248: LD_INT 35
40250: PPUSH
40251: LD_INT 875
40253: PPUSH
40254: CALL_OW 12
40258: PLUS
40259: PPUSH
40260: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40264: LD_INT 1
40266: PPUSH
40267: LD_INT 5
40269: PPUSH
40270: CALL_OW 12
40274: PPUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: LD_INT 1
40282: PPUSH
40283: CALL_OW 55
// end ;
40287: GO 40100
// end ;
40289: LD_VAR 0 5
40293: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40294: LD_INT 0
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
// if not turrets or not factories then
40304: LD_VAR 0 1
40308: NOT
40309: PUSH
40310: LD_VAR 0 2
40314: NOT
40315: OR
40316: IFFALSE 40320
// exit ;
40318: GO 40627
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40320: LD_ADDR_VAR 0 10
40324: PUSH
40325: LD_INT 5
40327: PUSH
40328: LD_INT 6
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 4
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 3
40347: PUSH
40348: LD_INT 5
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 24
40362: PUSH
40363: LD_INT 25
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 23
40372: PUSH
40373: LD_INT 27
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 42
40386: PUSH
40387: LD_INT 43
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 44
40396: PUSH
40397: LD_INT 46
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 45
40406: PUSH
40407: LD_INT 47
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
// result := [ ] ;
40424: LD_ADDR_VAR 0 3
40428: PUSH
40429: EMPTY
40430: ST_TO_ADDR
// for i in turrets do
40431: LD_ADDR_VAR 0 4
40435: PUSH
40436: LD_VAR 0 1
40440: PUSH
40441: FOR_IN
40442: IFFALSE 40625
// begin nat := GetNation ( i ) ;
40444: LD_ADDR_VAR 0 7
40448: PUSH
40449: LD_VAR 0 4
40453: PPUSH
40454: CALL_OW 248
40458: ST_TO_ADDR
// weapon := 0 ;
40459: LD_ADDR_VAR 0 8
40463: PUSH
40464: LD_INT 0
40466: ST_TO_ADDR
// if not nat then
40467: LD_VAR 0 7
40471: NOT
40472: IFFALSE 40476
// continue ;
40474: GO 40441
// for j in list [ nat ] do
40476: LD_ADDR_VAR 0 5
40480: PUSH
40481: LD_VAR 0 10
40485: PUSH
40486: LD_VAR 0 7
40490: ARRAY
40491: PUSH
40492: FOR_IN
40493: IFFALSE 40534
// if GetBWeapon ( i ) = j [ 1 ] then
40495: LD_VAR 0 4
40499: PPUSH
40500: CALL_OW 269
40504: PUSH
40505: LD_VAR 0 5
40509: PUSH
40510: LD_INT 1
40512: ARRAY
40513: EQUAL
40514: IFFALSE 40532
// begin weapon := j [ 2 ] ;
40516: LD_ADDR_VAR 0 8
40520: PUSH
40521: LD_VAR 0 5
40525: PUSH
40526: LD_INT 2
40528: ARRAY
40529: ST_TO_ADDR
// break ;
40530: GO 40534
// end ;
40532: GO 40492
40534: POP
40535: POP
// if not weapon then
40536: LD_VAR 0 8
40540: NOT
40541: IFFALSE 40545
// continue ;
40543: GO 40441
// for k in factories do
40545: LD_ADDR_VAR 0 6
40549: PUSH
40550: LD_VAR 0 2
40554: PUSH
40555: FOR_IN
40556: IFFALSE 40621
// begin weapons := AvailableWeaponList ( k ) ;
40558: LD_ADDR_VAR 0 9
40562: PUSH
40563: LD_VAR 0 6
40567: PPUSH
40568: CALL_OW 478
40572: ST_TO_ADDR
// if not weapons then
40573: LD_VAR 0 9
40577: NOT
40578: IFFALSE 40582
// continue ;
40580: GO 40555
// if weapon in weapons then
40582: LD_VAR 0 8
40586: PUSH
40587: LD_VAR 0 9
40591: IN
40592: IFFALSE 40619
// begin result := [ i , weapon ] ;
40594: LD_ADDR_VAR 0 3
40598: PUSH
40599: LD_VAR 0 4
40603: PUSH
40604: LD_VAR 0 8
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: ST_TO_ADDR
// exit ;
40613: POP
40614: POP
40615: POP
40616: POP
40617: GO 40627
// end ; end ;
40619: GO 40555
40621: POP
40622: POP
// end ;
40623: GO 40441
40625: POP
40626: POP
// end ;
40627: LD_VAR 0 3
40631: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40632: LD_INT 0
40634: PPUSH
// if not side or side > 8 then
40635: LD_VAR 0 3
40639: NOT
40640: PUSH
40641: LD_VAR 0 3
40645: PUSH
40646: LD_INT 8
40648: GREATER
40649: OR
40650: IFFALSE 40654
// exit ;
40652: GO 40713
// if not range then
40654: LD_VAR 0 4
40658: NOT
40659: IFFALSE 40670
// range := - 12 ;
40661: LD_ADDR_VAR 0 4
40665: PUSH
40666: LD_INT 12
40668: NEG
40669: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40670: LD_VAR 0 1
40674: PPUSH
40675: LD_VAR 0 2
40679: PPUSH
40680: LD_VAR 0 3
40684: PPUSH
40685: LD_VAR 0 4
40689: PPUSH
40690: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40694: LD_VAR 0 1
40698: PPUSH
40699: LD_VAR 0 2
40703: PPUSH
40704: LD_VAR 0 3
40708: PPUSH
40709: CALL_OW 331
// end ;
40713: LD_VAR 0 5
40717: RET
// export function Video ( mode ) ; begin
40718: LD_INT 0
40720: PPUSH
// ingame_video = mode ;
40721: LD_ADDR_OWVAR 52
40725: PUSH
40726: LD_VAR 0 1
40730: ST_TO_ADDR
// interface_hidden = mode ;
40731: LD_ADDR_OWVAR 54
40735: PUSH
40736: LD_VAR 0 1
40740: ST_TO_ADDR
// end ;
40741: LD_VAR 0 2
40745: RET
// export function Join ( array , element ) ; begin
40746: LD_INT 0
40748: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40749: LD_ADDR_VAR 0 3
40753: PUSH
40754: LD_VAR 0 1
40758: PPUSH
40759: LD_VAR 0 1
40763: PUSH
40764: LD_INT 1
40766: PLUS
40767: PPUSH
40768: LD_VAR 0 2
40772: PPUSH
40773: CALL_OW 1
40777: ST_TO_ADDR
// end ;
40778: LD_VAR 0 3
40782: RET
// export function JoinUnion ( array , element ) ; begin
40783: LD_INT 0
40785: PPUSH
// result := array union element ;
40786: LD_ADDR_VAR 0 3
40790: PUSH
40791: LD_VAR 0 1
40795: PUSH
40796: LD_VAR 0 2
40800: UNION
40801: ST_TO_ADDR
// end ;
40802: LD_VAR 0 3
40806: RET
// export function GetBehemoths ( side ) ; begin
40807: LD_INT 0
40809: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40810: LD_ADDR_VAR 0 2
40814: PUSH
40815: LD_INT 22
40817: PUSH
40818: LD_VAR 0 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 31
40829: PUSH
40830: LD_INT 25
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PPUSH
40841: CALL_OW 69
40845: ST_TO_ADDR
// end ;
40846: LD_VAR 0 2
40850: RET
// export function Shuffle ( array ) ; var i , index ; begin
40851: LD_INT 0
40853: PPUSH
40854: PPUSH
40855: PPUSH
// result := [ ] ;
40856: LD_ADDR_VAR 0 2
40860: PUSH
40861: EMPTY
40862: ST_TO_ADDR
// if not array then
40863: LD_VAR 0 1
40867: NOT
40868: IFFALSE 40872
// exit ;
40870: GO 40971
// Randomize ;
40872: CALL_OW 10
// for i = array downto 1 do
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: DOUBLE
40882: LD_VAR 0 1
40886: INC
40887: ST_TO_ADDR
40888: LD_INT 1
40890: PUSH
40891: FOR_DOWNTO
40892: IFFALSE 40969
// begin index := rand ( 1 , array ) ;
40894: LD_ADDR_VAR 0 4
40898: PUSH
40899: LD_INT 1
40901: PPUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 12
40911: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40912: LD_ADDR_VAR 0 2
40916: PUSH
40917: LD_VAR 0 2
40921: PPUSH
40922: LD_VAR 0 2
40926: PUSH
40927: LD_INT 1
40929: PLUS
40930: PPUSH
40931: LD_VAR 0 1
40935: PUSH
40936: LD_VAR 0 4
40940: ARRAY
40941: PPUSH
40942: CALL_OW 2
40946: ST_TO_ADDR
// array := Delete ( array , index ) ;
40947: LD_ADDR_VAR 0 1
40951: PUSH
40952: LD_VAR 0 1
40956: PPUSH
40957: LD_VAR 0 4
40961: PPUSH
40962: CALL_OW 3
40966: ST_TO_ADDR
// end ;
40967: GO 40891
40969: POP
40970: POP
// end ;
40971: LD_VAR 0 2
40975: RET
// export function GetBaseMaterials ( base ) ; begin
40976: LD_INT 0
40978: PPUSH
// result := [ 0 , 0 , 0 ] ;
40979: LD_ADDR_VAR 0 2
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: ST_TO_ADDR
// if not base then
40998: LD_VAR 0 1
41002: NOT
41003: IFFALSE 41007
// exit ;
41005: GO 41056
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41007: LD_ADDR_VAR 0 2
41011: PUSH
41012: LD_VAR 0 1
41016: PPUSH
41017: LD_INT 1
41019: PPUSH
41020: CALL_OW 275
41024: PUSH
41025: LD_VAR 0 1
41029: PPUSH
41030: LD_INT 2
41032: PPUSH
41033: CALL_OW 275
41037: PUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: LD_INT 3
41045: PPUSH
41046: CALL_OW 275
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: ST_TO_ADDR
// end ;
41056: LD_VAR 0 2
41060: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41061: LD_INT 0
41063: PPUSH
41064: PPUSH
// result := array ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_VAR 0 1
41074: ST_TO_ADDR
// if size >= result then
41075: LD_VAR 0 2
41079: PUSH
41080: LD_VAR 0 3
41084: GREATEREQUAL
41085: IFFALSE 41089
// exit ;
41087: GO 41139
// if size then
41089: LD_VAR 0 2
41093: IFFALSE 41139
// for i := array downto size do
41095: LD_ADDR_VAR 0 4
41099: PUSH
41100: DOUBLE
41101: LD_VAR 0 1
41105: INC
41106: ST_TO_ADDR
41107: LD_VAR 0 2
41111: PUSH
41112: FOR_DOWNTO
41113: IFFALSE 41137
// result := Delete ( result , result ) ;
41115: LD_ADDR_VAR 0 3
41119: PUSH
41120: LD_VAR 0 3
41124: PPUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: CALL_OW 3
41134: ST_TO_ADDR
41135: GO 41112
41137: POP
41138: POP
// end ;
41139: LD_VAR 0 3
41143: RET
// export function ComExit ( unit ) ; var tmp ; begin
41144: LD_INT 0
41146: PPUSH
41147: PPUSH
// if not IsInUnit ( unit ) then
41148: LD_VAR 0 1
41152: PPUSH
41153: CALL_OW 310
41157: NOT
41158: IFFALSE 41162
// exit ;
41160: GO 41222
// tmp := IsInUnit ( unit ) ;
41162: LD_ADDR_VAR 0 3
41166: PUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 310
41176: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41177: LD_VAR 0 3
41181: PPUSH
41182: CALL_OW 247
41186: PUSH
41187: LD_INT 2
41189: EQUAL
41190: IFFALSE 41203
// ComExitVehicle ( unit ) else
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 121
41201: GO 41212
// ComExitBuilding ( unit ) ;
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 122
// result := tmp ;
41212: LD_ADDR_VAR 0 2
41216: PUSH
41217: LD_VAR 0 3
41221: ST_TO_ADDR
// end ;
41222: LD_VAR 0 2
41226: RET
// export function ComExitAll ( units ) ; var i ; begin
41227: LD_INT 0
41229: PPUSH
41230: PPUSH
// if not units then
41231: LD_VAR 0 1
41235: NOT
41236: IFFALSE 41240
// exit ;
41238: GO 41266
// for i in units do
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_VAR 0 1
41249: PUSH
41250: FOR_IN
41251: IFFALSE 41264
// ComExit ( i ) ;
41253: LD_VAR 0 3
41257: PPUSH
41258: CALL 41144 0 1
41262: GO 41250
41264: POP
41265: POP
// end ;
41266: LD_VAR 0 2
41270: RET
// export function ResetHc ; begin
41271: LD_INT 0
41273: PPUSH
// InitHc ;
41274: CALL_OW 19
// hc_importance := 0 ;
41278: LD_ADDR_OWVAR 32
41282: PUSH
41283: LD_INT 0
41285: ST_TO_ADDR
// end ;
41286: LD_VAR 0 1
41290: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41291: LD_INT 0
41293: PPUSH
41294: PPUSH
41295: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41296: LD_ADDR_VAR 0 6
41300: PUSH
41301: LD_VAR 0 1
41305: PUSH
41306: LD_VAR 0 3
41310: PLUS
41311: PUSH
41312: LD_INT 2
41314: DIV
41315: ST_TO_ADDR
// if _x < 0 then
41316: LD_VAR 0 6
41320: PUSH
41321: LD_INT 0
41323: LESS
41324: IFFALSE 41341
// _x := _x * - 1 ;
41326: LD_ADDR_VAR 0 6
41330: PUSH
41331: LD_VAR 0 6
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: MUL
41340: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41341: LD_ADDR_VAR 0 7
41345: PUSH
41346: LD_VAR 0 2
41350: PUSH
41351: LD_VAR 0 4
41355: PLUS
41356: PUSH
41357: LD_INT 2
41359: DIV
41360: ST_TO_ADDR
// if _y < 0 then
41361: LD_VAR 0 7
41365: PUSH
41366: LD_INT 0
41368: LESS
41369: IFFALSE 41386
// _y := _y * - 1 ;
41371: LD_ADDR_VAR 0 7
41375: PUSH
41376: LD_VAR 0 7
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: MUL
41385: ST_TO_ADDR
// result := [ _x , _y ] ;
41386: LD_ADDR_VAR 0 5
41390: PUSH
41391: LD_VAR 0 6
41395: PUSH
41396: LD_VAR 0 7
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: ST_TO_ADDR
// end ;
41405: LD_VAR 0 5
41409: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41410: LD_INT 0
41412: PPUSH
41413: PPUSH
41414: PPUSH
41415: PPUSH
// task := GetTaskList ( unit ) ;
41416: LD_ADDR_VAR 0 7
41420: PUSH
41421: LD_VAR 0 1
41425: PPUSH
41426: CALL_OW 437
41430: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41431: LD_VAR 0 7
41435: NOT
41436: PUSH
41437: LD_VAR 0 1
41441: PPUSH
41442: LD_VAR 0 2
41446: PPUSH
41447: CALL_OW 308
41451: NOT
41452: AND
41453: IFFALSE 41457
// exit ;
41455: GO 41575
// if IsInArea ( unit , area ) then
41457: LD_VAR 0 1
41461: PPUSH
41462: LD_VAR 0 2
41466: PPUSH
41467: CALL_OW 308
41471: IFFALSE 41489
// begin ComMoveToArea ( unit , goAway ) ;
41473: LD_VAR 0 1
41477: PPUSH
41478: LD_VAR 0 3
41482: PPUSH
41483: CALL_OW 113
// exit ;
41487: GO 41575
// end ; if task [ 1 ] [ 1 ] <> M then
41489: LD_VAR 0 7
41493: PUSH
41494: LD_INT 1
41496: ARRAY
41497: PUSH
41498: LD_INT 1
41500: ARRAY
41501: PUSH
41502: LD_STRING M
41504: NONEQUAL
41505: IFFALSE 41509
// exit ;
41507: GO 41575
// x := task [ 1 ] [ 2 ] ;
41509: LD_ADDR_VAR 0 5
41513: PUSH
41514: LD_VAR 0 7
41518: PUSH
41519: LD_INT 1
41521: ARRAY
41522: PUSH
41523: LD_INT 2
41525: ARRAY
41526: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41527: LD_ADDR_VAR 0 6
41531: PUSH
41532: LD_VAR 0 7
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: PUSH
41541: LD_INT 3
41543: ARRAY
41544: ST_TO_ADDR
// if InArea ( x , y , area ) then
41545: LD_VAR 0 5
41549: PPUSH
41550: LD_VAR 0 6
41554: PPUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: CALL_OW 309
41564: IFFALSE 41575
// ComStop ( unit ) ;
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 141
// end ;
41575: LD_VAR 0 4
41579: RET
// export function Abs ( value ) ; begin
41580: LD_INT 0
41582: PPUSH
// result := value ;
41583: LD_ADDR_VAR 0 2
41587: PUSH
41588: LD_VAR 0 1
41592: ST_TO_ADDR
// if value < 0 then
41593: LD_VAR 0 1
41597: PUSH
41598: LD_INT 0
41600: LESS
41601: IFFALSE 41618
// result := value * - 1 ;
41603: LD_ADDR_VAR 0 2
41607: PUSH
41608: LD_VAR 0 1
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: MUL
41617: ST_TO_ADDR
// end ;
41618: LD_VAR 0 2
41622: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
// if not unit or not building then
41633: LD_VAR 0 1
41637: NOT
41638: PUSH
41639: LD_VAR 0 2
41643: NOT
41644: OR
41645: IFFALSE 41649
// exit ;
41647: GO 41875
// x := GetX ( building ) ;
41649: LD_ADDR_VAR 0 4
41653: PUSH
41654: LD_VAR 0 2
41658: PPUSH
41659: CALL_OW 250
41663: ST_TO_ADDR
// y := GetY ( building ) ;
41664: LD_ADDR_VAR 0 6
41668: PUSH
41669: LD_VAR 0 2
41673: PPUSH
41674: CALL_OW 251
41678: ST_TO_ADDR
// d := GetDir ( building ) ;
41679: LD_ADDR_VAR 0 8
41683: PUSH
41684: LD_VAR 0 2
41688: PPUSH
41689: CALL_OW 254
41693: ST_TO_ADDR
// r := 4 ;
41694: LD_ADDR_VAR 0 9
41698: PUSH
41699: LD_INT 4
41701: ST_TO_ADDR
// for i := 1 to 5 do
41702: LD_ADDR_VAR 0 10
41706: PUSH
41707: DOUBLE
41708: LD_INT 1
41710: DEC
41711: ST_TO_ADDR
41712: LD_INT 5
41714: PUSH
41715: FOR_TO
41716: IFFALSE 41873
// begin _x := ShiftX ( x , d , r + i ) ;
41718: LD_ADDR_VAR 0 5
41722: PUSH
41723: LD_VAR 0 4
41727: PPUSH
41728: LD_VAR 0 8
41732: PPUSH
41733: LD_VAR 0 9
41737: PUSH
41738: LD_VAR 0 10
41742: PLUS
41743: PPUSH
41744: CALL_OW 272
41748: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41749: LD_ADDR_VAR 0 7
41753: PUSH
41754: LD_VAR 0 6
41758: PPUSH
41759: LD_VAR 0 8
41763: PPUSH
41764: LD_VAR 0 9
41768: PUSH
41769: LD_VAR 0 10
41773: PLUS
41774: PPUSH
41775: CALL_OW 273
41779: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41780: LD_VAR 0 5
41784: PPUSH
41785: LD_VAR 0 7
41789: PPUSH
41790: CALL_OW 488
41794: PUSH
41795: LD_VAR 0 5
41799: PPUSH
41800: LD_VAR 0 7
41804: PPUSH
41805: CALL_OW 428
41809: PPUSH
41810: CALL_OW 247
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: IN
41825: NOT
41826: AND
41827: IFFALSE 41871
// begin ComMoveXY ( unit , _x , _y ) ;
41829: LD_VAR 0 1
41833: PPUSH
41834: LD_VAR 0 5
41838: PPUSH
41839: LD_VAR 0 7
41843: PPUSH
41844: CALL_OW 111
// result := [ _x , _y ] ;
41848: LD_ADDR_VAR 0 3
41852: PUSH
41853: LD_VAR 0 5
41857: PUSH
41858: LD_VAR 0 7
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: ST_TO_ADDR
// exit ;
41867: POP
41868: POP
41869: GO 41875
// end ; end ;
41871: GO 41715
41873: POP
41874: POP
// end ;
41875: LD_VAR 0 3
41879: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41880: LD_INT 0
41882: PPUSH
41883: PPUSH
41884: PPUSH
// result := 0 ;
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: LD_INT 0
41892: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41893: LD_VAR 0 1
41897: PUSH
41898: LD_INT 0
41900: LESS
41901: PUSH
41902: LD_VAR 0 1
41906: PUSH
41907: LD_INT 8
41909: GREATER
41910: OR
41911: PUSH
41912: LD_VAR 0 2
41916: PUSH
41917: LD_INT 0
41919: LESS
41920: OR
41921: PUSH
41922: LD_VAR 0 2
41926: PUSH
41927: LD_INT 8
41929: GREATER
41930: OR
41931: IFFALSE 41935
// exit ;
41933: GO 42010
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41935: LD_ADDR_VAR 0 4
41939: PUSH
41940: LD_INT 22
41942: PUSH
41943: LD_VAR 0 2
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PPUSH
41952: CALL_OW 69
41956: PUSH
41957: FOR_IN
41958: IFFALSE 42008
// begin un := UnitShoot ( i ) ;
41960: LD_ADDR_VAR 0 5
41964: PUSH
41965: LD_VAR 0 4
41969: PPUSH
41970: CALL_OW 504
41974: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41975: LD_VAR 0 5
41979: PPUSH
41980: CALL_OW 255
41984: PUSH
41985: LD_VAR 0 1
41989: EQUAL
41990: IFFALSE 42006
// begin result := un ;
41992: LD_ADDR_VAR 0 3
41996: PUSH
41997: LD_VAR 0 5
42001: ST_TO_ADDR
// exit ;
42002: POP
42003: POP
42004: GO 42010
// end ; end ;
42006: GO 41957
42008: POP
42009: POP
// end ;
42010: LD_VAR 0 3
42014: RET
// export function GetCargoBay ( units ) ; begin
42015: LD_INT 0
42017: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42018: LD_ADDR_VAR 0 2
42022: PUSH
42023: LD_VAR 0 1
42027: PPUSH
42028: LD_INT 2
42030: PUSH
42031: LD_INT 34
42033: PUSH
42034: LD_INT 12
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 34
42043: PUSH
42044: LD_INT 51
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 34
42053: PUSH
42054: LD_INT 32
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 34
42063: PUSH
42064: LD_INT 89
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: PPUSH
42078: CALL_OW 72
42082: ST_TO_ADDR
// end ;
42083: LD_VAR 0 2
42087: RET
// export function Negate ( value ) ; begin
42088: LD_INT 0
42090: PPUSH
// result := not value ;
42091: LD_ADDR_VAR 0 2
42095: PUSH
42096: LD_VAR 0 1
42100: NOT
42101: ST_TO_ADDR
// end ;
42102: LD_VAR 0 2
42106: RET
// export function Inc ( value ) ; begin
42107: LD_INT 0
42109: PPUSH
// result := value + 1 ;
42110: LD_ADDR_VAR 0 2
42114: PUSH
42115: LD_VAR 0 1
42119: PUSH
42120: LD_INT 1
42122: PLUS
42123: ST_TO_ADDR
// end ;
42124: LD_VAR 0 2
42128: RET
// export function Dec ( value ) ; begin
42129: LD_INT 0
42131: PPUSH
// result := value - 1 ;
42132: LD_ADDR_VAR 0 2
42136: PUSH
42137: LD_VAR 0 1
42141: PUSH
42142: LD_INT 1
42144: MINUS
42145: ST_TO_ADDR
// end ;
42146: LD_VAR 0 2
42150: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42151: LD_INT 0
42153: PPUSH
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
42158: PPUSH
42159: PPUSH
42160: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42161: LD_VAR 0 1
42165: PPUSH
42166: LD_VAR 0 2
42170: PPUSH
42171: CALL_OW 488
42175: NOT
42176: PUSH
42177: LD_VAR 0 3
42181: PPUSH
42182: LD_VAR 0 4
42186: PPUSH
42187: CALL_OW 488
42191: NOT
42192: OR
42193: IFFALSE 42206
// begin result := - 1 ;
42195: LD_ADDR_VAR 0 5
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: ST_TO_ADDR
// exit ;
42204: GO 42441
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42206: LD_ADDR_VAR 0 12
42210: PUSH
42211: LD_VAR 0 1
42215: PPUSH
42216: LD_VAR 0 2
42220: PPUSH
42221: LD_VAR 0 3
42225: PPUSH
42226: LD_VAR 0 4
42230: PPUSH
42231: CALL 41291 0 4
42235: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42236: LD_ADDR_VAR 0 11
42240: PUSH
42241: LD_VAR 0 1
42245: PPUSH
42246: LD_VAR 0 2
42250: PPUSH
42251: LD_VAR 0 12
42255: PUSH
42256: LD_INT 1
42258: ARRAY
42259: PPUSH
42260: LD_VAR 0 12
42264: PUSH
42265: LD_INT 2
42267: ARRAY
42268: PPUSH
42269: CALL_OW 298
42273: ST_TO_ADDR
// distance := 9999 ;
42274: LD_ADDR_VAR 0 10
42278: PUSH
42279: LD_INT 9999
42281: ST_TO_ADDR
// for i := 0 to 5 do
42282: LD_ADDR_VAR 0 6
42286: PUSH
42287: DOUBLE
42288: LD_INT 0
42290: DEC
42291: ST_TO_ADDR
42292: LD_INT 5
42294: PUSH
42295: FOR_TO
42296: IFFALSE 42439
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42298: LD_ADDR_VAR 0 7
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: LD_VAR 0 6
42312: PPUSH
42313: LD_VAR 0 11
42317: PPUSH
42318: CALL_OW 272
42322: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42323: LD_ADDR_VAR 0 8
42327: PUSH
42328: LD_VAR 0 2
42332: PPUSH
42333: LD_VAR 0 6
42337: PPUSH
42338: LD_VAR 0 11
42342: PPUSH
42343: CALL_OW 273
42347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42348: LD_VAR 0 7
42352: PPUSH
42353: LD_VAR 0 8
42357: PPUSH
42358: CALL_OW 488
42362: NOT
42363: IFFALSE 42367
// continue ;
42365: GO 42295
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42367: LD_ADDR_VAR 0 9
42371: PUSH
42372: LD_VAR 0 12
42376: PUSH
42377: LD_INT 1
42379: ARRAY
42380: PPUSH
42381: LD_VAR 0 12
42385: PUSH
42386: LD_INT 2
42388: ARRAY
42389: PPUSH
42390: LD_VAR 0 7
42394: PPUSH
42395: LD_VAR 0 8
42399: PPUSH
42400: CALL_OW 298
42404: ST_TO_ADDR
// if tmp < distance then
42405: LD_VAR 0 9
42409: PUSH
42410: LD_VAR 0 10
42414: LESS
42415: IFFALSE 42437
// begin result := i ;
42417: LD_ADDR_VAR 0 5
42421: PUSH
42422: LD_VAR 0 6
42426: ST_TO_ADDR
// distance := tmp ;
42427: LD_ADDR_VAR 0 10
42431: PUSH
42432: LD_VAR 0 9
42436: ST_TO_ADDR
// end ; end ;
42437: GO 42295
42439: POP
42440: POP
// end ;
42441: LD_VAR 0 5
42445: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42446: LD_INT 0
42448: PPUSH
42449: PPUSH
// if not driver or not IsInUnit ( driver ) then
42450: LD_VAR 0 1
42454: NOT
42455: PUSH
42456: LD_VAR 0 1
42460: PPUSH
42461: CALL_OW 310
42465: NOT
42466: OR
42467: IFFALSE 42471
// exit ;
42469: GO 42561
// vehicle := IsInUnit ( driver ) ;
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_VAR 0 1
42480: PPUSH
42481: CALL_OW 310
42485: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42486: LD_VAR 0 1
42490: PPUSH
42491: LD_STRING \
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: PUSH
42521: LD_STRING E
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_VAR 0 3
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PPUSH
42557: CALL_OW 446
// end ;
42561: LD_VAR 0 2
42565: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42566: LD_INT 0
42568: PPUSH
42569: PPUSH
// if not driver or not IsInUnit ( driver ) then
42570: LD_VAR 0 1
42574: NOT
42575: PUSH
42576: LD_VAR 0 1
42580: PPUSH
42581: CALL_OW 310
42585: NOT
42586: OR
42587: IFFALSE 42591
// exit ;
42589: GO 42681
// vehicle := IsInUnit ( driver ) ;
42591: LD_ADDR_VAR 0 3
42595: PUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 310
42605: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42606: LD_VAR 0 1
42610: PPUSH
42611: LD_STRING \
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: PUSH
42641: LD_STRING E
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_VAR 0 3
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 447
// end ;
42681: LD_VAR 0 2
42685: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42686: LD_INT 0
42688: PPUSH
42689: PPUSH
42690: PPUSH
// tmp := [ ] ;
42691: LD_ADDR_VAR 0 5
42695: PUSH
42696: EMPTY
42697: ST_TO_ADDR
// for i in units do
42698: LD_ADDR_VAR 0 4
42702: PUSH
42703: LD_VAR 0 1
42707: PUSH
42708: FOR_IN
42709: IFFALSE 42747
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42711: LD_ADDR_VAR 0 5
42715: PUSH
42716: LD_VAR 0 5
42720: PPUSH
42721: LD_VAR 0 5
42725: PUSH
42726: LD_INT 1
42728: PLUS
42729: PPUSH
42730: LD_VAR 0 4
42734: PPUSH
42735: CALL_OW 256
42739: PPUSH
42740: CALL_OW 2
42744: ST_TO_ADDR
42745: GO 42708
42747: POP
42748: POP
// if not tmp then
42749: LD_VAR 0 5
42753: NOT
42754: IFFALSE 42758
// exit ;
42756: GO 42806
// if asc then
42758: LD_VAR 0 2
42762: IFFALSE 42786
// result := SortListByListAsc ( units , tmp ) else
42764: LD_ADDR_VAR 0 3
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: LD_VAR 0 5
42778: PPUSH
42779: CALL_OW 76
42783: ST_TO_ADDR
42784: GO 42806
// result := SortListByListDesc ( units , tmp ) ;
42786: LD_ADDR_VAR 0 3
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: LD_VAR 0 5
42800: PPUSH
42801: CALL_OW 77
42805: ST_TO_ADDR
// end ;
42806: LD_VAR 0 3
42810: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42811: LD_INT 0
42813: PPUSH
42814: PPUSH
// task := GetTaskList ( mech ) ;
42815: LD_ADDR_VAR 0 4
42819: PUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: CALL_OW 437
42829: ST_TO_ADDR
// if not task then
42830: LD_VAR 0 4
42834: NOT
42835: IFFALSE 42839
// exit ;
42837: GO 42881
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42839: LD_ADDR_VAR 0 3
42843: PUSH
42844: LD_VAR 0 4
42848: PUSH
42849: LD_INT 1
42851: ARRAY
42852: PUSH
42853: LD_INT 1
42855: ARRAY
42856: PUSH
42857: LD_STRING r
42859: EQUAL
42860: PUSH
42861: LD_VAR 0 4
42865: PUSH
42866: LD_INT 1
42868: ARRAY
42869: PUSH
42870: LD_INT 4
42872: ARRAY
42873: PUSH
42874: LD_VAR 0 2
42878: EQUAL
42879: AND
42880: ST_TO_ADDR
// end ;
42881: LD_VAR 0 3
42885: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42886: LD_INT 0
42888: PPUSH
// SetDir ( unit , d ) ;
42889: LD_VAR 0 1
42893: PPUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42903: LD_VAR 0 1
42907: PPUSH
42908: LD_VAR 0 2
42912: PPUSH
42913: LD_VAR 0 3
42917: PPUSH
42918: LD_VAR 0 5
42922: PPUSH
42923: CALL_OW 48
// end ;
42927: LD_VAR 0 6
42931: RET
// export function ToNaturalNumber ( number ) ; begin
42932: LD_INT 0
42934: PPUSH
// result := number div 1 ;
42935: LD_ADDR_VAR 0 2
42939: PUSH
42940: LD_VAR 0 1
42944: PUSH
42945: LD_INT 1
42947: DIV
42948: ST_TO_ADDR
// if number < 0 then
42949: LD_VAR 0 1
42953: PUSH
42954: LD_INT 0
42956: LESS
42957: IFFALSE 42967
// result := 0 ;
42959: LD_ADDR_VAR 0 2
42963: PUSH
42964: LD_INT 0
42966: ST_TO_ADDR
// end ;
42967: LD_VAR 0 2
42971: RET
// export function SortByClass ( units , class ) ; var un ; begin
42972: LD_INT 0
42974: PPUSH
42975: PPUSH
// if not units or not class then
42976: LD_VAR 0 1
42980: NOT
42981: PUSH
42982: LD_VAR 0 2
42986: NOT
42987: OR
42988: IFFALSE 42992
// exit ;
42990: GO 43087
// result := [ ] ;
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: EMPTY
42998: ST_TO_ADDR
// for un in units do
42999: LD_ADDR_VAR 0 4
43003: PUSH
43004: LD_VAR 0 1
43008: PUSH
43009: FOR_IN
43010: IFFALSE 43085
// if GetClass ( un ) = class then
43012: LD_VAR 0 4
43016: PPUSH
43017: CALL_OW 257
43021: PUSH
43022: LD_VAR 0 2
43026: EQUAL
43027: IFFALSE 43054
// result := Insert ( result , 1 , un ) else
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_VAR 0 3
43038: PPUSH
43039: LD_INT 1
43041: PPUSH
43042: LD_VAR 0 4
43046: PPUSH
43047: CALL_OW 2
43051: ST_TO_ADDR
43052: GO 43083
// result := Replace ( result , result + 1 , un ) ;
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_VAR 0 3
43063: PPUSH
43064: LD_VAR 0 3
43068: PUSH
43069: LD_INT 1
43071: PLUS
43072: PPUSH
43073: LD_VAR 0 4
43077: PPUSH
43078: CALL_OW 1
43082: ST_TO_ADDR
43083: GO 43009
43085: POP
43086: POP
// end ;
43087: LD_VAR 0 3
43091: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43092: LD_INT 0
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
// result := [ ] ;
43101: LD_ADDR_VAR 0 4
43105: PUSH
43106: EMPTY
43107: ST_TO_ADDR
// if x - r < 0 then
43108: LD_VAR 0 1
43112: PUSH
43113: LD_VAR 0 3
43117: MINUS
43118: PUSH
43119: LD_INT 0
43121: LESS
43122: IFFALSE 43134
// min_x := 0 else
43124: LD_ADDR_VAR 0 8
43128: PUSH
43129: LD_INT 0
43131: ST_TO_ADDR
43132: GO 43150
// min_x := x - r ;
43134: LD_ADDR_VAR 0 8
43138: PUSH
43139: LD_VAR 0 1
43143: PUSH
43144: LD_VAR 0 3
43148: MINUS
43149: ST_TO_ADDR
// if y - r < 0 then
43150: LD_VAR 0 2
43154: PUSH
43155: LD_VAR 0 3
43159: MINUS
43160: PUSH
43161: LD_INT 0
43163: LESS
43164: IFFALSE 43176
// min_y := 0 else
43166: LD_ADDR_VAR 0 7
43170: PUSH
43171: LD_INT 0
43173: ST_TO_ADDR
43174: GO 43192
// min_y := y - r ;
43176: LD_ADDR_VAR 0 7
43180: PUSH
43181: LD_VAR 0 2
43185: PUSH
43186: LD_VAR 0 3
43190: MINUS
43191: ST_TO_ADDR
// max_x := x + r ;
43192: LD_ADDR_VAR 0 9
43196: PUSH
43197: LD_VAR 0 1
43201: PUSH
43202: LD_VAR 0 3
43206: PLUS
43207: ST_TO_ADDR
// max_y := y + r ;
43208: LD_ADDR_VAR 0 10
43212: PUSH
43213: LD_VAR 0 2
43217: PUSH
43218: LD_VAR 0 3
43222: PLUS
43223: ST_TO_ADDR
// for _x = min_x to max_x do
43224: LD_ADDR_VAR 0 5
43228: PUSH
43229: DOUBLE
43230: LD_VAR 0 8
43234: DEC
43235: ST_TO_ADDR
43236: LD_VAR 0 9
43240: PUSH
43241: FOR_TO
43242: IFFALSE 43343
// for _y = min_y to max_y do
43244: LD_ADDR_VAR 0 6
43248: PUSH
43249: DOUBLE
43250: LD_VAR 0 7
43254: DEC
43255: ST_TO_ADDR
43256: LD_VAR 0 10
43260: PUSH
43261: FOR_TO
43262: IFFALSE 43339
// begin if not ValidHex ( _x , _y ) then
43264: LD_VAR 0 5
43268: PPUSH
43269: LD_VAR 0 6
43273: PPUSH
43274: CALL_OW 488
43278: NOT
43279: IFFALSE 43283
// continue ;
43281: GO 43261
// if GetResourceTypeXY ( _x , _y ) then
43283: LD_VAR 0 5
43287: PPUSH
43288: LD_VAR 0 6
43292: PPUSH
43293: CALL_OW 283
43297: IFFALSE 43337
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43299: LD_ADDR_VAR 0 4
43303: PUSH
43304: LD_VAR 0 4
43308: PPUSH
43309: LD_VAR 0 4
43313: PUSH
43314: LD_INT 1
43316: PLUS
43317: PPUSH
43318: LD_VAR 0 5
43322: PUSH
43323: LD_VAR 0 6
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PPUSH
43332: CALL_OW 1
43336: ST_TO_ADDR
// end ;
43337: GO 43261
43339: POP
43340: POP
43341: GO 43241
43343: POP
43344: POP
// end ;
43345: LD_VAR 0 4
43349: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43350: LD_INT 0
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
// if not units then
43360: LD_VAR 0 1
43364: NOT
43365: IFFALSE 43369
// exit ;
43367: GO 43893
// result := UnitFilter ( units , [ f_ok ] ) ;
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_VAR 0 1
43378: PPUSH
43379: LD_INT 50
43381: PUSH
43382: EMPTY
43383: LIST
43384: PPUSH
43385: CALL_OW 72
43389: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43390: LD_ADDR_VAR 0 8
43394: PUSH
43395: LD_VAR 0 1
43399: PUSH
43400: LD_INT 1
43402: ARRAY
43403: PPUSH
43404: CALL_OW 255
43408: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43409: LD_ADDR_VAR 0 10
43413: PUSH
43414: LD_INT 29
43416: PUSH
43417: LD_INT 91
43419: PUSH
43420: LD_INT 49
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
// if not result then
43428: LD_VAR 0 3
43432: NOT
43433: IFFALSE 43437
// exit ;
43435: GO 43893
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43437: LD_ADDR_VAR 0 5
43441: PUSH
43442: LD_INT 81
43444: PUSH
43445: LD_VAR 0 8
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PPUSH
43454: CALL_OW 69
43458: ST_TO_ADDR
// for i in result do
43459: LD_ADDR_VAR 0 4
43463: PUSH
43464: LD_VAR 0 3
43468: PUSH
43469: FOR_IN
43470: IFFALSE 43891
// begin tag := GetTag ( i ) + 1 ;
43472: LD_ADDR_VAR 0 9
43476: PUSH
43477: LD_VAR 0 4
43481: PPUSH
43482: CALL_OW 110
43486: PUSH
43487: LD_INT 1
43489: PLUS
43490: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43491: LD_ADDR_VAR 0 7
43495: PUSH
43496: LD_VAR 0 4
43500: PPUSH
43501: CALL_OW 250
43505: PPUSH
43506: LD_VAR 0 4
43510: PPUSH
43511: CALL_OW 251
43515: PPUSH
43516: LD_INT 6
43518: PPUSH
43519: CALL 43092 0 3
43523: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43524: LD_VAR 0 4
43528: PPUSH
43529: CALL_OW 247
43533: PUSH
43534: LD_INT 2
43536: EQUAL
43537: PUSH
43538: LD_VAR 0 7
43542: AND
43543: PUSH
43544: LD_VAR 0 4
43548: PPUSH
43549: CALL_OW 264
43553: PUSH
43554: LD_VAR 0 10
43558: IN
43559: NOT
43560: AND
43561: IFFALSE 43600
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43563: LD_VAR 0 4
43567: PPUSH
43568: LD_VAR 0 7
43572: PUSH
43573: LD_INT 1
43575: ARRAY
43576: PUSH
43577: LD_INT 1
43579: ARRAY
43580: PPUSH
43581: LD_VAR 0 7
43585: PUSH
43586: LD_INT 1
43588: ARRAY
43589: PUSH
43590: LD_INT 2
43592: ARRAY
43593: PPUSH
43594: CALL_OW 116
43598: GO 43889
// if path > tag then
43600: LD_VAR 0 2
43604: PUSH
43605: LD_VAR 0 9
43609: GREATER
43610: IFFALSE 43818
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43612: LD_ADDR_VAR 0 6
43616: PUSH
43617: LD_VAR 0 5
43621: PPUSH
43622: LD_INT 91
43624: PUSH
43625: LD_VAR 0 4
43629: PUSH
43630: LD_INT 8
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: PPUSH
43638: CALL_OW 72
43642: ST_TO_ADDR
// if nearEnemy then
43643: LD_VAR 0 6
43647: IFFALSE 43716
// begin if GetWeapon ( i ) = ru_time_lapser then
43649: LD_VAR 0 4
43653: PPUSH
43654: CALL_OW 264
43658: PUSH
43659: LD_INT 49
43661: EQUAL
43662: IFFALSE 43690
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43664: LD_VAR 0 4
43668: PPUSH
43669: LD_VAR 0 6
43673: PPUSH
43674: LD_VAR 0 4
43678: PPUSH
43679: CALL_OW 74
43683: PPUSH
43684: CALL_OW 112
43688: GO 43714
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43690: LD_VAR 0 4
43694: PPUSH
43695: LD_VAR 0 6
43699: PPUSH
43700: LD_VAR 0 4
43704: PPUSH
43705: CALL_OW 74
43709: PPUSH
43710: CALL_OW 115
// end else
43714: GO 43816
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43716: LD_VAR 0 4
43720: PPUSH
43721: LD_VAR 0 2
43725: PUSH
43726: LD_VAR 0 9
43730: ARRAY
43731: PUSH
43732: LD_INT 1
43734: ARRAY
43735: PPUSH
43736: LD_VAR 0 2
43740: PUSH
43741: LD_VAR 0 9
43745: ARRAY
43746: PUSH
43747: LD_INT 2
43749: ARRAY
43750: PPUSH
43751: CALL_OW 297
43755: PUSH
43756: LD_INT 6
43758: GREATER
43759: IFFALSE 43802
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43761: LD_VAR 0 4
43765: PPUSH
43766: LD_VAR 0 2
43770: PUSH
43771: LD_VAR 0 9
43775: ARRAY
43776: PUSH
43777: LD_INT 1
43779: ARRAY
43780: PPUSH
43781: LD_VAR 0 2
43785: PUSH
43786: LD_VAR 0 9
43790: ARRAY
43791: PUSH
43792: LD_INT 2
43794: ARRAY
43795: PPUSH
43796: CALL_OW 114
43800: GO 43816
// SetTag ( i , tag ) ;
43802: LD_VAR 0 4
43806: PPUSH
43807: LD_VAR 0 9
43811: PPUSH
43812: CALL_OW 109
// end else
43816: GO 43889
// if enemy then
43818: LD_VAR 0 5
43822: IFFALSE 43889
// begin if GetWeapon ( i ) = ru_time_lapser then
43824: LD_VAR 0 4
43828: PPUSH
43829: CALL_OW 264
43833: PUSH
43834: LD_INT 49
43836: EQUAL
43837: IFFALSE 43865
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43839: LD_VAR 0 4
43843: PPUSH
43844: LD_VAR 0 5
43848: PPUSH
43849: LD_VAR 0 4
43853: PPUSH
43854: CALL_OW 74
43858: PPUSH
43859: CALL_OW 112
43863: GO 43889
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43865: LD_VAR 0 4
43869: PPUSH
43870: LD_VAR 0 5
43874: PPUSH
43875: LD_VAR 0 4
43879: PPUSH
43880: CALL_OW 74
43884: PPUSH
43885: CALL_OW 115
// end ; end ;
43889: GO 43469
43891: POP
43892: POP
// end ;
43893: LD_VAR 0 3
43897: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43898: LD_INT 0
43900: PPUSH
43901: PPUSH
43902: PPUSH
// if not unit or IsInUnit ( unit ) then
43903: LD_VAR 0 1
43907: NOT
43908: PUSH
43909: LD_VAR 0 1
43913: PPUSH
43914: CALL_OW 310
43918: OR
43919: IFFALSE 43923
// exit ;
43921: GO 44014
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43923: LD_ADDR_VAR 0 4
43927: PUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 250
43937: PPUSH
43938: LD_VAR 0 2
43942: PPUSH
43943: LD_INT 1
43945: PPUSH
43946: CALL_OW 272
43950: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43951: LD_ADDR_VAR 0 5
43955: PUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: CALL_OW 251
43965: PPUSH
43966: LD_VAR 0 2
43970: PPUSH
43971: LD_INT 1
43973: PPUSH
43974: CALL_OW 273
43978: ST_TO_ADDR
// if ValidHex ( x , y ) then
43979: LD_VAR 0 4
43983: PPUSH
43984: LD_VAR 0 5
43988: PPUSH
43989: CALL_OW 488
43993: IFFALSE 44014
// ComTurnXY ( unit , x , y ) ;
43995: LD_VAR 0 1
43999: PPUSH
44000: LD_VAR 0 4
44004: PPUSH
44005: LD_VAR 0 5
44009: PPUSH
44010: CALL_OW 118
// end ;
44014: LD_VAR 0 3
44018: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44019: LD_INT 0
44021: PPUSH
44022: PPUSH
// result := false ;
44023: LD_ADDR_VAR 0 3
44027: PUSH
44028: LD_INT 0
44030: ST_TO_ADDR
// if not units then
44031: LD_VAR 0 2
44035: NOT
44036: IFFALSE 44040
// exit ;
44038: GO 44085
// for i in units do
44040: LD_ADDR_VAR 0 4
44044: PUSH
44045: LD_VAR 0 2
44049: PUSH
44050: FOR_IN
44051: IFFALSE 44083
// if See ( side , i ) then
44053: LD_VAR 0 1
44057: PPUSH
44058: LD_VAR 0 4
44062: PPUSH
44063: CALL_OW 292
44067: IFFALSE 44081
// begin result := true ;
44069: LD_ADDR_VAR 0 3
44073: PUSH
44074: LD_INT 1
44076: ST_TO_ADDR
// exit ;
44077: POP
44078: POP
44079: GO 44085
// end ;
44081: GO 44050
44083: POP
44084: POP
// end ;
44085: LD_VAR 0 3
44089: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44090: LD_INT 0
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
// if not unit or not points then
44096: LD_VAR 0 1
44100: NOT
44101: PUSH
44102: LD_VAR 0 2
44106: NOT
44107: OR
44108: IFFALSE 44112
// exit ;
44110: GO 44202
// dist := 99999 ;
44112: LD_ADDR_VAR 0 5
44116: PUSH
44117: LD_INT 99999
44119: ST_TO_ADDR
// for i in points do
44120: LD_ADDR_VAR 0 4
44124: PUSH
44125: LD_VAR 0 2
44129: PUSH
44130: FOR_IN
44131: IFFALSE 44200
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44133: LD_ADDR_VAR 0 6
44137: PUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: LD_VAR 0 4
44147: PUSH
44148: LD_INT 1
44150: ARRAY
44151: PPUSH
44152: LD_VAR 0 4
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: PPUSH
44161: CALL_OW 297
44165: ST_TO_ADDR
// if tmpDist < dist then
44166: LD_VAR 0 6
44170: PUSH
44171: LD_VAR 0 5
44175: LESS
44176: IFFALSE 44198
// begin result := i ;
44178: LD_ADDR_VAR 0 3
44182: PUSH
44183: LD_VAR 0 4
44187: ST_TO_ADDR
// dist := tmpDist ;
44188: LD_ADDR_VAR 0 5
44192: PUSH
44193: LD_VAR 0 6
44197: ST_TO_ADDR
// end ; end ;
44198: GO 44130
44200: POP
44201: POP
// end ;
44202: LD_VAR 0 3
44206: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44207: LD_INT 0
44209: PPUSH
// uc_side := side ;
44210: LD_ADDR_OWVAR 20
44214: PUSH
44215: LD_VAR 0 1
44219: ST_TO_ADDR
// uc_nation := 3 ;
44220: LD_ADDR_OWVAR 21
44224: PUSH
44225: LD_INT 3
44227: ST_TO_ADDR
// vc_chassis := 25 ;
44228: LD_ADDR_OWVAR 37
44232: PUSH
44233: LD_INT 25
44235: ST_TO_ADDR
// vc_engine := engine_siberite ;
44236: LD_ADDR_OWVAR 39
44240: PUSH
44241: LD_INT 3
44243: ST_TO_ADDR
// vc_control := control_computer ;
44244: LD_ADDR_OWVAR 38
44248: PUSH
44249: LD_INT 3
44251: ST_TO_ADDR
// vc_weapon := 59 ;
44252: LD_ADDR_OWVAR 40
44256: PUSH
44257: LD_INT 59
44259: ST_TO_ADDR
// result := CreateVehicle ;
44260: LD_ADDR_VAR 0 5
44264: PUSH
44265: CALL_OW 45
44269: ST_TO_ADDR
// SetDir ( result , d ) ;
44270: LD_VAR 0 5
44274: PPUSH
44275: LD_VAR 0 4
44279: PPUSH
44280: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44284: LD_VAR 0 5
44288: PPUSH
44289: LD_VAR 0 2
44293: PPUSH
44294: LD_VAR 0 3
44298: PPUSH
44299: LD_INT 0
44301: PPUSH
44302: CALL_OW 48
// end ;
44306: LD_VAR 0 5
44310: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44311: LD_INT 0
44313: PPUSH
44314: PPUSH
44315: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44316: LD_ADDR_VAR 0 2
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44339: LD_VAR 0 1
44343: NOT
44344: PUSH
44345: LD_VAR 0 1
44349: PPUSH
44350: CALL_OW 264
44354: PUSH
44355: LD_INT 12
44357: PUSH
44358: LD_INT 51
44360: PUSH
44361: LD_INT 32
44363: PUSH
44364: LD_INT 89
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: IN
44373: NOT
44374: OR
44375: IFFALSE 44379
// exit ;
44377: GO 44477
// for i := 1 to 3 do
44379: LD_ADDR_VAR 0 3
44383: PUSH
44384: DOUBLE
44385: LD_INT 1
44387: DEC
44388: ST_TO_ADDR
44389: LD_INT 3
44391: PUSH
44392: FOR_TO
44393: IFFALSE 44475
// begin tmp := GetCargo ( cargo , i ) ;
44395: LD_ADDR_VAR 0 4
44399: PUSH
44400: LD_VAR 0 1
44404: PPUSH
44405: LD_VAR 0 3
44409: PPUSH
44410: CALL_OW 289
44414: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44415: LD_ADDR_VAR 0 2
44419: PUSH
44420: LD_VAR 0 2
44424: PPUSH
44425: LD_VAR 0 3
44429: PPUSH
44430: LD_VAR 0 4
44434: PPUSH
44435: CALL_OW 1
44439: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44440: LD_ADDR_VAR 0 2
44444: PUSH
44445: LD_VAR 0 2
44449: PPUSH
44450: LD_INT 4
44452: PPUSH
44453: LD_VAR 0 2
44457: PUSH
44458: LD_INT 4
44460: ARRAY
44461: PUSH
44462: LD_VAR 0 4
44466: PLUS
44467: PPUSH
44468: CALL_OW 1
44472: ST_TO_ADDR
// end ;
44473: GO 44392
44475: POP
44476: POP
// end ;
44477: LD_VAR 0 2
44481: RET
// export function Length ( array ) ; begin
44482: LD_INT 0
44484: PPUSH
// result := array + 0 ;
44485: LD_ADDR_VAR 0 2
44489: PUSH
44490: LD_VAR 0 1
44494: PUSH
44495: LD_INT 0
44497: PLUS
44498: ST_TO_ADDR
// end ;
44499: LD_VAR 0 2
44503: RET
// export function PrepareArray ( array ) ; begin
44504: LD_INT 0
44506: PPUSH
// result := array diff 0 ;
44507: LD_ADDR_VAR 0 2
44511: PUSH
44512: LD_VAR 0 1
44516: PUSH
44517: LD_INT 0
44519: DIFF
44520: ST_TO_ADDR
// if not result [ 1 ] then
44521: LD_VAR 0 2
44525: PUSH
44526: LD_INT 1
44528: ARRAY
44529: NOT
44530: IFFALSE 44550
// result := Delete ( result , 1 ) ;
44532: LD_ADDR_VAR 0 2
44536: PUSH
44537: LD_VAR 0 2
44541: PPUSH
44542: LD_INT 1
44544: PPUSH
44545: CALL_OW 3
44549: ST_TO_ADDR
// end ;
44550: LD_VAR 0 2
44554: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44555: LD_INT 0
44557: PPUSH
44558: PPUSH
44559: PPUSH
44560: PPUSH
// sibRocketRange := 25 ;
44561: LD_ADDR_VAR 0 6
44565: PUSH
44566: LD_INT 25
44568: ST_TO_ADDR
// result := false ;
44569: LD_ADDR_VAR 0 4
44573: PUSH
44574: LD_INT 0
44576: ST_TO_ADDR
// for i := 0 to 5 do
44577: LD_ADDR_VAR 0 5
44581: PUSH
44582: DOUBLE
44583: LD_INT 0
44585: DEC
44586: ST_TO_ADDR
44587: LD_INT 5
44589: PUSH
44590: FOR_TO
44591: IFFALSE 44658
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44593: LD_VAR 0 1
44597: PPUSH
44598: LD_VAR 0 5
44602: PPUSH
44603: LD_VAR 0 6
44607: PPUSH
44608: CALL_OW 272
44612: PPUSH
44613: LD_VAR 0 2
44617: PPUSH
44618: LD_VAR 0 5
44622: PPUSH
44623: LD_VAR 0 6
44627: PPUSH
44628: CALL_OW 273
44632: PPUSH
44633: LD_VAR 0 3
44637: PPUSH
44638: CALL_OW 309
44642: IFFALSE 44656
// begin result := true ;
44644: LD_ADDR_VAR 0 4
44648: PUSH
44649: LD_INT 1
44651: ST_TO_ADDR
// exit ;
44652: POP
44653: POP
44654: GO 44660
// end ;
44656: GO 44590
44658: POP
44659: POP
// end ;
44660: LD_VAR 0 4
44664: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44665: LD_INT 0
44667: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44668: LD_VAR 0 1
44672: PPUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: LD_INT 0
44680: PPUSH
44681: LD_INT 0
44683: PPUSH
44684: LD_INT 1
44686: PPUSH
44687: LD_INT 0
44689: PPUSH
44690: CALL_OW 587
// end ; end_of_file end_of_file
44694: LD_VAR 0 3
44698: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44699: LD_VAR 0 1
44703: PPUSH
44704: LD_VAR 0 2
44708: PPUSH
44709: LD_VAR 0 3
44713: PPUSH
44714: LD_VAR 0 4
44718: PPUSH
44719: LD_VAR 0 5
44723: PPUSH
44724: LD_VAR 0 6
44728: PPUSH
44729: CALL 44913 0 6
// end ;
44733: PPOPN 6
44735: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44736: LD_INT 0
44738: PPUSH
// begin if not units then
44739: LD_VAR 0 1
44743: NOT
44744: IFFALSE 44748
// exit ;
44746: GO 44748
// end ;
44748: PPOPN 7
44750: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44751: CALL 44817 0 0
// end ; end_of_file
44755: PPOPN 1
44757: END
// export globalGameSaveCounter ; every 0 0$1 do
44758: GO 44760
44760: DISABLE
// begin enable ;
44761: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44762: LD_STRING updateTimer(
44764: PUSH
44765: LD_OWVAR 1
44769: STR
44770: PUSH
44771: LD_STRING );
44773: STR
44774: PPUSH
44775: CALL_OW 559
// end ;
44779: END
// every 0 0$1 do
44780: GO 44782
44782: DISABLE
// begin globalGameSaveCounter := 0 ;
44783: LD_ADDR_EXP 27
44787: PUSH
44788: LD_INT 0
44790: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
44791: LD_STRING setGameSaveCounter(0)
44793: PPUSH
44794: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
44798: LD_STRING initStreamRollete();
44800: PPUSH
44801: CALL_OW 559
// InitStreamMode ;
44805: CALL 46131 0 0
// DefineStreamItems ( false ) ;
44809: LD_INT 0
44811: PPUSH
44812: CALL 46595 0 1
// end ;
44816: END
// export function SOS_MapStart ( ) ; begin
44817: LD_INT 0
44819: PPUSH
// if streamModeActive then
44820: LD_EXP 28
44824: IFFALSE 44833
// DefineStreamItems ( true ) ;
44826: LD_INT 1
44828: PPUSH
44829: CALL 46595 0 1
// UpdateLuaVariables ( ) ;
44833: CALL 44850 0 0
// UpdateFactoryWaypoints ( ) ;
44837: CALL 59456 0 0
// UpdateWarehouseGatheringPoints ( ) ;
44841: CALL 59713 0 0
// end ;
44845: LD_VAR 0 1
44849: RET
// function UpdateLuaVariables ( ) ; begin
44850: LD_INT 0
44852: PPUSH
// if globalGameSaveCounter then
44853: LD_EXP 27
44857: IFFALSE 44891
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
44859: LD_ADDR_EXP 27
44863: PUSH
44864: LD_EXP 27
44868: PPUSH
44869: CALL 42107 0 1
44873: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
44874: LD_STRING setGameSaveCounter(
44876: PUSH
44877: LD_EXP 27
44881: STR
44882: PUSH
44883: LD_STRING )
44885: STR
44886: PPUSH
44887: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
44891: LD_STRING setGameDifficulty(
44893: PUSH
44894: LD_OWVAR 67
44898: STR
44899: PUSH
44900: LD_STRING )
44902: STR
44903: PPUSH
44904: CALL_OW 559
// end ;
44908: LD_VAR 0 1
44912: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44913: LD_INT 0
44915: PPUSH
// if p2 = stream_mode then
44916: LD_VAR 0 2
44920: PUSH
44921: LD_INT 100
44923: EQUAL
44924: IFFALSE 45927
// begin if not StreamModeActive then
44926: LD_EXP 28
44930: NOT
44931: IFFALSE 44941
// StreamModeActive := true ;
44933: LD_ADDR_EXP 28
44937: PUSH
44938: LD_INT 1
44940: ST_TO_ADDR
// if p3 = 0 then
44941: LD_VAR 0 3
44945: PUSH
44946: LD_INT 0
44948: EQUAL
44949: IFFALSE 44955
// InitStreamMode ;
44951: CALL 46131 0 0
// if p3 = 1 then
44955: LD_VAR 0 3
44959: PUSH
44960: LD_INT 1
44962: EQUAL
44963: IFFALSE 44973
// sRocket := true ;
44965: LD_ADDR_EXP 33
44969: PUSH
44970: LD_INT 1
44972: ST_TO_ADDR
// if p3 = 2 then
44973: LD_VAR 0 3
44977: PUSH
44978: LD_INT 2
44980: EQUAL
44981: IFFALSE 44991
// sSpeed := true ;
44983: LD_ADDR_EXP 32
44987: PUSH
44988: LD_INT 1
44990: ST_TO_ADDR
// if p3 = 3 then
44991: LD_VAR 0 3
44995: PUSH
44996: LD_INT 3
44998: EQUAL
44999: IFFALSE 45009
// sEngine := true ;
45001: LD_ADDR_EXP 34
45005: PUSH
45006: LD_INT 1
45008: ST_TO_ADDR
// if p3 = 4 then
45009: LD_VAR 0 3
45013: PUSH
45014: LD_INT 4
45016: EQUAL
45017: IFFALSE 45027
// sSpec := true ;
45019: LD_ADDR_EXP 31
45023: PUSH
45024: LD_INT 1
45026: ST_TO_ADDR
// if p3 = 5 then
45027: LD_VAR 0 3
45031: PUSH
45032: LD_INT 5
45034: EQUAL
45035: IFFALSE 45045
// sLevel := true ;
45037: LD_ADDR_EXP 35
45041: PUSH
45042: LD_INT 1
45044: ST_TO_ADDR
// if p3 = 6 then
45045: LD_VAR 0 3
45049: PUSH
45050: LD_INT 6
45052: EQUAL
45053: IFFALSE 45063
// sArmoury := true ;
45055: LD_ADDR_EXP 36
45059: PUSH
45060: LD_INT 1
45062: ST_TO_ADDR
// if p3 = 7 then
45063: LD_VAR 0 3
45067: PUSH
45068: LD_INT 7
45070: EQUAL
45071: IFFALSE 45081
// sRadar := true ;
45073: LD_ADDR_EXP 37
45077: PUSH
45078: LD_INT 1
45080: ST_TO_ADDR
// if p3 = 8 then
45081: LD_VAR 0 3
45085: PUSH
45086: LD_INT 8
45088: EQUAL
45089: IFFALSE 45099
// sBunker := true ;
45091: LD_ADDR_EXP 38
45095: PUSH
45096: LD_INT 1
45098: ST_TO_ADDR
// if p3 = 9 then
45099: LD_VAR 0 3
45103: PUSH
45104: LD_INT 9
45106: EQUAL
45107: IFFALSE 45117
// sHack := true ;
45109: LD_ADDR_EXP 39
45113: PUSH
45114: LD_INT 1
45116: ST_TO_ADDR
// if p3 = 10 then
45117: LD_VAR 0 3
45121: PUSH
45122: LD_INT 10
45124: EQUAL
45125: IFFALSE 45135
// sFire := true ;
45127: LD_ADDR_EXP 40
45131: PUSH
45132: LD_INT 1
45134: ST_TO_ADDR
// if p3 = 11 then
45135: LD_VAR 0 3
45139: PUSH
45140: LD_INT 11
45142: EQUAL
45143: IFFALSE 45153
// sRefresh := true ;
45145: LD_ADDR_EXP 41
45149: PUSH
45150: LD_INT 1
45152: ST_TO_ADDR
// if p3 = 12 then
45153: LD_VAR 0 3
45157: PUSH
45158: LD_INT 12
45160: EQUAL
45161: IFFALSE 45171
// sExp := true ;
45163: LD_ADDR_EXP 42
45167: PUSH
45168: LD_INT 1
45170: ST_TO_ADDR
// if p3 = 13 then
45171: LD_VAR 0 3
45175: PUSH
45176: LD_INT 13
45178: EQUAL
45179: IFFALSE 45189
// sDepot := true ;
45181: LD_ADDR_EXP 43
45185: PUSH
45186: LD_INT 1
45188: ST_TO_ADDR
// if p3 = 14 then
45189: LD_VAR 0 3
45193: PUSH
45194: LD_INT 14
45196: EQUAL
45197: IFFALSE 45207
// sFlag := true ;
45199: LD_ADDR_EXP 44
45203: PUSH
45204: LD_INT 1
45206: ST_TO_ADDR
// if p3 = 15 then
45207: LD_VAR 0 3
45211: PUSH
45212: LD_INT 15
45214: EQUAL
45215: IFFALSE 45225
// sKamikadze := true ;
45217: LD_ADDR_EXP 52
45221: PUSH
45222: LD_INT 1
45224: ST_TO_ADDR
// if p3 = 16 then
45225: LD_VAR 0 3
45229: PUSH
45230: LD_INT 16
45232: EQUAL
45233: IFFALSE 45243
// sTroll := true ;
45235: LD_ADDR_EXP 53
45239: PUSH
45240: LD_INT 1
45242: ST_TO_ADDR
// if p3 = 17 then
45243: LD_VAR 0 3
45247: PUSH
45248: LD_INT 17
45250: EQUAL
45251: IFFALSE 45261
// sSlow := true ;
45253: LD_ADDR_EXP 54
45257: PUSH
45258: LD_INT 1
45260: ST_TO_ADDR
// if p3 = 18 then
45261: LD_VAR 0 3
45265: PUSH
45266: LD_INT 18
45268: EQUAL
45269: IFFALSE 45279
// sLack := true ;
45271: LD_ADDR_EXP 55
45275: PUSH
45276: LD_INT 1
45278: ST_TO_ADDR
// if p3 = 19 then
45279: LD_VAR 0 3
45283: PUSH
45284: LD_INT 19
45286: EQUAL
45287: IFFALSE 45297
// sTank := true ;
45289: LD_ADDR_EXP 57
45293: PUSH
45294: LD_INT 1
45296: ST_TO_ADDR
// if p3 = 20 then
45297: LD_VAR 0 3
45301: PUSH
45302: LD_INT 20
45304: EQUAL
45305: IFFALSE 45315
// sRemote := true ;
45307: LD_ADDR_EXP 58
45311: PUSH
45312: LD_INT 1
45314: ST_TO_ADDR
// if p3 = 21 then
45315: LD_VAR 0 3
45319: PUSH
45320: LD_INT 21
45322: EQUAL
45323: IFFALSE 45333
// sPowell := true ;
45325: LD_ADDR_EXP 59
45329: PUSH
45330: LD_INT 1
45332: ST_TO_ADDR
// if p3 = 22 then
45333: LD_VAR 0 3
45337: PUSH
45338: LD_INT 22
45340: EQUAL
45341: IFFALSE 45351
// sTeleport := true ;
45343: LD_ADDR_EXP 62
45347: PUSH
45348: LD_INT 1
45350: ST_TO_ADDR
// if p3 = 23 then
45351: LD_VAR 0 3
45355: PUSH
45356: LD_INT 23
45358: EQUAL
45359: IFFALSE 45369
// sOilTower := true ;
45361: LD_ADDR_EXP 64
45365: PUSH
45366: LD_INT 1
45368: ST_TO_ADDR
// if p3 = 24 then
45369: LD_VAR 0 3
45373: PUSH
45374: LD_INT 24
45376: EQUAL
45377: IFFALSE 45387
// sShovel := true ;
45379: LD_ADDR_EXP 65
45383: PUSH
45384: LD_INT 1
45386: ST_TO_ADDR
// if p3 = 25 then
45387: LD_VAR 0 3
45391: PUSH
45392: LD_INT 25
45394: EQUAL
45395: IFFALSE 45405
// sSheik := true ;
45397: LD_ADDR_EXP 66
45401: PUSH
45402: LD_INT 1
45404: ST_TO_ADDR
// if p3 = 26 then
45405: LD_VAR 0 3
45409: PUSH
45410: LD_INT 26
45412: EQUAL
45413: IFFALSE 45423
// sEarthquake := true ;
45415: LD_ADDR_EXP 68
45419: PUSH
45420: LD_INT 1
45422: ST_TO_ADDR
// if p3 = 27 then
45423: LD_VAR 0 3
45427: PUSH
45428: LD_INT 27
45430: EQUAL
45431: IFFALSE 45441
// sAI := true ;
45433: LD_ADDR_EXP 69
45437: PUSH
45438: LD_INT 1
45440: ST_TO_ADDR
// if p3 = 28 then
45441: LD_VAR 0 3
45445: PUSH
45446: LD_INT 28
45448: EQUAL
45449: IFFALSE 45459
// sCargo := true ;
45451: LD_ADDR_EXP 72
45455: PUSH
45456: LD_INT 1
45458: ST_TO_ADDR
// if p3 = 29 then
45459: LD_VAR 0 3
45463: PUSH
45464: LD_INT 29
45466: EQUAL
45467: IFFALSE 45477
// sDLaser := true ;
45469: LD_ADDR_EXP 73
45473: PUSH
45474: LD_INT 1
45476: ST_TO_ADDR
// if p3 = 30 then
45477: LD_VAR 0 3
45481: PUSH
45482: LD_INT 30
45484: EQUAL
45485: IFFALSE 45495
// sExchange := true ;
45487: LD_ADDR_EXP 74
45491: PUSH
45492: LD_INT 1
45494: ST_TO_ADDR
// if p3 = 31 then
45495: LD_VAR 0 3
45499: PUSH
45500: LD_INT 31
45502: EQUAL
45503: IFFALSE 45513
// sFac := true ;
45505: LD_ADDR_EXP 75
45509: PUSH
45510: LD_INT 1
45512: ST_TO_ADDR
// if p3 = 32 then
45513: LD_VAR 0 3
45517: PUSH
45518: LD_INT 32
45520: EQUAL
45521: IFFALSE 45531
// sPower := true ;
45523: LD_ADDR_EXP 76
45527: PUSH
45528: LD_INT 1
45530: ST_TO_ADDR
// if p3 = 33 then
45531: LD_VAR 0 3
45535: PUSH
45536: LD_INT 33
45538: EQUAL
45539: IFFALSE 45549
// sRandom := true ;
45541: LD_ADDR_EXP 77
45545: PUSH
45546: LD_INT 1
45548: ST_TO_ADDR
// if p3 = 34 then
45549: LD_VAR 0 3
45553: PUSH
45554: LD_INT 34
45556: EQUAL
45557: IFFALSE 45567
// sShield := true ;
45559: LD_ADDR_EXP 78
45563: PUSH
45564: LD_INT 1
45566: ST_TO_ADDR
// if p3 = 35 then
45567: LD_VAR 0 3
45571: PUSH
45572: LD_INT 35
45574: EQUAL
45575: IFFALSE 45585
// sTime := true ;
45577: LD_ADDR_EXP 79
45581: PUSH
45582: LD_INT 1
45584: ST_TO_ADDR
// if p3 = 36 then
45585: LD_VAR 0 3
45589: PUSH
45590: LD_INT 36
45592: EQUAL
45593: IFFALSE 45603
// sTools := true ;
45595: LD_ADDR_EXP 80
45599: PUSH
45600: LD_INT 1
45602: ST_TO_ADDR
// if p3 = 101 then
45603: LD_VAR 0 3
45607: PUSH
45608: LD_INT 101
45610: EQUAL
45611: IFFALSE 45621
// sSold := true ;
45613: LD_ADDR_EXP 45
45617: PUSH
45618: LD_INT 1
45620: ST_TO_ADDR
// if p3 = 102 then
45621: LD_VAR 0 3
45625: PUSH
45626: LD_INT 102
45628: EQUAL
45629: IFFALSE 45639
// sDiff := true ;
45631: LD_ADDR_EXP 46
45635: PUSH
45636: LD_INT 1
45638: ST_TO_ADDR
// if p3 = 103 then
45639: LD_VAR 0 3
45643: PUSH
45644: LD_INT 103
45646: EQUAL
45647: IFFALSE 45657
// sFog := true ;
45649: LD_ADDR_EXP 49
45653: PUSH
45654: LD_INT 1
45656: ST_TO_ADDR
// if p3 = 104 then
45657: LD_VAR 0 3
45661: PUSH
45662: LD_INT 104
45664: EQUAL
45665: IFFALSE 45675
// sReset := true ;
45667: LD_ADDR_EXP 50
45671: PUSH
45672: LD_INT 1
45674: ST_TO_ADDR
// if p3 = 105 then
45675: LD_VAR 0 3
45679: PUSH
45680: LD_INT 105
45682: EQUAL
45683: IFFALSE 45693
// sSun := true ;
45685: LD_ADDR_EXP 51
45689: PUSH
45690: LD_INT 1
45692: ST_TO_ADDR
// if p3 = 106 then
45693: LD_VAR 0 3
45697: PUSH
45698: LD_INT 106
45700: EQUAL
45701: IFFALSE 45711
// sTiger := true ;
45703: LD_ADDR_EXP 47
45707: PUSH
45708: LD_INT 1
45710: ST_TO_ADDR
// if p3 = 107 then
45711: LD_VAR 0 3
45715: PUSH
45716: LD_INT 107
45718: EQUAL
45719: IFFALSE 45729
// sBomb := true ;
45721: LD_ADDR_EXP 48
45725: PUSH
45726: LD_INT 1
45728: ST_TO_ADDR
// if p3 = 108 then
45729: LD_VAR 0 3
45733: PUSH
45734: LD_INT 108
45736: EQUAL
45737: IFFALSE 45747
// sWound := true ;
45739: LD_ADDR_EXP 56
45743: PUSH
45744: LD_INT 1
45746: ST_TO_ADDR
// if p3 = 109 then
45747: LD_VAR 0 3
45751: PUSH
45752: LD_INT 109
45754: EQUAL
45755: IFFALSE 45765
// sBetray := true ;
45757: LD_ADDR_EXP 60
45761: PUSH
45762: LD_INT 1
45764: ST_TO_ADDR
// if p3 = 110 then
45765: LD_VAR 0 3
45769: PUSH
45770: LD_INT 110
45772: EQUAL
45773: IFFALSE 45783
// sContamin := true ;
45775: LD_ADDR_EXP 61
45779: PUSH
45780: LD_INT 1
45782: ST_TO_ADDR
// if p3 = 111 then
45783: LD_VAR 0 3
45787: PUSH
45788: LD_INT 111
45790: EQUAL
45791: IFFALSE 45801
// sOil := true ;
45793: LD_ADDR_EXP 63
45797: PUSH
45798: LD_INT 1
45800: ST_TO_ADDR
// if p3 = 112 then
45801: LD_VAR 0 3
45805: PUSH
45806: LD_INT 112
45808: EQUAL
45809: IFFALSE 45819
// sStu := true ;
45811: LD_ADDR_EXP 67
45815: PUSH
45816: LD_INT 1
45818: ST_TO_ADDR
// if p3 = 113 then
45819: LD_VAR 0 3
45823: PUSH
45824: LD_INT 113
45826: EQUAL
45827: IFFALSE 45837
// sBazooka := true ;
45829: LD_ADDR_EXP 70
45833: PUSH
45834: LD_INT 1
45836: ST_TO_ADDR
// if p3 = 114 then
45837: LD_VAR 0 3
45841: PUSH
45842: LD_INT 114
45844: EQUAL
45845: IFFALSE 45855
// sMortar := true ;
45847: LD_ADDR_EXP 71
45851: PUSH
45852: LD_INT 1
45854: ST_TO_ADDR
// if p3 = 115 then
45855: LD_VAR 0 3
45859: PUSH
45860: LD_INT 115
45862: EQUAL
45863: IFFALSE 45873
// sRanger := true ;
45865: LD_ADDR_EXP 81
45869: PUSH
45870: LD_INT 1
45872: ST_TO_ADDR
// if p3 = 116 then
45873: LD_VAR 0 3
45877: PUSH
45878: LD_INT 116
45880: EQUAL
45881: IFFALSE 45891
// sComputer := true ;
45883: LD_ADDR_EXP 82
45887: PUSH
45888: LD_INT 1
45890: ST_TO_ADDR
// if p3 = 117 then
45891: LD_VAR 0 3
45895: PUSH
45896: LD_INT 117
45898: EQUAL
45899: IFFALSE 45909
// s30 := true ;
45901: LD_ADDR_EXP 83
45905: PUSH
45906: LD_INT 1
45908: ST_TO_ADDR
// if p3 = 118 then
45909: LD_VAR 0 3
45913: PUSH
45914: LD_INT 118
45916: EQUAL
45917: IFFALSE 45927
// s60 := true ;
45919: LD_ADDR_EXP 84
45923: PUSH
45924: LD_INT 1
45926: ST_TO_ADDR
// end ; if p2 = hack_mode then
45927: LD_VAR 0 2
45931: PUSH
45932: LD_INT 101
45934: EQUAL
45935: IFFALSE 46063
// begin case p3 of 1 :
45937: LD_VAR 0 3
45941: PUSH
45942: LD_INT 1
45944: DOUBLE
45945: EQUAL
45946: IFTRUE 45950
45948: GO 45957
45950: POP
// hHackUnlimitedResources ; 2 :
45951: CALL 58202 0 0
45955: GO 46063
45957: LD_INT 2
45959: DOUBLE
45960: EQUAL
45961: IFTRUE 45965
45963: GO 45972
45965: POP
// hHackSetLevel10 ; 3 :
45966: CALL 58335 0 0
45970: GO 46063
45972: LD_INT 3
45974: DOUBLE
45975: EQUAL
45976: IFTRUE 45980
45978: GO 45987
45980: POP
// hHackSetLevel10YourUnits ; 4 :
45981: CALL 58420 0 0
45985: GO 46063
45987: LD_INT 4
45989: DOUBLE
45990: EQUAL
45991: IFTRUE 45995
45993: GO 46002
45995: POP
// hHackInvincible ; 5 :
45996: CALL 58868 0 0
46000: GO 46063
46002: LD_INT 5
46004: DOUBLE
46005: EQUAL
46006: IFTRUE 46010
46008: GO 46017
46010: POP
// hHackInvisible ; 6 :
46011: CALL 58979 0 0
46015: GO 46063
46017: LD_INT 6
46019: DOUBLE
46020: EQUAL
46021: IFTRUE 46025
46023: GO 46032
46025: POP
// hHackChangeYourSide ; 7 :
46026: CALL 59036 0 0
46030: GO 46063
46032: LD_INT 7
46034: DOUBLE
46035: EQUAL
46036: IFTRUE 46040
46038: GO 46047
46040: POP
// hHackChangeUnitSide ; 8 :
46041: CALL 59078 0 0
46045: GO 46063
46047: LD_INT 8
46049: DOUBLE
46050: EQUAL
46051: IFTRUE 46055
46053: GO 46062
46055: POP
// hHackFog ; end ;
46056: CALL 59179 0 0
46060: GO 46063
46062: POP
// end ; if p2 = game_save_mode then
46063: LD_VAR 0 2
46067: PUSH
46068: LD_INT 102
46070: EQUAL
46071: IFFALSE 46126
// begin if p3 = 1 then
46073: LD_VAR 0 3
46077: PUSH
46078: LD_INT 1
46080: EQUAL
46081: IFFALSE 46093
// globalGameSaveCounter := p4 ;
46083: LD_ADDR_EXP 27
46087: PUSH
46088: LD_VAR 0 4
46092: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
46093: LD_VAR 0 3
46097: PUSH
46098: LD_INT 2
46100: EQUAL
46101: PUSH
46102: LD_EXP 27
46106: AND
46107: IFFALSE 46126
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46109: LD_STRING setGameSaveCounter(
46111: PUSH
46112: LD_EXP 27
46116: STR
46117: PUSH
46118: LD_STRING )
46120: STR
46121: PPUSH
46122: CALL_OW 559
// end ; end ;
46126: LD_VAR 0 7
46130: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
46131: LD_INT 0
46133: PPUSH
// streamModeActive := false ;
46134: LD_ADDR_EXP 28
46138: PUSH
46139: LD_INT 0
46141: ST_TO_ADDR
// normalCounter := 36 ;
46142: LD_ADDR_EXP 29
46146: PUSH
46147: LD_INT 36
46149: ST_TO_ADDR
// hardcoreCounter := 18 ;
46150: LD_ADDR_EXP 30
46154: PUSH
46155: LD_INT 18
46157: ST_TO_ADDR
// sRocket := false ;
46158: LD_ADDR_EXP 33
46162: PUSH
46163: LD_INT 0
46165: ST_TO_ADDR
// sSpeed := false ;
46166: LD_ADDR_EXP 32
46170: PUSH
46171: LD_INT 0
46173: ST_TO_ADDR
// sEngine := false ;
46174: LD_ADDR_EXP 34
46178: PUSH
46179: LD_INT 0
46181: ST_TO_ADDR
// sSpec := false ;
46182: LD_ADDR_EXP 31
46186: PUSH
46187: LD_INT 0
46189: ST_TO_ADDR
// sLevel := false ;
46190: LD_ADDR_EXP 35
46194: PUSH
46195: LD_INT 0
46197: ST_TO_ADDR
// sArmoury := false ;
46198: LD_ADDR_EXP 36
46202: PUSH
46203: LD_INT 0
46205: ST_TO_ADDR
// sRadar := false ;
46206: LD_ADDR_EXP 37
46210: PUSH
46211: LD_INT 0
46213: ST_TO_ADDR
// sBunker := false ;
46214: LD_ADDR_EXP 38
46218: PUSH
46219: LD_INT 0
46221: ST_TO_ADDR
// sHack := false ;
46222: LD_ADDR_EXP 39
46226: PUSH
46227: LD_INT 0
46229: ST_TO_ADDR
// sFire := false ;
46230: LD_ADDR_EXP 40
46234: PUSH
46235: LD_INT 0
46237: ST_TO_ADDR
// sRefresh := false ;
46238: LD_ADDR_EXP 41
46242: PUSH
46243: LD_INT 0
46245: ST_TO_ADDR
// sExp := false ;
46246: LD_ADDR_EXP 42
46250: PUSH
46251: LD_INT 0
46253: ST_TO_ADDR
// sDepot := false ;
46254: LD_ADDR_EXP 43
46258: PUSH
46259: LD_INT 0
46261: ST_TO_ADDR
// sFlag := false ;
46262: LD_ADDR_EXP 44
46266: PUSH
46267: LD_INT 0
46269: ST_TO_ADDR
// sKamikadze := false ;
46270: LD_ADDR_EXP 52
46274: PUSH
46275: LD_INT 0
46277: ST_TO_ADDR
// sTroll := false ;
46278: LD_ADDR_EXP 53
46282: PUSH
46283: LD_INT 0
46285: ST_TO_ADDR
// sSlow := false ;
46286: LD_ADDR_EXP 54
46290: PUSH
46291: LD_INT 0
46293: ST_TO_ADDR
// sLack := false ;
46294: LD_ADDR_EXP 55
46298: PUSH
46299: LD_INT 0
46301: ST_TO_ADDR
// sTank := false ;
46302: LD_ADDR_EXP 57
46306: PUSH
46307: LD_INT 0
46309: ST_TO_ADDR
// sRemote := false ;
46310: LD_ADDR_EXP 58
46314: PUSH
46315: LD_INT 0
46317: ST_TO_ADDR
// sPowell := false ;
46318: LD_ADDR_EXP 59
46322: PUSH
46323: LD_INT 0
46325: ST_TO_ADDR
// sTeleport := false ;
46326: LD_ADDR_EXP 62
46330: PUSH
46331: LD_INT 0
46333: ST_TO_ADDR
// sOilTower := false ;
46334: LD_ADDR_EXP 64
46338: PUSH
46339: LD_INT 0
46341: ST_TO_ADDR
// sShovel := false ;
46342: LD_ADDR_EXP 65
46346: PUSH
46347: LD_INT 0
46349: ST_TO_ADDR
// sSheik := false ;
46350: LD_ADDR_EXP 66
46354: PUSH
46355: LD_INT 0
46357: ST_TO_ADDR
// sEarthquake := false ;
46358: LD_ADDR_EXP 68
46362: PUSH
46363: LD_INT 0
46365: ST_TO_ADDR
// sAI := false ;
46366: LD_ADDR_EXP 69
46370: PUSH
46371: LD_INT 0
46373: ST_TO_ADDR
// sCargo := false ;
46374: LD_ADDR_EXP 72
46378: PUSH
46379: LD_INT 0
46381: ST_TO_ADDR
// sDLaser := false ;
46382: LD_ADDR_EXP 73
46386: PUSH
46387: LD_INT 0
46389: ST_TO_ADDR
// sExchange := false ;
46390: LD_ADDR_EXP 74
46394: PUSH
46395: LD_INT 0
46397: ST_TO_ADDR
// sFac := false ;
46398: LD_ADDR_EXP 75
46402: PUSH
46403: LD_INT 0
46405: ST_TO_ADDR
// sPower := false ;
46406: LD_ADDR_EXP 76
46410: PUSH
46411: LD_INT 0
46413: ST_TO_ADDR
// sRandom := false ;
46414: LD_ADDR_EXP 77
46418: PUSH
46419: LD_INT 0
46421: ST_TO_ADDR
// sShield := false ;
46422: LD_ADDR_EXP 78
46426: PUSH
46427: LD_INT 0
46429: ST_TO_ADDR
// sTime := false ;
46430: LD_ADDR_EXP 79
46434: PUSH
46435: LD_INT 0
46437: ST_TO_ADDR
// sTools := false ;
46438: LD_ADDR_EXP 80
46442: PUSH
46443: LD_INT 0
46445: ST_TO_ADDR
// sSold := false ;
46446: LD_ADDR_EXP 45
46450: PUSH
46451: LD_INT 0
46453: ST_TO_ADDR
// sDiff := false ;
46454: LD_ADDR_EXP 46
46458: PUSH
46459: LD_INT 0
46461: ST_TO_ADDR
// sFog := false ;
46462: LD_ADDR_EXP 49
46466: PUSH
46467: LD_INT 0
46469: ST_TO_ADDR
// sReset := false ;
46470: LD_ADDR_EXP 50
46474: PUSH
46475: LD_INT 0
46477: ST_TO_ADDR
// sSun := false ;
46478: LD_ADDR_EXP 51
46482: PUSH
46483: LD_INT 0
46485: ST_TO_ADDR
// sTiger := false ;
46486: LD_ADDR_EXP 47
46490: PUSH
46491: LD_INT 0
46493: ST_TO_ADDR
// sBomb := false ;
46494: LD_ADDR_EXP 48
46498: PUSH
46499: LD_INT 0
46501: ST_TO_ADDR
// sWound := false ;
46502: LD_ADDR_EXP 56
46506: PUSH
46507: LD_INT 0
46509: ST_TO_ADDR
// sBetray := false ;
46510: LD_ADDR_EXP 60
46514: PUSH
46515: LD_INT 0
46517: ST_TO_ADDR
// sContamin := false ;
46518: LD_ADDR_EXP 61
46522: PUSH
46523: LD_INT 0
46525: ST_TO_ADDR
// sOil := false ;
46526: LD_ADDR_EXP 63
46530: PUSH
46531: LD_INT 0
46533: ST_TO_ADDR
// sStu := false ;
46534: LD_ADDR_EXP 67
46538: PUSH
46539: LD_INT 0
46541: ST_TO_ADDR
// sBazooka := false ;
46542: LD_ADDR_EXP 70
46546: PUSH
46547: LD_INT 0
46549: ST_TO_ADDR
// sMortar := false ;
46550: LD_ADDR_EXP 71
46554: PUSH
46555: LD_INT 0
46557: ST_TO_ADDR
// sRanger := false ;
46558: LD_ADDR_EXP 81
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// sComputer := false ;
46566: LD_ADDR_EXP 82
46570: PUSH
46571: LD_INT 0
46573: ST_TO_ADDR
// s30 := false ;
46574: LD_ADDR_EXP 83
46578: PUSH
46579: LD_INT 0
46581: ST_TO_ADDR
// s60 := false ;
46582: LD_ADDR_EXP 84
46586: PUSH
46587: LD_INT 0
46589: ST_TO_ADDR
// end ;
46590: LD_VAR 0 1
46594: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
46595: LD_INT 0
46597: PPUSH
46598: PPUSH
46599: PPUSH
46600: PPUSH
46601: PPUSH
46602: PPUSH
46603: PPUSH
// result := [ ] ;
46604: LD_ADDR_VAR 0 2
46608: PUSH
46609: EMPTY
46610: ST_TO_ADDR
// if campaign_id = 1 then
46611: LD_OWVAR 69
46615: PUSH
46616: LD_INT 1
46618: EQUAL
46619: IFFALSE 49785
// begin case mission_number of 1 :
46621: LD_OWVAR 70
46625: PUSH
46626: LD_INT 1
46628: DOUBLE
46629: EQUAL
46630: IFTRUE 46634
46632: GO 46710
46634: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
46635: LD_ADDR_VAR 0 2
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 4
46645: PUSH
46646: LD_INT 11
46648: PUSH
46649: LD_INT 12
46651: PUSH
46652: LD_INT 15
46654: PUSH
46655: LD_INT 16
46657: PUSH
46658: LD_INT 22
46660: PUSH
46661: LD_INT 23
46663: PUSH
46664: LD_INT 26
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 101
46680: PUSH
46681: LD_INT 102
46683: PUSH
46684: LD_INT 106
46686: PUSH
46687: LD_INT 116
46689: PUSH
46690: LD_INT 117
46692: PUSH
46693: LD_INT 118
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: ST_TO_ADDR
46708: GO 49783
46710: LD_INT 2
46712: DOUBLE
46713: EQUAL
46714: IFTRUE 46718
46716: GO 46802
46718: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
46719: LD_ADDR_VAR 0 2
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: LD_INT 4
46729: PUSH
46730: LD_INT 11
46732: PUSH
46733: LD_INT 12
46735: PUSH
46736: LD_INT 15
46738: PUSH
46739: LD_INT 16
46741: PUSH
46742: LD_INT 22
46744: PUSH
46745: LD_INT 23
46747: PUSH
46748: LD_INT 26
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 101
46764: PUSH
46765: LD_INT 102
46767: PUSH
46768: LD_INT 105
46770: PUSH
46771: LD_INT 106
46773: PUSH
46774: LD_INT 108
46776: PUSH
46777: LD_INT 116
46779: PUSH
46780: LD_INT 117
46782: PUSH
46783: LD_INT 118
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: ST_TO_ADDR
46800: GO 49783
46802: LD_INT 3
46804: DOUBLE
46805: EQUAL
46806: IFTRUE 46810
46808: GO 46898
46810: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46811: LD_ADDR_VAR 0 2
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 4
46821: PUSH
46822: LD_INT 5
46824: PUSH
46825: LD_INT 11
46827: PUSH
46828: LD_INT 12
46830: PUSH
46831: LD_INT 15
46833: PUSH
46834: LD_INT 16
46836: PUSH
46837: LD_INT 22
46839: PUSH
46840: LD_INT 26
46842: PUSH
46843: LD_INT 36
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 101
46860: PUSH
46861: LD_INT 102
46863: PUSH
46864: LD_INT 105
46866: PUSH
46867: LD_INT 106
46869: PUSH
46870: LD_INT 108
46872: PUSH
46873: LD_INT 116
46875: PUSH
46876: LD_INT 117
46878: PUSH
46879: LD_INT 118
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: ST_TO_ADDR
46896: GO 49783
46898: LD_INT 4
46900: DOUBLE
46901: EQUAL
46902: IFTRUE 46906
46904: GO 47002
46906: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
46907: LD_ADDR_VAR 0 2
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 4
46917: PUSH
46918: LD_INT 5
46920: PUSH
46921: LD_INT 8
46923: PUSH
46924: LD_INT 11
46926: PUSH
46927: LD_INT 12
46929: PUSH
46930: LD_INT 15
46932: PUSH
46933: LD_INT 16
46935: PUSH
46936: LD_INT 22
46938: PUSH
46939: LD_INT 23
46941: PUSH
46942: LD_INT 26
46944: PUSH
46945: LD_INT 36
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 101
46964: PUSH
46965: LD_INT 102
46967: PUSH
46968: LD_INT 105
46970: PUSH
46971: LD_INT 106
46973: PUSH
46974: LD_INT 108
46976: PUSH
46977: LD_INT 116
46979: PUSH
46980: LD_INT 117
46982: PUSH
46983: LD_INT 118
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: ST_TO_ADDR
47000: GO 49783
47002: LD_INT 5
47004: DOUBLE
47005: EQUAL
47006: IFTRUE 47010
47008: GO 47122
47010: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47011: LD_ADDR_VAR 0 2
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 4
47021: PUSH
47022: LD_INT 5
47024: PUSH
47025: LD_INT 6
47027: PUSH
47028: LD_INT 8
47030: PUSH
47031: LD_INT 11
47033: PUSH
47034: LD_INT 12
47036: PUSH
47037: LD_INT 15
47039: PUSH
47040: LD_INT 16
47042: PUSH
47043: LD_INT 22
47045: PUSH
47046: LD_INT 23
47048: PUSH
47049: LD_INT 25
47051: PUSH
47052: LD_INT 26
47054: PUSH
47055: LD_INT 36
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 101
47076: PUSH
47077: LD_INT 102
47079: PUSH
47080: LD_INT 105
47082: PUSH
47083: LD_INT 106
47085: PUSH
47086: LD_INT 108
47088: PUSH
47089: LD_INT 109
47091: PUSH
47092: LD_INT 112
47094: PUSH
47095: LD_INT 116
47097: PUSH
47098: LD_INT 117
47100: PUSH
47101: LD_INT 118
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: ST_TO_ADDR
47120: GO 49783
47122: LD_INT 6
47124: DOUBLE
47125: EQUAL
47126: IFTRUE 47130
47128: GO 47262
47130: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47131: LD_ADDR_VAR 0 2
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: LD_INT 5
47144: PUSH
47145: LD_INT 6
47147: PUSH
47148: LD_INT 8
47150: PUSH
47151: LD_INT 11
47153: PUSH
47154: LD_INT 12
47156: PUSH
47157: LD_INT 15
47159: PUSH
47160: LD_INT 16
47162: PUSH
47163: LD_INT 20
47165: PUSH
47166: LD_INT 21
47168: PUSH
47169: LD_INT 22
47171: PUSH
47172: LD_INT 23
47174: PUSH
47175: LD_INT 25
47177: PUSH
47178: LD_INT 26
47180: PUSH
47181: LD_INT 30
47183: PUSH
47184: LD_INT 31
47186: PUSH
47187: LD_INT 32
47189: PUSH
47190: LD_INT 36
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 101
47216: PUSH
47217: LD_INT 102
47219: PUSH
47220: LD_INT 105
47222: PUSH
47223: LD_INT 106
47225: PUSH
47226: LD_INT 108
47228: PUSH
47229: LD_INT 109
47231: PUSH
47232: LD_INT 112
47234: PUSH
47235: LD_INT 116
47237: PUSH
47238: LD_INT 117
47240: PUSH
47241: LD_INT 118
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: ST_TO_ADDR
47260: GO 49783
47262: LD_INT 7
47264: DOUBLE
47265: EQUAL
47266: IFTRUE 47270
47268: GO 47382
47270: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47271: LD_ADDR_VAR 0 2
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 4
47281: PUSH
47282: LD_INT 5
47284: PUSH
47285: LD_INT 7
47287: PUSH
47288: LD_INT 11
47290: PUSH
47291: LD_INT 12
47293: PUSH
47294: LD_INT 15
47296: PUSH
47297: LD_INT 16
47299: PUSH
47300: LD_INT 20
47302: PUSH
47303: LD_INT 21
47305: PUSH
47306: LD_INT 22
47308: PUSH
47309: LD_INT 23
47311: PUSH
47312: LD_INT 25
47314: PUSH
47315: LD_INT 26
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 101
47336: PUSH
47337: LD_INT 102
47339: PUSH
47340: LD_INT 103
47342: PUSH
47343: LD_INT 105
47345: PUSH
47346: LD_INT 106
47348: PUSH
47349: LD_INT 108
47351: PUSH
47352: LD_INT 112
47354: PUSH
47355: LD_INT 116
47357: PUSH
47358: LD_INT 117
47360: PUSH
47361: LD_INT 118
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: ST_TO_ADDR
47380: GO 49783
47382: LD_INT 8
47384: DOUBLE
47385: EQUAL
47386: IFTRUE 47390
47388: GO 47530
47390: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47391: LD_ADDR_VAR 0 2
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 4
47401: PUSH
47402: LD_INT 5
47404: PUSH
47405: LD_INT 6
47407: PUSH
47408: LD_INT 7
47410: PUSH
47411: LD_INT 8
47413: PUSH
47414: LD_INT 11
47416: PUSH
47417: LD_INT 12
47419: PUSH
47420: LD_INT 15
47422: PUSH
47423: LD_INT 16
47425: PUSH
47426: LD_INT 20
47428: PUSH
47429: LD_INT 21
47431: PUSH
47432: LD_INT 22
47434: PUSH
47435: LD_INT 23
47437: PUSH
47438: LD_INT 25
47440: PUSH
47441: LD_INT 26
47443: PUSH
47444: LD_INT 30
47446: PUSH
47447: LD_INT 31
47449: PUSH
47450: LD_INT 32
47452: PUSH
47453: LD_INT 36
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 101
47480: PUSH
47481: LD_INT 102
47483: PUSH
47484: LD_INT 103
47486: PUSH
47487: LD_INT 105
47489: PUSH
47490: LD_INT 106
47492: PUSH
47493: LD_INT 108
47495: PUSH
47496: LD_INT 109
47498: PUSH
47499: LD_INT 112
47501: PUSH
47502: LD_INT 116
47504: PUSH
47505: LD_INT 117
47507: PUSH
47508: LD_INT 118
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: ST_TO_ADDR
47528: GO 49783
47530: LD_INT 9
47532: DOUBLE
47533: EQUAL
47534: IFTRUE 47538
47536: GO 47686
47538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47539: LD_ADDR_VAR 0 2
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 4
47549: PUSH
47550: LD_INT 5
47552: PUSH
47553: LD_INT 6
47555: PUSH
47556: LD_INT 7
47558: PUSH
47559: LD_INT 8
47561: PUSH
47562: LD_INT 11
47564: PUSH
47565: LD_INT 12
47567: PUSH
47568: LD_INT 15
47570: PUSH
47571: LD_INT 16
47573: PUSH
47574: LD_INT 20
47576: PUSH
47577: LD_INT 21
47579: PUSH
47580: LD_INT 22
47582: PUSH
47583: LD_INT 23
47585: PUSH
47586: LD_INT 25
47588: PUSH
47589: LD_INT 26
47591: PUSH
47592: LD_INT 28
47594: PUSH
47595: LD_INT 30
47597: PUSH
47598: LD_INT 31
47600: PUSH
47601: LD_INT 32
47603: PUSH
47604: LD_INT 36
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 101
47632: PUSH
47633: LD_INT 102
47635: PUSH
47636: LD_INT 103
47638: PUSH
47639: LD_INT 105
47641: PUSH
47642: LD_INT 106
47644: PUSH
47645: LD_INT 108
47647: PUSH
47648: LD_INT 109
47650: PUSH
47651: LD_INT 112
47653: PUSH
47654: LD_INT 114
47656: PUSH
47657: LD_INT 116
47659: PUSH
47660: LD_INT 117
47662: PUSH
47663: LD_INT 118
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: ST_TO_ADDR
47684: GO 49783
47686: LD_INT 10
47688: DOUBLE
47689: EQUAL
47690: IFTRUE 47694
47692: GO 47890
47694: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
47695: LD_ADDR_VAR 0 2
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 4
47705: PUSH
47706: LD_INT 5
47708: PUSH
47709: LD_INT 6
47711: PUSH
47712: LD_INT 7
47714: PUSH
47715: LD_INT 8
47717: PUSH
47718: LD_INT 9
47720: PUSH
47721: LD_INT 10
47723: PUSH
47724: LD_INT 11
47726: PUSH
47727: LD_INT 12
47729: PUSH
47730: LD_INT 13
47732: PUSH
47733: LD_INT 14
47735: PUSH
47736: LD_INT 15
47738: PUSH
47739: LD_INT 16
47741: PUSH
47742: LD_INT 17
47744: PUSH
47745: LD_INT 18
47747: PUSH
47748: LD_INT 19
47750: PUSH
47751: LD_INT 20
47753: PUSH
47754: LD_INT 21
47756: PUSH
47757: LD_INT 22
47759: PUSH
47760: LD_INT 23
47762: PUSH
47763: LD_INT 24
47765: PUSH
47766: LD_INT 25
47768: PUSH
47769: LD_INT 26
47771: PUSH
47772: LD_INT 28
47774: PUSH
47775: LD_INT 30
47777: PUSH
47778: LD_INT 31
47780: PUSH
47781: LD_INT 32
47783: PUSH
47784: LD_INT 36
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 101
47820: PUSH
47821: LD_INT 102
47823: PUSH
47824: LD_INT 103
47826: PUSH
47827: LD_INT 104
47829: PUSH
47830: LD_INT 105
47832: PUSH
47833: LD_INT 106
47835: PUSH
47836: LD_INT 107
47838: PUSH
47839: LD_INT 108
47841: PUSH
47842: LD_INT 109
47844: PUSH
47845: LD_INT 110
47847: PUSH
47848: LD_INT 111
47850: PUSH
47851: LD_INT 112
47853: PUSH
47854: LD_INT 114
47856: PUSH
47857: LD_INT 116
47859: PUSH
47860: LD_INT 117
47862: PUSH
47863: LD_INT 118
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: ST_TO_ADDR
47888: GO 49783
47890: LD_INT 11
47892: DOUBLE
47893: EQUAL
47894: IFTRUE 47898
47896: GO 48102
47898: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
47899: LD_ADDR_VAR 0 2
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: LD_INT 4
47912: PUSH
47913: LD_INT 5
47915: PUSH
47916: LD_INT 6
47918: PUSH
47919: LD_INT 7
47921: PUSH
47922: LD_INT 8
47924: PUSH
47925: LD_INT 9
47927: PUSH
47928: LD_INT 10
47930: PUSH
47931: LD_INT 11
47933: PUSH
47934: LD_INT 12
47936: PUSH
47937: LD_INT 13
47939: PUSH
47940: LD_INT 14
47942: PUSH
47943: LD_INT 15
47945: PUSH
47946: LD_INT 16
47948: PUSH
47949: LD_INT 17
47951: PUSH
47952: LD_INT 18
47954: PUSH
47955: LD_INT 19
47957: PUSH
47958: LD_INT 20
47960: PUSH
47961: LD_INT 21
47963: PUSH
47964: LD_INT 22
47966: PUSH
47967: LD_INT 23
47969: PUSH
47970: LD_INT 24
47972: PUSH
47973: LD_INT 25
47975: PUSH
47976: LD_INT 26
47978: PUSH
47979: LD_INT 28
47981: PUSH
47982: LD_INT 30
47984: PUSH
47985: LD_INT 31
47987: PUSH
47988: LD_INT 32
47990: PUSH
47991: LD_INT 34
47993: PUSH
47994: LD_INT 36
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 101
48032: PUSH
48033: LD_INT 102
48035: PUSH
48036: LD_INT 103
48038: PUSH
48039: LD_INT 104
48041: PUSH
48042: LD_INT 105
48044: PUSH
48045: LD_INT 106
48047: PUSH
48048: LD_INT 107
48050: PUSH
48051: LD_INT 108
48053: PUSH
48054: LD_INT 109
48056: PUSH
48057: LD_INT 110
48059: PUSH
48060: LD_INT 111
48062: PUSH
48063: LD_INT 112
48065: PUSH
48066: LD_INT 114
48068: PUSH
48069: LD_INT 116
48071: PUSH
48072: LD_INT 117
48074: PUSH
48075: LD_INT 118
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: ST_TO_ADDR
48100: GO 49783
48102: LD_INT 12
48104: DOUBLE
48105: EQUAL
48106: IFTRUE 48110
48108: GO 48330
48110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48111: LD_ADDR_VAR 0 2
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 3
48124: PUSH
48125: LD_INT 4
48127: PUSH
48128: LD_INT 5
48130: PUSH
48131: LD_INT 6
48133: PUSH
48134: LD_INT 7
48136: PUSH
48137: LD_INT 8
48139: PUSH
48140: LD_INT 9
48142: PUSH
48143: LD_INT 10
48145: PUSH
48146: LD_INT 11
48148: PUSH
48149: LD_INT 12
48151: PUSH
48152: LD_INT 13
48154: PUSH
48155: LD_INT 14
48157: PUSH
48158: LD_INT 15
48160: PUSH
48161: LD_INT 16
48163: PUSH
48164: LD_INT 17
48166: PUSH
48167: LD_INT 18
48169: PUSH
48170: LD_INT 19
48172: PUSH
48173: LD_INT 20
48175: PUSH
48176: LD_INT 21
48178: PUSH
48179: LD_INT 22
48181: PUSH
48182: LD_INT 23
48184: PUSH
48185: LD_INT 24
48187: PUSH
48188: LD_INT 25
48190: PUSH
48191: LD_INT 26
48193: PUSH
48194: LD_INT 27
48196: PUSH
48197: LD_INT 28
48199: PUSH
48200: LD_INT 30
48202: PUSH
48203: LD_INT 31
48205: PUSH
48206: LD_INT 32
48208: PUSH
48209: LD_INT 33
48211: PUSH
48212: LD_INT 34
48214: PUSH
48215: LD_INT 36
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 101
48256: PUSH
48257: LD_INT 102
48259: PUSH
48260: LD_INT 103
48262: PUSH
48263: LD_INT 104
48265: PUSH
48266: LD_INT 105
48268: PUSH
48269: LD_INT 106
48271: PUSH
48272: LD_INT 107
48274: PUSH
48275: LD_INT 108
48277: PUSH
48278: LD_INT 109
48280: PUSH
48281: LD_INT 110
48283: PUSH
48284: LD_INT 111
48286: PUSH
48287: LD_INT 112
48289: PUSH
48290: LD_INT 113
48292: PUSH
48293: LD_INT 114
48295: PUSH
48296: LD_INT 116
48298: PUSH
48299: LD_INT 117
48301: PUSH
48302: LD_INT 118
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: ST_TO_ADDR
48328: GO 49783
48330: LD_INT 13
48332: DOUBLE
48333: EQUAL
48334: IFTRUE 48338
48336: GO 48546
48338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48339: LD_ADDR_VAR 0 2
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 4
48355: PUSH
48356: LD_INT 5
48358: PUSH
48359: LD_INT 8
48361: PUSH
48362: LD_INT 9
48364: PUSH
48365: LD_INT 10
48367: PUSH
48368: LD_INT 11
48370: PUSH
48371: LD_INT 12
48373: PUSH
48374: LD_INT 14
48376: PUSH
48377: LD_INT 15
48379: PUSH
48380: LD_INT 16
48382: PUSH
48383: LD_INT 17
48385: PUSH
48386: LD_INT 18
48388: PUSH
48389: LD_INT 19
48391: PUSH
48392: LD_INT 20
48394: PUSH
48395: LD_INT 21
48397: PUSH
48398: LD_INT 22
48400: PUSH
48401: LD_INT 23
48403: PUSH
48404: LD_INT 24
48406: PUSH
48407: LD_INT 25
48409: PUSH
48410: LD_INT 26
48412: PUSH
48413: LD_INT 27
48415: PUSH
48416: LD_INT 28
48418: PUSH
48419: LD_INT 30
48421: PUSH
48422: LD_INT 31
48424: PUSH
48425: LD_INT 32
48427: PUSH
48428: LD_INT 33
48430: PUSH
48431: LD_INT 34
48433: PUSH
48434: LD_INT 36
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 101
48472: PUSH
48473: LD_INT 102
48475: PUSH
48476: LD_INT 103
48478: PUSH
48479: LD_INT 104
48481: PUSH
48482: LD_INT 105
48484: PUSH
48485: LD_INT 106
48487: PUSH
48488: LD_INT 107
48490: PUSH
48491: LD_INT 108
48493: PUSH
48494: LD_INT 109
48496: PUSH
48497: LD_INT 110
48499: PUSH
48500: LD_INT 111
48502: PUSH
48503: LD_INT 112
48505: PUSH
48506: LD_INT 113
48508: PUSH
48509: LD_INT 114
48511: PUSH
48512: LD_INT 116
48514: PUSH
48515: LD_INT 117
48517: PUSH
48518: LD_INT 118
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: ST_TO_ADDR
48544: GO 49783
48546: LD_INT 14
48548: DOUBLE
48549: EQUAL
48550: IFTRUE 48554
48552: GO 48778
48554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48555: LD_ADDR_VAR 0 2
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: LD_INT 4
48571: PUSH
48572: LD_INT 5
48574: PUSH
48575: LD_INT 6
48577: PUSH
48578: LD_INT 7
48580: PUSH
48581: LD_INT 8
48583: PUSH
48584: LD_INT 9
48586: PUSH
48587: LD_INT 10
48589: PUSH
48590: LD_INT 11
48592: PUSH
48593: LD_INT 12
48595: PUSH
48596: LD_INT 13
48598: PUSH
48599: LD_INT 14
48601: PUSH
48602: LD_INT 15
48604: PUSH
48605: LD_INT 16
48607: PUSH
48608: LD_INT 17
48610: PUSH
48611: LD_INT 18
48613: PUSH
48614: LD_INT 19
48616: PUSH
48617: LD_INT 20
48619: PUSH
48620: LD_INT 21
48622: PUSH
48623: LD_INT 22
48625: PUSH
48626: LD_INT 23
48628: PUSH
48629: LD_INT 24
48631: PUSH
48632: LD_INT 25
48634: PUSH
48635: LD_INT 26
48637: PUSH
48638: LD_INT 27
48640: PUSH
48641: LD_INT 28
48643: PUSH
48644: LD_INT 29
48646: PUSH
48647: LD_INT 30
48649: PUSH
48650: LD_INT 31
48652: PUSH
48653: LD_INT 32
48655: PUSH
48656: LD_INT 33
48658: PUSH
48659: LD_INT 34
48661: PUSH
48662: LD_INT 36
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 101
48704: PUSH
48705: LD_INT 102
48707: PUSH
48708: LD_INT 103
48710: PUSH
48711: LD_INT 104
48713: PUSH
48714: LD_INT 105
48716: PUSH
48717: LD_INT 106
48719: PUSH
48720: LD_INT 107
48722: PUSH
48723: LD_INT 108
48725: PUSH
48726: LD_INT 109
48728: PUSH
48729: LD_INT 110
48731: PUSH
48732: LD_INT 111
48734: PUSH
48735: LD_INT 112
48737: PUSH
48738: LD_INT 113
48740: PUSH
48741: LD_INT 114
48743: PUSH
48744: LD_INT 116
48746: PUSH
48747: LD_INT 117
48749: PUSH
48750: LD_INT 118
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: ST_TO_ADDR
48776: GO 49783
48778: LD_INT 15
48780: DOUBLE
48781: EQUAL
48782: IFTRUE 48786
48784: GO 49010
48786: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48787: LD_ADDR_VAR 0 2
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: LD_INT 4
48803: PUSH
48804: LD_INT 5
48806: PUSH
48807: LD_INT 6
48809: PUSH
48810: LD_INT 7
48812: PUSH
48813: LD_INT 8
48815: PUSH
48816: LD_INT 9
48818: PUSH
48819: LD_INT 10
48821: PUSH
48822: LD_INT 11
48824: PUSH
48825: LD_INT 12
48827: PUSH
48828: LD_INT 13
48830: PUSH
48831: LD_INT 14
48833: PUSH
48834: LD_INT 15
48836: PUSH
48837: LD_INT 16
48839: PUSH
48840: LD_INT 17
48842: PUSH
48843: LD_INT 18
48845: PUSH
48846: LD_INT 19
48848: PUSH
48849: LD_INT 20
48851: PUSH
48852: LD_INT 21
48854: PUSH
48855: LD_INT 22
48857: PUSH
48858: LD_INT 23
48860: PUSH
48861: LD_INT 24
48863: PUSH
48864: LD_INT 25
48866: PUSH
48867: LD_INT 26
48869: PUSH
48870: LD_INT 27
48872: PUSH
48873: LD_INT 28
48875: PUSH
48876: LD_INT 29
48878: PUSH
48879: LD_INT 30
48881: PUSH
48882: LD_INT 31
48884: PUSH
48885: LD_INT 32
48887: PUSH
48888: LD_INT 33
48890: PUSH
48891: LD_INT 34
48893: PUSH
48894: LD_INT 36
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 101
48936: PUSH
48937: LD_INT 102
48939: PUSH
48940: LD_INT 103
48942: PUSH
48943: LD_INT 104
48945: PUSH
48946: LD_INT 105
48948: PUSH
48949: LD_INT 106
48951: PUSH
48952: LD_INT 107
48954: PUSH
48955: LD_INT 108
48957: PUSH
48958: LD_INT 109
48960: PUSH
48961: LD_INT 110
48963: PUSH
48964: LD_INT 111
48966: PUSH
48967: LD_INT 112
48969: PUSH
48970: LD_INT 113
48972: PUSH
48973: LD_INT 114
48975: PUSH
48976: LD_INT 116
48978: PUSH
48979: LD_INT 117
48981: PUSH
48982: LD_INT 118
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: ST_TO_ADDR
49008: GO 49783
49010: LD_INT 16
49012: DOUBLE
49013: EQUAL
49014: IFTRUE 49018
49016: GO 49154
49018: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49019: LD_ADDR_VAR 0 2
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: LD_INT 4
49029: PUSH
49030: LD_INT 5
49032: PUSH
49033: LD_INT 7
49035: PUSH
49036: LD_INT 11
49038: PUSH
49039: LD_INT 12
49041: PUSH
49042: LD_INT 15
49044: PUSH
49045: LD_INT 16
49047: PUSH
49048: LD_INT 20
49050: PUSH
49051: LD_INT 21
49053: PUSH
49054: LD_INT 22
49056: PUSH
49057: LD_INT 23
49059: PUSH
49060: LD_INT 25
49062: PUSH
49063: LD_INT 26
49065: PUSH
49066: LD_INT 30
49068: PUSH
49069: LD_INT 31
49071: PUSH
49072: LD_INT 32
49074: PUSH
49075: LD_INT 33
49077: PUSH
49078: LD_INT 34
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 101
49104: PUSH
49105: LD_INT 102
49107: PUSH
49108: LD_INT 103
49110: PUSH
49111: LD_INT 106
49113: PUSH
49114: LD_INT 108
49116: PUSH
49117: LD_INT 112
49119: PUSH
49120: LD_INT 113
49122: PUSH
49123: LD_INT 114
49125: PUSH
49126: LD_INT 116
49128: PUSH
49129: LD_INT 117
49131: PUSH
49132: LD_INT 118
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: ST_TO_ADDR
49152: GO 49783
49154: LD_INT 17
49156: DOUBLE
49157: EQUAL
49158: IFTRUE 49162
49160: GO 49386
49162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49163: LD_ADDR_VAR 0 2
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: LD_INT 3
49176: PUSH
49177: LD_INT 4
49179: PUSH
49180: LD_INT 5
49182: PUSH
49183: LD_INT 6
49185: PUSH
49186: LD_INT 7
49188: PUSH
49189: LD_INT 8
49191: PUSH
49192: LD_INT 9
49194: PUSH
49195: LD_INT 10
49197: PUSH
49198: LD_INT 11
49200: PUSH
49201: LD_INT 12
49203: PUSH
49204: LD_INT 13
49206: PUSH
49207: LD_INT 14
49209: PUSH
49210: LD_INT 15
49212: PUSH
49213: LD_INT 16
49215: PUSH
49216: LD_INT 17
49218: PUSH
49219: LD_INT 18
49221: PUSH
49222: LD_INT 19
49224: PUSH
49225: LD_INT 20
49227: PUSH
49228: LD_INT 21
49230: PUSH
49231: LD_INT 22
49233: PUSH
49234: LD_INT 23
49236: PUSH
49237: LD_INT 24
49239: PUSH
49240: LD_INT 25
49242: PUSH
49243: LD_INT 26
49245: PUSH
49246: LD_INT 27
49248: PUSH
49249: LD_INT 28
49251: PUSH
49252: LD_INT 29
49254: PUSH
49255: LD_INT 30
49257: PUSH
49258: LD_INT 31
49260: PUSH
49261: LD_INT 32
49263: PUSH
49264: LD_INT 33
49266: PUSH
49267: LD_INT 34
49269: PUSH
49270: LD_INT 36
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 101
49312: PUSH
49313: LD_INT 102
49315: PUSH
49316: LD_INT 103
49318: PUSH
49319: LD_INT 104
49321: PUSH
49322: LD_INT 105
49324: PUSH
49325: LD_INT 106
49327: PUSH
49328: LD_INT 107
49330: PUSH
49331: LD_INT 108
49333: PUSH
49334: LD_INT 109
49336: PUSH
49337: LD_INT 110
49339: PUSH
49340: LD_INT 111
49342: PUSH
49343: LD_INT 112
49345: PUSH
49346: LD_INT 113
49348: PUSH
49349: LD_INT 114
49351: PUSH
49352: LD_INT 116
49354: PUSH
49355: LD_INT 117
49357: PUSH
49358: LD_INT 118
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: ST_TO_ADDR
49384: GO 49783
49386: LD_INT 18
49388: DOUBLE
49389: EQUAL
49390: IFTRUE 49394
49392: GO 49542
49394: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49395: LD_ADDR_VAR 0 2
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 4
49405: PUSH
49406: LD_INT 5
49408: PUSH
49409: LD_INT 7
49411: PUSH
49412: LD_INT 11
49414: PUSH
49415: LD_INT 12
49417: PUSH
49418: LD_INT 15
49420: PUSH
49421: LD_INT 16
49423: PUSH
49424: LD_INT 20
49426: PUSH
49427: LD_INT 21
49429: PUSH
49430: LD_INT 22
49432: PUSH
49433: LD_INT 23
49435: PUSH
49436: LD_INT 25
49438: PUSH
49439: LD_INT 26
49441: PUSH
49442: LD_INT 30
49444: PUSH
49445: LD_INT 31
49447: PUSH
49448: LD_INT 32
49450: PUSH
49451: LD_INT 33
49453: PUSH
49454: LD_INT 34
49456: PUSH
49457: LD_INT 35
49459: PUSH
49460: LD_INT 36
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 101
49488: PUSH
49489: LD_INT 102
49491: PUSH
49492: LD_INT 103
49494: PUSH
49495: LD_INT 106
49497: PUSH
49498: LD_INT 108
49500: PUSH
49501: LD_INT 112
49503: PUSH
49504: LD_INT 113
49506: PUSH
49507: LD_INT 114
49509: PUSH
49510: LD_INT 115
49512: PUSH
49513: LD_INT 116
49515: PUSH
49516: LD_INT 117
49518: PUSH
49519: LD_INT 118
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: ST_TO_ADDR
49540: GO 49783
49542: LD_INT 19
49544: DOUBLE
49545: EQUAL
49546: IFTRUE 49550
49548: GO 49782
49550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49551: LD_ADDR_VAR 0 2
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 3
49564: PUSH
49565: LD_INT 4
49567: PUSH
49568: LD_INT 5
49570: PUSH
49571: LD_INT 6
49573: PUSH
49574: LD_INT 7
49576: PUSH
49577: LD_INT 8
49579: PUSH
49580: LD_INT 9
49582: PUSH
49583: LD_INT 10
49585: PUSH
49586: LD_INT 11
49588: PUSH
49589: LD_INT 12
49591: PUSH
49592: LD_INT 13
49594: PUSH
49595: LD_INT 14
49597: PUSH
49598: LD_INT 15
49600: PUSH
49601: LD_INT 16
49603: PUSH
49604: LD_INT 17
49606: PUSH
49607: LD_INT 18
49609: PUSH
49610: LD_INT 19
49612: PUSH
49613: LD_INT 20
49615: PUSH
49616: LD_INT 21
49618: PUSH
49619: LD_INT 22
49621: PUSH
49622: LD_INT 23
49624: PUSH
49625: LD_INT 24
49627: PUSH
49628: LD_INT 25
49630: PUSH
49631: LD_INT 26
49633: PUSH
49634: LD_INT 27
49636: PUSH
49637: LD_INT 28
49639: PUSH
49640: LD_INT 29
49642: PUSH
49643: LD_INT 30
49645: PUSH
49646: LD_INT 31
49648: PUSH
49649: LD_INT 32
49651: PUSH
49652: LD_INT 33
49654: PUSH
49655: LD_INT 34
49657: PUSH
49658: LD_INT 35
49660: PUSH
49661: LD_INT 36
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 101
49704: PUSH
49705: LD_INT 102
49707: PUSH
49708: LD_INT 103
49710: PUSH
49711: LD_INT 104
49713: PUSH
49714: LD_INT 105
49716: PUSH
49717: LD_INT 106
49719: PUSH
49720: LD_INT 107
49722: PUSH
49723: LD_INT 108
49725: PUSH
49726: LD_INT 109
49728: PUSH
49729: LD_INT 110
49731: PUSH
49732: LD_INT 111
49734: PUSH
49735: LD_INT 112
49737: PUSH
49738: LD_INT 113
49740: PUSH
49741: LD_INT 114
49743: PUSH
49744: LD_INT 115
49746: PUSH
49747: LD_INT 116
49749: PUSH
49750: LD_INT 117
49752: PUSH
49753: LD_INT 118
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: ST_TO_ADDR
49780: GO 49783
49782: POP
// end else
49783: GO 50014
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49785: LD_ADDR_VAR 0 2
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 4
49801: PUSH
49802: LD_INT 5
49804: PUSH
49805: LD_INT 6
49807: PUSH
49808: LD_INT 7
49810: PUSH
49811: LD_INT 8
49813: PUSH
49814: LD_INT 9
49816: PUSH
49817: LD_INT 10
49819: PUSH
49820: LD_INT 11
49822: PUSH
49823: LD_INT 12
49825: PUSH
49826: LD_INT 13
49828: PUSH
49829: LD_INT 14
49831: PUSH
49832: LD_INT 15
49834: PUSH
49835: LD_INT 16
49837: PUSH
49838: LD_INT 17
49840: PUSH
49841: LD_INT 18
49843: PUSH
49844: LD_INT 19
49846: PUSH
49847: LD_INT 20
49849: PUSH
49850: LD_INT 21
49852: PUSH
49853: LD_INT 22
49855: PUSH
49856: LD_INT 23
49858: PUSH
49859: LD_INT 24
49861: PUSH
49862: LD_INT 25
49864: PUSH
49865: LD_INT 26
49867: PUSH
49868: LD_INT 27
49870: PUSH
49871: LD_INT 28
49873: PUSH
49874: LD_INT 29
49876: PUSH
49877: LD_INT 30
49879: PUSH
49880: LD_INT 31
49882: PUSH
49883: LD_INT 32
49885: PUSH
49886: LD_INT 33
49888: PUSH
49889: LD_INT 34
49891: PUSH
49892: LD_INT 35
49894: PUSH
49895: LD_INT 36
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 101
49938: PUSH
49939: LD_INT 102
49941: PUSH
49942: LD_INT 103
49944: PUSH
49945: LD_INT 104
49947: PUSH
49948: LD_INT 105
49950: PUSH
49951: LD_INT 106
49953: PUSH
49954: LD_INT 107
49956: PUSH
49957: LD_INT 108
49959: PUSH
49960: LD_INT 109
49962: PUSH
49963: LD_INT 110
49965: PUSH
49966: LD_INT 111
49968: PUSH
49969: LD_INT 112
49971: PUSH
49972: LD_INT 113
49974: PUSH
49975: LD_INT 114
49977: PUSH
49978: LD_INT 115
49980: PUSH
49981: LD_INT 116
49983: PUSH
49984: LD_INT 117
49986: PUSH
49987: LD_INT 118
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// if result then
50014: LD_VAR 0 2
50018: IFFALSE 50804
// begin normal :=  ;
50020: LD_ADDR_VAR 0 5
50024: PUSH
50025: LD_STRING 
50027: ST_TO_ADDR
// hardcore :=  ;
50028: LD_ADDR_VAR 0 6
50032: PUSH
50033: LD_STRING 
50035: ST_TO_ADDR
// active :=  ;
50036: LD_ADDR_VAR 0 7
50040: PUSH
50041: LD_STRING 
50043: ST_TO_ADDR
// for i = 1 to normalCounter do
50044: LD_ADDR_VAR 0 8
50048: PUSH
50049: DOUBLE
50050: LD_INT 1
50052: DEC
50053: ST_TO_ADDR
50054: LD_EXP 29
50058: PUSH
50059: FOR_TO
50060: IFFALSE 50161
// begin tmp := 0 ;
50062: LD_ADDR_VAR 0 3
50066: PUSH
50067: LD_STRING 0
50069: ST_TO_ADDR
// if result [ 1 ] then
50070: LD_VAR 0 2
50074: PUSH
50075: LD_INT 1
50077: ARRAY
50078: IFFALSE 50143
// if result [ 1 ] [ 1 ] = i then
50080: LD_VAR 0 2
50084: PUSH
50085: LD_INT 1
50087: ARRAY
50088: PUSH
50089: LD_INT 1
50091: ARRAY
50092: PUSH
50093: LD_VAR 0 8
50097: EQUAL
50098: IFFALSE 50143
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50100: LD_ADDR_VAR 0 2
50104: PUSH
50105: LD_VAR 0 2
50109: PPUSH
50110: LD_INT 1
50112: PPUSH
50113: LD_VAR 0 2
50117: PUSH
50118: LD_INT 1
50120: ARRAY
50121: PPUSH
50122: LD_INT 1
50124: PPUSH
50125: CALL_OW 3
50129: PPUSH
50130: CALL_OW 1
50134: ST_TO_ADDR
// tmp := 1 ;
50135: LD_ADDR_VAR 0 3
50139: PUSH
50140: LD_STRING 1
50142: ST_TO_ADDR
// end ; normal := normal & tmp ;
50143: LD_ADDR_VAR 0 5
50147: PUSH
50148: LD_VAR 0 5
50152: PUSH
50153: LD_VAR 0 3
50157: STR
50158: ST_TO_ADDR
// end ;
50159: GO 50059
50161: POP
50162: POP
// for i = 1 to hardcoreCounter do
50163: LD_ADDR_VAR 0 8
50167: PUSH
50168: DOUBLE
50169: LD_INT 1
50171: DEC
50172: ST_TO_ADDR
50173: LD_EXP 30
50177: PUSH
50178: FOR_TO
50179: IFFALSE 50284
// begin tmp := 0 ;
50181: LD_ADDR_VAR 0 3
50185: PUSH
50186: LD_STRING 0
50188: ST_TO_ADDR
// if result [ 2 ] then
50189: LD_VAR 0 2
50193: PUSH
50194: LD_INT 2
50196: ARRAY
50197: IFFALSE 50266
// if result [ 2 ] [ 1 ] = 100 + i then
50199: LD_VAR 0 2
50203: PUSH
50204: LD_INT 2
50206: ARRAY
50207: PUSH
50208: LD_INT 1
50210: ARRAY
50211: PUSH
50212: LD_INT 100
50214: PUSH
50215: LD_VAR 0 8
50219: PLUS
50220: EQUAL
50221: IFFALSE 50266
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50223: LD_ADDR_VAR 0 2
50227: PUSH
50228: LD_VAR 0 2
50232: PPUSH
50233: LD_INT 2
50235: PPUSH
50236: LD_VAR 0 2
50240: PUSH
50241: LD_INT 2
50243: ARRAY
50244: PPUSH
50245: LD_INT 1
50247: PPUSH
50248: CALL_OW 3
50252: PPUSH
50253: CALL_OW 1
50257: ST_TO_ADDR
// tmp := 1 ;
50258: LD_ADDR_VAR 0 3
50262: PUSH
50263: LD_STRING 1
50265: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50266: LD_ADDR_VAR 0 6
50270: PUSH
50271: LD_VAR 0 6
50275: PUSH
50276: LD_VAR 0 3
50280: STR
50281: ST_TO_ADDR
// end ;
50282: GO 50178
50284: POP
50285: POP
// if isGameLoad then
50286: LD_VAR 0 1
50290: IFFALSE 50765
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50292: LD_ADDR_VAR 0 4
50296: PUSH
50297: LD_EXP 33
50301: PUSH
50302: LD_EXP 32
50306: PUSH
50307: LD_EXP 34
50311: PUSH
50312: LD_EXP 31
50316: PUSH
50317: LD_EXP 35
50321: PUSH
50322: LD_EXP 36
50326: PUSH
50327: LD_EXP 37
50331: PUSH
50332: LD_EXP 38
50336: PUSH
50337: LD_EXP 39
50341: PUSH
50342: LD_EXP 40
50346: PUSH
50347: LD_EXP 41
50351: PUSH
50352: LD_EXP 42
50356: PUSH
50357: LD_EXP 43
50361: PUSH
50362: LD_EXP 44
50366: PUSH
50367: LD_EXP 52
50371: PUSH
50372: LD_EXP 53
50376: PUSH
50377: LD_EXP 54
50381: PUSH
50382: LD_EXP 55
50386: PUSH
50387: LD_EXP 57
50391: PUSH
50392: LD_EXP 58
50396: PUSH
50397: LD_EXP 59
50401: PUSH
50402: LD_EXP 62
50406: PUSH
50407: LD_EXP 64
50411: PUSH
50412: LD_EXP 65
50416: PUSH
50417: LD_EXP 66
50421: PUSH
50422: LD_EXP 68
50426: PUSH
50427: LD_EXP 69
50431: PUSH
50432: LD_EXP 72
50436: PUSH
50437: LD_EXP 73
50441: PUSH
50442: LD_EXP 74
50446: PUSH
50447: LD_EXP 75
50451: PUSH
50452: LD_EXP 76
50456: PUSH
50457: LD_EXP 77
50461: PUSH
50462: LD_EXP 78
50466: PUSH
50467: LD_EXP 79
50471: PUSH
50472: LD_EXP 80
50476: PUSH
50477: LD_EXP 45
50481: PUSH
50482: LD_EXP 46
50486: PUSH
50487: LD_EXP 49
50491: PUSH
50492: LD_EXP 50
50496: PUSH
50497: LD_EXP 51
50501: PUSH
50502: LD_EXP 47
50506: PUSH
50507: LD_EXP 48
50511: PUSH
50512: LD_EXP 56
50516: PUSH
50517: LD_EXP 60
50521: PUSH
50522: LD_EXP 61
50526: PUSH
50527: LD_EXP 63
50531: PUSH
50532: LD_EXP 67
50536: PUSH
50537: LD_EXP 70
50541: PUSH
50542: LD_EXP 71
50546: PUSH
50547: LD_EXP 81
50551: PUSH
50552: LD_EXP 82
50556: PUSH
50557: LD_EXP 83
50561: PUSH
50562: LD_EXP 84
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: ST_TO_ADDR
// tmp :=  ;
50623: LD_ADDR_VAR 0 3
50627: PUSH
50628: LD_STRING 
50630: ST_TO_ADDR
// for i = 1 to normalCounter do
50631: LD_ADDR_VAR 0 8
50635: PUSH
50636: DOUBLE
50637: LD_INT 1
50639: DEC
50640: ST_TO_ADDR
50641: LD_EXP 29
50645: PUSH
50646: FOR_TO
50647: IFFALSE 50683
// begin if flags [ i ] then
50649: LD_VAR 0 4
50653: PUSH
50654: LD_VAR 0 8
50658: ARRAY
50659: IFFALSE 50681
// tmp := tmp & i & ; ;
50661: LD_ADDR_VAR 0 3
50665: PUSH
50666: LD_VAR 0 3
50670: PUSH
50671: LD_VAR 0 8
50675: STR
50676: PUSH
50677: LD_STRING ;
50679: STR
50680: ST_TO_ADDR
// end ;
50681: GO 50646
50683: POP
50684: POP
// for i = 1 to hardcoreCounter do
50685: LD_ADDR_VAR 0 8
50689: PUSH
50690: DOUBLE
50691: LD_INT 1
50693: DEC
50694: ST_TO_ADDR
50695: LD_EXP 30
50699: PUSH
50700: FOR_TO
50701: IFFALSE 50747
// begin if flags [ normalCounter + i ] then
50703: LD_VAR 0 4
50707: PUSH
50708: LD_EXP 29
50712: PUSH
50713: LD_VAR 0 8
50717: PLUS
50718: ARRAY
50719: IFFALSE 50745
// tmp := tmp & ( 100 + i ) & ; ;
50721: LD_ADDR_VAR 0 3
50725: PUSH
50726: LD_VAR 0 3
50730: PUSH
50731: LD_INT 100
50733: PUSH
50734: LD_VAR 0 8
50738: PLUS
50739: STR
50740: PUSH
50741: LD_STRING ;
50743: STR
50744: ST_TO_ADDR
// end ;
50745: GO 50700
50747: POP
50748: POP
// if tmp then
50749: LD_VAR 0 3
50753: IFFALSE 50765
// active := tmp ;
50755: LD_ADDR_VAR 0 7
50759: PUSH
50760: LD_VAR 0 3
50764: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
50765: LD_STRING getStreamItemsFromMission("
50767: PUSH
50768: LD_VAR 0 5
50772: STR
50773: PUSH
50774: LD_STRING ","
50776: STR
50777: PUSH
50778: LD_VAR 0 6
50782: STR
50783: PUSH
50784: LD_STRING ","
50786: STR
50787: PUSH
50788: LD_VAR 0 7
50792: STR
50793: PUSH
50794: LD_STRING ")
50796: STR
50797: PPUSH
50798: CALL_OW 559
// end else
50802: GO 50811
// ToLua ( getStreamItemsFromMission("","","") ) ;
50804: LD_STRING getStreamItemsFromMission("","","")
50806: PPUSH
50807: CALL_OW 559
// end ;
50811: LD_VAR 0 2
50815: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50816: LD_EXP 28
50820: PUSH
50821: LD_EXP 33
50825: AND
50826: IFFALSE 50950
50828: GO 50830
50830: DISABLE
50831: LD_INT 0
50833: PPUSH
50834: PPUSH
// begin enable ;
50835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
50836: LD_ADDR_VAR 0 2
50840: PUSH
50841: LD_INT 22
50843: PUSH
50844: LD_OWVAR 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 34
50858: PUSH
50859: LD_INT 7
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 34
50868: PUSH
50869: LD_INT 45
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 34
50878: PUSH
50879: LD_INT 28
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 34
50888: PUSH
50889: LD_INT 47
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PPUSH
50907: CALL_OW 69
50911: ST_TO_ADDR
// if not tmp then
50912: LD_VAR 0 2
50916: NOT
50917: IFFALSE 50921
// exit ;
50919: GO 50950
// for i in tmp do
50921: LD_ADDR_VAR 0 1
50925: PUSH
50926: LD_VAR 0 2
50930: PUSH
50931: FOR_IN
50932: IFFALSE 50948
// begin SetLives ( i , 0 ) ;
50934: LD_VAR 0 1
50938: PPUSH
50939: LD_INT 0
50941: PPUSH
50942: CALL_OW 234
// end ;
50946: GO 50931
50948: POP
50949: POP
// end ;
50950: PPOPN 2
50952: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
50953: LD_EXP 28
50957: PUSH
50958: LD_EXP 34
50962: AND
50963: IFFALSE 51047
50965: GO 50967
50967: DISABLE
50968: LD_INT 0
50970: PPUSH
50971: PPUSH
// begin enable ;
50972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
50973: LD_ADDR_VAR 0 2
50977: PUSH
50978: LD_INT 22
50980: PUSH
50981: LD_OWVAR 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 32
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PPUSH
51004: CALL_OW 69
51008: ST_TO_ADDR
// if not tmp then
51009: LD_VAR 0 2
51013: NOT
51014: IFFALSE 51018
// exit ;
51016: GO 51047
// for i in tmp do
51018: LD_ADDR_VAR 0 1
51022: PUSH
51023: LD_VAR 0 2
51027: PUSH
51028: FOR_IN
51029: IFFALSE 51045
// begin SetLives ( i , 0 ) ;
51031: LD_VAR 0 1
51035: PPUSH
51036: LD_INT 0
51038: PPUSH
51039: CALL_OW 234
// end ;
51043: GO 51028
51045: POP
51046: POP
// end ;
51047: PPOPN 2
51049: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51050: LD_EXP 28
51054: PUSH
51055: LD_EXP 31
51059: AND
51060: IFFALSE 51153
51062: GO 51064
51064: DISABLE
51065: LD_INT 0
51067: PPUSH
// begin enable ;
51068: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51069: LD_ADDR_VAR 0 1
51073: PUSH
51074: LD_INT 22
51076: PUSH
51077: LD_OWVAR 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 25
51091: PUSH
51092: LD_INT 5
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 25
51101: PUSH
51102: LD_INT 9
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 25
51111: PUSH
51112: LD_INT 8
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PPUSH
51129: CALL_OW 69
51133: PUSH
51134: FOR_IN
51135: IFFALSE 51151
// begin SetClass ( i , 1 ) ;
51137: LD_VAR 0 1
51141: PPUSH
51142: LD_INT 1
51144: PPUSH
51145: CALL_OW 336
// end ;
51149: GO 51134
51151: POP
51152: POP
// end ;
51153: PPOPN 1
51155: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51156: LD_EXP 28
51160: PUSH
51161: LD_EXP 32
51165: AND
51166: PUSH
51167: LD_OWVAR 65
51171: PUSH
51172: LD_INT 7
51174: LESS
51175: AND
51176: IFFALSE 51190
51178: GO 51180
51180: DISABLE
// begin enable ;
51181: ENABLE
// game_speed := 7 ;
51182: LD_ADDR_OWVAR 65
51186: PUSH
51187: LD_INT 7
51189: ST_TO_ADDR
// end ;
51190: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51191: LD_EXP 28
51195: PUSH
51196: LD_EXP 35
51200: AND
51201: IFFALSE 51403
51203: GO 51205
51205: DISABLE
51206: LD_INT 0
51208: PPUSH
51209: PPUSH
51210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51211: LD_ADDR_VAR 0 3
51215: PUSH
51216: LD_INT 81
51218: PUSH
51219: LD_OWVAR 2
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 21
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 69
51246: ST_TO_ADDR
// if not tmp then
51247: LD_VAR 0 3
51251: NOT
51252: IFFALSE 51256
// exit ;
51254: GO 51403
// if tmp > 5 then
51256: LD_VAR 0 3
51260: PUSH
51261: LD_INT 5
51263: GREATER
51264: IFFALSE 51276
// k := 5 else
51266: LD_ADDR_VAR 0 2
51270: PUSH
51271: LD_INT 5
51273: ST_TO_ADDR
51274: GO 51286
// k := tmp ;
51276: LD_ADDR_VAR 0 2
51280: PUSH
51281: LD_VAR 0 3
51285: ST_TO_ADDR
// for i := 1 to k do
51286: LD_ADDR_VAR 0 1
51290: PUSH
51291: DOUBLE
51292: LD_INT 1
51294: DEC
51295: ST_TO_ADDR
51296: LD_VAR 0 2
51300: PUSH
51301: FOR_TO
51302: IFFALSE 51401
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51304: LD_VAR 0 3
51308: PUSH
51309: LD_VAR 0 1
51313: ARRAY
51314: PPUSH
51315: LD_VAR 0 1
51319: PUSH
51320: LD_INT 4
51322: MOD
51323: PUSH
51324: LD_INT 1
51326: PLUS
51327: PPUSH
51328: CALL_OW 259
51332: PUSH
51333: LD_INT 10
51335: LESS
51336: IFFALSE 51399
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51338: LD_VAR 0 3
51342: PUSH
51343: LD_VAR 0 1
51347: ARRAY
51348: PPUSH
51349: LD_VAR 0 1
51353: PUSH
51354: LD_INT 4
51356: MOD
51357: PUSH
51358: LD_INT 1
51360: PLUS
51361: PPUSH
51362: LD_VAR 0 3
51366: PUSH
51367: LD_VAR 0 1
51371: ARRAY
51372: PPUSH
51373: LD_VAR 0 1
51377: PUSH
51378: LD_INT 4
51380: MOD
51381: PUSH
51382: LD_INT 1
51384: PLUS
51385: PPUSH
51386: CALL_OW 259
51390: PUSH
51391: LD_INT 1
51393: PLUS
51394: PPUSH
51395: CALL_OW 237
51399: GO 51301
51401: POP
51402: POP
// end ;
51403: PPOPN 3
51405: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51406: LD_EXP 28
51410: PUSH
51411: LD_EXP 36
51415: AND
51416: IFFALSE 51436
51418: GO 51420
51420: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51421: LD_INT 4
51423: PPUSH
51424: LD_OWVAR 2
51428: PPUSH
51429: LD_INT 0
51431: PPUSH
51432: CALL_OW 324
51436: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51437: LD_EXP 28
51441: PUSH
51442: LD_EXP 65
51446: AND
51447: IFFALSE 51467
51449: GO 51451
51451: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51452: LD_INT 19
51454: PPUSH
51455: LD_OWVAR 2
51459: PPUSH
51460: LD_INT 0
51462: PPUSH
51463: CALL_OW 324
51467: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51468: LD_EXP 28
51472: PUSH
51473: LD_EXP 37
51477: AND
51478: IFFALSE 51580
51480: GO 51482
51482: DISABLE
51483: LD_INT 0
51485: PPUSH
51486: PPUSH
// begin enable ;
51487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51488: LD_ADDR_VAR 0 2
51492: PUSH
51493: LD_INT 22
51495: PUSH
51496: LD_OWVAR 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 34
51510: PUSH
51511: LD_INT 11
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 34
51520: PUSH
51521: LD_INT 30
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PPUSH
51537: CALL_OW 69
51541: ST_TO_ADDR
// if not tmp then
51542: LD_VAR 0 2
51546: NOT
51547: IFFALSE 51551
// exit ;
51549: GO 51580
// for i in tmp do
51551: LD_ADDR_VAR 0 1
51555: PUSH
51556: LD_VAR 0 2
51560: PUSH
51561: FOR_IN
51562: IFFALSE 51578
// begin SetLives ( i , 0 ) ;
51564: LD_VAR 0 1
51568: PPUSH
51569: LD_INT 0
51571: PPUSH
51572: CALL_OW 234
// end ;
51576: GO 51561
51578: POP
51579: POP
// end ;
51580: PPOPN 2
51582: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51583: LD_EXP 28
51587: PUSH
51588: LD_EXP 38
51592: AND
51593: IFFALSE 51613
51595: GO 51597
51597: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51598: LD_INT 32
51600: PPUSH
51601: LD_OWVAR 2
51605: PPUSH
51606: LD_INT 0
51608: PPUSH
51609: CALL_OW 324
51613: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51614: LD_EXP 28
51618: PUSH
51619: LD_EXP 39
51623: AND
51624: IFFALSE 51805
51626: GO 51628
51628: DISABLE
51629: LD_INT 0
51631: PPUSH
51632: PPUSH
51633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51634: LD_ADDR_VAR 0 2
51638: PUSH
51639: LD_INT 22
51641: PUSH
51642: LD_OWVAR 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 33
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PPUSH
51665: CALL_OW 69
51669: ST_TO_ADDR
// if not tmp then
51670: LD_VAR 0 2
51674: NOT
51675: IFFALSE 51679
// exit ;
51677: GO 51805
// side := 0 ;
51679: LD_ADDR_VAR 0 3
51683: PUSH
51684: LD_INT 0
51686: ST_TO_ADDR
// for i := 1 to 8 do
51687: LD_ADDR_VAR 0 1
51691: PUSH
51692: DOUBLE
51693: LD_INT 1
51695: DEC
51696: ST_TO_ADDR
51697: LD_INT 8
51699: PUSH
51700: FOR_TO
51701: IFFALSE 51749
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
51703: LD_OWVAR 2
51707: PUSH
51708: LD_VAR 0 1
51712: NONEQUAL
51713: PUSH
51714: LD_OWVAR 2
51718: PPUSH
51719: LD_VAR 0 1
51723: PPUSH
51724: CALL_OW 81
51728: PUSH
51729: LD_INT 2
51731: EQUAL
51732: AND
51733: IFFALSE 51747
// begin side := i ;
51735: LD_ADDR_VAR 0 3
51739: PUSH
51740: LD_VAR 0 1
51744: ST_TO_ADDR
// break ;
51745: GO 51749
// end ;
51747: GO 51700
51749: POP
51750: POP
// if not side then
51751: LD_VAR 0 3
51755: NOT
51756: IFFALSE 51760
// exit ;
51758: GO 51805
// for i := 1 to tmp do
51760: LD_ADDR_VAR 0 1
51764: PUSH
51765: DOUBLE
51766: LD_INT 1
51768: DEC
51769: ST_TO_ADDR
51770: LD_VAR 0 2
51774: PUSH
51775: FOR_TO
51776: IFFALSE 51803
// if Prob ( 60 ) then
51778: LD_INT 60
51780: PPUSH
51781: CALL_OW 13
51785: IFFALSE 51801
// SetSide ( i , side ) ;
51787: LD_VAR 0 1
51791: PPUSH
51792: LD_VAR 0 3
51796: PPUSH
51797: CALL_OW 235
51801: GO 51775
51803: POP
51804: POP
// end ;
51805: PPOPN 3
51807: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51808: LD_EXP 28
51812: PUSH
51813: LD_EXP 41
51817: AND
51818: IFFALSE 51937
51820: GO 51822
51822: DISABLE
51823: LD_INT 0
51825: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51826: LD_ADDR_VAR 0 1
51830: PUSH
51831: LD_INT 22
51833: PUSH
51834: LD_OWVAR 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 21
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: LD_INT 23
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: PPUSH
51875: CALL_OW 69
51879: PUSH
51880: FOR_IN
51881: IFFALSE 51935
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51883: LD_VAR 0 1
51887: PPUSH
51888: CALL_OW 257
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: LD_INT 4
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: IN
51911: IFFALSE 51933
// SetClass ( un , rand ( 1 , 4 ) ) ;
51913: LD_VAR 0 1
51917: PPUSH
51918: LD_INT 1
51920: PPUSH
51921: LD_INT 4
51923: PPUSH
51924: CALL_OW 12
51928: PPUSH
51929: CALL_OW 336
51933: GO 51880
51935: POP
51936: POP
// end ;
51937: PPOPN 1
51939: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
51940: LD_EXP 28
51944: PUSH
51945: LD_EXP 40
51949: AND
51950: IFFALSE 52029
51952: GO 51954
51954: DISABLE
51955: LD_INT 0
51957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51958: LD_ADDR_VAR 0 1
51962: PUSH
51963: LD_INT 22
51965: PUSH
51966: LD_OWVAR 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 21
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PPUSH
51989: CALL_OW 69
51993: ST_TO_ADDR
// if not tmp then
51994: LD_VAR 0 1
51998: NOT
51999: IFFALSE 52003
// exit ;
52001: GO 52029
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52003: LD_VAR 0 1
52007: PUSH
52008: LD_INT 1
52010: PPUSH
52011: LD_VAR 0 1
52015: PPUSH
52016: CALL_OW 12
52020: ARRAY
52021: PPUSH
52022: LD_INT 100
52024: PPUSH
52025: CALL_OW 234
// end ;
52029: PPOPN 1
52031: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52032: LD_EXP 28
52036: PUSH
52037: LD_EXP 42
52041: AND
52042: IFFALSE 52140
52044: GO 52046
52046: DISABLE
52047: LD_INT 0
52049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52050: LD_ADDR_VAR 0 1
52054: PUSH
52055: LD_INT 22
52057: PUSH
52058: LD_OWVAR 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 21
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PPUSH
52081: CALL_OW 69
52085: ST_TO_ADDR
// if not tmp then
52086: LD_VAR 0 1
52090: NOT
52091: IFFALSE 52095
// exit ;
52093: GO 52140
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52095: LD_VAR 0 1
52099: PUSH
52100: LD_INT 1
52102: PPUSH
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 12
52112: ARRAY
52113: PPUSH
52114: LD_INT 1
52116: PPUSH
52117: LD_INT 4
52119: PPUSH
52120: CALL_OW 12
52124: PPUSH
52125: LD_INT 3000
52127: PPUSH
52128: LD_INT 9000
52130: PPUSH
52131: CALL_OW 12
52135: PPUSH
52136: CALL_OW 492
// end ;
52140: PPOPN 1
52142: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52143: LD_EXP 28
52147: PUSH
52148: LD_EXP 43
52152: AND
52153: IFFALSE 52173
52155: GO 52157
52157: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52158: LD_INT 1
52160: PPUSH
52161: LD_OWVAR 2
52165: PPUSH
52166: LD_INT 0
52168: PPUSH
52169: CALL_OW 324
52173: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52174: LD_EXP 28
52178: PUSH
52179: LD_EXP 44
52183: AND
52184: IFFALSE 52267
52186: GO 52188
52188: DISABLE
52189: LD_INT 0
52191: PPUSH
52192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52193: LD_ADDR_VAR 0 2
52197: PUSH
52198: LD_INT 22
52200: PUSH
52201: LD_OWVAR 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 21
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PPUSH
52224: CALL_OW 69
52228: ST_TO_ADDR
// if not tmp then
52229: LD_VAR 0 2
52233: NOT
52234: IFFALSE 52238
// exit ;
52236: GO 52267
// for i in tmp do
52238: LD_ADDR_VAR 0 1
52242: PUSH
52243: LD_VAR 0 2
52247: PUSH
52248: FOR_IN
52249: IFFALSE 52265
// SetBLevel ( i , 10 ) ;
52251: LD_VAR 0 1
52255: PPUSH
52256: LD_INT 10
52258: PPUSH
52259: CALL_OW 241
52263: GO 52248
52265: POP
52266: POP
// end ;
52267: PPOPN 2
52269: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52270: LD_EXP 28
52274: PUSH
52275: LD_EXP 45
52279: AND
52280: IFFALSE 52391
52282: GO 52284
52284: DISABLE
52285: LD_INT 0
52287: PPUSH
52288: PPUSH
52289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52290: LD_ADDR_VAR 0 3
52294: PUSH
52295: LD_INT 22
52297: PUSH
52298: LD_OWVAR 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 25
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PPUSH
52321: CALL_OW 69
52325: ST_TO_ADDR
// if not tmp then
52326: LD_VAR 0 3
52330: NOT
52331: IFFALSE 52335
// exit ;
52333: GO 52391
// un := tmp [ rand ( 1 , tmp ) ] ;
52335: LD_ADDR_VAR 0 2
52339: PUSH
52340: LD_VAR 0 3
52344: PUSH
52345: LD_INT 1
52347: PPUSH
52348: LD_VAR 0 3
52352: PPUSH
52353: CALL_OW 12
52357: ARRAY
52358: ST_TO_ADDR
// if Crawls ( un ) then
52359: LD_VAR 0 2
52363: PPUSH
52364: CALL_OW 318
52368: IFFALSE 52379
// ComWalk ( un ) ;
52370: LD_VAR 0 2
52374: PPUSH
52375: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52379: LD_VAR 0 2
52383: PPUSH
52384: LD_INT 5
52386: PPUSH
52387: CALL_OW 336
// end ;
52391: PPOPN 3
52393: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52394: LD_EXP 28
52398: PUSH
52399: LD_EXP 46
52403: AND
52404: PUSH
52405: LD_OWVAR 67
52409: PUSH
52410: LD_INT 4
52412: LESS
52413: AND
52414: IFFALSE 52433
52416: GO 52418
52418: DISABLE
// begin Difficulty := Difficulty + 1 ;
52419: LD_ADDR_OWVAR 67
52423: PUSH
52424: LD_OWVAR 67
52428: PUSH
52429: LD_INT 1
52431: PLUS
52432: ST_TO_ADDR
// end ;
52433: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52434: LD_EXP 28
52438: PUSH
52439: LD_EXP 47
52443: AND
52444: IFFALSE 52547
52446: GO 52448
52448: DISABLE
52449: LD_INT 0
52451: PPUSH
// begin for i := 1 to 5 do
52452: LD_ADDR_VAR 0 1
52456: PUSH
52457: DOUBLE
52458: LD_INT 1
52460: DEC
52461: ST_TO_ADDR
52462: LD_INT 5
52464: PUSH
52465: FOR_TO
52466: IFFALSE 52545
// begin uc_nation := nation_nature ;
52468: LD_ADDR_OWVAR 21
52472: PUSH
52473: LD_INT 0
52475: ST_TO_ADDR
// uc_side := 0 ;
52476: LD_ADDR_OWVAR 20
52480: PUSH
52481: LD_INT 0
52483: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52484: LD_ADDR_OWVAR 29
52488: PUSH
52489: LD_INT 12
52491: PUSH
52492: LD_INT 12
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// hc_agressivity := 20 ;
52499: LD_ADDR_OWVAR 35
52503: PUSH
52504: LD_INT 20
52506: ST_TO_ADDR
// hc_class := class_tiger ;
52507: LD_ADDR_OWVAR 28
52511: PUSH
52512: LD_INT 14
52514: ST_TO_ADDR
// hc_gallery :=  ;
52515: LD_ADDR_OWVAR 33
52519: PUSH
52520: LD_STRING 
52522: ST_TO_ADDR
// hc_name :=  ;
52523: LD_ADDR_OWVAR 26
52527: PUSH
52528: LD_STRING 
52530: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52531: CALL_OW 44
52535: PPUSH
52536: LD_INT 0
52538: PPUSH
52539: CALL_OW 51
// end ;
52543: GO 52465
52545: POP
52546: POP
// end ;
52547: PPOPN 1
52549: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52550: LD_EXP 28
52554: PUSH
52555: LD_EXP 48
52559: AND
52560: IFFALSE 52569
52562: GO 52564
52564: DISABLE
// StreamSibBomb ;
52565: CALL 52570 0 0
52569: END
// export function StreamSibBomb ; var i , x , y ; begin
52570: LD_INT 0
52572: PPUSH
52573: PPUSH
52574: PPUSH
52575: PPUSH
// result := false ;
52576: LD_ADDR_VAR 0 1
52580: PUSH
52581: LD_INT 0
52583: ST_TO_ADDR
// for i := 1 to 16 do
52584: LD_ADDR_VAR 0 2
52588: PUSH
52589: DOUBLE
52590: LD_INT 1
52592: DEC
52593: ST_TO_ADDR
52594: LD_INT 16
52596: PUSH
52597: FOR_TO
52598: IFFALSE 52797
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52600: LD_ADDR_VAR 0 3
52604: PUSH
52605: LD_INT 10
52607: PUSH
52608: LD_INT 20
52610: PUSH
52611: LD_INT 30
52613: PUSH
52614: LD_INT 40
52616: PUSH
52617: LD_INT 50
52619: PUSH
52620: LD_INT 60
52622: PUSH
52623: LD_INT 70
52625: PUSH
52626: LD_INT 80
52628: PUSH
52629: LD_INT 90
52631: PUSH
52632: LD_INT 100
52634: PUSH
52635: LD_INT 110
52637: PUSH
52638: LD_INT 120
52640: PUSH
52641: LD_INT 130
52643: PUSH
52644: LD_INT 140
52646: PUSH
52647: LD_INT 150
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PPUSH
52670: LD_INT 15
52672: PPUSH
52673: CALL_OW 12
52677: ARRAY
52678: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52679: LD_ADDR_VAR 0 4
52683: PUSH
52684: LD_INT 10
52686: PUSH
52687: LD_INT 20
52689: PUSH
52690: LD_INT 30
52692: PUSH
52693: LD_INT 40
52695: PUSH
52696: LD_INT 50
52698: PUSH
52699: LD_INT 60
52701: PUSH
52702: LD_INT 70
52704: PUSH
52705: LD_INT 80
52707: PUSH
52708: LD_INT 90
52710: PUSH
52711: LD_INT 100
52713: PUSH
52714: LD_INT 110
52716: PUSH
52717: LD_INT 120
52719: PUSH
52720: LD_INT 130
52722: PUSH
52723: LD_INT 140
52725: PUSH
52726: LD_INT 150
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PPUSH
52749: LD_INT 15
52751: PPUSH
52752: CALL_OW 12
52756: ARRAY
52757: ST_TO_ADDR
// if ValidHex ( x , y ) then
52758: LD_VAR 0 3
52762: PPUSH
52763: LD_VAR 0 4
52767: PPUSH
52768: CALL_OW 488
52772: IFFALSE 52795
// begin result := [ x , y ] ;
52774: LD_ADDR_VAR 0 1
52778: PUSH
52779: LD_VAR 0 3
52783: PUSH
52784: LD_VAR 0 4
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: ST_TO_ADDR
// break ;
52793: GO 52797
// end ; end ;
52795: GO 52597
52797: POP
52798: POP
// if result then
52799: LD_VAR 0 1
52803: IFFALSE 52863
// begin ToLua ( playSibBomb() ) ;
52805: LD_STRING playSibBomb()
52807: PPUSH
52808: CALL_OW 559
// wait ( 0 0$14 ) ;
52812: LD_INT 490
52814: PPUSH
52815: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52819: LD_VAR 0 1
52823: PUSH
52824: LD_INT 1
52826: ARRAY
52827: PPUSH
52828: LD_VAR 0 1
52832: PUSH
52833: LD_INT 2
52835: ARRAY
52836: PPUSH
52837: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52841: LD_VAR 0 1
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PPUSH
52850: LD_VAR 0 1
52854: PUSH
52855: LD_INT 2
52857: ARRAY
52858: PPUSH
52859: CALL_OW 429
// end ; end ;
52863: LD_VAR 0 1
52867: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52868: LD_EXP 28
52872: PUSH
52873: LD_EXP 50
52877: AND
52878: IFFALSE 52890
52880: GO 52882
52882: DISABLE
// YouLost (  ) ;
52883: LD_STRING 
52885: PPUSH
52886: CALL_OW 104
52890: END
// every 0 0$1 trigger StreamModeActive and sFog do
52891: LD_EXP 28
52895: PUSH
52896: LD_EXP 49
52900: AND
52901: IFFALSE 52915
52903: GO 52905
52905: DISABLE
// FogOff ( your_side ) ;
52906: LD_OWVAR 2
52910: PPUSH
52911: CALL_OW 344
52915: END
// every 0 0$1 trigger StreamModeActive and sSun do
52916: LD_EXP 28
52920: PUSH
52921: LD_EXP 51
52925: AND
52926: IFFALSE 52954
52928: GO 52930
52930: DISABLE
// begin solar_recharge_percent := 0 ;
52931: LD_ADDR_OWVAR 79
52935: PUSH
52936: LD_INT 0
52938: ST_TO_ADDR
// wait ( 5 5$00 ) ;
52939: LD_INT 10500
52941: PPUSH
52942: CALL_OW 67
// solar_recharge_percent := 100 ;
52946: LD_ADDR_OWVAR 79
52950: PUSH
52951: LD_INT 100
52953: ST_TO_ADDR
// end ;
52954: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
52955: LD_EXP 28
52959: PUSH
52960: LD_EXP 52
52964: AND
52965: IFFALSE 53204
52967: GO 52969
52969: DISABLE
52970: LD_INT 0
52972: PPUSH
52973: PPUSH
52974: PPUSH
// begin tmp := [ ] ;
52975: LD_ADDR_VAR 0 3
52979: PUSH
52980: EMPTY
52981: ST_TO_ADDR
// for i := 1 to 6 do
52982: LD_ADDR_VAR 0 1
52986: PUSH
52987: DOUBLE
52988: LD_INT 1
52990: DEC
52991: ST_TO_ADDR
52992: LD_INT 6
52994: PUSH
52995: FOR_TO
52996: IFFALSE 53101
// begin uc_nation := nation_nature ;
52998: LD_ADDR_OWVAR 21
53002: PUSH
53003: LD_INT 0
53005: ST_TO_ADDR
// uc_side := 0 ;
53006: LD_ADDR_OWVAR 20
53010: PUSH
53011: LD_INT 0
53013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53014: LD_ADDR_OWVAR 29
53018: PUSH
53019: LD_INT 12
53021: PUSH
53022: LD_INT 12
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: ST_TO_ADDR
// hc_agressivity := 20 ;
53029: LD_ADDR_OWVAR 35
53033: PUSH
53034: LD_INT 20
53036: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53037: LD_ADDR_OWVAR 28
53041: PUSH
53042: LD_INT 17
53044: ST_TO_ADDR
// hc_gallery :=  ;
53045: LD_ADDR_OWVAR 33
53049: PUSH
53050: LD_STRING 
53052: ST_TO_ADDR
// hc_name :=  ;
53053: LD_ADDR_OWVAR 26
53057: PUSH
53058: LD_STRING 
53060: ST_TO_ADDR
// un := CreateHuman ;
53061: LD_ADDR_VAR 0 2
53065: PUSH
53066: CALL_OW 44
53070: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53071: LD_VAR 0 2
53075: PPUSH
53076: LD_INT 1
53078: PPUSH
53079: CALL_OW 51
// tmp := tmp ^ un ;
53083: LD_ADDR_VAR 0 3
53087: PUSH
53088: LD_VAR 0 3
53092: PUSH
53093: LD_VAR 0 2
53097: ADD
53098: ST_TO_ADDR
// end ;
53099: GO 52995
53101: POP
53102: POP
// repeat wait ( 0 0$1 ) ;
53103: LD_INT 35
53105: PPUSH
53106: CALL_OW 67
// for un in tmp do
53110: LD_ADDR_VAR 0 2
53114: PUSH
53115: LD_VAR 0 3
53119: PUSH
53120: FOR_IN
53121: IFFALSE 53195
// begin if IsDead ( un ) then
53123: LD_VAR 0 2
53127: PPUSH
53128: CALL_OW 301
53132: IFFALSE 53152
// begin tmp := tmp diff un ;
53134: LD_ADDR_VAR 0 3
53138: PUSH
53139: LD_VAR 0 3
53143: PUSH
53144: LD_VAR 0 2
53148: DIFF
53149: ST_TO_ADDR
// continue ;
53150: GO 53120
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53152: LD_VAR 0 2
53156: PPUSH
53157: LD_INT 3
53159: PUSH
53160: LD_INT 22
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PPUSH
53174: CALL_OW 69
53178: PPUSH
53179: LD_VAR 0 2
53183: PPUSH
53184: CALL_OW 74
53188: PPUSH
53189: CALL_OW 115
// end ;
53193: GO 53120
53195: POP
53196: POP
// until not tmp ;
53197: LD_VAR 0 3
53201: NOT
53202: IFFALSE 53103
// end ;
53204: PPOPN 3
53206: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53207: LD_EXP 28
53211: PUSH
53212: LD_EXP 53
53216: AND
53217: IFFALSE 53271
53219: GO 53221
53221: DISABLE
// begin ToLua ( displayTroll(); ) ;
53222: LD_STRING displayTroll();
53224: PPUSH
53225: CALL_OW 559
// wait ( 3 3$00 ) ;
53229: LD_INT 6300
53231: PPUSH
53232: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53236: LD_STRING hideTroll();
53238: PPUSH
53239: CALL_OW 559
// wait ( 1 1$00 ) ;
53243: LD_INT 2100
53245: PPUSH
53246: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53250: LD_STRING displayTroll();
53252: PPUSH
53253: CALL_OW 559
// wait ( 1 1$00 ) ;
53257: LD_INT 2100
53259: PPUSH
53260: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53264: LD_STRING hideTroll();
53266: PPUSH
53267: CALL_OW 559
// end ;
53271: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53272: LD_EXP 28
53276: PUSH
53277: LD_EXP 54
53281: AND
53282: IFFALSE 53345
53284: GO 53286
53286: DISABLE
53287: LD_INT 0
53289: PPUSH
// begin p := 0 ;
53290: LD_ADDR_VAR 0 1
53294: PUSH
53295: LD_INT 0
53297: ST_TO_ADDR
// repeat game_speed := 1 ;
53298: LD_ADDR_OWVAR 65
53302: PUSH
53303: LD_INT 1
53305: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53306: LD_INT 35
53308: PPUSH
53309: CALL_OW 67
// p := p + 1 ;
53313: LD_ADDR_VAR 0 1
53317: PUSH
53318: LD_VAR 0 1
53322: PUSH
53323: LD_INT 1
53325: PLUS
53326: ST_TO_ADDR
// until p >= 60 ;
53327: LD_VAR 0 1
53331: PUSH
53332: LD_INT 60
53334: GREATEREQUAL
53335: IFFALSE 53298
// game_speed := 4 ;
53337: LD_ADDR_OWVAR 65
53341: PUSH
53342: LD_INT 4
53344: ST_TO_ADDR
// end ;
53345: PPOPN 1
53347: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53348: LD_EXP 28
53352: PUSH
53353: LD_EXP 55
53357: AND
53358: IFFALSE 53504
53360: GO 53362
53362: DISABLE
53363: LD_INT 0
53365: PPUSH
53366: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53367: LD_ADDR_VAR 0 1
53371: PUSH
53372: LD_INT 22
53374: PUSH
53375: LD_OWVAR 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 30
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 30
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PPUSH
53416: CALL_OW 69
53420: ST_TO_ADDR
// if not depot then
53421: LD_VAR 0 1
53425: NOT
53426: IFFALSE 53430
// exit ;
53428: GO 53504
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53430: LD_ADDR_VAR 0 2
53434: PUSH
53435: LD_VAR 0 1
53439: PUSH
53440: LD_INT 1
53442: PPUSH
53443: LD_VAR 0 1
53447: PPUSH
53448: CALL_OW 12
53452: ARRAY
53453: PPUSH
53454: CALL_OW 274
53458: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53459: LD_VAR 0 2
53463: PPUSH
53464: LD_INT 1
53466: PPUSH
53467: LD_INT 0
53469: PPUSH
53470: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53474: LD_VAR 0 2
53478: PPUSH
53479: LD_INT 2
53481: PPUSH
53482: LD_INT 0
53484: PPUSH
53485: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53489: LD_VAR 0 2
53493: PPUSH
53494: LD_INT 3
53496: PPUSH
53497: LD_INT 0
53499: PPUSH
53500: CALL_OW 277
// end ;
53504: PPOPN 2
53506: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53507: LD_EXP 28
53511: PUSH
53512: LD_EXP 56
53516: AND
53517: IFFALSE 53614
53519: GO 53521
53521: DISABLE
53522: LD_INT 0
53524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53525: LD_ADDR_VAR 0 1
53529: PUSH
53530: LD_INT 22
53532: PUSH
53533: LD_OWVAR 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 21
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: LD_INT 23
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: LIST
53573: PPUSH
53574: CALL_OW 69
53578: ST_TO_ADDR
// if not tmp then
53579: LD_VAR 0 1
53583: NOT
53584: IFFALSE 53588
// exit ;
53586: GO 53614
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53588: LD_VAR 0 1
53592: PUSH
53593: LD_INT 1
53595: PPUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: CALL_OW 12
53605: ARRAY
53606: PPUSH
53607: LD_INT 200
53609: PPUSH
53610: CALL_OW 234
// end ;
53614: PPOPN 1
53616: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53617: LD_EXP 28
53621: PUSH
53622: LD_EXP 57
53626: AND
53627: IFFALSE 53706
53629: GO 53631
53631: DISABLE
53632: LD_INT 0
53634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53635: LD_ADDR_VAR 0 1
53639: PUSH
53640: LD_INT 22
53642: PUSH
53643: LD_OWVAR 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 21
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PPUSH
53666: CALL_OW 69
53670: ST_TO_ADDR
// if not tmp then
53671: LD_VAR 0 1
53675: NOT
53676: IFFALSE 53680
// exit ;
53678: GO 53706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53680: LD_VAR 0 1
53684: PUSH
53685: LD_INT 1
53687: PPUSH
53688: LD_VAR 0 1
53692: PPUSH
53693: CALL_OW 12
53697: ARRAY
53698: PPUSH
53699: LD_INT 60
53701: PPUSH
53702: CALL_OW 234
// end ;
53706: PPOPN 1
53708: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53709: LD_EXP 28
53713: PUSH
53714: LD_EXP 58
53718: AND
53719: IFFALSE 53818
53721: GO 53723
53723: DISABLE
53724: LD_INT 0
53726: PPUSH
53727: PPUSH
// begin enable ;
53728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
53729: LD_ADDR_VAR 0 1
53733: PUSH
53734: LD_INT 22
53736: PUSH
53737: LD_OWVAR 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 61
53748: PUSH
53749: EMPTY
53750: LIST
53751: PUSH
53752: LD_INT 33
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: PPUSH
53767: CALL_OW 69
53771: ST_TO_ADDR
// if not tmp then
53772: LD_VAR 0 1
53776: NOT
53777: IFFALSE 53781
// exit ;
53779: GO 53818
// for i in tmp do
53781: LD_ADDR_VAR 0 2
53785: PUSH
53786: LD_VAR 0 1
53790: PUSH
53791: FOR_IN
53792: IFFALSE 53816
// if IsControledBy ( i ) then
53794: LD_VAR 0 2
53798: PPUSH
53799: CALL_OW 312
53803: IFFALSE 53814
// ComUnlink ( i ) ;
53805: LD_VAR 0 2
53809: PPUSH
53810: CALL_OW 136
53814: GO 53791
53816: POP
53817: POP
// end ;
53818: PPOPN 2
53820: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53821: LD_EXP 28
53825: PUSH
53826: LD_EXP 59
53830: AND
53831: IFFALSE 53971
53833: GO 53835
53835: DISABLE
53836: LD_INT 0
53838: PPUSH
53839: PPUSH
// begin ToLua ( displayPowell(); ) ;
53840: LD_STRING displayPowell();
53842: PPUSH
53843: CALL_OW 559
// uc_side := 0 ;
53847: LD_ADDR_OWVAR 20
53851: PUSH
53852: LD_INT 0
53854: ST_TO_ADDR
// uc_nation := 2 ;
53855: LD_ADDR_OWVAR 21
53859: PUSH
53860: LD_INT 2
53862: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53863: LD_ADDR_OWVAR 37
53867: PUSH
53868: LD_INT 14
53870: ST_TO_ADDR
// vc_engine := engine_siberite ;
53871: LD_ADDR_OWVAR 39
53875: PUSH
53876: LD_INT 3
53878: ST_TO_ADDR
// vc_control := control_apeman ;
53879: LD_ADDR_OWVAR 38
53883: PUSH
53884: LD_INT 5
53886: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
53887: LD_ADDR_OWVAR 40
53891: PUSH
53892: LD_INT 29
53894: ST_TO_ADDR
// un := CreateVehicle ;
53895: LD_ADDR_VAR 0 2
53899: PUSH
53900: CALL_OW 45
53904: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53905: LD_VAR 0 2
53909: PPUSH
53910: LD_INT 1
53912: PPUSH
53913: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53917: LD_INT 35
53919: PPUSH
53920: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53924: LD_VAR 0 2
53928: PPUSH
53929: LD_INT 22
53931: PUSH
53932: LD_OWVAR 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PPUSH
53941: CALL_OW 69
53945: PPUSH
53946: LD_VAR 0 2
53950: PPUSH
53951: CALL_OW 74
53955: PPUSH
53956: CALL_OW 115
// until IsDead ( un ) ;
53960: LD_VAR 0 2
53964: PPUSH
53965: CALL_OW 301
53969: IFFALSE 53917
// end ;
53971: PPOPN 2
53973: END
// every 0 0$1 trigger StreamModeActive and sStu do
53974: LD_EXP 28
53978: PUSH
53979: LD_EXP 67
53983: AND
53984: IFFALSE 54000
53986: GO 53988
53988: DISABLE
// begin ToLua ( displayStucuk(); ) ;
53989: LD_STRING displayStucuk();
53991: PPUSH
53992: CALL_OW 559
// ResetFog ;
53996: CALL_OW 335
// end ;
54000: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54001: LD_EXP 28
54005: PUSH
54006: LD_EXP 60
54010: AND
54011: IFFALSE 54152
54013: GO 54015
54015: DISABLE
54016: LD_INT 0
54018: PPUSH
54019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54020: LD_ADDR_VAR 0 2
54024: PUSH
54025: LD_INT 22
54027: PUSH
54028: LD_OWVAR 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 21
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PPUSH
54051: CALL_OW 69
54055: ST_TO_ADDR
// if not tmp then
54056: LD_VAR 0 2
54060: NOT
54061: IFFALSE 54065
// exit ;
54063: GO 54152
// un := tmp [ rand ( 1 , tmp ) ] ;
54065: LD_ADDR_VAR 0 1
54069: PUSH
54070: LD_VAR 0 2
54074: PUSH
54075: LD_INT 1
54077: PPUSH
54078: LD_VAR 0 2
54082: PPUSH
54083: CALL_OW 12
54087: ARRAY
54088: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54089: LD_VAR 0 1
54093: PPUSH
54094: LD_INT 0
54096: PPUSH
54097: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54101: LD_VAR 0 1
54105: PPUSH
54106: LD_OWVAR 3
54110: PUSH
54111: LD_VAR 0 1
54115: DIFF
54116: PPUSH
54117: LD_VAR 0 1
54121: PPUSH
54122: CALL_OW 74
54126: PPUSH
54127: CALL_OW 115
// wait ( 0 0$20 ) ;
54131: LD_INT 700
54133: PPUSH
54134: CALL_OW 67
// SetSide ( un , your_side ) ;
54138: LD_VAR 0 1
54142: PPUSH
54143: LD_OWVAR 2
54147: PPUSH
54148: CALL_OW 235
// end ;
54152: PPOPN 2
54154: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54155: LD_EXP 28
54159: PUSH
54160: LD_EXP 61
54164: AND
54165: IFFALSE 54271
54167: GO 54169
54169: DISABLE
54170: LD_INT 0
54172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54173: LD_ADDR_VAR 0 1
54177: PUSH
54178: LD_INT 22
54180: PUSH
54181: LD_OWVAR 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 30
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 30
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PPUSH
54222: CALL_OW 69
54226: ST_TO_ADDR
// if not depot then
54227: LD_VAR 0 1
54231: NOT
54232: IFFALSE 54236
// exit ;
54234: GO 54271
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54236: LD_VAR 0 1
54240: PUSH
54241: LD_INT 1
54243: ARRAY
54244: PPUSH
54245: CALL_OW 250
54249: PPUSH
54250: LD_VAR 0 1
54254: PUSH
54255: LD_INT 1
54257: ARRAY
54258: PPUSH
54259: CALL_OW 251
54263: PPUSH
54264: LD_INT 70
54266: PPUSH
54267: CALL_OW 495
// end ;
54271: PPOPN 1
54273: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54274: LD_EXP 28
54278: PUSH
54279: LD_EXP 62
54283: AND
54284: IFFALSE 54495
54286: GO 54288
54288: DISABLE
54289: LD_INT 0
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
54295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54296: LD_ADDR_VAR 0 5
54300: PUSH
54301: LD_INT 22
54303: PUSH
54304: LD_OWVAR 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 21
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PPUSH
54327: CALL_OW 69
54331: ST_TO_ADDR
// if not tmp then
54332: LD_VAR 0 5
54336: NOT
54337: IFFALSE 54341
// exit ;
54339: GO 54495
// for i in tmp do
54341: LD_ADDR_VAR 0 1
54345: PUSH
54346: LD_VAR 0 5
54350: PUSH
54351: FOR_IN
54352: IFFALSE 54493
// begin d := rand ( 0 , 5 ) ;
54354: LD_ADDR_VAR 0 4
54358: PUSH
54359: LD_INT 0
54361: PPUSH
54362: LD_INT 5
54364: PPUSH
54365: CALL_OW 12
54369: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54370: LD_ADDR_VAR 0 2
54374: PUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: CALL_OW 250
54384: PPUSH
54385: LD_VAR 0 4
54389: PPUSH
54390: LD_INT 3
54392: PPUSH
54393: LD_INT 12
54395: PPUSH
54396: CALL_OW 12
54400: PPUSH
54401: CALL_OW 272
54405: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54406: LD_ADDR_VAR 0 3
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL_OW 251
54420: PPUSH
54421: LD_VAR 0 4
54425: PPUSH
54426: LD_INT 3
54428: PPUSH
54429: LD_INT 12
54431: PPUSH
54432: CALL_OW 12
54436: PPUSH
54437: CALL_OW 273
54441: ST_TO_ADDR
// if ValidHex ( x , y ) then
54442: LD_VAR 0 2
54446: PPUSH
54447: LD_VAR 0 3
54451: PPUSH
54452: CALL_OW 488
54456: IFFALSE 54491
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54458: LD_VAR 0 1
54462: PPUSH
54463: LD_VAR 0 2
54467: PPUSH
54468: LD_VAR 0 3
54472: PPUSH
54473: LD_INT 3
54475: PPUSH
54476: LD_INT 6
54478: PPUSH
54479: CALL_OW 12
54483: PPUSH
54484: LD_INT 1
54486: PPUSH
54487: CALL_OW 483
// end ;
54491: GO 54351
54493: POP
54494: POP
// end ;
54495: PPOPN 5
54497: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54498: LD_EXP 28
54502: PUSH
54503: LD_EXP 63
54507: AND
54508: IFFALSE 54602
54510: GO 54512
54512: DISABLE
54513: LD_INT 0
54515: PPUSH
54516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54517: LD_ADDR_VAR 0 2
54521: PUSH
54522: LD_INT 22
54524: PUSH
54525: LD_OWVAR 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 32
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 21
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: PPUSH
54559: CALL_OW 69
54563: ST_TO_ADDR
// if not tmp then
54564: LD_VAR 0 2
54568: NOT
54569: IFFALSE 54573
// exit ;
54571: GO 54602
// for i in tmp do
54573: LD_ADDR_VAR 0 1
54577: PUSH
54578: LD_VAR 0 2
54582: PUSH
54583: FOR_IN
54584: IFFALSE 54600
// SetFuel ( i , 0 ) ;
54586: LD_VAR 0 1
54590: PPUSH
54591: LD_INT 0
54593: PPUSH
54594: CALL_OW 240
54598: GO 54583
54600: POP
54601: POP
// end ;
54602: PPOPN 2
54604: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54605: LD_EXP 28
54609: PUSH
54610: LD_EXP 64
54614: AND
54615: IFFALSE 54681
54617: GO 54619
54619: DISABLE
54620: LD_INT 0
54622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54623: LD_ADDR_VAR 0 1
54627: PUSH
54628: LD_INT 22
54630: PUSH
54631: LD_OWVAR 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 30
54642: PUSH
54643: LD_INT 29
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PPUSH
54654: CALL_OW 69
54658: ST_TO_ADDR
// if not tmp then
54659: LD_VAR 0 1
54663: NOT
54664: IFFALSE 54668
// exit ;
54666: GO 54681
// DestroyUnit ( tmp [ 1 ] ) ;
54668: LD_VAR 0 1
54672: PUSH
54673: LD_INT 1
54675: ARRAY
54676: PPUSH
54677: CALL_OW 65
// end ;
54681: PPOPN 1
54683: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54684: LD_EXP 28
54688: PUSH
54689: LD_EXP 66
54693: AND
54694: IFFALSE 54823
54696: GO 54698
54698: DISABLE
54699: LD_INT 0
54701: PPUSH
// begin uc_side := 0 ;
54702: LD_ADDR_OWVAR 20
54706: PUSH
54707: LD_INT 0
54709: ST_TO_ADDR
// uc_nation := nation_arabian ;
54710: LD_ADDR_OWVAR 21
54714: PUSH
54715: LD_INT 2
54717: ST_TO_ADDR
// hc_gallery :=  ;
54718: LD_ADDR_OWVAR 33
54722: PUSH
54723: LD_STRING 
54725: ST_TO_ADDR
// hc_name :=  ;
54726: LD_ADDR_OWVAR 26
54730: PUSH
54731: LD_STRING 
54733: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
54734: LD_INT 1
54736: PPUSH
54737: LD_INT 11
54739: PPUSH
54740: LD_INT 10
54742: PPUSH
54743: CALL_OW 380
// un := CreateHuman ;
54747: LD_ADDR_VAR 0 1
54751: PUSH
54752: CALL_OW 44
54756: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54757: LD_VAR 0 1
54761: PPUSH
54762: LD_INT 1
54764: PPUSH
54765: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54769: LD_INT 35
54771: PPUSH
54772: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54776: LD_VAR 0 1
54780: PPUSH
54781: LD_INT 22
54783: PUSH
54784: LD_OWVAR 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PPUSH
54793: CALL_OW 69
54797: PPUSH
54798: LD_VAR 0 1
54802: PPUSH
54803: CALL_OW 74
54807: PPUSH
54808: CALL_OW 115
// until IsDead ( un ) ;
54812: LD_VAR 0 1
54816: PPUSH
54817: CALL_OW 301
54821: IFFALSE 54769
// end ;
54823: PPOPN 1
54825: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54826: LD_EXP 28
54830: PUSH
54831: LD_EXP 68
54835: AND
54836: IFFALSE 54848
54838: GO 54840
54840: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54841: LD_STRING earthquake(getX(game), 0, 32)
54843: PPUSH
54844: CALL_OW 559
54848: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54849: LD_EXP 28
54853: PUSH
54854: LD_EXP 69
54858: AND
54859: IFFALSE 54950
54861: GO 54863
54863: DISABLE
54864: LD_INT 0
54866: PPUSH
// begin enable ;
54867: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54868: LD_ADDR_VAR 0 1
54872: PUSH
54873: LD_INT 22
54875: PUSH
54876: LD_OWVAR 2
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 21
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 33
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: PPUSH
54910: CALL_OW 69
54914: ST_TO_ADDR
// if not tmp then
54915: LD_VAR 0 1
54919: NOT
54920: IFFALSE 54924
// exit ;
54922: GO 54950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54924: LD_VAR 0 1
54928: PUSH
54929: LD_INT 1
54931: PPUSH
54932: LD_VAR 0 1
54936: PPUSH
54937: CALL_OW 12
54941: ARRAY
54942: PPUSH
54943: LD_INT 1
54945: PPUSH
54946: CALL_OW 234
// end ;
54950: PPOPN 1
54952: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
54953: LD_EXP 28
54957: PUSH
54958: LD_EXP 70
54962: AND
54963: IFFALSE 55104
54965: GO 54967
54967: DISABLE
54968: LD_INT 0
54970: PPUSH
54971: PPUSH
54972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54973: LD_ADDR_VAR 0 3
54977: PUSH
54978: LD_INT 22
54980: PUSH
54981: LD_OWVAR 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 25
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PPUSH
55004: CALL_OW 69
55008: ST_TO_ADDR
// if not tmp then
55009: LD_VAR 0 3
55013: NOT
55014: IFFALSE 55018
// exit ;
55016: GO 55104
// un := tmp [ rand ( 1 , tmp ) ] ;
55018: LD_ADDR_VAR 0 2
55022: PUSH
55023: LD_VAR 0 3
55027: PUSH
55028: LD_INT 1
55030: PPUSH
55031: LD_VAR 0 3
55035: PPUSH
55036: CALL_OW 12
55040: ARRAY
55041: ST_TO_ADDR
// if Crawls ( un ) then
55042: LD_VAR 0 2
55046: PPUSH
55047: CALL_OW 318
55051: IFFALSE 55062
// ComWalk ( un ) ;
55053: LD_VAR 0 2
55057: PPUSH
55058: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55062: LD_VAR 0 2
55066: PPUSH
55067: LD_INT 9
55069: PPUSH
55070: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55074: LD_INT 28
55076: PPUSH
55077: LD_OWVAR 2
55081: PPUSH
55082: LD_INT 2
55084: PPUSH
55085: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55089: LD_INT 29
55091: PPUSH
55092: LD_OWVAR 2
55096: PPUSH
55097: LD_INT 2
55099: PPUSH
55100: CALL_OW 322
// end ;
55104: PPOPN 3
55106: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55107: LD_EXP 28
55111: PUSH
55112: LD_EXP 71
55116: AND
55117: IFFALSE 55228
55119: GO 55121
55121: DISABLE
55122: LD_INT 0
55124: PPUSH
55125: PPUSH
55126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55127: LD_ADDR_VAR 0 3
55131: PUSH
55132: LD_INT 22
55134: PUSH
55135: LD_OWVAR 2
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 25
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PPUSH
55158: CALL_OW 69
55162: ST_TO_ADDR
// if not tmp then
55163: LD_VAR 0 3
55167: NOT
55168: IFFALSE 55172
// exit ;
55170: GO 55228
// un := tmp [ rand ( 1 , tmp ) ] ;
55172: LD_ADDR_VAR 0 2
55176: PUSH
55177: LD_VAR 0 3
55181: PUSH
55182: LD_INT 1
55184: PPUSH
55185: LD_VAR 0 3
55189: PPUSH
55190: CALL_OW 12
55194: ARRAY
55195: ST_TO_ADDR
// if Crawls ( un ) then
55196: LD_VAR 0 2
55200: PPUSH
55201: CALL_OW 318
55205: IFFALSE 55216
// ComWalk ( un ) ;
55207: LD_VAR 0 2
55211: PPUSH
55212: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55216: LD_VAR 0 2
55220: PPUSH
55221: LD_INT 8
55223: PPUSH
55224: CALL_OW 336
// end ;
55228: PPOPN 3
55230: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55231: LD_EXP 28
55235: PUSH
55236: LD_EXP 72
55240: AND
55241: IFFALSE 55385
55243: GO 55245
55245: DISABLE
55246: LD_INT 0
55248: PPUSH
55249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55250: LD_ADDR_VAR 0 2
55254: PUSH
55255: LD_INT 22
55257: PUSH
55258: LD_OWVAR 2
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 21
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 34
55282: PUSH
55283: LD_INT 12
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 34
55292: PUSH
55293: LD_INT 51
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 34
55302: PUSH
55303: LD_INT 32
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: PPUSH
55321: CALL_OW 69
55325: ST_TO_ADDR
// if not tmp then
55326: LD_VAR 0 2
55330: NOT
55331: IFFALSE 55335
// exit ;
55333: GO 55385
// for i in tmp do
55335: LD_ADDR_VAR 0 1
55339: PUSH
55340: LD_VAR 0 2
55344: PUSH
55345: FOR_IN
55346: IFFALSE 55383
// if GetCargo ( i , mat_artifact ) = 0 then
55348: LD_VAR 0 1
55352: PPUSH
55353: LD_INT 4
55355: PPUSH
55356: CALL_OW 289
55360: PUSH
55361: LD_INT 0
55363: EQUAL
55364: IFFALSE 55381
// SetCargo ( i , mat_siberit , 100 ) ;
55366: LD_VAR 0 1
55370: PPUSH
55371: LD_INT 3
55373: PPUSH
55374: LD_INT 100
55376: PPUSH
55377: CALL_OW 290
55381: GO 55345
55383: POP
55384: POP
// end ;
55385: PPOPN 2
55387: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55388: LD_EXP 28
55392: PUSH
55393: LD_EXP 73
55397: AND
55398: IFFALSE 55581
55400: GO 55402
55402: DISABLE
55403: LD_INT 0
55405: PPUSH
55406: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55407: LD_ADDR_VAR 0 2
55411: PUSH
55412: LD_INT 22
55414: PUSH
55415: LD_OWVAR 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PPUSH
55424: CALL_OW 69
55428: ST_TO_ADDR
// if not tmp then
55429: LD_VAR 0 2
55433: NOT
55434: IFFALSE 55438
// exit ;
55436: GO 55581
// for i := 1 to 2 do
55438: LD_ADDR_VAR 0 1
55442: PUSH
55443: DOUBLE
55444: LD_INT 1
55446: DEC
55447: ST_TO_ADDR
55448: LD_INT 2
55450: PUSH
55451: FOR_TO
55452: IFFALSE 55579
// begin uc_side := your_side ;
55454: LD_ADDR_OWVAR 20
55458: PUSH
55459: LD_OWVAR 2
55463: ST_TO_ADDR
// uc_nation := nation_american ;
55464: LD_ADDR_OWVAR 21
55468: PUSH
55469: LD_INT 1
55471: ST_TO_ADDR
// vc_chassis := us_morphling ;
55472: LD_ADDR_OWVAR 37
55476: PUSH
55477: LD_INT 5
55479: ST_TO_ADDR
// vc_engine := engine_siberite ;
55480: LD_ADDR_OWVAR 39
55484: PUSH
55485: LD_INT 3
55487: ST_TO_ADDR
// vc_control := control_computer ;
55488: LD_ADDR_OWVAR 38
55492: PUSH
55493: LD_INT 3
55495: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55496: LD_ADDR_OWVAR 40
55500: PUSH
55501: LD_INT 10
55503: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55504: LD_VAR 0 2
55508: PUSH
55509: LD_INT 1
55511: ARRAY
55512: PPUSH
55513: CALL_OW 310
55517: NOT
55518: IFFALSE 55565
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55520: CALL_OW 45
55524: PPUSH
55525: LD_VAR 0 2
55529: PUSH
55530: LD_INT 1
55532: ARRAY
55533: PPUSH
55534: CALL_OW 250
55538: PPUSH
55539: LD_VAR 0 2
55543: PUSH
55544: LD_INT 1
55546: ARRAY
55547: PPUSH
55548: CALL_OW 251
55552: PPUSH
55553: LD_INT 12
55555: PPUSH
55556: LD_INT 1
55558: PPUSH
55559: CALL_OW 50
55563: GO 55577
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55565: CALL_OW 45
55569: PPUSH
55570: LD_INT 1
55572: PPUSH
55573: CALL_OW 51
// end ;
55577: GO 55451
55579: POP
55580: POP
// end ;
55581: PPOPN 2
55583: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55584: LD_EXP 28
55588: PUSH
55589: LD_EXP 74
55593: AND
55594: IFFALSE 55816
55596: GO 55598
55598: DISABLE
55599: LD_INT 0
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55607: LD_ADDR_VAR 0 6
55611: PUSH
55612: LD_INT 22
55614: PUSH
55615: LD_OWVAR 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 21
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 23
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: PPUSH
55656: CALL_OW 69
55660: ST_TO_ADDR
// if not tmp then
55661: LD_VAR 0 6
55665: NOT
55666: IFFALSE 55670
// exit ;
55668: GO 55816
// s1 := rand ( 1 , 4 ) ;
55670: LD_ADDR_VAR 0 2
55674: PUSH
55675: LD_INT 1
55677: PPUSH
55678: LD_INT 4
55680: PPUSH
55681: CALL_OW 12
55685: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
55686: LD_ADDR_VAR 0 4
55690: PUSH
55691: LD_VAR 0 6
55695: PUSH
55696: LD_INT 1
55698: ARRAY
55699: PPUSH
55700: LD_VAR 0 2
55704: PPUSH
55705: CALL_OW 259
55709: ST_TO_ADDR
// if s1 = 1 then
55710: LD_VAR 0 2
55714: PUSH
55715: LD_INT 1
55717: EQUAL
55718: IFFALSE 55738
// s2 := rand ( 2 , 4 ) else
55720: LD_ADDR_VAR 0 3
55724: PUSH
55725: LD_INT 2
55727: PPUSH
55728: LD_INT 4
55730: PPUSH
55731: CALL_OW 12
55735: ST_TO_ADDR
55736: GO 55746
// s2 := 1 ;
55738: LD_ADDR_VAR 0 3
55742: PUSH
55743: LD_INT 1
55745: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
55746: LD_ADDR_VAR 0 5
55750: PUSH
55751: LD_VAR 0 6
55755: PUSH
55756: LD_INT 1
55758: ARRAY
55759: PPUSH
55760: LD_VAR 0 3
55764: PPUSH
55765: CALL_OW 259
55769: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
55770: LD_VAR 0 6
55774: PUSH
55775: LD_INT 1
55777: ARRAY
55778: PPUSH
55779: LD_VAR 0 2
55783: PPUSH
55784: LD_VAR 0 5
55788: PPUSH
55789: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55793: LD_VAR 0 6
55797: PUSH
55798: LD_INT 1
55800: ARRAY
55801: PPUSH
55802: LD_VAR 0 3
55806: PPUSH
55807: LD_VAR 0 4
55811: PPUSH
55812: CALL_OW 237
// end ;
55816: PPOPN 6
55818: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55819: LD_EXP 28
55823: PUSH
55824: LD_EXP 75
55828: AND
55829: IFFALSE 55908
55831: GO 55833
55833: DISABLE
55834: LD_INT 0
55836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
55837: LD_ADDR_VAR 0 1
55841: PUSH
55842: LD_INT 22
55844: PUSH
55845: LD_OWVAR 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 30
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PPUSH
55868: CALL_OW 69
55872: ST_TO_ADDR
// if not tmp then
55873: LD_VAR 0 1
55877: NOT
55878: IFFALSE 55882
// exit ;
55880: GO 55908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55882: LD_VAR 0 1
55886: PUSH
55887: LD_INT 1
55889: PPUSH
55890: LD_VAR 0 1
55894: PPUSH
55895: CALL_OW 12
55899: ARRAY
55900: PPUSH
55901: LD_INT 1
55903: PPUSH
55904: CALL_OW 234
// end ;
55908: PPOPN 1
55910: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
55911: LD_EXP 28
55915: PUSH
55916: LD_EXP 76
55920: AND
55921: IFFALSE 56033
55923: GO 55925
55925: DISABLE
55926: LD_INT 0
55928: PPUSH
55929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
55930: LD_ADDR_VAR 0 2
55934: PUSH
55935: LD_INT 22
55937: PUSH
55938: LD_OWVAR 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 30
55952: PUSH
55953: LD_INT 27
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 30
55962: PUSH
55963: LD_INT 26
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 30
55972: PUSH
55973: LD_INT 28
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PPUSH
55990: CALL_OW 69
55994: ST_TO_ADDR
// if not tmp then
55995: LD_VAR 0 2
55999: NOT
56000: IFFALSE 56004
// exit ;
56002: GO 56033
// for i in tmp do
56004: LD_ADDR_VAR 0 1
56008: PUSH
56009: LD_VAR 0 2
56013: PUSH
56014: FOR_IN
56015: IFFALSE 56031
// SetLives ( i , 1 ) ;
56017: LD_VAR 0 1
56021: PPUSH
56022: LD_INT 1
56024: PPUSH
56025: CALL_OW 234
56029: GO 56014
56031: POP
56032: POP
// end ;
56033: PPOPN 2
56035: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56036: LD_EXP 28
56040: PUSH
56041: LD_EXP 77
56045: AND
56046: IFFALSE 56333
56048: GO 56050
56050: DISABLE
56051: LD_INT 0
56053: PPUSH
56054: PPUSH
56055: PPUSH
// begin i := rand ( 1 , 7 ) ;
56056: LD_ADDR_VAR 0 1
56060: PUSH
56061: LD_INT 1
56063: PPUSH
56064: LD_INT 7
56066: PPUSH
56067: CALL_OW 12
56071: ST_TO_ADDR
// case i of 1 :
56072: LD_VAR 0 1
56076: PUSH
56077: LD_INT 1
56079: DOUBLE
56080: EQUAL
56081: IFTRUE 56085
56083: GO 56095
56085: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56086: LD_STRING earthquake(getX(game), 0, 32)
56088: PPUSH
56089: CALL_OW 559
56093: GO 56333
56095: LD_INT 2
56097: DOUBLE
56098: EQUAL
56099: IFTRUE 56103
56101: GO 56117
56103: POP
// begin ToLua ( displayStucuk(); ) ;
56104: LD_STRING displayStucuk();
56106: PPUSH
56107: CALL_OW 559
// ResetFog ;
56111: CALL_OW 335
// end ; 3 :
56115: GO 56333
56117: LD_INT 3
56119: DOUBLE
56120: EQUAL
56121: IFTRUE 56125
56123: GO 56229
56125: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56126: LD_ADDR_VAR 0 2
56130: PUSH
56131: LD_INT 22
56133: PUSH
56134: LD_OWVAR 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 25
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PPUSH
56157: CALL_OW 69
56161: ST_TO_ADDR
// if not tmp then
56162: LD_VAR 0 2
56166: NOT
56167: IFFALSE 56171
// exit ;
56169: GO 56333
// un := tmp [ rand ( 1 , tmp ) ] ;
56171: LD_ADDR_VAR 0 3
56175: PUSH
56176: LD_VAR 0 2
56180: PUSH
56181: LD_INT 1
56183: PPUSH
56184: LD_VAR 0 2
56188: PPUSH
56189: CALL_OW 12
56193: ARRAY
56194: ST_TO_ADDR
// if Crawls ( un ) then
56195: LD_VAR 0 3
56199: PPUSH
56200: CALL_OW 318
56204: IFFALSE 56215
// ComWalk ( un ) ;
56206: LD_VAR 0 3
56210: PPUSH
56211: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56215: LD_VAR 0 3
56219: PPUSH
56220: LD_INT 8
56222: PPUSH
56223: CALL_OW 336
// end ; 4 :
56227: GO 56333
56229: LD_INT 4
56231: DOUBLE
56232: EQUAL
56233: IFTRUE 56237
56235: GO 56311
56237: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56238: LD_ADDR_VAR 0 2
56242: PUSH
56243: LD_INT 22
56245: PUSH
56246: LD_OWVAR 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 30
56257: PUSH
56258: LD_INT 29
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PPUSH
56269: CALL_OW 69
56273: ST_TO_ADDR
// if not tmp then
56274: LD_VAR 0 2
56278: NOT
56279: IFFALSE 56283
// exit ;
56281: GO 56333
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56283: LD_VAR 0 2
56287: PUSH
56288: LD_INT 1
56290: ARRAY
56291: PPUSH
56292: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56296: LD_VAR 0 2
56300: PUSH
56301: LD_INT 1
56303: ARRAY
56304: PPUSH
56305: CALL_OW 65
// end ; 5 .. 7 :
56309: GO 56333
56311: LD_INT 5
56313: DOUBLE
56314: GREATEREQUAL
56315: IFFALSE 56323
56317: LD_INT 7
56319: DOUBLE
56320: LESSEQUAL
56321: IFTRUE 56325
56323: GO 56332
56325: POP
// StreamSibBomb ; end ;
56326: CALL 52570 0 0
56330: GO 56333
56332: POP
// end ;
56333: PPOPN 3
56335: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56336: LD_EXP 28
56340: PUSH
56341: LD_EXP 78
56345: AND
56346: IFFALSE 56502
56348: GO 56350
56350: DISABLE
56351: LD_INT 0
56353: PPUSH
56354: PPUSH
56355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56356: LD_ADDR_VAR 0 2
56360: PUSH
56361: LD_INT 81
56363: PUSH
56364: LD_OWVAR 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 21
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 21
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PPUSH
56405: CALL_OW 69
56409: ST_TO_ADDR
// if not tmp then
56410: LD_VAR 0 2
56414: NOT
56415: IFFALSE 56419
// exit ;
56417: GO 56502
// p := 0 ;
56419: LD_ADDR_VAR 0 3
56423: PUSH
56424: LD_INT 0
56426: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56427: LD_INT 35
56429: PPUSH
56430: CALL_OW 67
// p := p + 1 ;
56434: LD_ADDR_VAR 0 3
56438: PUSH
56439: LD_VAR 0 3
56443: PUSH
56444: LD_INT 1
56446: PLUS
56447: ST_TO_ADDR
// for i in tmp do
56448: LD_ADDR_VAR 0 1
56452: PUSH
56453: LD_VAR 0 2
56457: PUSH
56458: FOR_IN
56459: IFFALSE 56490
// if GetLives ( i ) < 1000 then
56461: LD_VAR 0 1
56465: PPUSH
56466: CALL_OW 256
56470: PUSH
56471: LD_INT 1000
56473: LESS
56474: IFFALSE 56488
// SetLives ( i , 1000 ) ;
56476: LD_VAR 0 1
56480: PPUSH
56481: LD_INT 1000
56483: PPUSH
56484: CALL_OW 234
56488: GO 56458
56490: POP
56491: POP
// until p > 20 ;
56492: LD_VAR 0 3
56496: PUSH
56497: LD_INT 20
56499: GREATER
56500: IFFALSE 56427
// end ;
56502: PPOPN 3
56504: END
// every 0 0$1 trigger StreamModeActive and sTime do
56505: LD_EXP 28
56509: PUSH
56510: LD_EXP 79
56514: AND
56515: IFFALSE 56550
56517: GO 56519
56519: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56520: LD_INT 28
56522: PPUSH
56523: LD_OWVAR 2
56527: PPUSH
56528: LD_INT 2
56530: PPUSH
56531: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56535: LD_INT 30
56537: PPUSH
56538: LD_OWVAR 2
56542: PPUSH
56543: LD_INT 2
56545: PPUSH
56546: CALL_OW 322
// end ;
56550: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56551: LD_EXP 28
56555: PUSH
56556: LD_EXP 80
56560: AND
56561: IFFALSE 56682
56563: GO 56565
56565: DISABLE
56566: LD_INT 0
56568: PPUSH
56569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56570: LD_ADDR_VAR 0 2
56574: PUSH
56575: LD_INT 22
56577: PUSH
56578: LD_OWVAR 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 21
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: LD_INT 23
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: PPUSH
56619: CALL_OW 69
56623: ST_TO_ADDR
// if not tmp then
56624: LD_VAR 0 2
56628: NOT
56629: IFFALSE 56633
// exit ;
56631: GO 56682
// for i in tmp do
56633: LD_ADDR_VAR 0 1
56637: PUSH
56638: LD_VAR 0 2
56642: PUSH
56643: FOR_IN
56644: IFFALSE 56680
// begin if Crawls ( i ) then
56646: LD_VAR 0 1
56650: PPUSH
56651: CALL_OW 318
56655: IFFALSE 56666
// ComWalk ( i ) ;
56657: LD_VAR 0 1
56661: PPUSH
56662: CALL_OW 138
// SetClass ( i , 2 ) ;
56666: LD_VAR 0 1
56670: PPUSH
56671: LD_INT 2
56673: PPUSH
56674: CALL_OW 336
// end ;
56678: GO 56643
56680: POP
56681: POP
// end ;
56682: PPOPN 2
56684: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56685: LD_EXP 28
56689: PUSH
56690: LD_EXP 81
56694: AND
56695: IFFALSE 56983
56697: GO 56699
56699: DISABLE
56700: LD_INT 0
56702: PPUSH
56703: PPUSH
56704: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
56705: LD_OWVAR 2
56709: PPUSH
56710: LD_INT 9
56712: PPUSH
56713: LD_INT 1
56715: PPUSH
56716: LD_INT 1
56718: PPUSH
56719: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56723: LD_INT 9
56725: PPUSH
56726: LD_OWVAR 2
56730: PPUSH
56731: CALL_OW 343
// uc_side := 9 ;
56735: LD_ADDR_OWVAR 20
56739: PUSH
56740: LD_INT 9
56742: ST_TO_ADDR
// uc_nation := 2 ;
56743: LD_ADDR_OWVAR 21
56747: PUSH
56748: LD_INT 2
56750: ST_TO_ADDR
// hc_name := Dark Warrior ;
56751: LD_ADDR_OWVAR 26
56755: PUSH
56756: LD_STRING Dark Warrior
56758: ST_TO_ADDR
// hc_gallery :=  ;
56759: LD_ADDR_OWVAR 33
56763: PUSH
56764: LD_STRING 
56766: ST_TO_ADDR
// hc_noskilllimit := true ;
56767: LD_ADDR_OWVAR 76
56771: PUSH
56772: LD_INT 1
56774: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56775: LD_ADDR_OWVAR 31
56779: PUSH
56780: LD_INT 30
56782: PUSH
56783: LD_INT 30
56785: PUSH
56786: LD_INT 30
56788: PUSH
56789: LD_INT 30
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// un := CreateHuman ;
56798: LD_ADDR_VAR 0 3
56802: PUSH
56803: CALL_OW 44
56807: ST_TO_ADDR
// hc_noskilllimit := false ;
56808: LD_ADDR_OWVAR 76
56812: PUSH
56813: LD_INT 0
56815: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56816: LD_VAR 0 3
56820: PPUSH
56821: LD_INT 1
56823: PPUSH
56824: CALL_OW 51
// ToLua ( playRanger() ) ;
56828: LD_STRING playRanger()
56830: PPUSH
56831: CALL_OW 559
// p := 0 ;
56835: LD_ADDR_VAR 0 2
56839: PUSH
56840: LD_INT 0
56842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56843: LD_INT 35
56845: PPUSH
56846: CALL_OW 67
// p := p + 1 ;
56850: LD_ADDR_VAR 0 2
56854: PUSH
56855: LD_VAR 0 2
56859: PUSH
56860: LD_INT 1
56862: PLUS
56863: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56864: LD_VAR 0 3
56868: PPUSH
56869: CALL_OW 256
56873: PUSH
56874: LD_INT 1000
56876: LESS
56877: IFFALSE 56891
// SetLives ( un , 1000 ) ;
56879: LD_VAR 0 3
56883: PPUSH
56884: LD_INT 1000
56886: PPUSH
56887: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
56891: LD_VAR 0 3
56895: PPUSH
56896: LD_INT 81
56898: PUSH
56899: LD_OWVAR 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 91
56910: PUSH
56911: LD_VAR 0 3
56915: PUSH
56916: LD_INT 30
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PPUSH
56928: CALL_OW 69
56932: PPUSH
56933: LD_VAR 0 3
56937: PPUSH
56938: CALL_OW 74
56942: PPUSH
56943: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
56947: LD_VAR 0 2
56951: PUSH
56952: LD_INT 80
56954: GREATER
56955: PUSH
56956: LD_VAR 0 3
56960: PPUSH
56961: CALL_OW 301
56965: OR
56966: IFFALSE 56843
// if un then
56968: LD_VAR 0 3
56972: IFFALSE 56983
// RemoveUnit ( un ) ;
56974: LD_VAR 0 3
56978: PPUSH
56979: CALL_OW 64
// end ;
56983: PPOPN 3
56985: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
56986: LD_EXP 82
56990: IFFALSE 57106
56992: GO 56994
56994: DISABLE
56995: LD_INT 0
56997: PPUSH
56998: PPUSH
56999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57000: LD_ADDR_VAR 0 2
57004: PUSH
57005: LD_INT 81
57007: PUSH
57008: LD_OWVAR 2
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 21
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PPUSH
57031: CALL_OW 69
57035: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57036: LD_STRING playComputer()
57038: PPUSH
57039: CALL_OW 559
// if not tmp then
57043: LD_VAR 0 2
57047: NOT
57048: IFFALSE 57052
// exit ;
57050: GO 57106
// for i in tmp do
57052: LD_ADDR_VAR 0 1
57056: PUSH
57057: LD_VAR 0 2
57061: PUSH
57062: FOR_IN
57063: IFFALSE 57104
// for j := 1 to 4 do
57065: LD_ADDR_VAR 0 3
57069: PUSH
57070: DOUBLE
57071: LD_INT 1
57073: DEC
57074: ST_TO_ADDR
57075: LD_INT 4
57077: PUSH
57078: FOR_TO
57079: IFFALSE 57100
// SetSkill ( i , j , 10 ) ;
57081: LD_VAR 0 1
57085: PPUSH
57086: LD_VAR 0 3
57090: PPUSH
57091: LD_INT 10
57093: PPUSH
57094: CALL_OW 237
57098: GO 57078
57100: POP
57101: POP
57102: GO 57062
57104: POP
57105: POP
// end ;
57106: PPOPN 3
57108: END
// every 0 0$1 trigger s30 do var i , tmp ;
57109: LD_EXP 83
57113: IFFALSE 57182
57115: GO 57117
57117: DISABLE
57118: LD_INT 0
57120: PPUSH
57121: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57122: LD_ADDR_VAR 0 2
57126: PUSH
57127: LD_INT 22
57129: PUSH
57130: LD_OWVAR 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PPUSH
57139: CALL_OW 69
57143: ST_TO_ADDR
// if not tmp then
57144: LD_VAR 0 2
57148: NOT
57149: IFFALSE 57153
// exit ;
57151: GO 57182
// for i in tmp do
57153: LD_ADDR_VAR 0 1
57157: PUSH
57158: LD_VAR 0 2
57162: PUSH
57163: FOR_IN
57164: IFFALSE 57180
// SetLives ( i , 300 ) ;
57166: LD_VAR 0 1
57170: PPUSH
57171: LD_INT 300
57173: PPUSH
57174: CALL_OW 234
57178: GO 57163
57180: POP
57181: POP
// end ;
57182: PPOPN 2
57184: END
// every 0 0$1 trigger s60 do var i , tmp ;
57185: LD_EXP 84
57189: IFFALSE 57258
57191: GO 57193
57193: DISABLE
57194: LD_INT 0
57196: PPUSH
57197: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57198: LD_ADDR_VAR 0 2
57202: PUSH
57203: LD_INT 22
57205: PUSH
57206: LD_OWVAR 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PPUSH
57215: CALL_OW 69
57219: ST_TO_ADDR
// if not tmp then
57220: LD_VAR 0 2
57224: NOT
57225: IFFALSE 57229
// exit ;
57227: GO 57258
// for i in tmp do
57229: LD_ADDR_VAR 0 1
57233: PUSH
57234: LD_VAR 0 2
57238: PUSH
57239: FOR_IN
57240: IFFALSE 57256
// SetLives ( i , 600 ) ;
57242: LD_VAR 0 1
57246: PPUSH
57247: LD_INT 600
57249: PPUSH
57250: CALL_OW 234
57254: GO 57239
57256: POP
57257: POP
// end ;
57258: PPOPN 2
57260: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57261: LD_INT 0
57263: PPUSH
// case cmd of 301 :
57264: LD_VAR 0 1
57268: PUSH
57269: LD_INT 301
57271: DOUBLE
57272: EQUAL
57273: IFTRUE 57277
57275: GO 57309
57277: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57278: LD_VAR 0 6
57282: PPUSH
57283: LD_VAR 0 7
57287: PPUSH
57288: LD_VAR 0 8
57292: PPUSH
57293: LD_VAR 0 4
57297: PPUSH
57298: LD_VAR 0 5
57302: PPUSH
57303: CALL 58510 0 5
57307: GO 57430
57309: LD_INT 302
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57317
57315: GO 57354
57317: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57318: LD_VAR 0 6
57322: PPUSH
57323: LD_VAR 0 7
57327: PPUSH
57328: LD_VAR 0 8
57332: PPUSH
57333: LD_VAR 0 9
57337: PPUSH
57338: LD_VAR 0 4
57342: PPUSH
57343: LD_VAR 0 5
57347: PPUSH
57348: CALL 58601 0 6
57352: GO 57430
57354: LD_INT 303
57356: DOUBLE
57357: EQUAL
57358: IFTRUE 57362
57360: GO 57399
57362: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57363: LD_VAR 0 6
57367: PPUSH
57368: LD_VAR 0 7
57372: PPUSH
57373: LD_VAR 0 8
57377: PPUSH
57378: LD_VAR 0 9
57382: PPUSH
57383: LD_VAR 0 4
57387: PPUSH
57388: LD_VAR 0 5
57392: PPUSH
57393: CALL 57435 0 6
57397: GO 57430
57399: LD_INT 304
57401: DOUBLE
57402: EQUAL
57403: IFTRUE 57407
57405: GO 57429
57407: POP
// hHackTeleport ( unit , x , y ) ; end ;
57408: LD_VAR 0 2
57412: PPUSH
57413: LD_VAR 0 4
57417: PPUSH
57418: LD_VAR 0 5
57422: PPUSH
57423: CALL 59194 0 3
57427: GO 57430
57429: POP
// end ;
57430: LD_VAR 0 12
57434: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57435: LD_INT 0
57437: PPUSH
57438: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57439: LD_VAR 0 1
57443: PUSH
57444: LD_INT 1
57446: LESS
57447: PUSH
57448: LD_VAR 0 1
57452: PUSH
57453: LD_INT 3
57455: GREATER
57456: OR
57457: PUSH
57458: LD_VAR 0 5
57462: PPUSH
57463: LD_VAR 0 6
57467: PPUSH
57468: CALL_OW 428
57472: OR
57473: IFFALSE 57477
// exit ;
57475: GO 58197
// uc_side := your_side ;
57477: LD_ADDR_OWVAR 20
57481: PUSH
57482: LD_OWVAR 2
57486: ST_TO_ADDR
// uc_nation := nation ;
57487: LD_ADDR_OWVAR 21
57491: PUSH
57492: LD_VAR 0 1
57496: ST_TO_ADDR
// bc_level = 1 ;
57497: LD_ADDR_OWVAR 43
57501: PUSH
57502: LD_INT 1
57504: ST_TO_ADDR
// case btype of 1 :
57505: LD_VAR 0 2
57509: PUSH
57510: LD_INT 1
57512: DOUBLE
57513: EQUAL
57514: IFTRUE 57518
57516: GO 57529
57518: POP
// bc_type := b_depot ; 2 :
57519: LD_ADDR_OWVAR 42
57523: PUSH
57524: LD_INT 0
57526: ST_TO_ADDR
57527: GO 58141
57529: LD_INT 2
57531: DOUBLE
57532: EQUAL
57533: IFTRUE 57537
57535: GO 57548
57537: POP
// bc_type := b_warehouse ; 3 :
57538: LD_ADDR_OWVAR 42
57542: PUSH
57543: LD_INT 1
57545: ST_TO_ADDR
57546: GO 58141
57548: LD_INT 3
57550: DOUBLE
57551: EQUAL
57552: IFTRUE 57556
57554: GO 57567
57556: POP
// bc_type := b_lab ; 4 .. 9 :
57557: LD_ADDR_OWVAR 42
57561: PUSH
57562: LD_INT 6
57564: ST_TO_ADDR
57565: GO 58141
57567: LD_INT 4
57569: DOUBLE
57570: GREATEREQUAL
57571: IFFALSE 57579
57573: LD_INT 9
57575: DOUBLE
57576: LESSEQUAL
57577: IFTRUE 57581
57579: GO 57633
57581: POP
// begin bc_type := b_lab_half ;
57582: LD_ADDR_OWVAR 42
57586: PUSH
57587: LD_INT 7
57589: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57590: LD_ADDR_OWVAR 44
57594: PUSH
57595: LD_INT 10
57597: PUSH
57598: LD_INT 11
57600: PUSH
57601: LD_INT 12
57603: PUSH
57604: LD_INT 15
57606: PUSH
57607: LD_INT 14
57609: PUSH
57610: LD_INT 13
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: PUSH
57621: LD_VAR 0 2
57625: PUSH
57626: LD_INT 3
57628: MINUS
57629: ARRAY
57630: ST_TO_ADDR
// end ; 10 .. 13 :
57631: GO 58141
57633: LD_INT 10
57635: DOUBLE
57636: GREATEREQUAL
57637: IFFALSE 57645
57639: LD_INT 13
57641: DOUBLE
57642: LESSEQUAL
57643: IFTRUE 57647
57645: GO 57724
57647: POP
// begin bc_type := b_lab_full ;
57648: LD_ADDR_OWVAR 42
57652: PUSH
57653: LD_INT 8
57655: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57656: LD_ADDR_OWVAR 44
57660: PUSH
57661: LD_INT 10
57663: PUSH
57664: LD_INT 12
57666: PUSH
57667: LD_INT 14
57669: PUSH
57670: LD_INT 13
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: LD_VAR 0 2
57683: PUSH
57684: LD_INT 9
57686: MINUS
57687: ARRAY
57688: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57689: LD_ADDR_OWVAR 45
57693: PUSH
57694: LD_INT 11
57696: PUSH
57697: LD_INT 15
57699: PUSH
57700: LD_INT 12
57702: PUSH
57703: LD_INT 15
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: PUSH
57712: LD_VAR 0 2
57716: PUSH
57717: LD_INT 9
57719: MINUS
57720: ARRAY
57721: ST_TO_ADDR
// end ; 14 :
57722: GO 58141
57724: LD_INT 14
57726: DOUBLE
57727: EQUAL
57728: IFTRUE 57732
57730: GO 57743
57732: POP
// bc_type := b_workshop ; 15 :
57733: LD_ADDR_OWVAR 42
57737: PUSH
57738: LD_INT 2
57740: ST_TO_ADDR
57741: GO 58141
57743: LD_INT 15
57745: DOUBLE
57746: EQUAL
57747: IFTRUE 57751
57749: GO 57762
57751: POP
// bc_type := b_factory ; 16 :
57752: LD_ADDR_OWVAR 42
57756: PUSH
57757: LD_INT 3
57759: ST_TO_ADDR
57760: GO 58141
57762: LD_INT 16
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57770
57768: GO 57781
57770: POP
// bc_type := b_ext_gun ; 17 :
57771: LD_ADDR_OWVAR 42
57775: PUSH
57776: LD_INT 17
57778: ST_TO_ADDR
57779: GO 58141
57781: LD_INT 17
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57789
57787: GO 57817
57789: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57790: LD_ADDR_OWVAR 42
57794: PUSH
57795: LD_INT 19
57797: PUSH
57798: LD_INT 23
57800: PUSH
57801: LD_INT 19
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: PUSH
57809: LD_VAR 0 1
57813: ARRAY
57814: ST_TO_ADDR
57815: GO 58141
57817: LD_INT 18
57819: DOUBLE
57820: EQUAL
57821: IFTRUE 57825
57823: GO 57836
57825: POP
// bc_type := b_ext_radar ; 19 :
57826: LD_ADDR_OWVAR 42
57830: PUSH
57831: LD_INT 20
57833: ST_TO_ADDR
57834: GO 58141
57836: LD_INT 19
57838: DOUBLE
57839: EQUAL
57840: IFTRUE 57844
57842: GO 57855
57844: POP
// bc_type := b_ext_radio ; 20 :
57845: LD_ADDR_OWVAR 42
57849: PUSH
57850: LD_INT 22
57852: ST_TO_ADDR
57853: GO 58141
57855: LD_INT 20
57857: DOUBLE
57858: EQUAL
57859: IFTRUE 57863
57861: GO 57874
57863: POP
// bc_type := b_ext_siberium ; 21 :
57864: LD_ADDR_OWVAR 42
57868: PUSH
57869: LD_INT 21
57871: ST_TO_ADDR
57872: GO 58141
57874: LD_INT 21
57876: DOUBLE
57877: EQUAL
57878: IFTRUE 57882
57880: GO 57893
57882: POP
// bc_type := b_ext_computer ; 22 :
57883: LD_ADDR_OWVAR 42
57887: PUSH
57888: LD_INT 24
57890: ST_TO_ADDR
57891: GO 58141
57893: LD_INT 22
57895: DOUBLE
57896: EQUAL
57897: IFTRUE 57901
57899: GO 57912
57901: POP
// bc_type := b_ext_track ; 23 :
57902: LD_ADDR_OWVAR 42
57906: PUSH
57907: LD_INT 16
57909: ST_TO_ADDR
57910: GO 58141
57912: LD_INT 23
57914: DOUBLE
57915: EQUAL
57916: IFTRUE 57920
57918: GO 57931
57920: POP
// bc_type := b_ext_laser ; 24 :
57921: LD_ADDR_OWVAR 42
57925: PUSH
57926: LD_INT 25
57928: ST_TO_ADDR
57929: GO 58141
57931: LD_INT 24
57933: DOUBLE
57934: EQUAL
57935: IFTRUE 57939
57937: GO 57950
57939: POP
// bc_type := b_control_tower ; 25 :
57940: LD_ADDR_OWVAR 42
57944: PUSH
57945: LD_INT 36
57947: ST_TO_ADDR
57948: GO 58141
57950: LD_INT 25
57952: DOUBLE
57953: EQUAL
57954: IFTRUE 57958
57956: GO 57969
57958: POP
// bc_type := b_breastwork ; 26 :
57959: LD_ADDR_OWVAR 42
57963: PUSH
57964: LD_INT 31
57966: ST_TO_ADDR
57967: GO 58141
57969: LD_INT 26
57971: DOUBLE
57972: EQUAL
57973: IFTRUE 57977
57975: GO 57988
57977: POP
// bc_type := b_bunker ; 27 :
57978: LD_ADDR_OWVAR 42
57982: PUSH
57983: LD_INT 32
57985: ST_TO_ADDR
57986: GO 58141
57988: LD_INT 27
57990: DOUBLE
57991: EQUAL
57992: IFTRUE 57996
57994: GO 58007
57996: POP
// bc_type := b_turret ; 28 :
57997: LD_ADDR_OWVAR 42
58001: PUSH
58002: LD_INT 33
58004: ST_TO_ADDR
58005: GO 58141
58007: LD_INT 28
58009: DOUBLE
58010: EQUAL
58011: IFTRUE 58015
58013: GO 58026
58015: POP
// bc_type := b_armoury ; 29 :
58016: LD_ADDR_OWVAR 42
58020: PUSH
58021: LD_INT 4
58023: ST_TO_ADDR
58024: GO 58141
58026: LD_INT 29
58028: DOUBLE
58029: EQUAL
58030: IFTRUE 58034
58032: GO 58045
58034: POP
// bc_type := b_barracks ; 30 :
58035: LD_ADDR_OWVAR 42
58039: PUSH
58040: LD_INT 5
58042: ST_TO_ADDR
58043: GO 58141
58045: LD_INT 30
58047: DOUBLE
58048: EQUAL
58049: IFTRUE 58053
58051: GO 58064
58053: POP
// bc_type := b_solar_power ; 31 :
58054: LD_ADDR_OWVAR 42
58058: PUSH
58059: LD_INT 27
58061: ST_TO_ADDR
58062: GO 58141
58064: LD_INT 31
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58072
58070: GO 58083
58072: POP
// bc_type := b_oil_power ; 32 :
58073: LD_ADDR_OWVAR 42
58077: PUSH
58078: LD_INT 26
58080: ST_TO_ADDR
58081: GO 58141
58083: LD_INT 32
58085: DOUBLE
58086: EQUAL
58087: IFTRUE 58091
58089: GO 58102
58091: POP
// bc_type := b_siberite_power ; 33 :
58092: LD_ADDR_OWVAR 42
58096: PUSH
58097: LD_INT 28
58099: ST_TO_ADDR
58100: GO 58141
58102: LD_INT 33
58104: DOUBLE
58105: EQUAL
58106: IFTRUE 58110
58108: GO 58121
58110: POP
// bc_type := b_oil_mine ; 34 :
58111: LD_ADDR_OWVAR 42
58115: PUSH
58116: LD_INT 29
58118: ST_TO_ADDR
58119: GO 58141
58121: LD_INT 34
58123: DOUBLE
58124: EQUAL
58125: IFTRUE 58129
58127: GO 58140
58129: POP
// bc_type := b_siberite_mine ; end ;
58130: LD_ADDR_OWVAR 42
58134: PUSH
58135: LD_INT 30
58137: ST_TO_ADDR
58138: GO 58141
58140: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58141: LD_ADDR_VAR 0 8
58145: PUSH
58146: LD_VAR 0 5
58150: PPUSH
58151: LD_VAR 0 6
58155: PPUSH
58156: LD_VAR 0 3
58160: PPUSH
58161: CALL_OW 47
58165: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58166: LD_OWVAR 42
58170: PUSH
58171: LD_INT 32
58173: PUSH
58174: LD_INT 33
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: IN
58181: IFFALSE 58197
// PlaceWeaponTurret ( b , weapon ) ;
58183: LD_VAR 0 8
58187: PPUSH
58188: LD_VAR 0 4
58192: PPUSH
58193: CALL_OW 431
// end ;
58197: LD_VAR 0 7
58201: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58202: LD_INT 0
58204: PPUSH
58205: PPUSH
58206: PPUSH
58207: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58208: LD_ADDR_VAR 0 4
58212: PUSH
58213: LD_INT 22
58215: PUSH
58216: LD_OWVAR 2
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 30
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 30
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PPUSH
58257: CALL_OW 69
58261: ST_TO_ADDR
// if not tmp then
58262: LD_VAR 0 4
58266: NOT
58267: IFFALSE 58271
// exit ;
58269: GO 58330
// for i in tmp do
58271: LD_ADDR_VAR 0 2
58275: PUSH
58276: LD_VAR 0 4
58280: PUSH
58281: FOR_IN
58282: IFFALSE 58328
// for j = 1 to 3 do
58284: LD_ADDR_VAR 0 3
58288: PUSH
58289: DOUBLE
58290: LD_INT 1
58292: DEC
58293: ST_TO_ADDR
58294: LD_INT 3
58296: PUSH
58297: FOR_TO
58298: IFFALSE 58324
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58300: LD_VAR 0 2
58304: PPUSH
58305: CALL_OW 274
58309: PPUSH
58310: LD_VAR 0 3
58314: PPUSH
58315: LD_INT 99999
58317: PPUSH
58318: CALL_OW 277
58322: GO 58297
58324: POP
58325: POP
58326: GO 58281
58328: POP
58329: POP
// end ;
58330: LD_VAR 0 1
58334: RET
// export function hHackSetLevel10 ; var i , j ; begin
58335: LD_INT 0
58337: PPUSH
58338: PPUSH
58339: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58340: LD_ADDR_VAR 0 2
58344: PUSH
58345: LD_INT 21
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PPUSH
58355: CALL_OW 69
58359: PUSH
58360: FOR_IN
58361: IFFALSE 58413
// if IsSelected ( i ) then
58363: LD_VAR 0 2
58367: PPUSH
58368: CALL_OW 306
58372: IFFALSE 58411
// begin for j := 1 to 4 do
58374: LD_ADDR_VAR 0 3
58378: PUSH
58379: DOUBLE
58380: LD_INT 1
58382: DEC
58383: ST_TO_ADDR
58384: LD_INT 4
58386: PUSH
58387: FOR_TO
58388: IFFALSE 58409
// SetSkill ( i , j , 10 ) ;
58390: LD_VAR 0 2
58394: PPUSH
58395: LD_VAR 0 3
58399: PPUSH
58400: LD_INT 10
58402: PPUSH
58403: CALL_OW 237
58407: GO 58387
58409: POP
58410: POP
// end ;
58411: GO 58360
58413: POP
58414: POP
// end ;
58415: LD_VAR 0 1
58419: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58420: LD_INT 0
58422: PPUSH
58423: PPUSH
58424: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58425: LD_ADDR_VAR 0 2
58429: PUSH
58430: LD_INT 22
58432: PUSH
58433: LD_OWVAR 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 21
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PPUSH
58456: CALL_OW 69
58460: PUSH
58461: FOR_IN
58462: IFFALSE 58503
// begin for j := 1 to 4 do
58464: LD_ADDR_VAR 0 3
58468: PUSH
58469: DOUBLE
58470: LD_INT 1
58472: DEC
58473: ST_TO_ADDR
58474: LD_INT 4
58476: PUSH
58477: FOR_TO
58478: IFFALSE 58499
// SetSkill ( i , j , 10 ) ;
58480: LD_VAR 0 2
58484: PPUSH
58485: LD_VAR 0 3
58489: PPUSH
58490: LD_INT 10
58492: PPUSH
58493: CALL_OW 237
58497: GO 58477
58499: POP
58500: POP
// end ;
58501: GO 58461
58503: POP
58504: POP
// end ;
58505: LD_VAR 0 1
58509: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58510: LD_INT 0
58512: PPUSH
// uc_side := your_side ;
58513: LD_ADDR_OWVAR 20
58517: PUSH
58518: LD_OWVAR 2
58522: ST_TO_ADDR
// uc_nation := nation ;
58523: LD_ADDR_OWVAR 21
58527: PUSH
58528: LD_VAR 0 1
58532: ST_TO_ADDR
// InitHc ;
58533: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58537: LD_INT 0
58539: PPUSH
58540: LD_VAR 0 2
58544: PPUSH
58545: LD_VAR 0 3
58549: PPUSH
58550: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58554: LD_VAR 0 4
58558: PPUSH
58559: LD_VAR 0 5
58563: PPUSH
58564: CALL_OW 428
58568: PUSH
58569: LD_INT 0
58571: EQUAL
58572: IFFALSE 58596
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58574: CALL_OW 44
58578: PPUSH
58579: LD_VAR 0 4
58583: PPUSH
58584: LD_VAR 0 5
58588: PPUSH
58589: LD_INT 1
58591: PPUSH
58592: CALL_OW 48
// end ;
58596: LD_VAR 0 6
58600: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58601: LD_INT 0
58603: PPUSH
58604: PPUSH
// uc_side := your_side ;
58605: LD_ADDR_OWVAR 20
58609: PUSH
58610: LD_OWVAR 2
58614: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58615: LD_VAR 0 1
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: LD_INT 5
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: IN
58642: IFFALSE 58654
// uc_nation := nation_american else
58644: LD_ADDR_OWVAR 21
58648: PUSH
58649: LD_INT 1
58651: ST_TO_ADDR
58652: GO 58697
// if chassis in [ 11 , 12 , 13 , 14 ] then
58654: LD_VAR 0 1
58658: PUSH
58659: LD_INT 11
58661: PUSH
58662: LD_INT 12
58664: PUSH
58665: LD_INT 13
58667: PUSH
58668: LD_INT 14
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: IN
58677: IFFALSE 58689
// uc_nation := nation_arabian else
58679: LD_ADDR_OWVAR 21
58683: PUSH
58684: LD_INT 2
58686: ST_TO_ADDR
58687: GO 58697
// uc_nation := nation_russian ;
58689: LD_ADDR_OWVAR 21
58693: PUSH
58694: LD_INT 3
58696: ST_TO_ADDR
// vc_chassis := chassis ;
58697: LD_ADDR_OWVAR 37
58701: PUSH
58702: LD_VAR 0 1
58706: ST_TO_ADDR
// vc_engine := engine ;
58707: LD_ADDR_OWVAR 39
58711: PUSH
58712: LD_VAR 0 2
58716: ST_TO_ADDR
// vc_control := control ;
58717: LD_ADDR_OWVAR 38
58721: PUSH
58722: LD_VAR 0 3
58726: ST_TO_ADDR
// vc_weapon := weapon ;
58727: LD_ADDR_OWVAR 40
58731: PUSH
58732: LD_VAR 0 4
58736: ST_TO_ADDR
// un := CreateVehicle ;
58737: LD_ADDR_VAR 0 8
58741: PUSH
58742: CALL_OW 45
58746: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58747: LD_VAR 0 8
58751: PPUSH
58752: LD_INT 0
58754: PPUSH
58755: LD_INT 5
58757: PPUSH
58758: CALL_OW 12
58762: PPUSH
58763: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58767: LD_VAR 0 8
58771: PPUSH
58772: LD_VAR 0 5
58776: PPUSH
58777: LD_VAR 0 6
58781: PPUSH
58782: LD_INT 1
58784: PPUSH
58785: CALL_OW 48
// end ;
58789: LD_VAR 0 7
58793: RET
// export hInvincible ; every 1 do
58794: GO 58796
58796: DISABLE
// hInvincible := [ ] ;
58797: LD_ADDR_EXP 85
58801: PUSH
58802: EMPTY
58803: ST_TO_ADDR
58804: END
// every 10 do var i ;
58805: GO 58807
58807: DISABLE
58808: LD_INT 0
58810: PPUSH
// begin enable ;
58811: ENABLE
// if not hInvincible then
58812: LD_EXP 85
58816: NOT
58817: IFFALSE 58821
// exit ;
58819: GO 58865
// for i in hInvincible do
58821: LD_ADDR_VAR 0 1
58825: PUSH
58826: LD_EXP 85
58830: PUSH
58831: FOR_IN
58832: IFFALSE 58863
// if GetLives ( i ) < 1000 then
58834: LD_VAR 0 1
58838: PPUSH
58839: CALL_OW 256
58843: PUSH
58844: LD_INT 1000
58846: LESS
58847: IFFALSE 58861
// SetLives ( i , 1000 ) ;
58849: LD_VAR 0 1
58853: PPUSH
58854: LD_INT 1000
58856: PPUSH
58857: CALL_OW 234
58861: GO 58831
58863: POP
58864: POP
// end ;
58865: PPOPN 1
58867: END
// export function hHackInvincible ; var i ; begin
58868: LD_INT 0
58870: PPUSH
58871: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58872: LD_ADDR_VAR 0 2
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 21
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 21
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: LIST
58904: PPUSH
58905: CALL_OW 69
58909: PUSH
58910: FOR_IN
58911: IFFALSE 58972
// if IsSelected ( i ) then
58913: LD_VAR 0 2
58917: PPUSH
58918: CALL_OW 306
58922: IFFALSE 58970
// begin if i in hInvincible then
58924: LD_VAR 0 2
58928: PUSH
58929: LD_EXP 85
58933: IN
58934: IFFALSE 58954
// hInvincible := hInvincible diff i else
58936: LD_ADDR_EXP 85
58940: PUSH
58941: LD_EXP 85
58945: PUSH
58946: LD_VAR 0 2
58950: DIFF
58951: ST_TO_ADDR
58952: GO 58970
// hInvincible := hInvincible union i ;
58954: LD_ADDR_EXP 85
58958: PUSH
58959: LD_EXP 85
58963: PUSH
58964: LD_VAR 0 2
58968: UNION
58969: ST_TO_ADDR
// end ;
58970: GO 58910
58972: POP
58973: POP
// end ;
58974: LD_VAR 0 1
58978: RET
// export function hHackInvisible ; var i , j ; begin
58979: LD_INT 0
58981: PPUSH
58982: PPUSH
58983: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58984: LD_ADDR_VAR 0 2
58988: PUSH
58989: LD_INT 21
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PPUSH
58999: CALL_OW 69
59003: PUSH
59004: FOR_IN
59005: IFFALSE 59029
// if IsSelected ( i ) then
59007: LD_VAR 0 2
59011: PPUSH
59012: CALL_OW 306
59016: IFFALSE 59027
// ComForceInvisible ( i ) ;
59018: LD_VAR 0 2
59022: PPUSH
59023: CALL_OW 496
59027: GO 59004
59029: POP
59030: POP
// end ;
59031: LD_VAR 0 1
59035: RET
// export function hHackChangeYourSide ; begin
59036: LD_INT 0
59038: PPUSH
// if your_side = 8 then
59039: LD_OWVAR 2
59043: PUSH
59044: LD_INT 8
59046: EQUAL
59047: IFFALSE 59059
// your_side := 0 else
59049: LD_ADDR_OWVAR 2
59053: PUSH
59054: LD_INT 0
59056: ST_TO_ADDR
59057: GO 59073
// your_side := your_side + 1 ;
59059: LD_ADDR_OWVAR 2
59063: PUSH
59064: LD_OWVAR 2
59068: PUSH
59069: LD_INT 1
59071: PLUS
59072: ST_TO_ADDR
// end ;
59073: LD_VAR 0 1
59077: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59078: LD_INT 0
59080: PPUSH
59081: PPUSH
59082: PPUSH
// for i in all_units do
59083: LD_ADDR_VAR 0 2
59087: PUSH
59088: LD_OWVAR 3
59092: PUSH
59093: FOR_IN
59094: IFFALSE 59172
// if IsSelected ( i ) then
59096: LD_VAR 0 2
59100: PPUSH
59101: CALL_OW 306
59105: IFFALSE 59170
// begin j := GetSide ( i ) ;
59107: LD_ADDR_VAR 0 3
59111: PUSH
59112: LD_VAR 0 2
59116: PPUSH
59117: CALL_OW 255
59121: ST_TO_ADDR
// if j = 8 then
59122: LD_VAR 0 3
59126: PUSH
59127: LD_INT 8
59129: EQUAL
59130: IFFALSE 59142
// j := 0 else
59132: LD_ADDR_VAR 0 3
59136: PUSH
59137: LD_INT 0
59139: ST_TO_ADDR
59140: GO 59156
// j := j + 1 ;
59142: LD_ADDR_VAR 0 3
59146: PUSH
59147: LD_VAR 0 3
59151: PUSH
59152: LD_INT 1
59154: PLUS
59155: ST_TO_ADDR
// SetSide ( i , j ) ;
59156: LD_VAR 0 2
59160: PPUSH
59161: LD_VAR 0 3
59165: PPUSH
59166: CALL_OW 235
// end ;
59170: GO 59093
59172: POP
59173: POP
// end ;
59174: LD_VAR 0 1
59178: RET
// export function hHackFog ; begin
59179: LD_INT 0
59181: PPUSH
// FogOff ( true ) ;
59182: LD_INT 1
59184: PPUSH
59185: CALL_OW 344
// end ;
59189: LD_VAR 0 1
59193: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59194: LD_INT 0
59196: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59197: LD_VAR 0 1
59201: PPUSH
59202: LD_VAR 0 2
59206: PPUSH
59207: LD_VAR 0 3
59211: PPUSH
59212: LD_INT 1
59214: PPUSH
59215: LD_INT 1
59217: PPUSH
59218: CALL_OW 483
// CenterOnXY ( x , y ) ;
59222: LD_VAR 0 2
59226: PPUSH
59227: LD_VAR 0 3
59231: PPUSH
59232: CALL_OW 84
// end ;
59236: LD_VAR 0 4
59240: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59241: LD_INT 0
59243: PPUSH
59244: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59245: LD_VAR 0 1
59249: NOT
59250: PUSH
59251: LD_VAR 0 2
59255: PPUSH
59256: LD_VAR 0 3
59260: PPUSH
59261: CALL_OW 488
59265: NOT
59266: OR
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: CALL_OW 266
59277: PUSH
59278: LD_INT 3
59280: NONEQUAL
59281: PUSH
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 247
59291: PUSH
59292: LD_INT 1
59294: EQUAL
59295: NOT
59296: AND
59297: OR
59298: IFFALSE 59302
// exit ;
59300: GO 59451
// if GetType ( factory ) = unit_human then
59302: LD_VAR 0 1
59306: PPUSH
59307: CALL_OW 247
59311: PUSH
59312: LD_INT 1
59314: EQUAL
59315: IFFALSE 59332
// factory := IsInUnit ( factory ) ;
59317: LD_ADDR_VAR 0 1
59321: PUSH
59322: LD_VAR 0 1
59326: PPUSH
59327: CALL_OW 310
59331: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59332: LD_VAR 0 1
59336: PPUSH
59337: CALL_OW 266
59341: PUSH
59342: LD_INT 3
59344: NONEQUAL
59345: IFFALSE 59349
// exit ;
59347: GO 59451
// if HexInfo ( x , y ) = factory then
59349: LD_VAR 0 2
59353: PPUSH
59354: LD_VAR 0 3
59358: PPUSH
59359: CALL_OW 428
59363: PUSH
59364: LD_VAR 0 1
59368: EQUAL
59369: IFFALSE 59396
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59371: LD_ADDR_EXP 86
59375: PUSH
59376: LD_EXP 86
59380: PPUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: LD_INT 0
59388: PPUSH
59389: CALL_OW 1
59393: ST_TO_ADDR
59394: GO 59447
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59396: LD_ADDR_EXP 86
59400: PUSH
59401: LD_EXP 86
59405: PPUSH
59406: LD_VAR 0 1
59410: PPUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: CALL_OW 255
59420: PUSH
59421: LD_VAR 0 1
59425: PUSH
59426: LD_VAR 0 2
59430: PUSH
59431: LD_VAR 0 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: PPUSH
59442: CALL_OW 1
59446: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59447: CALL 59456 0 0
// end ;
59451: LD_VAR 0 4
59455: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59456: LD_INT 0
59458: PPUSH
59459: PPUSH
59460: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59461: LD_STRING resetFactoryWaypoint();
59463: PPUSH
59464: CALL_OW 559
// if factoryWaypoints then
59468: LD_EXP 86
59472: IFFALSE 59598
// begin list := PrepareArray ( factoryWaypoints ) ;
59474: LD_ADDR_VAR 0 3
59478: PUSH
59479: LD_EXP 86
59483: PPUSH
59484: CALL 44504 0 1
59488: ST_TO_ADDR
// for i := 1 to list do
59489: LD_ADDR_VAR 0 2
59493: PUSH
59494: DOUBLE
59495: LD_INT 1
59497: DEC
59498: ST_TO_ADDR
59499: LD_VAR 0 3
59503: PUSH
59504: FOR_TO
59505: IFFALSE 59596
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59507: LD_STRING setFactoryWaypointXY(
59509: PUSH
59510: LD_VAR 0 3
59514: PUSH
59515: LD_VAR 0 2
59519: ARRAY
59520: PUSH
59521: LD_INT 1
59523: ARRAY
59524: STR
59525: PUSH
59526: LD_STRING ,
59528: STR
59529: PUSH
59530: LD_VAR 0 3
59534: PUSH
59535: LD_VAR 0 2
59539: ARRAY
59540: PUSH
59541: LD_INT 2
59543: ARRAY
59544: STR
59545: PUSH
59546: LD_STRING ,
59548: STR
59549: PUSH
59550: LD_VAR 0 3
59554: PUSH
59555: LD_VAR 0 2
59559: ARRAY
59560: PUSH
59561: LD_INT 3
59563: ARRAY
59564: STR
59565: PUSH
59566: LD_STRING ,
59568: STR
59569: PUSH
59570: LD_VAR 0 3
59574: PUSH
59575: LD_VAR 0 2
59579: ARRAY
59580: PUSH
59581: LD_INT 4
59583: ARRAY
59584: STR
59585: PUSH
59586: LD_STRING )
59588: STR
59589: PPUSH
59590: CALL_OW 559
59594: GO 59504
59596: POP
59597: POP
// end ; end ;
59598: LD_VAR 0 1
59602: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59603: LD_INT 0
59605: PPUSH
// if HexInfo ( x , y ) = warehouse then
59606: LD_VAR 0 2
59610: PPUSH
59611: LD_VAR 0 3
59615: PPUSH
59616: CALL_OW 428
59620: PUSH
59621: LD_VAR 0 1
59625: EQUAL
59626: IFFALSE 59653
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59628: LD_ADDR_EXP 87
59632: PUSH
59633: LD_EXP 87
59637: PPUSH
59638: LD_VAR 0 1
59642: PPUSH
59643: LD_INT 0
59645: PPUSH
59646: CALL_OW 1
59650: ST_TO_ADDR
59651: GO 59704
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59653: LD_ADDR_EXP 87
59657: PUSH
59658: LD_EXP 87
59662: PPUSH
59663: LD_VAR 0 1
59667: PPUSH
59668: LD_VAR 0 1
59672: PPUSH
59673: CALL_OW 255
59677: PUSH
59678: LD_VAR 0 1
59682: PUSH
59683: LD_VAR 0 2
59687: PUSH
59688: LD_VAR 0 3
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: PPUSH
59699: CALL_OW 1
59703: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59704: CALL 59713 0 0
// end ;
59708: LD_VAR 0 4
59712: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59713: LD_INT 0
59715: PPUSH
59716: PPUSH
59717: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59718: LD_STRING resetWarehouseGatheringPoints();
59720: PPUSH
59721: CALL_OW 559
// if warehouseGatheringPoints then
59725: LD_EXP 87
59729: IFFALSE 59855
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59731: LD_ADDR_VAR 0 3
59735: PUSH
59736: LD_EXP 87
59740: PPUSH
59741: CALL 44504 0 1
59745: ST_TO_ADDR
// for i := 1 to list do
59746: LD_ADDR_VAR 0 2
59750: PUSH
59751: DOUBLE
59752: LD_INT 1
59754: DEC
59755: ST_TO_ADDR
59756: LD_VAR 0 3
59760: PUSH
59761: FOR_TO
59762: IFFALSE 59853
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59764: LD_STRING setWarehouseGatheringPointXY(
59766: PUSH
59767: LD_VAR 0 3
59771: PUSH
59772: LD_VAR 0 2
59776: ARRAY
59777: PUSH
59778: LD_INT 1
59780: ARRAY
59781: STR
59782: PUSH
59783: LD_STRING ,
59785: STR
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: LD_VAR 0 2
59796: ARRAY
59797: PUSH
59798: LD_INT 2
59800: ARRAY
59801: STR
59802: PUSH
59803: LD_STRING ,
59805: STR
59806: PUSH
59807: LD_VAR 0 3
59811: PUSH
59812: LD_VAR 0 2
59816: ARRAY
59817: PUSH
59818: LD_INT 3
59820: ARRAY
59821: STR
59822: PUSH
59823: LD_STRING ,
59825: STR
59826: PUSH
59827: LD_VAR 0 3
59831: PUSH
59832: LD_VAR 0 2
59836: ARRAY
59837: PUSH
59838: LD_INT 4
59840: ARRAY
59841: STR
59842: PUSH
59843: LD_STRING )
59845: STR
59846: PPUSH
59847: CALL_OW 559
59851: GO 59761
59853: POP
59854: POP
// end ; end ;
59855: LD_VAR 0 1
59859: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
59860: LD_EXP 87
59864: IFFALSE 60549
59866: GO 59868
59868: DISABLE
59869: LD_INT 0
59871: PPUSH
59872: PPUSH
59873: PPUSH
59874: PPUSH
59875: PPUSH
59876: PPUSH
59877: PPUSH
59878: PPUSH
59879: PPUSH
// begin enable ;
59880: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
59881: LD_ADDR_VAR 0 3
59885: PUSH
59886: LD_EXP 87
59890: PPUSH
59891: CALL 44504 0 1
59895: ST_TO_ADDR
// if not list then
59896: LD_VAR 0 3
59900: NOT
59901: IFFALSE 59905
// exit ;
59903: GO 60549
// for i := 1 to list do
59905: LD_ADDR_VAR 0 1
59909: PUSH
59910: DOUBLE
59911: LD_INT 1
59913: DEC
59914: ST_TO_ADDR
59915: LD_VAR 0 3
59919: PUSH
59920: FOR_TO
59921: IFFALSE 60547
// begin depot := list [ i ] [ 2 ] ;
59923: LD_ADDR_VAR 0 8
59927: PUSH
59928: LD_VAR 0 3
59932: PUSH
59933: LD_VAR 0 1
59937: ARRAY
59938: PUSH
59939: LD_INT 2
59941: ARRAY
59942: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
59943: LD_ADDR_VAR 0 5
59947: PUSH
59948: LD_VAR 0 3
59952: PUSH
59953: LD_VAR 0 1
59957: ARRAY
59958: PUSH
59959: LD_INT 1
59961: ARRAY
59962: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
59963: LD_VAR 0 8
59967: PPUSH
59968: CALL_OW 301
59972: PUSH
59973: LD_VAR 0 5
59977: PUSH
59978: LD_VAR 0 8
59982: PPUSH
59983: CALL_OW 255
59987: NONEQUAL
59988: OR
59989: IFFALSE 60018
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
59991: LD_ADDR_EXP 87
59995: PUSH
59996: LD_EXP 87
60000: PPUSH
60001: LD_VAR 0 8
60005: PPUSH
60006: LD_INT 0
60008: PPUSH
60009: CALL_OW 1
60013: ST_TO_ADDR
// exit ;
60014: POP
60015: POP
60016: GO 60549
// end ; x := list [ i ] [ 3 ] ;
60018: LD_ADDR_VAR 0 6
60022: PUSH
60023: LD_VAR 0 3
60027: PUSH
60028: LD_VAR 0 1
60032: ARRAY
60033: PUSH
60034: LD_INT 3
60036: ARRAY
60037: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60038: LD_ADDR_VAR 0 7
60042: PUSH
60043: LD_VAR 0 3
60047: PUSH
60048: LD_VAR 0 1
60052: ARRAY
60053: PUSH
60054: LD_INT 4
60056: ARRAY
60057: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60058: LD_ADDR_VAR 0 9
60062: PUSH
60063: LD_VAR 0 6
60067: PPUSH
60068: LD_VAR 0 7
60072: PPUSH
60073: LD_INT 16
60075: PPUSH
60076: CALL 43092 0 3
60080: ST_TO_ADDR
// if not cratesNearbyPoint then
60081: LD_VAR 0 9
60085: NOT
60086: IFFALSE 60092
// exit ;
60088: POP
60089: POP
60090: GO 60549
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60092: LD_ADDR_VAR 0 4
60096: PUSH
60097: LD_INT 22
60099: PUSH
60100: LD_VAR 0 5
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: LD_INT 60
60114: PUSH
60115: EMPTY
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 91
60124: PUSH
60125: LD_VAR 0 8
60129: PUSH
60130: LD_INT 6
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 25
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 25
60153: PUSH
60154: LD_INT 16
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: PPUSH
60172: CALL_OW 69
60176: PUSH
60177: LD_VAR 0 8
60181: PPUSH
60182: CALL_OW 313
60186: PPUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 60
60192: PUSH
60193: EMPTY
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 25
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 25
60215: PUSH
60216: LD_INT 16
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PPUSH
60232: CALL_OW 72
60236: UNION
60237: ST_TO_ADDR
// if tmp then
60238: LD_VAR 0 4
60242: IFFALSE 60322
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60244: LD_ADDR_VAR 0 4
60248: PUSH
60249: LD_VAR 0 4
60253: PPUSH
60254: LD_INT 3
60256: PPUSH
60257: CALL 41061 0 2
60261: ST_TO_ADDR
// for j in tmp do
60262: LD_ADDR_VAR 0 2
60266: PUSH
60267: LD_VAR 0 4
60271: PUSH
60272: FOR_IN
60273: IFFALSE 60316
// begin if IsInUnit ( j ) then
60275: LD_VAR 0 2
60279: PPUSH
60280: CALL_OW 310
60284: IFFALSE 60295
// ComExit ( j ) ;
60286: LD_VAR 0 2
60290: PPUSH
60291: CALL 41144 0 1
// AddComCollect ( j , x , y ) ;
60295: LD_VAR 0 2
60299: PPUSH
60300: LD_VAR 0 6
60304: PPUSH
60305: LD_VAR 0 7
60309: PPUSH
60310: CALL_OW 177
// end ;
60314: GO 60272
60316: POP
60317: POP
// exit ;
60318: POP
60319: POP
60320: GO 60549
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60322: LD_ADDR_VAR 0 4
60326: PUSH
60327: LD_INT 22
60329: PUSH
60330: LD_VAR 0 5
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 91
60341: PUSH
60342: LD_VAR 0 8
60346: PUSH
60347: LD_INT 8
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 34
60360: PUSH
60361: LD_INT 12
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 34
60370: PUSH
60371: LD_INT 51
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 34
60380: PUSH
60381: LD_INT 32
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 34
60390: PUSH
60391: LD_INT 89
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: PPUSH
60410: CALL_OW 69
60414: ST_TO_ADDR
// if tmp then
60415: LD_VAR 0 4
60419: IFFALSE 60545
// begin for j in tmp do
60421: LD_ADDR_VAR 0 2
60425: PUSH
60426: LD_VAR 0 4
60430: PUSH
60431: FOR_IN
60432: IFFALSE 60543
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
60434: LD_VAR 0 2
60438: PPUSH
60439: CALL_OW 262
60443: PUSH
60444: LD_INT 3
60446: EQUAL
60447: PUSH
60448: LD_VAR 0 2
60452: PPUSH
60453: CALL_OW 261
60457: PUSH
60458: LD_INT 20
60460: GREATER
60461: OR
60462: PUSH
60463: LD_VAR 0 2
60467: PPUSH
60468: CALL_OW 314
60472: NOT
60473: AND
60474: PUSH
60475: LD_VAR 0 2
60479: PPUSH
60480: CALL_OW 263
60484: PUSH
60485: LD_INT 1
60487: NONEQUAL
60488: PUSH
60489: LD_VAR 0 2
60493: PPUSH
60494: CALL_OW 311
60498: OR
60499: AND
60500: IFFALSE 60541
// begin ComCollect ( j , x , y ) ;
60502: LD_VAR 0 2
60506: PPUSH
60507: LD_VAR 0 6
60511: PPUSH
60512: LD_VAR 0 7
60516: PPUSH
60517: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
60521: LD_VAR 0 2
60525: PPUSH
60526: LD_VAR 0 8
60530: PPUSH
60531: CALL_OW 172
// exit ;
60535: POP
60536: POP
60537: POP
60538: POP
60539: GO 60549
// end ;
60541: GO 60431
60543: POP
60544: POP
// end ; end ;
60545: GO 59920
60547: POP
60548: POP
// end ; end_of_file
60549: PPOPN 9
60551: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60552: LD_VAR 0 1
60556: PUSH
60557: LD_INT 200
60559: DOUBLE
60560: GREATEREQUAL
60561: IFFALSE 60569
60563: LD_INT 299
60565: DOUBLE
60566: LESSEQUAL
60567: IFTRUE 60571
60569: GO 60603
60571: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60572: LD_VAR 0 1
60576: PPUSH
60577: LD_VAR 0 2
60581: PPUSH
60582: LD_VAR 0 3
60586: PPUSH
60587: LD_VAR 0 4
60591: PPUSH
60592: LD_VAR 0 5
60596: PPUSH
60597: CALL 61091 0 5
60601: GO 60680
60603: LD_INT 300
60605: DOUBLE
60606: GREATEREQUAL
60607: IFFALSE 60615
60609: LD_INT 399
60611: DOUBLE
60612: LESSEQUAL
60613: IFTRUE 60617
60615: GO 60679
60617: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60618: LD_VAR 0 1
60622: PPUSH
60623: LD_VAR 0 2
60627: PPUSH
60628: LD_VAR 0 3
60632: PPUSH
60633: LD_VAR 0 4
60637: PPUSH
60638: LD_VAR 0 5
60642: PPUSH
60643: LD_VAR 0 6
60647: PPUSH
60648: LD_VAR 0 7
60652: PPUSH
60653: LD_VAR 0 8
60657: PPUSH
60658: LD_VAR 0 9
60662: PPUSH
60663: LD_VAR 0 10
60667: PPUSH
60668: LD_VAR 0 11
60672: PPUSH
60673: CALL 57261 0 11
60677: GO 60680
60679: POP
// end ;
60680: PPOPN 11
60682: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60683: LD_VAR 0 1
60687: PPUSH
60688: LD_VAR 0 2
60692: PPUSH
60693: LD_VAR 0 3
60697: PPUSH
60698: LD_VAR 0 4
60702: PPUSH
60703: LD_VAR 0 5
60707: PPUSH
60708: CALL 60827 0 5
// end ; end_of_file
60712: PPOPN 5
60714: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60715: LD_INT 0
60717: PPUSH
60718: PPUSH
60719: PPUSH
60720: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60721: LD_VAR 0 1
60725: PPUSH
60726: CALL_OW 264
60730: PUSH
60731: LD_INT 91
60733: EQUAL
60734: IFFALSE 60806
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60736: LD_INT 68
60738: PPUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 255
60748: PPUSH
60749: CALL_OW 321
60753: PUSH
60754: LD_INT 2
60756: EQUAL
60757: IFFALSE 60769
// eff := 70 else
60759: LD_ADDR_VAR 0 4
60763: PUSH
60764: LD_INT 70
60766: ST_TO_ADDR
60767: GO 60777
// eff := 30 ;
60769: LD_ADDR_VAR 0 4
60773: PUSH
60774: LD_INT 30
60776: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60777: LD_VAR 0 1
60781: PPUSH
60782: CALL_OW 250
60786: PPUSH
60787: LD_VAR 0 1
60791: PPUSH
60792: CALL_OW 251
60796: PPUSH
60797: LD_VAR 0 4
60801: PPUSH
60802: CALL_OW 495
// end ; end ;
60806: LD_VAR 0 2
60810: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60811: LD_INT 0
60813: PPUSH
// end ;
60814: LD_VAR 0 4
60818: RET
// export function SOS_Command ( cmd ) ; begin
60819: LD_INT 0
60821: PPUSH
// end ;
60822: LD_VAR 0 2
60826: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60827: LD_INT 0
60829: PPUSH
// end ;
60830: LD_VAR 0 6
60834: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
60835: LD_INT 0
60837: PPUSH
60838: PPUSH
// if not vehicle or not factory then
60839: LD_VAR 0 1
60843: NOT
60844: PUSH
60845: LD_VAR 0 2
60849: NOT
60850: OR
60851: IFFALSE 60855
// exit ;
60853: GO 61086
// if factoryWaypoints >= factory then
60855: LD_EXP 86
60859: PUSH
60860: LD_VAR 0 2
60864: GREATEREQUAL
60865: IFFALSE 61086
// if factoryWaypoints [ factory ] then
60867: LD_EXP 86
60871: PUSH
60872: LD_VAR 0 2
60876: ARRAY
60877: IFFALSE 61086
// begin if GetControl ( vehicle ) = control_manual then
60879: LD_VAR 0 1
60883: PPUSH
60884: CALL_OW 263
60888: PUSH
60889: LD_INT 1
60891: EQUAL
60892: IFFALSE 60973
// begin driver := IsDrivenBy ( vehicle ) ;
60894: LD_ADDR_VAR 0 4
60898: PUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: CALL_OW 311
60908: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60909: LD_VAR 0 4
60913: PPUSH
60914: LD_EXP 86
60918: PUSH
60919: LD_VAR 0 2
60923: ARRAY
60924: PUSH
60925: LD_INT 3
60927: ARRAY
60928: PPUSH
60929: LD_EXP 86
60933: PUSH
60934: LD_VAR 0 2
60938: ARRAY
60939: PUSH
60940: LD_INT 4
60942: ARRAY
60943: PPUSH
60944: CALL_OW 171
// AddComExitVehicle ( driver ) ;
60948: LD_VAR 0 4
60952: PPUSH
60953: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
60957: LD_VAR 0 4
60961: PPUSH
60962: LD_VAR 0 2
60966: PPUSH
60967: CALL_OW 180
// end else
60971: GO 61086
// if GetControl ( vehicle ) = control_remote then
60973: LD_VAR 0 1
60977: PPUSH
60978: CALL_OW 263
60982: PUSH
60983: LD_INT 2
60985: EQUAL
60986: IFFALSE 61047
// begin wait ( 0 0$2 ) ;
60988: LD_INT 70
60990: PPUSH
60991: CALL_OW 67
// if Connect ( vehicle ) then
60995: LD_VAR 0 1
60999: PPUSH
61000: CALL 11384 0 1
61004: IFFALSE 61045
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61006: LD_VAR 0 1
61010: PPUSH
61011: LD_EXP 86
61015: PUSH
61016: LD_VAR 0 2
61020: ARRAY
61021: PUSH
61022: LD_INT 3
61024: ARRAY
61025: PPUSH
61026: LD_EXP 86
61030: PUSH
61031: LD_VAR 0 2
61035: ARRAY
61036: PUSH
61037: LD_INT 4
61039: ARRAY
61040: PPUSH
61041: CALL_OW 171
// end else
61045: GO 61086
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61047: LD_VAR 0 1
61051: PPUSH
61052: LD_EXP 86
61056: PUSH
61057: LD_VAR 0 2
61061: ARRAY
61062: PUSH
61063: LD_INT 3
61065: ARRAY
61066: PPUSH
61067: LD_EXP 86
61071: PUSH
61072: LD_VAR 0 2
61076: ARRAY
61077: PUSH
61078: LD_INT 4
61080: ARRAY
61081: PPUSH
61082: CALL_OW 171
// end ; end ;
61086: LD_VAR 0 3
61090: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61091: LD_INT 0
61093: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61094: LD_VAR 0 1
61098: PUSH
61099: LD_INT 250
61101: EQUAL
61102: PUSH
61103: LD_VAR 0 2
61107: PPUSH
61108: CALL_OW 264
61112: PUSH
61113: LD_INT 81
61115: EQUAL
61116: AND
61117: IFFALSE 61138
// MinerPlaceMine ( unit , x , y ) ;
61119: LD_VAR 0 2
61123: PPUSH
61124: LD_VAR 0 4
61128: PPUSH
61129: LD_VAR 0 5
61133: PPUSH
61134: CALL 63523 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61138: LD_VAR 0 1
61142: PUSH
61143: LD_INT 251
61145: EQUAL
61146: PUSH
61147: LD_VAR 0 2
61151: PPUSH
61152: CALL_OW 264
61156: PUSH
61157: LD_INT 81
61159: EQUAL
61160: AND
61161: IFFALSE 61182
// MinerDetonateMine ( unit , x , y ) ;
61163: LD_VAR 0 2
61167: PPUSH
61168: LD_VAR 0 4
61172: PPUSH
61173: LD_VAR 0 5
61177: PPUSH
61178: CALL 63798 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61182: LD_VAR 0 1
61186: PUSH
61187: LD_INT 252
61189: EQUAL
61190: PUSH
61191: LD_VAR 0 2
61195: PPUSH
61196: CALL_OW 264
61200: PUSH
61201: LD_INT 81
61203: EQUAL
61204: AND
61205: IFFALSE 61226
// MinerCreateMinefield ( unit , x , y ) ;
61207: LD_VAR 0 2
61211: PPUSH
61212: LD_VAR 0 4
61216: PPUSH
61217: LD_VAR 0 5
61221: PPUSH
61222: CALL 64215 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61226: LD_VAR 0 1
61230: PUSH
61231: LD_INT 253
61233: EQUAL
61234: PUSH
61235: LD_VAR 0 2
61239: PPUSH
61240: CALL_OW 257
61244: PUSH
61245: LD_INT 5
61247: EQUAL
61248: AND
61249: IFFALSE 61270
// ComBinocular ( unit , x , y ) ;
61251: LD_VAR 0 2
61255: PPUSH
61256: LD_VAR 0 4
61260: PPUSH
61261: LD_VAR 0 5
61265: PPUSH
61266: CALL 64584 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61270: LD_VAR 0 1
61274: PUSH
61275: LD_INT 254
61277: EQUAL
61278: PUSH
61279: LD_VAR 0 2
61283: PPUSH
61284: CALL_OW 264
61288: PUSH
61289: LD_INT 99
61291: EQUAL
61292: AND
61293: PUSH
61294: LD_VAR 0 3
61298: PPUSH
61299: CALL_OW 263
61303: PUSH
61304: LD_INT 3
61306: EQUAL
61307: AND
61308: IFFALSE 61324
// HackDestroyVehicle ( unit , selectedUnit ) ;
61310: LD_VAR 0 2
61314: PPUSH
61315: LD_VAR 0 3
61319: PPUSH
61320: CALL 62887 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61324: LD_VAR 0 1
61328: PUSH
61329: LD_INT 255
61331: EQUAL
61332: PUSH
61333: LD_VAR 0 2
61337: PPUSH
61338: CALL_OW 264
61342: PUSH
61343: LD_INT 14
61345: PUSH
61346: LD_INT 53
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: IN
61353: AND
61354: PUSH
61355: LD_VAR 0 4
61359: PPUSH
61360: LD_VAR 0 5
61364: PPUSH
61365: CALL_OW 488
61369: AND
61370: IFFALSE 61394
// CutTreeXYR ( unit , x , y , 12 ) ;
61372: LD_VAR 0 2
61376: PPUSH
61377: LD_VAR 0 4
61381: PPUSH
61382: LD_VAR 0 5
61386: PPUSH
61387: LD_INT 12
61389: PPUSH
61390: CALL 61457 0 4
// if cmd = 256 then
61394: LD_VAR 0 1
61398: PUSH
61399: LD_INT 256
61401: EQUAL
61402: IFFALSE 61423
// SetFactoryWaypoint ( unit , x , y ) ;
61404: LD_VAR 0 2
61408: PPUSH
61409: LD_VAR 0 4
61413: PPUSH
61414: LD_VAR 0 5
61418: PPUSH
61419: CALL 59241 0 3
// if cmd = 257 then
61423: LD_VAR 0 1
61427: PUSH
61428: LD_INT 257
61430: EQUAL
61431: IFFALSE 61452
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61433: LD_VAR 0 2
61437: PPUSH
61438: LD_VAR 0 4
61442: PPUSH
61443: LD_VAR 0 5
61447: PPUSH
61448: CALL 59603 0 3
// end ;
61452: LD_VAR 0 6
61456: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61457: LD_INT 0
61459: PPUSH
61460: PPUSH
61461: PPUSH
61462: PPUSH
61463: PPUSH
61464: PPUSH
61465: PPUSH
61466: PPUSH
61467: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61468: LD_VAR 0 1
61472: NOT
61473: PUSH
61474: LD_VAR 0 2
61478: PPUSH
61479: LD_VAR 0 3
61483: PPUSH
61484: CALL_OW 488
61488: NOT
61489: OR
61490: PUSH
61491: LD_VAR 0 4
61495: NOT
61496: OR
61497: IFFALSE 61501
// exit ;
61499: GO 61841
// list := [ ] ;
61501: LD_ADDR_VAR 0 13
61505: PUSH
61506: EMPTY
61507: ST_TO_ADDR
// if x - r < 0 then
61508: LD_VAR 0 2
61512: PUSH
61513: LD_VAR 0 4
61517: MINUS
61518: PUSH
61519: LD_INT 0
61521: LESS
61522: IFFALSE 61534
// min_x := 0 else
61524: LD_ADDR_VAR 0 7
61528: PUSH
61529: LD_INT 0
61531: ST_TO_ADDR
61532: GO 61550
// min_x := x - r ;
61534: LD_ADDR_VAR 0 7
61538: PUSH
61539: LD_VAR 0 2
61543: PUSH
61544: LD_VAR 0 4
61548: MINUS
61549: ST_TO_ADDR
// if y - r < 0 then
61550: LD_VAR 0 3
61554: PUSH
61555: LD_VAR 0 4
61559: MINUS
61560: PUSH
61561: LD_INT 0
61563: LESS
61564: IFFALSE 61576
// min_y := 0 else
61566: LD_ADDR_VAR 0 8
61570: PUSH
61571: LD_INT 0
61573: ST_TO_ADDR
61574: GO 61592
// min_y := y - r ;
61576: LD_ADDR_VAR 0 8
61580: PUSH
61581: LD_VAR 0 3
61585: PUSH
61586: LD_VAR 0 4
61590: MINUS
61591: ST_TO_ADDR
// max_x := x + r ;
61592: LD_ADDR_VAR 0 9
61596: PUSH
61597: LD_VAR 0 2
61601: PUSH
61602: LD_VAR 0 4
61606: PLUS
61607: ST_TO_ADDR
// max_y := y + r ;
61608: LD_ADDR_VAR 0 10
61612: PUSH
61613: LD_VAR 0 3
61617: PUSH
61618: LD_VAR 0 4
61622: PLUS
61623: ST_TO_ADDR
// for _x = min_x to max_x do
61624: LD_ADDR_VAR 0 11
61628: PUSH
61629: DOUBLE
61630: LD_VAR 0 7
61634: DEC
61635: ST_TO_ADDR
61636: LD_VAR 0 9
61640: PUSH
61641: FOR_TO
61642: IFFALSE 61759
// for _y = min_y to max_y do
61644: LD_ADDR_VAR 0 12
61648: PUSH
61649: DOUBLE
61650: LD_VAR 0 8
61654: DEC
61655: ST_TO_ADDR
61656: LD_VAR 0 10
61660: PUSH
61661: FOR_TO
61662: IFFALSE 61755
// begin if not ValidHex ( _x , _y ) then
61664: LD_VAR 0 11
61668: PPUSH
61669: LD_VAR 0 12
61673: PPUSH
61674: CALL_OW 488
61678: NOT
61679: IFFALSE 61683
// continue ;
61681: GO 61661
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61683: LD_VAR 0 11
61687: PPUSH
61688: LD_VAR 0 12
61692: PPUSH
61693: CALL_OW 351
61697: PUSH
61698: LD_VAR 0 11
61702: PPUSH
61703: LD_VAR 0 12
61707: PPUSH
61708: CALL_OW 554
61712: AND
61713: IFFALSE 61753
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61715: LD_ADDR_VAR 0 13
61719: PUSH
61720: LD_VAR 0 13
61724: PPUSH
61725: LD_VAR 0 13
61729: PUSH
61730: LD_INT 1
61732: PLUS
61733: PPUSH
61734: LD_VAR 0 11
61738: PUSH
61739: LD_VAR 0 12
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PPUSH
61748: CALL_OW 2
61752: ST_TO_ADDR
// end ;
61753: GO 61661
61755: POP
61756: POP
61757: GO 61641
61759: POP
61760: POP
// if not list then
61761: LD_VAR 0 13
61765: NOT
61766: IFFALSE 61770
// exit ;
61768: GO 61841
// for i in list do
61770: LD_ADDR_VAR 0 6
61774: PUSH
61775: LD_VAR 0 13
61779: PUSH
61780: FOR_IN
61781: IFFALSE 61839
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61783: LD_VAR 0 1
61787: PPUSH
61788: LD_STRING M
61790: PUSH
61791: LD_VAR 0 6
61795: PUSH
61796: LD_INT 1
61798: ARRAY
61799: PUSH
61800: LD_VAR 0 6
61804: PUSH
61805: LD_INT 2
61807: ARRAY
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: PUSH
61830: EMPTY
61831: LIST
61832: PPUSH
61833: CALL_OW 447
61837: GO 61780
61839: POP
61840: POP
// end ;
61841: LD_VAR 0 5
61845: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61846: LD_EXP 89
61850: NOT
61851: IFFALSE 61901
61853: GO 61855
61855: DISABLE
// begin initHack := true ;
61856: LD_ADDR_EXP 89
61860: PUSH
61861: LD_INT 1
61863: ST_TO_ADDR
// hackTanks := [ ] ;
61864: LD_ADDR_EXP 90
61868: PUSH
61869: EMPTY
61870: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61871: LD_ADDR_EXP 91
61875: PUSH
61876: EMPTY
61877: ST_TO_ADDR
// hackLimit := 3 ;
61878: LD_ADDR_EXP 92
61882: PUSH
61883: LD_INT 3
61885: ST_TO_ADDR
// hackDist := 12 ;
61886: LD_ADDR_EXP 93
61890: PUSH
61891: LD_INT 12
61893: ST_TO_ADDR
// hackCounter := [ ] ;
61894: LD_ADDR_EXP 94
61898: PUSH
61899: EMPTY
61900: ST_TO_ADDR
// end ;
61901: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61902: LD_EXP 89
61906: PUSH
61907: LD_INT 34
61909: PUSH
61910: LD_INT 99
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PPUSH
61917: CALL_OW 69
61921: AND
61922: IFFALSE 62175
61924: GO 61926
61926: DISABLE
61927: LD_INT 0
61929: PPUSH
61930: PPUSH
// begin enable ;
61931: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61932: LD_ADDR_VAR 0 1
61936: PUSH
61937: LD_INT 34
61939: PUSH
61940: LD_INT 99
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PPUSH
61947: CALL_OW 69
61951: PUSH
61952: FOR_IN
61953: IFFALSE 62173
// begin if not i in hackTanks then
61955: LD_VAR 0 1
61959: PUSH
61960: LD_EXP 90
61964: IN
61965: NOT
61966: IFFALSE 62049
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61968: LD_ADDR_EXP 90
61972: PUSH
61973: LD_EXP 90
61977: PPUSH
61978: LD_EXP 90
61982: PUSH
61983: LD_INT 1
61985: PLUS
61986: PPUSH
61987: LD_VAR 0 1
61991: PPUSH
61992: CALL_OW 1
61996: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61997: LD_ADDR_EXP 91
62001: PUSH
62002: LD_EXP 91
62006: PPUSH
62007: LD_EXP 91
62011: PUSH
62012: LD_INT 1
62014: PLUS
62015: PPUSH
62016: EMPTY
62017: PPUSH
62018: CALL_OW 1
62022: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62023: LD_ADDR_EXP 94
62027: PUSH
62028: LD_EXP 94
62032: PPUSH
62033: LD_EXP 94
62037: PUSH
62038: LD_INT 1
62040: PLUS
62041: PPUSH
62042: EMPTY
62043: PPUSH
62044: CALL_OW 1
62048: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62049: LD_VAR 0 1
62053: PPUSH
62054: CALL_OW 302
62058: NOT
62059: IFFALSE 62072
// begin HackUnlinkAll ( i ) ;
62061: LD_VAR 0 1
62065: PPUSH
62066: CALL 62178 0 1
// continue ;
62070: GO 61952
// end ; HackCheckCapturedStatus ( i ) ;
62072: LD_VAR 0 1
62076: PPUSH
62077: CALL 62621 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62081: LD_ADDR_VAR 0 2
62085: PUSH
62086: LD_INT 81
62088: PUSH
62089: LD_VAR 0 1
62093: PPUSH
62094: CALL_OW 255
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 33
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 91
62115: PUSH
62116: LD_VAR 0 1
62120: PUSH
62121: LD_EXP 93
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 50
62133: PUSH
62134: EMPTY
62135: LIST
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: PPUSH
62143: CALL_OW 69
62147: ST_TO_ADDR
// if not tmp then
62148: LD_VAR 0 2
62152: NOT
62153: IFFALSE 62157
// continue ;
62155: GO 61952
// HackLink ( i , tmp ) ;
62157: LD_VAR 0 1
62161: PPUSH
62162: LD_VAR 0 2
62166: PPUSH
62167: CALL 62314 0 2
// end ;
62171: GO 61952
62173: POP
62174: POP
// end ;
62175: PPOPN 2
62177: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62178: LD_INT 0
62180: PPUSH
62181: PPUSH
62182: PPUSH
// if not hack in hackTanks then
62183: LD_VAR 0 1
62187: PUSH
62188: LD_EXP 90
62192: IN
62193: NOT
62194: IFFALSE 62198
// exit ;
62196: GO 62309
// index := GetElementIndex ( hackTanks , hack ) ;
62198: LD_ADDR_VAR 0 4
62202: PUSH
62203: LD_EXP 90
62207: PPUSH
62208: LD_VAR 0 1
62212: PPUSH
62213: CALL 8200 0 2
62217: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62218: LD_EXP 91
62222: PUSH
62223: LD_VAR 0 4
62227: ARRAY
62228: IFFALSE 62309
// begin for i in hackTanksCaptured [ index ] do
62230: LD_ADDR_VAR 0 3
62234: PUSH
62235: LD_EXP 91
62239: PUSH
62240: LD_VAR 0 4
62244: ARRAY
62245: PUSH
62246: FOR_IN
62247: IFFALSE 62273
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62249: LD_VAR 0 3
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: PPUSH
62258: LD_VAR 0 3
62262: PUSH
62263: LD_INT 2
62265: ARRAY
62266: PPUSH
62267: CALL_OW 235
62271: GO 62246
62273: POP
62274: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62275: LD_ADDR_EXP 91
62279: PUSH
62280: LD_EXP 91
62284: PPUSH
62285: LD_VAR 0 4
62289: PPUSH
62290: EMPTY
62291: PPUSH
62292: CALL_OW 1
62296: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62297: LD_VAR 0 1
62301: PPUSH
62302: LD_INT 0
62304: PPUSH
62305: CALL_OW 505
// end ; end ;
62309: LD_VAR 0 2
62313: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62314: LD_INT 0
62316: PPUSH
62317: PPUSH
62318: PPUSH
// if not hack in hackTanks or not vehicles then
62319: LD_VAR 0 1
62323: PUSH
62324: LD_EXP 90
62328: IN
62329: NOT
62330: PUSH
62331: LD_VAR 0 2
62335: NOT
62336: OR
62337: IFFALSE 62341
// exit ;
62339: GO 62616
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62341: LD_ADDR_VAR 0 2
62345: PUSH
62346: LD_VAR 0 1
62350: PPUSH
62351: LD_VAR 0 2
62355: PPUSH
62356: LD_INT 1
62358: PPUSH
62359: LD_INT 1
62361: PPUSH
62362: CALL 8850 0 4
62366: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62367: LD_ADDR_VAR 0 5
62371: PUSH
62372: LD_EXP 90
62376: PPUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: CALL 8200 0 2
62386: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62387: LD_EXP 91
62391: PUSH
62392: LD_VAR 0 5
62396: ARRAY
62397: PUSH
62398: LD_EXP 92
62402: LESS
62403: IFFALSE 62592
// begin for i := 1 to vehicles do
62405: LD_ADDR_VAR 0 4
62409: PUSH
62410: DOUBLE
62411: LD_INT 1
62413: DEC
62414: ST_TO_ADDR
62415: LD_VAR 0 2
62419: PUSH
62420: FOR_TO
62421: IFFALSE 62590
// begin if hackTanksCaptured [ index ] = hackLimit then
62423: LD_EXP 91
62427: PUSH
62428: LD_VAR 0 5
62432: ARRAY
62433: PUSH
62434: LD_EXP 92
62438: EQUAL
62439: IFFALSE 62443
// break ;
62441: GO 62590
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62443: LD_ADDR_EXP 94
62447: PUSH
62448: LD_EXP 94
62452: PPUSH
62453: LD_VAR 0 5
62457: PPUSH
62458: LD_EXP 94
62462: PUSH
62463: LD_VAR 0 5
62467: ARRAY
62468: PUSH
62469: LD_INT 1
62471: PLUS
62472: PPUSH
62473: CALL_OW 1
62477: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62478: LD_ADDR_EXP 91
62482: PUSH
62483: LD_EXP 91
62487: PPUSH
62488: LD_VAR 0 5
62492: PUSH
62493: LD_EXP 91
62497: PUSH
62498: LD_VAR 0 5
62502: ARRAY
62503: PUSH
62504: LD_INT 1
62506: PLUS
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PPUSH
62512: LD_VAR 0 2
62516: PUSH
62517: LD_VAR 0 4
62521: ARRAY
62522: PUSH
62523: LD_VAR 0 2
62527: PUSH
62528: LD_VAR 0 4
62532: ARRAY
62533: PPUSH
62534: CALL_OW 255
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PPUSH
62543: CALL 8415 0 3
62547: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62548: LD_VAR 0 2
62552: PUSH
62553: LD_VAR 0 4
62557: ARRAY
62558: PPUSH
62559: LD_VAR 0 1
62563: PPUSH
62564: CALL_OW 255
62568: PPUSH
62569: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62573: LD_VAR 0 2
62577: PUSH
62578: LD_VAR 0 4
62582: ARRAY
62583: PPUSH
62584: CALL_OW 141
// end ;
62588: GO 62420
62590: POP
62591: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62592: LD_VAR 0 1
62596: PPUSH
62597: LD_EXP 91
62601: PUSH
62602: LD_VAR 0 5
62606: ARRAY
62607: PUSH
62608: LD_INT 0
62610: PLUS
62611: PPUSH
62612: CALL_OW 505
// end ;
62616: LD_VAR 0 3
62620: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
62625: PPUSH
62626: PPUSH
// if not hack in hackTanks then
62627: LD_VAR 0 1
62631: PUSH
62632: LD_EXP 90
62636: IN
62637: NOT
62638: IFFALSE 62642
// exit ;
62640: GO 62882
// index := GetElementIndex ( hackTanks , hack ) ;
62642: LD_ADDR_VAR 0 4
62646: PUSH
62647: LD_EXP 90
62651: PPUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: CALL 8200 0 2
62661: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62662: LD_ADDR_VAR 0 3
62666: PUSH
62667: DOUBLE
62668: LD_EXP 91
62672: PUSH
62673: LD_VAR 0 4
62677: ARRAY
62678: INC
62679: ST_TO_ADDR
62680: LD_INT 1
62682: PUSH
62683: FOR_DOWNTO
62684: IFFALSE 62856
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62686: LD_ADDR_VAR 0 5
62690: PUSH
62691: LD_EXP 91
62695: PUSH
62696: LD_VAR 0 4
62700: ARRAY
62701: PUSH
62702: LD_VAR 0 3
62706: ARRAY
62707: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62708: LD_VAR 0 5
62712: PUSH
62713: LD_INT 1
62715: ARRAY
62716: PPUSH
62717: CALL_OW 302
62721: NOT
62722: PUSH
62723: LD_VAR 0 5
62727: PUSH
62728: LD_INT 1
62730: ARRAY
62731: PPUSH
62732: CALL_OW 255
62736: PUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL_OW 255
62746: NONEQUAL
62747: OR
62748: IFFALSE 62854
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62750: LD_VAR 0 5
62754: PUSH
62755: LD_INT 1
62757: ARRAY
62758: PPUSH
62759: CALL_OW 305
62763: PUSH
62764: LD_VAR 0 5
62768: PUSH
62769: LD_INT 1
62771: ARRAY
62772: PPUSH
62773: CALL_OW 255
62777: PUSH
62778: LD_VAR 0 1
62782: PPUSH
62783: CALL_OW 255
62787: EQUAL
62788: AND
62789: IFFALSE 62813
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62791: LD_VAR 0 5
62795: PUSH
62796: LD_INT 1
62798: ARRAY
62799: PPUSH
62800: LD_VAR 0 5
62804: PUSH
62805: LD_INT 2
62807: ARRAY
62808: PPUSH
62809: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62813: LD_ADDR_EXP 91
62817: PUSH
62818: LD_EXP 91
62822: PPUSH
62823: LD_VAR 0 4
62827: PPUSH
62828: LD_EXP 91
62832: PUSH
62833: LD_VAR 0 4
62837: ARRAY
62838: PPUSH
62839: LD_VAR 0 3
62843: PPUSH
62844: CALL_OW 3
62848: PPUSH
62849: CALL_OW 1
62853: ST_TO_ADDR
// end ; end ;
62854: GO 62683
62856: POP
62857: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62858: LD_VAR 0 1
62862: PPUSH
62863: LD_EXP 91
62867: PUSH
62868: LD_VAR 0 4
62872: ARRAY
62873: PUSH
62874: LD_INT 0
62876: PLUS
62877: PPUSH
62878: CALL_OW 505
// end ;
62882: LD_VAR 0 2
62886: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62887: LD_INT 0
62889: PPUSH
62890: PPUSH
62891: PPUSH
62892: PPUSH
// if not hack in hackTanks then
62893: LD_VAR 0 1
62897: PUSH
62898: LD_EXP 90
62902: IN
62903: NOT
62904: IFFALSE 62908
// exit ;
62906: GO 62993
// index := GetElementIndex ( hackTanks , hack ) ;
62908: LD_ADDR_VAR 0 5
62912: PUSH
62913: LD_EXP 90
62917: PPUSH
62918: LD_VAR 0 1
62922: PPUSH
62923: CALL 8200 0 2
62927: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62928: LD_ADDR_VAR 0 4
62932: PUSH
62933: DOUBLE
62934: LD_INT 1
62936: DEC
62937: ST_TO_ADDR
62938: LD_EXP 91
62942: PUSH
62943: LD_VAR 0 5
62947: ARRAY
62948: PUSH
62949: FOR_TO
62950: IFFALSE 62991
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62952: LD_EXP 91
62956: PUSH
62957: LD_VAR 0 5
62961: ARRAY
62962: PUSH
62963: LD_VAR 0 4
62967: ARRAY
62968: PUSH
62969: LD_INT 1
62971: ARRAY
62972: PUSH
62973: LD_VAR 0 2
62977: EQUAL
62978: IFFALSE 62989
// KillUnit ( vehicle ) ;
62980: LD_VAR 0 2
62984: PPUSH
62985: CALL_OW 66
62989: GO 62949
62991: POP
62992: POP
// end ;
62993: LD_VAR 0 3
62997: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62998: LD_EXP 95
63002: NOT
63003: IFFALSE 63038
63005: GO 63007
63007: DISABLE
// begin initMiner := true ;
63008: LD_ADDR_EXP 95
63012: PUSH
63013: LD_INT 1
63015: ST_TO_ADDR
// minersList := [ ] ;
63016: LD_ADDR_EXP 96
63020: PUSH
63021: EMPTY
63022: ST_TO_ADDR
// minerMinesList := [ ] ;
63023: LD_ADDR_EXP 97
63027: PUSH
63028: EMPTY
63029: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63030: LD_ADDR_EXP 98
63034: PUSH
63035: LD_INT 5
63037: ST_TO_ADDR
// end ;
63038: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63039: LD_EXP 95
63043: PUSH
63044: LD_INT 34
63046: PUSH
63047: LD_INT 81
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PPUSH
63054: CALL_OW 69
63058: AND
63059: IFFALSE 63520
63061: GO 63063
63063: DISABLE
63064: LD_INT 0
63066: PPUSH
63067: PPUSH
63068: PPUSH
63069: PPUSH
// begin enable ;
63070: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63071: LD_ADDR_VAR 0 1
63075: PUSH
63076: LD_INT 34
63078: PUSH
63079: LD_INT 81
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PPUSH
63086: CALL_OW 69
63090: PUSH
63091: FOR_IN
63092: IFFALSE 63164
// begin if not i in minersList then
63094: LD_VAR 0 1
63098: PUSH
63099: LD_EXP 96
63103: IN
63104: NOT
63105: IFFALSE 63162
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63107: LD_ADDR_EXP 96
63111: PUSH
63112: LD_EXP 96
63116: PPUSH
63117: LD_EXP 96
63121: PUSH
63122: LD_INT 1
63124: PLUS
63125: PPUSH
63126: LD_VAR 0 1
63130: PPUSH
63131: CALL_OW 1
63135: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63136: LD_ADDR_EXP 97
63140: PUSH
63141: LD_EXP 97
63145: PPUSH
63146: LD_EXP 97
63150: PUSH
63151: LD_INT 1
63153: PLUS
63154: PPUSH
63155: EMPTY
63156: PPUSH
63157: CALL_OW 1
63161: ST_TO_ADDR
// end end ;
63162: GO 63091
63164: POP
63165: POP
// for i := minerMinesList downto 1 do
63166: LD_ADDR_VAR 0 1
63170: PUSH
63171: DOUBLE
63172: LD_EXP 97
63176: INC
63177: ST_TO_ADDR
63178: LD_INT 1
63180: PUSH
63181: FOR_DOWNTO
63182: IFFALSE 63518
// begin if IsLive ( minersList [ i ] ) then
63184: LD_EXP 96
63188: PUSH
63189: LD_VAR 0 1
63193: ARRAY
63194: PPUSH
63195: CALL_OW 300
63199: IFFALSE 63227
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63201: LD_EXP 96
63205: PUSH
63206: LD_VAR 0 1
63210: ARRAY
63211: PPUSH
63212: LD_EXP 97
63216: PUSH
63217: LD_VAR 0 1
63221: ARRAY
63222: PPUSH
63223: CALL_OW 505
// if not minerMinesList [ i ] then
63227: LD_EXP 97
63231: PUSH
63232: LD_VAR 0 1
63236: ARRAY
63237: NOT
63238: IFFALSE 63242
// continue ;
63240: GO 63181
// for j := minerMinesList [ i ] downto 1 do
63242: LD_ADDR_VAR 0 2
63246: PUSH
63247: DOUBLE
63248: LD_EXP 97
63252: PUSH
63253: LD_VAR 0 1
63257: ARRAY
63258: INC
63259: ST_TO_ADDR
63260: LD_INT 1
63262: PUSH
63263: FOR_DOWNTO
63264: IFFALSE 63514
// begin side := GetSide ( minersList [ i ] ) ;
63266: LD_ADDR_VAR 0 3
63270: PUSH
63271: LD_EXP 96
63275: PUSH
63276: LD_VAR 0 1
63280: ARRAY
63281: PPUSH
63282: CALL_OW 255
63286: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63287: LD_ADDR_VAR 0 4
63291: PUSH
63292: LD_EXP 97
63296: PUSH
63297: LD_VAR 0 1
63301: ARRAY
63302: PUSH
63303: LD_VAR 0 2
63307: ARRAY
63308: PUSH
63309: LD_INT 1
63311: ARRAY
63312: PPUSH
63313: LD_EXP 97
63317: PUSH
63318: LD_VAR 0 1
63322: ARRAY
63323: PUSH
63324: LD_VAR 0 2
63328: ARRAY
63329: PUSH
63330: LD_INT 2
63332: ARRAY
63333: PPUSH
63334: CALL_OW 428
63338: ST_TO_ADDR
// if not tmp then
63339: LD_VAR 0 4
63343: NOT
63344: IFFALSE 63348
// continue ;
63346: GO 63263
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63348: LD_VAR 0 4
63352: PUSH
63353: LD_INT 81
63355: PUSH
63356: LD_VAR 0 3
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PPUSH
63365: CALL_OW 69
63369: IN
63370: PUSH
63371: LD_EXP 97
63375: PUSH
63376: LD_VAR 0 1
63380: ARRAY
63381: PUSH
63382: LD_VAR 0 2
63386: ARRAY
63387: PUSH
63388: LD_INT 1
63390: ARRAY
63391: PPUSH
63392: LD_EXP 97
63396: PUSH
63397: LD_VAR 0 1
63401: ARRAY
63402: PUSH
63403: LD_VAR 0 2
63407: ARRAY
63408: PUSH
63409: LD_INT 2
63411: ARRAY
63412: PPUSH
63413: CALL_OW 458
63417: AND
63418: IFFALSE 63512
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63420: LD_EXP 97
63424: PUSH
63425: LD_VAR 0 1
63429: ARRAY
63430: PUSH
63431: LD_VAR 0 2
63435: ARRAY
63436: PUSH
63437: LD_INT 1
63439: ARRAY
63440: PPUSH
63441: LD_EXP 97
63445: PUSH
63446: LD_VAR 0 1
63450: ARRAY
63451: PUSH
63452: LD_VAR 0 2
63456: ARRAY
63457: PUSH
63458: LD_INT 2
63460: ARRAY
63461: PPUSH
63462: LD_VAR 0 3
63466: PPUSH
63467: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63471: LD_ADDR_EXP 97
63475: PUSH
63476: LD_EXP 97
63480: PPUSH
63481: LD_VAR 0 1
63485: PPUSH
63486: LD_EXP 97
63490: PUSH
63491: LD_VAR 0 1
63495: ARRAY
63496: PPUSH
63497: LD_VAR 0 2
63501: PPUSH
63502: CALL_OW 3
63506: PPUSH
63507: CALL_OW 1
63511: ST_TO_ADDR
// end ; end ;
63512: GO 63263
63514: POP
63515: POP
// end ;
63516: GO 63181
63518: POP
63519: POP
// end ;
63520: PPOPN 4
63522: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63523: LD_INT 0
63525: PPUSH
63526: PPUSH
// result := false ;
63527: LD_ADDR_VAR 0 4
63531: PUSH
63532: LD_INT 0
63534: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63535: LD_VAR 0 1
63539: PPUSH
63540: CALL_OW 264
63544: PUSH
63545: LD_INT 81
63547: EQUAL
63548: NOT
63549: IFFALSE 63553
// exit ;
63551: GO 63793
// index := GetElementIndex ( minersList , unit ) ;
63553: LD_ADDR_VAR 0 5
63557: PUSH
63558: LD_EXP 96
63562: PPUSH
63563: LD_VAR 0 1
63567: PPUSH
63568: CALL 8200 0 2
63572: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63573: LD_EXP 97
63577: PUSH
63578: LD_VAR 0 5
63582: ARRAY
63583: PUSH
63584: LD_EXP 98
63588: GREATEREQUAL
63589: IFFALSE 63593
// exit ;
63591: GO 63793
// ComMoveXY ( unit , x , y ) ;
63593: LD_VAR 0 1
63597: PPUSH
63598: LD_VAR 0 2
63602: PPUSH
63603: LD_VAR 0 3
63607: PPUSH
63608: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63612: LD_INT 35
63614: PPUSH
63615: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63619: LD_VAR 0 1
63623: PPUSH
63624: LD_VAR 0 2
63628: PPUSH
63629: LD_VAR 0 3
63633: PPUSH
63634: CALL 39555 0 3
63638: NOT
63639: PUSH
63640: LD_VAR 0 1
63644: PPUSH
63645: CALL_OW 314
63649: AND
63650: IFFALSE 63654
// exit ;
63652: GO 63793
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63654: LD_VAR 0 2
63658: PPUSH
63659: LD_VAR 0 3
63663: PPUSH
63664: CALL_OW 428
63668: PUSH
63669: LD_VAR 0 1
63673: EQUAL
63674: PUSH
63675: LD_VAR 0 1
63679: PPUSH
63680: CALL_OW 314
63684: NOT
63685: AND
63686: IFFALSE 63612
// PlaySoundXY ( x , y , PlantMine ) ;
63688: LD_VAR 0 2
63692: PPUSH
63693: LD_VAR 0 3
63697: PPUSH
63698: LD_STRING PlantMine
63700: PPUSH
63701: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63705: LD_VAR 0 2
63709: PPUSH
63710: LD_VAR 0 3
63714: PPUSH
63715: LD_VAR 0 1
63719: PPUSH
63720: CALL_OW 255
63724: PPUSH
63725: LD_INT 0
63727: PPUSH
63728: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63732: LD_ADDR_EXP 97
63736: PUSH
63737: LD_EXP 97
63741: PPUSH
63742: LD_VAR 0 5
63746: PUSH
63747: LD_EXP 97
63751: PUSH
63752: LD_VAR 0 5
63756: ARRAY
63757: PUSH
63758: LD_INT 1
63760: PLUS
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PPUSH
63766: LD_VAR 0 2
63770: PUSH
63771: LD_VAR 0 3
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PPUSH
63780: CALL 8415 0 3
63784: ST_TO_ADDR
// result := true ;
63785: LD_ADDR_VAR 0 4
63789: PUSH
63790: LD_INT 1
63792: ST_TO_ADDR
// end ;
63793: LD_VAR 0 4
63797: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63798: LD_INT 0
63800: PPUSH
63801: PPUSH
63802: PPUSH
// if not unit in minersList then
63803: LD_VAR 0 1
63807: PUSH
63808: LD_EXP 96
63812: IN
63813: NOT
63814: IFFALSE 63818
// exit ;
63816: GO 64210
// index := GetElementIndex ( minersList , unit ) ;
63818: LD_ADDR_VAR 0 6
63822: PUSH
63823: LD_EXP 96
63827: PPUSH
63828: LD_VAR 0 1
63832: PPUSH
63833: CALL 8200 0 2
63837: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: DOUBLE
63844: LD_EXP 97
63848: PUSH
63849: LD_VAR 0 6
63853: ARRAY
63854: INC
63855: ST_TO_ADDR
63856: LD_INT 1
63858: PUSH
63859: FOR_DOWNTO
63860: IFFALSE 64021
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63862: LD_EXP 97
63866: PUSH
63867: LD_VAR 0 6
63871: ARRAY
63872: PUSH
63873: LD_VAR 0 5
63877: ARRAY
63878: PUSH
63879: LD_INT 1
63881: ARRAY
63882: PUSH
63883: LD_VAR 0 2
63887: EQUAL
63888: PUSH
63889: LD_EXP 97
63893: PUSH
63894: LD_VAR 0 6
63898: ARRAY
63899: PUSH
63900: LD_VAR 0 5
63904: ARRAY
63905: PUSH
63906: LD_INT 2
63908: ARRAY
63909: PUSH
63910: LD_VAR 0 3
63914: EQUAL
63915: AND
63916: IFFALSE 64019
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63918: LD_EXP 97
63922: PUSH
63923: LD_VAR 0 6
63927: ARRAY
63928: PUSH
63929: LD_VAR 0 5
63933: ARRAY
63934: PUSH
63935: LD_INT 1
63937: ARRAY
63938: PPUSH
63939: LD_EXP 97
63943: PUSH
63944: LD_VAR 0 6
63948: ARRAY
63949: PUSH
63950: LD_VAR 0 5
63954: ARRAY
63955: PUSH
63956: LD_INT 2
63958: ARRAY
63959: PPUSH
63960: LD_VAR 0 1
63964: PPUSH
63965: CALL_OW 255
63969: PPUSH
63970: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63974: LD_ADDR_EXP 97
63978: PUSH
63979: LD_EXP 97
63983: PPUSH
63984: LD_VAR 0 6
63988: PPUSH
63989: LD_EXP 97
63993: PUSH
63994: LD_VAR 0 6
63998: ARRAY
63999: PPUSH
64000: LD_VAR 0 5
64004: PPUSH
64005: CALL_OW 3
64009: PPUSH
64010: CALL_OW 1
64014: ST_TO_ADDR
// exit ;
64015: POP
64016: POP
64017: GO 64210
// end ; end ;
64019: GO 63859
64021: POP
64022: POP
// for i := minerMinesList [ index ] downto 1 do
64023: LD_ADDR_VAR 0 5
64027: PUSH
64028: DOUBLE
64029: LD_EXP 97
64033: PUSH
64034: LD_VAR 0 6
64038: ARRAY
64039: INC
64040: ST_TO_ADDR
64041: LD_INT 1
64043: PUSH
64044: FOR_DOWNTO
64045: IFFALSE 64208
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64047: LD_EXP 97
64051: PUSH
64052: LD_VAR 0 6
64056: ARRAY
64057: PUSH
64058: LD_VAR 0 5
64062: ARRAY
64063: PUSH
64064: LD_INT 1
64066: ARRAY
64067: PPUSH
64068: LD_EXP 97
64072: PUSH
64073: LD_VAR 0 6
64077: ARRAY
64078: PUSH
64079: LD_VAR 0 5
64083: ARRAY
64084: PUSH
64085: LD_INT 2
64087: ARRAY
64088: PPUSH
64089: LD_VAR 0 2
64093: PPUSH
64094: LD_VAR 0 3
64098: PPUSH
64099: CALL_OW 298
64103: PUSH
64104: LD_INT 6
64106: LESS
64107: IFFALSE 64206
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64109: LD_EXP 97
64113: PUSH
64114: LD_VAR 0 6
64118: ARRAY
64119: PUSH
64120: LD_VAR 0 5
64124: ARRAY
64125: PUSH
64126: LD_INT 1
64128: ARRAY
64129: PPUSH
64130: LD_EXP 97
64134: PUSH
64135: LD_VAR 0 6
64139: ARRAY
64140: PUSH
64141: LD_VAR 0 5
64145: ARRAY
64146: PUSH
64147: LD_INT 2
64149: ARRAY
64150: PPUSH
64151: LD_VAR 0 1
64155: PPUSH
64156: CALL_OW 255
64160: PPUSH
64161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64165: LD_ADDR_EXP 97
64169: PUSH
64170: LD_EXP 97
64174: PPUSH
64175: LD_VAR 0 6
64179: PPUSH
64180: LD_EXP 97
64184: PUSH
64185: LD_VAR 0 6
64189: ARRAY
64190: PPUSH
64191: LD_VAR 0 5
64195: PPUSH
64196: CALL_OW 3
64200: PPUSH
64201: CALL_OW 1
64205: ST_TO_ADDR
// end ; end ;
64206: GO 64044
64208: POP
64209: POP
// end ;
64210: LD_VAR 0 4
64214: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64215: LD_INT 0
64217: PPUSH
64218: PPUSH
64219: PPUSH
64220: PPUSH
64221: PPUSH
64222: PPUSH
64223: PPUSH
64224: PPUSH
64225: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64226: LD_VAR 0 1
64230: PPUSH
64231: CALL_OW 264
64235: PUSH
64236: LD_INT 81
64238: EQUAL
64239: NOT
64240: PUSH
64241: LD_VAR 0 1
64245: PUSH
64246: LD_EXP 96
64250: IN
64251: NOT
64252: OR
64253: IFFALSE 64257
// exit ;
64255: GO 64579
// index := GetElementIndex ( minersList , unit ) ;
64257: LD_ADDR_VAR 0 6
64261: PUSH
64262: LD_EXP 96
64266: PPUSH
64267: LD_VAR 0 1
64271: PPUSH
64272: CALL 8200 0 2
64276: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64277: LD_ADDR_VAR 0 8
64281: PUSH
64282: LD_EXP 98
64286: PUSH
64287: LD_EXP 97
64291: PUSH
64292: LD_VAR 0 6
64296: ARRAY
64297: MINUS
64298: ST_TO_ADDR
// if not minesFreeAmount then
64299: LD_VAR 0 8
64303: NOT
64304: IFFALSE 64308
// exit ;
64306: GO 64579
// tmp := [ ] ;
64308: LD_ADDR_VAR 0 7
64312: PUSH
64313: EMPTY
64314: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64315: LD_ADDR_VAR 0 5
64319: PUSH
64320: DOUBLE
64321: LD_INT 1
64323: DEC
64324: ST_TO_ADDR
64325: LD_VAR 0 8
64329: PUSH
64330: FOR_TO
64331: IFFALSE 64526
// begin _d := rand ( 0 , 5 ) ;
64333: LD_ADDR_VAR 0 11
64337: PUSH
64338: LD_INT 0
64340: PPUSH
64341: LD_INT 5
64343: PPUSH
64344: CALL_OW 12
64348: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64349: LD_ADDR_VAR 0 12
64353: PUSH
64354: LD_INT 2
64356: PPUSH
64357: LD_INT 6
64359: PPUSH
64360: CALL_OW 12
64364: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64365: LD_ADDR_VAR 0 9
64369: PUSH
64370: LD_VAR 0 2
64374: PPUSH
64375: LD_VAR 0 11
64379: PPUSH
64380: LD_VAR 0 12
64384: PPUSH
64385: CALL_OW 272
64389: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64390: LD_ADDR_VAR 0 10
64394: PUSH
64395: LD_VAR 0 3
64399: PPUSH
64400: LD_VAR 0 11
64404: PPUSH
64405: LD_VAR 0 12
64409: PPUSH
64410: CALL_OW 273
64414: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64415: LD_VAR 0 9
64419: PPUSH
64420: LD_VAR 0 10
64424: PPUSH
64425: CALL_OW 488
64429: PUSH
64430: LD_VAR 0 9
64434: PUSH
64435: LD_VAR 0 10
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_VAR 0 7
64448: IN
64449: NOT
64450: AND
64451: PUSH
64452: LD_VAR 0 9
64456: PPUSH
64457: LD_VAR 0 10
64461: PPUSH
64462: CALL_OW 458
64466: NOT
64467: AND
64468: IFFALSE 64510
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64470: LD_ADDR_VAR 0 7
64474: PUSH
64475: LD_VAR 0 7
64479: PPUSH
64480: LD_VAR 0 7
64484: PUSH
64485: LD_INT 1
64487: PLUS
64488: PPUSH
64489: LD_VAR 0 9
64493: PUSH
64494: LD_VAR 0 10
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PPUSH
64503: CALL_OW 1
64507: ST_TO_ADDR
64508: GO 64524
// i := i - 1 ;
64510: LD_ADDR_VAR 0 5
64514: PUSH
64515: LD_VAR 0 5
64519: PUSH
64520: LD_INT 1
64522: MINUS
64523: ST_TO_ADDR
// end ;
64524: GO 64330
64526: POP
64527: POP
// for i in tmp do
64528: LD_ADDR_VAR 0 5
64532: PUSH
64533: LD_VAR 0 7
64537: PUSH
64538: FOR_IN
64539: IFFALSE 64577
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64541: LD_VAR 0 1
64545: PPUSH
64546: LD_VAR 0 5
64550: PUSH
64551: LD_INT 1
64553: ARRAY
64554: PPUSH
64555: LD_VAR 0 5
64559: PUSH
64560: LD_INT 2
64562: ARRAY
64563: PPUSH
64564: CALL 63523 0 3
64568: NOT
64569: IFFALSE 64575
// exit ;
64571: POP
64572: POP
64573: GO 64579
64575: GO 64538
64577: POP
64578: POP
// end ;
64579: LD_VAR 0 4
64583: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64584: LD_INT 0
64586: PPUSH
64587: PPUSH
64588: PPUSH
64589: PPUSH
64590: PPUSH
64591: PPUSH
64592: PPUSH
// if not GetClass ( unit ) = class_sniper then
64593: LD_VAR 0 1
64597: PPUSH
64598: CALL_OW 257
64602: PUSH
64603: LD_INT 5
64605: EQUAL
64606: NOT
64607: IFFALSE 64611
// exit ;
64609: GO 64999
// dist := 8 ;
64611: LD_ADDR_VAR 0 5
64615: PUSH
64616: LD_INT 8
64618: ST_TO_ADDR
// viewRange := 12 ;
64619: LD_ADDR_VAR 0 7
64623: PUSH
64624: LD_INT 12
64626: ST_TO_ADDR
// side := GetSide ( unit ) ;
64627: LD_ADDR_VAR 0 6
64631: PUSH
64632: LD_VAR 0 1
64636: PPUSH
64637: CALL_OW 255
64641: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64642: LD_INT 61
64644: PPUSH
64645: LD_VAR 0 6
64649: PPUSH
64650: CALL_OW 321
64654: PUSH
64655: LD_INT 2
64657: EQUAL
64658: IFFALSE 64668
// viewRange := 16 ;
64660: LD_ADDR_VAR 0 7
64664: PUSH
64665: LD_INT 16
64667: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64668: LD_VAR 0 1
64672: PPUSH
64673: LD_VAR 0 2
64677: PPUSH
64678: LD_VAR 0 3
64682: PPUSH
64683: CALL_OW 297
64687: PUSH
64688: LD_VAR 0 5
64692: GREATER
64693: IFFALSE 64772
// begin ComMoveXY ( unit , x , y ) ;
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_VAR 0 2
64704: PPUSH
64705: LD_VAR 0 3
64709: PPUSH
64710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64714: LD_INT 35
64716: PPUSH
64717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64721: LD_VAR 0 1
64725: PPUSH
64726: LD_VAR 0 2
64730: PPUSH
64731: LD_VAR 0 3
64735: PPUSH
64736: CALL 39555 0 3
64740: NOT
64741: IFFALSE 64745
// exit ;
64743: GO 64999
// until GetDistUnitXY ( unit , x , y ) < dist ;
64745: LD_VAR 0 1
64749: PPUSH
64750: LD_VAR 0 2
64754: PPUSH
64755: LD_VAR 0 3
64759: PPUSH
64760: CALL_OW 297
64764: PUSH
64765: LD_VAR 0 5
64769: LESS
64770: IFFALSE 64714
// end ; ComTurnXY ( unit , x , y ) ;
64772: LD_VAR 0 1
64776: PPUSH
64777: LD_VAR 0 2
64781: PPUSH
64782: LD_VAR 0 3
64786: PPUSH
64787: CALL_OW 118
// wait ( 5 ) ;
64791: LD_INT 5
64793: PPUSH
64794: CALL_OW 67
// _d := GetDir ( unit ) ;
64798: LD_ADDR_VAR 0 10
64802: PUSH
64803: LD_VAR 0 1
64807: PPUSH
64808: CALL_OW 254
64812: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64813: LD_ADDR_VAR 0 8
64817: PUSH
64818: LD_VAR 0 1
64822: PPUSH
64823: CALL_OW 250
64827: PPUSH
64828: LD_VAR 0 10
64832: PPUSH
64833: LD_VAR 0 5
64837: PPUSH
64838: CALL_OW 272
64842: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64843: LD_ADDR_VAR 0 9
64847: PUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 251
64857: PPUSH
64858: LD_VAR 0 10
64862: PPUSH
64863: LD_VAR 0 5
64867: PPUSH
64868: CALL_OW 273
64872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64873: LD_VAR 0 8
64877: PPUSH
64878: LD_VAR 0 9
64882: PPUSH
64883: CALL_OW 488
64887: NOT
64888: IFFALSE 64892
// exit ;
64890: GO 64999
// ComAnimCustom ( unit , 1 ) ;
64892: LD_VAR 0 1
64896: PPUSH
64897: LD_INT 1
64899: PPUSH
64900: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64904: LD_VAR 0 8
64908: PPUSH
64909: LD_VAR 0 9
64913: PPUSH
64914: LD_VAR 0 6
64918: PPUSH
64919: LD_VAR 0 7
64923: PPUSH
64924: CALL_OW 330
// repeat wait ( 1 ) ;
64928: LD_INT 1
64930: PPUSH
64931: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64935: LD_VAR 0 1
64939: PPUSH
64940: CALL_OW 316
64944: PUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: CALL_OW 314
64954: OR
64955: PUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: CALL_OW 302
64965: NOT
64966: OR
64967: PUSH
64968: LD_VAR 0 1
64972: PPUSH
64973: CALL_OW 301
64977: OR
64978: IFFALSE 64928
// RemoveSeeing ( _x , _y , side ) ;
64980: LD_VAR 0 8
64984: PPUSH
64985: LD_VAR 0 9
64989: PPUSH
64990: LD_VAR 0 6
64994: PPUSH
64995: CALL_OW 331
// end ;
64999: LD_VAR 0 4
65003: RET
