// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 527 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 08_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 08_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
// uc_side := 5 ;
  45: LD_ADDR_OWVAR 20
  49: PUSH
  50: LD_INT 5
  52: ST_TO_ADDR
// uc_nation := nation_arabian ;
  53: LD_ADDR_OWVAR 21
  57: PUSH
  58: LD_INT 2
  60: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING Heike
  68: PPUSH
  69: LD_EXP 1
  73: NOT
  74: PPUSH
  75: LD_EXP 2
  79: PPUSH
  80: CALL 535 0 3
  84: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_STRING Ibrahim
  92: PPUSH
  93: LD_EXP 1
  97: NOT
  98: PPUSH
  99: LD_EXP 2
 103: PPUSH
 104: CALL 535 0 3
 108: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 109: LD_ADDR_EXP 4
 113: PUSH
 114: LD_STRING Givi
 116: PPUSH
 117: LD_EXP 1
 121: NOT
 122: PPUSH
 123: LD_EXP 2
 127: PPUSH
 128: CALL 535 0 3
 132: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 133: LD_ADDR_EXP 7
 137: PUSH
 138: LD_STRING Kamil
 140: PPUSH
 141: LD_EXP 1
 145: NOT
 146: PPUSH
 147: LD_EXP 2
 151: PPUSH
 152: CALL 535 0 3
 156: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_STRING Kaia
 164: PPUSH
 165: LD_EXP 1
 169: NOT
 170: PPUSH
 171: LD_EXP 2
 175: PPUSH
 176: CALL 535 0 3
 180: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 181: LD_ADDR_EXP 9
 185: PUSH
 186: LD_STRING Sophia
 188: PPUSH
 189: LD_EXP 1
 193: NOT
 194: PPUSH
 195: LD_EXP 2
 199: PPUSH
 200: CALL 535 0 3
 204: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 205: LD_ADDR_EXP 10
 209: PUSH
 210: LD_STRING Markov
 212: PPUSH
 213: LD_EXP 1
 217: NOT
 218: PPUSH
 219: LD_EXP 2
 223: PPUSH
 224: CALL 535 0 3
 228: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 229: LD_ADDR_EXP 13
 233: PUSH
 234: LD_STRING Aviradze
 236: PPUSH
 237: LD_EXP 1
 241: NOT
 242: PPUSH
 243: LD_EXP 2
 247: PPUSH
 248: CALL 535 0 3
 252: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 253: LD_ADDR_EXP 12
 257: PUSH
 258: LD_STRING Kurt
 260: PPUSH
 261: LD_EXP 1
 265: NOT
 266: PPUSH
 267: LD_EXP 2
 271: PPUSH
 272: CALL 535 0 3
 276: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 277: LD_ADDR_EXP 5
 281: PUSH
 282: LD_STRING Mike
 284: PPUSH
 285: LD_EXP 1
 289: NOT
 290: PPUSH
 291: LD_EXP 2
 295: PPUSH
 296: CALL 535 0 3
 300: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 301: LD_ADDR_EXP 11
 305: PUSH
 306: LD_STRING Olaf
 308: PPUSH
 309: LD_EXP 1
 313: NOT
 314: PPUSH
 315: LD_EXP 2
 319: PPUSH
 320: CALL 535 0 3
 324: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 325: LD_ADDR_EXP 20
 329: PUSH
 330: LD_STRING 08_others
 332: PPUSH
 333: CALL_OW 31
 337: ST_TO_ADDR
// uc_side := 2 ;
 338: LD_ADDR_OWVAR 20
 342: PUSH
 343: LD_INT 2
 345: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 346: LD_ADDR_EXP 14
 350: PUSH
 351: LD_STRING Schulz
 353: PPUSH
 354: CALL_OW 25
 358: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 359: LD_ADDR_EXP 15
 363: PUSH
 364: LD_STRING Basim
 366: PPUSH
 367: CALL_OW 25
 371: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 372: LD_ADDR_EXP 16
 376: PUSH
 377: LD_STRING Lemmy
 379: PPUSH
 380: CALL_OW 25
 384: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 385: LD_ADDR_EXP 17
 389: PUSH
 390: LD_STRING Mia
 392: PPUSH
 393: CALL_OW 25
 397: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Nia
 405: PPUSH
 406: CALL_OW 25
 410: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 411: LD_ADDR_EXP 19
 415: PUSH
 416: LD_STRING Jenna
 418: PPUSH
 419: CALL_OW 25
 423: ST_TO_ADDR
// schulzSecondSquad := [ ] ;
 424: LD_ADDR_EXP 21
 428: PUSH
 429: EMPTY
 430: ST_TO_ADDR
// for i := 1 to 4 do
 431: LD_ADDR_VAR 0 2
 435: PUSH
 436: DOUBLE
 437: LD_INT 1
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 4
 443: PUSH
 444: FOR_TO
 445: IFFALSE 484
// begin PrepareHuman ( false , i , 6 ) ;
 447: LD_INT 0
 449: PPUSH
 450: LD_VAR 0 2
 454: PPUSH
 455: LD_INT 6
 457: PPUSH
 458: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 462: LD_ADDR_EXP 21
 466: PUSH
 467: LD_EXP 21
 471: PPUSH
 472: CALL_OW 44
 476: PPUSH
 477: CALL 38003 0 2
 481: ST_TO_ADDR
// end ;
 482: GO 444
 484: POP
 485: POP
// end ; end_of_file end_of_file
 486: LD_VAR 0 1
 490: RET
// export function CreateNature ; var i ; begin
 491: LD_INT 0
 493: PPUSH
 494: PPUSH
// PrepareApeman ( 0 ) ;
 495: LD_INT 0
 497: PPUSH
 498: CALL 34283 0 1
// for i := 1 to 5 do
 502: LD_ADDR_VAR 0 2
 506: PUSH
 507: DOUBLE
 508: LD_INT 1
 510: DEC
 511: ST_TO_ADDR
 512: LD_INT 5
 514: PUSH
 515: FOR_TO
 516: IFFALSE 520
// begin end ;
 518: GO 515
 520: POP
 521: POP
// end ; end_of_file end_of_file
 522: LD_VAR 0 1
 526: RET
// export function Action ; begin
 527: LD_INT 0
 529: PPUSH
// end ; end_of_file
 530: LD_VAR 0 1
 534: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// if exist_mode then
 539: LD_VAR 0 2
 543: IFFALSE 568
// unit := CreateCharacter ( prefix & ident ) else
 545: LD_ADDR_VAR 0 5
 549: PUSH
 550: LD_VAR 0 3
 554: PUSH
 555: LD_VAR 0 1
 559: STR
 560: PPUSH
 561: CALL_OW 34
 565: ST_TO_ADDR
 566: GO 583
// unit := NewCharacter ( ident ) ;
 568: LD_ADDR_VAR 0 5
 572: PUSH
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 25
 582: ST_TO_ADDR
// result := unit ;
 583: LD_ADDR_VAR 0 4
 587: PUSH
 588: LD_VAR 0 5
 592: ST_TO_ADDR
// end ;
 593: LD_VAR 0 4
 597: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 598: LD_INT 0
 600: PPUSH
 601: PPUSH
// if not side or not nation then
 602: LD_VAR 0 1
 606: NOT
 607: PUSH
 608: LD_VAR 0 2
 612: NOT
 613: OR
 614: IFFALSE 618
// exit ;
 616: GO 1386
// case nation of nation_american :
 618: LD_VAR 0 2
 622: PUSH
 623: LD_INT 1
 625: DOUBLE
 626: EQUAL
 627: IFTRUE 631
 629: GO 845
 631: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 632: LD_ADDR_VAR 0 4
 636: PUSH
 637: LD_INT 35
 639: PUSH
 640: LD_INT 45
 642: PUSH
 643: LD_INT 46
 645: PUSH
 646: LD_INT 47
 648: PUSH
 649: LD_INT 82
 651: PUSH
 652: LD_INT 83
 654: PUSH
 655: LD_INT 84
 657: PUSH
 658: LD_INT 85
 660: PUSH
 661: LD_INT 86
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: LD_INT 2
 669: PUSH
 670: LD_INT 6
 672: PUSH
 673: LD_INT 15
 675: PUSH
 676: LD_INT 16
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 12
 684: PUSH
 685: LD_INT 13
 687: PUSH
 688: LD_INT 10
 690: PUSH
 691: LD_INT 14
 693: PUSH
 694: LD_INT 20
 696: PUSH
 697: LD_INT 21
 699: PUSH
 700: LD_INT 22
 702: PUSH
 703: LD_INT 25
 705: PUSH
 706: LD_INT 32
 708: PUSH
 709: LD_INT 27
 711: PUSH
 712: LD_INT 36
 714: PUSH
 715: LD_INT 69
 717: PUSH
 718: LD_INT 39
 720: PUSH
 721: LD_INT 34
 723: PUSH
 724: LD_INT 40
 726: PUSH
 727: LD_INT 48
 729: PUSH
 730: LD_INT 49
 732: PUSH
 733: LD_INT 50
 735: PUSH
 736: LD_INT 51
 738: PUSH
 739: LD_INT 52
 741: PUSH
 742: LD_INT 53
 744: PUSH
 745: LD_INT 54
 747: PUSH
 748: LD_INT 55
 750: PUSH
 751: LD_INT 56
 753: PUSH
 754: LD_INT 57
 756: PUSH
 757: LD_INT 58
 759: PUSH
 760: LD_INT 59
 762: PUSH
 763: LD_INT 60
 765: PUSH
 766: LD_INT 61
 768: PUSH
 769: LD_INT 62
 771: PUSH
 772: LD_INT 80
 774: PUSH
 775: LD_INT 82
 777: PUSH
 778: LD_INT 83
 780: PUSH
 781: LD_INT 84
 783: PUSH
 784: LD_INT 85
 786: PUSH
 787: LD_INT 86
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: ST_TO_ADDR
 843: GO 1310
 845: LD_INT 2
 847: DOUBLE
 848: EQUAL
 849: IFTRUE 853
 851: GO 1079
 853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 854: LD_ADDR_VAR 0 4
 858: PUSH
 859: LD_INT 35
 861: PUSH
 862: LD_INT 45
 864: PUSH
 865: LD_INT 46
 867: PUSH
 868: LD_INT 47
 870: PUSH
 871: LD_INT 82
 873: PUSH
 874: LD_INT 83
 876: PUSH
 877: LD_INT 84
 879: PUSH
 880: LD_INT 85
 882: PUSH
 883: LD_INT 87
 885: PUSH
 886: LD_INT 70
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 4
 900: PUSH
 901: LD_INT 5
 903: PUSH
 904: LD_INT 6
 906: PUSH
 907: LD_INT 15
 909: PUSH
 910: LD_INT 18
 912: PUSH
 913: LD_INT 7
 915: PUSH
 916: LD_INT 17
 918: PUSH
 919: LD_INT 8
 921: PUSH
 922: LD_INT 20
 924: PUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 22
 930: PUSH
 931: LD_INT 72
 933: PUSH
 934: LD_INT 26
 936: PUSH
 937: LD_INT 69
 939: PUSH
 940: LD_INT 39
 942: PUSH
 943: LD_INT 40
 945: PUSH
 946: LD_INT 41
 948: PUSH
 949: LD_INT 42
 951: PUSH
 952: LD_INT 43
 954: PUSH
 955: LD_INT 48
 957: PUSH
 958: LD_INT 49
 960: PUSH
 961: LD_INT 50
 963: PUSH
 964: LD_INT 51
 966: PUSH
 967: LD_INT 52
 969: PUSH
 970: LD_INT 53
 972: PUSH
 973: LD_INT 54
 975: PUSH
 976: LD_INT 55
 978: PUSH
 979: LD_INT 56
 981: PUSH
 982: LD_INT 60
 984: PUSH
 985: LD_INT 61
 987: PUSH
 988: LD_INT 62
 990: PUSH
 991: LD_INT 66
 993: PUSH
 994: LD_INT 67
 996: PUSH
 997: LD_INT 68
 999: PUSH
1000: LD_INT 81
1002: PUSH
1003: LD_INT 82
1005: PUSH
1006: LD_INT 83
1008: PUSH
1009: LD_INT 84
1011: PUSH
1012: LD_INT 85
1014: PUSH
1015: LD_INT 87
1017: PUSH
1018: LD_INT 88
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: ST_TO_ADDR
1077: GO 1310
1079: LD_INT 3
1081: DOUBLE
1082: EQUAL
1083: IFTRUE 1087
1085: GO 1309
1087: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1088: LD_ADDR_VAR 0 4
1092: PUSH
1093: LD_INT 46
1095: PUSH
1096: LD_INT 47
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 2
1104: PUSH
1105: LD_INT 82
1107: PUSH
1108: LD_INT 83
1110: PUSH
1111: LD_INT 84
1113: PUSH
1114: LD_INT 85
1116: PUSH
1117: LD_INT 86
1119: PUSH
1120: LD_INT 11
1122: PUSH
1123: LD_INT 9
1125: PUSH
1126: LD_INT 20
1128: PUSH
1129: LD_INT 19
1131: PUSH
1132: LD_INT 21
1134: PUSH
1135: LD_INT 24
1137: PUSH
1138: LD_INT 22
1140: PUSH
1141: LD_INT 25
1143: PUSH
1144: LD_INT 28
1146: PUSH
1147: LD_INT 29
1149: PUSH
1150: LD_INT 30
1152: PUSH
1153: LD_INT 31
1155: PUSH
1156: LD_INT 37
1158: PUSH
1159: LD_INT 38
1161: PUSH
1162: LD_INT 32
1164: PUSH
1165: LD_INT 27
1167: PUSH
1168: LD_INT 33
1170: PUSH
1171: LD_INT 69
1173: PUSH
1174: LD_INT 39
1176: PUSH
1177: LD_INT 34
1179: PUSH
1180: LD_INT 40
1182: PUSH
1183: LD_INT 71
1185: PUSH
1186: LD_INT 23
1188: PUSH
1189: LD_INT 44
1191: PUSH
1192: LD_INT 48
1194: PUSH
1195: LD_INT 49
1197: PUSH
1198: LD_INT 50
1200: PUSH
1201: LD_INT 51
1203: PUSH
1204: LD_INT 52
1206: PUSH
1207: LD_INT 53
1209: PUSH
1210: LD_INT 54
1212: PUSH
1213: LD_INT 55
1215: PUSH
1216: LD_INT 56
1218: PUSH
1219: LD_INT 57
1221: PUSH
1222: LD_INT 58
1224: PUSH
1225: LD_INT 59
1227: PUSH
1228: LD_INT 63
1230: PUSH
1231: LD_INT 64
1233: PUSH
1234: LD_INT 65
1236: PUSH
1237: LD_INT 82
1239: PUSH
1240: LD_INT 83
1242: PUSH
1243: LD_INT 84
1245: PUSH
1246: LD_INT 85
1248: PUSH
1249: LD_INT 86
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: ST_TO_ADDR
1307: GO 1310
1309: POP
// if state > - 1 and state < 3 then
1310: LD_VAR 0 3
1314: PUSH
1315: LD_INT 1
1317: NEG
1318: GREATER
1319: PUSH
1320: LD_VAR 0 3
1324: PUSH
1325: LD_INT 3
1327: LESS
1328: AND
1329: IFFALSE 1386
// for i in result do
1331: LD_ADDR_VAR 0 5
1335: PUSH
1336: LD_VAR 0 4
1340: PUSH
1341: FOR_IN
1342: IFFALSE 1384
// if GetTech ( i , side ) <> state then
1344: LD_VAR 0 5
1348: PPUSH
1349: LD_VAR 0 1
1353: PPUSH
1354: CALL_OW 321
1358: PUSH
1359: LD_VAR 0 3
1363: NONEQUAL
1364: IFFALSE 1382
// result := result diff i ;
1366: LD_ADDR_VAR 0 4
1370: PUSH
1371: LD_VAR 0 4
1375: PUSH
1376: LD_VAR 0 5
1380: DIFF
1381: ST_TO_ADDR
1382: GO 1341
1384: POP
1385: POP
// end ;
1386: LD_VAR 0 4
1390: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1391: LD_INT 0
1393: PPUSH
1394: PPUSH
1395: PPUSH
// result := true ;
1396: LD_ADDR_VAR 0 3
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: CALL_OW 480
1418: ST_TO_ADDR
// if not tmp then
1419: LD_VAR 0 5
1423: NOT
1424: IFFALSE 1428
// exit ;
1426: GO 1477
// for i in tmp do
1428: LD_ADDR_VAR 0 4
1432: PUSH
1433: LD_VAR 0 5
1437: PUSH
1438: FOR_IN
1439: IFFALSE 1475
// if GetTech ( i , side ) <> state_researched then
1441: LD_VAR 0 4
1445: PPUSH
1446: LD_VAR 0 1
1450: PPUSH
1451: CALL_OW 321
1455: PUSH
1456: LD_INT 2
1458: NONEQUAL
1459: IFFALSE 1473
// begin result := false ;
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: LD_INT 0
1468: ST_TO_ADDR
// exit ;
1469: POP
1470: POP
1471: GO 1477
// end ;
1473: GO 1438
1475: POP
1476: POP
// end ;
1477: LD_VAR 0 3
1481: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1482: LD_INT 0
1484: PPUSH
1485: PPUSH
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1497: LD_VAR 0 1
1501: NOT
1502: PUSH
1503: LD_VAR 0 1
1507: PPUSH
1508: CALL_OW 257
1512: PUSH
1513: LD_INT 9
1515: NONEQUAL
1516: OR
1517: IFFALSE 1521
// exit ;
1519: GO 2094
// side := GetSide ( unit ) ;
1521: LD_ADDR_VAR 0 9
1525: PUSH
1526: LD_VAR 0 1
1530: PPUSH
1531: CALL_OW 255
1535: ST_TO_ADDR
// tech_space := tech_spacanom ;
1536: LD_ADDR_VAR 0 12
1540: PUSH
1541: LD_INT 29
1543: ST_TO_ADDR
// tech_time := tech_taurad ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_INT 28
1551: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1552: LD_ADDR_VAR 0 11
1556: PUSH
1557: LD_VAR 0 1
1561: PPUSH
1562: CALL_OW 310
1566: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1567: LD_VAR 0 11
1571: PPUSH
1572: CALL_OW 247
1576: PUSH
1577: LD_INT 2
1579: EQUAL
1580: IFFALSE 1584
// exit ;
1582: GO 2094
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1584: LD_ADDR_VAR 0 8
1588: PUSH
1589: LD_INT 81
1591: PUSH
1592: LD_VAR 0 9
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 3
1603: PUSH
1604: LD_INT 21
1606: PUSH
1607: LD_INT 3
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PPUSH
1622: CALL_OW 69
1626: ST_TO_ADDR
// if not tmp then
1627: LD_VAR 0 8
1631: NOT
1632: IFFALSE 1636
// exit ;
1634: GO 2094
// if in_unit then
1636: LD_VAR 0 11
1640: IFFALSE 1664
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1642: LD_ADDR_VAR 0 10
1646: PUSH
1647: LD_VAR 0 8
1651: PPUSH
1652: LD_VAR 0 11
1656: PPUSH
1657: CALL_OW 74
1661: ST_TO_ADDR
1662: GO 1684
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1664: LD_ADDR_VAR 0 10
1668: PUSH
1669: LD_VAR 0 8
1673: PPUSH
1674: LD_VAR 0 1
1678: PPUSH
1679: CALL_OW 74
1683: ST_TO_ADDR
// if not enemy then
1684: LD_VAR 0 10
1688: NOT
1689: IFFALSE 1693
// exit ;
1691: GO 2094
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1693: LD_VAR 0 11
1697: PUSH
1698: LD_VAR 0 11
1702: PPUSH
1703: LD_VAR 0 10
1707: PPUSH
1708: CALL_OW 296
1712: PUSH
1713: LD_INT 13
1715: GREATER
1716: AND
1717: PUSH
1718: LD_VAR 0 1
1722: PPUSH
1723: LD_VAR 0 10
1727: PPUSH
1728: CALL_OW 296
1732: PUSH
1733: LD_INT 12
1735: GREATER
1736: OR
1737: IFFALSE 1741
// exit ;
1739: GO 2094
// missile := [ 1 ] ;
1741: LD_ADDR_VAR 0 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: EMPTY
1750: LIST
1751: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1752: LD_VAR 0 9
1756: PPUSH
1757: LD_VAR 0 12
1761: PPUSH
1762: CALL_OW 325
1766: IFFALSE 1795
// missile := Replace ( missile , missile + 1 , 2 ) ;
1768: LD_ADDR_VAR 0 14
1772: PUSH
1773: LD_VAR 0 14
1777: PPUSH
1778: LD_VAR 0 14
1782: PUSH
1783: LD_INT 1
1785: PLUS
1786: PPUSH
1787: LD_INT 2
1789: PPUSH
1790: CALL_OW 1
1794: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1795: LD_VAR 0 9
1799: PPUSH
1800: LD_VAR 0 13
1804: PPUSH
1805: CALL_OW 325
1809: PUSH
1810: LD_VAR 0 10
1814: PPUSH
1815: CALL_OW 255
1819: PPUSH
1820: LD_VAR 0 13
1824: PPUSH
1825: CALL_OW 325
1829: NOT
1830: AND
1831: IFFALSE 1860
// missile := Replace ( missile , missile + 1 , 3 ) ;
1833: LD_ADDR_VAR 0 14
1837: PUSH
1838: LD_VAR 0 14
1842: PPUSH
1843: LD_VAR 0 14
1847: PUSH
1848: LD_INT 1
1850: PLUS
1851: PPUSH
1852: LD_INT 3
1854: PPUSH
1855: CALL_OW 1
1859: ST_TO_ADDR
// if missile < 2 then
1860: LD_VAR 0 14
1864: PUSH
1865: LD_INT 2
1867: LESS
1868: IFFALSE 1872
// exit ;
1870: GO 2094
// x := GetX ( enemy ) ;
1872: LD_ADDR_VAR 0 4
1876: PUSH
1877: LD_VAR 0 10
1881: PPUSH
1882: CALL_OW 250
1886: ST_TO_ADDR
// y := GetY ( enemy ) ;
1887: LD_ADDR_VAR 0 5
1891: PUSH
1892: LD_VAR 0 10
1896: PPUSH
1897: CALL_OW 251
1901: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1902: LD_ADDR_VAR 0 6
1906: PUSH
1907: LD_VAR 0 4
1911: PUSH
1912: LD_INT 1
1914: NEG
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 12
1923: PLUS
1924: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1925: LD_ADDR_VAR 0 7
1929: PUSH
1930: LD_VAR 0 5
1934: PUSH
1935: LD_INT 1
1937: NEG
1938: PPUSH
1939: LD_INT 1
1941: PPUSH
1942: CALL_OW 12
1946: PLUS
1947: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1948: LD_VAR 0 6
1952: PPUSH
1953: LD_VAR 0 7
1957: PPUSH
1958: CALL_OW 488
1962: NOT
1963: IFFALSE 1985
// begin _x := x ;
1965: LD_ADDR_VAR 0 6
1969: PUSH
1970: LD_VAR 0 4
1974: ST_TO_ADDR
// _y := y ;
1975: LD_ADDR_VAR 0 7
1979: PUSH
1980: LD_VAR 0 5
1984: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1985: LD_ADDR_VAR 0 3
1989: PUSH
1990: LD_INT 1
1992: PPUSH
1993: LD_VAR 0 14
1997: PPUSH
1998: CALL_OW 12
2002: ST_TO_ADDR
// case i of 1 :
2003: LD_VAR 0 3
2007: PUSH
2008: LD_INT 1
2010: DOUBLE
2011: EQUAL
2012: IFTRUE 2016
2014: GO 2033
2016: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2017: LD_VAR 0 1
2021: PPUSH
2022: LD_VAR 0 10
2026: PPUSH
2027: CALL_OW 115
2031: GO 2094
2033: LD_INT 2
2035: DOUBLE
2036: EQUAL
2037: IFTRUE 2041
2039: GO 2063
2041: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2042: LD_VAR 0 1
2046: PPUSH
2047: LD_VAR 0 6
2051: PPUSH
2052: LD_VAR 0 7
2056: PPUSH
2057: CALL_OW 153
2061: GO 2094
2063: LD_INT 3
2065: DOUBLE
2066: EQUAL
2067: IFTRUE 2071
2069: GO 2093
2071: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_VAR 0 6
2081: PPUSH
2082: LD_VAR 0 7
2086: PPUSH
2087: CALL_OW 154
2091: GO 2094
2093: POP
// end ;
2094: LD_VAR 0 2
2098: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2099: LD_INT 0
2101: PPUSH
2102: PPUSH
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
// if not unit or not building then
2107: LD_VAR 0 1
2111: NOT
2112: PUSH
2113: LD_VAR 0 2
2117: NOT
2118: OR
2119: IFFALSE 2123
// exit ;
2121: GO 2281
// x := GetX ( building ) ;
2123: LD_ADDR_VAR 0 5
2127: PUSH
2128: LD_VAR 0 2
2132: PPUSH
2133: CALL_OW 250
2137: ST_TO_ADDR
// y := GetY ( building ) ;
2138: LD_ADDR_VAR 0 6
2142: PUSH
2143: LD_VAR 0 2
2147: PPUSH
2148: CALL_OW 251
2152: ST_TO_ADDR
// for i = 0 to 5 do
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: DOUBLE
2159: LD_INT 0
2161: DEC
2162: ST_TO_ADDR
2163: LD_INT 5
2165: PUSH
2166: FOR_TO
2167: IFFALSE 2279
// begin _x := ShiftX ( x , i , 3 ) ;
2169: LD_ADDR_VAR 0 7
2173: PUSH
2174: LD_VAR 0 5
2178: PPUSH
2179: LD_VAR 0 4
2183: PPUSH
2184: LD_INT 3
2186: PPUSH
2187: CALL_OW 272
2191: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2192: LD_ADDR_VAR 0 8
2196: PUSH
2197: LD_VAR 0 6
2201: PPUSH
2202: LD_VAR 0 4
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: CALL_OW 273
2214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2215: LD_VAR 0 7
2219: PPUSH
2220: LD_VAR 0 8
2224: PPUSH
2225: CALL_OW 488
2229: NOT
2230: IFFALSE 2234
// continue ;
2232: GO 2166
// if HexInfo ( _x , _y ) = 0 then
2234: LD_VAR 0 7
2238: PPUSH
2239: LD_VAR 0 8
2243: PPUSH
2244: CALL_OW 428
2248: PUSH
2249: LD_INT 0
2251: EQUAL
2252: IFFALSE 2277
// begin ComMoveXY ( unit , _x , _y ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_VAR 0 7
2263: PPUSH
2264: LD_VAR 0 8
2268: PPUSH
2269: CALL_OW 111
// exit ;
2273: POP
2274: POP
2275: GO 2281
// end ; end ;
2277: GO 2166
2279: POP
2280: POP
// end ;
2281: LD_VAR 0 3
2285: RET
// export function ScanBase ( side , base_area ) ; begin
2286: LD_INT 0
2288: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2289: LD_ADDR_VAR 0 3
2293: PUSH
2294: LD_VAR 0 2
2298: PPUSH
2299: LD_INT 81
2301: PUSH
2302: LD_VAR 0 1
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: PPUSH
2311: CALL_OW 70
2315: ST_TO_ADDR
// end ;
2316: LD_VAR 0 3
2320: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
// result := false ;
2327: LD_ADDR_VAR 0 2
2331: PUSH
2332: LD_INT 0
2334: ST_TO_ADDR
// side := GetSide ( unit ) ;
2335: LD_ADDR_VAR 0 3
2339: PUSH
2340: LD_VAR 0 1
2344: PPUSH
2345: CALL_OW 255
2349: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_VAR 0 1
2359: PPUSH
2360: CALL_OW 248
2364: ST_TO_ADDR
// case nat of 1 :
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: DOUBLE
2373: EQUAL
2374: IFTRUE 2378
2376: GO 2389
2378: POP
// tech := tech_lassight ; 2 :
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_INT 12
2386: ST_TO_ADDR
2387: GO 2428
2389: LD_INT 2
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2408
2397: POP
// tech := tech_mortar ; 3 :
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 41
2405: ST_TO_ADDR
2406: GO 2428
2408: LD_INT 3
2410: DOUBLE
2411: EQUAL
2412: IFTRUE 2416
2414: GO 2427
2416: POP
// tech := tech_bazooka ; end ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_INT 44
2424: ST_TO_ADDR
2425: GO 2428
2427: POP
// if Researched ( side , tech ) then
2428: LD_VAR 0 3
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 325
2442: IFFALSE 2469
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_INT 5
2451: PUSH
2452: LD_INT 8
2454: PUSH
2455: LD_INT 9
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_VAR 0 4
2467: ARRAY
2468: ST_TO_ADDR
// end ;
2469: LD_VAR 0 2
2473: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2474: LD_INT 0
2476: PPUSH
2477: PPUSH
2478: PPUSH
// if not mines then
2479: LD_VAR 0 2
2483: NOT
2484: IFFALSE 2488
// exit ;
2486: GO 2632
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2488: LD_ADDR_VAR 0 5
2492: PUSH
2493: LD_INT 81
2495: PUSH
2496: LD_VAR 0 1
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: LD_INT 3
2507: PUSH
2508: LD_INT 21
2510: PUSH
2511: LD_INT 3
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PPUSH
2526: CALL_OW 69
2530: ST_TO_ADDR
// for i in mines do
2531: LD_ADDR_VAR 0 4
2535: PUSH
2536: LD_VAR 0 2
2540: PUSH
2541: FOR_IN
2542: IFFALSE 2630
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2544: LD_VAR 0 4
2548: PUSH
2549: LD_INT 1
2551: ARRAY
2552: PPUSH
2553: LD_VAR 0 4
2557: PUSH
2558: LD_INT 2
2560: ARRAY
2561: PPUSH
2562: CALL_OW 458
2566: NOT
2567: IFFALSE 2571
// continue ;
2569: GO 2541
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2571: LD_VAR 0 4
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: PPUSH
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 2
2587: ARRAY
2588: PPUSH
2589: CALL_OW 428
2593: PUSH
2594: LD_VAR 0 5
2598: IN
2599: IFFALSE 2628
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 1
2608: ARRAY
2609: PPUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_VAR 0 1
2623: PPUSH
2624: CALL_OW 456
// end ;
2628: GO 2541
2630: POP
2631: POP
// end ;
2632: LD_VAR 0 3
2636: RET
// export function Count ( array ) ; var i ; begin
2637: LD_INT 0
2639: PPUSH
2640: PPUSH
// result := 0 ;
2641: LD_ADDR_VAR 0 2
2645: PUSH
2646: LD_INT 0
2648: ST_TO_ADDR
// for i in array do
2649: LD_ADDR_VAR 0 3
2653: PUSH
2654: LD_VAR 0 1
2658: PUSH
2659: FOR_IN
2660: IFFALSE 2684
// if i then
2662: LD_VAR 0 3
2666: IFFALSE 2682
// result := result + 1 ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PUSH
2678: LD_INT 1
2680: PLUS
2681: ST_TO_ADDR
2682: GO 2659
2684: POP
2685: POP
// end ;
2686: LD_VAR 0 2
2690: RET
// export function IsEmpty ( building ) ; begin
2691: LD_INT 0
2693: PPUSH
// if not building then
2694: LD_VAR 0 1
2698: NOT
2699: IFFALSE 2703
// exit ;
2701: GO 2746
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2703: LD_ADDR_VAR 0 2
2707: PUSH
2708: LD_VAR 0 1
2712: PUSH
2713: LD_INT 22
2715: PUSH
2716: LD_VAR 0 1
2720: PPUSH
2721: CALL_OW 255
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 58
2732: PUSH
2733: EMPTY
2734: LIST
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PPUSH
2740: CALL_OW 69
2744: IN
2745: ST_TO_ADDR
// end ;
2746: LD_VAR 0 2
2750: RET
// export function IsNotFull ( building ) ; var places ; begin
2751: LD_INT 0
2753: PPUSH
2754: PPUSH
// if not building then
2755: LD_VAR 0 1
2759: NOT
2760: IFFALSE 2764
// exit ;
2762: GO 2935
// result := false ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_INT 0
2771: ST_TO_ADDR
// places := 0 ;
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
2780: LD_VAR 0 1
2784: PPUSH
2785: CALL_OW 266
2789: PUSH
2790: LD_INT 0
2792: DOUBLE
2793: EQUAL
2794: IFTRUE 2852
2796: LD_INT 1
2798: DOUBLE
2799: EQUAL
2800: IFTRUE 2852
2802: LD_INT 6
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2852
2808: LD_INT 7
2810: DOUBLE
2811: EQUAL
2812: IFTRUE 2852
2814: LD_INT 8
2816: DOUBLE
2817: EQUAL
2818: IFTRUE 2852
2820: LD_INT 4
2822: DOUBLE
2823: EQUAL
2824: IFTRUE 2852
2826: LD_INT 5
2828: DOUBLE
2829: EQUAL
2830: IFTRUE 2852
2832: LD_INT 2
2834: DOUBLE
2835: EQUAL
2836: IFTRUE 2852
2838: LD_INT 3
2840: DOUBLE
2841: EQUAL
2842: IFTRUE 2852
2844: LD_INT 35
2846: DOUBLE
2847: EQUAL
2848: IFTRUE 2852
2850: GO 2863
2852: POP
// places := 6 ; b_bunker , b_breastwork :
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: LD_INT 6
2860: ST_TO_ADDR
2861: GO 2908
2863: LD_INT 32
2865: DOUBLE
2866: EQUAL
2867: IFTRUE 2877
2869: LD_INT 31
2871: DOUBLE
2872: EQUAL
2873: IFTRUE 2877
2875: GO 2888
2877: POP
// places := 1 ; b_control_tower :
2878: LD_ADDR_VAR 0 3
2882: PUSH
2883: LD_INT 1
2885: ST_TO_ADDR
2886: GO 2908
2888: LD_INT 36
2890: DOUBLE
2891: EQUAL
2892: IFTRUE 2896
2894: GO 2907
2896: POP
// places := 3 ; end ;
2897: LD_ADDR_VAR 0 3
2901: PUSH
2902: LD_INT 3
2904: ST_TO_ADDR
2905: GO 2908
2907: POP
// if places then
2908: LD_VAR 0 3
2912: IFFALSE 2935
// result := UnitsInside ( building ) < places ;
2914: LD_ADDR_VAR 0 2
2918: PUSH
2919: LD_VAR 0 1
2923: PPUSH
2924: CALL_OW 313
2928: PUSH
2929: LD_VAR 0 3
2933: LESS
2934: ST_TO_ADDR
// end ;
2935: LD_VAR 0 2
2939: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2940: LD_INT 0
2942: PPUSH
2943: PPUSH
2944: PPUSH
2945: PPUSH
// tmp := [ ] ;
2946: LD_ADDR_VAR 0 3
2950: PUSH
2951: EMPTY
2952: ST_TO_ADDR
// list := [ ] ;
2953: LD_ADDR_VAR 0 5
2957: PUSH
2958: EMPTY
2959: ST_TO_ADDR
// for i = 16 to 25 do
2960: LD_ADDR_VAR 0 4
2964: PUSH
2965: DOUBLE
2966: LD_INT 16
2968: DEC
2969: ST_TO_ADDR
2970: LD_INT 25
2972: PUSH
2973: FOR_TO
2974: IFFALSE 3047
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2976: LD_ADDR_VAR 0 3
2980: PUSH
2981: LD_VAR 0 3
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 255
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: LD_INT 91
3005: PUSH
3006: LD_VAR 0 1
3010: PUSH
3011: LD_INT 6
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 30
3021: PUSH
3022: LD_VAR 0 4
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: ADD
3044: ST_TO_ADDR
3045: GO 2973
3047: POP
3048: POP
// for i = 1 to tmp do
3049: LD_ADDR_VAR 0 4
3053: PUSH
3054: DOUBLE
3055: LD_INT 1
3057: DEC
3058: ST_TO_ADDR
3059: LD_VAR 0 3
3063: PUSH
3064: FOR_TO
3065: IFFALSE 3153
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3067: LD_ADDR_VAR 0 5
3071: PUSH
3072: LD_VAR 0 5
3076: PUSH
3077: LD_VAR 0 3
3081: PUSH
3082: LD_VAR 0 4
3086: ARRAY
3087: PPUSH
3088: CALL_OW 266
3092: PUSH
3093: LD_VAR 0 3
3097: PUSH
3098: LD_VAR 0 4
3102: ARRAY
3103: PPUSH
3104: CALL_OW 250
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_VAR 0 4
3118: ARRAY
3119: PPUSH
3120: CALL_OW 251
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: LD_VAR 0 4
3134: ARRAY
3135: PPUSH
3136: CALL_OW 254
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: EMPTY
3148: LIST
3149: ADD
3150: ST_TO_ADDR
3151: GO 3064
3153: POP
3154: POP
// result := list ;
3155: LD_ADDR_VAR 0 2
3159: PUSH
3160: LD_VAR 0 5
3164: ST_TO_ADDR
// end ;
3165: LD_VAR 0 2
3169: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3170: LD_INT 0
3172: PPUSH
3173: PPUSH
3174: PPUSH
3175: PPUSH
3176: PPUSH
3177: PPUSH
3178: PPUSH
// if not factory then
3179: LD_VAR 0 1
3183: NOT
3184: IFFALSE 3188
// exit ;
3186: GO 3781
// if control = control_apeman then
3188: LD_VAR 0 4
3192: PUSH
3193: LD_INT 5
3195: EQUAL
3196: IFFALSE 3305
// begin tmp := UnitsInside ( factory ) ;
3198: LD_ADDR_VAR 0 8
3202: PUSH
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 313
3212: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3213: LD_VAR 0 8
3217: PPUSH
3218: LD_INT 25
3220: PUSH
3221: LD_INT 12
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PPUSH
3228: CALL_OW 72
3232: NOT
3233: IFFALSE 3243
// control := control_manual ;
3235: LD_ADDR_VAR 0 4
3239: PUSH
3240: LD_INT 1
3242: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3243: LD_ADDR_VAR 0 8
3247: PUSH
3248: LD_VAR 0 1
3252: PPUSH
3253: CALL 2940 0 1
3257: ST_TO_ADDR
// if tmp then
3258: LD_VAR 0 8
3262: IFFALSE 3305
// begin for i in tmp do
3264: LD_ADDR_VAR 0 7
3268: PUSH
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3303
// if i [ 1 ] = b_ext_radio then
3277: LD_VAR 0 7
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PUSH
3286: LD_INT 22
3288: EQUAL
3289: IFFALSE 3301
// begin control := control_remote ;
3291: LD_ADDR_VAR 0 4
3295: PUSH
3296: LD_INT 2
3298: ST_TO_ADDR
// break ;
3299: GO 3303
// end ;
3301: GO 3274
3303: POP
3304: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_VAR 0 2
3314: PPUSH
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_VAR 0 4
3324: PPUSH
3325: LD_VAR 0 5
3329: PPUSH
3330: CALL_OW 448
3334: IFFALSE 3369
// begin result := [ chassis , engine , control , weapon ] ;
3336: LD_ADDR_VAR 0 6
3340: PUSH
3341: LD_VAR 0 2
3345: PUSH
3346: LD_VAR 0 3
3350: PUSH
3351: LD_VAR 0 4
3355: PUSH
3356: LD_VAR 0 5
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: ST_TO_ADDR
// exit ;
3367: GO 3781
// end ; _chassis := AvailableChassisList ( factory ) ;
3369: LD_ADDR_VAR 0 9
3373: PUSH
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 475
3383: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3384: LD_ADDR_VAR 0 11
3388: PUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL_OW 476
3398: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3399: LD_ADDR_VAR 0 12
3403: PUSH
3404: LD_VAR 0 1
3408: PPUSH
3409: CALL_OW 477
3413: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3414: LD_ADDR_VAR 0 10
3418: PUSH
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 478
3428: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3429: LD_VAR 0 9
3433: NOT
3434: PUSH
3435: LD_VAR 0 11
3439: NOT
3440: OR
3441: PUSH
3442: LD_VAR 0 12
3446: NOT
3447: OR
3448: PUSH
3449: LD_VAR 0 10
3453: NOT
3454: OR
3455: IFFALSE 3490
// begin result := [ chassis , engine , control , weapon ] ;
3457: LD_ADDR_VAR 0 6
3461: PUSH
3462: LD_VAR 0 2
3466: PUSH
3467: LD_VAR 0 3
3471: PUSH
3472: LD_VAR 0 4
3476: PUSH
3477: LD_VAR 0 5
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: ST_TO_ADDR
// exit ;
3488: GO 3781
// end ; if not chassis in _chassis then
3490: LD_VAR 0 2
3494: PUSH
3495: LD_VAR 0 9
3499: IN
3500: NOT
3501: IFFALSE 3527
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3503: LD_ADDR_VAR 0 2
3507: PUSH
3508: LD_VAR 0 9
3512: PUSH
3513: LD_INT 1
3515: PPUSH
3516: LD_VAR 0 9
3520: PPUSH
3521: CALL_OW 12
3525: ARRAY
3526: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3527: LD_VAR 0 2
3531: PPUSH
3532: LD_VAR 0 3
3536: PPUSH
3537: CALL 3786 0 2
3541: NOT
3542: IFFALSE 3601
// repeat engine := _engine [ 1 ] ;
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_VAR 0 11
3553: PUSH
3554: LD_INT 1
3556: ARRAY
3557: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3558: LD_ADDR_VAR 0 11
3562: PUSH
3563: LD_VAR 0 11
3567: PPUSH
3568: LD_INT 1
3570: PPUSH
3571: CALL_OW 3
3575: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3576: LD_VAR 0 2
3580: PPUSH
3581: LD_VAR 0 3
3585: PPUSH
3586: CALL 3786 0 2
3590: PUSH
3591: LD_VAR 0 11
3595: PUSH
3596: EMPTY
3597: EQUAL
3598: OR
3599: IFFALSE 3544
// if not control in _control then
3601: LD_VAR 0 4
3605: PUSH
3606: LD_VAR 0 12
3610: IN
3611: NOT
3612: IFFALSE 3638
// control := _control [ rand ( 1 , _control ) ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_VAR 0 12
3623: PUSH
3624: LD_INT 1
3626: PPUSH
3627: LD_VAR 0 12
3631: PPUSH
3632: CALL_OW 12
3636: ARRAY
3637: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 5
3647: PPUSH
3648: CALL 4006 0 2
3652: NOT
3653: IFFALSE 3712
// repeat weapon := _weapon [ 1 ] ;
3655: LD_ADDR_VAR 0 5
3659: PUSH
3660: LD_VAR 0 10
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3669: LD_ADDR_VAR 0 10
3673: PUSH
3674: LD_VAR 0 10
3678: PPUSH
3679: LD_INT 1
3681: PPUSH
3682: CALL_OW 3
3686: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3687: LD_VAR 0 2
3691: PPUSH
3692: LD_VAR 0 5
3696: PPUSH
3697: CALL 4006 0 2
3701: PUSH
3702: LD_VAR 0 10
3706: PUSH
3707: EMPTY
3708: EQUAL
3709: OR
3710: IFFALSE 3655
// result := [ ] ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: EMPTY
3718: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3719: LD_VAR 0 1
3723: PPUSH
3724: LD_VAR 0 2
3728: PPUSH
3729: LD_VAR 0 3
3733: PPUSH
3734: LD_VAR 0 4
3738: PPUSH
3739: LD_VAR 0 5
3743: PPUSH
3744: CALL_OW 448
3748: IFFALSE 3781
// result := [ chassis , engine , control , weapon ] ;
3750: LD_ADDR_VAR 0 6
3754: PUSH
3755: LD_VAR 0 2
3759: PUSH
3760: LD_VAR 0 3
3764: PUSH
3765: LD_VAR 0 4
3769: PUSH
3770: LD_VAR 0 5
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: ST_TO_ADDR
// end ;
3781: LD_VAR 0 6
3785: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3786: LD_INT 0
3788: PPUSH
// if not chassis or not engine then
3789: LD_VAR 0 1
3793: NOT
3794: PUSH
3795: LD_VAR 0 2
3799: NOT
3800: OR
3801: IFFALSE 3805
// exit ;
3803: GO 4001
// case engine of engine_solar :
3805: LD_VAR 0 2
3809: PUSH
3810: LD_INT 2
3812: DOUBLE
3813: EQUAL
3814: IFTRUE 3818
3816: GO 3856
3818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3819: LD_ADDR_VAR 0 3
3823: PUSH
3824: LD_INT 11
3826: PUSH
3827: LD_INT 12
3829: PUSH
3830: LD_INT 13
3832: PUSH
3833: LD_INT 14
3835: PUSH
3836: LD_INT 1
3838: PUSH
3839: LD_INT 2
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: ST_TO_ADDR
3854: GO 3985
3856: LD_INT 1
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3926
3864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3865: LD_ADDR_VAR 0 3
3869: PUSH
3870: LD_INT 11
3872: PUSH
3873: LD_INT 12
3875: PUSH
3876: LD_INT 13
3878: PUSH
3879: LD_INT 14
3881: PUSH
3882: LD_INT 1
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 3
3890: PUSH
3891: LD_INT 4
3893: PUSH
3894: LD_INT 5
3896: PUSH
3897: LD_INT 21
3899: PUSH
3900: LD_INT 23
3902: PUSH
3903: LD_INT 22
3905: PUSH
3906: LD_INT 24
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: ST_TO_ADDR
3924: GO 3985
3926: LD_INT 3
3928: DOUBLE
3929: EQUAL
3930: IFTRUE 3934
3932: GO 3984
3934: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3935: LD_ADDR_VAR 0 3
3939: PUSH
3940: LD_INT 13
3942: PUSH
3943: LD_INT 14
3945: PUSH
3946: LD_INT 2
3948: PUSH
3949: LD_INT 3
3951: PUSH
3952: LD_INT 4
3954: PUSH
3955: LD_INT 5
3957: PUSH
3958: LD_INT 21
3960: PUSH
3961: LD_INT 22
3963: PUSH
3964: LD_INT 23
3966: PUSH
3967: LD_INT 24
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: ST_TO_ADDR
3982: GO 3985
3984: POP
// result := ( chassis in result ) ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_VAR 0 1
3994: PUSH
3995: LD_VAR 0 3
3999: IN
4000: ST_TO_ADDR
// end ;
4001: LD_VAR 0 3
4005: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4006: LD_INT 0
4008: PPUSH
// if not chassis or not weapon then
4009: LD_VAR 0 1
4013: NOT
4014: PUSH
4015: LD_VAR 0 2
4019: NOT
4020: OR
4021: IFFALSE 4025
// exit ;
4023: GO 5085
// case weapon of us_machine_gun :
4025: LD_VAR 0 2
4029: PUSH
4030: LD_INT 2
4032: DOUBLE
4033: EQUAL
4034: IFTRUE 4038
4036: GO 4068
4038: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4039: LD_ADDR_VAR 0 3
4043: PUSH
4044: LD_INT 1
4046: PUSH
4047: LD_INT 2
4049: PUSH
4050: LD_INT 3
4052: PUSH
4053: LD_INT 4
4055: PUSH
4056: LD_INT 5
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: ST_TO_ADDR
4066: GO 5069
4068: LD_INT 3
4070: DOUBLE
4071: EQUAL
4072: IFTRUE 4076
4074: GO 4106
4076: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4077: LD_ADDR_VAR 0 3
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: LD_INT 3
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: ST_TO_ADDR
4104: GO 5069
4106: LD_INT 11
4108: DOUBLE
4109: EQUAL
4110: IFTRUE 4114
4112: GO 4144
4114: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4115: LD_ADDR_VAR 0 3
4119: PUSH
4120: LD_INT 1
4122: PUSH
4123: LD_INT 2
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: ST_TO_ADDR
4142: GO 5069
4144: LD_INT 4
4146: DOUBLE
4147: EQUAL
4148: IFTRUE 4152
4150: GO 4178
4152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 3
4163: PUSH
4164: LD_INT 4
4166: PUSH
4167: LD_INT 5
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: ST_TO_ADDR
4176: GO 5069
4178: LD_INT 5
4180: DOUBLE
4181: EQUAL
4182: IFTRUE 4186
4184: GO 4212
4186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4187: LD_ADDR_VAR 0 3
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: ST_TO_ADDR
4210: GO 5069
4212: LD_INT 9
4214: DOUBLE
4215: EQUAL
4216: IFTRUE 4220
4218: GO 4246
4220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4221: LD_ADDR_VAR 0 3
4225: PUSH
4226: LD_INT 2
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 4
4234: PUSH
4235: LD_INT 5
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: ST_TO_ADDR
4244: GO 5069
4246: LD_INT 7
4248: DOUBLE
4249: EQUAL
4250: IFTRUE 4254
4252: GO 4280
4254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4255: LD_ADDR_VAR 0 3
4259: PUSH
4260: LD_INT 2
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: LD_INT 4
4268: PUSH
4269: LD_INT 5
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: ST_TO_ADDR
4278: GO 5069
4280: LD_INT 12
4282: DOUBLE
4283: EQUAL
4284: IFTRUE 4288
4286: GO 4314
4288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4289: LD_ADDR_VAR 0 3
4293: PUSH
4294: LD_INT 2
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 4
4302: PUSH
4303: LD_INT 5
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: ST_TO_ADDR
4312: GO 5069
4314: LD_INT 13
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4348
4322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 2
4330: PUSH
4331: LD_INT 3
4333: PUSH
4334: LD_INT 4
4336: PUSH
4337: LD_INT 5
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: ST_TO_ADDR
4346: GO 5069
4348: LD_INT 14
4350: DOUBLE
4351: EQUAL
4352: IFTRUE 4356
4354: GO 4374
4356: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4357: LD_ADDR_VAR 0 3
4361: PUSH
4362: LD_INT 4
4364: PUSH
4365: LD_INT 5
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: ST_TO_ADDR
4372: GO 5069
4374: LD_INT 6
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4400
4382: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_INT 4
4390: PUSH
4391: LD_INT 5
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: ST_TO_ADDR
4398: GO 5069
4400: LD_INT 10
4402: DOUBLE
4403: EQUAL
4404: IFTRUE 4408
4406: GO 4426
4408: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: LD_INT 4
4416: PUSH
4417: LD_INT 5
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: ST_TO_ADDR
4424: GO 5069
4426: LD_INT 22
4428: DOUBLE
4429: EQUAL
4430: IFTRUE 4434
4432: GO 4460
4434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4435: LD_ADDR_VAR 0 3
4439: PUSH
4440: LD_INT 11
4442: PUSH
4443: LD_INT 12
4445: PUSH
4446: LD_INT 13
4448: PUSH
4449: LD_INT 14
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: ST_TO_ADDR
4458: GO 5069
4460: LD_INT 23
4462: DOUBLE
4463: EQUAL
4464: IFTRUE 4468
4466: GO 4494
4468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 11
4476: PUSH
4477: LD_INT 12
4479: PUSH
4480: LD_INT 13
4482: PUSH
4483: LD_INT 14
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: ST_TO_ADDR
4492: GO 5069
4494: LD_INT 24
4496: DOUBLE
4497: EQUAL
4498: IFTRUE 4502
4500: GO 4528
4502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 11
4510: PUSH
4511: LD_INT 12
4513: PUSH
4514: LD_INT 13
4516: PUSH
4517: LD_INT 14
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: ST_TO_ADDR
4526: GO 5069
4528: LD_INT 30
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4562
4536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4537: LD_ADDR_VAR 0 3
4541: PUSH
4542: LD_INT 11
4544: PUSH
4545: LD_INT 12
4547: PUSH
4548: LD_INT 13
4550: PUSH
4551: LD_INT 14
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: ST_TO_ADDR
4560: GO 5069
4562: LD_INT 25
4564: DOUBLE
4565: EQUAL
4566: IFTRUE 4570
4568: GO 4588
4570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: LD_INT 13
4578: PUSH
4579: LD_INT 14
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: ST_TO_ADDR
4586: GO 5069
4588: LD_INT 27
4590: DOUBLE
4591: EQUAL
4592: IFTRUE 4596
4594: GO 4614
4596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4597: LD_ADDR_VAR 0 3
4601: PUSH
4602: LD_INT 13
4604: PUSH
4605: LD_INT 14
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: ST_TO_ADDR
4612: GO 5069
4614: LD_INT 92
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4622
4620: GO 4648
4622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4623: LD_ADDR_VAR 0 3
4627: PUSH
4628: LD_INT 11
4630: PUSH
4631: LD_INT 12
4633: PUSH
4634: LD_INT 13
4636: PUSH
4637: LD_INT 14
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: ST_TO_ADDR
4646: GO 5069
4648: LD_INT 28
4650: DOUBLE
4651: EQUAL
4652: IFTRUE 4656
4654: GO 4674
4656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_INT 13
4664: PUSH
4665: LD_INT 14
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: ST_TO_ADDR
4672: GO 5069
4674: LD_INT 29
4676: DOUBLE
4677: EQUAL
4678: IFTRUE 4682
4680: GO 4700
4682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4683: LD_ADDR_VAR 0 3
4687: PUSH
4688: LD_INT 13
4690: PUSH
4691: LD_INT 14
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: ST_TO_ADDR
4698: GO 5069
4700: LD_INT 31
4702: DOUBLE
4703: EQUAL
4704: IFTRUE 4708
4706: GO 4726
4708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: LD_INT 13
4716: PUSH
4717: LD_INT 14
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: ST_TO_ADDR
4724: GO 5069
4726: LD_INT 26
4728: DOUBLE
4729: EQUAL
4730: IFTRUE 4734
4732: GO 4752
4734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4735: LD_ADDR_VAR 0 3
4739: PUSH
4740: LD_INT 13
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: ST_TO_ADDR
4750: GO 5069
4752: LD_INT 42
4754: DOUBLE
4755: EQUAL
4756: IFTRUE 4760
4758: GO 4786
4760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4761: LD_ADDR_VAR 0 3
4765: PUSH
4766: LD_INT 21
4768: PUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 23
4774: PUSH
4775: LD_INT 24
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: ST_TO_ADDR
4784: GO 5069
4786: LD_INT 43
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4794
4792: GO 4820
4794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 21
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 23
4808: PUSH
4809: LD_INT 24
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: ST_TO_ADDR
4818: GO 5069
4820: LD_INT 44
4822: DOUBLE
4823: EQUAL
4824: IFTRUE 4828
4826: GO 4854
4828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4829: LD_ADDR_VAR 0 3
4833: PUSH
4834: LD_INT 21
4836: PUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 23
4842: PUSH
4843: LD_INT 24
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: ST_TO_ADDR
4852: GO 5069
4854: LD_INT 45
4856: DOUBLE
4857: EQUAL
4858: IFTRUE 4862
4860: GO 4888
4862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4863: LD_ADDR_VAR 0 3
4867: PUSH
4868: LD_INT 21
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 23
4876: PUSH
4877: LD_INT 24
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: ST_TO_ADDR
4886: GO 5069
4888: LD_INT 49
4890: DOUBLE
4891: EQUAL
4892: IFTRUE 4896
4894: GO 4922
4896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4897: LD_ADDR_VAR 0 3
4901: PUSH
4902: LD_INT 21
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 23
4910: PUSH
4911: LD_INT 24
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: ST_TO_ADDR
4920: GO 5069
4922: LD_INT 51
4924: DOUBLE
4925: EQUAL
4926: IFTRUE 4930
4928: GO 4956
4930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: LD_INT 21
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 23
4944: PUSH
4945: LD_INT 24
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: ST_TO_ADDR
4954: GO 5069
4956: LD_INT 52
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 4990
4964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4965: LD_ADDR_VAR 0 3
4969: PUSH
4970: LD_INT 21
4972: PUSH
4973: LD_INT 22
4975: PUSH
4976: LD_INT 23
4978: PUSH
4979: LD_INT 24
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: ST_TO_ADDR
4988: GO 5069
4990: LD_INT 53
4992: DOUBLE
4993: EQUAL
4994: IFTRUE 4998
4996: GO 5016
4998: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4999: LD_ADDR_VAR 0 3
5003: PUSH
5004: LD_INT 23
5006: PUSH
5007: LD_INT 24
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: ST_TO_ADDR
5014: GO 5069
5016: LD_INT 46
5018: DOUBLE
5019: EQUAL
5020: IFTRUE 5024
5022: GO 5042
5024: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5025: LD_ADDR_VAR 0 3
5029: PUSH
5030: LD_INT 23
5032: PUSH
5033: LD_INT 24
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: ST_TO_ADDR
5040: GO 5069
5042: LD_INT 47
5044: DOUBLE
5045: EQUAL
5046: IFTRUE 5050
5048: GO 5068
5050: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_INT 23
5058: PUSH
5059: LD_INT 24
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: ST_TO_ADDR
5066: GO 5069
5068: POP
// result := ( chassis in result ) ;
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_VAR 0 1
5078: PUSH
5079: LD_VAR 0 3
5083: IN
5084: ST_TO_ADDR
// end ;
5085: LD_VAR 0 3
5089: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5090: LD_INT 0
5092: PPUSH
5093: PPUSH
5094: PPUSH
5095: PPUSH
5096: PPUSH
5097: PPUSH
5098: PPUSH
// result := array ;
5099: LD_ADDR_VAR 0 5
5103: PUSH
5104: LD_VAR 0 1
5108: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5109: LD_VAR 0 1
5113: NOT
5114: PUSH
5115: LD_VAR 0 2
5119: NOT
5120: OR
5121: PUSH
5122: LD_VAR 0 3
5126: NOT
5127: OR
5128: PUSH
5129: LD_VAR 0 2
5133: PUSH
5134: LD_VAR 0 1
5138: GREATER
5139: OR
5140: PUSH
5141: LD_VAR 0 3
5145: PUSH
5146: LD_VAR 0 1
5150: GREATER
5151: OR
5152: IFFALSE 5156
// exit ;
5154: GO 5452
// if direction then
5156: LD_VAR 0 4
5160: IFFALSE 5224
// begin d := 1 ;
5162: LD_ADDR_VAR 0 9
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// if i_from > i_to then
5170: LD_VAR 0 2
5174: PUSH
5175: LD_VAR 0 3
5179: GREATER
5180: IFFALSE 5206
// length := ( array - i_from ) + i_to else
5182: LD_ADDR_VAR 0 11
5186: PUSH
5187: LD_VAR 0 1
5191: PUSH
5192: LD_VAR 0 2
5196: MINUS
5197: PUSH
5198: LD_VAR 0 3
5202: PLUS
5203: ST_TO_ADDR
5204: GO 5222
// length := i_to - i_from ;
5206: LD_ADDR_VAR 0 11
5210: PUSH
5211: LD_VAR 0 3
5215: PUSH
5216: LD_VAR 0 2
5220: MINUS
5221: ST_TO_ADDR
// end else
5222: GO 5285
// begin d := - 1 ;
5224: LD_ADDR_VAR 0 9
5228: PUSH
5229: LD_INT 1
5231: NEG
5232: ST_TO_ADDR
// if i_from > i_to then
5233: LD_VAR 0 2
5237: PUSH
5238: LD_VAR 0 3
5242: GREATER
5243: IFFALSE 5263
// length := i_from - i_to else
5245: LD_ADDR_VAR 0 11
5249: PUSH
5250: LD_VAR 0 2
5254: PUSH
5255: LD_VAR 0 3
5259: MINUS
5260: ST_TO_ADDR
5261: GO 5285
// length := ( array - i_to ) + i_from ;
5263: LD_ADDR_VAR 0 11
5267: PUSH
5268: LD_VAR 0 1
5272: PUSH
5273: LD_VAR 0 3
5277: MINUS
5278: PUSH
5279: LD_VAR 0 2
5283: PLUS
5284: ST_TO_ADDR
// end ; if not length then
5285: LD_VAR 0 11
5289: NOT
5290: IFFALSE 5294
// exit ;
5292: GO 5452
// tmp := array ;
5294: LD_ADDR_VAR 0 10
5298: PUSH
5299: LD_VAR 0 1
5303: ST_TO_ADDR
// for i = 1 to length do
5304: LD_ADDR_VAR 0 6
5308: PUSH
5309: DOUBLE
5310: LD_INT 1
5312: DEC
5313: ST_TO_ADDR
5314: LD_VAR 0 11
5318: PUSH
5319: FOR_TO
5320: IFFALSE 5440
// begin for j = 1 to array do
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: DOUBLE
5328: LD_INT 1
5330: DEC
5331: ST_TO_ADDR
5332: LD_VAR 0 1
5336: PUSH
5337: FOR_TO
5338: IFFALSE 5426
// begin k := j + d ;
5340: LD_ADDR_VAR 0 8
5344: PUSH
5345: LD_VAR 0 7
5349: PUSH
5350: LD_VAR 0 9
5354: PLUS
5355: ST_TO_ADDR
// if k > array then
5356: LD_VAR 0 8
5360: PUSH
5361: LD_VAR 0 1
5365: GREATER
5366: IFFALSE 5376
// k := 1 ;
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// if not k then
5376: LD_VAR 0 8
5380: NOT
5381: IFFALSE 5393
// k := array ;
5383: LD_ADDR_VAR 0 8
5387: PUSH
5388: LD_VAR 0 1
5392: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5393: LD_ADDR_VAR 0 10
5397: PUSH
5398: LD_VAR 0 10
5402: PPUSH
5403: LD_VAR 0 8
5407: PPUSH
5408: LD_VAR 0 1
5412: PUSH
5413: LD_VAR 0 7
5417: ARRAY
5418: PPUSH
5419: CALL_OW 1
5423: ST_TO_ADDR
// end ;
5424: GO 5337
5426: POP
5427: POP
// array := tmp ;
5428: LD_ADDR_VAR 0 1
5432: PUSH
5433: LD_VAR 0 10
5437: ST_TO_ADDR
// end ;
5438: GO 5319
5440: POP
5441: POP
// result := array ;
5442: LD_ADDR_VAR 0 5
5446: PUSH
5447: LD_VAR 0 1
5451: ST_TO_ADDR
// end ;
5452: LD_VAR 0 5
5456: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5457: LD_INT 0
5459: PPUSH
5460: PPUSH
// result := 0 ;
5461: LD_ADDR_VAR 0 3
5465: PUSH
5466: LD_INT 0
5468: ST_TO_ADDR
// if not array or not value in array then
5469: LD_VAR 0 1
5473: NOT
5474: PUSH
5475: LD_VAR 0 2
5479: PUSH
5480: LD_VAR 0 1
5484: IN
5485: NOT
5486: OR
5487: IFFALSE 5491
// exit ;
5489: GO 5545
// for i = 1 to array do
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: DOUBLE
5497: LD_INT 1
5499: DEC
5500: ST_TO_ADDR
5501: LD_VAR 0 1
5505: PUSH
5506: FOR_TO
5507: IFFALSE 5543
// if value = array [ i ] then
5509: LD_VAR 0 2
5513: PUSH
5514: LD_VAR 0 1
5518: PUSH
5519: LD_VAR 0 4
5523: ARRAY
5524: EQUAL
5525: IFFALSE 5541
// begin result := i ;
5527: LD_ADDR_VAR 0 3
5531: PUSH
5532: LD_VAR 0 4
5536: ST_TO_ADDR
// exit ;
5537: POP
5538: POP
5539: GO 5545
// end ;
5541: GO 5506
5543: POP
5544: POP
// end ;
5545: LD_VAR 0 3
5549: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5550: LD_INT 0
5552: PPUSH
// vc_chassis := chassis ;
5553: LD_ADDR_OWVAR 37
5557: PUSH
5558: LD_VAR 0 1
5562: ST_TO_ADDR
// vc_engine := engine ;
5563: LD_ADDR_OWVAR 39
5567: PUSH
5568: LD_VAR 0 2
5572: ST_TO_ADDR
// vc_control := control ;
5573: LD_ADDR_OWVAR 38
5577: PUSH
5578: LD_VAR 0 3
5582: ST_TO_ADDR
// vc_weapon := weapon ;
5583: LD_ADDR_OWVAR 40
5587: PUSH
5588: LD_VAR 0 4
5592: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5593: LD_ADDR_OWVAR 41
5597: PUSH
5598: LD_VAR 0 5
5602: ST_TO_ADDR
// end ;
5603: LD_VAR 0 6
5607: RET
// export function WantPlant ( unit ) ; var task ; begin
5608: LD_INT 0
5610: PPUSH
5611: PPUSH
// result := false ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_INT 0
5619: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5620: LD_ADDR_VAR 0 3
5624: PUSH
5625: LD_VAR 0 1
5629: PPUSH
5630: CALL_OW 437
5634: ST_TO_ADDR
// if task then
5635: LD_VAR 0 3
5639: IFFALSE 5667
// if task [ 1 ] [ 1 ] = p then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PUSH
5650: LD_INT 1
5652: ARRAY
5653: PUSH
5654: LD_STRING p
5656: EQUAL
5657: IFFALSE 5667
// result := true ;
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// end ;
5667: LD_VAR 0 2
5671: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5672: LD_INT 0
5674: PPUSH
5675: PPUSH
5676: PPUSH
5677: PPUSH
// if pos < 1 then
5678: LD_VAR 0 2
5682: PUSH
5683: LD_INT 1
5685: LESS
5686: IFFALSE 5690
// exit ;
5688: GO 5993
// if pos = 1 then
5690: LD_VAR 0 2
5694: PUSH
5695: LD_INT 1
5697: EQUAL
5698: IFFALSE 5731
// result := Replace ( arr , pos [ 1 ] , value ) else
5700: LD_ADDR_VAR 0 4
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: LD_VAR 0 2
5714: PUSH
5715: LD_INT 1
5717: ARRAY
5718: PPUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
5729: GO 5993
// begin tmp := arr ;
5731: LD_ADDR_VAR 0 6
5735: PUSH
5736: LD_VAR 0 1
5740: ST_TO_ADDR
// s_arr := [ tmp ] ;
5741: LD_ADDR_VAR 0 7
5745: PUSH
5746: LD_VAR 0 6
5750: PUSH
5751: EMPTY
5752: LIST
5753: ST_TO_ADDR
// for i = 1 to pos - 1 do
5754: LD_ADDR_VAR 0 5
5758: PUSH
5759: DOUBLE
5760: LD_INT 1
5762: DEC
5763: ST_TO_ADDR
5764: LD_VAR 0 2
5768: PUSH
5769: LD_INT 1
5771: MINUS
5772: PUSH
5773: FOR_TO
5774: IFFALSE 5819
// begin tmp := tmp [ pos [ i ] ] ;
5776: LD_ADDR_VAR 0 6
5780: PUSH
5781: LD_VAR 0 6
5785: PUSH
5786: LD_VAR 0 2
5790: PUSH
5791: LD_VAR 0 5
5795: ARRAY
5796: ARRAY
5797: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5798: LD_ADDR_VAR 0 7
5802: PUSH
5803: LD_VAR 0 7
5807: PUSH
5808: LD_VAR 0 6
5812: PUSH
5813: EMPTY
5814: LIST
5815: ADD
5816: ST_TO_ADDR
// end ;
5817: GO 5773
5819: POP
5820: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5821: LD_ADDR_VAR 0 6
5825: PUSH
5826: LD_VAR 0 6
5830: PPUSH
5831: LD_VAR 0 2
5835: PUSH
5836: LD_VAR 0 2
5840: ARRAY
5841: PPUSH
5842: LD_VAR 0 3
5846: PPUSH
5847: CALL_OW 1
5851: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5852: LD_ADDR_VAR 0 7
5856: PUSH
5857: LD_VAR 0 7
5861: PPUSH
5862: LD_VAR 0 7
5866: PPUSH
5867: LD_VAR 0 6
5871: PPUSH
5872: CALL_OW 1
5876: ST_TO_ADDR
// for i = s_arr downto 2 do
5877: LD_ADDR_VAR 0 5
5881: PUSH
5882: DOUBLE
5883: LD_VAR 0 7
5887: INC
5888: ST_TO_ADDR
5889: LD_INT 2
5891: PUSH
5892: FOR_DOWNTO
5893: IFFALSE 5977
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5895: LD_ADDR_VAR 0 6
5899: PUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_VAR 0 5
5909: PUSH
5910: LD_INT 1
5912: MINUS
5913: ARRAY
5914: PPUSH
5915: LD_VAR 0 2
5919: PUSH
5920: LD_VAR 0 5
5924: PUSH
5925: LD_INT 1
5927: MINUS
5928: ARRAY
5929: PPUSH
5930: LD_VAR 0 7
5934: PUSH
5935: LD_VAR 0 5
5939: ARRAY
5940: PPUSH
5941: CALL_OW 1
5945: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5946: LD_ADDR_VAR 0 7
5950: PUSH
5951: LD_VAR 0 7
5955: PPUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_INT 1
5963: MINUS
5964: PPUSH
5965: LD_VAR 0 6
5969: PPUSH
5970: CALL_OW 1
5974: ST_TO_ADDR
// end ;
5975: GO 5892
5977: POP
5978: POP
// result := s_arr [ 1 ] ;
5979: LD_ADDR_VAR 0 4
5983: PUSH
5984: LD_VAR 0 7
5988: PUSH
5989: LD_INT 1
5991: ARRAY
5992: ST_TO_ADDR
// end ; end ;
5993: LD_VAR 0 4
5997: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5998: LD_INT 0
6000: PPUSH
6001: PPUSH
// if not list then
6002: LD_VAR 0 1
6006: NOT
6007: IFFALSE 6011
// exit ;
6009: GO 6102
// i := list [ pos1 ] ;
6011: LD_ADDR_VAR 0 5
6015: PUSH
6016: LD_VAR 0 1
6020: PUSH
6021: LD_VAR 0 2
6025: ARRAY
6026: ST_TO_ADDR
// if not i then
6027: LD_VAR 0 5
6031: NOT
6032: IFFALSE 6036
// exit ;
6034: GO 6102
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6036: LD_ADDR_VAR 0 1
6040: PUSH
6041: LD_VAR 0 1
6045: PPUSH
6046: LD_VAR 0 2
6050: PPUSH
6051: LD_VAR 0 1
6055: PUSH
6056: LD_VAR 0 3
6060: ARRAY
6061: PPUSH
6062: CALL_OW 1
6066: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6067: LD_ADDR_VAR 0 1
6071: PUSH
6072: LD_VAR 0 1
6076: PPUSH
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 5
6086: PPUSH
6087: CALL_OW 1
6091: ST_TO_ADDR
// result := list ;
6092: LD_ADDR_VAR 0 4
6096: PUSH
6097: LD_VAR 0 1
6101: ST_TO_ADDR
// end ;
6102: LD_VAR 0 4
6106: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6107: LD_INT 0
6109: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6110: LD_ADDR_VAR 0 5
6114: PUSH
6115: LD_VAR 0 1
6119: PPUSH
6120: CALL_OW 250
6124: PPUSH
6125: LD_VAR 0 1
6129: PPUSH
6130: CALL_OW 251
6134: PPUSH
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_VAR 0 3
6144: PPUSH
6145: LD_VAR 0 4
6149: PPUSH
6150: CALL 6160 0 5
6154: ST_TO_ADDR
// end ;
6155: LD_VAR 0 5
6159: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6160: LD_INT 0
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
// if not list then
6166: LD_VAR 0 3
6170: NOT
6171: IFFALSE 6175
// exit ;
6173: GO 6563
// result := [ ] ;
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: EMPTY
6181: ST_TO_ADDR
// for i in list do
6182: LD_ADDR_VAR 0 7
6186: PUSH
6187: LD_VAR 0 3
6191: PUSH
6192: FOR_IN
6193: IFFALSE 6395
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6195: LD_ADDR_VAR 0 9
6199: PUSH
6200: LD_VAR 0 7
6204: PPUSH
6205: LD_VAR 0 1
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 297
6219: ST_TO_ADDR
// if not result then
6220: LD_VAR 0 6
6224: NOT
6225: IFFALSE 6251
// result := [ [ i , tmp ] ] else
6227: LD_ADDR_VAR 0 6
6231: PUSH
6232: LD_VAR 0 7
6236: PUSH
6237: LD_VAR 0 9
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: EMPTY
6247: LIST
6248: ST_TO_ADDR
6249: GO 6393
// begin if result [ result ] [ 2 ] < tmp then
6251: LD_VAR 0 6
6255: PUSH
6256: LD_VAR 0 6
6260: ARRAY
6261: PUSH
6262: LD_INT 2
6264: ARRAY
6265: PUSH
6266: LD_VAR 0 9
6270: LESS
6271: IFFALSE 6313
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6273: LD_ADDR_VAR 0 6
6277: PUSH
6278: LD_VAR 0 6
6282: PPUSH
6283: LD_VAR 0 6
6287: PUSH
6288: LD_INT 1
6290: PLUS
6291: PPUSH
6292: LD_VAR 0 7
6296: PUSH
6297: LD_VAR 0 9
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PPUSH
6306: CALL_OW 2
6310: ST_TO_ADDR
6311: GO 6393
// for j = 1 to result do
6313: LD_ADDR_VAR 0 8
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_VAR 0 6
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6391
// begin if tmp < result [ j ] [ 2 ] then
6331: LD_VAR 0 9
6335: PUSH
6336: LD_VAR 0 6
6340: PUSH
6341: LD_VAR 0 8
6345: ARRAY
6346: PUSH
6347: LD_INT 2
6349: ARRAY
6350: LESS
6351: IFFALSE 6389
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6353: LD_ADDR_VAR 0 6
6357: PUSH
6358: LD_VAR 0 6
6362: PPUSH
6363: LD_VAR 0 8
6367: PPUSH
6368: LD_VAR 0 7
6372: PUSH
6373: LD_VAR 0 9
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 2
6386: ST_TO_ADDR
// break ;
6387: GO 6391
// end ; end ;
6389: GO 6328
6391: POP
6392: POP
// end ; end ;
6393: GO 6192
6395: POP
6396: POP
// if result and not asc then
6397: LD_VAR 0 6
6401: PUSH
6402: LD_VAR 0 4
6406: NOT
6407: AND
6408: IFFALSE 6483
// begin tmp := result ;
6410: LD_ADDR_VAR 0 9
6414: PUSH
6415: LD_VAR 0 6
6419: ST_TO_ADDR
// for i = tmp downto 1 do
6420: LD_ADDR_VAR 0 7
6424: PUSH
6425: DOUBLE
6426: LD_VAR 0 9
6430: INC
6431: ST_TO_ADDR
6432: LD_INT 1
6434: PUSH
6435: FOR_DOWNTO
6436: IFFALSE 6481
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6438: LD_ADDR_VAR 0 6
6442: PUSH
6443: LD_VAR 0 6
6447: PPUSH
6448: LD_VAR 0 9
6452: PUSH
6453: LD_VAR 0 7
6457: MINUS
6458: PUSH
6459: LD_INT 1
6461: PLUS
6462: PPUSH
6463: LD_VAR 0 9
6467: PUSH
6468: LD_VAR 0 7
6472: ARRAY
6473: PPUSH
6474: CALL_OW 1
6478: ST_TO_ADDR
6479: GO 6435
6481: POP
6482: POP
// end ; tmp := [ ] ;
6483: LD_ADDR_VAR 0 9
6487: PUSH
6488: EMPTY
6489: ST_TO_ADDR
// if mode then
6490: LD_VAR 0 5
6494: IFFALSE 6563
// begin for i = 1 to result do
6496: LD_ADDR_VAR 0 7
6500: PUSH
6501: DOUBLE
6502: LD_INT 1
6504: DEC
6505: ST_TO_ADDR
6506: LD_VAR 0 6
6510: PUSH
6511: FOR_TO
6512: IFFALSE 6551
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6514: LD_ADDR_VAR 0 9
6518: PUSH
6519: LD_VAR 0 9
6523: PPUSH
6524: LD_VAR 0 7
6528: PPUSH
6529: LD_VAR 0 6
6533: PUSH
6534: LD_VAR 0 7
6538: ARRAY
6539: PUSH
6540: LD_INT 1
6542: ARRAY
6543: PPUSH
6544: CALL_OW 1
6548: ST_TO_ADDR
6549: GO 6511
6551: POP
6552: POP
// result := tmp ;
6553: LD_ADDR_VAR 0 6
6557: PUSH
6558: LD_VAR 0 9
6562: ST_TO_ADDR
// end ; end ;
6563: LD_VAR 0 6
6567: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6568: LD_INT 0
6570: PPUSH
6571: PPUSH
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6576: LD_ADDR_VAR 0 5
6580: PUSH
6581: LD_INT 0
6583: PUSH
6584: LD_INT 0
6586: PUSH
6587: LD_INT 0
6589: PUSH
6590: EMPTY
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: ST_TO_ADDR
// if not x or not y then
6598: LD_VAR 0 2
6602: NOT
6603: PUSH
6604: LD_VAR 0 3
6608: NOT
6609: OR
6610: IFFALSE 6614
// exit ;
6612: GO 8264
// if not range then
6614: LD_VAR 0 4
6618: NOT
6619: IFFALSE 6629
// range := 10 ;
6621: LD_ADDR_VAR 0 4
6625: PUSH
6626: LD_INT 10
6628: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6629: LD_ADDR_VAR 0 8
6633: PUSH
6634: LD_INT 81
6636: PUSH
6637: LD_VAR 0 1
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 92
6648: PUSH
6649: LD_VAR 0 2
6653: PUSH
6654: LD_VAR 0 3
6658: PUSH
6659: LD_VAR 0 4
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 3
6672: PUSH
6673: LD_INT 21
6675: PUSH
6676: LD_INT 3
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PPUSH
6692: CALL_OW 69
6696: ST_TO_ADDR
// if not tmp then
6697: LD_VAR 0 8
6701: NOT
6702: IFFALSE 6706
// exit ;
6704: GO 8264
// for i in tmp do
6706: LD_ADDR_VAR 0 6
6710: PUSH
6711: LD_VAR 0 8
6715: PUSH
6716: FOR_IN
6717: IFFALSE 8239
// begin points := [ 0 , 0 , 0 ] ;
6719: LD_ADDR_VAR 0 9
6723: PUSH
6724: LD_INT 0
6726: PUSH
6727: LD_INT 0
6729: PUSH
6730: LD_INT 0
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: ST_TO_ADDR
// bpoints := 1 ;
6738: LD_ADDR_VAR 0 10
6742: PUSH
6743: LD_INT 1
6745: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6746: LD_VAR 0 6
6750: PPUSH
6751: CALL_OW 247
6755: PUSH
6756: LD_INT 1
6758: DOUBLE
6759: EQUAL
6760: IFTRUE 6764
6762: GO 7342
6764: POP
// begin if GetClass ( i ) = 1 then
6765: LD_VAR 0 6
6769: PPUSH
6770: CALL_OW 257
6774: PUSH
6775: LD_INT 1
6777: EQUAL
6778: IFFALSE 6799
// points := [ 10 , 5 , 3 ] ;
6780: LD_ADDR_VAR 0 9
6784: PUSH
6785: LD_INT 10
6787: PUSH
6788: LD_INT 5
6790: PUSH
6791: LD_INT 3
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6799: LD_VAR 0 6
6803: PPUSH
6804: CALL_OW 257
6808: PUSH
6809: LD_INT 2
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 4
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: IN
6823: IFFALSE 6844
// points := [ 3 , 2 , 1 ] ;
6825: LD_ADDR_VAR 0 9
6829: PUSH
6830: LD_INT 3
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6844: LD_VAR 0 6
6848: PPUSH
6849: CALL_OW 257
6853: PUSH
6854: LD_INT 5
6856: EQUAL
6857: IFFALSE 6878
// points := [ 130 , 5 , 2 ] ;
6859: LD_ADDR_VAR 0 9
6863: PUSH
6864: LD_INT 130
6866: PUSH
6867: LD_INT 5
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6878: LD_VAR 0 6
6882: PPUSH
6883: CALL_OW 257
6887: PUSH
6888: LD_INT 8
6890: EQUAL
6891: IFFALSE 6912
// points := [ 35 , 35 , 30 ] ;
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: LD_INT 35
6900: PUSH
6901: LD_INT 35
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6912: LD_VAR 0 6
6916: PPUSH
6917: CALL_OW 257
6921: PUSH
6922: LD_INT 9
6924: EQUAL
6925: IFFALSE 6946
// points := [ 20 , 55 , 40 ] ;
6927: LD_ADDR_VAR 0 9
6931: PUSH
6932: LD_INT 20
6934: PUSH
6935: LD_INT 55
6937: PUSH
6938: LD_INT 40
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6946: LD_VAR 0 6
6950: PPUSH
6951: CALL_OW 257
6955: PUSH
6956: LD_INT 12
6958: PUSH
6959: LD_INT 16
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: IN
6966: IFFALSE 6987
// points := [ 5 , 3 , 2 ] ;
6968: LD_ADDR_VAR 0 9
6972: PUSH
6973: LD_INT 5
6975: PUSH
6976: LD_INT 3
6978: PUSH
6979: LD_INT 2
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6987: LD_VAR 0 6
6991: PPUSH
6992: CALL_OW 257
6996: PUSH
6997: LD_INT 17
6999: EQUAL
7000: IFFALSE 7021
// points := [ 100 , 50 , 75 ] ;
7002: LD_ADDR_VAR 0 9
7006: PUSH
7007: LD_INT 100
7009: PUSH
7010: LD_INT 50
7012: PUSH
7013: LD_INT 75
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7021: LD_VAR 0 6
7025: PPUSH
7026: CALL_OW 257
7030: PUSH
7031: LD_INT 15
7033: EQUAL
7034: IFFALSE 7055
// points := [ 10 , 5 , 3 ] ;
7036: LD_ADDR_VAR 0 9
7040: PUSH
7041: LD_INT 10
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 3
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7055: LD_VAR 0 6
7059: PPUSH
7060: CALL_OW 257
7064: PUSH
7065: LD_INT 14
7067: EQUAL
7068: IFFALSE 7089
// points := [ 10 , 0 , 0 ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 10
7077: PUSH
7078: LD_INT 0
7080: PUSH
7081: LD_INT 0
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7089: LD_VAR 0 6
7093: PPUSH
7094: CALL_OW 257
7098: PUSH
7099: LD_INT 11
7101: EQUAL
7102: IFFALSE 7123
// points := [ 30 , 10 , 5 ] ;
7104: LD_ADDR_VAR 0 9
7108: PUSH
7109: LD_INT 30
7111: PUSH
7112: LD_INT 10
7114: PUSH
7115: LD_INT 5
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7123: LD_VAR 0 1
7127: PPUSH
7128: LD_INT 5
7130: PPUSH
7131: CALL_OW 321
7135: PUSH
7136: LD_INT 2
7138: EQUAL
7139: IFFALSE 7156
// bpoints := bpoints * 1.8 ;
7141: LD_ADDR_VAR 0 10
7145: PUSH
7146: LD_VAR 0 10
7150: PUSH
7151: LD_REAL  1.80000000000000E+0000
7154: MUL
7155: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7156: LD_VAR 0 6
7160: PPUSH
7161: CALL_OW 257
7165: PUSH
7166: LD_INT 1
7168: PUSH
7169: LD_INT 2
7171: PUSH
7172: LD_INT 3
7174: PUSH
7175: LD_INT 4
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: IN
7184: PUSH
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_INT 51
7192: PPUSH
7193: CALL_OW 321
7197: PUSH
7198: LD_INT 2
7200: EQUAL
7201: AND
7202: IFFALSE 7219
// bpoints := bpoints * 1.2 ;
7204: LD_ADDR_VAR 0 10
7208: PUSH
7209: LD_VAR 0 10
7213: PUSH
7214: LD_REAL  1.20000000000000E+0000
7217: MUL
7218: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7219: LD_VAR 0 6
7223: PPUSH
7224: CALL_OW 257
7228: PUSH
7229: LD_INT 5
7231: PUSH
7232: LD_INT 7
7234: PUSH
7235: LD_INT 9
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: IN
7243: PUSH
7244: LD_VAR 0 1
7248: PPUSH
7249: LD_INT 52
7251: PPUSH
7252: CALL_OW 321
7256: PUSH
7257: LD_INT 2
7259: EQUAL
7260: AND
7261: IFFALSE 7278
// bpoints := bpoints * 1.5 ;
7263: LD_ADDR_VAR 0 10
7267: PUSH
7268: LD_VAR 0 10
7272: PUSH
7273: LD_REAL  1.50000000000000E+0000
7276: MUL
7277: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7278: LD_VAR 0 1
7282: PPUSH
7283: LD_INT 66
7285: PPUSH
7286: CALL_OW 321
7290: PUSH
7291: LD_INT 2
7293: EQUAL
7294: IFFALSE 7311
// bpoints := bpoints * 1.1 ;
7296: LD_ADDR_VAR 0 10
7300: PUSH
7301: LD_VAR 0 10
7305: PUSH
7306: LD_REAL  1.10000000000000E+0000
7309: MUL
7310: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7311: LD_ADDR_VAR 0 10
7315: PUSH
7316: LD_VAR 0 10
7320: PUSH
7321: LD_VAR 0 6
7325: PPUSH
7326: LD_INT 1
7328: PPUSH
7329: CALL_OW 259
7333: PUSH
7334: LD_REAL  1.15000000000000E+0000
7337: MUL
7338: MUL
7339: ST_TO_ADDR
// end ; unit_vehicle :
7340: GO 8168
7342: LD_INT 2
7344: DOUBLE
7345: EQUAL
7346: IFTRUE 7350
7348: GO 8156
7350: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7351: LD_VAR 0 6
7355: PPUSH
7356: CALL_OW 264
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 42
7366: PUSH
7367: LD_INT 24
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: IN
7375: IFFALSE 7396
// points := [ 25 , 5 , 3 ] ;
7377: LD_ADDR_VAR 0 9
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 5
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7396: LD_VAR 0 6
7400: PPUSH
7401: CALL_OW 264
7405: PUSH
7406: LD_INT 4
7408: PUSH
7409: LD_INT 43
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: IN
7420: IFFALSE 7441
// points := [ 40 , 15 , 5 ] ;
7422: LD_ADDR_VAR 0 9
7426: PUSH
7427: LD_INT 40
7429: PUSH
7430: LD_INT 15
7432: PUSH
7433: LD_INT 5
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7441: LD_VAR 0 6
7445: PPUSH
7446: CALL_OW 264
7450: PUSH
7451: LD_INT 3
7453: PUSH
7454: LD_INT 23
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: IN
7461: IFFALSE 7482
// points := [ 7 , 25 , 8 ] ;
7463: LD_ADDR_VAR 0 9
7467: PUSH
7468: LD_INT 7
7470: PUSH
7471: LD_INT 25
7473: PUSH
7474: LD_INT 8
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7482: LD_VAR 0 6
7486: PPUSH
7487: CALL_OW 264
7491: PUSH
7492: LD_INT 5
7494: PUSH
7495: LD_INT 27
7497: PUSH
7498: LD_INT 44
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: IN
7506: IFFALSE 7527
// points := [ 14 , 50 , 16 ] ;
7508: LD_ADDR_VAR 0 9
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: LD_INT 50
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7527: LD_VAR 0 6
7531: PPUSH
7532: CALL_OW 264
7536: PUSH
7537: LD_INT 6
7539: PUSH
7540: LD_INT 46
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: IN
7547: IFFALSE 7568
// points := [ 32 , 120 , 70 ] ;
7549: LD_ADDR_VAR 0 9
7553: PUSH
7554: LD_INT 32
7556: PUSH
7557: LD_INT 120
7559: PUSH
7560: LD_INT 70
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7568: LD_VAR 0 6
7572: PPUSH
7573: CALL_OW 264
7577: PUSH
7578: LD_INT 7
7580: PUSH
7581: LD_INT 28
7583: PUSH
7584: LD_INT 45
7586: PUSH
7587: LD_INT 92
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: IN
7596: IFFALSE 7617
// points := [ 35 , 20 , 45 ] ;
7598: LD_ADDR_VAR 0 9
7602: PUSH
7603: LD_INT 35
7605: PUSH
7606: LD_INT 20
7608: PUSH
7609: LD_INT 45
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7617: LD_VAR 0 6
7621: PPUSH
7622: CALL_OW 264
7626: PUSH
7627: LD_INT 47
7629: PUSH
7630: EMPTY
7631: LIST
7632: IN
7633: IFFALSE 7654
// points := [ 67 , 45 , 75 ] ;
7635: LD_ADDR_VAR 0 9
7639: PUSH
7640: LD_INT 67
7642: PUSH
7643: LD_INT 45
7645: PUSH
7646: LD_INT 75
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7654: LD_VAR 0 6
7658: PPUSH
7659: CALL_OW 264
7663: PUSH
7664: LD_INT 26
7666: PUSH
7667: EMPTY
7668: LIST
7669: IN
7670: IFFALSE 7691
// points := [ 120 , 30 , 80 ] ;
7672: LD_ADDR_VAR 0 9
7676: PUSH
7677: LD_INT 120
7679: PUSH
7680: LD_INT 30
7682: PUSH
7683: LD_INT 80
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7691: LD_VAR 0 6
7695: PPUSH
7696: CALL_OW 264
7700: PUSH
7701: LD_INT 22
7703: PUSH
7704: EMPTY
7705: LIST
7706: IN
7707: IFFALSE 7728
// points := [ 40 , 1 , 1 ] ;
7709: LD_ADDR_VAR 0 9
7713: PUSH
7714: LD_INT 40
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: LD_INT 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7728: LD_VAR 0 6
7732: PPUSH
7733: CALL_OW 264
7737: PUSH
7738: LD_INT 29
7740: PUSH
7741: EMPTY
7742: LIST
7743: IN
7744: IFFALSE 7765
// points := [ 70 , 200 , 400 ] ;
7746: LD_ADDR_VAR 0 9
7750: PUSH
7751: LD_INT 70
7753: PUSH
7754: LD_INT 200
7756: PUSH
7757: LD_INT 400
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7765: LD_VAR 0 6
7769: PPUSH
7770: CALL_OW 264
7774: PUSH
7775: LD_INT 14
7777: PUSH
7778: LD_INT 53
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: IN
7785: IFFALSE 7806
// points := [ 40 , 10 , 20 ] ;
7787: LD_ADDR_VAR 0 9
7791: PUSH
7792: LD_INT 40
7794: PUSH
7795: LD_INT 10
7797: PUSH
7798: LD_INT 20
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7806: LD_VAR 0 6
7810: PPUSH
7811: CALL_OW 264
7815: PUSH
7816: LD_INT 9
7818: PUSH
7819: EMPTY
7820: LIST
7821: IN
7822: IFFALSE 7843
// points := [ 5 , 70 , 20 ] ;
7824: LD_ADDR_VAR 0 9
7828: PUSH
7829: LD_INT 5
7831: PUSH
7832: LD_INT 70
7834: PUSH
7835: LD_INT 20
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7843: LD_VAR 0 6
7847: PPUSH
7848: CALL_OW 264
7852: PUSH
7853: LD_INT 10
7855: PUSH
7856: EMPTY
7857: LIST
7858: IN
7859: IFFALSE 7880
// points := [ 35 , 110 , 70 ] ;
7861: LD_ADDR_VAR 0 9
7865: PUSH
7866: LD_INT 35
7868: PUSH
7869: LD_INT 110
7871: PUSH
7872: LD_INT 70
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7880: LD_VAR 0 6
7884: PPUSH
7885: CALL_OW 265
7889: PUSH
7890: LD_INT 25
7892: EQUAL
7893: IFFALSE 7914
// points := [ 80 , 65 , 100 ] ;
7895: LD_ADDR_VAR 0 9
7899: PUSH
7900: LD_INT 80
7902: PUSH
7903: LD_INT 65
7905: PUSH
7906: LD_INT 100
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7914: LD_VAR 0 6
7918: PPUSH
7919: CALL_OW 263
7923: PUSH
7924: LD_INT 1
7926: EQUAL
7927: IFFALSE 7962
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7929: LD_ADDR_VAR 0 10
7933: PUSH
7934: LD_VAR 0 10
7938: PUSH
7939: LD_VAR 0 6
7943: PPUSH
7944: CALL_OW 311
7948: PPUSH
7949: LD_INT 3
7951: PPUSH
7952: CALL_OW 259
7956: PUSH
7957: LD_INT 4
7959: MUL
7960: MUL
7961: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7962: LD_VAR 0 6
7966: PPUSH
7967: CALL_OW 263
7971: PUSH
7972: LD_INT 2
7974: EQUAL
7975: IFFALSE 8026
// begin j := IsControledBy ( i ) ;
7977: LD_ADDR_VAR 0 7
7981: PUSH
7982: LD_VAR 0 6
7986: PPUSH
7987: CALL_OW 312
7991: ST_TO_ADDR
// if j then
7992: LD_VAR 0 7
7996: IFFALSE 8026
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7998: LD_ADDR_VAR 0 10
8002: PUSH
8003: LD_VAR 0 10
8007: PUSH
8008: LD_VAR 0 7
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: CALL_OW 259
8020: PUSH
8021: LD_INT 3
8023: MUL
8024: MUL
8025: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8026: LD_VAR 0 6
8030: PPUSH
8031: CALL_OW 264
8035: PUSH
8036: LD_INT 5
8038: PUSH
8039: LD_INT 6
8041: PUSH
8042: LD_INT 46
8044: PUSH
8045: LD_INT 44
8047: PUSH
8048: LD_INT 47
8050: PUSH
8051: LD_INT 45
8053: PUSH
8054: LD_INT 28
8056: PUSH
8057: LD_INT 7
8059: PUSH
8060: LD_INT 27
8062: PUSH
8063: LD_INT 29
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: IN
8078: PUSH
8079: LD_VAR 0 1
8083: PPUSH
8084: LD_INT 52
8086: PPUSH
8087: CALL_OW 321
8091: PUSH
8092: LD_INT 2
8094: EQUAL
8095: AND
8096: IFFALSE 8113
// bpoints := bpoints * 1.2 ;
8098: LD_ADDR_VAR 0 10
8102: PUSH
8103: LD_VAR 0 10
8107: PUSH
8108: LD_REAL  1.20000000000000E+0000
8111: MUL
8112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8113: LD_VAR 0 6
8117: PPUSH
8118: CALL_OW 264
8122: PUSH
8123: LD_INT 6
8125: PUSH
8126: LD_INT 46
8128: PUSH
8129: LD_INT 47
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: IN
8137: IFFALSE 8154
// bpoints := bpoints * 1.2 ;
8139: LD_ADDR_VAR 0 10
8143: PUSH
8144: LD_VAR 0 10
8148: PUSH
8149: LD_REAL  1.20000000000000E+0000
8152: MUL
8153: ST_TO_ADDR
// end ; unit_building :
8154: GO 8168
8156: LD_INT 3
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8167
8164: POP
// ; end ;
8165: GO 8168
8167: POP
// for j = 1 to 3 do
8168: LD_ADDR_VAR 0 7
8172: PUSH
8173: DOUBLE
8174: LD_INT 1
8176: DEC
8177: ST_TO_ADDR
8178: LD_INT 3
8180: PUSH
8181: FOR_TO
8182: IFFALSE 8235
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8184: LD_ADDR_VAR 0 5
8188: PUSH
8189: LD_VAR 0 5
8193: PPUSH
8194: LD_VAR 0 7
8198: PPUSH
8199: LD_VAR 0 5
8203: PUSH
8204: LD_VAR 0 7
8208: ARRAY
8209: PUSH
8210: LD_VAR 0 9
8214: PUSH
8215: LD_VAR 0 7
8219: ARRAY
8220: PUSH
8221: LD_VAR 0 10
8225: MUL
8226: PLUS
8227: PPUSH
8228: CALL_OW 1
8232: ST_TO_ADDR
8233: GO 8181
8235: POP
8236: POP
// end ;
8237: GO 6716
8239: POP
8240: POP
// result := Replace ( result , 4 , tmp ) ;
8241: LD_ADDR_VAR 0 5
8245: PUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: LD_INT 4
8253: PPUSH
8254: LD_VAR 0 8
8258: PPUSH
8259: CALL_OW 1
8263: ST_TO_ADDR
// end ;
8264: LD_VAR 0 5
8268: RET
// export function DangerAtRange ( unit , range ) ; begin
8269: LD_INT 0
8271: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8272: LD_ADDR_VAR 0 3
8276: PUSH
8277: LD_VAR 0 1
8281: PPUSH
8282: CALL_OW 255
8286: PPUSH
8287: LD_VAR 0 1
8291: PPUSH
8292: CALL_OW 250
8296: PPUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 251
8306: PPUSH
8307: LD_VAR 0 2
8311: PPUSH
8312: CALL 6568 0 4
8316: ST_TO_ADDR
// end ;
8317: LD_VAR 0 3
8321: RET
// export function DangerInArea ( side , area ) ; begin
8322: LD_INT 0
8324: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8325: LD_ADDR_VAR 0 3
8329: PUSH
8330: LD_VAR 0 2
8334: PPUSH
8335: LD_INT 81
8337: PUSH
8338: LD_VAR 0 1
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 70
8351: ST_TO_ADDR
// end ;
8352: LD_VAR 0 3
8356: RET
// export function IsExtension ( b ) ; begin
8357: LD_INT 0
8359: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8360: LD_ADDR_VAR 0 2
8364: PUSH
8365: LD_VAR 0 1
8369: PUSH
8370: LD_INT 23
8372: PUSH
8373: LD_INT 20
8375: PUSH
8376: LD_INT 22
8378: PUSH
8379: LD_INT 17
8381: PUSH
8382: LD_INT 24
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 19
8390: PUSH
8391: LD_INT 16
8393: PUSH
8394: LD_INT 25
8396: PUSH
8397: LD_INT 18
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: IN
8412: ST_TO_ADDR
// end ;
8413: LD_VAR 0 2
8417: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8418: LD_INT 0
8420: PPUSH
8421: PPUSH
8422: PPUSH
// result := [ ] ;
8423: LD_ADDR_VAR 0 4
8427: PUSH
8428: EMPTY
8429: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8430: LD_ADDR_VAR 0 5
8434: PUSH
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 3
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: ST_TO_ADDR
// if not tmp then
8455: LD_VAR 0 5
8459: NOT
8460: IFFALSE 8464
// exit ;
8462: GO 8528
// if checkLink then
8464: LD_VAR 0 3
8468: IFFALSE 8518
// begin for i in tmp do
8470: LD_ADDR_VAR 0 6
8474: PUSH
8475: LD_VAR 0 5
8479: PUSH
8480: FOR_IN
8481: IFFALSE 8516
// if GetBase ( i ) <> base then
8483: LD_VAR 0 6
8487: PPUSH
8488: CALL_OW 274
8492: PUSH
8493: LD_VAR 0 1
8497: NONEQUAL
8498: IFFALSE 8514
// ComLinkToBase ( base , i ) ;
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_VAR 0 6
8509: PPUSH
8510: CALL_OW 169
8514: GO 8480
8516: POP
8517: POP
// end ; result := tmp ;
8518: LD_ADDR_VAR 0 4
8522: PUSH
8523: LD_VAR 0 5
8527: ST_TO_ADDR
// end ;
8528: LD_VAR 0 4
8532: RET
// export function ComComplete ( units , b ) ; var i ; begin
8533: LD_INT 0
8535: PPUSH
8536: PPUSH
// if not units then
8537: LD_VAR 0 1
8541: NOT
8542: IFFALSE 8546
// exit ;
8544: GO 8636
// for i in units do
8546: LD_ADDR_VAR 0 4
8550: PUSH
8551: LD_VAR 0 1
8555: PUSH
8556: FOR_IN
8557: IFFALSE 8634
// if BuildingStatus ( b ) = bs_build then
8559: LD_VAR 0 2
8563: PPUSH
8564: CALL_OW 461
8568: PUSH
8569: LD_INT 1
8571: EQUAL
8572: IFFALSE 8632
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8574: LD_VAR 0 4
8578: PPUSH
8579: LD_STRING h
8581: PUSH
8582: LD_VAR 0 2
8586: PPUSH
8587: CALL_OW 250
8591: PUSH
8592: LD_VAR 0 2
8596: PPUSH
8597: CALL_OW 251
8601: PUSH
8602: LD_VAR 0 2
8606: PUSH
8607: LD_INT 0
8609: PUSH
8610: LD_INT 0
8612: PUSH
8613: LD_INT 0
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: PPUSH
8628: CALL_OW 446
8632: GO 8556
8634: POP
8635: POP
// end ;
8636: LD_VAR 0 3
8640: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8641: LD_INT 0
8643: PPUSH
8644: PPUSH
8645: PPUSH
8646: PPUSH
8647: PPUSH
8648: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8649: LD_VAR 0 1
8653: NOT
8654: PUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 263
8664: PUSH
8665: LD_INT 2
8667: NONEQUAL
8668: OR
8669: IFFALSE 8673
// exit ;
8671: GO 8989
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8673: LD_ADDR_VAR 0 6
8677: PUSH
8678: LD_INT 22
8680: PUSH
8681: LD_VAR 0 1
8685: PPUSH
8686: CALL_OW 255
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 2
8697: PUSH
8698: LD_INT 30
8700: PUSH
8701: LD_INT 36
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 34
8710: PUSH
8711: LD_INT 31
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PPUSH
8727: CALL_OW 69
8731: ST_TO_ADDR
// if not tmp then
8732: LD_VAR 0 6
8736: NOT
8737: IFFALSE 8741
// exit ;
8739: GO 8989
// result := [ ] ;
8741: LD_ADDR_VAR 0 2
8745: PUSH
8746: EMPTY
8747: ST_TO_ADDR
// for i in tmp do
8748: LD_ADDR_VAR 0 3
8752: PUSH
8753: LD_VAR 0 6
8757: PUSH
8758: FOR_IN
8759: IFFALSE 8830
// begin t := UnitsInside ( i ) ;
8761: LD_ADDR_VAR 0 4
8765: PUSH
8766: LD_VAR 0 3
8770: PPUSH
8771: CALL_OW 313
8775: ST_TO_ADDR
// if t then
8776: LD_VAR 0 4
8780: IFFALSE 8828
// for j in t do
8782: LD_ADDR_VAR 0 7
8786: PUSH
8787: LD_VAR 0 4
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8826
// result := Replace ( result , result + 1 , j ) ;
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: LD_VAR 0 2
8804: PPUSH
8805: LD_VAR 0 2
8809: PUSH
8810: LD_INT 1
8812: PLUS
8813: PPUSH
8814: LD_VAR 0 7
8818: PPUSH
8819: CALL_OW 1
8823: ST_TO_ADDR
8824: GO 8792
8826: POP
8827: POP
// end ;
8828: GO 8758
8830: POP
8831: POP
// if not result then
8832: LD_VAR 0 2
8836: NOT
8837: IFFALSE 8841
// exit ;
8839: GO 8989
// mech := result [ 1 ] ;
8841: LD_ADDR_VAR 0 5
8845: PUSH
8846: LD_VAR 0 2
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: ST_TO_ADDR
// if result > 1 then
8855: LD_VAR 0 2
8859: PUSH
8860: LD_INT 1
8862: GREATER
8863: IFFALSE 8975
// begin for i = 2 to result do
8865: LD_ADDR_VAR 0 3
8869: PUSH
8870: DOUBLE
8871: LD_INT 2
8873: DEC
8874: ST_TO_ADDR
8875: LD_VAR 0 2
8879: PUSH
8880: FOR_TO
8881: IFFALSE 8973
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8883: LD_ADDR_VAR 0 4
8887: PUSH
8888: LD_VAR 0 2
8892: PUSH
8893: LD_VAR 0 3
8897: ARRAY
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: CALL_OW 259
8906: PUSH
8907: LD_VAR 0 2
8911: PUSH
8912: LD_VAR 0 3
8916: ARRAY
8917: PPUSH
8918: CALL_OW 432
8922: MINUS
8923: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8924: LD_VAR 0 4
8928: PUSH
8929: LD_VAR 0 5
8933: PPUSH
8934: LD_INT 3
8936: PPUSH
8937: CALL_OW 259
8941: PUSH
8942: LD_VAR 0 5
8946: PPUSH
8947: CALL_OW 432
8951: MINUS
8952: GREATEREQUAL
8953: IFFALSE 8971
// mech := result [ i ] ;
8955: LD_ADDR_VAR 0 5
8959: PUSH
8960: LD_VAR 0 2
8964: PUSH
8965: LD_VAR 0 3
8969: ARRAY
8970: ST_TO_ADDR
// end ;
8971: GO 8880
8973: POP
8974: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8975: LD_VAR 0 1
8979: PPUSH
8980: LD_VAR 0 5
8984: PPUSH
8985: CALL_OW 135
// end ;
8989: LD_VAR 0 2
8993: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8994: LD_INT 0
8996: PPUSH
8997: PPUSH
8998: PPUSH
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// result := [ ] ;
9009: LD_ADDR_VAR 0 7
9013: PUSH
9014: EMPTY
9015: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9016: LD_VAR 0 1
9020: PPUSH
9021: CALL_OW 266
9025: PUSH
9026: LD_INT 0
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: IN
9036: NOT
9037: IFFALSE 9041
// exit ;
9039: GO 10675
// if name then
9041: LD_VAR 0 3
9045: IFFALSE 9061
// SetBName ( base_dep , name ) ;
9047: LD_VAR 0 1
9051: PPUSH
9052: LD_VAR 0 3
9056: PPUSH
9057: CALL_OW 500
// base := GetBase ( base_dep ) ;
9061: LD_ADDR_VAR 0 15
9065: PUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 274
9075: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9076: LD_ADDR_VAR 0 16
9080: PUSH
9081: LD_VAR 0 1
9085: PPUSH
9086: CALL_OW 255
9090: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9091: LD_ADDR_VAR 0 17
9095: PUSH
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 248
9105: ST_TO_ADDR
// if sources then
9106: LD_VAR 0 5
9110: IFFALSE 9157
// for i = 1 to 3 do
9112: LD_ADDR_VAR 0 8
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_INT 3
9124: PUSH
9125: FOR_TO
9126: IFFALSE 9155
// AddResourceType ( base , i , sources [ i ] ) ;
9128: LD_VAR 0 15
9132: PPUSH
9133: LD_VAR 0 8
9137: PPUSH
9138: LD_VAR 0 5
9142: PUSH
9143: LD_VAR 0 8
9147: ARRAY
9148: PPUSH
9149: CALL_OW 276
9153: GO 9125
9155: POP
9156: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9157: LD_ADDR_VAR 0 18
9161: PUSH
9162: LD_VAR 0 15
9166: PPUSH
9167: LD_VAR 0 2
9171: PPUSH
9172: LD_INT 1
9174: PPUSH
9175: CALL 8418 0 3
9179: ST_TO_ADDR
// InitHc ;
9180: CALL_OW 19
// InitUc ;
9184: CALL_OW 18
// uc_side := side ;
9188: LD_ADDR_OWVAR 20
9192: PUSH
9193: LD_VAR 0 16
9197: ST_TO_ADDR
// uc_nation := nation ;
9198: LD_ADDR_OWVAR 21
9202: PUSH
9203: LD_VAR 0 17
9207: ST_TO_ADDR
// if buildings then
9208: LD_VAR 0 18
9212: IFFALSE 10534
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9214: LD_ADDR_VAR 0 19
9218: PUSH
9219: LD_VAR 0 18
9223: PPUSH
9224: LD_INT 2
9226: PUSH
9227: LD_INT 30
9229: PUSH
9230: LD_INT 29
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 30
9239: PUSH
9240: LD_INT 30
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 72
9256: ST_TO_ADDR
// if tmp then
9257: LD_VAR 0 19
9261: IFFALSE 9309
// for i in tmp do
9263: LD_ADDR_VAR 0 8
9267: PUSH
9268: LD_VAR 0 19
9272: PUSH
9273: FOR_IN
9274: IFFALSE 9307
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9276: LD_VAR 0 8
9280: PPUSH
9281: CALL_OW 250
9285: PPUSH
9286: LD_VAR 0 8
9290: PPUSH
9291: CALL_OW 251
9295: PPUSH
9296: LD_VAR 0 16
9300: PPUSH
9301: CALL_OW 441
9305: GO 9273
9307: POP
9308: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9309: LD_VAR 0 18
9313: PPUSH
9314: LD_INT 2
9316: PUSH
9317: LD_INT 30
9319: PUSH
9320: LD_INT 32
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 30
9329: PUSH
9330: LD_INT 33
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: PPUSH
9342: CALL_OW 72
9346: IFFALSE 9434
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9348: LD_ADDR_VAR 0 8
9352: PUSH
9353: LD_VAR 0 18
9357: PPUSH
9358: LD_INT 2
9360: PUSH
9361: LD_INT 30
9363: PUSH
9364: LD_INT 32
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 30
9373: PUSH
9374: LD_INT 33
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: PPUSH
9386: CALL_OW 72
9390: PUSH
9391: FOR_IN
9392: IFFALSE 9432
// begin if not GetBWeapon ( i ) then
9394: LD_VAR 0 8
9398: PPUSH
9399: CALL_OW 269
9403: NOT
9404: IFFALSE 9430
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9406: LD_VAR 0 8
9410: PPUSH
9411: LD_VAR 0 8
9415: PPUSH
9416: LD_VAR 0 2
9420: PPUSH
9421: CALL 10680 0 2
9425: PPUSH
9426: CALL_OW 431
// end ;
9430: GO 9391
9432: POP
9433: POP
// end ; for i = 1 to personel do
9434: LD_ADDR_VAR 0 8
9438: PUSH
9439: DOUBLE
9440: LD_INT 1
9442: DEC
9443: ST_TO_ADDR
9444: LD_VAR 0 6
9448: PUSH
9449: FOR_TO
9450: IFFALSE 10514
// begin if i > 4 then
9452: LD_VAR 0 8
9456: PUSH
9457: LD_INT 4
9459: GREATER
9460: IFFALSE 9464
// break ;
9462: GO 10514
// case i of 1 :
9464: LD_VAR 0 8
9468: PUSH
9469: LD_INT 1
9471: DOUBLE
9472: EQUAL
9473: IFTRUE 9477
9475: GO 9557
9477: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9478: LD_ADDR_VAR 0 12
9482: PUSH
9483: LD_VAR 0 18
9487: PPUSH
9488: LD_INT 22
9490: PUSH
9491: LD_VAR 0 16
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 58
9502: PUSH
9503: EMPTY
9504: LIST
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: LD_INT 30
9511: PUSH
9512: LD_INT 32
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 30
9521: PUSH
9522: LD_INT 4
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 30
9531: PUSH
9532: LD_INT 5
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: PPUSH
9550: CALL_OW 72
9554: ST_TO_ADDR
9555: GO 9779
9557: LD_INT 2
9559: DOUBLE
9560: EQUAL
9561: IFTRUE 9565
9563: GO 9627
9565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9566: LD_ADDR_VAR 0 12
9570: PUSH
9571: LD_VAR 0 18
9575: PPUSH
9576: LD_INT 22
9578: PUSH
9579: LD_VAR 0 16
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 2
9590: PUSH
9591: LD_INT 30
9593: PUSH
9594: LD_INT 0
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 30
9603: PUSH
9604: LD_INT 1
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 72
9624: ST_TO_ADDR
9625: GO 9779
9627: LD_INT 3
9629: DOUBLE
9630: EQUAL
9631: IFTRUE 9635
9633: GO 9697
9635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9636: LD_ADDR_VAR 0 12
9640: PUSH
9641: LD_VAR 0 18
9645: PPUSH
9646: LD_INT 22
9648: PUSH
9649: LD_VAR 0 16
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: LD_INT 2
9660: PUSH
9661: LD_INT 30
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 30
9673: PUSH
9674: LD_INT 3
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 72
9694: ST_TO_ADDR
9695: GO 9779
9697: LD_INT 4
9699: DOUBLE
9700: EQUAL
9701: IFTRUE 9705
9703: GO 9778
9705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9706: LD_ADDR_VAR 0 12
9710: PUSH
9711: LD_VAR 0 18
9715: PPUSH
9716: LD_INT 22
9718: PUSH
9719: LD_VAR 0 16
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 6
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 7
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: LD_INT 30
9753: PUSH
9754: LD_INT 8
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PPUSH
9771: CALL_OW 72
9775: ST_TO_ADDR
9776: GO 9779
9778: POP
// if i = 1 then
9779: LD_VAR 0 8
9783: PUSH
9784: LD_INT 1
9786: EQUAL
9787: IFFALSE 9898
// begin tmp := [ ] ;
9789: LD_ADDR_VAR 0 19
9793: PUSH
9794: EMPTY
9795: ST_TO_ADDR
// for j in f do
9796: LD_ADDR_VAR 0 9
9800: PUSH
9801: LD_VAR 0 12
9805: PUSH
9806: FOR_IN
9807: IFFALSE 9880
// if GetBType ( j ) = b_bunker then
9809: LD_VAR 0 9
9813: PPUSH
9814: CALL_OW 266
9818: PUSH
9819: LD_INT 32
9821: EQUAL
9822: IFFALSE 9849
// tmp := Insert ( tmp , 1 , j ) else
9824: LD_ADDR_VAR 0 19
9828: PUSH
9829: LD_VAR 0 19
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: LD_VAR 0 9
9841: PPUSH
9842: CALL_OW 2
9846: ST_TO_ADDR
9847: GO 9878
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9849: LD_ADDR_VAR 0 19
9853: PUSH
9854: LD_VAR 0 19
9858: PPUSH
9859: LD_VAR 0 19
9863: PUSH
9864: LD_INT 1
9866: PLUS
9867: PPUSH
9868: LD_VAR 0 9
9872: PPUSH
9873: CALL_OW 2
9877: ST_TO_ADDR
9878: GO 9806
9880: POP
9881: POP
// if tmp then
9882: LD_VAR 0 19
9886: IFFALSE 9898
// f := tmp ;
9888: LD_ADDR_VAR 0 12
9892: PUSH
9893: LD_VAR 0 19
9897: ST_TO_ADDR
// end ; x := personel [ i ] ;
9898: LD_ADDR_VAR 0 13
9902: PUSH
9903: LD_VAR 0 6
9907: PUSH
9908: LD_VAR 0 8
9912: ARRAY
9913: ST_TO_ADDR
// if x = - 1 then
9914: LD_VAR 0 13
9918: PUSH
9919: LD_INT 1
9921: NEG
9922: EQUAL
9923: IFFALSE 10132
// begin for j in f do
9925: LD_ADDR_VAR 0 9
9929: PUSH
9930: LD_VAR 0 12
9934: PUSH
9935: FOR_IN
9936: IFFALSE 10128
// repeat InitHc ;
9938: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9942: LD_VAR 0 9
9946: PPUSH
9947: CALL_OW 266
9951: PUSH
9952: LD_INT 5
9954: EQUAL
9955: IFFALSE 10025
// begin if UnitsInside ( j ) < 3 then
9957: LD_VAR 0 9
9961: PPUSH
9962: CALL_OW 313
9966: PUSH
9967: LD_INT 3
9969: LESS
9970: IFFALSE 10006
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9972: LD_INT 0
9974: PPUSH
9975: LD_INT 5
9977: PUSH
9978: LD_INT 8
9980: PUSH
9981: LD_INT 9
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: LD_VAR 0 17
9993: ARRAY
9994: PPUSH
9995: LD_VAR 0 4
9999: PPUSH
10000: CALL_OW 380
10004: GO 10023
// PrepareHuman ( false , i , skill ) ;
10006: LD_INT 0
10008: PPUSH
10009: LD_VAR 0 8
10013: PPUSH
10014: LD_VAR 0 4
10018: PPUSH
10019: CALL_OW 380
// end else
10023: GO 10042
// PrepareHuman ( false , i , skill ) ;
10025: LD_INT 0
10027: PPUSH
10028: LD_VAR 0 8
10032: PPUSH
10033: LD_VAR 0 4
10037: PPUSH
10038: CALL_OW 380
// un := CreateHuman ;
10042: LD_ADDR_VAR 0 14
10046: PUSH
10047: CALL_OW 44
10051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10052: LD_ADDR_VAR 0 7
10056: PUSH
10057: LD_VAR 0 7
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: LD_VAR 0 14
10069: PPUSH
10070: CALL_OW 2
10074: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10075: LD_VAR 0 14
10079: PPUSH
10080: LD_VAR 0 9
10084: PPUSH
10085: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10089: LD_VAR 0 9
10093: PPUSH
10094: CALL_OW 313
10098: PUSH
10099: LD_INT 6
10101: EQUAL
10102: PUSH
10103: LD_VAR 0 9
10107: PPUSH
10108: CALL_OW 266
10112: PUSH
10113: LD_INT 32
10115: PUSH
10116: LD_INT 31
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: IN
10123: OR
10124: IFFALSE 9938
10126: GO 9935
10128: POP
10129: POP
// end else
10130: GO 10512
// for j = 1 to x do
10132: LD_ADDR_VAR 0 9
10136: PUSH
10137: DOUBLE
10138: LD_INT 1
10140: DEC
10141: ST_TO_ADDR
10142: LD_VAR 0 13
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10510
// begin InitHc ;
10150: CALL_OW 19
// if not f then
10154: LD_VAR 0 12
10158: NOT
10159: IFFALSE 10248
// begin PrepareHuman ( false , i , skill ) ;
10161: LD_INT 0
10163: PPUSH
10164: LD_VAR 0 8
10168: PPUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL_OW 380
// un := CreateHuman ;
10178: LD_ADDR_VAR 0 14
10182: PUSH
10183: CALL_OW 44
10187: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10188: LD_ADDR_VAR 0 7
10192: PUSH
10193: LD_VAR 0 7
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: LD_VAR 0 14
10205: PPUSH
10206: CALL_OW 2
10210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10211: LD_VAR 0 14
10215: PPUSH
10216: LD_VAR 0 1
10220: PPUSH
10221: CALL_OW 250
10225: PPUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: CALL_OW 251
10235: PPUSH
10236: LD_INT 10
10238: PPUSH
10239: LD_INT 0
10241: PPUSH
10242: CALL_OW 50
// continue ;
10246: GO 10147
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10248: LD_VAR 0 12
10252: PUSH
10253: LD_INT 1
10255: ARRAY
10256: PPUSH
10257: CALL_OW 313
10261: PUSH
10262: LD_VAR 0 12
10266: PUSH
10267: LD_INT 1
10269: ARRAY
10270: PPUSH
10271: CALL_OW 266
10275: PUSH
10276: LD_INT 32
10278: PUSH
10279: LD_INT 31
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: IN
10286: AND
10287: PUSH
10288: LD_VAR 0 12
10292: PUSH
10293: LD_INT 1
10295: ARRAY
10296: PPUSH
10297: CALL_OW 313
10301: PUSH
10302: LD_INT 6
10304: EQUAL
10305: OR
10306: IFFALSE 10326
// f := Delete ( f , 1 ) ;
10308: LD_ADDR_VAR 0 12
10312: PUSH
10313: LD_VAR 0 12
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 3
10325: ST_TO_ADDR
// if not f then
10326: LD_VAR 0 12
10330: NOT
10331: IFFALSE 10349
// begin x := x + 2 ;
10333: LD_ADDR_VAR 0 13
10337: PUSH
10338: LD_VAR 0 13
10342: PUSH
10343: LD_INT 2
10345: PLUS
10346: ST_TO_ADDR
// continue ;
10347: GO 10147
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10349: LD_VAR 0 12
10353: PUSH
10354: LD_INT 1
10356: ARRAY
10357: PPUSH
10358: CALL_OW 266
10362: PUSH
10363: LD_INT 5
10365: EQUAL
10366: IFFALSE 10440
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10368: LD_VAR 0 12
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: CALL_OW 313
10381: PUSH
10382: LD_INT 3
10384: LESS
10385: IFFALSE 10421
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10387: LD_INT 0
10389: PPUSH
10390: LD_INT 5
10392: PUSH
10393: LD_INT 8
10395: PUSH
10396: LD_INT 9
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: PUSH
10404: LD_VAR 0 17
10408: ARRAY
10409: PPUSH
10410: LD_VAR 0 4
10414: PPUSH
10415: CALL_OW 380
10419: GO 10438
// PrepareHuman ( false , i , skill ) ;
10421: LD_INT 0
10423: PPUSH
10424: LD_VAR 0 8
10428: PPUSH
10429: LD_VAR 0 4
10433: PPUSH
10434: CALL_OW 380
// end else
10438: GO 10457
// PrepareHuman ( false , i , skill ) ;
10440: LD_INT 0
10442: PPUSH
10443: LD_VAR 0 8
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 380
// un := CreateHuman ;
10457: LD_ADDR_VAR 0 14
10461: PUSH
10462: CALL_OW 44
10466: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10467: LD_ADDR_VAR 0 7
10471: PUSH
10472: LD_VAR 0 7
10476: PPUSH
10477: LD_INT 1
10479: PPUSH
10480: LD_VAR 0 14
10484: PPUSH
10485: CALL_OW 2
10489: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10490: LD_VAR 0 14
10494: PPUSH
10495: LD_VAR 0 12
10499: PUSH
10500: LD_INT 1
10502: ARRAY
10503: PPUSH
10504: CALL_OW 52
// end ;
10508: GO 10147
10510: POP
10511: POP
// end ;
10512: GO 9449
10514: POP
10515: POP
// result := result ^ buildings ;
10516: LD_ADDR_VAR 0 7
10520: PUSH
10521: LD_VAR 0 7
10525: PUSH
10526: LD_VAR 0 18
10530: ADD
10531: ST_TO_ADDR
// end else
10532: GO 10675
// begin for i = 1 to personel do
10534: LD_ADDR_VAR 0 8
10538: PUSH
10539: DOUBLE
10540: LD_INT 1
10542: DEC
10543: ST_TO_ADDR
10544: LD_VAR 0 6
10548: PUSH
10549: FOR_TO
10550: IFFALSE 10673
// begin if i > 4 then
10552: LD_VAR 0 8
10556: PUSH
10557: LD_INT 4
10559: GREATER
10560: IFFALSE 10564
// break ;
10562: GO 10673
// x := personel [ i ] ;
10564: LD_ADDR_VAR 0 13
10568: PUSH
10569: LD_VAR 0 6
10573: PUSH
10574: LD_VAR 0 8
10578: ARRAY
10579: ST_TO_ADDR
// if x = - 1 then
10580: LD_VAR 0 13
10584: PUSH
10585: LD_INT 1
10587: NEG
10588: EQUAL
10589: IFFALSE 10593
// continue ;
10591: GO 10549
// PrepareHuman ( false , i , skill ) ;
10593: LD_INT 0
10595: PPUSH
10596: LD_VAR 0 8
10600: PPUSH
10601: LD_VAR 0 4
10605: PPUSH
10606: CALL_OW 380
// un := CreateHuman ;
10610: LD_ADDR_VAR 0 14
10614: PUSH
10615: CALL_OW 44
10619: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10620: LD_VAR 0 14
10624: PPUSH
10625: LD_VAR 0 1
10629: PPUSH
10630: CALL_OW 250
10634: PPUSH
10635: LD_VAR 0 1
10639: PPUSH
10640: CALL_OW 251
10644: PPUSH
10645: LD_INT 10
10647: PPUSH
10648: LD_INT 0
10650: PPUSH
10651: CALL_OW 50
// result := result ^ un ;
10655: LD_ADDR_VAR 0 7
10659: PUSH
10660: LD_VAR 0 7
10664: PUSH
10665: LD_VAR 0 14
10669: ADD
10670: ST_TO_ADDR
// end ;
10671: GO 10549
10673: POP
10674: POP
// end ; end ;
10675: LD_VAR 0 7
10679: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10680: LD_INT 0
10682: PPUSH
10683: PPUSH
10684: PPUSH
10685: PPUSH
10686: PPUSH
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
10696: PPUSH
10697: PPUSH
// result := false ;
10698: LD_ADDR_VAR 0 3
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10706: LD_VAR 0 1
10710: NOT
10711: PUSH
10712: LD_VAR 0 1
10716: PPUSH
10717: CALL_OW 266
10721: PUSH
10722: LD_INT 32
10724: PUSH
10725: LD_INT 33
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: IN
10732: NOT
10733: OR
10734: IFFALSE 10738
// exit ;
10736: GO 11847
// nat := GetNation ( tower ) ;
10738: LD_ADDR_VAR 0 12
10742: PUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 248
10752: ST_TO_ADDR
// side := GetSide ( tower ) ;
10753: LD_ADDR_VAR 0 16
10757: PUSH
10758: LD_VAR 0 1
10762: PPUSH
10763: CALL_OW 255
10767: ST_TO_ADDR
// x := GetX ( tower ) ;
10768: LD_ADDR_VAR 0 10
10772: PUSH
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 250
10782: ST_TO_ADDR
// y := GetY ( tower ) ;
10783: LD_ADDR_VAR 0 11
10787: PUSH
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 251
10797: ST_TO_ADDR
// if not x or not y then
10798: LD_VAR 0 10
10802: NOT
10803: PUSH
10804: LD_VAR 0 11
10808: NOT
10809: OR
10810: IFFALSE 10814
// exit ;
10812: GO 11847
// weapon := 0 ;
10814: LD_ADDR_VAR 0 18
10818: PUSH
10819: LD_INT 0
10821: ST_TO_ADDR
// fac_list := [ ] ;
10822: LD_ADDR_VAR 0 17
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10829: LD_ADDR_VAR 0 6
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 274
10843: PPUSH
10844: LD_VAR 0 2
10848: PPUSH
10849: LD_INT 0
10851: PPUSH
10852: CALL 8418 0 3
10856: PPUSH
10857: LD_INT 30
10859: PUSH
10860: LD_INT 3
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 72
10871: ST_TO_ADDR
// if not factories then
10872: LD_VAR 0 6
10876: NOT
10877: IFFALSE 10881
// exit ;
10879: GO 11847
// for i in factories do
10881: LD_ADDR_VAR 0 8
10885: PUSH
10886: LD_VAR 0 6
10890: PUSH
10891: FOR_IN
10892: IFFALSE 10917
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10894: LD_ADDR_VAR 0 17
10898: PUSH
10899: LD_VAR 0 17
10903: PUSH
10904: LD_VAR 0 8
10908: PPUSH
10909: CALL_OW 478
10913: UNION
10914: ST_TO_ADDR
10915: GO 10891
10917: POP
10918: POP
// if not fac_list then
10919: LD_VAR 0 17
10923: NOT
10924: IFFALSE 10928
// exit ;
10926: GO 11847
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10928: LD_ADDR_VAR 0 5
10932: PUSH
10933: LD_INT 4
10935: PUSH
10936: LD_INT 5
10938: PUSH
10939: LD_INT 9
10941: PUSH
10942: LD_INT 10
10944: PUSH
10945: LD_INT 6
10947: PUSH
10948: LD_INT 7
10950: PUSH
10951: LD_INT 11
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 27
10965: PUSH
10966: LD_INT 28
10968: PUSH
10969: LD_INT 26
10971: PUSH
10972: LD_INT 30
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 43
10983: PUSH
10984: LD_INT 44
10986: PUSH
10987: LD_INT 46
10989: PUSH
10990: LD_INT 45
10992: PUSH
10993: LD_INT 47
10995: PUSH
10996: LD_INT 49
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: LD_VAR 0 12
11016: ARRAY
11017: ST_TO_ADDR
// list := list isect fac_list ;
11018: LD_ADDR_VAR 0 5
11022: PUSH
11023: LD_VAR 0 5
11027: PUSH
11028: LD_VAR 0 17
11032: ISECT
11033: ST_TO_ADDR
// if not list then
11034: LD_VAR 0 5
11038: NOT
11039: IFFALSE 11043
// exit ;
11041: GO 11847
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11043: LD_VAR 0 12
11047: PUSH
11048: LD_INT 3
11050: EQUAL
11051: PUSH
11052: LD_INT 49
11054: PUSH
11055: LD_VAR 0 5
11059: IN
11060: AND
11061: PUSH
11062: LD_INT 31
11064: PPUSH
11065: LD_VAR 0 16
11069: PPUSH
11070: CALL_OW 321
11074: PUSH
11075: LD_INT 2
11077: EQUAL
11078: AND
11079: IFFALSE 11139
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11081: LD_INT 22
11083: PUSH
11084: LD_VAR 0 16
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 35
11095: PUSH
11096: LD_INT 49
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 91
11105: PUSH
11106: LD_VAR 0 1
11110: PUSH
11111: LD_INT 10
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: PPUSH
11124: CALL_OW 69
11128: NOT
11129: IFFALSE 11139
// weapon := ru_time_lapser ;
11131: LD_ADDR_VAR 0 18
11135: PUSH
11136: LD_INT 49
11138: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11139: LD_VAR 0 12
11143: PUSH
11144: LD_INT 1
11146: PUSH
11147: LD_INT 2
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: IN
11154: PUSH
11155: LD_INT 11
11157: PUSH
11158: LD_VAR 0 5
11162: IN
11163: PUSH
11164: LD_INT 30
11166: PUSH
11167: LD_VAR 0 5
11171: IN
11172: OR
11173: AND
11174: PUSH
11175: LD_INT 6
11177: PPUSH
11178: LD_VAR 0 16
11182: PPUSH
11183: CALL_OW 321
11187: PUSH
11188: LD_INT 2
11190: EQUAL
11191: AND
11192: IFFALSE 11357
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11194: LD_INT 22
11196: PUSH
11197: LD_VAR 0 16
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: LD_INT 35
11211: PUSH
11212: LD_INT 11
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 35
11221: PUSH
11222: LD_INT 30
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 91
11236: PUSH
11237: LD_VAR 0 1
11241: PUSH
11242: LD_INT 18
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: NOT
11260: PUSH
11261: LD_INT 22
11263: PUSH
11264: LD_VAR 0 16
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 2
11275: PUSH
11276: LD_INT 30
11278: PUSH
11279: LD_INT 32
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 30
11288: PUSH
11289: LD_INT 33
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 91
11303: PUSH
11304: LD_VAR 0 1
11308: PUSH
11309: LD_INT 12
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: PPUSH
11325: CALL_OW 69
11329: PUSH
11330: LD_INT 2
11332: GREATER
11333: AND
11334: IFFALSE 11357
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11336: LD_ADDR_VAR 0 18
11340: PUSH
11341: LD_INT 11
11343: PUSH
11344: LD_INT 30
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_VAR 0 12
11355: ARRAY
11356: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11357: LD_VAR 0 18
11361: NOT
11362: PUSH
11363: LD_INT 40
11365: PPUSH
11366: LD_VAR 0 16
11370: PPUSH
11371: CALL_OW 321
11375: PUSH
11376: LD_INT 2
11378: EQUAL
11379: AND
11380: PUSH
11381: LD_INT 7
11383: PUSH
11384: LD_VAR 0 5
11388: IN
11389: PUSH
11390: LD_INT 28
11392: PUSH
11393: LD_VAR 0 5
11397: IN
11398: OR
11399: PUSH
11400: LD_INT 45
11402: PUSH
11403: LD_VAR 0 5
11407: IN
11408: OR
11409: AND
11410: IFFALSE 11664
// begin hex := GetHexInfo ( x , y ) ;
11412: LD_ADDR_VAR 0 4
11416: PUSH
11417: LD_VAR 0 10
11421: PPUSH
11422: LD_VAR 0 11
11426: PPUSH
11427: CALL_OW 546
11431: ST_TO_ADDR
// if hex [ 1 ] then
11432: LD_VAR 0 4
11436: PUSH
11437: LD_INT 1
11439: ARRAY
11440: IFFALSE 11444
// exit ;
11442: GO 11847
// height := hex [ 2 ] ;
11444: LD_ADDR_VAR 0 15
11448: PUSH
11449: LD_VAR 0 4
11453: PUSH
11454: LD_INT 2
11456: ARRAY
11457: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11458: LD_ADDR_VAR 0 14
11462: PUSH
11463: LD_INT 0
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 3
11471: PUSH
11472: LD_INT 5
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: ST_TO_ADDR
// for i in tmp do
11481: LD_ADDR_VAR 0 8
11485: PUSH
11486: LD_VAR 0 14
11490: PUSH
11491: FOR_IN
11492: IFFALSE 11662
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11494: LD_ADDR_VAR 0 9
11498: PUSH
11499: LD_VAR 0 10
11503: PPUSH
11504: LD_VAR 0 8
11508: PPUSH
11509: LD_INT 5
11511: PPUSH
11512: CALL_OW 272
11516: PUSH
11517: LD_VAR 0 11
11521: PPUSH
11522: LD_VAR 0 8
11526: PPUSH
11527: LD_INT 5
11529: PPUSH
11530: CALL_OW 273
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11539: LD_VAR 0 9
11543: PUSH
11544: LD_INT 1
11546: ARRAY
11547: PPUSH
11548: LD_VAR 0 9
11552: PUSH
11553: LD_INT 2
11555: ARRAY
11556: PPUSH
11557: CALL_OW 488
11561: IFFALSE 11660
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11563: LD_ADDR_VAR 0 4
11567: PUSH
11568: LD_VAR 0 9
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PPUSH
11577: LD_VAR 0 9
11581: PUSH
11582: LD_INT 2
11584: ARRAY
11585: PPUSH
11586: CALL_OW 546
11590: ST_TO_ADDR
// if hex [ 1 ] then
11591: LD_VAR 0 4
11595: PUSH
11596: LD_INT 1
11598: ARRAY
11599: IFFALSE 11603
// continue ;
11601: GO 11491
// h := hex [ 2 ] ;
11603: LD_ADDR_VAR 0 13
11607: PUSH
11608: LD_VAR 0 4
11612: PUSH
11613: LD_INT 2
11615: ARRAY
11616: ST_TO_ADDR
// if h + 7 < height then
11617: LD_VAR 0 13
11621: PUSH
11622: LD_INT 7
11624: PLUS
11625: PUSH
11626: LD_VAR 0 15
11630: LESS
11631: IFFALSE 11660
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11633: LD_ADDR_VAR 0 18
11637: PUSH
11638: LD_INT 7
11640: PUSH
11641: LD_INT 28
11643: PUSH
11644: LD_INT 45
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: LD_VAR 0 12
11656: ARRAY
11657: ST_TO_ADDR
// break ;
11658: GO 11662
// end ; end ; end ;
11660: GO 11491
11662: POP
11663: POP
// end ; if not weapon then
11664: LD_VAR 0 18
11668: NOT
11669: IFFALSE 11729
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11671: LD_ADDR_VAR 0 5
11675: PUSH
11676: LD_VAR 0 5
11680: PUSH
11681: LD_INT 11
11683: PUSH
11684: LD_INT 30
11686: PUSH
11687: LD_INT 49
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: DIFF
11695: ST_TO_ADDR
// if not list then
11696: LD_VAR 0 5
11700: NOT
11701: IFFALSE 11705
// exit ;
11703: GO 11847
// weapon := list [ rand ( 1 , list ) ] ;
11705: LD_ADDR_VAR 0 18
11709: PUSH
11710: LD_VAR 0 5
11714: PUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_VAR 0 5
11722: PPUSH
11723: CALL_OW 12
11727: ARRAY
11728: ST_TO_ADDR
// end ; if weapon then
11729: LD_VAR 0 18
11733: IFFALSE 11847
// begin tmp := CostOfWeapon ( weapon ) ;
11735: LD_ADDR_VAR 0 14
11739: PUSH
11740: LD_VAR 0 18
11744: PPUSH
11745: CALL_OW 451
11749: ST_TO_ADDR
// j := GetBase ( tower ) ;
11750: LD_ADDR_VAR 0 9
11754: PUSH
11755: LD_VAR 0 1
11759: PPUSH
11760: CALL_OW 274
11764: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11765: LD_VAR 0 9
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 275
11777: PUSH
11778: LD_VAR 0 14
11782: PUSH
11783: LD_INT 1
11785: ARRAY
11786: GREATEREQUAL
11787: PUSH
11788: LD_VAR 0 9
11792: PPUSH
11793: LD_INT 2
11795: PPUSH
11796: CALL_OW 275
11800: PUSH
11801: LD_VAR 0 14
11805: PUSH
11806: LD_INT 2
11808: ARRAY
11809: GREATEREQUAL
11810: AND
11811: PUSH
11812: LD_VAR 0 9
11816: PPUSH
11817: LD_INT 3
11819: PPUSH
11820: CALL_OW 275
11824: PUSH
11825: LD_VAR 0 14
11829: PUSH
11830: LD_INT 3
11832: ARRAY
11833: GREATEREQUAL
11834: AND
11835: IFFALSE 11847
// result := weapon ;
11837: LD_ADDR_VAR 0 3
11841: PUSH
11842: LD_VAR 0 18
11846: ST_TO_ADDR
// end ; end ;
11847: LD_VAR 0 3
11851: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11852: LD_INT 0
11854: PPUSH
11855: PPUSH
// result := true ;
11856: LD_ADDR_VAR 0 3
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if array1 = array2 then
11864: LD_VAR 0 1
11868: PUSH
11869: LD_VAR 0 2
11873: EQUAL
11874: IFFALSE 11934
// begin for i = 1 to array1 do
11876: LD_ADDR_VAR 0 4
11880: PUSH
11881: DOUBLE
11882: LD_INT 1
11884: DEC
11885: ST_TO_ADDR
11886: LD_VAR 0 1
11890: PUSH
11891: FOR_TO
11892: IFFALSE 11930
// if array1 [ i ] <> array2 [ i ] then
11894: LD_VAR 0 1
11898: PUSH
11899: LD_VAR 0 4
11903: ARRAY
11904: PUSH
11905: LD_VAR 0 2
11909: PUSH
11910: LD_VAR 0 4
11914: ARRAY
11915: NONEQUAL
11916: IFFALSE 11928
// begin result := false ;
11918: LD_ADDR_VAR 0 3
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// break ;
11926: GO 11930
// end ;
11928: GO 11891
11930: POP
11931: POP
// end else
11932: GO 11942
// result := false ;
11934: LD_ADDR_VAR 0 3
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// end ;
11942: LD_VAR 0 3
11946: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
// if not array1 or not array2 then
11951: LD_VAR 0 1
11955: NOT
11956: PUSH
11957: LD_VAR 0 2
11961: NOT
11962: OR
11963: IFFALSE 11967
// exit ;
11965: GO 12031
// result := true ;
11967: LD_ADDR_VAR 0 3
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// for i = 1 to array1 do
11975: LD_ADDR_VAR 0 4
11979: PUSH
11980: DOUBLE
11981: LD_INT 1
11983: DEC
11984: ST_TO_ADDR
11985: LD_VAR 0 1
11989: PUSH
11990: FOR_TO
11991: IFFALSE 12029
// if array1 [ i ] <> array2 [ i ] then
11993: LD_VAR 0 1
11997: PUSH
11998: LD_VAR 0 4
12002: ARRAY
12003: PUSH
12004: LD_VAR 0 2
12008: PUSH
12009: LD_VAR 0 4
12013: ARRAY
12014: NONEQUAL
12015: IFFALSE 12027
// begin result := false ;
12017: LD_ADDR_VAR 0 3
12021: PUSH
12022: LD_INT 0
12024: ST_TO_ADDR
// break ;
12025: GO 12029
// end ;
12027: GO 11990
12029: POP
12030: POP
// end ;
12031: LD_VAR 0 3
12035: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12036: LD_INT 0
12038: PPUSH
12039: PPUSH
12040: PPUSH
// pom := GetBase ( fac ) ;
12041: LD_ADDR_VAR 0 5
12045: PUSH
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 274
12055: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12056: LD_ADDR_VAR 0 4
12060: PUSH
12061: LD_VAR 0 2
12065: PUSH
12066: LD_INT 1
12068: ARRAY
12069: PPUSH
12070: LD_VAR 0 2
12074: PUSH
12075: LD_INT 2
12077: ARRAY
12078: PPUSH
12079: LD_VAR 0 2
12083: PUSH
12084: LD_INT 3
12086: ARRAY
12087: PPUSH
12088: LD_VAR 0 2
12092: PUSH
12093: LD_INT 4
12095: ARRAY
12096: PPUSH
12097: CALL_OW 449
12101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: LD_VAR 0 5
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL_OW 275
12119: PUSH
12120: LD_VAR 0 4
12124: PUSH
12125: LD_INT 1
12127: ARRAY
12128: GREATEREQUAL
12129: PUSH
12130: LD_VAR 0 5
12134: PPUSH
12135: LD_INT 2
12137: PPUSH
12138: CALL_OW 275
12142: PUSH
12143: LD_VAR 0 4
12147: PUSH
12148: LD_INT 2
12150: ARRAY
12151: GREATEREQUAL
12152: AND
12153: PUSH
12154: LD_VAR 0 5
12158: PPUSH
12159: LD_INT 3
12161: PPUSH
12162: CALL_OW 275
12166: PUSH
12167: LD_VAR 0 4
12171: PUSH
12172: LD_INT 3
12174: ARRAY
12175: GREATEREQUAL
12176: AND
12177: ST_TO_ADDR
// end ;
12178: LD_VAR 0 3
12182: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12183: LD_INT 0
12185: PPUSH
12186: PPUSH
12187: PPUSH
12188: PPUSH
// pom := GetBase ( building ) ;
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 274
12203: ST_TO_ADDR
// if not pom then
12204: LD_VAR 0 3
12208: NOT
12209: IFFALSE 12213
// exit ;
12211: GO 12383
// btype := GetBType ( building ) ;
12213: LD_ADDR_VAR 0 5
12217: PUSH
12218: LD_VAR 0 1
12222: PPUSH
12223: CALL_OW 266
12227: ST_TO_ADDR
// if btype = b_armoury then
12228: LD_VAR 0 5
12232: PUSH
12233: LD_INT 4
12235: EQUAL
12236: IFFALSE 12246
// btype := b_barracks ;
12238: LD_ADDR_VAR 0 5
12242: PUSH
12243: LD_INT 5
12245: ST_TO_ADDR
// if btype = b_depot then
12246: LD_VAR 0 5
12250: PUSH
12251: LD_INT 0
12253: EQUAL
12254: IFFALSE 12264
// btype := b_warehouse ;
12256: LD_ADDR_VAR 0 5
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// if btype = b_workshop then
12264: LD_VAR 0 5
12268: PUSH
12269: LD_INT 2
12271: EQUAL
12272: IFFALSE 12282
// btype := b_factory ;
12274: LD_ADDR_VAR 0 5
12278: PUSH
12279: LD_INT 3
12281: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12282: LD_ADDR_VAR 0 4
12286: PUSH
12287: LD_VAR 0 5
12291: PPUSH
12292: LD_VAR 0 1
12296: PPUSH
12297: CALL_OW 248
12301: PPUSH
12302: CALL_OW 450
12306: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 275
12324: PUSH
12325: LD_VAR 0 4
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: GREATEREQUAL
12334: PUSH
12335: LD_VAR 0 3
12339: PPUSH
12340: LD_INT 2
12342: PPUSH
12343: CALL_OW 275
12347: PUSH
12348: LD_VAR 0 4
12352: PUSH
12353: LD_INT 2
12355: ARRAY
12356: GREATEREQUAL
12357: AND
12358: PUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: CALL_OW 275
12371: PUSH
12372: LD_VAR 0 4
12376: PUSH
12377: LD_INT 3
12379: ARRAY
12380: GREATEREQUAL
12381: AND
12382: ST_TO_ADDR
// end ;
12383: LD_VAR 0 2
12387: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12388: LD_INT 0
12390: PPUSH
12391: PPUSH
12392: PPUSH
// pom := GetBase ( building ) ;
12393: LD_ADDR_VAR 0 4
12397: PUSH
12398: LD_VAR 0 1
12402: PPUSH
12403: CALL_OW 274
12407: ST_TO_ADDR
// if not pom then
12408: LD_VAR 0 4
12412: NOT
12413: IFFALSE 12417
// exit ;
12415: GO 12518
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12417: LD_ADDR_VAR 0 5
12421: PUSH
12422: LD_VAR 0 2
12426: PPUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL_OW 248
12436: PPUSH
12437: CALL_OW 450
12441: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_VAR 0 4
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 275
12459: PUSH
12460: LD_VAR 0 5
12464: PUSH
12465: LD_INT 1
12467: ARRAY
12468: GREATEREQUAL
12469: PUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: LD_INT 2
12477: PPUSH
12478: CALL_OW 275
12482: PUSH
12483: LD_VAR 0 5
12487: PUSH
12488: LD_INT 2
12490: ARRAY
12491: GREATEREQUAL
12492: AND
12493: PUSH
12494: LD_VAR 0 4
12498: PPUSH
12499: LD_INT 3
12501: PPUSH
12502: CALL_OW 275
12506: PUSH
12507: LD_VAR 0 5
12511: PUSH
12512: LD_INT 3
12514: ARRAY
12515: GREATEREQUAL
12516: AND
12517: ST_TO_ADDR
// end ;
12518: LD_VAR 0 3
12522: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12523: LD_INT 0
12525: PPUSH
12526: PPUSH
12527: PPUSH
12528: PPUSH
12529: PPUSH
12530: PPUSH
12531: PPUSH
12532: PPUSH
12533: PPUSH
12534: PPUSH
12535: PPUSH
// result := false ;
12536: LD_ADDR_VAR 0 8
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12544: LD_VAR 0 5
12548: NOT
12549: PUSH
12550: LD_VAR 0 1
12554: NOT
12555: OR
12556: PUSH
12557: LD_VAR 0 2
12561: NOT
12562: OR
12563: PUSH
12564: LD_VAR 0 3
12568: NOT
12569: OR
12570: IFFALSE 12574
// exit ;
12572: GO 13388
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12574: LD_ADDR_VAR 0 14
12578: PUSH
12579: LD_VAR 0 1
12583: PPUSH
12584: LD_VAR 0 2
12588: PPUSH
12589: LD_VAR 0 3
12593: PPUSH
12594: LD_VAR 0 4
12598: PPUSH
12599: LD_VAR 0 5
12603: PUSH
12604: LD_INT 1
12606: ARRAY
12607: PPUSH
12608: CALL_OW 248
12612: PPUSH
12613: LD_INT 0
12615: PPUSH
12616: CALL 14621 0 6
12620: ST_TO_ADDR
// if not hexes then
12621: LD_VAR 0 14
12625: NOT
12626: IFFALSE 12630
// exit ;
12628: GO 13388
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12630: LD_ADDR_VAR 0 17
12634: PUSH
12635: LD_VAR 0 5
12639: PPUSH
12640: LD_INT 22
12642: PUSH
12643: LD_VAR 0 13
12647: PPUSH
12648: CALL_OW 255
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 2
12659: PUSH
12660: LD_INT 30
12662: PUSH
12663: LD_INT 0
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 30
12672: PUSH
12673: LD_INT 1
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 72
12693: ST_TO_ADDR
// for i = 1 to hexes do
12694: LD_ADDR_VAR 0 9
12698: PUSH
12699: DOUBLE
12700: LD_INT 1
12702: DEC
12703: ST_TO_ADDR
12704: LD_VAR 0 14
12708: PUSH
12709: FOR_TO
12710: IFFALSE 13386
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12712: LD_ADDR_VAR 0 13
12716: PUSH
12717: LD_VAR 0 14
12721: PUSH
12722: LD_VAR 0 9
12726: ARRAY
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: LD_VAR 0 14
12736: PUSH
12737: LD_VAR 0 9
12741: ARRAY
12742: PUSH
12743: LD_INT 2
12745: ARRAY
12746: PPUSH
12747: CALL_OW 428
12751: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12752: LD_VAR 0 14
12756: PUSH
12757: LD_VAR 0 9
12761: ARRAY
12762: PUSH
12763: LD_INT 1
12765: ARRAY
12766: PPUSH
12767: LD_VAR 0 14
12771: PUSH
12772: LD_VAR 0 9
12776: ARRAY
12777: PUSH
12778: LD_INT 2
12780: ARRAY
12781: PPUSH
12782: CALL_OW 351
12786: PUSH
12787: LD_VAR 0 14
12791: PUSH
12792: LD_VAR 0 9
12796: ARRAY
12797: PUSH
12798: LD_INT 1
12800: ARRAY
12801: PPUSH
12802: LD_VAR 0 14
12806: PUSH
12807: LD_VAR 0 9
12811: ARRAY
12812: PUSH
12813: LD_INT 2
12815: ARRAY
12816: PPUSH
12817: CALL_OW 488
12821: NOT
12822: OR
12823: PUSH
12824: LD_VAR 0 13
12828: PPUSH
12829: CALL_OW 247
12833: PUSH
12834: LD_INT 3
12836: EQUAL
12837: OR
12838: IFFALSE 12844
// exit ;
12840: POP
12841: POP
12842: GO 13388
// if not tmp then
12844: LD_VAR 0 13
12848: NOT
12849: IFFALSE 12853
// continue ;
12851: GO 12709
// result := true ;
12853: LD_ADDR_VAR 0 8
12857: PUSH
12858: LD_INT 1
12860: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12861: LD_VAR 0 6
12865: PUSH
12866: LD_VAR 0 13
12870: PPUSH
12871: CALL_OW 247
12875: PUSH
12876: LD_INT 2
12878: EQUAL
12879: AND
12880: PUSH
12881: LD_VAR 0 13
12885: PPUSH
12886: CALL_OW 263
12890: PUSH
12891: LD_INT 1
12893: EQUAL
12894: AND
12895: IFFALSE 13059
// begin if IsDrivenBy ( tmp ) then
12897: LD_VAR 0 13
12901: PPUSH
12902: CALL_OW 311
12906: IFFALSE 12910
// continue ;
12908: GO 12709
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12910: LD_VAR 0 6
12914: PPUSH
12915: LD_INT 3
12917: PUSH
12918: LD_INT 60
12920: PUSH
12921: EMPTY
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: LD_INT 55
12933: PUSH
12934: EMPTY
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 72
12949: IFFALSE 13057
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12951: LD_ADDR_VAR 0 18
12955: PUSH
12956: LD_VAR 0 6
12960: PPUSH
12961: LD_INT 3
12963: PUSH
12964: LD_INT 60
12966: PUSH
12967: EMPTY
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 3
12976: PUSH
12977: LD_INT 55
12979: PUSH
12980: EMPTY
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 72
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: ST_TO_ADDR
// if IsInUnit ( driver ) then
13000: LD_VAR 0 18
13004: PPUSH
13005: CALL_OW 310
13009: IFFALSE 13020
// ComExit ( driver ) ;
13011: LD_VAR 0 18
13015: PPUSH
13016: CALL 38401 0 1
// AddComEnterUnit ( driver , tmp ) ;
13020: LD_VAR 0 18
13024: PPUSH
13025: LD_VAR 0 13
13029: PPUSH
13030: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13034: LD_VAR 0 18
13038: PPUSH
13039: LD_VAR 0 7
13043: PPUSH
13044: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13048: LD_VAR 0 18
13052: PPUSH
13053: CALL_OW 181
// end ; continue ;
13057: GO 12709
// end ; if not cleaners or not tmp in cleaners then
13059: LD_VAR 0 6
13063: NOT
13064: PUSH
13065: LD_VAR 0 13
13069: PUSH
13070: LD_VAR 0 6
13074: IN
13075: NOT
13076: OR
13077: IFFALSE 13384
// begin if dep then
13079: LD_VAR 0 17
13083: IFFALSE 13219
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13085: LD_ADDR_VAR 0 16
13089: PUSH
13090: LD_VAR 0 17
13094: PUSH
13095: LD_INT 1
13097: ARRAY
13098: PPUSH
13099: CALL_OW 250
13103: PPUSH
13104: LD_VAR 0 17
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: CALL_OW 254
13117: PPUSH
13118: LD_INT 5
13120: PPUSH
13121: CALL_OW 272
13125: PUSH
13126: LD_VAR 0 17
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PPUSH
13135: CALL_OW 251
13139: PPUSH
13140: LD_VAR 0 17
13144: PUSH
13145: LD_INT 1
13147: ARRAY
13148: PPUSH
13149: CALL_OW 254
13153: PPUSH
13154: LD_INT 5
13156: PPUSH
13157: CALL_OW 273
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13166: LD_VAR 0 16
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: LD_VAR 0 16
13179: PUSH
13180: LD_INT 2
13182: ARRAY
13183: PPUSH
13184: CALL_OW 488
13188: IFFALSE 13219
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13190: LD_VAR 0 13
13194: PPUSH
13195: LD_VAR 0 16
13199: PUSH
13200: LD_INT 1
13202: ARRAY
13203: PPUSH
13204: LD_VAR 0 16
13208: PUSH
13209: LD_INT 2
13211: ARRAY
13212: PPUSH
13213: CALL_OW 111
// continue ;
13217: GO 12709
// end ; end ; r := GetDir ( tmp ) ;
13219: LD_ADDR_VAR 0 15
13223: PUSH
13224: LD_VAR 0 13
13228: PPUSH
13229: CALL_OW 254
13233: ST_TO_ADDR
// if r = 5 then
13234: LD_VAR 0 15
13238: PUSH
13239: LD_INT 5
13241: EQUAL
13242: IFFALSE 13252
// r := 0 ;
13244: LD_ADDR_VAR 0 15
13248: PUSH
13249: LD_INT 0
13251: ST_TO_ADDR
// for j = r to 5 do
13252: LD_ADDR_VAR 0 10
13256: PUSH
13257: DOUBLE
13258: LD_VAR 0 15
13262: DEC
13263: ST_TO_ADDR
13264: LD_INT 5
13266: PUSH
13267: FOR_TO
13268: IFFALSE 13382
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13270: LD_ADDR_VAR 0 11
13274: PUSH
13275: LD_VAR 0 13
13279: PPUSH
13280: CALL_OW 250
13284: PPUSH
13285: LD_VAR 0 10
13289: PPUSH
13290: LD_INT 2
13292: PPUSH
13293: CALL_OW 272
13297: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13298: LD_ADDR_VAR 0 12
13302: PUSH
13303: LD_VAR 0 13
13307: PPUSH
13308: CALL_OW 251
13312: PPUSH
13313: LD_VAR 0 10
13317: PPUSH
13318: LD_INT 2
13320: PPUSH
13321: CALL_OW 273
13325: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13326: LD_VAR 0 11
13330: PPUSH
13331: LD_VAR 0 12
13335: PPUSH
13336: CALL_OW 488
13340: PUSH
13341: LD_VAR 0 11
13345: PPUSH
13346: LD_VAR 0 12
13350: PPUSH
13351: CALL_OW 428
13355: NOT
13356: AND
13357: IFFALSE 13380
// begin ComMoveXY ( tmp , _x , _y ) ;
13359: LD_VAR 0 13
13363: PPUSH
13364: LD_VAR 0 11
13368: PPUSH
13369: LD_VAR 0 12
13373: PPUSH
13374: CALL_OW 111
// break ;
13378: GO 13382
// end ; end ;
13380: GO 13267
13382: POP
13383: POP
// end ; end ;
13384: GO 12709
13386: POP
13387: POP
// end ;
13388: LD_VAR 0 8
13392: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13393: LD_INT 0
13395: PPUSH
// result := true ;
13396: LD_ADDR_VAR 0 3
13400: PUSH
13401: LD_INT 1
13403: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13404: LD_VAR 0 2
13408: PUSH
13409: LD_INT 24
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13423
13415: LD_INT 33
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13448
13423: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13424: LD_ADDR_VAR 0 3
13428: PUSH
13429: LD_INT 32
13431: PPUSH
13432: LD_VAR 0 1
13436: PPUSH
13437: CALL_OW 321
13441: PUSH
13442: LD_INT 2
13444: EQUAL
13445: ST_TO_ADDR
13446: GO 13764
13448: LD_INT 20
13450: DOUBLE
13451: EQUAL
13452: IFTRUE 13456
13454: GO 13481
13456: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13457: LD_ADDR_VAR 0 3
13461: PUSH
13462: LD_INT 6
13464: PPUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 321
13474: PUSH
13475: LD_INT 2
13477: EQUAL
13478: ST_TO_ADDR
13479: GO 13764
13481: LD_INT 22
13483: DOUBLE
13484: EQUAL
13485: IFTRUE 13495
13487: LD_INT 36
13489: DOUBLE
13490: EQUAL
13491: IFTRUE 13495
13493: GO 13520
13495: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13496: LD_ADDR_VAR 0 3
13500: PUSH
13501: LD_INT 15
13503: PPUSH
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 321
13513: PUSH
13514: LD_INT 2
13516: EQUAL
13517: ST_TO_ADDR
13518: GO 13764
13520: LD_INT 30
13522: DOUBLE
13523: EQUAL
13524: IFTRUE 13528
13526: GO 13553
13528: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13529: LD_ADDR_VAR 0 3
13533: PUSH
13534: LD_INT 20
13536: PPUSH
13537: LD_VAR 0 1
13541: PPUSH
13542: CALL_OW 321
13546: PUSH
13547: LD_INT 2
13549: EQUAL
13550: ST_TO_ADDR
13551: GO 13764
13553: LD_INT 28
13555: DOUBLE
13556: EQUAL
13557: IFTRUE 13567
13559: LD_INT 21
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13592
13567: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13568: LD_ADDR_VAR 0 3
13572: PUSH
13573: LD_INT 21
13575: PPUSH
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 321
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: ST_TO_ADDR
13590: GO 13764
13592: LD_INT 16
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13600
13598: GO 13625
13600: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13601: LD_ADDR_VAR 0 3
13605: PUSH
13606: LD_INT 84
13608: PPUSH
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 321
13618: PUSH
13619: LD_INT 2
13621: EQUAL
13622: ST_TO_ADDR
13623: GO 13764
13625: LD_INT 19
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13639
13631: LD_INT 23
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13664
13639: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_INT 83
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 321
13657: PUSH
13658: LD_INT 2
13660: EQUAL
13661: ST_TO_ADDR
13662: GO 13764
13664: LD_INT 17
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13672
13670: GO 13697
13672: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13673: LD_ADDR_VAR 0 3
13677: PUSH
13678: LD_INT 39
13680: PPUSH
13681: LD_VAR 0 1
13685: PPUSH
13686: CALL_OW 321
13690: PUSH
13691: LD_INT 2
13693: EQUAL
13694: ST_TO_ADDR
13695: GO 13764
13697: LD_INT 18
13699: DOUBLE
13700: EQUAL
13701: IFTRUE 13705
13703: GO 13730
13705: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13706: LD_ADDR_VAR 0 3
13710: PUSH
13711: LD_INT 40
13713: PPUSH
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 321
13723: PUSH
13724: LD_INT 2
13726: EQUAL
13727: ST_TO_ADDR
13728: GO 13764
13730: LD_INT 27
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13763
13738: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13739: LD_ADDR_VAR 0 3
13743: PUSH
13744: LD_INT 35
13746: PPUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 321
13756: PUSH
13757: LD_INT 2
13759: EQUAL
13760: ST_TO_ADDR
13761: GO 13764
13763: POP
// end ;
13764: LD_VAR 0 3
13768: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13769: LD_INT 0
13771: PPUSH
13772: PPUSH
13773: PPUSH
13774: PPUSH
13775: PPUSH
13776: PPUSH
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
// result := false ;
13782: LD_ADDR_VAR 0 6
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13790: LD_VAR 0 1
13794: NOT
13795: PUSH
13796: LD_VAR 0 1
13800: PPUSH
13801: CALL_OW 266
13805: PUSH
13806: LD_INT 0
13808: PUSH
13809: LD_INT 1
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: IN
13816: NOT
13817: OR
13818: PUSH
13819: LD_VAR 0 2
13823: NOT
13824: OR
13825: PUSH
13826: LD_VAR 0 5
13830: PUSH
13831: LD_INT 0
13833: PUSH
13834: LD_INT 1
13836: PUSH
13837: LD_INT 2
13839: PUSH
13840: LD_INT 3
13842: PUSH
13843: LD_INT 4
13845: PUSH
13846: LD_INT 5
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: IN
13857: NOT
13858: OR
13859: PUSH
13860: LD_VAR 0 3
13864: PPUSH
13865: LD_VAR 0 4
13869: PPUSH
13870: CALL_OW 488
13874: NOT
13875: OR
13876: IFFALSE 13880
// exit ;
13878: GO 14616
// side := GetSide ( depot ) ;
13880: LD_ADDR_VAR 0 9
13884: PUSH
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL_OW 255
13894: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13895: LD_VAR 0 9
13899: PPUSH
13900: LD_VAR 0 2
13904: PPUSH
13905: CALL 13393 0 2
13909: NOT
13910: IFFALSE 13914
// exit ;
13912: GO 14616
// pom := GetBase ( depot ) ;
13914: LD_ADDR_VAR 0 10
13918: PUSH
13919: LD_VAR 0 1
13923: PPUSH
13924: CALL_OW 274
13928: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13929: LD_ADDR_VAR 0 11
13933: PUSH
13934: LD_VAR 0 2
13938: PPUSH
13939: LD_VAR 0 1
13943: PPUSH
13944: CALL_OW 248
13948: PPUSH
13949: CALL_OW 450
13953: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13954: LD_VAR 0 10
13958: PPUSH
13959: LD_INT 1
13961: PPUSH
13962: CALL_OW 275
13966: PUSH
13967: LD_VAR 0 11
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: GREATEREQUAL
13976: PUSH
13977: LD_VAR 0 10
13981: PPUSH
13982: LD_INT 2
13984: PPUSH
13985: CALL_OW 275
13989: PUSH
13990: LD_VAR 0 11
13994: PUSH
13995: LD_INT 2
13997: ARRAY
13998: GREATEREQUAL
13999: AND
14000: PUSH
14001: LD_VAR 0 10
14005: PPUSH
14006: LD_INT 3
14008: PPUSH
14009: CALL_OW 275
14013: PUSH
14014: LD_VAR 0 11
14018: PUSH
14019: LD_INT 3
14021: ARRAY
14022: GREATEREQUAL
14023: AND
14024: NOT
14025: IFFALSE 14029
// exit ;
14027: GO 14616
// if GetBType ( depot ) = b_depot then
14029: LD_VAR 0 1
14033: PPUSH
14034: CALL_OW 266
14038: PUSH
14039: LD_INT 0
14041: EQUAL
14042: IFFALSE 14054
// dist := 28 else
14044: LD_ADDR_VAR 0 14
14048: PUSH
14049: LD_INT 28
14051: ST_TO_ADDR
14052: GO 14062
// dist := 36 ;
14054: LD_ADDR_VAR 0 14
14058: PUSH
14059: LD_INT 36
14061: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14062: LD_VAR 0 1
14066: PPUSH
14067: LD_VAR 0 3
14071: PPUSH
14072: LD_VAR 0 4
14076: PPUSH
14077: CALL_OW 297
14081: PUSH
14082: LD_VAR 0 14
14086: GREATER
14087: IFFALSE 14091
// exit ;
14089: GO 14616
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14091: LD_ADDR_VAR 0 12
14095: PUSH
14096: LD_VAR 0 2
14100: PPUSH
14101: LD_VAR 0 3
14105: PPUSH
14106: LD_VAR 0 4
14110: PPUSH
14111: LD_VAR 0 5
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 248
14125: PPUSH
14126: LD_INT 0
14128: PPUSH
14129: CALL 14621 0 6
14133: ST_TO_ADDR
// if not hexes then
14134: LD_VAR 0 12
14138: NOT
14139: IFFALSE 14143
// exit ;
14141: GO 14616
// hex := GetHexInfo ( x , y ) ;
14143: LD_ADDR_VAR 0 15
14147: PUSH
14148: LD_VAR 0 3
14152: PPUSH
14153: LD_VAR 0 4
14157: PPUSH
14158: CALL_OW 546
14162: ST_TO_ADDR
// if hex [ 1 ] then
14163: LD_VAR 0 15
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: IFFALSE 14175
// exit ;
14173: GO 14616
// height := hex [ 2 ] ;
14175: LD_ADDR_VAR 0 13
14179: PUSH
14180: LD_VAR 0 15
14184: PUSH
14185: LD_INT 2
14187: ARRAY
14188: ST_TO_ADDR
// for i = 1 to hexes do
14189: LD_ADDR_VAR 0 7
14193: PUSH
14194: DOUBLE
14195: LD_INT 1
14197: DEC
14198: ST_TO_ADDR
14199: LD_VAR 0 12
14203: PUSH
14204: FOR_TO
14205: IFFALSE 14535
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14207: LD_VAR 0 12
14211: PUSH
14212: LD_VAR 0 7
14216: ARRAY
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PPUSH
14222: LD_VAR 0 12
14226: PUSH
14227: LD_VAR 0 7
14231: ARRAY
14232: PUSH
14233: LD_INT 2
14235: ARRAY
14236: PPUSH
14237: CALL_OW 488
14241: NOT
14242: PUSH
14243: LD_VAR 0 12
14247: PUSH
14248: LD_VAR 0 7
14252: ARRAY
14253: PUSH
14254: LD_INT 1
14256: ARRAY
14257: PPUSH
14258: LD_VAR 0 12
14262: PUSH
14263: LD_VAR 0 7
14267: ARRAY
14268: PUSH
14269: LD_INT 2
14271: ARRAY
14272: PPUSH
14273: CALL_OW 428
14277: PUSH
14278: LD_INT 0
14280: GREATER
14281: OR
14282: PUSH
14283: LD_VAR 0 12
14287: PUSH
14288: LD_VAR 0 7
14292: ARRAY
14293: PUSH
14294: LD_INT 1
14296: ARRAY
14297: PPUSH
14298: LD_VAR 0 12
14302: PUSH
14303: LD_VAR 0 7
14307: ARRAY
14308: PUSH
14309: LD_INT 2
14311: ARRAY
14312: PPUSH
14313: CALL_OW 351
14317: OR
14318: IFFALSE 14324
// exit ;
14320: POP
14321: POP
14322: GO 14616
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14324: LD_ADDR_VAR 0 8
14328: PUSH
14329: LD_VAR 0 12
14333: PUSH
14334: LD_VAR 0 7
14338: ARRAY
14339: PUSH
14340: LD_INT 1
14342: ARRAY
14343: PPUSH
14344: LD_VAR 0 12
14348: PUSH
14349: LD_VAR 0 7
14353: ARRAY
14354: PUSH
14355: LD_INT 2
14357: ARRAY
14358: PPUSH
14359: CALL_OW 546
14363: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14364: LD_VAR 0 8
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PUSH
14373: LD_VAR 0 8
14377: PUSH
14378: LD_INT 2
14380: ARRAY
14381: PUSH
14382: LD_VAR 0 13
14386: PUSH
14387: LD_INT 2
14389: PLUS
14390: GREATER
14391: OR
14392: PUSH
14393: LD_VAR 0 8
14397: PUSH
14398: LD_INT 2
14400: ARRAY
14401: PUSH
14402: LD_VAR 0 13
14406: PUSH
14407: LD_INT 2
14409: MINUS
14410: LESS
14411: OR
14412: PUSH
14413: LD_VAR 0 8
14417: PUSH
14418: LD_INT 3
14420: ARRAY
14421: PUSH
14422: LD_INT 0
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: LD_INT 9
14430: PUSH
14431: LD_INT 10
14433: PUSH
14434: LD_INT 11
14436: PUSH
14437: LD_INT 12
14439: PUSH
14440: LD_INT 13
14442: PUSH
14443: LD_INT 16
14445: PUSH
14446: LD_INT 17
14448: PUSH
14449: LD_INT 18
14451: PUSH
14452: LD_INT 19
14454: PUSH
14455: LD_INT 20
14457: PUSH
14458: LD_INT 21
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: IN
14476: NOT
14477: OR
14478: PUSH
14479: LD_VAR 0 8
14483: PUSH
14484: LD_INT 5
14486: ARRAY
14487: NOT
14488: OR
14489: PUSH
14490: LD_VAR 0 8
14494: PUSH
14495: LD_INT 6
14497: ARRAY
14498: PUSH
14499: LD_INT 1
14501: PUSH
14502: LD_INT 2
14504: PUSH
14505: LD_INT 7
14507: PUSH
14508: LD_INT 9
14510: PUSH
14511: LD_INT 10
14513: PUSH
14514: LD_INT 11
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: IN
14525: NOT
14526: OR
14527: IFFALSE 14533
// exit ;
14529: POP
14530: POP
14531: GO 14616
// end ;
14533: GO 14204
14535: POP
14536: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14537: LD_VAR 0 9
14541: PPUSH
14542: LD_VAR 0 3
14546: PPUSH
14547: LD_VAR 0 4
14551: PPUSH
14552: LD_INT 20
14554: PPUSH
14555: CALL 6568 0 4
14559: PUSH
14560: LD_INT 4
14562: ARRAY
14563: IFFALSE 14567
// exit ;
14565: GO 14616
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14567: LD_VAR 0 2
14571: PUSH
14572: LD_INT 29
14574: PUSH
14575: LD_INT 30
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: IN
14582: PUSH
14583: LD_VAR 0 3
14587: PPUSH
14588: LD_VAR 0 4
14592: PPUSH
14593: LD_VAR 0 9
14597: PPUSH
14598: CALL_OW 440
14602: NOT
14603: AND
14604: IFFALSE 14608
// exit ;
14606: GO 14616
// result := true ;
14608: LD_ADDR_VAR 0 6
14612: PUSH
14613: LD_INT 1
14615: ST_TO_ADDR
// end ;
14616: LD_VAR 0 6
14620: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14621: LD_INT 0
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
14639: PPUSH
14640: PPUSH
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
14648: PPUSH
14649: PPUSH
14650: PPUSH
14651: PPUSH
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
14667: PPUSH
14668: PPUSH
14669: PPUSH
14670: PPUSH
14671: PPUSH
14672: PPUSH
14673: PPUSH
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
14680: PPUSH
// result = [ ] ;
14681: LD_ADDR_VAR 0 7
14685: PUSH
14686: EMPTY
14687: ST_TO_ADDR
// temp_list = [ ] ;
14688: LD_ADDR_VAR 0 9
14692: PUSH
14693: EMPTY
14694: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14695: LD_VAR 0 4
14699: PUSH
14700: LD_INT 0
14702: PUSH
14703: LD_INT 1
14705: PUSH
14706: LD_INT 2
14708: PUSH
14709: LD_INT 3
14711: PUSH
14712: LD_INT 4
14714: PUSH
14715: LD_INT 5
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: IN
14726: NOT
14727: PUSH
14728: LD_VAR 0 1
14732: PUSH
14733: LD_INT 0
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: IN
14743: PUSH
14744: LD_VAR 0 5
14748: PUSH
14749: LD_INT 1
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: LD_INT 3
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: IN
14763: NOT
14764: AND
14765: OR
14766: IFFALSE 14770
// exit ;
14768: GO 33161
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14770: LD_VAR 0 1
14774: PUSH
14775: LD_INT 6
14777: PUSH
14778: LD_INT 7
14780: PUSH
14781: LD_INT 8
14783: PUSH
14784: LD_INT 13
14786: PUSH
14787: LD_INT 12
14789: PUSH
14790: LD_INT 15
14792: PUSH
14793: LD_INT 11
14795: PUSH
14796: LD_INT 14
14798: PUSH
14799: LD_INT 10
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: IN
14813: IFFALSE 14823
// btype = b_lab ;
14815: LD_ADDR_VAR 0 1
14819: PUSH
14820: LD_INT 6
14822: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14823: LD_VAR 0 6
14827: PUSH
14828: LD_INT 0
14830: PUSH
14831: LD_INT 1
14833: PUSH
14834: LD_INT 2
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: IN
14842: NOT
14843: PUSH
14844: LD_VAR 0 1
14848: PUSH
14849: LD_INT 0
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: LD_INT 6
14863: PUSH
14864: LD_INT 36
14866: PUSH
14867: LD_INT 4
14869: PUSH
14870: LD_INT 5
14872: PUSH
14873: LD_INT 31
14875: PUSH
14876: LD_INT 32
14878: PUSH
14879: LD_INT 33
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: IN
14895: NOT
14896: PUSH
14897: LD_VAR 0 6
14901: PUSH
14902: LD_INT 1
14904: EQUAL
14905: AND
14906: OR
14907: PUSH
14908: LD_VAR 0 1
14912: PUSH
14913: LD_INT 2
14915: PUSH
14916: LD_INT 3
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: IN
14923: NOT
14924: PUSH
14925: LD_VAR 0 6
14929: PUSH
14930: LD_INT 2
14932: EQUAL
14933: AND
14934: OR
14935: IFFALSE 14945
// mode = 0 ;
14937: LD_ADDR_VAR 0 6
14941: PUSH
14942: LD_INT 0
14944: ST_TO_ADDR
// case mode of 0 :
14945: LD_VAR 0 6
14949: PUSH
14950: LD_INT 0
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 26411
14958: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14959: LD_ADDR_VAR 0 11
14963: PUSH
14964: LD_INT 0
14966: PUSH
14967: LD_INT 0
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 0
14976: PUSH
14977: LD_INT 1
14979: NEG
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: LD_INT 0
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: LD_INT 1
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 0
15007: PUSH
15008: LD_INT 1
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: LD_INT 0
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 1
15028: NEG
15029: PUSH
15030: LD_INT 1
15032: NEG
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 1
15040: NEG
15041: PUSH
15042: LD_INT 2
15044: NEG
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 0
15052: PUSH
15053: LD_INT 2
15055: NEG
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: LD_INT 1
15066: NEG
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 1
15074: PUSH
15075: LD_INT 2
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 0
15084: PUSH
15085: LD_INT 2
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 1
15094: NEG
15095: PUSH
15096: LD_INT 1
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: LD_INT 3
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 0
15115: PUSH
15116: LD_INT 3
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 1
15125: NEG
15126: PUSH
15127: LD_INT 2
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15152: LD_ADDR_VAR 0 12
15156: PUSH
15157: LD_INT 0
15159: PUSH
15160: LD_INT 0
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: LD_INT 1
15172: NEG
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 1
15180: PUSH
15181: LD_INT 0
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 1
15190: PUSH
15191: LD_INT 1
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 1
15210: NEG
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 1
15221: NEG
15222: PUSH
15223: LD_INT 1
15225: NEG
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 1
15233: PUSH
15234: LD_INT 1
15236: NEG
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 0
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 2
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 1
15264: NEG
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 2
15275: NEG
15276: PUSH
15277: LD_INT 0
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 2
15286: NEG
15287: PUSH
15288: LD_INT 1
15290: NEG
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 2
15298: NEG
15299: PUSH
15300: LD_INT 1
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 3
15309: NEG
15310: PUSH
15311: LD_INT 0
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 3
15320: NEG
15321: PUSH
15322: LD_INT 1
15324: NEG
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15348: LD_ADDR_VAR 0 13
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: LD_INT 0
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 0
15365: PUSH
15366: LD_INT 1
15368: NEG
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: LD_INT 0
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 0
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 1
15406: NEG
15407: PUSH
15408: LD_INT 0
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 1
15417: NEG
15418: PUSH
15419: LD_INT 1
15421: NEG
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 1
15429: NEG
15430: PUSH
15431: LD_INT 2
15433: NEG
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: LD_INT 1
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: LD_INT 2
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: LD_INT 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 2
15471: NEG
15472: PUSH
15473: LD_INT 1
15475: NEG
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 2
15483: NEG
15484: PUSH
15485: LD_INT 2
15487: NEG
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 2
15495: NEG
15496: PUSH
15497: LD_INT 3
15499: NEG
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 3
15507: NEG
15508: PUSH
15509: LD_INT 2
15511: NEG
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 3
15519: NEG
15520: PUSH
15521: LD_INT 3
15523: NEG
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15547: LD_ADDR_VAR 0 14
15551: PUSH
15552: LD_INT 0
15554: PUSH
15555: LD_INT 0
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 0
15564: PUSH
15565: LD_INT 1
15567: NEG
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: LD_INT 1
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 1
15605: NEG
15606: PUSH
15607: LD_INT 0
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 1
15616: NEG
15617: PUSH
15618: LD_INT 1
15620: NEG
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 1
15628: NEG
15629: PUSH
15630: LD_INT 2
15632: NEG
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 0
15640: PUSH
15641: LD_INT 2
15643: NEG
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: LD_INT 1
15654: NEG
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 0
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 1
15682: NEG
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 1
15693: NEG
15694: PUSH
15695: LD_INT 3
15697: NEG
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 0
15705: PUSH
15706: LD_INT 3
15708: NEG
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: LD_INT 2
15719: NEG
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15743: LD_ADDR_VAR 0 15
15747: PUSH
15748: LD_INT 0
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: LD_INT 1
15763: NEG
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 1
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 0
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 1
15801: NEG
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 1
15812: NEG
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: LD_INT 1
15827: NEG
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 2
15835: PUSH
15836: LD_INT 0
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 1
15855: NEG
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 2
15866: NEG
15867: PUSH
15868: LD_INT 0
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 2
15877: NEG
15878: PUSH
15879: LD_INT 1
15881: NEG
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: LD_INT 1
15892: NEG
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 3
15900: PUSH
15901: LD_INT 0
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15936: LD_ADDR_VAR 0 16
15940: PUSH
15941: LD_INT 0
15943: PUSH
15944: LD_INT 0
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: LD_INT 1
15956: NEG
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: LD_INT 0
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 1
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 1
15994: NEG
15995: PUSH
15996: LD_INT 0
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 1
16005: NEG
16006: PUSH
16007: LD_INT 1
16009: NEG
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: NEG
16018: PUSH
16019: LD_INT 2
16021: NEG
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 2
16029: PUSH
16030: LD_INT 1
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: LD_INT 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 2
16059: NEG
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: NEG
16072: PUSH
16073: LD_INT 2
16075: NEG
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 3
16083: PUSH
16084: LD_INT 2
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 3
16093: PUSH
16094: LD_INT 3
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: LD_INT 3
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16129: LD_ADDR_VAR 0 17
16133: PUSH
16134: LD_INT 0
16136: PUSH
16137: LD_INT 0
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: LD_INT 1
16149: NEG
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 1
16187: NEG
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 1
16198: NEG
16199: PUSH
16200: LD_INT 1
16202: NEG
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: NEG
16211: PUSH
16212: LD_INT 2
16214: NEG
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: LD_INT 2
16225: NEG
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: PUSH
16234: LD_INT 1
16236: NEG
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: LD_INT 0
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: LD_INT 1
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 2
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: LD_INT 2
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 0
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 1
16294: NEG
16295: PUSH
16296: LD_INT 1
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 2
16305: NEG
16306: PUSH
16307: LD_INT 0
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 2
16316: NEG
16317: PUSH
16318: LD_INT 1
16320: NEG
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 2
16328: NEG
16329: PUSH
16330: LD_INT 2
16332: NEG
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16359: LD_ADDR_VAR 0 18
16363: PUSH
16364: LD_INT 0
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: LD_INT 1
16379: NEG
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: LD_INT 1
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: LD_INT 0
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 1
16428: NEG
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 1
16440: NEG
16441: PUSH
16442: LD_INT 2
16444: NEG
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 0
16452: PUSH
16453: LD_INT 2
16455: NEG
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 1
16463: PUSH
16464: LD_INT 1
16466: NEG
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: LD_INT 0
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: LD_INT 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 0
16514: PUSH
16515: LD_INT 2
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 1
16524: NEG
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 2
16535: NEG
16536: PUSH
16537: LD_INT 0
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 2
16546: NEG
16547: PUSH
16548: LD_INT 1
16550: NEG
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 2
16558: NEG
16559: PUSH
16560: LD_INT 2
16562: NEG
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16589: LD_ADDR_VAR 0 19
16593: PUSH
16594: LD_INT 0
16596: PUSH
16597: LD_INT 0
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 0
16606: PUSH
16607: LD_INT 1
16609: NEG
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 1
16647: NEG
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: NEG
16659: PUSH
16660: LD_INT 1
16662: NEG
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 1
16670: NEG
16671: PUSH
16672: LD_INT 2
16674: NEG
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 0
16682: PUSH
16683: LD_INT 2
16685: NEG
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 1
16693: PUSH
16694: LD_INT 1
16696: NEG
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 2
16704: PUSH
16705: LD_INT 0
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 2
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 2
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: LD_INT 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 1
16754: NEG
16755: PUSH
16756: LD_INT 1
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 2
16765: NEG
16766: PUSH
16767: LD_INT 0
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 2
16776: NEG
16777: PUSH
16778: LD_INT 1
16780: NEG
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 2
16788: NEG
16789: PUSH
16790: LD_INT 2
16792: NEG
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16819: LD_ADDR_VAR 0 20
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: LD_INT 0
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 0
16836: PUSH
16837: LD_INT 1
16839: NEG
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 0
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: NEG
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 1
16888: NEG
16889: PUSH
16890: LD_INT 1
16892: NEG
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 1
16900: NEG
16901: PUSH
16902: LD_INT 2
16904: NEG
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 0
16912: PUSH
16913: LD_INT 2
16915: NEG
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 1
16926: NEG
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 2
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 2
16954: PUSH
16955: LD_INT 2
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 1
16984: NEG
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 2
16995: NEG
16996: PUSH
16997: LD_INT 0
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: NEG
17007: PUSH
17008: LD_INT 1
17010: NEG
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 2
17018: NEG
17019: PUSH
17020: LD_INT 2
17022: NEG
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17049: LD_ADDR_VAR 0 21
17053: PUSH
17054: LD_INT 0
17056: PUSH
17057: LD_INT 0
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 0
17066: PUSH
17067: LD_INT 1
17069: NEG
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 1
17107: NEG
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 1
17118: NEG
17119: PUSH
17120: LD_INT 1
17122: NEG
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: NEG
17131: PUSH
17132: LD_INT 2
17134: NEG
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: LD_INT 2
17145: NEG
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: LD_INT 1
17156: NEG
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 2
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: LD_INT 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 2
17225: NEG
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 2
17236: NEG
17237: PUSH
17238: LD_INT 1
17240: NEG
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 2
17248: NEG
17249: PUSH
17250: LD_INT 2
17252: NEG
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17279: LD_ADDR_VAR 0 22
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 0
17296: PUSH
17297: LD_INT 1
17299: NEG
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 1
17307: PUSH
17308: LD_INT 0
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 1
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: LD_INT 1
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 1
17337: NEG
17338: PUSH
17339: LD_INT 0
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 1
17348: NEG
17349: PUSH
17350: LD_INT 1
17352: NEG
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 1
17360: NEG
17361: PUSH
17362: LD_INT 2
17364: NEG
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: LD_INT 2
17375: NEG
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: LD_INT 1
17386: NEG
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 2
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 2
17414: PUSH
17415: LD_INT 2
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 2
17466: NEG
17467: PUSH
17468: LD_INT 1
17470: NEG
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 2
17478: NEG
17479: PUSH
17480: LD_INT 2
17482: NEG
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17509: LD_ADDR_VAR 0 23
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 0
17526: PUSH
17527: LD_INT 1
17529: NEG
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: LD_INT 0
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 1
17547: PUSH
17548: LD_INT 1
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: LD_INT 1
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 1
17567: NEG
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 1
17578: NEG
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 1
17590: NEG
17591: PUSH
17592: LD_INT 2
17594: NEG
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 0
17602: PUSH
17603: LD_INT 2
17605: NEG
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: LD_INT 1
17616: NEG
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 2
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 2
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: NEG
17675: PUSH
17676: LD_INT 1
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 2
17696: NEG
17697: PUSH
17698: LD_INT 1
17700: NEG
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 2
17708: NEG
17709: PUSH
17710: LD_INT 2
17712: NEG
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 2
17720: NEG
17721: PUSH
17722: LD_INT 3
17724: NEG
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: LD_INT 3
17736: NEG
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: LD_INT 2
17747: NEG
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 2
17755: PUSH
17756: LD_INT 1
17758: NEG
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17789: LD_ADDR_VAR 0 24
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: LD_INT 1
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 1
17847: NEG
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 1
17858: NEG
17859: PUSH
17860: LD_INT 1
17862: NEG
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: NEG
17871: PUSH
17872: LD_INT 2
17874: NEG
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: LD_INT 2
17885: NEG
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 1
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: LD_INT 2
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 1
17954: NEG
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 2
17965: NEG
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 2
17976: NEG
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 2
17988: NEG
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 3
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 3
18032: PUSH
18033: LD_INT 2
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18065: LD_ADDR_VAR 0 25
18069: PUSH
18070: LD_INT 0
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 1
18134: NEG
18135: PUSH
18136: LD_INT 1
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: LD_INT 2
18150: NEG
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 0
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 0
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 2
18241: NEG
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: NEG
18253: PUSH
18254: LD_INT 1
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 2
18264: NEG
18265: PUSH
18266: LD_INT 2
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 3
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 3
18286: PUSH
18287: LD_INT 2
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: LD_INT 3
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: LD_INT 3
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18339: LD_ADDR_VAR 0 26
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 1
18420: NEG
18421: PUSH
18422: LD_INT 2
18424: NEG
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 1
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 1
18504: NEG
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 2
18515: NEG
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 2
18538: NEG
18539: PUSH
18540: LD_INT 2
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: LD_INT 3
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: LD_INT 3
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: NEG
18571: PUSH
18572: LD_INT 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18615: LD_ADDR_VAR 0 27
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: LD_INT 1
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 1
18684: NEG
18685: PUSH
18686: LD_INT 1
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: LD_INT 2
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 2
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: LD_INT 2
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 1
18780: NEG
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 2
18791: NEG
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 2
18802: NEG
18803: PUSH
18804: LD_INT 1
18806: NEG
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: NEG
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 2
18837: NEG
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 3
18848: NEG
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 3
18860: NEG
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18895: LD_ADDR_VAR 0 28
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: LD_INT 2
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: NEG
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: LD_INT 1
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 2
19106: NEG
19107: PUSH
19108: LD_INT 3
19110: NEG
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: NEG
19119: PUSH
19120: LD_INT 3
19122: NEG
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 3
19130: NEG
19131: PUSH
19132: LD_INT 1
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 3
19142: NEG
19143: PUSH
19144: LD_INT 2
19146: NEG
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19177: LD_ADDR_VAR 0 29
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: LD_INT 1
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: NEG
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 0
19270: PUSH
19271: LD_INT 2
19273: NEG
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 2
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: LD_INT 2
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 2
19367: NEG
19368: PUSH
19369: LD_INT 3
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: LD_INT 1
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: LD_INT 3
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 1
19410: NEG
19411: PUSH
19412: LD_INT 2
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 3
19421: NEG
19422: PUSH
19423: LD_INT 2
19425: NEG
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19456: LD_ADDR_VAR 0 30
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: LD_INT 2
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: LD_INT 1
19563: NEG
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 0
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: LD_INT 2
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: NEG
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 2
19633: NEG
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: LD_INT 3
19649: NEG
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 1
19657: PUSH
19658: LD_INT 2
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 3
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 2
19678: PUSH
19679: LD_INT 3
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: NEG
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 3
19699: NEG
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19734: LD_ADDR_VAR 0 31
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 1
19803: NEG
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: NEG
19816: PUSH
19817: LD_INT 2
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: LD_INT 1
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: LD_INT 2
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: NEG
19924: PUSH
19925: LD_INT 3
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 3
19977: NEG
19978: PUSH
19979: LD_INT 2
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20012: LD_ADDR_VAR 0 32
20016: PUSH
20017: LD_INT 0
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: LD_INT 2
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 0
20105: PUSH
20106: LD_INT 2
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: LD_INT 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: LD_INT 2
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 1
20167: NEG
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 2
20178: NEG
20179: PUSH
20180: LD_INT 0
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: LD_INT 3
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: LD_INT 2
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 3
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 3
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 2
20244: NEG
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 3
20255: NEG
20256: PUSH
20257: LD_INT 1
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20290: LD_ADDR_VAR 0 33
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 0
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: NEG
20372: PUSH
20373: LD_INT 2
20375: NEG
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 2
20456: NEG
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: LD_INT 2
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: LD_INT 3
20484: NEG
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: LD_INT 1
20495: NEG
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 3
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: LD_INT 3
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 3
20534: NEG
20535: PUSH
20536: LD_INT 2
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20569: LD_ADDR_VAR 0 34
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: LD_INT 1
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: LD_INT 2
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 2
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: LD_INT 3
20764: NEG
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: LD_INT 2
20775: NEG
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 3
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 3
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 3
20814: NEG
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20849: LD_ADDR_VAR 0 35
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: NEG
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 2
20940: NEG
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20961: LD_ADDR_VAR 0 36
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: LD_INT 1
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21073: LD_ADDR_VAR 0 37
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21185: LD_ADDR_VAR 0 38
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21297: LD_ADDR_VAR 0 39
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: LD_INT 1
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21409: LD_ADDR_VAR 0 40
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21521: LD_ADDR_VAR 0 41
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 0
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 0
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 1
21579: NEG
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: LD_INT 2
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 2
21676: NEG
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 2
21687: NEG
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: NEG
21700: PUSH
21701: LD_INT 2
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: LD_INT 3
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 3
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 3
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 3
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 3
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: NEG
21785: PUSH
21786: LD_INT 1
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 3
21795: NEG
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 3
21806: NEG
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 3
21818: NEG
21819: PUSH
21820: LD_INT 2
21822: NEG
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 3
21830: NEG
21831: PUSH
21832: LD_INT 3
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21871: LD_ADDR_VAR 0 42
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 0
21888: PUSH
21889: LD_INT 1
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: LD_INT 0
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: LD_INT 1
21944: NEG
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: LD_INT 2
21956: NEG
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: LD_INT 2
21967: NEG
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: LD_INT 1
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 2
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 2
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: LD_INT 2
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: LD_INT 2
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: NEG
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: NEG
22038: PUSH
22039: LD_INT 1
22041: NEG
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 2
22049: NEG
22050: PUSH
22051: LD_INT 2
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 2
22061: NEG
22062: PUSH
22063: LD_INT 3
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PUSH
22075: LD_INT 3
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 3
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 2
22099: NEG
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 3
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 3
22117: PUSH
22118: LD_INT 3
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 3
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 3
22168: NEG
22169: PUSH
22170: LD_INT 2
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 3
22180: NEG
22181: PUSH
22182: LD_INT 3
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22221: LD_ADDR_VAR 0 43
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: LD_INT 1
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: LD_INT 2
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: LD_INT 3
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: LD_INT 3
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: LD_INT 2
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: LD_INT 1
22447: NEG
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 3
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: LD_INT 3
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: LD_INT 3
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: NEG
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 3
22517: NEG
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 3
22528: NEG
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22569: LD_ADDR_VAR 0 44
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: LD_INT 1
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: PUSH
22663: LD_INT 1
22665: NEG
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: LD_INT 2
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: LD_INT 0
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 2
22735: NEG
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: LD_INT 2
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 2
22759: NEG
22760: PUSH
22761: LD_INT 3
22763: NEG
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 3
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 3
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: PUSH
22823: LD_INT 3
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 3
22843: NEG
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 3
22854: NEG
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 3
22866: NEG
22867: PUSH
22868: LD_INT 2
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 3
22878: NEG
22879: PUSH
22880: LD_INT 3
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22919: LD_ADDR_VAR 0 45
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: LD_INT 2
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 2
23097: NEG
23098: PUSH
23099: LD_INT 2
23101: NEG
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: LD_INT 3
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: LD_INT 3
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 3
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 3
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 3
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: LD_INT 3
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: LD_INT 3
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: NEG
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 3
23216: NEG
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 3
23228: NEG
23229: PUSH
23230: LD_INT 3
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23269: LD_ADDR_VAR 0 46
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: LD_INT 2
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: NEG
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: LD_INT 3
23462: NEG
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: LD_INT 3
23473: NEG
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: LD_INT 2
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 3
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 3
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 2
23554: NEG
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 3
23565: NEG
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 3
23576: NEG
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23617: LD_ADDR_VAR 0 47
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: LD_INT 1
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: LD_INT 2
23702: NEG
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 2
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: LD_INT 1
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: NEG
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: NEG
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23768: LD_ADDR_VAR 0 48
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: LD_INT 2
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: LD_INT 1
23875: NEG
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23915: LD_ADDR_VAR 0 49
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24059: LD_ADDR_VAR 0 50
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: LD_INT 2
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24203: LD_ADDR_VAR 0 51
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: NEG
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24350: LD_ADDR_VAR 0 52
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 2
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: LD_INT 2
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24501: LD_ADDR_VAR 0 53
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: LD_INT 2
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 1
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 2
24700: NEG
24701: PUSH
24702: LD_INT 2
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24731: LD_ADDR_VAR 0 54
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: NEG
24813: PUSH
24814: LD_INT 2
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 2
24827: NEG
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 2
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 2
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: NEG
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: LD_INT 2
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24961: LD_ADDR_VAR 0 55
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 2
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: LD_INT 2
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 2
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: LD_INT 0
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 2
25148: NEG
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 2
25160: NEG
25161: PUSH
25162: LD_INT 2
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25191: LD_ADDR_VAR 0 56
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 1
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 2
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: NEG
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: NEG
25391: PUSH
25392: LD_INT 2
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25421: LD_ADDR_VAR 0 57
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 2
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: NEG
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: NEG
25621: PUSH
25622: LD_INT 2
25624: NEG
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25651: LD_ADDR_VAR 0 58
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: NEG
25839: PUSH
25840: LD_INT 1
25842: NEG
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 2
25850: NEG
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25881: LD_ADDR_VAR 0 59
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 1
25901: NEG
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25969: LD_ADDR_VAR 0 60
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26057: LD_ADDR_VAR 0 61
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: NEG
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26145: LD_ADDR_VAR 0 62
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26233: LD_ADDR_VAR 0 63
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26321: LD_ADDR_VAR 0 64
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: ST_TO_ADDR
// end ; 1 :
26409: GO 32306
26411: LD_INT 1
26413: DOUBLE
26414: EQUAL
26415: IFTRUE 26419
26417: GO 29042
26419: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26420: LD_ADDR_VAR 0 11
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 3
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 3
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26464: LD_ADDR_VAR 0 12
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 3
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26505: LD_ADDR_VAR 0 13
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 3
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26545: LD_ADDR_VAR 0 14
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 3
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: LD_INT 3
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: LIST
26585: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26586: LD_ADDR_VAR 0 15
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 3
26604: NEG
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 3
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: LIST
26629: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26630: LD_ADDR_VAR 0 16
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 3
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 3
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 3
26661: NEG
26662: PUSH
26663: LD_INT 3
26665: NEG
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26676: LD_ADDR_VAR 0 17
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: LD_INT 3
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: LD_INT 3
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: LIST
26719: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26720: LD_ADDR_VAR 0 18
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 3
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 3
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26761: LD_ADDR_VAR 0 19
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 3
26778: PUSH
26779: LD_INT 3
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 3
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26801: LD_ADDR_VAR 0 20
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 3
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26842: LD_ADDR_VAR 0 21
26846: PUSH
26847: LD_INT 2
26849: NEG
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 3
26860: NEG
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 3
26871: NEG
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26886: LD_ADDR_VAR 0 22
26890: PUSH
26891: LD_INT 2
26893: NEG
26894: PUSH
26895: LD_INT 3
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 3
26905: NEG
26906: PUSH
26907: LD_INT 2
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 3
26917: NEG
26918: PUSH
26919: LD_INT 3
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26932: LD_ADDR_VAR 0 23
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: LD_INT 3
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: LD_INT 4
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: LD_INT 3
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26976: LD_ADDR_VAR 0 24
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 3
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 4
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27017: LD_ADDR_VAR 0 25
27021: PUSH
27022: LD_INT 3
27024: PUSH
27025: LD_INT 3
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 4
27034: PUSH
27035: LD_INT 3
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: LD_INT 4
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27057: LD_ADDR_VAR 0 26
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 3
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: LD_INT 4
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27098: LD_ADDR_VAR 0 27
27102: PUSH
27103: LD_INT 3
27105: NEG
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 3
27116: NEG
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 4
27127: NEG
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27142: LD_ADDR_VAR 0 28
27146: PUSH
27147: LD_INT 3
27149: NEG
27150: PUSH
27151: LD_INT 3
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 3
27161: NEG
27162: PUSH
27163: LD_INT 4
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 4
27173: NEG
27174: PUSH
27175: LD_INT 3
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27188: LD_ADDR_VAR 0 29
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 3
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: LD_INT 3
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 2
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: LD_INT 4
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 4
27244: NEG
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: LD_INT 3
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 5
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 5
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: LD_INT 4
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 6
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: LD_INT 6
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 5
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27343: LD_ADDR_VAR 0 30
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 3
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 3
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 4
27392: PUSH
27393: LD_INT 0
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 4
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 4
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 5
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 5
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 5
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 6
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 6
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27486: LD_ADDR_VAR 0 31
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 3
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 3
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 4
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 4
27533: PUSH
27534: LD_INT 4
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 3
27543: PUSH
27544: LD_INT 4
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 5
27553: PUSH
27554: LD_INT 4
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 5
27563: PUSH
27564: LD_INT 5
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: LD_INT 5
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 6
27583: PUSH
27584: LD_INT 5
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 6
27593: PUSH
27594: LD_INT 6
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 5
27603: PUSH
27604: LD_INT 6
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27625: LD_ADDR_VAR 0 32
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 3
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 3
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 4
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 4
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 5
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 5
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 4
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: LD_INT 6
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 6
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: LD_INT 5
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27768: LD_ADDR_VAR 0 33
27772: PUSH
27773: LD_INT 2
27775: NEG
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 3
27786: NEG
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 3
27797: NEG
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 3
27809: NEG
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 4
27820: NEG
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 4
27831: NEG
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 4
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 5
27854: NEG
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 5
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 5
27877: NEG
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 6
27888: NEG
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 6
27899: NEG
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27923: LD_ADDR_VAR 0 34
27927: PUSH
27928: LD_INT 2
27930: NEG
27931: PUSH
27932: LD_INT 3
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 3
27942: NEG
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 3
27954: NEG
27955: PUSH
27956: LD_INT 3
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: NEG
27967: PUSH
27968: LD_INT 4
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 4
27978: NEG
27979: PUSH
27980: LD_INT 3
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 4
27990: NEG
27991: PUSH
27992: LD_INT 4
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 4
28002: NEG
28003: PUSH
28004: LD_INT 5
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 5
28014: NEG
28015: PUSH
28016: LD_INT 4
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 5
28026: NEG
28027: PUSH
28028: LD_INT 5
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 5
28038: NEG
28039: PUSH
28040: LD_INT 6
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 6
28050: NEG
28051: PUSH
28052: LD_INT 5
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 6
28062: NEG
28063: PUSH
28064: LD_INT 6
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28086: LD_ADDR_VAR 0 41
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: LD_INT 3
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28130: LD_ADDR_VAR 0 42
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28171: LD_ADDR_VAR 0 43
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: LD_INT 2
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28211: LD_ADDR_VAR 0 44
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: LD_INT 3
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28252: LD_ADDR_VAR 0 45
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 3
28281: NEG
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28296: LD_ADDR_VAR 0 46
28300: PUSH
28301: LD_INT 2
28303: NEG
28304: PUSH
28305: LD_INT 2
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: LD_INT 3
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 3
28327: NEG
28328: PUSH
28329: LD_INT 2
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28342: LD_ADDR_VAR 0 47
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: LD_INT 3
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 3
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28375: LD_ADDR_VAR 0 48
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28406: LD_ADDR_VAR 0 49
28410: PUSH
28411: LD_INT 3
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 3
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28435: LD_ADDR_VAR 0 50
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28464: LD_ADDR_VAR 0 51
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28495: LD_ADDR_VAR 0 52
28499: PUSH
28500: LD_INT 3
28502: NEG
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 3
28514: NEG
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28528: LD_ADDR_VAR 0 53
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: LD_INT 3
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28572: LD_ADDR_VAR 0 54
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 3
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28613: LD_ADDR_VAR 0 55
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 3
28630: PUSH
28631: LD_INT 3
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: LD_INT 3
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28653: LD_ADDR_VAR 0 56
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 3
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 3
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28694: LD_ADDR_VAR 0 57
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 3
28712: NEG
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 3
28723: NEG
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28738: LD_ADDR_VAR 0 58
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: LD_INT 3
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 3
28757: NEG
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 3
28769: NEG
28770: PUSH
28771: LD_INT 3
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28784: LD_ADDR_VAR 0 59
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: LD_INT 2
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28828: LD_ADDR_VAR 0 60
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 2
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: LIST
28868: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28869: LD_ADDR_VAR 0 61
28873: PUSH
28874: LD_INT 2
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 2
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28909: LD_ADDR_VAR 0 62
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28950: LD_ADDR_VAR 0 63
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28994: LD_ADDR_VAR 0 64
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: LD_INT 2
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// end ; 2 :
29040: GO 32306
29042: LD_INT 2
29044: DOUBLE
29045: EQUAL
29046: IFTRUE 29050
29048: GO 32305
29050: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29051: LD_ADDR_VAR 0 29
29055: PUSH
29056: LD_INT 4
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 4
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 5
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 5
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 4
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 3
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 3
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 3
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 5
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 4
29171: PUSH
29172: LD_INT 3
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 4
29181: PUSH
29182: LD_INT 4
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: LD_INT 4
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 3
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 4
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: LD_INT 4
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: LD_INT 4
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 3
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: LD_INT 4
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: LD_INT 5
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 5
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 4
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: LD_INT 3
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 5
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 3
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 3
29334: NEG
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 3
29345: NEG
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 2
29357: NEG
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 4
29390: NEG
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 4
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 4
29413: NEG
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 4
29436: NEG
29437: PUSH
29438: LD_INT 4
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 4
29448: NEG
29449: PUSH
29450: LD_INT 5
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: LD_INT 4
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 3
29472: NEG
29473: PUSH
29474: LD_INT 3
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 4
29484: NEG
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 5
29496: NEG
29497: PUSH
29498: LD_INT 4
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 5
29508: NEG
29509: PUSH
29510: LD_INT 5
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 3
29520: NEG
29521: PUSH
29522: LD_INT 5
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 5
29532: NEG
29533: PUSH
29534: LD_INT 3
29536: NEG
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29589: LD_ADDR_VAR 0 30
29593: PUSH
29594: LD_INT 4
29596: PUSH
29597: LD_INT 4
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 4
29606: PUSH
29607: LD_INT 3
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 5
29616: PUSH
29617: LD_INT 4
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 5
29626: PUSH
29627: LD_INT 5
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 4
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: LD_INT 4
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 5
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 3
29676: PUSH
29677: LD_INT 5
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 3
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 2
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 3
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: LD_INT 4
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: LD_INT 4
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 2
29758: PUSH
29759: LD_INT 4
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 4
29779: NEG
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 4
29790: NEG
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 3
29802: NEG
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 3
29813: NEG
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 4
29824: NEG
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 5
29835: NEG
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 5
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 5
29858: NEG
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: NEG
29882: PUSH
29883: LD_INT 3
29885: NEG
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 3
29893: NEG
29894: PUSH
29895: LD_INT 4
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: LD_INT 3
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 2
29917: NEG
29918: PUSH
29919: LD_INT 2
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 3
29929: NEG
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 4
29941: NEG
29942: PUSH
29943: LD_INT 3
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 4
29953: NEG
29954: PUSH
29955: LD_INT 4
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: LD_INT 4
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 4
29977: NEG
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: LD_INT 4
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: LD_INT 5
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: LD_INT 4
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 3
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 4
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PUSH
30058: LD_INT 5
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 3
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 2
30079: NEG
30080: PUSH
30081: LD_INT 5
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30136: LD_ADDR_VAR 0 31
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: LD_INT 4
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 4
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 5
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: LD_INT 5
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 4
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: LD_INT 5
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 3
30236: NEG
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 3
30247: NEG
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 4
30292: NEG
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 4
30303: NEG
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 4
30315: NEG
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 4
30338: NEG
30339: PUSH
30340: LD_INT 4
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 4
30350: NEG
30351: PUSH
30352: LD_INT 5
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 3
30362: NEG
30363: PUSH
30364: LD_INT 4
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: NEG
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 4
30386: NEG
30387: PUSH
30388: LD_INT 3
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 5
30398: NEG
30399: PUSH
30400: LD_INT 4
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 5
30410: NEG
30411: PUSH
30412: LD_INT 5
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: LD_INT 5
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 5
30434: NEG
30435: PUSH
30436: LD_INT 3
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: NEG
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: LD_INT 4
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: NEG
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 4
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 4
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 5
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 5
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 4
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 2
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 5
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30686: LD_ADDR_VAR 0 32
30690: PUSH
30691: LD_INT 4
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 4
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 4
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 5
30749: NEG
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 5
30760: NEG
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 5
30772: NEG
30773: PUSH
30774: LD_INT 2
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: LD_INT 4
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: LD_INT 3
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 4
30855: NEG
30856: PUSH
30857: LD_INT 3
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 4
30867: NEG
30868: PUSH
30869: LD_INT 4
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 4
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 4
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: LD_INT 4
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 5
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 3
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: LD_INT 3
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: LD_INT 4
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: LD_INT 5
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 3
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 2
30993: NEG
30994: PUSH
30995: LD_INT 5
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 4
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 4
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 2
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 4
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 4
31098: PUSH
31099: LD_INT 4
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 4
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 5
31128: PUSH
31129: LD_INT 5
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 4
31138: PUSH
31139: LD_INT 5
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: LD_INT 4
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: LD_INT 5
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31233: LD_ADDR_VAR 0 33
31237: PUSH
31238: LD_INT 4
31240: NEG
31241: PUSH
31242: LD_INT 4
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 4
31252: NEG
31253: PUSH
31254: LD_INT 5
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: NEG
31265: PUSH
31266: LD_INT 4
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: LD_INT 3
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 4
31288: NEG
31289: PUSH
31290: LD_INT 3
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 5
31300: NEG
31301: PUSH
31302: LD_INT 4
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 5
31312: NEG
31313: PUSH
31314: LD_INT 5
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 3
31324: NEG
31325: PUSH
31326: LD_INT 5
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 5
31336: NEG
31337: PUSH
31338: LD_INT 3
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 4
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 3
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 2
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: LD_INT 4
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 2
31438: NEG
31439: PUSH
31440: LD_INT 4
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 4
31450: PUSH
31451: LD_INT 0
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 4
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 5
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 5
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 4
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 5
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 4
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: LD_INT 4
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 4
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: LD_INT 4
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 4
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: LD_INT 4
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 5
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 5
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 5
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: LD_INT 3
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31771: LD_ADDR_VAR 0 34
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 4
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 5
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 4
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 3
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 3
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 4
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 5
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: LD_INT 3
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: LD_INT 5
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 4
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 4
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 4
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 4
31973: PUSH
31974: LD_INT 4
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 4
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 5
31993: PUSH
31994: LD_INT 4
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 5
32003: PUSH
32004: LD_INT 5
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 4
32013: PUSH
32014: LD_INT 5
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: LD_INT 4
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 3
32033: PUSH
32034: LD_INT 3
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 5
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: LD_INT 5
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 4
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 2
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 4
32156: NEG
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 4
32167: NEG
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 3
32190: NEG
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 4
32201: NEG
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 5
32212: NEG
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 5
32223: NEG
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 5
32235: NEG
32236: PUSH
32237: LD_INT 2
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 3
32247: NEG
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: ST_TO_ADDR
// end ; end ;
32303: GO 32306
32305: POP
// case btype of b_depot , b_warehouse :
32306: LD_VAR 0 1
32310: PUSH
32311: LD_INT 0
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32325
32317: LD_INT 1
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32325
32323: GO 32526
32325: POP
// case nation of nation_american :
32326: LD_VAR 0 5
32330: PUSH
32331: LD_INT 1
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32339
32337: GO 32395
32339: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32340: LD_ADDR_VAR 0 9
32344: PUSH
32345: LD_VAR 0 11
32349: PUSH
32350: LD_VAR 0 12
32354: PUSH
32355: LD_VAR 0 13
32359: PUSH
32360: LD_VAR 0 14
32364: PUSH
32365: LD_VAR 0 15
32369: PUSH
32370: LD_VAR 0 16
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: PUSH
32383: LD_VAR 0 4
32387: PUSH
32388: LD_INT 1
32390: PLUS
32391: ARRAY
32392: ST_TO_ADDR
32393: GO 32524
32395: LD_INT 2
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32459
32403: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32404: LD_ADDR_VAR 0 9
32408: PUSH
32409: LD_VAR 0 17
32413: PUSH
32414: LD_VAR 0 18
32418: PUSH
32419: LD_VAR 0 19
32423: PUSH
32424: LD_VAR 0 20
32428: PUSH
32429: LD_VAR 0 21
32433: PUSH
32434: LD_VAR 0 22
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: PUSH
32447: LD_VAR 0 4
32451: PUSH
32452: LD_INT 1
32454: PLUS
32455: ARRAY
32456: ST_TO_ADDR
32457: GO 32524
32459: LD_INT 3
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32523
32467: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32468: LD_ADDR_VAR 0 9
32472: PUSH
32473: LD_VAR 0 23
32477: PUSH
32478: LD_VAR 0 24
32482: PUSH
32483: LD_VAR 0 25
32487: PUSH
32488: LD_VAR 0 26
32492: PUSH
32493: LD_VAR 0 27
32497: PUSH
32498: LD_VAR 0 28
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: PUSH
32511: LD_VAR 0 4
32515: PUSH
32516: LD_INT 1
32518: PLUS
32519: ARRAY
32520: ST_TO_ADDR
32521: GO 32524
32523: POP
32524: GO 33079
32526: LD_INT 2
32528: DOUBLE
32529: EQUAL
32530: IFTRUE 32540
32532: LD_INT 3
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32596
32540: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32541: LD_ADDR_VAR 0 9
32545: PUSH
32546: LD_VAR 0 29
32550: PUSH
32551: LD_VAR 0 30
32555: PUSH
32556: LD_VAR 0 31
32560: PUSH
32561: LD_VAR 0 32
32565: PUSH
32566: LD_VAR 0 33
32570: PUSH
32571: LD_VAR 0 34
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: PUSH
32584: LD_VAR 0 4
32588: PUSH
32589: LD_INT 1
32591: PLUS
32592: ARRAY
32593: ST_TO_ADDR
32594: GO 33079
32596: LD_INT 16
32598: DOUBLE
32599: EQUAL
32600: IFTRUE 32658
32602: LD_INT 17
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32658
32608: LD_INT 18
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32658
32614: LD_INT 19
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32658
32620: LD_INT 22
32622: DOUBLE
32623: EQUAL
32624: IFTRUE 32658
32626: LD_INT 20
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32658
32632: LD_INT 21
32634: DOUBLE
32635: EQUAL
32636: IFTRUE 32658
32638: LD_INT 23
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32658
32644: LD_INT 24
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32658
32650: LD_INT 25
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32714
32658: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32659: LD_ADDR_VAR 0 9
32663: PUSH
32664: LD_VAR 0 35
32668: PUSH
32669: LD_VAR 0 36
32673: PUSH
32674: LD_VAR 0 37
32678: PUSH
32679: LD_VAR 0 38
32683: PUSH
32684: LD_VAR 0 39
32688: PUSH
32689: LD_VAR 0 40
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: PUSH
32702: LD_VAR 0 4
32706: PUSH
32707: LD_INT 1
32709: PLUS
32710: ARRAY
32711: ST_TO_ADDR
32712: GO 33079
32714: LD_INT 6
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32770
32720: LD_INT 7
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32770
32726: LD_INT 8
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32770
32732: LD_INT 13
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32770
32738: LD_INT 12
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32770
32744: LD_INT 15
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32770
32750: LD_INT 11
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32770
32756: LD_INT 14
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32770
32762: LD_INT 10
32764: DOUBLE
32765: EQUAL
32766: IFTRUE 32770
32768: GO 32826
32770: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32771: LD_ADDR_VAR 0 9
32775: PUSH
32776: LD_VAR 0 41
32780: PUSH
32781: LD_VAR 0 42
32785: PUSH
32786: LD_VAR 0 43
32790: PUSH
32791: LD_VAR 0 44
32795: PUSH
32796: LD_VAR 0 45
32800: PUSH
32801: LD_VAR 0 46
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: PUSH
32814: LD_VAR 0 4
32818: PUSH
32819: LD_INT 1
32821: PLUS
32822: ARRAY
32823: ST_TO_ADDR
32824: GO 33079
32826: LD_INT 36
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 32890
32834: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32835: LD_ADDR_VAR 0 9
32839: PUSH
32840: LD_VAR 0 47
32844: PUSH
32845: LD_VAR 0 48
32849: PUSH
32850: LD_VAR 0 49
32854: PUSH
32855: LD_VAR 0 50
32859: PUSH
32860: LD_VAR 0 51
32864: PUSH
32865: LD_VAR 0 52
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: PUSH
32878: LD_VAR 0 4
32882: PUSH
32883: LD_INT 1
32885: PLUS
32886: ARRAY
32887: ST_TO_ADDR
32888: GO 33079
32890: LD_INT 4
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32916
32896: LD_INT 5
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32916
32902: LD_INT 34
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32916
32908: LD_INT 37
32910: DOUBLE
32911: EQUAL
32912: IFTRUE 32916
32914: GO 32972
32916: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32917: LD_ADDR_VAR 0 9
32921: PUSH
32922: LD_VAR 0 53
32926: PUSH
32927: LD_VAR 0 54
32931: PUSH
32932: LD_VAR 0 55
32936: PUSH
32937: LD_VAR 0 56
32941: PUSH
32942: LD_VAR 0 57
32946: PUSH
32947: LD_VAR 0 58
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: PUSH
32960: LD_VAR 0 4
32964: PUSH
32965: LD_INT 1
32967: PLUS
32968: ARRAY
32969: ST_TO_ADDR
32970: GO 33079
32972: LD_INT 31
32974: DOUBLE
32975: EQUAL
32976: IFTRUE 33022
32978: LD_INT 32
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 33022
32984: LD_INT 33
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 33022
32990: LD_INT 27
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 33022
32996: LD_INT 26
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33022
33002: LD_INT 28
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33022
33008: LD_INT 29
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33022
33014: LD_INT 30
33016: DOUBLE
33017: EQUAL
33018: IFTRUE 33022
33020: GO 33078
33022: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33023: LD_ADDR_VAR 0 9
33027: PUSH
33028: LD_VAR 0 59
33032: PUSH
33033: LD_VAR 0 60
33037: PUSH
33038: LD_VAR 0 61
33042: PUSH
33043: LD_VAR 0 62
33047: PUSH
33048: LD_VAR 0 63
33052: PUSH
33053: LD_VAR 0 64
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: PUSH
33066: LD_VAR 0 4
33070: PUSH
33071: LD_INT 1
33073: PLUS
33074: ARRAY
33075: ST_TO_ADDR
33076: GO 33079
33078: POP
// temp_list2 = [ ] ;
33079: LD_ADDR_VAR 0 10
33083: PUSH
33084: EMPTY
33085: ST_TO_ADDR
// for i in temp_list do
33086: LD_ADDR_VAR 0 8
33090: PUSH
33091: LD_VAR 0 9
33095: PUSH
33096: FOR_IN
33097: IFFALSE 33149
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33099: LD_ADDR_VAR 0 10
33103: PUSH
33104: LD_VAR 0 10
33108: PUSH
33109: LD_VAR 0 8
33113: PUSH
33114: LD_INT 1
33116: ARRAY
33117: PUSH
33118: LD_VAR 0 2
33122: PLUS
33123: PUSH
33124: LD_VAR 0 8
33128: PUSH
33129: LD_INT 2
33131: ARRAY
33132: PUSH
33133: LD_VAR 0 3
33137: PLUS
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: EMPTY
33144: LIST
33145: ADD
33146: ST_TO_ADDR
33147: GO 33096
33149: POP
33150: POP
// result = temp_list2 ;
33151: LD_ADDR_VAR 0 7
33155: PUSH
33156: LD_VAR 0 10
33160: ST_TO_ADDR
// end ;
33161: LD_VAR 0 7
33165: RET
// export function EnemyInRange ( unit , dist ) ; begin
33166: LD_INT 0
33168: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL_OW 255
33183: PPUSH
33184: LD_VAR 0 1
33188: PPUSH
33189: CALL_OW 250
33193: PPUSH
33194: LD_VAR 0 1
33198: PPUSH
33199: CALL_OW 251
33203: PPUSH
33204: LD_VAR 0 2
33208: PPUSH
33209: CALL 6568 0 4
33213: PUSH
33214: LD_INT 4
33216: ARRAY
33217: ST_TO_ADDR
// end ;
33218: LD_VAR 0 3
33222: RET
// export function PlayerSeeMe ( unit ) ; begin
33223: LD_INT 0
33225: PPUSH
// result := See ( your_side , unit ) ;
33226: LD_ADDR_VAR 0 2
33230: PUSH
33231: LD_OWVAR 2
33235: PPUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 292
33245: ST_TO_ADDR
// end ;
33246: LD_VAR 0 2
33250: RET
// export function ReverseDir ( unit ) ; begin
33251: LD_INT 0
33253: PPUSH
// if not unit then
33254: LD_VAR 0 1
33258: NOT
33259: IFFALSE 33263
// exit ;
33261: GO 33286
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33263: LD_ADDR_VAR 0 2
33267: PUSH
33268: LD_VAR 0 1
33272: PPUSH
33273: CALL_OW 254
33277: PUSH
33278: LD_INT 3
33280: PLUS
33281: PUSH
33282: LD_INT 6
33284: MOD
33285: ST_TO_ADDR
// end ;
33286: LD_VAR 0 2
33290: RET
// export function ReverseArray ( array ) ; var i ; begin
33291: LD_INT 0
33293: PPUSH
33294: PPUSH
// if not array then
33295: LD_VAR 0 1
33299: NOT
33300: IFFALSE 33304
// exit ;
33302: GO 33359
// result := [ ] ;
33304: LD_ADDR_VAR 0 2
33308: PUSH
33309: EMPTY
33310: ST_TO_ADDR
// for i := array downto 1 do
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: DOUBLE
33317: LD_VAR 0 1
33321: INC
33322: ST_TO_ADDR
33323: LD_INT 1
33325: PUSH
33326: FOR_DOWNTO
33327: IFFALSE 33357
// result := Join ( result , array [ i ] ) ;
33329: LD_ADDR_VAR 0 2
33333: PUSH
33334: LD_VAR 0 2
33338: PPUSH
33339: LD_VAR 0 1
33343: PUSH
33344: LD_VAR 0 3
33348: ARRAY
33349: PPUSH
33350: CALL 38003 0 2
33354: ST_TO_ADDR
33355: GO 33326
33357: POP
33358: POP
// end ;
33359: LD_VAR 0 2
33363: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33364: LD_INT 0
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
// if not unit or not hexes then
33372: LD_VAR 0 1
33376: NOT
33377: PUSH
33378: LD_VAR 0 2
33382: NOT
33383: OR
33384: IFFALSE 33388
// exit ;
33386: GO 33511
// dist := 9999 ;
33388: LD_ADDR_VAR 0 5
33392: PUSH
33393: LD_INT 9999
33395: ST_TO_ADDR
// for i = 1 to hexes do
33396: LD_ADDR_VAR 0 4
33400: PUSH
33401: DOUBLE
33402: LD_INT 1
33404: DEC
33405: ST_TO_ADDR
33406: LD_VAR 0 2
33410: PUSH
33411: FOR_TO
33412: IFFALSE 33499
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33414: LD_ADDR_VAR 0 6
33418: PUSH
33419: LD_VAR 0 1
33423: PPUSH
33424: LD_VAR 0 2
33428: PUSH
33429: LD_VAR 0 4
33433: ARRAY
33434: PUSH
33435: LD_INT 1
33437: ARRAY
33438: PPUSH
33439: LD_VAR 0 2
33443: PUSH
33444: LD_VAR 0 4
33448: ARRAY
33449: PUSH
33450: LD_INT 2
33452: ARRAY
33453: PPUSH
33454: CALL_OW 297
33458: ST_TO_ADDR
// if tdist < dist then
33459: LD_VAR 0 6
33463: PUSH
33464: LD_VAR 0 5
33468: LESS
33469: IFFALSE 33497
// begin hex := hexes [ i ] ;
33471: LD_ADDR_VAR 0 8
33475: PUSH
33476: LD_VAR 0 2
33480: PUSH
33481: LD_VAR 0 4
33485: ARRAY
33486: ST_TO_ADDR
// dist := tdist ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_VAR 0 6
33496: ST_TO_ADDR
// end ; end ;
33497: GO 33411
33499: POP
33500: POP
// result := hex ;
33501: LD_ADDR_VAR 0 3
33505: PUSH
33506: LD_VAR 0 8
33510: ST_TO_ADDR
// end ;
33511: LD_VAR 0 3
33515: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33520: LD_VAR 0 1
33524: NOT
33525: PUSH
33526: LD_VAR 0 1
33530: PUSH
33531: LD_INT 21
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 23
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PPUSH
33555: CALL_OW 69
33559: IN
33560: NOT
33561: OR
33562: IFFALSE 33566
// exit ;
33564: GO 33613
// for i = 1 to 3 do
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: DOUBLE
33572: LD_INT 1
33574: DEC
33575: ST_TO_ADDR
33576: LD_INT 3
33578: PUSH
33579: FOR_TO
33580: IFFALSE 33611
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 250
33591: PPUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 251
33601: PPUSH
33602: LD_INT 1
33604: PPUSH
33605: CALL_OW 453
33609: GO 33579
33611: POP
33612: POP
// end ;
33613: LD_VAR 0 2
33617: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33618: LD_INT 0
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
33624: PPUSH
33625: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33626: LD_VAR 0 1
33630: NOT
33631: PUSH
33632: LD_VAR 0 2
33636: NOT
33637: OR
33638: PUSH
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 314
33648: OR
33649: IFFALSE 33653
// exit ;
33651: GO 34120
// if GetLives ( i ) < 250 then
33653: LD_VAR 0 4
33657: PPUSH
33658: CALL_OW 256
33662: PUSH
33663: LD_INT 250
33665: LESS
33666: IFFALSE 33679
// begin ComAutodestruct ( i ) ;
33668: LD_VAR 0 4
33672: PPUSH
33673: CALL 33516 0 1
// exit ;
33677: GO 34120
// end ; x := GetX ( enemy_unit ) ;
33679: LD_ADDR_VAR 0 7
33683: PUSH
33684: LD_VAR 0 2
33688: PPUSH
33689: CALL_OW 250
33693: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33694: LD_ADDR_VAR 0 8
33698: PUSH
33699: LD_VAR 0 2
33703: PPUSH
33704: CALL_OW 251
33708: ST_TO_ADDR
// if not x or not y then
33709: LD_VAR 0 7
33713: NOT
33714: PUSH
33715: LD_VAR 0 8
33719: NOT
33720: OR
33721: IFFALSE 33725
// exit ;
33723: GO 34120
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33725: LD_ADDR_VAR 0 6
33729: PUSH
33730: LD_VAR 0 7
33734: PPUSH
33735: LD_INT 0
33737: PPUSH
33738: LD_INT 4
33740: PPUSH
33741: CALL_OW 272
33745: PUSH
33746: LD_VAR 0 8
33750: PPUSH
33751: LD_INT 0
33753: PPUSH
33754: LD_INT 4
33756: PPUSH
33757: CALL_OW 273
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_VAR 0 7
33770: PPUSH
33771: LD_INT 1
33773: PPUSH
33774: LD_INT 4
33776: PPUSH
33777: CALL_OW 272
33781: PUSH
33782: LD_VAR 0 8
33786: PPUSH
33787: LD_INT 1
33789: PPUSH
33790: LD_INT 4
33792: PPUSH
33793: CALL_OW 273
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_VAR 0 7
33806: PPUSH
33807: LD_INT 2
33809: PPUSH
33810: LD_INT 4
33812: PPUSH
33813: CALL_OW 272
33817: PUSH
33818: LD_VAR 0 8
33822: PPUSH
33823: LD_INT 2
33825: PPUSH
33826: LD_INT 4
33828: PPUSH
33829: CALL_OW 273
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_VAR 0 7
33842: PPUSH
33843: LD_INT 3
33845: PPUSH
33846: LD_INT 4
33848: PPUSH
33849: CALL_OW 272
33853: PUSH
33854: LD_VAR 0 8
33858: PPUSH
33859: LD_INT 3
33861: PPUSH
33862: LD_INT 4
33864: PPUSH
33865: CALL_OW 273
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_VAR 0 7
33878: PPUSH
33879: LD_INT 4
33881: PPUSH
33882: LD_INT 4
33884: PPUSH
33885: CALL_OW 272
33889: PUSH
33890: LD_VAR 0 8
33894: PPUSH
33895: LD_INT 4
33897: PPUSH
33898: LD_INT 4
33900: PPUSH
33901: CALL_OW 273
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_VAR 0 7
33914: PPUSH
33915: LD_INT 5
33917: PPUSH
33918: LD_INT 4
33920: PPUSH
33921: CALL_OW 272
33925: PUSH
33926: LD_VAR 0 8
33930: PPUSH
33931: LD_INT 5
33933: PPUSH
33934: LD_INT 4
33936: PPUSH
33937: CALL_OW 273
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
// for i = tmp downto 1 do
33954: LD_ADDR_VAR 0 4
33958: PUSH
33959: DOUBLE
33960: LD_VAR 0 6
33964: INC
33965: ST_TO_ADDR
33966: LD_INT 1
33968: PUSH
33969: FOR_DOWNTO
33970: IFFALSE 34071
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33972: LD_VAR 0 6
33976: PUSH
33977: LD_VAR 0 4
33981: ARRAY
33982: PUSH
33983: LD_INT 1
33985: ARRAY
33986: PPUSH
33987: LD_VAR 0 6
33991: PUSH
33992: LD_VAR 0 4
33996: ARRAY
33997: PUSH
33998: LD_INT 2
34000: ARRAY
34001: PPUSH
34002: CALL_OW 488
34006: NOT
34007: PUSH
34008: LD_VAR 0 6
34012: PUSH
34013: LD_VAR 0 4
34017: ARRAY
34018: PUSH
34019: LD_INT 1
34021: ARRAY
34022: PPUSH
34023: LD_VAR 0 6
34027: PUSH
34028: LD_VAR 0 4
34032: ARRAY
34033: PUSH
34034: LD_INT 2
34036: ARRAY
34037: PPUSH
34038: CALL_OW 428
34042: PUSH
34043: LD_INT 0
34045: NONEQUAL
34046: OR
34047: IFFALSE 34069
// tmp := Delete ( tmp , i ) ;
34049: LD_ADDR_VAR 0 6
34053: PUSH
34054: LD_VAR 0 6
34058: PPUSH
34059: LD_VAR 0 4
34063: PPUSH
34064: CALL_OW 3
34068: ST_TO_ADDR
34069: GO 33969
34071: POP
34072: POP
// j := GetClosestHex ( unit , tmp ) ;
34073: LD_ADDR_VAR 0 5
34077: PUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: LD_VAR 0 6
34087: PPUSH
34088: CALL 33364 0 2
34092: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34093: LD_VAR 0 1
34097: PPUSH
34098: LD_VAR 0 5
34102: PUSH
34103: LD_INT 1
34105: ARRAY
34106: PPUSH
34107: LD_VAR 0 5
34111: PUSH
34112: LD_INT 2
34114: ARRAY
34115: PPUSH
34116: CALL_OW 111
// end ;
34120: LD_VAR 0 3
34124: RET
// export function PrepareApemanSoldier ( ) ; begin
34125: LD_INT 0
34127: PPUSH
// uc_nation := 0 ;
34128: LD_ADDR_OWVAR 21
34132: PUSH
34133: LD_INT 0
34135: ST_TO_ADDR
// hc_sex := sex_male ;
34136: LD_ADDR_OWVAR 27
34140: PUSH
34141: LD_INT 1
34143: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34144: LD_ADDR_OWVAR 28
34148: PUSH
34149: LD_INT 15
34151: ST_TO_ADDR
// hc_gallery :=  ;
34152: LD_ADDR_OWVAR 33
34156: PUSH
34157: LD_STRING 
34159: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34160: LD_ADDR_OWVAR 31
34164: PUSH
34165: LD_INT 0
34167: PPUSH
34168: LD_INT 3
34170: PPUSH
34171: CALL_OW 12
34175: PUSH
34176: LD_INT 0
34178: PPUSH
34179: LD_INT 3
34181: PPUSH
34182: CALL_OW 12
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: ST_TO_ADDR
// end ;
34199: LD_VAR 0 1
34203: RET
// export function PrepareApemanEngineer ( ) ; begin
34204: LD_INT 0
34206: PPUSH
// uc_nation := 0 ;
34207: LD_ADDR_OWVAR 21
34211: PUSH
34212: LD_INT 0
34214: ST_TO_ADDR
// hc_sex := sex_male ;
34215: LD_ADDR_OWVAR 27
34219: PUSH
34220: LD_INT 1
34222: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34223: LD_ADDR_OWVAR 28
34227: PUSH
34228: LD_INT 16
34230: ST_TO_ADDR
// hc_gallery :=  ;
34231: LD_ADDR_OWVAR 33
34235: PUSH
34236: LD_STRING 
34238: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34239: LD_ADDR_OWVAR 31
34243: PUSH
34244: LD_INT 0
34246: PPUSH
34247: LD_INT 3
34249: PPUSH
34250: CALL_OW 12
34254: PUSH
34255: LD_INT 0
34257: PPUSH
34258: LD_INT 3
34260: PPUSH
34261: CALL_OW 12
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
// end ;
34278: LD_VAR 0 1
34282: RET
// export function PrepareApeman ( agressivity ) ; begin
34283: LD_INT 0
34285: PPUSH
// uc_side := 0 ;
34286: LD_ADDR_OWVAR 20
34290: PUSH
34291: LD_INT 0
34293: ST_TO_ADDR
// uc_nation := 0 ;
34294: LD_ADDR_OWVAR 21
34298: PUSH
34299: LD_INT 0
34301: ST_TO_ADDR
// hc_sex := sex_male ;
34302: LD_ADDR_OWVAR 27
34306: PUSH
34307: LD_INT 1
34309: ST_TO_ADDR
// hc_class := class_apeman ;
34310: LD_ADDR_OWVAR 28
34314: PUSH
34315: LD_INT 12
34317: ST_TO_ADDR
// hc_gallery :=  ;
34318: LD_ADDR_OWVAR 33
34322: PUSH
34323: LD_STRING 
34325: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34326: LD_ADDR_OWVAR 35
34330: PUSH
34331: LD_VAR 0 1
34335: NEG
34336: PPUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 12
34346: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34347: LD_ADDR_OWVAR 31
34351: PUSH
34352: LD_INT 0
34354: PPUSH
34355: LD_INT 3
34357: PPUSH
34358: CALL_OW 12
34362: PUSH
34363: LD_INT 0
34365: PPUSH
34366: LD_INT 3
34368: PPUSH
34369: CALL_OW 12
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// end ;
34386: LD_VAR 0 2
34390: RET
// export function PrepareTiger ( agressivity ) ; begin
34391: LD_INT 0
34393: PPUSH
// uc_side := 0 ;
34394: LD_ADDR_OWVAR 20
34398: PUSH
34399: LD_INT 0
34401: ST_TO_ADDR
// uc_nation := 0 ;
34402: LD_ADDR_OWVAR 21
34406: PUSH
34407: LD_INT 0
34409: ST_TO_ADDR
// hc_class := class_tiger ;
34410: LD_ADDR_OWVAR 28
34414: PUSH
34415: LD_INT 14
34417: ST_TO_ADDR
// hc_gallery :=  ;
34418: LD_ADDR_OWVAR 33
34422: PUSH
34423: LD_STRING 
34425: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34426: LD_ADDR_OWVAR 35
34430: PUSH
34431: LD_VAR 0 1
34435: NEG
34436: PPUSH
34437: LD_VAR 0 1
34441: PPUSH
34442: CALL_OW 12
34446: ST_TO_ADDR
// end ;
34447: LD_VAR 0 2
34451: RET
// export function PrepareEnchidna ( ) ; begin
34452: LD_INT 0
34454: PPUSH
// uc_side := 0 ;
34455: LD_ADDR_OWVAR 20
34459: PUSH
34460: LD_INT 0
34462: ST_TO_ADDR
// uc_nation := 0 ;
34463: LD_ADDR_OWVAR 21
34467: PUSH
34468: LD_INT 0
34470: ST_TO_ADDR
// hc_class := class_baggie ;
34471: LD_ADDR_OWVAR 28
34475: PUSH
34476: LD_INT 13
34478: ST_TO_ADDR
// hc_gallery :=  ;
34479: LD_ADDR_OWVAR 33
34483: PUSH
34484: LD_STRING 
34486: ST_TO_ADDR
// end ;
34487: LD_VAR 0 1
34491: RET
// export function PrepareFrog ( ) ; begin
34492: LD_INT 0
34494: PPUSH
// uc_side := 0 ;
34495: LD_ADDR_OWVAR 20
34499: PUSH
34500: LD_INT 0
34502: ST_TO_ADDR
// uc_nation := 0 ;
34503: LD_ADDR_OWVAR 21
34507: PUSH
34508: LD_INT 0
34510: ST_TO_ADDR
// hc_class := class_frog ;
34511: LD_ADDR_OWVAR 28
34515: PUSH
34516: LD_INT 19
34518: ST_TO_ADDR
// hc_gallery :=  ;
34519: LD_ADDR_OWVAR 33
34523: PUSH
34524: LD_STRING 
34526: ST_TO_ADDR
// end ;
34527: LD_VAR 0 1
34531: RET
// export function PrepareFish ( ) ; begin
34532: LD_INT 0
34534: PPUSH
// uc_side := 0 ;
34535: LD_ADDR_OWVAR 20
34539: PUSH
34540: LD_INT 0
34542: ST_TO_ADDR
// uc_nation := 0 ;
34543: LD_ADDR_OWVAR 21
34547: PUSH
34548: LD_INT 0
34550: ST_TO_ADDR
// hc_class := class_fish ;
34551: LD_ADDR_OWVAR 28
34555: PUSH
34556: LD_INT 20
34558: ST_TO_ADDR
// hc_gallery :=  ;
34559: LD_ADDR_OWVAR 33
34563: PUSH
34564: LD_STRING 
34566: ST_TO_ADDR
// end ;
34567: LD_VAR 0 1
34571: RET
// export function PrepareBird ( ) ; begin
34572: LD_INT 0
34574: PPUSH
// uc_side := 0 ;
34575: LD_ADDR_OWVAR 20
34579: PUSH
34580: LD_INT 0
34582: ST_TO_ADDR
// uc_nation := 0 ;
34583: LD_ADDR_OWVAR 21
34587: PUSH
34588: LD_INT 0
34590: ST_TO_ADDR
// hc_class := class_phororhacos ;
34591: LD_ADDR_OWVAR 28
34595: PUSH
34596: LD_INT 18
34598: ST_TO_ADDR
// hc_gallery :=  ;
34599: LD_ADDR_OWVAR 33
34603: PUSH
34604: LD_STRING 
34606: ST_TO_ADDR
// end ;
34607: LD_VAR 0 1
34611: RET
// export function PrepareHorse ( ) ; begin
34612: LD_INT 0
34614: PPUSH
// uc_side := 0 ;
34615: LD_ADDR_OWVAR 20
34619: PUSH
34620: LD_INT 0
34622: ST_TO_ADDR
// uc_nation := 0 ;
34623: LD_ADDR_OWVAR 21
34627: PUSH
34628: LD_INT 0
34630: ST_TO_ADDR
// hc_class := class_horse ;
34631: LD_ADDR_OWVAR 28
34635: PUSH
34636: LD_INT 21
34638: ST_TO_ADDR
// hc_gallery :=  ;
34639: LD_ADDR_OWVAR 33
34643: PUSH
34644: LD_STRING 
34646: ST_TO_ADDR
// end ;
34647: LD_VAR 0 1
34651: RET
// export function PrepareMastodont ( ) ; begin
34652: LD_INT 0
34654: PPUSH
// uc_side := 0 ;
34655: LD_ADDR_OWVAR 20
34659: PUSH
34660: LD_INT 0
34662: ST_TO_ADDR
// uc_nation := 0 ;
34663: LD_ADDR_OWVAR 21
34667: PUSH
34668: LD_INT 0
34670: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34671: LD_ADDR_OWVAR 37
34675: PUSH
34676: LD_INT 31
34678: ST_TO_ADDR
// vc_control := control_rider ;
34679: LD_ADDR_OWVAR 38
34683: PUSH
34684: LD_INT 4
34686: ST_TO_ADDR
// end ;
34687: LD_VAR 0 1
34691: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34692: LD_INT 0
34694: PPUSH
34695: PPUSH
34696: PPUSH
// uc_side = 0 ;
34697: LD_ADDR_OWVAR 20
34701: PUSH
34702: LD_INT 0
34704: ST_TO_ADDR
// uc_nation = 0 ;
34705: LD_ADDR_OWVAR 21
34709: PUSH
34710: LD_INT 0
34712: ST_TO_ADDR
// InitHc_All ( ) ;
34713: CALL_OW 584
// InitVc ;
34717: CALL_OW 20
// if mastodonts then
34721: LD_VAR 0 6
34725: IFFALSE 34792
// for i = 1 to mastodonts do
34727: LD_ADDR_VAR 0 11
34731: PUSH
34732: DOUBLE
34733: LD_INT 1
34735: DEC
34736: ST_TO_ADDR
34737: LD_VAR 0 6
34741: PUSH
34742: FOR_TO
34743: IFFALSE 34790
// begin vc_chassis := 31 ;
34745: LD_ADDR_OWVAR 37
34749: PUSH
34750: LD_INT 31
34752: ST_TO_ADDR
// vc_control := control_rider ;
34753: LD_ADDR_OWVAR 38
34757: PUSH
34758: LD_INT 4
34760: ST_TO_ADDR
// animal := CreateVehicle ;
34761: LD_ADDR_VAR 0 12
34765: PUSH
34766: CALL_OW 45
34770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34771: LD_VAR 0 12
34775: PPUSH
34776: LD_VAR 0 8
34780: PPUSH
34781: LD_INT 0
34783: PPUSH
34784: CALL 36920 0 3
// end ;
34788: GO 34742
34790: POP
34791: POP
// if horses then
34792: LD_VAR 0 5
34796: IFFALSE 34863
// for i = 1 to horses do
34798: LD_ADDR_VAR 0 11
34802: PUSH
34803: DOUBLE
34804: LD_INT 1
34806: DEC
34807: ST_TO_ADDR
34808: LD_VAR 0 5
34812: PUSH
34813: FOR_TO
34814: IFFALSE 34861
// begin hc_class := 21 ;
34816: LD_ADDR_OWVAR 28
34820: PUSH
34821: LD_INT 21
34823: ST_TO_ADDR
// hc_gallery :=  ;
34824: LD_ADDR_OWVAR 33
34828: PUSH
34829: LD_STRING 
34831: ST_TO_ADDR
// animal := CreateHuman ;
34832: LD_ADDR_VAR 0 12
34836: PUSH
34837: CALL_OW 44
34841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34842: LD_VAR 0 12
34846: PPUSH
34847: LD_VAR 0 8
34851: PPUSH
34852: LD_INT 0
34854: PPUSH
34855: CALL 36920 0 3
// end ;
34859: GO 34813
34861: POP
34862: POP
// if birds then
34863: LD_VAR 0 1
34867: IFFALSE 34934
// for i = 1 to birds do
34869: LD_ADDR_VAR 0 11
34873: PUSH
34874: DOUBLE
34875: LD_INT 1
34877: DEC
34878: ST_TO_ADDR
34879: LD_VAR 0 1
34883: PUSH
34884: FOR_TO
34885: IFFALSE 34932
// begin hc_class = 18 ;
34887: LD_ADDR_OWVAR 28
34891: PUSH
34892: LD_INT 18
34894: ST_TO_ADDR
// hc_gallery =  ;
34895: LD_ADDR_OWVAR 33
34899: PUSH
34900: LD_STRING 
34902: ST_TO_ADDR
// animal := CreateHuman ;
34903: LD_ADDR_VAR 0 12
34907: PUSH
34908: CALL_OW 44
34912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34913: LD_VAR 0 12
34917: PPUSH
34918: LD_VAR 0 8
34922: PPUSH
34923: LD_INT 0
34925: PPUSH
34926: CALL 36920 0 3
// end ;
34930: GO 34884
34932: POP
34933: POP
// if tigers then
34934: LD_VAR 0 2
34938: IFFALSE 35022
// for i = 1 to tigers do
34940: LD_ADDR_VAR 0 11
34944: PUSH
34945: DOUBLE
34946: LD_INT 1
34948: DEC
34949: ST_TO_ADDR
34950: LD_VAR 0 2
34954: PUSH
34955: FOR_TO
34956: IFFALSE 35020
// begin hc_class = class_tiger ;
34958: LD_ADDR_OWVAR 28
34962: PUSH
34963: LD_INT 14
34965: ST_TO_ADDR
// hc_gallery =  ;
34966: LD_ADDR_OWVAR 33
34970: PUSH
34971: LD_STRING 
34973: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34974: LD_ADDR_OWVAR 35
34978: PUSH
34979: LD_INT 7
34981: NEG
34982: PPUSH
34983: LD_INT 7
34985: PPUSH
34986: CALL_OW 12
34990: ST_TO_ADDR
// animal := CreateHuman ;
34991: LD_ADDR_VAR 0 12
34995: PUSH
34996: CALL_OW 44
35000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35001: LD_VAR 0 12
35005: PPUSH
35006: LD_VAR 0 8
35010: PPUSH
35011: LD_INT 0
35013: PPUSH
35014: CALL 36920 0 3
// end ;
35018: GO 34955
35020: POP
35021: POP
// if apemans then
35022: LD_VAR 0 3
35026: IFFALSE 35149
// for i = 1 to apemans do
35028: LD_ADDR_VAR 0 11
35032: PUSH
35033: DOUBLE
35034: LD_INT 1
35036: DEC
35037: ST_TO_ADDR
35038: LD_VAR 0 3
35042: PUSH
35043: FOR_TO
35044: IFFALSE 35147
// begin hc_class = class_apeman ;
35046: LD_ADDR_OWVAR 28
35050: PUSH
35051: LD_INT 12
35053: ST_TO_ADDR
// hc_gallery =  ;
35054: LD_ADDR_OWVAR 33
35058: PUSH
35059: LD_STRING 
35061: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35062: LD_ADDR_OWVAR 35
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PPUSH
35071: LD_INT 2
35073: PPUSH
35074: CALL_OW 12
35078: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35079: LD_ADDR_OWVAR 31
35083: PUSH
35084: LD_INT 1
35086: PPUSH
35087: LD_INT 3
35089: PPUSH
35090: CALL_OW 12
35094: PUSH
35095: LD_INT 1
35097: PPUSH
35098: LD_INT 3
35100: PPUSH
35101: CALL_OW 12
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: ST_TO_ADDR
// animal := CreateHuman ;
35118: LD_ADDR_VAR 0 12
35122: PUSH
35123: CALL_OW 44
35127: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35128: LD_VAR 0 12
35132: PPUSH
35133: LD_VAR 0 8
35137: PPUSH
35138: LD_INT 0
35140: PPUSH
35141: CALL 36920 0 3
// end ;
35145: GO 35043
35147: POP
35148: POP
// if enchidnas then
35149: LD_VAR 0 4
35153: IFFALSE 35220
// for i = 1 to enchidnas do
35155: LD_ADDR_VAR 0 11
35159: PUSH
35160: DOUBLE
35161: LD_INT 1
35163: DEC
35164: ST_TO_ADDR
35165: LD_VAR 0 4
35169: PUSH
35170: FOR_TO
35171: IFFALSE 35218
// begin hc_class = 13 ;
35173: LD_ADDR_OWVAR 28
35177: PUSH
35178: LD_INT 13
35180: ST_TO_ADDR
// hc_gallery =  ;
35181: LD_ADDR_OWVAR 33
35185: PUSH
35186: LD_STRING 
35188: ST_TO_ADDR
// animal := CreateHuman ;
35189: LD_ADDR_VAR 0 12
35193: PUSH
35194: CALL_OW 44
35198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35199: LD_VAR 0 12
35203: PPUSH
35204: LD_VAR 0 8
35208: PPUSH
35209: LD_INT 0
35211: PPUSH
35212: CALL 36920 0 3
// end ;
35216: GO 35170
35218: POP
35219: POP
// if fishes then
35220: LD_VAR 0 7
35224: IFFALSE 35291
// for i = 1 to fishes do
35226: LD_ADDR_VAR 0 11
35230: PUSH
35231: DOUBLE
35232: LD_INT 1
35234: DEC
35235: ST_TO_ADDR
35236: LD_VAR 0 7
35240: PUSH
35241: FOR_TO
35242: IFFALSE 35289
// begin hc_class = 20 ;
35244: LD_ADDR_OWVAR 28
35248: PUSH
35249: LD_INT 20
35251: ST_TO_ADDR
// hc_gallery =  ;
35252: LD_ADDR_OWVAR 33
35256: PUSH
35257: LD_STRING 
35259: ST_TO_ADDR
// animal := CreateHuman ;
35260: LD_ADDR_VAR 0 12
35264: PUSH
35265: CALL_OW 44
35269: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35270: LD_VAR 0 12
35274: PPUSH
35275: LD_VAR 0 9
35279: PPUSH
35280: LD_INT 0
35282: PPUSH
35283: CALL 36920 0 3
// end ;
35287: GO 35241
35289: POP
35290: POP
// end ;
35291: LD_VAR 0 10
35295: RET
// export function WantHeal ( sci , unit ) ; begin
35296: LD_INT 0
35298: PPUSH
// if GetTaskList ( sci ) > 0 then
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 437
35308: PUSH
35309: LD_INT 0
35311: GREATER
35312: IFFALSE 35382
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35314: LD_VAR 0 1
35318: PPUSH
35319: CALL_OW 437
35323: PUSH
35324: LD_INT 1
35326: ARRAY
35327: PUSH
35328: LD_INT 1
35330: ARRAY
35331: PUSH
35332: LD_STRING l
35334: EQUAL
35335: PUSH
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 437
35345: PUSH
35346: LD_INT 1
35348: ARRAY
35349: PUSH
35350: LD_INT 4
35352: ARRAY
35353: PUSH
35354: LD_VAR 0 2
35358: EQUAL
35359: AND
35360: IFFALSE 35372
// result := true else
35362: LD_ADDR_VAR 0 3
35366: PUSH
35367: LD_INT 1
35369: ST_TO_ADDR
35370: GO 35380
// result := false ;
35372: LD_ADDR_VAR 0 3
35376: PUSH
35377: LD_INT 0
35379: ST_TO_ADDR
// end else
35380: GO 35390
// result := false ;
35382: LD_ADDR_VAR 0 3
35386: PUSH
35387: LD_INT 0
35389: ST_TO_ADDR
// end ;
35390: LD_VAR 0 3
35394: RET
// export function HealTarget ( sci ) ; begin
35395: LD_INT 0
35397: PPUSH
// if not sci then
35398: LD_VAR 0 1
35402: NOT
35403: IFFALSE 35407
// exit ;
35405: GO 35472
// result := 0 ;
35407: LD_ADDR_VAR 0 2
35411: PUSH
35412: LD_INT 0
35414: ST_TO_ADDR
// if GetTaskList ( sci ) then
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 437
35424: IFFALSE 35472
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 437
35435: PUSH
35436: LD_INT 1
35438: ARRAY
35439: PUSH
35440: LD_INT 1
35442: ARRAY
35443: PUSH
35444: LD_STRING l
35446: EQUAL
35447: IFFALSE 35472
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35449: LD_ADDR_VAR 0 2
35453: PUSH
35454: LD_VAR 0 1
35458: PPUSH
35459: CALL_OW 437
35463: PUSH
35464: LD_INT 1
35466: ARRAY
35467: PUSH
35468: LD_INT 4
35470: ARRAY
35471: ST_TO_ADDR
// end ;
35472: LD_VAR 0 2
35476: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35477: LD_INT 0
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
// if not base_units then
35483: LD_VAR 0 1
35487: NOT
35488: IFFALSE 35492
// exit ;
35490: GO 35579
// result := false ;
35492: LD_ADDR_VAR 0 2
35496: PUSH
35497: LD_INT 0
35499: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35500: LD_ADDR_VAR 0 5
35504: PUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: LD_INT 21
35512: PUSH
35513: LD_INT 3
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PPUSH
35520: CALL_OW 72
35524: ST_TO_ADDR
// if not tmp then
35525: LD_VAR 0 5
35529: NOT
35530: IFFALSE 35534
// exit ;
35532: GO 35579
// for i in tmp do
35534: LD_ADDR_VAR 0 3
35538: PUSH
35539: LD_VAR 0 5
35543: PUSH
35544: FOR_IN
35545: IFFALSE 35577
// begin result := EnemyInRange ( i , 22 ) ;
35547: LD_ADDR_VAR 0 2
35551: PUSH
35552: LD_VAR 0 3
35556: PPUSH
35557: LD_INT 22
35559: PPUSH
35560: CALL 33166 0 2
35564: ST_TO_ADDR
// if result then
35565: LD_VAR 0 2
35569: IFFALSE 35575
// exit ;
35571: POP
35572: POP
35573: GO 35579
// end ;
35575: GO 35544
35577: POP
35578: POP
// end ;
35579: LD_VAR 0 2
35583: RET
// export function FilterByTag ( units , tag ) ; begin
35584: LD_INT 0
35586: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_VAR 0 1
35596: PPUSH
35597: LD_INT 120
35599: PUSH
35600: LD_VAR 0 2
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PPUSH
35609: CALL_OW 72
35613: ST_TO_ADDR
// end ;
35614: LD_VAR 0 3
35618: RET
// export function IsDriver ( un ) ; begin
35619: LD_INT 0
35621: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35622: LD_ADDR_VAR 0 2
35626: PUSH
35627: LD_VAR 0 1
35631: PUSH
35632: LD_INT 55
35634: PUSH
35635: EMPTY
35636: LIST
35637: PPUSH
35638: CALL_OW 69
35642: IN
35643: ST_TO_ADDR
// end ;
35644: LD_VAR 0 2
35648: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35649: LD_INT 0
35651: PPUSH
35652: PPUSH
// list := [ ] ;
35653: LD_ADDR_VAR 0 5
35657: PUSH
35658: EMPTY
35659: ST_TO_ADDR
// case d of 0 :
35660: LD_VAR 0 3
35664: PUSH
35665: LD_INT 0
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35806
35673: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35674: LD_ADDR_VAR 0 5
35678: PUSH
35679: LD_VAR 0 1
35683: PUSH
35684: LD_INT 4
35686: MINUS
35687: PUSH
35688: LD_VAR 0 2
35692: PUSH
35693: LD_INT 4
35695: MINUS
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: LIST
35704: PUSH
35705: LD_VAR 0 1
35709: PUSH
35710: LD_INT 3
35712: MINUS
35713: PUSH
35714: LD_VAR 0 2
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: PUSH
35727: LD_VAR 0 1
35731: PUSH
35732: LD_INT 4
35734: PLUS
35735: PUSH
35736: LD_VAR 0 2
35740: PUSH
35741: LD_INT 4
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: PUSH
35749: LD_VAR 0 1
35753: PUSH
35754: LD_INT 3
35756: PLUS
35757: PUSH
35758: LD_VAR 0 2
35762: PUSH
35763: LD_INT 3
35765: PLUS
35766: PUSH
35767: LD_INT 5
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: PUSH
35775: LD_VAR 0 1
35779: PUSH
35780: LD_VAR 0 2
35784: PUSH
35785: LD_INT 4
35787: PLUS
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: ST_TO_ADDR
// end ; 1 :
35804: GO 36504
35806: LD_INT 1
35808: DOUBLE
35809: EQUAL
35810: IFTRUE 35814
35812: GO 35947
35814: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35815: LD_ADDR_VAR 0 5
35819: PUSH
35820: LD_VAR 0 1
35824: PUSH
35825: LD_VAR 0 2
35829: PUSH
35830: LD_INT 4
35832: MINUS
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: PUSH
35842: LD_VAR 0 1
35846: PUSH
35847: LD_INT 3
35849: MINUS
35850: PUSH
35851: LD_VAR 0 2
35855: PUSH
35856: LD_INT 3
35858: MINUS
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: PUSH
35868: LD_VAR 0 1
35872: PUSH
35873: LD_INT 4
35875: MINUS
35876: PUSH
35877: LD_VAR 0 2
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: PUSH
35890: LD_VAR 0 1
35894: PUSH
35895: LD_VAR 0 2
35899: PUSH
35900: LD_INT 3
35902: PLUS
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: PUSH
35912: LD_VAR 0 1
35916: PUSH
35917: LD_INT 4
35919: PLUS
35920: PUSH
35921: LD_VAR 0 2
35925: PUSH
35926: LD_INT 4
35928: PLUS
35929: PUSH
35930: LD_INT 5
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
// end ; 2 :
35945: GO 36504
35947: LD_INT 2
35949: DOUBLE
35950: EQUAL
35951: IFTRUE 35955
35953: GO 36084
35955: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35956: LD_ADDR_VAR 0 5
35960: PUSH
35961: LD_VAR 0 1
35965: PUSH
35966: LD_VAR 0 2
35970: PUSH
35971: LD_INT 3
35973: MINUS
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: PUSH
35983: LD_VAR 0 1
35987: PUSH
35988: LD_INT 4
35990: PLUS
35991: PUSH
35992: LD_VAR 0 2
35996: PUSH
35997: LD_INT 4
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: LIST
36004: PUSH
36005: LD_VAR 0 1
36009: PUSH
36010: LD_VAR 0 2
36014: PUSH
36015: LD_INT 4
36017: PLUS
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: LIST
36026: PUSH
36027: LD_VAR 0 1
36031: PUSH
36032: LD_INT 3
36034: MINUS
36035: PUSH
36036: LD_VAR 0 2
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: PUSH
36049: LD_VAR 0 1
36053: PUSH
36054: LD_INT 4
36056: MINUS
36057: PUSH
36058: LD_VAR 0 2
36062: PUSH
36063: LD_INT 4
36065: MINUS
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
// end ; 3 :
36082: GO 36504
36084: LD_INT 3
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36225
36092: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36093: LD_ADDR_VAR 0 5
36097: PUSH
36098: LD_VAR 0 1
36102: PUSH
36103: LD_INT 3
36105: PLUS
36106: PUSH
36107: LD_VAR 0 2
36111: PUSH
36112: LD_INT 4
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: PUSH
36120: LD_VAR 0 1
36124: PUSH
36125: LD_INT 4
36127: PLUS
36128: PUSH
36129: LD_VAR 0 2
36133: PUSH
36134: LD_INT 4
36136: PLUS
36137: PUSH
36138: LD_INT 5
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: PUSH
36146: LD_VAR 0 1
36150: PUSH
36151: LD_INT 4
36153: MINUS
36154: PUSH
36155: LD_VAR 0 2
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: PUSH
36168: LD_VAR 0 1
36172: PUSH
36173: LD_VAR 0 2
36177: PUSH
36178: LD_INT 4
36180: MINUS
36181: PUSH
36182: LD_INT 3
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: PUSH
36190: LD_VAR 0 1
36194: PUSH
36195: LD_INT 3
36197: MINUS
36198: PUSH
36199: LD_VAR 0 2
36203: PUSH
36204: LD_INT 3
36206: MINUS
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: ST_TO_ADDR
// end ; 4 :
36223: GO 36504
36225: LD_INT 4
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36366
36233: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36234: LD_ADDR_VAR 0 5
36238: PUSH
36239: LD_VAR 0 1
36243: PUSH
36244: LD_VAR 0 2
36248: PUSH
36249: LD_INT 4
36251: PLUS
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: PUSH
36261: LD_VAR 0 1
36265: PUSH
36266: LD_INT 3
36268: PLUS
36269: PUSH
36270: LD_VAR 0 2
36274: PUSH
36275: LD_INT 3
36277: PLUS
36278: PUSH
36279: LD_INT 5
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: PUSH
36287: LD_VAR 0 1
36291: PUSH
36292: LD_INT 4
36294: PLUS
36295: PUSH
36296: LD_VAR 0 2
36300: PUSH
36301: LD_INT 4
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: PUSH
36309: LD_VAR 0 1
36313: PUSH
36314: LD_VAR 0 2
36318: PUSH
36319: LD_INT 3
36321: MINUS
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: PUSH
36331: LD_VAR 0 1
36335: PUSH
36336: LD_INT 4
36338: MINUS
36339: PUSH
36340: LD_VAR 0 2
36344: PUSH
36345: LD_INT 4
36347: MINUS
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: ST_TO_ADDR
// end ; 5 :
36364: GO 36504
36366: LD_INT 5
36368: DOUBLE
36369: EQUAL
36370: IFTRUE 36374
36372: GO 36503
36374: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36375: LD_ADDR_VAR 0 5
36379: PUSH
36380: LD_VAR 0 1
36384: PUSH
36385: LD_INT 4
36387: MINUS
36388: PUSH
36389: LD_VAR 0 2
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: PUSH
36402: LD_VAR 0 1
36406: PUSH
36407: LD_VAR 0 2
36411: PUSH
36412: LD_INT 4
36414: MINUS
36415: PUSH
36416: LD_INT 3
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: PUSH
36424: LD_VAR 0 1
36428: PUSH
36429: LD_INT 4
36431: PLUS
36432: PUSH
36433: LD_VAR 0 2
36437: PUSH
36438: LD_INT 4
36440: PLUS
36441: PUSH
36442: LD_INT 5
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: PUSH
36450: LD_VAR 0 1
36454: PUSH
36455: LD_INT 3
36457: PLUS
36458: PUSH
36459: LD_VAR 0 2
36463: PUSH
36464: LD_INT 4
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: PUSH
36472: LD_VAR 0 1
36476: PUSH
36477: LD_VAR 0 2
36481: PUSH
36482: LD_INT 3
36484: PLUS
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: ST_TO_ADDR
// end ; end ;
36501: GO 36504
36503: POP
// result := list ;
36504: LD_ADDR_VAR 0 4
36508: PUSH
36509: LD_VAR 0 5
36513: ST_TO_ADDR
// end ;
36514: LD_VAR 0 4
36518: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36519: LD_INT 0
36521: PPUSH
36522: PPUSH
36523: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36524: LD_VAR 0 1
36528: NOT
36529: PUSH
36530: LD_VAR 0 2
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 3
36543: PUSH
36544: LD_INT 4
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: IN
36553: NOT
36554: OR
36555: IFFALSE 36559
// exit ;
36557: GO 36642
// tmp := [ ] ;
36559: LD_ADDR_VAR 0 5
36563: PUSH
36564: EMPTY
36565: ST_TO_ADDR
// for i in units do
36566: LD_ADDR_VAR 0 4
36570: PUSH
36571: LD_VAR 0 1
36575: PUSH
36576: FOR_IN
36577: IFFALSE 36611
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36579: LD_ADDR_VAR 0 5
36583: PUSH
36584: LD_VAR 0 5
36588: PPUSH
36589: LD_VAR 0 4
36593: PPUSH
36594: LD_VAR 0 2
36598: PPUSH
36599: CALL_OW 259
36603: PPUSH
36604: CALL 38003 0 2
36608: ST_TO_ADDR
36609: GO 36576
36611: POP
36612: POP
// if not tmp then
36613: LD_VAR 0 5
36617: NOT
36618: IFFALSE 36622
// exit ;
36620: GO 36642
// result := SortListByListDesc ( units , tmp ) ;
36622: LD_ADDR_VAR 0 3
36626: PUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: LD_VAR 0 5
36636: PPUSH
36637: CALL_OW 77
36641: ST_TO_ADDR
// end ;
36642: LD_VAR 0 3
36646: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36647: LD_INT 0
36649: PPUSH
36650: PPUSH
36651: PPUSH
// result := false ;
36652: LD_ADDR_VAR 0 3
36656: PUSH
36657: LD_INT 0
36659: ST_TO_ADDR
// if not building then
36660: LD_VAR 0 2
36664: NOT
36665: IFFALSE 36669
// exit ;
36667: GO 36807
// x := GetX ( building ) ;
36669: LD_ADDR_VAR 0 4
36673: PUSH
36674: LD_VAR 0 2
36678: PPUSH
36679: CALL_OW 250
36683: ST_TO_ADDR
// y := GetY ( building ) ;
36684: LD_ADDR_VAR 0 5
36688: PUSH
36689: LD_VAR 0 2
36693: PPUSH
36694: CALL_OW 251
36698: ST_TO_ADDR
// if not x or not y then
36699: LD_VAR 0 4
36703: NOT
36704: PUSH
36705: LD_VAR 0 5
36709: NOT
36710: OR
36711: IFFALSE 36715
// exit ;
36713: GO 36807
// if GetTaskList ( unit ) then
36715: LD_VAR 0 1
36719: PPUSH
36720: CALL_OW 437
36724: IFFALSE 36807
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36726: LD_STRING e
36728: PUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 437
36738: PUSH
36739: LD_INT 1
36741: ARRAY
36742: PUSH
36743: LD_INT 1
36745: ARRAY
36746: EQUAL
36747: PUSH
36748: LD_VAR 0 4
36752: PUSH
36753: LD_VAR 0 1
36757: PPUSH
36758: CALL_OW 437
36762: PUSH
36763: LD_INT 1
36765: ARRAY
36766: PUSH
36767: LD_INT 2
36769: ARRAY
36770: EQUAL
36771: AND
36772: PUSH
36773: LD_VAR 0 5
36777: PUSH
36778: LD_VAR 0 1
36782: PPUSH
36783: CALL_OW 437
36787: PUSH
36788: LD_INT 1
36790: ARRAY
36791: PUSH
36792: LD_INT 3
36794: ARRAY
36795: EQUAL
36796: AND
36797: IFFALSE 36807
// result := true end ;
36799: LD_ADDR_VAR 0 3
36803: PUSH
36804: LD_INT 1
36806: ST_TO_ADDR
// end ;
36807: LD_VAR 0 3
36811: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36812: LD_INT 0
36814: PPUSH
// result := false ;
36815: LD_ADDR_VAR 0 4
36819: PUSH
36820: LD_INT 0
36822: ST_TO_ADDR
// if GetTaskList ( unit ) then
36823: LD_VAR 0 1
36827: PPUSH
36828: CALL_OW 437
36832: IFFALSE 36915
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36834: LD_STRING M
36836: PUSH
36837: LD_VAR 0 1
36841: PPUSH
36842: CALL_OW 437
36846: PUSH
36847: LD_INT 1
36849: ARRAY
36850: PUSH
36851: LD_INT 1
36853: ARRAY
36854: EQUAL
36855: PUSH
36856: LD_VAR 0 2
36860: PUSH
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 437
36870: PUSH
36871: LD_INT 1
36873: ARRAY
36874: PUSH
36875: LD_INT 2
36877: ARRAY
36878: EQUAL
36879: AND
36880: PUSH
36881: LD_VAR 0 3
36885: PUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL_OW 437
36895: PUSH
36896: LD_INT 1
36898: ARRAY
36899: PUSH
36900: LD_INT 3
36902: ARRAY
36903: EQUAL
36904: AND
36905: IFFALSE 36915
// result := true ;
36907: LD_ADDR_VAR 0 4
36911: PUSH
36912: LD_INT 1
36914: ST_TO_ADDR
// end ; end ;
36915: LD_VAR 0 4
36919: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36920: LD_INT 0
36922: PPUSH
36923: PPUSH
36924: PPUSH
36925: PPUSH
// if not unit or not area then
36926: LD_VAR 0 1
36930: NOT
36931: PUSH
36932: LD_VAR 0 2
36936: NOT
36937: OR
36938: IFFALSE 36942
// exit ;
36940: GO 37106
// tmp := AreaToList ( area , i ) ;
36942: LD_ADDR_VAR 0 6
36946: PUSH
36947: LD_VAR 0 2
36951: PPUSH
36952: LD_VAR 0 5
36956: PPUSH
36957: CALL_OW 517
36961: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36962: LD_ADDR_VAR 0 5
36966: PUSH
36967: DOUBLE
36968: LD_INT 1
36970: DEC
36971: ST_TO_ADDR
36972: LD_VAR 0 6
36976: PUSH
36977: LD_INT 1
36979: ARRAY
36980: PUSH
36981: FOR_TO
36982: IFFALSE 37104
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36984: LD_ADDR_VAR 0 7
36988: PUSH
36989: LD_VAR 0 6
36993: PUSH
36994: LD_INT 1
36996: ARRAY
36997: PUSH
36998: LD_VAR 0 5
37002: ARRAY
37003: PUSH
37004: LD_VAR 0 6
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PUSH
37013: LD_VAR 0 5
37017: ARRAY
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37023: LD_VAR 0 7
37027: PUSH
37028: LD_INT 1
37030: ARRAY
37031: PPUSH
37032: LD_VAR 0 7
37036: PUSH
37037: LD_INT 2
37039: ARRAY
37040: PPUSH
37041: CALL_OW 428
37045: PUSH
37046: LD_INT 0
37048: EQUAL
37049: IFFALSE 37102
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37051: LD_VAR 0 1
37055: PPUSH
37056: LD_VAR 0 7
37060: PUSH
37061: LD_INT 1
37063: ARRAY
37064: PPUSH
37065: LD_VAR 0 7
37069: PUSH
37070: LD_INT 2
37072: ARRAY
37073: PPUSH
37074: LD_VAR 0 3
37078: PPUSH
37079: CALL_OW 48
// result := IsPlaced ( unit ) ;
37083: LD_ADDR_VAR 0 4
37087: PUSH
37088: LD_VAR 0 1
37092: PPUSH
37093: CALL_OW 305
37097: ST_TO_ADDR
// exit ;
37098: POP
37099: POP
37100: GO 37106
// end ; end ;
37102: GO 36981
37104: POP
37105: POP
// end ;
37106: LD_VAR 0 4
37110: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37111: LD_INT 0
37113: PPUSH
37114: PPUSH
37115: PPUSH
// if not side or side > 8 then
37116: LD_VAR 0 1
37120: NOT
37121: PUSH
37122: LD_VAR 0 1
37126: PUSH
37127: LD_INT 8
37129: GREATER
37130: OR
37131: IFFALSE 37135
// exit ;
37133: GO 37322
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37135: LD_ADDR_VAR 0 4
37139: PUSH
37140: LD_INT 22
37142: PUSH
37143: LD_VAR 0 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 21
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PPUSH
37166: CALL_OW 69
37170: ST_TO_ADDR
// if not tmp then
37171: LD_VAR 0 4
37175: NOT
37176: IFFALSE 37180
// exit ;
37178: GO 37322
// enable_addtolog := true ;
37180: LD_ADDR_OWVAR 81
37184: PUSH
37185: LD_INT 1
37187: ST_TO_ADDR
// AddToLog ( [ ) ;
37188: LD_STRING [
37190: PPUSH
37191: CALL_OW 561
// for i in tmp do
37195: LD_ADDR_VAR 0 3
37199: PUSH
37200: LD_VAR 0 4
37204: PUSH
37205: FOR_IN
37206: IFFALSE 37313
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37208: LD_STRING [
37210: PUSH
37211: LD_VAR 0 3
37215: PPUSH
37216: CALL_OW 266
37220: STR
37221: PUSH
37222: LD_STRING , 
37224: STR
37225: PUSH
37226: LD_VAR 0 3
37230: PPUSH
37231: CALL_OW 250
37235: STR
37236: PUSH
37237: LD_STRING , 
37239: STR
37240: PUSH
37241: LD_VAR 0 3
37245: PPUSH
37246: CALL_OW 251
37250: STR
37251: PUSH
37252: LD_STRING , 
37254: STR
37255: PUSH
37256: LD_VAR 0 3
37260: PPUSH
37261: CALL_OW 254
37265: STR
37266: PUSH
37267: LD_STRING , 
37269: STR
37270: PUSH
37271: LD_VAR 0 3
37275: PPUSH
37276: LD_INT 1
37278: PPUSH
37279: CALL_OW 268
37283: STR
37284: PUSH
37285: LD_STRING , 
37287: STR
37288: PUSH
37289: LD_VAR 0 3
37293: PPUSH
37294: LD_INT 2
37296: PPUSH
37297: CALL_OW 268
37301: STR
37302: PUSH
37303: LD_STRING ],
37305: STR
37306: PPUSH
37307: CALL_OW 561
// end ;
37311: GO 37205
37313: POP
37314: POP
// AddToLog ( ]; ) ;
37315: LD_STRING ];
37317: PPUSH
37318: CALL_OW 561
// end ;
37322: LD_VAR 0 2
37326: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37327: LD_INT 0
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
37333: PPUSH
// if not area or not rate or not max then
37334: LD_VAR 0 1
37338: NOT
37339: PUSH
37340: LD_VAR 0 2
37344: NOT
37345: OR
37346: PUSH
37347: LD_VAR 0 4
37351: NOT
37352: OR
37353: IFFALSE 37357
// exit ;
37355: GO 37546
// while 1 do
37357: LD_INT 1
37359: IFFALSE 37546
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37361: LD_ADDR_VAR 0 9
37365: PUSH
37366: LD_VAR 0 1
37370: PPUSH
37371: LD_INT 1
37373: PPUSH
37374: CALL_OW 287
37378: PUSH
37379: LD_INT 10
37381: MUL
37382: ST_TO_ADDR
// r := rate / 10 ;
37383: LD_ADDR_VAR 0 7
37387: PUSH
37388: LD_VAR 0 2
37392: PUSH
37393: LD_INT 10
37395: DIVREAL
37396: ST_TO_ADDR
// time := 1 1$00 ;
37397: LD_ADDR_VAR 0 8
37401: PUSH
37402: LD_INT 2100
37404: ST_TO_ADDR
// if amount < min then
37405: LD_VAR 0 9
37409: PUSH
37410: LD_VAR 0 3
37414: LESS
37415: IFFALSE 37433
// r := r * 2 else
37417: LD_ADDR_VAR 0 7
37421: PUSH
37422: LD_VAR 0 7
37426: PUSH
37427: LD_INT 2
37429: MUL
37430: ST_TO_ADDR
37431: GO 37459
// if amount > max then
37433: LD_VAR 0 9
37437: PUSH
37438: LD_VAR 0 4
37442: GREATER
37443: IFFALSE 37459
// r := r / 2 ;
37445: LD_ADDR_VAR 0 7
37449: PUSH
37450: LD_VAR 0 7
37454: PUSH
37455: LD_INT 2
37457: DIVREAL
37458: ST_TO_ADDR
// time := time / r ;
37459: LD_ADDR_VAR 0 8
37463: PUSH
37464: LD_VAR 0 8
37468: PUSH
37469: LD_VAR 0 7
37473: DIVREAL
37474: ST_TO_ADDR
// if time < 0 then
37475: LD_VAR 0 8
37479: PUSH
37480: LD_INT 0
37482: LESS
37483: IFFALSE 37500
// time := time * - 1 ;
37485: LD_ADDR_VAR 0 8
37489: PUSH
37490: LD_VAR 0 8
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: MUL
37499: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37500: LD_VAR 0 8
37504: PUSH
37505: LD_INT 35
37507: PPUSH
37508: LD_INT 875
37510: PPUSH
37511: CALL_OW 12
37515: PLUS
37516: PPUSH
37517: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37521: LD_INT 1
37523: PPUSH
37524: LD_INT 5
37526: PPUSH
37527: CALL_OW 12
37531: PPUSH
37532: LD_VAR 0 1
37536: PPUSH
37537: LD_INT 1
37539: PPUSH
37540: CALL_OW 55
// end ;
37544: GO 37357
// end ;
37546: LD_VAR 0 5
37550: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37551: LD_INT 0
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
// if not turrets or not factories then
37561: LD_VAR 0 1
37565: NOT
37566: PUSH
37567: LD_VAR 0 2
37571: NOT
37572: OR
37573: IFFALSE 37577
// exit ;
37575: GO 37884
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37577: LD_ADDR_VAR 0 10
37581: PUSH
37582: LD_INT 5
37584: PUSH
37585: LD_INT 6
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 4
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: LD_INT 5
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 24
37619: PUSH
37620: LD_INT 25
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 23
37629: PUSH
37630: LD_INT 27
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 42
37643: PUSH
37644: LD_INT 43
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 44
37653: PUSH
37654: LD_INT 46
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 45
37663: PUSH
37664: LD_INT 47
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: ST_TO_ADDR
// result := [ ] ;
37681: LD_ADDR_VAR 0 3
37685: PUSH
37686: EMPTY
37687: ST_TO_ADDR
// for i in turrets do
37688: LD_ADDR_VAR 0 4
37692: PUSH
37693: LD_VAR 0 1
37697: PUSH
37698: FOR_IN
37699: IFFALSE 37882
// begin nat := GetNation ( i ) ;
37701: LD_ADDR_VAR 0 7
37705: PUSH
37706: LD_VAR 0 4
37710: PPUSH
37711: CALL_OW 248
37715: ST_TO_ADDR
// weapon := 0 ;
37716: LD_ADDR_VAR 0 8
37720: PUSH
37721: LD_INT 0
37723: ST_TO_ADDR
// if not nat then
37724: LD_VAR 0 7
37728: NOT
37729: IFFALSE 37733
// continue ;
37731: GO 37698
// for j in list [ nat ] do
37733: LD_ADDR_VAR 0 5
37737: PUSH
37738: LD_VAR 0 10
37742: PUSH
37743: LD_VAR 0 7
37747: ARRAY
37748: PUSH
37749: FOR_IN
37750: IFFALSE 37791
// if GetBWeapon ( i ) = j [ 1 ] then
37752: LD_VAR 0 4
37756: PPUSH
37757: CALL_OW 269
37761: PUSH
37762: LD_VAR 0 5
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: EQUAL
37771: IFFALSE 37789
// begin weapon := j [ 2 ] ;
37773: LD_ADDR_VAR 0 8
37777: PUSH
37778: LD_VAR 0 5
37782: PUSH
37783: LD_INT 2
37785: ARRAY
37786: ST_TO_ADDR
// break ;
37787: GO 37791
// end ;
37789: GO 37749
37791: POP
37792: POP
// if not weapon then
37793: LD_VAR 0 8
37797: NOT
37798: IFFALSE 37802
// continue ;
37800: GO 37698
// for k in factories do
37802: LD_ADDR_VAR 0 6
37806: PUSH
37807: LD_VAR 0 2
37811: PUSH
37812: FOR_IN
37813: IFFALSE 37878
// begin weapons := AvailableWeaponList ( k ) ;
37815: LD_ADDR_VAR 0 9
37819: PUSH
37820: LD_VAR 0 6
37824: PPUSH
37825: CALL_OW 478
37829: ST_TO_ADDR
// if not weapons then
37830: LD_VAR 0 9
37834: NOT
37835: IFFALSE 37839
// continue ;
37837: GO 37812
// if weapon in weapons then
37839: LD_VAR 0 8
37843: PUSH
37844: LD_VAR 0 9
37848: IN
37849: IFFALSE 37876
// begin result := [ i , weapon ] ;
37851: LD_ADDR_VAR 0 3
37855: PUSH
37856: LD_VAR 0 4
37860: PUSH
37861: LD_VAR 0 8
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// exit ;
37870: POP
37871: POP
37872: POP
37873: POP
37874: GO 37884
// end ; end ;
37876: GO 37812
37878: POP
37879: POP
// end ;
37880: GO 37698
37882: POP
37883: POP
// end ;
37884: LD_VAR 0 3
37888: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37889: LD_INT 0
37891: PPUSH
// if not side or side > 8 then
37892: LD_VAR 0 3
37896: NOT
37897: PUSH
37898: LD_VAR 0 3
37902: PUSH
37903: LD_INT 8
37905: GREATER
37906: OR
37907: IFFALSE 37911
// exit ;
37909: GO 37970
// if not range then
37911: LD_VAR 0 4
37915: NOT
37916: IFFALSE 37927
// range := - 12 ;
37918: LD_ADDR_VAR 0 4
37922: PUSH
37923: LD_INT 12
37925: NEG
37926: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37927: LD_VAR 0 1
37931: PPUSH
37932: LD_VAR 0 2
37936: PPUSH
37937: LD_VAR 0 3
37941: PPUSH
37942: LD_VAR 0 4
37946: PPUSH
37947: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37951: LD_VAR 0 1
37955: PPUSH
37956: LD_VAR 0 2
37960: PPUSH
37961: LD_VAR 0 3
37965: PPUSH
37966: CALL_OW 331
// end ;
37970: LD_VAR 0 5
37974: RET
// export function Video ( mode ) ; begin
37975: LD_INT 0
37977: PPUSH
// ingame_video = mode ;
37978: LD_ADDR_OWVAR 52
37982: PUSH
37983: LD_VAR 0 1
37987: ST_TO_ADDR
// interface_hidden = mode ;
37988: LD_ADDR_OWVAR 54
37992: PUSH
37993: LD_VAR 0 1
37997: ST_TO_ADDR
// end ;
37998: LD_VAR 0 2
38002: RET
// export function Join ( array , element ) ; begin
38003: LD_INT 0
38005: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38006: LD_ADDR_VAR 0 3
38010: PUSH
38011: LD_VAR 0 1
38015: PPUSH
38016: LD_VAR 0 1
38020: PUSH
38021: LD_INT 1
38023: PLUS
38024: PPUSH
38025: LD_VAR 0 2
38029: PPUSH
38030: CALL_OW 1
38034: ST_TO_ADDR
// end ;
38035: LD_VAR 0 3
38039: RET
// export function JoinUnion ( array , element ) ; begin
38040: LD_INT 0
38042: PPUSH
// result := array union element ;
38043: LD_ADDR_VAR 0 3
38047: PUSH
38048: LD_VAR 0 1
38052: PUSH
38053: LD_VAR 0 2
38057: UNION
38058: ST_TO_ADDR
// end ;
38059: LD_VAR 0 3
38063: RET
// export function GetBehemoths ( side ) ; begin
38064: LD_INT 0
38066: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38067: LD_ADDR_VAR 0 2
38071: PUSH
38072: LD_INT 22
38074: PUSH
38075: LD_VAR 0 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 31
38086: PUSH
38087: LD_INT 25
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PPUSH
38098: CALL_OW 69
38102: ST_TO_ADDR
// end ;
38103: LD_VAR 0 2
38107: RET
// export function Shuffle ( array ) ; var i , index ; begin
38108: LD_INT 0
38110: PPUSH
38111: PPUSH
38112: PPUSH
// result := [ ] ;
38113: LD_ADDR_VAR 0 2
38117: PUSH
38118: EMPTY
38119: ST_TO_ADDR
// if not array then
38120: LD_VAR 0 1
38124: NOT
38125: IFFALSE 38129
// exit ;
38127: GO 38228
// Randomize ;
38129: CALL_OW 10
// for i = array downto 1 do
38133: LD_ADDR_VAR 0 3
38137: PUSH
38138: DOUBLE
38139: LD_VAR 0 1
38143: INC
38144: ST_TO_ADDR
38145: LD_INT 1
38147: PUSH
38148: FOR_DOWNTO
38149: IFFALSE 38226
// begin index := rand ( 1 , array ) ;
38151: LD_ADDR_VAR 0 4
38155: PUSH
38156: LD_INT 1
38158: PPUSH
38159: LD_VAR 0 1
38163: PPUSH
38164: CALL_OW 12
38168: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38169: LD_ADDR_VAR 0 2
38173: PUSH
38174: LD_VAR 0 2
38178: PPUSH
38179: LD_VAR 0 2
38183: PUSH
38184: LD_INT 1
38186: PLUS
38187: PPUSH
38188: LD_VAR 0 1
38192: PUSH
38193: LD_VAR 0 4
38197: ARRAY
38198: PPUSH
38199: CALL_OW 2
38203: ST_TO_ADDR
// array := Delete ( array , index ) ;
38204: LD_ADDR_VAR 0 1
38208: PUSH
38209: LD_VAR 0 1
38213: PPUSH
38214: LD_VAR 0 4
38218: PPUSH
38219: CALL_OW 3
38223: ST_TO_ADDR
// end ;
38224: GO 38148
38226: POP
38227: POP
// end ;
38228: LD_VAR 0 2
38232: RET
// export function GetBaseMaterials ( base ) ; begin
38233: LD_INT 0
38235: PPUSH
// result := [ 0 , 0 , 0 ] ;
38236: LD_ADDR_VAR 0 2
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: ST_TO_ADDR
// if not base then
38255: LD_VAR 0 1
38259: NOT
38260: IFFALSE 38264
// exit ;
38262: GO 38313
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38264: LD_ADDR_VAR 0 2
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: LD_INT 1
38276: PPUSH
38277: CALL_OW 275
38281: PUSH
38282: LD_VAR 0 1
38286: PPUSH
38287: LD_INT 2
38289: PPUSH
38290: CALL_OW 275
38294: PUSH
38295: LD_VAR 0 1
38299: PPUSH
38300: LD_INT 3
38302: PPUSH
38303: CALL_OW 275
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: ST_TO_ADDR
// end ;
38313: LD_VAR 0 2
38317: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38318: LD_INT 0
38320: PPUSH
38321: PPUSH
// result := array ;
38322: LD_ADDR_VAR 0 3
38326: PUSH
38327: LD_VAR 0 1
38331: ST_TO_ADDR
// if size >= result then
38332: LD_VAR 0 2
38336: PUSH
38337: LD_VAR 0 3
38341: GREATEREQUAL
38342: IFFALSE 38346
// exit ;
38344: GO 38396
// if size then
38346: LD_VAR 0 2
38350: IFFALSE 38396
// for i := array downto size do
38352: LD_ADDR_VAR 0 4
38356: PUSH
38357: DOUBLE
38358: LD_VAR 0 1
38362: INC
38363: ST_TO_ADDR
38364: LD_VAR 0 2
38368: PUSH
38369: FOR_DOWNTO
38370: IFFALSE 38394
// result := Delete ( result , result ) ;
38372: LD_ADDR_VAR 0 3
38376: PUSH
38377: LD_VAR 0 3
38381: PPUSH
38382: LD_VAR 0 3
38386: PPUSH
38387: CALL_OW 3
38391: ST_TO_ADDR
38392: GO 38369
38394: POP
38395: POP
// end ;
38396: LD_VAR 0 3
38400: RET
// export function ComExit ( unit ) ; var tmp ; begin
38401: LD_INT 0
38403: PPUSH
38404: PPUSH
// if not IsInUnit ( unit ) then
38405: LD_VAR 0 1
38409: PPUSH
38410: CALL_OW 310
38414: NOT
38415: IFFALSE 38419
// exit ;
38417: GO 38479
// tmp := IsInUnit ( unit ) ;
38419: LD_ADDR_VAR 0 3
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 310
38433: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38434: LD_VAR 0 3
38438: PPUSH
38439: CALL_OW 247
38443: PUSH
38444: LD_INT 2
38446: EQUAL
38447: IFFALSE 38460
// ComExitVehicle ( unit ) else
38449: LD_VAR 0 1
38453: PPUSH
38454: CALL_OW 121
38458: GO 38469
// ComExitBuilding ( unit ) ;
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL_OW 122
// result := tmp ;
38469: LD_ADDR_VAR 0 2
38473: PUSH
38474: LD_VAR 0 3
38478: ST_TO_ADDR
// end ;
38479: LD_VAR 0 2
38483: RET
// export function ComExitAll ( units ) ; var i ; begin
38484: LD_INT 0
38486: PPUSH
38487: PPUSH
// if not units then
38488: LD_VAR 0 1
38492: NOT
38493: IFFALSE 38497
// exit ;
38495: GO 38523
// for i in units do
38497: LD_ADDR_VAR 0 3
38501: PUSH
38502: LD_VAR 0 1
38506: PUSH
38507: FOR_IN
38508: IFFALSE 38521
// ComExit ( i ) ;
38510: LD_VAR 0 3
38514: PPUSH
38515: CALL 38401 0 1
38519: GO 38507
38521: POP
38522: POP
// end ;
38523: LD_VAR 0 2
38527: RET
// export function ResetHc ; begin
38528: LD_INT 0
38530: PPUSH
// InitHc ;
38531: CALL_OW 19
// hc_importance := 0 ;
38535: LD_ADDR_OWVAR 32
38539: PUSH
38540: LD_INT 0
38542: ST_TO_ADDR
// end ;
38543: LD_VAR 0 1
38547: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38548: LD_INT 0
38550: PPUSH
38551: PPUSH
38552: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38553: LD_ADDR_VAR 0 6
38557: PUSH
38558: LD_VAR 0 1
38562: PUSH
38563: LD_VAR 0 3
38567: PLUS
38568: PUSH
38569: LD_INT 2
38571: DIV
38572: ST_TO_ADDR
// if _x < 0 then
38573: LD_VAR 0 6
38577: PUSH
38578: LD_INT 0
38580: LESS
38581: IFFALSE 38598
// _x := _x * - 1 ;
38583: LD_ADDR_VAR 0 6
38587: PUSH
38588: LD_VAR 0 6
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: MUL
38597: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38598: LD_ADDR_VAR 0 7
38602: PUSH
38603: LD_VAR 0 2
38607: PUSH
38608: LD_VAR 0 4
38612: PLUS
38613: PUSH
38614: LD_INT 2
38616: DIV
38617: ST_TO_ADDR
// if _y < 0 then
38618: LD_VAR 0 7
38622: PUSH
38623: LD_INT 0
38625: LESS
38626: IFFALSE 38643
// _y := _y * - 1 ;
38628: LD_ADDR_VAR 0 7
38632: PUSH
38633: LD_VAR 0 7
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: MUL
38642: ST_TO_ADDR
// result := [ _x , _y ] ;
38643: LD_ADDR_VAR 0 5
38647: PUSH
38648: LD_VAR 0 6
38652: PUSH
38653: LD_VAR 0 7
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: ST_TO_ADDR
// end ;
38662: LD_VAR 0 5
38666: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
// task := GetTaskList ( unit ) ;
38673: LD_ADDR_VAR 0 7
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 437
38687: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38688: LD_VAR 0 7
38692: NOT
38693: PUSH
38694: LD_VAR 0 1
38698: PPUSH
38699: LD_VAR 0 2
38703: PPUSH
38704: CALL_OW 308
38708: NOT
38709: AND
38710: IFFALSE 38714
// exit ;
38712: GO 38832
// if IsInArea ( unit , area ) then
38714: LD_VAR 0 1
38718: PPUSH
38719: LD_VAR 0 2
38723: PPUSH
38724: CALL_OW 308
38728: IFFALSE 38746
// begin ComMoveToArea ( unit , goAway ) ;
38730: LD_VAR 0 1
38734: PPUSH
38735: LD_VAR 0 3
38739: PPUSH
38740: CALL_OW 113
// exit ;
38744: GO 38832
// end ; if task [ 1 ] [ 1 ] <> M then
38746: LD_VAR 0 7
38750: PUSH
38751: LD_INT 1
38753: ARRAY
38754: PUSH
38755: LD_INT 1
38757: ARRAY
38758: PUSH
38759: LD_STRING M
38761: NONEQUAL
38762: IFFALSE 38766
// exit ;
38764: GO 38832
// x := task [ 1 ] [ 2 ] ;
38766: LD_ADDR_VAR 0 5
38770: PUSH
38771: LD_VAR 0 7
38775: PUSH
38776: LD_INT 1
38778: ARRAY
38779: PUSH
38780: LD_INT 2
38782: ARRAY
38783: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38784: LD_ADDR_VAR 0 6
38788: PUSH
38789: LD_VAR 0 7
38793: PUSH
38794: LD_INT 1
38796: ARRAY
38797: PUSH
38798: LD_INT 3
38800: ARRAY
38801: ST_TO_ADDR
// if InArea ( x , y , area ) then
38802: LD_VAR 0 5
38806: PPUSH
38807: LD_VAR 0 6
38811: PPUSH
38812: LD_VAR 0 2
38816: PPUSH
38817: CALL_OW 309
38821: IFFALSE 38832
// ComStop ( unit ) ;
38823: LD_VAR 0 1
38827: PPUSH
38828: CALL_OW 141
// end ;
38832: LD_VAR 0 4
38836: RET
// export function Abs ( value ) ; begin
38837: LD_INT 0
38839: PPUSH
// result := value ;
38840: LD_ADDR_VAR 0 2
38844: PUSH
38845: LD_VAR 0 1
38849: ST_TO_ADDR
// if value < 0 then
38850: LD_VAR 0 1
38854: PUSH
38855: LD_INT 0
38857: LESS
38858: IFFALSE 38875
// result := value * - 1 ;
38860: LD_ADDR_VAR 0 2
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: MUL
38874: ST_TO_ADDR
// end ;
38875: LD_VAR 0 2
38879: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38880: LD_INT 0
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
// if not unit or not building then
38890: LD_VAR 0 1
38894: NOT
38895: PUSH
38896: LD_VAR 0 2
38900: NOT
38901: OR
38902: IFFALSE 38906
// exit ;
38904: GO 39132
// x := GetX ( building ) ;
38906: LD_ADDR_VAR 0 4
38910: PUSH
38911: LD_VAR 0 2
38915: PPUSH
38916: CALL_OW 250
38920: ST_TO_ADDR
// y := GetY ( building ) ;
38921: LD_ADDR_VAR 0 6
38925: PUSH
38926: LD_VAR 0 2
38930: PPUSH
38931: CALL_OW 251
38935: ST_TO_ADDR
// d := GetDir ( building ) ;
38936: LD_ADDR_VAR 0 8
38940: PUSH
38941: LD_VAR 0 2
38945: PPUSH
38946: CALL_OW 254
38950: ST_TO_ADDR
// r := 4 ;
38951: LD_ADDR_VAR 0 9
38955: PUSH
38956: LD_INT 4
38958: ST_TO_ADDR
// for i := 1 to 5 do
38959: LD_ADDR_VAR 0 10
38963: PUSH
38964: DOUBLE
38965: LD_INT 1
38967: DEC
38968: ST_TO_ADDR
38969: LD_INT 5
38971: PUSH
38972: FOR_TO
38973: IFFALSE 39130
// begin _x := ShiftX ( x , d , r + i ) ;
38975: LD_ADDR_VAR 0 5
38979: PUSH
38980: LD_VAR 0 4
38984: PPUSH
38985: LD_VAR 0 8
38989: PPUSH
38990: LD_VAR 0 9
38994: PUSH
38995: LD_VAR 0 10
38999: PLUS
39000: PPUSH
39001: CALL_OW 272
39005: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39006: LD_ADDR_VAR 0 7
39010: PUSH
39011: LD_VAR 0 6
39015: PPUSH
39016: LD_VAR 0 8
39020: PPUSH
39021: LD_VAR 0 9
39025: PUSH
39026: LD_VAR 0 10
39030: PLUS
39031: PPUSH
39032: CALL_OW 273
39036: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39037: LD_VAR 0 5
39041: PPUSH
39042: LD_VAR 0 7
39046: PPUSH
39047: CALL_OW 488
39051: PUSH
39052: LD_VAR 0 5
39056: PPUSH
39057: LD_VAR 0 7
39061: PPUSH
39062: CALL_OW 428
39066: PPUSH
39067: CALL_OW 247
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: IN
39082: NOT
39083: AND
39084: IFFALSE 39128
// begin ComMoveXY ( unit , _x , _y ) ;
39086: LD_VAR 0 1
39090: PPUSH
39091: LD_VAR 0 5
39095: PPUSH
39096: LD_VAR 0 7
39100: PPUSH
39101: CALL_OW 111
// result := [ _x , _y ] ;
39105: LD_ADDR_VAR 0 3
39109: PUSH
39110: LD_VAR 0 5
39114: PUSH
39115: LD_VAR 0 7
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// exit ;
39124: POP
39125: POP
39126: GO 39132
// end ; end ;
39128: GO 38972
39130: POP
39131: POP
// end ;
39132: LD_VAR 0 3
39136: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39137: LD_INT 0
39139: PPUSH
39140: PPUSH
39141: PPUSH
// result := 0 ;
39142: LD_ADDR_VAR 0 3
39146: PUSH
39147: LD_INT 0
39149: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39150: LD_VAR 0 1
39154: PUSH
39155: LD_INT 0
39157: LESS
39158: PUSH
39159: LD_VAR 0 1
39163: PUSH
39164: LD_INT 8
39166: GREATER
39167: OR
39168: PUSH
39169: LD_VAR 0 2
39173: PUSH
39174: LD_INT 0
39176: LESS
39177: OR
39178: PUSH
39179: LD_VAR 0 2
39183: PUSH
39184: LD_INT 8
39186: GREATER
39187: OR
39188: IFFALSE 39192
// exit ;
39190: GO 39267
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39192: LD_ADDR_VAR 0 4
39196: PUSH
39197: LD_INT 22
39199: PUSH
39200: LD_VAR 0 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL_OW 69
39213: PUSH
39214: FOR_IN
39215: IFFALSE 39265
// begin un := UnitShoot ( i ) ;
39217: LD_ADDR_VAR 0 5
39221: PUSH
39222: LD_VAR 0 4
39226: PPUSH
39227: CALL_OW 504
39231: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39232: LD_VAR 0 5
39236: PPUSH
39237: CALL_OW 255
39241: PUSH
39242: LD_VAR 0 1
39246: EQUAL
39247: IFFALSE 39263
// begin result := un ;
39249: LD_ADDR_VAR 0 3
39253: PUSH
39254: LD_VAR 0 5
39258: ST_TO_ADDR
// exit ;
39259: POP
39260: POP
39261: GO 39267
// end ; end ;
39263: GO 39214
39265: POP
39266: POP
// end ;
39267: LD_VAR 0 3
39271: RET
// export function GetCargoBay ( units ) ; begin
39272: LD_INT 0
39274: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39275: LD_ADDR_VAR 0 2
39279: PUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 34
39290: PUSH
39291: LD_INT 12
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 34
39300: PUSH
39301: LD_INT 51
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 34
39310: PUSH
39311: LD_INT 32
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 34
39320: PUSH
39321: LD_INT 89
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: PPUSH
39335: CALL_OW 72
39339: ST_TO_ADDR
// end ;
39340: LD_VAR 0 2
39344: RET
// export function Negate ( value ) ; begin
39345: LD_INT 0
39347: PPUSH
// result := not value ;
39348: LD_ADDR_VAR 0 2
39352: PUSH
39353: LD_VAR 0 1
39357: NOT
39358: ST_TO_ADDR
// end ;
39359: LD_VAR 0 2
39363: RET
// export function Inc ( value ) ; begin
39364: LD_INT 0
39366: PPUSH
// result := value + 1 ;
39367: LD_ADDR_VAR 0 2
39371: PUSH
39372: LD_VAR 0 1
39376: PUSH
39377: LD_INT 1
39379: PLUS
39380: ST_TO_ADDR
// end ;
39381: LD_VAR 0 2
39385: RET
// export function Dec ( value ) ; begin
39386: LD_INT 0
39388: PPUSH
// result := value - 1 ;
39389: LD_ADDR_VAR 0 2
39393: PUSH
39394: LD_VAR 0 1
39398: PUSH
39399: LD_INT 1
39401: MINUS
39402: ST_TO_ADDR
// end ;
39403: LD_VAR 0 2
39407: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39408: LD_INT 0
39410: PPUSH
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39418: LD_VAR 0 1
39422: PPUSH
39423: LD_VAR 0 2
39427: PPUSH
39428: CALL_OW 488
39432: NOT
39433: PUSH
39434: LD_VAR 0 3
39438: PPUSH
39439: LD_VAR 0 4
39443: PPUSH
39444: CALL_OW 488
39448: NOT
39449: OR
39450: IFFALSE 39463
// begin result := - 1 ;
39452: LD_ADDR_VAR 0 5
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: ST_TO_ADDR
// exit ;
39461: GO 39698
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39463: LD_ADDR_VAR 0 12
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: LD_VAR 0 2
39477: PPUSH
39478: LD_VAR 0 3
39482: PPUSH
39483: LD_VAR 0 4
39487: PPUSH
39488: CALL 38548 0 4
39492: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39493: LD_ADDR_VAR 0 11
39497: PUSH
39498: LD_VAR 0 1
39502: PPUSH
39503: LD_VAR 0 2
39507: PPUSH
39508: LD_VAR 0 12
39512: PUSH
39513: LD_INT 1
39515: ARRAY
39516: PPUSH
39517: LD_VAR 0 12
39521: PUSH
39522: LD_INT 2
39524: ARRAY
39525: PPUSH
39526: CALL_OW 298
39530: ST_TO_ADDR
// distance := 9999 ;
39531: LD_ADDR_VAR 0 10
39535: PUSH
39536: LD_INT 9999
39538: ST_TO_ADDR
// for i := 0 to 5 do
39539: LD_ADDR_VAR 0 6
39543: PUSH
39544: DOUBLE
39545: LD_INT 0
39547: DEC
39548: ST_TO_ADDR
39549: LD_INT 5
39551: PUSH
39552: FOR_TO
39553: IFFALSE 39696
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39555: LD_ADDR_VAR 0 7
39559: PUSH
39560: LD_VAR 0 1
39564: PPUSH
39565: LD_VAR 0 6
39569: PPUSH
39570: LD_VAR 0 11
39574: PPUSH
39575: CALL_OW 272
39579: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39580: LD_ADDR_VAR 0 8
39584: PUSH
39585: LD_VAR 0 2
39589: PPUSH
39590: LD_VAR 0 6
39594: PPUSH
39595: LD_VAR 0 11
39599: PPUSH
39600: CALL_OW 273
39604: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39605: LD_VAR 0 7
39609: PPUSH
39610: LD_VAR 0 8
39614: PPUSH
39615: CALL_OW 488
39619: NOT
39620: IFFALSE 39624
// continue ;
39622: GO 39552
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39624: LD_ADDR_VAR 0 9
39628: PUSH
39629: LD_VAR 0 12
39633: PUSH
39634: LD_INT 1
39636: ARRAY
39637: PPUSH
39638: LD_VAR 0 12
39642: PUSH
39643: LD_INT 2
39645: ARRAY
39646: PPUSH
39647: LD_VAR 0 7
39651: PPUSH
39652: LD_VAR 0 8
39656: PPUSH
39657: CALL_OW 298
39661: ST_TO_ADDR
// if tmp < distance then
39662: LD_VAR 0 9
39666: PUSH
39667: LD_VAR 0 10
39671: LESS
39672: IFFALSE 39694
// begin result := i ;
39674: LD_ADDR_VAR 0 5
39678: PUSH
39679: LD_VAR 0 6
39683: ST_TO_ADDR
// distance := tmp ;
39684: LD_ADDR_VAR 0 10
39688: PUSH
39689: LD_VAR 0 9
39693: ST_TO_ADDR
// end ; end ;
39694: GO 39552
39696: POP
39697: POP
// end ;
39698: LD_VAR 0 5
39702: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39703: LD_INT 0
39705: PPUSH
39706: PPUSH
// if not driver or not IsInUnit ( driver ) then
39707: LD_VAR 0 1
39711: NOT
39712: PUSH
39713: LD_VAR 0 1
39717: PPUSH
39718: CALL_OW 310
39722: NOT
39723: OR
39724: IFFALSE 39728
// exit ;
39726: GO 39818
// vehicle := IsInUnit ( driver ) ;
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 310
39742: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39743: LD_VAR 0 1
39747: PPUSH
39748: LD_STRING \
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: PUSH
39778: LD_STRING E
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_VAR 0 3
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PPUSH
39814: CALL_OW 446
// end ;
39818: LD_VAR 0 2
39822: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39823: LD_INT 0
39825: PPUSH
39826: PPUSH
// if not driver or not IsInUnit ( driver ) then
39827: LD_VAR 0 1
39831: NOT
39832: PUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: CALL_OW 310
39842: NOT
39843: OR
39844: IFFALSE 39848
// exit ;
39846: GO 39938
// vehicle := IsInUnit ( driver ) ;
39848: LD_ADDR_VAR 0 3
39852: PUSH
39853: LD_VAR 0 1
39857: PPUSH
39858: CALL_OW 310
39862: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39863: LD_VAR 0 1
39867: PPUSH
39868: LD_STRING \
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: PUSH
39898: LD_STRING E
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_VAR 0 3
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PPUSH
39934: CALL_OW 447
// end ;
39938: LD_VAR 0 2
39942: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39943: LD_INT 0
39945: PPUSH
39946: PPUSH
39947: PPUSH
// tmp := [ ] ;
39948: LD_ADDR_VAR 0 5
39952: PUSH
39953: EMPTY
39954: ST_TO_ADDR
// for i in units do
39955: LD_ADDR_VAR 0 4
39959: PUSH
39960: LD_VAR 0 1
39964: PUSH
39965: FOR_IN
39966: IFFALSE 40004
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: LD_VAR 0 5
39977: PPUSH
39978: LD_VAR 0 5
39982: PUSH
39983: LD_INT 1
39985: PLUS
39986: PPUSH
39987: LD_VAR 0 4
39991: PPUSH
39992: CALL_OW 256
39996: PPUSH
39997: CALL_OW 2
40001: ST_TO_ADDR
40002: GO 39965
40004: POP
40005: POP
// if not tmp then
40006: LD_VAR 0 5
40010: NOT
40011: IFFALSE 40015
// exit ;
40013: GO 40063
// if asc then
40015: LD_VAR 0 2
40019: IFFALSE 40043
// result := SortListByListAsc ( units , tmp ) else
40021: LD_ADDR_VAR 0 3
40025: PUSH
40026: LD_VAR 0 1
40030: PPUSH
40031: LD_VAR 0 5
40035: PPUSH
40036: CALL_OW 76
40040: ST_TO_ADDR
40041: GO 40063
// result := SortListByListDesc ( units , tmp ) ;
40043: LD_ADDR_VAR 0 3
40047: PUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: LD_VAR 0 5
40057: PPUSH
40058: CALL_OW 77
40062: ST_TO_ADDR
// end ;
40063: LD_VAR 0 3
40067: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40068: LD_INT 0
40070: PPUSH
40071: PPUSH
// task := GetTaskList ( mech ) ;
40072: LD_ADDR_VAR 0 4
40076: PUSH
40077: LD_VAR 0 1
40081: PPUSH
40082: CALL_OW 437
40086: ST_TO_ADDR
// if not task then
40087: LD_VAR 0 4
40091: NOT
40092: IFFALSE 40096
// exit ;
40094: GO 40138
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_VAR 0 4
40105: PUSH
40106: LD_INT 1
40108: ARRAY
40109: PUSH
40110: LD_INT 1
40112: ARRAY
40113: PUSH
40114: LD_STRING r
40116: EQUAL
40117: PUSH
40118: LD_VAR 0 4
40122: PUSH
40123: LD_INT 1
40125: ARRAY
40126: PUSH
40127: LD_INT 4
40129: ARRAY
40130: PUSH
40131: LD_VAR 0 2
40135: EQUAL
40136: AND
40137: ST_TO_ADDR
// end ;
40138: LD_VAR 0 3
40142: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40143: LD_INT 0
40145: PPUSH
// SetDir ( unit , d ) ;
40146: LD_VAR 0 1
40150: PPUSH
40151: LD_VAR 0 4
40155: PPUSH
40156: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40160: LD_VAR 0 1
40164: PPUSH
40165: LD_VAR 0 2
40169: PPUSH
40170: LD_VAR 0 3
40174: PPUSH
40175: LD_VAR 0 5
40179: PPUSH
40180: CALL_OW 48
// end ;
40184: LD_VAR 0 6
40188: RET
// export function ToNaturalNumber ( number ) ; begin
40189: LD_INT 0
40191: PPUSH
// result := number div 1 ;
40192: LD_ADDR_VAR 0 2
40196: PUSH
40197: LD_VAR 0 1
40201: PUSH
40202: LD_INT 1
40204: DIV
40205: ST_TO_ADDR
// if number < 0 then
40206: LD_VAR 0 1
40210: PUSH
40211: LD_INT 0
40213: LESS
40214: IFFALSE 40224
// result := 0 ;
40216: LD_ADDR_VAR 0 2
40220: PUSH
40221: LD_INT 0
40223: ST_TO_ADDR
// end ;
40224: LD_VAR 0 2
40228: RET
// export function SortByClass ( units , class ) ; var un ; begin
40229: LD_INT 0
40231: PPUSH
40232: PPUSH
// if not units or not class then
40233: LD_VAR 0 1
40237: NOT
40238: PUSH
40239: LD_VAR 0 2
40243: NOT
40244: OR
40245: IFFALSE 40249
// exit ;
40247: GO 40344
// result := [ ] ;
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: EMPTY
40255: ST_TO_ADDR
// for un in units do
40256: LD_ADDR_VAR 0 4
40260: PUSH
40261: LD_VAR 0 1
40265: PUSH
40266: FOR_IN
40267: IFFALSE 40342
// if GetClass ( un ) = class then
40269: LD_VAR 0 4
40273: PPUSH
40274: CALL_OW 257
40278: PUSH
40279: LD_VAR 0 2
40283: EQUAL
40284: IFFALSE 40311
// result := Insert ( result , 1 , un ) else
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_VAR 0 3
40295: PPUSH
40296: LD_INT 1
40298: PPUSH
40299: LD_VAR 0 4
40303: PPUSH
40304: CALL_OW 2
40308: ST_TO_ADDR
40309: GO 40340
// result := Replace ( result , result + 1 , un ) ;
40311: LD_ADDR_VAR 0 3
40315: PUSH
40316: LD_VAR 0 3
40320: PPUSH
40321: LD_VAR 0 3
40325: PUSH
40326: LD_INT 1
40328: PLUS
40329: PPUSH
40330: LD_VAR 0 4
40334: PPUSH
40335: CALL_OW 1
40339: ST_TO_ADDR
40340: GO 40266
40342: POP
40343: POP
// end ;
40344: LD_VAR 0 3
40348: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40349: LD_INT 0
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
// result := [ ] ;
40358: LD_ADDR_VAR 0 4
40362: PUSH
40363: EMPTY
40364: ST_TO_ADDR
// if x - r < 0 then
40365: LD_VAR 0 1
40369: PUSH
40370: LD_VAR 0 3
40374: MINUS
40375: PUSH
40376: LD_INT 0
40378: LESS
40379: IFFALSE 40391
// min_x := 0 else
40381: LD_ADDR_VAR 0 8
40385: PUSH
40386: LD_INT 0
40388: ST_TO_ADDR
40389: GO 40407
// min_x := x - r ;
40391: LD_ADDR_VAR 0 8
40395: PUSH
40396: LD_VAR 0 1
40400: PUSH
40401: LD_VAR 0 3
40405: MINUS
40406: ST_TO_ADDR
// if y - r < 0 then
40407: LD_VAR 0 2
40411: PUSH
40412: LD_VAR 0 3
40416: MINUS
40417: PUSH
40418: LD_INT 0
40420: LESS
40421: IFFALSE 40433
// min_y := 0 else
40423: LD_ADDR_VAR 0 7
40427: PUSH
40428: LD_INT 0
40430: ST_TO_ADDR
40431: GO 40449
// min_y := y - r ;
40433: LD_ADDR_VAR 0 7
40437: PUSH
40438: LD_VAR 0 2
40442: PUSH
40443: LD_VAR 0 3
40447: MINUS
40448: ST_TO_ADDR
// max_x := x + r ;
40449: LD_ADDR_VAR 0 9
40453: PUSH
40454: LD_VAR 0 1
40458: PUSH
40459: LD_VAR 0 3
40463: PLUS
40464: ST_TO_ADDR
// max_y := y + r ;
40465: LD_ADDR_VAR 0 10
40469: PUSH
40470: LD_VAR 0 2
40474: PUSH
40475: LD_VAR 0 3
40479: PLUS
40480: ST_TO_ADDR
// for _x = min_x to max_x do
40481: LD_ADDR_VAR 0 5
40485: PUSH
40486: DOUBLE
40487: LD_VAR 0 8
40491: DEC
40492: ST_TO_ADDR
40493: LD_VAR 0 9
40497: PUSH
40498: FOR_TO
40499: IFFALSE 40600
// for _y = min_y to max_y do
40501: LD_ADDR_VAR 0 6
40505: PUSH
40506: DOUBLE
40507: LD_VAR 0 7
40511: DEC
40512: ST_TO_ADDR
40513: LD_VAR 0 10
40517: PUSH
40518: FOR_TO
40519: IFFALSE 40596
// begin if not ValidHex ( _x , _y ) then
40521: LD_VAR 0 5
40525: PPUSH
40526: LD_VAR 0 6
40530: PPUSH
40531: CALL_OW 488
40535: NOT
40536: IFFALSE 40540
// continue ;
40538: GO 40518
// if GetResourceTypeXY ( _x , _y ) then
40540: LD_VAR 0 5
40544: PPUSH
40545: LD_VAR 0 6
40549: PPUSH
40550: CALL_OW 283
40554: IFFALSE 40594
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40556: LD_ADDR_VAR 0 4
40560: PUSH
40561: LD_VAR 0 4
40565: PPUSH
40566: LD_VAR 0 4
40570: PUSH
40571: LD_INT 1
40573: PLUS
40574: PPUSH
40575: LD_VAR 0 5
40579: PUSH
40580: LD_VAR 0 6
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PPUSH
40589: CALL_OW 1
40593: ST_TO_ADDR
// end ;
40594: GO 40518
40596: POP
40597: POP
40598: GO 40498
40600: POP
40601: POP
// end ;
40602: LD_VAR 0 4
40606: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40607: LD_INT 0
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
40616: PPUSH
// if not units then
40617: LD_VAR 0 1
40621: NOT
40622: IFFALSE 40626
// exit ;
40624: GO 41150
// result := UnitFilter ( units , [ f_ok ] ) ;
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_VAR 0 1
40635: PPUSH
40636: LD_INT 50
40638: PUSH
40639: EMPTY
40640: LIST
40641: PPUSH
40642: CALL_OW 72
40646: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40647: LD_ADDR_VAR 0 8
40651: PUSH
40652: LD_VAR 0 1
40656: PUSH
40657: LD_INT 1
40659: ARRAY
40660: PPUSH
40661: CALL_OW 255
40665: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40666: LD_ADDR_VAR 0 10
40670: PUSH
40671: LD_INT 29
40673: PUSH
40674: LD_INT 91
40676: PUSH
40677: LD_INT 49
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
// if not result then
40685: LD_VAR 0 3
40689: NOT
40690: IFFALSE 40694
// exit ;
40692: GO 41150
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40694: LD_ADDR_VAR 0 5
40698: PUSH
40699: LD_INT 81
40701: PUSH
40702: LD_VAR 0 8
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PPUSH
40711: CALL_OW 69
40715: ST_TO_ADDR
// for i in result do
40716: LD_ADDR_VAR 0 4
40720: PUSH
40721: LD_VAR 0 3
40725: PUSH
40726: FOR_IN
40727: IFFALSE 41148
// begin tag := GetTag ( i ) + 1 ;
40729: LD_ADDR_VAR 0 9
40733: PUSH
40734: LD_VAR 0 4
40738: PPUSH
40739: CALL_OW 110
40743: PUSH
40744: LD_INT 1
40746: PLUS
40747: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40748: LD_ADDR_VAR 0 7
40752: PUSH
40753: LD_VAR 0 4
40757: PPUSH
40758: CALL_OW 250
40762: PPUSH
40763: LD_VAR 0 4
40767: PPUSH
40768: CALL_OW 251
40772: PPUSH
40773: LD_INT 6
40775: PPUSH
40776: CALL 40349 0 3
40780: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40781: LD_VAR 0 4
40785: PPUSH
40786: CALL_OW 247
40790: PUSH
40791: LD_INT 2
40793: EQUAL
40794: PUSH
40795: LD_VAR 0 7
40799: AND
40800: PUSH
40801: LD_VAR 0 4
40805: PPUSH
40806: CALL_OW 264
40810: PUSH
40811: LD_VAR 0 10
40815: IN
40816: NOT
40817: AND
40818: IFFALSE 40857
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40820: LD_VAR 0 4
40824: PPUSH
40825: LD_VAR 0 7
40829: PUSH
40830: LD_INT 1
40832: ARRAY
40833: PUSH
40834: LD_INT 1
40836: ARRAY
40837: PPUSH
40838: LD_VAR 0 7
40842: PUSH
40843: LD_INT 1
40845: ARRAY
40846: PUSH
40847: LD_INT 2
40849: ARRAY
40850: PPUSH
40851: CALL_OW 116
40855: GO 41146
// if path > tag then
40857: LD_VAR 0 2
40861: PUSH
40862: LD_VAR 0 9
40866: GREATER
40867: IFFALSE 41075
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40869: LD_ADDR_VAR 0 6
40873: PUSH
40874: LD_VAR 0 5
40878: PPUSH
40879: LD_INT 91
40881: PUSH
40882: LD_VAR 0 4
40886: PUSH
40887: LD_INT 8
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: PPUSH
40895: CALL_OW 72
40899: ST_TO_ADDR
// if nearEnemy then
40900: LD_VAR 0 6
40904: IFFALSE 40973
// begin if GetWeapon ( i ) = ru_time_lapser then
40906: LD_VAR 0 4
40910: PPUSH
40911: CALL_OW 264
40915: PUSH
40916: LD_INT 49
40918: EQUAL
40919: IFFALSE 40947
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40921: LD_VAR 0 4
40925: PPUSH
40926: LD_VAR 0 6
40930: PPUSH
40931: LD_VAR 0 4
40935: PPUSH
40936: CALL_OW 74
40940: PPUSH
40941: CALL_OW 112
40945: GO 40971
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40947: LD_VAR 0 4
40951: PPUSH
40952: LD_VAR 0 6
40956: PPUSH
40957: LD_VAR 0 4
40961: PPUSH
40962: CALL_OW 74
40966: PPUSH
40967: CALL_OW 115
// end else
40971: GO 41073
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40973: LD_VAR 0 4
40977: PPUSH
40978: LD_VAR 0 2
40982: PUSH
40983: LD_VAR 0 9
40987: ARRAY
40988: PUSH
40989: LD_INT 1
40991: ARRAY
40992: PPUSH
40993: LD_VAR 0 2
40997: PUSH
40998: LD_VAR 0 9
41002: ARRAY
41003: PUSH
41004: LD_INT 2
41006: ARRAY
41007: PPUSH
41008: CALL_OW 297
41012: PUSH
41013: LD_INT 6
41015: GREATER
41016: IFFALSE 41059
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41018: LD_VAR 0 4
41022: PPUSH
41023: LD_VAR 0 2
41027: PUSH
41028: LD_VAR 0 9
41032: ARRAY
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: PPUSH
41038: LD_VAR 0 2
41042: PUSH
41043: LD_VAR 0 9
41047: ARRAY
41048: PUSH
41049: LD_INT 2
41051: ARRAY
41052: PPUSH
41053: CALL_OW 114
41057: GO 41073
// SetTag ( i , tag ) ;
41059: LD_VAR 0 4
41063: PPUSH
41064: LD_VAR 0 9
41068: PPUSH
41069: CALL_OW 109
// end else
41073: GO 41146
// if enemy then
41075: LD_VAR 0 5
41079: IFFALSE 41146
// begin if GetWeapon ( i ) = ru_time_lapser then
41081: LD_VAR 0 4
41085: PPUSH
41086: CALL_OW 264
41090: PUSH
41091: LD_INT 49
41093: EQUAL
41094: IFFALSE 41122
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41096: LD_VAR 0 4
41100: PPUSH
41101: LD_VAR 0 5
41105: PPUSH
41106: LD_VAR 0 4
41110: PPUSH
41111: CALL_OW 74
41115: PPUSH
41116: CALL_OW 112
41120: GO 41146
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41122: LD_VAR 0 4
41126: PPUSH
41127: LD_VAR 0 5
41131: PPUSH
41132: LD_VAR 0 4
41136: PPUSH
41137: CALL_OW 74
41141: PPUSH
41142: CALL_OW 115
// end ; end ;
41146: GO 40726
41148: POP
41149: POP
// end ;
41150: LD_VAR 0 3
41154: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41155: LD_INT 0
41157: PPUSH
41158: PPUSH
41159: PPUSH
// if not unit or IsInUnit ( unit ) then
41160: LD_VAR 0 1
41164: NOT
41165: PUSH
41166: LD_VAR 0 1
41170: PPUSH
41171: CALL_OW 310
41175: OR
41176: IFFALSE 41180
// exit ;
41178: GO 41271
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41180: LD_ADDR_VAR 0 4
41184: PUSH
41185: LD_VAR 0 1
41189: PPUSH
41190: CALL_OW 250
41194: PPUSH
41195: LD_VAR 0 2
41199: PPUSH
41200: LD_INT 1
41202: PPUSH
41203: CALL_OW 272
41207: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41208: LD_ADDR_VAR 0 5
41212: PUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 251
41222: PPUSH
41223: LD_VAR 0 2
41227: PPUSH
41228: LD_INT 1
41230: PPUSH
41231: CALL_OW 273
41235: ST_TO_ADDR
// if ValidHex ( x , y ) then
41236: LD_VAR 0 4
41240: PPUSH
41241: LD_VAR 0 5
41245: PPUSH
41246: CALL_OW 488
41250: IFFALSE 41271
// ComTurnXY ( unit , x , y ) ;
41252: LD_VAR 0 1
41256: PPUSH
41257: LD_VAR 0 4
41261: PPUSH
41262: LD_VAR 0 5
41266: PPUSH
41267: CALL_OW 118
// end ;
41271: LD_VAR 0 3
41275: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41276: LD_INT 0
41278: PPUSH
41279: PPUSH
// result := false ;
41280: LD_ADDR_VAR 0 3
41284: PUSH
41285: LD_INT 0
41287: ST_TO_ADDR
// if not units then
41288: LD_VAR 0 2
41292: NOT
41293: IFFALSE 41297
// exit ;
41295: GO 41342
// for i in units do
41297: LD_ADDR_VAR 0 4
41301: PUSH
41302: LD_VAR 0 2
41306: PUSH
41307: FOR_IN
41308: IFFALSE 41340
// if See ( side , i ) then
41310: LD_VAR 0 1
41314: PPUSH
41315: LD_VAR 0 4
41319: PPUSH
41320: CALL_OW 292
41324: IFFALSE 41338
// begin result := true ;
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_INT 1
41333: ST_TO_ADDR
// exit ;
41334: POP
41335: POP
41336: GO 41342
// end ;
41338: GO 41307
41340: POP
41341: POP
// end ;
41342: LD_VAR 0 3
41346: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41347: LD_INT 0
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
// if not unit or not points then
41353: LD_VAR 0 1
41357: NOT
41358: PUSH
41359: LD_VAR 0 2
41363: NOT
41364: OR
41365: IFFALSE 41369
// exit ;
41367: GO 41459
// dist := 99999 ;
41369: LD_ADDR_VAR 0 5
41373: PUSH
41374: LD_INT 99999
41376: ST_TO_ADDR
// for i in points do
41377: LD_ADDR_VAR 0 4
41381: PUSH
41382: LD_VAR 0 2
41386: PUSH
41387: FOR_IN
41388: IFFALSE 41457
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41390: LD_ADDR_VAR 0 6
41394: PUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: LD_VAR 0 4
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PPUSH
41409: LD_VAR 0 4
41413: PUSH
41414: LD_INT 2
41416: ARRAY
41417: PPUSH
41418: CALL_OW 297
41422: ST_TO_ADDR
// if tmpDist < dist then
41423: LD_VAR 0 6
41427: PUSH
41428: LD_VAR 0 5
41432: LESS
41433: IFFALSE 41455
// begin result := i ;
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_VAR 0 4
41444: ST_TO_ADDR
// dist := tmpDist ;
41445: LD_ADDR_VAR 0 5
41449: PUSH
41450: LD_VAR 0 6
41454: ST_TO_ADDR
// end ; end ;
41455: GO 41387
41457: POP
41458: POP
// end ;
41459: LD_VAR 0 3
41463: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41464: LD_INT 0
41466: PPUSH
// uc_side := side ;
41467: LD_ADDR_OWVAR 20
41471: PUSH
41472: LD_VAR 0 1
41476: ST_TO_ADDR
// uc_nation := 3 ;
41477: LD_ADDR_OWVAR 21
41481: PUSH
41482: LD_INT 3
41484: ST_TO_ADDR
// vc_chassis := 25 ;
41485: LD_ADDR_OWVAR 37
41489: PUSH
41490: LD_INT 25
41492: ST_TO_ADDR
// vc_engine := engine_siberite ;
41493: LD_ADDR_OWVAR 39
41497: PUSH
41498: LD_INT 3
41500: ST_TO_ADDR
// vc_control := control_computer ;
41501: LD_ADDR_OWVAR 38
41505: PUSH
41506: LD_INT 3
41508: ST_TO_ADDR
// vc_weapon := 59 ;
41509: LD_ADDR_OWVAR 40
41513: PUSH
41514: LD_INT 59
41516: ST_TO_ADDR
// result := CreateVehicle ;
41517: LD_ADDR_VAR 0 5
41521: PUSH
41522: CALL_OW 45
41526: ST_TO_ADDR
// SetDir ( result , d ) ;
41527: LD_VAR 0 5
41531: PPUSH
41532: LD_VAR 0 4
41536: PPUSH
41537: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41541: LD_VAR 0 5
41545: PPUSH
41546: LD_VAR 0 2
41550: PPUSH
41551: LD_VAR 0 3
41555: PPUSH
41556: LD_INT 0
41558: PPUSH
41559: CALL_OW 48
// end ;
41563: LD_VAR 0 5
41567: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41568: LD_INT 0
41570: PPUSH
41571: PPUSH
41572: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41573: LD_ADDR_VAR 0 2
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41596: LD_VAR 0 1
41600: NOT
41601: PUSH
41602: LD_VAR 0 1
41606: PPUSH
41607: CALL_OW 264
41611: PUSH
41612: LD_INT 12
41614: PUSH
41615: LD_INT 51
41617: PUSH
41618: LD_INT 32
41620: PUSH
41621: LD_INT 89
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: IN
41630: NOT
41631: OR
41632: IFFALSE 41636
// exit ;
41634: GO 41734
// for i := 1 to 3 do
41636: LD_ADDR_VAR 0 3
41640: PUSH
41641: DOUBLE
41642: LD_INT 1
41644: DEC
41645: ST_TO_ADDR
41646: LD_INT 3
41648: PUSH
41649: FOR_TO
41650: IFFALSE 41732
// begin tmp := GetCargo ( cargo , i ) ;
41652: LD_ADDR_VAR 0 4
41656: PUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: LD_VAR 0 3
41666: PPUSH
41667: CALL_OW 289
41671: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41672: LD_ADDR_VAR 0 2
41676: PUSH
41677: LD_VAR 0 2
41681: PPUSH
41682: LD_VAR 0 3
41686: PPUSH
41687: LD_VAR 0 4
41691: PPUSH
41692: CALL_OW 1
41696: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41697: LD_ADDR_VAR 0 2
41701: PUSH
41702: LD_VAR 0 2
41706: PPUSH
41707: LD_INT 4
41709: PPUSH
41710: LD_VAR 0 2
41714: PUSH
41715: LD_INT 4
41717: ARRAY
41718: PUSH
41719: LD_VAR 0 4
41723: PLUS
41724: PPUSH
41725: CALL_OW 1
41729: ST_TO_ADDR
// end ;
41730: GO 41649
41732: POP
41733: POP
// end ;
41734: LD_VAR 0 2
41738: RET
// export function Length ( array ) ; begin
41739: LD_INT 0
41741: PPUSH
// result := array + 0 ;
41742: LD_ADDR_VAR 0 2
41746: PUSH
41747: LD_VAR 0 1
41751: PUSH
41752: LD_INT 0
41754: PLUS
41755: ST_TO_ADDR
// end ;
41756: LD_VAR 0 2
41760: RET
// export function PrepareArray ( array ) ; begin
41761: LD_INT 0
41763: PPUSH
// result := array diff 0 ;
41764: LD_ADDR_VAR 0 2
41768: PUSH
41769: LD_VAR 0 1
41773: PUSH
41774: LD_INT 0
41776: DIFF
41777: ST_TO_ADDR
// if not result [ 1 ] then
41778: LD_VAR 0 2
41782: PUSH
41783: LD_INT 1
41785: ARRAY
41786: NOT
41787: IFFALSE 41807
// result := Delete ( result , 1 ) ;
41789: LD_ADDR_VAR 0 2
41793: PUSH
41794: LD_VAR 0 2
41798: PPUSH
41799: LD_INT 1
41801: PPUSH
41802: CALL_OW 3
41806: ST_TO_ADDR
// end ;
41807: LD_VAR 0 2
41811: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41812: LD_INT 0
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
// sibRocketRange := 25 ;
41818: LD_ADDR_VAR 0 6
41822: PUSH
41823: LD_INT 25
41825: ST_TO_ADDR
// result := false ;
41826: LD_ADDR_VAR 0 4
41830: PUSH
41831: LD_INT 0
41833: ST_TO_ADDR
// for i := 0 to 5 do
41834: LD_ADDR_VAR 0 5
41838: PUSH
41839: DOUBLE
41840: LD_INT 0
41842: DEC
41843: ST_TO_ADDR
41844: LD_INT 5
41846: PUSH
41847: FOR_TO
41848: IFFALSE 41915
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41850: LD_VAR 0 1
41854: PPUSH
41855: LD_VAR 0 5
41859: PPUSH
41860: LD_VAR 0 6
41864: PPUSH
41865: CALL_OW 272
41869: PPUSH
41870: LD_VAR 0 2
41874: PPUSH
41875: LD_VAR 0 5
41879: PPUSH
41880: LD_VAR 0 6
41884: PPUSH
41885: CALL_OW 273
41889: PPUSH
41890: LD_VAR 0 3
41894: PPUSH
41895: CALL_OW 309
41899: IFFALSE 41913
// begin result := true ;
41901: LD_ADDR_VAR 0 4
41905: PUSH
41906: LD_INT 1
41908: ST_TO_ADDR
// exit ;
41909: POP
41910: POP
41911: GO 41917
// end ;
41913: GO 41847
41915: POP
41916: POP
// end ;
41917: LD_VAR 0 4
41921: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41922: LD_INT 0
41924: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41925: LD_VAR 0 1
41929: PPUSH
41930: LD_VAR 0 2
41934: PPUSH
41935: LD_INT 0
41937: PPUSH
41938: LD_INT 0
41940: PPUSH
41941: LD_INT 1
41943: PPUSH
41944: LD_INT 0
41946: PPUSH
41947: CALL_OW 587
// end ; end_of_file end_of_file
41951: LD_VAR 0 3
41955: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_VAR 0 2
41965: PPUSH
41966: LD_VAR 0 3
41970: PPUSH
41971: LD_VAR 0 4
41975: PPUSH
41976: LD_VAR 0 5
41980: PPUSH
41981: LD_VAR 0 6
41985: PPUSH
41986: CALL 42170 0 6
// end ;
41990: PPOPN 6
41992: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
41993: LD_INT 0
41995: PPUSH
// begin if not units then
41996: LD_VAR 0 1
42000: NOT
42001: IFFALSE 42005
// exit ;
42003: GO 42005
// end ;
42005: PPOPN 7
42007: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
42008: CALL 42074 0 0
// end ; end_of_file
42012: PPOPN 1
42014: END
// export globalGameSaveCounter ; every 0 0$1 do
42015: GO 42017
42017: DISABLE
// begin enable ;
42018: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
42019: LD_STRING updateTimer(
42021: PUSH
42022: LD_OWVAR 1
42026: STR
42027: PUSH
42028: LD_STRING );
42030: STR
42031: PPUSH
42032: CALL_OW 559
// end ;
42036: END
// every 0 0$1 do
42037: GO 42039
42039: DISABLE
// begin globalGameSaveCounter := 0 ;
42040: LD_ADDR_EXP 22
42044: PUSH
42045: LD_INT 0
42047: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
42048: LD_STRING setGameSaveCounter(0)
42050: PPUSH
42051: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
42055: LD_STRING initStreamRollete();
42057: PPUSH
42058: CALL_OW 559
// InitStreamMode ;
42062: CALL 43388 0 0
// DefineStreamItems ( false ) ;
42066: LD_INT 0
42068: PPUSH
42069: CALL 43852 0 1
// end ;
42073: END
// export function SOS_MapStart ( ) ; begin
42074: LD_INT 0
42076: PPUSH
// if streamModeActive then
42077: LD_EXP 23
42081: IFFALSE 42090
// DefineStreamItems ( true ) ;
42083: LD_INT 1
42085: PPUSH
42086: CALL 43852 0 1
// UpdateLuaVariables ( ) ;
42090: CALL 42107 0 0
// UpdateFactoryWaypoints ( ) ;
42094: CALL 56713 0 0
// UpdateWarehouseGatheringPoints ( ) ;
42098: CALL 56970 0 0
// end ;
42102: LD_VAR 0 1
42106: RET
// function UpdateLuaVariables ( ) ; begin
42107: LD_INT 0
42109: PPUSH
// if globalGameSaveCounter then
42110: LD_EXP 22
42114: IFFALSE 42148
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
42116: LD_ADDR_EXP 22
42120: PUSH
42121: LD_EXP 22
42125: PPUSH
42126: CALL 39364 0 1
42130: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
42131: LD_STRING setGameSaveCounter(
42133: PUSH
42134: LD_EXP 22
42138: STR
42139: PUSH
42140: LD_STRING )
42142: STR
42143: PPUSH
42144: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
42148: LD_STRING setGameDifficulty(
42150: PUSH
42151: LD_OWVAR 67
42155: STR
42156: PUSH
42157: LD_STRING )
42159: STR
42160: PPUSH
42161: CALL_OW 559
// end ;
42165: LD_VAR 0 1
42169: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42170: LD_INT 0
42172: PPUSH
// if p2 = stream_mode then
42173: LD_VAR 0 2
42177: PUSH
42178: LD_INT 100
42180: EQUAL
42181: IFFALSE 43184
// begin if not StreamModeActive then
42183: LD_EXP 23
42187: NOT
42188: IFFALSE 42198
// StreamModeActive := true ;
42190: LD_ADDR_EXP 23
42194: PUSH
42195: LD_INT 1
42197: ST_TO_ADDR
// if p3 = 0 then
42198: LD_VAR 0 3
42202: PUSH
42203: LD_INT 0
42205: EQUAL
42206: IFFALSE 42212
// InitStreamMode ;
42208: CALL 43388 0 0
// if p3 = 1 then
42212: LD_VAR 0 3
42216: PUSH
42217: LD_INT 1
42219: EQUAL
42220: IFFALSE 42230
// sRocket := true ;
42222: LD_ADDR_EXP 28
42226: PUSH
42227: LD_INT 1
42229: ST_TO_ADDR
// if p3 = 2 then
42230: LD_VAR 0 3
42234: PUSH
42235: LD_INT 2
42237: EQUAL
42238: IFFALSE 42248
// sSpeed := true ;
42240: LD_ADDR_EXP 27
42244: PUSH
42245: LD_INT 1
42247: ST_TO_ADDR
// if p3 = 3 then
42248: LD_VAR 0 3
42252: PUSH
42253: LD_INT 3
42255: EQUAL
42256: IFFALSE 42266
// sEngine := true ;
42258: LD_ADDR_EXP 29
42262: PUSH
42263: LD_INT 1
42265: ST_TO_ADDR
// if p3 = 4 then
42266: LD_VAR 0 3
42270: PUSH
42271: LD_INT 4
42273: EQUAL
42274: IFFALSE 42284
// sSpec := true ;
42276: LD_ADDR_EXP 26
42280: PUSH
42281: LD_INT 1
42283: ST_TO_ADDR
// if p3 = 5 then
42284: LD_VAR 0 3
42288: PUSH
42289: LD_INT 5
42291: EQUAL
42292: IFFALSE 42302
// sLevel := true ;
42294: LD_ADDR_EXP 30
42298: PUSH
42299: LD_INT 1
42301: ST_TO_ADDR
// if p3 = 6 then
42302: LD_VAR 0 3
42306: PUSH
42307: LD_INT 6
42309: EQUAL
42310: IFFALSE 42320
// sArmoury := true ;
42312: LD_ADDR_EXP 31
42316: PUSH
42317: LD_INT 1
42319: ST_TO_ADDR
// if p3 = 7 then
42320: LD_VAR 0 3
42324: PUSH
42325: LD_INT 7
42327: EQUAL
42328: IFFALSE 42338
// sRadar := true ;
42330: LD_ADDR_EXP 32
42334: PUSH
42335: LD_INT 1
42337: ST_TO_ADDR
// if p3 = 8 then
42338: LD_VAR 0 3
42342: PUSH
42343: LD_INT 8
42345: EQUAL
42346: IFFALSE 42356
// sBunker := true ;
42348: LD_ADDR_EXP 33
42352: PUSH
42353: LD_INT 1
42355: ST_TO_ADDR
// if p3 = 9 then
42356: LD_VAR 0 3
42360: PUSH
42361: LD_INT 9
42363: EQUAL
42364: IFFALSE 42374
// sHack := true ;
42366: LD_ADDR_EXP 34
42370: PUSH
42371: LD_INT 1
42373: ST_TO_ADDR
// if p3 = 10 then
42374: LD_VAR 0 3
42378: PUSH
42379: LD_INT 10
42381: EQUAL
42382: IFFALSE 42392
// sFire := true ;
42384: LD_ADDR_EXP 35
42388: PUSH
42389: LD_INT 1
42391: ST_TO_ADDR
// if p3 = 11 then
42392: LD_VAR 0 3
42396: PUSH
42397: LD_INT 11
42399: EQUAL
42400: IFFALSE 42410
// sRefresh := true ;
42402: LD_ADDR_EXP 36
42406: PUSH
42407: LD_INT 1
42409: ST_TO_ADDR
// if p3 = 12 then
42410: LD_VAR 0 3
42414: PUSH
42415: LD_INT 12
42417: EQUAL
42418: IFFALSE 42428
// sExp := true ;
42420: LD_ADDR_EXP 37
42424: PUSH
42425: LD_INT 1
42427: ST_TO_ADDR
// if p3 = 13 then
42428: LD_VAR 0 3
42432: PUSH
42433: LD_INT 13
42435: EQUAL
42436: IFFALSE 42446
// sDepot := true ;
42438: LD_ADDR_EXP 38
42442: PUSH
42443: LD_INT 1
42445: ST_TO_ADDR
// if p3 = 14 then
42446: LD_VAR 0 3
42450: PUSH
42451: LD_INT 14
42453: EQUAL
42454: IFFALSE 42464
// sFlag := true ;
42456: LD_ADDR_EXP 39
42460: PUSH
42461: LD_INT 1
42463: ST_TO_ADDR
// if p3 = 15 then
42464: LD_VAR 0 3
42468: PUSH
42469: LD_INT 15
42471: EQUAL
42472: IFFALSE 42482
// sKamikadze := true ;
42474: LD_ADDR_EXP 47
42478: PUSH
42479: LD_INT 1
42481: ST_TO_ADDR
// if p3 = 16 then
42482: LD_VAR 0 3
42486: PUSH
42487: LD_INT 16
42489: EQUAL
42490: IFFALSE 42500
// sTroll := true ;
42492: LD_ADDR_EXP 48
42496: PUSH
42497: LD_INT 1
42499: ST_TO_ADDR
// if p3 = 17 then
42500: LD_VAR 0 3
42504: PUSH
42505: LD_INT 17
42507: EQUAL
42508: IFFALSE 42518
// sSlow := true ;
42510: LD_ADDR_EXP 49
42514: PUSH
42515: LD_INT 1
42517: ST_TO_ADDR
// if p3 = 18 then
42518: LD_VAR 0 3
42522: PUSH
42523: LD_INT 18
42525: EQUAL
42526: IFFALSE 42536
// sLack := true ;
42528: LD_ADDR_EXP 50
42532: PUSH
42533: LD_INT 1
42535: ST_TO_ADDR
// if p3 = 19 then
42536: LD_VAR 0 3
42540: PUSH
42541: LD_INT 19
42543: EQUAL
42544: IFFALSE 42554
// sTank := true ;
42546: LD_ADDR_EXP 52
42550: PUSH
42551: LD_INT 1
42553: ST_TO_ADDR
// if p3 = 20 then
42554: LD_VAR 0 3
42558: PUSH
42559: LD_INT 20
42561: EQUAL
42562: IFFALSE 42572
// sRemote := true ;
42564: LD_ADDR_EXP 53
42568: PUSH
42569: LD_INT 1
42571: ST_TO_ADDR
// if p3 = 21 then
42572: LD_VAR 0 3
42576: PUSH
42577: LD_INT 21
42579: EQUAL
42580: IFFALSE 42590
// sPowell := true ;
42582: LD_ADDR_EXP 54
42586: PUSH
42587: LD_INT 1
42589: ST_TO_ADDR
// if p3 = 22 then
42590: LD_VAR 0 3
42594: PUSH
42595: LD_INT 22
42597: EQUAL
42598: IFFALSE 42608
// sTeleport := true ;
42600: LD_ADDR_EXP 57
42604: PUSH
42605: LD_INT 1
42607: ST_TO_ADDR
// if p3 = 23 then
42608: LD_VAR 0 3
42612: PUSH
42613: LD_INT 23
42615: EQUAL
42616: IFFALSE 42626
// sOilTower := true ;
42618: LD_ADDR_EXP 59
42622: PUSH
42623: LD_INT 1
42625: ST_TO_ADDR
// if p3 = 24 then
42626: LD_VAR 0 3
42630: PUSH
42631: LD_INT 24
42633: EQUAL
42634: IFFALSE 42644
// sShovel := true ;
42636: LD_ADDR_EXP 60
42640: PUSH
42641: LD_INT 1
42643: ST_TO_ADDR
// if p3 = 25 then
42644: LD_VAR 0 3
42648: PUSH
42649: LD_INT 25
42651: EQUAL
42652: IFFALSE 42662
// sSheik := true ;
42654: LD_ADDR_EXP 61
42658: PUSH
42659: LD_INT 1
42661: ST_TO_ADDR
// if p3 = 26 then
42662: LD_VAR 0 3
42666: PUSH
42667: LD_INT 26
42669: EQUAL
42670: IFFALSE 42680
// sEarthquake := true ;
42672: LD_ADDR_EXP 63
42676: PUSH
42677: LD_INT 1
42679: ST_TO_ADDR
// if p3 = 27 then
42680: LD_VAR 0 3
42684: PUSH
42685: LD_INT 27
42687: EQUAL
42688: IFFALSE 42698
// sAI := true ;
42690: LD_ADDR_EXP 64
42694: PUSH
42695: LD_INT 1
42697: ST_TO_ADDR
// if p3 = 28 then
42698: LD_VAR 0 3
42702: PUSH
42703: LD_INT 28
42705: EQUAL
42706: IFFALSE 42716
// sCargo := true ;
42708: LD_ADDR_EXP 67
42712: PUSH
42713: LD_INT 1
42715: ST_TO_ADDR
// if p3 = 29 then
42716: LD_VAR 0 3
42720: PUSH
42721: LD_INT 29
42723: EQUAL
42724: IFFALSE 42734
// sDLaser := true ;
42726: LD_ADDR_EXP 68
42730: PUSH
42731: LD_INT 1
42733: ST_TO_ADDR
// if p3 = 30 then
42734: LD_VAR 0 3
42738: PUSH
42739: LD_INT 30
42741: EQUAL
42742: IFFALSE 42752
// sExchange := true ;
42744: LD_ADDR_EXP 69
42748: PUSH
42749: LD_INT 1
42751: ST_TO_ADDR
// if p3 = 31 then
42752: LD_VAR 0 3
42756: PUSH
42757: LD_INT 31
42759: EQUAL
42760: IFFALSE 42770
// sFac := true ;
42762: LD_ADDR_EXP 70
42766: PUSH
42767: LD_INT 1
42769: ST_TO_ADDR
// if p3 = 32 then
42770: LD_VAR 0 3
42774: PUSH
42775: LD_INT 32
42777: EQUAL
42778: IFFALSE 42788
// sPower := true ;
42780: LD_ADDR_EXP 71
42784: PUSH
42785: LD_INT 1
42787: ST_TO_ADDR
// if p3 = 33 then
42788: LD_VAR 0 3
42792: PUSH
42793: LD_INT 33
42795: EQUAL
42796: IFFALSE 42806
// sRandom := true ;
42798: LD_ADDR_EXP 72
42802: PUSH
42803: LD_INT 1
42805: ST_TO_ADDR
// if p3 = 34 then
42806: LD_VAR 0 3
42810: PUSH
42811: LD_INT 34
42813: EQUAL
42814: IFFALSE 42824
// sShield := true ;
42816: LD_ADDR_EXP 73
42820: PUSH
42821: LD_INT 1
42823: ST_TO_ADDR
// if p3 = 35 then
42824: LD_VAR 0 3
42828: PUSH
42829: LD_INT 35
42831: EQUAL
42832: IFFALSE 42842
// sTime := true ;
42834: LD_ADDR_EXP 74
42838: PUSH
42839: LD_INT 1
42841: ST_TO_ADDR
// if p3 = 36 then
42842: LD_VAR 0 3
42846: PUSH
42847: LD_INT 36
42849: EQUAL
42850: IFFALSE 42860
// sTools := true ;
42852: LD_ADDR_EXP 75
42856: PUSH
42857: LD_INT 1
42859: ST_TO_ADDR
// if p3 = 101 then
42860: LD_VAR 0 3
42864: PUSH
42865: LD_INT 101
42867: EQUAL
42868: IFFALSE 42878
// sSold := true ;
42870: LD_ADDR_EXP 40
42874: PUSH
42875: LD_INT 1
42877: ST_TO_ADDR
// if p3 = 102 then
42878: LD_VAR 0 3
42882: PUSH
42883: LD_INT 102
42885: EQUAL
42886: IFFALSE 42896
// sDiff := true ;
42888: LD_ADDR_EXP 41
42892: PUSH
42893: LD_INT 1
42895: ST_TO_ADDR
// if p3 = 103 then
42896: LD_VAR 0 3
42900: PUSH
42901: LD_INT 103
42903: EQUAL
42904: IFFALSE 42914
// sFog := true ;
42906: LD_ADDR_EXP 44
42910: PUSH
42911: LD_INT 1
42913: ST_TO_ADDR
// if p3 = 104 then
42914: LD_VAR 0 3
42918: PUSH
42919: LD_INT 104
42921: EQUAL
42922: IFFALSE 42932
// sReset := true ;
42924: LD_ADDR_EXP 45
42928: PUSH
42929: LD_INT 1
42931: ST_TO_ADDR
// if p3 = 105 then
42932: LD_VAR 0 3
42936: PUSH
42937: LD_INT 105
42939: EQUAL
42940: IFFALSE 42950
// sSun := true ;
42942: LD_ADDR_EXP 46
42946: PUSH
42947: LD_INT 1
42949: ST_TO_ADDR
// if p3 = 106 then
42950: LD_VAR 0 3
42954: PUSH
42955: LD_INT 106
42957: EQUAL
42958: IFFALSE 42968
// sTiger := true ;
42960: LD_ADDR_EXP 42
42964: PUSH
42965: LD_INT 1
42967: ST_TO_ADDR
// if p3 = 107 then
42968: LD_VAR 0 3
42972: PUSH
42973: LD_INT 107
42975: EQUAL
42976: IFFALSE 42986
// sBomb := true ;
42978: LD_ADDR_EXP 43
42982: PUSH
42983: LD_INT 1
42985: ST_TO_ADDR
// if p3 = 108 then
42986: LD_VAR 0 3
42990: PUSH
42991: LD_INT 108
42993: EQUAL
42994: IFFALSE 43004
// sWound := true ;
42996: LD_ADDR_EXP 51
43000: PUSH
43001: LD_INT 1
43003: ST_TO_ADDR
// if p3 = 109 then
43004: LD_VAR 0 3
43008: PUSH
43009: LD_INT 109
43011: EQUAL
43012: IFFALSE 43022
// sBetray := true ;
43014: LD_ADDR_EXP 55
43018: PUSH
43019: LD_INT 1
43021: ST_TO_ADDR
// if p3 = 110 then
43022: LD_VAR 0 3
43026: PUSH
43027: LD_INT 110
43029: EQUAL
43030: IFFALSE 43040
// sContamin := true ;
43032: LD_ADDR_EXP 56
43036: PUSH
43037: LD_INT 1
43039: ST_TO_ADDR
// if p3 = 111 then
43040: LD_VAR 0 3
43044: PUSH
43045: LD_INT 111
43047: EQUAL
43048: IFFALSE 43058
// sOil := true ;
43050: LD_ADDR_EXP 58
43054: PUSH
43055: LD_INT 1
43057: ST_TO_ADDR
// if p3 = 112 then
43058: LD_VAR 0 3
43062: PUSH
43063: LD_INT 112
43065: EQUAL
43066: IFFALSE 43076
// sStu := true ;
43068: LD_ADDR_EXP 62
43072: PUSH
43073: LD_INT 1
43075: ST_TO_ADDR
// if p3 = 113 then
43076: LD_VAR 0 3
43080: PUSH
43081: LD_INT 113
43083: EQUAL
43084: IFFALSE 43094
// sBazooka := true ;
43086: LD_ADDR_EXP 65
43090: PUSH
43091: LD_INT 1
43093: ST_TO_ADDR
// if p3 = 114 then
43094: LD_VAR 0 3
43098: PUSH
43099: LD_INT 114
43101: EQUAL
43102: IFFALSE 43112
// sMortar := true ;
43104: LD_ADDR_EXP 66
43108: PUSH
43109: LD_INT 1
43111: ST_TO_ADDR
// if p3 = 115 then
43112: LD_VAR 0 3
43116: PUSH
43117: LD_INT 115
43119: EQUAL
43120: IFFALSE 43130
// sRanger := true ;
43122: LD_ADDR_EXP 76
43126: PUSH
43127: LD_INT 1
43129: ST_TO_ADDR
// if p3 = 116 then
43130: LD_VAR 0 3
43134: PUSH
43135: LD_INT 116
43137: EQUAL
43138: IFFALSE 43148
// sComputer := true ;
43140: LD_ADDR_EXP 77
43144: PUSH
43145: LD_INT 1
43147: ST_TO_ADDR
// if p3 = 117 then
43148: LD_VAR 0 3
43152: PUSH
43153: LD_INT 117
43155: EQUAL
43156: IFFALSE 43166
// s30 := true ;
43158: LD_ADDR_EXP 78
43162: PUSH
43163: LD_INT 1
43165: ST_TO_ADDR
// if p3 = 118 then
43166: LD_VAR 0 3
43170: PUSH
43171: LD_INT 118
43173: EQUAL
43174: IFFALSE 43184
// s60 := true ;
43176: LD_ADDR_EXP 79
43180: PUSH
43181: LD_INT 1
43183: ST_TO_ADDR
// end ; if p2 = hack_mode then
43184: LD_VAR 0 2
43188: PUSH
43189: LD_INT 101
43191: EQUAL
43192: IFFALSE 43320
// begin case p3 of 1 :
43194: LD_VAR 0 3
43198: PUSH
43199: LD_INT 1
43201: DOUBLE
43202: EQUAL
43203: IFTRUE 43207
43205: GO 43214
43207: POP
// hHackUnlimitedResources ; 2 :
43208: CALL 55459 0 0
43212: GO 43320
43214: LD_INT 2
43216: DOUBLE
43217: EQUAL
43218: IFTRUE 43222
43220: GO 43229
43222: POP
// hHackSetLevel10 ; 3 :
43223: CALL 55592 0 0
43227: GO 43320
43229: LD_INT 3
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43244
43237: POP
// hHackSetLevel10YourUnits ; 4 :
43238: CALL 55677 0 0
43242: GO 43320
43244: LD_INT 4
43246: DOUBLE
43247: EQUAL
43248: IFTRUE 43252
43250: GO 43259
43252: POP
// hHackInvincible ; 5 :
43253: CALL 56125 0 0
43257: GO 43320
43259: LD_INT 5
43261: DOUBLE
43262: EQUAL
43263: IFTRUE 43267
43265: GO 43274
43267: POP
// hHackInvisible ; 6 :
43268: CALL 56236 0 0
43272: GO 43320
43274: LD_INT 6
43276: DOUBLE
43277: EQUAL
43278: IFTRUE 43282
43280: GO 43289
43282: POP
// hHackChangeYourSide ; 7 :
43283: CALL 56293 0 0
43287: GO 43320
43289: LD_INT 7
43291: DOUBLE
43292: EQUAL
43293: IFTRUE 43297
43295: GO 43304
43297: POP
// hHackChangeUnitSide ; 8 :
43298: CALL 56335 0 0
43302: GO 43320
43304: LD_INT 8
43306: DOUBLE
43307: EQUAL
43308: IFTRUE 43312
43310: GO 43319
43312: POP
// hHackFog ; end ;
43313: CALL 56436 0 0
43317: GO 43320
43319: POP
// end ; if p2 = game_save_mode then
43320: LD_VAR 0 2
43324: PUSH
43325: LD_INT 102
43327: EQUAL
43328: IFFALSE 43383
// begin if p3 = 1 then
43330: LD_VAR 0 3
43334: PUSH
43335: LD_INT 1
43337: EQUAL
43338: IFFALSE 43350
// globalGameSaveCounter := p4 ;
43340: LD_ADDR_EXP 22
43344: PUSH
43345: LD_VAR 0 4
43349: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
43350: LD_VAR 0 3
43354: PUSH
43355: LD_INT 2
43357: EQUAL
43358: PUSH
43359: LD_EXP 22
43363: AND
43364: IFFALSE 43383
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
43366: LD_STRING setGameSaveCounter(
43368: PUSH
43369: LD_EXP 22
43373: STR
43374: PUSH
43375: LD_STRING )
43377: STR
43378: PPUSH
43379: CALL_OW 559
// end ; end ;
43383: LD_VAR 0 7
43387: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
43388: LD_INT 0
43390: PPUSH
// streamModeActive := false ;
43391: LD_ADDR_EXP 23
43395: PUSH
43396: LD_INT 0
43398: ST_TO_ADDR
// normalCounter := 36 ;
43399: LD_ADDR_EXP 24
43403: PUSH
43404: LD_INT 36
43406: ST_TO_ADDR
// hardcoreCounter := 18 ;
43407: LD_ADDR_EXP 25
43411: PUSH
43412: LD_INT 18
43414: ST_TO_ADDR
// sRocket := false ;
43415: LD_ADDR_EXP 28
43419: PUSH
43420: LD_INT 0
43422: ST_TO_ADDR
// sSpeed := false ;
43423: LD_ADDR_EXP 27
43427: PUSH
43428: LD_INT 0
43430: ST_TO_ADDR
// sEngine := false ;
43431: LD_ADDR_EXP 29
43435: PUSH
43436: LD_INT 0
43438: ST_TO_ADDR
// sSpec := false ;
43439: LD_ADDR_EXP 26
43443: PUSH
43444: LD_INT 0
43446: ST_TO_ADDR
// sLevel := false ;
43447: LD_ADDR_EXP 30
43451: PUSH
43452: LD_INT 0
43454: ST_TO_ADDR
// sArmoury := false ;
43455: LD_ADDR_EXP 31
43459: PUSH
43460: LD_INT 0
43462: ST_TO_ADDR
// sRadar := false ;
43463: LD_ADDR_EXP 32
43467: PUSH
43468: LD_INT 0
43470: ST_TO_ADDR
// sBunker := false ;
43471: LD_ADDR_EXP 33
43475: PUSH
43476: LD_INT 0
43478: ST_TO_ADDR
// sHack := false ;
43479: LD_ADDR_EXP 34
43483: PUSH
43484: LD_INT 0
43486: ST_TO_ADDR
// sFire := false ;
43487: LD_ADDR_EXP 35
43491: PUSH
43492: LD_INT 0
43494: ST_TO_ADDR
// sRefresh := false ;
43495: LD_ADDR_EXP 36
43499: PUSH
43500: LD_INT 0
43502: ST_TO_ADDR
// sExp := false ;
43503: LD_ADDR_EXP 37
43507: PUSH
43508: LD_INT 0
43510: ST_TO_ADDR
// sDepot := false ;
43511: LD_ADDR_EXP 38
43515: PUSH
43516: LD_INT 0
43518: ST_TO_ADDR
// sFlag := false ;
43519: LD_ADDR_EXP 39
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// sKamikadze := false ;
43527: LD_ADDR_EXP 47
43531: PUSH
43532: LD_INT 0
43534: ST_TO_ADDR
// sTroll := false ;
43535: LD_ADDR_EXP 48
43539: PUSH
43540: LD_INT 0
43542: ST_TO_ADDR
// sSlow := false ;
43543: LD_ADDR_EXP 49
43547: PUSH
43548: LD_INT 0
43550: ST_TO_ADDR
// sLack := false ;
43551: LD_ADDR_EXP 50
43555: PUSH
43556: LD_INT 0
43558: ST_TO_ADDR
// sTank := false ;
43559: LD_ADDR_EXP 52
43563: PUSH
43564: LD_INT 0
43566: ST_TO_ADDR
// sRemote := false ;
43567: LD_ADDR_EXP 53
43571: PUSH
43572: LD_INT 0
43574: ST_TO_ADDR
// sPowell := false ;
43575: LD_ADDR_EXP 54
43579: PUSH
43580: LD_INT 0
43582: ST_TO_ADDR
// sTeleport := false ;
43583: LD_ADDR_EXP 57
43587: PUSH
43588: LD_INT 0
43590: ST_TO_ADDR
// sOilTower := false ;
43591: LD_ADDR_EXP 59
43595: PUSH
43596: LD_INT 0
43598: ST_TO_ADDR
// sShovel := false ;
43599: LD_ADDR_EXP 60
43603: PUSH
43604: LD_INT 0
43606: ST_TO_ADDR
// sSheik := false ;
43607: LD_ADDR_EXP 61
43611: PUSH
43612: LD_INT 0
43614: ST_TO_ADDR
// sEarthquake := false ;
43615: LD_ADDR_EXP 63
43619: PUSH
43620: LD_INT 0
43622: ST_TO_ADDR
// sAI := false ;
43623: LD_ADDR_EXP 64
43627: PUSH
43628: LD_INT 0
43630: ST_TO_ADDR
// sCargo := false ;
43631: LD_ADDR_EXP 67
43635: PUSH
43636: LD_INT 0
43638: ST_TO_ADDR
// sDLaser := false ;
43639: LD_ADDR_EXP 68
43643: PUSH
43644: LD_INT 0
43646: ST_TO_ADDR
// sExchange := false ;
43647: LD_ADDR_EXP 69
43651: PUSH
43652: LD_INT 0
43654: ST_TO_ADDR
// sFac := false ;
43655: LD_ADDR_EXP 70
43659: PUSH
43660: LD_INT 0
43662: ST_TO_ADDR
// sPower := false ;
43663: LD_ADDR_EXP 71
43667: PUSH
43668: LD_INT 0
43670: ST_TO_ADDR
// sRandom := false ;
43671: LD_ADDR_EXP 72
43675: PUSH
43676: LD_INT 0
43678: ST_TO_ADDR
// sShield := false ;
43679: LD_ADDR_EXP 73
43683: PUSH
43684: LD_INT 0
43686: ST_TO_ADDR
// sTime := false ;
43687: LD_ADDR_EXP 74
43691: PUSH
43692: LD_INT 0
43694: ST_TO_ADDR
// sTools := false ;
43695: LD_ADDR_EXP 75
43699: PUSH
43700: LD_INT 0
43702: ST_TO_ADDR
// sSold := false ;
43703: LD_ADDR_EXP 40
43707: PUSH
43708: LD_INT 0
43710: ST_TO_ADDR
// sDiff := false ;
43711: LD_ADDR_EXP 41
43715: PUSH
43716: LD_INT 0
43718: ST_TO_ADDR
// sFog := false ;
43719: LD_ADDR_EXP 44
43723: PUSH
43724: LD_INT 0
43726: ST_TO_ADDR
// sReset := false ;
43727: LD_ADDR_EXP 45
43731: PUSH
43732: LD_INT 0
43734: ST_TO_ADDR
// sSun := false ;
43735: LD_ADDR_EXP 46
43739: PUSH
43740: LD_INT 0
43742: ST_TO_ADDR
// sTiger := false ;
43743: LD_ADDR_EXP 42
43747: PUSH
43748: LD_INT 0
43750: ST_TO_ADDR
// sBomb := false ;
43751: LD_ADDR_EXP 43
43755: PUSH
43756: LD_INT 0
43758: ST_TO_ADDR
// sWound := false ;
43759: LD_ADDR_EXP 51
43763: PUSH
43764: LD_INT 0
43766: ST_TO_ADDR
// sBetray := false ;
43767: LD_ADDR_EXP 55
43771: PUSH
43772: LD_INT 0
43774: ST_TO_ADDR
// sContamin := false ;
43775: LD_ADDR_EXP 56
43779: PUSH
43780: LD_INT 0
43782: ST_TO_ADDR
// sOil := false ;
43783: LD_ADDR_EXP 58
43787: PUSH
43788: LD_INT 0
43790: ST_TO_ADDR
// sStu := false ;
43791: LD_ADDR_EXP 62
43795: PUSH
43796: LD_INT 0
43798: ST_TO_ADDR
// sBazooka := false ;
43799: LD_ADDR_EXP 65
43803: PUSH
43804: LD_INT 0
43806: ST_TO_ADDR
// sMortar := false ;
43807: LD_ADDR_EXP 66
43811: PUSH
43812: LD_INT 0
43814: ST_TO_ADDR
// sRanger := false ;
43815: LD_ADDR_EXP 76
43819: PUSH
43820: LD_INT 0
43822: ST_TO_ADDR
// sComputer := false ;
43823: LD_ADDR_EXP 77
43827: PUSH
43828: LD_INT 0
43830: ST_TO_ADDR
// s30 := false ;
43831: LD_ADDR_EXP 78
43835: PUSH
43836: LD_INT 0
43838: ST_TO_ADDR
// s60 := false ;
43839: LD_ADDR_EXP 79
43843: PUSH
43844: LD_INT 0
43846: ST_TO_ADDR
// end ;
43847: LD_VAR 0 1
43851: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
43852: LD_INT 0
43854: PPUSH
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
43859: PPUSH
43860: PPUSH
// result := [ ] ;
43861: LD_ADDR_VAR 0 2
43865: PUSH
43866: EMPTY
43867: ST_TO_ADDR
// if campaign_id = 1 then
43868: LD_OWVAR 69
43872: PUSH
43873: LD_INT 1
43875: EQUAL
43876: IFFALSE 47042
// begin case mission_number of 1 :
43878: LD_OWVAR 70
43882: PUSH
43883: LD_INT 1
43885: DOUBLE
43886: EQUAL
43887: IFTRUE 43891
43889: GO 43967
43891: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
43892: LD_ADDR_VAR 0 2
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: LD_INT 4
43902: PUSH
43903: LD_INT 11
43905: PUSH
43906: LD_INT 12
43908: PUSH
43909: LD_INT 15
43911: PUSH
43912: LD_INT 16
43914: PUSH
43915: LD_INT 22
43917: PUSH
43918: LD_INT 23
43920: PUSH
43921: LD_INT 26
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 101
43937: PUSH
43938: LD_INT 102
43940: PUSH
43941: LD_INT 106
43943: PUSH
43944: LD_INT 116
43946: PUSH
43947: LD_INT 117
43949: PUSH
43950: LD_INT 118
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: ST_TO_ADDR
43965: GO 47040
43967: LD_INT 2
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43975
43973: GO 44059
43975: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
43976: LD_ADDR_VAR 0 2
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 4
43986: PUSH
43987: LD_INT 11
43989: PUSH
43990: LD_INT 12
43992: PUSH
43993: LD_INT 15
43995: PUSH
43996: LD_INT 16
43998: PUSH
43999: LD_INT 22
44001: PUSH
44002: LD_INT 23
44004: PUSH
44005: LD_INT 26
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 101
44021: PUSH
44022: LD_INT 102
44024: PUSH
44025: LD_INT 105
44027: PUSH
44028: LD_INT 106
44030: PUSH
44031: LD_INT 108
44033: PUSH
44034: LD_INT 116
44036: PUSH
44037: LD_INT 117
44039: PUSH
44040: LD_INT 118
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: ST_TO_ADDR
44057: GO 47040
44059: LD_INT 3
44061: DOUBLE
44062: EQUAL
44063: IFTRUE 44067
44065: GO 44155
44067: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
44068: LD_ADDR_VAR 0 2
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 4
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 11
44084: PUSH
44085: LD_INT 12
44087: PUSH
44088: LD_INT 15
44090: PUSH
44091: LD_INT 16
44093: PUSH
44094: LD_INT 22
44096: PUSH
44097: LD_INT 26
44099: PUSH
44100: LD_INT 36
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 101
44117: PUSH
44118: LD_INT 102
44120: PUSH
44121: LD_INT 105
44123: PUSH
44124: LD_INT 106
44126: PUSH
44127: LD_INT 108
44129: PUSH
44130: LD_INT 116
44132: PUSH
44133: LD_INT 117
44135: PUSH
44136: LD_INT 118
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: ST_TO_ADDR
44153: GO 47040
44155: LD_INT 4
44157: DOUBLE
44158: EQUAL
44159: IFTRUE 44163
44161: GO 44259
44163: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
44164: LD_ADDR_VAR 0 2
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 4
44174: PUSH
44175: LD_INT 5
44177: PUSH
44178: LD_INT 8
44180: PUSH
44181: LD_INT 11
44183: PUSH
44184: LD_INT 12
44186: PUSH
44187: LD_INT 15
44189: PUSH
44190: LD_INT 16
44192: PUSH
44193: LD_INT 22
44195: PUSH
44196: LD_INT 23
44198: PUSH
44199: LD_INT 26
44201: PUSH
44202: LD_INT 36
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 101
44221: PUSH
44222: LD_INT 102
44224: PUSH
44225: LD_INT 105
44227: PUSH
44228: LD_INT 106
44230: PUSH
44231: LD_INT 108
44233: PUSH
44234: LD_INT 116
44236: PUSH
44237: LD_INT 117
44239: PUSH
44240: LD_INT 118
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: ST_TO_ADDR
44257: GO 47040
44259: LD_INT 5
44261: DOUBLE
44262: EQUAL
44263: IFTRUE 44267
44265: GO 44379
44267: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
44268: LD_ADDR_VAR 0 2
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: LD_INT 4
44278: PUSH
44279: LD_INT 5
44281: PUSH
44282: LD_INT 6
44284: PUSH
44285: LD_INT 8
44287: PUSH
44288: LD_INT 11
44290: PUSH
44291: LD_INT 12
44293: PUSH
44294: LD_INT 15
44296: PUSH
44297: LD_INT 16
44299: PUSH
44300: LD_INT 22
44302: PUSH
44303: LD_INT 23
44305: PUSH
44306: LD_INT 25
44308: PUSH
44309: LD_INT 26
44311: PUSH
44312: LD_INT 36
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 101
44333: PUSH
44334: LD_INT 102
44336: PUSH
44337: LD_INT 105
44339: PUSH
44340: LD_INT 106
44342: PUSH
44343: LD_INT 108
44345: PUSH
44346: LD_INT 109
44348: PUSH
44349: LD_INT 112
44351: PUSH
44352: LD_INT 116
44354: PUSH
44355: LD_INT 117
44357: PUSH
44358: LD_INT 118
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: ST_TO_ADDR
44377: GO 47040
44379: LD_INT 6
44381: DOUBLE
44382: EQUAL
44383: IFTRUE 44387
44385: GO 44519
44387: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
44388: LD_ADDR_VAR 0 2
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 4
44398: PUSH
44399: LD_INT 5
44401: PUSH
44402: LD_INT 6
44404: PUSH
44405: LD_INT 8
44407: PUSH
44408: LD_INT 11
44410: PUSH
44411: LD_INT 12
44413: PUSH
44414: LD_INT 15
44416: PUSH
44417: LD_INT 16
44419: PUSH
44420: LD_INT 20
44422: PUSH
44423: LD_INT 21
44425: PUSH
44426: LD_INT 22
44428: PUSH
44429: LD_INT 23
44431: PUSH
44432: LD_INT 25
44434: PUSH
44435: LD_INT 26
44437: PUSH
44438: LD_INT 30
44440: PUSH
44441: LD_INT 31
44443: PUSH
44444: LD_INT 32
44446: PUSH
44447: LD_INT 36
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 101
44473: PUSH
44474: LD_INT 102
44476: PUSH
44477: LD_INT 105
44479: PUSH
44480: LD_INT 106
44482: PUSH
44483: LD_INT 108
44485: PUSH
44486: LD_INT 109
44488: PUSH
44489: LD_INT 112
44491: PUSH
44492: LD_INT 116
44494: PUSH
44495: LD_INT 117
44497: PUSH
44498: LD_INT 118
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: ST_TO_ADDR
44517: GO 47040
44519: LD_INT 7
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44639
44527: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
44528: LD_ADDR_VAR 0 2
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: LD_INT 4
44538: PUSH
44539: LD_INT 5
44541: PUSH
44542: LD_INT 7
44544: PUSH
44545: LD_INT 11
44547: PUSH
44548: LD_INT 12
44550: PUSH
44551: LD_INT 15
44553: PUSH
44554: LD_INT 16
44556: PUSH
44557: LD_INT 20
44559: PUSH
44560: LD_INT 21
44562: PUSH
44563: LD_INT 22
44565: PUSH
44566: LD_INT 23
44568: PUSH
44569: LD_INT 25
44571: PUSH
44572: LD_INT 26
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 101
44593: PUSH
44594: LD_INT 102
44596: PUSH
44597: LD_INT 103
44599: PUSH
44600: LD_INT 105
44602: PUSH
44603: LD_INT 106
44605: PUSH
44606: LD_INT 108
44608: PUSH
44609: LD_INT 112
44611: PUSH
44612: LD_INT 116
44614: PUSH
44615: LD_INT 117
44617: PUSH
44618: LD_INT 118
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: ST_TO_ADDR
44637: GO 47040
44639: LD_INT 8
44641: DOUBLE
44642: EQUAL
44643: IFTRUE 44647
44645: GO 44787
44647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
44648: LD_ADDR_VAR 0 2
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 4
44658: PUSH
44659: LD_INT 5
44661: PUSH
44662: LD_INT 6
44664: PUSH
44665: LD_INT 7
44667: PUSH
44668: LD_INT 8
44670: PUSH
44671: LD_INT 11
44673: PUSH
44674: LD_INT 12
44676: PUSH
44677: LD_INT 15
44679: PUSH
44680: LD_INT 16
44682: PUSH
44683: LD_INT 20
44685: PUSH
44686: LD_INT 21
44688: PUSH
44689: LD_INT 22
44691: PUSH
44692: LD_INT 23
44694: PUSH
44695: LD_INT 25
44697: PUSH
44698: LD_INT 26
44700: PUSH
44701: LD_INT 30
44703: PUSH
44704: LD_INT 31
44706: PUSH
44707: LD_INT 32
44709: PUSH
44710: LD_INT 36
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 101
44737: PUSH
44738: LD_INT 102
44740: PUSH
44741: LD_INT 103
44743: PUSH
44744: LD_INT 105
44746: PUSH
44747: LD_INT 106
44749: PUSH
44750: LD_INT 108
44752: PUSH
44753: LD_INT 109
44755: PUSH
44756: LD_INT 112
44758: PUSH
44759: LD_INT 116
44761: PUSH
44762: LD_INT 117
44764: PUSH
44765: LD_INT 118
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: ST_TO_ADDR
44785: GO 47040
44787: LD_INT 9
44789: DOUBLE
44790: EQUAL
44791: IFTRUE 44795
44793: GO 44943
44795: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
44796: LD_ADDR_VAR 0 2
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 4
44806: PUSH
44807: LD_INT 5
44809: PUSH
44810: LD_INT 6
44812: PUSH
44813: LD_INT 7
44815: PUSH
44816: LD_INT 8
44818: PUSH
44819: LD_INT 11
44821: PUSH
44822: LD_INT 12
44824: PUSH
44825: LD_INT 15
44827: PUSH
44828: LD_INT 16
44830: PUSH
44831: LD_INT 20
44833: PUSH
44834: LD_INT 21
44836: PUSH
44837: LD_INT 22
44839: PUSH
44840: LD_INT 23
44842: PUSH
44843: LD_INT 25
44845: PUSH
44846: LD_INT 26
44848: PUSH
44849: LD_INT 28
44851: PUSH
44852: LD_INT 30
44854: PUSH
44855: LD_INT 31
44857: PUSH
44858: LD_INT 32
44860: PUSH
44861: LD_INT 36
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 101
44889: PUSH
44890: LD_INT 102
44892: PUSH
44893: LD_INT 103
44895: PUSH
44896: LD_INT 105
44898: PUSH
44899: LD_INT 106
44901: PUSH
44902: LD_INT 108
44904: PUSH
44905: LD_INT 109
44907: PUSH
44908: LD_INT 112
44910: PUSH
44911: LD_INT 114
44913: PUSH
44914: LD_INT 116
44916: PUSH
44917: LD_INT 117
44919: PUSH
44920: LD_INT 118
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: ST_TO_ADDR
44941: GO 47040
44943: LD_INT 10
44945: DOUBLE
44946: EQUAL
44947: IFTRUE 44951
44949: GO 45147
44951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
44952: LD_ADDR_VAR 0 2
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 4
44962: PUSH
44963: LD_INT 5
44965: PUSH
44966: LD_INT 6
44968: PUSH
44969: LD_INT 7
44971: PUSH
44972: LD_INT 8
44974: PUSH
44975: LD_INT 9
44977: PUSH
44978: LD_INT 10
44980: PUSH
44981: LD_INT 11
44983: PUSH
44984: LD_INT 12
44986: PUSH
44987: LD_INT 13
44989: PUSH
44990: LD_INT 14
44992: PUSH
44993: LD_INT 15
44995: PUSH
44996: LD_INT 16
44998: PUSH
44999: LD_INT 17
45001: PUSH
45002: LD_INT 18
45004: PUSH
45005: LD_INT 19
45007: PUSH
45008: LD_INT 20
45010: PUSH
45011: LD_INT 21
45013: PUSH
45014: LD_INT 22
45016: PUSH
45017: LD_INT 23
45019: PUSH
45020: LD_INT 24
45022: PUSH
45023: LD_INT 25
45025: PUSH
45026: LD_INT 26
45028: PUSH
45029: LD_INT 28
45031: PUSH
45032: LD_INT 30
45034: PUSH
45035: LD_INT 31
45037: PUSH
45038: LD_INT 32
45040: PUSH
45041: LD_INT 36
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 101
45077: PUSH
45078: LD_INT 102
45080: PUSH
45081: LD_INT 103
45083: PUSH
45084: LD_INT 104
45086: PUSH
45087: LD_INT 105
45089: PUSH
45090: LD_INT 106
45092: PUSH
45093: LD_INT 107
45095: PUSH
45096: LD_INT 108
45098: PUSH
45099: LD_INT 109
45101: PUSH
45102: LD_INT 110
45104: PUSH
45105: LD_INT 111
45107: PUSH
45108: LD_INT 112
45110: PUSH
45111: LD_INT 114
45113: PUSH
45114: LD_INT 116
45116: PUSH
45117: LD_INT 117
45119: PUSH
45120: LD_INT 118
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: ST_TO_ADDR
45145: GO 47040
45147: LD_INT 11
45149: DOUBLE
45150: EQUAL
45151: IFTRUE 45155
45153: GO 45359
45155: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
45156: LD_ADDR_VAR 0 2
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: LD_INT 4
45169: PUSH
45170: LD_INT 5
45172: PUSH
45173: LD_INT 6
45175: PUSH
45176: LD_INT 7
45178: PUSH
45179: LD_INT 8
45181: PUSH
45182: LD_INT 9
45184: PUSH
45185: LD_INT 10
45187: PUSH
45188: LD_INT 11
45190: PUSH
45191: LD_INT 12
45193: PUSH
45194: LD_INT 13
45196: PUSH
45197: LD_INT 14
45199: PUSH
45200: LD_INT 15
45202: PUSH
45203: LD_INT 16
45205: PUSH
45206: LD_INT 17
45208: PUSH
45209: LD_INT 18
45211: PUSH
45212: LD_INT 19
45214: PUSH
45215: LD_INT 20
45217: PUSH
45218: LD_INT 21
45220: PUSH
45221: LD_INT 22
45223: PUSH
45224: LD_INT 23
45226: PUSH
45227: LD_INT 24
45229: PUSH
45230: LD_INT 25
45232: PUSH
45233: LD_INT 26
45235: PUSH
45236: LD_INT 28
45238: PUSH
45239: LD_INT 30
45241: PUSH
45242: LD_INT 31
45244: PUSH
45245: LD_INT 32
45247: PUSH
45248: LD_INT 34
45250: PUSH
45251: LD_INT 36
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 101
45289: PUSH
45290: LD_INT 102
45292: PUSH
45293: LD_INT 103
45295: PUSH
45296: LD_INT 104
45298: PUSH
45299: LD_INT 105
45301: PUSH
45302: LD_INT 106
45304: PUSH
45305: LD_INT 107
45307: PUSH
45308: LD_INT 108
45310: PUSH
45311: LD_INT 109
45313: PUSH
45314: LD_INT 110
45316: PUSH
45317: LD_INT 111
45319: PUSH
45320: LD_INT 112
45322: PUSH
45323: LD_INT 114
45325: PUSH
45326: LD_INT 116
45328: PUSH
45329: LD_INT 117
45331: PUSH
45332: LD_INT 118
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: ST_TO_ADDR
45357: GO 47040
45359: LD_INT 12
45361: DOUBLE
45362: EQUAL
45363: IFTRUE 45367
45365: GO 45587
45367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
45368: LD_ADDR_VAR 0 2
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 4
45384: PUSH
45385: LD_INT 5
45387: PUSH
45388: LD_INT 6
45390: PUSH
45391: LD_INT 7
45393: PUSH
45394: LD_INT 8
45396: PUSH
45397: LD_INT 9
45399: PUSH
45400: LD_INT 10
45402: PUSH
45403: LD_INT 11
45405: PUSH
45406: LD_INT 12
45408: PUSH
45409: LD_INT 13
45411: PUSH
45412: LD_INT 14
45414: PUSH
45415: LD_INT 15
45417: PUSH
45418: LD_INT 16
45420: PUSH
45421: LD_INT 17
45423: PUSH
45424: LD_INT 18
45426: PUSH
45427: LD_INT 19
45429: PUSH
45430: LD_INT 20
45432: PUSH
45433: LD_INT 21
45435: PUSH
45436: LD_INT 22
45438: PUSH
45439: LD_INT 23
45441: PUSH
45442: LD_INT 24
45444: PUSH
45445: LD_INT 25
45447: PUSH
45448: LD_INT 26
45450: PUSH
45451: LD_INT 27
45453: PUSH
45454: LD_INT 28
45456: PUSH
45457: LD_INT 30
45459: PUSH
45460: LD_INT 31
45462: PUSH
45463: LD_INT 32
45465: PUSH
45466: LD_INT 33
45468: PUSH
45469: LD_INT 34
45471: PUSH
45472: LD_INT 36
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 101
45513: PUSH
45514: LD_INT 102
45516: PUSH
45517: LD_INT 103
45519: PUSH
45520: LD_INT 104
45522: PUSH
45523: LD_INT 105
45525: PUSH
45526: LD_INT 106
45528: PUSH
45529: LD_INT 107
45531: PUSH
45532: LD_INT 108
45534: PUSH
45535: LD_INT 109
45537: PUSH
45538: LD_INT 110
45540: PUSH
45541: LD_INT 111
45543: PUSH
45544: LD_INT 112
45546: PUSH
45547: LD_INT 113
45549: PUSH
45550: LD_INT 114
45552: PUSH
45553: LD_INT 116
45555: PUSH
45556: LD_INT 117
45558: PUSH
45559: LD_INT 118
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: ST_TO_ADDR
45585: GO 47040
45587: LD_INT 13
45589: DOUBLE
45590: EQUAL
45591: IFTRUE 45595
45593: GO 45803
45595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
45596: LD_ADDR_VAR 0 2
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: LD_INT 4
45612: PUSH
45613: LD_INT 5
45615: PUSH
45616: LD_INT 8
45618: PUSH
45619: LD_INT 9
45621: PUSH
45622: LD_INT 10
45624: PUSH
45625: LD_INT 11
45627: PUSH
45628: LD_INT 12
45630: PUSH
45631: LD_INT 14
45633: PUSH
45634: LD_INT 15
45636: PUSH
45637: LD_INT 16
45639: PUSH
45640: LD_INT 17
45642: PUSH
45643: LD_INT 18
45645: PUSH
45646: LD_INT 19
45648: PUSH
45649: LD_INT 20
45651: PUSH
45652: LD_INT 21
45654: PUSH
45655: LD_INT 22
45657: PUSH
45658: LD_INT 23
45660: PUSH
45661: LD_INT 24
45663: PUSH
45664: LD_INT 25
45666: PUSH
45667: LD_INT 26
45669: PUSH
45670: LD_INT 27
45672: PUSH
45673: LD_INT 28
45675: PUSH
45676: LD_INT 30
45678: PUSH
45679: LD_INT 31
45681: PUSH
45682: LD_INT 32
45684: PUSH
45685: LD_INT 33
45687: PUSH
45688: LD_INT 34
45690: PUSH
45691: LD_INT 36
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 101
45729: PUSH
45730: LD_INT 102
45732: PUSH
45733: LD_INT 103
45735: PUSH
45736: LD_INT 104
45738: PUSH
45739: LD_INT 105
45741: PUSH
45742: LD_INT 106
45744: PUSH
45745: LD_INT 107
45747: PUSH
45748: LD_INT 108
45750: PUSH
45751: LD_INT 109
45753: PUSH
45754: LD_INT 110
45756: PUSH
45757: LD_INT 111
45759: PUSH
45760: LD_INT 112
45762: PUSH
45763: LD_INT 113
45765: PUSH
45766: LD_INT 114
45768: PUSH
45769: LD_INT 116
45771: PUSH
45772: LD_INT 117
45774: PUSH
45775: LD_INT 118
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: ST_TO_ADDR
45801: GO 47040
45803: LD_INT 14
45805: DOUBLE
45806: EQUAL
45807: IFTRUE 45811
45809: GO 46035
45811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
45812: LD_ADDR_VAR 0 2
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 3
45825: PUSH
45826: LD_INT 4
45828: PUSH
45829: LD_INT 5
45831: PUSH
45832: LD_INT 6
45834: PUSH
45835: LD_INT 7
45837: PUSH
45838: LD_INT 8
45840: PUSH
45841: LD_INT 9
45843: PUSH
45844: LD_INT 10
45846: PUSH
45847: LD_INT 11
45849: PUSH
45850: LD_INT 12
45852: PUSH
45853: LD_INT 13
45855: PUSH
45856: LD_INT 14
45858: PUSH
45859: LD_INT 15
45861: PUSH
45862: LD_INT 16
45864: PUSH
45865: LD_INT 17
45867: PUSH
45868: LD_INT 18
45870: PUSH
45871: LD_INT 19
45873: PUSH
45874: LD_INT 20
45876: PUSH
45877: LD_INT 21
45879: PUSH
45880: LD_INT 22
45882: PUSH
45883: LD_INT 23
45885: PUSH
45886: LD_INT 24
45888: PUSH
45889: LD_INT 25
45891: PUSH
45892: LD_INT 26
45894: PUSH
45895: LD_INT 27
45897: PUSH
45898: LD_INT 28
45900: PUSH
45901: LD_INT 29
45903: PUSH
45904: LD_INT 30
45906: PUSH
45907: LD_INT 31
45909: PUSH
45910: LD_INT 32
45912: PUSH
45913: LD_INT 33
45915: PUSH
45916: LD_INT 34
45918: PUSH
45919: LD_INT 36
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 101
45961: PUSH
45962: LD_INT 102
45964: PUSH
45965: LD_INT 103
45967: PUSH
45968: LD_INT 104
45970: PUSH
45971: LD_INT 105
45973: PUSH
45974: LD_INT 106
45976: PUSH
45977: LD_INT 107
45979: PUSH
45980: LD_INT 108
45982: PUSH
45983: LD_INT 109
45985: PUSH
45986: LD_INT 110
45988: PUSH
45989: LD_INT 111
45991: PUSH
45992: LD_INT 112
45994: PUSH
45995: LD_INT 113
45997: PUSH
45998: LD_INT 114
46000: PUSH
46001: LD_INT 116
46003: PUSH
46004: LD_INT 117
46006: PUSH
46007: LD_INT 118
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: ST_TO_ADDR
46033: GO 47040
46035: LD_INT 15
46037: DOUBLE
46038: EQUAL
46039: IFTRUE 46043
46041: GO 46267
46043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
46044: LD_ADDR_VAR 0 2
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 3
46057: PUSH
46058: LD_INT 4
46060: PUSH
46061: LD_INT 5
46063: PUSH
46064: LD_INT 6
46066: PUSH
46067: LD_INT 7
46069: PUSH
46070: LD_INT 8
46072: PUSH
46073: LD_INT 9
46075: PUSH
46076: LD_INT 10
46078: PUSH
46079: LD_INT 11
46081: PUSH
46082: LD_INT 12
46084: PUSH
46085: LD_INT 13
46087: PUSH
46088: LD_INT 14
46090: PUSH
46091: LD_INT 15
46093: PUSH
46094: LD_INT 16
46096: PUSH
46097: LD_INT 17
46099: PUSH
46100: LD_INT 18
46102: PUSH
46103: LD_INT 19
46105: PUSH
46106: LD_INT 20
46108: PUSH
46109: LD_INT 21
46111: PUSH
46112: LD_INT 22
46114: PUSH
46115: LD_INT 23
46117: PUSH
46118: LD_INT 24
46120: PUSH
46121: LD_INT 25
46123: PUSH
46124: LD_INT 26
46126: PUSH
46127: LD_INT 27
46129: PUSH
46130: LD_INT 28
46132: PUSH
46133: LD_INT 29
46135: PUSH
46136: LD_INT 30
46138: PUSH
46139: LD_INT 31
46141: PUSH
46142: LD_INT 32
46144: PUSH
46145: LD_INT 33
46147: PUSH
46148: LD_INT 34
46150: PUSH
46151: LD_INT 36
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 101
46193: PUSH
46194: LD_INT 102
46196: PUSH
46197: LD_INT 103
46199: PUSH
46200: LD_INT 104
46202: PUSH
46203: LD_INT 105
46205: PUSH
46206: LD_INT 106
46208: PUSH
46209: LD_INT 107
46211: PUSH
46212: LD_INT 108
46214: PUSH
46215: LD_INT 109
46217: PUSH
46218: LD_INT 110
46220: PUSH
46221: LD_INT 111
46223: PUSH
46224: LD_INT 112
46226: PUSH
46227: LD_INT 113
46229: PUSH
46230: LD_INT 114
46232: PUSH
46233: LD_INT 116
46235: PUSH
46236: LD_INT 117
46238: PUSH
46239: LD_INT 118
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: ST_TO_ADDR
46265: GO 47040
46267: LD_INT 16
46269: DOUBLE
46270: EQUAL
46271: IFTRUE 46275
46273: GO 46411
46275: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
46276: LD_ADDR_VAR 0 2
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 4
46286: PUSH
46287: LD_INT 5
46289: PUSH
46290: LD_INT 7
46292: PUSH
46293: LD_INT 11
46295: PUSH
46296: LD_INT 12
46298: PUSH
46299: LD_INT 15
46301: PUSH
46302: LD_INT 16
46304: PUSH
46305: LD_INT 20
46307: PUSH
46308: LD_INT 21
46310: PUSH
46311: LD_INT 22
46313: PUSH
46314: LD_INT 23
46316: PUSH
46317: LD_INT 25
46319: PUSH
46320: LD_INT 26
46322: PUSH
46323: LD_INT 30
46325: PUSH
46326: LD_INT 31
46328: PUSH
46329: LD_INT 32
46331: PUSH
46332: LD_INT 33
46334: PUSH
46335: LD_INT 34
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 101
46361: PUSH
46362: LD_INT 102
46364: PUSH
46365: LD_INT 103
46367: PUSH
46368: LD_INT 106
46370: PUSH
46371: LD_INT 108
46373: PUSH
46374: LD_INT 112
46376: PUSH
46377: LD_INT 113
46379: PUSH
46380: LD_INT 114
46382: PUSH
46383: LD_INT 116
46385: PUSH
46386: LD_INT 117
46388: PUSH
46389: LD_INT 118
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: ST_TO_ADDR
46409: GO 47040
46411: LD_INT 17
46413: DOUBLE
46414: EQUAL
46415: IFTRUE 46419
46417: GO 46643
46419: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
46420: LD_ADDR_VAR 0 2
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 4
46436: PUSH
46437: LD_INT 5
46439: PUSH
46440: LD_INT 6
46442: PUSH
46443: LD_INT 7
46445: PUSH
46446: LD_INT 8
46448: PUSH
46449: LD_INT 9
46451: PUSH
46452: LD_INT 10
46454: PUSH
46455: LD_INT 11
46457: PUSH
46458: LD_INT 12
46460: PUSH
46461: LD_INT 13
46463: PUSH
46464: LD_INT 14
46466: PUSH
46467: LD_INT 15
46469: PUSH
46470: LD_INT 16
46472: PUSH
46473: LD_INT 17
46475: PUSH
46476: LD_INT 18
46478: PUSH
46479: LD_INT 19
46481: PUSH
46482: LD_INT 20
46484: PUSH
46485: LD_INT 21
46487: PUSH
46488: LD_INT 22
46490: PUSH
46491: LD_INT 23
46493: PUSH
46494: LD_INT 24
46496: PUSH
46497: LD_INT 25
46499: PUSH
46500: LD_INT 26
46502: PUSH
46503: LD_INT 27
46505: PUSH
46506: LD_INT 28
46508: PUSH
46509: LD_INT 29
46511: PUSH
46512: LD_INT 30
46514: PUSH
46515: LD_INT 31
46517: PUSH
46518: LD_INT 32
46520: PUSH
46521: LD_INT 33
46523: PUSH
46524: LD_INT 34
46526: PUSH
46527: LD_INT 36
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 101
46569: PUSH
46570: LD_INT 102
46572: PUSH
46573: LD_INT 103
46575: PUSH
46576: LD_INT 104
46578: PUSH
46579: LD_INT 105
46581: PUSH
46582: LD_INT 106
46584: PUSH
46585: LD_INT 107
46587: PUSH
46588: LD_INT 108
46590: PUSH
46591: LD_INT 109
46593: PUSH
46594: LD_INT 110
46596: PUSH
46597: LD_INT 111
46599: PUSH
46600: LD_INT 112
46602: PUSH
46603: LD_INT 113
46605: PUSH
46606: LD_INT 114
46608: PUSH
46609: LD_INT 116
46611: PUSH
46612: LD_INT 117
46614: PUSH
46615: LD_INT 118
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: ST_TO_ADDR
46641: GO 47040
46643: LD_INT 18
46645: DOUBLE
46646: EQUAL
46647: IFTRUE 46651
46649: GO 46799
46651: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
46652: LD_ADDR_VAR 0 2
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 4
46662: PUSH
46663: LD_INT 5
46665: PUSH
46666: LD_INT 7
46668: PUSH
46669: LD_INT 11
46671: PUSH
46672: LD_INT 12
46674: PUSH
46675: LD_INT 15
46677: PUSH
46678: LD_INT 16
46680: PUSH
46681: LD_INT 20
46683: PUSH
46684: LD_INT 21
46686: PUSH
46687: LD_INT 22
46689: PUSH
46690: LD_INT 23
46692: PUSH
46693: LD_INT 25
46695: PUSH
46696: LD_INT 26
46698: PUSH
46699: LD_INT 30
46701: PUSH
46702: LD_INT 31
46704: PUSH
46705: LD_INT 32
46707: PUSH
46708: LD_INT 33
46710: PUSH
46711: LD_INT 34
46713: PUSH
46714: LD_INT 35
46716: PUSH
46717: LD_INT 36
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 101
46745: PUSH
46746: LD_INT 102
46748: PUSH
46749: LD_INT 103
46751: PUSH
46752: LD_INT 106
46754: PUSH
46755: LD_INT 108
46757: PUSH
46758: LD_INT 112
46760: PUSH
46761: LD_INT 113
46763: PUSH
46764: LD_INT 114
46766: PUSH
46767: LD_INT 115
46769: PUSH
46770: LD_INT 116
46772: PUSH
46773: LD_INT 117
46775: PUSH
46776: LD_INT 118
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: ST_TO_ADDR
46797: GO 47040
46799: LD_INT 19
46801: DOUBLE
46802: EQUAL
46803: IFTRUE 46807
46805: GO 47039
46807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
46808: LD_ADDR_VAR 0 2
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: LD_INT 4
46824: PUSH
46825: LD_INT 5
46827: PUSH
46828: LD_INT 6
46830: PUSH
46831: LD_INT 7
46833: PUSH
46834: LD_INT 8
46836: PUSH
46837: LD_INT 9
46839: PUSH
46840: LD_INT 10
46842: PUSH
46843: LD_INT 11
46845: PUSH
46846: LD_INT 12
46848: PUSH
46849: LD_INT 13
46851: PUSH
46852: LD_INT 14
46854: PUSH
46855: LD_INT 15
46857: PUSH
46858: LD_INT 16
46860: PUSH
46861: LD_INT 17
46863: PUSH
46864: LD_INT 18
46866: PUSH
46867: LD_INT 19
46869: PUSH
46870: LD_INT 20
46872: PUSH
46873: LD_INT 21
46875: PUSH
46876: LD_INT 22
46878: PUSH
46879: LD_INT 23
46881: PUSH
46882: LD_INT 24
46884: PUSH
46885: LD_INT 25
46887: PUSH
46888: LD_INT 26
46890: PUSH
46891: LD_INT 27
46893: PUSH
46894: LD_INT 28
46896: PUSH
46897: LD_INT 29
46899: PUSH
46900: LD_INT 30
46902: PUSH
46903: LD_INT 31
46905: PUSH
46906: LD_INT 32
46908: PUSH
46909: LD_INT 33
46911: PUSH
46912: LD_INT 34
46914: PUSH
46915: LD_INT 35
46917: PUSH
46918: LD_INT 36
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 101
46961: PUSH
46962: LD_INT 102
46964: PUSH
46965: LD_INT 103
46967: PUSH
46968: LD_INT 104
46970: PUSH
46971: LD_INT 105
46973: PUSH
46974: LD_INT 106
46976: PUSH
46977: LD_INT 107
46979: PUSH
46980: LD_INT 108
46982: PUSH
46983: LD_INT 109
46985: PUSH
46986: LD_INT 110
46988: PUSH
46989: LD_INT 111
46991: PUSH
46992: LD_INT 112
46994: PUSH
46995: LD_INT 113
46997: PUSH
46998: LD_INT 114
47000: PUSH
47001: LD_INT 115
47003: PUSH
47004: LD_INT 116
47006: PUSH
47007: LD_INT 117
47009: PUSH
47010: LD_INT 118
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: ST_TO_ADDR
47037: GO 47040
47039: POP
// end else
47040: GO 47271
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
47042: LD_ADDR_VAR 0 2
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 4
47058: PUSH
47059: LD_INT 5
47061: PUSH
47062: LD_INT 6
47064: PUSH
47065: LD_INT 7
47067: PUSH
47068: LD_INT 8
47070: PUSH
47071: LD_INT 9
47073: PUSH
47074: LD_INT 10
47076: PUSH
47077: LD_INT 11
47079: PUSH
47080: LD_INT 12
47082: PUSH
47083: LD_INT 13
47085: PUSH
47086: LD_INT 14
47088: PUSH
47089: LD_INT 15
47091: PUSH
47092: LD_INT 16
47094: PUSH
47095: LD_INT 17
47097: PUSH
47098: LD_INT 18
47100: PUSH
47101: LD_INT 19
47103: PUSH
47104: LD_INT 20
47106: PUSH
47107: LD_INT 21
47109: PUSH
47110: LD_INT 22
47112: PUSH
47113: LD_INT 23
47115: PUSH
47116: LD_INT 24
47118: PUSH
47119: LD_INT 25
47121: PUSH
47122: LD_INT 26
47124: PUSH
47125: LD_INT 27
47127: PUSH
47128: LD_INT 28
47130: PUSH
47131: LD_INT 29
47133: PUSH
47134: LD_INT 30
47136: PUSH
47137: LD_INT 31
47139: PUSH
47140: LD_INT 32
47142: PUSH
47143: LD_INT 33
47145: PUSH
47146: LD_INT 34
47148: PUSH
47149: LD_INT 35
47151: PUSH
47152: LD_INT 36
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 101
47195: PUSH
47196: LD_INT 102
47198: PUSH
47199: LD_INT 103
47201: PUSH
47202: LD_INT 104
47204: PUSH
47205: LD_INT 105
47207: PUSH
47208: LD_INT 106
47210: PUSH
47211: LD_INT 107
47213: PUSH
47214: LD_INT 108
47216: PUSH
47217: LD_INT 109
47219: PUSH
47220: LD_INT 110
47222: PUSH
47223: LD_INT 111
47225: PUSH
47226: LD_INT 112
47228: PUSH
47229: LD_INT 113
47231: PUSH
47232: LD_INT 114
47234: PUSH
47235: LD_INT 115
47237: PUSH
47238: LD_INT 116
47240: PUSH
47241: LD_INT 117
47243: PUSH
47244: LD_INT 118
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: ST_TO_ADDR
// if result then
47271: LD_VAR 0 2
47275: IFFALSE 48061
// begin normal :=  ;
47277: LD_ADDR_VAR 0 5
47281: PUSH
47282: LD_STRING 
47284: ST_TO_ADDR
// hardcore :=  ;
47285: LD_ADDR_VAR 0 6
47289: PUSH
47290: LD_STRING 
47292: ST_TO_ADDR
// active :=  ;
47293: LD_ADDR_VAR 0 7
47297: PUSH
47298: LD_STRING 
47300: ST_TO_ADDR
// for i = 1 to normalCounter do
47301: LD_ADDR_VAR 0 8
47305: PUSH
47306: DOUBLE
47307: LD_INT 1
47309: DEC
47310: ST_TO_ADDR
47311: LD_EXP 24
47315: PUSH
47316: FOR_TO
47317: IFFALSE 47418
// begin tmp := 0 ;
47319: LD_ADDR_VAR 0 3
47323: PUSH
47324: LD_STRING 0
47326: ST_TO_ADDR
// if result [ 1 ] then
47327: LD_VAR 0 2
47331: PUSH
47332: LD_INT 1
47334: ARRAY
47335: IFFALSE 47400
// if result [ 1 ] [ 1 ] = i then
47337: LD_VAR 0 2
47341: PUSH
47342: LD_INT 1
47344: ARRAY
47345: PUSH
47346: LD_INT 1
47348: ARRAY
47349: PUSH
47350: LD_VAR 0 8
47354: EQUAL
47355: IFFALSE 47400
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
47357: LD_ADDR_VAR 0 2
47361: PUSH
47362: LD_VAR 0 2
47366: PPUSH
47367: LD_INT 1
47369: PPUSH
47370: LD_VAR 0 2
47374: PUSH
47375: LD_INT 1
47377: ARRAY
47378: PPUSH
47379: LD_INT 1
47381: PPUSH
47382: CALL_OW 3
47386: PPUSH
47387: CALL_OW 1
47391: ST_TO_ADDR
// tmp := 1 ;
47392: LD_ADDR_VAR 0 3
47396: PUSH
47397: LD_STRING 1
47399: ST_TO_ADDR
// end ; normal := normal & tmp ;
47400: LD_ADDR_VAR 0 5
47404: PUSH
47405: LD_VAR 0 5
47409: PUSH
47410: LD_VAR 0 3
47414: STR
47415: ST_TO_ADDR
// end ;
47416: GO 47316
47418: POP
47419: POP
// for i = 1 to hardcoreCounter do
47420: LD_ADDR_VAR 0 8
47424: PUSH
47425: DOUBLE
47426: LD_INT 1
47428: DEC
47429: ST_TO_ADDR
47430: LD_EXP 25
47434: PUSH
47435: FOR_TO
47436: IFFALSE 47541
// begin tmp := 0 ;
47438: LD_ADDR_VAR 0 3
47442: PUSH
47443: LD_STRING 0
47445: ST_TO_ADDR
// if result [ 2 ] then
47446: LD_VAR 0 2
47450: PUSH
47451: LD_INT 2
47453: ARRAY
47454: IFFALSE 47523
// if result [ 2 ] [ 1 ] = 100 + i then
47456: LD_VAR 0 2
47460: PUSH
47461: LD_INT 2
47463: ARRAY
47464: PUSH
47465: LD_INT 1
47467: ARRAY
47468: PUSH
47469: LD_INT 100
47471: PUSH
47472: LD_VAR 0 8
47476: PLUS
47477: EQUAL
47478: IFFALSE 47523
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
47480: LD_ADDR_VAR 0 2
47484: PUSH
47485: LD_VAR 0 2
47489: PPUSH
47490: LD_INT 2
47492: PPUSH
47493: LD_VAR 0 2
47497: PUSH
47498: LD_INT 2
47500: ARRAY
47501: PPUSH
47502: LD_INT 1
47504: PPUSH
47505: CALL_OW 3
47509: PPUSH
47510: CALL_OW 1
47514: ST_TO_ADDR
// tmp := 1 ;
47515: LD_ADDR_VAR 0 3
47519: PUSH
47520: LD_STRING 1
47522: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47523: LD_ADDR_VAR 0 6
47527: PUSH
47528: LD_VAR 0 6
47532: PUSH
47533: LD_VAR 0 3
47537: STR
47538: ST_TO_ADDR
// end ;
47539: GO 47435
47541: POP
47542: POP
// if isGameLoad then
47543: LD_VAR 0 1
47547: IFFALSE 48022
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
47549: LD_ADDR_VAR 0 4
47553: PUSH
47554: LD_EXP 28
47558: PUSH
47559: LD_EXP 27
47563: PUSH
47564: LD_EXP 29
47568: PUSH
47569: LD_EXP 26
47573: PUSH
47574: LD_EXP 30
47578: PUSH
47579: LD_EXP 31
47583: PUSH
47584: LD_EXP 32
47588: PUSH
47589: LD_EXP 33
47593: PUSH
47594: LD_EXP 34
47598: PUSH
47599: LD_EXP 35
47603: PUSH
47604: LD_EXP 36
47608: PUSH
47609: LD_EXP 37
47613: PUSH
47614: LD_EXP 38
47618: PUSH
47619: LD_EXP 39
47623: PUSH
47624: LD_EXP 47
47628: PUSH
47629: LD_EXP 48
47633: PUSH
47634: LD_EXP 49
47638: PUSH
47639: LD_EXP 50
47643: PUSH
47644: LD_EXP 52
47648: PUSH
47649: LD_EXP 53
47653: PUSH
47654: LD_EXP 54
47658: PUSH
47659: LD_EXP 57
47663: PUSH
47664: LD_EXP 59
47668: PUSH
47669: LD_EXP 60
47673: PUSH
47674: LD_EXP 61
47678: PUSH
47679: LD_EXP 63
47683: PUSH
47684: LD_EXP 64
47688: PUSH
47689: LD_EXP 67
47693: PUSH
47694: LD_EXP 68
47698: PUSH
47699: LD_EXP 69
47703: PUSH
47704: LD_EXP 70
47708: PUSH
47709: LD_EXP 71
47713: PUSH
47714: LD_EXP 72
47718: PUSH
47719: LD_EXP 73
47723: PUSH
47724: LD_EXP 74
47728: PUSH
47729: LD_EXP 75
47733: PUSH
47734: LD_EXP 40
47738: PUSH
47739: LD_EXP 41
47743: PUSH
47744: LD_EXP 44
47748: PUSH
47749: LD_EXP 45
47753: PUSH
47754: LD_EXP 46
47758: PUSH
47759: LD_EXP 42
47763: PUSH
47764: LD_EXP 43
47768: PUSH
47769: LD_EXP 51
47773: PUSH
47774: LD_EXP 55
47778: PUSH
47779: LD_EXP 56
47783: PUSH
47784: LD_EXP 58
47788: PUSH
47789: LD_EXP 62
47793: PUSH
47794: LD_EXP 65
47798: PUSH
47799: LD_EXP 66
47803: PUSH
47804: LD_EXP 76
47808: PUSH
47809: LD_EXP 77
47813: PUSH
47814: LD_EXP 78
47818: PUSH
47819: LD_EXP 79
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// tmp :=  ;
47880: LD_ADDR_VAR 0 3
47884: PUSH
47885: LD_STRING 
47887: ST_TO_ADDR
// for i = 1 to normalCounter do
47888: LD_ADDR_VAR 0 8
47892: PUSH
47893: DOUBLE
47894: LD_INT 1
47896: DEC
47897: ST_TO_ADDR
47898: LD_EXP 24
47902: PUSH
47903: FOR_TO
47904: IFFALSE 47940
// begin if flags [ i ] then
47906: LD_VAR 0 4
47910: PUSH
47911: LD_VAR 0 8
47915: ARRAY
47916: IFFALSE 47938
// tmp := tmp & i & ; ;
47918: LD_ADDR_VAR 0 3
47922: PUSH
47923: LD_VAR 0 3
47927: PUSH
47928: LD_VAR 0 8
47932: STR
47933: PUSH
47934: LD_STRING ;
47936: STR
47937: ST_TO_ADDR
// end ;
47938: GO 47903
47940: POP
47941: POP
// for i = 1 to hardcoreCounter do
47942: LD_ADDR_VAR 0 8
47946: PUSH
47947: DOUBLE
47948: LD_INT 1
47950: DEC
47951: ST_TO_ADDR
47952: LD_EXP 25
47956: PUSH
47957: FOR_TO
47958: IFFALSE 48004
// begin if flags [ normalCounter + i ] then
47960: LD_VAR 0 4
47964: PUSH
47965: LD_EXP 24
47969: PUSH
47970: LD_VAR 0 8
47974: PLUS
47975: ARRAY
47976: IFFALSE 48002
// tmp := tmp & ( 100 + i ) & ; ;
47978: LD_ADDR_VAR 0 3
47982: PUSH
47983: LD_VAR 0 3
47987: PUSH
47988: LD_INT 100
47990: PUSH
47991: LD_VAR 0 8
47995: PLUS
47996: STR
47997: PUSH
47998: LD_STRING ;
48000: STR
48001: ST_TO_ADDR
// end ;
48002: GO 47957
48004: POP
48005: POP
// if tmp then
48006: LD_VAR 0 3
48010: IFFALSE 48022
// active := tmp ;
48012: LD_ADDR_VAR 0 7
48016: PUSH
48017: LD_VAR 0 3
48021: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
48022: LD_STRING getStreamItemsFromMission("
48024: PUSH
48025: LD_VAR 0 5
48029: STR
48030: PUSH
48031: LD_STRING ","
48033: STR
48034: PUSH
48035: LD_VAR 0 6
48039: STR
48040: PUSH
48041: LD_STRING ","
48043: STR
48044: PUSH
48045: LD_VAR 0 7
48049: STR
48050: PUSH
48051: LD_STRING ")
48053: STR
48054: PPUSH
48055: CALL_OW 559
// end else
48059: GO 48068
// ToLua ( getStreamItemsFromMission("","","") ) ;
48061: LD_STRING getStreamItemsFromMission("","","")
48063: PPUSH
48064: CALL_OW 559
// end ;
48068: LD_VAR 0 2
48072: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
48073: LD_EXP 23
48077: PUSH
48078: LD_EXP 28
48082: AND
48083: IFFALSE 48207
48085: GO 48087
48087: DISABLE
48088: LD_INT 0
48090: PPUSH
48091: PPUSH
// begin enable ;
48092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
48093: LD_ADDR_VAR 0 2
48097: PUSH
48098: LD_INT 22
48100: PUSH
48101: LD_OWVAR 2
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 34
48115: PUSH
48116: LD_INT 7
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 34
48125: PUSH
48126: LD_INT 45
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 34
48135: PUSH
48136: LD_INT 28
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 34
48145: PUSH
48146: LD_INT 47
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PPUSH
48164: CALL_OW 69
48168: ST_TO_ADDR
// if not tmp then
48169: LD_VAR 0 2
48173: NOT
48174: IFFALSE 48178
// exit ;
48176: GO 48207
// for i in tmp do
48178: LD_ADDR_VAR 0 1
48182: PUSH
48183: LD_VAR 0 2
48187: PUSH
48188: FOR_IN
48189: IFFALSE 48205
// begin SetLives ( i , 0 ) ;
48191: LD_VAR 0 1
48195: PPUSH
48196: LD_INT 0
48198: PPUSH
48199: CALL_OW 234
// end ;
48203: GO 48188
48205: POP
48206: POP
// end ;
48207: PPOPN 2
48209: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
48210: LD_EXP 23
48214: PUSH
48215: LD_EXP 29
48219: AND
48220: IFFALSE 48304
48222: GO 48224
48224: DISABLE
48225: LD_INT 0
48227: PPUSH
48228: PPUSH
// begin enable ;
48229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
48230: LD_ADDR_VAR 0 2
48234: PUSH
48235: LD_INT 22
48237: PUSH
48238: LD_OWVAR 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 32
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PPUSH
48261: CALL_OW 69
48265: ST_TO_ADDR
// if not tmp then
48266: LD_VAR 0 2
48270: NOT
48271: IFFALSE 48275
// exit ;
48273: GO 48304
// for i in tmp do
48275: LD_ADDR_VAR 0 1
48279: PUSH
48280: LD_VAR 0 2
48284: PUSH
48285: FOR_IN
48286: IFFALSE 48302
// begin SetLives ( i , 0 ) ;
48288: LD_VAR 0 1
48292: PPUSH
48293: LD_INT 0
48295: PPUSH
48296: CALL_OW 234
// end ;
48300: GO 48285
48302: POP
48303: POP
// end ;
48304: PPOPN 2
48306: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
48307: LD_EXP 23
48311: PUSH
48312: LD_EXP 26
48316: AND
48317: IFFALSE 48410
48319: GO 48321
48321: DISABLE
48322: LD_INT 0
48324: PPUSH
// begin enable ;
48325: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
48326: LD_ADDR_VAR 0 1
48330: PUSH
48331: LD_INT 22
48333: PUSH
48334: LD_OWVAR 2
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 25
48348: PUSH
48349: LD_INT 5
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 25
48358: PUSH
48359: LD_INT 9
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 25
48368: PUSH
48369: LD_INT 8
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PPUSH
48386: CALL_OW 69
48390: PUSH
48391: FOR_IN
48392: IFFALSE 48408
// begin SetClass ( i , 1 ) ;
48394: LD_VAR 0 1
48398: PPUSH
48399: LD_INT 1
48401: PPUSH
48402: CALL_OW 336
// end ;
48406: GO 48391
48408: POP
48409: POP
// end ;
48410: PPOPN 1
48412: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
48413: LD_EXP 23
48417: PUSH
48418: LD_EXP 27
48422: AND
48423: PUSH
48424: LD_OWVAR 65
48428: PUSH
48429: LD_INT 7
48431: LESS
48432: AND
48433: IFFALSE 48447
48435: GO 48437
48437: DISABLE
// begin enable ;
48438: ENABLE
// game_speed := 7 ;
48439: LD_ADDR_OWVAR 65
48443: PUSH
48444: LD_INT 7
48446: ST_TO_ADDR
// end ;
48447: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
48448: LD_EXP 23
48452: PUSH
48453: LD_EXP 30
48457: AND
48458: IFFALSE 48660
48460: GO 48462
48462: DISABLE
48463: LD_INT 0
48465: PPUSH
48466: PPUSH
48467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
48468: LD_ADDR_VAR 0 3
48472: PUSH
48473: LD_INT 81
48475: PUSH
48476: LD_OWVAR 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 21
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PPUSH
48499: CALL_OW 69
48503: ST_TO_ADDR
// if not tmp then
48504: LD_VAR 0 3
48508: NOT
48509: IFFALSE 48513
// exit ;
48511: GO 48660
// if tmp > 5 then
48513: LD_VAR 0 3
48517: PUSH
48518: LD_INT 5
48520: GREATER
48521: IFFALSE 48533
// k := 5 else
48523: LD_ADDR_VAR 0 2
48527: PUSH
48528: LD_INT 5
48530: ST_TO_ADDR
48531: GO 48543
// k := tmp ;
48533: LD_ADDR_VAR 0 2
48537: PUSH
48538: LD_VAR 0 3
48542: ST_TO_ADDR
// for i := 1 to k do
48543: LD_ADDR_VAR 0 1
48547: PUSH
48548: DOUBLE
48549: LD_INT 1
48551: DEC
48552: ST_TO_ADDR
48553: LD_VAR 0 2
48557: PUSH
48558: FOR_TO
48559: IFFALSE 48658
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
48561: LD_VAR 0 3
48565: PUSH
48566: LD_VAR 0 1
48570: ARRAY
48571: PPUSH
48572: LD_VAR 0 1
48576: PUSH
48577: LD_INT 4
48579: MOD
48580: PUSH
48581: LD_INT 1
48583: PLUS
48584: PPUSH
48585: CALL_OW 259
48589: PUSH
48590: LD_INT 10
48592: LESS
48593: IFFALSE 48656
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
48595: LD_VAR 0 3
48599: PUSH
48600: LD_VAR 0 1
48604: ARRAY
48605: PPUSH
48606: LD_VAR 0 1
48610: PUSH
48611: LD_INT 4
48613: MOD
48614: PUSH
48615: LD_INT 1
48617: PLUS
48618: PPUSH
48619: LD_VAR 0 3
48623: PUSH
48624: LD_VAR 0 1
48628: ARRAY
48629: PPUSH
48630: LD_VAR 0 1
48634: PUSH
48635: LD_INT 4
48637: MOD
48638: PUSH
48639: LD_INT 1
48641: PLUS
48642: PPUSH
48643: CALL_OW 259
48647: PUSH
48648: LD_INT 1
48650: PLUS
48651: PPUSH
48652: CALL_OW 237
48656: GO 48558
48658: POP
48659: POP
// end ;
48660: PPOPN 3
48662: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
48663: LD_EXP 23
48667: PUSH
48668: LD_EXP 31
48672: AND
48673: IFFALSE 48693
48675: GO 48677
48677: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
48678: LD_INT 4
48680: PPUSH
48681: LD_OWVAR 2
48685: PPUSH
48686: LD_INT 0
48688: PPUSH
48689: CALL_OW 324
48693: END
// every 0 0$1 trigger StreamModeActive and sShovel do
48694: LD_EXP 23
48698: PUSH
48699: LD_EXP 60
48703: AND
48704: IFFALSE 48724
48706: GO 48708
48708: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
48709: LD_INT 19
48711: PPUSH
48712: LD_OWVAR 2
48716: PPUSH
48717: LD_INT 0
48719: PPUSH
48720: CALL_OW 324
48724: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
48725: LD_EXP 23
48729: PUSH
48730: LD_EXP 32
48734: AND
48735: IFFALSE 48837
48737: GO 48739
48739: DISABLE
48740: LD_INT 0
48742: PPUSH
48743: PPUSH
// begin enable ;
48744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
48745: LD_ADDR_VAR 0 2
48749: PUSH
48750: LD_INT 22
48752: PUSH
48753: LD_OWVAR 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 34
48767: PUSH
48768: LD_INT 11
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 34
48777: PUSH
48778: LD_INT 30
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PPUSH
48794: CALL_OW 69
48798: ST_TO_ADDR
// if not tmp then
48799: LD_VAR 0 2
48803: NOT
48804: IFFALSE 48808
// exit ;
48806: GO 48837
// for i in tmp do
48808: LD_ADDR_VAR 0 1
48812: PUSH
48813: LD_VAR 0 2
48817: PUSH
48818: FOR_IN
48819: IFFALSE 48835
// begin SetLives ( i , 0 ) ;
48821: LD_VAR 0 1
48825: PPUSH
48826: LD_INT 0
48828: PPUSH
48829: CALL_OW 234
// end ;
48833: GO 48818
48835: POP
48836: POP
// end ;
48837: PPOPN 2
48839: END
// every 0 0$1 trigger StreamModeActive and sBunker do
48840: LD_EXP 23
48844: PUSH
48845: LD_EXP 33
48849: AND
48850: IFFALSE 48870
48852: GO 48854
48854: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
48855: LD_INT 32
48857: PPUSH
48858: LD_OWVAR 2
48862: PPUSH
48863: LD_INT 0
48865: PPUSH
48866: CALL_OW 324
48870: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
48871: LD_EXP 23
48875: PUSH
48876: LD_EXP 34
48880: AND
48881: IFFALSE 49062
48883: GO 48885
48885: DISABLE
48886: LD_INT 0
48888: PPUSH
48889: PPUSH
48890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
48891: LD_ADDR_VAR 0 2
48895: PUSH
48896: LD_INT 22
48898: PUSH
48899: LD_OWVAR 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 33
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PPUSH
48922: CALL_OW 69
48926: ST_TO_ADDR
// if not tmp then
48927: LD_VAR 0 2
48931: NOT
48932: IFFALSE 48936
// exit ;
48934: GO 49062
// side := 0 ;
48936: LD_ADDR_VAR 0 3
48940: PUSH
48941: LD_INT 0
48943: ST_TO_ADDR
// for i := 1 to 8 do
48944: LD_ADDR_VAR 0 1
48948: PUSH
48949: DOUBLE
48950: LD_INT 1
48952: DEC
48953: ST_TO_ADDR
48954: LD_INT 8
48956: PUSH
48957: FOR_TO
48958: IFFALSE 49006
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
48960: LD_OWVAR 2
48964: PUSH
48965: LD_VAR 0 1
48969: NONEQUAL
48970: PUSH
48971: LD_OWVAR 2
48975: PPUSH
48976: LD_VAR 0 1
48980: PPUSH
48981: CALL_OW 81
48985: PUSH
48986: LD_INT 2
48988: EQUAL
48989: AND
48990: IFFALSE 49004
// begin side := i ;
48992: LD_ADDR_VAR 0 3
48996: PUSH
48997: LD_VAR 0 1
49001: ST_TO_ADDR
// break ;
49002: GO 49006
// end ;
49004: GO 48957
49006: POP
49007: POP
// if not side then
49008: LD_VAR 0 3
49012: NOT
49013: IFFALSE 49017
// exit ;
49015: GO 49062
// for i := 1 to tmp do
49017: LD_ADDR_VAR 0 1
49021: PUSH
49022: DOUBLE
49023: LD_INT 1
49025: DEC
49026: ST_TO_ADDR
49027: LD_VAR 0 2
49031: PUSH
49032: FOR_TO
49033: IFFALSE 49060
// if Prob ( 60 ) then
49035: LD_INT 60
49037: PPUSH
49038: CALL_OW 13
49042: IFFALSE 49058
// SetSide ( i , side ) ;
49044: LD_VAR 0 1
49048: PPUSH
49049: LD_VAR 0 3
49053: PPUSH
49054: CALL_OW 235
49058: GO 49032
49060: POP
49061: POP
// end ;
49062: PPOPN 3
49064: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
49065: LD_EXP 23
49069: PUSH
49070: LD_EXP 36
49074: AND
49075: IFFALSE 49194
49077: GO 49079
49079: DISABLE
49080: LD_INT 0
49082: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
49083: LD_ADDR_VAR 0 1
49087: PUSH
49088: LD_INT 22
49090: PUSH
49091: LD_OWVAR 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 21
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: PUSH
49113: LD_INT 23
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: PPUSH
49132: CALL_OW 69
49136: PUSH
49137: FOR_IN
49138: IFFALSE 49192
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
49140: LD_VAR 0 1
49144: PPUSH
49145: CALL_OW 257
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: LD_INT 4
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: IN
49168: IFFALSE 49190
// SetClass ( un , rand ( 1 , 4 ) ) ;
49170: LD_VAR 0 1
49174: PPUSH
49175: LD_INT 1
49177: PPUSH
49178: LD_INT 4
49180: PPUSH
49181: CALL_OW 12
49185: PPUSH
49186: CALL_OW 336
49190: GO 49137
49192: POP
49193: POP
// end ;
49194: PPOPN 1
49196: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
49197: LD_EXP 23
49201: PUSH
49202: LD_EXP 35
49206: AND
49207: IFFALSE 49286
49209: GO 49211
49211: DISABLE
49212: LD_INT 0
49214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49215: LD_ADDR_VAR 0 1
49219: PUSH
49220: LD_INT 22
49222: PUSH
49223: LD_OWVAR 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 21
49234: PUSH
49235: LD_INT 3
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PPUSH
49246: CALL_OW 69
49250: ST_TO_ADDR
// if not tmp then
49251: LD_VAR 0 1
49255: NOT
49256: IFFALSE 49260
// exit ;
49258: GO 49286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
49260: LD_VAR 0 1
49264: PUSH
49265: LD_INT 1
49267: PPUSH
49268: LD_VAR 0 1
49272: PPUSH
49273: CALL_OW 12
49277: ARRAY
49278: PPUSH
49279: LD_INT 100
49281: PPUSH
49282: CALL_OW 234
// end ;
49286: PPOPN 1
49288: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
49289: LD_EXP 23
49293: PUSH
49294: LD_EXP 37
49298: AND
49299: IFFALSE 49397
49301: GO 49303
49303: DISABLE
49304: LD_INT 0
49306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49307: LD_ADDR_VAR 0 1
49311: PUSH
49312: LD_INT 22
49314: PUSH
49315: LD_OWVAR 2
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 21
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PPUSH
49338: CALL_OW 69
49342: ST_TO_ADDR
// if not tmp then
49343: LD_VAR 0 1
49347: NOT
49348: IFFALSE 49352
// exit ;
49350: GO 49397
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
49352: LD_VAR 0 1
49356: PUSH
49357: LD_INT 1
49359: PPUSH
49360: LD_VAR 0 1
49364: PPUSH
49365: CALL_OW 12
49369: ARRAY
49370: PPUSH
49371: LD_INT 1
49373: PPUSH
49374: LD_INT 4
49376: PPUSH
49377: CALL_OW 12
49381: PPUSH
49382: LD_INT 3000
49384: PPUSH
49385: LD_INT 9000
49387: PPUSH
49388: CALL_OW 12
49392: PPUSH
49393: CALL_OW 492
// end ;
49397: PPOPN 1
49399: END
// every 0 0$1 trigger StreamModeActive and sDepot do
49400: LD_EXP 23
49404: PUSH
49405: LD_EXP 38
49409: AND
49410: IFFALSE 49430
49412: GO 49414
49414: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
49415: LD_INT 1
49417: PPUSH
49418: LD_OWVAR 2
49422: PPUSH
49423: LD_INT 0
49425: PPUSH
49426: CALL_OW 324
49430: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
49431: LD_EXP 23
49435: PUSH
49436: LD_EXP 39
49440: AND
49441: IFFALSE 49524
49443: GO 49445
49445: DISABLE
49446: LD_INT 0
49448: PPUSH
49449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49450: LD_ADDR_VAR 0 2
49454: PUSH
49455: LD_INT 22
49457: PUSH
49458: LD_OWVAR 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 21
49469: PUSH
49470: LD_INT 3
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PPUSH
49481: CALL_OW 69
49485: ST_TO_ADDR
// if not tmp then
49486: LD_VAR 0 2
49490: NOT
49491: IFFALSE 49495
// exit ;
49493: GO 49524
// for i in tmp do
49495: LD_ADDR_VAR 0 1
49499: PUSH
49500: LD_VAR 0 2
49504: PUSH
49505: FOR_IN
49506: IFFALSE 49522
// SetBLevel ( i , 10 ) ;
49508: LD_VAR 0 1
49512: PPUSH
49513: LD_INT 10
49515: PPUSH
49516: CALL_OW 241
49520: GO 49505
49522: POP
49523: POP
// end ;
49524: PPOPN 2
49526: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
49527: LD_EXP 23
49531: PUSH
49532: LD_EXP 40
49536: AND
49537: IFFALSE 49648
49539: GO 49541
49541: DISABLE
49542: LD_INT 0
49544: PPUSH
49545: PPUSH
49546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49547: LD_ADDR_VAR 0 3
49551: PUSH
49552: LD_INT 22
49554: PUSH
49555: LD_OWVAR 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 25
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PPUSH
49578: CALL_OW 69
49582: ST_TO_ADDR
// if not tmp then
49583: LD_VAR 0 3
49587: NOT
49588: IFFALSE 49592
// exit ;
49590: GO 49648
// un := tmp [ rand ( 1 , tmp ) ] ;
49592: LD_ADDR_VAR 0 2
49596: PUSH
49597: LD_VAR 0 3
49601: PUSH
49602: LD_INT 1
49604: PPUSH
49605: LD_VAR 0 3
49609: PPUSH
49610: CALL_OW 12
49614: ARRAY
49615: ST_TO_ADDR
// if Crawls ( un ) then
49616: LD_VAR 0 2
49620: PPUSH
49621: CALL_OW 318
49625: IFFALSE 49636
// ComWalk ( un ) ;
49627: LD_VAR 0 2
49631: PPUSH
49632: CALL_OW 138
// SetClass ( un , class_sniper ) ;
49636: LD_VAR 0 2
49640: PPUSH
49641: LD_INT 5
49643: PPUSH
49644: CALL_OW 336
// end ;
49648: PPOPN 3
49650: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
49651: LD_EXP 23
49655: PUSH
49656: LD_EXP 41
49660: AND
49661: PUSH
49662: LD_OWVAR 67
49666: PUSH
49667: LD_INT 4
49669: LESS
49670: AND
49671: IFFALSE 49690
49673: GO 49675
49675: DISABLE
// begin Difficulty := Difficulty + 1 ;
49676: LD_ADDR_OWVAR 67
49680: PUSH
49681: LD_OWVAR 67
49685: PUSH
49686: LD_INT 1
49688: PLUS
49689: ST_TO_ADDR
// end ;
49690: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
49691: LD_EXP 23
49695: PUSH
49696: LD_EXP 42
49700: AND
49701: IFFALSE 49804
49703: GO 49705
49705: DISABLE
49706: LD_INT 0
49708: PPUSH
// begin for i := 1 to 5 do
49709: LD_ADDR_VAR 0 1
49713: PUSH
49714: DOUBLE
49715: LD_INT 1
49717: DEC
49718: ST_TO_ADDR
49719: LD_INT 5
49721: PUSH
49722: FOR_TO
49723: IFFALSE 49802
// begin uc_nation := nation_nature ;
49725: LD_ADDR_OWVAR 21
49729: PUSH
49730: LD_INT 0
49732: ST_TO_ADDR
// uc_side := 0 ;
49733: LD_ADDR_OWVAR 20
49737: PUSH
49738: LD_INT 0
49740: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49741: LD_ADDR_OWVAR 29
49745: PUSH
49746: LD_INT 12
49748: PUSH
49749: LD_INT 12
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// hc_agressivity := 20 ;
49756: LD_ADDR_OWVAR 35
49760: PUSH
49761: LD_INT 20
49763: ST_TO_ADDR
// hc_class := class_tiger ;
49764: LD_ADDR_OWVAR 28
49768: PUSH
49769: LD_INT 14
49771: ST_TO_ADDR
// hc_gallery :=  ;
49772: LD_ADDR_OWVAR 33
49776: PUSH
49777: LD_STRING 
49779: ST_TO_ADDR
// hc_name :=  ;
49780: LD_ADDR_OWVAR 26
49784: PUSH
49785: LD_STRING 
49787: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
49788: CALL_OW 44
49792: PPUSH
49793: LD_INT 0
49795: PPUSH
49796: CALL_OW 51
// end ;
49800: GO 49722
49802: POP
49803: POP
// end ;
49804: PPOPN 1
49806: END
// every 0 0$1 trigger StreamModeActive and sBomb do
49807: LD_EXP 23
49811: PUSH
49812: LD_EXP 43
49816: AND
49817: IFFALSE 49826
49819: GO 49821
49821: DISABLE
// StreamSibBomb ;
49822: CALL 49827 0 0
49826: END
// export function StreamSibBomb ; var i , x , y ; begin
49827: LD_INT 0
49829: PPUSH
49830: PPUSH
49831: PPUSH
49832: PPUSH
// result := false ;
49833: LD_ADDR_VAR 0 1
49837: PUSH
49838: LD_INT 0
49840: ST_TO_ADDR
// for i := 1 to 16 do
49841: LD_ADDR_VAR 0 2
49845: PUSH
49846: DOUBLE
49847: LD_INT 1
49849: DEC
49850: ST_TO_ADDR
49851: LD_INT 16
49853: PUSH
49854: FOR_TO
49855: IFFALSE 50054
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49857: LD_ADDR_VAR 0 3
49861: PUSH
49862: LD_INT 10
49864: PUSH
49865: LD_INT 20
49867: PUSH
49868: LD_INT 30
49870: PUSH
49871: LD_INT 40
49873: PUSH
49874: LD_INT 50
49876: PUSH
49877: LD_INT 60
49879: PUSH
49880: LD_INT 70
49882: PUSH
49883: LD_INT 80
49885: PUSH
49886: LD_INT 90
49888: PUSH
49889: LD_INT 100
49891: PUSH
49892: LD_INT 110
49894: PUSH
49895: LD_INT 120
49897: PUSH
49898: LD_INT 130
49900: PUSH
49901: LD_INT 140
49903: PUSH
49904: LD_INT 150
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PPUSH
49927: LD_INT 15
49929: PPUSH
49930: CALL_OW 12
49934: ARRAY
49935: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49936: LD_ADDR_VAR 0 4
49940: PUSH
49941: LD_INT 10
49943: PUSH
49944: LD_INT 20
49946: PUSH
49947: LD_INT 30
49949: PUSH
49950: LD_INT 40
49952: PUSH
49953: LD_INT 50
49955: PUSH
49956: LD_INT 60
49958: PUSH
49959: LD_INT 70
49961: PUSH
49962: LD_INT 80
49964: PUSH
49965: LD_INT 90
49967: PUSH
49968: LD_INT 100
49970: PUSH
49971: LD_INT 110
49973: PUSH
49974: LD_INT 120
49976: PUSH
49977: LD_INT 130
49979: PUSH
49980: LD_INT 140
49982: PUSH
49983: LD_INT 150
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PPUSH
50006: LD_INT 15
50008: PPUSH
50009: CALL_OW 12
50013: ARRAY
50014: ST_TO_ADDR
// if ValidHex ( x , y ) then
50015: LD_VAR 0 3
50019: PPUSH
50020: LD_VAR 0 4
50024: PPUSH
50025: CALL_OW 488
50029: IFFALSE 50052
// begin result := [ x , y ] ;
50031: LD_ADDR_VAR 0 1
50035: PUSH
50036: LD_VAR 0 3
50040: PUSH
50041: LD_VAR 0 4
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: ST_TO_ADDR
// break ;
50050: GO 50054
// end ; end ;
50052: GO 49854
50054: POP
50055: POP
// if result then
50056: LD_VAR 0 1
50060: IFFALSE 50120
// begin ToLua ( playSibBomb() ) ;
50062: LD_STRING playSibBomb()
50064: PPUSH
50065: CALL_OW 559
// wait ( 0 0$14 ) ;
50069: LD_INT 490
50071: PPUSH
50072: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
50076: LD_VAR 0 1
50080: PUSH
50081: LD_INT 1
50083: ARRAY
50084: PPUSH
50085: LD_VAR 0 1
50089: PUSH
50090: LD_INT 2
50092: ARRAY
50093: PPUSH
50094: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
50098: LD_VAR 0 1
50102: PUSH
50103: LD_INT 1
50105: ARRAY
50106: PPUSH
50107: LD_VAR 0 1
50111: PUSH
50112: LD_INT 2
50114: ARRAY
50115: PPUSH
50116: CALL_OW 429
// end ; end ;
50120: LD_VAR 0 1
50124: RET
// every 0 0$1 trigger StreamModeActive and sReset do
50125: LD_EXP 23
50129: PUSH
50130: LD_EXP 45
50134: AND
50135: IFFALSE 50147
50137: GO 50139
50139: DISABLE
// YouLost (  ) ;
50140: LD_STRING 
50142: PPUSH
50143: CALL_OW 104
50147: END
// every 0 0$1 trigger StreamModeActive and sFog do
50148: LD_EXP 23
50152: PUSH
50153: LD_EXP 44
50157: AND
50158: IFFALSE 50172
50160: GO 50162
50162: DISABLE
// FogOff ( your_side ) ;
50163: LD_OWVAR 2
50167: PPUSH
50168: CALL_OW 344
50172: END
// every 0 0$1 trigger StreamModeActive and sSun do
50173: LD_EXP 23
50177: PUSH
50178: LD_EXP 46
50182: AND
50183: IFFALSE 50211
50185: GO 50187
50187: DISABLE
// begin solar_recharge_percent := 0 ;
50188: LD_ADDR_OWVAR 79
50192: PUSH
50193: LD_INT 0
50195: ST_TO_ADDR
// wait ( 5 5$00 ) ;
50196: LD_INT 10500
50198: PPUSH
50199: CALL_OW 67
// solar_recharge_percent := 100 ;
50203: LD_ADDR_OWVAR 79
50207: PUSH
50208: LD_INT 100
50210: ST_TO_ADDR
// end ;
50211: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
50212: LD_EXP 23
50216: PUSH
50217: LD_EXP 47
50221: AND
50222: IFFALSE 50461
50224: GO 50226
50226: DISABLE
50227: LD_INT 0
50229: PPUSH
50230: PPUSH
50231: PPUSH
// begin tmp := [ ] ;
50232: LD_ADDR_VAR 0 3
50236: PUSH
50237: EMPTY
50238: ST_TO_ADDR
// for i := 1 to 6 do
50239: LD_ADDR_VAR 0 1
50243: PUSH
50244: DOUBLE
50245: LD_INT 1
50247: DEC
50248: ST_TO_ADDR
50249: LD_INT 6
50251: PUSH
50252: FOR_TO
50253: IFFALSE 50358
// begin uc_nation := nation_nature ;
50255: LD_ADDR_OWVAR 21
50259: PUSH
50260: LD_INT 0
50262: ST_TO_ADDR
// uc_side := 0 ;
50263: LD_ADDR_OWVAR 20
50267: PUSH
50268: LD_INT 0
50270: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50271: LD_ADDR_OWVAR 29
50275: PUSH
50276: LD_INT 12
50278: PUSH
50279: LD_INT 12
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// hc_agressivity := 20 ;
50286: LD_ADDR_OWVAR 35
50290: PUSH
50291: LD_INT 20
50293: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
50294: LD_ADDR_OWVAR 28
50298: PUSH
50299: LD_INT 17
50301: ST_TO_ADDR
// hc_gallery :=  ;
50302: LD_ADDR_OWVAR 33
50306: PUSH
50307: LD_STRING 
50309: ST_TO_ADDR
// hc_name :=  ;
50310: LD_ADDR_OWVAR 26
50314: PUSH
50315: LD_STRING 
50317: ST_TO_ADDR
// un := CreateHuman ;
50318: LD_ADDR_VAR 0 2
50322: PUSH
50323: CALL_OW 44
50327: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
50328: LD_VAR 0 2
50332: PPUSH
50333: LD_INT 1
50335: PPUSH
50336: CALL_OW 51
// tmp := tmp ^ un ;
50340: LD_ADDR_VAR 0 3
50344: PUSH
50345: LD_VAR 0 3
50349: PUSH
50350: LD_VAR 0 2
50354: ADD
50355: ST_TO_ADDR
// end ;
50356: GO 50252
50358: POP
50359: POP
// repeat wait ( 0 0$1 ) ;
50360: LD_INT 35
50362: PPUSH
50363: CALL_OW 67
// for un in tmp do
50367: LD_ADDR_VAR 0 2
50371: PUSH
50372: LD_VAR 0 3
50376: PUSH
50377: FOR_IN
50378: IFFALSE 50452
// begin if IsDead ( un ) then
50380: LD_VAR 0 2
50384: PPUSH
50385: CALL_OW 301
50389: IFFALSE 50409
// begin tmp := tmp diff un ;
50391: LD_ADDR_VAR 0 3
50395: PUSH
50396: LD_VAR 0 3
50400: PUSH
50401: LD_VAR 0 2
50405: DIFF
50406: ST_TO_ADDR
// continue ;
50407: GO 50377
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
50409: LD_VAR 0 2
50413: PPUSH
50414: LD_INT 3
50416: PUSH
50417: LD_INT 22
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PPUSH
50431: CALL_OW 69
50435: PPUSH
50436: LD_VAR 0 2
50440: PPUSH
50441: CALL_OW 74
50445: PPUSH
50446: CALL_OW 115
// end ;
50450: GO 50377
50452: POP
50453: POP
// until not tmp ;
50454: LD_VAR 0 3
50458: NOT
50459: IFFALSE 50360
// end ;
50461: PPOPN 3
50463: END
// every 0 0$1 trigger StreamModeActive and sTroll do
50464: LD_EXP 23
50468: PUSH
50469: LD_EXP 48
50473: AND
50474: IFFALSE 50528
50476: GO 50478
50478: DISABLE
// begin ToLua ( displayTroll(); ) ;
50479: LD_STRING displayTroll();
50481: PPUSH
50482: CALL_OW 559
// wait ( 3 3$00 ) ;
50486: LD_INT 6300
50488: PPUSH
50489: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50493: LD_STRING hideTroll();
50495: PPUSH
50496: CALL_OW 559
// wait ( 1 1$00 ) ;
50500: LD_INT 2100
50502: PPUSH
50503: CALL_OW 67
// ToLua ( displayTroll(); ) ;
50507: LD_STRING displayTroll();
50509: PPUSH
50510: CALL_OW 559
// wait ( 1 1$00 ) ;
50514: LD_INT 2100
50516: PPUSH
50517: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50521: LD_STRING hideTroll();
50523: PPUSH
50524: CALL_OW 559
// end ;
50528: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
50529: LD_EXP 23
50533: PUSH
50534: LD_EXP 49
50538: AND
50539: IFFALSE 50602
50541: GO 50543
50543: DISABLE
50544: LD_INT 0
50546: PPUSH
// begin p := 0 ;
50547: LD_ADDR_VAR 0 1
50551: PUSH
50552: LD_INT 0
50554: ST_TO_ADDR
// repeat game_speed := 1 ;
50555: LD_ADDR_OWVAR 65
50559: PUSH
50560: LD_INT 1
50562: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50563: LD_INT 35
50565: PPUSH
50566: CALL_OW 67
// p := p + 1 ;
50570: LD_ADDR_VAR 0 1
50574: PUSH
50575: LD_VAR 0 1
50579: PUSH
50580: LD_INT 1
50582: PLUS
50583: ST_TO_ADDR
// until p >= 60 ;
50584: LD_VAR 0 1
50588: PUSH
50589: LD_INT 60
50591: GREATEREQUAL
50592: IFFALSE 50555
// game_speed := 4 ;
50594: LD_ADDR_OWVAR 65
50598: PUSH
50599: LD_INT 4
50601: ST_TO_ADDR
// end ;
50602: PPOPN 1
50604: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
50605: LD_EXP 23
50609: PUSH
50610: LD_EXP 50
50614: AND
50615: IFFALSE 50761
50617: GO 50619
50619: DISABLE
50620: LD_INT 0
50622: PPUSH
50623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50624: LD_ADDR_VAR 0 1
50628: PUSH
50629: LD_INT 22
50631: PUSH
50632: LD_OWVAR 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 30
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 30
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PPUSH
50673: CALL_OW 69
50677: ST_TO_ADDR
// if not depot then
50678: LD_VAR 0 1
50682: NOT
50683: IFFALSE 50687
// exit ;
50685: GO 50761
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
50687: LD_ADDR_VAR 0 2
50691: PUSH
50692: LD_VAR 0 1
50696: PUSH
50697: LD_INT 1
50699: PPUSH
50700: LD_VAR 0 1
50704: PPUSH
50705: CALL_OW 12
50709: ARRAY
50710: PPUSH
50711: CALL_OW 274
50715: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
50716: LD_VAR 0 2
50720: PPUSH
50721: LD_INT 1
50723: PPUSH
50724: LD_INT 0
50726: PPUSH
50727: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
50731: LD_VAR 0 2
50735: PPUSH
50736: LD_INT 2
50738: PPUSH
50739: LD_INT 0
50741: PPUSH
50742: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
50746: LD_VAR 0 2
50750: PPUSH
50751: LD_INT 3
50753: PPUSH
50754: LD_INT 0
50756: PPUSH
50757: CALL_OW 277
// end ;
50761: PPOPN 2
50763: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
50764: LD_EXP 23
50768: PUSH
50769: LD_EXP 51
50773: AND
50774: IFFALSE 50871
50776: GO 50778
50778: DISABLE
50779: LD_INT 0
50781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50782: LD_ADDR_VAR 0 1
50786: PUSH
50787: LD_INT 22
50789: PUSH
50790: LD_OWVAR 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 21
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: LD_INT 23
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: PPUSH
50831: CALL_OW 69
50835: ST_TO_ADDR
// if not tmp then
50836: LD_VAR 0 1
50840: NOT
50841: IFFALSE 50845
// exit ;
50843: GO 50871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 1
50852: PPUSH
50853: LD_VAR 0 1
50857: PPUSH
50858: CALL_OW 12
50862: ARRAY
50863: PPUSH
50864: LD_INT 200
50866: PPUSH
50867: CALL_OW 234
// end ;
50871: PPOPN 1
50873: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
50874: LD_EXP 23
50878: PUSH
50879: LD_EXP 52
50883: AND
50884: IFFALSE 50963
50886: GO 50888
50888: DISABLE
50889: LD_INT 0
50891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
50892: LD_ADDR_VAR 0 1
50896: PUSH
50897: LD_INT 22
50899: PUSH
50900: LD_OWVAR 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 21
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PPUSH
50923: CALL_OW 69
50927: ST_TO_ADDR
// if not tmp then
50928: LD_VAR 0 1
50932: NOT
50933: IFFALSE 50937
// exit ;
50935: GO 50963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
50937: LD_VAR 0 1
50941: PUSH
50942: LD_INT 1
50944: PPUSH
50945: LD_VAR 0 1
50949: PPUSH
50950: CALL_OW 12
50954: ARRAY
50955: PPUSH
50956: LD_INT 60
50958: PPUSH
50959: CALL_OW 234
// end ;
50963: PPOPN 1
50965: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
50966: LD_EXP 23
50970: PUSH
50971: LD_EXP 53
50975: AND
50976: IFFALSE 51075
50978: GO 50980
50980: DISABLE
50981: LD_INT 0
50983: PPUSH
50984: PPUSH
// begin enable ;
50985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
50986: LD_ADDR_VAR 0 1
50990: PUSH
50991: LD_INT 22
50993: PUSH
50994: LD_OWVAR 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 61
51005: PUSH
51006: EMPTY
51007: LIST
51008: PUSH
51009: LD_INT 33
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: PPUSH
51024: CALL_OW 69
51028: ST_TO_ADDR
// if not tmp then
51029: LD_VAR 0 1
51033: NOT
51034: IFFALSE 51038
// exit ;
51036: GO 51075
// for i in tmp do
51038: LD_ADDR_VAR 0 2
51042: PUSH
51043: LD_VAR 0 1
51047: PUSH
51048: FOR_IN
51049: IFFALSE 51073
// if IsControledBy ( i ) then
51051: LD_VAR 0 2
51055: PPUSH
51056: CALL_OW 312
51060: IFFALSE 51071
// ComUnlink ( i ) ;
51062: LD_VAR 0 2
51066: PPUSH
51067: CALL_OW 136
51071: GO 51048
51073: POP
51074: POP
// end ;
51075: PPOPN 2
51077: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
51078: LD_EXP 23
51082: PUSH
51083: LD_EXP 54
51087: AND
51088: IFFALSE 51228
51090: GO 51092
51092: DISABLE
51093: LD_INT 0
51095: PPUSH
51096: PPUSH
// begin ToLua ( displayPowell(); ) ;
51097: LD_STRING displayPowell();
51099: PPUSH
51100: CALL_OW 559
// uc_side := 0 ;
51104: LD_ADDR_OWVAR 20
51108: PUSH
51109: LD_INT 0
51111: ST_TO_ADDR
// uc_nation := 2 ;
51112: LD_ADDR_OWVAR 21
51116: PUSH
51117: LD_INT 2
51119: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
51120: LD_ADDR_OWVAR 37
51124: PUSH
51125: LD_INT 14
51127: ST_TO_ADDR
// vc_engine := engine_siberite ;
51128: LD_ADDR_OWVAR 39
51132: PUSH
51133: LD_INT 3
51135: ST_TO_ADDR
// vc_control := control_apeman ;
51136: LD_ADDR_OWVAR 38
51140: PUSH
51141: LD_INT 5
51143: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
51144: LD_ADDR_OWVAR 40
51148: PUSH
51149: LD_INT 29
51151: ST_TO_ADDR
// un := CreateVehicle ;
51152: LD_ADDR_VAR 0 2
51156: PUSH
51157: CALL_OW 45
51161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51162: LD_VAR 0 2
51166: PPUSH
51167: LD_INT 1
51169: PPUSH
51170: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51174: LD_INT 35
51176: PPUSH
51177: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51181: LD_VAR 0 2
51185: PPUSH
51186: LD_INT 22
51188: PUSH
51189: LD_OWVAR 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PPUSH
51198: CALL_OW 69
51202: PPUSH
51203: LD_VAR 0 2
51207: PPUSH
51208: CALL_OW 74
51212: PPUSH
51213: CALL_OW 115
// until IsDead ( un ) ;
51217: LD_VAR 0 2
51221: PPUSH
51222: CALL_OW 301
51226: IFFALSE 51174
// end ;
51228: PPOPN 2
51230: END
// every 0 0$1 trigger StreamModeActive and sStu do
51231: LD_EXP 23
51235: PUSH
51236: LD_EXP 62
51240: AND
51241: IFFALSE 51257
51243: GO 51245
51245: DISABLE
// begin ToLua ( displayStucuk(); ) ;
51246: LD_STRING displayStucuk();
51248: PPUSH
51249: CALL_OW 559
// ResetFog ;
51253: CALL_OW 335
// end ;
51257: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
51258: LD_EXP 23
51262: PUSH
51263: LD_EXP 55
51267: AND
51268: IFFALSE 51409
51270: GO 51272
51272: DISABLE
51273: LD_INT 0
51275: PPUSH
51276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51277: LD_ADDR_VAR 0 2
51281: PUSH
51282: LD_INT 22
51284: PUSH
51285: LD_OWVAR 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 21
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PPUSH
51308: CALL_OW 69
51312: ST_TO_ADDR
// if not tmp then
51313: LD_VAR 0 2
51317: NOT
51318: IFFALSE 51322
// exit ;
51320: GO 51409
// un := tmp [ rand ( 1 , tmp ) ] ;
51322: LD_ADDR_VAR 0 1
51326: PUSH
51327: LD_VAR 0 2
51331: PUSH
51332: LD_INT 1
51334: PPUSH
51335: LD_VAR 0 2
51339: PPUSH
51340: CALL_OW 12
51344: ARRAY
51345: ST_TO_ADDR
// SetSide ( un , 0 ) ;
51346: LD_VAR 0 1
51350: PPUSH
51351: LD_INT 0
51353: PPUSH
51354: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
51358: LD_VAR 0 1
51362: PPUSH
51363: LD_OWVAR 3
51367: PUSH
51368: LD_VAR 0 1
51372: DIFF
51373: PPUSH
51374: LD_VAR 0 1
51378: PPUSH
51379: CALL_OW 74
51383: PPUSH
51384: CALL_OW 115
// wait ( 0 0$20 ) ;
51388: LD_INT 700
51390: PPUSH
51391: CALL_OW 67
// SetSide ( un , your_side ) ;
51395: LD_VAR 0 1
51399: PPUSH
51400: LD_OWVAR 2
51404: PPUSH
51405: CALL_OW 235
// end ;
51409: PPOPN 2
51411: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
51412: LD_EXP 23
51416: PUSH
51417: LD_EXP 56
51421: AND
51422: IFFALSE 51528
51424: GO 51426
51426: DISABLE
51427: LD_INT 0
51429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51430: LD_ADDR_VAR 0 1
51434: PUSH
51435: LD_INT 22
51437: PUSH
51438: LD_OWVAR 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 30
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 30
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PPUSH
51479: CALL_OW 69
51483: ST_TO_ADDR
// if not depot then
51484: LD_VAR 0 1
51488: NOT
51489: IFFALSE 51493
// exit ;
51491: GO 51528
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
51493: LD_VAR 0 1
51497: PUSH
51498: LD_INT 1
51500: ARRAY
51501: PPUSH
51502: CALL_OW 250
51506: PPUSH
51507: LD_VAR 0 1
51511: PUSH
51512: LD_INT 1
51514: ARRAY
51515: PPUSH
51516: CALL_OW 251
51520: PPUSH
51521: LD_INT 70
51523: PPUSH
51524: CALL_OW 495
// end ;
51528: PPOPN 1
51530: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
51531: LD_EXP 23
51535: PUSH
51536: LD_EXP 57
51540: AND
51541: IFFALSE 51752
51543: GO 51545
51545: DISABLE
51546: LD_INT 0
51548: PPUSH
51549: PPUSH
51550: PPUSH
51551: PPUSH
51552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51553: LD_ADDR_VAR 0 5
51557: PUSH
51558: LD_INT 22
51560: PUSH
51561: LD_OWVAR 2
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 21
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PPUSH
51584: CALL_OW 69
51588: ST_TO_ADDR
// if not tmp then
51589: LD_VAR 0 5
51593: NOT
51594: IFFALSE 51598
// exit ;
51596: GO 51752
// for i in tmp do
51598: LD_ADDR_VAR 0 1
51602: PUSH
51603: LD_VAR 0 5
51607: PUSH
51608: FOR_IN
51609: IFFALSE 51750
// begin d := rand ( 0 , 5 ) ;
51611: LD_ADDR_VAR 0 4
51615: PUSH
51616: LD_INT 0
51618: PPUSH
51619: LD_INT 5
51621: PPUSH
51622: CALL_OW 12
51626: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
51627: LD_ADDR_VAR 0 2
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 250
51641: PPUSH
51642: LD_VAR 0 4
51646: PPUSH
51647: LD_INT 3
51649: PPUSH
51650: LD_INT 12
51652: PPUSH
51653: CALL_OW 12
51657: PPUSH
51658: CALL_OW 272
51662: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
51663: LD_ADDR_VAR 0 3
51667: PUSH
51668: LD_VAR 0 1
51672: PPUSH
51673: CALL_OW 251
51677: PPUSH
51678: LD_VAR 0 4
51682: PPUSH
51683: LD_INT 3
51685: PPUSH
51686: LD_INT 12
51688: PPUSH
51689: CALL_OW 12
51693: PPUSH
51694: CALL_OW 273
51698: ST_TO_ADDR
// if ValidHex ( x , y ) then
51699: LD_VAR 0 2
51703: PPUSH
51704: LD_VAR 0 3
51708: PPUSH
51709: CALL_OW 488
51713: IFFALSE 51748
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
51715: LD_VAR 0 1
51719: PPUSH
51720: LD_VAR 0 2
51724: PPUSH
51725: LD_VAR 0 3
51729: PPUSH
51730: LD_INT 3
51732: PPUSH
51733: LD_INT 6
51735: PPUSH
51736: CALL_OW 12
51740: PPUSH
51741: LD_INT 1
51743: PPUSH
51744: CALL_OW 483
// end ;
51748: GO 51608
51750: POP
51751: POP
// end ;
51752: PPOPN 5
51754: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
51755: LD_EXP 23
51759: PUSH
51760: LD_EXP 58
51764: AND
51765: IFFALSE 51859
51767: GO 51769
51769: DISABLE
51770: LD_INT 0
51772: PPUSH
51773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
51774: LD_ADDR_VAR 0 2
51778: PUSH
51779: LD_INT 22
51781: PUSH
51782: LD_OWVAR 2
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 32
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 21
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: PPUSH
51816: CALL_OW 69
51820: ST_TO_ADDR
// if not tmp then
51821: LD_VAR 0 2
51825: NOT
51826: IFFALSE 51830
// exit ;
51828: GO 51859
// for i in tmp do
51830: LD_ADDR_VAR 0 1
51834: PUSH
51835: LD_VAR 0 2
51839: PUSH
51840: FOR_IN
51841: IFFALSE 51857
// SetFuel ( i , 0 ) ;
51843: LD_VAR 0 1
51847: PPUSH
51848: LD_INT 0
51850: PPUSH
51851: CALL_OW 240
51855: GO 51840
51857: POP
51858: POP
// end ;
51859: PPOPN 2
51861: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
51862: LD_EXP 23
51866: PUSH
51867: LD_EXP 59
51871: AND
51872: IFFALSE 51938
51874: GO 51876
51876: DISABLE
51877: LD_INT 0
51879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
51880: LD_ADDR_VAR 0 1
51884: PUSH
51885: LD_INT 22
51887: PUSH
51888: LD_OWVAR 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 30
51899: PUSH
51900: LD_INT 29
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PPUSH
51911: CALL_OW 69
51915: ST_TO_ADDR
// if not tmp then
51916: LD_VAR 0 1
51920: NOT
51921: IFFALSE 51925
// exit ;
51923: GO 51938
// DestroyUnit ( tmp [ 1 ] ) ;
51925: LD_VAR 0 1
51929: PUSH
51930: LD_INT 1
51932: ARRAY
51933: PPUSH
51934: CALL_OW 65
// end ;
51938: PPOPN 1
51940: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
51941: LD_EXP 23
51945: PUSH
51946: LD_EXP 61
51950: AND
51951: IFFALSE 52080
51953: GO 51955
51955: DISABLE
51956: LD_INT 0
51958: PPUSH
// begin uc_side := 0 ;
51959: LD_ADDR_OWVAR 20
51963: PUSH
51964: LD_INT 0
51966: ST_TO_ADDR
// uc_nation := nation_arabian ;
51967: LD_ADDR_OWVAR 21
51971: PUSH
51972: LD_INT 2
51974: ST_TO_ADDR
// hc_gallery :=  ;
51975: LD_ADDR_OWVAR 33
51979: PUSH
51980: LD_STRING 
51982: ST_TO_ADDR
// hc_name :=  ;
51983: LD_ADDR_OWVAR 26
51987: PUSH
51988: LD_STRING 
51990: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
51991: LD_INT 1
51993: PPUSH
51994: LD_INT 11
51996: PPUSH
51997: LD_INT 10
51999: PPUSH
52000: CALL_OW 380
// un := CreateHuman ;
52004: LD_ADDR_VAR 0 1
52008: PUSH
52009: CALL_OW 44
52013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52014: LD_VAR 0 1
52018: PPUSH
52019: LD_INT 1
52021: PPUSH
52022: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52026: LD_INT 35
52028: PPUSH
52029: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52033: LD_VAR 0 1
52037: PPUSH
52038: LD_INT 22
52040: PUSH
52041: LD_OWVAR 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PPUSH
52050: CALL_OW 69
52054: PPUSH
52055: LD_VAR 0 1
52059: PPUSH
52060: CALL_OW 74
52064: PPUSH
52065: CALL_OW 115
// until IsDead ( un ) ;
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 301
52078: IFFALSE 52026
// end ;
52080: PPOPN 1
52082: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
52083: LD_EXP 23
52087: PUSH
52088: LD_EXP 63
52092: AND
52093: IFFALSE 52105
52095: GO 52097
52097: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
52098: LD_STRING earthquake(getX(game), 0, 32)
52100: PPUSH
52101: CALL_OW 559
52105: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
52106: LD_EXP 23
52110: PUSH
52111: LD_EXP 64
52115: AND
52116: IFFALSE 52207
52118: GO 52120
52120: DISABLE
52121: LD_INT 0
52123: PPUSH
// begin enable ;
52124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
52125: LD_ADDR_VAR 0 1
52129: PUSH
52130: LD_INT 22
52132: PUSH
52133: LD_OWVAR 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 21
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 33
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: PPUSH
52167: CALL_OW 69
52171: ST_TO_ADDR
// if not tmp then
52172: LD_VAR 0 1
52176: NOT
52177: IFFALSE 52181
// exit ;
52179: GO 52207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52181: LD_VAR 0 1
52185: PUSH
52186: LD_INT 1
52188: PPUSH
52189: LD_VAR 0 1
52193: PPUSH
52194: CALL_OW 12
52198: ARRAY
52199: PPUSH
52200: LD_INT 1
52202: PPUSH
52203: CALL_OW 234
// end ;
52207: PPOPN 1
52209: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
52210: LD_EXP 23
52214: PUSH
52215: LD_EXP 65
52219: AND
52220: IFFALSE 52361
52222: GO 52224
52224: DISABLE
52225: LD_INT 0
52227: PPUSH
52228: PPUSH
52229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52230: LD_ADDR_VAR 0 3
52234: PUSH
52235: LD_INT 22
52237: PUSH
52238: LD_OWVAR 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 25
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PPUSH
52261: CALL_OW 69
52265: ST_TO_ADDR
// if not tmp then
52266: LD_VAR 0 3
52270: NOT
52271: IFFALSE 52275
// exit ;
52273: GO 52361
// un := tmp [ rand ( 1 , tmp ) ] ;
52275: LD_ADDR_VAR 0 2
52279: PUSH
52280: LD_VAR 0 3
52284: PUSH
52285: LD_INT 1
52287: PPUSH
52288: LD_VAR 0 3
52292: PPUSH
52293: CALL_OW 12
52297: ARRAY
52298: ST_TO_ADDR
// if Crawls ( un ) then
52299: LD_VAR 0 2
52303: PPUSH
52304: CALL_OW 318
52308: IFFALSE 52319
// ComWalk ( un ) ;
52310: LD_VAR 0 2
52314: PPUSH
52315: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
52319: LD_VAR 0 2
52323: PPUSH
52324: LD_INT 9
52326: PPUSH
52327: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
52331: LD_INT 28
52333: PPUSH
52334: LD_OWVAR 2
52338: PPUSH
52339: LD_INT 2
52341: PPUSH
52342: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
52346: LD_INT 29
52348: PPUSH
52349: LD_OWVAR 2
52353: PPUSH
52354: LD_INT 2
52356: PPUSH
52357: CALL_OW 322
// end ;
52361: PPOPN 3
52363: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
52364: LD_EXP 23
52368: PUSH
52369: LD_EXP 66
52373: AND
52374: IFFALSE 52485
52376: GO 52378
52378: DISABLE
52379: LD_INT 0
52381: PPUSH
52382: PPUSH
52383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52384: LD_ADDR_VAR 0 3
52388: PUSH
52389: LD_INT 22
52391: PUSH
52392: LD_OWVAR 2
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 25
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PPUSH
52415: CALL_OW 69
52419: ST_TO_ADDR
// if not tmp then
52420: LD_VAR 0 3
52424: NOT
52425: IFFALSE 52429
// exit ;
52427: GO 52485
// un := tmp [ rand ( 1 , tmp ) ] ;
52429: LD_ADDR_VAR 0 2
52433: PUSH
52434: LD_VAR 0 3
52438: PUSH
52439: LD_INT 1
52441: PPUSH
52442: LD_VAR 0 3
52446: PPUSH
52447: CALL_OW 12
52451: ARRAY
52452: ST_TO_ADDR
// if Crawls ( un ) then
52453: LD_VAR 0 2
52457: PPUSH
52458: CALL_OW 318
52462: IFFALSE 52473
// ComWalk ( un ) ;
52464: LD_VAR 0 2
52468: PPUSH
52469: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52473: LD_VAR 0 2
52477: PPUSH
52478: LD_INT 8
52480: PPUSH
52481: CALL_OW 336
// end ;
52485: PPOPN 3
52487: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
52488: LD_EXP 23
52492: PUSH
52493: LD_EXP 67
52497: AND
52498: IFFALSE 52642
52500: GO 52502
52502: DISABLE
52503: LD_INT 0
52505: PPUSH
52506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
52507: LD_ADDR_VAR 0 2
52511: PUSH
52512: LD_INT 22
52514: PUSH
52515: LD_OWVAR 2
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 21
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 34
52539: PUSH
52540: LD_INT 12
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 34
52549: PUSH
52550: LD_INT 51
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 34
52559: PUSH
52560: LD_INT 32
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: PPUSH
52578: CALL_OW 69
52582: ST_TO_ADDR
// if not tmp then
52583: LD_VAR 0 2
52587: NOT
52588: IFFALSE 52592
// exit ;
52590: GO 52642
// for i in tmp do
52592: LD_ADDR_VAR 0 1
52596: PUSH
52597: LD_VAR 0 2
52601: PUSH
52602: FOR_IN
52603: IFFALSE 52640
// if GetCargo ( i , mat_artifact ) = 0 then
52605: LD_VAR 0 1
52609: PPUSH
52610: LD_INT 4
52612: PPUSH
52613: CALL_OW 289
52617: PUSH
52618: LD_INT 0
52620: EQUAL
52621: IFFALSE 52638
// SetCargo ( i , mat_siberit , 100 ) ;
52623: LD_VAR 0 1
52627: PPUSH
52628: LD_INT 3
52630: PPUSH
52631: LD_INT 100
52633: PPUSH
52634: CALL_OW 290
52638: GO 52602
52640: POP
52641: POP
// end ;
52642: PPOPN 2
52644: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
52645: LD_EXP 23
52649: PUSH
52650: LD_EXP 68
52654: AND
52655: IFFALSE 52838
52657: GO 52659
52659: DISABLE
52660: LD_INT 0
52662: PPUSH
52663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
52664: LD_ADDR_VAR 0 2
52668: PUSH
52669: LD_INT 22
52671: PUSH
52672: LD_OWVAR 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PPUSH
52681: CALL_OW 69
52685: ST_TO_ADDR
// if not tmp then
52686: LD_VAR 0 2
52690: NOT
52691: IFFALSE 52695
// exit ;
52693: GO 52838
// for i := 1 to 2 do
52695: LD_ADDR_VAR 0 1
52699: PUSH
52700: DOUBLE
52701: LD_INT 1
52703: DEC
52704: ST_TO_ADDR
52705: LD_INT 2
52707: PUSH
52708: FOR_TO
52709: IFFALSE 52836
// begin uc_side := your_side ;
52711: LD_ADDR_OWVAR 20
52715: PUSH
52716: LD_OWVAR 2
52720: ST_TO_ADDR
// uc_nation := nation_american ;
52721: LD_ADDR_OWVAR 21
52725: PUSH
52726: LD_INT 1
52728: ST_TO_ADDR
// vc_chassis := us_morphling ;
52729: LD_ADDR_OWVAR 37
52733: PUSH
52734: LD_INT 5
52736: ST_TO_ADDR
// vc_engine := engine_siberite ;
52737: LD_ADDR_OWVAR 39
52741: PUSH
52742: LD_INT 3
52744: ST_TO_ADDR
// vc_control := control_computer ;
52745: LD_ADDR_OWVAR 38
52749: PUSH
52750: LD_INT 3
52752: ST_TO_ADDR
// vc_weapon := us_double_laser ;
52753: LD_ADDR_OWVAR 40
52757: PUSH
52758: LD_INT 10
52760: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
52761: LD_VAR 0 2
52765: PUSH
52766: LD_INT 1
52768: ARRAY
52769: PPUSH
52770: CALL_OW 310
52774: NOT
52775: IFFALSE 52822
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
52777: CALL_OW 45
52781: PPUSH
52782: LD_VAR 0 2
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: PPUSH
52791: CALL_OW 250
52795: PPUSH
52796: LD_VAR 0 2
52800: PUSH
52801: LD_INT 1
52803: ARRAY
52804: PPUSH
52805: CALL_OW 251
52809: PPUSH
52810: LD_INT 12
52812: PPUSH
52813: LD_INT 1
52815: PPUSH
52816: CALL_OW 50
52820: GO 52834
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
52822: CALL_OW 45
52826: PPUSH
52827: LD_INT 1
52829: PPUSH
52830: CALL_OW 51
// end ;
52834: GO 52708
52836: POP
52837: POP
// end ;
52838: PPOPN 2
52840: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
52841: LD_EXP 23
52845: PUSH
52846: LD_EXP 69
52850: AND
52851: IFFALSE 53073
52853: GO 52855
52855: DISABLE
52856: LD_INT 0
52858: PPUSH
52859: PPUSH
52860: PPUSH
52861: PPUSH
52862: PPUSH
52863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52864: LD_ADDR_VAR 0 6
52868: PUSH
52869: LD_INT 22
52871: PUSH
52872: LD_OWVAR 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 21
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: LD_INT 23
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: PPUSH
52913: CALL_OW 69
52917: ST_TO_ADDR
// if not tmp then
52918: LD_VAR 0 6
52922: NOT
52923: IFFALSE 52927
// exit ;
52925: GO 53073
// s1 := rand ( 1 , 4 ) ;
52927: LD_ADDR_VAR 0 2
52931: PUSH
52932: LD_INT 1
52934: PPUSH
52935: LD_INT 4
52937: PPUSH
52938: CALL_OW 12
52942: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
52943: LD_ADDR_VAR 0 4
52947: PUSH
52948: LD_VAR 0 6
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PPUSH
52957: LD_VAR 0 2
52961: PPUSH
52962: CALL_OW 259
52966: ST_TO_ADDR
// if s1 = 1 then
52967: LD_VAR 0 2
52971: PUSH
52972: LD_INT 1
52974: EQUAL
52975: IFFALSE 52995
// s2 := rand ( 2 , 4 ) else
52977: LD_ADDR_VAR 0 3
52981: PUSH
52982: LD_INT 2
52984: PPUSH
52985: LD_INT 4
52987: PPUSH
52988: CALL_OW 12
52992: ST_TO_ADDR
52993: GO 53003
// s2 := 1 ;
52995: LD_ADDR_VAR 0 3
52999: PUSH
53000: LD_INT 1
53002: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
53003: LD_ADDR_VAR 0 5
53007: PUSH
53008: LD_VAR 0 6
53012: PUSH
53013: LD_INT 1
53015: ARRAY
53016: PPUSH
53017: LD_VAR 0 3
53021: PPUSH
53022: CALL_OW 259
53026: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
53027: LD_VAR 0 6
53031: PUSH
53032: LD_INT 1
53034: ARRAY
53035: PPUSH
53036: LD_VAR 0 2
53040: PPUSH
53041: LD_VAR 0 5
53045: PPUSH
53046: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
53050: LD_VAR 0 6
53054: PUSH
53055: LD_INT 1
53057: ARRAY
53058: PPUSH
53059: LD_VAR 0 3
53063: PPUSH
53064: LD_VAR 0 4
53068: PPUSH
53069: CALL_OW 237
// end ;
53073: PPOPN 6
53075: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
53076: LD_EXP 23
53080: PUSH
53081: LD_EXP 70
53085: AND
53086: IFFALSE 53165
53088: GO 53090
53090: DISABLE
53091: LD_INT 0
53093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
53094: LD_ADDR_VAR 0 1
53098: PUSH
53099: LD_INT 22
53101: PUSH
53102: LD_OWVAR 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 30
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PPUSH
53125: CALL_OW 69
53129: ST_TO_ADDR
// if not tmp then
53130: LD_VAR 0 1
53134: NOT
53135: IFFALSE 53139
// exit ;
53137: GO 53165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53139: LD_VAR 0 1
53143: PUSH
53144: LD_INT 1
53146: PPUSH
53147: LD_VAR 0 1
53151: PPUSH
53152: CALL_OW 12
53156: ARRAY
53157: PPUSH
53158: LD_INT 1
53160: PPUSH
53161: CALL_OW 234
// end ;
53165: PPOPN 1
53167: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
53168: LD_EXP 23
53172: PUSH
53173: LD_EXP 71
53177: AND
53178: IFFALSE 53290
53180: GO 53182
53182: DISABLE
53183: LD_INT 0
53185: PPUSH
53186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
53187: LD_ADDR_VAR 0 2
53191: PUSH
53192: LD_INT 22
53194: PUSH
53195: LD_OWVAR 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 30
53209: PUSH
53210: LD_INT 27
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 30
53219: PUSH
53220: LD_INT 26
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 30
53229: PUSH
53230: LD_INT 28
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PPUSH
53247: CALL_OW 69
53251: ST_TO_ADDR
// if not tmp then
53252: LD_VAR 0 2
53256: NOT
53257: IFFALSE 53261
// exit ;
53259: GO 53290
// for i in tmp do
53261: LD_ADDR_VAR 0 1
53265: PUSH
53266: LD_VAR 0 2
53270: PUSH
53271: FOR_IN
53272: IFFALSE 53288
// SetLives ( i , 1 ) ;
53274: LD_VAR 0 1
53278: PPUSH
53279: LD_INT 1
53281: PPUSH
53282: CALL_OW 234
53286: GO 53271
53288: POP
53289: POP
// end ;
53290: PPOPN 2
53292: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
53293: LD_EXP 23
53297: PUSH
53298: LD_EXP 72
53302: AND
53303: IFFALSE 53590
53305: GO 53307
53307: DISABLE
53308: LD_INT 0
53310: PPUSH
53311: PPUSH
53312: PPUSH
// begin i := rand ( 1 , 7 ) ;
53313: LD_ADDR_VAR 0 1
53317: PUSH
53318: LD_INT 1
53320: PPUSH
53321: LD_INT 7
53323: PPUSH
53324: CALL_OW 12
53328: ST_TO_ADDR
// case i of 1 :
53329: LD_VAR 0 1
53333: PUSH
53334: LD_INT 1
53336: DOUBLE
53337: EQUAL
53338: IFTRUE 53342
53340: GO 53352
53342: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
53343: LD_STRING earthquake(getX(game), 0, 32)
53345: PPUSH
53346: CALL_OW 559
53350: GO 53590
53352: LD_INT 2
53354: DOUBLE
53355: EQUAL
53356: IFTRUE 53360
53358: GO 53374
53360: POP
// begin ToLua ( displayStucuk(); ) ;
53361: LD_STRING displayStucuk();
53363: PPUSH
53364: CALL_OW 559
// ResetFog ;
53368: CALL_OW 335
// end ; 3 :
53372: GO 53590
53374: LD_INT 3
53376: DOUBLE
53377: EQUAL
53378: IFTRUE 53382
53380: GO 53486
53382: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53383: LD_ADDR_VAR 0 2
53387: PUSH
53388: LD_INT 22
53390: PUSH
53391: LD_OWVAR 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 25
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PPUSH
53414: CALL_OW 69
53418: ST_TO_ADDR
// if not tmp then
53419: LD_VAR 0 2
53423: NOT
53424: IFFALSE 53428
// exit ;
53426: GO 53590
// un := tmp [ rand ( 1 , tmp ) ] ;
53428: LD_ADDR_VAR 0 3
53432: PUSH
53433: LD_VAR 0 2
53437: PUSH
53438: LD_INT 1
53440: PPUSH
53441: LD_VAR 0 2
53445: PPUSH
53446: CALL_OW 12
53450: ARRAY
53451: ST_TO_ADDR
// if Crawls ( un ) then
53452: LD_VAR 0 3
53456: PPUSH
53457: CALL_OW 318
53461: IFFALSE 53472
// ComWalk ( un ) ;
53463: LD_VAR 0 3
53467: PPUSH
53468: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53472: LD_VAR 0 3
53476: PPUSH
53477: LD_INT 8
53479: PPUSH
53480: CALL_OW 336
// end ; 4 :
53484: GO 53590
53486: LD_INT 4
53488: DOUBLE
53489: EQUAL
53490: IFTRUE 53494
53492: GO 53568
53494: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53495: LD_ADDR_VAR 0 2
53499: PUSH
53500: LD_INT 22
53502: PUSH
53503: LD_OWVAR 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 30
53514: PUSH
53515: LD_INT 29
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PPUSH
53526: CALL_OW 69
53530: ST_TO_ADDR
// if not tmp then
53531: LD_VAR 0 2
53535: NOT
53536: IFFALSE 53540
// exit ;
53538: GO 53590
// CenterNowOnUnits ( tmp [ 1 ] ) ;
53540: LD_VAR 0 2
53544: PUSH
53545: LD_INT 1
53547: ARRAY
53548: PPUSH
53549: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
53553: LD_VAR 0 2
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: PPUSH
53562: CALL_OW 65
// end ; 5 .. 7 :
53566: GO 53590
53568: LD_INT 5
53570: DOUBLE
53571: GREATEREQUAL
53572: IFFALSE 53580
53574: LD_INT 7
53576: DOUBLE
53577: LESSEQUAL
53578: IFTRUE 53582
53580: GO 53589
53582: POP
// StreamSibBomb ; end ;
53583: CALL 49827 0 0
53587: GO 53590
53589: POP
// end ;
53590: PPOPN 3
53592: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
53593: LD_EXP 23
53597: PUSH
53598: LD_EXP 73
53602: AND
53603: IFFALSE 53759
53605: GO 53607
53607: DISABLE
53608: LD_INT 0
53610: PPUSH
53611: PPUSH
53612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53613: LD_ADDR_VAR 0 2
53617: PUSH
53618: LD_INT 81
53620: PUSH
53621: LD_OWVAR 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 21
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 21
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PPUSH
53662: CALL_OW 69
53666: ST_TO_ADDR
// if not tmp then
53667: LD_VAR 0 2
53671: NOT
53672: IFFALSE 53676
// exit ;
53674: GO 53759
// p := 0 ;
53676: LD_ADDR_VAR 0 3
53680: PUSH
53681: LD_INT 0
53683: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53684: LD_INT 35
53686: PPUSH
53687: CALL_OW 67
// p := p + 1 ;
53691: LD_ADDR_VAR 0 3
53695: PUSH
53696: LD_VAR 0 3
53700: PUSH
53701: LD_INT 1
53703: PLUS
53704: ST_TO_ADDR
// for i in tmp do
53705: LD_ADDR_VAR 0 1
53709: PUSH
53710: LD_VAR 0 2
53714: PUSH
53715: FOR_IN
53716: IFFALSE 53747
// if GetLives ( i ) < 1000 then
53718: LD_VAR 0 1
53722: PPUSH
53723: CALL_OW 256
53727: PUSH
53728: LD_INT 1000
53730: LESS
53731: IFFALSE 53745
// SetLives ( i , 1000 ) ;
53733: LD_VAR 0 1
53737: PPUSH
53738: LD_INT 1000
53740: PPUSH
53741: CALL_OW 234
53745: GO 53715
53747: POP
53748: POP
// until p > 20 ;
53749: LD_VAR 0 3
53753: PUSH
53754: LD_INT 20
53756: GREATER
53757: IFFALSE 53684
// end ;
53759: PPOPN 3
53761: END
// every 0 0$1 trigger StreamModeActive and sTime do
53762: LD_EXP 23
53766: PUSH
53767: LD_EXP 74
53771: AND
53772: IFFALSE 53807
53774: GO 53776
53776: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
53777: LD_INT 28
53779: PPUSH
53780: LD_OWVAR 2
53784: PPUSH
53785: LD_INT 2
53787: PPUSH
53788: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
53792: LD_INT 30
53794: PPUSH
53795: LD_OWVAR 2
53799: PPUSH
53800: LD_INT 2
53802: PPUSH
53803: CALL_OW 322
// end ;
53807: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
53808: LD_EXP 23
53812: PUSH
53813: LD_EXP 75
53817: AND
53818: IFFALSE 53939
53820: GO 53822
53822: DISABLE
53823: LD_INT 0
53825: PPUSH
53826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53827: LD_ADDR_VAR 0 2
53831: PUSH
53832: LD_INT 22
53834: PUSH
53835: LD_OWVAR 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 21
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: LD_INT 23
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: PPUSH
53876: CALL_OW 69
53880: ST_TO_ADDR
// if not tmp then
53881: LD_VAR 0 2
53885: NOT
53886: IFFALSE 53890
// exit ;
53888: GO 53939
// for i in tmp do
53890: LD_ADDR_VAR 0 1
53894: PUSH
53895: LD_VAR 0 2
53899: PUSH
53900: FOR_IN
53901: IFFALSE 53937
// begin if Crawls ( i ) then
53903: LD_VAR 0 1
53907: PPUSH
53908: CALL_OW 318
53912: IFFALSE 53923
// ComWalk ( i ) ;
53914: LD_VAR 0 1
53918: PPUSH
53919: CALL_OW 138
// SetClass ( i , 2 ) ;
53923: LD_VAR 0 1
53927: PPUSH
53928: LD_INT 2
53930: PPUSH
53931: CALL_OW 336
// end ;
53935: GO 53900
53937: POP
53938: POP
// end ;
53939: PPOPN 2
53941: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
53942: LD_EXP 23
53946: PUSH
53947: LD_EXP 76
53951: AND
53952: IFFALSE 54240
53954: GO 53956
53956: DISABLE
53957: LD_INT 0
53959: PPUSH
53960: PPUSH
53961: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
53962: LD_OWVAR 2
53966: PPUSH
53967: LD_INT 9
53969: PPUSH
53970: LD_INT 1
53972: PPUSH
53973: LD_INT 1
53975: PPUSH
53976: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
53980: LD_INT 9
53982: PPUSH
53983: LD_OWVAR 2
53987: PPUSH
53988: CALL_OW 343
// uc_side := 9 ;
53992: LD_ADDR_OWVAR 20
53996: PUSH
53997: LD_INT 9
53999: ST_TO_ADDR
// uc_nation := 2 ;
54000: LD_ADDR_OWVAR 21
54004: PUSH
54005: LD_INT 2
54007: ST_TO_ADDR
// hc_name := Dark Warrior ;
54008: LD_ADDR_OWVAR 26
54012: PUSH
54013: LD_STRING Dark Warrior
54015: ST_TO_ADDR
// hc_gallery :=  ;
54016: LD_ADDR_OWVAR 33
54020: PUSH
54021: LD_STRING 
54023: ST_TO_ADDR
// hc_noskilllimit := true ;
54024: LD_ADDR_OWVAR 76
54028: PUSH
54029: LD_INT 1
54031: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
54032: LD_ADDR_OWVAR 31
54036: PUSH
54037: LD_INT 30
54039: PUSH
54040: LD_INT 30
54042: PUSH
54043: LD_INT 30
54045: PUSH
54046: LD_INT 30
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: ST_TO_ADDR
// un := CreateHuman ;
54055: LD_ADDR_VAR 0 3
54059: PUSH
54060: CALL_OW 44
54064: ST_TO_ADDR
// hc_noskilllimit := false ;
54065: LD_ADDR_OWVAR 76
54069: PUSH
54070: LD_INT 0
54072: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54073: LD_VAR 0 3
54077: PPUSH
54078: LD_INT 1
54080: PPUSH
54081: CALL_OW 51
// ToLua ( playRanger() ) ;
54085: LD_STRING playRanger()
54087: PPUSH
54088: CALL_OW 559
// p := 0 ;
54092: LD_ADDR_VAR 0 2
54096: PUSH
54097: LD_INT 0
54099: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54100: LD_INT 35
54102: PPUSH
54103: CALL_OW 67
// p := p + 1 ;
54107: LD_ADDR_VAR 0 2
54111: PUSH
54112: LD_VAR 0 2
54116: PUSH
54117: LD_INT 1
54119: PLUS
54120: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
54121: LD_VAR 0 3
54125: PPUSH
54126: CALL_OW 256
54130: PUSH
54131: LD_INT 1000
54133: LESS
54134: IFFALSE 54148
// SetLives ( un , 1000 ) ;
54136: LD_VAR 0 3
54140: PPUSH
54141: LD_INT 1000
54143: PPUSH
54144: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
54148: LD_VAR 0 3
54152: PPUSH
54153: LD_INT 81
54155: PUSH
54156: LD_OWVAR 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 91
54167: PUSH
54168: LD_VAR 0 3
54172: PUSH
54173: LD_INT 30
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PPUSH
54185: CALL_OW 69
54189: PPUSH
54190: LD_VAR 0 3
54194: PPUSH
54195: CALL_OW 74
54199: PPUSH
54200: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
54204: LD_VAR 0 2
54208: PUSH
54209: LD_INT 80
54211: GREATER
54212: PUSH
54213: LD_VAR 0 3
54217: PPUSH
54218: CALL_OW 301
54222: OR
54223: IFFALSE 54100
// if un then
54225: LD_VAR 0 3
54229: IFFALSE 54240
// RemoveUnit ( un ) ;
54231: LD_VAR 0 3
54235: PPUSH
54236: CALL_OW 64
// end ;
54240: PPOPN 3
54242: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
54243: LD_EXP 77
54247: IFFALSE 54363
54249: GO 54251
54251: DISABLE
54252: LD_INT 0
54254: PPUSH
54255: PPUSH
54256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54257: LD_ADDR_VAR 0 2
54261: PUSH
54262: LD_INT 81
54264: PUSH
54265: LD_OWVAR 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 21
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PPUSH
54288: CALL_OW 69
54292: ST_TO_ADDR
// ToLua ( playComputer() ) ;
54293: LD_STRING playComputer()
54295: PPUSH
54296: CALL_OW 559
// if not tmp then
54300: LD_VAR 0 2
54304: NOT
54305: IFFALSE 54309
// exit ;
54307: GO 54363
// for i in tmp do
54309: LD_ADDR_VAR 0 1
54313: PUSH
54314: LD_VAR 0 2
54318: PUSH
54319: FOR_IN
54320: IFFALSE 54361
// for j := 1 to 4 do
54322: LD_ADDR_VAR 0 3
54326: PUSH
54327: DOUBLE
54328: LD_INT 1
54330: DEC
54331: ST_TO_ADDR
54332: LD_INT 4
54334: PUSH
54335: FOR_TO
54336: IFFALSE 54357
// SetSkill ( i , j , 10 ) ;
54338: LD_VAR 0 1
54342: PPUSH
54343: LD_VAR 0 3
54347: PPUSH
54348: LD_INT 10
54350: PPUSH
54351: CALL_OW 237
54355: GO 54335
54357: POP
54358: POP
54359: GO 54319
54361: POP
54362: POP
// end ;
54363: PPOPN 3
54365: END
// every 0 0$1 trigger s30 do var i , tmp ;
54366: LD_EXP 78
54370: IFFALSE 54439
54372: GO 54374
54374: DISABLE
54375: LD_INT 0
54377: PPUSH
54378: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54379: LD_ADDR_VAR 0 2
54383: PUSH
54384: LD_INT 22
54386: PUSH
54387: LD_OWVAR 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PPUSH
54396: CALL_OW 69
54400: ST_TO_ADDR
// if not tmp then
54401: LD_VAR 0 2
54405: NOT
54406: IFFALSE 54410
// exit ;
54408: GO 54439
// for i in tmp do
54410: LD_ADDR_VAR 0 1
54414: PUSH
54415: LD_VAR 0 2
54419: PUSH
54420: FOR_IN
54421: IFFALSE 54437
// SetLives ( i , 300 ) ;
54423: LD_VAR 0 1
54427: PPUSH
54428: LD_INT 300
54430: PPUSH
54431: CALL_OW 234
54435: GO 54420
54437: POP
54438: POP
// end ;
54439: PPOPN 2
54441: END
// every 0 0$1 trigger s60 do var i , tmp ;
54442: LD_EXP 79
54446: IFFALSE 54515
54448: GO 54450
54450: DISABLE
54451: LD_INT 0
54453: PPUSH
54454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54455: LD_ADDR_VAR 0 2
54459: PUSH
54460: LD_INT 22
54462: PUSH
54463: LD_OWVAR 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PPUSH
54472: CALL_OW 69
54476: ST_TO_ADDR
// if not tmp then
54477: LD_VAR 0 2
54481: NOT
54482: IFFALSE 54486
// exit ;
54484: GO 54515
// for i in tmp do
54486: LD_ADDR_VAR 0 1
54490: PUSH
54491: LD_VAR 0 2
54495: PUSH
54496: FOR_IN
54497: IFFALSE 54513
// SetLives ( i , 600 ) ;
54499: LD_VAR 0 1
54503: PPUSH
54504: LD_INT 600
54506: PPUSH
54507: CALL_OW 234
54511: GO 54496
54513: POP
54514: POP
// end ;
54515: PPOPN 2
54517: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54518: LD_INT 0
54520: PPUSH
// case cmd of 301 :
54521: LD_VAR 0 1
54525: PUSH
54526: LD_INT 301
54528: DOUBLE
54529: EQUAL
54530: IFTRUE 54534
54532: GO 54566
54534: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
54535: LD_VAR 0 6
54539: PPUSH
54540: LD_VAR 0 7
54544: PPUSH
54545: LD_VAR 0 8
54549: PPUSH
54550: LD_VAR 0 4
54554: PPUSH
54555: LD_VAR 0 5
54559: PPUSH
54560: CALL 55767 0 5
54564: GO 54687
54566: LD_INT 302
54568: DOUBLE
54569: EQUAL
54570: IFTRUE 54574
54572: GO 54611
54574: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
54575: LD_VAR 0 6
54579: PPUSH
54580: LD_VAR 0 7
54584: PPUSH
54585: LD_VAR 0 8
54589: PPUSH
54590: LD_VAR 0 9
54594: PPUSH
54595: LD_VAR 0 4
54599: PPUSH
54600: LD_VAR 0 5
54604: PPUSH
54605: CALL 55858 0 6
54609: GO 54687
54611: LD_INT 303
54613: DOUBLE
54614: EQUAL
54615: IFTRUE 54619
54617: GO 54656
54619: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
54620: LD_VAR 0 6
54624: PPUSH
54625: LD_VAR 0 7
54629: PPUSH
54630: LD_VAR 0 8
54634: PPUSH
54635: LD_VAR 0 9
54639: PPUSH
54640: LD_VAR 0 4
54644: PPUSH
54645: LD_VAR 0 5
54649: PPUSH
54650: CALL 54692 0 6
54654: GO 54687
54656: LD_INT 304
54658: DOUBLE
54659: EQUAL
54660: IFTRUE 54664
54662: GO 54686
54664: POP
// hHackTeleport ( unit , x , y ) ; end ;
54665: LD_VAR 0 2
54669: PPUSH
54670: LD_VAR 0 4
54674: PPUSH
54675: LD_VAR 0 5
54679: PPUSH
54680: CALL 56451 0 3
54684: GO 54687
54686: POP
// end ;
54687: LD_VAR 0 12
54691: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
54692: LD_INT 0
54694: PPUSH
54695: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
54696: LD_VAR 0 1
54700: PUSH
54701: LD_INT 1
54703: LESS
54704: PUSH
54705: LD_VAR 0 1
54709: PUSH
54710: LD_INT 3
54712: GREATER
54713: OR
54714: PUSH
54715: LD_VAR 0 5
54719: PPUSH
54720: LD_VAR 0 6
54724: PPUSH
54725: CALL_OW 428
54729: OR
54730: IFFALSE 54734
// exit ;
54732: GO 55454
// uc_side := your_side ;
54734: LD_ADDR_OWVAR 20
54738: PUSH
54739: LD_OWVAR 2
54743: ST_TO_ADDR
// uc_nation := nation ;
54744: LD_ADDR_OWVAR 21
54748: PUSH
54749: LD_VAR 0 1
54753: ST_TO_ADDR
// bc_level = 1 ;
54754: LD_ADDR_OWVAR 43
54758: PUSH
54759: LD_INT 1
54761: ST_TO_ADDR
// case btype of 1 :
54762: LD_VAR 0 2
54766: PUSH
54767: LD_INT 1
54769: DOUBLE
54770: EQUAL
54771: IFTRUE 54775
54773: GO 54786
54775: POP
// bc_type := b_depot ; 2 :
54776: LD_ADDR_OWVAR 42
54780: PUSH
54781: LD_INT 0
54783: ST_TO_ADDR
54784: GO 55398
54786: LD_INT 2
54788: DOUBLE
54789: EQUAL
54790: IFTRUE 54794
54792: GO 54805
54794: POP
// bc_type := b_warehouse ; 3 :
54795: LD_ADDR_OWVAR 42
54799: PUSH
54800: LD_INT 1
54802: ST_TO_ADDR
54803: GO 55398
54805: LD_INT 3
54807: DOUBLE
54808: EQUAL
54809: IFTRUE 54813
54811: GO 54824
54813: POP
// bc_type := b_lab ; 4 .. 9 :
54814: LD_ADDR_OWVAR 42
54818: PUSH
54819: LD_INT 6
54821: ST_TO_ADDR
54822: GO 55398
54824: LD_INT 4
54826: DOUBLE
54827: GREATEREQUAL
54828: IFFALSE 54836
54830: LD_INT 9
54832: DOUBLE
54833: LESSEQUAL
54834: IFTRUE 54838
54836: GO 54890
54838: POP
// begin bc_type := b_lab_half ;
54839: LD_ADDR_OWVAR 42
54843: PUSH
54844: LD_INT 7
54846: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
54847: LD_ADDR_OWVAR 44
54851: PUSH
54852: LD_INT 10
54854: PUSH
54855: LD_INT 11
54857: PUSH
54858: LD_INT 12
54860: PUSH
54861: LD_INT 15
54863: PUSH
54864: LD_INT 14
54866: PUSH
54867: LD_INT 13
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: PUSH
54878: LD_VAR 0 2
54882: PUSH
54883: LD_INT 3
54885: MINUS
54886: ARRAY
54887: ST_TO_ADDR
// end ; 10 .. 13 :
54888: GO 55398
54890: LD_INT 10
54892: DOUBLE
54893: GREATEREQUAL
54894: IFFALSE 54902
54896: LD_INT 13
54898: DOUBLE
54899: LESSEQUAL
54900: IFTRUE 54904
54902: GO 54981
54904: POP
// begin bc_type := b_lab_full ;
54905: LD_ADDR_OWVAR 42
54909: PUSH
54910: LD_INT 8
54912: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
54913: LD_ADDR_OWVAR 44
54917: PUSH
54918: LD_INT 10
54920: PUSH
54921: LD_INT 12
54923: PUSH
54924: LD_INT 14
54926: PUSH
54927: LD_INT 13
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: PUSH
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 9
54943: MINUS
54944: ARRAY
54945: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
54946: LD_ADDR_OWVAR 45
54950: PUSH
54951: LD_INT 11
54953: PUSH
54954: LD_INT 15
54956: PUSH
54957: LD_INT 12
54959: PUSH
54960: LD_INT 15
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: PUSH
54969: LD_VAR 0 2
54973: PUSH
54974: LD_INT 9
54976: MINUS
54977: ARRAY
54978: ST_TO_ADDR
// end ; 14 :
54979: GO 55398
54981: LD_INT 14
54983: DOUBLE
54984: EQUAL
54985: IFTRUE 54989
54987: GO 55000
54989: POP
// bc_type := b_workshop ; 15 :
54990: LD_ADDR_OWVAR 42
54994: PUSH
54995: LD_INT 2
54997: ST_TO_ADDR
54998: GO 55398
55000: LD_INT 15
55002: DOUBLE
55003: EQUAL
55004: IFTRUE 55008
55006: GO 55019
55008: POP
// bc_type := b_factory ; 16 :
55009: LD_ADDR_OWVAR 42
55013: PUSH
55014: LD_INT 3
55016: ST_TO_ADDR
55017: GO 55398
55019: LD_INT 16
55021: DOUBLE
55022: EQUAL
55023: IFTRUE 55027
55025: GO 55038
55027: POP
// bc_type := b_ext_gun ; 17 :
55028: LD_ADDR_OWVAR 42
55032: PUSH
55033: LD_INT 17
55035: ST_TO_ADDR
55036: GO 55398
55038: LD_INT 17
55040: DOUBLE
55041: EQUAL
55042: IFTRUE 55046
55044: GO 55074
55046: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
55047: LD_ADDR_OWVAR 42
55051: PUSH
55052: LD_INT 19
55054: PUSH
55055: LD_INT 23
55057: PUSH
55058: LD_INT 19
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: PUSH
55066: LD_VAR 0 1
55070: ARRAY
55071: ST_TO_ADDR
55072: GO 55398
55074: LD_INT 18
55076: DOUBLE
55077: EQUAL
55078: IFTRUE 55082
55080: GO 55093
55082: POP
// bc_type := b_ext_radar ; 19 :
55083: LD_ADDR_OWVAR 42
55087: PUSH
55088: LD_INT 20
55090: ST_TO_ADDR
55091: GO 55398
55093: LD_INT 19
55095: DOUBLE
55096: EQUAL
55097: IFTRUE 55101
55099: GO 55112
55101: POP
// bc_type := b_ext_radio ; 20 :
55102: LD_ADDR_OWVAR 42
55106: PUSH
55107: LD_INT 22
55109: ST_TO_ADDR
55110: GO 55398
55112: LD_INT 20
55114: DOUBLE
55115: EQUAL
55116: IFTRUE 55120
55118: GO 55131
55120: POP
// bc_type := b_ext_siberium ; 21 :
55121: LD_ADDR_OWVAR 42
55125: PUSH
55126: LD_INT 21
55128: ST_TO_ADDR
55129: GO 55398
55131: LD_INT 21
55133: DOUBLE
55134: EQUAL
55135: IFTRUE 55139
55137: GO 55150
55139: POP
// bc_type := b_ext_computer ; 22 :
55140: LD_ADDR_OWVAR 42
55144: PUSH
55145: LD_INT 24
55147: ST_TO_ADDR
55148: GO 55398
55150: LD_INT 22
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55158
55156: GO 55169
55158: POP
// bc_type := b_ext_track ; 23 :
55159: LD_ADDR_OWVAR 42
55163: PUSH
55164: LD_INT 16
55166: ST_TO_ADDR
55167: GO 55398
55169: LD_INT 23
55171: DOUBLE
55172: EQUAL
55173: IFTRUE 55177
55175: GO 55188
55177: POP
// bc_type := b_ext_laser ; 24 :
55178: LD_ADDR_OWVAR 42
55182: PUSH
55183: LD_INT 25
55185: ST_TO_ADDR
55186: GO 55398
55188: LD_INT 24
55190: DOUBLE
55191: EQUAL
55192: IFTRUE 55196
55194: GO 55207
55196: POP
// bc_type := b_control_tower ; 25 :
55197: LD_ADDR_OWVAR 42
55201: PUSH
55202: LD_INT 36
55204: ST_TO_ADDR
55205: GO 55398
55207: LD_INT 25
55209: DOUBLE
55210: EQUAL
55211: IFTRUE 55215
55213: GO 55226
55215: POP
// bc_type := b_breastwork ; 26 :
55216: LD_ADDR_OWVAR 42
55220: PUSH
55221: LD_INT 31
55223: ST_TO_ADDR
55224: GO 55398
55226: LD_INT 26
55228: DOUBLE
55229: EQUAL
55230: IFTRUE 55234
55232: GO 55245
55234: POP
// bc_type := b_bunker ; 27 :
55235: LD_ADDR_OWVAR 42
55239: PUSH
55240: LD_INT 32
55242: ST_TO_ADDR
55243: GO 55398
55245: LD_INT 27
55247: DOUBLE
55248: EQUAL
55249: IFTRUE 55253
55251: GO 55264
55253: POP
// bc_type := b_turret ; 28 :
55254: LD_ADDR_OWVAR 42
55258: PUSH
55259: LD_INT 33
55261: ST_TO_ADDR
55262: GO 55398
55264: LD_INT 28
55266: DOUBLE
55267: EQUAL
55268: IFTRUE 55272
55270: GO 55283
55272: POP
// bc_type := b_armoury ; 29 :
55273: LD_ADDR_OWVAR 42
55277: PUSH
55278: LD_INT 4
55280: ST_TO_ADDR
55281: GO 55398
55283: LD_INT 29
55285: DOUBLE
55286: EQUAL
55287: IFTRUE 55291
55289: GO 55302
55291: POP
// bc_type := b_barracks ; 30 :
55292: LD_ADDR_OWVAR 42
55296: PUSH
55297: LD_INT 5
55299: ST_TO_ADDR
55300: GO 55398
55302: LD_INT 30
55304: DOUBLE
55305: EQUAL
55306: IFTRUE 55310
55308: GO 55321
55310: POP
// bc_type := b_solar_power ; 31 :
55311: LD_ADDR_OWVAR 42
55315: PUSH
55316: LD_INT 27
55318: ST_TO_ADDR
55319: GO 55398
55321: LD_INT 31
55323: DOUBLE
55324: EQUAL
55325: IFTRUE 55329
55327: GO 55340
55329: POP
// bc_type := b_oil_power ; 32 :
55330: LD_ADDR_OWVAR 42
55334: PUSH
55335: LD_INT 26
55337: ST_TO_ADDR
55338: GO 55398
55340: LD_INT 32
55342: DOUBLE
55343: EQUAL
55344: IFTRUE 55348
55346: GO 55359
55348: POP
// bc_type := b_siberite_power ; 33 :
55349: LD_ADDR_OWVAR 42
55353: PUSH
55354: LD_INT 28
55356: ST_TO_ADDR
55357: GO 55398
55359: LD_INT 33
55361: DOUBLE
55362: EQUAL
55363: IFTRUE 55367
55365: GO 55378
55367: POP
// bc_type := b_oil_mine ; 34 :
55368: LD_ADDR_OWVAR 42
55372: PUSH
55373: LD_INT 29
55375: ST_TO_ADDR
55376: GO 55398
55378: LD_INT 34
55380: DOUBLE
55381: EQUAL
55382: IFTRUE 55386
55384: GO 55397
55386: POP
// bc_type := b_siberite_mine ; end ;
55387: LD_ADDR_OWVAR 42
55391: PUSH
55392: LD_INT 30
55394: ST_TO_ADDR
55395: GO 55398
55397: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
55398: LD_ADDR_VAR 0 8
55402: PUSH
55403: LD_VAR 0 5
55407: PPUSH
55408: LD_VAR 0 6
55412: PPUSH
55413: LD_VAR 0 3
55417: PPUSH
55418: CALL_OW 47
55422: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
55423: LD_OWVAR 42
55427: PUSH
55428: LD_INT 32
55430: PUSH
55431: LD_INT 33
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: IN
55438: IFFALSE 55454
// PlaceWeaponTurret ( b , weapon ) ;
55440: LD_VAR 0 8
55444: PPUSH
55445: LD_VAR 0 4
55449: PPUSH
55450: CALL_OW 431
// end ;
55454: LD_VAR 0 7
55458: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
55459: LD_INT 0
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55465: LD_ADDR_VAR 0 4
55469: PUSH
55470: LD_INT 22
55472: PUSH
55473: LD_OWVAR 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 30
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 30
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PPUSH
55514: CALL_OW 69
55518: ST_TO_ADDR
// if not tmp then
55519: LD_VAR 0 4
55523: NOT
55524: IFFALSE 55528
// exit ;
55526: GO 55587
// for i in tmp do
55528: LD_ADDR_VAR 0 2
55532: PUSH
55533: LD_VAR 0 4
55537: PUSH
55538: FOR_IN
55539: IFFALSE 55585
// for j = 1 to 3 do
55541: LD_ADDR_VAR 0 3
55545: PUSH
55546: DOUBLE
55547: LD_INT 1
55549: DEC
55550: ST_TO_ADDR
55551: LD_INT 3
55553: PUSH
55554: FOR_TO
55555: IFFALSE 55581
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
55557: LD_VAR 0 2
55561: PPUSH
55562: CALL_OW 274
55566: PPUSH
55567: LD_VAR 0 3
55571: PPUSH
55572: LD_INT 99999
55574: PPUSH
55575: CALL_OW 277
55579: GO 55554
55581: POP
55582: POP
55583: GO 55538
55585: POP
55586: POP
// end ;
55587: LD_VAR 0 1
55591: RET
// export function hHackSetLevel10 ; var i , j ; begin
55592: LD_INT 0
55594: PPUSH
55595: PPUSH
55596: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55597: LD_ADDR_VAR 0 2
55601: PUSH
55602: LD_INT 21
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PPUSH
55612: CALL_OW 69
55616: PUSH
55617: FOR_IN
55618: IFFALSE 55670
// if IsSelected ( i ) then
55620: LD_VAR 0 2
55624: PPUSH
55625: CALL_OW 306
55629: IFFALSE 55668
// begin for j := 1 to 4 do
55631: LD_ADDR_VAR 0 3
55635: PUSH
55636: DOUBLE
55637: LD_INT 1
55639: DEC
55640: ST_TO_ADDR
55641: LD_INT 4
55643: PUSH
55644: FOR_TO
55645: IFFALSE 55666
// SetSkill ( i , j , 10 ) ;
55647: LD_VAR 0 2
55651: PPUSH
55652: LD_VAR 0 3
55656: PPUSH
55657: LD_INT 10
55659: PPUSH
55660: CALL_OW 237
55664: GO 55644
55666: POP
55667: POP
// end ;
55668: GO 55617
55670: POP
55671: POP
// end ;
55672: LD_VAR 0 1
55676: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
55677: LD_INT 0
55679: PPUSH
55680: PPUSH
55681: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
55682: LD_ADDR_VAR 0 2
55686: PUSH
55687: LD_INT 22
55689: PUSH
55690: LD_OWVAR 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 21
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PPUSH
55713: CALL_OW 69
55717: PUSH
55718: FOR_IN
55719: IFFALSE 55760
// begin for j := 1 to 4 do
55721: LD_ADDR_VAR 0 3
55725: PUSH
55726: DOUBLE
55727: LD_INT 1
55729: DEC
55730: ST_TO_ADDR
55731: LD_INT 4
55733: PUSH
55734: FOR_TO
55735: IFFALSE 55756
// SetSkill ( i , j , 10 ) ;
55737: LD_VAR 0 2
55741: PPUSH
55742: LD_VAR 0 3
55746: PPUSH
55747: LD_INT 10
55749: PPUSH
55750: CALL_OW 237
55754: GO 55734
55756: POP
55757: POP
// end ;
55758: GO 55718
55760: POP
55761: POP
// end ;
55762: LD_VAR 0 1
55766: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
55767: LD_INT 0
55769: PPUSH
// uc_side := your_side ;
55770: LD_ADDR_OWVAR 20
55774: PUSH
55775: LD_OWVAR 2
55779: ST_TO_ADDR
// uc_nation := nation ;
55780: LD_ADDR_OWVAR 21
55784: PUSH
55785: LD_VAR 0 1
55789: ST_TO_ADDR
// InitHc ;
55790: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
55794: LD_INT 0
55796: PPUSH
55797: LD_VAR 0 2
55801: PPUSH
55802: LD_VAR 0 3
55806: PPUSH
55807: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
55811: LD_VAR 0 4
55815: PPUSH
55816: LD_VAR 0 5
55820: PPUSH
55821: CALL_OW 428
55825: PUSH
55826: LD_INT 0
55828: EQUAL
55829: IFFALSE 55853
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
55831: CALL_OW 44
55835: PPUSH
55836: LD_VAR 0 4
55840: PPUSH
55841: LD_VAR 0 5
55845: PPUSH
55846: LD_INT 1
55848: PPUSH
55849: CALL_OW 48
// end ;
55853: LD_VAR 0 6
55857: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
55858: LD_INT 0
55860: PPUSH
55861: PPUSH
// uc_side := your_side ;
55862: LD_ADDR_OWVAR 20
55866: PUSH
55867: LD_OWVAR 2
55871: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
55872: LD_VAR 0 1
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: LD_INT 4
55888: PUSH
55889: LD_INT 5
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: IN
55899: IFFALSE 55911
// uc_nation := nation_american else
55901: LD_ADDR_OWVAR 21
55905: PUSH
55906: LD_INT 1
55908: ST_TO_ADDR
55909: GO 55954
// if chassis in [ 11 , 12 , 13 , 14 ] then
55911: LD_VAR 0 1
55915: PUSH
55916: LD_INT 11
55918: PUSH
55919: LD_INT 12
55921: PUSH
55922: LD_INT 13
55924: PUSH
55925: LD_INT 14
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: IN
55934: IFFALSE 55946
// uc_nation := nation_arabian else
55936: LD_ADDR_OWVAR 21
55940: PUSH
55941: LD_INT 2
55943: ST_TO_ADDR
55944: GO 55954
// uc_nation := nation_russian ;
55946: LD_ADDR_OWVAR 21
55950: PUSH
55951: LD_INT 3
55953: ST_TO_ADDR
// vc_chassis := chassis ;
55954: LD_ADDR_OWVAR 37
55958: PUSH
55959: LD_VAR 0 1
55963: ST_TO_ADDR
// vc_engine := engine ;
55964: LD_ADDR_OWVAR 39
55968: PUSH
55969: LD_VAR 0 2
55973: ST_TO_ADDR
// vc_control := control ;
55974: LD_ADDR_OWVAR 38
55978: PUSH
55979: LD_VAR 0 3
55983: ST_TO_ADDR
// vc_weapon := weapon ;
55984: LD_ADDR_OWVAR 40
55988: PUSH
55989: LD_VAR 0 4
55993: ST_TO_ADDR
// un := CreateVehicle ;
55994: LD_ADDR_VAR 0 8
55998: PUSH
55999: CALL_OW 45
56003: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
56004: LD_VAR 0 8
56008: PPUSH
56009: LD_INT 0
56011: PPUSH
56012: LD_INT 5
56014: PPUSH
56015: CALL_OW 12
56019: PPUSH
56020: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
56024: LD_VAR 0 8
56028: PPUSH
56029: LD_VAR 0 5
56033: PPUSH
56034: LD_VAR 0 6
56038: PPUSH
56039: LD_INT 1
56041: PPUSH
56042: CALL_OW 48
// end ;
56046: LD_VAR 0 7
56050: RET
// export hInvincible ; every 1 do
56051: GO 56053
56053: DISABLE
// hInvincible := [ ] ;
56054: LD_ADDR_EXP 80
56058: PUSH
56059: EMPTY
56060: ST_TO_ADDR
56061: END
// every 10 do var i ;
56062: GO 56064
56064: DISABLE
56065: LD_INT 0
56067: PPUSH
// begin enable ;
56068: ENABLE
// if not hInvincible then
56069: LD_EXP 80
56073: NOT
56074: IFFALSE 56078
// exit ;
56076: GO 56122
// for i in hInvincible do
56078: LD_ADDR_VAR 0 1
56082: PUSH
56083: LD_EXP 80
56087: PUSH
56088: FOR_IN
56089: IFFALSE 56120
// if GetLives ( i ) < 1000 then
56091: LD_VAR 0 1
56095: PPUSH
56096: CALL_OW 256
56100: PUSH
56101: LD_INT 1000
56103: LESS
56104: IFFALSE 56118
// SetLives ( i , 1000 ) ;
56106: LD_VAR 0 1
56110: PPUSH
56111: LD_INT 1000
56113: PPUSH
56114: CALL_OW 234
56118: GO 56088
56120: POP
56121: POP
// end ;
56122: PPOPN 1
56124: END
// export function hHackInvincible ; var i ; begin
56125: LD_INT 0
56127: PPUSH
56128: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
56129: LD_ADDR_VAR 0 2
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: LD_INT 21
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 21
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: PPUSH
56162: CALL_OW 69
56166: PUSH
56167: FOR_IN
56168: IFFALSE 56229
// if IsSelected ( i ) then
56170: LD_VAR 0 2
56174: PPUSH
56175: CALL_OW 306
56179: IFFALSE 56227
// begin if i in hInvincible then
56181: LD_VAR 0 2
56185: PUSH
56186: LD_EXP 80
56190: IN
56191: IFFALSE 56211
// hInvincible := hInvincible diff i else
56193: LD_ADDR_EXP 80
56197: PUSH
56198: LD_EXP 80
56202: PUSH
56203: LD_VAR 0 2
56207: DIFF
56208: ST_TO_ADDR
56209: GO 56227
// hInvincible := hInvincible union i ;
56211: LD_ADDR_EXP 80
56215: PUSH
56216: LD_EXP 80
56220: PUSH
56221: LD_VAR 0 2
56225: UNION
56226: ST_TO_ADDR
// end ;
56227: GO 56167
56229: POP
56230: POP
// end ;
56231: LD_VAR 0 1
56235: RET
// export function hHackInvisible ; var i , j ; begin
56236: LD_INT 0
56238: PPUSH
56239: PPUSH
56240: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56241: LD_ADDR_VAR 0 2
56245: PUSH
56246: LD_INT 21
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PPUSH
56256: CALL_OW 69
56260: PUSH
56261: FOR_IN
56262: IFFALSE 56286
// if IsSelected ( i ) then
56264: LD_VAR 0 2
56268: PPUSH
56269: CALL_OW 306
56273: IFFALSE 56284
// ComForceInvisible ( i ) ;
56275: LD_VAR 0 2
56279: PPUSH
56280: CALL_OW 496
56284: GO 56261
56286: POP
56287: POP
// end ;
56288: LD_VAR 0 1
56292: RET
// export function hHackChangeYourSide ; begin
56293: LD_INT 0
56295: PPUSH
// if your_side = 8 then
56296: LD_OWVAR 2
56300: PUSH
56301: LD_INT 8
56303: EQUAL
56304: IFFALSE 56316
// your_side := 0 else
56306: LD_ADDR_OWVAR 2
56310: PUSH
56311: LD_INT 0
56313: ST_TO_ADDR
56314: GO 56330
// your_side := your_side + 1 ;
56316: LD_ADDR_OWVAR 2
56320: PUSH
56321: LD_OWVAR 2
56325: PUSH
56326: LD_INT 1
56328: PLUS
56329: ST_TO_ADDR
// end ;
56330: LD_VAR 0 1
56334: RET
// export function hHackChangeUnitSide ; var i , j ; begin
56335: LD_INT 0
56337: PPUSH
56338: PPUSH
56339: PPUSH
// for i in all_units do
56340: LD_ADDR_VAR 0 2
56344: PUSH
56345: LD_OWVAR 3
56349: PUSH
56350: FOR_IN
56351: IFFALSE 56429
// if IsSelected ( i ) then
56353: LD_VAR 0 2
56357: PPUSH
56358: CALL_OW 306
56362: IFFALSE 56427
// begin j := GetSide ( i ) ;
56364: LD_ADDR_VAR 0 3
56368: PUSH
56369: LD_VAR 0 2
56373: PPUSH
56374: CALL_OW 255
56378: ST_TO_ADDR
// if j = 8 then
56379: LD_VAR 0 3
56383: PUSH
56384: LD_INT 8
56386: EQUAL
56387: IFFALSE 56399
// j := 0 else
56389: LD_ADDR_VAR 0 3
56393: PUSH
56394: LD_INT 0
56396: ST_TO_ADDR
56397: GO 56413
// j := j + 1 ;
56399: LD_ADDR_VAR 0 3
56403: PUSH
56404: LD_VAR 0 3
56408: PUSH
56409: LD_INT 1
56411: PLUS
56412: ST_TO_ADDR
// SetSide ( i , j ) ;
56413: LD_VAR 0 2
56417: PPUSH
56418: LD_VAR 0 3
56422: PPUSH
56423: CALL_OW 235
// end ;
56427: GO 56350
56429: POP
56430: POP
// end ;
56431: LD_VAR 0 1
56435: RET
// export function hHackFog ; begin
56436: LD_INT 0
56438: PPUSH
// FogOff ( true ) ;
56439: LD_INT 1
56441: PPUSH
56442: CALL_OW 344
// end ;
56446: LD_VAR 0 1
56450: RET
// export function hHackTeleport ( unit , x , y ) ; begin
56451: LD_INT 0
56453: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
56454: LD_VAR 0 1
56458: PPUSH
56459: LD_VAR 0 2
56463: PPUSH
56464: LD_VAR 0 3
56468: PPUSH
56469: LD_INT 1
56471: PPUSH
56472: LD_INT 1
56474: PPUSH
56475: CALL_OW 483
// CenterOnXY ( x , y ) ;
56479: LD_VAR 0 2
56483: PPUSH
56484: LD_VAR 0 3
56488: PPUSH
56489: CALL_OW 84
// end ;
56493: LD_VAR 0 4
56497: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56498: LD_INT 0
56500: PPUSH
56501: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56502: LD_VAR 0 1
56506: NOT
56507: PUSH
56508: LD_VAR 0 2
56512: PPUSH
56513: LD_VAR 0 3
56517: PPUSH
56518: CALL_OW 488
56522: NOT
56523: OR
56524: PUSH
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 266
56534: PUSH
56535: LD_INT 3
56537: NONEQUAL
56538: PUSH
56539: LD_VAR 0 1
56543: PPUSH
56544: CALL_OW 247
56548: PUSH
56549: LD_INT 1
56551: EQUAL
56552: NOT
56553: AND
56554: OR
56555: IFFALSE 56559
// exit ;
56557: GO 56708
// if GetType ( factory ) = unit_human then
56559: LD_VAR 0 1
56563: PPUSH
56564: CALL_OW 247
56568: PUSH
56569: LD_INT 1
56571: EQUAL
56572: IFFALSE 56589
// factory := IsInUnit ( factory ) ;
56574: LD_ADDR_VAR 0 1
56578: PUSH
56579: LD_VAR 0 1
56583: PPUSH
56584: CALL_OW 310
56588: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56589: LD_VAR 0 1
56593: PPUSH
56594: CALL_OW 266
56598: PUSH
56599: LD_INT 3
56601: NONEQUAL
56602: IFFALSE 56606
// exit ;
56604: GO 56708
// if HexInfo ( x , y ) = factory then
56606: LD_VAR 0 2
56610: PPUSH
56611: LD_VAR 0 3
56615: PPUSH
56616: CALL_OW 428
56620: PUSH
56621: LD_VAR 0 1
56625: EQUAL
56626: IFFALSE 56653
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56628: LD_ADDR_EXP 81
56632: PUSH
56633: LD_EXP 81
56637: PPUSH
56638: LD_VAR 0 1
56642: PPUSH
56643: LD_INT 0
56645: PPUSH
56646: CALL_OW 1
56650: ST_TO_ADDR
56651: GO 56704
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56653: LD_ADDR_EXP 81
56657: PUSH
56658: LD_EXP 81
56662: PPUSH
56663: LD_VAR 0 1
56667: PPUSH
56668: LD_VAR 0 1
56672: PPUSH
56673: CALL_OW 255
56677: PUSH
56678: LD_VAR 0 1
56682: PUSH
56683: LD_VAR 0 2
56687: PUSH
56688: LD_VAR 0 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: PPUSH
56699: CALL_OW 1
56703: ST_TO_ADDR
// UpdateFactoryWaypoints ;
56704: CALL 56713 0 0
// end ;
56708: LD_VAR 0 4
56712: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
56713: LD_INT 0
56715: PPUSH
56716: PPUSH
56717: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
56718: LD_STRING resetFactoryWaypoint();
56720: PPUSH
56721: CALL_OW 559
// if factoryWaypoints then
56725: LD_EXP 81
56729: IFFALSE 56855
// begin list := PrepareArray ( factoryWaypoints ) ;
56731: LD_ADDR_VAR 0 3
56735: PUSH
56736: LD_EXP 81
56740: PPUSH
56741: CALL 41761 0 1
56745: ST_TO_ADDR
// for i := 1 to list do
56746: LD_ADDR_VAR 0 2
56750: PUSH
56751: DOUBLE
56752: LD_INT 1
56754: DEC
56755: ST_TO_ADDR
56756: LD_VAR 0 3
56760: PUSH
56761: FOR_TO
56762: IFFALSE 56853
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
56764: LD_STRING setFactoryWaypointXY(
56766: PUSH
56767: LD_VAR 0 3
56771: PUSH
56772: LD_VAR 0 2
56776: ARRAY
56777: PUSH
56778: LD_INT 1
56780: ARRAY
56781: STR
56782: PUSH
56783: LD_STRING ,
56785: STR
56786: PUSH
56787: LD_VAR 0 3
56791: PUSH
56792: LD_VAR 0 2
56796: ARRAY
56797: PUSH
56798: LD_INT 2
56800: ARRAY
56801: STR
56802: PUSH
56803: LD_STRING ,
56805: STR
56806: PUSH
56807: LD_VAR 0 3
56811: PUSH
56812: LD_VAR 0 2
56816: ARRAY
56817: PUSH
56818: LD_INT 3
56820: ARRAY
56821: STR
56822: PUSH
56823: LD_STRING ,
56825: STR
56826: PUSH
56827: LD_VAR 0 3
56831: PUSH
56832: LD_VAR 0 2
56836: ARRAY
56837: PUSH
56838: LD_INT 4
56840: ARRAY
56841: STR
56842: PUSH
56843: LD_STRING )
56845: STR
56846: PPUSH
56847: CALL_OW 559
56851: GO 56761
56853: POP
56854: POP
// end ; end ;
56855: LD_VAR 0 1
56859: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
56860: LD_INT 0
56862: PPUSH
// if HexInfo ( x , y ) = warehouse then
56863: LD_VAR 0 2
56867: PPUSH
56868: LD_VAR 0 3
56872: PPUSH
56873: CALL_OW 428
56877: PUSH
56878: LD_VAR 0 1
56882: EQUAL
56883: IFFALSE 56910
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
56885: LD_ADDR_EXP 82
56889: PUSH
56890: LD_EXP 82
56894: PPUSH
56895: LD_VAR 0 1
56899: PPUSH
56900: LD_INT 0
56902: PPUSH
56903: CALL_OW 1
56907: ST_TO_ADDR
56908: GO 56961
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
56910: LD_ADDR_EXP 82
56914: PUSH
56915: LD_EXP 82
56919: PPUSH
56920: LD_VAR 0 1
56924: PPUSH
56925: LD_VAR 0 1
56929: PPUSH
56930: CALL_OW 255
56934: PUSH
56935: LD_VAR 0 1
56939: PUSH
56940: LD_VAR 0 2
56944: PUSH
56945: LD_VAR 0 3
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: PPUSH
56956: CALL_OW 1
56960: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
56961: CALL 56970 0 0
// end ;
56965: LD_VAR 0 4
56969: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
56970: LD_INT 0
56972: PPUSH
56973: PPUSH
56974: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
56975: LD_STRING resetWarehouseGatheringPoints();
56977: PPUSH
56978: CALL_OW 559
// if warehouseGatheringPoints then
56982: LD_EXP 82
56986: IFFALSE 57112
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
56988: LD_ADDR_VAR 0 3
56992: PUSH
56993: LD_EXP 82
56997: PPUSH
56998: CALL 41761 0 1
57002: ST_TO_ADDR
// for i := 1 to list do
57003: LD_ADDR_VAR 0 2
57007: PUSH
57008: DOUBLE
57009: LD_INT 1
57011: DEC
57012: ST_TO_ADDR
57013: LD_VAR 0 3
57017: PUSH
57018: FOR_TO
57019: IFFALSE 57110
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
57021: LD_STRING setWarehouseGatheringPointXY(
57023: PUSH
57024: LD_VAR 0 3
57028: PUSH
57029: LD_VAR 0 2
57033: ARRAY
57034: PUSH
57035: LD_INT 1
57037: ARRAY
57038: STR
57039: PUSH
57040: LD_STRING ,
57042: STR
57043: PUSH
57044: LD_VAR 0 3
57048: PUSH
57049: LD_VAR 0 2
57053: ARRAY
57054: PUSH
57055: LD_INT 2
57057: ARRAY
57058: STR
57059: PUSH
57060: LD_STRING ,
57062: STR
57063: PUSH
57064: LD_VAR 0 3
57068: PUSH
57069: LD_VAR 0 2
57073: ARRAY
57074: PUSH
57075: LD_INT 3
57077: ARRAY
57078: STR
57079: PUSH
57080: LD_STRING ,
57082: STR
57083: PUSH
57084: LD_VAR 0 3
57088: PUSH
57089: LD_VAR 0 2
57093: ARRAY
57094: PUSH
57095: LD_INT 4
57097: ARRAY
57098: STR
57099: PUSH
57100: LD_STRING )
57102: STR
57103: PPUSH
57104: CALL_OW 559
57108: GO 57018
57110: POP
57111: POP
// end ; end ;
57112: LD_VAR 0 1
57116: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
57117: LD_EXP 82
57121: IFFALSE 57806
57123: GO 57125
57125: DISABLE
57126: LD_INT 0
57128: PPUSH
57129: PPUSH
57130: PPUSH
57131: PPUSH
57132: PPUSH
57133: PPUSH
57134: PPUSH
57135: PPUSH
57136: PPUSH
// begin enable ;
57137: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
57138: LD_ADDR_VAR 0 3
57142: PUSH
57143: LD_EXP 82
57147: PPUSH
57148: CALL 41761 0 1
57152: ST_TO_ADDR
// if not list then
57153: LD_VAR 0 3
57157: NOT
57158: IFFALSE 57162
// exit ;
57160: GO 57806
// for i := 1 to list do
57162: LD_ADDR_VAR 0 1
57166: PUSH
57167: DOUBLE
57168: LD_INT 1
57170: DEC
57171: ST_TO_ADDR
57172: LD_VAR 0 3
57176: PUSH
57177: FOR_TO
57178: IFFALSE 57804
// begin depot := list [ i ] [ 2 ] ;
57180: LD_ADDR_VAR 0 8
57184: PUSH
57185: LD_VAR 0 3
57189: PUSH
57190: LD_VAR 0 1
57194: ARRAY
57195: PUSH
57196: LD_INT 2
57198: ARRAY
57199: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
57200: LD_ADDR_VAR 0 5
57204: PUSH
57205: LD_VAR 0 3
57209: PUSH
57210: LD_VAR 0 1
57214: ARRAY
57215: PUSH
57216: LD_INT 1
57218: ARRAY
57219: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
57220: LD_VAR 0 8
57224: PPUSH
57225: CALL_OW 301
57229: PUSH
57230: LD_VAR 0 5
57234: PUSH
57235: LD_VAR 0 8
57239: PPUSH
57240: CALL_OW 255
57244: NONEQUAL
57245: OR
57246: IFFALSE 57275
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
57248: LD_ADDR_EXP 82
57252: PUSH
57253: LD_EXP 82
57257: PPUSH
57258: LD_VAR 0 8
57262: PPUSH
57263: LD_INT 0
57265: PPUSH
57266: CALL_OW 1
57270: ST_TO_ADDR
// exit ;
57271: POP
57272: POP
57273: GO 57806
// end ; x := list [ i ] [ 3 ] ;
57275: LD_ADDR_VAR 0 6
57279: PUSH
57280: LD_VAR 0 3
57284: PUSH
57285: LD_VAR 0 1
57289: ARRAY
57290: PUSH
57291: LD_INT 3
57293: ARRAY
57294: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
57295: LD_ADDR_VAR 0 7
57299: PUSH
57300: LD_VAR 0 3
57304: PUSH
57305: LD_VAR 0 1
57309: ARRAY
57310: PUSH
57311: LD_INT 4
57313: ARRAY
57314: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
57315: LD_ADDR_VAR 0 9
57319: PUSH
57320: LD_VAR 0 6
57324: PPUSH
57325: LD_VAR 0 7
57329: PPUSH
57330: LD_INT 16
57332: PPUSH
57333: CALL 40349 0 3
57337: ST_TO_ADDR
// if not cratesNearbyPoint then
57338: LD_VAR 0 9
57342: NOT
57343: IFFALSE 57349
// exit ;
57345: POP
57346: POP
57347: GO 57806
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
57349: LD_ADDR_VAR 0 4
57353: PUSH
57354: LD_INT 22
57356: PUSH
57357: LD_VAR 0 5
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: LD_INT 60
57371: PUSH
57372: EMPTY
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 91
57381: PUSH
57382: LD_VAR 0 8
57386: PUSH
57387: LD_INT 6
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 25
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 25
57410: PUSH
57411: LD_INT 16
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: PPUSH
57429: CALL_OW 69
57433: PUSH
57434: LD_VAR 0 8
57438: PPUSH
57439: CALL_OW 313
57443: PPUSH
57444: LD_INT 3
57446: PUSH
57447: LD_INT 60
57449: PUSH
57450: EMPTY
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 25
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 25
57472: PUSH
57473: LD_INT 16
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PPUSH
57489: CALL_OW 72
57493: UNION
57494: ST_TO_ADDR
// if tmp then
57495: LD_VAR 0 4
57499: IFFALSE 57579
// begin tmp := ShrinkArray ( tmp , 3 ) ;
57501: LD_ADDR_VAR 0 4
57505: PUSH
57506: LD_VAR 0 4
57510: PPUSH
57511: LD_INT 3
57513: PPUSH
57514: CALL 38318 0 2
57518: ST_TO_ADDR
// for j in tmp do
57519: LD_ADDR_VAR 0 2
57523: PUSH
57524: LD_VAR 0 4
57528: PUSH
57529: FOR_IN
57530: IFFALSE 57573
// begin if IsInUnit ( j ) then
57532: LD_VAR 0 2
57536: PPUSH
57537: CALL_OW 310
57541: IFFALSE 57552
// ComExit ( j ) ;
57543: LD_VAR 0 2
57547: PPUSH
57548: CALL 38401 0 1
// AddComCollect ( j , x , y ) ;
57552: LD_VAR 0 2
57556: PPUSH
57557: LD_VAR 0 6
57561: PPUSH
57562: LD_VAR 0 7
57566: PPUSH
57567: CALL_OW 177
// end ;
57571: GO 57529
57573: POP
57574: POP
// exit ;
57575: POP
57576: POP
57577: GO 57806
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
57579: LD_ADDR_VAR 0 4
57583: PUSH
57584: LD_INT 22
57586: PUSH
57587: LD_VAR 0 5
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 91
57598: PUSH
57599: LD_VAR 0 8
57603: PUSH
57604: LD_INT 8
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 34
57617: PUSH
57618: LD_INT 12
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 34
57627: PUSH
57628: LD_INT 51
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 34
57637: PUSH
57638: LD_INT 32
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 34
57647: PUSH
57648: LD_INT 89
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: PPUSH
57667: CALL_OW 69
57671: ST_TO_ADDR
// if tmp then
57672: LD_VAR 0 4
57676: IFFALSE 57802
// begin for j in tmp do
57678: LD_ADDR_VAR 0 2
57682: PUSH
57683: LD_VAR 0 4
57687: PUSH
57688: FOR_IN
57689: IFFALSE 57800
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
57691: LD_VAR 0 2
57695: PPUSH
57696: CALL_OW 262
57700: PUSH
57701: LD_INT 3
57703: EQUAL
57704: PUSH
57705: LD_VAR 0 2
57709: PPUSH
57710: CALL_OW 261
57714: PUSH
57715: LD_INT 20
57717: GREATER
57718: OR
57719: PUSH
57720: LD_VAR 0 2
57724: PPUSH
57725: CALL_OW 314
57729: NOT
57730: AND
57731: PUSH
57732: LD_VAR 0 2
57736: PPUSH
57737: CALL_OW 263
57741: PUSH
57742: LD_INT 1
57744: NONEQUAL
57745: PUSH
57746: LD_VAR 0 2
57750: PPUSH
57751: CALL_OW 311
57755: OR
57756: AND
57757: IFFALSE 57798
// begin ComCollect ( j , x , y ) ;
57759: LD_VAR 0 2
57763: PPUSH
57764: LD_VAR 0 6
57768: PPUSH
57769: LD_VAR 0 7
57773: PPUSH
57774: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
57778: LD_VAR 0 2
57782: PPUSH
57783: LD_VAR 0 8
57787: PPUSH
57788: CALL_OW 172
// exit ;
57792: POP
57793: POP
57794: POP
57795: POP
57796: GO 57806
// end ;
57798: GO 57688
57800: POP
57801: POP
// end ; end ;
57802: GO 57177
57804: POP
57805: POP
// end ; end_of_file
57806: PPOPN 9
57808: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57809: LD_VAR 0 1
57813: PUSH
57814: LD_INT 200
57816: DOUBLE
57817: GREATEREQUAL
57818: IFFALSE 57826
57820: LD_INT 299
57822: DOUBLE
57823: LESSEQUAL
57824: IFTRUE 57828
57826: GO 57860
57828: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57829: LD_VAR 0 1
57833: PPUSH
57834: LD_VAR 0 2
57838: PPUSH
57839: LD_VAR 0 3
57843: PPUSH
57844: LD_VAR 0 4
57848: PPUSH
57849: LD_VAR 0 5
57853: PPUSH
57854: CALL 58348 0 5
57858: GO 57937
57860: LD_INT 300
57862: DOUBLE
57863: GREATEREQUAL
57864: IFFALSE 57872
57866: LD_INT 399
57868: DOUBLE
57869: LESSEQUAL
57870: IFTRUE 57874
57872: GO 57936
57874: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57875: LD_VAR 0 1
57879: PPUSH
57880: LD_VAR 0 2
57884: PPUSH
57885: LD_VAR 0 3
57889: PPUSH
57890: LD_VAR 0 4
57894: PPUSH
57895: LD_VAR 0 5
57899: PPUSH
57900: LD_VAR 0 6
57904: PPUSH
57905: LD_VAR 0 7
57909: PPUSH
57910: LD_VAR 0 8
57914: PPUSH
57915: LD_VAR 0 9
57919: PPUSH
57920: LD_VAR 0 10
57924: PPUSH
57925: LD_VAR 0 11
57929: PPUSH
57930: CALL 54518 0 11
57934: GO 57937
57936: POP
// end ;
57937: PPOPN 11
57939: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57940: LD_VAR 0 1
57944: PPUSH
57945: LD_VAR 0 2
57949: PPUSH
57950: LD_VAR 0 3
57954: PPUSH
57955: LD_VAR 0 4
57959: PPUSH
57960: LD_VAR 0 5
57964: PPUSH
57965: CALL 58084 0 5
// end ; end_of_file
57969: PPOPN 5
57971: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57972: LD_INT 0
57974: PPUSH
57975: PPUSH
57976: PPUSH
57977: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57978: LD_VAR 0 1
57982: PPUSH
57983: CALL_OW 264
57987: PUSH
57988: LD_INT 91
57990: EQUAL
57991: IFFALSE 58063
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57993: LD_INT 68
57995: PPUSH
57996: LD_VAR 0 1
58000: PPUSH
58001: CALL_OW 255
58005: PPUSH
58006: CALL_OW 321
58010: PUSH
58011: LD_INT 2
58013: EQUAL
58014: IFFALSE 58026
// eff := 70 else
58016: LD_ADDR_VAR 0 4
58020: PUSH
58021: LD_INT 70
58023: ST_TO_ADDR
58024: GO 58034
// eff := 30 ;
58026: LD_ADDR_VAR 0 4
58030: PUSH
58031: LD_INT 30
58033: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58034: LD_VAR 0 1
58038: PPUSH
58039: CALL_OW 250
58043: PPUSH
58044: LD_VAR 0 1
58048: PPUSH
58049: CALL_OW 251
58053: PPUSH
58054: LD_VAR 0 4
58058: PPUSH
58059: CALL_OW 495
// end ; end ;
58063: LD_VAR 0 2
58067: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58068: LD_INT 0
58070: PPUSH
// end ;
58071: LD_VAR 0 4
58075: RET
// export function SOS_Command ( cmd ) ; begin
58076: LD_INT 0
58078: PPUSH
// end ;
58079: LD_VAR 0 2
58083: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58084: LD_INT 0
58086: PPUSH
// end ;
58087: LD_VAR 0 6
58091: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
58092: LD_INT 0
58094: PPUSH
58095: PPUSH
// if not vehicle or not factory then
58096: LD_VAR 0 1
58100: NOT
58101: PUSH
58102: LD_VAR 0 2
58106: NOT
58107: OR
58108: IFFALSE 58112
// exit ;
58110: GO 58343
// if factoryWaypoints >= factory then
58112: LD_EXP 81
58116: PUSH
58117: LD_VAR 0 2
58121: GREATEREQUAL
58122: IFFALSE 58343
// if factoryWaypoints [ factory ] then
58124: LD_EXP 81
58128: PUSH
58129: LD_VAR 0 2
58133: ARRAY
58134: IFFALSE 58343
// begin if GetControl ( vehicle ) = control_manual then
58136: LD_VAR 0 1
58140: PPUSH
58141: CALL_OW 263
58145: PUSH
58146: LD_INT 1
58148: EQUAL
58149: IFFALSE 58230
// begin driver := IsDrivenBy ( vehicle ) ;
58151: LD_ADDR_VAR 0 4
58155: PUSH
58156: LD_VAR 0 1
58160: PPUSH
58161: CALL_OW 311
58165: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58166: LD_VAR 0 4
58170: PPUSH
58171: LD_EXP 81
58175: PUSH
58176: LD_VAR 0 2
58180: ARRAY
58181: PUSH
58182: LD_INT 3
58184: ARRAY
58185: PPUSH
58186: LD_EXP 81
58190: PUSH
58191: LD_VAR 0 2
58195: ARRAY
58196: PUSH
58197: LD_INT 4
58199: ARRAY
58200: PPUSH
58201: CALL_OW 171
// AddComExitVehicle ( driver ) ;
58205: LD_VAR 0 4
58209: PPUSH
58210: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
58214: LD_VAR 0 4
58218: PPUSH
58219: LD_VAR 0 2
58223: PPUSH
58224: CALL_OW 180
// end else
58228: GO 58343
// if GetControl ( vehicle ) = control_remote then
58230: LD_VAR 0 1
58234: PPUSH
58235: CALL_OW 263
58239: PUSH
58240: LD_INT 2
58242: EQUAL
58243: IFFALSE 58304
// begin wait ( 0 0$2 ) ;
58245: LD_INT 70
58247: PPUSH
58248: CALL_OW 67
// if Connect ( vehicle ) then
58252: LD_VAR 0 1
58256: PPUSH
58257: CALL 8641 0 1
58261: IFFALSE 58302
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58263: LD_VAR 0 1
58267: PPUSH
58268: LD_EXP 81
58272: PUSH
58273: LD_VAR 0 2
58277: ARRAY
58278: PUSH
58279: LD_INT 3
58281: ARRAY
58282: PPUSH
58283: LD_EXP 81
58287: PUSH
58288: LD_VAR 0 2
58292: ARRAY
58293: PUSH
58294: LD_INT 4
58296: ARRAY
58297: PPUSH
58298: CALL_OW 171
// end else
58302: GO 58343
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58304: LD_VAR 0 1
58308: PPUSH
58309: LD_EXP 81
58313: PUSH
58314: LD_VAR 0 2
58318: ARRAY
58319: PUSH
58320: LD_INT 3
58322: ARRAY
58323: PPUSH
58324: LD_EXP 81
58328: PUSH
58329: LD_VAR 0 2
58333: ARRAY
58334: PUSH
58335: LD_INT 4
58337: ARRAY
58338: PPUSH
58339: CALL_OW 171
// end ; end ;
58343: LD_VAR 0 3
58347: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58348: LD_INT 0
58350: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58351: LD_VAR 0 1
58355: PUSH
58356: LD_INT 250
58358: EQUAL
58359: PUSH
58360: LD_VAR 0 2
58364: PPUSH
58365: CALL_OW 264
58369: PUSH
58370: LD_INT 81
58372: EQUAL
58373: AND
58374: IFFALSE 58395
// MinerPlaceMine ( unit , x , y ) ;
58376: LD_VAR 0 2
58380: PPUSH
58381: LD_VAR 0 4
58385: PPUSH
58386: LD_VAR 0 5
58390: PPUSH
58391: CALL 60780 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58395: LD_VAR 0 1
58399: PUSH
58400: LD_INT 251
58402: EQUAL
58403: PUSH
58404: LD_VAR 0 2
58408: PPUSH
58409: CALL_OW 264
58413: PUSH
58414: LD_INT 81
58416: EQUAL
58417: AND
58418: IFFALSE 58439
// MinerDetonateMine ( unit , x , y ) ;
58420: LD_VAR 0 2
58424: PPUSH
58425: LD_VAR 0 4
58429: PPUSH
58430: LD_VAR 0 5
58434: PPUSH
58435: CALL 61055 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58439: LD_VAR 0 1
58443: PUSH
58444: LD_INT 252
58446: EQUAL
58447: PUSH
58448: LD_VAR 0 2
58452: PPUSH
58453: CALL_OW 264
58457: PUSH
58458: LD_INT 81
58460: EQUAL
58461: AND
58462: IFFALSE 58483
// MinerCreateMinefield ( unit , x , y ) ;
58464: LD_VAR 0 2
58468: PPUSH
58469: LD_VAR 0 4
58473: PPUSH
58474: LD_VAR 0 5
58478: PPUSH
58479: CALL 61472 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58483: LD_VAR 0 1
58487: PUSH
58488: LD_INT 253
58490: EQUAL
58491: PUSH
58492: LD_VAR 0 2
58496: PPUSH
58497: CALL_OW 257
58501: PUSH
58502: LD_INT 5
58504: EQUAL
58505: AND
58506: IFFALSE 58527
// ComBinocular ( unit , x , y ) ;
58508: LD_VAR 0 2
58512: PPUSH
58513: LD_VAR 0 4
58517: PPUSH
58518: LD_VAR 0 5
58522: PPUSH
58523: CALL 61841 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58527: LD_VAR 0 1
58531: PUSH
58532: LD_INT 254
58534: EQUAL
58535: PUSH
58536: LD_VAR 0 2
58540: PPUSH
58541: CALL_OW 264
58545: PUSH
58546: LD_INT 99
58548: EQUAL
58549: AND
58550: PUSH
58551: LD_VAR 0 3
58555: PPUSH
58556: CALL_OW 263
58560: PUSH
58561: LD_INT 3
58563: EQUAL
58564: AND
58565: IFFALSE 58581
// HackDestroyVehicle ( unit , selectedUnit ) ;
58567: LD_VAR 0 2
58571: PPUSH
58572: LD_VAR 0 3
58576: PPUSH
58577: CALL 60144 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58581: LD_VAR 0 1
58585: PUSH
58586: LD_INT 255
58588: EQUAL
58589: PUSH
58590: LD_VAR 0 2
58594: PPUSH
58595: CALL_OW 264
58599: PUSH
58600: LD_INT 14
58602: PUSH
58603: LD_INT 53
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: IN
58610: AND
58611: PUSH
58612: LD_VAR 0 4
58616: PPUSH
58617: LD_VAR 0 5
58621: PPUSH
58622: CALL_OW 488
58626: AND
58627: IFFALSE 58651
// CutTreeXYR ( unit , x , y , 12 ) ;
58629: LD_VAR 0 2
58633: PPUSH
58634: LD_VAR 0 4
58638: PPUSH
58639: LD_VAR 0 5
58643: PPUSH
58644: LD_INT 12
58646: PPUSH
58647: CALL 58714 0 4
// if cmd = 256 then
58651: LD_VAR 0 1
58655: PUSH
58656: LD_INT 256
58658: EQUAL
58659: IFFALSE 58680
// SetFactoryWaypoint ( unit , x , y ) ;
58661: LD_VAR 0 2
58665: PPUSH
58666: LD_VAR 0 4
58670: PPUSH
58671: LD_VAR 0 5
58675: PPUSH
58676: CALL 56498 0 3
// if cmd = 257 then
58680: LD_VAR 0 1
58684: PUSH
58685: LD_INT 257
58687: EQUAL
58688: IFFALSE 58709
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58690: LD_VAR 0 2
58694: PPUSH
58695: LD_VAR 0 4
58699: PPUSH
58700: LD_VAR 0 5
58704: PPUSH
58705: CALL 56860 0 3
// end ;
58709: LD_VAR 0 6
58713: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58714: LD_INT 0
58716: PPUSH
58717: PPUSH
58718: PPUSH
58719: PPUSH
58720: PPUSH
58721: PPUSH
58722: PPUSH
58723: PPUSH
58724: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58725: LD_VAR 0 1
58729: NOT
58730: PUSH
58731: LD_VAR 0 2
58735: PPUSH
58736: LD_VAR 0 3
58740: PPUSH
58741: CALL_OW 488
58745: NOT
58746: OR
58747: PUSH
58748: LD_VAR 0 4
58752: NOT
58753: OR
58754: IFFALSE 58758
// exit ;
58756: GO 59098
// list := [ ] ;
58758: LD_ADDR_VAR 0 13
58762: PUSH
58763: EMPTY
58764: ST_TO_ADDR
// if x - r < 0 then
58765: LD_VAR 0 2
58769: PUSH
58770: LD_VAR 0 4
58774: MINUS
58775: PUSH
58776: LD_INT 0
58778: LESS
58779: IFFALSE 58791
// min_x := 0 else
58781: LD_ADDR_VAR 0 7
58785: PUSH
58786: LD_INT 0
58788: ST_TO_ADDR
58789: GO 58807
// min_x := x - r ;
58791: LD_ADDR_VAR 0 7
58795: PUSH
58796: LD_VAR 0 2
58800: PUSH
58801: LD_VAR 0 4
58805: MINUS
58806: ST_TO_ADDR
// if y - r < 0 then
58807: LD_VAR 0 3
58811: PUSH
58812: LD_VAR 0 4
58816: MINUS
58817: PUSH
58818: LD_INT 0
58820: LESS
58821: IFFALSE 58833
// min_y := 0 else
58823: LD_ADDR_VAR 0 8
58827: PUSH
58828: LD_INT 0
58830: ST_TO_ADDR
58831: GO 58849
// min_y := y - r ;
58833: LD_ADDR_VAR 0 8
58837: PUSH
58838: LD_VAR 0 3
58842: PUSH
58843: LD_VAR 0 4
58847: MINUS
58848: ST_TO_ADDR
// max_x := x + r ;
58849: LD_ADDR_VAR 0 9
58853: PUSH
58854: LD_VAR 0 2
58858: PUSH
58859: LD_VAR 0 4
58863: PLUS
58864: ST_TO_ADDR
// max_y := y + r ;
58865: LD_ADDR_VAR 0 10
58869: PUSH
58870: LD_VAR 0 3
58874: PUSH
58875: LD_VAR 0 4
58879: PLUS
58880: ST_TO_ADDR
// for _x = min_x to max_x do
58881: LD_ADDR_VAR 0 11
58885: PUSH
58886: DOUBLE
58887: LD_VAR 0 7
58891: DEC
58892: ST_TO_ADDR
58893: LD_VAR 0 9
58897: PUSH
58898: FOR_TO
58899: IFFALSE 59016
// for _y = min_y to max_y do
58901: LD_ADDR_VAR 0 12
58905: PUSH
58906: DOUBLE
58907: LD_VAR 0 8
58911: DEC
58912: ST_TO_ADDR
58913: LD_VAR 0 10
58917: PUSH
58918: FOR_TO
58919: IFFALSE 59012
// begin if not ValidHex ( _x , _y ) then
58921: LD_VAR 0 11
58925: PPUSH
58926: LD_VAR 0 12
58930: PPUSH
58931: CALL_OW 488
58935: NOT
58936: IFFALSE 58940
// continue ;
58938: GO 58918
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58940: LD_VAR 0 11
58944: PPUSH
58945: LD_VAR 0 12
58949: PPUSH
58950: CALL_OW 351
58954: PUSH
58955: LD_VAR 0 11
58959: PPUSH
58960: LD_VAR 0 12
58964: PPUSH
58965: CALL_OW 554
58969: AND
58970: IFFALSE 59010
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58972: LD_ADDR_VAR 0 13
58976: PUSH
58977: LD_VAR 0 13
58981: PPUSH
58982: LD_VAR 0 13
58986: PUSH
58987: LD_INT 1
58989: PLUS
58990: PPUSH
58991: LD_VAR 0 11
58995: PUSH
58996: LD_VAR 0 12
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PPUSH
59005: CALL_OW 2
59009: ST_TO_ADDR
// end ;
59010: GO 58918
59012: POP
59013: POP
59014: GO 58898
59016: POP
59017: POP
// if not list then
59018: LD_VAR 0 13
59022: NOT
59023: IFFALSE 59027
// exit ;
59025: GO 59098
// for i in list do
59027: LD_ADDR_VAR 0 6
59031: PUSH
59032: LD_VAR 0 13
59036: PUSH
59037: FOR_IN
59038: IFFALSE 59096
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59040: LD_VAR 0 1
59044: PPUSH
59045: LD_STRING M
59047: PUSH
59048: LD_VAR 0 6
59052: PUSH
59053: LD_INT 1
59055: ARRAY
59056: PUSH
59057: LD_VAR 0 6
59061: PUSH
59062: LD_INT 2
59064: ARRAY
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: PUSH
59087: EMPTY
59088: LIST
59089: PPUSH
59090: CALL_OW 447
59094: GO 59037
59096: POP
59097: POP
// end ;
59098: LD_VAR 0 5
59102: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59103: LD_EXP 84
59107: NOT
59108: IFFALSE 59158
59110: GO 59112
59112: DISABLE
// begin initHack := true ;
59113: LD_ADDR_EXP 84
59117: PUSH
59118: LD_INT 1
59120: ST_TO_ADDR
// hackTanks := [ ] ;
59121: LD_ADDR_EXP 85
59125: PUSH
59126: EMPTY
59127: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59128: LD_ADDR_EXP 86
59132: PUSH
59133: EMPTY
59134: ST_TO_ADDR
// hackLimit := 3 ;
59135: LD_ADDR_EXP 87
59139: PUSH
59140: LD_INT 3
59142: ST_TO_ADDR
// hackDist := 12 ;
59143: LD_ADDR_EXP 88
59147: PUSH
59148: LD_INT 12
59150: ST_TO_ADDR
// hackCounter := [ ] ;
59151: LD_ADDR_EXP 89
59155: PUSH
59156: EMPTY
59157: ST_TO_ADDR
// end ;
59158: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59159: LD_EXP 84
59163: PUSH
59164: LD_INT 34
59166: PUSH
59167: LD_INT 99
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PPUSH
59174: CALL_OW 69
59178: AND
59179: IFFALSE 59432
59181: GO 59183
59183: DISABLE
59184: LD_INT 0
59186: PPUSH
59187: PPUSH
// begin enable ;
59188: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59189: LD_ADDR_VAR 0 1
59193: PUSH
59194: LD_INT 34
59196: PUSH
59197: LD_INT 99
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PPUSH
59204: CALL_OW 69
59208: PUSH
59209: FOR_IN
59210: IFFALSE 59430
// begin if not i in hackTanks then
59212: LD_VAR 0 1
59216: PUSH
59217: LD_EXP 85
59221: IN
59222: NOT
59223: IFFALSE 59306
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59225: LD_ADDR_EXP 85
59229: PUSH
59230: LD_EXP 85
59234: PPUSH
59235: LD_EXP 85
59239: PUSH
59240: LD_INT 1
59242: PLUS
59243: PPUSH
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 1
59253: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59254: LD_ADDR_EXP 86
59258: PUSH
59259: LD_EXP 86
59263: PPUSH
59264: LD_EXP 86
59268: PUSH
59269: LD_INT 1
59271: PLUS
59272: PPUSH
59273: EMPTY
59274: PPUSH
59275: CALL_OW 1
59279: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59280: LD_ADDR_EXP 89
59284: PUSH
59285: LD_EXP 89
59289: PPUSH
59290: LD_EXP 89
59294: PUSH
59295: LD_INT 1
59297: PLUS
59298: PPUSH
59299: EMPTY
59300: PPUSH
59301: CALL_OW 1
59305: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 302
59315: NOT
59316: IFFALSE 59329
// begin HackUnlinkAll ( i ) ;
59318: LD_VAR 0 1
59322: PPUSH
59323: CALL 59435 0 1
// continue ;
59327: GO 59209
// end ; HackCheckCapturedStatus ( i ) ;
59329: LD_VAR 0 1
59333: PPUSH
59334: CALL 59878 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59338: LD_ADDR_VAR 0 2
59342: PUSH
59343: LD_INT 81
59345: PUSH
59346: LD_VAR 0 1
59350: PPUSH
59351: CALL_OW 255
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 33
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 91
59372: PUSH
59373: LD_VAR 0 1
59377: PUSH
59378: LD_EXP 88
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 50
59390: PUSH
59391: EMPTY
59392: LIST
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: PPUSH
59400: CALL_OW 69
59404: ST_TO_ADDR
// if not tmp then
59405: LD_VAR 0 2
59409: NOT
59410: IFFALSE 59414
// continue ;
59412: GO 59209
// HackLink ( i , tmp ) ;
59414: LD_VAR 0 1
59418: PPUSH
59419: LD_VAR 0 2
59423: PPUSH
59424: CALL 59571 0 2
// end ;
59428: GO 59209
59430: POP
59431: POP
// end ;
59432: PPOPN 2
59434: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59435: LD_INT 0
59437: PPUSH
59438: PPUSH
59439: PPUSH
// if not hack in hackTanks then
59440: LD_VAR 0 1
59444: PUSH
59445: LD_EXP 85
59449: IN
59450: NOT
59451: IFFALSE 59455
// exit ;
59453: GO 59566
// index := GetElementIndex ( hackTanks , hack ) ;
59455: LD_ADDR_VAR 0 4
59459: PUSH
59460: LD_EXP 85
59464: PPUSH
59465: LD_VAR 0 1
59469: PPUSH
59470: CALL 5457 0 2
59474: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59475: LD_EXP 86
59479: PUSH
59480: LD_VAR 0 4
59484: ARRAY
59485: IFFALSE 59566
// begin for i in hackTanksCaptured [ index ] do
59487: LD_ADDR_VAR 0 3
59491: PUSH
59492: LD_EXP 86
59496: PUSH
59497: LD_VAR 0 4
59501: ARRAY
59502: PUSH
59503: FOR_IN
59504: IFFALSE 59530
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59506: LD_VAR 0 3
59510: PUSH
59511: LD_INT 1
59513: ARRAY
59514: PPUSH
59515: LD_VAR 0 3
59519: PUSH
59520: LD_INT 2
59522: ARRAY
59523: PPUSH
59524: CALL_OW 235
59528: GO 59503
59530: POP
59531: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59532: LD_ADDR_EXP 86
59536: PUSH
59537: LD_EXP 86
59541: PPUSH
59542: LD_VAR 0 4
59546: PPUSH
59547: EMPTY
59548: PPUSH
59549: CALL_OW 1
59553: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59554: LD_VAR 0 1
59558: PPUSH
59559: LD_INT 0
59561: PPUSH
59562: CALL_OW 505
// end ; end ;
59566: LD_VAR 0 2
59570: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59571: LD_INT 0
59573: PPUSH
59574: PPUSH
59575: PPUSH
// if not hack in hackTanks or not vehicles then
59576: LD_VAR 0 1
59580: PUSH
59581: LD_EXP 85
59585: IN
59586: NOT
59587: PUSH
59588: LD_VAR 0 2
59592: NOT
59593: OR
59594: IFFALSE 59598
// exit ;
59596: GO 59873
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59598: LD_ADDR_VAR 0 2
59602: PUSH
59603: LD_VAR 0 1
59607: PPUSH
59608: LD_VAR 0 2
59612: PPUSH
59613: LD_INT 1
59615: PPUSH
59616: LD_INT 1
59618: PPUSH
59619: CALL 6107 0 4
59623: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59624: LD_ADDR_VAR 0 5
59628: PUSH
59629: LD_EXP 85
59633: PPUSH
59634: LD_VAR 0 1
59638: PPUSH
59639: CALL 5457 0 2
59643: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59644: LD_EXP 86
59648: PUSH
59649: LD_VAR 0 5
59653: ARRAY
59654: PUSH
59655: LD_EXP 87
59659: LESS
59660: IFFALSE 59849
// begin for i := 1 to vehicles do
59662: LD_ADDR_VAR 0 4
59666: PUSH
59667: DOUBLE
59668: LD_INT 1
59670: DEC
59671: ST_TO_ADDR
59672: LD_VAR 0 2
59676: PUSH
59677: FOR_TO
59678: IFFALSE 59847
// begin if hackTanksCaptured [ index ] = hackLimit then
59680: LD_EXP 86
59684: PUSH
59685: LD_VAR 0 5
59689: ARRAY
59690: PUSH
59691: LD_EXP 87
59695: EQUAL
59696: IFFALSE 59700
// break ;
59698: GO 59847
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59700: LD_ADDR_EXP 89
59704: PUSH
59705: LD_EXP 89
59709: PPUSH
59710: LD_VAR 0 5
59714: PPUSH
59715: LD_EXP 89
59719: PUSH
59720: LD_VAR 0 5
59724: ARRAY
59725: PUSH
59726: LD_INT 1
59728: PLUS
59729: PPUSH
59730: CALL_OW 1
59734: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59735: LD_ADDR_EXP 86
59739: PUSH
59740: LD_EXP 86
59744: PPUSH
59745: LD_VAR 0 5
59749: PUSH
59750: LD_EXP 86
59754: PUSH
59755: LD_VAR 0 5
59759: ARRAY
59760: PUSH
59761: LD_INT 1
59763: PLUS
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PPUSH
59769: LD_VAR 0 2
59773: PUSH
59774: LD_VAR 0 4
59778: ARRAY
59779: PUSH
59780: LD_VAR 0 2
59784: PUSH
59785: LD_VAR 0 4
59789: ARRAY
59790: PPUSH
59791: CALL_OW 255
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PPUSH
59800: CALL 5672 0 3
59804: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59805: LD_VAR 0 2
59809: PUSH
59810: LD_VAR 0 4
59814: ARRAY
59815: PPUSH
59816: LD_VAR 0 1
59820: PPUSH
59821: CALL_OW 255
59825: PPUSH
59826: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59830: LD_VAR 0 2
59834: PUSH
59835: LD_VAR 0 4
59839: ARRAY
59840: PPUSH
59841: CALL_OW 141
// end ;
59845: GO 59677
59847: POP
59848: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59849: LD_VAR 0 1
59853: PPUSH
59854: LD_EXP 86
59858: PUSH
59859: LD_VAR 0 5
59863: ARRAY
59864: PUSH
59865: LD_INT 0
59867: PLUS
59868: PPUSH
59869: CALL_OW 505
// end ;
59873: LD_VAR 0 3
59877: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59878: LD_INT 0
59880: PPUSH
59881: PPUSH
59882: PPUSH
59883: PPUSH
// if not hack in hackTanks then
59884: LD_VAR 0 1
59888: PUSH
59889: LD_EXP 85
59893: IN
59894: NOT
59895: IFFALSE 59899
// exit ;
59897: GO 60139
// index := GetElementIndex ( hackTanks , hack ) ;
59899: LD_ADDR_VAR 0 4
59903: PUSH
59904: LD_EXP 85
59908: PPUSH
59909: LD_VAR 0 1
59913: PPUSH
59914: CALL 5457 0 2
59918: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59919: LD_ADDR_VAR 0 3
59923: PUSH
59924: DOUBLE
59925: LD_EXP 86
59929: PUSH
59930: LD_VAR 0 4
59934: ARRAY
59935: INC
59936: ST_TO_ADDR
59937: LD_INT 1
59939: PUSH
59940: FOR_DOWNTO
59941: IFFALSE 60113
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59943: LD_ADDR_VAR 0 5
59947: PUSH
59948: LD_EXP 86
59952: PUSH
59953: LD_VAR 0 4
59957: ARRAY
59958: PUSH
59959: LD_VAR 0 3
59963: ARRAY
59964: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59965: LD_VAR 0 5
59969: PUSH
59970: LD_INT 1
59972: ARRAY
59973: PPUSH
59974: CALL_OW 302
59978: NOT
59979: PUSH
59980: LD_VAR 0 5
59984: PUSH
59985: LD_INT 1
59987: ARRAY
59988: PPUSH
59989: CALL_OW 255
59993: PUSH
59994: LD_VAR 0 1
59998: PPUSH
59999: CALL_OW 255
60003: NONEQUAL
60004: OR
60005: IFFALSE 60111
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60007: LD_VAR 0 5
60011: PUSH
60012: LD_INT 1
60014: ARRAY
60015: PPUSH
60016: CALL_OW 305
60020: PUSH
60021: LD_VAR 0 5
60025: PUSH
60026: LD_INT 1
60028: ARRAY
60029: PPUSH
60030: CALL_OW 255
60034: PUSH
60035: LD_VAR 0 1
60039: PPUSH
60040: CALL_OW 255
60044: EQUAL
60045: AND
60046: IFFALSE 60070
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60048: LD_VAR 0 5
60052: PUSH
60053: LD_INT 1
60055: ARRAY
60056: PPUSH
60057: LD_VAR 0 5
60061: PUSH
60062: LD_INT 2
60064: ARRAY
60065: PPUSH
60066: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60070: LD_ADDR_EXP 86
60074: PUSH
60075: LD_EXP 86
60079: PPUSH
60080: LD_VAR 0 4
60084: PPUSH
60085: LD_EXP 86
60089: PUSH
60090: LD_VAR 0 4
60094: ARRAY
60095: PPUSH
60096: LD_VAR 0 3
60100: PPUSH
60101: CALL_OW 3
60105: PPUSH
60106: CALL_OW 1
60110: ST_TO_ADDR
// end ; end ;
60111: GO 59940
60113: POP
60114: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60115: LD_VAR 0 1
60119: PPUSH
60120: LD_EXP 86
60124: PUSH
60125: LD_VAR 0 4
60129: ARRAY
60130: PUSH
60131: LD_INT 0
60133: PLUS
60134: PPUSH
60135: CALL_OW 505
// end ;
60139: LD_VAR 0 2
60143: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60144: LD_INT 0
60146: PPUSH
60147: PPUSH
60148: PPUSH
60149: PPUSH
// if not hack in hackTanks then
60150: LD_VAR 0 1
60154: PUSH
60155: LD_EXP 85
60159: IN
60160: NOT
60161: IFFALSE 60165
// exit ;
60163: GO 60250
// index := GetElementIndex ( hackTanks , hack ) ;
60165: LD_ADDR_VAR 0 5
60169: PUSH
60170: LD_EXP 85
60174: PPUSH
60175: LD_VAR 0 1
60179: PPUSH
60180: CALL 5457 0 2
60184: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60185: LD_ADDR_VAR 0 4
60189: PUSH
60190: DOUBLE
60191: LD_INT 1
60193: DEC
60194: ST_TO_ADDR
60195: LD_EXP 86
60199: PUSH
60200: LD_VAR 0 5
60204: ARRAY
60205: PUSH
60206: FOR_TO
60207: IFFALSE 60248
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60209: LD_EXP 86
60213: PUSH
60214: LD_VAR 0 5
60218: ARRAY
60219: PUSH
60220: LD_VAR 0 4
60224: ARRAY
60225: PUSH
60226: LD_INT 1
60228: ARRAY
60229: PUSH
60230: LD_VAR 0 2
60234: EQUAL
60235: IFFALSE 60246
// KillUnit ( vehicle ) ;
60237: LD_VAR 0 2
60241: PPUSH
60242: CALL_OW 66
60246: GO 60206
60248: POP
60249: POP
// end ;
60250: LD_VAR 0 3
60254: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60255: LD_EXP 90
60259: NOT
60260: IFFALSE 60295
60262: GO 60264
60264: DISABLE
// begin initMiner := true ;
60265: LD_ADDR_EXP 90
60269: PUSH
60270: LD_INT 1
60272: ST_TO_ADDR
// minersList := [ ] ;
60273: LD_ADDR_EXP 91
60277: PUSH
60278: EMPTY
60279: ST_TO_ADDR
// minerMinesList := [ ] ;
60280: LD_ADDR_EXP 92
60284: PUSH
60285: EMPTY
60286: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60287: LD_ADDR_EXP 93
60291: PUSH
60292: LD_INT 5
60294: ST_TO_ADDR
// end ;
60295: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60296: LD_EXP 90
60300: PUSH
60301: LD_INT 34
60303: PUSH
60304: LD_INT 81
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PPUSH
60311: CALL_OW 69
60315: AND
60316: IFFALSE 60777
60318: GO 60320
60320: DISABLE
60321: LD_INT 0
60323: PPUSH
60324: PPUSH
60325: PPUSH
60326: PPUSH
// begin enable ;
60327: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60328: LD_ADDR_VAR 0 1
60332: PUSH
60333: LD_INT 34
60335: PUSH
60336: LD_INT 81
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PPUSH
60343: CALL_OW 69
60347: PUSH
60348: FOR_IN
60349: IFFALSE 60421
// begin if not i in minersList then
60351: LD_VAR 0 1
60355: PUSH
60356: LD_EXP 91
60360: IN
60361: NOT
60362: IFFALSE 60419
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60364: LD_ADDR_EXP 91
60368: PUSH
60369: LD_EXP 91
60373: PPUSH
60374: LD_EXP 91
60378: PUSH
60379: LD_INT 1
60381: PLUS
60382: PPUSH
60383: LD_VAR 0 1
60387: PPUSH
60388: CALL_OW 1
60392: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60393: LD_ADDR_EXP 92
60397: PUSH
60398: LD_EXP 92
60402: PPUSH
60403: LD_EXP 92
60407: PUSH
60408: LD_INT 1
60410: PLUS
60411: PPUSH
60412: EMPTY
60413: PPUSH
60414: CALL_OW 1
60418: ST_TO_ADDR
// end end ;
60419: GO 60348
60421: POP
60422: POP
// for i := minerMinesList downto 1 do
60423: LD_ADDR_VAR 0 1
60427: PUSH
60428: DOUBLE
60429: LD_EXP 92
60433: INC
60434: ST_TO_ADDR
60435: LD_INT 1
60437: PUSH
60438: FOR_DOWNTO
60439: IFFALSE 60775
// begin if IsLive ( minersList [ i ] ) then
60441: LD_EXP 91
60445: PUSH
60446: LD_VAR 0 1
60450: ARRAY
60451: PPUSH
60452: CALL_OW 300
60456: IFFALSE 60484
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
60458: LD_EXP 91
60462: PUSH
60463: LD_VAR 0 1
60467: ARRAY
60468: PPUSH
60469: LD_EXP 92
60473: PUSH
60474: LD_VAR 0 1
60478: ARRAY
60479: PPUSH
60480: CALL_OW 505
// if not minerMinesList [ i ] then
60484: LD_EXP 92
60488: PUSH
60489: LD_VAR 0 1
60493: ARRAY
60494: NOT
60495: IFFALSE 60499
// continue ;
60497: GO 60438
// for j := minerMinesList [ i ] downto 1 do
60499: LD_ADDR_VAR 0 2
60503: PUSH
60504: DOUBLE
60505: LD_EXP 92
60509: PUSH
60510: LD_VAR 0 1
60514: ARRAY
60515: INC
60516: ST_TO_ADDR
60517: LD_INT 1
60519: PUSH
60520: FOR_DOWNTO
60521: IFFALSE 60771
// begin side := GetSide ( minersList [ i ] ) ;
60523: LD_ADDR_VAR 0 3
60527: PUSH
60528: LD_EXP 91
60532: PUSH
60533: LD_VAR 0 1
60537: ARRAY
60538: PPUSH
60539: CALL_OW 255
60543: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60544: LD_ADDR_VAR 0 4
60548: PUSH
60549: LD_EXP 92
60553: PUSH
60554: LD_VAR 0 1
60558: ARRAY
60559: PUSH
60560: LD_VAR 0 2
60564: ARRAY
60565: PUSH
60566: LD_INT 1
60568: ARRAY
60569: PPUSH
60570: LD_EXP 92
60574: PUSH
60575: LD_VAR 0 1
60579: ARRAY
60580: PUSH
60581: LD_VAR 0 2
60585: ARRAY
60586: PUSH
60587: LD_INT 2
60589: ARRAY
60590: PPUSH
60591: CALL_OW 428
60595: ST_TO_ADDR
// if not tmp then
60596: LD_VAR 0 4
60600: NOT
60601: IFFALSE 60605
// continue ;
60603: GO 60520
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60605: LD_VAR 0 4
60609: PUSH
60610: LD_INT 81
60612: PUSH
60613: LD_VAR 0 3
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PPUSH
60622: CALL_OW 69
60626: IN
60627: PUSH
60628: LD_EXP 92
60632: PUSH
60633: LD_VAR 0 1
60637: ARRAY
60638: PUSH
60639: LD_VAR 0 2
60643: ARRAY
60644: PUSH
60645: LD_INT 1
60647: ARRAY
60648: PPUSH
60649: LD_EXP 92
60653: PUSH
60654: LD_VAR 0 1
60658: ARRAY
60659: PUSH
60660: LD_VAR 0 2
60664: ARRAY
60665: PUSH
60666: LD_INT 2
60668: ARRAY
60669: PPUSH
60670: CALL_OW 458
60674: AND
60675: IFFALSE 60769
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60677: LD_EXP 92
60681: PUSH
60682: LD_VAR 0 1
60686: ARRAY
60687: PUSH
60688: LD_VAR 0 2
60692: ARRAY
60693: PUSH
60694: LD_INT 1
60696: ARRAY
60697: PPUSH
60698: LD_EXP 92
60702: PUSH
60703: LD_VAR 0 1
60707: ARRAY
60708: PUSH
60709: LD_VAR 0 2
60713: ARRAY
60714: PUSH
60715: LD_INT 2
60717: ARRAY
60718: PPUSH
60719: LD_VAR 0 3
60723: PPUSH
60724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60728: LD_ADDR_EXP 92
60732: PUSH
60733: LD_EXP 92
60737: PPUSH
60738: LD_VAR 0 1
60742: PPUSH
60743: LD_EXP 92
60747: PUSH
60748: LD_VAR 0 1
60752: ARRAY
60753: PPUSH
60754: LD_VAR 0 2
60758: PPUSH
60759: CALL_OW 3
60763: PPUSH
60764: CALL_OW 1
60768: ST_TO_ADDR
// end ; end ;
60769: GO 60520
60771: POP
60772: POP
// end ;
60773: GO 60438
60775: POP
60776: POP
// end ;
60777: PPOPN 4
60779: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
// result := false ;
60784: LD_ADDR_VAR 0 4
60788: PUSH
60789: LD_INT 0
60791: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60792: LD_VAR 0 1
60796: PPUSH
60797: CALL_OW 264
60801: PUSH
60802: LD_INT 81
60804: EQUAL
60805: NOT
60806: IFFALSE 60810
// exit ;
60808: GO 61050
// index := GetElementIndex ( minersList , unit ) ;
60810: LD_ADDR_VAR 0 5
60814: PUSH
60815: LD_EXP 91
60819: PPUSH
60820: LD_VAR 0 1
60824: PPUSH
60825: CALL 5457 0 2
60829: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60830: LD_EXP 92
60834: PUSH
60835: LD_VAR 0 5
60839: ARRAY
60840: PUSH
60841: LD_EXP 93
60845: GREATEREQUAL
60846: IFFALSE 60850
// exit ;
60848: GO 61050
// ComMoveXY ( unit , x , y ) ;
60850: LD_VAR 0 1
60854: PPUSH
60855: LD_VAR 0 2
60859: PPUSH
60860: LD_VAR 0 3
60864: PPUSH
60865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60869: LD_INT 35
60871: PPUSH
60872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60876: LD_VAR 0 1
60880: PPUSH
60881: LD_VAR 0 2
60885: PPUSH
60886: LD_VAR 0 3
60890: PPUSH
60891: CALL 36812 0 3
60895: NOT
60896: PUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 314
60906: AND
60907: IFFALSE 60911
// exit ;
60909: GO 61050
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60911: LD_VAR 0 2
60915: PPUSH
60916: LD_VAR 0 3
60920: PPUSH
60921: CALL_OW 428
60925: PUSH
60926: LD_VAR 0 1
60930: EQUAL
60931: PUSH
60932: LD_VAR 0 1
60936: PPUSH
60937: CALL_OW 314
60941: NOT
60942: AND
60943: IFFALSE 60869
// PlaySoundXY ( x , y , PlantMine ) ;
60945: LD_VAR 0 2
60949: PPUSH
60950: LD_VAR 0 3
60954: PPUSH
60955: LD_STRING PlantMine
60957: PPUSH
60958: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60962: LD_VAR 0 2
60966: PPUSH
60967: LD_VAR 0 3
60971: PPUSH
60972: LD_VAR 0 1
60976: PPUSH
60977: CALL_OW 255
60981: PPUSH
60982: LD_INT 0
60984: PPUSH
60985: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60989: LD_ADDR_EXP 92
60993: PUSH
60994: LD_EXP 92
60998: PPUSH
60999: LD_VAR 0 5
61003: PUSH
61004: LD_EXP 92
61008: PUSH
61009: LD_VAR 0 5
61013: ARRAY
61014: PUSH
61015: LD_INT 1
61017: PLUS
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PPUSH
61023: LD_VAR 0 2
61027: PUSH
61028: LD_VAR 0 3
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PPUSH
61037: CALL 5672 0 3
61041: ST_TO_ADDR
// result := true ;
61042: LD_ADDR_VAR 0 4
61046: PUSH
61047: LD_INT 1
61049: ST_TO_ADDR
// end ;
61050: LD_VAR 0 4
61054: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61055: LD_INT 0
61057: PPUSH
61058: PPUSH
61059: PPUSH
// if not unit in minersList then
61060: LD_VAR 0 1
61064: PUSH
61065: LD_EXP 91
61069: IN
61070: NOT
61071: IFFALSE 61075
// exit ;
61073: GO 61467
// index := GetElementIndex ( minersList , unit ) ;
61075: LD_ADDR_VAR 0 6
61079: PUSH
61080: LD_EXP 91
61084: PPUSH
61085: LD_VAR 0 1
61089: PPUSH
61090: CALL 5457 0 2
61094: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61095: LD_ADDR_VAR 0 5
61099: PUSH
61100: DOUBLE
61101: LD_EXP 92
61105: PUSH
61106: LD_VAR 0 6
61110: ARRAY
61111: INC
61112: ST_TO_ADDR
61113: LD_INT 1
61115: PUSH
61116: FOR_DOWNTO
61117: IFFALSE 61278
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61119: LD_EXP 92
61123: PUSH
61124: LD_VAR 0 6
61128: ARRAY
61129: PUSH
61130: LD_VAR 0 5
61134: ARRAY
61135: PUSH
61136: LD_INT 1
61138: ARRAY
61139: PUSH
61140: LD_VAR 0 2
61144: EQUAL
61145: PUSH
61146: LD_EXP 92
61150: PUSH
61151: LD_VAR 0 6
61155: ARRAY
61156: PUSH
61157: LD_VAR 0 5
61161: ARRAY
61162: PUSH
61163: LD_INT 2
61165: ARRAY
61166: PUSH
61167: LD_VAR 0 3
61171: EQUAL
61172: AND
61173: IFFALSE 61276
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61175: LD_EXP 92
61179: PUSH
61180: LD_VAR 0 6
61184: ARRAY
61185: PUSH
61186: LD_VAR 0 5
61190: ARRAY
61191: PUSH
61192: LD_INT 1
61194: ARRAY
61195: PPUSH
61196: LD_EXP 92
61200: PUSH
61201: LD_VAR 0 6
61205: ARRAY
61206: PUSH
61207: LD_VAR 0 5
61211: ARRAY
61212: PUSH
61213: LD_INT 2
61215: ARRAY
61216: PPUSH
61217: LD_VAR 0 1
61221: PPUSH
61222: CALL_OW 255
61226: PPUSH
61227: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61231: LD_ADDR_EXP 92
61235: PUSH
61236: LD_EXP 92
61240: PPUSH
61241: LD_VAR 0 6
61245: PPUSH
61246: LD_EXP 92
61250: PUSH
61251: LD_VAR 0 6
61255: ARRAY
61256: PPUSH
61257: LD_VAR 0 5
61261: PPUSH
61262: CALL_OW 3
61266: PPUSH
61267: CALL_OW 1
61271: ST_TO_ADDR
// exit ;
61272: POP
61273: POP
61274: GO 61467
// end ; end ;
61276: GO 61116
61278: POP
61279: POP
// for i := minerMinesList [ index ] downto 1 do
61280: LD_ADDR_VAR 0 5
61284: PUSH
61285: DOUBLE
61286: LD_EXP 92
61290: PUSH
61291: LD_VAR 0 6
61295: ARRAY
61296: INC
61297: ST_TO_ADDR
61298: LD_INT 1
61300: PUSH
61301: FOR_DOWNTO
61302: IFFALSE 61465
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61304: LD_EXP 92
61308: PUSH
61309: LD_VAR 0 6
61313: ARRAY
61314: PUSH
61315: LD_VAR 0 5
61319: ARRAY
61320: PUSH
61321: LD_INT 1
61323: ARRAY
61324: PPUSH
61325: LD_EXP 92
61329: PUSH
61330: LD_VAR 0 6
61334: ARRAY
61335: PUSH
61336: LD_VAR 0 5
61340: ARRAY
61341: PUSH
61342: LD_INT 2
61344: ARRAY
61345: PPUSH
61346: LD_VAR 0 2
61350: PPUSH
61351: LD_VAR 0 3
61355: PPUSH
61356: CALL_OW 298
61360: PUSH
61361: LD_INT 6
61363: LESS
61364: IFFALSE 61463
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61366: LD_EXP 92
61370: PUSH
61371: LD_VAR 0 6
61375: ARRAY
61376: PUSH
61377: LD_VAR 0 5
61381: ARRAY
61382: PUSH
61383: LD_INT 1
61385: ARRAY
61386: PPUSH
61387: LD_EXP 92
61391: PUSH
61392: LD_VAR 0 6
61396: ARRAY
61397: PUSH
61398: LD_VAR 0 5
61402: ARRAY
61403: PUSH
61404: LD_INT 2
61406: ARRAY
61407: PPUSH
61408: LD_VAR 0 1
61412: PPUSH
61413: CALL_OW 255
61417: PPUSH
61418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61422: LD_ADDR_EXP 92
61426: PUSH
61427: LD_EXP 92
61431: PPUSH
61432: LD_VAR 0 6
61436: PPUSH
61437: LD_EXP 92
61441: PUSH
61442: LD_VAR 0 6
61446: ARRAY
61447: PPUSH
61448: LD_VAR 0 5
61452: PPUSH
61453: CALL_OW 3
61457: PPUSH
61458: CALL_OW 1
61462: ST_TO_ADDR
// end ; end ;
61463: GO 61301
61465: POP
61466: POP
// end ;
61467: LD_VAR 0 4
61471: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61472: LD_INT 0
61474: PPUSH
61475: PPUSH
61476: PPUSH
61477: PPUSH
61478: PPUSH
61479: PPUSH
61480: PPUSH
61481: PPUSH
61482: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61483: LD_VAR 0 1
61487: PPUSH
61488: CALL_OW 264
61492: PUSH
61493: LD_INT 81
61495: EQUAL
61496: NOT
61497: PUSH
61498: LD_VAR 0 1
61502: PUSH
61503: LD_EXP 91
61507: IN
61508: NOT
61509: OR
61510: IFFALSE 61514
// exit ;
61512: GO 61836
// index := GetElementIndex ( minersList , unit ) ;
61514: LD_ADDR_VAR 0 6
61518: PUSH
61519: LD_EXP 91
61523: PPUSH
61524: LD_VAR 0 1
61528: PPUSH
61529: CALL 5457 0 2
61533: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61534: LD_ADDR_VAR 0 8
61538: PUSH
61539: LD_EXP 93
61543: PUSH
61544: LD_EXP 92
61548: PUSH
61549: LD_VAR 0 6
61553: ARRAY
61554: MINUS
61555: ST_TO_ADDR
// if not minesFreeAmount then
61556: LD_VAR 0 8
61560: NOT
61561: IFFALSE 61565
// exit ;
61563: GO 61836
// tmp := [ ] ;
61565: LD_ADDR_VAR 0 7
61569: PUSH
61570: EMPTY
61571: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61572: LD_ADDR_VAR 0 5
61576: PUSH
61577: DOUBLE
61578: LD_INT 1
61580: DEC
61581: ST_TO_ADDR
61582: LD_VAR 0 8
61586: PUSH
61587: FOR_TO
61588: IFFALSE 61783
// begin _d := rand ( 0 , 5 ) ;
61590: LD_ADDR_VAR 0 11
61594: PUSH
61595: LD_INT 0
61597: PPUSH
61598: LD_INT 5
61600: PPUSH
61601: CALL_OW 12
61605: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61606: LD_ADDR_VAR 0 12
61610: PUSH
61611: LD_INT 2
61613: PPUSH
61614: LD_INT 6
61616: PPUSH
61617: CALL_OW 12
61621: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61622: LD_ADDR_VAR 0 9
61626: PUSH
61627: LD_VAR 0 2
61631: PPUSH
61632: LD_VAR 0 11
61636: PPUSH
61637: LD_VAR 0 12
61641: PPUSH
61642: CALL_OW 272
61646: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61647: LD_ADDR_VAR 0 10
61651: PUSH
61652: LD_VAR 0 3
61656: PPUSH
61657: LD_VAR 0 11
61661: PPUSH
61662: LD_VAR 0 12
61666: PPUSH
61667: CALL_OW 273
61671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61672: LD_VAR 0 9
61676: PPUSH
61677: LD_VAR 0 10
61681: PPUSH
61682: CALL_OW 488
61686: PUSH
61687: LD_VAR 0 9
61691: PUSH
61692: LD_VAR 0 10
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_VAR 0 7
61705: IN
61706: NOT
61707: AND
61708: PUSH
61709: LD_VAR 0 9
61713: PPUSH
61714: LD_VAR 0 10
61718: PPUSH
61719: CALL_OW 458
61723: NOT
61724: AND
61725: IFFALSE 61767
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61727: LD_ADDR_VAR 0 7
61731: PUSH
61732: LD_VAR 0 7
61736: PPUSH
61737: LD_VAR 0 7
61741: PUSH
61742: LD_INT 1
61744: PLUS
61745: PPUSH
61746: LD_VAR 0 9
61750: PUSH
61751: LD_VAR 0 10
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PPUSH
61760: CALL_OW 1
61764: ST_TO_ADDR
61765: GO 61781
// i := i - 1 ;
61767: LD_ADDR_VAR 0 5
61771: PUSH
61772: LD_VAR 0 5
61776: PUSH
61777: LD_INT 1
61779: MINUS
61780: ST_TO_ADDR
// end ;
61781: GO 61587
61783: POP
61784: POP
// for i in tmp do
61785: LD_ADDR_VAR 0 5
61789: PUSH
61790: LD_VAR 0 7
61794: PUSH
61795: FOR_IN
61796: IFFALSE 61834
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61798: LD_VAR 0 1
61802: PPUSH
61803: LD_VAR 0 5
61807: PUSH
61808: LD_INT 1
61810: ARRAY
61811: PPUSH
61812: LD_VAR 0 5
61816: PUSH
61817: LD_INT 2
61819: ARRAY
61820: PPUSH
61821: CALL 60780 0 3
61825: NOT
61826: IFFALSE 61832
// exit ;
61828: POP
61829: POP
61830: GO 61836
61832: GO 61795
61834: POP
61835: POP
// end ;
61836: LD_VAR 0 4
61840: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61841: LD_INT 0
61843: PPUSH
61844: PPUSH
61845: PPUSH
61846: PPUSH
61847: PPUSH
61848: PPUSH
61849: PPUSH
// if not GetClass ( unit ) = class_sniper then
61850: LD_VAR 0 1
61854: PPUSH
61855: CALL_OW 257
61859: PUSH
61860: LD_INT 5
61862: EQUAL
61863: NOT
61864: IFFALSE 61868
// exit ;
61866: GO 62256
// dist := 8 ;
61868: LD_ADDR_VAR 0 5
61872: PUSH
61873: LD_INT 8
61875: ST_TO_ADDR
// viewRange := 12 ;
61876: LD_ADDR_VAR 0 7
61880: PUSH
61881: LD_INT 12
61883: ST_TO_ADDR
// side := GetSide ( unit ) ;
61884: LD_ADDR_VAR 0 6
61888: PUSH
61889: LD_VAR 0 1
61893: PPUSH
61894: CALL_OW 255
61898: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61899: LD_INT 61
61901: PPUSH
61902: LD_VAR 0 6
61906: PPUSH
61907: CALL_OW 321
61911: PUSH
61912: LD_INT 2
61914: EQUAL
61915: IFFALSE 61925
// viewRange := 16 ;
61917: LD_ADDR_VAR 0 7
61921: PUSH
61922: LD_INT 16
61924: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61925: LD_VAR 0 1
61929: PPUSH
61930: LD_VAR 0 2
61934: PPUSH
61935: LD_VAR 0 3
61939: PPUSH
61940: CALL_OW 297
61944: PUSH
61945: LD_VAR 0 5
61949: GREATER
61950: IFFALSE 62029
// begin ComMoveXY ( unit , x , y ) ;
61952: LD_VAR 0 1
61956: PPUSH
61957: LD_VAR 0 2
61961: PPUSH
61962: LD_VAR 0 3
61966: PPUSH
61967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61971: LD_INT 35
61973: PPUSH
61974: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61978: LD_VAR 0 1
61982: PPUSH
61983: LD_VAR 0 2
61987: PPUSH
61988: LD_VAR 0 3
61992: PPUSH
61993: CALL 36812 0 3
61997: NOT
61998: IFFALSE 62002
// exit ;
62000: GO 62256
// until GetDistUnitXY ( unit , x , y ) < dist ;
62002: LD_VAR 0 1
62006: PPUSH
62007: LD_VAR 0 2
62011: PPUSH
62012: LD_VAR 0 3
62016: PPUSH
62017: CALL_OW 297
62021: PUSH
62022: LD_VAR 0 5
62026: LESS
62027: IFFALSE 61971
// end ; ComTurnXY ( unit , x , y ) ;
62029: LD_VAR 0 1
62033: PPUSH
62034: LD_VAR 0 2
62038: PPUSH
62039: LD_VAR 0 3
62043: PPUSH
62044: CALL_OW 118
// wait ( 5 ) ;
62048: LD_INT 5
62050: PPUSH
62051: CALL_OW 67
// _d := GetDir ( unit ) ;
62055: LD_ADDR_VAR 0 10
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: CALL_OW 254
62069: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62070: LD_ADDR_VAR 0 8
62074: PUSH
62075: LD_VAR 0 1
62079: PPUSH
62080: CALL_OW 250
62084: PPUSH
62085: LD_VAR 0 10
62089: PPUSH
62090: LD_VAR 0 5
62094: PPUSH
62095: CALL_OW 272
62099: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62100: LD_ADDR_VAR 0 9
62104: PUSH
62105: LD_VAR 0 1
62109: PPUSH
62110: CALL_OW 251
62114: PPUSH
62115: LD_VAR 0 10
62119: PPUSH
62120: LD_VAR 0 5
62124: PPUSH
62125: CALL_OW 273
62129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62130: LD_VAR 0 8
62134: PPUSH
62135: LD_VAR 0 9
62139: PPUSH
62140: CALL_OW 488
62144: NOT
62145: IFFALSE 62149
// exit ;
62147: GO 62256
// ComAnimCustom ( unit , 1 ) ;
62149: LD_VAR 0 1
62153: PPUSH
62154: LD_INT 1
62156: PPUSH
62157: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62161: LD_VAR 0 8
62165: PPUSH
62166: LD_VAR 0 9
62170: PPUSH
62171: LD_VAR 0 6
62175: PPUSH
62176: LD_VAR 0 7
62180: PPUSH
62181: CALL_OW 330
// repeat wait ( 1 ) ;
62185: LD_INT 1
62187: PPUSH
62188: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62192: LD_VAR 0 1
62196: PPUSH
62197: CALL_OW 316
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 314
62211: OR
62212: PUSH
62213: LD_VAR 0 1
62217: PPUSH
62218: CALL_OW 302
62222: NOT
62223: OR
62224: PUSH
62225: LD_VAR 0 1
62229: PPUSH
62230: CALL_OW 301
62234: OR
62235: IFFALSE 62185
// RemoveSeeing ( _x , _y , side ) ;
62237: LD_VAR 0 8
62241: PPUSH
62242: LD_VAR 0 9
62246: PPUSH
62247: LD_VAR 0 6
62251: PPUSH
62252: CALL_OW 331
// end ;
62256: LD_VAR 0 4
62260: RET
