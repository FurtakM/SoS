// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42461 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42461 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42461 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6852 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9590 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9590 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38709 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38837 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 39018 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 38938 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42461 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42461 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42461 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 63714 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 63772 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42461 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42433 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42433 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 57
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 69
2534: IFFALSE 2485
// DialogueOn ;
2536: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2540: LD_EXP 18
2544: PPUSH
2545: LD_STRING DL-Intro-18
2547: PPUSH
2548: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2552: LD_EXP 18
2556: PPUSH
2557: LD_STRING DL-Intro-19
2559: PPUSH
2560: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2564: LD_EXP 18
2568: PPUSH
2569: LD_STRING DL-Intro-20
2571: PPUSH
2572: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_STRING DLt-Intro-21
2583: PPUSH
2584: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2588: LD_EXP 20
2592: PPUSH
2593: LD_STRING DLt-Intro-22
2595: PPUSH
2596: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2600: LD_EXP 20
2604: PPUSH
2605: LD_STRING DLt-Intro-23
2607: PPUSH
2608: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2612: LD_EXP 18
2616: PPUSH
2617: LD_STRING DL-Intro-24
2619: PPUSH
2620: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2624: LD_EXP 20
2628: PPUSH
2629: LD_STRING DLt-Intro-25
2631: PPUSH
2632: CALL_OW 88
// DialogueOff ;
2636: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2640: LD_STRING M2
2642: PPUSH
2643: CALL_OW 337
// Query ( Prepare ) ;
2647: LD_STRING Prepare
2649: PPUSH
2650: CALL_OW 97
// SaveForQuickRestart ;
2654: CALL_OW 22
// end ;
2658: LD_VAR 0 1
2662: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2663: LD_INT 22
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 15
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: IFFALSE 2708
2693: GO 2695
2695: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2696: LD_EXP 18
2700: PPUSH
2701: LD_STRING DL-Cam-1
2703: PPUSH
2704: CALL_OW 88
2708: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2709: LD_OWVAR 1
2713: PUSH
2714: LD_EXP 4
2718: PUSH
2719: LD_INT 2
2721: DIV
2722: GREATEREQUAL
2723: IFFALSE 2748
2725: GO 2727
2727: DISABLE
// begin DialogueOn ;
2728: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2732: LD_EXP 18
2736: PPUSH
2737: LD_STRING DL-Faster-1
2739: PPUSH
2740: CALL_OW 88
// DialogueOff ;
2744: CALL_OW 7
// end ;
2748: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2749: LD_OWVAR 1
2753: PUSH
2754: LD_EXP 4
2758: PUSH
2759: LD_INT 2
2761: DIV
2762: PUSH
2763: LD_INT 10500
2765: PLUS
2766: GREATEREQUAL
2767: IFFALSE 2792
2769: GO 2771
2771: DISABLE
// begin DialogueOn ;
2772: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2776: LD_EXP 18
2780: PPUSH
2781: LD_STRING DL-Faster-2
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// end ;
2792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2793: LD_INT 22
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 57
2808: PUSH
2809: EMPTY
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 2
2818: PUSH
2819: LD_INT 30
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: PUSH
2865: LD_INT 22
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 3
2877: PUSH
2878: LD_INT 57
2880: PUSH
2881: EMPTY
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 30
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: PPUSH
2903: CALL_OW 69
2907: AND
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 3
2921: PUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 30
2934: PUSH
2935: LD_INT 32
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: PPUSH
2947: CALL_OW 69
2951: PUSH
2952: LD_INT 3
2954: GREATEREQUAL
2955: AND
2956: PUSH
2957: LD_INT 22
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 3
2969: PUSH
2970: LD_INT 57
2972: PUSH
2973: EMPTY
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 30
2982: PUSH
2983: LD_INT 5
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_INT 22
3003: PUSH
3004: LD_INT 2
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 3
3013: PUSH
3014: LD_INT 57
3016: PUSH
3017: EMPTY
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 30
3026: PUSH
3027: LD_INT 30
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: AND
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 2
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 3
3057: PUSH
3058: LD_INT 57
3060: PUSH
3061: EMPTY
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: LD_INT 30
3073: PUSH
3074: LD_INT 26
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_INT 30
3083: PUSH
3084: LD_INT 28
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PPUSH
3101: CALL_OW 69
3105: AND
3106: IFFALSE 3143
3108: GO 3110
3110: DISABLE
// begin if tick <= 10 10$00 then
3111: LD_OWVAR 1
3115: PUSH
3116: LD_INT 21000
3118: LESSEQUAL
3119: IFFALSE 3128
// SetAchievement ( ACH_BOB ) ;
3121: LD_STRING ACH_BOB
3123: PPUSH
3124: CALL_OW 543
// baseDone := true ;
3128: LD_ADDR_EXP 5
3132: PUSH
3133: LD_INT 1
3135: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3136: LD_STRING M1out
3138: PPUSH
3139: CALL_OW 337
// end ;
3143: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3144: LD_EXP 5
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 21
3161: PUSH
3162: LD_INT 2
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 34
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 34
3187: PUSH
3188: LD_INT 88
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 22
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 21
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 23
3236: PUSH
3237: LD_INT 2
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 69
3253: PPUSH
3254: CALL 6852 0 1
3258: GREATEREQUAL
3259: AND
3260: IFFALSE 3352
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3269: LD_EXP 18
3273: PPUSH
3274: LD_STRING DL-Ready-1
3276: PPUSH
3277: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3281: LD_INT 22
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 23
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: IFFALSE 3323
// Say ( Schulz , DL-Ready-2 ) ;
3311: LD_EXP 18
3315: PPUSH
3316: LD_STRING DL-Ready-2
3318: PPUSH
3319: CALL_OW 88
// DialogueOff ;
3323: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3327: LD_STRING M3
3329: PPUSH
3330: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3334: LD_INT 7
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: CALL_OW 424
// canGo := true ;
3344: LD_ADDR_EXP 6
3348: PUSH
3349: LD_INT 1
3351: ST_TO_ADDR
// end ;
3352: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3353: LD_EXP 6
3357: PUSH
3358: LD_INT 7
3360: PPUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 2
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 21
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 33
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: LD_INT 58
3396: PUSH
3397: EMPTY
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: PPUSH
3410: CALL_OW 70
3414: PPUSH
3415: CALL 6852 0 1
3419: PUSH
3420: LD_INT 22
3422: PUSH
3423: LD_INT 2
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 21
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 23
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PPUSH
3460: CALL 6852 0 1
3464: GREATEREQUAL
3465: AND
3466: PUSH
3467: LD_INT 22
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 21
3479: PUSH
3480: LD_INT 1
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 55
3492: PUSH
3493: EMPTY
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 23
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PPUSH
3516: CALL_OW 69
3520: PPUSH
3521: CALL 6852 0 1
3525: PUSH
3526: LD_INT 0
3528: EQUAL
3529: AND
3530: IFFALSE 4604
3532: GO 3534
3534: DISABLE
3535: LD_INT 0
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
// begin enable ;
3542: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_INT 7
3550: PPUSH
3551: LD_INT 22
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 21
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 2
3587: PUSH
3588: LD_INT 34
3590: PUSH
3591: LD_INT 88
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 34
3600: PUSH
3601: LD_INT 32
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 72
3617: IFFALSE 3628
// begin Query ( InvalidWeapon ) ;
3619: LD_STRING InvalidWeapon
3621: PPUSH
3622: CALL_OW 97
// exit ;
3626: GO 4604
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_INT 3
3635: PUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 72
3654: IFFALSE 3665
// begin Query ( HealthLevel ) ;
3656: LD_STRING HealthLevel
3658: PPUSH
3659: CALL_OW 97
// exit ;
3663: GO 4604
// end ; for i in tmp do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: LD_VAR 0 2
3674: PUSH
3675: FOR_IN
3676: IFFALSE 3721
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 262
3687: PUSH
3688: LD_INT 1
3690: EQUAL
3691: PUSH
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 261
3701: PUSH
3702: LD_INT 60
3704: LESS
3705: AND
3706: IFFALSE 3719
// begin Query ( FuelLevel ) ;
3708: LD_STRING FuelLevel
3710: PPUSH
3711: CALL_OW 97
// exit ;
3715: POP
3716: POP
3717: GO 4604
// end ;
3719: GO 3675
3721: POP
3722: POP
// disable ;
3723: DISABLE
// saveVehicles := [ ] ;
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: EMPTY
3730: ST_TO_ADDR
// for i in tmp do
3731: LD_ADDR_VAR 0 1
3735: PUSH
3736: LD_VAR 0 2
3740: PUSH
3741: FOR_IN
3742: IFFALSE 3851
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 265
3763: PUSH
3764: LD_VAR 0 1
3768: PPUSH
3769: CALL_OW 262
3773: PUSH
3774: LD_VAR 0 1
3778: PPUSH
3779: CALL_OW 263
3783: PUSH
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 264
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 248
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 261
3813: PUSH
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 271
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 311
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL 42461 0 2
3848: ST_TO_ADDR
3849: GO 3741
3851: POP
3852: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 21
3870: PUSH
3871: LD_INT 2
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 50
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: PUSH
3894: LD_VAR 0 2
3898: DIFF
3899: ST_TO_ADDR
// if otherVehicles then
3900: LD_VAR 0 4
3904: IFFALSE 4080
// begin tmp := [ ] ;
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: EMPTY
3912: ST_TO_ADDR
// for i in otherVehicles do
3913: LD_ADDR_VAR 0 1
3917: PUSH
3918: LD_VAR 0 4
3922: PUSH
3923: FOR_IN
3924: IFFALSE 4066
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: LD_VAR 0 2
3935: PPUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 265
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 262
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 263
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: CALL_OW 264
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 248
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 261
3995: PUSH
3996: LD_VAR 0 1
4000: PPUSH
4001: CALL_OW 271
4005: PUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: CALL_OW 250
4015: PUSH
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 251
4025: PUSH
4026: LD_VAR 0 1
4030: PPUSH
4031: CALL_OW 254
4035: PUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 256
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL 42461 0 2
4063: ST_TO_ADDR
4064: GO 3923
4066: POP
4067: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_STRING 09_otherVehicles
4075: PPUSH
4076: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) and UnitFilter ( saveVehicles , [ f_engine , engine_siberite ] ) then
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 1
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 72
4099: NOT
4100: PUSH
4101: LD_VAR 0 3
4105: PPUSH
4106: LD_INT 32
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 72
4120: AND
4121: IFFALSE 4130
// SetAchievement ( ACH_GREEN ) ;
4123: LD_STRING ACH_GREEN
4125: PPUSH
4126: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4130: LD_EXP 18
4134: PPUSH
4135: LD_STRING 09_Schulz
4137: PPUSH
4138: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4142: LD_EXP 18
4146: PPUSH
4147: LD_STRING 09_Schulz_ID
4149: PPUSH
4150: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4154: LD_EXP 20
4158: PPUSH
4159: LD_STRING 09_Lemmy
4161: PPUSH
4162: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4166: LD_EXP 20
4170: PPUSH
4171: LD_STRING 09_Lemmy_ID
4173: PPUSH
4174: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4178: LD_EXP 22
4182: PPUSH
4183: LD_STRING 09_Nia
4185: PPUSH
4186: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4190: LD_EXP 22
4194: PPUSH
4195: LD_STRING 09_Nia_ID
4197: PPUSH
4198: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4202: LD_EXP 21
4206: PPUSH
4207: LD_STRING 09_Mia
4209: PPUSH
4210: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4214: LD_EXP 21
4218: PPUSH
4219: LD_STRING 09_Mia_ID
4221: PPUSH
4222: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4226: LD_EXP 23
4230: PPUSH
4231: LD_STRING 09_Jenna
4233: PPUSH
4234: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4238: LD_EXP 23
4242: PPUSH
4243: LD_STRING 09_Jenna_ID
4245: PPUSH
4246: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4250: LD_EXP 26
4254: PPUSH
4255: LD_STRING 09_schulzSecondSquad
4257: PPUSH
4258: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4262: LD_ADDR_VAR 0 1
4266: PUSH
4267: DOUBLE
4268: LD_INT 1
4270: DEC
4271: ST_TO_ADDR
4272: LD_EXP 26
4276: PUSH
4277: FOR_TO
4278: IFFALSE 4306
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4280: LD_EXP 26
4284: PUSH
4285: LD_VAR 0 1
4289: ARRAY
4290: PPUSH
4291: LD_STRING 09_random_ID_
4293: PUSH
4294: LD_VAR 0 1
4298: STR
4299: PPUSH
4300: CALL_OW 39
4304: GO 4277
4306: POP
4307: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_STRING 09_vehicles
4315: PPUSH
4316: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4320: LD_OWVAR 1
4324: PPUSH
4325: LD_STRING 09_tick
4327: PPUSH
4328: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4332: LD_INT 6
4334: PPUSH
4335: LD_STRING 09_env
4337: PPUSH
4338: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4342: LD_INT 2
4344: PPUSH
4345: LD_STRING 09_tech
4347: PPUSH
4348: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4352: LD_INT 2
4354: PPUSH
4355: LD_STRING 09_materials
4357: PPUSH
4358: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4362: LD_INT 2
4364: PPUSH
4365: LD_STRING 09_buildings
4367: PPUSH
4368: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4372: LD_INT 22
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 23
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PPUSH
4401: LD_STRING 09_apes
4403: PPUSH
4404: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4408: LD_EXP 4
4412: PPUSH
4413: LD_STRING 09_timeToHeikeDead
4415: PPUSH
4416: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4420: LD_EXP 3
4424: PPUSH
4425: LD_STRING 09_cameras
4427: PPUSH
4428: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 23
4449: PUSH
4450: LD_INT 0
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 50
4459: PUSH
4460: EMPTY
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: ST_TO_ADDR
// if tmp then
4473: LD_VAR 0 2
4477: IFFALSE 4587
// begin animals := [ ] ;
4479: LD_ADDR_VAR 0 5
4483: PUSH
4484: EMPTY
4485: ST_TO_ADDR
// for i in tmp do
4486: LD_ADDR_VAR 0 1
4490: PUSH
4491: LD_VAR 0 2
4495: PUSH
4496: FOR_IN
4497: IFFALSE 4573
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4499: LD_ADDR_VAR 0 5
4503: PUSH
4504: LD_VAR 0 5
4508: PPUSH
4509: LD_VAR 0 1
4513: PPUSH
4514: CALL_OW 257
4518: PUSH
4519: LD_VAR 0 1
4523: PPUSH
4524: CALL_OW 250
4528: PUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: CALL_OW 251
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 254
4548: PUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: CALL_OW 256
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PPUSH
4566: CALL 42461 0 2
4570: ST_TO_ADDR
4571: GO 4496
4573: POP
4574: POP
// SaveVariable ( animals , 09_animals ) ;
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_STRING 09_animals
4582: PPUSH
4583: CALL_OW 39
// end ; wait ( 3 ) ;
4587: LD_INT 3
4589: PPUSH
4590: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4594: LD_INT 1
4596: PPUSH
4597: LD_STRING %2
4599: PPUSH
4600: CALL_OW 340
// end ; end_of_file
4604: PPOPN 5
4606: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4607: LD_OWVAR 1
4611: PUSH
4612: LD_INT 14700
4614: LESS
4615: IFFALSE 4648
4617: GO 4619
4619: DISABLE
// begin enable ;
4620: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4621: LD_INT 1
4623: PPUSH
4624: LD_INT 5
4626: PPUSH
4627: CALL_OW 12
4631: PPUSH
4632: LD_INT 85
4634: PPUSH
4635: LD_INT 44
4637: PPUSH
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL_OW 56
// end ;
4648: END
// every 0 0$29 trigger tick < 20 20$00 do
4649: LD_OWVAR 1
4653: PUSH
4654: LD_INT 42000
4656: LESS
4657: IFFALSE 4728
4659: GO 4661
4661: DISABLE
// begin enable ;
4662: ENABLE
// if Prob ( 50 ) then
4663: LD_INT 50
4665: PPUSH
4666: CALL_OW 13
4670: IFFALSE 4701
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 5
4677: PPUSH
4678: CALL_OW 12
4682: PPUSH
4683: LD_INT 72
4685: PPUSH
4686: LD_INT 109
4688: PPUSH
4689: LD_INT 22
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 56
4699: GO 4728
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4701: LD_INT 1
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 12
4711: PPUSH
4712: LD_INT 140
4714: PPUSH
4715: LD_INT 73
4717: PPUSH
4718: LD_INT 22
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 56
4728: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4729: LD_INT 0
4731: PPUSH
4732: PPUSH
// if exist_mode then
4733: LD_VAR 0 2
4737: IFFALSE 4783
// begin unit := CreateCharacter ( prefix & ident ) ;
4739: LD_ADDR_VAR 0 5
4743: PUSH
4744: LD_VAR 0 3
4748: PUSH
4749: LD_VAR 0 1
4753: STR
4754: PPUSH
4755: CALL_OW 34
4759: ST_TO_ADDR
// if unit then
4760: LD_VAR 0 5
4764: IFFALSE 4781
// DeleteCharacters ( prefix & ident ) ;
4766: LD_VAR 0 3
4770: PUSH
4771: LD_VAR 0 1
4775: STR
4776: PPUSH
4777: CALL_OW 40
// end else
4781: GO 4798
// unit := NewCharacter ( ident ) ;
4783: LD_ADDR_VAR 0 5
4787: PUSH
4788: LD_VAR 0 1
4792: PPUSH
4793: CALL_OW 25
4797: ST_TO_ADDR
// result := unit ;
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_VAR 0 5
4807: ST_TO_ADDR
// end ;
4808: LD_VAR 0 4
4812: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4813: LD_INT 0
4815: PPUSH
4816: PPUSH
// if not side or not nation then
4817: LD_VAR 0 1
4821: NOT
4822: PUSH
4823: LD_VAR 0 2
4827: NOT
4828: OR
4829: IFFALSE 4833
// exit ;
4831: GO 5601
// case nation of nation_american :
4833: LD_VAR 0 2
4837: PUSH
4838: LD_INT 1
4840: DOUBLE
4841: EQUAL
4842: IFTRUE 4846
4844: GO 5060
4846: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4847: LD_ADDR_VAR 0 4
4851: PUSH
4852: LD_INT 35
4854: PUSH
4855: LD_INT 45
4857: PUSH
4858: LD_INT 46
4860: PUSH
4861: LD_INT 47
4863: PUSH
4864: LD_INT 82
4866: PUSH
4867: LD_INT 83
4869: PUSH
4870: LD_INT 84
4872: PUSH
4873: LD_INT 85
4875: PUSH
4876: LD_INT 86
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: LD_INT 2
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 15
4890: PUSH
4891: LD_INT 16
4893: PUSH
4894: LD_INT 7
4896: PUSH
4897: LD_INT 12
4899: PUSH
4900: LD_INT 13
4902: PUSH
4903: LD_INT 10
4905: PUSH
4906: LD_INT 14
4908: PUSH
4909: LD_INT 20
4911: PUSH
4912: LD_INT 21
4914: PUSH
4915: LD_INT 22
4917: PUSH
4918: LD_INT 25
4920: PUSH
4921: LD_INT 32
4923: PUSH
4924: LD_INT 27
4926: PUSH
4927: LD_INT 36
4929: PUSH
4930: LD_INT 69
4932: PUSH
4933: LD_INT 39
4935: PUSH
4936: LD_INT 34
4938: PUSH
4939: LD_INT 40
4941: PUSH
4942: LD_INT 48
4944: PUSH
4945: LD_INT 49
4947: PUSH
4948: LD_INT 50
4950: PUSH
4951: LD_INT 51
4953: PUSH
4954: LD_INT 52
4956: PUSH
4957: LD_INT 53
4959: PUSH
4960: LD_INT 54
4962: PUSH
4963: LD_INT 55
4965: PUSH
4966: LD_INT 56
4968: PUSH
4969: LD_INT 57
4971: PUSH
4972: LD_INT 58
4974: PUSH
4975: LD_INT 59
4977: PUSH
4978: LD_INT 60
4980: PUSH
4981: LD_INT 61
4983: PUSH
4984: LD_INT 62
4986: PUSH
4987: LD_INT 80
4989: PUSH
4990: LD_INT 82
4992: PUSH
4993: LD_INT 83
4995: PUSH
4996: LD_INT 84
4998: PUSH
4999: LD_INT 85
5001: PUSH
5002: LD_INT 86
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: ST_TO_ADDR
5058: GO 5525
5060: LD_INT 2
5062: DOUBLE
5063: EQUAL
5064: IFTRUE 5068
5066: GO 5294
5068: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5069: LD_ADDR_VAR 0 4
5073: PUSH
5074: LD_INT 35
5076: PUSH
5077: LD_INT 45
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 47
5085: PUSH
5086: LD_INT 82
5088: PUSH
5089: LD_INT 83
5091: PUSH
5092: LD_INT 84
5094: PUSH
5095: LD_INT 85
5097: PUSH
5098: LD_INT 87
5100: PUSH
5101: LD_INT 70
5103: PUSH
5104: LD_INT 1
5106: PUSH
5107: LD_INT 11
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: LD_INT 4
5115: PUSH
5116: LD_INT 5
5118: PUSH
5119: LD_INT 6
5121: PUSH
5122: LD_INT 15
5124: PUSH
5125: LD_INT 18
5127: PUSH
5128: LD_INT 7
5130: PUSH
5131: LD_INT 17
5133: PUSH
5134: LD_INT 8
5136: PUSH
5137: LD_INT 20
5139: PUSH
5140: LD_INT 21
5142: PUSH
5143: LD_INT 22
5145: PUSH
5146: LD_INT 72
5148: PUSH
5149: LD_INT 26
5151: PUSH
5152: LD_INT 69
5154: PUSH
5155: LD_INT 39
5157: PUSH
5158: LD_INT 40
5160: PUSH
5161: LD_INT 41
5163: PUSH
5164: LD_INT 42
5166: PUSH
5167: LD_INT 43
5169: PUSH
5170: LD_INT 48
5172: PUSH
5173: LD_INT 49
5175: PUSH
5176: LD_INT 50
5178: PUSH
5179: LD_INT 51
5181: PUSH
5182: LD_INT 52
5184: PUSH
5185: LD_INT 53
5187: PUSH
5188: LD_INT 54
5190: PUSH
5191: LD_INT 55
5193: PUSH
5194: LD_INT 56
5196: PUSH
5197: LD_INT 60
5199: PUSH
5200: LD_INT 61
5202: PUSH
5203: LD_INT 62
5205: PUSH
5206: LD_INT 66
5208: PUSH
5209: LD_INT 67
5211: PUSH
5212: LD_INT 68
5214: PUSH
5215: LD_INT 81
5217: PUSH
5218: LD_INT 82
5220: PUSH
5221: LD_INT 83
5223: PUSH
5224: LD_INT 84
5226: PUSH
5227: LD_INT 85
5229: PUSH
5230: LD_INT 87
5232: PUSH
5233: LD_INT 88
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: ST_TO_ADDR
5292: GO 5525
5294: LD_INT 3
5296: DOUBLE
5297: EQUAL
5298: IFTRUE 5302
5300: GO 5524
5302: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5303: LD_ADDR_VAR 0 4
5307: PUSH
5308: LD_INT 46
5310: PUSH
5311: LD_INT 47
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: LD_INT 2
5319: PUSH
5320: LD_INT 82
5322: PUSH
5323: LD_INT 83
5325: PUSH
5326: LD_INT 84
5328: PUSH
5329: LD_INT 85
5331: PUSH
5332: LD_INT 86
5334: PUSH
5335: LD_INT 11
5337: PUSH
5338: LD_INT 9
5340: PUSH
5341: LD_INT 20
5343: PUSH
5344: LD_INT 19
5346: PUSH
5347: LD_INT 21
5349: PUSH
5350: LD_INT 24
5352: PUSH
5353: LD_INT 22
5355: PUSH
5356: LD_INT 25
5358: PUSH
5359: LD_INT 28
5361: PUSH
5362: LD_INT 29
5364: PUSH
5365: LD_INT 30
5367: PUSH
5368: LD_INT 31
5370: PUSH
5371: LD_INT 37
5373: PUSH
5374: LD_INT 38
5376: PUSH
5377: LD_INT 32
5379: PUSH
5380: LD_INT 27
5382: PUSH
5383: LD_INT 33
5385: PUSH
5386: LD_INT 69
5388: PUSH
5389: LD_INT 39
5391: PUSH
5392: LD_INT 34
5394: PUSH
5395: LD_INT 40
5397: PUSH
5398: LD_INT 71
5400: PUSH
5401: LD_INT 23
5403: PUSH
5404: LD_INT 44
5406: PUSH
5407: LD_INT 48
5409: PUSH
5410: LD_INT 49
5412: PUSH
5413: LD_INT 50
5415: PUSH
5416: LD_INT 51
5418: PUSH
5419: LD_INT 52
5421: PUSH
5422: LD_INT 53
5424: PUSH
5425: LD_INT 54
5427: PUSH
5428: LD_INT 55
5430: PUSH
5431: LD_INT 56
5433: PUSH
5434: LD_INT 57
5436: PUSH
5437: LD_INT 58
5439: PUSH
5440: LD_INT 59
5442: PUSH
5443: LD_INT 63
5445: PUSH
5446: LD_INT 64
5448: PUSH
5449: LD_INT 65
5451: PUSH
5452: LD_INT 82
5454: PUSH
5455: LD_INT 83
5457: PUSH
5458: LD_INT 84
5460: PUSH
5461: LD_INT 85
5463: PUSH
5464: LD_INT 86
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: ST_TO_ADDR
5522: GO 5525
5524: POP
// if state > - 1 and state < 3 then
5525: LD_VAR 0 3
5529: PUSH
5530: LD_INT 1
5532: NEG
5533: GREATER
5534: PUSH
5535: LD_VAR 0 3
5539: PUSH
5540: LD_INT 3
5542: LESS
5543: AND
5544: IFFALSE 5601
// for i in result do
5546: LD_ADDR_VAR 0 5
5550: PUSH
5551: LD_VAR 0 4
5555: PUSH
5556: FOR_IN
5557: IFFALSE 5599
// if GetTech ( i , side ) <> state then
5559: LD_VAR 0 5
5563: PPUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 321
5573: PUSH
5574: LD_VAR 0 3
5578: NONEQUAL
5579: IFFALSE 5597
// result := result diff i ;
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: LD_VAR 0 4
5590: PUSH
5591: LD_VAR 0 5
5595: DIFF
5596: ST_TO_ADDR
5597: GO 5556
5599: POP
5600: POP
// end ;
5601: LD_VAR 0 4
5605: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5606: LD_INT 0
5608: PPUSH
5609: PPUSH
5610: PPUSH
// result := true ;
5611: LD_ADDR_VAR 0 3
5615: PUSH
5616: LD_INT 1
5618: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5619: LD_ADDR_VAR 0 5
5623: PUSH
5624: LD_VAR 0 2
5628: PPUSH
5629: CALL_OW 480
5633: ST_TO_ADDR
// if not tmp then
5634: LD_VAR 0 5
5638: NOT
5639: IFFALSE 5643
// exit ;
5641: GO 5692
// for i in tmp do
5643: LD_ADDR_VAR 0 4
5647: PUSH
5648: LD_VAR 0 5
5652: PUSH
5653: FOR_IN
5654: IFFALSE 5690
// if GetTech ( i , side ) <> state_researched then
5656: LD_VAR 0 4
5660: PPUSH
5661: LD_VAR 0 1
5665: PPUSH
5666: CALL_OW 321
5670: PUSH
5671: LD_INT 2
5673: NONEQUAL
5674: IFFALSE 5688
// begin result := false ;
5676: LD_ADDR_VAR 0 3
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// exit ;
5684: POP
5685: POP
5686: GO 5692
// end ;
5688: GO 5653
5690: POP
5691: POP
// end ;
5692: LD_VAR 0 3
5696: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5697: LD_INT 0
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
5706: PPUSH
5707: PPUSH
5708: PPUSH
5709: PPUSH
5710: PPUSH
5711: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5712: LD_VAR 0 1
5716: NOT
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 257
5727: PUSH
5728: LD_INT 9
5730: NONEQUAL
5731: OR
5732: IFFALSE 5736
// exit ;
5734: GO 6309
// side := GetSide ( unit ) ;
5736: LD_ADDR_VAR 0 9
5740: PUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 255
5750: ST_TO_ADDR
// tech_space := tech_spacanom ;
5751: LD_ADDR_VAR 0 12
5755: PUSH
5756: LD_INT 29
5758: ST_TO_ADDR
// tech_time := tech_taurad ;
5759: LD_ADDR_VAR 0 13
5763: PUSH
5764: LD_INT 28
5766: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5767: LD_ADDR_VAR 0 11
5771: PUSH
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL_OW 310
5781: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5782: LD_VAR 0 11
5786: PPUSH
5787: CALL_OW 247
5791: PUSH
5792: LD_INT 2
5794: EQUAL
5795: IFFALSE 5799
// exit ;
5797: GO 6309
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5799: LD_ADDR_VAR 0 8
5803: PUSH
5804: LD_INT 81
5806: PUSH
5807: LD_VAR 0 9
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 21
5821: PUSH
5822: LD_INT 3
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: ST_TO_ADDR
// if not tmp then
5842: LD_VAR 0 8
5846: NOT
5847: IFFALSE 5851
// exit ;
5849: GO 6309
// if in_unit then
5851: LD_VAR 0 11
5855: IFFALSE 5879
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5857: LD_ADDR_VAR 0 10
5861: PUSH
5862: LD_VAR 0 8
5866: PPUSH
5867: LD_VAR 0 11
5871: PPUSH
5872: CALL_OW 74
5876: ST_TO_ADDR
5877: GO 5899
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5879: LD_ADDR_VAR 0 10
5883: PUSH
5884: LD_VAR 0 8
5888: PPUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 74
5898: ST_TO_ADDR
// if not enemy then
5899: LD_VAR 0 10
5903: NOT
5904: IFFALSE 5908
// exit ;
5906: GO 6309
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5908: LD_VAR 0 11
5912: PUSH
5913: LD_VAR 0 11
5917: PPUSH
5918: LD_VAR 0 10
5922: PPUSH
5923: CALL_OW 296
5927: PUSH
5928: LD_INT 13
5930: GREATER
5931: AND
5932: PUSH
5933: LD_VAR 0 1
5937: PPUSH
5938: LD_VAR 0 10
5942: PPUSH
5943: CALL_OW 296
5947: PUSH
5948: LD_INT 12
5950: GREATER
5951: OR
5952: IFFALSE 5956
// exit ;
5954: GO 6309
// missile := [ 1 ] ;
5956: LD_ADDR_VAR 0 14
5960: PUSH
5961: LD_INT 1
5963: PUSH
5964: EMPTY
5965: LIST
5966: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5967: LD_VAR 0 9
5971: PPUSH
5972: LD_VAR 0 12
5976: PPUSH
5977: CALL_OW 325
5981: IFFALSE 6010
// missile := Replace ( missile , missile + 1 , 2 ) ;
5983: LD_ADDR_VAR 0 14
5987: PUSH
5988: LD_VAR 0 14
5992: PPUSH
5993: LD_VAR 0 14
5997: PUSH
5998: LD_INT 1
6000: PLUS
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: CALL_OW 1
6009: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
6010: LD_VAR 0 9
6014: PPUSH
6015: LD_VAR 0 13
6019: PPUSH
6020: CALL_OW 325
6024: PUSH
6025: LD_VAR 0 10
6029: PPUSH
6030: CALL_OW 255
6034: PPUSH
6035: LD_VAR 0 13
6039: PPUSH
6040: CALL_OW 325
6044: NOT
6045: AND
6046: IFFALSE 6075
// missile := Replace ( missile , missile + 1 , 3 ) ;
6048: LD_ADDR_VAR 0 14
6052: PUSH
6053: LD_VAR 0 14
6057: PPUSH
6058: LD_VAR 0 14
6062: PUSH
6063: LD_INT 1
6065: PLUS
6066: PPUSH
6067: LD_INT 3
6069: PPUSH
6070: CALL_OW 1
6074: ST_TO_ADDR
// if missile < 2 then
6075: LD_VAR 0 14
6079: PUSH
6080: LD_INT 2
6082: LESS
6083: IFFALSE 6087
// exit ;
6085: GO 6309
// x := GetX ( enemy ) ;
6087: LD_ADDR_VAR 0 4
6091: PUSH
6092: LD_VAR 0 10
6096: PPUSH
6097: CALL_OW 250
6101: ST_TO_ADDR
// y := GetY ( enemy ) ;
6102: LD_ADDR_VAR 0 5
6106: PUSH
6107: LD_VAR 0 10
6111: PPUSH
6112: CALL_OW 251
6116: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6117: LD_ADDR_VAR 0 6
6121: PUSH
6122: LD_VAR 0 4
6126: PUSH
6127: LD_INT 1
6129: NEG
6130: PPUSH
6131: LD_INT 1
6133: PPUSH
6134: CALL_OW 12
6138: PLUS
6139: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6140: LD_ADDR_VAR 0 7
6144: PUSH
6145: LD_VAR 0 5
6149: PUSH
6150: LD_INT 1
6152: NEG
6153: PPUSH
6154: LD_INT 1
6156: PPUSH
6157: CALL_OW 12
6161: PLUS
6162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6163: LD_VAR 0 6
6167: PPUSH
6168: LD_VAR 0 7
6172: PPUSH
6173: CALL_OW 488
6177: NOT
6178: IFFALSE 6200
// begin _x := x ;
6180: LD_ADDR_VAR 0 6
6184: PUSH
6185: LD_VAR 0 4
6189: ST_TO_ADDR
// _y := y ;
6190: LD_ADDR_VAR 0 7
6194: PUSH
6195: LD_VAR 0 5
6199: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6200: LD_ADDR_VAR 0 3
6204: PUSH
6205: LD_INT 1
6207: PPUSH
6208: LD_VAR 0 14
6212: PPUSH
6213: CALL_OW 12
6217: ST_TO_ADDR
// case i of 1 :
6218: LD_VAR 0 3
6222: PUSH
6223: LD_INT 1
6225: DOUBLE
6226: EQUAL
6227: IFTRUE 6231
6229: GO 6248
6231: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6232: LD_VAR 0 1
6236: PPUSH
6237: LD_VAR 0 10
6241: PPUSH
6242: CALL_OW 115
6246: GO 6309
6248: LD_INT 2
6250: DOUBLE
6251: EQUAL
6252: IFTRUE 6256
6254: GO 6278
6256: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6257: LD_VAR 0 1
6261: PPUSH
6262: LD_VAR 0 6
6266: PPUSH
6267: LD_VAR 0 7
6271: PPUSH
6272: CALL_OW 153
6276: GO 6309
6278: LD_INT 3
6280: DOUBLE
6281: EQUAL
6282: IFTRUE 6286
6284: GO 6308
6286: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_VAR 0 6
6296: PPUSH
6297: LD_VAR 0 7
6301: PPUSH
6302: CALL_OW 154
6306: GO 6309
6308: POP
// end ;
6309: LD_VAR 0 2
6313: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6314: LD_INT 0
6316: PPUSH
6317: PPUSH
6318: PPUSH
6319: PPUSH
6320: PPUSH
6321: PPUSH
// if not unit or not building then
6322: LD_VAR 0 1
6326: NOT
6327: PUSH
6328: LD_VAR 0 2
6332: NOT
6333: OR
6334: IFFALSE 6338
// exit ;
6336: GO 6496
// x := GetX ( building ) ;
6338: LD_ADDR_VAR 0 5
6342: PUSH
6343: LD_VAR 0 2
6347: PPUSH
6348: CALL_OW 250
6352: ST_TO_ADDR
// y := GetY ( building ) ;
6353: LD_ADDR_VAR 0 6
6357: PUSH
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL_OW 251
6367: ST_TO_ADDR
// for i = 0 to 5 do
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: DOUBLE
6374: LD_INT 0
6376: DEC
6377: ST_TO_ADDR
6378: LD_INT 5
6380: PUSH
6381: FOR_TO
6382: IFFALSE 6494
// begin _x := ShiftX ( x , i , 3 ) ;
6384: LD_ADDR_VAR 0 7
6388: PUSH
6389: LD_VAR 0 5
6393: PPUSH
6394: LD_VAR 0 4
6398: PPUSH
6399: LD_INT 3
6401: PPUSH
6402: CALL_OW 272
6406: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6407: LD_ADDR_VAR 0 8
6411: PUSH
6412: LD_VAR 0 6
6416: PPUSH
6417: LD_VAR 0 4
6421: PPUSH
6422: LD_INT 3
6424: PPUSH
6425: CALL_OW 273
6429: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6430: LD_VAR 0 7
6434: PPUSH
6435: LD_VAR 0 8
6439: PPUSH
6440: CALL_OW 488
6444: NOT
6445: IFFALSE 6449
// continue ;
6447: GO 6381
// if HexInfo ( _x , _y ) = 0 then
6449: LD_VAR 0 7
6453: PPUSH
6454: LD_VAR 0 8
6458: PPUSH
6459: CALL_OW 428
6463: PUSH
6464: LD_INT 0
6466: EQUAL
6467: IFFALSE 6492
// begin ComMoveXY ( unit , _x , _y ) ;
6469: LD_VAR 0 1
6473: PPUSH
6474: LD_VAR 0 7
6478: PPUSH
6479: LD_VAR 0 8
6483: PPUSH
6484: CALL_OW 111
// exit ;
6488: POP
6489: POP
6490: GO 6496
// end ; end ;
6492: GO 6381
6494: POP
6495: POP
// end ;
6496: LD_VAR 0 3
6500: RET
// export function ScanBase ( side , base_area ) ; begin
6501: LD_INT 0
6503: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6504: LD_ADDR_VAR 0 3
6508: PUSH
6509: LD_VAR 0 2
6513: PPUSH
6514: LD_INT 81
6516: PUSH
6517: LD_VAR 0 1
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 70
6530: ST_TO_ADDR
// end ;
6531: LD_VAR 0 3
6535: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6536: LD_INT 0
6538: PPUSH
6539: PPUSH
6540: PPUSH
6541: PPUSH
// result := false ;
6542: LD_ADDR_VAR 0 2
6546: PUSH
6547: LD_INT 0
6549: ST_TO_ADDR
// side := GetSide ( unit ) ;
6550: LD_ADDR_VAR 0 3
6554: PUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 255
6564: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6565: LD_ADDR_VAR 0 4
6569: PUSH
6570: LD_VAR 0 1
6574: PPUSH
6575: CALL_OW 248
6579: ST_TO_ADDR
// case nat of 1 :
6580: LD_VAR 0 4
6584: PUSH
6585: LD_INT 1
6587: DOUBLE
6588: EQUAL
6589: IFTRUE 6593
6591: GO 6604
6593: POP
// tech := tech_lassight ; 2 :
6594: LD_ADDR_VAR 0 5
6598: PUSH
6599: LD_INT 12
6601: ST_TO_ADDR
6602: GO 6643
6604: LD_INT 2
6606: DOUBLE
6607: EQUAL
6608: IFTRUE 6612
6610: GO 6623
6612: POP
// tech := tech_mortar ; 3 :
6613: LD_ADDR_VAR 0 5
6617: PUSH
6618: LD_INT 41
6620: ST_TO_ADDR
6621: GO 6643
6623: LD_INT 3
6625: DOUBLE
6626: EQUAL
6627: IFTRUE 6631
6629: GO 6642
6631: POP
// tech := tech_bazooka ; end ;
6632: LD_ADDR_VAR 0 5
6636: PUSH
6637: LD_INT 44
6639: ST_TO_ADDR
6640: GO 6643
6642: POP
// if Researched ( side , tech ) then
6643: LD_VAR 0 3
6647: PPUSH
6648: LD_VAR 0 5
6652: PPUSH
6653: CALL_OW 325
6657: IFFALSE 6684
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6659: LD_ADDR_VAR 0 2
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: LD_INT 8
6669: PUSH
6670: LD_INT 9
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: LD_VAR 0 4
6682: ARRAY
6683: ST_TO_ADDR
// end ;
6684: LD_VAR 0 2
6688: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6689: LD_INT 0
6691: PPUSH
6692: PPUSH
6693: PPUSH
// if not mines then
6694: LD_VAR 0 2
6698: NOT
6699: IFFALSE 6703
// exit ;
6701: GO 6847
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6703: LD_ADDR_VAR 0 5
6707: PUSH
6708: LD_INT 81
6710: PUSH
6711: LD_VAR 0 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: LD_INT 3
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PPUSH
6741: CALL_OW 69
6745: ST_TO_ADDR
// for i in mines do
6746: LD_ADDR_VAR 0 4
6750: PUSH
6751: LD_VAR 0 2
6755: PUSH
6756: FOR_IN
6757: IFFALSE 6845
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6759: LD_VAR 0 4
6763: PUSH
6764: LD_INT 1
6766: ARRAY
6767: PPUSH
6768: LD_VAR 0 4
6772: PUSH
6773: LD_INT 2
6775: ARRAY
6776: PPUSH
6777: CALL_OW 458
6781: NOT
6782: IFFALSE 6786
// continue ;
6784: GO 6756
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6786: LD_VAR 0 4
6790: PUSH
6791: LD_INT 1
6793: ARRAY
6794: PPUSH
6795: LD_VAR 0 4
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 428
6808: PUSH
6809: LD_VAR 0 5
6813: IN
6814: IFFALSE 6843
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6816: LD_VAR 0 4
6820: PUSH
6821: LD_INT 1
6823: ARRAY
6824: PPUSH
6825: LD_VAR 0 4
6829: PUSH
6830: LD_INT 2
6832: ARRAY
6833: PPUSH
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 456
// end ;
6843: GO 6756
6845: POP
6846: POP
// end ;
6847: LD_VAR 0 3
6851: RET
// export function Count ( array ) ; begin
6852: LD_INT 0
6854: PPUSH
// result := array + 0 ;
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_VAR 0 1
6864: PUSH
6865: LD_INT 0
6867: PLUS
6868: ST_TO_ADDR
// end ;
6869: LD_VAR 0 2
6873: RET
// export function IsEmpty ( building ) ; begin
6874: LD_INT 0
6876: PPUSH
// if not building then
6877: LD_VAR 0 1
6881: NOT
6882: IFFALSE 6886
// exit ;
6884: GO 6929
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6886: LD_ADDR_VAR 0 2
6890: PUSH
6891: LD_VAR 0 1
6895: PUSH
6896: LD_INT 22
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 255
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 58
6915: PUSH
6916: EMPTY
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PPUSH
6923: CALL_OW 69
6927: IN
6928: ST_TO_ADDR
// end ;
6929: LD_VAR 0 2
6933: RET
// export function IsNotFull ( building ) ; var places ; begin
6934: LD_INT 0
6936: PPUSH
6937: PPUSH
// if not building then
6938: LD_VAR 0 1
6942: NOT
6943: IFFALSE 6947
// exit ;
6945: GO 6975
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
6947: LD_ADDR_VAR 0 2
6951: PUSH
6952: LD_VAR 0 1
6956: PPUSH
6957: LD_INT 3
6959: PUSH
6960: LD_INT 62
6962: PUSH
6963: EMPTY
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 72
6974: ST_TO_ADDR
// end ;
6975: LD_VAR 0 2
6979: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6980: LD_INT 0
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
// tmp := [ ] ;
6986: LD_ADDR_VAR 0 3
6990: PUSH
6991: EMPTY
6992: ST_TO_ADDR
// list := [ ] ;
6993: LD_ADDR_VAR 0 5
6997: PUSH
6998: EMPTY
6999: ST_TO_ADDR
// for i = 16 to 25 do
7000: LD_ADDR_VAR 0 4
7004: PUSH
7005: DOUBLE
7006: LD_INT 16
7008: DEC
7009: ST_TO_ADDR
7010: LD_INT 25
7012: PUSH
7013: FOR_TO
7014: IFFALSE 7087
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7016: LD_ADDR_VAR 0 3
7020: PUSH
7021: LD_VAR 0 3
7025: PUSH
7026: LD_INT 22
7028: PUSH
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 255
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 91
7045: PUSH
7046: LD_VAR 0 1
7050: PUSH
7051: LD_INT 6
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 30
7061: PUSH
7062: LD_VAR 0 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: PPUSH
7079: CALL_OW 69
7083: ADD
7084: ST_TO_ADDR
7085: GO 7013
7087: POP
7088: POP
// for i = 1 to tmp do
7089: LD_ADDR_VAR 0 4
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_VAR 0 3
7103: PUSH
7104: FOR_TO
7105: IFFALSE 7193
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7107: LD_ADDR_VAR 0 5
7111: PUSH
7112: LD_VAR 0 5
7116: PUSH
7117: LD_VAR 0 3
7121: PUSH
7122: LD_VAR 0 4
7126: ARRAY
7127: PPUSH
7128: CALL_OW 266
7132: PUSH
7133: LD_VAR 0 3
7137: PUSH
7138: LD_VAR 0 4
7142: ARRAY
7143: PPUSH
7144: CALL_OW 250
7148: PUSH
7149: LD_VAR 0 3
7153: PUSH
7154: LD_VAR 0 4
7158: ARRAY
7159: PPUSH
7160: CALL_OW 251
7164: PUSH
7165: LD_VAR 0 3
7169: PUSH
7170: LD_VAR 0 4
7174: ARRAY
7175: PPUSH
7176: CALL_OW 254
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: ADD
7190: ST_TO_ADDR
7191: GO 7104
7193: POP
7194: POP
// result := list ;
7195: LD_ADDR_VAR 0 2
7199: PUSH
7200: LD_VAR 0 5
7204: ST_TO_ADDR
// end ;
7205: LD_VAR 0 2
7209: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7210: LD_INT 0
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
// if not factory then
7219: LD_VAR 0 1
7223: NOT
7224: IFFALSE 7228
// exit ;
7226: GO 7821
// if control = control_apeman then
7228: LD_VAR 0 4
7232: PUSH
7233: LD_INT 5
7235: EQUAL
7236: IFFALSE 7345
// begin tmp := UnitsInside ( factory ) ;
7238: LD_ADDR_VAR 0 8
7242: PUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 313
7252: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7253: LD_VAR 0 8
7257: PPUSH
7258: LD_INT 25
7260: PUSH
7261: LD_INT 12
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PPUSH
7268: CALL_OW 72
7272: NOT
7273: IFFALSE 7283
// control := control_manual ;
7275: LD_ADDR_VAR 0 4
7279: PUSH
7280: LD_INT 1
7282: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7283: LD_ADDR_VAR 0 8
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL 6980 0 1
7297: ST_TO_ADDR
// if tmp then
7298: LD_VAR 0 8
7302: IFFALSE 7345
// begin for i in tmp do
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_VAR 0 8
7313: PUSH
7314: FOR_IN
7315: IFFALSE 7343
// if i [ 1 ] = b_ext_radio then
7317: LD_VAR 0 7
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: PUSH
7326: LD_INT 22
7328: EQUAL
7329: IFFALSE 7341
// begin control := control_remote ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_INT 2
7338: ST_TO_ADDR
// break ;
7339: GO 7343
// end ;
7341: GO 7314
7343: POP
7344: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7345: LD_VAR 0 1
7349: PPUSH
7350: LD_VAR 0 2
7354: PPUSH
7355: LD_VAR 0 3
7359: PPUSH
7360: LD_VAR 0 4
7364: PPUSH
7365: LD_VAR 0 5
7369: PPUSH
7370: CALL_OW 448
7374: IFFALSE 7409
// begin result := [ chassis , engine , control , weapon ] ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_VAR 0 3
7390: PUSH
7391: LD_VAR 0 4
7395: PUSH
7396: LD_VAR 0 5
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: ST_TO_ADDR
// exit ;
7407: GO 7821
// end ; _chassis := AvailableChassisList ( factory ) ;
7409: LD_ADDR_VAR 0 9
7413: PUSH
7414: LD_VAR 0 1
7418: PPUSH
7419: CALL_OW 475
7423: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7424: LD_ADDR_VAR 0 11
7428: PUSH
7429: LD_VAR 0 1
7433: PPUSH
7434: CALL_OW 476
7438: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7439: LD_ADDR_VAR 0 12
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 477
7453: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7454: LD_ADDR_VAR 0 10
7458: PUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 478
7468: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7469: LD_VAR 0 9
7473: NOT
7474: PUSH
7475: LD_VAR 0 11
7479: NOT
7480: OR
7481: PUSH
7482: LD_VAR 0 12
7486: NOT
7487: OR
7488: PUSH
7489: LD_VAR 0 10
7493: NOT
7494: OR
7495: IFFALSE 7530
// begin result := [ chassis , engine , control , weapon ] ;
7497: LD_ADDR_VAR 0 6
7501: PUSH
7502: LD_VAR 0 2
7506: PUSH
7507: LD_VAR 0 3
7511: PUSH
7512: LD_VAR 0 4
7516: PUSH
7517: LD_VAR 0 5
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: ST_TO_ADDR
// exit ;
7528: GO 7821
// end ; if not chassis in _chassis then
7530: LD_VAR 0 2
7534: PUSH
7535: LD_VAR 0 9
7539: IN
7540: NOT
7541: IFFALSE 7567
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7543: LD_ADDR_VAR 0 2
7547: PUSH
7548: LD_VAR 0 9
7552: PUSH
7553: LD_INT 1
7555: PPUSH
7556: LD_VAR 0 9
7560: PPUSH
7561: CALL_OW 12
7565: ARRAY
7566: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7567: LD_VAR 0 2
7571: PPUSH
7572: LD_VAR 0 3
7576: PPUSH
7577: CALL 7826 0 2
7581: NOT
7582: IFFALSE 7641
// repeat engine := _engine [ 1 ] ;
7584: LD_ADDR_VAR 0 3
7588: PUSH
7589: LD_VAR 0 11
7593: PUSH
7594: LD_INT 1
7596: ARRAY
7597: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7598: LD_ADDR_VAR 0 11
7602: PUSH
7603: LD_VAR 0 11
7607: PPUSH
7608: LD_INT 1
7610: PPUSH
7611: CALL_OW 3
7615: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7616: LD_VAR 0 2
7620: PPUSH
7621: LD_VAR 0 3
7625: PPUSH
7626: CALL 7826 0 2
7630: PUSH
7631: LD_VAR 0 11
7635: PUSH
7636: EMPTY
7637: EQUAL
7638: OR
7639: IFFALSE 7584
// if not control in _control then
7641: LD_VAR 0 4
7645: PUSH
7646: LD_VAR 0 12
7650: IN
7651: NOT
7652: IFFALSE 7678
// control := _control [ rand ( 1 , _control ) ] ;
7654: LD_ADDR_VAR 0 4
7658: PUSH
7659: LD_VAR 0 12
7663: PUSH
7664: LD_INT 1
7666: PPUSH
7667: LD_VAR 0 12
7671: PPUSH
7672: CALL_OW 12
7676: ARRAY
7677: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7678: LD_VAR 0 2
7682: PPUSH
7683: LD_VAR 0 5
7687: PPUSH
7688: CALL 8046 0 2
7692: NOT
7693: IFFALSE 7752
// repeat weapon := _weapon [ 1 ] ;
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: LD_VAR 0 10
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7709: LD_ADDR_VAR 0 10
7713: PUSH
7714: LD_VAR 0 10
7718: PPUSH
7719: LD_INT 1
7721: PPUSH
7722: CALL_OW 3
7726: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7727: LD_VAR 0 2
7731: PPUSH
7732: LD_VAR 0 5
7736: PPUSH
7737: CALL 8046 0 2
7741: PUSH
7742: LD_VAR 0 10
7746: PUSH
7747: EMPTY
7748: EQUAL
7749: OR
7750: IFFALSE 7695
// result := [ ] ;
7752: LD_ADDR_VAR 0 6
7756: PUSH
7757: EMPTY
7758: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7759: LD_VAR 0 1
7763: PPUSH
7764: LD_VAR 0 2
7768: PPUSH
7769: LD_VAR 0 3
7773: PPUSH
7774: LD_VAR 0 4
7778: PPUSH
7779: LD_VAR 0 5
7783: PPUSH
7784: CALL_OW 448
7788: IFFALSE 7821
// result := [ chassis , engine , control , weapon ] ;
7790: LD_ADDR_VAR 0 6
7794: PUSH
7795: LD_VAR 0 2
7799: PUSH
7800: LD_VAR 0 3
7804: PUSH
7805: LD_VAR 0 4
7809: PUSH
7810: LD_VAR 0 5
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: ST_TO_ADDR
// end ;
7821: LD_VAR 0 6
7825: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7826: LD_INT 0
7828: PPUSH
// if not chassis or not engine then
7829: LD_VAR 0 1
7833: NOT
7834: PUSH
7835: LD_VAR 0 2
7839: NOT
7840: OR
7841: IFFALSE 7845
// exit ;
7843: GO 8041
// case engine of engine_solar :
7845: LD_VAR 0 2
7849: PUSH
7850: LD_INT 2
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 7896
7858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7859: LD_ADDR_VAR 0 3
7863: PUSH
7864: LD_INT 11
7866: PUSH
7867: LD_INT 12
7869: PUSH
7870: LD_INT 13
7872: PUSH
7873: LD_INT 14
7875: PUSH
7876: LD_INT 1
7878: PUSH
7879: LD_INT 2
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 8025
7896: LD_INT 1
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 7966
7904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7905: LD_ADDR_VAR 0 3
7909: PUSH
7910: LD_INT 11
7912: PUSH
7913: LD_INT 12
7915: PUSH
7916: LD_INT 13
7918: PUSH
7919: LD_INT 14
7921: PUSH
7922: LD_INT 1
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: LD_INT 4
7933: PUSH
7934: LD_INT 5
7936: PUSH
7937: LD_INT 21
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: ST_TO_ADDR
7964: GO 8025
7966: LD_INT 3
7968: DOUBLE
7969: EQUAL
7970: IFTRUE 7974
7972: GO 8024
7974: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7975: LD_ADDR_VAR 0 3
7979: PUSH
7980: LD_INT 13
7982: PUSH
7983: LD_INT 14
7985: PUSH
7986: LD_INT 2
7988: PUSH
7989: LD_INT 3
7991: PUSH
7992: LD_INT 4
7994: PUSH
7995: LD_INT 5
7997: PUSH
7998: LD_INT 21
8000: PUSH
8001: LD_INT 22
8003: PUSH
8004: LD_INT 23
8006: PUSH
8007: LD_INT 24
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: ST_TO_ADDR
8022: GO 8025
8024: POP
// result := ( chassis in result ) ;
8025: LD_ADDR_VAR 0 3
8029: PUSH
8030: LD_VAR 0 1
8034: PUSH
8035: LD_VAR 0 3
8039: IN
8040: ST_TO_ADDR
// end ;
8041: LD_VAR 0 3
8045: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8046: LD_INT 0
8048: PPUSH
// if not chassis or not weapon then
8049: LD_VAR 0 1
8053: NOT
8054: PUSH
8055: LD_VAR 0 2
8059: NOT
8060: OR
8061: IFFALSE 8065
// exit ;
8063: GO 9125
// case weapon of us_machine_gun :
8065: LD_VAR 0 2
8069: PUSH
8070: LD_INT 2
8072: DOUBLE
8073: EQUAL
8074: IFTRUE 8078
8076: GO 8108
8078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8079: LD_ADDR_VAR 0 3
8083: PUSH
8084: LD_INT 1
8086: PUSH
8087: LD_INT 2
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: LD_INT 4
8095: PUSH
8096: LD_INT 5
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: ST_TO_ADDR
8106: GO 9109
8108: LD_INT 3
8110: DOUBLE
8111: EQUAL
8112: IFTRUE 8116
8114: GO 8146
8116: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8117: LD_ADDR_VAR 0 3
8121: PUSH
8122: LD_INT 1
8124: PUSH
8125: LD_INT 2
8127: PUSH
8128: LD_INT 3
8130: PUSH
8131: LD_INT 4
8133: PUSH
8134: LD_INT 5
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
8144: GO 9109
8146: LD_INT 11
8148: DOUBLE
8149: EQUAL
8150: IFTRUE 8154
8152: GO 8184
8154: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8155: LD_ADDR_VAR 0 3
8159: PUSH
8160: LD_INT 1
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: LD_INT 3
8168: PUSH
8169: LD_INT 4
8171: PUSH
8172: LD_INT 5
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: ST_TO_ADDR
8182: GO 9109
8184: LD_INT 4
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8218
8192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: LD_INT 4
8206: PUSH
8207: LD_INT 5
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: ST_TO_ADDR
8216: GO 9109
8218: LD_INT 5
8220: DOUBLE
8221: EQUAL
8222: IFTRUE 8226
8224: GO 8252
8226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8227: LD_ADDR_VAR 0 3
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 4
8240: PUSH
8241: LD_INT 5
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
8250: GO 9109
8252: LD_INT 9
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8286
8260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 2
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: LD_INT 4
8274: PUSH
8275: LD_INT 5
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: ST_TO_ADDR
8284: GO 9109
8286: LD_INT 7
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 8320
8294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: LD_INT 4
8308: PUSH
8309: LD_INT 5
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: ST_TO_ADDR
8318: GO 9109
8320: LD_INT 12
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8354
8328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8329: LD_ADDR_VAR 0 3
8333: PUSH
8334: LD_INT 2
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: LD_INT 4
8342: PUSH
8343: LD_INT 5
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
8352: GO 9109
8354: LD_INT 13
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8388
8362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8363: LD_ADDR_VAR 0 3
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: LD_INT 4
8376: PUSH
8377: LD_INT 5
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
8386: GO 9109
8388: LD_INT 14
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8414
8396: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8397: LD_ADDR_VAR 0 3
8401: PUSH
8402: LD_INT 4
8404: PUSH
8405: LD_INT 5
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: ST_TO_ADDR
8412: GO 9109
8414: LD_INT 6
8416: DOUBLE
8417: EQUAL
8418: IFTRUE 8422
8420: GO 8440
8422: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8423: LD_ADDR_VAR 0 3
8427: PUSH
8428: LD_INT 4
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: ST_TO_ADDR
8438: GO 9109
8440: LD_INT 10
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8466
8448: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8449: LD_ADDR_VAR 0 3
8453: PUSH
8454: LD_INT 4
8456: PUSH
8457: LD_INT 5
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ST_TO_ADDR
8464: GO 9109
8466: LD_INT 22
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8500
8474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8475: LD_ADDR_VAR 0 3
8479: PUSH
8480: LD_INT 11
8482: PUSH
8483: LD_INT 12
8485: PUSH
8486: LD_INT 13
8488: PUSH
8489: LD_INT 14
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: ST_TO_ADDR
8498: GO 9109
8500: LD_INT 23
8502: DOUBLE
8503: EQUAL
8504: IFTRUE 8508
8506: GO 8534
8508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8509: LD_ADDR_VAR 0 3
8513: PUSH
8514: LD_INT 11
8516: PUSH
8517: LD_INT 12
8519: PUSH
8520: LD_INT 13
8522: PUSH
8523: LD_INT 14
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: ST_TO_ADDR
8532: GO 9109
8534: LD_INT 24
8536: DOUBLE
8537: EQUAL
8538: IFTRUE 8542
8540: GO 8568
8542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8543: LD_ADDR_VAR 0 3
8547: PUSH
8548: LD_INT 11
8550: PUSH
8551: LD_INT 12
8553: PUSH
8554: LD_INT 13
8556: PUSH
8557: LD_INT 14
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: ST_TO_ADDR
8566: GO 9109
8568: LD_INT 30
8570: DOUBLE
8571: EQUAL
8572: IFTRUE 8576
8574: GO 8602
8576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8577: LD_ADDR_VAR 0 3
8581: PUSH
8582: LD_INT 11
8584: PUSH
8585: LD_INT 12
8587: PUSH
8588: LD_INT 13
8590: PUSH
8591: LD_INT 14
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: ST_TO_ADDR
8600: GO 9109
8602: LD_INT 25
8604: DOUBLE
8605: EQUAL
8606: IFTRUE 8610
8608: GO 8628
8610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8611: LD_ADDR_VAR 0 3
8615: PUSH
8616: LD_INT 13
8618: PUSH
8619: LD_INT 14
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: ST_TO_ADDR
8626: GO 9109
8628: LD_INT 27
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8654
8636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8637: LD_ADDR_VAR 0 3
8641: PUSH
8642: LD_INT 13
8644: PUSH
8645: LD_INT 14
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: ST_TO_ADDR
8652: GO 9109
8654: LD_INT 92
8656: DOUBLE
8657: EQUAL
8658: IFTRUE 8662
8660: GO 8688
8662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8663: LD_ADDR_VAR 0 3
8667: PUSH
8668: LD_INT 11
8670: PUSH
8671: LD_INT 12
8673: PUSH
8674: LD_INT 13
8676: PUSH
8677: LD_INT 14
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: ST_TO_ADDR
8686: GO 9109
8688: LD_INT 28
8690: DOUBLE
8691: EQUAL
8692: IFTRUE 8696
8694: GO 8714
8696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_INT 13
8704: PUSH
8705: LD_INT 14
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: ST_TO_ADDR
8712: GO 9109
8714: LD_INT 29
8716: DOUBLE
8717: EQUAL
8718: IFTRUE 8722
8720: GO 8740
8722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8723: LD_ADDR_VAR 0 3
8727: PUSH
8728: LD_INT 13
8730: PUSH
8731: LD_INT 14
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: ST_TO_ADDR
8738: GO 9109
8740: LD_INT 31
8742: DOUBLE
8743: EQUAL
8744: IFTRUE 8748
8746: GO 8766
8748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8749: LD_ADDR_VAR 0 3
8753: PUSH
8754: LD_INT 13
8756: PUSH
8757: LD_INT 14
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: ST_TO_ADDR
8764: GO 9109
8766: LD_INT 26
8768: DOUBLE
8769: EQUAL
8770: IFTRUE 8774
8772: GO 8792
8774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8775: LD_ADDR_VAR 0 3
8779: PUSH
8780: LD_INT 13
8782: PUSH
8783: LD_INT 14
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: ST_TO_ADDR
8790: GO 9109
8792: LD_INT 42
8794: DOUBLE
8795: EQUAL
8796: IFTRUE 8800
8798: GO 8826
8800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8801: LD_ADDR_VAR 0 3
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 22
8811: PUSH
8812: LD_INT 23
8814: PUSH
8815: LD_INT 24
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: ST_TO_ADDR
8824: GO 9109
8826: LD_INT 43
8828: DOUBLE
8829: EQUAL
8830: IFTRUE 8834
8832: GO 8860
8834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8835: LD_ADDR_VAR 0 3
8839: PUSH
8840: LD_INT 21
8842: PUSH
8843: LD_INT 22
8845: PUSH
8846: LD_INT 23
8848: PUSH
8849: LD_INT 24
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: ST_TO_ADDR
8858: GO 9109
8860: LD_INT 44
8862: DOUBLE
8863: EQUAL
8864: IFTRUE 8868
8866: GO 8894
8868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8869: LD_ADDR_VAR 0 3
8873: PUSH
8874: LD_INT 21
8876: PUSH
8877: LD_INT 22
8879: PUSH
8880: LD_INT 23
8882: PUSH
8883: LD_INT 24
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: ST_TO_ADDR
8892: GO 9109
8894: LD_INT 45
8896: DOUBLE
8897: EQUAL
8898: IFTRUE 8902
8900: GO 8928
8902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8903: LD_ADDR_VAR 0 3
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 22
8913: PUSH
8914: LD_INT 23
8916: PUSH
8917: LD_INT 24
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: ST_TO_ADDR
8926: GO 9109
8928: LD_INT 49
8930: DOUBLE
8931: EQUAL
8932: IFTRUE 8936
8934: GO 8962
8936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8937: LD_ADDR_VAR 0 3
8941: PUSH
8942: LD_INT 21
8944: PUSH
8945: LD_INT 22
8947: PUSH
8948: LD_INT 23
8950: PUSH
8951: LD_INT 24
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: ST_TO_ADDR
8960: GO 9109
8962: LD_INT 51
8964: DOUBLE
8965: EQUAL
8966: IFTRUE 8970
8968: GO 8996
8970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_INT 21
8978: PUSH
8979: LD_INT 22
8981: PUSH
8982: LD_INT 23
8984: PUSH
8985: LD_INT 24
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: ST_TO_ADDR
8994: GO 9109
8996: LD_INT 52
8998: DOUBLE
8999: EQUAL
9000: IFTRUE 9004
9002: GO 9030
9004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9005: LD_ADDR_VAR 0 3
9009: PUSH
9010: LD_INT 21
9012: PUSH
9013: LD_INT 22
9015: PUSH
9016: LD_INT 23
9018: PUSH
9019: LD_INT 24
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: ST_TO_ADDR
9028: GO 9109
9030: LD_INT 53
9032: DOUBLE
9033: EQUAL
9034: IFTRUE 9038
9036: GO 9056
9038: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9039: LD_ADDR_VAR 0 3
9043: PUSH
9044: LD_INT 23
9046: PUSH
9047: LD_INT 24
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: ST_TO_ADDR
9054: GO 9109
9056: LD_INT 46
9058: DOUBLE
9059: EQUAL
9060: IFTRUE 9064
9062: GO 9082
9064: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9065: LD_ADDR_VAR 0 3
9069: PUSH
9070: LD_INT 23
9072: PUSH
9073: LD_INT 24
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: ST_TO_ADDR
9080: GO 9109
9082: LD_INT 47
9084: DOUBLE
9085: EQUAL
9086: IFTRUE 9090
9088: GO 9108
9090: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9091: LD_ADDR_VAR 0 3
9095: PUSH
9096: LD_INT 23
9098: PUSH
9099: LD_INT 24
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: ST_TO_ADDR
9106: GO 9109
9108: POP
// result := ( chassis in result ) ;
9109: LD_ADDR_VAR 0 3
9113: PUSH
9114: LD_VAR 0 1
9118: PUSH
9119: LD_VAR 0 3
9123: IN
9124: ST_TO_ADDR
// end ;
9125: LD_VAR 0 3
9129: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9130: LD_INT 0
9132: PPUSH
9133: PPUSH
9134: PPUSH
9135: PPUSH
9136: PPUSH
9137: PPUSH
9138: PPUSH
// result := array ;
9139: LD_ADDR_VAR 0 5
9143: PUSH
9144: LD_VAR 0 1
9148: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9149: LD_VAR 0 1
9153: NOT
9154: PUSH
9155: LD_VAR 0 2
9159: NOT
9160: OR
9161: PUSH
9162: LD_VAR 0 3
9166: NOT
9167: OR
9168: PUSH
9169: LD_VAR 0 2
9173: PUSH
9174: LD_VAR 0 1
9178: GREATER
9179: OR
9180: PUSH
9181: LD_VAR 0 3
9185: PUSH
9186: LD_VAR 0 1
9190: GREATER
9191: OR
9192: IFFALSE 9196
// exit ;
9194: GO 9492
// if direction then
9196: LD_VAR 0 4
9200: IFFALSE 9264
// begin d := 1 ;
9202: LD_ADDR_VAR 0 9
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// if i_from > i_to then
9210: LD_VAR 0 2
9214: PUSH
9215: LD_VAR 0 3
9219: GREATER
9220: IFFALSE 9246
// length := ( array - i_from ) + i_to else
9222: LD_ADDR_VAR 0 11
9226: PUSH
9227: LD_VAR 0 1
9231: PUSH
9232: LD_VAR 0 2
9236: MINUS
9237: PUSH
9238: LD_VAR 0 3
9242: PLUS
9243: ST_TO_ADDR
9244: GO 9262
// length := i_to - i_from ;
9246: LD_ADDR_VAR 0 11
9250: PUSH
9251: LD_VAR 0 3
9255: PUSH
9256: LD_VAR 0 2
9260: MINUS
9261: ST_TO_ADDR
// end else
9262: GO 9325
// begin d := - 1 ;
9264: LD_ADDR_VAR 0 9
9268: PUSH
9269: LD_INT 1
9271: NEG
9272: ST_TO_ADDR
// if i_from > i_to then
9273: LD_VAR 0 2
9277: PUSH
9278: LD_VAR 0 3
9282: GREATER
9283: IFFALSE 9303
// length := i_from - i_to else
9285: LD_ADDR_VAR 0 11
9289: PUSH
9290: LD_VAR 0 2
9294: PUSH
9295: LD_VAR 0 3
9299: MINUS
9300: ST_TO_ADDR
9301: GO 9325
// length := ( array - i_to ) + i_from ;
9303: LD_ADDR_VAR 0 11
9307: PUSH
9308: LD_VAR 0 1
9312: PUSH
9313: LD_VAR 0 3
9317: MINUS
9318: PUSH
9319: LD_VAR 0 2
9323: PLUS
9324: ST_TO_ADDR
// end ; if not length then
9325: LD_VAR 0 11
9329: NOT
9330: IFFALSE 9334
// exit ;
9332: GO 9492
// tmp := array ;
9334: LD_ADDR_VAR 0 10
9338: PUSH
9339: LD_VAR 0 1
9343: ST_TO_ADDR
// for i = 1 to length do
9344: LD_ADDR_VAR 0 6
9348: PUSH
9349: DOUBLE
9350: LD_INT 1
9352: DEC
9353: ST_TO_ADDR
9354: LD_VAR 0 11
9358: PUSH
9359: FOR_TO
9360: IFFALSE 9480
// begin for j = 1 to array do
9362: LD_ADDR_VAR 0 7
9366: PUSH
9367: DOUBLE
9368: LD_INT 1
9370: DEC
9371: ST_TO_ADDR
9372: LD_VAR 0 1
9376: PUSH
9377: FOR_TO
9378: IFFALSE 9466
// begin k := j + d ;
9380: LD_ADDR_VAR 0 8
9384: PUSH
9385: LD_VAR 0 7
9389: PUSH
9390: LD_VAR 0 9
9394: PLUS
9395: ST_TO_ADDR
// if k > array then
9396: LD_VAR 0 8
9400: PUSH
9401: LD_VAR 0 1
9405: GREATER
9406: IFFALSE 9416
// k := 1 ;
9408: LD_ADDR_VAR 0 8
9412: PUSH
9413: LD_INT 1
9415: ST_TO_ADDR
// if not k then
9416: LD_VAR 0 8
9420: NOT
9421: IFFALSE 9433
// k := array ;
9423: LD_ADDR_VAR 0 8
9427: PUSH
9428: LD_VAR 0 1
9432: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9433: LD_ADDR_VAR 0 10
9437: PUSH
9438: LD_VAR 0 10
9442: PPUSH
9443: LD_VAR 0 8
9447: PPUSH
9448: LD_VAR 0 1
9452: PUSH
9453: LD_VAR 0 7
9457: ARRAY
9458: PPUSH
9459: CALL_OW 1
9463: ST_TO_ADDR
// end ;
9464: GO 9377
9466: POP
9467: POP
// array := tmp ;
9468: LD_ADDR_VAR 0 1
9472: PUSH
9473: LD_VAR 0 10
9477: ST_TO_ADDR
// end ;
9478: GO 9359
9480: POP
9481: POP
// result := array ;
9482: LD_ADDR_VAR 0 5
9486: PUSH
9487: LD_VAR 0 1
9491: ST_TO_ADDR
// end ;
9492: LD_VAR 0 5
9496: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9497: LD_INT 0
9499: PPUSH
9500: PPUSH
// result := 0 ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// if not array or not value in array then
9509: LD_VAR 0 1
9513: NOT
9514: PUSH
9515: LD_VAR 0 2
9519: PUSH
9520: LD_VAR 0 1
9524: IN
9525: NOT
9526: OR
9527: IFFALSE 9531
// exit ;
9529: GO 9585
// for i = 1 to array do
9531: LD_ADDR_VAR 0 4
9535: PUSH
9536: DOUBLE
9537: LD_INT 1
9539: DEC
9540: ST_TO_ADDR
9541: LD_VAR 0 1
9545: PUSH
9546: FOR_TO
9547: IFFALSE 9583
// if value = array [ i ] then
9549: LD_VAR 0 2
9553: PUSH
9554: LD_VAR 0 1
9558: PUSH
9559: LD_VAR 0 4
9563: ARRAY
9564: EQUAL
9565: IFFALSE 9581
// begin result := i ;
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 4
9576: ST_TO_ADDR
// exit ;
9577: POP
9578: POP
9579: GO 9585
// end ;
9581: GO 9546
9583: POP
9584: POP
// end ;
9585: LD_VAR 0 3
9589: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9590: LD_INT 0
9592: PPUSH
// vc_chassis := chassis ;
9593: LD_ADDR_OWVAR 37
9597: PUSH
9598: LD_VAR 0 1
9602: ST_TO_ADDR
// vc_engine := engine ;
9603: LD_ADDR_OWVAR 39
9607: PUSH
9608: LD_VAR 0 2
9612: ST_TO_ADDR
// vc_control := control ;
9613: LD_ADDR_OWVAR 38
9617: PUSH
9618: LD_VAR 0 3
9622: ST_TO_ADDR
// vc_weapon := weapon ;
9623: LD_ADDR_OWVAR 40
9627: PUSH
9628: LD_VAR 0 4
9632: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9633: LD_ADDR_OWVAR 41
9637: PUSH
9638: LD_VAR 0 5
9642: ST_TO_ADDR
// end ;
9643: LD_VAR 0 6
9647: RET
// export function WantPlant ( unit ) ; var task ; begin
9648: LD_INT 0
9650: PPUSH
9651: PPUSH
// result := false ;
9652: LD_ADDR_VAR 0 2
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9660: LD_ADDR_VAR 0 3
9664: PUSH
9665: LD_VAR 0 1
9669: PPUSH
9670: CALL_OW 437
9674: ST_TO_ADDR
// if task then
9675: LD_VAR 0 3
9679: IFFALSE 9707
// if task [ 1 ] [ 1 ] = p then
9681: LD_VAR 0 3
9685: PUSH
9686: LD_INT 1
9688: ARRAY
9689: PUSH
9690: LD_INT 1
9692: ARRAY
9693: PUSH
9694: LD_STRING p
9696: EQUAL
9697: IFFALSE 9707
// result := true ;
9699: LD_ADDR_VAR 0 2
9703: PUSH
9704: LD_INT 1
9706: ST_TO_ADDR
// end ;
9707: LD_VAR 0 2
9711: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9712: LD_INT 0
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
// if pos < 1 then
9718: LD_VAR 0 2
9722: PUSH
9723: LD_INT 1
9725: LESS
9726: IFFALSE 9730
// exit ;
9728: GO 10033
// if pos = 1 then
9730: LD_VAR 0 2
9734: PUSH
9735: LD_INT 1
9737: EQUAL
9738: IFFALSE 9771
// result := Replace ( arr , pos [ 1 ] , value ) else
9740: LD_ADDR_VAR 0 4
9744: PUSH
9745: LD_VAR 0 1
9749: PPUSH
9750: LD_VAR 0 2
9754: PUSH
9755: LD_INT 1
9757: ARRAY
9758: PPUSH
9759: LD_VAR 0 3
9763: PPUSH
9764: CALL_OW 1
9768: ST_TO_ADDR
9769: GO 10033
// begin tmp := arr ;
9771: LD_ADDR_VAR 0 6
9775: PUSH
9776: LD_VAR 0 1
9780: ST_TO_ADDR
// s_arr := [ tmp ] ;
9781: LD_ADDR_VAR 0 7
9785: PUSH
9786: LD_VAR 0 6
9790: PUSH
9791: EMPTY
9792: LIST
9793: ST_TO_ADDR
// for i = 1 to pos - 1 do
9794: LD_ADDR_VAR 0 5
9798: PUSH
9799: DOUBLE
9800: LD_INT 1
9802: DEC
9803: ST_TO_ADDR
9804: LD_VAR 0 2
9808: PUSH
9809: LD_INT 1
9811: MINUS
9812: PUSH
9813: FOR_TO
9814: IFFALSE 9859
// begin tmp := tmp [ pos [ i ] ] ;
9816: LD_ADDR_VAR 0 6
9820: PUSH
9821: LD_VAR 0 6
9825: PUSH
9826: LD_VAR 0 2
9830: PUSH
9831: LD_VAR 0 5
9835: ARRAY
9836: ARRAY
9837: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9838: LD_ADDR_VAR 0 7
9842: PUSH
9843: LD_VAR 0 7
9847: PUSH
9848: LD_VAR 0 6
9852: PUSH
9853: EMPTY
9854: LIST
9855: ADD
9856: ST_TO_ADDR
// end ;
9857: GO 9813
9859: POP
9860: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9861: LD_ADDR_VAR 0 6
9865: PUSH
9866: LD_VAR 0 6
9870: PPUSH
9871: LD_VAR 0 2
9875: PUSH
9876: LD_VAR 0 2
9880: ARRAY
9881: PPUSH
9882: LD_VAR 0 3
9886: PPUSH
9887: CALL_OW 1
9891: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9892: LD_ADDR_VAR 0 7
9896: PUSH
9897: LD_VAR 0 7
9901: PPUSH
9902: LD_VAR 0 7
9906: PPUSH
9907: LD_VAR 0 6
9911: PPUSH
9912: CALL_OW 1
9916: ST_TO_ADDR
// for i = s_arr downto 2 do
9917: LD_ADDR_VAR 0 5
9921: PUSH
9922: DOUBLE
9923: LD_VAR 0 7
9927: INC
9928: ST_TO_ADDR
9929: LD_INT 2
9931: PUSH
9932: FOR_DOWNTO
9933: IFFALSE 10017
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9935: LD_ADDR_VAR 0 6
9939: PUSH
9940: LD_VAR 0 7
9944: PUSH
9945: LD_VAR 0 5
9949: PUSH
9950: LD_INT 1
9952: MINUS
9953: ARRAY
9954: PPUSH
9955: LD_VAR 0 2
9959: PUSH
9960: LD_VAR 0 5
9964: PUSH
9965: LD_INT 1
9967: MINUS
9968: ARRAY
9969: PPUSH
9970: LD_VAR 0 7
9974: PUSH
9975: LD_VAR 0 5
9979: ARRAY
9980: PPUSH
9981: CALL_OW 1
9985: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9986: LD_ADDR_VAR 0 7
9990: PUSH
9991: LD_VAR 0 7
9995: PPUSH
9996: LD_VAR 0 5
10000: PUSH
10001: LD_INT 1
10003: MINUS
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 1
10014: ST_TO_ADDR
// end ;
10015: GO 9932
10017: POP
10018: POP
// result := s_arr [ 1 ] ;
10019: LD_ADDR_VAR 0 4
10023: PUSH
10024: LD_VAR 0 7
10028: PUSH
10029: LD_INT 1
10031: ARRAY
10032: ST_TO_ADDR
// end ; end ;
10033: LD_VAR 0 4
10037: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10038: LD_INT 0
10040: PPUSH
10041: PPUSH
// if not list then
10042: LD_VAR 0 1
10046: NOT
10047: IFFALSE 10051
// exit ;
10049: GO 10142
// i := list [ pos1 ] ;
10051: LD_ADDR_VAR 0 5
10055: PUSH
10056: LD_VAR 0 1
10060: PUSH
10061: LD_VAR 0 2
10065: ARRAY
10066: ST_TO_ADDR
// if not i then
10067: LD_VAR 0 5
10071: NOT
10072: IFFALSE 10076
// exit ;
10074: GO 10142
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10076: LD_ADDR_VAR 0 1
10080: PUSH
10081: LD_VAR 0 1
10085: PPUSH
10086: LD_VAR 0 2
10090: PPUSH
10091: LD_VAR 0 1
10095: PUSH
10096: LD_VAR 0 3
10100: ARRAY
10101: PPUSH
10102: CALL_OW 1
10106: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10107: LD_ADDR_VAR 0 1
10111: PUSH
10112: LD_VAR 0 1
10116: PPUSH
10117: LD_VAR 0 3
10121: PPUSH
10122: LD_VAR 0 5
10126: PPUSH
10127: CALL_OW 1
10131: ST_TO_ADDR
// result := list ;
10132: LD_ADDR_VAR 0 4
10136: PUSH
10137: LD_VAR 0 1
10141: ST_TO_ADDR
// end ;
10142: LD_VAR 0 4
10146: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10147: LD_INT 0
10149: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10150: LD_ADDR_VAR 0 5
10154: PUSH
10155: LD_VAR 0 1
10159: PPUSH
10160: CALL_OW 250
10164: PPUSH
10165: LD_VAR 0 1
10169: PPUSH
10170: CALL_OW 251
10174: PPUSH
10175: LD_VAR 0 2
10179: PPUSH
10180: LD_VAR 0 3
10184: PPUSH
10185: LD_VAR 0 4
10189: PPUSH
10190: CALL 10568 0 5
10194: ST_TO_ADDR
// end ;
10195: LD_VAR 0 5
10199: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10200: LD_INT 0
10202: PPUSH
10203: PPUSH
10204: PPUSH
10205: PPUSH
// if not list or not unit then
10206: LD_VAR 0 2
10210: NOT
10211: PUSH
10212: LD_VAR 0 1
10216: NOT
10217: OR
10218: IFFALSE 10222
// exit ;
10220: GO 10563
// result := [ ] ;
10222: LD_ADDR_VAR 0 5
10226: PUSH
10227: EMPTY
10228: ST_TO_ADDR
// for i in list do
10229: LD_ADDR_VAR 0 6
10233: PUSH
10234: LD_VAR 0 2
10238: PUSH
10239: FOR_IN
10240: IFFALSE 10458
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10242: LD_ADDR_VAR 0 8
10246: PUSH
10247: LD_VAR 0 1
10251: PPUSH
10252: LD_VAR 0 6
10256: PUSH
10257: LD_INT 1
10259: ARRAY
10260: PPUSH
10261: LD_VAR 0 6
10265: PUSH
10266: LD_INT 2
10268: ARRAY
10269: PPUSH
10270: CALL_OW 297
10274: ST_TO_ADDR
// if not Count ( result ) then
10275: LD_VAR 0 5
10279: PPUSH
10280: CALL 6852 0 1
10284: NOT
10285: IFFALSE 10318
// begin result := Join ( result , [ i , tmp ] ) ;
10287: LD_ADDR_VAR 0 5
10291: PUSH
10292: LD_VAR 0 5
10296: PPUSH
10297: LD_VAR 0 6
10301: PUSH
10302: LD_VAR 0 8
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PPUSH
10311: CALL 42461 0 2
10315: ST_TO_ADDR
// continue ;
10316: GO 10239
// end ; if result [ result ] [ 2 ] <= tmp then
10318: LD_VAR 0 5
10322: PUSH
10323: LD_VAR 0 5
10327: ARRAY
10328: PUSH
10329: LD_INT 2
10331: ARRAY
10332: PUSH
10333: LD_VAR 0 8
10337: LESSEQUAL
10338: IFFALSE 10371
// result := Join ( result , [ i , tmp ] ) else
10340: LD_ADDR_VAR 0 5
10344: PUSH
10345: LD_VAR 0 5
10349: PPUSH
10350: LD_VAR 0 6
10354: PUSH
10355: LD_VAR 0 8
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PPUSH
10364: CALL 42461 0 2
10368: ST_TO_ADDR
10369: GO 10456
// begin for j := 1 to Count ( result ) do
10371: LD_ADDR_VAR 0 7
10375: PUSH
10376: DOUBLE
10377: LD_INT 1
10379: DEC
10380: ST_TO_ADDR
10381: LD_VAR 0 5
10385: PPUSH
10386: CALL 6852 0 1
10390: PUSH
10391: FOR_TO
10392: IFFALSE 10454
// begin if tmp < result [ j ] [ 2 ] then
10394: LD_VAR 0 8
10398: PUSH
10399: LD_VAR 0 5
10403: PUSH
10404: LD_VAR 0 7
10408: ARRAY
10409: PUSH
10410: LD_INT 2
10412: ARRAY
10413: LESS
10414: IFFALSE 10452
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10416: LD_ADDR_VAR 0 5
10420: PUSH
10421: LD_VAR 0 5
10425: PPUSH
10426: LD_VAR 0 7
10430: PPUSH
10431: LD_VAR 0 6
10435: PUSH
10436: LD_VAR 0 8
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 2
10449: ST_TO_ADDR
// break ;
10450: GO 10454
// end ; end ;
10452: GO 10391
10454: POP
10455: POP
// end ; end ;
10456: GO 10239
10458: POP
10459: POP
// if result and not asc then
10460: LD_VAR 0 5
10464: PUSH
10465: LD_VAR 0 3
10469: NOT
10470: AND
10471: IFFALSE 10488
// result := ReverseArray ( result ) ;
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_VAR 0 5
10482: PPUSH
10483: CALL 37728 0 1
10487: ST_TO_ADDR
// tmp := [ ] ;
10488: LD_ADDR_VAR 0 8
10492: PUSH
10493: EMPTY
10494: ST_TO_ADDR
// if mode then
10495: LD_VAR 0 4
10499: IFFALSE 10563
// begin for i := 1 to result do
10501: LD_ADDR_VAR 0 6
10505: PUSH
10506: DOUBLE
10507: LD_INT 1
10509: DEC
10510: ST_TO_ADDR
10511: LD_VAR 0 5
10515: PUSH
10516: FOR_TO
10517: IFFALSE 10551
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10519: LD_ADDR_VAR 0 8
10523: PUSH
10524: LD_VAR 0 8
10528: PPUSH
10529: LD_VAR 0 5
10533: PUSH
10534: LD_VAR 0 6
10538: ARRAY
10539: PUSH
10540: LD_INT 1
10542: ARRAY
10543: PPUSH
10544: CALL 42461 0 2
10548: ST_TO_ADDR
10549: GO 10516
10551: POP
10552: POP
// result := tmp ;
10553: LD_ADDR_VAR 0 5
10557: PUSH
10558: LD_VAR 0 8
10562: ST_TO_ADDR
// end ; end ;
10563: LD_VAR 0 5
10567: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
10573: PPUSH
// if not list then
10574: LD_VAR 0 3
10578: NOT
10579: IFFALSE 10583
// exit ;
10581: GO 10971
// result := [ ] ;
10583: LD_ADDR_VAR 0 6
10587: PUSH
10588: EMPTY
10589: ST_TO_ADDR
// for i in list do
10590: LD_ADDR_VAR 0 7
10594: PUSH
10595: LD_VAR 0 3
10599: PUSH
10600: FOR_IN
10601: IFFALSE 10803
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10603: LD_ADDR_VAR 0 9
10607: PUSH
10608: LD_VAR 0 7
10612: PPUSH
10613: LD_VAR 0 1
10617: PPUSH
10618: LD_VAR 0 2
10622: PPUSH
10623: CALL_OW 297
10627: ST_TO_ADDR
// if not result then
10628: LD_VAR 0 6
10632: NOT
10633: IFFALSE 10659
// result := [ [ i , tmp ] ] else
10635: LD_ADDR_VAR 0 6
10639: PUSH
10640: LD_VAR 0 7
10644: PUSH
10645: LD_VAR 0 9
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: ST_TO_ADDR
10657: GO 10801
// begin if result [ result ] [ 2 ] <= tmp then
10659: LD_VAR 0 6
10663: PUSH
10664: LD_VAR 0 6
10668: ARRAY
10669: PUSH
10670: LD_INT 2
10672: ARRAY
10673: PUSH
10674: LD_VAR 0 9
10678: LESSEQUAL
10679: IFFALSE 10721
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10681: LD_ADDR_VAR 0 6
10685: PUSH
10686: LD_VAR 0 6
10690: PPUSH
10691: LD_VAR 0 6
10695: PUSH
10696: LD_INT 1
10698: PLUS
10699: PPUSH
10700: LD_VAR 0 7
10704: PUSH
10705: LD_VAR 0 9
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 2
10718: ST_TO_ADDR
10719: GO 10801
// for j := 1 to result do
10721: LD_ADDR_VAR 0 8
10725: PUSH
10726: DOUBLE
10727: LD_INT 1
10729: DEC
10730: ST_TO_ADDR
10731: LD_VAR 0 6
10735: PUSH
10736: FOR_TO
10737: IFFALSE 10799
// begin if tmp < result [ j ] [ 2 ] then
10739: LD_VAR 0 9
10743: PUSH
10744: LD_VAR 0 6
10748: PUSH
10749: LD_VAR 0 8
10753: ARRAY
10754: PUSH
10755: LD_INT 2
10757: ARRAY
10758: LESS
10759: IFFALSE 10797
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10761: LD_ADDR_VAR 0 6
10765: PUSH
10766: LD_VAR 0 6
10770: PPUSH
10771: LD_VAR 0 8
10775: PPUSH
10776: LD_VAR 0 7
10780: PUSH
10781: LD_VAR 0 9
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PPUSH
10790: CALL_OW 2
10794: ST_TO_ADDR
// break ;
10795: GO 10799
// end ; end ;
10797: GO 10736
10799: POP
10800: POP
// end ; end ;
10801: GO 10600
10803: POP
10804: POP
// if result and not asc then
10805: LD_VAR 0 6
10809: PUSH
10810: LD_VAR 0 4
10814: NOT
10815: AND
10816: IFFALSE 10891
// begin tmp := result ;
10818: LD_ADDR_VAR 0 9
10822: PUSH
10823: LD_VAR 0 6
10827: ST_TO_ADDR
// for i = tmp downto 1 do
10828: LD_ADDR_VAR 0 7
10832: PUSH
10833: DOUBLE
10834: LD_VAR 0 9
10838: INC
10839: ST_TO_ADDR
10840: LD_INT 1
10842: PUSH
10843: FOR_DOWNTO
10844: IFFALSE 10889
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10846: LD_ADDR_VAR 0 6
10850: PUSH
10851: LD_VAR 0 6
10855: PPUSH
10856: LD_VAR 0 9
10860: PUSH
10861: LD_VAR 0 7
10865: MINUS
10866: PUSH
10867: LD_INT 1
10869: PLUS
10870: PPUSH
10871: LD_VAR 0 9
10875: PUSH
10876: LD_VAR 0 7
10880: ARRAY
10881: PPUSH
10882: CALL_OW 1
10886: ST_TO_ADDR
10887: GO 10843
10889: POP
10890: POP
// end ; tmp := [ ] ;
10891: LD_ADDR_VAR 0 9
10895: PUSH
10896: EMPTY
10897: ST_TO_ADDR
// if mode then
10898: LD_VAR 0 5
10902: IFFALSE 10971
// begin for i = 1 to result do
10904: LD_ADDR_VAR 0 7
10908: PUSH
10909: DOUBLE
10910: LD_INT 1
10912: DEC
10913: ST_TO_ADDR
10914: LD_VAR 0 6
10918: PUSH
10919: FOR_TO
10920: IFFALSE 10959
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10922: LD_ADDR_VAR 0 9
10926: PUSH
10927: LD_VAR 0 9
10931: PPUSH
10932: LD_VAR 0 7
10936: PPUSH
10937: LD_VAR 0 6
10941: PUSH
10942: LD_VAR 0 7
10946: ARRAY
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: PPUSH
10952: CALL_OW 1
10956: ST_TO_ADDR
10957: GO 10919
10959: POP
10960: POP
// result := tmp ;
10961: LD_ADDR_VAR 0 6
10965: PUSH
10966: LD_VAR 0 9
10970: ST_TO_ADDR
// end ; end ;
10971: LD_VAR 0 6
10975: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10984: LD_ADDR_VAR 0 5
10988: PUSH
10989: LD_INT 0
10991: PUSH
10992: LD_INT 0
10994: PUSH
10995: LD_INT 0
10997: PUSH
10998: EMPTY
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: ST_TO_ADDR
// if not x or not y then
11006: LD_VAR 0 2
11010: NOT
11011: PUSH
11012: LD_VAR 0 3
11016: NOT
11017: OR
11018: IFFALSE 11022
// exit ;
11020: GO 12672
// if not range then
11022: LD_VAR 0 4
11026: NOT
11027: IFFALSE 11037
// range := 10 ;
11029: LD_ADDR_VAR 0 4
11033: PUSH
11034: LD_INT 10
11036: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11037: LD_ADDR_VAR 0 8
11041: PUSH
11042: LD_INT 81
11044: PUSH
11045: LD_VAR 0 1
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 92
11056: PUSH
11057: LD_VAR 0 2
11061: PUSH
11062: LD_VAR 0 3
11066: PUSH
11067: LD_VAR 0 4
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 3
11080: PUSH
11081: LD_INT 21
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: ST_TO_ADDR
// if not tmp then
11105: LD_VAR 0 8
11109: NOT
11110: IFFALSE 11114
// exit ;
11112: GO 12672
// for i in tmp do
11114: LD_ADDR_VAR 0 6
11118: PUSH
11119: LD_VAR 0 8
11123: PUSH
11124: FOR_IN
11125: IFFALSE 12647
// begin points := [ 0 , 0 , 0 ] ;
11127: LD_ADDR_VAR 0 9
11131: PUSH
11132: LD_INT 0
11134: PUSH
11135: LD_INT 0
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: ST_TO_ADDR
// bpoints := 1 ;
11146: LD_ADDR_VAR 0 10
11150: PUSH
11151: LD_INT 1
11153: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11154: LD_VAR 0 6
11158: PPUSH
11159: CALL_OW 247
11163: PUSH
11164: LD_INT 1
11166: DOUBLE
11167: EQUAL
11168: IFTRUE 11172
11170: GO 11750
11172: POP
// begin if GetClass ( i ) = 1 then
11173: LD_VAR 0 6
11177: PPUSH
11178: CALL_OW 257
11182: PUSH
11183: LD_INT 1
11185: EQUAL
11186: IFFALSE 11207
// points := [ 10 , 5 , 3 ] ;
11188: LD_ADDR_VAR 0 9
11192: PUSH
11193: LD_INT 10
11195: PUSH
11196: LD_INT 5
11198: PUSH
11199: LD_INT 3
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11207: LD_VAR 0 6
11211: PPUSH
11212: CALL_OW 257
11216: PUSH
11217: LD_INT 2
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 4
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: IN
11231: IFFALSE 11252
// points := [ 3 , 2 , 1 ] ;
11233: LD_ADDR_VAR 0 9
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: LD_INT 2
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11252: LD_VAR 0 6
11256: PPUSH
11257: CALL_OW 257
11261: PUSH
11262: LD_INT 5
11264: EQUAL
11265: IFFALSE 11286
// points := [ 130 , 5 , 2 ] ;
11267: LD_ADDR_VAR 0 9
11271: PUSH
11272: LD_INT 130
11274: PUSH
11275: LD_INT 5
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11286: LD_VAR 0 6
11290: PPUSH
11291: CALL_OW 257
11295: PUSH
11296: LD_INT 8
11298: EQUAL
11299: IFFALSE 11320
// points := [ 35 , 35 , 30 ] ;
11301: LD_ADDR_VAR 0 9
11305: PUSH
11306: LD_INT 35
11308: PUSH
11309: LD_INT 35
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11320: LD_VAR 0 6
11324: PPUSH
11325: CALL_OW 257
11329: PUSH
11330: LD_INT 9
11332: EQUAL
11333: IFFALSE 11354
// points := [ 20 , 55 , 40 ] ;
11335: LD_ADDR_VAR 0 9
11339: PUSH
11340: LD_INT 20
11342: PUSH
11343: LD_INT 55
11345: PUSH
11346: LD_INT 40
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11354: LD_VAR 0 6
11358: PPUSH
11359: CALL_OW 257
11363: PUSH
11364: LD_INT 12
11366: PUSH
11367: LD_INT 16
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: IN
11374: IFFALSE 11395
// points := [ 5 , 3 , 2 ] ;
11376: LD_ADDR_VAR 0 9
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: LD_INT 3
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11395: LD_VAR 0 6
11399: PPUSH
11400: CALL_OW 257
11404: PUSH
11405: LD_INT 17
11407: EQUAL
11408: IFFALSE 11429
// points := [ 100 , 50 , 75 ] ;
11410: LD_ADDR_VAR 0 9
11414: PUSH
11415: LD_INT 100
11417: PUSH
11418: LD_INT 50
11420: PUSH
11421: LD_INT 75
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11429: LD_VAR 0 6
11433: PPUSH
11434: CALL_OW 257
11438: PUSH
11439: LD_INT 15
11441: EQUAL
11442: IFFALSE 11463
// points := [ 10 , 5 , 3 ] ;
11444: LD_ADDR_VAR 0 9
11448: PUSH
11449: LD_INT 10
11451: PUSH
11452: LD_INT 5
11454: PUSH
11455: LD_INT 3
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11463: LD_VAR 0 6
11467: PPUSH
11468: CALL_OW 257
11472: PUSH
11473: LD_INT 14
11475: EQUAL
11476: IFFALSE 11497
// points := [ 10 , 0 , 0 ] ;
11478: LD_ADDR_VAR 0 9
11482: PUSH
11483: LD_INT 10
11485: PUSH
11486: LD_INT 0
11488: PUSH
11489: LD_INT 0
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11497: LD_VAR 0 6
11501: PPUSH
11502: CALL_OW 257
11506: PUSH
11507: LD_INT 11
11509: EQUAL
11510: IFFALSE 11531
// points := [ 30 , 10 , 5 ] ;
11512: LD_ADDR_VAR 0 9
11516: PUSH
11517: LD_INT 30
11519: PUSH
11520: LD_INT 10
11522: PUSH
11523: LD_INT 5
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11531: LD_VAR 0 1
11535: PPUSH
11536: LD_INT 5
11538: PPUSH
11539: CALL_OW 321
11543: PUSH
11544: LD_INT 2
11546: EQUAL
11547: IFFALSE 11564
// bpoints := bpoints * 1.8 ;
11549: LD_ADDR_VAR 0 10
11553: PUSH
11554: LD_VAR 0 10
11558: PUSH
11559: LD_REAL  1.80000000000000E+0000
11562: MUL
11563: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11564: LD_VAR 0 6
11568: PPUSH
11569: CALL_OW 257
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: IN
11592: PUSH
11593: LD_VAR 0 1
11597: PPUSH
11598: LD_INT 51
11600: PPUSH
11601: CALL_OW 321
11605: PUSH
11606: LD_INT 2
11608: EQUAL
11609: AND
11610: IFFALSE 11627
// bpoints := bpoints * 1.2 ;
11612: LD_ADDR_VAR 0 10
11616: PUSH
11617: LD_VAR 0 10
11621: PUSH
11622: LD_REAL  1.20000000000000E+0000
11625: MUL
11626: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11627: LD_VAR 0 6
11631: PPUSH
11632: CALL_OW 257
11636: PUSH
11637: LD_INT 5
11639: PUSH
11640: LD_INT 7
11642: PUSH
11643: LD_INT 9
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: IN
11651: PUSH
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_INT 52
11659: PPUSH
11660: CALL_OW 321
11664: PUSH
11665: LD_INT 2
11667: EQUAL
11668: AND
11669: IFFALSE 11686
// bpoints := bpoints * 1.5 ;
11671: LD_ADDR_VAR 0 10
11675: PUSH
11676: LD_VAR 0 10
11680: PUSH
11681: LD_REAL  1.50000000000000E+0000
11684: MUL
11685: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11686: LD_VAR 0 1
11690: PPUSH
11691: LD_INT 66
11693: PPUSH
11694: CALL_OW 321
11698: PUSH
11699: LD_INT 2
11701: EQUAL
11702: IFFALSE 11719
// bpoints := bpoints * 1.1 ;
11704: LD_ADDR_VAR 0 10
11708: PUSH
11709: LD_VAR 0 10
11713: PUSH
11714: LD_REAL  1.10000000000000E+0000
11717: MUL
11718: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11719: LD_ADDR_VAR 0 10
11723: PUSH
11724: LD_VAR 0 10
11728: PUSH
11729: LD_VAR 0 6
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 259
11741: PUSH
11742: LD_REAL  1.15000000000000E+0000
11745: MUL
11746: MUL
11747: ST_TO_ADDR
// end ; unit_vehicle :
11748: GO 12576
11750: LD_INT 2
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 12564
11758: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11759: LD_VAR 0 6
11763: PPUSH
11764: CALL_OW 264
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: LD_INT 42
11774: PUSH
11775: LD_INT 24
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: IN
11783: IFFALSE 11804
// points := [ 25 , 5 , 3 ] ;
11785: LD_ADDR_VAR 0 9
11789: PUSH
11790: LD_INT 25
11792: PUSH
11793: LD_INT 5
11795: PUSH
11796: LD_INT 3
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11804: LD_VAR 0 6
11808: PPUSH
11809: CALL_OW 264
11813: PUSH
11814: LD_INT 4
11816: PUSH
11817: LD_INT 43
11819: PUSH
11820: LD_INT 25
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: IN
11828: IFFALSE 11849
// points := [ 40 , 15 , 5 ] ;
11830: LD_ADDR_VAR 0 9
11834: PUSH
11835: LD_INT 40
11837: PUSH
11838: LD_INT 15
11840: PUSH
11841: LD_INT 5
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11849: LD_VAR 0 6
11853: PPUSH
11854: CALL_OW 264
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: LD_INT 23
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: IN
11869: IFFALSE 11890
// points := [ 7 , 25 , 8 ] ;
11871: LD_ADDR_VAR 0 9
11875: PUSH
11876: LD_INT 7
11878: PUSH
11879: LD_INT 25
11881: PUSH
11882: LD_INT 8
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11890: LD_VAR 0 6
11894: PPUSH
11895: CALL_OW 264
11899: PUSH
11900: LD_INT 5
11902: PUSH
11903: LD_INT 27
11905: PUSH
11906: LD_INT 44
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: IN
11914: IFFALSE 11935
// points := [ 14 , 50 , 16 ] ;
11916: LD_ADDR_VAR 0 9
11920: PUSH
11921: LD_INT 14
11923: PUSH
11924: LD_INT 50
11926: PUSH
11927: LD_INT 16
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11935: LD_VAR 0 6
11939: PPUSH
11940: CALL_OW 264
11944: PUSH
11945: LD_INT 6
11947: PUSH
11948: LD_INT 46
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: IN
11955: IFFALSE 11976
// points := [ 32 , 120 , 70 ] ;
11957: LD_ADDR_VAR 0 9
11961: PUSH
11962: LD_INT 32
11964: PUSH
11965: LD_INT 120
11967: PUSH
11968: LD_INT 70
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11976: LD_VAR 0 6
11980: PPUSH
11981: CALL_OW 264
11985: PUSH
11986: LD_INT 7
11988: PUSH
11989: LD_INT 28
11991: PUSH
11992: LD_INT 45
11994: PUSH
11995: LD_INT 92
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: IN
12004: IFFALSE 12025
// points := [ 35 , 20 , 45 ] ;
12006: LD_ADDR_VAR 0 9
12010: PUSH
12011: LD_INT 35
12013: PUSH
12014: LD_INT 20
12016: PUSH
12017: LD_INT 45
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12025: LD_VAR 0 6
12029: PPUSH
12030: CALL_OW 264
12034: PUSH
12035: LD_INT 47
12037: PUSH
12038: EMPTY
12039: LIST
12040: IN
12041: IFFALSE 12062
// points := [ 67 , 45 , 75 ] ;
12043: LD_ADDR_VAR 0 9
12047: PUSH
12048: LD_INT 67
12050: PUSH
12051: LD_INT 45
12053: PUSH
12054: LD_INT 75
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12062: LD_VAR 0 6
12066: PPUSH
12067: CALL_OW 264
12071: PUSH
12072: LD_INT 26
12074: PUSH
12075: EMPTY
12076: LIST
12077: IN
12078: IFFALSE 12099
// points := [ 120 , 30 , 80 ] ;
12080: LD_ADDR_VAR 0 9
12084: PUSH
12085: LD_INT 120
12087: PUSH
12088: LD_INT 30
12090: PUSH
12091: LD_INT 80
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12099: LD_VAR 0 6
12103: PPUSH
12104: CALL_OW 264
12108: PUSH
12109: LD_INT 22
12111: PUSH
12112: EMPTY
12113: LIST
12114: IN
12115: IFFALSE 12136
// points := [ 40 , 1 , 1 ] ;
12117: LD_ADDR_VAR 0 9
12121: PUSH
12122: LD_INT 40
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: LD_INT 1
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12136: LD_VAR 0 6
12140: PPUSH
12141: CALL_OW 264
12145: PUSH
12146: LD_INT 29
12148: PUSH
12149: EMPTY
12150: LIST
12151: IN
12152: IFFALSE 12173
// points := [ 70 , 200 , 400 ] ;
12154: LD_ADDR_VAR 0 9
12158: PUSH
12159: LD_INT 70
12161: PUSH
12162: LD_INT 200
12164: PUSH
12165: LD_INT 400
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12173: LD_VAR 0 6
12177: PPUSH
12178: CALL_OW 264
12182: PUSH
12183: LD_INT 14
12185: PUSH
12186: LD_INT 53
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: IN
12193: IFFALSE 12214
// points := [ 40 , 10 , 20 ] ;
12195: LD_ADDR_VAR 0 9
12199: PUSH
12200: LD_INT 40
12202: PUSH
12203: LD_INT 10
12205: PUSH
12206: LD_INT 20
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12214: LD_VAR 0 6
12218: PPUSH
12219: CALL_OW 264
12223: PUSH
12224: LD_INT 9
12226: PUSH
12227: EMPTY
12228: LIST
12229: IN
12230: IFFALSE 12251
// points := [ 5 , 70 , 20 ] ;
12232: LD_ADDR_VAR 0 9
12236: PUSH
12237: LD_INT 5
12239: PUSH
12240: LD_INT 70
12242: PUSH
12243: LD_INT 20
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12251: LD_VAR 0 6
12255: PPUSH
12256: CALL_OW 264
12260: PUSH
12261: LD_INT 10
12263: PUSH
12264: EMPTY
12265: LIST
12266: IN
12267: IFFALSE 12288
// points := [ 35 , 110 , 70 ] ;
12269: LD_ADDR_VAR 0 9
12273: PUSH
12274: LD_INT 35
12276: PUSH
12277: LD_INT 110
12279: PUSH
12280: LD_INT 70
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12288: LD_VAR 0 6
12292: PPUSH
12293: CALL_OW 265
12297: PUSH
12298: LD_INT 25
12300: EQUAL
12301: IFFALSE 12322
// points := [ 80 , 65 , 100 ] ;
12303: LD_ADDR_VAR 0 9
12307: PUSH
12308: LD_INT 80
12310: PUSH
12311: LD_INT 65
12313: PUSH
12314: LD_INT 100
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12322: LD_VAR 0 6
12326: PPUSH
12327: CALL_OW 263
12331: PUSH
12332: LD_INT 1
12334: EQUAL
12335: IFFALSE 12370
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12337: LD_ADDR_VAR 0 10
12341: PUSH
12342: LD_VAR 0 10
12346: PUSH
12347: LD_VAR 0 6
12351: PPUSH
12352: CALL_OW 311
12356: PPUSH
12357: LD_INT 3
12359: PPUSH
12360: CALL_OW 259
12364: PUSH
12365: LD_INT 4
12367: MUL
12368: MUL
12369: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12370: LD_VAR 0 6
12374: PPUSH
12375: CALL_OW 263
12379: PUSH
12380: LD_INT 2
12382: EQUAL
12383: IFFALSE 12434
// begin j := IsControledBy ( i ) ;
12385: LD_ADDR_VAR 0 7
12389: PUSH
12390: LD_VAR 0 6
12394: PPUSH
12395: CALL_OW 312
12399: ST_TO_ADDR
// if j then
12400: LD_VAR 0 7
12404: IFFALSE 12434
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12406: LD_ADDR_VAR 0 10
12410: PUSH
12411: LD_VAR 0 10
12415: PUSH
12416: LD_VAR 0 7
12420: PPUSH
12421: LD_INT 3
12423: PPUSH
12424: CALL_OW 259
12428: PUSH
12429: LD_INT 3
12431: MUL
12432: MUL
12433: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12434: LD_VAR 0 6
12438: PPUSH
12439: CALL_OW 264
12443: PUSH
12444: LD_INT 5
12446: PUSH
12447: LD_INT 6
12449: PUSH
12450: LD_INT 46
12452: PUSH
12453: LD_INT 44
12455: PUSH
12456: LD_INT 47
12458: PUSH
12459: LD_INT 45
12461: PUSH
12462: LD_INT 28
12464: PUSH
12465: LD_INT 7
12467: PUSH
12468: LD_INT 27
12470: PUSH
12471: LD_INT 29
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: IN
12486: PUSH
12487: LD_VAR 0 1
12491: PPUSH
12492: LD_INT 52
12494: PPUSH
12495: CALL_OW 321
12499: PUSH
12500: LD_INT 2
12502: EQUAL
12503: AND
12504: IFFALSE 12521
// bpoints := bpoints * 1.2 ;
12506: LD_ADDR_VAR 0 10
12510: PUSH
12511: LD_VAR 0 10
12515: PUSH
12516: LD_REAL  1.20000000000000E+0000
12519: MUL
12520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12521: LD_VAR 0 6
12525: PPUSH
12526: CALL_OW 264
12530: PUSH
12531: LD_INT 6
12533: PUSH
12534: LD_INT 46
12536: PUSH
12537: LD_INT 47
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: IN
12545: IFFALSE 12562
// bpoints := bpoints * 1.2 ;
12547: LD_ADDR_VAR 0 10
12551: PUSH
12552: LD_VAR 0 10
12556: PUSH
12557: LD_REAL  1.20000000000000E+0000
12560: MUL
12561: ST_TO_ADDR
// end ; unit_building :
12562: GO 12576
12564: LD_INT 3
12566: DOUBLE
12567: EQUAL
12568: IFTRUE 12572
12570: GO 12575
12572: POP
// ; end ;
12573: GO 12576
12575: POP
// for j = 1 to 3 do
12576: LD_ADDR_VAR 0 7
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_INT 3
12588: PUSH
12589: FOR_TO
12590: IFFALSE 12643
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12592: LD_ADDR_VAR 0 5
12596: PUSH
12597: LD_VAR 0 5
12601: PPUSH
12602: LD_VAR 0 7
12606: PPUSH
12607: LD_VAR 0 5
12611: PUSH
12612: LD_VAR 0 7
12616: ARRAY
12617: PUSH
12618: LD_VAR 0 9
12622: PUSH
12623: LD_VAR 0 7
12627: ARRAY
12628: PUSH
12629: LD_VAR 0 10
12633: MUL
12634: PLUS
12635: PPUSH
12636: CALL_OW 1
12640: ST_TO_ADDR
12641: GO 12589
12643: POP
12644: POP
// end ;
12645: GO 11124
12647: POP
12648: POP
// result := Replace ( result , 4 , tmp ) ;
12649: LD_ADDR_VAR 0 5
12653: PUSH
12654: LD_VAR 0 5
12658: PPUSH
12659: LD_INT 4
12661: PPUSH
12662: LD_VAR 0 8
12666: PPUSH
12667: CALL_OW 1
12671: ST_TO_ADDR
// end ;
12672: LD_VAR 0 5
12676: RET
// export function DangerAtRange ( unit , range ) ; begin
12677: LD_INT 0
12679: PPUSH
// if not unit then
12680: LD_VAR 0 1
12684: NOT
12685: IFFALSE 12689
// exit ;
12687: GO 12734
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12689: LD_ADDR_VAR 0 3
12693: PUSH
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 255
12703: PPUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: CALL_OW 250
12713: PPUSH
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 251
12723: PPUSH
12724: LD_VAR 0 2
12728: PPUSH
12729: CALL 10976 0 4
12733: ST_TO_ADDR
// end ;
12734: LD_VAR 0 3
12738: RET
// export function DangerInArea ( side , area ) ; begin
12739: LD_INT 0
12741: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12742: LD_ADDR_VAR 0 3
12746: PUSH
12747: LD_VAR 0 2
12751: PPUSH
12752: LD_INT 81
12754: PUSH
12755: LD_VAR 0 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 70
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 3
12773: RET
// export function IsExtension ( b ) ; begin
12774: LD_INT 0
12776: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12777: LD_ADDR_VAR 0 2
12781: PUSH
12782: LD_VAR 0 1
12786: PUSH
12787: LD_INT 23
12789: PUSH
12790: LD_INT 20
12792: PUSH
12793: LD_INT 22
12795: PUSH
12796: LD_INT 17
12798: PUSH
12799: LD_INT 24
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 19
12807: PUSH
12808: LD_INT 16
12810: PUSH
12811: LD_INT 25
12813: PUSH
12814: LD_INT 18
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: IN
12829: ST_TO_ADDR
// end ;
12830: LD_VAR 0 2
12834: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12835: LD_INT 0
12837: PPUSH
12838: PPUSH
12839: PPUSH
// result := [ ] ;
12840: LD_ADDR_VAR 0 4
12844: PUSH
12845: EMPTY
12846: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12847: LD_ADDR_VAR 0 5
12851: PUSH
12852: LD_VAR 0 2
12856: PPUSH
12857: LD_INT 21
12859: PUSH
12860: LD_INT 3
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 70
12871: ST_TO_ADDR
// if not tmp then
12872: LD_VAR 0 5
12876: NOT
12877: IFFALSE 12881
// exit ;
12879: GO 12945
// if checkLink then
12881: LD_VAR 0 3
12885: IFFALSE 12935
// begin for i in tmp do
12887: LD_ADDR_VAR 0 6
12891: PUSH
12892: LD_VAR 0 5
12896: PUSH
12897: FOR_IN
12898: IFFALSE 12933
// if GetBase ( i ) <> base then
12900: LD_VAR 0 6
12904: PPUSH
12905: CALL_OW 274
12909: PUSH
12910: LD_VAR 0 1
12914: NONEQUAL
12915: IFFALSE 12931
// ComLinkToBase ( base , i ) ;
12917: LD_VAR 0 1
12921: PPUSH
12922: LD_VAR 0 6
12926: PPUSH
12927: CALL_OW 169
12931: GO 12897
12933: POP
12934: POP
// end ; result := tmp ;
12935: LD_ADDR_VAR 0 4
12939: PUSH
12940: LD_VAR 0 5
12944: ST_TO_ADDR
// end ;
12945: LD_VAR 0 4
12949: RET
// export function ComComplete ( units , b ) ; var i ; begin
12950: LD_INT 0
12952: PPUSH
12953: PPUSH
// if not units then
12954: LD_VAR 0 1
12958: NOT
12959: IFFALSE 12963
// exit ;
12961: GO 13053
// for i in units do
12963: LD_ADDR_VAR 0 4
12967: PUSH
12968: LD_VAR 0 1
12972: PUSH
12973: FOR_IN
12974: IFFALSE 13051
// if BuildingStatus ( b ) = bs_build then
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 461
12985: PUSH
12986: LD_INT 1
12988: EQUAL
12989: IFFALSE 13049
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12991: LD_VAR 0 4
12995: PPUSH
12996: LD_STRING h
12998: PUSH
12999: LD_VAR 0 2
13003: PPUSH
13004: CALL_OW 250
13008: PUSH
13009: LD_VAR 0 2
13013: PPUSH
13014: CALL_OW 251
13018: PUSH
13019: LD_VAR 0 2
13023: PUSH
13024: LD_INT 0
13026: PUSH
13027: LD_INT 0
13029: PUSH
13030: LD_INT 0
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: PPUSH
13045: CALL_OW 446
13049: GO 12973
13051: POP
13052: POP
// end ;
13053: LD_VAR 0 3
13057: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13058: LD_INT 0
13060: PPUSH
13061: PPUSH
13062: PPUSH
13063: PPUSH
13064: PPUSH
13065: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13066: LD_VAR 0 1
13070: NOT
13071: PUSH
13072: LD_VAR 0 1
13076: PPUSH
13077: CALL_OW 263
13081: PUSH
13082: LD_INT 2
13084: NONEQUAL
13085: OR
13086: IFFALSE 13090
// exit ;
13088: GO 13406
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13090: LD_ADDR_VAR 0 6
13094: PUSH
13095: LD_INT 22
13097: PUSH
13098: LD_VAR 0 1
13102: PPUSH
13103: CALL_OW 255
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: LD_INT 2
13114: PUSH
13115: LD_INT 30
13117: PUSH
13118: LD_INT 36
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 34
13127: PUSH
13128: LD_INT 31
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PPUSH
13144: CALL_OW 69
13148: ST_TO_ADDR
// if not tmp then
13149: LD_VAR 0 6
13153: NOT
13154: IFFALSE 13158
// exit ;
13156: GO 13406
// result := [ ] ;
13158: LD_ADDR_VAR 0 2
13162: PUSH
13163: EMPTY
13164: ST_TO_ADDR
// for i in tmp do
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: LD_VAR 0 6
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13247
// begin t := UnitsInside ( i ) ;
13178: LD_ADDR_VAR 0 4
13182: PUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: CALL_OW 313
13192: ST_TO_ADDR
// if t then
13193: LD_VAR 0 4
13197: IFFALSE 13245
// for j in t do
13199: LD_ADDR_VAR 0 7
13203: PUSH
13204: LD_VAR 0 4
13208: PUSH
13209: FOR_IN
13210: IFFALSE 13243
// result := Replace ( result , result + 1 , j ) ;
13212: LD_ADDR_VAR 0 2
13216: PUSH
13217: LD_VAR 0 2
13221: PPUSH
13222: LD_VAR 0 2
13226: PUSH
13227: LD_INT 1
13229: PLUS
13230: PPUSH
13231: LD_VAR 0 7
13235: PPUSH
13236: CALL_OW 1
13240: ST_TO_ADDR
13241: GO 13209
13243: POP
13244: POP
// end ;
13245: GO 13175
13247: POP
13248: POP
// if not result then
13249: LD_VAR 0 2
13253: NOT
13254: IFFALSE 13258
// exit ;
13256: GO 13406
// mech := result [ 1 ] ;
13258: LD_ADDR_VAR 0 5
13262: PUSH
13263: LD_VAR 0 2
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: ST_TO_ADDR
// if result > 1 then
13272: LD_VAR 0 2
13276: PUSH
13277: LD_INT 1
13279: GREATER
13280: IFFALSE 13392
// begin for i = 2 to result do
13282: LD_ADDR_VAR 0 3
13286: PUSH
13287: DOUBLE
13288: LD_INT 2
13290: DEC
13291: ST_TO_ADDR
13292: LD_VAR 0 2
13296: PUSH
13297: FOR_TO
13298: IFFALSE 13390
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13300: LD_ADDR_VAR 0 4
13304: PUSH
13305: LD_VAR 0 2
13309: PUSH
13310: LD_VAR 0 3
13314: ARRAY
13315: PPUSH
13316: LD_INT 3
13318: PPUSH
13319: CALL_OW 259
13323: PUSH
13324: LD_VAR 0 2
13328: PUSH
13329: LD_VAR 0 3
13333: ARRAY
13334: PPUSH
13335: CALL_OW 432
13339: MINUS
13340: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13341: LD_VAR 0 4
13345: PUSH
13346: LD_VAR 0 5
13350: PPUSH
13351: LD_INT 3
13353: PPUSH
13354: CALL_OW 259
13358: PUSH
13359: LD_VAR 0 5
13363: PPUSH
13364: CALL_OW 432
13368: MINUS
13369: GREATEREQUAL
13370: IFFALSE 13388
// mech := result [ i ] ;
13372: LD_ADDR_VAR 0 5
13376: PUSH
13377: LD_VAR 0 2
13381: PUSH
13382: LD_VAR 0 3
13386: ARRAY
13387: ST_TO_ADDR
// end ;
13388: GO 13297
13390: POP
13391: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13392: LD_VAR 0 1
13396: PPUSH
13397: LD_VAR 0 5
13401: PPUSH
13402: CALL_OW 135
// end ;
13406: LD_VAR 0 2
13410: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13411: LD_INT 0
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
13423: PPUSH
13424: PPUSH
13425: PPUSH
// result := [ ] ;
13426: LD_ADDR_VAR 0 7
13430: PUSH
13431: EMPTY
13432: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13433: LD_VAR 0 1
13437: PPUSH
13438: CALL_OW 266
13442: PUSH
13443: LD_INT 0
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: IN
13453: NOT
13454: IFFALSE 13458
// exit ;
13456: GO 15092
// if name then
13458: LD_VAR 0 3
13462: IFFALSE 13478
// SetBName ( base_dep , name ) ;
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_VAR 0 3
13473: PPUSH
13474: CALL_OW 500
// base := GetBase ( base_dep ) ;
13478: LD_ADDR_VAR 0 15
13482: PUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 274
13492: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13493: LD_ADDR_VAR 0 16
13497: PUSH
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 255
13507: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13508: LD_ADDR_VAR 0 17
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 248
13522: ST_TO_ADDR
// if sources then
13523: LD_VAR 0 5
13527: IFFALSE 13574
// for i = 1 to 3 do
13529: LD_ADDR_VAR 0 8
13533: PUSH
13534: DOUBLE
13535: LD_INT 1
13537: DEC
13538: ST_TO_ADDR
13539: LD_INT 3
13541: PUSH
13542: FOR_TO
13543: IFFALSE 13572
// AddResourceType ( base , i , sources [ i ] ) ;
13545: LD_VAR 0 15
13549: PPUSH
13550: LD_VAR 0 8
13554: PPUSH
13555: LD_VAR 0 5
13559: PUSH
13560: LD_VAR 0 8
13564: ARRAY
13565: PPUSH
13566: CALL_OW 276
13570: GO 13542
13572: POP
13573: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13574: LD_ADDR_VAR 0 18
13578: PUSH
13579: LD_VAR 0 15
13583: PPUSH
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL 12835 0 3
13596: ST_TO_ADDR
// InitHc ;
13597: CALL_OW 19
// InitUc ;
13601: CALL_OW 18
// uc_side := side ;
13605: LD_ADDR_OWVAR 20
13609: PUSH
13610: LD_VAR 0 16
13614: ST_TO_ADDR
// uc_nation := nation ;
13615: LD_ADDR_OWVAR 21
13619: PUSH
13620: LD_VAR 0 17
13624: ST_TO_ADDR
// if buildings then
13625: LD_VAR 0 18
13629: IFFALSE 14951
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13631: LD_ADDR_VAR 0 19
13635: PUSH
13636: LD_VAR 0 18
13640: PPUSH
13641: LD_INT 2
13643: PUSH
13644: LD_INT 30
13646: PUSH
13647: LD_INT 29
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 30
13656: PUSH
13657: LD_INT 30
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: PPUSH
13669: CALL_OW 72
13673: ST_TO_ADDR
// if tmp then
13674: LD_VAR 0 19
13678: IFFALSE 13726
// for i in tmp do
13680: LD_ADDR_VAR 0 8
13684: PUSH
13685: LD_VAR 0 19
13689: PUSH
13690: FOR_IN
13691: IFFALSE 13724
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13693: LD_VAR 0 8
13697: PPUSH
13698: CALL_OW 250
13702: PPUSH
13703: LD_VAR 0 8
13707: PPUSH
13708: CALL_OW 251
13712: PPUSH
13713: LD_VAR 0 16
13717: PPUSH
13718: CALL_OW 441
13722: GO 13690
13724: POP
13725: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13726: LD_VAR 0 18
13730: PPUSH
13731: LD_INT 2
13733: PUSH
13734: LD_INT 30
13736: PUSH
13737: LD_INT 32
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 30
13746: PUSH
13747: LD_INT 33
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: PPUSH
13759: CALL_OW 72
13763: IFFALSE 13851
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13765: LD_ADDR_VAR 0 8
13769: PUSH
13770: LD_VAR 0 18
13774: PPUSH
13775: LD_INT 2
13777: PUSH
13778: LD_INT 30
13780: PUSH
13781: LD_INT 32
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 30
13790: PUSH
13791: LD_INT 33
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: PPUSH
13803: CALL_OW 72
13807: PUSH
13808: FOR_IN
13809: IFFALSE 13849
// begin if not GetBWeapon ( i ) then
13811: LD_VAR 0 8
13815: PPUSH
13816: CALL_OW 269
13820: NOT
13821: IFFALSE 13847
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13823: LD_VAR 0 8
13827: PPUSH
13828: LD_VAR 0 8
13832: PPUSH
13833: LD_VAR 0 2
13837: PPUSH
13838: CALL 15097 0 2
13842: PPUSH
13843: CALL_OW 431
// end ;
13847: GO 13808
13849: POP
13850: POP
// end ; for i = 1 to personel do
13851: LD_ADDR_VAR 0 8
13855: PUSH
13856: DOUBLE
13857: LD_INT 1
13859: DEC
13860: ST_TO_ADDR
13861: LD_VAR 0 6
13865: PUSH
13866: FOR_TO
13867: IFFALSE 14931
// begin if i > 4 then
13869: LD_VAR 0 8
13873: PUSH
13874: LD_INT 4
13876: GREATER
13877: IFFALSE 13881
// break ;
13879: GO 14931
// case i of 1 :
13881: LD_VAR 0 8
13885: PUSH
13886: LD_INT 1
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 13974
13894: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13895: LD_ADDR_VAR 0 12
13899: PUSH
13900: LD_VAR 0 18
13904: PPUSH
13905: LD_INT 22
13907: PUSH
13908: LD_VAR 0 16
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 58
13919: PUSH
13920: EMPTY
13921: LIST
13922: PUSH
13923: LD_INT 2
13925: PUSH
13926: LD_INT 30
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 30
13938: PUSH
13939: LD_INT 4
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 30
13948: PUSH
13949: LD_INT 5
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 72
13971: ST_TO_ADDR
13972: GO 14196
13974: LD_INT 2
13976: DOUBLE
13977: EQUAL
13978: IFTRUE 13982
13980: GO 14044
13982: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13983: LD_ADDR_VAR 0 12
13987: PUSH
13988: LD_VAR 0 18
13992: PPUSH
13993: LD_INT 22
13995: PUSH
13996: LD_VAR 0 16
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 2
14007: PUSH
14008: LD_INT 30
14010: PUSH
14011: LD_INT 0
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 1
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PPUSH
14037: CALL_OW 72
14041: ST_TO_ADDR
14042: GO 14196
14044: LD_INT 3
14046: DOUBLE
14047: EQUAL
14048: IFTRUE 14052
14050: GO 14114
14052: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14053: LD_ADDR_VAR 0 12
14057: PUSH
14058: LD_VAR 0 18
14062: PPUSH
14063: LD_INT 22
14065: PUSH
14066: LD_VAR 0 16
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 2
14077: PUSH
14078: LD_INT 30
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 30
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 72
14111: ST_TO_ADDR
14112: GO 14196
14114: LD_INT 4
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14195
14122: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14123: LD_ADDR_VAR 0 12
14127: PUSH
14128: LD_VAR 0 18
14132: PPUSH
14133: LD_INT 22
14135: PUSH
14136: LD_VAR 0 16
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 30
14150: PUSH
14151: LD_INT 6
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 30
14160: PUSH
14161: LD_INT 7
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 30
14170: PUSH
14171: LD_INT 8
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 72
14192: ST_TO_ADDR
14193: GO 14196
14195: POP
// if i = 1 then
14196: LD_VAR 0 8
14200: PUSH
14201: LD_INT 1
14203: EQUAL
14204: IFFALSE 14315
// begin tmp := [ ] ;
14206: LD_ADDR_VAR 0 19
14210: PUSH
14211: EMPTY
14212: ST_TO_ADDR
// for j in f do
14213: LD_ADDR_VAR 0 9
14217: PUSH
14218: LD_VAR 0 12
14222: PUSH
14223: FOR_IN
14224: IFFALSE 14297
// if GetBType ( j ) = b_bunker then
14226: LD_VAR 0 9
14230: PPUSH
14231: CALL_OW 266
14235: PUSH
14236: LD_INT 32
14238: EQUAL
14239: IFFALSE 14266
// tmp := Insert ( tmp , 1 , j ) else
14241: LD_ADDR_VAR 0 19
14245: PUSH
14246: LD_VAR 0 19
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: LD_VAR 0 9
14258: PPUSH
14259: CALL_OW 2
14263: ST_TO_ADDR
14264: GO 14295
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14266: LD_ADDR_VAR 0 19
14270: PUSH
14271: LD_VAR 0 19
14275: PPUSH
14276: LD_VAR 0 19
14280: PUSH
14281: LD_INT 1
14283: PLUS
14284: PPUSH
14285: LD_VAR 0 9
14289: PPUSH
14290: CALL_OW 2
14294: ST_TO_ADDR
14295: GO 14223
14297: POP
14298: POP
// if tmp then
14299: LD_VAR 0 19
14303: IFFALSE 14315
// f := tmp ;
14305: LD_ADDR_VAR 0 12
14309: PUSH
14310: LD_VAR 0 19
14314: ST_TO_ADDR
// end ; x := personel [ i ] ;
14315: LD_ADDR_VAR 0 13
14319: PUSH
14320: LD_VAR 0 6
14324: PUSH
14325: LD_VAR 0 8
14329: ARRAY
14330: ST_TO_ADDR
// if x = - 1 then
14331: LD_VAR 0 13
14335: PUSH
14336: LD_INT 1
14338: NEG
14339: EQUAL
14340: IFFALSE 14549
// begin for j in f do
14342: LD_ADDR_VAR 0 9
14346: PUSH
14347: LD_VAR 0 12
14351: PUSH
14352: FOR_IN
14353: IFFALSE 14545
// repeat InitHc ;
14355: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14359: LD_VAR 0 9
14363: PPUSH
14364: CALL_OW 266
14368: PUSH
14369: LD_INT 5
14371: EQUAL
14372: IFFALSE 14442
// begin if UnitsInside ( j ) < 3 then
14374: LD_VAR 0 9
14378: PPUSH
14379: CALL_OW 313
14383: PUSH
14384: LD_INT 3
14386: LESS
14387: IFFALSE 14423
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14389: LD_INT 0
14391: PPUSH
14392: LD_INT 5
14394: PUSH
14395: LD_INT 8
14397: PUSH
14398: LD_INT 9
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: LD_VAR 0 17
14410: ARRAY
14411: PPUSH
14412: LD_VAR 0 4
14416: PPUSH
14417: CALL_OW 380
14421: GO 14440
// PrepareHuman ( false , i , skill ) ;
14423: LD_INT 0
14425: PPUSH
14426: LD_VAR 0 8
14430: PPUSH
14431: LD_VAR 0 4
14435: PPUSH
14436: CALL_OW 380
// end else
14440: GO 14459
// PrepareHuman ( false , i , skill ) ;
14442: LD_INT 0
14444: PPUSH
14445: LD_VAR 0 8
14449: PPUSH
14450: LD_VAR 0 4
14454: PPUSH
14455: CALL_OW 380
// un := CreateHuman ;
14459: LD_ADDR_VAR 0 14
14463: PUSH
14464: CALL_OW 44
14468: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14469: LD_ADDR_VAR 0 7
14473: PUSH
14474: LD_VAR 0 7
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: LD_VAR 0 14
14486: PPUSH
14487: CALL_OW 2
14491: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14492: LD_VAR 0 14
14496: PPUSH
14497: LD_VAR 0 9
14501: PPUSH
14502: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14506: LD_VAR 0 9
14510: PPUSH
14511: CALL_OW 313
14515: PUSH
14516: LD_INT 6
14518: EQUAL
14519: PUSH
14520: LD_VAR 0 9
14524: PPUSH
14525: CALL_OW 266
14529: PUSH
14530: LD_INT 32
14532: PUSH
14533: LD_INT 31
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: IN
14540: OR
14541: IFFALSE 14355
14543: GO 14352
14545: POP
14546: POP
// end else
14547: GO 14929
// for j = 1 to x do
14549: LD_ADDR_VAR 0 9
14553: PUSH
14554: DOUBLE
14555: LD_INT 1
14557: DEC
14558: ST_TO_ADDR
14559: LD_VAR 0 13
14563: PUSH
14564: FOR_TO
14565: IFFALSE 14927
// begin InitHc ;
14567: CALL_OW 19
// if not f then
14571: LD_VAR 0 12
14575: NOT
14576: IFFALSE 14665
// begin PrepareHuman ( false , i , skill ) ;
14578: LD_INT 0
14580: PPUSH
14581: LD_VAR 0 8
14585: PPUSH
14586: LD_VAR 0 4
14590: PPUSH
14591: CALL_OW 380
// un := CreateHuman ;
14595: LD_ADDR_VAR 0 14
14599: PUSH
14600: CALL_OW 44
14604: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14605: LD_ADDR_VAR 0 7
14609: PUSH
14610: LD_VAR 0 7
14614: PPUSH
14615: LD_INT 1
14617: PPUSH
14618: LD_VAR 0 14
14622: PPUSH
14623: CALL_OW 2
14627: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14628: LD_VAR 0 14
14632: PPUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 250
14642: PPUSH
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 251
14652: PPUSH
14653: LD_INT 10
14655: PPUSH
14656: LD_INT 0
14658: PPUSH
14659: CALL_OW 50
// continue ;
14663: GO 14564
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14665: LD_VAR 0 12
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PPUSH
14674: CALL_OW 313
14678: PUSH
14679: LD_VAR 0 12
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: PPUSH
14688: CALL_OW 266
14692: PUSH
14693: LD_INT 32
14695: PUSH
14696: LD_INT 31
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: IN
14703: AND
14704: PUSH
14705: LD_VAR 0 12
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: PPUSH
14714: CALL_OW 313
14718: PUSH
14719: LD_INT 6
14721: EQUAL
14722: OR
14723: IFFALSE 14743
// f := Delete ( f , 1 ) ;
14725: LD_ADDR_VAR 0 12
14729: PUSH
14730: LD_VAR 0 12
14734: PPUSH
14735: LD_INT 1
14737: PPUSH
14738: CALL_OW 3
14742: ST_TO_ADDR
// if not f then
14743: LD_VAR 0 12
14747: NOT
14748: IFFALSE 14766
// begin x := x + 2 ;
14750: LD_ADDR_VAR 0 13
14754: PUSH
14755: LD_VAR 0 13
14759: PUSH
14760: LD_INT 2
14762: PLUS
14763: ST_TO_ADDR
// continue ;
14764: GO 14564
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14766: LD_VAR 0 12
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PPUSH
14775: CALL_OW 266
14779: PUSH
14780: LD_INT 5
14782: EQUAL
14783: IFFALSE 14857
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14785: LD_VAR 0 12
14789: PUSH
14790: LD_INT 1
14792: ARRAY
14793: PPUSH
14794: CALL_OW 313
14798: PUSH
14799: LD_INT 3
14801: LESS
14802: IFFALSE 14838
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14804: LD_INT 0
14806: PPUSH
14807: LD_INT 5
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: LD_INT 9
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: PUSH
14821: LD_VAR 0 17
14825: ARRAY
14826: PPUSH
14827: LD_VAR 0 4
14831: PPUSH
14832: CALL_OW 380
14836: GO 14855
// PrepareHuman ( false , i , skill ) ;
14838: LD_INT 0
14840: PPUSH
14841: LD_VAR 0 8
14845: PPUSH
14846: LD_VAR 0 4
14850: PPUSH
14851: CALL_OW 380
// end else
14855: GO 14874
// PrepareHuman ( false , i , skill ) ;
14857: LD_INT 0
14859: PPUSH
14860: LD_VAR 0 8
14864: PPUSH
14865: LD_VAR 0 4
14869: PPUSH
14870: CALL_OW 380
// un := CreateHuman ;
14874: LD_ADDR_VAR 0 14
14878: PUSH
14879: CALL_OW 44
14883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14884: LD_ADDR_VAR 0 7
14888: PUSH
14889: LD_VAR 0 7
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: LD_VAR 0 14
14901: PPUSH
14902: CALL_OW 2
14906: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14907: LD_VAR 0 14
14911: PPUSH
14912: LD_VAR 0 12
14916: PUSH
14917: LD_INT 1
14919: ARRAY
14920: PPUSH
14921: CALL_OW 52
// end ;
14925: GO 14564
14927: POP
14928: POP
// end ;
14929: GO 13866
14931: POP
14932: POP
// result := result ^ buildings ;
14933: LD_ADDR_VAR 0 7
14937: PUSH
14938: LD_VAR 0 7
14942: PUSH
14943: LD_VAR 0 18
14947: ADD
14948: ST_TO_ADDR
// end else
14949: GO 15092
// begin for i = 1 to personel do
14951: LD_ADDR_VAR 0 8
14955: PUSH
14956: DOUBLE
14957: LD_INT 1
14959: DEC
14960: ST_TO_ADDR
14961: LD_VAR 0 6
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15090
// begin if i > 4 then
14969: LD_VAR 0 8
14973: PUSH
14974: LD_INT 4
14976: GREATER
14977: IFFALSE 14981
// break ;
14979: GO 15090
// x := personel [ i ] ;
14981: LD_ADDR_VAR 0 13
14985: PUSH
14986: LD_VAR 0 6
14990: PUSH
14991: LD_VAR 0 8
14995: ARRAY
14996: ST_TO_ADDR
// if x = - 1 then
14997: LD_VAR 0 13
15001: PUSH
15002: LD_INT 1
15004: NEG
15005: EQUAL
15006: IFFALSE 15010
// continue ;
15008: GO 14966
// PrepareHuman ( false , i , skill ) ;
15010: LD_INT 0
15012: PPUSH
15013: LD_VAR 0 8
15017: PPUSH
15018: LD_VAR 0 4
15022: PPUSH
15023: CALL_OW 380
// un := CreateHuman ;
15027: LD_ADDR_VAR 0 14
15031: PUSH
15032: CALL_OW 44
15036: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15037: LD_VAR 0 14
15041: PPUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 250
15051: PPUSH
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 251
15061: PPUSH
15062: LD_INT 10
15064: PPUSH
15065: LD_INT 0
15067: PPUSH
15068: CALL_OW 50
// result := result ^ un ;
15072: LD_ADDR_VAR 0 7
15076: PUSH
15077: LD_VAR 0 7
15081: PUSH
15082: LD_VAR 0 14
15086: ADD
15087: ST_TO_ADDR
// end ;
15088: GO 14966
15090: POP
15091: POP
// end ; end ;
15092: LD_VAR 0 7
15096: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15097: LD_INT 0
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
// result := false ;
15115: LD_ADDR_VAR 0 3
15119: PUSH
15120: LD_INT 0
15122: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15123: LD_VAR 0 1
15127: NOT
15128: PUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 266
15138: PUSH
15139: LD_INT 32
15141: PUSH
15142: LD_INT 33
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: IN
15149: NOT
15150: OR
15151: IFFALSE 15155
// exit ;
15153: GO 16264
// nat := GetNation ( tower ) ;
15155: LD_ADDR_VAR 0 12
15159: PUSH
15160: LD_VAR 0 1
15164: PPUSH
15165: CALL_OW 248
15169: ST_TO_ADDR
// side := GetSide ( tower ) ;
15170: LD_ADDR_VAR 0 16
15174: PUSH
15175: LD_VAR 0 1
15179: PPUSH
15180: CALL_OW 255
15184: ST_TO_ADDR
// x := GetX ( tower ) ;
15185: LD_ADDR_VAR 0 10
15189: PUSH
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 250
15199: ST_TO_ADDR
// y := GetY ( tower ) ;
15200: LD_ADDR_VAR 0 11
15204: PUSH
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 251
15214: ST_TO_ADDR
// if not x or not y then
15215: LD_VAR 0 10
15219: NOT
15220: PUSH
15221: LD_VAR 0 11
15225: NOT
15226: OR
15227: IFFALSE 15231
// exit ;
15229: GO 16264
// weapon := 0 ;
15231: LD_ADDR_VAR 0 18
15235: PUSH
15236: LD_INT 0
15238: ST_TO_ADDR
// fac_list := [ ] ;
15239: LD_ADDR_VAR 0 17
15243: PUSH
15244: EMPTY
15245: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15246: LD_ADDR_VAR 0 6
15250: PUSH
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 274
15260: PPUSH
15261: LD_VAR 0 2
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL 12835 0 3
15273: PPUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 3
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 72
15288: ST_TO_ADDR
// if not factories then
15289: LD_VAR 0 6
15293: NOT
15294: IFFALSE 15298
// exit ;
15296: GO 16264
// for i in factories do
15298: LD_ADDR_VAR 0 8
15302: PUSH
15303: LD_VAR 0 6
15307: PUSH
15308: FOR_IN
15309: IFFALSE 15334
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15311: LD_ADDR_VAR 0 17
15315: PUSH
15316: LD_VAR 0 17
15320: PUSH
15321: LD_VAR 0 8
15325: PPUSH
15326: CALL_OW 478
15330: UNION
15331: ST_TO_ADDR
15332: GO 15308
15334: POP
15335: POP
// if not fac_list then
15336: LD_VAR 0 17
15340: NOT
15341: IFFALSE 15345
// exit ;
15343: GO 16264
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15345: LD_ADDR_VAR 0 5
15349: PUSH
15350: LD_INT 4
15352: PUSH
15353: LD_INT 5
15355: PUSH
15356: LD_INT 9
15358: PUSH
15359: LD_INT 10
15361: PUSH
15362: LD_INT 6
15364: PUSH
15365: LD_INT 7
15367: PUSH
15368: LD_INT 11
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 27
15382: PUSH
15383: LD_INT 28
15385: PUSH
15386: LD_INT 26
15388: PUSH
15389: LD_INT 30
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 43
15400: PUSH
15401: LD_INT 44
15403: PUSH
15404: LD_INT 46
15406: PUSH
15407: LD_INT 45
15409: PUSH
15410: LD_INT 47
15412: PUSH
15413: LD_INT 49
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: PUSH
15429: LD_VAR 0 12
15433: ARRAY
15434: ST_TO_ADDR
// list := list isect fac_list ;
15435: LD_ADDR_VAR 0 5
15439: PUSH
15440: LD_VAR 0 5
15444: PUSH
15445: LD_VAR 0 17
15449: ISECT
15450: ST_TO_ADDR
// if not list then
15451: LD_VAR 0 5
15455: NOT
15456: IFFALSE 15460
// exit ;
15458: GO 16264
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15460: LD_VAR 0 12
15464: PUSH
15465: LD_INT 3
15467: EQUAL
15468: PUSH
15469: LD_INT 49
15471: PUSH
15472: LD_VAR 0 5
15476: IN
15477: AND
15478: PUSH
15479: LD_INT 31
15481: PPUSH
15482: LD_VAR 0 16
15486: PPUSH
15487: CALL_OW 321
15491: PUSH
15492: LD_INT 2
15494: EQUAL
15495: AND
15496: IFFALSE 15556
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15498: LD_INT 22
15500: PUSH
15501: LD_VAR 0 16
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 35
15512: PUSH
15513: LD_INT 49
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 91
15522: PUSH
15523: LD_VAR 0 1
15527: PUSH
15528: LD_INT 10
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: NOT
15546: IFFALSE 15556
// weapon := ru_time_lapser ;
15548: LD_ADDR_VAR 0 18
15552: PUSH
15553: LD_INT 49
15555: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15556: LD_VAR 0 12
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: IN
15571: PUSH
15572: LD_INT 11
15574: PUSH
15575: LD_VAR 0 5
15579: IN
15580: PUSH
15581: LD_INT 30
15583: PUSH
15584: LD_VAR 0 5
15588: IN
15589: OR
15590: AND
15591: PUSH
15592: LD_INT 6
15594: PPUSH
15595: LD_VAR 0 16
15599: PPUSH
15600: CALL_OW 321
15604: PUSH
15605: LD_INT 2
15607: EQUAL
15608: AND
15609: IFFALSE 15774
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15611: LD_INT 22
15613: PUSH
15614: LD_VAR 0 16
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: LD_INT 35
15628: PUSH
15629: LD_INT 11
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 35
15638: PUSH
15639: LD_INT 30
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 91
15653: PUSH
15654: LD_VAR 0 1
15658: PUSH
15659: LD_INT 18
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: NOT
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_VAR 0 16
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: LD_INT 30
15695: PUSH
15696: LD_INT 32
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 30
15705: PUSH
15706: LD_INT 33
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 91
15720: PUSH
15721: LD_VAR 0 1
15725: PUSH
15726: LD_INT 12
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: PPUSH
15742: CALL_OW 69
15746: PUSH
15747: LD_INT 2
15749: GREATER
15750: AND
15751: IFFALSE 15774
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15753: LD_ADDR_VAR 0 18
15757: PUSH
15758: LD_INT 11
15760: PUSH
15761: LD_INT 30
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_VAR 0 12
15772: ARRAY
15773: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15774: LD_VAR 0 18
15778: NOT
15779: PUSH
15780: LD_INT 40
15782: PPUSH
15783: LD_VAR 0 16
15787: PPUSH
15788: CALL_OW 321
15792: PUSH
15793: LD_INT 2
15795: EQUAL
15796: AND
15797: PUSH
15798: LD_INT 7
15800: PUSH
15801: LD_VAR 0 5
15805: IN
15806: PUSH
15807: LD_INT 28
15809: PUSH
15810: LD_VAR 0 5
15814: IN
15815: OR
15816: PUSH
15817: LD_INT 45
15819: PUSH
15820: LD_VAR 0 5
15824: IN
15825: OR
15826: AND
15827: IFFALSE 16081
// begin hex := GetHexInfo ( x , y ) ;
15829: LD_ADDR_VAR 0 4
15833: PUSH
15834: LD_VAR 0 10
15838: PPUSH
15839: LD_VAR 0 11
15843: PPUSH
15844: CALL_OW 546
15848: ST_TO_ADDR
// if hex [ 1 ] then
15849: LD_VAR 0 4
15853: PUSH
15854: LD_INT 1
15856: ARRAY
15857: IFFALSE 15861
// exit ;
15859: GO 16264
// height := hex [ 2 ] ;
15861: LD_ADDR_VAR 0 15
15865: PUSH
15866: LD_VAR 0 4
15870: PUSH
15871: LD_INT 2
15873: ARRAY
15874: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15875: LD_ADDR_VAR 0 14
15879: PUSH
15880: LD_INT 0
15882: PUSH
15883: LD_INT 2
15885: PUSH
15886: LD_INT 3
15888: PUSH
15889: LD_INT 5
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: ST_TO_ADDR
// for i in tmp do
15898: LD_ADDR_VAR 0 8
15902: PUSH
15903: LD_VAR 0 14
15907: PUSH
15908: FOR_IN
15909: IFFALSE 16079
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15911: LD_ADDR_VAR 0 9
15915: PUSH
15916: LD_VAR 0 10
15920: PPUSH
15921: LD_VAR 0 8
15925: PPUSH
15926: LD_INT 5
15928: PPUSH
15929: CALL_OW 272
15933: PUSH
15934: LD_VAR 0 11
15938: PPUSH
15939: LD_VAR 0 8
15943: PPUSH
15944: LD_INT 5
15946: PPUSH
15947: CALL_OW 273
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15956: LD_VAR 0 9
15960: PUSH
15961: LD_INT 1
15963: ARRAY
15964: PPUSH
15965: LD_VAR 0 9
15969: PUSH
15970: LD_INT 2
15972: ARRAY
15973: PPUSH
15974: CALL_OW 488
15978: IFFALSE 16077
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15980: LD_ADDR_VAR 0 4
15984: PUSH
15985: LD_VAR 0 9
15989: PUSH
15990: LD_INT 1
15992: ARRAY
15993: PPUSH
15994: LD_VAR 0 9
15998: PUSH
15999: LD_INT 2
16001: ARRAY
16002: PPUSH
16003: CALL_OW 546
16007: ST_TO_ADDR
// if hex [ 1 ] then
16008: LD_VAR 0 4
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: IFFALSE 16020
// continue ;
16018: GO 15908
// h := hex [ 2 ] ;
16020: LD_ADDR_VAR 0 13
16024: PUSH
16025: LD_VAR 0 4
16029: PUSH
16030: LD_INT 2
16032: ARRAY
16033: ST_TO_ADDR
// if h + 7 < height then
16034: LD_VAR 0 13
16038: PUSH
16039: LD_INT 7
16041: PLUS
16042: PUSH
16043: LD_VAR 0 15
16047: LESS
16048: IFFALSE 16077
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16050: LD_ADDR_VAR 0 18
16054: PUSH
16055: LD_INT 7
16057: PUSH
16058: LD_INT 28
16060: PUSH
16061: LD_INT 45
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: PUSH
16069: LD_VAR 0 12
16073: ARRAY
16074: ST_TO_ADDR
// break ;
16075: GO 16079
// end ; end ; end ;
16077: GO 15908
16079: POP
16080: POP
// end ; if not weapon then
16081: LD_VAR 0 18
16085: NOT
16086: IFFALSE 16146
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16088: LD_ADDR_VAR 0 5
16092: PUSH
16093: LD_VAR 0 5
16097: PUSH
16098: LD_INT 11
16100: PUSH
16101: LD_INT 30
16103: PUSH
16104: LD_INT 49
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: DIFF
16112: ST_TO_ADDR
// if not list then
16113: LD_VAR 0 5
16117: NOT
16118: IFFALSE 16122
// exit ;
16120: GO 16264
// weapon := list [ rand ( 1 , list ) ] ;
16122: LD_ADDR_VAR 0 18
16126: PUSH
16127: LD_VAR 0 5
16131: PUSH
16132: LD_INT 1
16134: PPUSH
16135: LD_VAR 0 5
16139: PPUSH
16140: CALL_OW 12
16144: ARRAY
16145: ST_TO_ADDR
// end ; if weapon then
16146: LD_VAR 0 18
16150: IFFALSE 16264
// begin tmp := CostOfWeapon ( weapon ) ;
16152: LD_ADDR_VAR 0 14
16156: PUSH
16157: LD_VAR 0 18
16161: PPUSH
16162: CALL_OW 451
16166: ST_TO_ADDR
// j := GetBase ( tower ) ;
16167: LD_ADDR_VAR 0 9
16171: PUSH
16172: LD_VAR 0 1
16176: PPUSH
16177: CALL_OW 274
16181: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16182: LD_VAR 0 9
16186: PPUSH
16187: LD_INT 1
16189: PPUSH
16190: CALL_OW 275
16194: PUSH
16195: LD_VAR 0 14
16199: PUSH
16200: LD_INT 1
16202: ARRAY
16203: GREATEREQUAL
16204: PUSH
16205: LD_VAR 0 9
16209: PPUSH
16210: LD_INT 2
16212: PPUSH
16213: CALL_OW 275
16217: PUSH
16218: LD_VAR 0 14
16222: PUSH
16223: LD_INT 2
16225: ARRAY
16226: GREATEREQUAL
16227: AND
16228: PUSH
16229: LD_VAR 0 9
16233: PPUSH
16234: LD_INT 3
16236: PPUSH
16237: CALL_OW 275
16241: PUSH
16242: LD_VAR 0 14
16246: PUSH
16247: LD_INT 3
16249: ARRAY
16250: GREATEREQUAL
16251: AND
16252: IFFALSE 16264
// result := weapon ;
16254: LD_ADDR_VAR 0 3
16258: PUSH
16259: LD_VAR 0 18
16263: ST_TO_ADDR
// end ; end ;
16264: LD_VAR 0 3
16268: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16269: LD_INT 0
16271: PPUSH
16272: PPUSH
// result := true ;
16273: LD_ADDR_VAR 0 3
16277: PUSH
16278: LD_INT 1
16280: ST_TO_ADDR
// if array1 = array2 then
16281: LD_VAR 0 1
16285: PUSH
16286: LD_VAR 0 2
16290: EQUAL
16291: IFFALSE 16351
// begin for i = 1 to array1 do
16293: LD_ADDR_VAR 0 4
16297: PUSH
16298: DOUBLE
16299: LD_INT 1
16301: DEC
16302: ST_TO_ADDR
16303: LD_VAR 0 1
16307: PUSH
16308: FOR_TO
16309: IFFALSE 16347
// if array1 [ i ] <> array2 [ i ] then
16311: LD_VAR 0 1
16315: PUSH
16316: LD_VAR 0 4
16320: ARRAY
16321: PUSH
16322: LD_VAR 0 2
16326: PUSH
16327: LD_VAR 0 4
16331: ARRAY
16332: NONEQUAL
16333: IFFALSE 16345
// begin result := false ;
16335: LD_ADDR_VAR 0 3
16339: PUSH
16340: LD_INT 0
16342: ST_TO_ADDR
// break ;
16343: GO 16347
// end ;
16345: GO 16308
16347: POP
16348: POP
// end else
16349: GO 16359
// result := false ;
16351: LD_ADDR_VAR 0 3
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// end ;
16359: LD_VAR 0 3
16363: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16364: LD_INT 0
16366: PPUSH
16367: PPUSH
// if not array1 or not array2 then
16368: LD_VAR 0 1
16372: NOT
16373: PUSH
16374: LD_VAR 0 2
16378: NOT
16379: OR
16380: IFFALSE 16384
// exit ;
16382: GO 16448
// result := true ;
16384: LD_ADDR_VAR 0 3
16388: PUSH
16389: LD_INT 1
16391: ST_TO_ADDR
// for i = 1 to array1 do
16392: LD_ADDR_VAR 0 4
16396: PUSH
16397: DOUBLE
16398: LD_INT 1
16400: DEC
16401: ST_TO_ADDR
16402: LD_VAR 0 1
16406: PUSH
16407: FOR_TO
16408: IFFALSE 16446
// if array1 [ i ] <> array2 [ i ] then
16410: LD_VAR 0 1
16414: PUSH
16415: LD_VAR 0 4
16419: ARRAY
16420: PUSH
16421: LD_VAR 0 2
16425: PUSH
16426: LD_VAR 0 4
16430: ARRAY
16431: NONEQUAL
16432: IFFALSE 16444
// begin result := false ;
16434: LD_ADDR_VAR 0 3
16438: PUSH
16439: LD_INT 0
16441: ST_TO_ADDR
// break ;
16442: GO 16446
// end ;
16444: GO 16407
16446: POP
16447: POP
// end ;
16448: LD_VAR 0 3
16452: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16453: LD_INT 0
16455: PPUSH
16456: PPUSH
16457: PPUSH
// pom := GetBase ( fac ) ;
16458: LD_ADDR_VAR 0 5
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 274
16472: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16473: LD_ADDR_VAR 0 4
16477: PUSH
16478: LD_VAR 0 2
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_VAR 0 2
16491: PUSH
16492: LD_INT 2
16494: ARRAY
16495: PPUSH
16496: LD_VAR 0 2
16500: PUSH
16501: LD_INT 3
16503: ARRAY
16504: PPUSH
16505: LD_VAR 0 2
16509: PUSH
16510: LD_INT 4
16512: ARRAY
16513: PPUSH
16514: CALL_OW 449
16518: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_VAR 0 5
16528: PPUSH
16529: LD_INT 1
16531: PPUSH
16532: CALL_OW 275
16536: PUSH
16537: LD_VAR 0 4
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: GREATEREQUAL
16546: PUSH
16547: LD_VAR 0 5
16551: PPUSH
16552: LD_INT 2
16554: PPUSH
16555: CALL_OW 275
16559: PUSH
16560: LD_VAR 0 4
16564: PUSH
16565: LD_INT 2
16567: ARRAY
16568: GREATEREQUAL
16569: AND
16570: PUSH
16571: LD_VAR 0 5
16575: PPUSH
16576: LD_INT 3
16578: PPUSH
16579: CALL_OW 275
16583: PUSH
16584: LD_VAR 0 4
16588: PUSH
16589: LD_INT 3
16591: ARRAY
16592: GREATEREQUAL
16593: AND
16594: ST_TO_ADDR
// end ;
16595: LD_VAR 0 3
16599: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
// pom := GetBase ( building ) ;
16606: LD_ADDR_VAR 0 3
16610: PUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 274
16620: ST_TO_ADDR
// if not pom then
16621: LD_VAR 0 3
16625: NOT
16626: IFFALSE 16630
// exit ;
16628: GO 16800
// btype := GetBType ( building ) ;
16630: LD_ADDR_VAR 0 5
16634: PUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 266
16644: ST_TO_ADDR
// if btype = b_armoury then
16645: LD_VAR 0 5
16649: PUSH
16650: LD_INT 4
16652: EQUAL
16653: IFFALSE 16663
// btype := b_barracks ;
16655: LD_ADDR_VAR 0 5
16659: PUSH
16660: LD_INT 5
16662: ST_TO_ADDR
// if btype = b_depot then
16663: LD_VAR 0 5
16667: PUSH
16668: LD_INT 0
16670: EQUAL
16671: IFFALSE 16681
// btype := b_warehouse ;
16673: LD_ADDR_VAR 0 5
16677: PUSH
16678: LD_INT 1
16680: ST_TO_ADDR
// if btype = b_workshop then
16681: LD_VAR 0 5
16685: PUSH
16686: LD_INT 2
16688: EQUAL
16689: IFFALSE 16699
// btype := b_factory ;
16691: LD_ADDR_VAR 0 5
16695: PUSH
16696: LD_INT 3
16698: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16699: LD_ADDR_VAR 0 4
16703: PUSH
16704: LD_VAR 0 5
16708: PPUSH
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 248
16718: PPUSH
16719: CALL_OW 450
16723: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16724: LD_ADDR_VAR 0 2
16728: PUSH
16729: LD_VAR 0 3
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 275
16741: PUSH
16742: LD_VAR 0 4
16746: PUSH
16747: LD_INT 1
16749: ARRAY
16750: GREATEREQUAL
16751: PUSH
16752: LD_VAR 0 3
16756: PPUSH
16757: LD_INT 2
16759: PPUSH
16760: CALL_OW 275
16764: PUSH
16765: LD_VAR 0 4
16769: PUSH
16770: LD_INT 2
16772: ARRAY
16773: GREATEREQUAL
16774: AND
16775: PUSH
16776: LD_VAR 0 3
16780: PPUSH
16781: LD_INT 3
16783: PPUSH
16784: CALL_OW 275
16788: PUSH
16789: LD_VAR 0 4
16793: PUSH
16794: LD_INT 3
16796: ARRAY
16797: GREATEREQUAL
16798: AND
16799: ST_TO_ADDR
// end ;
16800: LD_VAR 0 2
16804: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16805: LD_INT 0
16807: PPUSH
16808: PPUSH
16809: PPUSH
// pom := GetBase ( building ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 274
16824: ST_TO_ADDR
// if not pom then
16825: LD_VAR 0 4
16829: NOT
16830: IFFALSE 16834
// exit ;
16832: GO 16935
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16834: LD_ADDR_VAR 0 5
16838: PUSH
16839: LD_VAR 0 2
16843: PPUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 248
16853: PPUSH
16854: CALL_OW 450
16858: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16859: LD_ADDR_VAR 0 3
16863: PUSH
16864: LD_VAR 0 4
16868: PPUSH
16869: LD_INT 1
16871: PPUSH
16872: CALL_OW 275
16876: PUSH
16877: LD_VAR 0 5
16881: PUSH
16882: LD_INT 1
16884: ARRAY
16885: GREATEREQUAL
16886: PUSH
16887: LD_VAR 0 4
16891: PPUSH
16892: LD_INT 2
16894: PPUSH
16895: CALL_OW 275
16899: PUSH
16900: LD_VAR 0 5
16904: PUSH
16905: LD_INT 2
16907: ARRAY
16908: GREATEREQUAL
16909: AND
16910: PUSH
16911: LD_VAR 0 4
16915: PPUSH
16916: LD_INT 3
16918: PPUSH
16919: CALL_OW 275
16923: PUSH
16924: LD_VAR 0 5
16928: PUSH
16929: LD_INT 3
16931: ARRAY
16932: GREATEREQUAL
16933: AND
16934: ST_TO_ADDR
// end ;
16935: LD_VAR 0 3
16939: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16940: LD_INT 0
16942: PPUSH
16943: PPUSH
16944: PPUSH
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
16950: PPUSH
16951: PPUSH
16952: PPUSH
// result := false ;
16953: LD_ADDR_VAR 0 8
16957: PUSH
16958: LD_INT 0
16960: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16961: LD_VAR 0 5
16965: NOT
16966: PUSH
16967: LD_VAR 0 1
16971: NOT
16972: OR
16973: PUSH
16974: LD_VAR 0 2
16978: NOT
16979: OR
16980: PUSH
16981: LD_VAR 0 3
16985: NOT
16986: OR
16987: IFFALSE 16991
// exit ;
16989: GO 17805
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16991: LD_ADDR_VAR 0 14
16995: PUSH
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_VAR 0 2
17005: PPUSH
17006: LD_VAR 0 3
17010: PPUSH
17011: LD_VAR 0 4
17015: PPUSH
17016: LD_VAR 0 5
17020: PUSH
17021: LD_INT 1
17023: ARRAY
17024: PPUSH
17025: CALL_OW 248
17029: PPUSH
17030: LD_INT 0
17032: PPUSH
17033: CALL 19058 0 6
17037: ST_TO_ADDR
// if not hexes then
17038: LD_VAR 0 14
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17805
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17047: LD_ADDR_VAR 0 17
17051: PUSH
17052: LD_VAR 0 5
17056: PPUSH
17057: LD_INT 22
17059: PUSH
17060: LD_VAR 0 13
17064: PPUSH
17065: CALL_OW 255
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 2
17076: PUSH
17077: LD_INT 30
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 30
17089: PUSH
17090: LD_INT 1
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PPUSH
17106: CALL_OW 72
17110: ST_TO_ADDR
// for i = 1 to hexes do
17111: LD_ADDR_VAR 0 9
17115: PUSH
17116: DOUBLE
17117: LD_INT 1
17119: DEC
17120: ST_TO_ADDR
17121: LD_VAR 0 14
17125: PUSH
17126: FOR_TO
17127: IFFALSE 17803
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17129: LD_ADDR_VAR 0 13
17133: PUSH
17134: LD_VAR 0 14
17138: PUSH
17139: LD_VAR 0 9
17143: ARRAY
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: PPUSH
17149: LD_VAR 0 14
17153: PUSH
17154: LD_VAR 0 9
17158: ARRAY
17159: PUSH
17160: LD_INT 2
17162: ARRAY
17163: PPUSH
17164: CALL_OW 428
17168: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17169: LD_VAR 0 14
17173: PUSH
17174: LD_VAR 0 9
17178: ARRAY
17179: PUSH
17180: LD_INT 1
17182: ARRAY
17183: PPUSH
17184: LD_VAR 0 14
17188: PUSH
17189: LD_VAR 0 9
17193: ARRAY
17194: PUSH
17195: LD_INT 2
17197: ARRAY
17198: PPUSH
17199: CALL_OW 351
17203: PUSH
17204: LD_VAR 0 14
17208: PUSH
17209: LD_VAR 0 9
17213: ARRAY
17214: PUSH
17215: LD_INT 1
17217: ARRAY
17218: PPUSH
17219: LD_VAR 0 14
17223: PUSH
17224: LD_VAR 0 9
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: CALL_OW 488
17238: NOT
17239: OR
17240: PUSH
17241: LD_VAR 0 13
17245: PPUSH
17246: CALL_OW 247
17250: PUSH
17251: LD_INT 3
17253: EQUAL
17254: OR
17255: IFFALSE 17261
// exit ;
17257: POP
17258: POP
17259: GO 17805
// if not tmp then
17261: LD_VAR 0 13
17265: NOT
17266: IFFALSE 17270
// continue ;
17268: GO 17126
// result := true ;
17270: LD_ADDR_VAR 0 8
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17278: LD_VAR 0 6
17282: PUSH
17283: LD_VAR 0 13
17287: PPUSH
17288: CALL_OW 247
17292: PUSH
17293: LD_INT 2
17295: EQUAL
17296: AND
17297: PUSH
17298: LD_VAR 0 13
17302: PPUSH
17303: CALL_OW 263
17307: PUSH
17308: LD_INT 1
17310: EQUAL
17311: AND
17312: IFFALSE 17476
// begin if IsDrivenBy ( tmp ) then
17314: LD_VAR 0 13
17318: PPUSH
17319: CALL_OW 311
17323: IFFALSE 17327
// continue ;
17325: GO 17126
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17327: LD_VAR 0 6
17331: PPUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 60
17337: PUSH
17338: EMPTY
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: LD_INT 55
17350: PUSH
17351: EMPTY
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PPUSH
17362: CALL_OW 72
17366: IFFALSE 17474
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17368: LD_ADDR_VAR 0 18
17372: PUSH
17373: LD_VAR 0 6
17377: PPUSH
17378: LD_INT 3
17380: PUSH
17381: LD_INT 60
17383: PUSH
17384: EMPTY
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 55
17396: PUSH
17397: EMPTY
17398: LIST
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PPUSH
17408: CALL_OW 72
17412: PUSH
17413: LD_INT 1
17415: ARRAY
17416: ST_TO_ADDR
// if IsInUnit ( driver ) then
17417: LD_VAR 0 18
17421: PPUSH
17422: CALL_OW 310
17426: IFFALSE 17437
// ComExit ( driver ) ;
17428: LD_VAR 0 18
17432: PPUSH
17433: CALL 42859 0 1
// AddComEnterUnit ( driver , tmp ) ;
17437: LD_VAR 0 18
17441: PPUSH
17442: LD_VAR 0 13
17446: PPUSH
17447: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17451: LD_VAR 0 18
17455: PPUSH
17456: LD_VAR 0 7
17460: PPUSH
17461: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17465: LD_VAR 0 18
17469: PPUSH
17470: CALL_OW 181
// end ; continue ;
17474: GO 17126
// end ; if not cleaners or not tmp in cleaners then
17476: LD_VAR 0 6
17480: NOT
17481: PUSH
17482: LD_VAR 0 13
17486: PUSH
17487: LD_VAR 0 6
17491: IN
17492: NOT
17493: OR
17494: IFFALSE 17801
// begin if dep then
17496: LD_VAR 0 17
17500: IFFALSE 17636
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17502: LD_ADDR_VAR 0 16
17506: PUSH
17507: LD_VAR 0 17
17511: PUSH
17512: LD_INT 1
17514: ARRAY
17515: PPUSH
17516: CALL_OW 250
17520: PPUSH
17521: LD_VAR 0 17
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 254
17534: PPUSH
17535: LD_INT 5
17537: PPUSH
17538: CALL_OW 272
17542: PUSH
17543: LD_VAR 0 17
17547: PUSH
17548: LD_INT 1
17550: ARRAY
17551: PPUSH
17552: CALL_OW 251
17556: PPUSH
17557: LD_VAR 0 17
17561: PUSH
17562: LD_INT 1
17564: ARRAY
17565: PPUSH
17566: CALL_OW 254
17570: PPUSH
17571: LD_INT 5
17573: PPUSH
17574: CALL_OW 273
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17583: LD_VAR 0 16
17587: PUSH
17588: LD_INT 1
17590: ARRAY
17591: PPUSH
17592: LD_VAR 0 16
17596: PUSH
17597: LD_INT 2
17599: ARRAY
17600: PPUSH
17601: CALL_OW 488
17605: IFFALSE 17636
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17607: LD_VAR 0 13
17611: PPUSH
17612: LD_VAR 0 16
17616: PUSH
17617: LD_INT 1
17619: ARRAY
17620: PPUSH
17621: LD_VAR 0 16
17625: PUSH
17626: LD_INT 2
17628: ARRAY
17629: PPUSH
17630: CALL_OW 111
// continue ;
17634: GO 17126
// end ; end ; r := GetDir ( tmp ) ;
17636: LD_ADDR_VAR 0 15
17640: PUSH
17641: LD_VAR 0 13
17645: PPUSH
17646: CALL_OW 254
17650: ST_TO_ADDR
// if r = 5 then
17651: LD_VAR 0 15
17655: PUSH
17656: LD_INT 5
17658: EQUAL
17659: IFFALSE 17669
// r := 0 ;
17661: LD_ADDR_VAR 0 15
17665: PUSH
17666: LD_INT 0
17668: ST_TO_ADDR
// for j = r to 5 do
17669: LD_ADDR_VAR 0 10
17673: PUSH
17674: DOUBLE
17675: LD_VAR 0 15
17679: DEC
17680: ST_TO_ADDR
17681: LD_INT 5
17683: PUSH
17684: FOR_TO
17685: IFFALSE 17799
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17687: LD_ADDR_VAR 0 11
17691: PUSH
17692: LD_VAR 0 13
17696: PPUSH
17697: CALL_OW 250
17701: PPUSH
17702: LD_VAR 0 10
17706: PPUSH
17707: LD_INT 2
17709: PPUSH
17710: CALL_OW 272
17714: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17715: LD_ADDR_VAR 0 12
17719: PUSH
17720: LD_VAR 0 13
17724: PPUSH
17725: CALL_OW 251
17729: PPUSH
17730: LD_VAR 0 10
17734: PPUSH
17735: LD_INT 2
17737: PPUSH
17738: CALL_OW 273
17742: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17743: LD_VAR 0 11
17747: PPUSH
17748: LD_VAR 0 12
17752: PPUSH
17753: CALL_OW 488
17757: PUSH
17758: LD_VAR 0 11
17762: PPUSH
17763: LD_VAR 0 12
17767: PPUSH
17768: CALL_OW 428
17772: NOT
17773: AND
17774: IFFALSE 17797
// begin ComMoveXY ( tmp , _x , _y ) ;
17776: LD_VAR 0 13
17780: PPUSH
17781: LD_VAR 0 11
17785: PPUSH
17786: LD_VAR 0 12
17790: PPUSH
17791: CALL_OW 111
// break ;
17795: GO 17799
// end ; end ;
17797: GO 17684
17799: POP
17800: POP
// end ; end ;
17801: GO 17126
17803: POP
17804: POP
// end ;
17805: LD_VAR 0 8
17809: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17810: LD_INT 0
17812: PPUSH
// result := true ;
17813: LD_ADDR_VAR 0 3
17817: PUSH
17818: LD_INT 1
17820: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17821: LD_VAR 0 2
17825: PUSH
17826: LD_INT 24
17828: DOUBLE
17829: EQUAL
17830: IFTRUE 17840
17832: LD_INT 33
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 17865
17840: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17841: LD_ADDR_VAR 0 3
17845: PUSH
17846: LD_INT 32
17848: PPUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 321
17858: PUSH
17859: LD_INT 2
17861: EQUAL
17862: ST_TO_ADDR
17863: GO 18181
17865: LD_INT 20
17867: DOUBLE
17868: EQUAL
17869: IFTRUE 17873
17871: GO 17898
17873: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17874: LD_ADDR_VAR 0 3
17878: PUSH
17879: LD_INT 6
17881: PPUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 321
17891: PUSH
17892: LD_INT 2
17894: EQUAL
17895: ST_TO_ADDR
17896: GO 18181
17898: LD_INT 22
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17912
17904: LD_INT 36
17906: DOUBLE
17907: EQUAL
17908: IFTRUE 17912
17910: GO 17937
17912: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17913: LD_ADDR_VAR 0 3
17917: PUSH
17918: LD_INT 15
17920: PPUSH
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 321
17930: PUSH
17931: LD_INT 2
17933: EQUAL
17934: ST_TO_ADDR
17935: GO 18181
17937: LD_INT 30
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17945
17943: GO 17970
17945: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17946: LD_ADDR_VAR 0 3
17950: PUSH
17951: LD_INT 20
17953: PPUSH
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 321
17963: PUSH
17964: LD_INT 2
17966: EQUAL
17967: ST_TO_ADDR
17968: GO 18181
17970: LD_INT 28
17972: DOUBLE
17973: EQUAL
17974: IFTRUE 17984
17976: LD_INT 21
17978: DOUBLE
17979: EQUAL
17980: IFTRUE 17984
17982: GO 18009
17984: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_INT 21
17992: PPUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 321
18002: PUSH
18003: LD_INT 2
18005: EQUAL
18006: ST_TO_ADDR
18007: GO 18181
18009: LD_INT 16
18011: DOUBLE
18012: EQUAL
18013: IFTRUE 18017
18015: GO 18042
18017: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
18018: LD_ADDR_VAR 0 3
18022: PUSH
18023: LD_INT 84
18025: PPUSH
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 321
18035: PUSH
18036: LD_INT 2
18038: EQUAL
18039: ST_TO_ADDR
18040: GO 18181
18042: LD_INT 19
18044: DOUBLE
18045: EQUAL
18046: IFTRUE 18056
18048: LD_INT 23
18050: DOUBLE
18051: EQUAL
18052: IFTRUE 18056
18054: GO 18081
18056: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18057: LD_ADDR_VAR 0 3
18061: PUSH
18062: LD_INT 83
18064: PPUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 321
18074: PUSH
18075: LD_INT 2
18077: EQUAL
18078: ST_TO_ADDR
18079: GO 18181
18081: LD_INT 17
18083: DOUBLE
18084: EQUAL
18085: IFTRUE 18089
18087: GO 18114
18089: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18090: LD_ADDR_VAR 0 3
18094: PUSH
18095: LD_INT 39
18097: PPUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 321
18107: PUSH
18108: LD_INT 2
18110: EQUAL
18111: ST_TO_ADDR
18112: GO 18181
18114: LD_INT 18
18116: DOUBLE
18117: EQUAL
18118: IFTRUE 18122
18120: GO 18147
18122: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18123: LD_ADDR_VAR 0 3
18127: PUSH
18128: LD_INT 40
18130: PPUSH
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 321
18140: PUSH
18141: LD_INT 2
18143: EQUAL
18144: ST_TO_ADDR
18145: GO 18181
18147: LD_INT 27
18149: DOUBLE
18150: EQUAL
18151: IFTRUE 18155
18153: GO 18180
18155: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18156: LD_ADDR_VAR 0 3
18160: PUSH
18161: LD_INT 35
18163: PPUSH
18164: LD_VAR 0 1
18168: PPUSH
18169: CALL_OW 321
18173: PUSH
18174: LD_INT 2
18176: EQUAL
18177: ST_TO_ADDR
18178: GO 18181
18180: POP
// end ;
18181: LD_VAR 0 3
18185: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18186: LD_INT 0
18188: PPUSH
18189: PPUSH
18190: PPUSH
18191: PPUSH
18192: PPUSH
18193: PPUSH
18194: PPUSH
18195: PPUSH
18196: PPUSH
18197: PPUSH
18198: PPUSH
// result := false ;
18199: LD_ADDR_VAR 0 6
18203: PUSH
18204: LD_INT 0
18206: ST_TO_ADDR
// if btype = b_depot then
18207: LD_VAR 0 2
18211: PUSH
18212: LD_INT 0
18214: EQUAL
18215: IFFALSE 18227
// begin result := true ;
18217: LD_ADDR_VAR 0 6
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// exit ;
18225: GO 19053
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18227: LD_VAR 0 1
18231: NOT
18232: PUSH
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 266
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: IN
18253: NOT
18254: OR
18255: PUSH
18256: LD_VAR 0 2
18260: NOT
18261: OR
18262: PUSH
18263: LD_VAR 0 5
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 3
18279: PUSH
18280: LD_INT 4
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: IN
18294: NOT
18295: OR
18296: PUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_VAR 0 4
18306: PPUSH
18307: CALL_OW 488
18311: NOT
18312: OR
18313: IFFALSE 18317
// exit ;
18315: GO 19053
// side := GetSide ( depot ) ;
18317: LD_ADDR_VAR 0 9
18321: PUSH
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL_OW 255
18331: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18332: LD_VAR 0 9
18336: PPUSH
18337: LD_VAR 0 2
18341: PPUSH
18342: CALL 17810 0 2
18346: NOT
18347: IFFALSE 18351
// exit ;
18349: GO 19053
// pom := GetBase ( depot ) ;
18351: LD_ADDR_VAR 0 10
18355: PUSH
18356: LD_VAR 0 1
18360: PPUSH
18361: CALL_OW 274
18365: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18366: LD_ADDR_VAR 0 11
18370: PUSH
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_VAR 0 1
18380: PPUSH
18381: CALL_OW 248
18385: PPUSH
18386: CALL_OW 450
18390: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18391: LD_VAR 0 10
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: CALL_OW 275
18403: PUSH
18404: LD_VAR 0 11
18408: PUSH
18409: LD_INT 1
18411: ARRAY
18412: GREATEREQUAL
18413: PUSH
18414: LD_VAR 0 10
18418: PPUSH
18419: LD_INT 2
18421: PPUSH
18422: CALL_OW 275
18426: PUSH
18427: LD_VAR 0 11
18431: PUSH
18432: LD_INT 2
18434: ARRAY
18435: GREATEREQUAL
18436: AND
18437: PUSH
18438: LD_VAR 0 10
18442: PPUSH
18443: LD_INT 3
18445: PPUSH
18446: CALL_OW 275
18450: PUSH
18451: LD_VAR 0 11
18455: PUSH
18456: LD_INT 3
18458: ARRAY
18459: GREATEREQUAL
18460: AND
18461: NOT
18462: IFFALSE 18466
// exit ;
18464: GO 19053
// if GetBType ( depot ) = b_depot then
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 266
18475: PUSH
18476: LD_INT 0
18478: EQUAL
18479: IFFALSE 18491
// dist := 28 else
18481: LD_ADDR_VAR 0 14
18485: PUSH
18486: LD_INT 28
18488: ST_TO_ADDR
18489: GO 18499
// dist := 36 ;
18491: LD_ADDR_VAR 0 14
18495: PUSH
18496: LD_INT 36
18498: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_VAR 0 3
18508: PPUSH
18509: LD_VAR 0 4
18513: PPUSH
18514: CALL_OW 297
18518: PUSH
18519: LD_VAR 0 14
18523: GREATER
18524: IFFALSE 18528
// exit ;
18526: GO 19053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18528: LD_ADDR_VAR 0 12
18532: PUSH
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: LD_VAR 0 4
18547: PPUSH
18548: LD_VAR 0 5
18552: PPUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 248
18562: PPUSH
18563: LD_INT 0
18565: PPUSH
18566: CALL 19058 0 6
18570: ST_TO_ADDR
// if not hexes then
18571: LD_VAR 0 12
18575: NOT
18576: IFFALSE 18580
// exit ;
18578: GO 19053
// hex := GetHexInfo ( x , y ) ;
18580: LD_ADDR_VAR 0 15
18584: PUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: LD_VAR 0 4
18594: PPUSH
18595: CALL_OW 546
18599: ST_TO_ADDR
// if hex [ 1 ] then
18600: LD_VAR 0 15
18604: PUSH
18605: LD_INT 1
18607: ARRAY
18608: IFFALSE 18612
// exit ;
18610: GO 19053
// height := hex [ 2 ] ;
18612: LD_ADDR_VAR 0 13
18616: PUSH
18617: LD_VAR 0 15
18621: PUSH
18622: LD_INT 2
18624: ARRAY
18625: ST_TO_ADDR
// for i = 1 to hexes do
18626: LD_ADDR_VAR 0 7
18630: PUSH
18631: DOUBLE
18632: LD_INT 1
18634: DEC
18635: ST_TO_ADDR
18636: LD_VAR 0 12
18640: PUSH
18641: FOR_TO
18642: IFFALSE 18972
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18644: LD_VAR 0 12
18648: PUSH
18649: LD_VAR 0 7
18653: ARRAY
18654: PUSH
18655: LD_INT 1
18657: ARRAY
18658: PPUSH
18659: LD_VAR 0 12
18663: PUSH
18664: LD_VAR 0 7
18668: ARRAY
18669: PUSH
18670: LD_INT 2
18672: ARRAY
18673: PPUSH
18674: CALL_OW 488
18678: NOT
18679: PUSH
18680: LD_VAR 0 12
18684: PUSH
18685: LD_VAR 0 7
18689: ARRAY
18690: PUSH
18691: LD_INT 1
18693: ARRAY
18694: PPUSH
18695: LD_VAR 0 12
18699: PUSH
18700: LD_VAR 0 7
18704: ARRAY
18705: PUSH
18706: LD_INT 2
18708: ARRAY
18709: PPUSH
18710: CALL_OW 428
18714: PUSH
18715: LD_INT 0
18717: GREATER
18718: OR
18719: PUSH
18720: LD_VAR 0 12
18724: PUSH
18725: LD_VAR 0 7
18729: ARRAY
18730: PUSH
18731: LD_INT 1
18733: ARRAY
18734: PPUSH
18735: LD_VAR 0 12
18739: PUSH
18740: LD_VAR 0 7
18744: ARRAY
18745: PUSH
18746: LD_INT 2
18748: ARRAY
18749: PPUSH
18750: CALL_OW 351
18754: OR
18755: IFFALSE 18761
// exit ;
18757: POP
18758: POP
18759: GO 19053
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18761: LD_ADDR_VAR 0 8
18765: PUSH
18766: LD_VAR 0 12
18770: PUSH
18771: LD_VAR 0 7
18775: ARRAY
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PPUSH
18781: LD_VAR 0 12
18785: PUSH
18786: LD_VAR 0 7
18790: ARRAY
18791: PUSH
18792: LD_INT 2
18794: ARRAY
18795: PPUSH
18796: CALL_OW 546
18800: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18801: LD_VAR 0 8
18805: PUSH
18806: LD_INT 1
18808: ARRAY
18809: PUSH
18810: LD_VAR 0 8
18814: PUSH
18815: LD_INT 2
18817: ARRAY
18818: PUSH
18819: LD_VAR 0 13
18823: PUSH
18824: LD_INT 2
18826: PLUS
18827: GREATER
18828: OR
18829: PUSH
18830: LD_VAR 0 8
18834: PUSH
18835: LD_INT 2
18837: ARRAY
18838: PUSH
18839: LD_VAR 0 13
18843: PUSH
18844: LD_INT 2
18846: MINUS
18847: LESS
18848: OR
18849: PUSH
18850: LD_VAR 0 8
18854: PUSH
18855: LD_INT 3
18857: ARRAY
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 8
18864: PUSH
18865: LD_INT 9
18867: PUSH
18868: LD_INT 10
18870: PUSH
18871: LD_INT 11
18873: PUSH
18874: LD_INT 12
18876: PUSH
18877: LD_INT 13
18879: PUSH
18880: LD_INT 16
18882: PUSH
18883: LD_INT 17
18885: PUSH
18886: LD_INT 18
18888: PUSH
18889: LD_INT 19
18891: PUSH
18892: LD_INT 20
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: IN
18913: NOT
18914: OR
18915: PUSH
18916: LD_VAR 0 8
18920: PUSH
18921: LD_INT 5
18923: ARRAY
18924: NOT
18925: OR
18926: PUSH
18927: LD_VAR 0 8
18931: PUSH
18932: LD_INT 6
18934: ARRAY
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 7
18944: PUSH
18945: LD_INT 9
18947: PUSH
18948: LD_INT 10
18950: PUSH
18951: LD_INT 11
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: IN
18962: NOT
18963: OR
18964: IFFALSE 18970
// exit ;
18966: POP
18967: POP
18968: GO 19053
// end ;
18970: GO 18641
18972: POP
18973: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18974: LD_VAR 0 9
18978: PPUSH
18979: LD_VAR 0 3
18983: PPUSH
18984: LD_VAR 0 4
18988: PPUSH
18989: LD_INT 20
18991: PPUSH
18992: CALL 10976 0 4
18996: PUSH
18997: LD_INT 4
18999: ARRAY
19000: IFFALSE 19004
// exit ;
19002: GO 19053
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
19004: LD_VAR 0 2
19008: PUSH
19009: LD_INT 29
19011: PUSH
19012: LD_INT 30
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: IN
19019: PUSH
19020: LD_VAR 0 3
19024: PPUSH
19025: LD_VAR 0 4
19029: PPUSH
19030: LD_VAR 0 9
19034: PPUSH
19035: CALL_OW 440
19039: NOT
19040: AND
19041: IFFALSE 19045
// exit ;
19043: GO 19053
// result := true ;
19045: LD_ADDR_VAR 0 6
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// end ;
19053: LD_VAR 0 6
19057: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19058: LD_INT 0
19060: PPUSH
19061: PPUSH
19062: PPUSH
19063: PPUSH
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
19074: PPUSH
19075: PPUSH
19076: PPUSH
19077: PPUSH
19078: PPUSH
19079: PPUSH
19080: PPUSH
19081: PPUSH
19082: PPUSH
19083: PPUSH
19084: PPUSH
19085: PPUSH
19086: PPUSH
19087: PPUSH
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
19094: PPUSH
19095: PPUSH
19096: PPUSH
19097: PPUSH
19098: PPUSH
19099: PPUSH
19100: PPUSH
19101: PPUSH
19102: PPUSH
19103: PPUSH
19104: PPUSH
19105: PPUSH
19106: PPUSH
19107: PPUSH
19108: PPUSH
19109: PPUSH
19110: PPUSH
19111: PPUSH
19112: PPUSH
19113: PPUSH
19114: PPUSH
19115: PPUSH
19116: PPUSH
19117: PPUSH
// result = [ ] ;
19118: LD_ADDR_VAR 0 7
19122: PUSH
19123: EMPTY
19124: ST_TO_ADDR
// temp_list = [ ] ;
19125: LD_ADDR_VAR 0 9
19129: PUSH
19130: EMPTY
19131: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19132: LD_VAR 0 4
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 3
19148: PUSH
19149: LD_INT 4
19151: PUSH
19152: LD_INT 5
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: IN
19163: NOT
19164: PUSH
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: IN
19180: PUSH
19181: LD_VAR 0 5
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: IN
19200: NOT
19201: AND
19202: OR
19203: IFFALSE 19207
// exit ;
19205: GO 37598
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19207: LD_VAR 0 1
19211: PUSH
19212: LD_INT 6
19214: PUSH
19215: LD_INT 7
19217: PUSH
19218: LD_INT 8
19220: PUSH
19221: LD_INT 13
19223: PUSH
19224: LD_INT 12
19226: PUSH
19227: LD_INT 15
19229: PUSH
19230: LD_INT 11
19232: PUSH
19233: LD_INT 14
19235: PUSH
19236: LD_INT 10
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: IN
19250: IFFALSE 19260
// btype = b_lab ;
19252: LD_ADDR_VAR 0 1
19256: PUSH
19257: LD_INT 6
19259: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19260: LD_VAR 0 6
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: IN
19279: NOT
19280: PUSH
19281: LD_VAR 0 1
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: LD_INT 3
19297: PUSH
19298: LD_INT 6
19300: PUSH
19301: LD_INT 36
19303: PUSH
19304: LD_INT 4
19306: PUSH
19307: LD_INT 5
19309: PUSH
19310: LD_INT 31
19312: PUSH
19313: LD_INT 32
19315: PUSH
19316: LD_INT 33
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: IN
19332: NOT
19333: PUSH
19334: LD_VAR 0 6
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: AND
19343: OR
19344: PUSH
19345: LD_VAR 0 1
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: LD_INT 3
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: IN
19360: NOT
19361: PUSH
19362: LD_VAR 0 6
19366: PUSH
19367: LD_INT 2
19369: EQUAL
19370: AND
19371: OR
19372: IFFALSE 19382
// mode = 0 ;
19374: LD_ADDR_VAR 0 6
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// case mode of 0 :
19382: LD_VAR 0 6
19386: PUSH
19387: LD_INT 0
19389: DOUBLE
19390: EQUAL
19391: IFTRUE 19395
19393: GO 30848
19395: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19396: LD_ADDR_VAR 0 11
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: LD_INT 2
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: LD_INT 3
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: NEG
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19589: LD_ADDR_VAR 0 12
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 1
19673: NEG
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 2
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 2
19712: NEG
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: NEG
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 3
19746: NEG
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 3
19757: NEG
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19785: LD_ADDR_VAR 0 13
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 2
19908: NEG
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: NEG
19933: PUSH
19934: LD_INT 3
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 3
19944: NEG
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 3
19956: NEG
19957: PUSH
19958: LD_INT 3
19960: NEG
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19984: LD_ADDR_VAR 0 14
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: PUSH
20023: LD_INT 1
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 1
20053: NEG
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: LD_INT 2
20069: NEG
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 2
20080: NEG
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: LD_INT 3
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: LD_INT 3
20145: NEG
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: LD_INT 2
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20180: LD_ADDR_VAR 0 15
20184: PUSH
20185: LD_INT 0
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 2
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 2
20303: NEG
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 3
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 3
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20373: LD_ADDR_VAR 0 16
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 2
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: NEG
20509: PUSH
20510: LD_INT 2
20512: NEG
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 3
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 3
20530: PUSH
20531: LD_INT 3
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: LD_INT 3
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20566: LD_ADDR_VAR 0 17
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 1
20635: NEG
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: LD_INT 2
20651: NEG
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: LD_INT 2
20662: NEG
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: PUSH
20671: LD_INT 1
20673: NEG
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: LD_INT 2
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: NEG
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 2
20765: NEG
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20796: LD_ADDR_VAR 0 18
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21026: LD_ADDR_VAR 0 19
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 1
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: LD_INT 0
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: LD_INT 1
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 2
21122: NEG
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 2
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 2
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: LD_INT 2
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 2
21202: NEG
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: NEG
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 2
21225: NEG
21226: PUSH
21227: LD_INT 2
21229: NEG
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21256: LD_ADDR_VAR 0 20
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: LD_INT 2
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: LD_INT 1
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: LD_INT 0
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: LD_INT 2
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: NEG
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: LD_INT 2
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21486: LD_ADDR_VAR 0 21
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: LD_INT 1
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: LD_INT 2
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 0
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 2
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: LD_INT 2
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21716: LD_ADDR_VAR 0 22
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: LD_INT 0
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 1
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 0
21764: PUSH
21765: LD_INT 1
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: NEG
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 0
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: LD_INT 1
21823: NEG
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 2
21831: PUSH
21832: LD_INT 0
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: LD_INT 1
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 2
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 2
21892: NEG
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: NEG
21904: PUSH
21905: LD_INT 1
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: NEG
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21946: LD_ADDR_VAR 0 23
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: LD_INT 0
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 2
22031: NEG
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 2
22145: NEG
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 2
22157: NEG
22158: PUSH
22159: LD_INT 3
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: LD_INT 3
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 2
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22226: LD_ADDR_VAR 0 24
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: LD_INT 2
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 2
22322: NEG
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 0
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 2
22402: NEG
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: LD_INT 2
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 3
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 3
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22502: LD_ADDR_VAR 0 25
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: NEG
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 2
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: LD_INT 2
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 2
22678: NEG
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: NEG
22690: PUSH
22691: LD_INT 1
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: LD_INT 2
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 3
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 3
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 3
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22776: LD_ADDR_VAR 0 26
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: LD_INT 0
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: NEG
22858: PUSH
22859: LD_INT 2
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: LD_INT 2
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 2
22901: PUSH
22902: LD_INT 1
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: LD_INT 2
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: LD_INT 2
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: NEG
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 2
22952: NEG
22953: PUSH
22954: LD_INT 0
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: LD_INT 2
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: LD_INT 3
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: LD_INT 3
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 2
23018: NEG
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23052: LD_ADDR_VAR 0 27
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: LD_INT 0
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 2
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: LD_INT 2
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 2
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: LD_INT 2
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: NEG
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 3
23285: NEG
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 3
23297: NEG
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23332: LD_ADDR_VAR 0 28
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 2
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 2
23508: NEG
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: NEG
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 2
23531: NEG
23532: PUSH
23533: LD_INT 2
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 2
23543: NEG
23544: PUSH
23545: LD_INT 3
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 3
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 3
23567: NEG
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 3
23579: NEG
23580: PUSH
23581: LD_INT 2
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23614: LD_ADDR_VAR 0 29
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 0
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: LD_INT 2
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 2
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 2
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: NEG
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: NEG
23805: PUSH
23806: LD_INT 3
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 2
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: LD_INT 3
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 3
23858: NEG
23859: PUSH
23860: LD_INT 2
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23893: LD_ADDR_VAR 0 30
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: LD_INT 2
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 2
24008: PUSH
24009: LD_INT 0
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 2
24059: NEG
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 2
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 3
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 3
24105: PUSH
24106: LD_INT 2
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: NEG
24137: PUSH
24138: LD_INT 1
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24171: LD_ADDR_VAR 0 31
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 2
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: NEG
24337: PUSH
24338: LD_INT 1
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: NEG
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: LD_INT 3
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 2
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 3
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 3
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 3
24414: NEG
24415: PUSH
24416: LD_INT 2
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24449: LD_ADDR_VAR 0 32
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 2
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 2
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: LD_INT 1
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: LD_INT 2
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: NEG
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: NEG
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: LD_INT 3
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 3
24661: PUSH
24662: LD_INT 2
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: LD_INT 3
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: NEG
24693: PUSH
24694: LD_INT 1
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24727: LD_ADDR_VAR 0 33
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: NEG
24918: PUSH
24919: LD_INT 3
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 3
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 3
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: NEG
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25006: LD_ADDR_VAR 0 34
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 2
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: LD_INT 2
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: LD_INT 1
25177: NEG
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 2
25185: NEG
25186: PUSH
25187: LD_INT 2
25189: NEG
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: LD_INT 3
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: LD_INT 3
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 2
25240: NEG
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 3
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25286: LD_ADDR_VAR 0 35
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25398: LD_ADDR_VAR 0 36
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25510: LD_ADDR_VAR 0 37
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25622: LD_ADDR_VAR 0 38
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25734: LD_ADDR_VAR 0 39
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25846: LD_ADDR_VAR 0 40
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25958: LD_ADDR_VAR 0 41
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: NEG
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 2
26136: NEG
26137: PUSH
26138: LD_INT 2
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: LD_INT 3
26152: NEG
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 3
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 3
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: LD_INT 3
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: LD_INT 3
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: NEG
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 3
26232: NEG
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 3
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 3
26255: NEG
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 3
26267: NEG
26268: PUSH
26269: LD_INT 3
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26308: LD_ADDR_VAR 0 42
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: LD_INT 2
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 2
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: LD_INT 2
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 2
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 2
26486: NEG
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: NEG
26499: PUSH
26500: LD_INT 3
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 3
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 3
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 3
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 3
26554: PUSH
26555: LD_INT 3
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: LD_INT 3
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: LD_INT 3
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 3
26605: NEG
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 3
26617: NEG
26618: PUSH
26619: LD_INT 3
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26658: LD_ADDR_VAR 0 43
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 3
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 3
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 2
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 3
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 3
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 3
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 3
26954: NEG
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: NEG
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27006: LD_ADDR_VAR 0 44
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 2
27161: NEG
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: NEG
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: LD_INT 3
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 3
27239: PUSH
27240: LD_INT 2
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: LD_INT 3
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: NEG
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 3
27280: NEG
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 3
27291: NEG
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 3
27303: NEG
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 3
27315: NEG
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27356: LD_ADDR_VAR 0 45
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: LD_INT 2
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 2
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 2
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 2
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 2
27534: NEG
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: NEG
27547: PUSH
27548: LD_INT 3
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: LD_INT 3
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 3
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 3
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 3
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: LD_INT 3
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: LD_INT 3
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 3
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 3
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 3
27665: NEG
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27706: LD_ADDR_VAR 0 46
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 2
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 2
27872: NEG
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 3
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 3
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 3
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 3
28002: NEG
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 3
28013: NEG
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28054: LD_ADDR_VAR 0 47
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: NEG
28182: PUSH
28183: LD_INT 2
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28205: LD_ADDR_VAR 0 48
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 1
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 1
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: NEG
28287: PUSH
28288: LD_INT 2
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: LD_INT 2
28301: NEG
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28352: LD_ADDR_VAR 0 49
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: NEG
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28496: LD_ADDR_VAR 0 50
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28640: LD_ADDR_VAR 0 51
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28787: LD_ADDR_VAR 0 52
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: LD_INT 2
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28938: LD_ADDR_VAR 0 53
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 2
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: PUSH
29074: LD_INT 2
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: LD_INT 2
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 2
29114: NEG
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: LD_INT 2
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29168: LD_ADDR_VAR 0 54
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: LD_INT 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: LD_INT 2
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29398: LD_ADDR_VAR 0 55
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 2
29574: NEG
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: LD_INT 1
29589: NEG
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: LD_INT 2
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29628: LD_ADDR_VAR 0 56
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 2
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: NEG
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 2
29815: NEG
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 2
29827: NEG
29828: PUSH
29829: LD_INT 2
29831: NEG
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29858: LD_ADDR_VAR 0 57
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 2
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 2
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: LD_INT 2
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30088: LD_ADDR_VAR 0 58
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: LD_INT 2
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: LD_INT 2
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30318: LD_ADDR_VAR 0 59
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30406: LD_ADDR_VAR 0 60
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 1
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30494: LD_ADDR_VAR 0 61
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30582: LD_ADDR_VAR 0 62
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30670: LD_ADDR_VAR 0 63
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 1
30728: NEG
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30758: LD_ADDR_VAR 0 64
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: ST_TO_ADDR
// end ; 1 :
30846: GO 36743
30848: LD_INT 1
30850: DOUBLE
30851: EQUAL
30852: IFTRUE 30856
30854: GO 33479
30856: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30857: LD_ADDR_VAR 0 11
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 3
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: LD_INT 3
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30901: LD_ADDR_VAR 0 12
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30942: LD_ADDR_VAR 0 13
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30982: LD_ADDR_VAR 0 14
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31023: LD_ADDR_VAR 0 15
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 3
31041: NEG
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: LD_INT 1
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31067: LD_ADDR_VAR 0 16
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: NEG
31099: PUSH
31100: LD_INT 3
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31113: LD_ADDR_VAR 0 17
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 3
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31157: LD_ADDR_VAR 0 18
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31198: LD_ADDR_VAR 0 19
31202: PUSH
31203: LD_INT 3
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 3
31215: PUSH
31216: LD_INT 3
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: PUSH
31226: LD_INT 3
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31238: LD_ADDR_VAR 0 20
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 3
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31279: LD_ADDR_VAR 0 21
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 3
31297: NEG
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31323: LD_ADDR_VAR 0 22
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: LD_INT 2
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31369: LD_ADDR_VAR 0 23
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 3
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 4
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31413: LD_ADDR_VAR 0 24
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 4
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31454: LD_ADDR_VAR 0 25
31458: PUSH
31459: LD_INT 3
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 4
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 4
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31494: LD_ADDR_VAR 0 26
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: LD_INT 4
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31535: LD_ADDR_VAR 0 27
31539: PUSH
31540: LD_INT 3
31542: NEG
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 4
31564: NEG
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31579: LD_ADDR_VAR 0 28
31583: PUSH
31584: LD_INT 3
31586: NEG
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: LD_INT 4
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 4
31610: NEG
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31625: LD_ADDR_VAR 0 29
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: LD_INT 3
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: LD_INT 3
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 4
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 4
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 5
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: LD_INT 5
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: LD_INT 4
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: LD_INT 6
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 6
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: LD_INT 5
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31780: LD_ADDR_VAR 0 30
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 3
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 3
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 3
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 4
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 4
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 5
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 5
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 5
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 6
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 6
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31923: LD_ADDR_VAR 0 31
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: LD_INT 2
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 4
31960: PUSH
31961: LD_INT 3
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 4
31970: PUSH
31971: LD_INT 4
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 3
31980: PUSH
31981: LD_INT 4
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 5
31990: PUSH
31991: LD_INT 4
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 5
32000: PUSH
32001: LD_INT 5
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 4
32010: PUSH
32011: LD_INT 5
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 6
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 6
32030: PUSH
32031: LD_INT 6
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 5
32040: PUSH
32041: LD_INT 6
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32062: LD_ADDR_VAR 0 32
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: NEG
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 4
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 4
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: LD_INT 5
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 5
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 6
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: LD_INT 6
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: LD_INT 5
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32205: LD_ADDR_VAR 0 33
32209: PUSH
32210: LD_INT 2
32212: NEG
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 3
32223: NEG
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 3
32234: NEG
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 3
32246: NEG
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 4
32257: NEG
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 4
32268: NEG
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 4
32280: NEG
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 5
32291: NEG
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 5
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 5
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 6
32325: NEG
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 6
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32360: LD_ADDR_VAR 0 34
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 3
32379: NEG
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: NEG
32392: PUSH
32393: LD_INT 3
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: LD_INT 4
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 4
32415: NEG
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 4
32427: NEG
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 4
32439: NEG
32440: PUSH
32441: LD_INT 5
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 5
32451: NEG
32452: PUSH
32453: LD_INT 4
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 5
32463: NEG
32464: PUSH
32465: LD_INT 5
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 5
32475: NEG
32476: PUSH
32477: LD_INT 6
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 6
32487: NEG
32488: PUSH
32489: LD_INT 5
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 6
32499: NEG
32500: PUSH
32501: LD_INT 6
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32523: LD_ADDR_VAR 0 41
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 3
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: LIST
32566: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32567: LD_ADDR_VAR 0 42
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32608: LD_ADDR_VAR 0 43
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32648: LD_ADDR_VAR 0 44
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32689: LD_ADDR_VAR 0 45
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 3
32718: NEG
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32733: LD_ADDR_VAR 0 46
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: LD_INT 3
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 3
32764: NEG
32765: PUSH
32766: LD_INT 2
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32779: LD_ADDR_VAR 0 47
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32812: LD_ADDR_VAR 0 48
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32843: LD_ADDR_VAR 0 49
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32872: LD_ADDR_VAR 0 50
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32901: LD_ADDR_VAR 0 51
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32932: LD_ADDR_VAR 0 52
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32965: LD_ADDR_VAR 0 53
32969: PUSH
32970: LD_INT 1
32972: NEG
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 3
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33009: LD_ADDR_VAR 0 54
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 3
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33050: LD_ADDR_VAR 0 55
33054: PUSH
33055: LD_INT 3
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 3
33067: PUSH
33068: LD_INT 3
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 3
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33090: LD_ADDR_VAR 0 56
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 3
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: LIST
33130: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33131: LD_ADDR_VAR 0 57
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 3
33149: NEG
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 3
33160: NEG
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33175: LD_ADDR_VAR 0 58
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: LD_INT 3
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 3
33194: NEG
33195: PUSH
33196: LD_INT 2
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 3
33206: NEG
33207: PUSH
33208: LD_INT 3
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33221: LD_ADDR_VAR 0 59
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 2
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33265: LD_ADDR_VAR 0 60
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 2
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33306: LD_ADDR_VAR 0 61
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33346: LD_ADDR_VAR 0 62
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33387: LD_ADDR_VAR 0 63
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33431: LD_ADDR_VAR 0 64
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 2
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 2
33450: NEG
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: NEG
33463: PUSH
33464: LD_INT 2
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: LIST
33476: ST_TO_ADDR
// end ; 2 :
33477: GO 36743
33479: LD_INT 2
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 36742
33487: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33488: LD_ADDR_VAR 0 29
33492: PUSH
33493: LD_INT 4
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 4
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 5
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 5
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 4
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 5
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: LD_INT 3
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: LD_INT 4
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: LD_INT 4
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 3
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: LD_INT 4
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 4
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 5
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 5
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: LD_INT 5
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 3
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: NEG
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 4
33827: NEG
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 4
33838: NEG
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 4
33850: NEG
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 4
33873: NEG
33874: PUSH
33875: LD_INT 4
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 4
33885: NEG
33886: PUSH
33887: LD_INT 5
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: NEG
33898: PUSH
33899: LD_INT 4
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: LD_INT 3
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 4
33921: NEG
33922: PUSH
33923: LD_INT 3
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 5
33933: NEG
33934: PUSH
33935: LD_INT 4
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 5
33945: NEG
33946: PUSH
33947: LD_INT 5
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 3
33957: NEG
33958: PUSH
33959: LD_INT 5
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 5
33969: NEG
33970: PUSH
33971: LD_INT 3
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34026: LD_ADDR_VAR 0 30
34030: PUSH
34031: LD_INT 4
34033: PUSH
34034: LD_INT 4
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 4
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 5
34053: PUSH
34054: LD_INT 4
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 5
34063: PUSH
34064: LD_INT 5
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 4
34073: PUSH
34074: LD_INT 5
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 4
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 3
34093: PUSH
34094: LD_INT 3
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 5
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: LD_INT 5
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 3
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 4
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 4
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 3
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 4
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 4
34216: NEG
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 4
34227: NEG
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 3
34239: NEG
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: NEG
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 4
34261: NEG
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 5
34272: NEG
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 5
34283: NEG
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 5
34295: NEG
34296: PUSH
34297: LD_INT 2
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 3
34307: NEG
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 3
34318: NEG
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 3
34330: NEG
34331: PUSH
34332: LD_INT 4
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: LD_INT 3
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 3
34366: NEG
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 4
34378: NEG
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 4
34390: NEG
34391: PUSH
34392: LD_INT 4
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: LD_INT 4
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 4
34414: NEG
34415: PUSH
34416: LD_INT 2
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: LD_INT 4
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: LD_INT 5
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: LD_INT 4
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 3
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: LD_INT 4
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: LD_INT 5
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 3
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: LD_INT 5
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34573: LD_ADDR_VAR 0 31
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 4
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 5
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: LD_INT 5
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: LD_INT 4
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 5
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 3
34673: NEG
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 3
34684: NEG
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 3
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 4
34729: NEG
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 4
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 4
34752: NEG
34753: PUSH
34754: LD_INT 2
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 4
34775: NEG
34776: PUSH
34777: LD_INT 4
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 4
34787: NEG
34788: PUSH
34789: LD_INT 5
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 3
34799: NEG
34800: PUSH
34801: LD_INT 4
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 3
34811: NEG
34812: PUSH
34813: LD_INT 3
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 4
34823: NEG
34824: PUSH
34825: LD_INT 3
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 5
34835: NEG
34836: PUSH
34837: LD_INT 4
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 5
34847: NEG
34848: PUSH
34849: LD_INT 5
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 3
34859: NEG
34860: PUSH
34861: LD_INT 5
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 5
34871: NEG
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 3
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 4
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 3
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 3
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: LD_INT 4
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: NEG
34974: PUSH
34975: LD_INT 4
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 4
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 5
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 5
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 4
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 5
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35123: LD_ADDR_VAR 0 32
35127: PUSH
35128: LD_INT 4
35130: NEG
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 4
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 3
35153: NEG
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 3
35164: NEG
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 4
35175: NEG
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 5
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 5
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 5
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: NEG
35233: PUSH
35234: LD_INT 3
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 3
35244: NEG
35245: PUSH
35246: LD_INT 4
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: LD_INT 3
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 3
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 4
35292: NEG
35293: PUSH
35294: LD_INT 3
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 4
35304: NEG
35305: PUSH
35306: LD_INT 4
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: LD_INT 4
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 4
35328: NEG
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 4
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 5
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 4
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 3
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 3
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 4
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: LD_INT 5
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 2
35419: PUSH
35420: LD_INT 3
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: LD_INT 5
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 3
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 3
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 4
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 4
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 3
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 2
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 4
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 4
35535: PUSH
35536: LD_INT 4
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 4
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 5
35555: PUSH
35556: LD_INT 4
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 5
35565: PUSH
35566: LD_INT 5
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 4
35575: PUSH
35576: LD_INT 5
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 3
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 5
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 3
35615: PUSH
35616: LD_INT 5
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35670: LD_ADDR_VAR 0 33
35674: PUSH
35675: LD_INT 4
35677: NEG
35678: PUSH
35679: LD_INT 4
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 4
35689: NEG
35690: PUSH
35691: LD_INT 5
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 3
35701: NEG
35702: PUSH
35703: LD_INT 4
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 3
35713: NEG
35714: PUSH
35715: LD_INT 3
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 4
35725: NEG
35726: PUSH
35727: LD_INT 3
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 5
35737: NEG
35738: PUSH
35739: LD_INT 4
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 5
35749: NEG
35750: PUSH
35751: LD_INT 5
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: LD_INT 5
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 5
35773: NEG
35774: PUSH
35775: LD_INT 3
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 3
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 4
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: LD_INT 3
35844: NEG
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 4
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: LD_INT 2
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 2
35875: NEG
35876: PUSH
35877: LD_INT 4
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 4
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 4
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 4
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 3
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 5
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: LD_INT 3
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 3
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 4
36000: PUSH
36001: LD_INT 3
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 4
36010: PUSH
36011: LD_INT 4
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: LD_INT 4
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: LD_INT 3
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 4
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: LD_INT 4
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 4
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 4
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 5
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 5
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 4
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: LD_INT 5
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36208: LD_ADDR_VAR 0 34
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 4
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 5
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 4
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 3
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 3
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 4
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 5
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: LD_INT 3
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: LD_INT 5
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 3
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 3
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 4
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 4
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 3
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 4
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 4
36410: PUSH
36411: LD_INT 4
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 4
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 5
36430: PUSH
36431: LD_INT 4
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 5
36440: PUSH
36441: LD_INT 5
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 4
36450: PUSH
36451: LD_INT 5
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 3
36460: PUSH
36461: LD_INT 4
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: LD_INT 5
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 3
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 3
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 4
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: LD_INT 4
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 4
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 4
36593: NEG
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 4
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 3
36616: NEG
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 3
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 4
36638: NEG
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 5
36649: NEG
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 5
36660: NEG
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 5
36672: NEG
36673: PUSH
36674: LD_INT 2
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 3
36684: NEG
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: ST_TO_ADDR
// end ; end ;
36740: GO 36743
36742: POP
// case btype of b_depot , b_warehouse :
36743: LD_VAR 0 1
36747: PUSH
36748: LD_INT 0
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36762
36754: LD_INT 1
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36762
36760: GO 36963
36762: POP
// case nation of nation_american :
36763: LD_VAR 0 5
36767: PUSH
36768: LD_INT 1
36770: DOUBLE
36771: EQUAL
36772: IFTRUE 36776
36774: GO 36832
36776: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36777: LD_ADDR_VAR 0 9
36781: PUSH
36782: LD_VAR 0 11
36786: PUSH
36787: LD_VAR 0 12
36791: PUSH
36792: LD_VAR 0 13
36796: PUSH
36797: LD_VAR 0 14
36801: PUSH
36802: LD_VAR 0 15
36806: PUSH
36807: LD_VAR 0 16
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: PUSH
36820: LD_VAR 0 4
36824: PUSH
36825: LD_INT 1
36827: PLUS
36828: ARRAY
36829: ST_TO_ADDR
36830: GO 36961
36832: LD_INT 2
36834: DOUBLE
36835: EQUAL
36836: IFTRUE 36840
36838: GO 36896
36840: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36841: LD_ADDR_VAR 0 9
36845: PUSH
36846: LD_VAR 0 17
36850: PUSH
36851: LD_VAR 0 18
36855: PUSH
36856: LD_VAR 0 19
36860: PUSH
36861: LD_VAR 0 20
36865: PUSH
36866: LD_VAR 0 21
36870: PUSH
36871: LD_VAR 0 22
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: PUSH
36884: LD_VAR 0 4
36888: PUSH
36889: LD_INT 1
36891: PLUS
36892: ARRAY
36893: ST_TO_ADDR
36894: GO 36961
36896: LD_INT 3
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36960
36904: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36905: LD_ADDR_VAR 0 9
36909: PUSH
36910: LD_VAR 0 23
36914: PUSH
36915: LD_VAR 0 24
36919: PUSH
36920: LD_VAR 0 25
36924: PUSH
36925: LD_VAR 0 26
36929: PUSH
36930: LD_VAR 0 27
36934: PUSH
36935: LD_VAR 0 28
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: PUSH
36948: LD_VAR 0 4
36952: PUSH
36953: LD_INT 1
36955: PLUS
36956: ARRAY
36957: ST_TO_ADDR
36958: GO 36961
36960: POP
36961: GO 37516
36963: LD_INT 2
36965: DOUBLE
36966: EQUAL
36967: IFTRUE 36977
36969: LD_INT 3
36971: DOUBLE
36972: EQUAL
36973: IFTRUE 36977
36975: GO 37033
36977: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36978: LD_ADDR_VAR 0 9
36982: PUSH
36983: LD_VAR 0 29
36987: PUSH
36988: LD_VAR 0 30
36992: PUSH
36993: LD_VAR 0 31
36997: PUSH
36998: LD_VAR 0 32
37002: PUSH
37003: LD_VAR 0 33
37007: PUSH
37008: LD_VAR 0 34
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: PUSH
37021: LD_VAR 0 4
37025: PUSH
37026: LD_INT 1
37028: PLUS
37029: ARRAY
37030: ST_TO_ADDR
37031: GO 37516
37033: LD_INT 16
37035: DOUBLE
37036: EQUAL
37037: IFTRUE 37095
37039: LD_INT 17
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37095
37045: LD_INT 18
37047: DOUBLE
37048: EQUAL
37049: IFTRUE 37095
37051: LD_INT 19
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37095
37057: LD_INT 22
37059: DOUBLE
37060: EQUAL
37061: IFTRUE 37095
37063: LD_INT 20
37065: DOUBLE
37066: EQUAL
37067: IFTRUE 37095
37069: LD_INT 21
37071: DOUBLE
37072: EQUAL
37073: IFTRUE 37095
37075: LD_INT 23
37077: DOUBLE
37078: EQUAL
37079: IFTRUE 37095
37081: LD_INT 24
37083: DOUBLE
37084: EQUAL
37085: IFTRUE 37095
37087: LD_INT 25
37089: DOUBLE
37090: EQUAL
37091: IFTRUE 37095
37093: GO 37151
37095: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37096: LD_ADDR_VAR 0 9
37100: PUSH
37101: LD_VAR 0 35
37105: PUSH
37106: LD_VAR 0 36
37110: PUSH
37111: LD_VAR 0 37
37115: PUSH
37116: LD_VAR 0 38
37120: PUSH
37121: LD_VAR 0 39
37125: PUSH
37126: LD_VAR 0 40
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: LD_VAR 0 4
37143: PUSH
37144: LD_INT 1
37146: PLUS
37147: ARRAY
37148: ST_TO_ADDR
37149: GO 37516
37151: LD_INT 6
37153: DOUBLE
37154: EQUAL
37155: IFTRUE 37207
37157: LD_INT 7
37159: DOUBLE
37160: EQUAL
37161: IFTRUE 37207
37163: LD_INT 8
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37207
37169: LD_INT 13
37171: DOUBLE
37172: EQUAL
37173: IFTRUE 37207
37175: LD_INT 12
37177: DOUBLE
37178: EQUAL
37179: IFTRUE 37207
37181: LD_INT 15
37183: DOUBLE
37184: EQUAL
37185: IFTRUE 37207
37187: LD_INT 11
37189: DOUBLE
37190: EQUAL
37191: IFTRUE 37207
37193: LD_INT 14
37195: DOUBLE
37196: EQUAL
37197: IFTRUE 37207
37199: LD_INT 10
37201: DOUBLE
37202: EQUAL
37203: IFTRUE 37207
37205: GO 37263
37207: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37208: LD_ADDR_VAR 0 9
37212: PUSH
37213: LD_VAR 0 41
37217: PUSH
37218: LD_VAR 0 42
37222: PUSH
37223: LD_VAR 0 43
37227: PUSH
37228: LD_VAR 0 44
37232: PUSH
37233: LD_VAR 0 45
37237: PUSH
37238: LD_VAR 0 46
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: PUSH
37251: LD_VAR 0 4
37255: PUSH
37256: LD_INT 1
37258: PLUS
37259: ARRAY
37260: ST_TO_ADDR
37261: GO 37516
37263: LD_INT 36
37265: DOUBLE
37266: EQUAL
37267: IFTRUE 37271
37269: GO 37327
37271: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37272: LD_ADDR_VAR 0 9
37276: PUSH
37277: LD_VAR 0 47
37281: PUSH
37282: LD_VAR 0 48
37286: PUSH
37287: LD_VAR 0 49
37291: PUSH
37292: LD_VAR 0 50
37296: PUSH
37297: LD_VAR 0 51
37301: PUSH
37302: LD_VAR 0 52
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: PUSH
37315: LD_VAR 0 4
37319: PUSH
37320: LD_INT 1
37322: PLUS
37323: ARRAY
37324: ST_TO_ADDR
37325: GO 37516
37327: LD_INT 4
37329: DOUBLE
37330: EQUAL
37331: IFTRUE 37353
37333: LD_INT 5
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37353
37339: LD_INT 34
37341: DOUBLE
37342: EQUAL
37343: IFTRUE 37353
37345: LD_INT 37
37347: DOUBLE
37348: EQUAL
37349: IFTRUE 37353
37351: GO 37409
37353: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37354: LD_ADDR_VAR 0 9
37358: PUSH
37359: LD_VAR 0 53
37363: PUSH
37364: LD_VAR 0 54
37368: PUSH
37369: LD_VAR 0 55
37373: PUSH
37374: LD_VAR 0 56
37378: PUSH
37379: LD_VAR 0 57
37383: PUSH
37384: LD_VAR 0 58
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: PUSH
37397: LD_VAR 0 4
37401: PUSH
37402: LD_INT 1
37404: PLUS
37405: ARRAY
37406: ST_TO_ADDR
37407: GO 37516
37409: LD_INT 31
37411: DOUBLE
37412: EQUAL
37413: IFTRUE 37459
37415: LD_INT 32
37417: DOUBLE
37418: EQUAL
37419: IFTRUE 37459
37421: LD_INT 33
37423: DOUBLE
37424: EQUAL
37425: IFTRUE 37459
37427: LD_INT 27
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37459
37433: LD_INT 26
37435: DOUBLE
37436: EQUAL
37437: IFTRUE 37459
37439: LD_INT 28
37441: DOUBLE
37442: EQUAL
37443: IFTRUE 37459
37445: LD_INT 29
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37459
37451: LD_INT 30
37453: DOUBLE
37454: EQUAL
37455: IFTRUE 37459
37457: GO 37515
37459: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37460: LD_ADDR_VAR 0 9
37464: PUSH
37465: LD_VAR 0 59
37469: PUSH
37470: LD_VAR 0 60
37474: PUSH
37475: LD_VAR 0 61
37479: PUSH
37480: LD_VAR 0 62
37484: PUSH
37485: LD_VAR 0 63
37489: PUSH
37490: LD_VAR 0 64
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: PUSH
37503: LD_VAR 0 4
37507: PUSH
37508: LD_INT 1
37510: PLUS
37511: ARRAY
37512: ST_TO_ADDR
37513: GO 37516
37515: POP
// temp_list2 = [ ] ;
37516: LD_ADDR_VAR 0 10
37520: PUSH
37521: EMPTY
37522: ST_TO_ADDR
// for i in temp_list do
37523: LD_ADDR_VAR 0 8
37527: PUSH
37528: LD_VAR 0 9
37532: PUSH
37533: FOR_IN
37534: IFFALSE 37586
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37536: LD_ADDR_VAR 0 10
37540: PUSH
37541: LD_VAR 0 10
37545: PUSH
37546: LD_VAR 0 8
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: PUSH
37555: LD_VAR 0 2
37559: PLUS
37560: PUSH
37561: LD_VAR 0 8
37565: PUSH
37566: LD_INT 2
37568: ARRAY
37569: PUSH
37570: LD_VAR 0 3
37574: PLUS
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: ADD
37583: ST_TO_ADDR
37584: GO 37533
37586: POP
37587: POP
// result = temp_list2 ;
37588: LD_ADDR_VAR 0 7
37592: PUSH
37593: LD_VAR 0 10
37597: ST_TO_ADDR
// end ;
37598: LD_VAR 0 7
37602: RET
// export function EnemyInRange ( unit , dist ) ; begin
37603: LD_INT 0
37605: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37606: LD_ADDR_VAR 0 3
37610: PUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: CALL_OW 255
37620: PPUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: CALL_OW 250
37630: PPUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 251
37640: PPUSH
37641: LD_VAR 0 2
37645: PPUSH
37646: CALL 10976 0 4
37650: PUSH
37651: LD_INT 4
37653: ARRAY
37654: ST_TO_ADDR
// end ;
37655: LD_VAR 0 3
37659: RET
// export function PlayerSeeMe ( unit ) ; begin
37660: LD_INT 0
37662: PPUSH
// result := See ( your_side , unit ) ;
37663: LD_ADDR_VAR 0 2
37667: PUSH
37668: LD_OWVAR 2
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL_OW 292
37682: ST_TO_ADDR
// end ;
37683: LD_VAR 0 2
37687: RET
// export function ReverseDir ( unit ) ; begin
37688: LD_INT 0
37690: PPUSH
// if not unit then
37691: LD_VAR 0 1
37695: NOT
37696: IFFALSE 37700
// exit ;
37698: GO 37723
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37700: LD_ADDR_VAR 0 2
37704: PUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: CALL_OW 254
37714: PUSH
37715: LD_INT 3
37717: PLUS
37718: PUSH
37719: LD_INT 6
37721: MOD
37722: ST_TO_ADDR
// end ;
37723: LD_VAR 0 2
37727: RET
// export function ReverseArray ( array ) ; var i ; begin
37728: LD_INT 0
37730: PPUSH
37731: PPUSH
// if not array then
37732: LD_VAR 0 1
37736: NOT
37737: IFFALSE 37741
// exit ;
37739: GO 37796
// result := [ ] ;
37741: LD_ADDR_VAR 0 2
37745: PUSH
37746: EMPTY
37747: ST_TO_ADDR
// for i := array downto 1 do
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: DOUBLE
37754: LD_VAR 0 1
37758: INC
37759: ST_TO_ADDR
37760: LD_INT 1
37762: PUSH
37763: FOR_DOWNTO
37764: IFFALSE 37794
// result := Join ( result , array [ i ] ) ;
37766: LD_ADDR_VAR 0 2
37770: PUSH
37771: LD_VAR 0 2
37775: PPUSH
37776: LD_VAR 0 1
37780: PUSH
37781: LD_VAR 0 3
37785: ARRAY
37786: PPUSH
37787: CALL 42461 0 2
37791: ST_TO_ADDR
37792: GO 37763
37794: POP
37795: POP
// end ;
37796: LD_VAR 0 2
37800: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37801: LD_INT 0
37803: PPUSH
37804: PPUSH
37805: PPUSH
37806: PPUSH
37807: PPUSH
37808: PPUSH
// if not unit or not hexes then
37809: LD_VAR 0 1
37813: NOT
37814: PUSH
37815: LD_VAR 0 2
37819: NOT
37820: OR
37821: IFFALSE 37825
// exit ;
37823: GO 37948
// dist := 9999 ;
37825: LD_ADDR_VAR 0 5
37829: PUSH
37830: LD_INT 9999
37832: ST_TO_ADDR
// for i = 1 to hexes do
37833: LD_ADDR_VAR 0 4
37837: PUSH
37838: DOUBLE
37839: LD_INT 1
37841: DEC
37842: ST_TO_ADDR
37843: LD_VAR 0 2
37847: PUSH
37848: FOR_TO
37849: IFFALSE 37936
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37851: LD_ADDR_VAR 0 6
37855: PUSH
37856: LD_VAR 0 1
37860: PPUSH
37861: LD_VAR 0 2
37865: PUSH
37866: LD_VAR 0 4
37870: ARRAY
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PPUSH
37876: LD_VAR 0 2
37880: PUSH
37881: LD_VAR 0 4
37885: ARRAY
37886: PUSH
37887: LD_INT 2
37889: ARRAY
37890: PPUSH
37891: CALL_OW 297
37895: ST_TO_ADDR
// if tdist < dist then
37896: LD_VAR 0 6
37900: PUSH
37901: LD_VAR 0 5
37905: LESS
37906: IFFALSE 37934
// begin hex := hexes [ i ] ;
37908: LD_ADDR_VAR 0 8
37912: PUSH
37913: LD_VAR 0 2
37917: PUSH
37918: LD_VAR 0 4
37922: ARRAY
37923: ST_TO_ADDR
// dist := tdist ;
37924: LD_ADDR_VAR 0 5
37928: PUSH
37929: LD_VAR 0 6
37933: ST_TO_ADDR
// end ; end ;
37934: GO 37848
37936: POP
37937: POP
// result := hex ;
37938: LD_ADDR_VAR 0 3
37942: PUSH
37943: LD_VAR 0 8
37947: ST_TO_ADDR
// end ;
37948: LD_VAR 0 3
37952: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37953: LD_INT 0
37955: PPUSH
37956: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37957: LD_VAR 0 1
37961: NOT
37962: PUSH
37963: LD_VAR 0 1
37967: PUSH
37968: LD_INT 21
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 23
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PPUSH
37992: CALL_OW 69
37996: IN
37997: NOT
37998: OR
37999: IFFALSE 38003
// exit ;
38001: GO 38050
// for i = 1 to 3 do
38003: LD_ADDR_VAR 0 3
38007: PUSH
38008: DOUBLE
38009: LD_INT 1
38011: DEC
38012: ST_TO_ADDR
38013: LD_INT 3
38015: PUSH
38016: FOR_TO
38017: IFFALSE 38048
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38019: LD_VAR 0 1
38023: PPUSH
38024: CALL_OW 250
38028: PPUSH
38029: LD_VAR 0 1
38033: PPUSH
38034: CALL_OW 251
38038: PPUSH
38039: LD_INT 1
38041: PPUSH
38042: CALL_OW 453
38046: GO 38016
38048: POP
38049: POP
// end ;
38050: LD_VAR 0 2
38054: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38055: LD_INT 0
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
// if not unit or not enemy_unit then
38063: LD_VAR 0 1
38067: NOT
38068: PUSH
38069: LD_VAR 0 2
38073: NOT
38074: OR
38075: IFFALSE 38079
// exit ;
38077: GO 38546
// if GetLives ( i ) < 250 then
38079: LD_VAR 0 4
38083: PPUSH
38084: CALL_OW 256
38088: PUSH
38089: LD_INT 250
38091: LESS
38092: IFFALSE 38105
// begin ComAutodestruct ( i ) ;
38094: LD_VAR 0 4
38098: PPUSH
38099: CALL 37953 0 1
// exit ;
38103: GO 38546
// end ; x := GetX ( enemy_unit ) ;
38105: LD_ADDR_VAR 0 7
38109: PUSH
38110: LD_VAR 0 2
38114: PPUSH
38115: CALL_OW 250
38119: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38120: LD_ADDR_VAR 0 8
38124: PUSH
38125: LD_VAR 0 2
38129: PPUSH
38130: CALL_OW 251
38134: ST_TO_ADDR
// if not x or not y then
38135: LD_VAR 0 7
38139: NOT
38140: PUSH
38141: LD_VAR 0 8
38145: NOT
38146: OR
38147: IFFALSE 38151
// exit ;
38149: GO 38546
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38151: LD_ADDR_VAR 0 6
38155: PUSH
38156: LD_VAR 0 7
38160: PPUSH
38161: LD_INT 0
38163: PPUSH
38164: LD_INT 4
38166: PPUSH
38167: CALL_OW 272
38171: PUSH
38172: LD_VAR 0 8
38176: PPUSH
38177: LD_INT 0
38179: PPUSH
38180: LD_INT 4
38182: PPUSH
38183: CALL_OW 273
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_VAR 0 7
38196: PPUSH
38197: LD_INT 1
38199: PPUSH
38200: LD_INT 4
38202: PPUSH
38203: CALL_OW 272
38207: PUSH
38208: LD_VAR 0 8
38212: PPUSH
38213: LD_INT 1
38215: PPUSH
38216: LD_INT 4
38218: PPUSH
38219: CALL_OW 273
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_VAR 0 7
38232: PPUSH
38233: LD_INT 2
38235: PPUSH
38236: LD_INT 4
38238: PPUSH
38239: CALL_OW 272
38243: PUSH
38244: LD_VAR 0 8
38248: PPUSH
38249: LD_INT 2
38251: PPUSH
38252: LD_INT 4
38254: PPUSH
38255: CALL_OW 273
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_VAR 0 7
38268: PPUSH
38269: LD_INT 3
38271: PPUSH
38272: LD_INT 4
38274: PPUSH
38275: CALL_OW 272
38279: PUSH
38280: LD_VAR 0 8
38284: PPUSH
38285: LD_INT 3
38287: PPUSH
38288: LD_INT 4
38290: PPUSH
38291: CALL_OW 273
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_VAR 0 7
38304: PPUSH
38305: LD_INT 4
38307: PPUSH
38308: LD_INT 4
38310: PPUSH
38311: CALL_OW 272
38315: PUSH
38316: LD_VAR 0 8
38320: PPUSH
38321: LD_INT 4
38323: PPUSH
38324: LD_INT 4
38326: PPUSH
38327: CALL_OW 273
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_VAR 0 7
38340: PPUSH
38341: LD_INT 5
38343: PPUSH
38344: LD_INT 4
38346: PPUSH
38347: CALL_OW 272
38351: PUSH
38352: LD_VAR 0 8
38356: PPUSH
38357: LD_INT 5
38359: PPUSH
38360: LD_INT 4
38362: PPUSH
38363: CALL_OW 273
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: ST_TO_ADDR
// for i = tmp downto 1 do
38380: LD_ADDR_VAR 0 4
38384: PUSH
38385: DOUBLE
38386: LD_VAR 0 6
38390: INC
38391: ST_TO_ADDR
38392: LD_INT 1
38394: PUSH
38395: FOR_DOWNTO
38396: IFFALSE 38497
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38398: LD_VAR 0 6
38402: PUSH
38403: LD_VAR 0 4
38407: ARRAY
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: PPUSH
38413: LD_VAR 0 6
38417: PUSH
38418: LD_VAR 0 4
38422: ARRAY
38423: PUSH
38424: LD_INT 2
38426: ARRAY
38427: PPUSH
38428: CALL_OW 488
38432: NOT
38433: PUSH
38434: LD_VAR 0 6
38438: PUSH
38439: LD_VAR 0 4
38443: ARRAY
38444: PUSH
38445: LD_INT 1
38447: ARRAY
38448: PPUSH
38449: LD_VAR 0 6
38453: PUSH
38454: LD_VAR 0 4
38458: ARRAY
38459: PUSH
38460: LD_INT 2
38462: ARRAY
38463: PPUSH
38464: CALL_OW 428
38468: PUSH
38469: LD_INT 0
38471: NONEQUAL
38472: OR
38473: IFFALSE 38495
// tmp := Delete ( tmp , i ) ;
38475: LD_ADDR_VAR 0 6
38479: PUSH
38480: LD_VAR 0 6
38484: PPUSH
38485: LD_VAR 0 4
38489: PPUSH
38490: CALL_OW 3
38494: ST_TO_ADDR
38495: GO 38395
38497: POP
38498: POP
// j := GetClosestHex ( unit , tmp ) ;
38499: LD_ADDR_VAR 0 5
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: LD_VAR 0 6
38513: PPUSH
38514: CALL 37801 0 2
38518: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38519: LD_VAR 0 1
38523: PPUSH
38524: LD_VAR 0 5
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: PPUSH
38533: LD_VAR 0 5
38537: PUSH
38538: LD_INT 2
38540: ARRAY
38541: PPUSH
38542: CALL_OW 111
// end ;
38546: LD_VAR 0 3
38550: RET
// export function PrepareApemanSoldier ( ) ; begin
38551: LD_INT 0
38553: PPUSH
// uc_nation := 0 ;
38554: LD_ADDR_OWVAR 21
38558: PUSH
38559: LD_INT 0
38561: ST_TO_ADDR
// hc_sex := sex_male ;
38562: LD_ADDR_OWVAR 27
38566: PUSH
38567: LD_INT 1
38569: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38570: LD_ADDR_OWVAR 28
38574: PUSH
38575: LD_INT 15
38577: ST_TO_ADDR
// hc_gallery :=  ;
38578: LD_ADDR_OWVAR 33
38582: PUSH
38583: LD_STRING 
38585: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38586: LD_ADDR_OWVAR 31
38590: PUSH
38591: LD_INT 0
38593: PPUSH
38594: LD_INT 3
38596: PPUSH
38597: CALL_OW 12
38601: PUSH
38602: LD_INT 0
38604: PPUSH
38605: LD_INT 3
38607: PPUSH
38608: CALL_OW 12
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: ST_TO_ADDR
// end ;
38625: LD_VAR 0 1
38629: RET
// export function PrepareApemanEngineer ( ) ; begin
38630: LD_INT 0
38632: PPUSH
// uc_nation := 0 ;
38633: LD_ADDR_OWVAR 21
38637: PUSH
38638: LD_INT 0
38640: ST_TO_ADDR
// hc_sex := sex_male ;
38641: LD_ADDR_OWVAR 27
38645: PUSH
38646: LD_INT 1
38648: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38649: LD_ADDR_OWVAR 28
38653: PUSH
38654: LD_INT 16
38656: ST_TO_ADDR
// hc_gallery :=  ;
38657: LD_ADDR_OWVAR 33
38661: PUSH
38662: LD_STRING 
38664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38665: LD_ADDR_OWVAR 31
38669: PUSH
38670: LD_INT 0
38672: PPUSH
38673: LD_INT 3
38675: PPUSH
38676: CALL_OW 12
38680: PUSH
38681: LD_INT 0
38683: PPUSH
38684: LD_INT 3
38686: PPUSH
38687: CALL_OW 12
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: ST_TO_ADDR
// end ;
38704: LD_VAR 0 1
38708: RET
// export function PrepareApeman ( agressivity ) ; begin
38709: LD_INT 0
38711: PPUSH
// uc_side := 0 ;
38712: LD_ADDR_OWVAR 20
38716: PUSH
38717: LD_INT 0
38719: ST_TO_ADDR
// uc_nation := 0 ;
38720: LD_ADDR_OWVAR 21
38724: PUSH
38725: LD_INT 0
38727: ST_TO_ADDR
// hc_sex := sex_male ;
38728: LD_ADDR_OWVAR 27
38732: PUSH
38733: LD_INT 1
38735: ST_TO_ADDR
// hc_class := class_apeman ;
38736: LD_ADDR_OWVAR 28
38740: PUSH
38741: LD_INT 12
38743: ST_TO_ADDR
// hc_gallery :=  ;
38744: LD_ADDR_OWVAR 33
38748: PUSH
38749: LD_STRING 
38751: ST_TO_ADDR
// if agressivity = 0 then
38752: LD_VAR 0 1
38756: PUSH
38757: LD_INT 0
38759: EQUAL
38760: IFFALSE 38772
// hc_agressivity := 0 else
38762: LD_ADDR_OWVAR 35
38766: PUSH
38767: LD_INT 0
38769: ST_TO_ADDR
38770: GO 38793
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38772: LD_ADDR_OWVAR 35
38776: PUSH
38777: LD_VAR 0 1
38781: NEG
38782: PPUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 12
38792: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38793: LD_ADDR_OWVAR 31
38797: PUSH
38798: LD_INT 0
38800: PPUSH
38801: LD_INT 3
38803: PPUSH
38804: CALL_OW 12
38808: PUSH
38809: LD_INT 0
38811: PPUSH
38812: LD_INT 3
38814: PPUSH
38815: CALL_OW 12
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// end ;
38832: LD_VAR 0 2
38836: RET
// export function PrepareTiger ( agressivity ) ; begin
38837: LD_INT 0
38839: PPUSH
// uc_side := 0 ;
38840: LD_ADDR_OWVAR 20
38844: PUSH
38845: LD_INT 0
38847: ST_TO_ADDR
// uc_nation := 0 ;
38848: LD_ADDR_OWVAR 21
38852: PUSH
38853: LD_INT 0
38855: ST_TO_ADDR
// hc_class := class_tiger ;
38856: LD_ADDR_OWVAR 28
38860: PUSH
38861: LD_INT 14
38863: ST_TO_ADDR
// hc_gallery :=  ;
38864: LD_ADDR_OWVAR 33
38868: PUSH
38869: LD_STRING 
38871: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38872: LD_ADDR_OWVAR 35
38876: PUSH
38877: LD_VAR 0 1
38881: NEG
38882: PPUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: CALL_OW 12
38892: ST_TO_ADDR
// end ;
38893: LD_VAR 0 2
38897: RET
// export function PrepareEnchidna ( ) ; begin
38898: LD_INT 0
38900: PPUSH
// uc_side := 0 ;
38901: LD_ADDR_OWVAR 20
38905: PUSH
38906: LD_INT 0
38908: ST_TO_ADDR
// uc_nation := 0 ;
38909: LD_ADDR_OWVAR 21
38913: PUSH
38914: LD_INT 0
38916: ST_TO_ADDR
// hc_class := class_baggie ;
38917: LD_ADDR_OWVAR 28
38921: PUSH
38922: LD_INT 13
38924: ST_TO_ADDR
// hc_gallery :=  ;
38925: LD_ADDR_OWVAR 33
38929: PUSH
38930: LD_STRING 
38932: ST_TO_ADDR
// end ;
38933: LD_VAR 0 1
38937: RET
// export function PrepareFrog ( ) ; begin
38938: LD_INT 0
38940: PPUSH
// uc_side := 0 ;
38941: LD_ADDR_OWVAR 20
38945: PUSH
38946: LD_INT 0
38948: ST_TO_ADDR
// uc_nation := 0 ;
38949: LD_ADDR_OWVAR 21
38953: PUSH
38954: LD_INT 0
38956: ST_TO_ADDR
// hc_class := class_frog ;
38957: LD_ADDR_OWVAR 28
38961: PUSH
38962: LD_INT 19
38964: ST_TO_ADDR
// hc_gallery :=  ;
38965: LD_ADDR_OWVAR 33
38969: PUSH
38970: LD_STRING 
38972: ST_TO_ADDR
// end ;
38973: LD_VAR 0 1
38977: RET
// export function PrepareFish ( ) ; begin
38978: LD_INT 0
38980: PPUSH
// uc_side := 0 ;
38981: LD_ADDR_OWVAR 20
38985: PUSH
38986: LD_INT 0
38988: ST_TO_ADDR
// uc_nation := 0 ;
38989: LD_ADDR_OWVAR 21
38993: PUSH
38994: LD_INT 0
38996: ST_TO_ADDR
// hc_class := class_fish ;
38997: LD_ADDR_OWVAR 28
39001: PUSH
39002: LD_INT 20
39004: ST_TO_ADDR
// hc_gallery :=  ;
39005: LD_ADDR_OWVAR 33
39009: PUSH
39010: LD_STRING 
39012: ST_TO_ADDR
// end ;
39013: LD_VAR 0 1
39017: RET
// export function PrepareBird ( ) ; begin
39018: LD_INT 0
39020: PPUSH
// uc_side := 0 ;
39021: LD_ADDR_OWVAR 20
39025: PUSH
39026: LD_INT 0
39028: ST_TO_ADDR
// uc_nation := 0 ;
39029: LD_ADDR_OWVAR 21
39033: PUSH
39034: LD_INT 0
39036: ST_TO_ADDR
// hc_class := class_phororhacos ;
39037: LD_ADDR_OWVAR 28
39041: PUSH
39042: LD_INT 18
39044: ST_TO_ADDR
// hc_gallery :=  ;
39045: LD_ADDR_OWVAR 33
39049: PUSH
39050: LD_STRING 
39052: ST_TO_ADDR
// end ;
39053: LD_VAR 0 1
39057: RET
// export function PrepareHorse ( ) ; begin
39058: LD_INT 0
39060: PPUSH
// uc_side := 0 ;
39061: LD_ADDR_OWVAR 20
39065: PUSH
39066: LD_INT 0
39068: ST_TO_ADDR
// uc_nation := 0 ;
39069: LD_ADDR_OWVAR 21
39073: PUSH
39074: LD_INT 0
39076: ST_TO_ADDR
// hc_class := class_horse ;
39077: LD_ADDR_OWVAR 28
39081: PUSH
39082: LD_INT 21
39084: ST_TO_ADDR
// hc_gallery :=  ;
39085: LD_ADDR_OWVAR 33
39089: PUSH
39090: LD_STRING 
39092: ST_TO_ADDR
// end ;
39093: LD_VAR 0 1
39097: RET
// export function PrepareMastodont ( ) ; begin
39098: LD_INT 0
39100: PPUSH
// uc_side := 0 ;
39101: LD_ADDR_OWVAR 20
39105: PUSH
39106: LD_INT 0
39108: ST_TO_ADDR
// uc_nation := 0 ;
39109: LD_ADDR_OWVAR 21
39113: PUSH
39114: LD_INT 0
39116: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39117: LD_ADDR_OWVAR 37
39121: PUSH
39122: LD_INT 31
39124: ST_TO_ADDR
// vc_control := control_rider ;
39125: LD_ADDR_OWVAR 38
39129: PUSH
39130: LD_INT 4
39132: ST_TO_ADDR
// end ;
39133: LD_VAR 0 1
39137: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39138: LD_INT 0
39140: PPUSH
39141: PPUSH
39142: PPUSH
// uc_side = 0 ;
39143: LD_ADDR_OWVAR 20
39147: PUSH
39148: LD_INT 0
39150: ST_TO_ADDR
// uc_nation = 0 ;
39151: LD_ADDR_OWVAR 21
39155: PUSH
39156: LD_INT 0
39158: ST_TO_ADDR
// InitHc_All ( ) ;
39159: CALL_OW 584
// InitVc ;
39163: CALL_OW 20
// if mastodonts then
39167: LD_VAR 0 6
39171: IFFALSE 39238
// for i = 1 to mastodonts do
39173: LD_ADDR_VAR 0 11
39177: PUSH
39178: DOUBLE
39179: LD_INT 1
39181: DEC
39182: ST_TO_ADDR
39183: LD_VAR 0 6
39187: PUSH
39188: FOR_TO
39189: IFFALSE 39236
// begin vc_chassis := 31 ;
39191: LD_ADDR_OWVAR 37
39195: PUSH
39196: LD_INT 31
39198: ST_TO_ADDR
// vc_control := control_rider ;
39199: LD_ADDR_OWVAR 38
39203: PUSH
39204: LD_INT 4
39206: ST_TO_ADDR
// animal := CreateVehicle ;
39207: LD_ADDR_VAR 0 12
39211: PUSH
39212: CALL_OW 45
39216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39217: LD_VAR 0 12
39221: PPUSH
39222: LD_VAR 0 8
39226: PPUSH
39227: LD_INT 0
39229: PPUSH
39230: CALL 41366 0 3
// end ;
39234: GO 39188
39236: POP
39237: POP
// if horses then
39238: LD_VAR 0 5
39242: IFFALSE 39309
// for i = 1 to horses do
39244: LD_ADDR_VAR 0 11
39248: PUSH
39249: DOUBLE
39250: LD_INT 1
39252: DEC
39253: ST_TO_ADDR
39254: LD_VAR 0 5
39258: PUSH
39259: FOR_TO
39260: IFFALSE 39307
// begin hc_class := 21 ;
39262: LD_ADDR_OWVAR 28
39266: PUSH
39267: LD_INT 21
39269: ST_TO_ADDR
// hc_gallery :=  ;
39270: LD_ADDR_OWVAR 33
39274: PUSH
39275: LD_STRING 
39277: ST_TO_ADDR
// animal := CreateHuman ;
39278: LD_ADDR_VAR 0 12
39282: PUSH
39283: CALL_OW 44
39287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39288: LD_VAR 0 12
39292: PPUSH
39293: LD_VAR 0 8
39297: PPUSH
39298: LD_INT 0
39300: PPUSH
39301: CALL 41366 0 3
// end ;
39305: GO 39259
39307: POP
39308: POP
// if birds then
39309: LD_VAR 0 1
39313: IFFALSE 39380
// for i = 1 to birds do
39315: LD_ADDR_VAR 0 11
39319: PUSH
39320: DOUBLE
39321: LD_INT 1
39323: DEC
39324: ST_TO_ADDR
39325: LD_VAR 0 1
39329: PUSH
39330: FOR_TO
39331: IFFALSE 39378
// begin hc_class := 18 ;
39333: LD_ADDR_OWVAR 28
39337: PUSH
39338: LD_INT 18
39340: ST_TO_ADDR
// hc_gallery =  ;
39341: LD_ADDR_OWVAR 33
39345: PUSH
39346: LD_STRING 
39348: ST_TO_ADDR
// animal := CreateHuman ;
39349: LD_ADDR_VAR 0 12
39353: PUSH
39354: CALL_OW 44
39358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39359: LD_VAR 0 12
39363: PPUSH
39364: LD_VAR 0 8
39368: PPUSH
39369: LD_INT 0
39371: PPUSH
39372: CALL 41366 0 3
// end ;
39376: GO 39330
39378: POP
39379: POP
// if tigers then
39380: LD_VAR 0 2
39384: IFFALSE 39468
// for i = 1 to tigers do
39386: LD_ADDR_VAR 0 11
39390: PUSH
39391: DOUBLE
39392: LD_INT 1
39394: DEC
39395: ST_TO_ADDR
39396: LD_VAR 0 2
39400: PUSH
39401: FOR_TO
39402: IFFALSE 39466
// begin hc_class = class_tiger ;
39404: LD_ADDR_OWVAR 28
39408: PUSH
39409: LD_INT 14
39411: ST_TO_ADDR
// hc_gallery =  ;
39412: LD_ADDR_OWVAR 33
39416: PUSH
39417: LD_STRING 
39419: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39420: LD_ADDR_OWVAR 35
39424: PUSH
39425: LD_INT 7
39427: NEG
39428: PPUSH
39429: LD_INT 7
39431: PPUSH
39432: CALL_OW 12
39436: ST_TO_ADDR
// animal := CreateHuman ;
39437: LD_ADDR_VAR 0 12
39441: PUSH
39442: CALL_OW 44
39446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39447: LD_VAR 0 12
39451: PPUSH
39452: LD_VAR 0 8
39456: PPUSH
39457: LD_INT 0
39459: PPUSH
39460: CALL 41366 0 3
// end ;
39464: GO 39401
39466: POP
39467: POP
// if apemans then
39468: LD_VAR 0 3
39472: IFFALSE 39595
// for i = 1 to apemans do
39474: LD_ADDR_VAR 0 11
39478: PUSH
39479: DOUBLE
39480: LD_INT 1
39482: DEC
39483: ST_TO_ADDR
39484: LD_VAR 0 3
39488: PUSH
39489: FOR_TO
39490: IFFALSE 39593
// begin hc_class = class_apeman ;
39492: LD_ADDR_OWVAR 28
39496: PUSH
39497: LD_INT 12
39499: ST_TO_ADDR
// hc_gallery =  ;
39500: LD_ADDR_OWVAR 33
39504: PUSH
39505: LD_STRING 
39507: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39508: LD_ADDR_OWVAR 35
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PPUSH
39517: LD_INT 2
39519: PPUSH
39520: CALL_OW 12
39524: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39525: LD_ADDR_OWVAR 31
39529: PUSH
39530: LD_INT 1
39532: PPUSH
39533: LD_INT 3
39535: PPUSH
39536: CALL_OW 12
39540: PUSH
39541: LD_INT 1
39543: PPUSH
39544: LD_INT 3
39546: PPUSH
39547: CALL_OW 12
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
// animal := CreateHuman ;
39564: LD_ADDR_VAR 0 12
39568: PUSH
39569: CALL_OW 44
39573: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39574: LD_VAR 0 12
39578: PPUSH
39579: LD_VAR 0 8
39583: PPUSH
39584: LD_INT 0
39586: PPUSH
39587: CALL 41366 0 3
// end ;
39591: GO 39489
39593: POP
39594: POP
// if enchidnas then
39595: LD_VAR 0 4
39599: IFFALSE 39666
// for i = 1 to enchidnas do
39601: LD_ADDR_VAR 0 11
39605: PUSH
39606: DOUBLE
39607: LD_INT 1
39609: DEC
39610: ST_TO_ADDR
39611: LD_VAR 0 4
39615: PUSH
39616: FOR_TO
39617: IFFALSE 39664
// begin hc_class = 13 ;
39619: LD_ADDR_OWVAR 28
39623: PUSH
39624: LD_INT 13
39626: ST_TO_ADDR
// hc_gallery =  ;
39627: LD_ADDR_OWVAR 33
39631: PUSH
39632: LD_STRING 
39634: ST_TO_ADDR
// animal := CreateHuman ;
39635: LD_ADDR_VAR 0 12
39639: PUSH
39640: CALL_OW 44
39644: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39645: LD_VAR 0 12
39649: PPUSH
39650: LD_VAR 0 8
39654: PPUSH
39655: LD_INT 0
39657: PPUSH
39658: CALL 41366 0 3
// end ;
39662: GO 39616
39664: POP
39665: POP
// if fishes then
39666: LD_VAR 0 7
39670: IFFALSE 39737
// for i = 1 to fishes do
39672: LD_ADDR_VAR 0 11
39676: PUSH
39677: DOUBLE
39678: LD_INT 1
39680: DEC
39681: ST_TO_ADDR
39682: LD_VAR 0 7
39686: PUSH
39687: FOR_TO
39688: IFFALSE 39735
// begin hc_class = 20 ;
39690: LD_ADDR_OWVAR 28
39694: PUSH
39695: LD_INT 20
39697: ST_TO_ADDR
// hc_gallery =  ;
39698: LD_ADDR_OWVAR 33
39702: PUSH
39703: LD_STRING 
39705: ST_TO_ADDR
// animal := CreateHuman ;
39706: LD_ADDR_VAR 0 12
39710: PUSH
39711: CALL_OW 44
39715: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39716: LD_VAR 0 12
39720: PPUSH
39721: LD_VAR 0 9
39725: PPUSH
39726: LD_INT 0
39728: PPUSH
39729: CALL 41366 0 3
// end ;
39733: GO 39687
39735: POP
39736: POP
// end ;
39737: LD_VAR 0 10
39741: RET
// export function WantHeal ( sci , unit ) ; begin
39742: LD_INT 0
39744: PPUSH
// if GetTaskList ( sci ) > 0 then
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 437
39754: PUSH
39755: LD_INT 0
39757: GREATER
39758: IFFALSE 39828
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 437
39769: PUSH
39770: LD_INT 1
39772: ARRAY
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: PUSH
39778: LD_STRING l
39780: EQUAL
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 437
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: PUSH
39796: LD_INT 4
39798: ARRAY
39799: PUSH
39800: LD_VAR 0 2
39804: EQUAL
39805: AND
39806: IFFALSE 39818
// result := true else
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 1
39815: ST_TO_ADDR
39816: GO 39826
// result := false ;
39818: LD_ADDR_VAR 0 3
39822: PUSH
39823: LD_INT 0
39825: ST_TO_ADDR
// end else
39826: GO 39836
// result := false ;
39828: LD_ADDR_VAR 0 3
39832: PUSH
39833: LD_INT 0
39835: ST_TO_ADDR
// end ;
39836: LD_VAR 0 3
39840: RET
// export function HealTarget ( sci ) ; begin
39841: LD_INT 0
39843: PPUSH
// if not sci then
39844: LD_VAR 0 1
39848: NOT
39849: IFFALSE 39853
// exit ;
39851: GO 39918
// result := 0 ;
39853: LD_ADDR_VAR 0 2
39857: PUSH
39858: LD_INT 0
39860: ST_TO_ADDR
// if GetTaskList ( sci ) then
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 437
39870: IFFALSE 39918
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39872: LD_VAR 0 1
39876: PPUSH
39877: CALL_OW 437
39881: PUSH
39882: LD_INT 1
39884: ARRAY
39885: PUSH
39886: LD_INT 1
39888: ARRAY
39889: PUSH
39890: LD_STRING l
39892: EQUAL
39893: IFFALSE 39918
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39895: LD_ADDR_VAR 0 2
39899: PUSH
39900: LD_VAR 0 1
39904: PPUSH
39905: CALL_OW 437
39909: PUSH
39910: LD_INT 1
39912: ARRAY
39913: PUSH
39914: LD_INT 4
39916: ARRAY
39917: ST_TO_ADDR
// end ;
39918: LD_VAR 0 2
39922: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39923: LD_INT 0
39925: PPUSH
39926: PPUSH
39927: PPUSH
39928: PPUSH
// if not base_units then
39929: LD_VAR 0 1
39933: NOT
39934: IFFALSE 39938
// exit ;
39936: GO 40025
// result := false ;
39938: LD_ADDR_VAR 0 2
39942: PUSH
39943: LD_INT 0
39945: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39946: LD_ADDR_VAR 0 5
39950: PUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: LD_INT 21
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PPUSH
39966: CALL_OW 72
39970: ST_TO_ADDR
// if not tmp then
39971: LD_VAR 0 5
39975: NOT
39976: IFFALSE 39980
// exit ;
39978: GO 40025
// for i in tmp do
39980: LD_ADDR_VAR 0 3
39984: PUSH
39985: LD_VAR 0 5
39989: PUSH
39990: FOR_IN
39991: IFFALSE 40023
// begin result := EnemyInRange ( i , 22 ) ;
39993: LD_ADDR_VAR 0 2
39997: PUSH
39998: LD_VAR 0 3
40002: PPUSH
40003: LD_INT 22
40005: PPUSH
40006: CALL 37603 0 2
40010: ST_TO_ADDR
// if result then
40011: LD_VAR 0 2
40015: IFFALSE 40021
// exit ;
40017: POP
40018: POP
40019: GO 40025
// end ;
40021: GO 39990
40023: POP
40024: POP
// end ;
40025: LD_VAR 0 2
40029: RET
// export function FilterByTag ( units , tag ) ; begin
40030: LD_INT 0
40032: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
40033: LD_ADDR_VAR 0 3
40037: PUSH
40038: LD_VAR 0 1
40042: PPUSH
40043: LD_INT 120
40045: PUSH
40046: LD_VAR 0 2
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PPUSH
40055: CALL_OW 72
40059: ST_TO_ADDR
// end ;
40060: LD_VAR 0 3
40064: RET
// export function IsDriver ( un ) ; begin
40065: LD_INT 0
40067: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40068: LD_ADDR_VAR 0 2
40072: PUSH
40073: LD_VAR 0 1
40077: PUSH
40078: LD_INT 55
40080: PUSH
40081: EMPTY
40082: LIST
40083: PPUSH
40084: CALL_OW 69
40088: IN
40089: ST_TO_ADDR
// end ;
40090: LD_VAR 0 2
40094: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40095: LD_INT 0
40097: PPUSH
40098: PPUSH
// list := [ ] ;
40099: LD_ADDR_VAR 0 5
40103: PUSH
40104: EMPTY
40105: ST_TO_ADDR
// case d of 0 :
40106: LD_VAR 0 3
40110: PUSH
40111: LD_INT 0
40113: DOUBLE
40114: EQUAL
40115: IFTRUE 40119
40117: GO 40252
40119: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40120: LD_ADDR_VAR 0 5
40124: PUSH
40125: LD_VAR 0 1
40129: PUSH
40130: LD_INT 4
40132: MINUS
40133: PUSH
40134: LD_VAR 0 2
40138: PUSH
40139: LD_INT 4
40141: MINUS
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: PUSH
40151: LD_VAR 0 1
40155: PUSH
40156: LD_INT 3
40158: MINUS
40159: PUSH
40160: LD_VAR 0 2
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: PUSH
40173: LD_VAR 0 1
40177: PUSH
40178: LD_INT 4
40180: PLUS
40181: PUSH
40182: LD_VAR 0 2
40186: PUSH
40187: LD_INT 4
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: PUSH
40195: LD_VAR 0 1
40199: PUSH
40200: LD_INT 3
40202: PLUS
40203: PUSH
40204: LD_VAR 0 2
40208: PUSH
40209: LD_INT 3
40211: PLUS
40212: PUSH
40213: LD_INT 5
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: PUSH
40221: LD_VAR 0 1
40225: PUSH
40226: LD_VAR 0 2
40230: PUSH
40231: LD_INT 4
40233: PLUS
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
// end ; 1 :
40250: GO 40950
40252: LD_INT 1
40254: DOUBLE
40255: EQUAL
40256: IFTRUE 40260
40258: GO 40393
40260: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40261: LD_ADDR_VAR 0 5
40265: PUSH
40266: LD_VAR 0 1
40270: PUSH
40271: LD_VAR 0 2
40275: PUSH
40276: LD_INT 4
40278: MINUS
40279: PUSH
40280: LD_INT 3
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: PUSH
40288: LD_VAR 0 1
40292: PUSH
40293: LD_INT 3
40295: MINUS
40296: PUSH
40297: LD_VAR 0 2
40301: PUSH
40302: LD_INT 3
40304: MINUS
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: PUSH
40314: LD_VAR 0 1
40318: PUSH
40319: LD_INT 4
40321: MINUS
40322: PUSH
40323: LD_VAR 0 2
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: PUSH
40336: LD_VAR 0 1
40340: PUSH
40341: LD_VAR 0 2
40345: PUSH
40346: LD_INT 3
40348: PLUS
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: PUSH
40358: LD_VAR 0 1
40362: PUSH
40363: LD_INT 4
40365: PLUS
40366: PUSH
40367: LD_VAR 0 2
40371: PUSH
40372: LD_INT 4
40374: PLUS
40375: PUSH
40376: LD_INT 5
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: ST_TO_ADDR
// end ; 2 :
40391: GO 40950
40393: LD_INT 2
40395: DOUBLE
40396: EQUAL
40397: IFTRUE 40401
40399: GO 40530
40401: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40402: LD_ADDR_VAR 0 5
40406: PUSH
40407: LD_VAR 0 1
40411: PUSH
40412: LD_VAR 0 2
40416: PUSH
40417: LD_INT 3
40419: MINUS
40420: PUSH
40421: LD_INT 3
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: PUSH
40429: LD_VAR 0 1
40433: PUSH
40434: LD_INT 4
40436: PLUS
40437: PUSH
40438: LD_VAR 0 2
40442: PUSH
40443: LD_INT 4
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: PUSH
40451: LD_VAR 0 1
40455: PUSH
40456: LD_VAR 0 2
40460: PUSH
40461: LD_INT 4
40463: PLUS
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: PUSH
40473: LD_VAR 0 1
40477: PUSH
40478: LD_INT 3
40480: MINUS
40481: PUSH
40482: LD_VAR 0 2
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: PUSH
40495: LD_VAR 0 1
40499: PUSH
40500: LD_INT 4
40502: MINUS
40503: PUSH
40504: LD_VAR 0 2
40508: PUSH
40509: LD_INT 4
40511: MINUS
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// end ; 3 :
40528: GO 40950
40530: LD_INT 3
40532: DOUBLE
40533: EQUAL
40534: IFTRUE 40538
40536: GO 40671
40538: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40539: LD_ADDR_VAR 0 5
40543: PUSH
40544: LD_VAR 0 1
40548: PUSH
40549: LD_INT 3
40551: PLUS
40552: PUSH
40553: LD_VAR 0 2
40557: PUSH
40558: LD_INT 4
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: PUSH
40566: LD_VAR 0 1
40570: PUSH
40571: LD_INT 4
40573: PLUS
40574: PUSH
40575: LD_VAR 0 2
40579: PUSH
40580: LD_INT 4
40582: PLUS
40583: PUSH
40584: LD_INT 5
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: PUSH
40592: LD_VAR 0 1
40596: PUSH
40597: LD_INT 4
40599: MINUS
40600: PUSH
40601: LD_VAR 0 2
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: PUSH
40614: LD_VAR 0 1
40618: PUSH
40619: LD_VAR 0 2
40623: PUSH
40624: LD_INT 4
40626: MINUS
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: LIST
40635: PUSH
40636: LD_VAR 0 1
40640: PUSH
40641: LD_INT 3
40643: MINUS
40644: PUSH
40645: LD_VAR 0 2
40649: PUSH
40650: LD_INT 3
40652: MINUS
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: ST_TO_ADDR
// end ; 4 :
40669: GO 40950
40671: LD_INT 4
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40812
40679: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40680: LD_ADDR_VAR 0 5
40684: PUSH
40685: LD_VAR 0 1
40689: PUSH
40690: LD_VAR 0 2
40694: PUSH
40695: LD_INT 4
40697: PLUS
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: PUSH
40707: LD_VAR 0 1
40711: PUSH
40712: LD_INT 3
40714: PLUS
40715: PUSH
40716: LD_VAR 0 2
40720: PUSH
40721: LD_INT 3
40723: PLUS
40724: PUSH
40725: LD_INT 5
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: PUSH
40733: LD_VAR 0 1
40737: PUSH
40738: LD_INT 4
40740: PLUS
40741: PUSH
40742: LD_VAR 0 2
40746: PUSH
40747: LD_INT 4
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: PUSH
40755: LD_VAR 0 1
40759: PUSH
40760: LD_VAR 0 2
40764: PUSH
40765: LD_INT 3
40767: MINUS
40768: PUSH
40769: LD_INT 3
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: PUSH
40777: LD_VAR 0 1
40781: PUSH
40782: LD_INT 4
40784: MINUS
40785: PUSH
40786: LD_VAR 0 2
40790: PUSH
40791: LD_INT 4
40793: MINUS
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: LIST
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: ST_TO_ADDR
// end ; 5 :
40810: GO 40950
40812: LD_INT 5
40814: DOUBLE
40815: EQUAL
40816: IFTRUE 40820
40818: GO 40949
40820: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40821: LD_ADDR_VAR 0 5
40825: PUSH
40826: LD_VAR 0 1
40830: PUSH
40831: LD_INT 4
40833: MINUS
40834: PUSH
40835: LD_VAR 0 2
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: PUSH
40848: LD_VAR 0 1
40852: PUSH
40853: LD_VAR 0 2
40857: PUSH
40858: LD_INT 4
40860: MINUS
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: PUSH
40870: LD_VAR 0 1
40874: PUSH
40875: LD_INT 4
40877: PLUS
40878: PUSH
40879: LD_VAR 0 2
40883: PUSH
40884: LD_INT 4
40886: PLUS
40887: PUSH
40888: LD_INT 5
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: PUSH
40896: LD_VAR 0 1
40900: PUSH
40901: LD_INT 3
40903: PLUS
40904: PUSH
40905: LD_VAR 0 2
40909: PUSH
40910: LD_INT 4
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: PUSH
40918: LD_VAR 0 1
40922: PUSH
40923: LD_VAR 0 2
40927: PUSH
40928: LD_INT 3
40930: PLUS
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// end ; end ;
40947: GO 40950
40949: POP
// result := list ;
40950: LD_ADDR_VAR 0 4
40954: PUSH
40955: LD_VAR 0 5
40959: ST_TO_ADDR
// end ;
40960: LD_VAR 0 4
40964: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40965: LD_INT 0
40967: PPUSH
40968: PPUSH
40969: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40970: LD_VAR 0 1
40974: NOT
40975: PUSH
40976: LD_VAR 0 2
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 3
40989: PUSH
40990: LD_INT 4
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: IN
40999: NOT
41000: OR
41001: IFFALSE 41005
// exit ;
41003: GO 41088
// tmp := [ ] ;
41005: LD_ADDR_VAR 0 5
41009: PUSH
41010: EMPTY
41011: ST_TO_ADDR
// for i in units do
41012: LD_ADDR_VAR 0 4
41016: PUSH
41017: LD_VAR 0 1
41021: PUSH
41022: FOR_IN
41023: IFFALSE 41057
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
41025: LD_ADDR_VAR 0 5
41029: PUSH
41030: LD_VAR 0 5
41034: PPUSH
41035: LD_VAR 0 4
41039: PPUSH
41040: LD_VAR 0 2
41044: PPUSH
41045: CALL_OW 259
41049: PPUSH
41050: CALL 42461 0 2
41054: ST_TO_ADDR
41055: GO 41022
41057: POP
41058: POP
// if not tmp then
41059: LD_VAR 0 5
41063: NOT
41064: IFFALSE 41068
// exit ;
41066: GO 41088
// result := SortListByListDesc ( units , tmp ) ;
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: LD_VAR 0 1
41077: PPUSH
41078: LD_VAR 0 5
41082: PPUSH
41083: CALL_OW 77
41087: ST_TO_ADDR
// end ;
41088: LD_VAR 0 3
41092: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41093: LD_INT 0
41095: PPUSH
41096: PPUSH
41097: PPUSH
// result := false ;
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_INT 0
41105: ST_TO_ADDR
// if not building then
41106: LD_VAR 0 2
41110: NOT
41111: IFFALSE 41115
// exit ;
41113: GO 41253
// x := GetX ( building ) ;
41115: LD_ADDR_VAR 0 4
41119: PUSH
41120: LD_VAR 0 2
41124: PPUSH
41125: CALL_OW 250
41129: ST_TO_ADDR
// y := GetY ( building ) ;
41130: LD_ADDR_VAR 0 5
41134: PUSH
41135: LD_VAR 0 2
41139: PPUSH
41140: CALL_OW 251
41144: ST_TO_ADDR
// if not x or not y then
41145: LD_VAR 0 4
41149: NOT
41150: PUSH
41151: LD_VAR 0 5
41155: NOT
41156: OR
41157: IFFALSE 41161
// exit ;
41159: GO 41253
// if GetTaskList ( unit ) then
41161: LD_VAR 0 1
41165: PPUSH
41166: CALL_OW 437
41170: IFFALSE 41253
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41172: LD_STRING e
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: CALL_OW 437
41184: PUSH
41185: LD_INT 1
41187: ARRAY
41188: PUSH
41189: LD_INT 1
41191: ARRAY
41192: EQUAL
41193: PUSH
41194: LD_VAR 0 4
41198: PUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: CALL_OW 437
41208: PUSH
41209: LD_INT 1
41211: ARRAY
41212: PUSH
41213: LD_INT 2
41215: ARRAY
41216: EQUAL
41217: AND
41218: PUSH
41219: LD_VAR 0 5
41223: PUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 437
41233: PUSH
41234: LD_INT 1
41236: ARRAY
41237: PUSH
41238: LD_INT 3
41240: ARRAY
41241: EQUAL
41242: AND
41243: IFFALSE 41253
// result := true end ;
41245: LD_ADDR_VAR 0 3
41249: PUSH
41250: LD_INT 1
41252: ST_TO_ADDR
// end ;
41253: LD_VAR 0 3
41257: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41258: LD_INT 0
41260: PPUSH
// result := false ;
41261: LD_ADDR_VAR 0 4
41265: PUSH
41266: LD_INT 0
41268: ST_TO_ADDR
// if GetTaskList ( unit ) then
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 437
41278: IFFALSE 41361
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41280: LD_STRING M
41282: PUSH
41283: LD_VAR 0 1
41287: PPUSH
41288: CALL_OW 437
41292: PUSH
41293: LD_INT 1
41295: ARRAY
41296: PUSH
41297: LD_INT 1
41299: ARRAY
41300: EQUAL
41301: PUSH
41302: LD_VAR 0 2
41306: PUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL_OW 437
41316: PUSH
41317: LD_INT 1
41319: ARRAY
41320: PUSH
41321: LD_INT 2
41323: ARRAY
41324: EQUAL
41325: AND
41326: PUSH
41327: LD_VAR 0 3
41331: PUSH
41332: LD_VAR 0 1
41336: PPUSH
41337: CALL_OW 437
41341: PUSH
41342: LD_INT 1
41344: ARRAY
41345: PUSH
41346: LD_INT 3
41348: ARRAY
41349: EQUAL
41350: AND
41351: IFFALSE 41361
// result := true ;
41353: LD_ADDR_VAR 0 4
41357: PUSH
41358: LD_INT 1
41360: ST_TO_ADDR
// end ; end ;
41361: LD_VAR 0 4
41365: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41366: LD_INT 0
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
// if not unit or not area then
41372: LD_VAR 0 1
41376: NOT
41377: PUSH
41378: LD_VAR 0 2
41382: NOT
41383: OR
41384: IFFALSE 41388
// exit ;
41386: GO 41564
// tmp := AreaToList ( area , i ) ;
41388: LD_ADDR_VAR 0 6
41392: PUSH
41393: LD_VAR 0 2
41397: PPUSH
41398: LD_VAR 0 5
41402: PPUSH
41403: CALL_OW 517
41407: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41408: LD_ADDR_VAR 0 5
41412: PUSH
41413: DOUBLE
41414: LD_INT 1
41416: DEC
41417: ST_TO_ADDR
41418: LD_VAR 0 6
41422: PUSH
41423: LD_INT 1
41425: ARRAY
41426: PUSH
41427: FOR_TO
41428: IFFALSE 41562
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41430: LD_ADDR_VAR 0 7
41434: PUSH
41435: LD_VAR 0 6
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: PUSH
41444: LD_VAR 0 5
41448: ARRAY
41449: PUSH
41450: LD_VAR 0 6
41454: PUSH
41455: LD_INT 2
41457: ARRAY
41458: PUSH
41459: LD_VAR 0 5
41463: ARRAY
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
41469: LD_INT 92
41471: PUSH
41472: LD_VAR 0 7
41476: PUSH
41477: LD_INT 1
41479: ARRAY
41480: PUSH
41481: LD_VAR 0 7
41485: PUSH
41486: LD_INT 2
41488: ARRAY
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: PPUSH
41499: CALL_OW 69
41503: PUSH
41504: LD_INT 0
41506: EQUAL
41507: IFFALSE 41560
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41509: LD_VAR 0 1
41513: PPUSH
41514: LD_VAR 0 7
41518: PUSH
41519: LD_INT 1
41521: ARRAY
41522: PPUSH
41523: LD_VAR 0 7
41527: PUSH
41528: LD_INT 2
41530: ARRAY
41531: PPUSH
41532: LD_VAR 0 3
41536: PPUSH
41537: CALL_OW 48
// result := IsPlaced ( unit ) ;
41541: LD_ADDR_VAR 0 4
41545: PUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 305
41555: ST_TO_ADDR
// exit ;
41556: POP
41557: POP
41558: GO 41564
// end ; end ;
41560: GO 41427
41562: POP
41563: POP
// end ;
41564: LD_VAR 0 4
41568: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41569: LD_INT 0
41571: PPUSH
41572: PPUSH
41573: PPUSH
// if not side or side > 8 then
41574: LD_VAR 0 1
41578: NOT
41579: PUSH
41580: LD_VAR 0 1
41584: PUSH
41585: LD_INT 8
41587: GREATER
41588: OR
41589: IFFALSE 41593
// exit ;
41591: GO 41780
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41593: LD_ADDR_VAR 0 4
41597: PUSH
41598: LD_INT 22
41600: PUSH
41601: LD_VAR 0 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 21
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PPUSH
41624: CALL_OW 69
41628: ST_TO_ADDR
// if not tmp then
41629: LD_VAR 0 4
41633: NOT
41634: IFFALSE 41638
// exit ;
41636: GO 41780
// enable_addtolog := true ;
41638: LD_ADDR_OWVAR 81
41642: PUSH
41643: LD_INT 1
41645: ST_TO_ADDR
// AddToLog ( [ ) ;
41646: LD_STRING [
41648: PPUSH
41649: CALL_OW 561
// for i in tmp do
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_VAR 0 4
41662: PUSH
41663: FOR_IN
41664: IFFALSE 41771
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41666: LD_STRING [
41668: PUSH
41669: LD_VAR 0 3
41673: PPUSH
41674: CALL_OW 266
41678: STR
41679: PUSH
41680: LD_STRING , 
41682: STR
41683: PUSH
41684: LD_VAR 0 3
41688: PPUSH
41689: CALL_OW 250
41693: STR
41694: PUSH
41695: LD_STRING , 
41697: STR
41698: PUSH
41699: LD_VAR 0 3
41703: PPUSH
41704: CALL_OW 251
41708: STR
41709: PUSH
41710: LD_STRING , 
41712: STR
41713: PUSH
41714: LD_VAR 0 3
41718: PPUSH
41719: CALL_OW 254
41723: STR
41724: PUSH
41725: LD_STRING , 
41727: STR
41728: PUSH
41729: LD_VAR 0 3
41733: PPUSH
41734: LD_INT 1
41736: PPUSH
41737: CALL_OW 268
41741: STR
41742: PUSH
41743: LD_STRING , 
41745: STR
41746: PUSH
41747: LD_VAR 0 3
41751: PPUSH
41752: LD_INT 2
41754: PPUSH
41755: CALL_OW 268
41759: STR
41760: PUSH
41761: LD_STRING ],
41763: STR
41764: PPUSH
41765: CALL_OW 561
// end ;
41769: GO 41663
41771: POP
41772: POP
// AddToLog ( ]; ) ;
41773: LD_STRING ];
41775: PPUSH
41776: CALL_OW 561
// end ;
41780: LD_VAR 0 2
41784: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41785: LD_INT 0
41787: PPUSH
41788: PPUSH
41789: PPUSH
41790: PPUSH
41791: PPUSH
// if not area or not rate or not max then
41792: LD_VAR 0 1
41796: NOT
41797: PUSH
41798: LD_VAR 0 2
41802: NOT
41803: OR
41804: PUSH
41805: LD_VAR 0 4
41809: NOT
41810: OR
41811: IFFALSE 41815
// exit ;
41813: GO 42004
// while 1 do
41815: LD_INT 1
41817: IFFALSE 42004
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41819: LD_ADDR_VAR 0 9
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: LD_INT 1
41831: PPUSH
41832: CALL_OW 287
41836: PUSH
41837: LD_INT 10
41839: MUL
41840: ST_TO_ADDR
// r := rate / 10 ;
41841: LD_ADDR_VAR 0 7
41845: PUSH
41846: LD_VAR 0 2
41850: PUSH
41851: LD_INT 10
41853: DIVREAL
41854: ST_TO_ADDR
// time := 1 1$00 ;
41855: LD_ADDR_VAR 0 8
41859: PUSH
41860: LD_INT 2100
41862: ST_TO_ADDR
// if amount < min then
41863: LD_VAR 0 9
41867: PUSH
41868: LD_VAR 0 3
41872: LESS
41873: IFFALSE 41891
// r := r * 2 else
41875: LD_ADDR_VAR 0 7
41879: PUSH
41880: LD_VAR 0 7
41884: PUSH
41885: LD_INT 2
41887: MUL
41888: ST_TO_ADDR
41889: GO 41917
// if amount > max then
41891: LD_VAR 0 9
41895: PUSH
41896: LD_VAR 0 4
41900: GREATER
41901: IFFALSE 41917
// r := r / 2 ;
41903: LD_ADDR_VAR 0 7
41907: PUSH
41908: LD_VAR 0 7
41912: PUSH
41913: LD_INT 2
41915: DIVREAL
41916: ST_TO_ADDR
// time := time / r ;
41917: LD_ADDR_VAR 0 8
41921: PUSH
41922: LD_VAR 0 8
41926: PUSH
41927: LD_VAR 0 7
41931: DIVREAL
41932: ST_TO_ADDR
// if time < 0 then
41933: LD_VAR 0 8
41937: PUSH
41938: LD_INT 0
41940: LESS
41941: IFFALSE 41958
// time := time * - 1 ;
41943: LD_ADDR_VAR 0 8
41947: PUSH
41948: LD_VAR 0 8
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: MUL
41957: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41958: LD_VAR 0 8
41962: PUSH
41963: LD_INT 35
41965: PPUSH
41966: LD_INT 875
41968: PPUSH
41969: CALL_OW 12
41973: PLUS
41974: PPUSH
41975: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41979: LD_INT 1
41981: PPUSH
41982: LD_INT 5
41984: PPUSH
41985: CALL_OW 12
41989: PPUSH
41990: LD_VAR 0 1
41994: PPUSH
41995: LD_INT 1
41997: PPUSH
41998: CALL_OW 55
// end ;
42002: GO 41815
// end ;
42004: LD_VAR 0 5
42008: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
42009: LD_INT 0
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
// if not turrets or not factories then
42019: LD_VAR 0 1
42023: NOT
42024: PUSH
42025: LD_VAR 0 2
42029: NOT
42030: OR
42031: IFFALSE 42035
// exit ;
42033: GO 42342
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
42035: LD_ADDR_VAR 0 10
42039: PUSH
42040: LD_INT 5
42042: PUSH
42043: LD_INT 6
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: LD_INT 4
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 3
42062: PUSH
42063: LD_INT 5
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 24
42077: PUSH
42078: LD_INT 25
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 23
42087: PUSH
42088: LD_INT 27
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 42
42101: PUSH
42102: LD_INT 43
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 44
42111: PUSH
42112: LD_INT 46
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 45
42121: PUSH
42122: LD_INT 47
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: ST_TO_ADDR
// result := [ ] ;
42139: LD_ADDR_VAR 0 3
42143: PUSH
42144: EMPTY
42145: ST_TO_ADDR
// for i in turrets do
42146: LD_ADDR_VAR 0 4
42150: PUSH
42151: LD_VAR 0 1
42155: PUSH
42156: FOR_IN
42157: IFFALSE 42340
// begin nat := GetNation ( i ) ;
42159: LD_ADDR_VAR 0 7
42163: PUSH
42164: LD_VAR 0 4
42168: PPUSH
42169: CALL_OW 248
42173: ST_TO_ADDR
// weapon := 0 ;
42174: LD_ADDR_VAR 0 8
42178: PUSH
42179: LD_INT 0
42181: ST_TO_ADDR
// if not nat then
42182: LD_VAR 0 7
42186: NOT
42187: IFFALSE 42191
// continue ;
42189: GO 42156
// for j in list [ nat ] do
42191: LD_ADDR_VAR 0 5
42195: PUSH
42196: LD_VAR 0 10
42200: PUSH
42201: LD_VAR 0 7
42205: ARRAY
42206: PUSH
42207: FOR_IN
42208: IFFALSE 42249
// if GetBWeapon ( i ) = j [ 1 ] then
42210: LD_VAR 0 4
42214: PPUSH
42215: CALL_OW 269
42219: PUSH
42220: LD_VAR 0 5
42224: PUSH
42225: LD_INT 1
42227: ARRAY
42228: EQUAL
42229: IFFALSE 42247
// begin weapon := j [ 2 ] ;
42231: LD_ADDR_VAR 0 8
42235: PUSH
42236: LD_VAR 0 5
42240: PUSH
42241: LD_INT 2
42243: ARRAY
42244: ST_TO_ADDR
// break ;
42245: GO 42249
// end ;
42247: GO 42207
42249: POP
42250: POP
// if not weapon then
42251: LD_VAR 0 8
42255: NOT
42256: IFFALSE 42260
// continue ;
42258: GO 42156
// for k in factories do
42260: LD_ADDR_VAR 0 6
42264: PUSH
42265: LD_VAR 0 2
42269: PUSH
42270: FOR_IN
42271: IFFALSE 42336
// begin weapons := AvailableWeaponList ( k ) ;
42273: LD_ADDR_VAR 0 9
42277: PUSH
42278: LD_VAR 0 6
42282: PPUSH
42283: CALL_OW 478
42287: ST_TO_ADDR
// if not weapons then
42288: LD_VAR 0 9
42292: NOT
42293: IFFALSE 42297
// continue ;
42295: GO 42270
// if weapon in weapons then
42297: LD_VAR 0 8
42301: PUSH
42302: LD_VAR 0 9
42306: IN
42307: IFFALSE 42334
// begin result := [ i , weapon ] ;
42309: LD_ADDR_VAR 0 3
42313: PUSH
42314: LD_VAR 0 4
42318: PUSH
42319: LD_VAR 0 8
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// exit ;
42328: POP
42329: POP
42330: POP
42331: POP
42332: GO 42342
// end ; end ;
42334: GO 42270
42336: POP
42337: POP
// end ;
42338: GO 42156
42340: POP
42341: POP
// end ;
42342: LD_VAR 0 3
42346: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42347: LD_INT 0
42349: PPUSH
// if not side or side > 8 then
42350: LD_VAR 0 3
42354: NOT
42355: PUSH
42356: LD_VAR 0 3
42360: PUSH
42361: LD_INT 8
42363: GREATER
42364: OR
42365: IFFALSE 42369
// exit ;
42367: GO 42428
// if not range then
42369: LD_VAR 0 4
42373: NOT
42374: IFFALSE 42385
// range := - 12 ;
42376: LD_ADDR_VAR 0 4
42380: PUSH
42381: LD_INT 12
42383: NEG
42384: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42385: LD_VAR 0 1
42389: PPUSH
42390: LD_VAR 0 2
42394: PPUSH
42395: LD_VAR 0 3
42399: PPUSH
42400: LD_VAR 0 4
42404: PPUSH
42405: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42409: LD_VAR 0 1
42413: PPUSH
42414: LD_VAR 0 2
42418: PPUSH
42419: LD_VAR 0 3
42423: PPUSH
42424: CALL_OW 331
// end ;
42428: LD_VAR 0 5
42432: RET
// export function Video ( mode ) ; begin
42433: LD_INT 0
42435: PPUSH
// ingame_video = mode ;
42436: LD_ADDR_OWVAR 52
42440: PUSH
42441: LD_VAR 0 1
42445: ST_TO_ADDR
// interface_hidden = mode ;
42446: LD_ADDR_OWVAR 54
42450: PUSH
42451: LD_VAR 0 1
42455: ST_TO_ADDR
// end ;
42456: LD_VAR 0 2
42460: RET
// export function Join ( array , element ) ; begin
42461: LD_INT 0
42463: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: LD_VAR 0 1
42478: PUSH
42479: LD_INT 1
42481: PLUS
42482: PPUSH
42483: LD_VAR 0 2
42487: PPUSH
42488: CALL_OW 1
42492: ST_TO_ADDR
// end ;
42493: LD_VAR 0 3
42497: RET
// export function JoinUnion ( array , element ) ; begin
42498: LD_INT 0
42500: PPUSH
// result := array union element ;
42501: LD_ADDR_VAR 0 3
42505: PUSH
42506: LD_VAR 0 1
42510: PUSH
42511: LD_VAR 0 2
42515: UNION
42516: ST_TO_ADDR
// end ;
42517: LD_VAR 0 3
42521: RET
// export function GetBehemoths ( side ) ; begin
42522: LD_INT 0
42524: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42525: LD_ADDR_VAR 0 2
42529: PUSH
42530: LD_INT 22
42532: PUSH
42533: LD_VAR 0 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 31
42544: PUSH
42545: LD_INT 25
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PPUSH
42556: CALL_OW 69
42560: ST_TO_ADDR
// end ;
42561: LD_VAR 0 2
42565: RET
// export function Shuffle ( array ) ; var i , index ; begin
42566: LD_INT 0
42568: PPUSH
42569: PPUSH
42570: PPUSH
// result := [ ] ;
42571: LD_ADDR_VAR 0 2
42575: PUSH
42576: EMPTY
42577: ST_TO_ADDR
// if not array then
42578: LD_VAR 0 1
42582: NOT
42583: IFFALSE 42587
// exit ;
42585: GO 42686
// Randomize ;
42587: CALL_OW 10
// for i = array downto 1 do
42591: LD_ADDR_VAR 0 3
42595: PUSH
42596: DOUBLE
42597: LD_VAR 0 1
42601: INC
42602: ST_TO_ADDR
42603: LD_INT 1
42605: PUSH
42606: FOR_DOWNTO
42607: IFFALSE 42684
// begin index := rand ( 1 , array ) ;
42609: LD_ADDR_VAR 0 4
42613: PUSH
42614: LD_INT 1
42616: PPUSH
42617: LD_VAR 0 1
42621: PPUSH
42622: CALL_OW 12
42626: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42627: LD_ADDR_VAR 0 2
42631: PUSH
42632: LD_VAR 0 2
42636: PPUSH
42637: LD_VAR 0 2
42641: PUSH
42642: LD_INT 1
42644: PLUS
42645: PPUSH
42646: LD_VAR 0 1
42650: PUSH
42651: LD_VAR 0 4
42655: ARRAY
42656: PPUSH
42657: CALL_OW 2
42661: ST_TO_ADDR
// array := Delete ( array , index ) ;
42662: LD_ADDR_VAR 0 1
42666: PUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: LD_VAR 0 4
42676: PPUSH
42677: CALL_OW 3
42681: ST_TO_ADDR
// end ;
42682: GO 42606
42684: POP
42685: POP
// end ;
42686: LD_VAR 0 2
42690: RET
// export function GetBaseMaterials ( base ) ; begin
42691: LD_INT 0
42693: PPUSH
// result := [ 0 , 0 , 0 ] ;
42694: LD_ADDR_VAR 0 2
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// if not base then
42713: LD_VAR 0 1
42717: NOT
42718: IFFALSE 42722
// exit ;
42720: GO 42771
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42722: LD_ADDR_VAR 0 2
42726: PUSH
42727: LD_VAR 0 1
42731: PPUSH
42732: LD_INT 1
42734: PPUSH
42735: CALL_OW 275
42739: PUSH
42740: LD_VAR 0 1
42744: PPUSH
42745: LD_INT 2
42747: PPUSH
42748: CALL_OW 275
42752: PUSH
42753: LD_VAR 0 1
42757: PPUSH
42758: LD_INT 3
42760: PPUSH
42761: CALL_OW 275
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// end ;
42771: LD_VAR 0 2
42775: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42776: LD_INT 0
42778: PPUSH
42779: PPUSH
// result := array ;
42780: LD_ADDR_VAR 0 3
42784: PUSH
42785: LD_VAR 0 1
42789: ST_TO_ADDR
// if size >= result then
42790: LD_VAR 0 2
42794: PUSH
42795: LD_VAR 0 3
42799: GREATEREQUAL
42800: IFFALSE 42804
// exit ;
42802: GO 42854
// if size then
42804: LD_VAR 0 2
42808: IFFALSE 42854
// for i := array downto size do
42810: LD_ADDR_VAR 0 4
42814: PUSH
42815: DOUBLE
42816: LD_VAR 0 1
42820: INC
42821: ST_TO_ADDR
42822: LD_VAR 0 2
42826: PUSH
42827: FOR_DOWNTO
42828: IFFALSE 42852
// result := Delete ( result , result ) ;
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_VAR 0 3
42839: PPUSH
42840: LD_VAR 0 3
42844: PPUSH
42845: CALL_OW 3
42849: ST_TO_ADDR
42850: GO 42827
42852: POP
42853: POP
// end ;
42854: LD_VAR 0 3
42858: RET
// export function ComExit ( unit ) ; var tmp ; begin
42859: LD_INT 0
42861: PPUSH
42862: PPUSH
// if not IsInUnit ( unit ) then
42863: LD_VAR 0 1
42867: PPUSH
42868: CALL_OW 310
42872: NOT
42873: IFFALSE 42877
// exit ;
42875: GO 42937
// tmp := IsInUnit ( unit ) ;
42877: LD_ADDR_VAR 0 3
42881: PUSH
42882: LD_VAR 0 1
42886: PPUSH
42887: CALL_OW 310
42891: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42892: LD_VAR 0 3
42896: PPUSH
42897: CALL_OW 247
42901: PUSH
42902: LD_INT 2
42904: EQUAL
42905: IFFALSE 42918
// ComExitVehicle ( unit ) else
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 121
42916: GO 42927
// ComExitBuilding ( unit ) ;
42918: LD_VAR 0 1
42922: PPUSH
42923: CALL_OW 122
// result := tmp ;
42927: LD_ADDR_VAR 0 2
42931: PUSH
42932: LD_VAR 0 3
42936: ST_TO_ADDR
// end ;
42937: LD_VAR 0 2
42941: RET
// export function ComExitAll ( units ) ; var i ; begin
42942: LD_INT 0
42944: PPUSH
42945: PPUSH
// if not units then
42946: LD_VAR 0 1
42950: NOT
42951: IFFALSE 42955
// exit ;
42953: GO 42981
// for i in units do
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_VAR 0 1
42964: PUSH
42965: FOR_IN
42966: IFFALSE 42979
// ComExit ( i ) ;
42968: LD_VAR 0 3
42972: PPUSH
42973: CALL 42859 0 1
42977: GO 42965
42979: POP
42980: POP
// end ;
42981: LD_VAR 0 2
42985: RET
// export function ResetHc ; begin
42986: LD_INT 0
42988: PPUSH
// InitHc ;
42989: CALL_OW 19
// hc_importance := 0 ;
42993: LD_ADDR_OWVAR 32
42997: PUSH
42998: LD_INT 0
43000: ST_TO_ADDR
// end ;
43001: LD_VAR 0 1
43005: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
43006: LD_INT 0
43008: PPUSH
43009: PPUSH
43010: PPUSH
// _x := ( x1 + x2 ) div 2 ;
43011: LD_ADDR_VAR 0 6
43015: PUSH
43016: LD_VAR 0 1
43020: PUSH
43021: LD_VAR 0 3
43025: PLUS
43026: PUSH
43027: LD_INT 2
43029: DIV
43030: ST_TO_ADDR
// if _x < 0 then
43031: LD_VAR 0 6
43035: PUSH
43036: LD_INT 0
43038: LESS
43039: IFFALSE 43056
// _x := _x * - 1 ;
43041: LD_ADDR_VAR 0 6
43045: PUSH
43046: LD_VAR 0 6
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: MUL
43055: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43056: LD_ADDR_VAR 0 7
43060: PUSH
43061: LD_VAR 0 2
43065: PUSH
43066: LD_VAR 0 4
43070: PLUS
43071: PUSH
43072: LD_INT 2
43074: DIV
43075: ST_TO_ADDR
// if _y < 0 then
43076: LD_VAR 0 7
43080: PUSH
43081: LD_INT 0
43083: LESS
43084: IFFALSE 43101
// _y := _y * - 1 ;
43086: LD_ADDR_VAR 0 7
43090: PUSH
43091: LD_VAR 0 7
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: MUL
43100: ST_TO_ADDR
// result := [ _x , _y ] ;
43101: LD_ADDR_VAR 0 5
43105: PUSH
43106: LD_VAR 0 6
43110: PUSH
43111: LD_VAR 0 7
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// end ;
43120: LD_VAR 0 5
43124: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43125: LD_INT 0
43127: PPUSH
43128: PPUSH
43129: PPUSH
43130: PPUSH
// task := GetTaskList ( unit ) ;
43131: LD_ADDR_VAR 0 7
43135: PUSH
43136: LD_VAR 0 1
43140: PPUSH
43141: CALL_OW 437
43145: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43146: LD_VAR 0 7
43150: NOT
43151: PUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: LD_VAR 0 2
43161: PPUSH
43162: CALL_OW 308
43166: NOT
43167: AND
43168: IFFALSE 43172
// exit ;
43170: GO 43290
// if IsInArea ( unit , area ) then
43172: LD_VAR 0 1
43176: PPUSH
43177: LD_VAR 0 2
43181: PPUSH
43182: CALL_OW 308
43186: IFFALSE 43204
// begin ComMoveToArea ( unit , goAway ) ;
43188: LD_VAR 0 1
43192: PPUSH
43193: LD_VAR 0 3
43197: PPUSH
43198: CALL_OW 113
// exit ;
43202: GO 43290
// end ; if task [ 1 ] [ 1 ] <> M then
43204: LD_VAR 0 7
43208: PUSH
43209: LD_INT 1
43211: ARRAY
43212: PUSH
43213: LD_INT 1
43215: ARRAY
43216: PUSH
43217: LD_STRING M
43219: NONEQUAL
43220: IFFALSE 43224
// exit ;
43222: GO 43290
// x := task [ 1 ] [ 2 ] ;
43224: LD_ADDR_VAR 0 5
43228: PUSH
43229: LD_VAR 0 7
43233: PUSH
43234: LD_INT 1
43236: ARRAY
43237: PUSH
43238: LD_INT 2
43240: ARRAY
43241: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43242: LD_ADDR_VAR 0 6
43246: PUSH
43247: LD_VAR 0 7
43251: PUSH
43252: LD_INT 1
43254: ARRAY
43255: PUSH
43256: LD_INT 3
43258: ARRAY
43259: ST_TO_ADDR
// if InArea ( x , y , area ) then
43260: LD_VAR 0 5
43264: PPUSH
43265: LD_VAR 0 6
43269: PPUSH
43270: LD_VAR 0 2
43274: PPUSH
43275: CALL_OW 309
43279: IFFALSE 43290
// ComStop ( unit ) ;
43281: LD_VAR 0 1
43285: PPUSH
43286: CALL_OW 141
// end ;
43290: LD_VAR 0 4
43294: RET
// export function Abs ( value ) ; begin
43295: LD_INT 0
43297: PPUSH
// result := value ;
43298: LD_ADDR_VAR 0 2
43302: PUSH
43303: LD_VAR 0 1
43307: ST_TO_ADDR
// if value < 0 then
43308: LD_VAR 0 1
43312: PUSH
43313: LD_INT 0
43315: LESS
43316: IFFALSE 43333
// result := value * - 1 ;
43318: LD_ADDR_VAR 0 2
43322: PUSH
43323: LD_VAR 0 1
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: MUL
43332: ST_TO_ADDR
// end ;
43333: LD_VAR 0 2
43337: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43338: LD_INT 0
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
// if not unit or not building then
43348: LD_VAR 0 1
43352: NOT
43353: PUSH
43354: LD_VAR 0 2
43358: NOT
43359: OR
43360: IFFALSE 43364
// exit ;
43362: GO 43590
// x := GetX ( building ) ;
43364: LD_ADDR_VAR 0 4
43368: PUSH
43369: LD_VAR 0 2
43373: PPUSH
43374: CALL_OW 250
43378: ST_TO_ADDR
// y := GetY ( building ) ;
43379: LD_ADDR_VAR 0 6
43383: PUSH
43384: LD_VAR 0 2
43388: PPUSH
43389: CALL_OW 251
43393: ST_TO_ADDR
// d := GetDir ( building ) ;
43394: LD_ADDR_VAR 0 8
43398: PUSH
43399: LD_VAR 0 2
43403: PPUSH
43404: CALL_OW 254
43408: ST_TO_ADDR
// r := 4 ;
43409: LD_ADDR_VAR 0 9
43413: PUSH
43414: LD_INT 4
43416: ST_TO_ADDR
// for i := 1 to 5 do
43417: LD_ADDR_VAR 0 10
43421: PUSH
43422: DOUBLE
43423: LD_INT 1
43425: DEC
43426: ST_TO_ADDR
43427: LD_INT 5
43429: PUSH
43430: FOR_TO
43431: IFFALSE 43588
// begin _x := ShiftX ( x , d , r + i ) ;
43433: LD_ADDR_VAR 0 5
43437: PUSH
43438: LD_VAR 0 4
43442: PPUSH
43443: LD_VAR 0 8
43447: PPUSH
43448: LD_VAR 0 9
43452: PUSH
43453: LD_VAR 0 10
43457: PLUS
43458: PPUSH
43459: CALL_OW 272
43463: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43464: LD_ADDR_VAR 0 7
43468: PUSH
43469: LD_VAR 0 6
43473: PPUSH
43474: LD_VAR 0 8
43478: PPUSH
43479: LD_VAR 0 9
43483: PUSH
43484: LD_VAR 0 10
43488: PLUS
43489: PPUSH
43490: CALL_OW 273
43494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43495: LD_VAR 0 5
43499: PPUSH
43500: LD_VAR 0 7
43504: PPUSH
43505: CALL_OW 488
43509: PUSH
43510: LD_VAR 0 5
43514: PPUSH
43515: LD_VAR 0 7
43519: PPUSH
43520: CALL_OW 428
43524: PPUSH
43525: CALL_OW 247
43529: PUSH
43530: LD_INT 3
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: IN
43540: NOT
43541: AND
43542: IFFALSE 43586
// begin ComMoveXY ( unit , _x , _y ) ;
43544: LD_VAR 0 1
43548: PPUSH
43549: LD_VAR 0 5
43553: PPUSH
43554: LD_VAR 0 7
43558: PPUSH
43559: CALL_OW 111
// result := [ _x , _y ] ;
43563: LD_ADDR_VAR 0 3
43567: PUSH
43568: LD_VAR 0 5
43572: PUSH
43573: LD_VAR 0 7
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: ST_TO_ADDR
// exit ;
43582: POP
43583: POP
43584: GO 43590
// end ; end ;
43586: GO 43430
43588: POP
43589: POP
// end ;
43590: LD_VAR 0 3
43594: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43595: LD_INT 0
43597: PPUSH
43598: PPUSH
43599: PPUSH
// result := 0 ;
43600: LD_ADDR_VAR 0 3
43604: PUSH
43605: LD_INT 0
43607: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43608: LD_VAR 0 1
43612: PUSH
43613: LD_INT 0
43615: LESS
43616: PUSH
43617: LD_VAR 0 1
43621: PUSH
43622: LD_INT 8
43624: GREATER
43625: OR
43626: PUSH
43627: LD_VAR 0 2
43631: PUSH
43632: LD_INT 0
43634: LESS
43635: OR
43636: PUSH
43637: LD_VAR 0 2
43641: PUSH
43642: LD_INT 8
43644: GREATER
43645: OR
43646: IFFALSE 43650
// exit ;
43648: GO 43725
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43650: LD_ADDR_VAR 0 4
43654: PUSH
43655: LD_INT 22
43657: PUSH
43658: LD_VAR 0 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PPUSH
43667: CALL_OW 69
43671: PUSH
43672: FOR_IN
43673: IFFALSE 43723
// begin un := UnitShoot ( i ) ;
43675: LD_ADDR_VAR 0 5
43679: PUSH
43680: LD_VAR 0 4
43684: PPUSH
43685: CALL_OW 504
43689: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43690: LD_VAR 0 5
43694: PPUSH
43695: CALL_OW 255
43699: PUSH
43700: LD_VAR 0 1
43704: EQUAL
43705: IFFALSE 43721
// begin result := un ;
43707: LD_ADDR_VAR 0 3
43711: PUSH
43712: LD_VAR 0 5
43716: ST_TO_ADDR
// exit ;
43717: POP
43718: POP
43719: GO 43725
// end ; end ;
43721: GO 43672
43723: POP
43724: POP
// end ;
43725: LD_VAR 0 3
43729: RET
// export function GetCargoBay ( units ) ; begin
43730: LD_INT 0
43732: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43733: LD_ADDR_VAR 0 2
43737: PUSH
43738: LD_VAR 0 1
43742: PPUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 34
43748: PUSH
43749: LD_INT 12
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 34
43758: PUSH
43759: LD_INT 51
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 34
43768: PUSH
43769: LD_INT 32
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 34
43778: PUSH
43779: LD_INT 89
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: PPUSH
43793: CALL_OW 72
43797: ST_TO_ADDR
// end ;
43798: LD_VAR 0 2
43802: RET
// export function Negate ( value ) ; begin
43803: LD_INT 0
43805: PPUSH
// result := not value ;
43806: LD_ADDR_VAR 0 2
43810: PUSH
43811: LD_VAR 0 1
43815: NOT
43816: ST_TO_ADDR
// end ;
43817: LD_VAR 0 2
43821: RET
// export function Inc ( value ) ; begin
43822: LD_INT 0
43824: PPUSH
// result := value + 1 ;
43825: LD_ADDR_VAR 0 2
43829: PUSH
43830: LD_VAR 0 1
43834: PUSH
43835: LD_INT 1
43837: PLUS
43838: ST_TO_ADDR
// end ;
43839: LD_VAR 0 2
43843: RET
// export function Dec ( value ) ; begin
43844: LD_INT 0
43846: PPUSH
// result := value - 1 ;
43847: LD_ADDR_VAR 0 2
43851: PUSH
43852: LD_VAR 0 1
43856: PUSH
43857: LD_INT 1
43859: MINUS
43860: ST_TO_ADDR
// end ;
43861: LD_VAR 0 2
43865: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43866: LD_INT 0
43868: PPUSH
43869: PPUSH
43870: PPUSH
43871: PPUSH
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43876: LD_VAR 0 1
43880: PPUSH
43881: LD_VAR 0 2
43885: PPUSH
43886: CALL_OW 488
43890: NOT
43891: PUSH
43892: LD_VAR 0 3
43896: PPUSH
43897: LD_VAR 0 4
43901: PPUSH
43902: CALL_OW 488
43906: NOT
43907: OR
43908: IFFALSE 43921
// begin result := - 1 ;
43910: LD_ADDR_VAR 0 5
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: ST_TO_ADDR
// exit ;
43919: GO 44156
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43921: LD_ADDR_VAR 0 12
43925: PUSH
43926: LD_VAR 0 1
43930: PPUSH
43931: LD_VAR 0 2
43935: PPUSH
43936: LD_VAR 0 3
43940: PPUSH
43941: LD_VAR 0 4
43945: PPUSH
43946: CALL 43006 0 4
43950: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43951: LD_ADDR_VAR 0 11
43955: PUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: LD_VAR 0 2
43965: PPUSH
43966: LD_VAR 0 12
43970: PUSH
43971: LD_INT 1
43973: ARRAY
43974: PPUSH
43975: LD_VAR 0 12
43979: PUSH
43980: LD_INT 2
43982: ARRAY
43983: PPUSH
43984: CALL_OW 298
43988: ST_TO_ADDR
// distance := 9999 ;
43989: LD_ADDR_VAR 0 10
43993: PUSH
43994: LD_INT 9999
43996: ST_TO_ADDR
// for i := 0 to 5 do
43997: LD_ADDR_VAR 0 6
44001: PUSH
44002: DOUBLE
44003: LD_INT 0
44005: DEC
44006: ST_TO_ADDR
44007: LD_INT 5
44009: PUSH
44010: FOR_TO
44011: IFFALSE 44154
// begin _x := ShiftX ( x1 , i , centerDist ) ;
44013: LD_ADDR_VAR 0 7
44017: PUSH
44018: LD_VAR 0 1
44022: PPUSH
44023: LD_VAR 0 6
44027: PPUSH
44028: LD_VAR 0 11
44032: PPUSH
44033: CALL_OW 272
44037: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
44038: LD_ADDR_VAR 0 8
44042: PUSH
44043: LD_VAR 0 2
44047: PPUSH
44048: LD_VAR 0 6
44052: PPUSH
44053: LD_VAR 0 11
44057: PPUSH
44058: CALL_OW 273
44062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44063: LD_VAR 0 7
44067: PPUSH
44068: LD_VAR 0 8
44072: PPUSH
44073: CALL_OW 488
44077: NOT
44078: IFFALSE 44082
// continue ;
44080: GO 44010
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44082: LD_ADDR_VAR 0 9
44086: PUSH
44087: LD_VAR 0 12
44091: PUSH
44092: LD_INT 1
44094: ARRAY
44095: PPUSH
44096: LD_VAR 0 12
44100: PUSH
44101: LD_INT 2
44103: ARRAY
44104: PPUSH
44105: LD_VAR 0 7
44109: PPUSH
44110: LD_VAR 0 8
44114: PPUSH
44115: CALL_OW 298
44119: ST_TO_ADDR
// if tmp < distance then
44120: LD_VAR 0 9
44124: PUSH
44125: LD_VAR 0 10
44129: LESS
44130: IFFALSE 44152
// begin result := i ;
44132: LD_ADDR_VAR 0 5
44136: PUSH
44137: LD_VAR 0 6
44141: ST_TO_ADDR
// distance := tmp ;
44142: LD_ADDR_VAR 0 10
44146: PUSH
44147: LD_VAR 0 9
44151: ST_TO_ADDR
// end ; end ;
44152: GO 44010
44154: POP
44155: POP
// end ;
44156: LD_VAR 0 5
44160: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44161: LD_INT 0
44163: PPUSH
44164: PPUSH
// if not driver or not IsInUnit ( driver ) then
44165: LD_VAR 0 1
44169: NOT
44170: PUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 310
44180: NOT
44181: OR
44182: IFFALSE 44186
// exit ;
44184: GO 44276
// vehicle := IsInUnit ( driver ) ;
44186: LD_ADDR_VAR 0 3
44190: PUSH
44191: LD_VAR 0 1
44195: PPUSH
44196: CALL_OW 310
44200: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44201: LD_VAR 0 1
44205: PPUSH
44206: LD_STRING \
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: PUSH
44236: LD_STRING E
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_VAR 0 3
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PPUSH
44272: CALL_OW 446
// end ;
44276: LD_VAR 0 2
44280: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44281: LD_INT 0
44283: PPUSH
44284: PPUSH
// if not driver or not IsInUnit ( driver ) then
44285: LD_VAR 0 1
44289: NOT
44290: PUSH
44291: LD_VAR 0 1
44295: PPUSH
44296: CALL_OW 310
44300: NOT
44301: OR
44302: IFFALSE 44306
// exit ;
44304: GO 44396
// vehicle := IsInUnit ( driver ) ;
44306: LD_ADDR_VAR 0 3
44310: PUSH
44311: LD_VAR 0 1
44315: PPUSH
44316: CALL_OW 310
44320: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44321: LD_VAR 0 1
44325: PPUSH
44326: LD_STRING \
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: PUSH
44356: LD_STRING E
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_VAR 0 3
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PPUSH
44392: CALL_OW 447
// end ;
44396: LD_VAR 0 2
44400: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44401: LD_INT 0
44403: PPUSH
44404: PPUSH
44405: PPUSH
// tmp := [ ] ;
44406: LD_ADDR_VAR 0 5
44410: PUSH
44411: EMPTY
44412: ST_TO_ADDR
// for i in units do
44413: LD_ADDR_VAR 0 4
44417: PUSH
44418: LD_VAR 0 1
44422: PUSH
44423: FOR_IN
44424: IFFALSE 44462
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44426: LD_ADDR_VAR 0 5
44430: PUSH
44431: LD_VAR 0 5
44435: PPUSH
44436: LD_VAR 0 5
44440: PUSH
44441: LD_INT 1
44443: PLUS
44444: PPUSH
44445: LD_VAR 0 4
44449: PPUSH
44450: CALL_OW 256
44454: PPUSH
44455: CALL_OW 2
44459: ST_TO_ADDR
44460: GO 44423
44462: POP
44463: POP
// if not tmp then
44464: LD_VAR 0 5
44468: NOT
44469: IFFALSE 44473
// exit ;
44471: GO 44521
// if asc then
44473: LD_VAR 0 2
44477: IFFALSE 44501
// result := SortListByListAsc ( units , tmp ) else
44479: LD_ADDR_VAR 0 3
44483: PUSH
44484: LD_VAR 0 1
44488: PPUSH
44489: LD_VAR 0 5
44493: PPUSH
44494: CALL_OW 76
44498: ST_TO_ADDR
44499: GO 44521
// result := SortListByListDesc ( units , tmp ) ;
44501: LD_ADDR_VAR 0 3
44505: PUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: LD_VAR 0 5
44515: PPUSH
44516: CALL_OW 77
44520: ST_TO_ADDR
// end ;
44521: LD_VAR 0 3
44525: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44526: LD_INT 0
44528: PPUSH
44529: PPUSH
// task := GetTaskList ( mech ) ;
44530: LD_ADDR_VAR 0 4
44534: PUSH
44535: LD_VAR 0 1
44539: PPUSH
44540: CALL_OW 437
44544: ST_TO_ADDR
// if not task then
44545: LD_VAR 0 4
44549: NOT
44550: IFFALSE 44554
// exit ;
44552: GO 44596
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44554: LD_ADDR_VAR 0 3
44558: PUSH
44559: LD_VAR 0 4
44563: PUSH
44564: LD_INT 1
44566: ARRAY
44567: PUSH
44568: LD_INT 1
44570: ARRAY
44571: PUSH
44572: LD_STRING r
44574: EQUAL
44575: PUSH
44576: LD_VAR 0 4
44580: PUSH
44581: LD_INT 1
44583: ARRAY
44584: PUSH
44585: LD_INT 4
44587: ARRAY
44588: PUSH
44589: LD_VAR 0 2
44593: EQUAL
44594: AND
44595: ST_TO_ADDR
// end ;
44596: LD_VAR 0 3
44600: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44601: LD_INT 0
44603: PPUSH
// SetDir ( unit , d ) ;
44604: LD_VAR 0 1
44608: PPUSH
44609: LD_VAR 0 4
44613: PPUSH
44614: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44618: LD_VAR 0 1
44622: PPUSH
44623: LD_VAR 0 2
44627: PPUSH
44628: LD_VAR 0 3
44632: PPUSH
44633: LD_VAR 0 5
44637: PPUSH
44638: CALL_OW 48
// end ;
44642: LD_VAR 0 6
44646: RET
// export function ToNaturalNumber ( number ) ; begin
44647: LD_INT 0
44649: PPUSH
// result := number div 1 ;
44650: LD_ADDR_VAR 0 2
44654: PUSH
44655: LD_VAR 0 1
44659: PUSH
44660: LD_INT 1
44662: DIV
44663: ST_TO_ADDR
// if number < 0 then
44664: LD_VAR 0 1
44668: PUSH
44669: LD_INT 0
44671: LESS
44672: IFFALSE 44682
// result := 0 ;
44674: LD_ADDR_VAR 0 2
44678: PUSH
44679: LD_INT 0
44681: ST_TO_ADDR
// end ;
44682: LD_VAR 0 2
44686: RET
// export function SortByClass ( units , class ) ; var un ; begin
44687: LD_INT 0
44689: PPUSH
44690: PPUSH
// if not units or not class then
44691: LD_VAR 0 1
44695: NOT
44696: PUSH
44697: LD_VAR 0 2
44701: NOT
44702: OR
44703: IFFALSE 44707
// exit ;
44705: GO 44802
// result := [ ] ;
44707: LD_ADDR_VAR 0 3
44711: PUSH
44712: EMPTY
44713: ST_TO_ADDR
// for un in units do
44714: LD_ADDR_VAR 0 4
44718: PUSH
44719: LD_VAR 0 1
44723: PUSH
44724: FOR_IN
44725: IFFALSE 44800
// if GetClass ( un ) = class then
44727: LD_VAR 0 4
44731: PPUSH
44732: CALL_OW 257
44736: PUSH
44737: LD_VAR 0 2
44741: EQUAL
44742: IFFALSE 44769
// result := Insert ( result , 1 , un ) else
44744: LD_ADDR_VAR 0 3
44748: PUSH
44749: LD_VAR 0 3
44753: PPUSH
44754: LD_INT 1
44756: PPUSH
44757: LD_VAR 0 4
44761: PPUSH
44762: CALL_OW 2
44766: ST_TO_ADDR
44767: GO 44798
// result := Replace ( result , result + 1 , un ) ;
44769: LD_ADDR_VAR 0 3
44773: PUSH
44774: LD_VAR 0 3
44778: PPUSH
44779: LD_VAR 0 3
44783: PUSH
44784: LD_INT 1
44786: PLUS
44787: PPUSH
44788: LD_VAR 0 4
44792: PPUSH
44793: CALL_OW 1
44797: ST_TO_ADDR
44798: GO 44724
44800: POP
44801: POP
// end ;
44802: LD_VAR 0 3
44806: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44807: LD_INT 0
44809: PPUSH
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
// result := [ ] ;
44816: LD_ADDR_VAR 0 4
44820: PUSH
44821: EMPTY
44822: ST_TO_ADDR
// if x - r < 0 then
44823: LD_VAR 0 1
44827: PUSH
44828: LD_VAR 0 3
44832: MINUS
44833: PUSH
44834: LD_INT 0
44836: LESS
44837: IFFALSE 44849
// min_x := 0 else
44839: LD_ADDR_VAR 0 8
44843: PUSH
44844: LD_INT 0
44846: ST_TO_ADDR
44847: GO 44865
// min_x := x - r ;
44849: LD_ADDR_VAR 0 8
44853: PUSH
44854: LD_VAR 0 1
44858: PUSH
44859: LD_VAR 0 3
44863: MINUS
44864: ST_TO_ADDR
// if y - r < 0 then
44865: LD_VAR 0 2
44869: PUSH
44870: LD_VAR 0 3
44874: MINUS
44875: PUSH
44876: LD_INT 0
44878: LESS
44879: IFFALSE 44891
// min_y := 0 else
44881: LD_ADDR_VAR 0 7
44885: PUSH
44886: LD_INT 0
44888: ST_TO_ADDR
44889: GO 44907
// min_y := y - r ;
44891: LD_ADDR_VAR 0 7
44895: PUSH
44896: LD_VAR 0 2
44900: PUSH
44901: LD_VAR 0 3
44905: MINUS
44906: ST_TO_ADDR
// max_x := x + r ;
44907: LD_ADDR_VAR 0 9
44911: PUSH
44912: LD_VAR 0 1
44916: PUSH
44917: LD_VAR 0 3
44921: PLUS
44922: ST_TO_ADDR
// max_y := y + r ;
44923: LD_ADDR_VAR 0 10
44927: PUSH
44928: LD_VAR 0 2
44932: PUSH
44933: LD_VAR 0 3
44937: PLUS
44938: ST_TO_ADDR
// for _x = min_x to max_x do
44939: LD_ADDR_VAR 0 5
44943: PUSH
44944: DOUBLE
44945: LD_VAR 0 8
44949: DEC
44950: ST_TO_ADDR
44951: LD_VAR 0 9
44955: PUSH
44956: FOR_TO
44957: IFFALSE 45058
// for _y = min_y to max_y do
44959: LD_ADDR_VAR 0 6
44963: PUSH
44964: DOUBLE
44965: LD_VAR 0 7
44969: DEC
44970: ST_TO_ADDR
44971: LD_VAR 0 10
44975: PUSH
44976: FOR_TO
44977: IFFALSE 45054
// begin if not ValidHex ( _x , _y ) then
44979: LD_VAR 0 5
44983: PPUSH
44984: LD_VAR 0 6
44988: PPUSH
44989: CALL_OW 488
44993: NOT
44994: IFFALSE 44998
// continue ;
44996: GO 44976
// if GetResourceTypeXY ( _x , _y ) then
44998: LD_VAR 0 5
45002: PPUSH
45003: LD_VAR 0 6
45007: PPUSH
45008: CALL_OW 283
45012: IFFALSE 45052
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
45014: LD_ADDR_VAR 0 4
45018: PUSH
45019: LD_VAR 0 4
45023: PPUSH
45024: LD_VAR 0 4
45028: PUSH
45029: LD_INT 1
45031: PLUS
45032: PPUSH
45033: LD_VAR 0 5
45037: PUSH
45038: LD_VAR 0 6
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PPUSH
45047: CALL_OW 1
45051: ST_TO_ADDR
// end ;
45052: GO 44976
45054: POP
45055: POP
45056: GO 44956
45058: POP
45059: POP
// end ;
45060: LD_VAR 0 4
45064: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45065: LD_INT 0
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
// if not units then
45075: LD_VAR 0 1
45079: NOT
45080: IFFALSE 45084
// exit ;
45082: GO 45612
// result := UnitFilter ( units , [ f_ok ] ) ;
45084: LD_ADDR_VAR 0 3
45088: PUSH
45089: LD_VAR 0 1
45093: PPUSH
45094: LD_INT 50
45096: PUSH
45097: EMPTY
45098: LIST
45099: PPUSH
45100: CALL_OW 72
45104: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45105: LD_ADDR_VAR 0 8
45109: PUSH
45110: LD_VAR 0 1
45114: PUSH
45115: LD_INT 1
45117: ARRAY
45118: PPUSH
45119: CALL_OW 255
45123: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45124: LD_ADDR_VAR 0 10
45128: PUSH
45129: LD_INT 29
45131: PUSH
45132: LD_INT 91
45134: PUSH
45135: LD_INT 49
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: ST_TO_ADDR
// if not result then
45143: LD_VAR 0 3
45147: NOT
45148: IFFALSE 45152
// exit ;
45150: GO 45612
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45152: LD_ADDR_VAR 0 5
45156: PUSH
45157: LD_INT 81
45159: PUSH
45160: LD_VAR 0 8
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PPUSH
45169: CALL_OW 69
45173: ST_TO_ADDR
// for i in result do
45174: LD_ADDR_VAR 0 4
45178: PUSH
45179: LD_VAR 0 3
45183: PUSH
45184: FOR_IN
45185: IFFALSE 45610
// begin tag := GetTag ( i ) + 1 ;
45187: LD_ADDR_VAR 0 9
45191: PUSH
45192: LD_VAR 0 4
45196: PPUSH
45197: CALL_OW 110
45201: PUSH
45202: LD_INT 1
45204: PLUS
45205: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
45206: LD_ADDR_VAR 0 7
45210: PUSH
45211: LD_VAR 0 4
45215: PPUSH
45216: CALL_OW 250
45220: PPUSH
45221: LD_VAR 0 4
45225: PPUSH
45226: CALL_OW 251
45230: PPUSH
45231: LD_INT 4
45233: PPUSH
45234: CALL 44807 0 3
45238: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
45239: LD_VAR 0 4
45243: PPUSH
45244: CALL_OW 247
45248: PUSH
45249: LD_INT 2
45251: EQUAL
45252: PUSH
45253: LD_VAR 0 7
45257: PUSH
45258: LD_INT 2
45260: GREATER
45261: AND
45262: PUSH
45263: LD_VAR 0 4
45267: PPUSH
45268: CALL_OW 264
45272: PUSH
45273: LD_VAR 0 10
45277: IN
45278: NOT
45279: AND
45280: IFFALSE 45319
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45282: LD_VAR 0 4
45286: PPUSH
45287: LD_VAR 0 7
45291: PUSH
45292: LD_INT 1
45294: ARRAY
45295: PUSH
45296: LD_INT 1
45298: ARRAY
45299: PPUSH
45300: LD_VAR 0 7
45304: PUSH
45305: LD_INT 1
45307: ARRAY
45308: PUSH
45309: LD_INT 2
45311: ARRAY
45312: PPUSH
45313: CALL_OW 116
45317: GO 45608
// if path > tag then
45319: LD_VAR 0 2
45323: PUSH
45324: LD_VAR 0 9
45328: GREATER
45329: IFFALSE 45537
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45331: LD_ADDR_VAR 0 6
45335: PUSH
45336: LD_VAR 0 5
45340: PPUSH
45341: LD_INT 91
45343: PUSH
45344: LD_VAR 0 4
45348: PUSH
45349: LD_INT 8
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: PPUSH
45357: CALL_OW 72
45361: ST_TO_ADDR
// if nearEnemy then
45362: LD_VAR 0 6
45366: IFFALSE 45435
// begin if GetWeapon ( i ) = ru_time_lapser then
45368: LD_VAR 0 4
45372: PPUSH
45373: CALL_OW 264
45377: PUSH
45378: LD_INT 49
45380: EQUAL
45381: IFFALSE 45409
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45383: LD_VAR 0 4
45387: PPUSH
45388: LD_VAR 0 6
45392: PPUSH
45393: LD_VAR 0 4
45397: PPUSH
45398: CALL_OW 74
45402: PPUSH
45403: CALL_OW 112
45407: GO 45433
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45409: LD_VAR 0 4
45413: PPUSH
45414: LD_VAR 0 6
45418: PPUSH
45419: LD_VAR 0 4
45423: PPUSH
45424: CALL_OW 74
45428: PPUSH
45429: CALL 46683 0 2
// end else
45433: GO 45535
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45435: LD_VAR 0 4
45439: PPUSH
45440: LD_VAR 0 2
45444: PUSH
45445: LD_VAR 0 9
45449: ARRAY
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PPUSH
45455: LD_VAR 0 2
45459: PUSH
45460: LD_VAR 0 9
45464: ARRAY
45465: PUSH
45466: LD_INT 2
45468: ARRAY
45469: PPUSH
45470: CALL_OW 297
45474: PUSH
45475: LD_INT 6
45477: GREATER
45478: IFFALSE 45521
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45480: LD_VAR 0 4
45484: PPUSH
45485: LD_VAR 0 2
45489: PUSH
45490: LD_VAR 0 9
45494: ARRAY
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: PPUSH
45500: LD_VAR 0 2
45504: PUSH
45505: LD_VAR 0 9
45509: ARRAY
45510: PUSH
45511: LD_INT 2
45513: ARRAY
45514: PPUSH
45515: CALL_OW 114
45519: GO 45535
// SetTag ( i , tag ) ;
45521: LD_VAR 0 4
45525: PPUSH
45526: LD_VAR 0 9
45530: PPUSH
45531: CALL_OW 109
// end else
45535: GO 45608
// if enemy then
45537: LD_VAR 0 5
45541: IFFALSE 45608
// begin if GetWeapon ( i ) = ru_time_lapser then
45543: LD_VAR 0 4
45547: PPUSH
45548: CALL_OW 264
45552: PUSH
45553: LD_INT 49
45555: EQUAL
45556: IFFALSE 45584
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45558: LD_VAR 0 4
45562: PPUSH
45563: LD_VAR 0 5
45567: PPUSH
45568: LD_VAR 0 4
45572: PPUSH
45573: CALL_OW 74
45577: PPUSH
45578: CALL_OW 112
45582: GO 45608
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45584: LD_VAR 0 4
45588: PPUSH
45589: LD_VAR 0 5
45593: PPUSH
45594: LD_VAR 0 4
45598: PPUSH
45599: CALL_OW 74
45603: PPUSH
45604: CALL 46683 0 2
// end ; end ;
45608: GO 45184
45610: POP
45611: POP
// end ;
45612: LD_VAR 0 3
45616: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45617: LD_INT 0
45619: PPUSH
45620: PPUSH
45621: PPUSH
// if not unit or IsInUnit ( unit ) then
45622: LD_VAR 0 1
45626: NOT
45627: PUSH
45628: LD_VAR 0 1
45632: PPUSH
45633: CALL_OW 310
45637: OR
45638: IFFALSE 45642
// exit ;
45640: GO 45733
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45642: LD_ADDR_VAR 0 4
45646: PUSH
45647: LD_VAR 0 1
45651: PPUSH
45652: CALL_OW 250
45656: PPUSH
45657: LD_VAR 0 2
45661: PPUSH
45662: LD_INT 1
45664: PPUSH
45665: CALL_OW 272
45669: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45670: LD_ADDR_VAR 0 5
45674: PUSH
45675: LD_VAR 0 1
45679: PPUSH
45680: CALL_OW 251
45684: PPUSH
45685: LD_VAR 0 2
45689: PPUSH
45690: LD_INT 1
45692: PPUSH
45693: CALL_OW 273
45697: ST_TO_ADDR
// if ValidHex ( x , y ) then
45698: LD_VAR 0 4
45702: PPUSH
45703: LD_VAR 0 5
45707: PPUSH
45708: CALL_OW 488
45712: IFFALSE 45733
// ComTurnXY ( unit , x , y ) ;
45714: LD_VAR 0 1
45718: PPUSH
45719: LD_VAR 0 4
45723: PPUSH
45724: LD_VAR 0 5
45728: PPUSH
45729: CALL_OW 118
// end ;
45733: LD_VAR 0 3
45737: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45738: LD_INT 0
45740: PPUSH
45741: PPUSH
// result := false ;
45742: LD_ADDR_VAR 0 3
45746: PUSH
45747: LD_INT 0
45749: ST_TO_ADDR
// if not units then
45750: LD_VAR 0 2
45754: NOT
45755: IFFALSE 45759
// exit ;
45757: GO 45804
// for i in units do
45759: LD_ADDR_VAR 0 4
45763: PUSH
45764: LD_VAR 0 2
45768: PUSH
45769: FOR_IN
45770: IFFALSE 45802
// if See ( side , i ) then
45772: LD_VAR 0 1
45776: PPUSH
45777: LD_VAR 0 4
45781: PPUSH
45782: CALL_OW 292
45786: IFFALSE 45800
// begin result := true ;
45788: LD_ADDR_VAR 0 3
45792: PUSH
45793: LD_INT 1
45795: ST_TO_ADDR
// exit ;
45796: POP
45797: POP
45798: GO 45804
// end ;
45800: GO 45769
45802: POP
45803: POP
// end ;
45804: LD_VAR 0 3
45808: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45809: LD_INT 0
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
// if not unit or not points then
45815: LD_VAR 0 1
45819: NOT
45820: PUSH
45821: LD_VAR 0 2
45825: NOT
45826: OR
45827: IFFALSE 45831
// exit ;
45829: GO 45921
// dist := 99999 ;
45831: LD_ADDR_VAR 0 5
45835: PUSH
45836: LD_INT 99999
45838: ST_TO_ADDR
// for i in points do
45839: LD_ADDR_VAR 0 4
45843: PUSH
45844: LD_VAR 0 2
45848: PUSH
45849: FOR_IN
45850: IFFALSE 45919
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45852: LD_ADDR_VAR 0 6
45856: PUSH
45857: LD_VAR 0 1
45861: PPUSH
45862: LD_VAR 0 4
45866: PUSH
45867: LD_INT 1
45869: ARRAY
45870: PPUSH
45871: LD_VAR 0 4
45875: PUSH
45876: LD_INT 2
45878: ARRAY
45879: PPUSH
45880: CALL_OW 297
45884: ST_TO_ADDR
// if tmpDist < dist then
45885: LD_VAR 0 6
45889: PUSH
45890: LD_VAR 0 5
45894: LESS
45895: IFFALSE 45917
// begin result := i ;
45897: LD_ADDR_VAR 0 3
45901: PUSH
45902: LD_VAR 0 4
45906: ST_TO_ADDR
// dist := tmpDist ;
45907: LD_ADDR_VAR 0 5
45911: PUSH
45912: LD_VAR 0 6
45916: ST_TO_ADDR
// end ; end ;
45917: GO 45849
45919: POP
45920: POP
// end ;
45921: LD_VAR 0 3
45925: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45926: LD_INT 0
45928: PPUSH
// uc_side := side ;
45929: LD_ADDR_OWVAR 20
45933: PUSH
45934: LD_VAR 0 1
45938: ST_TO_ADDR
// uc_nation := 3 ;
45939: LD_ADDR_OWVAR 21
45943: PUSH
45944: LD_INT 3
45946: ST_TO_ADDR
// vc_chassis := 25 ;
45947: LD_ADDR_OWVAR 37
45951: PUSH
45952: LD_INT 25
45954: ST_TO_ADDR
// vc_engine := engine_siberite ;
45955: LD_ADDR_OWVAR 39
45959: PUSH
45960: LD_INT 3
45962: ST_TO_ADDR
// vc_control := control_computer ;
45963: LD_ADDR_OWVAR 38
45967: PUSH
45968: LD_INT 3
45970: ST_TO_ADDR
// vc_weapon := 59 ;
45971: LD_ADDR_OWVAR 40
45975: PUSH
45976: LD_INT 59
45978: ST_TO_ADDR
// result := CreateVehicle ;
45979: LD_ADDR_VAR 0 5
45983: PUSH
45984: CALL_OW 45
45988: ST_TO_ADDR
// SetDir ( result , d ) ;
45989: LD_VAR 0 5
45993: PPUSH
45994: LD_VAR 0 4
45998: PPUSH
45999: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
46003: LD_VAR 0 5
46007: PPUSH
46008: LD_VAR 0 2
46012: PPUSH
46013: LD_VAR 0 3
46017: PPUSH
46018: LD_INT 0
46020: PPUSH
46021: CALL_OW 48
// end ;
46025: LD_VAR 0 5
46029: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
46030: LD_INT 0
46032: PPUSH
46033: PPUSH
46034: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
46035: LD_ADDR_VAR 0 2
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46058: LD_VAR 0 1
46062: NOT
46063: PUSH
46064: LD_VAR 0 1
46068: PPUSH
46069: CALL_OW 264
46073: PUSH
46074: LD_INT 12
46076: PUSH
46077: LD_INT 51
46079: PUSH
46080: LD_INT 32
46082: PUSH
46083: LD_INT 89
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: IN
46092: NOT
46093: OR
46094: IFFALSE 46098
// exit ;
46096: GO 46196
// for i := 1 to 3 do
46098: LD_ADDR_VAR 0 3
46102: PUSH
46103: DOUBLE
46104: LD_INT 1
46106: DEC
46107: ST_TO_ADDR
46108: LD_INT 3
46110: PUSH
46111: FOR_TO
46112: IFFALSE 46194
// begin tmp := GetCargo ( cargo , i ) ;
46114: LD_ADDR_VAR 0 4
46118: PUSH
46119: LD_VAR 0 1
46123: PPUSH
46124: LD_VAR 0 3
46128: PPUSH
46129: CALL_OW 289
46133: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46134: LD_ADDR_VAR 0 2
46138: PUSH
46139: LD_VAR 0 2
46143: PPUSH
46144: LD_VAR 0 3
46148: PPUSH
46149: LD_VAR 0 4
46153: PPUSH
46154: CALL_OW 1
46158: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46159: LD_ADDR_VAR 0 2
46163: PUSH
46164: LD_VAR 0 2
46168: PPUSH
46169: LD_INT 4
46171: PPUSH
46172: LD_VAR 0 2
46176: PUSH
46177: LD_INT 4
46179: ARRAY
46180: PUSH
46181: LD_VAR 0 4
46185: PLUS
46186: PPUSH
46187: CALL_OW 1
46191: ST_TO_ADDR
// end ;
46192: GO 46111
46194: POP
46195: POP
// end ;
46196: LD_VAR 0 2
46200: RET
// export function Length ( array ) ; begin
46201: LD_INT 0
46203: PPUSH
// result := array + 0 ;
46204: LD_ADDR_VAR 0 2
46208: PUSH
46209: LD_VAR 0 1
46213: PUSH
46214: LD_INT 0
46216: PLUS
46217: ST_TO_ADDR
// end ;
46218: LD_VAR 0 2
46222: RET
// export function PrepareArray ( array ) ; begin
46223: LD_INT 0
46225: PPUSH
// result := array diff 0 ;
46226: LD_ADDR_VAR 0 2
46230: PUSH
46231: LD_VAR 0 1
46235: PUSH
46236: LD_INT 0
46238: DIFF
46239: ST_TO_ADDR
// if not result [ 1 ] then
46240: LD_VAR 0 2
46244: PUSH
46245: LD_INT 1
46247: ARRAY
46248: NOT
46249: IFFALSE 46269
// result := Delete ( result , 1 ) ;
46251: LD_ADDR_VAR 0 2
46255: PUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: LD_INT 1
46263: PPUSH
46264: CALL_OW 3
46268: ST_TO_ADDR
// end ;
46269: LD_VAR 0 2
46273: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46274: LD_INT 0
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
// sibRocketRange := 25 ;
46280: LD_ADDR_VAR 0 6
46284: PUSH
46285: LD_INT 25
46287: ST_TO_ADDR
// result := false ;
46288: LD_ADDR_VAR 0 4
46292: PUSH
46293: LD_INT 0
46295: ST_TO_ADDR
// for i := 0 to 5 do
46296: LD_ADDR_VAR 0 5
46300: PUSH
46301: DOUBLE
46302: LD_INT 0
46304: DEC
46305: ST_TO_ADDR
46306: LD_INT 5
46308: PUSH
46309: FOR_TO
46310: IFFALSE 46377
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46312: LD_VAR 0 1
46316: PPUSH
46317: LD_VAR 0 5
46321: PPUSH
46322: LD_VAR 0 6
46326: PPUSH
46327: CALL_OW 272
46331: PPUSH
46332: LD_VAR 0 2
46336: PPUSH
46337: LD_VAR 0 5
46341: PPUSH
46342: LD_VAR 0 6
46346: PPUSH
46347: CALL_OW 273
46351: PPUSH
46352: LD_VAR 0 3
46356: PPUSH
46357: CALL_OW 309
46361: IFFALSE 46375
// begin result := true ;
46363: LD_ADDR_VAR 0 4
46367: PUSH
46368: LD_INT 1
46370: ST_TO_ADDR
// exit ;
46371: POP
46372: POP
46373: GO 46379
// end ;
46375: GO 46309
46377: POP
46378: POP
// end ;
46379: LD_VAR 0 4
46383: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
46384: LD_INT 0
46386: PPUSH
46387: PPUSH
46388: PPUSH
// if btype = b_depot then
46389: LD_VAR 0 2
46393: PUSH
46394: LD_INT 0
46396: EQUAL
46397: IFFALSE 46409
// begin result := true ;
46399: LD_ADDR_VAR 0 3
46403: PUSH
46404: LD_INT 1
46406: ST_TO_ADDR
// exit ;
46407: GO 46525
// end ; pom := GetBase ( depot ) ;
46409: LD_ADDR_VAR 0 4
46413: PUSH
46414: LD_VAR 0 1
46418: PPUSH
46419: CALL_OW 274
46423: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46424: LD_ADDR_VAR 0 5
46428: PUSH
46429: LD_VAR 0 2
46433: PPUSH
46434: LD_VAR 0 1
46438: PPUSH
46439: CALL_OW 248
46443: PPUSH
46444: CALL_OW 450
46448: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
46449: LD_ADDR_VAR 0 3
46453: PUSH
46454: LD_VAR 0 4
46458: PPUSH
46459: LD_INT 1
46461: PPUSH
46462: CALL_OW 275
46466: PUSH
46467: LD_VAR 0 5
46471: PUSH
46472: LD_INT 1
46474: ARRAY
46475: GREATEREQUAL
46476: PUSH
46477: LD_VAR 0 4
46481: PPUSH
46482: LD_INT 2
46484: PPUSH
46485: CALL_OW 275
46489: PUSH
46490: LD_VAR 0 5
46494: PUSH
46495: LD_INT 2
46497: ARRAY
46498: GREATEREQUAL
46499: AND
46500: PUSH
46501: LD_VAR 0 4
46505: PPUSH
46506: LD_INT 3
46508: PPUSH
46509: CALL_OW 275
46513: PUSH
46514: LD_VAR 0 5
46518: PUSH
46519: LD_INT 3
46521: ARRAY
46522: GREATEREQUAL
46523: AND
46524: ST_TO_ADDR
// end ;
46525: LD_VAR 0 3
46529: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46530: LD_INT 0
46532: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46533: LD_VAR 0 1
46537: PPUSH
46538: LD_VAR 0 2
46542: PPUSH
46543: LD_INT 0
46545: PPUSH
46546: LD_INT 0
46548: PPUSH
46549: LD_INT 1
46551: PPUSH
46552: LD_INT 0
46554: PPUSH
46555: CALL_OW 587
// end ;
46559: LD_VAR 0 3
46563: RET
// export function CenterOnNow ( unit ) ; begin
46564: LD_INT 0
46566: PPUSH
// result := IsInUnit ( unit ) ;
46567: LD_ADDR_VAR 0 2
46571: PUSH
46572: LD_VAR 0 1
46576: PPUSH
46577: CALL_OW 310
46581: ST_TO_ADDR
// if not result then
46582: LD_VAR 0 2
46586: NOT
46587: IFFALSE 46599
// result := unit ;
46589: LD_ADDR_VAR 0 2
46593: PUSH
46594: LD_VAR 0 1
46598: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46599: LD_VAR 0 1
46603: PPUSH
46604: CALL_OW 87
// end ;
46608: LD_VAR 0 2
46612: RET
// export function ComMoveHex ( unit , hex ) ; begin
46613: LD_INT 0
46615: PPUSH
// if not hex then
46616: LD_VAR 0 2
46620: NOT
46621: IFFALSE 46625
// exit ;
46623: GO 46678
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46625: LD_VAR 0 2
46629: PUSH
46630: LD_INT 1
46632: ARRAY
46633: PPUSH
46634: LD_VAR 0 2
46638: PUSH
46639: LD_INT 2
46641: ARRAY
46642: PPUSH
46643: CALL_OW 428
46647: IFFALSE 46651
// exit ;
46649: GO 46678
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46651: LD_VAR 0 1
46655: PPUSH
46656: LD_VAR 0 2
46660: PUSH
46661: LD_INT 1
46663: ARRAY
46664: PPUSH
46665: LD_VAR 0 2
46669: PUSH
46670: LD_INT 2
46672: ARRAY
46673: PPUSH
46674: CALL_OW 111
// end ;
46678: LD_VAR 0 3
46682: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46683: LD_INT 0
46685: PPUSH
46686: PPUSH
46687: PPUSH
// if not unit or not enemy then
46688: LD_VAR 0 1
46692: NOT
46693: PUSH
46694: LD_VAR 0 2
46698: NOT
46699: OR
46700: IFFALSE 46704
// exit ;
46702: GO 46828
// x := GetX ( enemy ) ;
46704: LD_ADDR_VAR 0 4
46708: PUSH
46709: LD_VAR 0 2
46713: PPUSH
46714: CALL_OW 250
46718: ST_TO_ADDR
// y := GetY ( enemy ) ;
46719: LD_ADDR_VAR 0 5
46723: PUSH
46724: LD_VAR 0 2
46728: PPUSH
46729: CALL_OW 251
46733: ST_TO_ADDR
// if ValidHex ( x , y ) then
46734: LD_VAR 0 4
46738: PPUSH
46739: LD_VAR 0 5
46743: PPUSH
46744: CALL_OW 488
46748: IFFALSE 46828
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46750: LD_VAR 0 2
46754: PPUSH
46755: CALL_OW 247
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: IN
46770: PUSH
46771: LD_VAR 0 1
46775: PPUSH
46776: CALL_OW 255
46780: PPUSH
46781: LD_VAR 0 2
46785: PPUSH
46786: CALL_OW 292
46790: OR
46791: IFFALSE 46809
// ComAttackUnit ( unit , enemy ) else
46793: LD_VAR 0 1
46797: PPUSH
46798: LD_VAR 0 2
46802: PPUSH
46803: CALL_OW 115
46807: GO 46828
// ComAgressiveMove ( unit , x , y ) ;
46809: LD_VAR 0 1
46813: PPUSH
46814: LD_VAR 0 4
46818: PPUSH
46819: LD_VAR 0 5
46823: PPUSH
46824: CALL_OW 114
// end ;
46828: LD_VAR 0 3
46832: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46833: LD_INT 0
46835: PPUSH
46836: PPUSH
46837: PPUSH
// list := AreaToList ( area , 0 ) ;
46838: LD_ADDR_VAR 0 5
46842: PUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: LD_INT 0
46850: PPUSH
46851: CALL_OW 517
46855: ST_TO_ADDR
// if not list then
46856: LD_VAR 0 5
46860: NOT
46861: IFFALSE 46865
// exit ;
46863: GO 46995
// if all then
46865: LD_VAR 0 2
46869: IFFALSE 46957
// begin for i := 1 to list [ 1 ] do
46871: LD_ADDR_VAR 0 4
46875: PUSH
46876: DOUBLE
46877: LD_INT 1
46879: DEC
46880: ST_TO_ADDR
46881: LD_VAR 0 5
46885: PUSH
46886: LD_INT 1
46888: ARRAY
46889: PUSH
46890: FOR_TO
46891: IFFALSE 46953
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46893: LD_ADDR_VAR 0 3
46897: PUSH
46898: LD_VAR 0 3
46902: PPUSH
46903: LD_VAR 0 3
46907: PUSH
46908: LD_INT 1
46910: PLUS
46911: PPUSH
46912: LD_VAR 0 5
46916: PUSH
46917: LD_INT 1
46919: ARRAY
46920: PUSH
46921: LD_VAR 0 4
46925: ARRAY
46926: PUSH
46927: LD_VAR 0 5
46931: PUSH
46932: LD_INT 2
46934: ARRAY
46935: PUSH
46936: LD_VAR 0 4
46940: ARRAY
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PPUSH
46946: CALL_OW 1
46950: ST_TO_ADDR
46951: GO 46890
46953: POP
46954: POP
// exit ;
46955: GO 46995
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46957: LD_ADDR_VAR 0 3
46961: PUSH
46962: LD_VAR 0 5
46966: PUSH
46967: LD_INT 1
46969: ARRAY
46970: PUSH
46971: LD_INT 1
46973: ARRAY
46974: PUSH
46975: LD_VAR 0 5
46979: PUSH
46980: LD_INT 2
46982: ARRAY
46983: PUSH
46984: LD_INT 1
46986: ARRAY
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: EMPTY
46993: LIST
46994: ST_TO_ADDR
// end ;
46995: LD_VAR 0 3
46999: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
47000: LD_INT 0
47002: PPUSH
47003: PPUSH
// list := AreaToList ( area , 0 ) ;
47004: LD_ADDR_VAR 0 4
47008: PUSH
47009: LD_VAR 0 1
47013: PPUSH
47014: LD_INT 0
47016: PPUSH
47017: CALL_OW 517
47021: ST_TO_ADDR
// if not list then
47022: LD_VAR 0 4
47026: NOT
47027: IFFALSE 47031
// exit ;
47029: GO 47072
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
47031: LD_ADDR_VAR 0 3
47035: PUSH
47036: LD_VAR 0 4
47040: PUSH
47041: LD_INT 1
47043: ARRAY
47044: PUSH
47045: LD_INT 1
47047: ARRAY
47048: PUSH
47049: LD_VAR 0 4
47053: PUSH
47054: LD_INT 2
47056: ARRAY
47057: PUSH
47058: LD_INT 1
47060: ARRAY
47061: PUSH
47062: LD_VAR 0 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// end ;
47072: LD_VAR 0 3
47076: RET
// export function First ( array ) ; begin
47077: LD_INT 0
47079: PPUSH
// if not array then
47080: LD_VAR 0 1
47084: NOT
47085: IFFALSE 47089
// exit ;
47087: GO 47103
// result := array [ 1 ] ;
47089: LD_ADDR_VAR 0 2
47093: PUSH
47094: LD_VAR 0 1
47098: PUSH
47099: LD_INT 1
47101: ARRAY
47102: ST_TO_ADDR
// end ;
47103: LD_VAR 0 2
47107: RET
// export function Last ( array ) ; begin
47108: LD_INT 0
47110: PPUSH
// if not array then
47111: LD_VAR 0 1
47115: NOT
47116: IFFALSE 47120
// exit ;
47118: GO 47136
// result := array [ array ] ;
47120: LD_ADDR_VAR 0 2
47124: PUSH
47125: LD_VAR 0 1
47129: PUSH
47130: LD_VAR 0 1
47134: ARRAY
47135: ST_TO_ADDR
// end ;
47136: LD_VAR 0 2
47140: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
47141: LD_INT 0
47143: PPUSH
47144: PPUSH
// result := [ ] ;
47145: LD_ADDR_VAR 0 5
47149: PUSH
47150: EMPTY
47151: ST_TO_ADDR
// if not array then
47152: LD_VAR 0 1
47156: NOT
47157: IFFALSE 47161
// exit ;
47159: GO 47273
// for i := 1 to array do
47161: LD_ADDR_VAR 0 6
47165: PUSH
47166: DOUBLE
47167: LD_INT 1
47169: DEC
47170: ST_TO_ADDR
47171: LD_VAR 0 1
47175: PUSH
47176: FOR_TO
47177: IFFALSE 47271
// if array [ i ] [ index ] = value then
47179: LD_VAR 0 1
47183: PUSH
47184: LD_VAR 0 6
47188: ARRAY
47189: PUSH
47190: LD_VAR 0 2
47194: ARRAY
47195: PUSH
47196: LD_VAR 0 3
47200: EQUAL
47201: IFFALSE 47269
// begin if indexColumn then
47203: LD_VAR 0 4
47207: IFFALSE 47243
// result := Join ( result , array [ i ] [ indexColumn ] ) else
47209: LD_ADDR_VAR 0 5
47213: PUSH
47214: LD_VAR 0 5
47218: PPUSH
47219: LD_VAR 0 1
47223: PUSH
47224: LD_VAR 0 6
47228: ARRAY
47229: PUSH
47230: LD_VAR 0 4
47234: ARRAY
47235: PPUSH
47236: CALL 42461 0 2
47240: ST_TO_ADDR
47241: GO 47269
// result := Join ( result , array [ i ] ) ;
47243: LD_ADDR_VAR 0 5
47247: PUSH
47248: LD_VAR 0 5
47252: PPUSH
47253: LD_VAR 0 1
47257: PUSH
47258: LD_VAR 0 6
47262: ARRAY
47263: PPUSH
47264: CALL 42461 0 2
47268: ST_TO_ADDR
// end ;
47269: GO 47176
47271: POP
47272: POP
// end ;
47273: LD_VAR 0 5
47277: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
47278: LD_INT 0
47280: PPUSH
// if not vehicles or not parkingPoint then
47281: LD_VAR 0 1
47285: NOT
47286: PUSH
47287: LD_VAR 0 2
47291: NOT
47292: OR
47293: IFFALSE 47297
// exit ;
47295: GO 47395
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
47297: LD_ADDR_VAR 0 1
47301: PUSH
47302: LD_VAR 0 1
47306: PPUSH
47307: LD_INT 50
47309: PUSH
47310: EMPTY
47311: LIST
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 92
47318: PUSH
47319: LD_VAR 0 2
47323: PUSH
47324: LD_INT 1
47326: ARRAY
47327: PUSH
47328: LD_VAR 0 2
47332: PUSH
47333: LD_INT 2
47335: ARRAY
47336: PUSH
47337: LD_INT 8
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PPUSH
47354: CALL_OW 72
47358: ST_TO_ADDR
// if not vehicles then
47359: LD_VAR 0 1
47363: NOT
47364: IFFALSE 47368
// exit ;
47366: GO 47395
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
47368: LD_VAR 0 1
47372: PPUSH
47373: LD_VAR 0 2
47377: PUSH
47378: LD_INT 1
47380: ARRAY
47381: PPUSH
47382: LD_VAR 0 2
47386: PUSH
47387: LD_INT 2
47389: ARRAY
47390: PPUSH
47391: CALL_OW 111
// end ;
47395: LD_VAR 0 3
47399: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
47400: LD_INT 0
47402: PPUSH
47403: PPUSH
47404: PPUSH
// if not side or not area then
47405: LD_VAR 0 1
47409: NOT
47410: PUSH
47411: LD_VAR 0 2
47415: NOT
47416: OR
47417: IFFALSE 47421
// exit ;
47419: GO 47540
// tmp := AreaToList ( area , 0 ) ;
47421: LD_ADDR_VAR 0 5
47425: PUSH
47426: LD_VAR 0 2
47430: PPUSH
47431: LD_INT 0
47433: PPUSH
47434: CALL_OW 517
47438: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
47439: LD_ADDR_VAR 0 4
47443: PUSH
47444: DOUBLE
47445: LD_INT 1
47447: DEC
47448: ST_TO_ADDR
47449: LD_VAR 0 5
47453: PUSH
47454: LD_INT 1
47456: ARRAY
47457: PUSH
47458: FOR_TO
47459: IFFALSE 47538
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
47461: LD_VAR 0 5
47465: PUSH
47466: LD_INT 1
47468: ARRAY
47469: PUSH
47470: LD_VAR 0 4
47474: ARRAY
47475: PPUSH
47476: LD_VAR 0 5
47480: PUSH
47481: LD_INT 2
47483: ARRAY
47484: PUSH
47485: LD_VAR 0 4
47489: ARRAY
47490: PPUSH
47491: CALL_OW 351
47495: IFFALSE 47536
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47497: LD_VAR 0 5
47501: PUSH
47502: LD_INT 1
47504: ARRAY
47505: PUSH
47506: LD_VAR 0 4
47510: ARRAY
47511: PPUSH
47512: LD_VAR 0 5
47516: PUSH
47517: LD_INT 2
47519: ARRAY
47520: PUSH
47521: LD_VAR 0 4
47525: ARRAY
47526: PPUSH
47527: LD_VAR 0 1
47531: PPUSH
47532: CALL_OW 244
// end ;
47536: GO 47458
47538: POP
47539: POP
// end ; end_of_file end_of_file
47540: LD_VAR 0 3
47544: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47545: LD_VAR 0 1
47549: PPUSH
47550: LD_VAR 0 2
47554: PPUSH
47555: LD_VAR 0 3
47559: PPUSH
47560: LD_VAR 0 4
47564: PPUSH
47565: LD_VAR 0 5
47569: PPUSH
47570: LD_VAR 0 6
47574: PPUSH
47575: CALL 47776 0 6
// end ;
47579: PPOPN 6
47581: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
47582: LD_INT 0
47584: PPUSH
// begin if not units then
47585: LD_VAR 0 1
47589: NOT
47590: IFFALSE 47594
// exit ;
47592: GO 47594
// end ;
47594: PPOPN 7
47596: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
47597: CALL 47663 0 0
// end ; end_of_file
47601: PPOPN 1
47603: END
// export globalGameSaveCounter ; every 0 0$1 do
47604: GO 47606
47606: DISABLE
// begin enable ;
47607: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47608: LD_STRING updateTimer(
47610: PUSH
47611: LD_OWVAR 1
47615: STR
47616: PUSH
47617: LD_STRING );
47619: STR
47620: PPUSH
47621: CALL_OW 559
// end ;
47625: END
// every 0 0$1 do
47626: GO 47628
47628: DISABLE
// begin globalGameSaveCounter := 0 ;
47629: LD_ADDR_EXP 27
47633: PUSH
47634: LD_INT 0
47636: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47637: LD_STRING setGameSaveCounter(0)
47639: PPUSH
47640: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47644: LD_STRING initStreamRollete();
47646: PPUSH
47647: CALL_OW 559
// InitStreamMode ;
47651: CALL 48994 0 0
// DefineStreamItems ( false ) ;
47655: LD_INT 0
47657: PPUSH
47658: CALL 49458 0 1
// end ;
47662: END
// export function SOS_MapStart ( ) ; begin
47663: LD_INT 0
47665: PPUSH
// if streamModeActive then
47666: LD_EXP 28
47670: IFFALSE 47679
// DefineStreamItems ( true ) ;
47672: LD_INT 1
47674: PPUSH
47675: CALL 49458 0 1
// UpdateLuaVariables ( ) ;
47679: CALL 47696 0 0
// UpdateFactoryWaypoints ( ) ;
47683: CALL 62460 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47687: CALL 62712 0 0
// end ;
47691: LD_VAR 0 1
47695: RET
// function UpdateLuaVariables ( ) ; begin
47696: LD_INT 0
47698: PPUSH
// if globalGameSaveCounter then
47699: LD_EXP 27
47703: IFFALSE 47737
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47705: LD_ADDR_EXP 27
47709: PUSH
47710: LD_EXP 27
47714: PPUSH
47715: CALL 43822 0 1
47719: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47720: LD_STRING setGameSaveCounter(
47722: PUSH
47723: LD_EXP 27
47727: STR
47728: PUSH
47729: LD_STRING )
47731: STR
47732: PPUSH
47733: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47737: LD_STRING setGameDifficulty(
47739: PUSH
47740: LD_OWVAR 67
47744: STR
47745: PUSH
47746: LD_STRING )
47748: STR
47749: PPUSH
47750: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
47754: LD_STRING displayDifficulty(
47756: PUSH
47757: LD_OWVAR 67
47761: STR
47762: PUSH
47763: LD_STRING )
47765: STR
47766: PPUSH
47767: CALL_OW 559
// end ;
47771: LD_VAR 0 1
47775: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47776: LD_INT 0
47778: PPUSH
// if p2 = stream_mode then
47779: LD_VAR 0 2
47783: PUSH
47784: LD_INT 100
47786: EQUAL
47787: IFFALSE 48790
// begin if not StreamModeActive then
47789: LD_EXP 28
47793: NOT
47794: IFFALSE 47804
// StreamModeActive := true ;
47796: LD_ADDR_EXP 28
47800: PUSH
47801: LD_INT 1
47803: ST_TO_ADDR
// if p3 = 0 then
47804: LD_VAR 0 3
47808: PUSH
47809: LD_INT 0
47811: EQUAL
47812: IFFALSE 47818
// InitStreamMode ;
47814: CALL 48994 0 0
// if p3 = 1 then
47818: LD_VAR 0 3
47822: PUSH
47823: LD_INT 1
47825: EQUAL
47826: IFFALSE 47836
// sRocket := true ;
47828: LD_ADDR_EXP 33
47832: PUSH
47833: LD_INT 1
47835: ST_TO_ADDR
// if p3 = 2 then
47836: LD_VAR 0 3
47840: PUSH
47841: LD_INT 2
47843: EQUAL
47844: IFFALSE 47854
// sSpeed := true ;
47846: LD_ADDR_EXP 32
47850: PUSH
47851: LD_INT 1
47853: ST_TO_ADDR
// if p3 = 3 then
47854: LD_VAR 0 3
47858: PUSH
47859: LD_INT 3
47861: EQUAL
47862: IFFALSE 47872
// sEngine := true ;
47864: LD_ADDR_EXP 34
47868: PUSH
47869: LD_INT 1
47871: ST_TO_ADDR
// if p3 = 4 then
47872: LD_VAR 0 3
47876: PUSH
47877: LD_INT 4
47879: EQUAL
47880: IFFALSE 47890
// sSpec := true ;
47882: LD_ADDR_EXP 31
47886: PUSH
47887: LD_INT 1
47889: ST_TO_ADDR
// if p3 = 5 then
47890: LD_VAR 0 3
47894: PUSH
47895: LD_INT 5
47897: EQUAL
47898: IFFALSE 47908
// sLevel := true ;
47900: LD_ADDR_EXP 35
47904: PUSH
47905: LD_INT 1
47907: ST_TO_ADDR
// if p3 = 6 then
47908: LD_VAR 0 3
47912: PUSH
47913: LD_INT 6
47915: EQUAL
47916: IFFALSE 47926
// sArmoury := true ;
47918: LD_ADDR_EXP 36
47922: PUSH
47923: LD_INT 1
47925: ST_TO_ADDR
// if p3 = 7 then
47926: LD_VAR 0 3
47930: PUSH
47931: LD_INT 7
47933: EQUAL
47934: IFFALSE 47944
// sRadar := true ;
47936: LD_ADDR_EXP 37
47940: PUSH
47941: LD_INT 1
47943: ST_TO_ADDR
// if p3 = 8 then
47944: LD_VAR 0 3
47948: PUSH
47949: LD_INT 8
47951: EQUAL
47952: IFFALSE 47962
// sBunker := true ;
47954: LD_ADDR_EXP 38
47958: PUSH
47959: LD_INT 1
47961: ST_TO_ADDR
// if p3 = 9 then
47962: LD_VAR 0 3
47966: PUSH
47967: LD_INT 9
47969: EQUAL
47970: IFFALSE 47980
// sHack := true ;
47972: LD_ADDR_EXP 39
47976: PUSH
47977: LD_INT 1
47979: ST_TO_ADDR
// if p3 = 10 then
47980: LD_VAR 0 3
47984: PUSH
47985: LD_INT 10
47987: EQUAL
47988: IFFALSE 47998
// sFire := true ;
47990: LD_ADDR_EXP 40
47994: PUSH
47995: LD_INT 1
47997: ST_TO_ADDR
// if p3 = 11 then
47998: LD_VAR 0 3
48002: PUSH
48003: LD_INT 11
48005: EQUAL
48006: IFFALSE 48016
// sRefresh := true ;
48008: LD_ADDR_EXP 41
48012: PUSH
48013: LD_INT 1
48015: ST_TO_ADDR
// if p3 = 12 then
48016: LD_VAR 0 3
48020: PUSH
48021: LD_INT 12
48023: EQUAL
48024: IFFALSE 48034
// sExp := true ;
48026: LD_ADDR_EXP 42
48030: PUSH
48031: LD_INT 1
48033: ST_TO_ADDR
// if p3 = 13 then
48034: LD_VAR 0 3
48038: PUSH
48039: LD_INT 13
48041: EQUAL
48042: IFFALSE 48052
// sDepot := true ;
48044: LD_ADDR_EXP 43
48048: PUSH
48049: LD_INT 1
48051: ST_TO_ADDR
// if p3 = 14 then
48052: LD_VAR 0 3
48056: PUSH
48057: LD_INT 14
48059: EQUAL
48060: IFFALSE 48070
// sFlag := true ;
48062: LD_ADDR_EXP 44
48066: PUSH
48067: LD_INT 1
48069: ST_TO_ADDR
// if p3 = 15 then
48070: LD_VAR 0 3
48074: PUSH
48075: LD_INT 15
48077: EQUAL
48078: IFFALSE 48088
// sKamikadze := true ;
48080: LD_ADDR_EXP 52
48084: PUSH
48085: LD_INT 1
48087: ST_TO_ADDR
// if p3 = 16 then
48088: LD_VAR 0 3
48092: PUSH
48093: LD_INT 16
48095: EQUAL
48096: IFFALSE 48106
// sTroll := true ;
48098: LD_ADDR_EXP 53
48102: PUSH
48103: LD_INT 1
48105: ST_TO_ADDR
// if p3 = 17 then
48106: LD_VAR 0 3
48110: PUSH
48111: LD_INT 17
48113: EQUAL
48114: IFFALSE 48124
// sSlow := true ;
48116: LD_ADDR_EXP 54
48120: PUSH
48121: LD_INT 1
48123: ST_TO_ADDR
// if p3 = 18 then
48124: LD_VAR 0 3
48128: PUSH
48129: LD_INT 18
48131: EQUAL
48132: IFFALSE 48142
// sLack := true ;
48134: LD_ADDR_EXP 55
48138: PUSH
48139: LD_INT 1
48141: ST_TO_ADDR
// if p3 = 19 then
48142: LD_VAR 0 3
48146: PUSH
48147: LD_INT 19
48149: EQUAL
48150: IFFALSE 48160
// sTank := true ;
48152: LD_ADDR_EXP 57
48156: PUSH
48157: LD_INT 1
48159: ST_TO_ADDR
// if p3 = 20 then
48160: LD_VAR 0 3
48164: PUSH
48165: LD_INT 20
48167: EQUAL
48168: IFFALSE 48178
// sRemote := true ;
48170: LD_ADDR_EXP 58
48174: PUSH
48175: LD_INT 1
48177: ST_TO_ADDR
// if p3 = 21 then
48178: LD_VAR 0 3
48182: PUSH
48183: LD_INT 21
48185: EQUAL
48186: IFFALSE 48196
// sPowell := true ;
48188: LD_ADDR_EXP 59
48192: PUSH
48193: LD_INT 1
48195: ST_TO_ADDR
// if p3 = 22 then
48196: LD_VAR 0 3
48200: PUSH
48201: LD_INT 22
48203: EQUAL
48204: IFFALSE 48214
// sTeleport := true ;
48206: LD_ADDR_EXP 62
48210: PUSH
48211: LD_INT 1
48213: ST_TO_ADDR
// if p3 = 23 then
48214: LD_VAR 0 3
48218: PUSH
48219: LD_INT 23
48221: EQUAL
48222: IFFALSE 48232
// sOilTower := true ;
48224: LD_ADDR_EXP 64
48228: PUSH
48229: LD_INT 1
48231: ST_TO_ADDR
// if p3 = 24 then
48232: LD_VAR 0 3
48236: PUSH
48237: LD_INT 24
48239: EQUAL
48240: IFFALSE 48250
// sShovel := true ;
48242: LD_ADDR_EXP 65
48246: PUSH
48247: LD_INT 1
48249: ST_TO_ADDR
// if p3 = 25 then
48250: LD_VAR 0 3
48254: PUSH
48255: LD_INT 25
48257: EQUAL
48258: IFFALSE 48268
// sSheik := true ;
48260: LD_ADDR_EXP 66
48264: PUSH
48265: LD_INT 1
48267: ST_TO_ADDR
// if p3 = 26 then
48268: LD_VAR 0 3
48272: PUSH
48273: LD_INT 26
48275: EQUAL
48276: IFFALSE 48286
// sEarthquake := true ;
48278: LD_ADDR_EXP 68
48282: PUSH
48283: LD_INT 1
48285: ST_TO_ADDR
// if p3 = 27 then
48286: LD_VAR 0 3
48290: PUSH
48291: LD_INT 27
48293: EQUAL
48294: IFFALSE 48304
// sAI := true ;
48296: LD_ADDR_EXP 69
48300: PUSH
48301: LD_INT 1
48303: ST_TO_ADDR
// if p3 = 28 then
48304: LD_VAR 0 3
48308: PUSH
48309: LD_INT 28
48311: EQUAL
48312: IFFALSE 48322
// sCargo := true ;
48314: LD_ADDR_EXP 72
48318: PUSH
48319: LD_INT 1
48321: ST_TO_ADDR
// if p3 = 29 then
48322: LD_VAR 0 3
48326: PUSH
48327: LD_INT 29
48329: EQUAL
48330: IFFALSE 48340
// sDLaser := true ;
48332: LD_ADDR_EXP 73
48336: PUSH
48337: LD_INT 1
48339: ST_TO_ADDR
// if p3 = 30 then
48340: LD_VAR 0 3
48344: PUSH
48345: LD_INT 30
48347: EQUAL
48348: IFFALSE 48358
// sExchange := true ;
48350: LD_ADDR_EXP 74
48354: PUSH
48355: LD_INT 1
48357: ST_TO_ADDR
// if p3 = 31 then
48358: LD_VAR 0 3
48362: PUSH
48363: LD_INT 31
48365: EQUAL
48366: IFFALSE 48376
// sFac := true ;
48368: LD_ADDR_EXP 75
48372: PUSH
48373: LD_INT 1
48375: ST_TO_ADDR
// if p3 = 32 then
48376: LD_VAR 0 3
48380: PUSH
48381: LD_INT 32
48383: EQUAL
48384: IFFALSE 48394
// sPower := true ;
48386: LD_ADDR_EXP 76
48390: PUSH
48391: LD_INT 1
48393: ST_TO_ADDR
// if p3 = 33 then
48394: LD_VAR 0 3
48398: PUSH
48399: LD_INT 33
48401: EQUAL
48402: IFFALSE 48412
// sRandom := true ;
48404: LD_ADDR_EXP 77
48408: PUSH
48409: LD_INT 1
48411: ST_TO_ADDR
// if p3 = 34 then
48412: LD_VAR 0 3
48416: PUSH
48417: LD_INT 34
48419: EQUAL
48420: IFFALSE 48430
// sShield := true ;
48422: LD_ADDR_EXP 78
48426: PUSH
48427: LD_INT 1
48429: ST_TO_ADDR
// if p3 = 35 then
48430: LD_VAR 0 3
48434: PUSH
48435: LD_INT 35
48437: EQUAL
48438: IFFALSE 48448
// sTime := true ;
48440: LD_ADDR_EXP 79
48444: PUSH
48445: LD_INT 1
48447: ST_TO_ADDR
// if p3 = 36 then
48448: LD_VAR 0 3
48452: PUSH
48453: LD_INT 36
48455: EQUAL
48456: IFFALSE 48466
// sTools := true ;
48458: LD_ADDR_EXP 80
48462: PUSH
48463: LD_INT 1
48465: ST_TO_ADDR
// if p3 = 101 then
48466: LD_VAR 0 3
48470: PUSH
48471: LD_INT 101
48473: EQUAL
48474: IFFALSE 48484
// sSold := true ;
48476: LD_ADDR_EXP 45
48480: PUSH
48481: LD_INT 1
48483: ST_TO_ADDR
// if p3 = 102 then
48484: LD_VAR 0 3
48488: PUSH
48489: LD_INT 102
48491: EQUAL
48492: IFFALSE 48502
// sDiff := true ;
48494: LD_ADDR_EXP 46
48498: PUSH
48499: LD_INT 1
48501: ST_TO_ADDR
// if p3 = 103 then
48502: LD_VAR 0 3
48506: PUSH
48507: LD_INT 103
48509: EQUAL
48510: IFFALSE 48520
// sFog := true ;
48512: LD_ADDR_EXP 49
48516: PUSH
48517: LD_INT 1
48519: ST_TO_ADDR
// if p3 = 104 then
48520: LD_VAR 0 3
48524: PUSH
48525: LD_INT 104
48527: EQUAL
48528: IFFALSE 48538
// sReset := true ;
48530: LD_ADDR_EXP 50
48534: PUSH
48535: LD_INT 1
48537: ST_TO_ADDR
// if p3 = 105 then
48538: LD_VAR 0 3
48542: PUSH
48543: LD_INT 105
48545: EQUAL
48546: IFFALSE 48556
// sSun := true ;
48548: LD_ADDR_EXP 51
48552: PUSH
48553: LD_INT 1
48555: ST_TO_ADDR
// if p3 = 106 then
48556: LD_VAR 0 3
48560: PUSH
48561: LD_INT 106
48563: EQUAL
48564: IFFALSE 48574
// sTiger := true ;
48566: LD_ADDR_EXP 47
48570: PUSH
48571: LD_INT 1
48573: ST_TO_ADDR
// if p3 = 107 then
48574: LD_VAR 0 3
48578: PUSH
48579: LD_INT 107
48581: EQUAL
48582: IFFALSE 48592
// sBomb := true ;
48584: LD_ADDR_EXP 48
48588: PUSH
48589: LD_INT 1
48591: ST_TO_ADDR
// if p3 = 108 then
48592: LD_VAR 0 3
48596: PUSH
48597: LD_INT 108
48599: EQUAL
48600: IFFALSE 48610
// sWound := true ;
48602: LD_ADDR_EXP 56
48606: PUSH
48607: LD_INT 1
48609: ST_TO_ADDR
// if p3 = 109 then
48610: LD_VAR 0 3
48614: PUSH
48615: LD_INT 109
48617: EQUAL
48618: IFFALSE 48628
// sBetray := true ;
48620: LD_ADDR_EXP 60
48624: PUSH
48625: LD_INT 1
48627: ST_TO_ADDR
// if p3 = 110 then
48628: LD_VAR 0 3
48632: PUSH
48633: LD_INT 110
48635: EQUAL
48636: IFFALSE 48646
// sContamin := true ;
48638: LD_ADDR_EXP 61
48642: PUSH
48643: LD_INT 1
48645: ST_TO_ADDR
// if p3 = 111 then
48646: LD_VAR 0 3
48650: PUSH
48651: LD_INT 111
48653: EQUAL
48654: IFFALSE 48664
// sOil := true ;
48656: LD_ADDR_EXP 63
48660: PUSH
48661: LD_INT 1
48663: ST_TO_ADDR
// if p3 = 112 then
48664: LD_VAR 0 3
48668: PUSH
48669: LD_INT 112
48671: EQUAL
48672: IFFALSE 48682
// sStu := true ;
48674: LD_ADDR_EXP 67
48678: PUSH
48679: LD_INT 1
48681: ST_TO_ADDR
// if p3 = 113 then
48682: LD_VAR 0 3
48686: PUSH
48687: LD_INT 113
48689: EQUAL
48690: IFFALSE 48700
// sBazooka := true ;
48692: LD_ADDR_EXP 70
48696: PUSH
48697: LD_INT 1
48699: ST_TO_ADDR
// if p3 = 114 then
48700: LD_VAR 0 3
48704: PUSH
48705: LD_INT 114
48707: EQUAL
48708: IFFALSE 48718
// sMortar := true ;
48710: LD_ADDR_EXP 71
48714: PUSH
48715: LD_INT 1
48717: ST_TO_ADDR
// if p3 = 115 then
48718: LD_VAR 0 3
48722: PUSH
48723: LD_INT 115
48725: EQUAL
48726: IFFALSE 48736
// sRanger := true ;
48728: LD_ADDR_EXP 81
48732: PUSH
48733: LD_INT 1
48735: ST_TO_ADDR
// if p3 = 116 then
48736: LD_VAR 0 3
48740: PUSH
48741: LD_INT 116
48743: EQUAL
48744: IFFALSE 48754
// sComputer := true ;
48746: LD_ADDR_EXP 82
48750: PUSH
48751: LD_INT 1
48753: ST_TO_ADDR
// if p3 = 117 then
48754: LD_VAR 0 3
48758: PUSH
48759: LD_INT 117
48761: EQUAL
48762: IFFALSE 48772
// s30 := true ;
48764: LD_ADDR_EXP 83
48768: PUSH
48769: LD_INT 1
48771: ST_TO_ADDR
// if p3 = 118 then
48772: LD_VAR 0 3
48776: PUSH
48777: LD_INT 118
48779: EQUAL
48780: IFFALSE 48790
// s60 := true ;
48782: LD_ADDR_EXP 84
48786: PUSH
48787: LD_INT 1
48789: ST_TO_ADDR
// end ; if p2 = hack_mode then
48790: LD_VAR 0 2
48794: PUSH
48795: LD_INT 101
48797: EQUAL
48798: IFFALSE 48926
// begin case p3 of 1 :
48800: LD_VAR 0 3
48804: PUSH
48805: LD_INT 1
48807: DOUBLE
48808: EQUAL
48809: IFTRUE 48813
48811: GO 48820
48813: POP
// hHackUnlimitedResources ; 2 :
48814: CALL 61073 0 0
48818: GO 48926
48820: LD_INT 2
48822: DOUBLE
48823: EQUAL
48824: IFTRUE 48828
48826: GO 48835
48828: POP
// hHackSetLevel10 ; 3 :
48829: CALL 61206 0 0
48833: GO 48926
48835: LD_INT 3
48837: DOUBLE
48838: EQUAL
48839: IFTRUE 48843
48841: GO 48850
48843: POP
// hHackSetLevel10YourUnits ; 4 :
48844: CALL 61291 0 0
48848: GO 48926
48850: LD_INT 4
48852: DOUBLE
48853: EQUAL
48854: IFTRUE 48858
48856: GO 48865
48858: POP
// hHackInvincible ; 5 :
48859: CALL 61739 0 0
48863: GO 48926
48865: LD_INT 5
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48873
48871: GO 48880
48873: POP
// hHackInvisible ; 6 :
48874: CALL 61850 0 0
48878: GO 48926
48880: LD_INT 6
48882: DOUBLE
48883: EQUAL
48884: IFTRUE 48888
48886: GO 48895
48888: POP
// hHackChangeYourSide ; 7 :
48889: CALL 61907 0 0
48893: GO 48926
48895: LD_INT 7
48897: DOUBLE
48898: EQUAL
48899: IFTRUE 48903
48901: GO 48910
48903: POP
// hHackChangeUnitSide ; 8 :
48904: CALL 61949 0 0
48908: GO 48926
48910: LD_INT 8
48912: DOUBLE
48913: EQUAL
48914: IFTRUE 48918
48916: GO 48925
48918: POP
// hHackFog ; end ;
48919: CALL 62050 0 0
48923: GO 48926
48925: POP
// end ; if p2 = game_save_mode then
48926: LD_VAR 0 2
48930: PUSH
48931: LD_INT 102
48933: EQUAL
48934: IFFALSE 48989
// begin if p3 = 1 then
48936: LD_VAR 0 3
48940: PUSH
48941: LD_INT 1
48943: EQUAL
48944: IFFALSE 48956
// globalGameSaveCounter := p4 ;
48946: LD_ADDR_EXP 27
48950: PUSH
48951: LD_VAR 0 4
48955: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48956: LD_VAR 0 3
48960: PUSH
48961: LD_INT 2
48963: EQUAL
48964: PUSH
48965: LD_EXP 27
48969: AND
48970: IFFALSE 48989
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48972: LD_STRING setGameSaveCounter(
48974: PUSH
48975: LD_EXP 27
48979: STR
48980: PUSH
48981: LD_STRING )
48983: STR
48984: PPUSH
48985: CALL_OW 559
// end ; end ;
48989: LD_VAR 0 7
48993: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48994: LD_INT 0
48996: PPUSH
// streamModeActive := false ;
48997: LD_ADDR_EXP 28
49001: PUSH
49002: LD_INT 0
49004: ST_TO_ADDR
// normalCounter := 36 ;
49005: LD_ADDR_EXP 29
49009: PUSH
49010: LD_INT 36
49012: ST_TO_ADDR
// hardcoreCounter := 18 ;
49013: LD_ADDR_EXP 30
49017: PUSH
49018: LD_INT 18
49020: ST_TO_ADDR
// sRocket := false ;
49021: LD_ADDR_EXP 33
49025: PUSH
49026: LD_INT 0
49028: ST_TO_ADDR
// sSpeed := false ;
49029: LD_ADDR_EXP 32
49033: PUSH
49034: LD_INT 0
49036: ST_TO_ADDR
// sEngine := false ;
49037: LD_ADDR_EXP 34
49041: PUSH
49042: LD_INT 0
49044: ST_TO_ADDR
// sSpec := false ;
49045: LD_ADDR_EXP 31
49049: PUSH
49050: LD_INT 0
49052: ST_TO_ADDR
// sLevel := false ;
49053: LD_ADDR_EXP 35
49057: PUSH
49058: LD_INT 0
49060: ST_TO_ADDR
// sArmoury := false ;
49061: LD_ADDR_EXP 36
49065: PUSH
49066: LD_INT 0
49068: ST_TO_ADDR
// sRadar := false ;
49069: LD_ADDR_EXP 37
49073: PUSH
49074: LD_INT 0
49076: ST_TO_ADDR
// sBunker := false ;
49077: LD_ADDR_EXP 38
49081: PUSH
49082: LD_INT 0
49084: ST_TO_ADDR
// sHack := false ;
49085: LD_ADDR_EXP 39
49089: PUSH
49090: LD_INT 0
49092: ST_TO_ADDR
// sFire := false ;
49093: LD_ADDR_EXP 40
49097: PUSH
49098: LD_INT 0
49100: ST_TO_ADDR
// sRefresh := false ;
49101: LD_ADDR_EXP 41
49105: PUSH
49106: LD_INT 0
49108: ST_TO_ADDR
// sExp := false ;
49109: LD_ADDR_EXP 42
49113: PUSH
49114: LD_INT 0
49116: ST_TO_ADDR
// sDepot := false ;
49117: LD_ADDR_EXP 43
49121: PUSH
49122: LD_INT 0
49124: ST_TO_ADDR
// sFlag := false ;
49125: LD_ADDR_EXP 44
49129: PUSH
49130: LD_INT 0
49132: ST_TO_ADDR
// sKamikadze := false ;
49133: LD_ADDR_EXP 52
49137: PUSH
49138: LD_INT 0
49140: ST_TO_ADDR
// sTroll := false ;
49141: LD_ADDR_EXP 53
49145: PUSH
49146: LD_INT 0
49148: ST_TO_ADDR
// sSlow := false ;
49149: LD_ADDR_EXP 54
49153: PUSH
49154: LD_INT 0
49156: ST_TO_ADDR
// sLack := false ;
49157: LD_ADDR_EXP 55
49161: PUSH
49162: LD_INT 0
49164: ST_TO_ADDR
// sTank := false ;
49165: LD_ADDR_EXP 57
49169: PUSH
49170: LD_INT 0
49172: ST_TO_ADDR
// sRemote := false ;
49173: LD_ADDR_EXP 58
49177: PUSH
49178: LD_INT 0
49180: ST_TO_ADDR
// sPowell := false ;
49181: LD_ADDR_EXP 59
49185: PUSH
49186: LD_INT 0
49188: ST_TO_ADDR
// sTeleport := false ;
49189: LD_ADDR_EXP 62
49193: PUSH
49194: LD_INT 0
49196: ST_TO_ADDR
// sOilTower := false ;
49197: LD_ADDR_EXP 64
49201: PUSH
49202: LD_INT 0
49204: ST_TO_ADDR
// sShovel := false ;
49205: LD_ADDR_EXP 65
49209: PUSH
49210: LD_INT 0
49212: ST_TO_ADDR
// sSheik := false ;
49213: LD_ADDR_EXP 66
49217: PUSH
49218: LD_INT 0
49220: ST_TO_ADDR
// sEarthquake := false ;
49221: LD_ADDR_EXP 68
49225: PUSH
49226: LD_INT 0
49228: ST_TO_ADDR
// sAI := false ;
49229: LD_ADDR_EXP 69
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
// sCargo := false ;
49237: LD_ADDR_EXP 72
49241: PUSH
49242: LD_INT 0
49244: ST_TO_ADDR
// sDLaser := false ;
49245: LD_ADDR_EXP 73
49249: PUSH
49250: LD_INT 0
49252: ST_TO_ADDR
// sExchange := false ;
49253: LD_ADDR_EXP 74
49257: PUSH
49258: LD_INT 0
49260: ST_TO_ADDR
// sFac := false ;
49261: LD_ADDR_EXP 75
49265: PUSH
49266: LD_INT 0
49268: ST_TO_ADDR
// sPower := false ;
49269: LD_ADDR_EXP 76
49273: PUSH
49274: LD_INT 0
49276: ST_TO_ADDR
// sRandom := false ;
49277: LD_ADDR_EXP 77
49281: PUSH
49282: LD_INT 0
49284: ST_TO_ADDR
// sShield := false ;
49285: LD_ADDR_EXP 78
49289: PUSH
49290: LD_INT 0
49292: ST_TO_ADDR
// sTime := false ;
49293: LD_ADDR_EXP 79
49297: PUSH
49298: LD_INT 0
49300: ST_TO_ADDR
// sTools := false ;
49301: LD_ADDR_EXP 80
49305: PUSH
49306: LD_INT 0
49308: ST_TO_ADDR
// sSold := false ;
49309: LD_ADDR_EXP 45
49313: PUSH
49314: LD_INT 0
49316: ST_TO_ADDR
// sDiff := false ;
49317: LD_ADDR_EXP 46
49321: PUSH
49322: LD_INT 0
49324: ST_TO_ADDR
// sFog := false ;
49325: LD_ADDR_EXP 49
49329: PUSH
49330: LD_INT 0
49332: ST_TO_ADDR
// sReset := false ;
49333: LD_ADDR_EXP 50
49337: PUSH
49338: LD_INT 0
49340: ST_TO_ADDR
// sSun := false ;
49341: LD_ADDR_EXP 51
49345: PUSH
49346: LD_INT 0
49348: ST_TO_ADDR
// sTiger := false ;
49349: LD_ADDR_EXP 47
49353: PUSH
49354: LD_INT 0
49356: ST_TO_ADDR
// sBomb := false ;
49357: LD_ADDR_EXP 48
49361: PUSH
49362: LD_INT 0
49364: ST_TO_ADDR
// sWound := false ;
49365: LD_ADDR_EXP 56
49369: PUSH
49370: LD_INT 0
49372: ST_TO_ADDR
// sBetray := false ;
49373: LD_ADDR_EXP 60
49377: PUSH
49378: LD_INT 0
49380: ST_TO_ADDR
// sContamin := false ;
49381: LD_ADDR_EXP 61
49385: PUSH
49386: LD_INT 0
49388: ST_TO_ADDR
// sOil := false ;
49389: LD_ADDR_EXP 63
49393: PUSH
49394: LD_INT 0
49396: ST_TO_ADDR
// sStu := false ;
49397: LD_ADDR_EXP 67
49401: PUSH
49402: LD_INT 0
49404: ST_TO_ADDR
// sBazooka := false ;
49405: LD_ADDR_EXP 70
49409: PUSH
49410: LD_INT 0
49412: ST_TO_ADDR
// sMortar := false ;
49413: LD_ADDR_EXP 71
49417: PUSH
49418: LD_INT 0
49420: ST_TO_ADDR
// sRanger := false ;
49421: LD_ADDR_EXP 81
49425: PUSH
49426: LD_INT 0
49428: ST_TO_ADDR
// sComputer := false ;
49429: LD_ADDR_EXP 82
49433: PUSH
49434: LD_INT 0
49436: ST_TO_ADDR
// s30 := false ;
49437: LD_ADDR_EXP 83
49441: PUSH
49442: LD_INT 0
49444: ST_TO_ADDR
// s60 := false ;
49445: LD_ADDR_EXP 84
49449: PUSH
49450: LD_INT 0
49452: ST_TO_ADDR
// end ;
49453: LD_VAR 0 1
49457: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49458: LD_INT 0
49460: PPUSH
49461: PPUSH
49462: PPUSH
49463: PPUSH
49464: PPUSH
49465: PPUSH
49466: PPUSH
// result := [ ] ;
49467: LD_ADDR_VAR 0 2
49471: PUSH
49472: EMPTY
49473: ST_TO_ADDR
// if campaign_id = 1 then
49474: LD_OWVAR 69
49478: PUSH
49479: LD_INT 1
49481: EQUAL
49482: IFFALSE 52648
// begin case mission_number of 1 :
49484: LD_OWVAR 70
49488: PUSH
49489: LD_INT 1
49491: DOUBLE
49492: EQUAL
49493: IFTRUE 49497
49495: GO 49573
49497: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49498: LD_ADDR_VAR 0 2
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: LD_INT 4
49508: PUSH
49509: LD_INT 11
49511: PUSH
49512: LD_INT 12
49514: PUSH
49515: LD_INT 15
49517: PUSH
49518: LD_INT 16
49520: PUSH
49521: LD_INT 22
49523: PUSH
49524: LD_INT 23
49526: PUSH
49527: LD_INT 26
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 101
49543: PUSH
49544: LD_INT 102
49546: PUSH
49547: LD_INT 106
49549: PUSH
49550: LD_INT 116
49552: PUSH
49553: LD_INT 117
49555: PUSH
49556: LD_INT 118
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: ST_TO_ADDR
49571: GO 52646
49573: LD_INT 2
49575: DOUBLE
49576: EQUAL
49577: IFTRUE 49581
49579: GO 49665
49581: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49582: LD_ADDR_VAR 0 2
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 4
49592: PUSH
49593: LD_INT 11
49595: PUSH
49596: LD_INT 12
49598: PUSH
49599: LD_INT 15
49601: PUSH
49602: LD_INT 16
49604: PUSH
49605: LD_INT 22
49607: PUSH
49608: LD_INT 23
49610: PUSH
49611: LD_INT 26
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 101
49627: PUSH
49628: LD_INT 102
49630: PUSH
49631: LD_INT 105
49633: PUSH
49634: LD_INT 106
49636: PUSH
49637: LD_INT 108
49639: PUSH
49640: LD_INT 116
49642: PUSH
49643: LD_INT 117
49645: PUSH
49646: LD_INT 118
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: ST_TO_ADDR
49663: GO 52646
49665: LD_INT 3
49667: DOUBLE
49668: EQUAL
49669: IFTRUE 49673
49671: GO 49761
49673: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49674: LD_ADDR_VAR 0 2
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 4
49684: PUSH
49685: LD_INT 5
49687: PUSH
49688: LD_INT 11
49690: PUSH
49691: LD_INT 12
49693: PUSH
49694: LD_INT 15
49696: PUSH
49697: LD_INT 16
49699: PUSH
49700: LD_INT 22
49702: PUSH
49703: LD_INT 26
49705: PUSH
49706: LD_INT 36
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 101
49723: PUSH
49724: LD_INT 102
49726: PUSH
49727: LD_INT 105
49729: PUSH
49730: LD_INT 106
49732: PUSH
49733: LD_INT 108
49735: PUSH
49736: LD_INT 116
49738: PUSH
49739: LD_INT 117
49741: PUSH
49742: LD_INT 118
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: ST_TO_ADDR
49759: GO 52646
49761: LD_INT 4
49763: DOUBLE
49764: EQUAL
49765: IFTRUE 49769
49767: GO 49865
49769: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49770: LD_ADDR_VAR 0 2
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 4
49780: PUSH
49781: LD_INT 5
49783: PUSH
49784: LD_INT 8
49786: PUSH
49787: LD_INT 11
49789: PUSH
49790: LD_INT 12
49792: PUSH
49793: LD_INT 15
49795: PUSH
49796: LD_INT 16
49798: PUSH
49799: LD_INT 22
49801: PUSH
49802: LD_INT 23
49804: PUSH
49805: LD_INT 26
49807: PUSH
49808: LD_INT 36
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 101
49827: PUSH
49828: LD_INT 102
49830: PUSH
49831: LD_INT 105
49833: PUSH
49834: LD_INT 106
49836: PUSH
49837: LD_INT 108
49839: PUSH
49840: LD_INT 116
49842: PUSH
49843: LD_INT 117
49845: PUSH
49846: LD_INT 118
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: ST_TO_ADDR
49863: GO 52646
49865: LD_INT 5
49867: DOUBLE
49868: EQUAL
49869: IFTRUE 49873
49871: GO 49985
49873: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49874: LD_ADDR_VAR 0 2
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 4
49884: PUSH
49885: LD_INT 5
49887: PUSH
49888: LD_INT 6
49890: PUSH
49891: LD_INT 8
49893: PUSH
49894: LD_INT 11
49896: PUSH
49897: LD_INT 12
49899: PUSH
49900: LD_INT 15
49902: PUSH
49903: LD_INT 16
49905: PUSH
49906: LD_INT 22
49908: PUSH
49909: LD_INT 23
49911: PUSH
49912: LD_INT 25
49914: PUSH
49915: LD_INT 26
49917: PUSH
49918: LD_INT 36
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 101
49939: PUSH
49940: LD_INT 102
49942: PUSH
49943: LD_INT 105
49945: PUSH
49946: LD_INT 106
49948: PUSH
49949: LD_INT 108
49951: PUSH
49952: LD_INT 109
49954: PUSH
49955: LD_INT 112
49957: PUSH
49958: LD_INT 116
49960: PUSH
49961: LD_INT 117
49963: PUSH
49964: LD_INT 118
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: ST_TO_ADDR
49983: GO 52646
49985: LD_INT 6
49987: DOUBLE
49988: EQUAL
49989: IFTRUE 49993
49991: GO 50125
49993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49994: LD_ADDR_VAR 0 2
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 4
50004: PUSH
50005: LD_INT 5
50007: PUSH
50008: LD_INT 6
50010: PUSH
50011: LD_INT 8
50013: PUSH
50014: LD_INT 11
50016: PUSH
50017: LD_INT 12
50019: PUSH
50020: LD_INT 15
50022: PUSH
50023: LD_INT 16
50025: PUSH
50026: LD_INT 20
50028: PUSH
50029: LD_INT 21
50031: PUSH
50032: LD_INT 22
50034: PUSH
50035: LD_INT 23
50037: PUSH
50038: LD_INT 25
50040: PUSH
50041: LD_INT 26
50043: PUSH
50044: LD_INT 30
50046: PUSH
50047: LD_INT 31
50049: PUSH
50050: LD_INT 32
50052: PUSH
50053: LD_INT 36
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 101
50079: PUSH
50080: LD_INT 102
50082: PUSH
50083: LD_INT 105
50085: PUSH
50086: LD_INT 106
50088: PUSH
50089: LD_INT 108
50091: PUSH
50092: LD_INT 109
50094: PUSH
50095: LD_INT 112
50097: PUSH
50098: LD_INT 116
50100: PUSH
50101: LD_INT 117
50103: PUSH
50104: LD_INT 118
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: ST_TO_ADDR
50123: GO 52646
50125: LD_INT 7
50127: DOUBLE
50128: EQUAL
50129: IFTRUE 50133
50131: GO 50245
50133: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50134: LD_ADDR_VAR 0 2
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 4
50144: PUSH
50145: LD_INT 5
50147: PUSH
50148: LD_INT 7
50150: PUSH
50151: LD_INT 11
50153: PUSH
50154: LD_INT 12
50156: PUSH
50157: LD_INT 15
50159: PUSH
50160: LD_INT 16
50162: PUSH
50163: LD_INT 20
50165: PUSH
50166: LD_INT 21
50168: PUSH
50169: LD_INT 22
50171: PUSH
50172: LD_INT 23
50174: PUSH
50175: LD_INT 25
50177: PUSH
50178: LD_INT 26
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 101
50199: PUSH
50200: LD_INT 102
50202: PUSH
50203: LD_INT 103
50205: PUSH
50206: LD_INT 105
50208: PUSH
50209: LD_INT 106
50211: PUSH
50212: LD_INT 108
50214: PUSH
50215: LD_INT 112
50217: PUSH
50218: LD_INT 116
50220: PUSH
50221: LD_INT 117
50223: PUSH
50224: LD_INT 118
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: ST_TO_ADDR
50243: GO 52646
50245: LD_INT 8
50247: DOUBLE
50248: EQUAL
50249: IFTRUE 50253
50251: GO 50393
50253: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50254: LD_ADDR_VAR 0 2
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 4
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: LD_INT 6
50270: PUSH
50271: LD_INT 7
50273: PUSH
50274: LD_INT 8
50276: PUSH
50277: LD_INT 11
50279: PUSH
50280: LD_INT 12
50282: PUSH
50283: LD_INT 15
50285: PUSH
50286: LD_INT 16
50288: PUSH
50289: LD_INT 20
50291: PUSH
50292: LD_INT 21
50294: PUSH
50295: LD_INT 22
50297: PUSH
50298: LD_INT 23
50300: PUSH
50301: LD_INT 25
50303: PUSH
50304: LD_INT 26
50306: PUSH
50307: LD_INT 30
50309: PUSH
50310: LD_INT 31
50312: PUSH
50313: LD_INT 32
50315: PUSH
50316: LD_INT 36
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 101
50343: PUSH
50344: LD_INT 102
50346: PUSH
50347: LD_INT 103
50349: PUSH
50350: LD_INT 105
50352: PUSH
50353: LD_INT 106
50355: PUSH
50356: LD_INT 108
50358: PUSH
50359: LD_INT 109
50361: PUSH
50362: LD_INT 112
50364: PUSH
50365: LD_INT 116
50367: PUSH
50368: LD_INT 117
50370: PUSH
50371: LD_INT 118
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: ST_TO_ADDR
50391: GO 52646
50393: LD_INT 9
50395: DOUBLE
50396: EQUAL
50397: IFTRUE 50401
50399: GO 50549
50401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50402: LD_ADDR_VAR 0 2
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 4
50412: PUSH
50413: LD_INT 5
50415: PUSH
50416: LD_INT 6
50418: PUSH
50419: LD_INT 7
50421: PUSH
50422: LD_INT 8
50424: PUSH
50425: LD_INT 11
50427: PUSH
50428: LD_INT 12
50430: PUSH
50431: LD_INT 15
50433: PUSH
50434: LD_INT 16
50436: PUSH
50437: LD_INT 20
50439: PUSH
50440: LD_INT 21
50442: PUSH
50443: LD_INT 22
50445: PUSH
50446: LD_INT 23
50448: PUSH
50449: LD_INT 25
50451: PUSH
50452: LD_INT 26
50454: PUSH
50455: LD_INT 28
50457: PUSH
50458: LD_INT 30
50460: PUSH
50461: LD_INT 31
50463: PUSH
50464: LD_INT 32
50466: PUSH
50467: LD_INT 36
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 101
50495: PUSH
50496: LD_INT 102
50498: PUSH
50499: LD_INT 103
50501: PUSH
50502: LD_INT 105
50504: PUSH
50505: LD_INT 106
50507: PUSH
50508: LD_INT 108
50510: PUSH
50511: LD_INT 109
50513: PUSH
50514: LD_INT 112
50516: PUSH
50517: LD_INT 114
50519: PUSH
50520: LD_INT 116
50522: PUSH
50523: LD_INT 117
50525: PUSH
50526: LD_INT 118
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: ST_TO_ADDR
50547: GO 52646
50549: LD_INT 10
50551: DOUBLE
50552: EQUAL
50553: IFTRUE 50557
50555: GO 50753
50557: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50558: LD_ADDR_VAR 0 2
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: LD_INT 4
50568: PUSH
50569: LD_INT 5
50571: PUSH
50572: LD_INT 6
50574: PUSH
50575: LD_INT 7
50577: PUSH
50578: LD_INT 8
50580: PUSH
50581: LD_INT 9
50583: PUSH
50584: LD_INT 10
50586: PUSH
50587: LD_INT 11
50589: PUSH
50590: LD_INT 12
50592: PUSH
50593: LD_INT 13
50595: PUSH
50596: LD_INT 14
50598: PUSH
50599: LD_INT 15
50601: PUSH
50602: LD_INT 16
50604: PUSH
50605: LD_INT 17
50607: PUSH
50608: LD_INT 18
50610: PUSH
50611: LD_INT 19
50613: PUSH
50614: LD_INT 20
50616: PUSH
50617: LD_INT 21
50619: PUSH
50620: LD_INT 22
50622: PUSH
50623: LD_INT 23
50625: PUSH
50626: LD_INT 24
50628: PUSH
50629: LD_INT 25
50631: PUSH
50632: LD_INT 26
50634: PUSH
50635: LD_INT 28
50637: PUSH
50638: LD_INT 30
50640: PUSH
50641: LD_INT 31
50643: PUSH
50644: LD_INT 32
50646: PUSH
50647: LD_INT 36
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 101
50683: PUSH
50684: LD_INT 102
50686: PUSH
50687: LD_INT 103
50689: PUSH
50690: LD_INT 104
50692: PUSH
50693: LD_INT 105
50695: PUSH
50696: LD_INT 106
50698: PUSH
50699: LD_INT 107
50701: PUSH
50702: LD_INT 108
50704: PUSH
50705: LD_INT 109
50707: PUSH
50708: LD_INT 110
50710: PUSH
50711: LD_INT 111
50713: PUSH
50714: LD_INT 112
50716: PUSH
50717: LD_INT 114
50719: PUSH
50720: LD_INT 116
50722: PUSH
50723: LD_INT 117
50725: PUSH
50726: LD_INT 118
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: ST_TO_ADDR
50751: GO 52646
50753: LD_INT 11
50755: DOUBLE
50756: EQUAL
50757: IFTRUE 50761
50759: GO 50965
50761: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50762: LD_ADDR_VAR 0 2
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: LD_INT 5
50778: PUSH
50779: LD_INT 6
50781: PUSH
50782: LD_INT 7
50784: PUSH
50785: LD_INT 8
50787: PUSH
50788: LD_INT 9
50790: PUSH
50791: LD_INT 10
50793: PUSH
50794: LD_INT 11
50796: PUSH
50797: LD_INT 12
50799: PUSH
50800: LD_INT 13
50802: PUSH
50803: LD_INT 14
50805: PUSH
50806: LD_INT 15
50808: PUSH
50809: LD_INT 16
50811: PUSH
50812: LD_INT 17
50814: PUSH
50815: LD_INT 18
50817: PUSH
50818: LD_INT 19
50820: PUSH
50821: LD_INT 20
50823: PUSH
50824: LD_INT 21
50826: PUSH
50827: LD_INT 22
50829: PUSH
50830: LD_INT 23
50832: PUSH
50833: LD_INT 24
50835: PUSH
50836: LD_INT 25
50838: PUSH
50839: LD_INT 26
50841: PUSH
50842: LD_INT 28
50844: PUSH
50845: LD_INT 30
50847: PUSH
50848: LD_INT 31
50850: PUSH
50851: LD_INT 32
50853: PUSH
50854: LD_INT 34
50856: PUSH
50857: LD_INT 36
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 101
50895: PUSH
50896: LD_INT 102
50898: PUSH
50899: LD_INT 103
50901: PUSH
50902: LD_INT 104
50904: PUSH
50905: LD_INT 105
50907: PUSH
50908: LD_INT 106
50910: PUSH
50911: LD_INT 107
50913: PUSH
50914: LD_INT 108
50916: PUSH
50917: LD_INT 109
50919: PUSH
50920: LD_INT 110
50922: PUSH
50923: LD_INT 111
50925: PUSH
50926: LD_INT 112
50928: PUSH
50929: LD_INT 114
50931: PUSH
50932: LD_INT 116
50934: PUSH
50935: LD_INT 117
50937: PUSH
50938: LD_INT 118
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: ST_TO_ADDR
50963: GO 52646
50965: LD_INT 12
50967: DOUBLE
50968: EQUAL
50969: IFTRUE 50973
50971: GO 51193
50973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50974: LD_ADDR_VAR 0 2
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 4
50990: PUSH
50991: LD_INT 5
50993: PUSH
50994: LD_INT 6
50996: PUSH
50997: LD_INT 7
50999: PUSH
51000: LD_INT 8
51002: PUSH
51003: LD_INT 9
51005: PUSH
51006: LD_INT 10
51008: PUSH
51009: LD_INT 11
51011: PUSH
51012: LD_INT 12
51014: PUSH
51015: LD_INT 13
51017: PUSH
51018: LD_INT 14
51020: PUSH
51021: LD_INT 15
51023: PUSH
51024: LD_INT 16
51026: PUSH
51027: LD_INT 17
51029: PUSH
51030: LD_INT 18
51032: PUSH
51033: LD_INT 19
51035: PUSH
51036: LD_INT 20
51038: PUSH
51039: LD_INT 21
51041: PUSH
51042: LD_INT 22
51044: PUSH
51045: LD_INT 23
51047: PUSH
51048: LD_INT 24
51050: PUSH
51051: LD_INT 25
51053: PUSH
51054: LD_INT 26
51056: PUSH
51057: LD_INT 27
51059: PUSH
51060: LD_INT 28
51062: PUSH
51063: LD_INT 30
51065: PUSH
51066: LD_INT 31
51068: PUSH
51069: LD_INT 32
51071: PUSH
51072: LD_INT 33
51074: PUSH
51075: LD_INT 34
51077: PUSH
51078: LD_INT 36
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 101
51119: PUSH
51120: LD_INT 102
51122: PUSH
51123: LD_INT 103
51125: PUSH
51126: LD_INT 104
51128: PUSH
51129: LD_INT 105
51131: PUSH
51132: LD_INT 106
51134: PUSH
51135: LD_INT 107
51137: PUSH
51138: LD_INT 108
51140: PUSH
51141: LD_INT 109
51143: PUSH
51144: LD_INT 110
51146: PUSH
51147: LD_INT 111
51149: PUSH
51150: LD_INT 112
51152: PUSH
51153: LD_INT 113
51155: PUSH
51156: LD_INT 114
51158: PUSH
51159: LD_INT 116
51161: PUSH
51162: LD_INT 117
51164: PUSH
51165: LD_INT 118
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: ST_TO_ADDR
51191: GO 52646
51193: LD_INT 13
51195: DOUBLE
51196: EQUAL
51197: IFTRUE 51201
51199: GO 51409
51201: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51202: LD_ADDR_VAR 0 2
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: LD_INT 5
51221: PUSH
51222: LD_INT 8
51224: PUSH
51225: LD_INT 9
51227: PUSH
51228: LD_INT 10
51230: PUSH
51231: LD_INT 11
51233: PUSH
51234: LD_INT 12
51236: PUSH
51237: LD_INT 14
51239: PUSH
51240: LD_INT 15
51242: PUSH
51243: LD_INT 16
51245: PUSH
51246: LD_INT 17
51248: PUSH
51249: LD_INT 18
51251: PUSH
51252: LD_INT 19
51254: PUSH
51255: LD_INT 20
51257: PUSH
51258: LD_INT 21
51260: PUSH
51261: LD_INT 22
51263: PUSH
51264: LD_INT 23
51266: PUSH
51267: LD_INT 24
51269: PUSH
51270: LD_INT 25
51272: PUSH
51273: LD_INT 26
51275: PUSH
51276: LD_INT 27
51278: PUSH
51279: LD_INT 28
51281: PUSH
51282: LD_INT 30
51284: PUSH
51285: LD_INT 31
51287: PUSH
51288: LD_INT 32
51290: PUSH
51291: LD_INT 33
51293: PUSH
51294: LD_INT 34
51296: PUSH
51297: LD_INT 36
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 101
51335: PUSH
51336: LD_INT 102
51338: PUSH
51339: LD_INT 103
51341: PUSH
51342: LD_INT 104
51344: PUSH
51345: LD_INT 105
51347: PUSH
51348: LD_INT 106
51350: PUSH
51351: LD_INT 107
51353: PUSH
51354: LD_INT 108
51356: PUSH
51357: LD_INT 109
51359: PUSH
51360: LD_INT 110
51362: PUSH
51363: LD_INT 111
51365: PUSH
51366: LD_INT 112
51368: PUSH
51369: LD_INT 113
51371: PUSH
51372: LD_INT 114
51374: PUSH
51375: LD_INT 116
51377: PUSH
51378: LD_INT 117
51380: PUSH
51381: LD_INT 118
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: ST_TO_ADDR
51407: GO 52646
51409: LD_INT 14
51411: DOUBLE
51412: EQUAL
51413: IFTRUE 51417
51415: GO 51641
51417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51418: LD_ADDR_VAR 0 2
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 3
51431: PUSH
51432: LD_INT 4
51434: PUSH
51435: LD_INT 5
51437: PUSH
51438: LD_INT 6
51440: PUSH
51441: LD_INT 7
51443: PUSH
51444: LD_INT 8
51446: PUSH
51447: LD_INT 9
51449: PUSH
51450: LD_INT 10
51452: PUSH
51453: LD_INT 11
51455: PUSH
51456: LD_INT 12
51458: PUSH
51459: LD_INT 13
51461: PUSH
51462: LD_INT 14
51464: PUSH
51465: LD_INT 15
51467: PUSH
51468: LD_INT 16
51470: PUSH
51471: LD_INT 17
51473: PUSH
51474: LD_INT 18
51476: PUSH
51477: LD_INT 19
51479: PUSH
51480: LD_INT 20
51482: PUSH
51483: LD_INT 21
51485: PUSH
51486: LD_INT 22
51488: PUSH
51489: LD_INT 23
51491: PUSH
51492: LD_INT 24
51494: PUSH
51495: LD_INT 25
51497: PUSH
51498: LD_INT 26
51500: PUSH
51501: LD_INT 27
51503: PUSH
51504: LD_INT 28
51506: PUSH
51507: LD_INT 29
51509: PUSH
51510: LD_INT 30
51512: PUSH
51513: LD_INT 31
51515: PUSH
51516: LD_INT 32
51518: PUSH
51519: LD_INT 33
51521: PUSH
51522: LD_INT 34
51524: PUSH
51525: LD_INT 36
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 101
51567: PUSH
51568: LD_INT 102
51570: PUSH
51571: LD_INT 103
51573: PUSH
51574: LD_INT 104
51576: PUSH
51577: LD_INT 105
51579: PUSH
51580: LD_INT 106
51582: PUSH
51583: LD_INT 107
51585: PUSH
51586: LD_INT 108
51588: PUSH
51589: LD_INT 109
51591: PUSH
51592: LD_INT 110
51594: PUSH
51595: LD_INT 111
51597: PUSH
51598: LD_INT 112
51600: PUSH
51601: LD_INT 113
51603: PUSH
51604: LD_INT 114
51606: PUSH
51607: LD_INT 116
51609: PUSH
51610: LD_INT 117
51612: PUSH
51613: LD_INT 118
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: ST_TO_ADDR
51639: GO 52646
51641: LD_INT 15
51643: DOUBLE
51644: EQUAL
51645: IFTRUE 51649
51647: GO 51873
51649: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51650: LD_ADDR_VAR 0 2
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: LD_INT 4
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: LD_INT 6
51672: PUSH
51673: LD_INT 7
51675: PUSH
51676: LD_INT 8
51678: PUSH
51679: LD_INT 9
51681: PUSH
51682: LD_INT 10
51684: PUSH
51685: LD_INT 11
51687: PUSH
51688: LD_INT 12
51690: PUSH
51691: LD_INT 13
51693: PUSH
51694: LD_INT 14
51696: PUSH
51697: LD_INT 15
51699: PUSH
51700: LD_INT 16
51702: PUSH
51703: LD_INT 17
51705: PUSH
51706: LD_INT 18
51708: PUSH
51709: LD_INT 19
51711: PUSH
51712: LD_INT 20
51714: PUSH
51715: LD_INT 21
51717: PUSH
51718: LD_INT 22
51720: PUSH
51721: LD_INT 23
51723: PUSH
51724: LD_INT 24
51726: PUSH
51727: LD_INT 25
51729: PUSH
51730: LD_INT 26
51732: PUSH
51733: LD_INT 27
51735: PUSH
51736: LD_INT 28
51738: PUSH
51739: LD_INT 29
51741: PUSH
51742: LD_INT 30
51744: PUSH
51745: LD_INT 31
51747: PUSH
51748: LD_INT 32
51750: PUSH
51751: LD_INT 33
51753: PUSH
51754: LD_INT 34
51756: PUSH
51757: LD_INT 36
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 101
51799: PUSH
51800: LD_INT 102
51802: PUSH
51803: LD_INT 103
51805: PUSH
51806: LD_INT 104
51808: PUSH
51809: LD_INT 105
51811: PUSH
51812: LD_INT 106
51814: PUSH
51815: LD_INT 107
51817: PUSH
51818: LD_INT 108
51820: PUSH
51821: LD_INT 109
51823: PUSH
51824: LD_INT 110
51826: PUSH
51827: LD_INT 111
51829: PUSH
51830: LD_INT 112
51832: PUSH
51833: LD_INT 113
51835: PUSH
51836: LD_INT 114
51838: PUSH
51839: LD_INT 116
51841: PUSH
51842: LD_INT 117
51844: PUSH
51845: LD_INT 118
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: ST_TO_ADDR
51871: GO 52646
51873: LD_INT 16
51875: DOUBLE
51876: EQUAL
51877: IFTRUE 51881
51879: GO 52017
51881: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51882: LD_ADDR_VAR 0 2
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: LD_INT 4
51892: PUSH
51893: LD_INT 5
51895: PUSH
51896: LD_INT 7
51898: PUSH
51899: LD_INT 11
51901: PUSH
51902: LD_INT 12
51904: PUSH
51905: LD_INT 15
51907: PUSH
51908: LD_INT 16
51910: PUSH
51911: LD_INT 20
51913: PUSH
51914: LD_INT 21
51916: PUSH
51917: LD_INT 22
51919: PUSH
51920: LD_INT 23
51922: PUSH
51923: LD_INT 25
51925: PUSH
51926: LD_INT 26
51928: PUSH
51929: LD_INT 30
51931: PUSH
51932: LD_INT 31
51934: PUSH
51935: LD_INT 32
51937: PUSH
51938: LD_INT 33
51940: PUSH
51941: LD_INT 34
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 101
51967: PUSH
51968: LD_INT 102
51970: PUSH
51971: LD_INT 103
51973: PUSH
51974: LD_INT 106
51976: PUSH
51977: LD_INT 108
51979: PUSH
51980: LD_INT 112
51982: PUSH
51983: LD_INT 113
51985: PUSH
51986: LD_INT 114
51988: PUSH
51989: LD_INT 116
51991: PUSH
51992: LD_INT 117
51994: PUSH
51995: LD_INT 118
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: ST_TO_ADDR
52015: GO 52646
52017: LD_INT 17
52019: DOUBLE
52020: EQUAL
52021: IFTRUE 52025
52023: GO 52249
52025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52026: LD_ADDR_VAR 0 2
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: LD_INT 4
52042: PUSH
52043: LD_INT 5
52045: PUSH
52046: LD_INT 6
52048: PUSH
52049: LD_INT 7
52051: PUSH
52052: LD_INT 8
52054: PUSH
52055: LD_INT 9
52057: PUSH
52058: LD_INT 10
52060: PUSH
52061: LD_INT 11
52063: PUSH
52064: LD_INT 12
52066: PUSH
52067: LD_INT 13
52069: PUSH
52070: LD_INT 14
52072: PUSH
52073: LD_INT 15
52075: PUSH
52076: LD_INT 16
52078: PUSH
52079: LD_INT 17
52081: PUSH
52082: LD_INT 18
52084: PUSH
52085: LD_INT 19
52087: PUSH
52088: LD_INT 20
52090: PUSH
52091: LD_INT 21
52093: PUSH
52094: LD_INT 22
52096: PUSH
52097: LD_INT 23
52099: PUSH
52100: LD_INT 24
52102: PUSH
52103: LD_INT 25
52105: PUSH
52106: LD_INT 26
52108: PUSH
52109: LD_INT 27
52111: PUSH
52112: LD_INT 28
52114: PUSH
52115: LD_INT 29
52117: PUSH
52118: LD_INT 30
52120: PUSH
52121: LD_INT 31
52123: PUSH
52124: LD_INT 32
52126: PUSH
52127: LD_INT 33
52129: PUSH
52130: LD_INT 34
52132: PUSH
52133: LD_INT 36
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 101
52175: PUSH
52176: LD_INT 102
52178: PUSH
52179: LD_INT 103
52181: PUSH
52182: LD_INT 104
52184: PUSH
52185: LD_INT 105
52187: PUSH
52188: LD_INT 106
52190: PUSH
52191: LD_INT 107
52193: PUSH
52194: LD_INT 108
52196: PUSH
52197: LD_INT 109
52199: PUSH
52200: LD_INT 110
52202: PUSH
52203: LD_INT 111
52205: PUSH
52206: LD_INT 112
52208: PUSH
52209: LD_INT 113
52211: PUSH
52212: LD_INT 114
52214: PUSH
52215: LD_INT 116
52217: PUSH
52218: LD_INT 117
52220: PUSH
52221: LD_INT 118
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: ST_TO_ADDR
52247: GO 52646
52249: LD_INT 18
52251: DOUBLE
52252: EQUAL
52253: IFTRUE 52257
52255: GO 52405
52257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52258: LD_ADDR_VAR 0 2
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 4
52268: PUSH
52269: LD_INT 5
52271: PUSH
52272: LD_INT 7
52274: PUSH
52275: LD_INT 11
52277: PUSH
52278: LD_INT 12
52280: PUSH
52281: LD_INT 15
52283: PUSH
52284: LD_INT 16
52286: PUSH
52287: LD_INT 20
52289: PUSH
52290: LD_INT 21
52292: PUSH
52293: LD_INT 22
52295: PUSH
52296: LD_INT 23
52298: PUSH
52299: LD_INT 25
52301: PUSH
52302: LD_INT 26
52304: PUSH
52305: LD_INT 30
52307: PUSH
52308: LD_INT 31
52310: PUSH
52311: LD_INT 32
52313: PUSH
52314: LD_INT 33
52316: PUSH
52317: LD_INT 34
52319: PUSH
52320: LD_INT 35
52322: PUSH
52323: LD_INT 36
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 101
52351: PUSH
52352: LD_INT 102
52354: PUSH
52355: LD_INT 103
52357: PUSH
52358: LD_INT 106
52360: PUSH
52361: LD_INT 108
52363: PUSH
52364: LD_INT 112
52366: PUSH
52367: LD_INT 113
52369: PUSH
52370: LD_INT 114
52372: PUSH
52373: LD_INT 115
52375: PUSH
52376: LD_INT 116
52378: PUSH
52379: LD_INT 117
52381: PUSH
52382: LD_INT 118
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: ST_TO_ADDR
52403: GO 52646
52405: LD_INT 19
52407: DOUBLE
52408: EQUAL
52409: IFTRUE 52413
52411: GO 52645
52413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52414: LD_ADDR_VAR 0 2
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: LD_INT 4
52430: PUSH
52431: LD_INT 5
52433: PUSH
52434: LD_INT 6
52436: PUSH
52437: LD_INT 7
52439: PUSH
52440: LD_INT 8
52442: PUSH
52443: LD_INT 9
52445: PUSH
52446: LD_INT 10
52448: PUSH
52449: LD_INT 11
52451: PUSH
52452: LD_INT 12
52454: PUSH
52455: LD_INT 13
52457: PUSH
52458: LD_INT 14
52460: PUSH
52461: LD_INT 15
52463: PUSH
52464: LD_INT 16
52466: PUSH
52467: LD_INT 17
52469: PUSH
52470: LD_INT 18
52472: PUSH
52473: LD_INT 19
52475: PUSH
52476: LD_INT 20
52478: PUSH
52479: LD_INT 21
52481: PUSH
52482: LD_INT 22
52484: PUSH
52485: LD_INT 23
52487: PUSH
52488: LD_INT 24
52490: PUSH
52491: LD_INT 25
52493: PUSH
52494: LD_INT 26
52496: PUSH
52497: LD_INT 27
52499: PUSH
52500: LD_INT 28
52502: PUSH
52503: LD_INT 29
52505: PUSH
52506: LD_INT 30
52508: PUSH
52509: LD_INT 31
52511: PUSH
52512: LD_INT 32
52514: PUSH
52515: LD_INT 33
52517: PUSH
52518: LD_INT 34
52520: PUSH
52521: LD_INT 35
52523: PUSH
52524: LD_INT 36
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 101
52567: PUSH
52568: LD_INT 102
52570: PUSH
52571: LD_INT 103
52573: PUSH
52574: LD_INT 104
52576: PUSH
52577: LD_INT 105
52579: PUSH
52580: LD_INT 106
52582: PUSH
52583: LD_INT 107
52585: PUSH
52586: LD_INT 108
52588: PUSH
52589: LD_INT 109
52591: PUSH
52592: LD_INT 110
52594: PUSH
52595: LD_INT 111
52597: PUSH
52598: LD_INT 112
52600: PUSH
52601: LD_INT 113
52603: PUSH
52604: LD_INT 114
52606: PUSH
52607: LD_INT 115
52609: PUSH
52610: LD_INT 116
52612: PUSH
52613: LD_INT 117
52615: PUSH
52616: LD_INT 118
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: ST_TO_ADDR
52643: GO 52646
52645: POP
// end else
52646: GO 52877
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52648: LD_ADDR_VAR 0 2
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 4
52664: PUSH
52665: LD_INT 5
52667: PUSH
52668: LD_INT 6
52670: PUSH
52671: LD_INT 7
52673: PUSH
52674: LD_INT 8
52676: PUSH
52677: LD_INT 9
52679: PUSH
52680: LD_INT 10
52682: PUSH
52683: LD_INT 11
52685: PUSH
52686: LD_INT 12
52688: PUSH
52689: LD_INT 13
52691: PUSH
52692: LD_INT 14
52694: PUSH
52695: LD_INT 15
52697: PUSH
52698: LD_INT 16
52700: PUSH
52701: LD_INT 17
52703: PUSH
52704: LD_INT 18
52706: PUSH
52707: LD_INT 19
52709: PUSH
52710: LD_INT 20
52712: PUSH
52713: LD_INT 21
52715: PUSH
52716: LD_INT 22
52718: PUSH
52719: LD_INT 23
52721: PUSH
52722: LD_INT 24
52724: PUSH
52725: LD_INT 25
52727: PUSH
52728: LD_INT 26
52730: PUSH
52731: LD_INT 27
52733: PUSH
52734: LD_INT 28
52736: PUSH
52737: LD_INT 29
52739: PUSH
52740: LD_INT 30
52742: PUSH
52743: LD_INT 31
52745: PUSH
52746: LD_INT 32
52748: PUSH
52749: LD_INT 33
52751: PUSH
52752: LD_INT 34
52754: PUSH
52755: LD_INT 35
52757: PUSH
52758: LD_INT 36
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 101
52801: PUSH
52802: LD_INT 102
52804: PUSH
52805: LD_INT 103
52807: PUSH
52808: LD_INT 104
52810: PUSH
52811: LD_INT 105
52813: PUSH
52814: LD_INT 106
52816: PUSH
52817: LD_INT 107
52819: PUSH
52820: LD_INT 108
52822: PUSH
52823: LD_INT 109
52825: PUSH
52826: LD_INT 110
52828: PUSH
52829: LD_INT 111
52831: PUSH
52832: LD_INT 112
52834: PUSH
52835: LD_INT 113
52837: PUSH
52838: LD_INT 114
52840: PUSH
52841: LD_INT 115
52843: PUSH
52844: LD_INT 116
52846: PUSH
52847: LD_INT 117
52849: PUSH
52850: LD_INT 118
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// if result then
52877: LD_VAR 0 2
52881: IFFALSE 53667
// begin normal :=  ;
52883: LD_ADDR_VAR 0 5
52887: PUSH
52888: LD_STRING 
52890: ST_TO_ADDR
// hardcore :=  ;
52891: LD_ADDR_VAR 0 6
52895: PUSH
52896: LD_STRING 
52898: ST_TO_ADDR
// active :=  ;
52899: LD_ADDR_VAR 0 7
52903: PUSH
52904: LD_STRING 
52906: ST_TO_ADDR
// for i = 1 to normalCounter do
52907: LD_ADDR_VAR 0 8
52911: PUSH
52912: DOUBLE
52913: LD_INT 1
52915: DEC
52916: ST_TO_ADDR
52917: LD_EXP 29
52921: PUSH
52922: FOR_TO
52923: IFFALSE 53024
// begin tmp := 0 ;
52925: LD_ADDR_VAR 0 3
52929: PUSH
52930: LD_STRING 0
52932: ST_TO_ADDR
// if result [ 1 ] then
52933: LD_VAR 0 2
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: IFFALSE 53006
// if result [ 1 ] [ 1 ] = i then
52943: LD_VAR 0 2
52947: PUSH
52948: LD_INT 1
52950: ARRAY
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: PUSH
52956: LD_VAR 0 8
52960: EQUAL
52961: IFFALSE 53006
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52963: LD_ADDR_VAR 0 2
52967: PUSH
52968: LD_VAR 0 2
52972: PPUSH
52973: LD_INT 1
52975: PPUSH
52976: LD_VAR 0 2
52980: PUSH
52981: LD_INT 1
52983: ARRAY
52984: PPUSH
52985: LD_INT 1
52987: PPUSH
52988: CALL_OW 3
52992: PPUSH
52993: CALL_OW 1
52997: ST_TO_ADDR
// tmp := 1 ;
52998: LD_ADDR_VAR 0 3
53002: PUSH
53003: LD_STRING 1
53005: ST_TO_ADDR
// end ; normal := normal & tmp ;
53006: LD_ADDR_VAR 0 5
53010: PUSH
53011: LD_VAR 0 5
53015: PUSH
53016: LD_VAR 0 3
53020: STR
53021: ST_TO_ADDR
// end ;
53022: GO 52922
53024: POP
53025: POP
// for i = 1 to hardcoreCounter do
53026: LD_ADDR_VAR 0 8
53030: PUSH
53031: DOUBLE
53032: LD_INT 1
53034: DEC
53035: ST_TO_ADDR
53036: LD_EXP 30
53040: PUSH
53041: FOR_TO
53042: IFFALSE 53147
// begin tmp := 0 ;
53044: LD_ADDR_VAR 0 3
53048: PUSH
53049: LD_STRING 0
53051: ST_TO_ADDR
// if result [ 2 ] then
53052: LD_VAR 0 2
53056: PUSH
53057: LD_INT 2
53059: ARRAY
53060: IFFALSE 53129
// if result [ 2 ] [ 1 ] = 100 + i then
53062: LD_VAR 0 2
53066: PUSH
53067: LD_INT 2
53069: ARRAY
53070: PUSH
53071: LD_INT 1
53073: ARRAY
53074: PUSH
53075: LD_INT 100
53077: PUSH
53078: LD_VAR 0 8
53082: PLUS
53083: EQUAL
53084: IFFALSE 53129
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53086: LD_ADDR_VAR 0 2
53090: PUSH
53091: LD_VAR 0 2
53095: PPUSH
53096: LD_INT 2
53098: PPUSH
53099: LD_VAR 0 2
53103: PUSH
53104: LD_INT 2
53106: ARRAY
53107: PPUSH
53108: LD_INT 1
53110: PPUSH
53111: CALL_OW 3
53115: PPUSH
53116: CALL_OW 1
53120: ST_TO_ADDR
// tmp := 1 ;
53121: LD_ADDR_VAR 0 3
53125: PUSH
53126: LD_STRING 1
53128: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53129: LD_ADDR_VAR 0 6
53133: PUSH
53134: LD_VAR 0 6
53138: PUSH
53139: LD_VAR 0 3
53143: STR
53144: ST_TO_ADDR
// end ;
53145: GO 53041
53147: POP
53148: POP
// if isGameLoad then
53149: LD_VAR 0 1
53153: IFFALSE 53628
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53155: LD_ADDR_VAR 0 4
53159: PUSH
53160: LD_EXP 33
53164: PUSH
53165: LD_EXP 32
53169: PUSH
53170: LD_EXP 34
53174: PUSH
53175: LD_EXP 31
53179: PUSH
53180: LD_EXP 35
53184: PUSH
53185: LD_EXP 36
53189: PUSH
53190: LD_EXP 37
53194: PUSH
53195: LD_EXP 38
53199: PUSH
53200: LD_EXP 39
53204: PUSH
53205: LD_EXP 40
53209: PUSH
53210: LD_EXP 41
53214: PUSH
53215: LD_EXP 42
53219: PUSH
53220: LD_EXP 43
53224: PUSH
53225: LD_EXP 44
53229: PUSH
53230: LD_EXP 52
53234: PUSH
53235: LD_EXP 53
53239: PUSH
53240: LD_EXP 54
53244: PUSH
53245: LD_EXP 55
53249: PUSH
53250: LD_EXP 57
53254: PUSH
53255: LD_EXP 58
53259: PUSH
53260: LD_EXP 59
53264: PUSH
53265: LD_EXP 62
53269: PUSH
53270: LD_EXP 64
53274: PUSH
53275: LD_EXP 65
53279: PUSH
53280: LD_EXP 66
53284: PUSH
53285: LD_EXP 68
53289: PUSH
53290: LD_EXP 69
53294: PUSH
53295: LD_EXP 72
53299: PUSH
53300: LD_EXP 73
53304: PUSH
53305: LD_EXP 74
53309: PUSH
53310: LD_EXP 75
53314: PUSH
53315: LD_EXP 76
53319: PUSH
53320: LD_EXP 77
53324: PUSH
53325: LD_EXP 78
53329: PUSH
53330: LD_EXP 79
53334: PUSH
53335: LD_EXP 80
53339: PUSH
53340: LD_EXP 45
53344: PUSH
53345: LD_EXP 46
53349: PUSH
53350: LD_EXP 49
53354: PUSH
53355: LD_EXP 50
53359: PUSH
53360: LD_EXP 51
53364: PUSH
53365: LD_EXP 47
53369: PUSH
53370: LD_EXP 48
53374: PUSH
53375: LD_EXP 56
53379: PUSH
53380: LD_EXP 60
53384: PUSH
53385: LD_EXP 61
53389: PUSH
53390: LD_EXP 63
53394: PUSH
53395: LD_EXP 67
53399: PUSH
53400: LD_EXP 70
53404: PUSH
53405: LD_EXP 71
53409: PUSH
53410: LD_EXP 81
53414: PUSH
53415: LD_EXP 82
53419: PUSH
53420: LD_EXP 83
53424: PUSH
53425: LD_EXP 84
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// tmp :=  ;
53486: LD_ADDR_VAR 0 3
53490: PUSH
53491: LD_STRING 
53493: ST_TO_ADDR
// for i = 1 to normalCounter do
53494: LD_ADDR_VAR 0 8
53498: PUSH
53499: DOUBLE
53500: LD_INT 1
53502: DEC
53503: ST_TO_ADDR
53504: LD_EXP 29
53508: PUSH
53509: FOR_TO
53510: IFFALSE 53546
// begin if flags [ i ] then
53512: LD_VAR 0 4
53516: PUSH
53517: LD_VAR 0 8
53521: ARRAY
53522: IFFALSE 53544
// tmp := tmp & i & ; ;
53524: LD_ADDR_VAR 0 3
53528: PUSH
53529: LD_VAR 0 3
53533: PUSH
53534: LD_VAR 0 8
53538: STR
53539: PUSH
53540: LD_STRING ;
53542: STR
53543: ST_TO_ADDR
// end ;
53544: GO 53509
53546: POP
53547: POP
// for i = 1 to hardcoreCounter do
53548: LD_ADDR_VAR 0 8
53552: PUSH
53553: DOUBLE
53554: LD_INT 1
53556: DEC
53557: ST_TO_ADDR
53558: LD_EXP 30
53562: PUSH
53563: FOR_TO
53564: IFFALSE 53610
// begin if flags [ normalCounter + i ] then
53566: LD_VAR 0 4
53570: PUSH
53571: LD_EXP 29
53575: PUSH
53576: LD_VAR 0 8
53580: PLUS
53581: ARRAY
53582: IFFALSE 53608
// tmp := tmp & ( 100 + i ) & ; ;
53584: LD_ADDR_VAR 0 3
53588: PUSH
53589: LD_VAR 0 3
53593: PUSH
53594: LD_INT 100
53596: PUSH
53597: LD_VAR 0 8
53601: PLUS
53602: STR
53603: PUSH
53604: LD_STRING ;
53606: STR
53607: ST_TO_ADDR
// end ;
53608: GO 53563
53610: POP
53611: POP
// if tmp then
53612: LD_VAR 0 3
53616: IFFALSE 53628
// active := tmp ;
53618: LD_ADDR_VAR 0 7
53622: PUSH
53623: LD_VAR 0 3
53627: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53628: LD_STRING getStreamItemsFromMission("
53630: PUSH
53631: LD_VAR 0 5
53635: STR
53636: PUSH
53637: LD_STRING ","
53639: STR
53640: PUSH
53641: LD_VAR 0 6
53645: STR
53646: PUSH
53647: LD_STRING ","
53649: STR
53650: PUSH
53651: LD_VAR 0 7
53655: STR
53656: PUSH
53657: LD_STRING ")
53659: STR
53660: PPUSH
53661: CALL_OW 559
// end else
53665: GO 53674
// ToLua ( getStreamItemsFromMission("","","") ) ;
53667: LD_STRING getStreamItemsFromMission("","","")
53669: PPUSH
53670: CALL_OW 559
// end ;
53674: LD_VAR 0 2
53678: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53679: LD_EXP 28
53683: PUSH
53684: LD_EXP 33
53688: AND
53689: IFFALSE 53813
53691: GO 53693
53693: DISABLE
53694: LD_INT 0
53696: PPUSH
53697: PPUSH
// begin enable ;
53698: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53699: LD_ADDR_VAR 0 2
53703: PUSH
53704: LD_INT 22
53706: PUSH
53707: LD_OWVAR 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 34
53721: PUSH
53722: LD_INT 7
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 34
53731: PUSH
53732: LD_INT 45
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 34
53741: PUSH
53742: LD_INT 28
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 34
53751: PUSH
53752: LD_INT 47
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PPUSH
53770: CALL_OW 69
53774: ST_TO_ADDR
// if not tmp then
53775: LD_VAR 0 2
53779: NOT
53780: IFFALSE 53784
// exit ;
53782: GO 53813
// for i in tmp do
53784: LD_ADDR_VAR 0 1
53788: PUSH
53789: LD_VAR 0 2
53793: PUSH
53794: FOR_IN
53795: IFFALSE 53811
// begin SetLives ( i , 0 ) ;
53797: LD_VAR 0 1
53801: PPUSH
53802: LD_INT 0
53804: PPUSH
53805: CALL_OW 234
// end ;
53809: GO 53794
53811: POP
53812: POP
// end ;
53813: PPOPN 2
53815: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53816: LD_EXP 28
53820: PUSH
53821: LD_EXP 34
53825: AND
53826: IFFALSE 53910
53828: GO 53830
53830: DISABLE
53831: LD_INT 0
53833: PPUSH
53834: PPUSH
// begin enable ;
53835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53836: LD_ADDR_VAR 0 2
53840: PUSH
53841: LD_INT 22
53843: PUSH
53844: LD_OWVAR 2
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 32
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PPUSH
53867: CALL_OW 69
53871: ST_TO_ADDR
// if not tmp then
53872: LD_VAR 0 2
53876: NOT
53877: IFFALSE 53881
// exit ;
53879: GO 53910
// for i in tmp do
53881: LD_ADDR_VAR 0 1
53885: PUSH
53886: LD_VAR 0 2
53890: PUSH
53891: FOR_IN
53892: IFFALSE 53908
// begin SetLives ( i , 0 ) ;
53894: LD_VAR 0 1
53898: PPUSH
53899: LD_INT 0
53901: PPUSH
53902: CALL_OW 234
// end ;
53906: GO 53891
53908: POP
53909: POP
// end ;
53910: PPOPN 2
53912: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53913: LD_EXP 28
53917: PUSH
53918: LD_EXP 31
53922: AND
53923: IFFALSE 54016
53925: GO 53927
53927: DISABLE
53928: LD_INT 0
53930: PPUSH
// begin enable ;
53931: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53932: LD_ADDR_VAR 0 1
53936: PUSH
53937: LD_INT 22
53939: PUSH
53940: LD_OWVAR 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 25
53954: PUSH
53955: LD_INT 5
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 25
53964: PUSH
53965: LD_INT 9
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 25
53974: PUSH
53975: LD_INT 8
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PPUSH
53992: CALL_OW 69
53996: PUSH
53997: FOR_IN
53998: IFFALSE 54014
// begin SetClass ( i , 1 ) ;
54000: LD_VAR 0 1
54004: PPUSH
54005: LD_INT 1
54007: PPUSH
54008: CALL_OW 336
// end ;
54012: GO 53997
54014: POP
54015: POP
// end ;
54016: PPOPN 1
54018: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54019: LD_EXP 28
54023: PUSH
54024: LD_EXP 32
54028: AND
54029: PUSH
54030: LD_OWVAR 65
54034: PUSH
54035: LD_INT 7
54037: LESS
54038: AND
54039: IFFALSE 54053
54041: GO 54043
54043: DISABLE
// begin enable ;
54044: ENABLE
// game_speed := 7 ;
54045: LD_ADDR_OWVAR 65
54049: PUSH
54050: LD_INT 7
54052: ST_TO_ADDR
// end ;
54053: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54054: LD_EXP 28
54058: PUSH
54059: LD_EXP 35
54063: AND
54064: IFFALSE 54266
54066: GO 54068
54068: DISABLE
54069: LD_INT 0
54071: PPUSH
54072: PPUSH
54073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54074: LD_ADDR_VAR 0 3
54078: PUSH
54079: LD_INT 81
54081: PUSH
54082: LD_OWVAR 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 21
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PPUSH
54105: CALL_OW 69
54109: ST_TO_ADDR
// if not tmp then
54110: LD_VAR 0 3
54114: NOT
54115: IFFALSE 54119
// exit ;
54117: GO 54266
// if tmp > 5 then
54119: LD_VAR 0 3
54123: PUSH
54124: LD_INT 5
54126: GREATER
54127: IFFALSE 54139
// k := 5 else
54129: LD_ADDR_VAR 0 2
54133: PUSH
54134: LD_INT 5
54136: ST_TO_ADDR
54137: GO 54149
// k := tmp ;
54139: LD_ADDR_VAR 0 2
54143: PUSH
54144: LD_VAR 0 3
54148: ST_TO_ADDR
// for i := 1 to k do
54149: LD_ADDR_VAR 0 1
54153: PUSH
54154: DOUBLE
54155: LD_INT 1
54157: DEC
54158: ST_TO_ADDR
54159: LD_VAR 0 2
54163: PUSH
54164: FOR_TO
54165: IFFALSE 54264
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54167: LD_VAR 0 3
54171: PUSH
54172: LD_VAR 0 1
54176: ARRAY
54177: PPUSH
54178: LD_VAR 0 1
54182: PUSH
54183: LD_INT 4
54185: MOD
54186: PUSH
54187: LD_INT 1
54189: PLUS
54190: PPUSH
54191: CALL_OW 259
54195: PUSH
54196: LD_INT 10
54198: LESS
54199: IFFALSE 54262
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54201: LD_VAR 0 3
54205: PUSH
54206: LD_VAR 0 1
54210: ARRAY
54211: PPUSH
54212: LD_VAR 0 1
54216: PUSH
54217: LD_INT 4
54219: MOD
54220: PUSH
54221: LD_INT 1
54223: PLUS
54224: PPUSH
54225: LD_VAR 0 3
54229: PUSH
54230: LD_VAR 0 1
54234: ARRAY
54235: PPUSH
54236: LD_VAR 0 1
54240: PUSH
54241: LD_INT 4
54243: MOD
54244: PUSH
54245: LD_INT 1
54247: PLUS
54248: PPUSH
54249: CALL_OW 259
54253: PUSH
54254: LD_INT 1
54256: PLUS
54257: PPUSH
54258: CALL_OW 237
54262: GO 54164
54264: POP
54265: POP
// end ;
54266: PPOPN 3
54268: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54269: LD_EXP 28
54273: PUSH
54274: LD_EXP 36
54278: AND
54279: IFFALSE 54299
54281: GO 54283
54283: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54284: LD_INT 4
54286: PPUSH
54287: LD_OWVAR 2
54291: PPUSH
54292: LD_INT 0
54294: PPUSH
54295: CALL_OW 324
54299: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54300: LD_EXP 28
54304: PUSH
54305: LD_EXP 65
54309: AND
54310: IFFALSE 54330
54312: GO 54314
54314: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54315: LD_INT 19
54317: PPUSH
54318: LD_OWVAR 2
54322: PPUSH
54323: LD_INT 0
54325: PPUSH
54326: CALL_OW 324
54330: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54331: LD_EXP 28
54335: PUSH
54336: LD_EXP 37
54340: AND
54341: IFFALSE 54443
54343: GO 54345
54345: DISABLE
54346: LD_INT 0
54348: PPUSH
54349: PPUSH
// begin enable ;
54350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54351: LD_ADDR_VAR 0 2
54355: PUSH
54356: LD_INT 22
54358: PUSH
54359: LD_OWVAR 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 34
54373: PUSH
54374: LD_INT 11
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 34
54383: PUSH
54384: LD_INT 30
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PPUSH
54400: CALL_OW 69
54404: ST_TO_ADDR
// if not tmp then
54405: LD_VAR 0 2
54409: NOT
54410: IFFALSE 54414
// exit ;
54412: GO 54443
// for i in tmp do
54414: LD_ADDR_VAR 0 1
54418: PUSH
54419: LD_VAR 0 2
54423: PUSH
54424: FOR_IN
54425: IFFALSE 54441
// begin SetLives ( i , 0 ) ;
54427: LD_VAR 0 1
54431: PPUSH
54432: LD_INT 0
54434: PPUSH
54435: CALL_OW 234
// end ;
54439: GO 54424
54441: POP
54442: POP
// end ;
54443: PPOPN 2
54445: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54446: LD_EXP 28
54450: PUSH
54451: LD_EXP 38
54455: AND
54456: IFFALSE 54476
54458: GO 54460
54460: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54461: LD_INT 32
54463: PPUSH
54464: LD_OWVAR 2
54468: PPUSH
54469: LD_INT 0
54471: PPUSH
54472: CALL_OW 324
54476: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54477: LD_EXP 28
54481: PUSH
54482: LD_EXP 39
54486: AND
54487: IFFALSE 54668
54489: GO 54491
54491: DISABLE
54492: LD_INT 0
54494: PPUSH
54495: PPUSH
54496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54497: LD_ADDR_VAR 0 2
54501: PUSH
54502: LD_INT 22
54504: PUSH
54505: LD_OWVAR 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 33
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PPUSH
54528: CALL_OW 69
54532: ST_TO_ADDR
// if not tmp then
54533: LD_VAR 0 2
54537: NOT
54538: IFFALSE 54542
// exit ;
54540: GO 54668
// side := 0 ;
54542: LD_ADDR_VAR 0 3
54546: PUSH
54547: LD_INT 0
54549: ST_TO_ADDR
// for i := 1 to 8 do
54550: LD_ADDR_VAR 0 1
54554: PUSH
54555: DOUBLE
54556: LD_INT 1
54558: DEC
54559: ST_TO_ADDR
54560: LD_INT 8
54562: PUSH
54563: FOR_TO
54564: IFFALSE 54612
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54566: LD_OWVAR 2
54570: PUSH
54571: LD_VAR 0 1
54575: NONEQUAL
54576: PUSH
54577: LD_OWVAR 2
54581: PPUSH
54582: LD_VAR 0 1
54586: PPUSH
54587: CALL_OW 81
54591: PUSH
54592: LD_INT 2
54594: EQUAL
54595: AND
54596: IFFALSE 54610
// begin side := i ;
54598: LD_ADDR_VAR 0 3
54602: PUSH
54603: LD_VAR 0 1
54607: ST_TO_ADDR
// break ;
54608: GO 54612
// end ;
54610: GO 54563
54612: POP
54613: POP
// if not side then
54614: LD_VAR 0 3
54618: NOT
54619: IFFALSE 54623
// exit ;
54621: GO 54668
// for i := 1 to tmp do
54623: LD_ADDR_VAR 0 1
54627: PUSH
54628: DOUBLE
54629: LD_INT 1
54631: DEC
54632: ST_TO_ADDR
54633: LD_VAR 0 2
54637: PUSH
54638: FOR_TO
54639: IFFALSE 54666
// if Prob ( 60 ) then
54641: LD_INT 60
54643: PPUSH
54644: CALL_OW 13
54648: IFFALSE 54664
// SetSide ( i , side ) ;
54650: LD_VAR 0 1
54654: PPUSH
54655: LD_VAR 0 3
54659: PPUSH
54660: CALL_OW 235
54664: GO 54638
54666: POP
54667: POP
// end ;
54668: PPOPN 3
54670: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54671: LD_EXP 28
54675: PUSH
54676: LD_EXP 41
54680: AND
54681: IFFALSE 54800
54683: GO 54685
54685: DISABLE
54686: LD_INT 0
54688: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54689: LD_ADDR_VAR 0 1
54693: PUSH
54694: LD_INT 22
54696: PUSH
54697: LD_OWVAR 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 21
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: LD_INT 23
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: PPUSH
54738: CALL_OW 69
54742: PUSH
54743: FOR_IN
54744: IFFALSE 54798
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54746: LD_VAR 0 1
54750: PPUSH
54751: CALL_OW 257
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: IN
54774: IFFALSE 54796
// SetClass ( un , rand ( 1 , 4 ) ) ;
54776: LD_VAR 0 1
54780: PPUSH
54781: LD_INT 1
54783: PPUSH
54784: LD_INT 4
54786: PPUSH
54787: CALL_OW 12
54791: PPUSH
54792: CALL_OW 336
54796: GO 54743
54798: POP
54799: POP
// end ;
54800: PPOPN 1
54802: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54803: LD_EXP 28
54807: PUSH
54808: LD_EXP 40
54812: AND
54813: IFFALSE 54892
54815: GO 54817
54817: DISABLE
54818: LD_INT 0
54820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54821: LD_ADDR_VAR 0 1
54825: PUSH
54826: LD_INT 22
54828: PUSH
54829: LD_OWVAR 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 21
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PPUSH
54852: CALL_OW 69
54856: ST_TO_ADDR
// if not tmp then
54857: LD_VAR 0 1
54861: NOT
54862: IFFALSE 54866
// exit ;
54864: GO 54892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54866: LD_VAR 0 1
54870: PUSH
54871: LD_INT 1
54873: PPUSH
54874: LD_VAR 0 1
54878: PPUSH
54879: CALL_OW 12
54883: ARRAY
54884: PPUSH
54885: LD_INT 100
54887: PPUSH
54888: CALL_OW 234
// end ;
54892: PPOPN 1
54894: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54895: LD_EXP 28
54899: PUSH
54900: LD_EXP 42
54904: AND
54905: IFFALSE 55003
54907: GO 54909
54909: DISABLE
54910: LD_INT 0
54912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54913: LD_ADDR_VAR 0 1
54917: PUSH
54918: LD_INT 22
54920: PUSH
54921: LD_OWVAR 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 21
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PPUSH
54944: CALL_OW 69
54948: ST_TO_ADDR
// if not tmp then
54949: LD_VAR 0 1
54953: NOT
54954: IFFALSE 54958
// exit ;
54956: GO 55003
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54958: LD_VAR 0 1
54962: PUSH
54963: LD_INT 1
54965: PPUSH
54966: LD_VAR 0 1
54970: PPUSH
54971: CALL_OW 12
54975: ARRAY
54976: PPUSH
54977: LD_INT 1
54979: PPUSH
54980: LD_INT 4
54982: PPUSH
54983: CALL_OW 12
54987: PPUSH
54988: LD_INT 3000
54990: PPUSH
54991: LD_INT 9000
54993: PPUSH
54994: CALL_OW 12
54998: PPUSH
54999: CALL_OW 492
// end ;
55003: PPOPN 1
55005: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55006: LD_EXP 28
55010: PUSH
55011: LD_EXP 43
55015: AND
55016: IFFALSE 55036
55018: GO 55020
55020: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55021: LD_INT 1
55023: PPUSH
55024: LD_OWVAR 2
55028: PPUSH
55029: LD_INT 0
55031: PPUSH
55032: CALL_OW 324
55036: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55037: LD_EXP 28
55041: PUSH
55042: LD_EXP 44
55046: AND
55047: IFFALSE 55130
55049: GO 55051
55051: DISABLE
55052: LD_INT 0
55054: PPUSH
55055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55056: LD_ADDR_VAR 0 2
55060: PUSH
55061: LD_INT 22
55063: PUSH
55064: LD_OWVAR 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 21
55075: PUSH
55076: LD_INT 3
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PPUSH
55087: CALL_OW 69
55091: ST_TO_ADDR
// if not tmp then
55092: LD_VAR 0 2
55096: NOT
55097: IFFALSE 55101
// exit ;
55099: GO 55130
// for i in tmp do
55101: LD_ADDR_VAR 0 1
55105: PUSH
55106: LD_VAR 0 2
55110: PUSH
55111: FOR_IN
55112: IFFALSE 55128
// SetBLevel ( i , 10 ) ;
55114: LD_VAR 0 1
55118: PPUSH
55119: LD_INT 10
55121: PPUSH
55122: CALL_OW 241
55126: GO 55111
55128: POP
55129: POP
// end ;
55130: PPOPN 2
55132: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55133: LD_EXP 28
55137: PUSH
55138: LD_EXP 45
55142: AND
55143: IFFALSE 55254
55145: GO 55147
55147: DISABLE
55148: LD_INT 0
55150: PPUSH
55151: PPUSH
55152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55153: LD_ADDR_VAR 0 3
55157: PUSH
55158: LD_INT 22
55160: PUSH
55161: LD_OWVAR 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 25
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PPUSH
55184: CALL_OW 69
55188: ST_TO_ADDR
// if not tmp then
55189: LD_VAR 0 3
55193: NOT
55194: IFFALSE 55198
// exit ;
55196: GO 55254
// un := tmp [ rand ( 1 , tmp ) ] ;
55198: LD_ADDR_VAR 0 2
55202: PUSH
55203: LD_VAR 0 3
55207: PUSH
55208: LD_INT 1
55210: PPUSH
55211: LD_VAR 0 3
55215: PPUSH
55216: CALL_OW 12
55220: ARRAY
55221: ST_TO_ADDR
// if Crawls ( un ) then
55222: LD_VAR 0 2
55226: PPUSH
55227: CALL_OW 318
55231: IFFALSE 55242
// ComWalk ( un ) ;
55233: LD_VAR 0 2
55237: PPUSH
55238: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55242: LD_VAR 0 2
55246: PPUSH
55247: LD_INT 5
55249: PPUSH
55250: CALL_OW 336
// end ;
55254: PPOPN 3
55256: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55257: LD_EXP 28
55261: PUSH
55262: LD_EXP 46
55266: AND
55267: PUSH
55268: LD_OWVAR 67
55272: PUSH
55273: LD_INT 4
55275: LESS
55276: AND
55277: IFFALSE 55296
55279: GO 55281
55281: DISABLE
// begin Difficulty := Difficulty + 1 ;
55282: LD_ADDR_OWVAR 67
55286: PUSH
55287: LD_OWVAR 67
55291: PUSH
55292: LD_INT 1
55294: PLUS
55295: ST_TO_ADDR
// end ;
55296: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55297: LD_EXP 28
55301: PUSH
55302: LD_EXP 47
55306: AND
55307: IFFALSE 55410
55309: GO 55311
55311: DISABLE
55312: LD_INT 0
55314: PPUSH
// begin for i := 1 to 5 do
55315: LD_ADDR_VAR 0 1
55319: PUSH
55320: DOUBLE
55321: LD_INT 1
55323: DEC
55324: ST_TO_ADDR
55325: LD_INT 5
55327: PUSH
55328: FOR_TO
55329: IFFALSE 55408
// begin uc_nation := nation_nature ;
55331: LD_ADDR_OWVAR 21
55335: PUSH
55336: LD_INT 0
55338: ST_TO_ADDR
// uc_side := 0 ;
55339: LD_ADDR_OWVAR 20
55343: PUSH
55344: LD_INT 0
55346: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55347: LD_ADDR_OWVAR 29
55351: PUSH
55352: LD_INT 12
55354: PUSH
55355: LD_INT 12
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// hc_agressivity := 20 ;
55362: LD_ADDR_OWVAR 35
55366: PUSH
55367: LD_INT 20
55369: ST_TO_ADDR
// hc_class := class_tiger ;
55370: LD_ADDR_OWVAR 28
55374: PUSH
55375: LD_INT 14
55377: ST_TO_ADDR
// hc_gallery :=  ;
55378: LD_ADDR_OWVAR 33
55382: PUSH
55383: LD_STRING 
55385: ST_TO_ADDR
// hc_name :=  ;
55386: LD_ADDR_OWVAR 26
55390: PUSH
55391: LD_STRING 
55393: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55394: CALL_OW 44
55398: PPUSH
55399: LD_INT 0
55401: PPUSH
55402: CALL_OW 51
// end ;
55406: GO 55328
55408: POP
55409: POP
// end ;
55410: PPOPN 1
55412: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55413: LD_EXP 28
55417: PUSH
55418: LD_EXP 48
55422: AND
55423: IFFALSE 55432
55425: GO 55427
55427: DISABLE
// StreamSibBomb ;
55428: CALL 55433 0 0
55432: END
// export function StreamSibBomb ; var i , x , y ; begin
55433: LD_INT 0
55435: PPUSH
55436: PPUSH
55437: PPUSH
55438: PPUSH
// result := false ;
55439: LD_ADDR_VAR 0 1
55443: PUSH
55444: LD_INT 0
55446: ST_TO_ADDR
// for i := 1 to 16 do
55447: LD_ADDR_VAR 0 2
55451: PUSH
55452: DOUBLE
55453: LD_INT 1
55455: DEC
55456: ST_TO_ADDR
55457: LD_INT 16
55459: PUSH
55460: FOR_TO
55461: IFFALSE 55660
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55463: LD_ADDR_VAR 0 3
55467: PUSH
55468: LD_INT 10
55470: PUSH
55471: LD_INT 20
55473: PUSH
55474: LD_INT 30
55476: PUSH
55477: LD_INT 40
55479: PUSH
55480: LD_INT 50
55482: PUSH
55483: LD_INT 60
55485: PUSH
55486: LD_INT 70
55488: PUSH
55489: LD_INT 80
55491: PUSH
55492: LD_INT 90
55494: PUSH
55495: LD_INT 100
55497: PUSH
55498: LD_INT 110
55500: PUSH
55501: LD_INT 120
55503: PUSH
55504: LD_INT 130
55506: PUSH
55507: LD_INT 140
55509: PUSH
55510: LD_INT 150
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PPUSH
55533: LD_INT 15
55535: PPUSH
55536: CALL_OW 12
55540: ARRAY
55541: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55542: LD_ADDR_VAR 0 4
55546: PUSH
55547: LD_INT 10
55549: PUSH
55550: LD_INT 20
55552: PUSH
55553: LD_INT 30
55555: PUSH
55556: LD_INT 40
55558: PUSH
55559: LD_INT 50
55561: PUSH
55562: LD_INT 60
55564: PUSH
55565: LD_INT 70
55567: PUSH
55568: LD_INT 80
55570: PUSH
55571: LD_INT 90
55573: PUSH
55574: LD_INT 100
55576: PUSH
55577: LD_INT 110
55579: PUSH
55580: LD_INT 120
55582: PUSH
55583: LD_INT 130
55585: PUSH
55586: LD_INT 140
55588: PUSH
55589: LD_INT 150
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PPUSH
55612: LD_INT 15
55614: PPUSH
55615: CALL_OW 12
55619: ARRAY
55620: ST_TO_ADDR
// if ValidHex ( x , y ) then
55621: LD_VAR 0 3
55625: PPUSH
55626: LD_VAR 0 4
55630: PPUSH
55631: CALL_OW 488
55635: IFFALSE 55658
// begin result := [ x , y ] ;
55637: LD_ADDR_VAR 0 1
55641: PUSH
55642: LD_VAR 0 3
55646: PUSH
55647: LD_VAR 0 4
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: ST_TO_ADDR
// break ;
55656: GO 55660
// end ; end ;
55658: GO 55460
55660: POP
55661: POP
// if result then
55662: LD_VAR 0 1
55666: IFFALSE 55726
// begin ToLua ( playSibBomb() ) ;
55668: LD_STRING playSibBomb()
55670: PPUSH
55671: CALL_OW 559
// wait ( 0 0$14 ) ;
55675: LD_INT 490
55677: PPUSH
55678: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55682: LD_VAR 0 1
55686: PUSH
55687: LD_INT 1
55689: ARRAY
55690: PPUSH
55691: LD_VAR 0 1
55695: PUSH
55696: LD_INT 2
55698: ARRAY
55699: PPUSH
55700: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55704: LD_VAR 0 1
55708: PUSH
55709: LD_INT 1
55711: ARRAY
55712: PPUSH
55713: LD_VAR 0 1
55717: PUSH
55718: LD_INT 2
55720: ARRAY
55721: PPUSH
55722: CALL_OW 429
// end ; end ;
55726: LD_VAR 0 1
55730: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55731: LD_EXP 28
55735: PUSH
55736: LD_EXP 50
55740: AND
55741: IFFALSE 55753
55743: GO 55745
55745: DISABLE
// YouLost (  ) ;
55746: LD_STRING 
55748: PPUSH
55749: CALL_OW 104
55753: END
// every 0 0$1 trigger StreamModeActive and sFog do
55754: LD_EXP 28
55758: PUSH
55759: LD_EXP 49
55763: AND
55764: IFFALSE 55778
55766: GO 55768
55768: DISABLE
// FogOff ( your_side ) ;
55769: LD_OWVAR 2
55773: PPUSH
55774: CALL_OW 344
55778: END
// every 0 0$1 trigger StreamModeActive and sSun do
55779: LD_EXP 28
55783: PUSH
55784: LD_EXP 51
55788: AND
55789: IFFALSE 55817
55791: GO 55793
55793: DISABLE
// begin solar_recharge_percent := 0 ;
55794: LD_ADDR_OWVAR 79
55798: PUSH
55799: LD_INT 0
55801: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55802: LD_INT 10500
55804: PPUSH
55805: CALL_OW 67
// solar_recharge_percent := 100 ;
55809: LD_ADDR_OWVAR 79
55813: PUSH
55814: LD_INT 100
55816: ST_TO_ADDR
// end ;
55817: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55818: LD_EXP 28
55822: PUSH
55823: LD_EXP 52
55827: AND
55828: IFFALSE 56067
55830: GO 55832
55832: DISABLE
55833: LD_INT 0
55835: PPUSH
55836: PPUSH
55837: PPUSH
// begin tmp := [ ] ;
55838: LD_ADDR_VAR 0 3
55842: PUSH
55843: EMPTY
55844: ST_TO_ADDR
// for i := 1 to 6 do
55845: LD_ADDR_VAR 0 1
55849: PUSH
55850: DOUBLE
55851: LD_INT 1
55853: DEC
55854: ST_TO_ADDR
55855: LD_INT 6
55857: PUSH
55858: FOR_TO
55859: IFFALSE 55964
// begin uc_nation := nation_nature ;
55861: LD_ADDR_OWVAR 21
55865: PUSH
55866: LD_INT 0
55868: ST_TO_ADDR
// uc_side := 0 ;
55869: LD_ADDR_OWVAR 20
55873: PUSH
55874: LD_INT 0
55876: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55877: LD_ADDR_OWVAR 29
55881: PUSH
55882: LD_INT 12
55884: PUSH
55885: LD_INT 12
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: ST_TO_ADDR
// hc_agressivity := 20 ;
55892: LD_ADDR_OWVAR 35
55896: PUSH
55897: LD_INT 20
55899: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55900: LD_ADDR_OWVAR 28
55904: PUSH
55905: LD_INT 17
55907: ST_TO_ADDR
// hc_gallery :=  ;
55908: LD_ADDR_OWVAR 33
55912: PUSH
55913: LD_STRING 
55915: ST_TO_ADDR
// hc_name :=  ;
55916: LD_ADDR_OWVAR 26
55920: PUSH
55921: LD_STRING 
55923: ST_TO_ADDR
// un := CreateHuman ;
55924: LD_ADDR_VAR 0 2
55928: PUSH
55929: CALL_OW 44
55933: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55934: LD_VAR 0 2
55938: PPUSH
55939: LD_INT 1
55941: PPUSH
55942: CALL_OW 51
// tmp := tmp ^ un ;
55946: LD_ADDR_VAR 0 3
55950: PUSH
55951: LD_VAR 0 3
55955: PUSH
55956: LD_VAR 0 2
55960: ADD
55961: ST_TO_ADDR
// end ;
55962: GO 55858
55964: POP
55965: POP
// repeat wait ( 0 0$1 ) ;
55966: LD_INT 35
55968: PPUSH
55969: CALL_OW 67
// for un in tmp do
55973: LD_ADDR_VAR 0 2
55977: PUSH
55978: LD_VAR 0 3
55982: PUSH
55983: FOR_IN
55984: IFFALSE 56058
// begin if IsDead ( un ) then
55986: LD_VAR 0 2
55990: PPUSH
55991: CALL_OW 301
55995: IFFALSE 56015
// begin tmp := tmp diff un ;
55997: LD_ADDR_VAR 0 3
56001: PUSH
56002: LD_VAR 0 3
56006: PUSH
56007: LD_VAR 0 2
56011: DIFF
56012: ST_TO_ADDR
// continue ;
56013: GO 55983
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56015: LD_VAR 0 2
56019: PPUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 22
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PPUSH
56037: CALL_OW 69
56041: PPUSH
56042: LD_VAR 0 2
56046: PPUSH
56047: CALL_OW 74
56051: PPUSH
56052: CALL_OW 115
// end ;
56056: GO 55983
56058: POP
56059: POP
// until not tmp ;
56060: LD_VAR 0 3
56064: NOT
56065: IFFALSE 55966
// end ;
56067: PPOPN 3
56069: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56070: LD_EXP 28
56074: PUSH
56075: LD_EXP 53
56079: AND
56080: IFFALSE 56134
56082: GO 56084
56084: DISABLE
// begin ToLua ( displayTroll(); ) ;
56085: LD_STRING displayTroll();
56087: PPUSH
56088: CALL_OW 559
// wait ( 3 3$00 ) ;
56092: LD_INT 6300
56094: PPUSH
56095: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56099: LD_STRING hideTroll();
56101: PPUSH
56102: CALL_OW 559
// wait ( 1 1$00 ) ;
56106: LD_INT 2100
56108: PPUSH
56109: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56113: LD_STRING displayTroll();
56115: PPUSH
56116: CALL_OW 559
// wait ( 1 1$00 ) ;
56120: LD_INT 2100
56122: PPUSH
56123: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56127: LD_STRING hideTroll();
56129: PPUSH
56130: CALL_OW 559
// end ;
56134: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56135: LD_EXP 28
56139: PUSH
56140: LD_EXP 54
56144: AND
56145: IFFALSE 56208
56147: GO 56149
56149: DISABLE
56150: LD_INT 0
56152: PPUSH
// begin p := 0 ;
56153: LD_ADDR_VAR 0 1
56157: PUSH
56158: LD_INT 0
56160: ST_TO_ADDR
// repeat game_speed := 1 ;
56161: LD_ADDR_OWVAR 65
56165: PUSH
56166: LD_INT 1
56168: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56169: LD_INT 35
56171: PPUSH
56172: CALL_OW 67
// p := p + 1 ;
56176: LD_ADDR_VAR 0 1
56180: PUSH
56181: LD_VAR 0 1
56185: PUSH
56186: LD_INT 1
56188: PLUS
56189: ST_TO_ADDR
// until p >= 60 ;
56190: LD_VAR 0 1
56194: PUSH
56195: LD_INT 60
56197: GREATEREQUAL
56198: IFFALSE 56161
// game_speed := 4 ;
56200: LD_ADDR_OWVAR 65
56204: PUSH
56205: LD_INT 4
56207: ST_TO_ADDR
// end ;
56208: PPOPN 1
56210: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56211: LD_EXP 28
56215: PUSH
56216: LD_EXP 55
56220: AND
56221: IFFALSE 56367
56223: GO 56225
56225: DISABLE
56226: LD_INT 0
56228: PPUSH
56229: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56230: LD_ADDR_VAR 0 1
56234: PUSH
56235: LD_INT 22
56237: PUSH
56238: LD_OWVAR 2
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 30
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 30
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PPUSH
56279: CALL_OW 69
56283: ST_TO_ADDR
// if not depot then
56284: LD_VAR 0 1
56288: NOT
56289: IFFALSE 56293
// exit ;
56291: GO 56367
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56293: LD_ADDR_VAR 0 2
56297: PUSH
56298: LD_VAR 0 1
56302: PUSH
56303: LD_INT 1
56305: PPUSH
56306: LD_VAR 0 1
56310: PPUSH
56311: CALL_OW 12
56315: ARRAY
56316: PPUSH
56317: CALL_OW 274
56321: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56322: LD_VAR 0 2
56326: PPUSH
56327: LD_INT 1
56329: PPUSH
56330: LD_INT 0
56332: PPUSH
56333: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56337: LD_VAR 0 2
56341: PPUSH
56342: LD_INT 2
56344: PPUSH
56345: LD_INT 0
56347: PPUSH
56348: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56352: LD_VAR 0 2
56356: PPUSH
56357: LD_INT 3
56359: PPUSH
56360: LD_INT 0
56362: PPUSH
56363: CALL_OW 277
// end ;
56367: PPOPN 2
56369: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56370: LD_EXP 28
56374: PUSH
56375: LD_EXP 56
56379: AND
56380: IFFALSE 56477
56382: GO 56384
56384: DISABLE
56385: LD_INT 0
56387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56388: LD_ADDR_VAR 0 1
56392: PUSH
56393: LD_INT 22
56395: PUSH
56396: LD_OWVAR 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 21
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: LD_INT 23
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: PPUSH
56437: CALL_OW 69
56441: ST_TO_ADDR
// if not tmp then
56442: LD_VAR 0 1
56446: NOT
56447: IFFALSE 56451
// exit ;
56449: GO 56477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56451: LD_VAR 0 1
56455: PUSH
56456: LD_INT 1
56458: PPUSH
56459: LD_VAR 0 1
56463: PPUSH
56464: CALL_OW 12
56468: ARRAY
56469: PPUSH
56470: LD_INT 200
56472: PPUSH
56473: CALL_OW 234
// end ;
56477: PPOPN 1
56479: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56480: LD_EXP 28
56484: PUSH
56485: LD_EXP 57
56489: AND
56490: IFFALSE 56569
56492: GO 56494
56494: DISABLE
56495: LD_INT 0
56497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56498: LD_ADDR_VAR 0 1
56502: PUSH
56503: LD_INT 22
56505: PUSH
56506: LD_OWVAR 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 21
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PPUSH
56529: CALL_OW 69
56533: ST_TO_ADDR
// if not tmp then
56534: LD_VAR 0 1
56538: NOT
56539: IFFALSE 56543
// exit ;
56541: GO 56569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56543: LD_VAR 0 1
56547: PUSH
56548: LD_INT 1
56550: PPUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: CALL_OW 12
56560: ARRAY
56561: PPUSH
56562: LD_INT 60
56564: PPUSH
56565: CALL_OW 234
// end ;
56569: PPOPN 1
56571: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56572: LD_EXP 28
56576: PUSH
56577: LD_EXP 58
56581: AND
56582: IFFALSE 56681
56584: GO 56586
56586: DISABLE
56587: LD_INT 0
56589: PPUSH
56590: PPUSH
// begin enable ;
56591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56592: LD_ADDR_VAR 0 1
56596: PUSH
56597: LD_INT 22
56599: PUSH
56600: LD_OWVAR 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 61
56611: PUSH
56612: EMPTY
56613: LIST
56614: PUSH
56615: LD_INT 33
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 69
56634: ST_TO_ADDR
// if not tmp then
56635: LD_VAR 0 1
56639: NOT
56640: IFFALSE 56644
// exit ;
56642: GO 56681
// for i in tmp do
56644: LD_ADDR_VAR 0 2
56648: PUSH
56649: LD_VAR 0 1
56653: PUSH
56654: FOR_IN
56655: IFFALSE 56679
// if IsControledBy ( i ) then
56657: LD_VAR 0 2
56661: PPUSH
56662: CALL_OW 312
56666: IFFALSE 56677
// ComUnlink ( i ) ;
56668: LD_VAR 0 2
56672: PPUSH
56673: CALL_OW 136
56677: GO 56654
56679: POP
56680: POP
// end ;
56681: PPOPN 2
56683: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56684: LD_EXP 28
56688: PUSH
56689: LD_EXP 59
56693: AND
56694: IFFALSE 56834
56696: GO 56698
56698: DISABLE
56699: LD_INT 0
56701: PPUSH
56702: PPUSH
// begin ToLua ( displayPowell(); ) ;
56703: LD_STRING displayPowell();
56705: PPUSH
56706: CALL_OW 559
// uc_side := 0 ;
56710: LD_ADDR_OWVAR 20
56714: PUSH
56715: LD_INT 0
56717: ST_TO_ADDR
// uc_nation := 2 ;
56718: LD_ADDR_OWVAR 21
56722: PUSH
56723: LD_INT 2
56725: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56726: LD_ADDR_OWVAR 37
56730: PUSH
56731: LD_INT 14
56733: ST_TO_ADDR
// vc_engine := engine_siberite ;
56734: LD_ADDR_OWVAR 39
56738: PUSH
56739: LD_INT 3
56741: ST_TO_ADDR
// vc_control := control_apeman ;
56742: LD_ADDR_OWVAR 38
56746: PUSH
56747: LD_INT 5
56749: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56750: LD_ADDR_OWVAR 40
56754: PUSH
56755: LD_INT 29
56757: ST_TO_ADDR
// un := CreateVehicle ;
56758: LD_ADDR_VAR 0 2
56762: PUSH
56763: CALL_OW 45
56767: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56768: LD_VAR 0 2
56772: PPUSH
56773: LD_INT 1
56775: PPUSH
56776: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56780: LD_INT 35
56782: PPUSH
56783: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56787: LD_VAR 0 2
56791: PPUSH
56792: LD_INT 22
56794: PUSH
56795: LD_OWVAR 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PPUSH
56804: CALL_OW 69
56808: PPUSH
56809: LD_VAR 0 2
56813: PPUSH
56814: CALL_OW 74
56818: PPUSH
56819: CALL_OW 115
// until IsDead ( un ) ;
56823: LD_VAR 0 2
56827: PPUSH
56828: CALL_OW 301
56832: IFFALSE 56780
// end ;
56834: PPOPN 2
56836: END
// every 0 0$1 trigger StreamModeActive and sStu do
56837: LD_EXP 28
56841: PUSH
56842: LD_EXP 67
56846: AND
56847: IFFALSE 56863
56849: GO 56851
56851: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56852: LD_STRING displayStucuk();
56854: PPUSH
56855: CALL_OW 559
// ResetFog ;
56859: CALL_OW 335
// end ;
56863: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56864: LD_EXP 28
56868: PUSH
56869: LD_EXP 60
56873: AND
56874: IFFALSE 57015
56876: GO 56878
56878: DISABLE
56879: LD_INT 0
56881: PPUSH
56882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56883: LD_ADDR_VAR 0 2
56887: PUSH
56888: LD_INT 22
56890: PUSH
56891: LD_OWVAR 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 21
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PPUSH
56914: CALL_OW 69
56918: ST_TO_ADDR
// if not tmp then
56919: LD_VAR 0 2
56923: NOT
56924: IFFALSE 56928
// exit ;
56926: GO 57015
// un := tmp [ rand ( 1 , tmp ) ] ;
56928: LD_ADDR_VAR 0 1
56932: PUSH
56933: LD_VAR 0 2
56937: PUSH
56938: LD_INT 1
56940: PPUSH
56941: LD_VAR 0 2
56945: PPUSH
56946: CALL_OW 12
56950: ARRAY
56951: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56952: LD_VAR 0 1
56956: PPUSH
56957: LD_INT 0
56959: PPUSH
56960: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56964: LD_VAR 0 1
56968: PPUSH
56969: LD_OWVAR 3
56973: PUSH
56974: LD_VAR 0 1
56978: DIFF
56979: PPUSH
56980: LD_VAR 0 1
56984: PPUSH
56985: CALL_OW 74
56989: PPUSH
56990: CALL_OW 115
// wait ( 0 0$20 ) ;
56994: LD_INT 700
56996: PPUSH
56997: CALL_OW 67
// SetSide ( un , your_side ) ;
57001: LD_VAR 0 1
57005: PPUSH
57006: LD_OWVAR 2
57010: PPUSH
57011: CALL_OW 235
// end ;
57015: PPOPN 2
57017: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57018: LD_EXP 28
57022: PUSH
57023: LD_EXP 61
57027: AND
57028: IFFALSE 57134
57030: GO 57032
57032: DISABLE
57033: LD_INT 0
57035: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57036: LD_ADDR_VAR 0 1
57040: PUSH
57041: LD_INT 22
57043: PUSH
57044: LD_OWVAR 2
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 30
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 30
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PPUSH
57085: CALL_OW 69
57089: ST_TO_ADDR
// if not depot then
57090: LD_VAR 0 1
57094: NOT
57095: IFFALSE 57099
// exit ;
57097: GO 57134
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57099: LD_VAR 0 1
57103: PUSH
57104: LD_INT 1
57106: ARRAY
57107: PPUSH
57108: CALL_OW 250
57112: PPUSH
57113: LD_VAR 0 1
57117: PUSH
57118: LD_INT 1
57120: ARRAY
57121: PPUSH
57122: CALL_OW 251
57126: PPUSH
57127: LD_INT 70
57129: PPUSH
57130: CALL_OW 495
// end ;
57134: PPOPN 1
57136: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57137: LD_EXP 28
57141: PUSH
57142: LD_EXP 62
57146: AND
57147: IFFALSE 57358
57149: GO 57151
57151: DISABLE
57152: LD_INT 0
57154: PPUSH
57155: PPUSH
57156: PPUSH
57157: PPUSH
57158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57159: LD_ADDR_VAR 0 5
57163: PUSH
57164: LD_INT 22
57166: PUSH
57167: LD_OWVAR 2
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 21
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PPUSH
57190: CALL_OW 69
57194: ST_TO_ADDR
// if not tmp then
57195: LD_VAR 0 5
57199: NOT
57200: IFFALSE 57204
// exit ;
57202: GO 57358
// for i in tmp do
57204: LD_ADDR_VAR 0 1
57208: PUSH
57209: LD_VAR 0 5
57213: PUSH
57214: FOR_IN
57215: IFFALSE 57356
// begin d := rand ( 0 , 5 ) ;
57217: LD_ADDR_VAR 0 4
57221: PUSH
57222: LD_INT 0
57224: PPUSH
57225: LD_INT 5
57227: PPUSH
57228: CALL_OW 12
57232: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57233: LD_ADDR_VAR 0 2
57237: PUSH
57238: LD_VAR 0 1
57242: PPUSH
57243: CALL_OW 250
57247: PPUSH
57248: LD_VAR 0 4
57252: PPUSH
57253: LD_INT 3
57255: PPUSH
57256: LD_INT 12
57258: PPUSH
57259: CALL_OW 12
57263: PPUSH
57264: CALL_OW 272
57268: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57269: LD_ADDR_VAR 0 3
57273: PUSH
57274: LD_VAR 0 1
57278: PPUSH
57279: CALL_OW 251
57283: PPUSH
57284: LD_VAR 0 4
57288: PPUSH
57289: LD_INT 3
57291: PPUSH
57292: LD_INT 12
57294: PPUSH
57295: CALL_OW 12
57299: PPUSH
57300: CALL_OW 273
57304: ST_TO_ADDR
// if ValidHex ( x , y ) then
57305: LD_VAR 0 2
57309: PPUSH
57310: LD_VAR 0 3
57314: PPUSH
57315: CALL_OW 488
57319: IFFALSE 57354
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57321: LD_VAR 0 1
57325: PPUSH
57326: LD_VAR 0 2
57330: PPUSH
57331: LD_VAR 0 3
57335: PPUSH
57336: LD_INT 3
57338: PPUSH
57339: LD_INT 6
57341: PPUSH
57342: CALL_OW 12
57346: PPUSH
57347: LD_INT 1
57349: PPUSH
57350: CALL_OW 483
// end ;
57354: GO 57214
57356: POP
57357: POP
// end ;
57358: PPOPN 5
57360: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57361: LD_EXP 28
57365: PUSH
57366: LD_EXP 63
57370: AND
57371: IFFALSE 57465
57373: GO 57375
57375: DISABLE
57376: LD_INT 0
57378: PPUSH
57379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57380: LD_ADDR_VAR 0 2
57384: PUSH
57385: LD_INT 22
57387: PUSH
57388: LD_OWVAR 2
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 32
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 21
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: PPUSH
57422: CALL_OW 69
57426: ST_TO_ADDR
// if not tmp then
57427: LD_VAR 0 2
57431: NOT
57432: IFFALSE 57436
// exit ;
57434: GO 57465
// for i in tmp do
57436: LD_ADDR_VAR 0 1
57440: PUSH
57441: LD_VAR 0 2
57445: PUSH
57446: FOR_IN
57447: IFFALSE 57463
// SetFuel ( i , 0 ) ;
57449: LD_VAR 0 1
57453: PPUSH
57454: LD_INT 0
57456: PPUSH
57457: CALL_OW 240
57461: GO 57446
57463: POP
57464: POP
// end ;
57465: PPOPN 2
57467: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57468: LD_EXP 28
57472: PUSH
57473: LD_EXP 64
57477: AND
57478: IFFALSE 57544
57480: GO 57482
57482: DISABLE
57483: LD_INT 0
57485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57486: LD_ADDR_VAR 0 1
57490: PUSH
57491: LD_INT 22
57493: PUSH
57494: LD_OWVAR 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 30
57505: PUSH
57506: LD_INT 29
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PPUSH
57517: CALL_OW 69
57521: ST_TO_ADDR
// if not tmp then
57522: LD_VAR 0 1
57526: NOT
57527: IFFALSE 57531
// exit ;
57529: GO 57544
// DestroyUnit ( tmp [ 1 ] ) ;
57531: LD_VAR 0 1
57535: PUSH
57536: LD_INT 1
57538: ARRAY
57539: PPUSH
57540: CALL_OW 65
// end ;
57544: PPOPN 1
57546: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57547: LD_EXP 28
57551: PUSH
57552: LD_EXP 66
57556: AND
57557: IFFALSE 57686
57559: GO 57561
57561: DISABLE
57562: LD_INT 0
57564: PPUSH
// begin uc_side := 0 ;
57565: LD_ADDR_OWVAR 20
57569: PUSH
57570: LD_INT 0
57572: ST_TO_ADDR
// uc_nation := nation_arabian ;
57573: LD_ADDR_OWVAR 21
57577: PUSH
57578: LD_INT 2
57580: ST_TO_ADDR
// hc_gallery :=  ;
57581: LD_ADDR_OWVAR 33
57585: PUSH
57586: LD_STRING 
57588: ST_TO_ADDR
// hc_name :=  ;
57589: LD_ADDR_OWVAR 26
57593: PUSH
57594: LD_STRING 
57596: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57597: LD_INT 1
57599: PPUSH
57600: LD_INT 11
57602: PPUSH
57603: LD_INT 10
57605: PPUSH
57606: CALL_OW 380
// un := CreateHuman ;
57610: LD_ADDR_VAR 0 1
57614: PUSH
57615: CALL_OW 44
57619: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57620: LD_VAR 0 1
57624: PPUSH
57625: LD_INT 1
57627: PPUSH
57628: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57632: LD_INT 35
57634: PPUSH
57635: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57639: LD_VAR 0 1
57643: PPUSH
57644: LD_INT 22
57646: PUSH
57647: LD_OWVAR 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PPUSH
57656: CALL_OW 69
57660: PPUSH
57661: LD_VAR 0 1
57665: PPUSH
57666: CALL_OW 74
57670: PPUSH
57671: CALL_OW 115
// until IsDead ( un ) ;
57675: LD_VAR 0 1
57679: PPUSH
57680: CALL_OW 301
57684: IFFALSE 57632
// end ;
57686: PPOPN 1
57688: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57689: LD_EXP 28
57693: PUSH
57694: LD_EXP 68
57698: AND
57699: IFFALSE 57711
57701: GO 57703
57703: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57704: LD_STRING earthquake(getX(game), 0, 32)
57706: PPUSH
57707: CALL_OW 559
57711: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57712: LD_EXP 28
57716: PUSH
57717: LD_EXP 69
57721: AND
57722: IFFALSE 57813
57724: GO 57726
57726: DISABLE
57727: LD_INT 0
57729: PPUSH
// begin enable ;
57730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57731: LD_ADDR_VAR 0 1
57735: PUSH
57736: LD_INT 22
57738: PUSH
57739: LD_OWVAR 2
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 21
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 33
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: LIST
57772: PPUSH
57773: CALL_OW 69
57777: ST_TO_ADDR
// if not tmp then
57778: LD_VAR 0 1
57782: NOT
57783: IFFALSE 57787
// exit ;
57785: GO 57813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57787: LD_VAR 0 1
57791: PUSH
57792: LD_INT 1
57794: PPUSH
57795: LD_VAR 0 1
57799: PPUSH
57800: CALL_OW 12
57804: ARRAY
57805: PPUSH
57806: LD_INT 1
57808: PPUSH
57809: CALL_OW 234
// end ;
57813: PPOPN 1
57815: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57816: LD_EXP 28
57820: PUSH
57821: LD_EXP 70
57825: AND
57826: IFFALSE 57967
57828: GO 57830
57830: DISABLE
57831: LD_INT 0
57833: PPUSH
57834: PPUSH
57835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57836: LD_ADDR_VAR 0 3
57840: PUSH
57841: LD_INT 22
57843: PUSH
57844: LD_OWVAR 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 25
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PPUSH
57867: CALL_OW 69
57871: ST_TO_ADDR
// if not tmp then
57872: LD_VAR 0 3
57876: NOT
57877: IFFALSE 57881
// exit ;
57879: GO 57967
// un := tmp [ rand ( 1 , tmp ) ] ;
57881: LD_ADDR_VAR 0 2
57885: PUSH
57886: LD_VAR 0 3
57890: PUSH
57891: LD_INT 1
57893: PPUSH
57894: LD_VAR 0 3
57898: PPUSH
57899: CALL_OW 12
57903: ARRAY
57904: ST_TO_ADDR
// if Crawls ( un ) then
57905: LD_VAR 0 2
57909: PPUSH
57910: CALL_OW 318
57914: IFFALSE 57925
// ComWalk ( un ) ;
57916: LD_VAR 0 2
57920: PPUSH
57921: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57925: LD_VAR 0 2
57929: PPUSH
57930: LD_INT 9
57932: PPUSH
57933: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57937: LD_INT 28
57939: PPUSH
57940: LD_OWVAR 2
57944: PPUSH
57945: LD_INT 2
57947: PPUSH
57948: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57952: LD_INT 29
57954: PPUSH
57955: LD_OWVAR 2
57959: PPUSH
57960: LD_INT 2
57962: PPUSH
57963: CALL_OW 322
// end ;
57967: PPOPN 3
57969: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57970: LD_EXP 28
57974: PUSH
57975: LD_EXP 71
57979: AND
57980: IFFALSE 58091
57982: GO 57984
57984: DISABLE
57985: LD_INT 0
57987: PPUSH
57988: PPUSH
57989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57990: LD_ADDR_VAR 0 3
57994: PUSH
57995: LD_INT 22
57997: PUSH
57998: LD_OWVAR 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 25
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PPUSH
58021: CALL_OW 69
58025: ST_TO_ADDR
// if not tmp then
58026: LD_VAR 0 3
58030: NOT
58031: IFFALSE 58035
// exit ;
58033: GO 58091
// un := tmp [ rand ( 1 , tmp ) ] ;
58035: LD_ADDR_VAR 0 2
58039: PUSH
58040: LD_VAR 0 3
58044: PUSH
58045: LD_INT 1
58047: PPUSH
58048: LD_VAR 0 3
58052: PPUSH
58053: CALL_OW 12
58057: ARRAY
58058: ST_TO_ADDR
// if Crawls ( un ) then
58059: LD_VAR 0 2
58063: PPUSH
58064: CALL_OW 318
58068: IFFALSE 58079
// ComWalk ( un ) ;
58070: LD_VAR 0 2
58074: PPUSH
58075: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58079: LD_VAR 0 2
58083: PPUSH
58084: LD_INT 8
58086: PPUSH
58087: CALL_OW 336
// end ;
58091: PPOPN 3
58093: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58094: LD_EXP 28
58098: PUSH
58099: LD_EXP 72
58103: AND
58104: IFFALSE 58248
58106: GO 58108
58108: DISABLE
58109: LD_INT 0
58111: PPUSH
58112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58113: LD_ADDR_VAR 0 2
58117: PUSH
58118: LD_INT 22
58120: PUSH
58121: LD_OWVAR 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 21
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 34
58145: PUSH
58146: LD_INT 12
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 34
58155: PUSH
58156: LD_INT 51
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 34
58165: PUSH
58166: LD_INT 32
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: PPUSH
58184: CALL_OW 69
58188: ST_TO_ADDR
// if not tmp then
58189: LD_VAR 0 2
58193: NOT
58194: IFFALSE 58198
// exit ;
58196: GO 58248
// for i in tmp do
58198: LD_ADDR_VAR 0 1
58202: PUSH
58203: LD_VAR 0 2
58207: PUSH
58208: FOR_IN
58209: IFFALSE 58246
// if GetCargo ( i , mat_artifact ) = 0 then
58211: LD_VAR 0 1
58215: PPUSH
58216: LD_INT 4
58218: PPUSH
58219: CALL_OW 289
58223: PUSH
58224: LD_INT 0
58226: EQUAL
58227: IFFALSE 58244
// SetCargo ( i , mat_siberit , 100 ) ;
58229: LD_VAR 0 1
58233: PPUSH
58234: LD_INT 3
58236: PPUSH
58237: LD_INT 100
58239: PPUSH
58240: CALL_OW 290
58244: GO 58208
58246: POP
58247: POP
// end ;
58248: PPOPN 2
58250: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58251: LD_EXP 28
58255: PUSH
58256: LD_EXP 73
58260: AND
58261: IFFALSE 58444
58263: GO 58265
58265: DISABLE
58266: LD_INT 0
58268: PPUSH
58269: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58270: LD_ADDR_VAR 0 2
58274: PUSH
58275: LD_INT 22
58277: PUSH
58278: LD_OWVAR 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PPUSH
58287: CALL_OW 69
58291: ST_TO_ADDR
// if not tmp then
58292: LD_VAR 0 2
58296: NOT
58297: IFFALSE 58301
// exit ;
58299: GO 58444
// for i := 1 to 2 do
58301: LD_ADDR_VAR 0 1
58305: PUSH
58306: DOUBLE
58307: LD_INT 1
58309: DEC
58310: ST_TO_ADDR
58311: LD_INT 2
58313: PUSH
58314: FOR_TO
58315: IFFALSE 58442
// begin uc_side := your_side ;
58317: LD_ADDR_OWVAR 20
58321: PUSH
58322: LD_OWVAR 2
58326: ST_TO_ADDR
// uc_nation := nation_american ;
58327: LD_ADDR_OWVAR 21
58331: PUSH
58332: LD_INT 1
58334: ST_TO_ADDR
// vc_chassis := us_morphling ;
58335: LD_ADDR_OWVAR 37
58339: PUSH
58340: LD_INT 5
58342: ST_TO_ADDR
// vc_engine := engine_siberite ;
58343: LD_ADDR_OWVAR 39
58347: PUSH
58348: LD_INT 3
58350: ST_TO_ADDR
// vc_control := control_computer ;
58351: LD_ADDR_OWVAR 38
58355: PUSH
58356: LD_INT 3
58358: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58359: LD_ADDR_OWVAR 40
58363: PUSH
58364: LD_INT 10
58366: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58367: LD_VAR 0 2
58371: PUSH
58372: LD_INT 1
58374: ARRAY
58375: PPUSH
58376: CALL_OW 310
58380: NOT
58381: IFFALSE 58428
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58383: CALL_OW 45
58387: PPUSH
58388: LD_VAR 0 2
58392: PUSH
58393: LD_INT 1
58395: ARRAY
58396: PPUSH
58397: CALL_OW 250
58401: PPUSH
58402: LD_VAR 0 2
58406: PUSH
58407: LD_INT 1
58409: ARRAY
58410: PPUSH
58411: CALL_OW 251
58415: PPUSH
58416: LD_INT 12
58418: PPUSH
58419: LD_INT 1
58421: PPUSH
58422: CALL_OW 50
58426: GO 58440
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58428: CALL_OW 45
58432: PPUSH
58433: LD_INT 1
58435: PPUSH
58436: CALL_OW 51
// end ;
58440: GO 58314
58442: POP
58443: POP
// end ;
58444: PPOPN 2
58446: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58447: LD_EXP 28
58451: PUSH
58452: LD_EXP 74
58456: AND
58457: IFFALSE 58679
58459: GO 58461
58461: DISABLE
58462: LD_INT 0
58464: PPUSH
58465: PPUSH
58466: PPUSH
58467: PPUSH
58468: PPUSH
58469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58470: LD_ADDR_VAR 0 6
58474: PUSH
58475: LD_INT 22
58477: PUSH
58478: LD_OWVAR 2
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 21
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: LD_INT 23
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: PPUSH
58519: CALL_OW 69
58523: ST_TO_ADDR
// if not tmp then
58524: LD_VAR 0 6
58528: NOT
58529: IFFALSE 58533
// exit ;
58531: GO 58679
// s1 := rand ( 1 , 4 ) ;
58533: LD_ADDR_VAR 0 2
58537: PUSH
58538: LD_INT 1
58540: PPUSH
58541: LD_INT 4
58543: PPUSH
58544: CALL_OW 12
58548: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58549: LD_ADDR_VAR 0 4
58553: PUSH
58554: LD_VAR 0 6
58558: PUSH
58559: LD_INT 1
58561: ARRAY
58562: PPUSH
58563: LD_VAR 0 2
58567: PPUSH
58568: CALL_OW 259
58572: ST_TO_ADDR
// if s1 = 1 then
58573: LD_VAR 0 2
58577: PUSH
58578: LD_INT 1
58580: EQUAL
58581: IFFALSE 58601
// s2 := rand ( 2 , 4 ) else
58583: LD_ADDR_VAR 0 3
58587: PUSH
58588: LD_INT 2
58590: PPUSH
58591: LD_INT 4
58593: PPUSH
58594: CALL_OW 12
58598: ST_TO_ADDR
58599: GO 58609
// s2 := 1 ;
58601: LD_ADDR_VAR 0 3
58605: PUSH
58606: LD_INT 1
58608: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58609: LD_ADDR_VAR 0 5
58613: PUSH
58614: LD_VAR 0 6
58618: PUSH
58619: LD_INT 1
58621: ARRAY
58622: PPUSH
58623: LD_VAR 0 3
58627: PPUSH
58628: CALL_OW 259
58632: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58633: LD_VAR 0 6
58637: PUSH
58638: LD_INT 1
58640: ARRAY
58641: PPUSH
58642: LD_VAR 0 2
58646: PPUSH
58647: LD_VAR 0 5
58651: PPUSH
58652: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58656: LD_VAR 0 6
58660: PUSH
58661: LD_INT 1
58663: ARRAY
58664: PPUSH
58665: LD_VAR 0 3
58669: PPUSH
58670: LD_VAR 0 4
58674: PPUSH
58675: CALL_OW 237
// end ;
58679: PPOPN 6
58681: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58682: LD_EXP 28
58686: PUSH
58687: LD_EXP 75
58691: AND
58692: IFFALSE 58771
58694: GO 58696
58696: DISABLE
58697: LD_INT 0
58699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58700: LD_ADDR_VAR 0 1
58704: PUSH
58705: LD_INT 22
58707: PUSH
58708: LD_OWVAR 2
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 30
58719: PUSH
58720: LD_INT 3
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PPUSH
58731: CALL_OW 69
58735: ST_TO_ADDR
// if not tmp then
58736: LD_VAR 0 1
58740: NOT
58741: IFFALSE 58745
// exit ;
58743: GO 58771
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58745: LD_VAR 0 1
58749: PUSH
58750: LD_INT 1
58752: PPUSH
58753: LD_VAR 0 1
58757: PPUSH
58758: CALL_OW 12
58762: ARRAY
58763: PPUSH
58764: LD_INT 1
58766: PPUSH
58767: CALL_OW 234
// end ;
58771: PPOPN 1
58773: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58774: LD_EXP 28
58778: PUSH
58779: LD_EXP 76
58783: AND
58784: IFFALSE 58896
58786: GO 58788
58788: DISABLE
58789: LD_INT 0
58791: PPUSH
58792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58793: LD_ADDR_VAR 0 2
58797: PUSH
58798: LD_INT 22
58800: PUSH
58801: LD_OWVAR 2
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 30
58815: PUSH
58816: LD_INT 27
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 30
58825: PUSH
58826: LD_INT 26
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 30
58835: PUSH
58836: LD_INT 28
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PPUSH
58853: CALL_OW 69
58857: ST_TO_ADDR
// if not tmp then
58858: LD_VAR 0 2
58862: NOT
58863: IFFALSE 58867
// exit ;
58865: GO 58896
// for i in tmp do
58867: LD_ADDR_VAR 0 1
58871: PUSH
58872: LD_VAR 0 2
58876: PUSH
58877: FOR_IN
58878: IFFALSE 58894
// SetLives ( i , 1 ) ;
58880: LD_VAR 0 1
58884: PPUSH
58885: LD_INT 1
58887: PPUSH
58888: CALL_OW 234
58892: GO 58877
58894: POP
58895: POP
// end ;
58896: PPOPN 2
58898: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58899: LD_EXP 28
58903: PUSH
58904: LD_EXP 77
58908: AND
58909: IFFALSE 59196
58911: GO 58913
58913: DISABLE
58914: LD_INT 0
58916: PPUSH
58917: PPUSH
58918: PPUSH
// begin i := rand ( 1 , 7 ) ;
58919: LD_ADDR_VAR 0 1
58923: PUSH
58924: LD_INT 1
58926: PPUSH
58927: LD_INT 7
58929: PPUSH
58930: CALL_OW 12
58934: ST_TO_ADDR
// case i of 1 :
58935: LD_VAR 0 1
58939: PUSH
58940: LD_INT 1
58942: DOUBLE
58943: EQUAL
58944: IFTRUE 58948
58946: GO 58958
58948: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58949: LD_STRING earthquake(getX(game), 0, 32)
58951: PPUSH
58952: CALL_OW 559
58956: GO 59196
58958: LD_INT 2
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 58966
58964: GO 58980
58966: POP
// begin ToLua ( displayStucuk(); ) ;
58967: LD_STRING displayStucuk();
58969: PPUSH
58970: CALL_OW 559
// ResetFog ;
58974: CALL_OW 335
// end ; 3 :
58978: GO 59196
58980: LD_INT 3
58982: DOUBLE
58983: EQUAL
58984: IFTRUE 58988
58986: GO 59092
58988: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58989: LD_ADDR_VAR 0 2
58993: PUSH
58994: LD_INT 22
58996: PUSH
58997: LD_OWVAR 2
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 25
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PPUSH
59020: CALL_OW 69
59024: ST_TO_ADDR
// if not tmp then
59025: LD_VAR 0 2
59029: NOT
59030: IFFALSE 59034
// exit ;
59032: GO 59196
// un := tmp [ rand ( 1 , tmp ) ] ;
59034: LD_ADDR_VAR 0 3
59038: PUSH
59039: LD_VAR 0 2
59043: PUSH
59044: LD_INT 1
59046: PPUSH
59047: LD_VAR 0 2
59051: PPUSH
59052: CALL_OW 12
59056: ARRAY
59057: ST_TO_ADDR
// if Crawls ( un ) then
59058: LD_VAR 0 3
59062: PPUSH
59063: CALL_OW 318
59067: IFFALSE 59078
// ComWalk ( un ) ;
59069: LD_VAR 0 3
59073: PPUSH
59074: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59078: LD_VAR 0 3
59082: PPUSH
59083: LD_INT 8
59085: PPUSH
59086: CALL_OW 336
// end ; 4 :
59090: GO 59196
59092: LD_INT 4
59094: DOUBLE
59095: EQUAL
59096: IFTRUE 59100
59098: GO 59174
59100: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59101: LD_ADDR_VAR 0 2
59105: PUSH
59106: LD_INT 22
59108: PUSH
59109: LD_OWVAR 2
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 30
59120: PUSH
59121: LD_INT 29
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PPUSH
59132: CALL_OW 69
59136: ST_TO_ADDR
// if not tmp then
59137: LD_VAR 0 2
59141: NOT
59142: IFFALSE 59146
// exit ;
59144: GO 59196
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59146: LD_VAR 0 2
59150: PUSH
59151: LD_INT 1
59153: ARRAY
59154: PPUSH
59155: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59159: LD_VAR 0 2
59163: PUSH
59164: LD_INT 1
59166: ARRAY
59167: PPUSH
59168: CALL_OW 65
// end ; 5 .. 7 :
59172: GO 59196
59174: LD_INT 5
59176: DOUBLE
59177: GREATEREQUAL
59178: IFFALSE 59186
59180: LD_INT 7
59182: DOUBLE
59183: LESSEQUAL
59184: IFTRUE 59188
59186: GO 59195
59188: POP
// StreamSibBomb ; end ;
59189: CALL 55433 0 0
59193: GO 59196
59195: POP
// end ;
59196: PPOPN 3
59198: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59199: LD_EXP 28
59203: PUSH
59204: LD_EXP 78
59208: AND
59209: IFFALSE 59365
59211: GO 59213
59213: DISABLE
59214: LD_INT 0
59216: PPUSH
59217: PPUSH
59218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59219: LD_ADDR_VAR 0 2
59223: PUSH
59224: LD_INT 81
59226: PUSH
59227: LD_OWVAR 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 21
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 21
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PPUSH
59268: CALL_OW 69
59272: ST_TO_ADDR
// if not tmp then
59273: LD_VAR 0 2
59277: NOT
59278: IFFALSE 59282
// exit ;
59280: GO 59365
// p := 0 ;
59282: LD_ADDR_VAR 0 3
59286: PUSH
59287: LD_INT 0
59289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59290: LD_INT 35
59292: PPUSH
59293: CALL_OW 67
// p := p + 1 ;
59297: LD_ADDR_VAR 0 3
59301: PUSH
59302: LD_VAR 0 3
59306: PUSH
59307: LD_INT 1
59309: PLUS
59310: ST_TO_ADDR
// for i in tmp do
59311: LD_ADDR_VAR 0 1
59315: PUSH
59316: LD_VAR 0 2
59320: PUSH
59321: FOR_IN
59322: IFFALSE 59353
// if GetLives ( i ) < 1000 then
59324: LD_VAR 0 1
59328: PPUSH
59329: CALL_OW 256
59333: PUSH
59334: LD_INT 1000
59336: LESS
59337: IFFALSE 59351
// SetLives ( i , 1000 ) ;
59339: LD_VAR 0 1
59343: PPUSH
59344: LD_INT 1000
59346: PPUSH
59347: CALL_OW 234
59351: GO 59321
59353: POP
59354: POP
// until p > 20 ;
59355: LD_VAR 0 3
59359: PUSH
59360: LD_INT 20
59362: GREATER
59363: IFFALSE 59290
// end ;
59365: PPOPN 3
59367: END
// every 0 0$1 trigger StreamModeActive and sTime do
59368: LD_EXP 28
59372: PUSH
59373: LD_EXP 79
59377: AND
59378: IFFALSE 59413
59380: GO 59382
59382: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59383: LD_INT 28
59385: PPUSH
59386: LD_OWVAR 2
59390: PPUSH
59391: LD_INT 2
59393: PPUSH
59394: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59398: LD_INT 30
59400: PPUSH
59401: LD_OWVAR 2
59405: PPUSH
59406: LD_INT 2
59408: PPUSH
59409: CALL_OW 322
// end ;
59413: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59414: LD_EXP 28
59418: PUSH
59419: LD_EXP 80
59423: AND
59424: IFFALSE 59545
59426: GO 59428
59428: DISABLE
59429: LD_INT 0
59431: PPUSH
59432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59433: LD_ADDR_VAR 0 2
59437: PUSH
59438: LD_INT 22
59440: PUSH
59441: LD_OWVAR 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 21
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 3
59462: PUSH
59463: LD_INT 23
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: LIST
59481: PPUSH
59482: CALL_OW 69
59486: ST_TO_ADDR
// if not tmp then
59487: LD_VAR 0 2
59491: NOT
59492: IFFALSE 59496
// exit ;
59494: GO 59545
// for i in tmp do
59496: LD_ADDR_VAR 0 1
59500: PUSH
59501: LD_VAR 0 2
59505: PUSH
59506: FOR_IN
59507: IFFALSE 59543
// begin if Crawls ( i ) then
59509: LD_VAR 0 1
59513: PPUSH
59514: CALL_OW 318
59518: IFFALSE 59529
// ComWalk ( i ) ;
59520: LD_VAR 0 1
59524: PPUSH
59525: CALL_OW 138
// SetClass ( i , 2 ) ;
59529: LD_VAR 0 1
59533: PPUSH
59534: LD_INT 2
59536: PPUSH
59537: CALL_OW 336
// end ;
59541: GO 59506
59543: POP
59544: POP
// end ;
59545: PPOPN 2
59547: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59548: LD_EXP 28
59552: PUSH
59553: LD_EXP 81
59557: AND
59558: IFFALSE 59846
59560: GO 59562
59562: DISABLE
59563: LD_INT 0
59565: PPUSH
59566: PPUSH
59567: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59568: LD_OWVAR 2
59572: PPUSH
59573: LD_INT 9
59575: PPUSH
59576: LD_INT 1
59578: PPUSH
59579: LD_INT 1
59581: PPUSH
59582: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59586: LD_INT 9
59588: PPUSH
59589: LD_OWVAR 2
59593: PPUSH
59594: CALL_OW 343
// uc_side := 9 ;
59598: LD_ADDR_OWVAR 20
59602: PUSH
59603: LD_INT 9
59605: ST_TO_ADDR
// uc_nation := 2 ;
59606: LD_ADDR_OWVAR 21
59610: PUSH
59611: LD_INT 2
59613: ST_TO_ADDR
// hc_name := Dark Warrior ;
59614: LD_ADDR_OWVAR 26
59618: PUSH
59619: LD_STRING Dark Warrior
59621: ST_TO_ADDR
// hc_gallery :=  ;
59622: LD_ADDR_OWVAR 33
59626: PUSH
59627: LD_STRING 
59629: ST_TO_ADDR
// hc_noskilllimit := true ;
59630: LD_ADDR_OWVAR 76
59634: PUSH
59635: LD_INT 1
59637: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59638: LD_ADDR_OWVAR 31
59642: PUSH
59643: LD_INT 30
59645: PUSH
59646: LD_INT 30
59648: PUSH
59649: LD_INT 30
59651: PUSH
59652: LD_INT 30
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// un := CreateHuman ;
59661: LD_ADDR_VAR 0 3
59665: PUSH
59666: CALL_OW 44
59670: ST_TO_ADDR
// hc_noskilllimit := false ;
59671: LD_ADDR_OWVAR 76
59675: PUSH
59676: LD_INT 0
59678: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59679: LD_VAR 0 3
59683: PPUSH
59684: LD_INT 1
59686: PPUSH
59687: CALL_OW 51
// ToLua ( playRanger() ) ;
59691: LD_STRING playRanger()
59693: PPUSH
59694: CALL_OW 559
// p := 0 ;
59698: LD_ADDR_VAR 0 2
59702: PUSH
59703: LD_INT 0
59705: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59706: LD_INT 35
59708: PPUSH
59709: CALL_OW 67
// p := p + 1 ;
59713: LD_ADDR_VAR 0 2
59717: PUSH
59718: LD_VAR 0 2
59722: PUSH
59723: LD_INT 1
59725: PLUS
59726: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59727: LD_VAR 0 3
59731: PPUSH
59732: CALL_OW 256
59736: PUSH
59737: LD_INT 1000
59739: LESS
59740: IFFALSE 59754
// SetLives ( un , 1000 ) ;
59742: LD_VAR 0 3
59746: PPUSH
59747: LD_INT 1000
59749: PPUSH
59750: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59754: LD_VAR 0 3
59758: PPUSH
59759: LD_INT 81
59761: PUSH
59762: LD_OWVAR 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 91
59773: PUSH
59774: LD_VAR 0 3
59778: PUSH
59779: LD_INT 30
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PPUSH
59791: CALL_OW 69
59795: PPUSH
59796: LD_VAR 0 3
59800: PPUSH
59801: CALL_OW 74
59805: PPUSH
59806: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59810: LD_VAR 0 2
59814: PUSH
59815: LD_INT 80
59817: GREATER
59818: PUSH
59819: LD_VAR 0 3
59823: PPUSH
59824: CALL_OW 301
59828: OR
59829: IFFALSE 59706
// if un then
59831: LD_VAR 0 3
59835: IFFALSE 59846
// RemoveUnit ( un ) ;
59837: LD_VAR 0 3
59841: PPUSH
59842: CALL_OW 64
// end ;
59846: PPOPN 3
59848: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59849: LD_EXP 82
59853: IFFALSE 59969
59855: GO 59857
59857: DISABLE
59858: LD_INT 0
59860: PPUSH
59861: PPUSH
59862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59863: LD_ADDR_VAR 0 2
59867: PUSH
59868: LD_INT 81
59870: PUSH
59871: LD_OWVAR 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 21
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PPUSH
59894: CALL_OW 69
59898: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59899: LD_STRING playComputer()
59901: PPUSH
59902: CALL_OW 559
// if not tmp then
59906: LD_VAR 0 2
59910: NOT
59911: IFFALSE 59915
// exit ;
59913: GO 59969
// for i in tmp do
59915: LD_ADDR_VAR 0 1
59919: PUSH
59920: LD_VAR 0 2
59924: PUSH
59925: FOR_IN
59926: IFFALSE 59967
// for j := 1 to 4 do
59928: LD_ADDR_VAR 0 3
59932: PUSH
59933: DOUBLE
59934: LD_INT 1
59936: DEC
59937: ST_TO_ADDR
59938: LD_INT 4
59940: PUSH
59941: FOR_TO
59942: IFFALSE 59963
// SetSkill ( i , j , 10 ) ;
59944: LD_VAR 0 1
59948: PPUSH
59949: LD_VAR 0 3
59953: PPUSH
59954: LD_INT 10
59956: PPUSH
59957: CALL_OW 237
59961: GO 59941
59963: POP
59964: POP
59965: GO 59925
59967: POP
59968: POP
// end ;
59969: PPOPN 3
59971: END
// every 0 0$1 trigger s30 do var i , tmp ;
59972: LD_EXP 83
59976: IFFALSE 60045
59978: GO 59980
59980: DISABLE
59981: LD_INT 0
59983: PPUSH
59984: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59985: LD_ADDR_VAR 0 2
59989: PUSH
59990: LD_INT 22
59992: PUSH
59993: LD_OWVAR 2
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PPUSH
60002: CALL_OW 69
60006: ST_TO_ADDR
// if not tmp then
60007: LD_VAR 0 2
60011: NOT
60012: IFFALSE 60016
// exit ;
60014: GO 60045
// for i in tmp do
60016: LD_ADDR_VAR 0 1
60020: PUSH
60021: LD_VAR 0 2
60025: PUSH
60026: FOR_IN
60027: IFFALSE 60043
// SetLives ( i , 300 ) ;
60029: LD_VAR 0 1
60033: PPUSH
60034: LD_INT 300
60036: PPUSH
60037: CALL_OW 234
60041: GO 60026
60043: POP
60044: POP
// end ;
60045: PPOPN 2
60047: END
// every 0 0$1 trigger s60 do var i , tmp ;
60048: LD_EXP 84
60052: IFFALSE 60121
60054: GO 60056
60056: DISABLE
60057: LD_INT 0
60059: PPUSH
60060: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60061: LD_ADDR_VAR 0 2
60065: PUSH
60066: LD_INT 22
60068: PUSH
60069: LD_OWVAR 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PPUSH
60078: CALL_OW 69
60082: ST_TO_ADDR
// if not tmp then
60083: LD_VAR 0 2
60087: NOT
60088: IFFALSE 60092
// exit ;
60090: GO 60121
// for i in tmp do
60092: LD_ADDR_VAR 0 1
60096: PUSH
60097: LD_VAR 0 2
60101: PUSH
60102: FOR_IN
60103: IFFALSE 60119
// SetLives ( i , 600 ) ;
60105: LD_VAR 0 1
60109: PPUSH
60110: LD_INT 600
60112: PPUSH
60113: CALL_OW 234
60117: GO 60102
60119: POP
60120: POP
// end ;
60121: PPOPN 2
60123: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60124: LD_INT 0
60126: PPUSH
// case cmd of 301 :
60127: LD_VAR 0 1
60131: PUSH
60132: LD_INT 301
60134: DOUBLE
60135: EQUAL
60136: IFTRUE 60140
60138: GO 60172
60140: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60141: LD_VAR 0 6
60145: PPUSH
60146: LD_VAR 0 7
60150: PPUSH
60151: LD_VAR 0 8
60155: PPUSH
60156: LD_VAR 0 4
60160: PPUSH
60161: LD_VAR 0 5
60165: PPUSH
60166: CALL 61381 0 5
60170: GO 60293
60172: LD_INT 302
60174: DOUBLE
60175: EQUAL
60176: IFTRUE 60180
60178: GO 60217
60180: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60181: LD_VAR 0 6
60185: PPUSH
60186: LD_VAR 0 7
60190: PPUSH
60191: LD_VAR 0 8
60195: PPUSH
60196: LD_VAR 0 9
60200: PPUSH
60201: LD_VAR 0 4
60205: PPUSH
60206: LD_VAR 0 5
60210: PPUSH
60211: CALL 61472 0 6
60215: GO 60293
60217: LD_INT 303
60219: DOUBLE
60220: EQUAL
60221: IFTRUE 60225
60223: GO 60262
60225: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60226: LD_VAR 0 6
60230: PPUSH
60231: LD_VAR 0 7
60235: PPUSH
60236: LD_VAR 0 8
60240: PPUSH
60241: LD_VAR 0 9
60245: PPUSH
60246: LD_VAR 0 4
60250: PPUSH
60251: LD_VAR 0 5
60255: PPUSH
60256: CALL 60298 0 6
60260: GO 60293
60262: LD_INT 304
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60270
60268: GO 60292
60270: POP
// hHackTeleport ( unit , x , y ) ; end ;
60271: LD_VAR 0 2
60275: PPUSH
60276: LD_VAR 0 4
60280: PPUSH
60281: LD_VAR 0 5
60285: PPUSH
60286: CALL 62065 0 3
60290: GO 60293
60292: POP
// end ;
60293: LD_VAR 0 12
60297: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60298: LD_INT 0
60300: PPUSH
60301: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60302: LD_VAR 0 1
60306: PUSH
60307: LD_INT 1
60309: LESS
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_INT 3
60318: GREATER
60319: OR
60320: PUSH
60321: LD_VAR 0 5
60325: PPUSH
60326: LD_VAR 0 6
60330: PPUSH
60331: CALL_OW 428
60335: OR
60336: IFFALSE 60340
// exit ;
60338: GO 61068
// uc_side := your_side ;
60340: LD_ADDR_OWVAR 20
60344: PUSH
60345: LD_OWVAR 2
60349: ST_TO_ADDR
// uc_nation := nation ;
60350: LD_ADDR_OWVAR 21
60354: PUSH
60355: LD_VAR 0 1
60359: ST_TO_ADDR
// bc_level = 1 ;
60360: LD_ADDR_OWVAR 43
60364: PUSH
60365: LD_INT 1
60367: ST_TO_ADDR
// case btype of 1 :
60368: LD_VAR 0 2
60372: PUSH
60373: LD_INT 1
60375: DOUBLE
60376: EQUAL
60377: IFTRUE 60381
60379: GO 60392
60381: POP
// bc_type := b_depot ; 2 :
60382: LD_ADDR_OWVAR 42
60386: PUSH
60387: LD_INT 0
60389: ST_TO_ADDR
60390: GO 61012
60392: LD_INT 2
60394: DOUBLE
60395: EQUAL
60396: IFTRUE 60400
60398: GO 60411
60400: POP
// bc_type := b_warehouse ; 3 :
60401: LD_ADDR_OWVAR 42
60405: PUSH
60406: LD_INT 1
60408: ST_TO_ADDR
60409: GO 61012
60411: LD_INT 3
60413: DOUBLE
60414: EQUAL
60415: IFTRUE 60419
60417: GO 60430
60419: POP
// bc_type := b_lab ; 4 .. 9 :
60420: LD_ADDR_OWVAR 42
60424: PUSH
60425: LD_INT 6
60427: ST_TO_ADDR
60428: GO 61012
60430: LD_INT 4
60432: DOUBLE
60433: GREATEREQUAL
60434: IFFALSE 60442
60436: LD_INT 9
60438: DOUBLE
60439: LESSEQUAL
60440: IFTRUE 60444
60442: GO 60504
60444: POP
// begin bc_type := b_lab_half ;
60445: LD_ADDR_OWVAR 42
60449: PUSH
60450: LD_INT 7
60452: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60453: LD_ADDR_OWVAR 44
60457: PUSH
60458: LD_INT 10
60460: PUSH
60461: LD_INT 11
60463: PUSH
60464: LD_INT 12
60466: PUSH
60467: LD_INT 15
60469: PUSH
60470: LD_INT 14
60472: PUSH
60473: LD_INT 13
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: PUSH
60484: LD_VAR 0 2
60488: PUSH
60489: LD_INT 3
60491: MINUS
60492: ARRAY
60493: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60494: LD_ADDR_OWVAR 45
60498: PUSH
60499: LD_INT 9
60501: ST_TO_ADDR
// end ; 10 .. 13 :
60502: GO 61012
60504: LD_INT 10
60506: DOUBLE
60507: GREATEREQUAL
60508: IFFALSE 60516
60510: LD_INT 13
60512: DOUBLE
60513: LESSEQUAL
60514: IFTRUE 60518
60516: GO 60595
60518: POP
// begin bc_type := b_lab_full ;
60519: LD_ADDR_OWVAR 42
60523: PUSH
60524: LD_INT 8
60526: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60527: LD_ADDR_OWVAR 44
60531: PUSH
60532: LD_INT 10
60534: PUSH
60535: LD_INT 12
60537: PUSH
60538: LD_INT 14
60540: PUSH
60541: LD_INT 13
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: PUSH
60550: LD_VAR 0 2
60554: PUSH
60555: LD_INT 9
60557: MINUS
60558: ARRAY
60559: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60560: LD_ADDR_OWVAR 45
60564: PUSH
60565: LD_INT 11
60567: PUSH
60568: LD_INT 15
60570: PUSH
60571: LD_INT 12
60573: PUSH
60574: LD_INT 15
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: PUSH
60583: LD_VAR 0 2
60587: PUSH
60588: LD_INT 9
60590: MINUS
60591: ARRAY
60592: ST_TO_ADDR
// end ; 14 :
60593: GO 61012
60595: LD_INT 14
60597: DOUBLE
60598: EQUAL
60599: IFTRUE 60603
60601: GO 60614
60603: POP
// bc_type := b_workshop ; 15 :
60604: LD_ADDR_OWVAR 42
60608: PUSH
60609: LD_INT 2
60611: ST_TO_ADDR
60612: GO 61012
60614: LD_INT 15
60616: DOUBLE
60617: EQUAL
60618: IFTRUE 60622
60620: GO 60633
60622: POP
// bc_type := b_factory ; 16 :
60623: LD_ADDR_OWVAR 42
60627: PUSH
60628: LD_INT 3
60630: ST_TO_ADDR
60631: GO 61012
60633: LD_INT 16
60635: DOUBLE
60636: EQUAL
60637: IFTRUE 60641
60639: GO 60652
60641: POP
// bc_type := b_ext_gun ; 17 :
60642: LD_ADDR_OWVAR 42
60646: PUSH
60647: LD_INT 17
60649: ST_TO_ADDR
60650: GO 61012
60652: LD_INT 17
60654: DOUBLE
60655: EQUAL
60656: IFTRUE 60660
60658: GO 60688
60660: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60661: LD_ADDR_OWVAR 42
60665: PUSH
60666: LD_INT 19
60668: PUSH
60669: LD_INT 23
60671: PUSH
60672: LD_INT 19
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: PUSH
60680: LD_VAR 0 1
60684: ARRAY
60685: ST_TO_ADDR
60686: GO 61012
60688: LD_INT 18
60690: DOUBLE
60691: EQUAL
60692: IFTRUE 60696
60694: GO 60707
60696: POP
// bc_type := b_ext_radar ; 19 :
60697: LD_ADDR_OWVAR 42
60701: PUSH
60702: LD_INT 20
60704: ST_TO_ADDR
60705: GO 61012
60707: LD_INT 19
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60715
60713: GO 60726
60715: POP
// bc_type := b_ext_radio ; 20 :
60716: LD_ADDR_OWVAR 42
60720: PUSH
60721: LD_INT 22
60723: ST_TO_ADDR
60724: GO 61012
60726: LD_INT 20
60728: DOUBLE
60729: EQUAL
60730: IFTRUE 60734
60732: GO 60745
60734: POP
// bc_type := b_ext_siberium ; 21 :
60735: LD_ADDR_OWVAR 42
60739: PUSH
60740: LD_INT 21
60742: ST_TO_ADDR
60743: GO 61012
60745: LD_INT 21
60747: DOUBLE
60748: EQUAL
60749: IFTRUE 60753
60751: GO 60764
60753: POP
// bc_type := b_ext_computer ; 22 :
60754: LD_ADDR_OWVAR 42
60758: PUSH
60759: LD_INT 24
60761: ST_TO_ADDR
60762: GO 61012
60764: LD_INT 22
60766: DOUBLE
60767: EQUAL
60768: IFTRUE 60772
60770: GO 60783
60772: POP
// bc_type := b_ext_track ; 23 :
60773: LD_ADDR_OWVAR 42
60777: PUSH
60778: LD_INT 16
60780: ST_TO_ADDR
60781: GO 61012
60783: LD_INT 23
60785: DOUBLE
60786: EQUAL
60787: IFTRUE 60791
60789: GO 60802
60791: POP
// bc_type := b_ext_laser ; 24 :
60792: LD_ADDR_OWVAR 42
60796: PUSH
60797: LD_INT 25
60799: ST_TO_ADDR
60800: GO 61012
60802: LD_INT 24
60804: DOUBLE
60805: EQUAL
60806: IFTRUE 60810
60808: GO 60821
60810: POP
// bc_type := b_control_tower ; 25 :
60811: LD_ADDR_OWVAR 42
60815: PUSH
60816: LD_INT 36
60818: ST_TO_ADDR
60819: GO 61012
60821: LD_INT 25
60823: DOUBLE
60824: EQUAL
60825: IFTRUE 60829
60827: GO 60840
60829: POP
// bc_type := b_breastwork ; 26 :
60830: LD_ADDR_OWVAR 42
60834: PUSH
60835: LD_INT 31
60837: ST_TO_ADDR
60838: GO 61012
60840: LD_INT 26
60842: DOUBLE
60843: EQUAL
60844: IFTRUE 60848
60846: GO 60859
60848: POP
// bc_type := b_bunker ; 27 :
60849: LD_ADDR_OWVAR 42
60853: PUSH
60854: LD_INT 32
60856: ST_TO_ADDR
60857: GO 61012
60859: LD_INT 27
60861: DOUBLE
60862: EQUAL
60863: IFTRUE 60867
60865: GO 60878
60867: POP
// bc_type := b_turret ; 28 :
60868: LD_ADDR_OWVAR 42
60872: PUSH
60873: LD_INT 33
60875: ST_TO_ADDR
60876: GO 61012
60878: LD_INT 28
60880: DOUBLE
60881: EQUAL
60882: IFTRUE 60886
60884: GO 60897
60886: POP
// bc_type := b_armoury ; 29 :
60887: LD_ADDR_OWVAR 42
60891: PUSH
60892: LD_INT 4
60894: ST_TO_ADDR
60895: GO 61012
60897: LD_INT 29
60899: DOUBLE
60900: EQUAL
60901: IFTRUE 60905
60903: GO 60916
60905: POP
// bc_type := b_barracks ; 30 :
60906: LD_ADDR_OWVAR 42
60910: PUSH
60911: LD_INT 5
60913: ST_TO_ADDR
60914: GO 61012
60916: LD_INT 30
60918: DOUBLE
60919: EQUAL
60920: IFTRUE 60924
60922: GO 60935
60924: POP
// bc_type := b_solar_power ; 31 :
60925: LD_ADDR_OWVAR 42
60929: PUSH
60930: LD_INT 27
60932: ST_TO_ADDR
60933: GO 61012
60935: LD_INT 31
60937: DOUBLE
60938: EQUAL
60939: IFTRUE 60943
60941: GO 60954
60943: POP
// bc_type := b_oil_power ; 32 :
60944: LD_ADDR_OWVAR 42
60948: PUSH
60949: LD_INT 26
60951: ST_TO_ADDR
60952: GO 61012
60954: LD_INT 32
60956: DOUBLE
60957: EQUAL
60958: IFTRUE 60962
60960: GO 60973
60962: POP
// bc_type := b_siberite_power ; 33 :
60963: LD_ADDR_OWVAR 42
60967: PUSH
60968: LD_INT 28
60970: ST_TO_ADDR
60971: GO 61012
60973: LD_INT 33
60975: DOUBLE
60976: EQUAL
60977: IFTRUE 60981
60979: GO 60992
60981: POP
// bc_type := b_oil_mine ; 34 :
60982: LD_ADDR_OWVAR 42
60986: PUSH
60987: LD_INT 29
60989: ST_TO_ADDR
60990: GO 61012
60992: LD_INT 34
60994: DOUBLE
60995: EQUAL
60996: IFTRUE 61000
60998: GO 61011
61000: POP
// bc_type := b_siberite_mine ; end ;
61001: LD_ADDR_OWVAR 42
61005: PUSH
61006: LD_INT 30
61008: ST_TO_ADDR
61009: GO 61012
61011: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61012: LD_ADDR_VAR 0 8
61016: PUSH
61017: LD_VAR 0 5
61021: PPUSH
61022: LD_VAR 0 6
61026: PPUSH
61027: LD_VAR 0 3
61031: PPUSH
61032: CALL_OW 47
61036: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61037: LD_OWVAR 42
61041: PUSH
61042: LD_INT 32
61044: PUSH
61045: LD_INT 33
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: IN
61052: IFFALSE 61068
// PlaceWeaponTurret ( b , weapon ) ;
61054: LD_VAR 0 8
61058: PPUSH
61059: LD_VAR 0 4
61063: PPUSH
61064: CALL_OW 431
// end ;
61068: LD_VAR 0 7
61072: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61073: LD_INT 0
61075: PPUSH
61076: PPUSH
61077: PPUSH
61078: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61079: LD_ADDR_VAR 0 4
61083: PUSH
61084: LD_INT 22
61086: PUSH
61087: LD_OWVAR 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 30
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 30
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PPUSH
61128: CALL_OW 69
61132: ST_TO_ADDR
// if not tmp then
61133: LD_VAR 0 4
61137: NOT
61138: IFFALSE 61142
// exit ;
61140: GO 61201
// for i in tmp do
61142: LD_ADDR_VAR 0 2
61146: PUSH
61147: LD_VAR 0 4
61151: PUSH
61152: FOR_IN
61153: IFFALSE 61199
// for j = 1 to 3 do
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: DOUBLE
61161: LD_INT 1
61163: DEC
61164: ST_TO_ADDR
61165: LD_INT 3
61167: PUSH
61168: FOR_TO
61169: IFFALSE 61195
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61171: LD_VAR 0 2
61175: PPUSH
61176: CALL_OW 274
61180: PPUSH
61181: LD_VAR 0 3
61185: PPUSH
61186: LD_INT 99999
61188: PPUSH
61189: CALL_OW 277
61193: GO 61168
61195: POP
61196: POP
61197: GO 61152
61199: POP
61200: POP
// end ;
61201: LD_VAR 0 1
61205: RET
// export function hHackSetLevel10 ; var i , j ; begin
61206: LD_INT 0
61208: PPUSH
61209: PPUSH
61210: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61211: LD_ADDR_VAR 0 2
61215: PUSH
61216: LD_INT 21
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PPUSH
61226: CALL_OW 69
61230: PUSH
61231: FOR_IN
61232: IFFALSE 61284
// if IsSelected ( i ) then
61234: LD_VAR 0 2
61238: PPUSH
61239: CALL_OW 306
61243: IFFALSE 61282
// begin for j := 1 to 4 do
61245: LD_ADDR_VAR 0 3
61249: PUSH
61250: DOUBLE
61251: LD_INT 1
61253: DEC
61254: ST_TO_ADDR
61255: LD_INT 4
61257: PUSH
61258: FOR_TO
61259: IFFALSE 61280
// SetSkill ( i , j , 10 ) ;
61261: LD_VAR 0 2
61265: PPUSH
61266: LD_VAR 0 3
61270: PPUSH
61271: LD_INT 10
61273: PPUSH
61274: CALL_OW 237
61278: GO 61258
61280: POP
61281: POP
// end ;
61282: GO 61231
61284: POP
61285: POP
// end ;
61286: LD_VAR 0 1
61290: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61291: LD_INT 0
61293: PPUSH
61294: PPUSH
61295: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61296: LD_ADDR_VAR 0 2
61300: PUSH
61301: LD_INT 22
61303: PUSH
61304: LD_OWVAR 2
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 21
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PPUSH
61327: CALL_OW 69
61331: PUSH
61332: FOR_IN
61333: IFFALSE 61374
// begin for j := 1 to 4 do
61335: LD_ADDR_VAR 0 3
61339: PUSH
61340: DOUBLE
61341: LD_INT 1
61343: DEC
61344: ST_TO_ADDR
61345: LD_INT 4
61347: PUSH
61348: FOR_TO
61349: IFFALSE 61370
// SetSkill ( i , j , 10 ) ;
61351: LD_VAR 0 2
61355: PPUSH
61356: LD_VAR 0 3
61360: PPUSH
61361: LD_INT 10
61363: PPUSH
61364: CALL_OW 237
61368: GO 61348
61370: POP
61371: POP
// end ;
61372: GO 61332
61374: POP
61375: POP
// end ;
61376: LD_VAR 0 1
61380: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61381: LD_INT 0
61383: PPUSH
// uc_side := your_side ;
61384: LD_ADDR_OWVAR 20
61388: PUSH
61389: LD_OWVAR 2
61393: ST_TO_ADDR
// uc_nation := nation ;
61394: LD_ADDR_OWVAR 21
61398: PUSH
61399: LD_VAR 0 1
61403: ST_TO_ADDR
// InitHc ;
61404: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61408: LD_INT 0
61410: PPUSH
61411: LD_VAR 0 2
61415: PPUSH
61416: LD_VAR 0 3
61420: PPUSH
61421: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61425: LD_VAR 0 4
61429: PPUSH
61430: LD_VAR 0 5
61434: PPUSH
61435: CALL_OW 428
61439: PUSH
61440: LD_INT 0
61442: EQUAL
61443: IFFALSE 61467
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61445: CALL_OW 44
61449: PPUSH
61450: LD_VAR 0 4
61454: PPUSH
61455: LD_VAR 0 5
61459: PPUSH
61460: LD_INT 1
61462: PPUSH
61463: CALL_OW 48
// end ;
61467: LD_VAR 0 6
61471: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61472: LD_INT 0
61474: PPUSH
61475: PPUSH
// uc_side := your_side ;
61476: LD_ADDR_OWVAR 20
61480: PUSH
61481: LD_OWVAR 2
61485: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61486: LD_VAR 0 1
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 4
61502: PUSH
61503: LD_INT 5
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: IN
61513: IFFALSE 61525
// uc_nation := nation_american else
61515: LD_ADDR_OWVAR 21
61519: PUSH
61520: LD_INT 1
61522: ST_TO_ADDR
61523: GO 61568
// if chassis in [ 11 , 12 , 13 , 14 ] then
61525: LD_VAR 0 1
61529: PUSH
61530: LD_INT 11
61532: PUSH
61533: LD_INT 12
61535: PUSH
61536: LD_INT 13
61538: PUSH
61539: LD_INT 14
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: IN
61548: IFFALSE 61560
// uc_nation := nation_arabian else
61550: LD_ADDR_OWVAR 21
61554: PUSH
61555: LD_INT 2
61557: ST_TO_ADDR
61558: GO 61568
// uc_nation := nation_russian ;
61560: LD_ADDR_OWVAR 21
61564: PUSH
61565: LD_INT 3
61567: ST_TO_ADDR
// vc_chassis := chassis ;
61568: LD_ADDR_OWVAR 37
61572: PUSH
61573: LD_VAR 0 1
61577: ST_TO_ADDR
// vc_engine := engine ;
61578: LD_ADDR_OWVAR 39
61582: PUSH
61583: LD_VAR 0 2
61587: ST_TO_ADDR
// vc_control := control ;
61588: LD_ADDR_OWVAR 38
61592: PUSH
61593: LD_VAR 0 3
61597: ST_TO_ADDR
// vc_weapon := weapon ;
61598: LD_ADDR_OWVAR 40
61602: PUSH
61603: LD_VAR 0 4
61607: ST_TO_ADDR
// un := CreateVehicle ;
61608: LD_ADDR_VAR 0 8
61612: PUSH
61613: CALL_OW 45
61617: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61618: LD_VAR 0 8
61622: PPUSH
61623: LD_INT 0
61625: PPUSH
61626: LD_INT 5
61628: PPUSH
61629: CALL_OW 12
61633: PPUSH
61634: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61638: LD_VAR 0 8
61642: PPUSH
61643: LD_VAR 0 5
61647: PPUSH
61648: LD_VAR 0 6
61652: PPUSH
61653: LD_INT 1
61655: PPUSH
61656: CALL_OW 48
// end ;
61660: LD_VAR 0 7
61664: RET
// export hInvincible ; every 1 do
61665: GO 61667
61667: DISABLE
// hInvincible := [ ] ;
61668: LD_ADDR_EXP 85
61672: PUSH
61673: EMPTY
61674: ST_TO_ADDR
61675: END
// every 10 do var i ;
61676: GO 61678
61678: DISABLE
61679: LD_INT 0
61681: PPUSH
// begin enable ;
61682: ENABLE
// if not hInvincible then
61683: LD_EXP 85
61687: NOT
61688: IFFALSE 61692
// exit ;
61690: GO 61736
// for i in hInvincible do
61692: LD_ADDR_VAR 0 1
61696: PUSH
61697: LD_EXP 85
61701: PUSH
61702: FOR_IN
61703: IFFALSE 61734
// if GetLives ( i ) < 1000 then
61705: LD_VAR 0 1
61709: PPUSH
61710: CALL_OW 256
61714: PUSH
61715: LD_INT 1000
61717: LESS
61718: IFFALSE 61732
// SetLives ( i , 1000 ) ;
61720: LD_VAR 0 1
61724: PPUSH
61725: LD_INT 1000
61727: PPUSH
61728: CALL_OW 234
61732: GO 61702
61734: POP
61735: POP
// end ;
61736: PPOPN 1
61738: END
// export function hHackInvincible ; var i ; begin
61739: LD_INT 0
61741: PPUSH
61742: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61743: LD_ADDR_VAR 0 2
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 21
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 21
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: PPUSH
61776: CALL_OW 69
61780: PUSH
61781: FOR_IN
61782: IFFALSE 61843
// if IsSelected ( i ) then
61784: LD_VAR 0 2
61788: PPUSH
61789: CALL_OW 306
61793: IFFALSE 61841
// begin if i in hInvincible then
61795: LD_VAR 0 2
61799: PUSH
61800: LD_EXP 85
61804: IN
61805: IFFALSE 61825
// hInvincible := hInvincible diff i else
61807: LD_ADDR_EXP 85
61811: PUSH
61812: LD_EXP 85
61816: PUSH
61817: LD_VAR 0 2
61821: DIFF
61822: ST_TO_ADDR
61823: GO 61841
// hInvincible := hInvincible union i ;
61825: LD_ADDR_EXP 85
61829: PUSH
61830: LD_EXP 85
61834: PUSH
61835: LD_VAR 0 2
61839: UNION
61840: ST_TO_ADDR
// end ;
61841: GO 61781
61843: POP
61844: POP
// end ;
61845: LD_VAR 0 1
61849: RET
// export function hHackInvisible ; var i , j ; begin
61850: LD_INT 0
61852: PPUSH
61853: PPUSH
61854: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61855: LD_ADDR_VAR 0 2
61859: PUSH
61860: LD_INT 21
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PPUSH
61870: CALL_OW 69
61874: PUSH
61875: FOR_IN
61876: IFFALSE 61900
// if IsSelected ( i ) then
61878: LD_VAR 0 2
61882: PPUSH
61883: CALL_OW 306
61887: IFFALSE 61898
// ComForceInvisible ( i ) ;
61889: LD_VAR 0 2
61893: PPUSH
61894: CALL_OW 496
61898: GO 61875
61900: POP
61901: POP
// end ;
61902: LD_VAR 0 1
61906: RET
// export function hHackChangeYourSide ; begin
61907: LD_INT 0
61909: PPUSH
// if your_side = 8 then
61910: LD_OWVAR 2
61914: PUSH
61915: LD_INT 8
61917: EQUAL
61918: IFFALSE 61930
// your_side := 0 else
61920: LD_ADDR_OWVAR 2
61924: PUSH
61925: LD_INT 0
61927: ST_TO_ADDR
61928: GO 61944
// your_side := your_side + 1 ;
61930: LD_ADDR_OWVAR 2
61934: PUSH
61935: LD_OWVAR 2
61939: PUSH
61940: LD_INT 1
61942: PLUS
61943: ST_TO_ADDR
// end ;
61944: LD_VAR 0 1
61948: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61949: LD_INT 0
61951: PPUSH
61952: PPUSH
61953: PPUSH
// for i in all_units do
61954: LD_ADDR_VAR 0 2
61958: PUSH
61959: LD_OWVAR 3
61963: PUSH
61964: FOR_IN
61965: IFFALSE 62043
// if IsSelected ( i ) then
61967: LD_VAR 0 2
61971: PPUSH
61972: CALL_OW 306
61976: IFFALSE 62041
// begin j := GetSide ( i ) ;
61978: LD_ADDR_VAR 0 3
61982: PUSH
61983: LD_VAR 0 2
61987: PPUSH
61988: CALL_OW 255
61992: ST_TO_ADDR
// if j = 8 then
61993: LD_VAR 0 3
61997: PUSH
61998: LD_INT 8
62000: EQUAL
62001: IFFALSE 62013
// j := 0 else
62003: LD_ADDR_VAR 0 3
62007: PUSH
62008: LD_INT 0
62010: ST_TO_ADDR
62011: GO 62027
// j := j + 1 ;
62013: LD_ADDR_VAR 0 3
62017: PUSH
62018: LD_VAR 0 3
62022: PUSH
62023: LD_INT 1
62025: PLUS
62026: ST_TO_ADDR
// SetSide ( i , j ) ;
62027: LD_VAR 0 2
62031: PPUSH
62032: LD_VAR 0 3
62036: PPUSH
62037: CALL_OW 235
// end ;
62041: GO 61964
62043: POP
62044: POP
// end ;
62045: LD_VAR 0 1
62049: RET
// export function hHackFog ; begin
62050: LD_INT 0
62052: PPUSH
// FogOff ( true ) ;
62053: LD_INT 1
62055: PPUSH
62056: CALL_OW 344
// end ;
62060: LD_VAR 0 1
62064: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62065: LD_INT 0
62067: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62068: LD_VAR 0 1
62072: PPUSH
62073: LD_VAR 0 2
62077: PPUSH
62078: LD_VAR 0 3
62082: PPUSH
62083: LD_INT 1
62085: PPUSH
62086: LD_INT 1
62088: PPUSH
62089: CALL_OW 483
// CenterOnXY ( x , y ) ;
62093: LD_VAR 0 2
62097: PPUSH
62098: LD_VAR 0 3
62102: PPUSH
62103: CALL_OW 84
// end ;
62107: LD_VAR 0 4
62111: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62112: LD_INT 0
62114: PPUSH
62115: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62116: LD_VAR 0 1
62120: NOT
62121: PUSH
62122: LD_VAR 0 2
62126: PPUSH
62127: LD_VAR 0 3
62131: PPUSH
62132: CALL_OW 488
62136: NOT
62137: OR
62138: PUSH
62139: LD_VAR 0 1
62143: PPUSH
62144: CALL_OW 266
62148: PUSH
62149: LD_INT 3
62151: NONEQUAL
62152: PUSH
62153: LD_VAR 0 1
62157: PPUSH
62158: CALL_OW 247
62162: PUSH
62163: LD_INT 1
62165: EQUAL
62166: NOT
62167: AND
62168: OR
62169: IFFALSE 62173
// exit ;
62171: GO 62455
// if GetType ( factory ) = unit_human then
62173: LD_VAR 0 1
62177: PPUSH
62178: CALL_OW 247
62182: PUSH
62183: LD_INT 1
62185: EQUAL
62186: IFFALSE 62203
// factory := IsInUnit ( factory ) ;
62188: LD_ADDR_VAR 0 1
62192: PUSH
62193: LD_VAR 0 1
62197: PPUSH
62198: CALL_OW 310
62202: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62203: LD_VAR 0 1
62207: PPUSH
62208: CALL_OW 266
62212: PUSH
62213: LD_INT 3
62215: NONEQUAL
62216: IFFALSE 62220
// exit ;
62218: GO 62455
// for i := 1 to Count ( factoryWaypoints ) do
62220: LD_ADDR_VAR 0 5
62224: PUSH
62225: DOUBLE
62226: LD_INT 1
62228: DEC
62229: ST_TO_ADDR
62230: LD_EXP 86
62234: PPUSH
62235: CALL 6852 0 1
62239: PUSH
62240: FOR_TO
62241: IFFALSE 62403
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62243: LD_VAR 0 2
62247: PPUSH
62248: LD_VAR 0 3
62252: PPUSH
62253: CALL_OW 428
62257: PUSH
62258: LD_EXP 86
62262: PUSH
62263: LD_VAR 0 5
62267: ARRAY
62268: PUSH
62269: LD_INT 2
62271: ARRAY
62272: EQUAL
62273: IFFALSE 62305
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62275: LD_ADDR_EXP 86
62279: PUSH
62280: LD_EXP 86
62284: PPUSH
62285: LD_VAR 0 5
62289: PPUSH
62290: CALL_OW 3
62294: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62295: CALL 62460 0 0
// exit ;
62299: POP
62300: POP
62301: GO 62455
// end else
62303: GO 62401
// if factory = factoryWaypoints [ i ] [ 2 ] then
62305: LD_VAR 0 1
62309: PUSH
62310: LD_EXP 86
62314: PUSH
62315: LD_VAR 0 5
62319: ARRAY
62320: PUSH
62321: LD_INT 2
62323: ARRAY
62324: EQUAL
62325: IFFALSE 62401
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62327: LD_ADDR_EXP 86
62331: PUSH
62332: LD_EXP 86
62336: PPUSH
62337: LD_VAR 0 5
62341: PPUSH
62342: CALL_OW 3
62346: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62347: LD_ADDR_EXP 86
62351: PUSH
62352: LD_EXP 86
62356: PPUSH
62357: LD_VAR 0 1
62361: PPUSH
62362: CALL_OW 255
62366: PUSH
62367: LD_VAR 0 1
62371: PUSH
62372: LD_VAR 0 2
62376: PUSH
62377: LD_VAR 0 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: PPUSH
62388: CALL 42461 0 2
62392: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62393: CALL 62460 0 0
// exit ;
62397: POP
62398: POP
62399: GO 62455
// end ; end ;
62401: GO 62240
62403: POP
62404: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62405: LD_ADDR_EXP 86
62409: PUSH
62410: LD_EXP 86
62414: PPUSH
62415: LD_VAR 0 1
62419: PPUSH
62420: CALL_OW 255
62424: PUSH
62425: LD_VAR 0 1
62429: PUSH
62430: LD_VAR 0 2
62434: PUSH
62435: LD_VAR 0 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: PPUSH
62446: CALL 42461 0 2
62450: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62451: CALL 62460 0 0
// end ;
62455: LD_VAR 0 4
62459: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62460: LD_INT 0
62462: PPUSH
62463: PPUSH
62464: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62465: LD_STRING resetFactoryWaypoint();
62467: PPUSH
62468: CALL_OW 559
// if factoryWaypoints then
62472: LD_EXP 86
62476: IFFALSE 62597
// begin list := factoryWaypoints ;
62478: LD_ADDR_VAR 0 3
62482: PUSH
62483: LD_EXP 86
62487: ST_TO_ADDR
// for i := 1 to list do
62488: LD_ADDR_VAR 0 2
62492: PUSH
62493: DOUBLE
62494: LD_INT 1
62496: DEC
62497: ST_TO_ADDR
62498: LD_VAR 0 3
62502: PUSH
62503: FOR_TO
62504: IFFALSE 62595
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62506: LD_STRING setFactoryWaypointXY(
62508: PUSH
62509: LD_VAR 0 3
62513: PUSH
62514: LD_VAR 0 2
62518: ARRAY
62519: PUSH
62520: LD_INT 1
62522: ARRAY
62523: STR
62524: PUSH
62525: LD_STRING ,
62527: STR
62528: PUSH
62529: LD_VAR 0 3
62533: PUSH
62534: LD_VAR 0 2
62538: ARRAY
62539: PUSH
62540: LD_INT 2
62542: ARRAY
62543: STR
62544: PUSH
62545: LD_STRING ,
62547: STR
62548: PUSH
62549: LD_VAR 0 3
62553: PUSH
62554: LD_VAR 0 2
62558: ARRAY
62559: PUSH
62560: LD_INT 3
62562: ARRAY
62563: STR
62564: PUSH
62565: LD_STRING ,
62567: STR
62568: PUSH
62569: LD_VAR 0 3
62573: PUSH
62574: LD_VAR 0 2
62578: ARRAY
62579: PUSH
62580: LD_INT 4
62582: ARRAY
62583: STR
62584: PUSH
62585: LD_STRING )
62587: STR
62588: PPUSH
62589: CALL_OW 559
62593: GO 62503
62595: POP
62596: POP
// end ; end ;
62597: LD_VAR 0 1
62601: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62602: LD_INT 0
62604: PPUSH
// if HexInfo ( x , y ) = warehouse then
62605: LD_VAR 0 2
62609: PPUSH
62610: LD_VAR 0 3
62614: PPUSH
62615: CALL_OW 428
62619: PUSH
62620: LD_VAR 0 1
62624: EQUAL
62625: IFFALSE 62652
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62627: LD_ADDR_EXP 87
62631: PUSH
62632: LD_EXP 87
62636: PPUSH
62637: LD_VAR 0 1
62641: PPUSH
62642: LD_INT 0
62644: PPUSH
62645: CALL_OW 1
62649: ST_TO_ADDR
62650: GO 62703
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62652: LD_ADDR_EXP 87
62656: PUSH
62657: LD_EXP 87
62661: PPUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: LD_VAR 0 1
62671: PPUSH
62672: CALL_OW 255
62676: PUSH
62677: LD_VAR 0 1
62681: PUSH
62682: LD_VAR 0 2
62686: PUSH
62687: LD_VAR 0 3
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: PPUSH
62698: CALL_OW 1
62702: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62703: CALL 62712 0 0
// end ;
62707: LD_VAR 0 4
62711: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62712: LD_INT 0
62714: PPUSH
62715: PPUSH
62716: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62717: LD_STRING resetWarehouseGatheringPoints();
62719: PPUSH
62720: CALL_OW 559
// if warehouseGatheringPoints then
62724: LD_EXP 87
62728: IFFALSE 62854
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62730: LD_ADDR_VAR 0 3
62734: PUSH
62735: LD_EXP 87
62739: PPUSH
62740: CALL 46223 0 1
62744: ST_TO_ADDR
// for i := 1 to list do
62745: LD_ADDR_VAR 0 2
62749: PUSH
62750: DOUBLE
62751: LD_INT 1
62753: DEC
62754: ST_TO_ADDR
62755: LD_VAR 0 3
62759: PUSH
62760: FOR_TO
62761: IFFALSE 62852
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62763: LD_STRING setWarehouseGatheringPointXY(
62765: PUSH
62766: LD_VAR 0 3
62770: PUSH
62771: LD_VAR 0 2
62775: ARRAY
62776: PUSH
62777: LD_INT 1
62779: ARRAY
62780: STR
62781: PUSH
62782: LD_STRING ,
62784: STR
62785: PUSH
62786: LD_VAR 0 3
62790: PUSH
62791: LD_VAR 0 2
62795: ARRAY
62796: PUSH
62797: LD_INT 2
62799: ARRAY
62800: STR
62801: PUSH
62802: LD_STRING ,
62804: STR
62805: PUSH
62806: LD_VAR 0 3
62810: PUSH
62811: LD_VAR 0 2
62815: ARRAY
62816: PUSH
62817: LD_INT 3
62819: ARRAY
62820: STR
62821: PUSH
62822: LD_STRING ,
62824: STR
62825: PUSH
62826: LD_VAR 0 3
62830: PUSH
62831: LD_VAR 0 2
62835: ARRAY
62836: PUSH
62837: LD_INT 4
62839: ARRAY
62840: STR
62841: PUSH
62842: LD_STRING )
62844: STR
62845: PPUSH
62846: CALL_OW 559
62850: GO 62760
62852: POP
62853: POP
// end ; end ;
62854: LD_VAR 0 1
62858: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62859: LD_EXP 87
62863: IFFALSE 63548
62865: GO 62867
62867: DISABLE
62868: LD_INT 0
62870: PPUSH
62871: PPUSH
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
62878: PPUSH
// begin enable ;
62879: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62880: LD_ADDR_VAR 0 3
62884: PUSH
62885: LD_EXP 87
62889: PPUSH
62890: CALL 46223 0 1
62894: ST_TO_ADDR
// if not list then
62895: LD_VAR 0 3
62899: NOT
62900: IFFALSE 62904
// exit ;
62902: GO 63548
// for i := 1 to list do
62904: LD_ADDR_VAR 0 1
62908: PUSH
62909: DOUBLE
62910: LD_INT 1
62912: DEC
62913: ST_TO_ADDR
62914: LD_VAR 0 3
62918: PUSH
62919: FOR_TO
62920: IFFALSE 63546
// begin depot := list [ i ] [ 2 ] ;
62922: LD_ADDR_VAR 0 8
62926: PUSH
62927: LD_VAR 0 3
62931: PUSH
62932: LD_VAR 0 1
62936: ARRAY
62937: PUSH
62938: LD_INT 2
62940: ARRAY
62941: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62942: LD_ADDR_VAR 0 5
62946: PUSH
62947: LD_VAR 0 3
62951: PUSH
62952: LD_VAR 0 1
62956: ARRAY
62957: PUSH
62958: LD_INT 1
62960: ARRAY
62961: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
62962: LD_VAR 0 8
62966: PPUSH
62967: CALL_OW 301
62971: PUSH
62972: LD_VAR 0 5
62976: PUSH
62977: LD_VAR 0 8
62981: PPUSH
62982: CALL_OW 255
62986: NONEQUAL
62987: OR
62988: IFFALSE 63017
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
62990: LD_ADDR_EXP 87
62994: PUSH
62995: LD_EXP 87
62999: PPUSH
63000: LD_VAR 0 8
63004: PPUSH
63005: LD_INT 0
63007: PPUSH
63008: CALL_OW 1
63012: ST_TO_ADDR
// exit ;
63013: POP
63014: POP
63015: GO 63548
// end ; x := list [ i ] [ 3 ] ;
63017: LD_ADDR_VAR 0 6
63021: PUSH
63022: LD_VAR 0 3
63026: PUSH
63027: LD_VAR 0 1
63031: ARRAY
63032: PUSH
63033: LD_INT 3
63035: ARRAY
63036: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63037: LD_ADDR_VAR 0 7
63041: PUSH
63042: LD_VAR 0 3
63046: PUSH
63047: LD_VAR 0 1
63051: ARRAY
63052: PUSH
63053: LD_INT 4
63055: ARRAY
63056: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63057: LD_ADDR_VAR 0 9
63061: PUSH
63062: LD_VAR 0 6
63066: PPUSH
63067: LD_VAR 0 7
63071: PPUSH
63072: LD_INT 16
63074: PPUSH
63075: CALL 44807 0 3
63079: ST_TO_ADDR
// if not cratesNearbyPoint then
63080: LD_VAR 0 9
63084: NOT
63085: IFFALSE 63091
// exit ;
63087: POP
63088: POP
63089: GO 63548
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63091: LD_ADDR_VAR 0 4
63095: PUSH
63096: LD_INT 22
63098: PUSH
63099: LD_VAR 0 5
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: LD_INT 60
63113: PUSH
63114: EMPTY
63115: LIST
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 91
63123: PUSH
63124: LD_VAR 0 8
63128: PUSH
63129: LD_INT 6
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: LD_INT 25
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 25
63152: PUSH
63153: LD_INT 16
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: LIST
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: PPUSH
63171: CALL_OW 69
63175: PUSH
63176: LD_VAR 0 8
63180: PPUSH
63181: CALL_OW 313
63185: PPUSH
63186: LD_INT 3
63188: PUSH
63189: LD_INT 60
63191: PUSH
63192: EMPTY
63193: LIST
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: LD_INT 25
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 25
63214: PUSH
63215: LD_INT 16
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PPUSH
63231: CALL_OW 72
63235: UNION
63236: ST_TO_ADDR
// if tmp then
63237: LD_VAR 0 4
63241: IFFALSE 63321
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_VAR 0 4
63252: PPUSH
63253: LD_INT 3
63255: PPUSH
63256: CALL 42776 0 2
63260: ST_TO_ADDR
// for j in tmp do
63261: LD_ADDR_VAR 0 2
63265: PUSH
63266: LD_VAR 0 4
63270: PUSH
63271: FOR_IN
63272: IFFALSE 63315
// begin if IsInUnit ( j ) then
63274: LD_VAR 0 2
63278: PPUSH
63279: CALL_OW 310
63283: IFFALSE 63294
// ComExit ( j ) ;
63285: LD_VAR 0 2
63289: PPUSH
63290: CALL 42859 0 1
// AddComCollect ( j , x , y ) ;
63294: LD_VAR 0 2
63298: PPUSH
63299: LD_VAR 0 6
63303: PPUSH
63304: LD_VAR 0 7
63308: PPUSH
63309: CALL_OW 177
// end ;
63313: GO 63271
63315: POP
63316: POP
// exit ;
63317: POP
63318: POP
63319: GO 63548
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63321: LD_ADDR_VAR 0 4
63325: PUSH
63326: LD_INT 22
63328: PUSH
63329: LD_VAR 0 5
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 91
63340: PUSH
63341: LD_VAR 0 8
63345: PUSH
63346: LD_INT 8
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: LD_INT 34
63359: PUSH
63360: LD_INT 12
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 34
63369: PUSH
63370: LD_INT 51
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 34
63379: PUSH
63380: LD_INT 32
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 34
63389: PUSH
63390: LD_INT 89
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: PPUSH
63409: CALL_OW 69
63413: ST_TO_ADDR
// if tmp then
63414: LD_VAR 0 4
63418: IFFALSE 63544
// begin for j in tmp do
63420: LD_ADDR_VAR 0 2
63424: PUSH
63425: LD_VAR 0 4
63429: PUSH
63430: FOR_IN
63431: IFFALSE 63542
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63433: LD_VAR 0 2
63437: PPUSH
63438: CALL_OW 262
63442: PUSH
63443: LD_INT 3
63445: EQUAL
63446: PUSH
63447: LD_VAR 0 2
63451: PPUSH
63452: CALL_OW 261
63456: PUSH
63457: LD_INT 20
63459: GREATER
63460: OR
63461: PUSH
63462: LD_VAR 0 2
63466: PPUSH
63467: CALL_OW 314
63471: NOT
63472: AND
63473: PUSH
63474: LD_VAR 0 2
63478: PPUSH
63479: CALL_OW 263
63483: PUSH
63484: LD_INT 1
63486: NONEQUAL
63487: PUSH
63488: LD_VAR 0 2
63492: PPUSH
63493: CALL_OW 311
63497: OR
63498: AND
63499: IFFALSE 63540
// begin ComCollect ( j , x , y ) ;
63501: LD_VAR 0 2
63505: PPUSH
63506: LD_VAR 0 6
63510: PPUSH
63511: LD_VAR 0 7
63515: PPUSH
63516: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63520: LD_VAR 0 2
63524: PPUSH
63525: LD_VAR 0 8
63529: PPUSH
63530: CALL_OW 172
// exit ;
63534: POP
63535: POP
63536: POP
63537: POP
63538: GO 63548
// end ;
63540: GO 63430
63542: POP
63543: POP
// end ; end ;
63544: GO 62919
63546: POP
63547: POP
// end ; end_of_file
63548: PPOPN 9
63550: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63551: LD_VAR 0 1
63555: PUSH
63556: LD_INT 200
63558: DOUBLE
63559: GREATEREQUAL
63560: IFFALSE 63568
63562: LD_INT 299
63564: DOUBLE
63565: LESSEQUAL
63566: IFTRUE 63570
63568: GO 63602
63570: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63571: LD_VAR 0 1
63575: PPUSH
63576: LD_VAR 0 2
63580: PPUSH
63581: LD_VAR 0 3
63585: PPUSH
63586: LD_VAR 0 4
63590: PPUSH
63591: LD_VAR 0 5
63595: PPUSH
63596: CALL 64299 0 5
63600: GO 63679
63602: LD_INT 300
63604: DOUBLE
63605: GREATEREQUAL
63606: IFFALSE 63614
63608: LD_INT 399
63610: DOUBLE
63611: LESSEQUAL
63612: IFTRUE 63616
63614: GO 63678
63616: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63617: LD_VAR 0 1
63621: PPUSH
63622: LD_VAR 0 2
63626: PPUSH
63627: LD_VAR 0 3
63631: PPUSH
63632: LD_VAR 0 4
63636: PPUSH
63637: LD_VAR 0 5
63641: PPUSH
63642: LD_VAR 0 6
63646: PPUSH
63647: LD_VAR 0 7
63651: PPUSH
63652: LD_VAR 0 8
63656: PPUSH
63657: LD_VAR 0 9
63661: PPUSH
63662: LD_VAR 0 10
63666: PPUSH
63667: LD_VAR 0 11
63671: PPUSH
63672: CALL 60124 0 11
63676: GO 63679
63678: POP
// end ;
63679: PPOPN 11
63681: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63682: LD_VAR 0 1
63686: PPUSH
63687: LD_VAR 0 2
63691: PPUSH
63692: LD_VAR 0 3
63696: PPUSH
63697: LD_VAR 0 4
63701: PPUSH
63702: LD_VAR 0 5
63706: PPUSH
63707: CALL 63764 0 5
// end ; end_of_file
63711: PPOPN 5
63713: END
// export function SOS_UnitDestroyed ( un ) ; begin
63714: LD_INT 0
63716: PPUSH
// ComRadiation ( un ) ;
63717: LD_VAR 0 1
63721: PPUSH
63722: CALL 64703 0 1
// end ;
63726: LD_VAR 0 2
63730: RET
// export function SOS_UnitKamikazed ( un ) ; begin
63731: LD_INT 0
63733: PPUSH
// ComRadiation ( un ) ;
63734: LD_VAR 0 1
63738: PPUSH
63739: CALL 64703 0 1
// end ;
63743: LD_VAR 0 2
63747: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63748: LD_INT 0
63750: PPUSH
// end ;
63751: LD_VAR 0 4
63755: RET
// export function SOS_Command ( cmd ) ; begin
63756: LD_INT 0
63758: PPUSH
// end ;
63759: LD_VAR 0 2
63763: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63764: LD_INT 0
63766: PPUSH
// end ;
63767: LD_VAR 0 6
63771: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
63772: LD_INT 0
63774: PPUSH
63775: PPUSH
63776: PPUSH
63777: PPUSH
63778: PPUSH
// if not vehicle or not factory then
63779: LD_VAR 0 1
63783: NOT
63784: PUSH
63785: LD_VAR 0 2
63789: NOT
63790: OR
63791: IFFALSE 63795
// exit ;
63793: GO 64294
// if not factoryWaypoints then
63795: LD_EXP 86
63799: NOT
63800: IFFALSE 63804
// exit ;
63802: GO 64294
// for i := 1 to Count ( factoryWaypoints ) do
63804: LD_ADDR_VAR 0 4
63808: PUSH
63809: DOUBLE
63810: LD_INT 1
63812: DEC
63813: ST_TO_ADDR
63814: LD_EXP 86
63818: PPUSH
63819: CALL 6852 0 1
63823: PUSH
63824: FOR_TO
63825: IFFALSE 64292
// if factoryWaypoints [ i ] [ 2 ] = factory then
63827: LD_EXP 86
63831: PUSH
63832: LD_VAR 0 4
63836: ARRAY
63837: PUSH
63838: LD_INT 2
63840: ARRAY
63841: PUSH
63842: LD_VAR 0 2
63846: EQUAL
63847: IFFALSE 64290
// begin if GetControl ( vehicle ) = control_manual then
63849: LD_VAR 0 1
63853: PPUSH
63854: CALL_OW 263
63858: PUSH
63859: LD_INT 1
63861: EQUAL
63862: IFFALSE 64173
// begin driver := IsDrivenBy ( vehicle ) ;
63864: LD_ADDR_VAR 0 6
63868: PUSH
63869: LD_VAR 0 1
63873: PPUSH
63874: CALL_OW 311
63878: ST_TO_ADDR
// tag := GetTag ( driver ) ;
63879: LD_ADDR_VAR 0 5
63883: PUSH
63884: LD_VAR 0 6
63888: PPUSH
63889: CALL_OW 110
63893: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
63894: LD_VAR 0 5
63898: PUSH
63899: LD_INT 501
63901: EQUAL
63902: PUSH
63903: LD_VAR 0 1
63907: PPUSH
63908: CALL_OW 110
63912: PUSH
63913: LD_INT 501
63915: EQUAL
63916: OR
63917: IFFALSE 63923
// exit ;
63919: POP
63920: POP
63921: GO 64294
// if not HasTask ( driver ) then
63923: LD_VAR 0 6
63927: PPUSH
63928: CALL_OW 314
63932: NOT
63933: IFFALSE 64171
// begin SetTag ( driver , tDriver ) ;
63935: LD_VAR 0 6
63939: PPUSH
63940: LD_INT 501
63942: PPUSH
63943: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
63947: LD_VAR 0 1
63951: PPUSH
63952: LD_INT 501
63954: PPUSH
63955: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
63959: LD_ADDR_VAR 0 7
63963: PUSH
63964: LD_EXP 86
63968: PUSH
63969: LD_VAR 0 4
63973: ARRAY
63974: PUSH
63975: LD_INT 3
63977: ARRAY
63978: PPUSH
63979: LD_EXP 86
63983: PUSH
63984: LD_VAR 0 4
63988: ARRAY
63989: PUSH
63990: LD_INT 4
63992: ARRAY
63993: PPUSH
63994: CALL_OW 428
63998: ST_TO_ADDR
// if hex then
63999: LD_VAR 0 7
64003: IFFALSE 64021
// ComMoveUnit ( driver , hex ) else
64005: LD_VAR 0 6
64009: PPUSH
64010: LD_VAR 0 7
64014: PPUSH
64015: CALL_OW 112
64019: GO 64060
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64021: LD_VAR 0 6
64025: PPUSH
64026: LD_EXP 86
64030: PUSH
64031: LD_VAR 0 4
64035: ARRAY
64036: PUSH
64037: LD_INT 3
64039: ARRAY
64040: PPUSH
64041: LD_EXP 86
64045: PUSH
64046: LD_VAR 0 4
64050: ARRAY
64051: PUSH
64052: LD_INT 4
64054: ARRAY
64055: PPUSH
64056: CALL_OW 111
// AddComExitVehicle ( driver ) ;
64060: LD_VAR 0 6
64064: PPUSH
64065: CALL_OW 181
// if Multiplayer then
64069: LD_OWVAR 4
64073: IFFALSE 64122
// begin repeat wait ( 10 ) ;
64075: LD_INT 10
64077: PPUSH
64078: CALL_OW 67
// until not IsInUnit ( driver ) ;
64082: LD_VAR 0 6
64086: PPUSH
64087: CALL_OW 310
64091: NOT
64092: IFFALSE 64075
// if not HasTask ( driver ) then
64094: LD_VAR 0 6
64098: PPUSH
64099: CALL_OW 314
64103: NOT
64104: IFFALSE 64120
// ComEnterUnit ( driver , factory ) ;
64106: LD_VAR 0 6
64110: PPUSH
64111: LD_VAR 0 2
64115: PPUSH
64116: CALL_OW 120
// end else
64120: GO 64136
// AddComEnterUnit ( driver , factory ) ;
64122: LD_VAR 0 6
64126: PPUSH
64127: LD_VAR 0 2
64131: PPUSH
64132: CALL_OW 180
// wait ( 0 0$1 ) ;
64136: LD_INT 35
64138: PPUSH
64139: CALL_OW 67
// SetTag ( driver , tag ) ;
64143: LD_VAR 0 6
64147: PPUSH
64148: LD_VAR 0 5
64152: PPUSH
64153: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
64157: LD_VAR 0 1
64161: PPUSH
64162: LD_INT 0
64164: PPUSH
64165: CALL_OW 109
// break ;
64169: GO 64292
// end ; end else
64171: GO 64290
// if GetControl ( vehicle ) = control_remote then
64173: LD_VAR 0 1
64177: PPUSH
64178: CALL_OW 263
64182: PUSH
64183: LD_INT 2
64185: EQUAL
64186: IFFALSE 64249
// begin wait ( 0 0$2 ) ;
64188: LD_INT 70
64190: PPUSH
64191: CALL_OW 67
// if Connect ( vehicle ) then
64195: LD_VAR 0 1
64199: PPUSH
64200: CALL 13058 0 1
64204: IFFALSE 64245
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64206: LD_VAR 0 1
64210: PPUSH
64211: LD_EXP 86
64215: PUSH
64216: LD_VAR 0 4
64220: ARRAY
64221: PUSH
64222: LD_INT 3
64224: ARRAY
64225: PPUSH
64226: LD_EXP 86
64230: PUSH
64231: LD_VAR 0 4
64235: ARRAY
64236: PUSH
64237: LD_INT 4
64239: ARRAY
64240: PPUSH
64241: CALL_OW 171
// break ;
64245: GO 64292
// end else
64247: GO 64290
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64249: LD_VAR 0 1
64253: PPUSH
64254: LD_EXP 86
64258: PUSH
64259: LD_VAR 0 4
64263: ARRAY
64264: PUSH
64265: LD_INT 3
64267: ARRAY
64268: PPUSH
64269: LD_EXP 86
64273: PUSH
64274: LD_VAR 0 4
64278: ARRAY
64279: PUSH
64280: LD_INT 4
64282: ARRAY
64283: PPUSH
64284: CALL_OW 171
// break ;
64288: GO 64292
// end ; end ;
64290: GO 63824
64292: POP
64293: POP
// end ;
64294: LD_VAR 0 3
64298: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64299: LD_INT 0
64301: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64302: LD_VAR 0 1
64306: PUSH
64307: LD_INT 250
64309: EQUAL
64310: PUSH
64311: LD_VAR 0 2
64315: PPUSH
64316: CALL_OW 264
64320: PUSH
64321: LD_INT 81
64323: EQUAL
64324: AND
64325: IFFALSE 64346
// MinerPlaceMine ( unit , x , y ) ;
64327: LD_VAR 0 2
64331: PPUSH
64332: LD_VAR 0 4
64336: PPUSH
64337: LD_VAR 0 5
64341: PPUSH
64342: CALL 67438 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64346: LD_VAR 0 1
64350: PUSH
64351: LD_INT 251
64353: EQUAL
64354: PUSH
64355: LD_VAR 0 2
64359: PPUSH
64360: CALL_OW 264
64364: PUSH
64365: LD_INT 81
64367: EQUAL
64368: AND
64369: IFFALSE 64390
// MinerDetonateMine ( unit , x , y ) ;
64371: LD_VAR 0 2
64375: PPUSH
64376: LD_VAR 0 4
64380: PPUSH
64381: LD_VAR 0 5
64385: PPUSH
64386: CALL 67713 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64390: LD_VAR 0 1
64394: PUSH
64395: LD_INT 252
64397: EQUAL
64398: PUSH
64399: LD_VAR 0 2
64403: PPUSH
64404: CALL_OW 264
64408: PUSH
64409: LD_INT 81
64411: EQUAL
64412: AND
64413: IFFALSE 64434
// MinerCreateMinefield ( unit , x , y ) ;
64415: LD_VAR 0 2
64419: PPUSH
64420: LD_VAR 0 4
64424: PPUSH
64425: LD_VAR 0 5
64429: PPUSH
64430: CALL 68130 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64434: LD_VAR 0 1
64438: PUSH
64439: LD_INT 253
64441: EQUAL
64442: PUSH
64443: LD_VAR 0 2
64447: PPUSH
64448: CALL_OW 257
64452: PUSH
64453: LD_INT 5
64455: EQUAL
64456: AND
64457: IFFALSE 64478
// ComBinocular ( unit , x , y ) ;
64459: LD_VAR 0 2
64463: PPUSH
64464: LD_VAR 0 4
64468: PPUSH
64469: LD_VAR 0 5
64473: PPUSH
64474: CALL 68499 0 3
// if selectedUnit then
64478: LD_VAR 0 3
64482: IFFALSE 64538
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64484: LD_VAR 0 1
64488: PUSH
64489: LD_INT 254
64491: EQUAL
64492: PUSH
64493: LD_VAR 0 2
64497: PPUSH
64498: CALL_OW 264
64502: PUSH
64503: LD_INT 99
64505: EQUAL
64506: AND
64507: PUSH
64508: LD_VAR 0 3
64512: PPUSH
64513: CALL_OW 263
64517: PUSH
64518: LD_INT 3
64520: EQUAL
64521: AND
64522: IFFALSE 64538
// HackDestroyVehicle ( unit , selectedUnit ) ;
64524: LD_VAR 0 2
64528: PPUSH
64529: LD_VAR 0 3
64533: PPUSH
64534: CALL 66802 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64538: LD_VAR 0 1
64542: PUSH
64543: LD_INT 255
64545: EQUAL
64546: PUSH
64547: LD_VAR 0 2
64551: PPUSH
64552: CALL_OW 264
64556: PUSH
64557: LD_INT 14
64559: PUSH
64560: LD_INT 53
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: IN
64567: AND
64568: PUSH
64569: LD_VAR 0 4
64573: PPUSH
64574: LD_VAR 0 5
64578: PPUSH
64579: CALL_OW 488
64583: AND
64584: IFFALSE 64608
// CutTreeXYR ( unit , x , y , 12 ) ;
64586: LD_VAR 0 2
64590: PPUSH
64591: LD_VAR 0 4
64595: PPUSH
64596: LD_VAR 0 5
64600: PPUSH
64601: LD_INT 12
64603: PPUSH
64604: CALL 64799 0 4
// if cmd = 256 then
64608: LD_VAR 0 1
64612: PUSH
64613: LD_INT 256
64615: EQUAL
64616: IFFALSE 64637
// SetFactoryWaypoint ( unit , x , y ) ;
64618: LD_VAR 0 2
64622: PPUSH
64623: LD_VAR 0 4
64627: PPUSH
64628: LD_VAR 0 5
64632: PPUSH
64633: CALL 62112 0 3
// if cmd = 257 then
64637: LD_VAR 0 1
64641: PUSH
64642: LD_INT 257
64644: EQUAL
64645: IFFALSE 64666
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64647: LD_VAR 0 2
64651: PPUSH
64652: LD_VAR 0 4
64656: PPUSH
64657: LD_VAR 0 5
64661: PPUSH
64662: CALL 62602 0 3
// if cmd = 258 then
64666: LD_VAR 0 1
64670: PUSH
64671: LD_INT 258
64673: EQUAL
64674: IFFALSE 64698
// BurnTreeXYR ( unit , x , y , 8 ) ;
64676: LD_VAR 0 2
64680: PPUSH
64681: LD_VAR 0 4
64685: PPUSH
64686: LD_VAR 0 5
64690: PPUSH
64691: LD_INT 8
64693: PPUSH
64694: CALL 65193 0 4
// end ;
64698: LD_VAR 0 6
64702: RET
// export function ComRadiation ( un ) ; var eff ; begin
64703: LD_INT 0
64705: PPUSH
64706: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
64707: LD_VAR 0 1
64711: PPUSH
64712: CALL_OW 264
64716: PUSH
64717: LD_INT 91
64719: NONEQUAL
64720: IFFALSE 64724
// exit ;
64722: GO 64794
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64724: LD_INT 68
64726: PPUSH
64727: LD_VAR 0 1
64731: PPUSH
64732: CALL_OW 255
64736: PPUSH
64737: CALL_OW 321
64741: PUSH
64742: LD_INT 2
64744: EQUAL
64745: IFFALSE 64757
// eff := 70 else
64747: LD_ADDR_VAR 0 3
64751: PUSH
64752: LD_INT 70
64754: ST_TO_ADDR
64755: GO 64765
// eff := 30 ;
64757: LD_ADDR_VAR 0 3
64761: PUSH
64762: LD_INT 30
64764: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64765: LD_VAR 0 1
64769: PPUSH
64770: CALL_OW 250
64774: PPUSH
64775: LD_VAR 0 1
64779: PPUSH
64780: CALL_OW 251
64784: PPUSH
64785: LD_VAR 0 3
64789: PPUSH
64790: CALL_OW 495
// end ;
64794: LD_VAR 0 2
64798: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64799: LD_INT 0
64801: PPUSH
64802: PPUSH
64803: PPUSH
64804: PPUSH
64805: PPUSH
64806: PPUSH
64807: PPUSH
64808: PPUSH
64809: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 302
64819: NOT
64820: PUSH
64821: LD_VAR 0 2
64825: PPUSH
64826: LD_VAR 0 3
64830: PPUSH
64831: CALL_OW 488
64835: NOT
64836: OR
64837: PUSH
64838: LD_VAR 0 4
64842: NOT
64843: OR
64844: IFFALSE 64848
// exit ;
64846: GO 65188
// list := [ ] ;
64848: LD_ADDR_VAR 0 13
64852: PUSH
64853: EMPTY
64854: ST_TO_ADDR
// if x - r < 0 then
64855: LD_VAR 0 2
64859: PUSH
64860: LD_VAR 0 4
64864: MINUS
64865: PUSH
64866: LD_INT 0
64868: LESS
64869: IFFALSE 64881
// min_x := 0 else
64871: LD_ADDR_VAR 0 7
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
64879: GO 64897
// min_x := x - r ;
64881: LD_ADDR_VAR 0 7
64885: PUSH
64886: LD_VAR 0 2
64890: PUSH
64891: LD_VAR 0 4
64895: MINUS
64896: ST_TO_ADDR
// if y - r < 0 then
64897: LD_VAR 0 3
64901: PUSH
64902: LD_VAR 0 4
64906: MINUS
64907: PUSH
64908: LD_INT 0
64910: LESS
64911: IFFALSE 64923
// min_y := 0 else
64913: LD_ADDR_VAR 0 8
64917: PUSH
64918: LD_INT 0
64920: ST_TO_ADDR
64921: GO 64939
// min_y := y - r ;
64923: LD_ADDR_VAR 0 8
64927: PUSH
64928: LD_VAR 0 3
64932: PUSH
64933: LD_VAR 0 4
64937: MINUS
64938: ST_TO_ADDR
// max_x := x + r ;
64939: LD_ADDR_VAR 0 9
64943: PUSH
64944: LD_VAR 0 2
64948: PUSH
64949: LD_VAR 0 4
64953: PLUS
64954: ST_TO_ADDR
// max_y := y + r ;
64955: LD_ADDR_VAR 0 10
64959: PUSH
64960: LD_VAR 0 3
64964: PUSH
64965: LD_VAR 0 4
64969: PLUS
64970: ST_TO_ADDR
// for _x = min_x to max_x do
64971: LD_ADDR_VAR 0 11
64975: PUSH
64976: DOUBLE
64977: LD_VAR 0 7
64981: DEC
64982: ST_TO_ADDR
64983: LD_VAR 0 9
64987: PUSH
64988: FOR_TO
64989: IFFALSE 65106
// for _y = min_y to max_y do
64991: LD_ADDR_VAR 0 12
64995: PUSH
64996: DOUBLE
64997: LD_VAR 0 8
65001: DEC
65002: ST_TO_ADDR
65003: LD_VAR 0 10
65007: PUSH
65008: FOR_TO
65009: IFFALSE 65102
// begin if not ValidHex ( _x , _y ) then
65011: LD_VAR 0 11
65015: PPUSH
65016: LD_VAR 0 12
65020: PPUSH
65021: CALL_OW 488
65025: NOT
65026: IFFALSE 65030
// continue ;
65028: GO 65008
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65030: LD_VAR 0 11
65034: PPUSH
65035: LD_VAR 0 12
65039: PPUSH
65040: CALL_OW 351
65044: PUSH
65045: LD_VAR 0 11
65049: PPUSH
65050: LD_VAR 0 12
65054: PPUSH
65055: CALL_OW 554
65059: AND
65060: IFFALSE 65100
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65062: LD_ADDR_VAR 0 13
65066: PUSH
65067: LD_VAR 0 13
65071: PPUSH
65072: LD_VAR 0 13
65076: PUSH
65077: LD_INT 1
65079: PLUS
65080: PPUSH
65081: LD_VAR 0 11
65085: PUSH
65086: LD_VAR 0 12
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PPUSH
65095: CALL_OW 2
65099: ST_TO_ADDR
// end ;
65100: GO 65008
65102: POP
65103: POP
65104: GO 64988
65106: POP
65107: POP
// if not list then
65108: LD_VAR 0 13
65112: NOT
65113: IFFALSE 65117
// exit ;
65115: GO 65188
// for i in list do
65117: LD_ADDR_VAR 0 6
65121: PUSH
65122: LD_VAR 0 13
65126: PUSH
65127: FOR_IN
65128: IFFALSE 65186
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65130: LD_VAR 0 1
65134: PPUSH
65135: LD_STRING M
65137: PUSH
65138: LD_VAR 0 6
65142: PUSH
65143: LD_INT 1
65145: ARRAY
65146: PUSH
65147: LD_VAR 0 6
65151: PUSH
65152: LD_INT 2
65154: ARRAY
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: PPUSH
65180: CALL_OW 447
65184: GO 65127
65186: POP
65187: POP
// end ;
65188: LD_VAR 0 5
65192: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
65193: LD_INT 0
65195: PPUSH
65196: PPUSH
65197: PPUSH
65198: PPUSH
65199: PPUSH
65200: PPUSH
65201: PPUSH
65202: PPUSH
65203: PPUSH
65204: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
65205: LD_VAR 0 1
65209: PPUSH
65210: CALL_OW 302
65214: NOT
65215: PUSH
65216: LD_VAR 0 2
65220: PPUSH
65221: LD_VAR 0 3
65225: PPUSH
65226: CALL_OW 488
65230: NOT
65231: OR
65232: PUSH
65233: LD_VAR 0 4
65237: NOT
65238: OR
65239: IFFALSE 65243
// exit ;
65241: GO 65756
// list := [ ] ;
65243: LD_ADDR_VAR 0 13
65247: PUSH
65248: EMPTY
65249: ST_TO_ADDR
// if x - r < 0 then
65250: LD_VAR 0 2
65254: PUSH
65255: LD_VAR 0 4
65259: MINUS
65260: PUSH
65261: LD_INT 0
65263: LESS
65264: IFFALSE 65276
// min_x := 0 else
65266: LD_ADDR_VAR 0 7
65270: PUSH
65271: LD_INT 0
65273: ST_TO_ADDR
65274: GO 65292
// min_x := x - r ;
65276: LD_ADDR_VAR 0 7
65280: PUSH
65281: LD_VAR 0 2
65285: PUSH
65286: LD_VAR 0 4
65290: MINUS
65291: ST_TO_ADDR
// if y - r < 0 then
65292: LD_VAR 0 3
65296: PUSH
65297: LD_VAR 0 4
65301: MINUS
65302: PUSH
65303: LD_INT 0
65305: LESS
65306: IFFALSE 65318
// min_y := 0 else
65308: LD_ADDR_VAR 0 8
65312: PUSH
65313: LD_INT 0
65315: ST_TO_ADDR
65316: GO 65334
// min_y := y - r ;
65318: LD_ADDR_VAR 0 8
65322: PUSH
65323: LD_VAR 0 3
65327: PUSH
65328: LD_VAR 0 4
65332: MINUS
65333: ST_TO_ADDR
// max_x := x + r ;
65334: LD_ADDR_VAR 0 9
65338: PUSH
65339: LD_VAR 0 2
65343: PUSH
65344: LD_VAR 0 4
65348: PLUS
65349: ST_TO_ADDR
// max_y := y + r ;
65350: LD_ADDR_VAR 0 10
65354: PUSH
65355: LD_VAR 0 3
65359: PUSH
65360: LD_VAR 0 4
65364: PLUS
65365: ST_TO_ADDR
// for _x = min_x to max_x do
65366: LD_ADDR_VAR 0 11
65370: PUSH
65371: DOUBLE
65372: LD_VAR 0 7
65376: DEC
65377: ST_TO_ADDR
65378: LD_VAR 0 9
65382: PUSH
65383: FOR_TO
65384: IFFALSE 65501
// for _y = min_y to max_y do
65386: LD_ADDR_VAR 0 12
65390: PUSH
65391: DOUBLE
65392: LD_VAR 0 8
65396: DEC
65397: ST_TO_ADDR
65398: LD_VAR 0 10
65402: PUSH
65403: FOR_TO
65404: IFFALSE 65497
// begin if not ValidHex ( _x , _y ) then
65406: LD_VAR 0 11
65410: PPUSH
65411: LD_VAR 0 12
65415: PPUSH
65416: CALL_OW 488
65420: NOT
65421: IFFALSE 65425
// continue ;
65423: GO 65403
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65425: LD_VAR 0 11
65429: PPUSH
65430: LD_VAR 0 12
65434: PPUSH
65435: CALL_OW 351
65439: PUSH
65440: LD_VAR 0 11
65444: PPUSH
65445: LD_VAR 0 12
65449: PPUSH
65450: CALL_OW 554
65454: AND
65455: IFFALSE 65495
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65457: LD_ADDR_VAR 0 13
65461: PUSH
65462: LD_VAR 0 13
65466: PPUSH
65467: LD_VAR 0 13
65471: PUSH
65472: LD_INT 1
65474: PLUS
65475: PPUSH
65476: LD_VAR 0 11
65480: PUSH
65481: LD_VAR 0 12
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PPUSH
65490: CALL_OW 2
65494: ST_TO_ADDR
// end ;
65495: GO 65403
65497: POP
65498: POP
65499: GO 65383
65501: POP
65502: POP
// if not list then
65503: LD_VAR 0 13
65507: NOT
65508: IFFALSE 65512
// exit ;
65510: GO 65756
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
65512: LD_ADDR_VAR 0 13
65516: PUSH
65517: LD_VAR 0 1
65521: PPUSH
65522: LD_VAR 0 13
65526: PPUSH
65527: LD_INT 1
65529: PPUSH
65530: LD_INT 1
65532: PPUSH
65533: CALL 10200 0 4
65537: ST_TO_ADDR
// ComStop ( flame ) ;
65538: LD_VAR 0 1
65542: PPUSH
65543: CALL_OW 141
// for i in list do
65547: LD_ADDR_VAR 0 6
65551: PUSH
65552: LD_VAR 0 13
65556: PUSH
65557: FOR_IN
65558: IFFALSE 65589
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
65560: LD_VAR 0 1
65564: PPUSH
65565: LD_VAR 0 6
65569: PUSH
65570: LD_INT 1
65572: ARRAY
65573: PPUSH
65574: LD_VAR 0 6
65578: PUSH
65579: LD_INT 2
65581: ARRAY
65582: PPUSH
65583: CALL_OW 176
65587: GO 65557
65589: POP
65590: POP
// repeat wait ( 0 0$1 ) ;
65591: LD_INT 35
65593: PPUSH
65594: CALL_OW 67
// task := GetTaskList ( flame ) ;
65598: LD_ADDR_VAR 0 14
65602: PUSH
65603: LD_VAR 0 1
65607: PPUSH
65608: CALL_OW 437
65612: ST_TO_ADDR
// if not task then
65613: LD_VAR 0 14
65617: NOT
65618: IFFALSE 65622
// exit ;
65620: GO 65756
// if task [ 1 ] [ 1 ] <> | then
65622: LD_VAR 0 14
65626: PUSH
65627: LD_INT 1
65629: ARRAY
65630: PUSH
65631: LD_INT 1
65633: ARRAY
65634: PUSH
65635: LD_STRING |
65637: NONEQUAL
65638: IFFALSE 65642
// exit ;
65640: GO 65756
// _x := task [ 1 ] [ 2 ] ;
65642: LD_ADDR_VAR 0 11
65646: PUSH
65647: LD_VAR 0 14
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: PUSH
65656: LD_INT 2
65658: ARRAY
65659: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
65660: LD_ADDR_VAR 0 12
65664: PUSH
65665: LD_VAR 0 14
65669: PUSH
65670: LD_INT 1
65672: ARRAY
65673: PUSH
65674: LD_INT 3
65676: ARRAY
65677: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
65678: LD_VAR 0 11
65682: PPUSH
65683: LD_VAR 0 12
65687: PPUSH
65688: CALL_OW 351
65692: NOT
65693: PUSH
65694: LD_VAR 0 11
65698: PPUSH
65699: LD_VAR 0 12
65703: PPUSH
65704: CALL_OW 554
65708: NOT
65709: OR
65710: IFFALSE 65744
// begin task := Delete ( task , 1 ) ;
65712: LD_ADDR_VAR 0 14
65716: PUSH
65717: LD_VAR 0 14
65721: PPUSH
65722: LD_INT 1
65724: PPUSH
65725: CALL_OW 3
65729: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
65730: LD_VAR 0 1
65734: PPUSH
65735: LD_VAR 0 14
65739: PPUSH
65740: CALL_OW 446
// end ; until not HasTask ( flame ) ;
65744: LD_VAR 0 1
65748: PPUSH
65749: CALL_OW 314
65753: NOT
65754: IFFALSE 65591
// end ;
65756: LD_VAR 0 5
65760: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65761: LD_EXP 89
65765: NOT
65766: IFFALSE 65816
65768: GO 65770
65770: DISABLE
// begin initHack := true ;
65771: LD_ADDR_EXP 89
65775: PUSH
65776: LD_INT 1
65778: ST_TO_ADDR
// hackTanks := [ ] ;
65779: LD_ADDR_EXP 90
65783: PUSH
65784: EMPTY
65785: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65786: LD_ADDR_EXP 91
65790: PUSH
65791: EMPTY
65792: ST_TO_ADDR
// hackLimit := 3 ;
65793: LD_ADDR_EXP 92
65797: PUSH
65798: LD_INT 3
65800: ST_TO_ADDR
// hackDist := 12 ;
65801: LD_ADDR_EXP 93
65805: PUSH
65806: LD_INT 12
65808: ST_TO_ADDR
// hackCounter := [ ] ;
65809: LD_ADDR_EXP 94
65813: PUSH
65814: EMPTY
65815: ST_TO_ADDR
// end ;
65816: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65817: LD_EXP 89
65821: PUSH
65822: LD_INT 34
65824: PUSH
65825: LD_INT 99
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PPUSH
65832: CALL_OW 69
65836: AND
65837: IFFALSE 66090
65839: GO 65841
65841: DISABLE
65842: LD_INT 0
65844: PPUSH
65845: PPUSH
// begin enable ;
65846: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65847: LD_ADDR_VAR 0 1
65851: PUSH
65852: LD_INT 34
65854: PUSH
65855: LD_INT 99
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PPUSH
65862: CALL_OW 69
65866: PUSH
65867: FOR_IN
65868: IFFALSE 66088
// begin if not i in hackTanks then
65870: LD_VAR 0 1
65874: PUSH
65875: LD_EXP 90
65879: IN
65880: NOT
65881: IFFALSE 65964
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65883: LD_ADDR_EXP 90
65887: PUSH
65888: LD_EXP 90
65892: PPUSH
65893: LD_EXP 90
65897: PUSH
65898: LD_INT 1
65900: PLUS
65901: PPUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: CALL_OW 1
65911: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65912: LD_ADDR_EXP 91
65916: PUSH
65917: LD_EXP 91
65921: PPUSH
65922: LD_EXP 91
65926: PUSH
65927: LD_INT 1
65929: PLUS
65930: PPUSH
65931: EMPTY
65932: PPUSH
65933: CALL_OW 1
65937: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65938: LD_ADDR_EXP 94
65942: PUSH
65943: LD_EXP 94
65947: PPUSH
65948: LD_EXP 94
65952: PUSH
65953: LD_INT 1
65955: PLUS
65956: PPUSH
65957: EMPTY
65958: PPUSH
65959: CALL_OW 1
65963: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65964: LD_VAR 0 1
65968: PPUSH
65969: CALL_OW 302
65973: NOT
65974: IFFALSE 65987
// begin HackUnlinkAll ( i ) ;
65976: LD_VAR 0 1
65980: PPUSH
65981: CALL 66093 0 1
// continue ;
65985: GO 65867
// end ; HackCheckCapturedStatus ( i ) ;
65987: LD_VAR 0 1
65991: PPUSH
65992: CALL 66536 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65996: LD_ADDR_VAR 0 2
66000: PUSH
66001: LD_INT 81
66003: PUSH
66004: LD_VAR 0 1
66008: PPUSH
66009: CALL_OW 255
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 33
66020: PUSH
66021: LD_INT 3
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 91
66030: PUSH
66031: LD_VAR 0 1
66035: PUSH
66036: LD_EXP 93
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 50
66048: PUSH
66049: EMPTY
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: PPUSH
66058: CALL_OW 69
66062: ST_TO_ADDR
// if not tmp then
66063: LD_VAR 0 2
66067: NOT
66068: IFFALSE 66072
// continue ;
66070: GO 65867
// HackLink ( i , tmp ) ;
66072: LD_VAR 0 1
66076: PPUSH
66077: LD_VAR 0 2
66081: PPUSH
66082: CALL 66229 0 2
// end ;
66086: GO 65867
66088: POP
66089: POP
// end ;
66090: PPOPN 2
66092: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66093: LD_INT 0
66095: PPUSH
66096: PPUSH
66097: PPUSH
// if not hack in hackTanks then
66098: LD_VAR 0 1
66102: PUSH
66103: LD_EXP 90
66107: IN
66108: NOT
66109: IFFALSE 66113
// exit ;
66111: GO 66224
// index := GetElementIndex ( hackTanks , hack ) ;
66113: LD_ADDR_VAR 0 4
66117: PUSH
66118: LD_EXP 90
66122: PPUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL 9497 0 2
66132: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66133: LD_EXP 91
66137: PUSH
66138: LD_VAR 0 4
66142: ARRAY
66143: IFFALSE 66224
// begin for i in hackTanksCaptured [ index ] do
66145: LD_ADDR_VAR 0 3
66149: PUSH
66150: LD_EXP 91
66154: PUSH
66155: LD_VAR 0 4
66159: ARRAY
66160: PUSH
66161: FOR_IN
66162: IFFALSE 66188
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66164: LD_VAR 0 3
66168: PUSH
66169: LD_INT 1
66171: ARRAY
66172: PPUSH
66173: LD_VAR 0 3
66177: PUSH
66178: LD_INT 2
66180: ARRAY
66181: PPUSH
66182: CALL_OW 235
66186: GO 66161
66188: POP
66189: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66190: LD_ADDR_EXP 91
66194: PUSH
66195: LD_EXP 91
66199: PPUSH
66200: LD_VAR 0 4
66204: PPUSH
66205: EMPTY
66206: PPUSH
66207: CALL_OW 1
66211: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66212: LD_VAR 0 1
66216: PPUSH
66217: LD_INT 0
66219: PPUSH
66220: CALL_OW 505
// end ; end ;
66224: LD_VAR 0 2
66228: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
66233: PPUSH
// if not hack in hackTanks or not vehicles then
66234: LD_VAR 0 1
66238: PUSH
66239: LD_EXP 90
66243: IN
66244: NOT
66245: PUSH
66246: LD_VAR 0 2
66250: NOT
66251: OR
66252: IFFALSE 66256
// exit ;
66254: GO 66531
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66256: LD_ADDR_VAR 0 2
66260: PUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: LD_VAR 0 2
66270: PPUSH
66271: LD_INT 1
66273: PPUSH
66274: LD_INT 1
66276: PPUSH
66277: CALL 10147 0 4
66281: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66282: LD_ADDR_VAR 0 5
66286: PUSH
66287: LD_EXP 90
66291: PPUSH
66292: LD_VAR 0 1
66296: PPUSH
66297: CALL 9497 0 2
66301: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66302: LD_EXP 91
66306: PUSH
66307: LD_VAR 0 5
66311: ARRAY
66312: PUSH
66313: LD_EXP 92
66317: LESS
66318: IFFALSE 66507
// begin for i := 1 to vehicles do
66320: LD_ADDR_VAR 0 4
66324: PUSH
66325: DOUBLE
66326: LD_INT 1
66328: DEC
66329: ST_TO_ADDR
66330: LD_VAR 0 2
66334: PUSH
66335: FOR_TO
66336: IFFALSE 66505
// begin if hackTanksCaptured [ index ] = hackLimit then
66338: LD_EXP 91
66342: PUSH
66343: LD_VAR 0 5
66347: ARRAY
66348: PUSH
66349: LD_EXP 92
66353: EQUAL
66354: IFFALSE 66358
// break ;
66356: GO 66505
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66358: LD_ADDR_EXP 94
66362: PUSH
66363: LD_EXP 94
66367: PPUSH
66368: LD_VAR 0 5
66372: PPUSH
66373: LD_EXP 94
66377: PUSH
66378: LD_VAR 0 5
66382: ARRAY
66383: PUSH
66384: LD_INT 1
66386: PLUS
66387: PPUSH
66388: CALL_OW 1
66392: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66393: LD_ADDR_EXP 91
66397: PUSH
66398: LD_EXP 91
66402: PPUSH
66403: LD_VAR 0 5
66407: PUSH
66408: LD_EXP 91
66412: PUSH
66413: LD_VAR 0 5
66417: ARRAY
66418: PUSH
66419: LD_INT 1
66421: PLUS
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PPUSH
66427: LD_VAR 0 2
66431: PUSH
66432: LD_VAR 0 4
66436: ARRAY
66437: PUSH
66438: LD_VAR 0 2
66442: PUSH
66443: LD_VAR 0 4
66447: ARRAY
66448: PPUSH
66449: CALL_OW 255
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PPUSH
66458: CALL 9712 0 3
66462: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66463: LD_VAR 0 2
66467: PUSH
66468: LD_VAR 0 4
66472: ARRAY
66473: PPUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 255
66483: PPUSH
66484: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66488: LD_VAR 0 2
66492: PUSH
66493: LD_VAR 0 4
66497: ARRAY
66498: PPUSH
66499: CALL_OW 141
// end ;
66503: GO 66335
66505: POP
66506: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66507: LD_VAR 0 1
66511: PPUSH
66512: LD_EXP 91
66516: PUSH
66517: LD_VAR 0 5
66521: ARRAY
66522: PUSH
66523: LD_INT 0
66525: PLUS
66526: PPUSH
66527: CALL_OW 505
// end ;
66531: LD_VAR 0 3
66535: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66536: LD_INT 0
66538: PPUSH
66539: PPUSH
66540: PPUSH
66541: PPUSH
// if not hack in hackTanks then
66542: LD_VAR 0 1
66546: PUSH
66547: LD_EXP 90
66551: IN
66552: NOT
66553: IFFALSE 66557
// exit ;
66555: GO 66797
// index := GetElementIndex ( hackTanks , hack ) ;
66557: LD_ADDR_VAR 0 4
66561: PUSH
66562: LD_EXP 90
66566: PPUSH
66567: LD_VAR 0 1
66571: PPUSH
66572: CALL 9497 0 2
66576: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66577: LD_ADDR_VAR 0 3
66581: PUSH
66582: DOUBLE
66583: LD_EXP 91
66587: PUSH
66588: LD_VAR 0 4
66592: ARRAY
66593: INC
66594: ST_TO_ADDR
66595: LD_INT 1
66597: PUSH
66598: FOR_DOWNTO
66599: IFFALSE 66771
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66601: LD_ADDR_VAR 0 5
66605: PUSH
66606: LD_EXP 91
66610: PUSH
66611: LD_VAR 0 4
66615: ARRAY
66616: PUSH
66617: LD_VAR 0 3
66621: ARRAY
66622: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66623: LD_VAR 0 5
66627: PUSH
66628: LD_INT 1
66630: ARRAY
66631: PPUSH
66632: CALL_OW 302
66636: NOT
66637: PUSH
66638: LD_VAR 0 5
66642: PUSH
66643: LD_INT 1
66645: ARRAY
66646: PPUSH
66647: CALL_OW 255
66651: PUSH
66652: LD_VAR 0 1
66656: PPUSH
66657: CALL_OW 255
66661: NONEQUAL
66662: OR
66663: IFFALSE 66769
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66665: LD_VAR 0 5
66669: PUSH
66670: LD_INT 1
66672: ARRAY
66673: PPUSH
66674: CALL_OW 305
66678: PUSH
66679: LD_VAR 0 5
66683: PUSH
66684: LD_INT 1
66686: ARRAY
66687: PPUSH
66688: CALL_OW 255
66692: PUSH
66693: LD_VAR 0 1
66697: PPUSH
66698: CALL_OW 255
66702: EQUAL
66703: AND
66704: IFFALSE 66728
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66706: LD_VAR 0 5
66710: PUSH
66711: LD_INT 1
66713: ARRAY
66714: PPUSH
66715: LD_VAR 0 5
66719: PUSH
66720: LD_INT 2
66722: ARRAY
66723: PPUSH
66724: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66728: LD_ADDR_EXP 91
66732: PUSH
66733: LD_EXP 91
66737: PPUSH
66738: LD_VAR 0 4
66742: PPUSH
66743: LD_EXP 91
66747: PUSH
66748: LD_VAR 0 4
66752: ARRAY
66753: PPUSH
66754: LD_VAR 0 3
66758: PPUSH
66759: CALL_OW 3
66763: PPUSH
66764: CALL_OW 1
66768: ST_TO_ADDR
// end ; end ;
66769: GO 66598
66771: POP
66772: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66773: LD_VAR 0 1
66777: PPUSH
66778: LD_EXP 91
66782: PUSH
66783: LD_VAR 0 4
66787: ARRAY
66788: PUSH
66789: LD_INT 0
66791: PLUS
66792: PPUSH
66793: CALL_OW 505
// end ;
66797: LD_VAR 0 2
66801: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66802: LD_INT 0
66804: PPUSH
66805: PPUSH
66806: PPUSH
66807: PPUSH
// if not hack in hackTanks then
66808: LD_VAR 0 1
66812: PUSH
66813: LD_EXP 90
66817: IN
66818: NOT
66819: IFFALSE 66823
// exit ;
66821: GO 66908
// index := GetElementIndex ( hackTanks , hack ) ;
66823: LD_ADDR_VAR 0 5
66827: PUSH
66828: LD_EXP 90
66832: PPUSH
66833: LD_VAR 0 1
66837: PPUSH
66838: CALL 9497 0 2
66842: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66843: LD_ADDR_VAR 0 4
66847: PUSH
66848: DOUBLE
66849: LD_INT 1
66851: DEC
66852: ST_TO_ADDR
66853: LD_EXP 91
66857: PUSH
66858: LD_VAR 0 5
66862: ARRAY
66863: PUSH
66864: FOR_TO
66865: IFFALSE 66906
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66867: LD_EXP 91
66871: PUSH
66872: LD_VAR 0 5
66876: ARRAY
66877: PUSH
66878: LD_VAR 0 4
66882: ARRAY
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PUSH
66888: LD_VAR 0 2
66892: EQUAL
66893: IFFALSE 66904
// KillUnit ( vehicle ) ;
66895: LD_VAR 0 2
66899: PPUSH
66900: CALL_OW 66
66904: GO 66864
66906: POP
66907: POP
// end ;
66908: LD_VAR 0 3
66912: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66913: LD_EXP 95
66917: NOT
66918: IFFALSE 66953
66920: GO 66922
66922: DISABLE
// begin initMiner := true ;
66923: LD_ADDR_EXP 95
66927: PUSH
66928: LD_INT 1
66930: ST_TO_ADDR
// minersList := [ ] ;
66931: LD_ADDR_EXP 96
66935: PUSH
66936: EMPTY
66937: ST_TO_ADDR
// minerMinesList := [ ] ;
66938: LD_ADDR_EXP 97
66942: PUSH
66943: EMPTY
66944: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66945: LD_ADDR_EXP 98
66949: PUSH
66950: LD_INT 5
66952: ST_TO_ADDR
// end ;
66953: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66954: LD_EXP 95
66958: PUSH
66959: LD_INT 34
66961: PUSH
66962: LD_INT 81
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PPUSH
66969: CALL_OW 69
66973: AND
66974: IFFALSE 67435
66976: GO 66978
66978: DISABLE
66979: LD_INT 0
66981: PPUSH
66982: PPUSH
66983: PPUSH
66984: PPUSH
// begin enable ;
66985: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66986: LD_ADDR_VAR 0 1
66990: PUSH
66991: LD_INT 34
66993: PUSH
66994: LD_INT 81
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PPUSH
67001: CALL_OW 69
67005: PUSH
67006: FOR_IN
67007: IFFALSE 67079
// begin if not i in minersList then
67009: LD_VAR 0 1
67013: PUSH
67014: LD_EXP 96
67018: IN
67019: NOT
67020: IFFALSE 67077
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67022: LD_ADDR_EXP 96
67026: PUSH
67027: LD_EXP 96
67031: PPUSH
67032: LD_EXP 96
67036: PUSH
67037: LD_INT 1
67039: PLUS
67040: PPUSH
67041: LD_VAR 0 1
67045: PPUSH
67046: CALL_OW 1
67050: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67051: LD_ADDR_EXP 97
67055: PUSH
67056: LD_EXP 97
67060: PPUSH
67061: LD_EXP 97
67065: PUSH
67066: LD_INT 1
67068: PLUS
67069: PPUSH
67070: EMPTY
67071: PPUSH
67072: CALL_OW 1
67076: ST_TO_ADDR
// end end ;
67077: GO 67006
67079: POP
67080: POP
// for i := minerMinesList downto 1 do
67081: LD_ADDR_VAR 0 1
67085: PUSH
67086: DOUBLE
67087: LD_EXP 97
67091: INC
67092: ST_TO_ADDR
67093: LD_INT 1
67095: PUSH
67096: FOR_DOWNTO
67097: IFFALSE 67433
// begin if IsLive ( minersList [ i ] ) then
67099: LD_EXP 96
67103: PUSH
67104: LD_VAR 0 1
67108: ARRAY
67109: PPUSH
67110: CALL_OW 300
67114: IFFALSE 67142
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67116: LD_EXP 96
67120: PUSH
67121: LD_VAR 0 1
67125: ARRAY
67126: PPUSH
67127: LD_EXP 97
67131: PUSH
67132: LD_VAR 0 1
67136: ARRAY
67137: PPUSH
67138: CALL_OW 505
// if not minerMinesList [ i ] then
67142: LD_EXP 97
67146: PUSH
67147: LD_VAR 0 1
67151: ARRAY
67152: NOT
67153: IFFALSE 67157
// continue ;
67155: GO 67096
// for j := minerMinesList [ i ] downto 1 do
67157: LD_ADDR_VAR 0 2
67161: PUSH
67162: DOUBLE
67163: LD_EXP 97
67167: PUSH
67168: LD_VAR 0 1
67172: ARRAY
67173: INC
67174: ST_TO_ADDR
67175: LD_INT 1
67177: PUSH
67178: FOR_DOWNTO
67179: IFFALSE 67429
// begin side := GetSide ( minersList [ i ] ) ;
67181: LD_ADDR_VAR 0 3
67185: PUSH
67186: LD_EXP 96
67190: PUSH
67191: LD_VAR 0 1
67195: ARRAY
67196: PPUSH
67197: CALL_OW 255
67201: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67202: LD_ADDR_VAR 0 4
67206: PUSH
67207: LD_EXP 97
67211: PUSH
67212: LD_VAR 0 1
67216: ARRAY
67217: PUSH
67218: LD_VAR 0 2
67222: ARRAY
67223: PUSH
67224: LD_INT 1
67226: ARRAY
67227: PPUSH
67228: LD_EXP 97
67232: PUSH
67233: LD_VAR 0 1
67237: ARRAY
67238: PUSH
67239: LD_VAR 0 2
67243: ARRAY
67244: PUSH
67245: LD_INT 2
67247: ARRAY
67248: PPUSH
67249: CALL_OW 428
67253: ST_TO_ADDR
// if not tmp then
67254: LD_VAR 0 4
67258: NOT
67259: IFFALSE 67263
// continue ;
67261: GO 67178
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67263: LD_VAR 0 4
67267: PUSH
67268: LD_INT 81
67270: PUSH
67271: LD_VAR 0 3
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PPUSH
67280: CALL_OW 69
67284: IN
67285: PUSH
67286: LD_EXP 97
67290: PUSH
67291: LD_VAR 0 1
67295: ARRAY
67296: PUSH
67297: LD_VAR 0 2
67301: ARRAY
67302: PUSH
67303: LD_INT 1
67305: ARRAY
67306: PPUSH
67307: LD_EXP 97
67311: PUSH
67312: LD_VAR 0 1
67316: ARRAY
67317: PUSH
67318: LD_VAR 0 2
67322: ARRAY
67323: PUSH
67324: LD_INT 2
67326: ARRAY
67327: PPUSH
67328: CALL_OW 458
67332: AND
67333: IFFALSE 67427
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67335: LD_EXP 97
67339: PUSH
67340: LD_VAR 0 1
67344: ARRAY
67345: PUSH
67346: LD_VAR 0 2
67350: ARRAY
67351: PUSH
67352: LD_INT 1
67354: ARRAY
67355: PPUSH
67356: LD_EXP 97
67360: PUSH
67361: LD_VAR 0 1
67365: ARRAY
67366: PUSH
67367: LD_VAR 0 2
67371: ARRAY
67372: PUSH
67373: LD_INT 2
67375: ARRAY
67376: PPUSH
67377: LD_VAR 0 3
67381: PPUSH
67382: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67386: LD_ADDR_EXP 97
67390: PUSH
67391: LD_EXP 97
67395: PPUSH
67396: LD_VAR 0 1
67400: PPUSH
67401: LD_EXP 97
67405: PUSH
67406: LD_VAR 0 1
67410: ARRAY
67411: PPUSH
67412: LD_VAR 0 2
67416: PPUSH
67417: CALL_OW 3
67421: PPUSH
67422: CALL_OW 1
67426: ST_TO_ADDR
// end ; end ;
67427: GO 67178
67429: POP
67430: POP
// end ;
67431: GO 67096
67433: POP
67434: POP
// end ;
67435: PPOPN 4
67437: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67438: LD_INT 0
67440: PPUSH
67441: PPUSH
// result := false ;
67442: LD_ADDR_VAR 0 4
67446: PUSH
67447: LD_INT 0
67449: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67450: LD_VAR 0 1
67454: PPUSH
67455: CALL_OW 264
67459: PUSH
67460: LD_INT 81
67462: EQUAL
67463: NOT
67464: IFFALSE 67468
// exit ;
67466: GO 67708
// index := GetElementIndex ( minersList , unit ) ;
67468: LD_ADDR_VAR 0 5
67472: PUSH
67473: LD_EXP 96
67477: PPUSH
67478: LD_VAR 0 1
67482: PPUSH
67483: CALL 9497 0 2
67487: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67488: LD_EXP 97
67492: PUSH
67493: LD_VAR 0 5
67497: ARRAY
67498: PUSH
67499: LD_EXP 98
67503: GREATEREQUAL
67504: IFFALSE 67508
// exit ;
67506: GO 67708
// ComMoveXY ( unit , x , y ) ;
67508: LD_VAR 0 1
67512: PPUSH
67513: LD_VAR 0 2
67517: PPUSH
67518: LD_VAR 0 3
67522: PPUSH
67523: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67527: LD_INT 35
67529: PPUSH
67530: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67534: LD_VAR 0 1
67538: PPUSH
67539: LD_VAR 0 2
67543: PPUSH
67544: LD_VAR 0 3
67548: PPUSH
67549: CALL 41258 0 3
67553: NOT
67554: PUSH
67555: LD_VAR 0 1
67559: PPUSH
67560: CALL_OW 314
67564: AND
67565: IFFALSE 67569
// exit ;
67567: GO 67708
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67569: LD_VAR 0 2
67573: PPUSH
67574: LD_VAR 0 3
67578: PPUSH
67579: CALL_OW 428
67583: PUSH
67584: LD_VAR 0 1
67588: EQUAL
67589: PUSH
67590: LD_VAR 0 1
67594: PPUSH
67595: CALL_OW 314
67599: NOT
67600: AND
67601: IFFALSE 67527
// PlaySoundXY ( x , y , PlantMine ) ;
67603: LD_VAR 0 2
67607: PPUSH
67608: LD_VAR 0 3
67612: PPUSH
67613: LD_STRING PlantMine
67615: PPUSH
67616: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67620: LD_VAR 0 2
67624: PPUSH
67625: LD_VAR 0 3
67629: PPUSH
67630: LD_VAR 0 1
67634: PPUSH
67635: CALL_OW 255
67639: PPUSH
67640: LD_INT 0
67642: PPUSH
67643: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67647: LD_ADDR_EXP 97
67651: PUSH
67652: LD_EXP 97
67656: PPUSH
67657: LD_VAR 0 5
67661: PUSH
67662: LD_EXP 97
67666: PUSH
67667: LD_VAR 0 5
67671: ARRAY
67672: PUSH
67673: LD_INT 1
67675: PLUS
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PPUSH
67681: LD_VAR 0 2
67685: PUSH
67686: LD_VAR 0 3
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PPUSH
67695: CALL 9712 0 3
67699: ST_TO_ADDR
// result := true ;
67700: LD_ADDR_VAR 0 4
67704: PUSH
67705: LD_INT 1
67707: ST_TO_ADDR
// end ;
67708: LD_VAR 0 4
67712: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67713: LD_INT 0
67715: PPUSH
67716: PPUSH
67717: PPUSH
// if not unit in minersList then
67718: LD_VAR 0 1
67722: PUSH
67723: LD_EXP 96
67727: IN
67728: NOT
67729: IFFALSE 67733
// exit ;
67731: GO 68125
// index := GetElementIndex ( minersList , unit ) ;
67733: LD_ADDR_VAR 0 6
67737: PUSH
67738: LD_EXP 96
67742: PPUSH
67743: LD_VAR 0 1
67747: PPUSH
67748: CALL 9497 0 2
67752: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67753: LD_ADDR_VAR 0 5
67757: PUSH
67758: DOUBLE
67759: LD_EXP 97
67763: PUSH
67764: LD_VAR 0 6
67768: ARRAY
67769: INC
67770: ST_TO_ADDR
67771: LD_INT 1
67773: PUSH
67774: FOR_DOWNTO
67775: IFFALSE 67936
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67777: LD_EXP 97
67781: PUSH
67782: LD_VAR 0 6
67786: ARRAY
67787: PUSH
67788: LD_VAR 0 5
67792: ARRAY
67793: PUSH
67794: LD_INT 1
67796: ARRAY
67797: PUSH
67798: LD_VAR 0 2
67802: EQUAL
67803: PUSH
67804: LD_EXP 97
67808: PUSH
67809: LD_VAR 0 6
67813: ARRAY
67814: PUSH
67815: LD_VAR 0 5
67819: ARRAY
67820: PUSH
67821: LD_INT 2
67823: ARRAY
67824: PUSH
67825: LD_VAR 0 3
67829: EQUAL
67830: AND
67831: IFFALSE 67934
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67833: LD_EXP 97
67837: PUSH
67838: LD_VAR 0 6
67842: ARRAY
67843: PUSH
67844: LD_VAR 0 5
67848: ARRAY
67849: PUSH
67850: LD_INT 1
67852: ARRAY
67853: PPUSH
67854: LD_EXP 97
67858: PUSH
67859: LD_VAR 0 6
67863: ARRAY
67864: PUSH
67865: LD_VAR 0 5
67869: ARRAY
67870: PUSH
67871: LD_INT 2
67873: ARRAY
67874: PPUSH
67875: LD_VAR 0 1
67879: PPUSH
67880: CALL_OW 255
67884: PPUSH
67885: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67889: LD_ADDR_EXP 97
67893: PUSH
67894: LD_EXP 97
67898: PPUSH
67899: LD_VAR 0 6
67903: PPUSH
67904: LD_EXP 97
67908: PUSH
67909: LD_VAR 0 6
67913: ARRAY
67914: PPUSH
67915: LD_VAR 0 5
67919: PPUSH
67920: CALL_OW 3
67924: PPUSH
67925: CALL_OW 1
67929: ST_TO_ADDR
// exit ;
67930: POP
67931: POP
67932: GO 68125
// end ; end ;
67934: GO 67774
67936: POP
67937: POP
// for i := minerMinesList [ index ] downto 1 do
67938: LD_ADDR_VAR 0 5
67942: PUSH
67943: DOUBLE
67944: LD_EXP 97
67948: PUSH
67949: LD_VAR 0 6
67953: ARRAY
67954: INC
67955: ST_TO_ADDR
67956: LD_INT 1
67958: PUSH
67959: FOR_DOWNTO
67960: IFFALSE 68123
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67962: LD_EXP 97
67966: PUSH
67967: LD_VAR 0 6
67971: ARRAY
67972: PUSH
67973: LD_VAR 0 5
67977: ARRAY
67978: PUSH
67979: LD_INT 1
67981: ARRAY
67982: PPUSH
67983: LD_EXP 97
67987: PUSH
67988: LD_VAR 0 6
67992: ARRAY
67993: PUSH
67994: LD_VAR 0 5
67998: ARRAY
67999: PUSH
68000: LD_INT 2
68002: ARRAY
68003: PPUSH
68004: LD_VAR 0 2
68008: PPUSH
68009: LD_VAR 0 3
68013: PPUSH
68014: CALL_OW 298
68018: PUSH
68019: LD_INT 6
68021: LESS
68022: IFFALSE 68121
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68024: LD_EXP 97
68028: PUSH
68029: LD_VAR 0 6
68033: ARRAY
68034: PUSH
68035: LD_VAR 0 5
68039: ARRAY
68040: PUSH
68041: LD_INT 1
68043: ARRAY
68044: PPUSH
68045: LD_EXP 97
68049: PUSH
68050: LD_VAR 0 6
68054: ARRAY
68055: PUSH
68056: LD_VAR 0 5
68060: ARRAY
68061: PUSH
68062: LD_INT 2
68064: ARRAY
68065: PPUSH
68066: LD_VAR 0 1
68070: PPUSH
68071: CALL_OW 255
68075: PPUSH
68076: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68080: LD_ADDR_EXP 97
68084: PUSH
68085: LD_EXP 97
68089: PPUSH
68090: LD_VAR 0 6
68094: PPUSH
68095: LD_EXP 97
68099: PUSH
68100: LD_VAR 0 6
68104: ARRAY
68105: PPUSH
68106: LD_VAR 0 5
68110: PPUSH
68111: CALL_OW 3
68115: PPUSH
68116: CALL_OW 1
68120: ST_TO_ADDR
// end ; end ;
68121: GO 67959
68123: POP
68124: POP
// end ;
68125: LD_VAR 0 4
68129: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68130: LD_INT 0
68132: PPUSH
68133: PPUSH
68134: PPUSH
68135: PPUSH
68136: PPUSH
68137: PPUSH
68138: PPUSH
68139: PPUSH
68140: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68141: LD_VAR 0 1
68145: PPUSH
68146: CALL_OW 264
68150: PUSH
68151: LD_INT 81
68153: EQUAL
68154: NOT
68155: PUSH
68156: LD_VAR 0 1
68160: PUSH
68161: LD_EXP 96
68165: IN
68166: NOT
68167: OR
68168: IFFALSE 68172
// exit ;
68170: GO 68494
// index := GetElementIndex ( minersList , unit ) ;
68172: LD_ADDR_VAR 0 6
68176: PUSH
68177: LD_EXP 96
68181: PPUSH
68182: LD_VAR 0 1
68186: PPUSH
68187: CALL 9497 0 2
68191: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68192: LD_ADDR_VAR 0 8
68196: PUSH
68197: LD_EXP 98
68201: PUSH
68202: LD_EXP 97
68206: PUSH
68207: LD_VAR 0 6
68211: ARRAY
68212: MINUS
68213: ST_TO_ADDR
// if not minesFreeAmount then
68214: LD_VAR 0 8
68218: NOT
68219: IFFALSE 68223
// exit ;
68221: GO 68494
// tmp := [ ] ;
68223: LD_ADDR_VAR 0 7
68227: PUSH
68228: EMPTY
68229: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68230: LD_ADDR_VAR 0 5
68234: PUSH
68235: DOUBLE
68236: LD_INT 1
68238: DEC
68239: ST_TO_ADDR
68240: LD_VAR 0 8
68244: PUSH
68245: FOR_TO
68246: IFFALSE 68441
// begin _d := rand ( 0 , 5 ) ;
68248: LD_ADDR_VAR 0 11
68252: PUSH
68253: LD_INT 0
68255: PPUSH
68256: LD_INT 5
68258: PPUSH
68259: CALL_OW 12
68263: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68264: LD_ADDR_VAR 0 12
68268: PUSH
68269: LD_INT 2
68271: PPUSH
68272: LD_INT 6
68274: PPUSH
68275: CALL_OW 12
68279: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68280: LD_ADDR_VAR 0 9
68284: PUSH
68285: LD_VAR 0 2
68289: PPUSH
68290: LD_VAR 0 11
68294: PPUSH
68295: LD_VAR 0 12
68299: PPUSH
68300: CALL_OW 272
68304: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68305: LD_ADDR_VAR 0 10
68309: PUSH
68310: LD_VAR 0 3
68314: PPUSH
68315: LD_VAR 0 11
68319: PPUSH
68320: LD_VAR 0 12
68324: PPUSH
68325: CALL_OW 273
68329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68330: LD_VAR 0 9
68334: PPUSH
68335: LD_VAR 0 10
68339: PPUSH
68340: CALL_OW 488
68344: PUSH
68345: LD_VAR 0 9
68349: PUSH
68350: LD_VAR 0 10
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_VAR 0 7
68363: IN
68364: NOT
68365: AND
68366: PUSH
68367: LD_VAR 0 9
68371: PPUSH
68372: LD_VAR 0 10
68376: PPUSH
68377: CALL_OW 458
68381: NOT
68382: AND
68383: IFFALSE 68425
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68385: LD_ADDR_VAR 0 7
68389: PUSH
68390: LD_VAR 0 7
68394: PPUSH
68395: LD_VAR 0 7
68399: PUSH
68400: LD_INT 1
68402: PLUS
68403: PPUSH
68404: LD_VAR 0 9
68408: PUSH
68409: LD_VAR 0 10
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PPUSH
68418: CALL_OW 1
68422: ST_TO_ADDR
68423: GO 68439
// i := i - 1 ;
68425: LD_ADDR_VAR 0 5
68429: PUSH
68430: LD_VAR 0 5
68434: PUSH
68435: LD_INT 1
68437: MINUS
68438: ST_TO_ADDR
// end ;
68439: GO 68245
68441: POP
68442: POP
// for i in tmp do
68443: LD_ADDR_VAR 0 5
68447: PUSH
68448: LD_VAR 0 7
68452: PUSH
68453: FOR_IN
68454: IFFALSE 68492
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68456: LD_VAR 0 1
68460: PPUSH
68461: LD_VAR 0 5
68465: PUSH
68466: LD_INT 1
68468: ARRAY
68469: PPUSH
68470: LD_VAR 0 5
68474: PUSH
68475: LD_INT 2
68477: ARRAY
68478: PPUSH
68479: CALL 67438 0 3
68483: NOT
68484: IFFALSE 68490
// exit ;
68486: POP
68487: POP
68488: GO 68494
68490: GO 68453
68492: POP
68493: POP
// end ;
68494: LD_VAR 0 4
68498: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
68499: LD_INT 0
68501: PPUSH
68502: PPUSH
68503: PPUSH
68504: PPUSH
68505: PPUSH
68506: PPUSH
68507: PPUSH
68508: PPUSH
68509: PPUSH
// if GetClass ( unit ) <> class_sniper then
68510: LD_VAR 0 1
68514: PPUSH
68515: CALL_OW 257
68519: PUSH
68520: LD_INT 5
68522: NONEQUAL
68523: IFFALSE 68527
// exit ;
68525: GO 68993
// dist := 8 ;
68527: LD_ADDR_VAR 0 5
68531: PUSH
68532: LD_INT 8
68534: ST_TO_ADDR
// viewRange := 12 ;
68535: LD_ADDR_VAR 0 8
68539: PUSH
68540: LD_INT 12
68542: ST_TO_ADDR
// side := GetSide ( unit ) ;
68543: LD_ADDR_VAR 0 6
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: CALL_OW 255
68557: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68558: LD_INT 61
68560: PPUSH
68561: LD_VAR 0 6
68565: PPUSH
68566: CALL_OW 321
68570: PUSH
68571: LD_INT 2
68573: EQUAL
68574: IFFALSE 68584
// viewRange := 16 ;
68576: LD_ADDR_VAR 0 8
68580: PUSH
68581: LD_INT 16
68583: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68584: LD_VAR 0 1
68588: PPUSH
68589: LD_VAR 0 2
68593: PPUSH
68594: LD_VAR 0 3
68598: PPUSH
68599: CALL_OW 297
68603: PUSH
68604: LD_VAR 0 5
68608: GREATER
68609: IFFALSE 68688
// begin ComMoveXY ( unit , x , y ) ;
68611: LD_VAR 0 1
68615: PPUSH
68616: LD_VAR 0 2
68620: PPUSH
68621: LD_VAR 0 3
68625: PPUSH
68626: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68630: LD_INT 35
68632: PPUSH
68633: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68637: LD_VAR 0 1
68641: PPUSH
68642: LD_VAR 0 2
68646: PPUSH
68647: LD_VAR 0 3
68651: PPUSH
68652: CALL 41258 0 3
68656: NOT
68657: IFFALSE 68661
// exit ;
68659: GO 68993
// until GetDistUnitXY ( unit , x , y ) < dist ;
68661: LD_VAR 0 1
68665: PPUSH
68666: LD_VAR 0 2
68670: PPUSH
68671: LD_VAR 0 3
68675: PPUSH
68676: CALL_OW 297
68680: PUSH
68681: LD_VAR 0 5
68685: LESS
68686: IFFALSE 68630
// end ; ComTurnXY ( unit , x , y ) ;
68688: LD_VAR 0 1
68692: PPUSH
68693: LD_VAR 0 2
68697: PPUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: CALL_OW 118
// repeat if Multiplayer then
68707: LD_OWVAR 4
68711: IFFALSE 68722
// wait ( 35 ) else
68713: LD_INT 35
68715: PPUSH
68716: CALL_OW 67
68720: GO 68729
// wait ( 5 ) ;
68722: LD_INT 5
68724: PPUSH
68725: CALL_OW 67
// _d := GetDir ( unit ) ;
68729: LD_ADDR_VAR 0 11
68733: PUSH
68734: LD_VAR 0 1
68738: PPUSH
68739: CALL_OW 254
68743: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
68744: LD_ADDR_VAR 0 7
68748: PUSH
68749: LD_VAR 0 1
68753: PPUSH
68754: CALL_OW 250
68758: PPUSH
68759: LD_VAR 0 1
68763: PPUSH
68764: CALL_OW 251
68768: PPUSH
68769: LD_VAR 0 2
68773: PPUSH
68774: LD_VAR 0 3
68778: PPUSH
68779: CALL 43866 0 4
68783: ST_TO_ADDR
// until dir = _d ;
68784: LD_VAR 0 7
68788: PUSH
68789: LD_VAR 0 11
68793: EQUAL
68794: IFFALSE 68707
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
68796: LD_ADDR_VAR 0 9
68800: PUSH
68801: LD_VAR 0 1
68805: PPUSH
68806: CALL_OW 250
68810: PPUSH
68811: LD_VAR 0 7
68815: PPUSH
68816: LD_VAR 0 5
68820: PPUSH
68821: CALL_OW 272
68825: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
68826: LD_ADDR_VAR 0 10
68830: PUSH
68831: LD_VAR 0 1
68835: PPUSH
68836: CALL_OW 251
68840: PPUSH
68841: LD_VAR 0 7
68845: PPUSH
68846: LD_VAR 0 5
68850: PPUSH
68851: CALL_OW 273
68855: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68856: LD_VAR 0 9
68860: PPUSH
68861: LD_VAR 0 10
68865: PPUSH
68866: CALL_OW 488
68870: NOT
68871: IFFALSE 68875
// exit ;
68873: GO 68993
// ComAnimCustom ( unit , 1 ) ;
68875: LD_VAR 0 1
68879: PPUSH
68880: LD_INT 1
68882: PPUSH
68883: CALL_OW 592
// p := 0 ;
68887: LD_ADDR_VAR 0 12
68891: PUSH
68892: LD_INT 0
68894: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68895: LD_VAR 0 9
68899: PPUSH
68900: LD_VAR 0 10
68904: PPUSH
68905: LD_VAR 0 6
68909: PPUSH
68910: LD_VAR 0 8
68914: PPUSH
68915: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
68919: LD_INT 35
68921: PPUSH
68922: CALL_OW 67
// p := Inc ( p ) ;
68926: LD_ADDR_VAR 0 12
68930: PUSH
68931: LD_VAR 0 12
68935: PPUSH
68936: CALL 43822 0 1
68940: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
68941: LD_VAR 0 12
68945: PUSH
68946: LD_INT 3
68948: EQUAL
68949: PUSH
68950: LD_VAR 0 1
68954: PPUSH
68955: CALL_OW 302
68959: NOT
68960: OR
68961: PUSH
68962: LD_VAR 0 1
68966: PPUSH
68967: CALL_OW 301
68971: OR
68972: IFFALSE 68919
// RemoveSeeing ( _x , _y , side ) ;
68974: LD_VAR 0 9
68978: PPUSH
68979: LD_VAR 0 10
68983: PPUSH
68984: LD_VAR 0 6
68988: PPUSH
68989: CALL_OW 331
// end ;
68993: LD_VAR 0 4
68997: RET
