// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 561 0 0
// CreateDeposits ;
  12: CALL 732 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 1294 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 37800
  80: PUSH
  81: LD_INT 33600
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// schulzSecondSquad := [ ] ;
 233: LD_ADDR_EXP 26
 237: PUSH
 238: EMPTY
 239: ST_TO_ADDR
// for i := 1 to 3 do
 240: LD_ADDR_VAR 0 2
 244: PUSH
 245: DOUBLE
 246: LD_INT 1
 248: DEC
 249: ST_TO_ADDR
 250: LD_INT 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 293
// begin PrepareHuman ( false , i , 6 ) ;
 256: LD_INT 0
 258: PPUSH
 259: LD_VAR 0 2
 263: PPUSH
 264: LD_INT 6
 266: PPUSH
 267: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_EXP 26
 280: PPUSH
 281: CALL_OW 44
 285: PPUSH
 286: CALL 40527 0 2
 290: ST_TO_ADDR
// end ;
 291: GO 253
 293: POP
 294: POP
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: LD_EXP 20
 304: PUSH
 305: LD_EXP 21
 309: PUSH
 310: LD_EXP 22
 314: PUSH
 315: LD_EXP 23
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_EXP 26
 330: UNION
 331: ST_TO_ADDR
// for i := 1 to 6 do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_INT 6
 344: PUSH
 345: FOR_TO
 346: IFFALSE 471
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 348: LD_INT 13
 350: PPUSH
 351: LD_INT 1
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 25
 359: PUSH
 360: LD_INT 27
 362: PUSH
 363: LD_INT 26
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: LD_VAR 0 2
 379: PUSH
 380: LD_INT 4
 382: MOD
 383: PUSH
 384: LD_INT 1
 386: PLUS
 387: ARRAY
 388: PPUSH
 389: LD_INT 20
 391: PPUSH
 392: CALL 8074 0 5
// un := CreateVehicle ;
 396: LD_ADDR_VAR 0 3
 400: PUSH
 401: CALL_OW 45
 405: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 406: LD_VAR 0 3
 410: PPUSH
 411: LD_INT 2
 413: PPUSH
 414: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 418: LD_VAR 0 3
 422: PPUSH
 423: LD_INT 5
 425: PPUSH
 426: LD_INT 0
 428: PPUSH
 429: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 433: LD_VAR 0 4
 437: PUSH
 438: LD_INT 1
 440: ARRAY
 441: PPUSH
 442: LD_VAR 0 3
 446: PPUSH
 447: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 451: LD_ADDR_VAR 0 4
 455: PUSH
 456: LD_VAR 0 4
 460: PPUSH
 461: LD_INT 1
 463: PPUSH
 464: CALL_OW 3
 468: ST_TO_ADDR
// end ;
 469: GO 345
 471: POP
 472: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 473: LD_INT 14
 475: PPUSH
 476: LD_INT 1
 478: PPUSH
 479: LD_INT 1
 481: PPUSH
 482: LD_INT 27
 484: PPUSH
 485: LD_INT 30
 487: PPUSH
 488: CALL 8074 0 5
// un := CreateVehicle ;
 492: LD_ADDR_VAR 0 3
 496: PUSH
 497: CALL_OW 45
 501: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 514: LD_VAR 0 3
 518: PPUSH
 519: LD_INT 4
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// SetMark ( un , - 2 ) ;
 529: LD_VAR 0 3
 533: PPUSH
 534: LD_INT 2
 536: NEG
 537: PPUSH
 538: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 542: LD_EXP 18
 546: PPUSH
 547: LD_VAR 0 3
 551: PPUSH
 552: CALL_OW 52
// end ; end_of_file end_of_file
 556: LD_VAR 0 1
 560: RET
// export function CreateNature ; var i ; begin
 561: LD_INT 0
 563: PPUSH
 564: PPUSH
// PrepareApeman ( 0 ) ;
 565: LD_INT 0
 567: PPUSH
 568: CALL 36807 0 1
// for i := 1 to 5 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 5
 584: PUSH
 585: FOR_TO
 586: IFFALSE 605
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_INT 8
 595: PPUSH
 596: LD_INT 0
 598: PPUSH
 599: CALL_OW 49
 603: GO 585
 605: POP
 606: POP
// PrepareTiger ( 0 ) ;
 607: LD_INT 0
 609: PPUSH
 610: CALL 36915 0 1
// for i := 1 to 2 do
 614: LD_ADDR_VAR 0 2
 618: PUSH
 619: DOUBLE
 620: LD_INT 1
 622: DEC
 623: ST_TO_ADDR
 624: LD_INT 2
 626: PUSH
 627: FOR_TO
 628: IFFALSE 647
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 8
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
 645: GO 627
 647: POP
 648: POP
// PrepareBird ;
 649: CALL 37096 0 0
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 686
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 669: CALL_OW 44
 673: PPUSH
 674: LD_INT 8
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: CALL_OW 49
 684: GO 666
 686: POP
 687: POP
// PrepareFrog ;
 688: CALL 37016 0 0
// for i := 1 to 3 do
 692: LD_ADDR_VAR 0 2
 696: PUSH
 697: DOUBLE
 698: LD_INT 1
 700: DEC
 701: ST_TO_ADDR
 702: LD_INT 3
 704: PUSH
 705: FOR_TO
 706: IFFALSE 725
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 708: CALL_OW 44
 712: PPUSH
 713: LD_INT 9
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
 723: GO 705
 725: POP
 726: POP
// end ;
 727: LD_VAR 0 1
 731: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
 737: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 738: LD_ADDR_VAR 0 3
 742: PUSH
 743: LD_INT 91
 745: PUSH
 746: LD_INT 13
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 52
 755: PUSH
 756: LD_INT 23
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 115
 765: PUSH
 766: LD_INT 150
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: LD_INT 82
 785: PUSH
 786: LD_INT 42
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: LD_INT 128
 795: PUSH
 796: LD_INT 132
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: ST_TO_ADDR
// for i in oil do
 807: LD_ADDR_VAR 0 2
 811: PUSH
 812: LD_VAR 0 3
 816: PUSH
 817: FOR_IN
 818: IFFALSE 847
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 820: LD_VAR 0 2
 824: PUSH
 825: LD_INT 1
 827: ARRAY
 828: PPUSH
 829: LD_VAR 0 2
 833: PUSH
 834: LD_INT 2
 836: ARRAY
 837: PPUSH
 838: LD_INT 2
 840: PPUSH
 841: CALL_OW 62
 845: GO 817
 847: POP
 848: POP
// for i in sib do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: LD_VAR 0 4
 858: PUSH
 859: FOR_IN
 860: IFFALSE 889
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: PPUSH
 871: LD_VAR 0 2
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: PPUSH
 880: LD_INT 3
 882: PPUSH
 883: CALL_OW 62
 887: GO 859
 889: POP
 890: POP
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
 896: LD_VAR 0 1
 900: PUSH
 901: LD_EXP 18
 905: EQUAL
 906: IFFALSE 915
// YouLost ( Schulz ) ;
 908: LD_STRING Schulz
 910: PPUSH
 911: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
 915: LD_VAR 0 1
 919: PPUSH
 920: CALL_OW 266
 924: PUSH
 925: LD_INT 0
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: IN
 935: IFFALSE 944
// YouLost ( Depot ) ;
 937: LD_STRING Depot
 939: PPUSH
 940: CALL_OW 104
// end ;
 944: PPOPN 1
 946: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
 947: LD_VAR 0 1
 951: PUSH
 952: LD_INT 22
 954: PUSH
 955: LD_INT 2
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 23
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PPUSH
 976: CALL_OW 69
 980: PUSH
 981: LD_EXP 18
 985: DIFF
 986: IN
 987: IFFALSE 1015
// if killerSide = 2 then
 989: LD_VAR 0 2
 993: PUSH
 994: LD_INT 2
 996: EQUAL
 997: IFFALSE 1008
// YouLost ( TeamKiller ) else
 999: LD_STRING TeamKiller
1001: PPUSH
1002: CALL_OW 104
1006: GO 1015
// YouLost ( SoldierKilled ) ;
1008: LD_STRING SoldierKilled
1010: PPUSH
1011: CALL_OW 104
// end ;
1015: PPOPN 3
1017: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1018: LD_ADDR_EXP 3
1022: PUSH
1023: LD_EXP 3
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_VAR 0 4
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PPUSH
1042: CALL 40527 0 2
1046: ST_TO_ADDR
// end ;
1047: PPOPN 4
1049: END
// on SailEvent ( event ) do var i , eng ;
1050: LD_INT 0
1052: PPUSH
1053: PPUSH
// begin if event = 1 then
1054: LD_VAR 0 1
1058: PUSH
1059: LD_INT 1
1061: EQUAL
1062: IFFALSE 1291
// begin ComExitVehicle ( Lemmy ) ;
1064: LD_EXP 20
1068: PPUSH
1069: CALL_OW 121
// wait ( 1 ) ;
1073: LD_INT 1
1075: PPUSH
1076: CALL_OW 67
// AddComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1080: LD_EXP 20
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: LD_INT 69
1090: PPUSH
1091: LD_INT 14
1093: PPUSH
1094: LD_INT 2
1096: PPUSH
1097: CALL_OW 205
// wait ( 0 0$2 ) ;
1101: LD_INT 70
1103: PPUSH
1104: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1108: LD_ADDR_VAR 0 2
1112: PUSH
1113: LD_EXP 26
1117: PPUSH
1118: LD_INT 3
1120: PUSH
1121: LD_INT 25
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 72
1139: PUSH
1140: LD_EXP 21
1144: UNION
1145: PUSH
1146: LD_EXP 23
1150: UNION
1151: PUSH
1152: LD_EXP 22
1156: UNION
1157: PUSH
1158: FOR_IN
1159: IFFALSE 1194
// begin ComExitVehicle ( i ) ;
1161: LD_VAR 0 2
1165: PPUSH
1166: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1170: LD_INT 10
1172: PPUSH
1173: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1177: LD_VAR 0 2
1181: PPUSH
1182: LD_INT 69
1184: PPUSH
1185: LD_INT 14
1187: PPUSH
1188: CALL_OW 171
// end ;
1192: GO 1158
1194: POP
1195: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1196: LD_ADDR_VAR 0 3
1200: PUSH
1201: LD_EXP 26
1205: PPUSH
1206: LD_INT 25
1208: PUSH
1209: LD_INT 2
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: ST_TO_ADDR
// if not eng then
1221: LD_VAR 0 3
1225: NOT
1226: IFFALSE 1230
// exit ;
1228: GO 1291
// ComExitVehicle ( eng ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1239: LD_INT 10
1241: PPUSH
1242: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_INT 55
1253: PPUSH
1254: LD_INT 42
1256: PPUSH
1257: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
1261: LD_VAR 0 3
1265: PPUSH
1266: LD_INT 84
1268: PPUSH
1269: LD_INT 47
1271: PPUSH
1272: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
1276: LD_VAR 0 3
1280: PPUSH
1281: LD_INT 70
1283: PPUSH
1284: LD_INT 19
1286: PPUSH
1287: CALL_OW 171
// end ; end ; end_of_file
1291: PPOPN 3
1293: END
// export function Action ; var i ; begin
1294: LD_INT 0
1296: PPUSH
1297: PPUSH
// Video ( true ) ;
1298: LD_INT 1
1300: PPUSH
1301: CALL 40499 0 1
// CenterNowOnXY ( 18 , 15 ) ;
1305: LD_INT 18
1307: PPUSH
1308: LD_INT 15
1310: PPUSH
1311: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
1315: LD_EXP 18
1319: PPUSH
1320: LD_INT 80
1322: PPUSH
1323: LD_INT 28
1325: PPUSH
1326: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
1330: LD_EXP 20
1334: PPUSH
1335: LD_INT 61
1337: PPUSH
1338: LD_INT 17
1340: PPUSH
1341: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
1345: LD_EXP 22
1349: PPUSH
1350: LD_INT 72
1352: PPUSH
1353: LD_INT 28
1355: PPUSH
1356: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
1360: LD_EXP 23
1364: PPUSH
1365: LD_INT 74
1367: PPUSH
1368: LD_INT 22
1370: PPUSH
1371: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
1375: LD_EXP 21
1379: PPUSH
1380: LD_INT 68
1382: PPUSH
1383: LD_INT 22
1385: PPUSH
1386: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
1390: LD_EXP 26
1394: PPUSH
1395: LD_INT 83
1397: PPUSH
1398: LD_INT 37
1400: PPUSH
1401: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
1405: LD_EXP 18
1409: PPUSH
1410: LD_STRING DL-Intro-8
1412: PPUSH
1413: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1417: LD_EXP 18
1421: PPUSH
1422: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
1426: LD_EXP 18
1430: PPUSH
1431: LD_STRING DL-Intro-9
1433: PPUSH
1434: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1438: LD_EXP 18
1442: PPUSH
1443: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
1447: LD_EXP 18
1451: PPUSH
1452: LD_STRING DL-Intro-10
1454: PPUSH
1455: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
1459: LD_INT 80
1461: PPUSH
1462: LD_INT 28
1464: PPUSH
1465: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1469: LD_INT 35
1471: PPUSH
1472: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
1476: LD_INT 22
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 92
1488: PUSH
1489: LD_INT 80
1491: PUSH
1492: LD_INT 28
1494: PUSH
1495: LD_INT 6
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: IFFALSE 1469
// RaiseSailEvent ( 1 ) ;
1514: LD_INT 1
1516: PPUSH
1517: CALL_OW 427
// wait ( 0 0$0.3 ) ;
1521: LD_INT 10
1523: PPUSH
1524: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
1528: LD_EXP 18
1532: PPUSH
1533: LD_STRING DL-Intro-11
1535: PPUSH
1536: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
1540: LD_EXP 24
1544: PPUSH
1545: LD_STRING DOm-Intro-12
1547: PPUSH
1548: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
1552: LD_EXP 24
1556: PPUSH
1557: LD_STRING DOm-Intro-13
1559: PPUSH
1560: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
1564: LD_EXP 18
1568: PPUSH
1569: LD_STRING DL-Intro-14
1571: PPUSH
1572: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
1576: LD_EXP 18
1580: PPUSH
1581: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1585: LD_INT 10
1587: PPUSH
1588: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
1592: LD_EXP 18
1596: PPUSH
1597: LD_INT 73
1599: PPUSH
1600: LD_INT 17
1602: PPUSH
1603: CALL_OW 111
// wait ( 0 0$2 ) ;
1607: LD_INT 70
1609: PPUSH
1610: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
1614: LD_EXP 18
1618: PPUSH
1619: LD_STRING DL-Intro-15
1621: PPUSH
1622: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
1626: LD_EXP 20
1630: PPUSH
1631: LD_STRING DLt-Intro-16
1633: PPUSH
1634: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
1638: LD_EXP 20
1642: PPUSH
1643: LD_STRING DLt-Intro-17
1645: PPUSH
1646: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
1650: LD_INT 35
1652: PPUSH
1653: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
1657: LD_INT 22
1659: PUSH
1660: LD_INT 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 30
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL_OW 69
1685: IFFALSE 1650
// Video ( false ) ;
1687: LD_INT 0
1689: PPUSH
1690: CALL 40499 0 1
// tick := 0 ;
1694: LD_ADDR_OWVAR 1
1698: PUSH
1699: LD_INT 0
1701: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
1702: LD_STRING M1
1704: PPUSH
1705: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
1709: LD_INT 0
1711: PPUSH
1712: LD_INT 2
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
1722: LD_INT 35
1724: PPUSH
1725: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
1729: LD_INT 22
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 57
1751: PUSH
1752: EMPTY
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: PPUSH
1760: CALL_OW 69
1764: IFFALSE 1722
// DialogueOn ;
1766: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
1770: LD_EXP 18
1774: PPUSH
1775: LD_STRING DL-Intro-18
1777: PPUSH
1778: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
1782: LD_EXP 18
1786: PPUSH
1787: LD_STRING DL-Intro-19
1789: PPUSH
1790: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
1794: LD_EXP 18
1798: PPUSH
1799: LD_STRING DL-Intro-20
1801: PPUSH
1802: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
1806: LD_EXP 20
1810: PPUSH
1811: LD_STRING DLt-Intro-21
1813: PPUSH
1814: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_STRING DLt-Intro-22
1825: PPUSH
1826: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
1830: LD_EXP 20
1834: PPUSH
1835: LD_STRING DLt-Intro-23
1837: PPUSH
1838: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
1842: LD_EXP 18
1846: PPUSH
1847: LD_STRING DL-Intro-24
1849: PPUSH
1850: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
1854: LD_EXP 20
1858: PPUSH
1859: LD_STRING DLt-Intro-25
1861: PPUSH
1862: CALL_OW 88
// DialogueOff ;
1866: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
1870: LD_STRING M2
1872: PPUSH
1873: CALL_OW 337
// Query ( Prepare ) ;
1877: LD_STRING Prepare
1879: PPUSH
1880: CALL_OW 97
// end ;
1884: LD_VAR 0 1
1888: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
1889: LD_INT 22
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 30
1901: PUSH
1902: LD_INT 15
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 69
1917: IFFALSE 1934
1919: GO 1921
1921: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
1922: LD_EXP 18
1926: PPUSH
1927: LD_STRING DL-Cam-1
1929: PPUSH
1930: CALL_OW 88
1934: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
1935: LD_OWVAR 1
1939: PUSH
1940: LD_EXP 4
1944: PUSH
1945: LD_INT 2
1947: DIV
1948: GREATEREQUAL
1949: IFFALSE 1974
1951: GO 1953
1953: DISABLE
// begin DialogueOn ;
1954: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
1958: LD_EXP 18
1962: PPUSH
1963: LD_STRING DL-Faster-1
1965: PPUSH
1966: CALL_OW 88
// DialogueOff ;
1970: CALL_OW 7
// end ;
1974: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
1975: LD_OWVAR 1
1979: PUSH
1980: LD_EXP 4
1984: PUSH
1985: LD_INT 2
1987: DIV
1988: PUSH
1989: LD_INT 10500
1991: PLUS
1992: GREATEREQUAL
1993: IFFALSE 2018
1995: GO 1997
1997: DISABLE
// begin DialogueOn ;
1998: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2002: LD_EXP 18
2006: PPUSH
2007: LD_STRING DL-Faster-2
2009: PPUSH
2010: CALL_OW 88
// DialogueOff ;
2014: CALL_OW 7
// end ;
2018: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2019: LD_INT 22
2021: PUSH
2022: LD_INT 2
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 2
2031: PUSH
2032: LD_INT 30
2034: PUSH
2035: LD_INT 6
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: LD_INT 30
2044: PUSH
2045: LD_INT 7
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PPUSH
2072: CALL_OW 69
2076: PUSH
2077: LD_INT 22
2079: PUSH
2080: LD_INT 2
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 3
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PPUSH
2101: CALL_OW 69
2105: AND
2106: PUSH
2107: LD_INT 22
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 32
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PPUSH
2131: CALL_OW 69
2135: PUSH
2136: LD_INT 3
2138: GREATEREQUAL
2139: AND
2140: PUSH
2141: LD_INT 22
2143: PUSH
2144: LD_INT 2
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 30
2153: PUSH
2154: LD_INT 5
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PPUSH
2165: CALL_OW 69
2169: AND
2170: PUSH
2171: LD_INT 22
2173: PUSH
2174: LD_INT 2
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 2
2183: PUSH
2184: LD_INT 30
2186: PUSH
2187: LD_INT 26
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 30
2196: PUSH
2197: LD_INT 28
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PPUSH
2213: CALL_OW 69
2217: AND
2218: IFFALSE 2238
2220: GO 2222
2222: DISABLE
// begin baseDone := true ;
2223: LD_ADDR_EXP 5
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
2231: LD_STRING M1out
2233: PPUSH
2234: CALL_OW 337
// end ;
2238: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
2239: LD_EXP 5
2243: PUSH
2244: LD_INT 22
2246: PUSH
2247: LD_INT 2
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 21
2256: PUSH
2257: LD_INT 2
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: LD_INT 3
2266: PUSH
2267: LD_INT 2
2269: PUSH
2270: LD_INT 34
2272: PUSH
2273: LD_INT 32
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 34
2282: PUSH
2283: LD_INT 88
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PPUSH
2304: CALL_OW 69
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 2
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 23
2331: PUSH
2332: LD_INT 2
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: LIST
2343: PPUSH
2344: CALL_OW 69
2348: PPUSH
2349: CALL 5161 0 1
2353: GREATEREQUAL
2354: AND
2355: IFFALSE 2447
2357: GO 2359
2359: DISABLE
// begin DialogueOn ;
2360: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
2364: LD_EXP 18
2368: PPUSH
2369: LD_STRING DL-Ready-1
2371: PPUSH
2372: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
2376: LD_INT 22
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 23
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PPUSH
2400: CALL_OW 69
2404: IFFALSE 2418
// Say ( Schulz , DL-Ready-2 ) ;
2406: LD_EXP 18
2410: PPUSH
2411: LD_STRING DL-Ready-2
2413: PPUSH
2414: CALL_OW 88
// DialogueOff ;
2418: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
2422: LD_STRING M3
2424: PPUSH
2425: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
2429: LD_INT 7
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL_OW 424
// canGo := true ;
2439: LD_ADDR_EXP 6
2443: PUSH
2444: LD_INT 1
2446: ST_TO_ADDR
// end ;
2447: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles ;
2448: LD_EXP 6
2452: PUSH
2453: LD_INT 7
2455: PPUSH
2456: LD_INT 22
2458: PUSH
2459: LD_INT 2
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 21
2468: PUSH
2469: LD_INT 2
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 33
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 58
2491: PUSH
2492: EMPTY
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: PPUSH
2505: CALL_OW 70
2509: PPUSH
2510: CALL 5161 0 1
2514: PUSH
2515: LD_INT 22
2517: PUSH
2518: LD_INT 2
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 21
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 23
2537: PUSH
2538: LD_INT 2
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: PPUSH
2550: CALL_OW 69
2554: PPUSH
2555: CALL 5161 0 1
2559: GREATEREQUAL
2560: AND
2561: PUSH
2562: LD_INT 22
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 21
2574: PUSH
2575: LD_INT 1
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 3
2584: PUSH
2585: LD_INT 55
2587: PUSH
2588: EMPTY
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: LD_INT 23
2597: PUSH
2598: LD_INT 2
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PPUSH
2611: CALL_OW 69
2615: PPUSH
2616: CALL 5161 0 1
2620: PUSH
2621: LD_INT 0
2623: EQUAL
2624: AND
2625: IFFALSE 2934
2627: GO 2629
2629: DISABLE
2630: LD_INT 0
2632: PPUSH
2633: PPUSH
2634: PPUSH
// begin enable ;
2635: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
2636: LD_ADDR_VAR 0 2
2640: PUSH
2641: LD_INT 7
2643: PPUSH
2644: LD_INT 22
2646: PUSH
2647: LD_INT 2
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 21
2656: PUSH
2657: LD_INT 2
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 70
2672: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
2673: LD_VAR 0 2
2677: PPUSH
2678: LD_INT 2
2680: PUSH
2681: LD_INT 34
2683: PUSH
2684: LD_INT 88
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 34
2693: PUSH
2694: LD_INT 32
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: IFFALSE 2721
// begin Query ( InvalidWeapon ) ;
2712: LD_STRING InvalidWeapon
2714: PPUSH
2715: CALL_OW 97
// exit ;
2719: GO 2934
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
2721: LD_VAR 0 2
2725: PPUSH
2726: LD_INT 3
2728: PUSH
2729: LD_INT 24
2731: PUSH
2732: LD_INT 1000
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 72
2747: IFFALSE 2758
// begin Query ( HealthLevel ) ;
2749: LD_STRING HealthLevel
2751: PPUSH
2752: CALL_OW 97
// exit ;
2756: GO 2934
// end ; for i in tmp do
2758: LD_ADDR_VAR 0 1
2762: PUSH
2763: LD_VAR 0 2
2767: PUSH
2768: FOR_IN
2769: IFFALSE 2814
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 80 then
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 262
2780: PUSH
2781: LD_INT 1
2783: EQUAL
2784: PUSH
2785: LD_VAR 0 1
2789: PPUSH
2790: CALL_OW 261
2794: PUSH
2795: LD_INT 80
2797: LESS
2798: AND
2799: IFFALSE 2812
// begin Query ( FuelLevel ) ;
2801: LD_STRING FuelLevel
2803: PPUSH
2804: CALL_OW 97
// exit ;
2808: POP
2809: POP
2810: GO 2934
// end ;
2812: GO 2768
2814: POP
2815: POP
// saveVehicles := [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// for i in tmp do
2823: LD_ADDR_VAR 0 1
2827: PUSH
2828: LD_VAR 0 2
2832: PUSH
2833: FOR_IN
2834: IFFALSE 2932
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) ] ) ;
2836: LD_ADDR_VAR 0 3
2840: PUSH
2841: LD_VAR 0 3
2845: PPUSH
2846: LD_VAR 0 1
2850: PPUSH
2851: CALL_OW 265
2855: PUSH
2856: LD_VAR 0 1
2860: PPUSH
2861: CALL_OW 262
2865: PUSH
2866: LD_VAR 0 1
2870: PPUSH
2871: CALL_OW 263
2875: PUSH
2876: LD_VAR 0 1
2880: PPUSH
2881: CALL_OW 264
2885: PUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: CALL_OW 248
2895: PUSH
2896: LD_VAR 0 1
2900: PPUSH
2901: CALL_OW 261
2905: PUSH
2906: LD_VAR 0 1
2910: PPUSH
2911: CALL_OW 271
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL 40527 0 2
2929: ST_TO_ADDR
2930: GO 2833
2932: POP
2933: POP
// end ; end_of_file
2934: PPOPN 3
2936: END
// every 0 0$25 + 0 0$30 trigger tick < 5 5$00 do
2937: LD_OWVAR 1
2941: PUSH
2942: LD_INT 10500
2944: LESS
2945: IFFALSE 2978
2947: GO 2949
2949: DISABLE
// begin enable ;
2950: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 5
2956: PPUSH
2957: CALL_OW 12
2961: PPUSH
2962: LD_INT 85
2964: PPUSH
2965: LD_INT 44
2967: PPUSH
2968: LD_INT 30
2970: PPUSH
2971: LD_INT 1
2973: PPUSH
2974: CALL_OW 56
// end ;
2978: END
// every 0 0$45 trigger tick < 15 15$00 do
2979: LD_OWVAR 1
2983: PUSH
2984: LD_INT 31500
2986: LESS
2987: IFFALSE 3058
2989: GO 2991
2991: DISABLE
// begin enable ;
2992: ENABLE
// if Prob ( 50 ) then
2993: LD_INT 50
2995: PPUSH
2996: CALL_OW 13
3000: IFFALSE 3031
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 5
3007: PPUSH
3008: CALL_OW 12
3012: PPUSH
3013: LD_INT 72
3015: PPUSH
3016: LD_INT 109
3018: PPUSH
3019: LD_INT 22
3021: PPUSH
3022: LD_INT 1
3024: PPUSH
3025: CALL_OW 56
3029: GO 3058
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_INT 140
3044: PPUSH
3045: LD_INT 73
3047: PPUSH
3048: LD_INT 22
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: CALL_OW 56
3058: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
// if exist_mode then
3063: LD_VAR 0 2
3067: IFFALSE 3092
// unit := CreateCharacter ( prefix & ident ) else
3069: LD_ADDR_VAR 0 5
3073: PUSH
3074: LD_VAR 0 3
3078: PUSH
3079: LD_VAR 0 1
3083: STR
3084: PPUSH
3085: CALL_OW 34
3089: ST_TO_ADDR
3090: GO 3107
// unit := NewCharacter ( ident ) ;
3092: LD_ADDR_VAR 0 5
3096: PUSH
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 25
3106: ST_TO_ADDR
// result := unit ;
3107: LD_ADDR_VAR 0 4
3111: PUSH
3112: LD_VAR 0 5
3116: ST_TO_ADDR
// end ;
3117: LD_VAR 0 4
3121: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
// if not side or not nation then
3126: LD_VAR 0 1
3130: NOT
3131: PUSH
3132: LD_VAR 0 2
3136: NOT
3137: OR
3138: IFFALSE 3142
// exit ;
3140: GO 3910
// case nation of nation_american :
3142: LD_VAR 0 2
3146: PUSH
3147: LD_INT 1
3149: DOUBLE
3150: EQUAL
3151: IFTRUE 3155
3153: GO 3369
3155: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: LD_INT 35
3163: PUSH
3164: LD_INT 45
3166: PUSH
3167: LD_INT 46
3169: PUSH
3170: LD_INT 47
3172: PUSH
3173: LD_INT 82
3175: PUSH
3176: LD_INT 83
3178: PUSH
3179: LD_INT 84
3181: PUSH
3182: LD_INT 85
3184: PUSH
3185: LD_INT 86
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 6
3196: PUSH
3197: LD_INT 15
3199: PUSH
3200: LD_INT 16
3202: PUSH
3203: LD_INT 7
3205: PUSH
3206: LD_INT 12
3208: PUSH
3209: LD_INT 13
3211: PUSH
3212: LD_INT 10
3214: PUSH
3215: LD_INT 14
3217: PUSH
3218: LD_INT 20
3220: PUSH
3221: LD_INT 21
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 25
3229: PUSH
3230: LD_INT 32
3232: PUSH
3233: LD_INT 27
3235: PUSH
3236: LD_INT 36
3238: PUSH
3239: LD_INT 69
3241: PUSH
3242: LD_INT 39
3244: PUSH
3245: LD_INT 34
3247: PUSH
3248: LD_INT 40
3250: PUSH
3251: LD_INT 48
3253: PUSH
3254: LD_INT 49
3256: PUSH
3257: LD_INT 50
3259: PUSH
3260: LD_INT 51
3262: PUSH
3263: LD_INT 52
3265: PUSH
3266: LD_INT 53
3268: PUSH
3269: LD_INT 54
3271: PUSH
3272: LD_INT 55
3274: PUSH
3275: LD_INT 56
3277: PUSH
3278: LD_INT 57
3280: PUSH
3281: LD_INT 58
3283: PUSH
3284: LD_INT 59
3286: PUSH
3287: LD_INT 60
3289: PUSH
3290: LD_INT 61
3292: PUSH
3293: LD_INT 62
3295: PUSH
3296: LD_INT 80
3298: PUSH
3299: LD_INT 82
3301: PUSH
3302: LD_INT 83
3304: PUSH
3305: LD_INT 84
3307: PUSH
3308: LD_INT 85
3310: PUSH
3311: LD_INT 86
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: ST_TO_ADDR
3367: GO 3834
3369: LD_INT 2
3371: DOUBLE
3372: EQUAL
3373: IFTRUE 3377
3375: GO 3603
3377: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 35
3385: PUSH
3386: LD_INT 45
3388: PUSH
3389: LD_INT 46
3391: PUSH
3392: LD_INT 47
3394: PUSH
3395: LD_INT 82
3397: PUSH
3398: LD_INT 83
3400: PUSH
3401: LD_INT 84
3403: PUSH
3404: LD_INT 85
3406: PUSH
3407: LD_INT 87
3409: PUSH
3410: LD_INT 70
3412: PUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 11
3418: PUSH
3419: LD_INT 3
3421: PUSH
3422: LD_INT 4
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: LD_INT 6
3430: PUSH
3431: LD_INT 15
3433: PUSH
3434: LD_INT 18
3436: PUSH
3437: LD_INT 7
3439: PUSH
3440: LD_INT 17
3442: PUSH
3443: LD_INT 8
3445: PUSH
3446: LD_INT 20
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 22
3454: PUSH
3455: LD_INT 72
3457: PUSH
3458: LD_INT 26
3460: PUSH
3461: LD_INT 69
3463: PUSH
3464: LD_INT 39
3466: PUSH
3467: LD_INT 40
3469: PUSH
3470: LD_INT 41
3472: PUSH
3473: LD_INT 42
3475: PUSH
3476: LD_INT 43
3478: PUSH
3479: LD_INT 48
3481: PUSH
3482: LD_INT 49
3484: PUSH
3485: LD_INT 50
3487: PUSH
3488: LD_INT 51
3490: PUSH
3491: LD_INT 52
3493: PUSH
3494: LD_INT 53
3496: PUSH
3497: LD_INT 54
3499: PUSH
3500: LD_INT 55
3502: PUSH
3503: LD_INT 56
3505: PUSH
3506: LD_INT 60
3508: PUSH
3509: LD_INT 61
3511: PUSH
3512: LD_INT 62
3514: PUSH
3515: LD_INT 66
3517: PUSH
3518: LD_INT 67
3520: PUSH
3521: LD_INT 68
3523: PUSH
3524: LD_INT 81
3526: PUSH
3527: LD_INT 82
3529: PUSH
3530: LD_INT 83
3532: PUSH
3533: LD_INT 84
3535: PUSH
3536: LD_INT 85
3538: PUSH
3539: LD_INT 87
3541: PUSH
3542: LD_INT 88
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: ST_TO_ADDR
3601: GO 3834
3603: LD_INT 3
3605: DOUBLE
3606: EQUAL
3607: IFTRUE 3611
3609: GO 3833
3611: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3612: LD_ADDR_VAR 0 4
3616: PUSH
3617: LD_INT 46
3619: PUSH
3620: LD_INT 47
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 82
3631: PUSH
3632: LD_INT 83
3634: PUSH
3635: LD_INT 84
3637: PUSH
3638: LD_INT 85
3640: PUSH
3641: LD_INT 86
3643: PUSH
3644: LD_INT 11
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 20
3652: PUSH
3653: LD_INT 19
3655: PUSH
3656: LD_INT 21
3658: PUSH
3659: LD_INT 24
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 25
3667: PUSH
3668: LD_INT 28
3670: PUSH
3671: LD_INT 29
3673: PUSH
3674: LD_INT 30
3676: PUSH
3677: LD_INT 31
3679: PUSH
3680: LD_INT 37
3682: PUSH
3683: LD_INT 38
3685: PUSH
3686: LD_INT 32
3688: PUSH
3689: LD_INT 27
3691: PUSH
3692: LD_INT 33
3694: PUSH
3695: LD_INT 69
3697: PUSH
3698: LD_INT 39
3700: PUSH
3701: LD_INT 34
3703: PUSH
3704: LD_INT 40
3706: PUSH
3707: LD_INT 71
3709: PUSH
3710: LD_INT 23
3712: PUSH
3713: LD_INT 44
3715: PUSH
3716: LD_INT 48
3718: PUSH
3719: LD_INT 49
3721: PUSH
3722: LD_INT 50
3724: PUSH
3725: LD_INT 51
3727: PUSH
3728: LD_INT 52
3730: PUSH
3731: LD_INT 53
3733: PUSH
3734: LD_INT 54
3736: PUSH
3737: LD_INT 55
3739: PUSH
3740: LD_INT 56
3742: PUSH
3743: LD_INT 57
3745: PUSH
3746: LD_INT 58
3748: PUSH
3749: LD_INT 59
3751: PUSH
3752: LD_INT 63
3754: PUSH
3755: LD_INT 64
3757: PUSH
3758: LD_INT 65
3760: PUSH
3761: LD_INT 82
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 84
3769: PUSH
3770: LD_INT 85
3772: PUSH
3773: LD_INT 86
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: ST_TO_ADDR
3831: GO 3834
3833: POP
// if state > - 1 and state < 3 then
3834: LD_VAR 0 3
3838: PUSH
3839: LD_INT 1
3841: NEG
3842: GREATER
3843: PUSH
3844: LD_VAR 0 3
3848: PUSH
3849: LD_INT 3
3851: LESS
3852: AND
3853: IFFALSE 3910
// for i in result do
3855: LD_ADDR_VAR 0 5
3859: PUSH
3860: LD_VAR 0 4
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3908
// if GetTech ( i , side ) <> state then
3868: LD_VAR 0 5
3872: PPUSH
3873: LD_VAR 0 1
3877: PPUSH
3878: CALL_OW 321
3882: PUSH
3883: LD_VAR 0 3
3887: NONEQUAL
3888: IFFALSE 3906
// result := result diff i ;
3890: LD_ADDR_VAR 0 4
3894: PUSH
3895: LD_VAR 0 4
3899: PUSH
3900: LD_VAR 0 5
3904: DIFF
3905: ST_TO_ADDR
3906: GO 3865
3908: POP
3909: POP
// end ;
3910: LD_VAR 0 4
3914: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3915: LD_INT 0
3917: PPUSH
3918: PPUSH
3919: PPUSH
// result := true ;
3920: LD_ADDR_VAR 0 3
3924: PUSH
3925: LD_INT 1
3927: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3928: LD_ADDR_VAR 0 5
3932: PUSH
3933: LD_VAR 0 2
3937: PPUSH
3938: CALL_OW 480
3942: ST_TO_ADDR
// if not tmp then
3943: LD_VAR 0 5
3947: NOT
3948: IFFALSE 3952
// exit ;
3950: GO 4001
// for i in tmp do
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: LD_VAR 0 5
3961: PUSH
3962: FOR_IN
3963: IFFALSE 3999
// if GetTech ( i , side ) <> state_researched then
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: NONEQUAL
3983: IFFALSE 3997
// begin result := false ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_INT 0
3992: ST_TO_ADDR
// exit ;
3993: POP
3994: POP
3995: GO 4001
// end ;
3997: GO 3962
3999: POP
4000: POP
// end ;
4001: LD_VAR 0 3
4005: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4006: LD_INT 0
4008: PPUSH
4009: PPUSH
4010: PPUSH
4011: PPUSH
4012: PPUSH
4013: PPUSH
4014: PPUSH
4015: PPUSH
4016: PPUSH
4017: PPUSH
4018: PPUSH
4019: PPUSH
4020: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4021: LD_VAR 0 1
4025: NOT
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: CALL_OW 257
4036: PUSH
4037: LD_INT 9
4039: NONEQUAL
4040: OR
4041: IFFALSE 4045
// exit ;
4043: GO 4618
// side := GetSide ( unit ) ;
4045: LD_ADDR_VAR 0 9
4049: PUSH
4050: LD_VAR 0 1
4054: PPUSH
4055: CALL_OW 255
4059: ST_TO_ADDR
// tech_space := tech_spacanom ;
4060: LD_ADDR_VAR 0 12
4064: PUSH
4065: LD_INT 29
4067: ST_TO_ADDR
// tech_time := tech_taurad ;
4068: LD_ADDR_VAR 0 13
4072: PUSH
4073: LD_INT 28
4075: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4076: LD_ADDR_VAR 0 11
4080: PUSH
4081: LD_VAR 0 1
4085: PPUSH
4086: CALL_OW 310
4090: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4091: LD_VAR 0 11
4095: PPUSH
4096: CALL_OW 247
4100: PUSH
4101: LD_INT 2
4103: EQUAL
4104: IFFALSE 4108
// exit ;
4106: GO 4618
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4108: LD_ADDR_VAR 0 8
4112: PUSH
4113: LD_INT 81
4115: PUSH
4116: LD_VAR 0 9
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 3
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 69
4150: ST_TO_ADDR
// if not tmp then
4151: LD_VAR 0 8
4155: NOT
4156: IFFALSE 4160
// exit ;
4158: GO 4618
// if in_unit then
4160: LD_VAR 0 11
4164: IFFALSE 4188
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4166: LD_ADDR_VAR 0 10
4170: PUSH
4171: LD_VAR 0 8
4175: PPUSH
4176: LD_VAR 0 11
4180: PPUSH
4181: CALL_OW 74
4185: ST_TO_ADDR
4186: GO 4208
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4188: LD_ADDR_VAR 0 10
4192: PUSH
4193: LD_VAR 0 8
4197: PPUSH
4198: LD_VAR 0 1
4202: PPUSH
4203: CALL_OW 74
4207: ST_TO_ADDR
// if not enemy then
4208: LD_VAR 0 10
4212: NOT
4213: IFFALSE 4217
// exit ;
4215: GO 4618
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4217: LD_VAR 0 11
4221: PUSH
4222: LD_VAR 0 11
4226: PPUSH
4227: LD_VAR 0 10
4231: PPUSH
4232: CALL_OW 296
4236: PUSH
4237: LD_INT 13
4239: GREATER
4240: AND
4241: PUSH
4242: LD_VAR 0 1
4246: PPUSH
4247: LD_VAR 0 10
4251: PPUSH
4252: CALL_OW 296
4256: PUSH
4257: LD_INT 12
4259: GREATER
4260: OR
4261: IFFALSE 4265
// exit ;
4263: GO 4618
// missile := [ 1 ] ;
4265: LD_ADDR_VAR 0 14
4269: PUSH
4270: LD_INT 1
4272: PUSH
4273: EMPTY
4274: LIST
4275: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4276: LD_VAR 0 9
4280: PPUSH
4281: LD_VAR 0 12
4285: PPUSH
4286: CALL_OW 325
4290: IFFALSE 4319
// missile := Replace ( missile , missile + 1 , 2 ) ;
4292: LD_ADDR_VAR 0 14
4296: PUSH
4297: LD_VAR 0 14
4301: PPUSH
4302: LD_VAR 0 14
4306: PUSH
4307: LD_INT 1
4309: PLUS
4310: PPUSH
4311: LD_INT 2
4313: PPUSH
4314: CALL_OW 1
4318: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4319: LD_VAR 0 9
4323: PPUSH
4324: LD_VAR 0 13
4328: PPUSH
4329: CALL_OW 325
4333: PUSH
4334: LD_VAR 0 10
4338: PPUSH
4339: CALL_OW 255
4343: PPUSH
4344: LD_VAR 0 13
4348: PPUSH
4349: CALL_OW 325
4353: NOT
4354: AND
4355: IFFALSE 4384
// missile := Replace ( missile , missile + 1 , 3 ) ;
4357: LD_ADDR_VAR 0 14
4361: PUSH
4362: LD_VAR 0 14
4366: PPUSH
4367: LD_VAR 0 14
4371: PUSH
4372: LD_INT 1
4374: PLUS
4375: PPUSH
4376: LD_INT 3
4378: PPUSH
4379: CALL_OW 1
4383: ST_TO_ADDR
// if missile < 2 then
4384: LD_VAR 0 14
4388: PUSH
4389: LD_INT 2
4391: LESS
4392: IFFALSE 4396
// exit ;
4394: GO 4618
// x := GetX ( enemy ) ;
4396: LD_ADDR_VAR 0 4
4400: PUSH
4401: LD_VAR 0 10
4405: PPUSH
4406: CALL_OW 250
4410: ST_TO_ADDR
// y := GetY ( enemy ) ;
4411: LD_ADDR_VAR 0 5
4415: PUSH
4416: LD_VAR 0 10
4420: PPUSH
4421: CALL_OW 251
4425: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4426: LD_ADDR_VAR 0 6
4430: PUSH
4431: LD_VAR 0 4
4435: PUSH
4436: LD_INT 1
4438: NEG
4439: PPUSH
4440: LD_INT 1
4442: PPUSH
4443: CALL_OW 12
4447: PLUS
4448: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4449: LD_ADDR_VAR 0 7
4453: PUSH
4454: LD_VAR 0 5
4458: PUSH
4459: LD_INT 1
4461: NEG
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: CALL_OW 12
4470: PLUS
4471: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4472: LD_VAR 0 6
4476: PPUSH
4477: LD_VAR 0 7
4481: PPUSH
4482: CALL_OW 488
4486: NOT
4487: IFFALSE 4509
// begin _x := x ;
4489: LD_ADDR_VAR 0 6
4493: PUSH
4494: LD_VAR 0 4
4498: ST_TO_ADDR
// _y := y ;
4499: LD_ADDR_VAR 0 7
4503: PUSH
4504: LD_VAR 0 5
4508: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4509: LD_ADDR_VAR 0 3
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_VAR 0 14
4521: PPUSH
4522: CALL_OW 12
4526: ST_TO_ADDR
// case i of 1 :
4527: LD_VAR 0 3
4531: PUSH
4532: LD_INT 1
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4557
4540: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4541: LD_VAR 0 1
4545: PPUSH
4546: LD_VAR 0 10
4550: PPUSH
4551: CALL_OW 115
4555: GO 4618
4557: LD_INT 2
4559: DOUBLE
4560: EQUAL
4561: IFTRUE 4565
4563: GO 4587
4565: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_VAR 0 6
4575: PPUSH
4576: LD_VAR 0 7
4580: PPUSH
4581: CALL_OW 153
4585: GO 4618
4587: LD_INT 3
4589: DOUBLE
4590: EQUAL
4591: IFTRUE 4595
4593: GO 4617
4595: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_VAR 0 6
4605: PPUSH
4606: LD_VAR 0 7
4610: PPUSH
4611: CALL_OW 154
4615: GO 4618
4617: POP
// end ;
4618: LD_VAR 0 2
4622: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4623: LD_INT 0
4625: PPUSH
4626: PPUSH
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
// if not unit or not building then
4631: LD_VAR 0 1
4635: NOT
4636: PUSH
4637: LD_VAR 0 2
4641: NOT
4642: OR
4643: IFFALSE 4647
// exit ;
4645: GO 4805
// x := GetX ( building ) ;
4647: LD_ADDR_VAR 0 5
4651: PUSH
4652: LD_VAR 0 2
4656: PPUSH
4657: CALL_OW 250
4661: ST_TO_ADDR
// y := GetY ( building ) ;
4662: LD_ADDR_VAR 0 6
4666: PUSH
4667: LD_VAR 0 2
4671: PPUSH
4672: CALL_OW 251
4676: ST_TO_ADDR
// for i = 0 to 5 do
4677: LD_ADDR_VAR 0 4
4681: PUSH
4682: DOUBLE
4683: LD_INT 0
4685: DEC
4686: ST_TO_ADDR
4687: LD_INT 5
4689: PUSH
4690: FOR_TO
4691: IFFALSE 4803
// begin _x := ShiftX ( x , i , 3 ) ;
4693: LD_ADDR_VAR 0 7
4697: PUSH
4698: LD_VAR 0 5
4702: PPUSH
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: CALL_OW 272
4715: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4716: LD_ADDR_VAR 0 8
4720: PUSH
4721: LD_VAR 0 6
4725: PPUSH
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 3
4733: PPUSH
4734: CALL_OW 273
4738: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4739: LD_VAR 0 7
4743: PPUSH
4744: LD_VAR 0 8
4748: PPUSH
4749: CALL_OW 488
4753: NOT
4754: IFFALSE 4758
// continue ;
4756: GO 4690
// if HexInfo ( _x , _y ) = 0 then
4758: LD_VAR 0 7
4762: PPUSH
4763: LD_VAR 0 8
4767: PPUSH
4768: CALL_OW 428
4772: PUSH
4773: LD_INT 0
4775: EQUAL
4776: IFFALSE 4801
// begin ComMoveXY ( unit , _x , _y ) ;
4778: LD_VAR 0 1
4782: PPUSH
4783: LD_VAR 0 7
4787: PPUSH
4788: LD_VAR 0 8
4792: PPUSH
4793: CALL_OW 111
// exit ;
4797: POP
4798: POP
4799: GO 4805
// end ; end ;
4801: GO 4690
4803: POP
4804: POP
// end ;
4805: LD_VAR 0 3
4809: RET
// export function ScanBase ( side , base_area ) ; begin
4810: LD_INT 0
4812: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4813: LD_ADDR_VAR 0 3
4817: PUSH
4818: LD_VAR 0 2
4822: PPUSH
4823: LD_INT 81
4825: PUSH
4826: LD_VAR 0 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 70
4839: ST_TO_ADDR
// end ;
4840: LD_VAR 0 3
4844: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
// result := false ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 0
4858: ST_TO_ADDR
// side := GetSide ( unit ) ;
4859: LD_ADDR_VAR 0 3
4863: PUSH
4864: LD_VAR 0 1
4868: PPUSH
4869: CALL_OW 255
4873: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4874: LD_ADDR_VAR 0 4
4878: PUSH
4879: LD_VAR 0 1
4883: PPUSH
4884: CALL_OW 248
4888: ST_TO_ADDR
// case nat of 1 :
4889: LD_VAR 0 4
4893: PUSH
4894: LD_INT 1
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4913
4902: POP
// tech := tech_lassight ; 2 :
4903: LD_ADDR_VAR 0 5
4907: PUSH
4908: LD_INT 12
4910: ST_TO_ADDR
4911: GO 4952
4913: LD_INT 2
4915: DOUBLE
4916: EQUAL
4917: IFTRUE 4921
4919: GO 4932
4921: POP
// tech := tech_mortar ; 3 :
4922: LD_ADDR_VAR 0 5
4926: PUSH
4927: LD_INT 41
4929: ST_TO_ADDR
4930: GO 4952
4932: LD_INT 3
4934: DOUBLE
4935: EQUAL
4936: IFTRUE 4940
4938: GO 4951
4940: POP
// tech := tech_bazooka ; end ;
4941: LD_ADDR_VAR 0 5
4945: PUSH
4946: LD_INT 44
4948: ST_TO_ADDR
4949: GO 4952
4951: POP
// if Researched ( side , tech ) then
4952: LD_VAR 0 3
4956: PPUSH
4957: LD_VAR 0 5
4961: PPUSH
4962: CALL_OW 325
4966: IFFALSE 4993
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: LD_INT 5
4975: PUSH
4976: LD_INT 8
4978: PUSH
4979: LD_INT 9
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: PUSH
4987: LD_VAR 0 4
4991: ARRAY
4992: ST_TO_ADDR
// end ;
4993: LD_VAR 0 2
4997: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
// if not mines then
5003: LD_VAR 0 2
5007: NOT
5008: IFFALSE 5012
// exit ;
5010: GO 5156
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: LD_INT 81
5019: PUSH
5020: LD_VAR 0 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 3
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: ST_TO_ADDR
// for i in mines do
5055: LD_ADDR_VAR 0 4
5059: PUSH
5060: LD_VAR 0 2
5064: PUSH
5065: FOR_IN
5066: IFFALSE 5154
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5068: LD_VAR 0 4
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: LD_VAR 0 4
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 458
5090: NOT
5091: IFFALSE 5095
// continue ;
5093: GO 5065
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5095: LD_VAR 0 4
5099: PUSH
5100: LD_INT 1
5102: ARRAY
5103: PPUSH
5104: LD_VAR 0 4
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: PPUSH
5113: CALL_OW 428
5117: PUSH
5118: LD_VAR 0 5
5122: IN
5123: IFFALSE 5152
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5125: LD_VAR 0 4
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PPUSH
5134: LD_VAR 0 4
5138: PUSH
5139: LD_INT 2
5141: ARRAY
5142: PPUSH
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 456
// end ;
5152: GO 5065
5154: POP
5155: POP
// end ;
5156: LD_VAR 0 3
5160: RET
// export function Count ( array ) ; var i ; begin
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
// result := 0 ;
5165: LD_ADDR_VAR 0 2
5169: PUSH
5170: LD_INT 0
5172: ST_TO_ADDR
// for i in array do
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: LD_VAR 0 1
5182: PUSH
5183: FOR_IN
5184: IFFALSE 5208
// if i then
5186: LD_VAR 0 3
5190: IFFALSE 5206
// result := result + 1 ;
5192: LD_ADDR_VAR 0 2
5196: PUSH
5197: LD_VAR 0 2
5201: PUSH
5202: LD_INT 1
5204: PLUS
5205: ST_TO_ADDR
5206: GO 5183
5208: POP
5209: POP
// end ;
5210: LD_VAR 0 2
5214: RET
// export function IsEmpty ( building ) ; begin
5215: LD_INT 0
5217: PPUSH
// if not building then
5218: LD_VAR 0 1
5222: NOT
5223: IFFALSE 5227
// exit ;
5225: GO 5270
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5227: LD_ADDR_VAR 0 2
5231: PUSH
5232: LD_VAR 0 1
5236: PUSH
5237: LD_INT 22
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 255
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 58
5256: PUSH
5257: EMPTY
5258: LIST
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PPUSH
5264: CALL_OW 69
5268: IN
5269: ST_TO_ADDR
// end ;
5270: LD_VAR 0 2
5274: RET
// export function IsNotFull ( building ) ; var places ; begin
5275: LD_INT 0
5277: PPUSH
5278: PPUSH
// if not building then
5279: LD_VAR 0 1
5283: NOT
5284: IFFALSE 5288
// exit ;
5286: GO 5459
// result := false ;
5288: LD_ADDR_VAR 0 2
5292: PUSH
5293: LD_INT 0
5295: ST_TO_ADDR
// places := 0 ;
5296: LD_ADDR_VAR 0 3
5300: PUSH
5301: LD_INT 0
5303: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5304: LD_VAR 0 1
5308: PPUSH
5309: CALL_OW 266
5313: PUSH
5314: LD_INT 0
5316: DOUBLE
5317: EQUAL
5318: IFTRUE 5376
5320: LD_INT 1
5322: DOUBLE
5323: EQUAL
5324: IFTRUE 5376
5326: LD_INT 6
5328: DOUBLE
5329: EQUAL
5330: IFTRUE 5376
5332: LD_INT 7
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5376
5338: LD_INT 8
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5376
5344: LD_INT 4
5346: DOUBLE
5347: EQUAL
5348: IFTRUE 5376
5350: LD_INT 5
5352: DOUBLE
5353: EQUAL
5354: IFTRUE 5376
5356: LD_INT 2
5358: DOUBLE
5359: EQUAL
5360: IFTRUE 5376
5362: LD_INT 3
5364: DOUBLE
5365: EQUAL
5366: IFTRUE 5376
5368: LD_INT 35
5370: DOUBLE
5371: EQUAL
5372: IFTRUE 5376
5374: GO 5387
5376: POP
// places := 6 ; b_bunker , b_breastwork :
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_INT 6
5384: ST_TO_ADDR
5385: GO 5432
5387: LD_INT 32
5389: DOUBLE
5390: EQUAL
5391: IFTRUE 5401
5393: LD_INT 31
5395: DOUBLE
5396: EQUAL
5397: IFTRUE 5401
5399: GO 5412
5401: POP
// places := 1 ; b_control_tower :
5402: LD_ADDR_VAR 0 3
5406: PUSH
5407: LD_INT 1
5409: ST_TO_ADDR
5410: GO 5432
5412: LD_INT 36
5414: DOUBLE
5415: EQUAL
5416: IFTRUE 5420
5418: GO 5431
5420: POP
// places := 3 ; end ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_INT 3
5428: ST_TO_ADDR
5429: GO 5432
5431: POP
// if places then
5432: LD_VAR 0 3
5436: IFFALSE 5459
// result := UnitsInside ( building ) < places ;
5438: LD_ADDR_VAR 0 2
5442: PUSH
5443: LD_VAR 0 1
5447: PPUSH
5448: CALL_OW 313
5452: PUSH
5453: LD_VAR 0 3
5457: LESS
5458: ST_TO_ADDR
// end ;
5459: LD_VAR 0 2
5463: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5464: LD_INT 0
5466: PPUSH
5467: PPUSH
5468: PPUSH
5469: PPUSH
// tmp := [ ] ;
5470: LD_ADDR_VAR 0 3
5474: PUSH
5475: EMPTY
5476: ST_TO_ADDR
// list := [ ] ;
5477: LD_ADDR_VAR 0 5
5481: PUSH
5482: EMPTY
5483: ST_TO_ADDR
// for i = 16 to 25 do
5484: LD_ADDR_VAR 0 4
5488: PUSH
5489: DOUBLE
5490: LD_INT 16
5492: DEC
5493: ST_TO_ADDR
5494: LD_INT 25
5496: PUSH
5497: FOR_TO
5498: IFFALSE 5571
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5500: LD_ADDR_VAR 0 3
5504: PUSH
5505: LD_VAR 0 3
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_VAR 0 1
5517: PPUSH
5518: CALL_OW 255
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 91
5529: PUSH
5530: LD_VAR 0 1
5534: PUSH
5535: LD_INT 6
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 30
5545: PUSH
5546: LD_VAR 0 4
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: EMPTY
5561: LIST
5562: PPUSH
5563: CALL_OW 69
5567: ADD
5568: ST_TO_ADDR
5569: GO 5497
5571: POP
5572: POP
// for i = 1 to tmp do
5573: LD_ADDR_VAR 0 4
5577: PUSH
5578: DOUBLE
5579: LD_INT 1
5581: DEC
5582: ST_TO_ADDR
5583: LD_VAR 0 3
5587: PUSH
5588: FOR_TO
5589: IFFALSE 5677
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5591: LD_ADDR_VAR 0 5
5595: PUSH
5596: LD_VAR 0 5
5600: PUSH
5601: LD_VAR 0 3
5605: PUSH
5606: LD_VAR 0 4
5610: ARRAY
5611: PPUSH
5612: CALL_OW 266
5616: PUSH
5617: LD_VAR 0 3
5621: PUSH
5622: LD_VAR 0 4
5626: ARRAY
5627: PPUSH
5628: CALL_OW 250
5632: PUSH
5633: LD_VAR 0 3
5637: PUSH
5638: LD_VAR 0 4
5642: ARRAY
5643: PPUSH
5644: CALL_OW 251
5648: PUSH
5649: LD_VAR 0 3
5653: PUSH
5654: LD_VAR 0 4
5658: ARRAY
5659: PPUSH
5660: CALL_OW 254
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: ADD
5674: ST_TO_ADDR
5675: GO 5588
5677: POP
5678: POP
// result := list ;
5679: LD_ADDR_VAR 0 2
5683: PUSH
5684: LD_VAR 0 5
5688: ST_TO_ADDR
// end ;
5689: LD_VAR 0 2
5693: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
// if not factory then
5703: LD_VAR 0 1
5707: NOT
5708: IFFALSE 5712
// exit ;
5710: GO 6305
// if control = control_apeman then
5712: LD_VAR 0 4
5716: PUSH
5717: LD_INT 5
5719: EQUAL
5720: IFFALSE 5829
// begin tmp := UnitsInside ( factory ) ;
5722: LD_ADDR_VAR 0 8
5726: PUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 313
5736: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5737: LD_VAR 0 8
5741: PPUSH
5742: LD_INT 25
5744: PUSH
5745: LD_INT 12
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PPUSH
5752: CALL_OW 72
5756: NOT
5757: IFFALSE 5767
// control := control_manual ;
5759: LD_ADDR_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5767: LD_ADDR_VAR 0 8
5771: PUSH
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL 5464 0 1
5781: ST_TO_ADDR
// if tmp then
5782: LD_VAR 0 8
5786: IFFALSE 5829
// begin for i in tmp do
5788: LD_ADDR_VAR 0 7
5792: PUSH
5793: LD_VAR 0 8
5797: PUSH
5798: FOR_IN
5799: IFFALSE 5827
// if i [ 1 ] = b_ext_radio then
5801: LD_VAR 0 7
5805: PUSH
5806: LD_INT 1
5808: ARRAY
5809: PUSH
5810: LD_INT 22
5812: EQUAL
5813: IFFALSE 5825
// begin control := control_remote ;
5815: LD_ADDR_VAR 0 4
5819: PUSH
5820: LD_INT 2
5822: ST_TO_ADDR
// break ;
5823: GO 5827
// end ;
5825: GO 5798
5827: POP
5828: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5829: LD_VAR 0 1
5833: PPUSH
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_VAR 0 3
5843: PPUSH
5844: LD_VAR 0 4
5848: PPUSH
5849: LD_VAR 0 5
5853: PPUSH
5854: CALL_OW 448
5858: IFFALSE 5893
// begin result := [ chassis , engine , control , weapon ] ;
5860: LD_ADDR_VAR 0 6
5864: PUSH
5865: LD_VAR 0 2
5869: PUSH
5870: LD_VAR 0 3
5874: PUSH
5875: LD_VAR 0 4
5879: PUSH
5880: LD_VAR 0 5
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: ST_TO_ADDR
// exit ;
5891: GO 6305
// end ; _chassis := AvailableChassisList ( factory ) ;
5893: LD_ADDR_VAR 0 9
5897: PUSH
5898: LD_VAR 0 1
5902: PPUSH
5903: CALL_OW 475
5907: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5908: LD_ADDR_VAR 0 11
5912: PUSH
5913: LD_VAR 0 1
5917: PPUSH
5918: CALL_OW 476
5922: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5923: LD_ADDR_VAR 0 12
5927: PUSH
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 477
5937: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5938: LD_ADDR_VAR 0 10
5942: PUSH
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 478
5952: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5953: LD_VAR 0 9
5957: NOT
5958: PUSH
5959: LD_VAR 0 11
5963: NOT
5964: OR
5965: PUSH
5966: LD_VAR 0 12
5970: NOT
5971: OR
5972: PUSH
5973: LD_VAR 0 10
5977: NOT
5978: OR
5979: IFFALSE 6014
// begin result := [ chassis , engine , control , weapon ] ;
5981: LD_ADDR_VAR 0 6
5985: PUSH
5986: LD_VAR 0 2
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: LD_VAR 0 4
6000: PUSH
6001: LD_VAR 0 5
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: ST_TO_ADDR
// exit ;
6012: GO 6305
// end ; if not chassis in _chassis then
6014: LD_VAR 0 2
6018: PUSH
6019: LD_VAR 0 9
6023: IN
6024: NOT
6025: IFFALSE 6051
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_VAR 0 9
6036: PUSH
6037: LD_INT 1
6039: PPUSH
6040: LD_VAR 0 9
6044: PPUSH
6045: CALL_OW 12
6049: ARRAY
6050: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 3
6060: PPUSH
6061: CALL 6310 0 2
6065: NOT
6066: IFFALSE 6125
// repeat engine := _engine [ 1 ] ;
6068: LD_ADDR_VAR 0 3
6072: PUSH
6073: LD_VAR 0 11
6077: PUSH
6078: LD_INT 1
6080: ARRAY
6081: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6082: LD_ADDR_VAR 0 11
6086: PUSH
6087: LD_VAR 0 11
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: CALL_OW 3
6099: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_VAR 0 3
6109: PPUSH
6110: CALL 6310 0 2
6114: PUSH
6115: LD_VAR 0 11
6119: PUSH
6120: EMPTY
6121: EQUAL
6122: OR
6123: IFFALSE 6068
// if not control in _control then
6125: LD_VAR 0 4
6129: PUSH
6130: LD_VAR 0 12
6134: IN
6135: NOT
6136: IFFALSE 6162
// control := _control [ rand ( 1 , _control ) ] ;
6138: LD_ADDR_VAR 0 4
6142: PUSH
6143: LD_VAR 0 12
6147: PUSH
6148: LD_INT 1
6150: PPUSH
6151: LD_VAR 0 12
6155: PPUSH
6156: CALL_OW 12
6160: ARRAY
6161: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6162: LD_VAR 0 2
6166: PPUSH
6167: LD_VAR 0 5
6171: PPUSH
6172: CALL 6530 0 2
6176: NOT
6177: IFFALSE 6236
// repeat weapon := _weapon [ 1 ] ;
6179: LD_ADDR_VAR 0 5
6183: PUSH
6184: LD_VAR 0 10
6188: PUSH
6189: LD_INT 1
6191: ARRAY
6192: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6193: LD_ADDR_VAR 0 10
6197: PUSH
6198: LD_VAR 0 10
6202: PPUSH
6203: LD_INT 1
6205: PPUSH
6206: CALL_OW 3
6210: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6211: LD_VAR 0 2
6215: PPUSH
6216: LD_VAR 0 5
6220: PPUSH
6221: CALL 6530 0 2
6225: PUSH
6226: LD_VAR 0 10
6230: PUSH
6231: EMPTY
6232: EQUAL
6233: OR
6234: IFFALSE 6179
// result := [ ] ;
6236: LD_ADDR_VAR 0 6
6240: PUSH
6241: EMPTY
6242: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: LD_VAR 0 3
6257: PPUSH
6258: LD_VAR 0 4
6262: PPUSH
6263: LD_VAR 0 5
6267: PPUSH
6268: CALL_OW 448
6272: IFFALSE 6305
// result := [ chassis , engine , control , weapon ] ;
6274: LD_ADDR_VAR 0 6
6278: PUSH
6279: LD_VAR 0 2
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: PUSH
6294: LD_VAR 0 5
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: ST_TO_ADDR
// end ;
6305: LD_VAR 0 6
6309: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6310: LD_INT 0
6312: PPUSH
// if not chassis or not engine then
6313: LD_VAR 0 1
6317: NOT
6318: PUSH
6319: LD_VAR 0 2
6323: NOT
6324: OR
6325: IFFALSE 6329
// exit ;
6327: GO 6525
// case engine of engine_solar :
6329: LD_VAR 0 2
6333: PUSH
6334: LD_INT 2
6336: DOUBLE
6337: EQUAL
6338: IFTRUE 6342
6340: GO 6380
6342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6343: LD_ADDR_VAR 0 3
6347: PUSH
6348: LD_INT 11
6350: PUSH
6351: LD_INT 12
6353: PUSH
6354: LD_INT 13
6356: PUSH
6357: LD_INT 14
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: LD_INT 2
6365: PUSH
6366: LD_INT 3
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: ST_TO_ADDR
6378: GO 6509
6380: LD_INT 1
6382: DOUBLE
6383: EQUAL
6384: IFTRUE 6388
6386: GO 6450
6388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6389: LD_ADDR_VAR 0 3
6393: PUSH
6394: LD_INT 11
6396: PUSH
6397: LD_INT 12
6399: PUSH
6400: LD_INT 13
6402: PUSH
6403: LD_INT 14
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 2
6411: PUSH
6412: LD_INT 3
6414: PUSH
6415: LD_INT 4
6417: PUSH
6418: LD_INT 5
6420: PUSH
6421: LD_INT 21
6423: PUSH
6424: LD_INT 23
6426: PUSH
6427: LD_INT 22
6429: PUSH
6430: LD_INT 24
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: ST_TO_ADDR
6448: GO 6509
6450: LD_INT 3
6452: DOUBLE
6453: EQUAL
6454: IFTRUE 6458
6456: GO 6508
6458: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6459: LD_ADDR_VAR 0 3
6463: PUSH
6464: LD_INT 13
6466: PUSH
6467: LD_INT 14
6469: PUSH
6470: LD_INT 2
6472: PUSH
6473: LD_INT 3
6475: PUSH
6476: LD_INT 4
6478: PUSH
6479: LD_INT 5
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 22
6487: PUSH
6488: LD_INT 23
6490: PUSH
6491: LD_INT 24
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: ST_TO_ADDR
6506: GO 6509
6508: POP
// result := ( chassis in result ) ;
6509: LD_ADDR_VAR 0 3
6513: PUSH
6514: LD_VAR 0 1
6518: PUSH
6519: LD_VAR 0 3
6523: IN
6524: ST_TO_ADDR
// end ;
6525: LD_VAR 0 3
6529: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6530: LD_INT 0
6532: PPUSH
// if not chassis or not weapon then
6533: LD_VAR 0 1
6537: NOT
6538: PUSH
6539: LD_VAR 0 2
6543: NOT
6544: OR
6545: IFFALSE 6549
// exit ;
6547: GO 7609
// case weapon of us_machine_gun :
6549: LD_VAR 0 2
6553: PUSH
6554: LD_INT 2
6556: DOUBLE
6557: EQUAL
6558: IFTRUE 6562
6560: GO 6592
6562: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: LD_INT 2
6573: PUSH
6574: LD_INT 3
6576: PUSH
6577: LD_INT 4
6579: PUSH
6580: LD_INT 5
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: ST_TO_ADDR
6590: GO 7593
6592: LD_INT 3
6594: DOUBLE
6595: EQUAL
6596: IFTRUE 6600
6598: GO 6630
6600: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: LD_INT 1
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 3
6614: PUSH
6615: LD_INT 4
6617: PUSH
6618: LD_INT 5
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 7593
6630: LD_INT 11
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6668
6638: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: LD_INT 3
6652: PUSH
6653: LD_INT 4
6655: PUSH
6656: LD_INT 5
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: ST_TO_ADDR
6666: GO 7593
6668: LD_INT 4
6670: DOUBLE
6671: EQUAL
6672: IFTRUE 6676
6674: GO 6702
6676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6677: LD_ADDR_VAR 0 3
6681: PUSH
6682: LD_INT 2
6684: PUSH
6685: LD_INT 3
6687: PUSH
6688: LD_INT 4
6690: PUSH
6691: LD_INT 5
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: ST_TO_ADDR
6700: GO 7593
6702: LD_INT 5
6704: DOUBLE
6705: EQUAL
6706: IFTRUE 6710
6708: GO 6736
6710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6711: LD_ADDR_VAR 0 3
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 4
6724: PUSH
6725: LD_INT 5
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: ST_TO_ADDR
6734: GO 7593
6736: LD_INT 9
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6770
6744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6745: LD_ADDR_VAR 0 3
6749: PUSH
6750: LD_INT 2
6752: PUSH
6753: LD_INT 3
6755: PUSH
6756: LD_INT 4
6758: PUSH
6759: LD_INT 5
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: ST_TO_ADDR
6768: GO 7593
6770: LD_INT 7
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6804
6778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6779: LD_ADDR_VAR 0 3
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 3
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: ST_TO_ADDR
6802: GO 7593
6804: LD_INT 12
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6838
6812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_INT 2
6820: PUSH
6821: LD_INT 3
6823: PUSH
6824: LD_INT 4
6826: PUSH
6827: LD_INT 5
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: ST_TO_ADDR
6836: GO 7593
6838: LD_INT 13
6840: DOUBLE
6841: EQUAL
6842: IFTRUE 6846
6844: GO 6872
6846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6847: LD_ADDR_VAR 0 3
6851: PUSH
6852: LD_INT 2
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: LD_INT 4
6860: PUSH
6861: LD_INT 5
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: ST_TO_ADDR
6870: GO 7593
6872: LD_INT 14
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 6898
6880: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 4
6888: PUSH
6889: LD_INT 5
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: ST_TO_ADDR
6896: GO 7593
6898: LD_INT 6
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6906
6904: GO 6924
6906: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: LD_INT 4
6914: PUSH
6915: LD_INT 5
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 7593
6924: LD_INT 10
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 6950
6932: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: LD_INT 4
6940: PUSH
6941: LD_INT 5
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: ST_TO_ADDR
6948: GO 7593
6950: LD_INT 22
6952: DOUBLE
6953: EQUAL
6954: IFTRUE 6958
6956: GO 6984
6958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: LD_INT 11
6966: PUSH
6967: LD_INT 12
6969: PUSH
6970: LD_INT 13
6972: PUSH
6973: LD_INT 14
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: ST_TO_ADDR
6982: GO 7593
6984: LD_INT 23
6986: DOUBLE
6987: EQUAL
6988: IFTRUE 6992
6990: GO 7018
6992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_INT 11
7000: PUSH
7001: LD_INT 12
7003: PUSH
7004: LD_INT 13
7006: PUSH
7007: LD_INT 14
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
7016: GO 7593
7018: LD_INT 24
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7052
7026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: LD_INT 11
7034: PUSH
7035: LD_INT 12
7037: PUSH
7038: LD_INT 13
7040: PUSH
7041: LD_INT 14
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: ST_TO_ADDR
7050: GO 7593
7052: LD_INT 30
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7086
7060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_INT 11
7068: PUSH
7069: LD_INT 12
7071: PUSH
7072: LD_INT 13
7074: PUSH
7075: LD_INT 14
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: ST_TO_ADDR
7084: GO 7593
7086: LD_INT 25
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7112
7094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_INT 13
7102: PUSH
7103: LD_INT 14
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: ST_TO_ADDR
7110: GO 7593
7112: LD_INT 27
7114: DOUBLE
7115: EQUAL
7116: IFTRUE 7120
7118: GO 7138
7120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7121: LD_ADDR_VAR 0 3
7125: PUSH
7126: LD_INT 13
7128: PUSH
7129: LD_INT 14
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: ST_TO_ADDR
7136: GO 7593
7138: LD_INT 92
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7172
7146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 11
7154: PUSH
7155: LD_INT 12
7157: PUSH
7158: LD_INT 13
7160: PUSH
7161: LD_INT 14
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
7170: GO 7593
7172: LD_INT 28
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7198
7180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 13
7188: PUSH
7189: LD_INT 14
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: ST_TO_ADDR
7196: GO 7593
7198: LD_INT 29
7200: DOUBLE
7201: EQUAL
7202: IFTRUE 7206
7204: GO 7224
7206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 13
7214: PUSH
7215: LD_INT 14
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: ST_TO_ADDR
7222: GO 7593
7224: LD_INT 31
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7250
7232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: LD_INT 13
7240: PUSH
7241: LD_INT 14
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: ST_TO_ADDR
7248: GO 7593
7250: LD_INT 26
7252: DOUBLE
7253: EQUAL
7254: IFTRUE 7258
7256: GO 7276
7258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_INT 13
7266: PUSH
7267: LD_INT 14
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: ST_TO_ADDR
7274: GO 7593
7276: LD_INT 42
7278: DOUBLE
7279: EQUAL
7280: IFTRUE 7284
7282: GO 7310
7284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7285: LD_ADDR_VAR 0 3
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 22
7295: PUSH
7296: LD_INT 23
7298: PUSH
7299: LD_INT 24
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: ST_TO_ADDR
7308: GO 7593
7310: LD_INT 43
7312: DOUBLE
7313: EQUAL
7314: IFTRUE 7318
7316: GO 7344
7318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7319: LD_ADDR_VAR 0 3
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_INT 23
7332: PUSH
7333: LD_INT 24
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: ST_TO_ADDR
7342: GO 7593
7344: LD_INT 44
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7378
7352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7353: LD_ADDR_VAR 0 3
7357: PUSH
7358: LD_INT 21
7360: PUSH
7361: LD_INT 22
7363: PUSH
7364: LD_INT 23
7366: PUSH
7367: LD_INT 24
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: ST_TO_ADDR
7376: GO 7593
7378: LD_INT 45
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7412
7386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7387: LD_ADDR_VAR 0 3
7391: PUSH
7392: LD_INT 21
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_INT 23
7400: PUSH
7401: LD_INT 24
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: ST_TO_ADDR
7410: GO 7593
7412: LD_INT 49
7414: DOUBLE
7415: EQUAL
7416: IFTRUE 7420
7418: GO 7446
7420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7421: LD_ADDR_VAR 0 3
7425: PUSH
7426: LD_INT 21
7428: PUSH
7429: LD_INT 22
7431: PUSH
7432: LD_INT 23
7434: PUSH
7435: LD_INT 24
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: ST_TO_ADDR
7444: GO 7593
7446: LD_INT 51
7448: DOUBLE
7449: EQUAL
7450: IFTRUE 7454
7452: GO 7480
7454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7455: LD_ADDR_VAR 0 3
7459: PUSH
7460: LD_INT 21
7462: PUSH
7463: LD_INT 22
7465: PUSH
7466: LD_INT 23
7468: PUSH
7469: LD_INT 24
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: ST_TO_ADDR
7478: GO 7593
7480: LD_INT 52
7482: DOUBLE
7483: EQUAL
7484: IFTRUE 7488
7486: GO 7514
7488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7489: LD_ADDR_VAR 0 3
7493: PUSH
7494: LD_INT 21
7496: PUSH
7497: LD_INT 22
7499: PUSH
7500: LD_INT 23
7502: PUSH
7503: LD_INT 24
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: ST_TO_ADDR
7512: GO 7593
7514: LD_INT 53
7516: DOUBLE
7517: EQUAL
7518: IFTRUE 7522
7520: GO 7540
7522: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7523: LD_ADDR_VAR 0 3
7527: PUSH
7528: LD_INT 23
7530: PUSH
7531: LD_INT 24
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: ST_TO_ADDR
7538: GO 7593
7540: LD_INT 46
7542: DOUBLE
7543: EQUAL
7544: IFTRUE 7548
7546: GO 7566
7548: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7549: LD_ADDR_VAR 0 3
7553: PUSH
7554: LD_INT 23
7556: PUSH
7557: LD_INT 24
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: ST_TO_ADDR
7564: GO 7593
7566: LD_INT 47
7568: DOUBLE
7569: EQUAL
7570: IFTRUE 7574
7572: GO 7592
7574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7575: LD_ADDR_VAR 0 3
7579: PUSH
7580: LD_INT 23
7582: PUSH
7583: LD_INT 24
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: ST_TO_ADDR
7590: GO 7593
7592: POP
// result := ( chassis in result ) ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_VAR 0 1
7602: PUSH
7603: LD_VAR 0 3
7607: IN
7608: ST_TO_ADDR
// end ;
7609: LD_VAR 0 3
7613: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7614: LD_INT 0
7616: PPUSH
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
7622: PPUSH
// result := array ;
7623: LD_ADDR_VAR 0 5
7627: PUSH
7628: LD_VAR 0 1
7632: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7633: LD_VAR 0 1
7637: NOT
7638: PUSH
7639: LD_VAR 0 2
7643: NOT
7644: OR
7645: PUSH
7646: LD_VAR 0 3
7650: NOT
7651: OR
7652: PUSH
7653: LD_VAR 0 2
7657: PUSH
7658: LD_VAR 0 1
7662: GREATER
7663: OR
7664: PUSH
7665: LD_VAR 0 3
7669: PUSH
7670: LD_VAR 0 1
7674: GREATER
7675: OR
7676: IFFALSE 7680
// exit ;
7678: GO 7976
// if direction then
7680: LD_VAR 0 4
7684: IFFALSE 7748
// begin d := 1 ;
7686: LD_ADDR_VAR 0 9
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// if i_from > i_to then
7694: LD_VAR 0 2
7698: PUSH
7699: LD_VAR 0 3
7703: GREATER
7704: IFFALSE 7730
// length := ( array - i_from ) + i_to else
7706: LD_ADDR_VAR 0 11
7710: PUSH
7711: LD_VAR 0 1
7715: PUSH
7716: LD_VAR 0 2
7720: MINUS
7721: PUSH
7722: LD_VAR 0 3
7726: PLUS
7727: ST_TO_ADDR
7728: GO 7746
// length := i_to - i_from ;
7730: LD_ADDR_VAR 0 11
7734: PUSH
7735: LD_VAR 0 3
7739: PUSH
7740: LD_VAR 0 2
7744: MINUS
7745: ST_TO_ADDR
// end else
7746: GO 7809
// begin d := - 1 ;
7748: LD_ADDR_VAR 0 9
7752: PUSH
7753: LD_INT 1
7755: NEG
7756: ST_TO_ADDR
// if i_from > i_to then
7757: LD_VAR 0 2
7761: PUSH
7762: LD_VAR 0 3
7766: GREATER
7767: IFFALSE 7787
// length := i_from - i_to else
7769: LD_ADDR_VAR 0 11
7773: PUSH
7774: LD_VAR 0 2
7778: PUSH
7779: LD_VAR 0 3
7783: MINUS
7784: ST_TO_ADDR
7785: GO 7809
// length := ( array - i_to ) + i_from ;
7787: LD_ADDR_VAR 0 11
7791: PUSH
7792: LD_VAR 0 1
7796: PUSH
7797: LD_VAR 0 3
7801: MINUS
7802: PUSH
7803: LD_VAR 0 2
7807: PLUS
7808: ST_TO_ADDR
// end ; if not length then
7809: LD_VAR 0 11
7813: NOT
7814: IFFALSE 7818
// exit ;
7816: GO 7976
// tmp := array ;
7818: LD_ADDR_VAR 0 10
7822: PUSH
7823: LD_VAR 0 1
7827: ST_TO_ADDR
// for i = 1 to length do
7828: LD_ADDR_VAR 0 6
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_VAR 0 11
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7964
// begin for j = 1 to array do
7846: LD_ADDR_VAR 0 7
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_VAR 0 1
7860: PUSH
7861: FOR_TO
7862: IFFALSE 7950
// begin k := j + d ;
7864: LD_ADDR_VAR 0 8
7868: PUSH
7869: LD_VAR 0 7
7873: PUSH
7874: LD_VAR 0 9
7878: PLUS
7879: ST_TO_ADDR
// if k > array then
7880: LD_VAR 0 8
7884: PUSH
7885: LD_VAR 0 1
7889: GREATER
7890: IFFALSE 7900
// k := 1 ;
7892: LD_ADDR_VAR 0 8
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if not k then
7900: LD_VAR 0 8
7904: NOT
7905: IFFALSE 7917
// k := array ;
7907: LD_ADDR_VAR 0 8
7911: PUSH
7912: LD_VAR 0 1
7916: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7917: LD_ADDR_VAR 0 10
7921: PUSH
7922: LD_VAR 0 10
7926: PPUSH
7927: LD_VAR 0 8
7931: PPUSH
7932: LD_VAR 0 1
7936: PUSH
7937: LD_VAR 0 7
7941: ARRAY
7942: PPUSH
7943: CALL_OW 1
7947: ST_TO_ADDR
// end ;
7948: GO 7861
7950: POP
7951: POP
// array := tmp ;
7952: LD_ADDR_VAR 0 1
7956: PUSH
7957: LD_VAR 0 10
7961: ST_TO_ADDR
// end ;
7962: GO 7843
7964: POP
7965: POP
// result := array ;
7966: LD_ADDR_VAR 0 5
7970: PUSH
7971: LD_VAR 0 1
7975: ST_TO_ADDR
// end ;
7976: LD_VAR 0 5
7980: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7981: LD_INT 0
7983: PPUSH
7984: PPUSH
// result := 0 ;
7985: LD_ADDR_VAR 0 3
7989: PUSH
7990: LD_INT 0
7992: ST_TO_ADDR
// if not array or not value in array then
7993: LD_VAR 0 1
7997: NOT
7998: PUSH
7999: LD_VAR 0 2
8003: PUSH
8004: LD_VAR 0 1
8008: IN
8009: NOT
8010: OR
8011: IFFALSE 8015
// exit ;
8013: GO 8069
// for i = 1 to array do
8015: LD_ADDR_VAR 0 4
8019: PUSH
8020: DOUBLE
8021: LD_INT 1
8023: DEC
8024: ST_TO_ADDR
8025: LD_VAR 0 1
8029: PUSH
8030: FOR_TO
8031: IFFALSE 8067
// if value = array [ i ] then
8033: LD_VAR 0 2
8037: PUSH
8038: LD_VAR 0 1
8042: PUSH
8043: LD_VAR 0 4
8047: ARRAY
8048: EQUAL
8049: IFFALSE 8065
// begin result := i ;
8051: LD_ADDR_VAR 0 3
8055: PUSH
8056: LD_VAR 0 4
8060: ST_TO_ADDR
// exit ;
8061: POP
8062: POP
8063: GO 8069
// end ;
8065: GO 8030
8067: POP
8068: POP
// end ;
8069: LD_VAR 0 3
8073: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8074: LD_INT 0
8076: PPUSH
// vc_chassis := chassis ;
8077: LD_ADDR_OWVAR 37
8081: PUSH
8082: LD_VAR 0 1
8086: ST_TO_ADDR
// vc_engine := engine ;
8087: LD_ADDR_OWVAR 39
8091: PUSH
8092: LD_VAR 0 2
8096: ST_TO_ADDR
// vc_control := control ;
8097: LD_ADDR_OWVAR 38
8101: PUSH
8102: LD_VAR 0 3
8106: ST_TO_ADDR
// vc_weapon := weapon ;
8107: LD_ADDR_OWVAR 40
8111: PUSH
8112: LD_VAR 0 4
8116: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8117: LD_ADDR_OWVAR 41
8121: PUSH
8122: LD_VAR 0 5
8126: ST_TO_ADDR
// end ;
8127: LD_VAR 0 6
8131: RET
// export function WantPlant ( unit ) ; var task ; begin
8132: LD_INT 0
8134: PPUSH
8135: PPUSH
// result := false ;
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 437
8158: ST_TO_ADDR
// if task then
8159: LD_VAR 0 3
8163: IFFALSE 8191
// if task [ 1 ] [ 1 ] = p then
8165: LD_VAR 0 3
8169: PUSH
8170: LD_INT 1
8172: ARRAY
8173: PUSH
8174: LD_INT 1
8176: ARRAY
8177: PUSH
8178: LD_STRING p
8180: EQUAL
8181: IFFALSE 8191
// result := true ;
8183: LD_ADDR_VAR 0 2
8187: PUSH
8188: LD_INT 1
8190: ST_TO_ADDR
// end ;
8191: LD_VAR 0 2
8195: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8196: LD_INT 0
8198: PPUSH
8199: PPUSH
8200: PPUSH
8201: PPUSH
// if pos < 1 then
8202: LD_VAR 0 2
8206: PUSH
8207: LD_INT 1
8209: LESS
8210: IFFALSE 8214
// exit ;
8212: GO 8517
// if pos = 1 then
8214: LD_VAR 0 2
8218: PUSH
8219: LD_INT 1
8221: EQUAL
8222: IFFALSE 8255
// result := Replace ( arr , pos [ 1 ] , value ) else
8224: LD_ADDR_VAR 0 4
8228: PUSH
8229: LD_VAR 0 1
8233: PPUSH
8234: LD_VAR 0 2
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: LD_VAR 0 3
8247: PPUSH
8248: CALL_OW 1
8252: ST_TO_ADDR
8253: GO 8517
// begin tmp := arr ;
8255: LD_ADDR_VAR 0 6
8259: PUSH
8260: LD_VAR 0 1
8264: ST_TO_ADDR
// s_arr := [ tmp ] ;
8265: LD_ADDR_VAR 0 7
8269: PUSH
8270: LD_VAR 0 6
8274: PUSH
8275: EMPTY
8276: LIST
8277: ST_TO_ADDR
// for i = 1 to pos - 1 do
8278: LD_ADDR_VAR 0 5
8282: PUSH
8283: DOUBLE
8284: LD_INT 1
8286: DEC
8287: ST_TO_ADDR
8288: LD_VAR 0 2
8292: PUSH
8293: LD_INT 1
8295: MINUS
8296: PUSH
8297: FOR_TO
8298: IFFALSE 8343
// begin tmp := tmp [ pos [ i ] ] ;
8300: LD_ADDR_VAR 0 6
8304: PUSH
8305: LD_VAR 0 6
8309: PUSH
8310: LD_VAR 0 2
8314: PUSH
8315: LD_VAR 0 5
8319: ARRAY
8320: ARRAY
8321: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8322: LD_ADDR_VAR 0 7
8326: PUSH
8327: LD_VAR 0 7
8331: PUSH
8332: LD_VAR 0 6
8336: PUSH
8337: EMPTY
8338: LIST
8339: ADD
8340: ST_TO_ADDR
// end ;
8341: GO 8297
8343: POP
8344: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8345: LD_ADDR_VAR 0 6
8349: PUSH
8350: LD_VAR 0 6
8354: PPUSH
8355: LD_VAR 0 2
8359: PUSH
8360: LD_VAR 0 2
8364: ARRAY
8365: PPUSH
8366: LD_VAR 0 3
8370: PPUSH
8371: CALL_OW 1
8375: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8376: LD_ADDR_VAR 0 7
8380: PUSH
8381: LD_VAR 0 7
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: LD_VAR 0 6
8395: PPUSH
8396: CALL_OW 1
8400: ST_TO_ADDR
// for i = s_arr downto 2 do
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: DOUBLE
8407: LD_VAR 0 7
8411: INC
8412: ST_TO_ADDR
8413: LD_INT 2
8415: PUSH
8416: FOR_DOWNTO
8417: IFFALSE 8501
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8419: LD_ADDR_VAR 0 6
8423: PUSH
8424: LD_VAR 0 7
8428: PUSH
8429: LD_VAR 0 5
8433: PUSH
8434: LD_INT 1
8436: MINUS
8437: ARRAY
8438: PPUSH
8439: LD_VAR 0 2
8443: PUSH
8444: LD_VAR 0 5
8448: PUSH
8449: LD_INT 1
8451: MINUS
8452: ARRAY
8453: PPUSH
8454: LD_VAR 0 7
8458: PUSH
8459: LD_VAR 0 5
8463: ARRAY
8464: PPUSH
8465: CALL_OW 1
8469: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8470: LD_ADDR_VAR 0 7
8474: PUSH
8475: LD_VAR 0 7
8479: PPUSH
8480: LD_VAR 0 5
8484: PUSH
8485: LD_INT 1
8487: MINUS
8488: PPUSH
8489: LD_VAR 0 6
8493: PPUSH
8494: CALL_OW 1
8498: ST_TO_ADDR
// end ;
8499: GO 8416
8501: POP
8502: POP
// result := s_arr [ 1 ] ;
8503: LD_ADDR_VAR 0 4
8507: PUSH
8508: LD_VAR 0 7
8512: PUSH
8513: LD_INT 1
8515: ARRAY
8516: ST_TO_ADDR
// end ; end ;
8517: LD_VAR 0 4
8521: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
// if not list then
8526: LD_VAR 0 1
8530: NOT
8531: IFFALSE 8535
// exit ;
8533: GO 8626
// i := list [ pos1 ] ;
8535: LD_ADDR_VAR 0 5
8539: PUSH
8540: LD_VAR 0 1
8544: PUSH
8545: LD_VAR 0 2
8549: ARRAY
8550: ST_TO_ADDR
// if not i then
8551: LD_VAR 0 5
8555: NOT
8556: IFFALSE 8560
// exit ;
8558: GO 8626
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8560: LD_ADDR_VAR 0 1
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 1
8579: PUSH
8580: LD_VAR 0 3
8584: ARRAY
8585: PPUSH
8586: CALL_OW 1
8590: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8591: LD_ADDR_VAR 0 1
8595: PUSH
8596: LD_VAR 0 1
8600: PPUSH
8601: LD_VAR 0 3
8605: PPUSH
8606: LD_VAR 0 5
8610: PPUSH
8611: CALL_OW 1
8615: ST_TO_ADDR
// result := list ;
8616: LD_ADDR_VAR 0 4
8620: PUSH
8621: LD_VAR 0 1
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 4
8630: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8631: LD_INT 0
8633: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8634: LD_ADDR_VAR 0 5
8638: PUSH
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 250
8648: PPUSH
8649: LD_VAR 0 1
8653: PPUSH
8654: CALL_OW 251
8658: PPUSH
8659: LD_VAR 0 2
8663: PPUSH
8664: LD_VAR 0 3
8668: PPUSH
8669: LD_VAR 0 4
8673: PPUSH
8674: CALL 8684 0 5
8678: ST_TO_ADDR
// end ;
8679: LD_VAR 0 5
8683: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8684: LD_INT 0
8686: PPUSH
8687: PPUSH
8688: PPUSH
8689: PPUSH
// if not list then
8690: LD_VAR 0 3
8694: NOT
8695: IFFALSE 8699
// exit ;
8697: GO 9087
// result := [ ] ;
8699: LD_ADDR_VAR 0 6
8703: PUSH
8704: EMPTY
8705: ST_TO_ADDR
// for i in list do
8706: LD_ADDR_VAR 0 7
8710: PUSH
8711: LD_VAR 0 3
8715: PUSH
8716: FOR_IN
8717: IFFALSE 8919
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8719: LD_ADDR_VAR 0 9
8723: PUSH
8724: LD_VAR 0 7
8728: PPUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: LD_VAR 0 2
8738: PPUSH
8739: CALL_OW 297
8743: ST_TO_ADDR
// if not result then
8744: LD_VAR 0 6
8748: NOT
8749: IFFALSE 8775
// result := [ [ i , tmp ] ] else
8751: LD_ADDR_VAR 0 6
8755: PUSH
8756: LD_VAR 0 7
8760: PUSH
8761: LD_VAR 0 9
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: ST_TO_ADDR
8773: GO 8917
// begin if result [ result ] [ 2 ] < tmp then
8775: LD_VAR 0 6
8779: PUSH
8780: LD_VAR 0 6
8784: ARRAY
8785: PUSH
8786: LD_INT 2
8788: ARRAY
8789: PUSH
8790: LD_VAR 0 9
8794: LESS
8795: IFFALSE 8837
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8797: LD_ADDR_VAR 0 6
8801: PUSH
8802: LD_VAR 0 6
8806: PPUSH
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 1
8814: PLUS
8815: PPUSH
8816: LD_VAR 0 7
8820: PUSH
8821: LD_VAR 0 9
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 2
8834: ST_TO_ADDR
8835: GO 8917
// for j = 1 to result do
8837: LD_ADDR_VAR 0 8
8841: PUSH
8842: DOUBLE
8843: LD_INT 1
8845: DEC
8846: ST_TO_ADDR
8847: LD_VAR 0 6
8851: PUSH
8852: FOR_TO
8853: IFFALSE 8915
// begin if tmp < result [ j ] [ 2 ] then
8855: LD_VAR 0 9
8859: PUSH
8860: LD_VAR 0 6
8864: PUSH
8865: LD_VAR 0 8
8869: ARRAY
8870: PUSH
8871: LD_INT 2
8873: ARRAY
8874: LESS
8875: IFFALSE 8913
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8877: LD_ADDR_VAR 0 6
8881: PUSH
8882: LD_VAR 0 6
8886: PPUSH
8887: LD_VAR 0 8
8891: PPUSH
8892: LD_VAR 0 7
8896: PUSH
8897: LD_VAR 0 9
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 2
8910: ST_TO_ADDR
// break ;
8911: GO 8915
// end ; end ;
8913: GO 8852
8915: POP
8916: POP
// end ; end ;
8917: GO 8716
8919: POP
8920: POP
// if result and not asc then
8921: LD_VAR 0 6
8925: PUSH
8926: LD_VAR 0 4
8930: NOT
8931: AND
8932: IFFALSE 9007
// begin tmp := result ;
8934: LD_ADDR_VAR 0 9
8938: PUSH
8939: LD_VAR 0 6
8943: ST_TO_ADDR
// for i = tmp downto 1 do
8944: LD_ADDR_VAR 0 7
8948: PUSH
8949: DOUBLE
8950: LD_VAR 0 9
8954: INC
8955: ST_TO_ADDR
8956: LD_INT 1
8958: PUSH
8959: FOR_DOWNTO
8960: IFFALSE 9005
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8962: LD_ADDR_VAR 0 6
8966: PUSH
8967: LD_VAR 0 6
8971: PPUSH
8972: LD_VAR 0 9
8976: PUSH
8977: LD_VAR 0 7
8981: MINUS
8982: PUSH
8983: LD_INT 1
8985: PLUS
8986: PPUSH
8987: LD_VAR 0 9
8991: PUSH
8992: LD_VAR 0 7
8996: ARRAY
8997: PPUSH
8998: CALL_OW 1
9002: ST_TO_ADDR
9003: GO 8959
9005: POP
9006: POP
// end ; tmp := [ ] ;
9007: LD_ADDR_VAR 0 9
9011: PUSH
9012: EMPTY
9013: ST_TO_ADDR
// if mode then
9014: LD_VAR 0 5
9018: IFFALSE 9087
// begin for i = 1 to result do
9020: LD_ADDR_VAR 0 7
9024: PUSH
9025: DOUBLE
9026: LD_INT 1
9028: DEC
9029: ST_TO_ADDR
9030: LD_VAR 0 6
9034: PUSH
9035: FOR_TO
9036: IFFALSE 9075
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9038: LD_ADDR_VAR 0 9
9042: PUSH
9043: LD_VAR 0 9
9047: PPUSH
9048: LD_VAR 0 7
9052: PPUSH
9053: LD_VAR 0 6
9057: PUSH
9058: LD_VAR 0 7
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PPUSH
9068: CALL_OW 1
9072: ST_TO_ADDR
9073: GO 9035
9075: POP
9076: POP
// result := tmp ;
9077: LD_ADDR_VAR 0 6
9081: PUSH
9082: LD_VAR 0 9
9086: ST_TO_ADDR
// end ; end ;
9087: LD_VAR 0 6
9091: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9092: LD_INT 0
9094: PPUSH
9095: PPUSH
9096: PPUSH
9097: PPUSH
9098: PPUSH
9099: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9100: LD_ADDR_VAR 0 5
9104: PUSH
9105: LD_INT 0
9107: PUSH
9108: LD_INT 0
9110: PUSH
9111: LD_INT 0
9113: PUSH
9114: EMPTY
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: ST_TO_ADDR
// if not x or not y then
9122: LD_VAR 0 2
9126: NOT
9127: PUSH
9128: LD_VAR 0 3
9132: NOT
9133: OR
9134: IFFALSE 9138
// exit ;
9136: GO 10788
// if not range then
9138: LD_VAR 0 4
9142: NOT
9143: IFFALSE 9153
// range := 10 ;
9145: LD_ADDR_VAR 0 4
9149: PUSH
9150: LD_INT 10
9152: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9153: LD_ADDR_VAR 0 8
9157: PUSH
9158: LD_INT 81
9160: PUSH
9161: LD_VAR 0 1
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 92
9172: PUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_VAR 0 3
9182: PUSH
9183: LD_VAR 0 4
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 3
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 3
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 69
9220: ST_TO_ADDR
// if not tmp then
9221: LD_VAR 0 8
9225: NOT
9226: IFFALSE 9230
// exit ;
9228: GO 10788
// for i in tmp do
9230: LD_ADDR_VAR 0 6
9234: PUSH
9235: LD_VAR 0 8
9239: PUSH
9240: FOR_IN
9241: IFFALSE 10763
// begin points := [ 0 , 0 , 0 ] ;
9243: LD_ADDR_VAR 0 9
9247: PUSH
9248: LD_INT 0
9250: PUSH
9251: LD_INT 0
9253: PUSH
9254: LD_INT 0
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: ST_TO_ADDR
// bpoints := 1 ;
9262: LD_ADDR_VAR 0 10
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9270: LD_VAR 0 6
9274: PPUSH
9275: CALL_OW 247
9279: PUSH
9280: LD_INT 1
9282: DOUBLE
9283: EQUAL
9284: IFTRUE 9288
9286: GO 9866
9288: POP
// begin if GetClass ( i ) = 1 then
9289: LD_VAR 0 6
9293: PPUSH
9294: CALL_OW 257
9298: PUSH
9299: LD_INT 1
9301: EQUAL
9302: IFFALSE 9323
// points := [ 10 , 5 , 3 ] ;
9304: LD_ADDR_VAR 0 9
9308: PUSH
9309: LD_INT 10
9311: PUSH
9312: LD_INT 5
9314: PUSH
9315: LD_INT 3
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9323: LD_VAR 0 6
9327: PPUSH
9328: CALL_OW 257
9332: PUSH
9333: LD_INT 2
9335: PUSH
9336: LD_INT 3
9338: PUSH
9339: LD_INT 4
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: IN
9347: IFFALSE 9368
// points := [ 3 , 2 , 1 ] ;
9349: LD_ADDR_VAR 0 9
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: LD_INT 2
9359: PUSH
9360: LD_INT 1
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9368: LD_VAR 0 6
9372: PPUSH
9373: CALL_OW 257
9377: PUSH
9378: LD_INT 5
9380: EQUAL
9381: IFFALSE 9402
// points := [ 130 , 5 , 2 ] ;
9383: LD_ADDR_VAR 0 9
9387: PUSH
9388: LD_INT 130
9390: PUSH
9391: LD_INT 5
9393: PUSH
9394: LD_INT 2
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9402: LD_VAR 0 6
9406: PPUSH
9407: CALL_OW 257
9411: PUSH
9412: LD_INT 8
9414: EQUAL
9415: IFFALSE 9436
// points := [ 35 , 35 , 30 ] ;
9417: LD_ADDR_VAR 0 9
9421: PUSH
9422: LD_INT 35
9424: PUSH
9425: LD_INT 35
9427: PUSH
9428: LD_INT 30
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9436: LD_VAR 0 6
9440: PPUSH
9441: CALL_OW 257
9445: PUSH
9446: LD_INT 9
9448: EQUAL
9449: IFFALSE 9470
// points := [ 20 , 55 , 40 ] ;
9451: LD_ADDR_VAR 0 9
9455: PUSH
9456: LD_INT 20
9458: PUSH
9459: LD_INT 55
9461: PUSH
9462: LD_INT 40
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9470: LD_VAR 0 6
9474: PPUSH
9475: CALL_OW 257
9479: PUSH
9480: LD_INT 12
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: IN
9490: IFFALSE 9511
// points := [ 5 , 3 , 2 ] ;
9492: LD_ADDR_VAR 0 9
9496: PUSH
9497: LD_INT 5
9499: PUSH
9500: LD_INT 3
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: LIST
9510: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9511: LD_VAR 0 6
9515: PPUSH
9516: CALL_OW 257
9520: PUSH
9521: LD_INT 17
9523: EQUAL
9524: IFFALSE 9545
// points := [ 100 , 50 , 75 ] ;
9526: LD_ADDR_VAR 0 9
9530: PUSH
9531: LD_INT 100
9533: PUSH
9534: LD_INT 50
9536: PUSH
9537: LD_INT 75
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9545: LD_VAR 0 6
9549: PPUSH
9550: CALL_OW 257
9554: PUSH
9555: LD_INT 15
9557: EQUAL
9558: IFFALSE 9579
// points := [ 10 , 5 , 3 ] ;
9560: LD_ADDR_VAR 0 9
9564: PUSH
9565: LD_INT 10
9567: PUSH
9568: LD_INT 5
9570: PUSH
9571: LD_INT 3
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9579: LD_VAR 0 6
9583: PPUSH
9584: CALL_OW 257
9588: PUSH
9589: LD_INT 14
9591: EQUAL
9592: IFFALSE 9613
// points := [ 10 , 0 , 0 ] ;
9594: LD_ADDR_VAR 0 9
9598: PUSH
9599: LD_INT 10
9601: PUSH
9602: LD_INT 0
9604: PUSH
9605: LD_INT 0
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9613: LD_VAR 0 6
9617: PPUSH
9618: CALL_OW 257
9622: PUSH
9623: LD_INT 11
9625: EQUAL
9626: IFFALSE 9647
// points := [ 30 , 10 , 5 ] ;
9628: LD_ADDR_VAR 0 9
9632: PUSH
9633: LD_INT 30
9635: PUSH
9636: LD_INT 10
9638: PUSH
9639: LD_INT 5
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_INT 5
9654: PPUSH
9655: CALL_OW 321
9659: PUSH
9660: LD_INT 2
9662: EQUAL
9663: IFFALSE 9680
// bpoints := bpoints * 1.8 ;
9665: LD_ADDR_VAR 0 10
9669: PUSH
9670: LD_VAR 0 10
9674: PUSH
9675: LD_REAL  1.80000000000000E+0000
9678: MUL
9679: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9680: LD_VAR 0 6
9684: PPUSH
9685: CALL_OW 257
9689: PUSH
9690: LD_INT 1
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: LD_INT 3
9698: PUSH
9699: LD_INT 4
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: IN
9708: PUSH
9709: LD_VAR 0 1
9713: PPUSH
9714: LD_INT 51
9716: PPUSH
9717: CALL_OW 321
9721: PUSH
9722: LD_INT 2
9724: EQUAL
9725: AND
9726: IFFALSE 9743
// bpoints := bpoints * 1.2 ;
9728: LD_ADDR_VAR 0 10
9732: PUSH
9733: LD_VAR 0 10
9737: PUSH
9738: LD_REAL  1.20000000000000E+0000
9741: MUL
9742: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9743: LD_VAR 0 6
9747: PPUSH
9748: CALL_OW 257
9752: PUSH
9753: LD_INT 5
9755: PUSH
9756: LD_INT 7
9758: PUSH
9759: LD_INT 9
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: IN
9767: PUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: LD_INT 52
9775: PPUSH
9776: CALL_OW 321
9780: PUSH
9781: LD_INT 2
9783: EQUAL
9784: AND
9785: IFFALSE 9802
// bpoints := bpoints * 1.5 ;
9787: LD_ADDR_VAR 0 10
9791: PUSH
9792: LD_VAR 0 10
9796: PUSH
9797: LD_REAL  1.50000000000000E+0000
9800: MUL
9801: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9802: LD_VAR 0 1
9806: PPUSH
9807: LD_INT 66
9809: PPUSH
9810: CALL_OW 321
9814: PUSH
9815: LD_INT 2
9817: EQUAL
9818: IFFALSE 9835
// bpoints := bpoints * 1.1 ;
9820: LD_ADDR_VAR 0 10
9824: PUSH
9825: LD_VAR 0 10
9829: PUSH
9830: LD_REAL  1.10000000000000E+0000
9833: MUL
9834: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9835: LD_ADDR_VAR 0 10
9839: PUSH
9840: LD_VAR 0 10
9844: PUSH
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_INT 1
9852: PPUSH
9853: CALL_OW 259
9857: PUSH
9858: LD_REAL  1.15000000000000E+0000
9861: MUL
9862: MUL
9863: ST_TO_ADDR
// end ; unit_vehicle :
9864: GO 10692
9866: LD_INT 2
9868: DOUBLE
9869: EQUAL
9870: IFTRUE 9874
9872: GO 10680
9874: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9875: LD_VAR 0 6
9879: PPUSH
9880: CALL_OW 264
9884: PUSH
9885: LD_INT 2
9887: PUSH
9888: LD_INT 42
9890: PUSH
9891: LD_INT 24
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: IN
9899: IFFALSE 9920
// points := [ 25 , 5 , 3 ] ;
9901: LD_ADDR_VAR 0 9
9905: PUSH
9906: LD_INT 25
9908: PUSH
9909: LD_INT 5
9911: PUSH
9912: LD_INT 3
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9920: LD_VAR 0 6
9924: PPUSH
9925: CALL_OW 264
9929: PUSH
9930: LD_INT 4
9932: PUSH
9933: LD_INT 43
9935: PUSH
9936: LD_INT 25
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: IN
9944: IFFALSE 9965
// points := [ 40 , 15 , 5 ] ;
9946: LD_ADDR_VAR 0 9
9950: PUSH
9951: LD_INT 40
9953: PUSH
9954: LD_INT 15
9956: PUSH
9957: LD_INT 5
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9965: LD_VAR 0 6
9969: PPUSH
9970: CALL_OW 264
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: LD_INT 23
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: IN
9985: IFFALSE 10006
// points := [ 7 , 25 , 8 ] ;
9987: LD_ADDR_VAR 0 9
9991: PUSH
9992: LD_INT 7
9994: PUSH
9995: LD_INT 25
9997: PUSH
9998: LD_INT 8
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10006: LD_VAR 0 6
10010: PPUSH
10011: CALL_OW 264
10015: PUSH
10016: LD_INT 5
10018: PUSH
10019: LD_INT 27
10021: PUSH
10022: LD_INT 44
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: LIST
10029: IN
10030: IFFALSE 10051
// points := [ 14 , 50 , 16 ] ;
10032: LD_ADDR_VAR 0 9
10036: PUSH
10037: LD_INT 14
10039: PUSH
10040: LD_INT 50
10042: PUSH
10043: LD_INT 16
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10051: LD_VAR 0 6
10055: PPUSH
10056: CALL_OW 264
10060: PUSH
10061: LD_INT 6
10063: PUSH
10064: LD_INT 46
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: IN
10071: IFFALSE 10092
// points := [ 32 , 120 , 70 ] ;
10073: LD_ADDR_VAR 0 9
10077: PUSH
10078: LD_INT 32
10080: PUSH
10081: LD_INT 120
10083: PUSH
10084: LD_INT 70
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10092: LD_VAR 0 6
10096: PPUSH
10097: CALL_OW 264
10101: PUSH
10102: LD_INT 7
10104: PUSH
10105: LD_INT 28
10107: PUSH
10108: LD_INT 45
10110: PUSH
10111: LD_INT 92
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: IN
10120: IFFALSE 10141
// points := [ 35 , 20 , 45 ] ;
10122: LD_ADDR_VAR 0 9
10126: PUSH
10127: LD_INT 35
10129: PUSH
10130: LD_INT 20
10132: PUSH
10133: LD_INT 45
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10141: LD_VAR 0 6
10145: PPUSH
10146: CALL_OW 264
10150: PUSH
10151: LD_INT 47
10153: PUSH
10154: EMPTY
10155: LIST
10156: IN
10157: IFFALSE 10178
// points := [ 67 , 45 , 75 ] ;
10159: LD_ADDR_VAR 0 9
10163: PUSH
10164: LD_INT 67
10166: PUSH
10167: LD_INT 45
10169: PUSH
10170: LD_INT 75
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10178: LD_VAR 0 6
10182: PPUSH
10183: CALL_OW 264
10187: PUSH
10188: LD_INT 26
10190: PUSH
10191: EMPTY
10192: LIST
10193: IN
10194: IFFALSE 10215
// points := [ 120 , 30 , 80 ] ;
10196: LD_ADDR_VAR 0 9
10200: PUSH
10201: LD_INT 120
10203: PUSH
10204: LD_INT 30
10206: PUSH
10207: LD_INT 80
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10215: LD_VAR 0 6
10219: PPUSH
10220: CALL_OW 264
10224: PUSH
10225: LD_INT 22
10227: PUSH
10228: EMPTY
10229: LIST
10230: IN
10231: IFFALSE 10252
// points := [ 40 , 1 , 1 ] ;
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: LD_INT 40
10240: PUSH
10241: LD_INT 1
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 264
10261: PUSH
10262: LD_INT 29
10264: PUSH
10265: EMPTY
10266: LIST
10267: IN
10268: IFFALSE 10289
// points := [ 70 , 200 , 400 ] ;
10270: LD_ADDR_VAR 0 9
10274: PUSH
10275: LD_INT 70
10277: PUSH
10278: LD_INT 200
10280: PUSH
10281: LD_INT 400
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: LIST
10288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10289: LD_VAR 0 6
10293: PPUSH
10294: CALL_OW 264
10298: PUSH
10299: LD_INT 14
10301: PUSH
10302: LD_INT 53
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: IN
10309: IFFALSE 10330
// points := [ 40 , 10 , 20 ] ;
10311: LD_ADDR_VAR 0 9
10315: PUSH
10316: LD_INT 40
10318: PUSH
10319: LD_INT 10
10321: PUSH
10322: LD_INT 20
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10330: LD_VAR 0 6
10334: PPUSH
10335: CALL_OW 264
10339: PUSH
10340: LD_INT 9
10342: PUSH
10343: EMPTY
10344: LIST
10345: IN
10346: IFFALSE 10367
// points := [ 5 , 70 , 20 ] ;
10348: LD_ADDR_VAR 0 9
10352: PUSH
10353: LD_INT 5
10355: PUSH
10356: LD_INT 70
10358: PUSH
10359: LD_INT 20
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10367: LD_VAR 0 6
10371: PPUSH
10372: CALL_OW 264
10376: PUSH
10377: LD_INT 10
10379: PUSH
10380: EMPTY
10381: LIST
10382: IN
10383: IFFALSE 10404
// points := [ 35 , 110 , 70 ] ;
10385: LD_ADDR_VAR 0 9
10389: PUSH
10390: LD_INT 35
10392: PUSH
10393: LD_INT 110
10395: PUSH
10396: LD_INT 70
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10404: LD_VAR 0 6
10408: PPUSH
10409: CALL_OW 265
10413: PUSH
10414: LD_INT 25
10416: EQUAL
10417: IFFALSE 10438
// points := [ 80 , 65 , 100 ] ;
10419: LD_ADDR_VAR 0 9
10423: PUSH
10424: LD_INT 80
10426: PUSH
10427: LD_INT 65
10429: PUSH
10430: LD_INT 100
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10438: LD_VAR 0 6
10442: PPUSH
10443: CALL_OW 263
10447: PUSH
10448: LD_INT 1
10450: EQUAL
10451: IFFALSE 10486
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10453: LD_ADDR_VAR 0 10
10457: PUSH
10458: LD_VAR 0 10
10462: PUSH
10463: LD_VAR 0 6
10467: PPUSH
10468: CALL_OW 311
10472: PPUSH
10473: LD_INT 3
10475: PPUSH
10476: CALL_OW 259
10480: PUSH
10481: LD_INT 4
10483: MUL
10484: MUL
10485: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10486: LD_VAR 0 6
10490: PPUSH
10491: CALL_OW 263
10495: PUSH
10496: LD_INT 2
10498: EQUAL
10499: IFFALSE 10550
// begin j := IsControledBy ( i ) ;
10501: LD_ADDR_VAR 0 7
10505: PUSH
10506: LD_VAR 0 6
10510: PPUSH
10511: CALL_OW 312
10515: ST_TO_ADDR
// if j then
10516: LD_VAR 0 7
10520: IFFALSE 10550
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10522: LD_ADDR_VAR 0 10
10526: PUSH
10527: LD_VAR 0 10
10531: PUSH
10532: LD_VAR 0 7
10536: PPUSH
10537: LD_INT 3
10539: PPUSH
10540: CALL_OW 259
10544: PUSH
10545: LD_INT 3
10547: MUL
10548: MUL
10549: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10550: LD_VAR 0 6
10554: PPUSH
10555: CALL_OW 264
10559: PUSH
10560: LD_INT 5
10562: PUSH
10563: LD_INT 6
10565: PUSH
10566: LD_INT 46
10568: PUSH
10569: LD_INT 44
10571: PUSH
10572: LD_INT 47
10574: PUSH
10575: LD_INT 45
10577: PUSH
10578: LD_INT 28
10580: PUSH
10581: LD_INT 7
10583: PUSH
10584: LD_INT 27
10586: PUSH
10587: LD_INT 29
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: IN
10602: PUSH
10603: LD_VAR 0 1
10607: PPUSH
10608: LD_INT 52
10610: PPUSH
10611: CALL_OW 321
10615: PUSH
10616: LD_INT 2
10618: EQUAL
10619: AND
10620: IFFALSE 10637
// bpoints := bpoints * 1.2 ;
10622: LD_ADDR_VAR 0 10
10626: PUSH
10627: LD_VAR 0 10
10631: PUSH
10632: LD_REAL  1.20000000000000E+0000
10635: MUL
10636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10637: LD_VAR 0 6
10641: PPUSH
10642: CALL_OW 264
10646: PUSH
10647: LD_INT 6
10649: PUSH
10650: LD_INT 46
10652: PUSH
10653: LD_INT 47
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: IN
10661: IFFALSE 10678
// bpoints := bpoints * 1.2 ;
10663: LD_ADDR_VAR 0 10
10667: PUSH
10668: LD_VAR 0 10
10672: PUSH
10673: LD_REAL  1.20000000000000E+0000
10676: MUL
10677: ST_TO_ADDR
// end ; unit_building :
10678: GO 10692
10680: LD_INT 3
10682: DOUBLE
10683: EQUAL
10684: IFTRUE 10688
10686: GO 10691
10688: POP
// ; end ;
10689: GO 10692
10691: POP
// for j = 1 to 3 do
10692: LD_ADDR_VAR 0 7
10696: PUSH
10697: DOUBLE
10698: LD_INT 1
10700: DEC
10701: ST_TO_ADDR
10702: LD_INT 3
10704: PUSH
10705: FOR_TO
10706: IFFALSE 10759
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10708: LD_ADDR_VAR 0 5
10712: PUSH
10713: LD_VAR 0 5
10717: PPUSH
10718: LD_VAR 0 7
10722: PPUSH
10723: LD_VAR 0 5
10727: PUSH
10728: LD_VAR 0 7
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 9
10738: PUSH
10739: LD_VAR 0 7
10743: ARRAY
10744: PUSH
10745: LD_VAR 0 10
10749: MUL
10750: PLUS
10751: PPUSH
10752: CALL_OW 1
10756: ST_TO_ADDR
10757: GO 10705
10759: POP
10760: POP
// end ;
10761: GO 9240
10763: POP
10764: POP
// result := Replace ( result , 4 , tmp ) ;
10765: LD_ADDR_VAR 0 5
10769: PUSH
10770: LD_VAR 0 5
10774: PPUSH
10775: LD_INT 4
10777: PPUSH
10778: LD_VAR 0 8
10782: PPUSH
10783: CALL_OW 1
10787: ST_TO_ADDR
// end ;
10788: LD_VAR 0 5
10792: RET
// export function DangerAtRange ( unit , range ) ; begin
10793: LD_INT 0
10795: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 255
10810: PPUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 250
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 251
10830: PPUSH
10831: LD_VAR 0 2
10835: PPUSH
10836: CALL 9092 0 4
10840: ST_TO_ADDR
// end ;
10841: LD_VAR 0 3
10845: RET
// export function DangerInArea ( side , area ) ; begin
10846: LD_INT 0
10848: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10849: LD_ADDR_VAR 0 3
10853: PUSH
10854: LD_VAR 0 2
10858: PPUSH
10859: LD_INT 81
10861: PUSH
10862: LD_VAR 0 1
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 70
10875: ST_TO_ADDR
// end ;
10876: LD_VAR 0 3
10880: RET
// export function IsExtension ( b ) ; begin
10881: LD_INT 0
10883: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10884: LD_ADDR_VAR 0 2
10888: PUSH
10889: LD_VAR 0 1
10893: PUSH
10894: LD_INT 23
10896: PUSH
10897: LD_INT 20
10899: PUSH
10900: LD_INT 22
10902: PUSH
10903: LD_INT 17
10905: PUSH
10906: LD_INT 24
10908: PUSH
10909: LD_INT 21
10911: PUSH
10912: LD_INT 19
10914: PUSH
10915: LD_INT 16
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 18
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: IN
10936: ST_TO_ADDR
// end ;
10937: LD_VAR 0 2
10941: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10942: LD_INT 0
10944: PPUSH
10945: PPUSH
10946: PPUSH
// result := [ ] ;
10947: LD_ADDR_VAR 0 4
10951: PUSH
10952: EMPTY
10953: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10954: LD_ADDR_VAR 0 5
10958: PUSH
10959: LD_VAR 0 2
10963: PPUSH
10964: LD_INT 21
10966: PUSH
10967: LD_INT 3
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PPUSH
10974: CALL_OW 70
10978: ST_TO_ADDR
// if not tmp then
10979: LD_VAR 0 5
10983: NOT
10984: IFFALSE 10988
// exit ;
10986: GO 11052
// if checkLink then
10988: LD_VAR 0 3
10992: IFFALSE 11042
// begin for i in tmp do
10994: LD_ADDR_VAR 0 6
10998: PUSH
10999: LD_VAR 0 5
11003: PUSH
11004: FOR_IN
11005: IFFALSE 11040
// if GetBase ( i ) <> base then
11007: LD_VAR 0 6
11011: PPUSH
11012: CALL_OW 274
11016: PUSH
11017: LD_VAR 0 1
11021: NONEQUAL
11022: IFFALSE 11038
// ComLinkToBase ( base , i ) ;
11024: LD_VAR 0 1
11028: PPUSH
11029: LD_VAR 0 6
11033: PPUSH
11034: CALL_OW 169
11038: GO 11004
11040: POP
11041: POP
// end ; result := tmp ;
11042: LD_ADDR_VAR 0 4
11046: PUSH
11047: LD_VAR 0 5
11051: ST_TO_ADDR
// end ;
11052: LD_VAR 0 4
11056: RET
// export function ComComplete ( units , b ) ; var i ; begin
11057: LD_INT 0
11059: PPUSH
11060: PPUSH
// if not units then
11061: LD_VAR 0 1
11065: NOT
11066: IFFALSE 11070
// exit ;
11068: GO 11160
// for i in units do
11070: LD_ADDR_VAR 0 4
11074: PUSH
11075: LD_VAR 0 1
11079: PUSH
11080: FOR_IN
11081: IFFALSE 11158
// if BuildingStatus ( b ) = bs_build then
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 461
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11156
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11098: LD_VAR 0 4
11102: PPUSH
11103: LD_STRING h
11105: PUSH
11106: LD_VAR 0 2
11110: PPUSH
11111: CALL_OW 250
11115: PUSH
11116: LD_VAR 0 2
11120: PPUSH
11121: CALL_OW 251
11125: PUSH
11126: LD_VAR 0 2
11130: PUSH
11131: LD_INT 0
11133: PUSH
11134: LD_INT 0
11136: PUSH
11137: LD_INT 0
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: PUSH
11149: EMPTY
11150: LIST
11151: PPUSH
11152: CALL_OW 446
11156: GO 11080
11158: POP
11159: POP
// end ;
11160: LD_VAR 0 3
11164: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11165: LD_INT 0
11167: PPUSH
11168: PPUSH
11169: PPUSH
11170: PPUSH
11171: PPUSH
11172: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11173: LD_VAR 0 1
11177: NOT
11178: PUSH
11179: LD_VAR 0 1
11183: PPUSH
11184: CALL_OW 263
11188: PUSH
11189: LD_INT 2
11191: NONEQUAL
11192: OR
11193: IFFALSE 11197
// exit ;
11195: GO 11513
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11197: LD_ADDR_VAR 0 6
11201: PUSH
11202: LD_INT 22
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 255
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: LD_INT 30
11224: PUSH
11225: LD_INT 36
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 34
11234: PUSH
11235: LD_INT 31
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PPUSH
11251: CALL_OW 69
11255: ST_TO_ADDR
// if not tmp then
11256: LD_VAR 0 6
11260: NOT
11261: IFFALSE 11265
// exit ;
11263: GO 11513
// result := [ ] ;
11265: LD_ADDR_VAR 0 2
11269: PUSH
11270: EMPTY
11271: ST_TO_ADDR
// for i in tmp do
11272: LD_ADDR_VAR 0 3
11276: PUSH
11277: LD_VAR 0 6
11281: PUSH
11282: FOR_IN
11283: IFFALSE 11354
// begin t := UnitsInside ( i ) ;
11285: LD_ADDR_VAR 0 4
11289: PUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 313
11299: ST_TO_ADDR
// if t then
11300: LD_VAR 0 4
11304: IFFALSE 11352
// for j in t do
11306: LD_ADDR_VAR 0 7
11310: PUSH
11311: LD_VAR 0 4
11315: PUSH
11316: FOR_IN
11317: IFFALSE 11350
// result := Replace ( result , result + 1 , j ) ;
11319: LD_ADDR_VAR 0 2
11323: PUSH
11324: LD_VAR 0 2
11328: PPUSH
11329: LD_VAR 0 2
11333: PUSH
11334: LD_INT 1
11336: PLUS
11337: PPUSH
11338: LD_VAR 0 7
11342: PPUSH
11343: CALL_OW 1
11347: ST_TO_ADDR
11348: GO 11316
11350: POP
11351: POP
// end ;
11352: GO 11282
11354: POP
11355: POP
// if not result then
11356: LD_VAR 0 2
11360: NOT
11361: IFFALSE 11365
// exit ;
11363: GO 11513
// mech := result [ 1 ] ;
11365: LD_ADDR_VAR 0 5
11369: PUSH
11370: LD_VAR 0 2
11374: PUSH
11375: LD_INT 1
11377: ARRAY
11378: ST_TO_ADDR
// if result > 1 then
11379: LD_VAR 0 2
11383: PUSH
11384: LD_INT 1
11386: GREATER
11387: IFFALSE 11499
// begin for i = 2 to result do
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: DOUBLE
11395: LD_INT 2
11397: DEC
11398: ST_TO_ADDR
11399: LD_VAR 0 2
11403: PUSH
11404: FOR_TO
11405: IFFALSE 11497
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11407: LD_ADDR_VAR 0 4
11411: PUSH
11412: LD_VAR 0 2
11416: PUSH
11417: LD_VAR 0 3
11421: ARRAY
11422: PPUSH
11423: LD_INT 3
11425: PPUSH
11426: CALL_OW 259
11430: PUSH
11431: LD_VAR 0 2
11435: PUSH
11436: LD_VAR 0 3
11440: ARRAY
11441: PPUSH
11442: CALL_OW 432
11446: MINUS
11447: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11448: LD_VAR 0 4
11452: PUSH
11453: LD_VAR 0 5
11457: PPUSH
11458: LD_INT 3
11460: PPUSH
11461: CALL_OW 259
11465: PUSH
11466: LD_VAR 0 5
11470: PPUSH
11471: CALL_OW 432
11475: MINUS
11476: GREATEREQUAL
11477: IFFALSE 11495
// mech := result [ i ] ;
11479: LD_ADDR_VAR 0 5
11483: PUSH
11484: LD_VAR 0 2
11488: PUSH
11489: LD_VAR 0 3
11493: ARRAY
11494: ST_TO_ADDR
// end ;
11495: GO 11404
11497: POP
11498: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11499: LD_VAR 0 1
11503: PPUSH
11504: LD_VAR 0 5
11508: PPUSH
11509: CALL_OW 135
// end ;
11513: LD_VAR 0 2
11517: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11518: LD_INT 0
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
11532: PPUSH
// result := [ ] ;
11533: LD_ADDR_VAR 0 7
11537: PUSH
11538: EMPTY
11539: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11540: LD_VAR 0 1
11544: PPUSH
11545: CALL_OW 266
11549: PUSH
11550: LD_INT 0
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: IN
11560: NOT
11561: IFFALSE 11565
// exit ;
11563: GO 13199
// if name then
11565: LD_VAR 0 3
11569: IFFALSE 11585
// SetBName ( base_dep , name ) ;
11571: LD_VAR 0 1
11575: PPUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: CALL_OW 500
// base := GetBase ( base_dep ) ;
11585: LD_ADDR_VAR 0 15
11589: PUSH
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 274
11599: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11600: LD_ADDR_VAR 0 16
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: CALL_OW 255
11614: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11615: LD_ADDR_VAR 0 17
11619: PUSH
11620: LD_VAR 0 1
11624: PPUSH
11625: CALL_OW 248
11629: ST_TO_ADDR
// if sources then
11630: LD_VAR 0 5
11634: IFFALSE 11681
// for i = 1 to 3 do
11636: LD_ADDR_VAR 0 8
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 3
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11679
// AddResourceType ( base , i , sources [ i ] ) ;
11652: LD_VAR 0 15
11656: PPUSH
11657: LD_VAR 0 8
11661: PPUSH
11662: LD_VAR 0 5
11666: PUSH
11667: LD_VAR 0 8
11671: ARRAY
11672: PPUSH
11673: CALL_OW 276
11677: GO 11649
11679: POP
11680: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11681: LD_ADDR_VAR 0 18
11685: PUSH
11686: LD_VAR 0 15
11690: PPUSH
11691: LD_VAR 0 2
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL 10942 0 3
11703: ST_TO_ADDR
// InitHc ;
11704: CALL_OW 19
// InitUc ;
11708: CALL_OW 18
// uc_side := side ;
11712: LD_ADDR_OWVAR 20
11716: PUSH
11717: LD_VAR 0 16
11721: ST_TO_ADDR
// uc_nation := nation ;
11722: LD_ADDR_OWVAR 21
11726: PUSH
11727: LD_VAR 0 17
11731: ST_TO_ADDR
// if buildings then
11732: LD_VAR 0 18
11736: IFFALSE 13058
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11738: LD_ADDR_VAR 0 19
11742: PUSH
11743: LD_VAR 0 18
11747: PPUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 30
11753: PUSH
11754: LD_INT 29
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 30
11763: PUSH
11764: LD_INT 30
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: PPUSH
11776: CALL_OW 72
11780: ST_TO_ADDR
// if tmp then
11781: LD_VAR 0 19
11785: IFFALSE 11833
// for i in tmp do
11787: LD_ADDR_VAR 0 8
11791: PUSH
11792: LD_VAR 0 19
11796: PUSH
11797: FOR_IN
11798: IFFALSE 11831
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11800: LD_VAR 0 8
11804: PPUSH
11805: CALL_OW 250
11809: PPUSH
11810: LD_VAR 0 8
11814: PPUSH
11815: CALL_OW 251
11819: PPUSH
11820: LD_VAR 0 16
11824: PPUSH
11825: CALL_OW 441
11829: GO 11797
11831: POP
11832: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11833: LD_VAR 0 18
11837: PPUSH
11838: LD_INT 2
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 32
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 30
11853: PUSH
11854: LD_INT 33
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: IFFALSE 11958
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11872: LD_ADDR_VAR 0 8
11876: PUSH
11877: LD_VAR 0 18
11881: PPUSH
11882: LD_INT 2
11884: PUSH
11885: LD_INT 30
11887: PUSH
11888: LD_INT 32
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: LD_INT 30
11897: PUSH
11898: LD_INT 33
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 72
11914: PUSH
11915: FOR_IN
11916: IFFALSE 11956
// begin if not GetBWeapon ( i ) then
11918: LD_VAR 0 8
11922: PPUSH
11923: CALL_OW 269
11927: NOT
11928: IFFALSE 11954
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11930: LD_VAR 0 8
11934: PPUSH
11935: LD_VAR 0 8
11939: PPUSH
11940: LD_VAR 0 2
11944: PPUSH
11945: CALL 13204 0 2
11949: PPUSH
11950: CALL_OW 431
// end ;
11954: GO 11915
11956: POP
11957: POP
// end ; for i = 1 to personel do
11958: LD_ADDR_VAR 0 8
11962: PUSH
11963: DOUBLE
11964: LD_INT 1
11966: DEC
11967: ST_TO_ADDR
11968: LD_VAR 0 6
11972: PUSH
11973: FOR_TO
11974: IFFALSE 13038
// begin if i > 4 then
11976: LD_VAR 0 8
11980: PUSH
11981: LD_INT 4
11983: GREATER
11984: IFFALSE 11988
// break ;
11986: GO 13038
// case i of 1 :
11988: LD_VAR 0 8
11992: PUSH
11993: LD_INT 1
11995: DOUBLE
11996: EQUAL
11997: IFTRUE 12001
11999: GO 12081
12001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12002: LD_ADDR_VAR 0 12
12006: PUSH
12007: LD_VAR 0 18
12011: PPUSH
12012: LD_INT 22
12014: PUSH
12015: LD_VAR 0 16
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 58
12026: PUSH
12027: EMPTY
12028: LIST
12029: PUSH
12030: LD_INT 2
12032: PUSH
12033: LD_INT 30
12035: PUSH
12036: LD_INT 32
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 30
12045: PUSH
12046: LD_INT 4
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 5
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 72
12078: ST_TO_ADDR
12079: GO 12303
12081: LD_INT 2
12083: DOUBLE
12084: EQUAL
12085: IFTRUE 12089
12087: GO 12151
12089: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12090: LD_ADDR_VAR 0 12
12094: PUSH
12095: LD_VAR 0 18
12099: PPUSH
12100: LD_INT 22
12102: PUSH
12103: LD_VAR 0 16
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: LD_INT 30
12117: PUSH
12118: LD_INT 0
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 30
12127: PUSH
12128: LD_INT 1
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PPUSH
12144: CALL_OW 72
12148: ST_TO_ADDR
12149: GO 12303
12151: LD_INT 3
12153: DOUBLE
12154: EQUAL
12155: IFTRUE 12159
12157: GO 12221
12159: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12160: LD_ADDR_VAR 0 12
12164: PUSH
12165: LD_VAR 0 18
12169: PPUSH
12170: LD_INT 22
12172: PUSH
12173: LD_VAR 0 16
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 2
12184: PUSH
12185: LD_INT 30
12187: PUSH
12188: LD_INT 2
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 30
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: ST_TO_ADDR
12219: GO 12303
12221: LD_INT 4
12223: DOUBLE
12224: EQUAL
12225: IFTRUE 12229
12227: GO 12302
12229: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12230: LD_ADDR_VAR 0 12
12234: PUSH
12235: LD_VAR 0 18
12239: PPUSH
12240: LD_INT 22
12242: PUSH
12243: LD_VAR 0 16
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: LD_INT 2
12254: PUSH
12255: LD_INT 30
12257: PUSH
12258: LD_INT 6
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 30
12267: PUSH
12268: LD_INT 7
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 30
12277: PUSH
12278: LD_INT 8
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 72
12299: ST_TO_ADDR
12300: GO 12303
12302: POP
// if i = 1 then
12303: LD_VAR 0 8
12307: PUSH
12308: LD_INT 1
12310: EQUAL
12311: IFFALSE 12422
// begin tmp := [ ] ;
12313: LD_ADDR_VAR 0 19
12317: PUSH
12318: EMPTY
12319: ST_TO_ADDR
// for j in f do
12320: LD_ADDR_VAR 0 9
12324: PUSH
12325: LD_VAR 0 12
12329: PUSH
12330: FOR_IN
12331: IFFALSE 12404
// if GetBType ( j ) = b_bunker then
12333: LD_VAR 0 9
12337: PPUSH
12338: CALL_OW 266
12342: PUSH
12343: LD_INT 32
12345: EQUAL
12346: IFFALSE 12373
// tmp := Insert ( tmp , 1 , j ) else
12348: LD_ADDR_VAR 0 19
12352: PUSH
12353: LD_VAR 0 19
12357: PPUSH
12358: LD_INT 1
12360: PPUSH
12361: LD_VAR 0 9
12365: PPUSH
12366: CALL_OW 2
12370: ST_TO_ADDR
12371: GO 12402
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12373: LD_ADDR_VAR 0 19
12377: PUSH
12378: LD_VAR 0 19
12382: PPUSH
12383: LD_VAR 0 19
12387: PUSH
12388: LD_INT 1
12390: PLUS
12391: PPUSH
12392: LD_VAR 0 9
12396: PPUSH
12397: CALL_OW 2
12401: ST_TO_ADDR
12402: GO 12330
12404: POP
12405: POP
// if tmp then
12406: LD_VAR 0 19
12410: IFFALSE 12422
// f := tmp ;
12412: LD_ADDR_VAR 0 12
12416: PUSH
12417: LD_VAR 0 19
12421: ST_TO_ADDR
// end ; x := personel [ i ] ;
12422: LD_ADDR_VAR 0 13
12426: PUSH
12427: LD_VAR 0 6
12431: PUSH
12432: LD_VAR 0 8
12436: ARRAY
12437: ST_TO_ADDR
// if x = - 1 then
12438: LD_VAR 0 13
12442: PUSH
12443: LD_INT 1
12445: NEG
12446: EQUAL
12447: IFFALSE 12656
// begin for j in f do
12449: LD_ADDR_VAR 0 9
12453: PUSH
12454: LD_VAR 0 12
12458: PUSH
12459: FOR_IN
12460: IFFALSE 12652
// repeat InitHc ;
12462: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12466: LD_VAR 0 9
12470: PPUSH
12471: CALL_OW 266
12475: PUSH
12476: LD_INT 5
12478: EQUAL
12479: IFFALSE 12549
// begin if UnitsInside ( j ) < 3 then
12481: LD_VAR 0 9
12485: PPUSH
12486: CALL_OW 313
12490: PUSH
12491: LD_INT 3
12493: LESS
12494: IFFALSE 12530
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12496: LD_INT 0
12498: PPUSH
12499: LD_INT 5
12501: PUSH
12502: LD_INT 8
12504: PUSH
12505: LD_INT 9
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: LD_VAR 0 17
12517: ARRAY
12518: PPUSH
12519: LD_VAR 0 4
12523: PPUSH
12524: CALL_OW 380
12528: GO 12547
// PrepareHuman ( false , i , skill ) ;
12530: LD_INT 0
12532: PPUSH
12533: LD_VAR 0 8
12537: PPUSH
12538: LD_VAR 0 4
12542: PPUSH
12543: CALL_OW 380
// end else
12547: GO 12566
// PrepareHuman ( false , i , skill ) ;
12549: LD_INT 0
12551: PPUSH
12552: LD_VAR 0 8
12556: PPUSH
12557: LD_VAR 0 4
12561: PPUSH
12562: CALL_OW 380
// un := CreateHuman ;
12566: LD_ADDR_VAR 0 14
12570: PUSH
12571: CALL_OW 44
12575: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12576: LD_ADDR_VAR 0 7
12580: PUSH
12581: LD_VAR 0 7
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: LD_VAR 0 14
12593: PPUSH
12594: CALL_OW 2
12598: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12599: LD_VAR 0 14
12603: PPUSH
12604: LD_VAR 0 9
12608: PPUSH
12609: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12613: LD_VAR 0 9
12617: PPUSH
12618: CALL_OW 313
12622: PUSH
12623: LD_INT 6
12625: EQUAL
12626: PUSH
12627: LD_VAR 0 9
12631: PPUSH
12632: CALL_OW 266
12636: PUSH
12637: LD_INT 32
12639: PUSH
12640: LD_INT 31
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: IN
12647: OR
12648: IFFALSE 12462
12650: GO 12459
12652: POP
12653: POP
// end else
12654: GO 13036
// for j = 1 to x do
12656: LD_ADDR_VAR 0 9
12660: PUSH
12661: DOUBLE
12662: LD_INT 1
12664: DEC
12665: ST_TO_ADDR
12666: LD_VAR 0 13
12670: PUSH
12671: FOR_TO
12672: IFFALSE 13034
// begin InitHc ;
12674: CALL_OW 19
// if not f then
12678: LD_VAR 0 12
12682: NOT
12683: IFFALSE 12772
// begin PrepareHuman ( false , i , skill ) ;
12685: LD_INT 0
12687: PPUSH
12688: LD_VAR 0 8
12692: PPUSH
12693: LD_VAR 0 4
12697: PPUSH
12698: CALL_OW 380
// un := CreateHuman ;
12702: LD_ADDR_VAR 0 14
12706: PUSH
12707: CALL_OW 44
12711: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12712: LD_ADDR_VAR 0 7
12716: PUSH
12717: LD_VAR 0 7
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: LD_VAR 0 14
12729: PPUSH
12730: CALL_OW 2
12734: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12735: LD_VAR 0 14
12739: PPUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: CALL_OW 250
12749: PPUSH
12750: LD_VAR 0 1
12754: PPUSH
12755: CALL_OW 251
12759: PPUSH
12760: LD_INT 10
12762: PPUSH
12763: LD_INT 0
12765: PPUSH
12766: CALL_OW 50
// continue ;
12770: GO 12671
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12772: LD_VAR 0 12
12776: PUSH
12777: LD_INT 1
12779: ARRAY
12780: PPUSH
12781: CALL_OW 313
12785: PUSH
12786: LD_VAR 0 12
12790: PUSH
12791: LD_INT 1
12793: ARRAY
12794: PPUSH
12795: CALL_OW 266
12799: PUSH
12800: LD_INT 32
12802: PUSH
12803: LD_INT 31
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: IN
12810: AND
12811: PUSH
12812: LD_VAR 0 12
12816: PUSH
12817: LD_INT 1
12819: ARRAY
12820: PPUSH
12821: CALL_OW 313
12825: PUSH
12826: LD_INT 6
12828: EQUAL
12829: OR
12830: IFFALSE 12850
// f := Delete ( f , 1 ) ;
12832: LD_ADDR_VAR 0 12
12836: PUSH
12837: LD_VAR 0 12
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: CALL_OW 3
12849: ST_TO_ADDR
// if not f then
12850: LD_VAR 0 12
12854: NOT
12855: IFFALSE 12873
// begin x := x + 2 ;
12857: LD_ADDR_VAR 0 13
12861: PUSH
12862: LD_VAR 0 13
12866: PUSH
12867: LD_INT 2
12869: PLUS
12870: ST_TO_ADDR
// continue ;
12871: GO 12671
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12873: LD_VAR 0 12
12877: PUSH
12878: LD_INT 1
12880: ARRAY
12881: PPUSH
12882: CALL_OW 266
12886: PUSH
12887: LD_INT 5
12889: EQUAL
12890: IFFALSE 12964
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12892: LD_VAR 0 12
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: CALL_OW 313
12905: PUSH
12906: LD_INT 3
12908: LESS
12909: IFFALSE 12945
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12911: LD_INT 0
12913: PPUSH
12914: LD_INT 5
12916: PUSH
12917: LD_INT 8
12919: PUSH
12920: LD_INT 9
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_VAR 0 17
12932: ARRAY
12933: PPUSH
12934: LD_VAR 0 4
12938: PPUSH
12939: CALL_OW 380
12943: GO 12962
// PrepareHuman ( false , i , skill ) ;
12945: LD_INT 0
12947: PPUSH
12948: LD_VAR 0 8
12952: PPUSH
12953: LD_VAR 0 4
12957: PPUSH
12958: CALL_OW 380
// end else
12962: GO 12981
// PrepareHuman ( false , i , skill ) ;
12964: LD_INT 0
12966: PPUSH
12967: LD_VAR 0 8
12971: PPUSH
12972: LD_VAR 0 4
12976: PPUSH
12977: CALL_OW 380
// un := CreateHuman ;
12981: LD_ADDR_VAR 0 14
12985: PUSH
12986: CALL_OW 44
12990: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12991: LD_ADDR_VAR 0 7
12995: PUSH
12996: LD_VAR 0 7
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: LD_VAR 0 14
13008: PPUSH
13009: CALL_OW 2
13013: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13014: LD_VAR 0 14
13018: PPUSH
13019: LD_VAR 0 12
13023: PUSH
13024: LD_INT 1
13026: ARRAY
13027: PPUSH
13028: CALL_OW 52
// end ;
13032: GO 12671
13034: POP
13035: POP
// end ;
13036: GO 11973
13038: POP
13039: POP
// result := result ^ buildings ;
13040: LD_ADDR_VAR 0 7
13044: PUSH
13045: LD_VAR 0 7
13049: PUSH
13050: LD_VAR 0 18
13054: ADD
13055: ST_TO_ADDR
// end else
13056: GO 13199
// begin for i = 1 to personel do
13058: LD_ADDR_VAR 0 8
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13197
// begin if i > 4 then
13076: LD_VAR 0 8
13080: PUSH
13081: LD_INT 4
13083: GREATER
13084: IFFALSE 13088
// break ;
13086: GO 13197
// x := personel [ i ] ;
13088: LD_ADDR_VAR 0 13
13092: PUSH
13093: LD_VAR 0 6
13097: PUSH
13098: LD_VAR 0 8
13102: ARRAY
13103: ST_TO_ADDR
// if x = - 1 then
13104: LD_VAR 0 13
13108: PUSH
13109: LD_INT 1
13111: NEG
13112: EQUAL
13113: IFFALSE 13117
// continue ;
13115: GO 13073
// PrepareHuman ( false , i , skill ) ;
13117: LD_INT 0
13119: PPUSH
13120: LD_VAR 0 8
13124: PPUSH
13125: LD_VAR 0 4
13129: PPUSH
13130: CALL_OW 380
// un := CreateHuman ;
13134: LD_ADDR_VAR 0 14
13138: PUSH
13139: CALL_OW 44
13143: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13144: LD_VAR 0 14
13148: PPUSH
13149: LD_VAR 0 1
13153: PPUSH
13154: CALL_OW 250
13158: PPUSH
13159: LD_VAR 0 1
13163: PPUSH
13164: CALL_OW 251
13168: PPUSH
13169: LD_INT 10
13171: PPUSH
13172: LD_INT 0
13174: PPUSH
13175: CALL_OW 50
// result := result ^ un ;
13179: LD_ADDR_VAR 0 7
13183: PUSH
13184: LD_VAR 0 7
13188: PUSH
13189: LD_VAR 0 14
13193: ADD
13194: ST_TO_ADDR
// end ;
13195: GO 13073
13197: POP
13198: POP
// end ; end ;
13199: LD_VAR 0 7
13203: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13204: LD_INT 0
13206: PPUSH
13207: PPUSH
13208: PPUSH
13209: PPUSH
13210: PPUSH
13211: PPUSH
13212: PPUSH
13213: PPUSH
13214: PPUSH
13215: PPUSH
13216: PPUSH
13217: PPUSH
13218: PPUSH
13219: PPUSH
13220: PPUSH
13221: PPUSH
// result := false ;
13222: LD_ADDR_VAR 0 3
13226: PUSH
13227: LD_INT 0
13229: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13230: LD_VAR 0 1
13234: NOT
13235: PUSH
13236: LD_VAR 0 1
13240: PPUSH
13241: CALL_OW 266
13245: PUSH
13246: LD_INT 32
13248: PUSH
13249: LD_INT 33
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: IN
13256: NOT
13257: OR
13258: IFFALSE 13262
// exit ;
13260: GO 14371
// nat := GetNation ( tower ) ;
13262: LD_ADDR_VAR 0 12
13266: PUSH
13267: LD_VAR 0 1
13271: PPUSH
13272: CALL_OW 248
13276: ST_TO_ADDR
// side := GetSide ( tower ) ;
13277: LD_ADDR_VAR 0 16
13281: PUSH
13282: LD_VAR 0 1
13286: PPUSH
13287: CALL_OW 255
13291: ST_TO_ADDR
// x := GetX ( tower ) ;
13292: LD_ADDR_VAR 0 10
13296: PUSH
13297: LD_VAR 0 1
13301: PPUSH
13302: CALL_OW 250
13306: ST_TO_ADDR
// y := GetY ( tower ) ;
13307: LD_ADDR_VAR 0 11
13311: PUSH
13312: LD_VAR 0 1
13316: PPUSH
13317: CALL_OW 251
13321: ST_TO_ADDR
// if not x or not y then
13322: LD_VAR 0 10
13326: NOT
13327: PUSH
13328: LD_VAR 0 11
13332: NOT
13333: OR
13334: IFFALSE 13338
// exit ;
13336: GO 14371
// weapon := 0 ;
13338: LD_ADDR_VAR 0 18
13342: PUSH
13343: LD_INT 0
13345: ST_TO_ADDR
// fac_list := [ ] ;
13346: LD_ADDR_VAR 0 17
13350: PUSH
13351: EMPTY
13352: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13353: LD_ADDR_VAR 0 6
13357: PUSH
13358: LD_VAR 0 1
13362: PPUSH
13363: CALL_OW 274
13367: PPUSH
13368: LD_VAR 0 2
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: CALL 10942 0 3
13380: PPUSH
13381: LD_INT 30
13383: PUSH
13384: LD_INT 3
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if not factories then
13396: LD_VAR 0 6
13400: NOT
13401: IFFALSE 13405
// exit ;
13403: GO 14371
// for i in factories do
13405: LD_ADDR_VAR 0 8
13409: PUSH
13410: LD_VAR 0 6
13414: PUSH
13415: FOR_IN
13416: IFFALSE 13441
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13418: LD_ADDR_VAR 0 17
13422: PUSH
13423: LD_VAR 0 17
13427: PUSH
13428: LD_VAR 0 8
13432: PPUSH
13433: CALL_OW 478
13437: UNION
13438: ST_TO_ADDR
13439: GO 13415
13441: POP
13442: POP
// if not fac_list then
13443: LD_VAR 0 17
13447: NOT
13448: IFFALSE 13452
// exit ;
13450: GO 14371
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13452: LD_ADDR_VAR 0 5
13456: PUSH
13457: LD_INT 4
13459: PUSH
13460: LD_INT 5
13462: PUSH
13463: LD_INT 9
13465: PUSH
13466: LD_INT 10
13468: PUSH
13469: LD_INT 6
13471: PUSH
13472: LD_INT 7
13474: PUSH
13475: LD_INT 11
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 27
13489: PUSH
13490: LD_INT 28
13492: PUSH
13493: LD_INT 26
13495: PUSH
13496: LD_INT 30
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 43
13507: PUSH
13508: LD_INT 44
13510: PUSH
13511: LD_INT 46
13513: PUSH
13514: LD_INT 45
13516: PUSH
13517: LD_INT 47
13519: PUSH
13520: LD_INT 49
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_VAR 0 12
13540: ARRAY
13541: ST_TO_ADDR
// list := list isect fac_list ;
13542: LD_ADDR_VAR 0 5
13546: PUSH
13547: LD_VAR 0 5
13551: PUSH
13552: LD_VAR 0 17
13556: ISECT
13557: ST_TO_ADDR
// if not list then
13558: LD_VAR 0 5
13562: NOT
13563: IFFALSE 13567
// exit ;
13565: GO 14371
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13567: LD_VAR 0 12
13571: PUSH
13572: LD_INT 3
13574: EQUAL
13575: PUSH
13576: LD_INT 49
13578: PUSH
13579: LD_VAR 0 5
13583: IN
13584: AND
13585: PUSH
13586: LD_INT 31
13588: PPUSH
13589: LD_VAR 0 16
13593: PPUSH
13594: CALL_OW 321
13598: PUSH
13599: LD_INT 2
13601: EQUAL
13602: AND
13603: IFFALSE 13663
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13605: LD_INT 22
13607: PUSH
13608: LD_VAR 0 16
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 35
13619: PUSH
13620: LD_INT 49
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 91
13629: PUSH
13630: LD_VAR 0 1
13634: PUSH
13635: LD_INT 10
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: NOT
13653: IFFALSE 13663
// weapon := ru_time_lapser ;
13655: LD_ADDR_VAR 0 18
13659: PUSH
13660: LD_INT 49
13662: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13663: LD_VAR 0 12
13667: PUSH
13668: LD_INT 1
13670: PUSH
13671: LD_INT 2
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: IN
13678: PUSH
13679: LD_INT 11
13681: PUSH
13682: LD_VAR 0 5
13686: IN
13687: PUSH
13688: LD_INT 30
13690: PUSH
13691: LD_VAR 0 5
13695: IN
13696: OR
13697: AND
13698: PUSH
13699: LD_INT 6
13701: PPUSH
13702: LD_VAR 0 16
13706: PPUSH
13707: CALL_OW 321
13711: PUSH
13712: LD_INT 2
13714: EQUAL
13715: AND
13716: IFFALSE 13881
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13718: LD_INT 22
13720: PUSH
13721: LD_VAR 0 16
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 2
13732: PUSH
13733: LD_INT 35
13735: PUSH
13736: LD_INT 11
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 35
13745: PUSH
13746: LD_INT 30
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 91
13760: PUSH
13761: LD_VAR 0 1
13765: PUSH
13766: LD_INT 18
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: NOT
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_VAR 0 16
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: LD_INT 30
13802: PUSH
13803: LD_INT 32
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 30
13812: PUSH
13813: LD_INT 33
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 91
13827: PUSH
13828: LD_VAR 0 1
13832: PUSH
13833: LD_INT 12
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: PPUSH
13849: CALL_OW 69
13853: PUSH
13854: LD_INT 2
13856: GREATER
13857: AND
13858: IFFALSE 13881
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13860: LD_ADDR_VAR 0 18
13864: PUSH
13865: LD_INT 11
13867: PUSH
13868: LD_INT 30
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_VAR 0 12
13879: ARRAY
13880: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13881: LD_VAR 0 18
13885: NOT
13886: PUSH
13887: LD_INT 40
13889: PPUSH
13890: LD_VAR 0 16
13894: PPUSH
13895: CALL_OW 321
13899: PUSH
13900: LD_INT 2
13902: EQUAL
13903: AND
13904: PUSH
13905: LD_INT 7
13907: PUSH
13908: LD_VAR 0 5
13912: IN
13913: PUSH
13914: LD_INT 28
13916: PUSH
13917: LD_VAR 0 5
13921: IN
13922: OR
13923: PUSH
13924: LD_INT 45
13926: PUSH
13927: LD_VAR 0 5
13931: IN
13932: OR
13933: AND
13934: IFFALSE 14188
// begin hex := GetHexInfo ( x , y ) ;
13936: LD_ADDR_VAR 0 4
13940: PUSH
13941: LD_VAR 0 10
13945: PPUSH
13946: LD_VAR 0 11
13950: PPUSH
13951: CALL_OW 546
13955: ST_TO_ADDR
// if hex [ 1 ] then
13956: LD_VAR 0 4
13960: PUSH
13961: LD_INT 1
13963: ARRAY
13964: IFFALSE 13968
// exit ;
13966: GO 14371
// height := hex [ 2 ] ;
13968: LD_ADDR_VAR 0 15
13972: PUSH
13973: LD_VAR 0 4
13977: PUSH
13978: LD_INT 2
13980: ARRAY
13981: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13982: LD_ADDR_VAR 0 14
13986: PUSH
13987: LD_INT 0
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: LD_INT 5
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: ST_TO_ADDR
// for i in tmp do
14005: LD_ADDR_VAR 0 8
14009: PUSH
14010: LD_VAR 0 14
14014: PUSH
14015: FOR_IN
14016: IFFALSE 14186
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14018: LD_ADDR_VAR 0 9
14022: PUSH
14023: LD_VAR 0 10
14027: PPUSH
14028: LD_VAR 0 8
14032: PPUSH
14033: LD_INT 5
14035: PPUSH
14036: CALL_OW 272
14040: PUSH
14041: LD_VAR 0 11
14045: PPUSH
14046: LD_VAR 0 8
14050: PPUSH
14051: LD_INT 5
14053: PPUSH
14054: CALL_OW 273
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14063: LD_VAR 0 9
14067: PUSH
14068: LD_INT 1
14070: ARRAY
14071: PPUSH
14072: LD_VAR 0 9
14076: PUSH
14077: LD_INT 2
14079: ARRAY
14080: PPUSH
14081: CALL_OW 488
14085: IFFALSE 14184
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14087: LD_ADDR_VAR 0 4
14091: PUSH
14092: LD_VAR 0 9
14096: PUSH
14097: LD_INT 1
14099: ARRAY
14100: PPUSH
14101: LD_VAR 0 9
14105: PUSH
14106: LD_INT 2
14108: ARRAY
14109: PPUSH
14110: CALL_OW 546
14114: ST_TO_ADDR
// if hex [ 1 ] then
14115: LD_VAR 0 4
14119: PUSH
14120: LD_INT 1
14122: ARRAY
14123: IFFALSE 14127
// continue ;
14125: GO 14015
// h := hex [ 2 ] ;
14127: LD_ADDR_VAR 0 13
14131: PUSH
14132: LD_VAR 0 4
14136: PUSH
14137: LD_INT 2
14139: ARRAY
14140: ST_TO_ADDR
// if h + 7 < height then
14141: LD_VAR 0 13
14145: PUSH
14146: LD_INT 7
14148: PLUS
14149: PUSH
14150: LD_VAR 0 15
14154: LESS
14155: IFFALSE 14184
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14157: LD_ADDR_VAR 0 18
14161: PUSH
14162: LD_INT 7
14164: PUSH
14165: LD_INT 28
14167: PUSH
14168: LD_INT 45
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PUSH
14176: LD_VAR 0 12
14180: ARRAY
14181: ST_TO_ADDR
// break ;
14182: GO 14186
// end ; end ; end ;
14184: GO 14015
14186: POP
14187: POP
// end ; if not weapon then
14188: LD_VAR 0 18
14192: NOT
14193: IFFALSE 14253
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14195: LD_ADDR_VAR 0 5
14199: PUSH
14200: LD_VAR 0 5
14204: PUSH
14205: LD_INT 11
14207: PUSH
14208: LD_INT 30
14210: PUSH
14211: LD_INT 49
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: LIST
14218: DIFF
14219: ST_TO_ADDR
// if not list then
14220: LD_VAR 0 5
14224: NOT
14225: IFFALSE 14229
// exit ;
14227: GO 14371
// weapon := list [ rand ( 1 , list ) ] ;
14229: LD_ADDR_VAR 0 18
14233: PUSH
14234: LD_VAR 0 5
14238: PUSH
14239: LD_INT 1
14241: PPUSH
14242: LD_VAR 0 5
14246: PPUSH
14247: CALL_OW 12
14251: ARRAY
14252: ST_TO_ADDR
// end ; if weapon then
14253: LD_VAR 0 18
14257: IFFALSE 14371
// begin tmp := CostOfWeapon ( weapon ) ;
14259: LD_ADDR_VAR 0 14
14263: PUSH
14264: LD_VAR 0 18
14268: PPUSH
14269: CALL_OW 451
14273: ST_TO_ADDR
// j := GetBase ( tower ) ;
14274: LD_ADDR_VAR 0 9
14278: PUSH
14279: LD_VAR 0 1
14283: PPUSH
14284: CALL_OW 274
14288: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14289: LD_VAR 0 9
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: CALL_OW 275
14301: PUSH
14302: LD_VAR 0 14
14306: PUSH
14307: LD_INT 1
14309: ARRAY
14310: GREATEREQUAL
14311: PUSH
14312: LD_VAR 0 9
14316: PPUSH
14317: LD_INT 2
14319: PPUSH
14320: CALL_OW 275
14324: PUSH
14325: LD_VAR 0 14
14329: PUSH
14330: LD_INT 2
14332: ARRAY
14333: GREATEREQUAL
14334: AND
14335: PUSH
14336: LD_VAR 0 9
14340: PPUSH
14341: LD_INT 3
14343: PPUSH
14344: CALL_OW 275
14348: PUSH
14349: LD_VAR 0 14
14353: PUSH
14354: LD_INT 3
14356: ARRAY
14357: GREATEREQUAL
14358: AND
14359: IFFALSE 14371
// result := weapon ;
14361: LD_ADDR_VAR 0 3
14365: PUSH
14366: LD_VAR 0 18
14370: ST_TO_ADDR
// end ; end ;
14371: LD_VAR 0 3
14375: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14376: LD_INT 0
14378: PPUSH
14379: PPUSH
// result := true ;
14380: LD_ADDR_VAR 0 3
14384: PUSH
14385: LD_INT 1
14387: ST_TO_ADDR
// if array1 = array2 then
14388: LD_VAR 0 1
14392: PUSH
14393: LD_VAR 0 2
14397: EQUAL
14398: IFFALSE 14458
// begin for i = 1 to array1 do
14400: LD_ADDR_VAR 0 4
14404: PUSH
14405: DOUBLE
14406: LD_INT 1
14408: DEC
14409: ST_TO_ADDR
14410: LD_VAR 0 1
14414: PUSH
14415: FOR_TO
14416: IFFALSE 14454
// if array1 [ i ] <> array2 [ i ] then
14418: LD_VAR 0 1
14422: PUSH
14423: LD_VAR 0 4
14427: ARRAY
14428: PUSH
14429: LD_VAR 0 2
14433: PUSH
14434: LD_VAR 0 4
14438: ARRAY
14439: NONEQUAL
14440: IFFALSE 14452
// begin result := false ;
14442: LD_ADDR_VAR 0 3
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// break ;
14450: GO 14454
// end ;
14452: GO 14415
14454: POP
14455: POP
// end else
14456: GO 14466
// result := false ;
14458: LD_ADDR_VAR 0 3
14462: PUSH
14463: LD_INT 0
14465: ST_TO_ADDR
// end ;
14466: LD_VAR 0 3
14470: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14471: LD_INT 0
14473: PPUSH
14474: PPUSH
// if not array1 or not array2 then
14475: LD_VAR 0 1
14479: NOT
14480: PUSH
14481: LD_VAR 0 2
14485: NOT
14486: OR
14487: IFFALSE 14491
// exit ;
14489: GO 14555
// result := true ;
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: LD_INT 1
14498: ST_TO_ADDR
// for i = 1 to array1 do
14499: LD_ADDR_VAR 0 4
14503: PUSH
14504: DOUBLE
14505: LD_INT 1
14507: DEC
14508: ST_TO_ADDR
14509: LD_VAR 0 1
14513: PUSH
14514: FOR_TO
14515: IFFALSE 14553
// if array1 [ i ] <> array2 [ i ] then
14517: LD_VAR 0 1
14521: PUSH
14522: LD_VAR 0 4
14526: ARRAY
14527: PUSH
14528: LD_VAR 0 2
14532: PUSH
14533: LD_VAR 0 4
14537: ARRAY
14538: NONEQUAL
14539: IFFALSE 14551
// begin result := false ;
14541: LD_ADDR_VAR 0 3
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// break ;
14549: GO 14553
// end ;
14551: GO 14514
14553: POP
14554: POP
// end ;
14555: LD_VAR 0 3
14559: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14560: LD_INT 0
14562: PPUSH
14563: PPUSH
14564: PPUSH
// pom := GetBase ( fac ) ;
14565: LD_ADDR_VAR 0 5
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 274
14579: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14580: LD_ADDR_VAR 0 4
14584: PUSH
14585: LD_VAR 0 2
14589: PUSH
14590: LD_INT 1
14592: ARRAY
14593: PPUSH
14594: LD_VAR 0 2
14598: PUSH
14599: LD_INT 2
14601: ARRAY
14602: PPUSH
14603: LD_VAR 0 2
14607: PUSH
14608: LD_INT 3
14610: ARRAY
14611: PPUSH
14612: LD_VAR 0 2
14616: PUSH
14617: LD_INT 4
14619: ARRAY
14620: PPUSH
14621: CALL_OW 449
14625: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_VAR 0 5
14635: PPUSH
14636: LD_INT 1
14638: PPUSH
14639: CALL_OW 275
14643: PUSH
14644: LD_VAR 0 4
14648: PUSH
14649: LD_INT 1
14651: ARRAY
14652: GREATEREQUAL
14653: PUSH
14654: LD_VAR 0 5
14658: PPUSH
14659: LD_INT 2
14661: PPUSH
14662: CALL_OW 275
14666: PUSH
14667: LD_VAR 0 4
14671: PUSH
14672: LD_INT 2
14674: ARRAY
14675: GREATEREQUAL
14676: AND
14677: PUSH
14678: LD_VAR 0 5
14682: PPUSH
14683: LD_INT 3
14685: PPUSH
14686: CALL_OW 275
14690: PUSH
14691: LD_VAR 0 4
14695: PUSH
14696: LD_INT 3
14698: ARRAY
14699: GREATEREQUAL
14700: AND
14701: ST_TO_ADDR
// end ;
14702: LD_VAR 0 3
14706: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14707: LD_INT 0
14709: PPUSH
14710: PPUSH
14711: PPUSH
14712: PPUSH
// pom := GetBase ( building ) ;
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 274
14727: ST_TO_ADDR
// if not pom then
14728: LD_VAR 0 3
14732: NOT
14733: IFFALSE 14737
// exit ;
14735: GO 14907
// btype := GetBType ( building ) ;
14737: LD_ADDR_VAR 0 5
14741: PUSH
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 266
14751: ST_TO_ADDR
// if btype = b_armoury then
14752: LD_VAR 0 5
14756: PUSH
14757: LD_INT 4
14759: EQUAL
14760: IFFALSE 14770
// btype := b_barracks ;
14762: LD_ADDR_VAR 0 5
14766: PUSH
14767: LD_INT 5
14769: ST_TO_ADDR
// if btype = b_depot then
14770: LD_VAR 0 5
14774: PUSH
14775: LD_INT 0
14777: EQUAL
14778: IFFALSE 14788
// btype := b_warehouse ;
14780: LD_ADDR_VAR 0 5
14784: PUSH
14785: LD_INT 1
14787: ST_TO_ADDR
// if btype = b_workshop then
14788: LD_VAR 0 5
14792: PUSH
14793: LD_INT 2
14795: EQUAL
14796: IFFALSE 14806
// btype := b_factory ;
14798: LD_ADDR_VAR 0 5
14802: PUSH
14803: LD_INT 3
14805: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14806: LD_ADDR_VAR 0 4
14810: PUSH
14811: LD_VAR 0 5
14815: PPUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 248
14825: PPUSH
14826: CALL_OW 450
14830: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 275
14848: PUSH
14849: LD_VAR 0 4
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: GREATEREQUAL
14858: PUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 2
14866: PPUSH
14867: CALL_OW 275
14871: PUSH
14872: LD_VAR 0 4
14876: PUSH
14877: LD_INT 2
14879: ARRAY
14880: GREATEREQUAL
14881: AND
14882: PUSH
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 3
14890: PPUSH
14891: CALL_OW 275
14895: PUSH
14896: LD_VAR 0 4
14900: PUSH
14901: LD_INT 3
14903: ARRAY
14904: GREATEREQUAL
14905: AND
14906: ST_TO_ADDR
// end ;
14907: LD_VAR 0 2
14911: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14912: LD_INT 0
14914: PPUSH
14915: PPUSH
14916: PPUSH
// pom := GetBase ( building ) ;
14917: LD_ADDR_VAR 0 4
14921: PUSH
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 274
14931: ST_TO_ADDR
// if not pom then
14932: LD_VAR 0 4
14936: NOT
14937: IFFALSE 14941
// exit ;
14939: GO 15042
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14941: LD_ADDR_VAR 0 5
14945: PUSH
14946: LD_VAR 0 2
14950: PPUSH
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 248
14960: PPUSH
14961: CALL_OW 450
14965: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14966: LD_ADDR_VAR 0 3
14970: PUSH
14971: LD_VAR 0 4
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 275
14983: PUSH
14984: LD_VAR 0 5
14988: PUSH
14989: LD_INT 1
14991: ARRAY
14992: GREATEREQUAL
14993: PUSH
14994: LD_VAR 0 4
14998: PPUSH
14999: LD_INT 2
15001: PPUSH
15002: CALL_OW 275
15006: PUSH
15007: LD_VAR 0 5
15011: PUSH
15012: LD_INT 2
15014: ARRAY
15015: GREATEREQUAL
15016: AND
15017: PUSH
15018: LD_VAR 0 4
15022: PPUSH
15023: LD_INT 3
15025: PPUSH
15026: CALL_OW 275
15030: PUSH
15031: LD_VAR 0 5
15035: PUSH
15036: LD_INT 3
15038: ARRAY
15039: GREATEREQUAL
15040: AND
15041: ST_TO_ADDR
// end ;
15042: LD_VAR 0 3
15046: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15047: LD_INT 0
15049: PPUSH
15050: PPUSH
15051: PPUSH
15052: PPUSH
15053: PPUSH
15054: PPUSH
15055: PPUSH
15056: PPUSH
15057: PPUSH
15058: PPUSH
15059: PPUSH
// result := false ;
15060: LD_ADDR_VAR 0 8
15064: PUSH
15065: LD_INT 0
15067: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15068: LD_VAR 0 5
15072: NOT
15073: PUSH
15074: LD_VAR 0 1
15078: NOT
15079: OR
15080: PUSH
15081: LD_VAR 0 2
15085: NOT
15086: OR
15087: PUSH
15088: LD_VAR 0 3
15092: NOT
15093: OR
15094: IFFALSE 15098
// exit ;
15096: GO 15912
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15098: LD_ADDR_VAR 0 14
15102: PUSH
15103: LD_VAR 0 1
15107: PPUSH
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: LD_VAR 0 4
15122: PPUSH
15123: LD_VAR 0 5
15127: PUSH
15128: LD_INT 1
15130: ARRAY
15131: PPUSH
15132: CALL_OW 248
15136: PPUSH
15137: LD_INT 0
15139: PPUSH
15140: CALL 17145 0 6
15144: ST_TO_ADDR
// if not hexes then
15145: LD_VAR 0 14
15149: NOT
15150: IFFALSE 15154
// exit ;
15152: GO 15912
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15154: LD_ADDR_VAR 0 17
15158: PUSH
15159: LD_VAR 0 5
15163: PPUSH
15164: LD_INT 22
15166: PUSH
15167: LD_VAR 0 13
15171: PPUSH
15172: CALL_OW 255
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 2
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 0
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 30
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 72
15217: ST_TO_ADDR
// for i = 1 to hexes do
15218: LD_ADDR_VAR 0 9
15222: PUSH
15223: DOUBLE
15224: LD_INT 1
15226: DEC
15227: ST_TO_ADDR
15228: LD_VAR 0 14
15232: PUSH
15233: FOR_TO
15234: IFFALSE 15910
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15236: LD_ADDR_VAR 0 13
15240: PUSH
15241: LD_VAR 0 14
15245: PUSH
15246: LD_VAR 0 9
15250: ARRAY
15251: PUSH
15252: LD_INT 1
15254: ARRAY
15255: PPUSH
15256: LD_VAR 0 14
15260: PUSH
15261: LD_VAR 0 9
15265: ARRAY
15266: PUSH
15267: LD_INT 2
15269: ARRAY
15270: PPUSH
15271: CALL_OW 428
15275: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15276: LD_VAR 0 14
15280: PUSH
15281: LD_VAR 0 9
15285: ARRAY
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_VAR 0 14
15295: PUSH
15296: LD_VAR 0 9
15300: ARRAY
15301: PUSH
15302: LD_INT 2
15304: ARRAY
15305: PPUSH
15306: CALL_OW 351
15310: PUSH
15311: LD_VAR 0 14
15315: PUSH
15316: LD_VAR 0 9
15320: ARRAY
15321: PUSH
15322: LD_INT 1
15324: ARRAY
15325: PPUSH
15326: LD_VAR 0 14
15330: PUSH
15331: LD_VAR 0 9
15335: ARRAY
15336: PUSH
15337: LD_INT 2
15339: ARRAY
15340: PPUSH
15341: CALL_OW 488
15345: NOT
15346: OR
15347: PUSH
15348: LD_VAR 0 13
15352: PPUSH
15353: CALL_OW 247
15357: PUSH
15358: LD_INT 3
15360: EQUAL
15361: OR
15362: IFFALSE 15368
// exit ;
15364: POP
15365: POP
15366: GO 15912
// if not tmp then
15368: LD_VAR 0 13
15372: NOT
15373: IFFALSE 15377
// continue ;
15375: GO 15233
// result := true ;
15377: LD_ADDR_VAR 0 8
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15385: LD_VAR 0 6
15389: PUSH
15390: LD_VAR 0 13
15394: PPUSH
15395: CALL_OW 247
15399: PUSH
15400: LD_INT 2
15402: EQUAL
15403: AND
15404: PUSH
15405: LD_VAR 0 13
15409: PPUSH
15410: CALL_OW 263
15414: PUSH
15415: LD_INT 1
15417: EQUAL
15418: AND
15419: IFFALSE 15583
// begin if IsDrivenBy ( tmp ) then
15421: LD_VAR 0 13
15425: PPUSH
15426: CALL_OW 311
15430: IFFALSE 15434
// continue ;
15432: GO 15233
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15434: LD_VAR 0 6
15438: PPUSH
15439: LD_INT 3
15441: PUSH
15442: LD_INT 60
15444: PUSH
15445: EMPTY
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: LD_INT 55
15457: PUSH
15458: EMPTY
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 72
15473: IFFALSE 15581
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15475: LD_ADDR_VAR 0 18
15479: PUSH
15480: LD_VAR 0 6
15484: PPUSH
15485: LD_INT 3
15487: PUSH
15488: LD_INT 60
15490: PUSH
15491: EMPTY
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 3
15500: PUSH
15501: LD_INT 55
15503: PUSH
15504: EMPTY
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 72
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: ST_TO_ADDR
// if IsInUnit ( driver ) then
15524: LD_VAR 0 18
15528: PPUSH
15529: CALL_OW 310
15533: IFFALSE 15544
// ComExit ( driver ) ;
15535: LD_VAR 0 18
15539: PPUSH
15540: CALL 40925 0 1
// AddComEnterUnit ( driver , tmp ) ;
15544: LD_VAR 0 18
15548: PPUSH
15549: LD_VAR 0 13
15553: PPUSH
15554: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15558: LD_VAR 0 18
15562: PPUSH
15563: LD_VAR 0 7
15567: PPUSH
15568: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15572: LD_VAR 0 18
15576: PPUSH
15577: CALL_OW 181
// end ; continue ;
15581: GO 15233
// end ; if not cleaners or not tmp in cleaners then
15583: LD_VAR 0 6
15587: NOT
15588: PUSH
15589: LD_VAR 0 13
15593: PUSH
15594: LD_VAR 0 6
15598: IN
15599: NOT
15600: OR
15601: IFFALSE 15908
// begin if dep then
15603: LD_VAR 0 17
15607: IFFALSE 15743
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15609: LD_ADDR_VAR 0 16
15613: PUSH
15614: LD_VAR 0 17
15618: PUSH
15619: LD_INT 1
15621: ARRAY
15622: PPUSH
15623: CALL_OW 250
15627: PPUSH
15628: LD_VAR 0 17
15632: PUSH
15633: LD_INT 1
15635: ARRAY
15636: PPUSH
15637: CALL_OW 254
15641: PPUSH
15642: LD_INT 5
15644: PPUSH
15645: CALL_OW 272
15649: PUSH
15650: LD_VAR 0 17
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: CALL_OW 251
15663: PPUSH
15664: LD_VAR 0 17
15668: PUSH
15669: LD_INT 1
15671: ARRAY
15672: PPUSH
15673: CALL_OW 254
15677: PPUSH
15678: LD_INT 5
15680: PPUSH
15681: CALL_OW 273
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15690: LD_VAR 0 16
15694: PUSH
15695: LD_INT 1
15697: ARRAY
15698: PPUSH
15699: LD_VAR 0 16
15703: PUSH
15704: LD_INT 2
15706: ARRAY
15707: PPUSH
15708: CALL_OW 488
15712: IFFALSE 15743
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15714: LD_VAR 0 13
15718: PPUSH
15719: LD_VAR 0 16
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: PPUSH
15728: LD_VAR 0 16
15732: PUSH
15733: LD_INT 2
15735: ARRAY
15736: PPUSH
15737: CALL_OW 111
// continue ;
15741: GO 15233
// end ; end ; r := GetDir ( tmp ) ;
15743: LD_ADDR_VAR 0 15
15747: PUSH
15748: LD_VAR 0 13
15752: PPUSH
15753: CALL_OW 254
15757: ST_TO_ADDR
// if r = 5 then
15758: LD_VAR 0 15
15762: PUSH
15763: LD_INT 5
15765: EQUAL
15766: IFFALSE 15776
// r := 0 ;
15768: LD_ADDR_VAR 0 15
15772: PUSH
15773: LD_INT 0
15775: ST_TO_ADDR
// for j = r to 5 do
15776: LD_ADDR_VAR 0 10
15780: PUSH
15781: DOUBLE
15782: LD_VAR 0 15
15786: DEC
15787: ST_TO_ADDR
15788: LD_INT 5
15790: PUSH
15791: FOR_TO
15792: IFFALSE 15906
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15794: LD_ADDR_VAR 0 11
15798: PUSH
15799: LD_VAR 0 13
15803: PPUSH
15804: CALL_OW 250
15808: PPUSH
15809: LD_VAR 0 10
15813: PPUSH
15814: LD_INT 2
15816: PPUSH
15817: CALL_OW 272
15821: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15822: LD_ADDR_VAR 0 12
15826: PUSH
15827: LD_VAR 0 13
15831: PPUSH
15832: CALL_OW 251
15836: PPUSH
15837: LD_VAR 0 10
15841: PPUSH
15842: LD_INT 2
15844: PPUSH
15845: CALL_OW 273
15849: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15850: LD_VAR 0 11
15854: PPUSH
15855: LD_VAR 0 12
15859: PPUSH
15860: CALL_OW 488
15864: PUSH
15865: LD_VAR 0 11
15869: PPUSH
15870: LD_VAR 0 12
15874: PPUSH
15875: CALL_OW 428
15879: NOT
15880: AND
15881: IFFALSE 15904
// begin ComMoveXY ( tmp , _x , _y ) ;
15883: LD_VAR 0 13
15887: PPUSH
15888: LD_VAR 0 11
15892: PPUSH
15893: LD_VAR 0 12
15897: PPUSH
15898: CALL_OW 111
// break ;
15902: GO 15906
// end ; end ;
15904: GO 15791
15906: POP
15907: POP
// end ; end ;
15908: GO 15233
15910: POP
15911: POP
// end ;
15912: LD_VAR 0 8
15916: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15917: LD_INT 0
15919: PPUSH
// result := true ;
15920: LD_ADDR_VAR 0 3
15924: PUSH
15925: LD_INT 1
15927: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15928: LD_VAR 0 2
15932: PUSH
15933: LD_INT 24
15935: DOUBLE
15936: EQUAL
15937: IFTRUE 15947
15939: LD_INT 33
15941: DOUBLE
15942: EQUAL
15943: IFTRUE 15947
15945: GO 15972
15947: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15948: LD_ADDR_VAR 0 3
15952: PUSH
15953: LD_INT 32
15955: PPUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 321
15965: PUSH
15966: LD_INT 2
15968: EQUAL
15969: ST_TO_ADDR
15970: GO 16288
15972: LD_INT 20
15974: DOUBLE
15975: EQUAL
15976: IFTRUE 15980
15978: GO 16005
15980: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15981: LD_ADDR_VAR 0 3
15985: PUSH
15986: LD_INT 6
15988: PPUSH
15989: LD_VAR 0 1
15993: PPUSH
15994: CALL_OW 321
15998: PUSH
15999: LD_INT 2
16001: EQUAL
16002: ST_TO_ADDR
16003: GO 16288
16005: LD_INT 22
16007: DOUBLE
16008: EQUAL
16009: IFTRUE 16019
16011: LD_INT 36
16013: DOUBLE
16014: EQUAL
16015: IFTRUE 16019
16017: GO 16044
16019: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16020: LD_ADDR_VAR 0 3
16024: PUSH
16025: LD_INT 15
16027: PPUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 321
16037: PUSH
16038: LD_INT 2
16040: EQUAL
16041: ST_TO_ADDR
16042: GO 16288
16044: LD_INT 30
16046: DOUBLE
16047: EQUAL
16048: IFTRUE 16052
16050: GO 16077
16052: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_INT 20
16060: PPUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 321
16070: PUSH
16071: LD_INT 2
16073: EQUAL
16074: ST_TO_ADDR
16075: GO 16288
16077: LD_INT 28
16079: DOUBLE
16080: EQUAL
16081: IFTRUE 16091
16083: LD_INT 21
16085: DOUBLE
16086: EQUAL
16087: IFTRUE 16091
16089: GO 16116
16091: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16092: LD_ADDR_VAR 0 3
16096: PUSH
16097: LD_INT 21
16099: PPUSH
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 321
16109: PUSH
16110: LD_INT 2
16112: EQUAL
16113: ST_TO_ADDR
16114: GO 16288
16116: LD_INT 16
16118: DOUBLE
16119: EQUAL
16120: IFTRUE 16124
16122: GO 16149
16124: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16125: LD_ADDR_VAR 0 3
16129: PUSH
16130: LD_INT 84
16132: PPUSH
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 321
16142: PUSH
16143: LD_INT 2
16145: EQUAL
16146: ST_TO_ADDR
16147: GO 16288
16149: LD_INT 19
16151: DOUBLE
16152: EQUAL
16153: IFTRUE 16163
16155: LD_INT 23
16157: DOUBLE
16158: EQUAL
16159: IFTRUE 16163
16161: GO 16188
16163: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16164: LD_ADDR_VAR 0 3
16168: PUSH
16169: LD_INT 83
16171: PPUSH
16172: LD_VAR 0 1
16176: PPUSH
16177: CALL_OW 321
16181: PUSH
16182: LD_INT 2
16184: EQUAL
16185: ST_TO_ADDR
16186: GO 16288
16188: LD_INT 17
16190: DOUBLE
16191: EQUAL
16192: IFTRUE 16196
16194: GO 16221
16196: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16197: LD_ADDR_VAR 0 3
16201: PUSH
16202: LD_INT 39
16204: PPUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 321
16214: PUSH
16215: LD_INT 2
16217: EQUAL
16218: ST_TO_ADDR
16219: GO 16288
16221: LD_INT 18
16223: DOUBLE
16224: EQUAL
16225: IFTRUE 16229
16227: GO 16254
16229: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16230: LD_ADDR_VAR 0 3
16234: PUSH
16235: LD_INT 40
16237: PPUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: CALL_OW 321
16247: PUSH
16248: LD_INT 2
16250: EQUAL
16251: ST_TO_ADDR
16252: GO 16288
16254: LD_INT 27
16256: DOUBLE
16257: EQUAL
16258: IFTRUE 16262
16260: GO 16287
16262: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16263: LD_ADDR_VAR 0 3
16267: PUSH
16268: LD_INT 35
16270: PPUSH
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 321
16280: PUSH
16281: LD_INT 2
16283: EQUAL
16284: ST_TO_ADDR
16285: GO 16288
16287: POP
// end ;
16288: LD_VAR 0 3
16292: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16293: LD_INT 0
16295: PPUSH
16296: PPUSH
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
16301: PPUSH
16302: PPUSH
16303: PPUSH
16304: PPUSH
16305: PPUSH
// result := false ;
16306: LD_ADDR_VAR 0 6
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16314: LD_VAR 0 1
16318: NOT
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 266
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: IN
16340: NOT
16341: OR
16342: PUSH
16343: LD_VAR 0 2
16347: NOT
16348: OR
16349: PUSH
16350: LD_VAR 0 5
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: LD_INT 2
16363: PUSH
16364: LD_INT 3
16366: PUSH
16367: LD_INT 4
16369: PUSH
16370: LD_INT 5
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: IN
16381: NOT
16382: OR
16383: PUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_VAR 0 4
16393: PPUSH
16394: CALL_OW 488
16398: NOT
16399: OR
16400: IFFALSE 16404
// exit ;
16402: GO 17140
// side := GetSide ( depot ) ;
16404: LD_ADDR_VAR 0 9
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 255
16418: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16419: LD_VAR 0 9
16423: PPUSH
16424: LD_VAR 0 2
16428: PPUSH
16429: CALL 15917 0 2
16433: NOT
16434: IFFALSE 16438
// exit ;
16436: GO 17140
// pom := GetBase ( depot ) ;
16438: LD_ADDR_VAR 0 10
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 274
16452: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16453: LD_ADDR_VAR 0 11
16457: PUSH
16458: LD_VAR 0 2
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 248
16472: PPUSH
16473: CALL_OW 450
16477: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16478: LD_VAR 0 10
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: CALL_OW 275
16490: PUSH
16491: LD_VAR 0 11
16495: PUSH
16496: LD_INT 1
16498: ARRAY
16499: GREATEREQUAL
16500: PUSH
16501: LD_VAR 0 10
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 275
16513: PUSH
16514: LD_VAR 0 11
16518: PUSH
16519: LD_INT 2
16521: ARRAY
16522: GREATEREQUAL
16523: AND
16524: PUSH
16525: LD_VAR 0 10
16529: PPUSH
16530: LD_INT 3
16532: PPUSH
16533: CALL_OW 275
16537: PUSH
16538: LD_VAR 0 11
16542: PUSH
16543: LD_INT 3
16545: ARRAY
16546: GREATEREQUAL
16547: AND
16548: NOT
16549: IFFALSE 16553
// exit ;
16551: GO 17140
// if GetBType ( depot ) = b_depot then
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 266
16562: PUSH
16563: LD_INT 0
16565: EQUAL
16566: IFFALSE 16578
// dist := 28 else
16568: LD_ADDR_VAR 0 14
16572: PUSH
16573: LD_INT 28
16575: ST_TO_ADDR
16576: GO 16586
// dist := 36 ;
16578: LD_ADDR_VAR 0 14
16582: PUSH
16583: LD_INT 36
16585: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_VAR 0 3
16595: PPUSH
16596: LD_VAR 0 4
16600: PPUSH
16601: CALL_OW 297
16605: PUSH
16606: LD_VAR 0 14
16610: GREATER
16611: IFFALSE 16615
// exit ;
16613: GO 17140
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16615: LD_ADDR_VAR 0 12
16619: PUSH
16620: LD_VAR 0 2
16624: PPUSH
16625: LD_VAR 0 3
16629: PPUSH
16630: LD_VAR 0 4
16634: PPUSH
16635: LD_VAR 0 5
16639: PPUSH
16640: LD_VAR 0 1
16644: PPUSH
16645: CALL_OW 248
16649: PPUSH
16650: LD_INT 0
16652: PPUSH
16653: CALL 17145 0 6
16657: ST_TO_ADDR
// if not hexes then
16658: LD_VAR 0 12
16662: NOT
16663: IFFALSE 16667
// exit ;
16665: GO 17140
// hex := GetHexInfo ( x , y ) ;
16667: LD_ADDR_VAR 0 15
16671: PUSH
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_VAR 0 4
16681: PPUSH
16682: CALL_OW 546
16686: ST_TO_ADDR
// if hex [ 1 ] then
16687: LD_VAR 0 15
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: IFFALSE 16699
// exit ;
16697: GO 17140
// height := hex [ 2 ] ;
16699: LD_ADDR_VAR 0 13
16703: PUSH
16704: LD_VAR 0 15
16708: PUSH
16709: LD_INT 2
16711: ARRAY
16712: ST_TO_ADDR
// for i = 1 to hexes do
16713: LD_ADDR_VAR 0 7
16717: PUSH
16718: DOUBLE
16719: LD_INT 1
16721: DEC
16722: ST_TO_ADDR
16723: LD_VAR 0 12
16727: PUSH
16728: FOR_TO
16729: IFFALSE 17059
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16731: LD_VAR 0 12
16735: PUSH
16736: LD_VAR 0 7
16740: ARRAY
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 12
16750: PUSH
16751: LD_VAR 0 7
16755: ARRAY
16756: PUSH
16757: LD_INT 2
16759: ARRAY
16760: PPUSH
16761: CALL_OW 488
16765: NOT
16766: PUSH
16767: LD_VAR 0 12
16771: PUSH
16772: LD_VAR 0 7
16776: ARRAY
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PPUSH
16782: LD_VAR 0 12
16786: PUSH
16787: LD_VAR 0 7
16791: ARRAY
16792: PUSH
16793: LD_INT 2
16795: ARRAY
16796: PPUSH
16797: CALL_OW 428
16801: PUSH
16802: LD_INT 0
16804: GREATER
16805: OR
16806: PUSH
16807: LD_VAR 0 12
16811: PUSH
16812: LD_VAR 0 7
16816: ARRAY
16817: PUSH
16818: LD_INT 1
16820: ARRAY
16821: PPUSH
16822: LD_VAR 0 12
16826: PUSH
16827: LD_VAR 0 7
16831: ARRAY
16832: PUSH
16833: LD_INT 2
16835: ARRAY
16836: PPUSH
16837: CALL_OW 351
16841: OR
16842: IFFALSE 16848
// exit ;
16844: POP
16845: POP
16846: GO 17140
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16848: LD_ADDR_VAR 0 8
16852: PUSH
16853: LD_VAR 0 12
16857: PUSH
16858: LD_VAR 0 7
16862: ARRAY
16863: PUSH
16864: LD_INT 1
16866: ARRAY
16867: PPUSH
16868: LD_VAR 0 12
16872: PUSH
16873: LD_VAR 0 7
16877: ARRAY
16878: PUSH
16879: LD_INT 2
16881: ARRAY
16882: PPUSH
16883: CALL_OW 546
16887: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16888: LD_VAR 0 8
16892: PUSH
16893: LD_INT 1
16895: ARRAY
16896: PUSH
16897: LD_VAR 0 8
16901: PUSH
16902: LD_INT 2
16904: ARRAY
16905: PUSH
16906: LD_VAR 0 13
16910: PUSH
16911: LD_INT 2
16913: PLUS
16914: GREATER
16915: OR
16916: PUSH
16917: LD_VAR 0 8
16921: PUSH
16922: LD_INT 2
16924: ARRAY
16925: PUSH
16926: LD_VAR 0 13
16930: PUSH
16931: LD_INT 2
16933: MINUS
16934: LESS
16935: OR
16936: PUSH
16937: LD_VAR 0 8
16941: PUSH
16942: LD_INT 3
16944: ARRAY
16945: PUSH
16946: LD_INT 0
16948: PUSH
16949: LD_INT 8
16951: PUSH
16952: LD_INT 9
16954: PUSH
16955: LD_INT 10
16957: PUSH
16958: LD_INT 11
16960: PUSH
16961: LD_INT 12
16963: PUSH
16964: LD_INT 13
16966: PUSH
16967: LD_INT 16
16969: PUSH
16970: LD_INT 17
16972: PUSH
16973: LD_INT 18
16975: PUSH
16976: LD_INT 19
16978: PUSH
16979: LD_INT 20
16981: PUSH
16982: LD_INT 21
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: IN
17000: NOT
17001: OR
17002: PUSH
17003: LD_VAR 0 8
17007: PUSH
17008: LD_INT 5
17010: ARRAY
17011: NOT
17012: OR
17013: PUSH
17014: LD_VAR 0 8
17018: PUSH
17019: LD_INT 6
17021: ARRAY
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: LD_INT 7
17031: PUSH
17032: LD_INT 9
17034: PUSH
17035: LD_INT 10
17037: PUSH
17038: LD_INT 11
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: IN
17049: NOT
17050: OR
17051: IFFALSE 17057
// exit ;
17053: POP
17054: POP
17055: GO 17140
// end ;
17057: GO 16728
17059: POP
17060: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17061: LD_VAR 0 9
17065: PPUSH
17066: LD_VAR 0 3
17070: PPUSH
17071: LD_VAR 0 4
17075: PPUSH
17076: LD_INT 20
17078: PPUSH
17079: CALL 9092 0 4
17083: PUSH
17084: LD_INT 4
17086: ARRAY
17087: IFFALSE 17091
// exit ;
17089: GO 17140
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17091: LD_VAR 0 2
17095: PUSH
17096: LD_INT 29
17098: PUSH
17099: LD_INT 30
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: IN
17106: PUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_VAR 0 4
17116: PPUSH
17117: LD_VAR 0 9
17121: PPUSH
17122: CALL_OW 440
17126: NOT
17127: AND
17128: IFFALSE 17132
// exit ;
17130: GO 17140
// result := true ;
17132: LD_ADDR_VAR 0 6
17136: PUSH
17137: LD_INT 1
17139: ST_TO_ADDR
// end ;
17140: LD_VAR 0 6
17144: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17145: LD_INT 0
17147: PPUSH
17148: PPUSH
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
// result = [ ] ;
17205: LD_ADDR_VAR 0 7
17209: PUSH
17210: EMPTY
17211: ST_TO_ADDR
// temp_list = [ ] ;
17212: LD_ADDR_VAR 0 9
17216: PUSH
17217: EMPTY
17218: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17219: LD_VAR 0 4
17223: PUSH
17224: LD_INT 0
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: LD_INT 2
17232: PUSH
17233: LD_INT 3
17235: PUSH
17236: LD_INT 4
17238: PUSH
17239: LD_INT 5
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: IN
17250: NOT
17251: PUSH
17252: LD_VAR 0 1
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: IN
17267: PUSH
17268: LD_VAR 0 5
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 3
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: IN
17287: NOT
17288: AND
17289: OR
17290: IFFALSE 17294
// exit ;
17292: GO 35685
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17294: LD_VAR 0 1
17298: PUSH
17299: LD_INT 6
17301: PUSH
17302: LD_INT 7
17304: PUSH
17305: LD_INT 8
17307: PUSH
17308: LD_INT 13
17310: PUSH
17311: LD_INT 12
17313: PUSH
17314: LD_INT 15
17316: PUSH
17317: LD_INT 11
17319: PUSH
17320: LD_INT 14
17322: PUSH
17323: LD_INT 10
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: IN
17337: IFFALSE 17347
// btype = b_lab ;
17339: LD_ADDR_VAR 0 1
17343: PUSH
17344: LD_INT 6
17346: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17347: LD_VAR 0 6
17351: PUSH
17352: LD_INT 0
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: IN
17366: NOT
17367: PUSH
17368: LD_VAR 0 1
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: LD_INT 6
17387: PUSH
17388: LD_INT 36
17390: PUSH
17391: LD_INT 4
17393: PUSH
17394: LD_INT 5
17396: PUSH
17397: LD_INT 31
17399: PUSH
17400: LD_INT 32
17402: PUSH
17403: LD_INT 33
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: IN
17419: NOT
17420: PUSH
17421: LD_VAR 0 6
17425: PUSH
17426: LD_INT 1
17428: EQUAL
17429: AND
17430: OR
17431: PUSH
17432: LD_VAR 0 1
17436: PUSH
17437: LD_INT 2
17439: PUSH
17440: LD_INT 3
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: IN
17447: NOT
17448: PUSH
17449: LD_VAR 0 6
17453: PUSH
17454: LD_INT 2
17456: EQUAL
17457: AND
17458: OR
17459: IFFALSE 17469
// mode = 0 ;
17461: LD_ADDR_VAR 0 6
17465: PUSH
17466: LD_INT 0
17468: ST_TO_ADDR
// case mode of 0 :
17469: LD_VAR 0 6
17473: PUSH
17474: LD_INT 0
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 28935
17482: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17483: LD_ADDR_VAR 0 11
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: LD_INT 1
17503: NEG
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: LD_INT 0
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: NEG
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: NEG
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: LD_INT 2
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: LD_INT 2
17579: NEG
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: LD_INT 1
17590: NEG
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 1
17598: PUSH
17599: LD_INT 2
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 0
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: LD_INT 1
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: LD_INT 3
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 0
17639: PUSH
17640: LD_INT 3
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 1
17649: NEG
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17676: LD_ADDR_VAR 0 12
17680: PUSH
17681: LD_INT 0
17683: PUSH
17684: LD_INT 0
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: LD_INT 1
17696: NEG
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 0
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 1
17734: NEG
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 1
17745: NEG
17746: PUSH
17747: LD_INT 1
17749: NEG
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 1
17757: PUSH
17758: LD_INT 1
17760: NEG
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 1
17788: NEG
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 2
17799: NEG
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 2
17810: NEG
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 2
17822: NEG
17823: PUSH
17824: LD_INT 1
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 3
17833: NEG
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 3
17844: NEG
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17872: LD_ADDR_VAR 0 13
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: LD_INT 1
17892: NEG
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: LD_INT 0
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: NEG
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 1
17941: NEG
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 2
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 2
17995: NEG
17996: PUSH
17997: LD_INT 1
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: LD_INT 2
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: NEG
18020: PUSH
18021: LD_INT 3
18023: NEG
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 3
18031: NEG
18032: PUSH
18033: LD_INT 2
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 3
18043: NEG
18044: PUSH
18045: LD_INT 3
18047: NEG
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18071: LD_ADDR_VAR 0 14
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: LD_INT 1
18091: NEG
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: LD_INT 0
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: NEG
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: LD_INT 2
18156: NEG
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: LD_INT 2
18167: NEG
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 2
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: LD_INT 3
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 3
18232: NEG
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: LD_INT 2
18243: NEG
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18267: LD_ADDR_VAR 0 15
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: LD_INT 1
18287: NEG
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 0
18315: PUSH
18316: LD_INT 1
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: LD_INT 1
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 2
18390: NEG
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 2
18401: NEG
18402: PUSH
18403: LD_INT 1
18405: NEG
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 1
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 3
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 3
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18460: LD_ADDR_VAR 0 16
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 0
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 1
18518: NEG
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: LD_INT 1
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 1
18541: NEG
18542: PUSH
18543: LD_INT 2
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 2
18583: NEG
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 2
18595: NEG
18596: PUSH
18597: LD_INT 2
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 3
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: LD_INT 3
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: LD_INT 3
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18653: LD_ADDR_VAR 0 17
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: PUSH
18736: LD_INT 2
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 2
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 2
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: NEG
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 2
18829: NEG
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 2
18840: NEG
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: LD_INT 2
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18883: LD_ADDR_VAR 0 18
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: LD_INT 2
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: LD_INT 2
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: NEG
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: LD_INT 2
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19113: LD_ADDR_VAR 0 19
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: LD_INT 1
19133: NEG
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: NEG
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: NEG
19195: PUSH
19196: LD_INT 2
19198: NEG
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 1
19220: NEG
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 2
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 2
19289: NEG
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: NEG
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19343: LD_ADDR_VAR 0 20
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 2
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 1
19450: NEG
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 2
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 2
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 1
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 0
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: NEG
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: NEG
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: LD_INT 2
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19573: LD_ADDR_VAR 0 21
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: LD_INT 1
19593: NEG
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 2
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: LD_INT 0
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 2
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 2
19760: NEG
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: NEG
19773: PUSH
19774: LD_INT 2
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19803: LD_ADDR_VAR 0 22
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: LD_INT 1
19823: NEG
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: NEG
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: NEG
20003: PUSH
20004: LD_INT 2
20006: NEG
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20033: LD_ADDR_VAR 0 23
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: LD_INT 1
20053: NEG
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: LD_INT 2
20118: NEG
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: LD_INT 2
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: NEG
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: LD_INT 0
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: NEG
20233: PUSH
20234: LD_INT 2
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 2
20244: NEG
20245: PUSH
20246: LD_INT 3
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: PUSH
20258: LD_INT 3
20260: NEG
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 2
20271: NEG
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20313: LD_ADDR_VAR 0 24
20317: PUSH
20318: LD_INT 0
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 0
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: NEG
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: LD_INT 2
20398: NEG
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: LD_INT 2
20409: NEG
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 1
20478: NEG
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: LD_INT 0
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: NEG
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 2
20512: NEG
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 2
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: LD_INT 1
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 3
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20589: LD_ADDR_VAR 0 25
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: LD_INT 1
20662: NEG
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 2
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 2
20685: NEG
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 2
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: LD_INT 2
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 0
20744: PUSH
20745: LD_INT 2
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 2
20765: NEG
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 2
20776: NEG
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: NEG
20789: PUSH
20790: LD_INT 2
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 3
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: LD_INT 3
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20863: LD_ADDR_VAR 0 26
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 2
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: LD_INT 2
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 1
20970: NEG
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: NEG
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: NEG
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 2
21062: NEG
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 2
21074: PUSH
21075: LD_INT 3
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: LD_INT 3
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21139: LD_ADDR_VAR 0 27
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: LD_INT 1
21212: NEG
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: LD_INT 2
21224: NEG
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: LD_INT 2
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 1
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: LD_INT 1
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 2
21315: NEG
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 2
21326: NEG
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 2
21338: NEG
21339: PUSH
21340: LD_INT 2
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 2
21361: NEG
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 3
21372: NEG
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 3
21384: NEG
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21419: LD_ADDR_VAR 0 28
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: NEG
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: LD_INT 2
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: LD_INT 2
21515: NEG
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: LD_INT 1
21526: NEG
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: LD_INT 0
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: NEG
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: LD_INT 0
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 2
21606: NEG
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 2
21618: NEG
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: LD_INT 3
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: LD_INT 3
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 3
21654: NEG
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 3
21666: NEG
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21701: LD_ADDR_VAR 0 29
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 1
21721: NEG
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 1
21759: NEG
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: LD_INT 2
21786: NEG
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: LD_INT 2
21797: NEG
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 2
21867: NEG
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: LD_INT 2
21883: NEG
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 2
21891: NEG
21892: PUSH
21893: LD_INT 3
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 1
21906: NEG
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 3
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: LD_INT 3
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 3
21945: NEG
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21980: LD_ADDR_VAR 0 30
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: LD_INT 2
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: LD_INT 2
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: NEG
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 2
22157: NEG
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: LD_INT 3
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 2
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 3
22192: PUSH
22193: LD_INT 2
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: LD_INT 3
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 3
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22258: LD_ADDR_VAR 0 31
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: LD_INT 0
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 2
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: NEG
22436: PUSH
22437: LD_INT 2
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: LD_INT 3
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 1
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 3
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: LD_INT 3
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 3
22501: NEG
22502: PUSH
22503: LD_INT 2
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22536: LD_ADDR_VAR 0 32
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: LD_INT 0
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: NEG
22618: PUSH
22619: LD_INT 2
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: LD_INT 2
22632: NEG
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 2
22702: NEG
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: LD_INT 3
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 2
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: NEG
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 3
22779: NEG
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22814: LD_ADDR_VAR 0 33
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 2
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 2
22980: NEG
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: LD_INT 3
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 3
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 3
23058: NEG
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23093: LD_ADDR_VAR 0 34
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 0
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: LD_INT 2
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 2
23189: NEG
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 1
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 2
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 1
23238: NEG
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 2
23249: NEG
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: LD_INT 1
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: LD_INT 3
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 2
23299: NEG
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 2
23327: NEG
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 3
23338: NEG
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23373: LD_ADDR_VAR 0 35
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: NEG
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23485: LD_ADDR_VAR 0 36
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23597: LD_ADDR_VAR 0 37
23601: PUSH
23602: LD_INT 0
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23709: LD_ADDR_VAR 0 38
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23821: LD_ADDR_VAR 0 39
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: LD_INT 0
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: NEG
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: NEG
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: LD_INT 2
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23933: LD_ADDR_VAR 0 40
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24045: LD_ADDR_VAR 0 41
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 2
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 1
24141: NEG
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 2
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 2
24200: NEG
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: NEG
24224: PUSH
24225: LD_INT 2
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: LD_INT 3
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 3
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 3
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 3
24288: PUSH
24289: LD_INT 3
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 3
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: LD_INT 1
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 3
24319: NEG
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 3
24330: NEG
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 3
24342: NEG
24343: PUSH
24344: LD_INT 2
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 3
24354: NEG
24355: PUSH
24356: LD_INT 3
24358: NEG
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24395: LD_ADDR_VAR 0 42
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 2
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: LD_INT 2
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: LD_INT 2
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: NEG
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 2
24561: NEG
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: NEG
24574: PUSH
24575: LD_INT 2
24577: NEG
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: NEG
24586: PUSH
24587: LD_INT 3
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 3
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: LD_INT 3
24612: NEG
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 2
24623: NEG
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 3
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: LD_INT 3
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 3
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: NEG
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 3
24704: NEG
24705: PUSH
24706: LD_INT 3
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24745: LD_ADDR_VAR 0 43
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: LD_INT 2
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: NEG
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 2
24922: NEG
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 3
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: LD_INT 3
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: LD_INT 2
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 3
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 3
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: LD_INT 3
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 2
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 3
25041: NEG
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 3
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25093: LD_ADDR_VAR 0 44
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 0
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 2
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 2
25259: NEG
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: LD_INT 3
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 3
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 3
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 3
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 3
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 3
25367: NEG
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 3
25378: NEG
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: NEG
25391: PUSH
25392: LD_INT 2
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 3
25402: NEG
25403: PUSH
25404: LD_INT 3
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25443: LD_ADDR_VAR 0 45
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: LD_INT 2
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 2
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 1
25598: NEG
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: NEG
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 3
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: LD_INT 3
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: LD_INT 3
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 3
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 3
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: LD_INT 3
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 3
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: LD_INT 3
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 3
25740: NEG
25741: PUSH
25742: LD_INT 2
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 3
25752: NEG
25753: PUSH
25754: LD_INT 3
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25793: LD_ADDR_VAR 0 46
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 2
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 3
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 3
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 3
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 3
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: LD_INT 3
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 3
26089: NEG
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 3
26100: NEG
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26141: LD_ADDR_VAR 0 47
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: LD_INT 2
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 2
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: NEG
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26292: LD_ADDR_VAR 0 48
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: LD_INT 2
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26439: LD_ADDR_VAR 0 49
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: LD_INT 1
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26583: LD_ADDR_VAR 0 50
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26727: LD_ADDR_VAR 0 51
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26874: LD_ADDR_VAR 0 52
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 2
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: LD_INT 2
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27025: LD_ADDR_VAR 0 53
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 2
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 2
27212: NEG
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 2
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27255: LD_ADDR_VAR 0 54
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 2
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 2
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 2
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27485: LD_ADDR_VAR 0 55
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 2
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27715: LD_ADDR_VAR 0 56
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 2
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: NEG
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: LD_INT 2
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27945: LD_ADDR_VAR 0 57
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: LD_INT 2
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: NEG
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: LD_INT 2
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28175: LD_ADDR_VAR 0 58
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28405: LD_ADDR_VAR 0 59
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28493: LD_ADDR_VAR 0 60
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28581: LD_ADDR_VAR 0 61
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: LD_INT 1
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28669: LD_ADDR_VAR 0 62
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28757: LD_ADDR_VAR 0 63
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28845: LD_ADDR_VAR 0 64
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: ST_TO_ADDR
// end ; 1 :
28933: GO 34830
28935: LD_INT 1
28937: DOUBLE
28938: EQUAL
28939: IFTRUE 28943
28941: GO 31566
28943: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28944: LD_ADDR_VAR 0 11
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: LD_INT 3
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28988: LD_ADDR_VAR 0 12
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 3
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29029: LD_ADDR_VAR 0 13
29033: PUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 3
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 3
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29069: LD_ADDR_VAR 0 14
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: LD_INT 3
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29110: LD_ADDR_VAR 0 15
29114: PUSH
29115: LD_INT 2
29117: NEG
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 3
29128: NEG
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 3
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29154: LD_ADDR_VAR 0 16
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: LD_INT 3
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 3
29173: NEG
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: LD_INT 3
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: LIST
29199: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29200: LD_ADDR_VAR 0 17
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: LD_INT 3
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 3
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 2
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29244: LD_ADDR_VAR 0 18
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29285: LD_ADDR_VAR 0 19
29289: PUSH
29290: LD_INT 3
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: LD_INT 3
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: LD_INT 3
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29325: LD_ADDR_VAR 0 20
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: LD_INT 3
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29366: LD_ADDR_VAR 0 21
29370: PUSH
29371: LD_INT 2
29373: NEG
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 3
29384: NEG
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 3
29395: NEG
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29410: LD_ADDR_VAR 0 22
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: LD_INT 3
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: LD_INT 2
29433: NEG
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 3
29441: NEG
29442: PUSH
29443: LD_INT 3
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29456: LD_ADDR_VAR 0 23
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: LD_INT 3
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 4
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29500: LD_ADDR_VAR 0 24
29504: PUSH
29505: LD_INT 3
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 4
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29541: LD_ADDR_VAR 0 25
29545: PUSH
29546: LD_INT 3
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 4
29558: PUSH
29559: LD_INT 3
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: LD_INT 4
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29581: LD_ADDR_VAR 0 26
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: LD_INT 4
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29622: LD_ADDR_VAR 0 27
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 4
29651: NEG
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29666: LD_ADDR_VAR 0 28
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: LD_INT 3
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 4
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 4
29697: NEG
29698: PUSH
29699: LD_INT 3
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29712: LD_ADDR_VAR 0 29
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 3
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 2
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 4
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 4
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 3
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 5
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 5
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: LD_INT 4
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: LD_INT 6
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 6
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 5
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29867: LD_ADDR_VAR 0 30
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 4
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 4
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 4
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 5
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 5
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 5
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 6
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 6
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30010: LD_ADDR_VAR 0 31
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 3
30027: PUSH
30028: LD_INT 3
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: LD_INT 3
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 4
30047: PUSH
30048: LD_INT 3
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 4
30057: PUSH
30058: LD_INT 4
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 3
30067: PUSH
30068: LD_INT 4
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 5
30077: PUSH
30078: LD_INT 4
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 5
30087: PUSH
30088: LD_INT 5
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 4
30097: PUSH
30098: LD_INT 5
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 6
30107: PUSH
30108: LD_INT 5
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 6
30117: PUSH
30118: LD_INT 6
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 5
30127: PUSH
30128: LD_INT 6
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30149: LD_ADDR_VAR 0 32
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: LD_INT 4
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: LD_INT 4
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: LD_INT 3
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: LD_INT 5
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: LD_INT 4
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 6
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: LD_INT 6
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: LD_INT 5
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30292: LD_ADDR_VAR 0 33
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 3
30310: NEG
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: NEG
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 3
30333: NEG
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 4
30344: NEG
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 4
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 4
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 5
30378: NEG
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 5
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 5
30401: NEG
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 6
30412: NEG
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 6
30423: NEG
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30447: LD_ADDR_VAR 0 34
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: LD_INT 3
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 3
30478: NEG
30479: PUSH
30480: LD_INT 3
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 4
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 4
30502: NEG
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 4
30514: NEG
30515: PUSH
30516: LD_INT 4
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 4
30526: NEG
30527: PUSH
30528: LD_INT 5
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 5
30538: NEG
30539: PUSH
30540: LD_INT 4
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 5
30550: NEG
30551: PUSH
30552: LD_INT 5
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 5
30562: NEG
30563: PUSH
30564: LD_INT 6
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 6
30574: NEG
30575: PUSH
30576: LD_INT 5
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 6
30586: NEG
30587: PUSH
30588: LD_INT 6
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30610: LD_ADDR_VAR 0 41
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 3
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30654: LD_ADDR_VAR 0 42
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30695: LD_ADDR_VAR 0 43
30699: PUSH
30700: LD_INT 2
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30735: LD_ADDR_VAR 0 44
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30776: LD_ADDR_VAR 0 45
30780: PUSH
30781: LD_INT 2
30783: NEG
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 3
30805: NEG
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: LIST
30819: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30820: LD_ADDR_VAR 0 46
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 3
30851: NEG
30852: PUSH
30853: LD_INT 2
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30866: LD_ADDR_VAR 0 47
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: LD_INT 3
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30899: LD_ADDR_VAR 0 48
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30930: LD_ADDR_VAR 0 49
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30959: LD_ADDR_VAR 0 50
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: LD_INT 3
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: LD_INT 3
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30988: LD_ADDR_VAR 0 51
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: NEG
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31019: LD_ADDR_VAR 0 52
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31052: LD_ADDR_VAR 0 53
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: LD_INT 3
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: LD_INT 3
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: LD_INT 2
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31096: LD_ADDR_VAR 0 54
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31137: LD_ADDR_VAR 0 55
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: LD_INT 3
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31177: LD_ADDR_VAR 0 56
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31218: LD_ADDR_VAR 0 57
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 3
31236: NEG
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 3
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31262: LD_ADDR_VAR 0 58
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: LD_INT 3
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: NEG
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: LD_INT 3
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31308: LD_ADDR_VAR 0 59
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31352: LD_ADDR_VAR 0 60
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31393: LD_ADDR_VAR 0 61
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31433: LD_ADDR_VAR 0 62
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31474: LD_ADDR_VAR 0 63
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: NEG
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31518: LD_ADDR_VAR 0 64
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// end ; 2 :
31564: GO 34830
31566: LD_INT 2
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 34829
31574: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31575: LD_ADDR_VAR 0 29
31579: PUSH
31580: LD_INT 4
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 4
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 5
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 5
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 4
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 3
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 3
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 5
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 3
31675: PUSH
31676: LD_INT 3
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 4
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 4
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: LD_INT 3
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 4
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 4
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 4
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: LD_INT 4
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 5
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: LD_INT 5
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: LD_INT 4
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: LD_INT 3
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: LD_INT 5
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 3
31858: NEG
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 4
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 4
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 4
31937: NEG
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 4
31960: NEG
31961: PUSH
31962: LD_INT 4
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 4
31972: NEG
31973: PUSH
31974: LD_INT 5
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: NEG
31985: PUSH
31986: LD_INT 4
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 3
31996: NEG
31997: PUSH
31998: LD_INT 3
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 4
32008: NEG
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 5
32020: NEG
32021: PUSH
32022: LD_INT 4
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 5
32032: NEG
32033: PUSH
32034: LD_INT 5
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 3
32044: NEG
32045: PUSH
32046: LD_INT 5
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 5
32056: NEG
32057: PUSH
32058: LD_INT 3
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32113: LD_ADDR_VAR 0 30
32117: PUSH
32118: LD_INT 4
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 4
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 5
32140: PUSH
32141: LD_INT 4
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 5
32150: PUSH
32151: LD_INT 5
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 4
32160: PUSH
32161: LD_INT 5
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 3
32170: PUSH
32171: LD_INT 4
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 3
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 5
32190: PUSH
32191: LD_INT 3
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 5
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 4
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: LD_INT 3
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 4
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 4
32303: NEG
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 4
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 3
32326: NEG
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 3
32337: NEG
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 4
32348: NEG
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 5
32359: NEG
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 5
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 5
32382: NEG
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: LD_INT 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: NEG
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 3
32417: NEG
32418: PUSH
32419: LD_INT 4
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: NEG
32430: PUSH
32431: LD_INT 3
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 4
32465: NEG
32466: PUSH
32467: LD_INT 3
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 4
32477: NEG
32478: PUSH
32479: LD_INT 4
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: LD_INT 4
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 4
32501: NEG
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: LD_INT 4
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: LD_INT 5
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: LD_INT 3
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: LD_INT 3
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 4
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 5
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: LD_INT 3
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: LD_INT 5
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32660: LD_ADDR_VAR 0 31
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 4
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: LD_INT 4
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 5
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 5
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: LD_INT 4
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: LD_INT 3
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 5
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 3
32760: NEG
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 3
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 3
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 4
32816: NEG
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 4
32827: NEG
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 4
32839: NEG
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 4
32862: NEG
32863: PUSH
32864: LD_INT 4
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 4
32874: NEG
32875: PUSH
32876: LD_INT 5
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 3
32886: NEG
32887: PUSH
32888: LD_INT 4
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: LD_INT 3
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 4
32910: NEG
32911: PUSH
32912: LD_INT 3
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 5
32922: NEG
32923: PUSH
32924: LD_INT 4
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 5
32934: NEG
32935: PUSH
32936: LD_INT 5
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 3
32946: NEG
32947: PUSH
32948: LD_INT 5
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 5
32958: NEG
32959: PUSH
32960: LD_INT 3
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 3
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 4
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 3
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: LD_INT 3
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 4
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 4
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 4
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 4
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 5
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 5
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 4
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 3
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 3
33144: PUSH
33145: LD_INT 2
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 5
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33210: LD_ADDR_VAR 0 32
33214: PUSH
33215: LD_INT 4
33217: NEG
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 4
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: NEG
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 5
33273: NEG
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 5
33284: NEG
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 5
33296: NEG
33297: PUSH
33298: LD_INT 2
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 3
33308: NEG
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: LD_INT 3
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: NEG
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: NEG
33344: PUSH
33345: LD_INT 3
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 3
33367: NEG
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 4
33379: NEG
33380: PUSH
33381: LD_INT 3
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 4
33391: NEG
33392: PUSH
33393: LD_INT 4
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 4
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 4
33415: NEG
33416: PUSH
33417: LD_INT 2
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 4
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 5
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 4
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 3
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: LD_INT 3
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 4
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 5
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 3
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: LD_INT 5
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 3
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 4
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 4
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 3
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 2
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 4
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 4
33622: PUSH
33623: LD_INT 4
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 4
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 5
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 5
33652: PUSH
33653: LD_INT 5
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 4
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 3
33672: PUSH
33673: LD_INT 4
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: LD_INT 3
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 5
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 3
33702: PUSH
33703: LD_INT 5
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33757: LD_ADDR_VAR 0 33
33761: PUSH
33762: LD_INT 4
33764: NEG
33765: PUSH
33766: LD_INT 4
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 4
33776: NEG
33777: PUSH
33778: LD_INT 5
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 3
33788: NEG
33789: PUSH
33790: LD_INT 4
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 3
33800: NEG
33801: PUSH
33802: LD_INT 3
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 4
33812: NEG
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 5
33824: NEG
33825: PUSH
33826: LD_INT 4
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 5
33836: NEG
33837: PUSH
33838: LD_INT 5
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 3
33848: NEG
33849: PUSH
33850: LD_INT 5
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 5
33860: NEG
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 4
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 3
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 2
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 2
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 3
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 2
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 4
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 4
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 4
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 5
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 5
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: LD_INT 2
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 5
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 3
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 3
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 4
34087: PUSH
34088: LD_INT 3
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 4
34097: PUSH
34098: LD_INT 4
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: LD_INT 4
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 3
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 4
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 4
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 4
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 4
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: LD_INT 5
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: LD_INT 5
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: LD_INT 4
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: NEG
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: LD_INT 5
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34295: LD_ADDR_VAR 0 34
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 4
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 5
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 4
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: LD_INT 3
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 3
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: LD_INT 4
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: LD_INT 5
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 3
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: LD_INT 5
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 4
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 4
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 3
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 4
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 4
34497: PUSH
34498: LD_INT 4
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 4
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 5
34517: PUSH
34518: LD_INT 4
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 5
34527: PUSH
34528: LD_INT 5
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 4
34537: PUSH
34538: LD_INT 5
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 3
34547: PUSH
34548: LD_INT 4
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 5
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: LD_INT 5
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: LD_INT 3
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: LD_INT 4
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 4
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 4
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 4
34680: NEG
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 4
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 3
34703: NEG
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 3
34714: NEG
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 4
34725: NEG
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 5
34736: NEG
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 5
34747: NEG
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 5
34759: NEG
34760: PUSH
34761: LD_INT 2
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 3
34771: NEG
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
// end ; end ;
34827: GO 34830
34829: POP
// case btype of b_depot , b_warehouse :
34830: LD_VAR 0 1
34834: PUSH
34835: LD_INT 0
34837: DOUBLE
34838: EQUAL
34839: IFTRUE 34849
34841: LD_INT 1
34843: DOUBLE
34844: EQUAL
34845: IFTRUE 34849
34847: GO 35050
34849: POP
// case nation of nation_american :
34850: LD_VAR 0 5
34854: PUSH
34855: LD_INT 1
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34863
34861: GO 34919
34863: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34864: LD_ADDR_VAR 0 9
34868: PUSH
34869: LD_VAR 0 11
34873: PUSH
34874: LD_VAR 0 12
34878: PUSH
34879: LD_VAR 0 13
34883: PUSH
34884: LD_VAR 0 14
34888: PUSH
34889: LD_VAR 0 15
34893: PUSH
34894: LD_VAR 0 16
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: PUSH
34907: LD_VAR 0 4
34911: PUSH
34912: LD_INT 1
34914: PLUS
34915: ARRAY
34916: ST_TO_ADDR
34917: GO 35048
34919: LD_INT 2
34921: DOUBLE
34922: EQUAL
34923: IFTRUE 34927
34925: GO 34983
34927: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34928: LD_ADDR_VAR 0 9
34932: PUSH
34933: LD_VAR 0 17
34937: PUSH
34938: LD_VAR 0 18
34942: PUSH
34943: LD_VAR 0 19
34947: PUSH
34948: LD_VAR 0 20
34952: PUSH
34953: LD_VAR 0 21
34957: PUSH
34958: LD_VAR 0 22
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: PUSH
34971: LD_VAR 0 4
34975: PUSH
34976: LD_INT 1
34978: PLUS
34979: ARRAY
34980: ST_TO_ADDR
34981: GO 35048
34983: LD_INT 3
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 34991
34989: GO 35047
34991: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34992: LD_ADDR_VAR 0 9
34996: PUSH
34997: LD_VAR 0 23
35001: PUSH
35002: LD_VAR 0 24
35006: PUSH
35007: LD_VAR 0 25
35011: PUSH
35012: LD_VAR 0 26
35016: PUSH
35017: LD_VAR 0 27
35021: PUSH
35022: LD_VAR 0 28
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: PUSH
35035: LD_VAR 0 4
35039: PUSH
35040: LD_INT 1
35042: PLUS
35043: ARRAY
35044: ST_TO_ADDR
35045: GO 35048
35047: POP
35048: GO 35603
35050: LD_INT 2
35052: DOUBLE
35053: EQUAL
35054: IFTRUE 35064
35056: LD_INT 3
35058: DOUBLE
35059: EQUAL
35060: IFTRUE 35064
35062: GO 35120
35064: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35065: LD_ADDR_VAR 0 9
35069: PUSH
35070: LD_VAR 0 29
35074: PUSH
35075: LD_VAR 0 30
35079: PUSH
35080: LD_VAR 0 31
35084: PUSH
35085: LD_VAR 0 32
35089: PUSH
35090: LD_VAR 0 33
35094: PUSH
35095: LD_VAR 0 34
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: PUSH
35108: LD_VAR 0 4
35112: PUSH
35113: LD_INT 1
35115: PLUS
35116: ARRAY
35117: ST_TO_ADDR
35118: GO 35603
35120: LD_INT 16
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35182
35126: LD_INT 17
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35182
35132: LD_INT 18
35134: DOUBLE
35135: EQUAL
35136: IFTRUE 35182
35138: LD_INT 19
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35182
35144: LD_INT 22
35146: DOUBLE
35147: EQUAL
35148: IFTRUE 35182
35150: LD_INT 20
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35182
35156: LD_INT 21
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35182
35162: LD_INT 23
35164: DOUBLE
35165: EQUAL
35166: IFTRUE 35182
35168: LD_INT 24
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35182
35174: LD_INT 25
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35238
35182: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35183: LD_ADDR_VAR 0 9
35187: PUSH
35188: LD_VAR 0 35
35192: PUSH
35193: LD_VAR 0 36
35197: PUSH
35198: LD_VAR 0 37
35202: PUSH
35203: LD_VAR 0 38
35207: PUSH
35208: LD_VAR 0 39
35212: PUSH
35213: LD_VAR 0 40
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: PUSH
35226: LD_VAR 0 4
35230: PUSH
35231: LD_INT 1
35233: PLUS
35234: ARRAY
35235: ST_TO_ADDR
35236: GO 35603
35238: LD_INT 6
35240: DOUBLE
35241: EQUAL
35242: IFTRUE 35294
35244: LD_INT 7
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35294
35250: LD_INT 8
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35294
35256: LD_INT 13
35258: DOUBLE
35259: EQUAL
35260: IFTRUE 35294
35262: LD_INT 12
35264: DOUBLE
35265: EQUAL
35266: IFTRUE 35294
35268: LD_INT 15
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35294
35274: LD_INT 11
35276: DOUBLE
35277: EQUAL
35278: IFTRUE 35294
35280: LD_INT 14
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35294
35286: LD_INT 10
35288: DOUBLE
35289: EQUAL
35290: IFTRUE 35294
35292: GO 35350
35294: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35295: LD_ADDR_VAR 0 9
35299: PUSH
35300: LD_VAR 0 41
35304: PUSH
35305: LD_VAR 0 42
35309: PUSH
35310: LD_VAR 0 43
35314: PUSH
35315: LD_VAR 0 44
35319: PUSH
35320: LD_VAR 0 45
35324: PUSH
35325: LD_VAR 0 46
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: PUSH
35338: LD_VAR 0 4
35342: PUSH
35343: LD_INT 1
35345: PLUS
35346: ARRAY
35347: ST_TO_ADDR
35348: GO 35603
35350: LD_INT 36
35352: DOUBLE
35353: EQUAL
35354: IFTRUE 35358
35356: GO 35414
35358: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35359: LD_ADDR_VAR 0 9
35363: PUSH
35364: LD_VAR 0 47
35368: PUSH
35369: LD_VAR 0 48
35373: PUSH
35374: LD_VAR 0 49
35378: PUSH
35379: LD_VAR 0 50
35383: PUSH
35384: LD_VAR 0 51
35388: PUSH
35389: LD_VAR 0 52
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: PUSH
35402: LD_VAR 0 4
35406: PUSH
35407: LD_INT 1
35409: PLUS
35410: ARRAY
35411: ST_TO_ADDR
35412: GO 35603
35414: LD_INT 4
35416: DOUBLE
35417: EQUAL
35418: IFTRUE 35440
35420: LD_INT 5
35422: DOUBLE
35423: EQUAL
35424: IFTRUE 35440
35426: LD_INT 34
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35440
35432: LD_INT 37
35434: DOUBLE
35435: EQUAL
35436: IFTRUE 35440
35438: GO 35496
35440: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35441: LD_ADDR_VAR 0 9
35445: PUSH
35446: LD_VAR 0 53
35450: PUSH
35451: LD_VAR 0 54
35455: PUSH
35456: LD_VAR 0 55
35460: PUSH
35461: LD_VAR 0 56
35465: PUSH
35466: LD_VAR 0 57
35470: PUSH
35471: LD_VAR 0 58
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: PUSH
35484: LD_VAR 0 4
35488: PUSH
35489: LD_INT 1
35491: PLUS
35492: ARRAY
35493: ST_TO_ADDR
35494: GO 35603
35496: LD_INT 31
35498: DOUBLE
35499: EQUAL
35500: IFTRUE 35546
35502: LD_INT 32
35504: DOUBLE
35505: EQUAL
35506: IFTRUE 35546
35508: LD_INT 33
35510: DOUBLE
35511: EQUAL
35512: IFTRUE 35546
35514: LD_INT 27
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35546
35520: LD_INT 26
35522: DOUBLE
35523: EQUAL
35524: IFTRUE 35546
35526: LD_INT 28
35528: DOUBLE
35529: EQUAL
35530: IFTRUE 35546
35532: LD_INT 29
35534: DOUBLE
35535: EQUAL
35536: IFTRUE 35546
35538: LD_INT 30
35540: DOUBLE
35541: EQUAL
35542: IFTRUE 35546
35544: GO 35602
35546: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35547: LD_ADDR_VAR 0 9
35551: PUSH
35552: LD_VAR 0 59
35556: PUSH
35557: LD_VAR 0 60
35561: PUSH
35562: LD_VAR 0 61
35566: PUSH
35567: LD_VAR 0 62
35571: PUSH
35572: LD_VAR 0 63
35576: PUSH
35577: LD_VAR 0 64
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: PUSH
35590: LD_VAR 0 4
35594: PUSH
35595: LD_INT 1
35597: PLUS
35598: ARRAY
35599: ST_TO_ADDR
35600: GO 35603
35602: POP
// temp_list2 = [ ] ;
35603: LD_ADDR_VAR 0 10
35607: PUSH
35608: EMPTY
35609: ST_TO_ADDR
// for i in temp_list do
35610: LD_ADDR_VAR 0 8
35614: PUSH
35615: LD_VAR 0 9
35619: PUSH
35620: FOR_IN
35621: IFFALSE 35673
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35623: LD_ADDR_VAR 0 10
35627: PUSH
35628: LD_VAR 0 10
35632: PUSH
35633: LD_VAR 0 8
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: PUSH
35642: LD_VAR 0 2
35646: PLUS
35647: PUSH
35648: LD_VAR 0 8
35652: PUSH
35653: LD_INT 2
35655: ARRAY
35656: PUSH
35657: LD_VAR 0 3
35661: PLUS
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: ADD
35670: ST_TO_ADDR
35671: GO 35620
35673: POP
35674: POP
// result = temp_list2 ;
35675: LD_ADDR_VAR 0 7
35679: PUSH
35680: LD_VAR 0 10
35684: ST_TO_ADDR
// end ;
35685: LD_VAR 0 7
35689: RET
// export function EnemyInRange ( unit , dist ) ; begin
35690: LD_INT 0
35692: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35693: LD_ADDR_VAR 0 3
35697: PUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: CALL_OW 255
35707: PPUSH
35708: LD_VAR 0 1
35712: PPUSH
35713: CALL_OW 250
35717: PPUSH
35718: LD_VAR 0 1
35722: PPUSH
35723: CALL_OW 251
35727: PPUSH
35728: LD_VAR 0 2
35732: PPUSH
35733: CALL 9092 0 4
35737: PUSH
35738: LD_INT 4
35740: ARRAY
35741: ST_TO_ADDR
// end ;
35742: LD_VAR 0 3
35746: RET
// export function PlayerSeeMe ( unit ) ; begin
35747: LD_INT 0
35749: PPUSH
// result := See ( your_side , unit ) ;
35750: LD_ADDR_VAR 0 2
35754: PUSH
35755: LD_OWVAR 2
35759: PPUSH
35760: LD_VAR 0 1
35764: PPUSH
35765: CALL_OW 292
35769: ST_TO_ADDR
// end ;
35770: LD_VAR 0 2
35774: RET
// export function ReverseDir ( unit ) ; begin
35775: LD_INT 0
35777: PPUSH
// if not unit then
35778: LD_VAR 0 1
35782: NOT
35783: IFFALSE 35787
// exit ;
35785: GO 35810
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35787: LD_ADDR_VAR 0 2
35791: PUSH
35792: LD_VAR 0 1
35796: PPUSH
35797: CALL_OW 254
35801: PUSH
35802: LD_INT 3
35804: PLUS
35805: PUSH
35806: LD_INT 6
35808: MOD
35809: ST_TO_ADDR
// end ;
35810: LD_VAR 0 2
35814: RET
// export function ReverseArray ( array ) ; var i ; begin
35815: LD_INT 0
35817: PPUSH
35818: PPUSH
// if not array then
35819: LD_VAR 0 1
35823: NOT
35824: IFFALSE 35828
// exit ;
35826: GO 35883
// result := [ ] ;
35828: LD_ADDR_VAR 0 2
35832: PUSH
35833: EMPTY
35834: ST_TO_ADDR
// for i := array downto 1 do
35835: LD_ADDR_VAR 0 3
35839: PUSH
35840: DOUBLE
35841: LD_VAR 0 1
35845: INC
35846: ST_TO_ADDR
35847: LD_INT 1
35849: PUSH
35850: FOR_DOWNTO
35851: IFFALSE 35881
// result := Join ( result , array [ i ] ) ;
35853: LD_ADDR_VAR 0 2
35857: PUSH
35858: LD_VAR 0 2
35862: PPUSH
35863: LD_VAR 0 1
35867: PUSH
35868: LD_VAR 0 3
35872: ARRAY
35873: PPUSH
35874: CALL 40527 0 2
35878: ST_TO_ADDR
35879: GO 35850
35881: POP
35882: POP
// end ;
35883: LD_VAR 0 2
35887: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35888: LD_INT 0
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
// if not unit or not hexes then
35896: LD_VAR 0 1
35900: NOT
35901: PUSH
35902: LD_VAR 0 2
35906: NOT
35907: OR
35908: IFFALSE 35912
// exit ;
35910: GO 36035
// dist := 9999 ;
35912: LD_ADDR_VAR 0 5
35916: PUSH
35917: LD_INT 9999
35919: ST_TO_ADDR
// for i = 1 to hexes do
35920: LD_ADDR_VAR 0 4
35924: PUSH
35925: DOUBLE
35926: LD_INT 1
35928: DEC
35929: ST_TO_ADDR
35930: LD_VAR 0 2
35934: PUSH
35935: FOR_TO
35936: IFFALSE 36023
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35938: LD_ADDR_VAR 0 6
35942: PUSH
35943: LD_VAR 0 1
35947: PPUSH
35948: LD_VAR 0 2
35952: PUSH
35953: LD_VAR 0 4
35957: ARRAY
35958: PUSH
35959: LD_INT 1
35961: ARRAY
35962: PPUSH
35963: LD_VAR 0 2
35967: PUSH
35968: LD_VAR 0 4
35972: ARRAY
35973: PUSH
35974: LD_INT 2
35976: ARRAY
35977: PPUSH
35978: CALL_OW 297
35982: ST_TO_ADDR
// if tdist < dist then
35983: LD_VAR 0 6
35987: PUSH
35988: LD_VAR 0 5
35992: LESS
35993: IFFALSE 36021
// begin hex := hexes [ i ] ;
35995: LD_ADDR_VAR 0 8
35999: PUSH
36000: LD_VAR 0 2
36004: PUSH
36005: LD_VAR 0 4
36009: ARRAY
36010: ST_TO_ADDR
// dist := tdist ;
36011: LD_ADDR_VAR 0 5
36015: PUSH
36016: LD_VAR 0 6
36020: ST_TO_ADDR
// end ; end ;
36021: GO 35935
36023: POP
36024: POP
// result := hex ;
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_VAR 0 8
36034: ST_TO_ADDR
// end ;
36035: LD_VAR 0 3
36039: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36040: LD_INT 0
36042: PPUSH
36043: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36044: LD_VAR 0 1
36048: NOT
36049: PUSH
36050: LD_VAR 0 1
36054: PUSH
36055: LD_INT 21
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 23
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PPUSH
36079: CALL_OW 69
36083: IN
36084: NOT
36085: OR
36086: IFFALSE 36090
// exit ;
36088: GO 36137
// for i = 1 to 3 do
36090: LD_ADDR_VAR 0 3
36094: PUSH
36095: DOUBLE
36096: LD_INT 1
36098: DEC
36099: ST_TO_ADDR
36100: LD_INT 3
36102: PUSH
36103: FOR_TO
36104: IFFALSE 36135
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36106: LD_VAR 0 1
36110: PPUSH
36111: CALL_OW 250
36115: PPUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: CALL_OW 251
36125: PPUSH
36126: LD_INT 1
36128: PPUSH
36129: CALL_OW 453
36133: GO 36103
36135: POP
36136: POP
// end ;
36137: LD_VAR 0 2
36141: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36142: LD_INT 0
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
36149: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36150: LD_VAR 0 1
36154: NOT
36155: PUSH
36156: LD_VAR 0 2
36160: NOT
36161: OR
36162: PUSH
36163: LD_VAR 0 1
36167: PPUSH
36168: CALL_OW 314
36172: OR
36173: IFFALSE 36177
// exit ;
36175: GO 36644
// if GetLives ( i ) < 250 then
36177: LD_VAR 0 4
36181: PPUSH
36182: CALL_OW 256
36186: PUSH
36187: LD_INT 250
36189: LESS
36190: IFFALSE 36203
// begin ComAutodestruct ( i ) ;
36192: LD_VAR 0 4
36196: PPUSH
36197: CALL 36040 0 1
// exit ;
36201: GO 36644
// end ; x := GetX ( enemy_unit ) ;
36203: LD_ADDR_VAR 0 7
36207: PUSH
36208: LD_VAR 0 2
36212: PPUSH
36213: CALL_OW 250
36217: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36218: LD_ADDR_VAR 0 8
36222: PUSH
36223: LD_VAR 0 2
36227: PPUSH
36228: CALL_OW 251
36232: ST_TO_ADDR
// if not x or not y then
36233: LD_VAR 0 7
36237: NOT
36238: PUSH
36239: LD_VAR 0 8
36243: NOT
36244: OR
36245: IFFALSE 36249
// exit ;
36247: GO 36644
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36249: LD_ADDR_VAR 0 6
36253: PUSH
36254: LD_VAR 0 7
36258: PPUSH
36259: LD_INT 0
36261: PPUSH
36262: LD_INT 4
36264: PPUSH
36265: CALL_OW 272
36269: PUSH
36270: LD_VAR 0 8
36274: PPUSH
36275: LD_INT 0
36277: PPUSH
36278: LD_INT 4
36280: PPUSH
36281: CALL_OW 273
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_VAR 0 7
36294: PPUSH
36295: LD_INT 1
36297: PPUSH
36298: LD_INT 4
36300: PPUSH
36301: CALL_OW 272
36305: PUSH
36306: LD_VAR 0 8
36310: PPUSH
36311: LD_INT 1
36313: PPUSH
36314: LD_INT 4
36316: PPUSH
36317: CALL_OW 273
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_VAR 0 7
36330: PPUSH
36331: LD_INT 2
36333: PPUSH
36334: LD_INT 4
36336: PPUSH
36337: CALL_OW 272
36341: PUSH
36342: LD_VAR 0 8
36346: PPUSH
36347: LD_INT 2
36349: PPUSH
36350: LD_INT 4
36352: PPUSH
36353: CALL_OW 273
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_VAR 0 7
36366: PPUSH
36367: LD_INT 3
36369: PPUSH
36370: LD_INT 4
36372: PPUSH
36373: CALL_OW 272
36377: PUSH
36378: LD_VAR 0 8
36382: PPUSH
36383: LD_INT 3
36385: PPUSH
36386: LD_INT 4
36388: PPUSH
36389: CALL_OW 273
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_VAR 0 7
36402: PPUSH
36403: LD_INT 4
36405: PPUSH
36406: LD_INT 4
36408: PPUSH
36409: CALL_OW 272
36413: PUSH
36414: LD_VAR 0 8
36418: PPUSH
36419: LD_INT 4
36421: PPUSH
36422: LD_INT 4
36424: PPUSH
36425: CALL_OW 273
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_VAR 0 7
36438: PPUSH
36439: LD_INT 5
36441: PPUSH
36442: LD_INT 4
36444: PPUSH
36445: CALL_OW 272
36449: PUSH
36450: LD_VAR 0 8
36454: PPUSH
36455: LD_INT 5
36457: PPUSH
36458: LD_INT 4
36460: PPUSH
36461: CALL_OW 273
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: ST_TO_ADDR
// for i = tmp downto 1 do
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: DOUBLE
36484: LD_VAR 0 6
36488: INC
36489: ST_TO_ADDR
36490: LD_INT 1
36492: PUSH
36493: FOR_DOWNTO
36494: IFFALSE 36595
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36496: LD_VAR 0 6
36500: PUSH
36501: LD_VAR 0 4
36505: ARRAY
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: LD_VAR 0 6
36515: PUSH
36516: LD_VAR 0 4
36520: ARRAY
36521: PUSH
36522: LD_INT 2
36524: ARRAY
36525: PPUSH
36526: CALL_OW 488
36530: NOT
36531: PUSH
36532: LD_VAR 0 6
36536: PUSH
36537: LD_VAR 0 4
36541: ARRAY
36542: PUSH
36543: LD_INT 1
36545: ARRAY
36546: PPUSH
36547: LD_VAR 0 6
36551: PUSH
36552: LD_VAR 0 4
36556: ARRAY
36557: PUSH
36558: LD_INT 2
36560: ARRAY
36561: PPUSH
36562: CALL_OW 428
36566: PUSH
36567: LD_INT 0
36569: NONEQUAL
36570: OR
36571: IFFALSE 36593
// tmp := Delete ( tmp , i ) ;
36573: LD_ADDR_VAR 0 6
36577: PUSH
36578: LD_VAR 0 6
36582: PPUSH
36583: LD_VAR 0 4
36587: PPUSH
36588: CALL_OW 3
36592: ST_TO_ADDR
36593: GO 36493
36595: POP
36596: POP
// j := GetClosestHex ( unit , tmp ) ;
36597: LD_ADDR_VAR 0 5
36601: PUSH
36602: LD_VAR 0 1
36606: PPUSH
36607: LD_VAR 0 6
36611: PPUSH
36612: CALL 35888 0 2
36616: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36617: LD_VAR 0 1
36621: PPUSH
36622: LD_VAR 0 5
36626: PUSH
36627: LD_INT 1
36629: ARRAY
36630: PPUSH
36631: LD_VAR 0 5
36635: PUSH
36636: LD_INT 2
36638: ARRAY
36639: PPUSH
36640: CALL_OW 111
// end ;
36644: LD_VAR 0 3
36648: RET
// export function PrepareApemanSoldier ( ) ; begin
36649: LD_INT 0
36651: PPUSH
// uc_nation := 0 ;
36652: LD_ADDR_OWVAR 21
36656: PUSH
36657: LD_INT 0
36659: ST_TO_ADDR
// hc_sex := sex_male ;
36660: LD_ADDR_OWVAR 27
36664: PUSH
36665: LD_INT 1
36667: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36668: LD_ADDR_OWVAR 28
36672: PUSH
36673: LD_INT 15
36675: ST_TO_ADDR
// hc_gallery :=  ;
36676: LD_ADDR_OWVAR 33
36680: PUSH
36681: LD_STRING 
36683: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36684: LD_ADDR_OWVAR 31
36688: PUSH
36689: LD_INT 0
36691: PPUSH
36692: LD_INT 3
36694: PPUSH
36695: CALL_OW 12
36699: PUSH
36700: LD_INT 0
36702: PPUSH
36703: LD_INT 3
36705: PPUSH
36706: CALL_OW 12
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: ST_TO_ADDR
// end ;
36723: LD_VAR 0 1
36727: RET
// export function PrepareApemanEngineer ( ) ; begin
36728: LD_INT 0
36730: PPUSH
// uc_nation := 0 ;
36731: LD_ADDR_OWVAR 21
36735: PUSH
36736: LD_INT 0
36738: ST_TO_ADDR
// hc_sex := sex_male ;
36739: LD_ADDR_OWVAR 27
36743: PUSH
36744: LD_INT 1
36746: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36747: LD_ADDR_OWVAR 28
36751: PUSH
36752: LD_INT 16
36754: ST_TO_ADDR
// hc_gallery :=  ;
36755: LD_ADDR_OWVAR 33
36759: PUSH
36760: LD_STRING 
36762: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36763: LD_ADDR_OWVAR 31
36767: PUSH
36768: LD_INT 0
36770: PPUSH
36771: LD_INT 3
36773: PPUSH
36774: CALL_OW 12
36778: PUSH
36779: LD_INT 0
36781: PPUSH
36782: LD_INT 3
36784: PPUSH
36785: CALL_OW 12
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: ST_TO_ADDR
// end ;
36802: LD_VAR 0 1
36806: RET
// export function PrepareApeman ( agressivity ) ; begin
36807: LD_INT 0
36809: PPUSH
// uc_side := 0 ;
36810: LD_ADDR_OWVAR 20
36814: PUSH
36815: LD_INT 0
36817: ST_TO_ADDR
// uc_nation := 0 ;
36818: LD_ADDR_OWVAR 21
36822: PUSH
36823: LD_INT 0
36825: ST_TO_ADDR
// hc_sex := sex_male ;
36826: LD_ADDR_OWVAR 27
36830: PUSH
36831: LD_INT 1
36833: ST_TO_ADDR
// hc_class := class_apeman ;
36834: LD_ADDR_OWVAR 28
36838: PUSH
36839: LD_INT 12
36841: ST_TO_ADDR
// hc_gallery :=  ;
36842: LD_ADDR_OWVAR 33
36846: PUSH
36847: LD_STRING 
36849: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36850: LD_ADDR_OWVAR 35
36854: PUSH
36855: LD_VAR 0 1
36859: NEG
36860: PPUSH
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 12
36870: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36871: LD_ADDR_OWVAR 31
36875: PUSH
36876: LD_INT 0
36878: PPUSH
36879: LD_INT 3
36881: PPUSH
36882: CALL_OW 12
36886: PUSH
36887: LD_INT 0
36889: PPUSH
36890: LD_INT 3
36892: PPUSH
36893: CALL_OW 12
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// end ;
36910: LD_VAR 0 2
36914: RET
// export function PrepareTiger ( agressivity ) ; begin
36915: LD_INT 0
36917: PPUSH
// uc_side := 0 ;
36918: LD_ADDR_OWVAR 20
36922: PUSH
36923: LD_INT 0
36925: ST_TO_ADDR
// uc_nation := 0 ;
36926: LD_ADDR_OWVAR 21
36930: PUSH
36931: LD_INT 0
36933: ST_TO_ADDR
// hc_class := class_tiger ;
36934: LD_ADDR_OWVAR 28
36938: PUSH
36939: LD_INT 14
36941: ST_TO_ADDR
// hc_gallery :=  ;
36942: LD_ADDR_OWVAR 33
36946: PUSH
36947: LD_STRING 
36949: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36950: LD_ADDR_OWVAR 35
36954: PUSH
36955: LD_VAR 0 1
36959: NEG
36960: PPUSH
36961: LD_VAR 0 1
36965: PPUSH
36966: CALL_OW 12
36970: ST_TO_ADDR
// end ;
36971: LD_VAR 0 2
36975: RET
// export function PrepareEnchidna ( ) ; begin
36976: LD_INT 0
36978: PPUSH
// uc_side := 0 ;
36979: LD_ADDR_OWVAR 20
36983: PUSH
36984: LD_INT 0
36986: ST_TO_ADDR
// uc_nation := 0 ;
36987: LD_ADDR_OWVAR 21
36991: PUSH
36992: LD_INT 0
36994: ST_TO_ADDR
// hc_class := class_baggie ;
36995: LD_ADDR_OWVAR 28
36999: PUSH
37000: LD_INT 13
37002: ST_TO_ADDR
// hc_gallery :=  ;
37003: LD_ADDR_OWVAR 33
37007: PUSH
37008: LD_STRING 
37010: ST_TO_ADDR
// end ;
37011: LD_VAR 0 1
37015: RET
// export function PrepareFrog ( ) ; begin
37016: LD_INT 0
37018: PPUSH
// uc_side := 0 ;
37019: LD_ADDR_OWVAR 20
37023: PUSH
37024: LD_INT 0
37026: ST_TO_ADDR
// uc_nation := 0 ;
37027: LD_ADDR_OWVAR 21
37031: PUSH
37032: LD_INT 0
37034: ST_TO_ADDR
// hc_class := class_frog ;
37035: LD_ADDR_OWVAR 28
37039: PUSH
37040: LD_INT 19
37042: ST_TO_ADDR
// hc_gallery :=  ;
37043: LD_ADDR_OWVAR 33
37047: PUSH
37048: LD_STRING 
37050: ST_TO_ADDR
// end ;
37051: LD_VAR 0 1
37055: RET
// export function PrepareFish ( ) ; begin
37056: LD_INT 0
37058: PPUSH
// uc_side := 0 ;
37059: LD_ADDR_OWVAR 20
37063: PUSH
37064: LD_INT 0
37066: ST_TO_ADDR
// uc_nation := 0 ;
37067: LD_ADDR_OWVAR 21
37071: PUSH
37072: LD_INT 0
37074: ST_TO_ADDR
// hc_class := class_fish ;
37075: LD_ADDR_OWVAR 28
37079: PUSH
37080: LD_INT 20
37082: ST_TO_ADDR
// hc_gallery :=  ;
37083: LD_ADDR_OWVAR 33
37087: PUSH
37088: LD_STRING 
37090: ST_TO_ADDR
// end ;
37091: LD_VAR 0 1
37095: RET
// export function PrepareBird ( ) ; begin
37096: LD_INT 0
37098: PPUSH
// uc_side := 0 ;
37099: LD_ADDR_OWVAR 20
37103: PUSH
37104: LD_INT 0
37106: ST_TO_ADDR
// uc_nation := 0 ;
37107: LD_ADDR_OWVAR 21
37111: PUSH
37112: LD_INT 0
37114: ST_TO_ADDR
// hc_class := class_phororhacos ;
37115: LD_ADDR_OWVAR 28
37119: PUSH
37120: LD_INT 18
37122: ST_TO_ADDR
// hc_gallery :=  ;
37123: LD_ADDR_OWVAR 33
37127: PUSH
37128: LD_STRING 
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 1
37135: RET
// export function PrepareHorse ( ) ; begin
37136: LD_INT 0
37138: PPUSH
// uc_side := 0 ;
37139: LD_ADDR_OWVAR 20
37143: PUSH
37144: LD_INT 0
37146: ST_TO_ADDR
// uc_nation := 0 ;
37147: LD_ADDR_OWVAR 21
37151: PUSH
37152: LD_INT 0
37154: ST_TO_ADDR
// hc_class := class_horse ;
37155: LD_ADDR_OWVAR 28
37159: PUSH
37160: LD_INT 21
37162: ST_TO_ADDR
// hc_gallery :=  ;
37163: LD_ADDR_OWVAR 33
37167: PUSH
37168: LD_STRING 
37170: ST_TO_ADDR
// end ;
37171: LD_VAR 0 1
37175: RET
// export function PrepareMastodont ( ) ; begin
37176: LD_INT 0
37178: PPUSH
// uc_side := 0 ;
37179: LD_ADDR_OWVAR 20
37183: PUSH
37184: LD_INT 0
37186: ST_TO_ADDR
// uc_nation := 0 ;
37187: LD_ADDR_OWVAR 21
37191: PUSH
37192: LD_INT 0
37194: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37195: LD_ADDR_OWVAR 37
37199: PUSH
37200: LD_INT 31
37202: ST_TO_ADDR
// vc_control := control_rider ;
37203: LD_ADDR_OWVAR 38
37207: PUSH
37208: LD_INT 4
37210: ST_TO_ADDR
// end ;
37211: LD_VAR 0 1
37215: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37216: LD_INT 0
37218: PPUSH
37219: PPUSH
37220: PPUSH
// uc_side = 0 ;
37221: LD_ADDR_OWVAR 20
37225: PUSH
37226: LD_INT 0
37228: ST_TO_ADDR
// uc_nation = 0 ;
37229: LD_ADDR_OWVAR 21
37233: PUSH
37234: LD_INT 0
37236: ST_TO_ADDR
// InitHc_All ( ) ;
37237: CALL_OW 584
// InitVc ;
37241: CALL_OW 20
// if mastodonts then
37245: LD_VAR 0 6
37249: IFFALSE 37316
// for i = 1 to mastodonts do
37251: LD_ADDR_VAR 0 11
37255: PUSH
37256: DOUBLE
37257: LD_INT 1
37259: DEC
37260: ST_TO_ADDR
37261: LD_VAR 0 6
37265: PUSH
37266: FOR_TO
37267: IFFALSE 37314
// begin vc_chassis := 31 ;
37269: LD_ADDR_OWVAR 37
37273: PUSH
37274: LD_INT 31
37276: ST_TO_ADDR
// vc_control := control_rider ;
37277: LD_ADDR_OWVAR 38
37281: PUSH
37282: LD_INT 4
37284: ST_TO_ADDR
// animal := CreateVehicle ;
37285: LD_ADDR_VAR 0 12
37289: PUSH
37290: CALL_OW 45
37294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37295: LD_VAR 0 12
37299: PPUSH
37300: LD_VAR 0 8
37304: PPUSH
37305: LD_INT 0
37307: PPUSH
37308: CALL 39444 0 3
// end ;
37312: GO 37266
37314: POP
37315: POP
// if horses then
37316: LD_VAR 0 5
37320: IFFALSE 37387
// for i = 1 to horses do
37322: LD_ADDR_VAR 0 11
37326: PUSH
37327: DOUBLE
37328: LD_INT 1
37330: DEC
37331: ST_TO_ADDR
37332: LD_VAR 0 5
37336: PUSH
37337: FOR_TO
37338: IFFALSE 37385
// begin hc_class := 21 ;
37340: LD_ADDR_OWVAR 28
37344: PUSH
37345: LD_INT 21
37347: ST_TO_ADDR
// hc_gallery :=  ;
37348: LD_ADDR_OWVAR 33
37352: PUSH
37353: LD_STRING 
37355: ST_TO_ADDR
// animal := CreateHuman ;
37356: LD_ADDR_VAR 0 12
37360: PUSH
37361: CALL_OW 44
37365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37366: LD_VAR 0 12
37370: PPUSH
37371: LD_VAR 0 8
37375: PPUSH
37376: LD_INT 0
37378: PPUSH
37379: CALL 39444 0 3
// end ;
37383: GO 37337
37385: POP
37386: POP
// if birds then
37387: LD_VAR 0 1
37391: IFFALSE 37458
// for i = 1 to birds do
37393: LD_ADDR_VAR 0 11
37397: PUSH
37398: DOUBLE
37399: LD_INT 1
37401: DEC
37402: ST_TO_ADDR
37403: LD_VAR 0 1
37407: PUSH
37408: FOR_TO
37409: IFFALSE 37456
// begin hc_class = 18 ;
37411: LD_ADDR_OWVAR 28
37415: PUSH
37416: LD_INT 18
37418: ST_TO_ADDR
// hc_gallery =  ;
37419: LD_ADDR_OWVAR 33
37423: PUSH
37424: LD_STRING 
37426: ST_TO_ADDR
// animal := CreateHuman ;
37427: LD_ADDR_VAR 0 12
37431: PUSH
37432: CALL_OW 44
37436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37437: LD_VAR 0 12
37441: PPUSH
37442: LD_VAR 0 8
37446: PPUSH
37447: LD_INT 0
37449: PPUSH
37450: CALL 39444 0 3
// end ;
37454: GO 37408
37456: POP
37457: POP
// if tigers then
37458: LD_VAR 0 2
37462: IFFALSE 37546
// for i = 1 to tigers do
37464: LD_ADDR_VAR 0 11
37468: PUSH
37469: DOUBLE
37470: LD_INT 1
37472: DEC
37473: ST_TO_ADDR
37474: LD_VAR 0 2
37478: PUSH
37479: FOR_TO
37480: IFFALSE 37544
// begin hc_class = class_tiger ;
37482: LD_ADDR_OWVAR 28
37486: PUSH
37487: LD_INT 14
37489: ST_TO_ADDR
// hc_gallery =  ;
37490: LD_ADDR_OWVAR 33
37494: PUSH
37495: LD_STRING 
37497: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37498: LD_ADDR_OWVAR 35
37502: PUSH
37503: LD_INT 7
37505: NEG
37506: PPUSH
37507: LD_INT 7
37509: PPUSH
37510: CALL_OW 12
37514: ST_TO_ADDR
// animal := CreateHuman ;
37515: LD_ADDR_VAR 0 12
37519: PUSH
37520: CALL_OW 44
37524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37525: LD_VAR 0 12
37529: PPUSH
37530: LD_VAR 0 8
37534: PPUSH
37535: LD_INT 0
37537: PPUSH
37538: CALL 39444 0 3
// end ;
37542: GO 37479
37544: POP
37545: POP
// if apemans then
37546: LD_VAR 0 3
37550: IFFALSE 37673
// for i = 1 to apemans do
37552: LD_ADDR_VAR 0 11
37556: PUSH
37557: DOUBLE
37558: LD_INT 1
37560: DEC
37561: ST_TO_ADDR
37562: LD_VAR 0 3
37566: PUSH
37567: FOR_TO
37568: IFFALSE 37671
// begin hc_class = class_apeman ;
37570: LD_ADDR_OWVAR 28
37574: PUSH
37575: LD_INT 12
37577: ST_TO_ADDR
// hc_gallery =  ;
37578: LD_ADDR_OWVAR 33
37582: PUSH
37583: LD_STRING 
37585: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37586: LD_ADDR_OWVAR 35
37590: PUSH
37591: LD_INT 2
37593: NEG
37594: PPUSH
37595: LD_INT 2
37597: PPUSH
37598: CALL_OW 12
37602: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37603: LD_ADDR_OWVAR 31
37607: PUSH
37608: LD_INT 1
37610: PPUSH
37611: LD_INT 3
37613: PPUSH
37614: CALL_OW 12
37618: PUSH
37619: LD_INT 1
37621: PPUSH
37622: LD_INT 3
37624: PPUSH
37625: CALL_OW 12
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: ST_TO_ADDR
// animal := CreateHuman ;
37642: LD_ADDR_VAR 0 12
37646: PUSH
37647: CALL_OW 44
37651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37652: LD_VAR 0 12
37656: PPUSH
37657: LD_VAR 0 8
37661: PPUSH
37662: LD_INT 0
37664: PPUSH
37665: CALL 39444 0 3
// end ;
37669: GO 37567
37671: POP
37672: POP
// if enchidnas then
37673: LD_VAR 0 4
37677: IFFALSE 37744
// for i = 1 to enchidnas do
37679: LD_ADDR_VAR 0 11
37683: PUSH
37684: DOUBLE
37685: LD_INT 1
37687: DEC
37688: ST_TO_ADDR
37689: LD_VAR 0 4
37693: PUSH
37694: FOR_TO
37695: IFFALSE 37742
// begin hc_class = 13 ;
37697: LD_ADDR_OWVAR 28
37701: PUSH
37702: LD_INT 13
37704: ST_TO_ADDR
// hc_gallery =  ;
37705: LD_ADDR_OWVAR 33
37709: PUSH
37710: LD_STRING 
37712: ST_TO_ADDR
// animal := CreateHuman ;
37713: LD_ADDR_VAR 0 12
37717: PUSH
37718: CALL_OW 44
37722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37723: LD_VAR 0 12
37727: PPUSH
37728: LD_VAR 0 8
37732: PPUSH
37733: LD_INT 0
37735: PPUSH
37736: CALL 39444 0 3
// end ;
37740: GO 37694
37742: POP
37743: POP
// if fishes then
37744: LD_VAR 0 7
37748: IFFALSE 37815
// for i = 1 to fishes do
37750: LD_ADDR_VAR 0 11
37754: PUSH
37755: DOUBLE
37756: LD_INT 1
37758: DEC
37759: ST_TO_ADDR
37760: LD_VAR 0 7
37764: PUSH
37765: FOR_TO
37766: IFFALSE 37813
// begin hc_class = 20 ;
37768: LD_ADDR_OWVAR 28
37772: PUSH
37773: LD_INT 20
37775: ST_TO_ADDR
// hc_gallery =  ;
37776: LD_ADDR_OWVAR 33
37780: PUSH
37781: LD_STRING 
37783: ST_TO_ADDR
// animal := CreateHuman ;
37784: LD_ADDR_VAR 0 12
37788: PUSH
37789: CALL_OW 44
37793: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37794: LD_VAR 0 12
37798: PPUSH
37799: LD_VAR 0 9
37803: PPUSH
37804: LD_INT 0
37806: PPUSH
37807: CALL 39444 0 3
// end ;
37811: GO 37765
37813: POP
37814: POP
// end ;
37815: LD_VAR 0 10
37819: RET
// export function WantHeal ( sci , unit ) ; begin
37820: LD_INT 0
37822: PPUSH
// if GetTaskList ( sci ) > 0 then
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 437
37832: PUSH
37833: LD_INT 0
37835: GREATER
37836: IFFALSE 37906
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 437
37847: PUSH
37848: LD_INT 1
37850: ARRAY
37851: PUSH
37852: LD_INT 1
37854: ARRAY
37855: PUSH
37856: LD_STRING l
37858: EQUAL
37859: PUSH
37860: LD_VAR 0 1
37864: PPUSH
37865: CALL_OW 437
37869: PUSH
37870: LD_INT 1
37872: ARRAY
37873: PUSH
37874: LD_INT 4
37876: ARRAY
37877: PUSH
37878: LD_VAR 0 2
37882: EQUAL
37883: AND
37884: IFFALSE 37896
// result := true else
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_INT 1
37893: ST_TO_ADDR
37894: GO 37904
// result := false ;
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: LD_INT 0
37903: ST_TO_ADDR
// end else
37904: GO 37914
// result := false ;
37906: LD_ADDR_VAR 0 3
37910: PUSH
37911: LD_INT 0
37913: ST_TO_ADDR
// end ;
37914: LD_VAR 0 3
37918: RET
// export function HealTarget ( sci ) ; begin
37919: LD_INT 0
37921: PPUSH
// if not sci then
37922: LD_VAR 0 1
37926: NOT
37927: IFFALSE 37931
// exit ;
37929: GO 37996
// result := 0 ;
37931: LD_ADDR_VAR 0 2
37935: PUSH
37936: LD_INT 0
37938: ST_TO_ADDR
// if GetTaskList ( sci ) then
37939: LD_VAR 0 1
37943: PPUSH
37944: CALL_OW 437
37948: IFFALSE 37996
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37950: LD_VAR 0 1
37954: PPUSH
37955: CALL_OW 437
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PUSH
37964: LD_INT 1
37966: ARRAY
37967: PUSH
37968: LD_STRING l
37970: EQUAL
37971: IFFALSE 37996
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37973: LD_ADDR_VAR 0 2
37977: PUSH
37978: LD_VAR 0 1
37982: PPUSH
37983: CALL_OW 437
37987: PUSH
37988: LD_INT 1
37990: ARRAY
37991: PUSH
37992: LD_INT 4
37994: ARRAY
37995: ST_TO_ADDR
// end ;
37996: LD_VAR 0 2
38000: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38001: LD_INT 0
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
// if not base_units then
38007: LD_VAR 0 1
38011: NOT
38012: IFFALSE 38016
// exit ;
38014: GO 38103
// result := false ;
38016: LD_ADDR_VAR 0 2
38020: PUSH
38021: LD_INT 0
38023: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38024: LD_ADDR_VAR 0 5
38028: PUSH
38029: LD_VAR 0 1
38033: PPUSH
38034: LD_INT 21
38036: PUSH
38037: LD_INT 3
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PPUSH
38044: CALL_OW 72
38048: ST_TO_ADDR
// if not tmp then
38049: LD_VAR 0 5
38053: NOT
38054: IFFALSE 38058
// exit ;
38056: GO 38103
// for i in tmp do
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_VAR 0 5
38067: PUSH
38068: FOR_IN
38069: IFFALSE 38101
// begin result := EnemyInRange ( i , 22 ) ;
38071: LD_ADDR_VAR 0 2
38075: PUSH
38076: LD_VAR 0 3
38080: PPUSH
38081: LD_INT 22
38083: PPUSH
38084: CALL 35690 0 2
38088: ST_TO_ADDR
// if result then
38089: LD_VAR 0 2
38093: IFFALSE 38099
// exit ;
38095: POP
38096: POP
38097: GO 38103
// end ;
38099: GO 38068
38101: POP
38102: POP
// end ;
38103: LD_VAR 0 2
38107: RET
// export function FilterByTag ( units , tag ) ; begin
38108: LD_INT 0
38110: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38111: LD_ADDR_VAR 0 3
38115: PUSH
38116: LD_VAR 0 1
38120: PPUSH
38121: LD_INT 120
38123: PUSH
38124: LD_VAR 0 2
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PPUSH
38133: CALL_OW 72
38137: ST_TO_ADDR
// end ;
38138: LD_VAR 0 3
38142: RET
// export function IsDriver ( un ) ; begin
38143: LD_INT 0
38145: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38146: LD_ADDR_VAR 0 2
38150: PUSH
38151: LD_VAR 0 1
38155: PUSH
38156: LD_INT 55
38158: PUSH
38159: EMPTY
38160: LIST
38161: PPUSH
38162: CALL_OW 69
38166: IN
38167: ST_TO_ADDR
// end ;
38168: LD_VAR 0 2
38172: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38173: LD_INT 0
38175: PPUSH
38176: PPUSH
// list := [ ] ;
38177: LD_ADDR_VAR 0 5
38181: PUSH
38182: EMPTY
38183: ST_TO_ADDR
// case d of 0 :
38184: LD_VAR 0 3
38188: PUSH
38189: LD_INT 0
38191: DOUBLE
38192: EQUAL
38193: IFTRUE 38197
38195: GO 38330
38197: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38198: LD_ADDR_VAR 0 5
38202: PUSH
38203: LD_VAR 0 1
38207: PUSH
38208: LD_INT 4
38210: MINUS
38211: PUSH
38212: LD_VAR 0 2
38216: PUSH
38217: LD_INT 4
38219: MINUS
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: PUSH
38229: LD_VAR 0 1
38233: PUSH
38234: LD_INT 3
38236: MINUS
38237: PUSH
38238: LD_VAR 0 2
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: PUSH
38251: LD_VAR 0 1
38255: PUSH
38256: LD_INT 4
38258: PLUS
38259: PUSH
38260: LD_VAR 0 2
38264: PUSH
38265: LD_INT 4
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: PUSH
38273: LD_VAR 0 1
38277: PUSH
38278: LD_INT 3
38280: PLUS
38281: PUSH
38282: LD_VAR 0 2
38286: PUSH
38287: LD_INT 3
38289: PLUS
38290: PUSH
38291: LD_INT 5
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: PUSH
38299: LD_VAR 0 1
38303: PUSH
38304: LD_VAR 0 2
38308: PUSH
38309: LD_INT 4
38311: PLUS
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: ST_TO_ADDR
// end ; 1 :
38328: GO 39028
38330: LD_INT 1
38332: DOUBLE
38333: EQUAL
38334: IFTRUE 38338
38336: GO 38471
38338: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38339: LD_ADDR_VAR 0 5
38343: PUSH
38344: LD_VAR 0 1
38348: PUSH
38349: LD_VAR 0 2
38353: PUSH
38354: LD_INT 4
38356: MINUS
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: PUSH
38366: LD_VAR 0 1
38370: PUSH
38371: LD_INT 3
38373: MINUS
38374: PUSH
38375: LD_VAR 0 2
38379: PUSH
38380: LD_INT 3
38382: MINUS
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: PUSH
38392: LD_VAR 0 1
38396: PUSH
38397: LD_INT 4
38399: MINUS
38400: PUSH
38401: LD_VAR 0 2
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: PUSH
38414: LD_VAR 0 1
38418: PUSH
38419: LD_VAR 0 2
38423: PUSH
38424: LD_INT 3
38426: PLUS
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: PUSH
38436: LD_VAR 0 1
38440: PUSH
38441: LD_INT 4
38443: PLUS
38444: PUSH
38445: LD_VAR 0 2
38449: PUSH
38450: LD_INT 4
38452: PLUS
38453: PUSH
38454: LD_INT 5
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: ST_TO_ADDR
// end ; 2 :
38469: GO 39028
38471: LD_INT 2
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38608
38479: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38480: LD_ADDR_VAR 0 5
38484: PUSH
38485: LD_VAR 0 1
38489: PUSH
38490: LD_VAR 0 2
38494: PUSH
38495: LD_INT 3
38497: MINUS
38498: PUSH
38499: LD_INT 3
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: PUSH
38507: LD_VAR 0 1
38511: PUSH
38512: LD_INT 4
38514: PLUS
38515: PUSH
38516: LD_VAR 0 2
38520: PUSH
38521: LD_INT 4
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: PUSH
38529: LD_VAR 0 1
38533: PUSH
38534: LD_VAR 0 2
38538: PUSH
38539: LD_INT 4
38541: PLUS
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: PUSH
38551: LD_VAR 0 1
38555: PUSH
38556: LD_INT 3
38558: MINUS
38559: PUSH
38560: LD_VAR 0 2
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: PUSH
38573: LD_VAR 0 1
38577: PUSH
38578: LD_INT 4
38580: MINUS
38581: PUSH
38582: LD_VAR 0 2
38586: PUSH
38587: LD_INT 4
38589: MINUS
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// end ; 3 :
38606: GO 39028
38608: LD_INT 3
38610: DOUBLE
38611: EQUAL
38612: IFTRUE 38616
38614: GO 38749
38616: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38617: LD_ADDR_VAR 0 5
38621: PUSH
38622: LD_VAR 0 1
38626: PUSH
38627: LD_INT 3
38629: PLUS
38630: PUSH
38631: LD_VAR 0 2
38635: PUSH
38636: LD_INT 4
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: PUSH
38644: LD_VAR 0 1
38648: PUSH
38649: LD_INT 4
38651: PLUS
38652: PUSH
38653: LD_VAR 0 2
38657: PUSH
38658: LD_INT 4
38660: PLUS
38661: PUSH
38662: LD_INT 5
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: PUSH
38670: LD_VAR 0 1
38674: PUSH
38675: LD_INT 4
38677: MINUS
38678: PUSH
38679: LD_VAR 0 2
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: PUSH
38692: LD_VAR 0 1
38696: PUSH
38697: LD_VAR 0 2
38701: PUSH
38702: LD_INT 4
38704: MINUS
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: PUSH
38714: LD_VAR 0 1
38718: PUSH
38719: LD_INT 3
38721: MINUS
38722: PUSH
38723: LD_VAR 0 2
38727: PUSH
38728: LD_INT 3
38730: MINUS
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: ST_TO_ADDR
// end ; 4 :
38747: GO 39028
38749: LD_INT 4
38751: DOUBLE
38752: EQUAL
38753: IFTRUE 38757
38755: GO 38890
38757: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38758: LD_ADDR_VAR 0 5
38762: PUSH
38763: LD_VAR 0 1
38767: PUSH
38768: LD_VAR 0 2
38772: PUSH
38773: LD_INT 4
38775: PLUS
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: PUSH
38785: LD_VAR 0 1
38789: PUSH
38790: LD_INT 3
38792: PLUS
38793: PUSH
38794: LD_VAR 0 2
38798: PUSH
38799: LD_INT 3
38801: PLUS
38802: PUSH
38803: LD_INT 5
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: PUSH
38811: LD_VAR 0 1
38815: PUSH
38816: LD_INT 4
38818: PLUS
38819: PUSH
38820: LD_VAR 0 2
38824: PUSH
38825: LD_INT 4
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: PUSH
38833: LD_VAR 0 1
38837: PUSH
38838: LD_VAR 0 2
38842: PUSH
38843: LD_INT 3
38845: MINUS
38846: PUSH
38847: LD_INT 3
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: PUSH
38855: LD_VAR 0 1
38859: PUSH
38860: LD_INT 4
38862: MINUS
38863: PUSH
38864: LD_VAR 0 2
38868: PUSH
38869: LD_INT 4
38871: MINUS
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// end ; 5 :
38888: GO 39028
38890: LD_INT 5
38892: DOUBLE
38893: EQUAL
38894: IFTRUE 38898
38896: GO 39027
38898: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38899: LD_ADDR_VAR 0 5
38903: PUSH
38904: LD_VAR 0 1
38908: PUSH
38909: LD_INT 4
38911: MINUS
38912: PUSH
38913: LD_VAR 0 2
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: LD_VAR 0 1
38930: PUSH
38931: LD_VAR 0 2
38935: PUSH
38936: LD_INT 4
38938: MINUS
38939: PUSH
38940: LD_INT 3
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: PUSH
38948: LD_VAR 0 1
38952: PUSH
38953: LD_INT 4
38955: PLUS
38956: PUSH
38957: LD_VAR 0 2
38961: PUSH
38962: LD_INT 4
38964: PLUS
38965: PUSH
38966: LD_INT 5
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: PUSH
38974: LD_VAR 0 1
38978: PUSH
38979: LD_INT 3
38981: PLUS
38982: PUSH
38983: LD_VAR 0 2
38987: PUSH
38988: LD_INT 4
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: PUSH
38996: LD_VAR 0 1
39000: PUSH
39001: LD_VAR 0 2
39005: PUSH
39006: LD_INT 3
39008: PLUS
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: ST_TO_ADDR
// end ; end ;
39025: GO 39028
39027: POP
// result := list ;
39028: LD_ADDR_VAR 0 4
39032: PUSH
39033: LD_VAR 0 5
39037: ST_TO_ADDR
// end ;
39038: LD_VAR 0 4
39042: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39043: LD_INT 0
39045: PPUSH
39046: PPUSH
39047: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39048: LD_VAR 0 1
39052: NOT
39053: PUSH
39054: LD_VAR 0 2
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: LD_INT 4
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: IN
39077: NOT
39078: OR
39079: IFFALSE 39083
// exit ;
39081: GO 39166
// tmp := [ ] ;
39083: LD_ADDR_VAR 0 5
39087: PUSH
39088: EMPTY
39089: ST_TO_ADDR
// for i in units do
39090: LD_ADDR_VAR 0 4
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: FOR_IN
39101: IFFALSE 39135
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: LD_VAR 0 5
39112: PPUSH
39113: LD_VAR 0 4
39117: PPUSH
39118: LD_VAR 0 2
39122: PPUSH
39123: CALL_OW 259
39127: PPUSH
39128: CALL 40527 0 2
39132: ST_TO_ADDR
39133: GO 39100
39135: POP
39136: POP
// if not tmp then
39137: LD_VAR 0 5
39141: NOT
39142: IFFALSE 39146
// exit ;
39144: GO 39166
// result := SortListByListDesc ( units , tmp ) ;
39146: LD_ADDR_VAR 0 3
39150: PUSH
39151: LD_VAR 0 1
39155: PPUSH
39156: LD_VAR 0 5
39160: PPUSH
39161: CALL_OW 77
39165: ST_TO_ADDR
// end ;
39166: LD_VAR 0 3
39170: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39171: LD_INT 0
39173: PPUSH
39174: PPUSH
39175: PPUSH
// result := false ;
39176: LD_ADDR_VAR 0 3
39180: PUSH
39181: LD_INT 0
39183: ST_TO_ADDR
// if not building then
39184: LD_VAR 0 2
39188: NOT
39189: IFFALSE 39193
// exit ;
39191: GO 39331
// x := GetX ( building ) ;
39193: LD_ADDR_VAR 0 4
39197: PUSH
39198: LD_VAR 0 2
39202: PPUSH
39203: CALL_OW 250
39207: ST_TO_ADDR
// y := GetY ( building ) ;
39208: LD_ADDR_VAR 0 5
39212: PUSH
39213: LD_VAR 0 2
39217: PPUSH
39218: CALL_OW 251
39222: ST_TO_ADDR
// if not x or not y then
39223: LD_VAR 0 4
39227: NOT
39228: PUSH
39229: LD_VAR 0 5
39233: NOT
39234: OR
39235: IFFALSE 39239
// exit ;
39237: GO 39331
// if GetTaskList ( unit ) then
39239: LD_VAR 0 1
39243: PPUSH
39244: CALL_OW 437
39248: IFFALSE 39331
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39250: LD_STRING e
39252: PUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: CALL_OW 437
39262: PUSH
39263: LD_INT 1
39265: ARRAY
39266: PUSH
39267: LD_INT 1
39269: ARRAY
39270: EQUAL
39271: PUSH
39272: LD_VAR 0 4
39276: PUSH
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL_OW 437
39286: PUSH
39287: LD_INT 1
39289: ARRAY
39290: PUSH
39291: LD_INT 2
39293: ARRAY
39294: EQUAL
39295: AND
39296: PUSH
39297: LD_VAR 0 5
39301: PUSH
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 437
39311: PUSH
39312: LD_INT 1
39314: ARRAY
39315: PUSH
39316: LD_INT 3
39318: ARRAY
39319: EQUAL
39320: AND
39321: IFFALSE 39331
// result := true end ;
39323: LD_ADDR_VAR 0 3
39327: PUSH
39328: LD_INT 1
39330: ST_TO_ADDR
// end ;
39331: LD_VAR 0 3
39335: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39336: LD_INT 0
39338: PPUSH
// result := false ;
39339: LD_ADDR_VAR 0 4
39343: PUSH
39344: LD_INT 0
39346: ST_TO_ADDR
// if GetTaskList ( unit ) then
39347: LD_VAR 0 1
39351: PPUSH
39352: CALL_OW 437
39356: IFFALSE 39439
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39358: LD_STRING M
39360: PUSH
39361: LD_VAR 0 1
39365: PPUSH
39366: CALL_OW 437
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: EQUAL
39379: PUSH
39380: LD_VAR 0 2
39384: PUSH
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 437
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: PUSH
39399: LD_INT 2
39401: ARRAY
39402: EQUAL
39403: AND
39404: PUSH
39405: LD_VAR 0 3
39409: PUSH
39410: LD_VAR 0 1
39414: PPUSH
39415: CALL_OW 437
39419: PUSH
39420: LD_INT 1
39422: ARRAY
39423: PUSH
39424: LD_INT 3
39426: ARRAY
39427: EQUAL
39428: AND
39429: IFFALSE 39439
// result := true ;
39431: LD_ADDR_VAR 0 4
39435: PUSH
39436: LD_INT 1
39438: ST_TO_ADDR
// end ; end ;
39439: LD_VAR 0 4
39443: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39444: LD_INT 0
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
// if not unit or not area then
39450: LD_VAR 0 1
39454: NOT
39455: PUSH
39456: LD_VAR 0 2
39460: NOT
39461: OR
39462: IFFALSE 39466
// exit ;
39464: GO 39630
// tmp := AreaToList ( area , i ) ;
39466: LD_ADDR_VAR 0 6
39470: PUSH
39471: LD_VAR 0 2
39475: PPUSH
39476: LD_VAR 0 5
39480: PPUSH
39481: CALL_OW 517
39485: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39486: LD_ADDR_VAR 0 5
39490: PUSH
39491: DOUBLE
39492: LD_INT 1
39494: DEC
39495: ST_TO_ADDR
39496: LD_VAR 0 6
39500: PUSH
39501: LD_INT 1
39503: ARRAY
39504: PUSH
39505: FOR_TO
39506: IFFALSE 39628
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39508: LD_ADDR_VAR 0 7
39512: PUSH
39513: LD_VAR 0 6
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: PUSH
39522: LD_VAR 0 5
39526: ARRAY
39527: PUSH
39528: LD_VAR 0 6
39532: PUSH
39533: LD_INT 2
39535: ARRAY
39536: PUSH
39537: LD_VAR 0 5
39541: ARRAY
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39547: LD_VAR 0 7
39551: PUSH
39552: LD_INT 1
39554: ARRAY
39555: PPUSH
39556: LD_VAR 0 7
39560: PUSH
39561: LD_INT 2
39563: ARRAY
39564: PPUSH
39565: CALL_OW 428
39569: PUSH
39570: LD_INT 0
39572: EQUAL
39573: IFFALSE 39626
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39575: LD_VAR 0 1
39579: PPUSH
39580: LD_VAR 0 7
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: PPUSH
39589: LD_VAR 0 7
39593: PUSH
39594: LD_INT 2
39596: ARRAY
39597: PPUSH
39598: LD_VAR 0 3
39602: PPUSH
39603: CALL_OW 48
// result := IsPlaced ( unit ) ;
39607: LD_ADDR_VAR 0 4
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 305
39621: ST_TO_ADDR
// exit ;
39622: POP
39623: POP
39624: GO 39630
// end ; end ;
39626: GO 39505
39628: POP
39629: POP
// end ;
39630: LD_VAR 0 4
39634: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39635: LD_INT 0
39637: PPUSH
39638: PPUSH
39639: PPUSH
// if not side or side > 8 then
39640: LD_VAR 0 1
39644: NOT
39645: PUSH
39646: LD_VAR 0 1
39650: PUSH
39651: LD_INT 8
39653: GREATER
39654: OR
39655: IFFALSE 39659
// exit ;
39657: GO 39846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39659: LD_ADDR_VAR 0 4
39663: PUSH
39664: LD_INT 22
39666: PUSH
39667: LD_VAR 0 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 21
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PPUSH
39690: CALL_OW 69
39694: ST_TO_ADDR
// if not tmp then
39695: LD_VAR 0 4
39699: NOT
39700: IFFALSE 39704
// exit ;
39702: GO 39846
// enable_addtolog := true ;
39704: LD_ADDR_OWVAR 81
39708: PUSH
39709: LD_INT 1
39711: ST_TO_ADDR
// AddToLog ( [ ) ;
39712: LD_STRING [
39714: PPUSH
39715: CALL_OW 561
// for i in tmp do
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_VAR 0 4
39728: PUSH
39729: FOR_IN
39730: IFFALSE 39837
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39732: LD_STRING [
39734: PUSH
39735: LD_VAR 0 3
39739: PPUSH
39740: CALL_OW 266
39744: STR
39745: PUSH
39746: LD_STRING , 
39748: STR
39749: PUSH
39750: LD_VAR 0 3
39754: PPUSH
39755: CALL_OW 250
39759: STR
39760: PUSH
39761: LD_STRING , 
39763: STR
39764: PUSH
39765: LD_VAR 0 3
39769: PPUSH
39770: CALL_OW 251
39774: STR
39775: PUSH
39776: LD_STRING , 
39778: STR
39779: PUSH
39780: LD_VAR 0 3
39784: PPUSH
39785: CALL_OW 254
39789: STR
39790: PUSH
39791: LD_STRING , 
39793: STR
39794: PUSH
39795: LD_VAR 0 3
39799: PPUSH
39800: LD_INT 1
39802: PPUSH
39803: CALL_OW 268
39807: STR
39808: PUSH
39809: LD_STRING , 
39811: STR
39812: PUSH
39813: LD_VAR 0 3
39817: PPUSH
39818: LD_INT 2
39820: PPUSH
39821: CALL_OW 268
39825: STR
39826: PUSH
39827: LD_STRING ],
39829: STR
39830: PPUSH
39831: CALL_OW 561
// end ;
39835: GO 39729
39837: POP
39838: POP
// AddToLog ( ]; ) ;
39839: LD_STRING ];
39841: PPUSH
39842: CALL_OW 561
// end ;
39846: LD_VAR 0 2
39850: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39851: LD_INT 0
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
// if not area or not rate or not max then
39858: LD_VAR 0 1
39862: NOT
39863: PUSH
39864: LD_VAR 0 2
39868: NOT
39869: OR
39870: PUSH
39871: LD_VAR 0 4
39875: NOT
39876: OR
39877: IFFALSE 39881
// exit ;
39879: GO 40070
// while 1 do
39881: LD_INT 1
39883: IFFALSE 40070
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39885: LD_ADDR_VAR 0 9
39889: PUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: LD_INT 1
39897: PPUSH
39898: CALL_OW 287
39902: PUSH
39903: LD_INT 10
39905: MUL
39906: ST_TO_ADDR
// r := rate / 10 ;
39907: LD_ADDR_VAR 0 7
39911: PUSH
39912: LD_VAR 0 2
39916: PUSH
39917: LD_INT 10
39919: DIVREAL
39920: ST_TO_ADDR
// time := 1 1$00 ;
39921: LD_ADDR_VAR 0 8
39925: PUSH
39926: LD_INT 2100
39928: ST_TO_ADDR
// if amount < min then
39929: LD_VAR 0 9
39933: PUSH
39934: LD_VAR 0 3
39938: LESS
39939: IFFALSE 39957
// r := r * 2 else
39941: LD_ADDR_VAR 0 7
39945: PUSH
39946: LD_VAR 0 7
39950: PUSH
39951: LD_INT 2
39953: MUL
39954: ST_TO_ADDR
39955: GO 39983
// if amount > max then
39957: LD_VAR 0 9
39961: PUSH
39962: LD_VAR 0 4
39966: GREATER
39967: IFFALSE 39983
// r := r / 2 ;
39969: LD_ADDR_VAR 0 7
39973: PUSH
39974: LD_VAR 0 7
39978: PUSH
39979: LD_INT 2
39981: DIVREAL
39982: ST_TO_ADDR
// time := time / r ;
39983: LD_ADDR_VAR 0 8
39987: PUSH
39988: LD_VAR 0 8
39992: PUSH
39993: LD_VAR 0 7
39997: DIVREAL
39998: ST_TO_ADDR
// if time < 0 then
39999: LD_VAR 0 8
40003: PUSH
40004: LD_INT 0
40006: LESS
40007: IFFALSE 40024
// time := time * - 1 ;
40009: LD_ADDR_VAR 0 8
40013: PUSH
40014: LD_VAR 0 8
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: MUL
40023: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40024: LD_VAR 0 8
40028: PUSH
40029: LD_INT 35
40031: PPUSH
40032: LD_INT 875
40034: PPUSH
40035: CALL_OW 12
40039: PLUS
40040: PPUSH
40041: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40045: LD_INT 1
40047: PPUSH
40048: LD_INT 5
40050: PPUSH
40051: CALL_OW 12
40055: PPUSH
40056: LD_VAR 0 1
40060: PPUSH
40061: LD_INT 1
40063: PPUSH
40064: CALL_OW 55
// end ;
40068: GO 39881
// end ;
40070: LD_VAR 0 5
40074: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40075: LD_INT 0
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
// if not turrets or not factories then
40085: LD_VAR 0 1
40089: NOT
40090: PUSH
40091: LD_VAR 0 2
40095: NOT
40096: OR
40097: IFFALSE 40101
// exit ;
40099: GO 40408
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40101: LD_ADDR_VAR 0 10
40105: PUSH
40106: LD_INT 5
40108: PUSH
40109: LD_INT 6
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 4
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: PUSH
40129: LD_INT 5
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 24
40143: PUSH
40144: LD_INT 25
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 23
40153: PUSH
40154: LD_INT 27
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 42
40167: PUSH
40168: LD_INT 43
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 44
40177: PUSH
40178: LD_INT 46
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 45
40187: PUSH
40188: LD_INT 47
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// result := [ ] ;
40205: LD_ADDR_VAR 0 3
40209: PUSH
40210: EMPTY
40211: ST_TO_ADDR
// for i in turrets do
40212: LD_ADDR_VAR 0 4
40216: PUSH
40217: LD_VAR 0 1
40221: PUSH
40222: FOR_IN
40223: IFFALSE 40406
// begin nat := GetNation ( i ) ;
40225: LD_ADDR_VAR 0 7
40229: PUSH
40230: LD_VAR 0 4
40234: PPUSH
40235: CALL_OW 248
40239: ST_TO_ADDR
// weapon := 0 ;
40240: LD_ADDR_VAR 0 8
40244: PUSH
40245: LD_INT 0
40247: ST_TO_ADDR
// if not nat then
40248: LD_VAR 0 7
40252: NOT
40253: IFFALSE 40257
// continue ;
40255: GO 40222
// for j in list [ nat ] do
40257: LD_ADDR_VAR 0 5
40261: PUSH
40262: LD_VAR 0 10
40266: PUSH
40267: LD_VAR 0 7
40271: ARRAY
40272: PUSH
40273: FOR_IN
40274: IFFALSE 40315
// if GetBWeapon ( i ) = j [ 1 ] then
40276: LD_VAR 0 4
40280: PPUSH
40281: CALL_OW 269
40285: PUSH
40286: LD_VAR 0 5
40290: PUSH
40291: LD_INT 1
40293: ARRAY
40294: EQUAL
40295: IFFALSE 40313
// begin weapon := j [ 2 ] ;
40297: LD_ADDR_VAR 0 8
40301: PUSH
40302: LD_VAR 0 5
40306: PUSH
40307: LD_INT 2
40309: ARRAY
40310: ST_TO_ADDR
// break ;
40311: GO 40315
// end ;
40313: GO 40273
40315: POP
40316: POP
// if not weapon then
40317: LD_VAR 0 8
40321: NOT
40322: IFFALSE 40326
// continue ;
40324: GO 40222
// for k in factories do
40326: LD_ADDR_VAR 0 6
40330: PUSH
40331: LD_VAR 0 2
40335: PUSH
40336: FOR_IN
40337: IFFALSE 40402
// begin weapons := AvailableWeaponList ( k ) ;
40339: LD_ADDR_VAR 0 9
40343: PUSH
40344: LD_VAR 0 6
40348: PPUSH
40349: CALL_OW 478
40353: ST_TO_ADDR
// if not weapons then
40354: LD_VAR 0 9
40358: NOT
40359: IFFALSE 40363
// continue ;
40361: GO 40336
// if weapon in weapons then
40363: LD_VAR 0 8
40367: PUSH
40368: LD_VAR 0 9
40372: IN
40373: IFFALSE 40400
// begin result := [ i , weapon ] ;
40375: LD_ADDR_VAR 0 3
40379: PUSH
40380: LD_VAR 0 4
40384: PUSH
40385: LD_VAR 0 8
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: ST_TO_ADDR
// exit ;
40394: POP
40395: POP
40396: POP
40397: POP
40398: GO 40408
// end ; end ;
40400: GO 40336
40402: POP
40403: POP
// end ;
40404: GO 40222
40406: POP
40407: POP
// end ;
40408: LD_VAR 0 3
40412: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40413: LD_INT 0
40415: PPUSH
// if not side or side > 8 then
40416: LD_VAR 0 3
40420: NOT
40421: PUSH
40422: LD_VAR 0 3
40426: PUSH
40427: LD_INT 8
40429: GREATER
40430: OR
40431: IFFALSE 40435
// exit ;
40433: GO 40494
// if not range then
40435: LD_VAR 0 4
40439: NOT
40440: IFFALSE 40451
// range := - 12 ;
40442: LD_ADDR_VAR 0 4
40446: PUSH
40447: LD_INT 12
40449: NEG
40450: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40451: LD_VAR 0 1
40455: PPUSH
40456: LD_VAR 0 2
40460: PPUSH
40461: LD_VAR 0 3
40465: PPUSH
40466: LD_VAR 0 4
40470: PPUSH
40471: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40475: LD_VAR 0 1
40479: PPUSH
40480: LD_VAR 0 2
40484: PPUSH
40485: LD_VAR 0 3
40489: PPUSH
40490: CALL_OW 331
// end ;
40494: LD_VAR 0 5
40498: RET
// export function Video ( mode ) ; begin
40499: LD_INT 0
40501: PPUSH
// ingame_video = mode ;
40502: LD_ADDR_OWVAR 52
40506: PUSH
40507: LD_VAR 0 1
40511: ST_TO_ADDR
// interface_hidden = mode ;
40512: LD_ADDR_OWVAR 54
40516: PUSH
40517: LD_VAR 0 1
40521: ST_TO_ADDR
// end ;
40522: LD_VAR 0 2
40526: RET
// export function Join ( array , element ) ; begin
40527: LD_INT 0
40529: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_VAR 0 1
40539: PPUSH
40540: LD_VAR 0 1
40544: PUSH
40545: LD_INT 1
40547: PLUS
40548: PPUSH
40549: LD_VAR 0 2
40553: PPUSH
40554: CALL_OW 1
40558: ST_TO_ADDR
// end ;
40559: LD_VAR 0 3
40563: RET
// export function JoinUnion ( array , element ) ; begin
40564: LD_INT 0
40566: PPUSH
// result := array union element ;
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_VAR 0 1
40576: PUSH
40577: LD_VAR 0 2
40581: UNION
40582: ST_TO_ADDR
// end ;
40583: LD_VAR 0 3
40587: RET
// export function GetBehemoths ( side ) ; begin
40588: LD_INT 0
40590: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40591: LD_ADDR_VAR 0 2
40595: PUSH
40596: LD_INT 22
40598: PUSH
40599: LD_VAR 0 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 31
40610: PUSH
40611: LD_INT 25
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PPUSH
40622: CALL_OW 69
40626: ST_TO_ADDR
// end ;
40627: LD_VAR 0 2
40631: RET
// export function Shuffle ( array ) ; var i , index ; begin
40632: LD_INT 0
40634: PPUSH
40635: PPUSH
40636: PPUSH
// result := [ ] ;
40637: LD_ADDR_VAR 0 2
40641: PUSH
40642: EMPTY
40643: ST_TO_ADDR
// if not array then
40644: LD_VAR 0 1
40648: NOT
40649: IFFALSE 40653
// exit ;
40651: GO 40752
// Randomize ;
40653: CALL_OW 10
// for i = array downto 1 do
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: DOUBLE
40663: LD_VAR 0 1
40667: INC
40668: ST_TO_ADDR
40669: LD_INT 1
40671: PUSH
40672: FOR_DOWNTO
40673: IFFALSE 40750
// begin index := rand ( 1 , array ) ;
40675: LD_ADDR_VAR 0 4
40679: PUSH
40680: LD_INT 1
40682: PPUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: CALL_OW 12
40692: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40693: LD_ADDR_VAR 0 2
40697: PUSH
40698: LD_VAR 0 2
40702: PPUSH
40703: LD_VAR 0 2
40707: PUSH
40708: LD_INT 1
40710: PLUS
40711: PPUSH
40712: LD_VAR 0 1
40716: PUSH
40717: LD_VAR 0 4
40721: ARRAY
40722: PPUSH
40723: CALL_OW 2
40727: ST_TO_ADDR
// array := Delete ( array , index ) ;
40728: LD_ADDR_VAR 0 1
40732: PUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: LD_VAR 0 4
40742: PPUSH
40743: CALL_OW 3
40747: ST_TO_ADDR
// end ;
40748: GO 40672
40750: POP
40751: POP
// end ;
40752: LD_VAR 0 2
40756: RET
// export function GetBaseMaterials ( base ) ; begin
40757: LD_INT 0
40759: PPUSH
// result := [ 0 , 0 , 0 ] ;
40760: LD_ADDR_VAR 0 2
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// if not base then
40779: LD_VAR 0 1
40783: NOT
40784: IFFALSE 40788
// exit ;
40786: GO 40837
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40788: LD_ADDR_VAR 0 2
40792: PUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: LD_INT 1
40800: PPUSH
40801: CALL_OW 275
40805: PUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: LD_INT 2
40813: PPUSH
40814: CALL_OW 275
40818: PUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: LD_INT 3
40826: PPUSH
40827: CALL_OW 275
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: ST_TO_ADDR
// end ;
40837: LD_VAR 0 2
40841: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40842: LD_INT 0
40844: PPUSH
40845: PPUSH
// result := array ;
40846: LD_ADDR_VAR 0 3
40850: PUSH
40851: LD_VAR 0 1
40855: ST_TO_ADDR
// if size >= result then
40856: LD_VAR 0 2
40860: PUSH
40861: LD_VAR 0 3
40865: GREATEREQUAL
40866: IFFALSE 40870
// exit ;
40868: GO 40920
// if size then
40870: LD_VAR 0 2
40874: IFFALSE 40920
// for i := array downto size do
40876: LD_ADDR_VAR 0 4
40880: PUSH
40881: DOUBLE
40882: LD_VAR 0 1
40886: INC
40887: ST_TO_ADDR
40888: LD_VAR 0 2
40892: PUSH
40893: FOR_DOWNTO
40894: IFFALSE 40918
// result := Delete ( result , result ) ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 3
40905: PPUSH
40906: LD_VAR 0 3
40910: PPUSH
40911: CALL_OW 3
40915: ST_TO_ADDR
40916: GO 40893
40918: POP
40919: POP
// end ;
40920: LD_VAR 0 3
40924: RET
// export function ComExit ( unit ) ; var tmp ; begin
40925: LD_INT 0
40927: PPUSH
40928: PPUSH
// if not IsInUnit ( unit ) then
40929: LD_VAR 0 1
40933: PPUSH
40934: CALL_OW 310
40938: NOT
40939: IFFALSE 40943
// exit ;
40941: GO 41003
// tmp := IsInUnit ( unit ) ;
40943: LD_ADDR_VAR 0 3
40947: PUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 310
40957: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40958: LD_VAR 0 3
40962: PPUSH
40963: CALL_OW 247
40967: PUSH
40968: LD_INT 2
40970: EQUAL
40971: IFFALSE 40984
// ComExitVehicle ( unit ) else
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 121
40982: GO 40993
// ComExitBuilding ( unit ) ;
40984: LD_VAR 0 1
40988: PPUSH
40989: CALL_OW 122
// result := tmp ;
40993: LD_ADDR_VAR 0 2
40997: PUSH
40998: LD_VAR 0 3
41002: ST_TO_ADDR
// end ;
41003: LD_VAR 0 2
41007: RET
// export function ComExitAll ( units ) ; var i ; begin
41008: LD_INT 0
41010: PPUSH
41011: PPUSH
// if not units then
41012: LD_VAR 0 1
41016: NOT
41017: IFFALSE 41021
// exit ;
41019: GO 41047
// for i in units do
41021: LD_ADDR_VAR 0 3
41025: PUSH
41026: LD_VAR 0 1
41030: PUSH
41031: FOR_IN
41032: IFFALSE 41045
// ComExit ( i ) ;
41034: LD_VAR 0 3
41038: PPUSH
41039: CALL 40925 0 1
41043: GO 41031
41045: POP
41046: POP
// end ;
41047: LD_VAR 0 2
41051: RET
// export function ResetHc ; begin
41052: LD_INT 0
41054: PPUSH
// InitHc ;
41055: CALL_OW 19
// hc_importance := 0 ;
41059: LD_ADDR_OWVAR 32
41063: PUSH
41064: LD_INT 0
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 1
41071: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
41076: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41077: LD_ADDR_VAR 0 6
41081: PUSH
41082: LD_VAR 0 1
41086: PUSH
41087: LD_VAR 0 3
41091: PLUS
41092: PUSH
41093: LD_INT 2
41095: DIV
41096: ST_TO_ADDR
// if _x < 0 then
41097: LD_VAR 0 6
41101: PUSH
41102: LD_INT 0
41104: LESS
41105: IFFALSE 41122
// _x := _x * - 1 ;
41107: LD_ADDR_VAR 0 6
41111: PUSH
41112: LD_VAR 0 6
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: MUL
41121: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41122: LD_ADDR_VAR 0 7
41126: PUSH
41127: LD_VAR 0 2
41131: PUSH
41132: LD_VAR 0 4
41136: PLUS
41137: PUSH
41138: LD_INT 2
41140: DIV
41141: ST_TO_ADDR
// if _y < 0 then
41142: LD_VAR 0 7
41146: PUSH
41147: LD_INT 0
41149: LESS
41150: IFFALSE 41167
// _y := _y * - 1 ;
41152: LD_ADDR_VAR 0 7
41156: PUSH
41157: LD_VAR 0 7
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: MUL
41166: ST_TO_ADDR
// result := [ _x , _y ] ;
41167: LD_ADDR_VAR 0 5
41171: PUSH
41172: LD_VAR 0 6
41176: PUSH
41177: LD_VAR 0 7
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: ST_TO_ADDR
// end ;
41186: LD_VAR 0 5
41190: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41191: LD_INT 0
41193: PPUSH
41194: PPUSH
41195: PPUSH
41196: PPUSH
// task := GetTaskList ( unit ) ;
41197: LD_ADDR_VAR 0 7
41201: PUSH
41202: LD_VAR 0 1
41206: PPUSH
41207: CALL_OW 437
41211: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41212: LD_VAR 0 7
41216: NOT
41217: PUSH
41218: LD_VAR 0 1
41222: PPUSH
41223: LD_VAR 0 2
41227: PPUSH
41228: CALL_OW 308
41232: NOT
41233: AND
41234: IFFALSE 41238
// exit ;
41236: GO 41356
// if IsInArea ( unit , area ) then
41238: LD_VAR 0 1
41242: PPUSH
41243: LD_VAR 0 2
41247: PPUSH
41248: CALL_OW 308
41252: IFFALSE 41270
// begin ComMoveToArea ( unit , goAway ) ;
41254: LD_VAR 0 1
41258: PPUSH
41259: LD_VAR 0 3
41263: PPUSH
41264: CALL_OW 113
// exit ;
41268: GO 41356
// end ; if task [ 1 ] [ 1 ] <> M then
41270: LD_VAR 0 7
41274: PUSH
41275: LD_INT 1
41277: ARRAY
41278: PUSH
41279: LD_INT 1
41281: ARRAY
41282: PUSH
41283: LD_STRING M
41285: NONEQUAL
41286: IFFALSE 41290
// exit ;
41288: GO 41356
// x := task [ 1 ] [ 2 ] ;
41290: LD_ADDR_VAR 0 5
41294: PUSH
41295: LD_VAR 0 7
41299: PUSH
41300: LD_INT 1
41302: ARRAY
41303: PUSH
41304: LD_INT 2
41306: ARRAY
41307: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41308: LD_ADDR_VAR 0 6
41312: PUSH
41313: LD_VAR 0 7
41317: PUSH
41318: LD_INT 1
41320: ARRAY
41321: PUSH
41322: LD_INT 3
41324: ARRAY
41325: ST_TO_ADDR
// if InArea ( x , y , area ) then
41326: LD_VAR 0 5
41330: PPUSH
41331: LD_VAR 0 6
41335: PPUSH
41336: LD_VAR 0 2
41340: PPUSH
41341: CALL_OW 309
41345: IFFALSE 41356
// ComStop ( unit ) ;
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 141
// end ;
41356: LD_VAR 0 4
41360: RET
// export function Abs ( value ) ; begin
41361: LD_INT 0
41363: PPUSH
// result := value ;
41364: LD_ADDR_VAR 0 2
41368: PUSH
41369: LD_VAR 0 1
41373: ST_TO_ADDR
// if value < 0 then
41374: LD_VAR 0 1
41378: PUSH
41379: LD_INT 0
41381: LESS
41382: IFFALSE 41399
// result := value * - 1 ;
41384: LD_ADDR_VAR 0 2
41388: PUSH
41389: LD_VAR 0 1
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: MUL
41398: ST_TO_ADDR
// end ;
41399: LD_VAR 0 2
41403: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41404: LD_INT 0
41406: PPUSH
41407: PPUSH
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
41412: PPUSH
41413: PPUSH
// if not unit or not building then
41414: LD_VAR 0 1
41418: NOT
41419: PUSH
41420: LD_VAR 0 2
41424: NOT
41425: OR
41426: IFFALSE 41430
// exit ;
41428: GO 41656
// x := GetX ( building ) ;
41430: LD_ADDR_VAR 0 4
41434: PUSH
41435: LD_VAR 0 2
41439: PPUSH
41440: CALL_OW 250
41444: ST_TO_ADDR
// y := GetY ( building ) ;
41445: LD_ADDR_VAR 0 6
41449: PUSH
41450: LD_VAR 0 2
41454: PPUSH
41455: CALL_OW 251
41459: ST_TO_ADDR
// d := GetDir ( building ) ;
41460: LD_ADDR_VAR 0 8
41464: PUSH
41465: LD_VAR 0 2
41469: PPUSH
41470: CALL_OW 254
41474: ST_TO_ADDR
// r := 4 ;
41475: LD_ADDR_VAR 0 9
41479: PUSH
41480: LD_INT 4
41482: ST_TO_ADDR
// for i := 1 to 5 do
41483: LD_ADDR_VAR 0 10
41487: PUSH
41488: DOUBLE
41489: LD_INT 1
41491: DEC
41492: ST_TO_ADDR
41493: LD_INT 5
41495: PUSH
41496: FOR_TO
41497: IFFALSE 41654
// begin _x := ShiftX ( x , d , r + i ) ;
41499: LD_ADDR_VAR 0 5
41503: PUSH
41504: LD_VAR 0 4
41508: PPUSH
41509: LD_VAR 0 8
41513: PPUSH
41514: LD_VAR 0 9
41518: PUSH
41519: LD_VAR 0 10
41523: PLUS
41524: PPUSH
41525: CALL_OW 272
41529: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41530: LD_ADDR_VAR 0 7
41534: PUSH
41535: LD_VAR 0 6
41539: PPUSH
41540: LD_VAR 0 8
41544: PPUSH
41545: LD_VAR 0 9
41549: PUSH
41550: LD_VAR 0 10
41554: PLUS
41555: PPUSH
41556: CALL_OW 273
41560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41561: LD_VAR 0 5
41565: PPUSH
41566: LD_VAR 0 7
41570: PPUSH
41571: CALL_OW 488
41575: PUSH
41576: LD_VAR 0 5
41580: PPUSH
41581: LD_VAR 0 7
41585: PPUSH
41586: CALL_OW 428
41590: PPUSH
41591: CALL_OW 247
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: IN
41606: NOT
41607: AND
41608: IFFALSE 41652
// begin ComMoveXY ( unit , _x , _y ) ;
41610: LD_VAR 0 1
41614: PPUSH
41615: LD_VAR 0 5
41619: PPUSH
41620: LD_VAR 0 7
41624: PPUSH
41625: CALL_OW 111
// result := [ _x , _y ] ;
41629: LD_ADDR_VAR 0 3
41633: PUSH
41634: LD_VAR 0 5
41638: PUSH
41639: LD_VAR 0 7
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: ST_TO_ADDR
// exit ;
41648: POP
41649: POP
41650: GO 41656
// end ; end ;
41652: GO 41496
41654: POP
41655: POP
// end ;
41656: LD_VAR 0 3
41660: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41661: LD_INT 0
41663: PPUSH
41664: PPUSH
41665: PPUSH
// result := 0 ;
41666: LD_ADDR_VAR 0 3
41670: PUSH
41671: LD_INT 0
41673: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41674: LD_VAR 0 1
41678: PUSH
41679: LD_INT 0
41681: LESS
41682: PUSH
41683: LD_VAR 0 1
41687: PUSH
41688: LD_INT 8
41690: GREATER
41691: OR
41692: PUSH
41693: LD_VAR 0 2
41697: PUSH
41698: LD_INT 0
41700: LESS
41701: OR
41702: PUSH
41703: LD_VAR 0 2
41707: PUSH
41708: LD_INT 8
41710: GREATER
41711: OR
41712: IFFALSE 41716
// exit ;
41714: GO 41791
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41716: LD_ADDR_VAR 0 4
41720: PUSH
41721: LD_INT 22
41723: PUSH
41724: LD_VAR 0 2
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PPUSH
41733: CALL_OW 69
41737: PUSH
41738: FOR_IN
41739: IFFALSE 41789
// begin un := UnitShoot ( i ) ;
41741: LD_ADDR_VAR 0 5
41745: PUSH
41746: LD_VAR 0 4
41750: PPUSH
41751: CALL_OW 504
41755: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41756: LD_VAR 0 5
41760: PPUSH
41761: CALL_OW 255
41765: PUSH
41766: LD_VAR 0 1
41770: EQUAL
41771: IFFALSE 41787
// begin result := un ;
41773: LD_ADDR_VAR 0 3
41777: PUSH
41778: LD_VAR 0 5
41782: ST_TO_ADDR
// exit ;
41783: POP
41784: POP
41785: GO 41791
// end ; end ;
41787: GO 41738
41789: POP
41790: POP
// end ;
41791: LD_VAR 0 3
41795: RET
// export function GetCargoBay ( units ) ; begin
41796: LD_INT 0
41798: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41799: LD_ADDR_VAR 0 2
41803: PUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 34
41814: PUSH
41815: LD_INT 12
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 34
41824: PUSH
41825: LD_INT 51
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 34
41834: PUSH
41835: LD_INT 32
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 34
41844: PUSH
41845: LD_INT 89
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: PPUSH
41859: CALL_OW 72
41863: ST_TO_ADDR
// end ;
41864: LD_VAR 0 2
41868: RET
// export function Negate ( value ) ; begin
41869: LD_INT 0
41871: PPUSH
// result := not value ;
41872: LD_ADDR_VAR 0 2
41876: PUSH
41877: LD_VAR 0 1
41881: NOT
41882: ST_TO_ADDR
// end ;
41883: LD_VAR 0 2
41887: RET
// export function Inc ( value ) ; begin
41888: LD_INT 0
41890: PPUSH
// result := value + 1 ;
41891: LD_ADDR_VAR 0 2
41895: PUSH
41896: LD_VAR 0 1
41900: PUSH
41901: LD_INT 1
41903: PLUS
41904: ST_TO_ADDR
// end ;
41905: LD_VAR 0 2
41909: RET
// export function Dec ( value ) ; begin
41910: LD_INT 0
41912: PPUSH
// result := value - 1 ;
41913: LD_ADDR_VAR 0 2
41917: PUSH
41918: LD_VAR 0 1
41922: PUSH
41923: LD_INT 1
41925: MINUS
41926: ST_TO_ADDR
// end ;
41927: LD_VAR 0 2
41931: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41932: LD_INT 0
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41942: LD_VAR 0 1
41946: PPUSH
41947: LD_VAR 0 2
41951: PPUSH
41952: CALL_OW 488
41956: NOT
41957: PUSH
41958: LD_VAR 0 3
41962: PPUSH
41963: LD_VAR 0 4
41967: PPUSH
41968: CALL_OW 488
41972: NOT
41973: OR
41974: IFFALSE 41987
// begin result := - 1 ;
41976: LD_ADDR_VAR 0 5
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: ST_TO_ADDR
// exit ;
41985: GO 42222
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41987: LD_ADDR_VAR 0 12
41991: PUSH
41992: LD_VAR 0 1
41996: PPUSH
41997: LD_VAR 0 2
42001: PPUSH
42002: LD_VAR 0 3
42006: PPUSH
42007: LD_VAR 0 4
42011: PPUSH
42012: CALL 41072 0 4
42016: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42017: LD_ADDR_VAR 0 11
42021: PUSH
42022: LD_VAR 0 1
42026: PPUSH
42027: LD_VAR 0 2
42031: PPUSH
42032: LD_VAR 0 12
42036: PUSH
42037: LD_INT 1
42039: ARRAY
42040: PPUSH
42041: LD_VAR 0 12
42045: PUSH
42046: LD_INT 2
42048: ARRAY
42049: PPUSH
42050: CALL_OW 298
42054: ST_TO_ADDR
// distance := 9999 ;
42055: LD_ADDR_VAR 0 10
42059: PUSH
42060: LD_INT 9999
42062: ST_TO_ADDR
// for i := 0 to 5 do
42063: LD_ADDR_VAR 0 6
42067: PUSH
42068: DOUBLE
42069: LD_INT 0
42071: DEC
42072: ST_TO_ADDR
42073: LD_INT 5
42075: PUSH
42076: FOR_TO
42077: IFFALSE 42220
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42079: LD_ADDR_VAR 0 7
42083: PUSH
42084: LD_VAR 0 1
42088: PPUSH
42089: LD_VAR 0 6
42093: PPUSH
42094: LD_VAR 0 11
42098: PPUSH
42099: CALL_OW 272
42103: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42104: LD_ADDR_VAR 0 8
42108: PUSH
42109: LD_VAR 0 2
42113: PPUSH
42114: LD_VAR 0 6
42118: PPUSH
42119: LD_VAR 0 11
42123: PPUSH
42124: CALL_OW 273
42128: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42129: LD_VAR 0 7
42133: PPUSH
42134: LD_VAR 0 8
42138: PPUSH
42139: CALL_OW 488
42143: NOT
42144: IFFALSE 42148
// continue ;
42146: GO 42076
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42148: LD_ADDR_VAR 0 9
42152: PUSH
42153: LD_VAR 0 12
42157: PUSH
42158: LD_INT 1
42160: ARRAY
42161: PPUSH
42162: LD_VAR 0 12
42166: PUSH
42167: LD_INT 2
42169: ARRAY
42170: PPUSH
42171: LD_VAR 0 7
42175: PPUSH
42176: LD_VAR 0 8
42180: PPUSH
42181: CALL_OW 298
42185: ST_TO_ADDR
// if tmp < distance then
42186: LD_VAR 0 9
42190: PUSH
42191: LD_VAR 0 10
42195: LESS
42196: IFFALSE 42218
// begin result := i ;
42198: LD_ADDR_VAR 0 5
42202: PUSH
42203: LD_VAR 0 6
42207: ST_TO_ADDR
// distance := tmp ;
42208: LD_ADDR_VAR 0 10
42212: PUSH
42213: LD_VAR 0 9
42217: ST_TO_ADDR
// end ; end ;
42218: GO 42076
42220: POP
42221: POP
// end ;
42222: LD_VAR 0 5
42226: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42227: LD_INT 0
42229: PPUSH
42230: PPUSH
// if not driver or not IsInUnit ( driver ) then
42231: LD_VAR 0 1
42235: NOT
42236: PUSH
42237: LD_VAR 0 1
42241: PPUSH
42242: CALL_OW 310
42246: NOT
42247: OR
42248: IFFALSE 42252
// exit ;
42250: GO 42342
// vehicle := IsInUnit ( driver ) ;
42252: LD_ADDR_VAR 0 3
42256: PUSH
42257: LD_VAR 0 1
42261: PPUSH
42262: CALL_OW 310
42266: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42267: LD_VAR 0 1
42271: PPUSH
42272: LD_STRING \
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: LD_STRING E
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_VAR 0 3
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PPUSH
42338: CALL_OW 446
// end ;
42342: LD_VAR 0 2
42346: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42347: LD_INT 0
42349: PPUSH
42350: PPUSH
// if not driver or not IsInUnit ( driver ) then
42351: LD_VAR 0 1
42355: NOT
42356: PUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: CALL_OW 310
42366: NOT
42367: OR
42368: IFFALSE 42372
// exit ;
42370: GO 42462
// vehicle := IsInUnit ( driver ) ;
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 310
42386: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42387: LD_VAR 0 1
42391: PPUSH
42392: LD_STRING \
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: PUSH
42422: LD_STRING E
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_VAR 0 3
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PPUSH
42458: CALL_OW 447
// end ;
42462: LD_VAR 0 2
42466: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42467: LD_INT 0
42469: PPUSH
42470: PPUSH
42471: PPUSH
// tmp := [ ] ;
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: EMPTY
42478: ST_TO_ADDR
// for i in units do
42479: LD_ADDR_VAR 0 4
42483: PUSH
42484: LD_VAR 0 1
42488: PUSH
42489: FOR_IN
42490: IFFALSE 42528
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42492: LD_ADDR_VAR 0 5
42496: PUSH
42497: LD_VAR 0 5
42501: PPUSH
42502: LD_VAR 0 5
42506: PUSH
42507: LD_INT 1
42509: PLUS
42510: PPUSH
42511: LD_VAR 0 4
42515: PPUSH
42516: CALL_OW 256
42520: PPUSH
42521: CALL_OW 2
42525: ST_TO_ADDR
42526: GO 42489
42528: POP
42529: POP
// if not tmp then
42530: LD_VAR 0 5
42534: NOT
42535: IFFALSE 42539
// exit ;
42537: GO 42587
// if asc then
42539: LD_VAR 0 2
42543: IFFALSE 42567
// result := SortListByListAsc ( units , tmp ) else
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_VAR 0 1
42554: PPUSH
42555: LD_VAR 0 5
42559: PPUSH
42560: CALL_OW 76
42564: ST_TO_ADDR
42565: GO 42587
// result := SortListByListDesc ( units , tmp ) ;
42567: LD_ADDR_VAR 0 3
42571: PUSH
42572: LD_VAR 0 1
42576: PPUSH
42577: LD_VAR 0 5
42581: PPUSH
42582: CALL_OW 77
42586: ST_TO_ADDR
// end ;
42587: LD_VAR 0 3
42591: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42592: LD_INT 0
42594: PPUSH
42595: PPUSH
// task := GetTaskList ( mech ) ;
42596: LD_ADDR_VAR 0 4
42600: PUSH
42601: LD_VAR 0 1
42605: PPUSH
42606: CALL_OW 437
42610: ST_TO_ADDR
// if not task then
42611: LD_VAR 0 4
42615: NOT
42616: IFFALSE 42620
// exit ;
42618: GO 42662
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42620: LD_ADDR_VAR 0 3
42624: PUSH
42625: LD_VAR 0 4
42629: PUSH
42630: LD_INT 1
42632: ARRAY
42633: PUSH
42634: LD_INT 1
42636: ARRAY
42637: PUSH
42638: LD_STRING r
42640: EQUAL
42641: PUSH
42642: LD_VAR 0 4
42646: PUSH
42647: LD_INT 1
42649: ARRAY
42650: PUSH
42651: LD_INT 4
42653: ARRAY
42654: PUSH
42655: LD_VAR 0 2
42659: EQUAL
42660: AND
42661: ST_TO_ADDR
// end ;
42662: LD_VAR 0 3
42666: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42667: LD_INT 0
42669: PPUSH
// SetDir ( unit , d ) ;
42670: LD_VAR 0 1
42674: PPUSH
42675: LD_VAR 0 4
42679: PPUSH
42680: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42684: LD_VAR 0 1
42688: PPUSH
42689: LD_VAR 0 2
42693: PPUSH
42694: LD_VAR 0 3
42698: PPUSH
42699: LD_VAR 0 5
42703: PPUSH
42704: CALL_OW 48
// end ;
42708: LD_VAR 0 6
42712: RET
// export function ToNaturalNumber ( number ) ; begin
42713: LD_INT 0
42715: PPUSH
// result := number div 1 ;
42716: LD_ADDR_VAR 0 2
42720: PUSH
42721: LD_VAR 0 1
42725: PUSH
42726: LD_INT 1
42728: DIV
42729: ST_TO_ADDR
// if number < 0 then
42730: LD_VAR 0 1
42734: PUSH
42735: LD_INT 0
42737: LESS
42738: IFFALSE 42748
// result := 0 ;
42740: LD_ADDR_VAR 0 2
42744: PUSH
42745: LD_INT 0
42747: ST_TO_ADDR
// end ;
42748: LD_VAR 0 2
42752: RET
// export function SortByClass ( units , class ) ; var un ; begin
42753: LD_INT 0
42755: PPUSH
42756: PPUSH
// if not units or not class then
42757: LD_VAR 0 1
42761: NOT
42762: PUSH
42763: LD_VAR 0 2
42767: NOT
42768: OR
42769: IFFALSE 42773
// exit ;
42771: GO 42868
// result := [ ] ;
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: EMPTY
42779: ST_TO_ADDR
// for un in units do
42780: LD_ADDR_VAR 0 4
42784: PUSH
42785: LD_VAR 0 1
42789: PUSH
42790: FOR_IN
42791: IFFALSE 42866
// if GetClass ( un ) = class then
42793: LD_VAR 0 4
42797: PPUSH
42798: CALL_OW 257
42802: PUSH
42803: LD_VAR 0 2
42807: EQUAL
42808: IFFALSE 42835
// result := Insert ( result , 1 , un ) else
42810: LD_ADDR_VAR 0 3
42814: PUSH
42815: LD_VAR 0 3
42819: PPUSH
42820: LD_INT 1
42822: PPUSH
42823: LD_VAR 0 4
42827: PPUSH
42828: CALL_OW 2
42832: ST_TO_ADDR
42833: GO 42864
// result := Replace ( result , result + 1 , un ) ;
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_VAR 0 3
42844: PPUSH
42845: LD_VAR 0 3
42849: PUSH
42850: LD_INT 1
42852: PLUS
42853: PPUSH
42854: LD_VAR 0 4
42858: PPUSH
42859: CALL_OW 1
42863: ST_TO_ADDR
42864: GO 42790
42866: POP
42867: POP
// end ;
42868: LD_VAR 0 3
42872: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42873: LD_INT 0
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
// result := [ ] ;
42882: LD_ADDR_VAR 0 4
42886: PUSH
42887: EMPTY
42888: ST_TO_ADDR
// if x - r < 0 then
42889: LD_VAR 0 1
42893: PUSH
42894: LD_VAR 0 3
42898: MINUS
42899: PUSH
42900: LD_INT 0
42902: LESS
42903: IFFALSE 42915
// min_x := 0 else
42905: LD_ADDR_VAR 0 8
42909: PUSH
42910: LD_INT 0
42912: ST_TO_ADDR
42913: GO 42931
// min_x := x - r ;
42915: LD_ADDR_VAR 0 8
42919: PUSH
42920: LD_VAR 0 1
42924: PUSH
42925: LD_VAR 0 3
42929: MINUS
42930: ST_TO_ADDR
// if y - r < 0 then
42931: LD_VAR 0 2
42935: PUSH
42936: LD_VAR 0 3
42940: MINUS
42941: PUSH
42942: LD_INT 0
42944: LESS
42945: IFFALSE 42957
// min_y := 0 else
42947: LD_ADDR_VAR 0 7
42951: PUSH
42952: LD_INT 0
42954: ST_TO_ADDR
42955: GO 42973
// min_y := y - r ;
42957: LD_ADDR_VAR 0 7
42961: PUSH
42962: LD_VAR 0 2
42966: PUSH
42967: LD_VAR 0 3
42971: MINUS
42972: ST_TO_ADDR
// max_x := x + r ;
42973: LD_ADDR_VAR 0 9
42977: PUSH
42978: LD_VAR 0 1
42982: PUSH
42983: LD_VAR 0 3
42987: PLUS
42988: ST_TO_ADDR
// max_y := y + r ;
42989: LD_ADDR_VAR 0 10
42993: PUSH
42994: LD_VAR 0 2
42998: PUSH
42999: LD_VAR 0 3
43003: PLUS
43004: ST_TO_ADDR
// for _x = min_x to max_x do
43005: LD_ADDR_VAR 0 5
43009: PUSH
43010: DOUBLE
43011: LD_VAR 0 8
43015: DEC
43016: ST_TO_ADDR
43017: LD_VAR 0 9
43021: PUSH
43022: FOR_TO
43023: IFFALSE 43124
// for _y = min_y to max_y do
43025: LD_ADDR_VAR 0 6
43029: PUSH
43030: DOUBLE
43031: LD_VAR 0 7
43035: DEC
43036: ST_TO_ADDR
43037: LD_VAR 0 10
43041: PUSH
43042: FOR_TO
43043: IFFALSE 43120
// begin if not ValidHex ( _x , _y ) then
43045: LD_VAR 0 5
43049: PPUSH
43050: LD_VAR 0 6
43054: PPUSH
43055: CALL_OW 488
43059: NOT
43060: IFFALSE 43064
// continue ;
43062: GO 43042
// if GetResourceTypeXY ( _x , _y ) then
43064: LD_VAR 0 5
43068: PPUSH
43069: LD_VAR 0 6
43073: PPUSH
43074: CALL_OW 283
43078: IFFALSE 43118
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43080: LD_ADDR_VAR 0 4
43084: PUSH
43085: LD_VAR 0 4
43089: PPUSH
43090: LD_VAR 0 4
43094: PUSH
43095: LD_INT 1
43097: PLUS
43098: PPUSH
43099: LD_VAR 0 5
43103: PUSH
43104: LD_VAR 0 6
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PPUSH
43113: CALL_OW 1
43117: ST_TO_ADDR
// end ;
43118: GO 43042
43120: POP
43121: POP
43122: GO 43022
43124: POP
43125: POP
// end ;
43126: LD_VAR 0 4
43130: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43131: LD_INT 0
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
// if not units then
43141: LD_VAR 0 1
43145: NOT
43146: IFFALSE 43150
// exit ;
43148: GO 43674
// result := UnitFilter ( units , [ f_ok ] ) ;
43150: LD_ADDR_VAR 0 3
43154: PUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: LD_INT 50
43162: PUSH
43163: EMPTY
43164: LIST
43165: PPUSH
43166: CALL_OW 72
43170: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43171: LD_ADDR_VAR 0 8
43175: PUSH
43176: LD_VAR 0 1
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PPUSH
43185: CALL_OW 255
43189: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43190: LD_ADDR_VAR 0 10
43194: PUSH
43195: LD_INT 29
43197: PUSH
43198: LD_INT 91
43200: PUSH
43201: LD_INT 49
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: ST_TO_ADDR
// if not result then
43209: LD_VAR 0 3
43213: NOT
43214: IFFALSE 43218
// exit ;
43216: GO 43674
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43218: LD_ADDR_VAR 0 5
43222: PUSH
43223: LD_INT 81
43225: PUSH
43226: LD_VAR 0 8
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PPUSH
43235: CALL_OW 69
43239: ST_TO_ADDR
// for i in result do
43240: LD_ADDR_VAR 0 4
43244: PUSH
43245: LD_VAR 0 3
43249: PUSH
43250: FOR_IN
43251: IFFALSE 43672
// begin tag := GetTag ( i ) + 1 ;
43253: LD_ADDR_VAR 0 9
43257: PUSH
43258: LD_VAR 0 4
43262: PPUSH
43263: CALL_OW 110
43267: PUSH
43268: LD_INT 1
43270: PLUS
43271: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43272: LD_ADDR_VAR 0 7
43276: PUSH
43277: LD_VAR 0 4
43281: PPUSH
43282: CALL_OW 250
43286: PPUSH
43287: LD_VAR 0 4
43291: PPUSH
43292: CALL_OW 251
43296: PPUSH
43297: LD_INT 6
43299: PPUSH
43300: CALL 42873 0 3
43304: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43305: LD_VAR 0 4
43309: PPUSH
43310: CALL_OW 247
43314: PUSH
43315: LD_INT 2
43317: EQUAL
43318: PUSH
43319: LD_VAR 0 7
43323: AND
43324: PUSH
43325: LD_VAR 0 4
43329: PPUSH
43330: CALL_OW 264
43334: PUSH
43335: LD_VAR 0 10
43339: IN
43340: NOT
43341: AND
43342: IFFALSE 43381
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43344: LD_VAR 0 4
43348: PPUSH
43349: LD_VAR 0 7
43353: PUSH
43354: LD_INT 1
43356: ARRAY
43357: PUSH
43358: LD_INT 1
43360: ARRAY
43361: PPUSH
43362: LD_VAR 0 7
43366: PUSH
43367: LD_INT 1
43369: ARRAY
43370: PUSH
43371: LD_INT 2
43373: ARRAY
43374: PPUSH
43375: CALL_OW 116
43379: GO 43670
// if path > tag then
43381: LD_VAR 0 2
43385: PUSH
43386: LD_VAR 0 9
43390: GREATER
43391: IFFALSE 43599
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43393: LD_ADDR_VAR 0 6
43397: PUSH
43398: LD_VAR 0 5
43402: PPUSH
43403: LD_INT 91
43405: PUSH
43406: LD_VAR 0 4
43410: PUSH
43411: LD_INT 8
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: PPUSH
43419: CALL_OW 72
43423: ST_TO_ADDR
// if nearEnemy then
43424: LD_VAR 0 6
43428: IFFALSE 43497
// begin if GetWeapon ( i ) = ru_time_lapser then
43430: LD_VAR 0 4
43434: PPUSH
43435: CALL_OW 264
43439: PUSH
43440: LD_INT 49
43442: EQUAL
43443: IFFALSE 43471
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43445: LD_VAR 0 4
43449: PPUSH
43450: LD_VAR 0 6
43454: PPUSH
43455: LD_VAR 0 4
43459: PPUSH
43460: CALL_OW 74
43464: PPUSH
43465: CALL_OW 112
43469: GO 43495
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43471: LD_VAR 0 4
43475: PPUSH
43476: LD_VAR 0 6
43480: PPUSH
43481: LD_VAR 0 4
43485: PPUSH
43486: CALL_OW 74
43490: PPUSH
43491: CALL_OW 115
// end else
43495: GO 43597
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43497: LD_VAR 0 4
43501: PPUSH
43502: LD_VAR 0 2
43506: PUSH
43507: LD_VAR 0 9
43511: ARRAY
43512: PUSH
43513: LD_INT 1
43515: ARRAY
43516: PPUSH
43517: LD_VAR 0 2
43521: PUSH
43522: LD_VAR 0 9
43526: ARRAY
43527: PUSH
43528: LD_INT 2
43530: ARRAY
43531: PPUSH
43532: CALL_OW 297
43536: PUSH
43537: LD_INT 6
43539: GREATER
43540: IFFALSE 43583
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43542: LD_VAR 0 4
43546: PPUSH
43547: LD_VAR 0 2
43551: PUSH
43552: LD_VAR 0 9
43556: ARRAY
43557: PUSH
43558: LD_INT 1
43560: ARRAY
43561: PPUSH
43562: LD_VAR 0 2
43566: PUSH
43567: LD_VAR 0 9
43571: ARRAY
43572: PUSH
43573: LD_INT 2
43575: ARRAY
43576: PPUSH
43577: CALL_OW 114
43581: GO 43597
// SetTag ( i , tag ) ;
43583: LD_VAR 0 4
43587: PPUSH
43588: LD_VAR 0 9
43592: PPUSH
43593: CALL_OW 109
// end else
43597: GO 43670
// if enemy then
43599: LD_VAR 0 5
43603: IFFALSE 43670
// begin if GetWeapon ( i ) = ru_time_lapser then
43605: LD_VAR 0 4
43609: PPUSH
43610: CALL_OW 264
43614: PUSH
43615: LD_INT 49
43617: EQUAL
43618: IFFALSE 43646
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43620: LD_VAR 0 4
43624: PPUSH
43625: LD_VAR 0 5
43629: PPUSH
43630: LD_VAR 0 4
43634: PPUSH
43635: CALL_OW 74
43639: PPUSH
43640: CALL_OW 112
43644: GO 43670
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43646: LD_VAR 0 4
43650: PPUSH
43651: LD_VAR 0 5
43655: PPUSH
43656: LD_VAR 0 4
43660: PPUSH
43661: CALL_OW 74
43665: PPUSH
43666: CALL_OW 115
// end ; end ;
43670: GO 43250
43672: POP
43673: POP
// end ;
43674: LD_VAR 0 3
43678: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43679: LD_INT 0
43681: PPUSH
43682: PPUSH
43683: PPUSH
// if not unit or IsInUnit ( unit ) then
43684: LD_VAR 0 1
43688: NOT
43689: PUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 310
43699: OR
43700: IFFALSE 43704
// exit ;
43702: GO 43795
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43704: LD_ADDR_VAR 0 4
43708: PUSH
43709: LD_VAR 0 1
43713: PPUSH
43714: CALL_OW 250
43718: PPUSH
43719: LD_VAR 0 2
43723: PPUSH
43724: LD_INT 1
43726: PPUSH
43727: CALL_OW 272
43731: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43732: LD_ADDR_VAR 0 5
43736: PUSH
43737: LD_VAR 0 1
43741: PPUSH
43742: CALL_OW 251
43746: PPUSH
43747: LD_VAR 0 2
43751: PPUSH
43752: LD_INT 1
43754: PPUSH
43755: CALL_OW 273
43759: ST_TO_ADDR
// if ValidHex ( x , y ) then
43760: LD_VAR 0 4
43764: PPUSH
43765: LD_VAR 0 5
43769: PPUSH
43770: CALL_OW 488
43774: IFFALSE 43795
// ComTurnXY ( unit , x , y ) ;
43776: LD_VAR 0 1
43780: PPUSH
43781: LD_VAR 0 4
43785: PPUSH
43786: LD_VAR 0 5
43790: PPUSH
43791: CALL_OW 118
// end ;
43795: LD_VAR 0 3
43799: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43800: LD_INT 0
43802: PPUSH
43803: PPUSH
// result := false ;
43804: LD_ADDR_VAR 0 3
43808: PUSH
43809: LD_INT 0
43811: ST_TO_ADDR
// if not units then
43812: LD_VAR 0 2
43816: NOT
43817: IFFALSE 43821
// exit ;
43819: GO 43866
// for i in units do
43821: LD_ADDR_VAR 0 4
43825: PUSH
43826: LD_VAR 0 2
43830: PUSH
43831: FOR_IN
43832: IFFALSE 43864
// if See ( side , i ) then
43834: LD_VAR 0 1
43838: PPUSH
43839: LD_VAR 0 4
43843: PPUSH
43844: CALL_OW 292
43848: IFFALSE 43862
// begin result := true ;
43850: LD_ADDR_VAR 0 3
43854: PUSH
43855: LD_INT 1
43857: ST_TO_ADDR
// exit ;
43858: POP
43859: POP
43860: GO 43866
// end ;
43862: GO 43831
43864: POP
43865: POP
// end ;
43866: LD_VAR 0 3
43870: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43871: LD_INT 0
43873: PPUSH
43874: PPUSH
43875: PPUSH
43876: PPUSH
// if not unit or not points then
43877: LD_VAR 0 1
43881: NOT
43882: PUSH
43883: LD_VAR 0 2
43887: NOT
43888: OR
43889: IFFALSE 43893
// exit ;
43891: GO 43983
// dist := 99999 ;
43893: LD_ADDR_VAR 0 5
43897: PUSH
43898: LD_INT 99999
43900: ST_TO_ADDR
// for i in points do
43901: LD_ADDR_VAR 0 4
43905: PUSH
43906: LD_VAR 0 2
43910: PUSH
43911: FOR_IN
43912: IFFALSE 43981
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43914: LD_ADDR_VAR 0 6
43918: PUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: LD_VAR 0 4
43928: PUSH
43929: LD_INT 1
43931: ARRAY
43932: PPUSH
43933: LD_VAR 0 4
43937: PUSH
43938: LD_INT 2
43940: ARRAY
43941: PPUSH
43942: CALL_OW 297
43946: ST_TO_ADDR
// if tmpDist < dist then
43947: LD_VAR 0 6
43951: PUSH
43952: LD_VAR 0 5
43956: LESS
43957: IFFALSE 43979
// begin result := i ;
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_VAR 0 4
43968: ST_TO_ADDR
// dist := tmpDist ;
43969: LD_ADDR_VAR 0 5
43973: PUSH
43974: LD_VAR 0 6
43978: ST_TO_ADDR
// end ; end ;
43979: GO 43911
43981: POP
43982: POP
// end ;
43983: LD_VAR 0 3
43987: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43988: LD_INT 0
43990: PPUSH
// uc_side := side ;
43991: LD_ADDR_OWVAR 20
43995: PUSH
43996: LD_VAR 0 1
44000: ST_TO_ADDR
// uc_nation := 3 ;
44001: LD_ADDR_OWVAR 21
44005: PUSH
44006: LD_INT 3
44008: ST_TO_ADDR
// vc_chassis := 25 ;
44009: LD_ADDR_OWVAR 37
44013: PUSH
44014: LD_INT 25
44016: ST_TO_ADDR
// vc_engine := engine_siberite ;
44017: LD_ADDR_OWVAR 39
44021: PUSH
44022: LD_INT 3
44024: ST_TO_ADDR
// vc_control := control_computer ;
44025: LD_ADDR_OWVAR 38
44029: PUSH
44030: LD_INT 3
44032: ST_TO_ADDR
// vc_weapon := 59 ;
44033: LD_ADDR_OWVAR 40
44037: PUSH
44038: LD_INT 59
44040: ST_TO_ADDR
// result := CreateVehicle ;
44041: LD_ADDR_VAR 0 5
44045: PUSH
44046: CALL_OW 45
44050: ST_TO_ADDR
// SetDir ( result , d ) ;
44051: LD_VAR 0 5
44055: PPUSH
44056: LD_VAR 0 4
44060: PPUSH
44061: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44065: LD_VAR 0 5
44069: PPUSH
44070: LD_VAR 0 2
44074: PPUSH
44075: LD_VAR 0 3
44079: PPUSH
44080: LD_INT 0
44082: PPUSH
44083: CALL_OW 48
// end ;
44087: LD_VAR 0 5
44091: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44092: LD_INT 0
44094: PPUSH
44095: PPUSH
44096: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44097: LD_ADDR_VAR 0 2
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44120: LD_VAR 0 1
44124: NOT
44125: PUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: CALL_OW 264
44135: PUSH
44136: LD_INT 12
44138: PUSH
44139: LD_INT 51
44141: PUSH
44142: LD_INT 32
44144: PUSH
44145: LD_INT 89
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: IN
44154: NOT
44155: OR
44156: IFFALSE 44160
// exit ;
44158: GO 44258
// for i := 1 to 3 do
44160: LD_ADDR_VAR 0 3
44164: PUSH
44165: DOUBLE
44166: LD_INT 1
44168: DEC
44169: ST_TO_ADDR
44170: LD_INT 3
44172: PUSH
44173: FOR_TO
44174: IFFALSE 44256
// begin tmp := GetCargo ( cargo , i ) ;
44176: LD_ADDR_VAR 0 4
44180: PUSH
44181: LD_VAR 0 1
44185: PPUSH
44186: LD_VAR 0 3
44190: PPUSH
44191: CALL_OW 289
44195: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44196: LD_ADDR_VAR 0 2
44200: PUSH
44201: LD_VAR 0 2
44205: PPUSH
44206: LD_VAR 0 3
44210: PPUSH
44211: LD_VAR 0 4
44215: PPUSH
44216: CALL_OW 1
44220: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44221: LD_ADDR_VAR 0 2
44225: PUSH
44226: LD_VAR 0 2
44230: PPUSH
44231: LD_INT 4
44233: PPUSH
44234: LD_VAR 0 2
44238: PUSH
44239: LD_INT 4
44241: ARRAY
44242: PUSH
44243: LD_VAR 0 4
44247: PLUS
44248: PPUSH
44249: CALL_OW 1
44253: ST_TO_ADDR
// end ;
44254: GO 44173
44256: POP
44257: POP
// end ;
44258: LD_VAR 0 2
44262: RET
// export function Length ( array ) ; begin
44263: LD_INT 0
44265: PPUSH
// result := array + 0 ;
44266: LD_ADDR_VAR 0 2
44270: PUSH
44271: LD_VAR 0 1
44275: PUSH
44276: LD_INT 0
44278: PLUS
44279: ST_TO_ADDR
// end ;
44280: LD_VAR 0 2
44284: RET
// export function PrepareArray ( array ) ; begin
44285: LD_INT 0
44287: PPUSH
// result := array diff 0 ;
44288: LD_ADDR_VAR 0 2
44292: PUSH
44293: LD_VAR 0 1
44297: PUSH
44298: LD_INT 0
44300: DIFF
44301: ST_TO_ADDR
// if not result [ 1 ] then
44302: LD_VAR 0 2
44306: PUSH
44307: LD_INT 1
44309: ARRAY
44310: NOT
44311: IFFALSE 44331
// result := Delete ( result , 1 ) ;
44313: LD_ADDR_VAR 0 2
44317: PUSH
44318: LD_VAR 0 2
44322: PPUSH
44323: LD_INT 1
44325: PPUSH
44326: CALL_OW 3
44330: ST_TO_ADDR
// end ;
44331: LD_VAR 0 2
44335: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44336: LD_INT 0
44338: PPUSH
44339: PPUSH
44340: PPUSH
44341: PPUSH
// sibRocketRange := 25 ;
44342: LD_ADDR_VAR 0 6
44346: PUSH
44347: LD_INT 25
44349: ST_TO_ADDR
// result := false ;
44350: LD_ADDR_VAR 0 4
44354: PUSH
44355: LD_INT 0
44357: ST_TO_ADDR
// for i := 0 to 5 do
44358: LD_ADDR_VAR 0 5
44362: PUSH
44363: DOUBLE
44364: LD_INT 0
44366: DEC
44367: ST_TO_ADDR
44368: LD_INT 5
44370: PUSH
44371: FOR_TO
44372: IFFALSE 44439
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44374: LD_VAR 0 1
44378: PPUSH
44379: LD_VAR 0 5
44383: PPUSH
44384: LD_VAR 0 6
44388: PPUSH
44389: CALL_OW 272
44393: PPUSH
44394: LD_VAR 0 2
44398: PPUSH
44399: LD_VAR 0 5
44403: PPUSH
44404: LD_VAR 0 6
44408: PPUSH
44409: CALL_OW 273
44413: PPUSH
44414: LD_VAR 0 3
44418: PPUSH
44419: CALL_OW 309
44423: IFFALSE 44437
// begin result := true ;
44425: LD_ADDR_VAR 0 4
44429: PUSH
44430: LD_INT 1
44432: ST_TO_ADDR
// exit ;
44433: POP
44434: POP
44435: GO 44441
// end ;
44437: GO 44371
44439: POP
44440: POP
// end ;
44441: LD_VAR 0 4
44445: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44446: LD_INT 0
44448: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44449: LD_VAR 0 1
44453: PPUSH
44454: LD_VAR 0 2
44458: PPUSH
44459: LD_INT 0
44461: PPUSH
44462: LD_INT 0
44464: PPUSH
44465: LD_INT 1
44467: PPUSH
44468: LD_INT 0
44470: PPUSH
44471: CALL_OW 587
// end ; end_of_file end_of_file
44475: LD_VAR 0 3
44479: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44480: LD_VAR 0 1
44484: PPUSH
44485: LD_VAR 0 2
44489: PPUSH
44490: LD_VAR 0 3
44494: PPUSH
44495: LD_VAR 0 4
44499: PPUSH
44500: LD_VAR 0 5
44504: PPUSH
44505: LD_VAR 0 6
44509: PPUSH
44510: CALL 44694 0 6
// end ;
44514: PPOPN 6
44516: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44517: LD_INT 0
44519: PPUSH
// begin if not units then
44520: LD_VAR 0 1
44524: NOT
44525: IFFALSE 44529
// exit ;
44527: GO 44529
// end ;
44529: PPOPN 7
44531: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44532: CALL 44598 0 0
// end ; end_of_file
44536: PPOPN 1
44538: END
// export globalGameSaveCounter ; every 0 0$1 do
44539: GO 44541
44541: DISABLE
// begin enable ;
44542: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44543: LD_STRING updateTimer(
44545: PUSH
44546: LD_OWVAR 1
44550: STR
44551: PUSH
44552: LD_STRING );
44554: STR
44555: PPUSH
44556: CALL_OW 559
// end ;
44560: END
// every 0 0$1 do
44561: GO 44563
44563: DISABLE
// begin globalGameSaveCounter := 0 ;
44564: LD_ADDR_EXP 27
44568: PUSH
44569: LD_INT 0
44571: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
44572: LD_STRING setGameSaveCounter(0)
44574: PPUSH
44575: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
44579: LD_STRING initStreamRollete();
44581: PPUSH
44582: CALL_OW 559
// InitStreamMode ;
44586: CALL 45912 0 0
// DefineStreamItems ( false ) ;
44590: LD_INT 0
44592: PPUSH
44593: CALL 46376 0 1
// end ;
44597: END
// export function SOS_MapStart ( ) ; begin
44598: LD_INT 0
44600: PPUSH
// if streamModeActive then
44601: LD_EXP 28
44605: IFFALSE 44614
// DefineStreamItems ( true ) ;
44607: LD_INT 1
44609: PPUSH
44610: CALL 46376 0 1
// UpdateLuaVariables ( ) ;
44614: CALL 44631 0 0
// UpdateFactoryWaypoints ( ) ;
44618: CALL 59237 0 0
// UpdateWarehouseGatheringPoints ( ) ;
44622: CALL 59494 0 0
// end ;
44626: LD_VAR 0 1
44630: RET
// function UpdateLuaVariables ( ) ; begin
44631: LD_INT 0
44633: PPUSH
// if globalGameSaveCounter then
44634: LD_EXP 27
44638: IFFALSE 44672
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
44640: LD_ADDR_EXP 27
44644: PUSH
44645: LD_EXP 27
44649: PPUSH
44650: CALL 41888 0 1
44654: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
44655: LD_STRING setGameSaveCounter(
44657: PUSH
44658: LD_EXP 27
44662: STR
44663: PUSH
44664: LD_STRING )
44666: STR
44667: PPUSH
44668: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
44672: LD_STRING setGameDifficulty(
44674: PUSH
44675: LD_OWVAR 67
44679: STR
44680: PUSH
44681: LD_STRING )
44683: STR
44684: PPUSH
44685: CALL_OW 559
// end ;
44689: LD_VAR 0 1
44693: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44694: LD_INT 0
44696: PPUSH
// if p2 = stream_mode then
44697: LD_VAR 0 2
44701: PUSH
44702: LD_INT 100
44704: EQUAL
44705: IFFALSE 45708
// begin if not StreamModeActive then
44707: LD_EXP 28
44711: NOT
44712: IFFALSE 44722
// StreamModeActive := true ;
44714: LD_ADDR_EXP 28
44718: PUSH
44719: LD_INT 1
44721: ST_TO_ADDR
// if p3 = 0 then
44722: LD_VAR 0 3
44726: PUSH
44727: LD_INT 0
44729: EQUAL
44730: IFFALSE 44736
// InitStreamMode ;
44732: CALL 45912 0 0
// if p3 = 1 then
44736: LD_VAR 0 3
44740: PUSH
44741: LD_INT 1
44743: EQUAL
44744: IFFALSE 44754
// sRocket := true ;
44746: LD_ADDR_EXP 33
44750: PUSH
44751: LD_INT 1
44753: ST_TO_ADDR
// if p3 = 2 then
44754: LD_VAR 0 3
44758: PUSH
44759: LD_INT 2
44761: EQUAL
44762: IFFALSE 44772
// sSpeed := true ;
44764: LD_ADDR_EXP 32
44768: PUSH
44769: LD_INT 1
44771: ST_TO_ADDR
// if p3 = 3 then
44772: LD_VAR 0 3
44776: PUSH
44777: LD_INT 3
44779: EQUAL
44780: IFFALSE 44790
// sEngine := true ;
44782: LD_ADDR_EXP 34
44786: PUSH
44787: LD_INT 1
44789: ST_TO_ADDR
// if p3 = 4 then
44790: LD_VAR 0 3
44794: PUSH
44795: LD_INT 4
44797: EQUAL
44798: IFFALSE 44808
// sSpec := true ;
44800: LD_ADDR_EXP 31
44804: PUSH
44805: LD_INT 1
44807: ST_TO_ADDR
// if p3 = 5 then
44808: LD_VAR 0 3
44812: PUSH
44813: LD_INT 5
44815: EQUAL
44816: IFFALSE 44826
// sLevel := true ;
44818: LD_ADDR_EXP 35
44822: PUSH
44823: LD_INT 1
44825: ST_TO_ADDR
// if p3 = 6 then
44826: LD_VAR 0 3
44830: PUSH
44831: LD_INT 6
44833: EQUAL
44834: IFFALSE 44844
// sArmoury := true ;
44836: LD_ADDR_EXP 36
44840: PUSH
44841: LD_INT 1
44843: ST_TO_ADDR
// if p3 = 7 then
44844: LD_VAR 0 3
44848: PUSH
44849: LD_INT 7
44851: EQUAL
44852: IFFALSE 44862
// sRadar := true ;
44854: LD_ADDR_EXP 37
44858: PUSH
44859: LD_INT 1
44861: ST_TO_ADDR
// if p3 = 8 then
44862: LD_VAR 0 3
44866: PUSH
44867: LD_INT 8
44869: EQUAL
44870: IFFALSE 44880
// sBunker := true ;
44872: LD_ADDR_EXP 38
44876: PUSH
44877: LD_INT 1
44879: ST_TO_ADDR
// if p3 = 9 then
44880: LD_VAR 0 3
44884: PUSH
44885: LD_INT 9
44887: EQUAL
44888: IFFALSE 44898
// sHack := true ;
44890: LD_ADDR_EXP 39
44894: PUSH
44895: LD_INT 1
44897: ST_TO_ADDR
// if p3 = 10 then
44898: LD_VAR 0 3
44902: PUSH
44903: LD_INT 10
44905: EQUAL
44906: IFFALSE 44916
// sFire := true ;
44908: LD_ADDR_EXP 40
44912: PUSH
44913: LD_INT 1
44915: ST_TO_ADDR
// if p3 = 11 then
44916: LD_VAR 0 3
44920: PUSH
44921: LD_INT 11
44923: EQUAL
44924: IFFALSE 44934
// sRefresh := true ;
44926: LD_ADDR_EXP 41
44930: PUSH
44931: LD_INT 1
44933: ST_TO_ADDR
// if p3 = 12 then
44934: LD_VAR 0 3
44938: PUSH
44939: LD_INT 12
44941: EQUAL
44942: IFFALSE 44952
// sExp := true ;
44944: LD_ADDR_EXP 42
44948: PUSH
44949: LD_INT 1
44951: ST_TO_ADDR
// if p3 = 13 then
44952: LD_VAR 0 3
44956: PUSH
44957: LD_INT 13
44959: EQUAL
44960: IFFALSE 44970
// sDepot := true ;
44962: LD_ADDR_EXP 43
44966: PUSH
44967: LD_INT 1
44969: ST_TO_ADDR
// if p3 = 14 then
44970: LD_VAR 0 3
44974: PUSH
44975: LD_INT 14
44977: EQUAL
44978: IFFALSE 44988
// sFlag := true ;
44980: LD_ADDR_EXP 44
44984: PUSH
44985: LD_INT 1
44987: ST_TO_ADDR
// if p3 = 15 then
44988: LD_VAR 0 3
44992: PUSH
44993: LD_INT 15
44995: EQUAL
44996: IFFALSE 45006
// sKamikadze := true ;
44998: LD_ADDR_EXP 52
45002: PUSH
45003: LD_INT 1
45005: ST_TO_ADDR
// if p3 = 16 then
45006: LD_VAR 0 3
45010: PUSH
45011: LD_INT 16
45013: EQUAL
45014: IFFALSE 45024
// sTroll := true ;
45016: LD_ADDR_EXP 53
45020: PUSH
45021: LD_INT 1
45023: ST_TO_ADDR
// if p3 = 17 then
45024: LD_VAR 0 3
45028: PUSH
45029: LD_INT 17
45031: EQUAL
45032: IFFALSE 45042
// sSlow := true ;
45034: LD_ADDR_EXP 54
45038: PUSH
45039: LD_INT 1
45041: ST_TO_ADDR
// if p3 = 18 then
45042: LD_VAR 0 3
45046: PUSH
45047: LD_INT 18
45049: EQUAL
45050: IFFALSE 45060
// sLack := true ;
45052: LD_ADDR_EXP 55
45056: PUSH
45057: LD_INT 1
45059: ST_TO_ADDR
// if p3 = 19 then
45060: LD_VAR 0 3
45064: PUSH
45065: LD_INT 19
45067: EQUAL
45068: IFFALSE 45078
// sTank := true ;
45070: LD_ADDR_EXP 57
45074: PUSH
45075: LD_INT 1
45077: ST_TO_ADDR
// if p3 = 20 then
45078: LD_VAR 0 3
45082: PUSH
45083: LD_INT 20
45085: EQUAL
45086: IFFALSE 45096
// sRemote := true ;
45088: LD_ADDR_EXP 58
45092: PUSH
45093: LD_INT 1
45095: ST_TO_ADDR
// if p3 = 21 then
45096: LD_VAR 0 3
45100: PUSH
45101: LD_INT 21
45103: EQUAL
45104: IFFALSE 45114
// sPowell := true ;
45106: LD_ADDR_EXP 59
45110: PUSH
45111: LD_INT 1
45113: ST_TO_ADDR
// if p3 = 22 then
45114: LD_VAR 0 3
45118: PUSH
45119: LD_INT 22
45121: EQUAL
45122: IFFALSE 45132
// sTeleport := true ;
45124: LD_ADDR_EXP 62
45128: PUSH
45129: LD_INT 1
45131: ST_TO_ADDR
// if p3 = 23 then
45132: LD_VAR 0 3
45136: PUSH
45137: LD_INT 23
45139: EQUAL
45140: IFFALSE 45150
// sOilTower := true ;
45142: LD_ADDR_EXP 64
45146: PUSH
45147: LD_INT 1
45149: ST_TO_ADDR
// if p3 = 24 then
45150: LD_VAR 0 3
45154: PUSH
45155: LD_INT 24
45157: EQUAL
45158: IFFALSE 45168
// sShovel := true ;
45160: LD_ADDR_EXP 65
45164: PUSH
45165: LD_INT 1
45167: ST_TO_ADDR
// if p3 = 25 then
45168: LD_VAR 0 3
45172: PUSH
45173: LD_INT 25
45175: EQUAL
45176: IFFALSE 45186
// sSheik := true ;
45178: LD_ADDR_EXP 66
45182: PUSH
45183: LD_INT 1
45185: ST_TO_ADDR
// if p3 = 26 then
45186: LD_VAR 0 3
45190: PUSH
45191: LD_INT 26
45193: EQUAL
45194: IFFALSE 45204
// sEarthquake := true ;
45196: LD_ADDR_EXP 68
45200: PUSH
45201: LD_INT 1
45203: ST_TO_ADDR
// if p3 = 27 then
45204: LD_VAR 0 3
45208: PUSH
45209: LD_INT 27
45211: EQUAL
45212: IFFALSE 45222
// sAI := true ;
45214: LD_ADDR_EXP 69
45218: PUSH
45219: LD_INT 1
45221: ST_TO_ADDR
// if p3 = 28 then
45222: LD_VAR 0 3
45226: PUSH
45227: LD_INT 28
45229: EQUAL
45230: IFFALSE 45240
// sCargo := true ;
45232: LD_ADDR_EXP 72
45236: PUSH
45237: LD_INT 1
45239: ST_TO_ADDR
// if p3 = 29 then
45240: LD_VAR 0 3
45244: PUSH
45245: LD_INT 29
45247: EQUAL
45248: IFFALSE 45258
// sDLaser := true ;
45250: LD_ADDR_EXP 73
45254: PUSH
45255: LD_INT 1
45257: ST_TO_ADDR
// if p3 = 30 then
45258: LD_VAR 0 3
45262: PUSH
45263: LD_INT 30
45265: EQUAL
45266: IFFALSE 45276
// sExchange := true ;
45268: LD_ADDR_EXP 74
45272: PUSH
45273: LD_INT 1
45275: ST_TO_ADDR
// if p3 = 31 then
45276: LD_VAR 0 3
45280: PUSH
45281: LD_INT 31
45283: EQUAL
45284: IFFALSE 45294
// sFac := true ;
45286: LD_ADDR_EXP 75
45290: PUSH
45291: LD_INT 1
45293: ST_TO_ADDR
// if p3 = 32 then
45294: LD_VAR 0 3
45298: PUSH
45299: LD_INT 32
45301: EQUAL
45302: IFFALSE 45312
// sPower := true ;
45304: LD_ADDR_EXP 76
45308: PUSH
45309: LD_INT 1
45311: ST_TO_ADDR
// if p3 = 33 then
45312: LD_VAR 0 3
45316: PUSH
45317: LD_INT 33
45319: EQUAL
45320: IFFALSE 45330
// sRandom := true ;
45322: LD_ADDR_EXP 77
45326: PUSH
45327: LD_INT 1
45329: ST_TO_ADDR
// if p3 = 34 then
45330: LD_VAR 0 3
45334: PUSH
45335: LD_INT 34
45337: EQUAL
45338: IFFALSE 45348
// sShield := true ;
45340: LD_ADDR_EXP 78
45344: PUSH
45345: LD_INT 1
45347: ST_TO_ADDR
// if p3 = 35 then
45348: LD_VAR 0 3
45352: PUSH
45353: LD_INT 35
45355: EQUAL
45356: IFFALSE 45366
// sTime := true ;
45358: LD_ADDR_EXP 79
45362: PUSH
45363: LD_INT 1
45365: ST_TO_ADDR
// if p3 = 36 then
45366: LD_VAR 0 3
45370: PUSH
45371: LD_INT 36
45373: EQUAL
45374: IFFALSE 45384
// sTools := true ;
45376: LD_ADDR_EXP 80
45380: PUSH
45381: LD_INT 1
45383: ST_TO_ADDR
// if p3 = 101 then
45384: LD_VAR 0 3
45388: PUSH
45389: LD_INT 101
45391: EQUAL
45392: IFFALSE 45402
// sSold := true ;
45394: LD_ADDR_EXP 45
45398: PUSH
45399: LD_INT 1
45401: ST_TO_ADDR
// if p3 = 102 then
45402: LD_VAR 0 3
45406: PUSH
45407: LD_INT 102
45409: EQUAL
45410: IFFALSE 45420
// sDiff := true ;
45412: LD_ADDR_EXP 46
45416: PUSH
45417: LD_INT 1
45419: ST_TO_ADDR
// if p3 = 103 then
45420: LD_VAR 0 3
45424: PUSH
45425: LD_INT 103
45427: EQUAL
45428: IFFALSE 45438
// sFog := true ;
45430: LD_ADDR_EXP 49
45434: PUSH
45435: LD_INT 1
45437: ST_TO_ADDR
// if p3 = 104 then
45438: LD_VAR 0 3
45442: PUSH
45443: LD_INT 104
45445: EQUAL
45446: IFFALSE 45456
// sReset := true ;
45448: LD_ADDR_EXP 50
45452: PUSH
45453: LD_INT 1
45455: ST_TO_ADDR
// if p3 = 105 then
45456: LD_VAR 0 3
45460: PUSH
45461: LD_INT 105
45463: EQUAL
45464: IFFALSE 45474
// sSun := true ;
45466: LD_ADDR_EXP 51
45470: PUSH
45471: LD_INT 1
45473: ST_TO_ADDR
// if p3 = 106 then
45474: LD_VAR 0 3
45478: PUSH
45479: LD_INT 106
45481: EQUAL
45482: IFFALSE 45492
// sTiger := true ;
45484: LD_ADDR_EXP 47
45488: PUSH
45489: LD_INT 1
45491: ST_TO_ADDR
// if p3 = 107 then
45492: LD_VAR 0 3
45496: PUSH
45497: LD_INT 107
45499: EQUAL
45500: IFFALSE 45510
// sBomb := true ;
45502: LD_ADDR_EXP 48
45506: PUSH
45507: LD_INT 1
45509: ST_TO_ADDR
// if p3 = 108 then
45510: LD_VAR 0 3
45514: PUSH
45515: LD_INT 108
45517: EQUAL
45518: IFFALSE 45528
// sWound := true ;
45520: LD_ADDR_EXP 56
45524: PUSH
45525: LD_INT 1
45527: ST_TO_ADDR
// if p3 = 109 then
45528: LD_VAR 0 3
45532: PUSH
45533: LD_INT 109
45535: EQUAL
45536: IFFALSE 45546
// sBetray := true ;
45538: LD_ADDR_EXP 60
45542: PUSH
45543: LD_INT 1
45545: ST_TO_ADDR
// if p3 = 110 then
45546: LD_VAR 0 3
45550: PUSH
45551: LD_INT 110
45553: EQUAL
45554: IFFALSE 45564
// sContamin := true ;
45556: LD_ADDR_EXP 61
45560: PUSH
45561: LD_INT 1
45563: ST_TO_ADDR
// if p3 = 111 then
45564: LD_VAR 0 3
45568: PUSH
45569: LD_INT 111
45571: EQUAL
45572: IFFALSE 45582
// sOil := true ;
45574: LD_ADDR_EXP 63
45578: PUSH
45579: LD_INT 1
45581: ST_TO_ADDR
// if p3 = 112 then
45582: LD_VAR 0 3
45586: PUSH
45587: LD_INT 112
45589: EQUAL
45590: IFFALSE 45600
// sStu := true ;
45592: LD_ADDR_EXP 67
45596: PUSH
45597: LD_INT 1
45599: ST_TO_ADDR
// if p3 = 113 then
45600: LD_VAR 0 3
45604: PUSH
45605: LD_INT 113
45607: EQUAL
45608: IFFALSE 45618
// sBazooka := true ;
45610: LD_ADDR_EXP 70
45614: PUSH
45615: LD_INT 1
45617: ST_TO_ADDR
// if p3 = 114 then
45618: LD_VAR 0 3
45622: PUSH
45623: LD_INT 114
45625: EQUAL
45626: IFFALSE 45636
// sMortar := true ;
45628: LD_ADDR_EXP 71
45632: PUSH
45633: LD_INT 1
45635: ST_TO_ADDR
// if p3 = 115 then
45636: LD_VAR 0 3
45640: PUSH
45641: LD_INT 115
45643: EQUAL
45644: IFFALSE 45654
// sRanger := true ;
45646: LD_ADDR_EXP 81
45650: PUSH
45651: LD_INT 1
45653: ST_TO_ADDR
// if p3 = 116 then
45654: LD_VAR 0 3
45658: PUSH
45659: LD_INT 116
45661: EQUAL
45662: IFFALSE 45672
// sComputer := true ;
45664: LD_ADDR_EXP 82
45668: PUSH
45669: LD_INT 1
45671: ST_TO_ADDR
// if p3 = 117 then
45672: LD_VAR 0 3
45676: PUSH
45677: LD_INT 117
45679: EQUAL
45680: IFFALSE 45690
// s30 := true ;
45682: LD_ADDR_EXP 83
45686: PUSH
45687: LD_INT 1
45689: ST_TO_ADDR
// if p3 = 118 then
45690: LD_VAR 0 3
45694: PUSH
45695: LD_INT 118
45697: EQUAL
45698: IFFALSE 45708
// s60 := true ;
45700: LD_ADDR_EXP 84
45704: PUSH
45705: LD_INT 1
45707: ST_TO_ADDR
// end ; if p2 = hack_mode then
45708: LD_VAR 0 2
45712: PUSH
45713: LD_INT 101
45715: EQUAL
45716: IFFALSE 45844
// begin case p3 of 1 :
45718: LD_VAR 0 3
45722: PUSH
45723: LD_INT 1
45725: DOUBLE
45726: EQUAL
45727: IFTRUE 45731
45729: GO 45738
45731: POP
// hHackUnlimitedResources ; 2 :
45732: CALL 57983 0 0
45736: GO 45844
45738: LD_INT 2
45740: DOUBLE
45741: EQUAL
45742: IFTRUE 45746
45744: GO 45753
45746: POP
// hHackSetLevel10 ; 3 :
45747: CALL 58116 0 0
45751: GO 45844
45753: LD_INT 3
45755: DOUBLE
45756: EQUAL
45757: IFTRUE 45761
45759: GO 45768
45761: POP
// hHackSetLevel10YourUnits ; 4 :
45762: CALL 58201 0 0
45766: GO 45844
45768: LD_INT 4
45770: DOUBLE
45771: EQUAL
45772: IFTRUE 45776
45774: GO 45783
45776: POP
// hHackInvincible ; 5 :
45777: CALL 58649 0 0
45781: GO 45844
45783: LD_INT 5
45785: DOUBLE
45786: EQUAL
45787: IFTRUE 45791
45789: GO 45798
45791: POP
// hHackInvisible ; 6 :
45792: CALL 58760 0 0
45796: GO 45844
45798: LD_INT 6
45800: DOUBLE
45801: EQUAL
45802: IFTRUE 45806
45804: GO 45813
45806: POP
// hHackChangeYourSide ; 7 :
45807: CALL 58817 0 0
45811: GO 45844
45813: LD_INT 7
45815: DOUBLE
45816: EQUAL
45817: IFTRUE 45821
45819: GO 45828
45821: POP
// hHackChangeUnitSide ; 8 :
45822: CALL 58859 0 0
45826: GO 45844
45828: LD_INT 8
45830: DOUBLE
45831: EQUAL
45832: IFTRUE 45836
45834: GO 45843
45836: POP
// hHackFog ; end ;
45837: CALL 58960 0 0
45841: GO 45844
45843: POP
// end ; if p2 = game_save_mode then
45844: LD_VAR 0 2
45848: PUSH
45849: LD_INT 102
45851: EQUAL
45852: IFFALSE 45907
// begin if p3 = 1 then
45854: LD_VAR 0 3
45858: PUSH
45859: LD_INT 1
45861: EQUAL
45862: IFFALSE 45874
// globalGameSaveCounter := p4 ;
45864: LD_ADDR_EXP 27
45868: PUSH
45869: LD_VAR 0 4
45873: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
45874: LD_VAR 0 3
45878: PUSH
45879: LD_INT 2
45881: EQUAL
45882: PUSH
45883: LD_EXP 27
45887: AND
45888: IFFALSE 45907
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
45890: LD_STRING setGameSaveCounter(
45892: PUSH
45893: LD_EXP 27
45897: STR
45898: PUSH
45899: LD_STRING )
45901: STR
45902: PPUSH
45903: CALL_OW 559
// end ; end ;
45907: LD_VAR 0 7
45911: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
45912: LD_INT 0
45914: PPUSH
// streamModeActive := false ;
45915: LD_ADDR_EXP 28
45919: PUSH
45920: LD_INT 0
45922: ST_TO_ADDR
// normalCounter := 36 ;
45923: LD_ADDR_EXP 29
45927: PUSH
45928: LD_INT 36
45930: ST_TO_ADDR
// hardcoreCounter := 18 ;
45931: LD_ADDR_EXP 30
45935: PUSH
45936: LD_INT 18
45938: ST_TO_ADDR
// sRocket := false ;
45939: LD_ADDR_EXP 33
45943: PUSH
45944: LD_INT 0
45946: ST_TO_ADDR
// sSpeed := false ;
45947: LD_ADDR_EXP 32
45951: PUSH
45952: LD_INT 0
45954: ST_TO_ADDR
// sEngine := false ;
45955: LD_ADDR_EXP 34
45959: PUSH
45960: LD_INT 0
45962: ST_TO_ADDR
// sSpec := false ;
45963: LD_ADDR_EXP 31
45967: PUSH
45968: LD_INT 0
45970: ST_TO_ADDR
// sLevel := false ;
45971: LD_ADDR_EXP 35
45975: PUSH
45976: LD_INT 0
45978: ST_TO_ADDR
// sArmoury := false ;
45979: LD_ADDR_EXP 36
45983: PUSH
45984: LD_INT 0
45986: ST_TO_ADDR
// sRadar := false ;
45987: LD_ADDR_EXP 37
45991: PUSH
45992: LD_INT 0
45994: ST_TO_ADDR
// sBunker := false ;
45995: LD_ADDR_EXP 38
45999: PUSH
46000: LD_INT 0
46002: ST_TO_ADDR
// sHack := false ;
46003: LD_ADDR_EXP 39
46007: PUSH
46008: LD_INT 0
46010: ST_TO_ADDR
// sFire := false ;
46011: LD_ADDR_EXP 40
46015: PUSH
46016: LD_INT 0
46018: ST_TO_ADDR
// sRefresh := false ;
46019: LD_ADDR_EXP 41
46023: PUSH
46024: LD_INT 0
46026: ST_TO_ADDR
// sExp := false ;
46027: LD_ADDR_EXP 42
46031: PUSH
46032: LD_INT 0
46034: ST_TO_ADDR
// sDepot := false ;
46035: LD_ADDR_EXP 43
46039: PUSH
46040: LD_INT 0
46042: ST_TO_ADDR
// sFlag := false ;
46043: LD_ADDR_EXP 44
46047: PUSH
46048: LD_INT 0
46050: ST_TO_ADDR
// sKamikadze := false ;
46051: LD_ADDR_EXP 52
46055: PUSH
46056: LD_INT 0
46058: ST_TO_ADDR
// sTroll := false ;
46059: LD_ADDR_EXP 53
46063: PUSH
46064: LD_INT 0
46066: ST_TO_ADDR
// sSlow := false ;
46067: LD_ADDR_EXP 54
46071: PUSH
46072: LD_INT 0
46074: ST_TO_ADDR
// sLack := false ;
46075: LD_ADDR_EXP 55
46079: PUSH
46080: LD_INT 0
46082: ST_TO_ADDR
// sTank := false ;
46083: LD_ADDR_EXP 57
46087: PUSH
46088: LD_INT 0
46090: ST_TO_ADDR
// sRemote := false ;
46091: LD_ADDR_EXP 58
46095: PUSH
46096: LD_INT 0
46098: ST_TO_ADDR
// sPowell := false ;
46099: LD_ADDR_EXP 59
46103: PUSH
46104: LD_INT 0
46106: ST_TO_ADDR
// sTeleport := false ;
46107: LD_ADDR_EXP 62
46111: PUSH
46112: LD_INT 0
46114: ST_TO_ADDR
// sOilTower := false ;
46115: LD_ADDR_EXP 64
46119: PUSH
46120: LD_INT 0
46122: ST_TO_ADDR
// sShovel := false ;
46123: LD_ADDR_EXP 65
46127: PUSH
46128: LD_INT 0
46130: ST_TO_ADDR
// sSheik := false ;
46131: LD_ADDR_EXP 66
46135: PUSH
46136: LD_INT 0
46138: ST_TO_ADDR
// sEarthquake := false ;
46139: LD_ADDR_EXP 68
46143: PUSH
46144: LD_INT 0
46146: ST_TO_ADDR
// sAI := false ;
46147: LD_ADDR_EXP 69
46151: PUSH
46152: LD_INT 0
46154: ST_TO_ADDR
// sCargo := false ;
46155: LD_ADDR_EXP 72
46159: PUSH
46160: LD_INT 0
46162: ST_TO_ADDR
// sDLaser := false ;
46163: LD_ADDR_EXP 73
46167: PUSH
46168: LD_INT 0
46170: ST_TO_ADDR
// sExchange := false ;
46171: LD_ADDR_EXP 74
46175: PUSH
46176: LD_INT 0
46178: ST_TO_ADDR
// sFac := false ;
46179: LD_ADDR_EXP 75
46183: PUSH
46184: LD_INT 0
46186: ST_TO_ADDR
// sPower := false ;
46187: LD_ADDR_EXP 76
46191: PUSH
46192: LD_INT 0
46194: ST_TO_ADDR
// sRandom := false ;
46195: LD_ADDR_EXP 77
46199: PUSH
46200: LD_INT 0
46202: ST_TO_ADDR
// sShield := false ;
46203: LD_ADDR_EXP 78
46207: PUSH
46208: LD_INT 0
46210: ST_TO_ADDR
// sTime := false ;
46211: LD_ADDR_EXP 79
46215: PUSH
46216: LD_INT 0
46218: ST_TO_ADDR
// sTools := false ;
46219: LD_ADDR_EXP 80
46223: PUSH
46224: LD_INT 0
46226: ST_TO_ADDR
// sSold := false ;
46227: LD_ADDR_EXP 45
46231: PUSH
46232: LD_INT 0
46234: ST_TO_ADDR
// sDiff := false ;
46235: LD_ADDR_EXP 46
46239: PUSH
46240: LD_INT 0
46242: ST_TO_ADDR
// sFog := false ;
46243: LD_ADDR_EXP 49
46247: PUSH
46248: LD_INT 0
46250: ST_TO_ADDR
// sReset := false ;
46251: LD_ADDR_EXP 50
46255: PUSH
46256: LD_INT 0
46258: ST_TO_ADDR
// sSun := false ;
46259: LD_ADDR_EXP 51
46263: PUSH
46264: LD_INT 0
46266: ST_TO_ADDR
// sTiger := false ;
46267: LD_ADDR_EXP 47
46271: PUSH
46272: LD_INT 0
46274: ST_TO_ADDR
// sBomb := false ;
46275: LD_ADDR_EXP 48
46279: PUSH
46280: LD_INT 0
46282: ST_TO_ADDR
// sWound := false ;
46283: LD_ADDR_EXP 56
46287: PUSH
46288: LD_INT 0
46290: ST_TO_ADDR
// sBetray := false ;
46291: LD_ADDR_EXP 60
46295: PUSH
46296: LD_INT 0
46298: ST_TO_ADDR
// sContamin := false ;
46299: LD_ADDR_EXP 61
46303: PUSH
46304: LD_INT 0
46306: ST_TO_ADDR
// sOil := false ;
46307: LD_ADDR_EXP 63
46311: PUSH
46312: LD_INT 0
46314: ST_TO_ADDR
// sStu := false ;
46315: LD_ADDR_EXP 67
46319: PUSH
46320: LD_INT 0
46322: ST_TO_ADDR
// sBazooka := false ;
46323: LD_ADDR_EXP 70
46327: PUSH
46328: LD_INT 0
46330: ST_TO_ADDR
// sMortar := false ;
46331: LD_ADDR_EXP 71
46335: PUSH
46336: LD_INT 0
46338: ST_TO_ADDR
// sRanger := false ;
46339: LD_ADDR_EXP 81
46343: PUSH
46344: LD_INT 0
46346: ST_TO_ADDR
// sComputer := false ;
46347: LD_ADDR_EXP 82
46351: PUSH
46352: LD_INT 0
46354: ST_TO_ADDR
// s30 := false ;
46355: LD_ADDR_EXP 83
46359: PUSH
46360: LD_INT 0
46362: ST_TO_ADDR
// s60 := false ;
46363: LD_ADDR_EXP 84
46367: PUSH
46368: LD_INT 0
46370: ST_TO_ADDR
// end ;
46371: LD_VAR 0 1
46375: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
46376: LD_INT 0
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
// result := [ ] ;
46385: LD_ADDR_VAR 0 2
46389: PUSH
46390: EMPTY
46391: ST_TO_ADDR
// if campaign_id = 1 then
46392: LD_OWVAR 69
46396: PUSH
46397: LD_INT 1
46399: EQUAL
46400: IFFALSE 49566
// begin case mission_number of 1 :
46402: LD_OWVAR 70
46406: PUSH
46407: LD_INT 1
46409: DOUBLE
46410: EQUAL
46411: IFTRUE 46415
46413: GO 46491
46415: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
46416: LD_ADDR_VAR 0 2
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 4
46426: PUSH
46427: LD_INT 11
46429: PUSH
46430: LD_INT 12
46432: PUSH
46433: LD_INT 15
46435: PUSH
46436: LD_INT 16
46438: PUSH
46439: LD_INT 22
46441: PUSH
46442: LD_INT 23
46444: PUSH
46445: LD_INT 26
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 101
46461: PUSH
46462: LD_INT 102
46464: PUSH
46465: LD_INT 106
46467: PUSH
46468: LD_INT 116
46470: PUSH
46471: LD_INT 117
46473: PUSH
46474: LD_INT 118
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: ST_TO_ADDR
46489: GO 49564
46491: LD_INT 2
46493: DOUBLE
46494: EQUAL
46495: IFTRUE 46499
46497: GO 46583
46499: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
46500: LD_ADDR_VAR 0 2
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 4
46510: PUSH
46511: LD_INT 11
46513: PUSH
46514: LD_INT 12
46516: PUSH
46517: LD_INT 15
46519: PUSH
46520: LD_INT 16
46522: PUSH
46523: LD_INT 22
46525: PUSH
46526: LD_INT 23
46528: PUSH
46529: LD_INT 26
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 101
46545: PUSH
46546: LD_INT 102
46548: PUSH
46549: LD_INT 105
46551: PUSH
46552: LD_INT 106
46554: PUSH
46555: LD_INT 108
46557: PUSH
46558: LD_INT 116
46560: PUSH
46561: LD_INT 117
46563: PUSH
46564: LD_INT 118
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: ST_TO_ADDR
46581: GO 49564
46583: LD_INT 3
46585: DOUBLE
46586: EQUAL
46587: IFTRUE 46591
46589: GO 46679
46591: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46592: LD_ADDR_VAR 0 2
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: LD_INT 4
46602: PUSH
46603: LD_INT 5
46605: PUSH
46606: LD_INT 11
46608: PUSH
46609: LD_INT 12
46611: PUSH
46612: LD_INT 15
46614: PUSH
46615: LD_INT 16
46617: PUSH
46618: LD_INT 22
46620: PUSH
46621: LD_INT 26
46623: PUSH
46624: LD_INT 36
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 101
46641: PUSH
46642: LD_INT 102
46644: PUSH
46645: LD_INT 105
46647: PUSH
46648: LD_INT 106
46650: PUSH
46651: LD_INT 108
46653: PUSH
46654: LD_INT 116
46656: PUSH
46657: LD_INT 117
46659: PUSH
46660: LD_INT 118
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: ST_TO_ADDR
46677: GO 49564
46679: LD_INT 4
46681: DOUBLE
46682: EQUAL
46683: IFTRUE 46687
46685: GO 46783
46687: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
46688: LD_ADDR_VAR 0 2
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 4
46698: PUSH
46699: LD_INT 5
46701: PUSH
46702: LD_INT 8
46704: PUSH
46705: LD_INT 11
46707: PUSH
46708: LD_INT 12
46710: PUSH
46711: LD_INT 15
46713: PUSH
46714: LD_INT 16
46716: PUSH
46717: LD_INT 22
46719: PUSH
46720: LD_INT 23
46722: PUSH
46723: LD_INT 26
46725: PUSH
46726: LD_INT 36
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 101
46745: PUSH
46746: LD_INT 102
46748: PUSH
46749: LD_INT 105
46751: PUSH
46752: LD_INT 106
46754: PUSH
46755: LD_INT 108
46757: PUSH
46758: LD_INT 116
46760: PUSH
46761: LD_INT 117
46763: PUSH
46764: LD_INT 118
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: ST_TO_ADDR
46781: GO 49564
46783: LD_INT 5
46785: DOUBLE
46786: EQUAL
46787: IFTRUE 46791
46789: GO 46903
46791: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
46792: LD_ADDR_VAR 0 2
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: LD_INT 4
46802: PUSH
46803: LD_INT 5
46805: PUSH
46806: LD_INT 6
46808: PUSH
46809: LD_INT 8
46811: PUSH
46812: LD_INT 11
46814: PUSH
46815: LD_INT 12
46817: PUSH
46818: LD_INT 15
46820: PUSH
46821: LD_INT 16
46823: PUSH
46824: LD_INT 22
46826: PUSH
46827: LD_INT 23
46829: PUSH
46830: LD_INT 25
46832: PUSH
46833: LD_INT 26
46835: PUSH
46836: LD_INT 36
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 101
46857: PUSH
46858: LD_INT 102
46860: PUSH
46861: LD_INT 105
46863: PUSH
46864: LD_INT 106
46866: PUSH
46867: LD_INT 108
46869: PUSH
46870: LD_INT 109
46872: PUSH
46873: LD_INT 112
46875: PUSH
46876: LD_INT 116
46878: PUSH
46879: LD_INT 117
46881: PUSH
46882: LD_INT 118
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: ST_TO_ADDR
46901: GO 49564
46903: LD_INT 6
46905: DOUBLE
46906: EQUAL
46907: IFTRUE 46911
46909: GO 47043
46911: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
46912: LD_ADDR_VAR 0 2
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 4
46922: PUSH
46923: LD_INT 5
46925: PUSH
46926: LD_INT 6
46928: PUSH
46929: LD_INT 8
46931: PUSH
46932: LD_INT 11
46934: PUSH
46935: LD_INT 12
46937: PUSH
46938: LD_INT 15
46940: PUSH
46941: LD_INT 16
46943: PUSH
46944: LD_INT 20
46946: PUSH
46947: LD_INT 21
46949: PUSH
46950: LD_INT 22
46952: PUSH
46953: LD_INT 23
46955: PUSH
46956: LD_INT 25
46958: PUSH
46959: LD_INT 26
46961: PUSH
46962: LD_INT 30
46964: PUSH
46965: LD_INT 31
46967: PUSH
46968: LD_INT 32
46970: PUSH
46971: LD_INT 36
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 101
46997: PUSH
46998: LD_INT 102
47000: PUSH
47001: LD_INT 105
47003: PUSH
47004: LD_INT 106
47006: PUSH
47007: LD_INT 108
47009: PUSH
47010: LD_INT 109
47012: PUSH
47013: LD_INT 112
47015: PUSH
47016: LD_INT 116
47018: PUSH
47019: LD_INT 117
47021: PUSH
47022: LD_INT 118
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: ST_TO_ADDR
47041: GO 49564
47043: LD_INT 7
47045: DOUBLE
47046: EQUAL
47047: IFTRUE 47051
47049: GO 47163
47051: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47052: LD_ADDR_VAR 0 2
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 4
47062: PUSH
47063: LD_INT 5
47065: PUSH
47066: LD_INT 7
47068: PUSH
47069: LD_INT 11
47071: PUSH
47072: LD_INT 12
47074: PUSH
47075: LD_INT 15
47077: PUSH
47078: LD_INT 16
47080: PUSH
47081: LD_INT 20
47083: PUSH
47084: LD_INT 21
47086: PUSH
47087: LD_INT 22
47089: PUSH
47090: LD_INT 23
47092: PUSH
47093: LD_INT 25
47095: PUSH
47096: LD_INT 26
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 101
47117: PUSH
47118: LD_INT 102
47120: PUSH
47121: LD_INT 103
47123: PUSH
47124: LD_INT 105
47126: PUSH
47127: LD_INT 106
47129: PUSH
47130: LD_INT 108
47132: PUSH
47133: LD_INT 112
47135: PUSH
47136: LD_INT 116
47138: PUSH
47139: LD_INT 117
47141: PUSH
47142: LD_INT 118
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: ST_TO_ADDR
47161: GO 49564
47163: LD_INT 8
47165: DOUBLE
47166: EQUAL
47167: IFTRUE 47171
47169: GO 47311
47171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47172: LD_ADDR_VAR 0 2
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 4
47182: PUSH
47183: LD_INT 5
47185: PUSH
47186: LD_INT 6
47188: PUSH
47189: LD_INT 7
47191: PUSH
47192: LD_INT 8
47194: PUSH
47195: LD_INT 11
47197: PUSH
47198: LD_INT 12
47200: PUSH
47201: LD_INT 15
47203: PUSH
47204: LD_INT 16
47206: PUSH
47207: LD_INT 20
47209: PUSH
47210: LD_INT 21
47212: PUSH
47213: LD_INT 22
47215: PUSH
47216: LD_INT 23
47218: PUSH
47219: LD_INT 25
47221: PUSH
47222: LD_INT 26
47224: PUSH
47225: LD_INT 30
47227: PUSH
47228: LD_INT 31
47230: PUSH
47231: LD_INT 32
47233: PUSH
47234: LD_INT 36
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 101
47261: PUSH
47262: LD_INT 102
47264: PUSH
47265: LD_INT 103
47267: PUSH
47268: LD_INT 105
47270: PUSH
47271: LD_INT 106
47273: PUSH
47274: LD_INT 108
47276: PUSH
47277: LD_INT 109
47279: PUSH
47280: LD_INT 112
47282: PUSH
47283: LD_INT 116
47285: PUSH
47286: LD_INT 117
47288: PUSH
47289: LD_INT 118
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: ST_TO_ADDR
47309: GO 49564
47311: LD_INT 9
47313: DOUBLE
47314: EQUAL
47315: IFTRUE 47319
47317: GO 47467
47319: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47320: LD_ADDR_VAR 0 2
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: LD_INT 4
47330: PUSH
47331: LD_INT 5
47333: PUSH
47334: LD_INT 6
47336: PUSH
47337: LD_INT 7
47339: PUSH
47340: LD_INT 8
47342: PUSH
47343: LD_INT 11
47345: PUSH
47346: LD_INT 12
47348: PUSH
47349: LD_INT 15
47351: PUSH
47352: LD_INT 16
47354: PUSH
47355: LD_INT 20
47357: PUSH
47358: LD_INT 21
47360: PUSH
47361: LD_INT 22
47363: PUSH
47364: LD_INT 23
47366: PUSH
47367: LD_INT 25
47369: PUSH
47370: LD_INT 26
47372: PUSH
47373: LD_INT 28
47375: PUSH
47376: LD_INT 30
47378: PUSH
47379: LD_INT 31
47381: PUSH
47382: LD_INT 32
47384: PUSH
47385: LD_INT 36
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 101
47413: PUSH
47414: LD_INT 102
47416: PUSH
47417: LD_INT 103
47419: PUSH
47420: LD_INT 105
47422: PUSH
47423: LD_INT 106
47425: PUSH
47426: LD_INT 108
47428: PUSH
47429: LD_INT 109
47431: PUSH
47432: LD_INT 112
47434: PUSH
47435: LD_INT 114
47437: PUSH
47438: LD_INT 116
47440: PUSH
47441: LD_INT 117
47443: PUSH
47444: LD_INT 118
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: ST_TO_ADDR
47465: GO 49564
47467: LD_INT 10
47469: DOUBLE
47470: EQUAL
47471: IFTRUE 47475
47473: GO 47671
47475: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
47476: LD_ADDR_VAR 0 2
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 4
47486: PUSH
47487: LD_INT 5
47489: PUSH
47490: LD_INT 6
47492: PUSH
47493: LD_INT 7
47495: PUSH
47496: LD_INT 8
47498: PUSH
47499: LD_INT 9
47501: PUSH
47502: LD_INT 10
47504: PUSH
47505: LD_INT 11
47507: PUSH
47508: LD_INT 12
47510: PUSH
47511: LD_INT 13
47513: PUSH
47514: LD_INT 14
47516: PUSH
47517: LD_INT 15
47519: PUSH
47520: LD_INT 16
47522: PUSH
47523: LD_INT 17
47525: PUSH
47526: LD_INT 18
47528: PUSH
47529: LD_INT 19
47531: PUSH
47532: LD_INT 20
47534: PUSH
47535: LD_INT 21
47537: PUSH
47538: LD_INT 22
47540: PUSH
47541: LD_INT 23
47543: PUSH
47544: LD_INT 24
47546: PUSH
47547: LD_INT 25
47549: PUSH
47550: LD_INT 26
47552: PUSH
47553: LD_INT 28
47555: PUSH
47556: LD_INT 30
47558: PUSH
47559: LD_INT 31
47561: PUSH
47562: LD_INT 32
47564: PUSH
47565: LD_INT 36
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 101
47601: PUSH
47602: LD_INT 102
47604: PUSH
47605: LD_INT 103
47607: PUSH
47608: LD_INT 104
47610: PUSH
47611: LD_INT 105
47613: PUSH
47614: LD_INT 106
47616: PUSH
47617: LD_INT 107
47619: PUSH
47620: LD_INT 108
47622: PUSH
47623: LD_INT 109
47625: PUSH
47626: LD_INT 110
47628: PUSH
47629: LD_INT 111
47631: PUSH
47632: LD_INT 112
47634: PUSH
47635: LD_INT 114
47637: PUSH
47638: LD_INT 116
47640: PUSH
47641: LD_INT 117
47643: PUSH
47644: LD_INT 118
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: ST_TO_ADDR
47669: GO 49564
47671: LD_INT 11
47673: DOUBLE
47674: EQUAL
47675: IFTRUE 47679
47677: GO 47883
47679: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
47680: LD_ADDR_VAR 0 2
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 3
47690: PUSH
47691: LD_INT 4
47693: PUSH
47694: LD_INT 5
47696: PUSH
47697: LD_INT 6
47699: PUSH
47700: LD_INT 7
47702: PUSH
47703: LD_INT 8
47705: PUSH
47706: LD_INT 9
47708: PUSH
47709: LD_INT 10
47711: PUSH
47712: LD_INT 11
47714: PUSH
47715: LD_INT 12
47717: PUSH
47718: LD_INT 13
47720: PUSH
47721: LD_INT 14
47723: PUSH
47724: LD_INT 15
47726: PUSH
47727: LD_INT 16
47729: PUSH
47730: LD_INT 17
47732: PUSH
47733: LD_INT 18
47735: PUSH
47736: LD_INT 19
47738: PUSH
47739: LD_INT 20
47741: PUSH
47742: LD_INT 21
47744: PUSH
47745: LD_INT 22
47747: PUSH
47748: LD_INT 23
47750: PUSH
47751: LD_INT 24
47753: PUSH
47754: LD_INT 25
47756: PUSH
47757: LD_INT 26
47759: PUSH
47760: LD_INT 28
47762: PUSH
47763: LD_INT 30
47765: PUSH
47766: LD_INT 31
47768: PUSH
47769: LD_INT 32
47771: PUSH
47772: LD_INT 34
47774: PUSH
47775: LD_INT 36
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 101
47813: PUSH
47814: LD_INT 102
47816: PUSH
47817: LD_INT 103
47819: PUSH
47820: LD_INT 104
47822: PUSH
47823: LD_INT 105
47825: PUSH
47826: LD_INT 106
47828: PUSH
47829: LD_INT 107
47831: PUSH
47832: LD_INT 108
47834: PUSH
47835: LD_INT 109
47837: PUSH
47838: LD_INT 110
47840: PUSH
47841: LD_INT 111
47843: PUSH
47844: LD_INT 112
47846: PUSH
47847: LD_INT 114
47849: PUSH
47850: LD_INT 116
47852: PUSH
47853: LD_INT 117
47855: PUSH
47856: LD_INT 118
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: ST_TO_ADDR
47881: GO 49564
47883: LD_INT 12
47885: DOUBLE
47886: EQUAL
47887: IFTRUE 47891
47889: GO 48111
47891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
47892: LD_ADDR_VAR 0 2
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 3
47905: PUSH
47906: LD_INT 4
47908: PUSH
47909: LD_INT 5
47911: PUSH
47912: LD_INT 6
47914: PUSH
47915: LD_INT 7
47917: PUSH
47918: LD_INT 8
47920: PUSH
47921: LD_INT 9
47923: PUSH
47924: LD_INT 10
47926: PUSH
47927: LD_INT 11
47929: PUSH
47930: LD_INT 12
47932: PUSH
47933: LD_INT 13
47935: PUSH
47936: LD_INT 14
47938: PUSH
47939: LD_INT 15
47941: PUSH
47942: LD_INT 16
47944: PUSH
47945: LD_INT 17
47947: PUSH
47948: LD_INT 18
47950: PUSH
47951: LD_INT 19
47953: PUSH
47954: LD_INT 20
47956: PUSH
47957: LD_INT 21
47959: PUSH
47960: LD_INT 22
47962: PUSH
47963: LD_INT 23
47965: PUSH
47966: LD_INT 24
47968: PUSH
47969: LD_INT 25
47971: PUSH
47972: LD_INT 26
47974: PUSH
47975: LD_INT 27
47977: PUSH
47978: LD_INT 28
47980: PUSH
47981: LD_INT 30
47983: PUSH
47984: LD_INT 31
47986: PUSH
47987: LD_INT 32
47989: PUSH
47990: LD_INT 33
47992: PUSH
47993: LD_INT 34
47995: PUSH
47996: LD_INT 36
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 101
48037: PUSH
48038: LD_INT 102
48040: PUSH
48041: LD_INT 103
48043: PUSH
48044: LD_INT 104
48046: PUSH
48047: LD_INT 105
48049: PUSH
48050: LD_INT 106
48052: PUSH
48053: LD_INT 107
48055: PUSH
48056: LD_INT 108
48058: PUSH
48059: LD_INT 109
48061: PUSH
48062: LD_INT 110
48064: PUSH
48065: LD_INT 111
48067: PUSH
48068: LD_INT 112
48070: PUSH
48071: LD_INT 113
48073: PUSH
48074: LD_INT 114
48076: PUSH
48077: LD_INT 116
48079: PUSH
48080: LD_INT 117
48082: PUSH
48083: LD_INT 118
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: ST_TO_ADDR
48109: GO 49564
48111: LD_INT 13
48113: DOUBLE
48114: EQUAL
48115: IFTRUE 48119
48117: GO 48327
48119: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48120: LD_ADDR_VAR 0 2
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: LD_INT 4
48136: PUSH
48137: LD_INT 5
48139: PUSH
48140: LD_INT 8
48142: PUSH
48143: LD_INT 9
48145: PUSH
48146: LD_INT 10
48148: PUSH
48149: LD_INT 11
48151: PUSH
48152: LD_INT 12
48154: PUSH
48155: LD_INT 14
48157: PUSH
48158: LD_INT 15
48160: PUSH
48161: LD_INT 16
48163: PUSH
48164: LD_INT 17
48166: PUSH
48167: LD_INT 18
48169: PUSH
48170: LD_INT 19
48172: PUSH
48173: LD_INT 20
48175: PUSH
48176: LD_INT 21
48178: PUSH
48179: LD_INT 22
48181: PUSH
48182: LD_INT 23
48184: PUSH
48185: LD_INT 24
48187: PUSH
48188: LD_INT 25
48190: PUSH
48191: LD_INT 26
48193: PUSH
48194: LD_INT 27
48196: PUSH
48197: LD_INT 28
48199: PUSH
48200: LD_INT 30
48202: PUSH
48203: LD_INT 31
48205: PUSH
48206: LD_INT 32
48208: PUSH
48209: LD_INT 33
48211: PUSH
48212: LD_INT 34
48214: PUSH
48215: LD_INT 36
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 101
48253: PUSH
48254: LD_INT 102
48256: PUSH
48257: LD_INT 103
48259: PUSH
48260: LD_INT 104
48262: PUSH
48263: LD_INT 105
48265: PUSH
48266: LD_INT 106
48268: PUSH
48269: LD_INT 107
48271: PUSH
48272: LD_INT 108
48274: PUSH
48275: LD_INT 109
48277: PUSH
48278: LD_INT 110
48280: PUSH
48281: LD_INT 111
48283: PUSH
48284: LD_INT 112
48286: PUSH
48287: LD_INT 113
48289: PUSH
48290: LD_INT 114
48292: PUSH
48293: LD_INT 116
48295: PUSH
48296: LD_INT 117
48298: PUSH
48299: LD_INT 118
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: ST_TO_ADDR
48325: GO 49564
48327: LD_INT 14
48329: DOUBLE
48330: EQUAL
48331: IFTRUE 48335
48333: GO 48559
48335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48336: LD_ADDR_VAR 0 2
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 3
48349: PUSH
48350: LD_INT 4
48352: PUSH
48353: LD_INT 5
48355: PUSH
48356: LD_INT 6
48358: PUSH
48359: LD_INT 7
48361: PUSH
48362: LD_INT 8
48364: PUSH
48365: LD_INT 9
48367: PUSH
48368: LD_INT 10
48370: PUSH
48371: LD_INT 11
48373: PUSH
48374: LD_INT 12
48376: PUSH
48377: LD_INT 13
48379: PUSH
48380: LD_INT 14
48382: PUSH
48383: LD_INT 15
48385: PUSH
48386: LD_INT 16
48388: PUSH
48389: LD_INT 17
48391: PUSH
48392: LD_INT 18
48394: PUSH
48395: LD_INT 19
48397: PUSH
48398: LD_INT 20
48400: PUSH
48401: LD_INT 21
48403: PUSH
48404: LD_INT 22
48406: PUSH
48407: LD_INT 23
48409: PUSH
48410: LD_INT 24
48412: PUSH
48413: LD_INT 25
48415: PUSH
48416: LD_INT 26
48418: PUSH
48419: LD_INT 27
48421: PUSH
48422: LD_INT 28
48424: PUSH
48425: LD_INT 29
48427: PUSH
48428: LD_INT 30
48430: PUSH
48431: LD_INT 31
48433: PUSH
48434: LD_INT 32
48436: PUSH
48437: LD_INT 33
48439: PUSH
48440: LD_INT 34
48442: PUSH
48443: LD_INT 36
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 101
48485: PUSH
48486: LD_INT 102
48488: PUSH
48489: LD_INT 103
48491: PUSH
48492: LD_INT 104
48494: PUSH
48495: LD_INT 105
48497: PUSH
48498: LD_INT 106
48500: PUSH
48501: LD_INT 107
48503: PUSH
48504: LD_INT 108
48506: PUSH
48507: LD_INT 109
48509: PUSH
48510: LD_INT 110
48512: PUSH
48513: LD_INT 111
48515: PUSH
48516: LD_INT 112
48518: PUSH
48519: LD_INT 113
48521: PUSH
48522: LD_INT 114
48524: PUSH
48525: LD_INT 116
48527: PUSH
48528: LD_INT 117
48530: PUSH
48531: LD_INT 118
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: ST_TO_ADDR
48557: GO 49564
48559: LD_INT 15
48561: DOUBLE
48562: EQUAL
48563: IFTRUE 48567
48565: GO 48791
48567: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48568: LD_ADDR_VAR 0 2
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: LD_INT 4
48584: PUSH
48585: LD_INT 5
48587: PUSH
48588: LD_INT 6
48590: PUSH
48591: LD_INT 7
48593: PUSH
48594: LD_INT 8
48596: PUSH
48597: LD_INT 9
48599: PUSH
48600: LD_INT 10
48602: PUSH
48603: LD_INT 11
48605: PUSH
48606: LD_INT 12
48608: PUSH
48609: LD_INT 13
48611: PUSH
48612: LD_INT 14
48614: PUSH
48615: LD_INT 15
48617: PUSH
48618: LD_INT 16
48620: PUSH
48621: LD_INT 17
48623: PUSH
48624: LD_INT 18
48626: PUSH
48627: LD_INT 19
48629: PUSH
48630: LD_INT 20
48632: PUSH
48633: LD_INT 21
48635: PUSH
48636: LD_INT 22
48638: PUSH
48639: LD_INT 23
48641: PUSH
48642: LD_INT 24
48644: PUSH
48645: LD_INT 25
48647: PUSH
48648: LD_INT 26
48650: PUSH
48651: LD_INT 27
48653: PUSH
48654: LD_INT 28
48656: PUSH
48657: LD_INT 29
48659: PUSH
48660: LD_INT 30
48662: PUSH
48663: LD_INT 31
48665: PUSH
48666: LD_INT 32
48668: PUSH
48669: LD_INT 33
48671: PUSH
48672: LD_INT 34
48674: PUSH
48675: LD_INT 36
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 101
48717: PUSH
48718: LD_INT 102
48720: PUSH
48721: LD_INT 103
48723: PUSH
48724: LD_INT 104
48726: PUSH
48727: LD_INT 105
48729: PUSH
48730: LD_INT 106
48732: PUSH
48733: LD_INT 107
48735: PUSH
48736: LD_INT 108
48738: PUSH
48739: LD_INT 109
48741: PUSH
48742: LD_INT 110
48744: PUSH
48745: LD_INT 111
48747: PUSH
48748: LD_INT 112
48750: PUSH
48751: LD_INT 113
48753: PUSH
48754: LD_INT 114
48756: PUSH
48757: LD_INT 116
48759: PUSH
48760: LD_INT 117
48762: PUSH
48763: LD_INT 118
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: ST_TO_ADDR
48789: GO 49564
48791: LD_INT 16
48793: DOUBLE
48794: EQUAL
48795: IFTRUE 48799
48797: GO 48935
48799: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
48800: LD_ADDR_VAR 0 2
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 4
48810: PUSH
48811: LD_INT 5
48813: PUSH
48814: LD_INT 7
48816: PUSH
48817: LD_INT 11
48819: PUSH
48820: LD_INT 12
48822: PUSH
48823: LD_INT 15
48825: PUSH
48826: LD_INT 16
48828: PUSH
48829: LD_INT 20
48831: PUSH
48832: LD_INT 21
48834: PUSH
48835: LD_INT 22
48837: PUSH
48838: LD_INT 23
48840: PUSH
48841: LD_INT 25
48843: PUSH
48844: LD_INT 26
48846: PUSH
48847: LD_INT 30
48849: PUSH
48850: LD_INT 31
48852: PUSH
48853: LD_INT 32
48855: PUSH
48856: LD_INT 33
48858: PUSH
48859: LD_INT 34
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 101
48885: PUSH
48886: LD_INT 102
48888: PUSH
48889: LD_INT 103
48891: PUSH
48892: LD_INT 106
48894: PUSH
48895: LD_INT 108
48897: PUSH
48898: LD_INT 112
48900: PUSH
48901: LD_INT 113
48903: PUSH
48904: LD_INT 114
48906: PUSH
48907: LD_INT 116
48909: PUSH
48910: LD_INT 117
48912: PUSH
48913: LD_INT 118
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: ST_TO_ADDR
48933: GO 49564
48935: LD_INT 17
48937: DOUBLE
48938: EQUAL
48939: IFTRUE 48943
48941: GO 49167
48943: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
48944: LD_ADDR_VAR 0 2
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: LD_INT 4
48960: PUSH
48961: LD_INT 5
48963: PUSH
48964: LD_INT 6
48966: PUSH
48967: LD_INT 7
48969: PUSH
48970: LD_INT 8
48972: PUSH
48973: LD_INT 9
48975: PUSH
48976: LD_INT 10
48978: PUSH
48979: LD_INT 11
48981: PUSH
48982: LD_INT 12
48984: PUSH
48985: LD_INT 13
48987: PUSH
48988: LD_INT 14
48990: PUSH
48991: LD_INT 15
48993: PUSH
48994: LD_INT 16
48996: PUSH
48997: LD_INT 17
48999: PUSH
49000: LD_INT 18
49002: PUSH
49003: LD_INT 19
49005: PUSH
49006: LD_INT 20
49008: PUSH
49009: LD_INT 21
49011: PUSH
49012: LD_INT 22
49014: PUSH
49015: LD_INT 23
49017: PUSH
49018: LD_INT 24
49020: PUSH
49021: LD_INT 25
49023: PUSH
49024: LD_INT 26
49026: PUSH
49027: LD_INT 27
49029: PUSH
49030: LD_INT 28
49032: PUSH
49033: LD_INT 29
49035: PUSH
49036: LD_INT 30
49038: PUSH
49039: LD_INT 31
49041: PUSH
49042: LD_INT 32
49044: PUSH
49045: LD_INT 33
49047: PUSH
49048: LD_INT 34
49050: PUSH
49051: LD_INT 36
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 101
49093: PUSH
49094: LD_INT 102
49096: PUSH
49097: LD_INT 103
49099: PUSH
49100: LD_INT 104
49102: PUSH
49103: LD_INT 105
49105: PUSH
49106: LD_INT 106
49108: PUSH
49109: LD_INT 107
49111: PUSH
49112: LD_INT 108
49114: PUSH
49115: LD_INT 109
49117: PUSH
49118: LD_INT 110
49120: PUSH
49121: LD_INT 111
49123: PUSH
49124: LD_INT 112
49126: PUSH
49127: LD_INT 113
49129: PUSH
49130: LD_INT 114
49132: PUSH
49133: LD_INT 116
49135: PUSH
49136: LD_INT 117
49138: PUSH
49139: LD_INT 118
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: ST_TO_ADDR
49165: GO 49564
49167: LD_INT 18
49169: DOUBLE
49170: EQUAL
49171: IFTRUE 49175
49173: GO 49323
49175: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49176: LD_ADDR_VAR 0 2
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: LD_INT 4
49186: PUSH
49187: LD_INT 5
49189: PUSH
49190: LD_INT 7
49192: PUSH
49193: LD_INT 11
49195: PUSH
49196: LD_INT 12
49198: PUSH
49199: LD_INT 15
49201: PUSH
49202: LD_INT 16
49204: PUSH
49205: LD_INT 20
49207: PUSH
49208: LD_INT 21
49210: PUSH
49211: LD_INT 22
49213: PUSH
49214: LD_INT 23
49216: PUSH
49217: LD_INT 25
49219: PUSH
49220: LD_INT 26
49222: PUSH
49223: LD_INT 30
49225: PUSH
49226: LD_INT 31
49228: PUSH
49229: LD_INT 32
49231: PUSH
49232: LD_INT 33
49234: PUSH
49235: LD_INT 34
49237: PUSH
49238: LD_INT 35
49240: PUSH
49241: LD_INT 36
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 101
49269: PUSH
49270: LD_INT 102
49272: PUSH
49273: LD_INT 103
49275: PUSH
49276: LD_INT 106
49278: PUSH
49279: LD_INT 108
49281: PUSH
49282: LD_INT 112
49284: PUSH
49285: LD_INT 113
49287: PUSH
49288: LD_INT 114
49290: PUSH
49291: LD_INT 115
49293: PUSH
49294: LD_INT 116
49296: PUSH
49297: LD_INT 117
49299: PUSH
49300: LD_INT 118
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: ST_TO_ADDR
49321: GO 49564
49323: LD_INT 19
49325: DOUBLE
49326: EQUAL
49327: IFTRUE 49331
49329: GO 49563
49331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49332: LD_ADDR_VAR 0 2
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: LD_INT 4
49348: PUSH
49349: LD_INT 5
49351: PUSH
49352: LD_INT 6
49354: PUSH
49355: LD_INT 7
49357: PUSH
49358: LD_INT 8
49360: PUSH
49361: LD_INT 9
49363: PUSH
49364: LD_INT 10
49366: PUSH
49367: LD_INT 11
49369: PUSH
49370: LD_INT 12
49372: PUSH
49373: LD_INT 13
49375: PUSH
49376: LD_INT 14
49378: PUSH
49379: LD_INT 15
49381: PUSH
49382: LD_INT 16
49384: PUSH
49385: LD_INT 17
49387: PUSH
49388: LD_INT 18
49390: PUSH
49391: LD_INT 19
49393: PUSH
49394: LD_INT 20
49396: PUSH
49397: LD_INT 21
49399: PUSH
49400: LD_INT 22
49402: PUSH
49403: LD_INT 23
49405: PUSH
49406: LD_INT 24
49408: PUSH
49409: LD_INT 25
49411: PUSH
49412: LD_INT 26
49414: PUSH
49415: LD_INT 27
49417: PUSH
49418: LD_INT 28
49420: PUSH
49421: LD_INT 29
49423: PUSH
49424: LD_INT 30
49426: PUSH
49427: LD_INT 31
49429: PUSH
49430: LD_INT 32
49432: PUSH
49433: LD_INT 33
49435: PUSH
49436: LD_INT 34
49438: PUSH
49439: LD_INT 35
49441: PUSH
49442: LD_INT 36
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 101
49485: PUSH
49486: LD_INT 102
49488: PUSH
49489: LD_INT 103
49491: PUSH
49492: LD_INT 104
49494: PUSH
49495: LD_INT 105
49497: PUSH
49498: LD_INT 106
49500: PUSH
49501: LD_INT 107
49503: PUSH
49504: LD_INT 108
49506: PUSH
49507: LD_INT 109
49509: PUSH
49510: LD_INT 110
49512: PUSH
49513: LD_INT 111
49515: PUSH
49516: LD_INT 112
49518: PUSH
49519: LD_INT 113
49521: PUSH
49522: LD_INT 114
49524: PUSH
49525: LD_INT 115
49527: PUSH
49528: LD_INT 116
49530: PUSH
49531: LD_INT 117
49533: PUSH
49534: LD_INT 118
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: ST_TO_ADDR
49561: GO 49564
49563: POP
// end else
49564: GO 49795
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49566: LD_ADDR_VAR 0 2
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: LD_INT 4
49582: PUSH
49583: LD_INT 5
49585: PUSH
49586: LD_INT 6
49588: PUSH
49589: LD_INT 7
49591: PUSH
49592: LD_INT 8
49594: PUSH
49595: LD_INT 9
49597: PUSH
49598: LD_INT 10
49600: PUSH
49601: LD_INT 11
49603: PUSH
49604: LD_INT 12
49606: PUSH
49607: LD_INT 13
49609: PUSH
49610: LD_INT 14
49612: PUSH
49613: LD_INT 15
49615: PUSH
49616: LD_INT 16
49618: PUSH
49619: LD_INT 17
49621: PUSH
49622: LD_INT 18
49624: PUSH
49625: LD_INT 19
49627: PUSH
49628: LD_INT 20
49630: PUSH
49631: LD_INT 21
49633: PUSH
49634: LD_INT 22
49636: PUSH
49637: LD_INT 23
49639: PUSH
49640: LD_INT 24
49642: PUSH
49643: LD_INT 25
49645: PUSH
49646: LD_INT 26
49648: PUSH
49649: LD_INT 27
49651: PUSH
49652: LD_INT 28
49654: PUSH
49655: LD_INT 29
49657: PUSH
49658: LD_INT 30
49660: PUSH
49661: LD_INT 31
49663: PUSH
49664: LD_INT 32
49666: PUSH
49667: LD_INT 33
49669: PUSH
49670: LD_INT 34
49672: PUSH
49673: LD_INT 35
49675: PUSH
49676: LD_INT 36
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 101
49719: PUSH
49720: LD_INT 102
49722: PUSH
49723: LD_INT 103
49725: PUSH
49726: LD_INT 104
49728: PUSH
49729: LD_INT 105
49731: PUSH
49732: LD_INT 106
49734: PUSH
49735: LD_INT 107
49737: PUSH
49738: LD_INT 108
49740: PUSH
49741: LD_INT 109
49743: PUSH
49744: LD_INT 110
49746: PUSH
49747: LD_INT 111
49749: PUSH
49750: LD_INT 112
49752: PUSH
49753: LD_INT 113
49755: PUSH
49756: LD_INT 114
49758: PUSH
49759: LD_INT 115
49761: PUSH
49762: LD_INT 116
49764: PUSH
49765: LD_INT 117
49767: PUSH
49768: LD_INT 118
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: ST_TO_ADDR
// if result then
49795: LD_VAR 0 2
49799: IFFALSE 50585
// begin normal :=  ;
49801: LD_ADDR_VAR 0 5
49805: PUSH
49806: LD_STRING 
49808: ST_TO_ADDR
// hardcore :=  ;
49809: LD_ADDR_VAR 0 6
49813: PUSH
49814: LD_STRING 
49816: ST_TO_ADDR
// active :=  ;
49817: LD_ADDR_VAR 0 7
49821: PUSH
49822: LD_STRING 
49824: ST_TO_ADDR
// for i = 1 to normalCounter do
49825: LD_ADDR_VAR 0 8
49829: PUSH
49830: DOUBLE
49831: LD_INT 1
49833: DEC
49834: ST_TO_ADDR
49835: LD_EXP 29
49839: PUSH
49840: FOR_TO
49841: IFFALSE 49942
// begin tmp := 0 ;
49843: LD_ADDR_VAR 0 3
49847: PUSH
49848: LD_STRING 0
49850: ST_TO_ADDR
// if result [ 1 ] then
49851: LD_VAR 0 2
49855: PUSH
49856: LD_INT 1
49858: ARRAY
49859: IFFALSE 49924
// if result [ 1 ] [ 1 ] = i then
49861: LD_VAR 0 2
49865: PUSH
49866: LD_INT 1
49868: ARRAY
49869: PUSH
49870: LD_INT 1
49872: ARRAY
49873: PUSH
49874: LD_VAR 0 8
49878: EQUAL
49879: IFFALSE 49924
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49881: LD_ADDR_VAR 0 2
49885: PUSH
49886: LD_VAR 0 2
49890: PPUSH
49891: LD_INT 1
49893: PPUSH
49894: LD_VAR 0 2
49898: PUSH
49899: LD_INT 1
49901: ARRAY
49902: PPUSH
49903: LD_INT 1
49905: PPUSH
49906: CALL_OW 3
49910: PPUSH
49911: CALL_OW 1
49915: ST_TO_ADDR
// tmp := 1 ;
49916: LD_ADDR_VAR 0 3
49920: PUSH
49921: LD_STRING 1
49923: ST_TO_ADDR
// end ; normal := normal & tmp ;
49924: LD_ADDR_VAR 0 5
49928: PUSH
49929: LD_VAR 0 5
49933: PUSH
49934: LD_VAR 0 3
49938: STR
49939: ST_TO_ADDR
// end ;
49940: GO 49840
49942: POP
49943: POP
// for i = 1 to hardcoreCounter do
49944: LD_ADDR_VAR 0 8
49948: PUSH
49949: DOUBLE
49950: LD_INT 1
49952: DEC
49953: ST_TO_ADDR
49954: LD_EXP 30
49958: PUSH
49959: FOR_TO
49960: IFFALSE 50065
// begin tmp := 0 ;
49962: LD_ADDR_VAR 0 3
49966: PUSH
49967: LD_STRING 0
49969: ST_TO_ADDR
// if result [ 2 ] then
49970: LD_VAR 0 2
49974: PUSH
49975: LD_INT 2
49977: ARRAY
49978: IFFALSE 50047
// if result [ 2 ] [ 1 ] = 100 + i then
49980: LD_VAR 0 2
49984: PUSH
49985: LD_INT 2
49987: ARRAY
49988: PUSH
49989: LD_INT 1
49991: ARRAY
49992: PUSH
49993: LD_INT 100
49995: PUSH
49996: LD_VAR 0 8
50000: PLUS
50001: EQUAL
50002: IFFALSE 50047
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50004: LD_ADDR_VAR 0 2
50008: PUSH
50009: LD_VAR 0 2
50013: PPUSH
50014: LD_INT 2
50016: PPUSH
50017: LD_VAR 0 2
50021: PUSH
50022: LD_INT 2
50024: ARRAY
50025: PPUSH
50026: LD_INT 1
50028: PPUSH
50029: CALL_OW 3
50033: PPUSH
50034: CALL_OW 1
50038: ST_TO_ADDR
// tmp := 1 ;
50039: LD_ADDR_VAR 0 3
50043: PUSH
50044: LD_STRING 1
50046: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50047: LD_ADDR_VAR 0 6
50051: PUSH
50052: LD_VAR 0 6
50056: PUSH
50057: LD_VAR 0 3
50061: STR
50062: ST_TO_ADDR
// end ;
50063: GO 49959
50065: POP
50066: POP
// if isGameLoad then
50067: LD_VAR 0 1
50071: IFFALSE 50546
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50073: LD_ADDR_VAR 0 4
50077: PUSH
50078: LD_EXP 33
50082: PUSH
50083: LD_EXP 32
50087: PUSH
50088: LD_EXP 34
50092: PUSH
50093: LD_EXP 31
50097: PUSH
50098: LD_EXP 35
50102: PUSH
50103: LD_EXP 36
50107: PUSH
50108: LD_EXP 37
50112: PUSH
50113: LD_EXP 38
50117: PUSH
50118: LD_EXP 39
50122: PUSH
50123: LD_EXP 40
50127: PUSH
50128: LD_EXP 41
50132: PUSH
50133: LD_EXP 42
50137: PUSH
50138: LD_EXP 43
50142: PUSH
50143: LD_EXP 44
50147: PUSH
50148: LD_EXP 52
50152: PUSH
50153: LD_EXP 53
50157: PUSH
50158: LD_EXP 54
50162: PUSH
50163: LD_EXP 55
50167: PUSH
50168: LD_EXP 57
50172: PUSH
50173: LD_EXP 58
50177: PUSH
50178: LD_EXP 59
50182: PUSH
50183: LD_EXP 62
50187: PUSH
50188: LD_EXP 64
50192: PUSH
50193: LD_EXP 65
50197: PUSH
50198: LD_EXP 66
50202: PUSH
50203: LD_EXP 68
50207: PUSH
50208: LD_EXP 69
50212: PUSH
50213: LD_EXP 72
50217: PUSH
50218: LD_EXP 73
50222: PUSH
50223: LD_EXP 74
50227: PUSH
50228: LD_EXP 75
50232: PUSH
50233: LD_EXP 76
50237: PUSH
50238: LD_EXP 77
50242: PUSH
50243: LD_EXP 78
50247: PUSH
50248: LD_EXP 79
50252: PUSH
50253: LD_EXP 80
50257: PUSH
50258: LD_EXP 45
50262: PUSH
50263: LD_EXP 46
50267: PUSH
50268: LD_EXP 49
50272: PUSH
50273: LD_EXP 50
50277: PUSH
50278: LD_EXP 51
50282: PUSH
50283: LD_EXP 47
50287: PUSH
50288: LD_EXP 48
50292: PUSH
50293: LD_EXP 56
50297: PUSH
50298: LD_EXP 60
50302: PUSH
50303: LD_EXP 61
50307: PUSH
50308: LD_EXP 63
50312: PUSH
50313: LD_EXP 67
50317: PUSH
50318: LD_EXP 70
50322: PUSH
50323: LD_EXP 71
50327: PUSH
50328: LD_EXP 81
50332: PUSH
50333: LD_EXP 82
50337: PUSH
50338: LD_EXP 83
50342: PUSH
50343: LD_EXP 84
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// tmp :=  ;
50404: LD_ADDR_VAR 0 3
50408: PUSH
50409: LD_STRING 
50411: ST_TO_ADDR
// for i = 1 to normalCounter do
50412: LD_ADDR_VAR 0 8
50416: PUSH
50417: DOUBLE
50418: LD_INT 1
50420: DEC
50421: ST_TO_ADDR
50422: LD_EXP 29
50426: PUSH
50427: FOR_TO
50428: IFFALSE 50464
// begin if flags [ i ] then
50430: LD_VAR 0 4
50434: PUSH
50435: LD_VAR 0 8
50439: ARRAY
50440: IFFALSE 50462
// tmp := tmp & i & ; ;
50442: LD_ADDR_VAR 0 3
50446: PUSH
50447: LD_VAR 0 3
50451: PUSH
50452: LD_VAR 0 8
50456: STR
50457: PUSH
50458: LD_STRING ;
50460: STR
50461: ST_TO_ADDR
// end ;
50462: GO 50427
50464: POP
50465: POP
// for i = 1 to hardcoreCounter do
50466: LD_ADDR_VAR 0 8
50470: PUSH
50471: DOUBLE
50472: LD_INT 1
50474: DEC
50475: ST_TO_ADDR
50476: LD_EXP 30
50480: PUSH
50481: FOR_TO
50482: IFFALSE 50528
// begin if flags [ normalCounter + i ] then
50484: LD_VAR 0 4
50488: PUSH
50489: LD_EXP 29
50493: PUSH
50494: LD_VAR 0 8
50498: PLUS
50499: ARRAY
50500: IFFALSE 50526
// tmp := tmp & ( 100 + i ) & ; ;
50502: LD_ADDR_VAR 0 3
50506: PUSH
50507: LD_VAR 0 3
50511: PUSH
50512: LD_INT 100
50514: PUSH
50515: LD_VAR 0 8
50519: PLUS
50520: STR
50521: PUSH
50522: LD_STRING ;
50524: STR
50525: ST_TO_ADDR
// end ;
50526: GO 50481
50528: POP
50529: POP
// if tmp then
50530: LD_VAR 0 3
50534: IFFALSE 50546
// active := tmp ;
50536: LD_ADDR_VAR 0 7
50540: PUSH
50541: LD_VAR 0 3
50545: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
50546: LD_STRING getStreamItemsFromMission("
50548: PUSH
50549: LD_VAR 0 5
50553: STR
50554: PUSH
50555: LD_STRING ","
50557: STR
50558: PUSH
50559: LD_VAR 0 6
50563: STR
50564: PUSH
50565: LD_STRING ","
50567: STR
50568: PUSH
50569: LD_VAR 0 7
50573: STR
50574: PUSH
50575: LD_STRING ")
50577: STR
50578: PPUSH
50579: CALL_OW 559
// end else
50583: GO 50592
// ToLua ( getStreamItemsFromMission("","","") ) ;
50585: LD_STRING getStreamItemsFromMission("","","")
50587: PPUSH
50588: CALL_OW 559
// end ;
50592: LD_VAR 0 2
50596: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50597: LD_EXP 28
50601: PUSH
50602: LD_EXP 33
50606: AND
50607: IFFALSE 50731
50609: GO 50611
50611: DISABLE
50612: LD_INT 0
50614: PPUSH
50615: PPUSH
// begin enable ;
50616: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
50617: LD_ADDR_VAR 0 2
50621: PUSH
50622: LD_INT 22
50624: PUSH
50625: LD_OWVAR 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 34
50639: PUSH
50640: LD_INT 7
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 34
50649: PUSH
50650: LD_INT 45
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 34
50659: PUSH
50660: LD_INT 28
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 34
50669: PUSH
50670: LD_INT 47
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PPUSH
50688: CALL_OW 69
50692: ST_TO_ADDR
// if not tmp then
50693: LD_VAR 0 2
50697: NOT
50698: IFFALSE 50702
// exit ;
50700: GO 50731
// for i in tmp do
50702: LD_ADDR_VAR 0 1
50706: PUSH
50707: LD_VAR 0 2
50711: PUSH
50712: FOR_IN
50713: IFFALSE 50729
// begin SetLives ( i , 0 ) ;
50715: LD_VAR 0 1
50719: PPUSH
50720: LD_INT 0
50722: PPUSH
50723: CALL_OW 234
// end ;
50727: GO 50712
50729: POP
50730: POP
// end ;
50731: PPOPN 2
50733: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
50734: LD_EXP 28
50738: PUSH
50739: LD_EXP 34
50743: AND
50744: IFFALSE 50828
50746: GO 50748
50748: DISABLE
50749: LD_INT 0
50751: PPUSH
50752: PPUSH
// begin enable ;
50753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
50754: LD_ADDR_VAR 0 2
50758: PUSH
50759: LD_INT 22
50761: PUSH
50762: LD_OWVAR 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 32
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PPUSH
50785: CALL_OW 69
50789: ST_TO_ADDR
// if not tmp then
50790: LD_VAR 0 2
50794: NOT
50795: IFFALSE 50799
// exit ;
50797: GO 50828
// for i in tmp do
50799: LD_ADDR_VAR 0 1
50803: PUSH
50804: LD_VAR 0 2
50808: PUSH
50809: FOR_IN
50810: IFFALSE 50826
// begin SetLives ( i , 0 ) ;
50812: LD_VAR 0 1
50816: PPUSH
50817: LD_INT 0
50819: PPUSH
50820: CALL_OW 234
// end ;
50824: GO 50809
50826: POP
50827: POP
// end ;
50828: PPOPN 2
50830: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
50831: LD_EXP 28
50835: PUSH
50836: LD_EXP 31
50840: AND
50841: IFFALSE 50934
50843: GO 50845
50845: DISABLE
50846: LD_INT 0
50848: PPUSH
// begin enable ;
50849: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
50850: LD_ADDR_VAR 0 1
50854: PUSH
50855: LD_INT 22
50857: PUSH
50858: LD_OWVAR 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 25
50872: PUSH
50873: LD_INT 5
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 25
50882: PUSH
50883: LD_INT 9
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 25
50892: PUSH
50893: LD_INT 8
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PPUSH
50910: CALL_OW 69
50914: PUSH
50915: FOR_IN
50916: IFFALSE 50932
// begin SetClass ( i , 1 ) ;
50918: LD_VAR 0 1
50922: PPUSH
50923: LD_INT 1
50925: PPUSH
50926: CALL_OW 336
// end ;
50930: GO 50915
50932: POP
50933: POP
// end ;
50934: PPOPN 1
50936: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
50937: LD_EXP 28
50941: PUSH
50942: LD_EXP 32
50946: AND
50947: PUSH
50948: LD_OWVAR 65
50952: PUSH
50953: LD_INT 7
50955: LESS
50956: AND
50957: IFFALSE 50971
50959: GO 50961
50961: DISABLE
// begin enable ;
50962: ENABLE
// game_speed := 7 ;
50963: LD_ADDR_OWVAR 65
50967: PUSH
50968: LD_INT 7
50970: ST_TO_ADDR
// end ;
50971: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
50972: LD_EXP 28
50976: PUSH
50977: LD_EXP 35
50981: AND
50982: IFFALSE 51184
50984: GO 50986
50986: DISABLE
50987: LD_INT 0
50989: PPUSH
50990: PPUSH
50991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
50992: LD_ADDR_VAR 0 3
50996: PUSH
50997: LD_INT 81
50999: PUSH
51000: LD_OWVAR 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 21
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PPUSH
51023: CALL_OW 69
51027: ST_TO_ADDR
// if not tmp then
51028: LD_VAR 0 3
51032: NOT
51033: IFFALSE 51037
// exit ;
51035: GO 51184
// if tmp > 5 then
51037: LD_VAR 0 3
51041: PUSH
51042: LD_INT 5
51044: GREATER
51045: IFFALSE 51057
// k := 5 else
51047: LD_ADDR_VAR 0 2
51051: PUSH
51052: LD_INT 5
51054: ST_TO_ADDR
51055: GO 51067
// k := tmp ;
51057: LD_ADDR_VAR 0 2
51061: PUSH
51062: LD_VAR 0 3
51066: ST_TO_ADDR
// for i := 1 to k do
51067: LD_ADDR_VAR 0 1
51071: PUSH
51072: DOUBLE
51073: LD_INT 1
51075: DEC
51076: ST_TO_ADDR
51077: LD_VAR 0 2
51081: PUSH
51082: FOR_TO
51083: IFFALSE 51182
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51085: LD_VAR 0 3
51089: PUSH
51090: LD_VAR 0 1
51094: ARRAY
51095: PPUSH
51096: LD_VAR 0 1
51100: PUSH
51101: LD_INT 4
51103: MOD
51104: PUSH
51105: LD_INT 1
51107: PLUS
51108: PPUSH
51109: CALL_OW 259
51113: PUSH
51114: LD_INT 10
51116: LESS
51117: IFFALSE 51180
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51119: LD_VAR 0 3
51123: PUSH
51124: LD_VAR 0 1
51128: ARRAY
51129: PPUSH
51130: LD_VAR 0 1
51134: PUSH
51135: LD_INT 4
51137: MOD
51138: PUSH
51139: LD_INT 1
51141: PLUS
51142: PPUSH
51143: LD_VAR 0 3
51147: PUSH
51148: LD_VAR 0 1
51152: ARRAY
51153: PPUSH
51154: LD_VAR 0 1
51158: PUSH
51159: LD_INT 4
51161: MOD
51162: PUSH
51163: LD_INT 1
51165: PLUS
51166: PPUSH
51167: CALL_OW 259
51171: PUSH
51172: LD_INT 1
51174: PLUS
51175: PPUSH
51176: CALL_OW 237
51180: GO 51082
51182: POP
51183: POP
// end ;
51184: PPOPN 3
51186: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51187: LD_EXP 28
51191: PUSH
51192: LD_EXP 36
51196: AND
51197: IFFALSE 51217
51199: GO 51201
51201: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51202: LD_INT 4
51204: PPUSH
51205: LD_OWVAR 2
51209: PPUSH
51210: LD_INT 0
51212: PPUSH
51213: CALL_OW 324
51217: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51218: LD_EXP 28
51222: PUSH
51223: LD_EXP 65
51227: AND
51228: IFFALSE 51248
51230: GO 51232
51232: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51233: LD_INT 19
51235: PPUSH
51236: LD_OWVAR 2
51240: PPUSH
51241: LD_INT 0
51243: PPUSH
51244: CALL_OW 324
51248: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51249: LD_EXP 28
51253: PUSH
51254: LD_EXP 37
51258: AND
51259: IFFALSE 51361
51261: GO 51263
51263: DISABLE
51264: LD_INT 0
51266: PPUSH
51267: PPUSH
// begin enable ;
51268: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51269: LD_ADDR_VAR 0 2
51273: PUSH
51274: LD_INT 22
51276: PUSH
51277: LD_OWVAR 2
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: LD_INT 34
51291: PUSH
51292: LD_INT 11
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 34
51301: PUSH
51302: LD_INT 30
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PPUSH
51318: CALL_OW 69
51322: ST_TO_ADDR
// if not tmp then
51323: LD_VAR 0 2
51327: NOT
51328: IFFALSE 51332
// exit ;
51330: GO 51361
// for i in tmp do
51332: LD_ADDR_VAR 0 1
51336: PUSH
51337: LD_VAR 0 2
51341: PUSH
51342: FOR_IN
51343: IFFALSE 51359
// begin SetLives ( i , 0 ) ;
51345: LD_VAR 0 1
51349: PPUSH
51350: LD_INT 0
51352: PPUSH
51353: CALL_OW 234
// end ;
51357: GO 51342
51359: POP
51360: POP
// end ;
51361: PPOPN 2
51363: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51364: LD_EXP 28
51368: PUSH
51369: LD_EXP 38
51373: AND
51374: IFFALSE 51394
51376: GO 51378
51378: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51379: LD_INT 32
51381: PPUSH
51382: LD_OWVAR 2
51386: PPUSH
51387: LD_INT 0
51389: PPUSH
51390: CALL_OW 324
51394: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51395: LD_EXP 28
51399: PUSH
51400: LD_EXP 39
51404: AND
51405: IFFALSE 51586
51407: GO 51409
51409: DISABLE
51410: LD_INT 0
51412: PPUSH
51413: PPUSH
51414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51415: LD_ADDR_VAR 0 2
51419: PUSH
51420: LD_INT 22
51422: PUSH
51423: LD_OWVAR 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 33
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PPUSH
51446: CALL_OW 69
51450: ST_TO_ADDR
// if not tmp then
51451: LD_VAR 0 2
51455: NOT
51456: IFFALSE 51460
// exit ;
51458: GO 51586
// side := 0 ;
51460: LD_ADDR_VAR 0 3
51464: PUSH
51465: LD_INT 0
51467: ST_TO_ADDR
// for i := 1 to 8 do
51468: LD_ADDR_VAR 0 1
51472: PUSH
51473: DOUBLE
51474: LD_INT 1
51476: DEC
51477: ST_TO_ADDR
51478: LD_INT 8
51480: PUSH
51481: FOR_TO
51482: IFFALSE 51530
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
51484: LD_OWVAR 2
51488: PUSH
51489: LD_VAR 0 1
51493: NONEQUAL
51494: PUSH
51495: LD_OWVAR 2
51499: PPUSH
51500: LD_VAR 0 1
51504: PPUSH
51505: CALL_OW 81
51509: PUSH
51510: LD_INT 2
51512: EQUAL
51513: AND
51514: IFFALSE 51528
// begin side := i ;
51516: LD_ADDR_VAR 0 3
51520: PUSH
51521: LD_VAR 0 1
51525: ST_TO_ADDR
// break ;
51526: GO 51530
// end ;
51528: GO 51481
51530: POP
51531: POP
// if not side then
51532: LD_VAR 0 3
51536: NOT
51537: IFFALSE 51541
// exit ;
51539: GO 51586
// for i := 1 to tmp do
51541: LD_ADDR_VAR 0 1
51545: PUSH
51546: DOUBLE
51547: LD_INT 1
51549: DEC
51550: ST_TO_ADDR
51551: LD_VAR 0 2
51555: PUSH
51556: FOR_TO
51557: IFFALSE 51584
// if Prob ( 60 ) then
51559: LD_INT 60
51561: PPUSH
51562: CALL_OW 13
51566: IFFALSE 51582
// SetSide ( i , side ) ;
51568: LD_VAR 0 1
51572: PPUSH
51573: LD_VAR 0 3
51577: PPUSH
51578: CALL_OW 235
51582: GO 51556
51584: POP
51585: POP
// end ;
51586: PPOPN 3
51588: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51589: LD_EXP 28
51593: PUSH
51594: LD_EXP 41
51598: AND
51599: IFFALSE 51718
51601: GO 51603
51603: DISABLE
51604: LD_INT 0
51606: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51607: LD_ADDR_VAR 0 1
51611: PUSH
51612: LD_INT 22
51614: PUSH
51615: LD_OWVAR 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 21
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: LD_INT 23
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: PPUSH
51656: CALL_OW 69
51660: PUSH
51661: FOR_IN
51662: IFFALSE 51716
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51664: LD_VAR 0 1
51668: PPUSH
51669: CALL_OW 257
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 4
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: IN
51692: IFFALSE 51714
// SetClass ( un , rand ( 1 , 4 ) ) ;
51694: LD_VAR 0 1
51698: PPUSH
51699: LD_INT 1
51701: PPUSH
51702: LD_INT 4
51704: PPUSH
51705: CALL_OW 12
51709: PPUSH
51710: CALL_OW 336
51714: GO 51661
51716: POP
51717: POP
// end ;
51718: PPOPN 1
51720: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
51721: LD_EXP 28
51725: PUSH
51726: LD_EXP 40
51730: AND
51731: IFFALSE 51810
51733: GO 51735
51735: DISABLE
51736: LD_INT 0
51738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51739: LD_ADDR_VAR 0 1
51743: PUSH
51744: LD_INT 22
51746: PUSH
51747: LD_OWVAR 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 21
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PPUSH
51770: CALL_OW 69
51774: ST_TO_ADDR
// if not tmp then
51775: LD_VAR 0 1
51779: NOT
51780: IFFALSE 51784
// exit ;
51782: GO 51810
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
51784: LD_VAR 0 1
51788: PUSH
51789: LD_INT 1
51791: PPUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 12
51801: ARRAY
51802: PPUSH
51803: LD_INT 100
51805: PPUSH
51806: CALL_OW 234
// end ;
51810: PPOPN 1
51812: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
51813: LD_EXP 28
51817: PUSH
51818: LD_EXP 42
51822: AND
51823: IFFALSE 51921
51825: GO 51827
51827: DISABLE
51828: LD_INT 0
51830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51831: LD_ADDR_VAR 0 1
51835: PUSH
51836: LD_INT 22
51838: PUSH
51839: LD_OWVAR 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 21
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PPUSH
51862: CALL_OW 69
51866: ST_TO_ADDR
// if not tmp then
51867: LD_VAR 0 1
51871: NOT
51872: IFFALSE 51876
// exit ;
51874: GO 51921
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
51876: LD_VAR 0 1
51880: PUSH
51881: LD_INT 1
51883: PPUSH
51884: LD_VAR 0 1
51888: PPUSH
51889: CALL_OW 12
51893: ARRAY
51894: PPUSH
51895: LD_INT 1
51897: PPUSH
51898: LD_INT 4
51900: PPUSH
51901: CALL_OW 12
51905: PPUSH
51906: LD_INT 3000
51908: PPUSH
51909: LD_INT 9000
51911: PPUSH
51912: CALL_OW 12
51916: PPUSH
51917: CALL_OW 492
// end ;
51921: PPOPN 1
51923: END
// every 0 0$1 trigger StreamModeActive and sDepot do
51924: LD_EXP 28
51928: PUSH
51929: LD_EXP 43
51933: AND
51934: IFFALSE 51954
51936: GO 51938
51938: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
51939: LD_INT 1
51941: PPUSH
51942: LD_OWVAR 2
51946: PPUSH
51947: LD_INT 0
51949: PPUSH
51950: CALL_OW 324
51954: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
51955: LD_EXP 28
51959: PUSH
51960: LD_EXP 44
51964: AND
51965: IFFALSE 52048
51967: GO 51969
51969: DISABLE
51970: LD_INT 0
51972: PPUSH
51973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51974: LD_ADDR_VAR 0 2
51978: PUSH
51979: LD_INT 22
51981: PUSH
51982: LD_OWVAR 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 21
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PPUSH
52005: CALL_OW 69
52009: ST_TO_ADDR
// if not tmp then
52010: LD_VAR 0 2
52014: NOT
52015: IFFALSE 52019
// exit ;
52017: GO 52048
// for i in tmp do
52019: LD_ADDR_VAR 0 1
52023: PUSH
52024: LD_VAR 0 2
52028: PUSH
52029: FOR_IN
52030: IFFALSE 52046
// SetBLevel ( i , 10 ) ;
52032: LD_VAR 0 1
52036: PPUSH
52037: LD_INT 10
52039: PPUSH
52040: CALL_OW 241
52044: GO 52029
52046: POP
52047: POP
// end ;
52048: PPOPN 2
52050: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52051: LD_EXP 28
52055: PUSH
52056: LD_EXP 45
52060: AND
52061: IFFALSE 52172
52063: GO 52065
52065: DISABLE
52066: LD_INT 0
52068: PPUSH
52069: PPUSH
52070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52071: LD_ADDR_VAR 0 3
52075: PUSH
52076: LD_INT 22
52078: PUSH
52079: LD_OWVAR 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 25
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PPUSH
52102: CALL_OW 69
52106: ST_TO_ADDR
// if not tmp then
52107: LD_VAR 0 3
52111: NOT
52112: IFFALSE 52116
// exit ;
52114: GO 52172
// un := tmp [ rand ( 1 , tmp ) ] ;
52116: LD_ADDR_VAR 0 2
52120: PUSH
52121: LD_VAR 0 3
52125: PUSH
52126: LD_INT 1
52128: PPUSH
52129: LD_VAR 0 3
52133: PPUSH
52134: CALL_OW 12
52138: ARRAY
52139: ST_TO_ADDR
// if Crawls ( un ) then
52140: LD_VAR 0 2
52144: PPUSH
52145: CALL_OW 318
52149: IFFALSE 52160
// ComWalk ( un ) ;
52151: LD_VAR 0 2
52155: PPUSH
52156: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52160: LD_VAR 0 2
52164: PPUSH
52165: LD_INT 5
52167: PPUSH
52168: CALL_OW 336
// end ;
52172: PPOPN 3
52174: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52175: LD_EXP 28
52179: PUSH
52180: LD_EXP 46
52184: AND
52185: PUSH
52186: LD_OWVAR 67
52190: PUSH
52191: LD_INT 4
52193: LESS
52194: AND
52195: IFFALSE 52214
52197: GO 52199
52199: DISABLE
// begin Difficulty := Difficulty + 1 ;
52200: LD_ADDR_OWVAR 67
52204: PUSH
52205: LD_OWVAR 67
52209: PUSH
52210: LD_INT 1
52212: PLUS
52213: ST_TO_ADDR
// end ;
52214: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52215: LD_EXP 28
52219: PUSH
52220: LD_EXP 47
52224: AND
52225: IFFALSE 52328
52227: GO 52229
52229: DISABLE
52230: LD_INT 0
52232: PPUSH
// begin for i := 1 to 5 do
52233: LD_ADDR_VAR 0 1
52237: PUSH
52238: DOUBLE
52239: LD_INT 1
52241: DEC
52242: ST_TO_ADDR
52243: LD_INT 5
52245: PUSH
52246: FOR_TO
52247: IFFALSE 52326
// begin uc_nation := nation_nature ;
52249: LD_ADDR_OWVAR 21
52253: PUSH
52254: LD_INT 0
52256: ST_TO_ADDR
// uc_side := 0 ;
52257: LD_ADDR_OWVAR 20
52261: PUSH
52262: LD_INT 0
52264: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52265: LD_ADDR_OWVAR 29
52269: PUSH
52270: LD_INT 12
52272: PUSH
52273: LD_INT 12
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: ST_TO_ADDR
// hc_agressivity := 20 ;
52280: LD_ADDR_OWVAR 35
52284: PUSH
52285: LD_INT 20
52287: ST_TO_ADDR
// hc_class := class_tiger ;
52288: LD_ADDR_OWVAR 28
52292: PUSH
52293: LD_INT 14
52295: ST_TO_ADDR
// hc_gallery :=  ;
52296: LD_ADDR_OWVAR 33
52300: PUSH
52301: LD_STRING 
52303: ST_TO_ADDR
// hc_name :=  ;
52304: LD_ADDR_OWVAR 26
52308: PUSH
52309: LD_STRING 
52311: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52312: CALL_OW 44
52316: PPUSH
52317: LD_INT 0
52319: PPUSH
52320: CALL_OW 51
// end ;
52324: GO 52246
52326: POP
52327: POP
// end ;
52328: PPOPN 1
52330: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52331: LD_EXP 28
52335: PUSH
52336: LD_EXP 48
52340: AND
52341: IFFALSE 52350
52343: GO 52345
52345: DISABLE
// StreamSibBomb ;
52346: CALL 52351 0 0
52350: END
// export function StreamSibBomb ; var i , x , y ; begin
52351: LD_INT 0
52353: PPUSH
52354: PPUSH
52355: PPUSH
52356: PPUSH
// result := false ;
52357: LD_ADDR_VAR 0 1
52361: PUSH
52362: LD_INT 0
52364: ST_TO_ADDR
// for i := 1 to 16 do
52365: LD_ADDR_VAR 0 2
52369: PUSH
52370: DOUBLE
52371: LD_INT 1
52373: DEC
52374: ST_TO_ADDR
52375: LD_INT 16
52377: PUSH
52378: FOR_TO
52379: IFFALSE 52578
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52381: LD_ADDR_VAR 0 3
52385: PUSH
52386: LD_INT 10
52388: PUSH
52389: LD_INT 20
52391: PUSH
52392: LD_INT 30
52394: PUSH
52395: LD_INT 40
52397: PUSH
52398: LD_INT 50
52400: PUSH
52401: LD_INT 60
52403: PUSH
52404: LD_INT 70
52406: PUSH
52407: LD_INT 80
52409: PUSH
52410: LD_INT 90
52412: PUSH
52413: LD_INT 100
52415: PUSH
52416: LD_INT 110
52418: PUSH
52419: LD_INT 120
52421: PUSH
52422: LD_INT 130
52424: PUSH
52425: LD_INT 140
52427: PUSH
52428: LD_INT 150
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: PPUSH
52451: LD_INT 15
52453: PPUSH
52454: CALL_OW 12
52458: ARRAY
52459: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52460: LD_ADDR_VAR 0 4
52464: PUSH
52465: LD_INT 10
52467: PUSH
52468: LD_INT 20
52470: PUSH
52471: LD_INT 30
52473: PUSH
52474: LD_INT 40
52476: PUSH
52477: LD_INT 50
52479: PUSH
52480: LD_INT 60
52482: PUSH
52483: LD_INT 70
52485: PUSH
52486: LD_INT 80
52488: PUSH
52489: LD_INT 90
52491: PUSH
52492: LD_INT 100
52494: PUSH
52495: LD_INT 110
52497: PUSH
52498: LD_INT 120
52500: PUSH
52501: LD_INT 130
52503: PUSH
52504: LD_INT 140
52506: PUSH
52507: LD_INT 150
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PPUSH
52530: LD_INT 15
52532: PPUSH
52533: CALL_OW 12
52537: ARRAY
52538: ST_TO_ADDR
// if ValidHex ( x , y ) then
52539: LD_VAR 0 3
52543: PPUSH
52544: LD_VAR 0 4
52548: PPUSH
52549: CALL_OW 488
52553: IFFALSE 52576
// begin result := [ x , y ] ;
52555: LD_ADDR_VAR 0 1
52559: PUSH
52560: LD_VAR 0 3
52564: PUSH
52565: LD_VAR 0 4
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// break ;
52574: GO 52578
// end ; end ;
52576: GO 52378
52578: POP
52579: POP
// if result then
52580: LD_VAR 0 1
52584: IFFALSE 52644
// begin ToLua ( playSibBomb() ) ;
52586: LD_STRING playSibBomb()
52588: PPUSH
52589: CALL_OW 559
// wait ( 0 0$14 ) ;
52593: LD_INT 490
52595: PPUSH
52596: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52600: LD_VAR 0 1
52604: PUSH
52605: LD_INT 1
52607: ARRAY
52608: PPUSH
52609: LD_VAR 0 1
52613: PUSH
52614: LD_INT 2
52616: ARRAY
52617: PPUSH
52618: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52622: LD_VAR 0 1
52626: PUSH
52627: LD_INT 1
52629: ARRAY
52630: PPUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_INT 2
52638: ARRAY
52639: PPUSH
52640: CALL_OW 429
// end ; end ;
52644: LD_VAR 0 1
52648: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52649: LD_EXP 28
52653: PUSH
52654: LD_EXP 50
52658: AND
52659: IFFALSE 52671
52661: GO 52663
52663: DISABLE
// YouLost (  ) ;
52664: LD_STRING 
52666: PPUSH
52667: CALL_OW 104
52671: END
// every 0 0$1 trigger StreamModeActive and sFog do
52672: LD_EXP 28
52676: PUSH
52677: LD_EXP 49
52681: AND
52682: IFFALSE 52696
52684: GO 52686
52686: DISABLE
// FogOff ( your_side ) ;
52687: LD_OWVAR 2
52691: PPUSH
52692: CALL_OW 344
52696: END
// every 0 0$1 trigger StreamModeActive and sSun do
52697: LD_EXP 28
52701: PUSH
52702: LD_EXP 51
52706: AND
52707: IFFALSE 52735
52709: GO 52711
52711: DISABLE
// begin solar_recharge_percent := 0 ;
52712: LD_ADDR_OWVAR 79
52716: PUSH
52717: LD_INT 0
52719: ST_TO_ADDR
// wait ( 5 5$00 ) ;
52720: LD_INT 10500
52722: PPUSH
52723: CALL_OW 67
// solar_recharge_percent := 100 ;
52727: LD_ADDR_OWVAR 79
52731: PUSH
52732: LD_INT 100
52734: ST_TO_ADDR
// end ;
52735: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
52736: LD_EXP 28
52740: PUSH
52741: LD_EXP 52
52745: AND
52746: IFFALSE 52985
52748: GO 52750
52750: DISABLE
52751: LD_INT 0
52753: PPUSH
52754: PPUSH
52755: PPUSH
// begin tmp := [ ] ;
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: EMPTY
52762: ST_TO_ADDR
// for i := 1 to 6 do
52763: LD_ADDR_VAR 0 1
52767: PUSH
52768: DOUBLE
52769: LD_INT 1
52771: DEC
52772: ST_TO_ADDR
52773: LD_INT 6
52775: PUSH
52776: FOR_TO
52777: IFFALSE 52882
// begin uc_nation := nation_nature ;
52779: LD_ADDR_OWVAR 21
52783: PUSH
52784: LD_INT 0
52786: ST_TO_ADDR
// uc_side := 0 ;
52787: LD_ADDR_OWVAR 20
52791: PUSH
52792: LD_INT 0
52794: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52795: LD_ADDR_OWVAR 29
52799: PUSH
52800: LD_INT 12
52802: PUSH
52803: LD_INT 12
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: ST_TO_ADDR
// hc_agressivity := 20 ;
52810: LD_ADDR_OWVAR 35
52814: PUSH
52815: LD_INT 20
52817: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
52818: LD_ADDR_OWVAR 28
52822: PUSH
52823: LD_INT 17
52825: ST_TO_ADDR
// hc_gallery :=  ;
52826: LD_ADDR_OWVAR 33
52830: PUSH
52831: LD_STRING 
52833: ST_TO_ADDR
// hc_name :=  ;
52834: LD_ADDR_OWVAR 26
52838: PUSH
52839: LD_STRING 
52841: ST_TO_ADDR
// un := CreateHuman ;
52842: LD_ADDR_VAR 0 2
52846: PUSH
52847: CALL_OW 44
52851: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
52852: LD_VAR 0 2
52856: PPUSH
52857: LD_INT 1
52859: PPUSH
52860: CALL_OW 51
// tmp := tmp ^ un ;
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: LD_VAR 0 3
52873: PUSH
52874: LD_VAR 0 2
52878: ADD
52879: ST_TO_ADDR
// end ;
52880: GO 52776
52882: POP
52883: POP
// repeat wait ( 0 0$1 ) ;
52884: LD_INT 35
52886: PPUSH
52887: CALL_OW 67
// for un in tmp do
52891: LD_ADDR_VAR 0 2
52895: PUSH
52896: LD_VAR 0 3
52900: PUSH
52901: FOR_IN
52902: IFFALSE 52976
// begin if IsDead ( un ) then
52904: LD_VAR 0 2
52908: PPUSH
52909: CALL_OW 301
52913: IFFALSE 52933
// begin tmp := tmp diff un ;
52915: LD_ADDR_VAR 0 3
52919: PUSH
52920: LD_VAR 0 3
52924: PUSH
52925: LD_VAR 0 2
52929: DIFF
52930: ST_TO_ADDR
// continue ;
52931: GO 52901
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
52933: LD_VAR 0 2
52937: PPUSH
52938: LD_INT 3
52940: PUSH
52941: LD_INT 22
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PPUSH
52955: CALL_OW 69
52959: PPUSH
52960: LD_VAR 0 2
52964: PPUSH
52965: CALL_OW 74
52969: PPUSH
52970: CALL_OW 115
// end ;
52974: GO 52901
52976: POP
52977: POP
// until not tmp ;
52978: LD_VAR 0 3
52982: NOT
52983: IFFALSE 52884
// end ;
52985: PPOPN 3
52987: END
// every 0 0$1 trigger StreamModeActive and sTroll do
52988: LD_EXP 28
52992: PUSH
52993: LD_EXP 53
52997: AND
52998: IFFALSE 53052
53000: GO 53002
53002: DISABLE
// begin ToLua ( displayTroll(); ) ;
53003: LD_STRING displayTroll();
53005: PPUSH
53006: CALL_OW 559
// wait ( 3 3$00 ) ;
53010: LD_INT 6300
53012: PPUSH
53013: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53017: LD_STRING hideTroll();
53019: PPUSH
53020: CALL_OW 559
// wait ( 1 1$00 ) ;
53024: LD_INT 2100
53026: PPUSH
53027: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53031: LD_STRING displayTroll();
53033: PPUSH
53034: CALL_OW 559
// wait ( 1 1$00 ) ;
53038: LD_INT 2100
53040: PPUSH
53041: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53045: LD_STRING hideTroll();
53047: PPUSH
53048: CALL_OW 559
// end ;
53052: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53053: LD_EXP 28
53057: PUSH
53058: LD_EXP 54
53062: AND
53063: IFFALSE 53126
53065: GO 53067
53067: DISABLE
53068: LD_INT 0
53070: PPUSH
// begin p := 0 ;
53071: LD_ADDR_VAR 0 1
53075: PUSH
53076: LD_INT 0
53078: ST_TO_ADDR
// repeat game_speed := 1 ;
53079: LD_ADDR_OWVAR 65
53083: PUSH
53084: LD_INT 1
53086: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53087: LD_INT 35
53089: PPUSH
53090: CALL_OW 67
// p := p + 1 ;
53094: LD_ADDR_VAR 0 1
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_INT 1
53106: PLUS
53107: ST_TO_ADDR
// until p >= 60 ;
53108: LD_VAR 0 1
53112: PUSH
53113: LD_INT 60
53115: GREATEREQUAL
53116: IFFALSE 53079
// game_speed := 4 ;
53118: LD_ADDR_OWVAR 65
53122: PUSH
53123: LD_INT 4
53125: ST_TO_ADDR
// end ;
53126: PPOPN 1
53128: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53129: LD_EXP 28
53133: PUSH
53134: LD_EXP 55
53138: AND
53139: IFFALSE 53285
53141: GO 53143
53143: DISABLE
53144: LD_INT 0
53146: PPUSH
53147: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53148: LD_ADDR_VAR 0 1
53152: PUSH
53153: LD_INT 22
53155: PUSH
53156: LD_OWVAR 2
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 30
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 30
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: LIST
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PPUSH
53197: CALL_OW 69
53201: ST_TO_ADDR
// if not depot then
53202: LD_VAR 0 1
53206: NOT
53207: IFFALSE 53211
// exit ;
53209: GO 53285
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53211: LD_ADDR_VAR 0 2
53215: PUSH
53216: LD_VAR 0 1
53220: PUSH
53221: LD_INT 1
53223: PPUSH
53224: LD_VAR 0 1
53228: PPUSH
53229: CALL_OW 12
53233: ARRAY
53234: PPUSH
53235: CALL_OW 274
53239: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53240: LD_VAR 0 2
53244: PPUSH
53245: LD_INT 1
53247: PPUSH
53248: LD_INT 0
53250: PPUSH
53251: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53255: LD_VAR 0 2
53259: PPUSH
53260: LD_INT 2
53262: PPUSH
53263: LD_INT 0
53265: PPUSH
53266: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53270: LD_VAR 0 2
53274: PPUSH
53275: LD_INT 3
53277: PPUSH
53278: LD_INT 0
53280: PPUSH
53281: CALL_OW 277
// end ;
53285: PPOPN 2
53287: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53288: LD_EXP 28
53292: PUSH
53293: LD_EXP 56
53297: AND
53298: IFFALSE 53395
53300: GO 53302
53302: DISABLE
53303: LD_INT 0
53305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53306: LD_ADDR_VAR 0 1
53310: PUSH
53311: LD_INT 22
53313: PUSH
53314: LD_OWVAR 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 21
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: LD_INT 23
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: PPUSH
53355: CALL_OW 69
53359: ST_TO_ADDR
// if not tmp then
53360: LD_VAR 0 1
53364: NOT
53365: IFFALSE 53369
// exit ;
53367: GO 53395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53369: LD_VAR 0 1
53373: PUSH
53374: LD_INT 1
53376: PPUSH
53377: LD_VAR 0 1
53381: PPUSH
53382: CALL_OW 12
53386: ARRAY
53387: PPUSH
53388: LD_INT 200
53390: PPUSH
53391: CALL_OW 234
// end ;
53395: PPOPN 1
53397: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53398: LD_EXP 28
53402: PUSH
53403: LD_EXP 57
53407: AND
53408: IFFALSE 53487
53410: GO 53412
53412: DISABLE
53413: LD_INT 0
53415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53416: LD_ADDR_VAR 0 1
53420: PUSH
53421: LD_INT 22
53423: PUSH
53424: LD_OWVAR 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 21
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PPUSH
53447: CALL_OW 69
53451: ST_TO_ADDR
// if not tmp then
53452: LD_VAR 0 1
53456: NOT
53457: IFFALSE 53461
// exit ;
53459: GO 53487
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53461: LD_VAR 0 1
53465: PUSH
53466: LD_INT 1
53468: PPUSH
53469: LD_VAR 0 1
53473: PPUSH
53474: CALL_OW 12
53478: ARRAY
53479: PPUSH
53480: LD_INT 60
53482: PPUSH
53483: CALL_OW 234
// end ;
53487: PPOPN 1
53489: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53490: LD_EXP 28
53494: PUSH
53495: LD_EXP 58
53499: AND
53500: IFFALSE 53599
53502: GO 53504
53504: DISABLE
53505: LD_INT 0
53507: PPUSH
53508: PPUSH
// begin enable ;
53509: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
53510: LD_ADDR_VAR 0 1
53514: PUSH
53515: LD_INT 22
53517: PUSH
53518: LD_OWVAR 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 61
53529: PUSH
53530: EMPTY
53531: LIST
53532: PUSH
53533: LD_INT 33
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: PPUSH
53548: CALL_OW 69
53552: ST_TO_ADDR
// if not tmp then
53553: LD_VAR 0 1
53557: NOT
53558: IFFALSE 53562
// exit ;
53560: GO 53599
// for i in tmp do
53562: LD_ADDR_VAR 0 2
53566: PUSH
53567: LD_VAR 0 1
53571: PUSH
53572: FOR_IN
53573: IFFALSE 53597
// if IsControledBy ( i ) then
53575: LD_VAR 0 2
53579: PPUSH
53580: CALL_OW 312
53584: IFFALSE 53595
// ComUnlink ( i ) ;
53586: LD_VAR 0 2
53590: PPUSH
53591: CALL_OW 136
53595: GO 53572
53597: POP
53598: POP
// end ;
53599: PPOPN 2
53601: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53602: LD_EXP 28
53606: PUSH
53607: LD_EXP 59
53611: AND
53612: IFFALSE 53752
53614: GO 53616
53616: DISABLE
53617: LD_INT 0
53619: PPUSH
53620: PPUSH
// begin ToLua ( displayPowell(); ) ;
53621: LD_STRING displayPowell();
53623: PPUSH
53624: CALL_OW 559
// uc_side := 0 ;
53628: LD_ADDR_OWVAR 20
53632: PUSH
53633: LD_INT 0
53635: ST_TO_ADDR
// uc_nation := 2 ;
53636: LD_ADDR_OWVAR 21
53640: PUSH
53641: LD_INT 2
53643: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53644: LD_ADDR_OWVAR 37
53648: PUSH
53649: LD_INT 14
53651: ST_TO_ADDR
// vc_engine := engine_siberite ;
53652: LD_ADDR_OWVAR 39
53656: PUSH
53657: LD_INT 3
53659: ST_TO_ADDR
// vc_control := control_apeman ;
53660: LD_ADDR_OWVAR 38
53664: PUSH
53665: LD_INT 5
53667: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
53668: LD_ADDR_OWVAR 40
53672: PUSH
53673: LD_INT 29
53675: ST_TO_ADDR
// un := CreateVehicle ;
53676: LD_ADDR_VAR 0 2
53680: PUSH
53681: CALL_OW 45
53685: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53686: LD_VAR 0 2
53690: PPUSH
53691: LD_INT 1
53693: PPUSH
53694: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53698: LD_INT 35
53700: PPUSH
53701: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53705: LD_VAR 0 2
53709: PPUSH
53710: LD_INT 22
53712: PUSH
53713: LD_OWVAR 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PPUSH
53722: CALL_OW 69
53726: PPUSH
53727: LD_VAR 0 2
53731: PPUSH
53732: CALL_OW 74
53736: PPUSH
53737: CALL_OW 115
// until IsDead ( un ) ;
53741: LD_VAR 0 2
53745: PPUSH
53746: CALL_OW 301
53750: IFFALSE 53698
// end ;
53752: PPOPN 2
53754: END
// every 0 0$1 trigger StreamModeActive and sStu do
53755: LD_EXP 28
53759: PUSH
53760: LD_EXP 67
53764: AND
53765: IFFALSE 53781
53767: GO 53769
53769: DISABLE
// begin ToLua ( displayStucuk(); ) ;
53770: LD_STRING displayStucuk();
53772: PPUSH
53773: CALL_OW 559
// ResetFog ;
53777: CALL_OW 335
// end ;
53781: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
53782: LD_EXP 28
53786: PUSH
53787: LD_EXP 60
53791: AND
53792: IFFALSE 53933
53794: GO 53796
53796: DISABLE
53797: LD_INT 0
53799: PPUSH
53800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53801: LD_ADDR_VAR 0 2
53805: PUSH
53806: LD_INT 22
53808: PUSH
53809: LD_OWVAR 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 21
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PPUSH
53832: CALL_OW 69
53836: ST_TO_ADDR
// if not tmp then
53837: LD_VAR 0 2
53841: NOT
53842: IFFALSE 53846
// exit ;
53844: GO 53933
// un := tmp [ rand ( 1 , tmp ) ] ;
53846: LD_ADDR_VAR 0 1
53850: PUSH
53851: LD_VAR 0 2
53855: PUSH
53856: LD_INT 1
53858: PPUSH
53859: LD_VAR 0 2
53863: PPUSH
53864: CALL_OW 12
53868: ARRAY
53869: ST_TO_ADDR
// SetSide ( un , 0 ) ;
53870: LD_VAR 0 1
53874: PPUSH
53875: LD_INT 0
53877: PPUSH
53878: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
53882: LD_VAR 0 1
53886: PPUSH
53887: LD_OWVAR 3
53891: PUSH
53892: LD_VAR 0 1
53896: DIFF
53897: PPUSH
53898: LD_VAR 0 1
53902: PPUSH
53903: CALL_OW 74
53907: PPUSH
53908: CALL_OW 115
// wait ( 0 0$20 ) ;
53912: LD_INT 700
53914: PPUSH
53915: CALL_OW 67
// SetSide ( un , your_side ) ;
53919: LD_VAR 0 1
53923: PPUSH
53924: LD_OWVAR 2
53928: PPUSH
53929: CALL_OW 235
// end ;
53933: PPOPN 2
53935: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
53936: LD_EXP 28
53940: PUSH
53941: LD_EXP 61
53945: AND
53946: IFFALSE 54052
53948: GO 53950
53950: DISABLE
53951: LD_INT 0
53953: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53954: LD_ADDR_VAR 0 1
53958: PUSH
53959: LD_INT 22
53961: PUSH
53962: LD_OWVAR 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 30
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 30
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PPUSH
54003: CALL_OW 69
54007: ST_TO_ADDR
// if not depot then
54008: LD_VAR 0 1
54012: NOT
54013: IFFALSE 54017
// exit ;
54015: GO 54052
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54017: LD_VAR 0 1
54021: PUSH
54022: LD_INT 1
54024: ARRAY
54025: PPUSH
54026: CALL_OW 250
54030: PPUSH
54031: LD_VAR 0 1
54035: PUSH
54036: LD_INT 1
54038: ARRAY
54039: PPUSH
54040: CALL_OW 251
54044: PPUSH
54045: LD_INT 70
54047: PPUSH
54048: CALL_OW 495
// end ;
54052: PPOPN 1
54054: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54055: LD_EXP 28
54059: PUSH
54060: LD_EXP 62
54064: AND
54065: IFFALSE 54276
54067: GO 54069
54069: DISABLE
54070: LD_INT 0
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54077: LD_ADDR_VAR 0 5
54081: PUSH
54082: LD_INT 22
54084: PUSH
54085: LD_OWVAR 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 21
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PPUSH
54108: CALL_OW 69
54112: ST_TO_ADDR
// if not tmp then
54113: LD_VAR 0 5
54117: NOT
54118: IFFALSE 54122
// exit ;
54120: GO 54276
// for i in tmp do
54122: LD_ADDR_VAR 0 1
54126: PUSH
54127: LD_VAR 0 5
54131: PUSH
54132: FOR_IN
54133: IFFALSE 54274
// begin d := rand ( 0 , 5 ) ;
54135: LD_ADDR_VAR 0 4
54139: PUSH
54140: LD_INT 0
54142: PPUSH
54143: LD_INT 5
54145: PPUSH
54146: CALL_OW 12
54150: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54151: LD_ADDR_VAR 0 2
54155: PUSH
54156: LD_VAR 0 1
54160: PPUSH
54161: CALL_OW 250
54165: PPUSH
54166: LD_VAR 0 4
54170: PPUSH
54171: LD_INT 3
54173: PPUSH
54174: LD_INT 12
54176: PPUSH
54177: CALL_OW 12
54181: PPUSH
54182: CALL_OW 272
54186: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54187: LD_ADDR_VAR 0 3
54191: PUSH
54192: LD_VAR 0 1
54196: PPUSH
54197: CALL_OW 251
54201: PPUSH
54202: LD_VAR 0 4
54206: PPUSH
54207: LD_INT 3
54209: PPUSH
54210: LD_INT 12
54212: PPUSH
54213: CALL_OW 12
54217: PPUSH
54218: CALL_OW 273
54222: ST_TO_ADDR
// if ValidHex ( x , y ) then
54223: LD_VAR 0 2
54227: PPUSH
54228: LD_VAR 0 3
54232: PPUSH
54233: CALL_OW 488
54237: IFFALSE 54272
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54239: LD_VAR 0 1
54243: PPUSH
54244: LD_VAR 0 2
54248: PPUSH
54249: LD_VAR 0 3
54253: PPUSH
54254: LD_INT 3
54256: PPUSH
54257: LD_INT 6
54259: PPUSH
54260: CALL_OW 12
54264: PPUSH
54265: LD_INT 1
54267: PPUSH
54268: CALL_OW 483
// end ;
54272: GO 54132
54274: POP
54275: POP
// end ;
54276: PPOPN 5
54278: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54279: LD_EXP 28
54283: PUSH
54284: LD_EXP 63
54288: AND
54289: IFFALSE 54383
54291: GO 54293
54293: DISABLE
54294: LD_INT 0
54296: PPUSH
54297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54298: LD_ADDR_VAR 0 2
54302: PUSH
54303: LD_INT 22
54305: PUSH
54306: LD_OWVAR 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 32
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 21
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: PPUSH
54340: CALL_OW 69
54344: ST_TO_ADDR
// if not tmp then
54345: LD_VAR 0 2
54349: NOT
54350: IFFALSE 54354
// exit ;
54352: GO 54383
// for i in tmp do
54354: LD_ADDR_VAR 0 1
54358: PUSH
54359: LD_VAR 0 2
54363: PUSH
54364: FOR_IN
54365: IFFALSE 54381
// SetFuel ( i , 0 ) ;
54367: LD_VAR 0 1
54371: PPUSH
54372: LD_INT 0
54374: PPUSH
54375: CALL_OW 240
54379: GO 54364
54381: POP
54382: POP
// end ;
54383: PPOPN 2
54385: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54386: LD_EXP 28
54390: PUSH
54391: LD_EXP 64
54395: AND
54396: IFFALSE 54462
54398: GO 54400
54400: DISABLE
54401: LD_INT 0
54403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54404: LD_ADDR_VAR 0 1
54408: PUSH
54409: LD_INT 22
54411: PUSH
54412: LD_OWVAR 2
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 30
54423: PUSH
54424: LD_INT 29
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PPUSH
54435: CALL_OW 69
54439: ST_TO_ADDR
// if not tmp then
54440: LD_VAR 0 1
54444: NOT
54445: IFFALSE 54449
// exit ;
54447: GO 54462
// DestroyUnit ( tmp [ 1 ] ) ;
54449: LD_VAR 0 1
54453: PUSH
54454: LD_INT 1
54456: ARRAY
54457: PPUSH
54458: CALL_OW 65
// end ;
54462: PPOPN 1
54464: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54465: LD_EXP 28
54469: PUSH
54470: LD_EXP 66
54474: AND
54475: IFFALSE 54604
54477: GO 54479
54479: DISABLE
54480: LD_INT 0
54482: PPUSH
// begin uc_side := 0 ;
54483: LD_ADDR_OWVAR 20
54487: PUSH
54488: LD_INT 0
54490: ST_TO_ADDR
// uc_nation := nation_arabian ;
54491: LD_ADDR_OWVAR 21
54495: PUSH
54496: LD_INT 2
54498: ST_TO_ADDR
// hc_gallery :=  ;
54499: LD_ADDR_OWVAR 33
54503: PUSH
54504: LD_STRING 
54506: ST_TO_ADDR
// hc_name :=  ;
54507: LD_ADDR_OWVAR 26
54511: PUSH
54512: LD_STRING 
54514: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
54515: LD_INT 1
54517: PPUSH
54518: LD_INT 11
54520: PPUSH
54521: LD_INT 10
54523: PPUSH
54524: CALL_OW 380
// un := CreateHuman ;
54528: LD_ADDR_VAR 0 1
54532: PUSH
54533: CALL_OW 44
54537: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54538: LD_VAR 0 1
54542: PPUSH
54543: LD_INT 1
54545: PPUSH
54546: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54550: LD_INT 35
54552: PPUSH
54553: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54557: LD_VAR 0 1
54561: PPUSH
54562: LD_INT 22
54564: PUSH
54565: LD_OWVAR 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PPUSH
54574: CALL_OW 69
54578: PPUSH
54579: LD_VAR 0 1
54583: PPUSH
54584: CALL_OW 74
54588: PPUSH
54589: CALL_OW 115
// until IsDead ( un ) ;
54593: LD_VAR 0 1
54597: PPUSH
54598: CALL_OW 301
54602: IFFALSE 54550
// end ;
54604: PPOPN 1
54606: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54607: LD_EXP 28
54611: PUSH
54612: LD_EXP 68
54616: AND
54617: IFFALSE 54629
54619: GO 54621
54621: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54622: LD_STRING earthquake(getX(game), 0, 32)
54624: PPUSH
54625: CALL_OW 559
54629: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54630: LD_EXP 28
54634: PUSH
54635: LD_EXP 69
54639: AND
54640: IFFALSE 54731
54642: GO 54644
54644: DISABLE
54645: LD_INT 0
54647: PPUSH
// begin enable ;
54648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54649: LD_ADDR_VAR 0 1
54653: PUSH
54654: LD_INT 22
54656: PUSH
54657: LD_OWVAR 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 21
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 33
54678: PUSH
54679: LD_INT 3
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: PPUSH
54691: CALL_OW 69
54695: ST_TO_ADDR
// if not tmp then
54696: LD_VAR 0 1
54700: NOT
54701: IFFALSE 54705
// exit ;
54703: GO 54731
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54705: LD_VAR 0 1
54709: PUSH
54710: LD_INT 1
54712: PPUSH
54713: LD_VAR 0 1
54717: PPUSH
54718: CALL_OW 12
54722: ARRAY
54723: PPUSH
54724: LD_INT 1
54726: PPUSH
54727: CALL_OW 234
// end ;
54731: PPOPN 1
54733: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
54734: LD_EXP 28
54738: PUSH
54739: LD_EXP 70
54743: AND
54744: IFFALSE 54885
54746: GO 54748
54748: DISABLE
54749: LD_INT 0
54751: PPUSH
54752: PPUSH
54753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54754: LD_ADDR_VAR 0 3
54758: PUSH
54759: LD_INT 22
54761: PUSH
54762: LD_OWVAR 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 25
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PPUSH
54785: CALL_OW 69
54789: ST_TO_ADDR
// if not tmp then
54790: LD_VAR 0 3
54794: NOT
54795: IFFALSE 54799
// exit ;
54797: GO 54885
// un := tmp [ rand ( 1 , tmp ) ] ;
54799: LD_ADDR_VAR 0 2
54803: PUSH
54804: LD_VAR 0 3
54808: PUSH
54809: LD_INT 1
54811: PPUSH
54812: LD_VAR 0 3
54816: PPUSH
54817: CALL_OW 12
54821: ARRAY
54822: ST_TO_ADDR
// if Crawls ( un ) then
54823: LD_VAR 0 2
54827: PPUSH
54828: CALL_OW 318
54832: IFFALSE 54843
// ComWalk ( un ) ;
54834: LD_VAR 0 2
54838: PPUSH
54839: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
54843: LD_VAR 0 2
54847: PPUSH
54848: LD_INT 9
54850: PPUSH
54851: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
54855: LD_INT 28
54857: PPUSH
54858: LD_OWVAR 2
54862: PPUSH
54863: LD_INT 2
54865: PPUSH
54866: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
54870: LD_INT 29
54872: PPUSH
54873: LD_OWVAR 2
54877: PPUSH
54878: LD_INT 2
54880: PPUSH
54881: CALL_OW 322
// end ;
54885: PPOPN 3
54887: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
54888: LD_EXP 28
54892: PUSH
54893: LD_EXP 71
54897: AND
54898: IFFALSE 55009
54900: GO 54902
54902: DISABLE
54903: LD_INT 0
54905: PPUSH
54906: PPUSH
54907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54908: LD_ADDR_VAR 0 3
54912: PUSH
54913: LD_INT 22
54915: PUSH
54916: LD_OWVAR 2
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 25
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PPUSH
54939: CALL_OW 69
54943: ST_TO_ADDR
// if not tmp then
54944: LD_VAR 0 3
54948: NOT
54949: IFFALSE 54953
// exit ;
54951: GO 55009
// un := tmp [ rand ( 1 , tmp ) ] ;
54953: LD_ADDR_VAR 0 2
54957: PUSH
54958: LD_VAR 0 3
54962: PUSH
54963: LD_INT 1
54965: PPUSH
54966: LD_VAR 0 3
54970: PPUSH
54971: CALL_OW 12
54975: ARRAY
54976: ST_TO_ADDR
// if Crawls ( un ) then
54977: LD_VAR 0 2
54981: PPUSH
54982: CALL_OW 318
54986: IFFALSE 54997
// ComWalk ( un ) ;
54988: LD_VAR 0 2
54992: PPUSH
54993: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54997: LD_VAR 0 2
55001: PPUSH
55002: LD_INT 8
55004: PPUSH
55005: CALL_OW 336
// end ;
55009: PPOPN 3
55011: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55012: LD_EXP 28
55016: PUSH
55017: LD_EXP 72
55021: AND
55022: IFFALSE 55166
55024: GO 55026
55026: DISABLE
55027: LD_INT 0
55029: PPUSH
55030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55031: LD_ADDR_VAR 0 2
55035: PUSH
55036: LD_INT 22
55038: PUSH
55039: LD_OWVAR 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 21
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 34
55063: PUSH
55064: LD_INT 12
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 34
55073: PUSH
55074: LD_INT 51
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 34
55083: PUSH
55084: LD_INT 32
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: PPUSH
55102: CALL_OW 69
55106: ST_TO_ADDR
// if not tmp then
55107: LD_VAR 0 2
55111: NOT
55112: IFFALSE 55116
// exit ;
55114: GO 55166
// for i in tmp do
55116: LD_ADDR_VAR 0 1
55120: PUSH
55121: LD_VAR 0 2
55125: PUSH
55126: FOR_IN
55127: IFFALSE 55164
// if GetCargo ( i , mat_artifact ) = 0 then
55129: LD_VAR 0 1
55133: PPUSH
55134: LD_INT 4
55136: PPUSH
55137: CALL_OW 289
55141: PUSH
55142: LD_INT 0
55144: EQUAL
55145: IFFALSE 55162
// SetCargo ( i , mat_siberit , 100 ) ;
55147: LD_VAR 0 1
55151: PPUSH
55152: LD_INT 3
55154: PPUSH
55155: LD_INT 100
55157: PPUSH
55158: CALL_OW 290
55162: GO 55126
55164: POP
55165: POP
// end ;
55166: PPOPN 2
55168: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55169: LD_EXP 28
55173: PUSH
55174: LD_EXP 73
55178: AND
55179: IFFALSE 55362
55181: GO 55183
55183: DISABLE
55184: LD_INT 0
55186: PPUSH
55187: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55188: LD_ADDR_VAR 0 2
55192: PUSH
55193: LD_INT 22
55195: PUSH
55196: LD_OWVAR 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PPUSH
55205: CALL_OW 69
55209: ST_TO_ADDR
// if not tmp then
55210: LD_VAR 0 2
55214: NOT
55215: IFFALSE 55219
// exit ;
55217: GO 55362
// for i := 1 to 2 do
55219: LD_ADDR_VAR 0 1
55223: PUSH
55224: DOUBLE
55225: LD_INT 1
55227: DEC
55228: ST_TO_ADDR
55229: LD_INT 2
55231: PUSH
55232: FOR_TO
55233: IFFALSE 55360
// begin uc_side := your_side ;
55235: LD_ADDR_OWVAR 20
55239: PUSH
55240: LD_OWVAR 2
55244: ST_TO_ADDR
// uc_nation := nation_american ;
55245: LD_ADDR_OWVAR 21
55249: PUSH
55250: LD_INT 1
55252: ST_TO_ADDR
// vc_chassis := us_morphling ;
55253: LD_ADDR_OWVAR 37
55257: PUSH
55258: LD_INT 5
55260: ST_TO_ADDR
// vc_engine := engine_siberite ;
55261: LD_ADDR_OWVAR 39
55265: PUSH
55266: LD_INT 3
55268: ST_TO_ADDR
// vc_control := control_computer ;
55269: LD_ADDR_OWVAR 38
55273: PUSH
55274: LD_INT 3
55276: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55277: LD_ADDR_OWVAR 40
55281: PUSH
55282: LD_INT 10
55284: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55285: LD_VAR 0 2
55289: PUSH
55290: LD_INT 1
55292: ARRAY
55293: PPUSH
55294: CALL_OW 310
55298: NOT
55299: IFFALSE 55346
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55301: CALL_OW 45
55305: PPUSH
55306: LD_VAR 0 2
55310: PUSH
55311: LD_INT 1
55313: ARRAY
55314: PPUSH
55315: CALL_OW 250
55319: PPUSH
55320: LD_VAR 0 2
55324: PUSH
55325: LD_INT 1
55327: ARRAY
55328: PPUSH
55329: CALL_OW 251
55333: PPUSH
55334: LD_INT 12
55336: PPUSH
55337: LD_INT 1
55339: PPUSH
55340: CALL_OW 50
55344: GO 55358
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55346: CALL_OW 45
55350: PPUSH
55351: LD_INT 1
55353: PPUSH
55354: CALL_OW 51
// end ;
55358: GO 55232
55360: POP
55361: POP
// end ;
55362: PPOPN 2
55364: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55365: LD_EXP 28
55369: PUSH
55370: LD_EXP 74
55374: AND
55375: IFFALSE 55597
55377: GO 55379
55379: DISABLE
55380: LD_INT 0
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55388: LD_ADDR_VAR 0 6
55392: PUSH
55393: LD_INT 22
55395: PUSH
55396: LD_OWVAR 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 21
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: LD_INT 23
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: PPUSH
55437: CALL_OW 69
55441: ST_TO_ADDR
// if not tmp then
55442: LD_VAR 0 6
55446: NOT
55447: IFFALSE 55451
// exit ;
55449: GO 55597
// s1 := rand ( 1 , 4 ) ;
55451: LD_ADDR_VAR 0 2
55455: PUSH
55456: LD_INT 1
55458: PPUSH
55459: LD_INT 4
55461: PPUSH
55462: CALL_OW 12
55466: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
55467: LD_ADDR_VAR 0 4
55471: PUSH
55472: LD_VAR 0 6
55476: PUSH
55477: LD_INT 1
55479: ARRAY
55480: PPUSH
55481: LD_VAR 0 2
55485: PPUSH
55486: CALL_OW 259
55490: ST_TO_ADDR
// if s1 = 1 then
55491: LD_VAR 0 2
55495: PUSH
55496: LD_INT 1
55498: EQUAL
55499: IFFALSE 55519
// s2 := rand ( 2 , 4 ) else
55501: LD_ADDR_VAR 0 3
55505: PUSH
55506: LD_INT 2
55508: PPUSH
55509: LD_INT 4
55511: PPUSH
55512: CALL_OW 12
55516: ST_TO_ADDR
55517: GO 55527
// s2 := 1 ;
55519: LD_ADDR_VAR 0 3
55523: PUSH
55524: LD_INT 1
55526: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
55527: LD_ADDR_VAR 0 5
55531: PUSH
55532: LD_VAR 0 6
55536: PUSH
55537: LD_INT 1
55539: ARRAY
55540: PPUSH
55541: LD_VAR 0 3
55545: PPUSH
55546: CALL_OW 259
55550: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
55551: LD_VAR 0 6
55555: PUSH
55556: LD_INT 1
55558: ARRAY
55559: PPUSH
55560: LD_VAR 0 2
55564: PPUSH
55565: LD_VAR 0 5
55569: PPUSH
55570: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55574: LD_VAR 0 6
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: PPUSH
55583: LD_VAR 0 3
55587: PPUSH
55588: LD_VAR 0 4
55592: PPUSH
55593: CALL_OW 237
// end ;
55597: PPOPN 6
55599: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55600: LD_EXP 28
55604: PUSH
55605: LD_EXP 75
55609: AND
55610: IFFALSE 55689
55612: GO 55614
55614: DISABLE
55615: LD_INT 0
55617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
55618: LD_ADDR_VAR 0 1
55622: PUSH
55623: LD_INT 22
55625: PUSH
55626: LD_OWVAR 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 30
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PPUSH
55649: CALL_OW 69
55653: ST_TO_ADDR
// if not tmp then
55654: LD_VAR 0 1
55658: NOT
55659: IFFALSE 55663
// exit ;
55661: GO 55689
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55663: LD_VAR 0 1
55667: PUSH
55668: LD_INT 1
55670: PPUSH
55671: LD_VAR 0 1
55675: PPUSH
55676: CALL_OW 12
55680: ARRAY
55681: PPUSH
55682: LD_INT 1
55684: PPUSH
55685: CALL_OW 234
// end ;
55689: PPOPN 1
55691: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
55692: LD_EXP 28
55696: PUSH
55697: LD_EXP 76
55701: AND
55702: IFFALSE 55814
55704: GO 55706
55706: DISABLE
55707: LD_INT 0
55709: PPUSH
55710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
55711: LD_ADDR_VAR 0 2
55715: PUSH
55716: LD_INT 22
55718: PUSH
55719: LD_OWVAR 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 30
55733: PUSH
55734: LD_INT 27
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 30
55743: PUSH
55744: LD_INT 26
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 30
55753: PUSH
55754: LD_INT 28
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PPUSH
55771: CALL_OW 69
55775: ST_TO_ADDR
// if not tmp then
55776: LD_VAR 0 2
55780: NOT
55781: IFFALSE 55785
// exit ;
55783: GO 55814
// for i in tmp do
55785: LD_ADDR_VAR 0 1
55789: PUSH
55790: LD_VAR 0 2
55794: PUSH
55795: FOR_IN
55796: IFFALSE 55812
// SetLives ( i , 1 ) ;
55798: LD_VAR 0 1
55802: PPUSH
55803: LD_INT 1
55805: PPUSH
55806: CALL_OW 234
55810: GO 55795
55812: POP
55813: POP
// end ;
55814: PPOPN 2
55816: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
55817: LD_EXP 28
55821: PUSH
55822: LD_EXP 77
55826: AND
55827: IFFALSE 56114
55829: GO 55831
55831: DISABLE
55832: LD_INT 0
55834: PPUSH
55835: PPUSH
55836: PPUSH
// begin i := rand ( 1 , 7 ) ;
55837: LD_ADDR_VAR 0 1
55841: PUSH
55842: LD_INT 1
55844: PPUSH
55845: LD_INT 7
55847: PPUSH
55848: CALL_OW 12
55852: ST_TO_ADDR
// case i of 1 :
55853: LD_VAR 0 1
55857: PUSH
55858: LD_INT 1
55860: DOUBLE
55861: EQUAL
55862: IFTRUE 55866
55864: GO 55876
55866: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
55867: LD_STRING earthquake(getX(game), 0, 32)
55869: PPUSH
55870: CALL_OW 559
55874: GO 56114
55876: LD_INT 2
55878: DOUBLE
55879: EQUAL
55880: IFTRUE 55884
55882: GO 55898
55884: POP
// begin ToLua ( displayStucuk(); ) ;
55885: LD_STRING displayStucuk();
55887: PPUSH
55888: CALL_OW 559
// ResetFog ;
55892: CALL_OW 335
// end ; 3 :
55896: GO 56114
55898: LD_INT 3
55900: DOUBLE
55901: EQUAL
55902: IFTRUE 55906
55904: GO 56010
55906: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55907: LD_ADDR_VAR 0 2
55911: PUSH
55912: LD_INT 22
55914: PUSH
55915: LD_OWVAR 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 25
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PPUSH
55938: CALL_OW 69
55942: ST_TO_ADDR
// if not tmp then
55943: LD_VAR 0 2
55947: NOT
55948: IFFALSE 55952
// exit ;
55950: GO 56114
// un := tmp [ rand ( 1 , tmp ) ] ;
55952: LD_ADDR_VAR 0 3
55956: PUSH
55957: LD_VAR 0 2
55961: PUSH
55962: LD_INT 1
55964: PPUSH
55965: LD_VAR 0 2
55969: PPUSH
55970: CALL_OW 12
55974: ARRAY
55975: ST_TO_ADDR
// if Crawls ( un ) then
55976: LD_VAR 0 3
55980: PPUSH
55981: CALL_OW 318
55985: IFFALSE 55996
// ComWalk ( un ) ;
55987: LD_VAR 0 3
55991: PPUSH
55992: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55996: LD_VAR 0 3
56000: PPUSH
56001: LD_INT 8
56003: PPUSH
56004: CALL_OW 336
// end ; 4 :
56008: GO 56114
56010: LD_INT 4
56012: DOUBLE
56013: EQUAL
56014: IFTRUE 56018
56016: GO 56092
56018: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56019: LD_ADDR_VAR 0 2
56023: PUSH
56024: LD_INT 22
56026: PUSH
56027: LD_OWVAR 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 30
56038: PUSH
56039: LD_INT 29
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PPUSH
56050: CALL_OW 69
56054: ST_TO_ADDR
// if not tmp then
56055: LD_VAR 0 2
56059: NOT
56060: IFFALSE 56064
// exit ;
56062: GO 56114
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56064: LD_VAR 0 2
56068: PUSH
56069: LD_INT 1
56071: ARRAY
56072: PPUSH
56073: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56077: LD_VAR 0 2
56081: PUSH
56082: LD_INT 1
56084: ARRAY
56085: PPUSH
56086: CALL_OW 65
// end ; 5 .. 7 :
56090: GO 56114
56092: LD_INT 5
56094: DOUBLE
56095: GREATEREQUAL
56096: IFFALSE 56104
56098: LD_INT 7
56100: DOUBLE
56101: LESSEQUAL
56102: IFTRUE 56106
56104: GO 56113
56106: POP
// StreamSibBomb ; end ;
56107: CALL 52351 0 0
56111: GO 56114
56113: POP
// end ;
56114: PPOPN 3
56116: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56117: LD_EXP 28
56121: PUSH
56122: LD_EXP 78
56126: AND
56127: IFFALSE 56283
56129: GO 56131
56131: DISABLE
56132: LD_INT 0
56134: PPUSH
56135: PPUSH
56136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56137: LD_ADDR_VAR 0 2
56141: PUSH
56142: LD_INT 81
56144: PUSH
56145: LD_OWVAR 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: LD_INT 21
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 21
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PPUSH
56186: CALL_OW 69
56190: ST_TO_ADDR
// if not tmp then
56191: LD_VAR 0 2
56195: NOT
56196: IFFALSE 56200
// exit ;
56198: GO 56283
// p := 0 ;
56200: LD_ADDR_VAR 0 3
56204: PUSH
56205: LD_INT 0
56207: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56208: LD_INT 35
56210: PPUSH
56211: CALL_OW 67
// p := p + 1 ;
56215: LD_ADDR_VAR 0 3
56219: PUSH
56220: LD_VAR 0 3
56224: PUSH
56225: LD_INT 1
56227: PLUS
56228: ST_TO_ADDR
// for i in tmp do
56229: LD_ADDR_VAR 0 1
56233: PUSH
56234: LD_VAR 0 2
56238: PUSH
56239: FOR_IN
56240: IFFALSE 56271
// if GetLives ( i ) < 1000 then
56242: LD_VAR 0 1
56246: PPUSH
56247: CALL_OW 256
56251: PUSH
56252: LD_INT 1000
56254: LESS
56255: IFFALSE 56269
// SetLives ( i , 1000 ) ;
56257: LD_VAR 0 1
56261: PPUSH
56262: LD_INT 1000
56264: PPUSH
56265: CALL_OW 234
56269: GO 56239
56271: POP
56272: POP
// until p > 20 ;
56273: LD_VAR 0 3
56277: PUSH
56278: LD_INT 20
56280: GREATER
56281: IFFALSE 56208
// end ;
56283: PPOPN 3
56285: END
// every 0 0$1 trigger StreamModeActive and sTime do
56286: LD_EXP 28
56290: PUSH
56291: LD_EXP 79
56295: AND
56296: IFFALSE 56331
56298: GO 56300
56300: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56301: LD_INT 28
56303: PPUSH
56304: LD_OWVAR 2
56308: PPUSH
56309: LD_INT 2
56311: PPUSH
56312: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56316: LD_INT 30
56318: PPUSH
56319: LD_OWVAR 2
56323: PPUSH
56324: LD_INT 2
56326: PPUSH
56327: CALL_OW 322
// end ;
56331: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56332: LD_EXP 28
56336: PUSH
56337: LD_EXP 80
56341: AND
56342: IFFALSE 56463
56344: GO 56346
56346: DISABLE
56347: LD_INT 0
56349: PPUSH
56350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56351: LD_ADDR_VAR 0 2
56355: PUSH
56356: LD_INT 22
56358: PUSH
56359: LD_OWVAR 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 21
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: PUSH
56381: LD_INT 23
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: PPUSH
56400: CALL_OW 69
56404: ST_TO_ADDR
// if not tmp then
56405: LD_VAR 0 2
56409: NOT
56410: IFFALSE 56414
// exit ;
56412: GO 56463
// for i in tmp do
56414: LD_ADDR_VAR 0 1
56418: PUSH
56419: LD_VAR 0 2
56423: PUSH
56424: FOR_IN
56425: IFFALSE 56461
// begin if Crawls ( i ) then
56427: LD_VAR 0 1
56431: PPUSH
56432: CALL_OW 318
56436: IFFALSE 56447
// ComWalk ( i ) ;
56438: LD_VAR 0 1
56442: PPUSH
56443: CALL_OW 138
// SetClass ( i , 2 ) ;
56447: LD_VAR 0 1
56451: PPUSH
56452: LD_INT 2
56454: PPUSH
56455: CALL_OW 336
// end ;
56459: GO 56424
56461: POP
56462: POP
// end ;
56463: PPOPN 2
56465: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56466: LD_EXP 28
56470: PUSH
56471: LD_EXP 81
56475: AND
56476: IFFALSE 56764
56478: GO 56480
56480: DISABLE
56481: LD_INT 0
56483: PPUSH
56484: PPUSH
56485: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
56486: LD_OWVAR 2
56490: PPUSH
56491: LD_INT 9
56493: PPUSH
56494: LD_INT 1
56496: PPUSH
56497: LD_INT 1
56499: PPUSH
56500: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56504: LD_INT 9
56506: PPUSH
56507: LD_OWVAR 2
56511: PPUSH
56512: CALL_OW 343
// uc_side := 9 ;
56516: LD_ADDR_OWVAR 20
56520: PUSH
56521: LD_INT 9
56523: ST_TO_ADDR
// uc_nation := 2 ;
56524: LD_ADDR_OWVAR 21
56528: PUSH
56529: LD_INT 2
56531: ST_TO_ADDR
// hc_name := Dark Warrior ;
56532: LD_ADDR_OWVAR 26
56536: PUSH
56537: LD_STRING Dark Warrior
56539: ST_TO_ADDR
// hc_gallery :=  ;
56540: LD_ADDR_OWVAR 33
56544: PUSH
56545: LD_STRING 
56547: ST_TO_ADDR
// hc_noskilllimit := true ;
56548: LD_ADDR_OWVAR 76
56552: PUSH
56553: LD_INT 1
56555: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56556: LD_ADDR_OWVAR 31
56560: PUSH
56561: LD_INT 30
56563: PUSH
56564: LD_INT 30
56566: PUSH
56567: LD_INT 30
56569: PUSH
56570: LD_INT 30
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// un := CreateHuman ;
56579: LD_ADDR_VAR 0 3
56583: PUSH
56584: CALL_OW 44
56588: ST_TO_ADDR
// hc_noskilllimit := false ;
56589: LD_ADDR_OWVAR 76
56593: PUSH
56594: LD_INT 0
56596: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56597: LD_VAR 0 3
56601: PPUSH
56602: LD_INT 1
56604: PPUSH
56605: CALL_OW 51
// ToLua ( playRanger() ) ;
56609: LD_STRING playRanger()
56611: PPUSH
56612: CALL_OW 559
// p := 0 ;
56616: LD_ADDR_VAR 0 2
56620: PUSH
56621: LD_INT 0
56623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56624: LD_INT 35
56626: PPUSH
56627: CALL_OW 67
// p := p + 1 ;
56631: LD_ADDR_VAR 0 2
56635: PUSH
56636: LD_VAR 0 2
56640: PUSH
56641: LD_INT 1
56643: PLUS
56644: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56645: LD_VAR 0 3
56649: PPUSH
56650: CALL_OW 256
56654: PUSH
56655: LD_INT 1000
56657: LESS
56658: IFFALSE 56672
// SetLives ( un , 1000 ) ;
56660: LD_VAR 0 3
56664: PPUSH
56665: LD_INT 1000
56667: PPUSH
56668: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
56672: LD_VAR 0 3
56676: PPUSH
56677: LD_INT 81
56679: PUSH
56680: LD_OWVAR 2
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 91
56691: PUSH
56692: LD_VAR 0 3
56696: PUSH
56697: LD_INT 30
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PPUSH
56709: CALL_OW 69
56713: PPUSH
56714: LD_VAR 0 3
56718: PPUSH
56719: CALL_OW 74
56723: PPUSH
56724: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
56728: LD_VAR 0 2
56732: PUSH
56733: LD_INT 80
56735: GREATER
56736: PUSH
56737: LD_VAR 0 3
56741: PPUSH
56742: CALL_OW 301
56746: OR
56747: IFFALSE 56624
// if un then
56749: LD_VAR 0 3
56753: IFFALSE 56764
// RemoveUnit ( un ) ;
56755: LD_VAR 0 3
56759: PPUSH
56760: CALL_OW 64
// end ;
56764: PPOPN 3
56766: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
56767: LD_EXP 82
56771: IFFALSE 56887
56773: GO 56775
56775: DISABLE
56776: LD_INT 0
56778: PPUSH
56779: PPUSH
56780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56781: LD_ADDR_VAR 0 2
56785: PUSH
56786: LD_INT 81
56788: PUSH
56789: LD_OWVAR 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 21
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PPUSH
56812: CALL_OW 69
56816: ST_TO_ADDR
// ToLua ( playComputer() ) ;
56817: LD_STRING playComputer()
56819: PPUSH
56820: CALL_OW 559
// if not tmp then
56824: LD_VAR 0 2
56828: NOT
56829: IFFALSE 56833
// exit ;
56831: GO 56887
// for i in tmp do
56833: LD_ADDR_VAR 0 1
56837: PUSH
56838: LD_VAR 0 2
56842: PUSH
56843: FOR_IN
56844: IFFALSE 56885
// for j := 1 to 4 do
56846: LD_ADDR_VAR 0 3
56850: PUSH
56851: DOUBLE
56852: LD_INT 1
56854: DEC
56855: ST_TO_ADDR
56856: LD_INT 4
56858: PUSH
56859: FOR_TO
56860: IFFALSE 56881
// SetSkill ( i , j , 10 ) ;
56862: LD_VAR 0 1
56866: PPUSH
56867: LD_VAR 0 3
56871: PPUSH
56872: LD_INT 10
56874: PPUSH
56875: CALL_OW 237
56879: GO 56859
56881: POP
56882: POP
56883: GO 56843
56885: POP
56886: POP
// end ;
56887: PPOPN 3
56889: END
// every 0 0$1 trigger s30 do var i , tmp ;
56890: LD_EXP 83
56894: IFFALSE 56963
56896: GO 56898
56898: DISABLE
56899: LD_INT 0
56901: PPUSH
56902: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56903: LD_ADDR_VAR 0 2
56907: PUSH
56908: LD_INT 22
56910: PUSH
56911: LD_OWVAR 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PPUSH
56920: CALL_OW 69
56924: ST_TO_ADDR
// if not tmp then
56925: LD_VAR 0 2
56929: NOT
56930: IFFALSE 56934
// exit ;
56932: GO 56963
// for i in tmp do
56934: LD_ADDR_VAR 0 1
56938: PUSH
56939: LD_VAR 0 2
56943: PUSH
56944: FOR_IN
56945: IFFALSE 56961
// SetLives ( i , 300 ) ;
56947: LD_VAR 0 1
56951: PPUSH
56952: LD_INT 300
56954: PPUSH
56955: CALL_OW 234
56959: GO 56944
56961: POP
56962: POP
// end ;
56963: PPOPN 2
56965: END
// every 0 0$1 trigger s60 do var i , tmp ;
56966: LD_EXP 84
56970: IFFALSE 57039
56972: GO 56974
56974: DISABLE
56975: LD_INT 0
56977: PPUSH
56978: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56979: LD_ADDR_VAR 0 2
56983: PUSH
56984: LD_INT 22
56986: PUSH
56987: LD_OWVAR 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PPUSH
56996: CALL_OW 69
57000: ST_TO_ADDR
// if not tmp then
57001: LD_VAR 0 2
57005: NOT
57006: IFFALSE 57010
// exit ;
57008: GO 57039
// for i in tmp do
57010: LD_ADDR_VAR 0 1
57014: PUSH
57015: LD_VAR 0 2
57019: PUSH
57020: FOR_IN
57021: IFFALSE 57037
// SetLives ( i , 600 ) ;
57023: LD_VAR 0 1
57027: PPUSH
57028: LD_INT 600
57030: PPUSH
57031: CALL_OW 234
57035: GO 57020
57037: POP
57038: POP
// end ;
57039: PPOPN 2
57041: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57042: LD_INT 0
57044: PPUSH
// case cmd of 301 :
57045: LD_VAR 0 1
57049: PUSH
57050: LD_INT 301
57052: DOUBLE
57053: EQUAL
57054: IFTRUE 57058
57056: GO 57090
57058: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57059: LD_VAR 0 6
57063: PPUSH
57064: LD_VAR 0 7
57068: PPUSH
57069: LD_VAR 0 8
57073: PPUSH
57074: LD_VAR 0 4
57078: PPUSH
57079: LD_VAR 0 5
57083: PPUSH
57084: CALL 58291 0 5
57088: GO 57211
57090: LD_INT 302
57092: DOUBLE
57093: EQUAL
57094: IFTRUE 57098
57096: GO 57135
57098: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57099: LD_VAR 0 6
57103: PPUSH
57104: LD_VAR 0 7
57108: PPUSH
57109: LD_VAR 0 8
57113: PPUSH
57114: LD_VAR 0 9
57118: PPUSH
57119: LD_VAR 0 4
57123: PPUSH
57124: LD_VAR 0 5
57128: PPUSH
57129: CALL 58382 0 6
57133: GO 57211
57135: LD_INT 303
57137: DOUBLE
57138: EQUAL
57139: IFTRUE 57143
57141: GO 57180
57143: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57144: LD_VAR 0 6
57148: PPUSH
57149: LD_VAR 0 7
57153: PPUSH
57154: LD_VAR 0 8
57158: PPUSH
57159: LD_VAR 0 9
57163: PPUSH
57164: LD_VAR 0 4
57168: PPUSH
57169: LD_VAR 0 5
57173: PPUSH
57174: CALL 57216 0 6
57178: GO 57211
57180: LD_INT 304
57182: DOUBLE
57183: EQUAL
57184: IFTRUE 57188
57186: GO 57210
57188: POP
// hHackTeleport ( unit , x , y ) ; end ;
57189: LD_VAR 0 2
57193: PPUSH
57194: LD_VAR 0 4
57198: PPUSH
57199: LD_VAR 0 5
57203: PPUSH
57204: CALL 58975 0 3
57208: GO 57211
57210: POP
// end ;
57211: LD_VAR 0 12
57215: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57216: LD_INT 0
57218: PPUSH
57219: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57220: LD_VAR 0 1
57224: PUSH
57225: LD_INT 1
57227: LESS
57228: PUSH
57229: LD_VAR 0 1
57233: PUSH
57234: LD_INT 3
57236: GREATER
57237: OR
57238: PUSH
57239: LD_VAR 0 5
57243: PPUSH
57244: LD_VAR 0 6
57248: PPUSH
57249: CALL_OW 428
57253: OR
57254: IFFALSE 57258
// exit ;
57256: GO 57978
// uc_side := your_side ;
57258: LD_ADDR_OWVAR 20
57262: PUSH
57263: LD_OWVAR 2
57267: ST_TO_ADDR
// uc_nation := nation ;
57268: LD_ADDR_OWVAR 21
57272: PUSH
57273: LD_VAR 0 1
57277: ST_TO_ADDR
// bc_level = 1 ;
57278: LD_ADDR_OWVAR 43
57282: PUSH
57283: LD_INT 1
57285: ST_TO_ADDR
// case btype of 1 :
57286: LD_VAR 0 2
57290: PUSH
57291: LD_INT 1
57293: DOUBLE
57294: EQUAL
57295: IFTRUE 57299
57297: GO 57310
57299: POP
// bc_type := b_depot ; 2 :
57300: LD_ADDR_OWVAR 42
57304: PUSH
57305: LD_INT 0
57307: ST_TO_ADDR
57308: GO 57922
57310: LD_INT 2
57312: DOUBLE
57313: EQUAL
57314: IFTRUE 57318
57316: GO 57329
57318: POP
// bc_type := b_warehouse ; 3 :
57319: LD_ADDR_OWVAR 42
57323: PUSH
57324: LD_INT 1
57326: ST_TO_ADDR
57327: GO 57922
57329: LD_INT 3
57331: DOUBLE
57332: EQUAL
57333: IFTRUE 57337
57335: GO 57348
57337: POP
// bc_type := b_lab ; 4 .. 9 :
57338: LD_ADDR_OWVAR 42
57342: PUSH
57343: LD_INT 6
57345: ST_TO_ADDR
57346: GO 57922
57348: LD_INT 4
57350: DOUBLE
57351: GREATEREQUAL
57352: IFFALSE 57360
57354: LD_INT 9
57356: DOUBLE
57357: LESSEQUAL
57358: IFTRUE 57362
57360: GO 57414
57362: POP
// begin bc_type := b_lab_half ;
57363: LD_ADDR_OWVAR 42
57367: PUSH
57368: LD_INT 7
57370: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57371: LD_ADDR_OWVAR 44
57375: PUSH
57376: LD_INT 10
57378: PUSH
57379: LD_INT 11
57381: PUSH
57382: LD_INT 12
57384: PUSH
57385: LD_INT 15
57387: PUSH
57388: LD_INT 14
57390: PUSH
57391: LD_INT 13
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: PUSH
57402: LD_VAR 0 2
57406: PUSH
57407: LD_INT 3
57409: MINUS
57410: ARRAY
57411: ST_TO_ADDR
// end ; 10 .. 13 :
57412: GO 57922
57414: LD_INT 10
57416: DOUBLE
57417: GREATEREQUAL
57418: IFFALSE 57426
57420: LD_INT 13
57422: DOUBLE
57423: LESSEQUAL
57424: IFTRUE 57428
57426: GO 57505
57428: POP
// begin bc_type := b_lab_full ;
57429: LD_ADDR_OWVAR 42
57433: PUSH
57434: LD_INT 8
57436: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57437: LD_ADDR_OWVAR 44
57441: PUSH
57442: LD_INT 10
57444: PUSH
57445: LD_INT 12
57447: PUSH
57448: LD_INT 14
57450: PUSH
57451: LD_INT 13
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: PUSH
57460: LD_VAR 0 2
57464: PUSH
57465: LD_INT 9
57467: MINUS
57468: ARRAY
57469: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57470: LD_ADDR_OWVAR 45
57474: PUSH
57475: LD_INT 11
57477: PUSH
57478: LD_INT 15
57480: PUSH
57481: LD_INT 12
57483: PUSH
57484: LD_INT 15
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: PUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_INT 9
57500: MINUS
57501: ARRAY
57502: ST_TO_ADDR
// end ; 14 :
57503: GO 57922
57505: LD_INT 14
57507: DOUBLE
57508: EQUAL
57509: IFTRUE 57513
57511: GO 57524
57513: POP
// bc_type := b_workshop ; 15 :
57514: LD_ADDR_OWVAR 42
57518: PUSH
57519: LD_INT 2
57521: ST_TO_ADDR
57522: GO 57922
57524: LD_INT 15
57526: DOUBLE
57527: EQUAL
57528: IFTRUE 57532
57530: GO 57543
57532: POP
// bc_type := b_factory ; 16 :
57533: LD_ADDR_OWVAR 42
57537: PUSH
57538: LD_INT 3
57540: ST_TO_ADDR
57541: GO 57922
57543: LD_INT 16
57545: DOUBLE
57546: EQUAL
57547: IFTRUE 57551
57549: GO 57562
57551: POP
// bc_type := b_ext_gun ; 17 :
57552: LD_ADDR_OWVAR 42
57556: PUSH
57557: LD_INT 17
57559: ST_TO_ADDR
57560: GO 57922
57562: LD_INT 17
57564: DOUBLE
57565: EQUAL
57566: IFTRUE 57570
57568: GO 57598
57570: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57571: LD_ADDR_OWVAR 42
57575: PUSH
57576: LD_INT 19
57578: PUSH
57579: LD_INT 23
57581: PUSH
57582: LD_INT 19
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: PUSH
57590: LD_VAR 0 1
57594: ARRAY
57595: ST_TO_ADDR
57596: GO 57922
57598: LD_INT 18
57600: DOUBLE
57601: EQUAL
57602: IFTRUE 57606
57604: GO 57617
57606: POP
// bc_type := b_ext_radar ; 19 :
57607: LD_ADDR_OWVAR 42
57611: PUSH
57612: LD_INT 20
57614: ST_TO_ADDR
57615: GO 57922
57617: LD_INT 19
57619: DOUBLE
57620: EQUAL
57621: IFTRUE 57625
57623: GO 57636
57625: POP
// bc_type := b_ext_radio ; 20 :
57626: LD_ADDR_OWVAR 42
57630: PUSH
57631: LD_INT 22
57633: ST_TO_ADDR
57634: GO 57922
57636: LD_INT 20
57638: DOUBLE
57639: EQUAL
57640: IFTRUE 57644
57642: GO 57655
57644: POP
// bc_type := b_ext_siberium ; 21 :
57645: LD_ADDR_OWVAR 42
57649: PUSH
57650: LD_INT 21
57652: ST_TO_ADDR
57653: GO 57922
57655: LD_INT 21
57657: DOUBLE
57658: EQUAL
57659: IFTRUE 57663
57661: GO 57674
57663: POP
// bc_type := b_ext_computer ; 22 :
57664: LD_ADDR_OWVAR 42
57668: PUSH
57669: LD_INT 24
57671: ST_TO_ADDR
57672: GO 57922
57674: LD_INT 22
57676: DOUBLE
57677: EQUAL
57678: IFTRUE 57682
57680: GO 57693
57682: POP
// bc_type := b_ext_track ; 23 :
57683: LD_ADDR_OWVAR 42
57687: PUSH
57688: LD_INT 16
57690: ST_TO_ADDR
57691: GO 57922
57693: LD_INT 23
57695: DOUBLE
57696: EQUAL
57697: IFTRUE 57701
57699: GO 57712
57701: POP
// bc_type := b_ext_laser ; 24 :
57702: LD_ADDR_OWVAR 42
57706: PUSH
57707: LD_INT 25
57709: ST_TO_ADDR
57710: GO 57922
57712: LD_INT 24
57714: DOUBLE
57715: EQUAL
57716: IFTRUE 57720
57718: GO 57731
57720: POP
// bc_type := b_control_tower ; 25 :
57721: LD_ADDR_OWVAR 42
57725: PUSH
57726: LD_INT 36
57728: ST_TO_ADDR
57729: GO 57922
57731: LD_INT 25
57733: DOUBLE
57734: EQUAL
57735: IFTRUE 57739
57737: GO 57750
57739: POP
// bc_type := b_breastwork ; 26 :
57740: LD_ADDR_OWVAR 42
57744: PUSH
57745: LD_INT 31
57747: ST_TO_ADDR
57748: GO 57922
57750: LD_INT 26
57752: DOUBLE
57753: EQUAL
57754: IFTRUE 57758
57756: GO 57769
57758: POP
// bc_type := b_bunker ; 27 :
57759: LD_ADDR_OWVAR 42
57763: PUSH
57764: LD_INT 32
57766: ST_TO_ADDR
57767: GO 57922
57769: LD_INT 27
57771: DOUBLE
57772: EQUAL
57773: IFTRUE 57777
57775: GO 57788
57777: POP
// bc_type := b_turret ; 28 :
57778: LD_ADDR_OWVAR 42
57782: PUSH
57783: LD_INT 33
57785: ST_TO_ADDR
57786: GO 57922
57788: LD_INT 28
57790: DOUBLE
57791: EQUAL
57792: IFTRUE 57796
57794: GO 57807
57796: POP
// bc_type := b_armoury ; 29 :
57797: LD_ADDR_OWVAR 42
57801: PUSH
57802: LD_INT 4
57804: ST_TO_ADDR
57805: GO 57922
57807: LD_INT 29
57809: DOUBLE
57810: EQUAL
57811: IFTRUE 57815
57813: GO 57826
57815: POP
// bc_type := b_barracks ; 30 :
57816: LD_ADDR_OWVAR 42
57820: PUSH
57821: LD_INT 5
57823: ST_TO_ADDR
57824: GO 57922
57826: LD_INT 30
57828: DOUBLE
57829: EQUAL
57830: IFTRUE 57834
57832: GO 57845
57834: POP
// bc_type := b_solar_power ; 31 :
57835: LD_ADDR_OWVAR 42
57839: PUSH
57840: LD_INT 27
57842: ST_TO_ADDR
57843: GO 57922
57845: LD_INT 31
57847: DOUBLE
57848: EQUAL
57849: IFTRUE 57853
57851: GO 57864
57853: POP
// bc_type := b_oil_power ; 32 :
57854: LD_ADDR_OWVAR 42
57858: PUSH
57859: LD_INT 26
57861: ST_TO_ADDR
57862: GO 57922
57864: LD_INT 32
57866: DOUBLE
57867: EQUAL
57868: IFTRUE 57872
57870: GO 57883
57872: POP
// bc_type := b_siberite_power ; 33 :
57873: LD_ADDR_OWVAR 42
57877: PUSH
57878: LD_INT 28
57880: ST_TO_ADDR
57881: GO 57922
57883: LD_INT 33
57885: DOUBLE
57886: EQUAL
57887: IFTRUE 57891
57889: GO 57902
57891: POP
// bc_type := b_oil_mine ; 34 :
57892: LD_ADDR_OWVAR 42
57896: PUSH
57897: LD_INT 29
57899: ST_TO_ADDR
57900: GO 57922
57902: LD_INT 34
57904: DOUBLE
57905: EQUAL
57906: IFTRUE 57910
57908: GO 57921
57910: POP
// bc_type := b_siberite_mine ; end ;
57911: LD_ADDR_OWVAR 42
57915: PUSH
57916: LD_INT 30
57918: ST_TO_ADDR
57919: GO 57922
57921: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
57922: LD_ADDR_VAR 0 8
57926: PUSH
57927: LD_VAR 0 5
57931: PPUSH
57932: LD_VAR 0 6
57936: PPUSH
57937: LD_VAR 0 3
57941: PPUSH
57942: CALL_OW 47
57946: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
57947: LD_OWVAR 42
57951: PUSH
57952: LD_INT 32
57954: PUSH
57955: LD_INT 33
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: IN
57962: IFFALSE 57978
// PlaceWeaponTurret ( b , weapon ) ;
57964: LD_VAR 0 8
57968: PPUSH
57969: LD_VAR 0 4
57973: PPUSH
57974: CALL_OW 431
// end ;
57978: LD_VAR 0 7
57982: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
57983: LD_INT 0
57985: PPUSH
57986: PPUSH
57987: PPUSH
57988: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57989: LD_ADDR_VAR 0 4
57993: PUSH
57994: LD_INT 22
57996: PUSH
57997: LD_OWVAR 2
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 30
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 30
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PPUSH
58038: CALL_OW 69
58042: ST_TO_ADDR
// if not tmp then
58043: LD_VAR 0 4
58047: NOT
58048: IFFALSE 58052
// exit ;
58050: GO 58111
// for i in tmp do
58052: LD_ADDR_VAR 0 2
58056: PUSH
58057: LD_VAR 0 4
58061: PUSH
58062: FOR_IN
58063: IFFALSE 58109
// for j = 1 to 3 do
58065: LD_ADDR_VAR 0 3
58069: PUSH
58070: DOUBLE
58071: LD_INT 1
58073: DEC
58074: ST_TO_ADDR
58075: LD_INT 3
58077: PUSH
58078: FOR_TO
58079: IFFALSE 58105
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58081: LD_VAR 0 2
58085: PPUSH
58086: CALL_OW 274
58090: PPUSH
58091: LD_VAR 0 3
58095: PPUSH
58096: LD_INT 99999
58098: PPUSH
58099: CALL_OW 277
58103: GO 58078
58105: POP
58106: POP
58107: GO 58062
58109: POP
58110: POP
// end ;
58111: LD_VAR 0 1
58115: RET
// export function hHackSetLevel10 ; var i , j ; begin
58116: LD_INT 0
58118: PPUSH
58119: PPUSH
58120: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58121: LD_ADDR_VAR 0 2
58125: PUSH
58126: LD_INT 21
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PPUSH
58136: CALL_OW 69
58140: PUSH
58141: FOR_IN
58142: IFFALSE 58194
// if IsSelected ( i ) then
58144: LD_VAR 0 2
58148: PPUSH
58149: CALL_OW 306
58153: IFFALSE 58192
// begin for j := 1 to 4 do
58155: LD_ADDR_VAR 0 3
58159: PUSH
58160: DOUBLE
58161: LD_INT 1
58163: DEC
58164: ST_TO_ADDR
58165: LD_INT 4
58167: PUSH
58168: FOR_TO
58169: IFFALSE 58190
// SetSkill ( i , j , 10 ) ;
58171: LD_VAR 0 2
58175: PPUSH
58176: LD_VAR 0 3
58180: PPUSH
58181: LD_INT 10
58183: PPUSH
58184: CALL_OW 237
58188: GO 58168
58190: POP
58191: POP
// end ;
58192: GO 58141
58194: POP
58195: POP
// end ;
58196: LD_VAR 0 1
58200: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58201: LD_INT 0
58203: PPUSH
58204: PPUSH
58205: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58206: LD_ADDR_VAR 0 2
58210: PUSH
58211: LD_INT 22
58213: PUSH
58214: LD_OWVAR 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 21
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PPUSH
58237: CALL_OW 69
58241: PUSH
58242: FOR_IN
58243: IFFALSE 58284
// begin for j := 1 to 4 do
58245: LD_ADDR_VAR 0 3
58249: PUSH
58250: DOUBLE
58251: LD_INT 1
58253: DEC
58254: ST_TO_ADDR
58255: LD_INT 4
58257: PUSH
58258: FOR_TO
58259: IFFALSE 58280
// SetSkill ( i , j , 10 ) ;
58261: LD_VAR 0 2
58265: PPUSH
58266: LD_VAR 0 3
58270: PPUSH
58271: LD_INT 10
58273: PPUSH
58274: CALL_OW 237
58278: GO 58258
58280: POP
58281: POP
// end ;
58282: GO 58242
58284: POP
58285: POP
// end ;
58286: LD_VAR 0 1
58290: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58291: LD_INT 0
58293: PPUSH
// uc_side := your_side ;
58294: LD_ADDR_OWVAR 20
58298: PUSH
58299: LD_OWVAR 2
58303: ST_TO_ADDR
// uc_nation := nation ;
58304: LD_ADDR_OWVAR 21
58308: PUSH
58309: LD_VAR 0 1
58313: ST_TO_ADDR
// InitHc ;
58314: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58318: LD_INT 0
58320: PPUSH
58321: LD_VAR 0 2
58325: PPUSH
58326: LD_VAR 0 3
58330: PPUSH
58331: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58335: LD_VAR 0 4
58339: PPUSH
58340: LD_VAR 0 5
58344: PPUSH
58345: CALL_OW 428
58349: PUSH
58350: LD_INT 0
58352: EQUAL
58353: IFFALSE 58377
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58355: CALL_OW 44
58359: PPUSH
58360: LD_VAR 0 4
58364: PPUSH
58365: LD_VAR 0 5
58369: PPUSH
58370: LD_INT 1
58372: PPUSH
58373: CALL_OW 48
// end ;
58377: LD_VAR 0 6
58381: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58382: LD_INT 0
58384: PPUSH
58385: PPUSH
// uc_side := your_side ;
58386: LD_ADDR_OWVAR 20
58390: PUSH
58391: LD_OWVAR 2
58395: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58396: LD_VAR 0 1
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: LD_INT 4
58412: PUSH
58413: LD_INT 5
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: IN
58423: IFFALSE 58435
// uc_nation := nation_american else
58425: LD_ADDR_OWVAR 21
58429: PUSH
58430: LD_INT 1
58432: ST_TO_ADDR
58433: GO 58478
// if chassis in [ 11 , 12 , 13 , 14 ] then
58435: LD_VAR 0 1
58439: PUSH
58440: LD_INT 11
58442: PUSH
58443: LD_INT 12
58445: PUSH
58446: LD_INT 13
58448: PUSH
58449: LD_INT 14
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: IN
58458: IFFALSE 58470
// uc_nation := nation_arabian else
58460: LD_ADDR_OWVAR 21
58464: PUSH
58465: LD_INT 2
58467: ST_TO_ADDR
58468: GO 58478
// uc_nation := nation_russian ;
58470: LD_ADDR_OWVAR 21
58474: PUSH
58475: LD_INT 3
58477: ST_TO_ADDR
// vc_chassis := chassis ;
58478: LD_ADDR_OWVAR 37
58482: PUSH
58483: LD_VAR 0 1
58487: ST_TO_ADDR
// vc_engine := engine ;
58488: LD_ADDR_OWVAR 39
58492: PUSH
58493: LD_VAR 0 2
58497: ST_TO_ADDR
// vc_control := control ;
58498: LD_ADDR_OWVAR 38
58502: PUSH
58503: LD_VAR 0 3
58507: ST_TO_ADDR
// vc_weapon := weapon ;
58508: LD_ADDR_OWVAR 40
58512: PUSH
58513: LD_VAR 0 4
58517: ST_TO_ADDR
// un := CreateVehicle ;
58518: LD_ADDR_VAR 0 8
58522: PUSH
58523: CALL_OW 45
58527: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58528: LD_VAR 0 8
58532: PPUSH
58533: LD_INT 0
58535: PPUSH
58536: LD_INT 5
58538: PPUSH
58539: CALL_OW 12
58543: PPUSH
58544: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58548: LD_VAR 0 8
58552: PPUSH
58553: LD_VAR 0 5
58557: PPUSH
58558: LD_VAR 0 6
58562: PPUSH
58563: LD_INT 1
58565: PPUSH
58566: CALL_OW 48
// end ;
58570: LD_VAR 0 7
58574: RET
// export hInvincible ; every 1 do
58575: GO 58577
58577: DISABLE
// hInvincible := [ ] ;
58578: LD_ADDR_EXP 85
58582: PUSH
58583: EMPTY
58584: ST_TO_ADDR
58585: END
// every 10 do var i ;
58586: GO 58588
58588: DISABLE
58589: LD_INT 0
58591: PPUSH
// begin enable ;
58592: ENABLE
// if not hInvincible then
58593: LD_EXP 85
58597: NOT
58598: IFFALSE 58602
// exit ;
58600: GO 58646
// for i in hInvincible do
58602: LD_ADDR_VAR 0 1
58606: PUSH
58607: LD_EXP 85
58611: PUSH
58612: FOR_IN
58613: IFFALSE 58644
// if GetLives ( i ) < 1000 then
58615: LD_VAR 0 1
58619: PPUSH
58620: CALL_OW 256
58624: PUSH
58625: LD_INT 1000
58627: LESS
58628: IFFALSE 58642
// SetLives ( i , 1000 ) ;
58630: LD_VAR 0 1
58634: PPUSH
58635: LD_INT 1000
58637: PPUSH
58638: CALL_OW 234
58642: GO 58612
58644: POP
58645: POP
// end ;
58646: PPOPN 1
58648: END
// export function hHackInvincible ; var i ; begin
58649: LD_INT 0
58651: PPUSH
58652: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58653: LD_ADDR_VAR 0 2
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 21
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 21
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: PPUSH
58686: CALL_OW 69
58690: PUSH
58691: FOR_IN
58692: IFFALSE 58753
// if IsSelected ( i ) then
58694: LD_VAR 0 2
58698: PPUSH
58699: CALL_OW 306
58703: IFFALSE 58751
// begin if i in hInvincible then
58705: LD_VAR 0 2
58709: PUSH
58710: LD_EXP 85
58714: IN
58715: IFFALSE 58735
// hInvincible := hInvincible diff i else
58717: LD_ADDR_EXP 85
58721: PUSH
58722: LD_EXP 85
58726: PUSH
58727: LD_VAR 0 2
58731: DIFF
58732: ST_TO_ADDR
58733: GO 58751
// hInvincible := hInvincible union i ;
58735: LD_ADDR_EXP 85
58739: PUSH
58740: LD_EXP 85
58744: PUSH
58745: LD_VAR 0 2
58749: UNION
58750: ST_TO_ADDR
// end ;
58751: GO 58691
58753: POP
58754: POP
// end ;
58755: LD_VAR 0 1
58759: RET
// export function hHackInvisible ; var i , j ; begin
58760: LD_INT 0
58762: PPUSH
58763: PPUSH
58764: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58765: LD_ADDR_VAR 0 2
58769: PUSH
58770: LD_INT 21
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PPUSH
58780: CALL_OW 69
58784: PUSH
58785: FOR_IN
58786: IFFALSE 58810
// if IsSelected ( i ) then
58788: LD_VAR 0 2
58792: PPUSH
58793: CALL_OW 306
58797: IFFALSE 58808
// ComForceInvisible ( i ) ;
58799: LD_VAR 0 2
58803: PPUSH
58804: CALL_OW 496
58808: GO 58785
58810: POP
58811: POP
// end ;
58812: LD_VAR 0 1
58816: RET
// export function hHackChangeYourSide ; begin
58817: LD_INT 0
58819: PPUSH
// if your_side = 8 then
58820: LD_OWVAR 2
58824: PUSH
58825: LD_INT 8
58827: EQUAL
58828: IFFALSE 58840
// your_side := 0 else
58830: LD_ADDR_OWVAR 2
58834: PUSH
58835: LD_INT 0
58837: ST_TO_ADDR
58838: GO 58854
// your_side := your_side + 1 ;
58840: LD_ADDR_OWVAR 2
58844: PUSH
58845: LD_OWVAR 2
58849: PUSH
58850: LD_INT 1
58852: PLUS
58853: ST_TO_ADDR
// end ;
58854: LD_VAR 0 1
58858: RET
// export function hHackChangeUnitSide ; var i , j ; begin
58859: LD_INT 0
58861: PPUSH
58862: PPUSH
58863: PPUSH
// for i in all_units do
58864: LD_ADDR_VAR 0 2
58868: PUSH
58869: LD_OWVAR 3
58873: PUSH
58874: FOR_IN
58875: IFFALSE 58953
// if IsSelected ( i ) then
58877: LD_VAR 0 2
58881: PPUSH
58882: CALL_OW 306
58886: IFFALSE 58951
// begin j := GetSide ( i ) ;
58888: LD_ADDR_VAR 0 3
58892: PUSH
58893: LD_VAR 0 2
58897: PPUSH
58898: CALL_OW 255
58902: ST_TO_ADDR
// if j = 8 then
58903: LD_VAR 0 3
58907: PUSH
58908: LD_INT 8
58910: EQUAL
58911: IFFALSE 58923
// j := 0 else
58913: LD_ADDR_VAR 0 3
58917: PUSH
58918: LD_INT 0
58920: ST_TO_ADDR
58921: GO 58937
// j := j + 1 ;
58923: LD_ADDR_VAR 0 3
58927: PUSH
58928: LD_VAR 0 3
58932: PUSH
58933: LD_INT 1
58935: PLUS
58936: ST_TO_ADDR
// SetSide ( i , j ) ;
58937: LD_VAR 0 2
58941: PPUSH
58942: LD_VAR 0 3
58946: PPUSH
58947: CALL_OW 235
// end ;
58951: GO 58874
58953: POP
58954: POP
// end ;
58955: LD_VAR 0 1
58959: RET
// export function hHackFog ; begin
58960: LD_INT 0
58962: PPUSH
// FogOff ( true ) ;
58963: LD_INT 1
58965: PPUSH
58966: CALL_OW 344
// end ;
58970: LD_VAR 0 1
58974: RET
// export function hHackTeleport ( unit , x , y ) ; begin
58975: LD_INT 0
58977: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
58978: LD_VAR 0 1
58982: PPUSH
58983: LD_VAR 0 2
58987: PPUSH
58988: LD_VAR 0 3
58992: PPUSH
58993: LD_INT 1
58995: PPUSH
58996: LD_INT 1
58998: PPUSH
58999: CALL_OW 483
// CenterOnXY ( x , y ) ;
59003: LD_VAR 0 2
59007: PPUSH
59008: LD_VAR 0 3
59012: PPUSH
59013: CALL_OW 84
// end ;
59017: LD_VAR 0 4
59021: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59022: LD_INT 0
59024: PPUSH
59025: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59026: LD_VAR 0 1
59030: NOT
59031: PUSH
59032: LD_VAR 0 2
59036: PPUSH
59037: LD_VAR 0 3
59041: PPUSH
59042: CALL_OW 488
59046: NOT
59047: OR
59048: PUSH
59049: LD_VAR 0 1
59053: PPUSH
59054: CALL_OW 266
59058: PUSH
59059: LD_INT 3
59061: NONEQUAL
59062: PUSH
59063: LD_VAR 0 1
59067: PPUSH
59068: CALL_OW 247
59072: PUSH
59073: LD_INT 1
59075: EQUAL
59076: NOT
59077: AND
59078: OR
59079: IFFALSE 59083
// exit ;
59081: GO 59232
// if GetType ( factory ) = unit_human then
59083: LD_VAR 0 1
59087: PPUSH
59088: CALL_OW 247
59092: PUSH
59093: LD_INT 1
59095: EQUAL
59096: IFFALSE 59113
// factory := IsInUnit ( factory ) ;
59098: LD_ADDR_VAR 0 1
59102: PUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: CALL_OW 310
59112: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59113: LD_VAR 0 1
59117: PPUSH
59118: CALL_OW 266
59122: PUSH
59123: LD_INT 3
59125: NONEQUAL
59126: IFFALSE 59130
// exit ;
59128: GO 59232
// if HexInfo ( x , y ) = factory then
59130: LD_VAR 0 2
59134: PPUSH
59135: LD_VAR 0 3
59139: PPUSH
59140: CALL_OW 428
59144: PUSH
59145: LD_VAR 0 1
59149: EQUAL
59150: IFFALSE 59177
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59152: LD_ADDR_EXP 86
59156: PUSH
59157: LD_EXP 86
59161: PPUSH
59162: LD_VAR 0 1
59166: PPUSH
59167: LD_INT 0
59169: PPUSH
59170: CALL_OW 1
59174: ST_TO_ADDR
59175: GO 59228
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59177: LD_ADDR_EXP 86
59181: PUSH
59182: LD_EXP 86
59186: PPUSH
59187: LD_VAR 0 1
59191: PPUSH
59192: LD_VAR 0 1
59196: PPUSH
59197: CALL_OW 255
59201: PUSH
59202: LD_VAR 0 1
59206: PUSH
59207: LD_VAR 0 2
59211: PUSH
59212: LD_VAR 0 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: PPUSH
59223: CALL_OW 1
59227: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59228: CALL 59237 0 0
// end ;
59232: LD_VAR 0 4
59236: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59237: LD_INT 0
59239: PPUSH
59240: PPUSH
59241: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59242: LD_STRING resetFactoryWaypoint();
59244: PPUSH
59245: CALL_OW 559
// if factoryWaypoints then
59249: LD_EXP 86
59253: IFFALSE 59379
// begin list := PrepareArray ( factoryWaypoints ) ;
59255: LD_ADDR_VAR 0 3
59259: PUSH
59260: LD_EXP 86
59264: PPUSH
59265: CALL 44285 0 1
59269: ST_TO_ADDR
// for i := 1 to list do
59270: LD_ADDR_VAR 0 2
59274: PUSH
59275: DOUBLE
59276: LD_INT 1
59278: DEC
59279: ST_TO_ADDR
59280: LD_VAR 0 3
59284: PUSH
59285: FOR_TO
59286: IFFALSE 59377
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59288: LD_STRING setFactoryWaypointXY(
59290: PUSH
59291: LD_VAR 0 3
59295: PUSH
59296: LD_VAR 0 2
59300: ARRAY
59301: PUSH
59302: LD_INT 1
59304: ARRAY
59305: STR
59306: PUSH
59307: LD_STRING ,
59309: STR
59310: PUSH
59311: LD_VAR 0 3
59315: PUSH
59316: LD_VAR 0 2
59320: ARRAY
59321: PUSH
59322: LD_INT 2
59324: ARRAY
59325: STR
59326: PUSH
59327: LD_STRING ,
59329: STR
59330: PUSH
59331: LD_VAR 0 3
59335: PUSH
59336: LD_VAR 0 2
59340: ARRAY
59341: PUSH
59342: LD_INT 3
59344: ARRAY
59345: STR
59346: PUSH
59347: LD_STRING ,
59349: STR
59350: PUSH
59351: LD_VAR 0 3
59355: PUSH
59356: LD_VAR 0 2
59360: ARRAY
59361: PUSH
59362: LD_INT 4
59364: ARRAY
59365: STR
59366: PUSH
59367: LD_STRING )
59369: STR
59370: PPUSH
59371: CALL_OW 559
59375: GO 59285
59377: POP
59378: POP
// end ; end ;
59379: LD_VAR 0 1
59383: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59384: LD_INT 0
59386: PPUSH
// if HexInfo ( x , y ) = warehouse then
59387: LD_VAR 0 2
59391: PPUSH
59392: LD_VAR 0 3
59396: PPUSH
59397: CALL_OW 428
59401: PUSH
59402: LD_VAR 0 1
59406: EQUAL
59407: IFFALSE 59434
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59409: LD_ADDR_EXP 87
59413: PUSH
59414: LD_EXP 87
59418: PPUSH
59419: LD_VAR 0 1
59423: PPUSH
59424: LD_INT 0
59426: PPUSH
59427: CALL_OW 1
59431: ST_TO_ADDR
59432: GO 59485
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59434: LD_ADDR_EXP 87
59438: PUSH
59439: LD_EXP 87
59443: PPUSH
59444: LD_VAR 0 1
59448: PPUSH
59449: LD_VAR 0 1
59453: PPUSH
59454: CALL_OW 255
59458: PUSH
59459: LD_VAR 0 1
59463: PUSH
59464: LD_VAR 0 2
59468: PUSH
59469: LD_VAR 0 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: PPUSH
59480: CALL_OW 1
59484: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59485: CALL 59494 0 0
// end ;
59489: LD_VAR 0 4
59493: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59494: LD_INT 0
59496: PPUSH
59497: PPUSH
59498: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59499: LD_STRING resetWarehouseGatheringPoints();
59501: PPUSH
59502: CALL_OW 559
// if warehouseGatheringPoints then
59506: LD_EXP 87
59510: IFFALSE 59636
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59512: LD_ADDR_VAR 0 3
59516: PUSH
59517: LD_EXP 87
59521: PPUSH
59522: CALL 44285 0 1
59526: ST_TO_ADDR
// for i := 1 to list do
59527: LD_ADDR_VAR 0 2
59531: PUSH
59532: DOUBLE
59533: LD_INT 1
59535: DEC
59536: ST_TO_ADDR
59537: LD_VAR 0 3
59541: PUSH
59542: FOR_TO
59543: IFFALSE 59634
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59545: LD_STRING setWarehouseGatheringPointXY(
59547: PUSH
59548: LD_VAR 0 3
59552: PUSH
59553: LD_VAR 0 2
59557: ARRAY
59558: PUSH
59559: LD_INT 1
59561: ARRAY
59562: STR
59563: PUSH
59564: LD_STRING ,
59566: STR
59567: PUSH
59568: LD_VAR 0 3
59572: PUSH
59573: LD_VAR 0 2
59577: ARRAY
59578: PUSH
59579: LD_INT 2
59581: ARRAY
59582: STR
59583: PUSH
59584: LD_STRING ,
59586: STR
59587: PUSH
59588: LD_VAR 0 3
59592: PUSH
59593: LD_VAR 0 2
59597: ARRAY
59598: PUSH
59599: LD_INT 3
59601: ARRAY
59602: STR
59603: PUSH
59604: LD_STRING ,
59606: STR
59607: PUSH
59608: LD_VAR 0 3
59612: PUSH
59613: LD_VAR 0 2
59617: ARRAY
59618: PUSH
59619: LD_INT 4
59621: ARRAY
59622: STR
59623: PUSH
59624: LD_STRING )
59626: STR
59627: PPUSH
59628: CALL_OW 559
59632: GO 59542
59634: POP
59635: POP
// end ; end ;
59636: LD_VAR 0 1
59640: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
59641: LD_EXP 87
59645: IFFALSE 60330
59647: GO 59649
59649: DISABLE
59650: LD_INT 0
59652: PPUSH
59653: PPUSH
59654: PPUSH
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
// begin enable ;
59661: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
59662: LD_ADDR_VAR 0 3
59666: PUSH
59667: LD_EXP 87
59671: PPUSH
59672: CALL 44285 0 1
59676: ST_TO_ADDR
// if not list then
59677: LD_VAR 0 3
59681: NOT
59682: IFFALSE 59686
// exit ;
59684: GO 60330
// for i := 1 to list do
59686: LD_ADDR_VAR 0 1
59690: PUSH
59691: DOUBLE
59692: LD_INT 1
59694: DEC
59695: ST_TO_ADDR
59696: LD_VAR 0 3
59700: PUSH
59701: FOR_TO
59702: IFFALSE 60328
// begin depot := list [ i ] [ 2 ] ;
59704: LD_ADDR_VAR 0 8
59708: PUSH
59709: LD_VAR 0 3
59713: PUSH
59714: LD_VAR 0 1
59718: ARRAY
59719: PUSH
59720: LD_INT 2
59722: ARRAY
59723: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
59724: LD_ADDR_VAR 0 5
59728: PUSH
59729: LD_VAR 0 3
59733: PUSH
59734: LD_VAR 0 1
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
59744: LD_VAR 0 8
59748: PPUSH
59749: CALL_OW 301
59753: PUSH
59754: LD_VAR 0 5
59758: PUSH
59759: LD_VAR 0 8
59763: PPUSH
59764: CALL_OW 255
59768: NONEQUAL
59769: OR
59770: IFFALSE 59799
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
59772: LD_ADDR_EXP 87
59776: PUSH
59777: LD_EXP 87
59781: PPUSH
59782: LD_VAR 0 8
59786: PPUSH
59787: LD_INT 0
59789: PPUSH
59790: CALL_OW 1
59794: ST_TO_ADDR
// exit ;
59795: POP
59796: POP
59797: GO 60330
// end ; x := list [ i ] [ 3 ] ;
59799: LD_ADDR_VAR 0 6
59803: PUSH
59804: LD_VAR 0 3
59808: PUSH
59809: LD_VAR 0 1
59813: ARRAY
59814: PUSH
59815: LD_INT 3
59817: ARRAY
59818: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
59819: LD_ADDR_VAR 0 7
59823: PUSH
59824: LD_VAR 0 3
59828: PUSH
59829: LD_VAR 0 1
59833: ARRAY
59834: PUSH
59835: LD_INT 4
59837: ARRAY
59838: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
59839: LD_ADDR_VAR 0 9
59843: PUSH
59844: LD_VAR 0 6
59848: PPUSH
59849: LD_VAR 0 7
59853: PPUSH
59854: LD_INT 16
59856: PPUSH
59857: CALL 42873 0 3
59861: ST_TO_ADDR
// if not cratesNearbyPoint then
59862: LD_VAR 0 9
59866: NOT
59867: IFFALSE 59873
// exit ;
59869: POP
59870: POP
59871: GO 60330
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
59873: LD_ADDR_VAR 0 4
59877: PUSH
59878: LD_INT 22
59880: PUSH
59881: LD_VAR 0 5
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 3
59892: PUSH
59893: LD_INT 60
59895: PUSH
59896: EMPTY
59897: LIST
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 91
59905: PUSH
59906: LD_VAR 0 8
59910: PUSH
59911: LD_INT 6
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: LD_INT 25
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 25
59934: PUSH
59935: LD_INT 16
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: PPUSH
59953: CALL_OW 69
59957: PUSH
59958: LD_VAR 0 8
59962: PPUSH
59963: CALL_OW 313
59967: PPUSH
59968: LD_INT 3
59970: PUSH
59971: LD_INT 60
59973: PUSH
59974: EMPTY
59975: LIST
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 25
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 25
59996: PUSH
59997: LD_INT 16
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PPUSH
60013: CALL_OW 72
60017: UNION
60018: ST_TO_ADDR
// if tmp then
60019: LD_VAR 0 4
60023: IFFALSE 60103
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60025: LD_ADDR_VAR 0 4
60029: PUSH
60030: LD_VAR 0 4
60034: PPUSH
60035: LD_INT 3
60037: PPUSH
60038: CALL 40842 0 2
60042: ST_TO_ADDR
// for j in tmp do
60043: LD_ADDR_VAR 0 2
60047: PUSH
60048: LD_VAR 0 4
60052: PUSH
60053: FOR_IN
60054: IFFALSE 60097
// begin if IsInUnit ( j ) then
60056: LD_VAR 0 2
60060: PPUSH
60061: CALL_OW 310
60065: IFFALSE 60076
// ComExit ( j ) ;
60067: LD_VAR 0 2
60071: PPUSH
60072: CALL 40925 0 1
// AddComCollect ( j , x , y ) ;
60076: LD_VAR 0 2
60080: PPUSH
60081: LD_VAR 0 6
60085: PPUSH
60086: LD_VAR 0 7
60090: PPUSH
60091: CALL_OW 177
// end ;
60095: GO 60053
60097: POP
60098: POP
// exit ;
60099: POP
60100: POP
60101: GO 60330
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60103: LD_ADDR_VAR 0 4
60107: PUSH
60108: LD_INT 22
60110: PUSH
60111: LD_VAR 0 5
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 91
60122: PUSH
60123: LD_VAR 0 8
60127: PUSH
60128: LD_INT 8
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: LD_INT 34
60141: PUSH
60142: LD_INT 12
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 34
60151: PUSH
60152: LD_INT 51
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 34
60161: PUSH
60162: LD_INT 32
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 34
60171: PUSH
60172: LD_INT 89
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: PPUSH
60191: CALL_OW 69
60195: ST_TO_ADDR
// if tmp then
60196: LD_VAR 0 4
60200: IFFALSE 60326
// begin for j in tmp do
60202: LD_ADDR_VAR 0 2
60206: PUSH
60207: LD_VAR 0 4
60211: PUSH
60212: FOR_IN
60213: IFFALSE 60324
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
60215: LD_VAR 0 2
60219: PPUSH
60220: CALL_OW 262
60224: PUSH
60225: LD_INT 3
60227: EQUAL
60228: PUSH
60229: LD_VAR 0 2
60233: PPUSH
60234: CALL_OW 261
60238: PUSH
60239: LD_INT 20
60241: GREATER
60242: OR
60243: PUSH
60244: LD_VAR 0 2
60248: PPUSH
60249: CALL_OW 314
60253: NOT
60254: AND
60255: PUSH
60256: LD_VAR 0 2
60260: PPUSH
60261: CALL_OW 263
60265: PUSH
60266: LD_INT 1
60268: NONEQUAL
60269: PUSH
60270: LD_VAR 0 2
60274: PPUSH
60275: CALL_OW 311
60279: OR
60280: AND
60281: IFFALSE 60322
// begin ComCollect ( j , x , y ) ;
60283: LD_VAR 0 2
60287: PPUSH
60288: LD_VAR 0 6
60292: PPUSH
60293: LD_VAR 0 7
60297: PPUSH
60298: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
60302: LD_VAR 0 2
60306: PPUSH
60307: LD_VAR 0 8
60311: PPUSH
60312: CALL_OW 172
// exit ;
60316: POP
60317: POP
60318: POP
60319: POP
60320: GO 60330
// end ;
60322: GO 60212
60324: POP
60325: POP
// end ; end ;
60326: GO 59701
60328: POP
60329: POP
// end ; end_of_file
60330: PPOPN 9
60332: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60333: LD_VAR 0 1
60337: PUSH
60338: LD_INT 200
60340: DOUBLE
60341: GREATEREQUAL
60342: IFFALSE 60350
60344: LD_INT 299
60346: DOUBLE
60347: LESSEQUAL
60348: IFTRUE 60352
60350: GO 60384
60352: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60353: LD_VAR 0 1
60357: PPUSH
60358: LD_VAR 0 2
60362: PPUSH
60363: LD_VAR 0 3
60367: PPUSH
60368: LD_VAR 0 4
60372: PPUSH
60373: LD_VAR 0 5
60377: PPUSH
60378: CALL 60872 0 5
60382: GO 60461
60384: LD_INT 300
60386: DOUBLE
60387: GREATEREQUAL
60388: IFFALSE 60396
60390: LD_INT 399
60392: DOUBLE
60393: LESSEQUAL
60394: IFTRUE 60398
60396: GO 60460
60398: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60399: LD_VAR 0 1
60403: PPUSH
60404: LD_VAR 0 2
60408: PPUSH
60409: LD_VAR 0 3
60413: PPUSH
60414: LD_VAR 0 4
60418: PPUSH
60419: LD_VAR 0 5
60423: PPUSH
60424: LD_VAR 0 6
60428: PPUSH
60429: LD_VAR 0 7
60433: PPUSH
60434: LD_VAR 0 8
60438: PPUSH
60439: LD_VAR 0 9
60443: PPUSH
60444: LD_VAR 0 10
60448: PPUSH
60449: LD_VAR 0 11
60453: PPUSH
60454: CALL 57042 0 11
60458: GO 60461
60460: POP
// end ;
60461: PPOPN 11
60463: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_VAR 0 2
60473: PPUSH
60474: LD_VAR 0 3
60478: PPUSH
60479: LD_VAR 0 4
60483: PPUSH
60484: LD_VAR 0 5
60488: PPUSH
60489: CALL 60608 0 5
// end ; end_of_file
60493: PPOPN 5
60495: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60496: LD_INT 0
60498: PPUSH
60499: PPUSH
60500: PPUSH
60501: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 264
60511: PUSH
60512: LD_INT 91
60514: EQUAL
60515: IFFALSE 60587
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60517: LD_INT 68
60519: PPUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: CALL_OW 255
60529: PPUSH
60530: CALL_OW 321
60534: PUSH
60535: LD_INT 2
60537: EQUAL
60538: IFFALSE 60550
// eff := 70 else
60540: LD_ADDR_VAR 0 4
60544: PUSH
60545: LD_INT 70
60547: ST_TO_ADDR
60548: GO 60558
// eff := 30 ;
60550: LD_ADDR_VAR 0 4
60554: PUSH
60555: LD_INT 30
60557: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 250
60567: PPUSH
60568: LD_VAR 0 1
60572: PPUSH
60573: CALL_OW 251
60577: PPUSH
60578: LD_VAR 0 4
60582: PPUSH
60583: CALL_OW 495
// end ; end ;
60587: LD_VAR 0 2
60591: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60592: LD_INT 0
60594: PPUSH
// end ;
60595: LD_VAR 0 4
60599: RET
// export function SOS_Command ( cmd ) ; begin
60600: LD_INT 0
60602: PPUSH
// end ;
60603: LD_VAR 0 2
60607: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60608: LD_INT 0
60610: PPUSH
// end ;
60611: LD_VAR 0 6
60615: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
60616: LD_INT 0
60618: PPUSH
60619: PPUSH
// if not vehicle or not factory then
60620: LD_VAR 0 1
60624: NOT
60625: PUSH
60626: LD_VAR 0 2
60630: NOT
60631: OR
60632: IFFALSE 60636
// exit ;
60634: GO 60867
// if factoryWaypoints >= factory then
60636: LD_EXP 86
60640: PUSH
60641: LD_VAR 0 2
60645: GREATEREQUAL
60646: IFFALSE 60867
// if factoryWaypoints [ factory ] then
60648: LD_EXP 86
60652: PUSH
60653: LD_VAR 0 2
60657: ARRAY
60658: IFFALSE 60867
// begin if GetControl ( vehicle ) = control_manual then
60660: LD_VAR 0 1
60664: PPUSH
60665: CALL_OW 263
60669: PUSH
60670: LD_INT 1
60672: EQUAL
60673: IFFALSE 60754
// begin driver := IsDrivenBy ( vehicle ) ;
60675: LD_ADDR_VAR 0 4
60679: PUSH
60680: LD_VAR 0 1
60684: PPUSH
60685: CALL_OW 311
60689: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60690: LD_VAR 0 4
60694: PPUSH
60695: LD_EXP 86
60699: PUSH
60700: LD_VAR 0 2
60704: ARRAY
60705: PUSH
60706: LD_INT 3
60708: ARRAY
60709: PPUSH
60710: LD_EXP 86
60714: PUSH
60715: LD_VAR 0 2
60719: ARRAY
60720: PUSH
60721: LD_INT 4
60723: ARRAY
60724: PPUSH
60725: CALL_OW 171
// AddComExitVehicle ( driver ) ;
60729: LD_VAR 0 4
60733: PPUSH
60734: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
60738: LD_VAR 0 4
60742: PPUSH
60743: LD_VAR 0 2
60747: PPUSH
60748: CALL_OW 180
// end else
60752: GO 60867
// if GetControl ( vehicle ) = control_remote then
60754: LD_VAR 0 1
60758: PPUSH
60759: CALL_OW 263
60763: PUSH
60764: LD_INT 2
60766: EQUAL
60767: IFFALSE 60828
// begin wait ( 0 0$2 ) ;
60769: LD_INT 70
60771: PPUSH
60772: CALL_OW 67
// if Connect ( vehicle ) then
60776: LD_VAR 0 1
60780: PPUSH
60781: CALL 11165 0 1
60785: IFFALSE 60826
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60787: LD_VAR 0 1
60791: PPUSH
60792: LD_EXP 86
60796: PUSH
60797: LD_VAR 0 2
60801: ARRAY
60802: PUSH
60803: LD_INT 3
60805: ARRAY
60806: PPUSH
60807: LD_EXP 86
60811: PUSH
60812: LD_VAR 0 2
60816: ARRAY
60817: PUSH
60818: LD_INT 4
60820: ARRAY
60821: PPUSH
60822: CALL_OW 171
// end else
60826: GO 60867
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60828: LD_VAR 0 1
60832: PPUSH
60833: LD_EXP 86
60837: PUSH
60838: LD_VAR 0 2
60842: ARRAY
60843: PUSH
60844: LD_INT 3
60846: ARRAY
60847: PPUSH
60848: LD_EXP 86
60852: PUSH
60853: LD_VAR 0 2
60857: ARRAY
60858: PUSH
60859: LD_INT 4
60861: ARRAY
60862: PPUSH
60863: CALL_OW 171
// end ; end ;
60867: LD_VAR 0 3
60871: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60872: LD_INT 0
60874: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60875: LD_VAR 0 1
60879: PUSH
60880: LD_INT 250
60882: EQUAL
60883: PUSH
60884: LD_VAR 0 2
60888: PPUSH
60889: CALL_OW 264
60893: PUSH
60894: LD_INT 81
60896: EQUAL
60897: AND
60898: IFFALSE 60919
// MinerPlaceMine ( unit , x , y ) ;
60900: LD_VAR 0 2
60904: PPUSH
60905: LD_VAR 0 4
60909: PPUSH
60910: LD_VAR 0 5
60914: PPUSH
60915: CALL 63304 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60919: LD_VAR 0 1
60923: PUSH
60924: LD_INT 251
60926: EQUAL
60927: PUSH
60928: LD_VAR 0 2
60932: PPUSH
60933: CALL_OW 264
60937: PUSH
60938: LD_INT 81
60940: EQUAL
60941: AND
60942: IFFALSE 60963
// MinerDetonateMine ( unit , x , y ) ;
60944: LD_VAR 0 2
60948: PPUSH
60949: LD_VAR 0 4
60953: PPUSH
60954: LD_VAR 0 5
60958: PPUSH
60959: CALL 63579 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60963: LD_VAR 0 1
60967: PUSH
60968: LD_INT 252
60970: EQUAL
60971: PUSH
60972: LD_VAR 0 2
60976: PPUSH
60977: CALL_OW 264
60981: PUSH
60982: LD_INT 81
60984: EQUAL
60985: AND
60986: IFFALSE 61007
// MinerCreateMinefield ( unit , x , y ) ;
60988: LD_VAR 0 2
60992: PPUSH
60993: LD_VAR 0 4
60997: PPUSH
60998: LD_VAR 0 5
61002: PPUSH
61003: CALL 63996 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61007: LD_VAR 0 1
61011: PUSH
61012: LD_INT 253
61014: EQUAL
61015: PUSH
61016: LD_VAR 0 2
61020: PPUSH
61021: CALL_OW 257
61025: PUSH
61026: LD_INT 5
61028: EQUAL
61029: AND
61030: IFFALSE 61051
// ComBinocular ( unit , x , y ) ;
61032: LD_VAR 0 2
61036: PPUSH
61037: LD_VAR 0 4
61041: PPUSH
61042: LD_VAR 0 5
61046: PPUSH
61047: CALL 64365 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61051: LD_VAR 0 1
61055: PUSH
61056: LD_INT 254
61058: EQUAL
61059: PUSH
61060: LD_VAR 0 2
61064: PPUSH
61065: CALL_OW 264
61069: PUSH
61070: LD_INT 99
61072: EQUAL
61073: AND
61074: PUSH
61075: LD_VAR 0 3
61079: PPUSH
61080: CALL_OW 263
61084: PUSH
61085: LD_INT 3
61087: EQUAL
61088: AND
61089: IFFALSE 61105
// HackDestroyVehicle ( unit , selectedUnit ) ;
61091: LD_VAR 0 2
61095: PPUSH
61096: LD_VAR 0 3
61100: PPUSH
61101: CALL 62668 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61105: LD_VAR 0 1
61109: PUSH
61110: LD_INT 255
61112: EQUAL
61113: PUSH
61114: LD_VAR 0 2
61118: PPUSH
61119: CALL_OW 264
61123: PUSH
61124: LD_INT 14
61126: PUSH
61127: LD_INT 53
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: IN
61134: AND
61135: PUSH
61136: LD_VAR 0 4
61140: PPUSH
61141: LD_VAR 0 5
61145: PPUSH
61146: CALL_OW 488
61150: AND
61151: IFFALSE 61175
// CutTreeXYR ( unit , x , y , 12 ) ;
61153: LD_VAR 0 2
61157: PPUSH
61158: LD_VAR 0 4
61162: PPUSH
61163: LD_VAR 0 5
61167: PPUSH
61168: LD_INT 12
61170: PPUSH
61171: CALL 61238 0 4
// if cmd = 256 then
61175: LD_VAR 0 1
61179: PUSH
61180: LD_INT 256
61182: EQUAL
61183: IFFALSE 61204
// SetFactoryWaypoint ( unit , x , y ) ;
61185: LD_VAR 0 2
61189: PPUSH
61190: LD_VAR 0 4
61194: PPUSH
61195: LD_VAR 0 5
61199: PPUSH
61200: CALL 59022 0 3
// if cmd = 257 then
61204: LD_VAR 0 1
61208: PUSH
61209: LD_INT 257
61211: EQUAL
61212: IFFALSE 61233
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61214: LD_VAR 0 2
61218: PPUSH
61219: LD_VAR 0 4
61223: PPUSH
61224: LD_VAR 0 5
61228: PPUSH
61229: CALL 59384 0 3
// end ;
61233: LD_VAR 0 6
61237: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61238: LD_INT 0
61240: PPUSH
61241: PPUSH
61242: PPUSH
61243: PPUSH
61244: PPUSH
61245: PPUSH
61246: PPUSH
61247: PPUSH
61248: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61249: LD_VAR 0 1
61253: NOT
61254: PUSH
61255: LD_VAR 0 2
61259: PPUSH
61260: LD_VAR 0 3
61264: PPUSH
61265: CALL_OW 488
61269: NOT
61270: OR
61271: PUSH
61272: LD_VAR 0 4
61276: NOT
61277: OR
61278: IFFALSE 61282
// exit ;
61280: GO 61622
// list := [ ] ;
61282: LD_ADDR_VAR 0 13
61286: PUSH
61287: EMPTY
61288: ST_TO_ADDR
// if x - r < 0 then
61289: LD_VAR 0 2
61293: PUSH
61294: LD_VAR 0 4
61298: MINUS
61299: PUSH
61300: LD_INT 0
61302: LESS
61303: IFFALSE 61315
// min_x := 0 else
61305: LD_ADDR_VAR 0 7
61309: PUSH
61310: LD_INT 0
61312: ST_TO_ADDR
61313: GO 61331
// min_x := x - r ;
61315: LD_ADDR_VAR 0 7
61319: PUSH
61320: LD_VAR 0 2
61324: PUSH
61325: LD_VAR 0 4
61329: MINUS
61330: ST_TO_ADDR
// if y - r < 0 then
61331: LD_VAR 0 3
61335: PUSH
61336: LD_VAR 0 4
61340: MINUS
61341: PUSH
61342: LD_INT 0
61344: LESS
61345: IFFALSE 61357
// min_y := 0 else
61347: LD_ADDR_VAR 0 8
61351: PUSH
61352: LD_INT 0
61354: ST_TO_ADDR
61355: GO 61373
// min_y := y - r ;
61357: LD_ADDR_VAR 0 8
61361: PUSH
61362: LD_VAR 0 3
61366: PUSH
61367: LD_VAR 0 4
61371: MINUS
61372: ST_TO_ADDR
// max_x := x + r ;
61373: LD_ADDR_VAR 0 9
61377: PUSH
61378: LD_VAR 0 2
61382: PUSH
61383: LD_VAR 0 4
61387: PLUS
61388: ST_TO_ADDR
// max_y := y + r ;
61389: LD_ADDR_VAR 0 10
61393: PUSH
61394: LD_VAR 0 3
61398: PUSH
61399: LD_VAR 0 4
61403: PLUS
61404: ST_TO_ADDR
// for _x = min_x to max_x do
61405: LD_ADDR_VAR 0 11
61409: PUSH
61410: DOUBLE
61411: LD_VAR 0 7
61415: DEC
61416: ST_TO_ADDR
61417: LD_VAR 0 9
61421: PUSH
61422: FOR_TO
61423: IFFALSE 61540
// for _y = min_y to max_y do
61425: LD_ADDR_VAR 0 12
61429: PUSH
61430: DOUBLE
61431: LD_VAR 0 8
61435: DEC
61436: ST_TO_ADDR
61437: LD_VAR 0 10
61441: PUSH
61442: FOR_TO
61443: IFFALSE 61536
// begin if not ValidHex ( _x , _y ) then
61445: LD_VAR 0 11
61449: PPUSH
61450: LD_VAR 0 12
61454: PPUSH
61455: CALL_OW 488
61459: NOT
61460: IFFALSE 61464
// continue ;
61462: GO 61442
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61464: LD_VAR 0 11
61468: PPUSH
61469: LD_VAR 0 12
61473: PPUSH
61474: CALL_OW 351
61478: PUSH
61479: LD_VAR 0 11
61483: PPUSH
61484: LD_VAR 0 12
61488: PPUSH
61489: CALL_OW 554
61493: AND
61494: IFFALSE 61534
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61496: LD_ADDR_VAR 0 13
61500: PUSH
61501: LD_VAR 0 13
61505: PPUSH
61506: LD_VAR 0 13
61510: PUSH
61511: LD_INT 1
61513: PLUS
61514: PPUSH
61515: LD_VAR 0 11
61519: PUSH
61520: LD_VAR 0 12
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PPUSH
61529: CALL_OW 2
61533: ST_TO_ADDR
// end ;
61534: GO 61442
61536: POP
61537: POP
61538: GO 61422
61540: POP
61541: POP
// if not list then
61542: LD_VAR 0 13
61546: NOT
61547: IFFALSE 61551
// exit ;
61549: GO 61622
// for i in list do
61551: LD_ADDR_VAR 0 6
61555: PUSH
61556: LD_VAR 0 13
61560: PUSH
61561: FOR_IN
61562: IFFALSE 61620
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61564: LD_VAR 0 1
61568: PPUSH
61569: LD_STRING M
61571: PUSH
61572: LD_VAR 0 6
61576: PUSH
61577: LD_INT 1
61579: ARRAY
61580: PUSH
61581: LD_VAR 0 6
61585: PUSH
61586: LD_INT 2
61588: ARRAY
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: PUSH
61611: EMPTY
61612: LIST
61613: PPUSH
61614: CALL_OW 447
61618: GO 61561
61620: POP
61621: POP
// end ;
61622: LD_VAR 0 5
61626: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61627: LD_EXP 89
61631: NOT
61632: IFFALSE 61682
61634: GO 61636
61636: DISABLE
// begin initHack := true ;
61637: LD_ADDR_EXP 89
61641: PUSH
61642: LD_INT 1
61644: ST_TO_ADDR
// hackTanks := [ ] ;
61645: LD_ADDR_EXP 90
61649: PUSH
61650: EMPTY
61651: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61652: LD_ADDR_EXP 91
61656: PUSH
61657: EMPTY
61658: ST_TO_ADDR
// hackLimit := 3 ;
61659: LD_ADDR_EXP 92
61663: PUSH
61664: LD_INT 3
61666: ST_TO_ADDR
// hackDist := 12 ;
61667: LD_ADDR_EXP 93
61671: PUSH
61672: LD_INT 12
61674: ST_TO_ADDR
// hackCounter := [ ] ;
61675: LD_ADDR_EXP 94
61679: PUSH
61680: EMPTY
61681: ST_TO_ADDR
// end ;
61682: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61683: LD_EXP 89
61687: PUSH
61688: LD_INT 34
61690: PUSH
61691: LD_INT 99
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PPUSH
61698: CALL_OW 69
61702: AND
61703: IFFALSE 61956
61705: GO 61707
61707: DISABLE
61708: LD_INT 0
61710: PPUSH
61711: PPUSH
// begin enable ;
61712: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61713: LD_ADDR_VAR 0 1
61717: PUSH
61718: LD_INT 34
61720: PUSH
61721: LD_INT 99
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PPUSH
61728: CALL_OW 69
61732: PUSH
61733: FOR_IN
61734: IFFALSE 61954
// begin if not i in hackTanks then
61736: LD_VAR 0 1
61740: PUSH
61741: LD_EXP 90
61745: IN
61746: NOT
61747: IFFALSE 61830
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61749: LD_ADDR_EXP 90
61753: PUSH
61754: LD_EXP 90
61758: PPUSH
61759: LD_EXP 90
61763: PUSH
61764: LD_INT 1
61766: PLUS
61767: PPUSH
61768: LD_VAR 0 1
61772: PPUSH
61773: CALL_OW 1
61777: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61778: LD_ADDR_EXP 91
61782: PUSH
61783: LD_EXP 91
61787: PPUSH
61788: LD_EXP 91
61792: PUSH
61793: LD_INT 1
61795: PLUS
61796: PPUSH
61797: EMPTY
61798: PPUSH
61799: CALL_OW 1
61803: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61804: LD_ADDR_EXP 94
61808: PUSH
61809: LD_EXP 94
61813: PPUSH
61814: LD_EXP 94
61818: PUSH
61819: LD_INT 1
61821: PLUS
61822: PPUSH
61823: EMPTY
61824: PPUSH
61825: CALL_OW 1
61829: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61830: LD_VAR 0 1
61834: PPUSH
61835: CALL_OW 302
61839: NOT
61840: IFFALSE 61853
// begin HackUnlinkAll ( i ) ;
61842: LD_VAR 0 1
61846: PPUSH
61847: CALL 61959 0 1
// continue ;
61851: GO 61733
// end ; HackCheckCapturedStatus ( i ) ;
61853: LD_VAR 0 1
61857: PPUSH
61858: CALL 62402 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61862: LD_ADDR_VAR 0 2
61866: PUSH
61867: LD_INT 81
61869: PUSH
61870: LD_VAR 0 1
61874: PPUSH
61875: CALL_OW 255
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 33
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 91
61896: PUSH
61897: LD_VAR 0 1
61901: PUSH
61902: LD_EXP 93
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 50
61914: PUSH
61915: EMPTY
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: PPUSH
61924: CALL_OW 69
61928: ST_TO_ADDR
// if not tmp then
61929: LD_VAR 0 2
61933: NOT
61934: IFFALSE 61938
// continue ;
61936: GO 61733
// HackLink ( i , tmp ) ;
61938: LD_VAR 0 1
61942: PPUSH
61943: LD_VAR 0 2
61947: PPUSH
61948: CALL 62095 0 2
// end ;
61952: GO 61733
61954: POP
61955: POP
// end ;
61956: PPOPN 2
61958: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61959: LD_INT 0
61961: PPUSH
61962: PPUSH
61963: PPUSH
// if not hack in hackTanks then
61964: LD_VAR 0 1
61968: PUSH
61969: LD_EXP 90
61973: IN
61974: NOT
61975: IFFALSE 61979
// exit ;
61977: GO 62090
// index := GetElementIndex ( hackTanks , hack ) ;
61979: LD_ADDR_VAR 0 4
61983: PUSH
61984: LD_EXP 90
61988: PPUSH
61989: LD_VAR 0 1
61993: PPUSH
61994: CALL 7981 0 2
61998: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61999: LD_EXP 91
62003: PUSH
62004: LD_VAR 0 4
62008: ARRAY
62009: IFFALSE 62090
// begin for i in hackTanksCaptured [ index ] do
62011: LD_ADDR_VAR 0 3
62015: PUSH
62016: LD_EXP 91
62020: PUSH
62021: LD_VAR 0 4
62025: ARRAY
62026: PUSH
62027: FOR_IN
62028: IFFALSE 62054
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62030: LD_VAR 0 3
62034: PUSH
62035: LD_INT 1
62037: ARRAY
62038: PPUSH
62039: LD_VAR 0 3
62043: PUSH
62044: LD_INT 2
62046: ARRAY
62047: PPUSH
62048: CALL_OW 235
62052: GO 62027
62054: POP
62055: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62056: LD_ADDR_EXP 91
62060: PUSH
62061: LD_EXP 91
62065: PPUSH
62066: LD_VAR 0 4
62070: PPUSH
62071: EMPTY
62072: PPUSH
62073: CALL_OW 1
62077: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62078: LD_VAR 0 1
62082: PPUSH
62083: LD_INT 0
62085: PPUSH
62086: CALL_OW 505
// end ; end ;
62090: LD_VAR 0 2
62094: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62095: LD_INT 0
62097: PPUSH
62098: PPUSH
62099: PPUSH
// if not hack in hackTanks or not vehicles then
62100: LD_VAR 0 1
62104: PUSH
62105: LD_EXP 90
62109: IN
62110: NOT
62111: PUSH
62112: LD_VAR 0 2
62116: NOT
62117: OR
62118: IFFALSE 62122
// exit ;
62120: GO 62397
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62122: LD_ADDR_VAR 0 2
62126: PUSH
62127: LD_VAR 0 1
62131: PPUSH
62132: LD_VAR 0 2
62136: PPUSH
62137: LD_INT 1
62139: PPUSH
62140: LD_INT 1
62142: PPUSH
62143: CALL 8631 0 4
62147: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62148: LD_ADDR_VAR 0 5
62152: PUSH
62153: LD_EXP 90
62157: PPUSH
62158: LD_VAR 0 1
62162: PPUSH
62163: CALL 7981 0 2
62167: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62168: LD_EXP 91
62172: PUSH
62173: LD_VAR 0 5
62177: ARRAY
62178: PUSH
62179: LD_EXP 92
62183: LESS
62184: IFFALSE 62373
// begin for i := 1 to vehicles do
62186: LD_ADDR_VAR 0 4
62190: PUSH
62191: DOUBLE
62192: LD_INT 1
62194: DEC
62195: ST_TO_ADDR
62196: LD_VAR 0 2
62200: PUSH
62201: FOR_TO
62202: IFFALSE 62371
// begin if hackTanksCaptured [ index ] = hackLimit then
62204: LD_EXP 91
62208: PUSH
62209: LD_VAR 0 5
62213: ARRAY
62214: PUSH
62215: LD_EXP 92
62219: EQUAL
62220: IFFALSE 62224
// break ;
62222: GO 62371
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62224: LD_ADDR_EXP 94
62228: PUSH
62229: LD_EXP 94
62233: PPUSH
62234: LD_VAR 0 5
62238: PPUSH
62239: LD_EXP 94
62243: PUSH
62244: LD_VAR 0 5
62248: ARRAY
62249: PUSH
62250: LD_INT 1
62252: PLUS
62253: PPUSH
62254: CALL_OW 1
62258: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62259: LD_ADDR_EXP 91
62263: PUSH
62264: LD_EXP 91
62268: PPUSH
62269: LD_VAR 0 5
62273: PUSH
62274: LD_EXP 91
62278: PUSH
62279: LD_VAR 0 5
62283: ARRAY
62284: PUSH
62285: LD_INT 1
62287: PLUS
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PPUSH
62293: LD_VAR 0 2
62297: PUSH
62298: LD_VAR 0 4
62302: ARRAY
62303: PUSH
62304: LD_VAR 0 2
62308: PUSH
62309: LD_VAR 0 4
62313: ARRAY
62314: PPUSH
62315: CALL_OW 255
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PPUSH
62324: CALL 8196 0 3
62328: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62329: LD_VAR 0 2
62333: PUSH
62334: LD_VAR 0 4
62338: ARRAY
62339: PPUSH
62340: LD_VAR 0 1
62344: PPUSH
62345: CALL_OW 255
62349: PPUSH
62350: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62354: LD_VAR 0 2
62358: PUSH
62359: LD_VAR 0 4
62363: ARRAY
62364: PPUSH
62365: CALL_OW 141
// end ;
62369: GO 62201
62371: POP
62372: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62373: LD_VAR 0 1
62377: PPUSH
62378: LD_EXP 91
62382: PUSH
62383: LD_VAR 0 5
62387: ARRAY
62388: PUSH
62389: LD_INT 0
62391: PLUS
62392: PPUSH
62393: CALL_OW 505
// end ;
62397: LD_VAR 0 3
62401: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62402: LD_INT 0
62404: PPUSH
62405: PPUSH
62406: PPUSH
62407: PPUSH
// if not hack in hackTanks then
62408: LD_VAR 0 1
62412: PUSH
62413: LD_EXP 90
62417: IN
62418: NOT
62419: IFFALSE 62423
// exit ;
62421: GO 62663
// index := GetElementIndex ( hackTanks , hack ) ;
62423: LD_ADDR_VAR 0 4
62427: PUSH
62428: LD_EXP 90
62432: PPUSH
62433: LD_VAR 0 1
62437: PPUSH
62438: CALL 7981 0 2
62442: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62443: LD_ADDR_VAR 0 3
62447: PUSH
62448: DOUBLE
62449: LD_EXP 91
62453: PUSH
62454: LD_VAR 0 4
62458: ARRAY
62459: INC
62460: ST_TO_ADDR
62461: LD_INT 1
62463: PUSH
62464: FOR_DOWNTO
62465: IFFALSE 62637
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62467: LD_ADDR_VAR 0 5
62471: PUSH
62472: LD_EXP 91
62476: PUSH
62477: LD_VAR 0 4
62481: ARRAY
62482: PUSH
62483: LD_VAR 0 3
62487: ARRAY
62488: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62489: LD_VAR 0 5
62493: PUSH
62494: LD_INT 1
62496: ARRAY
62497: PPUSH
62498: CALL_OW 302
62502: NOT
62503: PUSH
62504: LD_VAR 0 5
62508: PUSH
62509: LD_INT 1
62511: ARRAY
62512: PPUSH
62513: CALL_OW 255
62517: PUSH
62518: LD_VAR 0 1
62522: PPUSH
62523: CALL_OW 255
62527: NONEQUAL
62528: OR
62529: IFFALSE 62635
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62531: LD_VAR 0 5
62535: PUSH
62536: LD_INT 1
62538: ARRAY
62539: PPUSH
62540: CALL_OW 305
62544: PUSH
62545: LD_VAR 0 5
62549: PUSH
62550: LD_INT 1
62552: ARRAY
62553: PPUSH
62554: CALL_OW 255
62558: PUSH
62559: LD_VAR 0 1
62563: PPUSH
62564: CALL_OW 255
62568: EQUAL
62569: AND
62570: IFFALSE 62594
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62572: LD_VAR 0 5
62576: PUSH
62577: LD_INT 1
62579: ARRAY
62580: PPUSH
62581: LD_VAR 0 5
62585: PUSH
62586: LD_INT 2
62588: ARRAY
62589: PPUSH
62590: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62594: LD_ADDR_EXP 91
62598: PUSH
62599: LD_EXP 91
62603: PPUSH
62604: LD_VAR 0 4
62608: PPUSH
62609: LD_EXP 91
62613: PUSH
62614: LD_VAR 0 4
62618: ARRAY
62619: PPUSH
62620: LD_VAR 0 3
62624: PPUSH
62625: CALL_OW 3
62629: PPUSH
62630: CALL_OW 1
62634: ST_TO_ADDR
// end ; end ;
62635: GO 62464
62637: POP
62638: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62639: LD_VAR 0 1
62643: PPUSH
62644: LD_EXP 91
62648: PUSH
62649: LD_VAR 0 4
62653: ARRAY
62654: PUSH
62655: LD_INT 0
62657: PLUS
62658: PPUSH
62659: CALL_OW 505
// end ;
62663: LD_VAR 0 2
62667: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62668: LD_INT 0
62670: PPUSH
62671: PPUSH
62672: PPUSH
62673: PPUSH
// if not hack in hackTanks then
62674: LD_VAR 0 1
62678: PUSH
62679: LD_EXP 90
62683: IN
62684: NOT
62685: IFFALSE 62689
// exit ;
62687: GO 62774
// index := GetElementIndex ( hackTanks , hack ) ;
62689: LD_ADDR_VAR 0 5
62693: PUSH
62694: LD_EXP 90
62698: PPUSH
62699: LD_VAR 0 1
62703: PPUSH
62704: CALL 7981 0 2
62708: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62709: LD_ADDR_VAR 0 4
62713: PUSH
62714: DOUBLE
62715: LD_INT 1
62717: DEC
62718: ST_TO_ADDR
62719: LD_EXP 91
62723: PUSH
62724: LD_VAR 0 5
62728: ARRAY
62729: PUSH
62730: FOR_TO
62731: IFFALSE 62772
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62733: LD_EXP 91
62737: PUSH
62738: LD_VAR 0 5
62742: ARRAY
62743: PUSH
62744: LD_VAR 0 4
62748: ARRAY
62749: PUSH
62750: LD_INT 1
62752: ARRAY
62753: PUSH
62754: LD_VAR 0 2
62758: EQUAL
62759: IFFALSE 62770
// KillUnit ( vehicle ) ;
62761: LD_VAR 0 2
62765: PPUSH
62766: CALL_OW 66
62770: GO 62730
62772: POP
62773: POP
// end ;
62774: LD_VAR 0 3
62778: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62779: LD_EXP 95
62783: NOT
62784: IFFALSE 62819
62786: GO 62788
62788: DISABLE
// begin initMiner := true ;
62789: LD_ADDR_EXP 95
62793: PUSH
62794: LD_INT 1
62796: ST_TO_ADDR
// minersList := [ ] ;
62797: LD_ADDR_EXP 96
62801: PUSH
62802: EMPTY
62803: ST_TO_ADDR
// minerMinesList := [ ] ;
62804: LD_ADDR_EXP 97
62808: PUSH
62809: EMPTY
62810: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62811: LD_ADDR_EXP 98
62815: PUSH
62816: LD_INT 5
62818: ST_TO_ADDR
// end ;
62819: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62820: LD_EXP 95
62824: PUSH
62825: LD_INT 34
62827: PUSH
62828: LD_INT 81
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PPUSH
62835: CALL_OW 69
62839: AND
62840: IFFALSE 63301
62842: GO 62844
62844: DISABLE
62845: LD_INT 0
62847: PPUSH
62848: PPUSH
62849: PPUSH
62850: PPUSH
// begin enable ;
62851: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62852: LD_ADDR_VAR 0 1
62856: PUSH
62857: LD_INT 34
62859: PUSH
62860: LD_INT 81
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PPUSH
62867: CALL_OW 69
62871: PUSH
62872: FOR_IN
62873: IFFALSE 62945
// begin if not i in minersList then
62875: LD_VAR 0 1
62879: PUSH
62880: LD_EXP 96
62884: IN
62885: NOT
62886: IFFALSE 62943
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62888: LD_ADDR_EXP 96
62892: PUSH
62893: LD_EXP 96
62897: PPUSH
62898: LD_EXP 96
62902: PUSH
62903: LD_INT 1
62905: PLUS
62906: PPUSH
62907: LD_VAR 0 1
62911: PPUSH
62912: CALL_OW 1
62916: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62917: LD_ADDR_EXP 97
62921: PUSH
62922: LD_EXP 97
62926: PPUSH
62927: LD_EXP 97
62931: PUSH
62932: LD_INT 1
62934: PLUS
62935: PPUSH
62936: EMPTY
62937: PPUSH
62938: CALL_OW 1
62942: ST_TO_ADDR
// end end ;
62943: GO 62872
62945: POP
62946: POP
// for i := minerMinesList downto 1 do
62947: LD_ADDR_VAR 0 1
62951: PUSH
62952: DOUBLE
62953: LD_EXP 97
62957: INC
62958: ST_TO_ADDR
62959: LD_INT 1
62961: PUSH
62962: FOR_DOWNTO
62963: IFFALSE 63299
// begin if IsLive ( minersList [ i ] ) then
62965: LD_EXP 96
62969: PUSH
62970: LD_VAR 0 1
62974: ARRAY
62975: PPUSH
62976: CALL_OW 300
62980: IFFALSE 63008
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62982: LD_EXP 96
62986: PUSH
62987: LD_VAR 0 1
62991: ARRAY
62992: PPUSH
62993: LD_EXP 97
62997: PUSH
62998: LD_VAR 0 1
63002: ARRAY
63003: PPUSH
63004: CALL_OW 505
// if not minerMinesList [ i ] then
63008: LD_EXP 97
63012: PUSH
63013: LD_VAR 0 1
63017: ARRAY
63018: NOT
63019: IFFALSE 63023
// continue ;
63021: GO 62962
// for j := minerMinesList [ i ] downto 1 do
63023: LD_ADDR_VAR 0 2
63027: PUSH
63028: DOUBLE
63029: LD_EXP 97
63033: PUSH
63034: LD_VAR 0 1
63038: ARRAY
63039: INC
63040: ST_TO_ADDR
63041: LD_INT 1
63043: PUSH
63044: FOR_DOWNTO
63045: IFFALSE 63295
// begin side := GetSide ( minersList [ i ] ) ;
63047: LD_ADDR_VAR 0 3
63051: PUSH
63052: LD_EXP 96
63056: PUSH
63057: LD_VAR 0 1
63061: ARRAY
63062: PPUSH
63063: CALL_OW 255
63067: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63068: LD_ADDR_VAR 0 4
63072: PUSH
63073: LD_EXP 97
63077: PUSH
63078: LD_VAR 0 1
63082: ARRAY
63083: PUSH
63084: LD_VAR 0 2
63088: ARRAY
63089: PUSH
63090: LD_INT 1
63092: ARRAY
63093: PPUSH
63094: LD_EXP 97
63098: PUSH
63099: LD_VAR 0 1
63103: ARRAY
63104: PUSH
63105: LD_VAR 0 2
63109: ARRAY
63110: PUSH
63111: LD_INT 2
63113: ARRAY
63114: PPUSH
63115: CALL_OW 428
63119: ST_TO_ADDR
// if not tmp then
63120: LD_VAR 0 4
63124: NOT
63125: IFFALSE 63129
// continue ;
63127: GO 63044
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63129: LD_VAR 0 4
63133: PUSH
63134: LD_INT 81
63136: PUSH
63137: LD_VAR 0 3
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PPUSH
63146: CALL_OW 69
63150: IN
63151: PUSH
63152: LD_EXP 97
63156: PUSH
63157: LD_VAR 0 1
63161: ARRAY
63162: PUSH
63163: LD_VAR 0 2
63167: ARRAY
63168: PUSH
63169: LD_INT 1
63171: ARRAY
63172: PPUSH
63173: LD_EXP 97
63177: PUSH
63178: LD_VAR 0 1
63182: ARRAY
63183: PUSH
63184: LD_VAR 0 2
63188: ARRAY
63189: PUSH
63190: LD_INT 2
63192: ARRAY
63193: PPUSH
63194: CALL_OW 458
63198: AND
63199: IFFALSE 63293
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63201: LD_EXP 97
63205: PUSH
63206: LD_VAR 0 1
63210: ARRAY
63211: PUSH
63212: LD_VAR 0 2
63216: ARRAY
63217: PUSH
63218: LD_INT 1
63220: ARRAY
63221: PPUSH
63222: LD_EXP 97
63226: PUSH
63227: LD_VAR 0 1
63231: ARRAY
63232: PUSH
63233: LD_VAR 0 2
63237: ARRAY
63238: PUSH
63239: LD_INT 2
63241: ARRAY
63242: PPUSH
63243: LD_VAR 0 3
63247: PPUSH
63248: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63252: LD_ADDR_EXP 97
63256: PUSH
63257: LD_EXP 97
63261: PPUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: LD_EXP 97
63271: PUSH
63272: LD_VAR 0 1
63276: ARRAY
63277: PPUSH
63278: LD_VAR 0 2
63282: PPUSH
63283: CALL_OW 3
63287: PPUSH
63288: CALL_OW 1
63292: ST_TO_ADDR
// end ; end ;
63293: GO 63044
63295: POP
63296: POP
// end ;
63297: GO 62962
63299: POP
63300: POP
// end ;
63301: PPOPN 4
63303: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63304: LD_INT 0
63306: PPUSH
63307: PPUSH
// result := false ;
63308: LD_ADDR_VAR 0 4
63312: PUSH
63313: LD_INT 0
63315: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63316: LD_VAR 0 1
63320: PPUSH
63321: CALL_OW 264
63325: PUSH
63326: LD_INT 81
63328: EQUAL
63329: NOT
63330: IFFALSE 63334
// exit ;
63332: GO 63574
// index := GetElementIndex ( minersList , unit ) ;
63334: LD_ADDR_VAR 0 5
63338: PUSH
63339: LD_EXP 96
63343: PPUSH
63344: LD_VAR 0 1
63348: PPUSH
63349: CALL 7981 0 2
63353: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63354: LD_EXP 97
63358: PUSH
63359: LD_VAR 0 5
63363: ARRAY
63364: PUSH
63365: LD_EXP 98
63369: GREATEREQUAL
63370: IFFALSE 63374
// exit ;
63372: GO 63574
// ComMoveXY ( unit , x , y ) ;
63374: LD_VAR 0 1
63378: PPUSH
63379: LD_VAR 0 2
63383: PPUSH
63384: LD_VAR 0 3
63388: PPUSH
63389: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63393: LD_INT 35
63395: PPUSH
63396: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63400: LD_VAR 0 1
63404: PPUSH
63405: LD_VAR 0 2
63409: PPUSH
63410: LD_VAR 0 3
63414: PPUSH
63415: CALL 39336 0 3
63419: NOT
63420: PUSH
63421: LD_VAR 0 1
63425: PPUSH
63426: CALL_OW 314
63430: AND
63431: IFFALSE 63435
// exit ;
63433: GO 63574
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63435: LD_VAR 0 2
63439: PPUSH
63440: LD_VAR 0 3
63444: PPUSH
63445: CALL_OW 428
63449: PUSH
63450: LD_VAR 0 1
63454: EQUAL
63455: PUSH
63456: LD_VAR 0 1
63460: PPUSH
63461: CALL_OW 314
63465: NOT
63466: AND
63467: IFFALSE 63393
// PlaySoundXY ( x , y , PlantMine ) ;
63469: LD_VAR 0 2
63473: PPUSH
63474: LD_VAR 0 3
63478: PPUSH
63479: LD_STRING PlantMine
63481: PPUSH
63482: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63486: LD_VAR 0 2
63490: PPUSH
63491: LD_VAR 0 3
63495: PPUSH
63496: LD_VAR 0 1
63500: PPUSH
63501: CALL_OW 255
63505: PPUSH
63506: LD_INT 0
63508: PPUSH
63509: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63513: LD_ADDR_EXP 97
63517: PUSH
63518: LD_EXP 97
63522: PPUSH
63523: LD_VAR 0 5
63527: PUSH
63528: LD_EXP 97
63532: PUSH
63533: LD_VAR 0 5
63537: ARRAY
63538: PUSH
63539: LD_INT 1
63541: PLUS
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PPUSH
63547: LD_VAR 0 2
63551: PUSH
63552: LD_VAR 0 3
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PPUSH
63561: CALL 8196 0 3
63565: ST_TO_ADDR
// result := true ;
63566: LD_ADDR_VAR 0 4
63570: PUSH
63571: LD_INT 1
63573: ST_TO_ADDR
// end ;
63574: LD_VAR 0 4
63578: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63579: LD_INT 0
63581: PPUSH
63582: PPUSH
63583: PPUSH
// if not unit in minersList then
63584: LD_VAR 0 1
63588: PUSH
63589: LD_EXP 96
63593: IN
63594: NOT
63595: IFFALSE 63599
// exit ;
63597: GO 63991
// index := GetElementIndex ( minersList , unit ) ;
63599: LD_ADDR_VAR 0 6
63603: PUSH
63604: LD_EXP 96
63608: PPUSH
63609: LD_VAR 0 1
63613: PPUSH
63614: CALL 7981 0 2
63618: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63619: LD_ADDR_VAR 0 5
63623: PUSH
63624: DOUBLE
63625: LD_EXP 97
63629: PUSH
63630: LD_VAR 0 6
63634: ARRAY
63635: INC
63636: ST_TO_ADDR
63637: LD_INT 1
63639: PUSH
63640: FOR_DOWNTO
63641: IFFALSE 63802
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63643: LD_EXP 97
63647: PUSH
63648: LD_VAR 0 6
63652: ARRAY
63653: PUSH
63654: LD_VAR 0 5
63658: ARRAY
63659: PUSH
63660: LD_INT 1
63662: ARRAY
63663: PUSH
63664: LD_VAR 0 2
63668: EQUAL
63669: PUSH
63670: LD_EXP 97
63674: PUSH
63675: LD_VAR 0 6
63679: ARRAY
63680: PUSH
63681: LD_VAR 0 5
63685: ARRAY
63686: PUSH
63687: LD_INT 2
63689: ARRAY
63690: PUSH
63691: LD_VAR 0 3
63695: EQUAL
63696: AND
63697: IFFALSE 63800
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63699: LD_EXP 97
63703: PUSH
63704: LD_VAR 0 6
63708: ARRAY
63709: PUSH
63710: LD_VAR 0 5
63714: ARRAY
63715: PUSH
63716: LD_INT 1
63718: ARRAY
63719: PPUSH
63720: LD_EXP 97
63724: PUSH
63725: LD_VAR 0 6
63729: ARRAY
63730: PUSH
63731: LD_VAR 0 5
63735: ARRAY
63736: PUSH
63737: LD_INT 2
63739: ARRAY
63740: PPUSH
63741: LD_VAR 0 1
63745: PPUSH
63746: CALL_OW 255
63750: PPUSH
63751: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63755: LD_ADDR_EXP 97
63759: PUSH
63760: LD_EXP 97
63764: PPUSH
63765: LD_VAR 0 6
63769: PPUSH
63770: LD_EXP 97
63774: PUSH
63775: LD_VAR 0 6
63779: ARRAY
63780: PPUSH
63781: LD_VAR 0 5
63785: PPUSH
63786: CALL_OW 3
63790: PPUSH
63791: CALL_OW 1
63795: ST_TO_ADDR
// exit ;
63796: POP
63797: POP
63798: GO 63991
// end ; end ;
63800: GO 63640
63802: POP
63803: POP
// for i := minerMinesList [ index ] downto 1 do
63804: LD_ADDR_VAR 0 5
63808: PUSH
63809: DOUBLE
63810: LD_EXP 97
63814: PUSH
63815: LD_VAR 0 6
63819: ARRAY
63820: INC
63821: ST_TO_ADDR
63822: LD_INT 1
63824: PUSH
63825: FOR_DOWNTO
63826: IFFALSE 63989
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63828: LD_EXP 97
63832: PUSH
63833: LD_VAR 0 6
63837: ARRAY
63838: PUSH
63839: LD_VAR 0 5
63843: ARRAY
63844: PUSH
63845: LD_INT 1
63847: ARRAY
63848: PPUSH
63849: LD_EXP 97
63853: PUSH
63854: LD_VAR 0 6
63858: ARRAY
63859: PUSH
63860: LD_VAR 0 5
63864: ARRAY
63865: PUSH
63866: LD_INT 2
63868: ARRAY
63869: PPUSH
63870: LD_VAR 0 2
63874: PPUSH
63875: LD_VAR 0 3
63879: PPUSH
63880: CALL_OW 298
63884: PUSH
63885: LD_INT 6
63887: LESS
63888: IFFALSE 63987
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63890: LD_EXP 97
63894: PUSH
63895: LD_VAR 0 6
63899: ARRAY
63900: PUSH
63901: LD_VAR 0 5
63905: ARRAY
63906: PUSH
63907: LD_INT 1
63909: ARRAY
63910: PPUSH
63911: LD_EXP 97
63915: PUSH
63916: LD_VAR 0 6
63920: ARRAY
63921: PUSH
63922: LD_VAR 0 5
63926: ARRAY
63927: PUSH
63928: LD_INT 2
63930: ARRAY
63931: PPUSH
63932: LD_VAR 0 1
63936: PPUSH
63937: CALL_OW 255
63941: PPUSH
63942: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63946: LD_ADDR_EXP 97
63950: PUSH
63951: LD_EXP 97
63955: PPUSH
63956: LD_VAR 0 6
63960: PPUSH
63961: LD_EXP 97
63965: PUSH
63966: LD_VAR 0 6
63970: ARRAY
63971: PPUSH
63972: LD_VAR 0 5
63976: PPUSH
63977: CALL_OW 3
63981: PPUSH
63982: CALL_OW 1
63986: ST_TO_ADDR
// end ; end ;
63987: GO 63825
63989: POP
63990: POP
// end ;
63991: LD_VAR 0 4
63995: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63996: LD_INT 0
63998: PPUSH
63999: PPUSH
64000: PPUSH
64001: PPUSH
64002: PPUSH
64003: PPUSH
64004: PPUSH
64005: PPUSH
64006: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64007: LD_VAR 0 1
64011: PPUSH
64012: CALL_OW 264
64016: PUSH
64017: LD_INT 81
64019: EQUAL
64020: NOT
64021: PUSH
64022: LD_VAR 0 1
64026: PUSH
64027: LD_EXP 96
64031: IN
64032: NOT
64033: OR
64034: IFFALSE 64038
// exit ;
64036: GO 64360
// index := GetElementIndex ( minersList , unit ) ;
64038: LD_ADDR_VAR 0 6
64042: PUSH
64043: LD_EXP 96
64047: PPUSH
64048: LD_VAR 0 1
64052: PPUSH
64053: CALL 7981 0 2
64057: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64058: LD_ADDR_VAR 0 8
64062: PUSH
64063: LD_EXP 98
64067: PUSH
64068: LD_EXP 97
64072: PUSH
64073: LD_VAR 0 6
64077: ARRAY
64078: MINUS
64079: ST_TO_ADDR
// if not minesFreeAmount then
64080: LD_VAR 0 8
64084: NOT
64085: IFFALSE 64089
// exit ;
64087: GO 64360
// tmp := [ ] ;
64089: LD_ADDR_VAR 0 7
64093: PUSH
64094: EMPTY
64095: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64096: LD_ADDR_VAR 0 5
64100: PUSH
64101: DOUBLE
64102: LD_INT 1
64104: DEC
64105: ST_TO_ADDR
64106: LD_VAR 0 8
64110: PUSH
64111: FOR_TO
64112: IFFALSE 64307
// begin _d := rand ( 0 , 5 ) ;
64114: LD_ADDR_VAR 0 11
64118: PUSH
64119: LD_INT 0
64121: PPUSH
64122: LD_INT 5
64124: PPUSH
64125: CALL_OW 12
64129: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64130: LD_ADDR_VAR 0 12
64134: PUSH
64135: LD_INT 2
64137: PPUSH
64138: LD_INT 6
64140: PPUSH
64141: CALL_OW 12
64145: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64146: LD_ADDR_VAR 0 9
64150: PUSH
64151: LD_VAR 0 2
64155: PPUSH
64156: LD_VAR 0 11
64160: PPUSH
64161: LD_VAR 0 12
64165: PPUSH
64166: CALL_OW 272
64170: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64171: LD_ADDR_VAR 0 10
64175: PUSH
64176: LD_VAR 0 3
64180: PPUSH
64181: LD_VAR 0 11
64185: PPUSH
64186: LD_VAR 0 12
64190: PPUSH
64191: CALL_OW 273
64195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64196: LD_VAR 0 9
64200: PPUSH
64201: LD_VAR 0 10
64205: PPUSH
64206: CALL_OW 488
64210: PUSH
64211: LD_VAR 0 9
64215: PUSH
64216: LD_VAR 0 10
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_VAR 0 7
64229: IN
64230: NOT
64231: AND
64232: PUSH
64233: LD_VAR 0 9
64237: PPUSH
64238: LD_VAR 0 10
64242: PPUSH
64243: CALL_OW 458
64247: NOT
64248: AND
64249: IFFALSE 64291
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64251: LD_ADDR_VAR 0 7
64255: PUSH
64256: LD_VAR 0 7
64260: PPUSH
64261: LD_VAR 0 7
64265: PUSH
64266: LD_INT 1
64268: PLUS
64269: PPUSH
64270: LD_VAR 0 9
64274: PUSH
64275: LD_VAR 0 10
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PPUSH
64284: CALL_OW 1
64288: ST_TO_ADDR
64289: GO 64305
// i := i - 1 ;
64291: LD_ADDR_VAR 0 5
64295: PUSH
64296: LD_VAR 0 5
64300: PUSH
64301: LD_INT 1
64303: MINUS
64304: ST_TO_ADDR
// end ;
64305: GO 64111
64307: POP
64308: POP
// for i in tmp do
64309: LD_ADDR_VAR 0 5
64313: PUSH
64314: LD_VAR 0 7
64318: PUSH
64319: FOR_IN
64320: IFFALSE 64358
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64322: LD_VAR 0 1
64326: PPUSH
64327: LD_VAR 0 5
64331: PUSH
64332: LD_INT 1
64334: ARRAY
64335: PPUSH
64336: LD_VAR 0 5
64340: PUSH
64341: LD_INT 2
64343: ARRAY
64344: PPUSH
64345: CALL 63304 0 3
64349: NOT
64350: IFFALSE 64356
// exit ;
64352: POP
64353: POP
64354: GO 64360
64356: GO 64319
64358: POP
64359: POP
// end ;
64360: LD_VAR 0 4
64364: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64365: LD_INT 0
64367: PPUSH
64368: PPUSH
64369: PPUSH
64370: PPUSH
64371: PPUSH
64372: PPUSH
64373: PPUSH
// if not GetClass ( unit ) = class_sniper then
64374: LD_VAR 0 1
64378: PPUSH
64379: CALL_OW 257
64383: PUSH
64384: LD_INT 5
64386: EQUAL
64387: NOT
64388: IFFALSE 64392
// exit ;
64390: GO 64780
// dist := 8 ;
64392: LD_ADDR_VAR 0 5
64396: PUSH
64397: LD_INT 8
64399: ST_TO_ADDR
// viewRange := 12 ;
64400: LD_ADDR_VAR 0 7
64404: PUSH
64405: LD_INT 12
64407: ST_TO_ADDR
// side := GetSide ( unit ) ;
64408: LD_ADDR_VAR 0 6
64412: PUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: CALL_OW 255
64422: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64423: LD_INT 61
64425: PPUSH
64426: LD_VAR 0 6
64430: PPUSH
64431: CALL_OW 321
64435: PUSH
64436: LD_INT 2
64438: EQUAL
64439: IFFALSE 64449
// viewRange := 16 ;
64441: LD_ADDR_VAR 0 7
64445: PUSH
64446: LD_INT 16
64448: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64449: LD_VAR 0 1
64453: PPUSH
64454: LD_VAR 0 2
64458: PPUSH
64459: LD_VAR 0 3
64463: PPUSH
64464: CALL_OW 297
64468: PUSH
64469: LD_VAR 0 5
64473: GREATER
64474: IFFALSE 64553
// begin ComMoveXY ( unit , x , y ) ;
64476: LD_VAR 0 1
64480: PPUSH
64481: LD_VAR 0 2
64485: PPUSH
64486: LD_VAR 0 3
64490: PPUSH
64491: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64495: LD_INT 35
64497: PPUSH
64498: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64502: LD_VAR 0 1
64506: PPUSH
64507: LD_VAR 0 2
64511: PPUSH
64512: LD_VAR 0 3
64516: PPUSH
64517: CALL 39336 0 3
64521: NOT
64522: IFFALSE 64526
// exit ;
64524: GO 64780
// until GetDistUnitXY ( unit , x , y ) < dist ;
64526: LD_VAR 0 1
64530: PPUSH
64531: LD_VAR 0 2
64535: PPUSH
64536: LD_VAR 0 3
64540: PPUSH
64541: CALL_OW 297
64545: PUSH
64546: LD_VAR 0 5
64550: LESS
64551: IFFALSE 64495
// end ; ComTurnXY ( unit , x , y ) ;
64553: LD_VAR 0 1
64557: PPUSH
64558: LD_VAR 0 2
64562: PPUSH
64563: LD_VAR 0 3
64567: PPUSH
64568: CALL_OW 118
// wait ( 5 ) ;
64572: LD_INT 5
64574: PPUSH
64575: CALL_OW 67
// _d := GetDir ( unit ) ;
64579: LD_ADDR_VAR 0 10
64583: PUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: CALL_OW 254
64593: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64594: LD_ADDR_VAR 0 8
64598: PUSH
64599: LD_VAR 0 1
64603: PPUSH
64604: CALL_OW 250
64608: PPUSH
64609: LD_VAR 0 10
64613: PPUSH
64614: LD_VAR 0 5
64618: PPUSH
64619: CALL_OW 272
64623: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64624: LD_ADDR_VAR 0 9
64628: PUSH
64629: LD_VAR 0 1
64633: PPUSH
64634: CALL_OW 251
64638: PPUSH
64639: LD_VAR 0 10
64643: PPUSH
64644: LD_VAR 0 5
64648: PPUSH
64649: CALL_OW 273
64653: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64654: LD_VAR 0 8
64658: PPUSH
64659: LD_VAR 0 9
64663: PPUSH
64664: CALL_OW 488
64668: NOT
64669: IFFALSE 64673
// exit ;
64671: GO 64780
// ComAnimCustom ( unit , 1 ) ;
64673: LD_VAR 0 1
64677: PPUSH
64678: LD_INT 1
64680: PPUSH
64681: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64685: LD_VAR 0 8
64689: PPUSH
64690: LD_VAR 0 9
64694: PPUSH
64695: LD_VAR 0 6
64699: PPUSH
64700: LD_VAR 0 7
64704: PPUSH
64705: CALL_OW 330
// repeat wait ( 1 ) ;
64709: LD_INT 1
64711: PPUSH
64712: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64716: LD_VAR 0 1
64720: PPUSH
64721: CALL_OW 316
64725: PUSH
64726: LD_VAR 0 1
64730: PPUSH
64731: CALL_OW 314
64735: OR
64736: PUSH
64737: LD_VAR 0 1
64741: PPUSH
64742: CALL_OW 302
64746: NOT
64747: OR
64748: PUSH
64749: LD_VAR 0 1
64753: PPUSH
64754: CALL_OW 301
64758: OR
64759: IFFALSE 64709
// RemoveSeeing ( _x , _y , side ) ;
64761: LD_VAR 0 8
64765: PPUSH
64766: LD_VAR 0 9
64770: PPUSH
64771: LD_VAR 0 6
64775: PPUSH
64776: CALL_OW 331
// end ;
64780: LD_VAR 0 4
64784: RET
