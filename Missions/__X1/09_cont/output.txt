// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42524 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42524 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42524 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6915 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9653 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9653 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38772 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38900 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 39081 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 39001 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42524 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42524 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42524 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 63783 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 63841 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42524 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42496 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42496 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 57
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 69
2534: IFFALSE 2485
// DialogueOn ;
2536: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2540: LD_EXP 18
2544: PPUSH
2545: LD_STRING DL-Intro-18
2547: PPUSH
2548: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2552: LD_EXP 18
2556: PPUSH
2557: LD_STRING DL-Intro-19
2559: PPUSH
2560: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2564: LD_EXP 18
2568: PPUSH
2569: LD_STRING DL-Intro-20
2571: PPUSH
2572: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_STRING DLt-Intro-21
2583: PPUSH
2584: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2588: LD_EXP 20
2592: PPUSH
2593: LD_STRING DLt-Intro-22
2595: PPUSH
2596: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2600: LD_EXP 20
2604: PPUSH
2605: LD_STRING DLt-Intro-23
2607: PPUSH
2608: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2612: LD_EXP 18
2616: PPUSH
2617: LD_STRING DL-Intro-24
2619: PPUSH
2620: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2624: LD_EXP 20
2628: PPUSH
2629: LD_STRING DLt-Intro-25
2631: PPUSH
2632: CALL_OW 88
// DialogueOff ;
2636: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2640: LD_STRING M2
2642: PPUSH
2643: CALL_OW 337
// Query ( Prepare ) ;
2647: LD_STRING Prepare
2649: PPUSH
2650: CALL_OW 97
// SaveForQuickRestart ;
2654: CALL_OW 22
// end ;
2658: LD_VAR 0 1
2662: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2663: LD_INT 22
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 15
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: IFFALSE 2708
2693: GO 2695
2695: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2696: LD_EXP 18
2700: PPUSH
2701: LD_STRING DL-Cam-1
2703: PPUSH
2704: CALL_OW 88
2708: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2709: LD_OWVAR 1
2713: PUSH
2714: LD_EXP 4
2718: PUSH
2719: LD_INT 2
2721: DIV
2722: GREATEREQUAL
2723: IFFALSE 2748
2725: GO 2727
2727: DISABLE
// begin DialogueOn ;
2728: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2732: LD_EXP 18
2736: PPUSH
2737: LD_STRING DL-Faster-1
2739: PPUSH
2740: CALL_OW 88
// DialogueOff ;
2744: CALL_OW 7
// end ;
2748: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2749: LD_OWVAR 1
2753: PUSH
2754: LD_EXP 4
2758: PUSH
2759: LD_INT 2
2761: DIV
2762: PUSH
2763: LD_INT 10500
2765: PLUS
2766: GREATEREQUAL
2767: IFFALSE 2792
2769: GO 2771
2771: DISABLE
// begin DialogueOn ;
2772: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2776: LD_EXP 18
2780: PPUSH
2781: LD_STRING DL-Faster-2
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// end ;
2792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2793: LD_INT 22
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 57
2808: PUSH
2809: EMPTY
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 2
2818: PUSH
2819: LD_INT 30
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: PUSH
2865: LD_INT 22
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 3
2877: PUSH
2878: LD_INT 57
2880: PUSH
2881: EMPTY
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 30
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: PPUSH
2903: CALL_OW 69
2907: AND
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 3
2921: PUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 30
2934: PUSH
2935: LD_INT 32
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: PPUSH
2947: CALL_OW 69
2951: PUSH
2952: LD_INT 3
2954: GREATEREQUAL
2955: AND
2956: PUSH
2957: LD_INT 22
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 3
2969: PUSH
2970: LD_INT 57
2972: PUSH
2973: EMPTY
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 30
2982: PUSH
2983: LD_INT 5
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_INT 22
3003: PUSH
3004: LD_INT 2
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 3
3013: PUSH
3014: LD_INT 57
3016: PUSH
3017: EMPTY
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 30
3026: PUSH
3027: LD_INT 30
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: AND
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 2
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 3
3057: PUSH
3058: LD_INT 57
3060: PUSH
3061: EMPTY
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: LD_INT 30
3073: PUSH
3074: LD_INT 26
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_INT 30
3083: PUSH
3084: LD_INT 28
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PPUSH
3101: CALL_OW 69
3105: AND
3106: IFFALSE 3143
3108: GO 3110
3110: DISABLE
// begin if tick <= 10 10$00 then
3111: LD_OWVAR 1
3115: PUSH
3116: LD_INT 21000
3118: LESSEQUAL
3119: IFFALSE 3128
// SetAchievement ( ACH_BOB ) ;
3121: LD_STRING ACH_BOB
3123: PPUSH
3124: CALL_OW 543
// baseDone := true ;
3128: LD_ADDR_EXP 5
3132: PUSH
3133: LD_INT 1
3135: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3136: LD_STRING M1out
3138: PPUSH
3139: CALL_OW 337
// end ;
3143: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3144: LD_EXP 5
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 21
3161: PUSH
3162: LD_INT 2
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 34
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 34
3187: PUSH
3188: LD_INT 88
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 22
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 21
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 23
3236: PUSH
3237: LD_INT 2
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 69
3253: PPUSH
3254: CALL 6915 0 1
3258: GREATEREQUAL
3259: AND
3260: IFFALSE 3352
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3269: LD_EXP 18
3273: PPUSH
3274: LD_STRING DL-Ready-1
3276: PPUSH
3277: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3281: LD_INT 22
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 23
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: IFFALSE 3323
// Say ( Schulz , DL-Ready-2 ) ;
3311: LD_EXP 18
3315: PPUSH
3316: LD_STRING DL-Ready-2
3318: PPUSH
3319: CALL_OW 88
// DialogueOff ;
3323: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3327: LD_STRING M3
3329: PPUSH
3330: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3334: LD_INT 7
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: CALL_OW 424
// canGo := true ;
3344: LD_ADDR_EXP 6
3348: PUSH
3349: LD_INT 1
3351: ST_TO_ADDR
// end ;
3352: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3353: LD_EXP 6
3357: PUSH
3358: LD_INT 7
3360: PPUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 2
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 21
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 33
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: LD_INT 58
3396: PUSH
3397: EMPTY
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: PPUSH
3410: CALL_OW 70
3414: PPUSH
3415: CALL 6915 0 1
3419: PUSH
3420: LD_INT 22
3422: PUSH
3423: LD_INT 2
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 21
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 23
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PPUSH
3460: CALL 6915 0 1
3464: GREATEREQUAL
3465: AND
3466: PUSH
3467: LD_INT 22
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 21
3479: PUSH
3480: LD_INT 1
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 55
3492: PUSH
3493: EMPTY
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 23
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PPUSH
3516: CALL_OW 69
3520: PPUSH
3521: CALL 6915 0 1
3525: PUSH
3526: LD_INT 0
3528: EQUAL
3529: AND
3530: IFFALSE 4604
3532: GO 3534
3534: DISABLE
3535: LD_INT 0
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
// begin enable ;
3542: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_INT 7
3550: PPUSH
3551: LD_INT 22
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 21
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 2
3587: PUSH
3588: LD_INT 34
3590: PUSH
3591: LD_INT 88
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 34
3600: PUSH
3601: LD_INT 32
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 72
3617: IFFALSE 3628
// begin Query ( InvalidWeapon ) ;
3619: LD_STRING InvalidWeapon
3621: PPUSH
3622: CALL_OW 97
// exit ;
3626: GO 4604
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_INT 3
3635: PUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 72
3654: IFFALSE 3665
// begin Query ( HealthLevel ) ;
3656: LD_STRING HealthLevel
3658: PPUSH
3659: CALL_OW 97
// exit ;
3663: GO 4604
// end ; for i in tmp do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: LD_VAR 0 2
3674: PUSH
3675: FOR_IN
3676: IFFALSE 3721
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 262
3687: PUSH
3688: LD_INT 1
3690: EQUAL
3691: PUSH
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 261
3701: PUSH
3702: LD_INT 60
3704: LESS
3705: AND
3706: IFFALSE 3719
// begin Query ( FuelLevel ) ;
3708: LD_STRING FuelLevel
3710: PPUSH
3711: CALL_OW 97
// exit ;
3715: POP
3716: POP
3717: GO 4604
// end ;
3719: GO 3675
3721: POP
3722: POP
// disable ;
3723: DISABLE
// saveVehicles := [ ] ;
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: EMPTY
3730: ST_TO_ADDR
// for i in tmp do
3731: LD_ADDR_VAR 0 1
3735: PUSH
3736: LD_VAR 0 2
3740: PUSH
3741: FOR_IN
3742: IFFALSE 3851
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 265
3763: PUSH
3764: LD_VAR 0 1
3768: PPUSH
3769: CALL_OW 262
3773: PUSH
3774: LD_VAR 0 1
3778: PPUSH
3779: CALL_OW 263
3783: PUSH
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 264
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 248
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 261
3813: PUSH
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 271
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 311
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL 42524 0 2
3848: ST_TO_ADDR
3849: GO 3741
3851: POP
3852: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 21
3870: PUSH
3871: LD_INT 2
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 50
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: PUSH
3894: LD_VAR 0 2
3898: DIFF
3899: ST_TO_ADDR
// if otherVehicles then
3900: LD_VAR 0 4
3904: IFFALSE 4080
// begin tmp := [ ] ;
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: EMPTY
3912: ST_TO_ADDR
// for i in otherVehicles do
3913: LD_ADDR_VAR 0 1
3917: PUSH
3918: LD_VAR 0 4
3922: PUSH
3923: FOR_IN
3924: IFFALSE 4066
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: LD_VAR 0 2
3935: PPUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 265
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 262
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 263
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: CALL_OW 264
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 248
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 261
3995: PUSH
3996: LD_VAR 0 1
4000: PPUSH
4001: CALL_OW 271
4005: PUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: CALL_OW 250
4015: PUSH
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 251
4025: PUSH
4026: LD_VAR 0 1
4030: PPUSH
4031: CALL_OW 254
4035: PUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 256
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL 42524 0 2
4063: ST_TO_ADDR
4064: GO 3923
4066: POP
4067: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_STRING 09_otherVehicles
4075: PPUSH
4076: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) and UnitFilter ( saveVehicles , [ f_engine , engine_siberite ] ) then
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 1
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 72
4099: NOT
4100: PUSH
4101: LD_VAR 0 3
4105: PPUSH
4106: LD_INT 32
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 72
4120: AND
4121: IFFALSE 4130
// SetAchievement ( ACH_GREEN ) ;
4123: LD_STRING ACH_GREEN
4125: PPUSH
4126: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4130: LD_EXP 18
4134: PPUSH
4135: LD_STRING 09_Schulz
4137: PPUSH
4138: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4142: LD_EXP 18
4146: PPUSH
4147: LD_STRING 09_Schulz_ID
4149: PPUSH
4150: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4154: LD_EXP 20
4158: PPUSH
4159: LD_STRING 09_Lemmy
4161: PPUSH
4162: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4166: LD_EXP 20
4170: PPUSH
4171: LD_STRING 09_Lemmy_ID
4173: PPUSH
4174: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4178: LD_EXP 22
4182: PPUSH
4183: LD_STRING 09_Nia
4185: PPUSH
4186: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4190: LD_EXP 22
4194: PPUSH
4195: LD_STRING 09_Nia_ID
4197: PPUSH
4198: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4202: LD_EXP 21
4206: PPUSH
4207: LD_STRING 09_Mia
4209: PPUSH
4210: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4214: LD_EXP 21
4218: PPUSH
4219: LD_STRING 09_Mia_ID
4221: PPUSH
4222: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4226: LD_EXP 23
4230: PPUSH
4231: LD_STRING 09_Jenna
4233: PPUSH
4234: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4238: LD_EXP 23
4242: PPUSH
4243: LD_STRING 09_Jenna_ID
4245: PPUSH
4246: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4250: LD_EXP 26
4254: PPUSH
4255: LD_STRING 09_schulzSecondSquad
4257: PPUSH
4258: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4262: LD_ADDR_VAR 0 1
4266: PUSH
4267: DOUBLE
4268: LD_INT 1
4270: DEC
4271: ST_TO_ADDR
4272: LD_EXP 26
4276: PUSH
4277: FOR_TO
4278: IFFALSE 4306
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4280: LD_EXP 26
4284: PUSH
4285: LD_VAR 0 1
4289: ARRAY
4290: PPUSH
4291: LD_STRING 09_random_ID_
4293: PUSH
4294: LD_VAR 0 1
4298: STR
4299: PPUSH
4300: CALL_OW 39
4304: GO 4277
4306: POP
4307: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_STRING 09_vehicles
4315: PPUSH
4316: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4320: LD_OWVAR 1
4324: PPUSH
4325: LD_STRING 09_tick
4327: PPUSH
4328: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4332: LD_INT 6
4334: PPUSH
4335: LD_STRING 09_env
4337: PPUSH
4338: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4342: LD_INT 2
4344: PPUSH
4345: LD_STRING 09_tech
4347: PPUSH
4348: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4352: LD_INT 2
4354: PPUSH
4355: LD_STRING 09_materials
4357: PPUSH
4358: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4362: LD_INT 2
4364: PPUSH
4365: LD_STRING 09_buildings
4367: PPUSH
4368: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4372: LD_INT 22
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 23
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PPUSH
4401: LD_STRING 09_apes
4403: PPUSH
4404: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4408: LD_EXP 4
4412: PPUSH
4413: LD_STRING 09_timeToHeikeDead
4415: PPUSH
4416: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4420: LD_EXP 3
4424: PPUSH
4425: LD_STRING 09_cameras
4427: PPUSH
4428: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 23
4449: PUSH
4450: LD_INT 0
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 50
4459: PUSH
4460: EMPTY
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: ST_TO_ADDR
// if tmp then
4473: LD_VAR 0 2
4477: IFFALSE 4587
// begin animals := [ ] ;
4479: LD_ADDR_VAR 0 5
4483: PUSH
4484: EMPTY
4485: ST_TO_ADDR
// for i in tmp do
4486: LD_ADDR_VAR 0 1
4490: PUSH
4491: LD_VAR 0 2
4495: PUSH
4496: FOR_IN
4497: IFFALSE 4573
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4499: LD_ADDR_VAR 0 5
4503: PUSH
4504: LD_VAR 0 5
4508: PPUSH
4509: LD_VAR 0 1
4513: PPUSH
4514: CALL_OW 257
4518: PUSH
4519: LD_VAR 0 1
4523: PPUSH
4524: CALL_OW 250
4528: PUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: CALL_OW 251
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 254
4548: PUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: CALL_OW 256
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PPUSH
4566: CALL 42524 0 2
4570: ST_TO_ADDR
4571: GO 4496
4573: POP
4574: POP
// SaveVariable ( animals , 09_animals ) ;
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_STRING 09_animals
4582: PPUSH
4583: CALL_OW 39
// end ; wait ( 3 ) ;
4587: LD_INT 3
4589: PPUSH
4590: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4594: LD_INT 1
4596: PPUSH
4597: LD_STRING %2
4599: PPUSH
4600: CALL_OW 340
// end ; end_of_file
4604: PPOPN 5
4606: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4607: LD_OWVAR 1
4611: PUSH
4612: LD_INT 14700
4614: LESS
4615: IFFALSE 4648
4617: GO 4619
4619: DISABLE
// begin enable ;
4620: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4621: LD_INT 1
4623: PPUSH
4624: LD_INT 5
4626: PPUSH
4627: CALL_OW 12
4631: PPUSH
4632: LD_INT 85
4634: PPUSH
4635: LD_INT 44
4637: PPUSH
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL_OW 56
// end ;
4648: END
// every 0 0$29 trigger tick < 20 20$00 do
4649: LD_OWVAR 1
4653: PUSH
4654: LD_INT 42000
4656: LESS
4657: IFFALSE 4728
4659: GO 4661
4661: DISABLE
// begin enable ;
4662: ENABLE
// if Prob ( 50 ) then
4663: LD_INT 50
4665: PPUSH
4666: CALL_OW 13
4670: IFFALSE 4701
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 5
4677: PPUSH
4678: CALL_OW 12
4682: PPUSH
4683: LD_INT 72
4685: PPUSH
4686: LD_INT 109
4688: PPUSH
4689: LD_INT 22
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 56
4699: GO 4728
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4701: LD_INT 1
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 12
4711: PPUSH
4712: LD_INT 140
4714: PPUSH
4715: LD_INT 73
4717: PPUSH
4718: LD_INT 22
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 56
4728: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4729: LD_INT 0
4731: PPUSH
4732: PPUSH
// if exist_mode then
4733: LD_VAR 0 2
4737: IFFALSE 4783
// begin unit := CreateCharacter ( prefix & ident ) ;
4739: LD_ADDR_VAR 0 5
4743: PUSH
4744: LD_VAR 0 3
4748: PUSH
4749: LD_VAR 0 1
4753: STR
4754: PPUSH
4755: CALL_OW 34
4759: ST_TO_ADDR
// if unit then
4760: LD_VAR 0 5
4764: IFFALSE 4781
// DeleteCharacters ( prefix & ident ) ;
4766: LD_VAR 0 3
4770: PUSH
4771: LD_VAR 0 1
4775: STR
4776: PPUSH
4777: CALL_OW 40
// end else
4781: GO 4798
// unit := NewCharacter ( ident ) ;
4783: LD_ADDR_VAR 0 5
4787: PUSH
4788: LD_VAR 0 1
4792: PPUSH
4793: CALL_OW 25
4797: ST_TO_ADDR
// result := unit ;
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_VAR 0 5
4807: ST_TO_ADDR
// end ;
4808: LD_VAR 0 4
4812: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
4813: LD_INT 0
4815: PPUSH
4816: PPUSH
// if exist_mode then
4817: LD_VAR 0 2
4821: IFFALSE 4846
// unit := CreateCharacter ( prefix & ident ) else
4823: LD_ADDR_VAR 0 5
4827: PUSH
4828: LD_VAR 0 3
4832: PUSH
4833: LD_VAR 0 1
4837: STR
4838: PPUSH
4839: CALL_OW 34
4843: ST_TO_ADDR
4844: GO 4861
// unit := NewCharacter ( ident ) ;
4846: LD_ADDR_VAR 0 5
4850: PUSH
4851: LD_VAR 0 1
4855: PPUSH
4856: CALL_OW 25
4860: ST_TO_ADDR
// result := unit ;
4861: LD_ADDR_VAR 0 4
4865: PUSH
4866: LD_VAR 0 5
4870: ST_TO_ADDR
// end ;
4871: LD_VAR 0 4
4875: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4876: LD_INT 0
4878: PPUSH
4879: PPUSH
// if not side or not nation then
4880: LD_VAR 0 1
4884: NOT
4885: PUSH
4886: LD_VAR 0 2
4890: NOT
4891: OR
4892: IFFALSE 4896
// exit ;
4894: GO 5664
// case nation of nation_american :
4896: LD_VAR 0 2
4900: PUSH
4901: LD_INT 1
4903: DOUBLE
4904: EQUAL
4905: IFTRUE 4909
4907: GO 5123
4909: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4910: LD_ADDR_VAR 0 4
4914: PUSH
4915: LD_INT 35
4917: PUSH
4918: LD_INT 45
4920: PUSH
4921: LD_INT 46
4923: PUSH
4924: LD_INT 47
4926: PUSH
4927: LD_INT 82
4929: PUSH
4930: LD_INT 83
4932: PUSH
4933: LD_INT 84
4935: PUSH
4936: LD_INT 85
4938: PUSH
4939: LD_INT 86
4941: PUSH
4942: LD_INT 1
4944: PUSH
4945: LD_INT 2
4947: PUSH
4948: LD_INT 6
4950: PUSH
4951: LD_INT 15
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: LD_INT 7
4959: PUSH
4960: LD_INT 12
4962: PUSH
4963: LD_INT 13
4965: PUSH
4966: LD_INT 10
4968: PUSH
4969: LD_INT 14
4971: PUSH
4972: LD_INT 20
4974: PUSH
4975: LD_INT 21
4977: PUSH
4978: LD_INT 22
4980: PUSH
4981: LD_INT 25
4983: PUSH
4984: LD_INT 32
4986: PUSH
4987: LD_INT 27
4989: PUSH
4990: LD_INT 36
4992: PUSH
4993: LD_INT 69
4995: PUSH
4996: LD_INT 39
4998: PUSH
4999: LD_INT 34
5001: PUSH
5002: LD_INT 40
5004: PUSH
5005: LD_INT 48
5007: PUSH
5008: LD_INT 49
5010: PUSH
5011: LD_INT 50
5013: PUSH
5014: LD_INT 51
5016: PUSH
5017: LD_INT 52
5019: PUSH
5020: LD_INT 53
5022: PUSH
5023: LD_INT 54
5025: PUSH
5026: LD_INT 55
5028: PUSH
5029: LD_INT 56
5031: PUSH
5032: LD_INT 57
5034: PUSH
5035: LD_INT 58
5037: PUSH
5038: LD_INT 59
5040: PUSH
5041: LD_INT 60
5043: PUSH
5044: LD_INT 61
5046: PUSH
5047: LD_INT 62
5049: PUSH
5050: LD_INT 80
5052: PUSH
5053: LD_INT 82
5055: PUSH
5056: LD_INT 83
5058: PUSH
5059: LD_INT 84
5061: PUSH
5062: LD_INT 85
5064: PUSH
5065: LD_INT 86
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: ST_TO_ADDR
5121: GO 5588
5123: LD_INT 2
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5357
5131: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5132: LD_ADDR_VAR 0 4
5136: PUSH
5137: LD_INT 35
5139: PUSH
5140: LD_INT 45
5142: PUSH
5143: LD_INT 46
5145: PUSH
5146: LD_INT 47
5148: PUSH
5149: LD_INT 82
5151: PUSH
5152: LD_INT 83
5154: PUSH
5155: LD_INT 84
5157: PUSH
5158: LD_INT 85
5160: PUSH
5161: LD_INT 87
5163: PUSH
5164: LD_INT 70
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: LD_INT 11
5172: PUSH
5173: LD_INT 3
5175: PUSH
5176: LD_INT 4
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: LD_INT 6
5184: PUSH
5185: LD_INT 15
5187: PUSH
5188: LD_INT 18
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 17
5196: PUSH
5197: LD_INT 8
5199: PUSH
5200: LD_INT 20
5202: PUSH
5203: LD_INT 21
5205: PUSH
5206: LD_INT 22
5208: PUSH
5209: LD_INT 72
5211: PUSH
5212: LD_INT 26
5214: PUSH
5215: LD_INT 69
5217: PUSH
5218: LD_INT 39
5220: PUSH
5221: LD_INT 40
5223: PUSH
5224: LD_INT 41
5226: PUSH
5227: LD_INT 42
5229: PUSH
5230: LD_INT 43
5232: PUSH
5233: LD_INT 48
5235: PUSH
5236: LD_INT 49
5238: PUSH
5239: LD_INT 50
5241: PUSH
5242: LD_INT 51
5244: PUSH
5245: LD_INT 52
5247: PUSH
5248: LD_INT 53
5250: PUSH
5251: LD_INT 54
5253: PUSH
5254: LD_INT 55
5256: PUSH
5257: LD_INT 56
5259: PUSH
5260: LD_INT 60
5262: PUSH
5263: LD_INT 61
5265: PUSH
5266: LD_INT 62
5268: PUSH
5269: LD_INT 66
5271: PUSH
5272: LD_INT 67
5274: PUSH
5275: LD_INT 68
5277: PUSH
5278: LD_INT 81
5280: PUSH
5281: LD_INT 82
5283: PUSH
5284: LD_INT 83
5286: PUSH
5287: LD_INT 84
5289: PUSH
5290: LD_INT 85
5292: PUSH
5293: LD_INT 87
5295: PUSH
5296: LD_INT 88
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: ST_TO_ADDR
5355: GO 5588
5357: LD_INT 3
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5587
5365: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5366: LD_ADDR_VAR 0 4
5370: PUSH
5371: LD_INT 46
5373: PUSH
5374: LD_INT 47
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 2
5382: PUSH
5383: LD_INT 82
5385: PUSH
5386: LD_INT 83
5388: PUSH
5389: LD_INT 84
5391: PUSH
5392: LD_INT 85
5394: PUSH
5395: LD_INT 86
5397: PUSH
5398: LD_INT 11
5400: PUSH
5401: LD_INT 9
5403: PUSH
5404: LD_INT 20
5406: PUSH
5407: LD_INT 19
5409: PUSH
5410: LD_INT 21
5412: PUSH
5413: LD_INT 24
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 28
5424: PUSH
5425: LD_INT 29
5427: PUSH
5428: LD_INT 30
5430: PUSH
5431: LD_INT 31
5433: PUSH
5434: LD_INT 37
5436: PUSH
5437: LD_INT 38
5439: PUSH
5440: LD_INT 32
5442: PUSH
5443: LD_INT 27
5445: PUSH
5446: LD_INT 33
5448: PUSH
5449: LD_INT 69
5451: PUSH
5452: LD_INT 39
5454: PUSH
5455: LD_INT 34
5457: PUSH
5458: LD_INT 40
5460: PUSH
5461: LD_INT 71
5463: PUSH
5464: LD_INT 23
5466: PUSH
5467: LD_INT 44
5469: PUSH
5470: LD_INT 48
5472: PUSH
5473: LD_INT 49
5475: PUSH
5476: LD_INT 50
5478: PUSH
5479: LD_INT 51
5481: PUSH
5482: LD_INT 52
5484: PUSH
5485: LD_INT 53
5487: PUSH
5488: LD_INT 54
5490: PUSH
5491: LD_INT 55
5493: PUSH
5494: LD_INT 56
5496: PUSH
5497: LD_INT 57
5499: PUSH
5500: LD_INT 58
5502: PUSH
5503: LD_INT 59
5505: PUSH
5506: LD_INT 63
5508: PUSH
5509: LD_INT 64
5511: PUSH
5512: LD_INT 65
5514: PUSH
5515: LD_INT 82
5517: PUSH
5518: LD_INT 83
5520: PUSH
5521: LD_INT 84
5523: PUSH
5524: LD_INT 85
5526: PUSH
5527: LD_INT 86
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: ST_TO_ADDR
5585: GO 5588
5587: POP
// if state > - 1 and state < 3 then
5588: LD_VAR 0 3
5592: PUSH
5593: LD_INT 1
5595: NEG
5596: GREATER
5597: PUSH
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 3
5605: LESS
5606: AND
5607: IFFALSE 5664
// for i in result do
5609: LD_ADDR_VAR 0 5
5613: PUSH
5614: LD_VAR 0 4
5618: PUSH
5619: FOR_IN
5620: IFFALSE 5662
// if GetTech ( i , side ) <> state then
5622: LD_VAR 0 5
5626: PPUSH
5627: LD_VAR 0 1
5631: PPUSH
5632: CALL_OW 321
5636: PUSH
5637: LD_VAR 0 3
5641: NONEQUAL
5642: IFFALSE 5660
// result := result diff i ;
5644: LD_ADDR_VAR 0 4
5648: PUSH
5649: LD_VAR 0 4
5653: PUSH
5654: LD_VAR 0 5
5658: DIFF
5659: ST_TO_ADDR
5660: GO 5619
5662: POP
5663: POP
// end ;
5664: LD_VAR 0 4
5668: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5669: LD_INT 0
5671: PPUSH
5672: PPUSH
5673: PPUSH
// result := true ;
5674: LD_ADDR_VAR 0 3
5678: PUSH
5679: LD_INT 1
5681: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5682: LD_ADDR_VAR 0 5
5686: PUSH
5687: LD_VAR 0 2
5691: PPUSH
5692: CALL_OW 480
5696: ST_TO_ADDR
// if not tmp then
5697: LD_VAR 0 5
5701: NOT
5702: IFFALSE 5706
// exit ;
5704: GO 5755
// for i in tmp do
5706: LD_ADDR_VAR 0 4
5710: PUSH
5711: LD_VAR 0 5
5715: PUSH
5716: FOR_IN
5717: IFFALSE 5753
// if GetTech ( i , side ) <> state_researched then
5719: LD_VAR 0 4
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 321
5733: PUSH
5734: LD_INT 2
5736: NONEQUAL
5737: IFFALSE 5751
// begin result := false ;
5739: LD_ADDR_VAR 0 3
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// exit ;
5747: POP
5748: POP
5749: GO 5755
// end ;
5751: GO 5716
5753: POP
5754: POP
// end ;
5755: LD_VAR 0 3
5759: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5760: LD_INT 0
5762: PPUSH
5763: PPUSH
5764: PPUSH
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5775: LD_VAR 0 1
5779: NOT
5780: PUSH
5781: LD_VAR 0 1
5785: PPUSH
5786: CALL_OW 257
5790: PUSH
5791: LD_INT 9
5793: NONEQUAL
5794: OR
5795: IFFALSE 5799
// exit ;
5797: GO 6372
// side := GetSide ( unit ) ;
5799: LD_ADDR_VAR 0 9
5803: PUSH
5804: LD_VAR 0 1
5808: PPUSH
5809: CALL_OW 255
5813: ST_TO_ADDR
// tech_space := tech_spacanom ;
5814: LD_ADDR_VAR 0 12
5818: PUSH
5819: LD_INT 29
5821: ST_TO_ADDR
// tech_time := tech_taurad ;
5822: LD_ADDR_VAR 0 13
5826: PUSH
5827: LD_INT 28
5829: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5830: LD_ADDR_VAR 0 11
5834: PUSH
5835: LD_VAR 0 1
5839: PPUSH
5840: CALL_OW 310
5844: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5845: LD_VAR 0 11
5849: PPUSH
5850: CALL_OW 247
5854: PUSH
5855: LD_INT 2
5857: EQUAL
5858: IFFALSE 5862
// exit ;
5860: GO 6372
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5862: LD_ADDR_VAR 0 8
5866: PUSH
5867: LD_INT 81
5869: PUSH
5870: LD_VAR 0 9
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 3
5881: PUSH
5882: LD_INT 21
5884: PUSH
5885: LD_INT 3
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: ST_TO_ADDR
// if not tmp then
5905: LD_VAR 0 8
5909: NOT
5910: IFFALSE 5914
// exit ;
5912: GO 6372
// if in_unit then
5914: LD_VAR 0 11
5918: IFFALSE 5942
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5920: LD_ADDR_VAR 0 10
5924: PUSH
5925: LD_VAR 0 8
5929: PPUSH
5930: LD_VAR 0 11
5934: PPUSH
5935: CALL_OW 74
5939: ST_TO_ADDR
5940: GO 5962
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5942: LD_ADDR_VAR 0 10
5946: PUSH
5947: LD_VAR 0 8
5951: PPUSH
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 74
5961: ST_TO_ADDR
// if not enemy then
5962: LD_VAR 0 10
5966: NOT
5967: IFFALSE 5971
// exit ;
5969: GO 6372
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5971: LD_VAR 0 11
5975: PUSH
5976: LD_VAR 0 11
5980: PPUSH
5981: LD_VAR 0 10
5985: PPUSH
5986: CALL_OW 296
5990: PUSH
5991: LD_INT 13
5993: GREATER
5994: AND
5995: PUSH
5996: LD_VAR 0 1
6000: PPUSH
6001: LD_VAR 0 10
6005: PPUSH
6006: CALL_OW 296
6010: PUSH
6011: LD_INT 12
6013: GREATER
6014: OR
6015: IFFALSE 6019
// exit ;
6017: GO 6372
// missile := [ 1 ] ;
6019: LD_ADDR_VAR 0 14
6023: PUSH
6024: LD_INT 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: ST_TO_ADDR
// if Researched ( side , tech_space ) then
6030: LD_VAR 0 9
6034: PPUSH
6035: LD_VAR 0 12
6039: PPUSH
6040: CALL_OW 325
6044: IFFALSE 6073
// missile := Replace ( missile , missile + 1 , 2 ) ;
6046: LD_ADDR_VAR 0 14
6050: PUSH
6051: LD_VAR 0 14
6055: PPUSH
6056: LD_VAR 0 14
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: PPUSH
6065: LD_INT 2
6067: PPUSH
6068: CALL_OW 1
6072: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
6073: LD_VAR 0 9
6077: PPUSH
6078: LD_VAR 0 13
6082: PPUSH
6083: CALL_OW 325
6087: PUSH
6088: LD_VAR 0 10
6092: PPUSH
6093: CALL_OW 255
6097: PPUSH
6098: LD_VAR 0 13
6102: PPUSH
6103: CALL_OW 325
6107: NOT
6108: AND
6109: IFFALSE 6138
// missile := Replace ( missile , missile + 1 , 3 ) ;
6111: LD_ADDR_VAR 0 14
6115: PUSH
6116: LD_VAR 0 14
6120: PPUSH
6121: LD_VAR 0 14
6125: PUSH
6126: LD_INT 1
6128: PLUS
6129: PPUSH
6130: LD_INT 3
6132: PPUSH
6133: CALL_OW 1
6137: ST_TO_ADDR
// if missile < 2 then
6138: LD_VAR 0 14
6142: PUSH
6143: LD_INT 2
6145: LESS
6146: IFFALSE 6150
// exit ;
6148: GO 6372
// x := GetX ( enemy ) ;
6150: LD_ADDR_VAR 0 4
6154: PUSH
6155: LD_VAR 0 10
6159: PPUSH
6160: CALL_OW 250
6164: ST_TO_ADDR
// y := GetY ( enemy ) ;
6165: LD_ADDR_VAR 0 5
6169: PUSH
6170: LD_VAR 0 10
6174: PPUSH
6175: CALL_OW 251
6179: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6180: LD_ADDR_VAR 0 6
6184: PUSH
6185: LD_VAR 0 4
6189: PUSH
6190: LD_INT 1
6192: NEG
6193: PPUSH
6194: LD_INT 1
6196: PPUSH
6197: CALL_OW 12
6201: PLUS
6202: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6203: LD_ADDR_VAR 0 7
6207: PUSH
6208: LD_VAR 0 5
6212: PUSH
6213: LD_INT 1
6215: NEG
6216: PPUSH
6217: LD_INT 1
6219: PPUSH
6220: CALL_OW 12
6224: PLUS
6225: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6226: LD_VAR 0 6
6230: PPUSH
6231: LD_VAR 0 7
6235: PPUSH
6236: CALL_OW 488
6240: NOT
6241: IFFALSE 6263
// begin _x := x ;
6243: LD_ADDR_VAR 0 6
6247: PUSH
6248: LD_VAR 0 4
6252: ST_TO_ADDR
// _y := y ;
6253: LD_ADDR_VAR 0 7
6257: PUSH
6258: LD_VAR 0 5
6262: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6263: LD_ADDR_VAR 0 3
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_VAR 0 14
6275: PPUSH
6276: CALL_OW 12
6280: ST_TO_ADDR
// case i of 1 :
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 1
6288: DOUBLE
6289: EQUAL
6290: IFTRUE 6294
6292: GO 6311
6294: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6295: LD_VAR 0 1
6299: PPUSH
6300: LD_VAR 0 10
6304: PPUSH
6305: CALL_OW 115
6309: GO 6372
6311: LD_INT 2
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6341
6319: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6320: LD_VAR 0 1
6324: PPUSH
6325: LD_VAR 0 6
6329: PPUSH
6330: LD_VAR 0 7
6334: PPUSH
6335: CALL_OW 153
6339: GO 6372
6341: LD_INT 3
6343: DOUBLE
6344: EQUAL
6345: IFTRUE 6349
6347: GO 6371
6349: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6350: LD_VAR 0 1
6354: PPUSH
6355: LD_VAR 0 6
6359: PPUSH
6360: LD_VAR 0 7
6364: PPUSH
6365: CALL_OW 154
6369: GO 6372
6371: POP
// end ;
6372: LD_VAR 0 2
6376: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6377: LD_INT 0
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
6383: PPUSH
6384: PPUSH
// if not unit or not building then
6385: LD_VAR 0 1
6389: NOT
6390: PUSH
6391: LD_VAR 0 2
6395: NOT
6396: OR
6397: IFFALSE 6401
// exit ;
6399: GO 6559
// x := GetX ( building ) ;
6401: LD_ADDR_VAR 0 5
6405: PUSH
6406: LD_VAR 0 2
6410: PPUSH
6411: CALL_OW 250
6415: ST_TO_ADDR
// y := GetY ( building ) ;
6416: LD_ADDR_VAR 0 6
6420: PUSH
6421: LD_VAR 0 2
6425: PPUSH
6426: CALL_OW 251
6430: ST_TO_ADDR
// for i = 0 to 5 do
6431: LD_ADDR_VAR 0 4
6435: PUSH
6436: DOUBLE
6437: LD_INT 0
6439: DEC
6440: ST_TO_ADDR
6441: LD_INT 5
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6557
// begin _x := ShiftX ( x , i , 3 ) ;
6447: LD_ADDR_VAR 0 7
6451: PUSH
6452: LD_VAR 0 5
6456: PPUSH
6457: LD_VAR 0 4
6461: PPUSH
6462: LD_INT 3
6464: PPUSH
6465: CALL_OW 272
6469: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6470: LD_ADDR_VAR 0 8
6474: PUSH
6475: LD_VAR 0 6
6479: PPUSH
6480: LD_VAR 0 4
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 273
6492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6493: LD_VAR 0 7
6497: PPUSH
6498: LD_VAR 0 8
6502: PPUSH
6503: CALL_OW 488
6507: NOT
6508: IFFALSE 6512
// continue ;
6510: GO 6444
// if HexInfo ( _x , _y ) = 0 then
6512: LD_VAR 0 7
6516: PPUSH
6517: LD_VAR 0 8
6521: PPUSH
6522: CALL_OW 428
6526: PUSH
6527: LD_INT 0
6529: EQUAL
6530: IFFALSE 6555
// begin ComMoveXY ( unit , _x , _y ) ;
6532: LD_VAR 0 1
6536: PPUSH
6537: LD_VAR 0 7
6541: PPUSH
6542: LD_VAR 0 8
6546: PPUSH
6547: CALL_OW 111
// exit ;
6551: POP
6552: POP
6553: GO 6559
// end ; end ;
6555: GO 6444
6557: POP
6558: POP
// end ;
6559: LD_VAR 0 3
6563: RET
// export function ScanBase ( side , base_area ) ; begin
6564: LD_INT 0
6566: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_VAR 0 2
6576: PPUSH
6577: LD_INT 81
6579: PUSH
6580: LD_VAR 0 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PPUSH
6589: CALL_OW 70
6593: ST_TO_ADDR
// end ;
6594: LD_VAR 0 3
6598: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6599: LD_INT 0
6601: PPUSH
6602: PPUSH
6603: PPUSH
6604: PPUSH
// result := false ;
6605: LD_ADDR_VAR 0 2
6609: PUSH
6610: LD_INT 0
6612: ST_TO_ADDR
// side := GetSide ( unit ) ;
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 255
6627: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6628: LD_ADDR_VAR 0 4
6632: PUSH
6633: LD_VAR 0 1
6637: PPUSH
6638: CALL_OW 248
6642: ST_TO_ADDR
// case nat of 1 :
6643: LD_VAR 0 4
6647: PUSH
6648: LD_INT 1
6650: DOUBLE
6651: EQUAL
6652: IFTRUE 6656
6654: GO 6667
6656: POP
// tech := tech_lassight ; 2 :
6657: LD_ADDR_VAR 0 5
6661: PUSH
6662: LD_INT 12
6664: ST_TO_ADDR
6665: GO 6706
6667: LD_INT 2
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6675
6673: GO 6686
6675: POP
// tech := tech_mortar ; 3 :
6676: LD_ADDR_VAR 0 5
6680: PUSH
6681: LD_INT 41
6683: ST_TO_ADDR
6684: GO 6706
6686: LD_INT 3
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6705
6694: POP
// tech := tech_bazooka ; end ;
6695: LD_ADDR_VAR 0 5
6699: PUSH
6700: LD_INT 44
6702: ST_TO_ADDR
6703: GO 6706
6705: POP
// if Researched ( side , tech ) then
6706: LD_VAR 0 3
6710: PPUSH
6711: LD_VAR 0 5
6715: PPUSH
6716: CALL_OW 325
6720: IFFALSE 6747
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: LD_INT 5
6729: PUSH
6730: LD_INT 8
6732: PUSH
6733: LD_INT 9
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: PUSH
6741: LD_VAR 0 4
6745: ARRAY
6746: ST_TO_ADDR
// end ;
6747: LD_VAR 0 2
6751: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6752: LD_INT 0
6754: PPUSH
6755: PPUSH
6756: PPUSH
// if not mines then
6757: LD_VAR 0 2
6761: NOT
6762: IFFALSE 6766
// exit ;
6764: GO 6910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6766: LD_ADDR_VAR 0 5
6770: PUSH
6771: LD_INT 81
6773: PUSH
6774: LD_VAR 0 1
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 3
6785: PUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 69
6808: ST_TO_ADDR
// for i in mines do
6809: LD_ADDR_VAR 0 4
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6908
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6822: LD_VAR 0 4
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: LD_VAR 0 4
6835: PUSH
6836: LD_INT 2
6838: ARRAY
6839: PPUSH
6840: CALL_OW 458
6844: NOT
6845: IFFALSE 6849
// continue ;
6847: GO 6819
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6849: LD_VAR 0 4
6853: PUSH
6854: LD_INT 1
6856: ARRAY
6857: PPUSH
6858: LD_VAR 0 4
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: CALL_OW 428
6871: PUSH
6872: LD_VAR 0 5
6876: IN
6877: IFFALSE 6906
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6879: LD_VAR 0 4
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 4
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_VAR 0 1
6901: PPUSH
6902: CALL_OW 456
// end ;
6906: GO 6819
6908: POP
6909: POP
// end ;
6910: LD_VAR 0 3
6914: RET
// export function Count ( array ) ; begin
6915: LD_INT 0
6917: PPUSH
// result := array + 0 ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_VAR 0 1
6927: PUSH
6928: LD_INT 0
6930: PLUS
6931: ST_TO_ADDR
// end ;
6932: LD_VAR 0 2
6936: RET
// export function IsEmpty ( building ) ; begin
6937: LD_INT 0
6939: PPUSH
// if not building then
6940: LD_VAR 0 1
6944: NOT
6945: IFFALSE 6949
// exit ;
6947: GO 6992
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6949: LD_ADDR_VAR 0 2
6953: PUSH
6954: LD_VAR 0 1
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 1
6966: PPUSH
6967: CALL_OW 255
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 58
6978: PUSH
6979: EMPTY
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: IN
6991: ST_TO_ADDR
// end ;
6992: LD_VAR 0 2
6996: RET
// export function IsNotFull ( building ) ; var places ; begin
6997: LD_INT 0
6999: PPUSH
7000: PPUSH
// if not building then
7001: LD_VAR 0 1
7005: NOT
7006: IFFALSE 7010
// exit ;
7008: GO 7038
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: LD_VAR 0 1
7019: PPUSH
7020: LD_INT 3
7022: PUSH
7023: LD_INT 62
7025: PUSH
7026: EMPTY
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: ST_TO_ADDR
// end ;
7038: LD_VAR 0 2
7042: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
7043: LD_INT 0
7045: PPUSH
7046: PPUSH
7047: PPUSH
7048: PPUSH
// tmp := [ ] ;
7049: LD_ADDR_VAR 0 3
7053: PUSH
7054: EMPTY
7055: ST_TO_ADDR
// list := [ ] ;
7056: LD_ADDR_VAR 0 5
7060: PUSH
7061: EMPTY
7062: ST_TO_ADDR
// for i = 16 to 25 do
7063: LD_ADDR_VAR 0 4
7067: PUSH
7068: DOUBLE
7069: LD_INT 16
7071: DEC
7072: ST_TO_ADDR
7073: LD_INT 25
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7150
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7079: LD_ADDR_VAR 0 3
7083: PUSH
7084: LD_VAR 0 3
7088: PUSH
7089: LD_INT 22
7091: PUSH
7092: LD_VAR 0 1
7096: PPUSH
7097: CALL_OW 255
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 91
7108: PUSH
7109: LD_VAR 0 1
7113: PUSH
7114: LD_INT 6
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 30
7124: PUSH
7125: LD_VAR 0 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: ADD
7147: ST_TO_ADDR
7148: GO 7076
7150: POP
7151: POP
// for i = 1 to tmp do
7152: LD_ADDR_VAR 0 4
7156: PUSH
7157: DOUBLE
7158: LD_INT 1
7160: DEC
7161: ST_TO_ADDR
7162: LD_VAR 0 3
7166: PUSH
7167: FOR_TO
7168: IFFALSE 7256
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7170: LD_ADDR_VAR 0 5
7174: PUSH
7175: LD_VAR 0 5
7179: PUSH
7180: LD_VAR 0 3
7184: PUSH
7185: LD_VAR 0 4
7189: ARRAY
7190: PPUSH
7191: CALL_OW 266
7195: PUSH
7196: LD_VAR 0 3
7200: PUSH
7201: LD_VAR 0 4
7205: ARRAY
7206: PPUSH
7207: CALL_OW 250
7211: PUSH
7212: LD_VAR 0 3
7216: PUSH
7217: LD_VAR 0 4
7221: ARRAY
7222: PPUSH
7223: CALL_OW 251
7227: PUSH
7228: LD_VAR 0 3
7232: PUSH
7233: LD_VAR 0 4
7237: ARRAY
7238: PPUSH
7239: CALL_OW 254
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: PUSH
7250: EMPTY
7251: LIST
7252: ADD
7253: ST_TO_ADDR
7254: GO 7167
7256: POP
7257: POP
// result := list ;
7258: LD_ADDR_VAR 0 2
7262: PUSH
7263: LD_VAR 0 5
7267: ST_TO_ADDR
// end ;
7268: LD_VAR 0 2
7272: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
7281: PPUSH
// if not factory then
7282: LD_VAR 0 1
7286: NOT
7287: IFFALSE 7291
// exit ;
7289: GO 7884
// if control = control_apeman then
7291: LD_VAR 0 4
7295: PUSH
7296: LD_INT 5
7298: EQUAL
7299: IFFALSE 7408
// begin tmp := UnitsInside ( factory ) ;
7301: LD_ADDR_VAR 0 8
7305: PUSH
7306: LD_VAR 0 1
7310: PPUSH
7311: CALL_OW 313
7315: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7316: LD_VAR 0 8
7320: PPUSH
7321: LD_INT 25
7323: PUSH
7324: LD_INT 12
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PPUSH
7331: CALL_OW 72
7335: NOT
7336: IFFALSE 7346
// control := control_manual ;
7338: LD_ADDR_VAR 0 4
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7346: LD_ADDR_VAR 0 8
7350: PUSH
7351: LD_VAR 0 1
7355: PPUSH
7356: CALL 7043 0 1
7360: ST_TO_ADDR
// if tmp then
7361: LD_VAR 0 8
7365: IFFALSE 7408
// begin for i in tmp do
7367: LD_ADDR_VAR 0 7
7371: PUSH
7372: LD_VAR 0 8
7376: PUSH
7377: FOR_IN
7378: IFFALSE 7406
// if i [ 1 ] = b_ext_radio then
7380: LD_VAR 0 7
7384: PUSH
7385: LD_INT 1
7387: ARRAY
7388: PUSH
7389: LD_INT 22
7391: EQUAL
7392: IFFALSE 7404
// begin control := control_remote ;
7394: LD_ADDR_VAR 0 4
7398: PUSH
7399: LD_INT 2
7401: ST_TO_ADDR
// break ;
7402: GO 7406
// end ;
7404: GO 7377
7406: POP
7407: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7408: LD_VAR 0 1
7412: PPUSH
7413: LD_VAR 0 2
7417: PPUSH
7418: LD_VAR 0 3
7422: PPUSH
7423: LD_VAR 0 4
7427: PPUSH
7428: LD_VAR 0 5
7432: PPUSH
7433: CALL_OW 448
7437: IFFALSE 7472
// begin result := [ chassis , engine , control , weapon ] ;
7439: LD_ADDR_VAR 0 6
7443: PUSH
7444: LD_VAR 0 2
7448: PUSH
7449: LD_VAR 0 3
7453: PUSH
7454: LD_VAR 0 4
7458: PUSH
7459: LD_VAR 0 5
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// exit ;
7470: GO 7884
// end ; _chassis := AvailableChassisList ( factory ) ;
7472: LD_ADDR_VAR 0 9
7476: PUSH
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 475
7486: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 1
7496: PPUSH
7497: CALL_OW 476
7501: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7502: LD_ADDR_VAR 0 12
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 477
7516: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7517: LD_ADDR_VAR 0 10
7521: PUSH
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 478
7531: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7532: LD_VAR 0 9
7536: NOT
7537: PUSH
7538: LD_VAR 0 11
7542: NOT
7543: OR
7544: PUSH
7545: LD_VAR 0 12
7549: NOT
7550: OR
7551: PUSH
7552: LD_VAR 0 10
7556: NOT
7557: OR
7558: IFFALSE 7593
// begin result := [ chassis , engine , control , weapon ] ;
7560: LD_ADDR_VAR 0 6
7564: PUSH
7565: LD_VAR 0 2
7569: PUSH
7570: LD_VAR 0 3
7574: PUSH
7575: LD_VAR 0 4
7579: PUSH
7580: LD_VAR 0 5
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: ST_TO_ADDR
// exit ;
7591: GO 7884
// end ; if not chassis in _chassis then
7593: LD_VAR 0 2
7597: PUSH
7598: LD_VAR 0 9
7602: IN
7603: NOT
7604: IFFALSE 7630
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7606: LD_ADDR_VAR 0 2
7610: PUSH
7611: LD_VAR 0 9
7615: PUSH
7616: LD_INT 1
7618: PPUSH
7619: LD_VAR 0 9
7623: PPUSH
7624: CALL_OW 12
7628: ARRAY
7629: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7630: LD_VAR 0 2
7634: PPUSH
7635: LD_VAR 0 3
7639: PPUSH
7640: CALL 7889 0 2
7644: NOT
7645: IFFALSE 7704
// repeat engine := _engine [ 1 ] ;
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_VAR 0 11
7656: PUSH
7657: LD_INT 1
7659: ARRAY
7660: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7661: LD_ADDR_VAR 0 11
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_INT 1
7673: PPUSH
7674: CALL_OW 3
7678: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7679: LD_VAR 0 2
7683: PPUSH
7684: LD_VAR 0 3
7688: PPUSH
7689: CALL 7889 0 2
7693: PUSH
7694: LD_VAR 0 11
7698: PUSH
7699: EMPTY
7700: EQUAL
7701: OR
7702: IFFALSE 7647
// if not control in _control then
7704: LD_VAR 0 4
7708: PUSH
7709: LD_VAR 0 12
7713: IN
7714: NOT
7715: IFFALSE 7741
// control := _control [ rand ( 1 , _control ) ] ;
7717: LD_ADDR_VAR 0 4
7721: PUSH
7722: LD_VAR 0 12
7726: PUSH
7727: LD_INT 1
7729: PPUSH
7730: LD_VAR 0 12
7734: PPUSH
7735: CALL_OW 12
7739: ARRAY
7740: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_VAR 0 5
7750: PPUSH
7751: CALL 8109 0 2
7755: NOT
7756: IFFALSE 7815
// repeat weapon := _weapon [ 1 ] ;
7758: LD_ADDR_VAR 0 5
7762: PUSH
7763: LD_VAR 0 10
7767: PUSH
7768: LD_INT 1
7770: ARRAY
7771: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7772: LD_ADDR_VAR 0 10
7776: PUSH
7777: LD_VAR 0 10
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 3
7789: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7790: LD_VAR 0 2
7794: PPUSH
7795: LD_VAR 0 5
7799: PPUSH
7800: CALL 8109 0 2
7804: PUSH
7805: LD_VAR 0 10
7809: PUSH
7810: EMPTY
7811: EQUAL
7812: OR
7813: IFFALSE 7758
// result := [ ] ;
7815: LD_ADDR_VAR 0 6
7819: PUSH
7820: EMPTY
7821: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_VAR 0 2
7831: PPUSH
7832: LD_VAR 0 3
7836: PPUSH
7837: LD_VAR 0 4
7841: PPUSH
7842: LD_VAR 0 5
7846: PPUSH
7847: CALL_OW 448
7851: IFFALSE 7884
// result := [ chassis , engine , control , weapon ] ;
7853: LD_ADDR_VAR 0 6
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: LD_VAR 0 3
7867: PUSH
7868: LD_VAR 0 4
7872: PUSH
7873: LD_VAR 0 5
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: ST_TO_ADDR
// end ;
7884: LD_VAR 0 6
7888: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7889: LD_INT 0
7891: PPUSH
// if not chassis or not engine then
7892: LD_VAR 0 1
7896: NOT
7897: PUSH
7898: LD_VAR 0 2
7902: NOT
7903: OR
7904: IFFALSE 7908
// exit ;
7906: GO 8104
// case engine of engine_solar :
7908: LD_VAR 0 2
7912: PUSH
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7959
7921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7922: LD_ADDR_VAR 0 3
7926: PUSH
7927: LD_INT 11
7929: PUSH
7930: LD_INT 12
7932: PUSH
7933: LD_INT 13
7935: PUSH
7936: LD_INT 14
7938: PUSH
7939: LD_INT 1
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: LD_INT 3
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: ST_TO_ADDR
7957: GO 8088
7959: LD_INT 1
7961: DOUBLE
7962: EQUAL
7963: IFTRUE 7967
7965: GO 8029
7967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 11
7975: PUSH
7976: LD_INT 12
7978: PUSH
7979: LD_INT 13
7981: PUSH
7982: LD_INT 14
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: LD_INT 3
7993: PUSH
7994: LD_INT 4
7996: PUSH
7997: LD_INT 5
7999: PUSH
8000: LD_INT 21
8002: PUSH
8003: LD_INT 23
8005: PUSH
8006: LD_INT 22
8008: PUSH
8009: LD_INT 24
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
8027: GO 8088
8029: LD_INT 3
8031: DOUBLE
8032: EQUAL
8033: IFTRUE 8037
8035: GO 8087
8037: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: LD_INT 13
8045: PUSH
8046: LD_INT 14
8048: PUSH
8049: LD_INT 2
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: LD_INT 4
8057: PUSH
8058: LD_INT 5
8060: PUSH
8061: LD_INT 21
8063: PUSH
8064: LD_INT 22
8066: PUSH
8067: LD_INT 23
8069: PUSH
8070: LD_INT 24
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: ST_TO_ADDR
8085: GO 8088
8087: POP
// result := ( chassis in result ) ;
8088: LD_ADDR_VAR 0 3
8092: PUSH
8093: LD_VAR 0 1
8097: PUSH
8098: LD_VAR 0 3
8102: IN
8103: ST_TO_ADDR
// end ;
8104: LD_VAR 0 3
8108: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8109: LD_INT 0
8111: PPUSH
// if not chassis or not weapon then
8112: LD_VAR 0 1
8116: NOT
8117: PUSH
8118: LD_VAR 0 2
8122: NOT
8123: OR
8124: IFFALSE 8128
// exit ;
8126: GO 9188
// case weapon of us_machine_gun :
8128: LD_VAR 0 2
8132: PUSH
8133: LD_INT 2
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8171
8141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8142: LD_ADDR_VAR 0 3
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 3
8155: PUSH
8156: LD_INT 4
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: ST_TO_ADDR
8169: GO 9172
8171: LD_INT 3
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8209
8179: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8180: LD_ADDR_VAR 0 3
8184: PUSH
8185: LD_INT 1
8187: PUSH
8188: LD_INT 2
8190: PUSH
8191: LD_INT 3
8193: PUSH
8194: LD_INT 4
8196: PUSH
8197: LD_INT 5
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: ST_TO_ADDR
8207: GO 9172
8209: LD_INT 11
8211: DOUBLE
8212: EQUAL
8213: IFTRUE 8217
8215: GO 8247
8217: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8218: LD_ADDR_VAR 0 3
8222: PUSH
8223: LD_INT 1
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: LD_INT 3
8231: PUSH
8232: LD_INT 4
8234: PUSH
8235: LD_INT 5
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: ST_TO_ADDR
8245: GO 9172
8247: LD_INT 4
8249: DOUBLE
8250: EQUAL
8251: IFTRUE 8255
8253: GO 8281
8255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8256: LD_ADDR_VAR 0 3
8260: PUSH
8261: LD_INT 2
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: LD_INT 4
8269: PUSH
8270: LD_INT 5
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: ST_TO_ADDR
8279: GO 9172
8281: LD_INT 5
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8315
8289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8290: LD_ADDR_VAR 0 3
8294: PUSH
8295: LD_INT 2
8297: PUSH
8298: LD_INT 3
8300: PUSH
8301: LD_INT 4
8303: PUSH
8304: LD_INT 5
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: ST_TO_ADDR
8313: GO 9172
8315: LD_INT 9
8317: DOUBLE
8318: EQUAL
8319: IFTRUE 8323
8321: GO 8349
8323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8324: LD_ADDR_VAR 0 3
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: LD_INT 4
8337: PUSH
8338: LD_INT 5
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: ST_TO_ADDR
8347: GO 9172
8349: LD_INT 7
8351: DOUBLE
8352: EQUAL
8353: IFTRUE 8357
8355: GO 8383
8357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8358: LD_ADDR_VAR 0 3
8362: PUSH
8363: LD_INT 2
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: LD_INT 4
8371: PUSH
8372: LD_INT 5
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
8381: GO 9172
8383: LD_INT 12
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8417
8391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8392: LD_ADDR_VAR 0 3
8396: PUSH
8397: LD_INT 2
8399: PUSH
8400: LD_INT 3
8402: PUSH
8403: LD_INT 4
8405: PUSH
8406: LD_INT 5
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
8415: GO 9172
8417: LD_INT 13
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8425
8423: GO 8451
8425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_INT 2
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: LD_INT 4
8439: PUSH
8440: LD_INT 5
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
8449: GO 9172
8451: LD_INT 14
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8477
8459: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8460: LD_ADDR_VAR 0 3
8464: PUSH
8465: LD_INT 4
8467: PUSH
8468: LD_INT 5
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
8475: GO 9172
8477: LD_INT 6
8479: DOUBLE
8480: EQUAL
8481: IFTRUE 8485
8483: GO 8503
8485: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8486: LD_ADDR_VAR 0 3
8490: PUSH
8491: LD_INT 4
8493: PUSH
8494: LD_INT 5
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: ST_TO_ADDR
8501: GO 9172
8503: LD_INT 10
8505: DOUBLE
8506: EQUAL
8507: IFTRUE 8511
8509: GO 8529
8511: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: LD_INT 4
8519: PUSH
8520: LD_INT 5
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: ST_TO_ADDR
8527: GO 9172
8529: LD_INT 22
8531: DOUBLE
8532: EQUAL
8533: IFTRUE 8537
8535: GO 8563
8537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8538: LD_ADDR_VAR 0 3
8542: PUSH
8543: LD_INT 11
8545: PUSH
8546: LD_INT 12
8548: PUSH
8549: LD_INT 13
8551: PUSH
8552: LD_INT 14
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: ST_TO_ADDR
8561: GO 9172
8563: LD_INT 23
8565: DOUBLE
8566: EQUAL
8567: IFTRUE 8571
8569: GO 8597
8571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8572: LD_ADDR_VAR 0 3
8576: PUSH
8577: LD_INT 11
8579: PUSH
8580: LD_INT 12
8582: PUSH
8583: LD_INT 13
8585: PUSH
8586: LD_INT 14
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: ST_TO_ADDR
8595: GO 9172
8597: LD_INT 24
8599: DOUBLE
8600: EQUAL
8601: IFTRUE 8605
8603: GO 8631
8605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8606: LD_ADDR_VAR 0 3
8610: PUSH
8611: LD_INT 11
8613: PUSH
8614: LD_INT 12
8616: PUSH
8617: LD_INT 13
8619: PUSH
8620: LD_INT 14
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: ST_TO_ADDR
8629: GO 9172
8631: LD_INT 30
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8665
8639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8640: LD_ADDR_VAR 0 3
8644: PUSH
8645: LD_INT 11
8647: PUSH
8648: LD_INT 12
8650: PUSH
8651: LD_INT 13
8653: PUSH
8654: LD_INT 14
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: ST_TO_ADDR
8663: GO 9172
8665: LD_INT 25
8667: DOUBLE
8668: EQUAL
8669: IFTRUE 8673
8671: GO 8691
8673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8674: LD_ADDR_VAR 0 3
8678: PUSH
8679: LD_INT 13
8681: PUSH
8682: LD_INT 14
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: ST_TO_ADDR
8689: GO 9172
8691: LD_INT 27
8693: DOUBLE
8694: EQUAL
8695: IFTRUE 8699
8697: GO 8717
8699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8700: LD_ADDR_VAR 0 3
8704: PUSH
8705: LD_INT 13
8707: PUSH
8708: LD_INT 14
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: ST_TO_ADDR
8715: GO 9172
8717: LD_INT 92
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8751
8725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8726: LD_ADDR_VAR 0 3
8730: PUSH
8731: LD_INT 11
8733: PUSH
8734: LD_INT 12
8736: PUSH
8737: LD_INT 13
8739: PUSH
8740: LD_INT 14
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9172
8751: LD_INT 28
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8777
8759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8760: LD_ADDR_VAR 0 3
8764: PUSH
8765: LD_INT 13
8767: PUSH
8768: LD_INT 14
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: ST_TO_ADDR
8775: GO 9172
8777: LD_INT 29
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8803
8785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8786: LD_ADDR_VAR 0 3
8790: PUSH
8791: LD_INT 13
8793: PUSH
8794: LD_INT 14
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: ST_TO_ADDR
8801: GO 9172
8803: LD_INT 31
8805: DOUBLE
8806: EQUAL
8807: IFTRUE 8811
8809: GO 8829
8811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8812: LD_ADDR_VAR 0 3
8816: PUSH
8817: LD_INT 13
8819: PUSH
8820: LD_INT 14
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: ST_TO_ADDR
8827: GO 9172
8829: LD_INT 26
8831: DOUBLE
8832: EQUAL
8833: IFTRUE 8837
8835: GO 8855
8837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8838: LD_ADDR_VAR 0 3
8842: PUSH
8843: LD_INT 13
8845: PUSH
8846: LD_INT 14
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: ST_TO_ADDR
8853: GO 9172
8855: LD_INT 42
8857: DOUBLE
8858: EQUAL
8859: IFTRUE 8863
8861: GO 8889
8863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8864: LD_ADDR_VAR 0 3
8868: PUSH
8869: LD_INT 21
8871: PUSH
8872: LD_INT 22
8874: PUSH
8875: LD_INT 23
8877: PUSH
8878: LD_INT 24
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: ST_TO_ADDR
8887: GO 9172
8889: LD_INT 43
8891: DOUBLE
8892: EQUAL
8893: IFTRUE 8897
8895: GO 8923
8897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8898: LD_ADDR_VAR 0 3
8902: PUSH
8903: LD_INT 21
8905: PUSH
8906: LD_INT 22
8908: PUSH
8909: LD_INT 23
8911: PUSH
8912: LD_INT 24
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: ST_TO_ADDR
8921: GO 9172
8923: LD_INT 44
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 8957
8931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8932: LD_ADDR_VAR 0 3
8936: PUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 22
8942: PUSH
8943: LD_INT 23
8945: PUSH
8946: LD_INT 24
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: ST_TO_ADDR
8955: GO 9172
8957: LD_INT 45
8959: DOUBLE
8960: EQUAL
8961: IFTRUE 8965
8963: GO 8991
8965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_INT 21
8973: PUSH
8974: LD_INT 22
8976: PUSH
8977: LD_INT 23
8979: PUSH
8980: LD_INT 24
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: ST_TO_ADDR
8989: GO 9172
8991: LD_INT 49
8993: DOUBLE
8994: EQUAL
8995: IFTRUE 8999
8997: GO 9025
8999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9000: LD_ADDR_VAR 0 3
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 23
9013: PUSH
9014: LD_INT 24
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: ST_TO_ADDR
9023: GO 9172
9025: LD_INT 51
9027: DOUBLE
9028: EQUAL
9029: IFTRUE 9033
9031: GO 9059
9033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
9034: LD_ADDR_VAR 0 3
9038: PUSH
9039: LD_INT 21
9041: PUSH
9042: LD_INT 22
9044: PUSH
9045: LD_INT 23
9047: PUSH
9048: LD_INT 24
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: ST_TO_ADDR
9057: GO 9172
9059: LD_INT 52
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9093
9067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9068: LD_ADDR_VAR 0 3
9072: PUSH
9073: LD_INT 21
9075: PUSH
9076: LD_INT 22
9078: PUSH
9079: LD_INT 23
9081: PUSH
9082: LD_INT 24
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: ST_TO_ADDR
9091: GO 9172
9093: LD_INT 53
9095: DOUBLE
9096: EQUAL
9097: IFTRUE 9101
9099: GO 9119
9101: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9102: LD_ADDR_VAR 0 3
9106: PUSH
9107: LD_INT 23
9109: PUSH
9110: LD_INT 24
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: ST_TO_ADDR
9117: GO 9172
9119: LD_INT 46
9121: DOUBLE
9122: EQUAL
9123: IFTRUE 9127
9125: GO 9145
9127: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9128: LD_ADDR_VAR 0 3
9132: PUSH
9133: LD_INT 23
9135: PUSH
9136: LD_INT 24
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: ST_TO_ADDR
9143: GO 9172
9145: LD_INT 47
9147: DOUBLE
9148: EQUAL
9149: IFTRUE 9153
9151: GO 9171
9153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9154: LD_ADDR_VAR 0 3
9158: PUSH
9159: LD_INT 23
9161: PUSH
9162: LD_INT 24
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: ST_TO_ADDR
9169: GO 9172
9171: POP
// result := ( chassis in result ) ;
9172: LD_ADDR_VAR 0 3
9176: PUSH
9177: LD_VAR 0 1
9181: PUSH
9182: LD_VAR 0 3
9186: IN
9187: ST_TO_ADDR
// end ;
9188: LD_VAR 0 3
9192: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
// result := array ;
9202: LD_ADDR_VAR 0 5
9206: PUSH
9207: LD_VAR 0 1
9211: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9212: LD_VAR 0 1
9216: NOT
9217: PUSH
9218: LD_VAR 0 2
9222: NOT
9223: OR
9224: PUSH
9225: LD_VAR 0 3
9229: NOT
9230: OR
9231: PUSH
9232: LD_VAR 0 2
9236: PUSH
9237: LD_VAR 0 1
9241: GREATER
9242: OR
9243: PUSH
9244: LD_VAR 0 3
9248: PUSH
9249: LD_VAR 0 1
9253: GREATER
9254: OR
9255: IFFALSE 9259
// exit ;
9257: GO 9555
// if direction then
9259: LD_VAR 0 4
9263: IFFALSE 9327
// begin d := 1 ;
9265: LD_ADDR_VAR 0 9
9269: PUSH
9270: LD_INT 1
9272: ST_TO_ADDR
// if i_from > i_to then
9273: LD_VAR 0 2
9277: PUSH
9278: LD_VAR 0 3
9282: GREATER
9283: IFFALSE 9309
// length := ( array - i_from ) + i_to else
9285: LD_ADDR_VAR 0 11
9289: PUSH
9290: LD_VAR 0 1
9294: PUSH
9295: LD_VAR 0 2
9299: MINUS
9300: PUSH
9301: LD_VAR 0 3
9305: PLUS
9306: ST_TO_ADDR
9307: GO 9325
// length := i_to - i_from ;
9309: LD_ADDR_VAR 0 11
9313: PUSH
9314: LD_VAR 0 3
9318: PUSH
9319: LD_VAR 0 2
9323: MINUS
9324: ST_TO_ADDR
// end else
9325: GO 9388
// begin d := - 1 ;
9327: LD_ADDR_VAR 0 9
9331: PUSH
9332: LD_INT 1
9334: NEG
9335: ST_TO_ADDR
// if i_from > i_to then
9336: LD_VAR 0 2
9340: PUSH
9341: LD_VAR 0 3
9345: GREATER
9346: IFFALSE 9366
// length := i_from - i_to else
9348: LD_ADDR_VAR 0 11
9352: PUSH
9353: LD_VAR 0 2
9357: PUSH
9358: LD_VAR 0 3
9362: MINUS
9363: ST_TO_ADDR
9364: GO 9388
// length := ( array - i_to ) + i_from ;
9366: LD_ADDR_VAR 0 11
9370: PUSH
9371: LD_VAR 0 1
9375: PUSH
9376: LD_VAR 0 3
9380: MINUS
9381: PUSH
9382: LD_VAR 0 2
9386: PLUS
9387: ST_TO_ADDR
// end ; if not length then
9388: LD_VAR 0 11
9392: NOT
9393: IFFALSE 9397
// exit ;
9395: GO 9555
// tmp := array ;
9397: LD_ADDR_VAR 0 10
9401: PUSH
9402: LD_VAR 0 1
9406: ST_TO_ADDR
// for i = 1 to length do
9407: LD_ADDR_VAR 0 6
9411: PUSH
9412: DOUBLE
9413: LD_INT 1
9415: DEC
9416: ST_TO_ADDR
9417: LD_VAR 0 11
9421: PUSH
9422: FOR_TO
9423: IFFALSE 9543
// begin for j = 1 to array do
9425: LD_ADDR_VAR 0 7
9429: PUSH
9430: DOUBLE
9431: LD_INT 1
9433: DEC
9434: ST_TO_ADDR
9435: LD_VAR 0 1
9439: PUSH
9440: FOR_TO
9441: IFFALSE 9529
// begin k := j + d ;
9443: LD_ADDR_VAR 0 8
9447: PUSH
9448: LD_VAR 0 7
9452: PUSH
9453: LD_VAR 0 9
9457: PLUS
9458: ST_TO_ADDR
// if k > array then
9459: LD_VAR 0 8
9463: PUSH
9464: LD_VAR 0 1
9468: GREATER
9469: IFFALSE 9479
// k := 1 ;
9471: LD_ADDR_VAR 0 8
9475: PUSH
9476: LD_INT 1
9478: ST_TO_ADDR
// if not k then
9479: LD_VAR 0 8
9483: NOT
9484: IFFALSE 9496
// k := array ;
9486: LD_ADDR_VAR 0 8
9490: PUSH
9491: LD_VAR 0 1
9495: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9496: LD_ADDR_VAR 0 10
9500: PUSH
9501: LD_VAR 0 10
9505: PPUSH
9506: LD_VAR 0 8
9510: PPUSH
9511: LD_VAR 0 1
9515: PUSH
9516: LD_VAR 0 7
9520: ARRAY
9521: PPUSH
9522: CALL_OW 1
9526: ST_TO_ADDR
// end ;
9527: GO 9440
9529: POP
9530: POP
// array := tmp ;
9531: LD_ADDR_VAR 0 1
9535: PUSH
9536: LD_VAR 0 10
9540: ST_TO_ADDR
// end ;
9541: GO 9422
9543: POP
9544: POP
// result := array ;
9545: LD_ADDR_VAR 0 5
9549: PUSH
9550: LD_VAR 0 1
9554: ST_TO_ADDR
// end ;
9555: LD_VAR 0 5
9559: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
// result := 0 ;
9564: LD_ADDR_VAR 0 3
9568: PUSH
9569: LD_INT 0
9571: ST_TO_ADDR
// if not array or not value in array then
9572: LD_VAR 0 1
9576: NOT
9577: PUSH
9578: LD_VAR 0 2
9582: PUSH
9583: LD_VAR 0 1
9587: IN
9588: NOT
9589: OR
9590: IFFALSE 9594
// exit ;
9592: GO 9648
// for i = 1 to array do
9594: LD_ADDR_VAR 0 4
9598: PUSH
9599: DOUBLE
9600: LD_INT 1
9602: DEC
9603: ST_TO_ADDR
9604: LD_VAR 0 1
9608: PUSH
9609: FOR_TO
9610: IFFALSE 9646
// if value = array [ i ] then
9612: LD_VAR 0 2
9616: PUSH
9617: LD_VAR 0 1
9621: PUSH
9622: LD_VAR 0 4
9626: ARRAY
9627: EQUAL
9628: IFFALSE 9644
// begin result := i ;
9630: LD_ADDR_VAR 0 3
9634: PUSH
9635: LD_VAR 0 4
9639: ST_TO_ADDR
// exit ;
9640: POP
9641: POP
9642: GO 9648
// end ;
9644: GO 9609
9646: POP
9647: POP
// end ;
9648: LD_VAR 0 3
9652: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9653: LD_INT 0
9655: PPUSH
// vc_chassis := chassis ;
9656: LD_ADDR_OWVAR 37
9660: PUSH
9661: LD_VAR 0 1
9665: ST_TO_ADDR
// vc_engine := engine ;
9666: LD_ADDR_OWVAR 39
9670: PUSH
9671: LD_VAR 0 2
9675: ST_TO_ADDR
// vc_control := control ;
9676: LD_ADDR_OWVAR 38
9680: PUSH
9681: LD_VAR 0 3
9685: ST_TO_ADDR
// vc_weapon := weapon ;
9686: LD_ADDR_OWVAR 40
9690: PUSH
9691: LD_VAR 0 4
9695: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9696: LD_ADDR_OWVAR 41
9700: PUSH
9701: LD_VAR 0 5
9705: ST_TO_ADDR
// end ;
9706: LD_VAR 0 6
9710: RET
// export function WantPlant ( unit ) ; var task ; begin
9711: LD_INT 0
9713: PPUSH
9714: PPUSH
// result := false ;
9715: LD_ADDR_VAR 0 2
9719: PUSH
9720: LD_INT 0
9722: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9723: LD_ADDR_VAR 0 3
9727: PUSH
9728: LD_VAR 0 1
9732: PPUSH
9733: CALL_OW 437
9737: ST_TO_ADDR
// if task then
9738: LD_VAR 0 3
9742: IFFALSE 9770
// if task [ 1 ] [ 1 ] = p then
9744: LD_VAR 0 3
9748: PUSH
9749: LD_INT 1
9751: ARRAY
9752: PUSH
9753: LD_INT 1
9755: ARRAY
9756: PUSH
9757: LD_STRING p
9759: EQUAL
9760: IFFALSE 9770
// result := true ;
9762: LD_ADDR_VAR 0 2
9766: PUSH
9767: LD_INT 1
9769: ST_TO_ADDR
// end ;
9770: LD_VAR 0 2
9774: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9775: LD_INT 0
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
// if pos < 1 then
9781: LD_VAR 0 2
9785: PUSH
9786: LD_INT 1
9788: LESS
9789: IFFALSE 9793
// exit ;
9791: GO 10096
// if pos = 1 then
9793: LD_VAR 0 2
9797: PUSH
9798: LD_INT 1
9800: EQUAL
9801: IFFALSE 9834
// result := Replace ( arr , pos [ 1 ] , value ) else
9803: LD_ADDR_VAR 0 4
9807: PUSH
9808: LD_VAR 0 1
9812: PPUSH
9813: LD_VAR 0 2
9817: PUSH
9818: LD_INT 1
9820: ARRAY
9821: PPUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: CALL_OW 1
9831: ST_TO_ADDR
9832: GO 10096
// begin tmp := arr ;
9834: LD_ADDR_VAR 0 6
9838: PUSH
9839: LD_VAR 0 1
9843: ST_TO_ADDR
// s_arr := [ tmp ] ;
9844: LD_ADDR_VAR 0 7
9848: PUSH
9849: LD_VAR 0 6
9853: PUSH
9854: EMPTY
9855: LIST
9856: ST_TO_ADDR
// for i = 1 to pos - 1 do
9857: LD_ADDR_VAR 0 5
9861: PUSH
9862: DOUBLE
9863: LD_INT 1
9865: DEC
9866: ST_TO_ADDR
9867: LD_VAR 0 2
9871: PUSH
9872: LD_INT 1
9874: MINUS
9875: PUSH
9876: FOR_TO
9877: IFFALSE 9922
// begin tmp := tmp [ pos [ i ] ] ;
9879: LD_ADDR_VAR 0 6
9883: PUSH
9884: LD_VAR 0 6
9888: PUSH
9889: LD_VAR 0 2
9893: PUSH
9894: LD_VAR 0 5
9898: ARRAY
9899: ARRAY
9900: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9901: LD_ADDR_VAR 0 7
9905: PUSH
9906: LD_VAR 0 7
9910: PUSH
9911: LD_VAR 0 6
9915: PUSH
9916: EMPTY
9917: LIST
9918: ADD
9919: ST_TO_ADDR
// end ;
9920: GO 9876
9922: POP
9923: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9924: LD_ADDR_VAR 0 6
9928: PUSH
9929: LD_VAR 0 6
9933: PPUSH
9934: LD_VAR 0 2
9938: PUSH
9939: LD_VAR 0 2
9943: ARRAY
9944: PPUSH
9945: LD_VAR 0 3
9949: PPUSH
9950: CALL_OW 1
9954: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9955: LD_ADDR_VAR 0 7
9959: PUSH
9960: LD_VAR 0 7
9964: PPUSH
9965: LD_VAR 0 7
9969: PPUSH
9970: LD_VAR 0 6
9974: PPUSH
9975: CALL_OW 1
9979: ST_TO_ADDR
// for i = s_arr downto 2 do
9980: LD_ADDR_VAR 0 5
9984: PUSH
9985: DOUBLE
9986: LD_VAR 0 7
9990: INC
9991: ST_TO_ADDR
9992: LD_INT 2
9994: PUSH
9995: FOR_DOWNTO
9996: IFFALSE 10080
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9998: LD_ADDR_VAR 0 6
10002: PUSH
10003: LD_VAR 0 7
10007: PUSH
10008: LD_VAR 0 5
10012: PUSH
10013: LD_INT 1
10015: MINUS
10016: ARRAY
10017: PPUSH
10018: LD_VAR 0 2
10022: PUSH
10023: LD_VAR 0 5
10027: PUSH
10028: LD_INT 1
10030: MINUS
10031: ARRAY
10032: PPUSH
10033: LD_VAR 0 7
10037: PUSH
10038: LD_VAR 0 5
10042: ARRAY
10043: PPUSH
10044: CALL_OW 1
10048: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
10049: LD_ADDR_VAR 0 7
10053: PUSH
10054: LD_VAR 0 7
10058: PPUSH
10059: LD_VAR 0 5
10063: PUSH
10064: LD_INT 1
10066: MINUS
10067: PPUSH
10068: LD_VAR 0 6
10072: PPUSH
10073: CALL_OW 1
10077: ST_TO_ADDR
// end ;
10078: GO 9995
10080: POP
10081: POP
// result := s_arr [ 1 ] ;
10082: LD_ADDR_VAR 0 4
10086: PUSH
10087: LD_VAR 0 7
10091: PUSH
10092: LD_INT 1
10094: ARRAY
10095: ST_TO_ADDR
// end ; end ;
10096: LD_VAR 0 4
10100: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10101: LD_INT 0
10103: PPUSH
10104: PPUSH
// if not list then
10105: LD_VAR 0 1
10109: NOT
10110: IFFALSE 10114
// exit ;
10112: GO 10205
// i := list [ pos1 ] ;
10114: LD_ADDR_VAR 0 5
10118: PUSH
10119: LD_VAR 0 1
10123: PUSH
10124: LD_VAR 0 2
10128: ARRAY
10129: ST_TO_ADDR
// if not i then
10130: LD_VAR 0 5
10134: NOT
10135: IFFALSE 10139
// exit ;
10137: GO 10205
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10139: LD_ADDR_VAR 0 1
10143: PUSH
10144: LD_VAR 0 1
10148: PPUSH
10149: LD_VAR 0 2
10153: PPUSH
10154: LD_VAR 0 1
10158: PUSH
10159: LD_VAR 0 3
10163: ARRAY
10164: PPUSH
10165: CALL_OW 1
10169: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10170: LD_ADDR_VAR 0 1
10174: PUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: LD_VAR 0 3
10184: PPUSH
10185: LD_VAR 0 5
10189: PPUSH
10190: CALL_OW 1
10194: ST_TO_ADDR
// result := list ;
10195: LD_ADDR_VAR 0 4
10199: PUSH
10200: LD_VAR 0 1
10204: ST_TO_ADDR
// end ;
10205: LD_VAR 0 4
10209: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10210: LD_INT 0
10212: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10213: LD_ADDR_VAR 0 5
10217: PUSH
10218: LD_VAR 0 1
10222: PPUSH
10223: CALL_OW 250
10227: PPUSH
10228: LD_VAR 0 1
10232: PPUSH
10233: CALL_OW 251
10237: PPUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: LD_VAR 0 4
10252: PPUSH
10253: CALL 10631 0 5
10257: ST_TO_ADDR
// end ;
10258: LD_VAR 0 5
10262: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10263: LD_INT 0
10265: PPUSH
10266: PPUSH
10267: PPUSH
10268: PPUSH
// if not list or not unit then
10269: LD_VAR 0 2
10273: NOT
10274: PUSH
10275: LD_VAR 0 1
10279: NOT
10280: OR
10281: IFFALSE 10285
// exit ;
10283: GO 10626
// result := [ ] ;
10285: LD_ADDR_VAR 0 5
10289: PUSH
10290: EMPTY
10291: ST_TO_ADDR
// for i in list do
10292: LD_ADDR_VAR 0 6
10296: PUSH
10297: LD_VAR 0 2
10301: PUSH
10302: FOR_IN
10303: IFFALSE 10521
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10305: LD_ADDR_VAR 0 8
10309: PUSH
10310: LD_VAR 0 1
10314: PPUSH
10315: LD_VAR 0 6
10319: PUSH
10320: LD_INT 1
10322: ARRAY
10323: PPUSH
10324: LD_VAR 0 6
10328: PUSH
10329: LD_INT 2
10331: ARRAY
10332: PPUSH
10333: CALL_OW 297
10337: ST_TO_ADDR
// if not Count ( result ) then
10338: LD_VAR 0 5
10342: PPUSH
10343: CALL 6915 0 1
10347: NOT
10348: IFFALSE 10381
// begin result := Join ( result , [ i , tmp ] ) ;
10350: LD_ADDR_VAR 0 5
10354: PUSH
10355: LD_VAR 0 5
10359: PPUSH
10360: LD_VAR 0 6
10364: PUSH
10365: LD_VAR 0 8
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL 42524 0 2
10378: ST_TO_ADDR
// continue ;
10379: GO 10302
// end ; if result [ result ] [ 2 ] <= tmp then
10381: LD_VAR 0 5
10385: PUSH
10386: LD_VAR 0 5
10390: ARRAY
10391: PUSH
10392: LD_INT 2
10394: ARRAY
10395: PUSH
10396: LD_VAR 0 8
10400: LESSEQUAL
10401: IFFALSE 10434
// result := Join ( result , [ i , tmp ] ) else
10403: LD_ADDR_VAR 0 5
10407: PUSH
10408: LD_VAR 0 5
10412: PPUSH
10413: LD_VAR 0 6
10417: PUSH
10418: LD_VAR 0 8
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL 42524 0 2
10431: ST_TO_ADDR
10432: GO 10519
// begin for j := 1 to Count ( result ) do
10434: LD_ADDR_VAR 0 7
10438: PUSH
10439: DOUBLE
10440: LD_INT 1
10442: DEC
10443: ST_TO_ADDR
10444: LD_VAR 0 5
10448: PPUSH
10449: CALL 6915 0 1
10453: PUSH
10454: FOR_TO
10455: IFFALSE 10517
// begin if tmp < result [ j ] [ 2 ] then
10457: LD_VAR 0 8
10461: PUSH
10462: LD_VAR 0 5
10466: PUSH
10467: LD_VAR 0 7
10471: ARRAY
10472: PUSH
10473: LD_INT 2
10475: ARRAY
10476: LESS
10477: IFFALSE 10515
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10479: LD_ADDR_VAR 0 5
10483: PUSH
10484: LD_VAR 0 5
10488: PPUSH
10489: LD_VAR 0 7
10493: PPUSH
10494: LD_VAR 0 6
10498: PUSH
10499: LD_VAR 0 8
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 2
10512: ST_TO_ADDR
// break ;
10513: GO 10517
// end ; end ;
10515: GO 10454
10517: POP
10518: POP
// end ; end ;
10519: GO 10302
10521: POP
10522: POP
// if result and not asc then
10523: LD_VAR 0 5
10527: PUSH
10528: LD_VAR 0 3
10532: NOT
10533: AND
10534: IFFALSE 10551
// result := ReverseArray ( result ) ;
10536: LD_ADDR_VAR 0 5
10540: PUSH
10541: LD_VAR 0 5
10545: PPUSH
10546: CALL 37791 0 1
10550: ST_TO_ADDR
// tmp := [ ] ;
10551: LD_ADDR_VAR 0 8
10555: PUSH
10556: EMPTY
10557: ST_TO_ADDR
// if mode then
10558: LD_VAR 0 4
10562: IFFALSE 10626
// begin for i := 1 to result do
10564: LD_ADDR_VAR 0 6
10568: PUSH
10569: DOUBLE
10570: LD_INT 1
10572: DEC
10573: ST_TO_ADDR
10574: LD_VAR 0 5
10578: PUSH
10579: FOR_TO
10580: IFFALSE 10614
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10582: LD_ADDR_VAR 0 8
10586: PUSH
10587: LD_VAR 0 8
10591: PPUSH
10592: LD_VAR 0 5
10596: PUSH
10597: LD_VAR 0 6
10601: ARRAY
10602: PUSH
10603: LD_INT 1
10605: ARRAY
10606: PPUSH
10607: CALL 42524 0 2
10611: ST_TO_ADDR
10612: GO 10579
10614: POP
10615: POP
// result := tmp ;
10616: LD_ADDR_VAR 0 5
10620: PUSH
10621: LD_VAR 0 8
10625: ST_TO_ADDR
// end ; end ;
10626: LD_VAR 0 5
10630: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10631: LD_INT 0
10633: PPUSH
10634: PPUSH
10635: PPUSH
10636: PPUSH
// if not list then
10637: LD_VAR 0 3
10641: NOT
10642: IFFALSE 10646
// exit ;
10644: GO 11034
// result := [ ] ;
10646: LD_ADDR_VAR 0 6
10650: PUSH
10651: EMPTY
10652: ST_TO_ADDR
// for i in list do
10653: LD_ADDR_VAR 0 7
10657: PUSH
10658: LD_VAR 0 3
10662: PUSH
10663: FOR_IN
10664: IFFALSE 10866
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10666: LD_ADDR_VAR 0 9
10670: PUSH
10671: LD_VAR 0 7
10675: PPUSH
10676: LD_VAR 0 1
10680: PPUSH
10681: LD_VAR 0 2
10685: PPUSH
10686: CALL_OW 297
10690: ST_TO_ADDR
// if not result then
10691: LD_VAR 0 6
10695: NOT
10696: IFFALSE 10722
// result := [ [ i , tmp ] ] else
10698: LD_ADDR_VAR 0 6
10702: PUSH
10703: LD_VAR 0 7
10707: PUSH
10708: LD_VAR 0 9
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: ST_TO_ADDR
10720: GO 10864
// begin if result [ result ] [ 2 ] <= tmp then
10722: LD_VAR 0 6
10726: PUSH
10727: LD_VAR 0 6
10731: ARRAY
10732: PUSH
10733: LD_INT 2
10735: ARRAY
10736: PUSH
10737: LD_VAR 0 9
10741: LESSEQUAL
10742: IFFALSE 10784
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10744: LD_ADDR_VAR 0 6
10748: PUSH
10749: LD_VAR 0 6
10753: PPUSH
10754: LD_VAR 0 6
10758: PUSH
10759: LD_INT 1
10761: PLUS
10762: PPUSH
10763: LD_VAR 0 7
10767: PUSH
10768: LD_VAR 0 9
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 2
10781: ST_TO_ADDR
10782: GO 10864
// for j := 1 to result do
10784: LD_ADDR_VAR 0 8
10788: PUSH
10789: DOUBLE
10790: LD_INT 1
10792: DEC
10793: ST_TO_ADDR
10794: LD_VAR 0 6
10798: PUSH
10799: FOR_TO
10800: IFFALSE 10862
// begin if tmp < result [ j ] [ 2 ] then
10802: LD_VAR 0 9
10806: PUSH
10807: LD_VAR 0 6
10811: PUSH
10812: LD_VAR 0 8
10816: ARRAY
10817: PUSH
10818: LD_INT 2
10820: ARRAY
10821: LESS
10822: IFFALSE 10860
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10824: LD_ADDR_VAR 0 6
10828: PUSH
10829: LD_VAR 0 6
10833: PPUSH
10834: LD_VAR 0 8
10838: PPUSH
10839: LD_VAR 0 7
10843: PUSH
10844: LD_VAR 0 9
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 2
10857: ST_TO_ADDR
// break ;
10858: GO 10862
// end ; end ;
10860: GO 10799
10862: POP
10863: POP
// end ; end ;
10864: GO 10663
10866: POP
10867: POP
// if result and not asc then
10868: LD_VAR 0 6
10872: PUSH
10873: LD_VAR 0 4
10877: NOT
10878: AND
10879: IFFALSE 10954
// begin tmp := result ;
10881: LD_ADDR_VAR 0 9
10885: PUSH
10886: LD_VAR 0 6
10890: ST_TO_ADDR
// for i = tmp downto 1 do
10891: LD_ADDR_VAR 0 7
10895: PUSH
10896: DOUBLE
10897: LD_VAR 0 9
10901: INC
10902: ST_TO_ADDR
10903: LD_INT 1
10905: PUSH
10906: FOR_DOWNTO
10907: IFFALSE 10952
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10909: LD_ADDR_VAR 0 6
10913: PUSH
10914: LD_VAR 0 6
10918: PPUSH
10919: LD_VAR 0 9
10923: PUSH
10924: LD_VAR 0 7
10928: MINUS
10929: PUSH
10930: LD_INT 1
10932: PLUS
10933: PPUSH
10934: LD_VAR 0 9
10938: PUSH
10939: LD_VAR 0 7
10943: ARRAY
10944: PPUSH
10945: CALL_OW 1
10949: ST_TO_ADDR
10950: GO 10906
10952: POP
10953: POP
// end ; tmp := [ ] ;
10954: LD_ADDR_VAR 0 9
10958: PUSH
10959: EMPTY
10960: ST_TO_ADDR
// if mode then
10961: LD_VAR 0 5
10965: IFFALSE 11034
// begin for i = 1 to result do
10967: LD_ADDR_VAR 0 7
10971: PUSH
10972: DOUBLE
10973: LD_INT 1
10975: DEC
10976: ST_TO_ADDR
10977: LD_VAR 0 6
10981: PUSH
10982: FOR_TO
10983: IFFALSE 11022
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10985: LD_ADDR_VAR 0 9
10989: PUSH
10990: LD_VAR 0 9
10994: PPUSH
10995: LD_VAR 0 7
10999: PPUSH
11000: LD_VAR 0 6
11004: PUSH
11005: LD_VAR 0 7
11009: ARRAY
11010: PUSH
11011: LD_INT 1
11013: ARRAY
11014: PPUSH
11015: CALL_OW 1
11019: ST_TO_ADDR
11020: GO 10982
11022: POP
11023: POP
// result := tmp ;
11024: LD_ADDR_VAR 0 6
11028: PUSH
11029: LD_VAR 0 9
11033: ST_TO_ADDR
// end ; end ;
11034: LD_VAR 0 6
11038: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11047: LD_ADDR_VAR 0 5
11051: PUSH
11052: LD_INT 0
11054: PUSH
11055: LD_INT 0
11057: PUSH
11058: LD_INT 0
11060: PUSH
11061: EMPTY
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: ST_TO_ADDR
// if not x or not y then
11069: LD_VAR 0 2
11073: NOT
11074: PUSH
11075: LD_VAR 0 3
11079: NOT
11080: OR
11081: IFFALSE 11085
// exit ;
11083: GO 12735
// if not range then
11085: LD_VAR 0 4
11089: NOT
11090: IFFALSE 11100
// range := 10 ;
11092: LD_ADDR_VAR 0 4
11096: PUSH
11097: LD_INT 10
11099: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11100: LD_ADDR_VAR 0 8
11104: PUSH
11105: LD_INT 81
11107: PUSH
11108: LD_VAR 0 1
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 92
11119: PUSH
11120: LD_VAR 0 2
11124: PUSH
11125: LD_VAR 0 3
11129: PUSH
11130: LD_VAR 0 4
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 3
11143: PUSH
11144: LD_INT 21
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: PPUSH
11163: CALL_OW 69
11167: ST_TO_ADDR
// if not tmp then
11168: LD_VAR 0 8
11172: NOT
11173: IFFALSE 11177
// exit ;
11175: GO 12735
// for i in tmp do
11177: LD_ADDR_VAR 0 6
11181: PUSH
11182: LD_VAR 0 8
11186: PUSH
11187: FOR_IN
11188: IFFALSE 12710
// begin points := [ 0 , 0 , 0 ] ;
11190: LD_ADDR_VAR 0 9
11194: PUSH
11195: LD_INT 0
11197: PUSH
11198: LD_INT 0
11200: PUSH
11201: LD_INT 0
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: ST_TO_ADDR
// bpoints := 1 ;
11209: LD_ADDR_VAR 0 10
11213: PUSH
11214: LD_INT 1
11216: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11217: LD_VAR 0 6
11221: PPUSH
11222: CALL_OW 247
11226: PUSH
11227: LD_INT 1
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11813
11235: POP
// begin if GetClass ( i ) = 1 then
11236: LD_VAR 0 6
11240: PPUSH
11241: CALL_OW 257
11245: PUSH
11246: LD_INT 1
11248: EQUAL
11249: IFFALSE 11270
// points := [ 10 , 5 , 3 ] ;
11251: LD_ADDR_VAR 0 9
11255: PUSH
11256: LD_INT 10
11258: PUSH
11259: LD_INT 5
11261: PUSH
11262: LD_INT 3
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11270: LD_VAR 0 6
11274: PPUSH
11275: CALL_OW 257
11279: PUSH
11280: LD_INT 2
11282: PUSH
11283: LD_INT 3
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: IN
11294: IFFALSE 11315
// points := [ 3 , 2 , 1 ] ;
11296: LD_ADDR_VAR 0 9
11300: PUSH
11301: LD_INT 3
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: LD_INT 1
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11315: LD_VAR 0 6
11319: PPUSH
11320: CALL_OW 257
11324: PUSH
11325: LD_INT 5
11327: EQUAL
11328: IFFALSE 11349
// points := [ 130 , 5 , 2 ] ;
11330: LD_ADDR_VAR 0 9
11334: PUSH
11335: LD_INT 130
11337: PUSH
11338: LD_INT 5
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11349: LD_VAR 0 6
11353: PPUSH
11354: CALL_OW 257
11358: PUSH
11359: LD_INT 8
11361: EQUAL
11362: IFFALSE 11383
// points := [ 35 , 35 , 30 ] ;
11364: LD_ADDR_VAR 0 9
11368: PUSH
11369: LD_INT 35
11371: PUSH
11372: LD_INT 35
11374: PUSH
11375: LD_INT 30
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11383: LD_VAR 0 6
11387: PPUSH
11388: CALL_OW 257
11392: PUSH
11393: LD_INT 9
11395: EQUAL
11396: IFFALSE 11417
// points := [ 20 , 55 , 40 ] ;
11398: LD_ADDR_VAR 0 9
11402: PUSH
11403: LD_INT 20
11405: PUSH
11406: LD_INT 55
11408: PUSH
11409: LD_INT 40
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11417: LD_VAR 0 6
11421: PPUSH
11422: CALL_OW 257
11426: PUSH
11427: LD_INT 12
11429: PUSH
11430: LD_INT 16
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: IN
11437: IFFALSE 11458
// points := [ 5 , 3 , 2 ] ;
11439: LD_ADDR_VAR 0 9
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: LD_INT 3
11449: PUSH
11450: LD_INT 2
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11458: LD_VAR 0 6
11462: PPUSH
11463: CALL_OW 257
11467: PUSH
11468: LD_INT 17
11470: EQUAL
11471: IFFALSE 11492
// points := [ 100 , 50 , 75 ] ;
11473: LD_ADDR_VAR 0 9
11477: PUSH
11478: LD_INT 100
11480: PUSH
11481: LD_INT 50
11483: PUSH
11484: LD_INT 75
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11492: LD_VAR 0 6
11496: PPUSH
11497: CALL_OW 257
11501: PUSH
11502: LD_INT 15
11504: EQUAL
11505: IFFALSE 11526
// points := [ 10 , 5 , 3 ] ;
11507: LD_ADDR_VAR 0 9
11511: PUSH
11512: LD_INT 10
11514: PUSH
11515: LD_INT 5
11517: PUSH
11518: LD_INT 3
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11526: LD_VAR 0 6
11530: PPUSH
11531: CALL_OW 257
11535: PUSH
11536: LD_INT 14
11538: EQUAL
11539: IFFALSE 11560
// points := [ 10 , 0 , 0 ] ;
11541: LD_ADDR_VAR 0 9
11545: PUSH
11546: LD_INT 10
11548: PUSH
11549: LD_INT 0
11551: PUSH
11552: LD_INT 0
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11560: LD_VAR 0 6
11564: PPUSH
11565: CALL_OW 257
11569: PUSH
11570: LD_INT 11
11572: EQUAL
11573: IFFALSE 11594
// points := [ 30 , 10 , 5 ] ;
11575: LD_ADDR_VAR 0 9
11579: PUSH
11580: LD_INT 30
11582: PUSH
11583: LD_INT 10
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11594: LD_VAR 0 1
11598: PPUSH
11599: LD_INT 5
11601: PPUSH
11602: CALL_OW 321
11606: PUSH
11607: LD_INT 2
11609: EQUAL
11610: IFFALSE 11627
// bpoints := bpoints * 1.8 ;
11612: LD_ADDR_VAR 0 10
11616: PUSH
11617: LD_VAR 0 10
11621: PUSH
11622: LD_REAL  1.80000000000000E+0000
11625: MUL
11626: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11627: LD_VAR 0 6
11631: PPUSH
11632: CALL_OW 257
11636: PUSH
11637: LD_INT 1
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: LD_INT 3
11645: PUSH
11646: LD_INT 4
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: IN
11655: PUSH
11656: LD_VAR 0 1
11660: PPUSH
11661: LD_INT 51
11663: PPUSH
11664: CALL_OW 321
11668: PUSH
11669: LD_INT 2
11671: EQUAL
11672: AND
11673: IFFALSE 11690
// bpoints := bpoints * 1.2 ;
11675: LD_ADDR_VAR 0 10
11679: PUSH
11680: LD_VAR 0 10
11684: PUSH
11685: LD_REAL  1.20000000000000E+0000
11688: MUL
11689: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11690: LD_VAR 0 6
11694: PPUSH
11695: CALL_OW 257
11699: PUSH
11700: LD_INT 5
11702: PUSH
11703: LD_INT 7
11705: PUSH
11706: LD_INT 9
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: IN
11714: PUSH
11715: LD_VAR 0 1
11719: PPUSH
11720: LD_INT 52
11722: PPUSH
11723: CALL_OW 321
11727: PUSH
11728: LD_INT 2
11730: EQUAL
11731: AND
11732: IFFALSE 11749
// bpoints := bpoints * 1.5 ;
11734: LD_ADDR_VAR 0 10
11738: PUSH
11739: LD_VAR 0 10
11743: PUSH
11744: LD_REAL  1.50000000000000E+0000
11747: MUL
11748: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11749: LD_VAR 0 1
11753: PPUSH
11754: LD_INT 66
11756: PPUSH
11757: CALL_OW 321
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: IFFALSE 11782
// bpoints := bpoints * 1.1 ;
11767: LD_ADDR_VAR 0 10
11771: PUSH
11772: LD_VAR 0 10
11776: PUSH
11777: LD_REAL  1.10000000000000E+0000
11780: MUL
11781: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11782: LD_ADDR_VAR 0 10
11786: PUSH
11787: LD_VAR 0 10
11791: PUSH
11792: LD_VAR 0 6
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 259
11804: PUSH
11805: LD_REAL  1.15000000000000E+0000
11808: MUL
11809: MUL
11810: ST_TO_ADDR
// end ; unit_vehicle :
11811: GO 12639
11813: LD_INT 2
11815: DOUBLE
11816: EQUAL
11817: IFTRUE 11821
11819: GO 12627
11821: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11822: LD_VAR 0 6
11826: PPUSH
11827: CALL_OW 264
11831: PUSH
11832: LD_INT 2
11834: PUSH
11835: LD_INT 42
11837: PUSH
11838: LD_INT 24
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: IN
11846: IFFALSE 11867
// points := [ 25 , 5 , 3 ] ;
11848: LD_ADDR_VAR 0 9
11852: PUSH
11853: LD_INT 25
11855: PUSH
11856: LD_INT 5
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11867: LD_VAR 0 6
11871: PPUSH
11872: CALL_OW 264
11876: PUSH
11877: LD_INT 4
11879: PUSH
11880: LD_INT 43
11882: PUSH
11883: LD_INT 25
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: IN
11891: IFFALSE 11912
// points := [ 40 , 15 , 5 ] ;
11893: LD_ADDR_VAR 0 9
11897: PUSH
11898: LD_INT 40
11900: PUSH
11901: LD_INT 15
11903: PUSH
11904: LD_INT 5
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11912: LD_VAR 0 6
11916: PPUSH
11917: CALL_OW 264
11921: PUSH
11922: LD_INT 3
11924: PUSH
11925: LD_INT 23
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: IN
11932: IFFALSE 11953
// points := [ 7 , 25 , 8 ] ;
11934: LD_ADDR_VAR 0 9
11938: PUSH
11939: LD_INT 7
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 8
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11953: LD_VAR 0 6
11957: PPUSH
11958: CALL_OW 264
11962: PUSH
11963: LD_INT 5
11965: PUSH
11966: LD_INT 27
11968: PUSH
11969: LD_INT 44
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: IN
11977: IFFALSE 11998
// points := [ 14 , 50 , 16 ] ;
11979: LD_ADDR_VAR 0 9
11983: PUSH
11984: LD_INT 14
11986: PUSH
11987: LD_INT 50
11989: PUSH
11990: LD_INT 16
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11998: LD_VAR 0 6
12002: PPUSH
12003: CALL_OW 264
12007: PUSH
12008: LD_INT 6
12010: PUSH
12011: LD_INT 46
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: IN
12018: IFFALSE 12039
// points := [ 32 , 120 , 70 ] ;
12020: LD_ADDR_VAR 0 9
12024: PUSH
12025: LD_INT 32
12027: PUSH
12028: LD_INT 120
12030: PUSH
12031: LD_INT 70
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
12039: LD_VAR 0 6
12043: PPUSH
12044: CALL_OW 264
12048: PUSH
12049: LD_INT 7
12051: PUSH
12052: LD_INT 28
12054: PUSH
12055: LD_INT 45
12057: PUSH
12058: LD_INT 92
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: IN
12067: IFFALSE 12088
// points := [ 35 , 20 , 45 ] ;
12069: LD_ADDR_VAR 0 9
12073: PUSH
12074: LD_INT 35
12076: PUSH
12077: LD_INT 20
12079: PUSH
12080: LD_INT 45
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12088: LD_VAR 0 6
12092: PPUSH
12093: CALL_OW 264
12097: PUSH
12098: LD_INT 47
12100: PUSH
12101: EMPTY
12102: LIST
12103: IN
12104: IFFALSE 12125
// points := [ 67 , 45 , 75 ] ;
12106: LD_ADDR_VAR 0 9
12110: PUSH
12111: LD_INT 67
12113: PUSH
12114: LD_INT 45
12116: PUSH
12117: LD_INT 75
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12125: LD_VAR 0 6
12129: PPUSH
12130: CALL_OW 264
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: EMPTY
12139: LIST
12140: IN
12141: IFFALSE 12162
// points := [ 120 , 30 , 80 ] ;
12143: LD_ADDR_VAR 0 9
12147: PUSH
12148: LD_INT 120
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: LD_INT 80
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12162: LD_VAR 0 6
12166: PPUSH
12167: CALL_OW 264
12171: PUSH
12172: LD_INT 22
12174: PUSH
12175: EMPTY
12176: LIST
12177: IN
12178: IFFALSE 12199
// points := [ 40 , 1 , 1 ] ;
12180: LD_ADDR_VAR 0 9
12184: PUSH
12185: LD_INT 40
12187: PUSH
12188: LD_INT 1
12190: PUSH
12191: LD_INT 1
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12199: LD_VAR 0 6
12203: PPUSH
12204: CALL_OW 264
12208: PUSH
12209: LD_INT 29
12211: PUSH
12212: EMPTY
12213: LIST
12214: IN
12215: IFFALSE 12236
// points := [ 70 , 200 , 400 ] ;
12217: LD_ADDR_VAR 0 9
12221: PUSH
12222: LD_INT 70
12224: PUSH
12225: LD_INT 200
12227: PUSH
12228: LD_INT 400
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12236: LD_VAR 0 6
12240: PPUSH
12241: CALL_OW 264
12245: PUSH
12246: LD_INT 14
12248: PUSH
12249: LD_INT 53
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: IN
12256: IFFALSE 12277
// points := [ 40 , 10 , 20 ] ;
12258: LD_ADDR_VAR 0 9
12262: PUSH
12263: LD_INT 40
12265: PUSH
12266: LD_INT 10
12268: PUSH
12269: LD_INT 20
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12277: LD_VAR 0 6
12281: PPUSH
12282: CALL_OW 264
12286: PUSH
12287: LD_INT 9
12289: PUSH
12290: EMPTY
12291: LIST
12292: IN
12293: IFFALSE 12314
// points := [ 5 , 70 , 20 ] ;
12295: LD_ADDR_VAR 0 9
12299: PUSH
12300: LD_INT 5
12302: PUSH
12303: LD_INT 70
12305: PUSH
12306: LD_INT 20
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12314: LD_VAR 0 6
12318: PPUSH
12319: CALL_OW 264
12323: PUSH
12324: LD_INT 10
12326: PUSH
12327: EMPTY
12328: LIST
12329: IN
12330: IFFALSE 12351
// points := [ 35 , 110 , 70 ] ;
12332: LD_ADDR_VAR 0 9
12336: PUSH
12337: LD_INT 35
12339: PUSH
12340: LD_INT 110
12342: PUSH
12343: LD_INT 70
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12351: LD_VAR 0 6
12355: PPUSH
12356: CALL_OW 265
12360: PUSH
12361: LD_INT 25
12363: EQUAL
12364: IFFALSE 12385
// points := [ 80 , 65 , 100 ] ;
12366: LD_ADDR_VAR 0 9
12370: PUSH
12371: LD_INT 80
12373: PUSH
12374: LD_INT 65
12376: PUSH
12377: LD_INT 100
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12385: LD_VAR 0 6
12389: PPUSH
12390: CALL_OW 263
12394: PUSH
12395: LD_INT 1
12397: EQUAL
12398: IFFALSE 12433
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12400: LD_ADDR_VAR 0 10
12404: PUSH
12405: LD_VAR 0 10
12409: PUSH
12410: LD_VAR 0 6
12414: PPUSH
12415: CALL_OW 311
12419: PPUSH
12420: LD_INT 3
12422: PPUSH
12423: CALL_OW 259
12427: PUSH
12428: LD_INT 4
12430: MUL
12431: MUL
12432: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12433: LD_VAR 0 6
12437: PPUSH
12438: CALL_OW 263
12442: PUSH
12443: LD_INT 2
12445: EQUAL
12446: IFFALSE 12497
// begin j := IsControledBy ( i ) ;
12448: LD_ADDR_VAR 0 7
12452: PUSH
12453: LD_VAR 0 6
12457: PPUSH
12458: CALL_OW 312
12462: ST_TO_ADDR
// if j then
12463: LD_VAR 0 7
12467: IFFALSE 12497
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12469: LD_ADDR_VAR 0 10
12473: PUSH
12474: LD_VAR 0 10
12478: PUSH
12479: LD_VAR 0 7
12483: PPUSH
12484: LD_INT 3
12486: PPUSH
12487: CALL_OW 259
12491: PUSH
12492: LD_INT 3
12494: MUL
12495: MUL
12496: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12497: LD_VAR 0 6
12501: PPUSH
12502: CALL_OW 264
12506: PUSH
12507: LD_INT 5
12509: PUSH
12510: LD_INT 6
12512: PUSH
12513: LD_INT 46
12515: PUSH
12516: LD_INT 44
12518: PUSH
12519: LD_INT 47
12521: PUSH
12522: LD_INT 45
12524: PUSH
12525: LD_INT 28
12527: PUSH
12528: LD_INT 7
12530: PUSH
12531: LD_INT 27
12533: PUSH
12534: LD_INT 29
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: IN
12549: PUSH
12550: LD_VAR 0 1
12554: PPUSH
12555: LD_INT 52
12557: PPUSH
12558: CALL_OW 321
12562: PUSH
12563: LD_INT 2
12565: EQUAL
12566: AND
12567: IFFALSE 12584
// bpoints := bpoints * 1.2 ;
12569: LD_ADDR_VAR 0 10
12573: PUSH
12574: LD_VAR 0 10
12578: PUSH
12579: LD_REAL  1.20000000000000E+0000
12582: MUL
12583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12584: LD_VAR 0 6
12588: PPUSH
12589: CALL_OW 264
12593: PUSH
12594: LD_INT 6
12596: PUSH
12597: LD_INT 46
12599: PUSH
12600: LD_INT 47
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: IN
12608: IFFALSE 12625
// bpoints := bpoints * 1.2 ;
12610: LD_ADDR_VAR 0 10
12614: PUSH
12615: LD_VAR 0 10
12619: PUSH
12620: LD_REAL  1.20000000000000E+0000
12623: MUL
12624: ST_TO_ADDR
// end ; unit_building :
12625: GO 12639
12627: LD_INT 3
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12638
12635: POP
// ; end ;
12636: GO 12639
12638: POP
// for j = 1 to 3 do
12639: LD_ADDR_VAR 0 7
12643: PUSH
12644: DOUBLE
12645: LD_INT 1
12647: DEC
12648: ST_TO_ADDR
12649: LD_INT 3
12651: PUSH
12652: FOR_TO
12653: IFFALSE 12706
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12655: LD_ADDR_VAR 0 5
12659: PUSH
12660: LD_VAR 0 5
12664: PPUSH
12665: LD_VAR 0 7
12669: PPUSH
12670: LD_VAR 0 5
12674: PUSH
12675: LD_VAR 0 7
12679: ARRAY
12680: PUSH
12681: LD_VAR 0 9
12685: PUSH
12686: LD_VAR 0 7
12690: ARRAY
12691: PUSH
12692: LD_VAR 0 10
12696: MUL
12697: PLUS
12698: PPUSH
12699: CALL_OW 1
12703: ST_TO_ADDR
12704: GO 12652
12706: POP
12707: POP
// end ;
12708: GO 11187
12710: POP
12711: POP
// result := Replace ( result , 4 , tmp ) ;
12712: LD_ADDR_VAR 0 5
12716: PUSH
12717: LD_VAR 0 5
12721: PPUSH
12722: LD_INT 4
12724: PPUSH
12725: LD_VAR 0 8
12729: PPUSH
12730: CALL_OW 1
12734: ST_TO_ADDR
// end ;
12735: LD_VAR 0 5
12739: RET
// export function DangerAtRange ( unit , range ) ; begin
12740: LD_INT 0
12742: PPUSH
// if not unit then
12743: LD_VAR 0 1
12747: NOT
12748: IFFALSE 12752
// exit ;
12750: GO 12797
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12752: LD_ADDR_VAR 0 3
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 255
12766: PPUSH
12767: LD_VAR 0 1
12771: PPUSH
12772: CALL_OW 250
12776: PPUSH
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL_OW 251
12786: PPUSH
12787: LD_VAR 0 2
12791: PPUSH
12792: CALL 11039 0 4
12796: ST_TO_ADDR
// end ;
12797: LD_VAR 0 3
12801: RET
// export function DangerInArea ( side , area ) ; begin
12802: LD_INT 0
12804: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: LD_VAR 0 2
12814: PPUSH
12815: LD_INT 81
12817: PUSH
12818: LD_VAR 0 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PPUSH
12827: CALL_OW 70
12831: ST_TO_ADDR
// end ;
12832: LD_VAR 0 3
12836: RET
// export function IsExtension ( b ) ; begin
12837: LD_INT 0
12839: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12840: LD_ADDR_VAR 0 2
12844: PUSH
12845: LD_VAR 0 1
12849: PUSH
12850: LD_INT 23
12852: PUSH
12853: LD_INT 20
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 17
12861: PUSH
12862: LD_INT 24
12864: PUSH
12865: LD_INT 21
12867: PUSH
12868: LD_INT 19
12870: PUSH
12871: LD_INT 16
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 18
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: IN
12892: ST_TO_ADDR
// end ;
12893: LD_VAR 0 2
12897: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12898: LD_INT 0
12900: PPUSH
12901: PPUSH
12902: PPUSH
// result := [ ] ;
12903: LD_ADDR_VAR 0 4
12907: PUSH
12908: EMPTY
12909: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12910: LD_ADDR_VAR 0 5
12914: PUSH
12915: LD_VAR 0 2
12919: PPUSH
12920: LD_INT 21
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PPUSH
12930: CALL_OW 70
12934: ST_TO_ADDR
// if not tmp then
12935: LD_VAR 0 5
12939: NOT
12940: IFFALSE 12944
// exit ;
12942: GO 13008
// if checkLink then
12944: LD_VAR 0 3
12948: IFFALSE 12998
// begin for i in tmp do
12950: LD_ADDR_VAR 0 6
12954: PUSH
12955: LD_VAR 0 5
12959: PUSH
12960: FOR_IN
12961: IFFALSE 12996
// if GetBase ( i ) <> base then
12963: LD_VAR 0 6
12967: PPUSH
12968: CALL_OW 274
12972: PUSH
12973: LD_VAR 0 1
12977: NONEQUAL
12978: IFFALSE 12994
// ComLinkToBase ( base , i ) ;
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_VAR 0 6
12989: PPUSH
12990: CALL_OW 169
12994: GO 12960
12996: POP
12997: POP
// end ; result := tmp ;
12998: LD_ADDR_VAR 0 4
13002: PUSH
13003: LD_VAR 0 5
13007: ST_TO_ADDR
// end ;
13008: LD_VAR 0 4
13012: RET
// export function ComComplete ( units , b ) ; var i ; begin
13013: LD_INT 0
13015: PPUSH
13016: PPUSH
// if not units then
13017: LD_VAR 0 1
13021: NOT
13022: IFFALSE 13026
// exit ;
13024: GO 13116
// for i in units do
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: LD_VAR 0 1
13035: PUSH
13036: FOR_IN
13037: IFFALSE 13114
// if BuildingStatus ( b ) = bs_build then
13039: LD_VAR 0 2
13043: PPUSH
13044: CALL_OW 461
13048: PUSH
13049: LD_INT 1
13051: EQUAL
13052: IFFALSE 13112
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13054: LD_VAR 0 4
13058: PPUSH
13059: LD_STRING h
13061: PUSH
13062: LD_VAR 0 2
13066: PPUSH
13067: CALL_OW 250
13071: PUSH
13072: LD_VAR 0 2
13076: PPUSH
13077: CALL_OW 251
13081: PUSH
13082: LD_VAR 0 2
13086: PUSH
13087: LD_INT 0
13089: PUSH
13090: LD_INT 0
13092: PUSH
13093: LD_INT 0
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: PPUSH
13108: CALL_OW 446
13112: GO 13036
13114: POP
13115: POP
// end ;
13116: LD_VAR 0 3
13120: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13121: LD_INT 0
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13129: LD_VAR 0 1
13133: NOT
13134: PUSH
13135: LD_VAR 0 1
13139: PPUSH
13140: CALL_OW 263
13144: PUSH
13145: LD_INT 2
13147: NONEQUAL
13148: OR
13149: IFFALSE 13153
// exit ;
13151: GO 13469
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13153: LD_ADDR_VAR 0 6
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_VAR 0 1
13165: PPUSH
13166: CALL_OW 255
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 34
13190: PUSH
13191: LD_INT 31
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: ST_TO_ADDR
// if not tmp then
13212: LD_VAR 0 6
13216: NOT
13217: IFFALSE 13221
// exit ;
13219: GO 13469
// result := [ ] ;
13221: LD_ADDR_VAR 0 2
13225: PUSH
13226: EMPTY
13227: ST_TO_ADDR
// for i in tmp do
13228: LD_ADDR_VAR 0 3
13232: PUSH
13233: LD_VAR 0 6
13237: PUSH
13238: FOR_IN
13239: IFFALSE 13310
// begin t := UnitsInside ( i ) ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: LD_VAR 0 3
13250: PPUSH
13251: CALL_OW 313
13255: ST_TO_ADDR
// if t then
13256: LD_VAR 0 4
13260: IFFALSE 13308
// for j in t do
13262: LD_ADDR_VAR 0 7
13266: PUSH
13267: LD_VAR 0 4
13271: PUSH
13272: FOR_IN
13273: IFFALSE 13306
// result := Replace ( result , result + 1 , j ) ;
13275: LD_ADDR_VAR 0 2
13279: PUSH
13280: LD_VAR 0 2
13284: PPUSH
13285: LD_VAR 0 2
13289: PUSH
13290: LD_INT 1
13292: PLUS
13293: PPUSH
13294: LD_VAR 0 7
13298: PPUSH
13299: CALL_OW 1
13303: ST_TO_ADDR
13304: GO 13272
13306: POP
13307: POP
// end ;
13308: GO 13238
13310: POP
13311: POP
// if not result then
13312: LD_VAR 0 2
13316: NOT
13317: IFFALSE 13321
// exit ;
13319: GO 13469
// mech := result [ 1 ] ;
13321: LD_ADDR_VAR 0 5
13325: PUSH
13326: LD_VAR 0 2
13330: PUSH
13331: LD_INT 1
13333: ARRAY
13334: ST_TO_ADDR
// if result > 1 then
13335: LD_VAR 0 2
13339: PUSH
13340: LD_INT 1
13342: GREATER
13343: IFFALSE 13455
// begin for i = 2 to result do
13345: LD_ADDR_VAR 0 3
13349: PUSH
13350: DOUBLE
13351: LD_INT 2
13353: DEC
13354: ST_TO_ADDR
13355: LD_VAR 0 2
13359: PUSH
13360: FOR_TO
13361: IFFALSE 13453
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13363: LD_ADDR_VAR 0 4
13367: PUSH
13368: LD_VAR 0 2
13372: PUSH
13373: LD_VAR 0 3
13377: ARRAY
13378: PPUSH
13379: LD_INT 3
13381: PPUSH
13382: CALL_OW 259
13386: PUSH
13387: LD_VAR 0 2
13391: PUSH
13392: LD_VAR 0 3
13396: ARRAY
13397: PPUSH
13398: CALL_OW 432
13402: MINUS
13403: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13404: LD_VAR 0 4
13408: PUSH
13409: LD_VAR 0 5
13413: PPUSH
13414: LD_INT 3
13416: PPUSH
13417: CALL_OW 259
13421: PUSH
13422: LD_VAR 0 5
13426: PPUSH
13427: CALL_OW 432
13431: MINUS
13432: GREATEREQUAL
13433: IFFALSE 13451
// mech := result [ i ] ;
13435: LD_ADDR_VAR 0 5
13439: PUSH
13440: LD_VAR 0 2
13444: PUSH
13445: LD_VAR 0 3
13449: ARRAY
13450: ST_TO_ADDR
// end ;
13451: GO 13360
13453: POP
13454: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13455: LD_VAR 0 1
13459: PPUSH
13460: LD_VAR 0 5
13464: PPUSH
13465: CALL_OW 135
// end ;
13469: LD_VAR 0 2
13473: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13474: LD_INT 0
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
// result := [ ] ;
13489: LD_ADDR_VAR 0 7
13493: PUSH
13494: EMPTY
13495: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13496: LD_VAR 0 1
13500: PPUSH
13501: CALL_OW 266
13505: PUSH
13506: LD_INT 0
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: IN
13516: NOT
13517: IFFALSE 13521
// exit ;
13519: GO 15155
// if name then
13521: LD_VAR 0 3
13525: IFFALSE 13541
// SetBName ( base_dep , name ) ;
13527: LD_VAR 0 1
13531: PPUSH
13532: LD_VAR 0 3
13536: PPUSH
13537: CALL_OW 500
// base := GetBase ( base_dep ) ;
13541: LD_ADDR_VAR 0 15
13545: PUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 274
13555: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13556: LD_ADDR_VAR 0 16
13560: PUSH
13561: LD_VAR 0 1
13565: PPUSH
13566: CALL_OW 255
13570: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13571: LD_ADDR_VAR 0 17
13575: PUSH
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 248
13585: ST_TO_ADDR
// if sources then
13586: LD_VAR 0 5
13590: IFFALSE 13637
// for i = 1 to 3 do
13592: LD_ADDR_VAR 0 8
13596: PUSH
13597: DOUBLE
13598: LD_INT 1
13600: DEC
13601: ST_TO_ADDR
13602: LD_INT 3
13604: PUSH
13605: FOR_TO
13606: IFFALSE 13635
// AddResourceType ( base , i , sources [ i ] ) ;
13608: LD_VAR 0 15
13612: PPUSH
13613: LD_VAR 0 8
13617: PPUSH
13618: LD_VAR 0 5
13622: PUSH
13623: LD_VAR 0 8
13627: ARRAY
13628: PPUSH
13629: CALL_OW 276
13633: GO 13605
13635: POP
13636: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13637: LD_ADDR_VAR 0 18
13641: PUSH
13642: LD_VAR 0 15
13646: PPUSH
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: CALL 12898 0 3
13659: ST_TO_ADDR
// InitHc ;
13660: CALL_OW 19
// InitUc ;
13664: CALL_OW 18
// uc_side := side ;
13668: LD_ADDR_OWVAR 20
13672: PUSH
13673: LD_VAR 0 16
13677: ST_TO_ADDR
// uc_nation := nation ;
13678: LD_ADDR_OWVAR 21
13682: PUSH
13683: LD_VAR 0 17
13687: ST_TO_ADDR
// if buildings then
13688: LD_VAR 0 18
13692: IFFALSE 15014
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13694: LD_ADDR_VAR 0 19
13698: PUSH
13699: LD_VAR 0 18
13703: PPUSH
13704: LD_INT 2
13706: PUSH
13707: LD_INT 30
13709: PUSH
13710: LD_INT 29
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 30
13719: PUSH
13720: LD_INT 30
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 72
13736: ST_TO_ADDR
// if tmp then
13737: LD_VAR 0 19
13741: IFFALSE 13789
// for i in tmp do
13743: LD_ADDR_VAR 0 8
13747: PUSH
13748: LD_VAR 0 19
13752: PUSH
13753: FOR_IN
13754: IFFALSE 13787
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13756: LD_VAR 0 8
13760: PPUSH
13761: CALL_OW 250
13765: PPUSH
13766: LD_VAR 0 8
13770: PPUSH
13771: CALL_OW 251
13775: PPUSH
13776: LD_VAR 0 16
13780: PPUSH
13781: CALL_OW 441
13785: GO 13753
13787: POP
13788: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13789: LD_VAR 0 18
13793: PPUSH
13794: LD_INT 2
13796: PUSH
13797: LD_INT 30
13799: PUSH
13800: LD_INT 32
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 30
13809: PUSH
13810: LD_INT 33
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 72
13826: IFFALSE 13914
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13828: LD_ADDR_VAR 0 8
13832: PUSH
13833: LD_VAR 0 18
13837: PPUSH
13838: LD_INT 2
13840: PUSH
13841: LD_INT 30
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 30
13853: PUSH
13854: LD_INT 33
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 72
13870: PUSH
13871: FOR_IN
13872: IFFALSE 13912
// begin if not GetBWeapon ( i ) then
13874: LD_VAR 0 8
13878: PPUSH
13879: CALL_OW 269
13883: NOT
13884: IFFALSE 13910
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13886: LD_VAR 0 8
13890: PPUSH
13891: LD_VAR 0 8
13895: PPUSH
13896: LD_VAR 0 2
13900: PPUSH
13901: CALL 15160 0 2
13905: PPUSH
13906: CALL_OW 431
// end ;
13910: GO 13871
13912: POP
13913: POP
// end ; for i = 1 to personel do
13914: LD_ADDR_VAR 0 8
13918: PUSH
13919: DOUBLE
13920: LD_INT 1
13922: DEC
13923: ST_TO_ADDR
13924: LD_VAR 0 6
13928: PUSH
13929: FOR_TO
13930: IFFALSE 14994
// begin if i > 4 then
13932: LD_VAR 0 8
13936: PUSH
13937: LD_INT 4
13939: GREATER
13940: IFFALSE 13944
// break ;
13942: GO 14994
// case i of 1 :
13944: LD_VAR 0 8
13948: PUSH
13949: LD_INT 1
13951: DOUBLE
13952: EQUAL
13953: IFTRUE 13957
13955: GO 14037
13957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13958: LD_ADDR_VAR 0 12
13962: PUSH
13963: LD_VAR 0 18
13967: PPUSH
13968: LD_INT 22
13970: PUSH
13971: LD_VAR 0 16
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 58
13982: PUSH
13983: EMPTY
13984: LIST
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 30
13991: PUSH
13992: LD_INT 32
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 30
14001: PUSH
14002: LD_INT 4
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 30
14011: PUSH
14012: LD_INT 5
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 72
14034: ST_TO_ADDR
14035: GO 14259
14037: LD_INT 2
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14107
14045: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14046: LD_ADDR_VAR 0 12
14050: PUSH
14051: LD_VAR 0 18
14055: PPUSH
14056: LD_INT 22
14058: PUSH
14059: LD_VAR 0 16
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 2
14070: PUSH
14071: LD_INT 30
14073: PUSH
14074: LD_INT 0
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 30
14083: PUSH
14084: LD_INT 1
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 72
14104: ST_TO_ADDR
14105: GO 14259
14107: LD_INT 3
14109: DOUBLE
14110: EQUAL
14111: IFTRUE 14115
14113: GO 14177
14115: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14116: LD_ADDR_VAR 0 12
14120: PUSH
14121: LD_VAR 0 18
14125: PPUSH
14126: LD_INT 22
14128: PUSH
14129: LD_VAR 0 16
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 2
14140: PUSH
14141: LD_INT 30
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 72
14174: ST_TO_ADDR
14175: GO 14259
14177: LD_INT 4
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14258
14185: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14186: LD_ADDR_VAR 0 12
14190: PUSH
14191: LD_VAR 0 18
14195: PPUSH
14196: LD_INT 22
14198: PUSH
14199: LD_VAR 0 16
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: LD_INT 30
14213: PUSH
14214: LD_INT 6
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: LD_INT 7
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 30
14233: PUSH
14234: LD_INT 8
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 72
14255: ST_TO_ADDR
14256: GO 14259
14258: POP
// if i = 1 then
14259: LD_VAR 0 8
14263: PUSH
14264: LD_INT 1
14266: EQUAL
14267: IFFALSE 14378
// begin tmp := [ ] ;
14269: LD_ADDR_VAR 0 19
14273: PUSH
14274: EMPTY
14275: ST_TO_ADDR
// for j in f do
14276: LD_ADDR_VAR 0 9
14280: PUSH
14281: LD_VAR 0 12
14285: PUSH
14286: FOR_IN
14287: IFFALSE 14360
// if GetBType ( j ) = b_bunker then
14289: LD_VAR 0 9
14293: PPUSH
14294: CALL_OW 266
14298: PUSH
14299: LD_INT 32
14301: EQUAL
14302: IFFALSE 14329
// tmp := Insert ( tmp , 1 , j ) else
14304: LD_ADDR_VAR 0 19
14308: PUSH
14309: LD_VAR 0 19
14313: PPUSH
14314: LD_INT 1
14316: PPUSH
14317: LD_VAR 0 9
14321: PPUSH
14322: CALL_OW 2
14326: ST_TO_ADDR
14327: GO 14358
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14329: LD_ADDR_VAR 0 19
14333: PUSH
14334: LD_VAR 0 19
14338: PPUSH
14339: LD_VAR 0 19
14343: PUSH
14344: LD_INT 1
14346: PLUS
14347: PPUSH
14348: LD_VAR 0 9
14352: PPUSH
14353: CALL_OW 2
14357: ST_TO_ADDR
14358: GO 14286
14360: POP
14361: POP
// if tmp then
14362: LD_VAR 0 19
14366: IFFALSE 14378
// f := tmp ;
14368: LD_ADDR_VAR 0 12
14372: PUSH
14373: LD_VAR 0 19
14377: ST_TO_ADDR
// end ; x := personel [ i ] ;
14378: LD_ADDR_VAR 0 13
14382: PUSH
14383: LD_VAR 0 6
14387: PUSH
14388: LD_VAR 0 8
14392: ARRAY
14393: ST_TO_ADDR
// if x = - 1 then
14394: LD_VAR 0 13
14398: PUSH
14399: LD_INT 1
14401: NEG
14402: EQUAL
14403: IFFALSE 14612
// begin for j in f do
14405: LD_ADDR_VAR 0 9
14409: PUSH
14410: LD_VAR 0 12
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14608
// repeat InitHc ;
14418: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14422: LD_VAR 0 9
14426: PPUSH
14427: CALL_OW 266
14431: PUSH
14432: LD_INT 5
14434: EQUAL
14435: IFFALSE 14505
// begin if UnitsInside ( j ) < 3 then
14437: LD_VAR 0 9
14441: PPUSH
14442: CALL_OW 313
14446: PUSH
14447: LD_INT 3
14449: LESS
14450: IFFALSE 14486
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14452: LD_INT 0
14454: PPUSH
14455: LD_INT 5
14457: PUSH
14458: LD_INT 8
14460: PUSH
14461: LD_INT 9
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: LD_VAR 0 17
14473: ARRAY
14474: PPUSH
14475: LD_VAR 0 4
14479: PPUSH
14480: CALL_OW 380
14484: GO 14503
// PrepareHuman ( false , i , skill ) ;
14486: LD_INT 0
14488: PPUSH
14489: LD_VAR 0 8
14493: PPUSH
14494: LD_VAR 0 4
14498: PPUSH
14499: CALL_OW 380
// end else
14503: GO 14522
// PrepareHuman ( false , i , skill ) ;
14505: LD_INT 0
14507: PPUSH
14508: LD_VAR 0 8
14512: PPUSH
14513: LD_VAR 0 4
14517: PPUSH
14518: CALL_OW 380
// un := CreateHuman ;
14522: LD_ADDR_VAR 0 14
14526: PUSH
14527: CALL_OW 44
14531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14532: LD_ADDR_VAR 0 7
14536: PUSH
14537: LD_VAR 0 7
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: LD_VAR 0 14
14549: PPUSH
14550: CALL_OW 2
14554: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14555: LD_VAR 0 14
14559: PPUSH
14560: LD_VAR 0 9
14564: PPUSH
14565: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14569: LD_VAR 0 9
14573: PPUSH
14574: CALL_OW 313
14578: PUSH
14579: LD_INT 6
14581: EQUAL
14582: PUSH
14583: LD_VAR 0 9
14587: PPUSH
14588: CALL_OW 266
14592: PUSH
14593: LD_INT 32
14595: PUSH
14596: LD_INT 31
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: IN
14603: OR
14604: IFFALSE 14418
14606: GO 14415
14608: POP
14609: POP
// end else
14610: GO 14992
// for j = 1 to x do
14612: LD_ADDR_VAR 0 9
14616: PUSH
14617: DOUBLE
14618: LD_INT 1
14620: DEC
14621: ST_TO_ADDR
14622: LD_VAR 0 13
14626: PUSH
14627: FOR_TO
14628: IFFALSE 14990
// begin InitHc ;
14630: CALL_OW 19
// if not f then
14634: LD_VAR 0 12
14638: NOT
14639: IFFALSE 14728
// begin PrepareHuman ( false , i , skill ) ;
14641: LD_INT 0
14643: PPUSH
14644: LD_VAR 0 8
14648: PPUSH
14649: LD_VAR 0 4
14653: PPUSH
14654: CALL_OW 380
// un := CreateHuman ;
14658: LD_ADDR_VAR 0 14
14662: PUSH
14663: CALL_OW 44
14667: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14668: LD_ADDR_VAR 0 7
14672: PUSH
14673: LD_VAR 0 7
14677: PPUSH
14678: LD_INT 1
14680: PPUSH
14681: LD_VAR 0 14
14685: PPUSH
14686: CALL_OW 2
14690: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14691: LD_VAR 0 14
14695: PPUSH
14696: LD_VAR 0 1
14700: PPUSH
14701: CALL_OW 250
14705: PPUSH
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 251
14715: PPUSH
14716: LD_INT 10
14718: PPUSH
14719: LD_INT 0
14721: PPUSH
14722: CALL_OW 50
// continue ;
14726: GO 14627
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14728: LD_VAR 0 12
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PPUSH
14737: CALL_OW 313
14741: PUSH
14742: LD_VAR 0 12
14746: PUSH
14747: LD_INT 1
14749: ARRAY
14750: PPUSH
14751: CALL_OW 266
14755: PUSH
14756: LD_INT 32
14758: PUSH
14759: LD_INT 31
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: IN
14766: AND
14767: PUSH
14768: LD_VAR 0 12
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: CALL_OW 313
14781: PUSH
14782: LD_INT 6
14784: EQUAL
14785: OR
14786: IFFALSE 14806
// f := Delete ( f , 1 ) ;
14788: LD_ADDR_VAR 0 12
14792: PUSH
14793: LD_VAR 0 12
14797: PPUSH
14798: LD_INT 1
14800: PPUSH
14801: CALL_OW 3
14805: ST_TO_ADDR
// if not f then
14806: LD_VAR 0 12
14810: NOT
14811: IFFALSE 14829
// begin x := x + 2 ;
14813: LD_ADDR_VAR 0 13
14817: PUSH
14818: LD_VAR 0 13
14822: PUSH
14823: LD_INT 2
14825: PLUS
14826: ST_TO_ADDR
// continue ;
14827: GO 14627
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14829: LD_VAR 0 12
14833: PUSH
14834: LD_INT 1
14836: ARRAY
14837: PPUSH
14838: CALL_OW 266
14842: PUSH
14843: LD_INT 5
14845: EQUAL
14846: IFFALSE 14920
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14848: LD_VAR 0 12
14852: PUSH
14853: LD_INT 1
14855: ARRAY
14856: PPUSH
14857: CALL_OW 313
14861: PUSH
14862: LD_INT 3
14864: LESS
14865: IFFALSE 14901
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14867: LD_INT 0
14869: PPUSH
14870: LD_INT 5
14872: PUSH
14873: LD_INT 8
14875: PUSH
14876: LD_INT 9
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_VAR 0 17
14888: ARRAY
14889: PPUSH
14890: LD_VAR 0 4
14894: PPUSH
14895: CALL_OW 380
14899: GO 14918
// PrepareHuman ( false , i , skill ) ;
14901: LD_INT 0
14903: PPUSH
14904: LD_VAR 0 8
14908: PPUSH
14909: LD_VAR 0 4
14913: PPUSH
14914: CALL_OW 380
// end else
14918: GO 14937
// PrepareHuman ( false , i , skill ) ;
14920: LD_INT 0
14922: PPUSH
14923: LD_VAR 0 8
14927: PPUSH
14928: LD_VAR 0 4
14932: PPUSH
14933: CALL_OW 380
// un := CreateHuman ;
14937: LD_ADDR_VAR 0 14
14941: PUSH
14942: CALL_OW 44
14946: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14947: LD_ADDR_VAR 0 7
14951: PUSH
14952: LD_VAR 0 7
14956: PPUSH
14957: LD_INT 1
14959: PPUSH
14960: LD_VAR 0 14
14964: PPUSH
14965: CALL_OW 2
14969: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14970: LD_VAR 0 14
14974: PPUSH
14975: LD_VAR 0 12
14979: PUSH
14980: LD_INT 1
14982: ARRAY
14983: PPUSH
14984: CALL_OW 52
// end ;
14988: GO 14627
14990: POP
14991: POP
// end ;
14992: GO 13929
14994: POP
14995: POP
// result := result ^ buildings ;
14996: LD_ADDR_VAR 0 7
15000: PUSH
15001: LD_VAR 0 7
15005: PUSH
15006: LD_VAR 0 18
15010: ADD
15011: ST_TO_ADDR
// end else
15012: GO 15155
// begin for i = 1 to personel do
15014: LD_ADDR_VAR 0 8
15018: PUSH
15019: DOUBLE
15020: LD_INT 1
15022: DEC
15023: ST_TO_ADDR
15024: LD_VAR 0 6
15028: PUSH
15029: FOR_TO
15030: IFFALSE 15153
// begin if i > 4 then
15032: LD_VAR 0 8
15036: PUSH
15037: LD_INT 4
15039: GREATER
15040: IFFALSE 15044
// break ;
15042: GO 15153
// x := personel [ i ] ;
15044: LD_ADDR_VAR 0 13
15048: PUSH
15049: LD_VAR 0 6
15053: PUSH
15054: LD_VAR 0 8
15058: ARRAY
15059: ST_TO_ADDR
// if x = - 1 then
15060: LD_VAR 0 13
15064: PUSH
15065: LD_INT 1
15067: NEG
15068: EQUAL
15069: IFFALSE 15073
// continue ;
15071: GO 15029
// PrepareHuman ( false , i , skill ) ;
15073: LD_INT 0
15075: PPUSH
15076: LD_VAR 0 8
15080: PPUSH
15081: LD_VAR 0 4
15085: PPUSH
15086: CALL_OW 380
// un := CreateHuman ;
15090: LD_ADDR_VAR 0 14
15094: PUSH
15095: CALL_OW 44
15099: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15100: LD_VAR 0 14
15104: PPUSH
15105: LD_VAR 0 1
15109: PPUSH
15110: CALL_OW 250
15114: PPUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL_OW 251
15124: PPUSH
15125: LD_INT 10
15127: PPUSH
15128: LD_INT 0
15130: PPUSH
15131: CALL_OW 50
// result := result ^ un ;
15135: LD_ADDR_VAR 0 7
15139: PUSH
15140: LD_VAR 0 7
15144: PUSH
15145: LD_VAR 0 14
15149: ADD
15150: ST_TO_ADDR
// end ;
15151: GO 15029
15153: POP
15154: POP
// end ; end ;
15155: LD_VAR 0 7
15159: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15160: LD_INT 0
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
// result := false ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 0
15185: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15186: LD_VAR 0 1
15190: NOT
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 266
15201: PUSH
15202: LD_INT 32
15204: PUSH
15205: LD_INT 33
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: IN
15212: NOT
15213: OR
15214: IFFALSE 15218
// exit ;
15216: GO 16327
// nat := GetNation ( tower ) ;
15218: LD_ADDR_VAR 0 12
15222: PUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 248
15232: ST_TO_ADDR
// side := GetSide ( tower ) ;
15233: LD_ADDR_VAR 0 16
15237: PUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 255
15247: ST_TO_ADDR
// x := GetX ( tower ) ;
15248: LD_ADDR_VAR 0 10
15252: PUSH
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 250
15262: ST_TO_ADDR
// y := GetY ( tower ) ;
15263: LD_ADDR_VAR 0 11
15267: PUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 251
15277: ST_TO_ADDR
// if not x or not y then
15278: LD_VAR 0 10
15282: NOT
15283: PUSH
15284: LD_VAR 0 11
15288: NOT
15289: OR
15290: IFFALSE 15294
// exit ;
15292: GO 16327
// weapon := 0 ;
15294: LD_ADDR_VAR 0 18
15298: PUSH
15299: LD_INT 0
15301: ST_TO_ADDR
// fac_list := [ ] ;
15302: LD_ADDR_VAR 0 17
15306: PUSH
15307: EMPTY
15308: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15309: LD_ADDR_VAR 0 6
15313: PUSH
15314: LD_VAR 0 1
15318: PPUSH
15319: CALL_OW 274
15323: PPUSH
15324: LD_VAR 0 2
15328: PPUSH
15329: LD_INT 0
15331: PPUSH
15332: CALL 12898 0 3
15336: PPUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 3
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL_OW 72
15351: ST_TO_ADDR
// if not factories then
15352: LD_VAR 0 6
15356: NOT
15357: IFFALSE 15361
// exit ;
15359: GO 16327
// for i in factories do
15361: LD_ADDR_VAR 0 8
15365: PUSH
15366: LD_VAR 0 6
15370: PUSH
15371: FOR_IN
15372: IFFALSE 15397
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15374: LD_ADDR_VAR 0 17
15378: PUSH
15379: LD_VAR 0 17
15383: PUSH
15384: LD_VAR 0 8
15388: PPUSH
15389: CALL_OW 478
15393: UNION
15394: ST_TO_ADDR
15395: GO 15371
15397: POP
15398: POP
// if not fac_list then
15399: LD_VAR 0 17
15403: NOT
15404: IFFALSE 15408
// exit ;
15406: GO 16327
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15408: LD_ADDR_VAR 0 5
15412: PUSH
15413: LD_INT 4
15415: PUSH
15416: LD_INT 5
15418: PUSH
15419: LD_INT 9
15421: PUSH
15422: LD_INT 10
15424: PUSH
15425: LD_INT 6
15427: PUSH
15428: LD_INT 7
15430: PUSH
15431: LD_INT 11
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 27
15445: PUSH
15446: LD_INT 28
15448: PUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 30
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 43
15463: PUSH
15464: LD_INT 44
15466: PUSH
15467: LD_INT 46
15469: PUSH
15470: LD_INT 45
15472: PUSH
15473: LD_INT 47
15475: PUSH
15476: LD_INT 49
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: PUSH
15492: LD_VAR 0 12
15496: ARRAY
15497: ST_TO_ADDR
// list := list isect fac_list ;
15498: LD_ADDR_VAR 0 5
15502: PUSH
15503: LD_VAR 0 5
15507: PUSH
15508: LD_VAR 0 17
15512: ISECT
15513: ST_TO_ADDR
// if not list then
15514: LD_VAR 0 5
15518: NOT
15519: IFFALSE 15523
// exit ;
15521: GO 16327
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15523: LD_VAR 0 12
15527: PUSH
15528: LD_INT 3
15530: EQUAL
15531: PUSH
15532: LD_INT 49
15534: PUSH
15535: LD_VAR 0 5
15539: IN
15540: AND
15541: PUSH
15542: LD_INT 31
15544: PPUSH
15545: LD_VAR 0 16
15549: PPUSH
15550: CALL_OW 321
15554: PUSH
15555: LD_INT 2
15557: EQUAL
15558: AND
15559: IFFALSE 15619
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15561: LD_INT 22
15563: PUSH
15564: LD_VAR 0 16
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 35
15575: PUSH
15576: LD_INT 49
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 91
15585: PUSH
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 10
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: LIST
15603: PPUSH
15604: CALL_OW 69
15608: NOT
15609: IFFALSE 15619
// weapon := ru_time_lapser ;
15611: LD_ADDR_VAR 0 18
15615: PUSH
15616: LD_INT 49
15618: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15619: LD_VAR 0 12
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: LD_INT 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: IN
15634: PUSH
15635: LD_INT 11
15637: PUSH
15638: LD_VAR 0 5
15642: IN
15643: PUSH
15644: LD_INT 30
15646: PUSH
15647: LD_VAR 0 5
15651: IN
15652: OR
15653: AND
15654: PUSH
15655: LD_INT 6
15657: PPUSH
15658: LD_VAR 0 16
15662: PPUSH
15663: CALL_OW 321
15667: PUSH
15668: LD_INT 2
15670: EQUAL
15671: AND
15672: IFFALSE 15837
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15674: LD_INT 22
15676: PUSH
15677: LD_VAR 0 16
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 35
15691: PUSH
15692: LD_INT 11
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 35
15701: PUSH
15702: LD_INT 30
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 91
15716: PUSH
15717: LD_VAR 0 1
15721: PUSH
15722: LD_INT 18
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 69
15739: NOT
15740: PUSH
15741: LD_INT 22
15743: PUSH
15744: LD_VAR 0 16
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 2
15755: PUSH
15756: LD_INT 30
15758: PUSH
15759: LD_INT 32
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 30
15768: PUSH
15769: LD_INT 33
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 91
15783: PUSH
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 12
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: PUSH
15810: LD_INT 2
15812: GREATER
15813: AND
15814: IFFALSE 15837
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15816: LD_ADDR_VAR 0 18
15820: PUSH
15821: LD_INT 11
15823: PUSH
15824: LD_INT 30
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_VAR 0 12
15835: ARRAY
15836: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15837: LD_VAR 0 18
15841: NOT
15842: PUSH
15843: LD_INT 40
15845: PPUSH
15846: LD_VAR 0 16
15850: PPUSH
15851: CALL_OW 321
15855: PUSH
15856: LD_INT 2
15858: EQUAL
15859: AND
15860: PUSH
15861: LD_INT 7
15863: PUSH
15864: LD_VAR 0 5
15868: IN
15869: PUSH
15870: LD_INT 28
15872: PUSH
15873: LD_VAR 0 5
15877: IN
15878: OR
15879: PUSH
15880: LD_INT 45
15882: PUSH
15883: LD_VAR 0 5
15887: IN
15888: OR
15889: AND
15890: IFFALSE 16144
// begin hex := GetHexInfo ( x , y ) ;
15892: LD_ADDR_VAR 0 4
15896: PUSH
15897: LD_VAR 0 10
15901: PPUSH
15902: LD_VAR 0 11
15906: PPUSH
15907: CALL_OW 546
15911: ST_TO_ADDR
// if hex [ 1 ] then
15912: LD_VAR 0 4
15916: PUSH
15917: LD_INT 1
15919: ARRAY
15920: IFFALSE 15924
// exit ;
15922: GO 16327
// height := hex [ 2 ] ;
15924: LD_ADDR_VAR 0 15
15928: PUSH
15929: LD_VAR 0 4
15933: PUSH
15934: LD_INT 2
15936: ARRAY
15937: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15938: LD_ADDR_VAR 0 14
15942: PUSH
15943: LD_INT 0
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 3
15951: PUSH
15952: LD_INT 5
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: ST_TO_ADDR
// for i in tmp do
15961: LD_ADDR_VAR 0 8
15965: PUSH
15966: LD_VAR 0 14
15970: PUSH
15971: FOR_IN
15972: IFFALSE 16142
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15974: LD_ADDR_VAR 0 9
15978: PUSH
15979: LD_VAR 0 10
15983: PPUSH
15984: LD_VAR 0 8
15988: PPUSH
15989: LD_INT 5
15991: PPUSH
15992: CALL_OW 272
15996: PUSH
15997: LD_VAR 0 11
16001: PPUSH
16002: LD_VAR 0 8
16006: PPUSH
16007: LD_INT 5
16009: PPUSH
16010: CALL_OW 273
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16019: LD_VAR 0 9
16023: PUSH
16024: LD_INT 1
16026: ARRAY
16027: PPUSH
16028: LD_VAR 0 9
16032: PUSH
16033: LD_INT 2
16035: ARRAY
16036: PPUSH
16037: CALL_OW 488
16041: IFFALSE 16140
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16043: LD_ADDR_VAR 0 4
16047: PUSH
16048: LD_VAR 0 9
16052: PUSH
16053: LD_INT 1
16055: ARRAY
16056: PPUSH
16057: LD_VAR 0 9
16061: PUSH
16062: LD_INT 2
16064: ARRAY
16065: PPUSH
16066: CALL_OW 546
16070: ST_TO_ADDR
// if hex [ 1 ] then
16071: LD_VAR 0 4
16075: PUSH
16076: LD_INT 1
16078: ARRAY
16079: IFFALSE 16083
// continue ;
16081: GO 15971
// h := hex [ 2 ] ;
16083: LD_ADDR_VAR 0 13
16087: PUSH
16088: LD_VAR 0 4
16092: PUSH
16093: LD_INT 2
16095: ARRAY
16096: ST_TO_ADDR
// if h + 7 < height then
16097: LD_VAR 0 13
16101: PUSH
16102: LD_INT 7
16104: PLUS
16105: PUSH
16106: LD_VAR 0 15
16110: LESS
16111: IFFALSE 16140
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16113: LD_ADDR_VAR 0 18
16117: PUSH
16118: LD_INT 7
16120: PUSH
16121: LD_INT 28
16123: PUSH
16124: LD_INT 45
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: LIST
16131: PUSH
16132: LD_VAR 0 12
16136: ARRAY
16137: ST_TO_ADDR
// break ;
16138: GO 16142
// end ; end ; end ;
16140: GO 15971
16142: POP
16143: POP
// end ; if not weapon then
16144: LD_VAR 0 18
16148: NOT
16149: IFFALSE 16209
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16151: LD_ADDR_VAR 0 5
16155: PUSH
16156: LD_VAR 0 5
16160: PUSH
16161: LD_INT 11
16163: PUSH
16164: LD_INT 30
16166: PUSH
16167: LD_INT 49
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: DIFF
16175: ST_TO_ADDR
// if not list then
16176: LD_VAR 0 5
16180: NOT
16181: IFFALSE 16185
// exit ;
16183: GO 16327
// weapon := list [ rand ( 1 , list ) ] ;
16185: LD_ADDR_VAR 0 18
16189: PUSH
16190: LD_VAR 0 5
16194: PUSH
16195: LD_INT 1
16197: PPUSH
16198: LD_VAR 0 5
16202: PPUSH
16203: CALL_OW 12
16207: ARRAY
16208: ST_TO_ADDR
// end ; if weapon then
16209: LD_VAR 0 18
16213: IFFALSE 16327
// begin tmp := CostOfWeapon ( weapon ) ;
16215: LD_ADDR_VAR 0 14
16219: PUSH
16220: LD_VAR 0 18
16224: PPUSH
16225: CALL_OW 451
16229: ST_TO_ADDR
// j := GetBase ( tower ) ;
16230: LD_ADDR_VAR 0 9
16234: PUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 274
16244: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16245: LD_VAR 0 9
16249: PPUSH
16250: LD_INT 1
16252: PPUSH
16253: CALL_OW 275
16257: PUSH
16258: LD_VAR 0 14
16262: PUSH
16263: LD_INT 1
16265: ARRAY
16266: GREATEREQUAL
16267: PUSH
16268: LD_VAR 0 9
16272: PPUSH
16273: LD_INT 2
16275: PPUSH
16276: CALL_OW 275
16280: PUSH
16281: LD_VAR 0 14
16285: PUSH
16286: LD_INT 2
16288: ARRAY
16289: GREATEREQUAL
16290: AND
16291: PUSH
16292: LD_VAR 0 9
16296: PPUSH
16297: LD_INT 3
16299: PPUSH
16300: CALL_OW 275
16304: PUSH
16305: LD_VAR 0 14
16309: PUSH
16310: LD_INT 3
16312: ARRAY
16313: GREATEREQUAL
16314: AND
16315: IFFALSE 16327
// result := weapon ;
16317: LD_ADDR_VAR 0 3
16321: PUSH
16322: LD_VAR 0 18
16326: ST_TO_ADDR
// end ; end ;
16327: LD_VAR 0 3
16331: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16332: LD_INT 0
16334: PPUSH
16335: PPUSH
// result := true ;
16336: LD_ADDR_VAR 0 3
16340: PUSH
16341: LD_INT 1
16343: ST_TO_ADDR
// if array1 = array2 then
16344: LD_VAR 0 1
16348: PUSH
16349: LD_VAR 0 2
16353: EQUAL
16354: IFFALSE 16414
// begin for i = 1 to array1 do
16356: LD_ADDR_VAR 0 4
16360: PUSH
16361: DOUBLE
16362: LD_INT 1
16364: DEC
16365: ST_TO_ADDR
16366: LD_VAR 0 1
16370: PUSH
16371: FOR_TO
16372: IFFALSE 16410
// if array1 [ i ] <> array2 [ i ] then
16374: LD_VAR 0 1
16378: PUSH
16379: LD_VAR 0 4
16383: ARRAY
16384: PUSH
16385: LD_VAR 0 2
16389: PUSH
16390: LD_VAR 0 4
16394: ARRAY
16395: NONEQUAL
16396: IFFALSE 16408
// begin result := false ;
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_INT 0
16405: ST_TO_ADDR
// break ;
16406: GO 16410
// end ;
16408: GO 16371
16410: POP
16411: POP
// end else
16412: GO 16422
// result := false ;
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// end ;
16422: LD_VAR 0 3
16426: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16427: LD_INT 0
16429: PPUSH
16430: PPUSH
// if not array1 or not array2 then
16431: LD_VAR 0 1
16435: NOT
16436: PUSH
16437: LD_VAR 0 2
16441: NOT
16442: OR
16443: IFFALSE 16447
// exit ;
16445: GO 16511
// result := true ;
16447: LD_ADDR_VAR 0 3
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// for i = 1 to array1 do
16455: LD_ADDR_VAR 0 4
16459: PUSH
16460: DOUBLE
16461: LD_INT 1
16463: DEC
16464: ST_TO_ADDR
16465: LD_VAR 0 1
16469: PUSH
16470: FOR_TO
16471: IFFALSE 16509
// if array1 [ i ] <> array2 [ i ] then
16473: LD_VAR 0 1
16477: PUSH
16478: LD_VAR 0 4
16482: ARRAY
16483: PUSH
16484: LD_VAR 0 2
16488: PUSH
16489: LD_VAR 0 4
16493: ARRAY
16494: NONEQUAL
16495: IFFALSE 16507
// begin result := false ;
16497: LD_ADDR_VAR 0 3
16501: PUSH
16502: LD_INT 0
16504: ST_TO_ADDR
// break ;
16505: GO 16509
// end ;
16507: GO 16470
16509: POP
16510: POP
// end ;
16511: LD_VAR 0 3
16515: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16516: LD_INT 0
16518: PPUSH
16519: PPUSH
16520: PPUSH
// pom := GetBase ( fac ) ;
16521: LD_ADDR_VAR 0 5
16525: PUSH
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 274
16535: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16536: LD_ADDR_VAR 0 4
16540: PUSH
16541: LD_VAR 0 2
16545: PUSH
16546: LD_INT 1
16548: ARRAY
16549: PPUSH
16550: LD_VAR 0 2
16554: PUSH
16555: LD_INT 2
16557: ARRAY
16558: PPUSH
16559: LD_VAR 0 2
16563: PUSH
16564: LD_INT 3
16566: ARRAY
16567: PPUSH
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 4
16575: ARRAY
16576: PPUSH
16577: CALL_OW 449
16581: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: LD_VAR 0 5
16591: PPUSH
16592: LD_INT 1
16594: PPUSH
16595: CALL_OW 275
16599: PUSH
16600: LD_VAR 0 4
16604: PUSH
16605: LD_INT 1
16607: ARRAY
16608: GREATEREQUAL
16609: PUSH
16610: LD_VAR 0 5
16614: PPUSH
16615: LD_INT 2
16617: PPUSH
16618: CALL_OW 275
16622: PUSH
16623: LD_VAR 0 4
16627: PUSH
16628: LD_INT 2
16630: ARRAY
16631: GREATEREQUAL
16632: AND
16633: PUSH
16634: LD_VAR 0 5
16638: PPUSH
16639: LD_INT 3
16641: PPUSH
16642: CALL_OW 275
16646: PUSH
16647: LD_VAR 0 4
16651: PUSH
16652: LD_INT 3
16654: ARRAY
16655: GREATEREQUAL
16656: AND
16657: ST_TO_ADDR
// end ;
16658: LD_VAR 0 3
16662: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16663: LD_INT 0
16665: PPUSH
16666: PPUSH
16667: PPUSH
16668: PPUSH
// pom := GetBase ( building ) ;
16669: LD_ADDR_VAR 0 3
16673: PUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 274
16683: ST_TO_ADDR
// if not pom then
16684: LD_VAR 0 3
16688: NOT
16689: IFFALSE 16693
// exit ;
16691: GO 16863
// btype := GetBType ( building ) ;
16693: LD_ADDR_VAR 0 5
16697: PUSH
16698: LD_VAR 0 1
16702: PPUSH
16703: CALL_OW 266
16707: ST_TO_ADDR
// if btype = b_armoury then
16708: LD_VAR 0 5
16712: PUSH
16713: LD_INT 4
16715: EQUAL
16716: IFFALSE 16726
// btype := b_barracks ;
16718: LD_ADDR_VAR 0 5
16722: PUSH
16723: LD_INT 5
16725: ST_TO_ADDR
// if btype = b_depot then
16726: LD_VAR 0 5
16730: PUSH
16731: LD_INT 0
16733: EQUAL
16734: IFFALSE 16744
// btype := b_warehouse ;
16736: LD_ADDR_VAR 0 5
16740: PUSH
16741: LD_INT 1
16743: ST_TO_ADDR
// if btype = b_workshop then
16744: LD_VAR 0 5
16748: PUSH
16749: LD_INT 2
16751: EQUAL
16752: IFFALSE 16762
// btype := b_factory ;
16754: LD_ADDR_VAR 0 5
16758: PUSH
16759: LD_INT 3
16761: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16762: LD_ADDR_VAR 0 4
16766: PUSH
16767: LD_VAR 0 5
16771: PPUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 248
16781: PPUSH
16782: CALL_OW 450
16786: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16787: LD_ADDR_VAR 0 2
16791: PUSH
16792: LD_VAR 0 3
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL_OW 275
16804: PUSH
16805: LD_VAR 0 4
16809: PUSH
16810: LD_INT 1
16812: ARRAY
16813: GREATEREQUAL
16814: PUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 2
16822: PPUSH
16823: CALL_OW 275
16827: PUSH
16828: LD_VAR 0 4
16832: PUSH
16833: LD_INT 2
16835: ARRAY
16836: GREATEREQUAL
16837: AND
16838: PUSH
16839: LD_VAR 0 3
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 275
16851: PUSH
16852: LD_VAR 0 4
16856: PUSH
16857: LD_INT 3
16859: ARRAY
16860: GREATEREQUAL
16861: AND
16862: ST_TO_ADDR
// end ;
16863: LD_VAR 0 2
16867: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16868: LD_INT 0
16870: PPUSH
16871: PPUSH
16872: PPUSH
// pom := GetBase ( building ) ;
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 274
16887: ST_TO_ADDR
// if not pom then
16888: LD_VAR 0 4
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 16998
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16897: LD_ADDR_VAR 0 5
16901: PUSH
16902: LD_VAR 0 2
16906: PPUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 248
16916: PPUSH
16917: CALL_OW 450
16921: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_VAR 0 4
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 275
16939: PUSH
16940: LD_VAR 0 5
16944: PUSH
16945: LD_INT 1
16947: ARRAY
16948: GREATEREQUAL
16949: PUSH
16950: LD_VAR 0 4
16954: PPUSH
16955: LD_INT 2
16957: PPUSH
16958: CALL_OW 275
16962: PUSH
16963: LD_VAR 0 5
16967: PUSH
16968: LD_INT 2
16970: ARRAY
16971: GREATEREQUAL
16972: AND
16973: PUSH
16974: LD_VAR 0 4
16978: PPUSH
16979: LD_INT 3
16981: PPUSH
16982: CALL_OW 275
16986: PUSH
16987: LD_VAR 0 5
16991: PUSH
16992: LD_INT 3
16994: ARRAY
16995: GREATEREQUAL
16996: AND
16997: ST_TO_ADDR
// end ;
16998: LD_VAR 0 3
17002: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
17013: PPUSH
17014: PPUSH
17015: PPUSH
// result := false ;
17016: LD_ADDR_VAR 0 8
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
17024: LD_VAR 0 5
17028: NOT
17029: PUSH
17030: LD_VAR 0 1
17034: NOT
17035: OR
17036: PUSH
17037: LD_VAR 0 2
17041: NOT
17042: OR
17043: PUSH
17044: LD_VAR 0 3
17048: NOT
17049: OR
17050: IFFALSE 17054
// exit ;
17052: GO 17868
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
17054: LD_ADDR_VAR 0 14
17058: PUSH
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_VAR 0 2
17068: PPUSH
17069: LD_VAR 0 3
17073: PPUSH
17074: LD_VAR 0 4
17078: PPUSH
17079: LD_VAR 0 5
17083: PUSH
17084: LD_INT 1
17086: ARRAY
17087: PPUSH
17088: CALL_OW 248
17092: PPUSH
17093: LD_INT 0
17095: PPUSH
17096: CALL 19121 0 6
17100: ST_TO_ADDR
// if not hexes then
17101: LD_VAR 0 14
17105: NOT
17106: IFFALSE 17110
// exit ;
17108: GO 17868
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17110: LD_ADDR_VAR 0 17
17114: PUSH
17115: LD_VAR 0 5
17119: PPUSH
17120: LD_INT 22
17122: PUSH
17123: LD_VAR 0 13
17127: PPUSH
17128: CALL_OW 255
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: LD_INT 30
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 30
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PPUSH
17169: CALL_OW 72
17173: ST_TO_ADDR
// for i = 1 to hexes do
17174: LD_ADDR_VAR 0 9
17178: PUSH
17179: DOUBLE
17180: LD_INT 1
17182: DEC
17183: ST_TO_ADDR
17184: LD_VAR 0 14
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17866
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17192: LD_ADDR_VAR 0 13
17196: PUSH
17197: LD_VAR 0 14
17201: PUSH
17202: LD_VAR 0 9
17206: ARRAY
17207: PUSH
17208: LD_INT 1
17210: ARRAY
17211: PPUSH
17212: LD_VAR 0 14
17216: PUSH
17217: LD_VAR 0 9
17221: ARRAY
17222: PUSH
17223: LD_INT 2
17225: ARRAY
17226: PPUSH
17227: CALL_OW 428
17231: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17232: LD_VAR 0 14
17236: PUSH
17237: LD_VAR 0 9
17241: ARRAY
17242: PUSH
17243: LD_INT 1
17245: ARRAY
17246: PPUSH
17247: LD_VAR 0 14
17251: PUSH
17252: LD_VAR 0 9
17256: ARRAY
17257: PUSH
17258: LD_INT 2
17260: ARRAY
17261: PPUSH
17262: CALL_OW 351
17266: PUSH
17267: LD_VAR 0 14
17271: PUSH
17272: LD_VAR 0 9
17276: ARRAY
17277: PUSH
17278: LD_INT 1
17280: ARRAY
17281: PPUSH
17282: LD_VAR 0 14
17286: PUSH
17287: LD_VAR 0 9
17291: ARRAY
17292: PUSH
17293: LD_INT 2
17295: ARRAY
17296: PPUSH
17297: CALL_OW 488
17301: NOT
17302: OR
17303: PUSH
17304: LD_VAR 0 13
17308: PPUSH
17309: CALL_OW 247
17313: PUSH
17314: LD_INT 3
17316: EQUAL
17317: OR
17318: IFFALSE 17324
// exit ;
17320: POP
17321: POP
17322: GO 17868
// if not tmp then
17324: LD_VAR 0 13
17328: NOT
17329: IFFALSE 17333
// continue ;
17331: GO 17189
// result := true ;
17333: LD_ADDR_VAR 0 8
17337: PUSH
17338: LD_INT 1
17340: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17341: LD_VAR 0 6
17345: PUSH
17346: LD_VAR 0 13
17350: PPUSH
17351: CALL_OW 247
17355: PUSH
17356: LD_INT 2
17358: EQUAL
17359: AND
17360: PUSH
17361: LD_VAR 0 13
17365: PPUSH
17366: CALL_OW 263
17370: PUSH
17371: LD_INT 1
17373: EQUAL
17374: AND
17375: IFFALSE 17539
// begin if IsDrivenBy ( tmp ) then
17377: LD_VAR 0 13
17381: PPUSH
17382: CALL_OW 311
17386: IFFALSE 17390
// continue ;
17388: GO 17189
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17390: LD_VAR 0 6
17394: PPUSH
17395: LD_INT 3
17397: PUSH
17398: LD_INT 60
17400: PUSH
17401: EMPTY
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 3
17410: PUSH
17411: LD_INT 55
17413: PUSH
17414: EMPTY
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PPUSH
17425: CALL_OW 72
17429: IFFALSE 17537
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17431: LD_ADDR_VAR 0 18
17435: PUSH
17436: LD_VAR 0 6
17440: PPUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 60
17446: PUSH
17447: EMPTY
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: LD_INT 55
17459: PUSH
17460: EMPTY
17461: LIST
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PPUSH
17471: CALL_OW 72
17475: PUSH
17476: LD_INT 1
17478: ARRAY
17479: ST_TO_ADDR
// if IsInUnit ( driver ) then
17480: LD_VAR 0 18
17484: PPUSH
17485: CALL_OW 310
17489: IFFALSE 17500
// ComExit ( driver ) ;
17491: LD_VAR 0 18
17495: PPUSH
17496: CALL 42922 0 1
// AddComEnterUnit ( driver , tmp ) ;
17500: LD_VAR 0 18
17504: PPUSH
17505: LD_VAR 0 13
17509: PPUSH
17510: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17514: LD_VAR 0 18
17518: PPUSH
17519: LD_VAR 0 7
17523: PPUSH
17524: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17528: LD_VAR 0 18
17532: PPUSH
17533: CALL_OW 181
// end ; continue ;
17537: GO 17189
// end ; if not cleaners or not tmp in cleaners then
17539: LD_VAR 0 6
17543: NOT
17544: PUSH
17545: LD_VAR 0 13
17549: PUSH
17550: LD_VAR 0 6
17554: IN
17555: NOT
17556: OR
17557: IFFALSE 17864
// begin if dep then
17559: LD_VAR 0 17
17563: IFFALSE 17699
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17565: LD_ADDR_VAR 0 16
17569: PUSH
17570: LD_VAR 0 17
17574: PUSH
17575: LD_INT 1
17577: ARRAY
17578: PPUSH
17579: CALL_OW 250
17583: PPUSH
17584: LD_VAR 0 17
17588: PUSH
17589: LD_INT 1
17591: ARRAY
17592: PPUSH
17593: CALL_OW 254
17597: PPUSH
17598: LD_INT 5
17600: PPUSH
17601: CALL_OW 272
17605: PUSH
17606: LD_VAR 0 17
17610: PUSH
17611: LD_INT 1
17613: ARRAY
17614: PPUSH
17615: CALL_OW 251
17619: PPUSH
17620: LD_VAR 0 17
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: CALL_OW 254
17633: PPUSH
17634: LD_INT 5
17636: PPUSH
17637: CALL_OW 273
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17646: LD_VAR 0 16
17650: PUSH
17651: LD_INT 1
17653: ARRAY
17654: PPUSH
17655: LD_VAR 0 16
17659: PUSH
17660: LD_INT 2
17662: ARRAY
17663: PPUSH
17664: CALL_OW 488
17668: IFFALSE 17699
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17670: LD_VAR 0 13
17674: PPUSH
17675: LD_VAR 0 16
17679: PUSH
17680: LD_INT 1
17682: ARRAY
17683: PPUSH
17684: LD_VAR 0 16
17688: PUSH
17689: LD_INT 2
17691: ARRAY
17692: PPUSH
17693: CALL_OW 111
// continue ;
17697: GO 17189
// end ; end ; r := GetDir ( tmp ) ;
17699: LD_ADDR_VAR 0 15
17703: PUSH
17704: LD_VAR 0 13
17708: PPUSH
17709: CALL_OW 254
17713: ST_TO_ADDR
// if r = 5 then
17714: LD_VAR 0 15
17718: PUSH
17719: LD_INT 5
17721: EQUAL
17722: IFFALSE 17732
// r := 0 ;
17724: LD_ADDR_VAR 0 15
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
// for j = r to 5 do
17732: LD_ADDR_VAR 0 10
17736: PUSH
17737: DOUBLE
17738: LD_VAR 0 15
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 5
17746: PUSH
17747: FOR_TO
17748: IFFALSE 17862
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17750: LD_ADDR_VAR 0 11
17754: PUSH
17755: LD_VAR 0 13
17759: PPUSH
17760: CALL_OW 250
17764: PPUSH
17765: LD_VAR 0 10
17769: PPUSH
17770: LD_INT 2
17772: PPUSH
17773: CALL_OW 272
17777: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17778: LD_ADDR_VAR 0 12
17782: PUSH
17783: LD_VAR 0 13
17787: PPUSH
17788: CALL_OW 251
17792: PPUSH
17793: LD_VAR 0 10
17797: PPUSH
17798: LD_INT 2
17800: PPUSH
17801: CALL_OW 273
17805: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17806: LD_VAR 0 11
17810: PPUSH
17811: LD_VAR 0 12
17815: PPUSH
17816: CALL_OW 488
17820: PUSH
17821: LD_VAR 0 11
17825: PPUSH
17826: LD_VAR 0 12
17830: PPUSH
17831: CALL_OW 428
17835: NOT
17836: AND
17837: IFFALSE 17860
// begin ComMoveXY ( tmp , _x , _y ) ;
17839: LD_VAR 0 13
17843: PPUSH
17844: LD_VAR 0 11
17848: PPUSH
17849: LD_VAR 0 12
17853: PPUSH
17854: CALL_OW 111
// break ;
17858: GO 17862
// end ; end ;
17860: GO 17747
17862: POP
17863: POP
// end ; end ;
17864: GO 17189
17866: POP
17867: POP
// end ;
17868: LD_VAR 0 8
17872: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17873: LD_INT 0
17875: PPUSH
// result := true ;
17876: LD_ADDR_VAR 0 3
17880: PUSH
17881: LD_INT 1
17883: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17884: LD_VAR 0 2
17888: PUSH
17889: LD_INT 24
17891: DOUBLE
17892: EQUAL
17893: IFTRUE 17903
17895: LD_INT 33
17897: DOUBLE
17898: EQUAL
17899: IFTRUE 17903
17901: GO 17928
17903: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: LD_INT 32
17911: PPUSH
17912: LD_VAR 0 1
17916: PPUSH
17917: CALL_OW 321
17921: PUSH
17922: LD_INT 2
17924: EQUAL
17925: ST_TO_ADDR
17926: GO 18244
17928: LD_INT 20
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17961
17936: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17937: LD_ADDR_VAR 0 3
17941: PUSH
17942: LD_INT 6
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 321
17954: PUSH
17955: LD_INT 2
17957: EQUAL
17958: ST_TO_ADDR
17959: GO 18244
17961: LD_INT 22
17963: DOUBLE
17964: EQUAL
17965: IFTRUE 17975
17967: LD_INT 36
17969: DOUBLE
17970: EQUAL
17971: IFTRUE 17975
17973: GO 18000
17975: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17976: LD_ADDR_VAR 0 3
17980: PUSH
17981: LD_INT 15
17983: PPUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 321
17993: PUSH
17994: LD_INT 2
17996: EQUAL
17997: ST_TO_ADDR
17998: GO 18244
18000: LD_INT 30
18002: DOUBLE
18003: EQUAL
18004: IFTRUE 18008
18006: GO 18033
18008: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
18009: LD_ADDR_VAR 0 3
18013: PUSH
18014: LD_INT 20
18016: PPUSH
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 321
18026: PUSH
18027: LD_INT 2
18029: EQUAL
18030: ST_TO_ADDR
18031: GO 18244
18033: LD_INT 28
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18047
18039: LD_INT 21
18041: DOUBLE
18042: EQUAL
18043: IFTRUE 18047
18045: GO 18072
18047: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
18048: LD_ADDR_VAR 0 3
18052: PUSH
18053: LD_INT 21
18055: PPUSH
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 321
18065: PUSH
18066: LD_INT 2
18068: EQUAL
18069: ST_TO_ADDR
18070: GO 18244
18072: LD_INT 16
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18105
18080: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
18081: LD_ADDR_VAR 0 3
18085: PUSH
18086: LD_INT 84
18088: PPUSH
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 321
18098: PUSH
18099: LD_INT 2
18101: EQUAL
18102: ST_TO_ADDR
18103: GO 18244
18105: LD_INT 19
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18119
18111: LD_INT 23
18113: DOUBLE
18114: EQUAL
18115: IFTRUE 18119
18117: GO 18144
18119: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18120: LD_ADDR_VAR 0 3
18124: PUSH
18125: LD_INT 83
18127: PPUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 321
18137: PUSH
18138: LD_INT 2
18140: EQUAL
18141: ST_TO_ADDR
18142: GO 18244
18144: LD_INT 17
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18177
18152: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18153: LD_ADDR_VAR 0 3
18157: PUSH
18158: LD_INT 39
18160: PPUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 321
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: ST_TO_ADDR
18175: GO 18244
18177: LD_INT 18
18179: DOUBLE
18180: EQUAL
18181: IFTRUE 18185
18183: GO 18210
18185: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18186: LD_ADDR_VAR 0 3
18190: PUSH
18191: LD_INT 40
18193: PPUSH
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 321
18203: PUSH
18204: LD_INT 2
18206: EQUAL
18207: ST_TO_ADDR
18208: GO 18244
18210: LD_INT 27
18212: DOUBLE
18213: EQUAL
18214: IFTRUE 18218
18216: GO 18243
18218: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_INT 35
18226: PPUSH
18227: LD_VAR 0 1
18231: PPUSH
18232: CALL_OW 321
18236: PUSH
18237: LD_INT 2
18239: EQUAL
18240: ST_TO_ADDR
18241: GO 18244
18243: POP
// end ;
18244: LD_VAR 0 3
18248: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18249: LD_INT 0
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
// result := false ;
18262: LD_ADDR_VAR 0 6
18266: PUSH
18267: LD_INT 0
18269: ST_TO_ADDR
// if btype = b_depot then
18270: LD_VAR 0 2
18274: PUSH
18275: LD_INT 0
18277: EQUAL
18278: IFFALSE 18290
// begin result := true ;
18280: LD_ADDR_VAR 0 6
18284: PUSH
18285: LD_INT 1
18287: ST_TO_ADDR
// exit ;
18288: GO 19116
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18290: LD_VAR 0 1
18294: NOT
18295: PUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 266
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: IN
18316: NOT
18317: OR
18318: PUSH
18319: LD_VAR 0 2
18323: NOT
18324: OR
18325: PUSH
18326: LD_VAR 0 5
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: LD_INT 2
18339: PUSH
18340: LD_INT 3
18342: PUSH
18343: LD_INT 4
18345: PUSH
18346: LD_INT 5
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: IN
18357: NOT
18358: OR
18359: PUSH
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_VAR 0 4
18369: PPUSH
18370: CALL_OW 488
18374: NOT
18375: OR
18376: IFFALSE 18380
// exit ;
18378: GO 19116
// side := GetSide ( depot ) ;
18380: LD_ADDR_VAR 0 9
18384: PUSH
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 255
18394: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18395: LD_VAR 0 9
18399: PPUSH
18400: LD_VAR 0 2
18404: PPUSH
18405: CALL 17873 0 2
18409: NOT
18410: IFFALSE 18414
// exit ;
18412: GO 19116
// pom := GetBase ( depot ) ;
18414: LD_ADDR_VAR 0 10
18418: PUSH
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 274
18428: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18429: LD_ADDR_VAR 0 11
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_VAR 0 1
18443: PPUSH
18444: CALL_OW 248
18448: PPUSH
18449: CALL_OW 450
18453: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18454: LD_VAR 0 10
18458: PPUSH
18459: LD_INT 1
18461: PPUSH
18462: CALL_OW 275
18466: PUSH
18467: LD_VAR 0 11
18471: PUSH
18472: LD_INT 1
18474: ARRAY
18475: GREATEREQUAL
18476: PUSH
18477: LD_VAR 0 10
18481: PPUSH
18482: LD_INT 2
18484: PPUSH
18485: CALL_OW 275
18489: PUSH
18490: LD_VAR 0 11
18494: PUSH
18495: LD_INT 2
18497: ARRAY
18498: GREATEREQUAL
18499: AND
18500: PUSH
18501: LD_VAR 0 10
18505: PPUSH
18506: LD_INT 3
18508: PPUSH
18509: CALL_OW 275
18513: PUSH
18514: LD_VAR 0 11
18518: PUSH
18519: LD_INT 3
18521: ARRAY
18522: GREATEREQUAL
18523: AND
18524: NOT
18525: IFFALSE 18529
// exit ;
18527: GO 19116
// if GetBType ( depot ) = b_depot then
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 0
18541: EQUAL
18542: IFFALSE 18554
// dist := 28 else
18544: LD_ADDR_VAR 0 14
18548: PUSH
18549: LD_INT 28
18551: ST_TO_ADDR
18552: GO 18562
// dist := 36 ;
18554: LD_ADDR_VAR 0 14
18558: PUSH
18559: LD_INT 36
18561: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18562: LD_VAR 0 1
18566: PPUSH
18567: LD_VAR 0 3
18571: PPUSH
18572: LD_VAR 0 4
18576: PPUSH
18577: CALL_OW 297
18581: PUSH
18582: LD_VAR 0 14
18586: GREATER
18587: IFFALSE 18591
// exit ;
18589: GO 19116
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18591: LD_ADDR_VAR 0 12
18595: PUSH
18596: LD_VAR 0 2
18600: PPUSH
18601: LD_VAR 0 3
18605: PPUSH
18606: LD_VAR 0 4
18610: PPUSH
18611: LD_VAR 0 5
18615: PPUSH
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 248
18625: PPUSH
18626: LD_INT 0
18628: PPUSH
18629: CALL 19121 0 6
18633: ST_TO_ADDR
// if not hexes then
18634: LD_VAR 0 12
18638: NOT
18639: IFFALSE 18643
// exit ;
18641: GO 19116
// hex := GetHexInfo ( x , y ) ;
18643: LD_ADDR_VAR 0 15
18647: PUSH
18648: LD_VAR 0 3
18652: PPUSH
18653: LD_VAR 0 4
18657: PPUSH
18658: CALL_OW 546
18662: ST_TO_ADDR
// if hex [ 1 ] then
18663: LD_VAR 0 15
18667: PUSH
18668: LD_INT 1
18670: ARRAY
18671: IFFALSE 18675
// exit ;
18673: GO 19116
// height := hex [ 2 ] ;
18675: LD_ADDR_VAR 0 13
18679: PUSH
18680: LD_VAR 0 15
18684: PUSH
18685: LD_INT 2
18687: ARRAY
18688: ST_TO_ADDR
// for i = 1 to hexes do
18689: LD_ADDR_VAR 0 7
18693: PUSH
18694: DOUBLE
18695: LD_INT 1
18697: DEC
18698: ST_TO_ADDR
18699: LD_VAR 0 12
18703: PUSH
18704: FOR_TO
18705: IFFALSE 19035
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18707: LD_VAR 0 12
18711: PUSH
18712: LD_VAR 0 7
18716: ARRAY
18717: PUSH
18718: LD_INT 1
18720: ARRAY
18721: PPUSH
18722: LD_VAR 0 12
18726: PUSH
18727: LD_VAR 0 7
18731: ARRAY
18732: PUSH
18733: LD_INT 2
18735: ARRAY
18736: PPUSH
18737: CALL_OW 488
18741: NOT
18742: PUSH
18743: LD_VAR 0 12
18747: PUSH
18748: LD_VAR 0 7
18752: ARRAY
18753: PUSH
18754: LD_INT 1
18756: ARRAY
18757: PPUSH
18758: LD_VAR 0 12
18762: PUSH
18763: LD_VAR 0 7
18767: ARRAY
18768: PUSH
18769: LD_INT 2
18771: ARRAY
18772: PPUSH
18773: CALL_OW 428
18777: PUSH
18778: LD_INT 0
18780: GREATER
18781: OR
18782: PUSH
18783: LD_VAR 0 12
18787: PUSH
18788: LD_VAR 0 7
18792: ARRAY
18793: PUSH
18794: LD_INT 1
18796: ARRAY
18797: PPUSH
18798: LD_VAR 0 12
18802: PUSH
18803: LD_VAR 0 7
18807: ARRAY
18808: PUSH
18809: LD_INT 2
18811: ARRAY
18812: PPUSH
18813: CALL_OW 351
18817: OR
18818: IFFALSE 18824
// exit ;
18820: POP
18821: POP
18822: GO 19116
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18824: LD_ADDR_VAR 0 8
18828: PUSH
18829: LD_VAR 0 12
18833: PUSH
18834: LD_VAR 0 7
18838: ARRAY
18839: PUSH
18840: LD_INT 1
18842: ARRAY
18843: PPUSH
18844: LD_VAR 0 12
18848: PUSH
18849: LD_VAR 0 7
18853: ARRAY
18854: PUSH
18855: LD_INT 2
18857: ARRAY
18858: PPUSH
18859: CALL_OW 546
18863: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18864: LD_VAR 0 8
18868: PUSH
18869: LD_INT 1
18871: ARRAY
18872: PUSH
18873: LD_VAR 0 8
18877: PUSH
18878: LD_INT 2
18880: ARRAY
18881: PUSH
18882: LD_VAR 0 13
18886: PUSH
18887: LD_INT 2
18889: PLUS
18890: GREATER
18891: OR
18892: PUSH
18893: LD_VAR 0 8
18897: PUSH
18898: LD_INT 2
18900: ARRAY
18901: PUSH
18902: LD_VAR 0 13
18906: PUSH
18907: LD_INT 2
18909: MINUS
18910: LESS
18911: OR
18912: PUSH
18913: LD_VAR 0 8
18917: PUSH
18918: LD_INT 3
18920: ARRAY
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 8
18927: PUSH
18928: LD_INT 9
18930: PUSH
18931: LD_INT 10
18933: PUSH
18934: LD_INT 11
18936: PUSH
18937: LD_INT 12
18939: PUSH
18940: LD_INT 13
18942: PUSH
18943: LD_INT 16
18945: PUSH
18946: LD_INT 17
18948: PUSH
18949: LD_INT 18
18951: PUSH
18952: LD_INT 19
18954: PUSH
18955: LD_INT 20
18957: PUSH
18958: LD_INT 21
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: IN
18976: NOT
18977: OR
18978: PUSH
18979: LD_VAR 0 8
18983: PUSH
18984: LD_INT 5
18986: ARRAY
18987: NOT
18988: OR
18989: PUSH
18990: LD_VAR 0 8
18994: PUSH
18995: LD_INT 6
18997: ARRAY
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: LD_INT 2
19004: PUSH
19005: LD_INT 7
19007: PUSH
19008: LD_INT 9
19010: PUSH
19011: LD_INT 10
19013: PUSH
19014: LD_INT 11
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: IN
19025: NOT
19026: OR
19027: IFFALSE 19033
// exit ;
19029: POP
19030: POP
19031: GO 19116
// end ;
19033: GO 18704
19035: POP
19036: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
19037: LD_VAR 0 9
19041: PPUSH
19042: LD_VAR 0 3
19046: PPUSH
19047: LD_VAR 0 4
19051: PPUSH
19052: LD_INT 20
19054: PPUSH
19055: CALL 11039 0 4
19059: PUSH
19060: LD_INT 4
19062: ARRAY
19063: IFFALSE 19067
// exit ;
19065: GO 19116
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
19067: LD_VAR 0 2
19071: PUSH
19072: LD_INT 29
19074: PUSH
19075: LD_INT 30
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: IN
19082: PUSH
19083: LD_VAR 0 3
19087: PPUSH
19088: LD_VAR 0 4
19092: PPUSH
19093: LD_VAR 0 9
19097: PPUSH
19098: CALL_OW 440
19102: NOT
19103: AND
19104: IFFALSE 19108
// exit ;
19106: GO 19116
// result := true ;
19108: LD_ADDR_VAR 0 6
19112: PUSH
19113: LD_INT 1
19115: ST_TO_ADDR
// end ;
19116: LD_VAR 0 6
19120: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19121: LD_INT 0
19123: PPUSH
19124: PPUSH
19125: PPUSH
19126: PPUSH
19127: PPUSH
19128: PPUSH
19129: PPUSH
19130: PPUSH
19131: PPUSH
19132: PPUSH
19133: PPUSH
19134: PPUSH
19135: PPUSH
19136: PPUSH
19137: PPUSH
19138: PPUSH
19139: PPUSH
19140: PPUSH
19141: PPUSH
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
19146: PPUSH
19147: PPUSH
19148: PPUSH
19149: PPUSH
19150: PPUSH
19151: PPUSH
19152: PPUSH
19153: PPUSH
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
19158: PPUSH
19159: PPUSH
19160: PPUSH
19161: PPUSH
19162: PPUSH
19163: PPUSH
19164: PPUSH
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
19174: PPUSH
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
19179: PPUSH
19180: PPUSH
// result = [ ] ;
19181: LD_ADDR_VAR 0 7
19185: PUSH
19186: EMPTY
19187: ST_TO_ADDR
// temp_list = [ ] ;
19188: LD_ADDR_VAR 0 9
19192: PUSH
19193: EMPTY
19194: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19195: LD_VAR 0 4
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: LD_INT 3
19211: PUSH
19212: LD_INT 4
19214: PUSH
19215: LD_INT 5
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: IN
19226: NOT
19227: PUSH
19228: LD_VAR 0 1
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: IN
19243: PUSH
19244: LD_VAR 0 5
19248: PUSH
19249: LD_INT 1
19251: PUSH
19252: LD_INT 2
19254: PUSH
19255: LD_INT 3
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: IN
19263: NOT
19264: AND
19265: OR
19266: IFFALSE 19270
// exit ;
19268: GO 37661
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 6
19277: PUSH
19278: LD_INT 7
19280: PUSH
19281: LD_INT 8
19283: PUSH
19284: LD_INT 13
19286: PUSH
19287: LD_INT 12
19289: PUSH
19290: LD_INT 15
19292: PUSH
19293: LD_INT 11
19295: PUSH
19296: LD_INT 14
19298: PUSH
19299: LD_INT 10
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: IN
19313: IFFALSE 19323
// btype = b_lab ;
19315: LD_ADDR_VAR 0 1
19319: PUSH
19320: LD_INT 6
19322: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19323: LD_VAR 0 6
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: LIST
19341: IN
19342: NOT
19343: PUSH
19344: LD_VAR 0 1
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: LD_INT 1
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 3
19360: PUSH
19361: LD_INT 6
19363: PUSH
19364: LD_INT 36
19366: PUSH
19367: LD_INT 4
19369: PUSH
19370: LD_INT 5
19372: PUSH
19373: LD_INT 31
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: LD_INT 33
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: IN
19395: NOT
19396: PUSH
19397: LD_VAR 0 6
19401: PUSH
19402: LD_INT 1
19404: EQUAL
19405: AND
19406: OR
19407: PUSH
19408: LD_VAR 0 1
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 3
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: IN
19423: NOT
19424: PUSH
19425: LD_VAR 0 6
19429: PUSH
19430: LD_INT 2
19432: EQUAL
19433: AND
19434: OR
19435: IFFALSE 19445
// mode = 0 ;
19437: LD_ADDR_VAR 0 6
19441: PUSH
19442: LD_INT 0
19444: ST_TO_ADDR
// case mode of 0 :
19445: LD_VAR 0 6
19449: PUSH
19450: LD_INT 0
19452: DOUBLE
19453: EQUAL
19454: IFTRUE 19458
19456: GO 30911
19458: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19459: LD_ADDR_VAR 0 11
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: NEG
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: LD_INT 1
19532: NEG
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: LD_INT 1
19566: NEG
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: LD_INT 3
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: LD_INT 3
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19652: LD_ADDR_VAR 0 12
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: NEG
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: NEG
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: NEG
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 3
19809: NEG
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 3
19820: NEG
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19848: LD_ADDR_VAR 0 13
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: NEG
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 2
19971: NEG
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: NEG
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: LD_INT 3
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 3
20007: NEG
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 3
20019: NEG
20020: PUSH
20021: LD_INT 3
20023: NEG
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20047: LD_ADDR_VAR 0 14
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: LD_INT 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: LD_INT 3
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: LD_INT 3
20208: NEG
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: LD_INT 2
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20243: LD_ADDR_VAR 0 15
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: LD_INT 1
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: NEG
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: LD_INT 0
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 2
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: LD_INT 1
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 2
20366: NEG
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 2
20377: NEG
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 2
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 3
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20436: LD_ADDR_VAR 0 16
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: LD_INT 1
20456: NEG
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 1
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: NEG
20518: PUSH
20519: LD_INT 2
20521: NEG
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 2
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 2
20559: NEG
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 3
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 3
20593: PUSH
20594: LD_INT 3
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 3
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20629: LD_ADDR_VAR 0 17
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: LD_INT 0
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 1
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 1
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: LD_INT 2
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: NEG
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20859: LD_ADDR_VAR 0 18
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 2
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 2
21035: NEG
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 2
21058: NEG
21059: PUSH
21060: LD_INT 2
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21089: LD_ADDR_VAR 0 19
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: LD_INT 2
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 2
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: NEG
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21319: LD_ADDR_VAR 0 20
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 0
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: NEG
21496: PUSH
21497: LD_INT 0
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: NEG
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 2
21518: NEG
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21549: LD_ADDR_VAR 0 21
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 0
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 1
21607: NEG
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: LD_INT 1
21622: NEG
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: LD_INT 2
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: LD_INT 2
21645: NEG
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 2
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 2
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: NEG
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: NEG
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 2
21736: NEG
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21779: LD_ADDR_VAR 0 22
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 0
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 2
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 1
21944: NEG
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: NEG
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 2
21966: NEG
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: LD_INT 2
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22009: LD_ADDR_VAR 0 23
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: LD_INT 2
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 2
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 2
22185: NEG
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 2
22208: NEG
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: NEG
22221: PUSH
22222: LD_INT 3
22224: NEG
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 1
22232: NEG
22233: PUSH
22234: LD_INT 3
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: LD_INT 2
22247: NEG
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22289: LD_ADDR_VAR 0 24
22293: PUSH
22294: LD_INT 0
22296: PUSH
22297: LD_INT 0
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: LD_INT 1
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: LD_INT 1
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: PUSH
22372: LD_INT 2
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: LD_INT 2
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: LD_INT 0
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: LD_INT 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 2
22465: NEG
22466: PUSH
22467: LD_INT 0
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 2
22476: NEG
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 2
22488: NEG
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22565: LD_ADDR_VAR 0 25
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 0
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: LD_INT 2
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: LD_INT 2
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 0
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: NEG
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 2
22752: NEG
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: LD_INT 2
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 3
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 3
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: LD_INT 3
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22839: LD_ADDR_VAR 0 26
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: NEG
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 2
22924: NEG
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: LD_INT 2
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: NEG
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 2
23015: NEG
23016: PUSH
23017: LD_INT 0
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: NEG
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: LD_INT 2
23042: NEG
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: LD_INT 3
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: LD_INT 3
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 1
23070: NEG
23071: PUSH
23072: LD_INT 2
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 2
23081: NEG
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23115: LD_ADDR_VAR 0 27
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 0
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 2
23291: NEG
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: NEG
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PUSH
23316: LD_INT 2
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: NEG
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 3
23348: NEG
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 3
23360: NEG
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23395: LD_ADDR_VAR 0 28
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 2
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: LD_INT 2
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 2
23571: NEG
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 2
23582: NEG
23583: PUSH
23584: LD_INT 1
23586: NEG
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: LD_INT 2
23598: NEG
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 2
23606: NEG
23607: PUSH
23608: LD_INT 3
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 3
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 3
23630: NEG
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 3
23642: NEG
23643: PUSH
23644: LD_INT 2
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23677: LD_ADDR_VAR 0 29
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 1
23735: NEG
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 2
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 2
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 2
23843: NEG
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 2
23855: NEG
23856: PUSH
23857: LD_INT 2
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: LD_INT 3
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: LD_INT 3
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 3
23921: NEG
23922: PUSH
23923: LD_INT 2
23925: NEG
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23956: LD_ADDR_VAR 0 30
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: LD_INT 2
24041: NEG
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 2
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 2
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: LD_INT 3
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 3
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 3
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24234: LD_ADDR_VAR 0 31
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 2
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 2
24399: NEG
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 2
24411: NEG
24412: PUSH
24413: LD_INT 2
24415: NEG
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 2
24423: NEG
24424: PUSH
24425: LD_INT 3
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 3
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 3
24477: NEG
24478: PUSH
24479: LD_INT 2
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24512: LD_ADDR_VAR 0 32
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 2
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: LD_INT 1
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 2
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: LD_INT 3
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 2
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 3
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: LD_INT 3
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 2
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 3
24755: NEG
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24790: LD_ADDR_VAR 0 33
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 2
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 2
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: NEG
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: NEG
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 3
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 2
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 3
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 3
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: NEG
25035: PUSH
25036: LD_INT 2
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25069: LD_ADDR_VAR 0 34
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: LD_INT 2
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 2
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 2
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 3
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 3
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: PUSH
25294: LD_INT 3
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: NEG
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 3
25314: NEG
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25349: LD_ADDR_VAR 0 35
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: NEG
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25461: LD_ADDR_VAR 0 36
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: LD_INT 2
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25573: LD_ADDR_VAR 0 37
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25685: LD_ADDR_VAR 0 38
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25797: LD_ADDR_VAR 0 39
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: LD_INT 2
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 2
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25909: LD_ADDR_VAR 0 40
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26021: LD_ADDR_VAR 0 41
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 2
26176: NEG
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 2
26199: NEG
26200: PUSH
26201: LD_INT 2
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: NEG
26212: PUSH
26213: LD_INT 3
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 3
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 3
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 3
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 3
26264: PUSH
26265: LD_INT 3
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: LD_INT 3
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 3
26295: NEG
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 3
26306: NEG
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 3
26318: NEG
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 3
26330: NEG
26331: PUSH
26332: LD_INT 3
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26371: LD_ADDR_VAR 0 42
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: LD_INT 2
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 2
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: LD_INT 3
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 3
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 3
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 2
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 3
26617: PUSH
26618: LD_INT 3
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: LD_INT 3
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 3
26668: NEG
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 3
26680: NEG
26681: PUSH
26682: LD_INT 3
26684: NEG
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26721: LD_ADDR_VAR 0 43
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 2
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 2
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 2
26887: NEG
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: NEG
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 3
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 3
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: LD_INT 2
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 3
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 3
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 3
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 3
27017: NEG
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 3
27028: NEG
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27069: LD_ADDR_VAR 0 44
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 2
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: LD_INT 2
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: NEG
27260: PUSH
27261: LD_INT 3
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 3
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 3
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 3
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: LD_INT 3
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 2
27322: PUSH
27323: LD_INT 3
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 3
27343: NEG
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 3
27354: NEG
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 3
27366: NEG
27367: PUSH
27368: LD_INT 2
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 3
27378: NEG
27379: PUSH
27380: LD_INT 3
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27419: LD_ADDR_VAR 0 45
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: LD_INT 1
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 2
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 2
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: LD_INT 3
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 3
27625: NEG
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 3
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 3
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 3
27665: PUSH
27666: LD_INT 3
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: LD_INT 3
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 3
27716: NEG
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 3
27728: NEG
27729: PUSH
27730: LD_INT 3
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27769: LD_ADDR_VAR 0 46
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: LD_INT 1
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: NEG
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: LD_INT 3
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 3
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 3
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 3
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: LD_INT 3
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 3
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 2
28054: NEG
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 3
28065: NEG
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 3
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28117: LD_ADDR_VAR 0 47
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: NEG
28199: PUSH
28200: LD_INT 2
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: LD_INT 2
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 2
28232: NEG
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: NEG
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28268: LD_ADDR_VAR 0 48
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28415: LD_ADDR_VAR 0 49
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: LD_INT 0
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28559: LD_ADDR_VAR 0 50
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28703: LD_ADDR_VAR 0 51
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: NEG
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28850: LD_ADDR_VAR 0 52
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 2
28954: NEG
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PUSH
28979: LD_INT 2
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29001: LD_ADDR_VAR 0 53
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29231: LD_ADDR_VAR 0 54
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29461: LD_ADDR_VAR 0 55
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 1
29530: NEG
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 2
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: LD_INT 2
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29691: LD_ADDR_VAR 0 56
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: LD_INT 2
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 2
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29921: LD_ADDR_VAR 0 57
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 1
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: LD_INT 2
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 2
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 2
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30151: LD_ADDR_VAR 0 58
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: LD_INT 1
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 2
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: LD_INT 2
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 2
30350: NEG
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30381: LD_ADDR_VAR 0 59
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30469: LD_ADDR_VAR 0 60
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 0
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30557: LD_ADDR_VAR 0 61
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30645: LD_ADDR_VAR 0 62
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30733: LD_ADDR_VAR 0 63
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30821: LD_ADDR_VAR 0 64
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: ST_TO_ADDR
// end ; 1 :
30909: GO 36806
30911: LD_INT 1
30913: DOUBLE
30914: EQUAL
30915: IFTRUE 30919
30917: GO 33542
30919: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30920: LD_ADDR_VAR 0 11
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: LD_INT 3
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30964: LD_ADDR_VAR 0 12
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31005: LD_ADDR_VAR 0 13
31009: PUSH
31010: LD_INT 3
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 3
31022: PUSH
31023: LD_INT 3
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31045: LD_ADDR_VAR 0 14
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 3
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 3
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31086: LD_ADDR_VAR 0 15
31090: PUSH
31091: LD_INT 2
31093: NEG
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 3
31104: NEG
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 3
31115: NEG
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31130: LD_ADDR_VAR 0 16
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: LD_INT 3
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 3
31149: NEG
31150: PUSH
31151: LD_INT 2
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 3
31161: NEG
31162: PUSH
31163: LD_INT 3
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31176: LD_ADDR_VAR 0 17
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: LD_INT 3
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 3
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31220: LD_ADDR_VAR 0 18
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31261: LD_ADDR_VAR 0 19
31265: PUSH
31266: LD_INT 3
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: LD_INT 3
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31301: LD_ADDR_VAR 0 20
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 3
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31342: LD_ADDR_VAR 0 21
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 3
31360: NEG
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 3
31371: NEG
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31386: LD_ADDR_VAR 0 22
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 3
31405: NEG
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: LD_INT 3
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: LIST
31431: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31432: LD_ADDR_VAR 0 23
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 3
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31476: LD_ADDR_VAR 0 24
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 4
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31517: LD_ADDR_VAR 0 25
31521: PUSH
31522: LD_INT 3
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 4
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: LD_INT 4
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31557: LD_ADDR_VAR 0 26
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 4
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31598: LD_ADDR_VAR 0 27
31602: PUSH
31603: LD_INT 3
31605: NEG
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: NEG
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 4
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31642: LD_ADDR_VAR 0 28
31646: PUSH
31647: LD_INT 3
31649: NEG
31650: PUSH
31651: LD_INT 3
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 3
31661: NEG
31662: PUSH
31663: LD_INT 4
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 4
31673: NEG
31674: PUSH
31675: LD_INT 3
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31688: LD_ADDR_VAR 0 29
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: LD_INT 3
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: NEG
31730: PUSH
31731: LD_INT 4
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 4
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: LD_INT 5
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: LD_INT 5
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: LD_INT 4
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 6
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 6
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: LD_INT 5
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31843: LD_ADDR_VAR 0 30
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 4
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 4
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 4
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 5
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 5
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 5
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 6
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 6
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31986: LD_ADDR_VAR 0 31
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 3
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 4
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: LD_INT 4
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: LD_INT 4
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 5
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 5
32063: PUSH
32064: LD_INT 5
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 4
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 6
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 6
32093: PUSH
32094: LD_INT 6
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 5
32103: PUSH
32104: LD_INT 6
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32125: LD_ADDR_VAR 0 32
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 4
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 3
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 5
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 5
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: LD_INT 6
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 6
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 5
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32268: LD_ADDR_VAR 0 33
32272: PUSH
32273: LD_INT 2
32275: NEG
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 3
32286: NEG
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: NEG
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 4
32320: NEG
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 4
32331: NEG
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 4
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 5
32354: NEG
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 5
32365: NEG
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 5
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 6
32388: NEG
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 6
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32423: LD_ADDR_VAR 0 34
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: LD_INT 3
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 3
32442: NEG
32443: PUSH
32444: LD_INT 2
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: LD_INT 3
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: NEG
32467: PUSH
32468: LD_INT 4
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 4
32478: NEG
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 4
32490: NEG
32491: PUSH
32492: LD_INT 4
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 4
32502: NEG
32503: PUSH
32504: LD_INT 5
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 5
32514: NEG
32515: PUSH
32516: LD_INT 4
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 5
32526: NEG
32527: PUSH
32528: LD_INT 5
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 5
32538: NEG
32539: PUSH
32540: LD_INT 6
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 6
32550: NEG
32551: PUSH
32552: LD_INT 5
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 6
32562: NEG
32563: PUSH
32564: LD_INT 6
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32586: LD_ADDR_VAR 0 41
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: LD_INT 3
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32630: LD_ADDR_VAR 0 42
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32671: LD_ADDR_VAR 0 43
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32711: LD_ADDR_VAR 0 44
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32752: LD_ADDR_VAR 0 45
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 3
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32796: LD_ADDR_VAR 0 46
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 2
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 3
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 3
32827: NEG
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32842: LD_ADDR_VAR 0 47
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 3
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32875: LD_ADDR_VAR 0 48
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32906: LD_ADDR_VAR 0 49
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 3
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32935: LD_ADDR_VAR 0 50
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: LD_INT 3
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32964: LD_ADDR_VAR 0 51
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32995: LD_ADDR_VAR 0 52
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 3
33014: NEG
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33028: LD_ADDR_VAR 0 53
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 3
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 3
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33072: LD_ADDR_VAR 0 54
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 3
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33113: LD_ADDR_VAR 0 55
33117: PUSH
33118: LD_INT 3
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33153: LD_ADDR_VAR 0 56
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: LD_INT 3
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33194: LD_ADDR_VAR 0 57
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 3
33212: NEG
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 3
33223: NEG
33224: PUSH
33225: LD_INT 1
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33238: LD_ADDR_VAR 0 58
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: LD_INT 3
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 3
33257: NEG
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 3
33269: NEG
33270: PUSH
33271: LD_INT 3
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33284: LD_ADDR_VAR 0 59
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33328: LD_ADDR_VAR 0 60
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33369: LD_ADDR_VAR 0 61
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33409: LD_ADDR_VAR 0 62
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: NEG
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33450: LD_ADDR_VAR 0 63
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 2
33468: NEG
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33494: LD_ADDR_VAR 0 64
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: ST_TO_ADDR
// end ; 2 :
33540: GO 36806
33542: LD_INT 2
33544: DOUBLE
33545: EQUAL
33546: IFTRUE 33550
33548: GO 36805
33550: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33551: LD_ADDR_VAR 0 29
33555: PUSH
33556: LD_INT 4
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 4
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 5
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 5
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 4
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 3
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 5
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 3
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 4
33671: PUSH
33672: LD_INT 3
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 4
33681: PUSH
33682: LD_INT 4
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: LD_INT 4
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 3
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 4
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: LD_INT 4
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: LD_INT 4
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 5
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 5
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: LD_INT 4
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 5
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: NEG
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 3
33845: NEG
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 3
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 4
33890: NEG
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 4
33901: NEG
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 4
33913: NEG
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 4
33936: NEG
33937: PUSH
33938: LD_INT 4
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 4
33948: NEG
33949: PUSH
33950: LD_INT 5
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 3
33960: NEG
33961: PUSH
33962: LD_INT 4
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: LD_INT 3
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 4
33984: NEG
33985: PUSH
33986: LD_INT 3
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 5
33996: NEG
33997: PUSH
33998: LD_INT 4
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 5
34008: NEG
34009: PUSH
34010: LD_INT 5
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: NEG
34021: PUSH
34022: LD_INT 5
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 5
34032: NEG
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34089: LD_ADDR_VAR 0 30
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: LD_INT 4
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 4
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 5
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 5
34126: PUSH
34127: LD_INT 5
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: LD_INT 5
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 3
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 5
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: LD_INT 5
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: LD_INT 3
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: LD_INT 4
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: LD_INT 4
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 3
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 2
34258: PUSH
34259: LD_INT 4
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 4
34279: NEG
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 4
34290: NEG
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 3
34302: NEG
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 3
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 4
34324: NEG
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 5
34335: NEG
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 5
34346: NEG
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 5
34358: NEG
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 3
34370: NEG
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 3
34381: NEG
34382: PUSH
34383: LD_INT 3
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: LD_INT 4
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: LD_INT 3
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 3
34429: NEG
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 4
34441: NEG
34442: PUSH
34443: LD_INT 3
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 4
34453: NEG
34454: PUSH
34455: LD_INT 4
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 4
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 4
34477: NEG
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 4
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 5
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 4
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: LD_INT 3
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 3
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 4
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 5
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 3
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: NEG
34580: PUSH
34581: LD_INT 5
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34636: LD_ADDR_VAR 0 31
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 3
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 4
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 5
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 5
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 4
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: LD_INT 3
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 5
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: NEG
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: NEG
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 3
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 4
34792: NEG
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 4
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 4
34815: NEG
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 4
34838: NEG
34839: PUSH
34840: LD_INT 4
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 4
34850: NEG
34851: PUSH
34852: LD_INT 5
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 3
34862: NEG
34863: PUSH
34864: LD_INT 4
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 3
34874: NEG
34875: PUSH
34876: LD_INT 3
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 4
34886: NEG
34887: PUSH
34888: LD_INT 3
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 5
34898: NEG
34899: PUSH
34900: LD_INT 4
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 5
34910: NEG
34911: PUSH
34912: LD_INT 5
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: NEG
34923: PUSH
34924: LD_INT 5
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 5
34934: NEG
34935: PUSH
34936: LD_INT 3
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: LD_INT 3
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 4
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 3
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: LD_INT 3
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: LD_INT 4
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: LD_INT 2
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 2
35036: NEG
35037: PUSH
35038: LD_INT 4
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 4
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 4
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 5
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 5
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 3
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 5
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35186: LD_ADDR_VAR 0 32
35190: PUSH
35191: LD_INT 4
35193: NEG
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 4
35204: NEG
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 3
35216: NEG
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 3
35227: NEG
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 4
35238: NEG
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 5
35249: NEG
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 5
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 5
35272: NEG
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 3
35284: NEG
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 3
35295: NEG
35296: PUSH
35297: LD_INT 3
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 3
35307: NEG
35308: PUSH
35309: LD_INT 4
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: LD_INT 3
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 3
35343: NEG
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 4
35355: NEG
35356: PUSH
35357: LD_INT 3
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 4
35367: NEG
35368: PUSH
35369: LD_INT 4
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: LD_INT 4
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 4
35391: NEG
35392: PUSH
35393: LD_INT 2
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 4
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 5
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 4
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: LD_INT 3
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 3
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 4
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 5
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 3
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: LD_INT 5
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 3
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 4
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 4
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 4
35598: PUSH
35599: LD_INT 4
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 4
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 5
35618: PUSH
35619: LD_INT 4
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 5
35628: PUSH
35629: LD_INT 5
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 4
35638: PUSH
35639: LD_INT 5
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 3
35648: PUSH
35649: LD_INT 4
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: PUSH
35659: LD_INT 3
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 5
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 3
35678: PUSH
35679: LD_INT 5
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35733: LD_ADDR_VAR 0 33
35737: PUSH
35738: LD_INT 4
35740: NEG
35741: PUSH
35742: LD_INT 4
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 4
35752: NEG
35753: PUSH
35754: LD_INT 5
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 3
35764: NEG
35765: PUSH
35766: LD_INT 4
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 3
35776: NEG
35777: PUSH
35778: LD_INT 3
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 4
35788: NEG
35789: PUSH
35790: LD_INT 3
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 5
35800: NEG
35801: PUSH
35802: LD_INT 4
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 5
35812: NEG
35813: PUSH
35814: LD_INT 5
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 3
35824: NEG
35825: PUSH
35826: LD_INT 5
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 5
35836: NEG
35837: PUSH
35838: LD_INT 3
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 3
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 4
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: LD_INT 3
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 2
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 2
35895: NEG
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: LD_INT 3
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 4
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 2
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: LD_INT 4
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 4
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 4
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 5
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 5
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 3
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 3
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 5
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 3
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 3
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 4
36063: PUSH
36064: LD_INT 3
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 4
36073: PUSH
36074: LD_INT 4
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: LD_INT 4
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: LD_INT 3
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 4
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 4
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 4
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 3
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: LD_INT 4
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: LD_INT 5
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 5
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 4
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 3
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 5
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: NEG
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36271: LD_ADDR_VAR 0 34
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 4
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 5
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 4
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 3
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: LD_INT 3
36325: NEG
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: LD_INT 4
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 5
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 3
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: LD_INT 5
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 3
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 4
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 4
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 2
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 4
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 4
36473: PUSH
36474: LD_INT 4
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 4
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 5
36493: PUSH
36494: LD_INT 4
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 5
36503: PUSH
36504: LD_INT 5
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 4
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 3
36523: PUSH
36524: LD_INT 4
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 3
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 5
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 3
36553: PUSH
36554: LD_INT 5
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 3
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 4
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 4
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 4
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 4
36656: NEG
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 4
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 3
36679: NEG
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 3
36690: NEG
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 4
36701: NEG
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 5
36712: NEG
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 5
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 5
36735: NEG
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: NEG
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
// end ; end ;
36803: GO 36806
36805: POP
// case btype of b_depot , b_warehouse :
36806: LD_VAR 0 1
36810: PUSH
36811: LD_INT 0
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36825
36817: LD_INT 1
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36825
36823: GO 37026
36825: POP
// case nation of nation_american :
36826: LD_VAR 0 5
36830: PUSH
36831: LD_INT 1
36833: DOUBLE
36834: EQUAL
36835: IFTRUE 36839
36837: GO 36895
36839: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36840: LD_ADDR_VAR 0 9
36844: PUSH
36845: LD_VAR 0 11
36849: PUSH
36850: LD_VAR 0 12
36854: PUSH
36855: LD_VAR 0 13
36859: PUSH
36860: LD_VAR 0 14
36864: PUSH
36865: LD_VAR 0 15
36869: PUSH
36870: LD_VAR 0 16
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: PUSH
36883: LD_VAR 0 4
36887: PUSH
36888: LD_INT 1
36890: PLUS
36891: ARRAY
36892: ST_TO_ADDR
36893: GO 37024
36895: LD_INT 2
36897: DOUBLE
36898: EQUAL
36899: IFTRUE 36903
36901: GO 36959
36903: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36904: LD_ADDR_VAR 0 9
36908: PUSH
36909: LD_VAR 0 17
36913: PUSH
36914: LD_VAR 0 18
36918: PUSH
36919: LD_VAR 0 19
36923: PUSH
36924: LD_VAR 0 20
36928: PUSH
36929: LD_VAR 0 21
36933: PUSH
36934: LD_VAR 0 22
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: PUSH
36947: LD_VAR 0 4
36951: PUSH
36952: LD_INT 1
36954: PLUS
36955: ARRAY
36956: ST_TO_ADDR
36957: GO 37024
36959: LD_INT 3
36961: DOUBLE
36962: EQUAL
36963: IFTRUE 36967
36965: GO 37023
36967: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36968: LD_ADDR_VAR 0 9
36972: PUSH
36973: LD_VAR 0 23
36977: PUSH
36978: LD_VAR 0 24
36982: PUSH
36983: LD_VAR 0 25
36987: PUSH
36988: LD_VAR 0 26
36992: PUSH
36993: LD_VAR 0 27
36997: PUSH
36998: LD_VAR 0 28
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: PUSH
37011: LD_VAR 0 4
37015: PUSH
37016: LD_INT 1
37018: PLUS
37019: ARRAY
37020: ST_TO_ADDR
37021: GO 37024
37023: POP
37024: GO 37579
37026: LD_INT 2
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37040
37032: LD_INT 3
37034: DOUBLE
37035: EQUAL
37036: IFTRUE 37040
37038: GO 37096
37040: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
37041: LD_ADDR_VAR 0 9
37045: PUSH
37046: LD_VAR 0 29
37050: PUSH
37051: LD_VAR 0 30
37055: PUSH
37056: LD_VAR 0 31
37060: PUSH
37061: LD_VAR 0 32
37065: PUSH
37066: LD_VAR 0 33
37070: PUSH
37071: LD_VAR 0 34
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: PUSH
37084: LD_VAR 0 4
37088: PUSH
37089: LD_INT 1
37091: PLUS
37092: ARRAY
37093: ST_TO_ADDR
37094: GO 37579
37096: LD_INT 16
37098: DOUBLE
37099: EQUAL
37100: IFTRUE 37158
37102: LD_INT 17
37104: DOUBLE
37105: EQUAL
37106: IFTRUE 37158
37108: LD_INT 18
37110: DOUBLE
37111: EQUAL
37112: IFTRUE 37158
37114: LD_INT 19
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37158
37120: LD_INT 22
37122: DOUBLE
37123: EQUAL
37124: IFTRUE 37158
37126: LD_INT 20
37128: DOUBLE
37129: EQUAL
37130: IFTRUE 37158
37132: LD_INT 21
37134: DOUBLE
37135: EQUAL
37136: IFTRUE 37158
37138: LD_INT 23
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37158
37144: LD_INT 24
37146: DOUBLE
37147: EQUAL
37148: IFTRUE 37158
37150: LD_INT 25
37152: DOUBLE
37153: EQUAL
37154: IFTRUE 37158
37156: GO 37214
37158: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37159: LD_ADDR_VAR 0 9
37163: PUSH
37164: LD_VAR 0 35
37168: PUSH
37169: LD_VAR 0 36
37173: PUSH
37174: LD_VAR 0 37
37178: PUSH
37179: LD_VAR 0 38
37183: PUSH
37184: LD_VAR 0 39
37188: PUSH
37189: LD_VAR 0 40
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: PUSH
37202: LD_VAR 0 4
37206: PUSH
37207: LD_INT 1
37209: PLUS
37210: ARRAY
37211: ST_TO_ADDR
37212: GO 37579
37214: LD_INT 6
37216: DOUBLE
37217: EQUAL
37218: IFTRUE 37270
37220: LD_INT 7
37222: DOUBLE
37223: EQUAL
37224: IFTRUE 37270
37226: LD_INT 8
37228: DOUBLE
37229: EQUAL
37230: IFTRUE 37270
37232: LD_INT 13
37234: DOUBLE
37235: EQUAL
37236: IFTRUE 37270
37238: LD_INT 12
37240: DOUBLE
37241: EQUAL
37242: IFTRUE 37270
37244: LD_INT 15
37246: DOUBLE
37247: EQUAL
37248: IFTRUE 37270
37250: LD_INT 11
37252: DOUBLE
37253: EQUAL
37254: IFTRUE 37270
37256: LD_INT 14
37258: DOUBLE
37259: EQUAL
37260: IFTRUE 37270
37262: LD_INT 10
37264: DOUBLE
37265: EQUAL
37266: IFTRUE 37270
37268: GO 37326
37270: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37271: LD_ADDR_VAR 0 9
37275: PUSH
37276: LD_VAR 0 41
37280: PUSH
37281: LD_VAR 0 42
37285: PUSH
37286: LD_VAR 0 43
37290: PUSH
37291: LD_VAR 0 44
37295: PUSH
37296: LD_VAR 0 45
37300: PUSH
37301: LD_VAR 0 46
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: PUSH
37314: LD_VAR 0 4
37318: PUSH
37319: LD_INT 1
37321: PLUS
37322: ARRAY
37323: ST_TO_ADDR
37324: GO 37579
37326: LD_INT 36
37328: DOUBLE
37329: EQUAL
37330: IFTRUE 37334
37332: GO 37390
37334: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37335: LD_ADDR_VAR 0 9
37339: PUSH
37340: LD_VAR 0 47
37344: PUSH
37345: LD_VAR 0 48
37349: PUSH
37350: LD_VAR 0 49
37354: PUSH
37355: LD_VAR 0 50
37359: PUSH
37360: LD_VAR 0 51
37364: PUSH
37365: LD_VAR 0 52
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: PUSH
37378: LD_VAR 0 4
37382: PUSH
37383: LD_INT 1
37385: PLUS
37386: ARRAY
37387: ST_TO_ADDR
37388: GO 37579
37390: LD_INT 4
37392: DOUBLE
37393: EQUAL
37394: IFTRUE 37416
37396: LD_INT 5
37398: DOUBLE
37399: EQUAL
37400: IFTRUE 37416
37402: LD_INT 34
37404: DOUBLE
37405: EQUAL
37406: IFTRUE 37416
37408: LD_INT 37
37410: DOUBLE
37411: EQUAL
37412: IFTRUE 37416
37414: GO 37472
37416: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37417: LD_ADDR_VAR 0 9
37421: PUSH
37422: LD_VAR 0 53
37426: PUSH
37427: LD_VAR 0 54
37431: PUSH
37432: LD_VAR 0 55
37436: PUSH
37437: LD_VAR 0 56
37441: PUSH
37442: LD_VAR 0 57
37446: PUSH
37447: LD_VAR 0 58
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: PUSH
37460: LD_VAR 0 4
37464: PUSH
37465: LD_INT 1
37467: PLUS
37468: ARRAY
37469: ST_TO_ADDR
37470: GO 37579
37472: LD_INT 31
37474: DOUBLE
37475: EQUAL
37476: IFTRUE 37522
37478: LD_INT 32
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37522
37484: LD_INT 33
37486: DOUBLE
37487: EQUAL
37488: IFTRUE 37522
37490: LD_INT 27
37492: DOUBLE
37493: EQUAL
37494: IFTRUE 37522
37496: LD_INT 26
37498: DOUBLE
37499: EQUAL
37500: IFTRUE 37522
37502: LD_INT 28
37504: DOUBLE
37505: EQUAL
37506: IFTRUE 37522
37508: LD_INT 29
37510: DOUBLE
37511: EQUAL
37512: IFTRUE 37522
37514: LD_INT 30
37516: DOUBLE
37517: EQUAL
37518: IFTRUE 37522
37520: GO 37578
37522: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37523: LD_ADDR_VAR 0 9
37527: PUSH
37528: LD_VAR 0 59
37532: PUSH
37533: LD_VAR 0 60
37537: PUSH
37538: LD_VAR 0 61
37542: PUSH
37543: LD_VAR 0 62
37547: PUSH
37548: LD_VAR 0 63
37552: PUSH
37553: LD_VAR 0 64
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: PUSH
37566: LD_VAR 0 4
37570: PUSH
37571: LD_INT 1
37573: PLUS
37574: ARRAY
37575: ST_TO_ADDR
37576: GO 37579
37578: POP
// temp_list2 = [ ] ;
37579: LD_ADDR_VAR 0 10
37583: PUSH
37584: EMPTY
37585: ST_TO_ADDR
// for i in temp_list do
37586: LD_ADDR_VAR 0 8
37590: PUSH
37591: LD_VAR 0 9
37595: PUSH
37596: FOR_IN
37597: IFFALSE 37649
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37599: LD_ADDR_VAR 0 10
37603: PUSH
37604: LD_VAR 0 10
37608: PUSH
37609: LD_VAR 0 8
37613: PUSH
37614: LD_INT 1
37616: ARRAY
37617: PUSH
37618: LD_VAR 0 2
37622: PLUS
37623: PUSH
37624: LD_VAR 0 8
37628: PUSH
37629: LD_INT 2
37631: ARRAY
37632: PUSH
37633: LD_VAR 0 3
37637: PLUS
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: EMPTY
37644: LIST
37645: ADD
37646: ST_TO_ADDR
37647: GO 37596
37649: POP
37650: POP
// result = temp_list2 ;
37651: LD_ADDR_VAR 0 7
37655: PUSH
37656: LD_VAR 0 10
37660: ST_TO_ADDR
// end ;
37661: LD_VAR 0 7
37665: RET
// export function EnemyInRange ( unit , dist ) ; begin
37666: LD_INT 0
37668: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37669: LD_ADDR_VAR 0 3
37673: PUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 255
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 250
37693: PPUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: CALL_OW 251
37703: PPUSH
37704: LD_VAR 0 2
37708: PPUSH
37709: CALL 11039 0 4
37713: PUSH
37714: LD_INT 4
37716: ARRAY
37717: ST_TO_ADDR
// end ;
37718: LD_VAR 0 3
37722: RET
// export function PlayerSeeMe ( unit ) ; begin
37723: LD_INT 0
37725: PPUSH
// result := See ( your_side , unit ) ;
37726: LD_ADDR_VAR 0 2
37730: PUSH
37731: LD_OWVAR 2
37735: PPUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: CALL_OW 292
37745: ST_TO_ADDR
// end ;
37746: LD_VAR 0 2
37750: RET
// export function ReverseDir ( unit ) ; begin
37751: LD_INT 0
37753: PPUSH
// if not unit then
37754: LD_VAR 0 1
37758: NOT
37759: IFFALSE 37763
// exit ;
37761: GO 37786
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37763: LD_ADDR_VAR 0 2
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 254
37777: PUSH
37778: LD_INT 3
37780: PLUS
37781: PUSH
37782: LD_INT 6
37784: MOD
37785: ST_TO_ADDR
// end ;
37786: LD_VAR 0 2
37790: RET
// export function ReverseArray ( array ) ; var i ; begin
37791: LD_INT 0
37793: PPUSH
37794: PPUSH
// if not array then
37795: LD_VAR 0 1
37799: NOT
37800: IFFALSE 37804
// exit ;
37802: GO 37859
// result := [ ] ;
37804: LD_ADDR_VAR 0 2
37808: PUSH
37809: EMPTY
37810: ST_TO_ADDR
// for i := array downto 1 do
37811: LD_ADDR_VAR 0 3
37815: PUSH
37816: DOUBLE
37817: LD_VAR 0 1
37821: INC
37822: ST_TO_ADDR
37823: LD_INT 1
37825: PUSH
37826: FOR_DOWNTO
37827: IFFALSE 37857
// result := Join ( result , array [ i ] ) ;
37829: LD_ADDR_VAR 0 2
37833: PUSH
37834: LD_VAR 0 2
37838: PPUSH
37839: LD_VAR 0 1
37843: PUSH
37844: LD_VAR 0 3
37848: ARRAY
37849: PPUSH
37850: CALL 42524 0 2
37854: ST_TO_ADDR
37855: GO 37826
37857: POP
37858: POP
// end ;
37859: LD_VAR 0 2
37863: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37864: LD_INT 0
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
// if not unit or not hexes then
37872: LD_VAR 0 1
37876: NOT
37877: PUSH
37878: LD_VAR 0 2
37882: NOT
37883: OR
37884: IFFALSE 37888
// exit ;
37886: GO 38011
// dist := 9999 ;
37888: LD_ADDR_VAR 0 5
37892: PUSH
37893: LD_INT 9999
37895: ST_TO_ADDR
// for i = 1 to hexes do
37896: LD_ADDR_VAR 0 4
37900: PUSH
37901: DOUBLE
37902: LD_INT 1
37904: DEC
37905: ST_TO_ADDR
37906: LD_VAR 0 2
37910: PUSH
37911: FOR_TO
37912: IFFALSE 37999
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37914: LD_ADDR_VAR 0 6
37918: PUSH
37919: LD_VAR 0 1
37923: PPUSH
37924: LD_VAR 0 2
37928: PUSH
37929: LD_VAR 0 4
37933: ARRAY
37934: PUSH
37935: LD_INT 1
37937: ARRAY
37938: PPUSH
37939: LD_VAR 0 2
37943: PUSH
37944: LD_VAR 0 4
37948: ARRAY
37949: PUSH
37950: LD_INT 2
37952: ARRAY
37953: PPUSH
37954: CALL_OW 297
37958: ST_TO_ADDR
// if tdist < dist then
37959: LD_VAR 0 6
37963: PUSH
37964: LD_VAR 0 5
37968: LESS
37969: IFFALSE 37997
// begin hex := hexes [ i ] ;
37971: LD_ADDR_VAR 0 8
37975: PUSH
37976: LD_VAR 0 2
37980: PUSH
37981: LD_VAR 0 4
37985: ARRAY
37986: ST_TO_ADDR
// dist := tdist ;
37987: LD_ADDR_VAR 0 5
37991: PUSH
37992: LD_VAR 0 6
37996: ST_TO_ADDR
// end ; end ;
37997: GO 37911
37999: POP
38000: POP
// result := hex ;
38001: LD_ADDR_VAR 0 3
38005: PUSH
38006: LD_VAR 0 8
38010: ST_TO_ADDR
// end ;
38011: LD_VAR 0 3
38015: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
38016: LD_INT 0
38018: PPUSH
38019: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38020: LD_VAR 0 1
38024: NOT
38025: PUSH
38026: LD_VAR 0 1
38030: PUSH
38031: LD_INT 21
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 23
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PPUSH
38055: CALL_OW 69
38059: IN
38060: NOT
38061: OR
38062: IFFALSE 38066
// exit ;
38064: GO 38113
// for i = 1 to 3 do
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: DOUBLE
38072: LD_INT 1
38074: DEC
38075: ST_TO_ADDR
38076: LD_INT 3
38078: PUSH
38079: FOR_TO
38080: IFFALSE 38111
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38082: LD_VAR 0 1
38086: PPUSH
38087: CALL_OW 250
38091: PPUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 251
38101: PPUSH
38102: LD_INT 1
38104: PPUSH
38105: CALL_OW 453
38109: GO 38079
38111: POP
38112: POP
// end ;
38113: LD_VAR 0 2
38117: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38118: LD_INT 0
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
// if not unit or not enemy_unit then
38126: LD_VAR 0 1
38130: NOT
38131: PUSH
38132: LD_VAR 0 2
38136: NOT
38137: OR
38138: IFFALSE 38142
// exit ;
38140: GO 38609
// if GetLives ( i ) < 250 then
38142: LD_VAR 0 4
38146: PPUSH
38147: CALL_OW 256
38151: PUSH
38152: LD_INT 250
38154: LESS
38155: IFFALSE 38168
// begin ComAutodestruct ( i ) ;
38157: LD_VAR 0 4
38161: PPUSH
38162: CALL 38016 0 1
// exit ;
38166: GO 38609
// end ; x := GetX ( enemy_unit ) ;
38168: LD_ADDR_VAR 0 7
38172: PUSH
38173: LD_VAR 0 2
38177: PPUSH
38178: CALL_OW 250
38182: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38183: LD_ADDR_VAR 0 8
38187: PUSH
38188: LD_VAR 0 2
38192: PPUSH
38193: CALL_OW 251
38197: ST_TO_ADDR
// if not x or not y then
38198: LD_VAR 0 7
38202: NOT
38203: PUSH
38204: LD_VAR 0 8
38208: NOT
38209: OR
38210: IFFALSE 38214
// exit ;
38212: GO 38609
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38214: LD_ADDR_VAR 0 6
38218: PUSH
38219: LD_VAR 0 7
38223: PPUSH
38224: LD_INT 0
38226: PPUSH
38227: LD_INT 4
38229: PPUSH
38230: CALL_OW 272
38234: PUSH
38235: LD_VAR 0 8
38239: PPUSH
38240: LD_INT 0
38242: PPUSH
38243: LD_INT 4
38245: PPUSH
38246: CALL_OW 273
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_VAR 0 7
38259: PPUSH
38260: LD_INT 1
38262: PPUSH
38263: LD_INT 4
38265: PPUSH
38266: CALL_OW 272
38270: PUSH
38271: LD_VAR 0 8
38275: PPUSH
38276: LD_INT 1
38278: PPUSH
38279: LD_INT 4
38281: PPUSH
38282: CALL_OW 273
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_VAR 0 7
38295: PPUSH
38296: LD_INT 2
38298: PPUSH
38299: LD_INT 4
38301: PPUSH
38302: CALL_OW 272
38306: PUSH
38307: LD_VAR 0 8
38311: PPUSH
38312: LD_INT 2
38314: PPUSH
38315: LD_INT 4
38317: PPUSH
38318: CALL_OW 273
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_VAR 0 7
38331: PPUSH
38332: LD_INT 3
38334: PPUSH
38335: LD_INT 4
38337: PPUSH
38338: CALL_OW 272
38342: PUSH
38343: LD_VAR 0 8
38347: PPUSH
38348: LD_INT 3
38350: PPUSH
38351: LD_INT 4
38353: PPUSH
38354: CALL_OW 273
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_VAR 0 7
38367: PPUSH
38368: LD_INT 4
38370: PPUSH
38371: LD_INT 4
38373: PPUSH
38374: CALL_OW 272
38378: PUSH
38379: LD_VAR 0 8
38383: PPUSH
38384: LD_INT 4
38386: PPUSH
38387: LD_INT 4
38389: PPUSH
38390: CALL_OW 273
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_VAR 0 7
38403: PPUSH
38404: LD_INT 5
38406: PPUSH
38407: LD_INT 4
38409: PPUSH
38410: CALL_OW 272
38414: PUSH
38415: LD_VAR 0 8
38419: PPUSH
38420: LD_INT 5
38422: PPUSH
38423: LD_INT 4
38425: PPUSH
38426: CALL_OW 273
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// for i = tmp downto 1 do
38443: LD_ADDR_VAR 0 4
38447: PUSH
38448: DOUBLE
38449: LD_VAR 0 6
38453: INC
38454: ST_TO_ADDR
38455: LD_INT 1
38457: PUSH
38458: FOR_DOWNTO
38459: IFFALSE 38560
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38461: LD_VAR 0 6
38465: PUSH
38466: LD_VAR 0 4
38470: ARRAY
38471: PUSH
38472: LD_INT 1
38474: ARRAY
38475: PPUSH
38476: LD_VAR 0 6
38480: PUSH
38481: LD_VAR 0 4
38485: ARRAY
38486: PUSH
38487: LD_INT 2
38489: ARRAY
38490: PPUSH
38491: CALL_OW 488
38495: NOT
38496: PUSH
38497: LD_VAR 0 6
38501: PUSH
38502: LD_VAR 0 4
38506: ARRAY
38507: PUSH
38508: LD_INT 1
38510: ARRAY
38511: PPUSH
38512: LD_VAR 0 6
38516: PUSH
38517: LD_VAR 0 4
38521: ARRAY
38522: PUSH
38523: LD_INT 2
38525: ARRAY
38526: PPUSH
38527: CALL_OW 428
38531: PUSH
38532: LD_INT 0
38534: NONEQUAL
38535: OR
38536: IFFALSE 38558
// tmp := Delete ( tmp , i ) ;
38538: LD_ADDR_VAR 0 6
38542: PUSH
38543: LD_VAR 0 6
38547: PPUSH
38548: LD_VAR 0 4
38552: PPUSH
38553: CALL_OW 3
38557: ST_TO_ADDR
38558: GO 38458
38560: POP
38561: POP
// j := GetClosestHex ( unit , tmp ) ;
38562: LD_ADDR_VAR 0 5
38566: PUSH
38567: LD_VAR 0 1
38571: PPUSH
38572: LD_VAR 0 6
38576: PPUSH
38577: CALL 37864 0 2
38581: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38582: LD_VAR 0 1
38586: PPUSH
38587: LD_VAR 0 5
38591: PUSH
38592: LD_INT 1
38594: ARRAY
38595: PPUSH
38596: LD_VAR 0 5
38600: PUSH
38601: LD_INT 2
38603: ARRAY
38604: PPUSH
38605: CALL_OW 111
// end ;
38609: LD_VAR 0 3
38613: RET
// export function PrepareApemanSoldier ( ) ; begin
38614: LD_INT 0
38616: PPUSH
// uc_nation := 0 ;
38617: LD_ADDR_OWVAR 21
38621: PUSH
38622: LD_INT 0
38624: ST_TO_ADDR
// hc_sex := sex_male ;
38625: LD_ADDR_OWVAR 27
38629: PUSH
38630: LD_INT 1
38632: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38633: LD_ADDR_OWVAR 28
38637: PUSH
38638: LD_INT 15
38640: ST_TO_ADDR
// hc_gallery :=  ;
38641: LD_ADDR_OWVAR 33
38645: PUSH
38646: LD_STRING 
38648: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38649: LD_ADDR_OWVAR 31
38653: PUSH
38654: LD_INT 0
38656: PPUSH
38657: LD_INT 3
38659: PPUSH
38660: CALL_OW 12
38664: PUSH
38665: LD_INT 0
38667: PPUSH
38668: LD_INT 3
38670: PPUSH
38671: CALL_OW 12
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: ST_TO_ADDR
// end ;
38688: LD_VAR 0 1
38692: RET
// export function PrepareApemanEngineer ( ) ; begin
38693: LD_INT 0
38695: PPUSH
// uc_nation := 0 ;
38696: LD_ADDR_OWVAR 21
38700: PUSH
38701: LD_INT 0
38703: ST_TO_ADDR
// hc_sex := sex_male ;
38704: LD_ADDR_OWVAR 27
38708: PUSH
38709: LD_INT 1
38711: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38712: LD_ADDR_OWVAR 28
38716: PUSH
38717: LD_INT 16
38719: ST_TO_ADDR
// hc_gallery :=  ;
38720: LD_ADDR_OWVAR 33
38724: PUSH
38725: LD_STRING 
38727: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38728: LD_ADDR_OWVAR 31
38732: PUSH
38733: LD_INT 0
38735: PPUSH
38736: LD_INT 3
38738: PPUSH
38739: CALL_OW 12
38743: PUSH
38744: LD_INT 0
38746: PPUSH
38747: LD_INT 3
38749: PPUSH
38750: CALL_OW 12
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: ST_TO_ADDR
// end ;
38767: LD_VAR 0 1
38771: RET
// export function PrepareApeman ( agressivity ) ; begin
38772: LD_INT 0
38774: PPUSH
// uc_side := 0 ;
38775: LD_ADDR_OWVAR 20
38779: PUSH
38780: LD_INT 0
38782: ST_TO_ADDR
// uc_nation := 0 ;
38783: LD_ADDR_OWVAR 21
38787: PUSH
38788: LD_INT 0
38790: ST_TO_ADDR
// hc_sex := sex_male ;
38791: LD_ADDR_OWVAR 27
38795: PUSH
38796: LD_INT 1
38798: ST_TO_ADDR
// hc_class := class_apeman ;
38799: LD_ADDR_OWVAR 28
38803: PUSH
38804: LD_INT 12
38806: ST_TO_ADDR
// hc_gallery :=  ;
38807: LD_ADDR_OWVAR 33
38811: PUSH
38812: LD_STRING 
38814: ST_TO_ADDR
// if agressivity = 0 then
38815: LD_VAR 0 1
38819: PUSH
38820: LD_INT 0
38822: EQUAL
38823: IFFALSE 38835
// hc_agressivity := 0 else
38825: LD_ADDR_OWVAR 35
38829: PUSH
38830: LD_INT 0
38832: ST_TO_ADDR
38833: GO 38856
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38835: LD_ADDR_OWVAR 35
38839: PUSH
38840: LD_VAR 0 1
38844: NEG
38845: PPUSH
38846: LD_VAR 0 1
38850: PPUSH
38851: CALL_OW 12
38855: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38856: LD_ADDR_OWVAR 31
38860: PUSH
38861: LD_INT 0
38863: PPUSH
38864: LD_INT 3
38866: PPUSH
38867: CALL_OW 12
38871: PUSH
38872: LD_INT 0
38874: PPUSH
38875: LD_INT 3
38877: PPUSH
38878: CALL_OW 12
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: ST_TO_ADDR
// end ;
38895: LD_VAR 0 2
38899: RET
// export function PrepareTiger ( agressivity ) ; begin
38900: LD_INT 0
38902: PPUSH
// uc_side := 0 ;
38903: LD_ADDR_OWVAR 20
38907: PUSH
38908: LD_INT 0
38910: ST_TO_ADDR
// uc_nation := 0 ;
38911: LD_ADDR_OWVAR 21
38915: PUSH
38916: LD_INT 0
38918: ST_TO_ADDR
// hc_class := class_tiger ;
38919: LD_ADDR_OWVAR 28
38923: PUSH
38924: LD_INT 14
38926: ST_TO_ADDR
// hc_gallery :=  ;
38927: LD_ADDR_OWVAR 33
38931: PUSH
38932: LD_STRING 
38934: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38935: LD_ADDR_OWVAR 35
38939: PUSH
38940: LD_VAR 0 1
38944: NEG
38945: PPUSH
38946: LD_VAR 0 1
38950: PPUSH
38951: CALL_OW 12
38955: ST_TO_ADDR
// end ;
38956: LD_VAR 0 2
38960: RET
// export function PrepareEnchidna ( ) ; begin
38961: LD_INT 0
38963: PPUSH
// uc_side := 0 ;
38964: LD_ADDR_OWVAR 20
38968: PUSH
38969: LD_INT 0
38971: ST_TO_ADDR
// uc_nation := 0 ;
38972: LD_ADDR_OWVAR 21
38976: PUSH
38977: LD_INT 0
38979: ST_TO_ADDR
// hc_class := class_baggie ;
38980: LD_ADDR_OWVAR 28
38984: PUSH
38985: LD_INT 13
38987: ST_TO_ADDR
// hc_gallery :=  ;
38988: LD_ADDR_OWVAR 33
38992: PUSH
38993: LD_STRING 
38995: ST_TO_ADDR
// end ;
38996: LD_VAR 0 1
39000: RET
// export function PrepareFrog ( ) ; begin
39001: LD_INT 0
39003: PPUSH
// uc_side := 0 ;
39004: LD_ADDR_OWVAR 20
39008: PUSH
39009: LD_INT 0
39011: ST_TO_ADDR
// uc_nation := 0 ;
39012: LD_ADDR_OWVAR 21
39016: PUSH
39017: LD_INT 0
39019: ST_TO_ADDR
// hc_class := class_frog ;
39020: LD_ADDR_OWVAR 28
39024: PUSH
39025: LD_INT 19
39027: ST_TO_ADDR
// hc_gallery :=  ;
39028: LD_ADDR_OWVAR 33
39032: PUSH
39033: LD_STRING 
39035: ST_TO_ADDR
// end ;
39036: LD_VAR 0 1
39040: RET
// export function PrepareFish ( ) ; begin
39041: LD_INT 0
39043: PPUSH
// uc_side := 0 ;
39044: LD_ADDR_OWVAR 20
39048: PUSH
39049: LD_INT 0
39051: ST_TO_ADDR
// uc_nation := 0 ;
39052: LD_ADDR_OWVAR 21
39056: PUSH
39057: LD_INT 0
39059: ST_TO_ADDR
// hc_class := class_fish ;
39060: LD_ADDR_OWVAR 28
39064: PUSH
39065: LD_INT 20
39067: ST_TO_ADDR
// hc_gallery :=  ;
39068: LD_ADDR_OWVAR 33
39072: PUSH
39073: LD_STRING 
39075: ST_TO_ADDR
// end ;
39076: LD_VAR 0 1
39080: RET
// export function PrepareBird ( ) ; begin
39081: LD_INT 0
39083: PPUSH
// uc_side := 0 ;
39084: LD_ADDR_OWVAR 20
39088: PUSH
39089: LD_INT 0
39091: ST_TO_ADDR
// uc_nation := 0 ;
39092: LD_ADDR_OWVAR 21
39096: PUSH
39097: LD_INT 0
39099: ST_TO_ADDR
// hc_class := class_phororhacos ;
39100: LD_ADDR_OWVAR 28
39104: PUSH
39105: LD_INT 18
39107: ST_TO_ADDR
// hc_gallery :=  ;
39108: LD_ADDR_OWVAR 33
39112: PUSH
39113: LD_STRING 
39115: ST_TO_ADDR
// end ;
39116: LD_VAR 0 1
39120: RET
// export function PrepareHorse ( ) ; begin
39121: LD_INT 0
39123: PPUSH
// uc_side := 0 ;
39124: LD_ADDR_OWVAR 20
39128: PUSH
39129: LD_INT 0
39131: ST_TO_ADDR
// uc_nation := 0 ;
39132: LD_ADDR_OWVAR 21
39136: PUSH
39137: LD_INT 0
39139: ST_TO_ADDR
// hc_class := class_horse ;
39140: LD_ADDR_OWVAR 28
39144: PUSH
39145: LD_INT 21
39147: ST_TO_ADDR
// hc_gallery :=  ;
39148: LD_ADDR_OWVAR 33
39152: PUSH
39153: LD_STRING 
39155: ST_TO_ADDR
// end ;
39156: LD_VAR 0 1
39160: RET
// export function PrepareMastodont ( ) ; begin
39161: LD_INT 0
39163: PPUSH
// uc_side := 0 ;
39164: LD_ADDR_OWVAR 20
39168: PUSH
39169: LD_INT 0
39171: ST_TO_ADDR
// uc_nation := 0 ;
39172: LD_ADDR_OWVAR 21
39176: PUSH
39177: LD_INT 0
39179: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39180: LD_ADDR_OWVAR 37
39184: PUSH
39185: LD_INT 31
39187: ST_TO_ADDR
// vc_control := control_rider ;
39188: LD_ADDR_OWVAR 38
39192: PUSH
39193: LD_INT 4
39195: ST_TO_ADDR
// end ;
39196: LD_VAR 0 1
39200: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39201: LD_INT 0
39203: PPUSH
39204: PPUSH
39205: PPUSH
// uc_side = 0 ;
39206: LD_ADDR_OWVAR 20
39210: PUSH
39211: LD_INT 0
39213: ST_TO_ADDR
// uc_nation = 0 ;
39214: LD_ADDR_OWVAR 21
39218: PUSH
39219: LD_INT 0
39221: ST_TO_ADDR
// InitHc_All ( ) ;
39222: CALL_OW 584
// InitVc ;
39226: CALL_OW 20
// if mastodonts then
39230: LD_VAR 0 6
39234: IFFALSE 39301
// for i = 1 to mastodonts do
39236: LD_ADDR_VAR 0 11
39240: PUSH
39241: DOUBLE
39242: LD_INT 1
39244: DEC
39245: ST_TO_ADDR
39246: LD_VAR 0 6
39250: PUSH
39251: FOR_TO
39252: IFFALSE 39299
// begin vc_chassis := 31 ;
39254: LD_ADDR_OWVAR 37
39258: PUSH
39259: LD_INT 31
39261: ST_TO_ADDR
// vc_control := control_rider ;
39262: LD_ADDR_OWVAR 38
39266: PUSH
39267: LD_INT 4
39269: ST_TO_ADDR
// animal := CreateVehicle ;
39270: LD_ADDR_VAR 0 12
39274: PUSH
39275: CALL_OW 45
39279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39280: LD_VAR 0 12
39284: PPUSH
39285: LD_VAR 0 8
39289: PPUSH
39290: LD_INT 0
39292: PPUSH
39293: CALL 41429 0 3
// end ;
39297: GO 39251
39299: POP
39300: POP
// if horses then
39301: LD_VAR 0 5
39305: IFFALSE 39372
// for i = 1 to horses do
39307: LD_ADDR_VAR 0 11
39311: PUSH
39312: DOUBLE
39313: LD_INT 1
39315: DEC
39316: ST_TO_ADDR
39317: LD_VAR 0 5
39321: PUSH
39322: FOR_TO
39323: IFFALSE 39370
// begin hc_class := 21 ;
39325: LD_ADDR_OWVAR 28
39329: PUSH
39330: LD_INT 21
39332: ST_TO_ADDR
// hc_gallery :=  ;
39333: LD_ADDR_OWVAR 33
39337: PUSH
39338: LD_STRING 
39340: ST_TO_ADDR
// animal := CreateHuman ;
39341: LD_ADDR_VAR 0 12
39345: PUSH
39346: CALL_OW 44
39350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39351: LD_VAR 0 12
39355: PPUSH
39356: LD_VAR 0 8
39360: PPUSH
39361: LD_INT 0
39363: PPUSH
39364: CALL 41429 0 3
// end ;
39368: GO 39322
39370: POP
39371: POP
// if birds then
39372: LD_VAR 0 1
39376: IFFALSE 39443
// for i = 1 to birds do
39378: LD_ADDR_VAR 0 11
39382: PUSH
39383: DOUBLE
39384: LD_INT 1
39386: DEC
39387: ST_TO_ADDR
39388: LD_VAR 0 1
39392: PUSH
39393: FOR_TO
39394: IFFALSE 39441
// begin hc_class := 18 ;
39396: LD_ADDR_OWVAR 28
39400: PUSH
39401: LD_INT 18
39403: ST_TO_ADDR
// hc_gallery =  ;
39404: LD_ADDR_OWVAR 33
39408: PUSH
39409: LD_STRING 
39411: ST_TO_ADDR
// animal := CreateHuman ;
39412: LD_ADDR_VAR 0 12
39416: PUSH
39417: CALL_OW 44
39421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39422: LD_VAR 0 12
39426: PPUSH
39427: LD_VAR 0 8
39431: PPUSH
39432: LD_INT 0
39434: PPUSH
39435: CALL 41429 0 3
// end ;
39439: GO 39393
39441: POP
39442: POP
// if tigers then
39443: LD_VAR 0 2
39447: IFFALSE 39531
// for i = 1 to tigers do
39449: LD_ADDR_VAR 0 11
39453: PUSH
39454: DOUBLE
39455: LD_INT 1
39457: DEC
39458: ST_TO_ADDR
39459: LD_VAR 0 2
39463: PUSH
39464: FOR_TO
39465: IFFALSE 39529
// begin hc_class = class_tiger ;
39467: LD_ADDR_OWVAR 28
39471: PUSH
39472: LD_INT 14
39474: ST_TO_ADDR
// hc_gallery =  ;
39475: LD_ADDR_OWVAR 33
39479: PUSH
39480: LD_STRING 
39482: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39483: LD_ADDR_OWVAR 35
39487: PUSH
39488: LD_INT 7
39490: NEG
39491: PPUSH
39492: LD_INT 7
39494: PPUSH
39495: CALL_OW 12
39499: ST_TO_ADDR
// animal := CreateHuman ;
39500: LD_ADDR_VAR 0 12
39504: PUSH
39505: CALL_OW 44
39509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39510: LD_VAR 0 12
39514: PPUSH
39515: LD_VAR 0 8
39519: PPUSH
39520: LD_INT 0
39522: PPUSH
39523: CALL 41429 0 3
// end ;
39527: GO 39464
39529: POP
39530: POP
// if apemans then
39531: LD_VAR 0 3
39535: IFFALSE 39658
// for i = 1 to apemans do
39537: LD_ADDR_VAR 0 11
39541: PUSH
39542: DOUBLE
39543: LD_INT 1
39545: DEC
39546: ST_TO_ADDR
39547: LD_VAR 0 3
39551: PUSH
39552: FOR_TO
39553: IFFALSE 39656
// begin hc_class = class_apeman ;
39555: LD_ADDR_OWVAR 28
39559: PUSH
39560: LD_INT 12
39562: ST_TO_ADDR
// hc_gallery =  ;
39563: LD_ADDR_OWVAR 33
39567: PUSH
39568: LD_STRING 
39570: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39571: LD_ADDR_OWVAR 35
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PPUSH
39580: LD_INT 2
39582: PPUSH
39583: CALL_OW 12
39587: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39588: LD_ADDR_OWVAR 31
39592: PUSH
39593: LD_INT 1
39595: PPUSH
39596: LD_INT 3
39598: PPUSH
39599: CALL_OW 12
39603: PUSH
39604: LD_INT 1
39606: PPUSH
39607: LD_INT 3
39609: PPUSH
39610: CALL_OW 12
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: ST_TO_ADDR
// animal := CreateHuman ;
39627: LD_ADDR_VAR 0 12
39631: PUSH
39632: CALL_OW 44
39636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39637: LD_VAR 0 12
39641: PPUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: LD_INT 0
39649: PPUSH
39650: CALL 41429 0 3
// end ;
39654: GO 39552
39656: POP
39657: POP
// if enchidnas then
39658: LD_VAR 0 4
39662: IFFALSE 39729
// for i = 1 to enchidnas do
39664: LD_ADDR_VAR 0 11
39668: PUSH
39669: DOUBLE
39670: LD_INT 1
39672: DEC
39673: ST_TO_ADDR
39674: LD_VAR 0 4
39678: PUSH
39679: FOR_TO
39680: IFFALSE 39727
// begin hc_class = 13 ;
39682: LD_ADDR_OWVAR 28
39686: PUSH
39687: LD_INT 13
39689: ST_TO_ADDR
// hc_gallery =  ;
39690: LD_ADDR_OWVAR 33
39694: PUSH
39695: LD_STRING 
39697: ST_TO_ADDR
// animal := CreateHuman ;
39698: LD_ADDR_VAR 0 12
39702: PUSH
39703: CALL_OW 44
39707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39708: LD_VAR 0 12
39712: PPUSH
39713: LD_VAR 0 8
39717: PPUSH
39718: LD_INT 0
39720: PPUSH
39721: CALL 41429 0 3
// end ;
39725: GO 39679
39727: POP
39728: POP
// if fishes then
39729: LD_VAR 0 7
39733: IFFALSE 39800
// for i = 1 to fishes do
39735: LD_ADDR_VAR 0 11
39739: PUSH
39740: DOUBLE
39741: LD_INT 1
39743: DEC
39744: ST_TO_ADDR
39745: LD_VAR 0 7
39749: PUSH
39750: FOR_TO
39751: IFFALSE 39798
// begin hc_class = 20 ;
39753: LD_ADDR_OWVAR 28
39757: PUSH
39758: LD_INT 20
39760: ST_TO_ADDR
// hc_gallery =  ;
39761: LD_ADDR_OWVAR 33
39765: PUSH
39766: LD_STRING 
39768: ST_TO_ADDR
// animal := CreateHuman ;
39769: LD_ADDR_VAR 0 12
39773: PUSH
39774: CALL_OW 44
39778: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39779: LD_VAR 0 12
39783: PPUSH
39784: LD_VAR 0 9
39788: PPUSH
39789: LD_INT 0
39791: PPUSH
39792: CALL 41429 0 3
// end ;
39796: GO 39750
39798: POP
39799: POP
// end ;
39800: LD_VAR 0 10
39804: RET
// export function WantHeal ( sci , unit ) ; begin
39805: LD_INT 0
39807: PPUSH
// if GetTaskList ( sci ) > 0 then
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 437
39817: PUSH
39818: LD_INT 0
39820: GREATER
39821: IFFALSE 39891
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39823: LD_VAR 0 1
39827: PPUSH
39828: CALL_OW 437
39832: PUSH
39833: LD_INT 1
39835: ARRAY
39836: PUSH
39837: LD_INT 1
39839: ARRAY
39840: PUSH
39841: LD_STRING l
39843: EQUAL
39844: PUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 437
39854: PUSH
39855: LD_INT 1
39857: ARRAY
39858: PUSH
39859: LD_INT 4
39861: ARRAY
39862: PUSH
39863: LD_VAR 0 2
39867: EQUAL
39868: AND
39869: IFFALSE 39881
// result := true else
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_INT 1
39878: ST_TO_ADDR
39879: GO 39889
// result := false ;
39881: LD_ADDR_VAR 0 3
39885: PUSH
39886: LD_INT 0
39888: ST_TO_ADDR
// end else
39889: GO 39899
// result := false ;
39891: LD_ADDR_VAR 0 3
39895: PUSH
39896: LD_INT 0
39898: ST_TO_ADDR
// end ;
39899: LD_VAR 0 3
39903: RET
// export function HealTarget ( sci ) ; begin
39904: LD_INT 0
39906: PPUSH
// if not sci then
39907: LD_VAR 0 1
39911: NOT
39912: IFFALSE 39916
// exit ;
39914: GO 39981
// result := 0 ;
39916: LD_ADDR_VAR 0 2
39920: PUSH
39921: LD_INT 0
39923: ST_TO_ADDR
// if GetTaskList ( sci ) then
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 437
39933: IFFALSE 39981
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 437
39944: PUSH
39945: LD_INT 1
39947: ARRAY
39948: PUSH
39949: LD_INT 1
39951: ARRAY
39952: PUSH
39953: LD_STRING l
39955: EQUAL
39956: IFFALSE 39981
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39958: LD_ADDR_VAR 0 2
39962: PUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL_OW 437
39972: PUSH
39973: LD_INT 1
39975: ARRAY
39976: PUSH
39977: LD_INT 4
39979: ARRAY
39980: ST_TO_ADDR
// end ;
39981: LD_VAR 0 2
39985: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39986: LD_INT 0
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
// if not base_units then
39992: LD_VAR 0 1
39996: NOT
39997: IFFALSE 40001
// exit ;
39999: GO 40088
// result := false ;
40001: LD_ADDR_VAR 0 2
40005: PUSH
40006: LD_INT 0
40008: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
40009: LD_ADDR_VAR 0 5
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: LD_INT 21
40021: PUSH
40022: LD_INT 3
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PPUSH
40029: CALL_OW 72
40033: ST_TO_ADDR
// if not tmp then
40034: LD_VAR 0 5
40038: NOT
40039: IFFALSE 40043
// exit ;
40041: GO 40088
// for i in tmp do
40043: LD_ADDR_VAR 0 3
40047: PUSH
40048: LD_VAR 0 5
40052: PUSH
40053: FOR_IN
40054: IFFALSE 40086
// begin result := EnemyInRange ( i , 22 ) ;
40056: LD_ADDR_VAR 0 2
40060: PUSH
40061: LD_VAR 0 3
40065: PPUSH
40066: LD_INT 22
40068: PPUSH
40069: CALL 37666 0 2
40073: ST_TO_ADDR
// if result then
40074: LD_VAR 0 2
40078: IFFALSE 40084
// exit ;
40080: POP
40081: POP
40082: GO 40088
// end ;
40084: GO 40053
40086: POP
40087: POP
// end ;
40088: LD_VAR 0 2
40092: RET
// export function FilterByTag ( units , tag ) ; begin
40093: LD_INT 0
40095: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_VAR 0 1
40105: PPUSH
40106: LD_INT 120
40108: PUSH
40109: LD_VAR 0 2
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PPUSH
40118: CALL_OW 72
40122: ST_TO_ADDR
// end ;
40123: LD_VAR 0 3
40127: RET
// export function IsDriver ( un ) ; begin
40128: LD_INT 0
40130: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40131: LD_ADDR_VAR 0 2
40135: PUSH
40136: LD_VAR 0 1
40140: PUSH
40141: LD_INT 55
40143: PUSH
40144: EMPTY
40145: LIST
40146: PPUSH
40147: CALL_OW 69
40151: IN
40152: ST_TO_ADDR
// end ;
40153: LD_VAR 0 2
40157: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40158: LD_INT 0
40160: PPUSH
40161: PPUSH
// list := [ ] ;
40162: LD_ADDR_VAR 0 5
40166: PUSH
40167: EMPTY
40168: ST_TO_ADDR
// case d of 0 :
40169: LD_VAR 0 3
40173: PUSH
40174: LD_INT 0
40176: DOUBLE
40177: EQUAL
40178: IFTRUE 40182
40180: GO 40315
40182: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40183: LD_ADDR_VAR 0 5
40187: PUSH
40188: LD_VAR 0 1
40192: PUSH
40193: LD_INT 4
40195: MINUS
40196: PUSH
40197: LD_VAR 0 2
40201: PUSH
40202: LD_INT 4
40204: MINUS
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: PUSH
40214: LD_VAR 0 1
40218: PUSH
40219: LD_INT 3
40221: MINUS
40222: PUSH
40223: LD_VAR 0 2
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: PUSH
40236: LD_VAR 0 1
40240: PUSH
40241: LD_INT 4
40243: PLUS
40244: PUSH
40245: LD_VAR 0 2
40249: PUSH
40250: LD_INT 4
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: PUSH
40258: LD_VAR 0 1
40262: PUSH
40263: LD_INT 3
40265: PLUS
40266: PUSH
40267: LD_VAR 0 2
40271: PUSH
40272: LD_INT 3
40274: PLUS
40275: PUSH
40276: LD_INT 5
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: PUSH
40284: LD_VAR 0 1
40288: PUSH
40289: LD_VAR 0 2
40293: PUSH
40294: LD_INT 4
40296: PLUS
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
// end ; 1 :
40313: GO 41013
40315: LD_INT 1
40317: DOUBLE
40318: EQUAL
40319: IFTRUE 40323
40321: GO 40456
40323: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40324: LD_ADDR_VAR 0 5
40328: PUSH
40329: LD_VAR 0 1
40333: PUSH
40334: LD_VAR 0 2
40338: PUSH
40339: LD_INT 4
40341: MINUS
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: PUSH
40351: LD_VAR 0 1
40355: PUSH
40356: LD_INT 3
40358: MINUS
40359: PUSH
40360: LD_VAR 0 2
40364: PUSH
40365: LD_INT 3
40367: MINUS
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: PUSH
40377: LD_VAR 0 1
40381: PUSH
40382: LD_INT 4
40384: MINUS
40385: PUSH
40386: LD_VAR 0 2
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: PUSH
40399: LD_VAR 0 1
40403: PUSH
40404: LD_VAR 0 2
40408: PUSH
40409: LD_INT 3
40411: PLUS
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: PUSH
40421: LD_VAR 0 1
40425: PUSH
40426: LD_INT 4
40428: PLUS
40429: PUSH
40430: LD_VAR 0 2
40434: PUSH
40435: LD_INT 4
40437: PLUS
40438: PUSH
40439: LD_INT 5
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// end ; 2 :
40454: GO 41013
40456: LD_INT 2
40458: DOUBLE
40459: EQUAL
40460: IFTRUE 40464
40462: GO 40593
40464: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40465: LD_ADDR_VAR 0 5
40469: PUSH
40470: LD_VAR 0 1
40474: PUSH
40475: LD_VAR 0 2
40479: PUSH
40480: LD_INT 3
40482: MINUS
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: PUSH
40492: LD_VAR 0 1
40496: PUSH
40497: LD_INT 4
40499: PLUS
40500: PUSH
40501: LD_VAR 0 2
40505: PUSH
40506: LD_INT 4
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: PUSH
40514: LD_VAR 0 1
40518: PUSH
40519: LD_VAR 0 2
40523: PUSH
40524: LD_INT 4
40526: PLUS
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: PUSH
40536: LD_VAR 0 1
40540: PUSH
40541: LD_INT 3
40543: MINUS
40544: PUSH
40545: LD_VAR 0 2
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: PUSH
40558: LD_VAR 0 1
40562: PUSH
40563: LD_INT 4
40565: MINUS
40566: PUSH
40567: LD_VAR 0 2
40571: PUSH
40572: LD_INT 4
40574: MINUS
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
// end ; 3 :
40591: GO 41013
40593: LD_INT 3
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40734
40601: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40602: LD_ADDR_VAR 0 5
40606: PUSH
40607: LD_VAR 0 1
40611: PUSH
40612: LD_INT 3
40614: PLUS
40615: PUSH
40616: LD_VAR 0 2
40620: PUSH
40621: LD_INT 4
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: PUSH
40629: LD_VAR 0 1
40633: PUSH
40634: LD_INT 4
40636: PLUS
40637: PUSH
40638: LD_VAR 0 2
40642: PUSH
40643: LD_INT 4
40645: PLUS
40646: PUSH
40647: LD_INT 5
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: LIST
40654: PUSH
40655: LD_VAR 0 1
40659: PUSH
40660: LD_INT 4
40662: MINUS
40663: PUSH
40664: LD_VAR 0 2
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: PUSH
40677: LD_VAR 0 1
40681: PUSH
40682: LD_VAR 0 2
40686: PUSH
40687: LD_INT 4
40689: MINUS
40690: PUSH
40691: LD_INT 3
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: PUSH
40699: LD_VAR 0 1
40703: PUSH
40704: LD_INT 3
40706: MINUS
40707: PUSH
40708: LD_VAR 0 2
40712: PUSH
40713: LD_INT 3
40715: MINUS
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
// end ; 4 :
40732: GO 41013
40734: LD_INT 4
40736: DOUBLE
40737: EQUAL
40738: IFTRUE 40742
40740: GO 40875
40742: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40743: LD_ADDR_VAR 0 5
40747: PUSH
40748: LD_VAR 0 1
40752: PUSH
40753: LD_VAR 0 2
40757: PUSH
40758: LD_INT 4
40760: PLUS
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: LD_VAR 0 1
40774: PUSH
40775: LD_INT 3
40777: PLUS
40778: PUSH
40779: LD_VAR 0 2
40783: PUSH
40784: LD_INT 3
40786: PLUS
40787: PUSH
40788: LD_INT 5
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: LIST
40795: PUSH
40796: LD_VAR 0 1
40800: PUSH
40801: LD_INT 4
40803: PLUS
40804: PUSH
40805: LD_VAR 0 2
40809: PUSH
40810: LD_INT 4
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: PUSH
40818: LD_VAR 0 1
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_INT 3
40830: MINUS
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: PUSH
40840: LD_VAR 0 1
40844: PUSH
40845: LD_INT 4
40847: MINUS
40848: PUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_INT 4
40856: MINUS
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: ST_TO_ADDR
// end ; 5 :
40873: GO 41013
40875: LD_INT 5
40877: DOUBLE
40878: EQUAL
40879: IFTRUE 40883
40881: GO 41012
40883: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40884: LD_ADDR_VAR 0 5
40888: PUSH
40889: LD_VAR 0 1
40893: PUSH
40894: LD_INT 4
40896: MINUS
40897: PUSH
40898: LD_VAR 0 2
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: PUSH
40911: LD_VAR 0 1
40915: PUSH
40916: LD_VAR 0 2
40920: PUSH
40921: LD_INT 4
40923: MINUS
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: LIST
40932: PUSH
40933: LD_VAR 0 1
40937: PUSH
40938: LD_INT 4
40940: PLUS
40941: PUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_INT 4
40949: PLUS
40950: PUSH
40951: LD_INT 5
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: PUSH
40959: LD_VAR 0 1
40963: PUSH
40964: LD_INT 3
40966: PLUS
40967: PUSH
40968: LD_VAR 0 2
40972: PUSH
40973: LD_INT 4
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: PUSH
40981: LD_VAR 0 1
40985: PUSH
40986: LD_VAR 0 2
40990: PUSH
40991: LD_INT 3
40993: PLUS
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: LIST
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: ST_TO_ADDR
// end ; end ;
41010: GO 41013
41012: POP
// result := list ;
41013: LD_ADDR_VAR 0 4
41017: PUSH
41018: LD_VAR 0 5
41022: ST_TO_ADDR
// end ;
41023: LD_VAR 0 4
41027: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
41028: LD_INT 0
41030: PPUSH
41031: PPUSH
41032: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
41033: LD_VAR 0 1
41037: NOT
41038: PUSH
41039: LD_VAR 0 2
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 3
41052: PUSH
41053: LD_INT 4
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: IN
41062: NOT
41063: OR
41064: IFFALSE 41068
// exit ;
41066: GO 41151
// tmp := [ ] ;
41068: LD_ADDR_VAR 0 5
41072: PUSH
41073: EMPTY
41074: ST_TO_ADDR
// for i in units do
41075: LD_ADDR_VAR 0 4
41079: PUSH
41080: LD_VAR 0 1
41084: PUSH
41085: FOR_IN
41086: IFFALSE 41120
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
41088: LD_ADDR_VAR 0 5
41092: PUSH
41093: LD_VAR 0 5
41097: PPUSH
41098: LD_VAR 0 4
41102: PPUSH
41103: LD_VAR 0 2
41107: PPUSH
41108: CALL_OW 259
41112: PPUSH
41113: CALL 42524 0 2
41117: ST_TO_ADDR
41118: GO 41085
41120: POP
41121: POP
// if not tmp then
41122: LD_VAR 0 5
41126: NOT
41127: IFFALSE 41131
// exit ;
41129: GO 41151
// result := SortListByListDesc ( units , tmp ) ;
41131: LD_ADDR_VAR 0 3
41135: PUSH
41136: LD_VAR 0 1
41140: PPUSH
41141: LD_VAR 0 5
41145: PPUSH
41146: CALL_OW 77
41150: ST_TO_ADDR
// end ;
41151: LD_VAR 0 3
41155: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41156: LD_INT 0
41158: PPUSH
41159: PPUSH
41160: PPUSH
// result := false ;
41161: LD_ADDR_VAR 0 3
41165: PUSH
41166: LD_INT 0
41168: ST_TO_ADDR
// if not building then
41169: LD_VAR 0 2
41173: NOT
41174: IFFALSE 41178
// exit ;
41176: GO 41316
// x := GetX ( building ) ;
41178: LD_ADDR_VAR 0 4
41182: PUSH
41183: LD_VAR 0 2
41187: PPUSH
41188: CALL_OW 250
41192: ST_TO_ADDR
// y := GetY ( building ) ;
41193: LD_ADDR_VAR 0 5
41197: PUSH
41198: LD_VAR 0 2
41202: PPUSH
41203: CALL_OW 251
41207: ST_TO_ADDR
// if not x or not y then
41208: LD_VAR 0 4
41212: NOT
41213: PUSH
41214: LD_VAR 0 5
41218: NOT
41219: OR
41220: IFFALSE 41224
// exit ;
41222: GO 41316
// if GetTaskList ( unit ) then
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 437
41233: IFFALSE 41316
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41235: LD_STRING e
41237: PUSH
41238: LD_VAR 0 1
41242: PPUSH
41243: CALL_OW 437
41247: PUSH
41248: LD_INT 1
41250: ARRAY
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: EQUAL
41256: PUSH
41257: LD_VAR 0 4
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 437
41271: PUSH
41272: LD_INT 1
41274: ARRAY
41275: PUSH
41276: LD_INT 2
41278: ARRAY
41279: EQUAL
41280: AND
41281: PUSH
41282: LD_VAR 0 5
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 437
41296: PUSH
41297: LD_INT 1
41299: ARRAY
41300: PUSH
41301: LD_INT 3
41303: ARRAY
41304: EQUAL
41305: AND
41306: IFFALSE 41316
// result := true end ;
41308: LD_ADDR_VAR 0 3
41312: PUSH
41313: LD_INT 1
41315: ST_TO_ADDR
// end ;
41316: LD_VAR 0 3
41320: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41321: LD_INT 0
41323: PPUSH
// result := false ;
41324: LD_ADDR_VAR 0 4
41328: PUSH
41329: LD_INT 0
41331: ST_TO_ADDR
// if GetTaskList ( unit ) then
41332: LD_VAR 0 1
41336: PPUSH
41337: CALL_OW 437
41341: IFFALSE 41424
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41343: LD_STRING M
41345: PUSH
41346: LD_VAR 0 1
41350: PPUSH
41351: CALL_OW 437
41355: PUSH
41356: LD_INT 1
41358: ARRAY
41359: PUSH
41360: LD_INT 1
41362: ARRAY
41363: EQUAL
41364: PUSH
41365: LD_VAR 0 2
41369: PUSH
41370: LD_VAR 0 1
41374: PPUSH
41375: CALL_OW 437
41379: PUSH
41380: LD_INT 1
41382: ARRAY
41383: PUSH
41384: LD_INT 2
41386: ARRAY
41387: EQUAL
41388: AND
41389: PUSH
41390: LD_VAR 0 3
41394: PUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: CALL_OW 437
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PUSH
41409: LD_INT 3
41411: ARRAY
41412: EQUAL
41413: AND
41414: IFFALSE 41424
// result := true ;
41416: LD_ADDR_VAR 0 4
41420: PUSH
41421: LD_INT 1
41423: ST_TO_ADDR
// end ; end ;
41424: LD_VAR 0 4
41428: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41429: LD_INT 0
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
// if not unit or not area then
41435: LD_VAR 0 1
41439: NOT
41440: PUSH
41441: LD_VAR 0 2
41445: NOT
41446: OR
41447: IFFALSE 41451
// exit ;
41449: GO 41627
// tmp := AreaToList ( area , i ) ;
41451: LD_ADDR_VAR 0 6
41455: PUSH
41456: LD_VAR 0 2
41460: PPUSH
41461: LD_VAR 0 5
41465: PPUSH
41466: CALL_OW 517
41470: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41471: LD_ADDR_VAR 0 5
41475: PUSH
41476: DOUBLE
41477: LD_INT 1
41479: DEC
41480: ST_TO_ADDR
41481: LD_VAR 0 6
41485: PUSH
41486: LD_INT 1
41488: ARRAY
41489: PUSH
41490: FOR_TO
41491: IFFALSE 41625
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41493: LD_ADDR_VAR 0 7
41497: PUSH
41498: LD_VAR 0 6
41502: PUSH
41503: LD_INT 1
41505: ARRAY
41506: PUSH
41507: LD_VAR 0 5
41511: ARRAY
41512: PUSH
41513: LD_VAR 0 6
41517: PUSH
41518: LD_INT 2
41520: ARRAY
41521: PUSH
41522: LD_VAR 0 5
41526: ARRAY
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
41532: LD_INT 92
41534: PUSH
41535: LD_VAR 0 7
41539: PUSH
41540: LD_INT 1
41542: ARRAY
41543: PUSH
41544: LD_VAR 0 7
41548: PUSH
41549: LD_INT 2
41551: ARRAY
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: PPUSH
41562: CALL_OW 69
41566: PUSH
41567: LD_INT 0
41569: EQUAL
41570: IFFALSE 41623
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41572: LD_VAR 0 1
41576: PPUSH
41577: LD_VAR 0 7
41581: PUSH
41582: LD_INT 1
41584: ARRAY
41585: PPUSH
41586: LD_VAR 0 7
41590: PUSH
41591: LD_INT 2
41593: ARRAY
41594: PPUSH
41595: LD_VAR 0 3
41599: PPUSH
41600: CALL_OW 48
// result := IsPlaced ( unit ) ;
41604: LD_ADDR_VAR 0 4
41608: PUSH
41609: LD_VAR 0 1
41613: PPUSH
41614: CALL_OW 305
41618: ST_TO_ADDR
// exit ;
41619: POP
41620: POP
41621: GO 41627
// end ; end ;
41623: GO 41490
41625: POP
41626: POP
// end ;
41627: LD_VAR 0 4
41631: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41632: LD_INT 0
41634: PPUSH
41635: PPUSH
41636: PPUSH
// if not side or side > 8 then
41637: LD_VAR 0 1
41641: NOT
41642: PUSH
41643: LD_VAR 0 1
41647: PUSH
41648: LD_INT 8
41650: GREATER
41651: OR
41652: IFFALSE 41656
// exit ;
41654: GO 41843
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41656: LD_ADDR_VAR 0 4
41660: PUSH
41661: LD_INT 22
41663: PUSH
41664: LD_VAR 0 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 21
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PPUSH
41687: CALL_OW 69
41691: ST_TO_ADDR
// if not tmp then
41692: LD_VAR 0 4
41696: NOT
41697: IFFALSE 41701
// exit ;
41699: GO 41843
// enable_addtolog := true ;
41701: LD_ADDR_OWVAR 81
41705: PUSH
41706: LD_INT 1
41708: ST_TO_ADDR
// AddToLog ( [ ) ;
41709: LD_STRING [
41711: PPUSH
41712: CALL_OW 561
// for i in tmp do
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_VAR 0 4
41725: PUSH
41726: FOR_IN
41727: IFFALSE 41834
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41729: LD_STRING [
41731: PUSH
41732: LD_VAR 0 3
41736: PPUSH
41737: CALL_OW 266
41741: STR
41742: PUSH
41743: LD_STRING , 
41745: STR
41746: PUSH
41747: LD_VAR 0 3
41751: PPUSH
41752: CALL_OW 250
41756: STR
41757: PUSH
41758: LD_STRING , 
41760: STR
41761: PUSH
41762: LD_VAR 0 3
41766: PPUSH
41767: CALL_OW 251
41771: STR
41772: PUSH
41773: LD_STRING , 
41775: STR
41776: PUSH
41777: LD_VAR 0 3
41781: PPUSH
41782: CALL_OW 254
41786: STR
41787: PUSH
41788: LD_STRING , 
41790: STR
41791: PUSH
41792: LD_VAR 0 3
41796: PPUSH
41797: LD_INT 1
41799: PPUSH
41800: CALL_OW 268
41804: STR
41805: PUSH
41806: LD_STRING , 
41808: STR
41809: PUSH
41810: LD_VAR 0 3
41814: PPUSH
41815: LD_INT 2
41817: PPUSH
41818: CALL_OW 268
41822: STR
41823: PUSH
41824: LD_STRING ],
41826: STR
41827: PPUSH
41828: CALL_OW 561
// end ;
41832: GO 41726
41834: POP
41835: POP
// AddToLog ( ]; ) ;
41836: LD_STRING ];
41838: PPUSH
41839: CALL_OW 561
// end ;
41843: LD_VAR 0 2
41847: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41848: LD_INT 0
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
// if not area or not rate or not max then
41855: LD_VAR 0 1
41859: NOT
41860: PUSH
41861: LD_VAR 0 2
41865: NOT
41866: OR
41867: PUSH
41868: LD_VAR 0 4
41872: NOT
41873: OR
41874: IFFALSE 41878
// exit ;
41876: GO 42067
// while 1 do
41878: LD_INT 1
41880: IFFALSE 42067
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41882: LD_ADDR_VAR 0 9
41886: PUSH
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_INT 1
41894: PPUSH
41895: CALL_OW 287
41899: PUSH
41900: LD_INT 10
41902: MUL
41903: ST_TO_ADDR
// r := rate / 10 ;
41904: LD_ADDR_VAR 0 7
41908: PUSH
41909: LD_VAR 0 2
41913: PUSH
41914: LD_INT 10
41916: DIVREAL
41917: ST_TO_ADDR
// time := 1 1$00 ;
41918: LD_ADDR_VAR 0 8
41922: PUSH
41923: LD_INT 2100
41925: ST_TO_ADDR
// if amount < min then
41926: LD_VAR 0 9
41930: PUSH
41931: LD_VAR 0 3
41935: LESS
41936: IFFALSE 41954
// r := r * 2 else
41938: LD_ADDR_VAR 0 7
41942: PUSH
41943: LD_VAR 0 7
41947: PUSH
41948: LD_INT 2
41950: MUL
41951: ST_TO_ADDR
41952: GO 41980
// if amount > max then
41954: LD_VAR 0 9
41958: PUSH
41959: LD_VAR 0 4
41963: GREATER
41964: IFFALSE 41980
// r := r / 2 ;
41966: LD_ADDR_VAR 0 7
41970: PUSH
41971: LD_VAR 0 7
41975: PUSH
41976: LD_INT 2
41978: DIVREAL
41979: ST_TO_ADDR
// time := time / r ;
41980: LD_ADDR_VAR 0 8
41984: PUSH
41985: LD_VAR 0 8
41989: PUSH
41990: LD_VAR 0 7
41994: DIVREAL
41995: ST_TO_ADDR
// if time < 0 then
41996: LD_VAR 0 8
42000: PUSH
42001: LD_INT 0
42003: LESS
42004: IFFALSE 42021
// time := time * - 1 ;
42006: LD_ADDR_VAR 0 8
42010: PUSH
42011: LD_VAR 0 8
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: MUL
42020: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
42021: LD_VAR 0 8
42025: PUSH
42026: LD_INT 35
42028: PPUSH
42029: LD_INT 875
42031: PPUSH
42032: CALL_OW 12
42036: PLUS
42037: PPUSH
42038: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
42042: LD_INT 1
42044: PPUSH
42045: LD_INT 5
42047: PPUSH
42048: CALL_OW 12
42052: PPUSH
42053: LD_VAR 0 1
42057: PPUSH
42058: LD_INT 1
42060: PPUSH
42061: CALL_OW 55
// end ;
42065: GO 41878
// end ;
42067: LD_VAR 0 5
42071: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
42072: LD_INT 0
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
// if not turrets or not factories then
42082: LD_VAR 0 1
42086: NOT
42087: PUSH
42088: LD_VAR 0 2
42092: NOT
42093: OR
42094: IFFALSE 42098
// exit ;
42096: GO 42405
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
42098: LD_ADDR_VAR 0 10
42102: PUSH
42103: LD_INT 5
42105: PUSH
42106: LD_INT 6
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: LD_INT 4
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 5
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 24
42140: PUSH
42141: LD_INT 25
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 23
42150: PUSH
42151: LD_INT 27
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 42
42164: PUSH
42165: LD_INT 43
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 44
42174: PUSH
42175: LD_INT 46
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 45
42184: PUSH
42185: LD_INT 47
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: ST_TO_ADDR
// result := [ ] ;
42202: LD_ADDR_VAR 0 3
42206: PUSH
42207: EMPTY
42208: ST_TO_ADDR
// for i in turrets do
42209: LD_ADDR_VAR 0 4
42213: PUSH
42214: LD_VAR 0 1
42218: PUSH
42219: FOR_IN
42220: IFFALSE 42403
// begin nat := GetNation ( i ) ;
42222: LD_ADDR_VAR 0 7
42226: PUSH
42227: LD_VAR 0 4
42231: PPUSH
42232: CALL_OW 248
42236: ST_TO_ADDR
// weapon := 0 ;
42237: LD_ADDR_VAR 0 8
42241: PUSH
42242: LD_INT 0
42244: ST_TO_ADDR
// if not nat then
42245: LD_VAR 0 7
42249: NOT
42250: IFFALSE 42254
// continue ;
42252: GO 42219
// for j in list [ nat ] do
42254: LD_ADDR_VAR 0 5
42258: PUSH
42259: LD_VAR 0 10
42263: PUSH
42264: LD_VAR 0 7
42268: ARRAY
42269: PUSH
42270: FOR_IN
42271: IFFALSE 42312
// if GetBWeapon ( i ) = j [ 1 ] then
42273: LD_VAR 0 4
42277: PPUSH
42278: CALL_OW 269
42282: PUSH
42283: LD_VAR 0 5
42287: PUSH
42288: LD_INT 1
42290: ARRAY
42291: EQUAL
42292: IFFALSE 42310
// begin weapon := j [ 2 ] ;
42294: LD_ADDR_VAR 0 8
42298: PUSH
42299: LD_VAR 0 5
42303: PUSH
42304: LD_INT 2
42306: ARRAY
42307: ST_TO_ADDR
// break ;
42308: GO 42312
// end ;
42310: GO 42270
42312: POP
42313: POP
// if not weapon then
42314: LD_VAR 0 8
42318: NOT
42319: IFFALSE 42323
// continue ;
42321: GO 42219
// for k in factories do
42323: LD_ADDR_VAR 0 6
42327: PUSH
42328: LD_VAR 0 2
42332: PUSH
42333: FOR_IN
42334: IFFALSE 42399
// begin weapons := AvailableWeaponList ( k ) ;
42336: LD_ADDR_VAR 0 9
42340: PUSH
42341: LD_VAR 0 6
42345: PPUSH
42346: CALL_OW 478
42350: ST_TO_ADDR
// if not weapons then
42351: LD_VAR 0 9
42355: NOT
42356: IFFALSE 42360
// continue ;
42358: GO 42333
// if weapon in weapons then
42360: LD_VAR 0 8
42364: PUSH
42365: LD_VAR 0 9
42369: IN
42370: IFFALSE 42397
// begin result := [ i , weapon ] ;
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: LD_VAR 0 4
42381: PUSH
42382: LD_VAR 0 8
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: ST_TO_ADDR
// exit ;
42391: POP
42392: POP
42393: POP
42394: POP
42395: GO 42405
// end ; end ;
42397: GO 42333
42399: POP
42400: POP
// end ;
42401: GO 42219
42403: POP
42404: POP
// end ;
42405: LD_VAR 0 3
42409: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42410: LD_INT 0
42412: PPUSH
// if not side or side > 8 then
42413: LD_VAR 0 3
42417: NOT
42418: PUSH
42419: LD_VAR 0 3
42423: PUSH
42424: LD_INT 8
42426: GREATER
42427: OR
42428: IFFALSE 42432
// exit ;
42430: GO 42491
// if not range then
42432: LD_VAR 0 4
42436: NOT
42437: IFFALSE 42448
// range := - 12 ;
42439: LD_ADDR_VAR 0 4
42443: PUSH
42444: LD_INT 12
42446: NEG
42447: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42448: LD_VAR 0 1
42452: PPUSH
42453: LD_VAR 0 2
42457: PPUSH
42458: LD_VAR 0 3
42462: PPUSH
42463: LD_VAR 0 4
42467: PPUSH
42468: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42472: LD_VAR 0 1
42476: PPUSH
42477: LD_VAR 0 2
42481: PPUSH
42482: LD_VAR 0 3
42486: PPUSH
42487: CALL_OW 331
// end ;
42491: LD_VAR 0 5
42495: RET
// export function Video ( mode ) ; begin
42496: LD_INT 0
42498: PPUSH
// ingame_video = mode ;
42499: LD_ADDR_OWVAR 52
42503: PUSH
42504: LD_VAR 0 1
42508: ST_TO_ADDR
// interface_hidden = mode ;
42509: LD_ADDR_OWVAR 54
42513: PUSH
42514: LD_VAR 0 1
42518: ST_TO_ADDR
// end ;
42519: LD_VAR 0 2
42523: RET
// export function Join ( array , element ) ; begin
42524: LD_INT 0
42526: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42527: LD_ADDR_VAR 0 3
42531: PUSH
42532: LD_VAR 0 1
42536: PPUSH
42537: LD_VAR 0 1
42541: PUSH
42542: LD_INT 1
42544: PLUS
42545: PPUSH
42546: LD_VAR 0 2
42550: PPUSH
42551: CALL_OW 1
42555: ST_TO_ADDR
// end ;
42556: LD_VAR 0 3
42560: RET
// export function JoinUnion ( array , element ) ; begin
42561: LD_INT 0
42563: PPUSH
// result := array union element ;
42564: LD_ADDR_VAR 0 3
42568: PUSH
42569: LD_VAR 0 1
42573: PUSH
42574: LD_VAR 0 2
42578: UNION
42579: ST_TO_ADDR
// end ;
42580: LD_VAR 0 3
42584: RET
// export function GetBehemoths ( side ) ; begin
42585: LD_INT 0
42587: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42588: LD_ADDR_VAR 0 2
42592: PUSH
42593: LD_INT 22
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 31
42607: PUSH
42608: LD_INT 25
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PPUSH
42619: CALL_OW 69
42623: ST_TO_ADDR
// end ;
42624: LD_VAR 0 2
42628: RET
// export function Shuffle ( array ) ; var i , index ; begin
42629: LD_INT 0
42631: PPUSH
42632: PPUSH
42633: PPUSH
// result := [ ] ;
42634: LD_ADDR_VAR 0 2
42638: PUSH
42639: EMPTY
42640: ST_TO_ADDR
// if not array then
42641: LD_VAR 0 1
42645: NOT
42646: IFFALSE 42650
// exit ;
42648: GO 42749
// Randomize ;
42650: CALL_OW 10
// for i = array downto 1 do
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: DOUBLE
42660: LD_VAR 0 1
42664: INC
42665: ST_TO_ADDR
42666: LD_INT 1
42668: PUSH
42669: FOR_DOWNTO
42670: IFFALSE 42747
// begin index := rand ( 1 , array ) ;
42672: LD_ADDR_VAR 0 4
42676: PUSH
42677: LD_INT 1
42679: PPUSH
42680: LD_VAR 0 1
42684: PPUSH
42685: CALL_OW 12
42689: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42690: LD_ADDR_VAR 0 2
42694: PUSH
42695: LD_VAR 0 2
42699: PPUSH
42700: LD_VAR 0 2
42704: PUSH
42705: LD_INT 1
42707: PLUS
42708: PPUSH
42709: LD_VAR 0 1
42713: PUSH
42714: LD_VAR 0 4
42718: ARRAY
42719: PPUSH
42720: CALL_OW 2
42724: ST_TO_ADDR
// array := Delete ( array , index ) ;
42725: LD_ADDR_VAR 0 1
42729: PUSH
42730: LD_VAR 0 1
42734: PPUSH
42735: LD_VAR 0 4
42739: PPUSH
42740: CALL_OW 3
42744: ST_TO_ADDR
// end ;
42745: GO 42669
42747: POP
42748: POP
// end ;
42749: LD_VAR 0 2
42753: RET
// export function GetBaseMaterials ( base ) ; begin
42754: LD_INT 0
42756: PPUSH
// result := [ 0 , 0 , 0 ] ;
42757: LD_ADDR_VAR 0 2
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// if not base then
42776: LD_VAR 0 1
42780: NOT
42781: IFFALSE 42785
// exit ;
42783: GO 42834
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42785: LD_ADDR_VAR 0 2
42789: PUSH
42790: LD_VAR 0 1
42794: PPUSH
42795: LD_INT 1
42797: PPUSH
42798: CALL_OW 275
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: LD_INT 2
42810: PPUSH
42811: CALL_OW 275
42815: PUSH
42816: LD_VAR 0 1
42820: PPUSH
42821: LD_INT 3
42823: PPUSH
42824: CALL_OW 275
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// end ;
42834: LD_VAR 0 2
42838: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42839: LD_INT 0
42841: PPUSH
42842: PPUSH
// result := array ;
42843: LD_ADDR_VAR 0 3
42847: PUSH
42848: LD_VAR 0 1
42852: ST_TO_ADDR
// if size >= result then
42853: LD_VAR 0 2
42857: PUSH
42858: LD_VAR 0 3
42862: GREATEREQUAL
42863: IFFALSE 42867
// exit ;
42865: GO 42917
// if size then
42867: LD_VAR 0 2
42871: IFFALSE 42917
// for i := array downto size do
42873: LD_ADDR_VAR 0 4
42877: PUSH
42878: DOUBLE
42879: LD_VAR 0 1
42883: INC
42884: ST_TO_ADDR
42885: LD_VAR 0 2
42889: PUSH
42890: FOR_DOWNTO
42891: IFFALSE 42915
// result := Delete ( result , result ) ;
42893: LD_ADDR_VAR 0 3
42897: PUSH
42898: LD_VAR 0 3
42902: PPUSH
42903: LD_VAR 0 3
42907: PPUSH
42908: CALL_OW 3
42912: ST_TO_ADDR
42913: GO 42890
42915: POP
42916: POP
// end ;
42917: LD_VAR 0 3
42921: RET
// export function ComExit ( unit ) ; var tmp ; begin
42922: LD_INT 0
42924: PPUSH
42925: PPUSH
// if not IsInUnit ( unit ) then
42926: LD_VAR 0 1
42930: PPUSH
42931: CALL_OW 310
42935: NOT
42936: IFFALSE 42940
// exit ;
42938: GO 43000
// tmp := IsInUnit ( unit ) ;
42940: LD_ADDR_VAR 0 3
42944: PUSH
42945: LD_VAR 0 1
42949: PPUSH
42950: CALL_OW 310
42954: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42955: LD_VAR 0 3
42959: PPUSH
42960: CALL_OW 247
42964: PUSH
42965: LD_INT 2
42967: EQUAL
42968: IFFALSE 42981
// ComExitVehicle ( unit ) else
42970: LD_VAR 0 1
42974: PPUSH
42975: CALL_OW 121
42979: GO 42990
// ComExitBuilding ( unit ) ;
42981: LD_VAR 0 1
42985: PPUSH
42986: CALL_OW 122
// result := tmp ;
42990: LD_ADDR_VAR 0 2
42994: PUSH
42995: LD_VAR 0 3
42999: ST_TO_ADDR
// end ;
43000: LD_VAR 0 2
43004: RET
// export function ComExitAll ( units ) ; var i ; begin
43005: LD_INT 0
43007: PPUSH
43008: PPUSH
// if not units then
43009: LD_VAR 0 1
43013: NOT
43014: IFFALSE 43018
// exit ;
43016: GO 43044
// for i in units do
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_VAR 0 1
43027: PUSH
43028: FOR_IN
43029: IFFALSE 43042
// ComExit ( i ) ;
43031: LD_VAR 0 3
43035: PPUSH
43036: CALL 42922 0 1
43040: GO 43028
43042: POP
43043: POP
// end ;
43044: LD_VAR 0 2
43048: RET
// export function ResetHc ; begin
43049: LD_INT 0
43051: PPUSH
// InitHc ;
43052: CALL_OW 19
// hc_importance := 0 ;
43056: LD_ADDR_OWVAR 32
43060: PUSH
43061: LD_INT 0
43063: ST_TO_ADDR
// end ;
43064: LD_VAR 0 1
43068: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
43069: LD_INT 0
43071: PPUSH
43072: PPUSH
43073: PPUSH
// _x := ( x1 + x2 ) div 2 ;
43074: LD_ADDR_VAR 0 6
43078: PUSH
43079: LD_VAR 0 1
43083: PUSH
43084: LD_VAR 0 3
43088: PLUS
43089: PUSH
43090: LD_INT 2
43092: DIV
43093: ST_TO_ADDR
// if _x < 0 then
43094: LD_VAR 0 6
43098: PUSH
43099: LD_INT 0
43101: LESS
43102: IFFALSE 43119
// _x := _x * - 1 ;
43104: LD_ADDR_VAR 0 6
43108: PUSH
43109: LD_VAR 0 6
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: MUL
43118: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43119: LD_ADDR_VAR 0 7
43123: PUSH
43124: LD_VAR 0 2
43128: PUSH
43129: LD_VAR 0 4
43133: PLUS
43134: PUSH
43135: LD_INT 2
43137: DIV
43138: ST_TO_ADDR
// if _y < 0 then
43139: LD_VAR 0 7
43143: PUSH
43144: LD_INT 0
43146: LESS
43147: IFFALSE 43164
// _y := _y * - 1 ;
43149: LD_ADDR_VAR 0 7
43153: PUSH
43154: LD_VAR 0 7
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: MUL
43163: ST_TO_ADDR
// result := [ _x , _y ] ;
43164: LD_ADDR_VAR 0 5
43168: PUSH
43169: LD_VAR 0 6
43173: PUSH
43174: LD_VAR 0 7
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// end ;
43183: LD_VAR 0 5
43187: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43188: LD_INT 0
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
// task := GetTaskList ( unit ) ;
43194: LD_ADDR_VAR 0 7
43198: PUSH
43199: LD_VAR 0 1
43203: PPUSH
43204: CALL_OW 437
43208: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43209: LD_VAR 0 7
43213: NOT
43214: PUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: LD_VAR 0 2
43224: PPUSH
43225: CALL_OW 308
43229: NOT
43230: AND
43231: IFFALSE 43235
// exit ;
43233: GO 43353
// if IsInArea ( unit , area ) then
43235: LD_VAR 0 1
43239: PPUSH
43240: LD_VAR 0 2
43244: PPUSH
43245: CALL_OW 308
43249: IFFALSE 43267
// begin ComMoveToArea ( unit , goAway ) ;
43251: LD_VAR 0 1
43255: PPUSH
43256: LD_VAR 0 3
43260: PPUSH
43261: CALL_OW 113
// exit ;
43265: GO 43353
// end ; if task [ 1 ] [ 1 ] <> M then
43267: LD_VAR 0 7
43271: PUSH
43272: LD_INT 1
43274: ARRAY
43275: PUSH
43276: LD_INT 1
43278: ARRAY
43279: PUSH
43280: LD_STRING M
43282: NONEQUAL
43283: IFFALSE 43287
// exit ;
43285: GO 43353
// x := task [ 1 ] [ 2 ] ;
43287: LD_ADDR_VAR 0 5
43291: PUSH
43292: LD_VAR 0 7
43296: PUSH
43297: LD_INT 1
43299: ARRAY
43300: PUSH
43301: LD_INT 2
43303: ARRAY
43304: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43305: LD_ADDR_VAR 0 6
43309: PUSH
43310: LD_VAR 0 7
43314: PUSH
43315: LD_INT 1
43317: ARRAY
43318: PUSH
43319: LD_INT 3
43321: ARRAY
43322: ST_TO_ADDR
// if InArea ( x , y , area ) then
43323: LD_VAR 0 5
43327: PPUSH
43328: LD_VAR 0 6
43332: PPUSH
43333: LD_VAR 0 2
43337: PPUSH
43338: CALL_OW 309
43342: IFFALSE 43353
// ComStop ( unit ) ;
43344: LD_VAR 0 1
43348: PPUSH
43349: CALL_OW 141
// end ;
43353: LD_VAR 0 4
43357: RET
// export function Abs ( value ) ; begin
43358: LD_INT 0
43360: PPUSH
// result := value ;
43361: LD_ADDR_VAR 0 2
43365: PUSH
43366: LD_VAR 0 1
43370: ST_TO_ADDR
// if value < 0 then
43371: LD_VAR 0 1
43375: PUSH
43376: LD_INT 0
43378: LESS
43379: IFFALSE 43396
// result := value * - 1 ;
43381: LD_ADDR_VAR 0 2
43385: PUSH
43386: LD_VAR 0 1
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: MUL
43395: ST_TO_ADDR
// end ;
43396: LD_VAR 0 2
43400: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43401: LD_INT 0
43403: PPUSH
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
// if not unit or not building then
43411: LD_VAR 0 1
43415: NOT
43416: PUSH
43417: LD_VAR 0 2
43421: NOT
43422: OR
43423: IFFALSE 43427
// exit ;
43425: GO 43653
// x := GetX ( building ) ;
43427: LD_ADDR_VAR 0 4
43431: PUSH
43432: LD_VAR 0 2
43436: PPUSH
43437: CALL_OW 250
43441: ST_TO_ADDR
// y := GetY ( building ) ;
43442: LD_ADDR_VAR 0 6
43446: PUSH
43447: LD_VAR 0 2
43451: PPUSH
43452: CALL_OW 251
43456: ST_TO_ADDR
// d := GetDir ( building ) ;
43457: LD_ADDR_VAR 0 8
43461: PUSH
43462: LD_VAR 0 2
43466: PPUSH
43467: CALL_OW 254
43471: ST_TO_ADDR
// r := 4 ;
43472: LD_ADDR_VAR 0 9
43476: PUSH
43477: LD_INT 4
43479: ST_TO_ADDR
// for i := 1 to 5 do
43480: LD_ADDR_VAR 0 10
43484: PUSH
43485: DOUBLE
43486: LD_INT 1
43488: DEC
43489: ST_TO_ADDR
43490: LD_INT 5
43492: PUSH
43493: FOR_TO
43494: IFFALSE 43651
// begin _x := ShiftX ( x , d , r + i ) ;
43496: LD_ADDR_VAR 0 5
43500: PUSH
43501: LD_VAR 0 4
43505: PPUSH
43506: LD_VAR 0 8
43510: PPUSH
43511: LD_VAR 0 9
43515: PUSH
43516: LD_VAR 0 10
43520: PLUS
43521: PPUSH
43522: CALL_OW 272
43526: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43527: LD_ADDR_VAR 0 7
43531: PUSH
43532: LD_VAR 0 6
43536: PPUSH
43537: LD_VAR 0 8
43541: PPUSH
43542: LD_VAR 0 9
43546: PUSH
43547: LD_VAR 0 10
43551: PLUS
43552: PPUSH
43553: CALL_OW 273
43557: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43558: LD_VAR 0 5
43562: PPUSH
43563: LD_VAR 0 7
43567: PPUSH
43568: CALL_OW 488
43572: PUSH
43573: LD_VAR 0 5
43577: PPUSH
43578: LD_VAR 0 7
43582: PPUSH
43583: CALL_OW 428
43587: PPUSH
43588: CALL_OW 247
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: IN
43603: NOT
43604: AND
43605: IFFALSE 43649
// begin ComMoveXY ( unit , _x , _y ) ;
43607: LD_VAR 0 1
43611: PPUSH
43612: LD_VAR 0 5
43616: PPUSH
43617: LD_VAR 0 7
43621: PPUSH
43622: CALL_OW 111
// result := [ _x , _y ] ;
43626: LD_ADDR_VAR 0 3
43630: PUSH
43631: LD_VAR 0 5
43635: PUSH
43636: LD_VAR 0 7
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: ST_TO_ADDR
// exit ;
43645: POP
43646: POP
43647: GO 43653
// end ; end ;
43649: GO 43493
43651: POP
43652: POP
// end ;
43653: LD_VAR 0 3
43657: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43658: LD_INT 0
43660: PPUSH
43661: PPUSH
43662: PPUSH
// result := 0 ;
43663: LD_ADDR_VAR 0 3
43667: PUSH
43668: LD_INT 0
43670: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43671: LD_VAR 0 1
43675: PUSH
43676: LD_INT 0
43678: LESS
43679: PUSH
43680: LD_VAR 0 1
43684: PUSH
43685: LD_INT 8
43687: GREATER
43688: OR
43689: PUSH
43690: LD_VAR 0 2
43694: PUSH
43695: LD_INT 0
43697: LESS
43698: OR
43699: PUSH
43700: LD_VAR 0 2
43704: PUSH
43705: LD_INT 8
43707: GREATER
43708: OR
43709: IFFALSE 43713
// exit ;
43711: GO 43788
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43713: LD_ADDR_VAR 0 4
43717: PUSH
43718: LD_INT 22
43720: PUSH
43721: LD_VAR 0 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PPUSH
43730: CALL_OW 69
43734: PUSH
43735: FOR_IN
43736: IFFALSE 43786
// begin un := UnitShoot ( i ) ;
43738: LD_ADDR_VAR 0 5
43742: PUSH
43743: LD_VAR 0 4
43747: PPUSH
43748: CALL_OW 504
43752: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43753: LD_VAR 0 5
43757: PPUSH
43758: CALL_OW 255
43762: PUSH
43763: LD_VAR 0 1
43767: EQUAL
43768: IFFALSE 43784
// begin result := un ;
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_VAR 0 5
43779: ST_TO_ADDR
// exit ;
43780: POP
43781: POP
43782: GO 43788
// end ; end ;
43784: GO 43735
43786: POP
43787: POP
// end ;
43788: LD_VAR 0 3
43792: RET
// export function GetCargoBay ( units ) ; begin
43793: LD_INT 0
43795: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43796: LD_ADDR_VAR 0 2
43800: PUSH
43801: LD_VAR 0 1
43805: PPUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 34
43811: PUSH
43812: LD_INT 12
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 34
43821: PUSH
43822: LD_INT 51
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 34
43831: PUSH
43832: LD_INT 32
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 34
43841: PUSH
43842: LD_INT 89
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: PPUSH
43856: CALL_OW 72
43860: ST_TO_ADDR
// end ;
43861: LD_VAR 0 2
43865: RET
// export function Negate ( value ) ; begin
43866: LD_INT 0
43868: PPUSH
// result := not value ;
43869: LD_ADDR_VAR 0 2
43873: PUSH
43874: LD_VAR 0 1
43878: NOT
43879: ST_TO_ADDR
// end ;
43880: LD_VAR 0 2
43884: RET
// export function Inc ( value ) ; begin
43885: LD_INT 0
43887: PPUSH
// result := value + 1 ;
43888: LD_ADDR_VAR 0 2
43892: PUSH
43893: LD_VAR 0 1
43897: PUSH
43898: LD_INT 1
43900: PLUS
43901: ST_TO_ADDR
// end ;
43902: LD_VAR 0 2
43906: RET
// export function Dec ( value ) ; begin
43907: LD_INT 0
43909: PPUSH
// result := value - 1 ;
43910: LD_ADDR_VAR 0 2
43914: PUSH
43915: LD_VAR 0 1
43919: PUSH
43920: LD_INT 1
43922: MINUS
43923: ST_TO_ADDR
// end ;
43924: LD_VAR 0 2
43928: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43929: LD_INT 0
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43939: LD_VAR 0 1
43943: PPUSH
43944: LD_VAR 0 2
43948: PPUSH
43949: CALL_OW 488
43953: NOT
43954: PUSH
43955: LD_VAR 0 3
43959: PPUSH
43960: LD_VAR 0 4
43964: PPUSH
43965: CALL_OW 488
43969: NOT
43970: OR
43971: IFFALSE 43984
// begin result := - 1 ;
43973: LD_ADDR_VAR 0 5
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: ST_TO_ADDR
// exit ;
43982: GO 44219
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43984: LD_ADDR_VAR 0 12
43988: PUSH
43989: LD_VAR 0 1
43993: PPUSH
43994: LD_VAR 0 2
43998: PPUSH
43999: LD_VAR 0 3
44003: PPUSH
44004: LD_VAR 0 4
44008: PPUSH
44009: CALL 43069 0 4
44013: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
44014: LD_ADDR_VAR 0 11
44018: PUSH
44019: LD_VAR 0 1
44023: PPUSH
44024: LD_VAR 0 2
44028: PPUSH
44029: LD_VAR 0 12
44033: PUSH
44034: LD_INT 1
44036: ARRAY
44037: PPUSH
44038: LD_VAR 0 12
44042: PUSH
44043: LD_INT 2
44045: ARRAY
44046: PPUSH
44047: CALL_OW 298
44051: ST_TO_ADDR
// distance := 9999 ;
44052: LD_ADDR_VAR 0 10
44056: PUSH
44057: LD_INT 9999
44059: ST_TO_ADDR
// for i := 0 to 5 do
44060: LD_ADDR_VAR 0 6
44064: PUSH
44065: DOUBLE
44066: LD_INT 0
44068: DEC
44069: ST_TO_ADDR
44070: LD_INT 5
44072: PUSH
44073: FOR_TO
44074: IFFALSE 44217
// begin _x := ShiftX ( x1 , i , centerDist ) ;
44076: LD_ADDR_VAR 0 7
44080: PUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: LD_VAR 0 6
44090: PPUSH
44091: LD_VAR 0 11
44095: PPUSH
44096: CALL_OW 272
44100: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
44101: LD_ADDR_VAR 0 8
44105: PUSH
44106: LD_VAR 0 2
44110: PPUSH
44111: LD_VAR 0 6
44115: PPUSH
44116: LD_VAR 0 11
44120: PPUSH
44121: CALL_OW 273
44125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44126: LD_VAR 0 7
44130: PPUSH
44131: LD_VAR 0 8
44135: PPUSH
44136: CALL_OW 488
44140: NOT
44141: IFFALSE 44145
// continue ;
44143: GO 44073
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44145: LD_ADDR_VAR 0 9
44149: PUSH
44150: LD_VAR 0 12
44154: PUSH
44155: LD_INT 1
44157: ARRAY
44158: PPUSH
44159: LD_VAR 0 12
44163: PUSH
44164: LD_INT 2
44166: ARRAY
44167: PPUSH
44168: LD_VAR 0 7
44172: PPUSH
44173: LD_VAR 0 8
44177: PPUSH
44178: CALL_OW 298
44182: ST_TO_ADDR
// if tmp < distance then
44183: LD_VAR 0 9
44187: PUSH
44188: LD_VAR 0 10
44192: LESS
44193: IFFALSE 44215
// begin result := i ;
44195: LD_ADDR_VAR 0 5
44199: PUSH
44200: LD_VAR 0 6
44204: ST_TO_ADDR
// distance := tmp ;
44205: LD_ADDR_VAR 0 10
44209: PUSH
44210: LD_VAR 0 9
44214: ST_TO_ADDR
// end ; end ;
44215: GO 44073
44217: POP
44218: POP
// end ;
44219: LD_VAR 0 5
44223: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44224: LD_INT 0
44226: PPUSH
44227: PPUSH
// if not driver or not IsInUnit ( driver ) then
44228: LD_VAR 0 1
44232: NOT
44233: PUSH
44234: LD_VAR 0 1
44238: PPUSH
44239: CALL_OW 310
44243: NOT
44244: OR
44245: IFFALSE 44249
// exit ;
44247: GO 44339
// vehicle := IsInUnit ( driver ) ;
44249: LD_ADDR_VAR 0 3
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: CALL_OW 310
44263: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44264: LD_VAR 0 1
44268: PPUSH
44269: LD_STRING \
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: PUSH
44299: LD_STRING E
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_VAR 0 3
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PPUSH
44335: CALL_OW 446
// end ;
44339: LD_VAR 0 2
44343: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44344: LD_INT 0
44346: PPUSH
44347: PPUSH
// if not driver or not IsInUnit ( driver ) then
44348: LD_VAR 0 1
44352: NOT
44353: PUSH
44354: LD_VAR 0 1
44358: PPUSH
44359: CALL_OW 310
44363: NOT
44364: OR
44365: IFFALSE 44369
// exit ;
44367: GO 44459
// vehicle := IsInUnit ( driver ) ;
44369: LD_ADDR_VAR 0 3
44373: PUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL_OW 310
44383: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44384: LD_VAR 0 1
44388: PPUSH
44389: LD_STRING \
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: PUSH
44419: LD_STRING E
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_VAR 0 3
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 447
// end ;
44459: LD_VAR 0 2
44463: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44464: LD_INT 0
44466: PPUSH
44467: PPUSH
44468: PPUSH
// tmp := [ ] ;
44469: LD_ADDR_VAR 0 5
44473: PUSH
44474: EMPTY
44475: ST_TO_ADDR
// for i in units do
44476: LD_ADDR_VAR 0 4
44480: PUSH
44481: LD_VAR 0 1
44485: PUSH
44486: FOR_IN
44487: IFFALSE 44525
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44489: LD_ADDR_VAR 0 5
44493: PUSH
44494: LD_VAR 0 5
44498: PPUSH
44499: LD_VAR 0 5
44503: PUSH
44504: LD_INT 1
44506: PLUS
44507: PPUSH
44508: LD_VAR 0 4
44512: PPUSH
44513: CALL_OW 256
44517: PPUSH
44518: CALL_OW 2
44522: ST_TO_ADDR
44523: GO 44486
44525: POP
44526: POP
// if not tmp then
44527: LD_VAR 0 5
44531: NOT
44532: IFFALSE 44536
// exit ;
44534: GO 44584
// if asc then
44536: LD_VAR 0 2
44540: IFFALSE 44564
// result := SortListByListAsc ( units , tmp ) else
44542: LD_ADDR_VAR 0 3
44546: PUSH
44547: LD_VAR 0 1
44551: PPUSH
44552: LD_VAR 0 5
44556: PPUSH
44557: CALL_OW 76
44561: ST_TO_ADDR
44562: GO 44584
// result := SortListByListDesc ( units , tmp ) ;
44564: LD_ADDR_VAR 0 3
44568: PUSH
44569: LD_VAR 0 1
44573: PPUSH
44574: LD_VAR 0 5
44578: PPUSH
44579: CALL_OW 77
44583: ST_TO_ADDR
// end ;
44584: LD_VAR 0 3
44588: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44589: LD_INT 0
44591: PPUSH
44592: PPUSH
// task := GetTaskList ( mech ) ;
44593: LD_ADDR_VAR 0 4
44597: PUSH
44598: LD_VAR 0 1
44602: PPUSH
44603: CALL_OW 437
44607: ST_TO_ADDR
// if not task then
44608: LD_VAR 0 4
44612: NOT
44613: IFFALSE 44617
// exit ;
44615: GO 44659
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44617: LD_ADDR_VAR 0 3
44621: PUSH
44622: LD_VAR 0 4
44626: PUSH
44627: LD_INT 1
44629: ARRAY
44630: PUSH
44631: LD_INT 1
44633: ARRAY
44634: PUSH
44635: LD_STRING r
44637: EQUAL
44638: PUSH
44639: LD_VAR 0 4
44643: PUSH
44644: LD_INT 1
44646: ARRAY
44647: PUSH
44648: LD_INT 4
44650: ARRAY
44651: PUSH
44652: LD_VAR 0 2
44656: EQUAL
44657: AND
44658: ST_TO_ADDR
// end ;
44659: LD_VAR 0 3
44663: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44664: LD_INT 0
44666: PPUSH
// SetDir ( unit , d ) ;
44667: LD_VAR 0 1
44671: PPUSH
44672: LD_VAR 0 4
44676: PPUSH
44677: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
44681: LD_ADDR_VAR 0 6
44685: PUSH
44686: LD_VAR 0 1
44690: PPUSH
44691: LD_VAR 0 2
44695: PPUSH
44696: LD_VAR 0 3
44700: PPUSH
44701: LD_VAR 0 5
44705: PPUSH
44706: CALL_OW 48
44710: ST_TO_ADDR
// end ;
44711: LD_VAR 0 6
44715: RET
// export function ToNaturalNumber ( number ) ; begin
44716: LD_INT 0
44718: PPUSH
// result := number div 1 ;
44719: LD_ADDR_VAR 0 2
44723: PUSH
44724: LD_VAR 0 1
44728: PUSH
44729: LD_INT 1
44731: DIV
44732: ST_TO_ADDR
// if number < 0 then
44733: LD_VAR 0 1
44737: PUSH
44738: LD_INT 0
44740: LESS
44741: IFFALSE 44751
// result := 0 ;
44743: LD_ADDR_VAR 0 2
44747: PUSH
44748: LD_INT 0
44750: ST_TO_ADDR
// end ;
44751: LD_VAR 0 2
44755: RET
// export function SortByClass ( units , class ) ; var un ; begin
44756: LD_INT 0
44758: PPUSH
44759: PPUSH
// if not units or not class then
44760: LD_VAR 0 1
44764: NOT
44765: PUSH
44766: LD_VAR 0 2
44770: NOT
44771: OR
44772: IFFALSE 44776
// exit ;
44774: GO 44871
// result := [ ] ;
44776: LD_ADDR_VAR 0 3
44780: PUSH
44781: EMPTY
44782: ST_TO_ADDR
// for un in units do
44783: LD_ADDR_VAR 0 4
44787: PUSH
44788: LD_VAR 0 1
44792: PUSH
44793: FOR_IN
44794: IFFALSE 44869
// if GetClass ( un ) = class then
44796: LD_VAR 0 4
44800: PPUSH
44801: CALL_OW 257
44805: PUSH
44806: LD_VAR 0 2
44810: EQUAL
44811: IFFALSE 44838
// result := Insert ( result , 1 , un ) else
44813: LD_ADDR_VAR 0 3
44817: PUSH
44818: LD_VAR 0 3
44822: PPUSH
44823: LD_INT 1
44825: PPUSH
44826: LD_VAR 0 4
44830: PPUSH
44831: CALL_OW 2
44835: ST_TO_ADDR
44836: GO 44867
// result := Replace ( result , result + 1 , un ) ;
44838: LD_ADDR_VAR 0 3
44842: PUSH
44843: LD_VAR 0 3
44847: PPUSH
44848: LD_VAR 0 3
44852: PUSH
44853: LD_INT 1
44855: PLUS
44856: PPUSH
44857: LD_VAR 0 4
44861: PPUSH
44862: CALL_OW 1
44866: ST_TO_ADDR
44867: GO 44793
44869: POP
44870: POP
// end ;
44871: LD_VAR 0 3
44875: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44876: LD_INT 0
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
// result := [ ] ;
44885: LD_ADDR_VAR 0 4
44889: PUSH
44890: EMPTY
44891: ST_TO_ADDR
// if x - r < 0 then
44892: LD_VAR 0 1
44896: PUSH
44897: LD_VAR 0 3
44901: MINUS
44902: PUSH
44903: LD_INT 0
44905: LESS
44906: IFFALSE 44918
// min_x := 0 else
44908: LD_ADDR_VAR 0 8
44912: PUSH
44913: LD_INT 0
44915: ST_TO_ADDR
44916: GO 44934
// min_x := x - r ;
44918: LD_ADDR_VAR 0 8
44922: PUSH
44923: LD_VAR 0 1
44927: PUSH
44928: LD_VAR 0 3
44932: MINUS
44933: ST_TO_ADDR
// if y - r < 0 then
44934: LD_VAR 0 2
44938: PUSH
44939: LD_VAR 0 3
44943: MINUS
44944: PUSH
44945: LD_INT 0
44947: LESS
44948: IFFALSE 44960
// min_y := 0 else
44950: LD_ADDR_VAR 0 7
44954: PUSH
44955: LD_INT 0
44957: ST_TO_ADDR
44958: GO 44976
// min_y := y - r ;
44960: LD_ADDR_VAR 0 7
44964: PUSH
44965: LD_VAR 0 2
44969: PUSH
44970: LD_VAR 0 3
44974: MINUS
44975: ST_TO_ADDR
// max_x := x + r ;
44976: LD_ADDR_VAR 0 9
44980: PUSH
44981: LD_VAR 0 1
44985: PUSH
44986: LD_VAR 0 3
44990: PLUS
44991: ST_TO_ADDR
// max_y := y + r ;
44992: LD_ADDR_VAR 0 10
44996: PUSH
44997: LD_VAR 0 2
45001: PUSH
45002: LD_VAR 0 3
45006: PLUS
45007: ST_TO_ADDR
// for _x = min_x to max_x do
45008: LD_ADDR_VAR 0 5
45012: PUSH
45013: DOUBLE
45014: LD_VAR 0 8
45018: DEC
45019: ST_TO_ADDR
45020: LD_VAR 0 9
45024: PUSH
45025: FOR_TO
45026: IFFALSE 45127
// for _y = min_y to max_y do
45028: LD_ADDR_VAR 0 6
45032: PUSH
45033: DOUBLE
45034: LD_VAR 0 7
45038: DEC
45039: ST_TO_ADDR
45040: LD_VAR 0 10
45044: PUSH
45045: FOR_TO
45046: IFFALSE 45123
// begin if not ValidHex ( _x , _y ) then
45048: LD_VAR 0 5
45052: PPUSH
45053: LD_VAR 0 6
45057: PPUSH
45058: CALL_OW 488
45062: NOT
45063: IFFALSE 45067
// continue ;
45065: GO 45045
// if GetResourceTypeXY ( _x , _y ) then
45067: LD_VAR 0 5
45071: PPUSH
45072: LD_VAR 0 6
45076: PPUSH
45077: CALL_OW 283
45081: IFFALSE 45121
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
45083: LD_ADDR_VAR 0 4
45087: PUSH
45088: LD_VAR 0 4
45092: PPUSH
45093: LD_VAR 0 4
45097: PUSH
45098: LD_INT 1
45100: PLUS
45101: PPUSH
45102: LD_VAR 0 5
45106: PUSH
45107: LD_VAR 0 6
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PPUSH
45116: CALL_OW 1
45120: ST_TO_ADDR
// end ;
45121: GO 45045
45123: POP
45124: POP
45125: GO 45025
45127: POP
45128: POP
// end ;
45129: LD_VAR 0 4
45133: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45134: LD_INT 0
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
// if not units then
45144: LD_VAR 0 1
45148: NOT
45149: IFFALSE 45153
// exit ;
45151: GO 45681
// result := UnitFilter ( units , [ f_ok ] ) ;
45153: LD_ADDR_VAR 0 3
45157: PUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: LD_INT 50
45165: PUSH
45166: EMPTY
45167: LIST
45168: PPUSH
45169: CALL_OW 72
45173: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45174: LD_ADDR_VAR 0 8
45178: PUSH
45179: LD_VAR 0 1
45183: PUSH
45184: LD_INT 1
45186: ARRAY
45187: PPUSH
45188: CALL_OW 255
45192: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45193: LD_ADDR_VAR 0 10
45197: PUSH
45198: LD_INT 29
45200: PUSH
45201: LD_INT 91
45203: PUSH
45204: LD_INT 49
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// if not result then
45212: LD_VAR 0 3
45216: NOT
45217: IFFALSE 45221
// exit ;
45219: GO 45681
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45221: LD_ADDR_VAR 0 5
45225: PUSH
45226: LD_INT 81
45228: PUSH
45229: LD_VAR 0 8
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PPUSH
45238: CALL_OW 69
45242: ST_TO_ADDR
// for i in result do
45243: LD_ADDR_VAR 0 4
45247: PUSH
45248: LD_VAR 0 3
45252: PUSH
45253: FOR_IN
45254: IFFALSE 45679
// begin tag := GetTag ( i ) + 1 ;
45256: LD_ADDR_VAR 0 9
45260: PUSH
45261: LD_VAR 0 4
45265: PPUSH
45266: CALL_OW 110
45270: PUSH
45271: LD_INT 1
45273: PLUS
45274: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
45275: LD_ADDR_VAR 0 7
45279: PUSH
45280: LD_VAR 0 4
45284: PPUSH
45285: CALL_OW 250
45289: PPUSH
45290: LD_VAR 0 4
45294: PPUSH
45295: CALL_OW 251
45299: PPUSH
45300: LD_INT 4
45302: PPUSH
45303: CALL 44876 0 3
45307: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
45308: LD_VAR 0 4
45312: PPUSH
45313: CALL_OW 247
45317: PUSH
45318: LD_INT 2
45320: EQUAL
45321: PUSH
45322: LD_VAR 0 7
45326: PUSH
45327: LD_INT 2
45329: GREATER
45330: AND
45331: PUSH
45332: LD_VAR 0 4
45336: PPUSH
45337: CALL_OW 264
45341: PUSH
45342: LD_VAR 0 10
45346: IN
45347: NOT
45348: AND
45349: IFFALSE 45388
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45351: LD_VAR 0 4
45355: PPUSH
45356: LD_VAR 0 7
45360: PUSH
45361: LD_INT 1
45363: ARRAY
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: PPUSH
45369: LD_VAR 0 7
45373: PUSH
45374: LD_INT 1
45376: ARRAY
45377: PUSH
45378: LD_INT 2
45380: ARRAY
45381: PPUSH
45382: CALL_OW 116
45386: GO 45677
// if path > tag then
45388: LD_VAR 0 2
45392: PUSH
45393: LD_VAR 0 9
45397: GREATER
45398: IFFALSE 45606
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45400: LD_ADDR_VAR 0 6
45404: PUSH
45405: LD_VAR 0 5
45409: PPUSH
45410: LD_INT 91
45412: PUSH
45413: LD_VAR 0 4
45417: PUSH
45418: LD_INT 8
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: PPUSH
45426: CALL_OW 72
45430: ST_TO_ADDR
// if nearEnemy then
45431: LD_VAR 0 6
45435: IFFALSE 45504
// begin if GetWeapon ( i ) = ru_time_lapser then
45437: LD_VAR 0 4
45441: PPUSH
45442: CALL_OW 264
45446: PUSH
45447: LD_INT 49
45449: EQUAL
45450: IFFALSE 45478
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45452: LD_VAR 0 4
45456: PPUSH
45457: LD_VAR 0 6
45461: PPUSH
45462: LD_VAR 0 4
45466: PPUSH
45467: CALL_OW 74
45471: PPUSH
45472: CALL_OW 112
45476: GO 45502
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45478: LD_VAR 0 4
45482: PPUSH
45483: LD_VAR 0 6
45487: PPUSH
45488: LD_VAR 0 4
45492: PPUSH
45493: CALL_OW 74
45497: PPUSH
45498: CALL 46752 0 2
// end else
45502: GO 45604
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45504: LD_VAR 0 4
45508: PPUSH
45509: LD_VAR 0 2
45513: PUSH
45514: LD_VAR 0 9
45518: ARRAY
45519: PUSH
45520: LD_INT 1
45522: ARRAY
45523: PPUSH
45524: LD_VAR 0 2
45528: PUSH
45529: LD_VAR 0 9
45533: ARRAY
45534: PUSH
45535: LD_INT 2
45537: ARRAY
45538: PPUSH
45539: CALL_OW 297
45543: PUSH
45544: LD_INT 6
45546: GREATER
45547: IFFALSE 45590
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45549: LD_VAR 0 4
45553: PPUSH
45554: LD_VAR 0 2
45558: PUSH
45559: LD_VAR 0 9
45563: ARRAY
45564: PUSH
45565: LD_INT 1
45567: ARRAY
45568: PPUSH
45569: LD_VAR 0 2
45573: PUSH
45574: LD_VAR 0 9
45578: ARRAY
45579: PUSH
45580: LD_INT 2
45582: ARRAY
45583: PPUSH
45584: CALL_OW 114
45588: GO 45604
// SetTag ( i , tag ) ;
45590: LD_VAR 0 4
45594: PPUSH
45595: LD_VAR 0 9
45599: PPUSH
45600: CALL_OW 109
// end else
45604: GO 45677
// if enemy then
45606: LD_VAR 0 5
45610: IFFALSE 45677
// begin if GetWeapon ( i ) = ru_time_lapser then
45612: LD_VAR 0 4
45616: PPUSH
45617: CALL_OW 264
45621: PUSH
45622: LD_INT 49
45624: EQUAL
45625: IFFALSE 45653
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45627: LD_VAR 0 4
45631: PPUSH
45632: LD_VAR 0 5
45636: PPUSH
45637: LD_VAR 0 4
45641: PPUSH
45642: CALL_OW 74
45646: PPUSH
45647: CALL_OW 112
45651: GO 45677
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45653: LD_VAR 0 4
45657: PPUSH
45658: LD_VAR 0 5
45662: PPUSH
45663: LD_VAR 0 4
45667: PPUSH
45668: CALL_OW 74
45672: PPUSH
45673: CALL 46752 0 2
// end ; end ;
45677: GO 45253
45679: POP
45680: POP
// end ;
45681: LD_VAR 0 3
45685: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45686: LD_INT 0
45688: PPUSH
45689: PPUSH
45690: PPUSH
// if not unit or IsInUnit ( unit ) then
45691: LD_VAR 0 1
45695: NOT
45696: PUSH
45697: LD_VAR 0 1
45701: PPUSH
45702: CALL_OW 310
45706: OR
45707: IFFALSE 45711
// exit ;
45709: GO 45802
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45711: LD_ADDR_VAR 0 4
45715: PUSH
45716: LD_VAR 0 1
45720: PPUSH
45721: CALL_OW 250
45725: PPUSH
45726: LD_VAR 0 2
45730: PPUSH
45731: LD_INT 1
45733: PPUSH
45734: CALL_OW 272
45738: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45739: LD_ADDR_VAR 0 5
45743: PUSH
45744: LD_VAR 0 1
45748: PPUSH
45749: CALL_OW 251
45753: PPUSH
45754: LD_VAR 0 2
45758: PPUSH
45759: LD_INT 1
45761: PPUSH
45762: CALL_OW 273
45766: ST_TO_ADDR
// if ValidHex ( x , y ) then
45767: LD_VAR 0 4
45771: PPUSH
45772: LD_VAR 0 5
45776: PPUSH
45777: CALL_OW 488
45781: IFFALSE 45802
// ComTurnXY ( unit , x , y ) ;
45783: LD_VAR 0 1
45787: PPUSH
45788: LD_VAR 0 4
45792: PPUSH
45793: LD_VAR 0 5
45797: PPUSH
45798: CALL_OW 118
// end ;
45802: LD_VAR 0 3
45806: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45807: LD_INT 0
45809: PPUSH
45810: PPUSH
// result := false ;
45811: LD_ADDR_VAR 0 3
45815: PUSH
45816: LD_INT 0
45818: ST_TO_ADDR
// if not units then
45819: LD_VAR 0 2
45823: NOT
45824: IFFALSE 45828
// exit ;
45826: GO 45873
// for i in units do
45828: LD_ADDR_VAR 0 4
45832: PUSH
45833: LD_VAR 0 2
45837: PUSH
45838: FOR_IN
45839: IFFALSE 45871
// if See ( side , i ) then
45841: LD_VAR 0 1
45845: PPUSH
45846: LD_VAR 0 4
45850: PPUSH
45851: CALL_OW 292
45855: IFFALSE 45869
// begin result := true ;
45857: LD_ADDR_VAR 0 3
45861: PUSH
45862: LD_INT 1
45864: ST_TO_ADDR
// exit ;
45865: POP
45866: POP
45867: GO 45873
// end ;
45869: GO 45838
45871: POP
45872: POP
// end ;
45873: LD_VAR 0 3
45877: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45878: LD_INT 0
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
// if not unit or not points then
45884: LD_VAR 0 1
45888: NOT
45889: PUSH
45890: LD_VAR 0 2
45894: NOT
45895: OR
45896: IFFALSE 45900
// exit ;
45898: GO 45990
// dist := 99999 ;
45900: LD_ADDR_VAR 0 5
45904: PUSH
45905: LD_INT 99999
45907: ST_TO_ADDR
// for i in points do
45908: LD_ADDR_VAR 0 4
45912: PUSH
45913: LD_VAR 0 2
45917: PUSH
45918: FOR_IN
45919: IFFALSE 45988
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45921: LD_ADDR_VAR 0 6
45925: PUSH
45926: LD_VAR 0 1
45930: PPUSH
45931: LD_VAR 0 4
45935: PUSH
45936: LD_INT 1
45938: ARRAY
45939: PPUSH
45940: LD_VAR 0 4
45944: PUSH
45945: LD_INT 2
45947: ARRAY
45948: PPUSH
45949: CALL_OW 297
45953: ST_TO_ADDR
// if tmpDist < dist then
45954: LD_VAR 0 6
45958: PUSH
45959: LD_VAR 0 5
45963: LESS
45964: IFFALSE 45986
// begin result := i ;
45966: LD_ADDR_VAR 0 3
45970: PUSH
45971: LD_VAR 0 4
45975: ST_TO_ADDR
// dist := tmpDist ;
45976: LD_ADDR_VAR 0 5
45980: PUSH
45981: LD_VAR 0 6
45985: ST_TO_ADDR
// end ; end ;
45986: GO 45918
45988: POP
45989: POP
// end ;
45990: LD_VAR 0 3
45994: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45995: LD_INT 0
45997: PPUSH
// uc_side := side ;
45998: LD_ADDR_OWVAR 20
46002: PUSH
46003: LD_VAR 0 1
46007: ST_TO_ADDR
// uc_nation := 3 ;
46008: LD_ADDR_OWVAR 21
46012: PUSH
46013: LD_INT 3
46015: ST_TO_ADDR
// vc_chassis := 25 ;
46016: LD_ADDR_OWVAR 37
46020: PUSH
46021: LD_INT 25
46023: ST_TO_ADDR
// vc_engine := engine_siberite ;
46024: LD_ADDR_OWVAR 39
46028: PUSH
46029: LD_INT 3
46031: ST_TO_ADDR
// vc_control := control_computer ;
46032: LD_ADDR_OWVAR 38
46036: PUSH
46037: LD_INT 3
46039: ST_TO_ADDR
// vc_weapon := 59 ;
46040: LD_ADDR_OWVAR 40
46044: PUSH
46045: LD_INT 59
46047: ST_TO_ADDR
// result := CreateVehicle ;
46048: LD_ADDR_VAR 0 5
46052: PUSH
46053: CALL_OW 45
46057: ST_TO_ADDR
// SetDir ( result , d ) ;
46058: LD_VAR 0 5
46062: PPUSH
46063: LD_VAR 0 4
46067: PPUSH
46068: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
46072: LD_VAR 0 5
46076: PPUSH
46077: LD_VAR 0 2
46081: PPUSH
46082: LD_VAR 0 3
46086: PPUSH
46087: LD_INT 0
46089: PPUSH
46090: CALL_OW 48
// end ;
46094: LD_VAR 0 5
46098: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
46099: LD_INT 0
46101: PPUSH
46102: PPUSH
46103: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
46104: LD_ADDR_VAR 0 2
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46127: LD_VAR 0 1
46131: NOT
46132: PUSH
46133: LD_VAR 0 1
46137: PPUSH
46138: CALL_OW 264
46142: PUSH
46143: LD_INT 12
46145: PUSH
46146: LD_INT 51
46148: PUSH
46149: LD_INT 32
46151: PUSH
46152: LD_INT 89
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: IN
46161: NOT
46162: OR
46163: IFFALSE 46167
// exit ;
46165: GO 46265
// for i := 1 to 3 do
46167: LD_ADDR_VAR 0 3
46171: PUSH
46172: DOUBLE
46173: LD_INT 1
46175: DEC
46176: ST_TO_ADDR
46177: LD_INT 3
46179: PUSH
46180: FOR_TO
46181: IFFALSE 46263
// begin tmp := GetCargo ( cargo , i ) ;
46183: LD_ADDR_VAR 0 4
46187: PUSH
46188: LD_VAR 0 1
46192: PPUSH
46193: LD_VAR 0 3
46197: PPUSH
46198: CALL_OW 289
46202: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46203: LD_ADDR_VAR 0 2
46207: PUSH
46208: LD_VAR 0 2
46212: PPUSH
46213: LD_VAR 0 3
46217: PPUSH
46218: LD_VAR 0 4
46222: PPUSH
46223: CALL_OW 1
46227: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46228: LD_ADDR_VAR 0 2
46232: PUSH
46233: LD_VAR 0 2
46237: PPUSH
46238: LD_INT 4
46240: PPUSH
46241: LD_VAR 0 2
46245: PUSH
46246: LD_INT 4
46248: ARRAY
46249: PUSH
46250: LD_VAR 0 4
46254: PLUS
46255: PPUSH
46256: CALL_OW 1
46260: ST_TO_ADDR
// end ;
46261: GO 46180
46263: POP
46264: POP
// end ;
46265: LD_VAR 0 2
46269: RET
// export function Length ( array ) ; begin
46270: LD_INT 0
46272: PPUSH
// result := array + 0 ;
46273: LD_ADDR_VAR 0 2
46277: PUSH
46278: LD_VAR 0 1
46282: PUSH
46283: LD_INT 0
46285: PLUS
46286: ST_TO_ADDR
// end ;
46287: LD_VAR 0 2
46291: RET
// export function PrepareArray ( array ) ; begin
46292: LD_INT 0
46294: PPUSH
// result := array diff 0 ;
46295: LD_ADDR_VAR 0 2
46299: PUSH
46300: LD_VAR 0 1
46304: PUSH
46305: LD_INT 0
46307: DIFF
46308: ST_TO_ADDR
// if not result [ 1 ] then
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 1
46316: ARRAY
46317: NOT
46318: IFFALSE 46338
// result := Delete ( result , 1 ) ;
46320: LD_ADDR_VAR 0 2
46324: PUSH
46325: LD_VAR 0 2
46329: PPUSH
46330: LD_INT 1
46332: PPUSH
46333: CALL_OW 3
46337: ST_TO_ADDR
// end ;
46338: LD_VAR 0 2
46342: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46343: LD_INT 0
46345: PPUSH
46346: PPUSH
46347: PPUSH
46348: PPUSH
// sibRocketRange := 25 ;
46349: LD_ADDR_VAR 0 6
46353: PUSH
46354: LD_INT 25
46356: ST_TO_ADDR
// result := false ;
46357: LD_ADDR_VAR 0 4
46361: PUSH
46362: LD_INT 0
46364: ST_TO_ADDR
// for i := 0 to 5 do
46365: LD_ADDR_VAR 0 5
46369: PUSH
46370: DOUBLE
46371: LD_INT 0
46373: DEC
46374: ST_TO_ADDR
46375: LD_INT 5
46377: PUSH
46378: FOR_TO
46379: IFFALSE 46446
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46381: LD_VAR 0 1
46385: PPUSH
46386: LD_VAR 0 5
46390: PPUSH
46391: LD_VAR 0 6
46395: PPUSH
46396: CALL_OW 272
46400: PPUSH
46401: LD_VAR 0 2
46405: PPUSH
46406: LD_VAR 0 5
46410: PPUSH
46411: LD_VAR 0 6
46415: PPUSH
46416: CALL_OW 273
46420: PPUSH
46421: LD_VAR 0 3
46425: PPUSH
46426: CALL_OW 309
46430: IFFALSE 46444
// begin result := true ;
46432: LD_ADDR_VAR 0 4
46436: PUSH
46437: LD_INT 1
46439: ST_TO_ADDR
// exit ;
46440: POP
46441: POP
46442: GO 46448
// end ;
46444: GO 46378
46446: POP
46447: POP
// end ;
46448: LD_VAR 0 4
46452: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
46453: LD_INT 0
46455: PPUSH
46456: PPUSH
46457: PPUSH
// if btype = b_depot then
46458: LD_VAR 0 2
46462: PUSH
46463: LD_INT 0
46465: EQUAL
46466: IFFALSE 46478
// begin result := true ;
46468: LD_ADDR_VAR 0 3
46472: PUSH
46473: LD_INT 1
46475: ST_TO_ADDR
// exit ;
46476: GO 46594
// end ; pom := GetBase ( depot ) ;
46478: LD_ADDR_VAR 0 4
46482: PUSH
46483: LD_VAR 0 1
46487: PPUSH
46488: CALL_OW 274
46492: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46493: LD_ADDR_VAR 0 5
46497: PUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: LD_VAR 0 1
46507: PPUSH
46508: CALL_OW 248
46512: PPUSH
46513: CALL_OW 450
46517: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
46518: LD_ADDR_VAR 0 3
46522: PUSH
46523: LD_VAR 0 4
46527: PPUSH
46528: LD_INT 1
46530: PPUSH
46531: CALL_OW 275
46535: PUSH
46536: LD_VAR 0 5
46540: PUSH
46541: LD_INT 1
46543: ARRAY
46544: GREATEREQUAL
46545: PUSH
46546: LD_VAR 0 4
46550: PPUSH
46551: LD_INT 2
46553: PPUSH
46554: CALL_OW 275
46558: PUSH
46559: LD_VAR 0 5
46563: PUSH
46564: LD_INT 2
46566: ARRAY
46567: GREATEREQUAL
46568: AND
46569: PUSH
46570: LD_VAR 0 4
46574: PPUSH
46575: LD_INT 3
46577: PPUSH
46578: CALL_OW 275
46582: PUSH
46583: LD_VAR 0 5
46587: PUSH
46588: LD_INT 3
46590: ARRAY
46591: GREATEREQUAL
46592: AND
46593: ST_TO_ADDR
// end ;
46594: LD_VAR 0 3
46598: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46599: LD_INT 0
46601: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46602: LD_VAR 0 1
46606: PPUSH
46607: LD_VAR 0 2
46611: PPUSH
46612: LD_INT 0
46614: PPUSH
46615: LD_INT 0
46617: PPUSH
46618: LD_INT 1
46620: PPUSH
46621: LD_INT 0
46623: PPUSH
46624: CALL_OW 587
// end ;
46628: LD_VAR 0 3
46632: RET
// export function CenterOnNow ( unit ) ; begin
46633: LD_INT 0
46635: PPUSH
// result := IsInUnit ( unit ) ;
46636: LD_ADDR_VAR 0 2
46640: PUSH
46641: LD_VAR 0 1
46645: PPUSH
46646: CALL_OW 310
46650: ST_TO_ADDR
// if not result then
46651: LD_VAR 0 2
46655: NOT
46656: IFFALSE 46668
// result := unit ;
46658: LD_ADDR_VAR 0 2
46662: PUSH
46663: LD_VAR 0 1
46667: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46668: LD_VAR 0 1
46672: PPUSH
46673: CALL_OW 87
// end ;
46677: LD_VAR 0 2
46681: RET
// export function ComMoveHex ( unit , hex ) ; begin
46682: LD_INT 0
46684: PPUSH
// if not hex then
46685: LD_VAR 0 2
46689: NOT
46690: IFFALSE 46694
// exit ;
46692: GO 46747
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46694: LD_VAR 0 2
46698: PUSH
46699: LD_INT 1
46701: ARRAY
46702: PPUSH
46703: LD_VAR 0 2
46707: PUSH
46708: LD_INT 2
46710: ARRAY
46711: PPUSH
46712: CALL_OW 428
46716: IFFALSE 46720
// exit ;
46718: GO 46747
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46720: LD_VAR 0 1
46724: PPUSH
46725: LD_VAR 0 2
46729: PUSH
46730: LD_INT 1
46732: ARRAY
46733: PPUSH
46734: LD_VAR 0 2
46738: PUSH
46739: LD_INT 2
46741: ARRAY
46742: PPUSH
46743: CALL_OW 111
// end ;
46747: LD_VAR 0 3
46751: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46752: LD_INT 0
46754: PPUSH
46755: PPUSH
46756: PPUSH
// if not unit or not enemy then
46757: LD_VAR 0 1
46761: NOT
46762: PUSH
46763: LD_VAR 0 2
46767: NOT
46768: OR
46769: IFFALSE 46773
// exit ;
46771: GO 46897
// x := GetX ( enemy ) ;
46773: LD_ADDR_VAR 0 4
46777: PUSH
46778: LD_VAR 0 2
46782: PPUSH
46783: CALL_OW 250
46787: ST_TO_ADDR
// y := GetY ( enemy ) ;
46788: LD_ADDR_VAR 0 5
46792: PUSH
46793: LD_VAR 0 2
46797: PPUSH
46798: CALL_OW 251
46802: ST_TO_ADDR
// if ValidHex ( x , y ) then
46803: LD_VAR 0 4
46807: PPUSH
46808: LD_VAR 0 5
46812: PPUSH
46813: CALL_OW 488
46817: IFFALSE 46897
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46819: LD_VAR 0 2
46823: PPUSH
46824: CALL_OW 247
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: IN
46839: PUSH
46840: LD_VAR 0 1
46844: PPUSH
46845: CALL_OW 255
46849: PPUSH
46850: LD_VAR 0 2
46854: PPUSH
46855: CALL_OW 292
46859: OR
46860: IFFALSE 46878
// ComAttackUnit ( unit , enemy ) else
46862: LD_VAR 0 1
46866: PPUSH
46867: LD_VAR 0 2
46871: PPUSH
46872: CALL_OW 115
46876: GO 46897
// ComAgressiveMove ( unit , x , y ) ;
46878: LD_VAR 0 1
46882: PPUSH
46883: LD_VAR 0 4
46887: PPUSH
46888: LD_VAR 0 5
46892: PPUSH
46893: CALL_OW 114
// end ;
46897: LD_VAR 0 3
46901: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46902: LD_INT 0
46904: PPUSH
46905: PPUSH
46906: PPUSH
// list := AreaToList ( area , 0 ) ;
46907: LD_ADDR_VAR 0 5
46911: PUSH
46912: LD_VAR 0 1
46916: PPUSH
46917: LD_INT 0
46919: PPUSH
46920: CALL_OW 517
46924: ST_TO_ADDR
// if not list then
46925: LD_VAR 0 5
46929: NOT
46930: IFFALSE 46934
// exit ;
46932: GO 47064
// if all then
46934: LD_VAR 0 2
46938: IFFALSE 47026
// begin for i := 1 to list [ 1 ] do
46940: LD_ADDR_VAR 0 4
46944: PUSH
46945: DOUBLE
46946: LD_INT 1
46948: DEC
46949: ST_TO_ADDR
46950: LD_VAR 0 5
46954: PUSH
46955: LD_INT 1
46957: ARRAY
46958: PUSH
46959: FOR_TO
46960: IFFALSE 47022
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46962: LD_ADDR_VAR 0 3
46966: PUSH
46967: LD_VAR 0 3
46971: PPUSH
46972: LD_VAR 0 3
46976: PUSH
46977: LD_INT 1
46979: PLUS
46980: PPUSH
46981: LD_VAR 0 5
46985: PUSH
46986: LD_INT 1
46988: ARRAY
46989: PUSH
46990: LD_VAR 0 4
46994: ARRAY
46995: PUSH
46996: LD_VAR 0 5
47000: PUSH
47001: LD_INT 2
47003: ARRAY
47004: PUSH
47005: LD_VAR 0 4
47009: ARRAY
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PPUSH
47015: CALL_OW 1
47019: ST_TO_ADDR
47020: GO 46959
47022: POP
47023: POP
// exit ;
47024: GO 47064
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
47026: LD_ADDR_VAR 0 3
47030: PUSH
47031: LD_VAR 0 5
47035: PUSH
47036: LD_INT 1
47038: ARRAY
47039: PUSH
47040: LD_INT 1
47042: ARRAY
47043: PUSH
47044: LD_VAR 0 5
47048: PUSH
47049: LD_INT 2
47051: ARRAY
47052: PUSH
47053: LD_INT 1
47055: ARRAY
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: EMPTY
47062: LIST
47063: ST_TO_ADDR
// end ;
47064: LD_VAR 0 3
47068: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
47069: LD_INT 0
47071: PPUSH
47072: PPUSH
// list := AreaToList ( area , 0 ) ;
47073: LD_ADDR_VAR 0 4
47077: PUSH
47078: LD_VAR 0 1
47082: PPUSH
47083: LD_INT 0
47085: PPUSH
47086: CALL_OW 517
47090: ST_TO_ADDR
// if not list then
47091: LD_VAR 0 4
47095: NOT
47096: IFFALSE 47100
// exit ;
47098: GO 47141
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
47100: LD_ADDR_VAR 0 3
47104: PUSH
47105: LD_VAR 0 4
47109: PUSH
47110: LD_INT 1
47112: ARRAY
47113: PUSH
47114: LD_INT 1
47116: ARRAY
47117: PUSH
47118: LD_VAR 0 4
47122: PUSH
47123: LD_INT 2
47125: ARRAY
47126: PUSH
47127: LD_INT 1
47129: ARRAY
47130: PUSH
47131: LD_VAR 0 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: ST_TO_ADDR
// end ;
47141: LD_VAR 0 3
47145: RET
// export function First ( array ) ; begin
47146: LD_INT 0
47148: PPUSH
// if not array then
47149: LD_VAR 0 1
47153: NOT
47154: IFFALSE 47158
// exit ;
47156: GO 47172
// result := array [ 1 ] ;
47158: LD_ADDR_VAR 0 2
47162: PUSH
47163: LD_VAR 0 1
47167: PUSH
47168: LD_INT 1
47170: ARRAY
47171: ST_TO_ADDR
// end ;
47172: LD_VAR 0 2
47176: RET
// export function Last ( array ) ; begin
47177: LD_INT 0
47179: PPUSH
// if not array then
47180: LD_VAR 0 1
47184: NOT
47185: IFFALSE 47189
// exit ;
47187: GO 47205
// result := array [ array ] ;
47189: LD_ADDR_VAR 0 2
47193: PUSH
47194: LD_VAR 0 1
47198: PUSH
47199: LD_VAR 0 1
47203: ARRAY
47204: ST_TO_ADDR
// end ;
47205: LD_VAR 0 2
47209: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
47210: LD_INT 0
47212: PPUSH
47213: PPUSH
// result := [ ] ;
47214: LD_ADDR_VAR 0 5
47218: PUSH
47219: EMPTY
47220: ST_TO_ADDR
// if not array then
47221: LD_VAR 0 1
47225: NOT
47226: IFFALSE 47230
// exit ;
47228: GO 47342
// for i := 1 to array do
47230: LD_ADDR_VAR 0 6
47234: PUSH
47235: DOUBLE
47236: LD_INT 1
47238: DEC
47239: ST_TO_ADDR
47240: LD_VAR 0 1
47244: PUSH
47245: FOR_TO
47246: IFFALSE 47340
// if array [ i ] [ index ] = value then
47248: LD_VAR 0 1
47252: PUSH
47253: LD_VAR 0 6
47257: ARRAY
47258: PUSH
47259: LD_VAR 0 2
47263: ARRAY
47264: PUSH
47265: LD_VAR 0 3
47269: EQUAL
47270: IFFALSE 47338
// begin if indexColumn then
47272: LD_VAR 0 4
47276: IFFALSE 47312
// result := Join ( result , array [ i ] [ indexColumn ] ) else
47278: LD_ADDR_VAR 0 5
47282: PUSH
47283: LD_VAR 0 5
47287: PPUSH
47288: LD_VAR 0 1
47292: PUSH
47293: LD_VAR 0 6
47297: ARRAY
47298: PUSH
47299: LD_VAR 0 4
47303: ARRAY
47304: PPUSH
47305: CALL 42524 0 2
47309: ST_TO_ADDR
47310: GO 47338
// result := Join ( result , array [ i ] ) ;
47312: LD_ADDR_VAR 0 5
47316: PUSH
47317: LD_VAR 0 5
47321: PPUSH
47322: LD_VAR 0 1
47326: PUSH
47327: LD_VAR 0 6
47331: ARRAY
47332: PPUSH
47333: CALL 42524 0 2
47337: ST_TO_ADDR
// end ;
47338: GO 47245
47340: POP
47341: POP
// end ;
47342: LD_VAR 0 5
47346: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
47347: LD_INT 0
47349: PPUSH
// if not vehicles or not parkingPoint then
47350: LD_VAR 0 1
47354: NOT
47355: PUSH
47356: LD_VAR 0 2
47360: NOT
47361: OR
47362: IFFALSE 47366
// exit ;
47364: GO 47464
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
47366: LD_ADDR_VAR 0 1
47370: PUSH
47371: LD_VAR 0 1
47375: PPUSH
47376: LD_INT 50
47378: PUSH
47379: EMPTY
47380: LIST
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: LD_INT 92
47387: PUSH
47388: LD_VAR 0 2
47392: PUSH
47393: LD_INT 1
47395: ARRAY
47396: PUSH
47397: LD_VAR 0 2
47401: PUSH
47402: LD_INT 2
47404: ARRAY
47405: PUSH
47406: LD_INT 8
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PPUSH
47423: CALL_OW 72
47427: ST_TO_ADDR
// if not vehicles then
47428: LD_VAR 0 1
47432: NOT
47433: IFFALSE 47437
// exit ;
47435: GO 47464
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
47437: LD_VAR 0 1
47441: PPUSH
47442: LD_VAR 0 2
47446: PUSH
47447: LD_INT 1
47449: ARRAY
47450: PPUSH
47451: LD_VAR 0 2
47455: PUSH
47456: LD_INT 2
47458: ARRAY
47459: PPUSH
47460: CALL_OW 111
// end ;
47464: LD_VAR 0 3
47468: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
47469: LD_INT 0
47471: PPUSH
47472: PPUSH
47473: PPUSH
// if not side or not area then
47474: LD_VAR 0 1
47478: NOT
47479: PUSH
47480: LD_VAR 0 2
47484: NOT
47485: OR
47486: IFFALSE 47490
// exit ;
47488: GO 47609
// tmp := AreaToList ( area , 0 ) ;
47490: LD_ADDR_VAR 0 5
47494: PUSH
47495: LD_VAR 0 2
47499: PPUSH
47500: LD_INT 0
47502: PPUSH
47503: CALL_OW 517
47507: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
47508: LD_ADDR_VAR 0 4
47512: PUSH
47513: DOUBLE
47514: LD_INT 1
47516: DEC
47517: ST_TO_ADDR
47518: LD_VAR 0 5
47522: PUSH
47523: LD_INT 1
47525: ARRAY
47526: PUSH
47527: FOR_TO
47528: IFFALSE 47607
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
47530: LD_VAR 0 5
47534: PUSH
47535: LD_INT 1
47537: ARRAY
47538: PUSH
47539: LD_VAR 0 4
47543: ARRAY
47544: PPUSH
47545: LD_VAR 0 5
47549: PUSH
47550: LD_INT 2
47552: ARRAY
47553: PUSH
47554: LD_VAR 0 4
47558: ARRAY
47559: PPUSH
47560: CALL_OW 351
47564: IFFALSE 47605
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47566: LD_VAR 0 5
47570: PUSH
47571: LD_INT 1
47573: ARRAY
47574: PUSH
47575: LD_VAR 0 4
47579: ARRAY
47580: PPUSH
47581: LD_VAR 0 5
47585: PUSH
47586: LD_INT 2
47588: ARRAY
47589: PUSH
47590: LD_VAR 0 4
47594: ARRAY
47595: PPUSH
47596: LD_VAR 0 1
47600: PPUSH
47601: CALL_OW 244
// end ;
47605: GO 47527
47607: POP
47608: POP
// end ; end_of_file end_of_file
47609: LD_VAR 0 3
47613: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47614: LD_VAR 0 1
47618: PPUSH
47619: LD_VAR 0 2
47623: PPUSH
47624: LD_VAR 0 3
47628: PPUSH
47629: LD_VAR 0 4
47633: PPUSH
47634: LD_VAR 0 5
47638: PPUSH
47639: LD_VAR 0 6
47643: PPUSH
47644: CALL 47845 0 6
// end ;
47648: PPOPN 6
47650: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
47651: LD_INT 0
47653: PPUSH
// begin if not units then
47654: LD_VAR 0 1
47658: NOT
47659: IFFALSE 47663
// exit ;
47661: GO 47663
// end ;
47663: PPOPN 7
47665: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
47666: CALL 47732 0 0
// end ; end_of_file
47670: PPOPN 1
47672: END
// export globalGameSaveCounter ; every 0 0$1 do
47673: GO 47675
47675: DISABLE
// begin enable ;
47676: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47677: LD_STRING updateTimer(
47679: PUSH
47680: LD_OWVAR 1
47684: STR
47685: PUSH
47686: LD_STRING );
47688: STR
47689: PPUSH
47690: CALL_OW 559
// end ;
47694: END
// every 0 0$1 do
47695: GO 47697
47697: DISABLE
// begin globalGameSaveCounter := 0 ;
47698: LD_ADDR_EXP 27
47702: PUSH
47703: LD_INT 0
47705: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47706: LD_STRING setGameSaveCounter(0)
47708: PPUSH
47709: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47713: LD_STRING initStreamRollete();
47715: PPUSH
47716: CALL_OW 559
// InitStreamMode ;
47720: CALL 49063 0 0
// DefineStreamItems ( false ) ;
47724: LD_INT 0
47726: PPUSH
47727: CALL 49527 0 1
// end ;
47731: END
// export function SOS_MapStart ( ) ; begin
47732: LD_INT 0
47734: PPUSH
// if streamModeActive then
47735: LD_EXP 28
47739: IFFALSE 47748
// DefineStreamItems ( true ) ;
47741: LD_INT 1
47743: PPUSH
47744: CALL 49527 0 1
// UpdateLuaVariables ( ) ;
47748: CALL 47765 0 0
// UpdateFactoryWaypoints ( ) ;
47752: CALL 62529 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47756: CALL 62781 0 0
// end ;
47760: LD_VAR 0 1
47764: RET
// function UpdateLuaVariables ( ) ; begin
47765: LD_INT 0
47767: PPUSH
// if globalGameSaveCounter then
47768: LD_EXP 27
47772: IFFALSE 47806
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47774: LD_ADDR_EXP 27
47778: PUSH
47779: LD_EXP 27
47783: PPUSH
47784: CALL 43885 0 1
47788: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47789: LD_STRING setGameSaveCounter(
47791: PUSH
47792: LD_EXP 27
47796: STR
47797: PUSH
47798: LD_STRING )
47800: STR
47801: PPUSH
47802: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47806: LD_STRING setGameDifficulty(
47808: PUSH
47809: LD_OWVAR 67
47813: STR
47814: PUSH
47815: LD_STRING )
47817: STR
47818: PPUSH
47819: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
47823: LD_STRING displayDifficulty(
47825: PUSH
47826: LD_OWVAR 67
47830: STR
47831: PUSH
47832: LD_STRING )
47834: STR
47835: PPUSH
47836: CALL_OW 559
// end ;
47840: LD_VAR 0 1
47844: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47845: LD_INT 0
47847: PPUSH
// if p2 = stream_mode then
47848: LD_VAR 0 2
47852: PUSH
47853: LD_INT 100
47855: EQUAL
47856: IFFALSE 48859
// begin if not StreamModeActive then
47858: LD_EXP 28
47862: NOT
47863: IFFALSE 47873
// StreamModeActive := true ;
47865: LD_ADDR_EXP 28
47869: PUSH
47870: LD_INT 1
47872: ST_TO_ADDR
// if p3 = 0 then
47873: LD_VAR 0 3
47877: PUSH
47878: LD_INT 0
47880: EQUAL
47881: IFFALSE 47887
// InitStreamMode ;
47883: CALL 49063 0 0
// if p3 = 1 then
47887: LD_VAR 0 3
47891: PUSH
47892: LD_INT 1
47894: EQUAL
47895: IFFALSE 47905
// sRocket := true ;
47897: LD_ADDR_EXP 33
47901: PUSH
47902: LD_INT 1
47904: ST_TO_ADDR
// if p3 = 2 then
47905: LD_VAR 0 3
47909: PUSH
47910: LD_INT 2
47912: EQUAL
47913: IFFALSE 47923
// sSpeed := true ;
47915: LD_ADDR_EXP 32
47919: PUSH
47920: LD_INT 1
47922: ST_TO_ADDR
// if p3 = 3 then
47923: LD_VAR 0 3
47927: PUSH
47928: LD_INT 3
47930: EQUAL
47931: IFFALSE 47941
// sEngine := true ;
47933: LD_ADDR_EXP 34
47937: PUSH
47938: LD_INT 1
47940: ST_TO_ADDR
// if p3 = 4 then
47941: LD_VAR 0 3
47945: PUSH
47946: LD_INT 4
47948: EQUAL
47949: IFFALSE 47959
// sSpec := true ;
47951: LD_ADDR_EXP 31
47955: PUSH
47956: LD_INT 1
47958: ST_TO_ADDR
// if p3 = 5 then
47959: LD_VAR 0 3
47963: PUSH
47964: LD_INT 5
47966: EQUAL
47967: IFFALSE 47977
// sLevel := true ;
47969: LD_ADDR_EXP 35
47973: PUSH
47974: LD_INT 1
47976: ST_TO_ADDR
// if p3 = 6 then
47977: LD_VAR 0 3
47981: PUSH
47982: LD_INT 6
47984: EQUAL
47985: IFFALSE 47995
// sArmoury := true ;
47987: LD_ADDR_EXP 36
47991: PUSH
47992: LD_INT 1
47994: ST_TO_ADDR
// if p3 = 7 then
47995: LD_VAR 0 3
47999: PUSH
48000: LD_INT 7
48002: EQUAL
48003: IFFALSE 48013
// sRadar := true ;
48005: LD_ADDR_EXP 37
48009: PUSH
48010: LD_INT 1
48012: ST_TO_ADDR
// if p3 = 8 then
48013: LD_VAR 0 3
48017: PUSH
48018: LD_INT 8
48020: EQUAL
48021: IFFALSE 48031
// sBunker := true ;
48023: LD_ADDR_EXP 38
48027: PUSH
48028: LD_INT 1
48030: ST_TO_ADDR
// if p3 = 9 then
48031: LD_VAR 0 3
48035: PUSH
48036: LD_INT 9
48038: EQUAL
48039: IFFALSE 48049
// sHack := true ;
48041: LD_ADDR_EXP 39
48045: PUSH
48046: LD_INT 1
48048: ST_TO_ADDR
// if p3 = 10 then
48049: LD_VAR 0 3
48053: PUSH
48054: LD_INT 10
48056: EQUAL
48057: IFFALSE 48067
// sFire := true ;
48059: LD_ADDR_EXP 40
48063: PUSH
48064: LD_INT 1
48066: ST_TO_ADDR
// if p3 = 11 then
48067: LD_VAR 0 3
48071: PUSH
48072: LD_INT 11
48074: EQUAL
48075: IFFALSE 48085
// sRefresh := true ;
48077: LD_ADDR_EXP 41
48081: PUSH
48082: LD_INT 1
48084: ST_TO_ADDR
// if p3 = 12 then
48085: LD_VAR 0 3
48089: PUSH
48090: LD_INT 12
48092: EQUAL
48093: IFFALSE 48103
// sExp := true ;
48095: LD_ADDR_EXP 42
48099: PUSH
48100: LD_INT 1
48102: ST_TO_ADDR
// if p3 = 13 then
48103: LD_VAR 0 3
48107: PUSH
48108: LD_INT 13
48110: EQUAL
48111: IFFALSE 48121
// sDepot := true ;
48113: LD_ADDR_EXP 43
48117: PUSH
48118: LD_INT 1
48120: ST_TO_ADDR
// if p3 = 14 then
48121: LD_VAR 0 3
48125: PUSH
48126: LD_INT 14
48128: EQUAL
48129: IFFALSE 48139
// sFlag := true ;
48131: LD_ADDR_EXP 44
48135: PUSH
48136: LD_INT 1
48138: ST_TO_ADDR
// if p3 = 15 then
48139: LD_VAR 0 3
48143: PUSH
48144: LD_INT 15
48146: EQUAL
48147: IFFALSE 48157
// sKamikadze := true ;
48149: LD_ADDR_EXP 52
48153: PUSH
48154: LD_INT 1
48156: ST_TO_ADDR
// if p3 = 16 then
48157: LD_VAR 0 3
48161: PUSH
48162: LD_INT 16
48164: EQUAL
48165: IFFALSE 48175
// sTroll := true ;
48167: LD_ADDR_EXP 53
48171: PUSH
48172: LD_INT 1
48174: ST_TO_ADDR
// if p3 = 17 then
48175: LD_VAR 0 3
48179: PUSH
48180: LD_INT 17
48182: EQUAL
48183: IFFALSE 48193
// sSlow := true ;
48185: LD_ADDR_EXP 54
48189: PUSH
48190: LD_INT 1
48192: ST_TO_ADDR
// if p3 = 18 then
48193: LD_VAR 0 3
48197: PUSH
48198: LD_INT 18
48200: EQUAL
48201: IFFALSE 48211
// sLack := true ;
48203: LD_ADDR_EXP 55
48207: PUSH
48208: LD_INT 1
48210: ST_TO_ADDR
// if p3 = 19 then
48211: LD_VAR 0 3
48215: PUSH
48216: LD_INT 19
48218: EQUAL
48219: IFFALSE 48229
// sTank := true ;
48221: LD_ADDR_EXP 57
48225: PUSH
48226: LD_INT 1
48228: ST_TO_ADDR
// if p3 = 20 then
48229: LD_VAR 0 3
48233: PUSH
48234: LD_INT 20
48236: EQUAL
48237: IFFALSE 48247
// sRemote := true ;
48239: LD_ADDR_EXP 58
48243: PUSH
48244: LD_INT 1
48246: ST_TO_ADDR
// if p3 = 21 then
48247: LD_VAR 0 3
48251: PUSH
48252: LD_INT 21
48254: EQUAL
48255: IFFALSE 48265
// sPowell := true ;
48257: LD_ADDR_EXP 59
48261: PUSH
48262: LD_INT 1
48264: ST_TO_ADDR
// if p3 = 22 then
48265: LD_VAR 0 3
48269: PUSH
48270: LD_INT 22
48272: EQUAL
48273: IFFALSE 48283
// sTeleport := true ;
48275: LD_ADDR_EXP 62
48279: PUSH
48280: LD_INT 1
48282: ST_TO_ADDR
// if p3 = 23 then
48283: LD_VAR 0 3
48287: PUSH
48288: LD_INT 23
48290: EQUAL
48291: IFFALSE 48301
// sOilTower := true ;
48293: LD_ADDR_EXP 64
48297: PUSH
48298: LD_INT 1
48300: ST_TO_ADDR
// if p3 = 24 then
48301: LD_VAR 0 3
48305: PUSH
48306: LD_INT 24
48308: EQUAL
48309: IFFALSE 48319
// sShovel := true ;
48311: LD_ADDR_EXP 65
48315: PUSH
48316: LD_INT 1
48318: ST_TO_ADDR
// if p3 = 25 then
48319: LD_VAR 0 3
48323: PUSH
48324: LD_INT 25
48326: EQUAL
48327: IFFALSE 48337
// sSheik := true ;
48329: LD_ADDR_EXP 66
48333: PUSH
48334: LD_INT 1
48336: ST_TO_ADDR
// if p3 = 26 then
48337: LD_VAR 0 3
48341: PUSH
48342: LD_INT 26
48344: EQUAL
48345: IFFALSE 48355
// sEarthquake := true ;
48347: LD_ADDR_EXP 68
48351: PUSH
48352: LD_INT 1
48354: ST_TO_ADDR
// if p3 = 27 then
48355: LD_VAR 0 3
48359: PUSH
48360: LD_INT 27
48362: EQUAL
48363: IFFALSE 48373
// sAI := true ;
48365: LD_ADDR_EXP 69
48369: PUSH
48370: LD_INT 1
48372: ST_TO_ADDR
// if p3 = 28 then
48373: LD_VAR 0 3
48377: PUSH
48378: LD_INT 28
48380: EQUAL
48381: IFFALSE 48391
// sCargo := true ;
48383: LD_ADDR_EXP 72
48387: PUSH
48388: LD_INT 1
48390: ST_TO_ADDR
// if p3 = 29 then
48391: LD_VAR 0 3
48395: PUSH
48396: LD_INT 29
48398: EQUAL
48399: IFFALSE 48409
// sDLaser := true ;
48401: LD_ADDR_EXP 73
48405: PUSH
48406: LD_INT 1
48408: ST_TO_ADDR
// if p3 = 30 then
48409: LD_VAR 0 3
48413: PUSH
48414: LD_INT 30
48416: EQUAL
48417: IFFALSE 48427
// sExchange := true ;
48419: LD_ADDR_EXP 74
48423: PUSH
48424: LD_INT 1
48426: ST_TO_ADDR
// if p3 = 31 then
48427: LD_VAR 0 3
48431: PUSH
48432: LD_INT 31
48434: EQUAL
48435: IFFALSE 48445
// sFac := true ;
48437: LD_ADDR_EXP 75
48441: PUSH
48442: LD_INT 1
48444: ST_TO_ADDR
// if p3 = 32 then
48445: LD_VAR 0 3
48449: PUSH
48450: LD_INT 32
48452: EQUAL
48453: IFFALSE 48463
// sPower := true ;
48455: LD_ADDR_EXP 76
48459: PUSH
48460: LD_INT 1
48462: ST_TO_ADDR
// if p3 = 33 then
48463: LD_VAR 0 3
48467: PUSH
48468: LD_INT 33
48470: EQUAL
48471: IFFALSE 48481
// sRandom := true ;
48473: LD_ADDR_EXP 77
48477: PUSH
48478: LD_INT 1
48480: ST_TO_ADDR
// if p3 = 34 then
48481: LD_VAR 0 3
48485: PUSH
48486: LD_INT 34
48488: EQUAL
48489: IFFALSE 48499
// sShield := true ;
48491: LD_ADDR_EXP 78
48495: PUSH
48496: LD_INT 1
48498: ST_TO_ADDR
// if p3 = 35 then
48499: LD_VAR 0 3
48503: PUSH
48504: LD_INT 35
48506: EQUAL
48507: IFFALSE 48517
// sTime := true ;
48509: LD_ADDR_EXP 79
48513: PUSH
48514: LD_INT 1
48516: ST_TO_ADDR
// if p3 = 36 then
48517: LD_VAR 0 3
48521: PUSH
48522: LD_INT 36
48524: EQUAL
48525: IFFALSE 48535
// sTools := true ;
48527: LD_ADDR_EXP 80
48531: PUSH
48532: LD_INT 1
48534: ST_TO_ADDR
// if p3 = 101 then
48535: LD_VAR 0 3
48539: PUSH
48540: LD_INT 101
48542: EQUAL
48543: IFFALSE 48553
// sSold := true ;
48545: LD_ADDR_EXP 45
48549: PUSH
48550: LD_INT 1
48552: ST_TO_ADDR
// if p3 = 102 then
48553: LD_VAR 0 3
48557: PUSH
48558: LD_INT 102
48560: EQUAL
48561: IFFALSE 48571
// sDiff := true ;
48563: LD_ADDR_EXP 46
48567: PUSH
48568: LD_INT 1
48570: ST_TO_ADDR
// if p3 = 103 then
48571: LD_VAR 0 3
48575: PUSH
48576: LD_INT 103
48578: EQUAL
48579: IFFALSE 48589
// sFog := true ;
48581: LD_ADDR_EXP 49
48585: PUSH
48586: LD_INT 1
48588: ST_TO_ADDR
// if p3 = 104 then
48589: LD_VAR 0 3
48593: PUSH
48594: LD_INT 104
48596: EQUAL
48597: IFFALSE 48607
// sReset := true ;
48599: LD_ADDR_EXP 50
48603: PUSH
48604: LD_INT 1
48606: ST_TO_ADDR
// if p3 = 105 then
48607: LD_VAR 0 3
48611: PUSH
48612: LD_INT 105
48614: EQUAL
48615: IFFALSE 48625
// sSun := true ;
48617: LD_ADDR_EXP 51
48621: PUSH
48622: LD_INT 1
48624: ST_TO_ADDR
// if p3 = 106 then
48625: LD_VAR 0 3
48629: PUSH
48630: LD_INT 106
48632: EQUAL
48633: IFFALSE 48643
// sTiger := true ;
48635: LD_ADDR_EXP 47
48639: PUSH
48640: LD_INT 1
48642: ST_TO_ADDR
// if p3 = 107 then
48643: LD_VAR 0 3
48647: PUSH
48648: LD_INT 107
48650: EQUAL
48651: IFFALSE 48661
// sBomb := true ;
48653: LD_ADDR_EXP 48
48657: PUSH
48658: LD_INT 1
48660: ST_TO_ADDR
// if p3 = 108 then
48661: LD_VAR 0 3
48665: PUSH
48666: LD_INT 108
48668: EQUAL
48669: IFFALSE 48679
// sWound := true ;
48671: LD_ADDR_EXP 56
48675: PUSH
48676: LD_INT 1
48678: ST_TO_ADDR
// if p3 = 109 then
48679: LD_VAR 0 3
48683: PUSH
48684: LD_INT 109
48686: EQUAL
48687: IFFALSE 48697
// sBetray := true ;
48689: LD_ADDR_EXP 60
48693: PUSH
48694: LD_INT 1
48696: ST_TO_ADDR
// if p3 = 110 then
48697: LD_VAR 0 3
48701: PUSH
48702: LD_INT 110
48704: EQUAL
48705: IFFALSE 48715
// sContamin := true ;
48707: LD_ADDR_EXP 61
48711: PUSH
48712: LD_INT 1
48714: ST_TO_ADDR
// if p3 = 111 then
48715: LD_VAR 0 3
48719: PUSH
48720: LD_INT 111
48722: EQUAL
48723: IFFALSE 48733
// sOil := true ;
48725: LD_ADDR_EXP 63
48729: PUSH
48730: LD_INT 1
48732: ST_TO_ADDR
// if p3 = 112 then
48733: LD_VAR 0 3
48737: PUSH
48738: LD_INT 112
48740: EQUAL
48741: IFFALSE 48751
// sStu := true ;
48743: LD_ADDR_EXP 67
48747: PUSH
48748: LD_INT 1
48750: ST_TO_ADDR
// if p3 = 113 then
48751: LD_VAR 0 3
48755: PUSH
48756: LD_INT 113
48758: EQUAL
48759: IFFALSE 48769
// sBazooka := true ;
48761: LD_ADDR_EXP 70
48765: PUSH
48766: LD_INT 1
48768: ST_TO_ADDR
// if p3 = 114 then
48769: LD_VAR 0 3
48773: PUSH
48774: LD_INT 114
48776: EQUAL
48777: IFFALSE 48787
// sMortar := true ;
48779: LD_ADDR_EXP 71
48783: PUSH
48784: LD_INT 1
48786: ST_TO_ADDR
// if p3 = 115 then
48787: LD_VAR 0 3
48791: PUSH
48792: LD_INT 115
48794: EQUAL
48795: IFFALSE 48805
// sRanger := true ;
48797: LD_ADDR_EXP 81
48801: PUSH
48802: LD_INT 1
48804: ST_TO_ADDR
// if p3 = 116 then
48805: LD_VAR 0 3
48809: PUSH
48810: LD_INT 116
48812: EQUAL
48813: IFFALSE 48823
// sComputer := true ;
48815: LD_ADDR_EXP 82
48819: PUSH
48820: LD_INT 1
48822: ST_TO_ADDR
// if p3 = 117 then
48823: LD_VAR 0 3
48827: PUSH
48828: LD_INT 117
48830: EQUAL
48831: IFFALSE 48841
// s30 := true ;
48833: LD_ADDR_EXP 83
48837: PUSH
48838: LD_INT 1
48840: ST_TO_ADDR
// if p3 = 118 then
48841: LD_VAR 0 3
48845: PUSH
48846: LD_INT 118
48848: EQUAL
48849: IFFALSE 48859
// s60 := true ;
48851: LD_ADDR_EXP 84
48855: PUSH
48856: LD_INT 1
48858: ST_TO_ADDR
// end ; if p2 = hack_mode then
48859: LD_VAR 0 2
48863: PUSH
48864: LD_INT 101
48866: EQUAL
48867: IFFALSE 48995
// begin case p3 of 1 :
48869: LD_VAR 0 3
48873: PUSH
48874: LD_INT 1
48876: DOUBLE
48877: EQUAL
48878: IFTRUE 48882
48880: GO 48889
48882: POP
// hHackUnlimitedResources ; 2 :
48883: CALL 61142 0 0
48887: GO 48995
48889: LD_INT 2
48891: DOUBLE
48892: EQUAL
48893: IFTRUE 48897
48895: GO 48904
48897: POP
// hHackSetLevel10 ; 3 :
48898: CALL 61275 0 0
48902: GO 48995
48904: LD_INT 3
48906: DOUBLE
48907: EQUAL
48908: IFTRUE 48912
48910: GO 48919
48912: POP
// hHackSetLevel10YourUnits ; 4 :
48913: CALL 61360 0 0
48917: GO 48995
48919: LD_INT 4
48921: DOUBLE
48922: EQUAL
48923: IFTRUE 48927
48925: GO 48934
48927: POP
// hHackInvincible ; 5 :
48928: CALL 61808 0 0
48932: GO 48995
48934: LD_INT 5
48936: DOUBLE
48937: EQUAL
48938: IFTRUE 48942
48940: GO 48949
48942: POP
// hHackInvisible ; 6 :
48943: CALL 61919 0 0
48947: GO 48995
48949: LD_INT 6
48951: DOUBLE
48952: EQUAL
48953: IFTRUE 48957
48955: GO 48964
48957: POP
// hHackChangeYourSide ; 7 :
48958: CALL 61976 0 0
48962: GO 48995
48964: LD_INT 7
48966: DOUBLE
48967: EQUAL
48968: IFTRUE 48972
48970: GO 48979
48972: POP
// hHackChangeUnitSide ; 8 :
48973: CALL 62018 0 0
48977: GO 48995
48979: LD_INT 8
48981: DOUBLE
48982: EQUAL
48983: IFTRUE 48987
48985: GO 48994
48987: POP
// hHackFog ; end ;
48988: CALL 62119 0 0
48992: GO 48995
48994: POP
// end ; if p2 = game_save_mode then
48995: LD_VAR 0 2
48999: PUSH
49000: LD_INT 102
49002: EQUAL
49003: IFFALSE 49058
// begin if p3 = 1 then
49005: LD_VAR 0 3
49009: PUSH
49010: LD_INT 1
49012: EQUAL
49013: IFFALSE 49025
// globalGameSaveCounter := p4 ;
49015: LD_ADDR_EXP 27
49019: PUSH
49020: LD_VAR 0 4
49024: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49025: LD_VAR 0 3
49029: PUSH
49030: LD_INT 2
49032: EQUAL
49033: PUSH
49034: LD_EXP 27
49038: AND
49039: IFFALSE 49058
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49041: LD_STRING setGameSaveCounter(
49043: PUSH
49044: LD_EXP 27
49048: STR
49049: PUSH
49050: LD_STRING )
49052: STR
49053: PPUSH
49054: CALL_OW 559
// end ; end ;
49058: LD_VAR 0 7
49062: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49063: LD_INT 0
49065: PPUSH
// streamModeActive := false ;
49066: LD_ADDR_EXP 28
49070: PUSH
49071: LD_INT 0
49073: ST_TO_ADDR
// normalCounter := 36 ;
49074: LD_ADDR_EXP 29
49078: PUSH
49079: LD_INT 36
49081: ST_TO_ADDR
// hardcoreCounter := 18 ;
49082: LD_ADDR_EXP 30
49086: PUSH
49087: LD_INT 18
49089: ST_TO_ADDR
// sRocket := false ;
49090: LD_ADDR_EXP 33
49094: PUSH
49095: LD_INT 0
49097: ST_TO_ADDR
// sSpeed := false ;
49098: LD_ADDR_EXP 32
49102: PUSH
49103: LD_INT 0
49105: ST_TO_ADDR
// sEngine := false ;
49106: LD_ADDR_EXP 34
49110: PUSH
49111: LD_INT 0
49113: ST_TO_ADDR
// sSpec := false ;
49114: LD_ADDR_EXP 31
49118: PUSH
49119: LD_INT 0
49121: ST_TO_ADDR
// sLevel := false ;
49122: LD_ADDR_EXP 35
49126: PUSH
49127: LD_INT 0
49129: ST_TO_ADDR
// sArmoury := false ;
49130: LD_ADDR_EXP 36
49134: PUSH
49135: LD_INT 0
49137: ST_TO_ADDR
// sRadar := false ;
49138: LD_ADDR_EXP 37
49142: PUSH
49143: LD_INT 0
49145: ST_TO_ADDR
// sBunker := false ;
49146: LD_ADDR_EXP 38
49150: PUSH
49151: LD_INT 0
49153: ST_TO_ADDR
// sHack := false ;
49154: LD_ADDR_EXP 39
49158: PUSH
49159: LD_INT 0
49161: ST_TO_ADDR
// sFire := false ;
49162: LD_ADDR_EXP 40
49166: PUSH
49167: LD_INT 0
49169: ST_TO_ADDR
// sRefresh := false ;
49170: LD_ADDR_EXP 41
49174: PUSH
49175: LD_INT 0
49177: ST_TO_ADDR
// sExp := false ;
49178: LD_ADDR_EXP 42
49182: PUSH
49183: LD_INT 0
49185: ST_TO_ADDR
// sDepot := false ;
49186: LD_ADDR_EXP 43
49190: PUSH
49191: LD_INT 0
49193: ST_TO_ADDR
// sFlag := false ;
49194: LD_ADDR_EXP 44
49198: PUSH
49199: LD_INT 0
49201: ST_TO_ADDR
// sKamikadze := false ;
49202: LD_ADDR_EXP 52
49206: PUSH
49207: LD_INT 0
49209: ST_TO_ADDR
// sTroll := false ;
49210: LD_ADDR_EXP 53
49214: PUSH
49215: LD_INT 0
49217: ST_TO_ADDR
// sSlow := false ;
49218: LD_ADDR_EXP 54
49222: PUSH
49223: LD_INT 0
49225: ST_TO_ADDR
// sLack := false ;
49226: LD_ADDR_EXP 55
49230: PUSH
49231: LD_INT 0
49233: ST_TO_ADDR
// sTank := false ;
49234: LD_ADDR_EXP 57
49238: PUSH
49239: LD_INT 0
49241: ST_TO_ADDR
// sRemote := false ;
49242: LD_ADDR_EXP 58
49246: PUSH
49247: LD_INT 0
49249: ST_TO_ADDR
// sPowell := false ;
49250: LD_ADDR_EXP 59
49254: PUSH
49255: LD_INT 0
49257: ST_TO_ADDR
// sTeleport := false ;
49258: LD_ADDR_EXP 62
49262: PUSH
49263: LD_INT 0
49265: ST_TO_ADDR
// sOilTower := false ;
49266: LD_ADDR_EXP 64
49270: PUSH
49271: LD_INT 0
49273: ST_TO_ADDR
// sShovel := false ;
49274: LD_ADDR_EXP 65
49278: PUSH
49279: LD_INT 0
49281: ST_TO_ADDR
// sSheik := false ;
49282: LD_ADDR_EXP 66
49286: PUSH
49287: LD_INT 0
49289: ST_TO_ADDR
// sEarthquake := false ;
49290: LD_ADDR_EXP 68
49294: PUSH
49295: LD_INT 0
49297: ST_TO_ADDR
// sAI := false ;
49298: LD_ADDR_EXP 69
49302: PUSH
49303: LD_INT 0
49305: ST_TO_ADDR
// sCargo := false ;
49306: LD_ADDR_EXP 72
49310: PUSH
49311: LD_INT 0
49313: ST_TO_ADDR
// sDLaser := false ;
49314: LD_ADDR_EXP 73
49318: PUSH
49319: LD_INT 0
49321: ST_TO_ADDR
// sExchange := false ;
49322: LD_ADDR_EXP 74
49326: PUSH
49327: LD_INT 0
49329: ST_TO_ADDR
// sFac := false ;
49330: LD_ADDR_EXP 75
49334: PUSH
49335: LD_INT 0
49337: ST_TO_ADDR
// sPower := false ;
49338: LD_ADDR_EXP 76
49342: PUSH
49343: LD_INT 0
49345: ST_TO_ADDR
// sRandom := false ;
49346: LD_ADDR_EXP 77
49350: PUSH
49351: LD_INT 0
49353: ST_TO_ADDR
// sShield := false ;
49354: LD_ADDR_EXP 78
49358: PUSH
49359: LD_INT 0
49361: ST_TO_ADDR
// sTime := false ;
49362: LD_ADDR_EXP 79
49366: PUSH
49367: LD_INT 0
49369: ST_TO_ADDR
// sTools := false ;
49370: LD_ADDR_EXP 80
49374: PUSH
49375: LD_INT 0
49377: ST_TO_ADDR
// sSold := false ;
49378: LD_ADDR_EXP 45
49382: PUSH
49383: LD_INT 0
49385: ST_TO_ADDR
// sDiff := false ;
49386: LD_ADDR_EXP 46
49390: PUSH
49391: LD_INT 0
49393: ST_TO_ADDR
// sFog := false ;
49394: LD_ADDR_EXP 49
49398: PUSH
49399: LD_INT 0
49401: ST_TO_ADDR
// sReset := false ;
49402: LD_ADDR_EXP 50
49406: PUSH
49407: LD_INT 0
49409: ST_TO_ADDR
// sSun := false ;
49410: LD_ADDR_EXP 51
49414: PUSH
49415: LD_INT 0
49417: ST_TO_ADDR
// sTiger := false ;
49418: LD_ADDR_EXP 47
49422: PUSH
49423: LD_INT 0
49425: ST_TO_ADDR
// sBomb := false ;
49426: LD_ADDR_EXP 48
49430: PUSH
49431: LD_INT 0
49433: ST_TO_ADDR
// sWound := false ;
49434: LD_ADDR_EXP 56
49438: PUSH
49439: LD_INT 0
49441: ST_TO_ADDR
// sBetray := false ;
49442: LD_ADDR_EXP 60
49446: PUSH
49447: LD_INT 0
49449: ST_TO_ADDR
// sContamin := false ;
49450: LD_ADDR_EXP 61
49454: PUSH
49455: LD_INT 0
49457: ST_TO_ADDR
// sOil := false ;
49458: LD_ADDR_EXP 63
49462: PUSH
49463: LD_INT 0
49465: ST_TO_ADDR
// sStu := false ;
49466: LD_ADDR_EXP 67
49470: PUSH
49471: LD_INT 0
49473: ST_TO_ADDR
// sBazooka := false ;
49474: LD_ADDR_EXP 70
49478: PUSH
49479: LD_INT 0
49481: ST_TO_ADDR
// sMortar := false ;
49482: LD_ADDR_EXP 71
49486: PUSH
49487: LD_INT 0
49489: ST_TO_ADDR
// sRanger := false ;
49490: LD_ADDR_EXP 81
49494: PUSH
49495: LD_INT 0
49497: ST_TO_ADDR
// sComputer := false ;
49498: LD_ADDR_EXP 82
49502: PUSH
49503: LD_INT 0
49505: ST_TO_ADDR
// s30 := false ;
49506: LD_ADDR_EXP 83
49510: PUSH
49511: LD_INT 0
49513: ST_TO_ADDR
// s60 := false ;
49514: LD_ADDR_EXP 84
49518: PUSH
49519: LD_INT 0
49521: ST_TO_ADDR
// end ;
49522: LD_VAR 0 1
49526: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49527: LD_INT 0
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
// result := [ ] ;
49536: LD_ADDR_VAR 0 2
49540: PUSH
49541: EMPTY
49542: ST_TO_ADDR
// if campaign_id = 1 then
49543: LD_OWVAR 69
49547: PUSH
49548: LD_INT 1
49550: EQUAL
49551: IFFALSE 52717
// begin case mission_number of 1 :
49553: LD_OWVAR 70
49557: PUSH
49558: LD_INT 1
49560: DOUBLE
49561: EQUAL
49562: IFTRUE 49566
49564: GO 49642
49566: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49567: LD_ADDR_VAR 0 2
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 4
49577: PUSH
49578: LD_INT 11
49580: PUSH
49581: LD_INT 12
49583: PUSH
49584: LD_INT 15
49586: PUSH
49587: LD_INT 16
49589: PUSH
49590: LD_INT 22
49592: PUSH
49593: LD_INT 23
49595: PUSH
49596: LD_INT 26
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 101
49612: PUSH
49613: LD_INT 102
49615: PUSH
49616: LD_INT 106
49618: PUSH
49619: LD_INT 116
49621: PUSH
49622: LD_INT 117
49624: PUSH
49625: LD_INT 118
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: ST_TO_ADDR
49640: GO 52715
49642: LD_INT 2
49644: DOUBLE
49645: EQUAL
49646: IFTRUE 49650
49648: GO 49734
49650: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49651: LD_ADDR_VAR 0 2
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 4
49661: PUSH
49662: LD_INT 11
49664: PUSH
49665: LD_INT 12
49667: PUSH
49668: LD_INT 15
49670: PUSH
49671: LD_INT 16
49673: PUSH
49674: LD_INT 22
49676: PUSH
49677: LD_INT 23
49679: PUSH
49680: LD_INT 26
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 101
49696: PUSH
49697: LD_INT 102
49699: PUSH
49700: LD_INT 105
49702: PUSH
49703: LD_INT 106
49705: PUSH
49706: LD_INT 108
49708: PUSH
49709: LD_INT 116
49711: PUSH
49712: LD_INT 117
49714: PUSH
49715: LD_INT 118
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: ST_TO_ADDR
49732: GO 52715
49734: LD_INT 3
49736: DOUBLE
49737: EQUAL
49738: IFTRUE 49742
49740: GO 49830
49742: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49743: LD_ADDR_VAR 0 2
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 4
49753: PUSH
49754: LD_INT 5
49756: PUSH
49757: LD_INT 11
49759: PUSH
49760: LD_INT 12
49762: PUSH
49763: LD_INT 15
49765: PUSH
49766: LD_INT 16
49768: PUSH
49769: LD_INT 22
49771: PUSH
49772: LD_INT 26
49774: PUSH
49775: LD_INT 36
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 101
49792: PUSH
49793: LD_INT 102
49795: PUSH
49796: LD_INT 105
49798: PUSH
49799: LD_INT 106
49801: PUSH
49802: LD_INT 108
49804: PUSH
49805: LD_INT 116
49807: PUSH
49808: LD_INT 117
49810: PUSH
49811: LD_INT 118
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: ST_TO_ADDR
49828: GO 52715
49830: LD_INT 4
49832: DOUBLE
49833: EQUAL
49834: IFTRUE 49838
49836: GO 49934
49838: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49839: LD_ADDR_VAR 0 2
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 4
49849: PUSH
49850: LD_INT 5
49852: PUSH
49853: LD_INT 8
49855: PUSH
49856: LD_INT 11
49858: PUSH
49859: LD_INT 12
49861: PUSH
49862: LD_INT 15
49864: PUSH
49865: LD_INT 16
49867: PUSH
49868: LD_INT 22
49870: PUSH
49871: LD_INT 23
49873: PUSH
49874: LD_INT 26
49876: PUSH
49877: LD_INT 36
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 101
49896: PUSH
49897: LD_INT 102
49899: PUSH
49900: LD_INT 105
49902: PUSH
49903: LD_INT 106
49905: PUSH
49906: LD_INT 108
49908: PUSH
49909: LD_INT 116
49911: PUSH
49912: LD_INT 117
49914: PUSH
49915: LD_INT 118
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: ST_TO_ADDR
49932: GO 52715
49934: LD_INT 5
49936: DOUBLE
49937: EQUAL
49938: IFTRUE 49942
49940: GO 50054
49942: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49943: LD_ADDR_VAR 0 2
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: LD_INT 5
49956: PUSH
49957: LD_INT 6
49959: PUSH
49960: LD_INT 8
49962: PUSH
49963: LD_INT 11
49965: PUSH
49966: LD_INT 12
49968: PUSH
49969: LD_INT 15
49971: PUSH
49972: LD_INT 16
49974: PUSH
49975: LD_INT 22
49977: PUSH
49978: LD_INT 23
49980: PUSH
49981: LD_INT 25
49983: PUSH
49984: LD_INT 26
49986: PUSH
49987: LD_INT 36
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 101
50008: PUSH
50009: LD_INT 102
50011: PUSH
50012: LD_INT 105
50014: PUSH
50015: LD_INT 106
50017: PUSH
50018: LD_INT 108
50020: PUSH
50021: LD_INT 109
50023: PUSH
50024: LD_INT 112
50026: PUSH
50027: LD_INT 116
50029: PUSH
50030: LD_INT 117
50032: PUSH
50033: LD_INT 118
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: ST_TO_ADDR
50052: GO 52715
50054: LD_INT 6
50056: DOUBLE
50057: EQUAL
50058: IFTRUE 50062
50060: GO 50194
50062: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50063: LD_ADDR_VAR 0 2
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 4
50073: PUSH
50074: LD_INT 5
50076: PUSH
50077: LD_INT 6
50079: PUSH
50080: LD_INT 8
50082: PUSH
50083: LD_INT 11
50085: PUSH
50086: LD_INT 12
50088: PUSH
50089: LD_INT 15
50091: PUSH
50092: LD_INT 16
50094: PUSH
50095: LD_INT 20
50097: PUSH
50098: LD_INT 21
50100: PUSH
50101: LD_INT 22
50103: PUSH
50104: LD_INT 23
50106: PUSH
50107: LD_INT 25
50109: PUSH
50110: LD_INT 26
50112: PUSH
50113: LD_INT 30
50115: PUSH
50116: LD_INT 31
50118: PUSH
50119: LD_INT 32
50121: PUSH
50122: LD_INT 36
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 101
50148: PUSH
50149: LD_INT 102
50151: PUSH
50152: LD_INT 105
50154: PUSH
50155: LD_INT 106
50157: PUSH
50158: LD_INT 108
50160: PUSH
50161: LD_INT 109
50163: PUSH
50164: LD_INT 112
50166: PUSH
50167: LD_INT 116
50169: PUSH
50170: LD_INT 117
50172: PUSH
50173: LD_INT 118
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: ST_TO_ADDR
50192: GO 52715
50194: LD_INT 7
50196: DOUBLE
50197: EQUAL
50198: IFTRUE 50202
50200: GO 50314
50202: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50203: LD_ADDR_VAR 0 2
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 4
50213: PUSH
50214: LD_INT 5
50216: PUSH
50217: LD_INT 7
50219: PUSH
50220: LD_INT 11
50222: PUSH
50223: LD_INT 12
50225: PUSH
50226: LD_INT 15
50228: PUSH
50229: LD_INT 16
50231: PUSH
50232: LD_INT 20
50234: PUSH
50235: LD_INT 21
50237: PUSH
50238: LD_INT 22
50240: PUSH
50241: LD_INT 23
50243: PUSH
50244: LD_INT 25
50246: PUSH
50247: LD_INT 26
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 101
50268: PUSH
50269: LD_INT 102
50271: PUSH
50272: LD_INT 103
50274: PUSH
50275: LD_INT 105
50277: PUSH
50278: LD_INT 106
50280: PUSH
50281: LD_INT 108
50283: PUSH
50284: LD_INT 112
50286: PUSH
50287: LD_INT 116
50289: PUSH
50290: LD_INT 117
50292: PUSH
50293: LD_INT 118
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: ST_TO_ADDR
50312: GO 52715
50314: LD_INT 8
50316: DOUBLE
50317: EQUAL
50318: IFTRUE 50322
50320: GO 50462
50322: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50323: LD_ADDR_VAR 0 2
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 4
50333: PUSH
50334: LD_INT 5
50336: PUSH
50337: LD_INT 6
50339: PUSH
50340: LD_INT 7
50342: PUSH
50343: LD_INT 8
50345: PUSH
50346: LD_INT 11
50348: PUSH
50349: LD_INT 12
50351: PUSH
50352: LD_INT 15
50354: PUSH
50355: LD_INT 16
50357: PUSH
50358: LD_INT 20
50360: PUSH
50361: LD_INT 21
50363: PUSH
50364: LD_INT 22
50366: PUSH
50367: LD_INT 23
50369: PUSH
50370: LD_INT 25
50372: PUSH
50373: LD_INT 26
50375: PUSH
50376: LD_INT 30
50378: PUSH
50379: LD_INT 31
50381: PUSH
50382: LD_INT 32
50384: PUSH
50385: LD_INT 36
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 101
50412: PUSH
50413: LD_INT 102
50415: PUSH
50416: LD_INT 103
50418: PUSH
50419: LD_INT 105
50421: PUSH
50422: LD_INT 106
50424: PUSH
50425: LD_INT 108
50427: PUSH
50428: LD_INT 109
50430: PUSH
50431: LD_INT 112
50433: PUSH
50434: LD_INT 116
50436: PUSH
50437: LD_INT 117
50439: PUSH
50440: LD_INT 118
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: ST_TO_ADDR
50460: GO 52715
50462: LD_INT 9
50464: DOUBLE
50465: EQUAL
50466: IFTRUE 50470
50468: GO 50618
50470: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50471: LD_ADDR_VAR 0 2
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 4
50481: PUSH
50482: LD_INT 5
50484: PUSH
50485: LD_INT 6
50487: PUSH
50488: LD_INT 7
50490: PUSH
50491: LD_INT 8
50493: PUSH
50494: LD_INT 11
50496: PUSH
50497: LD_INT 12
50499: PUSH
50500: LD_INT 15
50502: PUSH
50503: LD_INT 16
50505: PUSH
50506: LD_INT 20
50508: PUSH
50509: LD_INT 21
50511: PUSH
50512: LD_INT 22
50514: PUSH
50515: LD_INT 23
50517: PUSH
50518: LD_INT 25
50520: PUSH
50521: LD_INT 26
50523: PUSH
50524: LD_INT 28
50526: PUSH
50527: LD_INT 30
50529: PUSH
50530: LD_INT 31
50532: PUSH
50533: LD_INT 32
50535: PUSH
50536: LD_INT 36
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 101
50564: PUSH
50565: LD_INT 102
50567: PUSH
50568: LD_INT 103
50570: PUSH
50571: LD_INT 105
50573: PUSH
50574: LD_INT 106
50576: PUSH
50577: LD_INT 108
50579: PUSH
50580: LD_INT 109
50582: PUSH
50583: LD_INT 112
50585: PUSH
50586: LD_INT 114
50588: PUSH
50589: LD_INT 116
50591: PUSH
50592: LD_INT 117
50594: PUSH
50595: LD_INT 118
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: ST_TO_ADDR
50616: GO 52715
50618: LD_INT 10
50620: DOUBLE
50621: EQUAL
50622: IFTRUE 50626
50624: GO 50822
50626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50627: LD_ADDR_VAR 0 2
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 4
50637: PUSH
50638: LD_INT 5
50640: PUSH
50641: LD_INT 6
50643: PUSH
50644: LD_INT 7
50646: PUSH
50647: LD_INT 8
50649: PUSH
50650: LD_INT 9
50652: PUSH
50653: LD_INT 10
50655: PUSH
50656: LD_INT 11
50658: PUSH
50659: LD_INT 12
50661: PUSH
50662: LD_INT 13
50664: PUSH
50665: LD_INT 14
50667: PUSH
50668: LD_INT 15
50670: PUSH
50671: LD_INT 16
50673: PUSH
50674: LD_INT 17
50676: PUSH
50677: LD_INT 18
50679: PUSH
50680: LD_INT 19
50682: PUSH
50683: LD_INT 20
50685: PUSH
50686: LD_INT 21
50688: PUSH
50689: LD_INT 22
50691: PUSH
50692: LD_INT 23
50694: PUSH
50695: LD_INT 24
50697: PUSH
50698: LD_INT 25
50700: PUSH
50701: LD_INT 26
50703: PUSH
50704: LD_INT 28
50706: PUSH
50707: LD_INT 30
50709: PUSH
50710: LD_INT 31
50712: PUSH
50713: LD_INT 32
50715: PUSH
50716: LD_INT 36
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 101
50752: PUSH
50753: LD_INT 102
50755: PUSH
50756: LD_INT 103
50758: PUSH
50759: LD_INT 104
50761: PUSH
50762: LD_INT 105
50764: PUSH
50765: LD_INT 106
50767: PUSH
50768: LD_INT 107
50770: PUSH
50771: LD_INT 108
50773: PUSH
50774: LD_INT 109
50776: PUSH
50777: LD_INT 110
50779: PUSH
50780: LD_INT 111
50782: PUSH
50783: LD_INT 112
50785: PUSH
50786: LD_INT 114
50788: PUSH
50789: LD_INT 116
50791: PUSH
50792: LD_INT 117
50794: PUSH
50795: LD_INT 118
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: ST_TO_ADDR
50820: GO 52715
50822: LD_INT 11
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50830
50828: GO 51034
50830: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50831: LD_ADDR_VAR 0 2
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: LD_INT 4
50844: PUSH
50845: LD_INT 5
50847: PUSH
50848: LD_INT 6
50850: PUSH
50851: LD_INT 7
50853: PUSH
50854: LD_INT 8
50856: PUSH
50857: LD_INT 9
50859: PUSH
50860: LD_INT 10
50862: PUSH
50863: LD_INT 11
50865: PUSH
50866: LD_INT 12
50868: PUSH
50869: LD_INT 13
50871: PUSH
50872: LD_INT 14
50874: PUSH
50875: LD_INT 15
50877: PUSH
50878: LD_INT 16
50880: PUSH
50881: LD_INT 17
50883: PUSH
50884: LD_INT 18
50886: PUSH
50887: LD_INT 19
50889: PUSH
50890: LD_INT 20
50892: PUSH
50893: LD_INT 21
50895: PUSH
50896: LD_INT 22
50898: PUSH
50899: LD_INT 23
50901: PUSH
50902: LD_INT 24
50904: PUSH
50905: LD_INT 25
50907: PUSH
50908: LD_INT 26
50910: PUSH
50911: LD_INT 28
50913: PUSH
50914: LD_INT 30
50916: PUSH
50917: LD_INT 31
50919: PUSH
50920: LD_INT 32
50922: PUSH
50923: LD_INT 34
50925: PUSH
50926: LD_INT 36
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 101
50964: PUSH
50965: LD_INT 102
50967: PUSH
50968: LD_INT 103
50970: PUSH
50971: LD_INT 104
50973: PUSH
50974: LD_INT 105
50976: PUSH
50977: LD_INT 106
50979: PUSH
50980: LD_INT 107
50982: PUSH
50983: LD_INT 108
50985: PUSH
50986: LD_INT 109
50988: PUSH
50989: LD_INT 110
50991: PUSH
50992: LD_INT 111
50994: PUSH
50995: LD_INT 112
50997: PUSH
50998: LD_INT 114
51000: PUSH
51001: LD_INT 116
51003: PUSH
51004: LD_INT 117
51006: PUSH
51007: LD_INT 118
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: ST_TO_ADDR
51032: GO 52715
51034: LD_INT 12
51036: DOUBLE
51037: EQUAL
51038: IFTRUE 51042
51040: GO 51262
51042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51043: LD_ADDR_VAR 0 2
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 3
51056: PUSH
51057: LD_INT 4
51059: PUSH
51060: LD_INT 5
51062: PUSH
51063: LD_INT 6
51065: PUSH
51066: LD_INT 7
51068: PUSH
51069: LD_INT 8
51071: PUSH
51072: LD_INT 9
51074: PUSH
51075: LD_INT 10
51077: PUSH
51078: LD_INT 11
51080: PUSH
51081: LD_INT 12
51083: PUSH
51084: LD_INT 13
51086: PUSH
51087: LD_INT 14
51089: PUSH
51090: LD_INT 15
51092: PUSH
51093: LD_INT 16
51095: PUSH
51096: LD_INT 17
51098: PUSH
51099: LD_INT 18
51101: PUSH
51102: LD_INT 19
51104: PUSH
51105: LD_INT 20
51107: PUSH
51108: LD_INT 21
51110: PUSH
51111: LD_INT 22
51113: PUSH
51114: LD_INT 23
51116: PUSH
51117: LD_INT 24
51119: PUSH
51120: LD_INT 25
51122: PUSH
51123: LD_INT 26
51125: PUSH
51126: LD_INT 27
51128: PUSH
51129: LD_INT 28
51131: PUSH
51132: LD_INT 30
51134: PUSH
51135: LD_INT 31
51137: PUSH
51138: LD_INT 32
51140: PUSH
51141: LD_INT 33
51143: PUSH
51144: LD_INT 34
51146: PUSH
51147: LD_INT 36
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 101
51188: PUSH
51189: LD_INT 102
51191: PUSH
51192: LD_INT 103
51194: PUSH
51195: LD_INT 104
51197: PUSH
51198: LD_INT 105
51200: PUSH
51201: LD_INT 106
51203: PUSH
51204: LD_INT 107
51206: PUSH
51207: LD_INT 108
51209: PUSH
51210: LD_INT 109
51212: PUSH
51213: LD_INT 110
51215: PUSH
51216: LD_INT 111
51218: PUSH
51219: LD_INT 112
51221: PUSH
51222: LD_INT 113
51224: PUSH
51225: LD_INT 114
51227: PUSH
51228: LD_INT 116
51230: PUSH
51231: LD_INT 117
51233: PUSH
51234: LD_INT 118
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: ST_TO_ADDR
51260: GO 52715
51262: LD_INT 13
51264: DOUBLE
51265: EQUAL
51266: IFTRUE 51270
51268: GO 51478
51270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51271: LD_ADDR_VAR 0 2
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: LD_INT 5
51290: PUSH
51291: LD_INT 8
51293: PUSH
51294: LD_INT 9
51296: PUSH
51297: LD_INT 10
51299: PUSH
51300: LD_INT 11
51302: PUSH
51303: LD_INT 12
51305: PUSH
51306: LD_INT 14
51308: PUSH
51309: LD_INT 15
51311: PUSH
51312: LD_INT 16
51314: PUSH
51315: LD_INT 17
51317: PUSH
51318: LD_INT 18
51320: PUSH
51321: LD_INT 19
51323: PUSH
51324: LD_INT 20
51326: PUSH
51327: LD_INT 21
51329: PUSH
51330: LD_INT 22
51332: PUSH
51333: LD_INT 23
51335: PUSH
51336: LD_INT 24
51338: PUSH
51339: LD_INT 25
51341: PUSH
51342: LD_INT 26
51344: PUSH
51345: LD_INT 27
51347: PUSH
51348: LD_INT 28
51350: PUSH
51351: LD_INT 30
51353: PUSH
51354: LD_INT 31
51356: PUSH
51357: LD_INT 32
51359: PUSH
51360: LD_INT 33
51362: PUSH
51363: LD_INT 34
51365: PUSH
51366: LD_INT 36
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 101
51404: PUSH
51405: LD_INT 102
51407: PUSH
51408: LD_INT 103
51410: PUSH
51411: LD_INT 104
51413: PUSH
51414: LD_INT 105
51416: PUSH
51417: LD_INT 106
51419: PUSH
51420: LD_INT 107
51422: PUSH
51423: LD_INT 108
51425: PUSH
51426: LD_INT 109
51428: PUSH
51429: LD_INT 110
51431: PUSH
51432: LD_INT 111
51434: PUSH
51435: LD_INT 112
51437: PUSH
51438: LD_INT 113
51440: PUSH
51441: LD_INT 114
51443: PUSH
51444: LD_INT 116
51446: PUSH
51447: LD_INT 117
51449: PUSH
51450: LD_INT 118
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: ST_TO_ADDR
51476: GO 52715
51478: LD_INT 14
51480: DOUBLE
51481: EQUAL
51482: IFTRUE 51486
51484: GO 51710
51486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51487: LD_ADDR_VAR 0 2
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: LD_INT 4
51503: PUSH
51504: LD_INT 5
51506: PUSH
51507: LD_INT 6
51509: PUSH
51510: LD_INT 7
51512: PUSH
51513: LD_INT 8
51515: PUSH
51516: LD_INT 9
51518: PUSH
51519: LD_INT 10
51521: PUSH
51522: LD_INT 11
51524: PUSH
51525: LD_INT 12
51527: PUSH
51528: LD_INT 13
51530: PUSH
51531: LD_INT 14
51533: PUSH
51534: LD_INT 15
51536: PUSH
51537: LD_INT 16
51539: PUSH
51540: LD_INT 17
51542: PUSH
51543: LD_INT 18
51545: PUSH
51546: LD_INT 19
51548: PUSH
51549: LD_INT 20
51551: PUSH
51552: LD_INT 21
51554: PUSH
51555: LD_INT 22
51557: PUSH
51558: LD_INT 23
51560: PUSH
51561: LD_INT 24
51563: PUSH
51564: LD_INT 25
51566: PUSH
51567: LD_INT 26
51569: PUSH
51570: LD_INT 27
51572: PUSH
51573: LD_INT 28
51575: PUSH
51576: LD_INT 29
51578: PUSH
51579: LD_INT 30
51581: PUSH
51582: LD_INT 31
51584: PUSH
51585: LD_INT 32
51587: PUSH
51588: LD_INT 33
51590: PUSH
51591: LD_INT 34
51593: PUSH
51594: LD_INT 36
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 101
51636: PUSH
51637: LD_INT 102
51639: PUSH
51640: LD_INT 103
51642: PUSH
51643: LD_INT 104
51645: PUSH
51646: LD_INT 105
51648: PUSH
51649: LD_INT 106
51651: PUSH
51652: LD_INT 107
51654: PUSH
51655: LD_INT 108
51657: PUSH
51658: LD_INT 109
51660: PUSH
51661: LD_INT 110
51663: PUSH
51664: LD_INT 111
51666: PUSH
51667: LD_INT 112
51669: PUSH
51670: LD_INT 113
51672: PUSH
51673: LD_INT 114
51675: PUSH
51676: LD_INT 116
51678: PUSH
51679: LD_INT 117
51681: PUSH
51682: LD_INT 118
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: ST_TO_ADDR
51708: GO 52715
51710: LD_INT 15
51712: DOUBLE
51713: EQUAL
51714: IFTRUE 51718
51716: GO 51942
51718: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51719: LD_ADDR_VAR 0 2
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 4
51735: PUSH
51736: LD_INT 5
51738: PUSH
51739: LD_INT 6
51741: PUSH
51742: LD_INT 7
51744: PUSH
51745: LD_INT 8
51747: PUSH
51748: LD_INT 9
51750: PUSH
51751: LD_INT 10
51753: PUSH
51754: LD_INT 11
51756: PUSH
51757: LD_INT 12
51759: PUSH
51760: LD_INT 13
51762: PUSH
51763: LD_INT 14
51765: PUSH
51766: LD_INT 15
51768: PUSH
51769: LD_INT 16
51771: PUSH
51772: LD_INT 17
51774: PUSH
51775: LD_INT 18
51777: PUSH
51778: LD_INT 19
51780: PUSH
51781: LD_INT 20
51783: PUSH
51784: LD_INT 21
51786: PUSH
51787: LD_INT 22
51789: PUSH
51790: LD_INT 23
51792: PUSH
51793: LD_INT 24
51795: PUSH
51796: LD_INT 25
51798: PUSH
51799: LD_INT 26
51801: PUSH
51802: LD_INT 27
51804: PUSH
51805: LD_INT 28
51807: PUSH
51808: LD_INT 29
51810: PUSH
51811: LD_INT 30
51813: PUSH
51814: LD_INT 31
51816: PUSH
51817: LD_INT 32
51819: PUSH
51820: LD_INT 33
51822: PUSH
51823: LD_INT 34
51825: PUSH
51826: LD_INT 36
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 101
51868: PUSH
51869: LD_INT 102
51871: PUSH
51872: LD_INT 103
51874: PUSH
51875: LD_INT 104
51877: PUSH
51878: LD_INT 105
51880: PUSH
51881: LD_INT 106
51883: PUSH
51884: LD_INT 107
51886: PUSH
51887: LD_INT 108
51889: PUSH
51890: LD_INT 109
51892: PUSH
51893: LD_INT 110
51895: PUSH
51896: LD_INT 111
51898: PUSH
51899: LD_INT 112
51901: PUSH
51902: LD_INT 113
51904: PUSH
51905: LD_INT 114
51907: PUSH
51908: LD_INT 116
51910: PUSH
51911: LD_INT 117
51913: PUSH
51914: LD_INT 118
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: ST_TO_ADDR
51940: GO 52715
51942: LD_INT 16
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51950
51948: GO 52086
51950: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51951: LD_ADDR_VAR 0 2
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: LD_INT 5
51964: PUSH
51965: LD_INT 7
51967: PUSH
51968: LD_INT 11
51970: PUSH
51971: LD_INT 12
51973: PUSH
51974: LD_INT 15
51976: PUSH
51977: LD_INT 16
51979: PUSH
51980: LD_INT 20
51982: PUSH
51983: LD_INT 21
51985: PUSH
51986: LD_INT 22
51988: PUSH
51989: LD_INT 23
51991: PUSH
51992: LD_INT 25
51994: PUSH
51995: LD_INT 26
51997: PUSH
51998: LD_INT 30
52000: PUSH
52001: LD_INT 31
52003: PUSH
52004: LD_INT 32
52006: PUSH
52007: LD_INT 33
52009: PUSH
52010: LD_INT 34
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 101
52036: PUSH
52037: LD_INT 102
52039: PUSH
52040: LD_INT 103
52042: PUSH
52043: LD_INT 106
52045: PUSH
52046: LD_INT 108
52048: PUSH
52049: LD_INT 112
52051: PUSH
52052: LD_INT 113
52054: PUSH
52055: LD_INT 114
52057: PUSH
52058: LD_INT 116
52060: PUSH
52061: LD_INT 117
52063: PUSH
52064: LD_INT 118
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: ST_TO_ADDR
52084: GO 52715
52086: LD_INT 17
52088: DOUBLE
52089: EQUAL
52090: IFTRUE 52094
52092: GO 52318
52094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52095: LD_ADDR_VAR 0 2
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: LD_INT 4
52111: PUSH
52112: LD_INT 5
52114: PUSH
52115: LD_INT 6
52117: PUSH
52118: LD_INT 7
52120: PUSH
52121: LD_INT 8
52123: PUSH
52124: LD_INT 9
52126: PUSH
52127: LD_INT 10
52129: PUSH
52130: LD_INT 11
52132: PUSH
52133: LD_INT 12
52135: PUSH
52136: LD_INT 13
52138: PUSH
52139: LD_INT 14
52141: PUSH
52142: LD_INT 15
52144: PUSH
52145: LD_INT 16
52147: PUSH
52148: LD_INT 17
52150: PUSH
52151: LD_INT 18
52153: PUSH
52154: LD_INT 19
52156: PUSH
52157: LD_INT 20
52159: PUSH
52160: LD_INT 21
52162: PUSH
52163: LD_INT 22
52165: PUSH
52166: LD_INT 23
52168: PUSH
52169: LD_INT 24
52171: PUSH
52172: LD_INT 25
52174: PUSH
52175: LD_INT 26
52177: PUSH
52178: LD_INT 27
52180: PUSH
52181: LD_INT 28
52183: PUSH
52184: LD_INT 29
52186: PUSH
52187: LD_INT 30
52189: PUSH
52190: LD_INT 31
52192: PUSH
52193: LD_INT 32
52195: PUSH
52196: LD_INT 33
52198: PUSH
52199: LD_INT 34
52201: PUSH
52202: LD_INT 36
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 101
52244: PUSH
52245: LD_INT 102
52247: PUSH
52248: LD_INT 103
52250: PUSH
52251: LD_INT 104
52253: PUSH
52254: LD_INT 105
52256: PUSH
52257: LD_INT 106
52259: PUSH
52260: LD_INT 107
52262: PUSH
52263: LD_INT 108
52265: PUSH
52266: LD_INT 109
52268: PUSH
52269: LD_INT 110
52271: PUSH
52272: LD_INT 111
52274: PUSH
52275: LD_INT 112
52277: PUSH
52278: LD_INT 113
52280: PUSH
52281: LD_INT 114
52283: PUSH
52284: LD_INT 116
52286: PUSH
52287: LD_INT 117
52289: PUSH
52290: LD_INT 118
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: ST_TO_ADDR
52316: GO 52715
52318: LD_INT 18
52320: DOUBLE
52321: EQUAL
52322: IFTRUE 52326
52324: GO 52474
52326: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52327: LD_ADDR_VAR 0 2
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: LD_INT 5
52340: PUSH
52341: LD_INT 7
52343: PUSH
52344: LD_INT 11
52346: PUSH
52347: LD_INT 12
52349: PUSH
52350: LD_INT 15
52352: PUSH
52353: LD_INT 16
52355: PUSH
52356: LD_INT 20
52358: PUSH
52359: LD_INT 21
52361: PUSH
52362: LD_INT 22
52364: PUSH
52365: LD_INT 23
52367: PUSH
52368: LD_INT 25
52370: PUSH
52371: LD_INT 26
52373: PUSH
52374: LD_INT 30
52376: PUSH
52377: LD_INT 31
52379: PUSH
52380: LD_INT 32
52382: PUSH
52383: LD_INT 33
52385: PUSH
52386: LD_INT 34
52388: PUSH
52389: LD_INT 35
52391: PUSH
52392: LD_INT 36
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 101
52420: PUSH
52421: LD_INT 102
52423: PUSH
52424: LD_INT 103
52426: PUSH
52427: LD_INT 106
52429: PUSH
52430: LD_INT 108
52432: PUSH
52433: LD_INT 112
52435: PUSH
52436: LD_INT 113
52438: PUSH
52439: LD_INT 114
52441: PUSH
52442: LD_INT 115
52444: PUSH
52445: LD_INT 116
52447: PUSH
52448: LD_INT 117
52450: PUSH
52451: LD_INT 118
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: ST_TO_ADDR
52472: GO 52715
52474: LD_INT 19
52476: DOUBLE
52477: EQUAL
52478: IFTRUE 52482
52480: GO 52714
52482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52483: LD_ADDR_VAR 0 2
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: LD_INT 4
52499: PUSH
52500: LD_INT 5
52502: PUSH
52503: LD_INT 6
52505: PUSH
52506: LD_INT 7
52508: PUSH
52509: LD_INT 8
52511: PUSH
52512: LD_INT 9
52514: PUSH
52515: LD_INT 10
52517: PUSH
52518: LD_INT 11
52520: PUSH
52521: LD_INT 12
52523: PUSH
52524: LD_INT 13
52526: PUSH
52527: LD_INT 14
52529: PUSH
52530: LD_INT 15
52532: PUSH
52533: LD_INT 16
52535: PUSH
52536: LD_INT 17
52538: PUSH
52539: LD_INT 18
52541: PUSH
52542: LD_INT 19
52544: PUSH
52545: LD_INT 20
52547: PUSH
52548: LD_INT 21
52550: PUSH
52551: LD_INT 22
52553: PUSH
52554: LD_INT 23
52556: PUSH
52557: LD_INT 24
52559: PUSH
52560: LD_INT 25
52562: PUSH
52563: LD_INT 26
52565: PUSH
52566: LD_INT 27
52568: PUSH
52569: LD_INT 28
52571: PUSH
52572: LD_INT 29
52574: PUSH
52575: LD_INT 30
52577: PUSH
52578: LD_INT 31
52580: PUSH
52581: LD_INT 32
52583: PUSH
52584: LD_INT 33
52586: PUSH
52587: LD_INT 34
52589: PUSH
52590: LD_INT 35
52592: PUSH
52593: LD_INT 36
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 101
52636: PUSH
52637: LD_INT 102
52639: PUSH
52640: LD_INT 103
52642: PUSH
52643: LD_INT 104
52645: PUSH
52646: LD_INT 105
52648: PUSH
52649: LD_INT 106
52651: PUSH
52652: LD_INT 107
52654: PUSH
52655: LD_INT 108
52657: PUSH
52658: LD_INT 109
52660: PUSH
52661: LD_INT 110
52663: PUSH
52664: LD_INT 111
52666: PUSH
52667: LD_INT 112
52669: PUSH
52670: LD_INT 113
52672: PUSH
52673: LD_INT 114
52675: PUSH
52676: LD_INT 115
52678: PUSH
52679: LD_INT 116
52681: PUSH
52682: LD_INT 117
52684: PUSH
52685: LD_INT 118
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: ST_TO_ADDR
52712: GO 52715
52714: POP
// end else
52715: GO 52946
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52717: LD_ADDR_VAR 0 2
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 4
52733: PUSH
52734: LD_INT 5
52736: PUSH
52737: LD_INT 6
52739: PUSH
52740: LD_INT 7
52742: PUSH
52743: LD_INT 8
52745: PUSH
52746: LD_INT 9
52748: PUSH
52749: LD_INT 10
52751: PUSH
52752: LD_INT 11
52754: PUSH
52755: LD_INT 12
52757: PUSH
52758: LD_INT 13
52760: PUSH
52761: LD_INT 14
52763: PUSH
52764: LD_INT 15
52766: PUSH
52767: LD_INT 16
52769: PUSH
52770: LD_INT 17
52772: PUSH
52773: LD_INT 18
52775: PUSH
52776: LD_INT 19
52778: PUSH
52779: LD_INT 20
52781: PUSH
52782: LD_INT 21
52784: PUSH
52785: LD_INT 22
52787: PUSH
52788: LD_INT 23
52790: PUSH
52791: LD_INT 24
52793: PUSH
52794: LD_INT 25
52796: PUSH
52797: LD_INT 26
52799: PUSH
52800: LD_INT 27
52802: PUSH
52803: LD_INT 28
52805: PUSH
52806: LD_INT 29
52808: PUSH
52809: LD_INT 30
52811: PUSH
52812: LD_INT 31
52814: PUSH
52815: LD_INT 32
52817: PUSH
52818: LD_INT 33
52820: PUSH
52821: LD_INT 34
52823: PUSH
52824: LD_INT 35
52826: PUSH
52827: LD_INT 36
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 101
52870: PUSH
52871: LD_INT 102
52873: PUSH
52874: LD_INT 103
52876: PUSH
52877: LD_INT 104
52879: PUSH
52880: LD_INT 105
52882: PUSH
52883: LD_INT 106
52885: PUSH
52886: LD_INT 107
52888: PUSH
52889: LD_INT 108
52891: PUSH
52892: LD_INT 109
52894: PUSH
52895: LD_INT 110
52897: PUSH
52898: LD_INT 111
52900: PUSH
52901: LD_INT 112
52903: PUSH
52904: LD_INT 113
52906: PUSH
52907: LD_INT 114
52909: PUSH
52910: LD_INT 115
52912: PUSH
52913: LD_INT 116
52915: PUSH
52916: LD_INT 117
52918: PUSH
52919: LD_INT 118
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// if result then
52946: LD_VAR 0 2
52950: IFFALSE 53736
// begin normal :=  ;
52952: LD_ADDR_VAR 0 5
52956: PUSH
52957: LD_STRING 
52959: ST_TO_ADDR
// hardcore :=  ;
52960: LD_ADDR_VAR 0 6
52964: PUSH
52965: LD_STRING 
52967: ST_TO_ADDR
// active :=  ;
52968: LD_ADDR_VAR 0 7
52972: PUSH
52973: LD_STRING 
52975: ST_TO_ADDR
// for i = 1 to normalCounter do
52976: LD_ADDR_VAR 0 8
52980: PUSH
52981: DOUBLE
52982: LD_INT 1
52984: DEC
52985: ST_TO_ADDR
52986: LD_EXP 29
52990: PUSH
52991: FOR_TO
52992: IFFALSE 53093
// begin tmp := 0 ;
52994: LD_ADDR_VAR 0 3
52998: PUSH
52999: LD_STRING 0
53001: ST_TO_ADDR
// if result [ 1 ] then
53002: LD_VAR 0 2
53006: PUSH
53007: LD_INT 1
53009: ARRAY
53010: IFFALSE 53075
// if result [ 1 ] [ 1 ] = i then
53012: LD_VAR 0 2
53016: PUSH
53017: LD_INT 1
53019: ARRAY
53020: PUSH
53021: LD_INT 1
53023: ARRAY
53024: PUSH
53025: LD_VAR 0 8
53029: EQUAL
53030: IFFALSE 53075
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53032: LD_ADDR_VAR 0 2
53036: PUSH
53037: LD_VAR 0 2
53041: PPUSH
53042: LD_INT 1
53044: PPUSH
53045: LD_VAR 0 2
53049: PUSH
53050: LD_INT 1
53052: ARRAY
53053: PPUSH
53054: LD_INT 1
53056: PPUSH
53057: CALL_OW 3
53061: PPUSH
53062: CALL_OW 1
53066: ST_TO_ADDR
// tmp := 1 ;
53067: LD_ADDR_VAR 0 3
53071: PUSH
53072: LD_STRING 1
53074: ST_TO_ADDR
// end ; normal := normal & tmp ;
53075: LD_ADDR_VAR 0 5
53079: PUSH
53080: LD_VAR 0 5
53084: PUSH
53085: LD_VAR 0 3
53089: STR
53090: ST_TO_ADDR
// end ;
53091: GO 52991
53093: POP
53094: POP
// for i = 1 to hardcoreCounter do
53095: LD_ADDR_VAR 0 8
53099: PUSH
53100: DOUBLE
53101: LD_INT 1
53103: DEC
53104: ST_TO_ADDR
53105: LD_EXP 30
53109: PUSH
53110: FOR_TO
53111: IFFALSE 53216
// begin tmp := 0 ;
53113: LD_ADDR_VAR 0 3
53117: PUSH
53118: LD_STRING 0
53120: ST_TO_ADDR
// if result [ 2 ] then
53121: LD_VAR 0 2
53125: PUSH
53126: LD_INT 2
53128: ARRAY
53129: IFFALSE 53198
// if result [ 2 ] [ 1 ] = 100 + i then
53131: LD_VAR 0 2
53135: PUSH
53136: LD_INT 2
53138: ARRAY
53139: PUSH
53140: LD_INT 1
53142: ARRAY
53143: PUSH
53144: LD_INT 100
53146: PUSH
53147: LD_VAR 0 8
53151: PLUS
53152: EQUAL
53153: IFFALSE 53198
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53155: LD_ADDR_VAR 0 2
53159: PUSH
53160: LD_VAR 0 2
53164: PPUSH
53165: LD_INT 2
53167: PPUSH
53168: LD_VAR 0 2
53172: PUSH
53173: LD_INT 2
53175: ARRAY
53176: PPUSH
53177: LD_INT 1
53179: PPUSH
53180: CALL_OW 3
53184: PPUSH
53185: CALL_OW 1
53189: ST_TO_ADDR
// tmp := 1 ;
53190: LD_ADDR_VAR 0 3
53194: PUSH
53195: LD_STRING 1
53197: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53198: LD_ADDR_VAR 0 6
53202: PUSH
53203: LD_VAR 0 6
53207: PUSH
53208: LD_VAR 0 3
53212: STR
53213: ST_TO_ADDR
// end ;
53214: GO 53110
53216: POP
53217: POP
// if isGameLoad then
53218: LD_VAR 0 1
53222: IFFALSE 53697
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53224: LD_ADDR_VAR 0 4
53228: PUSH
53229: LD_EXP 33
53233: PUSH
53234: LD_EXP 32
53238: PUSH
53239: LD_EXP 34
53243: PUSH
53244: LD_EXP 31
53248: PUSH
53249: LD_EXP 35
53253: PUSH
53254: LD_EXP 36
53258: PUSH
53259: LD_EXP 37
53263: PUSH
53264: LD_EXP 38
53268: PUSH
53269: LD_EXP 39
53273: PUSH
53274: LD_EXP 40
53278: PUSH
53279: LD_EXP 41
53283: PUSH
53284: LD_EXP 42
53288: PUSH
53289: LD_EXP 43
53293: PUSH
53294: LD_EXP 44
53298: PUSH
53299: LD_EXP 52
53303: PUSH
53304: LD_EXP 53
53308: PUSH
53309: LD_EXP 54
53313: PUSH
53314: LD_EXP 55
53318: PUSH
53319: LD_EXP 57
53323: PUSH
53324: LD_EXP 58
53328: PUSH
53329: LD_EXP 59
53333: PUSH
53334: LD_EXP 62
53338: PUSH
53339: LD_EXP 64
53343: PUSH
53344: LD_EXP 65
53348: PUSH
53349: LD_EXP 66
53353: PUSH
53354: LD_EXP 68
53358: PUSH
53359: LD_EXP 69
53363: PUSH
53364: LD_EXP 72
53368: PUSH
53369: LD_EXP 73
53373: PUSH
53374: LD_EXP 74
53378: PUSH
53379: LD_EXP 75
53383: PUSH
53384: LD_EXP 76
53388: PUSH
53389: LD_EXP 77
53393: PUSH
53394: LD_EXP 78
53398: PUSH
53399: LD_EXP 79
53403: PUSH
53404: LD_EXP 80
53408: PUSH
53409: LD_EXP 45
53413: PUSH
53414: LD_EXP 46
53418: PUSH
53419: LD_EXP 49
53423: PUSH
53424: LD_EXP 50
53428: PUSH
53429: LD_EXP 51
53433: PUSH
53434: LD_EXP 47
53438: PUSH
53439: LD_EXP 48
53443: PUSH
53444: LD_EXP 56
53448: PUSH
53449: LD_EXP 60
53453: PUSH
53454: LD_EXP 61
53458: PUSH
53459: LD_EXP 63
53463: PUSH
53464: LD_EXP 67
53468: PUSH
53469: LD_EXP 70
53473: PUSH
53474: LD_EXP 71
53478: PUSH
53479: LD_EXP 81
53483: PUSH
53484: LD_EXP 82
53488: PUSH
53489: LD_EXP 83
53493: PUSH
53494: LD_EXP 84
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: ST_TO_ADDR
// tmp :=  ;
53555: LD_ADDR_VAR 0 3
53559: PUSH
53560: LD_STRING 
53562: ST_TO_ADDR
// for i = 1 to normalCounter do
53563: LD_ADDR_VAR 0 8
53567: PUSH
53568: DOUBLE
53569: LD_INT 1
53571: DEC
53572: ST_TO_ADDR
53573: LD_EXP 29
53577: PUSH
53578: FOR_TO
53579: IFFALSE 53615
// begin if flags [ i ] then
53581: LD_VAR 0 4
53585: PUSH
53586: LD_VAR 0 8
53590: ARRAY
53591: IFFALSE 53613
// tmp := tmp & i & ; ;
53593: LD_ADDR_VAR 0 3
53597: PUSH
53598: LD_VAR 0 3
53602: PUSH
53603: LD_VAR 0 8
53607: STR
53608: PUSH
53609: LD_STRING ;
53611: STR
53612: ST_TO_ADDR
// end ;
53613: GO 53578
53615: POP
53616: POP
// for i = 1 to hardcoreCounter do
53617: LD_ADDR_VAR 0 8
53621: PUSH
53622: DOUBLE
53623: LD_INT 1
53625: DEC
53626: ST_TO_ADDR
53627: LD_EXP 30
53631: PUSH
53632: FOR_TO
53633: IFFALSE 53679
// begin if flags [ normalCounter + i ] then
53635: LD_VAR 0 4
53639: PUSH
53640: LD_EXP 29
53644: PUSH
53645: LD_VAR 0 8
53649: PLUS
53650: ARRAY
53651: IFFALSE 53677
// tmp := tmp & ( 100 + i ) & ; ;
53653: LD_ADDR_VAR 0 3
53657: PUSH
53658: LD_VAR 0 3
53662: PUSH
53663: LD_INT 100
53665: PUSH
53666: LD_VAR 0 8
53670: PLUS
53671: STR
53672: PUSH
53673: LD_STRING ;
53675: STR
53676: ST_TO_ADDR
// end ;
53677: GO 53632
53679: POP
53680: POP
// if tmp then
53681: LD_VAR 0 3
53685: IFFALSE 53697
// active := tmp ;
53687: LD_ADDR_VAR 0 7
53691: PUSH
53692: LD_VAR 0 3
53696: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53697: LD_STRING getStreamItemsFromMission("
53699: PUSH
53700: LD_VAR 0 5
53704: STR
53705: PUSH
53706: LD_STRING ","
53708: STR
53709: PUSH
53710: LD_VAR 0 6
53714: STR
53715: PUSH
53716: LD_STRING ","
53718: STR
53719: PUSH
53720: LD_VAR 0 7
53724: STR
53725: PUSH
53726: LD_STRING ")
53728: STR
53729: PPUSH
53730: CALL_OW 559
// end else
53734: GO 53743
// ToLua ( getStreamItemsFromMission("","","") ) ;
53736: LD_STRING getStreamItemsFromMission("","","")
53738: PPUSH
53739: CALL_OW 559
// end ;
53743: LD_VAR 0 2
53747: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53748: LD_EXP 28
53752: PUSH
53753: LD_EXP 33
53757: AND
53758: IFFALSE 53882
53760: GO 53762
53762: DISABLE
53763: LD_INT 0
53765: PPUSH
53766: PPUSH
// begin enable ;
53767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53768: LD_ADDR_VAR 0 2
53772: PUSH
53773: LD_INT 22
53775: PUSH
53776: LD_OWVAR 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 34
53790: PUSH
53791: LD_INT 7
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 34
53800: PUSH
53801: LD_INT 45
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 34
53810: PUSH
53811: LD_INT 28
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 34
53820: PUSH
53821: LD_INT 47
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PPUSH
53839: CALL_OW 69
53843: ST_TO_ADDR
// if not tmp then
53844: LD_VAR 0 2
53848: NOT
53849: IFFALSE 53853
// exit ;
53851: GO 53882
// for i in tmp do
53853: LD_ADDR_VAR 0 1
53857: PUSH
53858: LD_VAR 0 2
53862: PUSH
53863: FOR_IN
53864: IFFALSE 53880
// begin SetLives ( i , 0 ) ;
53866: LD_VAR 0 1
53870: PPUSH
53871: LD_INT 0
53873: PPUSH
53874: CALL_OW 234
// end ;
53878: GO 53863
53880: POP
53881: POP
// end ;
53882: PPOPN 2
53884: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53885: LD_EXP 28
53889: PUSH
53890: LD_EXP 34
53894: AND
53895: IFFALSE 53979
53897: GO 53899
53899: DISABLE
53900: LD_INT 0
53902: PPUSH
53903: PPUSH
// begin enable ;
53904: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53905: LD_ADDR_VAR 0 2
53909: PUSH
53910: LD_INT 22
53912: PUSH
53913: LD_OWVAR 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 32
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PPUSH
53936: CALL_OW 69
53940: ST_TO_ADDR
// if not tmp then
53941: LD_VAR 0 2
53945: NOT
53946: IFFALSE 53950
// exit ;
53948: GO 53979
// for i in tmp do
53950: LD_ADDR_VAR 0 1
53954: PUSH
53955: LD_VAR 0 2
53959: PUSH
53960: FOR_IN
53961: IFFALSE 53977
// begin SetLives ( i , 0 ) ;
53963: LD_VAR 0 1
53967: PPUSH
53968: LD_INT 0
53970: PPUSH
53971: CALL_OW 234
// end ;
53975: GO 53960
53977: POP
53978: POP
// end ;
53979: PPOPN 2
53981: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53982: LD_EXP 28
53986: PUSH
53987: LD_EXP 31
53991: AND
53992: IFFALSE 54085
53994: GO 53996
53996: DISABLE
53997: LD_INT 0
53999: PPUSH
// begin enable ;
54000: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54001: LD_ADDR_VAR 0 1
54005: PUSH
54006: LD_INT 22
54008: PUSH
54009: LD_OWVAR 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 25
54023: PUSH
54024: LD_INT 5
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 25
54033: PUSH
54034: LD_INT 9
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 25
54043: PUSH
54044: LD_INT 8
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PPUSH
54061: CALL_OW 69
54065: PUSH
54066: FOR_IN
54067: IFFALSE 54083
// begin SetClass ( i , 1 ) ;
54069: LD_VAR 0 1
54073: PPUSH
54074: LD_INT 1
54076: PPUSH
54077: CALL_OW 336
// end ;
54081: GO 54066
54083: POP
54084: POP
// end ;
54085: PPOPN 1
54087: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54088: LD_EXP 28
54092: PUSH
54093: LD_EXP 32
54097: AND
54098: PUSH
54099: LD_OWVAR 65
54103: PUSH
54104: LD_INT 7
54106: LESS
54107: AND
54108: IFFALSE 54122
54110: GO 54112
54112: DISABLE
// begin enable ;
54113: ENABLE
// game_speed := 7 ;
54114: LD_ADDR_OWVAR 65
54118: PUSH
54119: LD_INT 7
54121: ST_TO_ADDR
// end ;
54122: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54123: LD_EXP 28
54127: PUSH
54128: LD_EXP 35
54132: AND
54133: IFFALSE 54335
54135: GO 54137
54137: DISABLE
54138: LD_INT 0
54140: PPUSH
54141: PPUSH
54142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54143: LD_ADDR_VAR 0 3
54147: PUSH
54148: LD_INT 81
54150: PUSH
54151: LD_OWVAR 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 21
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PPUSH
54174: CALL_OW 69
54178: ST_TO_ADDR
// if not tmp then
54179: LD_VAR 0 3
54183: NOT
54184: IFFALSE 54188
// exit ;
54186: GO 54335
// if tmp > 5 then
54188: LD_VAR 0 3
54192: PUSH
54193: LD_INT 5
54195: GREATER
54196: IFFALSE 54208
// k := 5 else
54198: LD_ADDR_VAR 0 2
54202: PUSH
54203: LD_INT 5
54205: ST_TO_ADDR
54206: GO 54218
// k := tmp ;
54208: LD_ADDR_VAR 0 2
54212: PUSH
54213: LD_VAR 0 3
54217: ST_TO_ADDR
// for i := 1 to k do
54218: LD_ADDR_VAR 0 1
54222: PUSH
54223: DOUBLE
54224: LD_INT 1
54226: DEC
54227: ST_TO_ADDR
54228: LD_VAR 0 2
54232: PUSH
54233: FOR_TO
54234: IFFALSE 54333
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54236: LD_VAR 0 3
54240: PUSH
54241: LD_VAR 0 1
54245: ARRAY
54246: PPUSH
54247: LD_VAR 0 1
54251: PUSH
54252: LD_INT 4
54254: MOD
54255: PUSH
54256: LD_INT 1
54258: PLUS
54259: PPUSH
54260: CALL_OW 259
54264: PUSH
54265: LD_INT 10
54267: LESS
54268: IFFALSE 54331
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54270: LD_VAR 0 3
54274: PUSH
54275: LD_VAR 0 1
54279: ARRAY
54280: PPUSH
54281: LD_VAR 0 1
54285: PUSH
54286: LD_INT 4
54288: MOD
54289: PUSH
54290: LD_INT 1
54292: PLUS
54293: PPUSH
54294: LD_VAR 0 3
54298: PUSH
54299: LD_VAR 0 1
54303: ARRAY
54304: PPUSH
54305: LD_VAR 0 1
54309: PUSH
54310: LD_INT 4
54312: MOD
54313: PUSH
54314: LD_INT 1
54316: PLUS
54317: PPUSH
54318: CALL_OW 259
54322: PUSH
54323: LD_INT 1
54325: PLUS
54326: PPUSH
54327: CALL_OW 237
54331: GO 54233
54333: POP
54334: POP
// end ;
54335: PPOPN 3
54337: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54338: LD_EXP 28
54342: PUSH
54343: LD_EXP 36
54347: AND
54348: IFFALSE 54368
54350: GO 54352
54352: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54353: LD_INT 4
54355: PPUSH
54356: LD_OWVAR 2
54360: PPUSH
54361: LD_INT 0
54363: PPUSH
54364: CALL_OW 324
54368: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54369: LD_EXP 28
54373: PUSH
54374: LD_EXP 65
54378: AND
54379: IFFALSE 54399
54381: GO 54383
54383: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54384: LD_INT 19
54386: PPUSH
54387: LD_OWVAR 2
54391: PPUSH
54392: LD_INT 0
54394: PPUSH
54395: CALL_OW 324
54399: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54400: LD_EXP 28
54404: PUSH
54405: LD_EXP 37
54409: AND
54410: IFFALSE 54512
54412: GO 54414
54414: DISABLE
54415: LD_INT 0
54417: PPUSH
54418: PPUSH
// begin enable ;
54419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54420: LD_ADDR_VAR 0 2
54424: PUSH
54425: LD_INT 22
54427: PUSH
54428: LD_OWVAR 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 34
54442: PUSH
54443: LD_INT 11
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 34
54452: PUSH
54453: LD_INT 30
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PPUSH
54469: CALL_OW 69
54473: ST_TO_ADDR
// if not tmp then
54474: LD_VAR 0 2
54478: NOT
54479: IFFALSE 54483
// exit ;
54481: GO 54512
// for i in tmp do
54483: LD_ADDR_VAR 0 1
54487: PUSH
54488: LD_VAR 0 2
54492: PUSH
54493: FOR_IN
54494: IFFALSE 54510
// begin SetLives ( i , 0 ) ;
54496: LD_VAR 0 1
54500: PPUSH
54501: LD_INT 0
54503: PPUSH
54504: CALL_OW 234
// end ;
54508: GO 54493
54510: POP
54511: POP
// end ;
54512: PPOPN 2
54514: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54515: LD_EXP 28
54519: PUSH
54520: LD_EXP 38
54524: AND
54525: IFFALSE 54545
54527: GO 54529
54529: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54530: LD_INT 32
54532: PPUSH
54533: LD_OWVAR 2
54537: PPUSH
54538: LD_INT 0
54540: PPUSH
54541: CALL_OW 324
54545: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54546: LD_EXP 28
54550: PUSH
54551: LD_EXP 39
54555: AND
54556: IFFALSE 54737
54558: GO 54560
54560: DISABLE
54561: LD_INT 0
54563: PPUSH
54564: PPUSH
54565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54566: LD_ADDR_VAR 0 2
54570: PUSH
54571: LD_INT 22
54573: PUSH
54574: LD_OWVAR 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 33
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PPUSH
54597: CALL_OW 69
54601: ST_TO_ADDR
// if not tmp then
54602: LD_VAR 0 2
54606: NOT
54607: IFFALSE 54611
// exit ;
54609: GO 54737
// side := 0 ;
54611: LD_ADDR_VAR 0 3
54615: PUSH
54616: LD_INT 0
54618: ST_TO_ADDR
// for i := 1 to 8 do
54619: LD_ADDR_VAR 0 1
54623: PUSH
54624: DOUBLE
54625: LD_INT 1
54627: DEC
54628: ST_TO_ADDR
54629: LD_INT 8
54631: PUSH
54632: FOR_TO
54633: IFFALSE 54681
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54635: LD_OWVAR 2
54639: PUSH
54640: LD_VAR 0 1
54644: NONEQUAL
54645: PUSH
54646: LD_OWVAR 2
54650: PPUSH
54651: LD_VAR 0 1
54655: PPUSH
54656: CALL_OW 81
54660: PUSH
54661: LD_INT 2
54663: EQUAL
54664: AND
54665: IFFALSE 54679
// begin side := i ;
54667: LD_ADDR_VAR 0 3
54671: PUSH
54672: LD_VAR 0 1
54676: ST_TO_ADDR
// break ;
54677: GO 54681
// end ;
54679: GO 54632
54681: POP
54682: POP
// if not side then
54683: LD_VAR 0 3
54687: NOT
54688: IFFALSE 54692
// exit ;
54690: GO 54737
// for i := 1 to tmp do
54692: LD_ADDR_VAR 0 1
54696: PUSH
54697: DOUBLE
54698: LD_INT 1
54700: DEC
54701: ST_TO_ADDR
54702: LD_VAR 0 2
54706: PUSH
54707: FOR_TO
54708: IFFALSE 54735
// if Prob ( 60 ) then
54710: LD_INT 60
54712: PPUSH
54713: CALL_OW 13
54717: IFFALSE 54733
// SetSide ( i , side ) ;
54719: LD_VAR 0 1
54723: PPUSH
54724: LD_VAR 0 3
54728: PPUSH
54729: CALL_OW 235
54733: GO 54707
54735: POP
54736: POP
// end ;
54737: PPOPN 3
54739: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54740: LD_EXP 28
54744: PUSH
54745: LD_EXP 41
54749: AND
54750: IFFALSE 54869
54752: GO 54754
54754: DISABLE
54755: LD_INT 0
54757: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54758: LD_ADDR_VAR 0 1
54762: PUSH
54763: LD_INT 22
54765: PUSH
54766: LD_OWVAR 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 21
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 23
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: PPUSH
54807: CALL_OW 69
54811: PUSH
54812: FOR_IN
54813: IFFALSE 54867
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54815: LD_VAR 0 1
54819: PPUSH
54820: CALL_OW 257
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: LD_INT 4
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: IN
54843: IFFALSE 54865
// SetClass ( un , rand ( 1 , 4 ) ) ;
54845: LD_VAR 0 1
54849: PPUSH
54850: LD_INT 1
54852: PPUSH
54853: LD_INT 4
54855: PPUSH
54856: CALL_OW 12
54860: PPUSH
54861: CALL_OW 336
54865: GO 54812
54867: POP
54868: POP
// end ;
54869: PPOPN 1
54871: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54872: LD_EXP 28
54876: PUSH
54877: LD_EXP 40
54881: AND
54882: IFFALSE 54961
54884: GO 54886
54886: DISABLE
54887: LD_INT 0
54889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54890: LD_ADDR_VAR 0 1
54894: PUSH
54895: LD_INT 22
54897: PUSH
54898: LD_OWVAR 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 21
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PPUSH
54921: CALL_OW 69
54925: ST_TO_ADDR
// if not tmp then
54926: LD_VAR 0 1
54930: NOT
54931: IFFALSE 54935
// exit ;
54933: GO 54961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54935: LD_VAR 0 1
54939: PUSH
54940: LD_INT 1
54942: PPUSH
54943: LD_VAR 0 1
54947: PPUSH
54948: CALL_OW 12
54952: ARRAY
54953: PPUSH
54954: LD_INT 100
54956: PPUSH
54957: CALL_OW 234
// end ;
54961: PPOPN 1
54963: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54964: LD_EXP 28
54968: PUSH
54969: LD_EXP 42
54973: AND
54974: IFFALSE 55072
54976: GO 54978
54978: DISABLE
54979: LD_INT 0
54981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54982: LD_ADDR_VAR 0 1
54986: PUSH
54987: LD_INT 22
54989: PUSH
54990: LD_OWVAR 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 21
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PPUSH
55013: CALL_OW 69
55017: ST_TO_ADDR
// if not tmp then
55018: LD_VAR 0 1
55022: NOT
55023: IFFALSE 55027
// exit ;
55025: GO 55072
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55027: LD_VAR 0 1
55031: PUSH
55032: LD_INT 1
55034: PPUSH
55035: LD_VAR 0 1
55039: PPUSH
55040: CALL_OW 12
55044: ARRAY
55045: PPUSH
55046: LD_INT 1
55048: PPUSH
55049: LD_INT 4
55051: PPUSH
55052: CALL_OW 12
55056: PPUSH
55057: LD_INT 3000
55059: PPUSH
55060: LD_INT 9000
55062: PPUSH
55063: CALL_OW 12
55067: PPUSH
55068: CALL_OW 492
// end ;
55072: PPOPN 1
55074: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55075: LD_EXP 28
55079: PUSH
55080: LD_EXP 43
55084: AND
55085: IFFALSE 55105
55087: GO 55089
55089: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55090: LD_INT 1
55092: PPUSH
55093: LD_OWVAR 2
55097: PPUSH
55098: LD_INT 0
55100: PPUSH
55101: CALL_OW 324
55105: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55106: LD_EXP 28
55110: PUSH
55111: LD_EXP 44
55115: AND
55116: IFFALSE 55199
55118: GO 55120
55120: DISABLE
55121: LD_INT 0
55123: PPUSH
55124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55125: LD_ADDR_VAR 0 2
55129: PUSH
55130: LD_INT 22
55132: PUSH
55133: LD_OWVAR 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 21
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PPUSH
55156: CALL_OW 69
55160: ST_TO_ADDR
// if not tmp then
55161: LD_VAR 0 2
55165: NOT
55166: IFFALSE 55170
// exit ;
55168: GO 55199
// for i in tmp do
55170: LD_ADDR_VAR 0 1
55174: PUSH
55175: LD_VAR 0 2
55179: PUSH
55180: FOR_IN
55181: IFFALSE 55197
// SetBLevel ( i , 10 ) ;
55183: LD_VAR 0 1
55187: PPUSH
55188: LD_INT 10
55190: PPUSH
55191: CALL_OW 241
55195: GO 55180
55197: POP
55198: POP
// end ;
55199: PPOPN 2
55201: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55202: LD_EXP 28
55206: PUSH
55207: LD_EXP 45
55211: AND
55212: IFFALSE 55323
55214: GO 55216
55216: DISABLE
55217: LD_INT 0
55219: PPUSH
55220: PPUSH
55221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55222: LD_ADDR_VAR 0 3
55226: PUSH
55227: LD_INT 22
55229: PUSH
55230: LD_OWVAR 2
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 25
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PPUSH
55253: CALL_OW 69
55257: ST_TO_ADDR
// if not tmp then
55258: LD_VAR 0 3
55262: NOT
55263: IFFALSE 55267
// exit ;
55265: GO 55323
// un := tmp [ rand ( 1 , tmp ) ] ;
55267: LD_ADDR_VAR 0 2
55271: PUSH
55272: LD_VAR 0 3
55276: PUSH
55277: LD_INT 1
55279: PPUSH
55280: LD_VAR 0 3
55284: PPUSH
55285: CALL_OW 12
55289: ARRAY
55290: ST_TO_ADDR
// if Crawls ( un ) then
55291: LD_VAR 0 2
55295: PPUSH
55296: CALL_OW 318
55300: IFFALSE 55311
// ComWalk ( un ) ;
55302: LD_VAR 0 2
55306: PPUSH
55307: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55311: LD_VAR 0 2
55315: PPUSH
55316: LD_INT 5
55318: PPUSH
55319: CALL_OW 336
// end ;
55323: PPOPN 3
55325: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55326: LD_EXP 28
55330: PUSH
55331: LD_EXP 46
55335: AND
55336: PUSH
55337: LD_OWVAR 67
55341: PUSH
55342: LD_INT 4
55344: LESS
55345: AND
55346: IFFALSE 55365
55348: GO 55350
55350: DISABLE
// begin Difficulty := Difficulty + 1 ;
55351: LD_ADDR_OWVAR 67
55355: PUSH
55356: LD_OWVAR 67
55360: PUSH
55361: LD_INT 1
55363: PLUS
55364: ST_TO_ADDR
// end ;
55365: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55366: LD_EXP 28
55370: PUSH
55371: LD_EXP 47
55375: AND
55376: IFFALSE 55479
55378: GO 55380
55380: DISABLE
55381: LD_INT 0
55383: PPUSH
// begin for i := 1 to 5 do
55384: LD_ADDR_VAR 0 1
55388: PUSH
55389: DOUBLE
55390: LD_INT 1
55392: DEC
55393: ST_TO_ADDR
55394: LD_INT 5
55396: PUSH
55397: FOR_TO
55398: IFFALSE 55477
// begin uc_nation := nation_nature ;
55400: LD_ADDR_OWVAR 21
55404: PUSH
55405: LD_INT 0
55407: ST_TO_ADDR
// uc_side := 0 ;
55408: LD_ADDR_OWVAR 20
55412: PUSH
55413: LD_INT 0
55415: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55416: LD_ADDR_OWVAR 29
55420: PUSH
55421: LD_INT 12
55423: PUSH
55424: LD_INT 12
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// hc_agressivity := 20 ;
55431: LD_ADDR_OWVAR 35
55435: PUSH
55436: LD_INT 20
55438: ST_TO_ADDR
// hc_class := class_tiger ;
55439: LD_ADDR_OWVAR 28
55443: PUSH
55444: LD_INT 14
55446: ST_TO_ADDR
// hc_gallery :=  ;
55447: LD_ADDR_OWVAR 33
55451: PUSH
55452: LD_STRING 
55454: ST_TO_ADDR
// hc_name :=  ;
55455: LD_ADDR_OWVAR 26
55459: PUSH
55460: LD_STRING 
55462: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55463: CALL_OW 44
55467: PPUSH
55468: LD_INT 0
55470: PPUSH
55471: CALL_OW 51
// end ;
55475: GO 55397
55477: POP
55478: POP
// end ;
55479: PPOPN 1
55481: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55482: LD_EXP 28
55486: PUSH
55487: LD_EXP 48
55491: AND
55492: IFFALSE 55501
55494: GO 55496
55496: DISABLE
// StreamSibBomb ;
55497: CALL 55502 0 0
55501: END
// export function StreamSibBomb ; var i , x , y ; begin
55502: LD_INT 0
55504: PPUSH
55505: PPUSH
55506: PPUSH
55507: PPUSH
// result := false ;
55508: LD_ADDR_VAR 0 1
55512: PUSH
55513: LD_INT 0
55515: ST_TO_ADDR
// for i := 1 to 16 do
55516: LD_ADDR_VAR 0 2
55520: PUSH
55521: DOUBLE
55522: LD_INT 1
55524: DEC
55525: ST_TO_ADDR
55526: LD_INT 16
55528: PUSH
55529: FOR_TO
55530: IFFALSE 55729
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55532: LD_ADDR_VAR 0 3
55536: PUSH
55537: LD_INT 10
55539: PUSH
55540: LD_INT 20
55542: PUSH
55543: LD_INT 30
55545: PUSH
55546: LD_INT 40
55548: PUSH
55549: LD_INT 50
55551: PUSH
55552: LD_INT 60
55554: PUSH
55555: LD_INT 70
55557: PUSH
55558: LD_INT 80
55560: PUSH
55561: LD_INT 90
55563: PUSH
55564: LD_INT 100
55566: PUSH
55567: LD_INT 110
55569: PUSH
55570: LD_INT 120
55572: PUSH
55573: LD_INT 130
55575: PUSH
55576: LD_INT 140
55578: PUSH
55579: LD_INT 150
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PPUSH
55602: LD_INT 15
55604: PPUSH
55605: CALL_OW 12
55609: ARRAY
55610: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55611: LD_ADDR_VAR 0 4
55615: PUSH
55616: LD_INT 10
55618: PUSH
55619: LD_INT 20
55621: PUSH
55622: LD_INT 30
55624: PUSH
55625: LD_INT 40
55627: PUSH
55628: LD_INT 50
55630: PUSH
55631: LD_INT 60
55633: PUSH
55634: LD_INT 70
55636: PUSH
55637: LD_INT 80
55639: PUSH
55640: LD_INT 90
55642: PUSH
55643: LD_INT 100
55645: PUSH
55646: LD_INT 110
55648: PUSH
55649: LD_INT 120
55651: PUSH
55652: LD_INT 130
55654: PUSH
55655: LD_INT 140
55657: PUSH
55658: LD_INT 150
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PPUSH
55681: LD_INT 15
55683: PPUSH
55684: CALL_OW 12
55688: ARRAY
55689: ST_TO_ADDR
// if ValidHex ( x , y ) then
55690: LD_VAR 0 3
55694: PPUSH
55695: LD_VAR 0 4
55699: PPUSH
55700: CALL_OW 488
55704: IFFALSE 55727
// begin result := [ x , y ] ;
55706: LD_ADDR_VAR 0 1
55710: PUSH
55711: LD_VAR 0 3
55715: PUSH
55716: LD_VAR 0 4
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: ST_TO_ADDR
// break ;
55725: GO 55729
// end ; end ;
55727: GO 55529
55729: POP
55730: POP
// if result then
55731: LD_VAR 0 1
55735: IFFALSE 55795
// begin ToLua ( playSibBomb() ) ;
55737: LD_STRING playSibBomb()
55739: PPUSH
55740: CALL_OW 559
// wait ( 0 0$14 ) ;
55744: LD_INT 490
55746: PPUSH
55747: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55751: LD_VAR 0 1
55755: PUSH
55756: LD_INT 1
55758: ARRAY
55759: PPUSH
55760: LD_VAR 0 1
55764: PUSH
55765: LD_INT 2
55767: ARRAY
55768: PPUSH
55769: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55773: LD_VAR 0 1
55777: PUSH
55778: LD_INT 1
55780: ARRAY
55781: PPUSH
55782: LD_VAR 0 1
55786: PUSH
55787: LD_INT 2
55789: ARRAY
55790: PPUSH
55791: CALL_OW 429
// end ; end ;
55795: LD_VAR 0 1
55799: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55800: LD_EXP 28
55804: PUSH
55805: LD_EXP 50
55809: AND
55810: IFFALSE 55822
55812: GO 55814
55814: DISABLE
// YouLost (  ) ;
55815: LD_STRING 
55817: PPUSH
55818: CALL_OW 104
55822: END
// every 0 0$1 trigger StreamModeActive and sFog do
55823: LD_EXP 28
55827: PUSH
55828: LD_EXP 49
55832: AND
55833: IFFALSE 55847
55835: GO 55837
55837: DISABLE
// FogOff ( your_side ) ;
55838: LD_OWVAR 2
55842: PPUSH
55843: CALL_OW 344
55847: END
// every 0 0$1 trigger StreamModeActive and sSun do
55848: LD_EXP 28
55852: PUSH
55853: LD_EXP 51
55857: AND
55858: IFFALSE 55886
55860: GO 55862
55862: DISABLE
// begin solar_recharge_percent := 0 ;
55863: LD_ADDR_OWVAR 79
55867: PUSH
55868: LD_INT 0
55870: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55871: LD_INT 10500
55873: PPUSH
55874: CALL_OW 67
// solar_recharge_percent := 100 ;
55878: LD_ADDR_OWVAR 79
55882: PUSH
55883: LD_INT 100
55885: ST_TO_ADDR
// end ;
55886: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55887: LD_EXP 28
55891: PUSH
55892: LD_EXP 52
55896: AND
55897: IFFALSE 56136
55899: GO 55901
55901: DISABLE
55902: LD_INT 0
55904: PPUSH
55905: PPUSH
55906: PPUSH
// begin tmp := [ ] ;
55907: LD_ADDR_VAR 0 3
55911: PUSH
55912: EMPTY
55913: ST_TO_ADDR
// for i := 1 to 6 do
55914: LD_ADDR_VAR 0 1
55918: PUSH
55919: DOUBLE
55920: LD_INT 1
55922: DEC
55923: ST_TO_ADDR
55924: LD_INT 6
55926: PUSH
55927: FOR_TO
55928: IFFALSE 56033
// begin uc_nation := nation_nature ;
55930: LD_ADDR_OWVAR 21
55934: PUSH
55935: LD_INT 0
55937: ST_TO_ADDR
// uc_side := 0 ;
55938: LD_ADDR_OWVAR 20
55942: PUSH
55943: LD_INT 0
55945: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55946: LD_ADDR_OWVAR 29
55950: PUSH
55951: LD_INT 12
55953: PUSH
55954: LD_INT 12
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// hc_agressivity := 20 ;
55961: LD_ADDR_OWVAR 35
55965: PUSH
55966: LD_INT 20
55968: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55969: LD_ADDR_OWVAR 28
55973: PUSH
55974: LD_INT 17
55976: ST_TO_ADDR
// hc_gallery :=  ;
55977: LD_ADDR_OWVAR 33
55981: PUSH
55982: LD_STRING 
55984: ST_TO_ADDR
// hc_name :=  ;
55985: LD_ADDR_OWVAR 26
55989: PUSH
55990: LD_STRING 
55992: ST_TO_ADDR
// un := CreateHuman ;
55993: LD_ADDR_VAR 0 2
55997: PUSH
55998: CALL_OW 44
56002: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56003: LD_VAR 0 2
56007: PPUSH
56008: LD_INT 1
56010: PPUSH
56011: CALL_OW 51
// tmp := tmp ^ un ;
56015: LD_ADDR_VAR 0 3
56019: PUSH
56020: LD_VAR 0 3
56024: PUSH
56025: LD_VAR 0 2
56029: ADD
56030: ST_TO_ADDR
// end ;
56031: GO 55927
56033: POP
56034: POP
// repeat wait ( 0 0$1 ) ;
56035: LD_INT 35
56037: PPUSH
56038: CALL_OW 67
// for un in tmp do
56042: LD_ADDR_VAR 0 2
56046: PUSH
56047: LD_VAR 0 3
56051: PUSH
56052: FOR_IN
56053: IFFALSE 56127
// begin if IsDead ( un ) then
56055: LD_VAR 0 2
56059: PPUSH
56060: CALL_OW 301
56064: IFFALSE 56084
// begin tmp := tmp diff un ;
56066: LD_ADDR_VAR 0 3
56070: PUSH
56071: LD_VAR 0 3
56075: PUSH
56076: LD_VAR 0 2
56080: DIFF
56081: ST_TO_ADDR
// continue ;
56082: GO 56052
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56084: LD_VAR 0 2
56088: PPUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 22
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PPUSH
56106: CALL_OW 69
56110: PPUSH
56111: LD_VAR 0 2
56115: PPUSH
56116: CALL_OW 74
56120: PPUSH
56121: CALL_OW 115
// end ;
56125: GO 56052
56127: POP
56128: POP
// until not tmp ;
56129: LD_VAR 0 3
56133: NOT
56134: IFFALSE 56035
// end ;
56136: PPOPN 3
56138: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56139: LD_EXP 28
56143: PUSH
56144: LD_EXP 53
56148: AND
56149: IFFALSE 56203
56151: GO 56153
56153: DISABLE
// begin ToLua ( displayTroll(); ) ;
56154: LD_STRING displayTroll();
56156: PPUSH
56157: CALL_OW 559
// wait ( 3 3$00 ) ;
56161: LD_INT 6300
56163: PPUSH
56164: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56168: LD_STRING hideTroll();
56170: PPUSH
56171: CALL_OW 559
// wait ( 1 1$00 ) ;
56175: LD_INT 2100
56177: PPUSH
56178: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56182: LD_STRING displayTroll();
56184: PPUSH
56185: CALL_OW 559
// wait ( 1 1$00 ) ;
56189: LD_INT 2100
56191: PPUSH
56192: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56196: LD_STRING hideTroll();
56198: PPUSH
56199: CALL_OW 559
// end ;
56203: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56204: LD_EXP 28
56208: PUSH
56209: LD_EXP 54
56213: AND
56214: IFFALSE 56277
56216: GO 56218
56218: DISABLE
56219: LD_INT 0
56221: PPUSH
// begin p := 0 ;
56222: LD_ADDR_VAR 0 1
56226: PUSH
56227: LD_INT 0
56229: ST_TO_ADDR
// repeat game_speed := 1 ;
56230: LD_ADDR_OWVAR 65
56234: PUSH
56235: LD_INT 1
56237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56238: LD_INT 35
56240: PPUSH
56241: CALL_OW 67
// p := p + 1 ;
56245: LD_ADDR_VAR 0 1
56249: PUSH
56250: LD_VAR 0 1
56254: PUSH
56255: LD_INT 1
56257: PLUS
56258: ST_TO_ADDR
// until p >= 60 ;
56259: LD_VAR 0 1
56263: PUSH
56264: LD_INT 60
56266: GREATEREQUAL
56267: IFFALSE 56230
// game_speed := 4 ;
56269: LD_ADDR_OWVAR 65
56273: PUSH
56274: LD_INT 4
56276: ST_TO_ADDR
// end ;
56277: PPOPN 1
56279: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56280: LD_EXP 28
56284: PUSH
56285: LD_EXP 55
56289: AND
56290: IFFALSE 56436
56292: GO 56294
56294: DISABLE
56295: LD_INT 0
56297: PPUSH
56298: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56299: LD_ADDR_VAR 0 1
56303: PUSH
56304: LD_INT 22
56306: PUSH
56307: LD_OWVAR 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 30
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 30
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PPUSH
56348: CALL_OW 69
56352: ST_TO_ADDR
// if not depot then
56353: LD_VAR 0 1
56357: NOT
56358: IFFALSE 56362
// exit ;
56360: GO 56436
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56362: LD_ADDR_VAR 0 2
56366: PUSH
56367: LD_VAR 0 1
56371: PUSH
56372: LD_INT 1
56374: PPUSH
56375: LD_VAR 0 1
56379: PPUSH
56380: CALL_OW 12
56384: ARRAY
56385: PPUSH
56386: CALL_OW 274
56390: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56391: LD_VAR 0 2
56395: PPUSH
56396: LD_INT 1
56398: PPUSH
56399: LD_INT 0
56401: PPUSH
56402: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56406: LD_VAR 0 2
56410: PPUSH
56411: LD_INT 2
56413: PPUSH
56414: LD_INT 0
56416: PPUSH
56417: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56421: LD_VAR 0 2
56425: PPUSH
56426: LD_INT 3
56428: PPUSH
56429: LD_INT 0
56431: PPUSH
56432: CALL_OW 277
// end ;
56436: PPOPN 2
56438: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56439: LD_EXP 28
56443: PUSH
56444: LD_EXP 56
56448: AND
56449: IFFALSE 56546
56451: GO 56453
56453: DISABLE
56454: LD_INT 0
56456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56457: LD_ADDR_VAR 0 1
56461: PUSH
56462: LD_INT 22
56464: PUSH
56465: LD_OWVAR 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 21
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: LD_INT 23
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: PPUSH
56506: CALL_OW 69
56510: ST_TO_ADDR
// if not tmp then
56511: LD_VAR 0 1
56515: NOT
56516: IFFALSE 56520
// exit ;
56518: GO 56546
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56520: LD_VAR 0 1
56524: PUSH
56525: LD_INT 1
56527: PPUSH
56528: LD_VAR 0 1
56532: PPUSH
56533: CALL_OW 12
56537: ARRAY
56538: PPUSH
56539: LD_INT 200
56541: PPUSH
56542: CALL_OW 234
// end ;
56546: PPOPN 1
56548: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56549: LD_EXP 28
56553: PUSH
56554: LD_EXP 57
56558: AND
56559: IFFALSE 56638
56561: GO 56563
56563: DISABLE
56564: LD_INT 0
56566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56567: LD_ADDR_VAR 0 1
56571: PUSH
56572: LD_INT 22
56574: PUSH
56575: LD_OWVAR 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 21
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PPUSH
56598: CALL_OW 69
56602: ST_TO_ADDR
// if not tmp then
56603: LD_VAR 0 1
56607: NOT
56608: IFFALSE 56612
// exit ;
56610: GO 56638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56612: LD_VAR 0 1
56616: PUSH
56617: LD_INT 1
56619: PPUSH
56620: LD_VAR 0 1
56624: PPUSH
56625: CALL_OW 12
56629: ARRAY
56630: PPUSH
56631: LD_INT 60
56633: PPUSH
56634: CALL_OW 234
// end ;
56638: PPOPN 1
56640: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56641: LD_EXP 28
56645: PUSH
56646: LD_EXP 58
56650: AND
56651: IFFALSE 56750
56653: GO 56655
56655: DISABLE
56656: LD_INT 0
56658: PPUSH
56659: PPUSH
// begin enable ;
56660: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56661: LD_ADDR_VAR 0 1
56665: PUSH
56666: LD_INT 22
56668: PUSH
56669: LD_OWVAR 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 61
56680: PUSH
56681: EMPTY
56682: LIST
56683: PUSH
56684: LD_INT 33
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: PPUSH
56699: CALL_OW 69
56703: ST_TO_ADDR
// if not tmp then
56704: LD_VAR 0 1
56708: NOT
56709: IFFALSE 56713
// exit ;
56711: GO 56750
// for i in tmp do
56713: LD_ADDR_VAR 0 2
56717: PUSH
56718: LD_VAR 0 1
56722: PUSH
56723: FOR_IN
56724: IFFALSE 56748
// if IsControledBy ( i ) then
56726: LD_VAR 0 2
56730: PPUSH
56731: CALL_OW 312
56735: IFFALSE 56746
// ComUnlink ( i ) ;
56737: LD_VAR 0 2
56741: PPUSH
56742: CALL_OW 136
56746: GO 56723
56748: POP
56749: POP
// end ;
56750: PPOPN 2
56752: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56753: LD_EXP 28
56757: PUSH
56758: LD_EXP 59
56762: AND
56763: IFFALSE 56903
56765: GO 56767
56767: DISABLE
56768: LD_INT 0
56770: PPUSH
56771: PPUSH
// begin ToLua ( displayPowell(); ) ;
56772: LD_STRING displayPowell();
56774: PPUSH
56775: CALL_OW 559
// uc_side := 0 ;
56779: LD_ADDR_OWVAR 20
56783: PUSH
56784: LD_INT 0
56786: ST_TO_ADDR
// uc_nation := 2 ;
56787: LD_ADDR_OWVAR 21
56791: PUSH
56792: LD_INT 2
56794: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56795: LD_ADDR_OWVAR 37
56799: PUSH
56800: LD_INT 14
56802: ST_TO_ADDR
// vc_engine := engine_siberite ;
56803: LD_ADDR_OWVAR 39
56807: PUSH
56808: LD_INT 3
56810: ST_TO_ADDR
// vc_control := control_apeman ;
56811: LD_ADDR_OWVAR 38
56815: PUSH
56816: LD_INT 5
56818: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56819: LD_ADDR_OWVAR 40
56823: PUSH
56824: LD_INT 29
56826: ST_TO_ADDR
// un := CreateVehicle ;
56827: LD_ADDR_VAR 0 2
56831: PUSH
56832: CALL_OW 45
56836: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56837: LD_VAR 0 2
56841: PPUSH
56842: LD_INT 1
56844: PPUSH
56845: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56849: LD_INT 35
56851: PPUSH
56852: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56856: LD_VAR 0 2
56860: PPUSH
56861: LD_INT 22
56863: PUSH
56864: LD_OWVAR 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PPUSH
56873: CALL_OW 69
56877: PPUSH
56878: LD_VAR 0 2
56882: PPUSH
56883: CALL_OW 74
56887: PPUSH
56888: CALL_OW 115
// until IsDead ( un ) ;
56892: LD_VAR 0 2
56896: PPUSH
56897: CALL_OW 301
56901: IFFALSE 56849
// end ;
56903: PPOPN 2
56905: END
// every 0 0$1 trigger StreamModeActive and sStu do
56906: LD_EXP 28
56910: PUSH
56911: LD_EXP 67
56915: AND
56916: IFFALSE 56932
56918: GO 56920
56920: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56921: LD_STRING displayStucuk();
56923: PPUSH
56924: CALL_OW 559
// ResetFog ;
56928: CALL_OW 335
// end ;
56932: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56933: LD_EXP 28
56937: PUSH
56938: LD_EXP 60
56942: AND
56943: IFFALSE 57084
56945: GO 56947
56947: DISABLE
56948: LD_INT 0
56950: PPUSH
56951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56952: LD_ADDR_VAR 0 2
56956: PUSH
56957: LD_INT 22
56959: PUSH
56960: LD_OWVAR 2
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 21
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PPUSH
56983: CALL_OW 69
56987: ST_TO_ADDR
// if not tmp then
56988: LD_VAR 0 2
56992: NOT
56993: IFFALSE 56997
// exit ;
56995: GO 57084
// un := tmp [ rand ( 1 , tmp ) ] ;
56997: LD_ADDR_VAR 0 1
57001: PUSH
57002: LD_VAR 0 2
57006: PUSH
57007: LD_INT 1
57009: PPUSH
57010: LD_VAR 0 2
57014: PPUSH
57015: CALL_OW 12
57019: ARRAY
57020: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57021: LD_VAR 0 1
57025: PPUSH
57026: LD_INT 0
57028: PPUSH
57029: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57033: LD_VAR 0 1
57037: PPUSH
57038: LD_OWVAR 3
57042: PUSH
57043: LD_VAR 0 1
57047: DIFF
57048: PPUSH
57049: LD_VAR 0 1
57053: PPUSH
57054: CALL_OW 74
57058: PPUSH
57059: CALL_OW 115
// wait ( 0 0$20 ) ;
57063: LD_INT 700
57065: PPUSH
57066: CALL_OW 67
// SetSide ( un , your_side ) ;
57070: LD_VAR 0 1
57074: PPUSH
57075: LD_OWVAR 2
57079: PPUSH
57080: CALL_OW 235
// end ;
57084: PPOPN 2
57086: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57087: LD_EXP 28
57091: PUSH
57092: LD_EXP 61
57096: AND
57097: IFFALSE 57203
57099: GO 57101
57101: DISABLE
57102: LD_INT 0
57104: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57105: LD_ADDR_VAR 0 1
57109: PUSH
57110: LD_INT 22
57112: PUSH
57113: LD_OWVAR 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 30
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 30
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PPUSH
57154: CALL_OW 69
57158: ST_TO_ADDR
// if not depot then
57159: LD_VAR 0 1
57163: NOT
57164: IFFALSE 57168
// exit ;
57166: GO 57203
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57168: LD_VAR 0 1
57172: PUSH
57173: LD_INT 1
57175: ARRAY
57176: PPUSH
57177: CALL_OW 250
57181: PPUSH
57182: LD_VAR 0 1
57186: PUSH
57187: LD_INT 1
57189: ARRAY
57190: PPUSH
57191: CALL_OW 251
57195: PPUSH
57196: LD_INT 70
57198: PPUSH
57199: CALL_OW 495
// end ;
57203: PPOPN 1
57205: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57206: LD_EXP 28
57210: PUSH
57211: LD_EXP 62
57215: AND
57216: IFFALSE 57427
57218: GO 57220
57220: DISABLE
57221: LD_INT 0
57223: PPUSH
57224: PPUSH
57225: PPUSH
57226: PPUSH
57227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57228: LD_ADDR_VAR 0 5
57232: PUSH
57233: LD_INT 22
57235: PUSH
57236: LD_OWVAR 2
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 21
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PPUSH
57259: CALL_OW 69
57263: ST_TO_ADDR
// if not tmp then
57264: LD_VAR 0 5
57268: NOT
57269: IFFALSE 57273
// exit ;
57271: GO 57427
// for i in tmp do
57273: LD_ADDR_VAR 0 1
57277: PUSH
57278: LD_VAR 0 5
57282: PUSH
57283: FOR_IN
57284: IFFALSE 57425
// begin d := rand ( 0 , 5 ) ;
57286: LD_ADDR_VAR 0 4
57290: PUSH
57291: LD_INT 0
57293: PPUSH
57294: LD_INT 5
57296: PPUSH
57297: CALL_OW 12
57301: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57302: LD_ADDR_VAR 0 2
57306: PUSH
57307: LD_VAR 0 1
57311: PPUSH
57312: CALL_OW 250
57316: PPUSH
57317: LD_VAR 0 4
57321: PPUSH
57322: LD_INT 3
57324: PPUSH
57325: LD_INT 12
57327: PPUSH
57328: CALL_OW 12
57332: PPUSH
57333: CALL_OW 272
57337: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57338: LD_ADDR_VAR 0 3
57342: PUSH
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL_OW 251
57352: PPUSH
57353: LD_VAR 0 4
57357: PPUSH
57358: LD_INT 3
57360: PPUSH
57361: LD_INT 12
57363: PPUSH
57364: CALL_OW 12
57368: PPUSH
57369: CALL_OW 273
57373: ST_TO_ADDR
// if ValidHex ( x , y ) then
57374: LD_VAR 0 2
57378: PPUSH
57379: LD_VAR 0 3
57383: PPUSH
57384: CALL_OW 488
57388: IFFALSE 57423
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57390: LD_VAR 0 1
57394: PPUSH
57395: LD_VAR 0 2
57399: PPUSH
57400: LD_VAR 0 3
57404: PPUSH
57405: LD_INT 3
57407: PPUSH
57408: LD_INT 6
57410: PPUSH
57411: CALL_OW 12
57415: PPUSH
57416: LD_INT 1
57418: PPUSH
57419: CALL_OW 483
// end ;
57423: GO 57283
57425: POP
57426: POP
// end ;
57427: PPOPN 5
57429: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57430: LD_EXP 28
57434: PUSH
57435: LD_EXP 63
57439: AND
57440: IFFALSE 57534
57442: GO 57444
57444: DISABLE
57445: LD_INT 0
57447: PPUSH
57448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57449: LD_ADDR_VAR 0 2
57453: PUSH
57454: LD_INT 22
57456: PUSH
57457: LD_OWVAR 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 32
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 21
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: PPUSH
57491: CALL_OW 69
57495: ST_TO_ADDR
// if not tmp then
57496: LD_VAR 0 2
57500: NOT
57501: IFFALSE 57505
// exit ;
57503: GO 57534
// for i in tmp do
57505: LD_ADDR_VAR 0 1
57509: PUSH
57510: LD_VAR 0 2
57514: PUSH
57515: FOR_IN
57516: IFFALSE 57532
// SetFuel ( i , 0 ) ;
57518: LD_VAR 0 1
57522: PPUSH
57523: LD_INT 0
57525: PPUSH
57526: CALL_OW 240
57530: GO 57515
57532: POP
57533: POP
// end ;
57534: PPOPN 2
57536: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57537: LD_EXP 28
57541: PUSH
57542: LD_EXP 64
57546: AND
57547: IFFALSE 57613
57549: GO 57551
57551: DISABLE
57552: LD_INT 0
57554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57555: LD_ADDR_VAR 0 1
57559: PUSH
57560: LD_INT 22
57562: PUSH
57563: LD_OWVAR 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 30
57574: PUSH
57575: LD_INT 29
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PPUSH
57586: CALL_OW 69
57590: ST_TO_ADDR
// if not tmp then
57591: LD_VAR 0 1
57595: NOT
57596: IFFALSE 57600
// exit ;
57598: GO 57613
// DestroyUnit ( tmp [ 1 ] ) ;
57600: LD_VAR 0 1
57604: PUSH
57605: LD_INT 1
57607: ARRAY
57608: PPUSH
57609: CALL_OW 65
// end ;
57613: PPOPN 1
57615: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57616: LD_EXP 28
57620: PUSH
57621: LD_EXP 66
57625: AND
57626: IFFALSE 57755
57628: GO 57630
57630: DISABLE
57631: LD_INT 0
57633: PPUSH
// begin uc_side := 0 ;
57634: LD_ADDR_OWVAR 20
57638: PUSH
57639: LD_INT 0
57641: ST_TO_ADDR
// uc_nation := nation_arabian ;
57642: LD_ADDR_OWVAR 21
57646: PUSH
57647: LD_INT 2
57649: ST_TO_ADDR
// hc_gallery :=  ;
57650: LD_ADDR_OWVAR 33
57654: PUSH
57655: LD_STRING 
57657: ST_TO_ADDR
// hc_name :=  ;
57658: LD_ADDR_OWVAR 26
57662: PUSH
57663: LD_STRING 
57665: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57666: LD_INT 1
57668: PPUSH
57669: LD_INT 11
57671: PPUSH
57672: LD_INT 10
57674: PPUSH
57675: CALL_OW 380
// un := CreateHuman ;
57679: LD_ADDR_VAR 0 1
57683: PUSH
57684: CALL_OW 44
57688: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57689: LD_VAR 0 1
57693: PPUSH
57694: LD_INT 1
57696: PPUSH
57697: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57701: LD_INT 35
57703: PPUSH
57704: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57708: LD_VAR 0 1
57712: PPUSH
57713: LD_INT 22
57715: PUSH
57716: LD_OWVAR 2
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PPUSH
57725: CALL_OW 69
57729: PPUSH
57730: LD_VAR 0 1
57734: PPUSH
57735: CALL_OW 74
57739: PPUSH
57740: CALL_OW 115
// until IsDead ( un ) ;
57744: LD_VAR 0 1
57748: PPUSH
57749: CALL_OW 301
57753: IFFALSE 57701
// end ;
57755: PPOPN 1
57757: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57758: LD_EXP 28
57762: PUSH
57763: LD_EXP 68
57767: AND
57768: IFFALSE 57780
57770: GO 57772
57772: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57773: LD_STRING earthquake(getX(game), 0, 32)
57775: PPUSH
57776: CALL_OW 559
57780: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57781: LD_EXP 28
57785: PUSH
57786: LD_EXP 69
57790: AND
57791: IFFALSE 57882
57793: GO 57795
57795: DISABLE
57796: LD_INT 0
57798: PPUSH
// begin enable ;
57799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57800: LD_ADDR_VAR 0 1
57804: PUSH
57805: LD_INT 22
57807: PUSH
57808: LD_OWVAR 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 21
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 33
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: PPUSH
57842: CALL_OW 69
57846: ST_TO_ADDR
// if not tmp then
57847: LD_VAR 0 1
57851: NOT
57852: IFFALSE 57856
// exit ;
57854: GO 57882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57856: LD_VAR 0 1
57860: PUSH
57861: LD_INT 1
57863: PPUSH
57864: LD_VAR 0 1
57868: PPUSH
57869: CALL_OW 12
57873: ARRAY
57874: PPUSH
57875: LD_INT 1
57877: PPUSH
57878: CALL_OW 234
// end ;
57882: PPOPN 1
57884: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57885: LD_EXP 28
57889: PUSH
57890: LD_EXP 70
57894: AND
57895: IFFALSE 58036
57897: GO 57899
57899: DISABLE
57900: LD_INT 0
57902: PPUSH
57903: PPUSH
57904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57905: LD_ADDR_VAR 0 3
57909: PUSH
57910: LD_INT 22
57912: PUSH
57913: LD_OWVAR 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 25
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PPUSH
57936: CALL_OW 69
57940: ST_TO_ADDR
// if not tmp then
57941: LD_VAR 0 3
57945: NOT
57946: IFFALSE 57950
// exit ;
57948: GO 58036
// un := tmp [ rand ( 1 , tmp ) ] ;
57950: LD_ADDR_VAR 0 2
57954: PUSH
57955: LD_VAR 0 3
57959: PUSH
57960: LD_INT 1
57962: PPUSH
57963: LD_VAR 0 3
57967: PPUSH
57968: CALL_OW 12
57972: ARRAY
57973: ST_TO_ADDR
// if Crawls ( un ) then
57974: LD_VAR 0 2
57978: PPUSH
57979: CALL_OW 318
57983: IFFALSE 57994
// ComWalk ( un ) ;
57985: LD_VAR 0 2
57989: PPUSH
57990: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57994: LD_VAR 0 2
57998: PPUSH
57999: LD_INT 9
58001: PPUSH
58002: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58006: LD_INT 28
58008: PPUSH
58009: LD_OWVAR 2
58013: PPUSH
58014: LD_INT 2
58016: PPUSH
58017: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58021: LD_INT 29
58023: PPUSH
58024: LD_OWVAR 2
58028: PPUSH
58029: LD_INT 2
58031: PPUSH
58032: CALL_OW 322
// end ;
58036: PPOPN 3
58038: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58039: LD_EXP 28
58043: PUSH
58044: LD_EXP 71
58048: AND
58049: IFFALSE 58160
58051: GO 58053
58053: DISABLE
58054: LD_INT 0
58056: PPUSH
58057: PPUSH
58058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58059: LD_ADDR_VAR 0 3
58063: PUSH
58064: LD_INT 22
58066: PUSH
58067: LD_OWVAR 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 25
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PPUSH
58090: CALL_OW 69
58094: ST_TO_ADDR
// if not tmp then
58095: LD_VAR 0 3
58099: NOT
58100: IFFALSE 58104
// exit ;
58102: GO 58160
// un := tmp [ rand ( 1 , tmp ) ] ;
58104: LD_ADDR_VAR 0 2
58108: PUSH
58109: LD_VAR 0 3
58113: PUSH
58114: LD_INT 1
58116: PPUSH
58117: LD_VAR 0 3
58121: PPUSH
58122: CALL_OW 12
58126: ARRAY
58127: ST_TO_ADDR
// if Crawls ( un ) then
58128: LD_VAR 0 2
58132: PPUSH
58133: CALL_OW 318
58137: IFFALSE 58148
// ComWalk ( un ) ;
58139: LD_VAR 0 2
58143: PPUSH
58144: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58148: LD_VAR 0 2
58152: PPUSH
58153: LD_INT 8
58155: PPUSH
58156: CALL_OW 336
// end ;
58160: PPOPN 3
58162: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58163: LD_EXP 28
58167: PUSH
58168: LD_EXP 72
58172: AND
58173: IFFALSE 58317
58175: GO 58177
58177: DISABLE
58178: LD_INT 0
58180: PPUSH
58181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58182: LD_ADDR_VAR 0 2
58186: PUSH
58187: LD_INT 22
58189: PUSH
58190: LD_OWVAR 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 21
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 34
58214: PUSH
58215: LD_INT 12
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 34
58224: PUSH
58225: LD_INT 51
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 34
58234: PUSH
58235: LD_INT 32
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: PPUSH
58253: CALL_OW 69
58257: ST_TO_ADDR
// if not tmp then
58258: LD_VAR 0 2
58262: NOT
58263: IFFALSE 58267
// exit ;
58265: GO 58317
// for i in tmp do
58267: LD_ADDR_VAR 0 1
58271: PUSH
58272: LD_VAR 0 2
58276: PUSH
58277: FOR_IN
58278: IFFALSE 58315
// if GetCargo ( i , mat_artifact ) = 0 then
58280: LD_VAR 0 1
58284: PPUSH
58285: LD_INT 4
58287: PPUSH
58288: CALL_OW 289
58292: PUSH
58293: LD_INT 0
58295: EQUAL
58296: IFFALSE 58313
// SetCargo ( i , mat_siberit , 100 ) ;
58298: LD_VAR 0 1
58302: PPUSH
58303: LD_INT 3
58305: PPUSH
58306: LD_INT 100
58308: PPUSH
58309: CALL_OW 290
58313: GO 58277
58315: POP
58316: POP
// end ;
58317: PPOPN 2
58319: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58320: LD_EXP 28
58324: PUSH
58325: LD_EXP 73
58329: AND
58330: IFFALSE 58513
58332: GO 58334
58334: DISABLE
58335: LD_INT 0
58337: PPUSH
58338: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58339: LD_ADDR_VAR 0 2
58343: PUSH
58344: LD_INT 22
58346: PUSH
58347: LD_OWVAR 2
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PPUSH
58356: CALL_OW 69
58360: ST_TO_ADDR
// if not tmp then
58361: LD_VAR 0 2
58365: NOT
58366: IFFALSE 58370
// exit ;
58368: GO 58513
// for i := 1 to 2 do
58370: LD_ADDR_VAR 0 1
58374: PUSH
58375: DOUBLE
58376: LD_INT 1
58378: DEC
58379: ST_TO_ADDR
58380: LD_INT 2
58382: PUSH
58383: FOR_TO
58384: IFFALSE 58511
// begin uc_side := your_side ;
58386: LD_ADDR_OWVAR 20
58390: PUSH
58391: LD_OWVAR 2
58395: ST_TO_ADDR
// uc_nation := nation_american ;
58396: LD_ADDR_OWVAR 21
58400: PUSH
58401: LD_INT 1
58403: ST_TO_ADDR
// vc_chassis := us_morphling ;
58404: LD_ADDR_OWVAR 37
58408: PUSH
58409: LD_INT 5
58411: ST_TO_ADDR
// vc_engine := engine_siberite ;
58412: LD_ADDR_OWVAR 39
58416: PUSH
58417: LD_INT 3
58419: ST_TO_ADDR
// vc_control := control_computer ;
58420: LD_ADDR_OWVAR 38
58424: PUSH
58425: LD_INT 3
58427: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58428: LD_ADDR_OWVAR 40
58432: PUSH
58433: LD_INT 10
58435: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58436: LD_VAR 0 2
58440: PUSH
58441: LD_INT 1
58443: ARRAY
58444: PPUSH
58445: CALL_OW 310
58449: NOT
58450: IFFALSE 58497
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58452: CALL_OW 45
58456: PPUSH
58457: LD_VAR 0 2
58461: PUSH
58462: LD_INT 1
58464: ARRAY
58465: PPUSH
58466: CALL_OW 250
58470: PPUSH
58471: LD_VAR 0 2
58475: PUSH
58476: LD_INT 1
58478: ARRAY
58479: PPUSH
58480: CALL_OW 251
58484: PPUSH
58485: LD_INT 12
58487: PPUSH
58488: LD_INT 1
58490: PPUSH
58491: CALL_OW 50
58495: GO 58509
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58497: CALL_OW 45
58501: PPUSH
58502: LD_INT 1
58504: PPUSH
58505: CALL_OW 51
// end ;
58509: GO 58383
58511: POP
58512: POP
// end ;
58513: PPOPN 2
58515: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58516: LD_EXP 28
58520: PUSH
58521: LD_EXP 74
58525: AND
58526: IFFALSE 58748
58528: GO 58530
58530: DISABLE
58531: LD_INT 0
58533: PPUSH
58534: PPUSH
58535: PPUSH
58536: PPUSH
58537: PPUSH
58538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58539: LD_ADDR_VAR 0 6
58543: PUSH
58544: LD_INT 22
58546: PUSH
58547: LD_OWVAR 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 21
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: LD_INT 23
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: PPUSH
58588: CALL_OW 69
58592: ST_TO_ADDR
// if not tmp then
58593: LD_VAR 0 6
58597: NOT
58598: IFFALSE 58602
// exit ;
58600: GO 58748
// s1 := rand ( 1 , 4 ) ;
58602: LD_ADDR_VAR 0 2
58606: PUSH
58607: LD_INT 1
58609: PPUSH
58610: LD_INT 4
58612: PPUSH
58613: CALL_OW 12
58617: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58618: LD_ADDR_VAR 0 4
58622: PUSH
58623: LD_VAR 0 6
58627: PUSH
58628: LD_INT 1
58630: ARRAY
58631: PPUSH
58632: LD_VAR 0 2
58636: PPUSH
58637: CALL_OW 259
58641: ST_TO_ADDR
// if s1 = 1 then
58642: LD_VAR 0 2
58646: PUSH
58647: LD_INT 1
58649: EQUAL
58650: IFFALSE 58670
// s2 := rand ( 2 , 4 ) else
58652: LD_ADDR_VAR 0 3
58656: PUSH
58657: LD_INT 2
58659: PPUSH
58660: LD_INT 4
58662: PPUSH
58663: CALL_OW 12
58667: ST_TO_ADDR
58668: GO 58678
// s2 := 1 ;
58670: LD_ADDR_VAR 0 3
58674: PUSH
58675: LD_INT 1
58677: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58678: LD_ADDR_VAR 0 5
58682: PUSH
58683: LD_VAR 0 6
58687: PUSH
58688: LD_INT 1
58690: ARRAY
58691: PPUSH
58692: LD_VAR 0 3
58696: PPUSH
58697: CALL_OW 259
58701: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58702: LD_VAR 0 6
58706: PUSH
58707: LD_INT 1
58709: ARRAY
58710: PPUSH
58711: LD_VAR 0 2
58715: PPUSH
58716: LD_VAR 0 5
58720: PPUSH
58721: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58725: LD_VAR 0 6
58729: PUSH
58730: LD_INT 1
58732: ARRAY
58733: PPUSH
58734: LD_VAR 0 3
58738: PPUSH
58739: LD_VAR 0 4
58743: PPUSH
58744: CALL_OW 237
// end ;
58748: PPOPN 6
58750: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58751: LD_EXP 28
58755: PUSH
58756: LD_EXP 75
58760: AND
58761: IFFALSE 58840
58763: GO 58765
58765: DISABLE
58766: LD_INT 0
58768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58769: LD_ADDR_VAR 0 1
58773: PUSH
58774: LD_INT 22
58776: PUSH
58777: LD_OWVAR 2
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 30
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PPUSH
58800: CALL_OW 69
58804: ST_TO_ADDR
// if not tmp then
58805: LD_VAR 0 1
58809: NOT
58810: IFFALSE 58814
// exit ;
58812: GO 58840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58814: LD_VAR 0 1
58818: PUSH
58819: LD_INT 1
58821: PPUSH
58822: LD_VAR 0 1
58826: PPUSH
58827: CALL_OW 12
58831: ARRAY
58832: PPUSH
58833: LD_INT 1
58835: PPUSH
58836: CALL_OW 234
// end ;
58840: PPOPN 1
58842: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58843: LD_EXP 28
58847: PUSH
58848: LD_EXP 76
58852: AND
58853: IFFALSE 58965
58855: GO 58857
58857: DISABLE
58858: LD_INT 0
58860: PPUSH
58861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58862: LD_ADDR_VAR 0 2
58866: PUSH
58867: LD_INT 22
58869: PUSH
58870: LD_OWVAR 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 30
58884: PUSH
58885: LD_INT 27
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 30
58894: PUSH
58895: LD_INT 26
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 30
58904: PUSH
58905: LD_INT 28
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PPUSH
58922: CALL_OW 69
58926: ST_TO_ADDR
// if not tmp then
58927: LD_VAR 0 2
58931: NOT
58932: IFFALSE 58936
// exit ;
58934: GO 58965
// for i in tmp do
58936: LD_ADDR_VAR 0 1
58940: PUSH
58941: LD_VAR 0 2
58945: PUSH
58946: FOR_IN
58947: IFFALSE 58963
// SetLives ( i , 1 ) ;
58949: LD_VAR 0 1
58953: PPUSH
58954: LD_INT 1
58956: PPUSH
58957: CALL_OW 234
58961: GO 58946
58963: POP
58964: POP
// end ;
58965: PPOPN 2
58967: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58968: LD_EXP 28
58972: PUSH
58973: LD_EXP 77
58977: AND
58978: IFFALSE 59265
58980: GO 58982
58982: DISABLE
58983: LD_INT 0
58985: PPUSH
58986: PPUSH
58987: PPUSH
// begin i := rand ( 1 , 7 ) ;
58988: LD_ADDR_VAR 0 1
58992: PUSH
58993: LD_INT 1
58995: PPUSH
58996: LD_INT 7
58998: PPUSH
58999: CALL_OW 12
59003: ST_TO_ADDR
// case i of 1 :
59004: LD_VAR 0 1
59008: PUSH
59009: LD_INT 1
59011: DOUBLE
59012: EQUAL
59013: IFTRUE 59017
59015: GO 59027
59017: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59018: LD_STRING earthquake(getX(game), 0, 32)
59020: PPUSH
59021: CALL_OW 559
59025: GO 59265
59027: LD_INT 2
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59035
59033: GO 59049
59035: POP
// begin ToLua ( displayStucuk(); ) ;
59036: LD_STRING displayStucuk();
59038: PPUSH
59039: CALL_OW 559
// ResetFog ;
59043: CALL_OW 335
// end ; 3 :
59047: GO 59265
59049: LD_INT 3
59051: DOUBLE
59052: EQUAL
59053: IFTRUE 59057
59055: GO 59161
59057: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59058: LD_ADDR_VAR 0 2
59062: PUSH
59063: LD_INT 22
59065: PUSH
59066: LD_OWVAR 2
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 25
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PPUSH
59089: CALL_OW 69
59093: ST_TO_ADDR
// if not tmp then
59094: LD_VAR 0 2
59098: NOT
59099: IFFALSE 59103
// exit ;
59101: GO 59265
// un := tmp [ rand ( 1 , tmp ) ] ;
59103: LD_ADDR_VAR 0 3
59107: PUSH
59108: LD_VAR 0 2
59112: PUSH
59113: LD_INT 1
59115: PPUSH
59116: LD_VAR 0 2
59120: PPUSH
59121: CALL_OW 12
59125: ARRAY
59126: ST_TO_ADDR
// if Crawls ( un ) then
59127: LD_VAR 0 3
59131: PPUSH
59132: CALL_OW 318
59136: IFFALSE 59147
// ComWalk ( un ) ;
59138: LD_VAR 0 3
59142: PPUSH
59143: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59147: LD_VAR 0 3
59151: PPUSH
59152: LD_INT 8
59154: PPUSH
59155: CALL_OW 336
// end ; 4 :
59159: GO 59265
59161: LD_INT 4
59163: DOUBLE
59164: EQUAL
59165: IFTRUE 59169
59167: GO 59243
59169: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59170: LD_ADDR_VAR 0 2
59174: PUSH
59175: LD_INT 22
59177: PUSH
59178: LD_OWVAR 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 30
59189: PUSH
59190: LD_INT 29
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PPUSH
59201: CALL_OW 69
59205: ST_TO_ADDR
// if not tmp then
59206: LD_VAR 0 2
59210: NOT
59211: IFFALSE 59215
// exit ;
59213: GO 59265
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59215: LD_VAR 0 2
59219: PUSH
59220: LD_INT 1
59222: ARRAY
59223: PPUSH
59224: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59228: LD_VAR 0 2
59232: PUSH
59233: LD_INT 1
59235: ARRAY
59236: PPUSH
59237: CALL_OW 65
// end ; 5 .. 7 :
59241: GO 59265
59243: LD_INT 5
59245: DOUBLE
59246: GREATEREQUAL
59247: IFFALSE 59255
59249: LD_INT 7
59251: DOUBLE
59252: LESSEQUAL
59253: IFTRUE 59257
59255: GO 59264
59257: POP
// StreamSibBomb ; end ;
59258: CALL 55502 0 0
59262: GO 59265
59264: POP
// end ;
59265: PPOPN 3
59267: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59268: LD_EXP 28
59272: PUSH
59273: LD_EXP 78
59277: AND
59278: IFFALSE 59434
59280: GO 59282
59282: DISABLE
59283: LD_INT 0
59285: PPUSH
59286: PPUSH
59287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59288: LD_ADDR_VAR 0 2
59292: PUSH
59293: LD_INT 81
59295: PUSH
59296: LD_OWVAR 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 21
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 21
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PPUSH
59337: CALL_OW 69
59341: ST_TO_ADDR
// if not tmp then
59342: LD_VAR 0 2
59346: NOT
59347: IFFALSE 59351
// exit ;
59349: GO 59434
// p := 0 ;
59351: LD_ADDR_VAR 0 3
59355: PUSH
59356: LD_INT 0
59358: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59359: LD_INT 35
59361: PPUSH
59362: CALL_OW 67
// p := p + 1 ;
59366: LD_ADDR_VAR 0 3
59370: PUSH
59371: LD_VAR 0 3
59375: PUSH
59376: LD_INT 1
59378: PLUS
59379: ST_TO_ADDR
// for i in tmp do
59380: LD_ADDR_VAR 0 1
59384: PUSH
59385: LD_VAR 0 2
59389: PUSH
59390: FOR_IN
59391: IFFALSE 59422
// if GetLives ( i ) < 1000 then
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 256
59402: PUSH
59403: LD_INT 1000
59405: LESS
59406: IFFALSE 59420
// SetLives ( i , 1000 ) ;
59408: LD_VAR 0 1
59412: PPUSH
59413: LD_INT 1000
59415: PPUSH
59416: CALL_OW 234
59420: GO 59390
59422: POP
59423: POP
// until p > 20 ;
59424: LD_VAR 0 3
59428: PUSH
59429: LD_INT 20
59431: GREATER
59432: IFFALSE 59359
// end ;
59434: PPOPN 3
59436: END
// every 0 0$1 trigger StreamModeActive and sTime do
59437: LD_EXP 28
59441: PUSH
59442: LD_EXP 79
59446: AND
59447: IFFALSE 59482
59449: GO 59451
59451: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59452: LD_INT 28
59454: PPUSH
59455: LD_OWVAR 2
59459: PPUSH
59460: LD_INT 2
59462: PPUSH
59463: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59467: LD_INT 30
59469: PPUSH
59470: LD_OWVAR 2
59474: PPUSH
59475: LD_INT 2
59477: PPUSH
59478: CALL_OW 322
// end ;
59482: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59483: LD_EXP 28
59487: PUSH
59488: LD_EXP 80
59492: AND
59493: IFFALSE 59614
59495: GO 59497
59497: DISABLE
59498: LD_INT 0
59500: PPUSH
59501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59502: LD_ADDR_VAR 0 2
59506: PUSH
59507: LD_INT 22
59509: PUSH
59510: LD_OWVAR 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 21
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 3
59531: PUSH
59532: LD_INT 23
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: PPUSH
59551: CALL_OW 69
59555: ST_TO_ADDR
// if not tmp then
59556: LD_VAR 0 2
59560: NOT
59561: IFFALSE 59565
// exit ;
59563: GO 59614
// for i in tmp do
59565: LD_ADDR_VAR 0 1
59569: PUSH
59570: LD_VAR 0 2
59574: PUSH
59575: FOR_IN
59576: IFFALSE 59612
// begin if Crawls ( i ) then
59578: LD_VAR 0 1
59582: PPUSH
59583: CALL_OW 318
59587: IFFALSE 59598
// ComWalk ( i ) ;
59589: LD_VAR 0 1
59593: PPUSH
59594: CALL_OW 138
// SetClass ( i , 2 ) ;
59598: LD_VAR 0 1
59602: PPUSH
59603: LD_INT 2
59605: PPUSH
59606: CALL_OW 336
// end ;
59610: GO 59575
59612: POP
59613: POP
// end ;
59614: PPOPN 2
59616: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59617: LD_EXP 28
59621: PUSH
59622: LD_EXP 81
59626: AND
59627: IFFALSE 59915
59629: GO 59631
59631: DISABLE
59632: LD_INT 0
59634: PPUSH
59635: PPUSH
59636: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59637: LD_OWVAR 2
59641: PPUSH
59642: LD_INT 9
59644: PPUSH
59645: LD_INT 1
59647: PPUSH
59648: LD_INT 1
59650: PPUSH
59651: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59655: LD_INT 9
59657: PPUSH
59658: LD_OWVAR 2
59662: PPUSH
59663: CALL_OW 343
// uc_side := 9 ;
59667: LD_ADDR_OWVAR 20
59671: PUSH
59672: LD_INT 9
59674: ST_TO_ADDR
// uc_nation := 2 ;
59675: LD_ADDR_OWVAR 21
59679: PUSH
59680: LD_INT 2
59682: ST_TO_ADDR
// hc_name := Dark Warrior ;
59683: LD_ADDR_OWVAR 26
59687: PUSH
59688: LD_STRING Dark Warrior
59690: ST_TO_ADDR
// hc_gallery :=  ;
59691: LD_ADDR_OWVAR 33
59695: PUSH
59696: LD_STRING 
59698: ST_TO_ADDR
// hc_noskilllimit := true ;
59699: LD_ADDR_OWVAR 76
59703: PUSH
59704: LD_INT 1
59706: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59707: LD_ADDR_OWVAR 31
59711: PUSH
59712: LD_INT 30
59714: PUSH
59715: LD_INT 30
59717: PUSH
59718: LD_INT 30
59720: PUSH
59721: LD_INT 30
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: ST_TO_ADDR
// un := CreateHuman ;
59730: LD_ADDR_VAR 0 3
59734: PUSH
59735: CALL_OW 44
59739: ST_TO_ADDR
// hc_noskilllimit := false ;
59740: LD_ADDR_OWVAR 76
59744: PUSH
59745: LD_INT 0
59747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59748: LD_VAR 0 3
59752: PPUSH
59753: LD_INT 1
59755: PPUSH
59756: CALL_OW 51
// ToLua ( playRanger() ) ;
59760: LD_STRING playRanger()
59762: PPUSH
59763: CALL_OW 559
// p := 0 ;
59767: LD_ADDR_VAR 0 2
59771: PUSH
59772: LD_INT 0
59774: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59775: LD_INT 35
59777: PPUSH
59778: CALL_OW 67
// p := p + 1 ;
59782: LD_ADDR_VAR 0 2
59786: PUSH
59787: LD_VAR 0 2
59791: PUSH
59792: LD_INT 1
59794: PLUS
59795: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59796: LD_VAR 0 3
59800: PPUSH
59801: CALL_OW 256
59805: PUSH
59806: LD_INT 1000
59808: LESS
59809: IFFALSE 59823
// SetLives ( un , 1000 ) ;
59811: LD_VAR 0 3
59815: PPUSH
59816: LD_INT 1000
59818: PPUSH
59819: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59823: LD_VAR 0 3
59827: PPUSH
59828: LD_INT 81
59830: PUSH
59831: LD_OWVAR 2
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 91
59842: PUSH
59843: LD_VAR 0 3
59847: PUSH
59848: LD_INT 30
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: LIST
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PPUSH
59860: CALL_OW 69
59864: PPUSH
59865: LD_VAR 0 3
59869: PPUSH
59870: CALL_OW 74
59874: PPUSH
59875: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59879: LD_VAR 0 2
59883: PUSH
59884: LD_INT 80
59886: GREATER
59887: PUSH
59888: LD_VAR 0 3
59892: PPUSH
59893: CALL_OW 301
59897: OR
59898: IFFALSE 59775
// if un then
59900: LD_VAR 0 3
59904: IFFALSE 59915
// RemoveUnit ( un ) ;
59906: LD_VAR 0 3
59910: PPUSH
59911: CALL_OW 64
// end ;
59915: PPOPN 3
59917: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59918: LD_EXP 82
59922: IFFALSE 60038
59924: GO 59926
59926: DISABLE
59927: LD_INT 0
59929: PPUSH
59930: PPUSH
59931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59932: LD_ADDR_VAR 0 2
59936: PUSH
59937: LD_INT 81
59939: PUSH
59940: LD_OWVAR 2
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 21
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PPUSH
59963: CALL_OW 69
59967: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59968: LD_STRING playComputer()
59970: PPUSH
59971: CALL_OW 559
// if not tmp then
59975: LD_VAR 0 2
59979: NOT
59980: IFFALSE 59984
// exit ;
59982: GO 60038
// for i in tmp do
59984: LD_ADDR_VAR 0 1
59988: PUSH
59989: LD_VAR 0 2
59993: PUSH
59994: FOR_IN
59995: IFFALSE 60036
// for j := 1 to 4 do
59997: LD_ADDR_VAR 0 3
60001: PUSH
60002: DOUBLE
60003: LD_INT 1
60005: DEC
60006: ST_TO_ADDR
60007: LD_INT 4
60009: PUSH
60010: FOR_TO
60011: IFFALSE 60032
// SetSkill ( i , j , 10 ) ;
60013: LD_VAR 0 1
60017: PPUSH
60018: LD_VAR 0 3
60022: PPUSH
60023: LD_INT 10
60025: PPUSH
60026: CALL_OW 237
60030: GO 60010
60032: POP
60033: POP
60034: GO 59994
60036: POP
60037: POP
// end ;
60038: PPOPN 3
60040: END
// every 0 0$1 trigger s30 do var i , tmp ;
60041: LD_EXP 83
60045: IFFALSE 60114
60047: GO 60049
60049: DISABLE
60050: LD_INT 0
60052: PPUSH
60053: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60054: LD_ADDR_VAR 0 2
60058: PUSH
60059: LD_INT 22
60061: PUSH
60062: LD_OWVAR 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PPUSH
60071: CALL_OW 69
60075: ST_TO_ADDR
// if not tmp then
60076: LD_VAR 0 2
60080: NOT
60081: IFFALSE 60085
// exit ;
60083: GO 60114
// for i in tmp do
60085: LD_ADDR_VAR 0 1
60089: PUSH
60090: LD_VAR 0 2
60094: PUSH
60095: FOR_IN
60096: IFFALSE 60112
// SetLives ( i , 300 ) ;
60098: LD_VAR 0 1
60102: PPUSH
60103: LD_INT 300
60105: PPUSH
60106: CALL_OW 234
60110: GO 60095
60112: POP
60113: POP
// end ;
60114: PPOPN 2
60116: END
// every 0 0$1 trigger s60 do var i , tmp ;
60117: LD_EXP 84
60121: IFFALSE 60190
60123: GO 60125
60125: DISABLE
60126: LD_INT 0
60128: PPUSH
60129: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60130: LD_ADDR_VAR 0 2
60134: PUSH
60135: LD_INT 22
60137: PUSH
60138: LD_OWVAR 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PPUSH
60147: CALL_OW 69
60151: ST_TO_ADDR
// if not tmp then
60152: LD_VAR 0 2
60156: NOT
60157: IFFALSE 60161
// exit ;
60159: GO 60190
// for i in tmp do
60161: LD_ADDR_VAR 0 1
60165: PUSH
60166: LD_VAR 0 2
60170: PUSH
60171: FOR_IN
60172: IFFALSE 60188
// SetLives ( i , 600 ) ;
60174: LD_VAR 0 1
60178: PPUSH
60179: LD_INT 600
60181: PPUSH
60182: CALL_OW 234
60186: GO 60171
60188: POP
60189: POP
// end ;
60190: PPOPN 2
60192: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60193: LD_INT 0
60195: PPUSH
// case cmd of 301 :
60196: LD_VAR 0 1
60200: PUSH
60201: LD_INT 301
60203: DOUBLE
60204: EQUAL
60205: IFTRUE 60209
60207: GO 60241
60209: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60210: LD_VAR 0 6
60214: PPUSH
60215: LD_VAR 0 7
60219: PPUSH
60220: LD_VAR 0 8
60224: PPUSH
60225: LD_VAR 0 4
60229: PPUSH
60230: LD_VAR 0 5
60234: PPUSH
60235: CALL 61450 0 5
60239: GO 60362
60241: LD_INT 302
60243: DOUBLE
60244: EQUAL
60245: IFTRUE 60249
60247: GO 60286
60249: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60250: LD_VAR 0 6
60254: PPUSH
60255: LD_VAR 0 7
60259: PPUSH
60260: LD_VAR 0 8
60264: PPUSH
60265: LD_VAR 0 9
60269: PPUSH
60270: LD_VAR 0 4
60274: PPUSH
60275: LD_VAR 0 5
60279: PPUSH
60280: CALL 61541 0 6
60284: GO 60362
60286: LD_INT 303
60288: DOUBLE
60289: EQUAL
60290: IFTRUE 60294
60292: GO 60331
60294: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60295: LD_VAR 0 6
60299: PPUSH
60300: LD_VAR 0 7
60304: PPUSH
60305: LD_VAR 0 8
60309: PPUSH
60310: LD_VAR 0 9
60314: PPUSH
60315: LD_VAR 0 4
60319: PPUSH
60320: LD_VAR 0 5
60324: PPUSH
60325: CALL 60367 0 6
60329: GO 60362
60331: LD_INT 304
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60339
60337: GO 60361
60339: POP
// hHackTeleport ( unit , x , y ) ; end ;
60340: LD_VAR 0 2
60344: PPUSH
60345: LD_VAR 0 4
60349: PPUSH
60350: LD_VAR 0 5
60354: PPUSH
60355: CALL 62134 0 3
60359: GO 60362
60361: POP
// end ;
60362: LD_VAR 0 12
60366: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60367: LD_INT 0
60369: PPUSH
60370: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60371: LD_VAR 0 1
60375: PUSH
60376: LD_INT 1
60378: LESS
60379: PUSH
60380: LD_VAR 0 1
60384: PUSH
60385: LD_INT 3
60387: GREATER
60388: OR
60389: PUSH
60390: LD_VAR 0 5
60394: PPUSH
60395: LD_VAR 0 6
60399: PPUSH
60400: CALL_OW 428
60404: OR
60405: IFFALSE 60409
// exit ;
60407: GO 61137
// uc_side := your_side ;
60409: LD_ADDR_OWVAR 20
60413: PUSH
60414: LD_OWVAR 2
60418: ST_TO_ADDR
// uc_nation := nation ;
60419: LD_ADDR_OWVAR 21
60423: PUSH
60424: LD_VAR 0 1
60428: ST_TO_ADDR
// bc_level = 1 ;
60429: LD_ADDR_OWVAR 43
60433: PUSH
60434: LD_INT 1
60436: ST_TO_ADDR
// case btype of 1 :
60437: LD_VAR 0 2
60441: PUSH
60442: LD_INT 1
60444: DOUBLE
60445: EQUAL
60446: IFTRUE 60450
60448: GO 60461
60450: POP
// bc_type := b_depot ; 2 :
60451: LD_ADDR_OWVAR 42
60455: PUSH
60456: LD_INT 0
60458: ST_TO_ADDR
60459: GO 61081
60461: LD_INT 2
60463: DOUBLE
60464: EQUAL
60465: IFTRUE 60469
60467: GO 60480
60469: POP
// bc_type := b_warehouse ; 3 :
60470: LD_ADDR_OWVAR 42
60474: PUSH
60475: LD_INT 1
60477: ST_TO_ADDR
60478: GO 61081
60480: LD_INT 3
60482: DOUBLE
60483: EQUAL
60484: IFTRUE 60488
60486: GO 60499
60488: POP
// bc_type := b_lab ; 4 .. 9 :
60489: LD_ADDR_OWVAR 42
60493: PUSH
60494: LD_INT 6
60496: ST_TO_ADDR
60497: GO 61081
60499: LD_INT 4
60501: DOUBLE
60502: GREATEREQUAL
60503: IFFALSE 60511
60505: LD_INT 9
60507: DOUBLE
60508: LESSEQUAL
60509: IFTRUE 60513
60511: GO 60573
60513: POP
// begin bc_type := b_lab_half ;
60514: LD_ADDR_OWVAR 42
60518: PUSH
60519: LD_INT 7
60521: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60522: LD_ADDR_OWVAR 44
60526: PUSH
60527: LD_INT 10
60529: PUSH
60530: LD_INT 11
60532: PUSH
60533: LD_INT 12
60535: PUSH
60536: LD_INT 15
60538: PUSH
60539: LD_INT 14
60541: PUSH
60542: LD_INT 13
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: PUSH
60553: LD_VAR 0 2
60557: PUSH
60558: LD_INT 3
60560: MINUS
60561: ARRAY
60562: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60563: LD_ADDR_OWVAR 45
60567: PUSH
60568: LD_INT 9
60570: ST_TO_ADDR
// end ; 10 .. 13 :
60571: GO 61081
60573: LD_INT 10
60575: DOUBLE
60576: GREATEREQUAL
60577: IFFALSE 60585
60579: LD_INT 13
60581: DOUBLE
60582: LESSEQUAL
60583: IFTRUE 60587
60585: GO 60664
60587: POP
// begin bc_type := b_lab_full ;
60588: LD_ADDR_OWVAR 42
60592: PUSH
60593: LD_INT 8
60595: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60596: LD_ADDR_OWVAR 44
60600: PUSH
60601: LD_INT 10
60603: PUSH
60604: LD_INT 12
60606: PUSH
60607: LD_INT 14
60609: PUSH
60610: LD_INT 13
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: PUSH
60619: LD_VAR 0 2
60623: PUSH
60624: LD_INT 9
60626: MINUS
60627: ARRAY
60628: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60629: LD_ADDR_OWVAR 45
60633: PUSH
60634: LD_INT 11
60636: PUSH
60637: LD_INT 15
60639: PUSH
60640: LD_INT 12
60642: PUSH
60643: LD_INT 15
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: PUSH
60652: LD_VAR 0 2
60656: PUSH
60657: LD_INT 9
60659: MINUS
60660: ARRAY
60661: ST_TO_ADDR
// end ; 14 :
60662: GO 61081
60664: LD_INT 14
60666: DOUBLE
60667: EQUAL
60668: IFTRUE 60672
60670: GO 60683
60672: POP
// bc_type := b_workshop ; 15 :
60673: LD_ADDR_OWVAR 42
60677: PUSH
60678: LD_INT 2
60680: ST_TO_ADDR
60681: GO 61081
60683: LD_INT 15
60685: DOUBLE
60686: EQUAL
60687: IFTRUE 60691
60689: GO 60702
60691: POP
// bc_type := b_factory ; 16 :
60692: LD_ADDR_OWVAR 42
60696: PUSH
60697: LD_INT 3
60699: ST_TO_ADDR
60700: GO 61081
60702: LD_INT 16
60704: DOUBLE
60705: EQUAL
60706: IFTRUE 60710
60708: GO 60721
60710: POP
// bc_type := b_ext_gun ; 17 :
60711: LD_ADDR_OWVAR 42
60715: PUSH
60716: LD_INT 17
60718: ST_TO_ADDR
60719: GO 61081
60721: LD_INT 17
60723: DOUBLE
60724: EQUAL
60725: IFTRUE 60729
60727: GO 60757
60729: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60730: LD_ADDR_OWVAR 42
60734: PUSH
60735: LD_INT 19
60737: PUSH
60738: LD_INT 23
60740: PUSH
60741: LD_INT 19
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: LIST
60748: PUSH
60749: LD_VAR 0 1
60753: ARRAY
60754: ST_TO_ADDR
60755: GO 61081
60757: LD_INT 18
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60765
60763: GO 60776
60765: POP
// bc_type := b_ext_radar ; 19 :
60766: LD_ADDR_OWVAR 42
60770: PUSH
60771: LD_INT 20
60773: ST_TO_ADDR
60774: GO 61081
60776: LD_INT 19
60778: DOUBLE
60779: EQUAL
60780: IFTRUE 60784
60782: GO 60795
60784: POP
// bc_type := b_ext_radio ; 20 :
60785: LD_ADDR_OWVAR 42
60789: PUSH
60790: LD_INT 22
60792: ST_TO_ADDR
60793: GO 61081
60795: LD_INT 20
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60803
60801: GO 60814
60803: POP
// bc_type := b_ext_siberium ; 21 :
60804: LD_ADDR_OWVAR 42
60808: PUSH
60809: LD_INT 21
60811: ST_TO_ADDR
60812: GO 61081
60814: LD_INT 21
60816: DOUBLE
60817: EQUAL
60818: IFTRUE 60822
60820: GO 60833
60822: POP
// bc_type := b_ext_computer ; 22 :
60823: LD_ADDR_OWVAR 42
60827: PUSH
60828: LD_INT 24
60830: ST_TO_ADDR
60831: GO 61081
60833: LD_INT 22
60835: DOUBLE
60836: EQUAL
60837: IFTRUE 60841
60839: GO 60852
60841: POP
// bc_type := b_ext_track ; 23 :
60842: LD_ADDR_OWVAR 42
60846: PUSH
60847: LD_INT 16
60849: ST_TO_ADDR
60850: GO 61081
60852: LD_INT 23
60854: DOUBLE
60855: EQUAL
60856: IFTRUE 60860
60858: GO 60871
60860: POP
// bc_type := b_ext_laser ; 24 :
60861: LD_ADDR_OWVAR 42
60865: PUSH
60866: LD_INT 25
60868: ST_TO_ADDR
60869: GO 61081
60871: LD_INT 24
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60879
60877: GO 60890
60879: POP
// bc_type := b_control_tower ; 25 :
60880: LD_ADDR_OWVAR 42
60884: PUSH
60885: LD_INT 36
60887: ST_TO_ADDR
60888: GO 61081
60890: LD_INT 25
60892: DOUBLE
60893: EQUAL
60894: IFTRUE 60898
60896: GO 60909
60898: POP
// bc_type := b_breastwork ; 26 :
60899: LD_ADDR_OWVAR 42
60903: PUSH
60904: LD_INT 31
60906: ST_TO_ADDR
60907: GO 61081
60909: LD_INT 26
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60917
60915: GO 60928
60917: POP
// bc_type := b_bunker ; 27 :
60918: LD_ADDR_OWVAR 42
60922: PUSH
60923: LD_INT 32
60925: ST_TO_ADDR
60926: GO 61081
60928: LD_INT 27
60930: DOUBLE
60931: EQUAL
60932: IFTRUE 60936
60934: GO 60947
60936: POP
// bc_type := b_turret ; 28 :
60937: LD_ADDR_OWVAR 42
60941: PUSH
60942: LD_INT 33
60944: ST_TO_ADDR
60945: GO 61081
60947: LD_INT 28
60949: DOUBLE
60950: EQUAL
60951: IFTRUE 60955
60953: GO 60966
60955: POP
// bc_type := b_armoury ; 29 :
60956: LD_ADDR_OWVAR 42
60960: PUSH
60961: LD_INT 4
60963: ST_TO_ADDR
60964: GO 61081
60966: LD_INT 29
60968: DOUBLE
60969: EQUAL
60970: IFTRUE 60974
60972: GO 60985
60974: POP
// bc_type := b_barracks ; 30 :
60975: LD_ADDR_OWVAR 42
60979: PUSH
60980: LD_INT 5
60982: ST_TO_ADDR
60983: GO 61081
60985: LD_INT 30
60987: DOUBLE
60988: EQUAL
60989: IFTRUE 60993
60991: GO 61004
60993: POP
// bc_type := b_solar_power ; 31 :
60994: LD_ADDR_OWVAR 42
60998: PUSH
60999: LD_INT 27
61001: ST_TO_ADDR
61002: GO 61081
61004: LD_INT 31
61006: DOUBLE
61007: EQUAL
61008: IFTRUE 61012
61010: GO 61023
61012: POP
// bc_type := b_oil_power ; 32 :
61013: LD_ADDR_OWVAR 42
61017: PUSH
61018: LD_INT 26
61020: ST_TO_ADDR
61021: GO 61081
61023: LD_INT 32
61025: DOUBLE
61026: EQUAL
61027: IFTRUE 61031
61029: GO 61042
61031: POP
// bc_type := b_siberite_power ; 33 :
61032: LD_ADDR_OWVAR 42
61036: PUSH
61037: LD_INT 28
61039: ST_TO_ADDR
61040: GO 61081
61042: LD_INT 33
61044: DOUBLE
61045: EQUAL
61046: IFTRUE 61050
61048: GO 61061
61050: POP
// bc_type := b_oil_mine ; 34 :
61051: LD_ADDR_OWVAR 42
61055: PUSH
61056: LD_INT 29
61058: ST_TO_ADDR
61059: GO 61081
61061: LD_INT 34
61063: DOUBLE
61064: EQUAL
61065: IFTRUE 61069
61067: GO 61080
61069: POP
// bc_type := b_siberite_mine ; end ;
61070: LD_ADDR_OWVAR 42
61074: PUSH
61075: LD_INT 30
61077: ST_TO_ADDR
61078: GO 61081
61080: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61081: LD_ADDR_VAR 0 8
61085: PUSH
61086: LD_VAR 0 5
61090: PPUSH
61091: LD_VAR 0 6
61095: PPUSH
61096: LD_VAR 0 3
61100: PPUSH
61101: CALL_OW 47
61105: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61106: LD_OWVAR 42
61110: PUSH
61111: LD_INT 32
61113: PUSH
61114: LD_INT 33
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: IN
61121: IFFALSE 61137
// PlaceWeaponTurret ( b , weapon ) ;
61123: LD_VAR 0 8
61127: PPUSH
61128: LD_VAR 0 4
61132: PPUSH
61133: CALL_OW 431
// end ;
61137: LD_VAR 0 7
61141: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61142: LD_INT 0
61144: PPUSH
61145: PPUSH
61146: PPUSH
61147: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61148: LD_ADDR_VAR 0 4
61152: PUSH
61153: LD_INT 22
61155: PUSH
61156: LD_OWVAR 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 30
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 30
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PPUSH
61197: CALL_OW 69
61201: ST_TO_ADDR
// if not tmp then
61202: LD_VAR 0 4
61206: NOT
61207: IFFALSE 61211
// exit ;
61209: GO 61270
// for i in tmp do
61211: LD_ADDR_VAR 0 2
61215: PUSH
61216: LD_VAR 0 4
61220: PUSH
61221: FOR_IN
61222: IFFALSE 61268
// for j = 1 to 3 do
61224: LD_ADDR_VAR 0 3
61228: PUSH
61229: DOUBLE
61230: LD_INT 1
61232: DEC
61233: ST_TO_ADDR
61234: LD_INT 3
61236: PUSH
61237: FOR_TO
61238: IFFALSE 61264
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61240: LD_VAR 0 2
61244: PPUSH
61245: CALL_OW 274
61249: PPUSH
61250: LD_VAR 0 3
61254: PPUSH
61255: LD_INT 99999
61257: PPUSH
61258: CALL_OW 277
61262: GO 61237
61264: POP
61265: POP
61266: GO 61221
61268: POP
61269: POP
// end ;
61270: LD_VAR 0 1
61274: RET
// export function hHackSetLevel10 ; var i , j ; begin
61275: LD_INT 0
61277: PPUSH
61278: PPUSH
61279: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61280: LD_ADDR_VAR 0 2
61284: PUSH
61285: LD_INT 21
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PPUSH
61295: CALL_OW 69
61299: PUSH
61300: FOR_IN
61301: IFFALSE 61353
// if IsSelected ( i ) then
61303: LD_VAR 0 2
61307: PPUSH
61308: CALL_OW 306
61312: IFFALSE 61351
// begin for j := 1 to 4 do
61314: LD_ADDR_VAR 0 3
61318: PUSH
61319: DOUBLE
61320: LD_INT 1
61322: DEC
61323: ST_TO_ADDR
61324: LD_INT 4
61326: PUSH
61327: FOR_TO
61328: IFFALSE 61349
// SetSkill ( i , j , 10 ) ;
61330: LD_VAR 0 2
61334: PPUSH
61335: LD_VAR 0 3
61339: PPUSH
61340: LD_INT 10
61342: PPUSH
61343: CALL_OW 237
61347: GO 61327
61349: POP
61350: POP
// end ;
61351: GO 61300
61353: POP
61354: POP
// end ;
61355: LD_VAR 0 1
61359: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61360: LD_INT 0
61362: PPUSH
61363: PPUSH
61364: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61365: LD_ADDR_VAR 0 2
61369: PUSH
61370: LD_INT 22
61372: PUSH
61373: LD_OWVAR 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 21
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PPUSH
61396: CALL_OW 69
61400: PUSH
61401: FOR_IN
61402: IFFALSE 61443
// begin for j := 1 to 4 do
61404: LD_ADDR_VAR 0 3
61408: PUSH
61409: DOUBLE
61410: LD_INT 1
61412: DEC
61413: ST_TO_ADDR
61414: LD_INT 4
61416: PUSH
61417: FOR_TO
61418: IFFALSE 61439
// SetSkill ( i , j , 10 ) ;
61420: LD_VAR 0 2
61424: PPUSH
61425: LD_VAR 0 3
61429: PPUSH
61430: LD_INT 10
61432: PPUSH
61433: CALL_OW 237
61437: GO 61417
61439: POP
61440: POP
// end ;
61441: GO 61401
61443: POP
61444: POP
// end ;
61445: LD_VAR 0 1
61449: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61450: LD_INT 0
61452: PPUSH
// uc_side := your_side ;
61453: LD_ADDR_OWVAR 20
61457: PUSH
61458: LD_OWVAR 2
61462: ST_TO_ADDR
// uc_nation := nation ;
61463: LD_ADDR_OWVAR 21
61467: PUSH
61468: LD_VAR 0 1
61472: ST_TO_ADDR
// InitHc ;
61473: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61477: LD_INT 0
61479: PPUSH
61480: LD_VAR 0 2
61484: PPUSH
61485: LD_VAR 0 3
61489: PPUSH
61490: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61494: LD_VAR 0 4
61498: PPUSH
61499: LD_VAR 0 5
61503: PPUSH
61504: CALL_OW 428
61508: PUSH
61509: LD_INT 0
61511: EQUAL
61512: IFFALSE 61536
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61514: CALL_OW 44
61518: PPUSH
61519: LD_VAR 0 4
61523: PPUSH
61524: LD_VAR 0 5
61528: PPUSH
61529: LD_INT 1
61531: PPUSH
61532: CALL_OW 48
// end ;
61536: LD_VAR 0 6
61540: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61541: LD_INT 0
61543: PPUSH
61544: PPUSH
// uc_side := your_side ;
61545: LD_ADDR_OWVAR 20
61549: PUSH
61550: LD_OWVAR 2
61554: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61555: LD_VAR 0 1
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: LD_INT 4
61571: PUSH
61572: LD_INT 5
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: IN
61582: IFFALSE 61594
// uc_nation := nation_american else
61584: LD_ADDR_OWVAR 21
61588: PUSH
61589: LD_INT 1
61591: ST_TO_ADDR
61592: GO 61637
// if chassis in [ 11 , 12 , 13 , 14 ] then
61594: LD_VAR 0 1
61598: PUSH
61599: LD_INT 11
61601: PUSH
61602: LD_INT 12
61604: PUSH
61605: LD_INT 13
61607: PUSH
61608: LD_INT 14
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: IN
61617: IFFALSE 61629
// uc_nation := nation_arabian else
61619: LD_ADDR_OWVAR 21
61623: PUSH
61624: LD_INT 2
61626: ST_TO_ADDR
61627: GO 61637
// uc_nation := nation_russian ;
61629: LD_ADDR_OWVAR 21
61633: PUSH
61634: LD_INT 3
61636: ST_TO_ADDR
// vc_chassis := chassis ;
61637: LD_ADDR_OWVAR 37
61641: PUSH
61642: LD_VAR 0 1
61646: ST_TO_ADDR
// vc_engine := engine ;
61647: LD_ADDR_OWVAR 39
61651: PUSH
61652: LD_VAR 0 2
61656: ST_TO_ADDR
// vc_control := control ;
61657: LD_ADDR_OWVAR 38
61661: PUSH
61662: LD_VAR 0 3
61666: ST_TO_ADDR
// vc_weapon := weapon ;
61667: LD_ADDR_OWVAR 40
61671: PUSH
61672: LD_VAR 0 4
61676: ST_TO_ADDR
// un := CreateVehicle ;
61677: LD_ADDR_VAR 0 8
61681: PUSH
61682: CALL_OW 45
61686: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61687: LD_VAR 0 8
61691: PPUSH
61692: LD_INT 0
61694: PPUSH
61695: LD_INT 5
61697: PPUSH
61698: CALL_OW 12
61702: PPUSH
61703: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61707: LD_VAR 0 8
61711: PPUSH
61712: LD_VAR 0 5
61716: PPUSH
61717: LD_VAR 0 6
61721: PPUSH
61722: LD_INT 1
61724: PPUSH
61725: CALL_OW 48
// end ;
61729: LD_VAR 0 7
61733: RET
// export hInvincible ; every 1 do
61734: GO 61736
61736: DISABLE
// hInvincible := [ ] ;
61737: LD_ADDR_EXP 85
61741: PUSH
61742: EMPTY
61743: ST_TO_ADDR
61744: END
// every 10 do var i ;
61745: GO 61747
61747: DISABLE
61748: LD_INT 0
61750: PPUSH
// begin enable ;
61751: ENABLE
// if not hInvincible then
61752: LD_EXP 85
61756: NOT
61757: IFFALSE 61761
// exit ;
61759: GO 61805
// for i in hInvincible do
61761: LD_ADDR_VAR 0 1
61765: PUSH
61766: LD_EXP 85
61770: PUSH
61771: FOR_IN
61772: IFFALSE 61803
// if GetLives ( i ) < 1000 then
61774: LD_VAR 0 1
61778: PPUSH
61779: CALL_OW 256
61783: PUSH
61784: LD_INT 1000
61786: LESS
61787: IFFALSE 61801
// SetLives ( i , 1000 ) ;
61789: LD_VAR 0 1
61793: PPUSH
61794: LD_INT 1000
61796: PPUSH
61797: CALL_OW 234
61801: GO 61771
61803: POP
61804: POP
// end ;
61805: PPOPN 1
61807: END
// export function hHackInvincible ; var i ; begin
61808: LD_INT 0
61810: PPUSH
61811: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61812: LD_ADDR_VAR 0 2
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: LD_INT 21
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 21
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: PPUSH
61845: CALL_OW 69
61849: PUSH
61850: FOR_IN
61851: IFFALSE 61912
// if IsSelected ( i ) then
61853: LD_VAR 0 2
61857: PPUSH
61858: CALL_OW 306
61862: IFFALSE 61910
// begin if i in hInvincible then
61864: LD_VAR 0 2
61868: PUSH
61869: LD_EXP 85
61873: IN
61874: IFFALSE 61894
// hInvincible := hInvincible diff i else
61876: LD_ADDR_EXP 85
61880: PUSH
61881: LD_EXP 85
61885: PUSH
61886: LD_VAR 0 2
61890: DIFF
61891: ST_TO_ADDR
61892: GO 61910
// hInvincible := hInvincible union i ;
61894: LD_ADDR_EXP 85
61898: PUSH
61899: LD_EXP 85
61903: PUSH
61904: LD_VAR 0 2
61908: UNION
61909: ST_TO_ADDR
// end ;
61910: GO 61850
61912: POP
61913: POP
// end ;
61914: LD_VAR 0 1
61918: RET
// export function hHackInvisible ; var i , j ; begin
61919: LD_INT 0
61921: PPUSH
61922: PPUSH
61923: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61924: LD_ADDR_VAR 0 2
61928: PUSH
61929: LD_INT 21
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PPUSH
61939: CALL_OW 69
61943: PUSH
61944: FOR_IN
61945: IFFALSE 61969
// if IsSelected ( i ) then
61947: LD_VAR 0 2
61951: PPUSH
61952: CALL_OW 306
61956: IFFALSE 61967
// ComForceInvisible ( i ) ;
61958: LD_VAR 0 2
61962: PPUSH
61963: CALL_OW 496
61967: GO 61944
61969: POP
61970: POP
// end ;
61971: LD_VAR 0 1
61975: RET
// export function hHackChangeYourSide ; begin
61976: LD_INT 0
61978: PPUSH
// if your_side = 8 then
61979: LD_OWVAR 2
61983: PUSH
61984: LD_INT 8
61986: EQUAL
61987: IFFALSE 61999
// your_side := 0 else
61989: LD_ADDR_OWVAR 2
61993: PUSH
61994: LD_INT 0
61996: ST_TO_ADDR
61997: GO 62013
// your_side := your_side + 1 ;
61999: LD_ADDR_OWVAR 2
62003: PUSH
62004: LD_OWVAR 2
62008: PUSH
62009: LD_INT 1
62011: PLUS
62012: ST_TO_ADDR
// end ;
62013: LD_VAR 0 1
62017: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62018: LD_INT 0
62020: PPUSH
62021: PPUSH
62022: PPUSH
// for i in all_units do
62023: LD_ADDR_VAR 0 2
62027: PUSH
62028: LD_OWVAR 3
62032: PUSH
62033: FOR_IN
62034: IFFALSE 62112
// if IsSelected ( i ) then
62036: LD_VAR 0 2
62040: PPUSH
62041: CALL_OW 306
62045: IFFALSE 62110
// begin j := GetSide ( i ) ;
62047: LD_ADDR_VAR 0 3
62051: PUSH
62052: LD_VAR 0 2
62056: PPUSH
62057: CALL_OW 255
62061: ST_TO_ADDR
// if j = 8 then
62062: LD_VAR 0 3
62066: PUSH
62067: LD_INT 8
62069: EQUAL
62070: IFFALSE 62082
// j := 0 else
62072: LD_ADDR_VAR 0 3
62076: PUSH
62077: LD_INT 0
62079: ST_TO_ADDR
62080: GO 62096
// j := j + 1 ;
62082: LD_ADDR_VAR 0 3
62086: PUSH
62087: LD_VAR 0 3
62091: PUSH
62092: LD_INT 1
62094: PLUS
62095: ST_TO_ADDR
// SetSide ( i , j ) ;
62096: LD_VAR 0 2
62100: PPUSH
62101: LD_VAR 0 3
62105: PPUSH
62106: CALL_OW 235
// end ;
62110: GO 62033
62112: POP
62113: POP
// end ;
62114: LD_VAR 0 1
62118: RET
// export function hHackFog ; begin
62119: LD_INT 0
62121: PPUSH
// FogOff ( true ) ;
62122: LD_INT 1
62124: PPUSH
62125: CALL_OW 344
// end ;
62129: LD_VAR 0 1
62133: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62134: LD_INT 0
62136: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62137: LD_VAR 0 1
62141: PPUSH
62142: LD_VAR 0 2
62146: PPUSH
62147: LD_VAR 0 3
62151: PPUSH
62152: LD_INT 1
62154: PPUSH
62155: LD_INT 1
62157: PPUSH
62158: CALL_OW 483
// CenterOnXY ( x , y ) ;
62162: LD_VAR 0 2
62166: PPUSH
62167: LD_VAR 0 3
62171: PPUSH
62172: CALL_OW 84
// end ;
62176: LD_VAR 0 4
62180: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62181: LD_INT 0
62183: PPUSH
62184: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62185: LD_VAR 0 1
62189: NOT
62190: PUSH
62191: LD_VAR 0 2
62195: PPUSH
62196: LD_VAR 0 3
62200: PPUSH
62201: CALL_OW 488
62205: NOT
62206: OR
62207: PUSH
62208: LD_VAR 0 1
62212: PPUSH
62213: CALL_OW 266
62217: PUSH
62218: LD_INT 3
62220: NONEQUAL
62221: PUSH
62222: LD_VAR 0 1
62226: PPUSH
62227: CALL_OW 247
62231: PUSH
62232: LD_INT 1
62234: EQUAL
62235: NOT
62236: AND
62237: OR
62238: IFFALSE 62242
// exit ;
62240: GO 62524
// if GetType ( factory ) = unit_human then
62242: LD_VAR 0 1
62246: PPUSH
62247: CALL_OW 247
62251: PUSH
62252: LD_INT 1
62254: EQUAL
62255: IFFALSE 62272
// factory := IsInUnit ( factory ) ;
62257: LD_ADDR_VAR 0 1
62261: PUSH
62262: LD_VAR 0 1
62266: PPUSH
62267: CALL_OW 310
62271: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62272: LD_VAR 0 1
62276: PPUSH
62277: CALL_OW 266
62281: PUSH
62282: LD_INT 3
62284: NONEQUAL
62285: IFFALSE 62289
// exit ;
62287: GO 62524
// for i := 1 to Count ( factoryWaypoints ) do
62289: LD_ADDR_VAR 0 5
62293: PUSH
62294: DOUBLE
62295: LD_INT 1
62297: DEC
62298: ST_TO_ADDR
62299: LD_EXP 86
62303: PPUSH
62304: CALL 6915 0 1
62308: PUSH
62309: FOR_TO
62310: IFFALSE 62472
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62312: LD_VAR 0 2
62316: PPUSH
62317: LD_VAR 0 3
62321: PPUSH
62322: CALL_OW 428
62326: PUSH
62327: LD_EXP 86
62331: PUSH
62332: LD_VAR 0 5
62336: ARRAY
62337: PUSH
62338: LD_INT 2
62340: ARRAY
62341: EQUAL
62342: IFFALSE 62374
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62344: LD_ADDR_EXP 86
62348: PUSH
62349: LD_EXP 86
62353: PPUSH
62354: LD_VAR 0 5
62358: PPUSH
62359: CALL_OW 3
62363: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62364: CALL 62529 0 0
// exit ;
62368: POP
62369: POP
62370: GO 62524
// end else
62372: GO 62470
// if factory = factoryWaypoints [ i ] [ 2 ] then
62374: LD_VAR 0 1
62378: PUSH
62379: LD_EXP 86
62383: PUSH
62384: LD_VAR 0 5
62388: ARRAY
62389: PUSH
62390: LD_INT 2
62392: ARRAY
62393: EQUAL
62394: IFFALSE 62470
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62396: LD_ADDR_EXP 86
62400: PUSH
62401: LD_EXP 86
62405: PPUSH
62406: LD_VAR 0 5
62410: PPUSH
62411: CALL_OW 3
62415: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62416: LD_ADDR_EXP 86
62420: PUSH
62421: LD_EXP 86
62425: PPUSH
62426: LD_VAR 0 1
62430: PPUSH
62431: CALL_OW 255
62435: PUSH
62436: LD_VAR 0 1
62440: PUSH
62441: LD_VAR 0 2
62445: PUSH
62446: LD_VAR 0 3
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: PPUSH
62457: CALL 42524 0 2
62461: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62462: CALL 62529 0 0
// exit ;
62466: POP
62467: POP
62468: GO 62524
// end ; end ;
62470: GO 62309
62472: POP
62473: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62474: LD_ADDR_EXP 86
62478: PUSH
62479: LD_EXP 86
62483: PPUSH
62484: LD_VAR 0 1
62488: PPUSH
62489: CALL_OW 255
62493: PUSH
62494: LD_VAR 0 1
62498: PUSH
62499: LD_VAR 0 2
62503: PUSH
62504: LD_VAR 0 3
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: PPUSH
62515: CALL 42524 0 2
62519: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62520: CALL 62529 0 0
// end ;
62524: LD_VAR 0 4
62528: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62529: LD_INT 0
62531: PPUSH
62532: PPUSH
62533: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62534: LD_STRING resetFactoryWaypoint();
62536: PPUSH
62537: CALL_OW 559
// if factoryWaypoints then
62541: LD_EXP 86
62545: IFFALSE 62666
// begin list := factoryWaypoints ;
62547: LD_ADDR_VAR 0 3
62551: PUSH
62552: LD_EXP 86
62556: ST_TO_ADDR
// for i := 1 to list do
62557: LD_ADDR_VAR 0 2
62561: PUSH
62562: DOUBLE
62563: LD_INT 1
62565: DEC
62566: ST_TO_ADDR
62567: LD_VAR 0 3
62571: PUSH
62572: FOR_TO
62573: IFFALSE 62664
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62575: LD_STRING setFactoryWaypointXY(
62577: PUSH
62578: LD_VAR 0 3
62582: PUSH
62583: LD_VAR 0 2
62587: ARRAY
62588: PUSH
62589: LD_INT 1
62591: ARRAY
62592: STR
62593: PUSH
62594: LD_STRING ,
62596: STR
62597: PUSH
62598: LD_VAR 0 3
62602: PUSH
62603: LD_VAR 0 2
62607: ARRAY
62608: PUSH
62609: LD_INT 2
62611: ARRAY
62612: STR
62613: PUSH
62614: LD_STRING ,
62616: STR
62617: PUSH
62618: LD_VAR 0 3
62622: PUSH
62623: LD_VAR 0 2
62627: ARRAY
62628: PUSH
62629: LD_INT 3
62631: ARRAY
62632: STR
62633: PUSH
62634: LD_STRING ,
62636: STR
62637: PUSH
62638: LD_VAR 0 3
62642: PUSH
62643: LD_VAR 0 2
62647: ARRAY
62648: PUSH
62649: LD_INT 4
62651: ARRAY
62652: STR
62653: PUSH
62654: LD_STRING )
62656: STR
62657: PPUSH
62658: CALL_OW 559
62662: GO 62572
62664: POP
62665: POP
// end ; end ;
62666: LD_VAR 0 1
62670: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62671: LD_INT 0
62673: PPUSH
// if HexInfo ( x , y ) = warehouse then
62674: LD_VAR 0 2
62678: PPUSH
62679: LD_VAR 0 3
62683: PPUSH
62684: CALL_OW 428
62688: PUSH
62689: LD_VAR 0 1
62693: EQUAL
62694: IFFALSE 62721
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62696: LD_ADDR_EXP 87
62700: PUSH
62701: LD_EXP 87
62705: PPUSH
62706: LD_VAR 0 1
62710: PPUSH
62711: LD_INT 0
62713: PPUSH
62714: CALL_OW 1
62718: ST_TO_ADDR
62719: GO 62772
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62721: LD_ADDR_EXP 87
62725: PUSH
62726: LD_EXP 87
62730: PPUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: CALL_OW 255
62745: PUSH
62746: LD_VAR 0 1
62750: PUSH
62751: LD_VAR 0 2
62755: PUSH
62756: LD_VAR 0 3
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: PPUSH
62767: CALL_OW 1
62771: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62772: CALL 62781 0 0
// end ;
62776: LD_VAR 0 4
62780: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62781: LD_INT 0
62783: PPUSH
62784: PPUSH
62785: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62786: LD_STRING resetWarehouseGatheringPoints();
62788: PPUSH
62789: CALL_OW 559
// if warehouseGatheringPoints then
62793: LD_EXP 87
62797: IFFALSE 62923
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62799: LD_ADDR_VAR 0 3
62803: PUSH
62804: LD_EXP 87
62808: PPUSH
62809: CALL 46292 0 1
62813: ST_TO_ADDR
// for i := 1 to list do
62814: LD_ADDR_VAR 0 2
62818: PUSH
62819: DOUBLE
62820: LD_INT 1
62822: DEC
62823: ST_TO_ADDR
62824: LD_VAR 0 3
62828: PUSH
62829: FOR_TO
62830: IFFALSE 62921
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62832: LD_STRING setWarehouseGatheringPointXY(
62834: PUSH
62835: LD_VAR 0 3
62839: PUSH
62840: LD_VAR 0 2
62844: ARRAY
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: STR
62850: PUSH
62851: LD_STRING ,
62853: STR
62854: PUSH
62855: LD_VAR 0 3
62859: PUSH
62860: LD_VAR 0 2
62864: ARRAY
62865: PUSH
62866: LD_INT 2
62868: ARRAY
62869: STR
62870: PUSH
62871: LD_STRING ,
62873: STR
62874: PUSH
62875: LD_VAR 0 3
62879: PUSH
62880: LD_VAR 0 2
62884: ARRAY
62885: PUSH
62886: LD_INT 3
62888: ARRAY
62889: STR
62890: PUSH
62891: LD_STRING ,
62893: STR
62894: PUSH
62895: LD_VAR 0 3
62899: PUSH
62900: LD_VAR 0 2
62904: ARRAY
62905: PUSH
62906: LD_INT 4
62908: ARRAY
62909: STR
62910: PUSH
62911: LD_STRING )
62913: STR
62914: PPUSH
62915: CALL_OW 559
62919: GO 62829
62921: POP
62922: POP
// end ; end ;
62923: LD_VAR 0 1
62927: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62928: LD_EXP 87
62932: IFFALSE 63617
62934: GO 62936
62936: DISABLE
62937: LD_INT 0
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
62943: PPUSH
62944: PPUSH
62945: PPUSH
62946: PPUSH
62947: PPUSH
// begin enable ;
62948: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62949: LD_ADDR_VAR 0 3
62953: PUSH
62954: LD_EXP 87
62958: PPUSH
62959: CALL 46292 0 1
62963: ST_TO_ADDR
// if not list then
62964: LD_VAR 0 3
62968: NOT
62969: IFFALSE 62973
// exit ;
62971: GO 63617
// for i := 1 to list do
62973: LD_ADDR_VAR 0 1
62977: PUSH
62978: DOUBLE
62979: LD_INT 1
62981: DEC
62982: ST_TO_ADDR
62983: LD_VAR 0 3
62987: PUSH
62988: FOR_TO
62989: IFFALSE 63615
// begin depot := list [ i ] [ 2 ] ;
62991: LD_ADDR_VAR 0 8
62995: PUSH
62996: LD_VAR 0 3
63000: PUSH
63001: LD_VAR 0 1
63005: ARRAY
63006: PUSH
63007: LD_INT 2
63009: ARRAY
63010: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63011: LD_ADDR_VAR 0 5
63015: PUSH
63016: LD_VAR 0 3
63020: PUSH
63021: LD_VAR 0 1
63025: ARRAY
63026: PUSH
63027: LD_INT 1
63029: ARRAY
63030: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63031: LD_VAR 0 8
63035: PPUSH
63036: CALL_OW 301
63040: PUSH
63041: LD_VAR 0 5
63045: PUSH
63046: LD_VAR 0 8
63050: PPUSH
63051: CALL_OW 255
63055: NONEQUAL
63056: OR
63057: IFFALSE 63086
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63059: LD_ADDR_EXP 87
63063: PUSH
63064: LD_EXP 87
63068: PPUSH
63069: LD_VAR 0 8
63073: PPUSH
63074: LD_INT 0
63076: PPUSH
63077: CALL_OW 1
63081: ST_TO_ADDR
// exit ;
63082: POP
63083: POP
63084: GO 63617
// end ; x := list [ i ] [ 3 ] ;
63086: LD_ADDR_VAR 0 6
63090: PUSH
63091: LD_VAR 0 3
63095: PUSH
63096: LD_VAR 0 1
63100: ARRAY
63101: PUSH
63102: LD_INT 3
63104: ARRAY
63105: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63106: LD_ADDR_VAR 0 7
63110: PUSH
63111: LD_VAR 0 3
63115: PUSH
63116: LD_VAR 0 1
63120: ARRAY
63121: PUSH
63122: LD_INT 4
63124: ARRAY
63125: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63126: LD_ADDR_VAR 0 9
63130: PUSH
63131: LD_VAR 0 6
63135: PPUSH
63136: LD_VAR 0 7
63140: PPUSH
63141: LD_INT 16
63143: PPUSH
63144: CALL 44876 0 3
63148: ST_TO_ADDR
// if not cratesNearbyPoint then
63149: LD_VAR 0 9
63153: NOT
63154: IFFALSE 63160
// exit ;
63156: POP
63157: POP
63158: GO 63617
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63160: LD_ADDR_VAR 0 4
63164: PUSH
63165: LD_INT 22
63167: PUSH
63168: LD_VAR 0 5
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 3
63179: PUSH
63180: LD_INT 60
63182: PUSH
63183: EMPTY
63184: LIST
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 91
63192: PUSH
63193: LD_VAR 0 8
63197: PUSH
63198: LD_INT 6
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: LD_INT 25
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 25
63221: PUSH
63222: LD_INT 16
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: PPUSH
63240: CALL_OW 69
63244: PUSH
63245: LD_VAR 0 8
63249: PPUSH
63250: CALL_OW 313
63254: PPUSH
63255: LD_INT 3
63257: PUSH
63258: LD_INT 60
63260: PUSH
63261: EMPTY
63262: LIST
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: LD_INT 25
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 25
63283: PUSH
63284: LD_INT 16
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PPUSH
63300: CALL_OW 72
63304: UNION
63305: ST_TO_ADDR
// if tmp then
63306: LD_VAR 0 4
63310: IFFALSE 63390
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63312: LD_ADDR_VAR 0 4
63316: PUSH
63317: LD_VAR 0 4
63321: PPUSH
63322: LD_INT 3
63324: PPUSH
63325: CALL 42839 0 2
63329: ST_TO_ADDR
// for j in tmp do
63330: LD_ADDR_VAR 0 2
63334: PUSH
63335: LD_VAR 0 4
63339: PUSH
63340: FOR_IN
63341: IFFALSE 63384
// begin if IsInUnit ( j ) then
63343: LD_VAR 0 2
63347: PPUSH
63348: CALL_OW 310
63352: IFFALSE 63363
// ComExit ( j ) ;
63354: LD_VAR 0 2
63358: PPUSH
63359: CALL 42922 0 1
// AddComCollect ( j , x , y ) ;
63363: LD_VAR 0 2
63367: PPUSH
63368: LD_VAR 0 6
63372: PPUSH
63373: LD_VAR 0 7
63377: PPUSH
63378: CALL_OW 177
// end ;
63382: GO 63340
63384: POP
63385: POP
// exit ;
63386: POP
63387: POP
63388: GO 63617
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63390: LD_ADDR_VAR 0 4
63394: PUSH
63395: LD_INT 22
63397: PUSH
63398: LD_VAR 0 5
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 91
63409: PUSH
63410: LD_VAR 0 8
63414: PUSH
63415: LD_INT 8
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 34
63428: PUSH
63429: LD_INT 12
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 34
63438: PUSH
63439: LD_INT 51
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 34
63448: PUSH
63449: LD_INT 32
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 34
63458: PUSH
63459: LD_INT 89
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: PPUSH
63478: CALL_OW 69
63482: ST_TO_ADDR
// if tmp then
63483: LD_VAR 0 4
63487: IFFALSE 63613
// begin for j in tmp do
63489: LD_ADDR_VAR 0 2
63493: PUSH
63494: LD_VAR 0 4
63498: PUSH
63499: FOR_IN
63500: IFFALSE 63611
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63502: LD_VAR 0 2
63506: PPUSH
63507: CALL_OW 262
63511: PUSH
63512: LD_INT 3
63514: EQUAL
63515: PUSH
63516: LD_VAR 0 2
63520: PPUSH
63521: CALL_OW 261
63525: PUSH
63526: LD_INT 20
63528: GREATER
63529: OR
63530: PUSH
63531: LD_VAR 0 2
63535: PPUSH
63536: CALL_OW 314
63540: NOT
63541: AND
63542: PUSH
63543: LD_VAR 0 2
63547: PPUSH
63548: CALL_OW 263
63552: PUSH
63553: LD_INT 1
63555: NONEQUAL
63556: PUSH
63557: LD_VAR 0 2
63561: PPUSH
63562: CALL_OW 311
63566: OR
63567: AND
63568: IFFALSE 63609
// begin ComCollect ( j , x , y ) ;
63570: LD_VAR 0 2
63574: PPUSH
63575: LD_VAR 0 6
63579: PPUSH
63580: LD_VAR 0 7
63584: PPUSH
63585: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63589: LD_VAR 0 2
63593: PPUSH
63594: LD_VAR 0 8
63598: PPUSH
63599: CALL_OW 172
// exit ;
63603: POP
63604: POP
63605: POP
63606: POP
63607: GO 63617
// end ;
63609: GO 63499
63611: POP
63612: POP
// end ; end ;
63613: GO 62988
63615: POP
63616: POP
// end ; end_of_file
63617: PPOPN 9
63619: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63620: LD_VAR 0 1
63624: PUSH
63625: LD_INT 200
63627: DOUBLE
63628: GREATEREQUAL
63629: IFFALSE 63637
63631: LD_INT 299
63633: DOUBLE
63634: LESSEQUAL
63635: IFTRUE 63639
63637: GO 63671
63639: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63640: LD_VAR 0 1
63644: PPUSH
63645: LD_VAR 0 2
63649: PPUSH
63650: LD_VAR 0 3
63654: PPUSH
63655: LD_VAR 0 4
63659: PPUSH
63660: LD_VAR 0 5
63664: PPUSH
63665: CALL 64368 0 5
63669: GO 63748
63671: LD_INT 300
63673: DOUBLE
63674: GREATEREQUAL
63675: IFFALSE 63683
63677: LD_INT 399
63679: DOUBLE
63680: LESSEQUAL
63681: IFTRUE 63685
63683: GO 63747
63685: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63686: LD_VAR 0 1
63690: PPUSH
63691: LD_VAR 0 2
63695: PPUSH
63696: LD_VAR 0 3
63700: PPUSH
63701: LD_VAR 0 4
63705: PPUSH
63706: LD_VAR 0 5
63710: PPUSH
63711: LD_VAR 0 6
63715: PPUSH
63716: LD_VAR 0 7
63720: PPUSH
63721: LD_VAR 0 8
63725: PPUSH
63726: LD_VAR 0 9
63730: PPUSH
63731: LD_VAR 0 10
63735: PPUSH
63736: LD_VAR 0 11
63740: PPUSH
63741: CALL 60193 0 11
63745: GO 63748
63747: POP
// end ;
63748: PPOPN 11
63750: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63751: LD_VAR 0 1
63755: PPUSH
63756: LD_VAR 0 2
63760: PPUSH
63761: LD_VAR 0 3
63765: PPUSH
63766: LD_VAR 0 4
63770: PPUSH
63771: LD_VAR 0 5
63775: PPUSH
63776: CALL 63833 0 5
// end ; end_of_file
63780: PPOPN 5
63782: END
// export function SOS_UnitDestroyed ( un ) ; begin
63783: LD_INT 0
63785: PPUSH
// ComRadiation ( un ) ;
63786: LD_VAR 0 1
63790: PPUSH
63791: CALL 64772 0 1
// end ;
63795: LD_VAR 0 2
63799: RET
// export function SOS_UnitKamikazed ( un ) ; begin
63800: LD_INT 0
63802: PPUSH
// ComRadiation ( un ) ;
63803: LD_VAR 0 1
63807: PPUSH
63808: CALL 64772 0 1
// end ;
63812: LD_VAR 0 2
63816: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63817: LD_INT 0
63819: PPUSH
// end ;
63820: LD_VAR 0 4
63824: RET
// export function SOS_Command ( cmd ) ; begin
63825: LD_INT 0
63827: PPUSH
// end ;
63828: LD_VAR 0 2
63832: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63833: LD_INT 0
63835: PPUSH
// end ;
63836: LD_VAR 0 6
63840: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
63841: LD_INT 0
63843: PPUSH
63844: PPUSH
63845: PPUSH
63846: PPUSH
63847: PPUSH
// if not vehicle or not factory then
63848: LD_VAR 0 1
63852: NOT
63853: PUSH
63854: LD_VAR 0 2
63858: NOT
63859: OR
63860: IFFALSE 63864
// exit ;
63862: GO 64363
// if not factoryWaypoints then
63864: LD_EXP 86
63868: NOT
63869: IFFALSE 63873
// exit ;
63871: GO 64363
// for i := 1 to Count ( factoryWaypoints ) do
63873: LD_ADDR_VAR 0 4
63877: PUSH
63878: DOUBLE
63879: LD_INT 1
63881: DEC
63882: ST_TO_ADDR
63883: LD_EXP 86
63887: PPUSH
63888: CALL 6915 0 1
63892: PUSH
63893: FOR_TO
63894: IFFALSE 64361
// if factoryWaypoints [ i ] [ 2 ] = factory then
63896: LD_EXP 86
63900: PUSH
63901: LD_VAR 0 4
63905: ARRAY
63906: PUSH
63907: LD_INT 2
63909: ARRAY
63910: PUSH
63911: LD_VAR 0 2
63915: EQUAL
63916: IFFALSE 64359
// begin if GetControl ( vehicle ) = control_manual then
63918: LD_VAR 0 1
63922: PPUSH
63923: CALL_OW 263
63927: PUSH
63928: LD_INT 1
63930: EQUAL
63931: IFFALSE 64242
// begin driver := IsDrivenBy ( vehicle ) ;
63933: LD_ADDR_VAR 0 6
63937: PUSH
63938: LD_VAR 0 1
63942: PPUSH
63943: CALL_OW 311
63947: ST_TO_ADDR
// tag := GetTag ( driver ) ;
63948: LD_ADDR_VAR 0 5
63952: PUSH
63953: LD_VAR 0 6
63957: PPUSH
63958: CALL_OW 110
63962: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
63963: LD_VAR 0 5
63967: PUSH
63968: LD_INT 501
63970: EQUAL
63971: PUSH
63972: LD_VAR 0 1
63976: PPUSH
63977: CALL_OW 110
63981: PUSH
63982: LD_INT 501
63984: EQUAL
63985: OR
63986: IFFALSE 63992
// exit ;
63988: POP
63989: POP
63990: GO 64363
// if not HasTask ( driver ) then
63992: LD_VAR 0 6
63996: PPUSH
63997: CALL_OW 314
64001: NOT
64002: IFFALSE 64240
// begin SetTag ( driver , tDriver ) ;
64004: LD_VAR 0 6
64008: PPUSH
64009: LD_INT 501
64011: PPUSH
64012: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
64016: LD_VAR 0 1
64020: PPUSH
64021: LD_INT 501
64023: PPUSH
64024: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64028: LD_ADDR_VAR 0 7
64032: PUSH
64033: LD_EXP 86
64037: PUSH
64038: LD_VAR 0 4
64042: ARRAY
64043: PUSH
64044: LD_INT 3
64046: ARRAY
64047: PPUSH
64048: LD_EXP 86
64052: PUSH
64053: LD_VAR 0 4
64057: ARRAY
64058: PUSH
64059: LD_INT 4
64061: ARRAY
64062: PPUSH
64063: CALL_OW 428
64067: ST_TO_ADDR
// if hex then
64068: LD_VAR 0 7
64072: IFFALSE 64090
// ComMoveUnit ( driver , hex ) else
64074: LD_VAR 0 6
64078: PPUSH
64079: LD_VAR 0 7
64083: PPUSH
64084: CALL_OW 112
64088: GO 64129
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64090: LD_VAR 0 6
64094: PPUSH
64095: LD_EXP 86
64099: PUSH
64100: LD_VAR 0 4
64104: ARRAY
64105: PUSH
64106: LD_INT 3
64108: ARRAY
64109: PPUSH
64110: LD_EXP 86
64114: PUSH
64115: LD_VAR 0 4
64119: ARRAY
64120: PUSH
64121: LD_INT 4
64123: ARRAY
64124: PPUSH
64125: CALL_OW 111
// AddComExitVehicle ( driver ) ;
64129: LD_VAR 0 6
64133: PPUSH
64134: CALL_OW 181
// if Multiplayer then
64138: LD_OWVAR 4
64142: IFFALSE 64191
// begin repeat wait ( 10 ) ;
64144: LD_INT 10
64146: PPUSH
64147: CALL_OW 67
// until not IsInUnit ( driver ) ;
64151: LD_VAR 0 6
64155: PPUSH
64156: CALL_OW 310
64160: NOT
64161: IFFALSE 64144
// if not HasTask ( driver ) then
64163: LD_VAR 0 6
64167: PPUSH
64168: CALL_OW 314
64172: NOT
64173: IFFALSE 64189
// ComEnterUnit ( driver , factory ) ;
64175: LD_VAR 0 6
64179: PPUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: CALL_OW 120
// end else
64189: GO 64205
// AddComEnterUnit ( driver , factory ) ;
64191: LD_VAR 0 6
64195: PPUSH
64196: LD_VAR 0 2
64200: PPUSH
64201: CALL_OW 180
// wait ( 0 0$1 ) ;
64205: LD_INT 35
64207: PPUSH
64208: CALL_OW 67
// SetTag ( driver , tag ) ;
64212: LD_VAR 0 6
64216: PPUSH
64217: LD_VAR 0 5
64221: PPUSH
64222: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_INT 0
64233: PPUSH
64234: CALL_OW 109
// break ;
64238: GO 64361
// end ; end else
64240: GO 64359
// if GetControl ( vehicle ) = control_remote then
64242: LD_VAR 0 1
64246: PPUSH
64247: CALL_OW 263
64251: PUSH
64252: LD_INT 2
64254: EQUAL
64255: IFFALSE 64318
// begin wait ( 0 0$2 ) ;
64257: LD_INT 70
64259: PPUSH
64260: CALL_OW 67
// if Connect ( vehicle ) then
64264: LD_VAR 0 1
64268: PPUSH
64269: CALL 13121 0 1
64273: IFFALSE 64314
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64275: LD_VAR 0 1
64279: PPUSH
64280: LD_EXP 86
64284: PUSH
64285: LD_VAR 0 4
64289: ARRAY
64290: PUSH
64291: LD_INT 3
64293: ARRAY
64294: PPUSH
64295: LD_EXP 86
64299: PUSH
64300: LD_VAR 0 4
64304: ARRAY
64305: PUSH
64306: LD_INT 4
64308: ARRAY
64309: PPUSH
64310: CALL_OW 171
// break ;
64314: GO 64361
// end else
64316: GO 64359
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64318: LD_VAR 0 1
64322: PPUSH
64323: LD_EXP 86
64327: PUSH
64328: LD_VAR 0 4
64332: ARRAY
64333: PUSH
64334: LD_INT 3
64336: ARRAY
64337: PPUSH
64338: LD_EXP 86
64342: PUSH
64343: LD_VAR 0 4
64347: ARRAY
64348: PUSH
64349: LD_INT 4
64351: ARRAY
64352: PPUSH
64353: CALL_OW 171
// break ;
64357: GO 64361
// end ; end ;
64359: GO 63893
64361: POP
64362: POP
// end ;
64363: LD_VAR 0 3
64367: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64368: LD_INT 0
64370: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64371: LD_VAR 0 1
64375: PUSH
64376: LD_INT 250
64378: EQUAL
64379: PUSH
64380: LD_VAR 0 2
64384: PPUSH
64385: CALL_OW 264
64389: PUSH
64390: LD_INT 81
64392: EQUAL
64393: AND
64394: IFFALSE 64415
// MinerPlaceMine ( unit , x , y ) ;
64396: LD_VAR 0 2
64400: PPUSH
64401: LD_VAR 0 4
64405: PPUSH
64406: LD_VAR 0 5
64410: PPUSH
64411: CALL 67507 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64415: LD_VAR 0 1
64419: PUSH
64420: LD_INT 251
64422: EQUAL
64423: PUSH
64424: LD_VAR 0 2
64428: PPUSH
64429: CALL_OW 264
64433: PUSH
64434: LD_INT 81
64436: EQUAL
64437: AND
64438: IFFALSE 64459
// MinerDetonateMine ( unit , x , y ) ;
64440: LD_VAR 0 2
64444: PPUSH
64445: LD_VAR 0 4
64449: PPUSH
64450: LD_VAR 0 5
64454: PPUSH
64455: CALL 67782 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64459: LD_VAR 0 1
64463: PUSH
64464: LD_INT 252
64466: EQUAL
64467: PUSH
64468: LD_VAR 0 2
64472: PPUSH
64473: CALL_OW 264
64477: PUSH
64478: LD_INT 81
64480: EQUAL
64481: AND
64482: IFFALSE 64503
// MinerCreateMinefield ( unit , x , y ) ;
64484: LD_VAR 0 2
64488: PPUSH
64489: LD_VAR 0 4
64493: PPUSH
64494: LD_VAR 0 5
64498: PPUSH
64499: CALL 68199 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64503: LD_VAR 0 1
64507: PUSH
64508: LD_INT 253
64510: EQUAL
64511: PUSH
64512: LD_VAR 0 2
64516: PPUSH
64517: CALL_OW 257
64521: PUSH
64522: LD_INT 5
64524: EQUAL
64525: AND
64526: IFFALSE 64547
// ComBinocular ( unit , x , y ) ;
64528: LD_VAR 0 2
64532: PPUSH
64533: LD_VAR 0 4
64537: PPUSH
64538: LD_VAR 0 5
64542: PPUSH
64543: CALL 68568 0 3
// if selectedUnit then
64547: LD_VAR 0 3
64551: IFFALSE 64607
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64553: LD_VAR 0 1
64557: PUSH
64558: LD_INT 254
64560: EQUAL
64561: PUSH
64562: LD_VAR 0 2
64566: PPUSH
64567: CALL_OW 264
64571: PUSH
64572: LD_INT 99
64574: EQUAL
64575: AND
64576: PUSH
64577: LD_VAR 0 3
64581: PPUSH
64582: CALL_OW 263
64586: PUSH
64587: LD_INT 3
64589: EQUAL
64590: AND
64591: IFFALSE 64607
// HackDestroyVehicle ( unit , selectedUnit ) ;
64593: LD_VAR 0 2
64597: PPUSH
64598: LD_VAR 0 3
64602: PPUSH
64603: CALL 66871 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64607: LD_VAR 0 1
64611: PUSH
64612: LD_INT 255
64614: EQUAL
64615: PUSH
64616: LD_VAR 0 2
64620: PPUSH
64621: CALL_OW 264
64625: PUSH
64626: LD_INT 14
64628: PUSH
64629: LD_INT 53
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: IN
64636: AND
64637: PUSH
64638: LD_VAR 0 4
64642: PPUSH
64643: LD_VAR 0 5
64647: PPUSH
64648: CALL_OW 488
64652: AND
64653: IFFALSE 64677
// CutTreeXYR ( unit , x , y , 12 ) ;
64655: LD_VAR 0 2
64659: PPUSH
64660: LD_VAR 0 4
64664: PPUSH
64665: LD_VAR 0 5
64669: PPUSH
64670: LD_INT 12
64672: PPUSH
64673: CALL 64868 0 4
// if cmd = 256 then
64677: LD_VAR 0 1
64681: PUSH
64682: LD_INT 256
64684: EQUAL
64685: IFFALSE 64706
// SetFactoryWaypoint ( unit , x , y ) ;
64687: LD_VAR 0 2
64691: PPUSH
64692: LD_VAR 0 4
64696: PPUSH
64697: LD_VAR 0 5
64701: PPUSH
64702: CALL 62181 0 3
// if cmd = 257 then
64706: LD_VAR 0 1
64710: PUSH
64711: LD_INT 257
64713: EQUAL
64714: IFFALSE 64735
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64716: LD_VAR 0 2
64720: PPUSH
64721: LD_VAR 0 4
64725: PPUSH
64726: LD_VAR 0 5
64730: PPUSH
64731: CALL 62671 0 3
// if cmd = 258 then
64735: LD_VAR 0 1
64739: PUSH
64740: LD_INT 258
64742: EQUAL
64743: IFFALSE 64767
// BurnTreeXYR ( unit , x , y , 8 ) ;
64745: LD_VAR 0 2
64749: PPUSH
64750: LD_VAR 0 4
64754: PPUSH
64755: LD_VAR 0 5
64759: PPUSH
64760: LD_INT 8
64762: PPUSH
64763: CALL 65262 0 4
// end ;
64767: LD_VAR 0 6
64771: RET
// export function ComRadiation ( un ) ; var eff ; begin
64772: LD_INT 0
64774: PPUSH
64775: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
64776: LD_VAR 0 1
64780: PPUSH
64781: CALL_OW 264
64785: PUSH
64786: LD_INT 91
64788: NONEQUAL
64789: IFFALSE 64793
// exit ;
64791: GO 64863
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64793: LD_INT 68
64795: PPUSH
64796: LD_VAR 0 1
64800: PPUSH
64801: CALL_OW 255
64805: PPUSH
64806: CALL_OW 321
64810: PUSH
64811: LD_INT 2
64813: EQUAL
64814: IFFALSE 64826
// eff := 70 else
64816: LD_ADDR_VAR 0 3
64820: PUSH
64821: LD_INT 70
64823: ST_TO_ADDR
64824: GO 64834
// eff := 30 ;
64826: LD_ADDR_VAR 0 3
64830: PUSH
64831: LD_INT 30
64833: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL_OW 250
64843: PPUSH
64844: LD_VAR 0 1
64848: PPUSH
64849: CALL_OW 251
64853: PPUSH
64854: LD_VAR 0 3
64858: PPUSH
64859: CALL_OW 495
// end ;
64863: LD_VAR 0 2
64867: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64868: LD_INT 0
64870: PPUSH
64871: PPUSH
64872: PPUSH
64873: PPUSH
64874: PPUSH
64875: PPUSH
64876: PPUSH
64877: PPUSH
64878: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
64879: LD_VAR 0 1
64883: PPUSH
64884: CALL_OW 302
64888: NOT
64889: PUSH
64890: LD_VAR 0 2
64894: PPUSH
64895: LD_VAR 0 3
64899: PPUSH
64900: CALL_OW 488
64904: NOT
64905: OR
64906: PUSH
64907: LD_VAR 0 4
64911: NOT
64912: OR
64913: IFFALSE 64917
// exit ;
64915: GO 65257
// list := [ ] ;
64917: LD_ADDR_VAR 0 13
64921: PUSH
64922: EMPTY
64923: ST_TO_ADDR
// if x - r < 0 then
64924: LD_VAR 0 2
64928: PUSH
64929: LD_VAR 0 4
64933: MINUS
64934: PUSH
64935: LD_INT 0
64937: LESS
64938: IFFALSE 64950
// min_x := 0 else
64940: LD_ADDR_VAR 0 7
64944: PUSH
64945: LD_INT 0
64947: ST_TO_ADDR
64948: GO 64966
// min_x := x - r ;
64950: LD_ADDR_VAR 0 7
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_VAR 0 4
64964: MINUS
64965: ST_TO_ADDR
// if y - r < 0 then
64966: LD_VAR 0 3
64970: PUSH
64971: LD_VAR 0 4
64975: MINUS
64976: PUSH
64977: LD_INT 0
64979: LESS
64980: IFFALSE 64992
// min_y := 0 else
64982: LD_ADDR_VAR 0 8
64986: PUSH
64987: LD_INT 0
64989: ST_TO_ADDR
64990: GO 65008
// min_y := y - r ;
64992: LD_ADDR_VAR 0 8
64996: PUSH
64997: LD_VAR 0 3
65001: PUSH
65002: LD_VAR 0 4
65006: MINUS
65007: ST_TO_ADDR
// max_x := x + r ;
65008: LD_ADDR_VAR 0 9
65012: PUSH
65013: LD_VAR 0 2
65017: PUSH
65018: LD_VAR 0 4
65022: PLUS
65023: ST_TO_ADDR
// max_y := y + r ;
65024: LD_ADDR_VAR 0 10
65028: PUSH
65029: LD_VAR 0 3
65033: PUSH
65034: LD_VAR 0 4
65038: PLUS
65039: ST_TO_ADDR
// for _x = min_x to max_x do
65040: LD_ADDR_VAR 0 11
65044: PUSH
65045: DOUBLE
65046: LD_VAR 0 7
65050: DEC
65051: ST_TO_ADDR
65052: LD_VAR 0 9
65056: PUSH
65057: FOR_TO
65058: IFFALSE 65175
// for _y = min_y to max_y do
65060: LD_ADDR_VAR 0 12
65064: PUSH
65065: DOUBLE
65066: LD_VAR 0 8
65070: DEC
65071: ST_TO_ADDR
65072: LD_VAR 0 10
65076: PUSH
65077: FOR_TO
65078: IFFALSE 65171
// begin if not ValidHex ( _x , _y ) then
65080: LD_VAR 0 11
65084: PPUSH
65085: LD_VAR 0 12
65089: PPUSH
65090: CALL_OW 488
65094: NOT
65095: IFFALSE 65099
// continue ;
65097: GO 65077
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65099: LD_VAR 0 11
65103: PPUSH
65104: LD_VAR 0 12
65108: PPUSH
65109: CALL_OW 351
65113: PUSH
65114: LD_VAR 0 11
65118: PPUSH
65119: LD_VAR 0 12
65123: PPUSH
65124: CALL_OW 554
65128: AND
65129: IFFALSE 65169
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65131: LD_ADDR_VAR 0 13
65135: PUSH
65136: LD_VAR 0 13
65140: PPUSH
65141: LD_VAR 0 13
65145: PUSH
65146: LD_INT 1
65148: PLUS
65149: PPUSH
65150: LD_VAR 0 11
65154: PUSH
65155: LD_VAR 0 12
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PPUSH
65164: CALL_OW 2
65168: ST_TO_ADDR
// end ;
65169: GO 65077
65171: POP
65172: POP
65173: GO 65057
65175: POP
65176: POP
// if not list then
65177: LD_VAR 0 13
65181: NOT
65182: IFFALSE 65186
// exit ;
65184: GO 65257
// for i in list do
65186: LD_ADDR_VAR 0 6
65190: PUSH
65191: LD_VAR 0 13
65195: PUSH
65196: FOR_IN
65197: IFFALSE 65255
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65199: LD_VAR 0 1
65203: PPUSH
65204: LD_STRING M
65206: PUSH
65207: LD_VAR 0 6
65211: PUSH
65212: LD_INT 1
65214: ARRAY
65215: PUSH
65216: LD_VAR 0 6
65220: PUSH
65221: LD_INT 2
65223: ARRAY
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: PPUSH
65249: CALL_OW 447
65253: GO 65196
65255: POP
65256: POP
// end ;
65257: LD_VAR 0 5
65261: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
65262: LD_INT 0
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
65270: PPUSH
65271: PPUSH
65272: PPUSH
65273: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
65274: LD_VAR 0 1
65278: PPUSH
65279: CALL_OW 302
65283: NOT
65284: PUSH
65285: LD_VAR 0 2
65289: PPUSH
65290: LD_VAR 0 3
65294: PPUSH
65295: CALL_OW 488
65299: NOT
65300: OR
65301: PUSH
65302: LD_VAR 0 4
65306: NOT
65307: OR
65308: IFFALSE 65312
// exit ;
65310: GO 65825
// list := [ ] ;
65312: LD_ADDR_VAR 0 13
65316: PUSH
65317: EMPTY
65318: ST_TO_ADDR
// if x - r < 0 then
65319: LD_VAR 0 2
65323: PUSH
65324: LD_VAR 0 4
65328: MINUS
65329: PUSH
65330: LD_INT 0
65332: LESS
65333: IFFALSE 65345
// min_x := 0 else
65335: LD_ADDR_VAR 0 7
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
65343: GO 65361
// min_x := x - r ;
65345: LD_ADDR_VAR 0 7
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: LD_VAR 0 4
65359: MINUS
65360: ST_TO_ADDR
// if y - r < 0 then
65361: LD_VAR 0 3
65365: PUSH
65366: LD_VAR 0 4
65370: MINUS
65371: PUSH
65372: LD_INT 0
65374: LESS
65375: IFFALSE 65387
// min_y := 0 else
65377: LD_ADDR_VAR 0 8
65381: PUSH
65382: LD_INT 0
65384: ST_TO_ADDR
65385: GO 65403
// min_y := y - r ;
65387: LD_ADDR_VAR 0 8
65391: PUSH
65392: LD_VAR 0 3
65396: PUSH
65397: LD_VAR 0 4
65401: MINUS
65402: ST_TO_ADDR
// max_x := x + r ;
65403: LD_ADDR_VAR 0 9
65407: PUSH
65408: LD_VAR 0 2
65412: PUSH
65413: LD_VAR 0 4
65417: PLUS
65418: ST_TO_ADDR
// max_y := y + r ;
65419: LD_ADDR_VAR 0 10
65423: PUSH
65424: LD_VAR 0 3
65428: PUSH
65429: LD_VAR 0 4
65433: PLUS
65434: ST_TO_ADDR
// for _x = min_x to max_x do
65435: LD_ADDR_VAR 0 11
65439: PUSH
65440: DOUBLE
65441: LD_VAR 0 7
65445: DEC
65446: ST_TO_ADDR
65447: LD_VAR 0 9
65451: PUSH
65452: FOR_TO
65453: IFFALSE 65570
// for _y = min_y to max_y do
65455: LD_ADDR_VAR 0 12
65459: PUSH
65460: DOUBLE
65461: LD_VAR 0 8
65465: DEC
65466: ST_TO_ADDR
65467: LD_VAR 0 10
65471: PUSH
65472: FOR_TO
65473: IFFALSE 65566
// begin if not ValidHex ( _x , _y ) then
65475: LD_VAR 0 11
65479: PPUSH
65480: LD_VAR 0 12
65484: PPUSH
65485: CALL_OW 488
65489: NOT
65490: IFFALSE 65494
// continue ;
65492: GO 65472
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65494: LD_VAR 0 11
65498: PPUSH
65499: LD_VAR 0 12
65503: PPUSH
65504: CALL_OW 351
65508: PUSH
65509: LD_VAR 0 11
65513: PPUSH
65514: LD_VAR 0 12
65518: PPUSH
65519: CALL_OW 554
65523: AND
65524: IFFALSE 65564
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65526: LD_ADDR_VAR 0 13
65530: PUSH
65531: LD_VAR 0 13
65535: PPUSH
65536: LD_VAR 0 13
65540: PUSH
65541: LD_INT 1
65543: PLUS
65544: PPUSH
65545: LD_VAR 0 11
65549: PUSH
65550: LD_VAR 0 12
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PPUSH
65559: CALL_OW 2
65563: ST_TO_ADDR
// end ;
65564: GO 65472
65566: POP
65567: POP
65568: GO 65452
65570: POP
65571: POP
// if not list then
65572: LD_VAR 0 13
65576: NOT
65577: IFFALSE 65581
// exit ;
65579: GO 65825
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
65581: LD_ADDR_VAR 0 13
65585: PUSH
65586: LD_VAR 0 1
65590: PPUSH
65591: LD_VAR 0 13
65595: PPUSH
65596: LD_INT 1
65598: PPUSH
65599: LD_INT 1
65601: PPUSH
65602: CALL 10263 0 4
65606: ST_TO_ADDR
// ComStop ( flame ) ;
65607: LD_VAR 0 1
65611: PPUSH
65612: CALL_OW 141
// for i in list do
65616: LD_ADDR_VAR 0 6
65620: PUSH
65621: LD_VAR 0 13
65625: PUSH
65626: FOR_IN
65627: IFFALSE 65658
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
65629: LD_VAR 0 1
65633: PPUSH
65634: LD_VAR 0 6
65638: PUSH
65639: LD_INT 1
65641: ARRAY
65642: PPUSH
65643: LD_VAR 0 6
65647: PUSH
65648: LD_INT 2
65650: ARRAY
65651: PPUSH
65652: CALL_OW 176
65656: GO 65626
65658: POP
65659: POP
// repeat wait ( 0 0$1 ) ;
65660: LD_INT 35
65662: PPUSH
65663: CALL_OW 67
// task := GetTaskList ( flame ) ;
65667: LD_ADDR_VAR 0 14
65671: PUSH
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 437
65681: ST_TO_ADDR
// if not task then
65682: LD_VAR 0 14
65686: NOT
65687: IFFALSE 65691
// exit ;
65689: GO 65825
// if task [ 1 ] [ 1 ] <> | then
65691: LD_VAR 0 14
65695: PUSH
65696: LD_INT 1
65698: ARRAY
65699: PUSH
65700: LD_INT 1
65702: ARRAY
65703: PUSH
65704: LD_STRING |
65706: NONEQUAL
65707: IFFALSE 65711
// exit ;
65709: GO 65825
// _x := task [ 1 ] [ 2 ] ;
65711: LD_ADDR_VAR 0 11
65715: PUSH
65716: LD_VAR 0 14
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: PUSH
65725: LD_INT 2
65727: ARRAY
65728: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
65729: LD_ADDR_VAR 0 12
65733: PUSH
65734: LD_VAR 0 14
65738: PUSH
65739: LD_INT 1
65741: ARRAY
65742: PUSH
65743: LD_INT 3
65745: ARRAY
65746: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
65747: LD_VAR 0 11
65751: PPUSH
65752: LD_VAR 0 12
65756: PPUSH
65757: CALL_OW 351
65761: NOT
65762: PUSH
65763: LD_VAR 0 11
65767: PPUSH
65768: LD_VAR 0 12
65772: PPUSH
65773: CALL_OW 554
65777: NOT
65778: OR
65779: IFFALSE 65813
// begin task := Delete ( task , 1 ) ;
65781: LD_ADDR_VAR 0 14
65785: PUSH
65786: LD_VAR 0 14
65790: PPUSH
65791: LD_INT 1
65793: PPUSH
65794: CALL_OW 3
65798: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
65799: LD_VAR 0 1
65803: PPUSH
65804: LD_VAR 0 14
65808: PPUSH
65809: CALL_OW 446
// end ; until not HasTask ( flame ) ;
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 314
65822: NOT
65823: IFFALSE 65660
// end ;
65825: LD_VAR 0 5
65829: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65830: LD_EXP 89
65834: NOT
65835: IFFALSE 65885
65837: GO 65839
65839: DISABLE
// begin initHack := true ;
65840: LD_ADDR_EXP 89
65844: PUSH
65845: LD_INT 1
65847: ST_TO_ADDR
// hackTanks := [ ] ;
65848: LD_ADDR_EXP 90
65852: PUSH
65853: EMPTY
65854: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65855: LD_ADDR_EXP 91
65859: PUSH
65860: EMPTY
65861: ST_TO_ADDR
// hackLimit := 3 ;
65862: LD_ADDR_EXP 92
65866: PUSH
65867: LD_INT 3
65869: ST_TO_ADDR
// hackDist := 12 ;
65870: LD_ADDR_EXP 93
65874: PUSH
65875: LD_INT 12
65877: ST_TO_ADDR
// hackCounter := [ ] ;
65878: LD_ADDR_EXP 94
65882: PUSH
65883: EMPTY
65884: ST_TO_ADDR
// end ;
65885: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65886: LD_EXP 89
65890: PUSH
65891: LD_INT 34
65893: PUSH
65894: LD_INT 99
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PPUSH
65901: CALL_OW 69
65905: AND
65906: IFFALSE 66159
65908: GO 65910
65910: DISABLE
65911: LD_INT 0
65913: PPUSH
65914: PPUSH
// begin enable ;
65915: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65916: LD_ADDR_VAR 0 1
65920: PUSH
65921: LD_INT 34
65923: PUSH
65924: LD_INT 99
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PPUSH
65931: CALL_OW 69
65935: PUSH
65936: FOR_IN
65937: IFFALSE 66157
// begin if not i in hackTanks then
65939: LD_VAR 0 1
65943: PUSH
65944: LD_EXP 90
65948: IN
65949: NOT
65950: IFFALSE 66033
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65952: LD_ADDR_EXP 90
65956: PUSH
65957: LD_EXP 90
65961: PPUSH
65962: LD_EXP 90
65966: PUSH
65967: LD_INT 1
65969: PLUS
65970: PPUSH
65971: LD_VAR 0 1
65975: PPUSH
65976: CALL_OW 1
65980: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65981: LD_ADDR_EXP 91
65985: PUSH
65986: LD_EXP 91
65990: PPUSH
65991: LD_EXP 91
65995: PUSH
65996: LD_INT 1
65998: PLUS
65999: PPUSH
66000: EMPTY
66001: PPUSH
66002: CALL_OW 1
66006: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66007: LD_ADDR_EXP 94
66011: PUSH
66012: LD_EXP 94
66016: PPUSH
66017: LD_EXP 94
66021: PUSH
66022: LD_INT 1
66024: PLUS
66025: PPUSH
66026: EMPTY
66027: PPUSH
66028: CALL_OW 1
66032: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66033: LD_VAR 0 1
66037: PPUSH
66038: CALL_OW 302
66042: NOT
66043: IFFALSE 66056
// begin HackUnlinkAll ( i ) ;
66045: LD_VAR 0 1
66049: PPUSH
66050: CALL 66162 0 1
// continue ;
66054: GO 65936
// end ; HackCheckCapturedStatus ( i ) ;
66056: LD_VAR 0 1
66060: PPUSH
66061: CALL 66605 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66065: LD_ADDR_VAR 0 2
66069: PUSH
66070: LD_INT 81
66072: PUSH
66073: LD_VAR 0 1
66077: PPUSH
66078: CALL_OW 255
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 33
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 91
66099: PUSH
66100: LD_VAR 0 1
66104: PUSH
66105: LD_EXP 93
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 50
66117: PUSH
66118: EMPTY
66119: LIST
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: PPUSH
66127: CALL_OW 69
66131: ST_TO_ADDR
// if not tmp then
66132: LD_VAR 0 2
66136: NOT
66137: IFFALSE 66141
// continue ;
66139: GO 65936
// HackLink ( i , tmp ) ;
66141: LD_VAR 0 1
66145: PPUSH
66146: LD_VAR 0 2
66150: PPUSH
66151: CALL 66298 0 2
// end ;
66155: GO 65936
66157: POP
66158: POP
// end ;
66159: PPOPN 2
66161: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66162: LD_INT 0
66164: PPUSH
66165: PPUSH
66166: PPUSH
// if not hack in hackTanks then
66167: LD_VAR 0 1
66171: PUSH
66172: LD_EXP 90
66176: IN
66177: NOT
66178: IFFALSE 66182
// exit ;
66180: GO 66293
// index := GetElementIndex ( hackTanks , hack ) ;
66182: LD_ADDR_VAR 0 4
66186: PUSH
66187: LD_EXP 90
66191: PPUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: CALL 9560 0 2
66201: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66202: LD_EXP 91
66206: PUSH
66207: LD_VAR 0 4
66211: ARRAY
66212: IFFALSE 66293
// begin for i in hackTanksCaptured [ index ] do
66214: LD_ADDR_VAR 0 3
66218: PUSH
66219: LD_EXP 91
66223: PUSH
66224: LD_VAR 0 4
66228: ARRAY
66229: PUSH
66230: FOR_IN
66231: IFFALSE 66257
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66233: LD_VAR 0 3
66237: PUSH
66238: LD_INT 1
66240: ARRAY
66241: PPUSH
66242: LD_VAR 0 3
66246: PUSH
66247: LD_INT 2
66249: ARRAY
66250: PPUSH
66251: CALL_OW 235
66255: GO 66230
66257: POP
66258: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66259: LD_ADDR_EXP 91
66263: PUSH
66264: LD_EXP 91
66268: PPUSH
66269: LD_VAR 0 4
66273: PPUSH
66274: EMPTY
66275: PPUSH
66276: CALL_OW 1
66280: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66281: LD_VAR 0 1
66285: PPUSH
66286: LD_INT 0
66288: PPUSH
66289: CALL_OW 505
// end ; end ;
66293: LD_VAR 0 2
66297: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66298: LD_INT 0
66300: PPUSH
66301: PPUSH
66302: PPUSH
// if not hack in hackTanks or not vehicles then
66303: LD_VAR 0 1
66307: PUSH
66308: LD_EXP 90
66312: IN
66313: NOT
66314: PUSH
66315: LD_VAR 0 2
66319: NOT
66320: OR
66321: IFFALSE 66325
// exit ;
66323: GO 66600
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66325: LD_ADDR_VAR 0 2
66329: PUSH
66330: LD_VAR 0 1
66334: PPUSH
66335: LD_VAR 0 2
66339: PPUSH
66340: LD_INT 1
66342: PPUSH
66343: LD_INT 1
66345: PPUSH
66346: CALL 10210 0 4
66350: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66351: LD_ADDR_VAR 0 5
66355: PUSH
66356: LD_EXP 90
66360: PPUSH
66361: LD_VAR 0 1
66365: PPUSH
66366: CALL 9560 0 2
66370: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66371: LD_EXP 91
66375: PUSH
66376: LD_VAR 0 5
66380: ARRAY
66381: PUSH
66382: LD_EXP 92
66386: LESS
66387: IFFALSE 66576
// begin for i := 1 to vehicles do
66389: LD_ADDR_VAR 0 4
66393: PUSH
66394: DOUBLE
66395: LD_INT 1
66397: DEC
66398: ST_TO_ADDR
66399: LD_VAR 0 2
66403: PUSH
66404: FOR_TO
66405: IFFALSE 66574
// begin if hackTanksCaptured [ index ] = hackLimit then
66407: LD_EXP 91
66411: PUSH
66412: LD_VAR 0 5
66416: ARRAY
66417: PUSH
66418: LD_EXP 92
66422: EQUAL
66423: IFFALSE 66427
// break ;
66425: GO 66574
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66427: LD_ADDR_EXP 94
66431: PUSH
66432: LD_EXP 94
66436: PPUSH
66437: LD_VAR 0 5
66441: PPUSH
66442: LD_EXP 94
66446: PUSH
66447: LD_VAR 0 5
66451: ARRAY
66452: PUSH
66453: LD_INT 1
66455: PLUS
66456: PPUSH
66457: CALL_OW 1
66461: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66462: LD_ADDR_EXP 91
66466: PUSH
66467: LD_EXP 91
66471: PPUSH
66472: LD_VAR 0 5
66476: PUSH
66477: LD_EXP 91
66481: PUSH
66482: LD_VAR 0 5
66486: ARRAY
66487: PUSH
66488: LD_INT 1
66490: PLUS
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PPUSH
66496: LD_VAR 0 2
66500: PUSH
66501: LD_VAR 0 4
66505: ARRAY
66506: PUSH
66507: LD_VAR 0 2
66511: PUSH
66512: LD_VAR 0 4
66516: ARRAY
66517: PPUSH
66518: CALL_OW 255
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PPUSH
66527: CALL 9775 0 3
66531: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66532: LD_VAR 0 2
66536: PUSH
66537: LD_VAR 0 4
66541: ARRAY
66542: PPUSH
66543: LD_VAR 0 1
66547: PPUSH
66548: CALL_OW 255
66552: PPUSH
66553: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66557: LD_VAR 0 2
66561: PUSH
66562: LD_VAR 0 4
66566: ARRAY
66567: PPUSH
66568: CALL_OW 141
// end ;
66572: GO 66404
66574: POP
66575: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66576: LD_VAR 0 1
66580: PPUSH
66581: LD_EXP 91
66585: PUSH
66586: LD_VAR 0 5
66590: ARRAY
66591: PUSH
66592: LD_INT 0
66594: PLUS
66595: PPUSH
66596: CALL_OW 505
// end ;
66600: LD_VAR 0 3
66604: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66605: LD_INT 0
66607: PPUSH
66608: PPUSH
66609: PPUSH
66610: PPUSH
// if not hack in hackTanks then
66611: LD_VAR 0 1
66615: PUSH
66616: LD_EXP 90
66620: IN
66621: NOT
66622: IFFALSE 66626
// exit ;
66624: GO 66866
// index := GetElementIndex ( hackTanks , hack ) ;
66626: LD_ADDR_VAR 0 4
66630: PUSH
66631: LD_EXP 90
66635: PPUSH
66636: LD_VAR 0 1
66640: PPUSH
66641: CALL 9560 0 2
66645: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66646: LD_ADDR_VAR 0 3
66650: PUSH
66651: DOUBLE
66652: LD_EXP 91
66656: PUSH
66657: LD_VAR 0 4
66661: ARRAY
66662: INC
66663: ST_TO_ADDR
66664: LD_INT 1
66666: PUSH
66667: FOR_DOWNTO
66668: IFFALSE 66840
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66670: LD_ADDR_VAR 0 5
66674: PUSH
66675: LD_EXP 91
66679: PUSH
66680: LD_VAR 0 4
66684: ARRAY
66685: PUSH
66686: LD_VAR 0 3
66690: ARRAY
66691: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66692: LD_VAR 0 5
66696: PUSH
66697: LD_INT 1
66699: ARRAY
66700: PPUSH
66701: CALL_OW 302
66705: NOT
66706: PUSH
66707: LD_VAR 0 5
66711: PUSH
66712: LD_INT 1
66714: ARRAY
66715: PPUSH
66716: CALL_OW 255
66720: PUSH
66721: LD_VAR 0 1
66725: PPUSH
66726: CALL_OW 255
66730: NONEQUAL
66731: OR
66732: IFFALSE 66838
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66734: LD_VAR 0 5
66738: PUSH
66739: LD_INT 1
66741: ARRAY
66742: PPUSH
66743: CALL_OW 305
66747: PUSH
66748: LD_VAR 0 5
66752: PUSH
66753: LD_INT 1
66755: ARRAY
66756: PPUSH
66757: CALL_OW 255
66761: PUSH
66762: LD_VAR 0 1
66766: PPUSH
66767: CALL_OW 255
66771: EQUAL
66772: AND
66773: IFFALSE 66797
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66775: LD_VAR 0 5
66779: PUSH
66780: LD_INT 1
66782: ARRAY
66783: PPUSH
66784: LD_VAR 0 5
66788: PUSH
66789: LD_INT 2
66791: ARRAY
66792: PPUSH
66793: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66797: LD_ADDR_EXP 91
66801: PUSH
66802: LD_EXP 91
66806: PPUSH
66807: LD_VAR 0 4
66811: PPUSH
66812: LD_EXP 91
66816: PUSH
66817: LD_VAR 0 4
66821: ARRAY
66822: PPUSH
66823: LD_VAR 0 3
66827: PPUSH
66828: CALL_OW 3
66832: PPUSH
66833: CALL_OW 1
66837: ST_TO_ADDR
// end ; end ;
66838: GO 66667
66840: POP
66841: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66842: LD_VAR 0 1
66846: PPUSH
66847: LD_EXP 91
66851: PUSH
66852: LD_VAR 0 4
66856: ARRAY
66857: PUSH
66858: LD_INT 0
66860: PLUS
66861: PPUSH
66862: CALL_OW 505
// end ;
66866: LD_VAR 0 2
66870: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66871: LD_INT 0
66873: PPUSH
66874: PPUSH
66875: PPUSH
66876: PPUSH
// if not hack in hackTanks then
66877: LD_VAR 0 1
66881: PUSH
66882: LD_EXP 90
66886: IN
66887: NOT
66888: IFFALSE 66892
// exit ;
66890: GO 66977
// index := GetElementIndex ( hackTanks , hack ) ;
66892: LD_ADDR_VAR 0 5
66896: PUSH
66897: LD_EXP 90
66901: PPUSH
66902: LD_VAR 0 1
66906: PPUSH
66907: CALL 9560 0 2
66911: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66912: LD_ADDR_VAR 0 4
66916: PUSH
66917: DOUBLE
66918: LD_INT 1
66920: DEC
66921: ST_TO_ADDR
66922: LD_EXP 91
66926: PUSH
66927: LD_VAR 0 5
66931: ARRAY
66932: PUSH
66933: FOR_TO
66934: IFFALSE 66975
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66936: LD_EXP 91
66940: PUSH
66941: LD_VAR 0 5
66945: ARRAY
66946: PUSH
66947: LD_VAR 0 4
66951: ARRAY
66952: PUSH
66953: LD_INT 1
66955: ARRAY
66956: PUSH
66957: LD_VAR 0 2
66961: EQUAL
66962: IFFALSE 66973
// KillUnit ( vehicle ) ;
66964: LD_VAR 0 2
66968: PPUSH
66969: CALL_OW 66
66973: GO 66933
66975: POP
66976: POP
// end ;
66977: LD_VAR 0 3
66981: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66982: LD_EXP 95
66986: NOT
66987: IFFALSE 67022
66989: GO 66991
66991: DISABLE
// begin initMiner := true ;
66992: LD_ADDR_EXP 95
66996: PUSH
66997: LD_INT 1
66999: ST_TO_ADDR
// minersList := [ ] ;
67000: LD_ADDR_EXP 96
67004: PUSH
67005: EMPTY
67006: ST_TO_ADDR
// minerMinesList := [ ] ;
67007: LD_ADDR_EXP 97
67011: PUSH
67012: EMPTY
67013: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67014: LD_ADDR_EXP 98
67018: PUSH
67019: LD_INT 5
67021: ST_TO_ADDR
// end ;
67022: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67023: LD_EXP 95
67027: PUSH
67028: LD_INT 34
67030: PUSH
67031: LD_INT 81
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PPUSH
67038: CALL_OW 69
67042: AND
67043: IFFALSE 67504
67045: GO 67047
67047: DISABLE
67048: LD_INT 0
67050: PPUSH
67051: PPUSH
67052: PPUSH
67053: PPUSH
// begin enable ;
67054: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67055: LD_ADDR_VAR 0 1
67059: PUSH
67060: LD_INT 34
67062: PUSH
67063: LD_INT 81
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PPUSH
67070: CALL_OW 69
67074: PUSH
67075: FOR_IN
67076: IFFALSE 67148
// begin if not i in minersList then
67078: LD_VAR 0 1
67082: PUSH
67083: LD_EXP 96
67087: IN
67088: NOT
67089: IFFALSE 67146
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67091: LD_ADDR_EXP 96
67095: PUSH
67096: LD_EXP 96
67100: PPUSH
67101: LD_EXP 96
67105: PUSH
67106: LD_INT 1
67108: PLUS
67109: PPUSH
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 1
67119: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67120: LD_ADDR_EXP 97
67124: PUSH
67125: LD_EXP 97
67129: PPUSH
67130: LD_EXP 97
67134: PUSH
67135: LD_INT 1
67137: PLUS
67138: PPUSH
67139: EMPTY
67140: PPUSH
67141: CALL_OW 1
67145: ST_TO_ADDR
// end end ;
67146: GO 67075
67148: POP
67149: POP
// for i := minerMinesList downto 1 do
67150: LD_ADDR_VAR 0 1
67154: PUSH
67155: DOUBLE
67156: LD_EXP 97
67160: INC
67161: ST_TO_ADDR
67162: LD_INT 1
67164: PUSH
67165: FOR_DOWNTO
67166: IFFALSE 67502
// begin if IsLive ( minersList [ i ] ) then
67168: LD_EXP 96
67172: PUSH
67173: LD_VAR 0 1
67177: ARRAY
67178: PPUSH
67179: CALL_OW 300
67183: IFFALSE 67211
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67185: LD_EXP 96
67189: PUSH
67190: LD_VAR 0 1
67194: ARRAY
67195: PPUSH
67196: LD_EXP 97
67200: PUSH
67201: LD_VAR 0 1
67205: ARRAY
67206: PPUSH
67207: CALL_OW 505
// if not minerMinesList [ i ] then
67211: LD_EXP 97
67215: PUSH
67216: LD_VAR 0 1
67220: ARRAY
67221: NOT
67222: IFFALSE 67226
// continue ;
67224: GO 67165
// for j := minerMinesList [ i ] downto 1 do
67226: LD_ADDR_VAR 0 2
67230: PUSH
67231: DOUBLE
67232: LD_EXP 97
67236: PUSH
67237: LD_VAR 0 1
67241: ARRAY
67242: INC
67243: ST_TO_ADDR
67244: LD_INT 1
67246: PUSH
67247: FOR_DOWNTO
67248: IFFALSE 67498
// begin side := GetSide ( minersList [ i ] ) ;
67250: LD_ADDR_VAR 0 3
67254: PUSH
67255: LD_EXP 96
67259: PUSH
67260: LD_VAR 0 1
67264: ARRAY
67265: PPUSH
67266: CALL_OW 255
67270: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67271: LD_ADDR_VAR 0 4
67275: PUSH
67276: LD_EXP 97
67280: PUSH
67281: LD_VAR 0 1
67285: ARRAY
67286: PUSH
67287: LD_VAR 0 2
67291: ARRAY
67292: PUSH
67293: LD_INT 1
67295: ARRAY
67296: PPUSH
67297: LD_EXP 97
67301: PUSH
67302: LD_VAR 0 1
67306: ARRAY
67307: PUSH
67308: LD_VAR 0 2
67312: ARRAY
67313: PUSH
67314: LD_INT 2
67316: ARRAY
67317: PPUSH
67318: CALL_OW 428
67322: ST_TO_ADDR
// if not tmp then
67323: LD_VAR 0 4
67327: NOT
67328: IFFALSE 67332
// continue ;
67330: GO 67247
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67332: LD_VAR 0 4
67336: PUSH
67337: LD_INT 81
67339: PUSH
67340: LD_VAR 0 3
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PPUSH
67349: CALL_OW 69
67353: IN
67354: PUSH
67355: LD_EXP 97
67359: PUSH
67360: LD_VAR 0 1
67364: ARRAY
67365: PUSH
67366: LD_VAR 0 2
67370: ARRAY
67371: PUSH
67372: LD_INT 1
67374: ARRAY
67375: PPUSH
67376: LD_EXP 97
67380: PUSH
67381: LD_VAR 0 1
67385: ARRAY
67386: PUSH
67387: LD_VAR 0 2
67391: ARRAY
67392: PUSH
67393: LD_INT 2
67395: ARRAY
67396: PPUSH
67397: CALL_OW 458
67401: AND
67402: IFFALSE 67496
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67404: LD_EXP 97
67408: PUSH
67409: LD_VAR 0 1
67413: ARRAY
67414: PUSH
67415: LD_VAR 0 2
67419: ARRAY
67420: PUSH
67421: LD_INT 1
67423: ARRAY
67424: PPUSH
67425: LD_EXP 97
67429: PUSH
67430: LD_VAR 0 1
67434: ARRAY
67435: PUSH
67436: LD_VAR 0 2
67440: ARRAY
67441: PUSH
67442: LD_INT 2
67444: ARRAY
67445: PPUSH
67446: LD_VAR 0 3
67450: PPUSH
67451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67455: LD_ADDR_EXP 97
67459: PUSH
67460: LD_EXP 97
67464: PPUSH
67465: LD_VAR 0 1
67469: PPUSH
67470: LD_EXP 97
67474: PUSH
67475: LD_VAR 0 1
67479: ARRAY
67480: PPUSH
67481: LD_VAR 0 2
67485: PPUSH
67486: CALL_OW 3
67490: PPUSH
67491: CALL_OW 1
67495: ST_TO_ADDR
// end ; end ;
67496: GO 67247
67498: POP
67499: POP
// end ;
67500: GO 67165
67502: POP
67503: POP
// end ;
67504: PPOPN 4
67506: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
// result := false ;
67511: LD_ADDR_VAR 0 4
67515: PUSH
67516: LD_INT 0
67518: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67519: LD_VAR 0 1
67523: PPUSH
67524: CALL_OW 264
67528: PUSH
67529: LD_INT 81
67531: EQUAL
67532: NOT
67533: IFFALSE 67537
// exit ;
67535: GO 67777
// index := GetElementIndex ( minersList , unit ) ;
67537: LD_ADDR_VAR 0 5
67541: PUSH
67542: LD_EXP 96
67546: PPUSH
67547: LD_VAR 0 1
67551: PPUSH
67552: CALL 9560 0 2
67556: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67557: LD_EXP 97
67561: PUSH
67562: LD_VAR 0 5
67566: ARRAY
67567: PUSH
67568: LD_EXP 98
67572: GREATEREQUAL
67573: IFFALSE 67577
// exit ;
67575: GO 67777
// ComMoveXY ( unit , x , y ) ;
67577: LD_VAR 0 1
67581: PPUSH
67582: LD_VAR 0 2
67586: PPUSH
67587: LD_VAR 0 3
67591: PPUSH
67592: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67596: LD_INT 35
67598: PPUSH
67599: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67603: LD_VAR 0 1
67607: PPUSH
67608: LD_VAR 0 2
67612: PPUSH
67613: LD_VAR 0 3
67617: PPUSH
67618: CALL 41321 0 3
67622: NOT
67623: PUSH
67624: LD_VAR 0 1
67628: PPUSH
67629: CALL_OW 314
67633: AND
67634: IFFALSE 67638
// exit ;
67636: GO 67777
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67638: LD_VAR 0 2
67642: PPUSH
67643: LD_VAR 0 3
67647: PPUSH
67648: CALL_OW 428
67652: PUSH
67653: LD_VAR 0 1
67657: EQUAL
67658: PUSH
67659: LD_VAR 0 1
67663: PPUSH
67664: CALL_OW 314
67668: NOT
67669: AND
67670: IFFALSE 67596
// PlaySoundXY ( x , y , PlantMine ) ;
67672: LD_VAR 0 2
67676: PPUSH
67677: LD_VAR 0 3
67681: PPUSH
67682: LD_STRING PlantMine
67684: PPUSH
67685: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67689: LD_VAR 0 2
67693: PPUSH
67694: LD_VAR 0 3
67698: PPUSH
67699: LD_VAR 0 1
67703: PPUSH
67704: CALL_OW 255
67708: PPUSH
67709: LD_INT 0
67711: PPUSH
67712: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67716: LD_ADDR_EXP 97
67720: PUSH
67721: LD_EXP 97
67725: PPUSH
67726: LD_VAR 0 5
67730: PUSH
67731: LD_EXP 97
67735: PUSH
67736: LD_VAR 0 5
67740: ARRAY
67741: PUSH
67742: LD_INT 1
67744: PLUS
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PPUSH
67750: LD_VAR 0 2
67754: PUSH
67755: LD_VAR 0 3
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PPUSH
67764: CALL 9775 0 3
67768: ST_TO_ADDR
// result := true ;
67769: LD_ADDR_VAR 0 4
67773: PUSH
67774: LD_INT 1
67776: ST_TO_ADDR
// end ;
67777: LD_VAR 0 4
67781: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67782: LD_INT 0
67784: PPUSH
67785: PPUSH
67786: PPUSH
// if not unit in minersList then
67787: LD_VAR 0 1
67791: PUSH
67792: LD_EXP 96
67796: IN
67797: NOT
67798: IFFALSE 67802
// exit ;
67800: GO 68194
// index := GetElementIndex ( minersList , unit ) ;
67802: LD_ADDR_VAR 0 6
67806: PUSH
67807: LD_EXP 96
67811: PPUSH
67812: LD_VAR 0 1
67816: PPUSH
67817: CALL 9560 0 2
67821: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67822: LD_ADDR_VAR 0 5
67826: PUSH
67827: DOUBLE
67828: LD_EXP 97
67832: PUSH
67833: LD_VAR 0 6
67837: ARRAY
67838: INC
67839: ST_TO_ADDR
67840: LD_INT 1
67842: PUSH
67843: FOR_DOWNTO
67844: IFFALSE 68005
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67846: LD_EXP 97
67850: PUSH
67851: LD_VAR 0 6
67855: ARRAY
67856: PUSH
67857: LD_VAR 0 5
67861: ARRAY
67862: PUSH
67863: LD_INT 1
67865: ARRAY
67866: PUSH
67867: LD_VAR 0 2
67871: EQUAL
67872: PUSH
67873: LD_EXP 97
67877: PUSH
67878: LD_VAR 0 6
67882: ARRAY
67883: PUSH
67884: LD_VAR 0 5
67888: ARRAY
67889: PUSH
67890: LD_INT 2
67892: ARRAY
67893: PUSH
67894: LD_VAR 0 3
67898: EQUAL
67899: AND
67900: IFFALSE 68003
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67902: LD_EXP 97
67906: PUSH
67907: LD_VAR 0 6
67911: ARRAY
67912: PUSH
67913: LD_VAR 0 5
67917: ARRAY
67918: PUSH
67919: LD_INT 1
67921: ARRAY
67922: PPUSH
67923: LD_EXP 97
67927: PUSH
67928: LD_VAR 0 6
67932: ARRAY
67933: PUSH
67934: LD_VAR 0 5
67938: ARRAY
67939: PUSH
67940: LD_INT 2
67942: ARRAY
67943: PPUSH
67944: LD_VAR 0 1
67948: PPUSH
67949: CALL_OW 255
67953: PPUSH
67954: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67958: LD_ADDR_EXP 97
67962: PUSH
67963: LD_EXP 97
67967: PPUSH
67968: LD_VAR 0 6
67972: PPUSH
67973: LD_EXP 97
67977: PUSH
67978: LD_VAR 0 6
67982: ARRAY
67983: PPUSH
67984: LD_VAR 0 5
67988: PPUSH
67989: CALL_OW 3
67993: PPUSH
67994: CALL_OW 1
67998: ST_TO_ADDR
// exit ;
67999: POP
68000: POP
68001: GO 68194
// end ; end ;
68003: GO 67843
68005: POP
68006: POP
// for i := minerMinesList [ index ] downto 1 do
68007: LD_ADDR_VAR 0 5
68011: PUSH
68012: DOUBLE
68013: LD_EXP 97
68017: PUSH
68018: LD_VAR 0 6
68022: ARRAY
68023: INC
68024: ST_TO_ADDR
68025: LD_INT 1
68027: PUSH
68028: FOR_DOWNTO
68029: IFFALSE 68192
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68031: LD_EXP 97
68035: PUSH
68036: LD_VAR 0 6
68040: ARRAY
68041: PUSH
68042: LD_VAR 0 5
68046: ARRAY
68047: PUSH
68048: LD_INT 1
68050: ARRAY
68051: PPUSH
68052: LD_EXP 97
68056: PUSH
68057: LD_VAR 0 6
68061: ARRAY
68062: PUSH
68063: LD_VAR 0 5
68067: ARRAY
68068: PUSH
68069: LD_INT 2
68071: ARRAY
68072: PPUSH
68073: LD_VAR 0 2
68077: PPUSH
68078: LD_VAR 0 3
68082: PPUSH
68083: CALL_OW 298
68087: PUSH
68088: LD_INT 6
68090: LESS
68091: IFFALSE 68190
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68093: LD_EXP 97
68097: PUSH
68098: LD_VAR 0 6
68102: ARRAY
68103: PUSH
68104: LD_VAR 0 5
68108: ARRAY
68109: PUSH
68110: LD_INT 1
68112: ARRAY
68113: PPUSH
68114: LD_EXP 97
68118: PUSH
68119: LD_VAR 0 6
68123: ARRAY
68124: PUSH
68125: LD_VAR 0 5
68129: ARRAY
68130: PUSH
68131: LD_INT 2
68133: ARRAY
68134: PPUSH
68135: LD_VAR 0 1
68139: PPUSH
68140: CALL_OW 255
68144: PPUSH
68145: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68149: LD_ADDR_EXP 97
68153: PUSH
68154: LD_EXP 97
68158: PPUSH
68159: LD_VAR 0 6
68163: PPUSH
68164: LD_EXP 97
68168: PUSH
68169: LD_VAR 0 6
68173: ARRAY
68174: PPUSH
68175: LD_VAR 0 5
68179: PPUSH
68180: CALL_OW 3
68184: PPUSH
68185: CALL_OW 1
68189: ST_TO_ADDR
// end ; end ;
68190: GO 68028
68192: POP
68193: POP
// end ;
68194: LD_VAR 0 4
68198: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68199: LD_INT 0
68201: PPUSH
68202: PPUSH
68203: PPUSH
68204: PPUSH
68205: PPUSH
68206: PPUSH
68207: PPUSH
68208: PPUSH
68209: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68210: LD_VAR 0 1
68214: PPUSH
68215: CALL_OW 264
68219: PUSH
68220: LD_INT 81
68222: EQUAL
68223: NOT
68224: PUSH
68225: LD_VAR 0 1
68229: PUSH
68230: LD_EXP 96
68234: IN
68235: NOT
68236: OR
68237: IFFALSE 68241
// exit ;
68239: GO 68563
// index := GetElementIndex ( minersList , unit ) ;
68241: LD_ADDR_VAR 0 6
68245: PUSH
68246: LD_EXP 96
68250: PPUSH
68251: LD_VAR 0 1
68255: PPUSH
68256: CALL 9560 0 2
68260: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68261: LD_ADDR_VAR 0 8
68265: PUSH
68266: LD_EXP 98
68270: PUSH
68271: LD_EXP 97
68275: PUSH
68276: LD_VAR 0 6
68280: ARRAY
68281: MINUS
68282: ST_TO_ADDR
// if not minesFreeAmount then
68283: LD_VAR 0 8
68287: NOT
68288: IFFALSE 68292
// exit ;
68290: GO 68563
// tmp := [ ] ;
68292: LD_ADDR_VAR 0 7
68296: PUSH
68297: EMPTY
68298: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68299: LD_ADDR_VAR 0 5
68303: PUSH
68304: DOUBLE
68305: LD_INT 1
68307: DEC
68308: ST_TO_ADDR
68309: LD_VAR 0 8
68313: PUSH
68314: FOR_TO
68315: IFFALSE 68510
// begin _d := rand ( 0 , 5 ) ;
68317: LD_ADDR_VAR 0 11
68321: PUSH
68322: LD_INT 0
68324: PPUSH
68325: LD_INT 5
68327: PPUSH
68328: CALL_OW 12
68332: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68333: LD_ADDR_VAR 0 12
68337: PUSH
68338: LD_INT 2
68340: PPUSH
68341: LD_INT 6
68343: PPUSH
68344: CALL_OW 12
68348: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68349: LD_ADDR_VAR 0 9
68353: PUSH
68354: LD_VAR 0 2
68358: PPUSH
68359: LD_VAR 0 11
68363: PPUSH
68364: LD_VAR 0 12
68368: PPUSH
68369: CALL_OW 272
68373: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68374: LD_ADDR_VAR 0 10
68378: PUSH
68379: LD_VAR 0 3
68383: PPUSH
68384: LD_VAR 0 11
68388: PPUSH
68389: LD_VAR 0 12
68393: PPUSH
68394: CALL_OW 273
68398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68399: LD_VAR 0 9
68403: PPUSH
68404: LD_VAR 0 10
68408: PPUSH
68409: CALL_OW 488
68413: PUSH
68414: LD_VAR 0 9
68418: PUSH
68419: LD_VAR 0 10
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_VAR 0 7
68432: IN
68433: NOT
68434: AND
68435: PUSH
68436: LD_VAR 0 9
68440: PPUSH
68441: LD_VAR 0 10
68445: PPUSH
68446: CALL_OW 458
68450: NOT
68451: AND
68452: IFFALSE 68494
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68454: LD_ADDR_VAR 0 7
68458: PUSH
68459: LD_VAR 0 7
68463: PPUSH
68464: LD_VAR 0 7
68468: PUSH
68469: LD_INT 1
68471: PLUS
68472: PPUSH
68473: LD_VAR 0 9
68477: PUSH
68478: LD_VAR 0 10
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PPUSH
68487: CALL_OW 1
68491: ST_TO_ADDR
68492: GO 68508
// i := i - 1 ;
68494: LD_ADDR_VAR 0 5
68498: PUSH
68499: LD_VAR 0 5
68503: PUSH
68504: LD_INT 1
68506: MINUS
68507: ST_TO_ADDR
// end ;
68508: GO 68314
68510: POP
68511: POP
// for i in tmp do
68512: LD_ADDR_VAR 0 5
68516: PUSH
68517: LD_VAR 0 7
68521: PUSH
68522: FOR_IN
68523: IFFALSE 68561
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68525: LD_VAR 0 1
68529: PPUSH
68530: LD_VAR 0 5
68534: PUSH
68535: LD_INT 1
68537: ARRAY
68538: PPUSH
68539: LD_VAR 0 5
68543: PUSH
68544: LD_INT 2
68546: ARRAY
68547: PPUSH
68548: CALL 67507 0 3
68552: NOT
68553: IFFALSE 68559
// exit ;
68555: POP
68556: POP
68557: GO 68563
68559: GO 68522
68561: POP
68562: POP
// end ;
68563: LD_VAR 0 4
68567: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
68568: LD_INT 0
68570: PPUSH
68571: PPUSH
68572: PPUSH
68573: PPUSH
68574: PPUSH
68575: PPUSH
68576: PPUSH
68577: PPUSH
68578: PPUSH
// if GetClass ( unit ) <> class_sniper then
68579: LD_VAR 0 1
68583: PPUSH
68584: CALL_OW 257
68588: PUSH
68589: LD_INT 5
68591: NONEQUAL
68592: IFFALSE 68596
// exit ;
68594: GO 69062
// dist := 8 ;
68596: LD_ADDR_VAR 0 5
68600: PUSH
68601: LD_INT 8
68603: ST_TO_ADDR
// viewRange := 12 ;
68604: LD_ADDR_VAR 0 8
68608: PUSH
68609: LD_INT 12
68611: ST_TO_ADDR
// side := GetSide ( unit ) ;
68612: LD_ADDR_VAR 0 6
68616: PUSH
68617: LD_VAR 0 1
68621: PPUSH
68622: CALL_OW 255
68626: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68627: LD_INT 61
68629: PPUSH
68630: LD_VAR 0 6
68634: PPUSH
68635: CALL_OW 321
68639: PUSH
68640: LD_INT 2
68642: EQUAL
68643: IFFALSE 68653
// viewRange := 16 ;
68645: LD_ADDR_VAR 0 8
68649: PUSH
68650: LD_INT 16
68652: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68653: LD_VAR 0 1
68657: PPUSH
68658: LD_VAR 0 2
68662: PPUSH
68663: LD_VAR 0 3
68667: PPUSH
68668: CALL_OW 297
68672: PUSH
68673: LD_VAR 0 5
68677: GREATER
68678: IFFALSE 68757
// begin ComMoveXY ( unit , x , y ) ;
68680: LD_VAR 0 1
68684: PPUSH
68685: LD_VAR 0 2
68689: PPUSH
68690: LD_VAR 0 3
68694: PPUSH
68695: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68699: LD_INT 35
68701: PPUSH
68702: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68706: LD_VAR 0 1
68710: PPUSH
68711: LD_VAR 0 2
68715: PPUSH
68716: LD_VAR 0 3
68720: PPUSH
68721: CALL 41321 0 3
68725: NOT
68726: IFFALSE 68730
// exit ;
68728: GO 69062
// until GetDistUnitXY ( unit , x , y ) < dist ;
68730: LD_VAR 0 1
68734: PPUSH
68735: LD_VAR 0 2
68739: PPUSH
68740: LD_VAR 0 3
68744: PPUSH
68745: CALL_OW 297
68749: PUSH
68750: LD_VAR 0 5
68754: LESS
68755: IFFALSE 68699
// end ; ComTurnXY ( unit , x , y ) ;
68757: LD_VAR 0 1
68761: PPUSH
68762: LD_VAR 0 2
68766: PPUSH
68767: LD_VAR 0 3
68771: PPUSH
68772: CALL_OW 118
// repeat if Multiplayer then
68776: LD_OWVAR 4
68780: IFFALSE 68791
// wait ( 35 ) else
68782: LD_INT 35
68784: PPUSH
68785: CALL_OW 67
68789: GO 68798
// wait ( 5 ) ;
68791: LD_INT 5
68793: PPUSH
68794: CALL_OW 67
// _d := GetDir ( unit ) ;
68798: LD_ADDR_VAR 0 11
68802: PUSH
68803: LD_VAR 0 1
68807: PPUSH
68808: CALL_OW 254
68812: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
68813: LD_ADDR_VAR 0 7
68817: PUSH
68818: LD_VAR 0 1
68822: PPUSH
68823: CALL_OW 250
68827: PPUSH
68828: LD_VAR 0 1
68832: PPUSH
68833: CALL_OW 251
68837: PPUSH
68838: LD_VAR 0 2
68842: PPUSH
68843: LD_VAR 0 3
68847: PPUSH
68848: CALL 43929 0 4
68852: ST_TO_ADDR
// until dir = _d ;
68853: LD_VAR 0 7
68857: PUSH
68858: LD_VAR 0 11
68862: EQUAL
68863: IFFALSE 68776
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
68865: LD_ADDR_VAR 0 9
68869: PUSH
68870: LD_VAR 0 1
68874: PPUSH
68875: CALL_OW 250
68879: PPUSH
68880: LD_VAR 0 7
68884: PPUSH
68885: LD_VAR 0 5
68889: PPUSH
68890: CALL_OW 272
68894: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
68895: LD_ADDR_VAR 0 10
68899: PUSH
68900: LD_VAR 0 1
68904: PPUSH
68905: CALL_OW 251
68909: PPUSH
68910: LD_VAR 0 7
68914: PPUSH
68915: LD_VAR 0 5
68919: PPUSH
68920: CALL_OW 273
68924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68925: LD_VAR 0 9
68929: PPUSH
68930: LD_VAR 0 10
68934: PPUSH
68935: CALL_OW 488
68939: NOT
68940: IFFALSE 68944
// exit ;
68942: GO 69062
// ComAnimCustom ( unit , 1 ) ;
68944: LD_VAR 0 1
68948: PPUSH
68949: LD_INT 1
68951: PPUSH
68952: CALL_OW 592
// p := 0 ;
68956: LD_ADDR_VAR 0 12
68960: PUSH
68961: LD_INT 0
68963: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68964: LD_VAR 0 9
68968: PPUSH
68969: LD_VAR 0 10
68973: PPUSH
68974: LD_VAR 0 6
68978: PPUSH
68979: LD_VAR 0 8
68983: PPUSH
68984: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
68988: LD_INT 35
68990: PPUSH
68991: CALL_OW 67
// p := Inc ( p ) ;
68995: LD_ADDR_VAR 0 12
68999: PUSH
69000: LD_VAR 0 12
69004: PPUSH
69005: CALL 43885 0 1
69009: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
69010: LD_VAR 0 12
69014: PUSH
69015: LD_INT 3
69017: EQUAL
69018: PUSH
69019: LD_VAR 0 1
69023: PPUSH
69024: CALL_OW 302
69028: NOT
69029: OR
69030: PUSH
69031: LD_VAR 0 1
69035: PPUSH
69036: CALL_OW 301
69040: OR
69041: IFFALSE 68988
// RemoveSeeing ( _x , _y , side ) ;
69043: LD_VAR 0 9
69047: PPUSH
69048: LD_VAR 0 10
69052: PPUSH
69053: LD_VAR 0 6
69057: PPUSH
69058: CALL_OW 331
// end ;
69062: LD_VAR 0 4
69066: RET
