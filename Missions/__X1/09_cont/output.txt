// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42390 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42390 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42390 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6803 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9541 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9541 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38671 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38779 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 38960 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 38880 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42390 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42390 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42390 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 62636 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 62756 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42390 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42362 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42362 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 57
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: IFFALSE 2485
// DialogueOn ;
2529: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2533: LD_EXP 18
2537: PPUSH
2538: LD_STRING DL-Intro-18
2540: PPUSH
2541: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2545: LD_EXP 18
2549: PPUSH
2550: LD_STRING DL-Intro-19
2552: PPUSH
2553: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2557: LD_EXP 18
2561: PPUSH
2562: LD_STRING DL-Intro-20
2564: PPUSH
2565: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2569: LD_EXP 20
2573: PPUSH
2574: LD_STRING DLt-Intro-21
2576: PPUSH
2577: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2581: LD_EXP 20
2585: PPUSH
2586: LD_STRING DLt-Intro-22
2588: PPUSH
2589: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2593: LD_EXP 20
2597: PPUSH
2598: LD_STRING DLt-Intro-23
2600: PPUSH
2601: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2605: LD_EXP 18
2609: PPUSH
2610: LD_STRING DL-Intro-24
2612: PPUSH
2613: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2617: LD_EXP 20
2621: PPUSH
2622: LD_STRING DLt-Intro-25
2624: PPUSH
2625: CALL_OW 88
// DialogueOff ;
2629: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2633: LD_STRING M2
2635: PPUSH
2636: CALL_OW 337
// Query ( Prepare ) ;
2640: LD_STRING Prepare
2642: PPUSH
2643: CALL_OW 97
// SaveForQuickRestart ;
2647: CALL_OW 22
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2656: LD_INT 22
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 30
2668: PUSH
2669: LD_INT 15
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: IFFALSE 2701
2686: GO 2688
2688: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2689: LD_EXP 18
2693: PPUSH
2694: LD_STRING DL-Cam-1
2696: PPUSH
2697: CALL_OW 88
2701: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2702: LD_OWVAR 1
2706: PUSH
2707: LD_EXP 4
2711: PUSH
2712: LD_INT 2
2714: DIV
2715: GREATEREQUAL
2716: IFFALSE 2741
2718: GO 2720
2720: DISABLE
// begin DialogueOn ;
2721: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2725: LD_EXP 18
2729: PPUSH
2730: LD_STRING DL-Faster-1
2732: PPUSH
2733: CALL_OW 88
// DialogueOff ;
2737: CALL_OW 7
// end ;
2741: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2742: LD_OWVAR 1
2746: PUSH
2747: LD_EXP 4
2751: PUSH
2752: LD_INT 2
2754: DIV
2755: PUSH
2756: LD_INT 10500
2758: PLUS
2759: GREATEREQUAL
2760: IFFALSE 2785
2762: GO 2764
2764: DISABLE
// begin DialogueOn ;
2765: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2769: LD_EXP 18
2773: PPUSH
2774: LD_STRING DL-Faster-2
2776: PPUSH
2777: CALL_OW 88
// DialogueOff ;
2781: CALL_OW 7
// end ;
2785: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2786: LD_INT 22
2788: PUSH
2789: LD_INT 2
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 57
2801: PUSH
2802: EMPTY
2803: LIST
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: LD_INT 30
2814: PUSH
2815: LD_INT 6
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 8
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 69
2857: PUSH
2858: LD_INT 22
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 3
2870: PUSH
2871: LD_INT 57
2873: PUSH
2874: EMPTY
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 3
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: AND
2901: PUSH
2902: LD_INT 22
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: LD_INT 57
2917: PUSH
2918: EMPTY
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 32
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: PUSH
2945: LD_INT 3
2947: GREATEREQUAL
2948: AND
2949: PUSH
2950: LD_INT 22
2952: PUSH
2953: LD_INT 2
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PUSH
2960: LD_INT 3
2962: PUSH
2963: LD_INT 57
2965: PUSH
2966: EMPTY
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 30
2975: PUSH
2976: LD_INT 5
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: AND
2993: PUSH
2994: LD_INT 22
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PUSH
3004: LD_INT 3
3006: PUSH
3007: LD_INT 57
3009: PUSH
3010: EMPTY
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 30
3019: PUSH
3020: LD_INT 30
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: PPUSH
3032: CALL_OW 69
3036: AND
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 2
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: LD_INT 57
3053: PUSH
3054: EMPTY
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: LD_INT 30
3066: PUSH
3067: LD_INT 26
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 30
3076: PUSH
3077: LD_INT 28
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 69
3098: AND
3099: IFFALSE 3136
3101: GO 3103
3103: DISABLE
// begin if tick <= 10 10$00 then
3104: LD_OWVAR 1
3108: PUSH
3109: LD_INT 21000
3111: LESSEQUAL
3112: IFFALSE 3121
// SetAchievement ( ACH_BOB ) ;
3114: LD_STRING ACH_BOB
3116: PPUSH
3117: CALL_OW 543
// baseDone := true ;
3121: LD_ADDR_EXP 5
3125: PUSH
3126: LD_INT 1
3128: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3129: LD_STRING M1out
3131: PPUSH
3132: CALL_OW 337
// end ;
3136: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3137: LD_EXP 5
3141: PUSH
3142: LD_INT 22
3144: PUSH
3145: LD_INT 2
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 21
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: LD_INT 2
3167: PUSH
3168: LD_INT 34
3170: PUSH
3171: LD_INT 32
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 34
3180: PUSH
3181: LD_INT 88
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 69
3206: PUSH
3207: LD_INT 22
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 21
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 23
3229: PUSH
3230: LD_INT 2
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: CALL 6803 0 1
3251: GREATEREQUAL
3252: AND
3253: IFFALSE 3345
3255: GO 3257
3257: DISABLE
// begin DialogueOn ;
3258: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3262: LD_EXP 18
3266: PPUSH
3267: LD_STRING DL-Ready-1
3269: PPUSH
3270: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3274: LD_INT 22
3276: PUSH
3277: LD_INT 2
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PUSH
3284: LD_INT 23
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: IFFALSE 3316
// Say ( Schulz , DL-Ready-2 ) ;
3304: LD_EXP 18
3308: PPUSH
3309: LD_STRING DL-Ready-2
3311: PPUSH
3312: CALL_OW 88
// DialogueOff ;
3316: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3320: LD_STRING M3
3322: PPUSH
3323: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3327: LD_INT 7
3329: PPUSH
3330: LD_INT 1
3332: PPUSH
3333: CALL_OW 424
// canGo := true ;
3337: LD_ADDR_EXP 6
3341: PUSH
3342: LD_INT 1
3344: ST_TO_ADDR
// end ;
3345: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3346: LD_EXP 6
3350: PUSH
3351: LD_INT 7
3353: PPUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 2
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 21
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 33
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: LD_INT 58
3389: PUSH
3390: EMPTY
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 70
3407: PPUSH
3408: CALL 6803 0 1
3412: PUSH
3413: LD_INT 22
3415: PUSH
3416: LD_INT 2
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 21
3425: PUSH
3426: LD_INT 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 23
3435: PUSH
3436: LD_INT 2
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 69
3452: PPUSH
3453: CALL 6803 0 1
3457: GREATEREQUAL
3458: AND
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 2
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 21
3472: PUSH
3473: LD_INT 1
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: LD_INT 55
3485: PUSH
3486: EMPTY
3487: LIST
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 23
3495: PUSH
3496: LD_INT 2
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PPUSH
3509: CALL_OW 69
3513: PPUSH
3514: CALL 6803 0 1
3518: PUSH
3519: LD_INT 0
3521: EQUAL
3522: AND
3523: IFFALSE 4576
3525: GO 3527
3527: DISABLE
3528: LD_INT 0
3530: PPUSH
3531: PPUSH
3532: PPUSH
3533: PPUSH
3534: PPUSH
// begin enable ;
3535: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 7
3543: PPUSH
3544: LD_INT 22
3546: PUSH
3547: LD_INT 2
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PPUSH
3568: CALL_OW 70
3572: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_INT 2
3580: PUSH
3581: LD_INT 34
3583: PUSH
3584: LD_INT 88
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 34
3593: PUSH
3594: LD_INT 32
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: PPUSH
3606: CALL_OW 72
3610: IFFALSE 3621
// begin Query ( InvalidWeapon ) ;
3612: LD_STRING InvalidWeapon
3614: PPUSH
3615: CALL_OW 97
// exit ;
3619: GO 4576
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3621: LD_VAR 0 2
3625: PPUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 24
3631: PUSH
3632: LD_INT 1000
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 72
3647: IFFALSE 3658
// begin Query ( HealthLevel ) ;
3649: LD_STRING HealthLevel
3651: PPUSH
3652: CALL_OW 97
// exit ;
3656: GO 4576
// end ; for i in tmp do
3658: LD_ADDR_VAR 0 1
3662: PUSH
3663: LD_VAR 0 2
3667: PUSH
3668: FOR_IN
3669: IFFALSE 3714
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3671: LD_VAR 0 1
3675: PPUSH
3676: CALL_OW 262
3680: PUSH
3681: LD_INT 1
3683: EQUAL
3684: PUSH
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 261
3694: PUSH
3695: LD_INT 60
3697: LESS
3698: AND
3699: IFFALSE 3712
// begin Query ( FuelLevel ) ;
3701: LD_STRING FuelLevel
3703: PPUSH
3704: CALL_OW 97
// exit ;
3708: POP
3709: POP
3710: GO 4576
// end ;
3712: GO 3668
3714: POP
3715: POP
// disable ;
3716: DISABLE
// saveVehicles := [ ] ;
3717: LD_ADDR_VAR 0 3
3721: PUSH
3722: EMPTY
3723: ST_TO_ADDR
// for i in tmp do
3724: LD_ADDR_VAR 0 1
3728: PUSH
3729: LD_VAR 0 2
3733: PUSH
3734: FOR_IN
3735: IFFALSE 3844
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: CALL_OW 265
3756: PUSH
3757: LD_VAR 0 1
3761: PPUSH
3762: CALL_OW 262
3766: PUSH
3767: LD_VAR 0 1
3771: PPUSH
3772: CALL_OW 263
3776: PUSH
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 264
3786: PUSH
3787: LD_VAR 0 1
3791: PPUSH
3792: CALL_OW 248
3796: PUSH
3797: LD_VAR 0 1
3801: PPUSH
3802: CALL_OW 261
3806: PUSH
3807: LD_VAR 0 1
3811: PPUSH
3812: CALL_OW 271
3816: PUSH
3817: LD_VAR 0 1
3821: PPUSH
3822: CALL_OW 311
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: PPUSH
3837: CALL 42390 0 2
3841: ST_TO_ADDR
3842: GO 3734
3844: POP
3845: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3846: LD_ADDR_VAR 0 4
3850: PUSH
3851: LD_INT 22
3853: PUSH
3854: LD_INT 2
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 21
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 50
3873: PUSH
3874: EMPTY
3875: LIST
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: PUSH
3887: LD_VAR 0 2
3891: DIFF
3892: ST_TO_ADDR
// if otherVehicles then
3893: LD_VAR 0 4
3897: IFFALSE 4073
// begin tmp := [ ] ;
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: EMPTY
3905: ST_TO_ADDR
// for i in otherVehicles do
3906: LD_ADDR_VAR 0 1
3910: PUSH
3911: LD_VAR 0 4
3915: PUSH
3916: FOR_IN
3917: IFFALSE 4059
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: LD_VAR 0 2
3928: PPUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: CALL_OW 265
3938: PUSH
3939: LD_VAR 0 1
3943: PPUSH
3944: CALL_OW 262
3948: PUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: CALL_OW 263
3958: PUSH
3959: LD_VAR 0 1
3963: PPUSH
3964: CALL_OW 264
3968: PUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: CALL_OW 248
3978: PUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 261
3988: PUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: CALL_OW 271
3998: PUSH
3999: LD_VAR 0 1
4003: PPUSH
4004: CALL_OW 250
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 251
4018: PUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: CALL_OW 254
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 256
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL 42390 0 2
4056: ST_TO_ADDR
4057: GO 3916
4059: POP
4060: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4061: LD_VAR 0 2
4065: PPUSH
4066: LD_STRING 09_otherVehicles
4068: PPUSH
4069: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) then
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_INT 32
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 72
4092: NOT
4093: IFFALSE 4102
// SetAchievement ( ACH_GREEN ) ;
4095: LD_STRING ACH_GREEN
4097: PPUSH
4098: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4102: LD_EXP 18
4106: PPUSH
4107: LD_STRING 09_Schulz
4109: PPUSH
4110: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4114: LD_EXP 18
4118: PPUSH
4119: LD_STRING 09_Schulz_ID
4121: PPUSH
4122: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4126: LD_EXP 20
4130: PPUSH
4131: LD_STRING 09_Lemmy
4133: PPUSH
4134: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4138: LD_EXP 20
4142: PPUSH
4143: LD_STRING 09_Lemmy_ID
4145: PPUSH
4146: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4150: LD_EXP 22
4154: PPUSH
4155: LD_STRING 09_Nia
4157: PPUSH
4158: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4162: LD_EXP 22
4166: PPUSH
4167: LD_STRING 09_Nia_ID
4169: PPUSH
4170: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4174: LD_EXP 21
4178: PPUSH
4179: LD_STRING 09_Mia
4181: PPUSH
4182: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4186: LD_EXP 21
4190: PPUSH
4191: LD_STRING 09_Mia_ID
4193: PPUSH
4194: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4198: LD_EXP 23
4202: PPUSH
4203: LD_STRING 09_Jenna
4205: PPUSH
4206: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4210: LD_EXP 23
4214: PPUSH
4215: LD_STRING 09_Jenna_ID
4217: PPUSH
4218: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4222: LD_EXP 26
4226: PPUSH
4227: LD_STRING 09_schulzSecondSquad
4229: PPUSH
4230: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4234: LD_ADDR_VAR 0 1
4238: PUSH
4239: DOUBLE
4240: LD_INT 1
4242: DEC
4243: ST_TO_ADDR
4244: LD_EXP 26
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4278
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4252: LD_EXP 26
4256: PUSH
4257: LD_VAR 0 1
4261: ARRAY
4262: PPUSH
4263: LD_STRING 09_random_ID_
4265: PUSH
4266: LD_VAR 0 1
4270: STR
4271: PPUSH
4272: CALL_OW 39
4276: GO 4249
4278: POP
4279: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4280: LD_VAR 0 3
4284: PPUSH
4285: LD_STRING 09_vehicles
4287: PPUSH
4288: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4292: LD_OWVAR 1
4296: PPUSH
4297: LD_STRING 09_tick
4299: PPUSH
4300: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4304: LD_INT 6
4306: PPUSH
4307: LD_STRING 09_env
4309: PPUSH
4310: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4314: LD_INT 2
4316: PPUSH
4317: LD_STRING 09_tech
4319: PPUSH
4320: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4324: LD_INT 2
4326: PPUSH
4327: LD_STRING 09_materials
4329: PPUSH
4330: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4334: LD_INT 2
4336: PPUSH
4337: LD_STRING 09_buildings
4339: PPUSH
4340: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4344: LD_INT 22
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 23
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: PPUSH
4373: LD_STRING 09_apes
4375: PPUSH
4376: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4380: LD_EXP 4
4384: PPUSH
4385: LD_STRING 09_timeToHeikeDead
4387: PPUSH
4388: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4392: LD_EXP 3
4396: PPUSH
4397: LD_STRING 09_cameras
4399: PPUSH
4400: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 23
4421: PUSH
4422: LD_INT 0
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 50
4431: PUSH
4432: EMPTY
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: ST_TO_ADDR
// if tmp then
4445: LD_VAR 0 2
4449: IFFALSE 4559
// begin animals := [ ] ;
4451: LD_ADDR_VAR 0 5
4455: PUSH
4456: EMPTY
4457: ST_TO_ADDR
// for i in tmp do
4458: LD_ADDR_VAR 0 1
4462: PUSH
4463: LD_VAR 0 2
4467: PUSH
4468: FOR_IN
4469: IFFALSE 4545
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4471: LD_ADDR_VAR 0 5
4475: PUSH
4476: LD_VAR 0 5
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 257
4490: PUSH
4491: LD_VAR 0 1
4495: PPUSH
4496: CALL_OW 250
4500: PUSH
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL_OW 251
4510: PUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 254
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL_OW 256
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL 42390 0 2
4542: ST_TO_ADDR
4543: GO 4468
4545: POP
4546: POP
// SaveVariable ( animals , 09_animals ) ;
4547: LD_VAR 0 5
4551: PPUSH
4552: LD_STRING 09_animals
4554: PPUSH
4555: CALL_OW 39
// end ; wait ( 3 ) ;
4559: LD_INT 3
4561: PPUSH
4562: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4566: LD_INT 1
4568: PPUSH
4569: LD_STRING %2
4571: PPUSH
4572: CALL_OW 340
// end ; end_of_file
4576: PPOPN 5
4578: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4579: LD_OWVAR 1
4583: PUSH
4584: LD_INT 14700
4586: LESS
4587: IFFALSE 4620
4589: GO 4591
4591: DISABLE
// begin enable ;
4592: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4593: LD_INT 1
4595: PPUSH
4596: LD_INT 5
4598: PPUSH
4599: CALL_OW 12
4603: PPUSH
4604: LD_INT 85
4606: PPUSH
4607: LD_INT 44
4609: PPUSH
4610: LD_INT 30
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 56
// end ;
4620: END
// every 0 0$29 trigger tick < 20 20$00 do
4621: LD_OWVAR 1
4625: PUSH
4626: LD_INT 42000
4628: LESS
4629: IFFALSE 4700
4631: GO 4633
4633: DISABLE
// begin enable ;
4634: ENABLE
// if Prob ( 50 ) then
4635: LD_INT 50
4637: PPUSH
4638: CALL_OW 13
4642: IFFALSE 4673
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 5
4649: PPUSH
4650: CALL_OW 12
4654: PPUSH
4655: LD_INT 72
4657: PPUSH
4658: LD_INT 109
4660: PPUSH
4661: LD_INT 22
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 56
4671: GO 4700
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4673: LD_INT 1
4675: PPUSH
4676: LD_INT 5
4678: PPUSH
4679: CALL_OW 12
4683: PPUSH
4684: LD_INT 140
4686: PPUSH
4687: LD_INT 73
4689: PPUSH
4690: LD_INT 22
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 56
4700: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4701: LD_INT 0
4703: PPUSH
4704: PPUSH
// if exist_mode then
4705: LD_VAR 0 2
4709: IFFALSE 4734
// unit := CreateCharacter ( prefix & ident ) else
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: LD_VAR 0 3
4720: PUSH
4721: LD_VAR 0 1
4725: STR
4726: PPUSH
4727: CALL_OW 34
4731: ST_TO_ADDR
4732: GO 4749
// unit := NewCharacter ( ident ) ;
4734: LD_ADDR_VAR 0 5
4738: PUSH
4739: LD_VAR 0 1
4743: PPUSH
4744: CALL_OW 25
4748: ST_TO_ADDR
// result := unit ;
4749: LD_ADDR_VAR 0 4
4753: PUSH
4754: LD_VAR 0 5
4758: ST_TO_ADDR
// end ;
4759: LD_VAR 0 4
4763: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4764: LD_INT 0
4766: PPUSH
4767: PPUSH
// if not side or not nation then
4768: LD_VAR 0 1
4772: NOT
4773: PUSH
4774: LD_VAR 0 2
4778: NOT
4779: OR
4780: IFFALSE 4784
// exit ;
4782: GO 5552
// case nation of nation_american :
4784: LD_VAR 0 2
4788: PUSH
4789: LD_INT 1
4791: DOUBLE
4792: EQUAL
4793: IFTRUE 4797
4795: GO 5011
4797: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_INT 35
4805: PUSH
4806: LD_INT 45
4808: PUSH
4809: LD_INT 46
4811: PUSH
4812: LD_INT 47
4814: PUSH
4815: LD_INT 82
4817: PUSH
4818: LD_INT 83
4820: PUSH
4821: LD_INT 84
4823: PUSH
4824: LD_INT 85
4826: PUSH
4827: LD_INT 86
4829: PUSH
4830: LD_INT 1
4832: PUSH
4833: LD_INT 2
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: LD_INT 15
4841: PUSH
4842: LD_INT 16
4844: PUSH
4845: LD_INT 7
4847: PUSH
4848: LD_INT 12
4850: PUSH
4851: LD_INT 13
4853: PUSH
4854: LD_INT 10
4856: PUSH
4857: LD_INT 14
4859: PUSH
4860: LD_INT 20
4862: PUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 22
4868: PUSH
4869: LD_INT 25
4871: PUSH
4872: LD_INT 32
4874: PUSH
4875: LD_INT 27
4877: PUSH
4878: LD_INT 36
4880: PUSH
4881: LD_INT 69
4883: PUSH
4884: LD_INT 39
4886: PUSH
4887: LD_INT 34
4889: PUSH
4890: LD_INT 40
4892: PUSH
4893: LD_INT 48
4895: PUSH
4896: LD_INT 49
4898: PUSH
4899: LD_INT 50
4901: PUSH
4902: LD_INT 51
4904: PUSH
4905: LD_INT 52
4907: PUSH
4908: LD_INT 53
4910: PUSH
4911: LD_INT 54
4913: PUSH
4914: LD_INT 55
4916: PUSH
4917: LD_INT 56
4919: PUSH
4920: LD_INT 57
4922: PUSH
4923: LD_INT 58
4925: PUSH
4926: LD_INT 59
4928: PUSH
4929: LD_INT 60
4931: PUSH
4932: LD_INT 61
4934: PUSH
4935: LD_INT 62
4937: PUSH
4938: LD_INT 80
4940: PUSH
4941: LD_INT 82
4943: PUSH
4944: LD_INT 83
4946: PUSH
4947: LD_INT 84
4949: PUSH
4950: LD_INT 85
4952: PUSH
4953: LD_INT 86
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
5009: GO 5476
5011: LD_INT 2
5013: DOUBLE
5014: EQUAL
5015: IFTRUE 5019
5017: GO 5245
5019: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: LD_INT 35
5027: PUSH
5028: LD_INT 45
5030: PUSH
5031: LD_INT 46
5033: PUSH
5034: LD_INT 47
5036: PUSH
5037: LD_INT 82
5039: PUSH
5040: LD_INT 83
5042: PUSH
5043: LD_INT 84
5045: PUSH
5046: LD_INT 85
5048: PUSH
5049: LD_INT 87
5051: PUSH
5052: LD_INT 70
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: LD_INT 11
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: LD_INT 4
5066: PUSH
5067: LD_INT 5
5069: PUSH
5070: LD_INT 6
5072: PUSH
5073: LD_INT 15
5075: PUSH
5076: LD_INT 18
5078: PUSH
5079: LD_INT 7
5081: PUSH
5082: LD_INT 17
5084: PUSH
5085: LD_INT 8
5087: PUSH
5088: LD_INT 20
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 72
5099: PUSH
5100: LD_INT 26
5102: PUSH
5103: LD_INT 69
5105: PUSH
5106: LD_INT 39
5108: PUSH
5109: LD_INT 40
5111: PUSH
5112: LD_INT 41
5114: PUSH
5115: LD_INT 42
5117: PUSH
5118: LD_INT 43
5120: PUSH
5121: LD_INT 48
5123: PUSH
5124: LD_INT 49
5126: PUSH
5127: LD_INT 50
5129: PUSH
5130: LD_INT 51
5132: PUSH
5133: LD_INT 52
5135: PUSH
5136: LD_INT 53
5138: PUSH
5139: LD_INT 54
5141: PUSH
5142: LD_INT 55
5144: PUSH
5145: LD_INT 56
5147: PUSH
5148: LD_INT 60
5150: PUSH
5151: LD_INT 61
5153: PUSH
5154: LD_INT 62
5156: PUSH
5157: LD_INT 66
5159: PUSH
5160: LD_INT 67
5162: PUSH
5163: LD_INT 68
5165: PUSH
5166: LD_INT 81
5168: PUSH
5169: LD_INT 82
5171: PUSH
5172: LD_INT 83
5174: PUSH
5175: LD_INT 84
5177: PUSH
5178: LD_INT 85
5180: PUSH
5181: LD_INT 87
5183: PUSH
5184: LD_INT 88
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: ST_TO_ADDR
5243: GO 5476
5245: LD_INT 3
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5475
5253: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: LD_INT 46
5261: PUSH
5262: LD_INT 47
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 82
5273: PUSH
5274: LD_INT 83
5276: PUSH
5277: LD_INT 84
5279: PUSH
5280: LD_INT 85
5282: PUSH
5283: LD_INT 86
5285: PUSH
5286: LD_INT 11
5288: PUSH
5289: LD_INT 9
5291: PUSH
5292: LD_INT 20
5294: PUSH
5295: LD_INT 19
5297: PUSH
5298: LD_INT 21
5300: PUSH
5301: LD_INT 24
5303: PUSH
5304: LD_INT 22
5306: PUSH
5307: LD_INT 25
5309: PUSH
5310: LD_INT 28
5312: PUSH
5313: LD_INT 29
5315: PUSH
5316: LD_INT 30
5318: PUSH
5319: LD_INT 31
5321: PUSH
5322: LD_INT 37
5324: PUSH
5325: LD_INT 38
5327: PUSH
5328: LD_INT 32
5330: PUSH
5331: LD_INT 27
5333: PUSH
5334: LD_INT 33
5336: PUSH
5337: LD_INT 69
5339: PUSH
5340: LD_INT 39
5342: PUSH
5343: LD_INT 34
5345: PUSH
5346: LD_INT 40
5348: PUSH
5349: LD_INT 71
5351: PUSH
5352: LD_INT 23
5354: PUSH
5355: LD_INT 44
5357: PUSH
5358: LD_INT 48
5360: PUSH
5361: LD_INT 49
5363: PUSH
5364: LD_INT 50
5366: PUSH
5367: LD_INT 51
5369: PUSH
5370: LD_INT 52
5372: PUSH
5373: LD_INT 53
5375: PUSH
5376: LD_INT 54
5378: PUSH
5379: LD_INT 55
5381: PUSH
5382: LD_INT 56
5384: PUSH
5385: LD_INT 57
5387: PUSH
5388: LD_INT 58
5390: PUSH
5391: LD_INT 59
5393: PUSH
5394: LD_INT 63
5396: PUSH
5397: LD_INT 64
5399: PUSH
5400: LD_INT 65
5402: PUSH
5403: LD_INT 82
5405: PUSH
5406: LD_INT 83
5408: PUSH
5409: LD_INT 84
5411: PUSH
5412: LD_INT 85
5414: PUSH
5415: LD_INT 86
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 5476
5475: POP
// if state > - 1 and state < 3 then
5476: LD_VAR 0 3
5480: PUSH
5481: LD_INT 1
5483: NEG
5484: GREATER
5485: PUSH
5486: LD_VAR 0 3
5490: PUSH
5491: LD_INT 3
5493: LESS
5494: AND
5495: IFFALSE 5552
// for i in result do
5497: LD_ADDR_VAR 0 5
5501: PUSH
5502: LD_VAR 0 4
5506: PUSH
5507: FOR_IN
5508: IFFALSE 5550
// if GetTech ( i , side ) <> state then
5510: LD_VAR 0 5
5514: PPUSH
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 321
5524: PUSH
5525: LD_VAR 0 3
5529: NONEQUAL
5530: IFFALSE 5548
// result := result diff i ;
5532: LD_ADDR_VAR 0 4
5536: PUSH
5537: LD_VAR 0 4
5541: PUSH
5542: LD_VAR 0 5
5546: DIFF
5547: ST_TO_ADDR
5548: GO 5507
5550: POP
5551: POP
// end ;
5552: LD_VAR 0 4
5556: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
// result := true ;
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_INT 1
5569: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5570: LD_ADDR_VAR 0 5
5574: PUSH
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 480
5584: ST_TO_ADDR
// if not tmp then
5585: LD_VAR 0 5
5589: NOT
5590: IFFALSE 5594
// exit ;
5592: GO 5643
// for i in tmp do
5594: LD_ADDR_VAR 0 4
5598: PUSH
5599: LD_VAR 0 5
5603: PUSH
5604: FOR_IN
5605: IFFALSE 5641
// if GetTech ( i , side ) <> state_researched then
5607: LD_VAR 0 4
5611: PPUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 321
5621: PUSH
5622: LD_INT 2
5624: NONEQUAL
5625: IFFALSE 5639
// begin result := false ;
5627: LD_ADDR_VAR 0 3
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// exit ;
5635: POP
5636: POP
5637: GO 5643
// end ;
5639: GO 5604
5641: POP
5642: POP
// end ;
5643: LD_VAR 0 3
5647: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5648: LD_INT 0
5650: PPUSH
5651: PPUSH
5652: PPUSH
5653: PPUSH
5654: PPUSH
5655: PPUSH
5656: PPUSH
5657: PPUSH
5658: PPUSH
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5663: LD_VAR 0 1
5667: NOT
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 257
5678: PUSH
5679: LD_INT 9
5681: NONEQUAL
5682: OR
5683: IFFALSE 5687
// exit ;
5685: GO 6260
// side := GetSide ( unit ) ;
5687: LD_ADDR_VAR 0 9
5691: PUSH
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 255
5701: ST_TO_ADDR
// tech_space := tech_spacanom ;
5702: LD_ADDR_VAR 0 12
5706: PUSH
5707: LD_INT 29
5709: ST_TO_ADDR
// tech_time := tech_taurad ;
5710: LD_ADDR_VAR 0 13
5714: PUSH
5715: LD_INT 28
5717: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5718: LD_ADDR_VAR 0 11
5722: PUSH
5723: LD_VAR 0 1
5727: PPUSH
5728: CALL_OW 310
5732: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5733: LD_VAR 0 11
5737: PPUSH
5738: CALL_OW 247
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5750
// exit ;
5748: GO 6260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5750: LD_ADDR_VAR 0 8
5754: PUSH
5755: LD_INT 81
5757: PUSH
5758: LD_VAR 0 9
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 3
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PPUSH
5788: CALL_OW 69
5792: ST_TO_ADDR
// if not tmp then
5793: LD_VAR 0 8
5797: NOT
5798: IFFALSE 5802
// exit ;
5800: GO 6260
// if in_unit then
5802: LD_VAR 0 11
5806: IFFALSE 5830
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5808: LD_ADDR_VAR 0 10
5812: PUSH
5813: LD_VAR 0 8
5817: PPUSH
5818: LD_VAR 0 11
5822: PPUSH
5823: CALL_OW 74
5827: ST_TO_ADDR
5828: GO 5850
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5830: LD_ADDR_VAR 0 10
5834: PUSH
5835: LD_VAR 0 8
5839: PPUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 74
5849: ST_TO_ADDR
// if not enemy then
5850: LD_VAR 0 10
5854: NOT
5855: IFFALSE 5859
// exit ;
5857: GO 6260
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5859: LD_VAR 0 11
5863: PUSH
5864: LD_VAR 0 11
5868: PPUSH
5869: LD_VAR 0 10
5873: PPUSH
5874: CALL_OW 296
5878: PUSH
5879: LD_INT 13
5881: GREATER
5882: AND
5883: PUSH
5884: LD_VAR 0 1
5888: PPUSH
5889: LD_VAR 0 10
5893: PPUSH
5894: CALL_OW 296
5898: PUSH
5899: LD_INT 12
5901: GREATER
5902: OR
5903: IFFALSE 5907
// exit ;
5905: GO 6260
// missile := [ 1 ] ;
5907: LD_ADDR_VAR 0 14
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: EMPTY
5916: LIST
5917: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5918: LD_VAR 0 9
5922: PPUSH
5923: LD_VAR 0 12
5927: PPUSH
5928: CALL_OW 325
5932: IFFALSE 5961
// missile := Replace ( missile , missile + 1 , 2 ) ;
5934: LD_ADDR_VAR 0 14
5938: PUSH
5939: LD_VAR 0 14
5943: PPUSH
5944: LD_VAR 0 14
5948: PUSH
5949: LD_INT 1
5951: PLUS
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 1
5960: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5961: LD_VAR 0 9
5965: PPUSH
5966: LD_VAR 0 13
5970: PPUSH
5971: CALL_OW 325
5975: PUSH
5976: LD_VAR 0 10
5980: PPUSH
5981: CALL_OW 255
5985: PPUSH
5986: LD_VAR 0 13
5990: PPUSH
5991: CALL_OW 325
5995: NOT
5996: AND
5997: IFFALSE 6026
// missile := Replace ( missile , missile + 1 , 3 ) ;
5999: LD_ADDR_VAR 0 14
6003: PUSH
6004: LD_VAR 0 14
6008: PPUSH
6009: LD_VAR 0 14
6013: PUSH
6014: LD_INT 1
6016: PLUS
6017: PPUSH
6018: LD_INT 3
6020: PPUSH
6021: CALL_OW 1
6025: ST_TO_ADDR
// if missile < 2 then
6026: LD_VAR 0 14
6030: PUSH
6031: LD_INT 2
6033: LESS
6034: IFFALSE 6038
// exit ;
6036: GO 6260
// x := GetX ( enemy ) ;
6038: LD_ADDR_VAR 0 4
6042: PUSH
6043: LD_VAR 0 10
6047: PPUSH
6048: CALL_OW 250
6052: ST_TO_ADDR
// y := GetY ( enemy ) ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_VAR 0 10
6062: PPUSH
6063: CALL_OW 251
6067: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6068: LD_ADDR_VAR 0 6
6072: PUSH
6073: LD_VAR 0 4
6077: PUSH
6078: LD_INT 1
6080: NEG
6081: PPUSH
6082: LD_INT 1
6084: PPUSH
6085: CALL_OW 12
6089: PLUS
6090: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6091: LD_ADDR_VAR 0 7
6095: PUSH
6096: LD_VAR 0 5
6100: PUSH
6101: LD_INT 1
6103: NEG
6104: PPUSH
6105: LD_INT 1
6107: PPUSH
6108: CALL_OW 12
6112: PLUS
6113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6114: LD_VAR 0 6
6118: PPUSH
6119: LD_VAR 0 7
6123: PPUSH
6124: CALL_OW 488
6128: NOT
6129: IFFALSE 6151
// begin _x := x ;
6131: LD_ADDR_VAR 0 6
6135: PUSH
6136: LD_VAR 0 4
6140: ST_TO_ADDR
// _y := y ;
6141: LD_ADDR_VAR 0 7
6145: PUSH
6146: LD_VAR 0 5
6150: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: LD_INT 1
6158: PPUSH
6159: LD_VAR 0 14
6163: PPUSH
6164: CALL_OW 12
6168: ST_TO_ADDR
// case i of 1 :
6169: LD_VAR 0 3
6173: PUSH
6174: LD_INT 1
6176: DOUBLE
6177: EQUAL
6178: IFTRUE 6182
6180: GO 6199
6182: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6183: LD_VAR 0 1
6187: PPUSH
6188: LD_VAR 0 10
6192: PPUSH
6193: CALL_OW 115
6197: GO 6260
6199: LD_INT 2
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6229
6207: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6208: LD_VAR 0 1
6212: PPUSH
6213: LD_VAR 0 6
6217: PPUSH
6218: LD_VAR 0 7
6222: PPUSH
6223: CALL_OW 153
6227: GO 6260
6229: LD_INT 3
6231: DOUBLE
6232: EQUAL
6233: IFTRUE 6237
6235: GO 6259
6237: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6238: LD_VAR 0 1
6242: PPUSH
6243: LD_VAR 0 6
6247: PPUSH
6248: LD_VAR 0 7
6252: PPUSH
6253: CALL_OW 154
6257: GO 6260
6259: POP
// end ;
6260: LD_VAR 0 2
6264: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
6270: PPUSH
6271: PPUSH
6272: PPUSH
// if not unit or not building then
6273: LD_VAR 0 1
6277: NOT
6278: PUSH
6279: LD_VAR 0 2
6283: NOT
6284: OR
6285: IFFALSE 6289
// exit ;
6287: GO 6447
// x := GetX ( building ) ;
6289: LD_ADDR_VAR 0 5
6293: PUSH
6294: LD_VAR 0 2
6298: PPUSH
6299: CALL_OW 250
6303: ST_TO_ADDR
// y := GetY ( building ) ;
6304: LD_ADDR_VAR 0 6
6308: PUSH
6309: LD_VAR 0 2
6313: PPUSH
6314: CALL_OW 251
6318: ST_TO_ADDR
// for i = 0 to 5 do
6319: LD_ADDR_VAR 0 4
6323: PUSH
6324: DOUBLE
6325: LD_INT 0
6327: DEC
6328: ST_TO_ADDR
6329: LD_INT 5
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6445
// begin _x := ShiftX ( x , i , 3 ) ;
6335: LD_ADDR_VAR 0 7
6339: PUSH
6340: LD_VAR 0 5
6344: PPUSH
6345: LD_VAR 0 4
6349: PPUSH
6350: LD_INT 3
6352: PPUSH
6353: CALL_OW 272
6357: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6358: LD_ADDR_VAR 0 8
6362: PUSH
6363: LD_VAR 0 6
6367: PPUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PPUSH
6376: CALL_OW 273
6380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6381: LD_VAR 0 7
6385: PPUSH
6386: LD_VAR 0 8
6390: PPUSH
6391: CALL_OW 488
6395: NOT
6396: IFFALSE 6400
// continue ;
6398: GO 6332
// if HexInfo ( _x , _y ) = 0 then
6400: LD_VAR 0 7
6404: PPUSH
6405: LD_VAR 0 8
6409: PPUSH
6410: CALL_OW 428
6414: PUSH
6415: LD_INT 0
6417: EQUAL
6418: IFFALSE 6443
// begin ComMoveXY ( unit , _x , _y ) ;
6420: LD_VAR 0 1
6424: PPUSH
6425: LD_VAR 0 7
6429: PPUSH
6430: LD_VAR 0 8
6434: PPUSH
6435: CALL_OW 111
// exit ;
6439: POP
6440: POP
6441: GO 6447
// end ; end ;
6443: GO 6332
6445: POP
6446: POP
// end ;
6447: LD_VAR 0 3
6451: RET
// export function ScanBase ( side , base_area ) ; begin
6452: LD_INT 0
6454: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: LD_VAR 0 2
6464: PPUSH
6465: LD_INT 81
6467: PUSH
6468: LD_VAR 0 1
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 70
6481: ST_TO_ADDR
// end ;
6482: LD_VAR 0 3
6486: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// result := false ;
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_INT 0
6500: ST_TO_ADDR
// side := GetSide ( unit ) ;
6501: LD_ADDR_VAR 0 3
6505: PUSH
6506: LD_VAR 0 1
6510: PPUSH
6511: CALL_OW 255
6515: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: CALL_OW 248
6530: ST_TO_ADDR
// case nat of 1 :
6531: LD_VAR 0 4
6535: PUSH
6536: LD_INT 1
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6555
6544: POP
// tech := tech_lassight ; 2 :
6545: LD_ADDR_VAR 0 5
6549: PUSH
6550: LD_INT 12
6552: ST_TO_ADDR
6553: GO 6594
6555: LD_INT 2
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6574
6563: POP
// tech := tech_mortar ; 3 :
6564: LD_ADDR_VAR 0 5
6568: PUSH
6569: LD_INT 41
6571: ST_TO_ADDR
6572: GO 6594
6574: LD_INT 3
6576: DOUBLE
6577: EQUAL
6578: IFTRUE 6582
6580: GO 6593
6582: POP
// tech := tech_bazooka ; end ;
6583: LD_ADDR_VAR 0 5
6587: PUSH
6588: LD_INT 44
6590: ST_TO_ADDR
6591: GO 6594
6593: POP
// if Researched ( side , tech ) then
6594: LD_VAR 0 3
6598: PPUSH
6599: LD_VAR 0 5
6603: PPUSH
6604: CALL_OW 325
6608: IFFALSE 6635
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6610: LD_ADDR_VAR 0 2
6614: PUSH
6615: LD_INT 5
6617: PUSH
6618: LD_INT 8
6620: PUSH
6621: LD_INT 9
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: LD_VAR 0 4
6633: ARRAY
6634: ST_TO_ADDR
// end ;
6635: LD_VAR 0 2
6639: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
6644: PPUSH
// if not mines then
6645: LD_VAR 0 2
6649: NOT
6650: IFFALSE 6654
// exit ;
6652: GO 6798
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6654: LD_ADDR_VAR 0 5
6658: PUSH
6659: LD_INT 81
6661: PUSH
6662: LD_VAR 0 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PPUSH
6692: CALL_OW 69
6696: ST_TO_ADDR
// for i in mines do
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: LD_VAR 0 2
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6796
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 4
6723: PUSH
6724: LD_INT 2
6726: ARRAY
6727: PPUSH
6728: CALL_OW 458
6732: NOT
6733: IFFALSE 6737
// continue ;
6735: GO 6707
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6737: LD_VAR 0 4
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 4
6750: PUSH
6751: LD_INT 2
6753: ARRAY
6754: PPUSH
6755: CALL_OW 428
6759: PUSH
6760: LD_VAR 0 5
6764: IN
6765: IFFALSE 6794
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6767: LD_VAR 0 4
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PPUSH
6776: LD_VAR 0 4
6780: PUSH
6781: LD_INT 2
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 1
6789: PPUSH
6790: CALL_OW 456
// end ;
6794: GO 6707
6796: POP
6797: POP
// end ;
6798: LD_VAR 0 3
6802: RET
// export function Count ( array ) ; begin
6803: LD_INT 0
6805: PPUSH
// result := array + 0 ;
6806: LD_ADDR_VAR 0 2
6810: PUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 0
6818: PLUS
6819: ST_TO_ADDR
// end ;
6820: LD_VAR 0 2
6824: RET
// export function IsEmpty ( building ) ; begin
6825: LD_INT 0
6827: PPUSH
// if not building then
6828: LD_VAR 0 1
6832: NOT
6833: IFFALSE 6837
// exit ;
6835: GO 6880
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6837: LD_ADDR_VAR 0 2
6841: PUSH
6842: LD_VAR 0 1
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 255
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 58
6866: PUSH
6867: EMPTY
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PPUSH
6874: CALL_OW 69
6878: IN
6879: ST_TO_ADDR
// end ;
6880: LD_VAR 0 2
6884: RET
// export function IsNotFull ( building ) ; var places ; begin
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// if not building then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6926
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_INT 3
6910: PUSH
6911: LD_INT 62
6913: PUSH
6914: EMPTY
6915: LIST
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PPUSH
6921: CALL_OW 72
6925: ST_TO_ADDR
// end ;
6926: LD_VAR 0 2
6930: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6931: LD_INT 0
6933: PPUSH
6934: PPUSH
6935: PPUSH
6936: PPUSH
// tmp := [ ] ;
6937: LD_ADDR_VAR 0 3
6941: PUSH
6942: EMPTY
6943: ST_TO_ADDR
// list := [ ] ;
6944: LD_ADDR_VAR 0 5
6948: PUSH
6949: EMPTY
6950: ST_TO_ADDR
// for i = 16 to 25 do
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: DOUBLE
6957: LD_INT 16
6959: DEC
6960: ST_TO_ADDR
6961: LD_INT 25
6963: PUSH
6964: FOR_TO
6965: IFFALSE 7038
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_VAR 0 3
6976: PUSH
6977: LD_INT 22
6979: PUSH
6980: LD_VAR 0 1
6984: PPUSH
6985: CALL_OW 255
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 91
6996: PUSH
6997: LD_VAR 0 1
7001: PUSH
7002: LD_INT 6
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_VAR 0 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: ADD
7035: ST_TO_ADDR
7036: GO 6964
7038: POP
7039: POP
// for i = 1 to tmp do
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_VAR 0 3
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7144
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7058: LD_ADDR_VAR 0 5
7062: PUSH
7063: LD_VAR 0 5
7067: PUSH
7068: LD_VAR 0 3
7072: PUSH
7073: LD_VAR 0 4
7077: ARRAY
7078: PPUSH
7079: CALL_OW 266
7083: PUSH
7084: LD_VAR 0 3
7088: PUSH
7089: LD_VAR 0 4
7093: ARRAY
7094: PPUSH
7095: CALL_OW 250
7099: PUSH
7100: LD_VAR 0 3
7104: PUSH
7105: LD_VAR 0 4
7109: ARRAY
7110: PPUSH
7111: CALL_OW 251
7115: PUSH
7116: LD_VAR 0 3
7120: PUSH
7121: LD_VAR 0 4
7125: ARRAY
7126: PPUSH
7127: CALL_OW 254
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: ADD
7141: ST_TO_ADDR
7142: GO 7055
7144: POP
7145: POP
// result := list ;
7146: LD_ADDR_VAR 0 2
7150: PUSH
7151: LD_VAR 0 5
7155: ST_TO_ADDR
// end ;
7156: LD_VAR 0 2
7160: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7161: LD_INT 0
7163: PPUSH
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
7169: PPUSH
// if not factory then
7170: LD_VAR 0 1
7174: NOT
7175: IFFALSE 7179
// exit ;
7177: GO 7772
// if control = control_apeman then
7179: LD_VAR 0 4
7183: PUSH
7184: LD_INT 5
7186: EQUAL
7187: IFFALSE 7296
// begin tmp := UnitsInside ( factory ) ;
7189: LD_ADDR_VAR 0 8
7193: PUSH
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 313
7203: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7204: LD_VAR 0 8
7208: PPUSH
7209: LD_INT 25
7211: PUSH
7212: LD_INT 12
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 72
7223: NOT
7224: IFFALSE 7234
// control := control_manual ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_INT 1
7233: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7234: LD_ADDR_VAR 0 8
7238: PUSH
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL 6931 0 1
7248: ST_TO_ADDR
// if tmp then
7249: LD_VAR 0 8
7253: IFFALSE 7296
// begin for i in tmp do
7255: LD_ADDR_VAR 0 7
7259: PUSH
7260: LD_VAR 0 8
7264: PUSH
7265: FOR_IN
7266: IFFALSE 7294
// if i [ 1 ] = b_ext_radio then
7268: LD_VAR 0 7
7272: PUSH
7273: LD_INT 1
7275: ARRAY
7276: PUSH
7277: LD_INT 22
7279: EQUAL
7280: IFFALSE 7292
// begin control := control_remote ;
7282: LD_ADDR_VAR 0 4
7286: PUSH
7287: LD_INT 2
7289: ST_TO_ADDR
// break ;
7290: GO 7294
// end ;
7292: GO 7265
7294: POP
7295: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_VAR 0 2
7305: PPUSH
7306: LD_VAR 0 3
7310: PPUSH
7311: LD_VAR 0 4
7315: PPUSH
7316: LD_VAR 0 5
7320: PPUSH
7321: CALL_OW 448
7325: IFFALSE 7360
// begin result := [ chassis , engine , control , weapon ] ;
7327: LD_ADDR_VAR 0 6
7331: PUSH
7332: LD_VAR 0 2
7336: PUSH
7337: LD_VAR 0 3
7341: PUSH
7342: LD_VAR 0 4
7346: PUSH
7347: LD_VAR 0 5
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: ST_TO_ADDR
// exit ;
7358: GO 7772
// end ; _chassis := AvailableChassisList ( factory ) ;
7360: LD_ADDR_VAR 0 9
7364: PUSH
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL_OW 475
7374: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7375: LD_ADDR_VAR 0 11
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 476
7389: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7390: LD_ADDR_VAR 0 12
7394: PUSH
7395: LD_VAR 0 1
7399: PPUSH
7400: CALL_OW 477
7404: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: LD_VAR 0 1
7414: PPUSH
7415: CALL_OW 478
7419: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7420: LD_VAR 0 9
7424: NOT
7425: PUSH
7426: LD_VAR 0 11
7430: NOT
7431: OR
7432: PUSH
7433: LD_VAR 0 12
7437: NOT
7438: OR
7439: PUSH
7440: LD_VAR 0 10
7444: NOT
7445: OR
7446: IFFALSE 7481
// begin result := [ chassis , engine , control , weapon ] ;
7448: LD_ADDR_VAR 0 6
7452: PUSH
7453: LD_VAR 0 2
7457: PUSH
7458: LD_VAR 0 3
7462: PUSH
7463: LD_VAR 0 4
7467: PUSH
7468: LD_VAR 0 5
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: ST_TO_ADDR
// exit ;
7479: GO 7772
// end ; if not chassis in _chassis then
7481: LD_VAR 0 2
7485: PUSH
7486: LD_VAR 0 9
7490: IN
7491: NOT
7492: IFFALSE 7518
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7494: LD_ADDR_VAR 0 2
7498: PUSH
7499: LD_VAR 0 9
7503: PUSH
7504: LD_INT 1
7506: PPUSH
7507: LD_VAR 0 9
7511: PPUSH
7512: CALL_OW 12
7516: ARRAY
7517: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_VAR 0 3
7527: PPUSH
7528: CALL 7777 0 2
7532: NOT
7533: IFFALSE 7592
// repeat engine := _engine [ 1 ] ;
7535: LD_ADDR_VAR 0 3
7539: PUSH
7540: LD_VAR 0 11
7544: PUSH
7545: LD_INT 1
7547: ARRAY
7548: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7549: LD_ADDR_VAR 0 11
7553: PUSH
7554: LD_VAR 0 11
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 3
7566: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7567: LD_VAR 0 2
7571: PPUSH
7572: LD_VAR 0 3
7576: PPUSH
7577: CALL 7777 0 2
7581: PUSH
7582: LD_VAR 0 11
7586: PUSH
7587: EMPTY
7588: EQUAL
7589: OR
7590: IFFALSE 7535
// if not control in _control then
7592: LD_VAR 0 4
7596: PUSH
7597: LD_VAR 0 12
7601: IN
7602: NOT
7603: IFFALSE 7629
// control := _control [ rand ( 1 , _control ) ] ;
7605: LD_ADDR_VAR 0 4
7609: PUSH
7610: LD_VAR 0 12
7614: PUSH
7615: LD_INT 1
7617: PPUSH
7618: LD_VAR 0 12
7622: PPUSH
7623: CALL_OW 12
7627: ARRAY
7628: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7629: LD_VAR 0 2
7633: PPUSH
7634: LD_VAR 0 5
7638: PPUSH
7639: CALL 7997 0 2
7643: NOT
7644: IFFALSE 7703
// repeat weapon := _weapon [ 1 ] ;
7646: LD_ADDR_VAR 0 5
7650: PUSH
7651: LD_VAR 0 10
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7660: LD_ADDR_VAR 0 10
7664: PUSH
7665: LD_VAR 0 10
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: CALL_OW 3
7677: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7678: LD_VAR 0 2
7682: PPUSH
7683: LD_VAR 0 5
7687: PPUSH
7688: CALL 7997 0 2
7692: PUSH
7693: LD_VAR 0 10
7697: PUSH
7698: EMPTY
7699: EQUAL
7700: OR
7701: IFFALSE 7646
// result := [ ] ;
7703: LD_ADDR_VAR 0 6
7707: PUSH
7708: EMPTY
7709: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7710: LD_VAR 0 1
7714: PPUSH
7715: LD_VAR 0 2
7719: PPUSH
7720: LD_VAR 0 3
7724: PPUSH
7725: LD_VAR 0 4
7729: PPUSH
7730: LD_VAR 0 5
7734: PPUSH
7735: CALL_OW 448
7739: IFFALSE 7772
// result := [ chassis , engine , control , weapon ] ;
7741: LD_ADDR_VAR 0 6
7745: PUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 3
7755: PUSH
7756: LD_VAR 0 4
7760: PUSH
7761: LD_VAR 0 5
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: ST_TO_ADDR
// end ;
7772: LD_VAR 0 6
7776: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7777: LD_INT 0
7779: PPUSH
// if not chassis or not engine then
7780: LD_VAR 0 1
7784: NOT
7785: PUSH
7786: LD_VAR 0 2
7790: NOT
7791: OR
7792: IFFALSE 7796
// exit ;
7794: GO 7992
// case engine of engine_solar :
7796: LD_VAR 0 2
7800: PUSH
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7847
7809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7810: LD_ADDR_VAR 0 3
7814: PUSH
7815: LD_INT 11
7817: PUSH
7818: LD_INT 12
7820: PUSH
7821: LD_INT 13
7823: PUSH
7824: LD_INT 14
7826: PUSH
7827: LD_INT 1
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: ST_TO_ADDR
7845: GO 7976
7847: LD_INT 1
7849: DOUBLE
7850: EQUAL
7851: IFTRUE 7855
7853: GO 7917
7855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7856: LD_ADDR_VAR 0 3
7860: PUSH
7861: LD_INT 11
7863: PUSH
7864: LD_INT 12
7866: PUSH
7867: LD_INT 13
7869: PUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: LD_INT 4
7884: PUSH
7885: LD_INT 5
7887: PUSH
7888: LD_INT 21
7890: PUSH
7891: LD_INT 23
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 24
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: ST_TO_ADDR
7915: GO 7976
7917: LD_INT 3
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7975
7925: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7926: LD_ADDR_VAR 0 3
7930: PUSH
7931: LD_INT 13
7933: PUSH
7934: LD_INT 14
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: LD_INT 3
7942: PUSH
7943: LD_INT 4
7945: PUSH
7946: LD_INT 5
7948: PUSH
7949: LD_INT 21
7951: PUSH
7952: LD_INT 22
7954: PUSH
7955: LD_INT 23
7957: PUSH
7958: LD_INT 24
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 7976
7975: POP
// result := ( chassis in result ) ;
7976: LD_ADDR_VAR 0 3
7980: PUSH
7981: LD_VAR 0 1
7985: PUSH
7986: LD_VAR 0 3
7990: IN
7991: ST_TO_ADDR
// end ;
7992: LD_VAR 0 3
7996: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7997: LD_INT 0
7999: PPUSH
// if not chassis or not weapon then
8000: LD_VAR 0 1
8004: NOT
8005: PUSH
8006: LD_VAR 0 2
8010: NOT
8011: OR
8012: IFFALSE 8016
// exit ;
8014: GO 9076
// case weapon of us_machine_gun :
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 2
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8059
8029: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8030: LD_ADDR_VAR 0 3
8034: PUSH
8035: LD_INT 1
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 3
8043: PUSH
8044: LD_INT 4
8046: PUSH
8047: LD_INT 5
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: ST_TO_ADDR
8057: GO 9060
8059: LD_INT 3
8061: DOUBLE
8062: EQUAL
8063: IFTRUE 8067
8065: GO 8097
8067: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8068: LD_ADDR_VAR 0 3
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 4
8084: PUSH
8085: LD_INT 5
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: ST_TO_ADDR
8095: GO 9060
8097: LD_INT 11
8099: DOUBLE
8100: EQUAL
8101: IFTRUE 8105
8103: GO 8135
8105: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8106: LD_ADDR_VAR 0 3
8110: PUSH
8111: LD_INT 1
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: LD_INT 5
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: ST_TO_ADDR
8133: GO 9060
8135: LD_INT 4
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8169
8143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: LD_INT 3
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: LD_INT 5
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: ST_TO_ADDR
8167: GO 9060
8169: LD_INT 5
8171: DOUBLE
8172: EQUAL
8173: IFTRUE 8177
8175: GO 8203
8177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8178: LD_ADDR_VAR 0 3
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: LD_INT 4
8191: PUSH
8192: LD_INT 5
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: ST_TO_ADDR
8201: GO 9060
8203: LD_INT 9
8205: DOUBLE
8206: EQUAL
8207: IFTRUE 8211
8209: GO 8237
8211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8212: LD_ADDR_VAR 0 3
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: LD_INT 5
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: ST_TO_ADDR
8235: GO 9060
8237: LD_INT 7
8239: DOUBLE
8240: EQUAL
8241: IFTRUE 8245
8243: GO 8271
8245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8246: LD_ADDR_VAR 0 3
8250: PUSH
8251: LD_INT 2
8253: PUSH
8254: LD_INT 3
8256: PUSH
8257: LD_INT 4
8259: PUSH
8260: LD_INT 5
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: ST_TO_ADDR
8269: GO 9060
8271: LD_INT 12
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8305
8279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8280: LD_ADDR_VAR 0 3
8284: PUSH
8285: LD_INT 2
8287: PUSH
8288: LD_INT 3
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: ST_TO_ADDR
8303: GO 9060
8305: LD_INT 13
8307: DOUBLE
8308: EQUAL
8309: IFTRUE 8313
8311: GO 8339
8313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8314: LD_ADDR_VAR 0 3
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: LD_INT 3
8324: PUSH
8325: LD_INT 4
8327: PUSH
8328: LD_INT 5
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: ST_TO_ADDR
8337: GO 9060
8339: LD_INT 14
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8365
8347: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8348: LD_ADDR_VAR 0 3
8352: PUSH
8353: LD_INT 4
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: ST_TO_ADDR
8363: GO 9060
8365: LD_INT 6
8367: DOUBLE
8368: EQUAL
8369: IFTRUE 8373
8371: GO 8391
8373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8374: LD_ADDR_VAR 0 3
8378: PUSH
8379: LD_INT 4
8381: PUSH
8382: LD_INT 5
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: ST_TO_ADDR
8389: GO 9060
8391: LD_INT 10
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8417
8399: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8400: LD_ADDR_VAR 0 3
8404: PUSH
8405: LD_INT 4
8407: PUSH
8408: LD_INT 5
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: ST_TO_ADDR
8415: GO 9060
8417: LD_INT 22
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8425
8423: GO 8451
8425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_INT 11
8433: PUSH
8434: LD_INT 12
8436: PUSH
8437: LD_INT 13
8439: PUSH
8440: LD_INT 14
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
8449: GO 9060
8451: LD_INT 23
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8485
8459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8460: LD_ADDR_VAR 0 3
8464: PUSH
8465: LD_INT 11
8467: PUSH
8468: LD_INT 12
8470: PUSH
8471: LD_INT 13
8473: PUSH
8474: LD_INT 14
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
8483: GO 9060
8485: LD_INT 24
8487: DOUBLE
8488: EQUAL
8489: IFTRUE 8493
8491: GO 8519
8493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8494: LD_ADDR_VAR 0 3
8498: PUSH
8499: LD_INT 11
8501: PUSH
8502: LD_INT 12
8504: PUSH
8505: LD_INT 13
8507: PUSH
8508: LD_INT 14
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: ST_TO_ADDR
8517: GO 9060
8519: LD_INT 30
8521: DOUBLE
8522: EQUAL
8523: IFTRUE 8527
8525: GO 8553
8527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8528: LD_ADDR_VAR 0 3
8532: PUSH
8533: LD_INT 11
8535: PUSH
8536: LD_INT 12
8538: PUSH
8539: LD_INT 13
8541: PUSH
8542: LD_INT 14
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: ST_TO_ADDR
8551: GO 9060
8553: LD_INT 25
8555: DOUBLE
8556: EQUAL
8557: IFTRUE 8561
8559: GO 8579
8561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8562: LD_ADDR_VAR 0 3
8566: PUSH
8567: LD_INT 13
8569: PUSH
8570: LD_INT 14
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: ST_TO_ADDR
8577: GO 9060
8579: LD_INT 27
8581: DOUBLE
8582: EQUAL
8583: IFTRUE 8587
8585: GO 8605
8587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8588: LD_ADDR_VAR 0 3
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: ST_TO_ADDR
8603: GO 9060
8605: LD_INT 92
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8613
8611: GO 8639
8613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 11
8621: PUSH
8622: LD_INT 12
8624: PUSH
8625: LD_INT 13
8627: PUSH
8628: LD_INT 14
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: ST_TO_ADDR
8637: GO 9060
8639: LD_INT 28
8641: DOUBLE
8642: EQUAL
8643: IFTRUE 8647
8645: GO 8665
8647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_INT 13
8655: PUSH
8656: LD_INT 14
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: ST_TO_ADDR
8663: GO 9060
8665: LD_INT 29
8667: DOUBLE
8668: EQUAL
8669: IFTRUE 8673
8671: GO 8691
8673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8674: LD_ADDR_VAR 0 3
8678: PUSH
8679: LD_INT 13
8681: PUSH
8682: LD_INT 14
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: ST_TO_ADDR
8689: GO 9060
8691: LD_INT 31
8693: DOUBLE
8694: EQUAL
8695: IFTRUE 8699
8697: GO 8717
8699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8700: LD_ADDR_VAR 0 3
8704: PUSH
8705: LD_INT 13
8707: PUSH
8708: LD_INT 14
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: ST_TO_ADDR
8715: GO 9060
8717: LD_INT 26
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8743
8725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8726: LD_ADDR_VAR 0 3
8730: PUSH
8731: LD_INT 13
8733: PUSH
8734: LD_INT 14
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: ST_TO_ADDR
8741: GO 9060
8743: LD_INT 42
8745: DOUBLE
8746: EQUAL
8747: IFTRUE 8751
8749: GO 8777
8751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: LD_INT 21
8759: PUSH
8760: LD_INT 22
8762: PUSH
8763: LD_INT 23
8765: PUSH
8766: LD_INT 24
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
8775: GO 9060
8777: LD_INT 43
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8811
8785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8786: LD_ADDR_VAR 0 3
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 23
8799: PUSH
8800: LD_INT 24
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: ST_TO_ADDR
8809: GO 9060
8811: LD_INT 44
8813: DOUBLE
8814: EQUAL
8815: IFTRUE 8819
8817: GO 8845
8819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8820: LD_ADDR_VAR 0 3
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_INT 23
8833: PUSH
8834: LD_INT 24
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: ST_TO_ADDR
8843: GO 9060
8845: LD_INT 45
8847: DOUBLE
8848: EQUAL
8849: IFTRUE 8853
8851: GO 8879
8853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8854: LD_ADDR_VAR 0 3
8858: PUSH
8859: LD_INT 21
8861: PUSH
8862: LD_INT 22
8864: PUSH
8865: LD_INT 23
8867: PUSH
8868: LD_INT 24
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: ST_TO_ADDR
8877: GO 9060
8879: LD_INT 49
8881: DOUBLE
8882: EQUAL
8883: IFTRUE 8887
8885: GO 8913
8887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8888: LD_ADDR_VAR 0 3
8892: PUSH
8893: LD_INT 21
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_INT 23
8901: PUSH
8902: LD_INT 24
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: ST_TO_ADDR
8911: GO 9060
8913: LD_INT 51
8915: DOUBLE
8916: EQUAL
8917: IFTRUE 8921
8919: GO 8947
8921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8922: LD_ADDR_VAR 0 3
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 22
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 24
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: ST_TO_ADDR
8945: GO 9060
8947: LD_INT 52
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 8981
8955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8956: LD_ADDR_VAR 0 3
8960: PUSH
8961: LD_INT 21
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_INT 23
8969: PUSH
8970: LD_INT 24
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: ST_TO_ADDR
8979: GO 9060
8981: LD_INT 53
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9007
8989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: LD_INT 23
8997: PUSH
8998: LD_INT 24
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: ST_TO_ADDR
9005: GO 9060
9007: LD_INT 46
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9033
9015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 23
9023: PUSH
9024: LD_INT 24
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: ST_TO_ADDR
9031: GO 9060
9033: LD_INT 47
9035: DOUBLE
9036: EQUAL
9037: IFTRUE 9041
9039: GO 9059
9041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_INT 23
9049: PUSH
9050: LD_INT 24
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: ST_TO_ADDR
9057: GO 9060
9059: POP
// result := ( chassis in result ) ;
9060: LD_ADDR_VAR 0 3
9064: PUSH
9065: LD_VAR 0 1
9069: PUSH
9070: LD_VAR 0 3
9074: IN
9075: ST_TO_ADDR
// end ;
9076: LD_VAR 0 3
9080: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9081: LD_INT 0
9083: PPUSH
9084: PPUSH
9085: PPUSH
9086: PPUSH
9087: PPUSH
9088: PPUSH
9089: PPUSH
// result := array ;
9090: LD_ADDR_VAR 0 5
9094: PUSH
9095: LD_VAR 0 1
9099: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9100: LD_VAR 0 1
9104: NOT
9105: PUSH
9106: LD_VAR 0 2
9110: NOT
9111: OR
9112: PUSH
9113: LD_VAR 0 3
9117: NOT
9118: OR
9119: PUSH
9120: LD_VAR 0 2
9124: PUSH
9125: LD_VAR 0 1
9129: GREATER
9130: OR
9131: PUSH
9132: LD_VAR 0 3
9136: PUSH
9137: LD_VAR 0 1
9141: GREATER
9142: OR
9143: IFFALSE 9147
// exit ;
9145: GO 9443
// if direction then
9147: LD_VAR 0 4
9151: IFFALSE 9215
// begin d := 1 ;
9153: LD_ADDR_VAR 0 9
9157: PUSH
9158: LD_INT 1
9160: ST_TO_ADDR
// if i_from > i_to then
9161: LD_VAR 0 2
9165: PUSH
9166: LD_VAR 0 3
9170: GREATER
9171: IFFALSE 9197
// length := ( array - i_from ) + i_to else
9173: LD_ADDR_VAR 0 11
9177: PUSH
9178: LD_VAR 0 1
9182: PUSH
9183: LD_VAR 0 2
9187: MINUS
9188: PUSH
9189: LD_VAR 0 3
9193: PLUS
9194: ST_TO_ADDR
9195: GO 9213
// length := i_to - i_from ;
9197: LD_ADDR_VAR 0 11
9201: PUSH
9202: LD_VAR 0 3
9206: PUSH
9207: LD_VAR 0 2
9211: MINUS
9212: ST_TO_ADDR
// end else
9213: GO 9276
// begin d := - 1 ;
9215: LD_ADDR_VAR 0 9
9219: PUSH
9220: LD_INT 1
9222: NEG
9223: ST_TO_ADDR
// if i_from > i_to then
9224: LD_VAR 0 2
9228: PUSH
9229: LD_VAR 0 3
9233: GREATER
9234: IFFALSE 9254
// length := i_from - i_to else
9236: LD_ADDR_VAR 0 11
9240: PUSH
9241: LD_VAR 0 2
9245: PUSH
9246: LD_VAR 0 3
9250: MINUS
9251: ST_TO_ADDR
9252: GO 9276
// length := ( array - i_to ) + i_from ;
9254: LD_ADDR_VAR 0 11
9258: PUSH
9259: LD_VAR 0 1
9263: PUSH
9264: LD_VAR 0 3
9268: MINUS
9269: PUSH
9270: LD_VAR 0 2
9274: PLUS
9275: ST_TO_ADDR
// end ; if not length then
9276: LD_VAR 0 11
9280: NOT
9281: IFFALSE 9285
// exit ;
9283: GO 9443
// tmp := array ;
9285: LD_ADDR_VAR 0 10
9289: PUSH
9290: LD_VAR 0 1
9294: ST_TO_ADDR
// for i = 1 to length do
9295: LD_ADDR_VAR 0 6
9299: PUSH
9300: DOUBLE
9301: LD_INT 1
9303: DEC
9304: ST_TO_ADDR
9305: LD_VAR 0 11
9309: PUSH
9310: FOR_TO
9311: IFFALSE 9431
// begin for j = 1 to array do
9313: LD_ADDR_VAR 0 7
9317: PUSH
9318: DOUBLE
9319: LD_INT 1
9321: DEC
9322: ST_TO_ADDR
9323: LD_VAR 0 1
9327: PUSH
9328: FOR_TO
9329: IFFALSE 9417
// begin k := j + d ;
9331: LD_ADDR_VAR 0 8
9335: PUSH
9336: LD_VAR 0 7
9340: PUSH
9341: LD_VAR 0 9
9345: PLUS
9346: ST_TO_ADDR
// if k > array then
9347: LD_VAR 0 8
9351: PUSH
9352: LD_VAR 0 1
9356: GREATER
9357: IFFALSE 9367
// k := 1 ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_INT 1
9366: ST_TO_ADDR
// if not k then
9367: LD_VAR 0 8
9371: NOT
9372: IFFALSE 9384
// k := array ;
9374: LD_ADDR_VAR 0 8
9378: PUSH
9379: LD_VAR 0 1
9383: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9384: LD_ADDR_VAR 0 10
9388: PUSH
9389: LD_VAR 0 10
9393: PPUSH
9394: LD_VAR 0 8
9398: PPUSH
9399: LD_VAR 0 1
9403: PUSH
9404: LD_VAR 0 7
9408: ARRAY
9409: PPUSH
9410: CALL_OW 1
9414: ST_TO_ADDR
// end ;
9415: GO 9328
9417: POP
9418: POP
// array := tmp ;
9419: LD_ADDR_VAR 0 1
9423: PUSH
9424: LD_VAR 0 10
9428: ST_TO_ADDR
// end ;
9429: GO 9310
9431: POP
9432: POP
// result := array ;
9433: LD_ADDR_VAR 0 5
9437: PUSH
9438: LD_VAR 0 1
9442: ST_TO_ADDR
// end ;
9443: LD_VAR 0 5
9447: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9448: LD_INT 0
9450: PPUSH
9451: PPUSH
// result := 0 ;
9452: LD_ADDR_VAR 0 3
9456: PUSH
9457: LD_INT 0
9459: ST_TO_ADDR
// if not array or not value in array then
9460: LD_VAR 0 1
9464: NOT
9465: PUSH
9466: LD_VAR 0 2
9470: PUSH
9471: LD_VAR 0 1
9475: IN
9476: NOT
9477: OR
9478: IFFALSE 9482
// exit ;
9480: GO 9536
// for i = 1 to array do
9482: LD_ADDR_VAR 0 4
9486: PUSH
9487: DOUBLE
9488: LD_INT 1
9490: DEC
9491: ST_TO_ADDR
9492: LD_VAR 0 1
9496: PUSH
9497: FOR_TO
9498: IFFALSE 9534
// if value = array [ i ] then
9500: LD_VAR 0 2
9504: PUSH
9505: LD_VAR 0 1
9509: PUSH
9510: LD_VAR 0 4
9514: ARRAY
9515: EQUAL
9516: IFFALSE 9532
// begin result := i ;
9518: LD_ADDR_VAR 0 3
9522: PUSH
9523: LD_VAR 0 4
9527: ST_TO_ADDR
// exit ;
9528: POP
9529: POP
9530: GO 9536
// end ;
9532: GO 9497
9534: POP
9535: POP
// end ;
9536: LD_VAR 0 3
9540: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9541: LD_INT 0
9543: PPUSH
// vc_chassis := chassis ;
9544: LD_ADDR_OWVAR 37
9548: PUSH
9549: LD_VAR 0 1
9553: ST_TO_ADDR
// vc_engine := engine ;
9554: LD_ADDR_OWVAR 39
9558: PUSH
9559: LD_VAR 0 2
9563: ST_TO_ADDR
// vc_control := control ;
9564: LD_ADDR_OWVAR 38
9568: PUSH
9569: LD_VAR 0 3
9573: ST_TO_ADDR
// vc_weapon := weapon ;
9574: LD_ADDR_OWVAR 40
9578: PUSH
9579: LD_VAR 0 4
9583: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9584: LD_ADDR_OWVAR 41
9588: PUSH
9589: LD_VAR 0 5
9593: ST_TO_ADDR
// end ;
9594: LD_VAR 0 6
9598: RET
// export function WantPlant ( unit ) ; var task ; begin
9599: LD_INT 0
9601: PPUSH
9602: PPUSH
// result := false ;
9603: LD_ADDR_VAR 0 2
9607: PUSH
9608: LD_INT 0
9610: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 437
9625: ST_TO_ADDR
// if task then
9626: LD_VAR 0 3
9630: IFFALSE 9658
// if task [ 1 ] [ 1 ] = p then
9632: LD_VAR 0 3
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: PUSH
9641: LD_INT 1
9643: ARRAY
9644: PUSH
9645: LD_STRING p
9647: EQUAL
9648: IFFALSE 9658
// result := true ;
9650: LD_ADDR_VAR 0 2
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// end ;
9658: LD_VAR 0 2
9662: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9663: LD_INT 0
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
// if pos < 1 then
9669: LD_VAR 0 2
9673: PUSH
9674: LD_INT 1
9676: LESS
9677: IFFALSE 9681
// exit ;
9679: GO 9984
// if pos = 1 then
9681: LD_VAR 0 2
9685: PUSH
9686: LD_INT 1
9688: EQUAL
9689: IFFALSE 9722
// result := Replace ( arr , pos [ 1 ] , value ) else
9691: LD_ADDR_VAR 0 4
9695: PUSH
9696: LD_VAR 0 1
9700: PPUSH
9701: LD_VAR 0 2
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PPUSH
9710: LD_VAR 0 3
9714: PPUSH
9715: CALL_OW 1
9719: ST_TO_ADDR
9720: GO 9984
// begin tmp := arr ;
9722: LD_ADDR_VAR 0 6
9726: PUSH
9727: LD_VAR 0 1
9731: ST_TO_ADDR
// s_arr := [ tmp ] ;
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_VAR 0 6
9741: PUSH
9742: EMPTY
9743: LIST
9744: ST_TO_ADDR
// for i = 1 to pos - 1 do
9745: LD_ADDR_VAR 0 5
9749: PUSH
9750: DOUBLE
9751: LD_INT 1
9753: DEC
9754: ST_TO_ADDR
9755: LD_VAR 0 2
9759: PUSH
9760: LD_INT 1
9762: MINUS
9763: PUSH
9764: FOR_TO
9765: IFFALSE 9810
// begin tmp := tmp [ pos [ i ] ] ;
9767: LD_ADDR_VAR 0 6
9771: PUSH
9772: LD_VAR 0 6
9776: PUSH
9777: LD_VAR 0 2
9781: PUSH
9782: LD_VAR 0 5
9786: ARRAY
9787: ARRAY
9788: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9789: LD_ADDR_VAR 0 7
9793: PUSH
9794: LD_VAR 0 7
9798: PUSH
9799: LD_VAR 0 6
9803: PUSH
9804: EMPTY
9805: LIST
9806: ADD
9807: ST_TO_ADDR
// end ;
9808: GO 9764
9810: POP
9811: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9812: LD_ADDR_VAR 0 6
9816: PUSH
9817: LD_VAR 0 6
9821: PPUSH
9822: LD_VAR 0 2
9826: PUSH
9827: LD_VAR 0 2
9831: ARRAY
9832: PPUSH
9833: LD_VAR 0 3
9837: PPUSH
9838: CALL_OW 1
9842: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9843: LD_ADDR_VAR 0 7
9847: PUSH
9848: LD_VAR 0 7
9852: PPUSH
9853: LD_VAR 0 7
9857: PPUSH
9858: LD_VAR 0 6
9862: PPUSH
9863: CALL_OW 1
9867: ST_TO_ADDR
// for i = s_arr downto 2 do
9868: LD_ADDR_VAR 0 5
9872: PUSH
9873: DOUBLE
9874: LD_VAR 0 7
9878: INC
9879: ST_TO_ADDR
9880: LD_INT 2
9882: PUSH
9883: FOR_DOWNTO
9884: IFFALSE 9968
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9886: LD_ADDR_VAR 0 6
9890: PUSH
9891: LD_VAR 0 7
9895: PUSH
9896: LD_VAR 0 5
9900: PUSH
9901: LD_INT 1
9903: MINUS
9904: ARRAY
9905: PPUSH
9906: LD_VAR 0 2
9910: PUSH
9911: LD_VAR 0 5
9915: PUSH
9916: LD_INT 1
9918: MINUS
9919: ARRAY
9920: PPUSH
9921: LD_VAR 0 7
9925: PUSH
9926: LD_VAR 0 5
9930: ARRAY
9931: PPUSH
9932: CALL_OW 1
9936: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9937: LD_ADDR_VAR 0 7
9941: PUSH
9942: LD_VAR 0 7
9946: PPUSH
9947: LD_VAR 0 5
9951: PUSH
9952: LD_INT 1
9954: MINUS
9955: PPUSH
9956: LD_VAR 0 6
9960: PPUSH
9961: CALL_OW 1
9965: ST_TO_ADDR
// end ;
9966: GO 9883
9968: POP
9969: POP
// result := s_arr [ 1 ] ;
9970: LD_ADDR_VAR 0 4
9974: PUSH
9975: LD_VAR 0 7
9979: PUSH
9980: LD_INT 1
9982: ARRAY
9983: ST_TO_ADDR
// end ; end ;
9984: LD_VAR 0 4
9988: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// if not list then
9993: LD_VAR 0 1
9997: NOT
9998: IFFALSE 10002
// exit ;
10000: GO 10093
// i := list [ pos1 ] ;
10002: LD_ADDR_VAR 0 5
10006: PUSH
10007: LD_VAR 0 1
10011: PUSH
10012: LD_VAR 0 2
10016: ARRAY
10017: ST_TO_ADDR
// if not i then
10018: LD_VAR 0 5
10022: NOT
10023: IFFALSE 10027
// exit ;
10025: GO 10093
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10027: LD_ADDR_VAR 0 1
10031: PUSH
10032: LD_VAR 0 1
10036: PPUSH
10037: LD_VAR 0 2
10041: PPUSH
10042: LD_VAR 0 1
10046: PUSH
10047: LD_VAR 0 3
10051: ARRAY
10052: PPUSH
10053: CALL_OW 1
10057: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10058: LD_ADDR_VAR 0 1
10062: PUSH
10063: LD_VAR 0 1
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: LD_VAR 0 5
10077: PPUSH
10078: CALL_OW 1
10082: ST_TO_ADDR
// result := list ;
10083: LD_ADDR_VAR 0 4
10087: PUSH
10088: LD_VAR 0 1
10092: ST_TO_ADDR
// end ;
10093: LD_VAR 0 4
10097: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10098: LD_INT 0
10100: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10101: LD_ADDR_VAR 0 5
10105: PUSH
10106: LD_VAR 0 1
10110: PPUSH
10111: CALL_OW 250
10115: PPUSH
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 251
10125: PPUSH
10126: LD_VAR 0 2
10130: PPUSH
10131: LD_VAR 0 3
10135: PPUSH
10136: LD_VAR 0 4
10140: PPUSH
10141: CALL 10519 0 5
10145: ST_TO_ADDR
// end ;
10146: LD_VAR 0 5
10150: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10151: LD_INT 0
10153: PPUSH
10154: PPUSH
10155: PPUSH
10156: PPUSH
// if not list or not unit then
10157: LD_VAR 0 2
10161: NOT
10162: PUSH
10163: LD_VAR 0 1
10167: NOT
10168: OR
10169: IFFALSE 10173
// exit ;
10171: GO 10514
// result := [ ] ;
10173: LD_ADDR_VAR 0 5
10177: PUSH
10178: EMPTY
10179: ST_TO_ADDR
// for i in list do
10180: LD_ADDR_VAR 0 6
10184: PUSH
10185: LD_VAR 0 2
10189: PUSH
10190: FOR_IN
10191: IFFALSE 10409
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10193: LD_ADDR_VAR 0 8
10197: PUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: LD_VAR 0 6
10207: PUSH
10208: LD_INT 1
10210: ARRAY
10211: PPUSH
10212: LD_VAR 0 6
10216: PUSH
10217: LD_INT 2
10219: ARRAY
10220: PPUSH
10221: CALL_OW 297
10225: ST_TO_ADDR
// if not Count ( result ) then
10226: LD_VAR 0 5
10230: PPUSH
10231: CALL 6803 0 1
10235: NOT
10236: IFFALSE 10269
// begin result := Join ( result , [ i , tmp ] ) ;
10238: LD_ADDR_VAR 0 5
10242: PUSH
10243: LD_VAR 0 5
10247: PPUSH
10248: LD_VAR 0 6
10252: PUSH
10253: LD_VAR 0 8
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PPUSH
10262: CALL 42390 0 2
10266: ST_TO_ADDR
// continue ;
10267: GO 10190
// end ; if result [ result ] [ 2 ] <= tmp then
10269: LD_VAR 0 5
10273: PUSH
10274: LD_VAR 0 5
10278: ARRAY
10279: PUSH
10280: LD_INT 2
10282: ARRAY
10283: PUSH
10284: LD_VAR 0 8
10288: LESSEQUAL
10289: IFFALSE 10322
// result := Join ( result , [ i , tmp ] ) else
10291: LD_ADDR_VAR 0 5
10295: PUSH
10296: LD_VAR 0 5
10300: PPUSH
10301: LD_VAR 0 6
10305: PUSH
10306: LD_VAR 0 8
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL 42390 0 2
10319: ST_TO_ADDR
10320: GO 10407
// begin for j := 1 to Count ( result ) do
10322: LD_ADDR_VAR 0 7
10326: PUSH
10327: DOUBLE
10328: LD_INT 1
10330: DEC
10331: ST_TO_ADDR
10332: LD_VAR 0 5
10336: PPUSH
10337: CALL 6803 0 1
10341: PUSH
10342: FOR_TO
10343: IFFALSE 10405
// begin if tmp < result [ j ] [ 2 ] then
10345: LD_VAR 0 8
10349: PUSH
10350: LD_VAR 0 5
10354: PUSH
10355: LD_VAR 0 7
10359: ARRAY
10360: PUSH
10361: LD_INT 2
10363: ARRAY
10364: LESS
10365: IFFALSE 10403
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10367: LD_ADDR_VAR 0 5
10371: PUSH
10372: LD_VAR 0 5
10376: PPUSH
10377: LD_VAR 0 7
10381: PPUSH
10382: LD_VAR 0 6
10386: PUSH
10387: LD_VAR 0 8
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PPUSH
10396: CALL_OW 2
10400: ST_TO_ADDR
// break ;
10401: GO 10405
// end ; end ;
10403: GO 10342
10405: POP
10406: POP
// end ; end ;
10407: GO 10190
10409: POP
10410: POP
// if result and not asc then
10411: LD_VAR 0 5
10415: PUSH
10416: LD_VAR 0 3
10420: NOT
10421: AND
10422: IFFALSE 10439
// result := ReverseArray ( result ) ;
10424: LD_ADDR_VAR 0 5
10428: PUSH
10429: LD_VAR 0 5
10433: PPUSH
10434: CALL 37679 0 1
10438: ST_TO_ADDR
// tmp := [ ] ;
10439: LD_ADDR_VAR 0 8
10443: PUSH
10444: EMPTY
10445: ST_TO_ADDR
// if mode then
10446: LD_VAR 0 4
10450: IFFALSE 10514
// begin for i := 1 to result do
10452: LD_ADDR_VAR 0 6
10456: PUSH
10457: DOUBLE
10458: LD_INT 1
10460: DEC
10461: ST_TO_ADDR
10462: LD_VAR 0 5
10466: PUSH
10467: FOR_TO
10468: IFFALSE 10502
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10470: LD_ADDR_VAR 0 8
10474: PUSH
10475: LD_VAR 0 8
10479: PPUSH
10480: LD_VAR 0 5
10484: PUSH
10485: LD_VAR 0 6
10489: ARRAY
10490: PUSH
10491: LD_INT 1
10493: ARRAY
10494: PPUSH
10495: CALL 42390 0 2
10499: ST_TO_ADDR
10500: GO 10467
10502: POP
10503: POP
// result := tmp ;
10504: LD_ADDR_VAR 0 5
10508: PUSH
10509: LD_VAR 0 8
10513: ST_TO_ADDR
// end ; end ;
10514: LD_VAR 0 5
10518: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
10523: PPUSH
10524: PPUSH
// if not list then
10525: LD_VAR 0 3
10529: NOT
10530: IFFALSE 10534
// exit ;
10532: GO 10922
// result := [ ] ;
10534: LD_ADDR_VAR 0 6
10538: PUSH
10539: EMPTY
10540: ST_TO_ADDR
// for i in list do
10541: LD_ADDR_VAR 0 7
10545: PUSH
10546: LD_VAR 0 3
10550: PUSH
10551: FOR_IN
10552: IFFALSE 10754
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10554: LD_ADDR_VAR 0 9
10558: PUSH
10559: LD_VAR 0 7
10563: PPUSH
10564: LD_VAR 0 1
10568: PPUSH
10569: LD_VAR 0 2
10573: PPUSH
10574: CALL_OW 297
10578: ST_TO_ADDR
// if not result then
10579: LD_VAR 0 6
10583: NOT
10584: IFFALSE 10610
// result := [ [ i , tmp ] ] else
10586: LD_ADDR_VAR 0 6
10590: PUSH
10591: LD_VAR 0 7
10595: PUSH
10596: LD_VAR 0 9
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: ST_TO_ADDR
10608: GO 10752
// begin if result [ result ] [ 2 ] < tmp then
10610: LD_VAR 0 6
10614: PUSH
10615: LD_VAR 0 6
10619: ARRAY
10620: PUSH
10621: LD_INT 2
10623: ARRAY
10624: PUSH
10625: LD_VAR 0 9
10629: LESS
10630: IFFALSE 10672
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10632: LD_ADDR_VAR 0 6
10636: PUSH
10637: LD_VAR 0 6
10641: PPUSH
10642: LD_VAR 0 6
10646: PUSH
10647: LD_INT 1
10649: PLUS
10650: PPUSH
10651: LD_VAR 0 7
10655: PUSH
10656: LD_VAR 0 9
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PPUSH
10665: CALL_OW 2
10669: ST_TO_ADDR
10670: GO 10752
// for j = 1 to result do
10672: LD_ADDR_VAR 0 8
10676: PUSH
10677: DOUBLE
10678: LD_INT 1
10680: DEC
10681: ST_TO_ADDR
10682: LD_VAR 0 6
10686: PUSH
10687: FOR_TO
10688: IFFALSE 10750
// begin if tmp < result [ j ] [ 2 ] then
10690: LD_VAR 0 9
10694: PUSH
10695: LD_VAR 0 6
10699: PUSH
10700: LD_VAR 0 8
10704: ARRAY
10705: PUSH
10706: LD_INT 2
10708: ARRAY
10709: LESS
10710: IFFALSE 10748
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_VAR 0 6
10721: PPUSH
10722: LD_VAR 0 8
10726: PPUSH
10727: LD_VAR 0 7
10731: PUSH
10732: LD_VAR 0 9
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 2
10745: ST_TO_ADDR
// break ;
10746: GO 10750
// end ; end ;
10748: GO 10687
10750: POP
10751: POP
// end ; end ;
10752: GO 10551
10754: POP
10755: POP
// if result and not asc then
10756: LD_VAR 0 6
10760: PUSH
10761: LD_VAR 0 4
10765: NOT
10766: AND
10767: IFFALSE 10842
// begin tmp := result ;
10769: LD_ADDR_VAR 0 9
10773: PUSH
10774: LD_VAR 0 6
10778: ST_TO_ADDR
// for i = tmp downto 1 do
10779: LD_ADDR_VAR 0 7
10783: PUSH
10784: DOUBLE
10785: LD_VAR 0 9
10789: INC
10790: ST_TO_ADDR
10791: LD_INT 1
10793: PUSH
10794: FOR_DOWNTO
10795: IFFALSE 10840
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10797: LD_ADDR_VAR 0 6
10801: PUSH
10802: LD_VAR 0 6
10806: PPUSH
10807: LD_VAR 0 9
10811: PUSH
10812: LD_VAR 0 7
10816: MINUS
10817: PUSH
10818: LD_INT 1
10820: PLUS
10821: PPUSH
10822: LD_VAR 0 9
10826: PUSH
10827: LD_VAR 0 7
10831: ARRAY
10832: PPUSH
10833: CALL_OW 1
10837: ST_TO_ADDR
10838: GO 10794
10840: POP
10841: POP
// end ; tmp := [ ] ;
10842: LD_ADDR_VAR 0 9
10846: PUSH
10847: EMPTY
10848: ST_TO_ADDR
// if mode then
10849: LD_VAR 0 5
10853: IFFALSE 10922
// begin for i = 1 to result do
10855: LD_ADDR_VAR 0 7
10859: PUSH
10860: DOUBLE
10861: LD_INT 1
10863: DEC
10864: ST_TO_ADDR
10865: LD_VAR 0 6
10869: PUSH
10870: FOR_TO
10871: IFFALSE 10910
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10873: LD_ADDR_VAR 0 9
10877: PUSH
10878: LD_VAR 0 9
10882: PPUSH
10883: LD_VAR 0 7
10887: PPUSH
10888: LD_VAR 0 6
10892: PUSH
10893: LD_VAR 0 7
10897: ARRAY
10898: PUSH
10899: LD_INT 1
10901: ARRAY
10902: PPUSH
10903: CALL_OW 1
10907: ST_TO_ADDR
10908: GO 10870
10910: POP
10911: POP
// result := tmp ;
10912: LD_ADDR_VAR 0 6
10916: PUSH
10917: LD_VAR 0 9
10921: ST_TO_ADDR
// end ; end ;
10922: LD_VAR 0 6
10926: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10927: LD_INT 0
10929: PPUSH
10930: PPUSH
10931: PPUSH
10932: PPUSH
10933: PPUSH
10934: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10935: LD_ADDR_VAR 0 5
10939: PUSH
10940: LD_INT 0
10942: PUSH
10943: LD_INT 0
10945: PUSH
10946: LD_INT 0
10948: PUSH
10949: EMPTY
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: ST_TO_ADDR
// if not x or not y then
10957: LD_VAR 0 2
10961: NOT
10962: PUSH
10963: LD_VAR 0 3
10967: NOT
10968: OR
10969: IFFALSE 10973
// exit ;
10971: GO 12623
// if not range then
10973: LD_VAR 0 4
10977: NOT
10978: IFFALSE 10988
// range := 10 ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_INT 10
10987: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10988: LD_ADDR_VAR 0 8
10992: PUSH
10993: LD_INT 81
10995: PUSH
10996: LD_VAR 0 1
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 92
11007: PUSH
11008: LD_VAR 0 2
11012: PUSH
11013: LD_VAR 0 3
11017: PUSH
11018: LD_VAR 0 4
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: LD_INT 21
11034: PUSH
11035: LD_INT 3
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 69
11055: ST_TO_ADDR
// if not tmp then
11056: LD_VAR 0 8
11060: NOT
11061: IFFALSE 11065
// exit ;
11063: GO 12623
// for i in tmp do
11065: LD_ADDR_VAR 0 6
11069: PUSH
11070: LD_VAR 0 8
11074: PUSH
11075: FOR_IN
11076: IFFALSE 12598
// begin points := [ 0 , 0 , 0 ] ;
11078: LD_ADDR_VAR 0 9
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: LD_INT 0
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: LIST
11096: ST_TO_ADDR
// bpoints := 1 ;
11097: LD_ADDR_VAR 0 10
11101: PUSH
11102: LD_INT 1
11104: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11105: LD_VAR 0 6
11109: PPUSH
11110: CALL_OW 247
11114: PUSH
11115: LD_INT 1
11117: DOUBLE
11118: EQUAL
11119: IFTRUE 11123
11121: GO 11701
11123: POP
// begin if GetClass ( i ) = 1 then
11124: LD_VAR 0 6
11128: PPUSH
11129: CALL_OW 257
11133: PUSH
11134: LD_INT 1
11136: EQUAL
11137: IFFALSE 11158
// points := [ 10 , 5 , 3 ] ;
11139: LD_ADDR_VAR 0 9
11143: PUSH
11144: LD_INT 10
11146: PUSH
11147: LD_INT 5
11149: PUSH
11150: LD_INT 3
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11158: LD_VAR 0 6
11162: PPUSH
11163: CALL_OW 257
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: IN
11182: IFFALSE 11203
// points := [ 3 , 2 , 1 ] ;
11184: LD_ADDR_VAR 0 9
11188: PUSH
11189: LD_INT 3
11191: PUSH
11192: LD_INT 2
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11203: LD_VAR 0 6
11207: PPUSH
11208: CALL_OW 257
11212: PUSH
11213: LD_INT 5
11215: EQUAL
11216: IFFALSE 11237
// points := [ 130 , 5 , 2 ] ;
11218: LD_ADDR_VAR 0 9
11222: PUSH
11223: LD_INT 130
11225: PUSH
11226: LD_INT 5
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11237: LD_VAR 0 6
11241: PPUSH
11242: CALL_OW 257
11246: PUSH
11247: LD_INT 8
11249: EQUAL
11250: IFFALSE 11271
// points := [ 35 , 35 , 30 ] ;
11252: LD_ADDR_VAR 0 9
11256: PUSH
11257: LD_INT 35
11259: PUSH
11260: LD_INT 35
11262: PUSH
11263: LD_INT 30
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11271: LD_VAR 0 6
11275: PPUSH
11276: CALL_OW 257
11280: PUSH
11281: LD_INT 9
11283: EQUAL
11284: IFFALSE 11305
// points := [ 20 , 55 , 40 ] ;
11286: LD_ADDR_VAR 0 9
11290: PUSH
11291: LD_INT 20
11293: PUSH
11294: LD_INT 55
11296: PUSH
11297: LD_INT 40
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11305: LD_VAR 0 6
11309: PPUSH
11310: CALL_OW 257
11314: PUSH
11315: LD_INT 12
11317: PUSH
11318: LD_INT 16
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: IN
11325: IFFALSE 11346
// points := [ 5 , 3 , 2 ] ;
11327: LD_ADDR_VAR 0 9
11331: PUSH
11332: LD_INT 5
11334: PUSH
11335: LD_INT 3
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11346: LD_VAR 0 6
11350: PPUSH
11351: CALL_OW 257
11355: PUSH
11356: LD_INT 17
11358: EQUAL
11359: IFFALSE 11380
// points := [ 100 , 50 , 75 ] ;
11361: LD_ADDR_VAR 0 9
11365: PUSH
11366: LD_INT 100
11368: PUSH
11369: LD_INT 50
11371: PUSH
11372: LD_INT 75
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11380: LD_VAR 0 6
11384: PPUSH
11385: CALL_OW 257
11389: PUSH
11390: LD_INT 15
11392: EQUAL
11393: IFFALSE 11414
// points := [ 10 , 5 , 3 ] ;
11395: LD_ADDR_VAR 0 9
11399: PUSH
11400: LD_INT 10
11402: PUSH
11403: LD_INT 5
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11414: LD_VAR 0 6
11418: PPUSH
11419: CALL_OW 257
11423: PUSH
11424: LD_INT 14
11426: EQUAL
11427: IFFALSE 11448
// points := [ 10 , 0 , 0 ] ;
11429: LD_ADDR_VAR 0 9
11433: PUSH
11434: LD_INT 10
11436: PUSH
11437: LD_INT 0
11439: PUSH
11440: LD_INT 0
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11448: LD_VAR 0 6
11452: PPUSH
11453: CALL_OW 257
11457: PUSH
11458: LD_INT 11
11460: EQUAL
11461: IFFALSE 11482
// points := [ 30 , 10 , 5 ] ;
11463: LD_ADDR_VAR 0 9
11467: PUSH
11468: LD_INT 30
11470: PUSH
11471: LD_INT 10
11473: PUSH
11474: LD_INT 5
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11482: LD_VAR 0 1
11486: PPUSH
11487: LD_INT 5
11489: PPUSH
11490: CALL_OW 321
11494: PUSH
11495: LD_INT 2
11497: EQUAL
11498: IFFALSE 11515
// bpoints := bpoints * 1.8 ;
11500: LD_ADDR_VAR 0 10
11504: PUSH
11505: LD_VAR 0 10
11509: PUSH
11510: LD_REAL  1.80000000000000E+0000
11513: MUL
11514: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11515: LD_VAR 0 6
11519: PPUSH
11520: CALL_OW 257
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: IN
11543: PUSH
11544: LD_VAR 0 1
11548: PPUSH
11549: LD_INT 51
11551: PPUSH
11552: CALL_OW 321
11556: PUSH
11557: LD_INT 2
11559: EQUAL
11560: AND
11561: IFFALSE 11578
// bpoints := bpoints * 1.2 ;
11563: LD_ADDR_VAR 0 10
11567: PUSH
11568: LD_VAR 0 10
11572: PUSH
11573: LD_REAL  1.20000000000000E+0000
11576: MUL
11577: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11578: LD_VAR 0 6
11582: PPUSH
11583: CALL_OW 257
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: LD_INT 7
11593: PUSH
11594: LD_INT 9
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: IN
11602: PUSH
11603: LD_VAR 0 1
11607: PPUSH
11608: LD_INT 52
11610: PPUSH
11611: CALL_OW 321
11615: PUSH
11616: LD_INT 2
11618: EQUAL
11619: AND
11620: IFFALSE 11637
// bpoints := bpoints * 1.5 ;
11622: LD_ADDR_VAR 0 10
11626: PUSH
11627: LD_VAR 0 10
11631: PUSH
11632: LD_REAL  1.50000000000000E+0000
11635: MUL
11636: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_INT 66
11644: PPUSH
11645: CALL_OW 321
11649: PUSH
11650: LD_INT 2
11652: EQUAL
11653: IFFALSE 11670
// bpoints := bpoints * 1.1 ;
11655: LD_ADDR_VAR 0 10
11659: PUSH
11660: LD_VAR 0 10
11664: PUSH
11665: LD_REAL  1.10000000000000E+0000
11668: MUL
11669: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11670: LD_ADDR_VAR 0 10
11674: PUSH
11675: LD_VAR 0 10
11679: PUSH
11680: LD_VAR 0 6
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 259
11692: PUSH
11693: LD_REAL  1.15000000000000E+0000
11696: MUL
11697: MUL
11698: ST_TO_ADDR
// end ; unit_vehicle :
11699: GO 12527
11701: LD_INT 2
11703: DOUBLE
11704: EQUAL
11705: IFTRUE 11709
11707: GO 12515
11709: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11710: LD_VAR 0 6
11714: PPUSH
11715: CALL_OW 264
11719: PUSH
11720: LD_INT 2
11722: PUSH
11723: LD_INT 42
11725: PUSH
11726: LD_INT 24
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: IN
11734: IFFALSE 11755
// points := [ 25 , 5 , 3 ] ;
11736: LD_ADDR_VAR 0 9
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 5
11746: PUSH
11747: LD_INT 3
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11755: LD_VAR 0 6
11759: PPUSH
11760: CALL_OW 264
11764: PUSH
11765: LD_INT 4
11767: PUSH
11768: LD_INT 43
11770: PUSH
11771: LD_INT 25
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: IN
11779: IFFALSE 11800
// points := [ 40 , 15 , 5 ] ;
11781: LD_ADDR_VAR 0 9
11785: PUSH
11786: LD_INT 40
11788: PUSH
11789: LD_INT 15
11791: PUSH
11792: LD_INT 5
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11800: LD_VAR 0 6
11804: PPUSH
11805: CALL_OW 264
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: LD_INT 23
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: IN
11820: IFFALSE 11841
// points := [ 7 , 25 , 8 ] ;
11822: LD_ADDR_VAR 0 9
11826: PUSH
11827: LD_INT 7
11829: PUSH
11830: LD_INT 25
11832: PUSH
11833: LD_INT 8
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11841: LD_VAR 0 6
11845: PPUSH
11846: CALL_OW 264
11850: PUSH
11851: LD_INT 5
11853: PUSH
11854: LD_INT 27
11856: PUSH
11857: LD_INT 44
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: IN
11865: IFFALSE 11886
// points := [ 14 , 50 , 16 ] ;
11867: LD_ADDR_VAR 0 9
11871: PUSH
11872: LD_INT 14
11874: PUSH
11875: LD_INT 50
11877: PUSH
11878: LD_INT 16
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: LIST
11885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11886: LD_VAR 0 6
11890: PPUSH
11891: CALL_OW 264
11895: PUSH
11896: LD_INT 6
11898: PUSH
11899: LD_INT 46
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: IN
11906: IFFALSE 11927
// points := [ 32 , 120 , 70 ] ;
11908: LD_ADDR_VAR 0 9
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: LD_INT 120
11918: PUSH
11919: LD_INT 70
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11927: LD_VAR 0 6
11931: PPUSH
11932: CALL_OW 264
11936: PUSH
11937: LD_INT 7
11939: PUSH
11940: LD_INT 28
11942: PUSH
11943: LD_INT 45
11945: PUSH
11946: LD_INT 92
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: IN
11955: IFFALSE 11976
// points := [ 35 , 20 , 45 ] ;
11957: LD_ADDR_VAR 0 9
11961: PUSH
11962: LD_INT 35
11964: PUSH
11965: LD_INT 20
11967: PUSH
11968: LD_INT 45
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11976: LD_VAR 0 6
11980: PPUSH
11981: CALL_OW 264
11985: PUSH
11986: LD_INT 47
11988: PUSH
11989: EMPTY
11990: LIST
11991: IN
11992: IFFALSE 12013
// points := [ 67 , 45 , 75 ] ;
11994: LD_ADDR_VAR 0 9
11998: PUSH
11999: LD_INT 67
12001: PUSH
12002: LD_INT 45
12004: PUSH
12005: LD_INT 75
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12013: LD_VAR 0 6
12017: PPUSH
12018: CALL_OW 264
12022: PUSH
12023: LD_INT 26
12025: PUSH
12026: EMPTY
12027: LIST
12028: IN
12029: IFFALSE 12050
// points := [ 120 , 30 , 80 ] ;
12031: LD_ADDR_VAR 0 9
12035: PUSH
12036: LD_INT 120
12038: PUSH
12039: LD_INT 30
12041: PUSH
12042: LD_INT 80
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12050: LD_VAR 0 6
12054: PPUSH
12055: CALL_OW 264
12059: PUSH
12060: LD_INT 22
12062: PUSH
12063: EMPTY
12064: LIST
12065: IN
12066: IFFALSE 12087
// points := [ 40 , 1 , 1 ] ;
12068: LD_ADDR_VAR 0 9
12072: PUSH
12073: LD_INT 40
12075: PUSH
12076: LD_INT 1
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12087: LD_VAR 0 6
12091: PPUSH
12092: CALL_OW 264
12096: PUSH
12097: LD_INT 29
12099: PUSH
12100: EMPTY
12101: LIST
12102: IN
12103: IFFALSE 12124
// points := [ 70 , 200 , 400 ] ;
12105: LD_ADDR_VAR 0 9
12109: PUSH
12110: LD_INT 70
12112: PUSH
12113: LD_INT 200
12115: PUSH
12116: LD_INT 400
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12124: LD_VAR 0 6
12128: PPUSH
12129: CALL_OW 264
12133: PUSH
12134: LD_INT 14
12136: PUSH
12137: LD_INT 53
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: IN
12144: IFFALSE 12165
// points := [ 40 , 10 , 20 ] ;
12146: LD_ADDR_VAR 0 9
12150: PUSH
12151: LD_INT 40
12153: PUSH
12154: LD_INT 10
12156: PUSH
12157: LD_INT 20
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12165: LD_VAR 0 6
12169: PPUSH
12170: CALL_OW 264
12174: PUSH
12175: LD_INT 9
12177: PUSH
12178: EMPTY
12179: LIST
12180: IN
12181: IFFALSE 12202
// points := [ 5 , 70 , 20 ] ;
12183: LD_ADDR_VAR 0 9
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: LD_INT 70
12193: PUSH
12194: LD_INT 20
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12202: LD_VAR 0 6
12206: PPUSH
12207: CALL_OW 264
12211: PUSH
12212: LD_INT 10
12214: PUSH
12215: EMPTY
12216: LIST
12217: IN
12218: IFFALSE 12239
// points := [ 35 , 110 , 70 ] ;
12220: LD_ADDR_VAR 0 9
12224: PUSH
12225: LD_INT 35
12227: PUSH
12228: LD_INT 110
12230: PUSH
12231: LD_INT 70
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12239: LD_VAR 0 6
12243: PPUSH
12244: CALL_OW 265
12248: PUSH
12249: LD_INT 25
12251: EQUAL
12252: IFFALSE 12273
// points := [ 80 , 65 , 100 ] ;
12254: LD_ADDR_VAR 0 9
12258: PUSH
12259: LD_INT 80
12261: PUSH
12262: LD_INT 65
12264: PUSH
12265: LD_INT 100
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12273: LD_VAR 0 6
12277: PPUSH
12278: CALL_OW 263
12282: PUSH
12283: LD_INT 1
12285: EQUAL
12286: IFFALSE 12321
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12288: LD_ADDR_VAR 0 10
12292: PUSH
12293: LD_VAR 0 10
12297: PUSH
12298: LD_VAR 0 6
12302: PPUSH
12303: CALL_OW 311
12307: PPUSH
12308: LD_INT 3
12310: PPUSH
12311: CALL_OW 259
12315: PUSH
12316: LD_INT 4
12318: MUL
12319: MUL
12320: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12321: LD_VAR 0 6
12325: PPUSH
12326: CALL_OW 263
12330: PUSH
12331: LD_INT 2
12333: EQUAL
12334: IFFALSE 12385
// begin j := IsControledBy ( i ) ;
12336: LD_ADDR_VAR 0 7
12340: PUSH
12341: LD_VAR 0 6
12345: PPUSH
12346: CALL_OW 312
12350: ST_TO_ADDR
// if j then
12351: LD_VAR 0 7
12355: IFFALSE 12385
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12357: LD_ADDR_VAR 0 10
12361: PUSH
12362: LD_VAR 0 10
12366: PUSH
12367: LD_VAR 0 7
12371: PPUSH
12372: LD_INT 3
12374: PPUSH
12375: CALL_OW 259
12379: PUSH
12380: LD_INT 3
12382: MUL
12383: MUL
12384: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12385: LD_VAR 0 6
12389: PPUSH
12390: CALL_OW 264
12394: PUSH
12395: LD_INT 5
12397: PUSH
12398: LD_INT 6
12400: PUSH
12401: LD_INT 46
12403: PUSH
12404: LD_INT 44
12406: PUSH
12407: LD_INT 47
12409: PUSH
12410: LD_INT 45
12412: PUSH
12413: LD_INT 28
12415: PUSH
12416: LD_INT 7
12418: PUSH
12419: LD_INT 27
12421: PUSH
12422: LD_INT 29
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: IN
12437: PUSH
12438: LD_VAR 0 1
12442: PPUSH
12443: LD_INT 52
12445: PPUSH
12446: CALL_OW 321
12450: PUSH
12451: LD_INT 2
12453: EQUAL
12454: AND
12455: IFFALSE 12472
// bpoints := bpoints * 1.2 ;
12457: LD_ADDR_VAR 0 10
12461: PUSH
12462: LD_VAR 0 10
12466: PUSH
12467: LD_REAL  1.20000000000000E+0000
12470: MUL
12471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12472: LD_VAR 0 6
12476: PPUSH
12477: CALL_OW 264
12481: PUSH
12482: LD_INT 6
12484: PUSH
12485: LD_INT 46
12487: PUSH
12488: LD_INT 47
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: LIST
12495: IN
12496: IFFALSE 12513
// bpoints := bpoints * 1.2 ;
12498: LD_ADDR_VAR 0 10
12502: PUSH
12503: LD_VAR 0 10
12507: PUSH
12508: LD_REAL  1.20000000000000E+0000
12511: MUL
12512: ST_TO_ADDR
// end ; unit_building :
12513: GO 12527
12515: LD_INT 3
12517: DOUBLE
12518: EQUAL
12519: IFTRUE 12523
12521: GO 12526
12523: POP
// ; end ;
12524: GO 12527
12526: POP
// for j = 1 to 3 do
12527: LD_ADDR_VAR 0 7
12531: PUSH
12532: DOUBLE
12533: LD_INT 1
12535: DEC
12536: ST_TO_ADDR
12537: LD_INT 3
12539: PUSH
12540: FOR_TO
12541: IFFALSE 12594
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12543: LD_ADDR_VAR 0 5
12547: PUSH
12548: LD_VAR 0 5
12552: PPUSH
12553: LD_VAR 0 7
12557: PPUSH
12558: LD_VAR 0 5
12562: PUSH
12563: LD_VAR 0 7
12567: ARRAY
12568: PUSH
12569: LD_VAR 0 9
12573: PUSH
12574: LD_VAR 0 7
12578: ARRAY
12579: PUSH
12580: LD_VAR 0 10
12584: MUL
12585: PLUS
12586: PPUSH
12587: CALL_OW 1
12591: ST_TO_ADDR
12592: GO 12540
12594: POP
12595: POP
// end ;
12596: GO 11075
12598: POP
12599: POP
// result := Replace ( result , 4 , tmp ) ;
12600: LD_ADDR_VAR 0 5
12604: PUSH
12605: LD_VAR 0 5
12609: PPUSH
12610: LD_INT 4
12612: PPUSH
12613: LD_VAR 0 8
12617: PPUSH
12618: CALL_OW 1
12622: ST_TO_ADDR
// end ;
12623: LD_VAR 0 5
12627: RET
// export function DangerAtRange ( unit , range ) ; begin
12628: LD_INT 0
12630: PPUSH
// if not unit then
12631: LD_VAR 0 1
12635: NOT
12636: IFFALSE 12640
// exit ;
12638: GO 12685
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12640: LD_ADDR_VAR 0 3
12644: PUSH
12645: LD_VAR 0 1
12649: PPUSH
12650: CALL_OW 255
12654: PPUSH
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 250
12664: PPUSH
12665: LD_VAR 0 1
12669: PPUSH
12670: CALL_OW 251
12674: PPUSH
12675: LD_VAR 0 2
12679: PPUSH
12680: CALL 10927 0 4
12684: ST_TO_ADDR
// end ;
12685: LD_VAR 0 3
12689: RET
// export function DangerInArea ( side , area ) ; begin
12690: LD_INT 0
12692: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12693: LD_ADDR_VAR 0 3
12697: PUSH
12698: LD_VAR 0 2
12702: PPUSH
12703: LD_INT 81
12705: PUSH
12706: LD_VAR 0 1
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 70
12719: ST_TO_ADDR
// end ;
12720: LD_VAR 0 3
12724: RET
// export function IsExtension ( b ) ; begin
12725: LD_INT 0
12727: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12728: LD_ADDR_VAR 0 2
12732: PUSH
12733: LD_VAR 0 1
12737: PUSH
12738: LD_INT 23
12740: PUSH
12741: LD_INT 20
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 17
12749: PUSH
12750: LD_INT 24
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 19
12758: PUSH
12759: LD_INT 16
12761: PUSH
12762: LD_INT 25
12764: PUSH
12765: LD_INT 18
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: IN
12780: ST_TO_ADDR
// end ;
12781: LD_VAR 0 2
12785: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12786: LD_INT 0
12788: PPUSH
12789: PPUSH
12790: PPUSH
// result := [ ] ;
12791: LD_ADDR_VAR 0 4
12795: PUSH
12796: EMPTY
12797: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12798: LD_ADDR_VAR 0 5
12802: PUSH
12803: LD_VAR 0 2
12807: PPUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 70
12822: ST_TO_ADDR
// if not tmp then
12823: LD_VAR 0 5
12827: NOT
12828: IFFALSE 12832
// exit ;
12830: GO 12896
// if checkLink then
12832: LD_VAR 0 3
12836: IFFALSE 12886
// begin for i in tmp do
12838: LD_ADDR_VAR 0 6
12842: PUSH
12843: LD_VAR 0 5
12847: PUSH
12848: FOR_IN
12849: IFFALSE 12884
// if GetBase ( i ) <> base then
12851: LD_VAR 0 6
12855: PPUSH
12856: CALL_OW 274
12860: PUSH
12861: LD_VAR 0 1
12865: NONEQUAL
12866: IFFALSE 12882
// ComLinkToBase ( base , i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: LD_VAR 0 6
12877: PPUSH
12878: CALL_OW 169
12882: GO 12848
12884: POP
12885: POP
// end ; result := tmp ;
12886: LD_ADDR_VAR 0 4
12890: PUSH
12891: LD_VAR 0 5
12895: ST_TO_ADDR
// end ;
12896: LD_VAR 0 4
12900: RET
// export function ComComplete ( units , b ) ; var i ; begin
12901: LD_INT 0
12903: PPUSH
12904: PPUSH
// if not units then
12905: LD_VAR 0 1
12909: NOT
12910: IFFALSE 12914
// exit ;
12912: GO 13004
// for i in units do
12914: LD_ADDR_VAR 0 4
12918: PUSH
12919: LD_VAR 0 1
12923: PUSH
12924: FOR_IN
12925: IFFALSE 13002
// if BuildingStatus ( b ) = bs_build then
12927: LD_VAR 0 2
12931: PPUSH
12932: CALL_OW 461
12936: PUSH
12937: LD_INT 1
12939: EQUAL
12940: IFFALSE 13000
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12942: LD_VAR 0 4
12946: PPUSH
12947: LD_STRING h
12949: PUSH
12950: LD_VAR 0 2
12954: PPUSH
12955: CALL_OW 250
12959: PUSH
12960: LD_VAR 0 2
12964: PPUSH
12965: CALL_OW 251
12969: PUSH
12970: LD_VAR 0 2
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: LD_INT 0
12980: PUSH
12981: LD_INT 0
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: PUSH
12993: EMPTY
12994: LIST
12995: PPUSH
12996: CALL_OW 446
13000: GO 12924
13002: POP
13003: POP
// end ;
13004: LD_VAR 0 3
13008: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13017: LD_VAR 0 1
13021: NOT
13022: PUSH
13023: LD_VAR 0 1
13027: PPUSH
13028: CALL_OW 263
13032: PUSH
13033: LD_INT 2
13035: NONEQUAL
13036: OR
13037: IFFALSE 13041
// exit ;
13039: GO 13357
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13041: LD_ADDR_VAR 0 6
13045: PUSH
13046: LD_INT 22
13048: PUSH
13049: LD_VAR 0 1
13053: PPUSH
13054: CALL_OW 255
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: LD_INT 30
13068: PUSH
13069: LD_INT 36
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 34
13078: PUSH
13079: LD_INT 31
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PPUSH
13095: CALL_OW 69
13099: ST_TO_ADDR
// if not tmp then
13100: LD_VAR 0 6
13104: NOT
13105: IFFALSE 13109
// exit ;
13107: GO 13357
// result := [ ] ;
13109: LD_ADDR_VAR 0 2
13113: PUSH
13114: EMPTY
13115: ST_TO_ADDR
// for i in tmp do
13116: LD_ADDR_VAR 0 3
13120: PUSH
13121: LD_VAR 0 6
13125: PUSH
13126: FOR_IN
13127: IFFALSE 13198
// begin t := UnitsInside ( i ) ;
13129: LD_ADDR_VAR 0 4
13133: PUSH
13134: LD_VAR 0 3
13138: PPUSH
13139: CALL_OW 313
13143: ST_TO_ADDR
// if t then
13144: LD_VAR 0 4
13148: IFFALSE 13196
// for j in t do
13150: LD_ADDR_VAR 0 7
13154: PUSH
13155: LD_VAR 0 4
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13194
// result := Replace ( result , result + 1 , j ) ;
13163: LD_ADDR_VAR 0 2
13167: PUSH
13168: LD_VAR 0 2
13172: PPUSH
13173: LD_VAR 0 2
13177: PUSH
13178: LD_INT 1
13180: PLUS
13181: PPUSH
13182: LD_VAR 0 7
13186: PPUSH
13187: CALL_OW 1
13191: ST_TO_ADDR
13192: GO 13160
13194: POP
13195: POP
// end ;
13196: GO 13126
13198: POP
13199: POP
// if not result then
13200: LD_VAR 0 2
13204: NOT
13205: IFFALSE 13209
// exit ;
13207: GO 13357
// mech := result [ 1 ] ;
13209: LD_ADDR_VAR 0 5
13213: PUSH
13214: LD_VAR 0 2
13218: PUSH
13219: LD_INT 1
13221: ARRAY
13222: ST_TO_ADDR
// if result > 1 then
13223: LD_VAR 0 2
13227: PUSH
13228: LD_INT 1
13230: GREATER
13231: IFFALSE 13343
// begin for i = 2 to result do
13233: LD_ADDR_VAR 0 3
13237: PUSH
13238: DOUBLE
13239: LD_INT 2
13241: DEC
13242: ST_TO_ADDR
13243: LD_VAR 0 2
13247: PUSH
13248: FOR_TO
13249: IFFALSE 13341
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13251: LD_ADDR_VAR 0 4
13255: PUSH
13256: LD_VAR 0 2
13260: PUSH
13261: LD_VAR 0 3
13265: ARRAY
13266: PPUSH
13267: LD_INT 3
13269: PPUSH
13270: CALL_OW 259
13274: PUSH
13275: LD_VAR 0 2
13279: PUSH
13280: LD_VAR 0 3
13284: ARRAY
13285: PPUSH
13286: CALL_OW 432
13290: MINUS
13291: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13292: LD_VAR 0 4
13296: PUSH
13297: LD_VAR 0 5
13301: PPUSH
13302: LD_INT 3
13304: PPUSH
13305: CALL_OW 259
13309: PUSH
13310: LD_VAR 0 5
13314: PPUSH
13315: CALL_OW 432
13319: MINUS
13320: GREATEREQUAL
13321: IFFALSE 13339
// mech := result [ i ] ;
13323: LD_ADDR_VAR 0 5
13327: PUSH
13328: LD_VAR 0 2
13332: PUSH
13333: LD_VAR 0 3
13337: ARRAY
13338: ST_TO_ADDR
// end ;
13339: GO 13248
13341: POP
13342: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13343: LD_VAR 0 1
13347: PPUSH
13348: LD_VAR 0 5
13352: PPUSH
13353: CALL_OW 135
// end ;
13357: LD_VAR 0 2
13361: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13362: LD_INT 0
13364: PPUSH
13365: PPUSH
13366: PPUSH
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
// result := [ ] ;
13377: LD_ADDR_VAR 0 7
13381: PUSH
13382: EMPTY
13383: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13384: LD_VAR 0 1
13388: PPUSH
13389: CALL_OW 266
13393: PUSH
13394: LD_INT 0
13396: PUSH
13397: LD_INT 1
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: IN
13404: NOT
13405: IFFALSE 13409
// exit ;
13407: GO 15043
// if name then
13409: LD_VAR 0 3
13413: IFFALSE 13429
// SetBName ( base_dep , name ) ;
13415: LD_VAR 0 1
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 500
// base := GetBase ( base_dep ) ;
13429: LD_ADDR_VAR 0 15
13433: PUSH
13434: LD_VAR 0 1
13438: PPUSH
13439: CALL_OW 274
13443: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13444: LD_ADDR_VAR 0 16
13448: PUSH
13449: LD_VAR 0 1
13453: PPUSH
13454: CALL_OW 255
13458: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13459: LD_ADDR_VAR 0 17
13463: PUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL_OW 248
13473: ST_TO_ADDR
// if sources then
13474: LD_VAR 0 5
13478: IFFALSE 13525
// for i = 1 to 3 do
13480: LD_ADDR_VAR 0 8
13484: PUSH
13485: DOUBLE
13486: LD_INT 1
13488: DEC
13489: ST_TO_ADDR
13490: LD_INT 3
13492: PUSH
13493: FOR_TO
13494: IFFALSE 13523
// AddResourceType ( base , i , sources [ i ] ) ;
13496: LD_VAR 0 15
13500: PPUSH
13501: LD_VAR 0 8
13505: PPUSH
13506: LD_VAR 0 5
13510: PUSH
13511: LD_VAR 0 8
13515: ARRAY
13516: PPUSH
13517: CALL_OW 276
13521: GO 13493
13523: POP
13524: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13525: LD_ADDR_VAR 0 18
13529: PUSH
13530: LD_VAR 0 15
13534: PPUSH
13535: LD_VAR 0 2
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL 12786 0 3
13547: ST_TO_ADDR
// InitHc ;
13548: CALL_OW 19
// InitUc ;
13552: CALL_OW 18
// uc_side := side ;
13556: LD_ADDR_OWVAR 20
13560: PUSH
13561: LD_VAR 0 16
13565: ST_TO_ADDR
// uc_nation := nation ;
13566: LD_ADDR_OWVAR 21
13570: PUSH
13571: LD_VAR 0 17
13575: ST_TO_ADDR
// if buildings then
13576: LD_VAR 0 18
13580: IFFALSE 14902
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13582: LD_ADDR_VAR 0 19
13586: PUSH
13587: LD_VAR 0 18
13591: PPUSH
13592: LD_INT 2
13594: PUSH
13595: LD_INT 30
13597: PUSH
13598: LD_INT 29
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 30
13607: PUSH
13608: LD_INT 30
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 72
13624: ST_TO_ADDR
// if tmp then
13625: LD_VAR 0 19
13629: IFFALSE 13677
// for i in tmp do
13631: LD_ADDR_VAR 0 8
13635: PUSH
13636: LD_VAR 0 19
13640: PUSH
13641: FOR_IN
13642: IFFALSE 13675
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13644: LD_VAR 0 8
13648: PPUSH
13649: CALL_OW 250
13653: PPUSH
13654: LD_VAR 0 8
13658: PPUSH
13659: CALL_OW 251
13663: PPUSH
13664: LD_VAR 0 16
13668: PPUSH
13669: CALL_OW 441
13673: GO 13641
13675: POP
13676: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13677: LD_VAR 0 18
13681: PPUSH
13682: LD_INT 2
13684: PUSH
13685: LD_INT 30
13687: PUSH
13688: LD_INT 32
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 30
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: PPUSH
13710: CALL_OW 72
13714: IFFALSE 13802
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13716: LD_ADDR_VAR 0 8
13720: PUSH
13721: LD_VAR 0 18
13725: PPUSH
13726: LD_INT 2
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: LD_INT 32
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 33
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PPUSH
13754: CALL_OW 72
13758: PUSH
13759: FOR_IN
13760: IFFALSE 13800
// begin if not GetBWeapon ( i ) then
13762: LD_VAR 0 8
13766: PPUSH
13767: CALL_OW 269
13771: NOT
13772: IFFALSE 13798
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13774: LD_VAR 0 8
13778: PPUSH
13779: LD_VAR 0 8
13783: PPUSH
13784: LD_VAR 0 2
13788: PPUSH
13789: CALL 15048 0 2
13793: PPUSH
13794: CALL_OW 431
// end ;
13798: GO 13759
13800: POP
13801: POP
// end ; for i = 1 to personel do
13802: LD_ADDR_VAR 0 8
13806: PUSH
13807: DOUBLE
13808: LD_INT 1
13810: DEC
13811: ST_TO_ADDR
13812: LD_VAR 0 6
13816: PUSH
13817: FOR_TO
13818: IFFALSE 14882
// begin if i > 4 then
13820: LD_VAR 0 8
13824: PUSH
13825: LD_INT 4
13827: GREATER
13828: IFFALSE 13832
// break ;
13830: GO 14882
// case i of 1 :
13832: LD_VAR 0 8
13836: PUSH
13837: LD_INT 1
13839: DOUBLE
13840: EQUAL
13841: IFTRUE 13845
13843: GO 13925
13845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13846: LD_ADDR_VAR 0 12
13850: PUSH
13851: LD_VAR 0 18
13855: PPUSH
13856: LD_INT 22
13858: PUSH
13859: LD_VAR 0 16
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 58
13870: PUSH
13871: EMPTY
13872: LIST
13873: PUSH
13874: LD_INT 2
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 32
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 30
13889: PUSH
13890: LD_INT 4
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 30
13899: PUSH
13900: LD_INT 5
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: LIST
13917: PPUSH
13918: CALL_OW 72
13922: ST_TO_ADDR
13923: GO 14147
13925: LD_INT 2
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13995
13933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13934: LD_ADDR_VAR 0 12
13938: PUSH
13939: LD_VAR 0 18
13943: PPUSH
13944: LD_INT 22
13946: PUSH
13947: LD_VAR 0 16
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 30
13961: PUSH
13962: LD_INT 0
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 30
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL_OW 72
13992: ST_TO_ADDR
13993: GO 14147
13995: LD_INT 3
13997: DOUBLE
13998: EQUAL
13999: IFTRUE 14003
14001: GO 14065
14003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14004: LD_ADDR_VAR 0 12
14008: PUSH
14009: LD_VAR 0 18
14013: PPUSH
14014: LD_INT 22
14016: PUSH
14017: LD_VAR 0 16
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 2
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PPUSH
14058: CALL_OW 72
14062: ST_TO_ADDR
14063: GO 14147
14065: LD_INT 4
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14146
14073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14074: LD_ADDR_VAR 0 12
14078: PUSH
14079: LD_VAR 0 18
14083: PPUSH
14084: LD_INT 22
14086: PUSH
14087: LD_VAR 0 16
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: LD_INT 30
14101: PUSH
14102: LD_INT 6
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 30
14111: PUSH
14112: LD_INT 7
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 30
14121: PUSH
14122: LD_INT 8
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PPUSH
14139: CALL_OW 72
14143: ST_TO_ADDR
14144: GO 14147
14146: POP
// if i = 1 then
14147: LD_VAR 0 8
14151: PUSH
14152: LD_INT 1
14154: EQUAL
14155: IFFALSE 14266
// begin tmp := [ ] ;
14157: LD_ADDR_VAR 0 19
14161: PUSH
14162: EMPTY
14163: ST_TO_ADDR
// for j in f do
14164: LD_ADDR_VAR 0 9
14168: PUSH
14169: LD_VAR 0 12
14173: PUSH
14174: FOR_IN
14175: IFFALSE 14248
// if GetBType ( j ) = b_bunker then
14177: LD_VAR 0 9
14181: PPUSH
14182: CALL_OW 266
14186: PUSH
14187: LD_INT 32
14189: EQUAL
14190: IFFALSE 14217
// tmp := Insert ( tmp , 1 , j ) else
14192: LD_ADDR_VAR 0 19
14196: PUSH
14197: LD_VAR 0 19
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 9
14209: PPUSH
14210: CALL_OW 2
14214: ST_TO_ADDR
14215: GO 14246
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14217: LD_ADDR_VAR 0 19
14221: PUSH
14222: LD_VAR 0 19
14226: PPUSH
14227: LD_VAR 0 19
14231: PUSH
14232: LD_INT 1
14234: PLUS
14235: PPUSH
14236: LD_VAR 0 9
14240: PPUSH
14241: CALL_OW 2
14245: ST_TO_ADDR
14246: GO 14174
14248: POP
14249: POP
// if tmp then
14250: LD_VAR 0 19
14254: IFFALSE 14266
// f := tmp ;
14256: LD_ADDR_VAR 0 12
14260: PUSH
14261: LD_VAR 0 19
14265: ST_TO_ADDR
// end ; x := personel [ i ] ;
14266: LD_ADDR_VAR 0 13
14270: PUSH
14271: LD_VAR 0 6
14275: PUSH
14276: LD_VAR 0 8
14280: ARRAY
14281: ST_TO_ADDR
// if x = - 1 then
14282: LD_VAR 0 13
14286: PUSH
14287: LD_INT 1
14289: NEG
14290: EQUAL
14291: IFFALSE 14500
// begin for j in f do
14293: LD_ADDR_VAR 0 9
14297: PUSH
14298: LD_VAR 0 12
14302: PUSH
14303: FOR_IN
14304: IFFALSE 14496
// repeat InitHc ;
14306: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14310: LD_VAR 0 9
14314: PPUSH
14315: CALL_OW 266
14319: PUSH
14320: LD_INT 5
14322: EQUAL
14323: IFFALSE 14393
// begin if UnitsInside ( j ) < 3 then
14325: LD_VAR 0 9
14329: PPUSH
14330: CALL_OW 313
14334: PUSH
14335: LD_INT 3
14337: LESS
14338: IFFALSE 14374
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14340: LD_INT 0
14342: PPUSH
14343: LD_INT 5
14345: PUSH
14346: LD_INT 8
14348: PUSH
14349: LD_INT 9
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: LD_VAR 0 17
14361: ARRAY
14362: PPUSH
14363: LD_VAR 0 4
14367: PPUSH
14368: CALL_OW 380
14372: GO 14391
// PrepareHuman ( false , i , skill ) ;
14374: LD_INT 0
14376: PPUSH
14377: LD_VAR 0 8
14381: PPUSH
14382: LD_VAR 0 4
14386: PPUSH
14387: CALL_OW 380
// end else
14391: GO 14410
// PrepareHuman ( false , i , skill ) ;
14393: LD_INT 0
14395: PPUSH
14396: LD_VAR 0 8
14400: PPUSH
14401: LD_VAR 0 4
14405: PPUSH
14406: CALL_OW 380
// un := CreateHuman ;
14410: LD_ADDR_VAR 0 14
14414: PUSH
14415: CALL_OW 44
14419: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14420: LD_ADDR_VAR 0 7
14424: PUSH
14425: LD_VAR 0 7
14429: PPUSH
14430: LD_INT 1
14432: PPUSH
14433: LD_VAR 0 14
14437: PPUSH
14438: CALL_OW 2
14442: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14443: LD_VAR 0 14
14447: PPUSH
14448: LD_VAR 0 9
14452: PPUSH
14453: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14457: LD_VAR 0 9
14461: PPUSH
14462: CALL_OW 313
14466: PUSH
14467: LD_INT 6
14469: EQUAL
14470: PUSH
14471: LD_VAR 0 9
14475: PPUSH
14476: CALL_OW 266
14480: PUSH
14481: LD_INT 32
14483: PUSH
14484: LD_INT 31
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: IN
14491: OR
14492: IFFALSE 14306
14494: GO 14303
14496: POP
14497: POP
// end else
14498: GO 14880
// for j = 1 to x do
14500: LD_ADDR_VAR 0 9
14504: PUSH
14505: DOUBLE
14506: LD_INT 1
14508: DEC
14509: ST_TO_ADDR
14510: LD_VAR 0 13
14514: PUSH
14515: FOR_TO
14516: IFFALSE 14878
// begin InitHc ;
14518: CALL_OW 19
// if not f then
14522: LD_VAR 0 12
14526: NOT
14527: IFFALSE 14616
// begin PrepareHuman ( false , i , skill ) ;
14529: LD_INT 0
14531: PPUSH
14532: LD_VAR 0 8
14536: PPUSH
14537: LD_VAR 0 4
14541: PPUSH
14542: CALL_OW 380
// un := CreateHuman ;
14546: LD_ADDR_VAR 0 14
14550: PUSH
14551: CALL_OW 44
14555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14556: LD_ADDR_VAR 0 7
14560: PUSH
14561: LD_VAR 0 7
14565: PPUSH
14566: LD_INT 1
14568: PPUSH
14569: LD_VAR 0 14
14573: PPUSH
14574: CALL_OW 2
14578: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14579: LD_VAR 0 14
14583: PPUSH
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 250
14593: PPUSH
14594: LD_VAR 0 1
14598: PPUSH
14599: CALL_OW 251
14603: PPUSH
14604: LD_INT 10
14606: PPUSH
14607: LD_INT 0
14609: PPUSH
14610: CALL_OW 50
// continue ;
14614: GO 14515
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14616: LD_VAR 0 12
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PPUSH
14625: CALL_OW 313
14629: PUSH
14630: LD_VAR 0 12
14634: PUSH
14635: LD_INT 1
14637: ARRAY
14638: PPUSH
14639: CALL_OW 266
14643: PUSH
14644: LD_INT 32
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: IN
14654: AND
14655: PUSH
14656: LD_VAR 0 12
14660: PUSH
14661: LD_INT 1
14663: ARRAY
14664: PPUSH
14665: CALL_OW 313
14669: PUSH
14670: LD_INT 6
14672: EQUAL
14673: OR
14674: IFFALSE 14694
// f := Delete ( f , 1 ) ;
14676: LD_ADDR_VAR 0 12
14680: PUSH
14681: LD_VAR 0 12
14685: PPUSH
14686: LD_INT 1
14688: PPUSH
14689: CALL_OW 3
14693: ST_TO_ADDR
// if not f then
14694: LD_VAR 0 12
14698: NOT
14699: IFFALSE 14717
// begin x := x + 2 ;
14701: LD_ADDR_VAR 0 13
14705: PUSH
14706: LD_VAR 0 13
14710: PUSH
14711: LD_INT 2
14713: PLUS
14714: ST_TO_ADDR
// continue ;
14715: GO 14515
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14717: LD_VAR 0 12
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: CALL_OW 266
14730: PUSH
14731: LD_INT 5
14733: EQUAL
14734: IFFALSE 14808
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14736: LD_VAR 0 12
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PPUSH
14745: CALL_OW 313
14749: PUSH
14750: LD_INT 3
14752: LESS
14753: IFFALSE 14789
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14755: LD_INT 0
14757: PPUSH
14758: LD_INT 5
14760: PUSH
14761: LD_INT 8
14763: PUSH
14764: LD_INT 9
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: LIST
14771: PUSH
14772: LD_VAR 0 17
14776: ARRAY
14777: PPUSH
14778: LD_VAR 0 4
14782: PPUSH
14783: CALL_OW 380
14787: GO 14806
// PrepareHuman ( false , i , skill ) ;
14789: LD_INT 0
14791: PPUSH
14792: LD_VAR 0 8
14796: PPUSH
14797: LD_VAR 0 4
14801: PPUSH
14802: CALL_OW 380
// end else
14806: GO 14825
// PrepareHuman ( false , i , skill ) ;
14808: LD_INT 0
14810: PPUSH
14811: LD_VAR 0 8
14815: PPUSH
14816: LD_VAR 0 4
14820: PPUSH
14821: CALL_OW 380
// un := CreateHuman ;
14825: LD_ADDR_VAR 0 14
14829: PUSH
14830: CALL_OW 44
14834: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14835: LD_ADDR_VAR 0 7
14839: PUSH
14840: LD_VAR 0 7
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_VAR 0 14
14852: PPUSH
14853: CALL_OW 2
14857: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14858: LD_VAR 0 14
14862: PPUSH
14863: LD_VAR 0 12
14867: PUSH
14868: LD_INT 1
14870: ARRAY
14871: PPUSH
14872: CALL_OW 52
// end ;
14876: GO 14515
14878: POP
14879: POP
// end ;
14880: GO 13817
14882: POP
14883: POP
// result := result ^ buildings ;
14884: LD_ADDR_VAR 0 7
14888: PUSH
14889: LD_VAR 0 7
14893: PUSH
14894: LD_VAR 0 18
14898: ADD
14899: ST_TO_ADDR
// end else
14900: GO 15043
// begin for i = 1 to personel do
14902: LD_ADDR_VAR 0 8
14906: PUSH
14907: DOUBLE
14908: LD_INT 1
14910: DEC
14911: ST_TO_ADDR
14912: LD_VAR 0 6
14916: PUSH
14917: FOR_TO
14918: IFFALSE 15041
// begin if i > 4 then
14920: LD_VAR 0 8
14924: PUSH
14925: LD_INT 4
14927: GREATER
14928: IFFALSE 14932
// break ;
14930: GO 15041
// x := personel [ i ] ;
14932: LD_ADDR_VAR 0 13
14936: PUSH
14937: LD_VAR 0 6
14941: PUSH
14942: LD_VAR 0 8
14946: ARRAY
14947: ST_TO_ADDR
// if x = - 1 then
14948: LD_VAR 0 13
14952: PUSH
14953: LD_INT 1
14955: NEG
14956: EQUAL
14957: IFFALSE 14961
// continue ;
14959: GO 14917
// PrepareHuman ( false , i , skill ) ;
14961: LD_INT 0
14963: PPUSH
14964: LD_VAR 0 8
14968: PPUSH
14969: LD_VAR 0 4
14973: PPUSH
14974: CALL_OW 380
// un := CreateHuman ;
14978: LD_ADDR_VAR 0 14
14982: PUSH
14983: CALL_OW 44
14987: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14988: LD_VAR 0 14
14992: PPUSH
14993: LD_VAR 0 1
14997: PPUSH
14998: CALL_OW 250
15002: PPUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 251
15012: PPUSH
15013: LD_INT 10
15015: PPUSH
15016: LD_INT 0
15018: PPUSH
15019: CALL_OW 50
// result := result ^ un ;
15023: LD_ADDR_VAR 0 7
15027: PUSH
15028: LD_VAR 0 7
15032: PUSH
15033: LD_VAR 0 14
15037: ADD
15038: ST_TO_ADDR
// end ;
15039: GO 14917
15041: POP
15042: POP
// end ; end ;
15043: LD_VAR 0 7
15047: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15048: LD_INT 0
15050: PPUSH
15051: PPUSH
15052: PPUSH
15053: PPUSH
15054: PPUSH
15055: PPUSH
15056: PPUSH
15057: PPUSH
15058: PPUSH
15059: PPUSH
15060: PPUSH
15061: PPUSH
15062: PPUSH
15063: PPUSH
15064: PPUSH
15065: PPUSH
// result := false ;
15066: LD_ADDR_VAR 0 3
15070: PUSH
15071: LD_INT 0
15073: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15074: LD_VAR 0 1
15078: NOT
15079: PUSH
15080: LD_VAR 0 1
15084: PPUSH
15085: CALL_OW 266
15089: PUSH
15090: LD_INT 32
15092: PUSH
15093: LD_INT 33
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: IN
15100: NOT
15101: OR
15102: IFFALSE 15106
// exit ;
15104: GO 16215
// nat := GetNation ( tower ) ;
15106: LD_ADDR_VAR 0 12
15110: PUSH
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 248
15120: ST_TO_ADDR
// side := GetSide ( tower ) ;
15121: LD_ADDR_VAR 0 16
15125: PUSH
15126: LD_VAR 0 1
15130: PPUSH
15131: CALL_OW 255
15135: ST_TO_ADDR
// x := GetX ( tower ) ;
15136: LD_ADDR_VAR 0 10
15140: PUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 250
15150: ST_TO_ADDR
// y := GetY ( tower ) ;
15151: LD_ADDR_VAR 0 11
15155: PUSH
15156: LD_VAR 0 1
15160: PPUSH
15161: CALL_OW 251
15165: ST_TO_ADDR
// if not x or not y then
15166: LD_VAR 0 10
15170: NOT
15171: PUSH
15172: LD_VAR 0 11
15176: NOT
15177: OR
15178: IFFALSE 15182
// exit ;
15180: GO 16215
// weapon := 0 ;
15182: LD_ADDR_VAR 0 18
15186: PUSH
15187: LD_INT 0
15189: ST_TO_ADDR
// fac_list := [ ] ;
15190: LD_ADDR_VAR 0 17
15194: PUSH
15195: EMPTY
15196: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15197: LD_ADDR_VAR 0 6
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 274
15211: PPUSH
15212: LD_VAR 0 2
15216: PPUSH
15217: LD_INT 0
15219: PPUSH
15220: CALL 12786 0 3
15224: PPUSH
15225: LD_INT 30
15227: PUSH
15228: LD_INT 3
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PPUSH
15235: CALL_OW 72
15239: ST_TO_ADDR
// if not factories then
15240: LD_VAR 0 6
15244: NOT
15245: IFFALSE 15249
// exit ;
15247: GO 16215
// for i in factories do
15249: LD_ADDR_VAR 0 8
15253: PUSH
15254: LD_VAR 0 6
15258: PUSH
15259: FOR_IN
15260: IFFALSE 15285
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15262: LD_ADDR_VAR 0 17
15266: PUSH
15267: LD_VAR 0 17
15271: PUSH
15272: LD_VAR 0 8
15276: PPUSH
15277: CALL_OW 478
15281: UNION
15282: ST_TO_ADDR
15283: GO 15259
15285: POP
15286: POP
// if not fac_list then
15287: LD_VAR 0 17
15291: NOT
15292: IFFALSE 15296
// exit ;
15294: GO 16215
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: LD_INT 5
15306: PUSH
15307: LD_INT 9
15309: PUSH
15310: LD_INT 10
15312: PUSH
15313: LD_INT 6
15315: PUSH
15316: LD_INT 7
15318: PUSH
15319: LD_INT 11
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 27
15333: PUSH
15334: LD_INT 28
15336: PUSH
15337: LD_INT 26
15339: PUSH
15340: LD_INT 30
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 43
15351: PUSH
15352: LD_INT 44
15354: PUSH
15355: LD_INT 46
15357: PUSH
15358: LD_INT 45
15360: PUSH
15361: LD_INT 47
15363: PUSH
15364: LD_INT 49
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: LD_VAR 0 12
15384: ARRAY
15385: ST_TO_ADDR
// list := list isect fac_list ;
15386: LD_ADDR_VAR 0 5
15390: PUSH
15391: LD_VAR 0 5
15395: PUSH
15396: LD_VAR 0 17
15400: ISECT
15401: ST_TO_ADDR
// if not list then
15402: LD_VAR 0 5
15406: NOT
15407: IFFALSE 15411
// exit ;
15409: GO 16215
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15411: LD_VAR 0 12
15415: PUSH
15416: LD_INT 3
15418: EQUAL
15419: PUSH
15420: LD_INT 49
15422: PUSH
15423: LD_VAR 0 5
15427: IN
15428: AND
15429: PUSH
15430: LD_INT 31
15432: PPUSH
15433: LD_VAR 0 16
15437: PPUSH
15438: CALL_OW 321
15442: PUSH
15443: LD_INT 2
15445: EQUAL
15446: AND
15447: IFFALSE 15507
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15449: LD_INT 22
15451: PUSH
15452: LD_VAR 0 16
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 35
15463: PUSH
15464: LD_INT 49
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 91
15473: PUSH
15474: LD_VAR 0 1
15478: PUSH
15479: LD_INT 10
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 69
15496: NOT
15497: IFFALSE 15507
// weapon := ru_time_lapser ;
15499: LD_ADDR_VAR 0 18
15503: PUSH
15504: LD_INT 49
15506: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15507: LD_VAR 0 12
15511: PUSH
15512: LD_INT 1
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: IN
15522: PUSH
15523: LD_INT 11
15525: PUSH
15526: LD_VAR 0 5
15530: IN
15531: PUSH
15532: LD_INT 30
15534: PUSH
15535: LD_VAR 0 5
15539: IN
15540: OR
15541: AND
15542: PUSH
15543: LD_INT 6
15545: PPUSH
15546: LD_VAR 0 16
15550: PPUSH
15551: CALL_OW 321
15555: PUSH
15556: LD_INT 2
15558: EQUAL
15559: AND
15560: IFFALSE 15725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15562: LD_INT 22
15564: PUSH
15565: LD_VAR 0 16
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: LD_INT 35
15579: PUSH
15580: LD_INT 11
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 35
15589: PUSH
15590: LD_INT 30
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 91
15604: PUSH
15605: LD_VAR 0 1
15609: PUSH
15610: LD_INT 18
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: NOT
15628: PUSH
15629: LD_INT 22
15631: PUSH
15632: LD_VAR 0 16
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: LD_INT 30
15646: PUSH
15647: LD_INT 32
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 33
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 91
15671: PUSH
15672: LD_VAR 0 1
15676: PUSH
15677: LD_INT 12
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: PPUSH
15693: CALL_OW 69
15697: PUSH
15698: LD_INT 2
15700: GREATER
15701: AND
15702: IFFALSE 15725
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15704: LD_ADDR_VAR 0 18
15708: PUSH
15709: LD_INT 11
15711: PUSH
15712: LD_INT 30
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_VAR 0 12
15723: ARRAY
15724: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15725: LD_VAR 0 18
15729: NOT
15730: PUSH
15731: LD_INT 40
15733: PPUSH
15734: LD_VAR 0 16
15738: PPUSH
15739: CALL_OW 321
15743: PUSH
15744: LD_INT 2
15746: EQUAL
15747: AND
15748: PUSH
15749: LD_INT 7
15751: PUSH
15752: LD_VAR 0 5
15756: IN
15757: PUSH
15758: LD_INT 28
15760: PUSH
15761: LD_VAR 0 5
15765: IN
15766: OR
15767: PUSH
15768: LD_INT 45
15770: PUSH
15771: LD_VAR 0 5
15775: IN
15776: OR
15777: AND
15778: IFFALSE 16032
// begin hex := GetHexInfo ( x , y ) ;
15780: LD_ADDR_VAR 0 4
15784: PUSH
15785: LD_VAR 0 10
15789: PPUSH
15790: LD_VAR 0 11
15794: PPUSH
15795: CALL_OW 546
15799: ST_TO_ADDR
// if hex [ 1 ] then
15800: LD_VAR 0 4
15804: PUSH
15805: LD_INT 1
15807: ARRAY
15808: IFFALSE 15812
// exit ;
15810: GO 16215
// height := hex [ 2 ] ;
15812: LD_ADDR_VAR 0 15
15816: PUSH
15817: LD_VAR 0 4
15821: PUSH
15822: LD_INT 2
15824: ARRAY
15825: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15826: LD_ADDR_VAR 0 14
15830: PUSH
15831: LD_INT 0
15833: PUSH
15834: LD_INT 2
15836: PUSH
15837: LD_INT 3
15839: PUSH
15840: LD_INT 5
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: ST_TO_ADDR
// for i in tmp do
15849: LD_ADDR_VAR 0 8
15853: PUSH
15854: LD_VAR 0 14
15858: PUSH
15859: FOR_IN
15860: IFFALSE 16030
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15862: LD_ADDR_VAR 0 9
15866: PUSH
15867: LD_VAR 0 10
15871: PPUSH
15872: LD_VAR 0 8
15876: PPUSH
15877: LD_INT 5
15879: PPUSH
15880: CALL_OW 272
15884: PUSH
15885: LD_VAR 0 11
15889: PPUSH
15890: LD_VAR 0 8
15894: PPUSH
15895: LD_INT 5
15897: PPUSH
15898: CALL_OW 273
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15907: LD_VAR 0 9
15911: PUSH
15912: LD_INT 1
15914: ARRAY
15915: PPUSH
15916: LD_VAR 0 9
15920: PUSH
15921: LD_INT 2
15923: ARRAY
15924: PPUSH
15925: CALL_OW 488
15929: IFFALSE 16028
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15931: LD_ADDR_VAR 0 4
15935: PUSH
15936: LD_VAR 0 9
15940: PUSH
15941: LD_INT 1
15943: ARRAY
15944: PPUSH
15945: LD_VAR 0 9
15949: PUSH
15950: LD_INT 2
15952: ARRAY
15953: PPUSH
15954: CALL_OW 546
15958: ST_TO_ADDR
// if hex [ 1 ] then
15959: LD_VAR 0 4
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: IFFALSE 15971
// continue ;
15969: GO 15859
// h := hex [ 2 ] ;
15971: LD_ADDR_VAR 0 13
15975: PUSH
15976: LD_VAR 0 4
15980: PUSH
15981: LD_INT 2
15983: ARRAY
15984: ST_TO_ADDR
// if h + 7 < height then
15985: LD_VAR 0 13
15989: PUSH
15990: LD_INT 7
15992: PLUS
15993: PUSH
15994: LD_VAR 0 15
15998: LESS
15999: IFFALSE 16028
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16001: LD_ADDR_VAR 0 18
16005: PUSH
16006: LD_INT 7
16008: PUSH
16009: LD_INT 28
16011: PUSH
16012: LD_INT 45
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: LD_VAR 0 12
16024: ARRAY
16025: ST_TO_ADDR
// break ;
16026: GO 16030
// end ; end ; end ;
16028: GO 15859
16030: POP
16031: POP
// end ; if not weapon then
16032: LD_VAR 0 18
16036: NOT
16037: IFFALSE 16097
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16039: LD_ADDR_VAR 0 5
16043: PUSH
16044: LD_VAR 0 5
16048: PUSH
16049: LD_INT 11
16051: PUSH
16052: LD_INT 30
16054: PUSH
16055: LD_INT 49
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: DIFF
16063: ST_TO_ADDR
// if not list then
16064: LD_VAR 0 5
16068: NOT
16069: IFFALSE 16073
// exit ;
16071: GO 16215
// weapon := list [ rand ( 1 , list ) ] ;
16073: LD_ADDR_VAR 0 18
16077: PUSH
16078: LD_VAR 0 5
16082: PUSH
16083: LD_INT 1
16085: PPUSH
16086: LD_VAR 0 5
16090: PPUSH
16091: CALL_OW 12
16095: ARRAY
16096: ST_TO_ADDR
// end ; if weapon then
16097: LD_VAR 0 18
16101: IFFALSE 16215
// begin tmp := CostOfWeapon ( weapon ) ;
16103: LD_ADDR_VAR 0 14
16107: PUSH
16108: LD_VAR 0 18
16112: PPUSH
16113: CALL_OW 451
16117: ST_TO_ADDR
// j := GetBase ( tower ) ;
16118: LD_ADDR_VAR 0 9
16122: PUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 274
16132: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16133: LD_VAR 0 9
16137: PPUSH
16138: LD_INT 1
16140: PPUSH
16141: CALL_OW 275
16145: PUSH
16146: LD_VAR 0 14
16150: PUSH
16151: LD_INT 1
16153: ARRAY
16154: GREATEREQUAL
16155: PUSH
16156: LD_VAR 0 9
16160: PPUSH
16161: LD_INT 2
16163: PPUSH
16164: CALL_OW 275
16168: PUSH
16169: LD_VAR 0 14
16173: PUSH
16174: LD_INT 2
16176: ARRAY
16177: GREATEREQUAL
16178: AND
16179: PUSH
16180: LD_VAR 0 9
16184: PPUSH
16185: LD_INT 3
16187: PPUSH
16188: CALL_OW 275
16192: PUSH
16193: LD_VAR 0 14
16197: PUSH
16198: LD_INT 3
16200: ARRAY
16201: GREATEREQUAL
16202: AND
16203: IFFALSE 16215
// result := weapon ;
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_VAR 0 18
16214: ST_TO_ADDR
// end ; end ;
16215: LD_VAR 0 3
16219: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16220: LD_INT 0
16222: PPUSH
16223: PPUSH
// result := true ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ST_TO_ADDR
// if array1 = array2 then
16232: LD_VAR 0 1
16236: PUSH
16237: LD_VAR 0 2
16241: EQUAL
16242: IFFALSE 16302
// begin for i = 1 to array1 do
16244: LD_ADDR_VAR 0 4
16248: PUSH
16249: DOUBLE
16250: LD_INT 1
16252: DEC
16253: ST_TO_ADDR
16254: LD_VAR 0 1
16258: PUSH
16259: FOR_TO
16260: IFFALSE 16298
// if array1 [ i ] <> array2 [ i ] then
16262: LD_VAR 0 1
16266: PUSH
16267: LD_VAR 0 4
16271: ARRAY
16272: PUSH
16273: LD_VAR 0 2
16277: PUSH
16278: LD_VAR 0 4
16282: ARRAY
16283: NONEQUAL
16284: IFFALSE 16296
// begin result := false ;
16286: LD_ADDR_VAR 0 3
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
// break ;
16294: GO 16298
// end ;
16296: GO 16259
16298: POP
16299: POP
// end else
16300: GO 16310
// result := false ;
16302: LD_ADDR_VAR 0 3
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// end ;
16310: LD_VAR 0 3
16314: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16315: LD_INT 0
16317: PPUSH
16318: PPUSH
// if not array1 or not array2 then
16319: LD_VAR 0 1
16323: NOT
16324: PUSH
16325: LD_VAR 0 2
16329: NOT
16330: OR
16331: IFFALSE 16335
// exit ;
16333: GO 16399
// result := true ;
16335: LD_ADDR_VAR 0 3
16339: PUSH
16340: LD_INT 1
16342: ST_TO_ADDR
// for i = 1 to array1 do
16343: LD_ADDR_VAR 0 4
16347: PUSH
16348: DOUBLE
16349: LD_INT 1
16351: DEC
16352: ST_TO_ADDR
16353: LD_VAR 0 1
16357: PUSH
16358: FOR_TO
16359: IFFALSE 16397
// if array1 [ i ] <> array2 [ i ] then
16361: LD_VAR 0 1
16365: PUSH
16366: LD_VAR 0 4
16370: ARRAY
16371: PUSH
16372: LD_VAR 0 2
16376: PUSH
16377: LD_VAR 0 4
16381: ARRAY
16382: NONEQUAL
16383: IFFALSE 16395
// begin result := false ;
16385: LD_ADDR_VAR 0 3
16389: PUSH
16390: LD_INT 0
16392: ST_TO_ADDR
// break ;
16393: GO 16397
// end ;
16395: GO 16358
16397: POP
16398: POP
// end ;
16399: LD_VAR 0 3
16403: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16404: LD_INT 0
16406: PPUSH
16407: PPUSH
16408: PPUSH
// pom := GetBase ( fac ) ;
16409: LD_ADDR_VAR 0 5
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 274
16423: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16424: LD_ADDR_VAR 0 4
16428: PUSH
16429: LD_VAR 0 2
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PPUSH
16438: LD_VAR 0 2
16442: PUSH
16443: LD_INT 2
16445: ARRAY
16446: PPUSH
16447: LD_VAR 0 2
16451: PUSH
16452: LD_INT 3
16454: ARRAY
16455: PPUSH
16456: LD_VAR 0 2
16460: PUSH
16461: LD_INT 4
16463: ARRAY
16464: PPUSH
16465: CALL_OW 449
16469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_VAR 0 5
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 275
16487: PUSH
16488: LD_VAR 0 4
16492: PUSH
16493: LD_INT 1
16495: ARRAY
16496: GREATEREQUAL
16497: PUSH
16498: LD_VAR 0 5
16502: PPUSH
16503: LD_INT 2
16505: PPUSH
16506: CALL_OW 275
16510: PUSH
16511: LD_VAR 0 4
16515: PUSH
16516: LD_INT 2
16518: ARRAY
16519: GREATEREQUAL
16520: AND
16521: PUSH
16522: LD_VAR 0 5
16526: PPUSH
16527: LD_INT 3
16529: PPUSH
16530: CALL_OW 275
16534: PUSH
16535: LD_VAR 0 4
16539: PUSH
16540: LD_INT 3
16542: ARRAY
16543: GREATEREQUAL
16544: AND
16545: ST_TO_ADDR
// end ;
16546: LD_VAR 0 3
16550: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16551: LD_INT 0
16553: PPUSH
16554: PPUSH
16555: PPUSH
16556: PPUSH
// pom := GetBase ( building ) ;
16557: LD_ADDR_VAR 0 3
16561: PUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 274
16571: ST_TO_ADDR
// if not pom then
16572: LD_VAR 0 3
16576: NOT
16577: IFFALSE 16581
// exit ;
16579: GO 16751
// btype := GetBType ( building ) ;
16581: LD_ADDR_VAR 0 5
16585: PUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: CALL_OW 266
16595: ST_TO_ADDR
// if btype = b_armoury then
16596: LD_VAR 0 5
16600: PUSH
16601: LD_INT 4
16603: EQUAL
16604: IFFALSE 16614
// btype := b_barracks ;
16606: LD_ADDR_VAR 0 5
16610: PUSH
16611: LD_INT 5
16613: ST_TO_ADDR
// if btype = b_depot then
16614: LD_VAR 0 5
16618: PUSH
16619: LD_INT 0
16621: EQUAL
16622: IFFALSE 16632
// btype := b_warehouse ;
16624: LD_ADDR_VAR 0 5
16628: PUSH
16629: LD_INT 1
16631: ST_TO_ADDR
// if btype = b_workshop then
16632: LD_VAR 0 5
16636: PUSH
16637: LD_INT 2
16639: EQUAL
16640: IFFALSE 16650
// btype := b_factory ;
16642: LD_ADDR_VAR 0 5
16646: PUSH
16647: LD_INT 3
16649: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16650: LD_ADDR_VAR 0 4
16654: PUSH
16655: LD_VAR 0 5
16659: PPUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 248
16669: PPUSH
16670: CALL_OW 450
16674: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16675: LD_ADDR_VAR 0 2
16679: PUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 275
16692: PUSH
16693: LD_VAR 0 4
16697: PUSH
16698: LD_INT 1
16700: ARRAY
16701: GREATEREQUAL
16702: PUSH
16703: LD_VAR 0 3
16707: PPUSH
16708: LD_INT 2
16710: PPUSH
16711: CALL_OW 275
16715: PUSH
16716: LD_VAR 0 4
16720: PUSH
16721: LD_INT 2
16723: ARRAY
16724: GREATEREQUAL
16725: AND
16726: PUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: LD_INT 3
16734: PPUSH
16735: CALL_OW 275
16739: PUSH
16740: LD_VAR 0 4
16744: PUSH
16745: LD_INT 3
16747: ARRAY
16748: GREATEREQUAL
16749: AND
16750: ST_TO_ADDR
// end ;
16751: LD_VAR 0 2
16755: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16756: LD_INT 0
16758: PPUSH
16759: PPUSH
16760: PPUSH
// pom := GetBase ( building ) ;
16761: LD_ADDR_VAR 0 4
16765: PUSH
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL_OW 274
16775: ST_TO_ADDR
// if not pom then
16776: LD_VAR 0 4
16780: NOT
16781: IFFALSE 16785
// exit ;
16783: GO 16886
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16785: LD_ADDR_VAR 0 5
16789: PUSH
16790: LD_VAR 0 2
16794: PPUSH
16795: LD_VAR 0 1
16799: PPUSH
16800: CALL_OW 248
16804: PPUSH
16805: CALL_OW 450
16809: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16810: LD_ADDR_VAR 0 3
16814: PUSH
16815: LD_VAR 0 4
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 275
16827: PUSH
16828: LD_VAR 0 5
16832: PUSH
16833: LD_INT 1
16835: ARRAY
16836: GREATEREQUAL
16837: PUSH
16838: LD_VAR 0 4
16842: PPUSH
16843: LD_INT 2
16845: PPUSH
16846: CALL_OW 275
16850: PUSH
16851: LD_VAR 0 5
16855: PUSH
16856: LD_INT 2
16858: ARRAY
16859: GREATEREQUAL
16860: AND
16861: PUSH
16862: LD_VAR 0 4
16866: PPUSH
16867: LD_INT 3
16869: PPUSH
16870: CALL_OW 275
16874: PUSH
16875: LD_VAR 0 5
16879: PUSH
16880: LD_INT 3
16882: ARRAY
16883: GREATEREQUAL
16884: AND
16885: ST_TO_ADDR
// end ;
16886: LD_VAR 0 3
16890: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16891: LD_INT 0
16893: PPUSH
16894: PPUSH
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
// result := false ;
16904: LD_ADDR_VAR 0 8
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16912: LD_VAR 0 5
16916: NOT
16917: PUSH
16918: LD_VAR 0 1
16922: NOT
16923: OR
16924: PUSH
16925: LD_VAR 0 2
16929: NOT
16930: OR
16931: PUSH
16932: LD_VAR 0 3
16936: NOT
16937: OR
16938: IFFALSE 16942
// exit ;
16940: GO 17756
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16942: LD_ADDR_VAR 0 14
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: LD_VAR 0 2
16956: PPUSH
16957: LD_VAR 0 3
16961: PPUSH
16962: LD_VAR 0 4
16966: PPUSH
16967: LD_VAR 0 5
16971: PUSH
16972: LD_INT 1
16974: ARRAY
16975: PPUSH
16976: CALL_OW 248
16980: PPUSH
16981: LD_INT 0
16983: PPUSH
16984: CALL 19009 0 6
16988: ST_TO_ADDR
// if not hexes then
16989: LD_VAR 0 14
16993: NOT
16994: IFFALSE 16998
// exit ;
16996: GO 17756
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16998: LD_ADDR_VAR 0 17
17002: PUSH
17003: LD_VAR 0 5
17007: PPUSH
17008: LD_INT 22
17010: PUSH
17011: LD_VAR 0 13
17015: PPUSH
17016: CALL_OW 255
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PPUSH
17057: CALL_OW 72
17061: ST_TO_ADDR
// for i = 1 to hexes do
17062: LD_ADDR_VAR 0 9
17066: PUSH
17067: DOUBLE
17068: LD_INT 1
17070: DEC
17071: ST_TO_ADDR
17072: LD_VAR 0 14
17076: PUSH
17077: FOR_TO
17078: IFFALSE 17754
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17080: LD_ADDR_VAR 0 13
17084: PUSH
17085: LD_VAR 0 14
17089: PUSH
17090: LD_VAR 0 9
17094: ARRAY
17095: PUSH
17096: LD_INT 1
17098: ARRAY
17099: PPUSH
17100: LD_VAR 0 14
17104: PUSH
17105: LD_VAR 0 9
17109: ARRAY
17110: PUSH
17111: LD_INT 2
17113: ARRAY
17114: PPUSH
17115: CALL_OW 428
17119: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17120: LD_VAR 0 14
17124: PUSH
17125: LD_VAR 0 9
17129: ARRAY
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: PPUSH
17135: LD_VAR 0 14
17139: PUSH
17140: LD_VAR 0 9
17144: ARRAY
17145: PUSH
17146: LD_INT 2
17148: ARRAY
17149: PPUSH
17150: CALL_OW 351
17154: PUSH
17155: LD_VAR 0 14
17159: PUSH
17160: LD_VAR 0 9
17164: ARRAY
17165: PUSH
17166: LD_INT 1
17168: ARRAY
17169: PPUSH
17170: LD_VAR 0 14
17174: PUSH
17175: LD_VAR 0 9
17179: ARRAY
17180: PUSH
17181: LD_INT 2
17183: ARRAY
17184: PPUSH
17185: CALL_OW 488
17189: NOT
17190: OR
17191: PUSH
17192: LD_VAR 0 13
17196: PPUSH
17197: CALL_OW 247
17201: PUSH
17202: LD_INT 3
17204: EQUAL
17205: OR
17206: IFFALSE 17212
// exit ;
17208: POP
17209: POP
17210: GO 17756
// if not tmp then
17212: LD_VAR 0 13
17216: NOT
17217: IFFALSE 17221
// continue ;
17219: GO 17077
// result := true ;
17221: LD_ADDR_VAR 0 8
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17229: LD_VAR 0 6
17233: PUSH
17234: LD_VAR 0 13
17238: PPUSH
17239: CALL_OW 247
17243: PUSH
17244: LD_INT 2
17246: EQUAL
17247: AND
17248: PUSH
17249: LD_VAR 0 13
17253: PPUSH
17254: CALL_OW 263
17258: PUSH
17259: LD_INT 1
17261: EQUAL
17262: AND
17263: IFFALSE 17427
// begin if IsDrivenBy ( tmp ) then
17265: LD_VAR 0 13
17269: PPUSH
17270: CALL_OW 311
17274: IFFALSE 17278
// continue ;
17276: GO 17077
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17278: LD_VAR 0 6
17282: PPUSH
17283: LD_INT 3
17285: PUSH
17286: LD_INT 60
17288: PUSH
17289: EMPTY
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 3
17298: PUSH
17299: LD_INT 55
17301: PUSH
17302: EMPTY
17303: LIST
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PPUSH
17313: CALL_OW 72
17317: IFFALSE 17425
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17319: LD_ADDR_VAR 0 18
17323: PUSH
17324: LD_VAR 0 6
17328: PPUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 60
17334: PUSH
17335: EMPTY
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 3
17344: PUSH
17345: LD_INT 55
17347: PUSH
17348: EMPTY
17349: LIST
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 72
17363: PUSH
17364: LD_INT 1
17366: ARRAY
17367: ST_TO_ADDR
// if IsInUnit ( driver ) then
17368: LD_VAR 0 18
17372: PPUSH
17373: CALL_OW 310
17377: IFFALSE 17388
// ComExit ( driver ) ;
17379: LD_VAR 0 18
17383: PPUSH
17384: CALL 42788 0 1
// AddComEnterUnit ( driver , tmp ) ;
17388: LD_VAR 0 18
17392: PPUSH
17393: LD_VAR 0 13
17397: PPUSH
17398: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17402: LD_VAR 0 18
17406: PPUSH
17407: LD_VAR 0 7
17411: PPUSH
17412: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17416: LD_VAR 0 18
17420: PPUSH
17421: CALL_OW 181
// end ; continue ;
17425: GO 17077
// end ; if not cleaners or not tmp in cleaners then
17427: LD_VAR 0 6
17431: NOT
17432: PUSH
17433: LD_VAR 0 13
17437: PUSH
17438: LD_VAR 0 6
17442: IN
17443: NOT
17444: OR
17445: IFFALSE 17752
// begin if dep then
17447: LD_VAR 0 17
17451: IFFALSE 17587
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17453: LD_ADDR_VAR 0 16
17457: PUSH
17458: LD_VAR 0 17
17462: PUSH
17463: LD_INT 1
17465: ARRAY
17466: PPUSH
17467: CALL_OW 250
17471: PPUSH
17472: LD_VAR 0 17
17476: PUSH
17477: LD_INT 1
17479: ARRAY
17480: PPUSH
17481: CALL_OW 254
17485: PPUSH
17486: LD_INT 5
17488: PPUSH
17489: CALL_OW 272
17493: PUSH
17494: LD_VAR 0 17
17498: PUSH
17499: LD_INT 1
17501: ARRAY
17502: PPUSH
17503: CALL_OW 251
17507: PPUSH
17508: LD_VAR 0 17
17512: PUSH
17513: LD_INT 1
17515: ARRAY
17516: PPUSH
17517: CALL_OW 254
17521: PPUSH
17522: LD_INT 5
17524: PPUSH
17525: CALL_OW 273
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17534: LD_VAR 0 16
17538: PUSH
17539: LD_INT 1
17541: ARRAY
17542: PPUSH
17543: LD_VAR 0 16
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: PPUSH
17552: CALL_OW 488
17556: IFFALSE 17587
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17558: LD_VAR 0 13
17562: PPUSH
17563: LD_VAR 0 16
17567: PUSH
17568: LD_INT 1
17570: ARRAY
17571: PPUSH
17572: LD_VAR 0 16
17576: PUSH
17577: LD_INT 2
17579: ARRAY
17580: PPUSH
17581: CALL_OW 111
// continue ;
17585: GO 17077
// end ; end ; r := GetDir ( tmp ) ;
17587: LD_ADDR_VAR 0 15
17591: PUSH
17592: LD_VAR 0 13
17596: PPUSH
17597: CALL_OW 254
17601: ST_TO_ADDR
// if r = 5 then
17602: LD_VAR 0 15
17606: PUSH
17607: LD_INT 5
17609: EQUAL
17610: IFFALSE 17620
// r := 0 ;
17612: LD_ADDR_VAR 0 15
17616: PUSH
17617: LD_INT 0
17619: ST_TO_ADDR
// for j = r to 5 do
17620: LD_ADDR_VAR 0 10
17624: PUSH
17625: DOUBLE
17626: LD_VAR 0 15
17630: DEC
17631: ST_TO_ADDR
17632: LD_INT 5
17634: PUSH
17635: FOR_TO
17636: IFFALSE 17750
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17638: LD_ADDR_VAR 0 11
17642: PUSH
17643: LD_VAR 0 13
17647: PPUSH
17648: CALL_OW 250
17652: PPUSH
17653: LD_VAR 0 10
17657: PPUSH
17658: LD_INT 2
17660: PPUSH
17661: CALL_OW 272
17665: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17666: LD_ADDR_VAR 0 12
17670: PUSH
17671: LD_VAR 0 13
17675: PPUSH
17676: CALL_OW 251
17680: PPUSH
17681: LD_VAR 0 10
17685: PPUSH
17686: LD_INT 2
17688: PPUSH
17689: CALL_OW 273
17693: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17694: LD_VAR 0 11
17698: PPUSH
17699: LD_VAR 0 12
17703: PPUSH
17704: CALL_OW 488
17708: PUSH
17709: LD_VAR 0 11
17713: PPUSH
17714: LD_VAR 0 12
17718: PPUSH
17719: CALL_OW 428
17723: NOT
17724: AND
17725: IFFALSE 17748
// begin ComMoveXY ( tmp , _x , _y ) ;
17727: LD_VAR 0 13
17731: PPUSH
17732: LD_VAR 0 11
17736: PPUSH
17737: LD_VAR 0 12
17741: PPUSH
17742: CALL_OW 111
// break ;
17746: GO 17750
// end ; end ;
17748: GO 17635
17750: POP
17751: POP
// end ; end ;
17752: GO 17077
17754: POP
17755: POP
// end ;
17756: LD_VAR 0 8
17760: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17761: LD_INT 0
17763: PPUSH
// result := true ;
17764: LD_ADDR_VAR 0 3
17768: PUSH
17769: LD_INT 1
17771: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17772: LD_VAR 0 2
17776: PUSH
17777: LD_INT 24
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17791
17783: LD_INT 33
17785: DOUBLE
17786: EQUAL
17787: IFTRUE 17791
17789: GO 17816
17791: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17792: LD_ADDR_VAR 0 3
17796: PUSH
17797: LD_INT 32
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 321
17809: PUSH
17810: LD_INT 2
17812: EQUAL
17813: ST_TO_ADDR
17814: GO 18132
17816: LD_INT 20
17818: DOUBLE
17819: EQUAL
17820: IFTRUE 17824
17822: GO 17849
17824: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: LD_INT 6
17832: PPUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 321
17842: PUSH
17843: LD_INT 2
17845: EQUAL
17846: ST_TO_ADDR
17847: GO 18132
17849: LD_INT 22
17851: DOUBLE
17852: EQUAL
17853: IFTRUE 17863
17855: LD_INT 36
17857: DOUBLE
17858: EQUAL
17859: IFTRUE 17863
17861: GO 17888
17863: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17864: LD_ADDR_VAR 0 3
17868: PUSH
17869: LD_INT 15
17871: PPUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 321
17881: PUSH
17882: LD_INT 2
17884: EQUAL
17885: ST_TO_ADDR
17886: GO 18132
17888: LD_INT 30
17890: DOUBLE
17891: EQUAL
17892: IFTRUE 17896
17894: GO 17921
17896: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17897: LD_ADDR_VAR 0 3
17901: PUSH
17902: LD_INT 20
17904: PPUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 321
17914: PUSH
17915: LD_INT 2
17917: EQUAL
17918: ST_TO_ADDR
17919: GO 18132
17921: LD_INT 28
17923: DOUBLE
17924: EQUAL
17925: IFTRUE 17935
17927: LD_INT 21
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17935
17933: GO 17960
17935: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17936: LD_ADDR_VAR 0 3
17940: PUSH
17941: LD_INT 21
17943: PPUSH
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 321
17953: PUSH
17954: LD_INT 2
17956: EQUAL
17957: ST_TO_ADDR
17958: GO 18132
17960: LD_INT 16
17962: DOUBLE
17963: EQUAL
17964: IFTRUE 17968
17966: GO 17993
17968: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17969: LD_ADDR_VAR 0 3
17973: PUSH
17974: LD_INT 84
17976: PPUSH
17977: LD_VAR 0 1
17981: PPUSH
17982: CALL_OW 321
17986: PUSH
17987: LD_INT 2
17989: EQUAL
17990: ST_TO_ADDR
17991: GO 18132
17993: LD_INT 19
17995: DOUBLE
17996: EQUAL
17997: IFTRUE 18007
17999: LD_INT 23
18001: DOUBLE
18002: EQUAL
18003: IFTRUE 18007
18005: GO 18032
18007: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18008: LD_ADDR_VAR 0 3
18012: PUSH
18013: LD_INT 83
18015: PPUSH
18016: LD_VAR 0 1
18020: PPUSH
18021: CALL_OW 321
18025: PUSH
18026: LD_INT 2
18028: EQUAL
18029: ST_TO_ADDR
18030: GO 18132
18032: LD_INT 17
18034: DOUBLE
18035: EQUAL
18036: IFTRUE 18040
18038: GO 18065
18040: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18041: LD_ADDR_VAR 0 3
18045: PUSH
18046: LD_INT 39
18048: PPUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 321
18058: PUSH
18059: LD_INT 2
18061: EQUAL
18062: ST_TO_ADDR
18063: GO 18132
18065: LD_INT 18
18067: DOUBLE
18068: EQUAL
18069: IFTRUE 18073
18071: GO 18098
18073: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18074: LD_ADDR_VAR 0 3
18078: PUSH
18079: LD_INT 40
18081: PPUSH
18082: LD_VAR 0 1
18086: PPUSH
18087: CALL_OW 321
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: ST_TO_ADDR
18096: GO 18132
18098: LD_INT 27
18100: DOUBLE
18101: EQUAL
18102: IFTRUE 18106
18104: GO 18131
18106: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18107: LD_ADDR_VAR 0 3
18111: PUSH
18112: LD_INT 35
18114: PPUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 321
18124: PUSH
18125: LD_INT 2
18127: EQUAL
18128: ST_TO_ADDR
18129: GO 18132
18131: POP
// end ;
18132: LD_VAR 0 3
18136: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18137: LD_INT 0
18139: PPUSH
18140: PPUSH
18141: PPUSH
18142: PPUSH
18143: PPUSH
18144: PPUSH
18145: PPUSH
18146: PPUSH
18147: PPUSH
18148: PPUSH
18149: PPUSH
// result := false ;
18150: LD_ADDR_VAR 0 6
18154: PUSH
18155: LD_INT 0
18157: ST_TO_ADDR
// if btype = b_depot then
18158: LD_VAR 0 2
18162: PUSH
18163: LD_INT 0
18165: EQUAL
18166: IFFALSE 18178
// begin result := true ;
18168: LD_ADDR_VAR 0 6
18172: PUSH
18173: LD_INT 1
18175: ST_TO_ADDR
// exit ;
18176: GO 19004
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18178: LD_VAR 0 1
18182: NOT
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: IN
18204: NOT
18205: OR
18206: PUSH
18207: LD_VAR 0 2
18211: NOT
18212: OR
18213: PUSH
18214: LD_VAR 0 5
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 3
18230: PUSH
18231: LD_INT 4
18233: PUSH
18234: LD_INT 5
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: IN
18245: NOT
18246: OR
18247: PUSH
18248: LD_VAR 0 3
18252: PPUSH
18253: LD_VAR 0 4
18257: PPUSH
18258: CALL_OW 488
18262: NOT
18263: OR
18264: IFFALSE 18268
// exit ;
18266: GO 19004
// side := GetSide ( depot ) ;
18268: LD_ADDR_VAR 0 9
18272: PUSH
18273: LD_VAR 0 1
18277: PPUSH
18278: CALL_OW 255
18282: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18283: LD_VAR 0 9
18287: PPUSH
18288: LD_VAR 0 2
18292: PPUSH
18293: CALL 17761 0 2
18297: NOT
18298: IFFALSE 18302
// exit ;
18300: GO 19004
// pom := GetBase ( depot ) ;
18302: LD_ADDR_VAR 0 10
18306: PUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 274
18316: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18317: LD_ADDR_VAR 0 11
18321: PUSH
18322: LD_VAR 0 2
18326: PPUSH
18327: LD_VAR 0 1
18331: PPUSH
18332: CALL_OW 248
18336: PPUSH
18337: CALL_OW 450
18341: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18342: LD_VAR 0 10
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 275
18354: PUSH
18355: LD_VAR 0 11
18359: PUSH
18360: LD_INT 1
18362: ARRAY
18363: GREATEREQUAL
18364: PUSH
18365: LD_VAR 0 10
18369: PPUSH
18370: LD_INT 2
18372: PPUSH
18373: CALL_OW 275
18377: PUSH
18378: LD_VAR 0 11
18382: PUSH
18383: LD_INT 2
18385: ARRAY
18386: GREATEREQUAL
18387: AND
18388: PUSH
18389: LD_VAR 0 10
18393: PPUSH
18394: LD_INT 3
18396: PPUSH
18397: CALL_OW 275
18401: PUSH
18402: LD_VAR 0 11
18406: PUSH
18407: LD_INT 3
18409: ARRAY
18410: GREATEREQUAL
18411: AND
18412: NOT
18413: IFFALSE 18417
// exit ;
18415: GO 19004
// if GetBType ( depot ) = b_depot then
18417: LD_VAR 0 1
18421: PPUSH
18422: CALL_OW 266
18426: PUSH
18427: LD_INT 0
18429: EQUAL
18430: IFFALSE 18442
// dist := 28 else
18432: LD_ADDR_VAR 0 14
18436: PUSH
18437: LD_INT 28
18439: ST_TO_ADDR
18440: GO 18450
// dist := 36 ;
18442: LD_ADDR_VAR 0 14
18446: PUSH
18447: LD_INT 36
18449: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18450: LD_VAR 0 1
18454: PPUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: CALL_OW 297
18469: PUSH
18470: LD_VAR 0 14
18474: GREATER
18475: IFFALSE 18479
// exit ;
18477: GO 19004
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18479: LD_ADDR_VAR 0 12
18483: PUSH
18484: LD_VAR 0 2
18488: PPUSH
18489: LD_VAR 0 3
18493: PPUSH
18494: LD_VAR 0 4
18498: PPUSH
18499: LD_VAR 0 5
18503: PPUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 248
18513: PPUSH
18514: LD_INT 0
18516: PPUSH
18517: CALL 19009 0 6
18521: ST_TO_ADDR
// if not hexes then
18522: LD_VAR 0 12
18526: NOT
18527: IFFALSE 18531
// exit ;
18529: GO 19004
// hex := GetHexInfo ( x , y ) ;
18531: LD_ADDR_VAR 0 15
18535: PUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: LD_VAR 0 4
18545: PPUSH
18546: CALL_OW 546
18550: ST_TO_ADDR
// if hex [ 1 ] then
18551: LD_VAR 0 15
18555: PUSH
18556: LD_INT 1
18558: ARRAY
18559: IFFALSE 18563
// exit ;
18561: GO 19004
// height := hex [ 2 ] ;
18563: LD_ADDR_VAR 0 13
18567: PUSH
18568: LD_VAR 0 15
18572: PUSH
18573: LD_INT 2
18575: ARRAY
18576: ST_TO_ADDR
// for i = 1 to hexes do
18577: LD_ADDR_VAR 0 7
18581: PUSH
18582: DOUBLE
18583: LD_INT 1
18585: DEC
18586: ST_TO_ADDR
18587: LD_VAR 0 12
18591: PUSH
18592: FOR_TO
18593: IFFALSE 18923
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18595: LD_VAR 0 12
18599: PUSH
18600: LD_VAR 0 7
18604: ARRAY
18605: PUSH
18606: LD_INT 1
18608: ARRAY
18609: PPUSH
18610: LD_VAR 0 12
18614: PUSH
18615: LD_VAR 0 7
18619: ARRAY
18620: PUSH
18621: LD_INT 2
18623: ARRAY
18624: PPUSH
18625: CALL_OW 488
18629: NOT
18630: PUSH
18631: LD_VAR 0 12
18635: PUSH
18636: LD_VAR 0 7
18640: ARRAY
18641: PUSH
18642: LD_INT 1
18644: ARRAY
18645: PPUSH
18646: LD_VAR 0 12
18650: PUSH
18651: LD_VAR 0 7
18655: ARRAY
18656: PUSH
18657: LD_INT 2
18659: ARRAY
18660: PPUSH
18661: CALL_OW 428
18665: PUSH
18666: LD_INT 0
18668: GREATER
18669: OR
18670: PUSH
18671: LD_VAR 0 12
18675: PUSH
18676: LD_VAR 0 7
18680: ARRAY
18681: PUSH
18682: LD_INT 1
18684: ARRAY
18685: PPUSH
18686: LD_VAR 0 12
18690: PUSH
18691: LD_VAR 0 7
18695: ARRAY
18696: PUSH
18697: LD_INT 2
18699: ARRAY
18700: PPUSH
18701: CALL_OW 351
18705: OR
18706: IFFALSE 18712
// exit ;
18708: POP
18709: POP
18710: GO 19004
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18712: LD_ADDR_VAR 0 8
18716: PUSH
18717: LD_VAR 0 12
18721: PUSH
18722: LD_VAR 0 7
18726: ARRAY
18727: PUSH
18728: LD_INT 1
18730: ARRAY
18731: PPUSH
18732: LD_VAR 0 12
18736: PUSH
18737: LD_VAR 0 7
18741: ARRAY
18742: PUSH
18743: LD_INT 2
18745: ARRAY
18746: PPUSH
18747: CALL_OW 546
18751: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18752: LD_VAR 0 8
18756: PUSH
18757: LD_INT 1
18759: ARRAY
18760: PUSH
18761: LD_VAR 0 8
18765: PUSH
18766: LD_INT 2
18768: ARRAY
18769: PUSH
18770: LD_VAR 0 13
18774: PUSH
18775: LD_INT 2
18777: PLUS
18778: GREATER
18779: OR
18780: PUSH
18781: LD_VAR 0 8
18785: PUSH
18786: LD_INT 2
18788: ARRAY
18789: PUSH
18790: LD_VAR 0 13
18794: PUSH
18795: LD_INT 2
18797: MINUS
18798: LESS
18799: OR
18800: PUSH
18801: LD_VAR 0 8
18805: PUSH
18806: LD_INT 3
18808: ARRAY
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: LD_INT 8
18815: PUSH
18816: LD_INT 9
18818: PUSH
18819: LD_INT 10
18821: PUSH
18822: LD_INT 11
18824: PUSH
18825: LD_INT 12
18827: PUSH
18828: LD_INT 13
18830: PUSH
18831: LD_INT 16
18833: PUSH
18834: LD_INT 17
18836: PUSH
18837: LD_INT 18
18839: PUSH
18840: LD_INT 19
18842: PUSH
18843: LD_INT 20
18845: PUSH
18846: LD_INT 21
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: IN
18864: NOT
18865: OR
18866: PUSH
18867: LD_VAR 0 8
18871: PUSH
18872: LD_INT 5
18874: ARRAY
18875: NOT
18876: OR
18877: PUSH
18878: LD_VAR 0 8
18882: PUSH
18883: LD_INT 6
18885: ARRAY
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: LD_INT 2
18892: PUSH
18893: LD_INT 7
18895: PUSH
18896: LD_INT 9
18898: PUSH
18899: LD_INT 10
18901: PUSH
18902: LD_INT 11
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: IN
18913: NOT
18914: OR
18915: IFFALSE 18921
// exit ;
18917: POP
18918: POP
18919: GO 19004
// end ;
18921: GO 18592
18923: POP
18924: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18925: LD_VAR 0 9
18929: PPUSH
18930: LD_VAR 0 3
18934: PPUSH
18935: LD_VAR 0 4
18939: PPUSH
18940: LD_INT 20
18942: PPUSH
18943: CALL 10927 0 4
18947: PUSH
18948: LD_INT 4
18950: ARRAY
18951: IFFALSE 18955
// exit ;
18953: GO 19004
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18955: LD_VAR 0 2
18959: PUSH
18960: LD_INT 29
18962: PUSH
18963: LD_INT 30
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: IN
18970: PUSH
18971: LD_VAR 0 3
18975: PPUSH
18976: LD_VAR 0 4
18980: PPUSH
18981: LD_VAR 0 9
18985: PPUSH
18986: CALL_OW 440
18990: NOT
18991: AND
18992: IFFALSE 18996
// exit ;
18994: GO 19004
// result := true ;
18996: LD_ADDR_VAR 0 6
19000: PUSH
19001: LD_INT 1
19003: ST_TO_ADDR
// end ;
19004: LD_VAR 0 6
19008: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19009: LD_INT 0
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
19018: PPUSH
19019: PPUSH
19020: PPUSH
19021: PPUSH
19022: PPUSH
19023: PPUSH
19024: PPUSH
19025: PPUSH
19026: PPUSH
19027: PPUSH
19028: PPUSH
19029: PPUSH
19030: PPUSH
19031: PPUSH
19032: PPUSH
19033: PPUSH
19034: PPUSH
19035: PPUSH
19036: PPUSH
19037: PPUSH
19038: PPUSH
19039: PPUSH
19040: PPUSH
19041: PPUSH
19042: PPUSH
19043: PPUSH
19044: PPUSH
19045: PPUSH
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
19057: PPUSH
19058: PPUSH
19059: PPUSH
19060: PPUSH
19061: PPUSH
19062: PPUSH
19063: PPUSH
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
// result = [ ] ;
19069: LD_ADDR_VAR 0 7
19073: PUSH
19074: EMPTY
19075: ST_TO_ADDR
// temp_list = [ ] ;
19076: LD_ADDR_VAR 0 9
19080: PUSH
19081: EMPTY
19082: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19083: LD_VAR 0 4
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: LD_INT 3
19099: PUSH
19100: LD_INT 4
19102: PUSH
19103: LD_INT 5
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: IN
19114: NOT
19115: PUSH
19116: LD_VAR 0 1
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: IN
19131: PUSH
19132: LD_VAR 0 5
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: LD_INT 2
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: LIST
19150: IN
19151: NOT
19152: AND
19153: OR
19154: IFFALSE 19158
// exit ;
19156: GO 37549
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19158: LD_VAR 0 1
19162: PUSH
19163: LD_INT 6
19165: PUSH
19166: LD_INT 7
19168: PUSH
19169: LD_INT 8
19171: PUSH
19172: LD_INT 13
19174: PUSH
19175: LD_INT 12
19177: PUSH
19178: LD_INT 15
19180: PUSH
19181: LD_INT 11
19183: PUSH
19184: LD_INT 14
19186: PUSH
19187: LD_INT 10
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: IN
19201: IFFALSE 19211
// btype = b_lab ;
19203: LD_ADDR_VAR 0 1
19207: PUSH
19208: LD_INT 6
19210: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19211: LD_VAR 0 6
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: IN
19230: NOT
19231: PUSH
19232: LD_VAR 0 1
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 3
19248: PUSH
19249: LD_INT 6
19251: PUSH
19252: LD_INT 36
19254: PUSH
19255: LD_INT 4
19257: PUSH
19258: LD_INT 5
19260: PUSH
19261: LD_INT 31
19263: PUSH
19264: LD_INT 32
19266: PUSH
19267: LD_INT 33
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: IN
19283: NOT
19284: PUSH
19285: LD_VAR 0 6
19289: PUSH
19290: LD_INT 1
19292: EQUAL
19293: AND
19294: OR
19295: PUSH
19296: LD_VAR 0 1
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: IN
19311: NOT
19312: PUSH
19313: LD_VAR 0 6
19317: PUSH
19318: LD_INT 2
19320: EQUAL
19321: AND
19322: OR
19323: IFFALSE 19333
// mode = 0 ;
19325: LD_ADDR_VAR 0 6
19329: PUSH
19330: LD_INT 0
19332: ST_TO_ADDR
// case mode of 0 :
19333: LD_VAR 0 6
19337: PUSH
19338: LD_INT 0
19340: DOUBLE
19341: EQUAL
19342: IFTRUE 19346
19344: GO 30799
19346: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19347: LD_ADDR_VAR 0 11
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 1
19375: PUSH
19376: LD_INT 0
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 1
19428: NEG
19429: PUSH
19430: LD_INT 2
19432: NEG
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: LD_INT 2
19443: NEG
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19540: LD_ADDR_VAR 0 12
19544: PUSH
19545: LD_INT 0
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 1
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 2
19674: NEG
19675: PUSH
19676: LD_INT 1
19678: NEG
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: NEG
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 3
19697: NEG
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 3
19708: NEG
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19736: LD_ADDR_VAR 0 13
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: PUSH
19830: LD_INT 1
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: NEG
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 2
19883: NEG
19884: PUSH
19885: LD_INT 3
19887: NEG
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 3
19895: NEG
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 3
19907: NEG
19908: PUSH
19909: LD_INT 3
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19935: LD_ADDR_VAR 0 14
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 2
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: LD_INT 2
20031: NEG
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: LD_INT 3
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: LD_INT 3
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: LD_INT 2
20107: NEG
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20131: LD_ADDR_VAR 0 15
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 1
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: NEG
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 3
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 3
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20324: LD_ADDR_VAR 0 16
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: NEG
20406: PUSH
20407: LD_INT 2
20409: NEG
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 2
20459: NEG
20460: PUSH
20461: LD_INT 2
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 3
20471: PUSH
20472: LD_INT 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 3
20481: PUSH
20482: LD_INT 3
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20517: LD_ADDR_VAR 0 17
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: NEG
20599: PUSH
20600: LD_INT 2
20602: NEG
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: LD_INT 2
20613: NEG
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 0
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 2
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 2
20652: PUSH
20653: LD_INT 2
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 2
20693: NEG
20694: PUSH
20695: LD_INT 0
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: LD_INT 2
20720: NEG
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20747: LD_ADDR_VAR 0 18
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: LD_INT 2
20843: NEG
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 2
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: NEG
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 2
20934: NEG
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: NEG
20947: PUSH
20948: LD_INT 2
20950: NEG
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20977: LD_ADDR_VAR 0 19
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: NEG
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 1
21046: NEG
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: NEG
21059: PUSH
21060: LD_INT 2
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 2
21112: PUSH
21113: LD_INT 2
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 2
21153: NEG
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 2
21164: NEG
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 2
21176: NEG
21177: PUSH
21178: LD_INT 2
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21207: LD_ADDR_VAR 0 20
21211: PUSH
21212: LD_INT 0
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: LD_INT 2
21303: NEG
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: LD_INT 2
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: NEG
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: LD_INT 1
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: LD_INT 2
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21437: LD_ADDR_VAR 0 21
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: LD_INT 0
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: LD_INT 2
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 2
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 0
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: LD_INT 1
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: NEG
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 2
21624: NEG
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 2
21636: NEG
21637: PUSH
21638: LD_INT 2
21640: NEG
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21667: LD_ADDR_VAR 0 22
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: LD_INT 2
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 0
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 0
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 2
21866: NEG
21867: PUSH
21868: LD_INT 2
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21897: LD_ADDR_VAR 0 23
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: NEG
21979: PUSH
21980: LD_INT 2
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 2
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 2
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: NEG
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 2
22084: NEG
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 2
22096: NEG
22097: PUSH
22098: LD_INT 2
22100: NEG
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 2
22108: NEG
22109: PUSH
22110: LD_INT 3
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: LD_INT 3
22124: NEG
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22177: LD_ADDR_VAR 0 24
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: LD_INT 2
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: NEG
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: NEG
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 2
22376: NEG
22377: PUSH
22378: LD_INT 2
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 3
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 3
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22453: LD_ADDR_VAR 0 25
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 0
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: LD_INT 0
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 0
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: LD_INT 1
22560: NEG
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: NEG
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 2
22640: NEG
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: NEG
22653: PUSH
22654: LD_INT 2
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 3
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 3
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 3
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: LD_INT 3
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22727: LD_ADDR_VAR 0 26
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: LD_INT 2
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: LD_INT 2
22823: NEG
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: NEG
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: LD_INT 2
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: LD_INT 3
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23003: LD_ADDR_VAR 0 27
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: LD_INT 1
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 2
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 2
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 2
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 2
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: LD_INT 2
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: NEG
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: NEG
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 3
23236: NEG
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 3
23248: NEG
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23283: LD_ADDR_VAR 0 28
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PUSH
23343: LD_INT 0
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: LD_INT 2
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: LD_INT 2
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 2
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: LD_INT 2
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: LD_INT 0
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: LD_INT 1
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 2
23482: NEG
23483: PUSH
23484: LD_INT 2
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: LD_INT 3
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 3
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 3
23518: NEG
23519: PUSH
23520: LD_INT 1
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 3
23530: NEG
23531: PUSH
23532: LD_INT 2
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23565: LD_ADDR_VAR 0 29
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 0
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: LD_INT 1
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: LD_INT 2
23650: NEG
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 2
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 1
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 2
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 2
23731: NEG
23732: PUSH
23733: LD_INT 1
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: LD_INT 2
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 2
23755: NEG
23756: PUSH
23757: LD_INT 3
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 3
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 3
23809: NEG
23810: PUSH
23811: LD_INT 2
23813: NEG
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23844: LD_ADDR_VAR 0 30
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: PUSH
23915: LD_INT 1
23917: NEG
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: NEG
23926: PUSH
23927: LD_INT 2
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 2
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 2
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 3
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 3
24056: PUSH
24057: LD_INT 2
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: LD_INT 3
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 2
24076: NEG
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 3
24087: NEG
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24122: LD_ADDR_VAR 0 31
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: LD_INT 2
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 2
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 2
24287: NEG
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: NEG
24300: PUSH
24301: LD_INT 2
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 2
24311: NEG
24312: PUSH
24313: LD_INT 3
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 3
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: PUSH
24345: LD_INT 3
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 3
24365: NEG
24366: PUSH
24367: LD_INT 2
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24400: LD_ADDR_VAR 0 32
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: LD_INT 2
24485: NEG
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 2
24496: NEG
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: LD_INT 2
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: NEG
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: NEG
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 3
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 3
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 3
24643: NEG
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24678: LD_ADDR_VAR 0 33
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: LD_INT 2
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: NEG
24857: PUSH
24858: LD_INT 2
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: NEG
24869: PUSH
24870: LD_INT 3
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 3
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: LD_INT 3
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 3
24922: NEG
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24957: LD_ADDR_VAR 0 34
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 2
25113: NEG
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: NEG
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: NEG
25149: PUSH
25150: LD_INT 3
25152: NEG
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 3
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: LD_INT 3
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 3
25202: NEG
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25237: LD_ADDR_VAR 0 35
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 2
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25349: LD_ADDR_VAR 0 36
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25461: LD_ADDR_VAR 0 37
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25573: LD_ADDR_VAR 0 38
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25685: LD_ADDR_VAR 0 39
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: LD_INT 2
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25797: LD_ADDR_VAR 0 40
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25909: LD_ADDR_VAR 0 41
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 2
26087: NEG
26088: PUSH
26089: LD_INT 2
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: LD_INT 3
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 3
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: LD_INT 2
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 3
26152: PUSH
26153: LD_INT 3
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 2
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 3
26183: NEG
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 3
26194: NEG
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 3
26206: NEG
26207: PUSH
26208: LD_INT 2
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 3
26218: NEG
26219: PUSH
26220: LD_INT 3
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26259: LD_ADDR_VAR 0 42
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 2
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: NEG
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: NEG
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: LD_INT 3
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: LD_INT 3
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 3
26476: NEG
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 3
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: LD_INT 3
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: LD_INT 3
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: LD_INT 3
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 3
26556: NEG
26557: PUSH
26558: LD_INT 2
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 3
26568: NEG
26569: PUSH
26570: LD_INT 3
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26609: LD_ADDR_VAR 0 43
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 2
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: NEG
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 3
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 3
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 3
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 3
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: LD_INT 3
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: LD_INT 3
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 3
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 3
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26957: LD_ADDR_VAR 0 44
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: LD_INT 2
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 2
27112: NEG
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 2
27147: NEG
27148: PUSH
27149: LD_INT 3
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 3
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: LD_INT 2
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 3
27200: PUSH
27201: LD_INT 3
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 3
27231: NEG
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 3
27242: NEG
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: LD_INT 2
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: LD_INT 3
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27307: LD_ADDR_VAR 0 45
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: LD_INT 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: LD_INT 2
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: NEG
27498: PUSH
27499: LD_INT 3
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: LD_INT 3
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: LD_INT 3
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 3
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: LD_INT 3
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: LD_INT 3
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 3
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 3
27604: NEG
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 3
27616: NEG
27617: PUSH
27618: LD_INT 3
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27657: LD_ADDR_VAR 0 46
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: NEG
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 2
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 2
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 3
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 3
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 2
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 3
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 3
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 3
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 3
27953: NEG
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 3
27964: NEG
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28005: LD_ADDR_VAR 0 47
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: LD_INT 2
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 2
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 2
28120: NEG
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: NEG
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28156: LD_ADDR_VAR 0 48
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28303: LD_ADDR_VAR 0 49
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28447: LD_ADDR_VAR 0 50
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28591: LD_ADDR_VAR 0 51
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: NEG
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28738: LD_ADDR_VAR 0 52
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: LD_INT 2
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28889: LD_ADDR_VAR 0 53
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: LD_INT 2
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 2
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: LD_INT 2
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: LD_INT 2
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 2
29065: NEG
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 2
29088: NEG
29089: PUSH
29090: LD_INT 2
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29119: LD_ADDR_VAR 0 54
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29349: LD_ADDR_VAR 0 55
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 2
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 2
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 2
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: LD_INT 1
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 2
29525: NEG
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 2
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 2
29548: NEG
29549: PUSH
29550: LD_INT 2
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29579: LD_ADDR_VAR 0 56
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 2
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 2
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: NEG
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 2
29778: NEG
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29809: LD_ADDR_VAR 0 57
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: LD_INT 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 2
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30039: LD_ADDR_VAR 0 58
30043: PUSH
30044: LD_INT 0
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 2
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30269: LD_ADDR_VAR 0 59
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30357: LD_ADDR_VAR 0 60
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30445: LD_ADDR_VAR 0 61
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: LD_INT 1
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30533: LD_ADDR_VAR 0 62
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30621: LD_ADDR_VAR 0 63
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30709: LD_ADDR_VAR 0 64
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: ST_TO_ADDR
// end ; 1 :
30797: GO 36694
30799: LD_INT 1
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 33430
30807: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30808: LD_ADDR_VAR 0 11
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: LD_INT 3
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 2
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30852: LD_ADDR_VAR 0 12
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: LD_INT 1
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30893: LD_ADDR_VAR 0 13
30897: PUSH
30898: LD_INT 3
30900: PUSH
30901: LD_INT 2
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 3
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30933: LD_ADDR_VAR 0 14
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30974: LD_ADDR_VAR 0 15
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 3
31003: NEG
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31018: LD_ADDR_VAR 0 16
31022: PUSH
31023: LD_INT 2
31025: NEG
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: LD_INT 2
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 3
31049: NEG
31050: PUSH
31051: LD_INT 3
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31064: LD_ADDR_VAR 0 17
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 3
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31108: LD_ADDR_VAR 0 18
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 3
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31149: LD_ADDR_VAR 0 19
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31189: LD_ADDR_VAR 0 20
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31230: LD_ADDR_VAR 0 21
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: NEG
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31274: LD_ADDR_VAR 0 22
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 3
31305: NEG
31306: PUSH
31307: LD_INT 3
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31320: LD_ADDR_VAR 0 23
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 3
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: LD_INT 4
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 3
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31364: LD_ADDR_VAR 0 24
31368: PUSH
31369: LD_INT 3
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 4
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31405: LD_ADDR_VAR 0 25
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31445: LD_ADDR_VAR 0 26
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 4
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31486: LD_ADDR_VAR 0 27
31490: PUSH
31491: LD_INT 3
31493: NEG
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 3
31504: NEG
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 4
31515: NEG
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31530: LD_ADDR_VAR 0 28
31534: PUSH
31535: LD_INT 3
31537: NEG
31538: PUSH
31539: LD_INT 3
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 3
31549: NEG
31550: PUSH
31551: LD_INT 4
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 4
31561: NEG
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31576: LD_ADDR_VAR 0 29
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: LD_INT 4
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 4
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: LD_INT 3
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 5
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: LD_INT 5
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 4
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 6
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: LD_INT 6
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: LD_INT 5
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31731: LD_ADDR_VAR 0 30
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 4
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 5
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 5
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 5
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 6
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 6
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31874: LD_ADDR_VAR 0 31
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 4
31911: PUSH
31912: LD_INT 3
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 4
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 4
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 5
31941: PUSH
31942: LD_INT 4
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 5
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 4
31961: PUSH
31962: LD_INT 5
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 6
31971: PUSH
31972: LD_INT 5
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 6
31981: PUSH
31982: LD_INT 6
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 5
31991: PUSH
31992: LD_INT 6
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32013: LD_ADDR_VAR 0 32
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 3
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 4
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: LD_INT 4
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 5
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 5
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: LD_INT 4
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 6
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 6
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32156: LD_ADDR_VAR 0 33
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 3
32174: NEG
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 3
32197: NEG
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 4
32208: NEG
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 4
32219: NEG
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 4
32231: NEG
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 5
32242: NEG
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 5
32253: NEG
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 5
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 6
32276: NEG
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 6
32287: NEG
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32311: LD_ADDR_VAR 0 34
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: LD_INT 3
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 3
32330: NEG
32331: PUSH
32332: LD_INT 2
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 3
32342: NEG
32343: PUSH
32344: LD_INT 3
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: LD_INT 4
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 4
32366: NEG
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 4
32378: NEG
32379: PUSH
32380: LD_INT 4
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 4
32390: NEG
32391: PUSH
32392: LD_INT 5
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 5
32402: NEG
32403: PUSH
32404: LD_INT 4
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 5
32414: NEG
32415: PUSH
32416: LD_INT 5
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: NEG
32427: PUSH
32428: LD_INT 6
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 6
32438: NEG
32439: PUSH
32440: LD_INT 5
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 6
32450: NEG
32451: PUSH
32452: LD_INT 6
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32474: LD_ADDR_VAR 0 41
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: LD_INT 3
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 2
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32518: LD_ADDR_VAR 0 42
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32559: LD_ADDR_VAR 0 43
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 3
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: LD_INT 3
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32599: LD_ADDR_VAR 0 44
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: LD_INT 3
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32640: LD_ADDR_VAR 0 45
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 3
32669: NEG
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32684: LD_ADDR_VAR 0 46
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: LD_INT 2
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: LD_INT 3
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 3
32715: NEG
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32730: LD_ADDR_VAR 0 47
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: LD_INT 3
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32763: LD_ADDR_VAR 0 48
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32794: LD_ADDR_VAR 0 49
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32823: LD_ADDR_VAR 0 50
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32852: LD_ADDR_VAR 0 51
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: NEG
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32883: LD_ADDR_VAR 0 52
32887: PUSH
32888: LD_INT 3
32890: NEG
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 3
32902: NEG
32903: PUSH
32904: LD_INT 2
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32916: LD_ADDR_VAR 0 53
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 3
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: LD_INT 2
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32960: LD_ADDR_VAR 0 54
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 3
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33001: LD_ADDR_VAR 0 55
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: LD_INT 3
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33041: LD_ADDR_VAR 0 56
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33082: LD_ADDR_VAR 0 57
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 3
33111: NEG
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33126: LD_ADDR_VAR 0 58
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: LD_INT 3
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 3
33157: NEG
33158: PUSH
33159: LD_INT 3
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33172: LD_ADDR_VAR 0 59
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33216: LD_ADDR_VAR 0 60
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33257: LD_ADDR_VAR 0 61
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33297: LD_ADDR_VAR 0 62
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33338: LD_ADDR_VAR 0 63
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 2
33356: NEG
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 2
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33382: LD_ADDR_VAR 0 64
33386: PUSH
33387: LD_INT 1
33389: NEG
33390: PUSH
33391: LD_INT 2
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: LIST
33427: ST_TO_ADDR
// end ; 2 :
33428: GO 36694
33430: LD_INT 2
33432: DOUBLE
33433: EQUAL
33434: IFTRUE 33438
33436: GO 36693
33438: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33439: LD_ADDR_VAR 0 29
33443: PUSH
33444: LD_INT 4
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 4
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 5
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 5
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 4
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 3
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 3
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 3
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 5
33529: PUSH
33530: LD_INT 2
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: PUSH
33540: LD_INT 3
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 4
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 4
33569: PUSH
33570: LD_INT 4
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 3
33579: PUSH
33580: LD_INT 4
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: LD_INT 3
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 4
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 4
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 4
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 3
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 4
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 5
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 4
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 5
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: LD_INT 3
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 3
33722: NEG
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 3
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 4
33778: NEG
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 4
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 4
33801: NEG
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 4
33824: NEG
33825: PUSH
33826: LD_INT 4
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 4
33836: NEG
33837: PUSH
33838: LD_INT 5
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 3
33848: NEG
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 3
33860: NEG
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 4
33872: NEG
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 5
33884: NEG
33885: PUSH
33886: LD_INT 4
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 5
33896: NEG
33897: PUSH
33898: LD_INT 5
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: LD_INT 5
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 5
33920: NEG
33921: PUSH
33922: LD_INT 3
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33977: LD_ADDR_VAR 0 30
33981: PUSH
33982: LD_INT 4
33984: PUSH
33985: LD_INT 4
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 5
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 5
34014: PUSH
34015: LD_INT 5
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 4
34024: PUSH
34025: LD_INT 5
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: LD_INT 4
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 5
34054: PUSH
34055: LD_INT 3
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: LD_INT 5
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 3
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 3
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 4
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: LD_INT 4
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 3
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 2
34156: NEG
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 4
34167: NEG
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 4
34178: NEG
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 3
34190: NEG
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 4
34212: NEG
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 5
34223: NEG
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 5
34234: NEG
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 5
34246: NEG
34247: PUSH
34248: LD_INT 2
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: NEG
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 3
34269: NEG
34270: PUSH
34271: LD_INT 3
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 3
34281: NEG
34282: PUSH
34283: LD_INT 4
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: LD_INT 3
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: LD_INT 2
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: NEG
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 4
34329: NEG
34330: PUSH
34331: LD_INT 3
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 4
34341: NEG
34342: PUSH
34343: LD_INT 4
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: LD_INT 4
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 4
34365: NEG
34366: PUSH
34367: LD_INT 2
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 4
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 5
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 4
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 3
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 3
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: LD_INT 4
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 5
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 5
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34524: LD_ADDR_VAR 0 31
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 4
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 4
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: LD_INT 5
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 4
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: LD_INT 3
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 3
34624: NEG
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 3
34635: NEG
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 3
34669: NEG
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 4
34680: NEG
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 4
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 4
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 4
34726: NEG
34727: PUSH
34728: LD_INT 4
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 4
34738: NEG
34739: PUSH
34740: LD_INT 5
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 3
34750: NEG
34751: PUSH
34752: LD_INT 4
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: NEG
34763: PUSH
34764: LD_INT 3
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 4
34774: NEG
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 5
34786: NEG
34787: PUSH
34788: LD_INT 4
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 5
34798: NEG
34799: PUSH
34800: LD_INT 5
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 3
34810: NEG
34811: PUSH
34812: LD_INT 5
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 5
34822: NEG
34823: PUSH
34824: LD_INT 3
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 3
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: LD_INT 4
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: LD_INT 3
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 2
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: LD_INT 3
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: LD_INT 4
34905: NEG
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: LD_INT 2
34916: NEG
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: NEG
34925: PUSH
34926: LD_INT 4
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 4
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 4
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 5
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 5
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 4
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 3
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: LD_INT 2
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 5
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35074: LD_ADDR_VAR 0 32
35078: PUSH
35079: LD_INT 4
35081: NEG
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 4
35092: NEG
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 3
35104: NEG
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 3
35115: NEG
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 4
35126: NEG
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 5
35137: NEG
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 5
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 5
35160: NEG
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 3
35172: NEG
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 3
35183: NEG
35184: PUSH
35185: LD_INT 3
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 3
35195: NEG
35196: PUSH
35197: LD_INT 4
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 3
35231: NEG
35232: PUSH
35233: LD_INT 2
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 4
35243: NEG
35244: PUSH
35245: LD_INT 3
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 4
35255: NEG
35256: PUSH
35257: LD_INT 4
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: LD_INT 4
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 4
35279: NEG
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 4
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 5
35305: NEG
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: LD_INT 4
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 3
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 3
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: LD_INT 4
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: LD_INT 5
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 2
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: LD_INT 5
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 4
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 4
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 3
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 2
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: LD_INT 2
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 4
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 4
35486: PUSH
35487: LD_INT 4
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 4
35496: PUSH
35497: LD_INT 3
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 5
35506: PUSH
35507: LD_INT 4
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 5
35516: PUSH
35517: LD_INT 5
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 4
35526: PUSH
35527: LD_INT 5
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 4
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 5
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: LD_INT 5
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35621: LD_ADDR_VAR 0 33
35625: PUSH
35626: LD_INT 4
35628: NEG
35629: PUSH
35630: LD_INT 4
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 4
35640: NEG
35641: PUSH
35642: LD_INT 5
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 3
35652: NEG
35653: PUSH
35654: LD_INT 4
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: NEG
35665: PUSH
35666: LD_INT 3
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 4
35676: NEG
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 5
35688: NEG
35689: PUSH
35690: LD_INT 4
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 5
35700: NEG
35701: PUSH
35702: LD_INT 5
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 3
35712: NEG
35713: PUSH
35714: LD_INT 5
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 5
35724: NEG
35725: PUSH
35726: LD_INT 3
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 3
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 4
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 3
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 4
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: LD_INT 4
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 4
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 4
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 5
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 5
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 4
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 3
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 5
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: LD_INT 3
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 3
35941: PUSH
35942: LD_INT 2
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 4
35951: PUSH
35952: LD_INT 3
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 4
35961: PUSH
35962: LD_INT 4
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 3
35971: PUSH
35972: LD_INT 4
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 3
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: LD_INT 4
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 4
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 3
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 4
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 5
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 5
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 4
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: LD_INT 3
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: LD_INT 5
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: NEG
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36159: LD_ADDR_VAR 0 34
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 4
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: LD_INT 5
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 4
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 3
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: LD_INT 3
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 4
36225: NEG
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: LD_INT 5
36237: NEG
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 2
36245: PUSH
36246: LD_INT 3
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: LD_INT 5
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 4
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 4
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 4
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 4
36361: PUSH
36362: LD_INT 4
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 4
36371: PUSH
36372: LD_INT 3
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 5
36381: PUSH
36382: LD_INT 4
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 5
36391: PUSH
36392: LD_INT 5
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 4
36401: PUSH
36402: LD_INT 5
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 3
36411: PUSH
36412: LD_INT 4
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: LD_INT 3
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 5
36431: PUSH
36432: LD_INT 3
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 3
36441: PUSH
36442: LD_INT 5
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 4
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 4
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 3
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: LD_INT 2
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 4
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 4
36544: NEG
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 4
36555: NEG
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 3
36567: NEG
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 3
36578: NEG
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 4
36589: NEG
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 5
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 5
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 5
36623: NEG
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 3
36635: NEG
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// end ; end ;
36691: GO 36694
36693: POP
// case btype of b_depot , b_warehouse :
36694: LD_VAR 0 1
36698: PUSH
36699: LD_INT 0
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36713
36705: LD_INT 1
36707: DOUBLE
36708: EQUAL
36709: IFTRUE 36713
36711: GO 36914
36713: POP
// case nation of nation_american :
36714: LD_VAR 0 5
36718: PUSH
36719: LD_INT 1
36721: DOUBLE
36722: EQUAL
36723: IFTRUE 36727
36725: GO 36783
36727: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36728: LD_ADDR_VAR 0 9
36732: PUSH
36733: LD_VAR 0 11
36737: PUSH
36738: LD_VAR 0 12
36742: PUSH
36743: LD_VAR 0 13
36747: PUSH
36748: LD_VAR 0 14
36752: PUSH
36753: LD_VAR 0 15
36757: PUSH
36758: LD_VAR 0 16
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: PUSH
36771: LD_VAR 0 4
36775: PUSH
36776: LD_INT 1
36778: PLUS
36779: ARRAY
36780: ST_TO_ADDR
36781: GO 36912
36783: LD_INT 2
36785: DOUBLE
36786: EQUAL
36787: IFTRUE 36791
36789: GO 36847
36791: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36792: LD_ADDR_VAR 0 9
36796: PUSH
36797: LD_VAR 0 17
36801: PUSH
36802: LD_VAR 0 18
36806: PUSH
36807: LD_VAR 0 19
36811: PUSH
36812: LD_VAR 0 20
36816: PUSH
36817: LD_VAR 0 21
36821: PUSH
36822: LD_VAR 0 22
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: PUSH
36835: LD_VAR 0 4
36839: PUSH
36840: LD_INT 1
36842: PLUS
36843: ARRAY
36844: ST_TO_ADDR
36845: GO 36912
36847: LD_INT 3
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 36911
36855: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36856: LD_ADDR_VAR 0 9
36860: PUSH
36861: LD_VAR 0 23
36865: PUSH
36866: LD_VAR 0 24
36870: PUSH
36871: LD_VAR 0 25
36875: PUSH
36876: LD_VAR 0 26
36880: PUSH
36881: LD_VAR 0 27
36885: PUSH
36886: LD_VAR 0 28
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: PUSH
36899: LD_VAR 0 4
36903: PUSH
36904: LD_INT 1
36906: PLUS
36907: ARRAY
36908: ST_TO_ADDR
36909: GO 36912
36911: POP
36912: GO 37467
36914: LD_INT 2
36916: DOUBLE
36917: EQUAL
36918: IFTRUE 36928
36920: LD_INT 3
36922: DOUBLE
36923: EQUAL
36924: IFTRUE 36928
36926: GO 36984
36928: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36929: LD_ADDR_VAR 0 9
36933: PUSH
36934: LD_VAR 0 29
36938: PUSH
36939: LD_VAR 0 30
36943: PUSH
36944: LD_VAR 0 31
36948: PUSH
36949: LD_VAR 0 32
36953: PUSH
36954: LD_VAR 0 33
36958: PUSH
36959: LD_VAR 0 34
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: PUSH
36972: LD_VAR 0 4
36976: PUSH
36977: LD_INT 1
36979: PLUS
36980: ARRAY
36981: ST_TO_ADDR
36982: GO 37467
36984: LD_INT 16
36986: DOUBLE
36987: EQUAL
36988: IFTRUE 37046
36990: LD_INT 17
36992: DOUBLE
36993: EQUAL
36994: IFTRUE 37046
36996: LD_INT 18
36998: DOUBLE
36999: EQUAL
37000: IFTRUE 37046
37002: LD_INT 19
37004: DOUBLE
37005: EQUAL
37006: IFTRUE 37046
37008: LD_INT 22
37010: DOUBLE
37011: EQUAL
37012: IFTRUE 37046
37014: LD_INT 20
37016: DOUBLE
37017: EQUAL
37018: IFTRUE 37046
37020: LD_INT 21
37022: DOUBLE
37023: EQUAL
37024: IFTRUE 37046
37026: LD_INT 23
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37046
37032: LD_INT 24
37034: DOUBLE
37035: EQUAL
37036: IFTRUE 37046
37038: LD_INT 25
37040: DOUBLE
37041: EQUAL
37042: IFTRUE 37046
37044: GO 37102
37046: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37047: LD_ADDR_VAR 0 9
37051: PUSH
37052: LD_VAR 0 35
37056: PUSH
37057: LD_VAR 0 36
37061: PUSH
37062: LD_VAR 0 37
37066: PUSH
37067: LD_VAR 0 38
37071: PUSH
37072: LD_VAR 0 39
37076: PUSH
37077: LD_VAR 0 40
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: PUSH
37090: LD_VAR 0 4
37094: PUSH
37095: LD_INT 1
37097: PLUS
37098: ARRAY
37099: ST_TO_ADDR
37100: GO 37467
37102: LD_INT 6
37104: DOUBLE
37105: EQUAL
37106: IFTRUE 37158
37108: LD_INT 7
37110: DOUBLE
37111: EQUAL
37112: IFTRUE 37158
37114: LD_INT 8
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37158
37120: LD_INT 13
37122: DOUBLE
37123: EQUAL
37124: IFTRUE 37158
37126: LD_INT 12
37128: DOUBLE
37129: EQUAL
37130: IFTRUE 37158
37132: LD_INT 15
37134: DOUBLE
37135: EQUAL
37136: IFTRUE 37158
37138: LD_INT 11
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37158
37144: LD_INT 14
37146: DOUBLE
37147: EQUAL
37148: IFTRUE 37158
37150: LD_INT 10
37152: DOUBLE
37153: EQUAL
37154: IFTRUE 37158
37156: GO 37214
37158: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37159: LD_ADDR_VAR 0 9
37163: PUSH
37164: LD_VAR 0 41
37168: PUSH
37169: LD_VAR 0 42
37173: PUSH
37174: LD_VAR 0 43
37178: PUSH
37179: LD_VAR 0 44
37183: PUSH
37184: LD_VAR 0 45
37188: PUSH
37189: LD_VAR 0 46
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: PUSH
37202: LD_VAR 0 4
37206: PUSH
37207: LD_INT 1
37209: PLUS
37210: ARRAY
37211: ST_TO_ADDR
37212: GO 37467
37214: LD_INT 36
37216: DOUBLE
37217: EQUAL
37218: IFTRUE 37222
37220: GO 37278
37222: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37223: LD_ADDR_VAR 0 9
37227: PUSH
37228: LD_VAR 0 47
37232: PUSH
37233: LD_VAR 0 48
37237: PUSH
37238: LD_VAR 0 49
37242: PUSH
37243: LD_VAR 0 50
37247: PUSH
37248: LD_VAR 0 51
37252: PUSH
37253: LD_VAR 0 52
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: PUSH
37266: LD_VAR 0 4
37270: PUSH
37271: LD_INT 1
37273: PLUS
37274: ARRAY
37275: ST_TO_ADDR
37276: GO 37467
37278: LD_INT 4
37280: DOUBLE
37281: EQUAL
37282: IFTRUE 37304
37284: LD_INT 5
37286: DOUBLE
37287: EQUAL
37288: IFTRUE 37304
37290: LD_INT 34
37292: DOUBLE
37293: EQUAL
37294: IFTRUE 37304
37296: LD_INT 37
37298: DOUBLE
37299: EQUAL
37300: IFTRUE 37304
37302: GO 37360
37304: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37305: LD_ADDR_VAR 0 9
37309: PUSH
37310: LD_VAR 0 53
37314: PUSH
37315: LD_VAR 0 54
37319: PUSH
37320: LD_VAR 0 55
37324: PUSH
37325: LD_VAR 0 56
37329: PUSH
37330: LD_VAR 0 57
37334: PUSH
37335: LD_VAR 0 58
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: PUSH
37348: LD_VAR 0 4
37352: PUSH
37353: LD_INT 1
37355: PLUS
37356: ARRAY
37357: ST_TO_ADDR
37358: GO 37467
37360: LD_INT 31
37362: DOUBLE
37363: EQUAL
37364: IFTRUE 37410
37366: LD_INT 32
37368: DOUBLE
37369: EQUAL
37370: IFTRUE 37410
37372: LD_INT 33
37374: DOUBLE
37375: EQUAL
37376: IFTRUE 37410
37378: LD_INT 27
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37410
37384: LD_INT 26
37386: DOUBLE
37387: EQUAL
37388: IFTRUE 37410
37390: LD_INT 28
37392: DOUBLE
37393: EQUAL
37394: IFTRUE 37410
37396: LD_INT 29
37398: DOUBLE
37399: EQUAL
37400: IFTRUE 37410
37402: LD_INT 30
37404: DOUBLE
37405: EQUAL
37406: IFTRUE 37410
37408: GO 37466
37410: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37411: LD_ADDR_VAR 0 9
37415: PUSH
37416: LD_VAR 0 59
37420: PUSH
37421: LD_VAR 0 60
37425: PUSH
37426: LD_VAR 0 61
37430: PUSH
37431: LD_VAR 0 62
37435: PUSH
37436: LD_VAR 0 63
37440: PUSH
37441: LD_VAR 0 64
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: LD_VAR 0 4
37458: PUSH
37459: LD_INT 1
37461: PLUS
37462: ARRAY
37463: ST_TO_ADDR
37464: GO 37467
37466: POP
// temp_list2 = [ ] ;
37467: LD_ADDR_VAR 0 10
37471: PUSH
37472: EMPTY
37473: ST_TO_ADDR
// for i in temp_list do
37474: LD_ADDR_VAR 0 8
37478: PUSH
37479: LD_VAR 0 9
37483: PUSH
37484: FOR_IN
37485: IFFALSE 37537
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37487: LD_ADDR_VAR 0 10
37491: PUSH
37492: LD_VAR 0 10
37496: PUSH
37497: LD_VAR 0 8
37501: PUSH
37502: LD_INT 1
37504: ARRAY
37505: PUSH
37506: LD_VAR 0 2
37510: PLUS
37511: PUSH
37512: LD_VAR 0 8
37516: PUSH
37517: LD_INT 2
37519: ARRAY
37520: PUSH
37521: LD_VAR 0 3
37525: PLUS
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: ADD
37534: ST_TO_ADDR
37535: GO 37484
37537: POP
37538: POP
// result = temp_list2 ;
37539: LD_ADDR_VAR 0 7
37543: PUSH
37544: LD_VAR 0 10
37548: ST_TO_ADDR
// end ;
37549: LD_VAR 0 7
37553: RET
// export function EnemyInRange ( unit , dist ) ; begin
37554: LD_INT 0
37556: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37557: LD_ADDR_VAR 0 3
37561: PUSH
37562: LD_VAR 0 1
37566: PPUSH
37567: CALL_OW 255
37571: PPUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 250
37581: PPUSH
37582: LD_VAR 0 1
37586: PPUSH
37587: CALL_OW 251
37591: PPUSH
37592: LD_VAR 0 2
37596: PPUSH
37597: CALL 10927 0 4
37601: PUSH
37602: LD_INT 4
37604: ARRAY
37605: ST_TO_ADDR
// end ;
37606: LD_VAR 0 3
37610: RET
// export function PlayerSeeMe ( unit ) ; begin
37611: LD_INT 0
37613: PPUSH
// result := See ( your_side , unit ) ;
37614: LD_ADDR_VAR 0 2
37618: PUSH
37619: LD_OWVAR 2
37623: PPUSH
37624: LD_VAR 0 1
37628: PPUSH
37629: CALL_OW 292
37633: ST_TO_ADDR
// end ;
37634: LD_VAR 0 2
37638: RET
// export function ReverseDir ( unit ) ; begin
37639: LD_INT 0
37641: PPUSH
// if not unit then
37642: LD_VAR 0 1
37646: NOT
37647: IFFALSE 37651
// exit ;
37649: GO 37674
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37651: LD_ADDR_VAR 0 2
37655: PUSH
37656: LD_VAR 0 1
37660: PPUSH
37661: CALL_OW 254
37665: PUSH
37666: LD_INT 3
37668: PLUS
37669: PUSH
37670: LD_INT 6
37672: MOD
37673: ST_TO_ADDR
// end ;
37674: LD_VAR 0 2
37678: RET
// export function ReverseArray ( array ) ; var i ; begin
37679: LD_INT 0
37681: PPUSH
37682: PPUSH
// if not array then
37683: LD_VAR 0 1
37687: NOT
37688: IFFALSE 37692
// exit ;
37690: GO 37747
// result := [ ] ;
37692: LD_ADDR_VAR 0 2
37696: PUSH
37697: EMPTY
37698: ST_TO_ADDR
// for i := array downto 1 do
37699: LD_ADDR_VAR 0 3
37703: PUSH
37704: DOUBLE
37705: LD_VAR 0 1
37709: INC
37710: ST_TO_ADDR
37711: LD_INT 1
37713: PUSH
37714: FOR_DOWNTO
37715: IFFALSE 37745
// result := Join ( result , array [ i ] ) ;
37717: LD_ADDR_VAR 0 2
37721: PUSH
37722: LD_VAR 0 2
37726: PPUSH
37727: LD_VAR 0 1
37731: PUSH
37732: LD_VAR 0 3
37736: ARRAY
37737: PPUSH
37738: CALL 42390 0 2
37742: ST_TO_ADDR
37743: GO 37714
37745: POP
37746: POP
// end ;
37747: LD_VAR 0 2
37751: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37752: LD_INT 0
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
// if not unit or not hexes then
37760: LD_VAR 0 1
37764: NOT
37765: PUSH
37766: LD_VAR 0 2
37770: NOT
37771: OR
37772: IFFALSE 37776
// exit ;
37774: GO 37899
// dist := 9999 ;
37776: LD_ADDR_VAR 0 5
37780: PUSH
37781: LD_INT 9999
37783: ST_TO_ADDR
// for i = 1 to hexes do
37784: LD_ADDR_VAR 0 4
37788: PUSH
37789: DOUBLE
37790: LD_INT 1
37792: DEC
37793: ST_TO_ADDR
37794: LD_VAR 0 2
37798: PUSH
37799: FOR_TO
37800: IFFALSE 37887
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37802: LD_ADDR_VAR 0 6
37806: PUSH
37807: LD_VAR 0 1
37811: PPUSH
37812: LD_VAR 0 2
37816: PUSH
37817: LD_VAR 0 4
37821: ARRAY
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PPUSH
37827: LD_VAR 0 2
37831: PUSH
37832: LD_VAR 0 4
37836: ARRAY
37837: PUSH
37838: LD_INT 2
37840: ARRAY
37841: PPUSH
37842: CALL_OW 297
37846: ST_TO_ADDR
// if tdist < dist then
37847: LD_VAR 0 6
37851: PUSH
37852: LD_VAR 0 5
37856: LESS
37857: IFFALSE 37885
// begin hex := hexes [ i ] ;
37859: LD_ADDR_VAR 0 8
37863: PUSH
37864: LD_VAR 0 2
37868: PUSH
37869: LD_VAR 0 4
37873: ARRAY
37874: ST_TO_ADDR
// dist := tdist ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_VAR 0 6
37884: ST_TO_ADDR
// end ; end ;
37885: GO 37799
37887: POP
37888: POP
// result := hex ;
37889: LD_ADDR_VAR 0 3
37893: PUSH
37894: LD_VAR 0 8
37898: ST_TO_ADDR
// end ;
37899: LD_VAR 0 3
37903: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37904: LD_INT 0
37906: PPUSH
37907: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37908: LD_VAR 0 1
37912: NOT
37913: PUSH
37914: LD_VAR 0 1
37918: PUSH
37919: LD_INT 21
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 23
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PPUSH
37943: CALL_OW 69
37947: IN
37948: NOT
37949: OR
37950: IFFALSE 37954
// exit ;
37952: GO 38001
// for i = 1 to 3 do
37954: LD_ADDR_VAR 0 3
37958: PUSH
37959: DOUBLE
37960: LD_INT 1
37962: DEC
37963: ST_TO_ADDR
37964: LD_INT 3
37966: PUSH
37967: FOR_TO
37968: IFFALSE 37999
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 250
37979: PPUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 251
37989: PPUSH
37990: LD_INT 1
37992: PPUSH
37993: CALL_OW 453
37997: GO 37967
37999: POP
38000: POP
// end ;
38001: LD_VAR 0 2
38005: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38006: LD_INT 0
38008: PPUSH
38009: PPUSH
38010: PPUSH
38011: PPUSH
38012: PPUSH
38013: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
38014: LD_VAR 0 1
38018: NOT
38019: PUSH
38020: LD_VAR 0 2
38024: NOT
38025: OR
38026: PUSH
38027: LD_VAR 0 1
38031: PPUSH
38032: CALL_OW 314
38036: OR
38037: IFFALSE 38041
// exit ;
38039: GO 38508
// if GetLives ( i ) < 250 then
38041: LD_VAR 0 4
38045: PPUSH
38046: CALL_OW 256
38050: PUSH
38051: LD_INT 250
38053: LESS
38054: IFFALSE 38067
// begin ComAutodestruct ( i ) ;
38056: LD_VAR 0 4
38060: PPUSH
38061: CALL 37904 0 1
// exit ;
38065: GO 38508
// end ; x := GetX ( enemy_unit ) ;
38067: LD_ADDR_VAR 0 7
38071: PUSH
38072: LD_VAR 0 2
38076: PPUSH
38077: CALL_OW 250
38081: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38082: LD_ADDR_VAR 0 8
38086: PUSH
38087: LD_VAR 0 2
38091: PPUSH
38092: CALL_OW 251
38096: ST_TO_ADDR
// if not x or not y then
38097: LD_VAR 0 7
38101: NOT
38102: PUSH
38103: LD_VAR 0 8
38107: NOT
38108: OR
38109: IFFALSE 38113
// exit ;
38111: GO 38508
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38113: LD_ADDR_VAR 0 6
38117: PUSH
38118: LD_VAR 0 7
38122: PPUSH
38123: LD_INT 0
38125: PPUSH
38126: LD_INT 4
38128: PPUSH
38129: CALL_OW 272
38133: PUSH
38134: LD_VAR 0 8
38138: PPUSH
38139: LD_INT 0
38141: PPUSH
38142: LD_INT 4
38144: PPUSH
38145: CALL_OW 273
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_VAR 0 7
38158: PPUSH
38159: LD_INT 1
38161: PPUSH
38162: LD_INT 4
38164: PPUSH
38165: CALL_OW 272
38169: PUSH
38170: LD_VAR 0 8
38174: PPUSH
38175: LD_INT 1
38177: PPUSH
38178: LD_INT 4
38180: PPUSH
38181: CALL_OW 273
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_VAR 0 7
38194: PPUSH
38195: LD_INT 2
38197: PPUSH
38198: LD_INT 4
38200: PPUSH
38201: CALL_OW 272
38205: PUSH
38206: LD_VAR 0 8
38210: PPUSH
38211: LD_INT 2
38213: PPUSH
38214: LD_INT 4
38216: PPUSH
38217: CALL_OW 273
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_VAR 0 7
38230: PPUSH
38231: LD_INT 3
38233: PPUSH
38234: LD_INT 4
38236: PPUSH
38237: CALL_OW 272
38241: PUSH
38242: LD_VAR 0 8
38246: PPUSH
38247: LD_INT 3
38249: PPUSH
38250: LD_INT 4
38252: PPUSH
38253: CALL_OW 273
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_VAR 0 7
38266: PPUSH
38267: LD_INT 4
38269: PPUSH
38270: LD_INT 4
38272: PPUSH
38273: CALL_OW 272
38277: PUSH
38278: LD_VAR 0 8
38282: PPUSH
38283: LD_INT 4
38285: PPUSH
38286: LD_INT 4
38288: PPUSH
38289: CALL_OW 273
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_VAR 0 7
38302: PPUSH
38303: LD_INT 5
38305: PPUSH
38306: LD_INT 4
38308: PPUSH
38309: CALL_OW 272
38313: PUSH
38314: LD_VAR 0 8
38318: PPUSH
38319: LD_INT 5
38321: PPUSH
38322: LD_INT 4
38324: PPUSH
38325: CALL_OW 273
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: ST_TO_ADDR
// for i = tmp downto 1 do
38342: LD_ADDR_VAR 0 4
38346: PUSH
38347: DOUBLE
38348: LD_VAR 0 6
38352: INC
38353: ST_TO_ADDR
38354: LD_INT 1
38356: PUSH
38357: FOR_DOWNTO
38358: IFFALSE 38459
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38360: LD_VAR 0 6
38364: PUSH
38365: LD_VAR 0 4
38369: ARRAY
38370: PUSH
38371: LD_INT 1
38373: ARRAY
38374: PPUSH
38375: LD_VAR 0 6
38379: PUSH
38380: LD_VAR 0 4
38384: ARRAY
38385: PUSH
38386: LD_INT 2
38388: ARRAY
38389: PPUSH
38390: CALL_OW 488
38394: NOT
38395: PUSH
38396: LD_VAR 0 6
38400: PUSH
38401: LD_VAR 0 4
38405: ARRAY
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PPUSH
38411: LD_VAR 0 6
38415: PUSH
38416: LD_VAR 0 4
38420: ARRAY
38421: PUSH
38422: LD_INT 2
38424: ARRAY
38425: PPUSH
38426: CALL_OW 428
38430: PUSH
38431: LD_INT 0
38433: NONEQUAL
38434: OR
38435: IFFALSE 38457
// tmp := Delete ( tmp , i ) ;
38437: LD_ADDR_VAR 0 6
38441: PUSH
38442: LD_VAR 0 6
38446: PPUSH
38447: LD_VAR 0 4
38451: PPUSH
38452: CALL_OW 3
38456: ST_TO_ADDR
38457: GO 38357
38459: POP
38460: POP
// j := GetClosestHex ( unit , tmp ) ;
38461: LD_ADDR_VAR 0 5
38465: PUSH
38466: LD_VAR 0 1
38470: PPUSH
38471: LD_VAR 0 6
38475: PPUSH
38476: CALL 37752 0 2
38480: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38481: LD_VAR 0 1
38485: PPUSH
38486: LD_VAR 0 5
38490: PUSH
38491: LD_INT 1
38493: ARRAY
38494: PPUSH
38495: LD_VAR 0 5
38499: PUSH
38500: LD_INT 2
38502: ARRAY
38503: PPUSH
38504: CALL_OW 111
// end ;
38508: LD_VAR 0 3
38512: RET
// export function PrepareApemanSoldier ( ) ; begin
38513: LD_INT 0
38515: PPUSH
// uc_nation := 0 ;
38516: LD_ADDR_OWVAR 21
38520: PUSH
38521: LD_INT 0
38523: ST_TO_ADDR
// hc_sex := sex_male ;
38524: LD_ADDR_OWVAR 27
38528: PUSH
38529: LD_INT 1
38531: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38532: LD_ADDR_OWVAR 28
38536: PUSH
38537: LD_INT 15
38539: ST_TO_ADDR
// hc_gallery :=  ;
38540: LD_ADDR_OWVAR 33
38544: PUSH
38545: LD_STRING 
38547: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38548: LD_ADDR_OWVAR 31
38552: PUSH
38553: LD_INT 0
38555: PPUSH
38556: LD_INT 3
38558: PPUSH
38559: CALL_OW 12
38563: PUSH
38564: LD_INT 0
38566: PPUSH
38567: LD_INT 3
38569: PPUSH
38570: CALL_OW 12
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: ST_TO_ADDR
// end ;
38587: LD_VAR 0 1
38591: RET
// export function PrepareApemanEngineer ( ) ; begin
38592: LD_INT 0
38594: PPUSH
// uc_nation := 0 ;
38595: LD_ADDR_OWVAR 21
38599: PUSH
38600: LD_INT 0
38602: ST_TO_ADDR
// hc_sex := sex_male ;
38603: LD_ADDR_OWVAR 27
38607: PUSH
38608: LD_INT 1
38610: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38611: LD_ADDR_OWVAR 28
38615: PUSH
38616: LD_INT 16
38618: ST_TO_ADDR
// hc_gallery :=  ;
38619: LD_ADDR_OWVAR 33
38623: PUSH
38624: LD_STRING 
38626: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38627: LD_ADDR_OWVAR 31
38631: PUSH
38632: LD_INT 0
38634: PPUSH
38635: LD_INT 3
38637: PPUSH
38638: CALL_OW 12
38642: PUSH
38643: LD_INT 0
38645: PPUSH
38646: LD_INT 3
38648: PPUSH
38649: CALL_OW 12
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// end ;
38666: LD_VAR 0 1
38670: RET
// export function PrepareApeman ( agressivity ) ; begin
38671: LD_INT 0
38673: PPUSH
// uc_side := 0 ;
38674: LD_ADDR_OWVAR 20
38678: PUSH
38679: LD_INT 0
38681: ST_TO_ADDR
// uc_nation := 0 ;
38682: LD_ADDR_OWVAR 21
38686: PUSH
38687: LD_INT 0
38689: ST_TO_ADDR
// hc_sex := sex_male ;
38690: LD_ADDR_OWVAR 27
38694: PUSH
38695: LD_INT 1
38697: ST_TO_ADDR
// hc_class := class_apeman ;
38698: LD_ADDR_OWVAR 28
38702: PUSH
38703: LD_INT 12
38705: ST_TO_ADDR
// hc_gallery :=  ;
38706: LD_ADDR_OWVAR 33
38710: PUSH
38711: LD_STRING 
38713: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38714: LD_ADDR_OWVAR 35
38718: PUSH
38719: LD_VAR 0 1
38723: NEG
38724: PPUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 12
38734: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38735: LD_ADDR_OWVAR 31
38739: PUSH
38740: LD_INT 0
38742: PPUSH
38743: LD_INT 3
38745: PPUSH
38746: CALL_OW 12
38750: PUSH
38751: LD_INT 0
38753: PPUSH
38754: LD_INT 3
38756: PPUSH
38757: CALL_OW 12
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// end ;
38774: LD_VAR 0 2
38778: RET
// export function PrepareTiger ( agressivity ) ; begin
38779: LD_INT 0
38781: PPUSH
// uc_side := 0 ;
38782: LD_ADDR_OWVAR 20
38786: PUSH
38787: LD_INT 0
38789: ST_TO_ADDR
// uc_nation := 0 ;
38790: LD_ADDR_OWVAR 21
38794: PUSH
38795: LD_INT 0
38797: ST_TO_ADDR
// hc_class := class_tiger ;
38798: LD_ADDR_OWVAR 28
38802: PUSH
38803: LD_INT 14
38805: ST_TO_ADDR
// hc_gallery :=  ;
38806: LD_ADDR_OWVAR 33
38810: PUSH
38811: LD_STRING 
38813: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38814: LD_ADDR_OWVAR 35
38818: PUSH
38819: LD_VAR 0 1
38823: NEG
38824: PPUSH
38825: LD_VAR 0 1
38829: PPUSH
38830: CALL_OW 12
38834: ST_TO_ADDR
// end ;
38835: LD_VAR 0 2
38839: RET
// export function PrepareEnchidna ( ) ; begin
38840: LD_INT 0
38842: PPUSH
// uc_side := 0 ;
38843: LD_ADDR_OWVAR 20
38847: PUSH
38848: LD_INT 0
38850: ST_TO_ADDR
// uc_nation := 0 ;
38851: LD_ADDR_OWVAR 21
38855: PUSH
38856: LD_INT 0
38858: ST_TO_ADDR
// hc_class := class_baggie ;
38859: LD_ADDR_OWVAR 28
38863: PUSH
38864: LD_INT 13
38866: ST_TO_ADDR
// hc_gallery :=  ;
38867: LD_ADDR_OWVAR 33
38871: PUSH
38872: LD_STRING 
38874: ST_TO_ADDR
// end ;
38875: LD_VAR 0 1
38879: RET
// export function PrepareFrog ( ) ; begin
38880: LD_INT 0
38882: PPUSH
// uc_side := 0 ;
38883: LD_ADDR_OWVAR 20
38887: PUSH
38888: LD_INT 0
38890: ST_TO_ADDR
// uc_nation := 0 ;
38891: LD_ADDR_OWVAR 21
38895: PUSH
38896: LD_INT 0
38898: ST_TO_ADDR
// hc_class := class_frog ;
38899: LD_ADDR_OWVAR 28
38903: PUSH
38904: LD_INT 19
38906: ST_TO_ADDR
// hc_gallery :=  ;
38907: LD_ADDR_OWVAR 33
38911: PUSH
38912: LD_STRING 
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 1
38919: RET
// export function PrepareFish ( ) ; begin
38920: LD_INT 0
38922: PPUSH
// uc_side := 0 ;
38923: LD_ADDR_OWVAR 20
38927: PUSH
38928: LD_INT 0
38930: ST_TO_ADDR
// uc_nation := 0 ;
38931: LD_ADDR_OWVAR 21
38935: PUSH
38936: LD_INT 0
38938: ST_TO_ADDR
// hc_class := class_fish ;
38939: LD_ADDR_OWVAR 28
38943: PUSH
38944: LD_INT 20
38946: ST_TO_ADDR
// hc_gallery :=  ;
38947: LD_ADDR_OWVAR 33
38951: PUSH
38952: LD_STRING 
38954: ST_TO_ADDR
// end ;
38955: LD_VAR 0 1
38959: RET
// export function PrepareBird ( ) ; begin
38960: LD_INT 0
38962: PPUSH
// uc_side := 0 ;
38963: LD_ADDR_OWVAR 20
38967: PUSH
38968: LD_INT 0
38970: ST_TO_ADDR
// uc_nation := 0 ;
38971: LD_ADDR_OWVAR 21
38975: PUSH
38976: LD_INT 0
38978: ST_TO_ADDR
// hc_class := class_phororhacos ;
38979: LD_ADDR_OWVAR 28
38983: PUSH
38984: LD_INT 18
38986: ST_TO_ADDR
// hc_gallery :=  ;
38987: LD_ADDR_OWVAR 33
38991: PUSH
38992: LD_STRING 
38994: ST_TO_ADDR
// end ;
38995: LD_VAR 0 1
38999: RET
// export function PrepareHorse ( ) ; begin
39000: LD_INT 0
39002: PPUSH
// uc_side := 0 ;
39003: LD_ADDR_OWVAR 20
39007: PUSH
39008: LD_INT 0
39010: ST_TO_ADDR
// uc_nation := 0 ;
39011: LD_ADDR_OWVAR 21
39015: PUSH
39016: LD_INT 0
39018: ST_TO_ADDR
// hc_class := class_horse ;
39019: LD_ADDR_OWVAR 28
39023: PUSH
39024: LD_INT 21
39026: ST_TO_ADDR
// hc_gallery :=  ;
39027: LD_ADDR_OWVAR 33
39031: PUSH
39032: LD_STRING 
39034: ST_TO_ADDR
// end ;
39035: LD_VAR 0 1
39039: RET
// export function PrepareMastodont ( ) ; begin
39040: LD_INT 0
39042: PPUSH
// uc_side := 0 ;
39043: LD_ADDR_OWVAR 20
39047: PUSH
39048: LD_INT 0
39050: ST_TO_ADDR
// uc_nation := 0 ;
39051: LD_ADDR_OWVAR 21
39055: PUSH
39056: LD_INT 0
39058: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39059: LD_ADDR_OWVAR 37
39063: PUSH
39064: LD_INT 31
39066: ST_TO_ADDR
// vc_control := control_rider ;
39067: LD_ADDR_OWVAR 38
39071: PUSH
39072: LD_INT 4
39074: ST_TO_ADDR
// end ;
39075: LD_VAR 0 1
39079: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39080: LD_INT 0
39082: PPUSH
39083: PPUSH
39084: PPUSH
// uc_side = 0 ;
39085: LD_ADDR_OWVAR 20
39089: PUSH
39090: LD_INT 0
39092: ST_TO_ADDR
// uc_nation = 0 ;
39093: LD_ADDR_OWVAR 21
39097: PUSH
39098: LD_INT 0
39100: ST_TO_ADDR
// InitHc_All ( ) ;
39101: CALL_OW 584
// InitVc ;
39105: CALL_OW 20
// if mastodonts then
39109: LD_VAR 0 6
39113: IFFALSE 39180
// for i = 1 to mastodonts do
39115: LD_ADDR_VAR 0 11
39119: PUSH
39120: DOUBLE
39121: LD_INT 1
39123: DEC
39124: ST_TO_ADDR
39125: LD_VAR 0 6
39129: PUSH
39130: FOR_TO
39131: IFFALSE 39178
// begin vc_chassis := 31 ;
39133: LD_ADDR_OWVAR 37
39137: PUSH
39138: LD_INT 31
39140: ST_TO_ADDR
// vc_control := control_rider ;
39141: LD_ADDR_OWVAR 38
39145: PUSH
39146: LD_INT 4
39148: ST_TO_ADDR
// animal := CreateVehicle ;
39149: LD_ADDR_VAR 0 12
39153: PUSH
39154: CALL_OW 45
39158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39159: LD_VAR 0 12
39163: PPUSH
39164: LD_VAR 0 8
39168: PPUSH
39169: LD_INT 0
39171: PPUSH
39172: CALL 41308 0 3
// end ;
39176: GO 39130
39178: POP
39179: POP
// if horses then
39180: LD_VAR 0 5
39184: IFFALSE 39251
// for i = 1 to horses do
39186: LD_ADDR_VAR 0 11
39190: PUSH
39191: DOUBLE
39192: LD_INT 1
39194: DEC
39195: ST_TO_ADDR
39196: LD_VAR 0 5
39200: PUSH
39201: FOR_TO
39202: IFFALSE 39249
// begin hc_class := 21 ;
39204: LD_ADDR_OWVAR 28
39208: PUSH
39209: LD_INT 21
39211: ST_TO_ADDR
// hc_gallery :=  ;
39212: LD_ADDR_OWVAR 33
39216: PUSH
39217: LD_STRING 
39219: ST_TO_ADDR
// animal := CreateHuman ;
39220: LD_ADDR_VAR 0 12
39224: PUSH
39225: CALL_OW 44
39229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39230: LD_VAR 0 12
39234: PPUSH
39235: LD_VAR 0 8
39239: PPUSH
39240: LD_INT 0
39242: PPUSH
39243: CALL 41308 0 3
// end ;
39247: GO 39201
39249: POP
39250: POP
// if birds then
39251: LD_VAR 0 1
39255: IFFALSE 39322
// for i = 1 to birds do
39257: LD_ADDR_VAR 0 11
39261: PUSH
39262: DOUBLE
39263: LD_INT 1
39265: DEC
39266: ST_TO_ADDR
39267: LD_VAR 0 1
39271: PUSH
39272: FOR_TO
39273: IFFALSE 39320
// begin hc_class := 18 ;
39275: LD_ADDR_OWVAR 28
39279: PUSH
39280: LD_INT 18
39282: ST_TO_ADDR
// hc_gallery =  ;
39283: LD_ADDR_OWVAR 33
39287: PUSH
39288: LD_STRING 
39290: ST_TO_ADDR
// animal := CreateHuman ;
39291: LD_ADDR_VAR 0 12
39295: PUSH
39296: CALL_OW 44
39300: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39301: LD_VAR 0 12
39305: PPUSH
39306: LD_VAR 0 8
39310: PPUSH
39311: LD_INT 0
39313: PPUSH
39314: CALL 41308 0 3
// end ;
39318: GO 39272
39320: POP
39321: POP
// if tigers then
39322: LD_VAR 0 2
39326: IFFALSE 39410
// for i = 1 to tigers do
39328: LD_ADDR_VAR 0 11
39332: PUSH
39333: DOUBLE
39334: LD_INT 1
39336: DEC
39337: ST_TO_ADDR
39338: LD_VAR 0 2
39342: PUSH
39343: FOR_TO
39344: IFFALSE 39408
// begin hc_class = class_tiger ;
39346: LD_ADDR_OWVAR 28
39350: PUSH
39351: LD_INT 14
39353: ST_TO_ADDR
// hc_gallery =  ;
39354: LD_ADDR_OWVAR 33
39358: PUSH
39359: LD_STRING 
39361: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39362: LD_ADDR_OWVAR 35
39366: PUSH
39367: LD_INT 7
39369: NEG
39370: PPUSH
39371: LD_INT 7
39373: PPUSH
39374: CALL_OW 12
39378: ST_TO_ADDR
// animal := CreateHuman ;
39379: LD_ADDR_VAR 0 12
39383: PUSH
39384: CALL_OW 44
39388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39389: LD_VAR 0 12
39393: PPUSH
39394: LD_VAR 0 8
39398: PPUSH
39399: LD_INT 0
39401: PPUSH
39402: CALL 41308 0 3
// end ;
39406: GO 39343
39408: POP
39409: POP
// if apemans then
39410: LD_VAR 0 3
39414: IFFALSE 39537
// for i = 1 to apemans do
39416: LD_ADDR_VAR 0 11
39420: PUSH
39421: DOUBLE
39422: LD_INT 1
39424: DEC
39425: ST_TO_ADDR
39426: LD_VAR 0 3
39430: PUSH
39431: FOR_TO
39432: IFFALSE 39535
// begin hc_class = class_apeman ;
39434: LD_ADDR_OWVAR 28
39438: PUSH
39439: LD_INT 12
39441: ST_TO_ADDR
// hc_gallery =  ;
39442: LD_ADDR_OWVAR 33
39446: PUSH
39447: LD_STRING 
39449: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39450: LD_ADDR_OWVAR 35
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PPUSH
39459: LD_INT 2
39461: PPUSH
39462: CALL_OW 12
39466: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39467: LD_ADDR_OWVAR 31
39471: PUSH
39472: LD_INT 1
39474: PPUSH
39475: LD_INT 3
39477: PPUSH
39478: CALL_OW 12
39482: PUSH
39483: LD_INT 1
39485: PPUSH
39486: LD_INT 3
39488: PPUSH
39489: CALL_OW 12
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: ST_TO_ADDR
// animal := CreateHuman ;
39506: LD_ADDR_VAR 0 12
39510: PUSH
39511: CALL_OW 44
39515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39516: LD_VAR 0 12
39520: PPUSH
39521: LD_VAR 0 8
39525: PPUSH
39526: LD_INT 0
39528: PPUSH
39529: CALL 41308 0 3
// end ;
39533: GO 39431
39535: POP
39536: POP
// if enchidnas then
39537: LD_VAR 0 4
39541: IFFALSE 39608
// for i = 1 to enchidnas do
39543: LD_ADDR_VAR 0 11
39547: PUSH
39548: DOUBLE
39549: LD_INT 1
39551: DEC
39552: ST_TO_ADDR
39553: LD_VAR 0 4
39557: PUSH
39558: FOR_TO
39559: IFFALSE 39606
// begin hc_class = 13 ;
39561: LD_ADDR_OWVAR 28
39565: PUSH
39566: LD_INT 13
39568: ST_TO_ADDR
// hc_gallery =  ;
39569: LD_ADDR_OWVAR 33
39573: PUSH
39574: LD_STRING 
39576: ST_TO_ADDR
// animal := CreateHuman ;
39577: LD_ADDR_VAR 0 12
39581: PUSH
39582: CALL_OW 44
39586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39587: LD_VAR 0 12
39591: PPUSH
39592: LD_VAR 0 8
39596: PPUSH
39597: LD_INT 0
39599: PPUSH
39600: CALL 41308 0 3
// end ;
39604: GO 39558
39606: POP
39607: POP
// if fishes then
39608: LD_VAR 0 7
39612: IFFALSE 39679
// for i = 1 to fishes do
39614: LD_ADDR_VAR 0 11
39618: PUSH
39619: DOUBLE
39620: LD_INT 1
39622: DEC
39623: ST_TO_ADDR
39624: LD_VAR 0 7
39628: PUSH
39629: FOR_TO
39630: IFFALSE 39677
// begin hc_class = 20 ;
39632: LD_ADDR_OWVAR 28
39636: PUSH
39637: LD_INT 20
39639: ST_TO_ADDR
// hc_gallery =  ;
39640: LD_ADDR_OWVAR 33
39644: PUSH
39645: LD_STRING 
39647: ST_TO_ADDR
// animal := CreateHuman ;
39648: LD_ADDR_VAR 0 12
39652: PUSH
39653: CALL_OW 44
39657: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39658: LD_VAR 0 12
39662: PPUSH
39663: LD_VAR 0 9
39667: PPUSH
39668: LD_INT 0
39670: PPUSH
39671: CALL 41308 0 3
// end ;
39675: GO 39629
39677: POP
39678: POP
// end ;
39679: LD_VAR 0 10
39683: RET
// export function WantHeal ( sci , unit ) ; begin
39684: LD_INT 0
39686: PPUSH
// if GetTaskList ( sci ) > 0 then
39687: LD_VAR 0 1
39691: PPUSH
39692: CALL_OW 437
39696: PUSH
39697: LD_INT 0
39699: GREATER
39700: IFFALSE 39770
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 437
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: PUSH
39716: LD_INT 1
39718: ARRAY
39719: PUSH
39720: LD_STRING l
39722: EQUAL
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 437
39733: PUSH
39734: LD_INT 1
39736: ARRAY
39737: PUSH
39738: LD_INT 4
39740: ARRAY
39741: PUSH
39742: LD_VAR 0 2
39746: EQUAL
39747: AND
39748: IFFALSE 39760
// result := true else
39750: LD_ADDR_VAR 0 3
39754: PUSH
39755: LD_INT 1
39757: ST_TO_ADDR
39758: GO 39768
// result := false ;
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_INT 0
39767: ST_TO_ADDR
// end else
39768: GO 39778
// result := false ;
39770: LD_ADDR_VAR 0 3
39774: PUSH
39775: LD_INT 0
39777: ST_TO_ADDR
// end ;
39778: LD_VAR 0 3
39782: RET
// export function HealTarget ( sci ) ; begin
39783: LD_INT 0
39785: PPUSH
// if not sci then
39786: LD_VAR 0 1
39790: NOT
39791: IFFALSE 39795
// exit ;
39793: GO 39860
// result := 0 ;
39795: LD_ADDR_VAR 0 2
39799: PUSH
39800: LD_INT 0
39802: ST_TO_ADDR
// if GetTaskList ( sci ) then
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 437
39812: IFFALSE 39860
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39814: LD_VAR 0 1
39818: PPUSH
39819: CALL_OW 437
39823: PUSH
39824: LD_INT 1
39826: ARRAY
39827: PUSH
39828: LD_INT 1
39830: ARRAY
39831: PUSH
39832: LD_STRING l
39834: EQUAL
39835: IFFALSE 39860
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39837: LD_ADDR_VAR 0 2
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 437
39851: PUSH
39852: LD_INT 1
39854: ARRAY
39855: PUSH
39856: LD_INT 4
39858: ARRAY
39859: ST_TO_ADDR
// end ;
39860: LD_VAR 0 2
39864: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39865: LD_INT 0
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
// if not base_units then
39871: LD_VAR 0 1
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 39967
// result := false ;
39880: LD_ADDR_VAR 0 2
39884: PUSH
39885: LD_INT 0
39887: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39888: LD_ADDR_VAR 0 5
39892: PUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: LD_INT 21
39900: PUSH
39901: LD_INT 3
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PPUSH
39908: CALL_OW 72
39912: ST_TO_ADDR
// if not tmp then
39913: LD_VAR 0 5
39917: NOT
39918: IFFALSE 39922
// exit ;
39920: GO 39967
// for i in tmp do
39922: LD_ADDR_VAR 0 3
39926: PUSH
39927: LD_VAR 0 5
39931: PUSH
39932: FOR_IN
39933: IFFALSE 39965
// begin result := EnemyInRange ( i , 22 ) ;
39935: LD_ADDR_VAR 0 2
39939: PUSH
39940: LD_VAR 0 3
39944: PPUSH
39945: LD_INT 22
39947: PPUSH
39948: CALL 37554 0 2
39952: ST_TO_ADDR
// if result then
39953: LD_VAR 0 2
39957: IFFALSE 39963
// exit ;
39959: POP
39960: POP
39961: GO 39967
// end ;
39963: GO 39932
39965: POP
39966: POP
// end ;
39967: LD_VAR 0 2
39971: RET
// export function FilterByTag ( units , tag ) ; begin
39972: LD_INT 0
39974: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39975: LD_ADDR_VAR 0 3
39979: PUSH
39980: LD_VAR 0 1
39984: PPUSH
39985: LD_INT 120
39987: PUSH
39988: LD_VAR 0 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PPUSH
39997: CALL_OW 72
40001: ST_TO_ADDR
// end ;
40002: LD_VAR 0 3
40006: RET
// export function IsDriver ( un ) ; begin
40007: LD_INT 0
40009: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40010: LD_ADDR_VAR 0 2
40014: PUSH
40015: LD_VAR 0 1
40019: PUSH
40020: LD_INT 55
40022: PUSH
40023: EMPTY
40024: LIST
40025: PPUSH
40026: CALL_OW 69
40030: IN
40031: ST_TO_ADDR
// end ;
40032: LD_VAR 0 2
40036: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40037: LD_INT 0
40039: PPUSH
40040: PPUSH
// list := [ ] ;
40041: LD_ADDR_VAR 0 5
40045: PUSH
40046: EMPTY
40047: ST_TO_ADDR
// case d of 0 :
40048: LD_VAR 0 3
40052: PUSH
40053: LD_INT 0
40055: DOUBLE
40056: EQUAL
40057: IFTRUE 40061
40059: GO 40194
40061: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40062: LD_ADDR_VAR 0 5
40066: PUSH
40067: LD_VAR 0 1
40071: PUSH
40072: LD_INT 4
40074: MINUS
40075: PUSH
40076: LD_VAR 0 2
40080: PUSH
40081: LD_INT 4
40083: MINUS
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: PUSH
40093: LD_VAR 0 1
40097: PUSH
40098: LD_INT 3
40100: MINUS
40101: PUSH
40102: LD_VAR 0 2
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: PUSH
40115: LD_VAR 0 1
40119: PUSH
40120: LD_INT 4
40122: PLUS
40123: PUSH
40124: LD_VAR 0 2
40128: PUSH
40129: LD_INT 4
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: PUSH
40137: LD_VAR 0 1
40141: PUSH
40142: LD_INT 3
40144: PLUS
40145: PUSH
40146: LD_VAR 0 2
40150: PUSH
40151: LD_INT 3
40153: PLUS
40154: PUSH
40155: LD_INT 5
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: PUSH
40163: LD_VAR 0 1
40167: PUSH
40168: LD_VAR 0 2
40172: PUSH
40173: LD_INT 4
40175: PLUS
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: ST_TO_ADDR
// end ; 1 :
40192: GO 40892
40194: LD_INT 1
40196: DOUBLE
40197: EQUAL
40198: IFTRUE 40202
40200: GO 40335
40202: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40203: LD_ADDR_VAR 0 5
40207: PUSH
40208: LD_VAR 0 1
40212: PUSH
40213: LD_VAR 0 2
40217: PUSH
40218: LD_INT 4
40220: MINUS
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: PUSH
40230: LD_VAR 0 1
40234: PUSH
40235: LD_INT 3
40237: MINUS
40238: PUSH
40239: LD_VAR 0 2
40243: PUSH
40244: LD_INT 3
40246: MINUS
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: PUSH
40256: LD_VAR 0 1
40260: PUSH
40261: LD_INT 4
40263: MINUS
40264: PUSH
40265: LD_VAR 0 2
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: PUSH
40278: LD_VAR 0 1
40282: PUSH
40283: LD_VAR 0 2
40287: PUSH
40288: LD_INT 3
40290: PLUS
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: PUSH
40300: LD_VAR 0 1
40304: PUSH
40305: LD_INT 4
40307: PLUS
40308: PUSH
40309: LD_VAR 0 2
40313: PUSH
40314: LD_INT 4
40316: PLUS
40317: PUSH
40318: LD_INT 5
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// end ; 2 :
40333: GO 40892
40335: LD_INT 2
40337: DOUBLE
40338: EQUAL
40339: IFTRUE 40343
40341: GO 40472
40343: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 1
40353: PUSH
40354: LD_VAR 0 2
40358: PUSH
40359: LD_INT 3
40361: MINUS
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: PUSH
40371: LD_VAR 0 1
40375: PUSH
40376: LD_INT 4
40378: PLUS
40379: PUSH
40380: LD_VAR 0 2
40384: PUSH
40385: LD_INT 4
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: PUSH
40393: LD_VAR 0 1
40397: PUSH
40398: LD_VAR 0 2
40402: PUSH
40403: LD_INT 4
40405: PLUS
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: PUSH
40415: LD_VAR 0 1
40419: PUSH
40420: LD_INT 3
40422: MINUS
40423: PUSH
40424: LD_VAR 0 2
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: PUSH
40437: LD_VAR 0 1
40441: PUSH
40442: LD_INT 4
40444: MINUS
40445: PUSH
40446: LD_VAR 0 2
40450: PUSH
40451: LD_INT 4
40453: MINUS
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
// end ; 3 :
40470: GO 40892
40472: LD_INT 3
40474: DOUBLE
40475: EQUAL
40476: IFTRUE 40480
40478: GO 40613
40480: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40481: LD_ADDR_VAR 0 5
40485: PUSH
40486: LD_VAR 0 1
40490: PUSH
40491: LD_INT 3
40493: PLUS
40494: PUSH
40495: LD_VAR 0 2
40499: PUSH
40500: LD_INT 4
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: PUSH
40508: LD_VAR 0 1
40512: PUSH
40513: LD_INT 4
40515: PLUS
40516: PUSH
40517: LD_VAR 0 2
40521: PUSH
40522: LD_INT 4
40524: PLUS
40525: PUSH
40526: LD_INT 5
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: PUSH
40534: LD_VAR 0 1
40538: PUSH
40539: LD_INT 4
40541: MINUS
40542: PUSH
40543: LD_VAR 0 2
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: PUSH
40556: LD_VAR 0 1
40560: PUSH
40561: LD_VAR 0 2
40565: PUSH
40566: LD_INT 4
40568: MINUS
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: PUSH
40578: LD_VAR 0 1
40582: PUSH
40583: LD_INT 3
40585: MINUS
40586: PUSH
40587: LD_VAR 0 2
40591: PUSH
40592: LD_INT 3
40594: MINUS
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: ST_TO_ADDR
// end ; 4 :
40611: GO 40892
40613: LD_INT 4
40615: DOUBLE
40616: EQUAL
40617: IFTRUE 40621
40619: GO 40754
40621: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40622: LD_ADDR_VAR 0 5
40626: PUSH
40627: LD_VAR 0 1
40631: PUSH
40632: LD_VAR 0 2
40636: PUSH
40637: LD_INT 4
40639: PLUS
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: PUSH
40649: LD_VAR 0 1
40653: PUSH
40654: LD_INT 3
40656: PLUS
40657: PUSH
40658: LD_VAR 0 2
40662: PUSH
40663: LD_INT 3
40665: PLUS
40666: PUSH
40667: LD_INT 5
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: PUSH
40675: LD_VAR 0 1
40679: PUSH
40680: LD_INT 4
40682: PLUS
40683: PUSH
40684: LD_VAR 0 2
40688: PUSH
40689: LD_INT 4
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: PUSH
40697: LD_VAR 0 1
40701: PUSH
40702: LD_VAR 0 2
40706: PUSH
40707: LD_INT 3
40709: MINUS
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: PUSH
40719: LD_VAR 0 1
40723: PUSH
40724: LD_INT 4
40726: MINUS
40727: PUSH
40728: LD_VAR 0 2
40732: PUSH
40733: LD_INT 4
40735: MINUS
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
// end ; 5 :
40752: GO 40892
40754: LD_INT 5
40756: DOUBLE
40757: EQUAL
40758: IFTRUE 40762
40760: GO 40891
40762: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40763: LD_ADDR_VAR 0 5
40767: PUSH
40768: LD_VAR 0 1
40772: PUSH
40773: LD_INT 4
40775: MINUS
40776: PUSH
40777: LD_VAR 0 2
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: PUSH
40790: LD_VAR 0 1
40794: PUSH
40795: LD_VAR 0 2
40799: PUSH
40800: LD_INT 4
40802: MINUS
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: PUSH
40812: LD_VAR 0 1
40816: PUSH
40817: LD_INT 4
40819: PLUS
40820: PUSH
40821: LD_VAR 0 2
40825: PUSH
40826: LD_INT 4
40828: PLUS
40829: PUSH
40830: LD_INT 5
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: LIST
40837: PUSH
40838: LD_VAR 0 1
40842: PUSH
40843: LD_INT 3
40845: PLUS
40846: PUSH
40847: LD_VAR 0 2
40851: PUSH
40852: LD_INT 4
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: PUSH
40860: LD_VAR 0 1
40864: PUSH
40865: LD_VAR 0 2
40869: PUSH
40870: LD_INT 3
40872: PLUS
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// end ; end ;
40889: GO 40892
40891: POP
// result := list ;
40892: LD_ADDR_VAR 0 4
40896: PUSH
40897: LD_VAR 0 5
40901: ST_TO_ADDR
// end ;
40902: LD_VAR 0 4
40906: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40907: LD_INT 0
40909: PPUSH
40910: PPUSH
40911: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40912: LD_VAR 0 1
40916: NOT
40917: PUSH
40918: LD_VAR 0 2
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: LD_INT 4
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: IN
40941: NOT
40942: OR
40943: IFFALSE 40947
// exit ;
40945: GO 41030
// tmp := [ ] ;
40947: LD_ADDR_VAR 0 5
40951: PUSH
40952: EMPTY
40953: ST_TO_ADDR
// for i in units do
40954: LD_ADDR_VAR 0 4
40958: PUSH
40959: LD_VAR 0 1
40963: PUSH
40964: FOR_IN
40965: IFFALSE 40999
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40967: LD_ADDR_VAR 0 5
40971: PUSH
40972: LD_VAR 0 5
40976: PPUSH
40977: LD_VAR 0 4
40981: PPUSH
40982: LD_VAR 0 2
40986: PPUSH
40987: CALL_OW 259
40991: PPUSH
40992: CALL 42390 0 2
40996: ST_TO_ADDR
40997: GO 40964
40999: POP
41000: POP
// if not tmp then
41001: LD_VAR 0 5
41005: NOT
41006: IFFALSE 41010
// exit ;
41008: GO 41030
// result := SortListByListDesc ( units , tmp ) ;
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: LD_VAR 0 5
41024: PPUSH
41025: CALL_OW 77
41029: ST_TO_ADDR
// end ;
41030: LD_VAR 0 3
41034: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41035: LD_INT 0
41037: PPUSH
41038: PPUSH
41039: PPUSH
// result := false ;
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_INT 0
41047: ST_TO_ADDR
// if not building then
41048: LD_VAR 0 2
41052: NOT
41053: IFFALSE 41057
// exit ;
41055: GO 41195
// x := GetX ( building ) ;
41057: LD_ADDR_VAR 0 4
41061: PUSH
41062: LD_VAR 0 2
41066: PPUSH
41067: CALL_OW 250
41071: ST_TO_ADDR
// y := GetY ( building ) ;
41072: LD_ADDR_VAR 0 5
41076: PUSH
41077: LD_VAR 0 2
41081: PPUSH
41082: CALL_OW 251
41086: ST_TO_ADDR
// if not x or not y then
41087: LD_VAR 0 4
41091: NOT
41092: PUSH
41093: LD_VAR 0 5
41097: NOT
41098: OR
41099: IFFALSE 41103
// exit ;
41101: GO 41195
// if GetTaskList ( unit ) then
41103: LD_VAR 0 1
41107: PPUSH
41108: CALL_OW 437
41112: IFFALSE 41195
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41114: LD_STRING e
41116: PUSH
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 437
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PUSH
41131: LD_INT 1
41133: ARRAY
41134: EQUAL
41135: PUSH
41136: LD_VAR 0 4
41140: PUSH
41141: LD_VAR 0 1
41145: PPUSH
41146: CALL_OW 437
41150: PUSH
41151: LD_INT 1
41153: ARRAY
41154: PUSH
41155: LD_INT 2
41157: ARRAY
41158: EQUAL
41159: AND
41160: PUSH
41161: LD_VAR 0 5
41165: PUSH
41166: LD_VAR 0 1
41170: PPUSH
41171: CALL_OW 437
41175: PUSH
41176: LD_INT 1
41178: ARRAY
41179: PUSH
41180: LD_INT 3
41182: ARRAY
41183: EQUAL
41184: AND
41185: IFFALSE 41195
// result := true end ;
41187: LD_ADDR_VAR 0 3
41191: PUSH
41192: LD_INT 1
41194: ST_TO_ADDR
// end ;
41195: LD_VAR 0 3
41199: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41200: LD_INT 0
41202: PPUSH
// result := false ;
41203: LD_ADDR_VAR 0 4
41207: PUSH
41208: LD_INT 0
41210: ST_TO_ADDR
// if GetTaskList ( unit ) then
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 437
41220: IFFALSE 41303
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41222: LD_STRING M
41224: PUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 437
41234: PUSH
41235: LD_INT 1
41237: ARRAY
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: EQUAL
41243: PUSH
41244: LD_VAR 0 2
41248: PUSH
41249: LD_VAR 0 1
41253: PPUSH
41254: CALL_OW 437
41258: PUSH
41259: LD_INT 1
41261: ARRAY
41262: PUSH
41263: LD_INT 2
41265: ARRAY
41266: EQUAL
41267: AND
41268: PUSH
41269: LD_VAR 0 3
41273: PUSH
41274: LD_VAR 0 1
41278: PPUSH
41279: CALL_OW 437
41283: PUSH
41284: LD_INT 1
41286: ARRAY
41287: PUSH
41288: LD_INT 3
41290: ARRAY
41291: EQUAL
41292: AND
41293: IFFALSE 41303
// result := true ;
41295: LD_ADDR_VAR 0 4
41299: PUSH
41300: LD_INT 1
41302: ST_TO_ADDR
// end ; end ;
41303: LD_VAR 0 4
41307: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41308: LD_INT 0
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
// if not unit or not area then
41314: LD_VAR 0 1
41318: NOT
41319: PUSH
41320: LD_VAR 0 2
41324: NOT
41325: OR
41326: IFFALSE 41330
// exit ;
41328: GO 41493
// tmp := AreaToList ( area , i ) ;
41330: LD_ADDR_VAR 0 6
41334: PUSH
41335: LD_VAR 0 2
41339: PPUSH
41340: LD_VAR 0 5
41344: PPUSH
41345: CALL_OW 517
41349: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41350: LD_ADDR_VAR 0 5
41354: PUSH
41355: DOUBLE
41356: LD_INT 1
41358: DEC
41359: ST_TO_ADDR
41360: LD_VAR 0 6
41364: PUSH
41365: LD_INT 1
41367: ARRAY
41368: PUSH
41369: FOR_TO
41370: IFFALSE 41491
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41372: LD_ADDR_VAR 0 7
41376: PUSH
41377: LD_VAR 0 6
41381: PUSH
41382: LD_INT 1
41384: ARRAY
41385: PUSH
41386: LD_VAR 0 5
41390: ARRAY
41391: PUSH
41392: LD_VAR 0 6
41396: PUSH
41397: LD_INT 2
41399: ARRAY
41400: PUSH
41401: LD_VAR 0 5
41405: ARRAY
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
41411: LD_INT 92
41413: PUSH
41414: LD_VAR 0 7
41418: PUSH
41419: LD_INT 1
41421: ARRAY
41422: PUSH
41423: LD_VAR 0 7
41427: PUSH
41428: LD_INT 2
41430: ARRAY
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: PPUSH
41441: CALL_OW 69
41445: PUSH
41446: LD_INT 0
41448: EQUAL
41449: IFFALSE 41489
// begin PlaceUnitArea ( unit , area , mode ) ;
41451: LD_VAR 0 1
41455: PPUSH
41456: LD_VAR 0 2
41460: PPUSH
41461: LD_VAR 0 3
41465: PPUSH
41466: CALL_OW 49
// result := IsPlaced ( unit ) ;
41470: LD_ADDR_VAR 0 4
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: CALL_OW 305
41484: ST_TO_ADDR
// exit ;
41485: POP
41486: POP
41487: GO 41493
// end ; end ;
41489: GO 41369
41491: POP
41492: POP
// end ;
41493: LD_VAR 0 4
41497: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41498: LD_INT 0
41500: PPUSH
41501: PPUSH
41502: PPUSH
// if not side or side > 8 then
41503: LD_VAR 0 1
41507: NOT
41508: PUSH
41509: LD_VAR 0 1
41513: PUSH
41514: LD_INT 8
41516: GREATER
41517: OR
41518: IFFALSE 41522
// exit ;
41520: GO 41709
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41522: LD_ADDR_VAR 0 4
41526: PUSH
41527: LD_INT 22
41529: PUSH
41530: LD_VAR 0 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 21
41541: PUSH
41542: LD_INT 3
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PPUSH
41553: CALL_OW 69
41557: ST_TO_ADDR
// if not tmp then
41558: LD_VAR 0 4
41562: NOT
41563: IFFALSE 41567
// exit ;
41565: GO 41709
// enable_addtolog := true ;
41567: LD_ADDR_OWVAR 81
41571: PUSH
41572: LD_INT 1
41574: ST_TO_ADDR
// AddToLog ( [ ) ;
41575: LD_STRING [
41577: PPUSH
41578: CALL_OW 561
// for i in tmp do
41582: LD_ADDR_VAR 0 3
41586: PUSH
41587: LD_VAR 0 4
41591: PUSH
41592: FOR_IN
41593: IFFALSE 41700
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41595: LD_STRING [
41597: PUSH
41598: LD_VAR 0 3
41602: PPUSH
41603: CALL_OW 266
41607: STR
41608: PUSH
41609: LD_STRING , 
41611: STR
41612: PUSH
41613: LD_VAR 0 3
41617: PPUSH
41618: CALL_OW 250
41622: STR
41623: PUSH
41624: LD_STRING , 
41626: STR
41627: PUSH
41628: LD_VAR 0 3
41632: PPUSH
41633: CALL_OW 251
41637: STR
41638: PUSH
41639: LD_STRING , 
41641: STR
41642: PUSH
41643: LD_VAR 0 3
41647: PPUSH
41648: CALL_OW 254
41652: STR
41653: PUSH
41654: LD_STRING , 
41656: STR
41657: PUSH
41658: LD_VAR 0 3
41662: PPUSH
41663: LD_INT 1
41665: PPUSH
41666: CALL_OW 268
41670: STR
41671: PUSH
41672: LD_STRING , 
41674: STR
41675: PUSH
41676: LD_VAR 0 3
41680: PPUSH
41681: LD_INT 2
41683: PPUSH
41684: CALL_OW 268
41688: STR
41689: PUSH
41690: LD_STRING ],
41692: STR
41693: PPUSH
41694: CALL_OW 561
// end ;
41698: GO 41592
41700: POP
41701: POP
// AddToLog ( ]; ) ;
41702: LD_STRING ];
41704: PPUSH
41705: CALL_OW 561
// end ;
41709: LD_VAR 0 2
41713: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41714: LD_INT 0
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
// if not area or not rate or not max then
41721: LD_VAR 0 1
41725: NOT
41726: PUSH
41727: LD_VAR 0 2
41731: NOT
41732: OR
41733: PUSH
41734: LD_VAR 0 4
41738: NOT
41739: OR
41740: IFFALSE 41744
// exit ;
41742: GO 41933
// while 1 do
41744: LD_INT 1
41746: IFFALSE 41933
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41748: LD_ADDR_VAR 0 9
41752: PUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: LD_INT 1
41760: PPUSH
41761: CALL_OW 287
41765: PUSH
41766: LD_INT 10
41768: MUL
41769: ST_TO_ADDR
// r := rate / 10 ;
41770: LD_ADDR_VAR 0 7
41774: PUSH
41775: LD_VAR 0 2
41779: PUSH
41780: LD_INT 10
41782: DIVREAL
41783: ST_TO_ADDR
// time := 1 1$00 ;
41784: LD_ADDR_VAR 0 8
41788: PUSH
41789: LD_INT 2100
41791: ST_TO_ADDR
// if amount < min then
41792: LD_VAR 0 9
41796: PUSH
41797: LD_VAR 0 3
41801: LESS
41802: IFFALSE 41820
// r := r * 2 else
41804: LD_ADDR_VAR 0 7
41808: PUSH
41809: LD_VAR 0 7
41813: PUSH
41814: LD_INT 2
41816: MUL
41817: ST_TO_ADDR
41818: GO 41846
// if amount > max then
41820: LD_VAR 0 9
41824: PUSH
41825: LD_VAR 0 4
41829: GREATER
41830: IFFALSE 41846
// r := r / 2 ;
41832: LD_ADDR_VAR 0 7
41836: PUSH
41837: LD_VAR 0 7
41841: PUSH
41842: LD_INT 2
41844: DIVREAL
41845: ST_TO_ADDR
// time := time / r ;
41846: LD_ADDR_VAR 0 8
41850: PUSH
41851: LD_VAR 0 8
41855: PUSH
41856: LD_VAR 0 7
41860: DIVREAL
41861: ST_TO_ADDR
// if time < 0 then
41862: LD_VAR 0 8
41866: PUSH
41867: LD_INT 0
41869: LESS
41870: IFFALSE 41887
// time := time * - 1 ;
41872: LD_ADDR_VAR 0 8
41876: PUSH
41877: LD_VAR 0 8
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: MUL
41886: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41887: LD_VAR 0 8
41891: PUSH
41892: LD_INT 35
41894: PPUSH
41895: LD_INT 875
41897: PPUSH
41898: CALL_OW 12
41902: PLUS
41903: PPUSH
41904: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41908: LD_INT 1
41910: PPUSH
41911: LD_INT 5
41913: PPUSH
41914: CALL_OW 12
41918: PPUSH
41919: LD_VAR 0 1
41923: PPUSH
41924: LD_INT 1
41926: PPUSH
41927: CALL_OW 55
// end ;
41931: GO 41744
// end ;
41933: LD_VAR 0 5
41937: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
// if not turrets or not factories then
41948: LD_VAR 0 1
41952: NOT
41953: PUSH
41954: LD_VAR 0 2
41958: NOT
41959: OR
41960: IFFALSE 41964
// exit ;
41962: GO 42271
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41964: LD_ADDR_VAR 0 10
41968: PUSH
41969: LD_INT 5
41971: PUSH
41972: LD_INT 6
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: LD_INT 4
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 5
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 24
42006: PUSH
42007: LD_INT 25
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 23
42016: PUSH
42017: LD_INT 27
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 42
42030: PUSH
42031: LD_INT 43
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 44
42040: PUSH
42041: LD_INT 46
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 45
42050: PUSH
42051: LD_INT 47
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// result := [ ] ;
42068: LD_ADDR_VAR 0 3
42072: PUSH
42073: EMPTY
42074: ST_TO_ADDR
// for i in turrets do
42075: LD_ADDR_VAR 0 4
42079: PUSH
42080: LD_VAR 0 1
42084: PUSH
42085: FOR_IN
42086: IFFALSE 42269
// begin nat := GetNation ( i ) ;
42088: LD_ADDR_VAR 0 7
42092: PUSH
42093: LD_VAR 0 4
42097: PPUSH
42098: CALL_OW 248
42102: ST_TO_ADDR
// weapon := 0 ;
42103: LD_ADDR_VAR 0 8
42107: PUSH
42108: LD_INT 0
42110: ST_TO_ADDR
// if not nat then
42111: LD_VAR 0 7
42115: NOT
42116: IFFALSE 42120
// continue ;
42118: GO 42085
// for j in list [ nat ] do
42120: LD_ADDR_VAR 0 5
42124: PUSH
42125: LD_VAR 0 10
42129: PUSH
42130: LD_VAR 0 7
42134: ARRAY
42135: PUSH
42136: FOR_IN
42137: IFFALSE 42178
// if GetBWeapon ( i ) = j [ 1 ] then
42139: LD_VAR 0 4
42143: PPUSH
42144: CALL_OW 269
42148: PUSH
42149: LD_VAR 0 5
42153: PUSH
42154: LD_INT 1
42156: ARRAY
42157: EQUAL
42158: IFFALSE 42176
// begin weapon := j [ 2 ] ;
42160: LD_ADDR_VAR 0 8
42164: PUSH
42165: LD_VAR 0 5
42169: PUSH
42170: LD_INT 2
42172: ARRAY
42173: ST_TO_ADDR
// break ;
42174: GO 42178
// end ;
42176: GO 42136
42178: POP
42179: POP
// if not weapon then
42180: LD_VAR 0 8
42184: NOT
42185: IFFALSE 42189
// continue ;
42187: GO 42085
// for k in factories do
42189: LD_ADDR_VAR 0 6
42193: PUSH
42194: LD_VAR 0 2
42198: PUSH
42199: FOR_IN
42200: IFFALSE 42265
// begin weapons := AvailableWeaponList ( k ) ;
42202: LD_ADDR_VAR 0 9
42206: PUSH
42207: LD_VAR 0 6
42211: PPUSH
42212: CALL_OW 478
42216: ST_TO_ADDR
// if not weapons then
42217: LD_VAR 0 9
42221: NOT
42222: IFFALSE 42226
// continue ;
42224: GO 42199
// if weapon in weapons then
42226: LD_VAR 0 8
42230: PUSH
42231: LD_VAR 0 9
42235: IN
42236: IFFALSE 42263
// begin result := [ i , weapon ] ;
42238: LD_ADDR_VAR 0 3
42242: PUSH
42243: LD_VAR 0 4
42247: PUSH
42248: LD_VAR 0 8
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// exit ;
42257: POP
42258: POP
42259: POP
42260: POP
42261: GO 42271
// end ; end ;
42263: GO 42199
42265: POP
42266: POP
// end ;
42267: GO 42085
42269: POP
42270: POP
// end ;
42271: LD_VAR 0 3
42275: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42276: LD_INT 0
42278: PPUSH
// if not side or side > 8 then
42279: LD_VAR 0 3
42283: NOT
42284: PUSH
42285: LD_VAR 0 3
42289: PUSH
42290: LD_INT 8
42292: GREATER
42293: OR
42294: IFFALSE 42298
// exit ;
42296: GO 42357
// if not range then
42298: LD_VAR 0 4
42302: NOT
42303: IFFALSE 42314
// range := - 12 ;
42305: LD_ADDR_VAR 0 4
42309: PUSH
42310: LD_INT 12
42312: NEG
42313: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42314: LD_VAR 0 1
42318: PPUSH
42319: LD_VAR 0 2
42323: PPUSH
42324: LD_VAR 0 3
42328: PPUSH
42329: LD_VAR 0 4
42333: PPUSH
42334: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42338: LD_VAR 0 1
42342: PPUSH
42343: LD_VAR 0 2
42347: PPUSH
42348: LD_VAR 0 3
42352: PPUSH
42353: CALL_OW 331
// end ;
42357: LD_VAR 0 5
42361: RET
// export function Video ( mode ) ; begin
42362: LD_INT 0
42364: PPUSH
// ingame_video = mode ;
42365: LD_ADDR_OWVAR 52
42369: PUSH
42370: LD_VAR 0 1
42374: ST_TO_ADDR
// interface_hidden = mode ;
42375: LD_ADDR_OWVAR 54
42379: PUSH
42380: LD_VAR 0 1
42384: ST_TO_ADDR
// end ;
42385: LD_VAR 0 2
42389: RET
// export function Join ( array , element ) ; begin
42390: LD_INT 0
42392: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42393: LD_ADDR_VAR 0 3
42397: PUSH
42398: LD_VAR 0 1
42402: PPUSH
42403: LD_VAR 0 1
42407: PUSH
42408: LD_INT 1
42410: PLUS
42411: PPUSH
42412: LD_VAR 0 2
42416: PPUSH
42417: CALL_OW 1
42421: ST_TO_ADDR
// end ;
42422: LD_VAR 0 3
42426: RET
// export function JoinUnion ( array , element ) ; begin
42427: LD_INT 0
42429: PPUSH
// result := array union element ;
42430: LD_ADDR_VAR 0 3
42434: PUSH
42435: LD_VAR 0 1
42439: PUSH
42440: LD_VAR 0 2
42444: UNION
42445: ST_TO_ADDR
// end ;
42446: LD_VAR 0 3
42450: RET
// export function GetBehemoths ( side ) ; begin
42451: LD_INT 0
42453: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42454: LD_ADDR_VAR 0 2
42458: PUSH
42459: LD_INT 22
42461: PUSH
42462: LD_VAR 0 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 31
42473: PUSH
42474: LD_INT 25
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PPUSH
42485: CALL_OW 69
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 2
42494: RET
// export function Shuffle ( array ) ; var i , index ; begin
42495: LD_INT 0
42497: PPUSH
42498: PPUSH
42499: PPUSH
// result := [ ] ;
42500: LD_ADDR_VAR 0 2
42504: PUSH
42505: EMPTY
42506: ST_TO_ADDR
// if not array then
42507: LD_VAR 0 1
42511: NOT
42512: IFFALSE 42516
// exit ;
42514: GO 42615
// Randomize ;
42516: CALL_OW 10
// for i = array downto 1 do
42520: LD_ADDR_VAR 0 3
42524: PUSH
42525: DOUBLE
42526: LD_VAR 0 1
42530: INC
42531: ST_TO_ADDR
42532: LD_INT 1
42534: PUSH
42535: FOR_DOWNTO
42536: IFFALSE 42613
// begin index := rand ( 1 , array ) ;
42538: LD_ADDR_VAR 0 4
42542: PUSH
42543: LD_INT 1
42545: PPUSH
42546: LD_VAR 0 1
42550: PPUSH
42551: CALL_OW 12
42555: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42556: LD_ADDR_VAR 0 2
42560: PUSH
42561: LD_VAR 0 2
42565: PPUSH
42566: LD_VAR 0 2
42570: PUSH
42571: LD_INT 1
42573: PLUS
42574: PPUSH
42575: LD_VAR 0 1
42579: PUSH
42580: LD_VAR 0 4
42584: ARRAY
42585: PPUSH
42586: CALL_OW 2
42590: ST_TO_ADDR
// array := Delete ( array , index ) ;
42591: LD_ADDR_VAR 0 1
42595: PUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: LD_VAR 0 4
42605: PPUSH
42606: CALL_OW 3
42610: ST_TO_ADDR
// end ;
42611: GO 42535
42613: POP
42614: POP
// end ;
42615: LD_VAR 0 2
42619: RET
// export function GetBaseMaterials ( base ) ; begin
42620: LD_INT 0
42622: PPUSH
// result := [ 0 , 0 , 0 ] ;
42623: LD_ADDR_VAR 0 2
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: ST_TO_ADDR
// if not base then
42642: LD_VAR 0 1
42646: NOT
42647: IFFALSE 42651
// exit ;
42649: GO 42700
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42651: LD_ADDR_VAR 0 2
42655: PUSH
42656: LD_VAR 0 1
42660: PPUSH
42661: LD_INT 1
42663: PPUSH
42664: CALL_OW 275
42668: PUSH
42669: LD_VAR 0 1
42673: PPUSH
42674: LD_INT 2
42676: PPUSH
42677: CALL_OW 275
42681: PUSH
42682: LD_VAR 0 1
42686: PPUSH
42687: LD_INT 3
42689: PPUSH
42690: CALL_OW 275
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// end ;
42700: LD_VAR 0 2
42704: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42705: LD_INT 0
42707: PPUSH
42708: PPUSH
// result := array ;
42709: LD_ADDR_VAR 0 3
42713: PUSH
42714: LD_VAR 0 1
42718: ST_TO_ADDR
// if size >= result then
42719: LD_VAR 0 2
42723: PUSH
42724: LD_VAR 0 3
42728: GREATEREQUAL
42729: IFFALSE 42733
// exit ;
42731: GO 42783
// if size then
42733: LD_VAR 0 2
42737: IFFALSE 42783
// for i := array downto size do
42739: LD_ADDR_VAR 0 4
42743: PUSH
42744: DOUBLE
42745: LD_VAR 0 1
42749: INC
42750: ST_TO_ADDR
42751: LD_VAR 0 2
42755: PUSH
42756: FOR_DOWNTO
42757: IFFALSE 42781
// result := Delete ( result , result ) ;
42759: LD_ADDR_VAR 0 3
42763: PUSH
42764: LD_VAR 0 3
42768: PPUSH
42769: LD_VAR 0 3
42773: PPUSH
42774: CALL_OW 3
42778: ST_TO_ADDR
42779: GO 42756
42781: POP
42782: POP
// end ;
42783: LD_VAR 0 3
42787: RET
// export function ComExit ( unit ) ; var tmp ; begin
42788: LD_INT 0
42790: PPUSH
42791: PPUSH
// if not IsInUnit ( unit ) then
42792: LD_VAR 0 1
42796: PPUSH
42797: CALL_OW 310
42801: NOT
42802: IFFALSE 42806
// exit ;
42804: GO 42866
// tmp := IsInUnit ( unit ) ;
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 310
42820: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42821: LD_VAR 0 3
42825: PPUSH
42826: CALL_OW 247
42830: PUSH
42831: LD_INT 2
42833: EQUAL
42834: IFFALSE 42847
// ComExitVehicle ( unit ) else
42836: LD_VAR 0 1
42840: PPUSH
42841: CALL_OW 121
42845: GO 42856
// ComExitBuilding ( unit ) ;
42847: LD_VAR 0 1
42851: PPUSH
42852: CALL_OW 122
// result := tmp ;
42856: LD_ADDR_VAR 0 2
42860: PUSH
42861: LD_VAR 0 3
42865: ST_TO_ADDR
// end ;
42866: LD_VAR 0 2
42870: RET
// export function ComExitAll ( units ) ; var i ; begin
42871: LD_INT 0
42873: PPUSH
42874: PPUSH
// if not units then
42875: LD_VAR 0 1
42879: NOT
42880: IFFALSE 42884
// exit ;
42882: GO 42910
// for i in units do
42884: LD_ADDR_VAR 0 3
42888: PUSH
42889: LD_VAR 0 1
42893: PUSH
42894: FOR_IN
42895: IFFALSE 42908
// ComExit ( i ) ;
42897: LD_VAR 0 3
42901: PPUSH
42902: CALL 42788 0 1
42906: GO 42894
42908: POP
42909: POP
// end ;
42910: LD_VAR 0 2
42914: RET
// export function ResetHc ; begin
42915: LD_INT 0
42917: PPUSH
// InitHc ;
42918: CALL_OW 19
// hc_importance := 0 ;
42922: LD_ADDR_OWVAR 32
42926: PUSH
42927: LD_INT 0
42929: ST_TO_ADDR
// end ;
42930: LD_VAR 0 1
42934: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42935: LD_INT 0
42937: PPUSH
42938: PPUSH
42939: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42940: LD_ADDR_VAR 0 6
42944: PUSH
42945: LD_VAR 0 1
42949: PUSH
42950: LD_VAR 0 3
42954: PLUS
42955: PUSH
42956: LD_INT 2
42958: DIV
42959: ST_TO_ADDR
// if _x < 0 then
42960: LD_VAR 0 6
42964: PUSH
42965: LD_INT 0
42967: LESS
42968: IFFALSE 42985
// _x := _x * - 1 ;
42970: LD_ADDR_VAR 0 6
42974: PUSH
42975: LD_VAR 0 6
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: MUL
42984: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42985: LD_ADDR_VAR 0 7
42989: PUSH
42990: LD_VAR 0 2
42994: PUSH
42995: LD_VAR 0 4
42999: PLUS
43000: PUSH
43001: LD_INT 2
43003: DIV
43004: ST_TO_ADDR
// if _y < 0 then
43005: LD_VAR 0 7
43009: PUSH
43010: LD_INT 0
43012: LESS
43013: IFFALSE 43030
// _y := _y * - 1 ;
43015: LD_ADDR_VAR 0 7
43019: PUSH
43020: LD_VAR 0 7
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: MUL
43029: ST_TO_ADDR
// result := [ _x , _y ] ;
43030: LD_ADDR_VAR 0 5
43034: PUSH
43035: LD_VAR 0 6
43039: PUSH
43040: LD_VAR 0 7
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: ST_TO_ADDR
// end ;
43049: LD_VAR 0 5
43053: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
// task := GetTaskList ( unit ) ;
43060: LD_ADDR_VAR 0 7
43064: PUSH
43065: LD_VAR 0 1
43069: PPUSH
43070: CALL_OW 437
43074: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43075: LD_VAR 0 7
43079: NOT
43080: PUSH
43081: LD_VAR 0 1
43085: PPUSH
43086: LD_VAR 0 2
43090: PPUSH
43091: CALL_OW 308
43095: NOT
43096: AND
43097: IFFALSE 43101
// exit ;
43099: GO 43219
// if IsInArea ( unit , area ) then
43101: LD_VAR 0 1
43105: PPUSH
43106: LD_VAR 0 2
43110: PPUSH
43111: CALL_OW 308
43115: IFFALSE 43133
// begin ComMoveToArea ( unit , goAway ) ;
43117: LD_VAR 0 1
43121: PPUSH
43122: LD_VAR 0 3
43126: PPUSH
43127: CALL_OW 113
// exit ;
43131: GO 43219
// end ; if task [ 1 ] [ 1 ] <> M then
43133: LD_VAR 0 7
43137: PUSH
43138: LD_INT 1
43140: ARRAY
43141: PUSH
43142: LD_INT 1
43144: ARRAY
43145: PUSH
43146: LD_STRING M
43148: NONEQUAL
43149: IFFALSE 43153
// exit ;
43151: GO 43219
// x := task [ 1 ] [ 2 ] ;
43153: LD_ADDR_VAR 0 5
43157: PUSH
43158: LD_VAR 0 7
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PUSH
43167: LD_INT 2
43169: ARRAY
43170: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43171: LD_ADDR_VAR 0 6
43175: PUSH
43176: LD_VAR 0 7
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PUSH
43185: LD_INT 3
43187: ARRAY
43188: ST_TO_ADDR
// if InArea ( x , y , area ) then
43189: LD_VAR 0 5
43193: PPUSH
43194: LD_VAR 0 6
43198: PPUSH
43199: LD_VAR 0 2
43203: PPUSH
43204: CALL_OW 309
43208: IFFALSE 43219
// ComStop ( unit ) ;
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 141
// end ;
43219: LD_VAR 0 4
43223: RET
// export function Abs ( value ) ; begin
43224: LD_INT 0
43226: PPUSH
// result := value ;
43227: LD_ADDR_VAR 0 2
43231: PUSH
43232: LD_VAR 0 1
43236: ST_TO_ADDR
// if value < 0 then
43237: LD_VAR 0 1
43241: PUSH
43242: LD_INT 0
43244: LESS
43245: IFFALSE 43262
// result := value * - 1 ;
43247: LD_ADDR_VAR 0 2
43251: PUSH
43252: LD_VAR 0 1
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: MUL
43261: ST_TO_ADDR
// end ;
43262: LD_VAR 0 2
43266: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43267: LD_INT 0
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
// if not unit or not building then
43277: LD_VAR 0 1
43281: NOT
43282: PUSH
43283: LD_VAR 0 2
43287: NOT
43288: OR
43289: IFFALSE 43293
// exit ;
43291: GO 43519
// x := GetX ( building ) ;
43293: LD_ADDR_VAR 0 4
43297: PUSH
43298: LD_VAR 0 2
43302: PPUSH
43303: CALL_OW 250
43307: ST_TO_ADDR
// y := GetY ( building ) ;
43308: LD_ADDR_VAR 0 6
43312: PUSH
43313: LD_VAR 0 2
43317: PPUSH
43318: CALL_OW 251
43322: ST_TO_ADDR
// d := GetDir ( building ) ;
43323: LD_ADDR_VAR 0 8
43327: PUSH
43328: LD_VAR 0 2
43332: PPUSH
43333: CALL_OW 254
43337: ST_TO_ADDR
// r := 4 ;
43338: LD_ADDR_VAR 0 9
43342: PUSH
43343: LD_INT 4
43345: ST_TO_ADDR
// for i := 1 to 5 do
43346: LD_ADDR_VAR 0 10
43350: PUSH
43351: DOUBLE
43352: LD_INT 1
43354: DEC
43355: ST_TO_ADDR
43356: LD_INT 5
43358: PUSH
43359: FOR_TO
43360: IFFALSE 43517
// begin _x := ShiftX ( x , d , r + i ) ;
43362: LD_ADDR_VAR 0 5
43366: PUSH
43367: LD_VAR 0 4
43371: PPUSH
43372: LD_VAR 0 8
43376: PPUSH
43377: LD_VAR 0 9
43381: PUSH
43382: LD_VAR 0 10
43386: PLUS
43387: PPUSH
43388: CALL_OW 272
43392: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43393: LD_ADDR_VAR 0 7
43397: PUSH
43398: LD_VAR 0 6
43402: PPUSH
43403: LD_VAR 0 8
43407: PPUSH
43408: LD_VAR 0 9
43412: PUSH
43413: LD_VAR 0 10
43417: PLUS
43418: PPUSH
43419: CALL_OW 273
43423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43424: LD_VAR 0 5
43428: PPUSH
43429: LD_VAR 0 7
43433: PPUSH
43434: CALL_OW 488
43438: PUSH
43439: LD_VAR 0 5
43443: PPUSH
43444: LD_VAR 0 7
43448: PPUSH
43449: CALL_OW 428
43453: PPUSH
43454: CALL_OW 247
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: IN
43469: NOT
43470: AND
43471: IFFALSE 43515
// begin ComMoveXY ( unit , _x , _y ) ;
43473: LD_VAR 0 1
43477: PPUSH
43478: LD_VAR 0 5
43482: PPUSH
43483: LD_VAR 0 7
43487: PPUSH
43488: CALL_OW 111
// result := [ _x , _y ] ;
43492: LD_ADDR_VAR 0 3
43496: PUSH
43497: LD_VAR 0 5
43501: PUSH
43502: LD_VAR 0 7
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: ST_TO_ADDR
// exit ;
43511: POP
43512: POP
43513: GO 43519
// end ; end ;
43515: GO 43359
43517: POP
43518: POP
// end ;
43519: LD_VAR 0 3
43523: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43524: LD_INT 0
43526: PPUSH
43527: PPUSH
43528: PPUSH
// result := 0 ;
43529: LD_ADDR_VAR 0 3
43533: PUSH
43534: LD_INT 0
43536: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43537: LD_VAR 0 1
43541: PUSH
43542: LD_INT 0
43544: LESS
43545: PUSH
43546: LD_VAR 0 1
43550: PUSH
43551: LD_INT 8
43553: GREATER
43554: OR
43555: PUSH
43556: LD_VAR 0 2
43560: PUSH
43561: LD_INT 0
43563: LESS
43564: OR
43565: PUSH
43566: LD_VAR 0 2
43570: PUSH
43571: LD_INT 8
43573: GREATER
43574: OR
43575: IFFALSE 43579
// exit ;
43577: GO 43654
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43579: LD_ADDR_VAR 0 4
43583: PUSH
43584: LD_INT 22
43586: PUSH
43587: LD_VAR 0 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PPUSH
43596: CALL_OW 69
43600: PUSH
43601: FOR_IN
43602: IFFALSE 43652
// begin un := UnitShoot ( i ) ;
43604: LD_ADDR_VAR 0 5
43608: PUSH
43609: LD_VAR 0 4
43613: PPUSH
43614: CALL_OW 504
43618: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43619: LD_VAR 0 5
43623: PPUSH
43624: CALL_OW 255
43628: PUSH
43629: LD_VAR 0 1
43633: EQUAL
43634: IFFALSE 43650
// begin result := un ;
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_VAR 0 5
43645: ST_TO_ADDR
// exit ;
43646: POP
43647: POP
43648: GO 43654
// end ; end ;
43650: GO 43601
43652: POP
43653: POP
// end ;
43654: LD_VAR 0 3
43658: RET
// export function GetCargoBay ( units ) ; begin
43659: LD_INT 0
43661: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43662: LD_ADDR_VAR 0 2
43666: PUSH
43667: LD_VAR 0 1
43671: PPUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 34
43677: PUSH
43678: LD_INT 12
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 34
43687: PUSH
43688: LD_INT 51
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 34
43697: PUSH
43698: LD_INT 32
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 34
43707: PUSH
43708: LD_INT 89
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: PPUSH
43722: CALL_OW 72
43726: ST_TO_ADDR
// end ;
43727: LD_VAR 0 2
43731: RET
// export function Negate ( value ) ; begin
43732: LD_INT 0
43734: PPUSH
// result := not value ;
43735: LD_ADDR_VAR 0 2
43739: PUSH
43740: LD_VAR 0 1
43744: NOT
43745: ST_TO_ADDR
// end ;
43746: LD_VAR 0 2
43750: RET
// export function Inc ( value ) ; begin
43751: LD_INT 0
43753: PPUSH
// result := value + 1 ;
43754: LD_ADDR_VAR 0 2
43758: PUSH
43759: LD_VAR 0 1
43763: PUSH
43764: LD_INT 1
43766: PLUS
43767: ST_TO_ADDR
// end ;
43768: LD_VAR 0 2
43772: RET
// export function Dec ( value ) ; begin
43773: LD_INT 0
43775: PPUSH
// result := value - 1 ;
43776: LD_ADDR_VAR 0 2
43780: PUSH
43781: LD_VAR 0 1
43785: PUSH
43786: LD_INT 1
43788: MINUS
43789: ST_TO_ADDR
// end ;
43790: LD_VAR 0 2
43794: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43795: LD_INT 0
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43805: LD_VAR 0 1
43809: PPUSH
43810: LD_VAR 0 2
43814: PPUSH
43815: CALL_OW 488
43819: NOT
43820: PUSH
43821: LD_VAR 0 3
43825: PPUSH
43826: LD_VAR 0 4
43830: PPUSH
43831: CALL_OW 488
43835: NOT
43836: OR
43837: IFFALSE 43850
// begin result := - 1 ;
43839: LD_ADDR_VAR 0 5
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: ST_TO_ADDR
// exit ;
43848: GO 44085
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43850: LD_ADDR_VAR 0 12
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: LD_VAR 0 2
43864: PPUSH
43865: LD_VAR 0 3
43869: PPUSH
43870: LD_VAR 0 4
43874: PPUSH
43875: CALL 42935 0 4
43879: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43880: LD_ADDR_VAR 0 11
43884: PUSH
43885: LD_VAR 0 1
43889: PPUSH
43890: LD_VAR 0 2
43894: PPUSH
43895: LD_VAR 0 12
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PPUSH
43904: LD_VAR 0 12
43908: PUSH
43909: LD_INT 2
43911: ARRAY
43912: PPUSH
43913: CALL_OW 298
43917: ST_TO_ADDR
// distance := 9999 ;
43918: LD_ADDR_VAR 0 10
43922: PUSH
43923: LD_INT 9999
43925: ST_TO_ADDR
// for i := 0 to 5 do
43926: LD_ADDR_VAR 0 6
43930: PUSH
43931: DOUBLE
43932: LD_INT 0
43934: DEC
43935: ST_TO_ADDR
43936: LD_INT 5
43938: PUSH
43939: FOR_TO
43940: IFFALSE 44083
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43942: LD_ADDR_VAR 0 7
43946: PUSH
43947: LD_VAR 0 1
43951: PPUSH
43952: LD_VAR 0 6
43956: PPUSH
43957: LD_VAR 0 11
43961: PPUSH
43962: CALL_OW 272
43966: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43967: LD_ADDR_VAR 0 8
43971: PUSH
43972: LD_VAR 0 2
43976: PPUSH
43977: LD_VAR 0 6
43981: PPUSH
43982: LD_VAR 0 11
43986: PPUSH
43987: CALL_OW 273
43991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43992: LD_VAR 0 7
43996: PPUSH
43997: LD_VAR 0 8
44001: PPUSH
44002: CALL_OW 488
44006: NOT
44007: IFFALSE 44011
// continue ;
44009: GO 43939
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44011: LD_ADDR_VAR 0 9
44015: PUSH
44016: LD_VAR 0 12
44020: PUSH
44021: LD_INT 1
44023: ARRAY
44024: PPUSH
44025: LD_VAR 0 12
44029: PUSH
44030: LD_INT 2
44032: ARRAY
44033: PPUSH
44034: LD_VAR 0 7
44038: PPUSH
44039: LD_VAR 0 8
44043: PPUSH
44044: CALL_OW 298
44048: ST_TO_ADDR
// if tmp < distance then
44049: LD_VAR 0 9
44053: PUSH
44054: LD_VAR 0 10
44058: LESS
44059: IFFALSE 44081
// begin result := i ;
44061: LD_ADDR_VAR 0 5
44065: PUSH
44066: LD_VAR 0 6
44070: ST_TO_ADDR
// distance := tmp ;
44071: LD_ADDR_VAR 0 10
44075: PUSH
44076: LD_VAR 0 9
44080: ST_TO_ADDR
// end ; end ;
44081: GO 43939
44083: POP
44084: POP
// end ;
44085: LD_VAR 0 5
44089: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44090: LD_INT 0
44092: PPUSH
44093: PPUSH
// if not driver or not IsInUnit ( driver ) then
44094: LD_VAR 0 1
44098: NOT
44099: PUSH
44100: LD_VAR 0 1
44104: PPUSH
44105: CALL_OW 310
44109: NOT
44110: OR
44111: IFFALSE 44115
// exit ;
44113: GO 44205
// vehicle := IsInUnit ( driver ) ;
44115: LD_ADDR_VAR 0 3
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 310
44129: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44130: LD_VAR 0 1
44134: PPUSH
44135: LD_STRING \
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: PUSH
44165: LD_STRING E
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_VAR 0 3
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PPUSH
44201: CALL_OW 446
// end ;
44205: LD_VAR 0 2
44209: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44210: LD_INT 0
44212: PPUSH
44213: PPUSH
// if not driver or not IsInUnit ( driver ) then
44214: LD_VAR 0 1
44218: NOT
44219: PUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: CALL_OW 310
44229: NOT
44230: OR
44231: IFFALSE 44235
// exit ;
44233: GO 44325
// vehicle := IsInUnit ( driver ) ;
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 310
44249: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44250: LD_VAR 0 1
44254: PPUSH
44255: LD_STRING \
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: PUSH
44285: LD_STRING E
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_VAR 0 3
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PPUSH
44321: CALL_OW 447
// end ;
44325: LD_VAR 0 2
44329: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44330: LD_INT 0
44332: PPUSH
44333: PPUSH
44334: PPUSH
// tmp := [ ] ;
44335: LD_ADDR_VAR 0 5
44339: PUSH
44340: EMPTY
44341: ST_TO_ADDR
// for i in units do
44342: LD_ADDR_VAR 0 4
44346: PUSH
44347: LD_VAR 0 1
44351: PUSH
44352: FOR_IN
44353: IFFALSE 44391
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44355: LD_ADDR_VAR 0 5
44359: PUSH
44360: LD_VAR 0 5
44364: PPUSH
44365: LD_VAR 0 5
44369: PUSH
44370: LD_INT 1
44372: PLUS
44373: PPUSH
44374: LD_VAR 0 4
44378: PPUSH
44379: CALL_OW 256
44383: PPUSH
44384: CALL_OW 2
44388: ST_TO_ADDR
44389: GO 44352
44391: POP
44392: POP
// if not tmp then
44393: LD_VAR 0 5
44397: NOT
44398: IFFALSE 44402
// exit ;
44400: GO 44450
// if asc then
44402: LD_VAR 0 2
44406: IFFALSE 44430
// result := SortListByListAsc ( units , tmp ) else
44408: LD_ADDR_VAR 0 3
44412: PUSH
44413: LD_VAR 0 1
44417: PPUSH
44418: LD_VAR 0 5
44422: PPUSH
44423: CALL_OW 76
44427: ST_TO_ADDR
44428: GO 44450
// result := SortListByListDesc ( units , tmp ) ;
44430: LD_ADDR_VAR 0 3
44434: PUSH
44435: LD_VAR 0 1
44439: PPUSH
44440: LD_VAR 0 5
44444: PPUSH
44445: CALL_OW 77
44449: ST_TO_ADDR
// end ;
44450: LD_VAR 0 3
44454: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44455: LD_INT 0
44457: PPUSH
44458: PPUSH
// task := GetTaskList ( mech ) ;
44459: LD_ADDR_VAR 0 4
44463: PUSH
44464: LD_VAR 0 1
44468: PPUSH
44469: CALL_OW 437
44473: ST_TO_ADDR
// if not task then
44474: LD_VAR 0 4
44478: NOT
44479: IFFALSE 44483
// exit ;
44481: GO 44525
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44483: LD_ADDR_VAR 0 3
44487: PUSH
44488: LD_VAR 0 4
44492: PUSH
44493: LD_INT 1
44495: ARRAY
44496: PUSH
44497: LD_INT 1
44499: ARRAY
44500: PUSH
44501: LD_STRING r
44503: EQUAL
44504: PUSH
44505: LD_VAR 0 4
44509: PUSH
44510: LD_INT 1
44512: ARRAY
44513: PUSH
44514: LD_INT 4
44516: ARRAY
44517: PUSH
44518: LD_VAR 0 2
44522: EQUAL
44523: AND
44524: ST_TO_ADDR
// end ;
44525: LD_VAR 0 3
44529: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44530: LD_INT 0
44532: PPUSH
// SetDir ( unit , d ) ;
44533: LD_VAR 0 1
44537: PPUSH
44538: LD_VAR 0 4
44542: PPUSH
44543: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44547: LD_VAR 0 1
44551: PPUSH
44552: LD_VAR 0 2
44556: PPUSH
44557: LD_VAR 0 3
44561: PPUSH
44562: LD_VAR 0 5
44566: PPUSH
44567: CALL_OW 48
// end ;
44571: LD_VAR 0 6
44575: RET
// export function ToNaturalNumber ( number ) ; begin
44576: LD_INT 0
44578: PPUSH
// result := number div 1 ;
44579: LD_ADDR_VAR 0 2
44583: PUSH
44584: LD_VAR 0 1
44588: PUSH
44589: LD_INT 1
44591: DIV
44592: ST_TO_ADDR
// if number < 0 then
44593: LD_VAR 0 1
44597: PUSH
44598: LD_INT 0
44600: LESS
44601: IFFALSE 44611
// result := 0 ;
44603: LD_ADDR_VAR 0 2
44607: PUSH
44608: LD_INT 0
44610: ST_TO_ADDR
// end ;
44611: LD_VAR 0 2
44615: RET
// export function SortByClass ( units , class ) ; var un ; begin
44616: LD_INT 0
44618: PPUSH
44619: PPUSH
// if not units or not class then
44620: LD_VAR 0 1
44624: NOT
44625: PUSH
44626: LD_VAR 0 2
44630: NOT
44631: OR
44632: IFFALSE 44636
// exit ;
44634: GO 44731
// result := [ ] ;
44636: LD_ADDR_VAR 0 3
44640: PUSH
44641: EMPTY
44642: ST_TO_ADDR
// for un in units do
44643: LD_ADDR_VAR 0 4
44647: PUSH
44648: LD_VAR 0 1
44652: PUSH
44653: FOR_IN
44654: IFFALSE 44729
// if GetClass ( un ) = class then
44656: LD_VAR 0 4
44660: PPUSH
44661: CALL_OW 257
44665: PUSH
44666: LD_VAR 0 2
44670: EQUAL
44671: IFFALSE 44698
// result := Insert ( result , 1 , un ) else
44673: LD_ADDR_VAR 0 3
44677: PUSH
44678: LD_VAR 0 3
44682: PPUSH
44683: LD_INT 1
44685: PPUSH
44686: LD_VAR 0 4
44690: PPUSH
44691: CALL_OW 2
44695: ST_TO_ADDR
44696: GO 44727
// result := Replace ( result , result + 1 , un ) ;
44698: LD_ADDR_VAR 0 3
44702: PUSH
44703: LD_VAR 0 3
44707: PPUSH
44708: LD_VAR 0 3
44712: PUSH
44713: LD_INT 1
44715: PLUS
44716: PPUSH
44717: LD_VAR 0 4
44721: PPUSH
44722: CALL_OW 1
44726: ST_TO_ADDR
44727: GO 44653
44729: POP
44730: POP
// end ;
44731: LD_VAR 0 3
44735: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44736: LD_INT 0
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
// result := [ ] ;
44745: LD_ADDR_VAR 0 4
44749: PUSH
44750: EMPTY
44751: ST_TO_ADDR
// if x - r < 0 then
44752: LD_VAR 0 1
44756: PUSH
44757: LD_VAR 0 3
44761: MINUS
44762: PUSH
44763: LD_INT 0
44765: LESS
44766: IFFALSE 44778
// min_x := 0 else
44768: LD_ADDR_VAR 0 8
44772: PUSH
44773: LD_INT 0
44775: ST_TO_ADDR
44776: GO 44794
// min_x := x - r ;
44778: LD_ADDR_VAR 0 8
44782: PUSH
44783: LD_VAR 0 1
44787: PUSH
44788: LD_VAR 0 3
44792: MINUS
44793: ST_TO_ADDR
// if y - r < 0 then
44794: LD_VAR 0 2
44798: PUSH
44799: LD_VAR 0 3
44803: MINUS
44804: PUSH
44805: LD_INT 0
44807: LESS
44808: IFFALSE 44820
// min_y := 0 else
44810: LD_ADDR_VAR 0 7
44814: PUSH
44815: LD_INT 0
44817: ST_TO_ADDR
44818: GO 44836
// min_y := y - r ;
44820: LD_ADDR_VAR 0 7
44824: PUSH
44825: LD_VAR 0 2
44829: PUSH
44830: LD_VAR 0 3
44834: MINUS
44835: ST_TO_ADDR
// max_x := x + r ;
44836: LD_ADDR_VAR 0 9
44840: PUSH
44841: LD_VAR 0 1
44845: PUSH
44846: LD_VAR 0 3
44850: PLUS
44851: ST_TO_ADDR
// max_y := y + r ;
44852: LD_ADDR_VAR 0 10
44856: PUSH
44857: LD_VAR 0 2
44861: PUSH
44862: LD_VAR 0 3
44866: PLUS
44867: ST_TO_ADDR
// for _x = min_x to max_x do
44868: LD_ADDR_VAR 0 5
44872: PUSH
44873: DOUBLE
44874: LD_VAR 0 8
44878: DEC
44879: ST_TO_ADDR
44880: LD_VAR 0 9
44884: PUSH
44885: FOR_TO
44886: IFFALSE 44987
// for _y = min_y to max_y do
44888: LD_ADDR_VAR 0 6
44892: PUSH
44893: DOUBLE
44894: LD_VAR 0 7
44898: DEC
44899: ST_TO_ADDR
44900: LD_VAR 0 10
44904: PUSH
44905: FOR_TO
44906: IFFALSE 44983
// begin if not ValidHex ( _x , _y ) then
44908: LD_VAR 0 5
44912: PPUSH
44913: LD_VAR 0 6
44917: PPUSH
44918: CALL_OW 488
44922: NOT
44923: IFFALSE 44927
// continue ;
44925: GO 44905
// if GetResourceTypeXY ( _x , _y ) then
44927: LD_VAR 0 5
44931: PPUSH
44932: LD_VAR 0 6
44936: PPUSH
44937: CALL_OW 283
44941: IFFALSE 44981
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44943: LD_ADDR_VAR 0 4
44947: PUSH
44948: LD_VAR 0 4
44952: PPUSH
44953: LD_VAR 0 4
44957: PUSH
44958: LD_INT 1
44960: PLUS
44961: PPUSH
44962: LD_VAR 0 5
44966: PUSH
44967: LD_VAR 0 6
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PPUSH
44976: CALL_OW 1
44980: ST_TO_ADDR
// end ;
44981: GO 44905
44983: POP
44984: POP
44985: GO 44885
44987: POP
44988: POP
// end ;
44989: LD_VAR 0 4
44993: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44994: LD_INT 0
44996: PPUSH
44997: PPUSH
44998: PPUSH
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
// if not units then
45004: LD_VAR 0 1
45008: NOT
45009: IFFALSE 45013
// exit ;
45011: GO 45537
// result := UnitFilter ( units , [ f_ok ] ) ;
45013: LD_ADDR_VAR 0 3
45017: PUSH
45018: LD_VAR 0 1
45022: PPUSH
45023: LD_INT 50
45025: PUSH
45026: EMPTY
45027: LIST
45028: PPUSH
45029: CALL_OW 72
45033: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45034: LD_ADDR_VAR 0 8
45038: PUSH
45039: LD_VAR 0 1
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PPUSH
45048: CALL_OW 255
45052: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45053: LD_ADDR_VAR 0 10
45057: PUSH
45058: LD_INT 29
45060: PUSH
45061: LD_INT 91
45063: PUSH
45064: LD_INT 49
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// if not result then
45072: LD_VAR 0 3
45076: NOT
45077: IFFALSE 45081
// exit ;
45079: GO 45537
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45081: LD_ADDR_VAR 0 5
45085: PUSH
45086: LD_INT 81
45088: PUSH
45089: LD_VAR 0 8
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PPUSH
45098: CALL_OW 69
45102: ST_TO_ADDR
// for i in result do
45103: LD_ADDR_VAR 0 4
45107: PUSH
45108: LD_VAR 0 3
45112: PUSH
45113: FOR_IN
45114: IFFALSE 45535
// begin tag := GetTag ( i ) + 1 ;
45116: LD_ADDR_VAR 0 9
45120: PUSH
45121: LD_VAR 0 4
45125: PPUSH
45126: CALL_OW 110
45130: PUSH
45131: LD_INT 1
45133: PLUS
45134: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
45135: LD_ADDR_VAR 0 7
45139: PUSH
45140: LD_VAR 0 4
45144: PPUSH
45145: CALL_OW 250
45149: PPUSH
45150: LD_VAR 0 4
45154: PPUSH
45155: CALL_OW 251
45159: PPUSH
45160: LD_INT 6
45162: PPUSH
45163: CALL 44736 0 3
45167: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
45168: LD_VAR 0 4
45172: PPUSH
45173: CALL_OW 247
45177: PUSH
45178: LD_INT 2
45180: EQUAL
45181: PUSH
45182: LD_VAR 0 7
45186: AND
45187: PUSH
45188: LD_VAR 0 4
45192: PPUSH
45193: CALL_OW 264
45197: PUSH
45198: LD_VAR 0 10
45202: IN
45203: NOT
45204: AND
45205: IFFALSE 45244
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45207: LD_VAR 0 4
45211: PPUSH
45212: LD_VAR 0 7
45216: PUSH
45217: LD_INT 1
45219: ARRAY
45220: PUSH
45221: LD_INT 1
45223: ARRAY
45224: PPUSH
45225: LD_VAR 0 7
45229: PUSH
45230: LD_INT 1
45232: ARRAY
45233: PUSH
45234: LD_INT 2
45236: ARRAY
45237: PPUSH
45238: CALL_OW 116
45242: GO 45533
// if path > tag then
45244: LD_VAR 0 2
45248: PUSH
45249: LD_VAR 0 9
45253: GREATER
45254: IFFALSE 45462
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45256: LD_ADDR_VAR 0 6
45260: PUSH
45261: LD_VAR 0 5
45265: PPUSH
45266: LD_INT 91
45268: PUSH
45269: LD_VAR 0 4
45273: PUSH
45274: LD_INT 8
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: PPUSH
45282: CALL_OW 72
45286: ST_TO_ADDR
// if nearEnemy then
45287: LD_VAR 0 6
45291: IFFALSE 45360
// begin if GetWeapon ( i ) = ru_time_lapser then
45293: LD_VAR 0 4
45297: PPUSH
45298: CALL_OW 264
45302: PUSH
45303: LD_INT 49
45305: EQUAL
45306: IFFALSE 45334
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45308: LD_VAR 0 4
45312: PPUSH
45313: LD_VAR 0 6
45317: PPUSH
45318: LD_VAR 0 4
45322: PPUSH
45323: CALL_OW 74
45327: PPUSH
45328: CALL_OW 112
45332: GO 45358
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45334: LD_VAR 0 4
45338: PPUSH
45339: LD_VAR 0 6
45343: PPUSH
45344: LD_VAR 0 4
45348: PPUSH
45349: CALL_OW 74
45353: PPUSH
45354: CALL 46462 0 2
// end else
45358: GO 45460
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45360: LD_VAR 0 4
45364: PPUSH
45365: LD_VAR 0 2
45369: PUSH
45370: LD_VAR 0 9
45374: ARRAY
45375: PUSH
45376: LD_INT 1
45378: ARRAY
45379: PPUSH
45380: LD_VAR 0 2
45384: PUSH
45385: LD_VAR 0 9
45389: ARRAY
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: PPUSH
45395: CALL_OW 297
45399: PUSH
45400: LD_INT 6
45402: GREATER
45403: IFFALSE 45446
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45405: LD_VAR 0 4
45409: PPUSH
45410: LD_VAR 0 2
45414: PUSH
45415: LD_VAR 0 9
45419: ARRAY
45420: PUSH
45421: LD_INT 1
45423: ARRAY
45424: PPUSH
45425: LD_VAR 0 2
45429: PUSH
45430: LD_VAR 0 9
45434: ARRAY
45435: PUSH
45436: LD_INT 2
45438: ARRAY
45439: PPUSH
45440: CALL_OW 114
45444: GO 45460
// SetTag ( i , tag ) ;
45446: LD_VAR 0 4
45450: PPUSH
45451: LD_VAR 0 9
45455: PPUSH
45456: CALL_OW 109
// end else
45460: GO 45533
// if enemy then
45462: LD_VAR 0 5
45466: IFFALSE 45533
// begin if GetWeapon ( i ) = ru_time_lapser then
45468: LD_VAR 0 4
45472: PPUSH
45473: CALL_OW 264
45477: PUSH
45478: LD_INT 49
45480: EQUAL
45481: IFFALSE 45509
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45483: LD_VAR 0 4
45487: PPUSH
45488: LD_VAR 0 5
45492: PPUSH
45493: LD_VAR 0 4
45497: PPUSH
45498: CALL_OW 74
45502: PPUSH
45503: CALL_OW 112
45507: GO 45533
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45509: LD_VAR 0 4
45513: PPUSH
45514: LD_VAR 0 5
45518: PPUSH
45519: LD_VAR 0 4
45523: PPUSH
45524: CALL_OW 74
45528: PPUSH
45529: CALL 46462 0 2
// end ; end ;
45533: GO 45113
45535: POP
45536: POP
// end ;
45537: LD_VAR 0 3
45541: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45542: LD_INT 0
45544: PPUSH
45545: PPUSH
45546: PPUSH
// if not unit or IsInUnit ( unit ) then
45547: LD_VAR 0 1
45551: NOT
45552: PUSH
45553: LD_VAR 0 1
45557: PPUSH
45558: CALL_OW 310
45562: OR
45563: IFFALSE 45567
// exit ;
45565: GO 45658
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45567: LD_ADDR_VAR 0 4
45571: PUSH
45572: LD_VAR 0 1
45576: PPUSH
45577: CALL_OW 250
45581: PPUSH
45582: LD_VAR 0 2
45586: PPUSH
45587: LD_INT 1
45589: PPUSH
45590: CALL_OW 272
45594: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45595: LD_ADDR_VAR 0 5
45599: PUSH
45600: LD_VAR 0 1
45604: PPUSH
45605: CALL_OW 251
45609: PPUSH
45610: LD_VAR 0 2
45614: PPUSH
45615: LD_INT 1
45617: PPUSH
45618: CALL_OW 273
45622: ST_TO_ADDR
// if ValidHex ( x , y ) then
45623: LD_VAR 0 4
45627: PPUSH
45628: LD_VAR 0 5
45632: PPUSH
45633: CALL_OW 488
45637: IFFALSE 45658
// ComTurnXY ( unit , x , y ) ;
45639: LD_VAR 0 1
45643: PPUSH
45644: LD_VAR 0 4
45648: PPUSH
45649: LD_VAR 0 5
45653: PPUSH
45654: CALL_OW 118
// end ;
45658: LD_VAR 0 3
45662: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45663: LD_INT 0
45665: PPUSH
45666: PPUSH
// result := false ;
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_INT 0
45674: ST_TO_ADDR
// if not units then
45675: LD_VAR 0 2
45679: NOT
45680: IFFALSE 45684
// exit ;
45682: GO 45729
// for i in units do
45684: LD_ADDR_VAR 0 4
45688: PUSH
45689: LD_VAR 0 2
45693: PUSH
45694: FOR_IN
45695: IFFALSE 45727
// if See ( side , i ) then
45697: LD_VAR 0 1
45701: PPUSH
45702: LD_VAR 0 4
45706: PPUSH
45707: CALL_OW 292
45711: IFFALSE 45725
// begin result := true ;
45713: LD_ADDR_VAR 0 3
45717: PUSH
45718: LD_INT 1
45720: ST_TO_ADDR
// exit ;
45721: POP
45722: POP
45723: GO 45729
// end ;
45725: GO 45694
45727: POP
45728: POP
// end ;
45729: LD_VAR 0 3
45733: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45734: LD_INT 0
45736: PPUSH
45737: PPUSH
45738: PPUSH
45739: PPUSH
// if not unit or not points then
45740: LD_VAR 0 1
45744: NOT
45745: PUSH
45746: LD_VAR 0 2
45750: NOT
45751: OR
45752: IFFALSE 45756
// exit ;
45754: GO 45846
// dist := 99999 ;
45756: LD_ADDR_VAR 0 5
45760: PUSH
45761: LD_INT 99999
45763: ST_TO_ADDR
// for i in points do
45764: LD_ADDR_VAR 0 4
45768: PUSH
45769: LD_VAR 0 2
45773: PUSH
45774: FOR_IN
45775: IFFALSE 45844
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45777: LD_ADDR_VAR 0 6
45781: PUSH
45782: LD_VAR 0 1
45786: PPUSH
45787: LD_VAR 0 4
45791: PUSH
45792: LD_INT 1
45794: ARRAY
45795: PPUSH
45796: LD_VAR 0 4
45800: PUSH
45801: LD_INT 2
45803: ARRAY
45804: PPUSH
45805: CALL_OW 297
45809: ST_TO_ADDR
// if tmpDist < dist then
45810: LD_VAR 0 6
45814: PUSH
45815: LD_VAR 0 5
45819: LESS
45820: IFFALSE 45842
// begin result := i ;
45822: LD_ADDR_VAR 0 3
45826: PUSH
45827: LD_VAR 0 4
45831: ST_TO_ADDR
// dist := tmpDist ;
45832: LD_ADDR_VAR 0 5
45836: PUSH
45837: LD_VAR 0 6
45841: ST_TO_ADDR
// end ; end ;
45842: GO 45774
45844: POP
45845: POP
// end ;
45846: LD_VAR 0 3
45850: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45851: LD_INT 0
45853: PPUSH
// uc_side := side ;
45854: LD_ADDR_OWVAR 20
45858: PUSH
45859: LD_VAR 0 1
45863: ST_TO_ADDR
// uc_nation := 3 ;
45864: LD_ADDR_OWVAR 21
45868: PUSH
45869: LD_INT 3
45871: ST_TO_ADDR
// vc_chassis := 25 ;
45872: LD_ADDR_OWVAR 37
45876: PUSH
45877: LD_INT 25
45879: ST_TO_ADDR
// vc_engine := engine_siberite ;
45880: LD_ADDR_OWVAR 39
45884: PUSH
45885: LD_INT 3
45887: ST_TO_ADDR
// vc_control := control_computer ;
45888: LD_ADDR_OWVAR 38
45892: PUSH
45893: LD_INT 3
45895: ST_TO_ADDR
// vc_weapon := 59 ;
45896: LD_ADDR_OWVAR 40
45900: PUSH
45901: LD_INT 59
45903: ST_TO_ADDR
// result := CreateVehicle ;
45904: LD_ADDR_VAR 0 5
45908: PUSH
45909: CALL_OW 45
45913: ST_TO_ADDR
// SetDir ( result , d ) ;
45914: LD_VAR 0 5
45918: PPUSH
45919: LD_VAR 0 4
45923: PPUSH
45924: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45928: LD_VAR 0 5
45932: PPUSH
45933: LD_VAR 0 2
45937: PPUSH
45938: LD_VAR 0 3
45942: PPUSH
45943: LD_INT 0
45945: PPUSH
45946: CALL_OW 48
// end ;
45950: LD_VAR 0 5
45954: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45955: LD_INT 0
45957: PPUSH
45958: PPUSH
45959: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45960: LD_ADDR_VAR 0 2
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45983: LD_VAR 0 1
45987: NOT
45988: PUSH
45989: LD_VAR 0 1
45993: PPUSH
45994: CALL_OW 264
45998: PUSH
45999: LD_INT 12
46001: PUSH
46002: LD_INT 51
46004: PUSH
46005: LD_INT 32
46007: PUSH
46008: LD_INT 89
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: IN
46017: NOT
46018: OR
46019: IFFALSE 46023
// exit ;
46021: GO 46121
// for i := 1 to 3 do
46023: LD_ADDR_VAR 0 3
46027: PUSH
46028: DOUBLE
46029: LD_INT 1
46031: DEC
46032: ST_TO_ADDR
46033: LD_INT 3
46035: PUSH
46036: FOR_TO
46037: IFFALSE 46119
// begin tmp := GetCargo ( cargo , i ) ;
46039: LD_ADDR_VAR 0 4
46043: PUSH
46044: LD_VAR 0 1
46048: PPUSH
46049: LD_VAR 0 3
46053: PPUSH
46054: CALL_OW 289
46058: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46059: LD_ADDR_VAR 0 2
46063: PUSH
46064: LD_VAR 0 2
46068: PPUSH
46069: LD_VAR 0 3
46073: PPUSH
46074: LD_VAR 0 4
46078: PPUSH
46079: CALL_OW 1
46083: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46084: LD_ADDR_VAR 0 2
46088: PUSH
46089: LD_VAR 0 2
46093: PPUSH
46094: LD_INT 4
46096: PPUSH
46097: LD_VAR 0 2
46101: PUSH
46102: LD_INT 4
46104: ARRAY
46105: PUSH
46106: LD_VAR 0 4
46110: PLUS
46111: PPUSH
46112: CALL_OW 1
46116: ST_TO_ADDR
// end ;
46117: GO 46036
46119: POP
46120: POP
// end ;
46121: LD_VAR 0 2
46125: RET
// export function Length ( array ) ; begin
46126: LD_INT 0
46128: PPUSH
// result := array + 0 ;
46129: LD_ADDR_VAR 0 2
46133: PUSH
46134: LD_VAR 0 1
46138: PUSH
46139: LD_INT 0
46141: PLUS
46142: ST_TO_ADDR
// end ;
46143: LD_VAR 0 2
46147: RET
// export function PrepareArray ( array ) ; begin
46148: LD_INT 0
46150: PPUSH
// result := array diff 0 ;
46151: LD_ADDR_VAR 0 2
46155: PUSH
46156: LD_VAR 0 1
46160: PUSH
46161: LD_INT 0
46163: DIFF
46164: ST_TO_ADDR
// if not result [ 1 ] then
46165: LD_VAR 0 2
46169: PUSH
46170: LD_INT 1
46172: ARRAY
46173: NOT
46174: IFFALSE 46194
// result := Delete ( result , 1 ) ;
46176: LD_ADDR_VAR 0 2
46180: PUSH
46181: LD_VAR 0 2
46185: PPUSH
46186: LD_INT 1
46188: PPUSH
46189: CALL_OW 3
46193: ST_TO_ADDR
// end ;
46194: LD_VAR 0 2
46198: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46199: LD_INT 0
46201: PPUSH
46202: PPUSH
46203: PPUSH
46204: PPUSH
// sibRocketRange := 25 ;
46205: LD_ADDR_VAR 0 6
46209: PUSH
46210: LD_INT 25
46212: ST_TO_ADDR
// result := false ;
46213: LD_ADDR_VAR 0 4
46217: PUSH
46218: LD_INT 0
46220: ST_TO_ADDR
// for i := 0 to 5 do
46221: LD_ADDR_VAR 0 5
46225: PUSH
46226: DOUBLE
46227: LD_INT 0
46229: DEC
46230: ST_TO_ADDR
46231: LD_INT 5
46233: PUSH
46234: FOR_TO
46235: IFFALSE 46302
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46237: LD_VAR 0 1
46241: PPUSH
46242: LD_VAR 0 5
46246: PPUSH
46247: LD_VAR 0 6
46251: PPUSH
46252: CALL_OW 272
46256: PPUSH
46257: LD_VAR 0 2
46261: PPUSH
46262: LD_VAR 0 5
46266: PPUSH
46267: LD_VAR 0 6
46271: PPUSH
46272: CALL_OW 273
46276: PPUSH
46277: LD_VAR 0 3
46281: PPUSH
46282: CALL_OW 309
46286: IFFALSE 46300
// begin result := true ;
46288: LD_ADDR_VAR 0 4
46292: PUSH
46293: LD_INT 1
46295: ST_TO_ADDR
// exit ;
46296: POP
46297: POP
46298: GO 46304
// end ;
46300: GO 46234
46302: POP
46303: POP
// end ;
46304: LD_VAR 0 4
46308: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46309: LD_INT 0
46311: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46312: LD_VAR 0 1
46316: PPUSH
46317: LD_VAR 0 2
46321: PPUSH
46322: LD_INT 0
46324: PPUSH
46325: LD_INT 0
46327: PPUSH
46328: LD_INT 1
46330: PPUSH
46331: LD_INT 0
46333: PPUSH
46334: CALL_OW 587
// end ;
46338: LD_VAR 0 3
46342: RET
// export function CenterOnNow ( unit ) ; begin
46343: LD_INT 0
46345: PPUSH
// result := IsInUnit ( unit ) ;
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: LD_VAR 0 1
46355: PPUSH
46356: CALL_OW 310
46360: ST_TO_ADDR
// if not result then
46361: LD_VAR 0 2
46365: NOT
46366: IFFALSE 46378
// result := unit ;
46368: LD_ADDR_VAR 0 2
46372: PUSH
46373: LD_VAR 0 1
46377: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46378: LD_VAR 0 1
46382: PPUSH
46383: CALL_OW 87
// end ;
46387: LD_VAR 0 2
46391: RET
// export function ComMoveHex ( unit , hex ) ; begin
46392: LD_INT 0
46394: PPUSH
// if not hex then
46395: LD_VAR 0 2
46399: NOT
46400: IFFALSE 46404
// exit ;
46402: GO 46457
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46404: LD_VAR 0 2
46408: PUSH
46409: LD_INT 1
46411: ARRAY
46412: PPUSH
46413: LD_VAR 0 2
46417: PUSH
46418: LD_INT 2
46420: ARRAY
46421: PPUSH
46422: CALL_OW 428
46426: IFFALSE 46430
// exit ;
46428: GO 46457
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46430: LD_VAR 0 1
46434: PPUSH
46435: LD_VAR 0 2
46439: PUSH
46440: LD_INT 1
46442: ARRAY
46443: PPUSH
46444: LD_VAR 0 2
46448: PUSH
46449: LD_INT 2
46451: ARRAY
46452: PPUSH
46453: CALL_OW 111
// end ;
46457: LD_VAR 0 3
46461: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46462: LD_INT 0
46464: PPUSH
46465: PPUSH
46466: PPUSH
// if not unit or not enemy then
46467: LD_VAR 0 1
46471: NOT
46472: PUSH
46473: LD_VAR 0 2
46477: NOT
46478: OR
46479: IFFALSE 46483
// exit ;
46481: GO 46607
// x := GetX ( enemy ) ;
46483: LD_ADDR_VAR 0 4
46487: PUSH
46488: LD_VAR 0 2
46492: PPUSH
46493: CALL_OW 250
46497: ST_TO_ADDR
// y := GetY ( enemy ) ;
46498: LD_ADDR_VAR 0 5
46502: PUSH
46503: LD_VAR 0 2
46507: PPUSH
46508: CALL_OW 251
46512: ST_TO_ADDR
// if ValidHex ( x , y ) then
46513: LD_VAR 0 4
46517: PPUSH
46518: LD_VAR 0 5
46522: PPUSH
46523: CALL_OW 488
46527: IFFALSE 46607
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
46529: LD_VAR 0 2
46533: PPUSH
46534: CALL_OW 247
46538: PUSH
46539: LD_INT 3
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: IN
46549: PUSH
46550: LD_VAR 0 1
46554: PPUSH
46555: CALL_OW 255
46559: PPUSH
46560: LD_VAR 0 2
46564: PPUSH
46565: CALL_OW 292
46569: AND
46570: IFFALSE 46588
// ComAttackUnit ( unit , enemy ) else
46572: LD_VAR 0 1
46576: PPUSH
46577: LD_VAR 0 2
46581: PPUSH
46582: CALL_OW 115
46586: GO 46607
// ComAgressiveMove ( unit , x , y ) ;
46588: LD_VAR 0 1
46592: PPUSH
46593: LD_VAR 0 4
46597: PPUSH
46598: LD_VAR 0 5
46602: PPUSH
46603: CALL_OW 114
// end ; end_of_file end_of_file
46607: LD_VAR 0 3
46611: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
46612: LD_VAR 0 1
46616: PPUSH
46617: LD_VAR 0 2
46621: PPUSH
46622: LD_VAR 0 3
46626: PPUSH
46627: LD_VAR 0 4
46631: PPUSH
46632: LD_VAR 0 5
46636: PPUSH
46637: LD_VAR 0 6
46641: PPUSH
46642: CALL 46826 0 6
// end ;
46646: PPOPN 6
46648: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
46649: LD_INT 0
46651: PPUSH
// begin if not units then
46652: LD_VAR 0 1
46656: NOT
46657: IFFALSE 46661
// exit ;
46659: GO 46661
// end ;
46661: PPOPN 7
46663: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
46664: CALL 46730 0 0
// end ; end_of_file
46668: PPOPN 1
46670: END
// export globalGameSaveCounter ; every 0 0$1 do
46671: GO 46673
46673: DISABLE
// begin enable ;
46674: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46675: LD_STRING updateTimer(
46677: PUSH
46678: LD_OWVAR 1
46682: STR
46683: PUSH
46684: LD_STRING );
46686: STR
46687: PPUSH
46688: CALL_OW 559
// end ;
46692: END
// every 0 0$1 do
46693: GO 46695
46695: DISABLE
// begin globalGameSaveCounter := 0 ;
46696: LD_ADDR_EXP 27
46700: PUSH
46701: LD_INT 0
46703: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
46704: LD_STRING setGameSaveCounter(0)
46706: PPUSH
46707: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
46711: LD_STRING initStreamRollete();
46713: PPUSH
46714: CALL_OW 559
// InitStreamMode ;
46718: CALL 48044 0 0
// DefineStreamItems ( false ) ;
46722: LD_INT 0
46724: PPUSH
46725: CALL 48508 0 1
// end ;
46729: END
// export function SOS_MapStart ( ) ; begin
46730: LD_INT 0
46732: PPUSH
// if streamModeActive then
46733: LD_EXP 28
46737: IFFALSE 46746
// DefineStreamItems ( true ) ;
46739: LD_INT 1
46741: PPUSH
46742: CALL 48508 0 1
// UpdateLuaVariables ( ) ;
46746: CALL 46763 0 0
// UpdateFactoryWaypoints ( ) ;
46750: CALL 61377 0 0
// UpdateWarehouseGatheringPoints ( ) ;
46754: CALL 61634 0 0
// end ;
46758: LD_VAR 0 1
46762: RET
// function UpdateLuaVariables ( ) ; begin
46763: LD_INT 0
46765: PPUSH
// if globalGameSaveCounter then
46766: LD_EXP 27
46770: IFFALSE 46804
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
46772: LD_ADDR_EXP 27
46776: PUSH
46777: LD_EXP 27
46781: PPUSH
46782: CALL 43751 0 1
46786: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46787: LD_STRING setGameSaveCounter(
46789: PUSH
46790: LD_EXP 27
46794: STR
46795: PUSH
46796: LD_STRING )
46798: STR
46799: PPUSH
46800: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46804: LD_STRING setGameDifficulty(
46806: PUSH
46807: LD_OWVAR 67
46811: STR
46812: PUSH
46813: LD_STRING )
46815: STR
46816: PPUSH
46817: CALL_OW 559
// end ;
46821: LD_VAR 0 1
46825: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46826: LD_INT 0
46828: PPUSH
// if p2 = stream_mode then
46829: LD_VAR 0 2
46833: PUSH
46834: LD_INT 100
46836: EQUAL
46837: IFFALSE 47840
// begin if not StreamModeActive then
46839: LD_EXP 28
46843: NOT
46844: IFFALSE 46854
// StreamModeActive := true ;
46846: LD_ADDR_EXP 28
46850: PUSH
46851: LD_INT 1
46853: ST_TO_ADDR
// if p3 = 0 then
46854: LD_VAR 0 3
46858: PUSH
46859: LD_INT 0
46861: EQUAL
46862: IFFALSE 46868
// InitStreamMode ;
46864: CALL 48044 0 0
// if p3 = 1 then
46868: LD_VAR 0 3
46872: PUSH
46873: LD_INT 1
46875: EQUAL
46876: IFFALSE 46886
// sRocket := true ;
46878: LD_ADDR_EXP 33
46882: PUSH
46883: LD_INT 1
46885: ST_TO_ADDR
// if p3 = 2 then
46886: LD_VAR 0 3
46890: PUSH
46891: LD_INT 2
46893: EQUAL
46894: IFFALSE 46904
// sSpeed := true ;
46896: LD_ADDR_EXP 32
46900: PUSH
46901: LD_INT 1
46903: ST_TO_ADDR
// if p3 = 3 then
46904: LD_VAR 0 3
46908: PUSH
46909: LD_INT 3
46911: EQUAL
46912: IFFALSE 46922
// sEngine := true ;
46914: LD_ADDR_EXP 34
46918: PUSH
46919: LD_INT 1
46921: ST_TO_ADDR
// if p3 = 4 then
46922: LD_VAR 0 3
46926: PUSH
46927: LD_INT 4
46929: EQUAL
46930: IFFALSE 46940
// sSpec := true ;
46932: LD_ADDR_EXP 31
46936: PUSH
46937: LD_INT 1
46939: ST_TO_ADDR
// if p3 = 5 then
46940: LD_VAR 0 3
46944: PUSH
46945: LD_INT 5
46947: EQUAL
46948: IFFALSE 46958
// sLevel := true ;
46950: LD_ADDR_EXP 35
46954: PUSH
46955: LD_INT 1
46957: ST_TO_ADDR
// if p3 = 6 then
46958: LD_VAR 0 3
46962: PUSH
46963: LD_INT 6
46965: EQUAL
46966: IFFALSE 46976
// sArmoury := true ;
46968: LD_ADDR_EXP 36
46972: PUSH
46973: LD_INT 1
46975: ST_TO_ADDR
// if p3 = 7 then
46976: LD_VAR 0 3
46980: PUSH
46981: LD_INT 7
46983: EQUAL
46984: IFFALSE 46994
// sRadar := true ;
46986: LD_ADDR_EXP 37
46990: PUSH
46991: LD_INT 1
46993: ST_TO_ADDR
// if p3 = 8 then
46994: LD_VAR 0 3
46998: PUSH
46999: LD_INT 8
47001: EQUAL
47002: IFFALSE 47012
// sBunker := true ;
47004: LD_ADDR_EXP 38
47008: PUSH
47009: LD_INT 1
47011: ST_TO_ADDR
// if p3 = 9 then
47012: LD_VAR 0 3
47016: PUSH
47017: LD_INT 9
47019: EQUAL
47020: IFFALSE 47030
// sHack := true ;
47022: LD_ADDR_EXP 39
47026: PUSH
47027: LD_INT 1
47029: ST_TO_ADDR
// if p3 = 10 then
47030: LD_VAR 0 3
47034: PUSH
47035: LD_INT 10
47037: EQUAL
47038: IFFALSE 47048
// sFire := true ;
47040: LD_ADDR_EXP 40
47044: PUSH
47045: LD_INT 1
47047: ST_TO_ADDR
// if p3 = 11 then
47048: LD_VAR 0 3
47052: PUSH
47053: LD_INT 11
47055: EQUAL
47056: IFFALSE 47066
// sRefresh := true ;
47058: LD_ADDR_EXP 41
47062: PUSH
47063: LD_INT 1
47065: ST_TO_ADDR
// if p3 = 12 then
47066: LD_VAR 0 3
47070: PUSH
47071: LD_INT 12
47073: EQUAL
47074: IFFALSE 47084
// sExp := true ;
47076: LD_ADDR_EXP 42
47080: PUSH
47081: LD_INT 1
47083: ST_TO_ADDR
// if p3 = 13 then
47084: LD_VAR 0 3
47088: PUSH
47089: LD_INT 13
47091: EQUAL
47092: IFFALSE 47102
// sDepot := true ;
47094: LD_ADDR_EXP 43
47098: PUSH
47099: LD_INT 1
47101: ST_TO_ADDR
// if p3 = 14 then
47102: LD_VAR 0 3
47106: PUSH
47107: LD_INT 14
47109: EQUAL
47110: IFFALSE 47120
// sFlag := true ;
47112: LD_ADDR_EXP 44
47116: PUSH
47117: LD_INT 1
47119: ST_TO_ADDR
// if p3 = 15 then
47120: LD_VAR 0 3
47124: PUSH
47125: LD_INT 15
47127: EQUAL
47128: IFFALSE 47138
// sKamikadze := true ;
47130: LD_ADDR_EXP 52
47134: PUSH
47135: LD_INT 1
47137: ST_TO_ADDR
// if p3 = 16 then
47138: LD_VAR 0 3
47142: PUSH
47143: LD_INT 16
47145: EQUAL
47146: IFFALSE 47156
// sTroll := true ;
47148: LD_ADDR_EXP 53
47152: PUSH
47153: LD_INT 1
47155: ST_TO_ADDR
// if p3 = 17 then
47156: LD_VAR 0 3
47160: PUSH
47161: LD_INT 17
47163: EQUAL
47164: IFFALSE 47174
// sSlow := true ;
47166: LD_ADDR_EXP 54
47170: PUSH
47171: LD_INT 1
47173: ST_TO_ADDR
// if p3 = 18 then
47174: LD_VAR 0 3
47178: PUSH
47179: LD_INT 18
47181: EQUAL
47182: IFFALSE 47192
// sLack := true ;
47184: LD_ADDR_EXP 55
47188: PUSH
47189: LD_INT 1
47191: ST_TO_ADDR
// if p3 = 19 then
47192: LD_VAR 0 3
47196: PUSH
47197: LD_INT 19
47199: EQUAL
47200: IFFALSE 47210
// sTank := true ;
47202: LD_ADDR_EXP 57
47206: PUSH
47207: LD_INT 1
47209: ST_TO_ADDR
// if p3 = 20 then
47210: LD_VAR 0 3
47214: PUSH
47215: LD_INT 20
47217: EQUAL
47218: IFFALSE 47228
// sRemote := true ;
47220: LD_ADDR_EXP 58
47224: PUSH
47225: LD_INT 1
47227: ST_TO_ADDR
// if p3 = 21 then
47228: LD_VAR 0 3
47232: PUSH
47233: LD_INT 21
47235: EQUAL
47236: IFFALSE 47246
// sPowell := true ;
47238: LD_ADDR_EXP 59
47242: PUSH
47243: LD_INT 1
47245: ST_TO_ADDR
// if p3 = 22 then
47246: LD_VAR 0 3
47250: PUSH
47251: LD_INT 22
47253: EQUAL
47254: IFFALSE 47264
// sTeleport := true ;
47256: LD_ADDR_EXP 62
47260: PUSH
47261: LD_INT 1
47263: ST_TO_ADDR
// if p3 = 23 then
47264: LD_VAR 0 3
47268: PUSH
47269: LD_INT 23
47271: EQUAL
47272: IFFALSE 47282
// sOilTower := true ;
47274: LD_ADDR_EXP 64
47278: PUSH
47279: LD_INT 1
47281: ST_TO_ADDR
// if p3 = 24 then
47282: LD_VAR 0 3
47286: PUSH
47287: LD_INT 24
47289: EQUAL
47290: IFFALSE 47300
// sShovel := true ;
47292: LD_ADDR_EXP 65
47296: PUSH
47297: LD_INT 1
47299: ST_TO_ADDR
// if p3 = 25 then
47300: LD_VAR 0 3
47304: PUSH
47305: LD_INT 25
47307: EQUAL
47308: IFFALSE 47318
// sSheik := true ;
47310: LD_ADDR_EXP 66
47314: PUSH
47315: LD_INT 1
47317: ST_TO_ADDR
// if p3 = 26 then
47318: LD_VAR 0 3
47322: PUSH
47323: LD_INT 26
47325: EQUAL
47326: IFFALSE 47336
// sEarthquake := true ;
47328: LD_ADDR_EXP 68
47332: PUSH
47333: LD_INT 1
47335: ST_TO_ADDR
// if p3 = 27 then
47336: LD_VAR 0 3
47340: PUSH
47341: LD_INT 27
47343: EQUAL
47344: IFFALSE 47354
// sAI := true ;
47346: LD_ADDR_EXP 69
47350: PUSH
47351: LD_INT 1
47353: ST_TO_ADDR
// if p3 = 28 then
47354: LD_VAR 0 3
47358: PUSH
47359: LD_INT 28
47361: EQUAL
47362: IFFALSE 47372
// sCargo := true ;
47364: LD_ADDR_EXP 72
47368: PUSH
47369: LD_INT 1
47371: ST_TO_ADDR
// if p3 = 29 then
47372: LD_VAR 0 3
47376: PUSH
47377: LD_INT 29
47379: EQUAL
47380: IFFALSE 47390
// sDLaser := true ;
47382: LD_ADDR_EXP 73
47386: PUSH
47387: LD_INT 1
47389: ST_TO_ADDR
// if p3 = 30 then
47390: LD_VAR 0 3
47394: PUSH
47395: LD_INT 30
47397: EQUAL
47398: IFFALSE 47408
// sExchange := true ;
47400: LD_ADDR_EXP 74
47404: PUSH
47405: LD_INT 1
47407: ST_TO_ADDR
// if p3 = 31 then
47408: LD_VAR 0 3
47412: PUSH
47413: LD_INT 31
47415: EQUAL
47416: IFFALSE 47426
// sFac := true ;
47418: LD_ADDR_EXP 75
47422: PUSH
47423: LD_INT 1
47425: ST_TO_ADDR
// if p3 = 32 then
47426: LD_VAR 0 3
47430: PUSH
47431: LD_INT 32
47433: EQUAL
47434: IFFALSE 47444
// sPower := true ;
47436: LD_ADDR_EXP 76
47440: PUSH
47441: LD_INT 1
47443: ST_TO_ADDR
// if p3 = 33 then
47444: LD_VAR 0 3
47448: PUSH
47449: LD_INT 33
47451: EQUAL
47452: IFFALSE 47462
// sRandom := true ;
47454: LD_ADDR_EXP 77
47458: PUSH
47459: LD_INT 1
47461: ST_TO_ADDR
// if p3 = 34 then
47462: LD_VAR 0 3
47466: PUSH
47467: LD_INT 34
47469: EQUAL
47470: IFFALSE 47480
// sShield := true ;
47472: LD_ADDR_EXP 78
47476: PUSH
47477: LD_INT 1
47479: ST_TO_ADDR
// if p3 = 35 then
47480: LD_VAR 0 3
47484: PUSH
47485: LD_INT 35
47487: EQUAL
47488: IFFALSE 47498
// sTime := true ;
47490: LD_ADDR_EXP 79
47494: PUSH
47495: LD_INT 1
47497: ST_TO_ADDR
// if p3 = 36 then
47498: LD_VAR 0 3
47502: PUSH
47503: LD_INT 36
47505: EQUAL
47506: IFFALSE 47516
// sTools := true ;
47508: LD_ADDR_EXP 80
47512: PUSH
47513: LD_INT 1
47515: ST_TO_ADDR
// if p3 = 101 then
47516: LD_VAR 0 3
47520: PUSH
47521: LD_INT 101
47523: EQUAL
47524: IFFALSE 47534
// sSold := true ;
47526: LD_ADDR_EXP 45
47530: PUSH
47531: LD_INT 1
47533: ST_TO_ADDR
// if p3 = 102 then
47534: LD_VAR 0 3
47538: PUSH
47539: LD_INT 102
47541: EQUAL
47542: IFFALSE 47552
// sDiff := true ;
47544: LD_ADDR_EXP 46
47548: PUSH
47549: LD_INT 1
47551: ST_TO_ADDR
// if p3 = 103 then
47552: LD_VAR 0 3
47556: PUSH
47557: LD_INT 103
47559: EQUAL
47560: IFFALSE 47570
// sFog := true ;
47562: LD_ADDR_EXP 49
47566: PUSH
47567: LD_INT 1
47569: ST_TO_ADDR
// if p3 = 104 then
47570: LD_VAR 0 3
47574: PUSH
47575: LD_INT 104
47577: EQUAL
47578: IFFALSE 47588
// sReset := true ;
47580: LD_ADDR_EXP 50
47584: PUSH
47585: LD_INT 1
47587: ST_TO_ADDR
// if p3 = 105 then
47588: LD_VAR 0 3
47592: PUSH
47593: LD_INT 105
47595: EQUAL
47596: IFFALSE 47606
// sSun := true ;
47598: LD_ADDR_EXP 51
47602: PUSH
47603: LD_INT 1
47605: ST_TO_ADDR
// if p3 = 106 then
47606: LD_VAR 0 3
47610: PUSH
47611: LD_INT 106
47613: EQUAL
47614: IFFALSE 47624
// sTiger := true ;
47616: LD_ADDR_EXP 47
47620: PUSH
47621: LD_INT 1
47623: ST_TO_ADDR
// if p3 = 107 then
47624: LD_VAR 0 3
47628: PUSH
47629: LD_INT 107
47631: EQUAL
47632: IFFALSE 47642
// sBomb := true ;
47634: LD_ADDR_EXP 48
47638: PUSH
47639: LD_INT 1
47641: ST_TO_ADDR
// if p3 = 108 then
47642: LD_VAR 0 3
47646: PUSH
47647: LD_INT 108
47649: EQUAL
47650: IFFALSE 47660
// sWound := true ;
47652: LD_ADDR_EXP 56
47656: PUSH
47657: LD_INT 1
47659: ST_TO_ADDR
// if p3 = 109 then
47660: LD_VAR 0 3
47664: PUSH
47665: LD_INT 109
47667: EQUAL
47668: IFFALSE 47678
// sBetray := true ;
47670: LD_ADDR_EXP 60
47674: PUSH
47675: LD_INT 1
47677: ST_TO_ADDR
// if p3 = 110 then
47678: LD_VAR 0 3
47682: PUSH
47683: LD_INT 110
47685: EQUAL
47686: IFFALSE 47696
// sContamin := true ;
47688: LD_ADDR_EXP 61
47692: PUSH
47693: LD_INT 1
47695: ST_TO_ADDR
// if p3 = 111 then
47696: LD_VAR 0 3
47700: PUSH
47701: LD_INT 111
47703: EQUAL
47704: IFFALSE 47714
// sOil := true ;
47706: LD_ADDR_EXP 63
47710: PUSH
47711: LD_INT 1
47713: ST_TO_ADDR
// if p3 = 112 then
47714: LD_VAR 0 3
47718: PUSH
47719: LD_INT 112
47721: EQUAL
47722: IFFALSE 47732
// sStu := true ;
47724: LD_ADDR_EXP 67
47728: PUSH
47729: LD_INT 1
47731: ST_TO_ADDR
// if p3 = 113 then
47732: LD_VAR 0 3
47736: PUSH
47737: LD_INT 113
47739: EQUAL
47740: IFFALSE 47750
// sBazooka := true ;
47742: LD_ADDR_EXP 70
47746: PUSH
47747: LD_INT 1
47749: ST_TO_ADDR
// if p3 = 114 then
47750: LD_VAR 0 3
47754: PUSH
47755: LD_INT 114
47757: EQUAL
47758: IFFALSE 47768
// sMortar := true ;
47760: LD_ADDR_EXP 71
47764: PUSH
47765: LD_INT 1
47767: ST_TO_ADDR
// if p3 = 115 then
47768: LD_VAR 0 3
47772: PUSH
47773: LD_INT 115
47775: EQUAL
47776: IFFALSE 47786
// sRanger := true ;
47778: LD_ADDR_EXP 81
47782: PUSH
47783: LD_INT 1
47785: ST_TO_ADDR
// if p3 = 116 then
47786: LD_VAR 0 3
47790: PUSH
47791: LD_INT 116
47793: EQUAL
47794: IFFALSE 47804
// sComputer := true ;
47796: LD_ADDR_EXP 82
47800: PUSH
47801: LD_INT 1
47803: ST_TO_ADDR
// if p3 = 117 then
47804: LD_VAR 0 3
47808: PUSH
47809: LD_INT 117
47811: EQUAL
47812: IFFALSE 47822
// s30 := true ;
47814: LD_ADDR_EXP 83
47818: PUSH
47819: LD_INT 1
47821: ST_TO_ADDR
// if p3 = 118 then
47822: LD_VAR 0 3
47826: PUSH
47827: LD_INT 118
47829: EQUAL
47830: IFFALSE 47840
// s60 := true ;
47832: LD_ADDR_EXP 84
47836: PUSH
47837: LD_INT 1
47839: ST_TO_ADDR
// end ; if p2 = hack_mode then
47840: LD_VAR 0 2
47844: PUSH
47845: LD_INT 101
47847: EQUAL
47848: IFFALSE 47976
// begin case p3 of 1 :
47850: LD_VAR 0 3
47854: PUSH
47855: LD_INT 1
47857: DOUBLE
47858: EQUAL
47859: IFTRUE 47863
47861: GO 47870
47863: POP
// hHackUnlimitedResources ; 2 :
47864: CALL 60123 0 0
47868: GO 47976
47870: LD_INT 2
47872: DOUBLE
47873: EQUAL
47874: IFTRUE 47878
47876: GO 47885
47878: POP
// hHackSetLevel10 ; 3 :
47879: CALL 60256 0 0
47883: GO 47976
47885: LD_INT 3
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47893
47891: GO 47900
47893: POP
// hHackSetLevel10YourUnits ; 4 :
47894: CALL 60341 0 0
47898: GO 47976
47900: LD_INT 4
47902: DOUBLE
47903: EQUAL
47904: IFTRUE 47908
47906: GO 47915
47908: POP
// hHackInvincible ; 5 :
47909: CALL 60789 0 0
47913: GO 47976
47915: LD_INT 5
47917: DOUBLE
47918: EQUAL
47919: IFTRUE 47923
47921: GO 47930
47923: POP
// hHackInvisible ; 6 :
47924: CALL 60900 0 0
47928: GO 47976
47930: LD_INT 6
47932: DOUBLE
47933: EQUAL
47934: IFTRUE 47938
47936: GO 47945
47938: POP
// hHackChangeYourSide ; 7 :
47939: CALL 60957 0 0
47943: GO 47976
47945: LD_INT 7
47947: DOUBLE
47948: EQUAL
47949: IFTRUE 47953
47951: GO 47960
47953: POP
// hHackChangeUnitSide ; 8 :
47954: CALL 60999 0 0
47958: GO 47976
47960: LD_INT 8
47962: DOUBLE
47963: EQUAL
47964: IFTRUE 47968
47966: GO 47975
47968: POP
// hHackFog ; end ;
47969: CALL 61100 0 0
47973: GO 47976
47975: POP
// end ; if p2 = game_save_mode then
47976: LD_VAR 0 2
47980: PUSH
47981: LD_INT 102
47983: EQUAL
47984: IFFALSE 48039
// begin if p3 = 1 then
47986: LD_VAR 0 3
47990: PUSH
47991: LD_INT 1
47993: EQUAL
47994: IFFALSE 48006
// globalGameSaveCounter := p4 ;
47996: LD_ADDR_EXP 27
48000: PUSH
48001: LD_VAR 0 4
48005: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48006: LD_VAR 0 3
48010: PUSH
48011: LD_INT 2
48013: EQUAL
48014: PUSH
48015: LD_EXP 27
48019: AND
48020: IFFALSE 48039
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48022: LD_STRING setGameSaveCounter(
48024: PUSH
48025: LD_EXP 27
48029: STR
48030: PUSH
48031: LD_STRING )
48033: STR
48034: PPUSH
48035: CALL_OW 559
// end ; end ;
48039: LD_VAR 0 7
48043: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48044: LD_INT 0
48046: PPUSH
// streamModeActive := false ;
48047: LD_ADDR_EXP 28
48051: PUSH
48052: LD_INT 0
48054: ST_TO_ADDR
// normalCounter := 36 ;
48055: LD_ADDR_EXP 29
48059: PUSH
48060: LD_INT 36
48062: ST_TO_ADDR
// hardcoreCounter := 18 ;
48063: LD_ADDR_EXP 30
48067: PUSH
48068: LD_INT 18
48070: ST_TO_ADDR
// sRocket := false ;
48071: LD_ADDR_EXP 33
48075: PUSH
48076: LD_INT 0
48078: ST_TO_ADDR
// sSpeed := false ;
48079: LD_ADDR_EXP 32
48083: PUSH
48084: LD_INT 0
48086: ST_TO_ADDR
// sEngine := false ;
48087: LD_ADDR_EXP 34
48091: PUSH
48092: LD_INT 0
48094: ST_TO_ADDR
// sSpec := false ;
48095: LD_ADDR_EXP 31
48099: PUSH
48100: LD_INT 0
48102: ST_TO_ADDR
// sLevel := false ;
48103: LD_ADDR_EXP 35
48107: PUSH
48108: LD_INT 0
48110: ST_TO_ADDR
// sArmoury := false ;
48111: LD_ADDR_EXP 36
48115: PUSH
48116: LD_INT 0
48118: ST_TO_ADDR
// sRadar := false ;
48119: LD_ADDR_EXP 37
48123: PUSH
48124: LD_INT 0
48126: ST_TO_ADDR
// sBunker := false ;
48127: LD_ADDR_EXP 38
48131: PUSH
48132: LD_INT 0
48134: ST_TO_ADDR
// sHack := false ;
48135: LD_ADDR_EXP 39
48139: PUSH
48140: LD_INT 0
48142: ST_TO_ADDR
// sFire := false ;
48143: LD_ADDR_EXP 40
48147: PUSH
48148: LD_INT 0
48150: ST_TO_ADDR
// sRefresh := false ;
48151: LD_ADDR_EXP 41
48155: PUSH
48156: LD_INT 0
48158: ST_TO_ADDR
// sExp := false ;
48159: LD_ADDR_EXP 42
48163: PUSH
48164: LD_INT 0
48166: ST_TO_ADDR
// sDepot := false ;
48167: LD_ADDR_EXP 43
48171: PUSH
48172: LD_INT 0
48174: ST_TO_ADDR
// sFlag := false ;
48175: LD_ADDR_EXP 44
48179: PUSH
48180: LD_INT 0
48182: ST_TO_ADDR
// sKamikadze := false ;
48183: LD_ADDR_EXP 52
48187: PUSH
48188: LD_INT 0
48190: ST_TO_ADDR
// sTroll := false ;
48191: LD_ADDR_EXP 53
48195: PUSH
48196: LD_INT 0
48198: ST_TO_ADDR
// sSlow := false ;
48199: LD_ADDR_EXP 54
48203: PUSH
48204: LD_INT 0
48206: ST_TO_ADDR
// sLack := false ;
48207: LD_ADDR_EXP 55
48211: PUSH
48212: LD_INT 0
48214: ST_TO_ADDR
// sTank := false ;
48215: LD_ADDR_EXP 57
48219: PUSH
48220: LD_INT 0
48222: ST_TO_ADDR
// sRemote := false ;
48223: LD_ADDR_EXP 58
48227: PUSH
48228: LD_INT 0
48230: ST_TO_ADDR
// sPowell := false ;
48231: LD_ADDR_EXP 59
48235: PUSH
48236: LD_INT 0
48238: ST_TO_ADDR
// sTeleport := false ;
48239: LD_ADDR_EXP 62
48243: PUSH
48244: LD_INT 0
48246: ST_TO_ADDR
// sOilTower := false ;
48247: LD_ADDR_EXP 64
48251: PUSH
48252: LD_INT 0
48254: ST_TO_ADDR
// sShovel := false ;
48255: LD_ADDR_EXP 65
48259: PUSH
48260: LD_INT 0
48262: ST_TO_ADDR
// sSheik := false ;
48263: LD_ADDR_EXP 66
48267: PUSH
48268: LD_INT 0
48270: ST_TO_ADDR
// sEarthquake := false ;
48271: LD_ADDR_EXP 68
48275: PUSH
48276: LD_INT 0
48278: ST_TO_ADDR
// sAI := false ;
48279: LD_ADDR_EXP 69
48283: PUSH
48284: LD_INT 0
48286: ST_TO_ADDR
// sCargo := false ;
48287: LD_ADDR_EXP 72
48291: PUSH
48292: LD_INT 0
48294: ST_TO_ADDR
// sDLaser := false ;
48295: LD_ADDR_EXP 73
48299: PUSH
48300: LD_INT 0
48302: ST_TO_ADDR
// sExchange := false ;
48303: LD_ADDR_EXP 74
48307: PUSH
48308: LD_INT 0
48310: ST_TO_ADDR
// sFac := false ;
48311: LD_ADDR_EXP 75
48315: PUSH
48316: LD_INT 0
48318: ST_TO_ADDR
// sPower := false ;
48319: LD_ADDR_EXP 76
48323: PUSH
48324: LD_INT 0
48326: ST_TO_ADDR
// sRandom := false ;
48327: LD_ADDR_EXP 77
48331: PUSH
48332: LD_INT 0
48334: ST_TO_ADDR
// sShield := false ;
48335: LD_ADDR_EXP 78
48339: PUSH
48340: LD_INT 0
48342: ST_TO_ADDR
// sTime := false ;
48343: LD_ADDR_EXP 79
48347: PUSH
48348: LD_INT 0
48350: ST_TO_ADDR
// sTools := false ;
48351: LD_ADDR_EXP 80
48355: PUSH
48356: LD_INT 0
48358: ST_TO_ADDR
// sSold := false ;
48359: LD_ADDR_EXP 45
48363: PUSH
48364: LD_INT 0
48366: ST_TO_ADDR
// sDiff := false ;
48367: LD_ADDR_EXP 46
48371: PUSH
48372: LD_INT 0
48374: ST_TO_ADDR
// sFog := false ;
48375: LD_ADDR_EXP 49
48379: PUSH
48380: LD_INT 0
48382: ST_TO_ADDR
// sReset := false ;
48383: LD_ADDR_EXP 50
48387: PUSH
48388: LD_INT 0
48390: ST_TO_ADDR
// sSun := false ;
48391: LD_ADDR_EXP 51
48395: PUSH
48396: LD_INT 0
48398: ST_TO_ADDR
// sTiger := false ;
48399: LD_ADDR_EXP 47
48403: PUSH
48404: LD_INT 0
48406: ST_TO_ADDR
// sBomb := false ;
48407: LD_ADDR_EXP 48
48411: PUSH
48412: LD_INT 0
48414: ST_TO_ADDR
// sWound := false ;
48415: LD_ADDR_EXP 56
48419: PUSH
48420: LD_INT 0
48422: ST_TO_ADDR
// sBetray := false ;
48423: LD_ADDR_EXP 60
48427: PUSH
48428: LD_INT 0
48430: ST_TO_ADDR
// sContamin := false ;
48431: LD_ADDR_EXP 61
48435: PUSH
48436: LD_INT 0
48438: ST_TO_ADDR
// sOil := false ;
48439: LD_ADDR_EXP 63
48443: PUSH
48444: LD_INT 0
48446: ST_TO_ADDR
// sStu := false ;
48447: LD_ADDR_EXP 67
48451: PUSH
48452: LD_INT 0
48454: ST_TO_ADDR
// sBazooka := false ;
48455: LD_ADDR_EXP 70
48459: PUSH
48460: LD_INT 0
48462: ST_TO_ADDR
// sMortar := false ;
48463: LD_ADDR_EXP 71
48467: PUSH
48468: LD_INT 0
48470: ST_TO_ADDR
// sRanger := false ;
48471: LD_ADDR_EXP 81
48475: PUSH
48476: LD_INT 0
48478: ST_TO_ADDR
// sComputer := false ;
48479: LD_ADDR_EXP 82
48483: PUSH
48484: LD_INT 0
48486: ST_TO_ADDR
// s30 := false ;
48487: LD_ADDR_EXP 83
48491: PUSH
48492: LD_INT 0
48494: ST_TO_ADDR
// s60 := false ;
48495: LD_ADDR_EXP 84
48499: PUSH
48500: LD_INT 0
48502: ST_TO_ADDR
// end ;
48503: LD_VAR 0 1
48507: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48508: LD_INT 0
48510: PPUSH
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
// result := [ ] ;
48517: LD_ADDR_VAR 0 2
48521: PUSH
48522: EMPTY
48523: ST_TO_ADDR
// if campaign_id = 1 then
48524: LD_OWVAR 69
48528: PUSH
48529: LD_INT 1
48531: EQUAL
48532: IFFALSE 51698
// begin case mission_number of 1 :
48534: LD_OWVAR 70
48538: PUSH
48539: LD_INT 1
48541: DOUBLE
48542: EQUAL
48543: IFTRUE 48547
48545: GO 48623
48547: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48548: LD_ADDR_VAR 0 2
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 4
48558: PUSH
48559: LD_INT 11
48561: PUSH
48562: LD_INT 12
48564: PUSH
48565: LD_INT 15
48567: PUSH
48568: LD_INT 16
48570: PUSH
48571: LD_INT 22
48573: PUSH
48574: LD_INT 23
48576: PUSH
48577: LD_INT 26
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 101
48593: PUSH
48594: LD_INT 102
48596: PUSH
48597: LD_INT 106
48599: PUSH
48600: LD_INT 116
48602: PUSH
48603: LD_INT 117
48605: PUSH
48606: LD_INT 118
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: ST_TO_ADDR
48621: GO 51696
48623: LD_INT 2
48625: DOUBLE
48626: EQUAL
48627: IFTRUE 48631
48629: GO 48715
48631: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48632: LD_ADDR_VAR 0 2
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 4
48642: PUSH
48643: LD_INT 11
48645: PUSH
48646: LD_INT 12
48648: PUSH
48649: LD_INT 15
48651: PUSH
48652: LD_INT 16
48654: PUSH
48655: LD_INT 22
48657: PUSH
48658: LD_INT 23
48660: PUSH
48661: LD_INT 26
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 101
48677: PUSH
48678: LD_INT 102
48680: PUSH
48681: LD_INT 105
48683: PUSH
48684: LD_INT 106
48686: PUSH
48687: LD_INT 108
48689: PUSH
48690: LD_INT 116
48692: PUSH
48693: LD_INT 117
48695: PUSH
48696: LD_INT 118
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: ST_TO_ADDR
48713: GO 51696
48715: LD_INT 3
48717: DOUBLE
48718: EQUAL
48719: IFTRUE 48723
48721: GO 48811
48723: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48724: LD_ADDR_VAR 0 2
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 4
48734: PUSH
48735: LD_INT 5
48737: PUSH
48738: LD_INT 11
48740: PUSH
48741: LD_INT 12
48743: PUSH
48744: LD_INT 15
48746: PUSH
48747: LD_INT 16
48749: PUSH
48750: LD_INT 22
48752: PUSH
48753: LD_INT 26
48755: PUSH
48756: LD_INT 36
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 101
48773: PUSH
48774: LD_INT 102
48776: PUSH
48777: LD_INT 105
48779: PUSH
48780: LD_INT 106
48782: PUSH
48783: LD_INT 108
48785: PUSH
48786: LD_INT 116
48788: PUSH
48789: LD_INT 117
48791: PUSH
48792: LD_INT 118
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: ST_TO_ADDR
48809: GO 51696
48811: LD_INT 4
48813: DOUBLE
48814: EQUAL
48815: IFTRUE 48819
48817: GO 48915
48819: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48820: LD_ADDR_VAR 0 2
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 4
48830: PUSH
48831: LD_INT 5
48833: PUSH
48834: LD_INT 8
48836: PUSH
48837: LD_INT 11
48839: PUSH
48840: LD_INT 12
48842: PUSH
48843: LD_INT 15
48845: PUSH
48846: LD_INT 16
48848: PUSH
48849: LD_INT 22
48851: PUSH
48852: LD_INT 23
48854: PUSH
48855: LD_INT 26
48857: PUSH
48858: LD_INT 36
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 101
48877: PUSH
48878: LD_INT 102
48880: PUSH
48881: LD_INT 105
48883: PUSH
48884: LD_INT 106
48886: PUSH
48887: LD_INT 108
48889: PUSH
48890: LD_INT 116
48892: PUSH
48893: LD_INT 117
48895: PUSH
48896: LD_INT 118
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: ST_TO_ADDR
48913: GO 51696
48915: LD_INT 5
48917: DOUBLE
48918: EQUAL
48919: IFTRUE 48923
48921: GO 49035
48923: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48924: LD_ADDR_VAR 0 2
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 4
48934: PUSH
48935: LD_INT 5
48937: PUSH
48938: LD_INT 6
48940: PUSH
48941: LD_INT 8
48943: PUSH
48944: LD_INT 11
48946: PUSH
48947: LD_INT 12
48949: PUSH
48950: LD_INT 15
48952: PUSH
48953: LD_INT 16
48955: PUSH
48956: LD_INT 22
48958: PUSH
48959: LD_INT 23
48961: PUSH
48962: LD_INT 25
48964: PUSH
48965: LD_INT 26
48967: PUSH
48968: LD_INT 36
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 101
48989: PUSH
48990: LD_INT 102
48992: PUSH
48993: LD_INT 105
48995: PUSH
48996: LD_INT 106
48998: PUSH
48999: LD_INT 108
49001: PUSH
49002: LD_INT 109
49004: PUSH
49005: LD_INT 112
49007: PUSH
49008: LD_INT 116
49010: PUSH
49011: LD_INT 117
49013: PUSH
49014: LD_INT 118
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: ST_TO_ADDR
49033: GO 51696
49035: LD_INT 6
49037: DOUBLE
49038: EQUAL
49039: IFTRUE 49043
49041: GO 49175
49043: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49044: LD_ADDR_VAR 0 2
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 4
49054: PUSH
49055: LD_INT 5
49057: PUSH
49058: LD_INT 6
49060: PUSH
49061: LD_INT 8
49063: PUSH
49064: LD_INT 11
49066: PUSH
49067: LD_INT 12
49069: PUSH
49070: LD_INT 15
49072: PUSH
49073: LD_INT 16
49075: PUSH
49076: LD_INT 20
49078: PUSH
49079: LD_INT 21
49081: PUSH
49082: LD_INT 22
49084: PUSH
49085: LD_INT 23
49087: PUSH
49088: LD_INT 25
49090: PUSH
49091: LD_INT 26
49093: PUSH
49094: LD_INT 30
49096: PUSH
49097: LD_INT 31
49099: PUSH
49100: LD_INT 32
49102: PUSH
49103: LD_INT 36
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 101
49129: PUSH
49130: LD_INT 102
49132: PUSH
49133: LD_INT 105
49135: PUSH
49136: LD_INT 106
49138: PUSH
49139: LD_INT 108
49141: PUSH
49142: LD_INT 109
49144: PUSH
49145: LD_INT 112
49147: PUSH
49148: LD_INT 116
49150: PUSH
49151: LD_INT 117
49153: PUSH
49154: LD_INT 118
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: ST_TO_ADDR
49173: GO 51696
49175: LD_INT 7
49177: DOUBLE
49178: EQUAL
49179: IFTRUE 49183
49181: GO 49295
49183: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
49184: LD_ADDR_VAR 0 2
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 4
49194: PUSH
49195: LD_INT 5
49197: PUSH
49198: LD_INT 7
49200: PUSH
49201: LD_INT 11
49203: PUSH
49204: LD_INT 12
49206: PUSH
49207: LD_INT 15
49209: PUSH
49210: LD_INT 16
49212: PUSH
49213: LD_INT 20
49215: PUSH
49216: LD_INT 21
49218: PUSH
49219: LD_INT 22
49221: PUSH
49222: LD_INT 23
49224: PUSH
49225: LD_INT 25
49227: PUSH
49228: LD_INT 26
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 101
49249: PUSH
49250: LD_INT 102
49252: PUSH
49253: LD_INT 103
49255: PUSH
49256: LD_INT 105
49258: PUSH
49259: LD_INT 106
49261: PUSH
49262: LD_INT 108
49264: PUSH
49265: LD_INT 112
49267: PUSH
49268: LD_INT 116
49270: PUSH
49271: LD_INT 117
49273: PUSH
49274: LD_INT 118
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: ST_TO_ADDR
49293: GO 51696
49295: LD_INT 8
49297: DOUBLE
49298: EQUAL
49299: IFTRUE 49303
49301: GO 49443
49303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
49304: LD_ADDR_VAR 0 2
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: LD_INT 4
49314: PUSH
49315: LD_INT 5
49317: PUSH
49318: LD_INT 6
49320: PUSH
49321: LD_INT 7
49323: PUSH
49324: LD_INT 8
49326: PUSH
49327: LD_INT 11
49329: PUSH
49330: LD_INT 12
49332: PUSH
49333: LD_INT 15
49335: PUSH
49336: LD_INT 16
49338: PUSH
49339: LD_INT 20
49341: PUSH
49342: LD_INT 21
49344: PUSH
49345: LD_INT 22
49347: PUSH
49348: LD_INT 23
49350: PUSH
49351: LD_INT 25
49353: PUSH
49354: LD_INT 26
49356: PUSH
49357: LD_INT 30
49359: PUSH
49360: LD_INT 31
49362: PUSH
49363: LD_INT 32
49365: PUSH
49366: LD_INT 36
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 101
49393: PUSH
49394: LD_INT 102
49396: PUSH
49397: LD_INT 103
49399: PUSH
49400: LD_INT 105
49402: PUSH
49403: LD_INT 106
49405: PUSH
49406: LD_INT 108
49408: PUSH
49409: LD_INT 109
49411: PUSH
49412: LD_INT 112
49414: PUSH
49415: LD_INT 116
49417: PUSH
49418: LD_INT 117
49420: PUSH
49421: LD_INT 118
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: ST_TO_ADDR
49441: GO 51696
49443: LD_INT 9
49445: DOUBLE
49446: EQUAL
49447: IFTRUE 49451
49449: GO 49599
49451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49452: LD_ADDR_VAR 0 2
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 4
49462: PUSH
49463: LD_INT 5
49465: PUSH
49466: LD_INT 6
49468: PUSH
49469: LD_INT 7
49471: PUSH
49472: LD_INT 8
49474: PUSH
49475: LD_INT 11
49477: PUSH
49478: LD_INT 12
49480: PUSH
49481: LD_INT 15
49483: PUSH
49484: LD_INT 16
49486: PUSH
49487: LD_INT 20
49489: PUSH
49490: LD_INT 21
49492: PUSH
49493: LD_INT 22
49495: PUSH
49496: LD_INT 23
49498: PUSH
49499: LD_INT 25
49501: PUSH
49502: LD_INT 26
49504: PUSH
49505: LD_INT 28
49507: PUSH
49508: LD_INT 30
49510: PUSH
49511: LD_INT 31
49513: PUSH
49514: LD_INT 32
49516: PUSH
49517: LD_INT 36
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 101
49545: PUSH
49546: LD_INT 102
49548: PUSH
49549: LD_INT 103
49551: PUSH
49552: LD_INT 105
49554: PUSH
49555: LD_INT 106
49557: PUSH
49558: LD_INT 108
49560: PUSH
49561: LD_INT 109
49563: PUSH
49564: LD_INT 112
49566: PUSH
49567: LD_INT 114
49569: PUSH
49570: LD_INT 116
49572: PUSH
49573: LD_INT 117
49575: PUSH
49576: LD_INT 118
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: ST_TO_ADDR
49597: GO 51696
49599: LD_INT 10
49601: DOUBLE
49602: EQUAL
49603: IFTRUE 49607
49605: GO 49803
49607: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49608: LD_ADDR_VAR 0 2
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: LD_INT 4
49618: PUSH
49619: LD_INT 5
49621: PUSH
49622: LD_INT 6
49624: PUSH
49625: LD_INT 7
49627: PUSH
49628: LD_INT 8
49630: PUSH
49631: LD_INT 9
49633: PUSH
49634: LD_INT 10
49636: PUSH
49637: LD_INT 11
49639: PUSH
49640: LD_INT 12
49642: PUSH
49643: LD_INT 13
49645: PUSH
49646: LD_INT 14
49648: PUSH
49649: LD_INT 15
49651: PUSH
49652: LD_INT 16
49654: PUSH
49655: LD_INT 17
49657: PUSH
49658: LD_INT 18
49660: PUSH
49661: LD_INT 19
49663: PUSH
49664: LD_INT 20
49666: PUSH
49667: LD_INT 21
49669: PUSH
49670: LD_INT 22
49672: PUSH
49673: LD_INT 23
49675: PUSH
49676: LD_INT 24
49678: PUSH
49679: LD_INT 25
49681: PUSH
49682: LD_INT 26
49684: PUSH
49685: LD_INT 28
49687: PUSH
49688: LD_INT 30
49690: PUSH
49691: LD_INT 31
49693: PUSH
49694: LD_INT 32
49696: PUSH
49697: LD_INT 36
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 101
49733: PUSH
49734: LD_INT 102
49736: PUSH
49737: LD_INT 103
49739: PUSH
49740: LD_INT 104
49742: PUSH
49743: LD_INT 105
49745: PUSH
49746: LD_INT 106
49748: PUSH
49749: LD_INT 107
49751: PUSH
49752: LD_INT 108
49754: PUSH
49755: LD_INT 109
49757: PUSH
49758: LD_INT 110
49760: PUSH
49761: LD_INT 111
49763: PUSH
49764: LD_INT 112
49766: PUSH
49767: LD_INT 114
49769: PUSH
49770: LD_INT 116
49772: PUSH
49773: LD_INT 117
49775: PUSH
49776: LD_INT 118
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: ST_TO_ADDR
49801: GO 51696
49803: LD_INT 11
49805: DOUBLE
49806: EQUAL
49807: IFTRUE 49811
49809: GO 50015
49811: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49812: LD_ADDR_VAR 0 2
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: LD_INT 4
49825: PUSH
49826: LD_INT 5
49828: PUSH
49829: LD_INT 6
49831: PUSH
49832: LD_INT 7
49834: PUSH
49835: LD_INT 8
49837: PUSH
49838: LD_INT 9
49840: PUSH
49841: LD_INT 10
49843: PUSH
49844: LD_INT 11
49846: PUSH
49847: LD_INT 12
49849: PUSH
49850: LD_INT 13
49852: PUSH
49853: LD_INT 14
49855: PUSH
49856: LD_INT 15
49858: PUSH
49859: LD_INT 16
49861: PUSH
49862: LD_INT 17
49864: PUSH
49865: LD_INT 18
49867: PUSH
49868: LD_INT 19
49870: PUSH
49871: LD_INT 20
49873: PUSH
49874: LD_INT 21
49876: PUSH
49877: LD_INT 22
49879: PUSH
49880: LD_INT 23
49882: PUSH
49883: LD_INT 24
49885: PUSH
49886: LD_INT 25
49888: PUSH
49889: LD_INT 26
49891: PUSH
49892: LD_INT 28
49894: PUSH
49895: LD_INT 30
49897: PUSH
49898: LD_INT 31
49900: PUSH
49901: LD_INT 32
49903: PUSH
49904: LD_INT 34
49906: PUSH
49907: LD_INT 36
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 101
49945: PUSH
49946: LD_INT 102
49948: PUSH
49949: LD_INT 103
49951: PUSH
49952: LD_INT 104
49954: PUSH
49955: LD_INT 105
49957: PUSH
49958: LD_INT 106
49960: PUSH
49961: LD_INT 107
49963: PUSH
49964: LD_INT 108
49966: PUSH
49967: LD_INT 109
49969: PUSH
49970: LD_INT 110
49972: PUSH
49973: LD_INT 111
49975: PUSH
49976: LD_INT 112
49978: PUSH
49979: LD_INT 114
49981: PUSH
49982: LD_INT 116
49984: PUSH
49985: LD_INT 117
49987: PUSH
49988: LD_INT 118
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: ST_TO_ADDR
50013: GO 51696
50015: LD_INT 12
50017: DOUBLE
50018: EQUAL
50019: IFTRUE 50023
50021: GO 50243
50023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50024: LD_ADDR_VAR 0 2
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: LD_INT 4
50040: PUSH
50041: LD_INT 5
50043: PUSH
50044: LD_INT 6
50046: PUSH
50047: LD_INT 7
50049: PUSH
50050: LD_INT 8
50052: PUSH
50053: LD_INT 9
50055: PUSH
50056: LD_INT 10
50058: PUSH
50059: LD_INT 11
50061: PUSH
50062: LD_INT 12
50064: PUSH
50065: LD_INT 13
50067: PUSH
50068: LD_INT 14
50070: PUSH
50071: LD_INT 15
50073: PUSH
50074: LD_INT 16
50076: PUSH
50077: LD_INT 17
50079: PUSH
50080: LD_INT 18
50082: PUSH
50083: LD_INT 19
50085: PUSH
50086: LD_INT 20
50088: PUSH
50089: LD_INT 21
50091: PUSH
50092: LD_INT 22
50094: PUSH
50095: LD_INT 23
50097: PUSH
50098: LD_INT 24
50100: PUSH
50101: LD_INT 25
50103: PUSH
50104: LD_INT 26
50106: PUSH
50107: LD_INT 27
50109: PUSH
50110: LD_INT 28
50112: PUSH
50113: LD_INT 30
50115: PUSH
50116: LD_INT 31
50118: PUSH
50119: LD_INT 32
50121: PUSH
50122: LD_INT 33
50124: PUSH
50125: LD_INT 34
50127: PUSH
50128: LD_INT 36
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 101
50169: PUSH
50170: LD_INT 102
50172: PUSH
50173: LD_INT 103
50175: PUSH
50176: LD_INT 104
50178: PUSH
50179: LD_INT 105
50181: PUSH
50182: LD_INT 106
50184: PUSH
50185: LD_INT 107
50187: PUSH
50188: LD_INT 108
50190: PUSH
50191: LD_INT 109
50193: PUSH
50194: LD_INT 110
50196: PUSH
50197: LD_INT 111
50199: PUSH
50200: LD_INT 112
50202: PUSH
50203: LD_INT 113
50205: PUSH
50206: LD_INT 114
50208: PUSH
50209: LD_INT 116
50211: PUSH
50212: LD_INT 117
50214: PUSH
50215: LD_INT 118
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: ST_TO_ADDR
50241: GO 51696
50243: LD_INT 13
50245: DOUBLE
50246: EQUAL
50247: IFTRUE 50251
50249: GO 50459
50251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
50252: LD_ADDR_VAR 0 2
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: LD_INT 4
50268: PUSH
50269: LD_INT 5
50271: PUSH
50272: LD_INT 8
50274: PUSH
50275: LD_INT 9
50277: PUSH
50278: LD_INT 10
50280: PUSH
50281: LD_INT 11
50283: PUSH
50284: LD_INT 12
50286: PUSH
50287: LD_INT 14
50289: PUSH
50290: LD_INT 15
50292: PUSH
50293: LD_INT 16
50295: PUSH
50296: LD_INT 17
50298: PUSH
50299: LD_INT 18
50301: PUSH
50302: LD_INT 19
50304: PUSH
50305: LD_INT 20
50307: PUSH
50308: LD_INT 21
50310: PUSH
50311: LD_INT 22
50313: PUSH
50314: LD_INT 23
50316: PUSH
50317: LD_INT 24
50319: PUSH
50320: LD_INT 25
50322: PUSH
50323: LD_INT 26
50325: PUSH
50326: LD_INT 27
50328: PUSH
50329: LD_INT 28
50331: PUSH
50332: LD_INT 30
50334: PUSH
50335: LD_INT 31
50337: PUSH
50338: LD_INT 32
50340: PUSH
50341: LD_INT 33
50343: PUSH
50344: LD_INT 34
50346: PUSH
50347: LD_INT 36
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 101
50385: PUSH
50386: LD_INT 102
50388: PUSH
50389: LD_INT 103
50391: PUSH
50392: LD_INT 104
50394: PUSH
50395: LD_INT 105
50397: PUSH
50398: LD_INT 106
50400: PUSH
50401: LD_INT 107
50403: PUSH
50404: LD_INT 108
50406: PUSH
50407: LD_INT 109
50409: PUSH
50410: LD_INT 110
50412: PUSH
50413: LD_INT 111
50415: PUSH
50416: LD_INT 112
50418: PUSH
50419: LD_INT 113
50421: PUSH
50422: LD_INT 114
50424: PUSH
50425: LD_INT 116
50427: PUSH
50428: LD_INT 117
50430: PUSH
50431: LD_INT 118
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: ST_TO_ADDR
50457: GO 51696
50459: LD_INT 14
50461: DOUBLE
50462: EQUAL
50463: IFTRUE 50467
50465: GO 50691
50467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50468: LD_ADDR_VAR 0 2
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: LD_INT 4
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: LD_INT 6
50490: PUSH
50491: LD_INT 7
50493: PUSH
50494: LD_INT 8
50496: PUSH
50497: LD_INT 9
50499: PUSH
50500: LD_INT 10
50502: PUSH
50503: LD_INT 11
50505: PUSH
50506: LD_INT 12
50508: PUSH
50509: LD_INT 13
50511: PUSH
50512: LD_INT 14
50514: PUSH
50515: LD_INT 15
50517: PUSH
50518: LD_INT 16
50520: PUSH
50521: LD_INT 17
50523: PUSH
50524: LD_INT 18
50526: PUSH
50527: LD_INT 19
50529: PUSH
50530: LD_INT 20
50532: PUSH
50533: LD_INT 21
50535: PUSH
50536: LD_INT 22
50538: PUSH
50539: LD_INT 23
50541: PUSH
50542: LD_INT 24
50544: PUSH
50545: LD_INT 25
50547: PUSH
50548: LD_INT 26
50550: PUSH
50551: LD_INT 27
50553: PUSH
50554: LD_INT 28
50556: PUSH
50557: LD_INT 29
50559: PUSH
50560: LD_INT 30
50562: PUSH
50563: LD_INT 31
50565: PUSH
50566: LD_INT 32
50568: PUSH
50569: LD_INT 33
50571: PUSH
50572: LD_INT 34
50574: PUSH
50575: LD_INT 36
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 101
50617: PUSH
50618: LD_INT 102
50620: PUSH
50621: LD_INT 103
50623: PUSH
50624: LD_INT 104
50626: PUSH
50627: LD_INT 105
50629: PUSH
50630: LD_INT 106
50632: PUSH
50633: LD_INT 107
50635: PUSH
50636: LD_INT 108
50638: PUSH
50639: LD_INT 109
50641: PUSH
50642: LD_INT 110
50644: PUSH
50645: LD_INT 111
50647: PUSH
50648: LD_INT 112
50650: PUSH
50651: LD_INT 113
50653: PUSH
50654: LD_INT 114
50656: PUSH
50657: LD_INT 116
50659: PUSH
50660: LD_INT 117
50662: PUSH
50663: LD_INT 118
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: ST_TO_ADDR
50689: GO 51696
50691: LD_INT 15
50693: DOUBLE
50694: EQUAL
50695: IFTRUE 50699
50697: GO 50923
50699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50700: LD_ADDR_VAR 0 2
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: LD_INT 5
50719: PUSH
50720: LD_INT 6
50722: PUSH
50723: LD_INT 7
50725: PUSH
50726: LD_INT 8
50728: PUSH
50729: LD_INT 9
50731: PUSH
50732: LD_INT 10
50734: PUSH
50735: LD_INT 11
50737: PUSH
50738: LD_INT 12
50740: PUSH
50741: LD_INT 13
50743: PUSH
50744: LD_INT 14
50746: PUSH
50747: LD_INT 15
50749: PUSH
50750: LD_INT 16
50752: PUSH
50753: LD_INT 17
50755: PUSH
50756: LD_INT 18
50758: PUSH
50759: LD_INT 19
50761: PUSH
50762: LD_INT 20
50764: PUSH
50765: LD_INT 21
50767: PUSH
50768: LD_INT 22
50770: PUSH
50771: LD_INT 23
50773: PUSH
50774: LD_INT 24
50776: PUSH
50777: LD_INT 25
50779: PUSH
50780: LD_INT 26
50782: PUSH
50783: LD_INT 27
50785: PUSH
50786: LD_INT 28
50788: PUSH
50789: LD_INT 29
50791: PUSH
50792: LD_INT 30
50794: PUSH
50795: LD_INT 31
50797: PUSH
50798: LD_INT 32
50800: PUSH
50801: LD_INT 33
50803: PUSH
50804: LD_INT 34
50806: PUSH
50807: LD_INT 36
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 101
50849: PUSH
50850: LD_INT 102
50852: PUSH
50853: LD_INT 103
50855: PUSH
50856: LD_INT 104
50858: PUSH
50859: LD_INT 105
50861: PUSH
50862: LD_INT 106
50864: PUSH
50865: LD_INT 107
50867: PUSH
50868: LD_INT 108
50870: PUSH
50871: LD_INT 109
50873: PUSH
50874: LD_INT 110
50876: PUSH
50877: LD_INT 111
50879: PUSH
50880: LD_INT 112
50882: PUSH
50883: LD_INT 113
50885: PUSH
50886: LD_INT 114
50888: PUSH
50889: LD_INT 116
50891: PUSH
50892: LD_INT 117
50894: PUSH
50895: LD_INT 118
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: ST_TO_ADDR
50921: GO 51696
50923: LD_INT 16
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50931
50929: GO 51067
50931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50932: LD_ADDR_VAR 0 2
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 4
50942: PUSH
50943: LD_INT 5
50945: PUSH
50946: LD_INT 7
50948: PUSH
50949: LD_INT 11
50951: PUSH
50952: LD_INT 12
50954: PUSH
50955: LD_INT 15
50957: PUSH
50958: LD_INT 16
50960: PUSH
50961: LD_INT 20
50963: PUSH
50964: LD_INT 21
50966: PUSH
50967: LD_INT 22
50969: PUSH
50970: LD_INT 23
50972: PUSH
50973: LD_INT 25
50975: PUSH
50976: LD_INT 26
50978: PUSH
50979: LD_INT 30
50981: PUSH
50982: LD_INT 31
50984: PUSH
50985: LD_INT 32
50987: PUSH
50988: LD_INT 33
50990: PUSH
50991: LD_INT 34
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 101
51017: PUSH
51018: LD_INT 102
51020: PUSH
51021: LD_INT 103
51023: PUSH
51024: LD_INT 106
51026: PUSH
51027: LD_INT 108
51029: PUSH
51030: LD_INT 112
51032: PUSH
51033: LD_INT 113
51035: PUSH
51036: LD_INT 114
51038: PUSH
51039: LD_INT 116
51041: PUSH
51042: LD_INT 117
51044: PUSH
51045: LD_INT 118
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: ST_TO_ADDR
51065: GO 51696
51067: LD_INT 17
51069: DOUBLE
51070: EQUAL
51071: IFTRUE 51075
51073: GO 51299
51075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51076: LD_ADDR_VAR 0 2
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 3
51089: PUSH
51090: LD_INT 4
51092: PUSH
51093: LD_INT 5
51095: PUSH
51096: LD_INT 6
51098: PUSH
51099: LD_INT 7
51101: PUSH
51102: LD_INT 8
51104: PUSH
51105: LD_INT 9
51107: PUSH
51108: LD_INT 10
51110: PUSH
51111: LD_INT 11
51113: PUSH
51114: LD_INT 12
51116: PUSH
51117: LD_INT 13
51119: PUSH
51120: LD_INT 14
51122: PUSH
51123: LD_INT 15
51125: PUSH
51126: LD_INT 16
51128: PUSH
51129: LD_INT 17
51131: PUSH
51132: LD_INT 18
51134: PUSH
51135: LD_INT 19
51137: PUSH
51138: LD_INT 20
51140: PUSH
51141: LD_INT 21
51143: PUSH
51144: LD_INT 22
51146: PUSH
51147: LD_INT 23
51149: PUSH
51150: LD_INT 24
51152: PUSH
51153: LD_INT 25
51155: PUSH
51156: LD_INT 26
51158: PUSH
51159: LD_INT 27
51161: PUSH
51162: LD_INT 28
51164: PUSH
51165: LD_INT 29
51167: PUSH
51168: LD_INT 30
51170: PUSH
51171: LD_INT 31
51173: PUSH
51174: LD_INT 32
51176: PUSH
51177: LD_INT 33
51179: PUSH
51180: LD_INT 34
51182: PUSH
51183: LD_INT 36
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 101
51225: PUSH
51226: LD_INT 102
51228: PUSH
51229: LD_INT 103
51231: PUSH
51232: LD_INT 104
51234: PUSH
51235: LD_INT 105
51237: PUSH
51238: LD_INT 106
51240: PUSH
51241: LD_INT 107
51243: PUSH
51244: LD_INT 108
51246: PUSH
51247: LD_INT 109
51249: PUSH
51250: LD_INT 110
51252: PUSH
51253: LD_INT 111
51255: PUSH
51256: LD_INT 112
51258: PUSH
51259: LD_INT 113
51261: PUSH
51262: LD_INT 114
51264: PUSH
51265: LD_INT 116
51267: PUSH
51268: LD_INT 117
51270: PUSH
51271: LD_INT 118
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: ST_TO_ADDR
51297: GO 51696
51299: LD_INT 18
51301: DOUBLE
51302: EQUAL
51303: IFTRUE 51307
51305: GO 51455
51307: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
51308: LD_ADDR_VAR 0 2
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 4
51318: PUSH
51319: LD_INT 5
51321: PUSH
51322: LD_INT 7
51324: PUSH
51325: LD_INT 11
51327: PUSH
51328: LD_INT 12
51330: PUSH
51331: LD_INT 15
51333: PUSH
51334: LD_INT 16
51336: PUSH
51337: LD_INT 20
51339: PUSH
51340: LD_INT 21
51342: PUSH
51343: LD_INT 22
51345: PUSH
51346: LD_INT 23
51348: PUSH
51349: LD_INT 25
51351: PUSH
51352: LD_INT 26
51354: PUSH
51355: LD_INT 30
51357: PUSH
51358: LD_INT 31
51360: PUSH
51361: LD_INT 32
51363: PUSH
51364: LD_INT 33
51366: PUSH
51367: LD_INT 34
51369: PUSH
51370: LD_INT 35
51372: PUSH
51373: LD_INT 36
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 101
51401: PUSH
51402: LD_INT 102
51404: PUSH
51405: LD_INT 103
51407: PUSH
51408: LD_INT 106
51410: PUSH
51411: LD_INT 108
51413: PUSH
51414: LD_INT 112
51416: PUSH
51417: LD_INT 113
51419: PUSH
51420: LD_INT 114
51422: PUSH
51423: LD_INT 115
51425: PUSH
51426: LD_INT 116
51428: PUSH
51429: LD_INT 117
51431: PUSH
51432: LD_INT 118
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: ST_TO_ADDR
51453: GO 51696
51455: LD_INT 19
51457: DOUBLE
51458: EQUAL
51459: IFTRUE 51463
51461: GO 51695
51463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51464: LD_ADDR_VAR 0 2
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: LD_INT 4
51480: PUSH
51481: LD_INT 5
51483: PUSH
51484: LD_INT 6
51486: PUSH
51487: LD_INT 7
51489: PUSH
51490: LD_INT 8
51492: PUSH
51493: LD_INT 9
51495: PUSH
51496: LD_INT 10
51498: PUSH
51499: LD_INT 11
51501: PUSH
51502: LD_INT 12
51504: PUSH
51505: LD_INT 13
51507: PUSH
51508: LD_INT 14
51510: PUSH
51511: LD_INT 15
51513: PUSH
51514: LD_INT 16
51516: PUSH
51517: LD_INT 17
51519: PUSH
51520: LD_INT 18
51522: PUSH
51523: LD_INT 19
51525: PUSH
51526: LD_INT 20
51528: PUSH
51529: LD_INT 21
51531: PUSH
51532: LD_INT 22
51534: PUSH
51535: LD_INT 23
51537: PUSH
51538: LD_INT 24
51540: PUSH
51541: LD_INT 25
51543: PUSH
51544: LD_INT 26
51546: PUSH
51547: LD_INT 27
51549: PUSH
51550: LD_INT 28
51552: PUSH
51553: LD_INT 29
51555: PUSH
51556: LD_INT 30
51558: PUSH
51559: LD_INT 31
51561: PUSH
51562: LD_INT 32
51564: PUSH
51565: LD_INT 33
51567: PUSH
51568: LD_INT 34
51570: PUSH
51571: LD_INT 35
51573: PUSH
51574: LD_INT 36
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 101
51617: PUSH
51618: LD_INT 102
51620: PUSH
51621: LD_INT 103
51623: PUSH
51624: LD_INT 104
51626: PUSH
51627: LD_INT 105
51629: PUSH
51630: LD_INT 106
51632: PUSH
51633: LD_INT 107
51635: PUSH
51636: LD_INT 108
51638: PUSH
51639: LD_INT 109
51641: PUSH
51642: LD_INT 110
51644: PUSH
51645: LD_INT 111
51647: PUSH
51648: LD_INT 112
51650: PUSH
51651: LD_INT 113
51653: PUSH
51654: LD_INT 114
51656: PUSH
51657: LD_INT 115
51659: PUSH
51660: LD_INT 116
51662: PUSH
51663: LD_INT 117
51665: PUSH
51666: LD_INT 118
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: ST_TO_ADDR
51693: GO 51696
51695: POP
// end else
51696: GO 51927
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51698: LD_ADDR_VAR 0 2
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 4
51714: PUSH
51715: LD_INT 5
51717: PUSH
51718: LD_INT 6
51720: PUSH
51721: LD_INT 7
51723: PUSH
51724: LD_INT 8
51726: PUSH
51727: LD_INT 9
51729: PUSH
51730: LD_INT 10
51732: PUSH
51733: LD_INT 11
51735: PUSH
51736: LD_INT 12
51738: PUSH
51739: LD_INT 13
51741: PUSH
51742: LD_INT 14
51744: PUSH
51745: LD_INT 15
51747: PUSH
51748: LD_INT 16
51750: PUSH
51751: LD_INT 17
51753: PUSH
51754: LD_INT 18
51756: PUSH
51757: LD_INT 19
51759: PUSH
51760: LD_INT 20
51762: PUSH
51763: LD_INT 21
51765: PUSH
51766: LD_INT 22
51768: PUSH
51769: LD_INT 23
51771: PUSH
51772: LD_INT 24
51774: PUSH
51775: LD_INT 25
51777: PUSH
51778: LD_INT 26
51780: PUSH
51781: LD_INT 27
51783: PUSH
51784: LD_INT 28
51786: PUSH
51787: LD_INT 29
51789: PUSH
51790: LD_INT 30
51792: PUSH
51793: LD_INT 31
51795: PUSH
51796: LD_INT 32
51798: PUSH
51799: LD_INT 33
51801: PUSH
51802: LD_INT 34
51804: PUSH
51805: LD_INT 35
51807: PUSH
51808: LD_INT 36
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 101
51851: PUSH
51852: LD_INT 102
51854: PUSH
51855: LD_INT 103
51857: PUSH
51858: LD_INT 104
51860: PUSH
51861: LD_INT 105
51863: PUSH
51864: LD_INT 106
51866: PUSH
51867: LD_INT 107
51869: PUSH
51870: LD_INT 108
51872: PUSH
51873: LD_INT 109
51875: PUSH
51876: LD_INT 110
51878: PUSH
51879: LD_INT 111
51881: PUSH
51882: LD_INT 112
51884: PUSH
51885: LD_INT 113
51887: PUSH
51888: LD_INT 114
51890: PUSH
51891: LD_INT 115
51893: PUSH
51894: LD_INT 116
51896: PUSH
51897: LD_INT 117
51899: PUSH
51900: LD_INT 118
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: ST_TO_ADDR
// if result then
51927: LD_VAR 0 2
51931: IFFALSE 52717
// begin normal :=  ;
51933: LD_ADDR_VAR 0 5
51937: PUSH
51938: LD_STRING 
51940: ST_TO_ADDR
// hardcore :=  ;
51941: LD_ADDR_VAR 0 6
51945: PUSH
51946: LD_STRING 
51948: ST_TO_ADDR
// active :=  ;
51949: LD_ADDR_VAR 0 7
51953: PUSH
51954: LD_STRING 
51956: ST_TO_ADDR
// for i = 1 to normalCounter do
51957: LD_ADDR_VAR 0 8
51961: PUSH
51962: DOUBLE
51963: LD_INT 1
51965: DEC
51966: ST_TO_ADDR
51967: LD_EXP 29
51971: PUSH
51972: FOR_TO
51973: IFFALSE 52074
// begin tmp := 0 ;
51975: LD_ADDR_VAR 0 3
51979: PUSH
51980: LD_STRING 0
51982: ST_TO_ADDR
// if result [ 1 ] then
51983: LD_VAR 0 2
51987: PUSH
51988: LD_INT 1
51990: ARRAY
51991: IFFALSE 52056
// if result [ 1 ] [ 1 ] = i then
51993: LD_VAR 0 2
51997: PUSH
51998: LD_INT 1
52000: ARRAY
52001: PUSH
52002: LD_INT 1
52004: ARRAY
52005: PUSH
52006: LD_VAR 0 8
52010: EQUAL
52011: IFFALSE 52056
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52013: LD_ADDR_VAR 0 2
52017: PUSH
52018: LD_VAR 0 2
52022: PPUSH
52023: LD_INT 1
52025: PPUSH
52026: LD_VAR 0 2
52030: PUSH
52031: LD_INT 1
52033: ARRAY
52034: PPUSH
52035: LD_INT 1
52037: PPUSH
52038: CALL_OW 3
52042: PPUSH
52043: CALL_OW 1
52047: ST_TO_ADDR
// tmp := 1 ;
52048: LD_ADDR_VAR 0 3
52052: PUSH
52053: LD_STRING 1
52055: ST_TO_ADDR
// end ; normal := normal & tmp ;
52056: LD_ADDR_VAR 0 5
52060: PUSH
52061: LD_VAR 0 5
52065: PUSH
52066: LD_VAR 0 3
52070: STR
52071: ST_TO_ADDR
// end ;
52072: GO 51972
52074: POP
52075: POP
// for i = 1 to hardcoreCounter do
52076: LD_ADDR_VAR 0 8
52080: PUSH
52081: DOUBLE
52082: LD_INT 1
52084: DEC
52085: ST_TO_ADDR
52086: LD_EXP 30
52090: PUSH
52091: FOR_TO
52092: IFFALSE 52197
// begin tmp := 0 ;
52094: LD_ADDR_VAR 0 3
52098: PUSH
52099: LD_STRING 0
52101: ST_TO_ADDR
// if result [ 2 ] then
52102: LD_VAR 0 2
52106: PUSH
52107: LD_INT 2
52109: ARRAY
52110: IFFALSE 52179
// if result [ 2 ] [ 1 ] = 100 + i then
52112: LD_VAR 0 2
52116: PUSH
52117: LD_INT 2
52119: ARRAY
52120: PUSH
52121: LD_INT 1
52123: ARRAY
52124: PUSH
52125: LD_INT 100
52127: PUSH
52128: LD_VAR 0 8
52132: PLUS
52133: EQUAL
52134: IFFALSE 52179
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52136: LD_ADDR_VAR 0 2
52140: PUSH
52141: LD_VAR 0 2
52145: PPUSH
52146: LD_INT 2
52148: PPUSH
52149: LD_VAR 0 2
52153: PUSH
52154: LD_INT 2
52156: ARRAY
52157: PPUSH
52158: LD_INT 1
52160: PPUSH
52161: CALL_OW 3
52165: PPUSH
52166: CALL_OW 1
52170: ST_TO_ADDR
// tmp := 1 ;
52171: LD_ADDR_VAR 0 3
52175: PUSH
52176: LD_STRING 1
52178: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
52179: LD_ADDR_VAR 0 6
52183: PUSH
52184: LD_VAR 0 6
52188: PUSH
52189: LD_VAR 0 3
52193: STR
52194: ST_TO_ADDR
// end ;
52195: GO 52091
52197: POP
52198: POP
// if isGameLoad then
52199: LD_VAR 0 1
52203: IFFALSE 52678
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
52205: LD_ADDR_VAR 0 4
52209: PUSH
52210: LD_EXP 33
52214: PUSH
52215: LD_EXP 32
52219: PUSH
52220: LD_EXP 34
52224: PUSH
52225: LD_EXP 31
52229: PUSH
52230: LD_EXP 35
52234: PUSH
52235: LD_EXP 36
52239: PUSH
52240: LD_EXP 37
52244: PUSH
52245: LD_EXP 38
52249: PUSH
52250: LD_EXP 39
52254: PUSH
52255: LD_EXP 40
52259: PUSH
52260: LD_EXP 41
52264: PUSH
52265: LD_EXP 42
52269: PUSH
52270: LD_EXP 43
52274: PUSH
52275: LD_EXP 44
52279: PUSH
52280: LD_EXP 52
52284: PUSH
52285: LD_EXP 53
52289: PUSH
52290: LD_EXP 54
52294: PUSH
52295: LD_EXP 55
52299: PUSH
52300: LD_EXP 57
52304: PUSH
52305: LD_EXP 58
52309: PUSH
52310: LD_EXP 59
52314: PUSH
52315: LD_EXP 62
52319: PUSH
52320: LD_EXP 64
52324: PUSH
52325: LD_EXP 65
52329: PUSH
52330: LD_EXP 66
52334: PUSH
52335: LD_EXP 68
52339: PUSH
52340: LD_EXP 69
52344: PUSH
52345: LD_EXP 72
52349: PUSH
52350: LD_EXP 73
52354: PUSH
52355: LD_EXP 74
52359: PUSH
52360: LD_EXP 75
52364: PUSH
52365: LD_EXP 76
52369: PUSH
52370: LD_EXP 77
52374: PUSH
52375: LD_EXP 78
52379: PUSH
52380: LD_EXP 79
52384: PUSH
52385: LD_EXP 80
52389: PUSH
52390: LD_EXP 45
52394: PUSH
52395: LD_EXP 46
52399: PUSH
52400: LD_EXP 49
52404: PUSH
52405: LD_EXP 50
52409: PUSH
52410: LD_EXP 51
52414: PUSH
52415: LD_EXP 47
52419: PUSH
52420: LD_EXP 48
52424: PUSH
52425: LD_EXP 56
52429: PUSH
52430: LD_EXP 60
52434: PUSH
52435: LD_EXP 61
52439: PUSH
52440: LD_EXP 63
52444: PUSH
52445: LD_EXP 67
52449: PUSH
52450: LD_EXP 70
52454: PUSH
52455: LD_EXP 71
52459: PUSH
52460: LD_EXP 81
52464: PUSH
52465: LD_EXP 82
52469: PUSH
52470: LD_EXP 83
52474: PUSH
52475: LD_EXP 84
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// tmp :=  ;
52536: LD_ADDR_VAR 0 3
52540: PUSH
52541: LD_STRING 
52543: ST_TO_ADDR
// for i = 1 to normalCounter do
52544: LD_ADDR_VAR 0 8
52548: PUSH
52549: DOUBLE
52550: LD_INT 1
52552: DEC
52553: ST_TO_ADDR
52554: LD_EXP 29
52558: PUSH
52559: FOR_TO
52560: IFFALSE 52596
// begin if flags [ i ] then
52562: LD_VAR 0 4
52566: PUSH
52567: LD_VAR 0 8
52571: ARRAY
52572: IFFALSE 52594
// tmp := tmp & i & ; ;
52574: LD_ADDR_VAR 0 3
52578: PUSH
52579: LD_VAR 0 3
52583: PUSH
52584: LD_VAR 0 8
52588: STR
52589: PUSH
52590: LD_STRING ;
52592: STR
52593: ST_TO_ADDR
// end ;
52594: GO 52559
52596: POP
52597: POP
// for i = 1 to hardcoreCounter do
52598: LD_ADDR_VAR 0 8
52602: PUSH
52603: DOUBLE
52604: LD_INT 1
52606: DEC
52607: ST_TO_ADDR
52608: LD_EXP 30
52612: PUSH
52613: FOR_TO
52614: IFFALSE 52660
// begin if flags [ normalCounter + i ] then
52616: LD_VAR 0 4
52620: PUSH
52621: LD_EXP 29
52625: PUSH
52626: LD_VAR 0 8
52630: PLUS
52631: ARRAY
52632: IFFALSE 52658
// tmp := tmp & ( 100 + i ) & ; ;
52634: LD_ADDR_VAR 0 3
52638: PUSH
52639: LD_VAR 0 3
52643: PUSH
52644: LD_INT 100
52646: PUSH
52647: LD_VAR 0 8
52651: PLUS
52652: STR
52653: PUSH
52654: LD_STRING ;
52656: STR
52657: ST_TO_ADDR
// end ;
52658: GO 52613
52660: POP
52661: POP
// if tmp then
52662: LD_VAR 0 3
52666: IFFALSE 52678
// active := tmp ;
52668: LD_ADDR_VAR 0 7
52672: PUSH
52673: LD_VAR 0 3
52677: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52678: LD_STRING getStreamItemsFromMission("
52680: PUSH
52681: LD_VAR 0 5
52685: STR
52686: PUSH
52687: LD_STRING ","
52689: STR
52690: PUSH
52691: LD_VAR 0 6
52695: STR
52696: PUSH
52697: LD_STRING ","
52699: STR
52700: PUSH
52701: LD_VAR 0 7
52705: STR
52706: PUSH
52707: LD_STRING ")
52709: STR
52710: PPUSH
52711: CALL_OW 559
// end else
52715: GO 52724
// ToLua ( getStreamItemsFromMission("","","") ) ;
52717: LD_STRING getStreamItemsFromMission("","","")
52719: PPUSH
52720: CALL_OW 559
// end ;
52724: LD_VAR 0 2
52728: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52729: LD_EXP 28
52733: PUSH
52734: LD_EXP 33
52738: AND
52739: IFFALSE 52863
52741: GO 52743
52743: DISABLE
52744: LD_INT 0
52746: PPUSH
52747: PPUSH
// begin enable ;
52748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52749: LD_ADDR_VAR 0 2
52753: PUSH
52754: LD_INT 22
52756: PUSH
52757: LD_OWVAR 2
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 34
52771: PUSH
52772: LD_INT 7
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 34
52781: PUSH
52782: LD_INT 45
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 34
52791: PUSH
52792: LD_INT 28
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 34
52801: PUSH
52802: LD_INT 47
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PPUSH
52820: CALL_OW 69
52824: ST_TO_ADDR
// if not tmp then
52825: LD_VAR 0 2
52829: NOT
52830: IFFALSE 52834
// exit ;
52832: GO 52863
// for i in tmp do
52834: LD_ADDR_VAR 0 1
52838: PUSH
52839: LD_VAR 0 2
52843: PUSH
52844: FOR_IN
52845: IFFALSE 52861
// begin SetLives ( i , 0 ) ;
52847: LD_VAR 0 1
52851: PPUSH
52852: LD_INT 0
52854: PPUSH
52855: CALL_OW 234
// end ;
52859: GO 52844
52861: POP
52862: POP
// end ;
52863: PPOPN 2
52865: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52866: LD_EXP 28
52870: PUSH
52871: LD_EXP 34
52875: AND
52876: IFFALSE 52960
52878: GO 52880
52880: DISABLE
52881: LD_INT 0
52883: PPUSH
52884: PPUSH
// begin enable ;
52885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52886: LD_ADDR_VAR 0 2
52890: PUSH
52891: LD_INT 22
52893: PUSH
52894: LD_OWVAR 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 32
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PPUSH
52917: CALL_OW 69
52921: ST_TO_ADDR
// if not tmp then
52922: LD_VAR 0 2
52926: NOT
52927: IFFALSE 52931
// exit ;
52929: GO 52960
// for i in tmp do
52931: LD_ADDR_VAR 0 1
52935: PUSH
52936: LD_VAR 0 2
52940: PUSH
52941: FOR_IN
52942: IFFALSE 52958
// begin SetLives ( i , 0 ) ;
52944: LD_VAR 0 1
52948: PPUSH
52949: LD_INT 0
52951: PPUSH
52952: CALL_OW 234
// end ;
52956: GO 52941
52958: POP
52959: POP
// end ;
52960: PPOPN 2
52962: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52963: LD_EXP 28
52967: PUSH
52968: LD_EXP 31
52972: AND
52973: IFFALSE 53066
52975: GO 52977
52977: DISABLE
52978: LD_INT 0
52980: PPUSH
// begin enable ;
52981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52982: LD_ADDR_VAR 0 1
52986: PUSH
52987: LD_INT 22
52989: PUSH
52990: LD_OWVAR 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 25
53004: PUSH
53005: LD_INT 5
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 25
53014: PUSH
53015: LD_INT 9
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 25
53024: PUSH
53025: LD_INT 8
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PPUSH
53042: CALL_OW 69
53046: PUSH
53047: FOR_IN
53048: IFFALSE 53064
// begin SetClass ( i , 1 ) ;
53050: LD_VAR 0 1
53054: PPUSH
53055: LD_INT 1
53057: PPUSH
53058: CALL_OW 336
// end ;
53062: GO 53047
53064: POP
53065: POP
// end ;
53066: PPOPN 1
53068: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53069: LD_EXP 28
53073: PUSH
53074: LD_EXP 32
53078: AND
53079: PUSH
53080: LD_OWVAR 65
53084: PUSH
53085: LD_INT 7
53087: LESS
53088: AND
53089: IFFALSE 53103
53091: GO 53093
53093: DISABLE
// begin enable ;
53094: ENABLE
// game_speed := 7 ;
53095: LD_ADDR_OWVAR 65
53099: PUSH
53100: LD_INT 7
53102: ST_TO_ADDR
// end ;
53103: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53104: LD_EXP 28
53108: PUSH
53109: LD_EXP 35
53113: AND
53114: IFFALSE 53316
53116: GO 53118
53118: DISABLE
53119: LD_INT 0
53121: PPUSH
53122: PPUSH
53123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: LD_INT 81
53131: PUSH
53132: LD_OWVAR 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 21
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PPUSH
53155: CALL_OW 69
53159: ST_TO_ADDR
// if not tmp then
53160: LD_VAR 0 3
53164: NOT
53165: IFFALSE 53169
// exit ;
53167: GO 53316
// if tmp > 5 then
53169: LD_VAR 0 3
53173: PUSH
53174: LD_INT 5
53176: GREATER
53177: IFFALSE 53189
// k := 5 else
53179: LD_ADDR_VAR 0 2
53183: PUSH
53184: LD_INT 5
53186: ST_TO_ADDR
53187: GO 53199
// k := tmp ;
53189: LD_ADDR_VAR 0 2
53193: PUSH
53194: LD_VAR 0 3
53198: ST_TO_ADDR
// for i := 1 to k do
53199: LD_ADDR_VAR 0 1
53203: PUSH
53204: DOUBLE
53205: LD_INT 1
53207: DEC
53208: ST_TO_ADDR
53209: LD_VAR 0 2
53213: PUSH
53214: FOR_TO
53215: IFFALSE 53314
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
53217: LD_VAR 0 3
53221: PUSH
53222: LD_VAR 0 1
53226: ARRAY
53227: PPUSH
53228: LD_VAR 0 1
53232: PUSH
53233: LD_INT 4
53235: MOD
53236: PUSH
53237: LD_INT 1
53239: PLUS
53240: PPUSH
53241: CALL_OW 259
53245: PUSH
53246: LD_INT 10
53248: LESS
53249: IFFALSE 53312
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
53251: LD_VAR 0 3
53255: PUSH
53256: LD_VAR 0 1
53260: ARRAY
53261: PPUSH
53262: LD_VAR 0 1
53266: PUSH
53267: LD_INT 4
53269: MOD
53270: PUSH
53271: LD_INT 1
53273: PLUS
53274: PPUSH
53275: LD_VAR 0 3
53279: PUSH
53280: LD_VAR 0 1
53284: ARRAY
53285: PPUSH
53286: LD_VAR 0 1
53290: PUSH
53291: LD_INT 4
53293: MOD
53294: PUSH
53295: LD_INT 1
53297: PLUS
53298: PPUSH
53299: CALL_OW 259
53303: PUSH
53304: LD_INT 1
53306: PLUS
53307: PPUSH
53308: CALL_OW 237
53312: GO 53214
53314: POP
53315: POP
// end ;
53316: PPOPN 3
53318: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
53319: LD_EXP 28
53323: PUSH
53324: LD_EXP 36
53328: AND
53329: IFFALSE 53349
53331: GO 53333
53333: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
53334: LD_INT 4
53336: PPUSH
53337: LD_OWVAR 2
53341: PPUSH
53342: LD_INT 0
53344: PPUSH
53345: CALL_OW 324
53349: END
// every 0 0$1 trigger StreamModeActive and sShovel do
53350: LD_EXP 28
53354: PUSH
53355: LD_EXP 65
53359: AND
53360: IFFALSE 53380
53362: GO 53364
53364: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
53365: LD_INT 19
53367: PPUSH
53368: LD_OWVAR 2
53372: PPUSH
53373: LD_INT 0
53375: PPUSH
53376: CALL_OW 324
53380: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53381: LD_EXP 28
53385: PUSH
53386: LD_EXP 37
53390: AND
53391: IFFALSE 53493
53393: GO 53395
53395: DISABLE
53396: LD_INT 0
53398: PPUSH
53399: PPUSH
// begin enable ;
53400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53401: LD_ADDR_VAR 0 2
53405: PUSH
53406: LD_INT 22
53408: PUSH
53409: LD_OWVAR 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 34
53423: PUSH
53424: LD_INT 11
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 34
53433: PUSH
53434: LD_INT 30
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PPUSH
53450: CALL_OW 69
53454: ST_TO_ADDR
// if not tmp then
53455: LD_VAR 0 2
53459: NOT
53460: IFFALSE 53464
// exit ;
53462: GO 53493
// for i in tmp do
53464: LD_ADDR_VAR 0 1
53468: PUSH
53469: LD_VAR 0 2
53473: PUSH
53474: FOR_IN
53475: IFFALSE 53491
// begin SetLives ( i , 0 ) ;
53477: LD_VAR 0 1
53481: PPUSH
53482: LD_INT 0
53484: PPUSH
53485: CALL_OW 234
// end ;
53489: GO 53474
53491: POP
53492: POP
// end ;
53493: PPOPN 2
53495: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53496: LD_EXP 28
53500: PUSH
53501: LD_EXP 38
53505: AND
53506: IFFALSE 53526
53508: GO 53510
53510: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53511: LD_INT 32
53513: PPUSH
53514: LD_OWVAR 2
53518: PPUSH
53519: LD_INT 0
53521: PPUSH
53522: CALL_OW 324
53526: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53527: LD_EXP 28
53531: PUSH
53532: LD_EXP 39
53536: AND
53537: IFFALSE 53718
53539: GO 53541
53541: DISABLE
53542: LD_INT 0
53544: PPUSH
53545: PPUSH
53546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53547: LD_ADDR_VAR 0 2
53551: PUSH
53552: LD_INT 22
53554: PUSH
53555: LD_OWVAR 2
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 33
53566: PUSH
53567: LD_INT 3
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PPUSH
53578: CALL_OW 69
53582: ST_TO_ADDR
// if not tmp then
53583: LD_VAR 0 2
53587: NOT
53588: IFFALSE 53592
// exit ;
53590: GO 53718
// side := 0 ;
53592: LD_ADDR_VAR 0 3
53596: PUSH
53597: LD_INT 0
53599: ST_TO_ADDR
// for i := 1 to 8 do
53600: LD_ADDR_VAR 0 1
53604: PUSH
53605: DOUBLE
53606: LD_INT 1
53608: DEC
53609: ST_TO_ADDR
53610: LD_INT 8
53612: PUSH
53613: FOR_TO
53614: IFFALSE 53662
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53616: LD_OWVAR 2
53620: PUSH
53621: LD_VAR 0 1
53625: NONEQUAL
53626: PUSH
53627: LD_OWVAR 2
53631: PPUSH
53632: LD_VAR 0 1
53636: PPUSH
53637: CALL_OW 81
53641: PUSH
53642: LD_INT 2
53644: EQUAL
53645: AND
53646: IFFALSE 53660
// begin side := i ;
53648: LD_ADDR_VAR 0 3
53652: PUSH
53653: LD_VAR 0 1
53657: ST_TO_ADDR
// break ;
53658: GO 53662
// end ;
53660: GO 53613
53662: POP
53663: POP
// if not side then
53664: LD_VAR 0 3
53668: NOT
53669: IFFALSE 53673
// exit ;
53671: GO 53718
// for i := 1 to tmp do
53673: LD_ADDR_VAR 0 1
53677: PUSH
53678: DOUBLE
53679: LD_INT 1
53681: DEC
53682: ST_TO_ADDR
53683: LD_VAR 0 2
53687: PUSH
53688: FOR_TO
53689: IFFALSE 53716
// if Prob ( 60 ) then
53691: LD_INT 60
53693: PPUSH
53694: CALL_OW 13
53698: IFFALSE 53714
// SetSide ( i , side ) ;
53700: LD_VAR 0 1
53704: PPUSH
53705: LD_VAR 0 3
53709: PPUSH
53710: CALL_OW 235
53714: GO 53688
53716: POP
53717: POP
// end ;
53718: PPOPN 3
53720: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53721: LD_EXP 28
53725: PUSH
53726: LD_EXP 41
53730: AND
53731: IFFALSE 53850
53733: GO 53735
53735: DISABLE
53736: LD_INT 0
53738: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53739: LD_ADDR_VAR 0 1
53743: PUSH
53744: LD_INT 22
53746: PUSH
53747: LD_OWVAR 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 21
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: LD_INT 23
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: LIST
53787: PPUSH
53788: CALL_OW 69
53792: PUSH
53793: FOR_IN
53794: IFFALSE 53848
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53796: LD_VAR 0 1
53800: PPUSH
53801: CALL_OW 257
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: LD_INT 4
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: IN
53824: IFFALSE 53846
// SetClass ( un , rand ( 1 , 4 ) ) ;
53826: LD_VAR 0 1
53830: PPUSH
53831: LD_INT 1
53833: PPUSH
53834: LD_INT 4
53836: PPUSH
53837: CALL_OW 12
53841: PPUSH
53842: CALL_OW 336
53846: GO 53793
53848: POP
53849: POP
// end ;
53850: PPOPN 1
53852: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53853: LD_EXP 28
53857: PUSH
53858: LD_EXP 40
53862: AND
53863: IFFALSE 53942
53865: GO 53867
53867: DISABLE
53868: LD_INT 0
53870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53871: LD_ADDR_VAR 0 1
53875: PUSH
53876: LD_INT 22
53878: PUSH
53879: LD_OWVAR 2
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 21
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PPUSH
53902: CALL_OW 69
53906: ST_TO_ADDR
// if not tmp then
53907: LD_VAR 0 1
53911: NOT
53912: IFFALSE 53916
// exit ;
53914: GO 53942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53916: LD_VAR 0 1
53920: PUSH
53921: LD_INT 1
53923: PPUSH
53924: LD_VAR 0 1
53928: PPUSH
53929: CALL_OW 12
53933: ARRAY
53934: PPUSH
53935: LD_INT 100
53937: PPUSH
53938: CALL_OW 234
// end ;
53942: PPOPN 1
53944: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53945: LD_EXP 28
53949: PUSH
53950: LD_EXP 42
53954: AND
53955: IFFALSE 54053
53957: GO 53959
53959: DISABLE
53960: LD_INT 0
53962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53963: LD_ADDR_VAR 0 1
53967: PUSH
53968: LD_INT 22
53970: PUSH
53971: LD_OWVAR 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 21
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PPUSH
53994: CALL_OW 69
53998: ST_TO_ADDR
// if not tmp then
53999: LD_VAR 0 1
54003: NOT
54004: IFFALSE 54008
// exit ;
54006: GO 54053
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54008: LD_VAR 0 1
54012: PUSH
54013: LD_INT 1
54015: PPUSH
54016: LD_VAR 0 1
54020: PPUSH
54021: CALL_OW 12
54025: ARRAY
54026: PPUSH
54027: LD_INT 1
54029: PPUSH
54030: LD_INT 4
54032: PPUSH
54033: CALL_OW 12
54037: PPUSH
54038: LD_INT 3000
54040: PPUSH
54041: LD_INT 9000
54043: PPUSH
54044: CALL_OW 12
54048: PPUSH
54049: CALL_OW 492
// end ;
54053: PPOPN 1
54055: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54056: LD_EXP 28
54060: PUSH
54061: LD_EXP 43
54065: AND
54066: IFFALSE 54086
54068: GO 54070
54070: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54071: LD_INT 1
54073: PPUSH
54074: LD_OWVAR 2
54078: PPUSH
54079: LD_INT 0
54081: PPUSH
54082: CALL_OW 324
54086: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54087: LD_EXP 28
54091: PUSH
54092: LD_EXP 44
54096: AND
54097: IFFALSE 54180
54099: GO 54101
54101: DISABLE
54102: LD_INT 0
54104: PPUSH
54105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54106: LD_ADDR_VAR 0 2
54110: PUSH
54111: LD_INT 22
54113: PUSH
54114: LD_OWVAR 2
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 21
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PPUSH
54137: CALL_OW 69
54141: ST_TO_ADDR
// if not tmp then
54142: LD_VAR 0 2
54146: NOT
54147: IFFALSE 54151
// exit ;
54149: GO 54180
// for i in tmp do
54151: LD_ADDR_VAR 0 1
54155: PUSH
54156: LD_VAR 0 2
54160: PUSH
54161: FOR_IN
54162: IFFALSE 54178
// SetBLevel ( i , 10 ) ;
54164: LD_VAR 0 1
54168: PPUSH
54169: LD_INT 10
54171: PPUSH
54172: CALL_OW 241
54176: GO 54161
54178: POP
54179: POP
// end ;
54180: PPOPN 2
54182: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
54183: LD_EXP 28
54187: PUSH
54188: LD_EXP 45
54192: AND
54193: IFFALSE 54304
54195: GO 54197
54197: DISABLE
54198: LD_INT 0
54200: PPUSH
54201: PPUSH
54202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54203: LD_ADDR_VAR 0 3
54207: PUSH
54208: LD_INT 22
54210: PUSH
54211: LD_OWVAR 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 25
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PPUSH
54234: CALL_OW 69
54238: ST_TO_ADDR
// if not tmp then
54239: LD_VAR 0 3
54243: NOT
54244: IFFALSE 54248
// exit ;
54246: GO 54304
// un := tmp [ rand ( 1 , tmp ) ] ;
54248: LD_ADDR_VAR 0 2
54252: PUSH
54253: LD_VAR 0 3
54257: PUSH
54258: LD_INT 1
54260: PPUSH
54261: LD_VAR 0 3
54265: PPUSH
54266: CALL_OW 12
54270: ARRAY
54271: ST_TO_ADDR
// if Crawls ( un ) then
54272: LD_VAR 0 2
54276: PPUSH
54277: CALL_OW 318
54281: IFFALSE 54292
// ComWalk ( un ) ;
54283: LD_VAR 0 2
54287: PPUSH
54288: CALL_OW 138
// SetClass ( un , class_sniper ) ;
54292: LD_VAR 0 2
54296: PPUSH
54297: LD_INT 5
54299: PPUSH
54300: CALL_OW 336
// end ;
54304: PPOPN 3
54306: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
54307: LD_EXP 28
54311: PUSH
54312: LD_EXP 46
54316: AND
54317: PUSH
54318: LD_OWVAR 67
54322: PUSH
54323: LD_INT 4
54325: LESS
54326: AND
54327: IFFALSE 54346
54329: GO 54331
54331: DISABLE
// begin Difficulty := Difficulty + 1 ;
54332: LD_ADDR_OWVAR 67
54336: PUSH
54337: LD_OWVAR 67
54341: PUSH
54342: LD_INT 1
54344: PLUS
54345: ST_TO_ADDR
// end ;
54346: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
54347: LD_EXP 28
54351: PUSH
54352: LD_EXP 47
54356: AND
54357: IFFALSE 54460
54359: GO 54361
54361: DISABLE
54362: LD_INT 0
54364: PPUSH
// begin for i := 1 to 5 do
54365: LD_ADDR_VAR 0 1
54369: PUSH
54370: DOUBLE
54371: LD_INT 1
54373: DEC
54374: ST_TO_ADDR
54375: LD_INT 5
54377: PUSH
54378: FOR_TO
54379: IFFALSE 54458
// begin uc_nation := nation_nature ;
54381: LD_ADDR_OWVAR 21
54385: PUSH
54386: LD_INT 0
54388: ST_TO_ADDR
// uc_side := 0 ;
54389: LD_ADDR_OWVAR 20
54393: PUSH
54394: LD_INT 0
54396: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54397: LD_ADDR_OWVAR 29
54401: PUSH
54402: LD_INT 12
54404: PUSH
54405: LD_INT 12
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: ST_TO_ADDR
// hc_agressivity := 20 ;
54412: LD_ADDR_OWVAR 35
54416: PUSH
54417: LD_INT 20
54419: ST_TO_ADDR
// hc_class := class_tiger ;
54420: LD_ADDR_OWVAR 28
54424: PUSH
54425: LD_INT 14
54427: ST_TO_ADDR
// hc_gallery :=  ;
54428: LD_ADDR_OWVAR 33
54432: PUSH
54433: LD_STRING 
54435: ST_TO_ADDR
// hc_name :=  ;
54436: LD_ADDR_OWVAR 26
54440: PUSH
54441: LD_STRING 
54443: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54444: CALL_OW 44
54448: PPUSH
54449: LD_INT 0
54451: PPUSH
54452: CALL_OW 51
// end ;
54456: GO 54378
54458: POP
54459: POP
// end ;
54460: PPOPN 1
54462: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54463: LD_EXP 28
54467: PUSH
54468: LD_EXP 48
54472: AND
54473: IFFALSE 54482
54475: GO 54477
54477: DISABLE
// StreamSibBomb ;
54478: CALL 54483 0 0
54482: END
// export function StreamSibBomb ; var i , x , y ; begin
54483: LD_INT 0
54485: PPUSH
54486: PPUSH
54487: PPUSH
54488: PPUSH
// result := false ;
54489: LD_ADDR_VAR 0 1
54493: PUSH
54494: LD_INT 0
54496: ST_TO_ADDR
// for i := 1 to 16 do
54497: LD_ADDR_VAR 0 2
54501: PUSH
54502: DOUBLE
54503: LD_INT 1
54505: DEC
54506: ST_TO_ADDR
54507: LD_INT 16
54509: PUSH
54510: FOR_TO
54511: IFFALSE 54710
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54513: LD_ADDR_VAR 0 3
54517: PUSH
54518: LD_INT 10
54520: PUSH
54521: LD_INT 20
54523: PUSH
54524: LD_INT 30
54526: PUSH
54527: LD_INT 40
54529: PUSH
54530: LD_INT 50
54532: PUSH
54533: LD_INT 60
54535: PUSH
54536: LD_INT 70
54538: PUSH
54539: LD_INT 80
54541: PUSH
54542: LD_INT 90
54544: PUSH
54545: LD_INT 100
54547: PUSH
54548: LD_INT 110
54550: PUSH
54551: LD_INT 120
54553: PUSH
54554: LD_INT 130
54556: PUSH
54557: LD_INT 140
54559: PUSH
54560: LD_INT 150
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PPUSH
54583: LD_INT 15
54585: PPUSH
54586: CALL_OW 12
54590: ARRAY
54591: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54592: LD_ADDR_VAR 0 4
54596: PUSH
54597: LD_INT 10
54599: PUSH
54600: LD_INT 20
54602: PUSH
54603: LD_INT 30
54605: PUSH
54606: LD_INT 40
54608: PUSH
54609: LD_INT 50
54611: PUSH
54612: LD_INT 60
54614: PUSH
54615: LD_INT 70
54617: PUSH
54618: LD_INT 80
54620: PUSH
54621: LD_INT 90
54623: PUSH
54624: LD_INT 100
54626: PUSH
54627: LD_INT 110
54629: PUSH
54630: LD_INT 120
54632: PUSH
54633: LD_INT 130
54635: PUSH
54636: LD_INT 140
54638: PUSH
54639: LD_INT 150
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PPUSH
54662: LD_INT 15
54664: PPUSH
54665: CALL_OW 12
54669: ARRAY
54670: ST_TO_ADDR
// if ValidHex ( x , y ) then
54671: LD_VAR 0 3
54675: PPUSH
54676: LD_VAR 0 4
54680: PPUSH
54681: CALL_OW 488
54685: IFFALSE 54708
// begin result := [ x , y ] ;
54687: LD_ADDR_VAR 0 1
54691: PUSH
54692: LD_VAR 0 3
54696: PUSH
54697: LD_VAR 0 4
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: ST_TO_ADDR
// break ;
54706: GO 54710
// end ; end ;
54708: GO 54510
54710: POP
54711: POP
// if result then
54712: LD_VAR 0 1
54716: IFFALSE 54776
// begin ToLua ( playSibBomb() ) ;
54718: LD_STRING playSibBomb()
54720: PPUSH
54721: CALL_OW 559
// wait ( 0 0$14 ) ;
54725: LD_INT 490
54727: PPUSH
54728: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54732: LD_VAR 0 1
54736: PUSH
54737: LD_INT 1
54739: ARRAY
54740: PPUSH
54741: LD_VAR 0 1
54745: PUSH
54746: LD_INT 2
54748: ARRAY
54749: PPUSH
54750: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54754: LD_VAR 0 1
54758: PUSH
54759: LD_INT 1
54761: ARRAY
54762: PPUSH
54763: LD_VAR 0 1
54767: PUSH
54768: LD_INT 2
54770: ARRAY
54771: PPUSH
54772: CALL_OW 429
// end ; end ;
54776: LD_VAR 0 1
54780: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54781: LD_EXP 28
54785: PUSH
54786: LD_EXP 50
54790: AND
54791: IFFALSE 54803
54793: GO 54795
54795: DISABLE
// YouLost (  ) ;
54796: LD_STRING 
54798: PPUSH
54799: CALL_OW 104
54803: END
// every 0 0$1 trigger StreamModeActive and sFog do
54804: LD_EXP 28
54808: PUSH
54809: LD_EXP 49
54813: AND
54814: IFFALSE 54828
54816: GO 54818
54818: DISABLE
// FogOff ( your_side ) ;
54819: LD_OWVAR 2
54823: PPUSH
54824: CALL_OW 344
54828: END
// every 0 0$1 trigger StreamModeActive and sSun do
54829: LD_EXP 28
54833: PUSH
54834: LD_EXP 51
54838: AND
54839: IFFALSE 54867
54841: GO 54843
54843: DISABLE
// begin solar_recharge_percent := 0 ;
54844: LD_ADDR_OWVAR 79
54848: PUSH
54849: LD_INT 0
54851: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54852: LD_INT 10500
54854: PPUSH
54855: CALL_OW 67
// solar_recharge_percent := 100 ;
54859: LD_ADDR_OWVAR 79
54863: PUSH
54864: LD_INT 100
54866: ST_TO_ADDR
// end ;
54867: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54868: LD_EXP 28
54872: PUSH
54873: LD_EXP 52
54877: AND
54878: IFFALSE 55117
54880: GO 54882
54882: DISABLE
54883: LD_INT 0
54885: PPUSH
54886: PPUSH
54887: PPUSH
// begin tmp := [ ] ;
54888: LD_ADDR_VAR 0 3
54892: PUSH
54893: EMPTY
54894: ST_TO_ADDR
// for i := 1 to 6 do
54895: LD_ADDR_VAR 0 1
54899: PUSH
54900: DOUBLE
54901: LD_INT 1
54903: DEC
54904: ST_TO_ADDR
54905: LD_INT 6
54907: PUSH
54908: FOR_TO
54909: IFFALSE 55014
// begin uc_nation := nation_nature ;
54911: LD_ADDR_OWVAR 21
54915: PUSH
54916: LD_INT 0
54918: ST_TO_ADDR
// uc_side := 0 ;
54919: LD_ADDR_OWVAR 20
54923: PUSH
54924: LD_INT 0
54926: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54927: LD_ADDR_OWVAR 29
54931: PUSH
54932: LD_INT 12
54934: PUSH
54935: LD_INT 12
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// hc_agressivity := 20 ;
54942: LD_ADDR_OWVAR 35
54946: PUSH
54947: LD_INT 20
54949: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54950: LD_ADDR_OWVAR 28
54954: PUSH
54955: LD_INT 17
54957: ST_TO_ADDR
// hc_gallery :=  ;
54958: LD_ADDR_OWVAR 33
54962: PUSH
54963: LD_STRING 
54965: ST_TO_ADDR
// hc_name :=  ;
54966: LD_ADDR_OWVAR 26
54970: PUSH
54971: LD_STRING 
54973: ST_TO_ADDR
// un := CreateHuman ;
54974: LD_ADDR_VAR 0 2
54978: PUSH
54979: CALL_OW 44
54983: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54984: LD_VAR 0 2
54988: PPUSH
54989: LD_INT 1
54991: PPUSH
54992: CALL_OW 51
// tmp := tmp ^ un ;
54996: LD_ADDR_VAR 0 3
55000: PUSH
55001: LD_VAR 0 3
55005: PUSH
55006: LD_VAR 0 2
55010: ADD
55011: ST_TO_ADDR
// end ;
55012: GO 54908
55014: POP
55015: POP
// repeat wait ( 0 0$1 ) ;
55016: LD_INT 35
55018: PPUSH
55019: CALL_OW 67
// for un in tmp do
55023: LD_ADDR_VAR 0 2
55027: PUSH
55028: LD_VAR 0 3
55032: PUSH
55033: FOR_IN
55034: IFFALSE 55108
// begin if IsDead ( un ) then
55036: LD_VAR 0 2
55040: PPUSH
55041: CALL_OW 301
55045: IFFALSE 55065
// begin tmp := tmp diff un ;
55047: LD_ADDR_VAR 0 3
55051: PUSH
55052: LD_VAR 0 3
55056: PUSH
55057: LD_VAR 0 2
55061: DIFF
55062: ST_TO_ADDR
// continue ;
55063: GO 55033
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55065: LD_VAR 0 2
55069: PPUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 22
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PPUSH
55087: CALL_OW 69
55091: PPUSH
55092: LD_VAR 0 2
55096: PPUSH
55097: CALL_OW 74
55101: PPUSH
55102: CALL_OW 115
// end ;
55106: GO 55033
55108: POP
55109: POP
// until not tmp ;
55110: LD_VAR 0 3
55114: NOT
55115: IFFALSE 55016
// end ;
55117: PPOPN 3
55119: END
// every 0 0$1 trigger StreamModeActive and sTroll do
55120: LD_EXP 28
55124: PUSH
55125: LD_EXP 53
55129: AND
55130: IFFALSE 55184
55132: GO 55134
55134: DISABLE
// begin ToLua ( displayTroll(); ) ;
55135: LD_STRING displayTroll();
55137: PPUSH
55138: CALL_OW 559
// wait ( 3 3$00 ) ;
55142: LD_INT 6300
55144: PPUSH
55145: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55149: LD_STRING hideTroll();
55151: PPUSH
55152: CALL_OW 559
// wait ( 1 1$00 ) ;
55156: LD_INT 2100
55158: PPUSH
55159: CALL_OW 67
// ToLua ( displayTroll(); ) ;
55163: LD_STRING displayTroll();
55165: PPUSH
55166: CALL_OW 559
// wait ( 1 1$00 ) ;
55170: LD_INT 2100
55172: PPUSH
55173: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55177: LD_STRING hideTroll();
55179: PPUSH
55180: CALL_OW 559
// end ;
55184: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
55185: LD_EXP 28
55189: PUSH
55190: LD_EXP 54
55194: AND
55195: IFFALSE 55258
55197: GO 55199
55199: DISABLE
55200: LD_INT 0
55202: PPUSH
// begin p := 0 ;
55203: LD_ADDR_VAR 0 1
55207: PUSH
55208: LD_INT 0
55210: ST_TO_ADDR
// repeat game_speed := 1 ;
55211: LD_ADDR_OWVAR 65
55215: PUSH
55216: LD_INT 1
55218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
55219: LD_INT 35
55221: PPUSH
55222: CALL_OW 67
// p := p + 1 ;
55226: LD_ADDR_VAR 0 1
55230: PUSH
55231: LD_VAR 0 1
55235: PUSH
55236: LD_INT 1
55238: PLUS
55239: ST_TO_ADDR
// until p >= 60 ;
55240: LD_VAR 0 1
55244: PUSH
55245: LD_INT 60
55247: GREATEREQUAL
55248: IFFALSE 55211
// game_speed := 4 ;
55250: LD_ADDR_OWVAR 65
55254: PUSH
55255: LD_INT 4
55257: ST_TO_ADDR
// end ;
55258: PPOPN 1
55260: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
55261: LD_EXP 28
55265: PUSH
55266: LD_EXP 55
55270: AND
55271: IFFALSE 55417
55273: GO 55275
55275: DISABLE
55276: LD_INT 0
55278: PPUSH
55279: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55280: LD_ADDR_VAR 0 1
55284: PUSH
55285: LD_INT 22
55287: PUSH
55288: LD_OWVAR 2
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 30
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 30
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PPUSH
55329: CALL_OW 69
55333: ST_TO_ADDR
// if not depot then
55334: LD_VAR 0 1
55338: NOT
55339: IFFALSE 55343
// exit ;
55341: GO 55417
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
55343: LD_ADDR_VAR 0 2
55347: PUSH
55348: LD_VAR 0 1
55352: PUSH
55353: LD_INT 1
55355: PPUSH
55356: LD_VAR 0 1
55360: PPUSH
55361: CALL_OW 12
55365: ARRAY
55366: PPUSH
55367: CALL_OW 274
55371: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55372: LD_VAR 0 2
55376: PPUSH
55377: LD_INT 1
55379: PPUSH
55380: LD_INT 0
55382: PPUSH
55383: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55387: LD_VAR 0 2
55391: PPUSH
55392: LD_INT 2
55394: PPUSH
55395: LD_INT 0
55397: PPUSH
55398: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55402: LD_VAR 0 2
55406: PPUSH
55407: LD_INT 3
55409: PPUSH
55410: LD_INT 0
55412: PPUSH
55413: CALL_OW 277
// end ;
55417: PPOPN 2
55419: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55420: LD_EXP 28
55424: PUSH
55425: LD_EXP 56
55429: AND
55430: IFFALSE 55527
55432: GO 55434
55434: DISABLE
55435: LD_INT 0
55437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55438: LD_ADDR_VAR 0 1
55442: PUSH
55443: LD_INT 22
55445: PUSH
55446: LD_OWVAR 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 21
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: LD_INT 23
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: PPUSH
55487: CALL_OW 69
55491: ST_TO_ADDR
// if not tmp then
55492: LD_VAR 0 1
55496: NOT
55497: IFFALSE 55501
// exit ;
55499: GO 55527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55501: LD_VAR 0 1
55505: PUSH
55506: LD_INT 1
55508: PPUSH
55509: LD_VAR 0 1
55513: PPUSH
55514: CALL_OW 12
55518: ARRAY
55519: PPUSH
55520: LD_INT 200
55522: PPUSH
55523: CALL_OW 234
// end ;
55527: PPOPN 1
55529: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55530: LD_EXP 28
55534: PUSH
55535: LD_EXP 57
55539: AND
55540: IFFALSE 55619
55542: GO 55544
55544: DISABLE
55545: LD_INT 0
55547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55548: LD_ADDR_VAR 0 1
55552: PUSH
55553: LD_INT 22
55555: PUSH
55556: LD_OWVAR 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 21
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PPUSH
55579: CALL_OW 69
55583: ST_TO_ADDR
// if not tmp then
55584: LD_VAR 0 1
55588: NOT
55589: IFFALSE 55593
// exit ;
55591: GO 55619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55593: LD_VAR 0 1
55597: PUSH
55598: LD_INT 1
55600: PPUSH
55601: LD_VAR 0 1
55605: PPUSH
55606: CALL_OW 12
55610: ARRAY
55611: PPUSH
55612: LD_INT 60
55614: PPUSH
55615: CALL_OW 234
// end ;
55619: PPOPN 1
55621: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55622: LD_EXP 28
55626: PUSH
55627: LD_EXP 58
55631: AND
55632: IFFALSE 55731
55634: GO 55636
55636: DISABLE
55637: LD_INT 0
55639: PPUSH
55640: PPUSH
// begin enable ;
55641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55642: LD_ADDR_VAR 0 1
55646: PUSH
55647: LD_INT 22
55649: PUSH
55650: LD_OWVAR 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 61
55661: PUSH
55662: EMPTY
55663: LIST
55664: PUSH
55665: LD_INT 33
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: PPUSH
55680: CALL_OW 69
55684: ST_TO_ADDR
// if not tmp then
55685: LD_VAR 0 1
55689: NOT
55690: IFFALSE 55694
// exit ;
55692: GO 55731
// for i in tmp do
55694: LD_ADDR_VAR 0 2
55698: PUSH
55699: LD_VAR 0 1
55703: PUSH
55704: FOR_IN
55705: IFFALSE 55729
// if IsControledBy ( i ) then
55707: LD_VAR 0 2
55711: PPUSH
55712: CALL_OW 312
55716: IFFALSE 55727
// ComUnlink ( i ) ;
55718: LD_VAR 0 2
55722: PPUSH
55723: CALL_OW 136
55727: GO 55704
55729: POP
55730: POP
// end ;
55731: PPOPN 2
55733: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55734: LD_EXP 28
55738: PUSH
55739: LD_EXP 59
55743: AND
55744: IFFALSE 55884
55746: GO 55748
55748: DISABLE
55749: LD_INT 0
55751: PPUSH
55752: PPUSH
// begin ToLua ( displayPowell(); ) ;
55753: LD_STRING displayPowell();
55755: PPUSH
55756: CALL_OW 559
// uc_side := 0 ;
55760: LD_ADDR_OWVAR 20
55764: PUSH
55765: LD_INT 0
55767: ST_TO_ADDR
// uc_nation := 2 ;
55768: LD_ADDR_OWVAR 21
55772: PUSH
55773: LD_INT 2
55775: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55776: LD_ADDR_OWVAR 37
55780: PUSH
55781: LD_INT 14
55783: ST_TO_ADDR
// vc_engine := engine_siberite ;
55784: LD_ADDR_OWVAR 39
55788: PUSH
55789: LD_INT 3
55791: ST_TO_ADDR
// vc_control := control_apeman ;
55792: LD_ADDR_OWVAR 38
55796: PUSH
55797: LD_INT 5
55799: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55800: LD_ADDR_OWVAR 40
55804: PUSH
55805: LD_INT 29
55807: ST_TO_ADDR
// un := CreateVehicle ;
55808: LD_ADDR_VAR 0 2
55812: PUSH
55813: CALL_OW 45
55817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55818: LD_VAR 0 2
55822: PPUSH
55823: LD_INT 1
55825: PPUSH
55826: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55830: LD_INT 35
55832: PPUSH
55833: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55837: LD_VAR 0 2
55841: PPUSH
55842: LD_INT 22
55844: PUSH
55845: LD_OWVAR 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PPUSH
55854: CALL_OW 69
55858: PPUSH
55859: LD_VAR 0 2
55863: PPUSH
55864: CALL_OW 74
55868: PPUSH
55869: CALL_OW 115
// until IsDead ( un ) ;
55873: LD_VAR 0 2
55877: PPUSH
55878: CALL_OW 301
55882: IFFALSE 55830
// end ;
55884: PPOPN 2
55886: END
// every 0 0$1 trigger StreamModeActive and sStu do
55887: LD_EXP 28
55891: PUSH
55892: LD_EXP 67
55896: AND
55897: IFFALSE 55913
55899: GO 55901
55901: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55902: LD_STRING displayStucuk();
55904: PPUSH
55905: CALL_OW 559
// ResetFog ;
55909: CALL_OW 335
// end ;
55913: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55914: LD_EXP 28
55918: PUSH
55919: LD_EXP 60
55923: AND
55924: IFFALSE 56065
55926: GO 55928
55928: DISABLE
55929: LD_INT 0
55931: PPUSH
55932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55933: LD_ADDR_VAR 0 2
55937: PUSH
55938: LD_INT 22
55940: PUSH
55941: LD_OWVAR 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 21
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PPUSH
55964: CALL_OW 69
55968: ST_TO_ADDR
// if not tmp then
55969: LD_VAR 0 2
55973: NOT
55974: IFFALSE 55978
// exit ;
55976: GO 56065
// un := tmp [ rand ( 1 , tmp ) ] ;
55978: LD_ADDR_VAR 0 1
55982: PUSH
55983: LD_VAR 0 2
55987: PUSH
55988: LD_INT 1
55990: PPUSH
55991: LD_VAR 0 2
55995: PPUSH
55996: CALL_OW 12
56000: ARRAY
56001: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56002: LD_VAR 0 1
56006: PPUSH
56007: LD_INT 0
56009: PPUSH
56010: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56014: LD_VAR 0 1
56018: PPUSH
56019: LD_OWVAR 3
56023: PUSH
56024: LD_VAR 0 1
56028: DIFF
56029: PPUSH
56030: LD_VAR 0 1
56034: PPUSH
56035: CALL_OW 74
56039: PPUSH
56040: CALL_OW 115
// wait ( 0 0$20 ) ;
56044: LD_INT 700
56046: PPUSH
56047: CALL_OW 67
// SetSide ( un , your_side ) ;
56051: LD_VAR 0 1
56055: PPUSH
56056: LD_OWVAR 2
56060: PPUSH
56061: CALL_OW 235
// end ;
56065: PPOPN 2
56067: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56068: LD_EXP 28
56072: PUSH
56073: LD_EXP 61
56077: AND
56078: IFFALSE 56184
56080: GO 56082
56082: DISABLE
56083: LD_INT 0
56085: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56086: LD_ADDR_VAR 0 1
56090: PUSH
56091: LD_INT 22
56093: PUSH
56094: LD_OWVAR 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 30
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 30
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PPUSH
56135: CALL_OW 69
56139: ST_TO_ADDR
// if not depot then
56140: LD_VAR 0 1
56144: NOT
56145: IFFALSE 56149
// exit ;
56147: GO 56184
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
56149: LD_VAR 0 1
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PPUSH
56158: CALL_OW 250
56162: PPUSH
56163: LD_VAR 0 1
56167: PUSH
56168: LD_INT 1
56170: ARRAY
56171: PPUSH
56172: CALL_OW 251
56176: PPUSH
56177: LD_INT 70
56179: PPUSH
56180: CALL_OW 495
// end ;
56184: PPOPN 1
56186: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
56187: LD_EXP 28
56191: PUSH
56192: LD_EXP 62
56196: AND
56197: IFFALSE 56408
56199: GO 56201
56201: DISABLE
56202: LD_INT 0
56204: PPUSH
56205: PPUSH
56206: PPUSH
56207: PPUSH
56208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56209: LD_ADDR_VAR 0 5
56213: PUSH
56214: LD_INT 22
56216: PUSH
56217: LD_OWVAR 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 21
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PPUSH
56240: CALL_OW 69
56244: ST_TO_ADDR
// if not tmp then
56245: LD_VAR 0 5
56249: NOT
56250: IFFALSE 56254
// exit ;
56252: GO 56408
// for i in tmp do
56254: LD_ADDR_VAR 0 1
56258: PUSH
56259: LD_VAR 0 5
56263: PUSH
56264: FOR_IN
56265: IFFALSE 56406
// begin d := rand ( 0 , 5 ) ;
56267: LD_ADDR_VAR 0 4
56271: PUSH
56272: LD_INT 0
56274: PPUSH
56275: LD_INT 5
56277: PPUSH
56278: CALL_OW 12
56282: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
56283: LD_ADDR_VAR 0 2
56287: PUSH
56288: LD_VAR 0 1
56292: PPUSH
56293: CALL_OW 250
56297: PPUSH
56298: LD_VAR 0 4
56302: PPUSH
56303: LD_INT 3
56305: PPUSH
56306: LD_INT 12
56308: PPUSH
56309: CALL_OW 12
56313: PPUSH
56314: CALL_OW 272
56318: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
56319: LD_ADDR_VAR 0 3
56323: PUSH
56324: LD_VAR 0 1
56328: PPUSH
56329: CALL_OW 251
56333: PPUSH
56334: LD_VAR 0 4
56338: PPUSH
56339: LD_INT 3
56341: PPUSH
56342: LD_INT 12
56344: PPUSH
56345: CALL_OW 12
56349: PPUSH
56350: CALL_OW 273
56354: ST_TO_ADDR
// if ValidHex ( x , y ) then
56355: LD_VAR 0 2
56359: PPUSH
56360: LD_VAR 0 3
56364: PPUSH
56365: CALL_OW 488
56369: IFFALSE 56404
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56371: LD_VAR 0 1
56375: PPUSH
56376: LD_VAR 0 2
56380: PPUSH
56381: LD_VAR 0 3
56385: PPUSH
56386: LD_INT 3
56388: PPUSH
56389: LD_INT 6
56391: PPUSH
56392: CALL_OW 12
56396: PPUSH
56397: LD_INT 1
56399: PPUSH
56400: CALL_OW 483
// end ;
56404: GO 56264
56406: POP
56407: POP
// end ;
56408: PPOPN 5
56410: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56411: LD_EXP 28
56415: PUSH
56416: LD_EXP 63
56420: AND
56421: IFFALSE 56515
56423: GO 56425
56425: DISABLE
56426: LD_INT 0
56428: PPUSH
56429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56430: LD_ADDR_VAR 0 2
56434: PUSH
56435: LD_INT 22
56437: PUSH
56438: LD_OWVAR 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 32
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 21
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: PPUSH
56472: CALL_OW 69
56476: ST_TO_ADDR
// if not tmp then
56477: LD_VAR 0 2
56481: NOT
56482: IFFALSE 56486
// exit ;
56484: GO 56515
// for i in tmp do
56486: LD_ADDR_VAR 0 1
56490: PUSH
56491: LD_VAR 0 2
56495: PUSH
56496: FOR_IN
56497: IFFALSE 56513
// SetFuel ( i , 0 ) ;
56499: LD_VAR 0 1
56503: PPUSH
56504: LD_INT 0
56506: PPUSH
56507: CALL_OW 240
56511: GO 56496
56513: POP
56514: POP
// end ;
56515: PPOPN 2
56517: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56518: LD_EXP 28
56522: PUSH
56523: LD_EXP 64
56527: AND
56528: IFFALSE 56594
56530: GO 56532
56532: DISABLE
56533: LD_INT 0
56535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56536: LD_ADDR_VAR 0 1
56540: PUSH
56541: LD_INT 22
56543: PUSH
56544: LD_OWVAR 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 30
56555: PUSH
56556: LD_INT 29
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PPUSH
56567: CALL_OW 69
56571: ST_TO_ADDR
// if not tmp then
56572: LD_VAR 0 1
56576: NOT
56577: IFFALSE 56581
// exit ;
56579: GO 56594
// DestroyUnit ( tmp [ 1 ] ) ;
56581: LD_VAR 0 1
56585: PUSH
56586: LD_INT 1
56588: ARRAY
56589: PPUSH
56590: CALL_OW 65
// end ;
56594: PPOPN 1
56596: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56597: LD_EXP 28
56601: PUSH
56602: LD_EXP 66
56606: AND
56607: IFFALSE 56736
56609: GO 56611
56611: DISABLE
56612: LD_INT 0
56614: PPUSH
// begin uc_side := 0 ;
56615: LD_ADDR_OWVAR 20
56619: PUSH
56620: LD_INT 0
56622: ST_TO_ADDR
// uc_nation := nation_arabian ;
56623: LD_ADDR_OWVAR 21
56627: PUSH
56628: LD_INT 2
56630: ST_TO_ADDR
// hc_gallery :=  ;
56631: LD_ADDR_OWVAR 33
56635: PUSH
56636: LD_STRING 
56638: ST_TO_ADDR
// hc_name :=  ;
56639: LD_ADDR_OWVAR 26
56643: PUSH
56644: LD_STRING 
56646: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56647: LD_INT 1
56649: PPUSH
56650: LD_INT 11
56652: PPUSH
56653: LD_INT 10
56655: PPUSH
56656: CALL_OW 380
// un := CreateHuman ;
56660: LD_ADDR_VAR 0 1
56664: PUSH
56665: CALL_OW 44
56669: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56670: LD_VAR 0 1
56674: PPUSH
56675: LD_INT 1
56677: PPUSH
56678: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56682: LD_INT 35
56684: PPUSH
56685: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56689: LD_VAR 0 1
56693: PPUSH
56694: LD_INT 22
56696: PUSH
56697: LD_OWVAR 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PPUSH
56706: CALL_OW 69
56710: PPUSH
56711: LD_VAR 0 1
56715: PPUSH
56716: CALL_OW 74
56720: PPUSH
56721: CALL_OW 115
// until IsDead ( un ) ;
56725: LD_VAR 0 1
56729: PPUSH
56730: CALL_OW 301
56734: IFFALSE 56682
// end ;
56736: PPOPN 1
56738: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56739: LD_EXP 28
56743: PUSH
56744: LD_EXP 68
56748: AND
56749: IFFALSE 56761
56751: GO 56753
56753: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56754: LD_STRING earthquake(getX(game), 0, 32)
56756: PPUSH
56757: CALL_OW 559
56761: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56762: LD_EXP 28
56766: PUSH
56767: LD_EXP 69
56771: AND
56772: IFFALSE 56863
56774: GO 56776
56776: DISABLE
56777: LD_INT 0
56779: PPUSH
// begin enable ;
56780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56781: LD_ADDR_VAR 0 1
56785: PUSH
56786: LD_INT 22
56788: PUSH
56789: LD_OWVAR 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 21
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 33
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: PPUSH
56823: CALL_OW 69
56827: ST_TO_ADDR
// if not tmp then
56828: LD_VAR 0 1
56832: NOT
56833: IFFALSE 56837
// exit ;
56835: GO 56863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56837: LD_VAR 0 1
56841: PUSH
56842: LD_INT 1
56844: PPUSH
56845: LD_VAR 0 1
56849: PPUSH
56850: CALL_OW 12
56854: ARRAY
56855: PPUSH
56856: LD_INT 1
56858: PPUSH
56859: CALL_OW 234
// end ;
56863: PPOPN 1
56865: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56866: LD_EXP 28
56870: PUSH
56871: LD_EXP 70
56875: AND
56876: IFFALSE 57017
56878: GO 56880
56880: DISABLE
56881: LD_INT 0
56883: PPUSH
56884: PPUSH
56885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56886: LD_ADDR_VAR 0 3
56890: PUSH
56891: LD_INT 22
56893: PUSH
56894: LD_OWVAR 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 25
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PPUSH
56917: CALL_OW 69
56921: ST_TO_ADDR
// if not tmp then
56922: LD_VAR 0 3
56926: NOT
56927: IFFALSE 56931
// exit ;
56929: GO 57017
// un := tmp [ rand ( 1 , tmp ) ] ;
56931: LD_ADDR_VAR 0 2
56935: PUSH
56936: LD_VAR 0 3
56940: PUSH
56941: LD_INT 1
56943: PPUSH
56944: LD_VAR 0 3
56948: PPUSH
56949: CALL_OW 12
56953: ARRAY
56954: ST_TO_ADDR
// if Crawls ( un ) then
56955: LD_VAR 0 2
56959: PPUSH
56960: CALL_OW 318
56964: IFFALSE 56975
// ComWalk ( un ) ;
56966: LD_VAR 0 2
56970: PPUSH
56971: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56975: LD_VAR 0 2
56979: PPUSH
56980: LD_INT 9
56982: PPUSH
56983: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56987: LD_INT 28
56989: PPUSH
56990: LD_OWVAR 2
56994: PPUSH
56995: LD_INT 2
56997: PPUSH
56998: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57002: LD_INT 29
57004: PPUSH
57005: LD_OWVAR 2
57009: PPUSH
57010: LD_INT 2
57012: PPUSH
57013: CALL_OW 322
// end ;
57017: PPOPN 3
57019: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57020: LD_EXP 28
57024: PUSH
57025: LD_EXP 71
57029: AND
57030: IFFALSE 57141
57032: GO 57034
57034: DISABLE
57035: LD_INT 0
57037: PPUSH
57038: PPUSH
57039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57040: LD_ADDR_VAR 0 3
57044: PUSH
57045: LD_INT 22
57047: PUSH
57048: LD_OWVAR 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 25
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PPUSH
57071: CALL_OW 69
57075: ST_TO_ADDR
// if not tmp then
57076: LD_VAR 0 3
57080: NOT
57081: IFFALSE 57085
// exit ;
57083: GO 57141
// un := tmp [ rand ( 1 , tmp ) ] ;
57085: LD_ADDR_VAR 0 2
57089: PUSH
57090: LD_VAR 0 3
57094: PUSH
57095: LD_INT 1
57097: PPUSH
57098: LD_VAR 0 3
57102: PPUSH
57103: CALL_OW 12
57107: ARRAY
57108: ST_TO_ADDR
// if Crawls ( un ) then
57109: LD_VAR 0 2
57113: PPUSH
57114: CALL_OW 318
57118: IFFALSE 57129
// ComWalk ( un ) ;
57120: LD_VAR 0 2
57124: PPUSH
57125: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57129: LD_VAR 0 2
57133: PPUSH
57134: LD_INT 8
57136: PPUSH
57137: CALL_OW 336
// end ;
57141: PPOPN 3
57143: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
57144: LD_EXP 28
57148: PUSH
57149: LD_EXP 72
57153: AND
57154: IFFALSE 57298
57156: GO 57158
57158: DISABLE
57159: LD_INT 0
57161: PPUSH
57162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
57163: LD_ADDR_VAR 0 2
57167: PUSH
57168: LD_INT 22
57170: PUSH
57171: LD_OWVAR 2
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 21
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: LD_INT 34
57195: PUSH
57196: LD_INT 12
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 34
57205: PUSH
57206: LD_INT 51
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 34
57215: PUSH
57216: LD_INT 32
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: PPUSH
57234: CALL_OW 69
57238: ST_TO_ADDR
// if not tmp then
57239: LD_VAR 0 2
57243: NOT
57244: IFFALSE 57248
// exit ;
57246: GO 57298
// for i in tmp do
57248: LD_ADDR_VAR 0 1
57252: PUSH
57253: LD_VAR 0 2
57257: PUSH
57258: FOR_IN
57259: IFFALSE 57296
// if GetCargo ( i , mat_artifact ) = 0 then
57261: LD_VAR 0 1
57265: PPUSH
57266: LD_INT 4
57268: PPUSH
57269: CALL_OW 289
57273: PUSH
57274: LD_INT 0
57276: EQUAL
57277: IFFALSE 57294
// SetCargo ( i , mat_siberit , 100 ) ;
57279: LD_VAR 0 1
57283: PPUSH
57284: LD_INT 3
57286: PPUSH
57287: LD_INT 100
57289: PPUSH
57290: CALL_OW 290
57294: GO 57258
57296: POP
57297: POP
// end ;
57298: PPOPN 2
57300: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
57301: LD_EXP 28
57305: PUSH
57306: LD_EXP 73
57310: AND
57311: IFFALSE 57494
57313: GO 57315
57315: DISABLE
57316: LD_INT 0
57318: PPUSH
57319: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57320: LD_ADDR_VAR 0 2
57324: PUSH
57325: LD_INT 22
57327: PUSH
57328: LD_OWVAR 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PPUSH
57337: CALL_OW 69
57341: ST_TO_ADDR
// if not tmp then
57342: LD_VAR 0 2
57346: NOT
57347: IFFALSE 57351
// exit ;
57349: GO 57494
// for i := 1 to 2 do
57351: LD_ADDR_VAR 0 1
57355: PUSH
57356: DOUBLE
57357: LD_INT 1
57359: DEC
57360: ST_TO_ADDR
57361: LD_INT 2
57363: PUSH
57364: FOR_TO
57365: IFFALSE 57492
// begin uc_side := your_side ;
57367: LD_ADDR_OWVAR 20
57371: PUSH
57372: LD_OWVAR 2
57376: ST_TO_ADDR
// uc_nation := nation_american ;
57377: LD_ADDR_OWVAR 21
57381: PUSH
57382: LD_INT 1
57384: ST_TO_ADDR
// vc_chassis := us_morphling ;
57385: LD_ADDR_OWVAR 37
57389: PUSH
57390: LD_INT 5
57392: ST_TO_ADDR
// vc_engine := engine_siberite ;
57393: LD_ADDR_OWVAR 39
57397: PUSH
57398: LD_INT 3
57400: ST_TO_ADDR
// vc_control := control_computer ;
57401: LD_ADDR_OWVAR 38
57405: PUSH
57406: LD_INT 3
57408: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57409: LD_ADDR_OWVAR 40
57413: PUSH
57414: LD_INT 10
57416: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57417: LD_VAR 0 2
57421: PUSH
57422: LD_INT 1
57424: ARRAY
57425: PPUSH
57426: CALL_OW 310
57430: NOT
57431: IFFALSE 57478
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57433: CALL_OW 45
57437: PPUSH
57438: LD_VAR 0 2
57442: PUSH
57443: LD_INT 1
57445: ARRAY
57446: PPUSH
57447: CALL_OW 250
57451: PPUSH
57452: LD_VAR 0 2
57456: PUSH
57457: LD_INT 1
57459: ARRAY
57460: PPUSH
57461: CALL_OW 251
57465: PPUSH
57466: LD_INT 12
57468: PPUSH
57469: LD_INT 1
57471: PPUSH
57472: CALL_OW 50
57476: GO 57490
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57478: CALL_OW 45
57482: PPUSH
57483: LD_INT 1
57485: PPUSH
57486: CALL_OW 51
// end ;
57490: GO 57364
57492: POP
57493: POP
// end ;
57494: PPOPN 2
57496: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57497: LD_EXP 28
57501: PUSH
57502: LD_EXP 74
57506: AND
57507: IFFALSE 57729
57509: GO 57511
57511: DISABLE
57512: LD_INT 0
57514: PPUSH
57515: PPUSH
57516: PPUSH
57517: PPUSH
57518: PPUSH
57519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57520: LD_ADDR_VAR 0 6
57524: PUSH
57525: LD_INT 22
57527: PUSH
57528: LD_OWVAR 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 21
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: LD_INT 23
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: PPUSH
57569: CALL_OW 69
57573: ST_TO_ADDR
// if not tmp then
57574: LD_VAR 0 6
57578: NOT
57579: IFFALSE 57583
// exit ;
57581: GO 57729
// s1 := rand ( 1 , 4 ) ;
57583: LD_ADDR_VAR 0 2
57587: PUSH
57588: LD_INT 1
57590: PPUSH
57591: LD_INT 4
57593: PPUSH
57594: CALL_OW 12
57598: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57599: LD_ADDR_VAR 0 4
57603: PUSH
57604: LD_VAR 0 6
57608: PUSH
57609: LD_INT 1
57611: ARRAY
57612: PPUSH
57613: LD_VAR 0 2
57617: PPUSH
57618: CALL_OW 259
57622: ST_TO_ADDR
// if s1 = 1 then
57623: LD_VAR 0 2
57627: PUSH
57628: LD_INT 1
57630: EQUAL
57631: IFFALSE 57651
// s2 := rand ( 2 , 4 ) else
57633: LD_ADDR_VAR 0 3
57637: PUSH
57638: LD_INT 2
57640: PPUSH
57641: LD_INT 4
57643: PPUSH
57644: CALL_OW 12
57648: ST_TO_ADDR
57649: GO 57659
// s2 := 1 ;
57651: LD_ADDR_VAR 0 3
57655: PUSH
57656: LD_INT 1
57658: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57659: LD_ADDR_VAR 0 5
57663: PUSH
57664: LD_VAR 0 6
57668: PUSH
57669: LD_INT 1
57671: ARRAY
57672: PPUSH
57673: LD_VAR 0 3
57677: PPUSH
57678: CALL_OW 259
57682: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57683: LD_VAR 0 6
57687: PUSH
57688: LD_INT 1
57690: ARRAY
57691: PPUSH
57692: LD_VAR 0 2
57696: PPUSH
57697: LD_VAR 0 5
57701: PPUSH
57702: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57706: LD_VAR 0 6
57710: PUSH
57711: LD_INT 1
57713: ARRAY
57714: PPUSH
57715: LD_VAR 0 3
57719: PPUSH
57720: LD_VAR 0 4
57724: PPUSH
57725: CALL_OW 237
// end ;
57729: PPOPN 6
57731: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57732: LD_EXP 28
57736: PUSH
57737: LD_EXP 75
57741: AND
57742: IFFALSE 57821
57744: GO 57746
57746: DISABLE
57747: LD_INT 0
57749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57750: LD_ADDR_VAR 0 1
57754: PUSH
57755: LD_INT 22
57757: PUSH
57758: LD_OWVAR 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 30
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PPUSH
57781: CALL_OW 69
57785: ST_TO_ADDR
// if not tmp then
57786: LD_VAR 0 1
57790: NOT
57791: IFFALSE 57795
// exit ;
57793: GO 57821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57795: LD_VAR 0 1
57799: PUSH
57800: LD_INT 1
57802: PPUSH
57803: LD_VAR 0 1
57807: PPUSH
57808: CALL_OW 12
57812: ARRAY
57813: PPUSH
57814: LD_INT 1
57816: PPUSH
57817: CALL_OW 234
// end ;
57821: PPOPN 1
57823: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57824: LD_EXP 28
57828: PUSH
57829: LD_EXP 76
57833: AND
57834: IFFALSE 57946
57836: GO 57838
57838: DISABLE
57839: LD_INT 0
57841: PPUSH
57842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57843: LD_ADDR_VAR 0 2
57847: PUSH
57848: LD_INT 22
57850: PUSH
57851: LD_OWVAR 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 30
57865: PUSH
57866: LD_INT 27
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 30
57875: PUSH
57876: LD_INT 26
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 30
57885: PUSH
57886: LD_INT 28
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PPUSH
57903: CALL_OW 69
57907: ST_TO_ADDR
// if not tmp then
57908: LD_VAR 0 2
57912: NOT
57913: IFFALSE 57917
// exit ;
57915: GO 57946
// for i in tmp do
57917: LD_ADDR_VAR 0 1
57921: PUSH
57922: LD_VAR 0 2
57926: PUSH
57927: FOR_IN
57928: IFFALSE 57944
// SetLives ( i , 1 ) ;
57930: LD_VAR 0 1
57934: PPUSH
57935: LD_INT 1
57937: PPUSH
57938: CALL_OW 234
57942: GO 57927
57944: POP
57945: POP
// end ;
57946: PPOPN 2
57948: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57949: LD_EXP 28
57953: PUSH
57954: LD_EXP 77
57958: AND
57959: IFFALSE 58246
57961: GO 57963
57963: DISABLE
57964: LD_INT 0
57966: PPUSH
57967: PPUSH
57968: PPUSH
// begin i := rand ( 1 , 7 ) ;
57969: LD_ADDR_VAR 0 1
57973: PUSH
57974: LD_INT 1
57976: PPUSH
57977: LD_INT 7
57979: PPUSH
57980: CALL_OW 12
57984: ST_TO_ADDR
// case i of 1 :
57985: LD_VAR 0 1
57989: PUSH
57990: LD_INT 1
57992: DOUBLE
57993: EQUAL
57994: IFTRUE 57998
57996: GO 58008
57998: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57999: LD_STRING earthquake(getX(game), 0, 32)
58001: PPUSH
58002: CALL_OW 559
58006: GO 58246
58008: LD_INT 2
58010: DOUBLE
58011: EQUAL
58012: IFTRUE 58016
58014: GO 58030
58016: POP
// begin ToLua ( displayStucuk(); ) ;
58017: LD_STRING displayStucuk();
58019: PPUSH
58020: CALL_OW 559
// ResetFog ;
58024: CALL_OW 335
// end ; 3 :
58028: GO 58246
58030: LD_INT 3
58032: DOUBLE
58033: EQUAL
58034: IFTRUE 58038
58036: GO 58142
58038: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58039: LD_ADDR_VAR 0 2
58043: PUSH
58044: LD_INT 22
58046: PUSH
58047: LD_OWVAR 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 25
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PPUSH
58070: CALL_OW 69
58074: ST_TO_ADDR
// if not tmp then
58075: LD_VAR 0 2
58079: NOT
58080: IFFALSE 58084
// exit ;
58082: GO 58246
// un := tmp [ rand ( 1 , tmp ) ] ;
58084: LD_ADDR_VAR 0 3
58088: PUSH
58089: LD_VAR 0 2
58093: PUSH
58094: LD_INT 1
58096: PPUSH
58097: LD_VAR 0 2
58101: PPUSH
58102: CALL_OW 12
58106: ARRAY
58107: ST_TO_ADDR
// if Crawls ( un ) then
58108: LD_VAR 0 3
58112: PPUSH
58113: CALL_OW 318
58117: IFFALSE 58128
// ComWalk ( un ) ;
58119: LD_VAR 0 3
58123: PPUSH
58124: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58128: LD_VAR 0 3
58132: PPUSH
58133: LD_INT 8
58135: PPUSH
58136: CALL_OW 336
// end ; 4 :
58140: GO 58246
58142: LD_INT 4
58144: DOUBLE
58145: EQUAL
58146: IFTRUE 58150
58148: GO 58224
58150: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58151: LD_ADDR_VAR 0 2
58155: PUSH
58156: LD_INT 22
58158: PUSH
58159: LD_OWVAR 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 30
58170: PUSH
58171: LD_INT 29
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PPUSH
58182: CALL_OW 69
58186: ST_TO_ADDR
// if not tmp then
58187: LD_VAR 0 2
58191: NOT
58192: IFFALSE 58196
// exit ;
58194: GO 58246
// CenterNowOnUnits ( tmp [ 1 ] ) ;
58196: LD_VAR 0 2
58200: PUSH
58201: LD_INT 1
58203: ARRAY
58204: PPUSH
58205: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
58209: LD_VAR 0 2
58213: PUSH
58214: LD_INT 1
58216: ARRAY
58217: PPUSH
58218: CALL_OW 65
// end ; 5 .. 7 :
58222: GO 58246
58224: LD_INT 5
58226: DOUBLE
58227: GREATEREQUAL
58228: IFFALSE 58236
58230: LD_INT 7
58232: DOUBLE
58233: LESSEQUAL
58234: IFTRUE 58238
58236: GO 58245
58238: POP
// StreamSibBomb ; end ;
58239: CALL 54483 0 0
58243: GO 58246
58245: POP
// end ;
58246: PPOPN 3
58248: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
58249: LD_EXP 28
58253: PUSH
58254: LD_EXP 78
58258: AND
58259: IFFALSE 58415
58261: GO 58263
58263: DISABLE
58264: LD_INT 0
58266: PPUSH
58267: PPUSH
58268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
58269: LD_ADDR_VAR 0 2
58273: PUSH
58274: LD_INT 81
58276: PUSH
58277: LD_OWVAR 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 21
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 21
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PPUSH
58318: CALL_OW 69
58322: ST_TO_ADDR
// if not tmp then
58323: LD_VAR 0 2
58327: NOT
58328: IFFALSE 58332
// exit ;
58330: GO 58415
// p := 0 ;
58332: LD_ADDR_VAR 0 3
58336: PUSH
58337: LD_INT 0
58339: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58340: LD_INT 35
58342: PPUSH
58343: CALL_OW 67
// p := p + 1 ;
58347: LD_ADDR_VAR 0 3
58351: PUSH
58352: LD_VAR 0 3
58356: PUSH
58357: LD_INT 1
58359: PLUS
58360: ST_TO_ADDR
// for i in tmp do
58361: LD_ADDR_VAR 0 1
58365: PUSH
58366: LD_VAR 0 2
58370: PUSH
58371: FOR_IN
58372: IFFALSE 58403
// if GetLives ( i ) < 1000 then
58374: LD_VAR 0 1
58378: PPUSH
58379: CALL_OW 256
58383: PUSH
58384: LD_INT 1000
58386: LESS
58387: IFFALSE 58401
// SetLives ( i , 1000 ) ;
58389: LD_VAR 0 1
58393: PPUSH
58394: LD_INT 1000
58396: PPUSH
58397: CALL_OW 234
58401: GO 58371
58403: POP
58404: POP
// until p > 20 ;
58405: LD_VAR 0 3
58409: PUSH
58410: LD_INT 20
58412: GREATER
58413: IFFALSE 58340
// end ;
58415: PPOPN 3
58417: END
// every 0 0$1 trigger StreamModeActive and sTime do
58418: LD_EXP 28
58422: PUSH
58423: LD_EXP 79
58427: AND
58428: IFFALSE 58463
58430: GO 58432
58432: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58433: LD_INT 28
58435: PPUSH
58436: LD_OWVAR 2
58440: PPUSH
58441: LD_INT 2
58443: PPUSH
58444: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58448: LD_INT 30
58450: PPUSH
58451: LD_OWVAR 2
58455: PPUSH
58456: LD_INT 2
58458: PPUSH
58459: CALL_OW 322
// end ;
58463: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58464: LD_EXP 28
58468: PUSH
58469: LD_EXP 80
58473: AND
58474: IFFALSE 58595
58476: GO 58478
58478: DISABLE
58479: LD_INT 0
58481: PPUSH
58482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58483: LD_ADDR_VAR 0 2
58487: PUSH
58488: LD_INT 22
58490: PUSH
58491: LD_OWVAR 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 21
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: LD_INT 23
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: PPUSH
58532: CALL_OW 69
58536: ST_TO_ADDR
// if not tmp then
58537: LD_VAR 0 2
58541: NOT
58542: IFFALSE 58546
// exit ;
58544: GO 58595
// for i in tmp do
58546: LD_ADDR_VAR 0 1
58550: PUSH
58551: LD_VAR 0 2
58555: PUSH
58556: FOR_IN
58557: IFFALSE 58593
// begin if Crawls ( i ) then
58559: LD_VAR 0 1
58563: PPUSH
58564: CALL_OW 318
58568: IFFALSE 58579
// ComWalk ( i ) ;
58570: LD_VAR 0 1
58574: PPUSH
58575: CALL_OW 138
// SetClass ( i , 2 ) ;
58579: LD_VAR 0 1
58583: PPUSH
58584: LD_INT 2
58586: PPUSH
58587: CALL_OW 336
// end ;
58591: GO 58556
58593: POP
58594: POP
// end ;
58595: PPOPN 2
58597: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58598: LD_EXP 28
58602: PUSH
58603: LD_EXP 81
58607: AND
58608: IFFALSE 58896
58610: GO 58612
58612: DISABLE
58613: LD_INT 0
58615: PPUSH
58616: PPUSH
58617: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58618: LD_OWVAR 2
58622: PPUSH
58623: LD_INT 9
58625: PPUSH
58626: LD_INT 1
58628: PPUSH
58629: LD_INT 1
58631: PPUSH
58632: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58636: LD_INT 9
58638: PPUSH
58639: LD_OWVAR 2
58643: PPUSH
58644: CALL_OW 343
// uc_side := 9 ;
58648: LD_ADDR_OWVAR 20
58652: PUSH
58653: LD_INT 9
58655: ST_TO_ADDR
// uc_nation := 2 ;
58656: LD_ADDR_OWVAR 21
58660: PUSH
58661: LD_INT 2
58663: ST_TO_ADDR
// hc_name := Dark Warrior ;
58664: LD_ADDR_OWVAR 26
58668: PUSH
58669: LD_STRING Dark Warrior
58671: ST_TO_ADDR
// hc_gallery :=  ;
58672: LD_ADDR_OWVAR 33
58676: PUSH
58677: LD_STRING 
58679: ST_TO_ADDR
// hc_noskilllimit := true ;
58680: LD_ADDR_OWVAR 76
58684: PUSH
58685: LD_INT 1
58687: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58688: LD_ADDR_OWVAR 31
58692: PUSH
58693: LD_INT 30
58695: PUSH
58696: LD_INT 30
58698: PUSH
58699: LD_INT 30
58701: PUSH
58702: LD_INT 30
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: ST_TO_ADDR
// un := CreateHuman ;
58711: LD_ADDR_VAR 0 3
58715: PUSH
58716: CALL_OW 44
58720: ST_TO_ADDR
// hc_noskilllimit := false ;
58721: LD_ADDR_OWVAR 76
58725: PUSH
58726: LD_INT 0
58728: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58729: LD_VAR 0 3
58733: PPUSH
58734: LD_INT 1
58736: PPUSH
58737: CALL_OW 51
// ToLua ( playRanger() ) ;
58741: LD_STRING playRanger()
58743: PPUSH
58744: CALL_OW 559
// p := 0 ;
58748: LD_ADDR_VAR 0 2
58752: PUSH
58753: LD_INT 0
58755: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58756: LD_INT 35
58758: PPUSH
58759: CALL_OW 67
// p := p + 1 ;
58763: LD_ADDR_VAR 0 2
58767: PUSH
58768: LD_VAR 0 2
58772: PUSH
58773: LD_INT 1
58775: PLUS
58776: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58777: LD_VAR 0 3
58781: PPUSH
58782: CALL_OW 256
58786: PUSH
58787: LD_INT 1000
58789: LESS
58790: IFFALSE 58804
// SetLives ( un , 1000 ) ;
58792: LD_VAR 0 3
58796: PPUSH
58797: LD_INT 1000
58799: PPUSH
58800: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58804: LD_VAR 0 3
58808: PPUSH
58809: LD_INT 81
58811: PUSH
58812: LD_OWVAR 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 91
58823: PUSH
58824: LD_VAR 0 3
58828: PUSH
58829: LD_INT 30
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PPUSH
58841: CALL_OW 69
58845: PPUSH
58846: LD_VAR 0 3
58850: PPUSH
58851: CALL_OW 74
58855: PPUSH
58856: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58860: LD_VAR 0 2
58864: PUSH
58865: LD_INT 80
58867: GREATER
58868: PUSH
58869: LD_VAR 0 3
58873: PPUSH
58874: CALL_OW 301
58878: OR
58879: IFFALSE 58756
// if un then
58881: LD_VAR 0 3
58885: IFFALSE 58896
// RemoveUnit ( un ) ;
58887: LD_VAR 0 3
58891: PPUSH
58892: CALL_OW 64
// end ;
58896: PPOPN 3
58898: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58899: LD_EXP 82
58903: IFFALSE 59019
58905: GO 58907
58907: DISABLE
58908: LD_INT 0
58910: PPUSH
58911: PPUSH
58912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58913: LD_ADDR_VAR 0 2
58917: PUSH
58918: LD_INT 81
58920: PUSH
58921: LD_OWVAR 2
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 21
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PPUSH
58944: CALL_OW 69
58948: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58949: LD_STRING playComputer()
58951: PPUSH
58952: CALL_OW 559
// if not tmp then
58956: LD_VAR 0 2
58960: NOT
58961: IFFALSE 58965
// exit ;
58963: GO 59019
// for i in tmp do
58965: LD_ADDR_VAR 0 1
58969: PUSH
58970: LD_VAR 0 2
58974: PUSH
58975: FOR_IN
58976: IFFALSE 59017
// for j := 1 to 4 do
58978: LD_ADDR_VAR 0 3
58982: PUSH
58983: DOUBLE
58984: LD_INT 1
58986: DEC
58987: ST_TO_ADDR
58988: LD_INT 4
58990: PUSH
58991: FOR_TO
58992: IFFALSE 59013
// SetSkill ( i , j , 10 ) ;
58994: LD_VAR 0 1
58998: PPUSH
58999: LD_VAR 0 3
59003: PPUSH
59004: LD_INT 10
59006: PPUSH
59007: CALL_OW 237
59011: GO 58991
59013: POP
59014: POP
59015: GO 58975
59017: POP
59018: POP
// end ;
59019: PPOPN 3
59021: END
// every 0 0$1 trigger s30 do var i , tmp ;
59022: LD_EXP 83
59026: IFFALSE 59095
59028: GO 59030
59030: DISABLE
59031: LD_INT 0
59033: PPUSH
59034: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59035: LD_ADDR_VAR 0 2
59039: PUSH
59040: LD_INT 22
59042: PUSH
59043: LD_OWVAR 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PPUSH
59052: CALL_OW 69
59056: ST_TO_ADDR
// if not tmp then
59057: LD_VAR 0 2
59061: NOT
59062: IFFALSE 59066
// exit ;
59064: GO 59095
// for i in tmp do
59066: LD_ADDR_VAR 0 1
59070: PUSH
59071: LD_VAR 0 2
59075: PUSH
59076: FOR_IN
59077: IFFALSE 59093
// SetLives ( i , 300 ) ;
59079: LD_VAR 0 1
59083: PPUSH
59084: LD_INT 300
59086: PPUSH
59087: CALL_OW 234
59091: GO 59076
59093: POP
59094: POP
// end ;
59095: PPOPN 2
59097: END
// every 0 0$1 trigger s60 do var i , tmp ;
59098: LD_EXP 84
59102: IFFALSE 59171
59104: GO 59106
59106: DISABLE
59107: LD_INT 0
59109: PPUSH
59110: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59111: LD_ADDR_VAR 0 2
59115: PUSH
59116: LD_INT 22
59118: PUSH
59119: LD_OWVAR 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PPUSH
59128: CALL_OW 69
59132: ST_TO_ADDR
// if not tmp then
59133: LD_VAR 0 2
59137: NOT
59138: IFFALSE 59142
// exit ;
59140: GO 59171
// for i in tmp do
59142: LD_ADDR_VAR 0 1
59146: PUSH
59147: LD_VAR 0 2
59151: PUSH
59152: FOR_IN
59153: IFFALSE 59169
// SetLives ( i , 600 ) ;
59155: LD_VAR 0 1
59159: PPUSH
59160: LD_INT 600
59162: PPUSH
59163: CALL_OW 234
59167: GO 59152
59169: POP
59170: POP
// end ;
59171: PPOPN 2
59173: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59174: LD_INT 0
59176: PPUSH
// case cmd of 301 :
59177: LD_VAR 0 1
59181: PUSH
59182: LD_INT 301
59184: DOUBLE
59185: EQUAL
59186: IFTRUE 59190
59188: GO 59222
59190: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
59191: LD_VAR 0 6
59195: PPUSH
59196: LD_VAR 0 7
59200: PPUSH
59201: LD_VAR 0 8
59205: PPUSH
59206: LD_VAR 0 4
59210: PPUSH
59211: LD_VAR 0 5
59215: PPUSH
59216: CALL 60431 0 5
59220: GO 59343
59222: LD_INT 302
59224: DOUBLE
59225: EQUAL
59226: IFTRUE 59230
59228: GO 59267
59230: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
59231: LD_VAR 0 6
59235: PPUSH
59236: LD_VAR 0 7
59240: PPUSH
59241: LD_VAR 0 8
59245: PPUSH
59246: LD_VAR 0 9
59250: PPUSH
59251: LD_VAR 0 4
59255: PPUSH
59256: LD_VAR 0 5
59260: PPUSH
59261: CALL 60522 0 6
59265: GO 59343
59267: LD_INT 303
59269: DOUBLE
59270: EQUAL
59271: IFTRUE 59275
59273: GO 59312
59275: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
59276: LD_VAR 0 6
59280: PPUSH
59281: LD_VAR 0 7
59285: PPUSH
59286: LD_VAR 0 8
59290: PPUSH
59291: LD_VAR 0 9
59295: PPUSH
59296: LD_VAR 0 4
59300: PPUSH
59301: LD_VAR 0 5
59305: PPUSH
59306: CALL 59348 0 6
59310: GO 59343
59312: LD_INT 304
59314: DOUBLE
59315: EQUAL
59316: IFTRUE 59320
59318: GO 59342
59320: POP
// hHackTeleport ( unit , x , y ) ; end ;
59321: LD_VAR 0 2
59325: PPUSH
59326: LD_VAR 0 4
59330: PPUSH
59331: LD_VAR 0 5
59335: PPUSH
59336: CALL 61115 0 3
59340: GO 59343
59342: POP
// end ;
59343: LD_VAR 0 12
59347: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
59348: LD_INT 0
59350: PPUSH
59351: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
59352: LD_VAR 0 1
59356: PUSH
59357: LD_INT 1
59359: LESS
59360: PUSH
59361: LD_VAR 0 1
59365: PUSH
59366: LD_INT 3
59368: GREATER
59369: OR
59370: PUSH
59371: LD_VAR 0 5
59375: PPUSH
59376: LD_VAR 0 6
59380: PPUSH
59381: CALL_OW 428
59385: OR
59386: IFFALSE 59390
// exit ;
59388: GO 60118
// uc_side := your_side ;
59390: LD_ADDR_OWVAR 20
59394: PUSH
59395: LD_OWVAR 2
59399: ST_TO_ADDR
// uc_nation := nation ;
59400: LD_ADDR_OWVAR 21
59404: PUSH
59405: LD_VAR 0 1
59409: ST_TO_ADDR
// bc_level = 1 ;
59410: LD_ADDR_OWVAR 43
59414: PUSH
59415: LD_INT 1
59417: ST_TO_ADDR
// case btype of 1 :
59418: LD_VAR 0 2
59422: PUSH
59423: LD_INT 1
59425: DOUBLE
59426: EQUAL
59427: IFTRUE 59431
59429: GO 59442
59431: POP
// bc_type := b_depot ; 2 :
59432: LD_ADDR_OWVAR 42
59436: PUSH
59437: LD_INT 0
59439: ST_TO_ADDR
59440: GO 60062
59442: LD_INT 2
59444: DOUBLE
59445: EQUAL
59446: IFTRUE 59450
59448: GO 59461
59450: POP
// bc_type := b_warehouse ; 3 :
59451: LD_ADDR_OWVAR 42
59455: PUSH
59456: LD_INT 1
59458: ST_TO_ADDR
59459: GO 60062
59461: LD_INT 3
59463: DOUBLE
59464: EQUAL
59465: IFTRUE 59469
59467: GO 59480
59469: POP
// bc_type := b_lab ; 4 .. 9 :
59470: LD_ADDR_OWVAR 42
59474: PUSH
59475: LD_INT 6
59477: ST_TO_ADDR
59478: GO 60062
59480: LD_INT 4
59482: DOUBLE
59483: GREATEREQUAL
59484: IFFALSE 59492
59486: LD_INT 9
59488: DOUBLE
59489: LESSEQUAL
59490: IFTRUE 59494
59492: GO 59554
59494: POP
// begin bc_type := b_lab_half ;
59495: LD_ADDR_OWVAR 42
59499: PUSH
59500: LD_INT 7
59502: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59503: LD_ADDR_OWVAR 44
59507: PUSH
59508: LD_INT 10
59510: PUSH
59511: LD_INT 11
59513: PUSH
59514: LD_INT 12
59516: PUSH
59517: LD_INT 15
59519: PUSH
59520: LD_INT 14
59522: PUSH
59523: LD_INT 13
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: PUSH
59534: LD_VAR 0 2
59538: PUSH
59539: LD_INT 3
59541: MINUS
59542: ARRAY
59543: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
59544: LD_ADDR_OWVAR 45
59548: PUSH
59549: LD_INT 9
59551: ST_TO_ADDR
// end ; 10 .. 13 :
59552: GO 60062
59554: LD_INT 10
59556: DOUBLE
59557: GREATEREQUAL
59558: IFFALSE 59566
59560: LD_INT 13
59562: DOUBLE
59563: LESSEQUAL
59564: IFTRUE 59568
59566: GO 59645
59568: POP
// begin bc_type := b_lab_full ;
59569: LD_ADDR_OWVAR 42
59573: PUSH
59574: LD_INT 8
59576: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59577: LD_ADDR_OWVAR 44
59581: PUSH
59582: LD_INT 10
59584: PUSH
59585: LD_INT 12
59587: PUSH
59588: LD_INT 14
59590: PUSH
59591: LD_INT 13
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: PUSH
59600: LD_VAR 0 2
59604: PUSH
59605: LD_INT 9
59607: MINUS
59608: ARRAY
59609: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59610: LD_ADDR_OWVAR 45
59614: PUSH
59615: LD_INT 11
59617: PUSH
59618: LD_INT 15
59620: PUSH
59621: LD_INT 12
59623: PUSH
59624: LD_INT 15
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: LD_VAR 0 2
59637: PUSH
59638: LD_INT 9
59640: MINUS
59641: ARRAY
59642: ST_TO_ADDR
// end ; 14 :
59643: GO 60062
59645: LD_INT 14
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59653
59651: GO 59664
59653: POP
// bc_type := b_workshop ; 15 :
59654: LD_ADDR_OWVAR 42
59658: PUSH
59659: LD_INT 2
59661: ST_TO_ADDR
59662: GO 60062
59664: LD_INT 15
59666: DOUBLE
59667: EQUAL
59668: IFTRUE 59672
59670: GO 59683
59672: POP
// bc_type := b_factory ; 16 :
59673: LD_ADDR_OWVAR 42
59677: PUSH
59678: LD_INT 3
59680: ST_TO_ADDR
59681: GO 60062
59683: LD_INT 16
59685: DOUBLE
59686: EQUAL
59687: IFTRUE 59691
59689: GO 59702
59691: POP
// bc_type := b_ext_gun ; 17 :
59692: LD_ADDR_OWVAR 42
59696: PUSH
59697: LD_INT 17
59699: ST_TO_ADDR
59700: GO 60062
59702: LD_INT 17
59704: DOUBLE
59705: EQUAL
59706: IFTRUE 59710
59708: GO 59738
59710: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59711: LD_ADDR_OWVAR 42
59715: PUSH
59716: LD_INT 19
59718: PUSH
59719: LD_INT 23
59721: PUSH
59722: LD_INT 19
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: PUSH
59730: LD_VAR 0 1
59734: ARRAY
59735: ST_TO_ADDR
59736: GO 60062
59738: LD_INT 18
59740: DOUBLE
59741: EQUAL
59742: IFTRUE 59746
59744: GO 59757
59746: POP
// bc_type := b_ext_radar ; 19 :
59747: LD_ADDR_OWVAR 42
59751: PUSH
59752: LD_INT 20
59754: ST_TO_ADDR
59755: GO 60062
59757: LD_INT 19
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59765
59763: GO 59776
59765: POP
// bc_type := b_ext_radio ; 20 :
59766: LD_ADDR_OWVAR 42
59770: PUSH
59771: LD_INT 22
59773: ST_TO_ADDR
59774: GO 60062
59776: LD_INT 20
59778: DOUBLE
59779: EQUAL
59780: IFTRUE 59784
59782: GO 59795
59784: POP
// bc_type := b_ext_siberium ; 21 :
59785: LD_ADDR_OWVAR 42
59789: PUSH
59790: LD_INT 21
59792: ST_TO_ADDR
59793: GO 60062
59795: LD_INT 21
59797: DOUBLE
59798: EQUAL
59799: IFTRUE 59803
59801: GO 59814
59803: POP
// bc_type := b_ext_computer ; 22 :
59804: LD_ADDR_OWVAR 42
59808: PUSH
59809: LD_INT 24
59811: ST_TO_ADDR
59812: GO 60062
59814: LD_INT 22
59816: DOUBLE
59817: EQUAL
59818: IFTRUE 59822
59820: GO 59833
59822: POP
// bc_type := b_ext_track ; 23 :
59823: LD_ADDR_OWVAR 42
59827: PUSH
59828: LD_INT 16
59830: ST_TO_ADDR
59831: GO 60062
59833: LD_INT 23
59835: DOUBLE
59836: EQUAL
59837: IFTRUE 59841
59839: GO 59852
59841: POP
// bc_type := b_ext_laser ; 24 :
59842: LD_ADDR_OWVAR 42
59846: PUSH
59847: LD_INT 25
59849: ST_TO_ADDR
59850: GO 60062
59852: LD_INT 24
59854: DOUBLE
59855: EQUAL
59856: IFTRUE 59860
59858: GO 59871
59860: POP
// bc_type := b_control_tower ; 25 :
59861: LD_ADDR_OWVAR 42
59865: PUSH
59866: LD_INT 36
59868: ST_TO_ADDR
59869: GO 60062
59871: LD_INT 25
59873: DOUBLE
59874: EQUAL
59875: IFTRUE 59879
59877: GO 59890
59879: POP
// bc_type := b_breastwork ; 26 :
59880: LD_ADDR_OWVAR 42
59884: PUSH
59885: LD_INT 31
59887: ST_TO_ADDR
59888: GO 60062
59890: LD_INT 26
59892: DOUBLE
59893: EQUAL
59894: IFTRUE 59898
59896: GO 59909
59898: POP
// bc_type := b_bunker ; 27 :
59899: LD_ADDR_OWVAR 42
59903: PUSH
59904: LD_INT 32
59906: ST_TO_ADDR
59907: GO 60062
59909: LD_INT 27
59911: DOUBLE
59912: EQUAL
59913: IFTRUE 59917
59915: GO 59928
59917: POP
// bc_type := b_turret ; 28 :
59918: LD_ADDR_OWVAR 42
59922: PUSH
59923: LD_INT 33
59925: ST_TO_ADDR
59926: GO 60062
59928: LD_INT 28
59930: DOUBLE
59931: EQUAL
59932: IFTRUE 59936
59934: GO 59947
59936: POP
// bc_type := b_armoury ; 29 :
59937: LD_ADDR_OWVAR 42
59941: PUSH
59942: LD_INT 4
59944: ST_TO_ADDR
59945: GO 60062
59947: LD_INT 29
59949: DOUBLE
59950: EQUAL
59951: IFTRUE 59955
59953: GO 59966
59955: POP
// bc_type := b_barracks ; 30 :
59956: LD_ADDR_OWVAR 42
59960: PUSH
59961: LD_INT 5
59963: ST_TO_ADDR
59964: GO 60062
59966: LD_INT 30
59968: DOUBLE
59969: EQUAL
59970: IFTRUE 59974
59972: GO 59985
59974: POP
// bc_type := b_solar_power ; 31 :
59975: LD_ADDR_OWVAR 42
59979: PUSH
59980: LD_INT 27
59982: ST_TO_ADDR
59983: GO 60062
59985: LD_INT 31
59987: DOUBLE
59988: EQUAL
59989: IFTRUE 59993
59991: GO 60004
59993: POP
// bc_type := b_oil_power ; 32 :
59994: LD_ADDR_OWVAR 42
59998: PUSH
59999: LD_INT 26
60001: ST_TO_ADDR
60002: GO 60062
60004: LD_INT 32
60006: DOUBLE
60007: EQUAL
60008: IFTRUE 60012
60010: GO 60023
60012: POP
// bc_type := b_siberite_power ; 33 :
60013: LD_ADDR_OWVAR 42
60017: PUSH
60018: LD_INT 28
60020: ST_TO_ADDR
60021: GO 60062
60023: LD_INT 33
60025: DOUBLE
60026: EQUAL
60027: IFTRUE 60031
60029: GO 60042
60031: POP
// bc_type := b_oil_mine ; 34 :
60032: LD_ADDR_OWVAR 42
60036: PUSH
60037: LD_INT 29
60039: ST_TO_ADDR
60040: GO 60062
60042: LD_INT 34
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60050
60048: GO 60061
60050: POP
// bc_type := b_siberite_mine ; end ;
60051: LD_ADDR_OWVAR 42
60055: PUSH
60056: LD_INT 30
60058: ST_TO_ADDR
60059: GO 60062
60061: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60062: LD_ADDR_VAR 0 8
60066: PUSH
60067: LD_VAR 0 5
60071: PPUSH
60072: LD_VAR 0 6
60076: PPUSH
60077: LD_VAR 0 3
60081: PPUSH
60082: CALL_OW 47
60086: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60087: LD_OWVAR 42
60091: PUSH
60092: LD_INT 32
60094: PUSH
60095: LD_INT 33
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: IN
60102: IFFALSE 60118
// PlaceWeaponTurret ( b , weapon ) ;
60104: LD_VAR 0 8
60108: PPUSH
60109: LD_VAR 0 4
60113: PPUSH
60114: CALL_OW 431
// end ;
60118: LD_VAR 0 7
60122: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
60123: LD_INT 0
60125: PPUSH
60126: PPUSH
60127: PPUSH
60128: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60129: LD_ADDR_VAR 0 4
60133: PUSH
60134: LD_INT 22
60136: PUSH
60137: LD_OWVAR 2
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: LD_INT 30
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 30
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PPUSH
60178: CALL_OW 69
60182: ST_TO_ADDR
// if not tmp then
60183: LD_VAR 0 4
60187: NOT
60188: IFFALSE 60192
// exit ;
60190: GO 60251
// for i in tmp do
60192: LD_ADDR_VAR 0 2
60196: PUSH
60197: LD_VAR 0 4
60201: PUSH
60202: FOR_IN
60203: IFFALSE 60249
// for j = 1 to 3 do
60205: LD_ADDR_VAR 0 3
60209: PUSH
60210: DOUBLE
60211: LD_INT 1
60213: DEC
60214: ST_TO_ADDR
60215: LD_INT 3
60217: PUSH
60218: FOR_TO
60219: IFFALSE 60245
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
60221: LD_VAR 0 2
60225: PPUSH
60226: CALL_OW 274
60230: PPUSH
60231: LD_VAR 0 3
60235: PPUSH
60236: LD_INT 99999
60238: PPUSH
60239: CALL_OW 277
60243: GO 60218
60245: POP
60246: POP
60247: GO 60202
60249: POP
60250: POP
// end ;
60251: LD_VAR 0 1
60255: RET
// export function hHackSetLevel10 ; var i , j ; begin
60256: LD_INT 0
60258: PPUSH
60259: PPUSH
60260: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60261: LD_ADDR_VAR 0 2
60265: PUSH
60266: LD_INT 21
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PPUSH
60276: CALL_OW 69
60280: PUSH
60281: FOR_IN
60282: IFFALSE 60334
// if IsSelected ( i ) then
60284: LD_VAR 0 2
60288: PPUSH
60289: CALL_OW 306
60293: IFFALSE 60332
// begin for j := 1 to 4 do
60295: LD_ADDR_VAR 0 3
60299: PUSH
60300: DOUBLE
60301: LD_INT 1
60303: DEC
60304: ST_TO_ADDR
60305: LD_INT 4
60307: PUSH
60308: FOR_TO
60309: IFFALSE 60330
// SetSkill ( i , j , 10 ) ;
60311: LD_VAR 0 2
60315: PPUSH
60316: LD_VAR 0 3
60320: PPUSH
60321: LD_INT 10
60323: PPUSH
60324: CALL_OW 237
60328: GO 60308
60330: POP
60331: POP
// end ;
60332: GO 60281
60334: POP
60335: POP
// end ;
60336: LD_VAR 0 1
60340: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
60341: LD_INT 0
60343: PPUSH
60344: PPUSH
60345: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
60346: LD_ADDR_VAR 0 2
60350: PUSH
60351: LD_INT 22
60353: PUSH
60354: LD_OWVAR 2
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 21
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PPUSH
60377: CALL_OW 69
60381: PUSH
60382: FOR_IN
60383: IFFALSE 60424
// begin for j := 1 to 4 do
60385: LD_ADDR_VAR 0 3
60389: PUSH
60390: DOUBLE
60391: LD_INT 1
60393: DEC
60394: ST_TO_ADDR
60395: LD_INT 4
60397: PUSH
60398: FOR_TO
60399: IFFALSE 60420
// SetSkill ( i , j , 10 ) ;
60401: LD_VAR 0 2
60405: PPUSH
60406: LD_VAR 0 3
60410: PPUSH
60411: LD_INT 10
60413: PPUSH
60414: CALL_OW 237
60418: GO 60398
60420: POP
60421: POP
// end ;
60422: GO 60382
60424: POP
60425: POP
// end ;
60426: LD_VAR 0 1
60430: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60431: LD_INT 0
60433: PPUSH
// uc_side := your_side ;
60434: LD_ADDR_OWVAR 20
60438: PUSH
60439: LD_OWVAR 2
60443: ST_TO_ADDR
// uc_nation := nation ;
60444: LD_ADDR_OWVAR 21
60448: PUSH
60449: LD_VAR 0 1
60453: ST_TO_ADDR
// InitHc ;
60454: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60458: LD_INT 0
60460: PPUSH
60461: LD_VAR 0 2
60465: PPUSH
60466: LD_VAR 0 3
60470: PPUSH
60471: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60475: LD_VAR 0 4
60479: PPUSH
60480: LD_VAR 0 5
60484: PPUSH
60485: CALL_OW 428
60489: PUSH
60490: LD_INT 0
60492: EQUAL
60493: IFFALSE 60517
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60495: CALL_OW 44
60499: PPUSH
60500: LD_VAR 0 4
60504: PPUSH
60505: LD_VAR 0 5
60509: PPUSH
60510: LD_INT 1
60512: PPUSH
60513: CALL_OW 48
// end ;
60517: LD_VAR 0 6
60521: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60522: LD_INT 0
60524: PPUSH
60525: PPUSH
// uc_side := your_side ;
60526: LD_ADDR_OWVAR 20
60530: PUSH
60531: LD_OWVAR 2
60535: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60536: LD_VAR 0 1
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 3
60549: PUSH
60550: LD_INT 4
60552: PUSH
60553: LD_INT 5
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: IN
60563: IFFALSE 60575
// uc_nation := nation_american else
60565: LD_ADDR_OWVAR 21
60569: PUSH
60570: LD_INT 1
60572: ST_TO_ADDR
60573: GO 60618
// if chassis in [ 11 , 12 , 13 , 14 ] then
60575: LD_VAR 0 1
60579: PUSH
60580: LD_INT 11
60582: PUSH
60583: LD_INT 12
60585: PUSH
60586: LD_INT 13
60588: PUSH
60589: LD_INT 14
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: IN
60598: IFFALSE 60610
// uc_nation := nation_arabian else
60600: LD_ADDR_OWVAR 21
60604: PUSH
60605: LD_INT 2
60607: ST_TO_ADDR
60608: GO 60618
// uc_nation := nation_russian ;
60610: LD_ADDR_OWVAR 21
60614: PUSH
60615: LD_INT 3
60617: ST_TO_ADDR
// vc_chassis := chassis ;
60618: LD_ADDR_OWVAR 37
60622: PUSH
60623: LD_VAR 0 1
60627: ST_TO_ADDR
// vc_engine := engine ;
60628: LD_ADDR_OWVAR 39
60632: PUSH
60633: LD_VAR 0 2
60637: ST_TO_ADDR
// vc_control := control ;
60638: LD_ADDR_OWVAR 38
60642: PUSH
60643: LD_VAR 0 3
60647: ST_TO_ADDR
// vc_weapon := weapon ;
60648: LD_ADDR_OWVAR 40
60652: PUSH
60653: LD_VAR 0 4
60657: ST_TO_ADDR
// un := CreateVehicle ;
60658: LD_ADDR_VAR 0 8
60662: PUSH
60663: CALL_OW 45
60667: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60668: LD_VAR 0 8
60672: PPUSH
60673: LD_INT 0
60675: PPUSH
60676: LD_INT 5
60678: PPUSH
60679: CALL_OW 12
60683: PPUSH
60684: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60688: LD_VAR 0 8
60692: PPUSH
60693: LD_VAR 0 5
60697: PPUSH
60698: LD_VAR 0 6
60702: PPUSH
60703: LD_INT 1
60705: PPUSH
60706: CALL_OW 48
// end ;
60710: LD_VAR 0 7
60714: RET
// export hInvincible ; every 1 do
60715: GO 60717
60717: DISABLE
// hInvincible := [ ] ;
60718: LD_ADDR_EXP 85
60722: PUSH
60723: EMPTY
60724: ST_TO_ADDR
60725: END
// every 10 do var i ;
60726: GO 60728
60728: DISABLE
60729: LD_INT 0
60731: PPUSH
// begin enable ;
60732: ENABLE
// if not hInvincible then
60733: LD_EXP 85
60737: NOT
60738: IFFALSE 60742
// exit ;
60740: GO 60786
// for i in hInvincible do
60742: LD_ADDR_VAR 0 1
60746: PUSH
60747: LD_EXP 85
60751: PUSH
60752: FOR_IN
60753: IFFALSE 60784
// if GetLives ( i ) < 1000 then
60755: LD_VAR 0 1
60759: PPUSH
60760: CALL_OW 256
60764: PUSH
60765: LD_INT 1000
60767: LESS
60768: IFFALSE 60782
// SetLives ( i , 1000 ) ;
60770: LD_VAR 0 1
60774: PPUSH
60775: LD_INT 1000
60777: PPUSH
60778: CALL_OW 234
60782: GO 60752
60784: POP
60785: POP
// end ;
60786: PPOPN 1
60788: END
// export function hHackInvincible ; var i ; begin
60789: LD_INT 0
60791: PPUSH
60792: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60793: LD_ADDR_VAR 0 2
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: LD_INT 21
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 21
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: PPUSH
60826: CALL_OW 69
60830: PUSH
60831: FOR_IN
60832: IFFALSE 60893
// if IsSelected ( i ) then
60834: LD_VAR 0 2
60838: PPUSH
60839: CALL_OW 306
60843: IFFALSE 60891
// begin if i in hInvincible then
60845: LD_VAR 0 2
60849: PUSH
60850: LD_EXP 85
60854: IN
60855: IFFALSE 60875
// hInvincible := hInvincible diff i else
60857: LD_ADDR_EXP 85
60861: PUSH
60862: LD_EXP 85
60866: PUSH
60867: LD_VAR 0 2
60871: DIFF
60872: ST_TO_ADDR
60873: GO 60891
// hInvincible := hInvincible union i ;
60875: LD_ADDR_EXP 85
60879: PUSH
60880: LD_EXP 85
60884: PUSH
60885: LD_VAR 0 2
60889: UNION
60890: ST_TO_ADDR
// end ;
60891: GO 60831
60893: POP
60894: POP
// end ;
60895: LD_VAR 0 1
60899: RET
// export function hHackInvisible ; var i , j ; begin
60900: LD_INT 0
60902: PPUSH
60903: PPUSH
60904: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60905: LD_ADDR_VAR 0 2
60909: PUSH
60910: LD_INT 21
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PPUSH
60920: CALL_OW 69
60924: PUSH
60925: FOR_IN
60926: IFFALSE 60950
// if IsSelected ( i ) then
60928: LD_VAR 0 2
60932: PPUSH
60933: CALL_OW 306
60937: IFFALSE 60948
// ComForceInvisible ( i ) ;
60939: LD_VAR 0 2
60943: PPUSH
60944: CALL_OW 496
60948: GO 60925
60950: POP
60951: POP
// end ;
60952: LD_VAR 0 1
60956: RET
// export function hHackChangeYourSide ; begin
60957: LD_INT 0
60959: PPUSH
// if your_side = 8 then
60960: LD_OWVAR 2
60964: PUSH
60965: LD_INT 8
60967: EQUAL
60968: IFFALSE 60980
// your_side := 0 else
60970: LD_ADDR_OWVAR 2
60974: PUSH
60975: LD_INT 0
60977: ST_TO_ADDR
60978: GO 60994
// your_side := your_side + 1 ;
60980: LD_ADDR_OWVAR 2
60984: PUSH
60985: LD_OWVAR 2
60989: PUSH
60990: LD_INT 1
60992: PLUS
60993: ST_TO_ADDR
// end ;
60994: LD_VAR 0 1
60998: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60999: LD_INT 0
61001: PPUSH
61002: PPUSH
61003: PPUSH
// for i in all_units do
61004: LD_ADDR_VAR 0 2
61008: PUSH
61009: LD_OWVAR 3
61013: PUSH
61014: FOR_IN
61015: IFFALSE 61093
// if IsSelected ( i ) then
61017: LD_VAR 0 2
61021: PPUSH
61022: CALL_OW 306
61026: IFFALSE 61091
// begin j := GetSide ( i ) ;
61028: LD_ADDR_VAR 0 3
61032: PUSH
61033: LD_VAR 0 2
61037: PPUSH
61038: CALL_OW 255
61042: ST_TO_ADDR
// if j = 8 then
61043: LD_VAR 0 3
61047: PUSH
61048: LD_INT 8
61050: EQUAL
61051: IFFALSE 61063
// j := 0 else
61053: LD_ADDR_VAR 0 3
61057: PUSH
61058: LD_INT 0
61060: ST_TO_ADDR
61061: GO 61077
// j := j + 1 ;
61063: LD_ADDR_VAR 0 3
61067: PUSH
61068: LD_VAR 0 3
61072: PUSH
61073: LD_INT 1
61075: PLUS
61076: ST_TO_ADDR
// SetSide ( i , j ) ;
61077: LD_VAR 0 2
61081: PPUSH
61082: LD_VAR 0 3
61086: PPUSH
61087: CALL_OW 235
// end ;
61091: GO 61014
61093: POP
61094: POP
// end ;
61095: LD_VAR 0 1
61099: RET
// export function hHackFog ; begin
61100: LD_INT 0
61102: PPUSH
// FogOff ( true ) ;
61103: LD_INT 1
61105: PPUSH
61106: CALL_OW 344
// end ;
61110: LD_VAR 0 1
61114: RET
// export function hHackTeleport ( unit , x , y ) ; begin
61115: LD_INT 0
61117: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
61118: LD_VAR 0 1
61122: PPUSH
61123: LD_VAR 0 2
61127: PPUSH
61128: LD_VAR 0 3
61132: PPUSH
61133: LD_INT 1
61135: PPUSH
61136: LD_INT 1
61138: PPUSH
61139: CALL_OW 483
// CenterOnXY ( x , y ) ;
61143: LD_VAR 0 2
61147: PPUSH
61148: LD_VAR 0 3
61152: PPUSH
61153: CALL_OW 84
// end ;
61157: LD_VAR 0 4
61161: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61162: LD_INT 0
61164: PPUSH
61165: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61166: LD_VAR 0 1
61170: NOT
61171: PUSH
61172: LD_VAR 0 2
61176: PPUSH
61177: LD_VAR 0 3
61181: PPUSH
61182: CALL_OW 488
61186: NOT
61187: OR
61188: PUSH
61189: LD_VAR 0 1
61193: PPUSH
61194: CALL_OW 266
61198: PUSH
61199: LD_INT 3
61201: NONEQUAL
61202: PUSH
61203: LD_VAR 0 1
61207: PPUSH
61208: CALL_OW 247
61212: PUSH
61213: LD_INT 1
61215: EQUAL
61216: NOT
61217: AND
61218: OR
61219: IFFALSE 61223
// exit ;
61221: GO 61372
// if GetType ( factory ) = unit_human then
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 247
61232: PUSH
61233: LD_INT 1
61235: EQUAL
61236: IFFALSE 61253
// factory := IsInUnit ( factory ) ;
61238: LD_ADDR_VAR 0 1
61242: PUSH
61243: LD_VAR 0 1
61247: PPUSH
61248: CALL_OW 310
61252: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61253: LD_VAR 0 1
61257: PPUSH
61258: CALL_OW 266
61262: PUSH
61263: LD_INT 3
61265: NONEQUAL
61266: IFFALSE 61270
// exit ;
61268: GO 61372
// if HexInfo ( x , y ) = factory then
61270: LD_VAR 0 2
61274: PPUSH
61275: LD_VAR 0 3
61279: PPUSH
61280: CALL_OW 428
61284: PUSH
61285: LD_VAR 0 1
61289: EQUAL
61290: IFFALSE 61317
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
61292: LD_ADDR_EXP 86
61296: PUSH
61297: LD_EXP 86
61301: PPUSH
61302: LD_VAR 0 1
61306: PPUSH
61307: LD_INT 0
61309: PPUSH
61310: CALL_OW 1
61314: ST_TO_ADDR
61315: GO 61368
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
61317: LD_ADDR_EXP 86
61321: PUSH
61322: LD_EXP 86
61326: PPUSH
61327: LD_VAR 0 1
61331: PPUSH
61332: LD_VAR 0 1
61336: PPUSH
61337: CALL_OW 255
61341: PUSH
61342: LD_VAR 0 1
61346: PUSH
61347: LD_VAR 0 2
61351: PUSH
61352: LD_VAR 0 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: PPUSH
61363: CALL_OW 1
61367: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61368: CALL 61377 0 0
// end ;
61372: LD_VAR 0 4
61376: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61377: LD_INT 0
61379: PPUSH
61380: PPUSH
61381: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61382: LD_STRING resetFactoryWaypoint();
61384: PPUSH
61385: CALL_OW 559
// if factoryWaypoints then
61389: LD_EXP 86
61393: IFFALSE 61519
// begin list := PrepareArray ( factoryWaypoints ) ;
61395: LD_ADDR_VAR 0 3
61399: PUSH
61400: LD_EXP 86
61404: PPUSH
61405: CALL 46148 0 1
61409: ST_TO_ADDR
// for i := 1 to list do
61410: LD_ADDR_VAR 0 2
61414: PUSH
61415: DOUBLE
61416: LD_INT 1
61418: DEC
61419: ST_TO_ADDR
61420: LD_VAR 0 3
61424: PUSH
61425: FOR_TO
61426: IFFALSE 61517
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61428: LD_STRING setFactoryWaypointXY(
61430: PUSH
61431: LD_VAR 0 3
61435: PUSH
61436: LD_VAR 0 2
61440: ARRAY
61441: PUSH
61442: LD_INT 1
61444: ARRAY
61445: STR
61446: PUSH
61447: LD_STRING ,
61449: STR
61450: PUSH
61451: LD_VAR 0 3
61455: PUSH
61456: LD_VAR 0 2
61460: ARRAY
61461: PUSH
61462: LD_INT 2
61464: ARRAY
61465: STR
61466: PUSH
61467: LD_STRING ,
61469: STR
61470: PUSH
61471: LD_VAR 0 3
61475: PUSH
61476: LD_VAR 0 2
61480: ARRAY
61481: PUSH
61482: LD_INT 3
61484: ARRAY
61485: STR
61486: PUSH
61487: LD_STRING ,
61489: STR
61490: PUSH
61491: LD_VAR 0 3
61495: PUSH
61496: LD_VAR 0 2
61500: ARRAY
61501: PUSH
61502: LD_INT 4
61504: ARRAY
61505: STR
61506: PUSH
61507: LD_STRING )
61509: STR
61510: PPUSH
61511: CALL_OW 559
61515: GO 61425
61517: POP
61518: POP
// end ; end ;
61519: LD_VAR 0 1
61523: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61524: LD_INT 0
61526: PPUSH
// if HexInfo ( x , y ) = warehouse then
61527: LD_VAR 0 2
61531: PPUSH
61532: LD_VAR 0 3
61536: PPUSH
61537: CALL_OW 428
61541: PUSH
61542: LD_VAR 0 1
61546: EQUAL
61547: IFFALSE 61574
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61549: LD_ADDR_EXP 87
61553: PUSH
61554: LD_EXP 87
61558: PPUSH
61559: LD_VAR 0 1
61563: PPUSH
61564: LD_INT 0
61566: PPUSH
61567: CALL_OW 1
61571: ST_TO_ADDR
61572: GO 61625
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61574: LD_ADDR_EXP 87
61578: PUSH
61579: LD_EXP 87
61583: PPUSH
61584: LD_VAR 0 1
61588: PPUSH
61589: LD_VAR 0 1
61593: PPUSH
61594: CALL_OW 255
61598: PUSH
61599: LD_VAR 0 1
61603: PUSH
61604: LD_VAR 0 2
61608: PUSH
61609: LD_VAR 0 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: PPUSH
61620: CALL_OW 1
61624: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61625: CALL 61634 0 0
// end ;
61629: LD_VAR 0 4
61633: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61634: LD_INT 0
61636: PPUSH
61637: PPUSH
61638: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61639: LD_STRING resetWarehouseGatheringPoints();
61641: PPUSH
61642: CALL_OW 559
// if warehouseGatheringPoints then
61646: LD_EXP 87
61650: IFFALSE 61776
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61652: LD_ADDR_VAR 0 3
61656: PUSH
61657: LD_EXP 87
61661: PPUSH
61662: CALL 46148 0 1
61666: ST_TO_ADDR
// for i := 1 to list do
61667: LD_ADDR_VAR 0 2
61671: PUSH
61672: DOUBLE
61673: LD_INT 1
61675: DEC
61676: ST_TO_ADDR
61677: LD_VAR 0 3
61681: PUSH
61682: FOR_TO
61683: IFFALSE 61774
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61685: LD_STRING setWarehouseGatheringPointXY(
61687: PUSH
61688: LD_VAR 0 3
61692: PUSH
61693: LD_VAR 0 2
61697: ARRAY
61698: PUSH
61699: LD_INT 1
61701: ARRAY
61702: STR
61703: PUSH
61704: LD_STRING ,
61706: STR
61707: PUSH
61708: LD_VAR 0 3
61712: PUSH
61713: LD_VAR 0 2
61717: ARRAY
61718: PUSH
61719: LD_INT 2
61721: ARRAY
61722: STR
61723: PUSH
61724: LD_STRING ,
61726: STR
61727: PUSH
61728: LD_VAR 0 3
61732: PUSH
61733: LD_VAR 0 2
61737: ARRAY
61738: PUSH
61739: LD_INT 3
61741: ARRAY
61742: STR
61743: PUSH
61744: LD_STRING ,
61746: STR
61747: PUSH
61748: LD_VAR 0 3
61752: PUSH
61753: LD_VAR 0 2
61757: ARRAY
61758: PUSH
61759: LD_INT 4
61761: ARRAY
61762: STR
61763: PUSH
61764: LD_STRING )
61766: STR
61767: PPUSH
61768: CALL_OW 559
61772: GO 61682
61774: POP
61775: POP
// end ; end ;
61776: LD_VAR 0 1
61780: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61781: LD_EXP 87
61785: IFFALSE 62470
61787: GO 61789
61789: DISABLE
61790: LD_INT 0
61792: PPUSH
61793: PPUSH
61794: PPUSH
61795: PPUSH
61796: PPUSH
61797: PPUSH
61798: PPUSH
61799: PPUSH
61800: PPUSH
// begin enable ;
61801: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61802: LD_ADDR_VAR 0 3
61806: PUSH
61807: LD_EXP 87
61811: PPUSH
61812: CALL 46148 0 1
61816: ST_TO_ADDR
// if not list then
61817: LD_VAR 0 3
61821: NOT
61822: IFFALSE 61826
// exit ;
61824: GO 62470
// for i := 1 to list do
61826: LD_ADDR_VAR 0 1
61830: PUSH
61831: DOUBLE
61832: LD_INT 1
61834: DEC
61835: ST_TO_ADDR
61836: LD_VAR 0 3
61840: PUSH
61841: FOR_TO
61842: IFFALSE 62468
// begin depot := list [ i ] [ 2 ] ;
61844: LD_ADDR_VAR 0 8
61848: PUSH
61849: LD_VAR 0 3
61853: PUSH
61854: LD_VAR 0 1
61858: ARRAY
61859: PUSH
61860: LD_INT 2
61862: ARRAY
61863: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61864: LD_ADDR_VAR 0 5
61868: PUSH
61869: LD_VAR 0 3
61873: PUSH
61874: LD_VAR 0 1
61878: ARRAY
61879: PUSH
61880: LD_INT 1
61882: ARRAY
61883: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61884: LD_VAR 0 8
61888: PPUSH
61889: CALL_OW 301
61893: PUSH
61894: LD_VAR 0 5
61898: PUSH
61899: LD_VAR 0 8
61903: PPUSH
61904: CALL_OW 255
61908: NONEQUAL
61909: OR
61910: IFFALSE 61939
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61912: LD_ADDR_EXP 87
61916: PUSH
61917: LD_EXP 87
61921: PPUSH
61922: LD_VAR 0 8
61926: PPUSH
61927: LD_INT 0
61929: PPUSH
61930: CALL_OW 1
61934: ST_TO_ADDR
// exit ;
61935: POP
61936: POP
61937: GO 62470
// end ; x := list [ i ] [ 3 ] ;
61939: LD_ADDR_VAR 0 6
61943: PUSH
61944: LD_VAR 0 3
61948: PUSH
61949: LD_VAR 0 1
61953: ARRAY
61954: PUSH
61955: LD_INT 3
61957: ARRAY
61958: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61959: LD_ADDR_VAR 0 7
61963: PUSH
61964: LD_VAR 0 3
61968: PUSH
61969: LD_VAR 0 1
61973: ARRAY
61974: PUSH
61975: LD_INT 4
61977: ARRAY
61978: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61979: LD_ADDR_VAR 0 9
61983: PUSH
61984: LD_VAR 0 6
61988: PPUSH
61989: LD_VAR 0 7
61993: PPUSH
61994: LD_INT 16
61996: PPUSH
61997: CALL 44736 0 3
62001: ST_TO_ADDR
// if not cratesNearbyPoint then
62002: LD_VAR 0 9
62006: NOT
62007: IFFALSE 62013
// exit ;
62009: POP
62010: POP
62011: GO 62470
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62013: LD_ADDR_VAR 0 4
62017: PUSH
62018: LD_INT 22
62020: PUSH
62021: LD_VAR 0 5
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 3
62032: PUSH
62033: LD_INT 60
62035: PUSH
62036: EMPTY
62037: LIST
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 91
62045: PUSH
62046: LD_VAR 0 8
62050: PUSH
62051: LD_INT 6
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: LD_INT 25
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 25
62074: PUSH
62075: LD_INT 16
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: PPUSH
62093: CALL_OW 69
62097: PUSH
62098: LD_VAR 0 8
62102: PPUSH
62103: CALL_OW 313
62107: PPUSH
62108: LD_INT 3
62110: PUSH
62111: LD_INT 60
62113: PUSH
62114: EMPTY
62115: LIST
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: LD_INT 25
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 25
62136: PUSH
62137: LD_INT 16
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PPUSH
62153: CALL_OW 72
62157: UNION
62158: ST_TO_ADDR
// if tmp then
62159: LD_VAR 0 4
62163: IFFALSE 62243
// begin tmp := ShrinkArray ( tmp , 3 ) ;
62165: LD_ADDR_VAR 0 4
62169: PUSH
62170: LD_VAR 0 4
62174: PPUSH
62175: LD_INT 3
62177: PPUSH
62178: CALL 42705 0 2
62182: ST_TO_ADDR
// for j in tmp do
62183: LD_ADDR_VAR 0 2
62187: PUSH
62188: LD_VAR 0 4
62192: PUSH
62193: FOR_IN
62194: IFFALSE 62237
// begin if IsInUnit ( j ) then
62196: LD_VAR 0 2
62200: PPUSH
62201: CALL_OW 310
62205: IFFALSE 62216
// ComExit ( j ) ;
62207: LD_VAR 0 2
62211: PPUSH
62212: CALL 42788 0 1
// AddComCollect ( j , x , y ) ;
62216: LD_VAR 0 2
62220: PPUSH
62221: LD_VAR 0 6
62225: PPUSH
62226: LD_VAR 0 7
62230: PPUSH
62231: CALL_OW 177
// end ;
62235: GO 62193
62237: POP
62238: POP
// exit ;
62239: POP
62240: POP
62241: GO 62470
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
62243: LD_ADDR_VAR 0 4
62247: PUSH
62248: LD_INT 22
62250: PUSH
62251: LD_VAR 0 5
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 91
62262: PUSH
62263: LD_VAR 0 8
62267: PUSH
62268: LD_INT 8
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: LD_INT 34
62281: PUSH
62282: LD_INT 12
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 34
62291: PUSH
62292: LD_INT 51
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 34
62301: PUSH
62302: LD_INT 32
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 34
62311: PUSH
62312: LD_INT 89
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: PPUSH
62331: CALL_OW 69
62335: ST_TO_ADDR
// if tmp then
62336: LD_VAR 0 4
62340: IFFALSE 62466
// begin for j in tmp do
62342: LD_ADDR_VAR 0 2
62346: PUSH
62347: LD_VAR 0 4
62351: PUSH
62352: FOR_IN
62353: IFFALSE 62464
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
62355: LD_VAR 0 2
62359: PPUSH
62360: CALL_OW 262
62364: PUSH
62365: LD_INT 3
62367: EQUAL
62368: PUSH
62369: LD_VAR 0 2
62373: PPUSH
62374: CALL_OW 261
62378: PUSH
62379: LD_INT 20
62381: GREATER
62382: OR
62383: PUSH
62384: LD_VAR 0 2
62388: PPUSH
62389: CALL_OW 314
62393: NOT
62394: AND
62395: PUSH
62396: LD_VAR 0 2
62400: PPUSH
62401: CALL_OW 263
62405: PUSH
62406: LD_INT 1
62408: NONEQUAL
62409: PUSH
62410: LD_VAR 0 2
62414: PPUSH
62415: CALL_OW 311
62419: OR
62420: AND
62421: IFFALSE 62462
// begin ComCollect ( j , x , y ) ;
62423: LD_VAR 0 2
62427: PPUSH
62428: LD_VAR 0 6
62432: PPUSH
62433: LD_VAR 0 7
62437: PPUSH
62438: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
62442: LD_VAR 0 2
62446: PPUSH
62447: LD_VAR 0 8
62451: PPUSH
62452: CALL_OW 172
// exit ;
62456: POP
62457: POP
62458: POP
62459: POP
62460: GO 62470
// end ;
62462: GO 62352
62464: POP
62465: POP
// end ; end ;
62466: GO 61841
62468: POP
62469: POP
// end ; end_of_file
62470: PPOPN 9
62472: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62473: LD_VAR 0 1
62477: PUSH
62478: LD_INT 200
62480: DOUBLE
62481: GREATEREQUAL
62482: IFFALSE 62490
62484: LD_INT 299
62486: DOUBLE
62487: LESSEQUAL
62488: IFTRUE 62492
62490: GO 62524
62492: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62493: LD_VAR 0 1
62497: PPUSH
62498: LD_VAR 0 2
62502: PPUSH
62503: LD_VAR 0 3
62507: PPUSH
62508: LD_VAR 0 4
62512: PPUSH
62513: LD_VAR 0 5
62517: PPUSH
62518: CALL 63012 0 5
62522: GO 62601
62524: LD_INT 300
62526: DOUBLE
62527: GREATEREQUAL
62528: IFFALSE 62536
62530: LD_INT 399
62532: DOUBLE
62533: LESSEQUAL
62534: IFTRUE 62538
62536: GO 62600
62538: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62539: LD_VAR 0 1
62543: PPUSH
62544: LD_VAR 0 2
62548: PPUSH
62549: LD_VAR 0 3
62553: PPUSH
62554: LD_VAR 0 4
62558: PPUSH
62559: LD_VAR 0 5
62563: PPUSH
62564: LD_VAR 0 6
62568: PPUSH
62569: LD_VAR 0 7
62573: PPUSH
62574: LD_VAR 0 8
62578: PPUSH
62579: LD_VAR 0 9
62583: PPUSH
62584: LD_VAR 0 10
62588: PPUSH
62589: LD_VAR 0 11
62593: PPUSH
62594: CALL 59174 0 11
62598: GO 62601
62600: POP
// end ;
62601: PPOPN 11
62603: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62604: LD_VAR 0 1
62608: PPUSH
62609: LD_VAR 0 2
62613: PPUSH
62614: LD_VAR 0 3
62618: PPUSH
62619: LD_VAR 0 4
62623: PPUSH
62624: LD_VAR 0 5
62628: PPUSH
62629: CALL 62748 0 5
// end ; end_of_file
62633: PPOPN 5
62635: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62636: LD_INT 0
62638: PPUSH
62639: PPUSH
62640: PPUSH
62641: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62642: LD_VAR 0 1
62646: PPUSH
62647: CALL_OW 264
62651: PUSH
62652: LD_INT 91
62654: EQUAL
62655: IFFALSE 62727
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62657: LD_INT 68
62659: PPUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: CALL_OW 255
62669: PPUSH
62670: CALL_OW 321
62674: PUSH
62675: LD_INT 2
62677: EQUAL
62678: IFFALSE 62690
// eff := 70 else
62680: LD_ADDR_VAR 0 4
62684: PUSH
62685: LD_INT 70
62687: ST_TO_ADDR
62688: GO 62698
// eff := 30 ;
62690: LD_ADDR_VAR 0 4
62694: PUSH
62695: LD_INT 30
62697: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62698: LD_VAR 0 1
62702: PPUSH
62703: CALL_OW 250
62707: PPUSH
62708: LD_VAR 0 1
62712: PPUSH
62713: CALL_OW 251
62717: PPUSH
62718: LD_VAR 0 4
62722: PPUSH
62723: CALL_OW 495
// end ; end ;
62727: LD_VAR 0 2
62731: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62732: LD_INT 0
62734: PPUSH
// end ;
62735: LD_VAR 0 4
62739: RET
// export function SOS_Command ( cmd ) ; begin
62740: LD_INT 0
62742: PPUSH
// end ;
62743: LD_VAR 0 2
62747: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62748: LD_INT 0
62750: PPUSH
// end ;
62751: LD_VAR 0 6
62755: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62756: LD_INT 0
62758: PPUSH
62759: PPUSH
// if not vehicle or not factory then
62760: LD_VAR 0 1
62764: NOT
62765: PUSH
62766: LD_VAR 0 2
62770: NOT
62771: OR
62772: IFFALSE 62776
// exit ;
62774: GO 63007
// if factoryWaypoints >= factory then
62776: LD_EXP 86
62780: PUSH
62781: LD_VAR 0 2
62785: GREATEREQUAL
62786: IFFALSE 63007
// if factoryWaypoints [ factory ] then
62788: LD_EXP 86
62792: PUSH
62793: LD_VAR 0 2
62797: ARRAY
62798: IFFALSE 63007
// begin if GetControl ( vehicle ) = control_manual then
62800: LD_VAR 0 1
62804: PPUSH
62805: CALL_OW 263
62809: PUSH
62810: LD_INT 1
62812: EQUAL
62813: IFFALSE 62894
// begin driver := IsDrivenBy ( vehicle ) ;
62815: LD_ADDR_VAR 0 4
62819: PUSH
62820: LD_VAR 0 1
62824: PPUSH
62825: CALL_OW 311
62829: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62830: LD_VAR 0 4
62834: PPUSH
62835: LD_EXP 86
62839: PUSH
62840: LD_VAR 0 2
62844: ARRAY
62845: PUSH
62846: LD_INT 3
62848: ARRAY
62849: PPUSH
62850: LD_EXP 86
62854: PUSH
62855: LD_VAR 0 2
62859: ARRAY
62860: PUSH
62861: LD_INT 4
62863: ARRAY
62864: PPUSH
62865: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62869: LD_VAR 0 4
62873: PPUSH
62874: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62878: LD_VAR 0 4
62882: PPUSH
62883: LD_VAR 0 2
62887: PPUSH
62888: CALL_OW 180
// end else
62892: GO 63007
// if GetControl ( vehicle ) = control_remote then
62894: LD_VAR 0 1
62898: PPUSH
62899: CALL_OW 263
62903: PUSH
62904: LD_INT 2
62906: EQUAL
62907: IFFALSE 62968
// begin wait ( 0 0$2 ) ;
62909: LD_INT 70
62911: PPUSH
62912: CALL_OW 67
// if Connect ( vehicle ) then
62916: LD_VAR 0 1
62920: PPUSH
62921: CALL 13009 0 1
62925: IFFALSE 62966
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62927: LD_VAR 0 1
62931: PPUSH
62932: LD_EXP 86
62936: PUSH
62937: LD_VAR 0 2
62941: ARRAY
62942: PUSH
62943: LD_INT 3
62945: ARRAY
62946: PPUSH
62947: LD_EXP 86
62951: PUSH
62952: LD_VAR 0 2
62956: ARRAY
62957: PUSH
62958: LD_INT 4
62960: ARRAY
62961: PPUSH
62962: CALL_OW 171
// end else
62966: GO 63007
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62968: LD_VAR 0 1
62972: PPUSH
62973: LD_EXP 86
62977: PUSH
62978: LD_VAR 0 2
62982: ARRAY
62983: PUSH
62984: LD_INT 3
62986: ARRAY
62987: PPUSH
62988: LD_EXP 86
62992: PUSH
62993: LD_VAR 0 2
62997: ARRAY
62998: PUSH
62999: LD_INT 4
63001: ARRAY
63002: PPUSH
63003: CALL_OW 171
// end ; end ;
63007: LD_VAR 0 3
63011: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63012: LD_INT 0
63014: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63015: LD_VAR 0 1
63019: PUSH
63020: LD_INT 250
63022: EQUAL
63023: PUSH
63024: LD_VAR 0 2
63028: PPUSH
63029: CALL_OW 264
63033: PUSH
63034: LD_INT 81
63036: EQUAL
63037: AND
63038: IFFALSE 63059
// MinerPlaceMine ( unit , x , y ) ;
63040: LD_VAR 0 2
63044: PPUSH
63045: LD_VAR 0 4
63049: PPUSH
63050: LD_VAR 0 5
63054: PPUSH
63055: CALL 65883 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
63059: LD_VAR 0 1
63063: PUSH
63064: LD_INT 251
63066: EQUAL
63067: PUSH
63068: LD_VAR 0 2
63072: PPUSH
63073: CALL_OW 264
63077: PUSH
63078: LD_INT 81
63080: EQUAL
63081: AND
63082: IFFALSE 63103
// MinerDetonateMine ( unit , x , y ) ;
63084: LD_VAR 0 2
63088: PPUSH
63089: LD_VAR 0 4
63093: PPUSH
63094: LD_VAR 0 5
63098: PPUSH
63099: CALL 66158 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
63103: LD_VAR 0 1
63107: PUSH
63108: LD_INT 252
63110: EQUAL
63111: PUSH
63112: LD_VAR 0 2
63116: PPUSH
63117: CALL_OW 264
63121: PUSH
63122: LD_INT 81
63124: EQUAL
63125: AND
63126: IFFALSE 63147
// MinerCreateMinefield ( unit , x , y ) ;
63128: LD_VAR 0 2
63132: PPUSH
63133: LD_VAR 0 4
63137: PPUSH
63138: LD_VAR 0 5
63142: PPUSH
63143: CALL 66575 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
63147: LD_VAR 0 1
63151: PUSH
63152: LD_INT 253
63154: EQUAL
63155: PUSH
63156: LD_VAR 0 2
63160: PPUSH
63161: CALL_OW 257
63165: PUSH
63166: LD_INT 5
63168: EQUAL
63169: AND
63170: IFFALSE 63191
// ComBinocular ( unit , x , y ) ;
63172: LD_VAR 0 2
63176: PPUSH
63177: LD_VAR 0 4
63181: PPUSH
63182: LD_VAR 0 5
63186: PPUSH
63187: CALL 66944 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
63191: LD_VAR 0 1
63195: PUSH
63196: LD_INT 254
63198: EQUAL
63199: PUSH
63200: LD_VAR 0 2
63204: PPUSH
63205: CALL_OW 264
63209: PUSH
63210: LD_INT 99
63212: EQUAL
63213: AND
63214: PUSH
63215: LD_VAR 0 3
63219: PPUSH
63220: CALL_OW 263
63224: PUSH
63225: LD_INT 3
63227: EQUAL
63228: AND
63229: IFFALSE 63245
// HackDestroyVehicle ( unit , selectedUnit ) ;
63231: LD_VAR 0 2
63235: PPUSH
63236: LD_VAR 0 3
63240: PPUSH
63241: CALL 65247 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
63245: LD_VAR 0 1
63249: PUSH
63250: LD_INT 255
63252: EQUAL
63253: PUSH
63254: LD_VAR 0 2
63258: PPUSH
63259: CALL_OW 264
63263: PUSH
63264: LD_INT 14
63266: PUSH
63267: LD_INT 53
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: IN
63274: AND
63275: PUSH
63276: LD_VAR 0 4
63280: PPUSH
63281: LD_VAR 0 5
63285: PPUSH
63286: CALL_OW 488
63290: AND
63291: IFFALSE 63315
// CutTreeXYR ( unit , x , y , 12 ) ;
63293: LD_VAR 0 2
63297: PPUSH
63298: LD_VAR 0 4
63302: PPUSH
63303: LD_VAR 0 5
63307: PPUSH
63308: LD_INT 12
63310: PPUSH
63311: CALL 63410 0 4
// if cmd = 256 then
63315: LD_VAR 0 1
63319: PUSH
63320: LD_INT 256
63322: EQUAL
63323: IFFALSE 63344
// SetFactoryWaypoint ( unit , x , y ) ;
63325: LD_VAR 0 2
63329: PPUSH
63330: LD_VAR 0 4
63334: PPUSH
63335: LD_VAR 0 5
63339: PPUSH
63340: CALL 61162 0 3
// if cmd = 257 then
63344: LD_VAR 0 1
63348: PUSH
63349: LD_INT 257
63351: EQUAL
63352: IFFALSE 63373
// SetWarehouseGatheringPoint ( unit , x , y ) ;
63354: LD_VAR 0 2
63358: PPUSH
63359: LD_VAR 0 4
63363: PPUSH
63364: LD_VAR 0 5
63368: PPUSH
63369: CALL 61524 0 3
// if cmd = 258 then
63373: LD_VAR 0 1
63377: PUSH
63378: LD_INT 258
63380: EQUAL
63381: IFFALSE 63405
// BurnTreeXYR ( unit , x , y , 8 ) ;
63383: LD_VAR 0 2
63387: PPUSH
63388: LD_VAR 0 4
63392: PPUSH
63393: LD_VAR 0 5
63397: PPUSH
63398: LD_INT 8
63400: PPUSH
63401: CALL 63804 0 4
// end ;
63405: LD_VAR 0 6
63409: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63410: LD_INT 0
63412: PPUSH
63413: PPUSH
63414: PPUSH
63415: PPUSH
63416: PPUSH
63417: PPUSH
63418: PPUSH
63419: PPUSH
63420: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
63421: LD_VAR 0 1
63425: PPUSH
63426: CALL_OW 302
63430: NOT
63431: PUSH
63432: LD_VAR 0 2
63436: PPUSH
63437: LD_VAR 0 3
63441: PPUSH
63442: CALL_OW 488
63446: NOT
63447: OR
63448: PUSH
63449: LD_VAR 0 4
63453: NOT
63454: OR
63455: IFFALSE 63459
// exit ;
63457: GO 63799
// list := [ ] ;
63459: LD_ADDR_VAR 0 13
63463: PUSH
63464: EMPTY
63465: ST_TO_ADDR
// if x - r < 0 then
63466: LD_VAR 0 2
63470: PUSH
63471: LD_VAR 0 4
63475: MINUS
63476: PUSH
63477: LD_INT 0
63479: LESS
63480: IFFALSE 63492
// min_x := 0 else
63482: LD_ADDR_VAR 0 7
63486: PUSH
63487: LD_INT 0
63489: ST_TO_ADDR
63490: GO 63508
// min_x := x - r ;
63492: LD_ADDR_VAR 0 7
63496: PUSH
63497: LD_VAR 0 2
63501: PUSH
63502: LD_VAR 0 4
63506: MINUS
63507: ST_TO_ADDR
// if y - r < 0 then
63508: LD_VAR 0 3
63512: PUSH
63513: LD_VAR 0 4
63517: MINUS
63518: PUSH
63519: LD_INT 0
63521: LESS
63522: IFFALSE 63534
// min_y := 0 else
63524: LD_ADDR_VAR 0 8
63528: PUSH
63529: LD_INT 0
63531: ST_TO_ADDR
63532: GO 63550
// min_y := y - r ;
63534: LD_ADDR_VAR 0 8
63538: PUSH
63539: LD_VAR 0 3
63543: PUSH
63544: LD_VAR 0 4
63548: MINUS
63549: ST_TO_ADDR
// max_x := x + r ;
63550: LD_ADDR_VAR 0 9
63554: PUSH
63555: LD_VAR 0 2
63559: PUSH
63560: LD_VAR 0 4
63564: PLUS
63565: ST_TO_ADDR
// max_y := y + r ;
63566: LD_ADDR_VAR 0 10
63570: PUSH
63571: LD_VAR 0 3
63575: PUSH
63576: LD_VAR 0 4
63580: PLUS
63581: ST_TO_ADDR
// for _x = min_x to max_x do
63582: LD_ADDR_VAR 0 11
63586: PUSH
63587: DOUBLE
63588: LD_VAR 0 7
63592: DEC
63593: ST_TO_ADDR
63594: LD_VAR 0 9
63598: PUSH
63599: FOR_TO
63600: IFFALSE 63717
// for _y = min_y to max_y do
63602: LD_ADDR_VAR 0 12
63606: PUSH
63607: DOUBLE
63608: LD_VAR 0 8
63612: DEC
63613: ST_TO_ADDR
63614: LD_VAR 0 10
63618: PUSH
63619: FOR_TO
63620: IFFALSE 63713
// begin if not ValidHex ( _x , _y ) then
63622: LD_VAR 0 11
63626: PPUSH
63627: LD_VAR 0 12
63631: PPUSH
63632: CALL_OW 488
63636: NOT
63637: IFFALSE 63641
// continue ;
63639: GO 63619
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63641: LD_VAR 0 11
63645: PPUSH
63646: LD_VAR 0 12
63650: PPUSH
63651: CALL_OW 351
63655: PUSH
63656: LD_VAR 0 11
63660: PPUSH
63661: LD_VAR 0 12
63665: PPUSH
63666: CALL_OW 554
63670: AND
63671: IFFALSE 63711
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63673: LD_ADDR_VAR 0 13
63677: PUSH
63678: LD_VAR 0 13
63682: PPUSH
63683: LD_VAR 0 13
63687: PUSH
63688: LD_INT 1
63690: PLUS
63691: PPUSH
63692: LD_VAR 0 11
63696: PUSH
63697: LD_VAR 0 12
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PPUSH
63706: CALL_OW 2
63710: ST_TO_ADDR
// end ;
63711: GO 63619
63713: POP
63714: POP
63715: GO 63599
63717: POP
63718: POP
// if not list then
63719: LD_VAR 0 13
63723: NOT
63724: IFFALSE 63728
// exit ;
63726: GO 63799
// for i in list do
63728: LD_ADDR_VAR 0 6
63732: PUSH
63733: LD_VAR 0 13
63737: PUSH
63738: FOR_IN
63739: IFFALSE 63797
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63741: LD_VAR 0 1
63745: PPUSH
63746: LD_STRING M
63748: PUSH
63749: LD_VAR 0 6
63753: PUSH
63754: LD_INT 1
63756: ARRAY
63757: PUSH
63758: LD_VAR 0 6
63762: PUSH
63763: LD_INT 2
63765: ARRAY
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: PUSH
63788: EMPTY
63789: LIST
63790: PPUSH
63791: CALL_OW 447
63795: GO 63738
63797: POP
63798: POP
// end ;
63799: LD_VAR 0 5
63803: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63804: LD_INT 0
63806: PPUSH
63807: PPUSH
63808: PPUSH
63809: PPUSH
63810: PPUSH
63811: PPUSH
63812: PPUSH
63813: PPUSH
63814: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 302
63824: NOT
63825: PUSH
63826: LD_VAR 0 2
63830: PPUSH
63831: LD_VAR 0 3
63835: PPUSH
63836: CALL_OW 488
63840: NOT
63841: OR
63842: PUSH
63843: LD_VAR 0 4
63847: NOT
63848: OR
63849: IFFALSE 63853
// exit ;
63851: GO 64201
// list := [ ] ;
63853: LD_ADDR_VAR 0 13
63857: PUSH
63858: EMPTY
63859: ST_TO_ADDR
// if x - r < 0 then
63860: LD_VAR 0 2
63864: PUSH
63865: LD_VAR 0 4
63869: MINUS
63870: PUSH
63871: LD_INT 0
63873: LESS
63874: IFFALSE 63886
// min_x := 0 else
63876: LD_ADDR_VAR 0 7
63880: PUSH
63881: LD_INT 0
63883: ST_TO_ADDR
63884: GO 63902
// min_x := x - r ;
63886: LD_ADDR_VAR 0 7
63890: PUSH
63891: LD_VAR 0 2
63895: PUSH
63896: LD_VAR 0 4
63900: MINUS
63901: ST_TO_ADDR
// if y - r < 0 then
63902: LD_VAR 0 3
63906: PUSH
63907: LD_VAR 0 4
63911: MINUS
63912: PUSH
63913: LD_INT 0
63915: LESS
63916: IFFALSE 63928
// min_y := 0 else
63918: LD_ADDR_VAR 0 8
63922: PUSH
63923: LD_INT 0
63925: ST_TO_ADDR
63926: GO 63944
// min_y := y - r ;
63928: LD_ADDR_VAR 0 8
63932: PUSH
63933: LD_VAR 0 3
63937: PUSH
63938: LD_VAR 0 4
63942: MINUS
63943: ST_TO_ADDR
// max_x := x + r ;
63944: LD_ADDR_VAR 0 9
63948: PUSH
63949: LD_VAR 0 2
63953: PUSH
63954: LD_VAR 0 4
63958: PLUS
63959: ST_TO_ADDR
// max_y := y + r ;
63960: LD_ADDR_VAR 0 10
63964: PUSH
63965: LD_VAR 0 3
63969: PUSH
63970: LD_VAR 0 4
63974: PLUS
63975: ST_TO_ADDR
// for _x = min_x to max_x do
63976: LD_ADDR_VAR 0 11
63980: PUSH
63981: DOUBLE
63982: LD_VAR 0 7
63986: DEC
63987: ST_TO_ADDR
63988: LD_VAR 0 9
63992: PUSH
63993: FOR_TO
63994: IFFALSE 64111
// for _y = min_y to max_y do
63996: LD_ADDR_VAR 0 12
64000: PUSH
64001: DOUBLE
64002: LD_VAR 0 8
64006: DEC
64007: ST_TO_ADDR
64008: LD_VAR 0 10
64012: PUSH
64013: FOR_TO
64014: IFFALSE 64107
// begin if not ValidHex ( _x , _y ) then
64016: LD_VAR 0 11
64020: PPUSH
64021: LD_VAR 0 12
64025: PPUSH
64026: CALL_OW 488
64030: NOT
64031: IFFALSE 64035
// continue ;
64033: GO 64013
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64035: LD_VAR 0 11
64039: PPUSH
64040: LD_VAR 0 12
64044: PPUSH
64045: CALL_OW 351
64049: PUSH
64050: LD_VAR 0 11
64054: PPUSH
64055: LD_VAR 0 12
64059: PPUSH
64060: CALL_OW 554
64064: AND
64065: IFFALSE 64105
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64067: LD_ADDR_VAR 0 13
64071: PUSH
64072: LD_VAR 0 13
64076: PPUSH
64077: LD_VAR 0 13
64081: PUSH
64082: LD_INT 1
64084: PLUS
64085: PPUSH
64086: LD_VAR 0 11
64090: PUSH
64091: LD_VAR 0 12
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PPUSH
64100: CALL_OW 2
64104: ST_TO_ADDR
// end ;
64105: GO 64013
64107: POP
64108: POP
64109: GO 63993
64111: POP
64112: POP
// if not list then
64113: LD_VAR 0 13
64117: NOT
64118: IFFALSE 64122
// exit ;
64120: GO 64201
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
64122: LD_ADDR_VAR 0 13
64126: PUSH
64127: LD_VAR 0 1
64131: PPUSH
64132: LD_VAR 0 13
64136: PPUSH
64137: LD_INT 1
64139: PPUSH
64140: LD_INT 1
64142: PPUSH
64143: CALL 10151 0 4
64147: ST_TO_ADDR
// ComStop ( flame ) ;
64148: LD_VAR 0 1
64152: PPUSH
64153: CALL_OW 141
// for i in list do
64157: LD_ADDR_VAR 0 6
64161: PUSH
64162: LD_VAR 0 13
64166: PUSH
64167: FOR_IN
64168: IFFALSE 64199
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
64170: LD_VAR 0 1
64174: PPUSH
64175: LD_VAR 0 6
64179: PUSH
64180: LD_INT 1
64182: ARRAY
64183: PPUSH
64184: LD_VAR 0 6
64188: PUSH
64189: LD_INT 2
64191: ARRAY
64192: PPUSH
64193: CALL_OW 176
64197: GO 64167
64199: POP
64200: POP
// end ;
64201: LD_VAR 0 5
64205: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64206: LD_EXP 89
64210: NOT
64211: IFFALSE 64261
64213: GO 64215
64215: DISABLE
// begin initHack := true ;
64216: LD_ADDR_EXP 89
64220: PUSH
64221: LD_INT 1
64223: ST_TO_ADDR
// hackTanks := [ ] ;
64224: LD_ADDR_EXP 90
64228: PUSH
64229: EMPTY
64230: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64231: LD_ADDR_EXP 91
64235: PUSH
64236: EMPTY
64237: ST_TO_ADDR
// hackLimit := 3 ;
64238: LD_ADDR_EXP 92
64242: PUSH
64243: LD_INT 3
64245: ST_TO_ADDR
// hackDist := 12 ;
64246: LD_ADDR_EXP 93
64250: PUSH
64251: LD_INT 12
64253: ST_TO_ADDR
// hackCounter := [ ] ;
64254: LD_ADDR_EXP 94
64258: PUSH
64259: EMPTY
64260: ST_TO_ADDR
// end ;
64261: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64262: LD_EXP 89
64266: PUSH
64267: LD_INT 34
64269: PUSH
64270: LD_INT 99
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PPUSH
64277: CALL_OW 69
64281: AND
64282: IFFALSE 64535
64284: GO 64286
64286: DISABLE
64287: LD_INT 0
64289: PPUSH
64290: PPUSH
// begin enable ;
64291: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64292: LD_ADDR_VAR 0 1
64296: PUSH
64297: LD_INT 34
64299: PUSH
64300: LD_INT 99
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PPUSH
64307: CALL_OW 69
64311: PUSH
64312: FOR_IN
64313: IFFALSE 64533
// begin if not i in hackTanks then
64315: LD_VAR 0 1
64319: PUSH
64320: LD_EXP 90
64324: IN
64325: NOT
64326: IFFALSE 64409
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64328: LD_ADDR_EXP 90
64332: PUSH
64333: LD_EXP 90
64337: PPUSH
64338: LD_EXP 90
64342: PUSH
64343: LD_INT 1
64345: PLUS
64346: PPUSH
64347: LD_VAR 0 1
64351: PPUSH
64352: CALL_OW 1
64356: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64357: LD_ADDR_EXP 91
64361: PUSH
64362: LD_EXP 91
64366: PPUSH
64367: LD_EXP 91
64371: PUSH
64372: LD_INT 1
64374: PLUS
64375: PPUSH
64376: EMPTY
64377: PPUSH
64378: CALL_OW 1
64382: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64383: LD_ADDR_EXP 94
64387: PUSH
64388: LD_EXP 94
64392: PPUSH
64393: LD_EXP 94
64397: PUSH
64398: LD_INT 1
64400: PLUS
64401: PPUSH
64402: EMPTY
64403: PPUSH
64404: CALL_OW 1
64408: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64409: LD_VAR 0 1
64413: PPUSH
64414: CALL_OW 302
64418: NOT
64419: IFFALSE 64432
// begin HackUnlinkAll ( i ) ;
64421: LD_VAR 0 1
64425: PPUSH
64426: CALL 64538 0 1
// continue ;
64430: GO 64312
// end ; HackCheckCapturedStatus ( i ) ;
64432: LD_VAR 0 1
64436: PPUSH
64437: CALL 64981 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64441: LD_ADDR_VAR 0 2
64445: PUSH
64446: LD_INT 81
64448: PUSH
64449: LD_VAR 0 1
64453: PPUSH
64454: CALL_OW 255
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 33
64465: PUSH
64466: LD_INT 3
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 91
64475: PUSH
64476: LD_VAR 0 1
64480: PUSH
64481: LD_EXP 93
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 50
64493: PUSH
64494: EMPTY
64495: LIST
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: PPUSH
64503: CALL_OW 69
64507: ST_TO_ADDR
// if not tmp then
64508: LD_VAR 0 2
64512: NOT
64513: IFFALSE 64517
// continue ;
64515: GO 64312
// HackLink ( i , tmp ) ;
64517: LD_VAR 0 1
64521: PPUSH
64522: LD_VAR 0 2
64526: PPUSH
64527: CALL 64674 0 2
// end ;
64531: GO 64312
64533: POP
64534: POP
// end ;
64535: PPOPN 2
64537: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
64538: LD_INT 0
64540: PPUSH
64541: PPUSH
64542: PPUSH
// if not hack in hackTanks then
64543: LD_VAR 0 1
64547: PUSH
64548: LD_EXP 90
64552: IN
64553: NOT
64554: IFFALSE 64558
// exit ;
64556: GO 64669
// index := GetElementIndex ( hackTanks , hack ) ;
64558: LD_ADDR_VAR 0 4
64562: PUSH
64563: LD_EXP 90
64567: PPUSH
64568: LD_VAR 0 1
64572: PPUSH
64573: CALL 9448 0 2
64577: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
64578: LD_EXP 91
64582: PUSH
64583: LD_VAR 0 4
64587: ARRAY
64588: IFFALSE 64669
// begin for i in hackTanksCaptured [ index ] do
64590: LD_ADDR_VAR 0 3
64594: PUSH
64595: LD_EXP 91
64599: PUSH
64600: LD_VAR 0 4
64604: ARRAY
64605: PUSH
64606: FOR_IN
64607: IFFALSE 64633
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
64609: LD_VAR 0 3
64613: PUSH
64614: LD_INT 1
64616: ARRAY
64617: PPUSH
64618: LD_VAR 0 3
64622: PUSH
64623: LD_INT 2
64625: ARRAY
64626: PPUSH
64627: CALL_OW 235
64631: GO 64606
64633: POP
64634: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
64635: LD_ADDR_EXP 91
64639: PUSH
64640: LD_EXP 91
64644: PPUSH
64645: LD_VAR 0 4
64649: PPUSH
64650: EMPTY
64651: PPUSH
64652: CALL_OW 1
64656: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
64657: LD_VAR 0 1
64661: PPUSH
64662: LD_INT 0
64664: PPUSH
64665: CALL_OW 505
// end ; end ;
64669: LD_VAR 0 2
64673: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
64674: LD_INT 0
64676: PPUSH
64677: PPUSH
64678: PPUSH
// if not hack in hackTanks or not vehicles then
64679: LD_VAR 0 1
64683: PUSH
64684: LD_EXP 90
64688: IN
64689: NOT
64690: PUSH
64691: LD_VAR 0 2
64695: NOT
64696: OR
64697: IFFALSE 64701
// exit ;
64699: GO 64976
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
64701: LD_ADDR_VAR 0 2
64705: PUSH
64706: LD_VAR 0 1
64710: PPUSH
64711: LD_VAR 0 2
64715: PPUSH
64716: LD_INT 1
64718: PPUSH
64719: LD_INT 1
64721: PPUSH
64722: CALL 10098 0 4
64726: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
64727: LD_ADDR_VAR 0 5
64731: PUSH
64732: LD_EXP 90
64736: PPUSH
64737: LD_VAR 0 1
64741: PPUSH
64742: CALL 9448 0 2
64746: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
64747: LD_EXP 91
64751: PUSH
64752: LD_VAR 0 5
64756: ARRAY
64757: PUSH
64758: LD_EXP 92
64762: LESS
64763: IFFALSE 64952
// begin for i := 1 to vehicles do
64765: LD_ADDR_VAR 0 4
64769: PUSH
64770: DOUBLE
64771: LD_INT 1
64773: DEC
64774: ST_TO_ADDR
64775: LD_VAR 0 2
64779: PUSH
64780: FOR_TO
64781: IFFALSE 64950
// begin if hackTanksCaptured [ index ] = hackLimit then
64783: LD_EXP 91
64787: PUSH
64788: LD_VAR 0 5
64792: ARRAY
64793: PUSH
64794: LD_EXP 92
64798: EQUAL
64799: IFFALSE 64803
// break ;
64801: GO 64950
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
64803: LD_ADDR_EXP 94
64807: PUSH
64808: LD_EXP 94
64812: PPUSH
64813: LD_VAR 0 5
64817: PPUSH
64818: LD_EXP 94
64822: PUSH
64823: LD_VAR 0 5
64827: ARRAY
64828: PUSH
64829: LD_INT 1
64831: PLUS
64832: PPUSH
64833: CALL_OW 1
64837: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
64838: LD_ADDR_EXP 91
64842: PUSH
64843: LD_EXP 91
64847: PPUSH
64848: LD_VAR 0 5
64852: PUSH
64853: LD_EXP 91
64857: PUSH
64858: LD_VAR 0 5
64862: ARRAY
64863: PUSH
64864: LD_INT 1
64866: PLUS
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PPUSH
64872: LD_VAR 0 2
64876: PUSH
64877: LD_VAR 0 4
64881: ARRAY
64882: PUSH
64883: LD_VAR 0 2
64887: PUSH
64888: LD_VAR 0 4
64892: ARRAY
64893: PPUSH
64894: CALL_OW 255
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PPUSH
64903: CALL 9663 0 3
64907: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64908: LD_VAR 0 2
64912: PUSH
64913: LD_VAR 0 4
64917: ARRAY
64918: PPUSH
64919: LD_VAR 0 1
64923: PPUSH
64924: CALL_OW 255
64928: PPUSH
64929: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64933: LD_VAR 0 2
64937: PUSH
64938: LD_VAR 0 4
64942: ARRAY
64943: PPUSH
64944: CALL_OW 141
// end ;
64948: GO 64780
64950: POP
64951: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64952: LD_VAR 0 1
64956: PPUSH
64957: LD_EXP 91
64961: PUSH
64962: LD_VAR 0 5
64966: ARRAY
64967: PUSH
64968: LD_INT 0
64970: PLUS
64971: PPUSH
64972: CALL_OW 505
// end ;
64976: LD_VAR 0 3
64980: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64981: LD_INT 0
64983: PPUSH
64984: PPUSH
64985: PPUSH
64986: PPUSH
// if not hack in hackTanks then
64987: LD_VAR 0 1
64991: PUSH
64992: LD_EXP 90
64996: IN
64997: NOT
64998: IFFALSE 65002
// exit ;
65000: GO 65242
// index := GetElementIndex ( hackTanks , hack ) ;
65002: LD_ADDR_VAR 0 4
65006: PUSH
65007: LD_EXP 90
65011: PPUSH
65012: LD_VAR 0 1
65016: PPUSH
65017: CALL 9448 0 2
65021: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65022: LD_ADDR_VAR 0 3
65026: PUSH
65027: DOUBLE
65028: LD_EXP 91
65032: PUSH
65033: LD_VAR 0 4
65037: ARRAY
65038: INC
65039: ST_TO_ADDR
65040: LD_INT 1
65042: PUSH
65043: FOR_DOWNTO
65044: IFFALSE 65216
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65046: LD_ADDR_VAR 0 5
65050: PUSH
65051: LD_EXP 91
65055: PUSH
65056: LD_VAR 0 4
65060: ARRAY
65061: PUSH
65062: LD_VAR 0 3
65066: ARRAY
65067: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65068: LD_VAR 0 5
65072: PUSH
65073: LD_INT 1
65075: ARRAY
65076: PPUSH
65077: CALL_OW 302
65081: NOT
65082: PUSH
65083: LD_VAR 0 5
65087: PUSH
65088: LD_INT 1
65090: ARRAY
65091: PPUSH
65092: CALL_OW 255
65096: PUSH
65097: LD_VAR 0 1
65101: PPUSH
65102: CALL_OW 255
65106: NONEQUAL
65107: OR
65108: IFFALSE 65214
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65110: LD_VAR 0 5
65114: PUSH
65115: LD_INT 1
65117: ARRAY
65118: PPUSH
65119: CALL_OW 305
65123: PUSH
65124: LD_VAR 0 5
65128: PUSH
65129: LD_INT 1
65131: ARRAY
65132: PPUSH
65133: CALL_OW 255
65137: PUSH
65138: LD_VAR 0 1
65142: PPUSH
65143: CALL_OW 255
65147: EQUAL
65148: AND
65149: IFFALSE 65173
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65151: LD_VAR 0 5
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: PPUSH
65160: LD_VAR 0 5
65164: PUSH
65165: LD_INT 2
65167: ARRAY
65168: PPUSH
65169: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65173: LD_ADDR_EXP 91
65177: PUSH
65178: LD_EXP 91
65182: PPUSH
65183: LD_VAR 0 4
65187: PPUSH
65188: LD_EXP 91
65192: PUSH
65193: LD_VAR 0 4
65197: ARRAY
65198: PPUSH
65199: LD_VAR 0 3
65203: PPUSH
65204: CALL_OW 3
65208: PPUSH
65209: CALL_OW 1
65213: ST_TO_ADDR
// end ; end ;
65214: GO 65043
65216: POP
65217: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65218: LD_VAR 0 1
65222: PPUSH
65223: LD_EXP 91
65227: PUSH
65228: LD_VAR 0 4
65232: ARRAY
65233: PUSH
65234: LD_INT 0
65236: PLUS
65237: PPUSH
65238: CALL_OW 505
// end ;
65242: LD_VAR 0 2
65246: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65247: LD_INT 0
65249: PPUSH
65250: PPUSH
65251: PPUSH
65252: PPUSH
// if not hack in hackTanks then
65253: LD_VAR 0 1
65257: PUSH
65258: LD_EXP 90
65262: IN
65263: NOT
65264: IFFALSE 65268
// exit ;
65266: GO 65353
// index := GetElementIndex ( hackTanks , hack ) ;
65268: LD_ADDR_VAR 0 5
65272: PUSH
65273: LD_EXP 90
65277: PPUSH
65278: LD_VAR 0 1
65282: PPUSH
65283: CALL 9448 0 2
65287: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65288: LD_ADDR_VAR 0 4
65292: PUSH
65293: DOUBLE
65294: LD_INT 1
65296: DEC
65297: ST_TO_ADDR
65298: LD_EXP 91
65302: PUSH
65303: LD_VAR 0 5
65307: ARRAY
65308: PUSH
65309: FOR_TO
65310: IFFALSE 65351
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65312: LD_EXP 91
65316: PUSH
65317: LD_VAR 0 5
65321: ARRAY
65322: PUSH
65323: LD_VAR 0 4
65327: ARRAY
65328: PUSH
65329: LD_INT 1
65331: ARRAY
65332: PUSH
65333: LD_VAR 0 2
65337: EQUAL
65338: IFFALSE 65349
// KillUnit ( vehicle ) ;
65340: LD_VAR 0 2
65344: PPUSH
65345: CALL_OW 66
65349: GO 65309
65351: POP
65352: POP
// end ;
65353: LD_VAR 0 3
65357: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65358: LD_EXP 95
65362: NOT
65363: IFFALSE 65398
65365: GO 65367
65367: DISABLE
// begin initMiner := true ;
65368: LD_ADDR_EXP 95
65372: PUSH
65373: LD_INT 1
65375: ST_TO_ADDR
// minersList := [ ] ;
65376: LD_ADDR_EXP 96
65380: PUSH
65381: EMPTY
65382: ST_TO_ADDR
// minerMinesList := [ ] ;
65383: LD_ADDR_EXP 97
65387: PUSH
65388: EMPTY
65389: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65390: LD_ADDR_EXP 98
65394: PUSH
65395: LD_INT 5
65397: ST_TO_ADDR
// end ;
65398: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65399: LD_EXP 95
65403: PUSH
65404: LD_INT 34
65406: PUSH
65407: LD_INT 81
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PPUSH
65414: CALL_OW 69
65418: AND
65419: IFFALSE 65880
65421: GO 65423
65423: DISABLE
65424: LD_INT 0
65426: PPUSH
65427: PPUSH
65428: PPUSH
65429: PPUSH
// begin enable ;
65430: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65431: LD_ADDR_VAR 0 1
65435: PUSH
65436: LD_INT 34
65438: PUSH
65439: LD_INT 81
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PPUSH
65446: CALL_OW 69
65450: PUSH
65451: FOR_IN
65452: IFFALSE 65524
// begin if not i in minersList then
65454: LD_VAR 0 1
65458: PUSH
65459: LD_EXP 96
65463: IN
65464: NOT
65465: IFFALSE 65522
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
65467: LD_ADDR_EXP 96
65471: PUSH
65472: LD_EXP 96
65476: PPUSH
65477: LD_EXP 96
65481: PUSH
65482: LD_INT 1
65484: PLUS
65485: PPUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL_OW 1
65495: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
65496: LD_ADDR_EXP 97
65500: PUSH
65501: LD_EXP 97
65505: PPUSH
65506: LD_EXP 97
65510: PUSH
65511: LD_INT 1
65513: PLUS
65514: PPUSH
65515: EMPTY
65516: PPUSH
65517: CALL_OW 1
65521: ST_TO_ADDR
// end end ;
65522: GO 65451
65524: POP
65525: POP
// for i := minerMinesList downto 1 do
65526: LD_ADDR_VAR 0 1
65530: PUSH
65531: DOUBLE
65532: LD_EXP 97
65536: INC
65537: ST_TO_ADDR
65538: LD_INT 1
65540: PUSH
65541: FOR_DOWNTO
65542: IFFALSE 65878
// begin if IsLive ( minersList [ i ] ) then
65544: LD_EXP 96
65548: PUSH
65549: LD_VAR 0 1
65553: ARRAY
65554: PPUSH
65555: CALL_OW 300
65559: IFFALSE 65587
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
65561: LD_EXP 96
65565: PUSH
65566: LD_VAR 0 1
65570: ARRAY
65571: PPUSH
65572: LD_EXP 97
65576: PUSH
65577: LD_VAR 0 1
65581: ARRAY
65582: PPUSH
65583: CALL_OW 505
// if not minerMinesList [ i ] then
65587: LD_EXP 97
65591: PUSH
65592: LD_VAR 0 1
65596: ARRAY
65597: NOT
65598: IFFALSE 65602
// continue ;
65600: GO 65541
// for j := minerMinesList [ i ] downto 1 do
65602: LD_ADDR_VAR 0 2
65606: PUSH
65607: DOUBLE
65608: LD_EXP 97
65612: PUSH
65613: LD_VAR 0 1
65617: ARRAY
65618: INC
65619: ST_TO_ADDR
65620: LD_INT 1
65622: PUSH
65623: FOR_DOWNTO
65624: IFFALSE 65874
// begin side := GetSide ( minersList [ i ] ) ;
65626: LD_ADDR_VAR 0 3
65630: PUSH
65631: LD_EXP 96
65635: PUSH
65636: LD_VAR 0 1
65640: ARRAY
65641: PPUSH
65642: CALL_OW 255
65646: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
65647: LD_ADDR_VAR 0 4
65651: PUSH
65652: LD_EXP 97
65656: PUSH
65657: LD_VAR 0 1
65661: ARRAY
65662: PUSH
65663: LD_VAR 0 2
65667: ARRAY
65668: PUSH
65669: LD_INT 1
65671: ARRAY
65672: PPUSH
65673: LD_EXP 97
65677: PUSH
65678: LD_VAR 0 1
65682: ARRAY
65683: PUSH
65684: LD_VAR 0 2
65688: ARRAY
65689: PUSH
65690: LD_INT 2
65692: ARRAY
65693: PPUSH
65694: CALL_OW 428
65698: ST_TO_ADDR
// if not tmp then
65699: LD_VAR 0 4
65703: NOT
65704: IFFALSE 65708
// continue ;
65706: GO 65623
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
65708: LD_VAR 0 4
65712: PUSH
65713: LD_INT 81
65715: PUSH
65716: LD_VAR 0 3
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PPUSH
65725: CALL_OW 69
65729: IN
65730: PUSH
65731: LD_EXP 97
65735: PUSH
65736: LD_VAR 0 1
65740: ARRAY
65741: PUSH
65742: LD_VAR 0 2
65746: ARRAY
65747: PUSH
65748: LD_INT 1
65750: ARRAY
65751: PPUSH
65752: LD_EXP 97
65756: PUSH
65757: LD_VAR 0 1
65761: ARRAY
65762: PUSH
65763: LD_VAR 0 2
65767: ARRAY
65768: PUSH
65769: LD_INT 2
65771: ARRAY
65772: PPUSH
65773: CALL_OW 458
65777: AND
65778: IFFALSE 65872
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
65780: LD_EXP 97
65784: PUSH
65785: LD_VAR 0 1
65789: ARRAY
65790: PUSH
65791: LD_VAR 0 2
65795: ARRAY
65796: PUSH
65797: LD_INT 1
65799: ARRAY
65800: PPUSH
65801: LD_EXP 97
65805: PUSH
65806: LD_VAR 0 1
65810: ARRAY
65811: PUSH
65812: LD_VAR 0 2
65816: ARRAY
65817: PUSH
65818: LD_INT 2
65820: ARRAY
65821: PPUSH
65822: LD_VAR 0 3
65826: PPUSH
65827: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
65831: LD_ADDR_EXP 97
65835: PUSH
65836: LD_EXP 97
65840: PPUSH
65841: LD_VAR 0 1
65845: PPUSH
65846: LD_EXP 97
65850: PUSH
65851: LD_VAR 0 1
65855: ARRAY
65856: PPUSH
65857: LD_VAR 0 2
65861: PPUSH
65862: CALL_OW 3
65866: PPUSH
65867: CALL_OW 1
65871: ST_TO_ADDR
// end ; end ;
65872: GO 65623
65874: POP
65875: POP
// end ;
65876: GO 65541
65878: POP
65879: POP
// end ;
65880: PPOPN 4
65882: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
65883: LD_INT 0
65885: PPUSH
65886: PPUSH
// result := false ;
65887: LD_ADDR_VAR 0 4
65891: PUSH
65892: LD_INT 0
65894: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65895: LD_VAR 0 1
65899: PPUSH
65900: CALL_OW 264
65904: PUSH
65905: LD_INT 81
65907: EQUAL
65908: NOT
65909: IFFALSE 65913
// exit ;
65911: GO 66153
// index := GetElementIndex ( minersList , unit ) ;
65913: LD_ADDR_VAR 0 5
65917: PUSH
65918: LD_EXP 96
65922: PPUSH
65923: LD_VAR 0 1
65927: PPUSH
65928: CALL 9448 0 2
65932: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65933: LD_EXP 97
65937: PUSH
65938: LD_VAR 0 5
65942: ARRAY
65943: PUSH
65944: LD_EXP 98
65948: GREATEREQUAL
65949: IFFALSE 65953
// exit ;
65951: GO 66153
// ComMoveXY ( unit , x , y ) ;
65953: LD_VAR 0 1
65957: PPUSH
65958: LD_VAR 0 2
65962: PPUSH
65963: LD_VAR 0 3
65967: PPUSH
65968: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65972: LD_INT 35
65974: PPUSH
65975: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65979: LD_VAR 0 1
65983: PPUSH
65984: LD_VAR 0 2
65988: PPUSH
65989: LD_VAR 0 3
65993: PPUSH
65994: CALL 41200 0 3
65998: NOT
65999: PUSH
66000: LD_VAR 0 1
66004: PPUSH
66005: CALL_OW 314
66009: AND
66010: IFFALSE 66014
// exit ;
66012: GO 66153
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66014: LD_VAR 0 2
66018: PPUSH
66019: LD_VAR 0 3
66023: PPUSH
66024: CALL_OW 428
66028: PUSH
66029: LD_VAR 0 1
66033: EQUAL
66034: PUSH
66035: LD_VAR 0 1
66039: PPUSH
66040: CALL_OW 314
66044: NOT
66045: AND
66046: IFFALSE 65972
// PlaySoundXY ( x , y , PlantMine ) ;
66048: LD_VAR 0 2
66052: PPUSH
66053: LD_VAR 0 3
66057: PPUSH
66058: LD_STRING PlantMine
66060: PPUSH
66061: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66065: LD_VAR 0 2
66069: PPUSH
66070: LD_VAR 0 3
66074: PPUSH
66075: LD_VAR 0 1
66079: PPUSH
66080: CALL_OW 255
66084: PPUSH
66085: LD_INT 0
66087: PPUSH
66088: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66092: LD_ADDR_EXP 97
66096: PUSH
66097: LD_EXP 97
66101: PPUSH
66102: LD_VAR 0 5
66106: PUSH
66107: LD_EXP 97
66111: PUSH
66112: LD_VAR 0 5
66116: ARRAY
66117: PUSH
66118: LD_INT 1
66120: PLUS
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PPUSH
66126: LD_VAR 0 2
66130: PUSH
66131: LD_VAR 0 3
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PPUSH
66140: CALL 9663 0 3
66144: ST_TO_ADDR
// result := true ;
66145: LD_ADDR_VAR 0 4
66149: PUSH
66150: LD_INT 1
66152: ST_TO_ADDR
// end ;
66153: LD_VAR 0 4
66157: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66158: LD_INT 0
66160: PPUSH
66161: PPUSH
66162: PPUSH
// if not unit in minersList then
66163: LD_VAR 0 1
66167: PUSH
66168: LD_EXP 96
66172: IN
66173: NOT
66174: IFFALSE 66178
// exit ;
66176: GO 66570
// index := GetElementIndex ( minersList , unit ) ;
66178: LD_ADDR_VAR 0 6
66182: PUSH
66183: LD_EXP 96
66187: PPUSH
66188: LD_VAR 0 1
66192: PPUSH
66193: CALL 9448 0 2
66197: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66198: LD_ADDR_VAR 0 5
66202: PUSH
66203: DOUBLE
66204: LD_EXP 97
66208: PUSH
66209: LD_VAR 0 6
66213: ARRAY
66214: INC
66215: ST_TO_ADDR
66216: LD_INT 1
66218: PUSH
66219: FOR_DOWNTO
66220: IFFALSE 66381
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66222: LD_EXP 97
66226: PUSH
66227: LD_VAR 0 6
66231: ARRAY
66232: PUSH
66233: LD_VAR 0 5
66237: ARRAY
66238: PUSH
66239: LD_INT 1
66241: ARRAY
66242: PUSH
66243: LD_VAR 0 2
66247: EQUAL
66248: PUSH
66249: LD_EXP 97
66253: PUSH
66254: LD_VAR 0 6
66258: ARRAY
66259: PUSH
66260: LD_VAR 0 5
66264: ARRAY
66265: PUSH
66266: LD_INT 2
66268: ARRAY
66269: PUSH
66270: LD_VAR 0 3
66274: EQUAL
66275: AND
66276: IFFALSE 66379
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66278: LD_EXP 97
66282: PUSH
66283: LD_VAR 0 6
66287: ARRAY
66288: PUSH
66289: LD_VAR 0 5
66293: ARRAY
66294: PUSH
66295: LD_INT 1
66297: ARRAY
66298: PPUSH
66299: LD_EXP 97
66303: PUSH
66304: LD_VAR 0 6
66308: ARRAY
66309: PUSH
66310: LD_VAR 0 5
66314: ARRAY
66315: PUSH
66316: LD_INT 2
66318: ARRAY
66319: PPUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: CALL_OW 255
66329: PPUSH
66330: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66334: LD_ADDR_EXP 97
66338: PUSH
66339: LD_EXP 97
66343: PPUSH
66344: LD_VAR 0 6
66348: PPUSH
66349: LD_EXP 97
66353: PUSH
66354: LD_VAR 0 6
66358: ARRAY
66359: PPUSH
66360: LD_VAR 0 5
66364: PPUSH
66365: CALL_OW 3
66369: PPUSH
66370: CALL_OW 1
66374: ST_TO_ADDR
// exit ;
66375: POP
66376: POP
66377: GO 66570
// end ; end ;
66379: GO 66219
66381: POP
66382: POP
// for i := minerMinesList [ index ] downto 1 do
66383: LD_ADDR_VAR 0 5
66387: PUSH
66388: DOUBLE
66389: LD_EXP 97
66393: PUSH
66394: LD_VAR 0 6
66398: ARRAY
66399: INC
66400: ST_TO_ADDR
66401: LD_INT 1
66403: PUSH
66404: FOR_DOWNTO
66405: IFFALSE 66568
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66407: LD_EXP 97
66411: PUSH
66412: LD_VAR 0 6
66416: ARRAY
66417: PUSH
66418: LD_VAR 0 5
66422: ARRAY
66423: PUSH
66424: LD_INT 1
66426: ARRAY
66427: PPUSH
66428: LD_EXP 97
66432: PUSH
66433: LD_VAR 0 6
66437: ARRAY
66438: PUSH
66439: LD_VAR 0 5
66443: ARRAY
66444: PUSH
66445: LD_INT 2
66447: ARRAY
66448: PPUSH
66449: LD_VAR 0 2
66453: PPUSH
66454: LD_VAR 0 3
66458: PPUSH
66459: CALL_OW 298
66463: PUSH
66464: LD_INT 6
66466: LESS
66467: IFFALSE 66566
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66469: LD_EXP 97
66473: PUSH
66474: LD_VAR 0 6
66478: ARRAY
66479: PUSH
66480: LD_VAR 0 5
66484: ARRAY
66485: PUSH
66486: LD_INT 1
66488: ARRAY
66489: PPUSH
66490: LD_EXP 97
66494: PUSH
66495: LD_VAR 0 6
66499: ARRAY
66500: PUSH
66501: LD_VAR 0 5
66505: ARRAY
66506: PUSH
66507: LD_INT 2
66509: ARRAY
66510: PPUSH
66511: LD_VAR 0 1
66515: PPUSH
66516: CALL_OW 255
66520: PPUSH
66521: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66525: LD_ADDR_EXP 97
66529: PUSH
66530: LD_EXP 97
66534: PPUSH
66535: LD_VAR 0 6
66539: PPUSH
66540: LD_EXP 97
66544: PUSH
66545: LD_VAR 0 6
66549: ARRAY
66550: PPUSH
66551: LD_VAR 0 5
66555: PPUSH
66556: CALL_OW 3
66560: PPUSH
66561: CALL_OW 1
66565: ST_TO_ADDR
// end ; end ;
66566: GO 66404
66568: POP
66569: POP
// end ;
66570: LD_VAR 0 4
66574: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
66575: LD_INT 0
66577: PPUSH
66578: PPUSH
66579: PPUSH
66580: PPUSH
66581: PPUSH
66582: PPUSH
66583: PPUSH
66584: PPUSH
66585: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
66586: LD_VAR 0 1
66590: PPUSH
66591: CALL_OW 264
66595: PUSH
66596: LD_INT 81
66598: EQUAL
66599: NOT
66600: PUSH
66601: LD_VAR 0 1
66605: PUSH
66606: LD_EXP 96
66610: IN
66611: NOT
66612: OR
66613: IFFALSE 66617
// exit ;
66615: GO 66939
// index := GetElementIndex ( minersList , unit ) ;
66617: LD_ADDR_VAR 0 6
66621: PUSH
66622: LD_EXP 96
66626: PPUSH
66627: LD_VAR 0 1
66631: PPUSH
66632: CALL 9448 0 2
66636: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
66637: LD_ADDR_VAR 0 8
66641: PUSH
66642: LD_EXP 98
66646: PUSH
66647: LD_EXP 97
66651: PUSH
66652: LD_VAR 0 6
66656: ARRAY
66657: MINUS
66658: ST_TO_ADDR
// if not minesFreeAmount then
66659: LD_VAR 0 8
66663: NOT
66664: IFFALSE 66668
// exit ;
66666: GO 66939
// tmp := [ ] ;
66668: LD_ADDR_VAR 0 7
66672: PUSH
66673: EMPTY
66674: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
66675: LD_ADDR_VAR 0 5
66679: PUSH
66680: DOUBLE
66681: LD_INT 1
66683: DEC
66684: ST_TO_ADDR
66685: LD_VAR 0 8
66689: PUSH
66690: FOR_TO
66691: IFFALSE 66886
// begin _d := rand ( 0 , 5 ) ;
66693: LD_ADDR_VAR 0 11
66697: PUSH
66698: LD_INT 0
66700: PPUSH
66701: LD_INT 5
66703: PPUSH
66704: CALL_OW 12
66708: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
66709: LD_ADDR_VAR 0 12
66713: PUSH
66714: LD_INT 2
66716: PPUSH
66717: LD_INT 6
66719: PPUSH
66720: CALL_OW 12
66724: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
66725: LD_ADDR_VAR 0 9
66729: PUSH
66730: LD_VAR 0 2
66734: PPUSH
66735: LD_VAR 0 11
66739: PPUSH
66740: LD_VAR 0 12
66744: PPUSH
66745: CALL_OW 272
66749: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
66750: LD_ADDR_VAR 0 10
66754: PUSH
66755: LD_VAR 0 3
66759: PPUSH
66760: LD_VAR 0 11
66764: PPUSH
66765: LD_VAR 0 12
66769: PPUSH
66770: CALL_OW 273
66774: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
66775: LD_VAR 0 9
66779: PPUSH
66780: LD_VAR 0 10
66784: PPUSH
66785: CALL_OW 488
66789: PUSH
66790: LD_VAR 0 9
66794: PUSH
66795: LD_VAR 0 10
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_VAR 0 7
66808: IN
66809: NOT
66810: AND
66811: PUSH
66812: LD_VAR 0 9
66816: PPUSH
66817: LD_VAR 0 10
66821: PPUSH
66822: CALL_OW 458
66826: NOT
66827: AND
66828: IFFALSE 66870
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
66830: LD_ADDR_VAR 0 7
66834: PUSH
66835: LD_VAR 0 7
66839: PPUSH
66840: LD_VAR 0 7
66844: PUSH
66845: LD_INT 1
66847: PLUS
66848: PPUSH
66849: LD_VAR 0 9
66853: PUSH
66854: LD_VAR 0 10
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PPUSH
66863: CALL_OW 1
66867: ST_TO_ADDR
66868: GO 66884
// i := i - 1 ;
66870: LD_ADDR_VAR 0 5
66874: PUSH
66875: LD_VAR 0 5
66879: PUSH
66880: LD_INT 1
66882: MINUS
66883: ST_TO_ADDR
// end ;
66884: GO 66690
66886: POP
66887: POP
// for i in tmp do
66888: LD_ADDR_VAR 0 5
66892: PUSH
66893: LD_VAR 0 7
66897: PUSH
66898: FOR_IN
66899: IFFALSE 66937
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66901: LD_VAR 0 1
66905: PPUSH
66906: LD_VAR 0 5
66910: PUSH
66911: LD_INT 1
66913: ARRAY
66914: PPUSH
66915: LD_VAR 0 5
66919: PUSH
66920: LD_INT 2
66922: ARRAY
66923: PPUSH
66924: CALL 65883 0 3
66928: NOT
66929: IFFALSE 66935
// exit ;
66931: POP
66932: POP
66933: GO 66939
66935: GO 66898
66937: POP
66938: POP
// end ;
66939: LD_VAR 0 4
66943: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66944: LD_INT 0
66946: PPUSH
66947: PPUSH
66948: PPUSH
66949: PPUSH
66950: PPUSH
66951: PPUSH
66952: PPUSH
// if not GetClass ( unit ) = class_sniper then
66953: LD_VAR 0 1
66957: PPUSH
66958: CALL_OW 257
66962: PUSH
66963: LD_INT 5
66965: EQUAL
66966: NOT
66967: IFFALSE 66971
// exit ;
66969: GO 67359
// dist := 8 ;
66971: LD_ADDR_VAR 0 5
66975: PUSH
66976: LD_INT 8
66978: ST_TO_ADDR
// viewRange := 12 ;
66979: LD_ADDR_VAR 0 7
66983: PUSH
66984: LD_INT 12
66986: ST_TO_ADDR
// side := GetSide ( unit ) ;
66987: LD_ADDR_VAR 0 6
66991: PUSH
66992: LD_VAR 0 1
66996: PPUSH
66997: CALL_OW 255
67001: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67002: LD_INT 61
67004: PPUSH
67005: LD_VAR 0 6
67009: PPUSH
67010: CALL_OW 321
67014: PUSH
67015: LD_INT 2
67017: EQUAL
67018: IFFALSE 67028
// viewRange := 16 ;
67020: LD_ADDR_VAR 0 7
67024: PUSH
67025: LD_INT 16
67027: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67028: LD_VAR 0 1
67032: PPUSH
67033: LD_VAR 0 2
67037: PPUSH
67038: LD_VAR 0 3
67042: PPUSH
67043: CALL_OW 297
67047: PUSH
67048: LD_VAR 0 5
67052: GREATER
67053: IFFALSE 67132
// begin ComMoveXY ( unit , x , y ) ;
67055: LD_VAR 0 1
67059: PPUSH
67060: LD_VAR 0 2
67064: PPUSH
67065: LD_VAR 0 3
67069: PPUSH
67070: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67074: LD_INT 35
67076: PPUSH
67077: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67081: LD_VAR 0 1
67085: PPUSH
67086: LD_VAR 0 2
67090: PPUSH
67091: LD_VAR 0 3
67095: PPUSH
67096: CALL 41200 0 3
67100: NOT
67101: IFFALSE 67105
// exit ;
67103: GO 67359
// until GetDistUnitXY ( unit , x , y ) < dist ;
67105: LD_VAR 0 1
67109: PPUSH
67110: LD_VAR 0 2
67114: PPUSH
67115: LD_VAR 0 3
67119: PPUSH
67120: CALL_OW 297
67124: PUSH
67125: LD_VAR 0 5
67129: LESS
67130: IFFALSE 67074
// end ; ComTurnXY ( unit , x , y ) ;
67132: LD_VAR 0 1
67136: PPUSH
67137: LD_VAR 0 2
67141: PPUSH
67142: LD_VAR 0 3
67146: PPUSH
67147: CALL_OW 118
// wait ( 5 ) ;
67151: LD_INT 5
67153: PPUSH
67154: CALL_OW 67
// _d := GetDir ( unit ) ;
67158: LD_ADDR_VAR 0 10
67162: PUSH
67163: LD_VAR 0 1
67167: PPUSH
67168: CALL_OW 254
67172: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67173: LD_ADDR_VAR 0 8
67177: PUSH
67178: LD_VAR 0 1
67182: PPUSH
67183: CALL_OW 250
67187: PPUSH
67188: LD_VAR 0 10
67192: PPUSH
67193: LD_VAR 0 5
67197: PPUSH
67198: CALL_OW 272
67202: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67203: LD_ADDR_VAR 0 9
67207: PUSH
67208: LD_VAR 0 1
67212: PPUSH
67213: CALL_OW 251
67217: PPUSH
67218: LD_VAR 0 10
67222: PPUSH
67223: LD_VAR 0 5
67227: PPUSH
67228: CALL_OW 273
67232: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67233: LD_VAR 0 8
67237: PPUSH
67238: LD_VAR 0 9
67242: PPUSH
67243: CALL_OW 488
67247: NOT
67248: IFFALSE 67252
// exit ;
67250: GO 67359
// ComAnimCustom ( unit , 1 ) ;
67252: LD_VAR 0 1
67256: PPUSH
67257: LD_INT 1
67259: PPUSH
67260: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67264: LD_VAR 0 8
67268: PPUSH
67269: LD_VAR 0 9
67273: PPUSH
67274: LD_VAR 0 6
67278: PPUSH
67279: LD_VAR 0 7
67283: PPUSH
67284: CALL_OW 330
// repeat wait ( 1 ) ;
67288: LD_INT 1
67290: PPUSH
67291: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67295: LD_VAR 0 1
67299: PPUSH
67300: CALL_OW 316
67304: PUSH
67305: LD_VAR 0 1
67309: PPUSH
67310: CALL_OW 314
67314: OR
67315: PUSH
67316: LD_VAR 0 1
67320: PPUSH
67321: CALL_OW 302
67325: NOT
67326: OR
67327: PUSH
67328: LD_VAR 0 1
67332: PPUSH
67333: CALL_OW 301
67337: OR
67338: IFFALSE 67288
// RemoveSeeing ( _x , _y , side ) ;
67340: LD_VAR 0 8
67344: PPUSH
67345: LD_VAR 0 9
67349: PPUSH
67350: LD_VAR 0 6
67354: PPUSH
67355: CALL_OW 331
// end ;
67359: LD_VAR 0 4
67363: RET
