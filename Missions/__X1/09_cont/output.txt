// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42949 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42949 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42949 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6973 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9769 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9769 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 39076 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 39227 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 39456 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 39352 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42949 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42949 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42949 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 64645 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 64703 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42949 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42921 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42921 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 57
2517: PUSH
2518: EMPTY
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 69
2534: IFFALSE 2485
// DialogueOn ;
2536: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2540: LD_EXP 18
2544: PPUSH
2545: LD_STRING DL-Intro-18
2547: PPUSH
2548: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2552: LD_EXP 18
2556: PPUSH
2557: LD_STRING DL-Intro-19
2559: PPUSH
2560: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2564: LD_EXP 18
2568: PPUSH
2569: LD_STRING DL-Intro-20
2571: PPUSH
2572: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_STRING DLt-Intro-21
2583: PPUSH
2584: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2588: LD_EXP 20
2592: PPUSH
2593: LD_STRING DLt-Intro-22
2595: PPUSH
2596: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2600: LD_EXP 20
2604: PPUSH
2605: LD_STRING DLt-Intro-23
2607: PPUSH
2608: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2612: LD_EXP 18
2616: PPUSH
2617: LD_STRING DL-Intro-24
2619: PPUSH
2620: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2624: LD_EXP 20
2628: PPUSH
2629: LD_STRING DLt-Intro-25
2631: PPUSH
2632: CALL_OW 88
// DialogueOff ;
2636: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2640: LD_STRING M2
2642: PPUSH
2643: CALL_OW 337
// Query ( Prepare ) ;
2647: LD_STRING Prepare
2649: PPUSH
2650: CALL_OW 97
// SaveForQuickRestart ;
2654: CALL_OW 22
// end ;
2658: LD_VAR 0 1
2662: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2663: LD_INT 22
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 15
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: IFFALSE 2708
2693: GO 2695
2695: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2696: LD_EXP 18
2700: PPUSH
2701: LD_STRING DL-Cam-1
2703: PPUSH
2704: CALL_OW 88
2708: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2709: LD_OWVAR 1
2713: PUSH
2714: LD_EXP 4
2718: PUSH
2719: LD_INT 2
2721: DIV
2722: GREATEREQUAL
2723: IFFALSE 2748
2725: GO 2727
2727: DISABLE
// begin DialogueOn ;
2728: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2732: LD_EXP 18
2736: PPUSH
2737: LD_STRING DL-Faster-1
2739: PPUSH
2740: CALL_OW 88
// DialogueOff ;
2744: CALL_OW 7
// end ;
2748: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2749: LD_OWVAR 1
2753: PUSH
2754: LD_EXP 4
2758: PUSH
2759: LD_INT 2
2761: DIV
2762: PUSH
2763: LD_INT 10500
2765: PLUS
2766: GREATEREQUAL
2767: IFFALSE 2792
2769: GO 2771
2771: DISABLE
// begin DialogueOn ;
2772: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2776: LD_EXP 18
2780: PPUSH
2781: LD_STRING DL-Faster-2
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// end ;
2792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2793: LD_INT 22
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 57
2808: PUSH
2809: EMPTY
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 2
2818: PUSH
2819: LD_INT 30
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: IFFALSE 2910
2866: PUSH
2867: LD_INT 22
2869: PUSH
2870: LD_INT 2
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 3
2879: PUSH
2880: LD_INT 57
2882: PUSH
2883: EMPTY
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 30
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: LIST
2904: PPUSH
2905: CALL_OW 69
2909: AND
2910: IFFALSE 2960
2912: PUSH
2913: LD_INT 22
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 57
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 30
2938: PUSH
2939: LD_INT 32
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PPUSH
2951: CALL_OW 69
2955: PUSH
2956: LD_INT 3
2958: GREATEREQUAL
2959: AND
2960: IFFALSE 3006
2962: PUSH
2963: LD_INT 22
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: LD_INT 57
2978: PUSH
2979: EMPTY
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 30
2988: PUSH
2989: LD_INT 5
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: PPUSH
3001: CALL_OW 69
3005: AND
3006: IFFALSE 3052
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 2
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 3
3021: PUSH
3022: LD_INT 57
3024: PUSH
3025: EMPTY
3026: LIST
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 30
3034: PUSH
3035: LD_INT 30
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: AND
3052: IFFALSE 3116
3054: PUSH
3055: LD_INT 22
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 57
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 2
3080: PUSH
3081: LD_INT 30
3083: PUSH
3084: LD_INT 26
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 30
3093: PUSH
3094: LD_INT 28
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 69
3115: AND
3116: IFFALSE 3153
3118: GO 3120
3120: DISABLE
// begin if tick <= 10 10$00 then
3121: LD_OWVAR 1
3125: PUSH
3126: LD_INT 21000
3128: LESSEQUAL
3129: IFFALSE 3138
// SetAchievement ( ACH_BOB ) ;
3131: LD_STRING ACH_BOB
3133: PPUSH
3134: CALL_OW 543
// baseDone := true ;
3138: LD_ADDR_EXP 5
3142: PUSH
3143: LD_INT 1
3145: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3146: LD_STRING M1out
3148: PPUSH
3149: CALL_OW 337
// end ;
3153: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3154: LD_EXP 5
3158: IFFALSE 3272
3160: PUSH
3161: LD_INT 22
3163: PUSH
3164: LD_INT 2
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 21
3173: PUSH
3174: LD_INT 2
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: LD_INT 3
3183: PUSH
3184: LD_INT 2
3186: PUSH
3187: LD_INT 34
3189: PUSH
3190: LD_INT 32
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 34
3199: PUSH
3200: LD_INT 88
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: PUSH
3226: LD_INT 22
3228: PUSH
3229: LD_INT 2
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 21
3238: PUSH
3239: LD_INT 1
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 23
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: PPUSH
3261: CALL_OW 69
3265: PPUSH
3266: CALL 6973 0 1
3270: GREATEREQUAL
3271: AND
3272: IFFALSE 3364
3274: GO 3276
3276: DISABLE
// begin DialogueOn ;
3277: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3281: LD_EXP 18
3285: PPUSH
3286: LD_STRING DL-Ready-1
3288: PPUSH
3289: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3293: LD_INT 22
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 23
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: IFFALSE 3335
// Say ( Schulz , DL-Ready-2 ) ;
3323: LD_EXP 18
3327: PPUSH
3328: LD_STRING DL-Ready-2
3330: PPUSH
3331: CALL_OW 88
// DialogueOff ;
3335: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3339: LD_STRING M3
3341: PPUSH
3342: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3346: LD_INT 7
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: CALL_OW 424
// canGo := true ;
3356: LD_ADDR_EXP 6
3360: PUSH
3361: LD_INT 1
3363: ST_TO_ADDR
// end ;
3364: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3365: LD_EXP 6
3369: IFFALSE 3480
3371: PUSH
3372: LD_INT 7
3374: PPUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 2
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 21
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 33
3397: PUSH
3398: LD_INT 1
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 58
3410: PUSH
3411: EMPTY
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 70
3428: PPUSH
3429: CALL 6973 0 1
3433: PUSH
3434: LD_INT 22
3436: PUSH
3437: LD_INT 2
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 21
3446: PUSH
3447: LD_INT 1
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: LD_INT 23
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: PPUSH
3474: CALL 6973 0 1
3478: GREATEREQUAL
3479: AND
3480: IFFALSE 3546
3482: PUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 21
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 3
3505: PUSH
3506: LD_INT 55
3508: PUSH
3509: EMPTY
3510: LIST
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 23
3518: PUSH
3519: LD_INT 2
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 69
3536: PPUSH
3537: CALL 6973 0 1
3541: PUSH
3542: LD_INT 0
3544: EQUAL
3545: AND
3546: IFFALSE 4624
3548: GO 3550
3550: DISABLE
3551: LD_INT 0
3553: PPUSH
3554: PPUSH
3555: PPUSH
3556: PPUSH
3557: PPUSH
// begin enable ;
3558: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3559: LD_ADDR_VAR 0 2
3563: PUSH
3564: LD_INT 7
3566: PPUSH
3567: LD_INT 22
3569: PUSH
3570: LD_INT 2
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 21
3579: PUSH
3580: LD_INT 2
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PPUSH
3591: CALL_OW 70
3595: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 2
3603: PUSH
3604: LD_INT 34
3606: PUSH
3607: LD_INT 88
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 34
3616: PUSH
3617: LD_INT 32
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 72
3633: IFFALSE 3644
// begin Query ( InvalidWeapon ) ;
3635: LD_STRING InvalidWeapon
3637: PPUSH
3638: CALL_OW 97
// exit ;
3642: GO 4624
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3644: LD_VAR 0 2
3648: PPUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 24
3654: PUSH
3655: LD_INT 1000
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: CALL_OW 72
3670: IFFALSE 3681
// begin Query ( HealthLevel ) ;
3672: LD_STRING HealthLevel
3674: PPUSH
3675: CALL_OW 97
// exit ;
3679: GO 4624
// end ; for i in tmp do
3681: LD_ADDR_VAR 0 1
3685: PUSH
3686: LD_VAR 0 2
3690: PUSH
3691: FOR_IN
3692: IFFALSE 3739
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3694: LD_VAR 0 1
3698: PPUSH
3699: CALL_OW 262
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3724
3709: PUSH
3710: LD_VAR 0 1
3714: PPUSH
3715: CALL_OW 261
3719: PUSH
3720: LD_INT 60
3722: LESS
3723: AND
3724: IFFALSE 3737
// begin Query ( FuelLevel ) ;
3726: LD_STRING FuelLevel
3728: PPUSH
3729: CALL_OW 97
// exit ;
3733: POP
3734: POP
3735: GO 4624
// end ;
3737: GO 3691
3739: POP
3740: POP
// disable ;
3741: DISABLE
// saveVehicles := [ ] ;
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: EMPTY
3748: ST_TO_ADDR
// for i in tmp do
3749: LD_ADDR_VAR 0 1
3753: PUSH
3754: LD_VAR 0 2
3758: PUSH
3759: FOR_IN
3760: IFFALSE 3869
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_VAR 0 3
3771: PPUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 265
3781: PUSH
3782: LD_VAR 0 1
3786: PPUSH
3787: CALL_OW 262
3791: PUSH
3792: LD_VAR 0 1
3796: PPUSH
3797: CALL_OW 263
3801: PUSH
3802: LD_VAR 0 1
3806: PPUSH
3807: CALL_OW 264
3811: PUSH
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL_OW 248
3821: PUSH
3822: LD_VAR 0 1
3826: PPUSH
3827: CALL_OW 261
3831: PUSH
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 271
3841: PUSH
3842: LD_VAR 0 1
3846: PPUSH
3847: CALL_OW 311
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: PPUSH
3862: CALL 42949 0 2
3866: ST_TO_ADDR
3867: GO 3759
3869: POP
3870: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3871: LD_ADDR_VAR 0 4
3875: PUSH
3876: LD_INT 22
3878: PUSH
3879: LD_INT 2
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 50
3898: PUSH
3899: EMPTY
3900: LIST
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: PPUSH
3907: CALL_OW 69
3911: PUSH
3912: LD_VAR 0 2
3916: DIFF
3917: ST_TO_ADDR
// if otherVehicles then
3918: LD_VAR 0 4
3922: IFFALSE 4098
// begin tmp := [ ] ;
3924: LD_ADDR_VAR 0 2
3928: PUSH
3929: EMPTY
3930: ST_TO_ADDR
// for i in otherVehicles do
3931: LD_ADDR_VAR 0 1
3935: PUSH
3936: LD_VAR 0 4
3940: PUSH
3941: FOR_IN
3942: IFFALSE 4084
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3944: LD_ADDR_VAR 0 2
3948: PUSH
3949: LD_VAR 0 2
3953: PPUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: CALL_OW 265
3963: PUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 262
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 263
3983: PUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: CALL_OW 264
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 248
4003: PUSH
4004: LD_VAR 0 1
4008: PPUSH
4009: CALL_OW 261
4013: PUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 271
4023: PUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 250
4033: PUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: CALL_OW 251
4043: PUSH
4044: LD_VAR 0 1
4048: PPUSH
4049: CALL_OW 254
4053: PUSH
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 256
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL 42949 0 2
4081: ST_TO_ADDR
4082: GO 3941
4084: POP
4085: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4086: LD_VAR 0 2
4090: PPUSH
4091: LD_STRING 09_otherVehicles
4093: PPUSH
4094: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) and UnitFilter ( saveVehicles , [ f_engine , engine_siberite ] ) then
4098: LD_VAR 0 3
4102: PPUSH
4103: LD_INT 32
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PPUSH
4113: CALL_OW 72
4117: NOT
4118: IFFALSE 4141
4120: PUSH
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 32
4128: PUSH
4129: LD_INT 3
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: AND
4141: IFFALSE 4150
// SetAchievement ( ACH_GREEN ) ;
4143: LD_STRING ACH_GREEN
4145: PPUSH
4146: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4150: LD_EXP 18
4154: PPUSH
4155: LD_STRING 09_Schulz
4157: PPUSH
4158: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4162: LD_EXP 18
4166: PPUSH
4167: LD_STRING 09_Schulz_ID
4169: PPUSH
4170: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4174: LD_EXP 20
4178: PPUSH
4179: LD_STRING 09_Lemmy
4181: PPUSH
4182: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4186: LD_EXP 20
4190: PPUSH
4191: LD_STRING 09_Lemmy_ID
4193: PPUSH
4194: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4198: LD_EXP 22
4202: PPUSH
4203: LD_STRING 09_Nia
4205: PPUSH
4206: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4210: LD_EXP 22
4214: PPUSH
4215: LD_STRING 09_Nia_ID
4217: PPUSH
4218: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4222: LD_EXP 21
4226: PPUSH
4227: LD_STRING 09_Mia
4229: PPUSH
4230: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4234: LD_EXP 21
4238: PPUSH
4239: LD_STRING 09_Mia_ID
4241: PPUSH
4242: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4246: LD_EXP 23
4250: PPUSH
4251: LD_STRING 09_Jenna
4253: PPUSH
4254: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4258: LD_EXP 23
4262: PPUSH
4263: LD_STRING 09_Jenna_ID
4265: PPUSH
4266: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4270: LD_EXP 26
4274: PPUSH
4275: LD_STRING 09_schulzSecondSquad
4277: PPUSH
4278: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4282: LD_ADDR_VAR 0 1
4286: PUSH
4287: DOUBLE
4288: LD_INT 1
4290: DEC
4291: ST_TO_ADDR
4292: LD_EXP 26
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4326
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4300: LD_EXP 26
4304: PUSH
4305: LD_VAR 0 1
4309: ARRAY
4310: PPUSH
4311: LD_STRING 09_random_ID_
4313: PUSH
4314: LD_VAR 0 1
4318: STR
4319: PPUSH
4320: CALL_OW 39
4324: GO 4297
4326: POP
4327: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: LD_STRING 09_vehicles
4335: PPUSH
4336: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4340: LD_OWVAR 1
4344: PPUSH
4345: LD_STRING 09_tick
4347: PPUSH
4348: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4352: LD_INT 6
4354: PPUSH
4355: LD_STRING 09_env
4357: PPUSH
4358: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4362: LD_INT 2
4364: PPUSH
4365: LD_STRING 09_tech
4367: PPUSH
4368: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4372: LD_INT 2
4374: PPUSH
4375: LD_STRING 09_materials
4377: PPUSH
4378: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4382: LD_INT 2
4384: PPUSH
4385: LD_STRING 09_buildings
4387: PPUSH
4388: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4392: LD_INT 22
4394: PUSH
4395: LD_INT 2
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 23
4404: PUSH
4405: LD_INT 0
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PPUSH
4416: CALL_OW 69
4420: PPUSH
4421: LD_STRING 09_apes
4423: PPUSH
4424: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4428: LD_EXP 4
4432: PPUSH
4433: LD_STRING 09_timeToHeikeDead
4435: PPUSH
4436: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4440: LD_EXP 3
4444: PPUSH
4445: LD_STRING 09_cameras
4447: PPUSH
4448: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4452: LD_ADDR_VAR 0 2
4456: PUSH
4457: LD_INT 22
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 23
4469: PUSH
4470: LD_INT 0
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 50
4479: PUSH
4480: EMPTY
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: ST_TO_ADDR
// if tmp then
4493: LD_VAR 0 2
4497: IFFALSE 4607
// begin animals := [ ] ;
4499: LD_ADDR_VAR 0 5
4503: PUSH
4504: EMPTY
4505: ST_TO_ADDR
// for i in tmp do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: LD_VAR 0 2
4515: PUSH
4516: FOR_IN
4517: IFFALSE 4593
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: LD_VAR 0 5
4528: PPUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: CALL_OW 257
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 250
4548: PUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: CALL_OW 251
4558: PUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: CALL_OW 254
4568: PUSH
4569: LD_VAR 0 1
4573: PPUSH
4574: CALL_OW 256
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PPUSH
4586: CALL 42949 0 2
4590: ST_TO_ADDR
4591: GO 4516
4593: POP
4594: POP
// SaveVariable ( animals , 09_animals ) ;
4595: LD_VAR 0 5
4599: PPUSH
4600: LD_STRING 09_animals
4602: PPUSH
4603: CALL_OW 39
// end ; wait ( 3 ) ;
4607: LD_INT 3
4609: PPUSH
4610: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4614: LD_INT 1
4616: PPUSH
4617: LD_STRING %2
4619: PPUSH
4620: CALL_OW 340
// end ; end_of_file
4624: PPOPN 5
4626: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4627: LD_OWVAR 1
4631: PUSH
4632: LD_INT 14700
4634: LESS
4635: IFFALSE 4668
4637: GO 4639
4639: DISABLE
// begin enable ;
4640: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4641: LD_INT 1
4643: PPUSH
4644: LD_INT 5
4646: PPUSH
4647: CALL_OW 12
4651: PPUSH
4652: LD_INT 85
4654: PPUSH
4655: LD_INT 44
4657: PPUSH
4658: LD_INT 30
4660: PPUSH
4661: LD_INT 1
4663: PPUSH
4664: CALL_OW 56
// end ;
4668: END
// every 0 0$29 trigger tick < 20 20$00 do
4669: LD_OWVAR 1
4673: PUSH
4674: LD_INT 42000
4676: LESS
4677: IFFALSE 4748
4679: GO 4681
4681: DISABLE
// begin enable ;
4682: ENABLE
// if Prob ( 50 ) then
4683: LD_INT 50
4685: PPUSH
4686: CALL_OW 13
4690: IFFALSE 4721
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4692: LD_INT 1
4694: PPUSH
4695: LD_INT 5
4697: PPUSH
4698: CALL_OW 12
4702: PPUSH
4703: LD_INT 72
4705: PPUSH
4706: LD_INT 109
4708: PPUSH
4709: LD_INT 22
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: CALL_OW 56
4719: GO 4748
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4721: LD_INT 1
4723: PPUSH
4724: LD_INT 5
4726: PPUSH
4727: CALL_OW 12
4731: PPUSH
4732: LD_INT 140
4734: PPUSH
4735: LD_INT 73
4737: PPUSH
4738: LD_INT 22
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 56
4748: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4749: LD_INT 0
4751: PPUSH
4752: PPUSH
// if exist_mode then
4753: LD_VAR 0 2
4757: IFFALSE 4803
// begin unit := CreateCharacter ( prefix & ident ) ;
4759: LD_ADDR_VAR 0 5
4763: PUSH
4764: LD_VAR 0 3
4768: PUSH
4769: LD_VAR 0 1
4773: STR
4774: PPUSH
4775: CALL_OW 34
4779: ST_TO_ADDR
// if unit then
4780: LD_VAR 0 5
4784: IFFALSE 4801
// DeleteCharacters ( prefix & ident ) ;
4786: LD_VAR 0 3
4790: PUSH
4791: LD_VAR 0 1
4795: STR
4796: PPUSH
4797: CALL_OW 40
// end else
4801: GO 4818
// unit := NewCharacter ( ident ) ;
4803: LD_ADDR_VAR 0 5
4807: PUSH
4808: LD_VAR 0 1
4812: PPUSH
4813: CALL_OW 25
4817: ST_TO_ADDR
// result := unit ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 5
4827: ST_TO_ADDR
// end ;
4828: LD_VAR 0 4
4832: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
4833: LD_INT 0
4835: PPUSH
4836: PPUSH
// if exist_mode then
4837: LD_VAR 0 2
4841: IFFALSE 4866
// unit := CreateCharacter ( prefix & ident ) else
4843: LD_ADDR_VAR 0 5
4847: PUSH
4848: LD_VAR 0 3
4852: PUSH
4853: LD_VAR 0 1
4857: STR
4858: PPUSH
4859: CALL_OW 34
4863: ST_TO_ADDR
4864: GO 4881
// unit := NewCharacter ( ident ) ;
4866: LD_ADDR_VAR 0 5
4870: PUSH
4871: LD_VAR 0 1
4875: PPUSH
4876: CALL_OW 25
4880: ST_TO_ADDR
// result := unit ;
4881: LD_ADDR_VAR 0 4
4885: PUSH
4886: LD_VAR 0 5
4890: ST_TO_ADDR
// end ;
4891: LD_VAR 0 4
4895: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4896: LD_INT 0
4898: PPUSH
4899: PPUSH
// if not side or not nation then
4900: LD_VAR 0 1
4904: NOT
4905: IFTRUE 4914
4907: PUSH
4908: LD_VAR 0 2
4912: NOT
4913: OR
4914: IFFALSE 4918
// exit ;
4916: GO 5712
// case nation of nation_american :
4918: LD_VAR 0 2
4922: PUSH
4923: LD_INT 1
4925: DOUBLE
4926: EQUAL
4927: IFTRUE 4931
4929: GO 5153
4931: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_INT 35
4939: PUSH
4940: LD_INT 45
4942: PUSH
4943: LD_INT 46
4945: PUSH
4946: LD_INT 47
4948: PUSH
4949: LD_INT 82
4951: PUSH
4952: LD_INT 83
4954: PUSH
4955: LD_INT 84
4957: PUSH
4958: LD_INT 85
4960: PUSH
4961: LD_INT 86
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: LD_INT 6
4972: PUSH
4973: LD_INT 15
4975: PUSH
4976: LD_INT 16
4978: PUSH
4979: LD_INT 7
4981: PUSH
4982: LD_INT 12
4984: PUSH
4985: LD_INT 13
4987: PUSH
4988: LD_INT 10
4990: PUSH
4991: LD_INT 14
4993: PUSH
4994: LD_INT 20
4996: PUSH
4997: LD_INT 21
4999: PUSH
5000: LD_INT 22
5002: PUSH
5003: LD_INT 25
5005: PUSH
5006: LD_INT 32
5008: PUSH
5009: LD_INT 27
5011: PUSH
5012: LD_INT 36
5014: PUSH
5015: LD_INT 69
5017: PUSH
5018: LD_INT 39
5020: PUSH
5021: LD_INT 34
5023: PUSH
5024: LD_INT 40
5026: PUSH
5027: LD_INT 48
5029: PUSH
5030: LD_INT 49
5032: PUSH
5033: LD_INT 50
5035: PUSH
5036: LD_INT 51
5038: PUSH
5039: LD_INT 52
5041: PUSH
5042: LD_INT 53
5044: PUSH
5045: LD_INT 54
5047: PUSH
5048: LD_INT 55
5050: PUSH
5051: LD_INT 56
5053: PUSH
5054: LD_INT 57
5056: PUSH
5057: LD_INT 58
5059: PUSH
5060: LD_INT 59
5062: PUSH
5063: LD_INT 60
5065: PUSH
5066: LD_INT 61
5068: PUSH
5069: LD_INT 62
5071: PUSH
5072: LD_INT 80
5074: PUSH
5075: LD_INT 82
5077: PUSH
5078: LD_INT 83
5080: PUSH
5081: LD_INT 84
5083: PUSH
5084: LD_INT 85
5086: PUSH
5087: LD_INT 86
5089: PUSH
5090: LD_INT 90
5092: PUSH
5093: LD_INT 93
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: ST_TO_ADDR
5151: GO 5634
5153: LD_INT 2
5155: DOUBLE
5156: EQUAL
5157: IFTRUE 5161
5159: GO 5395
5161: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_INT 35
5169: PUSH
5170: LD_INT 45
5172: PUSH
5173: LD_INT 46
5175: PUSH
5176: LD_INT 47
5178: PUSH
5179: LD_INT 82
5181: PUSH
5182: LD_INT 83
5184: PUSH
5185: LD_INT 84
5187: PUSH
5188: LD_INT 85
5190: PUSH
5191: LD_INT 87
5193: PUSH
5194: LD_INT 70
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: LD_INT 11
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 4
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 15
5217: PUSH
5218: LD_INT 18
5220: PUSH
5221: LD_INT 7
5223: PUSH
5224: LD_INT 17
5226: PUSH
5227: LD_INT 8
5229: PUSH
5230: LD_INT 20
5232: PUSH
5233: LD_INT 21
5235: PUSH
5236: LD_INT 22
5238: PUSH
5239: LD_INT 72
5241: PUSH
5242: LD_INT 26
5244: PUSH
5245: LD_INT 69
5247: PUSH
5248: LD_INT 39
5250: PUSH
5251: LD_INT 40
5253: PUSH
5254: LD_INT 41
5256: PUSH
5257: LD_INT 42
5259: PUSH
5260: LD_INT 43
5262: PUSH
5263: LD_INT 48
5265: PUSH
5266: LD_INT 49
5268: PUSH
5269: LD_INT 50
5271: PUSH
5272: LD_INT 51
5274: PUSH
5275: LD_INT 52
5277: PUSH
5278: LD_INT 53
5280: PUSH
5281: LD_INT 54
5283: PUSH
5284: LD_INT 55
5286: PUSH
5287: LD_INT 56
5289: PUSH
5290: LD_INT 60
5292: PUSH
5293: LD_INT 61
5295: PUSH
5296: LD_INT 62
5298: PUSH
5299: LD_INT 66
5301: PUSH
5302: LD_INT 67
5304: PUSH
5305: LD_INT 68
5307: PUSH
5308: LD_INT 81
5310: PUSH
5311: LD_INT 82
5313: PUSH
5314: LD_INT 83
5316: PUSH
5317: LD_INT 84
5319: PUSH
5320: LD_INT 85
5322: PUSH
5323: LD_INT 87
5325: PUSH
5326: LD_INT 88
5328: PUSH
5329: LD_INT 92
5331: PUSH
5332: LD_INT 94
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: ST_TO_ADDR
5393: GO 5634
5395: LD_INT 3
5397: DOUBLE
5398: EQUAL
5399: IFTRUE 5403
5401: GO 5633
5403: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
5404: LD_ADDR_VAR 0 4
5408: PUSH
5409: LD_INT 46
5411: PUSH
5412: LD_INT 47
5414: PUSH
5415: LD_INT 1
5417: PUSH
5418: LD_INT 2
5420: PUSH
5421: LD_INT 82
5423: PUSH
5424: LD_INT 83
5426: PUSH
5427: LD_INT 84
5429: PUSH
5430: LD_INT 85
5432: PUSH
5433: LD_INT 86
5435: PUSH
5436: LD_INT 11
5438: PUSH
5439: LD_INT 9
5441: PUSH
5442: LD_INT 20
5444: PUSH
5445: LD_INT 19
5447: PUSH
5448: LD_INT 21
5450: PUSH
5451: LD_INT 24
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 25
5459: PUSH
5460: LD_INT 28
5462: PUSH
5463: LD_INT 29
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 31
5471: PUSH
5472: LD_INT 37
5474: PUSH
5475: LD_INT 38
5477: PUSH
5478: LD_INT 32
5480: PUSH
5481: LD_INT 27
5483: PUSH
5484: LD_INT 33
5486: PUSH
5487: LD_INT 69
5489: PUSH
5490: LD_INT 39
5492: PUSH
5493: LD_INT 34
5495: PUSH
5496: LD_INT 40
5498: PUSH
5499: LD_INT 71
5501: PUSH
5502: LD_INT 23
5504: PUSH
5505: LD_INT 44
5507: PUSH
5508: LD_INT 48
5510: PUSH
5511: LD_INT 49
5513: PUSH
5514: LD_INT 50
5516: PUSH
5517: LD_INT 51
5519: PUSH
5520: LD_INT 52
5522: PUSH
5523: LD_INT 53
5525: PUSH
5526: LD_INT 54
5528: PUSH
5529: LD_INT 55
5531: PUSH
5532: LD_INT 56
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 58
5540: PUSH
5541: LD_INT 59
5543: PUSH
5544: LD_INT 63
5546: PUSH
5547: LD_INT 64
5549: PUSH
5550: LD_INT 65
5552: PUSH
5553: LD_INT 82
5555: PUSH
5556: LD_INT 83
5558: PUSH
5559: LD_INT 84
5561: PUSH
5562: LD_INT 85
5564: PUSH
5565: LD_INT 86
5567: PUSH
5568: LD_INT 89
5570: PUSH
5571: LD_INT 91
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
5631: GO 5634
5633: POP
// if state > - 1 and state < 3 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 1
5641: NEG
5642: GREATER
5643: IFFALSE 5655
5645: PUSH
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 3
5653: LESS
5654: AND
5655: IFFALSE 5712
// for i in result do
5657: LD_ADDR_VAR 0 5
5661: PUSH
5662: LD_VAR 0 4
5666: PUSH
5667: FOR_IN
5668: IFFALSE 5710
// if GetTech ( i , side ) <> state then
5670: LD_VAR 0 5
5674: PPUSH
5675: LD_VAR 0 1
5679: PPUSH
5680: CALL_OW 321
5684: PUSH
5685: LD_VAR 0 3
5689: NONEQUAL
5690: IFFALSE 5708
// result := result diff i ;
5692: LD_ADDR_VAR 0 4
5696: PUSH
5697: LD_VAR 0 4
5701: PUSH
5702: LD_VAR 0 5
5706: DIFF
5707: ST_TO_ADDR
5708: GO 5667
5710: POP
5711: POP
// end ;
5712: LD_VAR 0 4
5716: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5717: LD_INT 0
5719: PPUSH
5720: PPUSH
5721: PPUSH
// result := true ;
5722: LD_ADDR_VAR 0 3
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5730: LD_ADDR_VAR 0 5
5734: PUSH
5735: LD_VAR 0 2
5739: PPUSH
5740: CALL_OW 480
5744: ST_TO_ADDR
// if not tmp then
5745: LD_VAR 0 5
5749: NOT
5750: IFFALSE 5754
// exit ;
5752: GO 5803
// for i in tmp do
5754: LD_ADDR_VAR 0 4
5758: PUSH
5759: LD_VAR 0 5
5763: PUSH
5764: FOR_IN
5765: IFFALSE 5801
// if GetTech ( i , side ) <> state_researched then
5767: LD_VAR 0 4
5771: PPUSH
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL_OW 321
5781: PUSH
5782: LD_INT 2
5784: NONEQUAL
5785: IFFALSE 5799
// begin result := false ;
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// exit ;
5795: POP
5796: POP
5797: GO 5803
// end ;
5799: GO 5764
5801: POP
5802: POP
// end ;
5803: LD_VAR 0 3
5807: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
5815: PPUSH
5816: PPUSH
5817: PPUSH
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5823: LD_VAR 0 1
5827: NOT
5828: IFTRUE 5845
5830: PUSH
5831: LD_VAR 0 1
5835: PPUSH
5836: CALL_OW 257
5840: PUSH
5841: LD_INT 9
5843: NONEQUAL
5844: OR
5845: IFFALSE 5849
// exit ;
5847: GO 6428
// side := GetSide ( unit ) ;
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: LD_VAR 0 1
5858: PPUSH
5859: CALL_OW 255
5863: ST_TO_ADDR
// tech_space := tech_spacanom ;
5864: LD_ADDR_VAR 0 12
5868: PUSH
5869: LD_INT 29
5871: ST_TO_ADDR
// tech_time := tech_taurad ;
5872: LD_ADDR_VAR 0 13
5876: PUSH
5877: LD_INT 28
5879: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5880: LD_ADDR_VAR 0 11
5884: PUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 310
5894: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5895: LD_VAR 0 11
5899: PPUSH
5900: CALL_OW 247
5904: PUSH
5905: LD_INT 2
5907: EQUAL
5908: IFFALSE 5912
// exit ;
5910: GO 6428
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5912: LD_ADDR_VAR 0 8
5916: PUSH
5917: LD_INT 81
5919: PUSH
5920: LD_VAR 0 9
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: LD_INT 3
5931: PUSH
5932: LD_INT 21
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PPUSH
5950: CALL_OW 69
5954: ST_TO_ADDR
// if not tmp then
5955: LD_VAR 0 8
5959: NOT
5960: IFFALSE 5964
// exit ;
5962: GO 6428
// if in_unit then
5964: LD_VAR 0 11
5968: IFFALSE 5992
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5970: LD_ADDR_VAR 0 10
5974: PUSH
5975: LD_VAR 0 8
5979: PPUSH
5980: LD_VAR 0 11
5984: PPUSH
5985: CALL_OW 74
5989: ST_TO_ADDR
5990: GO 6012
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5992: LD_ADDR_VAR 0 10
5996: PUSH
5997: LD_VAR 0 8
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 74
6011: ST_TO_ADDR
// if not enemy then
6012: LD_VAR 0 10
6016: NOT
6017: IFFALSE 6021
// exit ;
6019: GO 6428
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
6021: LD_VAR 0 11
6025: IFFALSE 6047
6027: PUSH
6028: LD_VAR 0 11
6032: PPUSH
6033: LD_VAR 0 10
6037: PPUSH
6038: CALL_OW 296
6042: PUSH
6043: LD_INT 13
6045: GREATER
6046: AND
6047: IFTRUE 6069
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: LD_VAR 0 10
6059: PPUSH
6060: CALL_OW 296
6064: PUSH
6065: LD_INT 12
6067: GREATER
6068: OR
6069: IFFALSE 6073
// exit ;
6071: GO 6428
// missile := [ 1 ] ;
6073: LD_ADDR_VAR 0 14
6077: PUSH
6078: LD_INT 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: ST_TO_ADDR
// if Researched ( side , tech_space ) then
6084: LD_VAR 0 9
6088: PPUSH
6089: LD_VAR 0 12
6093: PPUSH
6094: CALL_OW 325
6098: IFFALSE 6127
// missile := Replace ( missile , missile + 1 , 2 ) ;
6100: LD_ADDR_VAR 0 14
6104: PUSH
6105: LD_VAR 0 14
6109: PPUSH
6110: LD_VAR 0 14
6114: PUSH
6115: LD_INT 1
6117: PLUS
6118: PPUSH
6119: LD_INT 2
6121: PPUSH
6122: CALL_OW 1
6126: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
6127: LD_VAR 0 9
6131: PPUSH
6132: LD_VAR 0 13
6136: PPUSH
6137: CALL_OW 325
6141: IFFALSE 6165
6143: PUSH
6144: LD_VAR 0 10
6148: PPUSH
6149: CALL_OW 255
6153: PPUSH
6154: LD_VAR 0 13
6158: PPUSH
6159: CALL_OW 325
6163: NOT
6164: AND
6165: IFFALSE 6194
// missile := Replace ( missile , missile + 1 , 3 ) ;
6167: LD_ADDR_VAR 0 14
6171: PUSH
6172: LD_VAR 0 14
6176: PPUSH
6177: LD_VAR 0 14
6181: PUSH
6182: LD_INT 1
6184: PLUS
6185: PPUSH
6186: LD_INT 3
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// if missile < 2 then
6194: LD_VAR 0 14
6198: PUSH
6199: LD_INT 2
6201: LESS
6202: IFFALSE 6206
// exit ;
6204: GO 6428
// x := GetX ( enemy ) ;
6206: LD_ADDR_VAR 0 4
6210: PUSH
6211: LD_VAR 0 10
6215: PPUSH
6216: CALL_OW 250
6220: ST_TO_ADDR
// y := GetY ( enemy ) ;
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: LD_VAR 0 10
6230: PPUSH
6231: CALL_OW 251
6235: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6236: LD_ADDR_VAR 0 6
6240: PUSH
6241: LD_VAR 0 4
6245: PUSH
6246: LD_INT 1
6248: NEG
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 12
6257: PLUS
6258: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6259: LD_ADDR_VAR 0 7
6263: PUSH
6264: LD_VAR 0 5
6268: PUSH
6269: LD_INT 1
6271: NEG
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 12
6280: PLUS
6281: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6282: LD_VAR 0 6
6286: PPUSH
6287: LD_VAR 0 7
6291: PPUSH
6292: CALL_OW 488
6296: NOT
6297: IFFALSE 6319
// begin _x := x ;
6299: LD_ADDR_VAR 0 6
6303: PUSH
6304: LD_VAR 0 4
6308: ST_TO_ADDR
// _y := y ;
6309: LD_ADDR_VAR 0 7
6313: PUSH
6314: LD_VAR 0 5
6318: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 1
6326: PPUSH
6327: LD_VAR 0 14
6331: PPUSH
6332: CALL_OW 12
6336: ST_TO_ADDR
// case i of 1 :
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 1
6344: DOUBLE
6345: EQUAL
6346: IFTRUE 6350
6348: GO 6367
6350: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6351: LD_VAR 0 1
6355: PPUSH
6356: LD_VAR 0 10
6360: PPUSH
6361: CALL_OW 115
6365: GO 6428
6367: LD_INT 2
6369: DOUBLE
6370: EQUAL
6371: IFTRUE 6375
6373: GO 6397
6375: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6376: LD_VAR 0 1
6380: PPUSH
6381: LD_VAR 0 6
6385: PPUSH
6386: LD_VAR 0 7
6390: PPUSH
6391: CALL_OW 153
6395: GO 6428
6397: LD_INT 3
6399: DOUBLE
6400: EQUAL
6401: IFTRUE 6405
6403: GO 6427
6405: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6406: LD_VAR 0 1
6410: PPUSH
6411: LD_VAR 0 6
6415: PPUSH
6416: LD_VAR 0 7
6420: PPUSH
6421: CALL_OW 154
6425: GO 6428
6427: POP
// end ;
6428: LD_VAR 0 2
6432: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6433: LD_INT 0
6435: PPUSH
6436: PPUSH
6437: PPUSH
6438: PPUSH
6439: PPUSH
6440: PPUSH
// if not unit or not building then
6441: LD_VAR 0 1
6445: NOT
6446: IFTRUE 6455
6448: PUSH
6449: LD_VAR 0 2
6453: NOT
6454: OR
6455: IFFALSE 6459
// exit ;
6457: GO 6617
// x := GetX ( building ) ;
6459: LD_ADDR_VAR 0 5
6463: PUSH
6464: LD_VAR 0 2
6468: PPUSH
6469: CALL_OW 250
6473: ST_TO_ADDR
// y := GetY ( building ) ;
6474: LD_ADDR_VAR 0 6
6478: PUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: CALL_OW 251
6488: ST_TO_ADDR
// for i := 0 to 5 do
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: DOUBLE
6495: LD_INT 0
6497: DEC
6498: ST_TO_ADDR
6499: LD_INT 5
6501: PUSH
6502: FOR_TO
6503: IFFALSE 6615
// begin _x := ShiftX ( x , i , 3 ) ;
6505: LD_ADDR_VAR 0 7
6509: PUSH
6510: LD_VAR 0 5
6514: PPUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 3
6522: PPUSH
6523: CALL_OW 272
6527: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6528: LD_ADDR_VAR 0 8
6532: PUSH
6533: LD_VAR 0 6
6537: PPUSH
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 3
6545: PPUSH
6546: CALL_OW 273
6550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6551: LD_VAR 0 7
6555: PPUSH
6556: LD_VAR 0 8
6560: PPUSH
6561: CALL_OW 488
6565: NOT
6566: IFFALSE 6570
// continue ;
6568: GO 6502
// if HexInfo ( _x , _y ) = 0 then
6570: LD_VAR 0 7
6574: PPUSH
6575: LD_VAR 0 8
6579: PPUSH
6580: CALL_OW 428
6584: PUSH
6585: LD_INT 0
6587: EQUAL
6588: IFFALSE 6613
// begin ComMoveXY ( unit , _x , _y ) ;
6590: LD_VAR 0 1
6594: PPUSH
6595: LD_VAR 0 7
6599: PPUSH
6600: LD_VAR 0 8
6604: PPUSH
6605: CALL_OW 111
// exit ;
6609: POP
6610: POP
6611: GO 6617
// end ; end ;
6613: GO 6502
6615: POP
6616: POP
// end ;
6617: LD_VAR 0 3
6621: RET
// export function ScanBase ( side , base_area ) ; begin
6622: LD_INT 0
6624: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_VAR 0 2
6634: PPUSH
6635: LD_INT 81
6637: PUSH
6638: LD_VAR 0 1
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 70
6651: ST_TO_ADDR
// end ;
6652: LD_VAR 0 3
6656: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6657: LD_INT 0
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// result := false ;
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 0
6670: ST_TO_ADDR
// side := GetSide ( unit ) ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_VAR 0 1
6680: PPUSH
6681: CALL_OW 255
6685: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 248
6700: ST_TO_ADDR
// case nat of 1 :
6701: LD_VAR 0 4
6705: PUSH
6706: LD_INT 1
6708: DOUBLE
6709: EQUAL
6710: IFTRUE 6714
6712: GO 6725
6714: POP
// tech := tech_lassight ; 2 :
6715: LD_ADDR_VAR 0 5
6719: PUSH
6720: LD_INT 12
6722: ST_TO_ADDR
6723: GO 6764
6725: LD_INT 2
6727: DOUBLE
6728: EQUAL
6729: IFTRUE 6733
6731: GO 6744
6733: POP
// tech := tech_mortar ; 3 :
6734: LD_ADDR_VAR 0 5
6738: PUSH
6739: LD_INT 41
6741: ST_TO_ADDR
6742: GO 6764
6744: LD_INT 3
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6763
6752: POP
// tech := tech_bazooka ; end ;
6753: LD_ADDR_VAR 0 5
6757: PUSH
6758: LD_INT 44
6760: ST_TO_ADDR
6761: GO 6764
6763: POP
// if Researched ( side , tech ) then
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 5
6773: PPUSH
6774: CALL_OW 325
6778: IFFALSE 6805
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6780: LD_ADDR_VAR 0 2
6784: PUSH
6785: LD_INT 5
6787: PUSH
6788: LD_INT 8
6790: PUSH
6791: LD_INT 9
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_VAR 0 4
6803: ARRAY
6804: ST_TO_ADDR
// end ;
6805: LD_VAR 0 2
6809: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
// if not mines then
6815: LD_VAR 0 2
6819: NOT
6820: IFFALSE 6824
// exit ;
6822: GO 6968
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6824: LD_ADDR_VAR 0 5
6828: PUSH
6829: LD_INT 81
6831: PUSH
6832: LD_VAR 0 1
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 21
6846: PUSH
6847: LD_INT 3
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// for i in mines do
6867: LD_ADDR_VAR 0 4
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: FOR_IN
6878: IFFALSE 6966
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6880: LD_VAR 0 4
6884: PUSH
6885: LD_INT 1
6887: ARRAY
6888: PPUSH
6889: LD_VAR 0 4
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 458
6902: NOT
6903: IFFALSE 6907
// continue ;
6905: GO 6877
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6907: LD_VAR 0 4
6911: PUSH
6912: LD_INT 1
6914: ARRAY
6915: PPUSH
6916: LD_VAR 0 4
6920: PUSH
6921: LD_INT 2
6923: ARRAY
6924: PPUSH
6925: CALL_OW 428
6929: PUSH
6930: LD_VAR 0 5
6934: IN
6935: IFFALSE 6964
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6937: LD_VAR 0 4
6941: PUSH
6942: LD_INT 1
6944: ARRAY
6945: PPUSH
6946: LD_VAR 0 4
6950: PUSH
6951: LD_INT 2
6953: ARRAY
6954: PPUSH
6955: LD_VAR 0 1
6959: PPUSH
6960: CALL_OW 456
// end ;
6964: GO 6877
6966: POP
6967: POP
// end ;
6968: LD_VAR 0 3
6972: RET
// export function Count ( array ) ; begin
6973: LD_INT 0
6975: PPUSH
// result := array + 0 ;
6976: LD_ADDR_VAR 0 2
6980: PUSH
6981: LD_VAR 0 1
6985: PUSH
6986: LD_INT 0
6988: PLUS
6989: ST_TO_ADDR
// end ;
6990: LD_VAR 0 2
6994: RET
// export function IsEmpty ( building ) ; begin
6995: LD_INT 0
6997: PPUSH
// if not building then
6998: LD_VAR 0 1
7002: NOT
7003: IFFALSE 7007
// exit ;
7005: GO 7050
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
7007: LD_ADDR_VAR 0 2
7011: PUSH
7012: LD_VAR 0 1
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 255
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 58
7036: PUSH
7037: EMPTY
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 69
7048: IN
7049: ST_TO_ADDR
// end ;
7050: LD_VAR 0 2
7054: RET
// export function IsNotFull ( building ) ; var places ; begin
7055: LD_INT 0
7057: PPUSH
7058: PPUSH
// if not building then
7059: LD_VAR 0 1
7063: NOT
7064: IFFALSE 7068
// exit ;
7066: GO 7096
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_VAR 0 1
7077: PPUSH
7078: LD_INT 3
7080: PUSH
7081: LD_INT 62
7083: PUSH
7084: EMPTY
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: ST_TO_ADDR
// end ;
7096: LD_VAR 0 2
7100: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
7101: LD_INT 0
7103: PPUSH
7104: PPUSH
7105: PPUSH
7106: PPUSH
// tmp := [ ] ;
7107: LD_ADDR_VAR 0 3
7111: PUSH
7112: EMPTY
7113: ST_TO_ADDR
// list := [ ] ;
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: EMPTY
7120: ST_TO_ADDR
// for i = 16 to 25 do
7121: LD_ADDR_VAR 0 4
7125: PUSH
7126: DOUBLE
7127: LD_INT 16
7129: DEC
7130: ST_TO_ADDR
7131: LD_INT 25
7133: PUSH
7134: FOR_TO
7135: IFFALSE 7208
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_VAR 0 3
7146: PUSH
7147: LD_INT 22
7149: PUSH
7150: LD_VAR 0 1
7154: PPUSH
7155: CALL_OW 255
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 91
7166: PUSH
7167: LD_VAR 0 1
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 30
7182: PUSH
7183: LD_VAR 0 4
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: PPUSH
7200: CALL_OW 69
7204: ADD
7205: ST_TO_ADDR
7206: GO 7134
7208: POP
7209: POP
// for i = 1 to tmp do
7210: LD_ADDR_VAR 0 4
7214: PUSH
7215: DOUBLE
7216: LD_INT 1
7218: DEC
7219: ST_TO_ADDR
7220: LD_VAR 0 3
7224: PUSH
7225: FOR_TO
7226: IFFALSE 7314
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7228: LD_ADDR_VAR 0 5
7232: PUSH
7233: LD_VAR 0 5
7237: PUSH
7238: LD_VAR 0 3
7242: PUSH
7243: LD_VAR 0 4
7247: ARRAY
7248: PPUSH
7249: CALL_OW 266
7253: PUSH
7254: LD_VAR 0 3
7258: PUSH
7259: LD_VAR 0 4
7263: ARRAY
7264: PPUSH
7265: CALL_OW 250
7269: PUSH
7270: LD_VAR 0 3
7274: PUSH
7275: LD_VAR 0 4
7279: ARRAY
7280: PPUSH
7281: CALL_OW 251
7285: PUSH
7286: LD_VAR 0 3
7290: PUSH
7291: LD_VAR 0 4
7295: ARRAY
7296: PPUSH
7297: CALL_OW 254
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: ADD
7311: ST_TO_ADDR
7312: GO 7225
7314: POP
7315: POP
// result := list ;
7316: LD_ADDR_VAR 0 2
7320: PUSH
7321: LD_VAR 0 5
7325: ST_TO_ADDR
// end ;
7326: LD_VAR 0 2
7330: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7331: LD_INT 0
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
// if not factory then
7340: LD_VAR 0 1
7344: NOT
7345: IFFALSE 7349
// exit ;
7347: GO 7952
// if control = control_apeman then
7349: LD_VAR 0 4
7353: PUSH
7354: LD_INT 5
7356: EQUAL
7357: IFFALSE 7466
// begin tmp := UnitsInside ( factory ) ;
7359: LD_ADDR_VAR 0 8
7363: PUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 313
7373: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7374: LD_VAR 0 8
7378: PPUSH
7379: LD_INT 25
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 72
7393: NOT
7394: IFFALSE 7404
// control := control_manual ;
7396: LD_ADDR_VAR 0 4
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7404: LD_ADDR_VAR 0 8
7408: PUSH
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL 7101 0 1
7418: ST_TO_ADDR
// if tmp then
7419: LD_VAR 0 8
7423: IFFALSE 7466
// begin for i in tmp do
7425: LD_ADDR_VAR 0 7
7429: PUSH
7430: LD_VAR 0 8
7434: PUSH
7435: FOR_IN
7436: IFFALSE 7464
// if i [ 1 ] = b_ext_radio then
7438: LD_VAR 0 7
7442: PUSH
7443: LD_INT 1
7445: ARRAY
7446: PUSH
7447: LD_INT 22
7449: EQUAL
7450: IFFALSE 7462
// begin control := control_remote ;
7452: LD_ADDR_VAR 0 4
7456: PUSH
7457: LD_INT 2
7459: ST_TO_ADDR
// break ;
7460: GO 7464
// end ;
7462: GO 7435
7464: POP
7465: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7466: LD_VAR 0 1
7470: PPUSH
7471: LD_VAR 0 2
7475: PPUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_VAR 0 5
7490: PPUSH
7491: CALL_OW 448
7495: IFFALSE 7530
// begin result := [ chassis , engine , control , weapon ] ;
7497: LD_ADDR_VAR 0 6
7501: PUSH
7502: LD_VAR 0 2
7506: PUSH
7507: LD_VAR 0 3
7511: PUSH
7512: LD_VAR 0 4
7516: PUSH
7517: LD_VAR 0 5
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: ST_TO_ADDR
// exit ;
7528: GO 7952
// end ; _chassis := AvailableChassisList ( factory ) ;
7530: LD_ADDR_VAR 0 9
7534: PUSH
7535: LD_VAR 0 1
7539: PPUSH
7540: CALL_OW 475
7544: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7545: LD_ADDR_VAR 0 11
7549: PUSH
7550: LD_VAR 0 1
7554: PPUSH
7555: CALL_OW 476
7559: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7560: LD_ADDR_VAR 0 12
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 477
7574: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7575: LD_ADDR_VAR 0 10
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 478
7589: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7590: LD_VAR 0 9
7594: NOT
7595: IFTRUE 7604
7597: PUSH
7598: LD_VAR 0 11
7602: NOT
7603: OR
7604: IFTRUE 7613
7606: PUSH
7607: LD_VAR 0 12
7611: NOT
7612: OR
7613: IFTRUE 7622
7615: PUSH
7616: LD_VAR 0 10
7620: NOT
7621: OR
7622: IFFALSE 7657
// begin result := [ chassis , engine , control , weapon ] ;
7624: LD_ADDR_VAR 0 6
7628: PUSH
7629: LD_VAR 0 2
7633: PUSH
7634: LD_VAR 0 3
7638: PUSH
7639: LD_VAR 0 4
7643: PUSH
7644: LD_VAR 0 5
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// exit ;
7655: GO 7952
// end ; if not chassis in _chassis then
7657: LD_VAR 0 2
7661: PUSH
7662: LD_VAR 0 9
7666: IN
7667: NOT
7668: IFFALSE 7694
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: LD_VAR 0 9
7679: PUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 9
7687: PPUSH
7688: CALL_OW 12
7692: ARRAY
7693: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7694: LD_VAR 0 2
7698: PPUSH
7699: LD_VAR 0 3
7703: PPUSH
7704: CALL 7957 0 2
7708: NOT
7709: IFFALSE 7770
// repeat engine := _engine [ 1 ] ;
7711: LD_ADDR_VAR 0 3
7715: PUSH
7716: LD_VAR 0 11
7720: PUSH
7721: LD_INT 1
7723: ARRAY
7724: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7725: LD_ADDR_VAR 0 11
7729: PUSH
7730: LD_VAR 0 11
7734: PPUSH
7735: LD_INT 1
7737: PPUSH
7738: CALL_OW 3
7742: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL 7957 0 2
7757: IFTRUE 7768
7759: PUSH
7760: LD_VAR 0 11
7764: PUSH
7765: EMPTY
7766: EQUAL
7767: OR
7768: IFFALSE 7711
// if not control in _control then
7770: LD_VAR 0 4
7774: PUSH
7775: LD_VAR 0 12
7779: IN
7780: NOT
7781: IFFALSE 7807
// control := _control [ rand ( 1 , _control ) ] ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_VAR 0 12
7792: PUSH
7793: LD_INT 1
7795: PPUSH
7796: LD_VAR 0 12
7800: PPUSH
7801: CALL_OW 12
7805: ARRAY
7806: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7807: LD_VAR 0 2
7811: PPUSH
7812: LD_VAR 0 5
7816: PPUSH
7817: CALL 8179 0 2
7821: NOT
7822: IFFALSE 7883
// repeat weapon := _weapon [ 1 ] ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_VAR 0 10
7833: PUSH
7834: LD_INT 1
7836: ARRAY
7837: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7838: LD_ADDR_VAR 0 10
7842: PUSH
7843: LD_VAR 0 10
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: CALL_OW 3
7855: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7856: LD_VAR 0 2
7860: PPUSH
7861: LD_VAR 0 5
7865: PPUSH
7866: CALL 8179 0 2
7870: IFTRUE 7881
7872: PUSH
7873: LD_VAR 0 10
7877: PUSH
7878: EMPTY
7879: EQUAL
7880: OR
7881: IFFALSE 7824
// result := [ ] ;
7883: LD_ADDR_VAR 0 6
7887: PUSH
7888: EMPTY
7889: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7890: LD_VAR 0 1
7894: PPUSH
7895: LD_VAR 0 2
7899: PPUSH
7900: LD_VAR 0 3
7904: PPUSH
7905: LD_VAR 0 4
7909: PPUSH
7910: LD_VAR 0 5
7914: PPUSH
7915: CALL_OW 448
7919: IFFALSE 7952
// result := [ chassis , engine , control , weapon ] ;
7921: LD_ADDR_VAR 0 6
7925: PUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_VAR 0 3
7935: PUSH
7936: LD_VAR 0 4
7940: PUSH
7941: LD_VAR 0 5
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: ST_TO_ADDR
// end ;
7952: LD_VAR 0 6
7956: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7957: LD_INT 0
7959: PPUSH
// if not chassis or not engine then
7960: LD_VAR 0 1
7964: NOT
7965: IFTRUE 7974
7967: PUSH
7968: LD_VAR 0 2
7972: NOT
7973: OR
7974: IFFALSE 7978
// exit ;
7976: GO 8174
// case engine of engine_solar :
7978: LD_VAR 0 2
7982: PUSH
7983: LD_INT 2
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8029
7991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7992: LD_ADDR_VAR 0 3
7996: PUSH
7997: LD_INT 11
7999: PUSH
8000: LD_INT 12
8002: PUSH
8003: LD_INT 13
8005: PUSH
8006: LD_INT 14
8008: PUSH
8009: LD_INT 1
8011: PUSH
8012: LD_INT 2
8014: PUSH
8015: LD_INT 3
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
8027: GO 8158
8029: LD_INT 1
8031: DOUBLE
8032: EQUAL
8033: IFTRUE 8037
8035: GO 8099
8037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: LD_INT 11
8045: PUSH
8046: LD_INT 12
8048: PUSH
8049: LD_INT 13
8051: PUSH
8052: LD_INT 14
8054: PUSH
8055: LD_INT 1
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: LD_INT 4
8066: PUSH
8067: LD_INT 5
8069: PUSH
8070: LD_INT 21
8072: PUSH
8073: LD_INT 23
8075: PUSH
8076: LD_INT 22
8078: PUSH
8079: LD_INT 24
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: ST_TO_ADDR
8097: GO 8158
8099: LD_INT 3
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8157
8107: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_INT 13
8115: PUSH
8116: LD_INT 14
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_INT 3
8124: PUSH
8125: LD_INT 4
8127: PUSH
8128: LD_INT 5
8130: PUSH
8131: LD_INT 21
8133: PUSH
8134: LD_INT 22
8136: PUSH
8137: LD_INT 23
8139: PUSH
8140: LD_INT 24
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: ST_TO_ADDR
8155: GO 8158
8157: POP
// result := ( chassis in result ) ;
8158: LD_ADDR_VAR 0 3
8162: PUSH
8163: LD_VAR 0 1
8167: PUSH
8168: LD_VAR 0 3
8172: IN
8173: ST_TO_ADDR
// end ;
8174: LD_VAR 0 3
8178: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8179: LD_INT 0
8181: PPUSH
// if not chassis or not weapon then
8182: LD_VAR 0 1
8186: NOT
8187: IFTRUE 8196
8189: PUSH
8190: LD_VAR 0 2
8194: NOT
8195: OR
8196: IFFALSE 8200
// exit ;
8198: GO 9294
// case weapon of us_machine_gun :
8200: LD_VAR 0 2
8204: PUSH
8205: LD_INT 2
8207: DOUBLE
8208: EQUAL
8209: IFTRUE 8213
8211: GO 8243
8213: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8214: LD_ADDR_VAR 0 3
8218: PUSH
8219: LD_INT 1
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: LD_INT 4
8230: PUSH
8231: LD_INT 5
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: ST_TO_ADDR
8241: GO 9278
8243: LD_INT 3
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8281
8251: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8252: LD_ADDR_VAR 0 3
8256: PUSH
8257: LD_INT 1
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: LD_INT 4
8268: PUSH
8269: LD_INT 5
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: ST_TO_ADDR
8279: GO 9278
8281: LD_INT 11
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8319
8289: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8290: LD_ADDR_VAR 0 3
8294: PUSH
8295: LD_INT 1
8297: PUSH
8298: LD_INT 2
8300: PUSH
8301: LD_INT 3
8303: PUSH
8304: LD_INT 4
8306: PUSH
8307: LD_INT 5
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: ST_TO_ADDR
8317: GO 9278
8319: LD_INT 4
8321: DOUBLE
8322: EQUAL
8323: IFTRUE 8327
8325: GO 8353
8327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8328: LD_ADDR_VAR 0 3
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: LD_INT 5
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: ST_TO_ADDR
8351: GO 9278
8353: LD_INT 5
8355: DOUBLE
8356: EQUAL
8357: IFTRUE 8361
8359: GO 8387
8361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8362: LD_ADDR_VAR 0 3
8366: PUSH
8367: LD_INT 2
8369: PUSH
8370: LD_INT 3
8372: PUSH
8373: LD_INT 4
8375: PUSH
8376: LD_INT 5
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: ST_TO_ADDR
8385: GO 9278
8387: LD_INT 9
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8421
8395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8396: LD_ADDR_VAR 0 3
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: LD_INT 3
8406: PUSH
8407: LD_INT 4
8409: PUSH
8410: LD_INT 5
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: ST_TO_ADDR
8419: GO 9278
8421: LD_INT 7
8423: DOUBLE
8424: EQUAL
8425: IFTRUE 8429
8427: GO 8455
8429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8430: LD_ADDR_VAR 0 3
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 3
8440: PUSH
8441: LD_INT 4
8443: PUSH
8444: LD_INT 5
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: ST_TO_ADDR
8453: GO 9278
8455: LD_INT 12
8457: DOUBLE
8458: EQUAL
8459: IFTRUE 8463
8461: GO 8489
8463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: LD_INT 2
8471: PUSH
8472: LD_INT 3
8474: PUSH
8475: LD_INT 4
8477: PUSH
8478: LD_INT 5
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: ST_TO_ADDR
8487: GO 9278
8489: LD_INT 13
8491: DOUBLE
8492: EQUAL
8493: IFTRUE 8497
8495: GO 8523
8497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8498: LD_ADDR_VAR 0 3
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: LD_INT 4
8511: PUSH
8512: LD_INT 5
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: ST_TO_ADDR
8521: GO 9278
8523: LD_INT 14
8525: DOUBLE
8526: EQUAL
8527: IFTRUE 8531
8529: GO 8549
8531: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8532: LD_ADDR_VAR 0 3
8536: PUSH
8537: LD_INT 4
8539: PUSH
8540: LD_INT 5
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: ST_TO_ADDR
8547: GO 9278
8549: LD_INT 6
8551: DOUBLE
8552: EQUAL
8553: IFTRUE 8557
8555: GO 8575
8557: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8558: LD_ADDR_VAR 0 3
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: LD_INT 5
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: ST_TO_ADDR
8573: GO 9278
8575: LD_INT 10
8577: DOUBLE
8578: EQUAL
8579: IFTRUE 8583
8581: GO 8601
8583: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8584: LD_ADDR_VAR 0 3
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 5
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: ST_TO_ADDR
8599: GO 9278
8601: LD_INT 22
8603: DOUBLE
8604: EQUAL
8605: IFTRUE 8609
8607: GO 8635
8609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8610: LD_ADDR_VAR 0 3
8614: PUSH
8615: LD_INT 11
8617: PUSH
8618: LD_INT 12
8620: PUSH
8621: LD_INT 13
8623: PUSH
8624: LD_INT 14
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: ST_TO_ADDR
8633: GO 9278
8635: LD_INT 23
8637: DOUBLE
8638: EQUAL
8639: IFTRUE 8643
8641: GO 8669
8643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8644: LD_ADDR_VAR 0 3
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: LD_INT 12
8654: PUSH
8655: LD_INT 13
8657: PUSH
8658: LD_INT 14
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: ST_TO_ADDR
8667: GO 9278
8669: LD_INT 24
8671: DOUBLE
8672: EQUAL
8673: IFTRUE 8677
8675: GO 8703
8677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8678: LD_ADDR_VAR 0 3
8682: PUSH
8683: LD_INT 11
8685: PUSH
8686: LD_INT 12
8688: PUSH
8689: LD_INT 13
8691: PUSH
8692: LD_INT 14
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: ST_TO_ADDR
8701: GO 9278
8703: LD_INT 30
8705: DOUBLE
8706: EQUAL
8707: IFTRUE 8711
8709: GO 8737
8711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8712: LD_ADDR_VAR 0 3
8716: PUSH
8717: LD_INT 11
8719: PUSH
8720: LD_INT 12
8722: PUSH
8723: LD_INT 13
8725: PUSH
8726: LD_INT 14
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: ST_TO_ADDR
8735: GO 9278
8737: LD_INT 25
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8763
8745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8746: LD_ADDR_VAR 0 3
8750: PUSH
8751: LD_INT 13
8753: PUSH
8754: LD_INT 14
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: ST_TO_ADDR
8761: GO 9278
8763: LD_INT 27
8765: DOUBLE
8766: EQUAL
8767: IFTRUE 8771
8769: GO 8789
8771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8772: LD_ADDR_VAR 0 3
8776: PUSH
8777: LD_INT 13
8779: PUSH
8780: LD_INT 14
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: ST_TO_ADDR
8787: GO 9278
8789: LD_INT 92
8791: DOUBLE
8792: EQUAL
8793: IFTRUE 8797
8795: GO 8823
8797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8798: LD_ADDR_VAR 0 3
8802: PUSH
8803: LD_INT 11
8805: PUSH
8806: LD_INT 12
8808: PUSH
8809: LD_INT 13
8811: PUSH
8812: LD_INT 14
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: ST_TO_ADDR
8821: GO 9278
8823: LD_INT 28
8825: DOUBLE
8826: EQUAL
8827: IFTRUE 8831
8829: GO 8849
8831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_INT 13
8839: PUSH
8840: LD_INT 14
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: ST_TO_ADDR
8847: GO 9278
8849: LD_INT 29
8851: DOUBLE
8852: EQUAL
8853: IFTRUE 8857
8855: GO 8875
8857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8858: LD_ADDR_VAR 0 3
8862: PUSH
8863: LD_INT 13
8865: PUSH
8866: LD_INT 14
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: ST_TO_ADDR
8873: GO 9278
8875: LD_INT 31
8877: DOUBLE
8878: EQUAL
8879: IFTRUE 8883
8881: GO 8901
8883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8884: LD_ADDR_VAR 0 3
8888: PUSH
8889: LD_INT 13
8891: PUSH
8892: LD_INT 14
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: ST_TO_ADDR
8899: GO 9278
8901: LD_INT 26
8903: DOUBLE
8904: EQUAL
8905: IFTRUE 8909
8907: GO 8927
8909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8910: LD_ADDR_VAR 0 3
8914: PUSH
8915: LD_INT 13
8917: PUSH
8918: LD_INT 14
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: ST_TO_ADDR
8925: GO 9278
8927: LD_INT 42
8929: DOUBLE
8930: EQUAL
8931: IFTRUE 8935
8933: GO 8961
8935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8936: LD_ADDR_VAR 0 3
8940: PUSH
8941: LD_INT 21
8943: PUSH
8944: LD_INT 22
8946: PUSH
8947: LD_INT 23
8949: PUSH
8950: LD_INT 24
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: ST_TO_ADDR
8959: GO 9278
8961: LD_INT 43
8963: DOUBLE
8964: EQUAL
8965: IFTRUE 8969
8967: GO 8995
8969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8970: LD_ADDR_VAR 0 3
8974: PUSH
8975: LD_INT 21
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 23
8983: PUSH
8984: LD_INT 24
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: ST_TO_ADDR
8993: GO 9278
8995: LD_INT 44
8997: DOUBLE
8998: EQUAL
8999: IFTRUE 9003
9001: GO 9029
9003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
9004: LD_ADDR_VAR 0 3
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: LD_INT 22
9014: PUSH
9015: LD_INT 23
9017: PUSH
9018: LD_INT 24
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: ST_TO_ADDR
9027: GO 9278
9029: LD_INT 45
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9037
9035: GO 9063
9037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
9038: LD_ADDR_VAR 0 3
9042: PUSH
9043: LD_INT 21
9045: PUSH
9046: LD_INT 22
9048: PUSH
9049: LD_INT 23
9051: PUSH
9052: LD_INT 24
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: ST_TO_ADDR
9061: GO 9278
9063: LD_INT 49
9065: DOUBLE
9066: EQUAL
9067: IFTRUE 9071
9069: GO 9097
9071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9072: LD_ADDR_VAR 0 3
9076: PUSH
9077: LD_INT 21
9079: PUSH
9080: LD_INT 22
9082: PUSH
9083: LD_INT 23
9085: PUSH
9086: LD_INT 24
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: ST_TO_ADDR
9095: GO 9278
9097: LD_INT 51
9099: DOUBLE
9100: EQUAL
9101: IFTRUE 9105
9103: GO 9131
9105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
9106: LD_ADDR_VAR 0 3
9110: PUSH
9111: LD_INT 21
9113: PUSH
9114: LD_INT 22
9116: PUSH
9117: LD_INT 23
9119: PUSH
9120: LD_INT 24
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: ST_TO_ADDR
9129: GO 9278
9131: LD_INT 52
9133: DOUBLE
9134: EQUAL
9135: IFTRUE 9139
9137: GO 9165
9139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9140: LD_ADDR_VAR 0 3
9144: PUSH
9145: LD_INT 21
9147: PUSH
9148: LD_INT 22
9150: PUSH
9151: LD_INT 23
9153: PUSH
9154: LD_INT 24
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: ST_TO_ADDR
9163: GO 9278
9165: LD_INT 53
9167: DOUBLE
9168: EQUAL
9169: IFTRUE 9173
9171: GO 9191
9173: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9174: LD_ADDR_VAR 0 3
9178: PUSH
9179: LD_INT 23
9181: PUSH
9182: LD_INT 24
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: ST_TO_ADDR
9189: GO 9278
9191: LD_INT 46
9193: DOUBLE
9194: EQUAL
9195: IFTRUE 9199
9197: GO 9217
9199: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9200: LD_ADDR_VAR 0 3
9204: PUSH
9205: LD_INT 23
9207: PUSH
9208: LD_INT 24
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: ST_TO_ADDR
9215: GO 9278
9217: LD_INT 47
9219: DOUBLE
9220: EQUAL
9221: IFTRUE 9225
9223: GO 9243
9225: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
9226: LD_ADDR_VAR 0 3
9230: PUSH
9231: LD_INT 23
9233: PUSH
9234: LD_INT 24
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: ST_TO_ADDR
9241: GO 9278
9243: LD_INT 98
9245: DOUBLE
9246: EQUAL
9247: IFTRUE 9251
9249: GO 9277
9251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9252: LD_ADDR_VAR 0 3
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 22
9262: PUSH
9263: LD_INT 23
9265: PUSH
9266: LD_INT 24
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: ST_TO_ADDR
9275: GO 9278
9277: POP
// result := ( chassis in result ) ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: LD_VAR 0 1
9287: PUSH
9288: LD_VAR 0 3
9292: IN
9293: ST_TO_ADDR
// end ;
9294: LD_VAR 0 3
9298: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9299: LD_INT 0
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
// result := array ;
9308: LD_ADDR_VAR 0 5
9312: PUSH
9313: LD_VAR 0 1
9317: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9318: LD_VAR 0 1
9322: NOT
9323: IFTRUE 9332
9325: PUSH
9326: LD_VAR 0 2
9330: NOT
9331: OR
9332: IFTRUE 9341
9334: PUSH
9335: LD_VAR 0 3
9339: NOT
9340: OR
9341: IFTRUE 9355
9343: PUSH
9344: LD_VAR 0 2
9348: PUSH
9349: LD_VAR 0 1
9353: GREATER
9354: OR
9355: IFTRUE 9369
9357: PUSH
9358: LD_VAR 0 3
9362: PUSH
9363: LD_VAR 0 1
9367: GREATER
9368: OR
9369: IFFALSE 9373
// exit ;
9371: GO 9669
// if direction then
9373: LD_VAR 0 4
9377: IFFALSE 9441
// begin d := 1 ;
9379: LD_ADDR_VAR 0 9
9383: PUSH
9384: LD_INT 1
9386: ST_TO_ADDR
// if i_from > i_to then
9387: LD_VAR 0 2
9391: PUSH
9392: LD_VAR 0 3
9396: GREATER
9397: IFFALSE 9423
// length := ( array - i_from ) + i_to else
9399: LD_ADDR_VAR 0 11
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_VAR 0 2
9413: MINUS
9414: PUSH
9415: LD_VAR 0 3
9419: PLUS
9420: ST_TO_ADDR
9421: GO 9439
// length := i_to - i_from ;
9423: LD_ADDR_VAR 0 11
9427: PUSH
9428: LD_VAR 0 3
9432: PUSH
9433: LD_VAR 0 2
9437: MINUS
9438: ST_TO_ADDR
// end else
9439: GO 9502
// begin d := - 1 ;
9441: LD_ADDR_VAR 0 9
9445: PUSH
9446: LD_INT 1
9448: NEG
9449: ST_TO_ADDR
// if i_from > i_to then
9450: LD_VAR 0 2
9454: PUSH
9455: LD_VAR 0 3
9459: GREATER
9460: IFFALSE 9480
// length := i_from - i_to else
9462: LD_ADDR_VAR 0 11
9466: PUSH
9467: LD_VAR 0 2
9471: PUSH
9472: LD_VAR 0 3
9476: MINUS
9477: ST_TO_ADDR
9478: GO 9502
// length := ( array - i_to ) + i_from ;
9480: LD_ADDR_VAR 0 11
9484: PUSH
9485: LD_VAR 0 1
9489: PUSH
9490: LD_VAR 0 3
9494: MINUS
9495: PUSH
9496: LD_VAR 0 2
9500: PLUS
9501: ST_TO_ADDR
// end ; if not length then
9502: LD_VAR 0 11
9506: NOT
9507: IFFALSE 9511
// exit ;
9509: GO 9669
// tmp := array ;
9511: LD_ADDR_VAR 0 10
9515: PUSH
9516: LD_VAR 0 1
9520: ST_TO_ADDR
// for i = 1 to length do
9521: LD_ADDR_VAR 0 6
9525: PUSH
9526: DOUBLE
9527: LD_INT 1
9529: DEC
9530: ST_TO_ADDR
9531: LD_VAR 0 11
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9657
// begin for j = 1 to array do
9539: LD_ADDR_VAR 0 7
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_VAR 0 1
9553: PUSH
9554: FOR_TO
9555: IFFALSE 9643
// begin k := j + d ;
9557: LD_ADDR_VAR 0 8
9561: PUSH
9562: LD_VAR 0 7
9566: PUSH
9567: LD_VAR 0 9
9571: PLUS
9572: ST_TO_ADDR
// if k > array then
9573: LD_VAR 0 8
9577: PUSH
9578: LD_VAR 0 1
9582: GREATER
9583: IFFALSE 9593
// k := 1 ;
9585: LD_ADDR_VAR 0 8
9589: PUSH
9590: LD_INT 1
9592: ST_TO_ADDR
// if not k then
9593: LD_VAR 0 8
9597: NOT
9598: IFFALSE 9610
// k := array ;
9600: LD_ADDR_VAR 0 8
9604: PUSH
9605: LD_VAR 0 1
9609: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9610: LD_ADDR_VAR 0 10
9614: PUSH
9615: LD_VAR 0 10
9619: PPUSH
9620: LD_VAR 0 8
9624: PPUSH
9625: LD_VAR 0 1
9629: PUSH
9630: LD_VAR 0 7
9634: ARRAY
9635: PPUSH
9636: CALL_OW 1
9640: ST_TO_ADDR
// end ;
9641: GO 9554
9643: POP
9644: POP
// array := tmp ;
9645: LD_ADDR_VAR 0 1
9649: PUSH
9650: LD_VAR 0 10
9654: ST_TO_ADDR
// end ;
9655: GO 9536
9657: POP
9658: POP
// result := array ;
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_VAR 0 1
9668: ST_TO_ADDR
// end ;
9669: LD_VAR 0 5
9673: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9674: LD_INT 0
9676: PPUSH
9677: PPUSH
// result := 0 ;
9678: LD_ADDR_VAR 0 3
9682: PUSH
9683: LD_INT 0
9685: ST_TO_ADDR
// if not array or not value in array then
9686: LD_VAR 0 1
9690: NOT
9691: IFTRUE 9706
9693: PUSH
9694: LD_VAR 0 2
9698: PUSH
9699: LD_VAR 0 1
9703: IN
9704: NOT
9705: OR
9706: IFFALSE 9710
// exit ;
9708: GO 9764
// for i = 1 to array do
9710: LD_ADDR_VAR 0 4
9714: PUSH
9715: DOUBLE
9716: LD_INT 1
9718: DEC
9719: ST_TO_ADDR
9720: LD_VAR 0 1
9724: PUSH
9725: FOR_TO
9726: IFFALSE 9762
// if value = array [ i ] then
9728: LD_VAR 0 2
9732: PUSH
9733: LD_VAR 0 1
9737: PUSH
9738: LD_VAR 0 4
9742: ARRAY
9743: EQUAL
9744: IFFALSE 9760
// begin result := i ;
9746: LD_ADDR_VAR 0 3
9750: PUSH
9751: LD_VAR 0 4
9755: ST_TO_ADDR
// exit ;
9756: POP
9757: POP
9758: GO 9764
// end ;
9760: GO 9725
9762: POP
9763: POP
// end ;
9764: LD_VAR 0 3
9768: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9769: LD_INT 0
9771: PPUSH
// vc_chassis := chassis ;
9772: LD_ADDR_OWVAR 37
9776: PUSH
9777: LD_VAR 0 1
9781: ST_TO_ADDR
// vc_engine := engine ;
9782: LD_ADDR_OWVAR 39
9786: PUSH
9787: LD_VAR 0 2
9791: ST_TO_ADDR
// vc_control := control ;
9792: LD_ADDR_OWVAR 38
9796: PUSH
9797: LD_VAR 0 3
9801: ST_TO_ADDR
// vc_weapon := weapon ;
9802: LD_ADDR_OWVAR 40
9806: PUSH
9807: LD_VAR 0 4
9811: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9812: LD_ADDR_OWVAR 41
9816: PUSH
9817: LD_VAR 0 5
9821: ST_TO_ADDR
// end ;
9822: LD_VAR 0 6
9826: RET
// export function WantPlant ( unit ) ; var task ; begin
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
// result := false ;
9831: LD_ADDR_VAR 0 2
9835: PUSH
9836: LD_INT 0
9838: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9839: LD_ADDR_VAR 0 3
9843: PUSH
9844: LD_VAR 0 1
9848: PPUSH
9849: CALL_OW 437
9853: ST_TO_ADDR
// if task then
9854: LD_VAR 0 3
9858: IFFALSE 9886
// if task [ 1 ] [ 1 ] = p then
9860: LD_VAR 0 3
9864: PUSH
9865: LD_INT 1
9867: ARRAY
9868: PUSH
9869: LD_INT 1
9871: ARRAY
9872: PUSH
9873: LD_STRING p
9875: EQUAL
9876: IFFALSE 9886
// result := true ;
9878: LD_ADDR_VAR 0 2
9882: PUSH
9883: LD_INT 1
9885: ST_TO_ADDR
// end ;
9886: LD_VAR 0 2
9890: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9891: LD_INT 0
9893: PPUSH
9894: PPUSH
9895: PPUSH
9896: PPUSH
// if pos < 1 then
9897: LD_VAR 0 2
9901: PUSH
9902: LD_INT 1
9904: LESS
9905: IFFALSE 9909
// exit ;
9907: GO 10212
// if pos = 1 then
9909: LD_VAR 0 2
9913: PUSH
9914: LD_INT 1
9916: EQUAL
9917: IFFALSE 9950
// result := Replace ( arr , pos [ 1 ] , value ) else
9919: LD_ADDR_VAR 0 4
9923: PUSH
9924: LD_VAR 0 1
9928: PPUSH
9929: LD_VAR 0 2
9933: PUSH
9934: LD_INT 1
9936: ARRAY
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: CALL_OW 1
9947: ST_TO_ADDR
9948: GO 10212
// begin tmp := arr ;
9950: LD_ADDR_VAR 0 6
9954: PUSH
9955: LD_VAR 0 1
9959: ST_TO_ADDR
// s_arr := [ tmp ] ;
9960: LD_ADDR_VAR 0 7
9964: PUSH
9965: LD_VAR 0 6
9969: PUSH
9970: EMPTY
9971: LIST
9972: ST_TO_ADDR
// for i = 1 to pos - 1 do
9973: LD_ADDR_VAR 0 5
9977: PUSH
9978: DOUBLE
9979: LD_INT 1
9981: DEC
9982: ST_TO_ADDR
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: MINUS
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10038
// begin tmp := tmp [ pos [ i ] ] ;
9995: LD_ADDR_VAR 0 6
9999: PUSH
10000: LD_VAR 0 6
10004: PUSH
10005: LD_VAR 0 2
10009: PUSH
10010: LD_VAR 0 5
10014: ARRAY
10015: ARRAY
10016: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
10017: LD_ADDR_VAR 0 7
10021: PUSH
10022: LD_VAR 0 7
10026: PUSH
10027: LD_VAR 0 6
10031: PUSH
10032: EMPTY
10033: LIST
10034: ADD
10035: ST_TO_ADDR
// end ;
10036: GO 9992
10038: POP
10039: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
10040: LD_ADDR_VAR 0 6
10044: PUSH
10045: LD_VAR 0 6
10049: PPUSH
10050: LD_VAR 0 2
10054: PUSH
10055: LD_VAR 0 2
10059: ARRAY
10060: PPUSH
10061: LD_VAR 0 3
10065: PPUSH
10066: CALL_OW 1
10070: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
10071: LD_ADDR_VAR 0 7
10075: PUSH
10076: LD_VAR 0 7
10080: PPUSH
10081: LD_VAR 0 7
10085: PPUSH
10086: LD_VAR 0 6
10090: PPUSH
10091: CALL_OW 1
10095: ST_TO_ADDR
// for i = s_arr downto 2 do
10096: LD_ADDR_VAR 0 5
10100: PUSH
10101: DOUBLE
10102: LD_VAR 0 7
10106: INC
10107: ST_TO_ADDR
10108: LD_INT 2
10110: PUSH
10111: FOR_DOWNTO
10112: IFFALSE 10196
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
10114: LD_ADDR_VAR 0 6
10118: PUSH
10119: LD_VAR 0 7
10123: PUSH
10124: LD_VAR 0 5
10128: PUSH
10129: LD_INT 1
10131: MINUS
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 2
10138: PUSH
10139: LD_VAR 0 5
10143: PUSH
10144: LD_INT 1
10146: MINUS
10147: ARRAY
10148: PPUSH
10149: LD_VAR 0 7
10153: PUSH
10154: LD_VAR 0 5
10158: ARRAY
10159: PPUSH
10160: CALL_OW 1
10164: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
10165: LD_ADDR_VAR 0 7
10169: PUSH
10170: LD_VAR 0 7
10174: PPUSH
10175: LD_VAR 0 5
10179: PUSH
10180: LD_INT 1
10182: MINUS
10183: PPUSH
10184: LD_VAR 0 6
10188: PPUSH
10189: CALL_OW 1
10193: ST_TO_ADDR
// end ;
10194: GO 10111
10196: POP
10197: POP
// result := s_arr [ 1 ] ;
10198: LD_ADDR_VAR 0 4
10202: PUSH
10203: LD_VAR 0 7
10207: PUSH
10208: LD_INT 1
10210: ARRAY
10211: ST_TO_ADDR
// end ; end ;
10212: LD_VAR 0 4
10216: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10217: LD_INT 0
10219: PPUSH
10220: PPUSH
// if not list then
10221: LD_VAR 0 1
10225: NOT
10226: IFFALSE 10230
// exit ;
10228: GO 10321
// i := list [ pos1 ] ;
10230: LD_ADDR_VAR 0 5
10234: PUSH
10235: LD_VAR 0 1
10239: PUSH
10240: LD_VAR 0 2
10244: ARRAY
10245: ST_TO_ADDR
// if not i then
10246: LD_VAR 0 5
10250: NOT
10251: IFFALSE 10255
// exit ;
10253: GO 10321
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10255: LD_ADDR_VAR 0 1
10259: PUSH
10260: LD_VAR 0 1
10264: PPUSH
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_VAR 0 1
10274: PUSH
10275: LD_VAR 0 3
10279: ARRAY
10280: PPUSH
10281: CALL_OW 1
10285: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10286: LD_ADDR_VAR 0 1
10290: PUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: LD_VAR 0 5
10305: PPUSH
10306: CALL_OW 1
10310: ST_TO_ADDR
// result := list ;
10311: LD_ADDR_VAR 0 4
10315: PUSH
10316: LD_VAR 0 1
10320: ST_TO_ADDR
// end ;
10321: LD_VAR 0 4
10325: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10326: LD_INT 0
10328: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10329: LD_ADDR_VAR 0 5
10333: PUSH
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL_OW 250
10343: PPUSH
10344: LD_VAR 0 1
10348: PPUSH
10349: CALL_OW 251
10353: PPUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_VAR 0 4
10368: PPUSH
10369: CALL 10751 0 5
10373: ST_TO_ADDR
// end ;
10374: LD_VAR 0 5
10378: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
10379: LD_INT 0
10381: PPUSH
10382: PPUSH
10383: PPUSH
10384: PPUSH
// if not list or not unit then
10385: LD_VAR 0 2
10389: NOT
10390: IFTRUE 10399
10392: PUSH
10393: LD_VAR 0 1
10397: NOT
10398: OR
10399: IFFALSE 10403
// exit ;
10401: GO 10746
// result := [ ] ;
10403: LD_ADDR_VAR 0 5
10407: PUSH
10408: EMPTY
10409: ST_TO_ADDR
// for i in list do
10410: LD_ADDR_VAR 0 6
10414: PUSH
10415: LD_VAR 0 2
10419: PUSH
10420: FOR_IN
10421: IFFALSE 10639
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
10423: LD_ADDR_VAR 0 8
10427: PUSH
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_VAR 0 6
10437: PUSH
10438: LD_INT 1
10440: ARRAY
10441: PPUSH
10442: LD_VAR 0 6
10446: PUSH
10447: LD_INT 2
10449: ARRAY
10450: PPUSH
10451: CALL_OW 297
10455: ST_TO_ADDR
// if not Count ( result ) then
10456: LD_VAR 0 5
10460: PPUSH
10461: CALL 6973 0 1
10465: NOT
10466: IFFALSE 10499
// begin result := Join ( result , [ i , tmp ] ) ;
10468: LD_ADDR_VAR 0 5
10472: PUSH
10473: LD_VAR 0 5
10477: PPUSH
10478: LD_VAR 0 6
10482: PUSH
10483: LD_VAR 0 8
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PPUSH
10492: CALL 42949 0 2
10496: ST_TO_ADDR
// continue ;
10497: GO 10420
// end ; if result [ result ] [ 2 ] <= tmp then
10499: LD_VAR 0 5
10503: PUSH
10504: LD_VAR 0 5
10508: ARRAY
10509: PUSH
10510: LD_INT 2
10512: ARRAY
10513: PUSH
10514: LD_VAR 0 8
10518: LESSEQUAL
10519: IFFALSE 10552
// result := Join ( result , [ i , tmp ] ) else
10521: LD_ADDR_VAR 0 5
10525: PUSH
10526: LD_VAR 0 5
10530: PPUSH
10531: LD_VAR 0 6
10535: PUSH
10536: LD_VAR 0 8
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL 42949 0 2
10549: ST_TO_ADDR
10550: GO 10637
// begin for j := 1 to Count ( result ) do
10552: LD_ADDR_VAR 0 7
10556: PUSH
10557: DOUBLE
10558: LD_INT 1
10560: DEC
10561: ST_TO_ADDR
10562: LD_VAR 0 5
10566: PPUSH
10567: CALL 6973 0 1
10571: PUSH
10572: FOR_TO
10573: IFFALSE 10635
// begin if tmp < result [ j ] [ 2 ] then
10575: LD_VAR 0 8
10579: PUSH
10580: LD_VAR 0 5
10584: PUSH
10585: LD_VAR 0 7
10589: ARRAY
10590: PUSH
10591: LD_INT 2
10593: ARRAY
10594: LESS
10595: IFFALSE 10633
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_VAR 0 5
10606: PPUSH
10607: LD_VAR 0 7
10611: PPUSH
10612: LD_VAR 0 6
10616: PUSH
10617: LD_VAR 0 8
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PPUSH
10626: CALL_OW 2
10630: ST_TO_ADDR
// break ;
10631: GO 10635
// end ; end ;
10633: GO 10572
10635: POP
10636: POP
// end ; end ;
10637: GO 10420
10639: POP
10640: POP
// if result and not asc then
10641: LD_VAR 0 5
10645: IFFALSE 10654
10647: PUSH
10648: LD_VAR 0 3
10652: NOT
10653: AND
10654: IFFALSE 10671
// result := ReverseArray ( result ) ;
10656: LD_ADDR_VAR 0 5
10660: PUSH
10661: LD_VAR 0 5
10665: PPUSH
10666: CALL 38029 0 1
10670: ST_TO_ADDR
// tmp := [ ] ;
10671: LD_ADDR_VAR 0 8
10675: PUSH
10676: EMPTY
10677: ST_TO_ADDR
// if mode then
10678: LD_VAR 0 4
10682: IFFALSE 10746
// begin for i := 1 to result do
10684: LD_ADDR_VAR 0 6
10688: PUSH
10689: DOUBLE
10690: LD_INT 1
10692: DEC
10693: ST_TO_ADDR
10694: LD_VAR 0 5
10698: PUSH
10699: FOR_TO
10700: IFFALSE 10734
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
10702: LD_ADDR_VAR 0 8
10706: PUSH
10707: LD_VAR 0 8
10711: PPUSH
10712: LD_VAR 0 5
10716: PUSH
10717: LD_VAR 0 6
10721: ARRAY
10722: PUSH
10723: LD_INT 1
10725: ARRAY
10726: PPUSH
10727: CALL 42949 0 2
10731: ST_TO_ADDR
10732: GO 10699
10734: POP
10735: POP
// result := tmp ;
10736: LD_ADDR_VAR 0 5
10740: PUSH
10741: LD_VAR 0 8
10745: ST_TO_ADDR
// end ; end ;
10746: LD_VAR 0 5
10750: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10751: LD_INT 0
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
// if not list then
10757: LD_VAR 0 3
10761: NOT
10762: IFFALSE 10766
// exit ;
10764: GO 11156
// result := [ ] ;
10766: LD_ADDR_VAR 0 6
10770: PUSH
10771: EMPTY
10772: ST_TO_ADDR
// for i in list do
10773: LD_ADDR_VAR 0 7
10777: PUSH
10778: LD_VAR 0 3
10782: PUSH
10783: FOR_IN
10784: IFFALSE 10986
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10786: LD_ADDR_VAR 0 9
10790: PUSH
10791: LD_VAR 0 7
10795: PPUSH
10796: LD_VAR 0 1
10800: PPUSH
10801: LD_VAR 0 2
10805: PPUSH
10806: CALL_OW 297
10810: ST_TO_ADDR
// if not result then
10811: LD_VAR 0 6
10815: NOT
10816: IFFALSE 10842
// result := [ [ i , tmp ] ] else
10818: LD_ADDR_VAR 0 6
10822: PUSH
10823: LD_VAR 0 7
10827: PUSH
10828: LD_VAR 0 9
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: ST_TO_ADDR
10840: GO 10984
// begin if result [ result ] [ 2 ] <= tmp then
10842: LD_VAR 0 6
10846: PUSH
10847: LD_VAR 0 6
10851: ARRAY
10852: PUSH
10853: LD_INT 2
10855: ARRAY
10856: PUSH
10857: LD_VAR 0 9
10861: LESSEQUAL
10862: IFFALSE 10904
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10864: LD_ADDR_VAR 0 6
10868: PUSH
10869: LD_VAR 0 6
10873: PPUSH
10874: LD_VAR 0 6
10878: PUSH
10879: LD_INT 1
10881: PLUS
10882: PPUSH
10883: LD_VAR 0 7
10887: PUSH
10888: LD_VAR 0 9
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PPUSH
10897: CALL_OW 2
10901: ST_TO_ADDR
10902: GO 10984
// for j := 1 to result do
10904: LD_ADDR_VAR 0 8
10908: PUSH
10909: DOUBLE
10910: LD_INT 1
10912: DEC
10913: ST_TO_ADDR
10914: LD_VAR 0 6
10918: PUSH
10919: FOR_TO
10920: IFFALSE 10982
// begin if tmp < result [ j ] [ 2 ] then
10922: LD_VAR 0 9
10926: PUSH
10927: LD_VAR 0 6
10931: PUSH
10932: LD_VAR 0 8
10936: ARRAY
10937: PUSH
10938: LD_INT 2
10940: ARRAY
10941: LESS
10942: IFFALSE 10980
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10944: LD_ADDR_VAR 0 6
10948: PUSH
10949: LD_VAR 0 6
10953: PPUSH
10954: LD_VAR 0 8
10958: PPUSH
10959: LD_VAR 0 7
10963: PUSH
10964: LD_VAR 0 9
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PPUSH
10973: CALL_OW 2
10977: ST_TO_ADDR
// break ;
10978: GO 10982
// end ; end ;
10980: GO 10919
10982: POP
10983: POP
// end ; end ;
10984: GO 10783
10986: POP
10987: POP
// if result and not asc then
10988: LD_VAR 0 6
10992: IFFALSE 11001
10994: PUSH
10995: LD_VAR 0 4
10999: NOT
11000: AND
11001: IFFALSE 11076
// begin tmp := result ;
11003: LD_ADDR_VAR 0 9
11007: PUSH
11008: LD_VAR 0 6
11012: ST_TO_ADDR
// for i = tmp downto 1 do
11013: LD_ADDR_VAR 0 7
11017: PUSH
11018: DOUBLE
11019: LD_VAR 0 9
11023: INC
11024: ST_TO_ADDR
11025: LD_INT 1
11027: PUSH
11028: FOR_DOWNTO
11029: IFFALSE 11074
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
11031: LD_ADDR_VAR 0 6
11035: PUSH
11036: LD_VAR 0 6
11040: PPUSH
11041: LD_VAR 0 9
11045: PUSH
11046: LD_VAR 0 7
11050: MINUS
11051: PUSH
11052: LD_INT 1
11054: PLUS
11055: PPUSH
11056: LD_VAR 0 9
11060: PUSH
11061: LD_VAR 0 7
11065: ARRAY
11066: PPUSH
11067: CALL_OW 1
11071: ST_TO_ADDR
11072: GO 11028
11074: POP
11075: POP
// end ; tmp := [ ] ;
11076: LD_ADDR_VAR 0 9
11080: PUSH
11081: EMPTY
11082: ST_TO_ADDR
// if mode then
11083: LD_VAR 0 5
11087: IFFALSE 11156
// begin for i = 1 to result do
11089: LD_ADDR_VAR 0 7
11093: PUSH
11094: DOUBLE
11095: LD_INT 1
11097: DEC
11098: ST_TO_ADDR
11099: LD_VAR 0 6
11103: PUSH
11104: FOR_TO
11105: IFFALSE 11144
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11107: LD_ADDR_VAR 0 9
11111: PUSH
11112: LD_VAR 0 9
11116: PPUSH
11117: LD_VAR 0 7
11121: PPUSH
11122: LD_VAR 0 6
11126: PUSH
11127: LD_VAR 0 7
11131: ARRAY
11132: PUSH
11133: LD_INT 1
11135: ARRAY
11136: PPUSH
11137: CALL_OW 1
11141: ST_TO_ADDR
11142: GO 11104
11144: POP
11145: POP
// result := tmp ;
11146: LD_ADDR_VAR 0 6
11150: PUSH
11151: LD_VAR 0 9
11155: ST_TO_ADDR
// end ; end ;
11156: LD_VAR 0 6
11160: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11169: LD_ADDR_VAR 0 5
11173: PUSH
11174: LD_INT 0
11176: PUSH
11177: LD_INT 0
11179: PUSH
11180: LD_INT 0
11182: PUSH
11183: EMPTY
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: ST_TO_ADDR
// if not x or not y then
11191: LD_VAR 0 2
11195: NOT
11196: IFTRUE 11205
11198: PUSH
11199: LD_VAR 0 3
11203: NOT
11204: OR
11205: IFFALSE 11209
// exit ;
11207: GO 12865
// if not range then
11209: LD_VAR 0 4
11213: NOT
11214: IFFALSE 11224
// range := 10 ;
11216: LD_ADDR_VAR 0 4
11220: PUSH
11221: LD_INT 10
11223: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11224: LD_ADDR_VAR 0 8
11228: PUSH
11229: LD_INT 81
11231: PUSH
11232: LD_VAR 0 1
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 92
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: LD_VAR 0 3
11253: PUSH
11254: LD_VAR 0 4
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: LD_INT 21
11270: PUSH
11271: LD_INT 3
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: PPUSH
11287: CALL_OW 69
11291: ST_TO_ADDR
// if not tmp then
11292: LD_VAR 0 8
11296: NOT
11297: IFFALSE 11301
// exit ;
11299: GO 12865
// for i in tmp do
11301: LD_ADDR_VAR 0 6
11305: PUSH
11306: LD_VAR 0 8
11310: PUSH
11311: FOR_IN
11312: IFFALSE 12840
// begin points := [ 0 , 0 , 0 ] ;
11314: LD_ADDR_VAR 0 9
11318: PUSH
11319: LD_INT 0
11321: PUSH
11322: LD_INT 0
11324: PUSH
11325: LD_INT 0
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: ST_TO_ADDR
// bpoints := 1 ;
11333: LD_ADDR_VAR 0 10
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11341: LD_VAR 0 6
11345: PPUSH
11346: CALL_OW 247
11350: PUSH
11351: LD_INT 1
11353: DOUBLE
11354: EQUAL
11355: IFTRUE 11359
11357: GO 11941
11359: POP
// begin if GetClass ( i ) = 1 then
11360: LD_VAR 0 6
11364: PPUSH
11365: CALL_OW 257
11369: PUSH
11370: LD_INT 1
11372: EQUAL
11373: IFFALSE 11394
// points := [ 10 , 5 , 3 ] ;
11375: LD_ADDR_VAR 0 9
11379: PUSH
11380: LD_INT 10
11382: PUSH
11383: LD_INT 5
11385: PUSH
11386: LD_INT 3
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: LIST
11393: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11394: LD_VAR 0 6
11398: PPUSH
11399: CALL_OW 257
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: LD_INT 3
11409: PUSH
11410: LD_INT 4
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: IN
11418: IFFALSE 11439
// points := [ 3 , 2 , 1 ] ;
11420: LD_ADDR_VAR 0 9
11424: PUSH
11425: LD_INT 3
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: LD_INT 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11439: LD_VAR 0 6
11443: PPUSH
11444: CALL_OW 257
11448: PUSH
11449: LD_INT 5
11451: EQUAL
11452: IFFALSE 11473
// points := [ 130 , 5 , 2 ] ;
11454: LD_ADDR_VAR 0 9
11458: PUSH
11459: LD_INT 130
11461: PUSH
11462: LD_INT 5
11464: PUSH
11465: LD_INT 2
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11473: LD_VAR 0 6
11477: PPUSH
11478: CALL_OW 257
11482: PUSH
11483: LD_INT 8
11485: EQUAL
11486: IFFALSE 11507
// points := [ 35 , 35 , 30 ] ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_INT 35
11495: PUSH
11496: LD_INT 35
11498: PUSH
11499: LD_INT 30
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11507: LD_VAR 0 6
11511: PPUSH
11512: CALL_OW 257
11516: PUSH
11517: LD_INT 9
11519: EQUAL
11520: IFFALSE 11541
// points := [ 20 , 55 , 40 ] ;
11522: LD_ADDR_VAR 0 9
11526: PUSH
11527: LD_INT 20
11529: PUSH
11530: LD_INT 55
11532: PUSH
11533: LD_INT 40
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11541: LD_VAR 0 6
11545: PPUSH
11546: CALL_OW 257
11550: PUSH
11551: LD_INT 12
11553: PUSH
11554: LD_INT 16
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: IN
11561: IFFALSE 11582
// points := [ 5 , 3 , 2 ] ;
11563: LD_ADDR_VAR 0 9
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 2
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11582: LD_VAR 0 6
11586: PPUSH
11587: CALL_OW 257
11591: PUSH
11592: LD_INT 17
11594: EQUAL
11595: IFFALSE 11616
// points := [ 100 , 50 , 75 ] ;
11597: LD_ADDR_VAR 0 9
11601: PUSH
11602: LD_INT 100
11604: PUSH
11605: LD_INT 50
11607: PUSH
11608: LD_INT 75
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11616: LD_VAR 0 6
11620: PPUSH
11621: CALL_OW 257
11625: PUSH
11626: LD_INT 15
11628: EQUAL
11629: IFFALSE 11650
// points := [ 10 , 5 , 3 ] ;
11631: LD_ADDR_VAR 0 9
11635: PUSH
11636: LD_INT 10
11638: PUSH
11639: LD_INT 5
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11650: LD_VAR 0 6
11654: PPUSH
11655: CALL_OW 257
11659: PUSH
11660: LD_INT 14
11662: EQUAL
11663: IFFALSE 11684
// points := [ 10 , 0 , 0 ] ;
11665: LD_ADDR_VAR 0 9
11669: PUSH
11670: LD_INT 10
11672: PUSH
11673: LD_INT 0
11675: PUSH
11676: LD_INT 0
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11684: LD_VAR 0 6
11688: PPUSH
11689: CALL_OW 257
11693: PUSH
11694: LD_INT 11
11696: EQUAL
11697: IFFALSE 11718
// points := [ 30 , 10 , 5 ] ;
11699: LD_ADDR_VAR 0 9
11703: PUSH
11704: LD_INT 30
11706: PUSH
11707: LD_INT 10
11709: PUSH
11710: LD_INT 5
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11718: LD_VAR 0 1
11722: PPUSH
11723: LD_INT 5
11725: PPUSH
11726: CALL_OW 321
11730: PUSH
11731: LD_INT 2
11733: EQUAL
11734: IFFALSE 11751
// bpoints := bpoints * 1.8 ;
11736: LD_ADDR_VAR 0 10
11740: PUSH
11741: LD_VAR 0 10
11745: PUSH
11746: LD_REAL  1.80000000000000E+0000
11749: MUL
11750: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11751: LD_VAR 0 6
11755: PPUSH
11756: CALL_OW 257
11760: PUSH
11761: LD_INT 1
11763: PUSH
11764: LD_INT 2
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: LD_INT 4
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: IN
11779: IFFALSE 11799
11781: PUSH
11782: LD_VAR 0 1
11786: PPUSH
11787: LD_INT 51
11789: PPUSH
11790: CALL_OW 321
11794: PUSH
11795: LD_INT 2
11797: EQUAL
11798: AND
11799: IFFALSE 11816
// bpoints := bpoints * 1.2 ;
11801: LD_ADDR_VAR 0 10
11805: PUSH
11806: LD_VAR 0 10
11810: PUSH
11811: LD_REAL  1.20000000000000E+0000
11814: MUL
11815: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11816: LD_VAR 0 6
11820: PPUSH
11821: CALL_OW 257
11825: PUSH
11826: LD_INT 5
11828: PUSH
11829: LD_INT 7
11831: PUSH
11832: LD_INT 9
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: IN
11840: IFFALSE 11860
11842: PUSH
11843: LD_VAR 0 1
11847: PPUSH
11848: LD_INT 52
11850: PPUSH
11851: CALL_OW 321
11855: PUSH
11856: LD_INT 2
11858: EQUAL
11859: AND
11860: IFFALSE 11877
// bpoints := bpoints * 1.5 ;
11862: LD_ADDR_VAR 0 10
11866: PUSH
11867: LD_VAR 0 10
11871: PUSH
11872: LD_REAL  1.50000000000000E+0000
11875: MUL
11876: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11877: LD_VAR 0 1
11881: PPUSH
11882: LD_INT 66
11884: PPUSH
11885: CALL_OW 321
11889: PUSH
11890: LD_INT 2
11892: EQUAL
11893: IFFALSE 11910
// bpoints := bpoints * 1.1 ;
11895: LD_ADDR_VAR 0 10
11899: PUSH
11900: LD_VAR 0 10
11904: PUSH
11905: LD_REAL  1.10000000000000E+0000
11908: MUL
11909: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11910: LD_ADDR_VAR 0 10
11914: PUSH
11915: LD_VAR 0 10
11919: PUSH
11920: LD_VAR 0 6
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 259
11932: PUSH
11933: LD_REAL  1.15000000000000E+0000
11936: MUL
11937: MUL
11938: ST_TO_ADDR
// end ; unit_vehicle :
11939: GO 12769
11941: LD_INT 2
11943: DOUBLE
11944: EQUAL
11945: IFTRUE 11949
11947: GO 12757
11949: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11950: LD_VAR 0 6
11954: PPUSH
11955: CALL_OW 264
11959: PUSH
11960: LD_INT 2
11962: PUSH
11963: LD_INT 42
11965: PUSH
11966: LD_INT 24
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: IN
11974: IFFALSE 11995
// points := [ 25 , 5 , 3 ] ;
11976: LD_ADDR_VAR 0 9
11980: PUSH
11981: LD_INT 25
11983: PUSH
11984: LD_INT 5
11986: PUSH
11987: LD_INT 3
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11995: LD_VAR 0 6
11999: PPUSH
12000: CALL_OW 264
12004: PUSH
12005: LD_INT 4
12007: PUSH
12008: LD_INT 43
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: IN
12019: IFFALSE 12040
// points := [ 40 , 15 , 5 ] ;
12021: LD_ADDR_VAR 0 9
12025: PUSH
12026: LD_INT 40
12028: PUSH
12029: LD_INT 15
12031: PUSH
12032: LD_INT 5
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
12040: LD_VAR 0 6
12044: PPUSH
12045: CALL_OW 264
12049: PUSH
12050: LD_INT 3
12052: PUSH
12053: LD_INT 23
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: IN
12060: IFFALSE 12081
// points := [ 7 , 25 , 8 ] ;
12062: LD_ADDR_VAR 0 9
12066: PUSH
12067: LD_INT 7
12069: PUSH
12070: LD_INT 25
12072: PUSH
12073: LD_INT 8
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12081: LD_VAR 0 6
12085: PPUSH
12086: CALL_OW 264
12090: PUSH
12091: LD_INT 5
12093: PUSH
12094: LD_INT 27
12096: PUSH
12097: LD_INT 44
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: IN
12105: IFFALSE 12126
// points := [ 14 , 50 , 16 ] ;
12107: LD_ADDR_VAR 0 9
12111: PUSH
12112: LD_INT 14
12114: PUSH
12115: LD_INT 50
12117: PUSH
12118: LD_INT 16
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12126: LD_VAR 0 6
12130: PPUSH
12131: CALL_OW 264
12135: PUSH
12136: LD_INT 6
12138: PUSH
12139: LD_INT 46
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: IN
12146: IFFALSE 12167
// points := [ 32 , 120 , 70 ] ;
12148: LD_ADDR_VAR 0 9
12152: PUSH
12153: LD_INT 32
12155: PUSH
12156: LD_INT 120
12158: PUSH
12159: LD_INT 70
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
12167: LD_VAR 0 6
12171: PPUSH
12172: CALL_OW 264
12176: PUSH
12177: LD_INT 7
12179: PUSH
12180: LD_INT 28
12182: PUSH
12183: LD_INT 45
12185: PUSH
12186: LD_INT 92
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: IN
12195: IFFALSE 12216
// points := [ 35 , 20 , 45 ] ;
12197: LD_ADDR_VAR 0 9
12201: PUSH
12202: LD_INT 35
12204: PUSH
12205: LD_INT 20
12207: PUSH
12208: LD_INT 45
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12216: LD_VAR 0 6
12220: PPUSH
12221: CALL_OW 264
12225: PUSH
12226: LD_INT 47
12228: PUSH
12229: EMPTY
12230: LIST
12231: IN
12232: IFFALSE 12253
// points := [ 67 , 45 , 75 ] ;
12234: LD_ADDR_VAR 0 9
12238: PUSH
12239: LD_INT 67
12241: PUSH
12242: LD_INT 45
12244: PUSH
12245: LD_INT 75
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12253: LD_VAR 0 6
12257: PPUSH
12258: CALL_OW 264
12262: PUSH
12263: LD_INT 26
12265: PUSH
12266: EMPTY
12267: LIST
12268: IN
12269: IFFALSE 12290
// points := [ 120 , 30 , 80 ] ;
12271: LD_ADDR_VAR 0 9
12275: PUSH
12276: LD_INT 120
12278: PUSH
12279: LD_INT 30
12281: PUSH
12282: LD_INT 80
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12290: LD_VAR 0 6
12294: PPUSH
12295: CALL_OW 264
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: EMPTY
12304: LIST
12305: IN
12306: IFFALSE 12327
// points := [ 40 , 1 , 1 ] ;
12308: LD_ADDR_VAR 0 9
12312: PUSH
12313: LD_INT 40
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12327: LD_VAR 0 6
12331: PPUSH
12332: CALL_OW 264
12336: PUSH
12337: LD_INT 29
12339: PUSH
12340: EMPTY
12341: LIST
12342: IN
12343: IFFALSE 12364
// points := [ 70 , 200 , 400 ] ;
12345: LD_ADDR_VAR 0 9
12349: PUSH
12350: LD_INT 70
12352: PUSH
12353: LD_INT 200
12355: PUSH
12356: LD_INT 400
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: LIST
12363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12364: LD_VAR 0 6
12368: PPUSH
12369: CALL_OW 264
12373: PUSH
12374: LD_INT 14
12376: PUSH
12377: LD_INT 53
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: IN
12384: IFFALSE 12405
// points := [ 40 , 10 , 20 ] ;
12386: LD_ADDR_VAR 0 9
12390: PUSH
12391: LD_INT 40
12393: PUSH
12394: LD_INT 10
12396: PUSH
12397: LD_INT 20
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12405: LD_VAR 0 6
12409: PPUSH
12410: CALL_OW 264
12414: PUSH
12415: LD_INT 9
12417: PUSH
12418: EMPTY
12419: LIST
12420: IN
12421: IFFALSE 12442
// points := [ 5 , 70 , 20 ] ;
12423: LD_ADDR_VAR 0 9
12427: PUSH
12428: LD_INT 5
12430: PUSH
12431: LD_INT 70
12433: PUSH
12434: LD_INT 20
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12442: LD_VAR 0 6
12446: PPUSH
12447: CALL_OW 264
12451: PUSH
12452: LD_INT 10
12454: PUSH
12455: EMPTY
12456: LIST
12457: IN
12458: IFFALSE 12479
// points := [ 35 , 110 , 70 ] ;
12460: LD_ADDR_VAR 0 9
12464: PUSH
12465: LD_INT 35
12467: PUSH
12468: LD_INT 110
12470: PUSH
12471: LD_INT 70
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12479: LD_VAR 0 6
12483: PPUSH
12484: CALL_OW 265
12488: PUSH
12489: LD_INT 25
12491: EQUAL
12492: IFFALSE 12513
// points := [ 80 , 65 , 100 ] ;
12494: LD_ADDR_VAR 0 9
12498: PUSH
12499: LD_INT 80
12501: PUSH
12502: LD_INT 65
12504: PUSH
12505: LD_INT 100
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12513: LD_VAR 0 6
12517: PPUSH
12518: CALL_OW 263
12522: PUSH
12523: LD_INT 1
12525: EQUAL
12526: IFFALSE 12561
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12528: LD_ADDR_VAR 0 10
12532: PUSH
12533: LD_VAR 0 10
12537: PUSH
12538: LD_VAR 0 6
12542: PPUSH
12543: CALL_OW 311
12547: PPUSH
12548: LD_INT 3
12550: PPUSH
12551: CALL_OW 259
12555: PUSH
12556: LD_INT 4
12558: MUL
12559: MUL
12560: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12561: LD_VAR 0 6
12565: PPUSH
12566: CALL_OW 263
12570: PUSH
12571: LD_INT 2
12573: EQUAL
12574: IFFALSE 12625
// begin j := IsControledBy ( i ) ;
12576: LD_ADDR_VAR 0 7
12580: PUSH
12581: LD_VAR 0 6
12585: PPUSH
12586: CALL_OW 312
12590: ST_TO_ADDR
// if j then
12591: LD_VAR 0 7
12595: IFFALSE 12625
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12597: LD_ADDR_VAR 0 10
12601: PUSH
12602: LD_VAR 0 10
12606: PUSH
12607: LD_VAR 0 7
12611: PPUSH
12612: LD_INT 3
12614: PPUSH
12615: CALL_OW 259
12619: PUSH
12620: LD_INT 3
12622: MUL
12623: MUL
12624: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12625: LD_VAR 0 6
12629: PPUSH
12630: CALL_OW 264
12634: PUSH
12635: LD_INT 5
12637: PUSH
12638: LD_INT 6
12640: PUSH
12641: LD_INT 46
12643: PUSH
12644: LD_INT 44
12646: PUSH
12647: LD_INT 47
12649: PUSH
12650: LD_INT 45
12652: PUSH
12653: LD_INT 28
12655: PUSH
12656: LD_INT 7
12658: PUSH
12659: LD_INT 27
12661: PUSH
12662: LD_INT 29
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: IN
12677: IFFALSE 12697
12679: PUSH
12680: LD_VAR 0 1
12684: PPUSH
12685: LD_INT 52
12687: PPUSH
12688: CALL_OW 321
12692: PUSH
12693: LD_INT 2
12695: EQUAL
12696: AND
12697: IFFALSE 12714
// bpoints := bpoints * 1.2 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_VAR 0 10
12708: PUSH
12709: LD_REAL  1.20000000000000E+0000
12712: MUL
12713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12714: LD_VAR 0 6
12718: PPUSH
12719: CALL_OW 264
12723: PUSH
12724: LD_INT 6
12726: PUSH
12727: LD_INT 46
12729: PUSH
12730: LD_INT 47
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: IN
12738: IFFALSE 12755
// bpoints := bpoints * 1.2 ;
12740: LD_ADDR_VAR 0 10
12744: PUSH
12745: LD_VAR 0 10
12749: PUSH
12750: LD_REAL  1.20000000000000E+0000
12753: MUL
12754: ST_TO_ADDR
// end ; unit_building :
12755: GO 12769
12757: LD_INT 3
12759: DOUBLE
12760: EQUAL
12761: IFTRUE 12765
12763: GO 12768
12765: POP
// ; end ;
12766: GO 12769
12768: POP
// for j = 1 to 3 do
12769: LD_ADDR_VAR 0 7
12773: PUSH
12774: DOUBLE
12775: LD_INT 1
12777: DEC
12778: ST_TO_ADDR
12779: LD_INT 3
12781: PUSH
12782: FOR_TO
12783: IFFALSE 12836
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12785: LD_ADDR_VAR 0 5
12789: PUSH
12790: LD_VAR 0 5
12794: PPUSH
12795: LD_VAR 0 7
12799: PPUSH
12800: LD_VAR 0 5
12804: PUSH
12805: LD_VAR 0 7
12809: ARRAY
12810: PUSH
12811: LD_VAR 0 9
12815: PUSH
12816: LD_VAR 0 7
12820: ARRAY
12821: PUSH
12822: LD_VAR 0 10
12826: MUL
12827: PLUS
12828: PPUSH
12829: CALL_OW 1
12833: ST_TO_ADDR
12834: GO 12782
12836: POP
12837: POP
// end ;
12838: GO 11311
12840: POP
12841: POP
// result := Replace ( result , 4 , tmp ) ;
12842: LD_ADDR_VAR 0 5
12846: PUSH
12847: LD_VAR 0 5
12851: PPUSH
12852: LD_INT 4
12854: PPUSH
12855: LD_VAR 0 8
12859: PPUSH
12860: CALL_OW 1
12864: ST_TO_ADDR
// end ;
12865: LD_VAR 0 5
12869: RET
// export function DangerAtRange ( unit , range ) ; begin
12870: LD_INT 0
12872: PPUSH
// if not unit then
12873: LD_VAR 0 1
12877: NOT
12878: IFFALSE 12882
// exit ;
12880: GO 12927
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: LD_VAR 0 1
12891: PPUSH
12892: CALL_OW 255
12896: PPUSH
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 250
12906: PPUSH
12907: LD_VAR 0 1
12911: PPUSH
12912: CALL_OW 251
12916: PPUSH
12917: LD_VAR 0 2
12921: PPUSH
12922: CALL 11161 0 4
12926: ST_TO_ADDR
// end ;
12927: LD_VAR 0 3
12931: RET
// export function DangerInArea ( side , area ) ; begin
12932: LD_INT 0
12934: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_VAR 0 2
12944: PPUSH
12945: LD_INT 81
12947: PUSH
12948: LD_VAR 0 1
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PPUSH
12957: CALL_OW 70
12961: ST_TO_ADDR
// end ;
12962: LD_VAR 0 3
12966: RET
// export function IsExtension ( b ) ; begin
12967: LD_INT 0
12969: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_VAR 0 1
12979: PUSH
12980: LD_INT 23
12982: PUSH
12983: LD_INT 20
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_INT 17
12991: PUSH
12992: LD_INT 24
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 19
13000: PUSH
13001: LD_INT 16
13003: PUSH
13004: LD_INT 25
13006: PUSH
13007: LD_INT 18
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: IN
13022: ST_TO_ADDR
// end ;
13023: LD_VAR 0 2
13027: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
13028: LD_INT 0
13030: PPUSH
13031: PPUSH
13032: PPUSH
// result := [ ] ;
13033: LD_ADDR_VAR 0 4
13037: PUSH
13038: EMPTY
13039: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
13040: LD_ADDR_VAR 0 5
13044: PUSH
13045: LD_VAR 0 2
13049: PPUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 70
13064: ST_TO_ADDR
// if not tmp then
13065: LD_VAR 0 5
13069: NOT
13070: IFFALSE 13074
// exit ;
13072: GO 13138
// if checkLink then
13074: LD_VAR 0 3
13078: IFFALSE 13128
// begin for i in tmp do
13080: LD_ADDR_VAR 0 6
13084: PUSH
13085: LD_VAR 0 5
13089: PUSH
13090: FOR_IN
13091: IFFALSE 13126
// if GetBase ( i ) <> base then
13093: LD_VAR 0 6
13097: PPUSH
13098: CALL_OW 274
13102: PUSH
13103: LD_VAR 0 1
13107: NONEQUAL
13108: IFFALSE 13124
// ComLinkToBase ( base , i ) ;
13110: LD_VAR 0 1
13114: PPUSH
13115: LD_VAR 0 6
13119: PPUSH
13120: CALL_OW 169
13124: GO 13090
13126: POP
13127: POP
// end ; result := tmp ;
13128: LD_ADDR_VAR 0 4
13132: PUSH
13133: LD_VAR 0 5
13137: ST_TO_ADDR
// end ;
13138: LD_VAR 0 4
13142: RET
// export function ComComplete ( units , b ) ; var i ; begin
13143: LD_INT 0
13145: PPUSH
13146: PPUSH
// if not units then
13147: LD_VAR 0 1
13151: NOT
13152: IFFALSE 13156
// exit ;
13154: GO 13246
// for i in units do
13156: LD_ADDR_VAR 0 4
13160: PUSH
13161: LD_VAR 0 1
13165: PUSH
13166: FOR_IN
13167: IFFALSE 13244
// if BuildingStatus ( b ) = bs_build then
13169: LD_VAR 0 2
13173: PPUSH
13174: CALL_OW 461
13178: PUSH
13179: LD_INT 1
13181: EQUAL
13182: IFFALSE 13242
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13184: LD_VAR 0 4
13188: PPUSH
13189: LD_STRING h
13191: PUSH
13192: LD_VAR 0 2
13196: PPUSH
13197: CALL_OW 250
13201: PUSH
13202: LD_VAR 0 2
13206: PPUSH
13207: CALL_OW 251
13211: PUSH
13212: LD_VAR 0 2
13216: PUSH
13217: LD_INT 0
13219: PUSH
13220: LD_INT 0
13222: PUSH
13223: LD_INT 0
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: PPUSH
13238: CALL_OW 446
13242: GO 13166
13244: POP
13245: POP
// end ;
13246: LD_VAR 0 3
13250: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13259: LD_VAR 0 1
13263: NOT
13264: IFTRUE 13281
13266: PUSH
13267: LD_VAR 0 1
13271: PPUSH
13272: CALL_OW 263
13276: PUSH
13277: LD_INT 2
13279: NONEQUAL
13280: OR
13281: IFFALSE 13285
// exit ;
13283: GO 13601
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13285: LD_ADDR_VAR 0 6
13289: PUSH
13290: LD_INT 22
13292: PUSH
13293: LD_VAR 0 1
13297: PPUSH
13298: CALL_OW 255
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 36
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 34
13322: PUSH
13323: LD_INT 31
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL_OW 69
13343: ST_TO_ADDR
// if not tmp then
13344: LD_VAR 0 6
13348: NOT
13349: IFFALSE 13353
// exit ;
13351: GO 13601
// result := [ ] ;
13353: LD_ADDR_VAR 0 2
13357: PUSH
13358: EMPTY
13359: ST_TO_ADDR
// for i in tmp do
13360: LD_ADDR_VAR 0 3
13364: PUSH
13365: LD_VAR 0 6
13369: PUSH
13370: FOR_IN
13371: IFFALSE 13442
// begin t := UnitsInside ( i ) ;
13373: LD_ADDR_VAR 0 4
13377: PUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: CALL_OW 313
13387: ST_TO_ADDR
// if t then
13388: LD_VAR 0 4
13392: IFFALSE 13440
// for j in t do
13394: LD_ADDR_VAR 0 7
13398: PUSH
13399: LD_VAR 0 4
13403: PUSH
13404: FOR_IN
13405: IFFALSE 13438
// result := Replace ( result , result + 1 , j ) ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_VAR 0 2
13416: PPUSH
13417: LD_VAR 0 2
13421: PUSH
13422: LD_INT 1
13424: PLUS
13425: PPUSH
13426: LD_VAR 0 7
13430: PPUSH
13431: CALL_OW 1
13435: ST_TO_ADDR
13436: GO 13404
13438: POP
13439: POP
// end ;
13440: GO 13370
13442: POP
13443: POP
// if not result then
13444: LD_VAR 0 2
13448: NOT
13449: IFFALSE 13453
// exit ;
13451: GO 13601
// mech := result [ 1 ] ;
13453: LD_ADDR_VAR 0 5
13457: PUSH
13458: LD_VAR 0 2
13462: PUSH
13463: LD_INT 1
13465: ARRAY
13466: ST_TO_ADDR
// if result > 1 then
13467: LD_VAR 0 2
13471: PUSH
13472: LD_INT 1
13474: GREATER
13475: IFFALSE 13587
// begin for i = 2 to result do
13477: LD_ADDR_VAR 0 3
13481: PUSH
13482: DOUBLE
13483: LD_INT 2
13485: DEC
13486: ST_TO_ADDR
13487: LD_VAR 0 2
13491: PUSH
13492: FOR_TO
13493: IFFALSE 13585
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13495: LD_ADDR_VAR 0 4
13499: PUSH
13500: LD_VAR 0 2
13504: PUSH
13505: LD_VAR 0 3
13509: ARRAY
13510: PPUSH
13511: LD_INT 3
13513: PPUSH
13514: CALL_OW 259
13518: PUSH
13519: LD_VAR 0 2
13523: PUSH
13524: LD_VAR 0 3
13528: ARRAY
13529: PPUSH
13530: CALL_OW 432
13534: MINUS
13535: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13536: LD_VAR 0 4
13540: PUSH
13541: LD_VAR 0 5
13545: PPUSH
13546: LD_INT 3
13548: PPUSH
13549: CALL_OW 259
13553: PUSH
13554: LD_VAR 0 5
13558: PPUSH
13559: CALL_OW 432
13563: MINUS
13564: GREATEREQUAL
13565: IFFALSE 13583
// mech := result [ i ] ;
13567: LD_ADDR_VAR 0 5
13571: PUSH
13572: LD_VAR 0 2
13576: PUSH
13577: LD_VAR 0 3
13581: ARRAY
13582: ST_TO_ADDR
// end ;
13583: GO 13492
13585: POP
13586: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13587: LD_VAR 0 1
13591: PPUSH
13592: LD_VAR 0 5
13596: PPUSH
13597: CALL_OW 135
// end ;
13601: LD_VAR 0 2
13605: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13606: LD_INT 0
13608: PPUSH
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
13618: PPUSH
13619: PPUSH
13620: PPUSH
// result := [ ] ;
13621: LD_ADDR_VAR 0 7
13625: PUSH
13626: EMPTY
13627: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13628: LD_VAR 0 1
13632: PPUSH
13633: CALL_OW 266
13637: PUSH
13638: LD_INT 0
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: IN
13648: NOT
13649: IFFALSE 13653
// exit ;
13651: GO 15293
// if name then
13653: LD_VAR 0 3
13657: IFFALSE 13673
// SetBName ( base_dep , name ) ;
13659: LD_VAR 0 1
13663: PPUSH
13664: LD_VAR 0 3
13668: PPUSH
13669: CALL_OW 500
// base := GetBase ( base_dep ) ;
13673: LD_ADDR_VAR 0 15
13677: PUSH
13678: LD_VAR 0 1
13682: PPUSH
13683: CALL_OW 274
13687: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13688: LD_ADDR_VAR 0 16
13692: PUSH
13693: LD_VAR 0 1
13697: PPUSH
13698: CALL_OW 255
13702: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13703: LD_ADDR_VAR 0 17
13707: PUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 248
13717: ST_TO_ADDR
// if sources then
13718: LD_VAR 0 5
13722: IFFALSE 13769
// for i = 1 to 3 do
13724: LD_ADDR_VAR 0 8
13728: PUSH
13729: DOUBLE
13730: LD_INT 1
13732: DEC
13733: ST_TO_ADDR
13734: LD_INT 3
13736: PUSH
13737: FOR_TO
13738: IFFALSE 13767
// AddResourceType ( base , i , sources [ i ] ) ;
13740: LD_VAR 0 15
13744: PPUSH
13745: LD_VAR 0 8
13749: PPUSH
13750: LD_VAR 0 5
13754: PUSH
13755: LD_VAR 0 8
13759: ARRAY
13760: PPUSH
13761: CALL_OW 276
13765: GO 13737
13767: POP
13768: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13769: LD_ADDR_VAR 0 18
13773: PUSH
13774: LD_VAR 0 15
13778: PPUSH
13779: LD_VAR 0 2
13783: PPUSH
13784: LD_INT 1
13786: PPUSH
13787: CALL 13028 0 3
13791: ST_TO_ADDR
// InitHc ;
13792: CALL_OW 19
// InitUc ;
13796: CALL_OW 18
// uc_side := side ;
13800: LD_ADDR_OWVAR 20
13804: PUSH
13805: LD_VAR 0 16
13809: ST_TO_ADDR
// uc_nation := nation ;
13810: LD_ADDR_OWVAR 21
13814: PUSH
13815: LD_VAR 0 17
13819: ST_TO_ADDR
// if buildings then
13820: LD_VAR 0 18
13824: IFFALSE 15152
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13826: LD_ADDR_VAR 0 19
13830: PUSH
13831: LD_VAR 0 18
13835: PPUSH
13836: LD_INT 2
13838: PUSH
13839: LD_INT 30
13841: PUSH
13842: LD_INT 29
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 30
13851: PUSH
13852: LD_INT 30
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 72
13868: ST_TO_ADDR
// if tmp then
13869: LD_VAR 0 19
13873: IFFALSE 13921
// for i in tmp do
13875: LD_ADDR_VAR 0 8
13879: PUSH
13880: LD_VAR 0 19
13884: PUSH
13885: FOR_IN
13886: IFFALSE 13919
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13888: LD_VAR 0 8
13892: PPUSH
13893: CALL_OW 250
13897: PPUSH
13898: LD_VAR 0 8
13902: PPUSH
13903: CALL_OW 251
13907: PPUSH
13908: LD_VAR 0 16
13912: PPUSH
13913: CALL_OW 441
13917: GO 13885
13919: POP
13920: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13921: LD_VAR 0 18
13925: PPUSH
13926: LD_INT 2
13928: PUSH
13929: LD_INT 30
13931: PUSH
13932: LD_INT 32
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 30
13941: PUSH
13942: LD_INT 33
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 72
13958: IFFALSE 14046
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13960: LD_ADDR_VAR 0 8
13964: PUSH
13965: LD_VAR 0 18
13969: PPUSH
13970: LD_INT 2
13972: PUSH
13973: LD_INT 30
13975: PUSH
13976: LD_INT 32
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 33
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 72
14002: PUSH
14003: FOR_IN
14004: IFFALSE 14044
// begin if not GetBWeapon ( i ) then
14006: LD_VAR 0 8
14010: PPUSH
14011: CALL_OW 269
14015: NOT
14016: IFFALSE 14042
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
14018: LD_VAR 0 8
14022: PPUSH
14023: LD_VAR 0 8
14027: PPUSH
14028: LD_VAR 0 2
14032: PPUSH
14033: CALL 15298 0 2
14037: PPUSH
14038: CALL_OW 431
// end ;
14042: GO 14003
14044: POP
14045: POP
// end ; for i = 1 to personel do
14046: LD_ADDR_VAR 0 8
14050: PUSH
14051: DOUBLE
14052: LD_INT 1
14054: DEC
14055: ST_TO_ADDR
14056: LD_VAR 0 6
14060: PUSH
14061: FOR_TO
14062: IFFALSE 15132
// begin if i > 4 then
14064: LD_VAR 0 8
14068: PUSH
14069: LD_INT 4
14071: GREATER
14072: IFFALSE 14076
// break ;
14074: GO 15132
// case i of 1 :
14076: LD_VAR 0 8
14080: PUSH
14081: LD_INT 1
14083: DOUBLE
14084: EQUAL
14085: IFTRUE 14089
14087: GO 14169
14089: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14090: LD_ADDR_VAR 0 12
14094: PUSH
14095: LD_VAR 0 18
14099: PPUSH
14100: LD_INT 22
14102: PUSH
14103: LD_VAR 0 16
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 58
14114: PUSH
14115: EMPTY
14116: LIST
14117: PUSH
14118: LD_INT 2
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 32
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 30
14133: PUSH
14134: LD_INT 4
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 30
14143: PUSH
14144: LD_INT 5
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: PPUSH
14162: CALL_OW 72
14166: ST_TO_ADDR
14167: GO 14391
14169: LD_INT 2
14171: DOUBLE
14172: EQUAL
14173: IFTRUE 14177
14175: GO 14239
14177: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14178: LD_ADDR_VAR 0 12
14182: PUSH
14183: LD_VAR 0 18
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_VAR 0 16
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 2
14202: PUSH
14203: LD_INT 30
14205: PUSH
14206: LD_INT 0
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 30
14215: PUSH
14216: LD_INT 1
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PPUSH
14232: CALL_OW 72
14236: ST_TO_ADDR
14237: GO 14391
14239: LD_INT 3
14241: DOUBLE
14242: EQUAL
14243: IFTRUE 14247
14245: GO 14309
14247: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14248: LD_ADDR_VAR 0 12
14252: PUSH
14253: LD_VAR 0 18
14257: PPUSH
14258: LD_INT 22
14260: PUSH
14261: LD_VAR 0 16
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 30
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 72
14306: ST_TO_ADDR
14307: GO 14391
14309: LD_INT 4
14311: DOUBLE
14312: EQUAL
14313: IFTRUE 14317
14315: GO 14390
14317: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14318: LD_ADDR_VAR 0 12
14322: PUSH
14323: LD_VAR 0 18
14327: PPUSH
14328: LD_INT 22
14330: PUSH
14331: LD_VAR 0 16
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 30
14345: PUSH
14346: LD_INT 6
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 30
14355: PUSH
14356: LD_INT 7
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 30
14365: PUSH
14366: LD_INT 8
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 72
14387: ST_TO_ADDR
14388: GO 14391
14390: POP
// if i = 1 then
14391: LD_VAR 0 8
14395: PUSH
14396: LD_INT 1
14398: EQUAL
14399: IFFALSE 14510
// begin tmp := [ ] ;
14401: LD_ADDR_VAR 0 19
14405: PUSH
14406: EMPTY
14407: ST_TO_ADDR
// for j in f do
14408: LD_ADDR_VAR 0 9
14412: PUSH
14413: LD_VAR 0 12
14417: PUSH
14418: FOR_IN
14419: IFFALSE 14492
// if GetBType ( j ) = b_bunker then
14421: LD_VAR 0 9
14425: PPUSH
14426: CALL_OW 266
14430: PUSH
14431: LD_INT 32
14433: EQUAL
14434: IFFALSE 14461
// tmp := Insert ( tmp , 1 , j ) else
14436: LD_ADDR_VAR 0 19
14440: PUSH
14441: LD_VAR 0 19
14445: PPUSH
14446: LD_INT 1
14448: PPUSH
14449: LD_VAR 0 9
14453: PPUSH
14454: CALL_OW 2
14458: ST_TO_ADDR
14459: GO 14490
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14461: LD_ADDR_VAR 0 19
14465: PUSH
14466: LD_VAR 0 19
14470: PPUSH
14471: LD_VAR 0 19
14475: PUSH
14476: LD_INT 1
14478: PLUS
14479: PPUSH
14480: LD_VAR 0 9
14484: PPUSH
14485: CALL_OW 2
14489: ST_TO_ADDR
14490: GO 14418
14492: POP
14493: POP
// if tmp then
14494: LD_VAR 0 19
14498: IFFALSE 14510
// f := tmp ;
14500: LD_ADDR_VAR 0 12
14504: PUSH
14505: LD_VAR 0 19
14509: ST_TO_ADDR
// end ; x := personel [ i ] ;
14510: LD_ADDR_VAR 0 13
14514: PUSH
14515: LD_VAR 0 6
14519: PUSH
14520: LD_VAR 0 8
14524: ARRAY
14525: ST_TO_ADDR
// if x = - 1 then
14526: LD_VAR 0 13
14530: PUSH
14531: LD_INT 1
14533: NEG
14534: EQUAL
14535: IFFALSE 14746
// begin for j in f do
14537: LD_ADDR_VAR 0 9
14541: PUSH
14542: LD_VAR 0 12
14546: PUSH
14547: FOR_IN
14548: IFFALSE 14742
// repeat InitHc ;
14550: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14554: LD_VAR 0 9
14558: PPUSH
14559: CALL_OW 266
14563: PUSH
14564: LD_INT 5
14566: EQUAL
14567: IFFALSE 14637
// begin if UnitsInside ( j ) < 3 then
14569: LD_VAR 0 9
14573: PPUSH
14574: CALL_OW 313
14578: PUSH
14579: LD_INT 3
14581: LESS
14582: IFFALSE 14618
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14584: LD_INT 0
14586: PPUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 8
14592: PUSH
14593: LD_INT 9
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: PUSH
14601: LD_VAR 0 17
14605: ARRAY
14606: PPUSH
14607: LD_VAR 0 4
14611: PPUSH
14612: CALL_OW 380
14616: GO 14635
// PrepareHuman ( false , i , skill ) ;
14618: LD_INT 0
14620: PPUSH
14621: LD_VAR 0 8
14625: PPUSH
14626: LD_VAR 0 4
14630: PPUSH
14631: CALL_OW 380
// end else
14635: GO 14654
// PrepareHuman ( false , i , skill ) ;
14637: LD_INT 0
14639: PPUSH
14640: LD_VAR 0 8
14644: PPUSH
14645: LD_VAR 0 4
14649: PPUSH
14650: CALL_OW 380
// un := CreateHuman ;
14654: LD_ADDR_VAR 0 14
14658: PUSH
14659: CALL_OW 44
14663: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14664: LD_ADDR_VAR 0 7
14668: PUSH
14669: LD_VAR 0 7
14673: PPUSH
14674: LD_INT 1
14676: PPUSH
14677: LD_VAR 0 14
14681: PPUSH
14682: CALL_OW 2
14686: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14687: LD_VAR 0 14
14691: PPUSH
14692: LD_VAR 0 9
14696: PPUSH
14697: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14701: LD_VAR 0 9
14705: PPUSH
14706: CALL_OW 313
14710: PUSH
14711: LD_INT 6
14713: EQUAL
14714: IFTRUE 14738
14716: PUSH
14717: LD_VAR 0 9
14721: PPUSH
14722: CALL_OW 266
14726: PUSH
14727: LD_INT 32
14729: PUSH
14730: LD_INT 31
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: IN
14737: OR
14738: IFFALSE 14550
14740: GO 14547
14742: POP
14743: POP
// end else
14744: GO 15130
// for j = 1 to x do
14746: LD_ADDR_VAR 0 9
14750: PUSH
14751: DOUBLE
14752: LD_INT 1
14754: DEC
14755: ST_TO_ADDR
14756: LD_VAR 0 13
14760: PUSH
14761: FOR_TO
14762: IFFALSE 15128
// begin InitHc ;
14764: CALL_OW 19
// if not f then
14768: LD_VAR 0 12
14772: NOT
14773: IFFALSE 14862
// begin PrepareHuman ( false , i , skill ) ;
14775: LD_INT 0
14777: PPUSH
14778: LD_VAR 0 8
14782: PPUSH
14783: LD_VAR 0 4
14787: PPUSH
14788: CALL_OW 380
// un := CreateHuman ;
14792: LD_ADDR_VAR 0 14
14796: PUSH
14797: CALL_OW 44
14801: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14802: LD_ADDR_VAR 0 7
14806: PUSH
14807: LD_VAR 0 7
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: LD_VAR 0 14
14819: PPUSH
14820: CALL_OW 2
14824: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14825: LD_VAR 0 14
14829: PPUSH
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL_OW 250
14839: PPUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 251
14849: PPUSH
14850: LD_INT 10
14852: PPUSH
14853: LD_INT 0
14855: PPUSH
14856: CALL_OW 50
// continue ;
14860: GO 14761
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14862: LD_VAR 0 12
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: CALL_OW 313
14875: IFFALSE 14903
14877: PUSH
14878: LD_VAR 0 12
14882: PUSH
14883: LD_INT 1
14885: ARRAY
14886: PPUSH
14887: CALL_OW 266
14891: PUSH
14892: LD_INT 32
14894: PUSH
14895: LD_INT 31
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: IN
14902: AND
14903: IFTRUE 14924
14905: PUSH
14906: LD_VAR 0 12
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: CALL_OW 313
14919: PUSH
14920: LD_INT 6
14922: EQUAL
14923: OR
14924: IFFALSE 14944
// f := Delete ( f , 1 ) ;
14926: LD_ADDR_VAR 0 12
14930: PUSH
14931: LD_VAR 0 12
14935: PPUSH
14936: LD_INT 1
14938: PPUSH
14939: CALL_OW 3
14943: ST_TO_ADDR
// if not f then
14944: LD_VAR 0 12
14948: NOT
14949: IFFALSE 14967
// begin x := x + 2 ;
14951: LD_ADDR_VAR 0 13
14955: PUSH
14956: LD_VAR 0 13
14960: PUSH
14961: LD_INT 2
14963: PLUS
14964: ST_TO_ADDR
// continue ;
14965: GO 14761
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14967: LD_VAR 0 12
14971: PUSH
14972: LD_INT 1
14974: ARRAY
14975: PPUSH
14976: CALL_OW 266
14980: PUSH
14981: LD_INT 5
14983: EQUAL
14984: IFFALSE 15058
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14986: LD_VAR 0 12
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: CALL_OW 313
14999: PUSH
15000: LD_INT 3
15002: LESS
15003: IFFALSE 15039
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15005: LD_INT 0
15007: PPUSH
15008: LD_INT 5
15010: PUSH
15011: LD_INT 8
15013: PUSH
15014: LD_INT 9
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: LD_VAR 0 17
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 4
15032: PPUSH
15033: CALL_OW 380
15037: GO 15056
// PrepareHuman ( false , i , skill ) ;
15039: LD_INT 0
15041: PPUSH
15042: LD_VAR 0 8
15046: PPUSH
15047: LD_VAR 0 4
15051: PPUSH
15052: CALL_OW 380
// end else
15056: GO 15075
// PrepareHuman ( false , i , skill ) ;
15058: LD_INT 0
15060: PPUSH
15061: LD_VAR 0 8
15065: PPUSH
15066: LD_VAR 0 4
15070: PPUSH
15071: CALL_OW 380
// un := CreateHuman ;
15075: LD_ADDR_VAR 0 14
15079: PUSH
15080: CALL_OW 44
15084: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15085: LD_ADDR_VAR 0 7
15089: PUSH
15090: LD_VAR 0 7
15094: PPUSH
15095: LD_INT 1
15097: PPUSH
15098: LD_VAR 0 14
15102: PPUSH
15103: CALL_OW 2
15107: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15108: LD_VAR 0 14
15112: PPUSH
15113: LD_VAR 0 12
15117: PUSH
15118: LD_INT 1
15120: ARRAY
15121: PPUSH
15122: CALL_OW 52
// end ;
15126: GO 14761
15128: POP
15129: POP
// end ;
15130: GO 14061
15132: POP
15133: POP
// result := result ^ buildings ;
15134: LD_ADDR_VAR 0 7
15138: PUSH
15139: LD_VAR 0 7
15143: PUSH
15144: LD_VAR 0 18
15148: ADD
15149: ST_TO_ADDR
// end else
15150: GO 15293
// begin for i = 1 to personel do
15152: LD_ADDR_VAR 0 8
15156: PUSH
15157: DOUBLE
15158: LD_INT 1
15160: DEC
15161: ST_TO_ADDR
15162: LD_VAR 0 6
15166: PUSH
15167: FOR_TO
15168: IFFALSE 15291
// begin if i > 4 then
15170: LD_VAR 0 8
15174: PUSH
15175: LD_INT 4
15177: GREATER
15178: IFFALSE 15182
// break ;
15180: GO 15291
// x := personel [ i ] ;
15182: LD_ADDR_VAR 0 13
15186: PUSH
15187: LD_VAR 0 6
15191: PUSH
15192: LD_VAR 0 8
15196: ARRAY
15197: ST_TO_ADDR
// if x = - 1 then
15198: LD_VAR 0 13
15202: PUSH
15203: LD_INT 1
15205: NEG
15206: EQUAL
15207: IFFALSE 15211
// continue ;
15209: GO 15167
// PrepareHuman ( false , i , skill ) ;
15211: LD_INT 0
15213: PPUSH
15214: LD_VAR 0 8
15218: PPUSH
15219: LD_VAR 0 4
15223: PPUSH
15224: CALL_OW 380
// un := CreateHuman ;
15228: LD_ADDR_VAR 0 14
15232: PUSH
15233: CALL_OW 44
15237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15238: LD_VAR 0 14
15242: PPUSH
15243: LD_VAR 0 1
15247: PPUSH
15248: CALL_OW 250
15252: PPUSH
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 251
15262: PPUSH
15263: LD_INT 10
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 50
// result := result ^ un ;
15273: LD_ADDR_VAR 0 7
15277: PUSH
15278: LD_VAR 0 7
15282: PUSH
15283: LD_VAR 0 14
15287: ADD
15288: ST_TO_ADDR
// end ;
15289: GO 15167
15291: POP
15292: POP
// end ; end ;
15293: LD_VAR 0 7
15297: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15298: LD_INT 0
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
15314: PPUSH
15315: PPUSH
// result := false ;
15316: LD_ADDR_VAR 0 3
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15324: LD_VAR 0 1
15328: NOT
15329: IFTRUE 15354
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 266
15341: PUSH
15342: LD_INT 32
15344: PUSH
15345: LD_INT 33
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: IN
15352: NOT
15353: OR
15354: IFFALSE 15358
// exit ;
15356: GO 16493
// nat := GetNation ( tower ) ;
15358: LD_ADDR_VAR 0 12
15362: PUSH
15363: LD_VAR 0 1
15367: PPUSH
15368: CALL_OW 248
15372: ST_TO_ADDR
// side := GetSide ( tower ) ;
15373: LD_ADDR_VAR 0 16
15377: PUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 255
15387: ST_TO_ADDR
// x := GetX ( tower ) ;
15388: LD_ADDR_VAR 0 10
15392: PUSH
15393: LD_VAR 0 1
15397: PPUSH
15398: CALL_OW 250
15402: ST_TO_ADDR
// y := GetY ( tower ) ;
15403: LD_ADDR_VAR 0 11
15407: PUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 251
15417: ST_TO_ADDR
// if not x or not y then
15418: LD_VAR 0 10
15422: NOT
15423: IFTRUE 15432
15425: PUSH
15426: LD_VAR 0 11
15430: NOT
15431: OR
15432: IFFALSE 15436
// exit ;
15434: GO 16493
// weapon := 0 ;
15436: LD_ADDR_VAR 0 18
15440: PUSH
15441: LD_INT 0
15443: ST_TO_ADDR
// fac_list := [ ] ;
15444: LD_ADDR_VAR 0 17
15448: PUSH
15449: EMPTY
15450: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15451: LD_ADDR_VAR 0 6
15455: PUSH
15456: LD_VAR 0 1
15460: PPUSH
15461: CALL_OW 274
15465: PPUSH
15466: LD_VAR 0 2
15470: PPUSH
15471: LD_INT 0
15473: PPUSH
15474: CALL 13028 0 3
15478: PPUSH
15479: LD_INT 30
15481: PUSH
15482: LD_INT 3
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 72
15493: ST_TO_ADDR
// if not factories then
15494: LD_VAR 0 6
15498: NOT
15499: IFFALSE 15503
// exit ;
15501: GO 16493
// for i in factories do
15503: LD_ADDR_VAR 0 8
15507: PUSH
15508: LD_VAR 0 6
15512: PUSH
15513: FOR_IN
15514: IFFALSE 15539
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15516: LD_ADDR_VAR 0 17
15520: PUSH
15521: LD_VAR 0 17
15525: PUSH
15526: LD_VAR 0 8
15530: PPUSH
15531: CALL_OW 478
15535: UNION
15536: ST_TO_ADDR
15537: GO 15513
15539: POP
15540: POP
// if not fac_list then
15541: LD_VAR 0 17
15545: NOT
15546: IFFALSE 15550
// exit ;
15548: GO 16493
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15550: LD_ADDR_VAR 0 5
15554: PUSH
15555: LD_INT 4
15557: PUSH
15558: LD_INT 5
15560: PUSH
15561: LD_INT 9
15563: PUSH
15564: LD_INT 10
15566: PUSH
15567: LD_INT 6
15569: PUSH
15570: LD_INT 7
15572: PUSH
15573: LD_INT 11
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 27
15587: PUSH
15588: LD_INT 28
15590: PUSH
15591: LD_INT 26
15593: PUSH
15594: LD_INT 30
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 43
15605: PUSH
15606: LD_INT 44
15608: PUSH
15609: LD_INT 46
15611: PUSH
15612: LD_INT 45
15614: PUSH
15615: LD_INT 47
15617: PUSH
15618: LD_INT 49
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: PUSH
15634: LD_VAR 0 12
15638: ARRAY
15639: ST_TO_ADDR
// list := list isect fac_list ;
15640: LD_ADDR_VAR 0 5
15644: PUSH
15645: LD_VAR 0 5
15649: PUSH
15650: LD_VAR 0 17
15654: ISECT
15655: ST_TO_ADDR
// if not list then
15656: LD_VAR 0 5
15660: NOT
15661: IFFALSE 15665
// exit ;
15663: GO 16493
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15665: LD_VAR 0 12
15669: PUSH
15670: LD_INT 3
15672: EQUAL
15673: IFFALSE 15685
15675: PUSH
15676: LD_INT 49
15678: PUSH
15679: LD_VAR 0 5
15683: IN
15684: AND
15685: IFFALSE 15705
15687: PUSH
15688: LD_INT 31
15690: PPUSH
15691: LD_VAR 0 16
15695: PPUSH
15696: CALL_OW 321
15700: PUSH
15701: LD_INT 2
15703: EQUAL
15704: AND
15705: IFFALSE 15765
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15707: LD_INT 22
15709: PUSH
15710: LD_VAR 0 16
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 35
15721: PUSH
15722: LD_INT 49
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 91
15731: PUSH
15732: LD_VAR 0 1
15736: PUSH
15737: LD_INT 10
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: NOT
15755: IFFALSE 15765
// weapon := ru_time_lapser ;
15757: LD_ADDR_VAR 0 18
15761: PUSH
15762: LD_INT 49
15764: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15765: LD_VAR 0 12
15769: PUSH
15770: LD_INT 1
15772: PUSH
15773: LD_INT 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: IN
15780: IFFALSE 15804
15782: PUSH
15783: LD_INT 11
15785: PUSH
15786: LD_VAR 0 5
15790: IN
15791: IFTRUE 15803
15793: PUSH
15794: LD_INT 30
15796: PUSH
15797: LD_VAR 0 5
15801: IN
15802: OR
15803: AND
15804: IFFALSE 15824
15806: PUSH
15807: LD_INT 6
15809: PPUSH
15810: LD_VAR 0 16
15814: PPUSH
15815: CALL_OW 321
15819: PUSH
15820: LD_INT 2
15822: EQUAL
15823: AND
15824: IFFALSE 15991
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15826: LD_INT 22
15828: PUSH
15829: LD_VAR 0 16
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 2
15840: PUSH
15841: LD_INT 35
15843: PUSH
15844: LD_INT 11
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 35
15853: PUSH
15854: LD_INT 30
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 91
15868: PUSH
15869: LD_VAR 0 1
15873: PUSH
15874: LD_INT 18
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL_OW 69
15891: NOT
15892: IFFALSE 15968
15894: PUSH
15895: LD_INT 22
15897: PUSH
15898: LD_VAR 0 16
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: LD_INT 30
15912: PUSH
15913: LD_INT 32
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 30
15922: PUSH
15923: LD_INT 33
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 91
15937: PUSH
15938: LD_VAR 0 1
15942: PUSH
15943: LD_INT 12
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: PPUSH
15959: CALL_OW 69
15963: PUSH
15964: LD_INT 2
15966: GREATER
15967: AND
15968: IFFALSE 15991
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15970: LD_ADDR_VAR 0 18
15974: PUSH
15975: LD_INT 11
15977: PUSH
15978: LD_INT 30
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_VAR 0 12
15989: ARRAY
15990: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15991: LD_VAR 0 18
15995: NOT
15996: IFFALSE 16016
15998: PUSH
15999: LD_INT 40
16001: PPUSH
16002: LD_VAR 0 16
16006: PPUSH
16007: CALL_OW 321
16011: PUSH
16012: LD_INT 2
16014: EQUAL
16015: AND
16016: IFFALSE 16052
16018: PUSH
16019: LD_INT 7
16021: PUSH
16022: LD_VAR 0 5
16026: IN
16027: IFTRUE 16039
16029: PUSH
16030: LD_INT 28
16032: PUSH
16033: LD_VAR 0 5
16037: IN
16038: OR
16039: IFTRUE 16051
16041: PUSH
16042: LD_INT 45
16044: PUSH
16045: LD_VAR 0 5
16049: IN
16050: OR
16051: AND
16052: IFFALSE 16306
// begin hex := GetHexInfo ( x , y ) ;
16054: LD_ADDR_VAR 0 4
16058: PUSH
16059: LD_VAR 0 10
16063: PPUSH
16064: LD_VAR 0 11
16068: PPUSH
16069: CALL_OW 546
16073: ST_TO_ADDR
// if hex [ 1 ] then
16074: LD_VAR 0 4
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: IFFALSE 16086
// exit ;
16084: GO 16493
// height := hex [ 2 ] ;
16086: LD_ADDR_VAR 0 15
16090: PUSH
16091: LD_VAR 0 4
16095: PUSH
16096: LD_INT 2
16098: ARRAY
16099: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16100: LD_ADDR_VAR 0 14
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: LD_INT 2
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: LD_INT 5
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: ST_TO_ADDR
// for i in tmp do
16123: LD_ADDR_VAR 0 8
16127: PUSH
16128: LD_VAR 0 14
16132: PUSH
16133: FOR_IN
16134: IFFALSE 16304
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16136: LD_ADDR_VAR 0 9
16140: PUSH
16141: LD_VAR 0 10
16145: PPUSH
16146: LD_VAR 0 8
16150: PPUSH
16151: LD_INT 5
16153: PPUSH
16154: CALL_OW 272
16158: PUSH
16159: LD_VAR 0 11
16163: PPUSH
16164: LD_VAR 0 8
16168: PPUSH
16169: LD_INT 5
16171: PPUSH
16172: CALL_OW 273
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16181: LD_VAR 0 9
16185: PUSH
16186: LD_INT 1
16188: ARRAY
16189: PPUSH
16190: LD_VAR 0 9
16194: PUSH
16195: LD_INT 2
16197: ARRAY
16198: PPUSH
16199: CALL_OW 488
16203: IFFALSE 16302
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16205: LD_ADDR_VAR 0 4
16209: PUSH
16210: LD_VAR 0 9
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PPUSH
16219: LD_VAR 0 9
16223: PUSH
16224: LD_INT 2
16226: ARRAY
16227: PPUSH
16228: CALL_OW 546
16232: ST_TO_ADDR
// if hex [ 1 ] then
16233: LD_VAR 0 4
16237: PUSH
16238: LD_INT 1
16240: ARRAY
16241: IFFALSE 16245
// continue ;
16243: GO 16133
// h := hex [ 2 ] ;
16245: LD_ADDR_VAR 0 13
16249: PUSH
16250: LD_VAR 0 4
16254: PUSH
16255: LD_INT 2
16257: ARRAY
16258: ST_TO_ADDR
// if h + 7 < height then
16259: LD_VAR 0 13
16263: PUSH
16264: LD_INT 7
16266: PLUS
16267: PUSH
16268: LD_VAR 0 15
16272: LESS
16273: IFFALSE 16302
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16275: LD_ADDR_VAR 0 18
16279: PUSH
16280: LD_INT 7
16282: PUSH
16283: LD_INT 28
16285: PUSH
16286: LD_INT 45
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PUSH
16294: LD_VAR 0 12
16298: ARRAY
16299: ST_TO_ADDR
// break ;
16300: GO 16304
// end ; end ; end ;
16302: GO 16133
16304: POP
16305: POP
// end ; if not weapon then
16306: LD_VAR 0 18
16310: NOT
16311: IFFALSE 16371
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16313: LD_ADDR_VAR 0 5
16317: PUSH
16318: LD_VAR 0 5
16322: PUSH
16323: LD_INT 11
16325: PUSH
16326: LD_INT 30
16328: PUSH
16329: LD_INT 49
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: LIST
16336: DIFF
16337: ST_TO_ADDR
// if not list then
16338: LD_VAR 0 5
16342: NOT
16343: IFFALSE 16347
// exit ;
16345: GO 16493
// weapon := list [ rand ( 1 , list ) ] ;
16347: LD_ADDR_VAR 0 18
16351: PUSH
16352: LD_VAR 0 5
16356: PUSH
16357: LD_INT 1
16359: PPUSH
16360: LD_VAR 0 5
16364: PPUSH
16365: CALL_OW 12
16369: ARRAY
16370: ST_TO_ADDR
// end ; if weapon then
16371: LD_VAR 0 18
16375: IFFALSE 16493
// begin tmp := CostOfWeapon ( weapon ) ;
16377: LD_ADDR_VAR 0 14
16381: PUSH
16382: LD_VAR 0 18
16386: PPUSH
16387: CALL_OW 451
16391: ST_TO_ADDR
// j := GetBase ( tower ) ;
16392: LD_ADDR_VAR 0 9
16396: PUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 274
16406: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16407: LD_VAR 0 9
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 275
16419: PUSH
16420: LD_VAR 0 14
16424: PUSH
16425: LD_INT 1
16427: ARRAY
16428: GREATEREQUAL
16429: IFFALSE 16455
16431: PUSH
16432: LD_VAR 0 9
16436: PPUSH
16437: LD_INT 2
16439: PPUSH
16440: CALL_OW 275
16444: PUSH
16445: LD_VAR 0 14
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: GREATEREQUAL
16454: AND
16455: IFFALSE 16481
16457: PUSH
16458: LD_VAR 0 9
16462: PPUSH
16463: LD_INT 3
16465: PPUSH
16466: CALL_OW 275
16470: PUSH
16471: LD_VAR 0 14
16475: PUSH
16476: LD_INT 3
16478: ARRAY
16479: GREATEREQUAL
16480: AND
16481: IFFALSE 16493
// result := weapon ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_VAR 0 18
16492: ST_TO_ADDR
// end ; end ;
16493: LD_VAR 0 3
16497: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16498: LD_INT 0
16500: PPUSH
16501: PPUSH
// result := true ;
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_INT 1
16509: ST_TO_ADDR
// if array1 = array2 then
16510: LD_VAR 0 1
16514: PUSH
16515: LD_VAR 0 2
16519: EQUAL
16520: IFFALSE 16580
// begin for i = 1 to array1 do
16522: LD_ADDR_VAR 0 4
16526: PUSH
16527: DOUBLE
16528: LD_INT 1
16530: DEC
16531: ST_TO_ADDR
16532: LD_VAR 0 1
16536: PUSH
16537: FOR_TO
16538: IFFALSE 16576
// if array1 [ i ] <> array2 [ i ] then
16540: LD_VAR 0 1
16544: PUSH
16545: LD_VAR 0 4
16549: ARRAY
16550: PUSH
16551: LD_VAR 0 2
16555: PUSH
16556: LD_VAR 0 4
16560: ARRAY
16561: NONEQUAL
16562: IFFALSE 16574
// begin result := false ;
16564: LD_ADDR_VAR 0 3
16568: PUSH
16569: LD_INT 0
16571: ST_TO_ADDR
// break ;
16572: GO 16576
// end ;
16574: GO 16537
16576: POP
16577: POP
// end else
16578: GO 16588
// result := false ;
16580: LD_ADDR_VAR 0 3
16584: PUSH
16585: LD_INT 0
16587: ST_TO_ADDR
// end ;
16588: LD_VAR 0 3
16592: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16593: LD_INT 0
16595: PPUSH
16596: PPUSH
// if not array1 or not array2 then
16597: LD_VAR 0 1
16601: NOT
16602: IFTRUE 16611
16604: PUSH
16605: LD_VAR 0 2
16609: NOT
16610: OR
16611: IFFALSE 16615
// exit ;
16613: GO 16679
// result := true ;
16615: LD_ADDR_VAR 0 3
16619: PUSH
16620: LD_INT 1
16622: ST_TO_ADDR
// for i = 1 to array1 do
16623: LD_ADDR_VAR 0 4
16627: PUSH
16628: DOUBLE
16629: LD_INT 1
16631: DEC
16632: ST_TO_ADDR
16633: LD_VAR 0 1
16637: PUSH
16638: FOR_TO
16639: IFFALSE 16677
// if array1 [ i ] <> array2 [ i ] then
16641: LD_VAR 0 1
16645: PUSH
16646: LD_VAR 0 4
16650: ARRAY
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_VAR 0 4
16661: ARRAY
16662: NONEQUAL
16663: IFFALSE 16675
// begin result := false ;
16665: LD_ADDR_VAR 0 3
16669: PUSH
16670: LD_INT 0
16672: ST_TO_ADDR
// break ;
16673: GO 16677
// end ;
16675: GO 16638
16677: POP
16678: POP
// end ;
16679: LD_VAR 0 3
16683: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
16688: PPUSH
// pom := GetBase ( fac ) ;
16689: LD_ADDR_VAR 0 5
16693: PUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 274
16703: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16704: LD_ADDR_VAR 0 4
16708: PUSH
16709: LD_VAR 0 2
16713: PUSH
16714: LD_INT 1
16716: ARRAY
16717: PPUSH
16718: LD_VAR 0 2
16722: PUSH
16723: LD_INT 2
16725: ARRAY
16726: PPUSH
16727: LD_VAR 0 2
16731: PUSH
16732: LD_INT 3
16734: ARRAY
16735: PPUSH
16736: LD_VAR 0 2
16740: PUSH
16741: LD_INT 4
16743: ARRAY
16744: PPUSH
16745: CALL_OW 449
16749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16750: LD_ADDR_VAR 0 3
16754: PUSH
16755: LD_VAR 0 5
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 275
16767: PUSH
16768: LD_VAR 0 4
16772: PUSH
16773: LD_INT 1
16775: ARRAY
16776: GREATEREQUAL
16777: IFFALSE 16803
16779: PUSH
16780: LD_VAR 0 5
16784: PPUSH
16785: LD_INT 2
16787: PPUSH
16788: CALL_OW 275
16792: PUSH
16793: LD_VAR 0 4
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: GREATEREQUAL
16802: AND
16803: IFFALSE 16829
16805: PUSH
16806: LD_VAR 0 5
16810: PPUSH
16811: LD_INT 3
16813: PPUSH
16814: CALL_OW 275
16818: PUSH
16819: LD_VAR 0 4
16823: PUSH
16824: LD_INT 3
16826: ARRAY
16827: GREATEREQUAL
16828: AND
16829: ST_TO_ADDR
// end ;
16830: LD_VAR 0 3
16834: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16835: LD_INT 0
16837: PPUSH
16838: PPUSH
16839: PPUSH
16840: PPUSH
// pom := GetBase ( building ) ;
16841: LD_ADDR_VAR 0 3
16845: PUSH
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 274
16855: ST_TO_ADDR
// if not pom then
16856: LD_VAR 0 3
16860: NOT
16861: IFFALSE 16865
// exit ;
16863: GO 17039
// btype := GetBType ( building ) ;
16865: LD_ADDR_VAR 0 5
16869: PUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 266
16879: ST_TO_ADDR
// if btype = b_armoury then
16880: LD_VAR 0 5
16884: PUSH
16885: LD_INT 4
16887: EQUAL
16888: IFFALSE 16898
// btype := b_barracks ;
16890: LD_ADDR_VAR 0 5
16894: PUSH
16895: LD_INT 5
16897: ST_TO_ADDR
// if btype = b_depot then
16898: LD_VAR 0 5
16902: PUSH
16903: LD_INT 0
16905: EQUAL
16906: IFFALSE 16916
// btype := b_warehouse ;
16908: LD_ADDR_VAR 0 5
16912: PUSH
16913: LD_INT 1
16915: ST_TO_ADDR
// if btype = b_workshop then
16916: LD_VAR 0 5
16920: PUSH
16921: LD_INT 2
16923: EQUAL
16924: IFFALSE 16934
// btype := b_factory ;
16926: LD_ADDR_VAR 0 5
16930: PUSH
16931: LD_INT 3
16933: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16934: LD_ADDR_VAR 0 4
16938: PUSH
16939: LD_VAR 0 5
16943: PPUSH
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 248
16953: PPUSH
16954: CALL_OW 450
16958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16959: LD_ADDR_VAR 0 2
16963: PUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: LD_INT 1
16971: PPUSH
16972: CALL_OW 275
16976: PUSH
16977: LD_VAR 0 4
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: GREATEREQUAL
16986: IFFALSE 17012
16988: PUSH
16989: LD_VAR 0 3
16993: PPUSH
16994: LD_INT 2
16996: PPUSH
16997: CALL_OW 275
17001: PUSH
17002: LD_VAR 0 4
17006: PUSH
17007: LD_INT 2
17009: ARRAY
17010: GREATEREQUAL
17011: AND
17012: IFFALSE 17038
17014: PUSH
17015: LD_VAR 0 3
17019: PPUSH
17020: LD_INT 3
17022: PPUSH
17023: CALL_OW 275
17027: PUSH
17028: LD_VAR 0 4
17032: PUSH
17033: LD_INT 3
17035: ARRAY
17036: GREATEREQUAL
17037: AND
17038: ST_TO_ADDR
// end ;
17039: LD_VAR 0 2
17043: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
17044: LD_INT 0
17046: PPUSH
17047: PPUSH
17048: PPUSH
// pom := GetBase ( building ) ;
17049: LD_ADDR_VAR 0 4
17053: PUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 274
17063: ST_TO_ADDR
// if not pom then
17064: LD_VAR 0 4
17068: NOT
17069: IFFALSE 17073
// exit ;
17071: GO 17178
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17073: LD_ADDR_VAR 0 5
17077: PUSH
17078: LD_VAR 0 2
17082: PPUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 248
17092: PPUSH
17093: CALL_OW 450
17097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17098: LD_ADDR_VAR 0 3
17102: PUSH
17103: LD_VAR 0 4
17107: PPUSH
17108: LD_INT 1
17110: PPUSH
17111: CALL_OW 275
17115: PUSH
17116: LD_VAR 0 5
17120: PUSH
17121: LD_INT 1
17123: ARRAY
17124: GREATEREQUAL
17125: IFFALSE 17151
17127: PUSH
17128: LD_VAR 0 4
17132: PPUSH
17133: LD_INT 2
17135: PPUSH
17136: CALL_OW 275
17140: PUSH
17141: LD_VAR 0 5
17145: PUSH
17146: LD_INT 2
17148: ARRAY
17149: GREATEREQUAL
17150: AND
17151: IFFALSE 17177
17153: PUSH
17154: LD_VAR 0 4
17158: PPUSH
17159: LD_INT 3
17161: PPUSH
17162: CALL_OW 275
17166: PUSH
17167: LD_VAR 0 5
17171: PUSH
17172: LD_INT 3
17174: ARRAY
17175: GREATEREQUAL
17176: AND
17177: ST_TO_ADDR
// end ;
17178: LD_VAR 0 3
17182: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
17183: LD_INT 0
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
// result := false ;
17196: LD_ADDR_VAR 0 8
17200: PUSH
17201: LD_INT 0
17203: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
17204: LD_VAR 0 5
17208: NOT
17209: IFTRUE 17218
17211: PUSH
17212: LD_VAR 0 1
17216: NOT
17217: OR
17218: IFTRUE 17227
17220: PUSH
17221: LD_VAR 0 2
17225: NOT
17226: OR
17227: IFTRUE 17236
17229: PUSH
17230: LD_VAR 0 3
17234: NOT
17235: OR
17236: IFFALSE 17240
// exit ;
17238: GO 18066
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
17240: LD_ADDR_VAR 0 14
17244: PUSH
17245: LD_VAR 0 1
17249: PPUSH
17250: LD_VAR 0 2
17254: PPUSH
17255: LD_VAR 0 3
17259: PPUSH
17260: LD_VAR 0 4
17264: PPUSH
17265: LD_VAR 0 5
17269: PUSH
17270: LD_INT 1
17272: ARRAY
17273: PPUSH
17274: CALL_OW 248
17278: PPUSH
17279: LD_INT 0
17281: PPUSH
17282: CALL 19347 0 6
17286: ST_TO_ADDR
// if not hexes then
17287: LD_VAR 0 14
17291: NOT
17292: IFFALSE 17296
// exit ;
17294: GO 18066
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17296: LD_ADDR_VAR 0 17
17300: PUSH
17301: LD_VAR 0 5
17305: PPUSH
17306: LD_INT 22
17308: PUSH
17309: LD_VAR 0 13
17313: PPUSH
17314: CALL_OW 255
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 2
17325: PUSH
17326: LD_INT 30
17328: PUSH
17329: LD_INT 0
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 30
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PPUSH
17355: CALL_OW 72
17359: ST_TO_ADDR
// for i = 1 to hexes do
17360: LD_ADDR_VAR 0 9
17364: PUSH
17365: DOUBLE
17366: LD_INT 1
17368: DEC
17369: ST_TO_ADDR
17370: LD_VAR 0 14
17374: PUSH
17375: FOR_TO
17376: IFFALSE 18064
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17378: LD_ADDR_VAR 0 13
17382: PUSH
17383: LD_VAR 0 14
17387: PUSH
17388: LD_VAR 0 9
17392: ARRAY
17393: PUSH
17394: LD_INT 1
17396: ARRAY
17397: PPUSH
17398: LD_VAR 0 14
17402: PUSH
17403: LD_VAR 0 9
17407: ARRAY
17408: PUSH
17409: LD_INT 2
17411: ARRAY
17412: PPUSH
17413: CALL_OW 428
17417: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17418: LD_VAR 0 14
17422: PUSH
17423: LD_VAR 0 9
17427: ARRAY
17428: PUSH
17429: LD_INT 1
17431: ARRAY
17432: PPUSH
17433: LD_VAR 0 14
17437: PUSH
17438: LD_VAR 0 9
17442: ARRAY
17443: PUSH
17444: LD_INT 2
17446: ARRAY
17447: PPUSH
17448: CALL_OW 351
17452: IFTRUE 17491
17454: PUSH
17455: LD_VAR 0 14
17459: PUSH
17460: LD_VAR 0 9
17464: ARRAY
17465: PUSH
17466: LD_INT 1
17468: ARRAY
17469: PPUSH
17470: LD_VAR 0 14
17474: PUSH
17475: LD_VAR 0 9
17479: ARRAY
17480: PUSH
17481: LD_INT 2
17483: ARRAY
17484: PPUSH
17485: CALL_OW 488
17489: NOT
17490: OR
17491: IFTRUE 17508
17493: PUSH
17494: LD_VAR 0 13
17498: PPUSH
17499: CALL_OW 247
17503: PUSH
17504: LD_INT 3
17506: EQUAL
17507: OR
17508: IFFALSE 17514
// exit ;
17510: POP
17511: POP
17512: GO 18066
// if not tmp then
17514: LD_VAR 0 13
17518: NOT
17519: IFFALSE 17523
// continue ;
17521: GO 17375
// result := true ;
17523: LD_ADDR_VAR 0 8
17527: PUSH
17528: LD_INT 1
17530: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17531: LD_VAR 0 6
17535: IFFALSE 17552
17537: PUSH
17538: LD_VAR 0 13
17542: PPUSH
17543: CALL_OW 247
17547: PUSH
17548: LD_INT 2
17550: EQUAL
17551: AND
17552: IFFALSE 17569
17554: PUSH
17555: LD_VAR 0 13
17559: PPUSH
17560: CALL_OW 263
17564: PUSH
17565: LD_INT 1
17567: EQUAL
17568: AND
17569: IFFALSE 17733
// begin if IsDrivenBy ( tmp ) then
17571: LD_VAR 0 13
17575: PPUSH
17576: CALL_OW 311
17580: IFFALSE 17584
// continue ;
17582: GO 17375
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17584: LD_VAR 0 6
17588: PPUSH
17589: LD_INT 3
17591: PUSH
17592: LD_INT 60
17594: PUSH
17595: EMPTY
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: LD_INT 55
17607: PUSH
17608: EMPTY
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 72
17623: IFFALSE 17731
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17625: LD_ADDR_VAR 0 18
17629: PUSH
17630: LD_VAR 0 6
17634: PPUSH
17635: LD_INT 3
17637: PUSH
17638: LD_INT 60
17640: PUSH
17641: EMPTY
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 3
17650: PUSH
17651: LD_INT 55
17653: PUSH
17654: EMPTY
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PPUSH
17665: CALL_OW 72
17669: PUSH
17670: LD_INT 1
17672: ARRAY
17673: ST_TO_ADDR
// if IsInUnit ( driver ) then
17674: LD_VAR 0 18
17678: PPUSH
17679: CALL_OW 310
17683: IFFALSE 17694
// ComExit ( driver ) ;
17685: LD_VAR 0 18
17689: PPUSH
17690: CALL 43347 0 1
// AddComEnterUnit ( driver , tmp ) ;
17694: LD_VAR 0 18
17698: PPUSH
17699: LD_VAR 0 13
17703: PPUSH
17704: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17708: LD_VAR 0 18
17712: PPUSH
17713: LD_VAR 0 7
17717: PPUSH
17718: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17722: LD_VAR 0 18
17726: PPUSH
17727: CALL_OW 181
// end ; continue ;
17731: GO 17375
// end ; if not cleaners or not tmp in cleaners then
17733: LD_VAR 0 6
17737: NOT
17738: IFTRUE 17753
17740: PUSH
17741: LD_VAR 0 13
17745: PUSH
17746: LD_VAR 0 6
17750: IN
17751: NOT
17752: OR
17753: IFFALSE 18062
// begin if dep then
17755: LD_VAR 0 17
17759: IFFALSE 17895
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17761: LD_ADDR_VAR 0 16
17765: PUSH
17766: LD_VAR 0 17
17770: PUSH
17771: LD_INT 1
17773: ARRAY
17774: PPUSH
17775: CALL_OW 250
17779: PPUSH
17780: LD_VAR 0 17
17784: PUSH
17785: LD_INT 1
17787: ARRAY
17788: PPUSH
17789: CALL_OW 254
17793: PPUSH
17794: LD_INT 5
17796: PPUSH
17797: CALL_OW 272
17801: PUSH
17802: LD_VAR 0 17
17806: PUSH
17807: LD_INT 1
17809: ARRAY
17810: PPUSH
17811: CALL_OW 251
17815: PPUSH
17816: LD_VAR 0 17
17820: PUSH
17821: LD_INT 1
17823: ARRAY
17824: PPUSH
17825: CALL_OW 254
17829: PPUSH
17830: LD_INT 5
17832: PPUSH
17833: CALL_OW 273
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17842: LD_VAR 0 16
17846: PUSH
17847: LD_INT 1
17849: ARRAY
17850: PPUSH
17851: LD_VAR 0 16
17855: PUSH
17856: LD_INT 2
17858: ARRAY
17859: PPUSH
17860: CALL_OW 488
17864: IFFALSE 17895
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17866: LD_VAR 0 13
17870: PPUSH
17871: LD_VAR 0 16
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: PPUSH
17880: LD_VAR 0 16
17884: PUSH
17885: LD_INT 2
17887: ARRAY
17888: PPUSH
17889: CALL_OW 111
// continue ;
17893: GO 17375
// end ; end ; r := GetDir ( tmp ) ;
17895: LD_ADDR_VAR 0 15
17899: PUSH
17900: LD_VAR 0 13
17904: PPUSH
17905: CALL_OW 254
17909: ST_TO_ADDR
// if r = 5 then
17910: LD_VAR 0 15
17914: PUSH
17915: LD_INT 5
17917: EQUAL
17918: IFFALSE 17928
// r := 0 ;
17920: LD_ADDR_VAR 0 15
17924: PUSH
17925: LD_INT 0
17927: ST_TO_ADDR
// for j = r to 5 do
17928: LD_ADDR_VAR 0 10
17932: PUSH
17933: DOUBLE
17934: LD_VAR 0 15
17938: DEC
17939: ST_TO_ADDR
17940: LD_INT 5
17942: PUSH
17943: FOR_TO
17944: IFFALSE 18060
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17946: LD_ADDR_VAR 0 11
17950: PUSH
17951: LD_VAR 0 13
17955: PPUSH
17956: CALL_OW 250
17960: PPUSH
17961: LD_VAR 0 10
17965: PPUSH
17966: LD_INT 2
17968: PPUSH
17969: CALL_OW 272
17973: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17974: LD_ADDR_VAR 0 12
17978: PUSH
17979: LD_VAR 0 13
17983: PPUSH
17984: CALL_OW 251
17988: PPUSH
17989: LD_VAR 0 10
17993: PPUSH
17994: LD_INT 2
17996: PPUSH
17997: CALL_OW 273
18001: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
18002: LD_VAR 0 11
18006: PPUSH
18007: LD_VAR 0 12
18011: PPUSH
18012: CALL_OW 488
18016: IFFALSE 18035
18018: PUSH
18019: LD_VAR 0 11
18023: PPUSH
18024: LD_VAR 0 12
18028: PPUSH
18029: CALL_OW 428
18033: NOT
18034: AND
18035: IFFALSE 18058
// begin ComMoveXY ( tmp , _x , _y ) ;
18037: LD_VAR 0 13
18041: PPUSH
18042: LD_VAR 0 11
18046: PPUSH
18047: LD_VAR 0 12
18051: PPUSH
18052: CALL_OW 111
// break ;
18056: GO 18060
// end ; end ;
18058: GO 17943
18060: POP
18061: POP
// end ; end ;
18062: GO 17375
18064: POP
18065: POP
// end ;
18066: LD_VAR 0 8
18070: RET
// export function BuildingTechInvented ( side , btype ) ; begin
18071: LD_INT 0
18073: PPUSH
// result := true ;
18074: LD_ADDR_VAR 0 3
18078: PUSH
18079: LD_INT 1
18081: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
18082: LD_VAR 0 2
18086: PUSH
18087: LD_INT 24
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18101
18093: LD_INT 33
18095: DOUBLE
18096: EQUAL
18097: IFTRUE 18101
18099: GO 18126
18101: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
18102: LD_ADDR_VAR 0 3
18106: PUSH
18107: LD_INT 32
18109: PPUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 321
18119: PUSH
18120: LD_INT 2
18122: EQUAL
18123: ST_TO_ADDR
18124: GO 18442
18126: LD_INT 20
18128: DOUBLE
18129: EQUAL
18130: IFTRUE 18134
18132: GO 18159
18134: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_INT 6
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 321
18152: PUSH
18153: LD_INT 2
18155: EQUAL
18156: ST_TO_ADDR
18157: GO 18442
18159: LD_INT 22
18161: DOUBLE
18162: EQUAL
18163: IFTRUE 18173
18165: LD_INT 36
18167: DOUBLE
18168: EQUAL
18169: IFTRUE 18173
18171: GO 18198
18173: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
18174: LD_ADDR_VAR 0 3
18178: PUSH
18179: LD_INT 15
18181: PPUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 321
18191: PUSH
18192: LD_INT 2
18194: EQUAL
18195: ST_TO_ADDR
18196: GO 18442
18198: LD_INT 30
18200: DOUBLE
18201: EQUAL
18202: IFTRUE 18206
18204: GO 18231
18206: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
18207: LD_ADDR_VAR 0 3
18211: PUSH
18212: LD_INT 20
18214: PPUSH
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 321
18224: PUSH
18225: LD_INT 2
18227: EQUAL
18228: ST_TO_ADDR
18229: GO 18442
18231: LD_INT 28
18233: DOUBLE
18234: EQUAL
18235: IFTRUE 18245
18237: LD_INT 21
18239: DOUBLE
18240: EQUAL
18241: IFTRUE 18245
18243: GO 18270
18245: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
18246: LD_ADDR_VAR 0 3
18250: PUSH
18251: LD_INT 21
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 321
18263: PUSH
18264: LD_INT 2
18266: EQUAL
18267: ST_TO_ADDR
18268: GO 18442
18270: LD_INT 16
18272: DOUBLE
18273: EQUAL
18274: IFTRUE 18278
18276: GO 18303
18278: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
18279: LD_ADDR_VAR 0 3
18283: PUSH
18284: LD_INT 84
18286: PPUSH
18287: LD_VAR 0 1
18291: PPUSH
18292: CALL_OW 321
18296: PUSH
18297: LD_INT 2
18299: EQUAL
18300: ST_TO_ADDR
18301: GO 18442
18303: LD_INT 19
18305: DOUBLE
18306: EQUAL
18307: IFTRUE 18317
18309: LD_INT 23
18311: DOUBLE
18312: EQUAL
18313: IFTRUE 18317
18315: GO 18342
18317: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18318: LD_ADDR_VAR 0 3
18322: PUSH
18323: LD_INT 83
18325: PPUSH
18326: LD_VAR 0 1
18330: PPUSH
18331: CALL_OW 321
18335: PUSH
18336: LD_INT 2
18338: EQUAL
18339: ST_TO_ADDR
18340: GO 18442
18342: LD_INT 17
18344: DOUBLE
18345: EQUAL
18346: IFTRUE 18350
18348: GO 18375
18350: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18351: LD_ADDR_VAR 0 3
18355: PUSH
18356: LD_INT 39
18358: PPUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL_OW 321
18368: PUSH
18369: LD_INT 2
18371: EQUAL
18372: ST_TO_ADDR
18373: GO 18442
18375: LD_INT 18
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18408
18383: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18384: LD_ADDR_VAR 0 3
18388: PUSH
18389: LD_INT 40
18391: PPUSH
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 321
18401: PUSH
18402: LD_INT 2
18404: EQUAL
18405: ST_TO_ADDR
18406: GO 18442
18408: LD_INT 27
18410: DOUBLE
18411: EQUAL
18412: IFTRUE 18416
18414: GO 18441
18416: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18417: LD_ADDR_VAR 0 3
18421: PUSH
18422: LD_INT 35
18424: PPUSH
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 321
18434: PUSH
18435: LD_INT 2
18437: EQUAL
18438: ST_TO_ADDR
18439: GO 18442
18441: POP
// end ;
18442: LD_VAR 0 3
18446: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18447: LD_INT 0
18449: PPUSH
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
// result := false ;
18460: LD_ADDR_VAR 0 6
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// if btype = b_depot then
18468: LD_VAR 0 2
18472: PUSH
18473: LD_INT 0
18475: EQUAL
18476: IFFALSE 18488
// begin result := true ;
18478: LD_ADDR_VAR 0 6
18482: PUSH
18483: LD_INT 1
18485: ST_TO_ADDR
// exit ;
18486: GO 19342
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18488: LD_VAR 0 1
18492: NOT
18493: IFTRUE 18518
18495: PUSH
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 266
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: IN
18516: NOT
18517: OR
18518: IFTRUE 18527
18520: PUSH
18521: LD_VAR 0 2
18525: NOT
18526: OR
18527: IFTRUE 18563
18529: PUSH
18530: LD_VAR 0 5
18534: PUSH
18535: LD_INT 0
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: LD_INT 4
18549: PUSH
18550: LD_INT 5
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: IN
18561: NOT
18562: OR
18563: IFTRUE 18582
18565: PUSH
18566: LD_VAR 0 3
18570: PPUSH
18571: LD_VAR 0 4
18575: PPUSH
18576: CALL_OW 488
18580: NOT
18581: OR
18582: IFFALSE 18586
// exit ;
18584: GO 19342
// side := GetSide ( depot ) ;
18586: LD_ADDR_VAR 0 9
18590: PUSH
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 255
18600: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18601: LD_VAR 0 9
18605: PPUSH
18606: LD_VAR 0 2
18610: PPUSH
18611: CALL 18071 0 2
18615: NOT
18616: IFFALSE 18620
// exit ;
18618: GO 19342
// pom := GetBase ( depot ) ;
18620: LD_ADDR_VAR 0 10
18624: PUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 274
18634: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18635: LD_ADDR_VAR 0 11
18639: PUSH
18640: LD_VAR 0 2
18644: PPUSH
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 248
18654: PPUSH
18655: CALL_OW 450
18659: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18660: LD_VAR 0 10
18664: PPUSH
18665: LD_INT 1
18667: PPUSH
18668: CALL_OW 275
18672: PUSH
18673: LD_VAR 0 11
18677: PUSH
18678: LD_INT 1
18680: ARRAY
18681: GREATEREQUAL
18682: IFFALSE 18708
18684: PUSH
18685: LD_VAR 0 10
18689: PPUSH
18690: LD_INT 2
18692: PPUSH
18693: CALL_OW 275
18697: PUSH
18698: LD_VAR 0 11
18702: PUSH
18703: LD_INT 2
18705: ARRAY
18706: GREATEREQUAL
18707: AND
18708: IFFALSE 18734
18710: PUSH
18711: LD_VAR 0 10
18715: PPUSH
18716: LD_INT 3
18718: PPUSH
18719: CALL_OW 275
18723: PUSH
18724: LD_VAR 0 11
18728: PUSH
18729: LD_INT 3
18731: ARRAY
18732: GREATEREQUAL
18733: AND
18734: NOT
18735: IFFALSE 18739
// exit ;
18737: GO 19342
// if GetBType ( depot ) = b_depot then
18739: LD_VAR 0 1
18743: PPUSH
18744: CALL_OW 266
18748: PUSH
18749: LD_INT 0
18751: EQUAL
18752: IFFALSE 18764
// dist := 28 else
18754: LD_ADDR_VAR 0 14
18758: PUSH
18759: LD_INT 28
18761: ST_TO_ADDR
18762: GO 18772
// dist := 36 ;
18764: LD_ADDR_VAR 0 14
18768: PUSH
18769: LD_INT 36
18771: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_VAR 0 3
18781: PPUSH
18782: LD_VAR 0 4
18786: PPUSH
18787: CALL_OW 297
18791: PUSH
18792: LD_VAR 0 14
18796: GREATER
18797: IFFALSE 18801
// exit ;
18799: GO 19342
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18801: LD_ADDR_VAR 0 12
18805: PUSH
18806: LD_VAR 0 2
18810: PPUSH
18811: LD_VAR 0 3
18815: PPUSH
18816: LD_VAR 0 4
18820: PPUSH
18821: LD_VAR 0 5
18825: PPUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 248
18835: PPUSH
18836: LD_INT 0
18838: PPUSH
18839: CALL 19347 0 6
18843: ST_TO_ADDR
// if not hexes then
18844: LD_VAR 0 12
18848: NOT
18849: IFFALSE 18853
// exit ;
18851: GO 19342
// hex := GetHexInfo ( x , y ) ;
18853: LD_ADDR_VAR 0 15
18857: PUSH
18858: LD_VAR 0 3
18862: PPUSH
18863: LD_VAR 0 4
18867: PPUSH
18868: CALL_OW 546
18872: ST_TO_ADDR
// if hex [ 1 ] then
18873: LD_VAR 0 15
18877: PUSH
18878: LD_INT 1
18880: ARRAY
18881: IFFALSE 18885
// exit ;
18883: GO 19342
// height := hex [ 2 ] ;
18885: LD_ADDR_VAR 0 13
18889: PUSH
18890: LD_VAR 0 15
18894: PUSH
18895: LD_INT 2
18897: ARRAY
18898: ST_TO_ADDR
// for i = 1 to hexes do
18899: LD_ADDR_VAR 0 7
18903: PUSH
18904: DOUBLE
18905: LD_INT 1
18907: DEC
18908: ST_TO_ADDR
18909: LD_VAR 0 12
18913: PUSH
18914: FOR_TO
18915: IFFALSE 19259
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18917: LD_VAR 0 12
18921: PUSH
18922: LD_VAR 0 7
18926: ARRAY
18927: PUSH
18928: LD_INT 1
18930: ARRAY
18931: PPUSH
18932: LD_VAR 0 12
18936: PUSH
18937: LD_VAR 0 7
18941: ARRAY
18942: PUSH
18943: LD_INT 2
18945: ARRAY
18946: PPUSH
18947: CALL_OW 488
18951: NOT
18952: IFTRUE 18994
18954: PUSH
18955: LD_VAR 0 12
18959: PUSH
18960: LD_VAR 0 7
18964: ARRAY
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: LD_VAR 0 12
18974: PUSH
18975: LD_VAR 0 7
18979: ARRAY
18980: PUSH
18981: LD_INT 2
18983: ARRAY
18984: PPUSH
18985: CALL_OW 428
18989: PUSH
18990: LD_INT 0
18992: GREATER
18993: OR
18994: IFTRUE 19032
18996: PUSH
18997: LD_VAR 0 12
19001: PUSH
19002: LD_VAR 0 7
19006: ARRAY
19007: PUSH
19008: LD_INT 1
19010: ARRAY
19011: PPUSH
19012: LD_VAR 0 12
19016: PUSH
19017: LD_VAR 0 7
19021: ARRAY
19022: PUSH
19023: LD_INT 2
19025: ARRAY
19026: PPUSH
19027: CALL_OW 351
19031: OR
19032: IFFALSE 19038
// exit ;
19034: POP
19035: POP
19036: GO 19342
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19038: LD_ADDR_VAR 0 8
19042: PUSH
19043: LD_VAR 0 12
19047: PUSH
19048: LD_VAR 0 7
19052: ARRAY
19053: PUSH
19054: LD_INT 1
19056: ARRAY
19057: PPUSH
19058: LD_VAR 0 12
19062: PUSH
19063: LD_VAR 0 7
19067: ARRAY
19068: PUSH
19069: LD_INT 2
19071: ARRAY
19072: PPUSH
19073: CALL_OW 546
19077: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
19078: LD_VAR 0 8
19082: PUSH
19083: LD_INT 1
19085: ARRAY
19086: IFTRUE 19108
19088: PUSH
19089: LD_VAR 0 8
19093: PUSH
19094: LD_INT 2
19096: ARRAY
19097: PUSH
19098: LD_VAR 0 13
19102: PUSH
19103: LD_INT 2
19105: PLUS
19106: GREATER
19107: OR
19108: IFTRUE 19130
19110: PUSH
19111: LD_VAR 0 8
19115: PUSH
19116: LD_INT 2
19118: ARRAY
19119: PUSH
19120: LD_VAR 0 13
19124: PUSH
19125: LD_INT 2
19127: MINUS
19128: LESS
19129: OR
19130: IFTRUE 19198
19132: PUSH
19133: LD_VAR 0 8
19137: PUSH
19138: LD_INT 3
19140: ARRAY
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: LD_INT 8
19147: PUSH
19148: LD_INT 9
19150: PUSH
19151: LD_INT 10
19153: PUSH
19154: LD_INT 11
19156: PUSH
19157: LD_INT 12
19159: PUSH
19160: LD_INT 13
19162: PUSH
19163: LD_INT 16
19165: PUSH
19166: LD_INT 17
19168: PUSH
19169: LD_INT 18
19171: PUSH
19172: LD_INT 19
19174: PUSH
19175: LD_INT 20
19177: PUSH
19178: LD_INT 21
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: IN
19196: NOT
19197: OR
19198: IFTRUE 19211
19200: PUSH
19201: LD_VAR 0 8
19205: PUSH
19206: LD_INT 5
19208: ARRAY
19209: NOT
19210: OR
19211: IFTRUE 19251
19213: PUSH
19214: LD_VAR 0 8
19218: PUSH
19219: LD_INT 6
19221: ARRAY
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 7
19231: PUSH
19232: LD_INT 9
19234: PUSH
19235: LD_INT 10
19237: PUSH
19238: LD_INT 11
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: IN
19249: NOT
19250: OR
19251: IFFALSE 19257
// exit ;
19253: POP
19254: POP
19255: GO 19342
// end ;
19257: GO 18914
19259: POP
19260: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
19261: LD_VAR 0 9
19265: PPUSH
19266: LD_VAR 0 3
19270: PPUSH
19271: LD_VAR 0 4
19275: PPUSH
19276: LD_INT 20
19278: PPUSH
19279: CALL 11161 0 4
19283: PUSH
19284: LD_INT 4
19286: ARRAY
19287: IFFALSE 19291
// exit ;
19289: GO 19342
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
19291: LD_VAR 0 2
19295: PUSH
19296: LD_INT 29
19298: PUSH
19299: LD_INT 30
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: IN
19306: IFFALSE 19330
19308: PUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: LD_VAR 0 9
19323: PPUSH
19324: CALL_OW 440
19328: NOT
19329: AND
19330: IFFALSE 19334
// exit ;
19332: GO 19342
// result := true ;
19334: LD_ADDR_VAR 0 6
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// end ;
19342: LD_VAR 0 6
19346: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19347: LD_INT 0
19349: PPUSH
19350: PPUSH
19351: PPUSH
19352: PPUSH
19353: PPUSH
19354: PPUSH
19355: PPUSH
19356: PPUSH
19357: PPUSH
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
19362: PPUSH
19363: PPUSH
19364: PPUSH
19365: PPUSH
19366: PPUSH
19367: PPUSH
19368: PPUSH
19369: PPUSH
19370: PPUSH
19371: PPUSH
19372: PPUSH
19373: PPUSH
19374: PPUSH
19375: PPUSH
19376: PPUSH
19377: PPUSH
19378: PPUSH
19379: PPUSH
19380: PPUSH
19381: PPUSH
19382: PPUSH
19383: PPUSH
19384: PPUSH
19385: PPUSH
19386: PPUSH
19387: PPUSH
19388: PPUSH
19389: PPUSH
19390: PPUSH
19391: PPUSH
19392: PPUSH
19393: PPUSH
19394: PPUSH
19395: PPUSH
19396: PPUSH
19397: PPUSH
19398: PPUSH
19399: PPUSH
19400: PPUSH
19401: PPUSH
19402: PPUSH
19403: PPUSH
19404: PPUSH
19405: PPUSH
19406: PPUSH
// result = [ ] ;
19407: LD_ADDR_VAR 0 7
19411: PUSH
19412: EMPTY
19413: ST_TO_ADDR
// temp_list = [ ] ;
19414: LD_ADDR_VAR 0 9
19418: PUSH
19419: EMPTY
19420: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19421: LD_VAR 0 4
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: LD_INT 3
19437: PUSH
19438: LD_INT 4
19440: PUSH
19441: LD_INT 5
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: IN
19452: NOT
19453: IFTRUE 19496
19455: PUSH
19456: LD_VAR 0 1
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: IN
19471: IFFALSE 19495
19473: PUSH
19474: LD_VAR 0 5
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: LD_INT 3
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: LIST
19492: IN
19493: NOT
19494: AND
19495: OR
19496: IFFALSE 19500
// exit ;
19498: GO 37899
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19500: LD_VAR 0 1
19504: PUSH
19505: LD_INT 6
19507: PUSH
19508: LD_INT 7
19510: PUSH
19511: LD_INT 8
19513: PUSH
19514: LD_INT 13
19516: PUSH
19517: LD_INT 12
19519: PUSH
19520: LD_INT 15
19522: PUSH
19523: LD_INT 11
19525: PUSH
19526: LD_INT 14
19528: PUSH
19529: LD_INT 10
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: IN
19543: IFFALSE 19553
// btype = b_lab ;
19545: LD_ADDR_VAR 0 1
19549: PUSH
19550: LD_INT 6
19552: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19553: LD_VAR 0 6
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: IN
19572: NOT
19573: IFTRUE 19641
19575: PUSH
19576: LD_VAR 0 1
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 3
19592: PUSH
19593: LD_INT 6
19595: PUSH
19596: LD_INT 36
19598: PUSH
19599: LD_INT 4
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: LD_INT 31
19607: PUSH
19608: LD_INT 32
19610: PUSH
19611: LD_INT 33
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: IN
19627: NOT
19628: IFFALSE 19640
19630: PUSH
19631: LD_VAR 0 6
19635: PUSH
19636: LD_INT 1
19638: EQUAL
19639: AND
19640: OR
19641: IFTRUE 19673
19643: PUSH
19644: LD_VAR 0 1
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: LD_INT 3
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: IN
19659: NOT
19660: IFFALSE 19672
19662: PUSH
19663: LD_VAR 0 6
19667: PUSH
19668: LD_INT 2
19670: EQUAL
19671: AND
19672: OR
19673: IFFALSE 19683
// mode = 0 ;
19675: LD_ADDR_VAR 0 6
19679: PUSH
19680: LD_INT 0
19682: ST_TO_ADDR
// case mode of 0 :
19683: LD_VAR 0 6
19687: PUSH
19688: LD_INT 0
19690: DOUBLE
19691: EQUAL
19692: IFTRUE 19696
19694: GO 31149
19696: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19697: LD_ADDR_VAR 0 11
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: NEG
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: NEG
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: LD_INT 2
19793: NEG
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: PUSH
19844: LD_INT 3
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 0
19853: PUSH
19854: LD_INT 3
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19890: LD_ADDR_VAR 0 12
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 0
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 0
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 2
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: NEG
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: NEG
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 2
20036: NEG
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 3
20047: NEG
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 3
20058: NEG
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20086: LD_ADDR_VAR 0 13
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: LD_INT 0
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 1
20167: NEG
20168: PUSH
20169: LD_INT 2
20171: NEG
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: LD_INT 2
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: LD_INT 2
20225: NEG
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: NEG
20234: PUSH
20235: LD_INT 3
20237: NEG
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 3
20245: NEG
20246: PUSH
20247: LD_INT 2
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 3
20257: NEG
20258: PUSH
20259: LD_INT 3
20261: NEG
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20285: LD_ADDR_VAR 0 14
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: LD_INT 1
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 1
20366: NEG
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 0
20378: PUSH
20379: LD_INT 2
20381: NEG
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 2
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 3
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: LD_INT 3
20446: NEG
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20481: LD_ADDR_VAR 0 15
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: NEG
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 2
20604: NEG
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 3
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 3
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20674: LD_ADDR_VAR 0 16
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: LD_INT 1
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: LD_INT 2
20759: NEG
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 2
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: NEG
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: NEG
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 3
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 3
20831: PUSH
20832: LD_INT 3
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 3
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20867: LD_ADDR_VAR 0 17
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 2
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: LD_INT 1
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: LD_INT 2
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21097: LD_ADDR_VAR 0 18
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: NEG
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: LD_INT 2
21182: NEG
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: LD_INT 2
21193: NEG
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 1
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: LD_INT 2
21300: NEG
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21327: LD_ADDR_VAR 0 19
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 1
21396: NEG
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PUSH
21410: LD_INT 2
21412: NEG
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 2
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 2
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 2
21526: NEG
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21557: LD_ADDR_VAR 0 20
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: LD_INT 0
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: PUSH
21586: LD_INT 0
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: LD_INT 1
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 1
21638: NEG
21639: PUSH
21640: LD_INT 2
21642: NEG
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: LD_INT 2
21653: NEG
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 1
21722: NEG
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 2
21733: NEG
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 2
21756: NEG
21757: PUSH
21758: LD_INT 2
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21787: LD_ADDR_VAR 0 21
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 1
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 0
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 1
21845: NEG
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 0
21880: PUSH
21881: LD_INT 2
21883: NEG
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: LD_INT 2
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 1
21932: PUSH
21933: LD_INT 2
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: LD_INT 1
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 2
21963: NEG
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 2
21974: NEG
21975: PUSH
21976: LD_INT 1
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 2
21986: NEG
21987: PUSH
21988: LD_INT 2
21990: NEG
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22017: LD_ADDR_VAR 0 22
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: LD_INT 2
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: LD_INT 1
22124: NEG
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 2
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 2
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 2
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 2
22193: NEG
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: LD_INT 2
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22247: LD_ADDR_VAR 0 23
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 2
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 2
22434: NEG
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: LD_INT 2
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 2
22458: NEG
22459: PUSH
22460: LD_INT 3
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: LD_INT 3
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22527: LD_ADDR_VAR 0 24
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: LD_INT 0
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: LD_INT 1
22547: NEG
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: LD_INT 1
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: NEG
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: LD_INT 2
22612: NEG
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: LD_INT 2
22623: NEG
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: LD_INT 2
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: NEG
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: NEG
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: LD_INT 2
22741: NEG
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 3
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 3
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22803: LD_ADDR_VAR 0 25
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: LD_INT 1
22823: NEG
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 2
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: LD_INT 2
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 2
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: NEG
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 2
22979: NEG
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 2
22990: NEG
22991: PUSH
22992: LD_INT 1
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 2
23002: NEG
23003: PUSH
23004: LD_INT 2
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23077: LD_ADDR_VAR 0 26
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: LD_INT 1
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 1
23146: NEG
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: LD_INT 2
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 2
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 3
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23353: LD_ADDR_VAR 0 27
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: LD_INT 2
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: LD_INT 2
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 2
23552: NEG
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 2
23575: NEG
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 3
23586: NEG
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 3
23598: NEG
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23633: LD_ADDR_VAR 0 28
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: LD_INT 2
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: LD_INT 2
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 1
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 2
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: LD_INT 2
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 2
23809: NEG
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: NEG
23833: PUSH
23834: LD_INT 2
23836: NEG
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 2
23844: NEG
23845: PUSH
23846: LD_INT 3
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 3
23860: NEG
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 3
23868: NEG
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 3
23880: NEG
23881: PUSH
23882: LD_INT 2
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23915: LD_ADDR_VAR 0 29
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: LD_INT 2
24000: NEG
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: LD_INT 2
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 2
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: NEG
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 2
24093: NEG
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 2
24105: NEG
24106: PUSH
24107: LD_INT 3
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 3
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 3
24159: NEG
24160: PUSH
24161: LD_INT 2
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24194: LD_ADDR_VAR 0 30
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: LD_INT 1
24214: NEG
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 2
24371: NEG
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: LD_INT 3
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 2
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 3
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 2
24416: PUSH
24417: LD_INT 3
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 3
24437: NEG
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24472: LD_ADDR_VAR 0 31
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: NEG
24662: PUSH
24663: LD_INT 3
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 3
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: LD_INT 3
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 3
24715: NEG
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24750: LD_ADDR_VAR 0 32
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: LD_INT 2
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: LD_INT 2
24846: NEG
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: LD_INT 1
24857: NEG
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: NEG
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: NEG
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: LD_INT 3
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 3
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 3
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 3
24993: NEG
24994: PUSH
24995: LD_INT 1
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25028: LD_ADDR_VAR 0 33
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 2
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: LD_INT 2
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: NEG
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: LD_INT 3
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 3
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 3
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 3
25272: NEG
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25307: LD_ADDR_VAR 0 34
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 2
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: LD_INT 3
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 2
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 3
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 3
25552: NEG
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25587: LD_ADDR_VAR 0 35
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25699: LD_ADDR_VAR 0 36
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: LD_INT 1
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25811: LD_ADDR_VAR 0 37
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25923: LD_ADDR_VAR 0 38
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26035: LD_ADDR_VAR 0 39
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: LD_INT 2
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26147: LD_ADDR_VAR 0 40
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26259: LD_ADDR_VAR 0 41
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: NEG
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: NEG
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: LD_INT 3
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 3
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 3
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: NEG
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: NEG
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 3
26544: NEG
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 3
26556: NEG
26557: PUSH
26558: LD_INT 2
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 3
26568: NEG
26569: PUSH
26570: LD_INT 3
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26609: LD_ADDR_VAR 0 42
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 2
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 2
26799: NEG
26800: PUSH
26801: LD_INT 3
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: NEG
26812: PUSH
26813: LD_INT 3
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 3
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 3
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 3
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: LD_INT 3
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 3
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 3
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 3
26906: NEG
26907: PUSH
26908: LD_INT 2
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 3
26918: NEG
26919: PUSH
26920: LD_INT 3
26922: NEG
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26959: LD_ADDR_VAR 0 43
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 2
27136: NEG
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 3
27152: NEG
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 3
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 3
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 3
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 3
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 2
27244: NEG
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 3
27255: NEG
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27307: LD_ADDR_VAR 0 44
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: LD_INT 2
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: NEG
27498: PUSH
27499: LD_INT 3
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 3
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 3
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 3
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: LD_INT 3
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 3
27581: NEG
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 3
27592: NEG
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 3
27604: NEG
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 3
27616: NEG
27617: PUSH
27618: LD_INT 3
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27657: LD_ADDR_VAR 0 45
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: NEG
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 2
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 2
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: LD_INT 2
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: LD_INT 3
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 3
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: LD_INT 3
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 3
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 3
27903: PUSH
27904: LD_INT 3
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 3
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 3
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 3
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 3
27954: NEG
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: NEG
27967: PUSH
27968: LD_INT 3
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28007: LD_ADDR_VAR 0 46
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: LD_INT 2
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 2
28184: NEG
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: LD_INT 3
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 3
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 3
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 3
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: LD_INT 3
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 3
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 3
28303: NEG
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 3
28314: NEG
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28355: LD_ADDR_VAR 0 47
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: NEG
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: LD_INT 2
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28506: LD_ADDR_VAR 0 48
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28653: LD_ADDR_VAR 0 49
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28797: LD_ADDR_VAR 0 50
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 2
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28941: LD_ADDR_VAR 0 51
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: LD_INT 1
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 2
29053: NEG
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29088: LD_ADDR_VAR 0 52
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: NEG
29158: PUSH
29159: LD_INT 1
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: NEG
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 2
29203: NEG
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: LD_INT 2
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29239: LD_ADDR_VAR 0 53
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: LD_INT 2
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 2
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 1
29404: NEG
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29469: LD_ADDR_VAR 0 54
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 2
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 1
29634: NEG
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 2
29645: NEG
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: NEG
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: LD_INT 2
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29699: LD_ADDR_VAR 0 55
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 1
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 2
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 2
29875: NEG
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 2
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29929: LD_ADDR_VAR 0 56
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: NEG
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 2
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 2
30105: NEG
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: NEG
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 2
30128: NEG
30129: PUSH
30130: LD_INT 2
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30159: LD_ADDR_VAR 0 57
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 2
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: NEG
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: NEG
30359: PUSH
30360: LD_INT 2
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30389: LD_ADDR_VAR 0 58
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 2
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: NEG
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: LD_INT 2
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30619: LD_ADDR_VAR 0 59
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30707: LD_ADDR_VAR 0 60
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30795: LD_ADDR_VAR 0 61
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30883: LD_ADDR_VAR 0 62
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: LD_INT 1
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30971: LD_ADDR_VAR 0 63
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31059: LD_ADDR_VAR 0 64
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: ST_TO_ADDR
// end ; 1 :
31147: GO 37044
31149: LD_INT 1
31151: DOUBLE
31152: EQUAL
31153: IFTRUE 31157
31155: GO 33780
31157: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31158: LD_ADDR_VAR 0 11
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: LD_INT 3
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31202: LD_ADDR_VAR 0 12
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31243: LD_ADDR_VAR 0 13
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31283: LD_ADDR_VAR 0 14
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31324: LD_ADDR_VAR 0 15
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: NEG
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31368: LD_ADDR_VAR 0 16
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: LD_INT 3
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: LD_INT 2
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 3
31399: NEG
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31414: LD_ADDR_VAR 0 17
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 3
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31458: LD_ADDR_VAR 0 18
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31499: LD_ADDR_VAR 0 19
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31539: LD_ADDR_VAR 0 20
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31580: LD_ADDR_VAR 0 21
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: NEG
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31624: LD_ADDR_VAR 0 22
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 3
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 3
31643: NEG
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: NEG
31656: PUSH
31657: LD_INT 3
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31670: LD_ADDR_VAR 0 23
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: LD_INT 3
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 4
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31714: LD_ADDR_VAR 0 24
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 4
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31755: LD_ADDR_VAR 0 25
31759: PUSH
31760: LD_INT 3
31762: PUSH
31763: LD_INT 3
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 4
31772: PUSH
31773: LD_INT 3
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 3
31782: PUSH
31783: LD_INT 4
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31795: LD_ADDR_VAR 0 26
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 3
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31836: LD_ADDR_VAR 0 27
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 3
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 4
31865: NEG
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31880: LD_ADDR_VAR 0 28
31884: PUSH
31885: LD_INT 3
31887: NEG
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: LD_INT 4
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 4
31911: NEG
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31926: LD_ADDR_VAR 0 29
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 2
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: LD_INT 4
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 4
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 3
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: LD_INT 5
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 5
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: LD_INT 4
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 6
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: LD_INT 6
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: LD_INT 5
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
32081: LD_ADDR_VAR 0 30
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 4
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 4
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 4
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 5
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 5
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 6
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 6
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
32224: LD_ADDR_VAR 0 31
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 3
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 4
32271: PUSH
32272: LD_INT 4
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: PUSH
32282: LD_INT 4
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 5
32291: PUSH
32292: LD_INT 4
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 5
32301: PUSH
32302: LD_INT 5
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 4
32311: PUSH
32312: LD_INT 5
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 6
32321: PUSH
32322: LD_INT 5
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 6
32331: PUSH
32332: LD_INT 6
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 5
32341: PUSH
32342: LD_INT 6
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32363: LD_ADDR_VAR 0 32
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 3
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 4
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 5
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 5
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 6
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 6
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 5
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32506: LD_ADDR_VAR 0 33
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 3
32535: NEG
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 3
32547: NEG
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 4
32558: NEG
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 4
32569: NEG
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 4
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 5
32592: NEG
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 5
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 5
32615: NEG
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 6
32626: NEG
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 6
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32661: LD_ADDR_VAR 0 34
32665: PUSH
32666: LD_INT 2
32668: NEG
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 3
32680: NEG
32681: PUSH
32682: LD_INT 2
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 3
32692: NEG
32693: PUSH
32694: LD_INT 3
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 3
32704: NEG
32705: PUSH
32706: LD_INT 4
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 4
32716: NEG
32717: PUSH
32718: LD_INT 3
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 4
32728: NEG
32729: PUSH
32730: LD_INT 4
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 4
32740: NEG
32741: PUSH
32742: LD_INT 5
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 5
32752: NEG
32753: PUSH
32754: LD_INT 4
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 5
32764: NEG
32765: PUSH
32766: LD_INT 5
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 5
32776: NEG
32777: PUSH
32778: LD_INT 6
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 6
32788: NEG
32789: PUSH
32790: LD_INT 5
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 6
32800: NEG
32801: PUSH
32802: LD_INT 6
32804: NEG
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32824: LD_ADDR_VAR 0 41
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: LD_INT 2
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: LD_INT 3
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32868: LD_ADDR_VAR 0 42
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 3
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32909: LD_ADDR_VAR 0 43
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 3
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 2
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: LIST
32948: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32949: LD_ADDR_VAR 0 44
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32990: LD_ADDR_VAR 0 45
32994: PUSH
32995: LD_INT 2
32997: NEG
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 2
33008: NEG
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 3
33019: NEG
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
33034: LD_ADDR_VAR 0 46
33038: PUSH
33039: LD_INT 2
33041: NEG
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: LD_INT 3
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 3
33065: NEG
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
33080: LD_ADDR_VAR 0 47
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: LD_INT 3
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: LD_INT 3
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33113: LD_ADDR_VAR 0 48
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
33144: LD_ADDR_VAR 0 49
33148: PUSH
33149: LD_INT 3
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
33173: LD_ADDR_VAR 0 50
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33202: LD_ADDR_VAR 0 51
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 2
33220: NEG
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33233: LD_ADDR_VAR 0 52
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33266: LD_ADDR_VAR 0 53
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: LD_INT 3
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 3
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: LIST
33309: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33310: LD_ADDR_VAR 0 54
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 3
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 3
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33351: LD_ADDR_VAR 0 55
33355: PUSH
33356: LD_INT 3
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 3
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 3
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33391: LD_ADDR_VAR 0 56
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33432: LD_ADDR_VAR 0 57
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 3
33450: NEG
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: NEG
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33476: LD_ADDR_VAR 0 58
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 3
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: LD_INT 3
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33522: LD_ADDR_VAR 0 59
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 2
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33566: LD_ADDR_VAR 0 60
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33607: LD_ADDR_VAR 0 61
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33647: LD_ADDR_VAR 0 62
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33688: LD_ADDR_VAR 0 63
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 2
33717: NEG
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33732: LD_ADDR_VAR 0 64
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: ST_TO_ADDR
// end ; 2 :
33778: GO 37044
33780: LD_INT 2
33782: DOUBLE
33783: EQUAL
33784: IFTRUE 33788
33786: GO 37043
33788: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33789: LD_ADDR_VAR 0 29
33793: PUSH
33794: LD_INT 4
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 4
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 5
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 5
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 4
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 3
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 3
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 5
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 4
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 4
33919: PUSH
33920: LD_INT 4
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 3
33929: PUSH
33930: LD_INT 4
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 4
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: LD_INT 4
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 4
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: LD_INT 3
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: LD_INT 5
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: LD_INT 4
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 5
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: NEG
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 3
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 3
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 4
34128: NEG
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 4
34139: NEG
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 4
34151: NEG
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 4
34174: NEG
34175: PUSH
34176: LD_INT 4
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 4
34186: NEG
34187: PUSH
34188: LD_INT 5
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 3
34198: NEG
34199: PUSH
34200: LD_INT 4
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: LD_INT 3
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 4
34222: NEG
34223: PUSH
34224: LD_INT 3
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 5
34234: NEG
34235: PUSH
34236: LD_INT 4
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 5
34246: NEG
34247: PUSH
34248: LD_INT 5
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: NEG
34259: PUSH
34260: LD_INT 5
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 5
34270: NEG
34271: PUSH
34272: LD_INT 3
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34327: LD_ADDR_VAR 0 30
34331: PUSH
34332: LD_INT 4
34334: PUSH
34335: LD_INT 4
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 4
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 5
34354: PUSH
34355: LD_INT 4
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 5
34364: PUSH
34365: LD_INT 5
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 4
34374: PUSH
34375: LD_INT 5
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 4
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 3
34394: PUSH
34395: LD_INT 3
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 5
34404: PUSH
34405: LD_INT 3
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: PUSH
34415: LD_INT 5
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 4
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 3
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 4
34517: NEG
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 4
34528: NEG
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 3
34540: NEG
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 3
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 4
34562: NEG
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 5
34573: NEG
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 5
34584: NEG
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 5
34596: NEG
34597: PUSH
34598: LD_INT 2
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 3
34608: NEG
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: NEG
34620: PUSH
34621: LD_INT 3
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 3
34631: NEG
34632: PUSH
34633: LD_INT 4
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: LD_INT 3
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: LD_INT 2
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 3
34667: NEG
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 4
34679: NEG
34680: PUSH
34681: LD_INT 3
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 4
34691: NEG
34692: PUSH
34693: LD_INT 4
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 4
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 4
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 4
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 5
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 4
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 3
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 3
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 4
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: LD_INT 5
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: LD_INT 3
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: LD_INT 5
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34874: LD_ADDR_VAR 0 31
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 4
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 4
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 5
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 5
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 4
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 3
34974: NEG
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 3
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 2
35008: NEG
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 4
35030: NEG
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 4
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 4
35053: NEG
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 4
35076: NEG
35077: PUSH
35078: LD_INT 4
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 4
35088: NEG
35089: PUSH
35090: LD_INT 5
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 3
35100: NEG
35101: PUSH
35102: LD_INT 4
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 3
35112: NEG
35113: PUSH
35114: LD_INT 3
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 4
35124: NEG
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 5
35136: NEG
35137: PUSH
35138: LD_INT 4
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 5
35148: NEG
35149: PUSH
35150: LD_INT 5
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 3
35160: NEG
35161: PUSH
35162: LD_INT 5
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 5
35172: NEG
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: LD_INT 3
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: LD_INT 4
35198: NEG
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: LD_INT 3
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 2
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: LD_INT 3
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 4
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 4
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 4
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 5
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 5
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 4
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: LD_INT 2
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 5
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35424: LD_ADDR_VAR 0 32
35428: PUSH
35429: LD_INT 4
35431: NEG
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 4
35442: NEG
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 3
35454: NEG
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 3
35465: NEG
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 4
35476: NEG
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 5
35487: NEG
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 5
35498: NEG
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 5
35510: NEG
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: NEG
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 3
35533: NEG
35534: PUSH
35535: LD_INT 3
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 3
35545: NEG
35546: PUSH
35547: LD_INT 4
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 3
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 2
35569: NEG
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: NEG
35582: PUSH
35583: LD_INT 2
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 4
35593: NEG
35594: PUSH
35595: LD_INT 3
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 4
35605: NEG
35606: PUSH
35607: LD_INT 4
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 2
35617: NEG
35618: PUSH
35619: LD_INT 4
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 4
35629: NEG
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 4
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 5
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 4
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: LD_INT 3
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 3
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 4
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 5
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: LD_INT 3
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: LD_INT 5
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 3
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 3
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 4
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 4
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 3
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 4
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 4
35836: PUSH
35837: LD_INT 4
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 4
35846: PUSH
35847: LD_INT 3
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 5
35856: PUSH
35857: LD_INT 4
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 5
35866: PUSH
35867: LD_INT 5
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 4
35876: PUSH
35877: LD_INT 5
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: LD_INT 4
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 5
35906: PUSH
35907: LD_INT 3
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 3
35916: PUSH
35917: LD_INT 5
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35971: LD_ADDR_VAR 0 33
35975: PUSH
35976: LD_INT 4
35978: NEG
35979: PUSH
35980: LD_INT 4
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 4
35990: NEG
35991: PUSH
35992: LD_INT 5
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 3
36002: NEG
36003: PUSH
36004: LD_INT 4
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 3
36014: NEG
36015: PUSH
36016: LD_INT 3
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 4
36026: NEG
36027: PUSH
36028: LD_INT 3
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 5
36038: NEG
36039: PUSH
36040: LD_INT 4
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 5
36050: NEG
36051: PUSH
36052: LD_INT 5
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 3
36062: NEG
36063: PUSH
36064: LD_INT 5
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 5
36074: NEG
36075: PUSH
36076: LD_INT 3
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 3
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 4
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 3
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: LD_INT 3
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 4
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: LD_INT 4
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 4
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 4
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 5
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 5
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 4
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 3
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 5
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 3
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 3
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 4
36301: PUSH
36302: LD_INT 3
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 4
36311: PUSH
36312: LD_INT 4
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 3
36321: PUSH
36322: LD_INT 4
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 3
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 4
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 4
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: LD_INT 4
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 3
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 4
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 5
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 5
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: LD_INT 4
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 5
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36509: LD_ADDR_VAR 0 34
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 4
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 5
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: LD_INT 4
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: LD_INT 3
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 3
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 4
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 5
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: PUSH
36596: LD_INT 3
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: NEG
36607: PUSH
36608: LD_INT 5
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 3
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 3
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 4
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 4
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 4
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 4
36711: PUSH
36712: LD_INT 4
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 4
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 5
36731: PUSH
36732: LD_INT 4
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 5
36741: PUSH
36742: LD_INT 5
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 4
36751: PUSH
36752: LD_INT 5
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 3
36761: PUSH
36762: LD_INT 4
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 5
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 3
36791: PUSH
36792: LD_INT 5
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 3
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: LD_INT 4
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 4
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 4
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 4
36894: NEG
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 4
36905: NEG
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 3
36917: NEG
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 3
36928: NEG
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 4
36939: NEG
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 5
36950: NEG
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 5
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 5
36973: NEG
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 3
36985: NEG
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// end ; end ;
37041: GO 37044
37043: POP
// case btype of b_depot , b_warehouse :
37044: LD_VAR 0 1
37048: PUSH
37049: LD_INT 0
37051: DOUBLE
37052: EQUAL
37053: IFTRUE 37063
37055: LD_INT 1
37057: DOUBLE
37058: EQUAL
37059: IFTRUE 37063
37061: GO 37264
37063: POP
// case nation of nation_american :
37064: LD_VAR 0 5
37068: PUSH
37069: LD_INT 1
37071: DOUBLE
37072: EQUAL
37073: IFTRUE 37077
37075: GO 37133
37077: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
37078: LD_ADDR_VAR 0 9
37082: PUSH
37083: LD_VAR 0 11
37087: PUSH
37088: LD_VAR 0 12
37092: PUSH
37093: LD_VAR 0 13
37097: PUSH
37098: LD_VAR 0 14
37102: PUSH
37103: LD_VAR 0 15
37107: PUSH
37108: LD_VAR 0 16
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: PUSH
37121: LD_VAR 0 4
37125: PUSH
37126: LD_INT 1
37128: PLUS
37129: ARRAY
37130: ST_TO_ADDR
37131: GO 37262
37133: LD_INT 2
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37197
37141: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
37142: LD_ADDR_VAR 0 9
37146: PUSH
37147: LD_VAR 0 17
37151: PUSH
37152: LD_VAR 0 18
37156: PUSH
37157: LD_VAR 0 19
37161: PUSH
37162: LD_VAR 0 20
37166: PUSH
37167: LD_VAR 0 21
37171: PUSH
37172: LD_VAR 0 22
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: PUSH
37185: LD_VAR 0 4
37189: PUSH
37190: LD_INT 1
37192: PLUS
37193: ARRAY
37194: ST_TO_ADDR
37195: GO 37262
37197: LD_INT 3
37199: DOUBLE
37200: EQUAL
37201: IFTRUE 37205
37203: GO 37261
37205: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
37206: LD_ADDR_VAR 0 9
37210: PUSH
37211: LD_VAR 0 23
37215: PUSH
37216: LD_VAR 0 24
37220: PUSH
37221: LD_VAR 0 25
37225: PUSH
37226: LD_VAR 0 26
37230: PUSH
37231: LD_VAR 0 27
37235: PUSH
37236: LD_VAR 0 28
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: PUSH
37249: LD_VAR 0 4
37253: PUSH
37254: LD_INT 1
37256: PLUS
37257: ARRAY
37258: ST_TO_ADDR
37259: GO 37262
37261: POP
37262: GO 37817
37264: LD_INT 2
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37278
37270: LD_INT 3
37272: DOUBLE
37273: EQUAL
37274: IFTRUE 37278
37276: GO 37334
37278: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
37279: LD_ADDR_VAR 0 9
37283: PUSH
37284: LD_VAR 0 29
37288: PUSH
37289: LD_VAR 0 30
37293: PUSH
37294: LD_VAR 0 31
37298: PUSH
37299: LD_VAR 0 32
37303: PUSH
37304: LD_VAR 0 33
37308: PUSH
37309: LD_VAR 0 34
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: PUSH
37322: LD_VAR 0 4
37326: PUSH
37327: LD_INT 1
37329: PLUS
37330: ARRAY
37331: ST_TO_ADDR
37332: GO 37817
37334: LD_INT 16
37336: DOUBLE
37337: EQUAL
37338: IFTRUE 37396
37340: LD_INT 17
37342: DOUBLE
37343: EQUAL
37344: IFTRUE 37396
37346: LD_INT 18
37348: DOUBLE
37349: EQUAL
37350: IFTRUE 37396
37352: LD_INT 19
37354: DOUBLE
37355: EQUAL
37356: IFTRUE 37396
37358: LD_INT 22
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37396
37364: LD_INT 20
37366: DOUBLE
37367: EQUAL
37368: IFTRUE 37396
37370: LD_INT 21
37372: DOUBLE
37373: EQUAL
37374: IFTRUE 37396
37376: LD_INT 23
37378: DOUBLE
37379: EQUAL
37380: IFTRUE 37396
37382: LD_INT 24
37384: DOUBLE
37385: EQUAL
37386: IFTRUE 37396
37388: LD_INT 25
37390: DOUBLE
37391: EQUAL
37392: IFTRUE 37396
37394: GO 37452
37396: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37397: LD_ADDR_VAR 0 9
37401: PUSH
37402: LD_VAR 0 35
37406: PUSH
37407: LD_VAR 0 36
37411: PUSH
37412: LD_VAR 0 37
37416: PUSH
37417: LD_VAR 0 38
37421: PUSH
37422: LD_VAR 0 39
37426: PUSH
37427: LD_VAR 0 40
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: PUSH
37440: LD_VAR 0 4
37444: PUSH
37445: LD_INT 1
37447: PLUS
37448: ARRAY
37449: ST_TO_ADDR
37450: GO 37817
37452: LD_INT 6
37454: DOUBLE
37455: EQUAL
37456: IFTRUE 37508
37458: LD_INT 7
37460: DOUBLE
37461: EQUAL
37462: IFTRUE 37508
37464: LD_INT 8
37466: DOUBLE
37467: EQUAL
37468: IFTRUE 37508
37470: LD_INT 13
37472: DOUBLE
37473: EQUAL
37474: IFTRUE 37508
37476: LD_INT 12
37478: DOUBLE
37479: EQUAL
37480: IFTRUE 37508
37482: LD_INT 15
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37508
37488: LD_INT 11
37490: DOUBLE
37491: EQUAL
37492: IFTRUE 37508
37494: LD_INT 14
37496: DOUBLE
37497: EQUAL
37498: IFTRUE 37508
37500: LD_INT 10
37502: DOUBLE
37503: EQUAL
37504: IFTRUE 37508
37506: GO 37564
37508: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37509: LD_ADDR_VAR 0 9
37513: PUSH
37514: LD_VAR 0 41
37518: PUSH
37519: LD_VAR 0 42
37523: PUSH
37524: LD_VAR 0 43
37528: PUSH
37529: LD_VAR 0 44
37533: PUSH
37534: LD_VAR 0 45
37538: PUSH
37539: LD_VAR 0 46
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: PUSH
37552: LD_VAR 0 4
37556: PUSH
37557: LD_INT 1
37559: PLUS
37560: ARRAY
37561: ST_TO_ADDR
37562: GO 37817
37564: LD_INT 36
37566: DOUBLE
37567: EQUAL
37568: IFTRUE 37572
37570: GO 37628
37572: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_VAR 0 47
37582: PUSH
37583: LD_VAR 0 48
37587: PUSH
37588: LD_VAR 0 49
37592: PUSH
37593: LD_VAR 0 50
37597: PUSH
37598: LD_VAR 0 51
37602: PUSH
37603: LD_VAR 0 52
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: PUSH
37616: LD_VAR 0 4
37620: PUSH
37621: LD_INT 1
37623: PLUS
37624: ARRAY
37625: ST_TO_ADDR
37626: GO 37817
37628: LD_INT 4
37630: DOUBLE
37631: EQUAL
37632: IFTRUE 37654
37634: LD_INT 5
37636: DOUBLE
37637: EQUAL
37638: IFTRUE 37654
37640: LD_INT 34
37642: DOUBLE
37643: EQUAL
37644: IFTRUE 37654
37646: LD_INT 37
37648: DOUBLE
37649: EQUAL
37650: IFTRUE 37654
37652: GO 37710
37654: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37655: LD_ADDR_VAR 0 9
37659: PUSH
37660: LD_VAR 0 53
37664: PUSH
37665: LD_VAR 0 54
37669: PUSH
37670: LD_VAR 0 55
37674: PUSH
37675: LD_VAR 0 56
37679: PUSH
37680: LD_VAR 0 57
37684: PUSH
37685: LD_VAR 0 58
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: LD_VAR 0 4
37702: PUSH
37703: LD_INT 1
37705: PLUS
37706: ARRAY
37707: ST_TO_ADDR
37708: GO 37817
37710: LD_INT 31
37712: DOUBLE
37713: EQUAL
37714: IFTRUE 37760
37716: LD_INT 32
37718: DOUBLE
37719: EQUAL
37720: IFTRUE 37760
37722: LD_INT 33
37724: DOUBLE
37725: EQUAL
37726: IFTRUE 37760
37728: LD_INT 27
37730: DOUBLE
37731: EQUAL
37732: IFTRUE 37760
37734: LD_INT 26
37736: DOUBLE
37737: EQUAL
37738: IFTRUE 37760
37740: LD_INT 28
37742: DOUBLE
37743: EQUAL
37744: IFTRUE 37760
37746: LD_INT 29
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37760
37752: LD_INT 30
37754: DOUBLE
37755: EQUAL
37756: IFTRUE 37760
37758: GO 37816
37760: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: LD_VAR 0 59
37770: PUSH
37771: LD_VAR 0 60
37775: PUSH
37776: LD_VAR 0 61
37780: PUSH
37781: LD_VAR 0 62
37785: PUSH
37786: LD_VAR 0 63
37790: PUSH
37791: LD_VAR 0 64
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: PUSH
37804: LD_VAR 0 4
37808: PUSH
37809: LD_INT 1
37811: PLUS
37812: ARRAY
37813: ST_TO_ADDR
37814: GO 37817
37816: POP
// temp_list2 = [ ] ;
37817: LD_ADDR_VAR 0 10
37821: PUSH
37822: EMPTY
37823: ST_TO_ADDR
// for i in temp_list do
37824: LD_ADDR_VAR 0 8
37828: PUSH
37829: LD_VAR 0 9
37833: PUSH
37834: FOR_IN
37835: IFFALSE 37887
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37837: LD_ADDR_VAR 0 10
37841: PUSH
37842: LD_VAR 0 10
37846: PUSH
37847: LD_VAR 0 8
37851: PUSH
37852: LD_INT 1
37854: ARRAY
37855: PUSH
37856: LD_VAR 0 2
37860: PLUS
37861: PUSH
37862: LD_VAR 0 8
37866: PUSH
37867: LD_INT 2
37869: ARRAY
37870: PUSH
37871: LD_VAR 0 3
37875: PLUS
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: ADD
37884: ST_TO_ADDR
37885: GO 37834
37887: POP
37888: POP
// result = temp_list2 ;
37889: LD_ADDR_VAR 0 7
37893: PUSH
37894: LD_VAR 0 10
37898: ST_TO_ADDR
// end ;
37899: LD_VAR 0 7
37903: RET
// export function EnemyInRange ( unit , dist ) ; begin
37904: LD_INT 0
37906: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_VAR 0 1
37916: PPUSH
37917: CALL_OW 255
37921: PPUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 250
37931: PPUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 251
37941: PPUSH
37942: LD_VAR 0 2
37946: PPUSH
37947: CALL 11161 0 4
37951: PUSH
37952: LD_INT 4
37954: ARRAY
37955: ST_TO_ADDR
// end ;
37956: LD_VAR 0 3
37960: RET
// export function PlayerSeeMe ( unit ) ; begin
37961: LD_INT 0
37963: PPUSH
// result := See ( your_side , unit ) ;
37964: LD_ADDR_VAR 0 2
37968: PUSH
37969: LD_OWVAR 2
37973: PPUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: CALL_OW 292
37983: ST_TO_ADDR
// end ;
37984: LD_VAR 0 2
37988: RET
// export function ReverseDir ( unit ) ; begin
37989: LD_INT 0
37991: PPUSH
// if not unit then
37992: LD_VAR 0 1
37996: NOT
37997: IFFALSE 38001
// exit ;
37999: GO 38024
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
38001: LD_ADDR_VAR 0 2
38005: PUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 254
38015: PUSH
38016: LD_INT 3
38018: PLUS
38019: PUSH
38020: LD_INT 6
38022: MOD
38023: ST_TO_ADDR
// end ;
38024: LD_VAR 0 2
38028: RET
// export function ReverseArray ( array ) ; var i ; begin
38029: LD_INT 0
38031: PPUSH
38032: PPUSH
// if not array then
38033: LD_VAR 0 1
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 38097
// result := [ ] ;
38042: LD_ADDR_VAR 0 2
38046: PUSH
38047: EMPTY
38048: ST_TO_ADDR
// for i := array downto 1 do
38049: LD_ADDR_VAR 0 3
38053: PUSH
38054: DOUBLE
38055: LD_VAR 0 1
38059: INC
38060: ST_TO_ADDR
38061: LD_INT 1
38063: PUSH
38064: FOR_DOWNTO
38065: IFFALSE 38095
// result := Join ( result , array [ i ] ) ;
38067: LD_ADDR_VAR 0 2
38071: PUSH
38072: LD_VAR 0 2
38076: PPUSH
38077: LD_VAR 0 1
38081: PUSH
38082: LD_VAR 0 3
38086: ARRAY
38087: PPUSH
38088: CALL 42949 0 2
38092: ST_TO_ADDR
38093: GO 38064
38095: POP
38096: POP
// end ;
38097: LD_VAR 0 2
38101: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
38102: LD_INT 0
38104: PPUSH
38105: PPUSH
38106: PPUSH
38107: PPUSH
38108: PPUSH
38109: PPUSH
// if not unit or not hexes then
38110: LD_VAR 0 1
38114: NOT
38115: IFTRUE 38124
38117: PUSH
38118: LD_VAR 0 2
38122: NOT
38123: OR
38124: IFFALSE 38128
// exit ;
38126: GO 38251
// dist := 9999 ;
38128: LD_ADDR_VAR 0 5
38132: PUSH
38133: LD_INT 9999
38135: ST_TO_ADDR
// for i = 1 to hexes do
38136: LD_ADDR_VAR 0 4
38140: PUSH
38141: DOUBLE
38142: LD_INT 1
38144: DEC
38145: ST_TO_ADDR
38146: LD_VAR 0 2
38150: PUSH
38151: FOR_TO
38152: IFFALSE 38239
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38154: LD_ADDR_VAR 0 6
38158: PUSH
38159: LD_VAR 0 1
38163: PPUSH
38164: LD_VAR 0 2
38168: PUSH
38169: LD_VAR 0 4
38173: ARRAY
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PPUSH
38179: LD_VAR 0 2
38183: PUSH
38184: LD_VAR 0 4
38188: ARRAY
38189: PUSH
38190: LD_INT 2
38192: ARRAY
38193: PPUSH
38194: CALL_OW 297
38198: ST_TO_ADDR
// if tdist < dist then
38199: LD_VAR 0 6
38203: PUSH
38204: LD_VAR 0 5
38208: LESS
38209: IFFALSE 38237
// begin hex := hexes [ i ] ;
38211: LD_ADDR_VAR 0 8
38215: PUSH
38216: LD_VAR 0 2
38220: PUSH
38221: LD_VAR 0 4
38225: ARRAY
38226: ST_TO_ADDR
// dist := tdist ;
38227: LD_ADDR_VAR 0 5
38231: PUSH
38232: LD_VAR 0 6
38236: ST_TO_ADDR
// end ; end ;
38237: GO 38151
38239: POP
38240: POP
// result := hex ;
38241: LD_ADDR_VAR 0 3
38245: PUSH
38246: LD_VAR 0 8
38250: ST_TO_ADDR
// end ;
38251: LD_VAR 0 3
38255: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
38256: LD_INT 0
38258: PPUSH
38259: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38260: LD_VAR 0 1
38264: NOT
38265: IFTRUE 38304
38267: PUSH
38268: LD_VAR 0 1
38272: PUSH
38273: LD_INT 21
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 23
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PPUSH
38297: CALL_OW 69
38301: IN
38302: NOT
38303: OR
38304: IFFALSE 38308
// exit ;
38306: GO 38355
// for i = 1 to 3 do
38308: LD_ADDR_VAR 0 3
38312: PUSH
38313: DOUBLE
38314: LD_INT 1
38316: DEC
38317: ST_TO_ADDR
38318: LD_INT 3
38320: PUSH
38321: FOR_TO
38322: IFFALSE 38353
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 250
38333: PPUSH
38334: LD_VAR 0 1
38338: PPUSH
38339: CALL_OW 251
38343: PPUSH
38344: LD_INT 1
38346: PPUSH
38347: CALL_OW 453
38351: GO 38321
38353: POP
38354: POP
// end ;
38355: LD_VAR 0 2
38359: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38360: LD_INT 0
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
// if not unit or not enemy_unit then
38368: LD_VAR 0 1
38372: NOT
38373: IFTRUE 38382
38375: PUSH
38376: LD_VAR 0 2
38380: NOT
38381: OR
38382: IFFALSE 38386
// exit ;
38384: GO 38867
// if GetLives ( i ) < 250 then
38386: LD_VAR 0 4
38390: PPUSH
38391: CALL_OW 256
38395: PUSH
38396: LD_INT 250
38398: LESS
38399: IFFALSE 38412
// begin ComAutodestruct ( i ) ;
38401: LD_VAR 0 4
38405: PPUSH
38406: CALL 38256 0 1
// exit ;
38410: GO 38867
// end ; x := GetX ( enemy_unit ) ;
38412: LD_ADDR_VAR 0 7
38416: PUSH
38417: LD_VAR 0 2
38421: PPUSH
38422: CALL_OW 250
38426: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38427: LD_ADDR_VAR 0 8
38431: PUSH
38432: LD_VAR 0 2
38436: PPUSH
38437: CALL_OW 251
38441: ST_TO_ADDR
// if not x or not y then
38442: LD_VAR 0 7
38446: NOT
38447: IFTRUE 38456
38449: PUSH
38450: LD_VAR 0 8
38454: NOT
38455: OR
38456: IFFALSE 38460
// exit ;
38458: GO 38867
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38460: LD_ADDR_VAR 0 6
38464: PUSH
38465: LD_VAR 0 7
38469: PPUSH
38470: LD_INT 0
38472: PPUSH
38473: LD_INT 4
38475: PPUSH
38476: CALL_OW 272
38480: PUSH
38481: LD_VAR 0 8
38485: PPUSH
38486: LD_INT 0
38488: PPUSH
38489: LD_INT 4
38491: PPUSH
38492: CALL_OW 273
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_VAR 0 7
38505: PPUSH
38506: LD_INT 1
38508: PPUSH
38509: LD_INT 4
38511: PPUSH
38512: CALL_OW 272
38516: PUSH
38517: LD_VAR 0 8
38521: PPUSH
38522: LD_INT 1
38524: PPUSH
38525: LD_INT 4
38527: PPUSH
38528: CALL_OW 273
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_VAR 0 7
38541: PPUSH
38542: LD_INT 2
38544: PPUSH
38545: LD_INT 4
38547: PPUSH
38548: CALL_OW 272
38552: PUSH
38553: LD_VAR 0 8
38557: PPUSH
38558: LD_INT 2
38560: PPUSH
38561: LD_INT 4
38563: PPUSH
38564: CALL_OW 273
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_VAR 0 7
38577: PPUSH
38578: LD_INT 3
38580: PPUSH
38581: LD_INT 4
38583: PPUSH
38584: CALL_OW 272
38588: PUSH
38589: LD_VAR 0 8
38593: PPUSH
38594: LD_INT 3
38596: PPUSH
38597: LD_INT 4
38599: PPUSH
38600: CALL_OW 273
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_VAR 0 7
38613: PPUSH
38614: LD_INT 4
38616: PPUSH
38617: LD_INT 4
38619: PPUSH
38620: CALL_OW 272
38624: PUSH
38625: LD_VAR 0 8
38629: PPUSH
38630: LD_INT 4
38632: PPUSH
38633: LD_INT 4
38635: PPUSH
38636: CALL_OW 273
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_VAR 0 7
38649: PPUSH
38650: LD_INT 5
38652: PPUSH
38653: LD_INT 4
38655: PPUSH
38656: CALL_OW 272
38660: PUSH
38661: LD_VAR 0 8
38665: PPUSH
38666: LD_INT 5
38668: PPUSH
38669: LD_INT 4
38671: PPUSH
38672: CALL_OW 273
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: ST_TO_ADDR
// for i = tmp downto 1 do
38689: LD_ADDR_VAR 0 4
38693: PUSH
38694: DOUBLE
38695: LD_VAR 0 6
38699: INC
38700: ST_TO_ADDR
38701: LD_INT 1
38703: PUSH
38704: FOR_DOWNTO
38705: IFFALSE 38808
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38707: LD_VAR 0 6
38711: PUSH
38712: LD_VAR 0 4
38716: ARRAY
38717: PUSH
38718: LD_INT 1
38720: ARRAY
38721: PPUSH
38722: LD_VAR 0 6
38726: PUSH
38727: LD_VAR 0 4
38731: ARRAY
38732: PUSH
38733: LD_INT 2
38735: ARRAY
38736: PPUSH
38737: CALL_OW 488
38741: NOT
38742: IFTRUE 38784
38744: PUSH
38745: LD_VAR 0 6
38749: PUSH
38750: LD_VAR 0 4
38754: ARRAY
38755: PUSH
38756: LD_INT 1
38758: ARRAY
38759: PPUSH
38760: LD_VAR 0 6
38764: PUSH
38765: LD_VAR 0 4
38769: ARRAY
38770: PUSH
38771: LD_INT 2
38773: ARRAY
38774: PPUSH
38775: CALL_OW 428
38779: PUSH
38780: LD_INT 0
38782: NONEQUAL
38783: OR
38784: IFFALSE 38806
// tmp := Delete ( tmp , i ) ;
38786: LD_ADDR_VAR 0 6
38790: PUSH
38791: LD_VAR 0 6
38795: PPUSH
38796: LD_VAR 0 4
38800: PPUSH
38801: CALL_OW 3
38805: ST_TO_ADDR
38806: GO 38704
38808: POP
38809: POP
// j := GetClosestHex ( unit , tmp ) ;
38810: LD_ADDR_VAR 0 5
38814: PUSH
38815: LD_VAR 0 1
38819: PPUSH
38820: LD_VAR 0 6
38824: PPUSH
38825: CALL 38102 0 2
38829: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38830: LD_VAR 0 1
38834: PPUSH
38835: LD_VAR 0 5
38839: PUSH
38840: LD_INT 1
38842: ARRAY
38843: PPUSH
38844: LD_VAR 0 5
38848: PUSH
38849: LD_INT 2
38851: ARRAY
38852: PPUSH
38853: CALL_OW 111
// result := j ;
38857: LD_ADDR_VAR 0 3
38861: PUSH
38862: LD_VAR 0 5
38866: ST_TO_ADDR
// end ;
38867: LD_VAR 0 3
38871: RET
// export function PrepareApemanSoldier ( ) ; begin
38872: LD_INT 0
38874: PPUSH
// uc_nation := 0 ;
38875: LD_ADDR_OWVAR 21
38879: PUSH
38880: LD_INT 0
38882: ST_TO_ADDR
// hc_sex := sex_male ;
38883: LD_ADDR_OWVAR 27
38887: PUSH
38888: LD_INT 1
38890: ST_TO_ADDR
// hc_name :=  ;
38891: LD_ADDR_OWVAR 26
38895: PUSH
38896: LD_STRING 
38898: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38899: LD_ADDR_OWVAR 28
38903: PUSH
38904: LD_INT 15
38906: ST_TO_ADDR
// hc_gallery :=  ;
38907: LD_ADDR_OWVAR 33
38911: PUSH
38912: LD_STRING 
38914: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38915: LD_ADDR_OWVAR 31
38919: PUSH
38920: LD_INT 0
38922: PPUSH
38923: LD_INT 3
38925: PPUSH
38926: CALL_OW 12
38930: PUSH
38931: LD_INT 0
38933: PPUSH
38934: LD_INT 3
38936: PPUSH
38937: CALL_OW 12
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
38954: LD_ADDR_OWVAR 29
38958: PUSH
38959: LD_INT 10
38961: PUSH
38962: LD_INT 12
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: ST_TO_ADDR
// end ;
38969: LD_VAR 0 1
38973: RET
// export function PrepareApemanEngineer ( ) ; begin
38974: LD_INT 0
38976: PPUSH
// uc_nation := 0 ;
38977: LD_ADDR_OWVAR 21
38981: PUSH
38982: LD_INT 0
38984: ST_TO_ADDR
// hc_sex := sex_male ;
38985: LD_ADDR_OWVAR 27
38989: PUSH
38990: LD_INT 1
38992: ST_TO_ADDR
// hc_name :=  ;
38993: LD_ADDR_OWVAR 26
38997: PUSH
38998: LD_STRING 
39000: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
39001: LD_ADDR_OWVAR 28
39005: PUSH
39006: LD_INT 16
39008: ST_TO_ADDR
// hc_gallery :=  ;
39009: LD_ADDR_OWVAR 33
39013: PUSH
39014: LD_STRING 
39016: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39017: LD_ADDR_OWVAR 31
39021: PUSH
39022: LD_INT 0
39024: PPUSH
39025: LD_INT 3
39027: PPUSH
39028: CALL_OW 12
39032: PUSH
39033: LD_INT 0
39035: PPUSH
39036: LD_INT 3
39038: PPUSH
39039: CALL_OW 12
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
39056: LD_ADDR_OWVAR 29
39060: PUSH
39061: LD_INT 10
39063: PUSH
39064: LD_INT 12
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: ST_TO_ADDR
// end ;
39071: LD_VAR 0 1
39075: RET
// export function PrepareApeman ( agressivity ) ; begin
39076: LD_INT 0
39078: PPUSH
// uc_side := 0 ;
39079: LD_ADDR_OWVAR 20
39083: PUSH
39084: LD_INT 0
39086: ST_TO_ADDR
// uc_nation := 0 ;
39087: LD_ADDR_OWVAR 21
39091: PUSH
39092: LD_INT 0
39094: ST_TO_ADDR
// hc_sex := sex_male ;
39095: LD_ADDR_OWVAR 27
39099: PUSH
39100: LD_INT 1
39102: ST_TO_ADDR
// hc_class := class_apeman ;
39103: LD_ADDR_OWVAR 28
39107: PUSH
39108: LD_INT 12
39110: ST_TO_ADDR
// hc_gallery :=  ;
39111: LD_ADDR_OWVAR 33
39115: PUSH
39116: LD_STRING 
39118: ST_TO_ADDR
// hc_name :=  ;
39119: LD_ADDR_OWVAR 26
39123: PUSH
39124: LD_STRING 
39126: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
39127: LD_ADDR_OWVAR 29
39131: PUSH
39132: LD_INT 10
39134: PUSH
39135: LD_INT 12
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: ST_TO_ADDR
// if agressivity = 0 then
39142: LD_VAR 0 1
39146: PUSH
39147: LD_INT 0
39149: EQUAL
39150: IFFALSE 39162
// hc_agressivity := 0 else
39152: LD_ADDR_OWVAR 35
39156: PUSH
39157: LD_INT 0
39159: ST_TO_ADDR
39160: GO 39183
// hc_agressivity := rand ( - agressivity , agressivity ) ;
39162: LD_ADDR_OWVAR 35
39166: PUSH
39167: LD_VAR 0 1
39171: NEG
39172: PPUSH
39173: LD_VAR 0 1
39177: PPUSH
39178: CALL_OW 12
39182: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39183: LD_ADDR_OWVAR 31
39187: PUSH
39188: LD_INT 0
39190: PPUSH
39191: LD_INT 3
39193: PPUSH
39194: CALL_OW 12
39198: PUSH
39199: LD_INT 0
39201: PPUSH
39202: LD_INT 3
39204: PPUSH
39205: CALL_OW 12
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: ST_TO_ADDR
// end ;
39222: LD_VAR 0 2
39226: RET
// export function PrepareTiger ( agressivity ) ; begin
39227: LD_INT 0
39229: PPUSH
// uc_side := 0 ;
39230: LD_ADDR_OWVAR 20
39234: PUSH
39235: LD_INT 0
39237: ST_TO_ADDR
// uc_nation := 0 ;
39238: LD_ADDR_OWVAR 21
39242: PUSH
39243: LD_INT 0
39245: ST_TO_ADDR
// InitHc ;
39246: CALL_OW 19
// hc_class := class_tiger ;
39250: LD_ADDR_OWVAR 28
39254: PUSH
39255: LD_INT 14
39257: ST_TO_ADDR
// hc_gallery :=  ;
39258: LD_ADDR_OWVAR 33
39262: PUSH
39263: LD_STRING 
39265: ST_TO_ADDR
// hc_name :=  ;
39266: LD_ADDR_OWVAR 26
39270: PUSH
39271: LD_STRING 
39273: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
39274: LD_ADDR_OWVAR 35
39278: PUSH
39279: LD_VAR 0 1
39283: NEG
39284: PPUSH
39285: LD_VAR 0 1
39289: PPUSH
39290: CALL_OW 12
39294: ST_TO_ADDR
// end ;
39295: LD_VAR 0 2
39299: RET
// export function PrepareEnchidna ( ) ; begin
39300: LD_INT 0
39302: PPUSH
// uc_side := 0 ;
39303: LD_ADDR_OWVAR 20
39307: PUSH
39308: LD_INT 0
39310: ST_TO_ADDR
// uc_nation := 0 ;
39311: LD_ADDR_OWVAR 21
39315: PUSH
39316: LD_INT 0
39318: ST_TO_ADDR
// InitHc ;
39319: CALL_OW 19
// hc_class := class_baggie ;
39323: LD_ADDR_OWVAR 28
39327: PUSH
39328: LD_INT 13
39330: ST_TO_ADDR
// hc_gallery :=  ;
39331: LD_ADDR_OWVAR 33
39335: PUSH
39336: LD_STRING 
39338: ST_TO_ADDR
// hc_name :=  ;
39339: LD_ADDR_OWVAR 26
39343: PUSH
39344: LD_STRING 
39346: ST_TO_ADDR
// end ;
39347: LD_VAR 0 1
39351: RET
// export function PrepareFrog ( ) ; begin
39352: LD_INT 0
39354: PPUSH
// uc_side := 0 ;
39355: LD_ADDR_OWVAR 20
39359: PUSH
39360: LD_INT 0
39362: ST_TO_ADDR
// uc_nation := 0 ;
39363: LD_ADDR_OWVAR 21
39367: PUSH
39368: LD_INT 0
39370: ST_TO_ADDR
// InitHc ;
39371: CALL_OW 19
// hc_class := class_frog ;
39375: LD_ADDR_OWVAR 28
39379: PUSH
39380: LD_INT 19
39382: ST_TO_ADDR
// hc_gallery :=  ;
39383: LD_ADDR_OWVAR 33
39387: PUSH
39388: LD_STRING 
39390: ST_TO_ADDR
// hc_name :=  ;
39391: LD_ADDR_OWVAR 26
39395: PUSH
39396: LD_STRING 
39398: ST_TO_ADDR
// end ;
39399: LD_VAR 0 1
39403: RET
// export function PrepareFish ( ) ; begin
39404: LD_INT 0
39406: PPUSH
// uc_side := 0 ;
39407: LD_ADDR_OWVAR 20
39411: PUSH
39412: LD_INT 0
39414: ST_TO_ADDR
// uc_nation := 0 ;
39415: LD_ADDR_OWVAR 21
39419: PUSH
39420: LD_INT 0
39422: ST_TO_ADDR
// InitHc ;
39423: CALL_OW 19
// hc_class := class_fish ;
39427: LD_ADDR_OWVAR 28
39431: PUSH
39432: LD_INT 20
39434: ST_TO_ADDR
// hc_gallery :=  ;
39435: LD_ADDR_OWVAR 33
39439: PUSH
39440: LD_STRING 
39442: ST_TO_ADDR
// hc_name :=  ;
39443: LD_ADDR_OWVAR 26
39447: PUSH
39448: LD_STRING 
39450: ST_TO_ADDR
// end ;
39451: LD_VAR 0 1
39455: RET
// export function PrepareBird ( ) ; begin
39456: LD_INT 0
39458: PPUSH
// uc_side := 0 ;
39459: LD_ADDR_OWVAR 20
39463: PUSH
39464: LD_INT 0
39466: ST_TO_ADDR
// uc_nation := 0 ;
39467: LD_ADDR_OWVAR 21
39471: PUSH
39472: LD_INT 0
39474: ST_TO_ADDR
// InitHc ;
39475: CALL_OW 19
// hc_class := class_phororhacos ;
39479: LD_ADDR_OWVAR 28
39483: PUSH
39484: LD_INT 18
39486: ST_TO_ADDR
// hc_gallery :=  ;
39487: LD_ADDR_OWVAR 33
39491: PUSH
39492: LD_STRING 
39494: ST_TO_ADDR
// hc_name :=  ;
39495: LD_ADDR_OWVAR 26
39499: PUSH
39500: LD_STRING 
39502: ST_TO_ADDR
// end ;
39503: LD_VAR 0 1
39507: RET
// export function PrepareHorse ( ) ; begin
39508: LD_INT 0
39510: PPUSH
// uc_side := 0 ;
39511: LD_ADDR_OWVAR 20
39515: PUSH
39516: LD_INT 0
39518: ST_TO_ADDR
// uc_nation := 0 ;
39519: LD_ADDR_OWVAR 21
39523: PUSH
39524: LD_INT 0
39526: ST_TO_ADDR
// InitHc ;
39527: CALL_OW 19
// hc_class := class_horse ;
39531: LD_ADDR_OWVAR 28
39535: PUSH
39536: LD_INT 21
39538: ST_TO_ADDR
// hc_gallery :=  ;
39539: LD_ADDR_OWVAR 33
39543: PUSH
39544: LD_STRING 
39546: ST_TO_ADDR
// hc_name :=  ;
39547: LD_ADDR_OWVAR 26
39551: PUSH
39552: LD_STRING 
39554: ST_TO_ADDR
// end ;
39555: LD_VAR 0 1
39559: RET
// export function PrepareMastodont ( ) ; begin
39560: LD_INT 0
39562: PPUSH
// uc_side := 0 ;
39563: LD_ADDR_OWVAR 20
39567: PUSH
39568: LD_INT 0
39570: ST_TO_ADDR
// uc_nation := 0 ;
39571: LD_ADDR_OWVAR 21
39575: PUSH
39576: LD_INT 0
39578: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39579: LD_ADDR_OWVAR 37
39583: PUSH
39584: LD_INT 31
39586: ST_TO_ADDR
// vc_control := control_rider ;
39587: LD_ADDR_OWVAR 38
39591: PUSH
39592: LD_INT 4
39594: ST_TO_ADDR
// end ;
39595: LD_VAR 0 1
39599: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39600: LD_INT 0
39602: PPUSH
39603: PPUSH
39604: PPUSH
// uc_side = 0 ;
39605: LD_ADDR_OWVAR 20
39609: PUSH
39610: LD_INT 0
39612: ST_TO_ADDR
// uc_nation = 0 ;
39613: LD_ADDR_OWVAR 21
39617: PUSH
39618: LD_INT 0
39620: ST_TO_ADDR
// InitHc_All ( ) ;
39621: CALL_OW 584
// InitVc ;
39625: CALL_OW 20
// if mastodonts then
39629: LD_VAR 0 6
39633: IFFALSE 39700
// for i = 1 to mastodonts do
39635: LD_ADDR_VAR 0 11
39639: PUSH
39640: DOUBLE
39641: LD_INT 1
39643: DEC
39644: ST_TO_ADDR
39645: LD_VAR 0 6
39649: PUSH
39650: FOR_TO
39651: IFFALSE 39698
// begin vc_chassis := 31 ;
39653: LD_ADDR_OWVAR 37
39657: PUSH
39658: LD_INT 31
39660: ST_TO_ADDR
// vc_control := control_rider ;
39661: LD_ADDR_OWVAR 38
39665: PUSH
39666: LD_INT 4
39668: ST_TO_ADDR
// animal := CreateVehicle ;
39669: LD_ADDR_VAR 0 12
39673: PUSH
39674: CALL_OW 45
39678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39679: LD_VAR 0 12
39683: PPUSH
39684: LD_VAR 0 8
39688: PPUSH
39689: LD_INT 0
39691: PPUSH
39692: CALL 41842 0 3
// end ;
39696: GO 39650
39698: POP
39699: POP
// if horses then
39700: LD_VAR 0 5
39704: IFFALSE 39771
// for i = 1 to horses do
39706: LD_ADDR_VAR 0 11
39710: PUSH
39711: DOUBLE
39712: LD_INT 1
39714: DEC
39715: ST_TO_ADDR
39716: LD_VAR 0 5
39720: PUSH
39721: FOR_TO
39722: IFFALSE 39769
// begin hc_class := 21 ;
39724: LD_ADDR_OWVAR 28
39728: PUSH
39729: LD_INT 21
39731: ST_TO_ADDR
// hc_gallery :=  ;
39732: LD_ADDR_OWVAR 33
39736: PUSH
39737: LD_STRING 
39739: ST_TO_ADDR
// animal := CreateHuman ;
39740: LD_ADDR_VAR 0 12
39744: PUSH
39745: CALL_OW 44
39749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39750: LD_VAR 0 12
39754: PPUSH
39755: LD_VAR 0 8
39759: PPUSH
39760: LD_INT 0
39762: PPUSH
39763: CALL 41842 0 3
// end ;
39767: GO 39721
39769: POP
39770: POP
// if birds then
39771: LD_VAR 0 1
39775: IFFALSE 39842
// for i = 1 to birds do
39777: LD_ADDR_VAR 0 11
39781: PUSH
39782: DOUBLE
39783: LD_INT 1
39785: DEC
39786: ST_TO_ADDR
39787: LD_VAR 0 1
39791: PUSH
39792: FOR_TO
39793: IFFALSE 39840
// begin hc_class := 18 ;
39795: LD_ADDR_OWVAR 28
39799: PUSH
39800: LD_INT 18
39802: ST_TO_ADDR
// hc_gallery =  ;
39803: LD_ADDR_OWVAR 33
39807: PUSH
39808: LD_STRING 
39810: ST_TO_ADDR
// animal := CreateHuman ;
39811: LD_ADDR_VAR 0 12
39815: PUSH
39816: CALL_OW 44
39820: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39821: LD_VAR 0 12
39825: PPUSH
39826: LD_VAR 0 8
39830: PPUSH
39831: LD_INT 0
39833: PPUSH
39834: CALL 41842 0 3
// end ;
39838: GO 39792
39840: POP
39841: POP
// if tigers then
39842: LD_VAR 0 2
39846: IFFALSE 39930
// for i = 1 to tigers do
39848: LD_ADDR_VAR 0 11
39852: PUSH
39853: DOUBLE
39854: LD_INT 1
39856: DEC
39857: ST_TO_ADDR
39858: LD_VAR 0 2
39862: PUSH
39863: FOR_TO
39864: IFFALSE 39928
// begin hc_class = class_tiger ;
39866: LD_ADDR_OWVAR 28
39870: PUSH
39871: LD_INT 14
39873: ST_TO_ADDR
// hc_gallery =  ;
39874: LD_ADDR_OWVAR 33
39878: PUSH
39879: LD_STRING 
39881: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39882: LD_ADDR_OWVAR 35
39886: PUSH
39887: LD_INT 7
39889: NEG
39890: PPUSH
39891: LD_INT 7
39893: PPUSH
39894: CALL_OW 12
39898: ST_TO_ADDR
// animal := CreateHuman ;
39899: LD_ADDR_VAR 0 12
39903: PUSH
39904: CALL_OW 44
39908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39909: LD_VAR 0 12
39913: PPUSH
39914: LD_VAR 0 8
39918: PPUSH
39919: LD_INT 0
39921: PPUSH
39922: CALL 41842 0 3
// end ;
39926: GO 39863
39928: POP
39929: POP
// if apemans then
39930: LD_VAR 0 3
39934: IFFALSE 40057
// for i = 1 to apemans do
39936: LD_ADDR_VAR 0 11
39940: PUSH
39941: DOUBLE
39942: LD_INT 1
39944: DEC
39945: ST_TO_ADDR
39946: LD_VAR 0 3
39950: PUSH
39951: FOR_TO
39952: IFFALSE 40055
// begin hc_class = class_apeman ;
39954: LD_ADDR_OWVAR 28
39958: PUSH
39959: LD_INT 12
39961: ST_TO_ADDR
// hc_gallery =  ;
39962: LD_ADDR_OWVAR 33
39966: PUSH
39967: LD_STRING 
39969: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39970: LD_ADDR_OWVAR 35
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PPUSH
39979: LD_INT 2
39981: PPUSH
39982: CALL_OW 12
39986: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39987: LD_ADDR_OWVAR 31
39991: PUSH
39992: LD_INT 1
39994: PPUSH
39995: LD_INT 3
39997: PPUSH
39998: CALL_OW 12
40002: PUSH
40003: LD_INT 1
40005: PPUSH
40006: LD_INT 3
40008: PPUSH
40009: CALL_OW 12
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: ST_TO_ADDR
// animal := CreateHuman ;
40026: LD_ADDR_VAR 0 12
40030: PUSH
40031: CALL_OW 44
40035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40036: LD_VAR 0 12
40040: PPUSH
40041: LD_VAR 0 8
40045: PPUSH
40046: LD_INT 0
40048: PPUSH
40049: CALL 41842 0 3
// end ;
40053: GO 39951
40055: POP
40056: POP
// if enchidnas then
40057: LD_VAR 0 4
40061: IFFALSE 40128
// for i = 1 to enchidnas do
40063: LD_ADDR_VAR 0 11
40067: PUSH
40068: DOUBLE
40069: LD_INT 1
40071: DEC
40072: ST_TO_ADDR
40073: LD_VAR 0 4
40077: PUSH
40078: FOR_TO
40079: IFFALSE 40126
// begin hc_class = 13 ;
40081: LD_ADDR_OWVAR 28
40085: PUSH
40086: LD_INT 13
40088: ST_TO_ADDR
// hc_gallery =  ;
40089: LD_ADDR_OWVAR 33
40093: PUSH
40094: LD_STRING 
40096: ST_TO_ADDR
// animal := CreateHuman ;
40097: LD_ADDR_VAR 0 12
40101: PUSH
40102: CALL_OW 44
40106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40107: LD_VAR 0 12
40111: PPUSH
40112: LD_VAR 0 8
40116: PPUSH
40117: LD_INT 0
40119: PPUSH
40120: CALL 41842 0 3
// end ;
40124: GO 40078
40126: POP
40127: POP
// if fishes then
40128: LD_VAR 0 7
40132: IFFALSE 40199
// for i = 1 to fishes do
40134: LD_ADDR_VAR 0 11
40138: PUSH
40139: DOUBLE
40140: LD_INT 1
40142: DEC
40143: ST_TO_ADDR
40144: LD_VAR 0 7
40148: PUSH
40149: FOR_TO
40150: IFFALSE 40197
// begin hc_class = 20 ;
40152: LD_ADDR_OWVAR 28
40156: PUSH
40157: LD_INT 20
40159: ST_TO_ADDR
// hc_gallery =  ;
40160: LD_ADDR_OWVAR 33
40164: PUSH
40165: LD_STRING 
40167: ST_TO_ADDR
// animal := CreateHuman ;
40168: LD_ADDR_VAR 0 12
40172: PUSH
40173: CALL_OW 44
40177: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
40178: LD_VAR 0 12
40182: PPUSH
40183: LD_VAR 0 9
40187: PPUSH
40188: LD_INT 0
40190: PPUSH
40191: CALL 41842 0 3
// end ;
40195: GO 40149
40197: POP
40198: POP
// end ;
40199: LD_VAR 0 10
40203: RET
// export function WantHeal ( sci , unit ) ; begin
40204: LD_INT 0
40206: PPUSH
// if GetTaskList ( sci ) > 0 then
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 437
40216: PUSH
40217: LD_INT 0
40219: GREATER
40220: IFFALSE 40292
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
40222: LD_VAR 0 1
40226: PPUSH
40227: CALL_OW 437
40231: PUSH
40232: LD_INT 1
40234: ARRAY
40235: PUSH
40236: LD_INT 1
40238: ARRAY
40239: PUSH
40240: LD_STRING l
40242: EQUAL
40243: IFFALSE 40270
40245: PUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 437
40255: PUSH
40256: LD_INT 1
40258: ARRAY
40259: PUSH
40260: LD_INT 4
40262: ARRAY
40263: PUSH
40264: LD_VAR 0 2
40268: EQUAL
40269: AND
40270: IFFALSE 40282
// result := true else
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_INT 1
40279: ST_TO_ADDR
40280: GO 40290
// result := false ;
40282: LD_ADDR_VAR 0 3
40286: PUSH
40287: LD_INT 0
40289: ST_TO_ADDR
// end else
40290: GO 40300
// result := false ;
40292: LD_ADDR_VAR 0 3
40296: PUSH
40297: LD_INT 0
40299: ST_TO_ADDR
// end ;
40300: LD_VAR 0 3
40304: RET
// export function HealTarget ( sci ) ; begin
40305: LD_INT 0
40307: PPUSH
// if not sci then
40308: LD_VAR 0 1
40312: NOT
40313: IFFALSE 40317
// exit ;
40315: GO 40382
// result := 0 ;
40317: LD_ADDR_VAR 0 2
40321: PUSH
40322: LD_INT 0
40324: ST_TO_ADDR
// if GetTaskList ( sci ) then
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 437
40334: IFFALSE 40382
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
40336: LD_VAR 0 1
40340: PPUSH
40341: CALL_OW 437
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: PUSH
40350: LD_INT 1
40352: ARRAY
40353: PUSH
40354: LD_STRING l
40356: EQUAL
40357: IFFALSE 40382
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
40359: LD_ADDR_VAR 0 2
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: CALL_OW 437
40373: PUSH
40374: LD_INT 1
40376: ARRAY
40377: PUSH
40378: LD_INT 4
40380: ARRAY
40381: ST_TO_ADDR
// end ;
40382: LD_VAR 0 2
40386: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
40387: LD_INT 0
40389: PPUSH
40390: PPUSH
40391: PPUSH
40392: PPUSH
// if not base_units then
40393: LD_VAR 0 1
40397: NOT
40398: IFFALSE 40402
// exit ;
40400: GO 40489
// result := false ;
40402: LD_ADDR_VAR 0 2
40406: PUSH
40407: LD_INT 0
40409: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
40410: LD_ADDR_VAR 0 5
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: LD_INT 21
40422: PUSH
40423: LD_INT 3
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PPUSH
40430: CALL_OW 72
40434: ST_TO_ADDR
// if not tmp then
40435: LD_VAR 0 5
40439: NOT
40440: IFFALSE 40444
// exit ;
40442: GO 40489
// for i in tmp do
40444: LD_ADDR_VAR 0 3
40448: PUSH
40449: LD_VAR 0 5
40453: PUSH
40454: FOR_IN
40455: IFFALSE 40487
// begin result := EnemyInRange ( i , 22 ) ;
40457: LD_ADDR_VAR 0 2
40461: PUSH
40462: LD_VAR 0 3
40466: PPUSH
40467: LD_INT 22
40469: PPUSH
40470: CALL 37904 0 2
40474: ST_TO_ADDR
// if result then
40475: LD_VAR 0 2
40479: IFFALSE 40485
// exit ;
40481: POP
40482: POP
40483: GO 40489
// end ;
40485: GO 40454
40487: POP
40488: POP
// end ;
40489: LD_VAR 0 2
40493: RET
// export function FilterByTag ( units , tag ) ; begin
40494: LD_INT 0
40496: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: LD_INT 120
40509: PUSH
40510: LD_VAR 0 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PPUSH
40519: CALL_OW 72
40523: ST_TO_ADDR
// end ;
40524: LD_VAR 0 3
40528: RET
// export function IsDriver ( un ) ; begin
40529: LD_INT 0
40531: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40532: LD_ADDR_VAR 0 2
40536: PUSH
40537: LD_VAR 0 1
40541: PUSH
40542: LD_INT 55
40544: PUSH
40545: EMPTY
40546: LIST
40547: PPUSH
40548: CALL_OW 69
40552: IN
40553: ST_TO_ADDR
// end ;
40554: LD_VAR 0 2
40558: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40559: LD_INT 0
40561: PPUSH
40562: PPUSH
// list := [ ] ;
40563: LD_ADDR_VAR 0 5
40567: PUSH
40568: EMPTY
40569: ST_TO_ADDR
// case d of 0 :
40570: LD_VAR 0 3
40574: PUSH
40575: LD_INT 0
40577: DOUBLE
40578: EQUAL
40579: IFTRUE 40583
40581: GO 40716
40583: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40584: LD_ADDR_VAR 0 5
40588: PUSH
40589: LD_VAR 0 1
40593: PUSH
40594: LD_INT 4
40596: MINUS
40597: PUSH
40598: LD_VAR 0 2
40602: PUSH
40603: LD_INT 4
40605: MINUS
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: LD_VAR 0 1
40619: PUSH
40620: LD_INT 3
40622: MINUS
40623: PUSH
40624: LD_VAR 0 2
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: LIST
40636: PUSH
40637: LD_VAR 0 1
40641: PUSH
40642: LD_INT 4
40644: PLUS
40645: PUSH
40646: LD_VAR 0 2
40650: PUSH
40651: LD_INT 4
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: PUSH
40659: LD_VAR 0 1
40663: PUSH
40664: LD_INT 3
40666: PLUS
40667: PUSH
40668: LD_VAR 0 2
40672: PUSH
40673: LD_INT 3
40675: PLUS
40676: PUSH
40677: LD_INT 5
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: PUSH
40685: LD_VAR 0 1
40689: PUSH
40690: LD_VAR 0 2
40694: PUSH
40695: LD_INT 4
40697: PLUS
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// end ; 1 :
40714: GO 41414
40716: LD_INT 1
40718: DOUBLE
40719: EQUAL
40720: IFTRUE 40724
40722: GO 40857
40724: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40725: LD_ADDR_VAR 0 5
40729: PUSH
40730: LD_VAR 0 1
40734: PUSH
40735: LD_VAR 0 2
40739: PUSH
40740: LD_INT 4
40742: MINUS
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: PUSH
40752: LD_VAR 0 1
40756: PUSH
40757: LD_INT 3
40759: MINUS
40760: PUSH
40761: LD_VAR 0 2
40765: PUSH
40766: LD_INT 3
40768: MINUS
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: PUSH
40778: LD_VAR 0 1
40782: PUSH
40783: LD_INT 4
40785: MINUS
40786: PUSH
40787: LD_VAR 0 2
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: PUSH
40800: LD_VAR 0 1
40804: PUSH
40805: LD_VAR 0 2
40809: PUSH
40810: LD_INT 3
40812: PLUS
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: PUSH
40822: LD_VAR 0 1
40826: PUSH
40827: LD_INT 4
40829: PLUS
40830: PUSH
40831: LD_VAR 0 2
40835: PUSH
40836: LD_INT 4
40838: PLUS
40839: PUSH
40840: LD_INT 5
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// end ; 2 :
40855: GO 41414
40857: LD_INT 2
40859: DOUBLE
40860: EQUAL
40861: IFTRUE 40865
40863: GO 40994
40865: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40866: LD_ADDR_VAR 0 5
40870: PUSH
40871: LD_VAR 0 1
40875: PUSH
40876: LD_VAR 0 2
40880: PUSH
40881: LD_INT 3
40883: MINUS
40884: PUSH
40885: LD_INT 3
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: LIST
40892: PUSH
40893: LD_VAR 0 1
40897: PUSH
40898: LD_INT 4
40900: PLUS
40901: PUSH
40902: LD_VAR 0 2
40906: PUSH
40907: LD_INT 4
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: LIST
40914: PUSH
40915: LD_VAR 0 1
40919: PUSH
40920: LD_VAR 0 2
40924: PUSH
40925: LD_INT 4
40927: PLUS
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: PUSH
40937: LD_VAR 0 1
40941: PUSH
40942: LD_INT 3
40944: MINUS
40945: PUSH
40946: LD_VAR 0 2
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: PUSH
40959: LD_VAR 0 1
40963: PUSH
40964: LD_INT 4
40966: MINUS
40967: PUSH
40968: LD_VAR 0 2
40972: PUSH
40973: LD_INT 4
40975: MINUS
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
// end ; 3 :
40992: GO 41414
40994: LD_INT 3
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41002
41000: GO 41135
41002: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41003: LD_ADDR_VAR 0 5
41007: PUSH
41008: LD_VAR 0 1
41012: PUSH
41013: LD_INT 3
41015: PLUS
41016: PUSH
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 4
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: PUSH
41030: LD_VAR 0 1
41034: PUSH
41035: LD_INT 4
41037: PLUS
41038: PUSH
41039: LD_VAR 0 2
41043: PUSH
41044: LD_INT 4
41046: PLUS
41047: PUSH
41048: LD_INT 5
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: PUSH
41056: LD_VAR 0 1
41060: PUSH
41061: LD_INT 4
41063: MINUS
41064: PUSH
41065: LD_VAR 0 2
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: PUSH
41078: LD_VAR 0 1
41082: PUSH
41083: LD_VAR 0 2
41087: PUSH
41088: LD_INT 4
41090: MINUS
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: PUSH
41100: LD_VAR 0 1
41104: PUSH
41105: LD_INT 3
41107: MINUS
41108: PUSH
41109: LD_VAR 0 2
41113: PUSH
41114: LD_INT 3
41116: MINUS
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// end ; 4 :
41133: GO 41414
41135: LD_INT 4
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41143
41141: GO 41276
41143: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
41144: LD_ADDR_VAR 0 5
41148: PUSH
41149: LD_VAR 0 1
41153: PUSH
41154: LD_VAR 0 2
41158: PUSH
41159: LD_INT 4
41161: PLUS
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: PUSH
41171: LD_VAR 0 1
41175: PUSH
41176: LD_INT 3
41178: PLUS
41179: PUSH
41180: LD_VAR 0 2
41184: PUSH
41185: LD_INT 3
41187: PLUS
41188: PUSH
41189: LD_INT 5
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: PUSH
41197: LD_VAR 0 1
41201: PUSH
41202: LD_INT 4
41204: PLUS
41205: PUSH
41206: LD_VAR 0 2
41210: PUSH
41211: LD_INT 4
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: PUSH
41219: LD_VAR 0 1
41223: PUSH
41224: LD_VAR 0 2
41228: PUSH
41229: LD_INT 3
41231: MINUS
41232: PUSH
41233: LD_INT 3
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: PUSH
41241: LD_VAR 0 1
41245: PUSH
41246: LD_INT 4
41248: MINUS
41249: PUSH
41250: LD_VAR 0 2
41254: PUSH
41255: LD_INT 4
41257: MINUS
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: ST_TO_ADDR
// end ; 5 :
41274: GO 41414
41276: LD_INT 5
41278: DOUBLE
41279: EQUAL
41280: IFTRUE 41284
41282: GO 41413
41284: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
41285: LD_ADDR_VAR 0 5
41289: PUSH
41290: LD_VAR 0 1
41294: PUSH
41295: LD_INT 4
41297: MINUS
41298: PUSH
41299: LD_VAR 0 2
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: LD_VAR 0 1
41316: PUSH
41317: LD_VAR 0 2
41321: PUSH
41322: LD_INT 4
41324: MINUS
41325: PUSH
41326: LD_INT 3
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: PUSH
41334: LD_VAR 0 1
41338: PUSH
41339: LD_INT 4
41341: PLUS
41342: PUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_INT 4
41350: PLUS
41351: PUSH
41352: LD_INT 5
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: PUSH
41360: LD_VAR 0 1
41364: PUSH
41365: LD_INT 3
41367: PLUS
41368: PUSH
41369: LD_VAR 0 2
41373: PUSH
41374: LD_INT 4
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: PUSH
41382: LD_VAR 0 1
41386: PUSH
41387: LD_VAR 0 2
41391: PUSH
41392: LD_INT 3
41394: PLUS
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// end ; end ;
41411: GO 41414
41413: POP
// result := list ;
41414: LD_ADDR_VAR 0 4
41418: PUSH
41419: LD_VAR 0 5
41423: ST_TO_ADDR
// end ;
41424: LD_VAR 0 4
41428: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
41429: LD_INT 0
41431: PPUSH
41432: PPUSH
41433: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
41434: LD_VAR 0 1
41438: NOT
41439: IFTRUE 41467
41441: PUSH
41442: LD_VAR 0 2
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 3
41455: PUSH
41456: LD_INT 4
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: IN
41465: NOT
41466: OR
41467: IFFALSE 41471
// exit ;
41469: GO 41554
// tmp := [ ] ;
41471: LD_ADDR_VAR 0 5
41475: PUSH
41476: EMPTY
41477: ST_TO_ADDR
// for i in units do
41478: LD_ADDR_VAR 0 4
41482: PUSH
41483: LD_VAR 0 1
41487: PUSH
41488: FOR_IN
41489: IFFALSE 41523
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
41491: LD_ADDR_VAR 0 5
41495: PUSH
41496: LD_VAR 0 5
41500: PPUSH
41501: LD_VAR 0 4
41505: PPUSH
41506: LD_VAR 0 2
41510: PPUSH
41511: CALL_OW 259
41515: PPUSH
41516: CALL 42949 0 2
41520: ST_TO_ADDR
41521: GO 41488
41523: POP
41524: POP
// if not tmp then
41525: LD_VAR 0 5
41529: NOT
41530: IFFALSE 41534
// exit ;
41532: GO 41554
// result := SortListByListDesc ( units , tmp ) ;
41534: LD_ADDR_VAR 0 3
41538: PUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: LD_VAR 0 5
41548: PPUSH
41549: CALL_OW 77
41553: ST_TO_ADDR
// end ;
41554: LD_VAR 0 3
41558: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41559: LD_INT 0
41561: PPUSH
41562: PPUSH
41563: PPUSH
// result := false ;
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_INT 0
41571: ST_TO_ADDR
// if not building then
41572: LD_VAR 0 2
41576: NOT
41577: IFFALSE 41581
// exit ;
41579: GO 41725
// x := GetX ( building ) ;
41581: LD_ADDR_VAR 0 4
41585: PUSH
41586: LD_VAR 0 2
41590: PPUSH
41591: CALL_OW 250
41595: ST_TO_ADDR
// y := GetY ( building ) ;
41596: LD_ADDR_VAR 0 5
41600: PUSH
41601: LD_VAR 0 2
41605: PPUSH
41606: CALL_OW 251
41610: ST_TO_ADDR
// if not x or not y then
41611: LD_VAR 0 4
41615: NOT
41616: IFTRUE 41625
41618: PUSH
41619: LD_VAR 0 5
41623: NOT
41624: OR
41625: IFFALSE 41629
// exit ;
41627: GO 41725
// if GetTaskList ( unit ) then
41629: LD_VAR 0 1
41633: PPUSH
41634: CALL_OW 437
41638: IFFALSE 41725
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41640: LD_STRING e
41642: PUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 437
41652: PUSH
41653: LD_INT 1
41655: ARRAY
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: EQUAL
41661: IFFALSE 41688
41663: PUSH
41664: LD_VAR 0 4
41668: PUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: CALL_OW 437
41678: PUSH
41679: LD_INT 1
41681: ARRAY
41682: PUSH
41683: LD_INT 2
41685: ARRAY
41686: EQUAL
41687: AND
41688: IFFALSE 41715
41690: PUSH
41691: LD_VAR 0 5
41695: PUSH
41696: LD_VAR 0 1
41700: PPUSH
41701: CALL_OW 437
41705: PUSH
41706: LD_INT 1
41708: ARRAY
41709: PUSH
41710: LD_INT 3
41712: ARRAY
41713: EQUAL
41714: AND
41715: IFFALSE 41725
// result := true end ;
41717: LD_ADDR_VAR 0 3
41721: PUSH
41722: LD_INT 1
41724: ST_TO_ADDR
// end ;
41725: LD_VAR 0 3
41729: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41730: LD_INT 0
41732: PPUSH
// result := false ;
41733: LD_ADDR_VAR 0 4
41737: PUSH
41738: LD_INT 0
41740: ST_TO_ADDR
// if GetTaskList ( unit ) then
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 437
41750: IFFALSE 41837
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41752: LD_STRING M
41754: PUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 437
41764: PUSH
41765: LD_INT 1
41767: ARRAY
41768: PUSH
41769: LD_INT 1
41771: ARRAY
41772: EQUAL
41773: IFFALSE 41800
41775: PUSH
41776: LD_VAR 0 2
41780: PUSH
41781: LD_VAR 0 1
41785: PPUSH
41786: CALL_OW 437
41790: PUSH
41791: LD_INT 1
41793: ARRAY
41794: PUSH
41795: LD_INT 2
41797: ARRAY
41798: EQUAL
41799: AND
41800: IFFALSE 41827
41802: PUSH
41803: LD_VAR 0 3
41807: PUSH
41808: LD_VAR 0 1
41812: PPUSH
41813: CALL_OW 437
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PUSH
41822: LD_INT 3
41824: ARRAY
41825: EQUAL
41826: AND
41827: IFFALSE 41837
// result := true ;
41829: LD_ADDR_VAR 0 4
41833: PUSH
41834: LD_INT 1
41836: ST_TO_ADDR
// end ; end ;
41837: LD_VAR 0 4
41841: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41842: LD_INT 0
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
// if not unit or not area then
41848: LD_VAR 0 1
41852: NOT
41853: IFTRUE 41862
41855: PUSH
41856: LD_VAR 0 2
41860: NOT
41861: OR
41862: IFFALSE 41866
// exit ;
41864: GO 42042
// tmp := AreaToList ( area , i ) ;
41866: LD_ADDR_VAR 0 6
41870: PUSH
41871: LD_VAR 0 2
41875: PPUSH
41876: LD_VAR 0 5
41880: PPUSH
41881: CALL_OW 517
41885: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41886: LD_ADDR_VAR 0 5
41890: PUSH
41891: DOUBLE
41892: LD_INT 1
41894: DEC
41895: ST_TO_ADDR
41896: LD_VAR 0 6
41900: PUSH
41901: LD_INT 1
41903: ARRAY
41904: PUSH
41905: FOR_TO
41906: IFFALSE 42040
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41908: LD_ADDR_VAR 0 7
41912: PUSH
41913: LD_VAR 0 6
41917: PUSH
41918: LD_INT 1
41920: ARRAY
41921: PUSH
41922: LD_VAR 0 5
41926: ARRAY
41927: PUSH
41928: LD_VAR 0 6
41932: PUSH
41933: LD_INT 2
41935: ARRAY
41936: PUSH
41937: LD_VAR 0 5
41941: ARRAY
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
41947: LD_INT 92
41949: PUSH
41950: LD_VAR 0 7
41954: PUSH
41955: LD_INT 1
41957: ARRAY
41958: PUSH
41959: LD_VAR 0 7
41963: PUSH
41964: LD_INT 2
41966: ARRAY
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: PPUSH
41977: CALL_OW 69
41981: PUSH
41982: LD_INT 0
41984: EQUAL
41985: IFFALSE 42038
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41987: LD_VAR 0 1
41991: PPUSH
41992: LD_VAR 0 7
41996: PUSH
41997: LD_INT 1
41999: ARRAY
42000: PPUSH
42001: LD_VAR 0 7
42005: PUSH
42006: LD_INT 2
42008: ARRAY
42009: PPUSH
42010: LD_VAR 0 3
42014: PPUSH
42015: CALL_OW 48
// result := IsPlaced ( unit ) ;
42019: LD_ADDR_VAR 0 4
42023: PUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 305
42033: ST_TO_ADDR
// exit ;
42034: POP
42035: POP
42036: GO 42042
// end ; end ;
42038: GO 41905
42040: POP
42041: POP
// end ;
42042: LD_VAR 0 4
42046: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42047: LD_INT 0
42049: PPUSH
42050: PPUSH
42051: PPUSH
// if not side or side > 8 then
42052: LD_VAR 0 1
42056: NOT
42057: IFTRUE 42069
42059: PUSH
42060: LD_VAR 0 1
42064: PUSH
42065: LD_INT 8
42067: GREATER
42068: OR
42069: IFFALSE 42073
// exit ;
42071: GO 42260
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42073: LD_ADDR_VAR 0 4
42077: PUSH
42078: LD_INT 22
42080: PUSH
42081: LD_VAR 0 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 21
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PPUSH
42104: CALL_OW 69
42108: ST_TO_ADDR
// if not tmp then
42109: LD_VAR 0 4
42113: NOT
42114: IFFALSE 42118
// exit ;
42116: GO 42260
// enable_addtolog := true ;
42118: LD_ADDR_OWVAR 81
42122: PUSH
42123: LD_INT 1
42125: ST_TO_ADDR
// AddToLog ( [ ) ;
42126: LD_STRING [
42128: PPUSH
42129: CALL_OW 561
// for i in tmp do
42133: LD_ADDR_VAR 0 3
42137: PUSH
42138: LD_VAR 0 4
42142: PUSH
42143: FOR_IN
42144: IFFALSE 42251
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
42146: LD_STRING [
42148: PUSH
42149: LD_VAR 0 3
42153: PPUSH
42154: CALL_OW 266
42158: STR
42159: PUSH
42160: LD_STRING , 
42162: STR
42163: PUSH
42164: LD_VAR 0 3
42168: PPUSH
42169: CALL_OW 250
42173: STR
42174: PUSH
42175: LD_STRING , 
42177: STR
42178: PUSH
42179: LD_VAR 0 3
42183: PPUSH
42184: CALL_OW 251
42188: STR
42189: PUSH
42190: LD_STRING , 
42192: STR
42193: PUSH
42194: LD_VAR 0 3
42198: PPUSH
42199: CALL_OW 254
42203: STR
42204: PUSH
42205: LD_STRING , 
42207: STR
42208: PUSH
42209: LD_VAR 0 3
42213: PPUSH
42214: LD_INT 1
42216: PPUSH
42217: CALL_OW 268
42221: STR
42222: PUSH
42223: LD_STRING , 
42225: STR
42226: PUSH
42227: LD_VAR 0 3
42231: PPUSH
42232: LD_INT 2
42234: PPUSH
42235: CALL_OW 268
42239: STR
42240: PUSH
42241: LD_STRING ],
42243: STR
42244: PPUSH
42245: CALL_OW 561
// end ;
42249: GO 42143
42251: POP
42252: POP
// AddToLog ( ]; ) ;
42253: LD_STRING ];
42255: PPUSH
42256: CALL_OW 561
// end ;
42260: LD_VAR 0 2
42264: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
42265: LD_INT 0
42267: PPUSH
42268: PPUSH
42269: PPUSH
42270: PPUSH
42271: PPUSH
// if not area or not rate or not max then
42272: LD_VAR 0 1
42276: NOT
42277: IFTRUE 42286
42279: PUSH
42280: LD_VAR 0 2
42284: NOT
42285: OR
42286: IFTRUE 42295
42288: PUSH
42289: LD_VAR 0 4
42293: NOT
42294: OR
42295: IFFALSE 42299
// exit ;
42297: GO 42488
// while 1 do
42299: LD_INT 1
42301: IFFALSE 42488
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
42303: LD_ADDR_VAR 0 9
42307: PUSH
42308: LD_VAR 0 1
42312: PPUSH
42313: LD_INT 1
42315: PPUSH
42316: CALL_OW 287
42320: PUSH
42321: LD_INT 10
42323: MUL
42324: ST_TO_ADDR
// r := rate / 10 ;
42325: LD_ADDR_VAR 0 7
42329: PUSH
42330: LD_VAR 0 2
42334: PUSH
42335: LD_INT 10
42337: DIVREAL
42338: ST_TO_ADDR
// time := 1 1$00 ;
42339: LD_ADDR_VAR 0 8
42343: PUSH
42344: LD_INT 2100
42346: ST_TO_ADDR
// if amount < min then
42347: LD_VAR 0 9
42351: PUSH
42352: LD_VAR 0 3
42356: LESS
42357: IFFALSE 42375
// r := r * 2 else
42359: LD_ADDR_VAR 0 7
42363: PUSH
42364: LD_VAR 0 7
42368: PUSH
42369: LD_INT 2
42371: MUL
42372: ST_TO_ADDR
42373: GO 42401
// if amount > max then
42375: LD_VAR 0 9
42379: PUSH
42380: LD_VAR 0 4
42384: GREATER
42385: IFFALSE 42401
// r := r / 2 ;
42387: LD_ADDR_VAR 0 7
42391: PUSH
42392: LD_VAR 0 7
42396: PUSH
42397: LD_INT 2
42399: DIVREAL
42400: ST_TO_ADDR
// time := time / r ;
42401: LD_ADDR_VAR 0 8
42405: PUSH
42406: LD_VAR 0 8
42410: PUSH
42411: LD_VAR 0 7
42415: DIVREAL
42416: ST_TO_ADDR
// if time < 0 then
42417: LD_VAR 0 8
42421: PUSH
42422: LD_INT 0
42424: LESS
42425: IFFALSE 42442
// time := time * - 1 ;
42427: LD_ADDR_VAR 0 8
42431: PUSH
42432: LD_VAR 0 8
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: MUL
42441: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
42442: LD_VAR 0 8
42446: PUSH
42447: LD_INT 35
42449: PPUSH
42450: LD_INT 875
42452: PPUSH
42453: CALL_OW 12
42457: PLUS
42458: PPUSH
42459: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
42463: LD_INT 1
42465: PPUSH
42466: LD_INT 5
42468: PPUSH
42469: CALL_OW 12
42473: PPUSH
42474: LD_VAR 0 1
42478: PPUSH
42479: LD_INT 1
42481: PPUSH
42482: CALL_OW 55
// end ;
42486: GO 42299
// end ;
42488: LD_VAR 0 5
42492: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
42493: LD_INT 0
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
// if not turrets or not factories then
42503: LD_VAR 0 1
42507: NOT
42508: IFTRUE 42517
42510: PUSH
42511: LD_VAR 0 2
42515: NOT
42516: OR
42517: IFFALSE 42521
// exit ;
42519: GO 42828
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
42521: LD_ADDR_VAR 0 10
42525: PUSH
42526: LD_INT 5
42528: PUSH
42529: LD_INT 6
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 4
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 5
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 24
42563: PUSH
42564: LD_INT 25
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 23
42573: PUSH
42574: LD_INT 27
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 42
42587: PUSH
42588: LD_INT 43
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 44
42597: PUSH
42598: LD_INT 46
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 45
42607: PUSH
42608: LD_INT 47
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// result := [ ] ;
42625: LD_ADDR_VAR 0 3
42629: PUSH
42630: EMPTY
42631: ST_TO_ADDR
// for i in turrets do
42632: LD_ADDR_VAR 0 4
42636: PUSH
42637: LD_VAR 0 1
42641: PUSH
42642: FOR_IN
42643: IFFALSE 42826
// begin nat := GetNation ( i ) ;
42645: LD_ADDR_VAR 0 7
42649: PUSH
42650: LD_VAR 0 4
42654: PPUSH
42655: CALL_OW 248
42659: ST_TO_ADDR
// weapon := 0 ;
42660: LD_ADDR_VAR 0 8
42664: PUSH
42665: LD_INT 0
42667: ST_TO_ADDR
// if not nat then
42668: LD_VAR 0 7
42672: NOT
42673: IFFALSE 42677
// continue ;
42675: GO 42642
// for j in list [ nat ] do
42677: LD_ADDR_VAR 0 5
42681: PUSH
42682: LD_VAR 0 10
42686: PUSH
42687: LD_VAR 0 7
42691: ARRAY
42692: PUSH
42693: FOR_IN
42694: IFFALSE 42735
// if GetBWeapon ( i ) = j [ 1 ] then
42696: LD_VAR 0 4
42700: PPUSH
42701: CALL_OW 269
42705: PUSH
42706: LD_VAR 0 5
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: EQUAL
42715: IFFALSE 42733
// begin weapon := j [ 2 ] ;
42717: LD_ADDR_VAR 0 8
42721: PUSH
42722: LD_VAR 0 5
42726: PUSH
42727: LD_INT 2
42729: ARRAY
42730: ST_TO_ADDR
// break ;
42731: GO 42735
// end ;
42733: GO 42693
42735: POP
42736: POP
// if not weapon then
42737: LD_VAR 0 8
42741: NOT
42742: IFFALSE 42746
// continue ;
42744: GO 42642
// for k in factories do
42746: LD_ADDR_VAR 0 6
42750: PUSH
42751: LD_VAR 0 2
42755: PUSH
42756: FOR_IN
42757: IFFALSE 42822
// begin weapons := AvailableWeaponList ( k ) ;
42759: LD_ADDR_VAR 0 9
42763: PUSH
42764: LD_VAR 0 6
42768: PPUSH
42769: CALL_OW 478
42773: ST_TO_ADDR
// if not weapons then
42774: LD_VAR 0 9
42778: NOT
42779: IFFALSE 42783
// continue ;
42781: GO 42756
// if weapon in weapons then
42783: LD_VAR 0 8
42787: PUSH
42788: LD_VAR 0 9
42792: IN
42793: IFFALSE 42820
// begin result := [ i , weapon ] ;
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_VAR 0 4
42804: PUSH
42805: LD_VAR 0 8
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: ST_TO_ADDR
// exit ;
42814: POP
42815: POP
42816: POP
42817: POP
42818: GO 42828
// end ; end ;
42820: GO 42756
42822: POP
42823: POP
// end ;
42824: GO 42642
42826: POP
42827: POP
// end ;
42828: LD_VAR 0 3
42832: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42833: LD_INT 0
42835: PPUSH
// if not side or side > 8 then
42836: LD_VAR 0 3
42840: NOT
42841: IFTRUE 42853
42843: PUSH
42844: LD_VAR 0 3
42848: PUSH
42849: LD_INT 8
42851: GREATER
42852: OR
42853: IFFALSE 42857
// exit ;
42855: GO 42916
// if not range then
42857: LD_VAR 0 4
42861: NOT
42862: IFFALSE 42873
// range := - 12 ;
42864: LD_ADDR_VAR 0 4
42868: PUSH
42869: LD_INT 12
42871: NEG
42872: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42873: LD_VAR 0 1
42877: PPUSH
42878: LD_VAR 0 2
42882: PPUSH
42883: LD_VAR 0 3
42887: PPUSH
42888: LD_VAR 0 4
42892: PPUSH
42893: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42897: LD_VAR 0 1
42901: PPUSH
42902: LD_VAR 0 2
42906: PPUSH
42907: LD_VAR 0 3
42911: PPUSH
42912: CALL_OW 331
// end ;
42916: LD_VAR 0 5
42920: RET
// export function Video ( mode ) ; begin
42921: LD_INT 0
42923: PPUSH
// ingame_video = mode ;
42924: LD_ADDR_OWVAR 52
42928: PUSH
42929: LD_VAR 0 1
42933: ST_TO_ADDR
// interface_hidden = mode ;
42934: LD_ADDR_OWVAR 54
42938: PUSH
42939: LD_VAR 0 1
42943: ST_TO_ADDR
// end ;
42944: LD_VAR 0 2
42948: RET
// export function Join ( array , element ) ; begin
42949: LD_INT 0
42951: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_VAR 0 1
42961: PPUSH
42962: LD_VAR 0 1
42966: PUSH
42967: LD_INT 1
42969: PLUS
42970: PPUSH
42971: LD_VAR 0 2
42975: PPUSH
42976: CALL_OW 1
42980: ST_TO_ADDR
// end ;
42981: LD_VAR 0 3
42985: RET
// export function JoinUnion ( array , element ) ; begin
42986: LD_INT 0
42988: PPUSH
// result := array union element ;
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_VAR 0 1
42998: PUSH
42999: LD_VAR 0 2
43003: UNION
43004: ST_TO_ADDR
// end ;
43005: LD_VAR 0 3
43009: RET
// export function GetBehemoths ( side ) ; begin
43010: LD_INT 0
43012: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
43013: LD_ADDR_VAR 0 2
43017: PUSH
43018: LD_INT 22
43020: PUSH
43021: LD_VAR 0 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 31
43032: PUSH
43033: LD_INT 25
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PPUSH
43044: CALL_OW 69
43048: ST_TO_ADDR
// end ;
43049: LD_VAR 0 2
43053: RET
// export function Shuffle ( array ) ; var i , index ; begin
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
43058: PPUSH
// result := [ ] ;
43059: LD_ADDR_VAR 0 2
43063: PUSH
43064: EMPTY
43065: ST_TO_ADDR
// if not array then
43066: LD_VAR 0 1
43070: NOT
43071: IFFALSE 43075
// exit ;
43073: GO 43174
// Randomize ;
43075: CALL_OW 10
// for i = array downto 1 do
43079: LD_ADDR_VAR 0 3
43083: PUSH
43084: DOUBLE
43085: LD_VAR 0 1
43089: INC
43090: ST_TO_ADDR
43091: LD_INT 1
43093: PUSH
43094: FOR_DOWNTO
43095: IFFALSE 43172
// begin index := rand ( 1 , array ) ;
43097: LD_ADDR_VAR 0 4
43101: PUSH
43102: LD_INT 1
43104: PPUSH
43105: LD_VAR 0 1
43109: PPUSH
43110: CALL_OW 12
43114: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43115: LD_ADDR_VAR 0 2
43119: PUSH
43120: LD_VAR 0 2
43124: PPUSH
43125: LD_VAR 0 2
43129: PUSH
43130: LD_INT 1
43132: PLUS
43133: PPUSH
43134: LD_VAR 0 1
43138: PUSH
43139: LD_VAR 0 4
43143: ARRAY
43144: PPUSH
43145: CALL_OW 2
43149: ST_TO_ADDR
// array := Delete ( array , index ) ;
43150: LD_ADDR_VAR 0 1
43154: PUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: LD_VAR 0 4
43164: PPUSH
43165: CALL_OW 3
43169: ST_TO_ADDR
// end ;
43170: GO 43094
43172: POP
43173: POP
// end ;
43174: LD_VAR 0 2
43178: RET
// export function GetBaseMaterials ( base ) ; begin
43179: LD_INT 0
43181: PPUSH
// result := [ 0 , 0 , 0 ] ;
43182: LD_ADDR_VAR 0 2
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// if not base then
43201: LD_VAR 0 1
43205: NOT
43206: IFFALSE 43210
// exit ;
43208: GO 43259
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
43210: LD_ADDR_VAR 0 2
43214: PUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: LD_INT 1
43222: PPUSH
43223: CALL_OW 275
43227: PUSH
43228: LD_VAR 0 1
43232: PPUSH
43233: LD_INT 2
43235: PPUSH
43236: CALL_OW 275
43240: PUSH
43241: LD_VAR 0 1
43245: PPUSH
43246: LD_INT 3
43248: PPUSH
43249: CALL_OW 275
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: ST_TO_ADDR
// end ;
43259: LD_VAR 0 2
43263: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
43264: LD_INT 0
43266: PPUSH
43267: PPUSH
// result := array ;
43268: LD_ADDR_VAR 0 3
43272: PUSH
43273: LD_VAR 0 1
43277: ST_TO_ADDR
// if size >= result then
43278: LD_VAR 0 2
43282: PUSH
43283: LD_VAR 0 3
43287: GREATEREQUAL
43288: IFFALSE 43292
// exit ;
43290: GO 43342
// if size then
43292: LD_VAR 0 2
43296: IFFALSE 43342
// for i := array downto size do
43298: LD_ADDR_VAR 0 4
43302: PUSH
43303: DOUBLE
43304: LD_VAR 0 1
43308: INC
43309: ST_TO_ADDR
43310: LD_VAR 0 2
43314: PUSH
43315: FOR_DOWNTO
43316: IFFALSE 43340
// result := Delete ( result , result ) ;
43318: LD_ADDR_VAR 0 3
43322: PUSH
43323: LD_VAR 0 3
43327: PPUSH
43328: LD_VAR 0 3
43332: PPUSH
43333: CALL_OW 3
43337: ST_TO_ADDR
43338: GO 43315
43340: POP
43341: POP
// end ;
43342: LD_VAR 0 3
43346: RET
// export function ComExit ( unit ) ; var tmp ; begin
43347: LD_INT 0
43349: PPUSH
43350: PPUSH
// if not IsInUnit ( unit ) then
43351: LD_VAR 0 1
43355: PPUSH
43356: CALL_OW 310
43360: NOT
43361: IFFALSE 43365
// exit ;
43363: GO 43425
// tmp := IsInUnit ( unit ) ;
43365: LD_ADDR_VAR 0 3
43369: PUSH
43370: LD_VAR 0 1
43374: PPUSH
43375: CALL_OW 310
43379: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
43380: LD_VAR 0 3
43384: PPUSH
43385: CALL_OW 247
43389: PUSH
43390: LD_INT 2
43392: EQUAL
43393: IFFALSE 43406
// ComExitVehicle ( unit ) else
43395: LD_VAR 0 1
43399: PPUSH
43400: CALL_OW 121
43404: GO 43415
// ComExitBuilding ( unit ) ;
43406: LD_VAR 0 1
43410: PPUSH
43411: CALL_OW 122
// result := tmp ;
43415: LD_ADDR_VAR 0 2
43419: PUSH
43420: LD_VAR 0 3
43424: ST_TO_ADDR
// end ;
43425: LD_VAR 0 2
43429: RET
// export function ComExitAll ( units ) ; var i ; begin
43430: LD_INT 0
43432: PPUSH
43433: PPUSH
// if not units then
43434: LD_VAR 0 1
43438: NOT
43439: IFFALSE 43443
// exit ;
43441: GO 43469
// for i in units do
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_VAR 0 1
43452: PUSH
43453: FOR_IN
43454: IFFALSE 43467
// ComExit ( i ) ;
43456: LD_VAR 0 3
43460: PPUSH
43461: CALL 43347 0 1
43465: GO 43453
43467: POP
43468: POP
// end ;
43469: LD_VAR 0 2
43473: RET
// export function ResetHc ; begin
43474: LD_INT 0
43476: PPUSH
// InitHc ;
43477: CALL_OW 19
// hc_importance := 0 ;
43481: LD_ADDR_OWVAR 32
43485: PUSH
43486: LD_INT 0
43488: ST_TO_ADDR
// end ;
43489: LD_VAR 0 1
43493: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
43494: LD_INT 0
43496: PPUSH
43497: PPUSH
43498: PPUSH
// _x := ( x1 + x2 ) div 2 ;
43499: LD_ADDR_VAR 0 6
43503: PUSH
43504: LD_VAR 0 1
43508: PUSH
43509: LD_VAR 0 3
43513: PLUS
43514: PUSH
43515: LD_INT 2
43517: DIV
43518: ST_TO_ADDR
// if _x < 0 then
43519: LD_VAR 0 6
43523: PUSH
43524: LD_INT 0
43526: LESS
43527: IFFALSE 43544
// _x := _x * - 1 ;
43529: LD_ADDR_VAR 0 6
43533: PUSH
43534: LD_VAR 0 6
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: MUL
43543: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43544: LD_ADDR_VAR 0 7
43548: PUSH
43549: LD_VAR 0 2
43553: PUSH
43554: LD_VAR 0 4
43558: PLUS
43559: PUSH
43560: LD_INT 2
43562: DIV
43563: ST_TO_ADDR
// if _y < 0 then
43564: LD_VAR 0 7
43568: PUSH
43569: LD_INT 0
43571: LESS
43572: IFFALSE 43589
// _y := _y * - 1 ;
43574: LD_ADDR_VAR 0 7
43578: PUSH
43579: LD_VAR 0 7
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: MUL
43588: ST_TO_ADDR
// result := [ _x , _y ] ;
43589: LD_ADDR_VAR 0 5
43593: PUSH
43594: LD_VAR 0 6
43598: PUSH
43599: LD_VAR 0 7
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: ST_TO_ADDR
// end ;
43608: LD_VAR 0 5
43612: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43613: LD_INT 0
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
// task := GetTaskList ( unit ) ;
43619: LD_ADDR_VAR 0 7
43623: PUSH
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 437
43633: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43634: LD_VAR 0 7
43638: NOT
43639: IFFALSE 43658
43641: PUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: LD_VAR 0 2
43651: PPUSH
43652: CALL_OW 308
43656: NOT
43657: AND
43658: IFFALSE 43662
// exit ;
43660: GO 43780
// if IsInArea ( unit , area ) then
43662: LD_VAR 0 1
43666: PPUSH
43667: LD_VAR 0 2
43671: PPUSH
43672: CALL_OW 308
43676: IFFALSE 43694
// begin ComMoveToArea ( unit , goAway ) ;
43678: LD_VAR 0 1
43682: PPUSH
43683: LD_VAR 0 3
43687: PPUSH
43688: CALL_OW 113
// exit ;
43692: GO 43780
// end ; if task [ 1 ] [ 1 ] <> M then
43694: LD_VAR 0 7
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: PUSH
43703: LD_INT 1
43705: ARRAY
43706: PUSH
43707: LD_STRING M
43709: NONEQUAL
43710: IFFALSE 43714
// exit ;
43712: GO 43780
// x := task [ 1 ] [ 2 ] ;
43714: LD_ADDR_VAR 0 5
43718: PUSH
43719: LD_VAR 0 7
43723: PUSH
43724: LD_INT 1
43726: ARRAY
43727: PUSH
43728: LD_INT 2
43730: ARRAY
43731: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43732: LD_ADDR_VAR 0 6
43736: PUSH
43737: LD_VAR 0 7
43741: PUSH
43742: LD_INT 1
43744: ARRAY
43745: PUSH
43746: LD_INT 3
43748: ARRAY
43749: ST_TO_ADDR
// if InArea ( x , y , area ) then
43750: LD_VAR 0 5
43754: PPUSH
43755: LD_VAR 0 6
43759: PPUSH
43760: LD_VAR 0 2
43764: PPUSH
43765: CALL_OW 309
43769: IFFALSE 43780
// ComStop ( unit ) ;
43771: LD_VAR 0 1
43775: PPUSH
43776: CALL_OW 141
// end ;
43780: LD_VAR 0 4
43784: RET
// export function Abs ( value ) ; begin
43785: LD_INT 0
43787: PPUSH
// result := value ;
43788: LD_ADDR_VAR 0 2
43792: PUSH
43793: LD_VAR 0 1
43797: ST_TO_ADDR
// if value < 0 then
43798: LD_VAR 0 1
43802: PUSH
43803: LD_INT 0
43805: LESS
43806: IFFALSE 43823
// result := value * - 1 ;
43808: LD_ADDR_VAR 0 2
43812: PUSH
43813: LD_VAR 0 1
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: MUL
43822: ST_TO_ADDR
// end ;
43823: LD_VAR 0 2
43827: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43828: LD_INT 0
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
// if not unit or not building then
43838: LD_VAR 0 1
43842: NOT
43843: IFTRUE 43852
43845: PUSH
43846: LD_VAR 0 2
43850: NOT
43851: OR
43852: IFFALSE 43856
// exit ;
43854: GO 44084
// x := GetX ( building ) ;
43856: LD_ADDR_VAR 0 4
43860: PUSH
43861: LD_VAR 0 2
43865: PPUSH
43866: CALL_OW 250
43870: ST_TO_ADDR
// y := GetY ( building ) ;
43871: LD_ADDR_VAR 0 6
43875: PUSH
43876: LD_VAR 0 2
43880: PPUSH
43881: CALL_OW 251
43885: ST_TO_ADDR
// d := GetDir ( building ) ;
43886: LD_ADDR_VAR 0 8
43890: PUSH
43891: LD_VAR 0 2
43895: PPUSH
43896: CALL_OW 254
43900: ST_TO_ADDR
// r := 4 ;
43901: LD_ADDR_VAR 0 9
43905: PUSH
43906: LD_INT 4
43908: ST_TO_ADDR
// for i := 1 to 5 do
43909: LD_ADDR_VAR 0 10
43913: PUSH
43914: DOUBLE
43915: LD_INT 1
43917: DEC
43918: ST_TO_ADDR
43919: LD_INT 5
43921: PUSH
43922: FOR_TO
43923: IFFALSE 44082
// begin _x := ShiftX ( x , d , r + i ) ;
43925: LD_ADDR_VAR 0 5
43929: PUSH
43930: LD_VAR 0 4
43934: PPUSH
43935: LD_VAR 0 8
43939: PPUSH
43940: LD_VAR 0 9
43944: PUSH
43945: LD_VAR 0 10
43949: PLUS
43950: PPUSH
43951: CALL_OW 272
43955: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43956: LD_ADDR_VAR 0 7
43960: PUSH
43961: LD_VAR 0 6
43965: PPUSH
43966: LD_VAR 0 8
43970: PPUSH
43971: LD_VAR 0 9
43975: PUSH
43976: LD_VAR 0 10
43980: PLUS
43981: PPUSH
43982: CALL_OW 273
43986: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43987: LD_VAR 0 5
43991: PPUSH
43992: LD_VAR 0 7
43996: PPUSH
43997: CALL_OW 488
44001: IFFALSE 44036
44003: PUSH
44004: LD_VAR 0 5
44008: PPUSH
44009: LD_VAR 0 7
44013: PPUSH
44014: CALL_OW 428
44018: PPUSH
44019: CALL_OW 247
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: IN
44034: NOT
44035: AND
44036: IFFALSE 44080
// begin ComMoveXY ( unit , _x , _y ) ;
44038: LD_VAR 0 1
44042: PPUSH
44043: LD_VAR 0 5
44047: PPUSH
44048: LD_VAR 0 7
44052: PPUSH
44053: CALL_OW 111
// result := [ _x , _y ] ;
44057: LD_ADDR_VAR 0 3
44061: PUSH
44062: LD_VAR 0 5
44066: PUSH
44067: LD_VAR 0 7
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: ST_TO_ADDR
// exit ;
44076: POP
44077: POP
44078: GO 44084
// end ; end ;
44080: GO 43922
44082: POP
44083: POP
// end ;
44084: LD_VAR 0 3
44088: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44089: LD_INT 0
44091: PPUSH
44092: PPUSH
44093: PPUSH
// result := 0 ;
44094: LD_ADDR_VAR 0 3
44098: PUSH
44099: LD_INT 0
44101: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44102: LD_VAR 0 1
44106: PUSH
44107: LD_INT 0
44109: LESS
44110: IFTRUE 44122
44112: PUSH
44113: LD_VAR 0 1
44117: PUSH
44118: LD_INT 8
44120: GREATER
44121: OR
44122: IFTRUE 44134
44124: PUSH
44125: LD_VAR 0 2
44129: PUSH
44130: LD_INT 0
44132: LESS
44133: OR
44134: IFTRUE 44146
44136: PUSH
44137: LD_VAR 0 2
44141: PUSH
44142: LD_INT 8
44144: GREATER
44145: OR
44146: IFFALSE 44150
// exit ;
44148: GO 44225
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
44150: LD_ADDR_VAR 0 4
44154: PUSH
44155: LD_INT 22
44157: PUSH
44158: LD_VAR 0 2
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PPUSH
44167: CALL_OW 69
44171: PUSH
44172: FOR_IN
44173: IFFALSE 44223
// begin un := UnitShoot ( i ) ;
44175: LD_ADDR_VAR 0 5
44179: PUSH
44180: LD_VAR 0 4
44184: PPUSH
44185: CALL_OW 504
44189: ST_TO_ADDR
// if GetSide ( un ) = side1 then
44190: LD_VAR 0 5
44194: PPUSH
44195: CALL_OW 255
44199: PUSH
44200: LD_VAR 0 1
44204: EQUAL
44205: IFFALSE 44221
// begin result := un ;
44207: LD_ADDR_VAR 0 3
44211: PUSH
44212: LD_VAR 0 5
44216: ST_TO_ADDR
// exit ;
44217: POP
44218: POP
44219: GO 44225
// end ; end ;
44221: GO 44172
44223: POP
44224: POP
// end ;
44225: LD_VAR 0 3
44229: RET
// export function GetCargoBay ( units ) ; begin
44230: LD_INT 0
44232: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
44233: LD_ADDR_VAR 0 2
44237: PUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 34
44248: PUSH
44249: LD_INT 12
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 34
44258: PUSH
44259: LD_INT 51
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 34
44268: PUSH
44269: LD_INT 32
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 34
44278: PUSH
44279: LD_INT 89
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: PPUSH
44293: CALL_OW 72
44297: ST_TO_ADDR
// end ;
44298: LD_VAR 0 2
44302: RET
// export function Negate ( value ) ; begin
44303: LD_INT 0
44305: PPUSH
// result := not value ;
44306: LD_ADDR_VAR 0 2
44310: PUSH
44311: LD_VAR 0 1
44315: NOT
44316: ST_TO_ADDR
// end ;
44317: LD_VAR 0 2
44321: RET
// export function Inc ( value ) ; begin
44322: LD_INT 0
44324: PPUSH
// result := value + 1 ;
44325: LD_ADDR_VAR 0 2
44329: PUSH
44330: LD_VAR 0 1
44334: PUSH
44335: LD_INT 1
44337: PLUS
44338: ST_TO_ADDR
// end ;
44339: LD_VAR 0 2
44343: RET
// export function Dec ( value ) ; begin
44344: LD_INT 0
44346: PPUSH
// result := value - 1 ;
44347: LD_ADDR_VAR 0 2
44351: PUSH
44352: LD_VAR 0 1
44356: PUSH
44357: LD_INT 1
44359: MINUS
44360: ST_TO_ADDR
// end ;
44361: LD_VAR 0 2
44365: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
44366: LD_INT 0
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
44376: LD_VAR 0 1
44380: PPUSH
44381: LD_VAR 0 2
44385: PPUSH
44386: CALL_OW 488
44390: NOT
44391: IFTRUE 44410
44393: PUSH
44394: LD_VAR 0 3
44398: PPUSH
44399: LD_VAR 0 4
44403: PPUSH
44404: CALL_OW 488
44408: NOT
44409: OR
44410: IFFALSE 44423
// begin result := - 1 ;
44412: LD_ADDR_VAR 0 5
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: ST_TO_ADDR
// exit ;
44421: GO 44658
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
44423: LD_ADDR_VAR 0 12
44427: PUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: LD_VAR 0 2
44437: PPUSH
44438: LD_VAR 0 3
44442: PPUSH
44443: LD_VAR 0 4
44447: PPUSH
44448: CALL 43494 0 4
44452: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
44453: LD_ADDR_VAR 0 11
44457: PUSH
44458: LD_VAR 0 1
44462: PPUSH
44463: LD_VAR 0 2
44467: PPUSH
44468: LD_VAR 0 12
44472: PUSH
44473: LD_INT 1
44475: ARRAY
44476: PPUSH
44477: LD_VAR 0 12
44481: PUSH
44482: LD_INT 2
44484: ARRAY
44485: PPUSH
44486: CALL_OW 298
44490: ST_TO_ADDR
// distance := 9999 ;
44491: LD_ADDR_VAR 0 10
44495: PUSH
44496: LD_INT 9999
44498: ST_TO_ADDR
// for i := 0 to 5 do
44499: LD_ADDR_VAR 0 6
44503: PUSH
44504: DOUBLE
44505: LD_INT 0
44507: DEC
44508: ST_TO_ADDR
44509: LD_INT 5
44511: PUSH
44512: FOR_TO
44513: IFFALSE 44656
// begin _x := ShiftX ( x1 , i , centerDist ) ;
44515: LD_ADDR_VAR 0 7
44519: PUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: LD_VAR 0 6
44529: PPUSH
44530: LD_VAR 0 11
44534: PPUSH
44535: CALL_OW 272
44539: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
44540: LD_ADDR_VAR 0 8
44544: PUSH
44545: LD_VAR 0 2
44549: PPUSH
44550: LD_VAR 0 6
44554: PPUSH
44555: LD_VAR 0 11
44559: PPUSH
44560: CALL_OW 273
44564: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44565: LD_VAR 0 7
44569: PPUSH
44570: LD_VAR 0 8
44574: PPUSH
44575: CALL_OW 488
44579: NOT
44580: IFFALSE 44584
// continue ;
44582: GO 44512
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44584: LD_ADDR_VAR 0 9
44588: PUSH
44589: LD_VAR 0 12
44593: PUSH
44594: LD_INT 1
44596: ARRAY
44597: PPUSH
44598: LD_VAR 0 12
44602: PUSH
44603: LD_INT 2
44605: ARRAY
44606: PPUSH
44607: LD_VAR 0 7
44611: PPUSH
44612: LD_VAR 0 8
44616: PPUSH
44617: CALL_OW 298
44621: ST_TO_ADDR
// if tmp < distance then
44622: LD_VAR 0 9
44626: PUSH
44627: LD_VAR 0 10
44631: LESS
44632: IFFALSE 44654
// begin result := i ;
44634: LD_ADDR_VAR 0 5
44638: PUSH
44639: LD_VAR 0 6
44643: ST_TO_ADDR
// distance := tmp ;
44644: LD_ADDR_VAR 0 10
44648: PUSH
44649: LD_VAR 0 9
44653: ST_TO_ADDR
// end ; end ;
44654: GO 44512
44656: POP
44657: POP
// end ;
44658: LD_VAR 0 5
44662: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44663: LD_INT 0
44665: PPUSH
44666: PPUSH
// if not driver or not IsInUnit ( driver ) then
44667: LD_VAR 0 1
44671: NOT
44672: IFTRUE 44686
44674: PUSH
44675: LD_VAR 0 1
44679: PPUSH
44680: CALL_OW 310
44684: NOT
44685: OR
44686: IFFALSE 44690
// exit ;
44688: GO 44780
// vehicle := IsInUnit ( driver ) ;
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_VAR 0 1
44699: PPUSH
44700: CALL_OW 310
44704: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44705: LD_VAR 0 1
44709: PPUSH
44710: LD_STRING \
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: PUSH
44740: LD_STRING E
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_VAR 0 3
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PPUSH
44776: CALL_OW 446
// end ;
44780: LD_VAR 0 2
44784: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44785: LD_INT 0
44787: PPUSH
44788: PPUSH
// if not driver or not IsInUnit ( driver ) then
44789: LD_VAR 0 1
44793: NOT
44794: IFTRUE 44808
44796: PUSH
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL_OW 310
44806: NOT
44807: OR
44808: IFFALSE 44812
// exit ;
44810: GO 44902
// vehicle := IsInUnit ( driver ) ;
44812: LD_ADDR_VAR 0 3
44816: PUSH
44817: LD_VAR 0 1
44821: PPUSH
44822: CALL_OW 310
44826: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44827: LD_VAR 0 1
44831: PPUSH
44832: LD_STRING \
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: PUSH
44862: LD_STRING E
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_VAR 0 3
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PPUSH
44898: CALL_OW 447
// end ;
44902: LD_VAR 0 2
44906: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44907: LD_INT 0
44909: PPUSH
44910: PPUSH
44911: PPUSH
// tmp := [ ] ;
44912: LD_ADDR_VAR 0 5
44916: PUSH
44917: EMPTY
44918: ST_TO_ADDR
// for i in units do
44919: LD_ADDR_VAR 0 4
44923: PUSH
44924: LD_VAR 0 1
44928: PUSH
44929: FOR_IN
44930: IFFALSE 44968
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44932: LD_ADDR_VAR 0 5
44936: PUSH
44937: LD_VAR 0 5
44941: PPUSH
44942: LD_VAR 0 5
44946: PUSH
44947: LD_INT 1
44949: PLUS
44950: PPUSH
44951: LD_VAR 0 4
44955: PPUSH
44956: CALL_OW 256
44960: PPUSH
44961: CALL_OW 2
44965: ST_TO_ADDR
44966: GO 44929
44968: POP
44969: POP
// if not tmp then
44970: LD_VAR 0 5
44974: NOT
44975: IFFALSE 44979
// exit ;
44977: GO 45027
// if asc then
44979: LD_VAR 0 2
44983: IFFALSE 45007
// result := SortListByListAsc ( units , tmp ) else
44985: LD_ADDR_VAR 0 3
44989: PUSH
44990: LD_VAR 0 1
44994: PPUSH
44995: LD_VAR 0 5
44999: PPUSH
45000: CALL_OW 76
45004: ST_TO_ADDR
45005: GO 45027
// result := SortListByListDesc ( units , tmp ) ;
45007: LD_ADDR_VAR 0 3
45011: PUSH
45012: LD_VAR 0 1
45016: PPUSH
45017: LD_VAR 0 5
45021: PPUSH
45022: CALL_OW 77
45026: ST_TO_ADDR
// end ;
45027: LD_VAR 0 3
45031: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45032: LD_INT 0
45034: PPUSH
45035: PPUSH
// task := GetTaskList ( mech ) ;
45036: LD_ADDR_VAR 0 4
45040: PUSH
45041: LD_VAR 0 1
45045: PPUSH
45046: CALL_OW 437
45050: ST_TO_ADDR
// if not task then
45051: LD_VAR 0 4
45055: NOT
45056: IFFALSE 45060
// exit ;
45058: GO 45104
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45060: LD_ADDR_VAR 0 3
45064: PUSH
45065: LD_VAR 0 4
45069: PUSH
45070: LD_INT 1
45072: ARRAY
45073: PUSH
45074: LD_INT 1
45076: ARRAY
45077: PUSH
45078: LD_STRING r
45080: EQUAL
45081: IFFALSE 45103
45083: PUSH
45084: LD_VAR 0 4
45088: PUSH
45089: LD_INT 1
45091: ARRAY
45092: PUSH
45093: LD_INT 4
45095: ARRAY
45096: PUSH
45097: LD_VAR 0 2
45101: EQUAL
45102: AND
45103: ST_TO_ADDR
// end ;
45104: LD_VAR 0 3
45108: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45109: LD_INT 0
45111: PPUSH
// SetDir ( unit , d ) ;
45112: LD_VAR 0 1
45116: PPUSH
45117: LD_VAR 0 4
45121: PPUSH
45122: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
45126: LD_ADDR_VAR 0 6
45130: PUSH
45131: LD_VAR 0 1
45135: PPUSH
45136: LD_VAR 0 2
45140: PPUSH
45141: LD_VAR 0 3
45145: PPUSH
45146: LD_VAR 0 5
45150: PPUSH
45151: CALL_OW 48
45155: ST_TO_ADDR
// end ;
45156: LD_VAR 0 6
45160: RET
// export function ToNaturalNumber ( number ) ; begin
45161: LD_INT 0
45163: PPUSH
// result := number div 1 ;
45164: LD_ADDR_VAR 0 2
45168: PUSH
45169: LD_VAR 0 1
45173: PUSH
45174: LD_INT 1
45176: DIV
45177: ST_TO_ADDR
// if number < 0 then
45178: LD_VAR 0 1
45182: PUSH
45183: LD_INT 0
45185: LESS
45186: IFFALSE 45196
// result := 0 ;
45188: LD_ADDR_VAR 0 2
45192: PUSH
45193: LD_INT 0
45195: ST_TO_ADDR
// end ;
45196: LD_VAR 0 2
45200: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
45201: LD_INT 0
45203: PPUSH
45204: PPUSH
45205: PPUSH
// if not buildings then
45206: LD_VAR 0 1
45210: NOT
45211: IFFALSE 45215
// exit ;
45213: GO 45330
// tmp := [ ] ;
45215: LD_ADDR_VAR 0 5
45219: PUSH
45220: EMPTY
45221: ST_TO_ADDR
// for b in buildings do
45222: LD_ADDR_VAR 0 4
45226: PUSH
45227: LD_VAR 0 1
45231: PUSH
45232: FOR_IN
45233: IFFALSE 45271
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
45235: LD_ADDR_VAR 0 5
45239: PUSH
45240: LD_VAR 0 5
45244: PPUSH
45245: LD_VAR 0 5
45249: PUSH
45250: LD_INT 1
45252: PLUS
45253: PPUSH
45254: LD_VAR 0 4
45258: PPUSH
45259: CALL_OW 266
45263: PPUSH
45264: CALL_OW 1
45268: ST_TO_ADDR
45269: GO 45232
45271: POP
45272: POP
// if not tmp then
45273: LD_VAR 0 5
45277: NOT
45278: IFFALSE 45282
// exit ;
45280: GO 45330
// if asc then
45282: LD_VAR 0 2
45286: IFFALSE 45310
// result := SortListByListAsc ( buildings , tmp ) else
45288: LD_ADDR_VAR 0 3
45292: PUSH
45293: LD_VAR 0 1
45297: PPUSH
45298: LD_VAR 0 5
45302: PPUSH
45303: CALL_OW 76
45307: ST_TO_ADDR
45308: GO 45330
// result := SortListByListDesc ( buildings , tmp ) ;
45310: LD_ADDR_VAR 0 3
45314: PUSH
45315: LD_VAR 0 1
45319: PPUSH
45320: LD_VAR 0 5
45324: PPUSH
45325: CALL_OW 77
45329: ST_TO_ADDR
// end ;
45330: LD_VAR 0 3
45334: RET
// export function SortByClass ( units , class ) ; var un ; begin
45335: LD_INT 0
45337: PPUSH
45338: PPUSH
// if not units or not class then
45339: LD_VAR 0 1
45343: NOT
45344: IFTRUE 45353
45346: PUSH
45347: LD_VAR 0 2
45351: NOT
45352: OR
45353: IFFALSE 45357
// exit ;
45355: GO 45452
// result := [ ] ;
45357: LD_ADDR_VAR 0 3
45361: PUSH
45362: EMPTY
45363: ST_TO_ADDR
// for un in units do
45364: LD_ADDR_VAR 0 4
45368: PUSH
45369: LD_VAR 0 1
45373: PUSH
45374: FOR_IN
45375: IFFALSE 45450
// if GetClass ( un ) = class then
45377: LD_VAR 0 4
45381: PPUSH
45382: CALL_OW 257
45386: PUSH
45387: LD_VAR 0 2
45391: EQUAL
45392: IFFALSE 45419
// result := Insert ( result , 1 , un ) else
45394: LD_ADDR_VAR 0 3
45398: PUSH
45399: LD_VAR 0 3
45403: PPUSH
45404: LD_INT 1
45406: PPUSH
45407: LD_VAR 0 4
45411: PPUSH
45412: CALL_OW 2
45416: ST_TO_ADDR
45417: GO 45448
// result := Replace ( result , result + 1 , un ) ;
45419: LD_ADDR_VAR 0 3
45423: PUSH
45424: LD_VAR 0 3
45428: PPUSH
45429: LD_VAR 0 3
45433: PUSH
45434: LD_INT 1
45436: PLUS
45437: PPUSH
45438: LD_VAR 0 4
45442: PPUSH
45443: CALL_OW 1
45447: ST_TO_ADDR
45448: GO 45374
45450: POP
45451: POP
// end ;
45452: LD_VAR 0 3
45456: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
45457: LD_INT 0
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
// result := [ ] ;
45466: LD_ADDR_VAR 0 4
45470: PUSH
45471: EMPTY
45472: ST_TO_ADDR
// if x - r < 0 then
45473: LD_VAR 0 1
45477: PUSH
45478: LD_VAR 0 3
45482: MINUS
45483: PUSH
45484: LD_INT 0
45486: LESS
45487: IFFALSE 45499
// min_x := 0 else
45489: LD_ADDR_VAR 0 8
45493: PUSH
45494: LD_INT 0
45496: ST_TO_ADDR
45497: GO 45515
// min_x := x - r ;
45499: LD_ADDR_VAR 0 8
45503: PUSH
45504: LD_VAR 0 1
45508: PUSH
45509: LD_VAR 0 3
45513: MINUS
45514: ST_TO_ADDR
// if y - r < 0 then
45515: LD_VAR 0 2
45519: PUSH
45520: LD_VAR 0 3
45524: MINUS
45525: PUSH
45526: LD_INT 0
45528: LESS
45529: IFFALSE 45541
// min_y := 0 else
45531: LD_ADDR_VAR 0 7
45535: PUSH
45536: LD_INT 0
45538: ST_TO_ADDR
45539: GO 45557
// min_y := y - r ;
45541: LD_ADDR_VAR 0 7
45545: PUSH
45546: LD_VAR 0 2
45550: PUSH
45551: LD_VAR 0 3
45555: MINUS
45556: ST_TO_ADDR
// max_x := x + r ;
45557: LD_ADDR_VAR 0 9
45561: PUSH
45562: LD_VAR 0 1
45566: PUSH
45567: LD_VAR 0 3
45571: PLUS
45572: ST_TO_ADDR
// max_y := y + r ;
45573: LD_ADDR_VAR 0 10
45577: PUSH
45578: LD_VAR 0 2
45582: PUSH
45583: LD_VAR 0 3
45587: PLUS
45588: ST_TO_ADDR
// for _x = min_x to max_x do
45589: LD_ADDR_VAR 0 5
45593: PUSH
45594: DOUBLE
45595: LD_VAR 0 8
45599: DEC
45600: ST_TO_ADDR
45601: LD_VAR 0 9
45605: PUSH
45606: FOR_TO
45607: IFFALSE 45708
// for _y = min_y to max_y do
45609: LD_ADDR_VAR 0 6
45613: PUSH
45614: DOUBLE
45615: LD_VAR 0 7
45619: DEC
45620: ST_TO_ADDR
45621: LD_VAR 0 10
45625: PUSH
45626: FOR_TO
45627: IFFALSE 45704
// begin if not ValidHex ( _x , _y ) then
45629: LD_VAR 0 5
45633: PPUSH
45634: LD_VAR 0 6
45638: PPUSH
45639: CALL_OW 488
45643: NOT
45644: IFFALSE 45648
// continue ;
45646: GO 45626
// if GetResourceTypeXY ( _x , _y ) then
45648: LD_VAR 0 5
45652: PPUSH
45653: LD_VAR 0 6
45657: PPUSH
45658: CALL_OW 283
45662: IFFALSE 45702
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
45664: LD_ADDR_VAR 0 4
45668: PUSH
45669: LD_VAR 0 4
45673: PPUSH
45674: LD_VAR 0 4
45678: PUSH
45679: LD_INT 1
45681: PLUS
45682: PPUSH
45683: LD_VAR 0 5
45687: PUSH
45688: LD_VAR 0 6
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PPUSH
45697: CALL_OW 1
45701: ST_TO_ADDR
// end ;
45702: GO 45626
45704: POP
45705: POP
45706: GO 45606
45708: POP
45709: POP
// end ;
45710: LD_VAR 0 4
45714: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45715: LD_INT 0
45717: PPUSH
45718: PPUSH
45719: PPUSH
45720: PPUSH
45721: PPUSH
45722: PPUSH
45723: PPUSH
45724: PPUSH
// if not units then
45725: LD_VAR 0 1
45729: NOT
45730: IFFALSE 45734
// exit ;
45732: GO 46266
// result := UnitFilter ( units , [ f_ok ] ) ;
45734: LD_ADDR_VAR 0 3
45738: PUSH
45739: LD_VAR 0 1
45743: PPUSH
45744: LD_INT 50
45746: PUSH
45747: EMPTY
45748: LIST
45749: PPUSH
45750: CALL_OW 72
45754: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45755: LD_ADDR_VAR 0 8
45759: PUSH
45760: LD_VAR 0 1
45764: PUSH
45765: LD_INT 1
45767: ARRAY
45768: PPUSH
45769: CALL_OW 255
45773: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45774: LD_ADDR_VAR 0 10
45778: PUSH
45779: LD_INT 29
45781: PUSH
45782: LD_INT 91
45784: PUSH
45785: LD_INT 49
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: ST_TO_ADDR
// if not result then
45793: LD_VAR 0 3
45797: NOT
45798: IFFALSE 45802
// exit ;
45800: GO 46266
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45802: LD_ADDR_VAR 0 5
45806: PUSH
45807: LD_INT 81
45809: PUSH
45810: LD_VAR 0 8
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PPUSH
45819: CALL_OW 69
45823: ST_TO_ADDR
// for i in result do
45824: LD_ADDR_VAR 0 4
45828: PUSH
45829: LD_VAR 0 3
45833: PUSH
45834: FOR_IN
45835: IFFALSE 46264
// begin tag := GetTag ( i ) + 1 ;
45837: LD_ADDR_VAR 0 9
45841: PUSH
45842: LD_VAR 0 4
45846: PPUSH
45847: CALL_OW 110
45851: PUSH
45852: LD_INT 1
45854: PLUS
45855: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
45856: LD_ADDR_VAR 0 7
45860: PUSH
45861: LD_VAR 0 4
45865: PPUSH
45866: CALL_OW 250
45870: PPUSH
45871: LD_VAR 0 4
45875: PPUSH
45876: CALL_OW 251
45880: PPUSH
45881: LD_INT 4
45883: PPUSH
45884: CALL 45457 0 3
45888: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
45889: LD_VAR 0 4
45893: PPUSH
45894: CALL_OW 247
45898: PUSH
45899: LD_INT 2
45901: EQUAL
45902: IFFALSE 45914
45904: PUSH
45905: LD_VAR 0 7
45909: PUSH
45910: LD_INT 2
45912: GREATER
45913: AND
45914: IFFALSE 45934
45916: PUSH
45917: LD_VAR 0 4
45921: PPUSH
45922: CALL_OW 264
45926: PUSH
45927: LD_VAR 0 10
45931: IN
45932: NOT
45933: AND
45934: IFFALSE 45973
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45936: LD_VAR 0 4
45940: PPUSH
45941: LD_VAR 0 7
45945: PUSH
45946: LD_INT 1
45948: ARRAY
45949: PUSH
45950: LD_INT 1
45952: ARRAY
45953: PPUSH
45954: LD_VAR 0 7
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: PUSH
45963: LD_INT 2
45965: ARRAY
45966: PPUSH
45967: CALL_OW 116
45971: GO 46262
// if path > tag then
45973: LD_VAR 0 2
45977: PUSH
45978: LD_VAR 0 9
45982: GREATER
45983: IFFALSE 46191
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45985: LD_ADDR_VAR 0 6
45989: PUSH
45990: LD_VAR 0 5
45994: PPUSH
45995: LD_INT 91
45997: PUSH
45998: LD_VAR 0 4
46002: PUSH
46003: LD_INT 8
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: PPUSH
46011: CALL_OW 72
46015: ST_TO_ADDR
// if nearEnemy then
46016: LD_VAR 0 6
46020: IFFALSE 46089
// begin if GetWeapon ( i ) = ru_time_lapser then
46022: LD_VAR 0 4
46026: PPUSH
46027: CALL_OW 264
46031: PUSH
46032: LD_INT 49
46034: EQUAL
46035: IFFALSE 46063
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46037: LD_VAR 0 4
46041: PPUSH
46042: LD_VAR 0 6
46046: PPUSH
46047: LD_VAR 0 4
46051: PPUSH
46052: CALL_OW 74
46056: PPUSH
46057: CALL_OW 112
46061: GO 46087
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46063: LD_VAR 0 4
46067: PPUSH
46068: LD_VAR 0 6
46072: PPUSH
46073: LD_VAR 0 4
46077: PPUSH
46078: CALL_OW 74
46082: PPUSH
46083: CALL 47347 0 2
// end else
46087: GO 46189
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46089: LD_VAR 0 4
46093: PPUSH
46094: LD_VAR 0 2
46098: PUSH
46099: LD_VAR 0 9
46103: ARRAY
46104: PUSH
46105: LD_INT 1
46107: ARRAY
46108: PPUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_VAR 0 9
46118: ARRAY
46119: PUSH
46120: LD_INT 2
46122: ARRAY
46123: PPUSH
46124: CALL_OW 297
46128: PUSH
46129: LD_INT 6
46131: GREATER
46132: IFFALSE 46175
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46134: LD_VAR 0 4
46138: PPUSH
46139: LD_VAR 0 2
46143: PUSH
46144: LD_VAR 0 9
46148: ARRAY
46149: PUSH
46150: LD_INT 1
46152: ARRAY
46153: PPUSH
46154: LD_VAR 0 2
46158: PUSH
46159: LD_VAR 0 9
46163: ARRAY
46164: PUSH
46165: LD_INT 2
46167: ARRAY
46168: PPUSH
46169: CALL_OW 114
46173: GO 46189
// SetTag ( i , tag ) ;
46175: LD_VAR 0 4
46179: PPUSH
46180: LD_VAR 0 9
46184: PPUSH
46185: CALL_OW 109
// end else
46189: GO 46262
// if enemy then
46191: LD_VAR 0 5
46195: IFFALSE 46262
// begin if GetWeapon ( i ) = ru_time_lapser then
46197: LD_VAR 0 4
46201: PPUSH
46202: CALL_OW 264
46206: PUSH
46207: LD_INT 49
46209: EQUAL
46210: IFFALSE 46238
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46212: LD_VAR 0 4
46216: PPUSH
46217: LD_VAR 0 5
46221: PPUSH
46222: LD_VAR 0 4
46226: PPUSH
46227: CALL_OW 74
46231: PPUSH
46232: CALL_OW 112
46236: GO 46262
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46238: LD_VAR 0 4
46242: PPUSH
46243: LD_VAR 0 5
46247: PPUSH
46248: LD_VAR 0 4
46252: PPUSH
46253: CALL_OW 74
46257: PPUSH
46258: CALL 47347 0 2
// end ; end ;
46262: GO 45834
46264: POP
46265: POP
// end ;
46266: LD_VAR 0 3
46270: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46271: LD_INT 0
46273: PPUSH
46274: PPUSH
46275: PPUSH
// if not unit or IsInUnit ( unit ) then
46276: LD_VAR 0 1
46280: NOT
46281: IFTRUE 46294
46283: PUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL_OW 310
46293: OR
46294: IFFALSE 46298
// exit ;
46296: GO 46389
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
46298: LD_ADDR_VAR 0 4
46302: PUSH
46303: LD_VAR 0 1
46307: PPUSH
46308: CALL_OW 250
46312: PPUSH
46313: LD_VAR 0 2
46317: PPUSH
46318: LD_INT 1
46320: PPUSH
46321: CALL_OW 272
46325: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
46326: LD_ADDR_VAR 0 5
46330: PUSH
46331: LD_VAR 0 1
46335: PPUSH
46336: CALL_OW 251
46340: PPUSH
46341: LD_VAR 0 2
46345: PPUSH
46346: LD_INT 1
46348: PPUSH
46349: CALL_OW 273
46353: ST_TO_ADDR
// if ValidHex ( x , y ) then
46354: LD_VAR 0 4
46358: PPUSH
46359: LD_VAR 0 5
46363: PPUSH
46364: CALL_OW 488
46368: IFFALSE 46389
// ComTurnXY ( unit , x , y ) ;
46370: LD_VAR 0 1
46374: PPUSH
46375: LD_VAR 0 4
46379: PPUSH
46380: LD_VAR 0 5
46384: PPUSH
46385: CALL_OW 118
// end ;
46389: LD_VAR 0 3
46393: RET
// export function SeeUnits ( side , units ) ; var i ; begin
46394: LD_INT 0
46396: PPUSH
46397: PPUSH
// result := false ;
46398: LD_ADDR_VAR 0 3
46402: PUSH
46403: LD_INT 0
46405: ST_TO_ADDR
// if not units then
46406: LD_VAR 0 2
46410: NOT
46411: IFFALSE 46415
// exit ;
46413: GO 46460
// for i in units do
46415: LD_ADDR_VAR 0 4
46419: PUSH
46420: LD_VAR 0 2
46424: PUSH
46425: FOR_IN
46426: IFFALSE 46458
// if See ( side , i ) then
46428: LD_VAR 0 1
46432: PPUSH
46433: LD_VAR 0 4
46437: PPUSH
46438: CALL_OW 292
46442: IFFALSE 46456
// begin result := true ;
46444: LD_ADDR_VAR 0 3
46448: PUSH
46449: LD_INT 1
46451: ST_TO_ADDR
// exit ;
46452: POP
46453: POP
46454: GO 46460
// end ;
46456: GO 46425
46458: POP
46459: POP
// end ;
46460: LD_VAR 0 3
46464: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
46465: LD_INT 0
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
// if not unit or not points then
46471: LD_VAR 0 1
46475: NOT
46476: IFTRUE 46485
46478: PUSH
46479: LD_VAR 0 2
46483: NOT
46484: OR
46485: IFFALSE 46489
// exit ;
46487: GO 46579
// dist := 99999 ;
46489: LD_ADDR_VAR 0 5
46493: PUSH
46494: LD_INT 99999
46496: ST_TO_ADDR
// for i in points do
46497: LD_ADDR_VAR 0 4
46501: PUSH
46502: LD_VAR 0 2
46506: PUSH
46507: FOR_IN
46508: IFFALSE 46577
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46510: LD_ADDR_VAR 0 6
46514: PUSH
46515: LD_VAR 0 1
46519: PPUSH
46520: LD_VAR 0 4
46524: PUSH
46525: LD_INT 1
46527: ARRAY
46528: PPUSH
46529: LD_VAR 0 4
46533: PUSH
46534: LD_INT 2
46536: ARRAY
46537: PPUSH
46538: CALL_OW 297
46542: ST_TO_ADDR
// if tmpDist < dist then
46543: LD_VAR 0 6
46547: PUSH
46548: LD_VAR 0 5
46552: LESS
46553: IFFALSE 46575
// begin result := i ;
46555: LD_ADDR_VAR 0 3
46559: PUSH
46560: LD_VAR 0 4
46564: ST_TO_ADDR
// dist := tmpDist ;
46565: LD_ADDR_VAR 0 5
46569: PUSH
46570: LD_VAR 0 6
46574: ST_TO_ADDR
// end ; end ;
46575: GO 46507
46577: POP
46578: POP
// end ;
46579: LD_VAR 0 3
46583: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
46584: LD_INT 0
46586: PPUSH
// uc_side := side ;
46587: LD_ADDR_OWVAR 20
46591: PUSH
46592: LD_VAR 0 1
46596: ST_TO_ADDR
// uc_nation := 3 ;
46597: LD_ADDR_OWVAR 21
46601: PUSH
46602: LD_INT 3
46604: ST_TO_ADDR
// vc_chassis := 25 ;
46605: LD_ADDR_OWVAR 37
46609: PUSH
46610: LD_INT 25
46612: ST_TO_ADDR
// vc_engine := engine_siberite ;
46613: LD_ADDR_OWVAR 39
46617: PUSH
46618: LD_INT 3
46620: ST_TO_ADDR
// vc_control := control_computer ;
46621: LD_ADDR_OWVAR 38
46625: PUSH
46626: LD_INT 3
46628: ST_TO_ADDR
// vc_weapon := 59 ;
46629: LD_ADDR_OWVAR 40
46633: PUSH
46634: LD_INT 59
46636: ST_TO_ADDR
// result := CreateVehicle ;
46637: LD_ADDR_VAR 0 5
46641: PUSH
46642: CALL_OW 45
46646: ST_TO_ADDR
// SetDir ( result , d ) ;
46647: LD_VAR 0 5
46651: PPUSH
46652: LD_VAR 0 4
46656: PPUSH
46657: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
46661: LD_VAR 0 5
46665: PPUSH
46666: LD_VAR 0 2
46670: PPUSH
46671: LD_VAR 0 3
46675: PPUSH
46676: LD_INT 0
46678: PPUSH
46679: CALL_OW 48
// end ;
46683: LD_VAR 0 5
46687: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
46688: LD_INT 0
46690: PPUSH
46691: PPUSH
46692: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
46693: LD_ADDR_VAR 0 2
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46716: LD_VAR 0 1
46720: NOT
46721: IFTRUE 46754
46723: PUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: CALL_OW 264
46733: PUSH
46734: LD_INT 12
46736: PUSH
46737: LD_INT 51
46739: PUSH
46740: LD_INT 32
46742: PUSH
46743: LD_INT 89
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: IN
46752: NOT
46753: OR
46754: IFFALSE 46758
// exit ;
46756: GO 46856
// for i := 1 to 3 do
46758: LD_ADDR_VAR 0 3
46762: PUSH
46763: DOUBLE
46764: LD_INT 1
46766: DEC
46767: ST_TO_ADDR
46768: LD_INT 3
46770: PUSH
46771: FOR_TO
46772: IFFALSE 46854
// begin tmp := GetCargo ( cargo , i ) ;
46774: LD_ADDR_VAR 0 4
46778: PUSH
46779: LD_VAR 0 1
46783: PPUSH
46784: LD_VAR 0 3
46788: PPUSH
46789: CALL_OW 289
46793: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46794: LD_ADDR_VAR 0 2
46798: PUSH
46799: LD_VAR 0 2
46803: PPUSH
46804: LD_VAR 0 3
46808: PPUSH
46809: LD_VAR 0 4
46813: PPUSH
46814: CALL_OW 1
46818: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46819: LD_ADDR_VAR 0 2
46823: PUSH
46824: LD_VAR 0 2
46828: PPUSH
46829: LD_INT 4
46831: PPUSH
46832: LD_VAR 0 2
46836: PUSH
46837: LD_INT 4
46839: ARRAY
46840: PUSH
46841: LD_VAR 0 4
46845: PLUS
46846: PPUSH
46847: CALL_OW 1
46851: ST_TO_ADDR
// end ;
46852: GO 46771
46854: POP
46855: POP
// end ;
46856: LD_VAR 0 2
46860: RET
// export function Length ( array ) ; begin
46861: LD_INT 0
46863: PPUSH
// result := array + 0 ;
46864: LD_ADDR_VAR 0 2
46868: PUSH
46869: LD_VAR 0 1
46873: PUSH
46874: LD_INT 0
46876: PLUS
46877: ST_TO_ADDR
// end ;
46878: LD_VAR 0 2
46882: RET
// export function PrepareArray ( array ) ; begin
46883: LD_INT 0
46885: PPUSH
// result := array diff 0 ;
46886: LD_ADDR_VAR 0 2
46890: PUSH
46891: LD_VAR 0 1
46895: PUSH
46896: LD_INT 0
46898: DIFF
46899: ST_TO_ADDR
// if not result [ 1 ] then
46900: LD_VAR 0 2
46904: PUSH
46905: LD_INT 1
46907: ARRAY
46908: NOT
46909: IFFALSE 46929
// result := Delete ( result , 1 ) ;
46911: LD_ADDR_VAR 0 2
46915: PUSH
46916: LD_VAR 0 2
46920: PPUSH
46921: LD_INT 1
46923: PPUSH
46924: CALL_OW 3
46928: ST_TO_ADDR
// end ;
46929: LD_VAR 0 2
46933: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
46934: LD_INT 0
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
// sibRocketRange := 25 ;
46940: LD_ADDR_VAR 0 6
46944: PUSH
46945: LD_INT 25
46947: ST_TO_ADDR
// result := false ;
46948: LD_ADDR_VAR 0 4
46952: PUSH
46953: LD_INT 0
46955: ST_TO_ADDR
// for i := 0 to 5 do
46956: LD_ADDR_VAR 0 5
46960: PUSH
46961: DOUBLE
46962: LD_INT 0
46964: DEC
46965: ST_TO_ADDR
46966: LD_INT 5
46968: PUSH
46969: FOR_TO
46970: IFFALSE 47037
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
46972: LD_VAR 0 1
46976: PPUSH
46977: LD_VAR 0 5
46981: PPUSH
46982: LD_VAR 0 6
46986: PPUSH
46987: CALL_OW 272
46991: PPUSH
46992: LD_VAR 0 2
46996: PPUSH
46997: LD_VAR 0 5
47001: PPUSH
47002: LD_VAR 0 6
47006: PPUSH
47007: CALL_OW 273
47011: PPUSH
47012: LD_VAR 0 3
47016: PPUSH
47017: CALL_OW 309
47021: IFFALSE 47035
// begin result := true ;
47023: LD_ADDR_VAR 0 4
47027: PUSH
47028: LD_INT 1
47030: ST_TO_ADDR
// exit ;
47031: POP
47032: POP
47033: GO 47039
// end ;
47035: GO 46969
47037: POP
47038: POP
// end ;
47039: LD_VAR 0 4
47043: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
47044: LD_INT 0
47046: PPUSH
47047: PPUSH
47048: PPUSH
// if btype = b_depot then
47049: LD_VAR 0 2
47053: PUSH
47054: LD_INT 0
47056: EQUAL
47057: IFFALSE 47069
// begin result := true ;
47059: LD_ADDR_VAR 0 3
47063: PUSH
47064: LD_INT 1
47066: ST_TO_ADDR
// exit ;
47067: GO 47189
// end ; pom := GetBase ( depot ) ;
47069: LD_ADDR_VAR 0 4
47073: PUSH
47074: LD_VAR 0 1
47078: PPUSH
47079: CALL_OW 274
47083: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47084: LD_ADDR_VAR 0 5
47088: PUSH
47089: LD_VAR 0 2
47093: PPUSH
47094: LD_VAR 0 1
47098: PPUSH
47099: CALL_OW 248
47103: PPUSH
47104: CALL_OW 450
47108: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_VAR 0 4
47118: PPUSH
47119: LD_INT 1
47121: PPUSH
47122: CALL_OW 275
47126: PUSH
47127: LD_VAR 0 5
47131: PUSH
47132: LD_INT 1
47134: ARRAY
47135: GREATEREQUAL
47136: IFFALSE 47162
47138: PUSH
47139: LD_VAR 0 4
47143: PPUSH
47144: LD_INT 2
47146: PPUSH
47147: CALL_OW 275
47151: PUSH
47152: LD_VAR 0 5
47156: PUSH
47157: LD_INT 2
47159: ARRAY
47160: GREATEREQUAL
47161: AND
47162: IFFALSE 47188
47164: PUSH
47165: LD_VAR 0 4
47169: PPUSH
47170: LD_INT 3
47172: PPUSH
47173: CALL_OW 275
47177: PUSH
47178: LD_VAR 0 5
47182: PUSH
47183: LD_INT 3
47185: ARRAY
47186: GREATEREQUAL
47187: AND
47188: ST_TO_ADDR
// end ;
47189: LD_VAR 0 3
47193: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
47194: LD_INT 0
47196: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
47197: LD_VAR 0 1
47201: PPUSH
47202: LD_VAR 0 2
47206: PPUSH
47207: LD_INT 0
47209: PPUSH
47210: LD_INT 0
47212: PPUSH
47213: LD_INT 1
47215: PPUSH
47216: LD_INT 0
47218: PPUSH
47219: CALL_OW 587
// end ;
47223: LD_VAR 0 3
47227: RET
// export function CenterOnNow ( unit ) ; begin
47228: LD_INT 0
47230: PPUSH
// result := IsInUnit ( unit ) ;
47231: LD_ADDR_VAR 0 2
47235: PUSH
47236: LD_VAR 0 1
47240: PPUSH
47241: CALL_OW 310
47245: ST_TO_ADDR
// if not result then
47246: LD_VAR 0 2
47250: NOT
47251: IFFALSE 47263
// result := unit ;
47253: LD_ADDR_VAR 0 2
47257: PUSH
47258: LD_VAR 0 1
47262: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
47263: LD_VAR 0 1
47267: PPUSH
47268: CALL_OW 87
// end ;
47272: LD_VAR 0 2
47276: RET
// export function ComMoveHex ( unit , hex ) ; begin
47277: LD_INT 0
47279: PPUSH
// if not hex then
47280: LD_VAR 0 2
47284: NOT
47285: IFFALSE 47289
// exit ;
47287: GO 47342
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
47289: LD_VAR 0 2
47293: PUSH
47294: LD_INT 1
47296: ARRAY
47297: PPUSH
47298: LD_VAR 0 2
47302: PUSH
47303: LD_INT 2
47305: ARRAY
47306: PPUSH
47307: CALL_OW 428
47311: IFFALSE 47315
// exit ;
47313: GO 47342
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
47315: LD_VAR 0 1
47319: PPUSH
47320: LD_VAR 0 2
47324: PUSH
47325: LD_INT 1
47327: ARRAY
47328: PPUSH
47329: LD_VAR 0 2
47333: PUSH
47334: LD_INT 2
47336: ARRAY
47337: PPUSH
47338: CALL_OW 111
// end ;
47342: LD_VAR 0 3
47346: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
47347: LD_INT 0
47349: PPUSH
47350: PPUSH
47351: PPUSH
// if not unit or not enemy then
47352: LD_VAR 0 1
47356: NOT
47357: IFTRUE 47366
47359: PUSH
47360: LD_VAR 0 2
47364: NOT
47365: OR
47366: IFFALSE 47370
// exit ;
47368: GO 47496
// x := GetX ( enemy ) ;
47370: LD_ADDR_VAR 0 4
47374: PUSH
47375: LD_VAR 0 2
47379: PPUSH
47380: CALL_OW 250
47384: ST_TO_ADDR
// y := GetY ( enemy ) ;
47385: LD_ADDR_VAR 0 5
47389: PUSH
47390: LD_VAR 0 2
47394: PPUSH
47395: CALL_OW 251
47399: ST_TO_ADDR
// if ValidHex ( x , y ) then
47400: LD_VAR 0 4
47404: PPUSH
47405: LD_VAR 0 5
47409: PPUSH
47410: CALL_OW 488
47414: IFFALSE 47496
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
47416: LD_VAR 0 2
47420: PPUSH
47421: CALL_OW 247
47425: PUSH
47426: LD_INT 3
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: IN
47436: IFTRUE 47459
47438: PUSH
47439: LD_VAR 0 1
47443: PPUSH
47444: CALL_OW 255
47448: PPUSH
47449: LD_VAR 0 2
47453: PPUSH
47454: CALL_OW 292
47458: OR
47459: IFFALSE 47477
// ComAttackUnit ( unit , enemy ) else
47461: LD_VAR 0 1
47465: PPUSH
47466: LD_VAR 0 2
47470: PPUSH
47471: CALL_OW 115
47475: GO 47496
// ComAgressiveMove ( unit , x , y ) ;
47477: LD_VAR 0 1
47481: PPUSH
47482: LD_VAR 0 4
47486: PPUSH
47487: LD_VAR 0 5
47491: PPUSH
47492: CALL_OW 114
// end ;
47496: LD_VAR 0 3
47500: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
47501: LD_INT 0
47503: PPUSH
47504: PPUSH
47505: PPUSH
// list := AreaToList ( area , 0 ) ;
47506: LD_ADDR_VAR 0 5
47510: PUSH
47511: LD_VAR 0 1
47515: PPUSH
47516: LD_INT 0
47518: PPUSH
47519: CALL_OW 517
47523: ST_TO_ADDR
// if not list then
47524: LD_VAR 0 5
47528: NOT
47529: IFFALSE 47533
// exit ;
47531: GO 47663
// if all then
47533: LD_VAR 0 2
47537: IFFALSE 47625
// begin for i := 1 to list [ 1 ] do
47539: LD_ADDR_VAR 0 4
47543: PUSH
47544: DOUBLE
47545: LD_INT 1
47547: DEC
47548: ST_TO_ADDR
47549: LD_VAR 0 5
47553: PUSH
47554: LD_INT 1
47556: ARRAY
47557: PUSH
47558: FOR_TO
47559: IFFALSE 47621
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
47561: LD_ADDR_VAR 0 3
47565: PUSH
47566: LD_VAR 0 3
47570: PPUSH
47571: LD_VAR 0 3
47575: PUSH
47576: LD_INT 1
47578: PLUS
47579: PPUSH
47580: LD_VAR 0 5
47584: PUSH
47585: LD_INT 1
47587: ARRAY
47588: PUSH
47589: LD_VAR 0 4
47593: ARRAY
47594: PUSH
47595: LD_VAR 0 5
47599: PUSH
47600: LD_INT 2
47602: ARRAY
47603: PUSH
47604: LD_VAR 0 4
47608: ARRAY
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PPUSH
47614: CALL_OW 1
47618: ST_TO_ADDR
47619: GO 47558
47621: POP
47622: POP
// exit ;
47623: GO 47663
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
47625: LD_ADDR_VAR 0 3
47629: PUSH
47630: LD_VAR 0 5
47634: PUSH
47635: LD_INT 1
47637: ARRAY
47638: PUSH
47639: LD_INT 1
47641: ARRAY
47642: PUSH
47643: LD_VAR 0 5
47647: PUSH
47648: LD_INT 2
47650: ARRAY
47651: PUSH
47652: LD_INT 1
47654: ARRAY
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: ST_TO_ADDR
// end ;
47663: LD_VAR 0 3
47667: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
47668: LD_INT 0
47670: PPUSH
47671: PPUSH
// list := AreaToList ( area , 0 ) ;
47672: LD_ADDR_VAR 0 4
47676: PUSH
47677: LD_VAR 0 1
47681: PPUSH
47682: LD_INT 0
47684: PPUSH
47685: CALL_OW 517
47689: ST_TO_ADDR
// if not list then
47690: LD_VAR 0 4
47694: NOT
47695: IFFALSE 47699
// exit ;
47697: GO 47740
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
47699: LD_ADDR_VAR 0 3
47703: PUSH
47704: LD_VAR 0 4
47708: PUSH
47709: LD_INT 1
47711: ARRAY
47712: PUSH
47713: LD_INT 1
47715: ARRAY
47716: PUSH
47717: LD_VAR 0 4
47721: PUSH
47722: LD_INT 2
47724: ARRAY
47725: PUSH
47726: LD_INT 1
47728: ARRAY
47729: PUSH
47730: LD_VAR 0 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: ST_TO_ADDR
// end ;
47740: LD_VAR 0 3
47744: RET
// export function First ( array ) ; begin
47745: LD_INT 0
47747: PPUSH
// if not array then
47748: LD_VAR 0 1
47752: NOT
47753: IFFALSE 47757
// exit ;
47755: GO 47771
// result := array [ 1 ] ;
47757: LD_ADDR_VAR 0 2
47761: PUSH
47762: LD_VAR 0 1
47766: PUSH
47767: LD_INT 1
47769: ARRAY
47770: ST_TO_ADDR
// end ;
47771: LD_VAR 0 2
47775: RET
// export function Last ( array ) ; begin
47776: LD_INT 0
47778: PPUSH
// if not array then
47779: LD_VAR 0 1
47783: NOT
47784: IFFALSE 47788
// exit ;
47786: GO 47804
// result := array [ array ] ;
47788: LD_ADDR_VAR 0 2
47792: PUSH
47793: LD_VAR 0 1
47797: PUSH
47798: LD_VAR 0 1
47802: ARRAY
47803: ST_TO_ADDR
// end ;
47804: LD_VAR 0 2
47808: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
47809: LD_INT 0
47811: PPUSH
47812: PPUSH
// result := [ ] ;
47813: LD_ADDR_VAR 0 5
47817: PUSH
47818: EMPTY
47819: ST_TO_ADDR
// if not array then
47820: LD_VAR 0 1
47824: NOT
47825: IFFALSE 47829
// exit ;
47827: GO 47941
// for i := 1 to array do
47829: LD_ADDR_VAR 0 6
47833: PUSH
47834: DOUBLE
47835: LD_INT 1
47837: DEC
47838: ST_TO_ADDR
47839: LD_VAR 0 1
47843: PUSH
47844: FOR_TO
47845: IFFALSE 47939
// if array [ i ] [ index ] = value then
47847: LD_VAR 0 1
47851: PUSH
47852: LD_VAR 0 6
47856: ARRAY
47857: PUSH
47858: LD_VAR 0 2
47862: ARRAY
47863: PUSH
47864: LD_VAR 0 3
47868: EQUAL
47869: IFFALSE 47937
// begin if indexColumn then
47871: LD_VAR 0 4
47875: IFFALSE 47911
// result := Join ( result , array [ i ] [ indexColumn ] ) else
47877: LD_ADDR_VAR 0 5
47881: PUSH
47882: LD_VAR 0 5
47886: PPUSH
47887: LD_VAR 0 1
47891: PUSH
47892: LD_VAR 0 6
47896: ARRAY
47897: PUSH
47898: LD_VAR 0 4
47902: ARRAY
47903: PPUSH
47904: CALL 42949 0 2
47908: ST_TO_ADDR
47909: GO 47937
// result := Join ( result , array [ i ] ) ;
47911: LD_ADDR_VAR 0 5
47915: PUSH
47916: LD_VAR 0 5
47920: PPUSH
47921: LD_VAR 0 1
47925: PUSH
47926: LD_VAR 0 6
47930: ARRAY
47931: PPUSH
47932: CALL 42949 0 2
47936: ST_TO_ADDR
// end ;
47937: GO 47844
47939: POP
47940: POP
// end ;
47941: LD_VAR 0 5
47945: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
47946: LD_INT 0
47948: PPUSH
// if not vehicles or not parkingPoint then
47949: LD_VAR 0 1
47953: NOT
47954: IFTRUE 47963
47956: PUSH
47957: LD_VAR 0 2
47961: NOT
47962: OR
47963: IFFALSE 47967
// exit ;
47965: GO 48065
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
47967: LD_ADDR_VAR 0 1
47971: PUSH
47972: LD_VAR 0 1
47976: PPUSH
47977: LD_INT 50
47979: PUSH
47980: EMPTY
47981: LIST
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 92
47988: PUSH
47989: LD_VAR 0 2
47993: PUSH
47994: LD_INT 1
47996: ARRAY
47997: PUSH
47998: LD_VAR 0 2
48002: PUSH
48003: LD_INT 2
48005: ARRAY
48006: PUSH
48007: LD_INT 8
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PPUSH
48024: CALL_OW 72
48028: ST_TO_ADDR
// if not vehicles then
48029: LD_VAR 0 1
48033: NOT
48034: IFFALSE 48038
// exit ;
48036: GO 48065
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
48038: LD_VAR 0 1
48042: PPUSH
48043: LD_VAR 0 2
48047: PUSH
48048: LD_INT 1
48050: ARRAY
48051: PPUSH
48052: LD_VAR 0 2
48056: PUSH
48057: LD_INT 2
48059: ARRAY
48060: PPUSH
48061: CALL_OW 111
// end ;
48065: LD_VAR 0 3
48069: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
48070: LD_INT 0
48072: PPUSH
48073: PPUSH
48074: PPUSH
// if not side or not area then
48075: LD_VAR 0 1
48079: NOT
48080: IFTRUE 48089
48082: PUSH
48083: LD_VAR 0 2
48087: NOT
48088: OR
48089: IFFALSE 48093
// exit ;
48091: GO 48212
// tmp := AreaToList ( area , 0 ) ;
48093: LD_ADDR_VAR 0 5
48097: PUSH
48098: LD_VAR 0 2
48102: PPUSH
48103: LD_INT 0
48105: PPUSH
48106: CALL_OW 517
48110: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
48111: LD_ADDR_VAR 0 4
48115: PUSH
48116: DOUBLE
48117: LD_INT 1
48119: DEC
48120: ST_TO_ADDR
48121: LD_VAR 0 5
48125: PUSH
48126: LD_INT 1
48128: ARRAY
48129: PUSH
48130: FOR_TO
48131: IFFALSE 48210
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
48133: LD_VAR 0 5
48137: PUSH
48138: LD_INT 1
48140: ARRAY
48141: PUSH
48142: LD_VAR 0 4
48146: ARRAY
48147: PPUSH
48148: LD_VAR 0 5
48152: PUSH
48153: LD_INT 2
48155: ARRAY
48156: PUSH
48157: LD_VAR 0 4
48161: ARRAY
48162: PPUSH
48163: CALL_OW 351
48167: IFFALSE 48208
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
48169: LD_VAR 0 5
48173: PUSH
48174: LD_INT 1
48176: ARRAY
48177: PUSH
48178: LD_VAR 0 4
48182: ARRAY
48183: PPUSH
48184: LD_VAR 0 5
48188: PUSH
48189: LD_INT 2
48191: ARRAY
48192: PUSH
48193: LD_VAR 0 4
48197: ARRAY
48198: PPUSH
48199: LD_VAR 0 1
48203: PPUSH
48204: CALL_OW 244
// end ;
48208: GO 48130
48210: POP
48211: POP
// end ;
48212: LD_VAR 0 3
48216: RET
// export function UniqueArray ( array ) ; var i ; begin
48217: LD_INT 0
48219: PPUSH
48220: PPUSH
// result := [ ] ;
48221: LD_ADDR_VAR 0 2
48225: PUSH
48226: EMPTY
48227: ST_TO_ADDR
// if not array then
48228: LD_VAR 0 1
48232: NOT
48233: IFFALSE 48237
// exit ;
48235: GO 48298
// for i := 1 to array do
48237: LD_ADDR_VAR 0 3
48241: PUSH
48242: DOUBLE
48243: LD_INT 1
48245: DEC
48246: ST_TO_ADDR
48247: LD_VAR 0 1
48251: PUSH
48252: FOR_TO
48253: IFFALSE 48296
// if not array [ i ] in result then
48255: LD_VAR 0 1
48259: PUSH
48260: LD_VAR 0 3
48264: ARRAY
48265: PUSH
48266: LD_VAR 0 2
48270: IN
48271: NOT
48272: IFFALSE 48294
// result := Join ( result , i ) ;
48274: LD_ADDR_VAR 0 2
48278: PUSH
48279: LD_VAR 0 2
48283: PPUSH
48284: LD_VAR 0 3
48288: PPUSH
48289: CALL 42949 0 2
48293: ST_TO_ADDR
48294: GO 48252
48296: POP
48297: POP
// end ; end_of_file end_of_file
48298: LD_VAR 0 2
48302: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
48303: LD_VAR 0 1
48307: PPUSH
48308: LD_VAR 0 2
48312: PPUSH
48313: LD_VAR 0 3
48317: PPUSH
48318: LD_VAR 0 4
48322: PPUSH
48323: LD_VAR 0 5
48327: PPUSH
48328: LD_VAR 0 6
48332: PPUSH
48333: CALL 48575 0 6
// end ;
48337: PPOPN 6
48339: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
48340: LD_INT 0
48342: PPUSH
// begin if not units then
48343: LD_VAR 0 1
48347: NOT
48348: IFFALSE 48352
// exit ;
48350: GO 48386
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
48352: LD_VAR 0 1
48356: PPUSH
48357: LD_VAR 0 2
48361: PPUSH
48362: LD_VAR 0 3
48366: PPUSH
48367: LD_VAR 0 4
48371: PPUSH
48372: LD_VAR 0 5
48376: PPUSH
48377: LD_VAR 0 6
48381: PPUSH
48382: CALL 71092 0 6
// end ;
48386: PPOPN 7
48388: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
48389: CALL 48455 0 0
// end ; end_of_file
48393: PPOPN 1
48395: END
// export globalGameSaveCounter ; every 0 0$1 do
48396: GO 48398
48398: DISABLE
// begin enable ;
48399: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48400: LD_STRING updateTimer(
48402: PUSH
48403: LD_OWVAR 1
48407: STR
48408: PUSH
48409: LD_STRING );
48411: STR
48412: PPUSH
48413: CALL_OW 559
// end ;
48417: END
// every 0 0$1 do
48418: GO 48420
48420: DISABLE
// begin globalGameSaveCounter := 0 ;
48421: LD_ADDR_EXP 27
48425: PUSH
48426: LD_INT 0
48428: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
48429: LD_STRING setGameSaveCounter(0)
48431: PPUSH
48432: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
48436: LD_STRING initStreamRollete();
48438: PPUSH
48439: CALL_OW 559
// InitStreamMode ;
48443: CALL 49795 0 0
// DefineStreamItems ( false ) ;
48447: LD_INT 0
48449: PPUSH
48450: CALL 50259 0 1
// end ;
48454: END
// export function SOS_MapStart ( ) ; begin
48455: LD_INT 0
48457: PPUSH
// if streamModeActive then
48458: LD_EXP 28
48462: IFFALSE 48471
// DefineStreamItems ( true ) ;
48464: LD_INT 1
48466: PPUSH
48467: CALL 50259 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
48471: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
48473: PPUSH
48474: CALL_OW 559
// UpdateLuaVariables ( ) ;
48478: CALL 48495 0 0
// UpdateFactoryWaypoints ( ) ;
48482: CALL 63381 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48486: CALL 63633 0 0
// end ;
48490: LD_VAR 0 1
48494: RET
// function UpdateLuaVariables ( ) ; begin
48495: LD_INT 0
48497: PPUSH
// if globalGameSaveCounter then
48498: LD_EXP 27
48502: IFFALSE 48536
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48504: LD_ADDR_EXP 27
48508: PUSH
48509: LD_EXP 27
48513: PPUSH
48514: CALL 44322 0 1
48518: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48519: LD_STRING setGameSaveCounter(
48521: PUSH
48522: LD_EXP 27
48526: STR
48527: PUSH
48528: LD_STRING )
48530: STR
48531: PPUSH
48532: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48536: LD_STRING setGameDifficulty(
48538: PUSH
48539: LD_OWVAR 67
48543: STR
48544: PUSH
48545: LD_STRING )
48547: STR
48548: PPUSH
48549: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
48553: LD_STRING displayDifficulty(
48555: PUSH
48556: LD_OWVAR 67
48560: STR
48561: PUSH
48562: LD_STRING )
48564: STR
48565: PPUSH
48566: CALL_OW 559
// end ;
48570: LD_VAR 0 1
48574: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48575: LD_INT 0
48577: PPUSH
// if p2 = stream_mode then
48578: LD_VAR 0 2
48582: PUSH
48583: LD_INT 100
48585: EQUAL
48586: IFFALSE 49589
// begin if not StreamModeActive then
48588: LD_EXP 28
48592: NOT
48593: IFFALSE 48603
// StreamModeActive := true ;
48595: LD_ADDR_EXP 28
48599: PUSH
48600: LD_INT 1
48602: ST_TO_ADDR
// if p3 = 0 then
48603: LD_VAR 0 3
48607: PUSH
48608: LD_INT 0
48610: EQUAL
48611: IFFALSE 48617
// InitStreamMode ;
48613: CALL 49795 0 0
// if p3 = 1 then
48617: LD_VAR 0 3
48621: PUSH
48622: LD_INT 1
48624: EQUAL
48625: IFFALSE 48635
// sRocket := true ;
48627: LD_ADDR_EXP 33
48631: PUSH
48632: LD_INT 1
48634: ST_TO_ADDR
// if p3 = 2 then
48635: LD_VAR 0 3
48639: PUSH
48640: LD_INT 2
48642: EQUAL
48643: IFFALSE 48653
// sSpeed := true ;
48645: LD_ADDR_EXP 32
48649: PUSH
48650: LD_INT 1
48652: ST_TO_ADDR
// if p3 = 3 then
48653: LD_VAR 0 3
48657: PUSH
48658: LD_INT 3
48660: EQUAL
48661: IFFALSE 48671
// sEngine := true ;
48663: LD_ADDR_EXP 34
48667: PUSH
48668: LD_INT 1
48670: ST_TO_ADDR
// if p3 = 4 then
48671: LD_VAR 0 3
48675: PUSH
48676: LD_INT 4
48678: EQUAL
48679: IFFALSE 48689
// sSpec := true ;
48681: LD_ADDR_EXP 31
48685: PUSH
48686: LD_INT 1
48688: ST_TO_ADDR
// if p3 = 5 then
48689: LD_VAR 0 3
48693: PUSH
48694: LD_INT 5
48696: EQUAL
48697: IFFALSE 48707
// sLevel := true ;
48699: LD_ADDR_EXP 35
48703: PUSH
48704: LD_INT 1
48706: ST_TO_ADDR
// if p3 = 6 then
48707: LD_VAR 0 3
48711: PUSH
48712: LD_INT 6
48714: EQUAL
48715: IFFALSE 48725
// sArmoury := true ;
48717: LD_ADDR_EXP 36
48721: PUSH
48722: LD_INT 1
48724: ST_TO_ADDR
// if p3 = 7 then
48725: LD_VAR 0 3
48729: PUSH
48730: LD_INT 7
48732: EQUAL
48733: IFFALSE 48743
// sRadar := true ;
48735: LD_ADDR_EXP 37
48739: PUSH
48740: LD_INT 1
48742: ST_TO_ADDR
// if p3 = 8 then
48743: LD_VAR 0 3
48747: PUSH
48748: LD_INT 8
48750: EQUAL
48751: IFFALSE 48761
// sBunker := true ;
48753: LD_ADDR_EXP 38
48757: PUSH
48758: LD_INT 1
48760: ST_TO_ADDR
// if p3 = 9 then
48761: LD_VAR 0 3
48765: PUSH
48766: LD_INT 9
48768: EQUAL
48769: IFFALSE 48779
// sHack := true ;
48771: LD_ADDR_EXP 39
48775: PUSH
48776: LD_INT 1
48778: ST_TO_ADDR
// if p3 = 10 then
48779: LD_VAR 0 3
48783: PUSH
48784: LD_INT 10
48786: EQUAL
48787: IFFALSE 48797
// sFire := true ;
48789: LD_ADDR_EXP 40
48793: PUSH
48794: LD_INT 1
48796: ST_TO_ADDR
// if p3 = 11 then
48797: LD_VAR 0 3
48801: PUSH
48802: LD_INT 11
48804: EQUAL
48805: IFFALSE 48815
// sRefresh := true ;
48807: LD_ADDR_EXP 41
48811: PUSH
48812: LD_INT 1
48814: ST_TO_ADDR
// if p3 = 12 then
48815: LD_VAR 0 3
48819: PUSH
48820: LD_INT 12
48822: EQUAL
48823: IFFALSE 48833
// sExp := true ;
48825: LD_ADDR_EXP 42
48829: PUSH
48830: LD_INT 1
48832: ST_TO_ADDR
// if p3 = 13 then
48833: LD_VAR 0 3
48837: PUSH
48838: LD_INT 13
48840: EQUAL
48841: IFFALSE 48851
// sDepot := true ;
48843: LD_ADDR_EXP 43
48847: PUSH
48848: LD_INT 1
48850: ST_TO_ADDR
// if p3 = 14 then
48851: LD_VAR 0 3
48855: PUSH
48856: LD_INT 14
48858: EQUAL
48859: IFFALSE 48869
// sFlag := true ;
48861: LD_ADDR_EXP 44
48865: PUSH
48866: LD_INT 1
48868: ST_TO_ADDR
// if p3 = 15 then
48869: LD_VAR 0 3
48873: PUSH
48874: LD_INT 15
48876: EQUAL
48877: IFFALSE 48887
// sKamikadze := true ;
48879: LD_ADDR_EXP 52
48883: PUSH
48884: LD_INT 1
48886: ST_TO_ADDR
// if p3 = 16 then
48887: LD_VAR 0 3
48891: PUSH
48892: LD_INT 16
48894: EQUAL
48895: IFFALSE 48905
// sTroll := true ;
48897: LD_ADDR_EXP 53
48901: PUSH
48902: LD_INT 1
48904: ST_TO_ADDR
// if p3 = 17 then
48905: LD_VAR 0 3
48909: PUSH
48910: LD_INT 17
48912: EQUAL
48913: IFFALSE 48923
// sSlow := true ;
48915: LD_ADDR_EXP 54
48919: PUSH
48920: LD_INT 1
48922: ST_TO_ADDR
// if p3 = 18 then
48923: LD_VAR 0 3
48927: PUSH
48928: LD_INT 18
48930: EQUAL
48931: IFFALSE 48941
// sLack := true ;
48933: LD_ADDR_EXP 55
48937: PUSH
48938: LD_INT 1
48940: ST_TO_ADDR
// if p3 = 19 then
48941: LD_VAR 0 3
48945: PUSH
48946: LD_INT 19
48948: EQUAL
48949: IFFALSE 48959
// sTank := true ;
48951: LD_ADDR_EXP 57
48955: PUSH
48956: LD_INT 1
48958: ST_TO_ADDR
// if p3 = 20 then
48959: LD_VAR 0 3
48963: PUSH
48964: LD_INT 20
48966: EQUAL
48967: IFFALSE 48977
// sRemote := true ;
48969: LD_ADDR_EXP 58
48973: PUSH
48974: LD_INT 1
48976: ST_TO_ADDR
// if p3 = 21 then
48977: LD_VAR 0 3
48981: PUSH
48982: LD_INT 21
48984: EQUAL
48985: IFFALSE 48995
// sPowell := true ;
48987: LD_ADDR_EXP 59
48991: PUSH
48992: LD_INT 1
48994: ST_TO_ADDR
// if p3 = 22 then
48995: LD_VAR 0 3
48999: PUSH
49000: LD_INT 22
49002: EQUAL
49003: IFFALSE 49013
// sTeleport := true ;
49005: LD_ADDR_EXP 62
49009: PUSH
49010: LD_INT 1
49012: ST_TO_ADDR
// if p3 = 23 then
49013: LD_VAR 0 3
49017: PUSH
49018: LD_INT 23
49020: EQUAL
49021: IFFALSE 49031
// sOilTower := true ;
49023: LD_ADDR_EXP 64
49027: PUSH
49028: LD_INT 1
49030: ST_TO_ADDR
// if p3 = 24 then
49031: LD_VAR 0 3
49035: PUSH
49036: LD_INT 24
49038: EQUAL
49039: IFFALSE 49049
// sShovel := true ;
49041: LD_ADDR_EXP 65
49045: PUSH
49046: LD_INT 1
49048: ST_TO_ADDR
// if p3 = 25 then
49049: LD_VAR 0 3
49053: PUSH
49054: LD_INT 25
49056: EQUAL
49057: IFFALSE 49067
// sSheik := true ;
49059: LD_ADDR_EXP 66
49063: PUSH
49064: LD_INT 1
49066: ST_TO_ADDR
// if p3 = 26 then
49067: LD_VAR 0 3
49071: PUSH
49072: LD_INT 26
49074: EQUAL
49075: IFFALSE 49085
// sEarthquake := true ;
49077: LD_ADDR_EXP 68
49081: PUSH
49082: LD_INT 1
49084: ST_TO_ADDR
// if p3 = 27 then
49085: LD_VAR 0 3
49089: PUSH
49090: LD_INT 27
49092: EQUAL
49093: IFFALSE 49103
// sAI := true ;
49095: LD_ADDR_EXP 69
49099: PUSH
49100: LD_INT 1
49102: ST_TO_ADDR
// if p3 = 28 then
49103: LD_VAR 0 3
49107: PUSH
49108: LD_INT 28
49110: EQUAL
49111: IFFALSE 49121
// sCargo := true ;
49113: LD_ADDR_EXP 72
49117: PUSH
49118: LD_INT 1
49120: ST_TO_ADDR
// if p3 = 29 then
49121: LD_VAR 0 3
49125: PUSH
49126: LD_INT 29
49128: EQUAL
49129: IFFALSE 49139
// sDLaser := true ;
49131: LD_ADDR_EXP 73
49135: PUSH
49136: LD_INT 1
49138: ST_TO_ADDR
// if p3 = 30 then
49139: LD_VAR 0 3
49143: PUSH
49144: LD_INT 30
49146: EQUAL
49147: IFFALSE 49157
// sExchange := true ;
49149: LD_ADDR_EXP 74
49153: PUSH
49154: LD_INT 1
49156: ST_TO_ADDR
// if p3 = 31 then
49157: LD_VAR 0 3
49161: PUSH
49162: LD_INT 31
49164: EQUAL
49165: IFFALSE 49175
// sFac := true ;
49167: LD_ADDR_EXP 75
49171: PUSH
49172: LD_INT 1
49174: ST_TO_ADDR
// if p3 = 32 then
49175: LD_VAR 0 3
49179: PUSH
49180: LD_INT 32
49182: EQUAL
49183: IFFALSE 49193
// sPower := true ;
49185: LD_ADDR_EXP 76
49189: PUSH
49190: LD_INT 1
49192: ST_TO_ADDR
// if p3 = 33 then
49193: LD_VAR 0 3
49197: PUSH
49198: LD_INT 33
49200: EQUAL
49201: IFFALSE 49211
// sRandom := true ;
49203: LD_ADDR_EXP 77
49207: PUSH
49208: LD_INT 1
49210: ST_TO_ADDR
// if p3 = 34 then
49211: LD_VAR 0 3
49215: PUSH
49216: LD_INT 34
49218: EQUAL
49219: IFFALSE 49229
// sShield := true ;
49221: LD_ADDR_EXP 78
49225: PUSH
49226: LD_INT 1
49228: ST_TO_ADDR
// if p3 = 35 then
49229: LD_VAR 0 3
49233: PUSH
49234: LD_INT 35
49236: EQUAL
49237: IFFALSE 49247
// sTime := true ;
49239: LD_ADDR_EXP 79
49243: PUSH
49244: LD_INT 1
49246: ST_TO_ADDR
// if p3 = 36 then
49247: LD_VAR 0 3
49251: PUSH
49252: LD_INT 36
49254: EQUAL
49255: IFFALSE 49265
// sTools := true ;
49257: LD_ADDR_EXP 80
49261: PUSH
49262: LD_INT 1
49264: ST_TO_ADDR
// if p3 = 101 then
49265: LD_VAR 0 3
49269: PUSH
49270: LD_INT 101
49272: EQUAL
49273: IFFALSE 49283
// sSold := true ;
49275: LD_ADDR_EXP 45
49279: PUSH
49280: LD_INT 1
49282: ST_TO_ADDR
// if p3 = 102 then
49283: LD_VAR 0 3
49287: PUSH
49288: LD_INT 102
49290: EQUAL
49291: IFFALSE 49301
// sDiff := true ;
49293: LD_ADDR_EXP 46
49297: PUSH
49298: LD_INT 1
49300: ST_TO_ADDR
// if p3 = 103 then
49301: LD_VAR 0 3
49305: PUSH
49306: LD_INT 103
49308: EQUAL
49309: IFFALSE 49319
// sFog := true ;
49311: LD_ADDR_EXP 49
49315: PUSH
49316: LD_INT 1
49318: ST_TO_ADDR
// if p3 = 104 then
49319: LD_VAR 0 3
49323: PUSH
49324: LD_INT 104
49326: EQUAL
49327: IFFALSE 49337
// sReset := true ;
49329: LD_ADDR_EXP 50
49333: PUSH
49334: LD_INT 1
49336: ST_TO_ADDR
// if p3 = 105 then
49337: LD_VAR 0 3
49341: PUSH
49342: LD_INT 105
49344: EQUAL
49345: IFFALSE 49355
// sSun := true ;
49347: LD_ADDR_EXP 51
49351: PUSH
49352: LD_INT 1
49354: ST_TO_ADDR
// if p3 = 106 then
49355: LD_VAR 0 3
49359: PUSH
49360: LD_INT 106
49362: EQUAL
49363: IFFALSE 49373
// sTiger := true ;
49365: LD_ADDR_EXP 47
49369: PUSH
49370: LD_INT 1
49372: ST_TO_ADDR
// if p3 = 107 then
49373: LD_VAR 0 3
49377: PUSH
49378: LD_INT 107
49380: EQUAL
49381: IFFALSE 49391
// sBomb := true ;
49383: LD_ADDR_EXP 48
49387: PUSH
49388: LD_INT 1
49390: ST_TO_ADDR
// if p3 = 108 then
49391: LD_VAR 0 3
49395: PUSH
49396: LD_INT 108
49398: EQUAL
49399: IFFALSE 49409
// sWound := true ;
49401: LD_ADDR_EXP 56
49405: PUSH
49406: LD_INT 1
49408: ST_TO_ADDR
// if p3 = 109 then
49409: LD_VAR 0 3
49413: PUSH
49414: LD_INT 109
49416: EQUAL
49417: IFFALSE 49427
// sBetray := true ;
49419: LD_ADDR_EXP 60
49423: PUSH
49424: LD_INT 1
49426: ST_TO_ADDR
// if p3 = 110 then
49427: LD_VAR 0 3
49431: PUSH
49432: LD_INT 110
49434: EQUAL
49435: IFFALSE 49445
// sContamin := true ;
49437: LD_ADDR_EXP 61
49441: PUSH
49442: LD_INT 1
49444: ST_TO_ADDR
// if p3 = 111 then
49445: LD_VAR 0 3
49449: PUSH
49450: LD_INT 111
49452: EQUAL
49453: IFFALSE 49463
// sOil := true ;
49455: LD_ADDR_EXP 63
49459: PUSH
49460: LD_INT 1
49462: ST_TO_ADDR
// if p3 = 112 then
49463: LD_VAR 0 3
49467: PUSH
49468: LD_INT 112
49470: EQUAL
49471: IFFALSE 49481
// sStu := true ;
49473: LD_ADDR_EXP 67
49477: PUSH
49478: LD_INT 1
49480: ST_TO_ADDR
// if p3 = 113 then
49481: LD_VAR 0 3
49485: PUSH
49486: LD_INT 113
49488: EQUAL
49489: IFFALSE 49499
// sBazooka := true ;
49491: LD_ADDR_EXP 70
49495: PUSH
49496: LD_INT 1
49498: ST_TO_ADDR
// if p3 = 114 then
49499: LD_VAR 0 3
49503: PUSH
49504: LD_INT 114
49506: EQUAL
49507: IFFALSE 49517
// sMortar := true ;
49509: LD_ADDR_EXP 71
49513: PUSH
49514: LD_INT 1
49516: ST_TO_ADDR
// if p3 = 115 then
49517: LD_VAR 0 3
49521: PUSH
49522: LD_INT 115
49524: EQUAL
49525: IFFALSE 49535
// sRanger := true ;
49527: LD_ADDR_EXP 81
49531: PUSH
49532: LD_INT 1
49534: ST_TO_ADDR
// if p3 = 116 then
49535: LD_VAR 0 3
49539: PUSH
49540: LD_INT 116
49542: EQUAL
49543: IFFALSE 49553
// sComputer := true ;
49545: LD_ADDR_EXP 82
49549: PUSH
49550: LD_INT 1
49552: ST_TO_ADDR
// if p3 = 117 then
49553: LD_VAR 0 3
49557: PUSH
49558: LD_INT 117
49560: EQUAL
49561: IFFALSE 49571
// s30 := true ;
49563: LD_ADDR_EXP 83
49567: PUSH
49568: LD_INT 1
49570: ST_TO_ADDR
// if p3 = 118 then
49571: LD_VAR 0 3
49575: PUSH
49576: LD_INT 118
49578: EQUAL
49579: IFFALSE 49589
// s60 := true ;
49581: LD_ADDR_EXP 84
49585: PUSH
49586: LD_INT 1
49588: ST_TO_ADDR
// end ; if p2 = hack_mode then
49589: LD_VAR 0 2
49593: PUSH
49594: LD_INT 101
49596: EQUAL
49597: IFFALSE 49725
// begin case p3 of 1 :
49599: LD_VAR 0 3
49603: PUSH
49604: LD_INT 1
49606: DOUBLE
49607: EQUAL
49608: IFTRUE 49612
49610: GO 49619
49612: POP
// hHackUnlimitedResources ; 2 :
49613: CALL 61988 0 0
49617: GO 49725
49619: LD_INT 2
49621: DOUBLE
49622: EQUAL
49623: IFTRUE 49627
49625: GO 49634
49627: POP
// hHackSetLevel10 ; 3 :
49628: CALL 62121 0 0
49632: GO 49725
49634: LD_INT 3
49636: DOUBLE
49637: EQUAL
49638: IFTRUE 49642
49640: GO 49649
49642: POP
// hHackSetLevel10YourUnits ; 4 :
49643: CALL 62206 0 0
49647: GO 49725
49649: LD_INT 4
49651: DOUBLE
49652: EQUAL
49653: IFTRUE 49657
49655: GO 49664
49657: POP
// hHackInvincible ; 5 :
49658: CALL 62654 0 0
49662: GO 49725
49664: LD_INT 5
49666: DOUBLE
49667: EQUAL
49668: IFTRUE 49672
49670: GO 49679
49672: POP
// hHackInvisible ; 6 :
49673: CALL 62765 0 0
49677: GO 49725
49679: LD_INT 6
49681: DOUBLE
49682: EQUAL
49683: IFTRUE 49687
49685: GO 49694
49687: POP
// hHackChangeYourSide ; 7 :
49688: CALL 62822 0 0
49692: GO 49725
49694: LD_INT 7
49696: DOUBLE
49697: EQUAL
49698: IFTRUE 49702
49700: GO 49709
49702: POP
// hHackChangeUnitSide ; 8 :
49703: CALL 62864 0 0
49707: GO 49725
49709: LD_INT 8
49711: DOUBLE
49712: EQUAL
49713: IFTRUE 49717
49715: GO 49724
49717: POP
// hHackFog ; end ;
49718: CALL 62965 0 0
49722: GO 49725
49724: POP
// end ; if p2 = game_save_mode then
49725: LD_VAR 0 2
49729: PUSH
49730: LD_INT 102
49732: EQUAL
49733: IFFALSE 49790
// begin if p3 = 1 then
49735: LD_VAR 0 3
49739: PUSH
49740: LD_INT 1
49742: EQUAL
49743: IFFALSE 49755
// globalGameSaveCounter := p4 ;
49745: LD_ADDR_EXP 27
49749: PUSH
49750: LD_VAR 0 4
49754: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49755: LD_VAR 0 3
49759: PUSH
49760: LD_INT 2
49762: EQUAL
49763: IFFALSE 49771
49765: PUSH
49766: LD_EXP 27
49770: AND
49771: IFFALSE 49790
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49773: LD_STRING setGameSaveCounter(
49775: PUSH
49776: LD_EXP 27
49780: STR
49781: PUSH
49782: LD_STRING )
49784: STR
49785: PPUSH
49786: CALL_OW 559
// end ; end ;
49790: LD_VAR 0 7
49794: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49795: LD_INT 0
49797: PPUSH
// streamModeActive := false ;
49798: LD_ADDR_EXP 28
49802: PUSH
49803: LD_INT 0
49805: ST_TO_ADDR
// normalCounter := 36 ;
49806: LD_ADDR_EXP 29
49810: PUSH
49811: LD_INT 36
49813: ST_TO_ADDR
// hardcoreCounter := 18 ;
49814: LD_ADDR_EXP 30
49818: PUSH
49819: LD_INT 18
49821: ST_TO_ADDR
// sRocket := false ;
49822: LD_ADDR_EXP 33
49826: PUSH
49827: LD_INT 0
49829: ST_TO_ADDR
// sSpeed := false ;
49830: LD_ADDR_EXP 32
49834: PUSH
49835: LD_INT 0
49837: ST_TO_ADDR
// sEngine := false ;
49838: LD_ADDR_EXP 34
49842: PUSH
49843: LD_INT 0
49845: ST_TO_ADDR
// sSpec := false ;
49846: LD_ADDR_EXP 31
49850: PUSH
49851: LD_INT 0
49853: ST_TO_ADDR
// sLevel := false ;
49854: LD_ADDR_EXP 35
49858: PUSH
49859: LD_INT 0
49861: ST_TO_ADDR
// sArmoury := false ;
49862: LD_ADDR_EXP 36
49866: PUSH
49867: LD_INT 0
49869: ST_TO_ADDR
// sRadar := false ;
49870: LD_ADDR_EXP 37
49874: PUSH
49875: LD_INT 0
49877: ST_TO_ADDR
// sBunker := false ;
49878: LD_ADDR_EXP 38
49882: PUSH
49883: LD_INT 0
49885: ST_TO_ADDR
// sHack := false ;
49886: LD_ADDR_EXP 39
49890: PUSH
49891: LD_INT 0
49893: ST_TO_ADDR
// sFire := false ;
49894: LD_ADDR_EXP 40
49898: PUSH
49899: LD_INT 0
49901: ST_TO_ADDR
// sRefresh := false ;
49902: LD_ADDR_EXP 41
49906: PUSH
49907: LD_INT 0
49909: ST_TO_ADDR
// sExp := false ;
49910: LD_ADDR_EXP 42
49914: PUSH
49915: LD_INT 0
49917: ST_TO_ADDR
// sDepot := false ;
49918: LD_ADDR_EXP 43
49922: PUSH
49923: LD_INT 0
49925: ST_TO_ADDR
// sFlag := false ;
49926: LD_ADDR_EXP 44
49930: PUSH
49931: LD_INT 0
49933: ST_TO_ADDR
// sKamikadze := false ;
49934: LD_ADDR_EXP 52
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// sTroll := false ;
49942: LD_ADDR_EXP 53
49946: PUSH
49947: LD_INT 0
49949: ST_TO_ADDR
// sSlow := false ;
49950: LD_ADDR_EXP 54
49954: PUSH
49955: LD_INT 0
49957: ST_TO_ADDR
// sLack := false ;
49958: LD_ADDR_EXP 55
49962: PUSH
49963: LD_INT 0
49965: ST_TO_ADDR
// sTank := false ;
49966: LD_ADDR_EXP 57
49970: PUSH
49971: LD_INT 0
49973: ST_TO_ADDR
// sRemote := false ;
49974: LD_ADDR_EXP 58
49978: PUSH
49979: LD_INT 0
49981: ST_TO_ADDR
// sPowell := false ;
49982: LD_ADDR_EXP 59
49986: PUSH
49987: LD_INT 0
49989: ST_TO_ADDR
// sTeleport := false ;
49990: LD_ADDR_EXP 62
49994: PUSH
49995: LD_INT 0
49997: ST_TO_ADDR
// sOilTower := false ;
49998: LD_ADDR_EXP 64
50002: PUSH
50003: LD_INT 0
50005: ST_TO_ADDR
// sShovel := false ;
50006: LD_ADDR_EXP 65
50010: PUSH
50011: LD_INT 0
50013: ST_TO_ADDR
// sSheik := false ;
50014: LD_ADDR_EXP 66
50018: PUSH
50019: LD_INT 0
50021: ST_TO_ADDR
// sEarthquake := false ;
50022: LD_ADDR_EXP 68
50026: PUSH
50027: LD_INT 0
50029: ST_TO_ADDR
// sAI := false ;
50030: LD_ADDR_EXP 69
50034: PUSH
50035: LD_INT 0
50037: ST_TO_ADDR
// sCargo := false ;
50038: LD_ADDR_EXP 72
50042: PUSH
50043: LD_INT 0
50045: ST_TO_ADDR
// sDLaser := false ;
50046: LD_ADDR_EXP 73
50050: PUSH
50051: LD_INT 0
50053: ST_TO_ADDR
// sExchange := false ;
50054: LD_ADDR_EXP 74
50058: PUSH
50059: LD_INT 0
50061: ST_TO_ADDR
// sFac := false ;
50062: LD_ADDR_EXP 75
50066: PUSH
50067: LD_INT 0
50069: ST_TO_ADDR
// sPower := false ;
50070: LD_ADDR_EXP 76
50074: PUSH
50075: LD_INT 0
50077: ST_TO_ADDR
// sRandom := false ;
50078: LD_ADDR_EXP 77
50082: PUSH
50083: LD_INT 0
50085: ST_TO_ADDR
// sShield := false ;
50086: LD_ADDR_EXP 78
50090: PUSH
50091: LD_INT 0
50093: ST_TO_ADDR
// sTime := false ;
50094: LD_ADDR_EXP 79
50098: PUSH
50099: LD_INT 0
50101: ST_TO_ADDR
// sTools := false ;
50102: LD_ADDR_EXP 80
50106: PUSH
50107: LD_INT 0
50109: ST_TO_ADDR
// sSold := false ;
50110: LD_ADDR_EXP 45
50114: PUSH
50115: LD_INT 0
50117: ST_TO_ADDR
// sDiff := false ;
50118: LD_ADDR_EXP 46
50122: PUSH
50123: LD_INT 0
50125: ST_TO_ADDR
// sFog := false ;
50126: LD_ADDR_EXP 49
50130: PUSH
50131: LD_INT 0
50133: ST_TO_ADDR
// sReset := false ;
50134: LD_ADDR_EXP 50
50138: PUSH
50139: LD_INT 0
50141: ST_TO_ADDR
// sSun := false ;
50142: LD_ADDR_EXP 51
50146: PUSH
50147: LD_INT 0
50149: ST_TO_ADDR
// sTiger := false ;
50150: LD_ADDR_EXP 47
50154: PUSH
50155: LD_INT 0
50157: ST_TO_ADDR
// sBomb := false ;
50158: LD_ADDR_EXP 48
50162: PUSH
50163: LD_INT 0
50165: ST_TO_ADDR
// sWound := false ;
50166: LD_ADDR_EXP 56
50170: PUSH
50171: LD_INT 0
50173: ST_TO_ADDR
// sBetray := false ;
50174: LD_ADDR_EXP 60
50178: PUSH
50179: LD_INT 0
50181: ST_TO_ADDR
// sContamin := false ;
50182: LD_ADDR_EXP 61
50186: PUSH
50187: LD_INT 0
50189: ST_TO_ADDR
// sOil := false ;
50190: LD_ADDR_EXP 63
50194: PUSH
50195: LD_INT 0
50197: ST_TO_ADDR
// sStu := false ;
50198: LD_ADDR_EXP 67
50202: PUSH
50203: LD_INT 0
50205: ST_TO_ADDR
// sBazooka := false ;
50206: LD_ADDR_EXP 70
50210: PUSH
50211: LD_INT 0
50213: ST_TO_ADDR
// sMortar := false ;
50214: LD_ADDR_EXP 71
50218: PUSH
50219: LD_INT 0
50221: ST_TO_ADDR
// sRanger := false ;
50222: LD_ADDR_EXP 81
50226: PUSH
50227: LD_INT 0
50229: ST_TO_ADDR
// sComputer := false ;
50230: LD_ADDR_EXP 82
50234: PUSH
50235: LD_INT 0
50237: ST_TO_ADDR
// s30 := false ;
50238: LD_ADDR_EXP 83
50242: PUSH
50243: LD_INT 0
50245: ST_TO_ADDR
// s60 := false ;
50246: LD_ADDR_EXP 84
50250: PUSH
50251: LD_INT 0
50253: ST_TO_ADDR
// end ;
50254: LD_VAR 0 1
50258: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50259: LD_INT 0
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
50267: PPUSH
// result := [ ] ;
50268: LD_ADDR_VAR 0 2
50272: PUSH
50273: EMPTY
50274: ST_TO_ADDR
// if campaign_id = 1 then
50275: LD_OWVAR 69
50279: PUSH
50280: LD_INT 1
50282: EQUAL
50283: IFFALSE 53449
// begin case mission_number of 1 :
50285: LD_OWVAR 70
50289: PUSH
50290: LD_INT 1
50292: DOUBLE
50293: EQUAL
50294: IFTRUE 50298
50296: GO 50374
50298: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50299: LD_ADDR_VAR 0 2
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 4
50309: PUSH
50310: LD_INT 11
50312: PUSH
50313: LD_INT 12
50315: PUSH
50316: LD_INT 15
50318: PUSH
50319: LD_INT 16
50321: PUSH
50322: LD_INT 22
50324: PUSH
50325: LD_INT 23
50327: PUSH
50328: LD_INT 26
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 101
50344: PUSH
50345: LD_INT 102
50347: PUSH
50348: LD_INT 106
50350: PUSH
50351: LD_INT 116
50353: PUSH
50354: LD_INT 117
50356: PUSH
50357: LD_INT 118
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: ST_TO_ADDR
50372: GO 53447
50374: LD_INT 2
50376: DOUBLE
50377: EQUAL
50378: IFTRUE 50382
50380: GO 50466
50382: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50383: LD_ADDR_VAR 0 2
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 4
50393: PUSH
50394: LD_INT 11
50396: PUSH
50397: LD_INT 12
50399: PUSH
50400: LD_INT 15
50402: PUSH
50403: LD_INT 16
50405: PUSH
50406: LD_INT 22
50408: PUSH
50409: LD_INT 23
50411: PUSH
50412: LD_INT 26
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 101
50428: PUSH
50429: LD_INT 102
50431: PUSH
50432: LD_INT 105
50434: PUSH
50435: LD_INT 106
50437: PUSH
50438: LD_INT 108
50440: PUSH
50441: LD_INT 116
50443: PUSH
50444: LD_INT 117
50446: PUSH
50447: LD_INT 118
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: ST_TO_ADDR
50464: GO 53447
50466: LD_INT 3
50468: DOUBLE
50469: EQUAL
50470: IFTRUE 50474
50472: GO 50562
50474: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50475: LD_ADDR_VAR 0 2
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 4
50485: PUSH
50486: LD_INT 5
50488: PUSH
50489: LD_INT 11
50491: PUSH
50492: LD_INT 12
50494: PUSH
50495: LD_INT 15
50497: PUSH
50498: LD_INT 16
50500: PUSH
50501: LD_INT 22
50503: PUSH
50504: LD_INT 26
50506: PUSH
50507: LD_INT 36
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 101
50524: PUSH
50525: LD_INT 102
50527: PUSH
50528: LD_INT 105
50530: PUSH
50531: LD_INT 106
50533: PUSH
50534: LD_INT 108
50536: PUSH
50537: LD_INT 116
50539: PUSH
50540: LD_INT 117
50542: PUSH
50543: LD_INT 118
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: ST_TO_ADDR
50560: GO 53447
50562: LD_INT 4
50564: DOUBLE
50565: EQUAL
50566: IFTRUE 50570
50568: GO 50666
50570: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50571: LD_ADDR_VAR 0 2
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: LD_INT 4
50581: PUSH
50582: LD_INT 5
50584: PUSH
50585: LD_INT 8
50587: PUSH
50588: LD_INT 11
50590: PUSH
50591: LD_INT 12
50593: PUSH
50594: LD_INT 15
50596: PUSH
50597: LD_INT 16
50599: PUSH
50600: LD_INT 22
50602: PUSH
50603: LD_INT 23
50605: PUSH
50606: LD_INT 26
50608: PUSH
50609: LD_INT 36
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 101
50628: PUSH
50629: LD_INT 102
50631: PUSH
50632: LD_INT 105
50634: PUSH
50635: LD_INT 106
50637: PUSH
50638: LD_INT 108
50640: PUSH
50641: LD_INT 116
50643: PUSH
50644: LD_INT 117
50646: PUSH
50647: LD_INT 118
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: ST_TO_ADDR
50664: GO 53447
50666: LD_INT 5
50668: DOUBLE
50669: EQUAL
50670: IFTRUE 50674
50672: GO 50786
50674: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50675: LD_ADDR_VAR 0 2
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 4
50685: PUSH
50686: LD_INT 5
50688: PUSH
50689: LD_INT 6
50691: PUSH
50692: LD_INT 8
50694: PUSH
50695: LD_INT 11
50697: PUSH
50698: LD_INT 12
50700: PUSH
50701: LD_INT 15
50703: PUSH
50704: LD_INT 16
50706: PUSH
50707: LD_INT 22
50709: PUSH
50710: LD_INT 23
50712: PUSH
50713: LD_INT 25
50715: PUSH
50716: LD_INT 26
50718: PUSH
50719: LD_INT 36
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 101
50740: PUSH
50741: LD_INT 102
50743: PUSH
50744: LD_INT 105
50746: PUSH
50747: LD_INT 106
50749: PUSH
50750: LD_INT 108
50752: PUSH
50753: LD_INT 109
50755: PUSH
50756: LD_INT 112
50758: PUSH
50759: LD_INT 116
50761: PUSH
50762: LD_INT 117
50764: PUSH
50765: LD_INT 118
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: ST_TO_ADDR
50784: GO 53447
50786: LD_INT 6
50788: DOUBLE
50789: EQUAL
50790: IFTRUE 50794
50792: GO 50926
50794: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50795: LD_ADDR_VAR 0 2
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: LD_INT 4
50805: PUSH
50806: LD_INT 5
50808: PUSH
50809: LD_INT 6
50811: PUSH
50812: LD_INT 8
50814: PUSH
50815: LD_INT 11
50817: PUSH
50818: LD_INT 12
50820: PUSH
50821: LD_INT 15
50823: PUSH
50824: LD_INT 16
50826: PUSH
50827: LD_INT 20
50829: PUSH
50830: LD_INT 21
50832: PUSH
50833: LD_INT 22
50835: PUSH
50836: LD_INT 23
50838: PUSH
50839: LD_INT 25
50841: PUSH
50842: LD_INT 26
50844: PUSH
50845: LD_INT 30
50847: PUSH
50848: LD_INT 31
50850: PUSH
50851: LD_INT 32
50853: PUSH
50854: LD_INT 36
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 101
50880: PUSH
50881: LD_INT 102
50883: PUSH
50884: LD_INT 105
50886: PUSH
50887: LD_INT 106
50889: PUSH
50890: LD_INT 108
50892: PUSH
50893: LD_INT 109
50895: PUSH
50896: LD_INT 112
50898: PUSH
50899: LD_INT 116
50901: PUSH
50902: LD_INT 117
50904: PUSH
50905: LD_INT 118
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: ST_TO_ADDR
50924: GO 53447
50926: LD_INT 7
50928: DOUBLE
50929: EQUAL
50930: IFTRUE 50934
50932: GO 51046
50934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50935: LD_ADDR_VAR 0 2
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 4
50945: PUSH
50946: LD_INT 5
50948: PUSH
50949: LD_INT 7
50951: PUSH
50952: LD_INT 11
50954: PUSH
50955: LD_INT 12
50957: PUSH
50958: LD_INT 15
50960: PUSH
50961: LD_INT 16
50963: PUSH
50964: LD_INT 20
50966: PUSH
50967: LD_INT 21
50969: PUSH
50970: LD_INT 22
50972: PUSH
50973: LD_INT 23
50975: PUSH
50976: LD_INT 25
50978: PUSH
50979: LD_INT 26
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 101
51000: PUSH
51001: LD_INT 102
51003: PUSH
51004: LD_INT 103
51006: PUSH
51007: LD_INT 105
51009: PUSH
51010: LD_INT 106
51012: PUSH
51013: LD_INT 108
51015: PUSH
51016: LD_INT 112
51018: PUSH
51019: LD_INT 116
51021: PUSH
51022: LD_INT 117
51024: PUSH
51025: LD_INT 118
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: ST_TO_ADDR
51044: GO 53447
51046: LD_INT 8
51048: DOUBLE
51049: EQUAL
51050: IFTRUE 51054
51052: GO 51194
51054: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51055: LD_ADDR_VAR 0 2
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: LD_INT 5
51068: PUSH
51069: LD_INT 6
51071: PUSH
51072: LD_INT 7
51074: PUSH
51075: LD_INT 8
51077: PUSH
51078: LD_INT 11
51080: PUSH
51081: LD_INT 12
51083: PUSH
51084: LD_INT 15
51086: PUSH
51087: LD_INT 16
51089: PUSH
51090: LD_INT 20
51092: PUSH
51093: LD_INT 21
51095: PUSH
51096: LD_INT 22
51098: PUSH
51099: LD_INT 23
51101: PUSH
51102: LD_INT 25
51104: PUSH
51105: LD_INT 26
51107: PUSH
51108: LD_INT 30
51110: PUSH
51111: LD_INT 31
51113: PUSH
51114: LD_INT 32
51116: PUSH
51117: LD_INT 36
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 101
51144: PUSH
51145: LD_INT 102
51147: PUSH
51148: LD_INT 103
51150: PUSH
51151: LD_INT 105
51153: PUSH
51154: LD_INT 106
51156: PUSH
51157: LD_INT 108
51159: PUSH
51160: LD_INT 109
51162: PUSH
51163: LD_INT 112
51165: PUSH
51166: LD_INT 116
51168: PUSH
51169: LD_INT 117
51171: PUSH
51172: LD_INT 118
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: ST_TO_ADDR
51192: GO 53447
51194: LD_INT 9
51196: DOUBLE
51197: EQUAL
51198: IFTRUE 51202
51200: GO 51350
51202: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51203: LD_ADDR_VAR 0 2
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: LD_INT 4
51213: PUSH
51214: LD_INT 5
51216: PUSH
51217: LD_INT 6
51219: PUSH
51220: LD_INT 7
51222: PUSH
51223: LD_INT 8
51225: PUSH
51226: LD_INT 11
51228: PUSH
51229: LD_INT 12
51231: PUSH
51232: LD_INT 15
51234: PUSH
51235: LD_INT 16
51237: PUSH
51238: LD_INT 20
51240: PUSH
51241: LD_INT 21
51243: PUSH
51244: LD_INT 22
51246: PUSH
51247: LD_INT 23
51249: PUSH
51250: LD_INT 25
51252: PUSH
51253: LD_INT 26
51255: PUSH
51256: LD_INT 28
51258: PUSH
51259: LD_INT 30
51261: PUSH
51262: LD_INT 31
51264: PUSH
51265: LD_INT 32
51267: PUSH
51268: LD_INT 36
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 101
51296: PUSH
51297: LD_INT 102
51299: PUSH
51300: LD_INT 103
51302: PUSH
51303: LD_INT 105
51305: PUSH
51306: LD_INT 106
51308: PUSH
51309: LD_INT 108
51311: PUSH
51312: LD_INT 109
51314: PUSH
51315: LD_INT 112
51317: PUSH
51318: LD_INT 114
51320: PUSH
51321: LD_INT 116
51323: PUSH
51324: LD_INT 117
51326: PUSH
51327: LD_INT 118
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: ST_TO_ADDR
51348: GO 53447
51350: LD_INT 10
51352: DOUBLE
51353: EQUAL
51354: IFTRUE 51358
51356: GO 51554
51358: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51359: LD_ADDR_VAR 0 2
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 4
51369: PUSH
51370: LD_INT 5
51372: PUSH
51373: LD_INT 6
51375: PUSH
51376: LD_INT 7
51378: PUSH
51379: LD_INT 8
51381: PUSH
51382: LD_INT 9
51384: PUSH
51385: LD_INT 10
51387: PUSH
51388: LD_INT 11
51390: PUSH
51391: LD_INT 12
51393: PUSH
51394: LD_INT 13
51396: PUSH
51397: LD_INT 14
51399: PUSH
51400: LD_INT 15
51402: PUSH
51403: LD_INT 16
51405: PUSH
51406: LD_INT 17
51408: PUSH
51409: LD_INT 18
51411: PUSH
51412: LD_INT 19
51414: PUSH
51415: LD_INT 20
51417: PUSH
51418: LD_INT 21
51420: PUSH
51421: LD_INT 22
51423: PUSH
51424: LD_INT 23
51426: PUSH
51427: LD_INT 24
51429: PUSH
51430: LD_INT 25
51432: PUSH
51433: LD_INT 26
51435: PUSH
51436: LD_INT 28
51438: PUSH
51439: LD_INT 30
51441: PUSH
51442: LD_INT 31
51444: PUSH
51445: LD_INT 32
51447: PUSH
51448: LD_INT 36
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 101
51484: PUSH
51485: LD_INT 102
51487: PUSH
51488: LD_INT 103
51490: PUSH
51491: LD_INT 104
51493: PUSH
51494: LD_INT 105
51496: PUSH
51497: LD_INT 106
51499: PUSH
51500: LD_INT 107
51502: PUSH
51503: LD_INT 108
51505: PUSH
51506: LD_INT 109
51508: PUSH
51509: LD_INT 110
51511: PUSH
51512: LD_INT 111
51514: PUSH
51515: LD_INT 112
51517: PUSH
51518: LD_INT 114
51520: PUSH
51521: LD_INT 116
51523: PUSH
51524: LD_INT 117
51526: PUSH
51527: LD_INT 118
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: ST_TO_ADDR
51552: GO 53447
51554: LD_INT 11
51556: DOUBLE
51557: EQUAL
51558: IFTRUE 51562
51560: GO 51766
51562: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51563: LD_ADDR_VAR 0 2
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 4
51576: PUSH
51577: LD_INT 5
51579: PUSH
51580: LD_INT 6
51582: PUSH
51583: LD_INT 7
51585: PUSH
51586: LD_INT 8
51588: PUSH
51589: LD_INT 9
51591: PUSH
51592: LD_INT 10
51594: PUSH
51595: LD_INT 11
51597: PUSH
51598: LD_INT 12
51600: PUSH
51601: LD_INT 13
51603: PUSH
51604: LD_INT 14
51606: PUSH
51607: LD_INT 15
51609: PUSH
51610: LD_INT 16
51612: PUSH
51613: LD_INT 17
51615: PUSH
51616: LD_INT 18
51618: PUSH
51619: LD_INT 19
51621: PUSH
51622: LD_INT 20
51624: PUSH
51625: LD_INT 21
51627: PUSH
51628: LD_INT 22
51630: PUSH
51631: LD_INT 23
51633: PUSH
51634: LD_INT 24
51636: PUSH
51637: LD_INT 25
51639: PUSH
51640: LD_INT 26
51642: PUSH
51643: LD_INT 28
51645: PUSH
51646: LD_INT 30
51648: PUSH
51649: LD_INT 31
51651: PUSH
51652: LD_INT 32
51654: PUSH
51655: LD_INT 34
51657: PUSH
51658: LD_INT 36
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 101
51696: PUSH
51697: LD_INT 102
51699: PUSH
51700: LD_INT 103
51702: PUSH
51703: LD_INT 104
51705: PUSH
51706: LD_INT 105
51708: PUSH
51709: LD_INT 106
51711: PUSH
51712: LD_INT 107
51714: PUSH
51715: LD_INT 108
51717: PUSH
51718: LD_INT 109
51720: PUSH
51721: LD_INT 110
51723: PUSH
51724: LD_INT 111
51726: PUSH
51727: LD_INT 112
51729: PUSH
51730: LD_INT 114
51732: PUSH
51733: LD_INT 116
51735: PUSH
51736: LD_INT 117
51738: PUSH
51739: LD_INT 118
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: ST_TO_ADDR
51764: GO 53447
51766: LD_INT 12
51768: DOUBLE
51769: EQUAL
51770: IFTRUE 51774
51772: GO 51994
51774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51775: LD_ADDR_VAR 0 2
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: LD_INT 4
51791: PUSH
51792: LD_INT 5
51794: PUSH
51795: LD_INT 6
51797: PUSH
51798: LD_INT 7
51800: PUSH
51801: LD_INT 8
51803: PUSH
51804: LD_INT 9
51806: PUSH
51807: LD_INT 10
51809: PUSH
51810: LD_INT 11
51812: PUSH
51813: LD_INT 12
51815: PUSH
51816: LD_INT 13
51818: PUSH
51819: LD_INT 14
51821: PUSH
51822: LD_INT 15
51824: PUSH
51825: LD_INT 16
51827: PUSH
51828: LD_INT 17
51830: PUSH
51831: LD_INT 18
51833: PUSH
51834: LD_INT 19
51836: PUSH
51837: LD_INT 20
51839: PUSH
51840: LD_INT 21
51842: PUSH
51843: LD_INT 22
51845: PUSH
51846: LD_INT 23
51848: PUSH
51849: LD_INT 24
51851: PUSH
51852: LD_INT 25
51854: PUSH
51855: LD_INT 26
51857: PUSH
51858: LD_INT 27
51860: PUSH
51861: LD_INT 28
51863: PUSH
51864: LD_INT 30
51866: PUSH
51867: LD_INT 31
51869: PUSH
51870: LD_INT 32
51872: PUSH
51873: LD_INT 33
51875: PUSH
51876: LD_INT 34
51878: PUSH
51879: LD_INT 36
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 101
51920: PUSH
51921: LD_INT 102
51923: PUSH
51924: LD_INT 103
51926: PUSH
51927: LD_INT 104
51929: PUSH
51930: LD_INT 105
51932: PUSH
51933: LD_INT 106
51935: PUSH
51936: LD_INT 107
51938: PUSH
51939: LD_INT 108
51941: PUSH
51942: LD_INT 109
51944: PUSH
51945: LD_INT 110
51947: PUSH
51948: LD_INT 111
51950: PUSH
51951: LD_INT 112
51953: PUSH
51954: LD_INT 113
51956: PUSH
51957: LD_INT 114
51959: PUSH
51960: LD_INT 116
51962: PUSH
51963: LD_INT 117
51965: PUSH
51966: LD_INT 118
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: ST_TO_ADDR
51992: GO 53447
51994: LD_INT 13
51996: DOUBLE
51997: EQUAL
51998: IFTRUE 52002
52000: GO 52210
52002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52003: LD_ADDR_VAR 0 2
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 3
52016: PUSH
52017: LD_INT 4
52019: PUSH
52020: LD_INT 5
52022: PUSH
52023: LD_INT 8
52025: PUSH
52026: LD_INT 9
52028: PUSH
52029: LD_INT 10
52031: PUSH
52032: LD_INT 11
52034: PUSH
52035: LD_INT 12
52037: PUSH
52038: LD_INT 14
52040: PUSH
52041: LD_INT 15
52043: PUSH
52044: LD_INT 16
52046: PUSH
52047: LD_INT 17
52049: PUSH
52050: LD_INT 18
52052: PUSH
52053: LD_INT 19
52055: PUSH
52056: LD_INT 20
52058: PUSH
52059: LD_INT 21
52061: PUSH
52062: LD_INT 22
52064: PUSH
52065: LD_INT 23
52067: PUSH
52068: LD_INT 24
52070: PUSH
52071: LD_INT 25
52073: PUSH
52074: LD_INT 26
52076: PUSH
52077: LD_INT 27
52079: PUSH
52080: LD_INT 28
52082: PUSH
52083: LD_INT 30
52085: PUSH
52086: LD_INT 31
52088: PUSH
52089: LD_INT 32
52091: PUSH
52092: LD_INT 33
52094: PUSH
52095: LD_INT 34
52097: PUSH
52098: LD_INT 36
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 101
52136: PUSH
52137: LD_INT 102
52139: PUSH
52140: LD_INT 103
52142: PUSH
52143: LD_INT 104
52145: PUSH
52146: LD_INT 105
52148: PUSH
52149: LD_INT 106
52151: PUSH
52152: LD_INT 107
52154: PUSH
52155: LD_INT 108
52157: PUSH
52158: LD_INT 109
52160: PUSH
52161: LD_INT 110
52163: PUSH
52164: LD_INT 111
52166: PUSH
52167: LD_INT 112
52169: PUSH
52170: LD_INT 113
52172: PUSH
52173: LD_INT 114
52175: PUSH
52176: LD_INT 116
52178: PUSH
52179: LD_INT 117
52181: PUSH
52182: LD_INT 118
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: ST_TO_ADDR
52208: GO 53447
52210: LD_INT 14
52212: DOUBLE
52213: EQUAL
52214: IFTRUE 52218
52216: GO 52442
52218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52219: LD_ADDR_VAR 0 2
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: LD_INT 6
52241: PUSH
52242: LD_INT 7
52244: PUSH
52245: LD_INT 8
52247: PUSH
52248: LD_INT 9
52250: PUSH
52251: LD_INT 10
52253: PUSH
52254: LD_INT 11
52256: PUSH
52257: LD_INT 12
52259: PUSH
52260: LD_INT 13
52262: PUSH
52263: LD_INT 14
52265: PUSH
52266: LD_INT 15
52268: PUSH
52269: LD_INT 16
52271: PUSH
52272: LD_INT 17
52274: PUSH
52275: LD_INT 18
52277: PUSH
52278: LD_INT 19
52280: PUSH
52281: LD_INT 20
52283: PUSH
52284: LD_INT 21
52286: PUSH
52287: LD_INT 22
52289: PUSH
52290: LD_INT 23
52292: PUSH
52293: LD_INT 24
52295: PUSH
52296: LD_INT 25
52298: PUSH
52299: LD_INT 26
52301: PUSH
52302: LD_INT 27
52304: PUSH
52305: LD_INT 28
52307: PUSH
52308: LD_INT 29
52310: PUSH
52311: LD_INT 30
52313: PUSH
52314: LD_INT 31
52316: PUSH
52317: LD_INT 32
52319: PUSH
52320: LD_INT 33
52322: PUSH
52323: LD_INT 34
52325: PUSH
52326: LD_INT 36
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 101
52368: PUSH
52369: LD_INT 102
52371: PUSH
52372: LD_INT 103
52374: PUSH
52375: LD_INT 104
52377: PUSH
52378: LD_INT 105
52380: PUSH
52381: LD_INT 106
52383: PUSH
52384: LD_INT 107
52386: PUSH
52387: LD_INT 108
52389: PUSH
52390: LD_INT 109
52392: PUSH
52393: LD_INT 110
52395: PUSH
52396: LD_INT 111
52398: PUSH
52399: LD_INT 112
52401: PUSH
52402: LD_INT 113
52404: PUSH
52405: LD_INT 114
52407: PUSH
52408: LD_INT 116
52410: PUSH
52411: LD_INT 117
52413: PUSH
52414: LD_INT 118
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: ST_TO_ADDR
52440: GO 53447
52442: LD_INT 15
52444: DOUBLE
52445: EQUAL
52446: IFTRUE 52450
52448: GO 52674
52450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52451: LD_ADDR_VAR 0 2
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: LD_INT 4
52467: PUSH
52468: LD_INT 5
52470: PUSH
52471: LD_INT 6
52473: PUSH
52474: LD_INT 7
52476: PUSH
52477: LD_INT 8
52479: PUSH
52480: LD_INT 9
52482: PUSH
52483: LD_INT 10
52485: PUSH
52486: LD_INT 11
52488: PUSH
52489: LD_INT 12
52491: PUSH
52492: LD_INT 13
52494: PUSH
52495: LD_INT 14
52497: PUSH
52498: LD_INT 15
52500: PUSH
52501: LD_INT 16
52503: PUSH
52504: LD_INT 17
52506: PUSH
52507: LD_INT 18
52509: PUSH
52510: LD_INT 19
52512: PUSH
52513: LD_INT 20
52515: PUSH
52516: LD_INT 21
52518: PUSH
52519: LD_INT 22
52521: PUSH
52522: LD_INT 23
52524: PUSH
52525: LD_INT 24
52527: PUSH
52528: LD_INT 25
52530: PUSH
52531: LD_INT 26
52533: PUSH
52534: LD_INT 27
52536: PUSH
52537: LD_INT 28
52539: PUSH
52540: LD_INT 29
52542: PUSH
52543: LD_INT 30
52545: PUSH
52546: LD_INT 31
52548: PUSH
52549: LD_INT 32
52551: PUSH
52552: LD_INT 33
52554: PUSH
52555: LD_INT 34
52557: PUSH
52558: LD_INT 36
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 101
52600: PUSH
52601: LD_INT 102
52603: PUSH
52604: LD_INT 103
52606: PUSH
52607: LD_INT 104
52609: PUSH
52610: LD_INT 105
52612: PUSH
52613: LD_INT 106
52615: PUSH
52616: LD_INT 107
52618: PUSH
52619: LD_INT 108
52621: PUSH
52622: LD_INT 109
52624: PUSH
52625: LD_INT 110
52627: PUSH
52628: LD_INT 111
52630: PUSH
52631: LD_INT 112
52633: PUSH
52634: LD_INT 113
52636: PUSH
52637: LD_INT 114
52639: PUSH
52640: LD_INT 116
52642: PUSH
52643: LD_INT 117
52645: PUSH
52646: LD_INT 118
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: ST_TO_ADDR
52672: GO 53447
52674: LD_INT 16
52676: DOUBLE
52677: EQUAL
52678: IFTRUE 52682
52680: GO 52818
52682: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52683: LD_ADDR_VAR 0 2
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: LD_INT 5
52696: PUSH
52697: LD_INT 7
52699: PUSH
52700: LD_INT 11
52702: PUSH
52703: LD_INT 12
52705: PUSH
52706: LD_INT 15
52708: PUSH
52709: LD_INT 16
52711: PUSH
52712: LD_INT 20
52714: PUSH
52715: LD_INT 21
52717: PUSH
52718: LD_INT 22
52720: PUSH
52721: LD_INT 23
52723: PUSH
52724: LD_INT 25
52726: PUSH
52727: LD_INT 26
52729: PUSH
52730: LD_INT 30
52732: PUSH
52733: LD_INT 31
52735: PUSH
52736: LD_INT 32
52738: PUSH
52739: LD_INT 33
52741: PUSH
52742: LD_INT 34
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 101
52768: PUSH
52769: LD_INT 102
52771: PUSH
52772: LD_INT 103
52774: PUSH
52775: LD_INT 106
52777: PUSH
52778: LD_INT 108
52780: PUSH
52781: LD_INT 112
52783: PUSH
52784: LD_INT 113
52786: PUSH
52787: LD_INT 114
52789: PUSH
52790: LD_INT 116
52792: PUSH
52793: LD_INT 117
52795: PUSH
52796: LD_INT 118
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: ST_TO_ADDR
52816: GO 53447
52818: LD_INT 17
52820: DOUBLE
52821: EQUAL
52822: IFTRUE 52826
52824: GO 53050
52826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52827: LD_ADDR_VAR 0 2
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 4
52843: PUSH
52844: LD_INT 5
52846: PUSH
52847: LD_INT 6
52849: PUSH
52850: LD_INT 7
52852: PUSH
52853: LD_INT 8
52855: PUSH
52856: LD_INT 9
52858: PUSH
52859: LD_INT 10
52861: PUSH
52862: LD_INT 11
52864: PUSH
52865: LD_INT 12
52867: PUSH
52868: LD_INT 13
52870: PUSH
52871: LD_INT 14
52873: PUSH
52874: LD_INT 15
52876: PUSH
52877: LD_INT 16
52879: PUSH
52880: LD_INT 17
52882: PUSH
52883: LD_INT 18
52885: PUSH
52886: LD_INT 19
52888: PUSH
52889: LD_INT 20
52891: PUSH
52892: LD_INT 21
52894: PUSH
52895: LD_INT 22
52897: PUSH
52898: LD_INT 23
52900: PUSH
52901: LD_INT 24
52903: PUSH
52904: LD_INT 25
52906: PUSH
52907: LD_INT 26
52909: PUSH
52910: LD_INT 27
52912: PUSH
52913: LD_INT 28
52915: PUSH
52916: LD_INT 29
52918: PUSH
52919: LD_INT 30
52921: PUSH
52922: LD_INT 31
52924: PUSH
52925: LD_INT 32
52927: PUSH
52928: LD_INT 33
52930: PUSH
52931: LD_INT 34
52933: PUSH
52934: LD_INT 36
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 101
52976: PUSH
52977: LD_INT 102
52979: PUSH
52980: LD_INT 103
52982: PUSH
52983: LD_INT 104
52985: PUSH
52986: LD_INT 105
52988: PUSH
52989: LD_INT 106
52991: PUSH
52992: LD_INT 107
52994: PUSH
52995: LD_INT 108
52997: PUSH
52998: LD_INT 109
53000: PUSH
53001: LD_INT 110
53003: PUSH
53004: LD_INT 111
53006: PUSH
53007: LD_INT 112
53009: PUSH
53010: LD_INT 113
53012: PUSH
53013: LD_INT 114
53015: PUSH
53016: LD_INT 116
53018: PUSH
53019: LD_INT 117
53021: PUSH
53022: LD_INT 118
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: ST_TO_ADDR
53048: GO 53447
53050: LD_INT 18
53052: DOUBLE
53053: EQUAL
53054: IFTRUE 53058
53056: GO 53206
53058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53059: LD_ADDR_VAR 0 2
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: LD_INT 5
53072: PUSH
53073: LD_INT 7
53075: PUSH
53076: LD_INT 11
53078: PUSH
53079: LD_INT 12
53081: PUSH
53082: LD_INT 15
53084: PUSH
53085: LD_INT 16
53087: PUSH
53088: LD_INT 20
53090: PUSH
53091: LD_INT 21
53093: PUSH
53094: LD_INT 22
53096: PUSH
53097: LD_INT 23
53099: PUSH
53100: LD_INT 25
53102: PUSH
53103: LD_INT 26
53105: PUSH
53106: LD_INT 30
53108: PUSH
53109: LD_INT 31
53111: PUSH
53112: LD_INT 32
53114: PUSH
53115: LD_INT 33
53117: PUSH
53118: LD_INT 34
53120: PUSH
53121: LD_INT 35
53123: PUSH
53124: LD_INT 36
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 101
53152: PUSH
53153: LD_INT 102
53155: PUSH
53156: LD_INT 103
53158: PUSH
53159: LD_INT 106
53161: PUSH
53162: LD_INT 108
53164: PUSH
53165: LD_INT 112
53167: PUSH
53168: LD_INT 113
53170: PUSH
53171: LD_INT 114
53173: PUSH
53174: LD_INT 115
53176: PUSH
53177: LD_INT 116
53179: PUSH
53180: LD_INT 117
53182: PUSH
53183: LD_INT 118
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: ST_TO_ADDR
53204: GO 53447
53206: LD_INT 19
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53446
53214: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53215: LD_ADDR_VAR 0 2
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: LD_INT 4
53231: PUSH
53232: LD_INT 5
53234: PUSH
53235: LD_INT 6
53237: PUSH
53238: LD_INT 7
53240: PUSH
53241: LD_INT 8
53243: PUSH
53244: LD_INT 9
53246: PUSH
53247: LD_INT 10
53249: PUSH
53250: LD_INT 11
53252: PUSH
53253: LD_INT 12
53255: PUSH
53256: LD_INT 13
53258: PUSH
53259: LD_INT 14
53261: PUSH
53262: LD_INT 15
53264: PUSH
53265: LD_INT 16
53267: PUSH
53268: LD_INT 17
53270: PUSH
53271: LD_INT 18
53273: PUSH
53274: LD_INT 19
53276: PUSH
53277: LD_INT 20
53279: PUSH
53280: LD_INT 21
53282: PUSH
53283: LD_INT 22
53285: PUSH
53286: LD_INT 23
53288: PUSH
53289: LD_INT 24
53291: PUSH
53292: LD_INT 25
53294: PUSH
53295: LD_INT 26
53297: PUSH
53298: LD_INT 27
53300: PUSH
53301: LD_INT 28
53303: PUSH
53304: LD_INT 29
53306: PUSH
53307: LD_INT 30
53309: PUSH
53310: LD_INT 31
53312: PUSH
53313: LD_INT 32
53315: PUSH
53316: LD_INT 33
53318: PUSH
53319: LD_INT 34
53321: PUSH
53322: LD_INT 35
53324: PUSH
53325: LD_INT 36
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 101
53368: PUSH
53369: LD_INT 102
53371: PUSH
53372: LD_INT 103
53374: PUSH
53375: LD_INT 104
53377: PUSH
53378: LD_INT 105
53380: PUSH
53381: LD_INT 106
53383: PUSH
53384: LD_INT 107
53386: PUSH
53387: LD_INT 108
53389: PUSH
53390: LD_INT 109
53392: PUSH
53393: LD_INT 110
53395: PUSH
53396: LD_INT 111
53398: PUSH
53399: LD_INT 112
53401: PUSH
53402: LD_INT 113
53404: PUSH
53405: LD_INT 114
53407: PUSH
53408: LD_INT 115
53410: PUSH
53411: LD_INT 116
53413: PUSH
53414: LD_INT 117
53416: PUSH
53417: LD_INT 118
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: ST_TO_ADDR
53444: GO 53447
53446: POP
// end else
53447: GO 53678
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53449: LD_ADDR_VAR 0 2
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: LD_INT 5
53468: PUSH
53469: LD_INT 6
53471: PUSH
53472: LD_INT 7
53474: PUSH
53475: LD_INT 8
53477: PUSH
53478: LD_INT 9
53480: PUSH
53481: LD_INT 10
53483: PUSH
53484: LD_INT 11
53486: PUSH
53487: LD_INT 12
53489: PUSH
53490: LD_INT 13
53492: PUSH
53493: LD_INT 14
53495: PUSH
53496: LD_INT 15
53498: PUSH
53499: LD_INT 16
53501: PUSH
53502: LD_INT 17
53504: PUSH
53505: LD_INT 18
53507: PUSH
53508: LD_INT 19
53510: PUSH
53511: LD_INT 20
53513: PUSH
53514: LD_INT 21
53516: PUSH
53517: LD_INT 22
53519: PUSH
53520: LD_INT 23
53522: PUSH
53523: LD_INT 24
53525: PUSH
53526: LD_INT 25
53528: PUSH
53529: LD_INT 26
53531: PUSH
53532: LD_INT 27
53534: PUSH
53535: LD_INT 28
53537: PUSH
53538: LD_INT 29
53540: PUSH
53541: LD_INT 30
53543: PUSH
53544: LD_INT 31
53546: PUSH
53547: LD_INT 32
53549: PUSH
53550: LD_INT 33
53552: PUSH
53553: LD_INT 34
53555: PUSH
53556: LD_INT 35
53558: PUSH
53559: LD_INT 36
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 101
53602: PUSH
53603: LD_INT 102
53605: PUSH
53606: LD_INT 103
53608: PUSH
53609: LD_INT 104
53611: PUSH
53612: LD_INT 105
53614: PUSH
53615: LD_INT 106
53617: PUSH
53618: LD_INT 107
53620: PUSH
53621: LD_INT 108
53623: PUSH
53624: LD_INT 109
53626: PUSH
53627: LD_INT 110
53629: PUSH
53630: LD_INT 111
53632: PUSH
53633: LD_INT 112
53635: PUSH
53636: LD_INT 113
53638: PUSH
53639: LD_INT 114
53641: PUSH
53642: LD_INT 115
53644: PUSH
53645: LD_INT 116
53647: PUSH
53648: LD_INT 117
53650: PUSH
53651: LD_INT 118
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: ST_TO_ADDR
// if result then
53678: LD_VAR 0 2
53682: IFFALSE 54468
// begin normal :=  ;
53684: LD_ADDR_VAR 0 5
53688: PUSH
53689: LD_STRING 
53691: ST_TO_ADDR
// hardcore :=  ;
53692: LD_ADDR_VAR 0 6
53696: PUSH
53697: LD_STRING 
53699: ST_TO_ADDR
// active :=  ;
53700: LD_ADDR_VAR 0 7
53704: PUSH
53705: LD_STRING 
53707: ST_TO_ADDR
// for i = 1 to normalCounter do
53708: LD_ADDR_VAR 0 8
53712: PUSH
53713: DOUBLE
53714: LD_INT 1
53716: DEC
53717: ST_TO_ADDR
53718: LD_EXP 29
53722: PUSH
53723: FOR_TO
53724: IFFALSE 53825
// begin tmp := 0 ;
53726: LD_ADDR_VAR 0 3
53730: PUSH
53731: LD_STRING 0
53733: ST_TO_ADDR
// if result [ 1 ] then
53734: LD_VAR 0 2
53738: PUSH
53739: LD_INT 1
53741: ARRAY
53742: IFFALSE 53807
// if result [ 1 ] [ 1 ] = i then
53744: LD_VAR 0 2
53748: PUSH
53749: LD_INT 1
53751: ARRAY
53752: PUSH
53753: LD_INT 1
53755: ARRAY
53756: PUSH
53757: LD_VAR 0 8
53761: EQUAL
53762: IFFALSE 53807
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53764: LD_ADDR_VAR 0 2
53768: PUSH
53769: LD_VAR 0 2
53773: PPUSH
53774: LD_INT 1
53776: PPUSH
53777: LD_VAR 0 2
53781: PUSH
53782: LD_INT 1
53784: ARRAY
53785: PPUSH
53786: LD_INT 1
53788: PPUSH
53789: CALL_OW 3
53793: PPUSH
53794: CALL_OW 1
53798: ST_TO_ADDR
// tmp := 1 ;
53799: LD_ADDR_VAR 0 3
53803: PUSH
53804: LD_STRING 1
53806: ST_TO_ADDR
// end ; normal := normal & tmp ;
53807: LD_ADDR_VAR 0 5
53811: PUSH
53812: LD_VAR 0 5
53816: PUSH
53817: LD_VAR 0 3
53821: STR
53822: ST_TO_ADDR
// end ;
53823: GO 53723
53825: POP
53826: POP
// for i = 1 to hardcoreCounter do
53827: LD_ADDR_VAR 0 8
53831: PUSH
53832: DOUBLE
53833: LD_INT 1
53835: DEC
53836: ST_TO_ADDR
53837: LD_EXP 30
53841: PUSH
53842: FOR_TO
53843: IFFALSE 53948
// begin tmp := 0 ;
53845: LD_ADDR_VAR 0 3
53849: PUSH
53850: LD_STRING 0
53852: ST_TO_ADDR
// if result [ 2 ] then
53853: LD_VAR 0 2
53857: PUSH
53858: LD_INT 2
53860: ARRAY
53861: IFFALSE 53930
// if result [ 2 ] [ 1 ] = 100 + i then
53863: LD_VAR 0 2
53867: PUSH
53868: LD_INT 2
53870: ARRAY
53871: PUSH
53872: LD_INT 1
53874: ARRAY
53875: PUSH
53876: LD_INT 100
53878: PUSH
53879: LD_VAR 0 8
53883: PLUS
53884: EQUAL
53885: IFFALSE 53930
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53887: LD_ADDR_VAR 0 2
53891: PUSH
53892: LD_VAR 0 2
53896: PPUSH
53897: LD_INT 2
53899: PPUSH
53900: LD_VAR 0 2
53904: PUSH
53905: LD_INT 2
53907: ARRAY
53908: PPUSH
53909: LD_INT 1
53911: PPUSH
53912: CALL_OW 3
53916: PPUSH
53917: CALL_OW 1
53921: ST_TO_ADDR
// tmp := 1 ;
53922: LD_ADDR_VAR 0 3
53926: PUSH
53927: LD_STRING 1
53929: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53930: LD_ADDR_VAR 0 6
53934: PUSH
53935: LD_VAR 0 6
53939: PUSH
53940: LD_VAR 0 3
53944: STR
53945: ST_TO_ADDR
// end ;
53946: GO 53842
53948: POP
53949: POP
// if isGameLoad then
53950: LD_VAR 0 1
53954: IFFALSE 54429
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53956: LD_ADDR_VAR 0 4
53960: PUSH
53961: LD_EXP 33
53965: PUSH
53966: LD_EXP 32
53970: PUSH
53971: LD_EXP 34
53975: PUSH
53976: LD_EXP 31
53980: PUSH
53981: LD_EXP 35
53985: PUSH
53986: LD_EXP 36
53990: PUSH
53991: LD_EXP 37
53995: PUSH
53996: LD_EXP 38
54000: PUSH
54001: LD_EXP 39
54005: PUSH
54006: LD_EXP 40
54010: PUSH
54011: LD_EXP 41
54015: PUSH
54016: LD_EXP 42
54020: PUSH
54021: LD_EXP 43
54025: PUSH
54026: LD_EXP 44
54030: PUSH
54031: LD_EXP 52
54035: PUSH
54036: LD_EXP 53
54040: PUSH
54041: LD_EXP 54
54045: PUSH
54046: LD_EXP 55
54050: PUSH
54051: LD_EXP 57
54055: PUSH
54056: LD_EXP 58
54060: PUSH
54061: LD_EXP 59
54065: PUSH
54066: LD_EXP 62
54070: PUSH
54071: LD_EXP 64
54075: PUSH
54076: LD_EXP 65
54080: PUSH
54081: LD_EXP 66
54085: PUSH
54086: LD_EXP 68
54090: PUSH
54091: LD_EXP 69
54095: PUSH
54096: LD_EXP 72
54100: PUSH
54101: LD_EXP 73
54105: PUSH
54106: LD_EXP 74
54110: PUSH
54111: LD_EXP 75
54115: PUSH
54116: LD_EXP 76
54120: PUSH
54121: LD_EXP 77
54125: PUSH
54126: LD_EXP 78
54130: PUSH
54131: LD_EXP 79
54135: PUSH
54136: LD_EXP 80
54140: PUSH
54141: LD_EXP 45
54145: PUSH
54146: LD_EXP 46
54150: PUSH
54151: LD_EXP 49
54155: PUSH
54156: LD_EXP 50
54160: PUSH
54161: LD_EXP 51
54165: PUSH
54166: LD_EXP 47
54170: PUSH
54171: LD_EXP 48
54175: PUSH
54176: LD_EXP 56
54180: PUSH
54181: LD_EXP 60
54185: PUSH
54186: LD_EXP 61
54190: PUSH
54191: LD_EXP 63
54195: PUSH
54196: LD_EXP 67
54200: PUSH
54201: LD_EXP 70
54205: PUSH
54206: LD_EXP 71
54210: PUSH
54211: LD_EXP 81
54215: PUSH
54216: LD_EXP 82
54220: PUSH
54221: LD_EXP 83
54225: PUSH
54226: LD_EXP 84
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// tmp :=  ;
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_STRING 
54294: ST_TO_ADDR
// for i = 1 to normalCounter do
54295: LD_ADDR_VAR 0 8
54299: PUSH
54300: DOUBLE
54301: LD_INT 1
54303: DEC
54304: ST_TO_ADDR
54305: LD_EXP 29
54309: PUSH
54310: FOR_TO
54311: IFFALSE 54347
// begin if flags [ i ] then
54313: LD_VAR 0 4
54317: PUSH
54318: LD_VAR 0 8
54322: ARRAY
54323: IFFALSE 54345
// tmp := tmp & i & ; ;
54325: LD_ADDR_VAR 0 3
54329: PUSH
54330: LD_VAR 0 3
54334: PUSH
54335: LD_VAR 0 8
54339: STR
54340: PUSH
54341: LD_STRING ;
54343: STR
54344: ST_TO_ADDR
// end ;
54345: GO 54310
54347: POP
54348: POP
// for i = 1 to hardcoreCounter do
54349: LD_ADDR_VAR 0 8
54353: PUSH
54354: DOUBLE
54355: LD_INT 1
54357: DEC
54358: ST_TO_ADDR
54359: LD_EXP 30
54363: PUSH
54364: FOR_TO
54365: IFFALSE 54411
// begin if flags [ normalCounter + i ] then
54367: LD_VAR 0 4
54371: PUSH
54372: LD_EXP 29
54376: PUSH
54377: LD_VAR 0 8
54381: PLUS
54382: ARRAY
54383: IFFALSE 54409
// tmp := tmp & ( 100 + i ) & ; ;
54385: LD_ADDR_VAR 0 3
54389: PUSH
54390: LD_VAR 0 3
54394: PUSH
54395: LD_INT 100
54397: PUSH
54398: LD_VAR 0 8
54402: PLUS
54403: STR
54404: PUSH
54405: LD_STRING ;
54407: STR
54408: ST_TO_ADDR
// end ;
54409: GO 54364
54411: POP
54412: POP
// if tmp then
54413: LD_VAR 0 3
54417: IFFALSE 54429
// active := tmp ;
54419: LD_ADDR_VAR 0 7
54423: PUSH
54424: LD_VAR 0 3
54428: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54429: LD_STRING getStreamItemsFromMission("
54431: PUSH
54432: LD_VAR 0 5
54436: STR
54437: PUSH
54438: LD_STRING ","
54440: STR
54441: PUSH
54442: LD_VAR 0 6
54446: STR
54447: PUSH
54448: LD_STRING ","
54450: STR
54451: PUSH
54452: LD_VAR 0 7
54456: STR
54457: PUSH
54458: LD_STRING ")
54460: STR
54461: PPUSH
54462: CALL_OW 559
// end else
54466: GO 54475
// ToLua ( getStreamItemsFromMission("","","") ) ;
54468: LD_STRING getStreamItemsFromMission("","","")
54470: PPUSH
54471: CALL_OW 559
// end ;
54475: LD_VAR 0 2
54479: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54480: LD_EXP 28
54484: IFFALSE 54492
54486: PUSH
54487: LD_EXP 33
54491: AND
54492: IFFALSE 54616
54494: GO 54496
54496: DISABLE
54497: LD_INT 0
54499: PPUSH
54500: PPUSH
// begin enable ;
54501: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54502: LD_ADDR_VAR 0 2
54506: PUSH
54507: LD_INT 22
54509: PUSH
54510: LD_OWVAR 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 34
54524: PUSH
54525: LD_INT 7
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 34
54534: PUSH
54535: LD_INT 45
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 34
54544: PUSH
54545: LD_INT 28
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 34
54554: PUSH
54555: LD_INT 47
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PPUSH
54573: CALL_OW 69
54577: ST_TO_ADDR
// if not tmp then
54578: LD_VAR 0 2
54582: NOT
54583: IFFALSE 54587
// exit ;
54585: GO 54616
// for i in tmp do
54587: LD_ADDR_VAR 0 1
54591: PUSH
54592: LD_VAR 0 2
54596: PUSH
54597: FOR_IN
54598: IFFALSE 54614
// begin SetLives ( i , 0 ) ;
54600: LD_VAR 0 1
54604: PPUSH
54605: LD_INT 0
54607: PPUSH
54608: CALL_OW 234
// end ;
54612: GO 54597
54614: POP
54615: POP
// end ;
54616: PPOPN 2
54618: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54619: LD_EXP 28
54623: IFFALSE 54631
54625: PUSH
54626: LD_EXP 34
54630: AND
54631: IFFALSE 54715
54633: GO 54635
54635: DISABLE
54636: LD_INT 0
54638: PPUSH
54639: PPUSH
// begin enable ;
54640: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54641: LD_ADDR_VAR 0 2
54645: PUSH
54646: LD_INT 22
54648: PUSH
54649: LD_OWVAR 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 32
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PPUSH
54672: CALL_OW 69
54676: ST_TO_ADDR
// if not tmp then
54677: LD_VAR 0 2
54681: NOT
54682: IFFALSE 54686
// exit ;
54684: GO 54715
// for i in tmp do
54686: LD_ADDR_VAR 0 1
54690: PUSH
54691: LD_VAR 0 2
54695: PUSH
54696: FOR_IN
54697: IFFALSE 54713
// begin SetLives ( i , 0 ) ;
54699: LD_VAR 0 1
54703: PPUSH
54704: LD_INT 0
54706: PPUSH
54707: CALL_OW 234
// end ;
54711: GO 54696
54713: POP
54714: POP
// end ;
54715: PPOPN 2
54717: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54718: LD_EXP 28
54722: IFFALSE 54730
54724: PUSH
54725: LD_EXP 31
54729: AND
54730: IFFALSE 54823
54732: GO 54734
54734: DISABLE
54735: LD_INT 0
54737: PPUSH
// begin enable ;
54738: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54739: LD_ADDR_VAR 0 1
54743: PUSH
54744: LD_INT 22
54746: PUSH
54747: LD_OWVAR 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: LD_INT 25
54761: PUSH
54762: LD_INT 5
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 25
54771: PUSH
54772: LD_INT 9
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 25
54781: PUSH
54782: LD_INT 8
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PPUSH
54799: CALL_OW 69
54803: PUSH
54804: FOR_IN
54805: IFFALSE 54821
// begin SetClass ( i , 1 ) ;
54807: LD_VAR 0 1
54811: PPUSH
54812: LD_INT 1
54814: PPUSH
54815: CALL_OW 336
// end ;
54819: GO 54804
54821: POP
54822: POP
// end ;
54823: PPOPN 1
54825: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54826: LD_EXP 28
54830: IFFALSE 54838
54832: PUSH
54833: LD_EXP 32
54837: AND
54838: IFFALSE 54850
54840: PUSH
54841: LD_OWVAR 65
54845: PUSH
54846: LD_INT 7
54848: LESS
54849: AND
54850: IFFALSE 54864
54852: GO 54854
54854: DISABLE
// begin enable ;
54855: ENABLE
// game_speed := 7 ;
54856: LD_ADDR_OWVAR 65
54860: PUSH
54861: LD_INT 7
54863: ST_TO_ADDR
// end ;
54864: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54865: LD_EXP 28
54869: IFFALSE 54877
54871: PUSH
54872: LD_EXP 35
54876: AND
54877: IFFALSE 55079
54879: GO 54881
54881: DISABLE
54882: LD_INT 0
54884: PPUSH
54885: PPUSH
54886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54887: LD_ADDR_VAR 0 3
54891: PUSH
54892: LD_INT 81
54894: PUSH
54895: LD_OWVAR 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 21
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PPUSH
54918: CALL_OW 69
54922: ST_TO_ADDR
// if not tmp then
54923: LD_VAR 0 3
54927: NOT
54928: IFFALSE 54932
// exit ;
54930: GO 55079
// if tmp > 5 then
54932: LD_VAR 0 3
54936: PUSH
54937: LD_INT 5
54939: GREATER
54940: IFFALSE 54952
// k := 5 else
54942: LD_ADDR_VAR 0 2
54946: PUSH
54947: LD_INT 5
54949: ST_TO_ADDR
54950: GO 54962
// k := tmp ;
54952: LD_ADDR_VAR 0 2
54956: PUSH
54957: LD_VAR 0 3
54961: ST_TO_ADDR
// for i := 1 to k do
54962: LD_ADDR_VAR 0 1
54966: PUSH
54967: DOUBLE
54968: LD_INT 1
54970: DEC
54971: ST_TO_ADDR
54972: LD_VAR 0 2
54976: PUSH
54977: FOR_TO
54978: IFFALSE 55077
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54980: LD_VAR 0 3
54984: PUSH
54985: LD_VAR 0 1
54989: ARRAY
54990: PPUSH
54991: LD_VAR 0 1
54995: PUSH
54996: LD_INT 4
54998: MOD
54999: PUSH
55000: LD_INT 1
55002: PLUS
55003: PPUSH
55004: CALL_OW 259
55008: PUSH
55009: LD_INT 10
55011: LESS
55012: IFFALSE 55075
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55014: LD_VAR 0 3
55018: PUSH
55019: LD_VAR 0 1
55023: ARRAY
55024: PPUSH
55025: LD_VAR 0 1
55029: PUSH
55030: LD_INT 4
55032: MOD
55033: PUSH
55034: LD_INT 1
55036: PLUS
55037: PPUSH
55038: LD_VAR 0 3
55042: PUSH
55043: LD_VAR 0 1
55047: ARRAY
55048: PPUSH
55049: LD_VAR 0 1
55053: PUSH
55054: LD_INT 4
55056: MOD
55057: PUSH
55058: LD_INT 1
55060: PLUS
55061: PPUSH
55062: CALL_OW 259
55066: PUSH
55067: LD_INT 1
55069: PLUS
55070: PPUSH
55071: CALL_OW 237
55075: GO 54977
55077: POP
55078: POP
// end ;
55079: PPOPN 3
55081: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55082: LD_EXP 28
55086: IFFALSE 55094
55088: PUSH
55089: LD_EXP 36
55093: AND
55094: IFFALSE 55114
55096: GO 55098
55098: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55099: LD_INT 4
55101: PPUSH
55102: LD_OWVAR 2
55106: PPUSH
55107: LD_INT 0
55109: PPUSH
55110: CALL_OW 324
55114: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55115: LD_EXP 28
55119: IFFALSE 55127
55121: PUSH
55122: LD_EXP 65
55126: AND
55127: IFFALSE 55147
55129: GO 55131
55131: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55132: LD_INT 19
55134: PPUSH
55135: LD_OWVAR 2
55139: PPUSH
55140: LD_INT 0
55142: PPUSH
55143: CALL_OW 324
55147: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55148: LD_EXP 28
55152: IFFALSE 55160
55154: PUSH
55155: LD_EXP 37
55159: AND
55160: IFFALSE 55262
55162: GO 55164
55164: DISABLE
55165: LD_INT 0
55167: PPUSH
55168: PPUSH
// begin enable ;
55169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55170: LD_ADDR_VAR 0 2
55174: PUSH
55175: LD_INT 22
55177: PUSH
55178: LD_OWVAR 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 34
55192: PUSH
55193: LD_INT 11
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 34
55202: PUSH
55203: LD_INT 30
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PPUSH
55219: CALL_OW 69
55223: ST_TO_ADDR
// if not tmp then
55224: LD_VAR 0 2
55228: NOT
55229: IFFALSE 55233
// exit ;
55231: GO 55262
// for i in tmp do
55233: LD_ADDR_VAR 0 1
55237: PUSH
55238: LD_VAR 0 2
55242: PUSH
55243: FOR_IN
55244: IFFALSE 55260
// begin SetLives ( i , 0 ) ;
55246: LD_VAR 0 1
55250: PPUSH
55251: LD_INT 0
55253: PPUSH
55254: CALL_OW 234
// end ;
55258: GO 55243
55260: POP
55261: POP
// end ;
55262: PPOPN 2
55264: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55265: LD_EXP 28
55269: IFFALSE 55277
55271: PUSH
55272: LD_EXP 38
55276: AND
55277: IFFALSE 55297
55279: GO 55281
55281: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55282: LD_INT 32
55284: PPUSH
55285: LD_OWVAR 2
55289: PPUSH
55290: LD_INT 0
55292: PPUSH
55293: CALL_OW 324
55297: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55298: LD_EXP 28
55302: IFFALSE 55310
55304: PUSH
55305: LD_EXP 39
55309: AND
55310: IFFALSE 55493
55312: GO 55314
55314: DISABLE
55315: LD_INT 0
55317: PPUSH
55318: PPUSH
55319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55320: LD_ADDR_VAR 0 2
55324: PUSH
55325: LD_INT 22
55327: PUSH
55328: LD_OWVAR 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 33
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PPUSH
55351: CALL_OW 69
55355: ST_TO_ADDR
// if not tmp then
55356: LD_VAR 0 2
55360: NOT
55361: IFFALSE 55365
// exit ;
55363: GO 55493
// side := 0 ;
55365: LD_ADDR_VAR 0 3
55369: PUSH
55370: LD_INT 0
55372: ST_TO_ADDR
// for i := 1 to 8 do
55373: LD_ADDR_VAR 0 1
55377: PUSH
55378: DOUBLE
55379: LD_INT 1
55381: DEC
55382: ST_TO_ADDR
55383: LD_INT 8
55385: PUSH
55386: FOR_TO
55387: IFFALSE 55437
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55389: LD_OWVAR 2
55393: PUSH
55394: LD_VAR 0 1
55398: NONEQUAL
55399: IFFALSE 55421
55401: PUSH
55402: LD_OWVAR 2
55406: PPUSH
55407: LD_VAR 0 1
55411: PPUSH
55412: CALL_OW 81
55416: PUSH
55417: LD_INT 2
55419: EQUAL
55420: AND
55421: IFFALSE 55435
// begin side := i ;
55423: LD_ADDR_VAR 0 3
55427: PUSH
55428: LD_VAR 0 1
55432: ST_TO_ADDR
// break ;
55433: GO 55437
// end ;
55435: GO 55386
55437: POP
55438: POP
// if not side then
55439: LD_VAR 0 3
55443: NOT
55444: IFFALSE 55448
// exit ;
55446: GO 55493
// for i := 1 to tmp do
55448: LD_ADDR_VAR 0 1
55452: PUSH
55453: DOUBLE
55454: LD_INT 1
55456: DEC
55457: ST_TO_ADDR
55458: LD_VAR 0 2
55462: PUSH
55463: FOR_TO
55464: IFFALSE 55491
// if Prob ( 60 ) then
55466: LD_INT 60
55468: PPUSH
55469: CALL_OW 13
55473: IFFALSE 55489
// SetSide ( i , side ) ;
55475: LD_VAR 0 1
55479: PPUSH
55480: LD_VAR 0 3
55484: PPUSH
55485: CALL_OW 235
55489: GO 55463
55491: POP
55492: POP
// end ;
55493: PPOPN 3
55495: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55496: LD_EXP 28
55500: IFFALSE 55508
55502: PUSH
55503: LD_EXP 41
55507: AND
55508: IFFALSE 55627
55510: GO 55512
55512: DISABLE
55513: LD_INT 0
55515: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55516: LD_ADDR_VAR 0 1
55520: PUSH
55521: LD_INT 22
55523: PUSH
55524: LD_OWVAR 2
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 21
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 23
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: LIST
55564: PPUSH
55565: CALL_OW 69
55569: PUSH
55570: FOR_IN
55571: IFFALSE 55625
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55573: LD_VAR 0 1
55577: PPUSH
55578: CALL_OW 257
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 4
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: IN
55601: IFFALSE 55623
// SetClass ( un , rand ( 1 , 4 ) ) ;
55603: LD_VAR 0 1
55607: PPUSH
55608: LD_INT 1
55610: PPUSH
55611: LD_INT 4
55613: PPUSH
55614: CALL_OW 12
55618: PPUSH
55619: CALL_OW 336
55623: GO 55570
55625: POP
55626: POP
// end ;
55627: PPOPN 1
55629: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55630: LD_EXP 28
55634: IFFALSE 55642
55636: PUSH
55637: LD_EXP 40
55641: AND
55642: IFFALSE 55721
55644: GO 55646
55646: DISABLE
55647: LD_INT 0
55649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55650: LD_ADDR_VAR 0 1
55654: PUSH
55655: LD_INT 22
55657: PUSH
55658: LD_OWVAR 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 21
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PPUSH
55681: CALL_OW 69
55685: ST_TO_ADDR
// if not tmp then
55686: LD_VAR 0 1
55690: NOT
55691: IFFALSE 55695
// exit ;
55693: GO 55721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55695: LD_VAR 0 1
55699: PUSH
55700: LD_INT 1
55702: PPUSH
55703: LD_VAR 0 1
55707: PPUSH
55708: CALL_OW 12
55712: ARRAY
55713: PPUSH
55714: LD_INT 100
55716: PPUSH
55717: CALL_OW 234
// end ;
55721: PPOPN 1
55723: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55724: LD_EXP 28
55728: IFFALSE 55736
55730: PUSH
55731: LD_EXP 42
55735: AND
55736: IFFALSE 55834
55738: GO 55740
55740: DISABLE
55741: LD_INT 0
55743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55744: LD_ADDR_VAR 0 1
55748: PUSH
55749: LD_INT 22
55751: PUSH
55752: LD_OWVAR 2
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 21
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PPUSH
55775: CALL_OW 69
55779: ST_TO_ADDR
// if not tmp then
55780: LD_VAR 0 1
55784: NOT
55785: IFFALSE 55789
// exit ;
55787: GO 55834
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55789: LD_VAR 0 1
55793: PUSH
55794: LD_INT 1
55796: PPUSH
55797: LD_VAR 0 1
55801: PPUSH
55802: CALL_OW 12
55806: ARRAY
55807: PPUSH
55808: LD_INT 1
55810: PPUSH
55811: LD_INT 4
55813: PPUSH
55814: CALL_OW 12
55818: PPUSH
55819: LD_INT 3000
55821: PPUSH
55822: LD_INT 9000
55824: PPUSH
55825: CALL_OW 12
55829: PPUSH
55830: CALL_OW 492
// end ;
55834: PPOPN 1
55836: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55837: LD_EXP 28
55841: IFFALSE 55849
55843: PUSH
55844: LD_EXP 43
55848: AND
55849: IFFALSE 55869
55851: GO 55853
55853: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55854: LD_INT 1
55856: PPUSH
55857: LD_OWVAR 2
55861: PPUSH
55862: LD_INT 0
55864: PPUSH
55865: CALL_OW 324
55869: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55870: LD_EXP 28
55874: IFFALSE 55882
55876: PUSH
55877: LD_EXP 44
55881: AND
55882: IFFALSE 55965
55884: GO 55886
55886: DISABLE
55887: LD_INT 0
55889: PPUSH
55890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55891: LD_ADDR_VAR 0 2
55895: PUSH
55896: LD_INT 22
55898: PUSH
55899: LD_OWVAR 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 21
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PPUSH
55922: CALL_OW 69
55926: ST_TO_ADDR
// if not tmp then
55927: LD_VAR 0 2
55931: NOT
55932: IFFALSE 55936
// exit ;
55934: GO 55965
// for i in tmp do
55936: LD_ADDR_VAR 0 1
55940: PUSH
55941: LD_VAR 0 2
55945: PUSH
55946: FOR_IN
55947: IFFALSE 55963
// SetBLevel ( i , 10 ) ;
55949: LD_VAR 0 1
55953: PPUSH
55954: LD_INT 10
55956: PPUSH
55957: CALL_OW 241
55961: GO 55946
55963: POP
55964: POP
// end ;
55965: PPOPN 2
55967: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55968: LD_EXP 28
55972: IFFALSE 55980
55974: PUSH
55975: LD_EXP 45
55979: AND
55980: IFFALSE 56091
55982: GO 55984
55984: DISABLE
55985: LD_INT 0
55987: PPUSH
55988: PPUSH
55989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55990: LD_ADDR_VAR 0 3
55994: PUSH
55995: LD_INT 22
55997: PUSH
55998: LD_OWVAR 2
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 25
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PPUSH
56021: CALL_OW 69
56025: ST_TO_ADDR
// if not tmp then
56026: LD_VAR 0 3
56030: NOT
56031: IFFALSE 56035
// exit ;
56033: GO 56091
// un := tmp [ rand ( 1 , tmp ) ] ;
56035: LD_ADDR_VAR 0 2
56039: PUSH
56040: LD_VAR 0 3
56044: PUSH
56045: LD_INT 1
56047: PPUSH
56048: LD_VAR 0 3
56052: PPUSH
56053: CALL_OW 12
56057: ARRAY
56058: ST_TO_ADDR
// if Crawls ( un ) then
56059: LD_VAR 0 2
56063: PPUSH
56064: CALL_OW 318
56068: IFFALSE 56079
// ComWalk ( un ) ;
56070: LD_VAR 0 2
56074: PPUSH
56075: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56079: LD_VAR 0 2
56083: PPUSH
56084: LD_INT 5
56086: PPUSH
56087: CALL_OW 336
// end ;
56091: PPOPN 3
56093: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56094: LD_EXP 28
56098: IFFALSE 56106
56100: PUSH
56101: LD_EXP 46
56105: AND
56106: IFFALSE 56118
56108: PUSH
56109: LD_OWVAR 67
56113: PUSH
56114: LD_INT 4
56116: LESS
56117: AND
56118: IFFALSE 56137
56120: GO 56122
56122: DISABLE
// begin Difficulty := Difficulty + 1 ;
56123: LD_ADDR_OWVAR 67
56127: PUSH
56128: LD_OWVAR 67
56132: PUSH
56133: LD_INT 1
56135: PLUS
56136: ST_TO_ADDR
// end ;
56137: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56138: LD_EXP 28
56142: IFFALSE 56150
56144: PUSH
56145: LD_EXP 47
56149: AND
56150: IFFALSE 56253
56152: GO 56154
56154: DISABLE
56155: LD_INT 0
56157: PPUSH
// begin for i := 1 to 5 do
56158: LD_ADDR_VAR 0 1
56162: PUSH
56163: DOUBLE
56164: LD_INT 1
56166: DEC
56167: ST_TO_ADDR
56168: LD_INT 5
56170: PUSH
56171: FOR_TO
56172: IFFALSE 56251
// begin uc_nation := nation_nature ;
56174: LD_ADDR_OWVAR 21
56178: PUSH
56179: LD_INT 0
56181: ST_TO_ADDR
// uc_side := 0 ;
56182: LD_ADDR_OWVAR 20
56186: PUSH
56187: LD_INT 0
56189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56190: LD_ADDR_OWVAR 29
56194: PUSH
56195: LD_INT 12
56197: PUSH
56198: LD_INT 12
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: ST_TO_ADDR
// hc_agressivity := 20 ;
56205: LD_ADDR_OWVAR 35
56209: PUSH
56210: LD_INT 20
56212: ST_TO_ADDR
// hc_class := class_tiger ;
56213: LD_ADDR_OWVAR 28
56217: PUSH
56218: LD_INT 14
56220: ST_TO_ADDR
// hc_gallery :=  ;
56221: LD_ADDR_OWVAR 33
56225: PUSH
56226: LD_STRING 
56228: ST_TO_ADDR
// hc_name :=  ;
56229: LD_ADDR_OWVAR 26
56233: PUSH
56234: LD_STRING 
56236: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56237: CALL_OW 44
56241: PPUSH
56242: LD_INT 0
56244: PPUSH
56245: CALL_OW 51
// end ;
56249: GO 56171
56251: POP
56252: POP
// end ;
56253: PPOPN 1
56255: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56256: LD_EXP 28
56260: IFFALSE 56268
56262: PUSH
56263: LD_EXP 48
56267: AND
56268: IFFALSE 56277
56270: GO 56272
56272: DISABLE
// StreamSibBomb ;
56273: CALL 56278 0 0
56277: END
// export function StreamSibBomb ; var i , x , y ; begin
56278: LD_INT 0
56280: PPUSH
56281: PPUSH
56282: PPUSH
56283: PPUSH
// result := false ;
56284: LD_ADDR_VAR 0 1
56288: PUSH
56289: LD_INT 0
56291: ST_TO_ADDR
// for i := 1 to 16 do
56292: LD_ADDR_VAR 0 2
56296: PUSH
56297: DOUBLE
56298: LD_INT 1
56300: DEC
56301: ST_TO_ADDR
56302: LD_INT 16
56304: PUSH
56305: FOR_TO
56306: IFFALSE 56505
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56308: LD_ADDR_VAR 0 3
56312: PUSH
56313: LD_INT 10
56315: PUSH
56316: LD_INT 20
56318: PUSH
56319: LD_INT 30
56321: PUSH
56322: LD_INT 40
56324: PUSH
56325: LD_INT 50
56327: PUSH
56328: LD_INT 60
56330: PUSH
56331: LD_INT 70
56333: PUSH
56334: LD_INT 80
56336: PUSH
56337: LD_INT 90
56339: PUSH
56340: LD_INT 100
56342: PUSH
56343: LD_INT 110
56345: PUSH
56346: LD_INT 120
56348: PUSH
56349: LD_INT 130
56351: PUSH
56352: LD_INT 140
56354: PUSH
56355: LD_INT 150
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PPUSH
56378: LD_INT 15
56380: PPUSH
56381: CALL_OW 12
56385: ARRAY
56386: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56387: LD_ADDR_VAR 0 4
56391: PUSH
56392: LD_INT 10
56394: PUSH
56395: LD_INT 20
56397: PUSH
56398: LD_INT 30
56400: PUSH
56401: LD_INT 40
56403: PUSH
56404: LD_INT 50
56406: PUSH
56407: LD_INT 60
56409: PUSH
56410: LD_INT 70
56412: PUSH
56413: LD_INT 80
56415: PUSH
56416: LD_INT 90
56418: PUSH
56419: LD_INT 100
56421: PUSH
56422: LD_INT 110
56424: PUSH
56425: LD_INT 120
56427: PUSH
56428: LD_INT 130
56430: PUSH
56431: LD_INT 140
56433: PUSH
56434: LD_INT 150
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PPUSH
56457: LD_INT 15
56459: PPUSH
56460: CALL_OW 12
56464: ARRAY
56465: ST_TO_ADDR
// if ValidHex ( x , y ) then
56466: LD_VAR 0 3
56470: PPUSH
56471: LD_VAR 0 4
56475: PPUSH
56476: CALL_OW 488
56480: IFFALSE 56503
// begin result := [ x , y ] ;
56482: LD_ADDR_VAR 0 1
56486: PUSH
56487: LD_VAR 0 3
56491: PUSH
56492: LD_VAR 0 4
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: ST_TO_ADDR
// break ;
56501: GO 56505
// end ; end ;
56503: GO 56305
56505: POP
56506: POP
// if result then
56507: LD_VAR 0 1
56511: IFFALSE 56571
// begin ToLua ( playSibBomb() ) ;
56513: LD_STRING playSibBomb()
56515: PPUSH
56516: CALL_OW 559
// wait ( 0 0$14 ) ;
56520: LD_INT 490
56522: PPUSH
56523: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56527: LD_VAR 0 1
56531: PUSH
56532: LD_INT 1
56534: ARRAY
56535: PPUSH
56536: LD_VAR 0 1
56540: PUSH
56541: LD_INT 2
56543: ARRAY
56544: PPUSH
56545: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56549: LD_VAR 0 1
56553: PUSH
56554: LD_INT 1
56556: ARRAY
56557: PPUSH
56558: LD_VAR 0 1
56562: PUSH
56563: LD_INT 2
56565: ARRAY
56566: PPUSH
56567: CALL_OW 429
// end ; end ;
56571: LD_VAR 0 1
56575: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56576: LD_EXP 28
56580: IFFALSE 56588
56582: PUSH
56583: LD_EXP 50
56587: AND
56588: IFFALSE 56600
56590: GO 56592
56592: DISABLE
// YouLost (  ) ;
56593: LD_STRING 
56595: PPUSH
56596: CALL_OW 104
56600: END
// every 0 0$1 trigger StreamModeActive and sFog do
56601: LD_EXP 28
56605: IFFALSE 56613
56607: PUSH
56608: LD_EXP 49
56612: AND
56613: IFFALSE 56627
56615: GO 56617
56617: DISABLE
// FogOff ( your_side ) ;
56618: LD_OWVAR 2
56622: PPUSH
56623: CALL_OW 344
56627: END
// every 0 0$1 trigger StreamModeActive and sSun do
56628: LD_EXP 28
56632: IFFALSE 56640
56634: PUSH
56635: LD_EXP 51
56639: AND
56640: IFFALSE 56668
56642: GO 56644
56644: DISABLE
// begin solar_recharge_percent := 0 ;
56645: LD_ADDR_OWVAR 79
56649: PUSH
56650: LD_INT 0
56652: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56653: LD_INT 10500
56655: PPUSH
56656: CALL_OW 67
// solar_recharge_percent := 100 ;
56660: LD_ADDR_OWVAR 79
56664: PUSH
56665: LD_INT 100
56667: ST_TO_ADDR
// end ;
56668: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56669: LD_EXP 28
56673: IFFALSE 56681
56675: PUSH
56676: LD_EXP 52
56680: AND
56681: IFFALSE 56920
56683: GO 56685
56685: DISABLE
56686: LD_INT 0
56688: PPUSH
56689: PPUSH
56690: PPUSH
// begin tmp := [ ] ;
56691: LD_ADDR_VAR 0 3
56695: PUSH
56696: EMPTY
56697: ST_TO_ADDR
// for i := 1 to 6 do
56698: LD_ADDR_VAR 0 1
56702: PUSH
56703: DOUBLE
56704: LD_INT 1
56706: DEC
56707: ST_TO_ADDR
56708: LD_INT 6
56710: PUSH
56711: FOR_TO
56712: IFFALSE 56817
// begin uc_nation := nation_nature ;
56714: LD_ADDR_OWVAR 21
56718: PUSH
56719: LD_INT 0
56721: ST_TO_ADDR
// uc_side := 0 ;
56722: LD_ADDR_OWVAR 20
56726: PUSH
56727: LD_INT 0
56729: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56730: LD_ADDR_OWVAR 29
56734: PUSH
56735: LD_INT 12
56737: PUSH
56738: LD_INT 12
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// hc_agressivity := 20 ;
56745: LD_ADDR_OWVAR 35
56749: PUSH
56750: LD_INT 20
56752: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56753: LD_ADDR_OWVAR 28
56757: PUSH
56758: LD_INT 17
56760: ST_TO_ADDR
// hc_gallery :=  ;
56761: LD_ADDR_OWVAR 33
56765: PUSH
56766: LD_STRING 
56768: ST_TO_ADDR
// hc_name :=  ;
56769: LD_ADDR_OWVAR 26
56773: PUSH
56774: LD_STRING 
56776: ST_TO_ADDR
// un := CreateHuman ;
56777: LD_ADDR_VAR 0 2
56781: PUSH
56782: CALL_OW 44
56786: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56787: LD_VAR 0 2
56791: PPUSH
56792: LD_INT 1
56794: PPUSH
56795: CALL_OW 51
// tmp := tmp ^ un ;
56799: LD_ADDR_VAR 0 3
56803: PUSH
56804: LD_VAR 0 3
56808: PUSH
56809: LD_VAR 0 2
56813: ADD
56814: ST_TO_ADDR
// end ;
56815: GO 56711
56817: POP
56818: POP
// repeat wait ( 0 0$1 ) ;
56819: LD_INT 35
56821: PPUSH
56822: CALL_OW 67
// for un in tmp do
56826: LD_ADDR_VAR 0 2
56830: PUSH
56831: LD_VAR 0 3
56835: PUSH
56836: FOR_IN
56837: IFFALSE 56911
// begin if IsDead ( un ) then
56839: LD_VAR 0 2
56843: PPUSH
56844: CALL_OW 301
56848: IFFALSE 56868
// begin tmp := tmp diff un ;
56850: LD_ADDR_VAR 0 3
56854: PUSH
56855: LD_VAR 0 3
56859: PUSH
56860: LD_VAR 0 2
56864: DIFF
56865: ST_TO_ADDR
// continue ;
56866: GO 56836
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56868: LD_VAR 0 2
56872: PPUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 22
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PPUSH
56890: CALL_OW 69
56894: PPUSH
56895: LD_VAR 0 2
56899: PPUSH
56900: CALL_OW 74
56904: PPUSH
56905: CALL_OW 115
// end ;
56909: GO 56836
56911: POP
56912: POP
// until not tmp ;
56913: LD_VAR 0 3
56917: NOT
56918: IFFALSE 56819
// end ;
56920: PPOPN 3
56922: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56923: LD_EXP 28
56927: IFFALSE 56935
56929: PUSH
56930: LD_EXP 53
56934: AND
56935: IFFALSE 56989
56937: GO 56939
56939: DISABLE
// begin ToLua ( displayTroll(); ) ;
56940: LD_STRING displayTroll();
56942: PPUSH
56943: CALL_OW 559
// wait ( 3 3$00 ) ;
56947: LD_INT 6300
56949: PPUSH
56950: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56954: LD_STRING hideTroll();
56956: PPUSH
56957: CALL_OW 559
// wait ( 1 1$00 ) ;
56961: LD_INT 2100
56963: PPUSH
56964: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56968: LD_STRING displayTroll();
56970: PPUSH
56971: CALL_OW 559
// wait ( 1 1$00 ) ;
56975: LD_INT 2100
56977: PPUSH
56978: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56982: LD_STRING hideTroll();
56984: PPUSH
56985: CALL_OW 559
// end ;
56989: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56990: LD_EXP 28
56994: IFFALSE 57002
56996: PUSH
56997: LD_EXP 54
57001: AND
57002: IFFALSE 57065
57004: GO 57006
57006: DISABLE
57007: LD_INT 0
57009: PPUSH
// begin p := 0 ;
57010: LD_ADDR_VAR 0 1
57014: PUSH
57015: LD_INT 0
57017: ST_TO_ADDR
// repeat game_speed := 1 ;
57018: LD_ADDR_OWVAR 65
57022: PUSH
57023: LD_INT 1
57025: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57026: LD_INT 35
57028: PPUSH
57029: CALL_OW 67
// p := p + 1 ;
57033: LD_ADDR_VAR 0 1
57037: PUSH
57038: LD_VAR 0 1
57042: PUSH
57043: LD_INT 1
57045: PLUS
57046: ST_TO_ADDR
// until p >= 60 ;
57047: LD_VAR 0 1
57051: PUSH
57052: LD_INT 60
57054: GREATEREQUAL
57055: IFFALSE 57018
// game_speed := 4 ;
57057: LD_ADDR_OWVAR 65
57061: PUSH
57062: LD_INT 4
57064: ST_TO_ADDR
// end ;
57065: PPOPN 1
57067: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57068: LD_EXP 28
57072: IFFALSE 57080
57074: PUSH
57075: LD_EXP 55
57079: AND
57080: IFFALSE 57226
57082: GO 57084
57084: DISABLE
57085: LD_INT 0
57087: PPUSH
57088: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57089: LD_ADDR_VAR 0 1
57093: PUSH
57094: LD_INT 22
57096: PUSH
57097: LD_OWVAR 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: LD_INT 30
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 30
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PPUSH
57138: CALL_OW 69
57142: ST_TO_ADDR
// if not depot then
57143: LD_VAR 0 1
57147: NOT
57148: IFFALSE 57152
// exit ;
57150: GO 57226
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57152: LD_ADDR_VAR 0 2
57156: PUSH
57157: LD_VAR 0 1
57161: PUSH
57162: LD_INT 1
57164: PPUSH
57165: LD_VAR 0 1
57169: PPUSH
57170: CALL_OW 12
57174: ARRAY
57175: PPUSH
57176: CALL_OW 274
57180: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57181: LD_VAR 0 2
57185: PPUSH
57186: LD_INT 1
57188: PPUSH
57189: LD_INT 0
57191: PPUSH
57192: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57196: LD_VAR 0 2
57200: PPUSH
57201: LD_INT 2
57203: PPUSH
57204: LD_INT 0
57206: PPUSH
57207: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57211: LD_VAR 0 2
57215: PPUSH
57216: LD_INT 3
57218: PPUSH
57219: LD_INT 0
57221: PPUSH
57222: CALL_OW 277
// end ;
57226: PPOPN 2
57228: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57229: LD_EXP 28
57233: IFFALSE 57241
57235: PUSH
57236: LD_EXP 56
57240: AND
57241: IFFALSE 57338
57243: GO 57245
57245: DISABLE
57246: LD_INT 0
57248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57249: LD_ADDR_VAR 0 1
57253: PUSH
57254: LD_INT 22
57256: PUSH
57257: LD_OWVAR 2
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 21
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: LD_INT 23
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PPUSH
57298: CALL_OW 69
57302: ST_TO_ADDR
// if not tmp then
57303: LD_VAR 0 1
57307: NOT
57308: IFFALSE 57312
// exit ;
57310: GO 57338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57312: LD_VAR 0 1
57316: PUSH
57317: LD_INT 1
57319: PPUSH
57320: LD_VAR 0 1
57324: PPUSH
57325: CALL_OW 12
57329: ARRAY
57330: PPUSH
57331: LD_INT 200
57333: PPUSH
57334: CALL_OW 234
// end ;
57338: PPOPN 1
57340: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57341: LD_EXP 28
57345: IFFALSE 57353
57347: PUSH
57348: LD_EXP 57
57352: AND
57353: IFFALSE 57432
57355: GO 57357
57357: DISABLE
57358: LD_INT 0
57360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57361: LD_ADDR_VAR 0 1
57365: PUSH
57366: LD_INT 22
57368: PUSH
57369: LD_OWVAR 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 21
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PPUSH
57392: CALL_OW 69
57396: ST_TO_ADDR
// if not tmp then
57397: LD_VAR 0 1
57401: NOT
57402: IFFALSE 57406
// exit ;
57404: GO 57432
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57406: LD_VAR 0 1
57410: PUSH
57411: LD_INT 1
57413: PPUSH
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 12
57423: ARRAY
57424: PPUSH
57425: LD_INT 60
57427: PPUSH
57428: CALL_OW 234
// end ;
57432: PPOPN 1
57434: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57435: LD_EXP 28
57439: IFFALSE 57447
57441: PUSH
57442: LD_EXP 58
57446: AND
57447: IFFALSE 57546
57449: GO 57451
57451: DISABLE
57452: LD_INT 0
57454: PPUSH
57455: PPUSH
// begin enable ;
57456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57457: LD_ADDR_VAR 0 1
57461: PUSH
57462: LD_INT 22
57464: PUSH
57465: LD_OWVAR 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 61
57476: PUSH
57477: EMPTY
57478: LIST
57479: PUSH
57480: LD_INT 33
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: PPUSH
57495: CALL_OW 69
57499: ST_TO_ADDR
// if not tmp then
57500: LD_VAR 0 1
57504: NOT
57505: IFFALSE 57509
// exit ;
57507: GO 57546
// for i in tmp do
57509: LD_ADDR_VAR 0 2
57513: PUSH
57514: LD_VAR 0 1
57518: PUSH
57519: FOR_IN
57520: IFFALSE 57544
// if IsControledBy ( i ) then
57522: LD_VAR 0 2
57526: PPUSH
57527: CALL_OW 312
57531: IFFALSE 57542
// ComUnlink ( i ) ;
57533: LD_VAR 0 2
57537: PPUSH
57538: CALL_OW 136
57542: GO 57519
57544: POP
57545: POP
// end ;
57546: PPOPN 2
57548: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57549: LD_EXP 28
57553: IFFALSE 57561
57555: PUSH
57556: LD_EXP 59
57560: AND
57561: IFFALSE 57701
57563: GO 57565
57565: DISABLE
57566: LD_INT 0
57568: PPUSH
57569: PPUSH
// begin ToLua ( displayPowell(); ) ;
57570: LD_STRING displayPowell();
57572: PPUSH
57573: CALL_OW 559
// uc_side := 0 ;
57577: LD_ADDR_OWVAR 20
57581: PUSH
57582: LD_INT 0
57584: ST_TO_ADDR
// uc_nation := 2 ;
57585: LD_ADDR_OWVAR 21
57589: PUSH
57590: LD_INT 2
57592: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57593: LD_ADDR_OWVAR 37
57597: PUSH
57598: LD_INT 14
57600: ST_TO_ADDR
// vc_engine := engine_siberite ;
57601: LD_ADDR_OWVAR 39
57605: PUSH
57606: LD_INT 3
57608: ST_TO_ADDR
// vc_control := control_apeman ;
57609: LD_ADDR_OWVAR 38
57613: PUSH
57614: LD_INT 5
57616: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57617: LD_ADDR_OWVAR 40
57621: PUSH
57622: LD_INT 29
57624: ST_TO_ADDR
// un := CreateVehicle ;
57625: LD_ADDR_VAR 0 2
57629: PUSH
57630: CALL_OW 45
57634: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57635: LD_VAR 0 2
57639: PPUSH
57640: LD_INT 1
57642: PPUSH
57643: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57647: LD_INT 35
57649: PPUSH
57650: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57654: LD_VAR 0 2
57658: PPUSH
57659: LD_INT 22
57661: PUSH
57662: LD_OWVAR 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PPUSH
57671: CALL_OW 69
57675: PPUSH
57676: LD_VAR 0 2
57680: PPUSH
57681: CALL_OW 74
57685: PPUSH
57686: CALL_OW 115
// until IsDead ( un ) ;
57690: LD_VAR 0 2
57694: PPUSH
57695: CALL_OW 301
57699: IFFALSE 57647
// end ;
57701: PPOPN 2
57703: END
// every 0 0$1 trigger StreamModeActive and sStu do
57704: LD_EXP 28
57708: IFFALSE 57716
57710: PUSH
57711: LD_EXP 67
57715: AND
57716: IFFALSE 57732
57718: GO 57720
57720: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57721: LD_STRING displayStucuk();
57723: PPUSH
57724: CALL_OW 559
// ResetFog ;
57728: CALL_OW 335
// end ;
57732: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57733: LD_EXP 28
57737: IFFALSE 57745
57739: PUSH
57740: LD_EXP 60
57744: AND
57745: IFFALSE 57886
57747: GO 57749
57749: DISABLE
57750: LD_INT 0
57752: PPUSH
57753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57754: LD_ADDR_VAR 0 2
57758: PUSH
57759: LD_INT 22
57761: PUSH
57762: LD_OWVAR 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 21
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PPUSH
57785: CALL_OW 69
57789: ST_TO_ADDR
// if not tmp then
57790: LD_VAR 0 2
57794: NOT
57795: IFFALSE 57799
// exit ;
57797: GO 57886
// un := tmp [ rand ( 1 , tmp ) ] ;
57799: LD_ADDR_VAR 0 1
57803: PUSH
57804: LD_VAR 0 2
57808: PUSH
57809: LD_INT 1
57811: PPUSH
57812: LD_VAR 0 2
57816: PPUSH
57817: CALL_OW 12
57821: ARRAY
57822: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57823: LD_VAR 0 1
57827: PPUSH
57828: LD_INT 0
57830: PPUSH
57831: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57835: LD_VAR 0 1
57839: PPUSH
57840: LD_OWVAR 3
57844: PUSH
57845: LD_VAR 0 1
57849: DIFF
57850: PPUSH
57851: LD_VAR 0 1
57855: PPUSH
57856: CALL_OW 74
57860: PPUSH
57861: CALL_OW 115
// wait ( 0 0$20 ) ;
57865: LD_INT 700
57867: PPUSH
57868: CALL_OW 67
// SetSide ( un , your_side ) ;
57872: LD_VAR 0 1
57876: PPUSH
57877: LD_OWVAR 2
57881: PPUSH
57882: CALL_OW 235
// end ;
57886: PPOPN 2
57888: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57889: LD_EXP 28
57893: IFFALSE 57901
57895: PUSH
57896: LD_EXP 61
57900: AND
57901: IFFALSE 58007
57903: GO 57905
57905: DISABLE
57906: LD_INT 0
57908: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57909: LD_ADDR_VAR 0 1
57913: PUSH
57914: LD_INT 22
57916: PUSH
57917: LD_OWVAR 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: LD_INT 30
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 30
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: LIST
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PPUSH
57958: CALL_OW 69
57962: ST_TO_ADDR
// if not depot then
57963: LD_VAR 0 1
57967: NOT
57968: IFFALSE 57972
// exit ;
57970: GO 58007
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57972: LD_VAR 0 1
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PPUSH
57981: CALL_OW 250
57985: PPUSH
57986: LD_VAR 0 1
57990: PUSH
57991: LD_INT 1
57993: ARRAY
57994: PPUSH
57995: CALL_OW 251
57999: PPUSH
58000: LD_INT 70
58002: PPUSH
58003: CALL_OW 495
// end ;
58007: PPOPN 1
58009: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58010: LD_EXP 28
58014: IFFALSE 58022
58016: PUSH
58017: LD_EXP 62
58021: AND
58022: IFFALSE 58233
58024: GO 58026
58026: DISABLE
58027: LD_INT 0
58029: PPUSH
58030: PPUSH
58031: PPUSH
58032: PPUSH
58033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58034: LD_ADDR_VAR 0 5
58038: PUSH
58039: LD_INT 22
58041: PUSH
58042: LD_OWVAR 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 21
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PPUSH
58065: CALL_OW 69
58069: ST_TO_ADDR
// if not tmp then
58070: LD_VAR 0 5
58074: NOT
58075: IFFALSE 58079
// exit ;
58077: GO 58233
// for i in tmp do
58079: LD_ADDR_VAR 0 1
58083: PUSH
58084: LD_VAR 0 5
58088: PUSH
58089: FOR_IN
58090: IFFALSE 58231
// begin d := rand ( 0 , 5 ) ;
58092: LD_ADDR_VAR 0 4
58096: PUSH
58097: LD_INT 0
58099: PPUSH
58100: LD_INT 5
58102: PPUSH
58103: CALL_OW 12
58107: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58108: LD_ADDR_VAR 0 2
58112: PUSH
58113: LD_VAR 0 1
58117: PPUSH
58118: CALL_OW 250
58122: PPUSH
58123: LD_VAR 0 4
58127: PPUSH
58128: LD_INT 3
58130: PPUSH
58131: LD_INT 12
58133: PPUSH
58134: CALL_OW 12
58138: PPUSH
58139: CALL_OW 272
58143: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58144: LD_ADDR_VAR 0 3
58148: PUSH
58149: LD_VAR 0 1
58153: PPUSH
58154: CALL_OW 251
58158: PPUSH
58159: LD_VAR 0 4
58163: PPUSH
58164: LD_INT 3
58166: PPUSH
58167: LD_INT 12
58169: PPUSH
58170: CALL_OW 12
58174: PPUSH
58175: CALL_OW 273
58179: ST_TO_ADDR
// if ValidHex ( x , y ) then
58180: LD_VAR 0 2
58184: PPUSH
58185: LD_VAR 0 3
58189: PPUSH
58190: CALL_OW 488
58194: IFFALSE 58229
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58196: LD_VAR 0 1
58200: PPUSH
58201: LD_VAR 0 2
58205: PPUSH
58206: LD_VAR 0 3
58210: PPUSH
58211: LD_INT 3
58213: PPUSH
58214: LD_INT 6
58216: PPUSH
58217: CALL_OW 12
58221: PPUSH
58222: LD_INT 1
58224: PPUSH
58225: CALL_OW 483
// end ;
58229: GO 58089
58231: POP
58232: POP
// end ;
58233: PPOPN 5
58235: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58236: LD_EXP 28
58240: IFFALSE 58248
58242: PUSH
58243: LD_EXP 63
58247: AND
58248: IFFALSE 58342
58250: GO 58252
58252: DISABLE
58253: LD_INT 0
58255: PPUSH
58256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58257: LD_ADDR_VAR 0 2
58261: PUSH
58262: LD_INT 22
58264: PUSH
58265: LD_OWVAR 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 32
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 21
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: PPUSH
58299: CALL_OW 69
58303: ST_TO_ADDR
// if not tmp then
58304: LD_VAR 0 2
58308: NOT
58309: IFFALSE 58313
// exit ;
58311: GO 58342
// for i in tmp do
58313: LD_ADDR_VAR 0 1
58317: PUSH
58318: LD_VAR 0 2
58322: PUSH
58323: FOR_IN
58324: IFFALSE 58340
// SetFuel ( i , 0 ) ;
58326: LD_VAR 0 1
58330: PPUSH
58331: LD_INT 0
58333: PPUSH
58334: CALL_OW 240
58338: GO 58323
58340: POP
58341: POP
// end ;
58342: PPOPN 2
58344: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58345: LD_EXP 28
58349: IFFALSE 58357
58351: PUSH
58352: LD_EXP 64
58356: AND
58357: IFFALSE 58423
58359: GO 58361
58361: DISABLE
58362: LD_INT 0
58364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58365: LD_ADDR_VAR 0 1
58369: PUSH
58370: LD_INT 22
58372: PUSH
58373: LD_OWVAR 2
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 30
58384: PUSH
58385: LD_INT 29
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PPUSH
58396: CALL_OW 69
58400: ST_TO_ADDR
// if not tmp then
58401: LD_VAR 0 1
58405: NOT
58406: IFFALSE 58410
// exit ;
58408: GO 58423
// DestroyUnit ( tmp [ 1 ] ) ;
58410: LD_VAR 0 1
58414: PUSH
58415: LD_INT 1
58417: ARRAY
58418: PPUSH
58419: CALL_OW 65
// end ;
58423: PPOPN 1
58425: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58426: LD_EXP 28
58430: IFFALSE 58438
58432: PUSH
58433: LD_EXP 66
58437: AND
58438: IFFALSE 58567
58440: GO 58442
58442: DISABLE
58443: LD_INT 0
58445: PPUSH
// begin uc_side := 0 ;
58446: LD_ADDR_OWVAR 20
58450: PUSH
58451: LD_INT 0
58453: ST_TO_ADDR
// uc_nation := nation_arabian ;
58454: LD_ADDR_OWVAR 21
58458: PUSH
58459: LD_INT 2
58461: ST_TO_ADDR
// hc_gallery :=  ;
58462: LD_ADDR_OWVAR 33
58466: PUSH
58467: LD_STRING 
58469: ST_TO_ADDR
// hc_name :=  ;
58470: LD_ADDR_OWVAR 26
58474: PUSH
58475: LD_STRING 
58477: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58478: LD_INT 1
58480: PPUSH
58481: LD_INT 11
58483: PPUSH
58484: LD_INT 10
58486: PPUSH
58487: CALL_OW 380
// un := CreateHuman ;
58491: LD_ADDR_VAR 0 1
58495: PUSH
58496: CALL_OW 44
58500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58501: LD_VAR 0 1
58505: PPUSH
58506: LD_INT 1
58508: PPUSH
58509: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58513: LD_INT 35
58515: PPUSH
58516: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58520: LD_VAR 0 1
58524: PPUSH
58525: LD_INT 22
58527: PUSH
58528: LD_OWVAR 2
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PPUSH
58537: CALL_OW 69
58541: PPUSH
58542: LD_VAR 0 1
58546: PPUSH
58547: CALL_OW 74
58551: PPUSH
58552: CALL_OW 115
// until IsDead ( un ) ;
58556: LD_VAR 0 1
58560: PPUSH
58561: CALL_OW 301
58565: IFFALSE 58513
// end ;
58567: PPOPN 1
58569: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58570: LD_EXP 28
58574: IFFALSE 58582
58576: PUSH
58577: LD_EXP 68
58581: AND
58582: IFFALSE 58594
58584: GO 58586
58586: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58587: LD_STRING earthquake(getX(game), 0, 32)
58589: PPUSH
58590: CALL_OW 559
58594: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58595: LD_EXP 28
58599: IFFALSE 58607
58601: PUSH
58602: LD_EXP 69
58606: AND
58607: IFFALSE 58698
58609: GO 58611
58611: DISABLE
58612: LD_INT 0
58614: PPUSH
// begin enable ;
58615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58616: LD_ADDR_VAR 0 1
58620: PUSH
58621: LD_INT 22
58623: PUSH
58624: LD_OWVAR 2
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 21
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 33
58645: PUSH
58646: LD_INT 3
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: PPUSH
58658: CALL_OW 69
58662: ST_TO_ADDR
// if not tmp then
58663: LD_VAR 0 1
58667: NOT
58668: IFFALSE 58672
// exit ;
58670: GO 58698
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58672: LD_VAR 0 1
58676: PUSH
58677: LD_INT 1
58679: PPUSH
58680: LD_VAR 0 1
58684: PPUSH
58685: CALL_OW 12
58689: ARRAY
58690: PPUSH
58691: LD_INT 1
58693: PPUSH
58694: CALL_OW 234
// end ;
58698: PPOPN 1
58700: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58701: LD_EXP 28
58705: IFFALSE 58713
58707: PUSH
58708: LD_EXP 70
58712: AND
58713: IFFALSE 58854
58715: GO 58717
58717: DISABLE
58718: LD_INT 0
58720: PPUSH
58721: PPUSH
58722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58723: LD_ADDR_VAR 0 3
58727: PUSH
58728: LD_INT 22
58730: PUSH
58731: LD_OWVAR 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 25
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PPUSH
58754: CALL_OW 69
58758: ST_TO_ADDR
// if not tmp then
58759: LD_VAR 0 3
58763: NOT
58764: IFFALSE 58768
// exit ;
58766: GO 58854
// un := tmp [ rand ( 1 , tmp ) ] ;
58768: LD_ADDR_VAR 0 2
58772: PUSH
58773: LD_VAR 0 3
58777: PUSH
58778: LD_INT 1
58780: PPUSH
58781: LD_VAR 0 3
58785: PPUSH
58786: CALL_OW 12
58790: ARRAY
58791: ST_TO_ADDR
// if Crawls ( un ) then
58792: LD_VAR 0 2
58796: PPUSH
58797: CALL_OW 318
58801: IFFALSE 58812
// ComWalk ( un ) ;
58803: LD_VAR 0 2
58807: PPUSH
58808: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58812: LD_VAR 0 2
58816: PPUSH
58817: LD_INT 9
58819: PPUSH
58820: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58824: LD_INT 28
58826: PPUSH
58827: LD_OWVAR 2
58831: PPUSH
58832: LD_INT 2
58834: PPUSH
58835: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58839: LD_INT 29
58841: PPUSH
58842: LD_OWVAR 2
58846: PPUSH
58847: LD_INT 2
58849: PPUSH
58850: CALL_OW 322
// end ;
58854: PPOPN 3
58856: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58857: LD_EXP 28
58861: IFFALSE 58869
58863: PUSH
58864: LD_EXP 71
58868: AND
58869: IFFALSE 58980
58871: GO 58873
58873: DISABLE
58874: LD_INT 0
58876: PPUSH
58877: PPUSH
58878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58879: LD_ADDR_VAR 0 3
58883: PUSH
58884: LD_INT 22
58886: PUSH
58887: LD_OWVAR 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 25
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PPUSH
58910: CALL_OW 69
58914: ST_TO_ADDR
// if not tmp then
58915: LD_VAR 0 3
58919: NOT
58920: IFFALSE 58924
// exit ;
58922: GO 58980
// un := tmp [ rand ( 1 , tmp ) ] ;
58924: LD_ADDR_VAR 0 2
58928: PUSH
58929: LD_VAR 0 3
58933: PUSH
58934: LD_INT 1
58936: PPUSH
58937: LD_VAR 0 3
58941: PPUSH
58942: CALL_OW 12
58946: ARRAY
58947: ST_TO_ADDR
// if Crawls ( un ) then
58948: LD_VAR 0 2
58952: PPUSH
58953: CALL_OW 318
58957: IFFALSE 58968
// ComWalk ( un ) ;
58959: LD_VAR 0 2
58963: PPUSH
58964: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58968: LD_VAR 0 2
58972: PPUSH
58973: LD_INT 8
58975: PPUSH
58976: CALL_OW 336
// end ;
58980: PPOPN 3
58982: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58983: LD_EXP 28
58987: IFFALSE 58995
58989: PUSH
58990: LD_EXP 72
58994: AND
58995: IFFALSE 59139
58997: GO 58999
58999: DISABLE
59000: LD_INT 0
59002: PPUSH
59003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59004: LD_ADDR_VAR 0 2
59008: PUSH
59009: LD_INT 22
59011: PUSH
59012: LD_OWVAR 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 21
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 34
59036: PUSH
59037: LD_INT 12
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 34
59046: PUSH
59047: LD_INT 51
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 34
59056: PUSH
59057: LD_INT 32
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: LIST
59074: PPUSH
59075: CALL_OW 69
59079: ST_TO_ADDR
// if not tmp then
59080: LD_VAR 0 2
59084: NOT
59085: IFFALSE 59089
// exit ;
59087: GO 59139
// for i in tmp do
59089: LD_ADDR_VAR 0 1
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: FOR_IN
59100: IFFALSE 59137
// if GetCargo ( i , mat_artifact ) = 0 then
59102: LD_VAR 0 1
59106: PPUSH
59107: LD_INT 4
59109: PPUSH
59110: CALL_OW 289
59114: PUSH
59115: LD_INT 0
59117: EQUAL
59118: IFFALSE 59135
// SetCargo ( i , mat_siberit , 100 ) ;
59120: LD_VAR 0 1
59124: PPUSH
59125: LD_INT 3
59127: PPUSH
59128: LD_INT 100
59130: PPUSH
59131: CALL_OW 290
59135: GO 59099
59137: POP
59138: POP
// end ;
59139: PPOPN 2
59141: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59142: LD_EXP 28
59146: IFFALSE 59154
59148: PUSH
59149: LD_EXP 73
59153: AND
59154: IFFALSE 59337
59156: GO 59158
59158: DISABLE
59159: LD_INT 0
59161: PPUSH
59162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59163: LD_ADDR_VAR 0 2
59167: PUSH
59168: LD_INT 22
59170: PUSH
59171: LD_OWVAR 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PPUSH
59180: CALL_OW 69
59184: ST_TO_ADDR
// if not tmp then
59185: LD_VAR 0 2
59189: NOT
59190: IFFALSE 59194
// exit ;
59192: GO 59337
// for i := 1 to 2 do
59194: LD_ADDR_VAR 0 1
59198: PUSH
59199: DOUBLE
59200: LD_INT 1
59202: DEC
59203: ST_TO_ADDR
59204: LD_INT 2
59206: PUSH
59207: FOR_TO
59208: IFFALSE 59335
// begin uc_side := your_side ;
59210: LD_ADDR_OWVAR 20
59214: PUSH
59215: LD_OWVAR 2
59219: ST_TO_ADDR
// uc_nation := nation_american ;
59220: LD_ADDR_OWVAR 21
59224: PUSH
59225: LD_INT 1
59227: ST_TO_ADDR
// vc_chassis := us_morphling ;
59228: LD_ADDR_OWVAR 37
59232: PUSH
59233: LD_INT 5
59235: ST_TO_ADDR
// vc_engine := engine_siberite ;
59236: LD_ADDR_OWVAR 39
59240: PUSH
59241: LD_INT 3
59243: ST_TO_ADDR
// vc_control := control_computer ;
59244: LD_ADDR_OWVAR 38
59248: PUSH
59249: LD_INT 3
59251: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59252: LD_ADDR_OWVAR 40
59256: PUSH
59257: LD_INT 10
59259: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59260: LD_VAR 0 2
59264: PUSH
59265: LD_INT 1
59267: ARRAY
59268: PPUSH
59269: CALL_OW 310
59273: NOT
59274: IFFALSE 59321
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59276: CALL_OW 45
59280: PPUSH
59281: LD_VAR 0 2
59285: PUSH
59286: LD_INT 1
59288: ARRAY
59289: PPUSH
59290: CALL_OW 250
59294: PPUSH
59295: LD_VAR 0 2
59299: PUSH
59300: LD_INT 1
59302: ARRAY
59303: PPUSH
59304: CALL_OW 251
59308: PPUSH
59309: LD_INT 12
59311: PPUSH
59312: LD_INT 1
59314: PPUSH
59315: CALL_OW 50
59319: GO 59333
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59321: CALL_OW 45
59325: PPUSH
59326: LD_INT 1
59328: PPUSH
59329: CALL_OW 51
// end ;
59333: GO 59207
59335: POP
59336: POP
// end ;
59337: PPOPN 2
59339: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59340: LD_EXP 28
59344: IFFALSE 59352
59346: PUSH
59347: LD_EXP 74
59351: AND
59352: IFFALSE 59574
59354: GO 59356
59356: DISABLE
59357: LD_INT 0
59359: PPUSH
59360: PPUSH
59361: PPUSH
59362: PPUSH
59363: PPUSH
59364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59365: LD_ADDR_VAR 0 6
59369: PUSH
59370: LD_INT 22
59372: PUSH
59373: LD_OWVAR 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 21
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: PUSH
59395: LD_INT 23
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: PPUSH
59414: CALL_OW 69
59418: ST_TO_ADDR
// if not tmp then
59419: LD_VAR 0 6
59423: NOT
59424: IFFALSE 59428
// exit ;
59426: GO 59574
// s1 := rand ( 1 , 4 ) ;
59428: LD_ADDR_VAR 0 2
59432: PUSH
59433: LD_INT 1
59435: PPUSH
59436: LD_INT 4
59438: PPUSH
59439: CALL_OW 12
59443: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59444: LD_ADDR_VAR 0 4
59448: PUSH
59449: LD_VAR 0 6
59453: PUSH
59454: LD_INT 1
59456: ARRAY
59457: PPUSH
59458: LD_VAR 0 2
59462: PPUSH
59463: CALL_OW 259
59467: ST_TO_ADDR
// if s1 = 1 then
59468: LD_VAR 0 2
59472: PUSH
59473: LD_INT 1
59475: EQUAL
59476: IFFALSE 59496
// s2 := rand ( 2 , 4 ) else
59478: LD_ADDR_VAR 0 3
59482: PUSH
59483: LD_INT 2
59485: PPUSH
59486: LD_INT 4
59488: PPUSH
59489: CALL_OW 12
59493: ST_TO_ADDR
59494: GO 59504
// s2 := 1 ;
59496: LD_ADDR_VAR 0 3
59500: PUSH
59501: LD_INT 1
59503: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59504: LD_ADDR_VAR 0 5
59508: PUSH
59509: LD_VAR 0 6
59513: PUSH
59514: LD_INT 1
59516: ARRAY
59517: PPUSH
59518: LD_VAR 0 3
59522: PPUSH
59523: CALL_OW 259
59527: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59528: LD_VAR 0 6
59532: PUSH
59533: LD_INT 1
59535: ARRAY
59536: PPUSH
59537: LD_VAR 0 2
59541: PPUSH
59542: LD_VAR 0 5
59546: PPUSH
59547: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59551: LD_VAR 0 6
59555: PUSH
59556: LD_INT 1
59558: ARRAY
59559: PPUSH
59560: LD_VAR 0 3
59564: PPUSH
59565: LD_VAR 0 4
59569: PPUSH
59570: CALL_OW 237
// end ;
59574: PPOPN 6
59576: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59577: LD_EXP 28
59581: IFFALSE 59589
59583: PUSH
59584: LD_EXP 75
59588: AND
59589: IFFALSE 59668
59591: GO 59593
59593: DISABLE
59594: LD_INT 0
59596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59597: LD_ADDR_VAR 0 1
59601: PUSH
59602: LD_INT 22
59604: PUSH
59605: LD_OWVAR 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 30
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PPUSH
59628: CALL_OW 69
59632: ST_TO_ADDR
// if not tmp then
59633: LD_VAR 0 1
59637: NOT
59638: IFFALSE 59642
// exit ;
59640: GO 59668
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 1
59649: PPUSH
59650: LD_VAR 0 1
59654: PPUSH
59655: CALL_OW 12
59659: ARRAY
59660: PPUSH
59661: LD_INT 1
59663: PPUSH
59664: CALL_OW 234
// end ;
59668: PPOPN 1
59670: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59671: LD_EXP 28
59675: IFFALSE 59683
59677: PUSH
59678: LD_EXP 76
59682: AND
59683: IFFALSE 59795
59685: GO 59687
59687: DISABLE
59688: LD_INT 0
59690: PPUSH
59691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59692: LD_ADDR_VAR 0 2
59696: PUSH
59697: LD_INT 22
59699: PUSH
59700: LD_OWVAR 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: LD_INT 30
59714: PUSH
59715: LD_INT 27
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 30
59724: PUSH
59725: LD_INT 26
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 30
59734: PUSH
59735: LD_INT 28
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PPUSH
59752: CALL_OW 69
59756: ST_TO_ADDR
// if not tmp then
59757: LD_VAR 0 2
59761: NOT
59762: IFFALSE 59766
// exit ;
59764: GO 59795
// for i in tmp do
59766: LD_ADDR_VAR 0 1
59770: PUSH
59771: LD_VAR 0 2
59775: PUSH
59776: FOR_IN
59777: IFFALSE 59793
// SetLives ( i , 1 ) ;
59779: LD_VAR 0 1
59783: PPUSH
59784: LD_INT 1
59786: PPUSH
59787: CALL_OW 234
59791: GO 59776
59793: POP
59794: POP
// end ;
59795: PPOPN 2
59797: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59798: LD_EXP 28
59802: IFFALSE 59810
59804: PUSH
59805: LD_EXP 77
59809: AND
59810: IFFALSE 60097
59812: GO 59814
59814: DISABLE
59815: LD_INT 0
59817: PPUSH
59818: PPUSH
59819: PPUSH
// begin i := rand ( 1 , 7 ) ;
59820: LD_ADDR_VAR 0 1
59824: PUSH
59825: LD_INT 1
59827: PPUSH
59828: LD_INT 7
59830: PPUSH
59831: CALL_OW 12
59835: ST_TO_ADDR
// case i of 1 :
59836: LD_VAR 0 1
59840: PUSH
59841: LD_INT 1
59843: DOUBLE
59844: EQUAL
59845: IFTRUE 59849
59847: GO 59859
59849: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59850: LD_STRING earthquake(getX(game), 0, 32)
59852: PPUSH
59853: CALL_OW 559
59857: GO 60097
59859: LD_INT 2
59861: DOUBLE
59862: EQUAL
59863: IFTRUE 59867
59865: GO 59881
59867: POP
// begin ToLua ( displayStucuk(); ) ;
59868: LD_STRING displayStucuk();
59870: PPUSH
59871: CALL_OW 559
// ResetFog ;
59875: CALL_OW 335
// end ; 3 :
59879: GO 60097
59881: LD_INT 3
59883: DOUBLE
59884: EQUAL
59885: IFTRUE 59889
59887: GO 59993
59889: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59890: LD_ADDR_VAR 0 2
59894: PUSH
59895: LD_INT 22
59897: PUSH
59898: LD_OWVAR 2
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 25
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PPUSH
59921: CALL_OW 69
59925: ST_TO_ADDR
// if not tmp then
59926: LD_VAR 0 2
59930: NOT
59931: IFFALSE 59935
// exit ;
59933: GO 60097
// un := tmp [ rand ( 1 , tmp ) ] ;
59935: LD_ADDR_VAR 0 3
59939: PUSH
59940: LD_VAR 0 2
59944: PUSH
59945: LD_INT 1
59947: PPUSH
59948: LD_VAR 0 2
59952: PPUSH
59953: CALL_OW 12
59957: ARRAY
59958: ST_TO_ADDR
// if Crawls ( un ) then
59959: LD_VAR 0 3
59963: PPUSH
59964: CALL_OW 318
59968: IFFALSE 59979
// ComWalk ( un ) ;
59970: LD_VAR 0 3
59974: PPUSH
59975: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59979: LD_VAR 0 3
59983: PPUSH
59984: LD_INT 8
59986: PPUSH
59987: CALL_OW 336
// end ; 4 :
59991: GO 60097
59993: LD_INT 4
59995: DOUBLE
59996: EQUAL
59997: IFTRUE 60001
59999: GO 60075
60001: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60002: LD_ADDR_VAR 0 2
60006: PUSH
60007: LD_INT 22
60009: PUSH
60010: LD_OWVAR 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 30
60021: PUSH
60022: LD_INT 29
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PPUSH
60033: CALL_OW 69
60037: ST_TO_ADDR
// if not tmp then
60038: LD_VAR 0 2
60042: NOT
60043: IFFALSE 60047
// exit ;
60045: GO 60097
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60047: LD_VAR 0 2
60051: PUSH
60052: LD_INT 1
60054: ARRAY
60055: PPUSH
60056: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60060: LD_VAR 0 2
60064: PUSH
60065: LD_INT 1
60067: ARRAY
60068: PPUSH
60069: CALL_OW 65
// end ; 5 .. 7 :
60073: GO 60097
60075: LD_INT 5
60077: DOUBLE
60078: GREATEREQUAL
60079: IFFALSE 60087
60081: LD_INT 7
60083: DOUBLE
60084: LESSEQUAL
60085: IFTRUE 60089
60087: GO 60096
60089: POP
// StreamSibBomb ; end ;
60090: CALL 56278 0 0
60094: GO 60097
60096: POP
// end ;
60097: PPOPN 3
60099: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60100: LD_EXP 28
60104: IFFALSE 60112
60106: PUSH
60107: LD_EXP 78
60111: AND
60112: IFFALSE 60268
60114: GO 60116
60116: DISABLE
60117: LD_INT 0
60119: PPUSH
60120: PPUSH
60121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60122: LD_ADDR_VAR 0 2
60126: PUSH
60127: LD_INT 81
60129: PUSH
60130: LD_OWVAR 2
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: LD_INT 21
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 21
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PPUSH
60171: CALL_OW 69
60175: ST_TO_ADDR
// if not tmp then
60176: LD_VAR 0 2
60180: NOT
60181: IFFALSE 60185
// exit ;
60183: GO 60268
// p := 0 ;
60185: LD_ADDR_VAR 0 3
60189: PUSH
60190: LD_INT 0
60192: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60193: LD_INT 35
60195: PPUSH
60196: CALL_OW 67
// p := p + 1 ;
60200: LD_ADDR_VAR 0 3
60204: PUSH
60205: LD_VAR 0 3
60209: PUSH
60210: LD_INT 1
60212: PLUS
60213: ST_TO_ADDR
// for i in tmp do
60214: LD_ADDR_VAR 0 1
60218: PUSH
60219: LD_VAR 0 2
60223: PUSH
60224: FOR_IN
60225: IFFALSE 60256
// if GetLives ( i ) < 1000 then
60227: LD_VAR 0 1
60231: PPUSH
60232: CALL_OW 256
60236: PUSH
60237: LD_INT 1000
60239: LESS
60240: IFFALSE 60254
// SetLives ( i , 1000 ) ;
60242: LD_VAR 0 1
60246: PPUSH
60247: LD_INT 1000
60249: PPUSH
60250: CALL_OW 234
60254: GO 60224
60256: POP
60257: POP
// until p > 20 ;
60258: LD_VAR 0 3
60262: PUSH
60263: LD_INT 20
60265: GREATER
60266: IFFALSE 60193
// end ;
60268: PPOPN 3
60270: END
// every 0 0$1 trigger StreamModeActive and sTime do
60271: LD_EXP 28
60275: IFFALSE 60283
60277: PUSH
60278: LD_EXP 79
60282: AND
60283: IFFALSE 60318
60285: GO 60287
60287: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60288: LD_INT 28
60290: PPUSH
60291: LD_OWVAR 2
60295: PPUSH
60296: LD_INT 2
60298: PPUSH
60299: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60303: LD_INT 30
60305: PPUSH
60306: LD_OWVAR 2
60310: PPUSH
60311: LD_INT 2
60313: PPUSH
60314: CALL_OW 322
// end ;
60318: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60319: LD_EXP 28
60323: IFFALSE 60331
60325: PUSH
60326: LD_EXP 80
60330: AND
60331: IFFALSE 60452
60333: GO 60335
60335: DISABLE
60336: LD_INT 0
60338: PPUSH
60339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60340: LD_ADDR_VAR 0 2
60344: PUSH
60345: LD_INT 22
60347: PUSH
60348: LD_OWVAR 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 21
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: PUSH
60370: LD_INT 23
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PPUSH
60389: CALL_OW 69
60393: ST_TO_ADDR
// if not tmp then
60394: LD_VAR 0 2
60398: NOT
60399: IFFALSE 60403
// exit ;
60401: GO 60452
// for i in tmp do
60403: LD_ADDR_VAR 0 1
60407: PUSH
60408: LD_VAR 0 2
60412: PUSH
60413: FOR_IN
60414: IFFALSE 60450
// begin if Crawls ( i ) then
60416: LD_VAR 0 1
60420: PPUSH
60421: CALL_OW 318
60425: IFFALSE 60436
// ComWalk ( i ) ;
60427: LD_VAR 0 1
60431: PPUSH
60432: CALL_OW 138
// SetClass ( i , 2 ) ;
60436: LD_VAR 0 1
60440: PPUSH
60441: LD_INT 2
60443: PPUSH
60444: CALL_OW 336
// end ;
60448: GO 60413
60450: POP
60451: POP
// end ;
60452: PPOPN 2
60454: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60455: LD_EXP 28
60459: IFFALSE 60467
60461: PUSH
60462: LD_EXP 81
60466: AND
60467: IFFALSE 60757
60469: GO 60471
60471: DISABLE
60472: LD_INT 0
60474: PPUSH
60475: PPUSH
60476: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60477: LD_OWVAR 2
60481: PPUSH
60482: LD_INT 9
60484: PPUSH
60485: LD_INT 1
60487: PPUSH
60488: LD_INT 1
60490: PPUSH
60491: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60495: LD_INT 9
60497: PPUSH
60498: LD_OWVAR 2
60502: PPUSH
60503: CALL_OW 343
// uc_side := 9 ;
60507: LD_ADDR_OWVAR 20
60511: PUSH
60512: LD_INT 9
60514: ST_TO_ADDR
// uc_nation := 2 ;
60515: LD_ADDR_OWVAR 21
60519: PUSH
60520: LD_INT 2
60522: ST_TO_ADDR
// hc_name := Dark Warrior ;
60523: LD_ADDR_OWVAR 26
60527: PUSH
60528: LD_STRING Dark Warrior
60530: ST_TO_ADDR
// hc_gallery :=  ;
60531: LD_ADDR_OWVAR 33
60535: PUSH
60536: LD_STRING 
60538: ST_TO_ADDR
// hc_noskilllimit := true ;
60539: LD_ADDR_OWVAR 76
60543: PUSH
60544: LD_INT 1
60546: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60547: LD_ADDR_OWVAR 31
60551: PUSH
60552: LD_INT 30
60554: PUSH
60555: LD_INT 30
60557: PUSH
60558: LD_INT 30
60560: PUSH
60561: LD_INT 30
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: ST_TO_ADDR
// un := CreateHuman ;
60570: LD_ADDR_VAR 0 3
60574: PUSH
60575: CALL_OW 44
60579: ST_TO_ADDR
// hc_noskilllimit := false ;
60580: LD_ADDR_OWVAR 76
60584: PUSH
60585: LD_INT 0
60587: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60588: LD_VAR 0 3
60592: PPUSH
60593: LD_INT 1
60595: PPUSH
60596: CALL_OW 51
// ToLua ( playRanger() ) ;
60600: LD_STRING playRanger()
60602: PPUSH
60603: CALL_OW 559
// p := 0 ;
60607: LD_ADDR_VAR 0 2
60611: PUSH
60612: LD_INT 0
60614: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60615: LD_INT 35
60617: PPUSH
60618: CALL_OW 67
// p := p + 1 ;
60622: LD_ADDR_VAR 0 2
60626: PUSH
60627: LD_VAR 0 2
60631: PUSH
60632: LD_INT 1
60634: PLUS
60635: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60636: LD_VAR 0 3
60640: PPUSH
60641: CALL_OW 256
60645: PUSH
60646: LD_INT 1000
60648: LESS
60649: IFFALSE 60663
// SetLives ( un , 1000 ) ;
60651: LD_VAR 0 3
60655: PPUSH
60656: LD_INT 1000
60658: PPUSH
60659: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60663: LD_VAR 0 3
60667: PPUSH
60668: LD_INT 81
60670: PUSH
60671: LD_OWVAR 2
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 91
60682: PUSH
60683: LD_VAR 0 3
60687: PUSH
60688: LD_INT 30
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PPUSH
60700: CALL_OW 69
60704: PPUSH
60705: LD_VAR 0 3
60709: PPUSH
60710: CALL_OW 74
60714: PPUSH
60715: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60719: LD_VAR 0 2
60723: PUSH
60724: LD_INT 80
60726: GREATER
60727: IFTRUE 60740
60729: PUSH
60730: LD_VAR 0 3
60734: PPUSH
60735: CALL_OW 301
60739: OR
60740: IFFALSE 60615
// if un then
60742: LD_VAR 0 3
60746: IFFALSE 60757
// RemoveUnit ( un ) ;
60748: LD_VAR 0 3
60752: PPUSH
60753: CALL_OW 64
// end ;
60757: PPOPN 3
60759: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60760: LD_EXP 82
60764: IFFALSE 60880
60766: GO 60768
60768: DISABLE
60769: LD_INT 0
60771: PPUSH
60772: PPUSH
60773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60774: LD_ADDR_VAR 0 2
60778: PUSH
60779: LD_INT 81
60781: PUSH
60782: LD_OWVAR 2
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 21
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PPUSH
60805: CALL_OW 69
60809: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60810: LD_STRING playComputer()
60812: PPUSH
60813: CALL_OW 559
// if not tmp then
60817: LD_VAR 0 2
60821: NOT
60822: IFFALSE 60826
// exit ;
60824: GO 60880
// for i in tmp do
60826: LD_ADDR_VAR 0 1
60830: PUSH
60831: LD_VAR 0 2
60835: PUSH
60836: FOR_IN
60837: IFFALSE 60878
// for j := 1 to 4 do
60839: LD_ADDR_VAR 0 3
60843: PUSH
60844: DOUBLE
60845: LD_INT 1
60847: DEC
60848: ST_TO_ADDR
60849: LD_INT 4
60851: PUSH
60852: FOR_TO
60853: IFFALSE 60874
// SetSkill ( i , j , 10 ) ;
60855: LD_VAR 0 1
60859: PPUSH
60860: LD_VAR 0 3
60864: PPUSH
60865: LD_INT 10
60867: PPUSH
60868: CALL_OW 237
60872: GO 60852
60874: POP
60875: POP
60876: GO 60836
60878: POP
60879: POP
// end ;
60880: PPOPN 3
60882: END
// every 0 0$1 trigger s30 do var i , tmp ;
60883: LD_EXP 83
60887: IFFALSE 60956
60889: GO 60891
60891: DISABLE
60892: LD_INT 0
60894: PPUSH
60895: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60896: LD_ADDR_VAR 0 2
60900: PUSH
60901: LD_INT 22
60903: PUSH
60904: LD_OWVAR 2
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PPUSH
60913: CALL_OW 69
60917: ST_TO_ADDR
// if not tmp then
60918: LD_VAR 0 2
60922: NOT
60923: IFFALSE 60927
// exit ;
60925: GO 60956
// for i in tmp do
60927: LD_ADDR_VAR 0 1
60931: PUSH
60932: LD_VAR 0 2
60936: PUSH
60937: FOR_IN
60938: IFFALSE 60954
// SetLives ( i , 300 ) ;
60940: LD_VAR 0 1
60944: PPUSH
60945: LD_INT 300
60947: PPUSH
60948: CALL_OW 234
60952: GO 60937
60954: POP
60955: POP
// end ;
60956: PPOPN 2
60958: END
// every 0 0$1 trigger s60 do var i , tmp ;
60959: LD_EXP 84
60963: IFFALSE 61032
60965: GO 60967
60967: DISABLE
60968: LD_INT 0
60970: PPUSH
60971: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60972: LD_ADDR_VAR 0 2
60976: PUSH
60977: LD_INT 22
60979: PUSH
60980: LD_OWVAR 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PPUSH
60989: CALL_OW 69
60993: ST_TO_ADDR
// if not tmp then
60994: LD_VAR 0 2
60998: NOT
60999: IFFALSE 61003
// exit ;
61001: GO 61032
// for i in tmp do
61003: LD_ADDR_VAR 0 1
61007: PUSH
61008: LD_VAR 0 2
61012: PUSH
61013: FOR_IN
61014: IFFALSE 61030
// SetLives ( i , 600 ) ;
61016: LD_VAR 0 1
61020: PPUSH
61021: LD_INT 600
61023: PPUSH
61024: CALL_OW 234
61028: GO 61013
61030: POP
61031: POP
// end ;
61032: PPOPN 2
61034: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61035: LD_INT 0
61037: PPUSH
// case cmd of 301 :
61038: LD_VAR 0 1
61042: PUSH
61043: LD_INT 301
61045: DOUBLE
61046: EQUAL
61047: IFTRUE 61051
61049: GO 61083
61051: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61052: LD_VAR 0 6
61056: PPUSH
61057: LD_VAR 0 7
61061: PPUSH
61062: LD_VAR 0 8
61066: PPUSH
61067: LD_VAR 0 4
61071: PPUSH
61072: LD_VAR 0 5
61076: PPUSH
61077: CALL 62296 0 5
61081: GO 61204
61083: LD_INT 302
61085: DOUBLE
61086: EQUAL
61087: IFTRUE 61091
61089: GO 61128
61091: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61092: LD_VAR 0 6
61096: PPUSH
61097: LD_VAR 0 7
61101: PPUSH
61102: LD_VAR 0 8
61106: PPUSH
61107: LD_VAR 0 9
61111: PPUSH
61112: LD_VAR 0 4
61116: PPUSH
61117: LD_VAR 0 5
61121: PPUSH
61122: CALL 62387 0 6
61126: GO 61204
61128: LD_INT 303
61130: DOUBLE
61131: EQUAL
61132: IFTRUE 61136
61134: GO 61173
61136: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61137: LD_VAR 0 6
61141: PPUSH
61142: LD_VAR 0 7
61146: PPUSH
61147: LD_VAR 0 8
61151: PPUSH
61152: LD_VAR 0 9
61156: PPUSH
61157: LD_VAR 0 4
61161: PPUSH
61162: LD_VAR 0 5
61166: PPUSH
61167: CALL 61209 0 6
61171: GO 61204
61173: LD_INT 304
61175: DOUBLE
61176: EQUAL
61177: IFTRUE 61181
61179: GO 61203
61181: POP
// hHackTeleport ( unit , x , y ) ; end ;
61182: LD_VAR 0 2
61186: PPUSH
61187: LD_VAR 0 4
61191: PPUSH
61192: LD_VAR 0 5
61196: PPUSH
61197: CALL 62980 0 3
61201: GO 61204
61203: POP
// end ;
61204: LD_VAR 0 12
61208: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61209: LD_INT 0
61211: PPUSH
61212: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61213: LD_VAR 0 1
61217: PUSH
61218: LD_INT 1
61220: LESS
61221: IFTRUE 61233
61223: PUSH
61224: LD_VAR 0 1
61228: PUSH
61229: LD_INT 3
61231: GREATER
61232: OR
61233: IFTRUE 61251
61235: PUSH
61236: LD_VAR 0 5
61240: PPUSH
61241: LD_VAR 0 6
61245: PPUSH
61246: CALL_OW 428
61250: OR
61251: IFFALSE 61255
// exit ;
61253: GO 61983
// uc_side := your_side ;
61255: LD_ADDR_OWVAR 20
61259: PUSH
61260: LD_OWVAR 2
61264: ST_TO_ADDR
// uc_nation := nation ;
61265: LD_ADDR_OWVAR 21
61269: PUSH
61270: LD_VAR 0 1
61274: ST_TO_ADDR
// bc_level = 1 ;
61275: LD_ADDR_OWVAR 43
61279: PUSH
61280: LD_INT 1
61282: ST_TO_ADDR
// case btype of 1 :
61283: LD_VAR 0 2
61287: PUSH
61288: LD_INT 1
61290: DOUBLE
61291: EQUAL
61292: IFTRUE 61296
61294: GO 61307
61296: POP
// bc_type := b_depot ; 2 :
61297: LD_ADDR_OWVAR 42
61301: PUSH
61302: LD_INT 0
61304: ST_TO_ADDR
61305: GO 61927
61307: LD_INT 2
61309: DOUBLE
61310: EQUAL
61311: IFTRUE 61315
61313: GO 61326
61315: POP
// bc_type := b_warehouse ; 3 :
61316: LD_ADDR_OWVAR 42
61320: PUSH
61321: LD_INT 1
61323: ST_TO_ADDR
61324: GO 61927
61326: LD_INT 3
61328: DOUBLE
61329: EQUAL
61330: IFTRUE 61334
61332: GO 61345
61334: POP
// bc_type := b_lab ; 4 .. 9 :
61335: LD_ADDR_OWVAR 42
61339: PUSH
61340: LD_INT 6
61342: ST_TO_ADDR
61343: GO 61927
61345: LD_INT 4
61347: DOUBLE
61348: GREATEREQUAL
61349: IFFALSE 61357
61351: LD_INT 9
61353: DOUBLE
61354: LESSEQUAL
61355: IFTRUE 61359
61357: GO 61419
61359: POP
// begin bc_type := b_lab_half ;
61360: LD_ADDR_OWVAR 42
61364: PUSH
61365: LD_INT 7
61367: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61368: LD_ADDR_OWVAR 44
61372: PUSH
61373: LD_INT 10
61375: PUSH
61376: LD_INT 11
61378: PUSH
61379: LD_INT 12
61381: PUSH
61382: LD_INT 15
61384: PUSH
61385: LD_INT 14
61387: PUSH
61388: LD_INT 13
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: LD_VAR 0 2
61403: PUSH
61404: LD_INT 3
61406: MINUS
61407: ARRAY
61408: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
61409: LD_ADDR_OWVAR 45
61413: PUSH
61414: LD_INT 9
61416: ST_TO_ADDR
// end ; 10 .. 13 :
61417: GO 61927
61419: LD_INT 10
61421: DOUBLE
61422: GREATEREQUAL
61423: IFFALSE 61431
61425: LD_INT 13
61427: DOUBLE
61428: LESSEQUAL
61429: IFTRUE 61433
61431: GO 61510
61433: POP
// begin bc_type := b_lab_full ;
61434: LD_ADDR_OWVAR 42
61438: PUSH
61439: LD_INT 8
61441: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61442: LD_ADDR_OWVAR 44
61446: PUSH
61447: LD_INT 10
61449: PUSH
61450: LD_INT 12
61452: PUSH
61453: LD_INT 14
61455: PUSH
61456: LD_INT 13
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: PUSH
61465: LD_VAR 0 2
61469: PUSH
61470: LD_INT 9
61472: MINUS
61473: ARRAY
61474: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61475: LD_ADDR_OWVAR 45
61479: PUSH
61480: LD_INT 11
61482: PUSH
61483: LD_INT 15
61485: PUSH
61486: LD_INT 12
61488: PUSH
61489: LD_INT 15
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: PUSH
61498: LD_VAR 0 2
61502: PUSH
61503: LD_INT 9
61505: MINUS
61506: ARRAY
61507: ST_TO_ADDR
// end ; 14 :
61508: GO 61927
61510: LD_INT 14
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61518
61516: GO 61529
61518: POP
// bc_type := b_workshop ; 15 :
61519: LD_ADDR_OWVAR 42
61523: PUSH
61524: LD_INT 2
61526: ST_TO_ADDR
61527: GO 61927
61529: LD_INT 15
61531: DOUBLE
61532: EQUAL
61533: IFTRUE 61537
61535: GO 61548
61537: POP
// bc_type := b_factory ; 16 :
61538: LD_ADDR_OWVAR 42
61542: PUSH
61543: LD_INT 3
61545: ST_TO_ADDR
61546: GO 61927
61548: LD_INT 16
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61556
61554: GO 61567
61556: POP
// bc_type := b_ext_gun ; 17 :
61557: LD_ADDR_OWVAR 42
61561: PUSH
61562: LD_INT 17
61564: ST_TO_ADDR
61565: GO 61927
61567: LD_INT 17
61569: DOUBLE
61570: EQUAL
61571: IFTRUE 61575
61573: GO 61603
61575: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61576: LD_ADDR_OWVAR 42
61580: PUSH
61581: LD_INT 19
61583: PUSH
61584: LD_INT 23
61586: PUSH
61587: LD_INT 19
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: LIST
61594: PUSH
61595: LD_VAR 0 1
61599: ARRAY
61600: ST_TO_ADDR
61601: GO 61927
61603: LD_INT 18
61605: DOUBLE
61606: EQUAL
61607: IFTRUE 61611
61609: GO 61622
61611: POP
// bc_type := b_ext_radar ; 19 :
61612: LD_ADDR_OWVAR 42
61616: PUSH
61617: LD_INT 20
61619: ST_TO_ADDR
61620: GO 61927
61622: LD_INT 19
61624: DOUBLE
61625: EQUAL
61626: IFTRUE 61630
61628: GO 61641
61630: POP
// bc_type := b_ext_radio ; 20 :
61631: LD_ADDR_OWVAR 42
61635: PUSH
61636: LD_INT 22
61638: ST_TO_ADDR
61639: GO 61927
61641: LD_INT 20
61643: DOUBLE
61644: EQUAL
61645: IFTRUE 61649
61647: GO 61660
61649: POP
// bc_type := b_ext_siberium ; 21 :
61650: LD_ADDR_OWVAR 42
61654: PUSH
61655: LD_INT 21
61657: ST_TO_ADDR
61658: GO 61927
61660: LD_INT 21
61662: DOUBLE
61663: EQUAL
61664: IFTRUE 61668
61666: GO 61679
61668: POP
// bc_type := b_ext_computer ; 22 :
61669: LD_ADDR_OWVAR 42
61673: PUSH
61674: LD_INT 24
61676: ST_TO_ADDR
61677: GO 61927
61679: LD_INT 22
61681: DOUBLE
61682: EQUAL
61683: IFTRUE 61687
61685: GO 61698
61687: POP
// bc_type := b_ext_track ; 23 :
61688: LD_ADDR_OWVAR 42
61692: PUSH
61693: LD_INT 16
61695: ST_TO_ADDR
61696: GO 61927
61698: LD_INT 23
61700: DOUBLE
61701: EQUAL
61702: IFTRUE 61706
61704: GO 61717
61706: POP
// bc_type := b_ext_laser ; 24 :
61707: LD_ADDR_OWVAR 42
61711: PUSH
61712: LD_INT 25
61714: ST_TO_ADDR
61715: GO 61927
61717: LD_INT 24
61719: DOUBLE
61720: EQUAL
61721: IFTRUE 61725
61723: GO 61736
61725: POP
// bc_type := b_control_tower ; 25 :
61726: LD_ADDR_OWVAR 42
61730: PUSH
61731: LD_INT 36
61733: ST_TO_ADDR
61734: GO 61927
61736: LD_INT 25
61738: DOUBLE
61739: EQUAL
61740: IFTRUE 61744
61742: GO 61755
61744: POP
// bc_type := b_breastwork ; 26 :
61745: LD_ADDR_OWVAR 42
61749: PUSH
61750: LD_INT 31
61752: ST_TO_ADDR
61753: GO 61927
61755: LD_INT 26
61757: DOUBLE
61758: EQUAL
61759: IFTRUE 61763
61761: GO 61774
61763: POP
// bc_type := b_bunker ; 27 :
61764: LD_ADDR_OWVAR 42
61768: PUSH
61769: LD_INT 32
61771: ST_TO_ADDR
61772: GO 61927
61774: LD_INT 27
61776: DOUBLE
61777: EQUAL
61778: IFTRUE 61782
61780: GO 61793
61782: POP
// bc_type := b_turret ; 28 :
61783: LD_ADDR_OWVAR 42
61787: PUSH
61788: LD_INT 33
61790: ST_TO_ADDR
61791: GO 61927
61793: LD_INT 28
61795: DOUBLE
61796: EQUAL
61797: IFTRUE 61801
61799: GO 61812
61801: POP
// bc_type := b_armoury ; 29 :
61802: LD_ADDR_OWVAR 42
61806: PUSH
61807: LD_INT 4
61809: ST_TO_ADDR
61810: GO 61927
61812: LD_INT 29
61814: DOUBLE
61815: EQUAL
61816: IFTRUE 61820
61818: GO 61831
61820: POP
// bc_type := b_barracks ; 30 :
61821: LD_ADDR_OWVAR 42
61825: PUSH
61826: LD_INT 5
61828: ST_TO_ADDR
61829: GO 61927
61831: LD_INT 30
61833: DOUBLE
61834: EQUAL
61835: IFTRUE 61839
61837: GO 61850
61839: POP
// bc_type := b_solar_power ; 31 :
61840: LD_ADDR_OWVAR 42
61844: PUSH
61845: LD_INT 27
61847: ST_TO_ADDR
61848: GO 61927
61850: LD_INT 31
61852: DOUBLE
61853: EQUAL
61854: IFTRUE 61858
61856: GO 61869
61858: POP
// bc_type := b_oil_power ; 32 :
61859: LD_ADDR_OWVAR 42
61863: PUSH
61864: LD_INT 26
61866: ST_TO_ADDR
61867: GO 61927
61869: LD_INT 32
61871: DOUBLE
61872: EQUAL
61873: IFTRUE 61877
61875: GO 61888
61877: POP
// bc_type := b_siberite_power ; 33 :
61878: LD_ADDR_OWVAR 42
61882: PUSH
61883: LD_INT 28
61885: ST_TO_ADDR
61886: GO 61927
61888: LD_INT 33
61890: DOUBLE
61891: EQUAL
61892: IFTRUE 61896
61894: GO 61907
61896: POP
// bc_type := b_oil_mine ; 34 :
61897: LD_ADDR_OWVAR 42
61901: PUSH
61902: LD_INT 29
61904: ST_TO_ADDR
61905: GO 61927
61907: LD_INT 34
61909: DOUBLE
61910: EQUAL
61911: IFTRUE 61915
61913: GO 61926
61915: POP
// bc_type := b_siberite_mine ; end ;
61916: LD_ADDR_OWVAR 42
61920: PUSH
61921: LD_INT 30
61923: ST_TO_ADDR
61924: GO 61927
61926: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61927: LD_ADDR_VAR 0 8
61931: PUSH
61932: LD_VAR 0 5
61936: PPUSH
61937: LD_VAR 0 6
61941: PPUSH
61942: LD_VAR 0 3
61946: PPUSH
61947: CALL_OW 47
61951: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61952: LD_OWVAR 42
61956: PUSH
61957: LD_INT 32
61959: PUSH
61960: LD_INT 33
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: IN
61967: IFFALSE 61983
// PlaceWeaponTurret ( b , weapon ) ;
61969: LD_VAR 0 8
61973: PPUSH
61974: LD_VAR 0 4
61978: PPUSH
61979: CALL_OW 431
// end ;
61983: LD_VAR 0 7
61987: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61988: LD_INT 0
61990: PPUSH
61991: PPUSH
61992: PPUSH
61993: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61994: LD_ADDR_VAR 0 4
61998: PUSH
61999: LD_INT 22
62001: PUSH
62002: LD_OWVAR 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 30
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 30
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: LIST
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PPUSH
62043: CALL_OW 69
62047: ST_TO_ADDR
// if not tmp then
62048: LD_VAR 0 4
62052: NOT
62053: IFFALSE 62057
// exit ;
62055: GO 62116
// for i in tmp do
62057: LD_ADDR_VAR 0 2
62061: PUSH
62062: LD_VAR 0 4
62066: PUSH
62067: FOR_IN
62068: IFFALSE 62114
// for j = 1 to 3 do
62070: LD_ADDR_VAR 0 3
62074: PUSH
62075: DOUBLE
62076: LD_INT 1
62078: DEC
62079: ST_TO_ADDR
62080: LD_INT 3
62082: PUSH
62083: FOR_TO
62084: IFFALSE 62110
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62086: LD_VAR 0 2
62090: PPUSH
62091: CALL_OW 274
62095: PPUSH
62096: LD_VAR 0 3
62100: PPUSH
62101: LD_INT 99999
62103: PPUSH
62104: CALL_OW 277
62108: GO 62083
62110: POP
62111: POP
62112: GO 62067
62114: POP
62115: POP
// end ;
62116: LD_VAR 0 1
62120: RET
// export function hHackSetLevel10 ; var i , j ; begin
62121: LD_INT 0
62123: PPUSH
62124: PPUSH
62125: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62126: LD_ADDR_VAR 0 2
62130: PUSH
62131: LD_INT 21
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PPUSH
62141: CALL_OW 69
62145: PUSH
62146: FOR_IN
62147: IFFALSE 62199
// if IsSelected ( i ) then
62149: LD_VAR 0 2
62153: PPUSH
62154: CALL_OW 306
62158: IFFALSE 62197
// begin for j := 1 to 4 do
62160: LD_ADDR_VAR 0 3
62164: PUSH
62165: DOUBLE
62166: LD_INT 1
62168: DEC
62169: ST_TO_ADDR
62170: LD_INT 4
62172: PUSH
62173: FOR_TO
62174: IFFALSE 62195
// SetSkill ( i , j , 10 ) ;
62176: LD_VAR 0 2
62180: PPUSH
62181: LD_VAR 0 3
62185: PPUSH
62186: LD_INT 10
62188: PPUSH
62189: CALL_OW 237
62193: GO 62173
62195: POP
62196: POP
// end ;
62197: GO 62146
62199: POP
62200: POP
// end ;
62201: LD_VAR 0 1
62205: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62206: LD_INT 0
62208: PPUSH
62209: PPUSH
62210: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62211: LD_ADDR_VAR 0 2
62215: PUSH
62216: LD_INT 22
62218: PUSH
62219: LD_OWVAR 2
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 21
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PPUSH
62242: CALL_OW 69
62246: PUSH
62247: FOR_IN
62248: IFFALSE 62289
// begin for j := 1 to 4 do
62250: LD_ADDR_VAR 0 3
62254: PUSH
62255: DOUBLE
62256: LD_INT 1
62258: DEC
62259: ST_TO_ADDR
62260: LD_INT 4
62262: PUSH
62263: FOR_TO
62264: IFFALSE 62285
// SetSkill ( i , j , 10 ) ;
62266: LD_VAR 0 2
62270: PPUSH
62271: LD_VAR 0 3
62275: PPUSH
62276: LD_INT 10
62278: PPUSH
62279: CALL_OW 237
62283: GO 62263
62285: POP
62286: POP
// end ;
62287: GO 62247
62289: POP
62290: POP
// end ;
62291: LD_VAR 0 1
62295: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62296: LD_INT 0
62298: PPUSH
// uc_side := your_side ;
62299: LD_ADDR_OWVAR 20
62303: PUSH
62304: LD_OWVAR 2
62308: ST_TO_ADDR
// uc_nation := nation ;
62309: LD_ADDR_OWVAR 21
62313: PUSH
62314: LD_VAR 0 1
62318: ST_TO_ADDR
// InitHc ;
62319: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62323: LD_INT 0
62325: PPUSH
62326: LD_VAR 0 2
62330: PPUSH
62331: LD_VAR 0 3
62335: PPUSH
62336: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62340: LD_VAR 0 4
62344: PPUSH
62345: LD_VAR 0 5
62349: PPUSH
62350: CALL_OW 428
62354: PUSH
62355: LD_INT 0
62357: EQUAL
62358: IFFALSE 62382
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62360: CALL_OW 44
62364: PPUSH
62365: LD_VAR 0 4
62369: PPUSH
62370: LD_VAR 0 5
62374: PPUSH
62375: LD_INT 1
62377: PPUSH
62378: CALL_OW 48
// end ;
62382: LD_VAR 0 6
62386: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62387: LD_INT 0
62389: PPUSH
62390: PPUSH
// uc_side := your_side ;
62391: LD_ADDR_OWVAR 20
62395: PUSH
62396: LD_OWVAR 2
62400: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62401: LD_VAR 0 1
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: LD_INT 4
62417: PUSH
62418: LD_INT 5
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: IN
62428: IFFALSE 62440
// uc_nation := nation_american else
62430: LD_ADDR_OWVAR 21
62434: PUSH
62435: LD_INT 1
62437: ST_TO_ADDR
62438: GO 62483
// if chassis in [ 11 , 12 , 13 , 14 ] then
62440: LD_VAR 0 1
62444: PUSH
62445: LD_INT 11
62447: PUSH
62448: LD_INT 12
62450: PUSH
62451: LD_INT 13
62453: PUSH
62454: LD_INT 14
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: IN
62463: IFFALSE 62475
// uc_nation := nation_arabian else
62465: LD_ADDR_OWVAR 21
62469: PUSH
62470: LD_INT 2
62472: ST_TO_ADDR
62473: GO 62483
// uc_nation := nation_russian ;
62475: LD_ADDR_OWVAR 21
62479: PUSH
62480: LD_INT 3
62482: ST_TO_ADDR
// vc_chassis := chassis ;
62483: LD_ADDR_OWVAR 37
62487: PUSH
62488: LD_VAR 0 1
62492: ST_TO_ADDR
// vc_engine := engine ;
62493: LD_ADDR_OWVAR 39
62497: PUSH
62498: LD_VAR 0 2
62502: ST_TO_ADDR
// vc_control := control ;
62503: LD_ADDR_OWVAR 38
62507: PUSH
62508: LD_VAR 0 3
62512: ST_TO_ADDR
// vc_weapon := weapon ;
62513: LD_ADDR_OWVAR 40
62517: PUSH
62518: LD_VAR 0 4
62522: ST_TO_ADDR
// un := CreateVehicle ;
62523: LD_ADDR_VAR 0 8
62527: PUSH
62528: CALL_OW 45
62532: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62533: LD_VAR 0 8
62537: PPUSH
62538: LD_INT 0
62540: PPUSH
62541: LD_INT 5
62543: PPUSH
62544: CALL_OW 12
62548: PPUSH
62549: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62553: LD_VAR 0 8
62557: PPUSH
62558: LD_VAR 0 5
62562: PPUSH
62563: LD_VAR 0 6
62567: PPUSH
62568: LD_INT 1
62570: PPUSH
62571: CALL_OW 48
// end ;
62575: LD_VAR 0 7
62579: RET
// export hInvincible ; every 1 do
62580: GO 62582
62582: DISABLE
// hInvincible := [ ] ;
62583: LD_ADDR_EXP 85
62587: PUSH
62588: EMPTY
62589: ST_TO_ADDR
62590: END
// every 10 do var i ;
62591: GO 62593
62593: DISABLE
62594: LD_INT 0
62596: PPUSH
// begin enable ;
62597: ENABLE
// if not hInvincible then
62598: LD_EXP 85
62602: NOT
62603: IFFALSE 62607
// exit ;
62605: GO 62651
// for i in hInvincible do
62607: LD_ADDR_VAR 0 1
62611: PUSH
62612: LD_EXP 85
62616: PUSH
62617: FOR_IN
62618: IFFALSE 62649
// if GetLives ( i ) < 1000 then
62620: LD_VAR 0 1
62624: PPUSH
62625: CALL_OW 256
62629: PUSH
62630: LD_INT 1000
62632: LESS
62633: IFFALSE 62647
// SetLives ( i , 1000 ) ;
62635: LD_VAR 0 1
62639: PPUSH
62640: LD_INT 1000
62642: PPUSH
62643: CALL_OW 234
62647: GO 62617
62649: POP
62650: POP
// end ;
62651: PPOPN 1
62653: END
// export function hHackInvincible ; var i ; begin
62654: LD_INT 0
62656: PPUSH
62657: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62658: LD_ADDR_VAR 0 2
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: LD_INT 21
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 21
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: PPUSH
62691: CALL_OW 69
62695: PUSH
62696: FOR_IN
62697: IFFALSE 62758
// if IsSelected ( i ) then
62699: LD_VAR 0 2
62703: PPUSH
62704: CALL_OW 306
62708: IFFALSE 62756
// begin if i in hInvincible then
62710: LD_VAR 0 2
62714: PUSH
62715: LD_EXP 85
62719: IN
62720: IFFALSE 62740
// hInvincible := hInvincible diff i else
62722: LD_ADDR_EXP 85
62726: PUSH
62727: LD_EXP 85
62731: PUSH
62732: LD_VAR 0 2
62736: DIFF
62737: ST_TO_ADDR
62738: GO 62756
// hInvincible := hInvincible union i ;
62740: LD_ADDR_EXP 85
62744: PUSH
62745: LD_EXP 85
62749: PUSH
62750: LD_VAR 0 2
62754: UNION
62755: ST_TO_ADDR
// end ;
62756: GO 62696
62758: POP
62759: POP
// end ;
62760: LD_VAR 0 1
62764: RET
// export function hHackInvisible ; var i , j ; begin
62765: LD_INT 0
62767: PPUSH
62768: PPUSH
62769: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62770: LD_ADDR_VAR 0 2
62774: PUSH
62775: LD_INT 21
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PPUSH
62785: CALL_OW 69
62789: PUSH
62790: FOR_IN
62791: IFFALSE 62815
// if IsSelected ( i ) then
62793: LD_VAR 0 2
62797: PPUSH
62798: CALL_OW 306
62802: IFFALSE 62813
// ComForceInvisible ( i ) ;
62804: LD_VAR 0 2
62808: PPUSH
62809: CALL_OW 496
62813: GO 62790
62815: POP
62816: POP
// end ;
62817: LD_VAR 0 1
62821: RET
// export function hHackChangeYourSide ; begin
62822: LD_INT 0
62824: PPUSH
// if your_side = 8 then
62825: LD_OWVAR 2
62829: PUSH
62830: LD_INT 8
62832: EQUAL
62833: IFFALSE 62845
// your_side := 0 else
62835: LD_ADDR_OWVAR 2
62839: PUSH
62840: LD_INT 0
62842: ST_TO_ADDR
62843: GO 62859
// your_side := your_side + 1 ;
62845: LD_ADDR_OWVAR 2
62849: PUSH
62850: LD_OWVAR 2
62854: PUSH
62855: LD_INT 1
62857: PLUS
62858: ST_TO_ADDR
// end ;
62859: LD_VAR 0 1
62863: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62864: LD_INT 0
62866: PPUSH
62867: PPUSH
62868: PPUSH
// for i in all_units do
62869: LD_ADDR_VAR 0 2
62873: PUSH
62874: LD_OWVAR 3
62878: PUSH
62879: FOR_IN
62880: IFFALSE 62958
// if IsSelected ( i ) then
62882: LD_VAR 0 2
62886: PPUSH
62887: CALL_OW 306
62891: IFFALSE 62956
// begin j := GetSide ( i ) ;
62893: LD_ADDR_VAR 0 3
62897: PUSH
62898: LD_VAR 0 2
62902: PPUSH
62903: CALL_OW 255
62907: ST_TO_ADDR
// if j = 8 then
62908: LD_VAR 0 3
62912: PUSH
62913: LD_INT 8
62915: EQUAL
62916: IFFALSE 62928
// j := 0 else
62918: LD_ADDR_VAR 0 3
62922: PUSH
62923: LD_INT 0
62925: ST_TO_ADDR
62926: GO 62942
// j := j + 1 ;
62928: LD_ADDR_VAR 0 3
62932: PUSH
62933: LD_VAR 0 3
62937: PUSH
62938: LD_INT 1
62940: PLUS
62941: ST_TO_ADDR
// SetSide ( i , j ) ;
62942: LD_VAR 0 2
62946: PPUSH
62947: LD_VAR 0 3
62951: PPUSH
62952: CALL_OW 235
// end ;
62956: GO 62879
62958: POP
62959: POP
// end ;
62960: LD_VAR 0 1
62964: RET
// export function hHackFog ; begin
62965: LD_INT 0
62967: PPUSH
// FogOff ( true ) ;
62968: LD_INT 1
62970: PPUSH
62971: CALL_OW 344
// end ;
62975: LD_VAR 0 1
62979: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62980: LD_INT 0
62982: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62983: LD_VAR 0 1
62987: PPUSH
62988: LD_VAR 0 2
62992: PPUSH
62993: LD_VAR 0 3
62997: PPUSH
62998: LD_INT 1
63000: PPUSH
63001: LD_INT 1
63003: PPUSH
63004: CALL_OW 483
// CenterOnXY ( x , y ) ;
63008: LD_VAR 0 2
63012: PPUSH
63013: LD_VAR 0 3
63017: PPUSH
63018: CALL_OW 84
// end ;
63022: LD_VAR 0 4
63026: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63027: LD_INT 0
63029: PPUSH
63030: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63031: LD_VAR 0 1
63035: NOT
63036: IFTRUE 63055
63038: PUSH
63039: LD_VAR 0 2
63043: PPUSH
63044: LD_VAR 0 3
63048: PPUSH
63049: CALL_OW 488
63053: NOT
63054: OR
63055: IFTRUE 63090
63057: PUSH
63058: LD_VAR 0 1
63062: PPUSH
63063: CALL_OW 266
63067: PUSH
63068: LD_INT 3
63070: NONEQUAL
63071: IFFALSE 63089
63073: PUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: CALL_OW 247
63083: PUSH
63084: LD_INT 1
63086: EQUAL
63087: NOT
63088: AND
63089: OR
63090: IFFALSE 63094
// exit ;
63092: GO 63376
// if GetType ( factory ) = unit_human then
63094: LD_VAR 0 1
63098: PPUSH
63099: CALL_OW 247
63103: PUSH
63104: LD_INT 1
63106: EQUAL
63107: IFFALSE 63124
// factory := IsInUnit ( factory ) ;
63109: LD_ADDR_VAR 0 1
63113: PUSH
63114: LD_VAR 0 1
63118: PPUSH
63119: CALL_OW 310
63123: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 266
63133: PUSH
63134: LD_INT 3
63136: NONEQUAL
63137: IFFALSE 63141
// exit ;
63139: GO 63376
// for i := 1 to Count ( factoryWaypoints ) do
63141: LD_ADDR_VAR 0 5
63145: PUSH
63146: DOUBLE
63147: LD_INT 1
63149: DEC
63150: ST_TO_ADDR
63151: LD_EXP 86
63155: PPUSH
63156: CALL 6973 0 1
63160: PUSH
63161: FOR_TO
63162: IFFALSE 63324
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63164: LD_VAR 0 2
63168: PPUSH
63169: LD_VAR 0 3
63173: PPUSH
63174: CALL_OW 428
63178: PUSH
63179: LD_EXP 86
63183: PUSH
63184: LD_VAR 0 5
63188: ARRAY
63189: PUSH
63190: LD_INT 2
63192: ARRAY
63193: EQUAL
63194: IFFALSE 63226
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63196: LD_ADDR_EXP 86
63200: PUSH
63201: LD_EXP 86
63205: PPUSH
63206: LD_VAR 0 5
63210: PPUSH
63211: CALL_OW 3
63215: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63216: CALL 63381 0 0
// exit ;
63220: POP
63221: POP
63222: GO 63376
// end else
63224: GO 63322
// if factory = factoryWaypoints [ i ] [ 2 ] then
63226: LD_VAR 0 1
63230: PUSH
63231: LD_EXP 86
63235: PUSH
63236: LD_VAR 0 5
63240: ARRAY
63241: PUSH
63242: LD_INT 2
63244: ARRAY
63245: EQUAL
63246: IFFALSE 63322
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63248: LD_ADDR_EXP 86
63252: PUSH
63253: LD_EXP 86
63257: PPUSH
63258: LD_VAR 0 5
63262: PPUSH
63263: CALL_OW 3
63267: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63268: LD_ADDR_EXP 86
63272: PUSH
63273: LD_EXP 86
63277: PPUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: CALL_OW 255
63287: PUSH
63288: LD_VAR 0 1
63292: PUSH
63293: LD_VAR 0 2
63297: PUSH
63298: LD_VAR 0 3
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: PPUSH
63309: CALL 42949 0 2
63313: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63314: CALL 63381 0 0
// exit ;
63318: POP
63319: POP
63320: GO 63376
// end ; end ;
63322: GO 63161
63324: POP
63325: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63326: LD_ADDR_EXP 86
63330: PUSH
63331: LD_EXP 86
63335: PPUSH
63336: LD_VAR 0 1
63340: PPUSH
63341: CALL_OW 255
63345: PUSH
63346: LD_VAR 0 1
63350: PUSH
63351: LD_VAR 0 2
63355: PUSH
63356: LD_VAR 0 3
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: PPUSH
63367: CALL 42949 0 2
63371: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63372: CALL 63381 0 0
// end ;
63376: LD_VAR 0 4
63380: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63381: LD_INT 0
63383: PPUSH
63384: PPUSH
63385: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63386: LD_STRING resetFactoryWaypoint();
63388: PPUSH
63389: CALL_OW 559
// if factoryWaypoints then
63393: LD_EXP 86
63397: IFFALSE 63518
// begin list := factoryWaypoints ;
63399: LD_ADDR_VAR 0 3
63403: PUSH
63404: LD_EXP 86
63408: ST_TO_ADDR
// for i := 1 to list do
63409: LD_ADDR_VAR 0 2
63413: PUSH
63414: DOUBLE
63415: LD_INT 1
63417: DEC
63418: ST_TO_ADDR
63419: LD_VAR 0 3
63423: PUSH
63424: FOR_TO
63425: IFFALSE 63516
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63427: LD_STRING setFactoryWaypointXY(
63429: PUSH
63430: LD_VAR 0 3
63434: PUSH
63435: LD_VAR 0 2
63439: ARRAY
63440: PUSH
63441: LD_INT 1
63443: ARRAY
63444: STR
63445: PUSH
63446: LD_STRING ,
63448: STR
63449: PUSH
63450: LD_VAR 0 3
63454: PUSH
63455: LD_VAR 0 2
63459: ARRAY
63460: PUSH
63461: LD_INT 2
63463: ARRAY
63464: STR
63465: PUSH
63466: LD_STRING ,
63468: STR
63469: PUSH
63470: LD_VAR 0 3
63474: PUSH
63475: LD_VAR 0 2
63479: ARRAY
63480: PUSH
63481: LD_INT 3
63483: ARRAY
63484: STR
63485: PUSH
63486: LD_STRING ,
63488: STR
63489: PUSH
63490: LD_VAR 0 3
63494: PUSH
63495: LD_VAR 0 2
63499: ARRAY
63500: PUSH
63501: LD_INT 4
63503: ARRAY
63504: STR
63505: PUSH
63506: LD_STRING )
63508: STR
63509: PPUSH
63510: CALL_OW 559
63514: GO 63424
63516: POP
63517: POP
// end ; end ;
63518: LD_VAR 0 1
63522: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63523: LD_INT 0
63525: PPUSH
// if HexInfo ( x , y ) = warehouse then
63526: LD_VAR 0 2
63530: PPUSH
63531: LD_VAR 0 3
63535: PPUSH
63536: CALL_OW 428
63540: PUSH
63541: LD_VAR 0 1
63545: EQUAL
63546: IFFALSE 63573
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63548: LD_ADDR_EXP 88
63552: PUSH
63553: LD_EXP 88
63557: PPUSH
63558: LD_VAR 0 1
63562: PPUSH
63563: LD_INT 0
63565: PPUSH
63566: CALL_OW 1
63570: ST_TO_ADDR
63571: GO 63624
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63573: LD_ADDR_EXP 88
63577: PUSH
63578: LD_EXP 88
63582: PPUSH
63583: LD_VAR 0 1
63587: PPUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: CALL_OW 255
63597: PUSH
63598: LD_VAR 0 1
63602: PUSH
63603: LD_VAR 0 2
63607: PUSH
63608: LD_VAR 0 3
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: PPUSH
63619: CALL_OW 1
63623: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63624: CALL 63633 0 0
// end ;
63628: LD_VAR 0 4
63632: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63633: LD_INT 0
63635: PPUSH
63636: PPUSH
63637: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63638: LD_STRING resetWarehouseGatheringPoints();
63640: PPUSH
63641: CALL_OW 559
// if warehouseGatheringPoints then
63645: LD_EXP 88
63649: IFFALSE 63775
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63651: LD_ADDR_VAR 0 3
63655: PUSH
63656: LD_EXP 88
63660: PPUSH
63661: CALL 46883 0 1
63665: ST_TO_ADDR
// for i := 1 to list do
63666: LD_ADDR_VAR 0 2
63670: PUSH
63671: DOUBLE
63672: LD_INT 1
63674: DEC
63675: ST_TO_ADDR
63676: LD_VAR 0 3
63680: PUSH
63681: FOR_TO
63682: IFFALSE 63773
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63684: LD_STRING setWarehouseGatheringPointXY(
63686: PUSH
63687: LD_VAR 0 3
63691: PUSH
63692: LD_VAR 0 2
63696: ARRAY
63697: PUSH
63698: LD_INT 1
63700: ARRAY
63701: STR
63702: PUSH
63703: LD_STRING ,
63705: STR
63706: PUSH
63707: LD_VAR 0 3
63711: PUSH
63712: LD_VAR 0 2
63716: ARRAY
63717: PUSH
63718: LD_INT 2
63720: ARRAY
63721: STR
63722: PUSH
63723: LD_STRING ,
63725: STR
63726: PUSH
63727: LD_VAR 0 3
63731: PUSH
63732: LD_VAR 0 2
63736: ARRAY
63737: PUSH
63738: LD_INT 3
63740: ARRAY
63741: STR
63742: PUSH
63743: LD_STRING ,
63745: STR
63746: PUSH
63747: LD_VAR 0 3
63751: PUSH
63752: LD_VAR 0 2
63756: ARRAY
63757: PUSH
63758: LD_INT 4
63760: ARRAY
63761: STR
63762: PUSH
63763: LD_STRING )
63765: STR
63766: PPUSH
63767: CALL_OW 559
63771: GO 63681
63773: POP
63774: POP
// end ; end ;
63775: LD_VAR 0 1
63779: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63780: LD_EXP 88
63784: IFFALSE 64479
63786: GO 63788
63788: DISABLE
63789: LD_INT 0
63791: PPUSH
63792: PPUSH
63793: PPUSH
63794: PPUSH
63795: PPUSH
63796: PPUSH
63797: PPUSH
63798: PPUSH
63799: PPUSH
// begin enable ;
63800: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63801: LD_ADDR_VAR 0 3
63805: PUSH
63806: LD_EXP 88
63810: PPUSH
63811: CALL 46883 0 1
63815: ST_TO_ADDR
// if not list then
63816: LD_VAR 0 3
63820: NOT
63821: IFFALSE 63825
// exit ;
63823: GO 64479
// for i := 1 to list do
63825: LD_ADDR_VAR 0 1
63829: PUSH
63830: DOUBLE
63831: LD_INT 1
63833: DEC
63834: ST_TO_ADDR
63835: LD_VAR 0 3
63839: PUSH
63840: FOR_TO
63841: IFFALSE 64477
// begin depot := list [ i ] [ 2 ] ;
63843: LD_ADDR_VAR 0 8
63847: PUSH
63848: LD_VAR 0 3
63852: PUSH
63853: LD_VAR 0 1
63857: ARRAY
63858: PUSH
63859: LD_INT 2
63861: ARRAY
63862: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63863: LD_ADDR_VAR 0 5
63867: PUSH
63868: LD_VAR 0 3
63872: PUSH
63873: LD_VAR 0 1
63877: ARRAY
63878: PUSH
63879: LD_INT 1
63881: ARRAY
63882: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63883: LD_VAR 0 8
63887: PPUSH
63888: CALL_OW 301
63892: IFTRUE 63911
63894: PUSH
63895: LD_VAR 0 5
63899: PUSH
63900: LD_VAR 0 8
63904: PPUSH
63905: CALL_OW 255
63909: NONEQUAL
63910: OR
63911: IFFALSE 63940
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63913: LD_ADDR_EXP 88
63917: PUSH
63918: LD_EXP 88
63922: PPUSH
63923: LD_VAR 0 8
63927: PPUSH
63928: LD_INT 0
63930: PPUSH
63931: CALL_OW 1
63935: ST_TO_ADDR
// exit ;
63936: POP
63937: POP
63938: GO 64479
// end ; x := list [ i ] [ 3 ] ;
63940: LD_ADDR_VAR 0 6
63944: PUSH
63945: LD_VAR 0 3
63949: PUSH
63950: LD_VAR 0 1
63954: ARRAY
63955: PUSH
63956: LD_INT 3
63958: ARRAY
63959: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63960: LD_ADDR_VAR 0 7
63964: PUSH
63965: LD_VAR 0 3
63969: PUSH
63970: LD_VAR 0 1
63974: ARRAY
63975: PUSH
63976: LD_INT 4
63978: ARRAY
63979: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63980: LD_ADDR_VAR 0 9
63984: PUSH
63985: LD_VAR 0 6
63989: PPUSH
63990: LD_VAR 0 7
63994: PPUSH
63995: LD_INT 16
63997: PPUSH
63998: CALL 45457 0 3
64002: ST_TO_ADDR
// if not cratesNearbyPoint then
64003: LD_VAR 0 9
64007: NOT
64008: IFFALSE 64014
// exit ;
64010: POP
64011: POP
64012: GO 64479
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
64014: LD_ADDR_VAR 0 4
64018: PUSH
64019: LD_INT 22
64021: PUSH
64022: LD_VAR 0 5
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: LD_INT 60
64036: PUSH
64037: EMPTY
64038: LIST
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 91
64046: PUSH
64047: LD_VAR 0 8
64051: PUSH
64052: LD_INT 6
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 25
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 25
64075: PUSH
64076: LD_INT 16
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: PPUSH
64094: CALL_OW 69
64098: PUSH
64099: LD_VAR 0 8
64103: PPUSH
64104: CALL_OW 313
64108: PPUSH
64109: LD_INT 3
64111: PUSH
64112: LD_INT 60
64114: PUSH
64115: EMPTY
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 2
64124: PUSH
64125: LD_INT 25
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 25
64137: PUSH
64138: LD_INT 16
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PPUSH
64154: CALL_OW 72
64158: UNION
64159: ST_TO_ADDR
// if tmp then
64160: LD_VAR 0 4
64164: IFFALSE 64244
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64166: LD_ADDR_VAR 0 4
64170: PUSH
64171: LD_VAR 0 4
64175: PPUSH
64176: LD_INT 3
64178: PPUSH
64179: CALL 43264 0 2
64183: ST_TO_ADDR
// for j in tmp do
64184: LD_ADDR_VAR 0 2
64188: PUSH
64189: LD_VAR 0 4
64193: PUSH
64194: FOR_IN
64195: IFFALSE 64238
// begin if IsInUnit ( j ) then
64197: LD_VAR 0 2
64201: PPUSH
64202: CALL_OW 310
64206: IFFALSE 64217
// ComExit ( j ) ;
64208: LD_VAR 0 2
64212: PPUSH
64213: CALL 43347 0 1
// AddComCollect ( j , x , y ) ;
64217: LD_VAR 0 2
64221: PPUSH
64222: LD_VAR 0 6
64226: PPUSH
64227: LD_VAR 0 7
64231: PPUSH
64232: CALL_OW 177
// end ;
64236: GO 64194
64238: POP
64239: POP
// exit ;
64240: POP
64241: POP
64242: GO 64479
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64244: LD_ADDR_VAR 0 4
64248: PUSH
64249: LD_INT 22
64251: PUSH
64252: LD_VAR 0 5
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 91
64263: PUSH
64264: LD_VAR 0 8
64268: PUSH
64269: LD_INT 8
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: LD_INT 34
64282: PUSH
64283: LD_INT 12
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 34
64292: PUSH
64293: LD_INT 51
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 34
64302: PUSH
64303: LD_INT 32
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 34
64312: PUSH
64313: LD_INT 89
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: LIST
64331: PPUSH
64332: CALL_OW 69
64336: ST_TO_ADDR
// if tmp then
64337: LD_VAR 0 4
64341: IFFALSE 64475
// begin for j in tmp do
64343: LD_ADDR_VAR 0 2
64347: PUSH
64348: LD_VAR 0 4
64352: PUSH
64353: FOR_IN
64354: IFFALSE 64473
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64356: LD_VAR 0 2
64360: PPUSH
64361: CALL_OW 262
64365: PUSH
64366: LD_INT 3
64368: EQUAL
64369: IFTRUE 64386
64371: PUSH
64372: LD_VAR 0 2
64376: PPUSH
64377: CALL_OW 261
64381: PUSH
64382: LD_INT 20
64384: GREATER
64385: OR
64386: IFFALSE 64400
64388: PUSH
64389: LD_VAR 0 2
64393: PPUSH
64394: CALL_OW 314
64398: NOT
64399: AND
64400: IFFALSE 64430
64402: PUSH
64403: LD_VAR 0 2
64407: PPUSH
64408: CALL_OW 263
64412: PUSH
64413: LD_INT 1
64415: NONEQUAL
64416: IFTRUE 64429
64418: PUSH
64419: LD_VAR 0 2
64423: PPUSH
64424: CALL_OW 311
64428: OR
64429: AND
64430: IFFALSE 64471
// begin ComCollect ( j , x , y ) ;
64432: LD_VAR 0 2
64436: PPUSH
64437: LD_VAR 0 6
64441: PPUSH
64442: LD_VAR 0 7
64446: PPUSH
64447: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64451: LD_VAR 0 2
64455: PPUSH
64456: LD_VAR 0 8
64460: PPUSH
64461: CALL_OW 172
// exit ;
64465: POP
64466: POP
64467: POP
64468: POP
64469: GO 64479
// end ;
64471: GO 64353
64473: POP
64474: POP
// end ; end ;
64475: GO 63840
64477: POP
64478: POP
// end ; end_of_file
64479: PPOPN 9
64481: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64482: LD_VAR 0 1
64486: PUSH
64487: LD_INT 200
64489: DOUBLE
64490: GREATEREQUAL
64491: IFFALSE 64499
64493: LD_INT 299
64495: DOUBLE
64496: LESSEQUAL
64497: IFTRUE 64501
64499: GO 64533
64501: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64502: LD_VAR 0 1
64506: PPUSH
64507: LD_VAR 0 2
64511: PPUSH
64512: LD_VAR 0 3
64516: PPUSH
64517: LD_VAR 0 4
64521: PPUSH
64522: LD_VAR 0 5
64526: PPUSH
64527: CALL 65395 0 5
64531: GO 64610
64533: LD_INT 300
64535: DOUBLE
64536: GREATEREQUAL
64537: IFFALSE 64545
64539: LD_INT 399
64541: DOUBLE
64542: LESSEQUAL
64543: IFTRUE 64547
64545: GO 64609
64547: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64548: LD_VAR 0 1
64552: PPUSH
64553: LD_VAR 0 2
64557: PPUSH
64558: LD_VAR 0 3
64562: PPUSH
64563: LD_VAR 0 4
64567: PPUSH
64568: LD_VAR 0 5
64572: PPUSH
64573: LD_VAR 0 6
64577: PPUSH
64578: LD_VAR 0 7
64582: PPUSH
64583: LD_VAR 0 8
64587: PPUSH
64588: LD_VAR 0 9
64592: PPUSH
64593: LD_VAR 0 10
64597: PPUSH
64598: LD_VAR 0 11
64602: PPUSH
64603: CALL 61035 0 11
64607: GO 64610
64609: POP
// end ;
64610: PPOPN 11
64612: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64613: LD_VAR 0 1
64617: PPUSH
64618: LD_VAR 0 2
64622: PPUSH
64623: LD_VAR 0 3
64627: PPUSH
64628: LD_VAR 0 4
64632: PPUSH
64633: LD_VAR 0 5
64637: PPUSH
64638: CALL 64695 0 5
// end ; end_of_file
64642: PPOPN 5
64644: END
// export function SOS_UnitDestroyed ( un ) ; begin
64645: LD_INT 0
64647: PPUSH
// ComRadiation ( un ) ;
64648: LD_VAR 0 1
64652: PPUSH
64653: CALL 65815 0 1
// end ;
64657: LD_VAR 0 2
64661: RET
// export function SOS_UnitKamikazed ( un ) ; begin
64662: LD_INT 0
64664: PPUSH
// ComRadiation ( un ) ;
64665: LD_VAR 0 1
64669: PPUSH
64670: CALL 65815 0 1
// end ;
64674: LD_VAR 0 2
64678: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64679: LD_INT 0
64681: PPUSH
// end ;
64682: LD_VAR 0 4
64686: RET
// export function SOS_Command ( cmd ) ; begin
64687: LD_INT 0
64689: PPUSH
// end ;
64690: LD_VAR 0 2
64694: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
64695: LD_INT 0
64697: PPUSH
// end ;
64698: LD_VAR 0 6
64702: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
64703: LD_INT 0
64705: PPUSH
64706: PPUSH
64707: PPUSH
64708: PPUSH
64709: PPUSH
// if not vehicle or not factory then
64710: LD_VAR 0 1
64714: NOT
64715: IFTRUE 64724
64717: PUSH
64718: LD_VAR 0 2
64722: NOT
64723: OR
64724: IFFALSE 64728
// exit ;
64726: GO 65390
// weapon := GetWeapon ( vehicle ) ;
64728: LD_ADDR_VAR 0 7
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: CALL_OW 264
64742: ST_TO_ADDR
// if weapon = ar_miner then
64743: LD_VAR 0 7
64747: PUSH
64748: LD_INT 81
64750: EQUAL
64751: IFFALSE 64808
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
64753: LD_ADDR_EXP 97
64757: PUSH
64758: LD_EXP 97
64762: PPUSH
64763: LD_EXP 97
64767: PUSH
64768: LD_INT 1
64770: PLUS
64771: PPUSH
64772: LD_VAR 0 1
64776: PPUSH
64777: CALL_OW 1
64781: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64782: LD_ADDR_EXP 98
64786: PUSH
64787: LD_EXP 98
64791: PPUSH
64792: LD_EXP 98
64796: PUSH
64797: LD_INT 1
64799: PLUS
64800: PPUSH
64801: EMPTY
64802: PPUSH
64803: CALL_OW 1
64807: ST_TO_ADDR
// end ; if not factoryWaypoints then
64808: LD_EXP 86
64812: NOT
64813: IFFALSE 64817
// exit ;
64815: GO 65390
// for i := 1 to Count ( factoryWaypoints ) do
64817: LD_ADDR_VAR 0 4
64821: PUSH
64822: DOUBLE
64823: LD_INT 1
64825: DEC
64826: ST_TO_ADDR
64827: LD_EXP 86
64831: PPUSH
64832: CALL 6973 0 1
64836: PUSH
64837: FOR_TO
64838: IFFALSE 65388
// if factoryWaypoints [ i ] [ 2 ] = factory then
64840: LD_EXP 86
64844: PUSH
64845: LD_VAR 0 4
64849: ARRAY
64850: PUSH
64851: LD_INT 2
64853: ARRAY
64854: PUSH
64855: LD_VAR 0 2
64859: EQUAL
64860: IFFALSE 65386
// begin if GetControl ( vehicle ) = control_manual then
64862: LD_VAR 0 1
64866: PPUSH
64867: CALL_OW 263
64871: PUSH
64872: LD_INT 1
64874: EQUAL
64875: IFFALSE 65239
// begin driver := IsDrivenBy ( vehicle ) ;
64877: LD_ADDR_VAR 0 5
64881: PUSH
64882: LD_VAR 0 1
64886: PPUSH
64887: CALL_OW 311
64891: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
64892: LD_VAR 0 5
64896: PUSH
64897: LD_EXP 87
64901: IN
64902: IFTRUE 64916
64904: PUSH
64905: LD_VAR 0 1
64909: PUSH
64910: LD_EXP 87
64914: IN
64915: OR
64916: IFFALSE 64922
// exit ;
64918: POP
64919: POP
64920: GO 65390
// if not HasTask ( driver ) then
64922: LD_VAR 0 5
64926: PPUSH
64927: CALL_OW 314
64931: NOT
64932: IFFALSE 65237
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
64934: LD_ADDR_EXP 87
64938: PUSH
64939: LD_EXP 87
64943: PPUSH
64944: LD_VAR 0 5
64948: PPUSH
64949: CALL 42949 0 2
64953: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
64954: LD_ADDR_EXP 87
64958: PUSH
64959: LD_EXP 87
64963: PPUSH
64964: LD_VAR 0 1
64968: PPUSH
64969: CALL 42949 0 2
64973: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64974: LD_ADDR_VAR 0 6
64978: PUSH
64979: LD_EXP 86
64983: PUSH
64984: LD_VAR 0 4
64988: ARRAY
64989: PUSH
64990: LD_INT 3
64992: ARRAY
64993: PPUSH
64994: LD_EXP 86
64998: PUSH
64999: LD_VAR 0 4
65003: ARRAY
65004: PUSH
65005: LD_INT 4
65007: ARRAY
65008: PPUSH
65009: CALL_OW 428
65013: ST_TO_ADDR
// if hex then
65014: LD_VAR 0 6
65018: IFFALSE 65036
// ComMoveUnit ( driver , hex ) else
65020: LD_VAR 0 5
65024: PPUSH
65025: LD_VAR 0 6
65029: PPUSH
65030: CALL_OW 112
65034: GO 65120
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
65036: LD_VAR 0 1
65040: PPUSH
65041: LD_EXP 86
65045: PUSH
65046: LD_VAR 0 4
65050: ARRAY
65051: PUSH
65052: LD_INT 3
65054: ARRAY
65055: PPUSH
65056: LD_EXP 86
65060: PUSH
65061: LD_VAR 0 4
65065: ARRAY
65066: PUSH
65067: LD_INT 4
65069: ARRAY
65070: PPUSH
65071: CALL_OW 297
65075: PUSH
65076: LD_INT 0
65078: GREATER
65079: IFFALSE 65120
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65081: LD_VAR 0 5
65085: PPUSH
65086: LD_EXP 86
65090: PUSH
65091: LD_VAR 0 4
65095: ARRAY
65096: PUSH
65097: LD_INT 3
65099: ARRAY
65100: PPUSH
65101: LD_EXP 86
65105: PUSH
65106: LD_VAR 0 4
65110: ARRAY
65111: PUSH
65112: LD_INT 4
65114: ARRAY
65115: PPUSH
65116: CALL_OW 111
// AddComExitVehicle ( driver ) ;
65120: LD_VAR 0 5
65124: PPUSH
65125: CALL_OW 181
// if Multiplayer then
65129: LD_OWVAR 4
65133: IFFALSE 65182
// begin repeat wait ( 10 ) ;
65135: LD_INT 10
65137: PPUSH
65138: CALL_OW 67
// until not IsInUnit ( driver ) ;
65142: LD_VAR 0 5
65146: PPUSH
65147: CALL_OW 310
65151: NOT
65152: IFFALSE 65135
// if not HasTask ( driver ) then
65154: LD_VAR 0 5
65158: PPUSH
65159: CALL_OW 314
65163: NOT
65164: IFFALSE 65180
// ComEnterUnit ( driver , factory ) ;
65166: LD_VAR 0 5
65170: PPUSH
65171: LD_VAR 0 2
65175: PPUSH
65176: CALL_OW 120
// end else
65180: GO 65196
// AddComEnterUnit ( driver , factory ) ;
65182: LD_VAR 0 5
65186: PPUSH
65187: LD_VAR 0 2
65191: PPUSH
65192: CALL_OW 180
// wait ( 0 0$1 ) ;
65196: LD_INT 35
65198: PPUSH
65199: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
65203: LD_ADDR_EXP 87
65207: PUSH
65208: LD_EXP 87
65212: PUSH
65213: LD_VAR 0 5
65217: DIFF
65218: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
65219: LD_ADDR_EXP 87
65223: PUSH
65224: LD_EXP 87
65228: PUSH
65229: LD_VAR 0 1
65233: DIFF
65234: ST_TO_ADDR
// break ;
65235: GO 65388
// end ; end else
65237: GO 65386
// if GetControl ( vehicle ) = control_remote then
65239: LD_VAR 0 1
65243: PPUSH
65244: CALL_OW 263
65248: PUSH
65249: LD_INT 2
65251: EQUAL
65252: IFFALSE 65338
// begin wait ( 0 0$2 ) ;
65254: LD_INT 70
65256: PPUSH
65257: CALL_OW 67
// repeat wait ( 10 ) ;
65261: LD_INT 10
65263: PPUSH
65264: CALL_OW 67
// Connect ( vehicle ) ;
65268: LD_VAR 0 1
65272: PPUSH
65273: CALL 13251 0 1
// until IsControledBy ( vehicle ) ;
65277: LD_VAR 0 1
65281: PPUSH
65282: CALL_OW 312
65286: IFFALSE 65261
// wait ( 10 ) ;
65288: LD_INT 10
65290: PPUSH
65291: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65295: LD_VAR 0 1
65299: PPUSH
65300: LD_EXP 86
65304: PUSH
65305: LD_VAR 0 4
65309: ARRAY
65310: PUSH
65311: LD_INT 3
65313: ARRAY
65314: PPUSH
65315: LD_EXP 86
65319: PUSH
65320: LD_VAR 0 4
65324: ARRAY
65325: PUSH
65326: LD_INT 4
65328: ARRAY
65329: PPUSH
65330: CALL_OW 111
// break ;
65334: GO 65388
// end else
65336: GO 65386
// begin wait ( 0 0$3 ) ;
65338: LD_INT 105
65340: PPUSH
65341: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65345: LD_VAR 0 1
65349: PPUSH
65350: LD_EXP 86
65354: PUSH
65355: LD_VAR 0 4
65359: ARRAY
65360: PUSH
65361: LD_INT 3
65363: ARRAY
65364: PPUSH
65365: LD_EXP 86
65369: PUSH
65370: LD_VAR 0 4
65374: ARRAY
65375: PUSH
65376: LD_INT 4
65378: ARRAY
65379: PPUSH
65380: CALL_OW 111
// break ;
65384: GO 65388
// end ; end ;
65386: GO 64837
65388: POP
65389: POP
// end ;
65390: LD_VAR 0 3
65394: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65395: LD_INT 0
65397: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65398: LD_VAR 0 1
65402: PUSH
65403: LD_INT 250
65405: EQUAL
65406: IFFALSE 65423
65408: PUSH
65409: LD_VAR 0 2
65413: PPUSH
65414: CALL_OW 264
65418: PUSH
65419: LD_INT 81
65421: EQUAL
65422: AND
65423: IFFALSE 65444
// MinerPlaceMine ( unit , x , y ) ;
65425: LD_VAR 0 2
65429: PPUSH
65430: LD_VAR 0 4
65434: PPUSH
65435: LD_VAR 0 5
65439: PPUSH
65440: CALL 68790 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65444: LD_VAR 0 1
65448: PUSH
65449: LD_INT 251
65451: EQUAL
65452: IFFALSE 65469
65454: PUSH
65455: LD_VAR 0 2
65459: PPUSH
65460: CALL_OW 264
65464: PUSH
65465: LD_INT 81
65467: EQUAL
65468: AND
65469: IFFALSE 65490
// MinerDetonateMine ( unit , x , y ) ;
65471: LD_VAR 0 2
65475: PPUSH
65476: LD_VAR 0 4
65480: PPUSH
65481: LD_VAR 0 5
65485: PPUSH
65486: CALL 69197 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65490: LD_VAR 0 1
65494: PUSH
65495: LD_INT 252
65497: EQUAL
65498: IFFALSE 65515
65500: PUSH
65501: LD_VAR 0 2
65505: PPUSH
65506: CALL_OW 264
65510: PUSH
65511: LD_INT 81
65513: EQUAL
65514: AND
65515: IFFALSE 65536
// MinerCreateMinefield ( unit , x , y ) ;
65517: LD_VAR 0 2
65521: PPUSH
65522: LD_VAR 0 4
65526: PPUSH
65527: LD_VAR 0 5
65531: PPUSH
65532: CALL 69429 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65536: LD_VAR 0 1
65540: PUSH
65541: LD_INT 253
65543: EQUAL
65544: IFFALSE 65561
65546: PUSH
65547: LD_VAR 0 2
65551: PPUSH
65552: CALL_OW 257
65556: PUSH
65557: LD_INT 5
65559: EQUAL
65560: AND
65561: IFFALSE 65582
// ComBinocular ( unit , x , y ) ;
65563: LD_VAR 0 2
65567: PPUSH
65568: LD_VAR 0 4
65572: PPUSH
65573: LD_VAR 0 5
65577: PPUSH
65578: CALL 69804 0 3
// if selectedUnit then
65582: LD_VAR 0 3
65586: IFFALSE 65646
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65588: LD_VAR 0 1
65592: PUSH
65593: LD_INT 254
65595: EQUAL
65596: IFFALSE 65613
65598: PUSH
65599: LD_VAR 0 2
65603: PPUSH
65604: CALL_OW 264
65608: PUSH
65609: LD_INT 99
65611: EQUAL
65612: AND
65613: IFFALSE 65630
65615: PUSH
65616: LD_VAR 0 3
65620: PPUSH
65621: CALL_OW 263
65625: PUSH
65626: LD_INT 3
65628: EQUAL
65629: AND
65630: IFFALSE 65646
// HackDestroyVehicle ( unit , selectedUnit ) ;
65632: LD_VAR 0 2
65636: PPUSH
65637: LD_VAR 0 3
65641: PPUSH
65642: CALL 67980 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65646: LD_VAR 0 1
65650: PUSH
65651: LD_INT 255
65653: EQUAL
65654: IFFALSE 65678
65656: PUSH
65657: LD_VAR 0 2
65661: PPUSH
65662: CALL_OW 264
65666: PUSH
65667: LD_INT 14
65669: PUSH
65670: LD_INT 53
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: IN
65677: AND
65678: IFFALSE 65696
65680: PUSH
65681: LD_VAR 0 4
65685: PPUSH
65686: LD_VAR 0 5
65690: PPUSH
65691: CALL_OW 488
65695: AND
65696: IFFALSE 65720
// CutTreeXYR ( unit , x , y , 12 ) ;
65698: LD_VAR 0 2
65702: PPUSH
65703: LD_VAR 0 4
65707: PPUSH
65708: LD_VAR 0 5
65712: PPUSH
65713: LD_INT 12
65715: PPUSH
65716: CALL 65911 0 4
// if cmd = 256 then
65720: LD_VAR 0 1
65724: PUSH
65725: LD_INT 256
65727: EQUAL
65728: IFFALSE 65749
// SetFactoryWaypoint ( unit , x , y ) ;
65730: LD_VAR 0 2
65734: PPUSH
65735: LD_VAR 0 4
65739: PPUSH
65740: LD_VAR 0 5
65744: PPUSH
65745: CALL 63027 0 3
// if cmd = 257 then
65749: LD_VAR 0 1
65753: PUSH
65754: LD_INT 257
65756: EQUAL
65757: IFFALSE 65778
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65759: LD_VAR 0 2
65763: PPUSH
65764: LD_VAR 0 4
65768: PPUSH
65769: LD_VAR 0 5
65773: PPUSH
65774: CALL 63523 0 3
// if cmd = 258 then
65778: LD_VAR 0 1
65782: PUSH
65783: LD_INT 258
65785: EQUAL
65786: IFFALSE 65810
// BurnTreeXYR ( unit , x , y , 8 ) ;
65788: LD_VAR 0 2
65792: PPUSH
65793: LD_VAR 0 4
65797: PPUSH
65798: LD_VAR 0 5
65802: PPUSH
65803: LD_INT 8
65805: PPUSH
65806: CALL 66333 0 4
// end ;
65810: LD_VAR 0 6
65814: RET
// export function ComRadiation ( un ) ; var eff ; begin
65815: LD_INT 0
65817: PPUSH
65818: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 264
65828: PUSH
65829: LD_INT 91
65831: NONEQUAL
65832: IFFALSE 65836
// exit ;
65834: GO 65906
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65836: LD_INT 68
65838: PPUSH
65839: LD_VAR 0 1
65843: PPUSH
65844: CALL_OW 255
65848: PPUSH
65849: CALL_OW 321
65853: PUSH
65854: LD_INT 2
65856: EQUAL
65857: IFFALSE 65869
// eff := 50 else
65859: LD_ADDR_VAR 0 3
65863: PUSH
65864: LD_INT 50
65866: ST_TO_ADDR
65867: GO 65877
// eff := 25 ;
65869: LD_ADDR_VAR 0 3
65873: PUSH
65874: LD_INT 25
65876: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65877: LD_VAR 0 1
65881: PPUSH
65882: CALL_OW 250
65886: PPUSH
65887: LD_VAR 0 1
65891: PPUSH
65892: CALL_OW 251
65896: PPUSH
65897: LD_VAR 0 3
65901: PPUSH
65902: CALL_OW 495
// end ;
65906: LD_VAR 0 2
65910: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65911: LD_INT 0
65913: PPUSH
65914: PPUSH
65915: PPUSH
65916: PPUSH
65917: PPUSH
65918: PPUSH
65919: PPUSH
65920: PPUSH
65921: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
65922: LD_VAR 0 1
65926: PPUSH
65927: CALL_OW 302
65931: NOT
65932: IFTRUE 65951
65934: PUSH
65935: LD_VAR 0 2
65939: PPUSH
65940: LD_VAR 0 3
65944: PPUSH
65945: CALL_OW 488
65949: NOT
65950: OR
65951: IFTRUE 65960
65953: PUSH
65954: LD_VAR 0 4
65958: NOT
65959: OR
65960: IFFALSE 65964
// exit ;
65962: GO 66328
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
65964: LD_VAR 0 1
65968: PPUSH
65969: CALL_OW 437
65973: PPUSH
65974: CALL 6973 0 1
65978: PUSH
65979: LD_INT 10
65981: GREATER
65982: IFFALSE 65986
// exit ;
65984: GO 66328
// list := [ ] ;
65986: LD_ADDR_VAR 0 13
65990: PUSH
65991: EMPTY
65992: ST_TO_ADDR
// if x - r < 0 then
65993: LD_VAR 0 2
65997: PUSH
65998: LD_VAR 0 4
66002: MINUS
66003: PUSH
66004: LD_INT 0
66006: LESS
66007: IFFALSE 66019
// min_x := 0 else
66009: LD_ADDR_VAR 0 7
66013: PUSH
66014: LD_INT 0
66016: ST_TO_ADDR
66017: GO 66035
// min_x := x - r ;
66019: LD_ADDR_VAR 0 7
66023: PUSH
66024: LD_VAR 0 2
66028: PUSH
66029: LD_VAR 0 4
66033: MINUS
66034: ST_TO_ADDR
// if y - r < 0 then
66035: LD_VAR 0 3
66039: PUSH
66040: LD_VAR 0 4
66044: MINUS
66045: PUSH
66046: LD_INT 0
66048: LESS
66049: IFFALSE 66061
// min_y := 0 else
66051: LD_ADDR_VAR 0 8
66055: PUSH
66056: LD_INT 0
66058: ST_TO_ADDR
66059: GO 66077
// min_y := y - r ;
66061: LD_ADDR_VAR 0 8
66065: PUSH
66066: LD_VAR 0 3
66070: PUSH
66071: LD_VAR 0 4
66075: MINUS
66076: ST_TO_ADDR
// max_x := x + r ;
66077: LD_ADDR_VAR 0 9
66081: PUSH
66082: LD_VAR 0 2
66086: PUSH
66087: LD_VAR 0 4
66091: PLUS
66092: ST_TO_ADDR
// max_y := y + r ;
66093: LD_ADDR_VAR 0 10
66097: PUSH
66098: LD_VAR 0 3
66102: PUSH
66103: LD_VAR 0 4
66107: PLUS
66108: ST_TO_ADDR
// for _x = min_x to max_x do
66109: LD_ADDR_VAR 0 11
66113: PUSH
66114: DOUBLE
66115: LD_VAR 0 7
66119: DEC
66120: ST_TO_ADDR
66121: LD_VAR 0 9
66125: PUSH
66126: FOR_TO
66127: IFFALSE 66246
// for _y = min_y to max_y do
66129: LD_ADDR_VAR 0 12
66133: PUSH
66134: DOUBLE
66135: LD_VAR 0 8
66139: DEC
66140: ST_TO_ADDR
66141: LD_VAR 0 10
66145: PUSH
66146: FOR_TO
66147: IFFALSE 66242
// begin if not ValidHex ( _x , _y ) then
66149: LD_VAR 0 11
66153: PPUSH
66154: LD_VAR 0 12
66158: PPUSH
66159: CALL_OW 488
66163: NOT
66164: IFFALSE 66168
// continue ;
66166: GO 66146
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66168: LD_VAR 0 11
66172: PPUSH
66173: LD_VAR 0 12
66177: PPUSH
66178: CALL_OW 351
66182: IFFALSE 66200
66184: PUSH
66185: LD_VAR 0 11
66189: PPUSH
66190: LD_VAR 0 12
66194: PPUSH
66195: CALL_OW 554
66199: AND
66200: IFFALSE 66240
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66202: LD_ADDR_VAR 0 13
66206: PUSH
66207: LD_VAR 0 13
66211: PPUSH
66212: LD_VAR 0 13
66216: PUSH
66217: LD_INT 1
66219: PLUS
66220: PPUSH
66221: LD_VAR 0 11
66225: PUSH
66226: LD_VAR 0 12
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PPUSH
66235: CALL_OW 2
66239: ST_TO_ADDR
// end ;
66240: GO 66146
66242: POP
66243: POP
66244: GO 66126
66246: POP
66247: POP
// if not list then
66248: LD_VAR 0 13
66252: NOT
66253: IFFALSE 66257
// exit ;
66255: GO 66328
// for i in list do
66257: LD_ADDR_VAR 0 6
66261: PUSH
66262: LD_VAR 0 13
66266: PUSH
66267: FOR_IN
66268: IFFALSE 66326
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66270: LD_VAR 0 1
66274: PPUSH
66275: LD_STRING M
66277: PUSH
66278: LD_VAR 0 6
66282: PUSH
66283: LD_INT 1
66285: ARRAY
66286: PUSH
66287: LD_VAR 0 6
66291: PUSH
66292: LD_INT 2
66294: ARRAY
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: PUSH
66317: EMPTY
66318: LIST
66319: PPUSH
66320: CALL_OW 447
66324: GO 66267
66326: POP
66327: POP
// end ;
66328: LD_VAR 0 5
66332: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
66333: LD_INT 0
66335: PPUSH
66336: PPUSH
66337: PPUSH
66338: PPUSH
66339: PPUSH
66340: PPUSH
66341: PPUSH
66342: PPUSH
66343: PPUSH
66344: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
66345: LD_VAR 0 1
66349: PPUSH
66350: CALL_OW 302
66354: NOT
66355: IFTRUE 66374
66357: PUSH
66358: LD_VAR 0 2
66362: PPUSH
66363: LD_VAR 0 3
66367: PPUSH
66368: CALL_OW 488
66372: NOT
66373: OR
66374: IFTRUE 66383
66376: PUSH
66377: LD_VAR 0 4
66381: NOT
66382: OR
66383: IFFALSE 66387
// exit ;
66385: GO 66926
// if Count ( GetTaskList ( flame ) ) > 10 then
66387: LD_VAR 0 1
66391: PPUSH
66392: CALL_OW 437
66396: PPUSH
66397: CALL 6973 0 1
66401: PUSH
66402: LD_INT 10
66404: GREATER
66405: IFFALSE 66409
// exit ;
66407: GO 66926
// list := [ ] ;
66409: LD_ADDR_VAR 0 13
66413: PUSH
66414: EMPTY
66415: ST_TO_ADDR
// if x - r < 0 then
66416: LD_VAR 0 2
66420: PUSH
66421: LD_VAR 0 4
66425: MINUS
66426: PUSH
66427: LD_INT 0
66429: LESS
66430: IFFALSE 66442
// min_x := 0 else
66432: LD_ADDR_VAR 0 7
66436: PUSH
66437: LD_INT 0
66439: ST_TO_ADDR
66440: GO 66458
// min_x := x - r ;
66442: LD_ADDR_VAR 0 7
66446: PUSH
66447: LD_VAR 0 2
66451: PUSH
66452: LD_VAR 0 4
66456: MINUS
66457: ST_TO_ADDR
// if y - r < 0 then
66458: LD_VAR 0 3
66462: PUSH
66463: LD_VAR 0 4
66467: MINUS
66468: PUSH
66469: LD_INT 0
66471: LESS
66472: IFFALSE 66484
// min_y := 0 else
66474: LD_ADDR_VAR 0 8
66478: PUSH
66479: LD_INT 0
66481: ST_TO_ADDR
66482: GO 66500
// min_y := y - r ;
66484: LD_ADDR_VAR 0 8
66488: PUSH
66489: LD_VAR 0 3
66493: PUSH
66494: LD_VAR 0 4
66498: MINUS
66499: ST_TO_ADDR
// max_x := x + r ;
66500: LD_ADDR_VAR 0 9
66504: PUSH
66505: LD_VAR 0 2
66509: PUSH
66510: LD_VAR 0 4
66514: PLUS
66515: ST_TO_ADDR
// max_y := y + r ;
66516: LD_ADDR_VAR 0 10
66520: PUSH
66521: LD_VAR 0 3
66525: PUSH
66526: LD_VAR 0 4
66530: PLUS
66531: ST_TO_ADDR
// for _x = min_x to max_x do
66532: LD_ADDR_VAR 0 11
66536: PUSH
66537: DOUBLE
66538: LD_VAR 0 7
66542: DEC
66543: ST_TO_ADDR
66544: LD_VAR 0 9
66548: PUSH
66549: FOR_TO
66550: IFFALSE 66669
// for _y = min_y to max_y do
66552: LD_ADDR_VAR 0 12
66556: PUSH
66557: DOUBLE
66558: LD_VAR 0 8
66562: DEC
66563: ST_TO_ADDR
66564: LD_VAR 0 10
66568: PUSH
66569: FOR_TO
66570: IFFALSE 66665
// begin if not ValidHex ( _x , _y ) then
66572: LD_VAR 0 11
66576: PPUSH
66577: LD_VAR 0 12
66581: PPUSH
66582: CALL_OW 488
66586: NOT
66587: IFFALSE 66591
// continue ;
66589: GO 66569
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66591: LD_VAR 0 11
66595: PPUSH
66596: LD_VAR 0 12
66600: PPUSH
66601: CALL_OW 351
66605: IFFALSE 66623
66607: PUSH
66608: LD_VAR 0 11
66612: PPUSH
66613: LD_VAR 0 12
66617: PPUSH
66618: CALL_OW 554
66622: AND
66623: IFFALSE 66663
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66625: LD_ADDR_VAR 0 13
66629: PUSH
66630: LD_VAR 0 13
66634: PPUSH
66635: LD_VAR 0 13
66639: PUSH
66640: LD_INT 1
66642: PLUS
66643: PPUSH
66644: LD_VAR 0 11
66648: PUSH
66649: LD_VAR 0 12
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PPUSH
66658: CALL_OW 2
66662: ST_TO_ADDR
// end ;
66663: GO 66569
66665: POP
66666: POP
66667: GO 66549
66669: POP
66670: POP
// if not list then
66671: LD_VAR 0 13
66675: NOT
66676: IFFALSE 66680
// exit ;
66678: GO 66926
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
66680: LD_ADDR_VAR 0 13
66684: PUSH
66685: LD_VAR 0 1
66689: PPUSH
66690: LD_VAR 0 13
66694: PPUSH
66695: LD_INT 1
66697: PPUSH
66698: LD_INT 1
66700: PPUSH
66701: CALL 10379 0 4
66705: ST_TO_ADDR
// ComStop ( flame ) ;
66706: LD_VAR 0 1
66710: PPUSH
66711: CALL_OW 141
// for i in list do
66715: LD_ADDR_VAR 0 6
66719: PUSH
66720: LD_VAR 0 13
66724: PUSH
66725: FOR_IN
66726: IFFALSE 66757
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
66728: LD_VAR 0 1
66732: PPUSH
66733: LD_VAR 0 6
66737: PUSH
66738: LD_INT 1
66740: ARRAY
66741: PPUSH
66742: LD_VAR 0 6
66746: PUSH
66747: LD_INT 2
66749: ARRAY
66750: PPUSH
66751: CALL_OW 176
66755: GO 66725
66757: POP
66758: POP
// repeat wait ( 0 0$1 ) ;
66759: LD_INT 35
66761: PPUSH
66762: CALL_OW 67
// task := GetTaskList ( flame ) ;
66766: LD_ADDR_VAR 0 14
66770: PUSH
66771: LD_VAR 0 1
66775: PPUSH
66776: CALL_OW 437
66780: ST_TO_ADDR
// if not task then
66781: LD_VAR 0 14
66785: NOT
66786: IFFALSE 66790
// exit ;
66788: GO 66926
// if task [ 1 ] [ 1 ] <> | then
66790: LD_VAR 0 14
66794: PUSH
66795: LD_INT 1
66797: ARRAY
66798: PUSH
66799: LD_INT 1
66801: ARRAY
66802: PUSH
66803: LD_STRING |
66805: NONEQUAL
66806: IFFALSE 66810
// exit ;
66808: GO 66926
// _x := task [ 1 ] [ 2 ] ;
66810: LD_ADDR_VAR 0 11
66814: PUSH
66815: LD_VAR 0 14
66819: PUSH
66820: LD_INT 1
66822: ARRAY
66823: PUSH
66824: LD_INT 2
66826: ARRAY
66827: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
66828: LD_ADDR_VAR 0 12
66832: PUSH
66833: LD_VAR 0 14
66837: PUSH
66838: LD_INT 1
66840: ARRAY
66841: PUSH
66842: LD_INT 3
66844: ARRAY
66845: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
66846: LD_VAR 0 11
66850: PPUSH
66851: LD_VAR 0 12
66855: PPUSH
66856: CALL_OW 351
66860: NOT
66861: IFTRUE 66880
66863: PUSH
66864: LD_VAR 0 11
66868: PPUSH
66869: LD_VAR 0 12
66873: PPUSH
66874: CALL_OW 554
66878: NOT
66879: OR
66880: IFFALSE 66914
// begin task := Delete ( task , 1 ) ;
66882: LD_ADDR_VAR 0 14
66886: PUSH
66887: LD_VAR 0 14
66891: PPUSH
66892: LD_INT 1
66894: PPUSH
66895: CALL_OW 3
66899: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
66900: LD_VAR 0 1
66904: PPUSH
66905: LD_VAR 0 14
66909: PPUSH
66910: CALL_OW 446
// end ; until not HasTask ( flame ) ;
66914: LD_VAR 0 1
66918: PPUSH
66919: CALL_OW 314
66923: NOT
66924: IFFALSE 66759
// end ;
66926: LD_VAR 0 5
66930: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66931: LD_EXP 90
66935: NOT
66936: IFFALSE 66986
66938: GO 66940
66940: DISABLE
// begin initHack := true ;
66941: LD_ADDR_EXP 90
66945: PUSH
66946: LD_INT 1
66948: ST_TO_ADDR
// hackTanks := [ ] ;
66949: LD_ADDR_EXP 91
66953: PUSH
66954: EMPTY
66955: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66956: LD_ADDR_EXP 92
66960: PUSH
66961: EMPTY
66962: ST_TO_ADDR
// hackLimit := 3 ;
66963: LD_ADDR_EXP 93
66967: PUSH
66968: LD_INT 3
66970: ST_TO_ADDR
// hackDist := 12 ;
66971: LD_ADDR_EXP 94
66975: PUSH
66976: LD_INT 12
66978: ST_TO_ADDR
// hackCounter := [ ] ;
66979: LD_ADDR_EXP 95
66983: PUSH
66984: EMPTY
66985: ST_TO_ADDR
// end ;
66986: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66987: LD_EXP 90
66991: IFFALSE 67009
66993: PUSH
66994: LD_INT 34
66996: PUSH
66997: LD_INT 99
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PPUSH
67004: CALL_OW 69
67008: AND
67009: IFFALSE 67262
67011: GO 67013
67013: DISABLE
67014: LD_INT 0
67016: PPUSH
67017: PPUSH
// begin enable ;
67018: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67019: LD_ADDR_VAR 0 1
67023: PUSH
67024: LD_INT 34
67026: PUSH
67027: LD_INT 99
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PPUSH
67034: CALL_OW 69
67038: PUSH
67039: FOR_IN
67040: IFFALSE 67260
// begin if not i in hackTanks then
67042: LD_VAR 0 1
67046: PUSH
67047: LD_EXP 91
67051: IN
67052: NOT
67053: IFFALSE 67136
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67055: LD_ADDR_EXP 91
67059: PUSH
67060: LD_EXP 91
67064: PPUSH
67065: LD_EXP 91
67069: PUSH
67070: LD_INT 1
67072: PLUS
67073: PPUSH
67074: LD_VAR 0 1
67078: PPUSH
67079: CALL_OW 1
67083: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67084: LD_ADDR_EXP 92
67088: PUSH
67089: LD_EXP 92
67093: PPUSH
67094: LD_EXP 92
67098: PUSH
67099: LD_INT 1
67101: PLUS
67102: PPUSH
67103: EMPTY
67104: PPUSH
67105: CALL_OW 1
67109: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67110: LD_ADDR_EXP 95
67114: PUSH
67115: LD_EXP 95
67119: PPUSH
67120: LD_EXP 95
67124: PUSH
67125: LD_INT 1
67127: PLUS
67128: PPUSH
67129: EMPTY
67130: PPUSH
67131: CALL_OW 1
67135: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67136: LD_VAR 0 1
67140: PPUSH
67141: CALL_OW 302
67145: NOT
67146: IFFALSE 67159
// begin HackUnlinkAll ( i ) ;
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL 67265 0 1
// continue ;
67157: GO 67039
// end ; HackCheckCapturedStatus ( i ) ;
67159: LD_VAR 0 1
67163: PPUSH
67164: CALL 67710 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67168: LD_ADDR_VAR 0 2
67172: PUSH
67173: LD_INT 81
67175: PUSH
67176: LD_VAR 0 1
67180: PPUSH
67181: CALL_OW 255
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 33
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 91
67202: PUSH
67203: LD_VAR 0 1
67207: PUSH
67208: LD_EXP 94
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 50
67220: PUSH
67221: EMPTY
67222: LIST
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: PPUSH
67230: CALL_OW 69
67234: ST_TO_ADDR
// if not tmp then
67235: LD_VAR 0 2
67239: NOT
67240: IFFALSE 67244
// continue ;
67242: GO 67039
// HackLink ( i , tmp ) ;
67244: LD_VAR 0 1
67248: PPUSH
67249: LD_VAR 0 2
67253: PPUSH
67254: CALL 67401 0 2
// end ;
67258: GO 67039
67260: POP
67261: POP
// end ;
67262: PPOPN 2
67264: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67265: LD_INT 0
67267: PPUSH
67268: PPUSH
67269: PPUSH
// if not hack in hackTanks then
67270: LD_VAR 0 1
67274: PUSH
67275: LD_EXP 91
67279: IN
67280: NOT
67281: IFFALSE 67285
// exit ;
67283: GO 67396
// index := GetElementIndex ( hackTanks , hack ) ;
67285: LD_ADDR_VAR 0 4
67289: PUSH
67290: LD_EXP 91
67294: PPUSH
67295: LD_VAR 0 1
67299: PPUSH
67300: CALL 9674 0 2
67304: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67305: LD_EXP 92
67309: PUSH
67310: LD_VAR 0 4
67314: ARRAY
67315: IFFALSE 67396
// begin for i in hackTanksCaptured [ index ] do
67317: LD_ADDR_VAR 0 3
67321: PUSH
67322: LD_EXP 92
67326: PUSH
67327: LD_VAR 0 4
67331: ARRAY
67332: PUSH
67333: FOR_IN
67334: IFFALSE 67360
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67336: LD_VAR 0 3
67340: PUSH
67341: LD_INT 1
67343: ARRAY
67344: PPUSH
67345: LD_VAR 0 3
67349: PUSH
67350: LD_INT 2
67352: ARRAY
67353: PPUSH
67354: CALL_OW 235
67358: GO 67333
67360: POP
67361: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67362: LD_ADDR_EXP 92
67366: PUSH
67367: LD_EXP 92
67371: PPUSH
67372: LD_VAR 0 4
67376: PPUSH
67377: EMPTY
67378: PPUSH
67379: CALL_OW 1
67383: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67384: LD_VAR 0 1
67388: PPUSH
67389: LD_INT 0
67391: PPUSH
67392: CALL_OW 505
// end ; end ;
67396: LD_VAR 0 2
67400: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67401: LD_INT 0
67403: PPUSH
67404: PPUSH
67405: PPUSH
// if not hack in hackTanks or not vehicles then
67406: LD_VAR 0 1
67410: PUSH
67411: LD_EXP 91
67415: IN
67416: NOT
67417: IFTRUE 67426
67419: PUSH
67420: LD_VAR 0 2
67424: NOT
67425: OR
67426: IFFALSE 67430
// exit ;
67428: GO 67705
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67430: LD_ADDR_VAR 0 2
67434: PUSH
67435: LD_VAR 0 1
67439: PPUSH
67440: LD_VAR 0 2
67444: PPUSH
67445: LD_INT 1
67447: PPUSH
67448: LD_INT 1
67450: PPUSH
67451: CALL 10326 0 4
67455: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67456: LD_ADDR_VAR 0 5
67460: PUSH
67461: LD_EXP 91
67465: PPUSH
67466: LD_VAR 0 1
67470: PPUSH
67471: CALL 9674 0 2
67475: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67476: LD_EXP 92
67480: PUSH
67481: LD_VAR 0 5
67485: ARRAY
67486: PUSH
67487: LD_EXP 93
67491: LESS
67492: IFFALSE 67681
// begin for i := 1 to vehicles do
67494: LD_ADDR_VAR 0 4
67498: PUSH
67499: DOUBLE
67500: LD_INT 1
67502: DEC
67503: ST_TO_ADDR
67504: LD_VAR 0 2
67508: PUSH
67509: FOR_TO
67510: IFFALSE 67679
// begin if hackTanksCaptured [ index ] = hackLimit then
67512: LD_EXP 92
67516: PUSH
67517: LD_VAR 0 5
67521: ARRAY
67522: PUSH
67523: LD_EXP 93
67527: EQUAL
67528: IFFALSE 67532
// break ;
67530: GO 67679
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67532: LD_ADDR_EXP 95
67536: PUSH
67537: LD_EXP 95
67541: PPUSH
67542: LD_VAR 0 5
67546: PPUSH
67547: LD_EXP 95
67551: PUSH
67552: LD_VAR 0 5
67556: ARRAY
67557: PUSH
67558: LD_INT 1
67560: PLUS
67561: PPUSH
67562: CALL_OW 1
67566: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67567: LD_ADDR_EXP 92
67571: PUSH
67572: LD_EXP 92
67576: PPUSH
67577: LD_VAR 0 5
67581: PUSH
67582: LD_EXP 92
67586: PUSH
67587: LD_VAR 0 5
67591: ARRAY
67592: PUSH
67593: LD_INT 1
67595: PLUS
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PPUSH
67601: LD_VAR 0 2
67605: PUSH
67606: LD_VAR 0 4
67610: ARRAY
67611: PUSH
67612: LD_VAR 0 2
67616: PUSH
67617: LD_VAR 0 4
67621: ARRAY
67622: PPUSH
67623: CALL_OW 255
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PPUSH
67632: CALL 9891 0 3
67636: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67637: LD_VAR 0 2
67641: PUSH
67642: LD_VAR 0 4
67646: ARRAY
67647: PPUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: CALL_OW 255
67657: PPUSH
67658: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67662: LD_VAR 0 2
67666: PUSH
67667: LD_VAR 0 4
67671: ARRAY
67672: PPUSH
67673: CALL_OW 141
// end ;
67677: GO 67509
67679: POP
67680: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67681: LD_VAR 0 1
67685: PPUSH
67686: LD_EXP 92
67690: PUSH
67691: LD_VAR 0 5
67695: ARRAY
67696: PUSH
67697: LD_INT 0
67699: PLUS
67700: PPUSH
67701: CALL_OW 505
// end ;
67705: LD_VAR 0 3
67709: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67710: LD_INT 0
67712: PPUSH
67713: PPUSH
67714: PPUSH
67715: PPUSH
// if not hack in hackTanks then
67716: LD_VAR 0 1
67720: PUSH
67721: LD_EXP 91
67725: IN
67726: NOT
67727: IFFALSE 67731
// exit ;
67729: GO 67975
// index := GetElementIndex ( hackTanks , hack ) ;
67731: LD_ADDR_VAR 0 4
67735: PUSH
67736: LD_EXP 91
67740: PPUSH
67741: LD_VAR 0 1
67745: PPUSH
67746: CALL 9674 0 2
67750: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67751: LD_ADDR_VAR 0 3
67755: PUSH
67756: DOUBLE
67757: LD_EXP 92
67761: PUSH
67762: LD_VAR 0 4
67766: ARRAY
67767: INC
67768: ST_TO_ADDR
67769: LD_INT 1
67771: PUSH
67772: FOR_DOWNTO
67773: IFFALSE 67949
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67775: LD_ADDR_VAR 0 5
67779: PUSH
67780: LD_EXP 92
67784: PUSH
67785: LD_VAR 0 4
67789: ARRAY
67790: PUSH
67791: LD_VAR 0 3
67795: ARRAY
67796: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67797: LD_VAR 0 5
67801: PUSH
67802: LD_INT 1
67804: ARRAY
67805: PPUSH
67806: CALL_OW 302
67810: NOT
67811: IFTRUE 67839
67813: PUSH
67814: LD_VAR 0 5
67818: PUSH
67819: LD_INT 1
67821: ARRAY
67822: PPUSH
67823: CALL_OW 255
67827: PUSH
67828: LD_VAR 0 1
67832: PPUSH
67833: CALL_OW 255
67837: NONEQUAL
67838: OR
67839: IFFALSE 67947
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67841: LD_VAR 0 5
67845: PUSH
67846: LD_INT 1
67848: ARRAY
67849: PPUSH
67850: CALL_OW 305
67854: IFFALSE 67882
67856: PUSH
67857: LD_VAR 0 5
67861: PUSH
67862: LD_INT 1
67864: ARRAY
67865: PPUSH
67866: CALL_OW 255
67870: PUSH
67871: LD_VAR 0 1
67875: PPUSH
67876: CALL_OW 255
67880: EQUAL
67881: AND
67882: IFFALSE 67906
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67884: LD_VAR 0 5
67888: PUSH
67889: LD_INT 1
67891: ARRAY
67892: PPUSH
67893: LD_VAR 0 5
67897: PUSH
67898: LD_INT 2
67900: ARRAY
67901: PPUSH
67902: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67906: LD_ADDR_EXP 92
67910: PUSH
67911: LD_EXP 92
67915: PPUSH
67916: LD_VAR 0 4
67920: PPUSH
67921: LD_EXP 92
67925: PUSH
67926: LD_VAR 0 4
67930: ARRAY
67931: PPUSH
67932: LD_VAR 0 3
67936: PPUSH
67937: CALL_OW 3
67941: PPUSH
67942: CALL_OW 1
67946: ST_TO_ADDR
// end ; end ;
67947: GO 67772
67949: POP
67950: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67951: LD_VAR 0 1
67955: PPUSH
67956: LD_EXP 92
67960: PUSH
67961: LD_VAR 0 4
67965: ARRAY
67966: PUSH
67967: LD_INT 0
67969: PLUS
67970: PPUSH
67971: CALL_OW 505
// end ;
67975: LD_VAR 0 2
67979: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67980: LD_INT 0
67982: PPUSH
67983: PPUSH
67984: PPUSH
67985: PPUSH
// if not hack in hackTanks then
67986: LD_VAR 0 1
67990: PUSH
67991: LD_EXP 91
67995: IN
67996: NOT
67997: IFFALSE 68001
// exit ;
67999: GO 68086
// index := GetElementIndex ( hackTanks , hack ) ;
68001: LD_ADDR_VAR 0 5
68005: PUSH
68006: LD_EXP 91
68010: PPUSH
68011: LD_VAR 0 1
68015: PPUSH
68016: CALL 9674 0 2
68020: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68021: LD_ADDR_VAR 0 4
68025: PUSH
68026: DOUBLE
68027: LD_INT 1
68029: DEC
68030: ST_TO_ADDR
68031: LD_EXP 92
68035: PUSH
68036: LD_VAR 0 5
68040: ARRAY
68041: PUSH
68042: FOR_TO
68043: IFFALSE 68084
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68045: LD_EXP 92
68049: PUSH
68050: LD_VAR 0 5
68054: ARRAY
68055: PUSH
68056: LD_VAR 0 4
68060: ARRAY
68061: PUSH
68062: LD_INT 1
68064: ARRAY
68065: PUSH
68066: LD_VAR 0 2
68070: EQUAL
68071: IFFALSE 68082
// KillUnit ( vehicle ) ;
68073: LD_VAR 0 2
68077: PPUSH
68078: CALL_OW 66
68082: GO 68042
68084: POP
68085: POP
// end ;
68086: LD_VAR 0 3
68090: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
68091: LD_EXP 96
68095: NOT
68096: IFFALSE 68229
68098: GO 68100
68100: DISABLE
68101: LD_INT 0
68103: PPUSH
// begin initMiner := true ;
68104: LD_ADDR_EXP 96
68108: PUSH
68109: LD_INT 1
68111: ST_TO_ADDR
// minersList := [ ] ;
68112: LD_ADDR_EXP 97
68116: PUSH
68117: EMPTY
68118: ST_TO_ADDR
// minerMinesList := [ ] ;
68119: LD_ADDR_EXP 98
68123: PUSH
68124: EMPTY
68125: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
68126: LD_ADDR_EXP 99
68130: PUSH
68131: LD_INT 10
68133: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68134: LD_ADDR_VAR 0 1
68138: PUSH
68139: LD_INT 34
68141: PUSH
68142: LD_INT 81
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PPUSH
68149: CALL_OW 69
68153: PUSH
68154: FOR_IN
68155: IFFALSE 68227
// begin if not i in minersList then
68157: LD_VAR 0 1
68161: PUSH
68162: LD_EXP 97
68166: IN
68167: NOT
68168: IFFALSE 68225
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68170: LD_ADDR_EXP 97
68174: PUSH
68175: LD_EXP 97
68179: PPUSH
68180: LD_EXP 97
68184: PUSH
68185: LD_INT 1
68187: PLUS
68188: PPUSH
68189: LD_VAR 0 1
68193: PPUSH
68194: CALL_OW 1
68198: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68199: LD_ADDR_EXP 98
68203: PUSH
68204: LD_EXP 98
68208: PPUSH
68209: LD_EXP 98
68213: PUSH
68214: LD_INT 1
68216: PLUS
68217: PPUSH
68218: EMPTY
68219: PPUSH
68220: CALL_OW 1
68224: ST_TO_ADDR
// end end ;
68225: GO 68154
68227: POP
68228: POP
// end ;
68229: PPOPN 1
68231: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
68232: LD_EXP 96
68236: IFFALSE 68267
68238: PUSH
68239: LD_EXP 98
68243: PPUSH
68244: CALL 6973 0 1
68248: IFTRUE 68266
68250: PUSH
68251: LD_INT 34
68253: PUSH
68254: LD_INT 81
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PPUSH
68261: CALL_OW 69
68265: OR
68266: AND
68267: IFFALSE 68787
68269: GO 68271
68271: DISABLE
68272: LD_INT 0
68274: PPUSH
68275: PPUSH
68276: PPUSH
68277: PPUSH
// begin enable ;
68278: ENABLE
// for i := minerMinesList downto 1 do
68279: LD_ADDR_VAR 0 1
68283: PUSH
68284: DOUBLE
68285: LD_EXP 98
68289: INC
68290: ST_TO_ADDR
68291: LD_INT 1
68293: PUSH
68294: FOR_DOWNTO
68295: IFFALSE 68785
// begin side := GetSide ( minersList [ i ] ) ;
68297: LD_ADDR_VAR 0 3
68301: PUSH
68302: LD_EXP 97
68306: PUSH
68307: LD_VAR 0 1
68311: ARRAY
68312: PPUSH
68313: CALL_OW 255
68317: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
68318: LD_EXP 97
68322: PUSH
68323: LD_VAR 0 1
68327: ARRAY
68328: PPUSH
68329: CALL_OW 300
68333: IFFALSE 68354
68335: PUSH
68336: LD_VAR 0 3
68340: PUSH
68341: LD_OWVAR 2
68345: PUSH
68346: LD_INT 9
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: IN
68353: AND
68354: IFFALSE 68387
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
68356: LD_EXP 97
68360: PUSH
68361: LD_VAR 0 1
68365: ARRAY
68366: PPUSH
68367: LD_EXP 98
68371: PUSH
68372: LD_VAR 0 1
68376: ARRAY
68377: PPUSH
68378: CALL 6973 0 1
68382: PPUSH
68383: CALL_OW 505
// if not minerMinesList [ i ] then
68387: LD_EXP 98
68391: PUSH
68392: LD_VAR 0 1
68396: ARRAY
68397: NOT
68398: IFFALSE 68402
// continue ;
68400: GO 68294
// for j := minerMinesList [ i ] downto 1 do
68402: LD_ADDR_VAR 0 2
68406: PUSH
68407: DOUBLE
68408: LD_EXP 98
68412: PUSH
68413: LD_VAR 0 1
68417: ARRAY
68418: INC
68419: ST_TO_ADDR
68420: LD_INT 1
68422: PUSH
68423: FOR_DOWNTO
68424: IFFALSE 68781
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
68426: LD_EXP 97
68430: PUSH
68431: LD_VAR 0 1
68435: ARRAY
68436: PPUSH
68437: CALL_OW 301
68441: IFTRUE 68461
68443: PUSH
68444: LD_EXP 97
68448: PUSH
68449: LD_VAR 0 1
68453: ARRAY
68454: PPUSH
68455: CALL_OW 305
68459: NOT
68460: OR
68461: IFFALSE 68552
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68463: LD_EXP 98
68467: PUSH
68468: LD_VAR 0 1
68472: ARRAY
68473: PUSH
68474: LD_VAR 0 2
68478: ARRAY
68479: PUSH
68480: LD_INT 1
68482: ARRAY
68483: PPUSH
68484: LD_EXP 98
68488: PUSH
68489: LD_VAR 0 1
68493: ARRAY
68494: PUSH
68495: LD_VAR 0 2
68499: ARRAY
68500: PUSH
68501: LD_INT 2
68503: ARRAY
68504: PPUSH
68505: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68509: LD_ADDR_EXP 98
68513: PUSH
68514: LD_EXP 98
68518: PPUSH
68519: LD_VAR 0 1
68523: PPUSH
68524: LD_EXP 98
68528: PUSH
68529: LD_VAR 0 1
68533: ARRAY
68534: PPUSH
68535: LD_VAR 0 2
68539: PPUSH
68540: CALL_OW 3
68544: PPUSH
68545: CALL_OW 1
68549: ST_TO_ADDR
// continue ;
68550: GO 68423
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68552: LD_ADDR_VAR 0 4
68556: PUSH
68557: LD_EXP 98
68561: PUSH
68562: LD_VAR 0 1
68566: ARRAY
68567: PUSH
68568: LD_VAR 0 2
68572: ARRAY
68573: PUSH
68574: LD_INT 1
68576: ARRAY
68577: PPUSH
68578: LD_EXP 98
68582: PUSH
68583: LD_VAR 0 1
68587: ARRAY
68588: PUSH
68589: LD_VAR 0 2
68593: ARRAY
68594: PUSH
68595: LD_INT 2
68597: ARRAY
68598: PPUSH
68599: CALL_OW 428
68603: ST_TO_ADDR
// if not tmp then
68604: LD_VAR 0 4
68608: NOT
68609: IFFALSE 68613
// continue ;
68611: GO 68423
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68613: LD_VAR 0 4
68617: PUSH
68618: LD_INT 81
68620: PUSH
68621: LD_VAR 0 3
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PPUSH
68630: CALL_OW 69
68634: IN
68635: IFFALSE 68685
68637: PUSH
68638: LD_EXP 98
68642: PUSH
68643: LD_VAR 0 1
68647: ARRAY
68648: PUSH
68649: LD_VAR 0 2
68653: ARRAY
68654: PUSH
68655: LD_INT 1
68657: ARRAY
68658: PPUSH
68659: LD_EXP 98
68663: PUSH
68664: LD_VAR 0 1
68668: ARRAY
68669: PUSH
68670: LD_VAR 0 2
68674: ARRAY
68675: PUSH
68676: LD_INT 2
68678: ARRAY
68679: PPUSH
68680: CALL_OW 458
68684: AND
68685: IFFALSE 68779
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68687: LD_EXP 98
68691: PUSH
68692: LD_VAR 0 1
68696: ARRAY
68697: PUSH
68698: LD_VAR 0 2
68702: ARRAY
68703: PUSH
68704: LD_INT 1
68706: ARRAY
68707: PPUSH
68708: LD_EXP 98
68712: PUSH
68713: LD_VAR 0 1
68717: ARRAY
68718: PUSH
68719: LD_VAR 0 2
68723: ARRAY
68724: PUSH
68725: LD_INT 2
68727: ARRAY
68728: PPUSH
68729: LD_VAR 0 3
68733: PPUSH
68734: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68738: LD_ADDR_EXP 98
68742: PUSH
68743: LD_EXP 98
68747: PPUSH
68748: LD_VAR 0 1
68752: PPUSH
68753: LD_EXP 98
68757: PUSH
68758: LD_VAR 0 1
68762: ARRAY
68763: PPUSH
68764: LD_VAR 0 2
68768: PPUSH
68769: CALL_OW 3
68773: PPUSH
68774: CALL_OW 1
68778: ST_TO_ADDR
// end ; end ;
68779: GO 68423
68781: POP
68782: POP
// end ;
68783: GO 68294
68785: POP
68786: POP
// end ;
68787: PPOPN 4
68789: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
68790: LD_INT 0
68792: PPUSH
68793: PPUSH
68794: PPUSH
68795: PPUSH
// result := false ;
68796: LD_ADDR_VAR 0 4
68800: PUSH
68801: LD_INT 0
68803: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68804: LD_VAR 0 1
68808: PPUSH
68809: CALL_OW 264
68813: PUSH
68814: LD_INT 81
68816: EQUAL
68817: NOT
68818: IFFALSE 68822
// exit ;
68820: GO 69192
// side := GetSide ( unit ) ;
68822: LD_ADDR_VAR 0 6
68826: PUSH
68827: LD_VAR 0 1
68831: PPUSH
68832: CALL_OW 255
68836: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
68837: LD_ADDR_VAR 0 5
68841: PUSH
68842: LD_EXP 97
68846: PPUSH
68847: LD_VAR 0 1
68851: PPUSH
68852: CALL 9674 0 2
68856: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68857: LD_EXP 98
68861: PUSH
68862: LD_VAR 0 5
68866: ARRAY
68867: PUSH
68868: LD_EXP 99
68872: GREATEREQUAL
68873: IFFALSE 68877
// exit ;
68875: GO 69192
// ComMoveXY ( unit , x , y ) ;
68877: LD_VAR 0 1
68881: PPUSH
68882: LD_VAR 0 2
68886: PPUSH
68887: LD_VAR 0 3
68891: PPUSH
68892: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68896: LD_INT 35
68898: PPUSH
68899: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68903: LD_VAR 0 1
68907: PPUSH
68908: LD_VAR 0 2
68912: PPUSH
68913: LD_VAR 0 3
68917: PPUSH
68918: CALL 41730 0 3
68922: NOT
68923: IFFALSE 68936
68925: PUSH
68926: LD_VAR 0 1
68930: PPUSH
68931: CALL_OW 314
68935: AND
68936: IFFALSE 68940
// exit ;
68938: GO 69192
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68940: LD_VAR 0 2
68944: PPUSH
68945: LD_VAR 0 3
68949: PPUSH
68950: CALL_OW 428
68954: PUSH
68955: LD_VAR 0 1
68959: EQUAL
68960: IFFALSE 68974
68962: PUSH
68963: LD_VAR 0 1
68967: PPUSH
68968: CALL_OW 314
68972: NOT
68973: AND
68974: IFFALSE 68896
// if MineAtPos ( x , y ) then
68976: LD_VAR 0 2
68980: PPUSH
68981: LD_VAR 0 3
68985: PPUSH
68986: CALL_OW 458
68990: IFFALSE 68994
// exit ;
68992: GO 69192
// if your_side = side then
68994: LD_OWVAR 2
68998: PUSH
68999: LD_VAR 0 6
69003: EQUAL
69004: IFFALSE 69023
// PlaySoundXY ( x , y , PlantMine ) ;
69006: LD_VAR 0 2
69010: PPUSH
69011: LD_VAR 0 3
69015: PPUSH
69016: LD_STRING PlantMine
69018: PPUSH
69019: CALL_OW 366
// repeat wait ( 1 ) ;
69023: LD_INT 1
69025: PPUSH
69026: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
69030: LD_VAR 0 2
69034: PPUSH
69035: LD_VAR 0 3
69039: PPUSH
69040: LD_VAR 0 6
69044: PPUSH
69045: LD_INT 0
69047: PPUSH
69048: CALL_OW 454
69052: IFFALSE 69023
// if MineAtPos ( x , y ) then
69054: LD_VAR 0 2
69058: PPUSH
69059: LD_VAR 0 3
69063: PPUSH
69064: CALL_OW 458
69068: IFFALSE 69184
// begin for i in minerMinesList [ index ] do
69070: LD_ADDR_VAR 0 7
69074: PUSH
69075: LD_EXP 98
69079: PUSH
69080: LD_VAR 0 5
69084: ARRAY
69085: PUSH
69086: FOR_IN
69087: IFFALSE 69129
// if i [ 1 ] = x and i [ 2 ] = y then
69089: LD_VAR 0 7
69093: PUSH
69094: LD_INT 1
69096: ARRAY
69097: PUSH
69098: LD_VAR 0 2
69102: EQUAL
69103: IFFALSE 69121
69105: PUSH
69106: LD_VAR 0 7
69110: PUSH
69111: LD_INT 2
69113: ARRAY
69114: PUSH
69115: LD_VAR 0 3
69119: EQUAL
69120: AND
69121: IFFALSE 69127
// exit ;
69123: POP
69124: POP
69125: GO 69192
69127: GO 69086
69129: POP
69130: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69131: LD_ADDR_EXP 98
69135: PUSH
69136: LD_EXP 98
69140: PPUSH
69141: LD_VAR 0 5
69145: PUSH
69146: LD_EXP 98
69150: PUSH
69151: LD_VAR 0 5
69155: ARRAY
69156: PUSH
69157: LD_INT 1
69159: PLUS
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PPUSH
69165: LD_VAR 0 2
69169: PUSH
69170: LD_VAR 0 3
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PPUSH
69179: CALL 9891 0 3
69183: ST_TO_ADDR
// end ; result := true ;
69184: LD_ADDR_VAR 0 4
69188: PUSH
69189: LD_INT 1
69191: ST_TO_ADDR
// end ;
69192: LD_VAR 0 4
69196: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69197: LD_INT 0
69199: PPUSH
69200: PPUSH
69201: PPUSH
// if not unit in minersList then
69202: LD_VAR 0 1
69206: PUSH
69207: LD_EXP 97
69211: IN
69212: NOT
69213: IFFALSE 69217
// exit ;
69215: GO 69424
// index := GetElementIndex ( minersList , unit ) ;
69217: LD_ADDR_VAR 0 6
69221: PUSH
69222: LD_EXP 97
69226: PPUSH
69227: LD_VAR 0 1
69231: PPUSH
69232: CALL 9674 0 2
69236: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69237: LD_ADDR_VAR 0 5
69241: PUSH
69242: DOUBLE
69243: LD_EXP 98
69247: PUSH
69248: LD_VAR 0 6
69252: ARRAY
69253: INC
69254: ST_TO_ADDR
69255: LD_INT 1
69257: PUSH
69258: FOR_DOWNTO
69259: IFFALSE 69422
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69261: LD_EXP 98
69265: PUSH
69266: LD_VAR 0 6
69270: ARRAY
69271: PUSH
69272: LD_VAR 0 5
69276: ARRAY
69277: PUSH
69278: LD_INT 1
69280: ARRAY
69281: PPUSH
69282: LD_EXP 98
69286: PUSH
69287: LD_VAR 0 6
69291: ARRAY
69292: PUSH
69293: LD_VAR 0 5
69297: ARRAY
69298: PUSH
69299: LD_INT 2
69301: ARRAY
69302: PPUSH
69303: LD_VAR 0 2
69307: PPUSH
69308: LD_VAR 0 3
69312: PPUSH
69313: CALL_OW 298
69317: PUSH
69318: LD_INT 6
69320: LESS
69321: IFFALSE 69420
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69323: LD_EXP 98
69327: PUSH
69328: LD_VAR 0 6
69332: ARRAY
69333: PUSH
69334: LD_VAR 0 5
69338: ARRAY
69339: PUSH
69340: LD_INT 1
69342: ARRAY
69343: PPUSH
69344: LD_EXP 98
69348: PUSH
69349: LD_VAR 0 6
69353: ARRAY
69354: PUSH
69355: LD_VAR 0 5
69359: ARRAY
69360: PUSH
69361: LD_INT 2
69363: ARRAY
69364: PPUSH
69365: LD_VAR 0 1
69369: PPUSH
69370: CALL_OW 255
69374: PPUSH
69375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69379: LD_ADDR_EXP 98
69383: PUSH
69384: LD_EXP 98
69388: PPUSH
69389: LD_VAR 0 6
69393: PPUSH
69394: LD_EXP 98
69398: PUSH
69399: LD_VAR 0 6
69403: ARRAY
69404: PPUSH
69405: LD_VAR 0 5
69409: PPUSH
69410: CALL_OW 3
69414: PPUSH
69415: CALL_OW 1
69419: ST_TO_ADDR
// end ; end ;
69420: GO 69258
69422: POP
69423: POP
// end ;
69424: LD_VAR 0 4
69428: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69429: LD_INT 0
69431: PPUSH
69432: PPUSH
69433: PPUSH
69434: PPUSH
69435: PPUSH
69436: PPUSH
69437: PPUSH
69438: PPUSH
69439: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69440: LD_VAR 0 1
69444: PPUSH
69445: CALL_OW 264
69449: PUSH
69450: LD_INT 81
69452: EQUAL
69453: NOT
69454: IFTRUE 69469
69456: PUSH
69457: LD_VAR 0 1
69461: PUSH
69462: LD_EXP 97
69466: IN
69467: NOT
69468: OR
69469: IFFALSE 69473
// exit ;
69471: GO 69799
// index := GetElementIndex ( minersList , unit ) ;
69473: LD_ADDR_VAR 0 6
69477: PUSH
69478: LD_EXP 97
69482: PPUSH
69483: LD_VAR 0 1
69487: PPUSH
69488: CALL 9674 0 2
69492: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69493: LD_ADDR_VAR 0 8
69497: PUSH
69498: LD_EXP 99
69502: PUSH
69503: LD_EXP 98
69507: PUSH
69508: LD_VAR 0 6
69512: ARRAY
69513: MINUS
69514: ST_TO_ADDR
// if not minesFreeAmount then
69515: LD_VAR 0 8
69519: NOT
69520: IFFALSE 69524
// exit ;
69522: GO 69799
// tmp := [ ] ;
69524: LD_ADDR_VAR 0 7
69528: PUSH
69529: EMPTY
69530: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69531: LD_ADDR_VAR 0 5
69535: PUSH
69536: DOUBLE
69537: LD_INT 1
69539: DEC
69540: ST_TO_ADDR
69541: LD_VAR 0 8
69545: PUSH
69546: FOR_TO
69547: IFFALSE 69746
// begin _d := rand ( 0 , 5 ) ;
69549: LD_ADDR_VAR 0 11
69553: PUSH
69554: LD_INT 0
69556: PPUSH
69557: LD_INT 5
69559: PPUSH
69560: CALL_OW 12
69564: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69565: LD_ADDR_VAR 0 12
69569: PUSH
69570: LD_INT 2
69572: PPUSH
69573: LD_INT 6
69575: PPUSH
69576: CALL_OW 12
69580: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69581: LD_ADDR_VAR 0 9
69585: PUSH
69586: LD_VAR 0 2
69590: PPUSH
69591: LD_VAR 0 11
69595: PPUSH
69596: LD_VAR 0 12
69600: PPUSH
69601: CALL_OW 272
69605: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69606: LD_ADDR_VAR 0 10
69610: PUSH
69611: LD_VAR 0 3
69615: PPUSH
69616: LD_VAR 0 11
69620: PPUSH
69621: LD_VAR 0 12
69625: PPUSH
69626: CALL_OW 273
69630: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69631: LD_VAR 0 9
69635: PPUSH
69636: LD_VAR 0 10
69640: PPUSH
69641: CALL_OW 488
69645: IFFALSE 69669
69647: PUSH
69648: LD_VAR 0 9
69652: PUSH
69653: LD_VAR 0 10
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_VAR 0 7
69666: IN
69667: NOT
69668: AND
69669: IFFALSE 69688
69671: PUSH
69672: LD_VAR 0 9
69676: PPUSH
69677: LD_VAR 0 10
69681: PPUSH
69682: CALL_OW 458
69686: NOT
69687: AND
69688: IFFALSE 69730
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69690: LD_ADDR_VAR 0 7
69694: PUSH
69695: LD_VAR 0 7
69699: PPUSH
69700: LD_VAR 0 7
69704: PUSH
69705: LD_INT 1
69707: PLUS
69708: PPUSH
69709: LD_VAR 0 9
69713: PUSH
69714: LD_VAR 0 10
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PPUSH
69723: CALL_OW 1
69727: ST_TO_ADDR
69728: GO 69744
// i := i - 1 ;
69730: LD_ADDR_VAR 0 5
69734: PUSH
69735: LD_VAR 0 5
69739: PUSH
69740: LD_INT 1
69742: MINUS
69743: ST_TO_ADDR
// end ;
69744: GO 69546
69746: POP
69747: POP
// for i in tmp do
69748: LD_ADDR_VAR 0 5
69752: PUSH
69753: LD_VAR 0 7
69757: PUSH
69758: FOR_IN
69759: IFFALSE 69797
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69761: LD_VAR 0 1
69765: PPUSH
69766: LD_VAR 0 5
69770: PUSH
69771: LD_INT 1
69773: ARRAY
69774: PPUSH
69775: LD_VAR 0 5
69779: PUSH
69780: LD_INT 2
69782: ARRAY
69783: PPUSH
69784: CALL 68790 0 3
69788: NOT
69789: IFFALSE 69795
// exit ;
69791: POP
69792: POP
69793: GO 69799
69795: GO 69758
69797: POP
69798: POP
// end ;
69799: LD_VAR 0 4
69803: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
69804: LD_INT 0
69806: PPUSH
69807: PPUSH
69808: PPUSH
69809: PPUSH
69810: PPUSH
69811: PPUSH
69812: PPUSH
69813: PPUSH
69814: PPUSH
// if GetClass ( unit ) <> class_sniper then
69815: LD_VAR 0 1
69819: PPUSH
69820: CALL_OW 257
69824: PUSH
69825: LD_INT 5
69827: NONEQUAL
69828: IFFALSE 69832
// exit ;
69830: GO 70302
// dist := 8 ;
69832: LD_ADDR_VAR 0 5
69836: PUSH
69837: LD_INT 8
69839: ST_TO_ADDR
// viewRange := 12 ;
69840: LD_ADDR_VAR 0 8
69844: PUSH
69845: LD_INT 12
69847: ST_TO_ADDR
// side := GetSide ( unit ) ;
69848: LD_ADDR_VAR 0 6
69852: PUSH
69853: LD_VAR 0 1
69857: PPUSH
69858: CALL_OW 255
69862: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69863: LD_INT 61
69865: PPUSH
69866: LD_VAR 0 6
69870: PPUSH
69871: CALL_OW 321
69875: PUSH
69876: LD_INT 2
69878: EQUAL
69879: IFFALSE 69889
// viewRange := 16 ;
69881: LD_ADDR_VAR 0 8
69885: PUSH
69886: LD_INT 16
69888: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69889: LD_VAR 0 1
69893: PPUSH
69894: LD_VAR 0 2
69898: PPUSH
69899: LD_VAR 0 3
69903: PPUSH
69904: CALL_OW 297
69908: PUSH
69909: LD_VAR 0 5
69913: GREATER
69914: IFFALSE 69993
// begin ComMoveXY ( unit , x , y ) ;
69916: LD_VAR 0 1
69920: PPUSH
69921: LD_VAR 0 2
69925: PPUSH
69926: LD_VAR 0 3
69930: PPUSH
69931: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69935: LD_INT 35
69937: PPUSH
69938: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69942: LD_VAR 0 1
69946: PPUSH
69947: LD_VAR 0 2
69951: PPUSH
69952: LD_VAR 0 3
69956: PPUSH
69957: CALL 41730 0 3
69961: NOT
69962: IFFALSE 69966
// exit ;
69964: GO 70302
// until GetDistUnitXY ( unit , x , y ) < dist ;
69966: LD_VAR 0 1
69970: PPUSH
69971: LD_VAR 0 2
69975: PPUSH
69976: LD_VAR 0 3
69980: PPUSH
69981: CALL_OW 297
69985: PUSH
69986: LD_VAR 0 5
69990: LESS
69991: IFFALSE 69935
// end ; ComTurnXY ( unit , x , y ) ;
69993: LD_VAR 0 1
69997: PPUSH
69998: LD_VAR 0 2
70002: PPUSH
70003: LD_VAR 0 3
70007: PPUSH
70008: CALL_OW 118
// repeat if Multiplayer then
70012: LD_OWVAR 4
70016: IFFALSE 70027
// wait ( 35 ) else
70018: LD_INT 35
70020: PPUSH
70021: CALL_OW 67
70025: GO 70034
// wait ( 5 ) ;
70027: LD_INT 5
70029: PPUSH
70030: CALL_OW 67
// _d := GetDir ( unit ) ;
70034: LD_ADDR_VAR 0 11
70038: PUSH
70039: LD_VAR 0 1
70043: PPUSH
70044: CALL_OW 254
70048: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
70049: LD_ADDR_VAR 0 7
70053: PUSH
70054: LD_VAR 0 1
70058: PPUSH
70059: CALL_OW 250
70063: PPUSH
70064: LD_VAR 0 1
70068: PPUSH
70069: CALL_OW 251
70073: PPUSH
70074: LD_VAR 0 2
70078: PPUSH
70079: LD_VAR 0 3
70083: PPUSH
70084: CALL 44366 0 4
70088: ST_TO_ADDR
// until dir = _d ;
70089: LD_VAR 0 7
70093: PUSH
70094: LD_VAR 0 11
70098: EQUAL
70099: IFFALSE 70012
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
70101: LD_ADDR_VAR 0 9
70105: PUSH
70106: LD_VAR 0 1
70110: PPUSH
70111: CALL_OW 250
70115: PPUSH
70116: LD_VAR 0 7
70120: PPUSH
70121: LD_VAR 0 5
70125: PPUSH
70126: CALL_OW 272
70130: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
70131: LD_ADDR_VAR 0 10
70135: PUSH
70136: LD_VAR 0 1
70140: PPUSH
70141: CALL_OW 251
70145: PPUSH
70146: LD_VAR 0 7
70150: PPUSH
70151: LD_VAR 0 5
70155: PPUSH
70156: CALL_OW 273
70160: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70161: LD_VAR 0 9
70165: PPUSH
70166: LD_VAR 0 10
70170: PPUSH
70171: CALL_OW 488
70175: NOT
70176: IFFALSE 70180
// exit ;
70178: GO 70302
// ComAnimCustom ( unit , 1 ) ;
70180: LD_VAR 0 1
70184: PPUSH
70185: LD_INT 1
70187: PPUSH
70188: CALL_OW 592
// p := 0 ;
70192: LD_ADDR_VAR 0 12
70196: PUSH
70197: LD_INT 0
70199: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70200: LD_VAR 0 9
70204: PPUSH
70205: LD_VAR 0 10
70209: PPUSH
70210: LD_VAR 0 6
70214: PPUSH
70215: LD_VAR 0 8
70219: PPUSH
70220: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
70224: LD_INT 35
70226: PPUSH
70227: CALL_OW 67
// p := Inc ( p ) ;
70231: LD_ADDR_VAR 0 12
70235: PUSH
70236: LD_VAR 0 12
70240: PPUSH
70241: CALL 44322 0 1
70245: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
70246: LD_VAR 0 12
70250: PUSH
70251: LD_INT 3
70253: EQUAL
70254: IFTRUE 70268
70256: PUSH
70257: LD_VAR 0 1
70261: PPUSH
70262: CALL_OW 302
70266: NOT
70267: OR
70268: IFTRUE 70281
70270: PUSH
70271: LD_VAR 0 1
70275: PPUSH
70276: CALL_OW 301
70280: OR
70281: IFFALSE 70224
// RemoveSeeing ( _x , _y , side ) ;
70283: LD_VAR 0 9
70287: PPUSH
70288: LD_VAR 0 10
70292: PPUSH
70293: LD_VAR 0 6
70297: PPUSH
70298: CALL_OW 331
// end ;
70302: LD_VAR 0 4
70306: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
70307: LD_INT 0
70309: PPUSH
70310: PPUSH
70311: PPUSH
70312: PPUSH
70313: PPUSH
70314: PPUSH
70315: PPUSH
70316: PPUSH
70317: PPUSH
70318: PPUSH
70319: PPUSH
// if not unit then
70320: LD_VAR 0 1
70324: NOT
70325: IFFALSE 70329
// exit ;
70327: GO 70600
// side := GetSide ( unit ) ;
70329: LD_ADDR_VAR 0 3
70333: PUSH
70334: LD_VAR 0 1
70338: PPUSH
70339: CALL_OW 255
70343: ST_TO_ADDR
// x := GetX ( unit ) ;
70344: LD_ADDR_VAR 0 5
70348: PUSH
70349: LD_VAR 0 1
70353: PPUSH
70354: CALL_OW 250
70358: ST_TO_ADDR
// y := GetY ( unit ) ;
70359: LD_ADDR_VAR 0 6
70363: PUSH
70364: LD_VAR 0 1
70368: PPUSH
70369: CALL_OW 251
70373: ST_TO_ADDR
// r := 8 ;
70374: LD_ADDR_VAR 0 4
70378: PUSH
70379: LD_INT 8
70381: ST_TO_ADDR
// if x - r < 0 then
70382: LD_VAR 0 5
70386: PUSH
70387: LD_VAR 0 4
70391: MINUS
70392: PUSH
70393: LD_INT 0
70395: LESS
70396: IFFALSE 70408
// min_x := 0 else
70398: LD_ADDR_VAR 0 7
70402: PUSH
70403: LD_INT 0
70405: ST_TO_ADDR
70406: GO 70424
// min_x := x - r ;
70408: LD_ADDR_VAR 0 7
70412: PUSH
70413: LD_VAR 0 5
70417: PUSH
70418: LD_VAR 0 4
70422: MINUS
70423: ST_TO_ADDR
// if y - r < 0 then
70424: LD_VAR 0 6
70428: PUSH
70429: LD_VAR 0 4
70433: MINUS
70434: PUSH
70435: LD_INT 0
70437: LESS
70438: IFFALSE 70450
// min_y := 0 else
70440: LD_ADDR_VAR 0 8
70444: PUSH
70445: LD_INT 0
70447: ST_TO_ADDR
70448: GO 70466
// min_y := y - r ;
70450: LD_ADDR_VAR 0 8
70454: PUSH
70455: LD_VAR 0 6
70459: PUSH
70460: LD_VAR 0 4
70464: MINUS
70465: ST_TO_ADDR
// max_x := x + r ;
70466: LD_ADDR_VAR 0 9
70470: PUSH
70471: LD_VAR 0 5
70475: PUSH
70476: LD_VAR 0 4
70480: PLUS
70481: ST_TO_ADDR
// max_y := y + r ;
70482: LD_ADDR_VAR 0 10
70486: PUSH
70487: LD_VAR 0 6
70491: PUSH
70492: LD_VAR 0 4
70496: PLUS
70497: ST_TO_ADDR
// for _x = min_x to max_x do
70498: LD_ADDR_VAR 0 11
70502: PUSH
70503: DOUBLE
70504: LD_VAR 0 7
70508: DEC
70509: ST_TO_ADDR
70510: LD_VAR 0 9
70514: PUSH
70515: FOR_TO
70516: IFFALSE 70598
// for _y = min_y to max_y do
70518: LD_ADDR_VAR 0 12
70522: PUSH
70523: DOUBLE
70524: LD_VAR 0 8
70528: DEC
70529: ST_TO_ADDR
70530: LD_VAR 0 10
70534: PUSH
70535: FOR_TO
70536: IFFALSE 70594
// begin if not ValidHex ( _x , _y ) then
70538: LD_VAR 0 11
70542: PPUSH
70543: LD_VAR 0 12
70547: PPUSH
70548: CALL_OW 488
70552: NOT
70553: IFFALSE 70557
// continue ;
70555: GO 70535
// if MineAtPos ( _x , _y ) then
70557: LD_VAR 0 11
70561: PPUSH
70562: LD_VAR 0 12
70566: PPUSH
70567: CALL_OW 458
70571: IFFALSE 70592
// ViewMineAtPos ( _x , _y , side ) ;
70573: LD_VAR 0 11
70577: PPUSH
70578: LD_VAR 0 12
70582: PPUSH
70583: LD_VAR 0 3
70587: PPUSH
70588: CALL_OW 457
// end ;
70592: GO 70535
70594: POP
70595: POP
70596: GO 70515
70598: POP
70599: POP
// end ;
70600: LD_VAR 0 2
70604: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
70605: LD_INT 0
70607: PPUSH
70608: PPUSH
70609: PPUSH
70610: PPUSH
70611: PPUSH
70612: PPUSH
70613: PPUSH
// if not units then
70614: LD_VAR 0 1
70618: NOT
70619: IFFALSE 70623
// exit ;
70621: GO 71087
// scaners := [ ] ;
70623: LD_ADDR_VAR 0 6
70627: PUSH
70628: EMPTY
70629: ST_TO_ADDR
// for i in units do
70630: LD_ADDR_VAR 0 3
70634: PUSH
70635: LD_VAR 0 1
70639: PUSH
70640: FOR_IN
70641: IFFALSE 70798
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
70643: LD_VAR 0 3
70647: PPUSH
70648: CALL_OW 264
70652: PUSH
70653: LD_INT 11
70655: NONEQUAL
70656: IFTRUE 70670
70658: PUSH
70659: LD_VAR 0 3
70663: PPUSH
70664: CALL_OW 302
70668: NOT
70669: OR
70670: IFTRUE 70687
70672: PUSH
70673: LD_VAR 0 3
70677: PPUSH
70678: CALL_OW 110
70682: PUSH
70683: LD_INT 502
70685: EQUAL
70686: OR
70687: IFFALSE 70691
// continue ;
70689: GO 70640
// ComStop ( i ) ;
70691: LD_VAR 0 3
70695: PPUSH
70696: CALL_OW 141
// x := GetX ( i ) ;
70700: LD_ADDR_VAR 0 4
70704: PUSH
70705: LD_VAR 0 3
70709: PPUSH
70710: CALL_OW 250
70714: ST_TO_ADDR
// y := GetY ( i ) ;
70715: LD_ADDR_VAR 0 5
70719: PUSH
70720: LD_VAR 0 3
70724: PPUSH
70725: CALL_OW 251
70729: ST_TO_ADDR
// if GetSide ( i ) = your_side then
70730: LD_VAR 0 3
70734: PPUSH
70735: CALL_OW 255
70739: PUSH
70740: LD_OWVAR 2
70744: EQUAL
70745: IFFALSE 70764
// PlaySoundXY ( x , y , mineDetector ) ;
70747: LD_VAR 0 4
70751: PPUSH
70752: LD_VAR 0 5
70756: PPUSH
70757: LD_STRING mineDetector
70759: PPUSH
70760: CALL_OW 366
// scaners := Join ( scaners , i ) ;
70764: LD_ADDR_VAR 0 6
70768: PUSH
70769: LD_VAR 0 6
70773: PPUSH
70774: LD_VAR 0 3
70778: PPUSH
70779: CALL 42949 0 2
70783: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
70784: LD_VAR 0 3
70788: PPUSH
70789: LD_INT 502
70791: PPUSH
70792: CALL_OW 109
// end ;
70796: GO 70640
70798: POP
70799: POP
// if not scaners then
70800: LD_VAR 0 6
70804: NOT
70805: IFFALSE 70809
// exit ;
70807: GO 71087
// wait ( 3 ) ;
70809: LD_INT 3
70811: PPUSH
70812: CALL_OW 67
// timer := 6 ;
70816: LD_ADDR_VAR 0 7
70820: PUSH
70821: LD_INT 6
70823: ST_TO_ADDR
// repeat for i in scaners do
70824: LD_ADDR_VAR 0 3
70828: PUSH
70829: LD_VAR 0 6
70833: PUSH
70834: FOR_IN
70835: IFFALSE 70985
// begin side := GetSide ( i ) ;
70837: LD_ADDR_VAR 0 8
70841: PUSH
70842: LD_VAR 0 3
70846: PPUSH
70847: CALL_OW 255
70851: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
70852: LD_VAR 0 3
70856: PPUSH
70857: CALL_OW 302
70861: NOT
70862: IFTRUE 70875
70864: PUSH
70865: LD_VAR 0 3
70869: PPUSH
70870: CALL_OW 314
70874: OR
70875: IFTRUE 70906
70877: PUSH
70878: LD_VAR 0 3
70882: PPUSH
70883: CALL_OW 263
70887: PUSH
70888: LD_INT 1
70890: EQUAL
70891: IFFALSE 70905
70893: PUSH
70894: LD_VAR 0 3
70898: PPUSH
70899: CALL_OW 311
70903: NOT
70904: AND
70905: OR
70906: IFFALSE 70950
// begin SetUnitDisplayNumber ( i , 0 ) ;
70908: LD_VAR 0 3
70912: PPUSH
70913: LD_INT 0
70915: PPUSH
70916: CALL_OW 505
// SetTag ( i , 0 ) ;
70920: LD_VAR 0 3
70924: PPUSH
70925: LD_INT 0
70927: PPUSH
70928: CALL_OW 109
// scaners := scaners diff i ;
70932: LD_ADDR_VAR 0 6
70936: PUSH
70937: LD_VAR 0 6
70941: PUSH
70942: LD_VAR 0 3
70946: DIFF
70947: ST_TO_ADDR
// continue ;
70948: GO 70834
// end ; if side in [ your_side , 9 ] then
70950: LD_VAR 0 8
70954: PUSH
70955: LD_OWVAR 2
70959: PUSH
70960: LD_INT 9
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: IN
70967: IFFALSE 70983
// SetUnitDisplayNumber ( i , timer ) ;
70969: LD_VAR 0 3
70973: PPUSH
70974: LD_VAR 0 7
70978: PPUSH
70979: CALL_OW 505
// end ;
70983: GO 70834
70985: POP
70986: POP
// if not scaners then
70987: LD_VAR 0 6
70991: NOT
70992: IFFALSE 70996
// exit ;
70994: GO 71087
// timer := Dec ( timer ) ;
70996: LD_ADDR_VAR 0 7
71000: PUSH
71001: LD_VAR 0 7
71005: PPUSH
71006: CALL 44344 0 1
71010: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71011: LD_INT 35
71013: PPUSH
71014: CALL_OW 67
// until timer = 0 ;
71018: LD_VAR 0 7
71022: PUSH
71023: LD_INT 0
71025: EQUAL
71026: IFFALSE 70824
// if not scaners then
71028: LD_VAR 0 6
71032: NOT
71033: IFFALSE 71037
// exit ;
71035: GO 71087
// for i in scaners do
71037: LD_ADDR_VAR 0 3
71041: PUSH
71042: LD_VAR 0 6
71046: PUSH
71047: FOR_IN
71048: IFFALSE 71085
// begin SetUnitDisplayNumber ( i , 0 ) ;
71050: LD_VAR 0 3
71054: PPUSH
71055: LD_INT 0
71057: PPUSH
71058: CALL_OW 505
// SetTag ( i , 0 ) ;
71062: LD_VAR 0 3
71066: PPUSH
71067: LD_INT 0
71069: PPUSH
71070: CALL_OW 109
// RevealDetectorMine ( i ) ;
71074: LD_VAR 0 3
71078: PPUSH
71079: CALL 70307 0 1
// end ;
71083: GO 71047
71085: POP
71086: POP
// end ;
71087: LD_VAR 0 2
71091: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
71092: LD_INT 0
71094: PPUSH
// if p1 = mine_detector_mode then
71095: LD_VAR 0 2
71099: PUSH
71100: LD_INT 103
71102: EQUAL
71103: IFFALSE 71114
// DetectMine ( units ) ;
71105: LD_VAR 0 1
71109: PPUSH
71110: CALL 70605 0 1
// end ;
71114: LD_VAR 0 7
71118: RET
