// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 766 0 0
// CreateDeposits ;
  12: CALL 937 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 2050 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// SetSkill ( Schulz , skill_combat , 7 ) ;
 233: LD_EXP 18
 237: PPUSH
 238: LD_INT 1
 240: PPUSH
 241: LD_INT 7
 243: PPUSH
 244: CALL_OW 237
// schulzSecondSquad := [ ] ;
 248: LD_ADDR_EXP 26
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 3
 260: PPUSH
 261: LD_INT 6
 263: PPUSH
 264: CALL_OW 380
// hc_name := Kántor Radomér ;
 268: LD_ADDR_OWVAR 26
 272: PUSH
 273: LD_STRING Kántor Radomér
 275: ST_TO_ADDR
// hc_gallery := sandar ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandar
 283: ST_TO_ADDR
// hc_face_number := 12 ;
 284: LD_ADDR_OWVAR 34
 288: PUSH
 289: LD_INT 12
 291: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
 292: LD_ADDR_OWVAR 29
 296: PUSH
 297: LD_INT 9
 299: PUSH
 300: LD_INT 9
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 307: LD_ADDR_EXP 26
 311: PUSH
 312: LD_EXP 26
 316: PPUSH
 317: CALL_OW 44
 321: PPUSH
 322: CALL 42136 0 2
 326: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 3
 332: PPUSH
 333: LD_INT 6
 335: PPUSH
 336: CALL_OW 380
// hc_name := Herczeg Farkas ;
 340: LD_ADDR_OWVAR 26
 344: PUSH
 345: LD_STRING Herczeg Farkas
 347: ST_TO_ADDR
// hc_gallery := sandar ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandar
 355: ST_TO_ADDR
// hc_face_number := 28 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 28
 363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
 364: LD_ADDR_OWVAR 29
 368: PUSH
 369: LD_INT 10
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: ST_TO_ADDR
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 379: LD_ADDR_EXP 26
 383: PUSH
 384: LD_EXP 26
 388: PPUSH
 389: CALL_OW 44
 393: PPUSH
 394: CALL 42136 0 2
 398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 6
 407: PPUSH
 408: CALL_OW 380
// hc_name := Ronn Horntvedt ;
 412: LD_ADDR_OWVAR 26
 416: PUSH
 417: LD_STRING Ronn Horntvedt
 419: ST_TO_ADDR
// hc_gallery := sandar ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING sandar
 427: ST_TO_ADDR
// hc_face_number := 29 ;
 428: LD_ADDR_OWVAR 34
 432: PUSH
 433: LD_INT 29
 435: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
 436: LD_ADDR_OWVAR 29
 440: PUSH
 441: LD_INT 11
 443: PUSH
 444: LD_INT 11
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// un := CreateHuman ;
 451: LD_ADDR_VAR 0 3
 455: PUSH
 456: CALL_OW 44
 460: ST_TO_ADDR
// SetClass ( un , class_engineer ) ;
 461: LD_VAR 0 3
 465: PPUSH
 466: LD_INT 2
 468: PPUSH
 469: CALL_OW 336
// schulzSecondSquad := Join ( schulzSecondSquad , un ) ;
 473: LD_ADDR_EXP 26
 477: PUSH
 478: LD_EXP 26
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL 42136 0 2
 492: ST_TO_ADDR
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 493: LD_ADDR_VAR 0 4
 497: PUSH
 498: LD_EXP 20
 502: PUSH
 503: LD_EXP 21
 507: PUSH
 508: LD_EXP 22
 512: PUSH
 513: LD_EXP 23
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_EXP 26
 528: UNION
 529: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 530: LD_ADDR_VAR 0 2
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_VAR 0 4
 544: PPUSH
 545: CALL 6803 0 1
 549: PUSH
 550: FOR_TO
 551: IFFALSE 676
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 553: LD_INT 13
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 25
 564: PUSH
 565: LD_INT 27
 567: PUSH
 568: LD_INT 26
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 4
 587: MOD
 588: PUSH
 589: LD_INT 1
 591: PLUS
 592: ARRAY
 593: PPUSH
 594: LD_INT 20
 596: PPUSH
 597: CALL 9684 0 5
// un := CreateVehicle ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 611: LD_VAR 0 3
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 623: LD_VAR 0 3
 627: PPUSH
 628: LD_INT 5
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 638: LD_VAR 0 4
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 3
 651: PPUSH
 652: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_VAR 0 4
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL_OW 3
 673: ST_TO_ADDR
// end ;
 674: GO 550
 676: POP
 677: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 678: LD_INT 14
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: LD_INT 27
 689: PPUSH
 690: LD_INT 30
 692: PPUSH
 693: CALL 9684 0 5
// un := CreateVehicle ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: CALL_OW 45
 706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 707: LD_VAR 0 3
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 4
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// SetMark ( un , - 2 ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 2
 741: NEG
 742: PPUSH
 743: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 747: LD_EXP 18
 751: PPUSH
 752: LD_VAR 0 3
 756: PPUSH
 757: CALL_OW 52
// end ; end_of_file end_of_file
 761: LD_VAR 0 1
 765: RET
// export function CreateNature ; var i ; begin
 766: LD_INT 0
 768: PPUSH
 769: PPUSH
// PrepareApeman ( 0 ) ;
 770: LD_INT 0
 772: PPUSH
 773: CALL 38417 0 1
// for i := 1 to 5 do
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: DOUBLE
 783: LD_INT 1
 785: DEC
 786: ST_TO_ADDR
 787: LD_INT 5
 789: PUSH
 790: FOR_TO
 791: IFFALSE 810
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 793: CALL_OW 44
 797: PPUSH
 798: LD_INT 8
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
 808: GO 790
 810: POP
 811: POP
// PrepareTiger ( 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: CALL 38525 0 1
// for i := 1 to 2 do
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: DOUBLE
 825: LD_INT 1
 827: DEC
 828: ST_TO_ADDR
 829: LD_INT 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 852
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 835: CALL_OW 44
 839: PPUSH
 840: LD_INT 8
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
 850: GO 832
 852: POP
 853: POP
// PrepareBird ;
 854: CALL 38706 0 0
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 891
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 874: CALL_OW 44
 878: PPUSH
 879: LD_INT 8
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
 889: GO 871
 891: POP
 892: POP
// PrepareFrog ;
 893: CALL 38626 0 0
// for i := 1 to 3 do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 3
 909: PUSH
 910: FOR_TO
 911: IFFALSE 930
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 913: CALL_OW 44
 917: PPUSH
 918: LD_INT 9
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
 928: GO 910
 930: POP
 931: POP
// end ;
 932: LD_VAR 0 1
 936: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 91
 950: PUSH
 951: LD_INT 13
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 52
 960: PUSH
 961: LD_INT 23
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 115
 970: PUSH
 971: LD_INT 150
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 983: LD_ADDR_VAR 0 4
 987: PUSH
 988: LD_INT 82
 990: PUSH
 991: LD_INT 42
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 128
1000: PUSH
1001: LD_INT 132
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// for i in oil do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 3
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1052
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1025: LD_VAR 0 2
1029: PUSH
1030: LD_INT 1
1032: ARRAY
1033: PPUSH
1034: LD_VAR 0 2
1038: PUSH
1039: LD_INT 2
1041: ARRAY
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: CALL_OW 62
1050: GO 1022
1052: POP
1053: POP
// for i in sib do
1054: LD_ADDR_VAR 0 2
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: FOR_IN
1065: IFFALSE 1094
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_INT 3
1087: PPUSH
1088: CALL_OW 62
1092: GO 1064
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 1
1100: RET
// export function SaveEnvironment ( area , saveId ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := ListEnvironmentArea ( area ) ;
1104: LD_ADDR_VAR 0 3
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 353
1118: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_VAR 0 2
1128: PPUSH
1129: CALL_OW 39
// end ;
1133: LD_VAR 0 3
1137: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
1142: PPUSH
// result := [ ] ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 2
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: LD_INT 30
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 69
1201: PUSH
1202: FOR_IN
1203: IFFALSE 1247
// begin base := GetBase ( i ) ;
1205: LD_ADDR_VAR 0 5
1209: PUSH
1210: LD_VAR 0 4
1214: PPUSH
1215: CALL_OW 274
1219: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_VAR 0 5
1234: PPUSH
1235: CALL_OW 279
1239: PPUSH
1240: CALL 42136 0 2
1244: ST_TO_ADDR
// end ;
1245: GO 1202
1247: POP
1248: POP
// if not result then
1249: LD_VAR 0 3
1253: NOT
1254: IFFALSE 1258
// exit ;
1256: GO 1272
// SaveVariable ( result , saveId ) ;
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 2
1267: PPUSH
1268: CALL_OW 39
// end ;
1272: LD_VAR 0 3
1276: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
// result := [ ] ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 50
1315: PUSH
1316: EMPTY
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1456
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: LD_VAR 0 4
1346: PPUSH
1347: CALL_OW 266
1351: PUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 250
1361: PUSH
1362: LD_VAR 0 4
1366: PPUSH
1367: CALL_OW 251
1371: PUSH
1372: LD_VAR 0 4
1376: PPUSH
1377: CALL_OW 254
1381: PUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: CALL_OW 267
1391: PUSH
1392: LD_VAR 0 4
1396: PPUSH
1397: CALL_OW 256
1401: PUSH
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 268
1414: PUSH
1415: LD_VAR 0 4
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL_OW 268
1427: PUSH
1428: LD_VAR 0 4
1432: PPUSH
1433: CALL_OW 269
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL 42136 0 2
1453: ST_TO_ADDR
// end ;
1454: GO 1329
1456: POP
1457: POP
// if not result then
1458: LD_VAR 0 3
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1481
// SaveVariable ( result , saveId ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_VAR 0 2
1476: PPUSH
1477: CALL_OW 39
// end ;
1481: LD_VAR 0 3
1485: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// result := [ ] ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// for i := 1 to 100 do
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_INT 100
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1545
// result := Join ( result , GetTech ( i , side ) ) ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_VAR 0 3
1522: PPUSH
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 321
1537: PPUSH
1538: CALL 42136 0 2
1542: ST_TO_ADDR
1543: GO 1510
1545: POP
1546: POP
// SaveVariable ( result , saveId ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 39
// end ; end_of_file
1561: LD_VAR 0 3
1565: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1566: LD_VAR 0 1
1570: PUSH
1571: LD_EXP 18
1575: EQUAL
1576: IFFALSE 1585
// YouLost ( Schulz ) ;
1578: LD_STRING Schulz
1580: PPUSH
1581: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1585: LD_VAR 0 1
1589: PPUSH
1590: CALL_OW 266
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: IN
1605: IFFALSE 1614
// YouLost ( Depot ) ;
1607: LD_STRING Depot
1609: PPUSH
1610: CALL_OW 104
// end ;
1614: PPOPN 1
1616: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL 62154 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1626: LD_VAR 0 1
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 21
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 23
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: PUSH
1671: LD_EXP 18
1675: DIFF
1676: IN
1677: IFFALSE 1705
// if killerSide = 2 then
1679: LD_VAR 0 2
1683: PUSH
1684: LD_INT 2
1686: EQUAL
1687: IFFALSE 1698
// YouLost ( TeamKiller ) else
1689: LD_STRING TeamKiller
1691: PPUSH
1692: CALL_OW 104
1696: GO 1705
// YouLost ( SoldierKilled ) ;
1698: LD_STRING SoldierKilled
1700: PPUSH
1701: CALL_OW 104
// end ;
1705: PPOPN 3
1707: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL 62274 0 2
1722: PPOPN 2
1724: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1725: LD_ADDR_EXP 3
1729: PUSH
1730: LD_EXP 3
1734: PPUSH
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL 42136 0 2
1753: ST_TO_ADDR
// end ;
1754: PPOPN 4
1756: END
// on SailEvent ( event ) do var i , eng ;
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
// begin if event = 1 then
1761: LD_VAR 0 1
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: IFFALSE 2047
// begin repeat ComExitVehicle ( Lemmy ) ;
1771: LD_EXP 20
1775: PPUSH
1776: CALL_OW 121
// wait ( 0 0$1 ) ;
1780: LD_INT 35
1782: PPUSH
1783: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1787: LD_EXP 20
1791: PPUSH
1792: CALL_OW 310
1796: NOT
1797: IFFALSE 1771
// wait ( 3 ) ;
1799: LD_INT 3
1801: PPUSH
1802: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1806: LD_EXP 20
1810: PPUSH
1811: CALL_OW 314
1815: NOT
1816: IFFALSE 1839
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1818: LD_EXP 20
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 69
1828: PPUSH
1829: LD_INT 14
1831: PPUSH
1832: LD_INT 2
1834: PPUSH
1835: CALL_OW 145
// wait ( 0 0$1 ) ;
1839: LD_INT 35
1841: PPUSH
1842: CALL_OW 67
// until HasTask ( Lemmy ) ;
1846: LD_EXP 20
1850: PPUSH
1851: CALL_OW 314
1855: IFFALSE 1806
// wait ( 0 0$2 ) ;
1857: LD_INT 70
1859: PPUSH
1860: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 26
1873: PPUSH
1874: LD_INT 3
1876: PUSH
1877: LD_INT 25
1879: PUSH
1880: LD_INT 2
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 72
1895: PUSH
1896: LD_EXP 21
1900: UNION
1901: PUSH
1902: LD_EXP 23
1906: UNION
1907: PUSH
1908: LD_EXP 22
1912: UNION
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1950
// begin ComExitVehicle ( i ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1926: LD_INT 10
1928: PPUSH
1929: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 69
1940: PPUSH
1941: LD_INT 14
1943: PPUSH
1944: CALL_OW 171
// end ;
1948: GO 1914
1950: POP
1951: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_EXP 26
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// if not eng then
1977: LD_VAR 0 3
1981: NOT
1982: IFFALSE 1986
// exit ;
1984: GO 2047
// ComExitVehicle ( eng ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1995: LD_INT 10
1997: PPUSH
1998: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 55
2009: PPUSH
2010: LD_INT 42
2012: PPUSH
2013: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_INT 84
2024: PPUSH
2025: LD_INT 47
2027: PPUSH
2028: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 70
2039: PPUSH
2040: LD_INT 19
2042: PPUSH
2043: CALL_OW 171
// end ; end ; end_of_file
2047: PPOPN 3
2049: END
// export function Action ; var i ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
// Video ( true ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL 42108 0 1
// CenterNowOnXY ( 18 , 15 ) ;
2061: LD_INT 18
2063: PPUSH
2064: LD_INT 15
2066: PPUSH
2067: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
2071: LD_EXP 18
2075: PPUSH
2076: LD_INT 80
2078: PPUSH
2079: LD_INT 28
2081: PPUSH
2082: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
2086: LD_EXP 20
2090: PPUSH
2091: LD_INT 61
2093: PPUSH
2094: LD_INT 17
2096: PPUSH
2097: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
2101: LD_EXP 22
2105: PPUSH
2106: LD_INT 72
2108: PPUSH
2109: LD_INT 28
2111: PPUSH
2112: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
2116: LD_EXP 23
2120: PPUSH
2121: LD_INT 74
2123: PPUSH
2124: LD_INT 22
2126: PPUSH
2127: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_INT 68
2138: PPUSH
2139: LD_INT 22
2141: PPUSH
2142: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
2146: LD_EXP 26
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: LD_INT 37
2156: PPUSH
2157: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
2161: LD_EXP 18
2165: PPUSH
2166: LD_STRING DL-Intro-8
2168: PPUSH
2169: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2173: LD_EXP 18
2177: PPUSH
2178: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
2182: LD_EXP 18
2186: PPUSH
2187: LD_STRING DL-Intro-9
2189: PPUSH
2190: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
2194: LD_EXP 18
2198: PPUSH
2199: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2203: LD_EXP 18
2207: PPUSH
2208: LD_STRING DL-Intro-10
2210: PPUSH
2211: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2215: LD_INT 80
2217: PPUSH
2218: LD_INT 28
2220: PPUSH
2221: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2232: LD_INT 22
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 92
2244: PUSH
2245: LD_INT 80
2247: PUSH
2248: LD_INT 28
2250: PUSH
2251: LD_INT 6
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: IFFALSE 2225
// RaiseSailEvent ( 1 ) ;
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2277: LD_INT 10
2279: PPUSH
2280: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2284: LD_EXP 18
2288: PPUSH
2289: LD_STRING DL-Intro-11
2291: PPUSH
2292: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2296: LD_EXP 24
2300: PPUSH
2301: LD_STRING DOm-Intro-12
2303: PPUSH
2304: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2308: LD_EXP 24
2312: PPUSH
2313: LD_STRING DOm-Intro-13
2315: PPUSH
2316: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_STRING DL-Intro-14
2327: PPUSH
2328: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2332: LD_EXP 18
2336: PPUSH
2337: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2341: LD_INT 10
2343: PPUSH
2344: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2348: LD_EXP 18
2352: PPUSH
2353: LD_INT 73
2355: PPUSH
2356: LD_INT 17
2358: PPUSH
2359: CALL_OW 111
// wait ( 0 0$2 ) ;
2363: LD_INT 70
2365: PPUSH
2366: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2370: LD_EXP 18
2374: PPUSH
2375: LD_STRING DL-Intro-15
2377: PPUSH
2378: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2382: LD_EXP 20
2386: PPUSH
2387: LD_STRING DLt-Intro-16
2389: PPUSH
2390: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2394: LD_EXP 20
2398: PPUSH
2399: LD_STRING DLt-Intro-17
2401: PPUSH
2402: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2406: LD_INT 35
2408: PPUSH
2409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2413: LD_INT 22
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: IFFALSE 2406
// wait ( 0 0$2 ) ;
2443: LD_INT 70
2445: PPUSH
2446: CALL_OW 67
// Video ( false ) ;
2450: LD_INT 0
2452: PPUSH
2453: CALL 42108 0 1
// tick := 0 ;
2457: LD_ADDR_OWVAR 1
2461: PUSH
2462: LD_INT 0
2464: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2465: LD_STRING M1
2467: PPUSH
2468: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2485: LD_INT 35
2487: PPUSH
2488: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
2492: LD_INT 22
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 57
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: IFFALSE 2485
// DialogueOn ;
2529: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2533: LD_EXP 18
2537: PPUSH
2538: LD_STRING DL-Intro-18
2540: PPUSH
2541: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2545: LD_EXP 18
2549: PPUSH
2550: LD_STRING DL-Intro-19
2552: PPUSH
2553: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2557: LD_EXP 18
2561: PPUSH
2562: LD_STRING DL-Intro-20
2564: PPUSH
2565: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2569: LD_EXP 20
2573: PPUSH
2574: LD_STRING DLt-Intro-21
2576: PPUSH
2577: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2581: LD_EXP 20
2585: PPUSH
2586: LD_STRING DLt-Intro-22
2588: PPUSH
2589: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2593: LD_EXP 20
2597: PPUSH
2598: LD_STRING DLt-Intro-23
2600: PPUSH
2601: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2605: LD_EXP 18
2609: PPUSH
2610: LD_STRING DL-Intro-24
2612: PPUSH
2613: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2617: LD_EXP 20
2621: PPUSH
2622: LD_STRING DLt-Intro-25
2624: PPUSH
2625: CALL_OW 88
// DialogueOff ;
2629: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2633: LD_STRING M2
2635: PPUSH
2636: CALL_OW 337
// Query ( Prepare ) ;
2640: LD_STRING Prepare
2642: PPUSH
2643: CALL_OW 97
// SaveForQuickRestart ;
2647: CALL_OW 22
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2656: LD_INT 22
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 30
2668: PUSH
2669: LD_INT 15
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: IFFALSE 2701
2686: GO 2688
2688: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2689: LD_EXP 18
2693: PPUSH
2694: LD_STRING DL-Cam-1
2696: PPUSH
2697: CALL_OW 88
2701: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2702: LD_OWVAR 1
2706: PUSH
2707: LD_EXP 4
2711: PUSH
2712: LD_INT 2
2714: DIV
2715: GREATEREQUAL
2716: IFFALSE 2741
2718: GO 2720
2720: DISABLE
// begin DialogueOn ;
2721: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2725: LD_EXP 18
2729: PPUSH
2730: LD_STRING DL-Faster-1
2732: PPUSH
2733: CALL_OW 88
// DialogueOff ;
2737: CALL_OW 7
// end ;
2741: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2742: LD_OWVAR 1
2746: PUSH
2747: LD_EXP 4
2751: PUSH
2752: LD_INT 2
2754: DIV
2755: PUSH
2756: LD_INT 10500
2758: PLUS
2759: GREATEREQUAL
2760: IFFALSE 2785
2762: GO 2764
2764: DISABLE
// begin DialogueOn ;
2765: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2769: LD_EXP 18
2773: PPUSH
2774: LD_STRING DL-Faster-2
2776: PPUSH
2777: CALL_OW 88
// DialogueOff ;
2781: CALL_OW 7
// end ;
2785: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2786: LD_INT 22
2788: PUSH
2789: LD_INT 2
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 57
2801: PUSH
2802: EMPTY
2803: LIST
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: LD_INT 30
2814: PUSH
2815: LD_INT 6
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 8
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 69
2857: PUSH
2858: LD_INT 22
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 3
2870: PUSH
2871: LD_INT 57
2873: PUSH
2874: EMPTY
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 3
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: AND
2901: PUSH
2902: LD_INT 22
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: LD_INT 57
2917: PUSH
2918: EMPTY
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 32
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: PUSH
2945: LD_INT 3
2947: GREATEREQUAL
2948: AND
2949: PUSH
2950: LD_INT 22
2952: PUSH
2953: LD_INT 2
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PUSH
2960: LD_INT 3
2962: PUSH
2963: LD_INT 57
2965: PUSH
2966: EMPTY
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 30
2975: PUSH
2976: LD_INT 5
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: AND
2993: PUSH
2994: LD_INT 22
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PUSH
3004: LD_INT 3
3006: PUSH
3007: LD_INT 57
3009: PUSH
3010: EMPTY
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 30
3019: PUSH
3020: LD_INT 30
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: PPUSH
3032: CALL_OW 69
3036: AND
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 2
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: LD_INT 57
3053: PUSH
3054: EMPTY
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: LD_INT 30
3066: PUSH
3067: LD_INT 26
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 30
3076: PUSH
3077: LD_INT 28
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 69
3098: AND
3099: IFFALSE 3136
3101: GO 3103
3103: DISABLE
// begin if tick <= 10 10$00 then
3104: LD_OWVAR 1
3108: PUSH
3109: LD_INT 21000
3111: LESSEQUAL
3112: IFFALSE 3121
// SetAchievement ( ACH_BOB ) ;
3114: LD_STRING ACH_BOB
3116: PPUSH
3117: CALL_OW 543
// baseDone := true ;
3121: LD_ADDR_EXP 5
3125: PUSH
3126: LD_INT 1
3128: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
3129: LD_STRING M1out
3131: PPUSH
3132: CALL_OW 337
// end ;
3136: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
3137: LD_EXP 5
3141: PUSH
3142: LD_INT 22
3144: PUSH
3145: LD_INT 2
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 21
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: LD_INT 2
3167: PUSH
3168: LD_INT 34
3170: PUSH
3171: LD_INT 32
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 34
3180: PUSH
3181: LD_INT 88
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 69
3206: PUSH
3207: LD_INT 22
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 21
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 23
3229: PUSH
3230: LD_INT 2
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: CALL 6803 0 1
3251: GREATEREQUAL
3252: AND
3253: IFFALSE 3345
3255: GO 3257
3257: DISABLE
// begin DialogueOn ;
3258: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3262: LD_EXP 18
3266: PPUSH
3267: LD_STRING DL-Ready-1
3269: PPUSH
3270: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3274: LD_INT 22
3276: PUSH
3277: LD_INT 2
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PUSH
3284: LD_INT 23
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: IFFALSE 3316
// Say ( Schulz , DL-Ready-2 ) ;
3304: LD_EXP 18
3308: PPUSH
3309: LD_STRING DL-Ready-2
3311: PPUSH
3312: CALL_OW 88
// DialogueOff ;
3316: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3320: LD_STRING M3
3322: PPUSH
3323: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3327: LD_INT 7
3329: PPUSH
3330: LD_INT 1
3332: PPUSH
3333: CALL_OW 424
// canGo := true ;
3337: LD_ADDR_EXP 6
3341: PUSH
3342: LD_INT 1
3344: ST_TO_ADDR
// end ;
3345: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3346: LD_EXP 6
3350: PUSH
3351: LD_INT 7
3353: PPUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 2
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 21
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 33
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: LD_INT 58
3389: PUSH
3390: EMPTY
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 70
3407: PPUSH
3408: CALL 6803 0 1
3412: PUSH
3413: LD_INT 22
3415: PUSH
3416: LD_INT 2
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 21
3425: PUSH
3426: LD_INT 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 23
3435: PUSH
3436: LD_INT 2
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 69
3452: PPUSH
3453: CALL 6803 0 1
3457: GREATEREQUAL
3458: AND
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 2
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 21
3472: PUSH
3473: LD_INT 1
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: LD_INT 55
3485: PUSH
3486: EMPTY
3487: LIST
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 23
3495: PUSH
3496: LD_INT 2
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PPUSH
3509: CALL_OW 69
3513: PPUSH
3514: CALL 6803 0 1
3518: PUSH
3519: LD_INT 0
3521: EQUAL
3522: AND
3523: IFFALSE 4576
3525: GO 3527
3527: DISABLE
3528: LD_INT 0
3530: PPUSH
3531: PPUSH
3532: PPUSH
3533: PPUSH
3534: PPUSH
// begin enable ;
3535: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 7
3543: PPUSH
3544: LD_INT 22
3546: PUSH
3547: LD_INT 2
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PPUSH
3568: CALL_OW 70
3572: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_INT 2
3580: PUSH
3581: LD_INT 34
3583: PUSH
3584: LD_INT 88
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 34
3593: PUSH
3594: LD_INT 32
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: PPUSH
3606: CALL_OW 72
3610: IFFALSE 3621
// begin Query ( InvalidWeapon ) ;
3612: LD_STRING InvalidWeapon
3614: PPUSH
3615: CALL_OW 97
// exit ;
3619: GO 4576
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3621: LD_VAR 0 2
3625: PPUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 24
3631: PUSH
3632: LD_INT 1000
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 72
3647: IFFALSE 3658
// begin Query ( HealthLevel ) ;
3649: LD_STRING HealthLevel
3651: PPUSH
3652: CALL_OW 97
// exit ;
3656: GO 4576
// end ; for i in tmp do
3658: LD_ADDR_VAR 0 1
3662: PUSH
3663: LD_VAR 0 2
3667: PUSH
3668: FOR_IN
3669: IFFALSE 3714
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 60 then
3671: LD_VAR 0 1
3675: PPUSH
3676: CALL_OW 262
3680: PUSH
3681: LD_INT 1
3683: EQUAL
3684: PUSH
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 261
3694: PUSH
3695: LD_INT 60
3697: LESS
3698: AND
3699: IFFALSE 3712
// begin Query ( FuelLevel ) ;
3701: LD_STRING FuelLevel
3703: PPUSH
3704: CALL_OW 97
// exit ;
3708: POP
3709: POP
3710: GO 4576
// end ;
3712: GO 3668
3714: POP
3715: POP
// disable ;
3716: DISABLE
// saveVehicles := [ ] ;
3717: LD_ADDR_VAR 0 3
3721: PUSH
3722: EMPTY
3723: ST_TO_ADDR
// for i in tmp do
3724: LD_ADDR_VAR 0 1
3728: PUSH
3729: LD_VAR 0 2
3733: PUSH
3734: FOR_IN
3735: IFFALSE 3844
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: CALL_OW 265
3756: PUSH
3757: LD_VAR 0 1
3761: PPUSH
3762: CALL_OW 262
3766: PUSH
3767: LD_VAR 0 1
3771: PPUSH
3772: CALL_OW 263
3776: PUSH
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 264
3786: PUSH
3787: LD_VAR 0 1
3791: PPUSH
3792: CALL_OW 248
3796: PUSH
3797: LD_VAR 0 1
3801: PPUSH
3802: CALL_OW 261
3806: PUSH
3807: LD_VAR 0 1
3811: PPUSH
3812: CALL_OW 271
3816: PUSH
3817: LD_VAR 0 1
3821: PPUSH
3822: CALL_OW 311
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: PPUSH
3837: CALL 42136 0 2
3841: ST_TO_ADDR
3842: GO 3734
3844: POP
3845: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3846: LD_ADDR_VAR 0 4
3850: PUSH
3851: LD_INT 22
3853: PUSH
3854: LD_INT 2
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 21
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 50
3873: PUSH
3874: EMPTY
3875: LIST
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: PUSH
3887: LD_VAR 0 2
3891: DIFF
3892: ST_TO_ADDR
// if otherVehicles then
3893: LD_VAR 0 4
3897: IFFALSE 4073
// begin tmp := [ ] ;
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: EMPTY
3905: ST_TO_ADDR
// for i in otherVehicles do
3906: LD_ADDR_VAR 0 1
3910: PUSH
3911: LD_VAR 0 4
3915: PUSH
3916: FOR_IN
3917: IFFALSE 4059
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: LD_VAR 0 2
3928: PPUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: CALL_OW 265
3938: PUSH
3939: LD_VAR 0 1
3943: PPUSH
3944: CALL_OW 262
3948: PUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: CALL_OW 263
3958: PUSH
3959: LD_VAR 0 1
3963: PPUSH
3964: CALL_OW 264
3968: PUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: CALL_OW 248
3978: PUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 261
3988: PUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: CALL_OW 271
3998: PUSH
3999: LD_VAR 0 1
4003: PPUSH
4004: CALL_OW 250
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 251
4018: PUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: CALL_OW 254
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 256
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL 42136 0 2
4056: ST_TO_ADDR
4057: GO 3916
4059: POP
4060: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
4061: LD_VAR 0 2
4065: PPUSH
4066: LD_STRING 09_otherVehicles
4068: PPUSH
4069: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) then
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_INT 32
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 72
4092: NOT
4093: IFFALSE 4102
// SetAchievement ( ACH_GREEN ) ;
4095: LD_STRING ACH_GREEN
4097: PPUSH
4098: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
4102: LD_EXP 18
4106: PPUSH
4107: LD_STRING 09_Schulz
4109: PPUSH
4110: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
4114: LD_EXP 18
4118: PPUSH
4119: LD_STRING 09_Schulz_ID
4121: PPUSH
4122: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
4126: LD_EXP 20
4130: PPUSH
4131: LD_STRING 09_Lemmy
4133: PPUSH
4134: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
4138: LD_EXP 20
4142: PPUSH
4143: LD_STRING 09_Lemmy_ID
4145: PPUSH
4146: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
4150: LD_EXP 22
4154: PPUSH
4155: LD_STRING 09_Nia
4157: PPUSH
4158: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
4162: LD_EXP 22
4166: PPUSH
4167: LD_STRING 09_Nia_ID
4169: PPUSH
4170: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
4174: LD_EXP 21
4178: PPUSH
4179: LD_STRING 09_Mia
4181: PPUSH
4182: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
4186: LD_EXP 21
4190: PPUSH
4191: LD_STRING 09_Mia_ID
4193: PPUSH
4194: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
4198: LD_EXP 23
4202: PPUSH
4203: LD_STRING 09_Jenna
4205: PPUSH
4206: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
4210: LD_EXP 23
4214: PPUSH
4215: LD_STRING 09_Jenna_ID
4217: PPUSH
4218: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
4222: LD_EXP 26
4226: PPUSH
4227: LD_STRING 09_schulzSecondSquad
4229: PPUSH
4230: CALL_OW 38
// for i := 1 to schulzSecondSquad do
4234: LD_ADDR_VAR 0 1
4238: PUSH
4239: DOUBLE
4240: LD_INT 1
4242: DEC
4243: ST_TO_ADDR
4244: LD_EXP 26
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4278
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4252: LD_EXP 26
4256: PUSH
4257: LD_VAR 0 1
4261: ARRAY
4262: PPUSH
4263: LD_STRING 09_random_ID_
4265: PUSH
4266: LD_VAR 0 1
4270: STR
4271: PPUSH
4272: CALL_OW 39
4276: GO 4249
4278: POP
4279: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4280: LD_VAR 0 3
4284: PPUSH
4285: LD_STRING 09_vehicles
4287: PPUSH
4288: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4292: LD_OWVAR 1
4296: PPUSH
4297: LD_STRING 09_tick
4299: PPUSH
4300: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4304: LD_INT 6
4306: PPUSH
4307: LD_STRING 09_env
4309: PPUSH
4310: CALL 1101 0 2
// SaveTech ( 2 , 09_tech ) ;
4314: LD_INT 2
4316: PPUSH
4317: LD_STRING 09_tech
4319: PPUSH
4320: CALL 1486 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4324: LD_INT 2
4326: PPUSH
4327: LD_STRING 09_materials
4329: PPUSH
4330: CALL 1138 0 2
// SaveBase ( 2 , 09_buildings ) ;
4334: LD_INT 2
4336: PPUSH
4337: LD_STRING 09_buildings
4339: PPUSH
4340: CALL 1277 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4344: LD_INT 22
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 23
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: PPUSH
4373: LD_STRING 09_apes
4375: PPUSH
4376: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4380: LD_EXP 4
4384: PPUSH
4385: LD_STRING 09_timeToHeikeDead
4387: PPUSH
4388: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4392: LD_EXP 3
4396: PPUSH
4397: LD_STRING 09_cameras
4399: PPUSH
4400: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 23
4421: PUSH
4422: LD_INT 0
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 50
4431: PUSH
4432: EMPTY
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: ST_TO_ADDR
// if tmp then
4445: LD_VAR 0 2
4449: IFFALSE 4559
// begin animals := [ ] ;
4451: LD_ADDR_VAR 0 5
4455: PUSH
4456: EMPTY
4457: ST_TO_ADDR
// for i in tmp do
4458: LD_ADDR_VAR 0 1
4462: PUSH
4463: LD_VAR 0 2
4467: PUSH
4468: FOR_IN
4469: IFFALSE 4545
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4471: LD_ADDR_VAR 0 5
4475: PUSH
4476: LD_VAR 0 5
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 257
4490: PUSH
4491: LD_VAR 0 1
4495: PPUSH
4496: CALL_OW 250
4500: PUSH
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL_OW 251
4510: PUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 254
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL_OW 256
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL 42136 0 2
4542: ST_TO_ADDR
4543: GO 4468
4545: POP
4546: POP
// SaveVariable ( animals , 09_animals ) ;
4547: LD_VAR 0 5
4551: PPUSH
4552: LD_STRING 09_animals
4554: PPUSH
4555: CALL_OW 39
// end ; wait ( 3 ) ;
4559: LD_INT 3
4561: PPUSH
4562: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4566: LD_INT 1
4568: PPUSH
4569: LD_STRING %2
4571: PPUSH
4572: CALL_OW 340
// end ; end_of_file
4576: PPOPN 5
4578: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4579: LD_OWVAR 1
4583: PUSH
4584: LD_INT 14700
4586: LESS
4587: IFFALSE 4620
4589: GO 4591
4591: DISABLE
// begin enable ;
4592: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4593: LD_INT 1
4595: PPUSH
4596: LD_INT 5
4598: PPUSH
4599: CALL_OW 12
4603: PPUSH
4604: LD_INT 85
4606: PPUSH
4607: LD_INT 44
4609: PPUSH
4610: LD_INT 30
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 56
// end ;
4620: END
// every 0 0$29 trigger tick < 20 20$00 do
4621: LD_OWVAR 1
4625: PUSH
4626: LD_INT 42000
4628: LESS
4629: IFFALSE 4700
4631: GO 4633
4633: DISABLE
// begin enable ;
4634: ENABLE
// if Prob ( 50 ) then
4635: LD_INT 50
4637: PPUSH
4638: CALL_OW 13
4642: IFFALSE 4673
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 5
4649: PPUSH
4650: CALL_OW 12
4654: PPUSH
4655: LD_INT 72
4657: PPUSH
4658: LD_INT 109
4660: PPUSH
4661: LD_INT 22
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 56
4671: GO 4700
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4673: LD_INT 1
4675: PPUSH
4676: LD_INT 5
4678: PPUSH
4679: CALL_OW 12
4683: PPUSH
4684: LD_INT 140
4686: PPUSH
4687: LD_INT 73
4689: PPUSH
4690: LD_INT 22
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 56
4700: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4701: LD_INT 0
4703: PPUSH
4704: PPUSH
// if exist_mode then
4705: LD_VAR 0 2
4709: IFFALSE 4734
// unit := CreateCharacter ( prefix & ident ) else
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: LD_VAR 0 3
4720: PUSH
4721: LD_VAR 0 1
4725: STR
4726: PPUSH
4727: CALL_OW 34
4731: ST_TO_ADDR
4732: GO 4749
// unit := NewCharacter ( ident ) ;
4734: LD_ADDR_VAR 0 5
4738: PUSH
4739: LD_VAR 0 1
4743: PPUSH
4744: CALL_OW 25
4748: ST_TO_ADDR
// result := unit ;
4749: LD_ADDR_VAR 0 4
4753: PUSH
4754: LD_VAR 0 5
4758: ST_TO_ADDR
// end ;
4759: LD_VAR 0 4
4763: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4764: LD_INT 0
4766: PPUSH
4767: PPUSH
// if not side or not nation then
4768: LD_VAR 0 1
4772: NOT
4773: PUSH
4774: LD_VAR 0 2
4778: NOT
4779: OR
4780: IFFALSE 4784
// exit ;
4782: GO 5552
// case nation of nation_american :
4784: LD_VAR 0 2
4788: PUSH
4789: LD_INT 1
4791: DOUBLE
4792: EQUAL
4793: IFTRUE 4797
4795: GO 5011
4797: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_INT 35
4805: PUSH
4806: LD_INT 45
4808: PUSH
4809: LD_INT 46
4811: PUSH
4812: LD_INT 47
4814: PUSH
4815: LD_INT 82
4817: PUSH
4818: LD_INT 83
4820: PUSH
4821: LD_INT 84
4823: PUSH
4824: LD_INT 85
4826: PUSH
4827: LD_INT 86
4829: PUSH
4830: LD_INT 1
4832: PUSH
4833: LD_INT 2
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: LD_INT 15
4841: PUSH
4842: LD_INT 16
4844: PUSH
4845: LD_INT 7
4847: PUSH
4848: LD_INT 12
4850: PUSH
4851: LD_INT 13
4853: PUSH
4854: LD_INT 10
4856: PUSH
4857: LD_INT 14
4859: PUSH
4860: LD_INT 20
4862: PUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 22
4868: PUSH
4869: LD_INT 25
4871: PUSH
4872: LD_INT 32
4874: PUSH
4875: LD_INT 27
4877: PUSH
4878: LD_INT 36
4880: PUSH
4881: LD_INT 69
4883: PUSH
4884: LD_INT 39
4886: PUSH
4887: LD_INT 34
4889: PUSH
4890: LD_INT 40
4892: PUSH
4893: LD_INT 48
4895: PUSH
4896: LD_INT 49
4898: PUSH
4899: LD_INT 50
4901: PUSH
4902: LD_INT 51
4904: PUSH
4905: LD_INT 52
4907: PUSH
4908: LD_INT 53
4910: PUSH
4911: LD_INT 54
4913: PUSH
4914: LD_INT 55
4916: PUSH
4917: LD_INT 56
4919: PUSH
4920: LD_INT 57
4922: PUSH
4923: LD_INT 58
4925: PUSH
4926: LD_INT 59
4928: PUSH
4929: LD_INT 60
4931: PUSH
4932: LD_INT 61
4934: PUSH
4935: LD_INT 62
4937: PUSH
4938: LD_INT 80
4940: PUSH
4941: LD_INT 82
4943: PUSH
4944: LD_INT 83
4946: PUSH
4947: LD_INT 84
4949: PUSH
4950: LD_INT 85
4952: PUSH
4953: LD_INT 86
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
5009: GO 5476
5011: LD_INT 2
5013: DOUBLE
5014: EQUAL
5015: IFTRUE 5019
5017: GO 5245
5019: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: LD_INT 35
5027: PUSH
5028: LD_INT 45
5030: PUSH
5031: LD_INT 46
5033: PUSH
5034: LD_INT 47
5036: PUSH
5037: LD_INT 82
5039: PUSH
5040: LD_INT 83
5042: PUSH
5043: LD_INT 84
5045: PUSH
5046: LD_INT 85
5048: PUSH
5049: LD_INT 87
5051: PUSH
5052: LD_INT 70
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: LD_INT 11
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: LD_INT 4
5066: PUSH
5067: LD_INT 5
5069: PUSH
5070: LD_INT 6
5072: PUSH
5073: LD_INT 15
5075: PUSH
5076: LD_INT 18
5078: PUSH
5079: LD_INT 7
5081: PUSH
5082: LD_INT 17
5084: PUSH
5085: LD_INT 8
5087: PUSH
5088: LD_INT 20
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 72
5099: PUSH
5100: LD_INT 26
5102: PUSH
5103: LD_INT 69
5105: PUSH
5106: LD_INT 39
5108: PUSH
5109: LD_INT 40
5111: PUSH
5112: LD_INT 41
5114: PUSH
5115: LD_INT 42
5117: PUSH
5118: LD_INT 43
5120: PUSH
5121: LD_INT 48
5123: PUSH
5124: LD_INT 49
5126: PUSH
5127: LD_INT 50
5129: PUSH
5130: LD_INT 51
5132: PUSH
5133: LD_INT 52
5135: PUSH
5136: LD_INT 53
5138: PUSH
5139: LD_INT 54
5141: PUSH
5142: LD_INT 55
5144: PUSH
5145: LD_INT 56
5147: PUSH
5148: LD_INT 60
5150: PUSH
5151: LD_INT 61
5153: PUSH
5154: LD_INT 62
5156: PUSH
5157: LD_INT 66
5159: PUSH
5160: LD_INT 67
5162: PUSH
5163: LD_INT 68
5165: PUSH
5166: LD_INT 81
5168: PUSH
5169: LD_INT 82
5171: PUSH
5172: LD_INT 83
5174: PUSH
5175: LD_INT 84
5177: PUSH
5178: LD_INT 85
5180: PUSH
5181: LD_INT 87
5183: PUSH
5184: LD_INT 88
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: ST_TO_ADDR
5243: GO 5476
5245: LD_INT 3
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5475
5253: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: LD_INT 46
5261: PUSH
5262: LD_INT 47
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 82
5273: PUSH
5274: LD_INT 83
5276: PUSH
5277: LD_INT 84
5279: PUSH
5280: LD_INT 85
5282: PUSH
5283: LD_INT 86
5285: PUSH
5286: LD_INT 11
5288: PUSH
5289: LD_INT 9
5291: PUSH
5292: LD_INT 20
5294: PUSH
5295: LD_INT 19
5297: PUSH
5298: LD_INT 21
5300: PUSH
5301: LD_INT 24
5303: PUSH
5304: LD_INT 22
5306: PUSH
5307: LD_INT 25
5309: PUSH
5310: LD_INT 28
5312: PUSH
5313: LD_INT 29
5315: PUSH
5316: LD_INT 30
5318: PUSH
5319: LD_INT 31
5321: PUSH
5322: LD_INT 37
5324: PUSH
5325: LD_INT 38
5327: PUSH
5328: LD_INT 32
5330: PUSH
5331: LD_INT 27
5333: PUSH
5334: LD_INT 33
5336: PUSH
5337: LD_INT 69
5339: PUSH
5340: LD_INT 39
5342: PUSH
5343: LD_INT 34
5345: PUSH
5346: LD_INT 40
5348: PUSH
5349: LD_INT 71
5351: PUSH
5352: LD_INT 23
5354: PUSH
5355: LD_INT 44
5357: PUSH
5358: LD_INT 48
5360: PUSH
5361: LD_INT 49
5363: PUSH
5364: LD_INT 50
5366: PUSH
5367: LD_INT 51
5369: PUSH
5370: LD_INT 52
5372: PUSH
5373: LD_INT 53
5375: PUSH
5376: LD_INT 54
5378: PUSH
5379: LD_INT 55
5381: PUSH
5382: LD_INT 56
5384: PUSH
5385: LD_INT 57
5387: PUSH
5388: LD_INT 58
5390: PUSH
5391: LD_INT 59
5393: PUSH
5394: LD_INT 63
5396: PUSH
5397: LD_INT 64
5399: PUSH
5400: LD_INT 65
5402: PUSH
5403: LD_INT 82
5405: PUSH
5406: LD_INT 83
5408: PUSH
5409: LD_INT 84
5411: PUSH
5412: LD_INT 85
5414: PUSH
5415: LD_INT 86
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 5476
5475: POP
// if state > - 1 and state < 3 then
5476: LD_VAR 0 3
5480: PUSH
5481: LD_INT 1
5483: NEG
5484: GREATER
5485: PUSH
5486: LD_VAR 0 3
5490: PUSH
5491: LD_INT 3
5493: LESS
5494: AND
5495: IFFALSE 5552
// for i in result do
5497: LD_ADDR_VAR 0 5
5501: PUSH
5502: LD_VAR 0 4
5506: PUSH
5507: FOR_IN
5508: IFFALSE 5550
// if GetTech ( i , side ) <> state then
5510: LD_VAR 0 5
5514: PPUSH
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 321
5524: PUSH
5525: LD_VAR 0 3
5529: NONEQUAL
5530: IFFALSE 5548
// result := result diff i ;
5532: LD_ADDR_VAR 0 4
5536: PUSH
5537: LD_VAR 0 4
5541: PUSH
5542: LD_VAR 0 5
5546: DIFF
5547: ST_TO_ADDR
5548: GO 5507
5550: POP
5551: POP
// end ;
5552: LD_VAR 0 4
5556: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
// result := true ;
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_INT 1
5569: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5570: LD_ADDR_VAR 0 5
5574: PUSH
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 480
5584: ST_TO_ADDR
// if not tmp then
5585: LD_VAR 0 5
5589: NOT
5590: IFFALSE 5594
// exit ;
5592: GO 5643
// for i in tmp do
5594: LD_ADDR_VAR 0 4
5598: PUSH
5599: LD_VAR 0 5
5603: PUSH
5604: FOR_IN
5605: IFFALSE 5641
// if GetTech ( i , side ) <> state_researched then
5607: LD_VAR 0 4
5611: PPUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 321
5621: PUSH
5622: LD_INT 2
5624: NONEQUAL
5625: IFFALSE 5639
// begin result := false ;
5627: LD_ADDR_VAR 0 3
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// exit ;
5635: POP
5636: POP
5637: GO 5643
// end ;
5639: GO 5604
5641: POP
5642: POP
// end ;
5643: LD_VAR 0 3
5647: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5648: LD_INT 0
5650: PPUSH
5651: PPUSH
5652: PPUSH
5653: PPUSH
5654: PPUSH
5655: PPUSH
5656: PPUSH
5657: PPUSH
5658: PPUSH
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5663: LD_VAR 0 1
5667: NOT
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 257
5678: PUSH
5679: LD_INT 9
5681: NONEQUAL
5682: OR
5683: IFFALSE 5687
// exit ;
5685: GO 6260
// side := GetSide ( unit ) ;
5687: LD_ADDR_VAR 0 9
5691: PUSH
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 255
5701: ST_TO_ADDR
// tech_space := tech_spacanom ;
5702: LD_ADDR_VAR 0 12
5706: PUSH
5707: LD_INT 29
5709: ST_TO_ADDR
// tech_time := tech_taurad ;
5710: LD_ADDR_VAR 0 13
5714: PUSH
5715: LD_INT 28
5717: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5718: LD_ADDR_VAR 0 11
5722: PUSH
5723: LD_VAR 0 1
5727: PPUSH
5728: CALL_OW 310
5732: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5733: LD_VAR 0 11
5737: PPUSH
5738: CALL_OW 247
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5750
// exit ;
5748: GO 6260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5750: LD_ADDR_VAR 0 8
5754: PUSH
5755: LD_INT 81
5757: PUSH
5758: LD_VAR 0 9
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 3
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PPUSH
5788: CALL_OW 69
5792: ST_TO_ADDR
// if not tmp then
5793: LD_VAR 0 8
5797: NOT
5798: IFFALSE 5802
// exit ;
5800: GO 6260
// if in_unit then
5802: LD_VAR 0 11
5806: IFFALSE 5830
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5808: LD_ADDR_VAR 0 10
5812: PUSH
5813: LD_VAR 0 8
5817: PPUSH
5818: LD_VAR 0 11
5822: PPUSH
5823: CALL_OW 74
5827: ST_TO_ADDR
5828: GO 5850
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5830: LD_ADDR_VAR 0 10
5834: PUSH
5835: LD_VAR 0 8
5839: PPUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 74
5849: ST_TO_ADDR
// if not enemy then
5850: LD_VAR 0 10
5854: NOT
5855: IFFALSE 5859
// exit ;
5857: GO 6260
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5859: LD_VAR 0 11
5863: PUSH
5864: LD_VAR 0 11
5868: PPUSH
5869: LD_VAR 0 10
5873: PPUSH
5874: CALL_OW 296
5878: PUSH
5879: LD_INT 13
5881: GREATER
5882: AND
5883: PUSH
5884: LD_VAR 0 1
5888: PPUSH
5889: LD_VAR 0 10
5893: PPUSH
5894: CALL_OW 296
5898: PUSH
5899: LD_INT 12
5901: GREATER
5902: OR
5903: IFFALSE 5907
// exit ;
5905: GO 6260
// missile := [ 1 ] ;
5907: LD_ADDR_VAR 0 14
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: EMPTY
5916: LIST
5917: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5918: LD_VAR 0 9
5922: PPUSH
5923: LD_VAR 0 12
5927: PPUSH
5928: CALL_OW 325
5932: IFFALSE 5961
// missile := Replace ( missile , missile + 1 , 2 ) ;
5934: LD_ADDR_VAR 0 14
5938: PUSH
5939: LD_VAR 0 14
5943: PPUSH
5944: LD_VAR 0 14
5948: PUSH
5949: LD_INT 1
5951: PLUS
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 1
5960: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5961: LD_VAR 0 9
5965: PPUSH
5966: LD_VAR 0 13
5970: PPUSH
5971: CALL_OW 325
5975: PUSH
5976: LD_VAR 0 10
5980: PPUSH
5981: CALL_OW 255
5985: PPUSH
5986: LD_VAR 0 13
5990: PPUSH
5991: CALL_OW 325
5995: NOT
5996: AND
5997: IFFALSE 6026
// missile := Replace ( missile , missile + 1 , 3 ) ;
5999: LD_ADDR_VAR 0 14
6003: PUSH
6004: LD_VAR 0 14
6008: PPUSH
6009: LD_VAR 0 14
6013: PUSH
6014: LD_INT 1
6016: PLUS
6017: PPUSH
6018: LD_INT 3
6020: PPUSH
6021: CALL_OW 1
6025: ST_TO_ADDR
// if missile < 2 then
6026: LD_VAR 0 14
6030: PUSH
6031: LD_INT 2
6033: LESS
6034: IFFALSE 6038
// exit ;
6036: GO 6260
// x := GetX ( enemy ) ;
6038: LD_ADDR_VAR 0 4
6042: PUSH
6043: LD_VAR 0 10
6047: PPUSH
6048: CALL_OW 250
6052: ST_TO_ADDR
// y := GetY ( enemy ) ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_VAR 0 10
6062: PPUSH
6063: CALL_OW 251
6067: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6068: LD_ADDR_VAR 0 6
6072: PUSH
6073: LD_VAR 0 4
6077: PUSH
6078: LD_INT 1
6080: NEG
6081: PPUSH
6082: LD_INT 1
6084: PPUSH
6085: CALL_OW 12
6089: PLUS
6090: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6091: LD_ADDR_VAR 0 7
6095: PUSH
6096: LD_VAR 0 5
6100: PUSH
6101: LD_INT 1
6103: NEG
6104: PPUSH
6105: LD_INT 1
6107: PPUSH
6108: CALL_OW 12
6112: PLUS
6113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6114: LD_VAR 0 6
6118: PPUSH
6119: LD_VAR 0 7
6123: PPUSH
6124: CALL_OW 488
6128: NOT
6129: IFFALSE 6151
// begin _x := x ;
6131: LD_ADDR_VAR 0 6
6135: PUSH
6136: LD_VAR 0 4
6140: ST_TO_ADDR
// _y := y ;
6141: LD_ADDR_VAR 0 7
6145: PUSH
6146: LD_VAR 0 5
6150: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: LD_INT 1
6158: PPUSH
6159: LD_VAR 0 14
6163: PPUSH
6164: CALL_OW 12
6168: ST_TO_ADDR
// case i of 1 :
6169: LD_VAR 0 3
6173: PUSH
6174: LD_INT 1
6176: DOUBLE
6177: EQUAL
6178: IFTRUE 6182
6180: GO 6199
6182: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6183: LD_VAR 0 1
6187: PPUSH
6188: LD_VAR 0 10
6192: PPUSH
6193: CALL_OW 115
6197: GO 6260
6199: LD_INT 2
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6229
6207: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6208: LD_VAR 0 1
6212: PPUSH
6213: LD_VAR 0 6
6217: PPUSH
6218: LD_VAR 0 7
6222: PPUSH
6223: CALL_OW 153
6227: GO 6260
6229: LD_INT 3
6231: DOUBLE
6232: EQUAL
6233: IFTRUE 6237
6235: GO 6259
6237: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6238: LD_VAR 0 1
6242: PPUSH
6243: LD_VAR 0 6
6247: PPUSH
6248: LD_VAR 0 7
6252: PPUSH
6253: CALL_OW 154
6257: GO 6260
6259: POP
// end ;
6260: LD_VAR 0 2
6264: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
6270: PPUSH
6271: PPUSH
6272: PPUSH
// if not unit or not building then
6273: LD_VAR 0 1
6277: NOT
6278: PUSH
6279: LD_VAR 0 2
6283: NOT
6284: OR
6285: IFFALSE 6289
// exit ;
6287: GO 6447
// x := GetX ( building ) ;
6289: LD_ADDR_VAR 0 5
6293: PUSH
6294: LD_VAR 0 2
6298: PPUSH
6299: CALL_OW 250
6303: ST_TO_ADDR
// y := GetY ( building ) ;
6304: LD_ADDR_VAR 0 6
6308: PUSH
6309: LD_VAR 0 2
6313: PPUSH
6314: CALL_OW 251
6318: ST_TO_ADDR
// for i = 0 to 5 do
6319: LD_ADDR_VAR 0 4
6323: PUSH
6324: DOUBLE
6325: LD_INT 0
6327: DEC
6328: ST_TO_ADDR
6329: LD_INT 5
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6445
// begin _x := ShiftX ( x , i , 3 ) ;
6335: LD_ADDR_VAR 0 7
6339: PUSH
6340: LD_VAR 0 5
6344: PPUSH
6345: LD_VAR 0 4
6349: PPUSH
6350: LD_INT 3
6352: PPUSH
6353: CALL_OW 272
6357: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6358: LD_ADDR_VAR 0 8
6362: PUSH
6363: LD_VAR 0 6
6367: PPUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PPUSH
6376: CALL_OW 273
6380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6381: LD_VAR 0 7
6385: PPUSH
6386: LD_VAR 0 8
6390: PPUSH
6391: CALL_OW 488
6395: NOT
6396: IFFALSE 6400
// continue ;
6398: GO 6332
// if HexInfo ( _x , _y ) = 0 then
6400: LD_VAR 0 7
6404: PPUSH
6405: LD_VAR 0 8
6409: PPUSH
6410: CALL_OW 428
6414: PUSH
6415: LD_INT 0
6417: EQUAL
6418: IFFALSE 6443
// begin ComMoveXY ( unit , _x , _y ) ;
6420: LD_VAR 0 1
6424: PPUSH
6425: LD_VAR 0 7
6429: PPUSH
6430: LD_VAR 0 8
6434: PPUSH
6435: CALL_OW 111
// exit ;
6439: POP
6440: POP
6441: GO 6447
// end ; end ;
6443: GO 6332
6445: POP
6446: POP
// end ;
6447: LD_VAR 0 3
6451: RET
// export function ScanBase ( side , base_area ) ; begin
6452: LD_INT 0
6454: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: LD_VAR 0 2
6464: PPUSH
6465: LD_INT 81
6467: PUSH
6468: LD_VAR 0 1
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 70
6481: ST_TO_ADDR
// end ;
6482: LD_VAR 0 3
6486: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// result := false ;
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_INT 0
6500: ST_TO_ADDR
// side := GetSide ( unit ) ;
6501: LD_ADDR_VAR 0 3
6505: PUSH
6506: LD_VAR 0 1
6510: PPUSH
6511: CALL_OW 255
6515: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: CALL_OW 248
6530: ST_TO_ADDR
// case nat of 1 :
6531: LD_VAR 0 4
6535: PUSH
6536: LD_INT 1
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6555
6544: POP
// tech := tech_lassight ; 2 :
6545: LD_ADDR_VAR 0 5
6549: PUSH
6550: LD_INT 12
6552: ST_TO_ADDR
6553: GO 6594
6555: LD_INT 2
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6574
6563: POP
// tech := tech_mortar ; 3 :
6564: LD_ADDR_VAR 0 5
6568: PUSH
6569: LD_INT 41
6571: ST_TO_ADDR
6572: GO 6594
6574: LD_INT 3
6576: DOUBLE
6577: EQUAL
6578: IFTRUE 6582
6580: GO 6593
6582: POP
// tech := tech_bazooka ; end ;
6583: LD_ADDR_VAR 0 5
6587: PUSH
6588: LD_INT 44
6590: ST_TO_ADDR
6591: GO 6594
6593: POP
// if Researched ( side , tech ) then
6594: LD_VAR 0 3
6598: PPUSH
6599: LD_VAR 0 5
6603: PPUSH
6604: CALL_OW 325
6608: IFFALSE 6635
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6610: LD_ADDR_VAR 0 2
6614: PUSH
6615: LD_INT 5
6617: PUSH
6618: LD_INT 8
6620: PUSH
6621: LD_INT 9
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: LD_VAR 0 4
6633: ARRAY
6634: ST_TO_ADDR
// end ;
6635: LD_VAR 0 2
6639: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
6644: PPUSH
// if not mines then
6645: LD_VAR 0 2
6649: NOT
6650: IFFALSE 6654
// exit ;
6652: GO 6798
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6654: LD_ADDR_VAR 0 5
6658: PUSH
6659: LD_INT 81
6661: PUSH
6662: LD_VAR 0 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PPUSH
6692: CALL_OW 69
6696: ST_TO_ADDR
// for i in mines do
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: LD_VAR 0 2
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6796
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 4
6723: PUSH
6724: LD_INT 2
6726: ARRAY
6727: PPUSH
6728: CALL_OW 458
6732: NOT
6733: IFFALSE 6737
// continue ;
6735: GO 6707
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6737: LD_VAR 0 4
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 4
6750: PUSH
6751: LD_INT 2
6753: ARRAY
6754: PPUSH
6755: CALL_OW 428
6759: PUSH
6760: LD_VAR 0 5
6764: IN
6765: IFFALSE 6794
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6767: LD_VAR 0 4
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PPUSH
6776: LD_VAR 0 4
6780: PUSH
6781: LD_INT 2
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 1
6789: PPUSH
6790: CALL_OW 456
// end ;
6794: GO 6707
6796: POP
6797: POP
// end ;
6798: LD_VAR 0 3
6802: RET
// export function Count ( array ) ; begin
6803: LD_INT 0
6805: PPUSH
// result := array + 0 ;
6806: LD_ADDR_VAR 0 2
6810: PUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 0
6818: PLUS
6819: ST_TO_ADDR
// end ;
6820: LD_VAR 0 2
6824: RET
// export function IsEmpty ( building ) ; begin
6825: LD_INT 0
6827: PPUSH
// if not building then
6828: LD_VAR 0 1
6832: NOT
6833: IFFALSE 6837
// exit ;
6835: GO 6880
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6837: LD_ADDR_VAR 0 2
6841: PUSH
6842: LD_VAR 0 1
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 255
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 58
6866: PUSH
6867: EMPTY
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PPUSH
6874: CALL_OW 69
6878: IN
6879: ST_TO_ADDR
// end ;
6880: LD_VAR 0 2
6884: RET
// export function IsNotFull ( building ) ; var places ; begin
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// if not building then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 7069
// result := false ;
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_INT 0
6905: ST_TO_ADDR
// places := 0 ;
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_INT 0
6913: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 266
6923: PUSH
6924: LD_INT 0
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6986
6930: LD_INT 1
6932: DOUBLE
6933: EQUAL
6934: IFTRUE 6986
6936: LD_INT 6
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6986
6942: LD_INT 7
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6986
6948: LD_INT 8
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6986
6954: LD_INT 4
6956: DOUBLE
6957: EQUAL
6958: IFTRUE 6986
6960: LD_INT 5
6962: DOUBLE
6963: EQUAL
6964: IFTRUE 6986
6966: LD_INT 2
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6986
6972: LD_INT 3
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6986
6978: LD_INT 35
6980: DOUBLE
6981: EQUAL
6982: IFTRUE 6986
6984: GO 6997
6986: POP
// places := 6 ; b_bunker , b_breastwork :
6987: LD_ADDR_VAR 0 3
6991: PUSH
6992: LD_INT 6
6994: ST_TO_ADDR
6995: GO 7042
6997: LD_INT 32
6999: DOUBLE
7000: EQUAL
7001: IFTRUE 7011
7003: LD_INT 31
7005: DOUBLE
7006: EQUAL
7007: IFTRUE 7011
7009: GO 7022
7011: POP
// places := 1 ; b_control_tower :
7012: LD_ADDR_VAR 0 3
7016: PUSH
7017: LD_INT 1
7019: ST_TO_ADDR
7020: GO 7042
7022: LD_INT 36
7024: DOUBLE
7025: EQUAL
7026: IFTRUE 7030
7028: GO 7041
7030: POP
// places := 3 ; end ;
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: LD_INT 3
7038: ST_TO_ADDR
7039: GO 7042
7041: POP
// if places then
7042: LD_VAR 0 3
7046: IFFALSE 7069
// result := UnitsInside ( building ) < places ;
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 313
7062: PUSH
7063: LD_VAR 0 3
7067: LESS
7068: ST_TO_ADDR
// end ;
7069: LD_VAR 0 2
7073: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// tmp := [ ] ;
7080: LD_ADDR_VAR 0 3
7084: PUSH
7085: EMPTY
7086: ST_TO_ADDR
// list := [ ] ;
7087: LD_ADDR_VAR 0 5
7091: PUSH
7092: EMPTY
7093: ST_TO_ADDR
// for i = 16 to 25 do
7094: LD_ADDR_VAR 0 4
7098: PUSH
7099: DOUBLE
7100: LD_INT 16
7102: DEC
7103: ST_TO_ADDR
7104: LD_INT 25
7106: PUSH
7107: FOR_TO
7108: IFFALSE 7181
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: LD_VAR 0 3
7119: PUSH
7120: LD_INT 22
7122: PUSH
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL_OW 255
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 91
7139: PUSH
7140: LD_VAR 0 1
7144: PUSH
7145: LD_INT 6
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 30
7155: PUSH
7156: LD_VAR 0 4
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: PPUSH
7173: CALL_OW 69
7177: ADD
7178: ST_TO_ADDR
7179: GO 7107
7181: POP
7182: POP
// for i = 1 to tmp do
7183: LD_ADDR_VAR 0 4
7187: PUSH
7188: DOUBLE
7189: LD_INT 1
7191: DEC
7192: ST_TO_ADDR
7193: LD_VAR 0 3
7197: PUSH
7198: FOR_TO
7199: IFFALSE 7287
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7201: LD_ADDR_VAR 0 5
7205: PUSH
7206: LD_VAR 0 5
7210: PUSH
7211: LD_VAR 0 3
7215: PUSH
7216: LD_VAR 0 4
7220: ARRAY
7221: PPUSH
7222: CALL_OW 266
7226: PUSH
7227: LD_VAR 0 3
7231: PUSH
7232: LD_VAR 0 4
7236: ARRAY
7237: PPUSH
7238: CALL_OW 250
7242: PUSH
7243: LD_VAR 0 3
7247: PUSH
7248: LD_VAR 0 4
7252: ARRAY
7253: PPUSH
7254: CALL_OW 251
7258: PUSH
7259: LD_VAR 0 3
7263: PUSH
7264: LD_VAR 0 4
7268: ARRAY
7269: PPUSH
7270: CALL_OW 254
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: ADD
7284: ST_TO_ADDR
7285: GO 7198
7287: POP
7288: POP
// result := list ;
7289: LD_ADDR_VAR 0 2
7293: PUSH
7294: LD_VAR 0 5
7298: ST_TO_ADDR
// end ;
7299: LD_VAR 0 2
7303: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7304: LD_INT 0
7306: PPUSH
7307: PPUSH
7308: PPUSH
7309: PPUSH
7310: PPUSH
7311: PPUSH
7312: PPUSH
// if not factory then
7313: LD_VAR 0 1
7317: NOT
7318: IFFALSE 7322
// exit ;
7320: GO 7915
// if control = control_apeman then
7322: LD_VAR 0 4
7326: PUSH
7327: LD_INT 5
7329: EQUAL
7330: IFFALSE 7439
// begin tmp := UnitsInside ( factory ) ;
7332: LD_ADDR_VAR 0 8
7336: PUSH
7337: LD_VAR 0 1
7341: PPUSH
7342: CALL_OW 313
7346: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7347: LD_VAR 0 8
7351: PPUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 12
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 72
7366: NOT
7367: IFFALSE 7377
// control := control_manual ;
7369: LD_ADDR_VAR 0 4
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7377: LD_ADDR_VAR 0 8
7381: PUSH
7382: LD_VAR 0 1
7386: PPUSH
7387: CALL 7074 0 1
7391: ST_TO_ADDR
// if tmp then
7392: LD_VAR 0 8
7396: IFFALSE 7439
// begin for i in tmp do
7398: LD_ADDR_VAR 0 7
7402: PUSH
7403: LD_VAR 0 8
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7437
// if i [ 1 ] = b_ext_radio then
7411: LD_VAR 0 7
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PUSH
7420: LD_INT 22
7422: EQUAL
7423: IFFALSE 7435
// begin control := control_remote ;
7425: LD_ADDR_VAR 0 4
7429: PUSH
7430: LD_INT 2
7432: ST_TO_ADDR
// break ;
7433: GO 7437
// end ;
7435: GO 7408
7437: POP
7438: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7439: LD_VAR 0 1
7443: PPUSH
7444: LD_VAR 0 2
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_VAR 0 4
7458: PPUSH
7459: LD_VAR 0 5
7463: PPUSH
7464: CALL_OW 448
7468: IFFALSE 7503
// begin result := [ chassis , engine , control , weapon ] ;
7470: LD_ADDR_VAR 0 6
7474: PUSH
7475: LD_VAR 0 2
7479: PUSH
7480: LD_VAR 0 3
7484: PUSH
7485: LD_VAR 0 4
7489: PUSH
7490: LD_VAR 0 5
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: ST_TO_ADDR
// exit ;
7501: GO 7915
// end ; _chassis := AvailableChassisList ( factory ) ;
7503: LD_ADDR_VAR 0 9
7507: PUSH
7508: LD_VAR 0 1
7512: PPUSH
7513: CALL_OW 475
7517: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 476
7532: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7533: LD_ADDR_VAR 0 12
7537: PUSH
7538: LD_VAR 0 1
7542: PPUSH
7543: CALL_OW 477
7547: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7548: LD_ADDR_VAR 0 10
7552: PUSH
7553: LD_VAR 0 1
7557: PPUSH
7558: CALL_OW 478
7562: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7563: LD_VAR 0 9
7567: NOT
7568: PUSH
7569: LD_VAR 0 11
7573: NOT
7574: OR
7575: PUSH
7576: LD_VAR 0 12
7580: NOT
7581: OR
7582: PUSH
7583: LD_VAR 0 10
7587: NOT
7588: OR
7589: IFFALSE 7624
// begin result := [ chassis , engine , control , weapon ] ;
7591: LD_ADDR_VAR 0 6
7595: PUSH
7596: LD_VAR 0 2
7600: PUSH
7601: LD_VAR 0 3
7605: PUSH
7606: LD_VAR 0 4
7610: PUSH
7611: LD_VAR 0 5
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: ST_TO_ADDR
// exit ;
7622: GO 7915
// end ; if not chassis in _chassis then
7624: LD_VAR 0 2
7628: PUSH
7629: LD_VAR 0 9
7633: IN
7634: NOT
7635: IFFALSE 7661
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7637: LD_ADDR_VAR 0 2
7641: PUSH
7642: LD_VAR 0 9
7646: PUSH
7647: LD_INT 1
7649: PPUSH
7650: LD_VAR 0 9
7654: PPUSH
7655: CALL_OW 12
7659: ARRAY
7660: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7661: LD_VAR 0 2
7665: PPUSH
7666: LD_VAR 0 3
7670: PPUSH
7671: CALL 7920 0 2
7675: NOT
7676: IFFALSE 7735
// repeat engine := _engine [ 1 ] ;
7678: LD_ADDR_VAR 0 3
7682: PUSH
7683: LD_VAR 0 11
7687: PUSH
7688: LD_INT 1
7690: ARRAY
7691: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7692: LD_ADDR_VAR 0 11
7696: PUSH
7697: LD_VAR 0 11
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 3
7709: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7710: LD_VAR 0 2
7714: PPUSH
7715: LD_VAR 0 3
7719: PPUSH
7720: CALL 7920 0 2
7724: PUSH
7725: LD_VAR 0 11
7729: PUSH
7730: EMPTY
7731: EQUAL
7732: OR
7733: IFFALSE 7678
// if not control in _control then
7735: LD_VAR 0 4
7739: PUSH
7740: LD_VAR 0 12
7744: IN
7745: NOT
7746: IFFALSE 7772
// control := _control [ rand ( 1 , _control ) ] ;
7748: LD_ADDR_VAR 0 4
7752: PUSH
7753: LD_VAR 0 12
7757: PUSH
7758: LD_INT 1
7760: PPUSH
7761: LD_VAR 0 12
7765: PPUSH
7766: CALL_OW 12
7770: ARRAY
7771: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7772: LD_VAR 0 2
7776: PPUSH
7777: LD_VAR 0 5
7781: PPUSH
7782: CALL 8140 0 2
7786: NOT
7787: IFFALSE 7846
// repeat weapon := _weapon [ 1 ] ;
7789: LD_ADDR_VAR 0 5
7793: PUSH
7794: LD_VAR 0 10
7798: PUSH
7799: LD_INT 1
7801: ARRAY
7802: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7803: LD_ADDR_VAR 0 10
7807: PUSH
7808: LD_VAR 0 10
7812: PPUSH
7813: LD_INT 1
7815: PPUSH
7816: CALL_OW 3
7820: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7821: LD_VAR 0 2
7825: PPUSH
7826: LD_VAR 0 5
7830: PPUSH
7831: CALL 8140 0 2
7835: PUSH
7836: LD_VAR 0 10
7840: PUSH
7841: EMPTY
7842: EQUAL
7843: OR
7844: IFFALSE 7789
// result := [ ] ;
7846: LD_ADDR_VAR 0 6
7850: PUSH
7851: EMPTY
7852: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7853: LD_VAR 0 1
7857: PPUSH
7858: LD_VAR 0 2
7862: PPUSH
7863: LD_VAR 0 3
7867: PPUSH
7868: LD_VAR 0 4
7872: PPUSH
7873: LD_VAR 0 5
7877: PPUSH
7878: CALL_OW 448
7882: IFFALSE 7915
// result := [ chassis , engine , control , weapon ] ;
7884: LD_ADDR_VAR 0 6
7888: PUSH
7889: LD_VAR 0 2
7893: PUSH
7894: LD_VAR 0 3
7898: PUSH
7899: LD_VAR 0 4
7903: PUSH
7904: LD_VAR 0 5
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: ST_TO_ADDR
// end ;
7915: LD_VAR 0 6
7919: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7920: LD_INT 0
7922: PPUSH
// if not chassis or not engine then
7923: LD_VAR 0 1
7927: NOT
7928: PUSH
7929: LD_VAR 0 2
7933: NOT
7934: OR
7935: IFFALSE 7939
// exit ;
7937: GO 8135
// case engine of engine_solar :
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 2
7946: DOUBLE
7947: EQUAL
7948: IFTRUE 7952
7950: GO 7990
7952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7953: LD_ADDR_VAR 0 3
7957: PUSH
7958: LD_INT 11
7960: PUSH
7961: LD_INT 12
7963: PUSH
7964: LD_INT 13
7966: PUSH
7967: LD_INT 14
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 2
7975: PUSH
7976: LD_INT 3
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ST_TO_ADDR
7988: GO 8119
7990: LD_INT 1
7992: DOUBLE
7993: EQUAL
7994: IFTRUE 7998
7996: GO 8060
7998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: LD_INT 11
8006: PUSH
8007: LD_INT 12
8009: PUSH
8010: LD_INT 13
8012: PUSH
8013: LD_INT 14
8015: PUSH
8016: LD_INT 1
8018: PUSH
8019: LD_INT 2
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: LD_INT 4
8027: PUSH
8028: LD_INT 5
8030: PUSH
8031: LD_INT 21
8033: PUSH
8034: LD_INT 23
8036: PUSH
8037: LD_INT 22
8039: PUSH
8040: LD_INT 24
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: ST_TO_ADDR
8058: GO 8119
8060: LD_INT 3
8062: DOUBLE
8063: EQUAL
8064: IFTRUE 8068
8066: GO 8118
8068: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8069: LD_ADDR_VAR 0 3
8073: PUSH
8074: LD_INT 13
8076: PUSH
8077: LD_INT 14
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: LD_INT 4
8088: PUSH
8089: LD_INT 5
8091: PUSH
8092: LD_INT 21
8094: PUSH
8095: LD_INT 22
8097: PUSH
8098: LD_INT 23
8100: PUSH
8101: LD_INT 24
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
8116: GO 8119
8118: POP
// result := ( chassis in result ) ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_VAR 0 3
8133: IN
8134: ST_TO_ADDR
// end ;
8135: LD_VAR 0 3
8139: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8140: LD_INT 0
8142: PPUSH
// if not chassis or not weapon then
8143: LD_VAR 0 1
8147: NOT
8148: PUSH
8149: LD_VAR 0 2
8153: NOT
8154: OR
8155: IFFALSE 8159
// exit ;
8157: GO 9219
// case weapon of us_machine_gun :
8159: LD_VAR 0 2
8163: PUSH
8164: LD_INT 2
8166: DOUBLE
8167: EQUAL
8168: IFTRUE 8172
8170: GO 8202
8172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8173: LD_ADDR_VAR 0 3
8177: PUSH
8178: LD_INT 1
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: LD_INT 3
8186: PUSH
8187: LD_INT 4
8189: PUSH
8190: LD_INT 5
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: ST_TO_ADDR
8200: GO 9203
8202: LD_INT 3
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8240
8210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8211: LD_ADDR_VAR 0 3
8215: PUSH
8216: LD_INT 1
8218: PUSH
8219: LD_INT 2
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: LD_INT 4
8227: PUSH
8228: LD_INT 5
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: ST_TO_ADDR
8238: GO 9203
8240: LD_INT 11
8242: DOUBLE
8243: EQUAL
8244: IFTRUE 8248
8246: GO 8278
8248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8249: LD_ADDR_VAR 0 3
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: LD_INT 2
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 4
8265: PUSH
8266: LD_INT 5
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: ST_TO_ADDR
8276: GO 9203
8278: LD_INT 4
8280: DOUBLE
8281: EQUAL
8282: IFTRUE 8286
8284: GO 8312
8286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 3
8297: PUSH
8298: LD_INT 4
8300: PUSH
8301: LD_INT 5
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: ST_TO_ADDR
8310: GO 9203
8312: LD_INT 5
8314: DOUBLE
8315: EQUAL
8316: IFTRUE 8320
8318: GO 8346
8320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8321: LD_ADDR_VAR 0 3
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: LD_INT 4
8334: PUSH
8335: LD_INT 5
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: ST_TO_ADDR
8344: GO 9203
8346: LD_INT 9
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8380
8354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_INT 2
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: LD_INT 5
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: ST_TO_ADDR
8378: GO 9203
8380: LD_INT 7
8382: DOUBLE
8383: EQUAL
8384: IFTRUE 8388
8386: GO 8414
8388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8389: LD_ADDR_VAR 0 3
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: LD_INT 3
8399: PUSH
8400: LD_INT 4
8402: PUSH
8403: LD_INT 5
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: ST_TO_ADDR
8412: GO 9203
8414: LD_INT 12
8416: DOUBLE
8417: EQUAL
8418: IFTRUE 8422
8420: GO 8448
8422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8423: LD_ADDR_VAR 0 3
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 3
8433: PUSH
8434: LD_INT 4
8436: PUSH
8437: LD_INT 5
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: ST_TO_ADDR
8446: GO 9203
8448: LD_INT 13
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8482
8456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8457: LD_ADDR_VAR 0 3
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: LD_INT 3
8467: PUSH
8468: LD_INT 4
8470: PUSH
8471: LD_INT 5
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: ST_TO_ADDR
8480: GO 9203
8482: LD_INT 14
8484: DOUBLE
8485: EQUAL
8486: IFTRUE 8490
8488: GO 8508
8490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8491: LD_ADDR_VAR 0 3
8495: PUSH
8496: LD_INT 4
8498: PUSH
8499: LD_INT 5
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: ST_TO_ADDR
8506: GO 9203
8508: LD_INT 6
8510: DOUBLE
8511: EQUAL
8512: IFTRUE 8516
8514: GO 8534
8516: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8517: LD_ADDR_VAR 0 3
8521: PUSH
8522: LD_INT 4
8524: PUSH
8525: LD_INT 5
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: ST_TO_ADDR
8532: GO 9203
8534: LD_INT 10
8536: DOUBLE
8537: EQUAL
8538: IFTRUE 8542
8540: GO 8560
8542: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8543: LD_ADDR_VAR 0 3
8547: PUSH
8548: LD_INT 4
8550: PUSH
8551: LD_INT 5
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: ST_TO_ADDR
8558: GO 9203
8560: LD_INT 22
8562: DOUBLE
8563: EQUAL
8564: IFTRUE 8568
8566: GO 8594
8568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8569: LD_ADDR_VAR 0 3
8573: PUSH
8574: LD_INT 11
8576: PUSH
8577: LD_INT 12
8579: PUSH
8580: LD_INT 13
8582: PUSH
8583: LD_INT 14
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: ST_TO_ADDR
8592: GO 9203
8594: LD_INT 23
8596: DOUBLE
8597: EQUAL
8598: IFTRUE 8602
8600: GO 8628
8602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8603: LD_ADDR_VAR 0 3
8607: PUSH
8608: LD_INT 11
8610: PUSH
8611: LD_INT 12
8613: PUSH
8614: LD_INT 13
8616: PUSH
8617: LD_INT 14
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: ST_TO_ADDR
8626: GO 9203
8628: LD_INT 24
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8662
8636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8637: LD_ADDR_VAR 0 3
8641: PUSH
8642: LD_INT 11
8644: PUSH
8645: LD_INT 12
8647: PUSH
8648: LD_INT 13
8650: PUSH
8651: LD_INT 14
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: ST_TO_ADDR
8660: GO 9203
8662: LD_INT 30
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8696
8670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8671: LD_ADDR_VAR 0 3
8675: PUSH
8676: LD_INT 11
8678: PUSH
8679: LD_INT 12
8681: PUSH
8682: LD_INT 13
8684: PUSH
8685: LD_INT 14
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: ST_TO_ADDR
8694: GO 9203
8696: LD_INT 25
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8722
8704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8705: LD_ADDR_VAR 0 3
8709: PUSH
8710: LD_INT 13
8712: PUSH
8713: LD_INT 14
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: ST_TO_ADDR
8720: GO 9203
8722: LD_INT 27
8724: DOUBLE
8725: EQUAL
8726: IFTRUE 8730
8728: GO 8748
8730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8731: LD_ADDR_VAR 0 3
8735: PUSH
8736: LD_INT 13
8738: PUSH
8739: LD_INT 14
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: ST_TO_ADDR
8746: GO 9203
8748: LD_INT 92
8750: DOUBLE
8751: EQUAL
8752: IFTRUE 8756
8754: GO 8782
8756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8757: LD_ADDR_VAR 0 3
8761: PUSH
8762: LD_INT 11
8764: PUSH
8765: LD_INT 12
8767: PUSH
8768: LD_INT 13
8770: PUSH
8771: LD_INT 14
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: ST_TO_ADDR
8780: GO 9203
8782: LD_INT 28
8784: DOUBLE
8785: EQUAL
8786: IFTRUE 8790
8788: GO 8808
8790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8791: LD_ADDR_VAR 0 3
8795: PUSH
8796: LD_INT 13
8798: PUSH
8799: LD_INT 14
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: ST_TO_ADDR
8806: GO 9203
8808: LD_INT 29
8810: DOUBLE
8811: EQUAL
8812: IFTRUE 8816
8814: GO 8834
8816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8817: LD_ADDR_VAR 0 3
8821: PUSH
8822: LD_INT 13
8824: PUSH
8825: LD_INT 14
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: ST_TO_ADDR
8832: GO 9203
8834: LD_INT 31
8836: DOUBLE
8837: EQUAL
8838: IFTRUE 8842
8840: GO 8860
8842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8843: LD_ADDR_VAR 0 3
8847: PUSH
8848: LD_INT 13
8850: PUSH
8851: LD_INT 14
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: ST_TO_ADDR
8858: GO 9203
8860: LD_INT 26
8862: DOUBLE
8863: EQUAL
8864: IFTRUE 8868
8866: GO 8886
8868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8869: LD_ADDR_VAR 0 3
8873: PUSH
8874: LD_INT 13
8876: PUSH
8877: LD_INT 14
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: ST_TO_ADDR
8884: GO 9203
8886: LD_INT 42
8888: DOUBLE
8889: EQUAL
8890: IFTRUE 8894
8892: GO 8920
8894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8895: LD_ADDR_VAR 0 3
8899: PUSH
8900: LD_INT 21
8902: PUSH
8903: LD_INT 22
8905: PUSH
8906: LD_INT 23
8908: PUSH
8909: LD_INT 24
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: ST_TO_ADDR
8918: GO 9203
8920: LD_INT 43
8922: DOUBLE
8923: EQUAL
8924: IFTRUE 8928
8926: GO 8954
8928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8929: LD_ADDR_VAR 0 3
8933: PUSH
8934: LD_INT 21
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 23
8942: PUSH
8943: LD_INT 24
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: ST_TO_ADDR
8952: GO 9203
8954: LD_INT 44
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8988
8962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8963: LD_ADDR_VAR 0 3
8967: PUSH
8968: LD_INT 21
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 23
8976: PUSH
8977: LD_INT 24
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: ST_TO_ADDR
8986: GO 9203
8988: LD_INT 45
8990: DOUBLE
8991: EQUAL
8992: IFTRUE 8996
8994: GO 9022
8996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8997: LD_ADDR_VAR 0 3
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 22
9007: PUSH
9008: LD_INT 23
9010: PUSH
9011: LD_INT 24
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: ST_TO_ADDR
9020: GO 9203
9022: LD_INT 49
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9056
9030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9031: LD_ADDR_VAR 0 3
9035: PUSH
9036: LD_INT 21
9038: PUSH
9039: LD_INT 22
9041: PUSH
9042: LD_INT 23
9044: PUSH
9045: LD_INT 24
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: ST_TO_ADDR
9054: GO 9203
9056: LD_INT 51
9058: DOUBLE
9059: EQUAL
9060: IFTRUE 9064
9062: GO 9090
9064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
9065: LD_ADDR_VAR 0 3
9069: PUSH
9070: LD_INT 21
9072: PUSH
9073: LD_INT 22
9075: PUSH
9076: LD_INT 23
9078: PUSH
9079: LD_INT 24
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
9088: GO 9203
9090: LD_INT 52
9092: DOUBLE
9093: EQUAL
9094: IFTRUE 9098
9096: GO 9124
9098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9099: LD_ADDR_VAR 0 3
9103: PUSH
9104: LD_INT 21
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_INT 23
9112: PUSH
9113: LD_INT 24
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: ST_TO_ADDR
9122: GO 9203
9124: LD_INT 53
9126: DOUBLE
9127: EQUAL
9128: IFTRUE 9132
9130: GO 9150
9132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: LD_INT 23
9140: PUSH
9141: LD_INT 24
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: ST_TO_ADDR
9148: GO 9203
9150: LD_INT 46
9152: DOUBLE
9153: EQUAL
9154: IFTRUE 9158
9156: GO 9176
9158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9159: LD_ADDR_VAR 0 3
9163: PUSH
9164: LD_INT 23
9166: PUSH
9167: LD_INT 24
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: ST_TO_ADDR
9174: GO 9203
9176: LD_INT 47
9178: DOUBLE
9179: EQUAL
9180: IFTRUE 9184
9182: GO 9202
9184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9185: LD_ADDR_VAR 0 3
9189: PUSH
9190: LD_INT 23
9192: PUSH
9193: LD_INT 24
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: ST_TO_ADDR
9200: GO 9203
9202: POP
// result := ( chassis in result ) ;
9203: LD_ADDR_VAR 0 3
9207: PUSH
9208: LD_VAR 0 1
9212: PUSH
9213: LD_VAR 0 3
9217: IN
9218: ST_TO_ADDR
// end ;
9219: LD_VAR 0 3
9223: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9224: LD_INT 0
9226: PPUSH
9227: PPUSH
9228: PPUSH
9229: PPUSH
9230: PPUSH
9231: PPUSH
9232: PPUSH
// result := array ;
9233: LD_ADDR_VAR 0 5
9237: PUSH
9238: LD_VAR 0 1
9242: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9243: LD_VAR 0 1
9247: NOT
9248: PUSH
9249: LD_VAR 0 2
9253: NOT
9254: OR
9255: PUSH
9256: LD_VAR 0 3
9260: NOT
9261: OR
9262: PUSH
9263: LD_VAR 0 2
9267: PUSH
9268: LD_VAR 0 1
9272: GREATER
9273: OR
9274: PUSH
9275: LD_VAR 0 3
9279: PUSH
9280: LD_VAR 0 1
9284: GREATER
9285: OR
9286: IFFALSE 9290
// exit ;
9288: GO 9586
// if direction then
9290: LD_VAR 0 4
9294: IFFALSE 9358
// begin d := 1 ;
9296: LD_ADDR_VAR 0 9
9300: PUSH
9301: LD_INT 1
9303: ST_TO_ADDR
// if i_from > i_to then
9304: LD_VAR 0 2
9308: PUSH
9309: LD_VAR 0 3
9313: GREATER
9314: IFFALSE 9340
// length := ( array - i_from ) + i_to else
9316: LD_ADDR_VAR 0 11
9320: PUSH
9321: LD_VAR 0 1
9325: PUSH
9326: LD_VAR 0 2
9330: MINUS
9331: PUSH
9332: LD_VAR 0 3
9336: PLUS
9337: ST_TO_ADDR
9338: GO 9356
// length := i_to - i_from ;
9340: LD_ADDR_VAR 0 11
9344: PUSH
9345: LD_VAR 0 3
9349: PUSH
9350: LD_VAR 0 2
9354: MINUS
9355: ST_TO_ADDR
// end else
9356: GO 9419
// begin d := - 1 ;
9358: LD_ADDR_VAR 0 9
9362: PUSH
9363: LD_INT 1
9365: NEG
9366: ST_TO_ADDR
// if i_from > i_to then
9367: LD_VAR 0 2
9371: PUSH
9372: LD_VAR 0 3
9376: GREATER
9377: IFFALSE 9397
// length := i_from - i_to else
9379: LD_ADDR_VAR 0 11
9383: PUSH
9384: LD_VAR 0 2
9388: PUSH
9389: LD_VAR 0 3
9393: MINUS
9394: ST_TO_ADDR
9395: GO 9419
// length := ( array - i_to ) + i_from ;
9397: LD_ADDR_VAR 0 11
9401: PUSH
9402: LD_VAR 0 1
9406: PUSH
9407: LD_VAR 0 3
9411: MINUS
9412: PUSH
9413: LD_VAR 0 2
9417: PLUS
9418: ST_TO_ADDR
// end ; if not length then
9419: LD_VAR 0 11
9423: NOT
9424: IFFALSE 9428
// exit ;
9426: GO 9586
// tmp := array ;
9428: LD_ADDR_VAR 0 10
9432: PUSH
9433: LD_VAR 0 1
9437: ST_TO_ADDR
// for i = 1 to length do
9438: LD_ADDR_VAR 0 6
9442: PUSH
9443: DOUBLE
9444: LD_INT 1
9446: DEC
9447: ST_TO_ADDR
9448: LD_VAR 0 11
9452: PUSH
9453: FOR_TO
9454: IFFALSE 9574
// begin for j = 1 to array do
9456: LD_ADDR_VAR 0 7
9460: PUSH
9461: DOUBLE
9462: LD_INT 1
9464: DEC
9465: ST_TO_ADDR
9466: LD_VAR 0 1
9470: PUSH
9471: FOR_TO
9472: IFFALSE 9560
// begin k := j + d ;
9474: LD_ADDR_VAR 0 8
9478: PUSH
9479: LD_VAR 0 7
9483: PUSH
9484: LD_VAR 0 9
9488: PLUS
9489: ST_TO_ADDR
// if k > array then
9490: LD_VAR 0 8
9494: PUSH
9495: LD_VAR 0 1
9499: GREATER
9500: IFFALSE 9510
// k := 1 ;
9502: LD_ADDR_VAR 0 8
9506: PUSH
9507: LD_INT 1
9509: ST_TO_ADDR
// if not k then
9510: LD_VAR 0 8
9514: NOT
9515: IFFALSE 9527
// k := array ;
9517: LD_ADDR_VAR 0 8
9521: PUSH
9522: LD_VAR 0 1
9526: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9527: LD_ADDR_VAR 0 10
9531: PUSH
9532: LD_VAR 0 10
9536: PPUSH
9537: LD_VAR 0 8
9541: PPUSH
9542: LD_VAR 0 1
9546: PUSH
9547: LD_VAR 0 7
9551: ARRAY
9552: PPUSH
9553: CALL_OW 1
9557: ST_TO_ADDR
// end ;
9558: GO 9471
9560: POP
9561: POP
// array := tmp ;
9562: LD_ADDR_VAR 0 1
9566: PUSH
9567: LD_VAR 0 10
9571: ST_TO_ADDR
// end ;
9572: GO 9453
9574: POP
9575: POP
// result := array ;
9576: LD_ADDR_VAR 0 5
9580: PUSH
9581: LD_VAR 0 1
9585: ST_TO_ADDR
// end ;
9586: LD_VAR 0 5
9590: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9591: LD_INT 0
9593: PPUSH
9594: PPUSH
// result := 0 ;
9595: LD_ADDR_VAR 0 3
9599: PUSH
9600: LD_INT 0
9602: ST_TO_ADDR
// if not array or not value in array then
9603: LD_VAR 0 1
9607: NOT
9608: PUSH
9609: LD_VAR 0 2
9613: PUSH
9614: LD_VAR 0 1
9618: IN
9619: NOT
9620: OR
9621: IFFALSE 9625
// exit ;
9623: GO 9679
// for i = 1 to array do
9625: LD_ADDR_VAR 0 4
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_VAR 0 1
9639: PUSH
9640: FOR_TO
9641: IFFALSE 9677
// if value = array [ i ] then
9643: LD_VAR 0 2
9647: PUSH
9648: LD_VAR 0 1
9652: PUSH
9653: LD_VAR 0 4
9657: ARRAY
9658: EQUAL
9659: IFFALSE 9675
// begin result := i ;
9661: LD_ADDR_VAR 0 3
9665: PUSH
9666: LD_VAR 0 4
9670: ST_TO_ADDR
// exit ;
9671: POP
9672: POP
9673: GO 9679
// end ;
9675: GO 9640
9677: POP
9678: POP
// end ;
9679: LD_VAR 0 3
9683: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9684: LD_INT 0
9686: PPUSH
// vc_chassis := chassis ;
9687: LD_ADDR_OWVAR 37
9691: PUSH
9692: LD_VAR 0 1
9696: ST_TO_ADDR
// vc_engine := engine ;
9697: LD_ADDR_OWVAR 39
9701: PUSH
9702: LD_VAR 0 2
9706: ST_TO_ADDR
// vc_control := control ;
9707: LD_ADDR_OWVAR 38
9711: PUSH
9712: LD_VAR 0 3
9716: ST_TO_ADDR
// vc_weapon := weapon ;
9717: LD_ADDR_OWVAR 40
9721: PUSH
9722: LD_VAR 0 4
9726: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9727: LD_ADDR_OWVAR 41
9731: PUSH
9732: LD_VAR 0 5
9736: ST_TO_ADDR
// end ;
9737: LD_VAR 0 6
9741: RET
// export function WantPlant ( unit ) ; var task ; begin
9742: LD_INT 0
9744: PPUSH
9745: PPUSH
// result := false ;
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: LD_INT 0
9753: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9754: LD_ADDR_VAR 0 3
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 437
9768: ST_TO_ADDR
// if task then
9769: LD_VAR 0 3
9773: IFFALSE 9801
// if task [ 1 ] [ 1 ] = p then
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 1
9782: ARRAY
9783: PUSH
9784: LD_INT 1
9786: ARRAY
9787: PUSH
9788: LD_STRING p
9790: EQUAL
9791: IFFALSE 9801
// result := true ;
9793: LD_ADDR_VAR 0 2
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// end ;
9801: LD_VAR 0 2
9805: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9806: LD_INT 0
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
// if pos < 1 then
9812: LD_VAR 0 2
9816: PUSH
9817: LD_INT 1
9819: LESS
9820: IFFALSE 9824
// exit ;
9822: GO 10127
// if pos = 1 then
9824: LD_VAR 0 2
9828: PUSH
9829: LD_INT 1
9831: EQUAL
9832: IFFALSE 9865
// result := Replace ( arr , pos [ 1 ] , value ) else
9834: LD_ADDR_VAR 0 4
9838: PUSH
9839: LD_VAR 0 1
9843: PPUSH
9844: LD_VAR 0 2
9848: PUSH
9849: LD_INT 1
9851: ARRAY
9852: PPUSH
9853: LD_VAR 0 3
9857: PPUSH
9858: CALL_OW 1
9862: ST_TO_ADDR
9863: GO 10127
// begin tmp := arr ;
9865: LD_ADDR_VAR 0 6
9869: PUSH
9870: LD_VAR 0 1
9874: ST_TO_ADDR
// s_arr := [ tmp ] ;
9875: LD_ADDR_VAR 0 7
9879: PUSH
9880: LD_VAR 0 6
9884: PUSH
9885: EMPTY
9886: LIST
9887: ST_TO_ADDR
// for i = 1 to pos - 1 do
9888: LD_ADDR_VAR 0 5
9892: PUSH
9893: DOUBLE
9894: LD_INT 1
9896: DEC
9897: ST_TO_ADDR
9898: LD_VAR 0 2
9902: PUSH
9903: LD_INT 1
9905: MINUS
9906: PUSH
9907: FOR_TO
9908: IFFALSE 9953
// begin tmp := tmp [ pos [ i ] ] ;
9910: LD_ADDR_VAR 0 6
9914: PUSH
9915: LD_VAR 0 6
9919: PUSH
9920: LD_VAR 0 2
9924: PUSH
9925: LD_VAR 0 5
9929: ARRAY
9930: ARRAY
9931: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9932: LD_ADDR_VAR 0 7
9936: PUSH
9937: LD_VAR 0 7
9941: PUSH
9942: LD_VAR 0 6
9946: PUSH
9947: EMPTY
9948: LIST
9949: ADD
9950: ST_TO_ADDR
// end ;
9951: GO 9907
9953: POP
9954: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9955: LD_ADDR_VAR 0 6
9959: PUSH
9960: LD_VAR 0 6
9964: PPUSH
9965: LD_VAR 0 2
9969: PUSH
9970: LD_VAR 0 2
9974: ARRAY
9975: PPUSH
9976: LD_VAR 0 3
9980: PPUSH
9981: CALL_OW 1
9985: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9986: LD_ADDR_VAR 0 7
9990: PUSH
9991: LD_VAR 0 7
9995: PPUSH
9996: LD_VAR 0 7
10000: PPUSH
10001: LD_VAR 0 6
10005: PPUSH
10006: CALL_OW 1
10010: ST_TO_ADDR
// for i = s_arr downto 2 do
10011: LD_ADDR_VAR 0 5
10015: PUSH
10016: DOUBLE
10017: LD_VAR 0 7
10021: INC
10022: ST_TO_ADDR
10023: LD_INT 2
10025: PUSH
10026: FOR_DOWNTO
10027: IFFALSE 10111
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
10029: LD_ADDR_VAR 0 6
10033: PUSH
10034: LD_VAR 0 7
10038: PUSH
10039: LD_VAR 0 5
10043: PUSH
10044: LD_INT 1
10046: MINUS
10047: ARRAY
10048: PPUSH
10049: LD_VAR 0 2
10053: PUSH
10054: LD_VAR 0 5
10058: PUSH
10059: LD_INT 1
10061: MINUS
10062: ARRAY
10063: PPUSH
10064: LD_VAR 0 7
10068: PUSH
10069: LD_VAR 0 5
10073: ARRAY
10074: PPUSH
10075: CALL_OW 1
10079: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
10080: LD_ADDR_VAR 0 7
10084: PUSH
10085: LD_VAR 0 7
10089: PPUSH
10090: LD_VAR 0 5
10094: PUSH
10095: LD_INT 1
10097: MINUS
10098: PPUSH
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL_OW 1
10108: ST_TO_ADDR
// end ;
10109: GO 10026
10111: POP
10112: POP
// result := s_arr [ 1 ] ;
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_VAR 0 7
10122: PUSH
10123: LD_INT 1
10125: ARRAY
10126: ST_TO_ADDR
// end ; end ;
10127: LD_VAR 0 4
10131: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10132: LD_INT 0
10134: PPUSH
10135: PPUSH
// if not list then
10136: LD_VAR 0 1
10140: NOT
10141: IFFALSE 10145
// exit ;
10143: GO 10236
// i := list [ pos1 ] ;
10145: LD_ADDR_VAR 0 5
10149: PUSH
10150: LD_VAR 0 1
10154: PUSH
10155: LD_VAR 0 2
10159: ARRAY
10160: ST_TO_ADDR
// if not i then
10161: LD_VAR 0 5
10165: NOT
10166: IFFALSE 10170
// exit ;
10168: GO 10236
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10170: LD_ADDR_VAR 0 1
10174: PUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: LD_VAR 0 2
10184: PPUSH
10185: LD_VAR 0 1
10189: PUSH
10190: LD_VAR 0 3
10194: ARRAY
10195: PPUSH
10196: CALL_OW 1
10200: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10201: LD_ADDR_VAR 0 1
10205: PUSH
10206: LD_VAR 0 1
10210: PPUSH
10211: LD_VAR 0 3
10215: PPUSH
10216: LD_VAR 0 5
10220: PPUSH
10221: CALL_OW 1
10225: ST_TO_ADDR
// result := list ;
10226: LD_ADDR_VAR 0 4
10230: PUSH
10231: LD_VAR 0 1
10235: ST_TO_ADDR
// end ;
10236: LD_VAR 0 4
10240: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10241: LD_INT 0
10243: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10244: LD_ADDR_VAR 0 5
10248: PUSH
10249: LD_VAR 0 1
10253: PPUSH
10254: CALL_OW 250
10258: PPUSH
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 251
10268: PPUSH
10269: LD_VAR 0 2
10273: PPUSH
10274: LD_VAR 0 3
10278: PPUSH
10279: LD_VAR 0 4
10283: PPUSH
10284: CALL 10294 0 5
10288: ST_TO_ADDR
// end ;
10289: LD_VAR 0 5
10293: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10294: LD_INT 0
10296: PPUSH
10297: PPUSH
10298: PPUSH
10299: PPUSH
// if not list then
10300: LD_VAR 0 3
10304: NOT
10305: IFFALSE 10309
// exit ;
10307: GO 10697
// result := [ ] ;
10309: LD_ADDR_VAR 0 6
10313: PUSH
10314: EMPTY
10315: ST_TO_ADDR
// for i in list do
10316: LD_ADDR_VAR 0 7
10320: PUSH
10321: LD_VAR 0 3
10325: PUSH
10326: FOR_IN
10327: IFFALSE 10529
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10329: LD_ADDR_VAR 0 9
10333: PUSH
10334: LD_VAR 0 7
10338: PPUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: LD_VAR 0 2
10348: PPUSH
10349: CALL_OW 297
10353: ST_TO_ADDR
// if not result then
10354: LD_VAR 0 6
10358: NOT
10359: IFFALSE 10385
// result := [ [ i , tmp ] ] else
10361: LD_ADDR_VAR 0 6
10365: PUSH
10366: LD_VAR 0 7
10370: PUSH
10371: LD_VAR 0 9
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: EMPTY
10381: LIST
10382: ST_TO_ADDR
10383: GO 10527
// begin if result [ result ] [ 2 ] < tmp then
10385: LD_VAR 0 6
10389: PUSH
10390: LD_VAR 0 6
10394: ARRAY
10395: PUSH
10396: LD_INT 2
10398: ARRAY
10399: PUSH
10400: LD_VAR 0 9
10404: LESS
10405: IFFALSE 10447
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10407: LD_ADDR_VAR 0 6
10411: PUSH
10412: LD_VAR 0 6
10416: PPUSH
10417: LD_VAR 0 6
10421: PUSH
10422: LD_INT 1
10424: PLUS
10425: PPUSH
10426: LD_VAR 0 7
10430: PUSH
10431: LD_VAR 0 9
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PPUSH
10440: CALL_OW 2
10444: ST_TO_ADDR
10445: GO 10527
// for j = 1 to result do
10447: LD_ADDR_VAR 0 8
10451: PUSH
10452: DOUBLE
10453: LD_INT 1
10455: DEC
10456: ST_TO_ADDR
10457: LD_VAR 0 6
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10525
// begin if tmp < result [ j ] [ 2 ] then
10465: LD_VAR 0 9
10469: PUSH
10470: LD_VAR 0 6
10474: PUSH
10475: LD_VAR 0 8
10479: ARRAY
10480: PUSH
10481: LD_INT 2
10483: ARRAY
10484: LESS
10485: IFFALSE 10523
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10487: LD_ADDR_VAR 0 6
10491: PUSH
10492: LD_VAR 0 6
10496: PPUSH
10497: LD_VAR 0 8
10501: PPUSH
10502: LD_VAR 0 7
10506: PUSH
10507: LD_VAR 0 9
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 2
10520: ST_TO_ADDR
// break ;
10521: GO 10525
// end ; end ;
10523: GO 10462
10525: POP
10526: POP
// end ; end ;
10527: GO 10326
10529: POP
10530: POP
// if result and not asc then
10531: LD_VAR 0 6
10535: PUSH
10536: LD_VAR 0 4
10540: NOT
10541: AND
10542: IFFALSE 10617
// begin tmp := result ;
10544: LD_ADDR_VAR 0 9
10548: PUSH
10549: LD_VAR 0 6
10553: ST_TO_ADDR
// for i = tmp downto 1 do
10554: LD_ADDR_VAR 0 7
10558: PUSH
10559: DOUBLE
10560: LD_VAR 0 9
10564: INC
10565: ST_TO_ADDR
10566: LD_INT 1
10568: PUSH
10569: FOR_DOWNTO
10570: IFFALSE 10615
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10572: LD_ADDR_VAR 0 6
10576: PUSH
10577: LD_VAR 0 6
10581: PPUSH
10582: LD_VAR 0 9
10586: PUSH
10587: LD_VAR 0 7
10591: MINUS
10592: PUSH
10593: LD_INT 1
10595: PLUS
10596: PPUSH
10597: LD_VAR 0 9
10601: PUSH
10602: LD_VAR 0 7
10606: ARRAY
10607: PPUSH
10608: CALL_OW 1
10612: ST_TO_ADDR
10613: GO 10569
10615: POP
10616: POP
// end ; tmp := [ ] ;
10617: LD_ADDR_VAR 0 9
10621: PUSH
10622: EMPTY
10623: ST_TO_ADDR
// if mode then
10624: LD_VAR 0 5
10628: IFFALSE 10697
// begin for i = 1 to result do
10630: LD_ADDR_VAR 0 7
10634: PUSH
10635: DOUBLE
10636: LD_INT 1
10638: DEC
10639: ST_TO_ADDR
10640: LD_VAR 0 6
10644: PUSH
10645: FOR_TO
10646: IFFALSE 10685
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10648: LD_ADDR_VAR 0 9
10652: PUSH
10653: LD_VAR 0 9
10657: PPUSH
10658: LD_VAR 0 7
10662: PPUSH
10663: LD_VAR 0 6
10667: PUSH
10668: LD_VAR 0 7
10672: ARRAY
10673: PUSH
10674: LD_INT 1
10676: ARRAY
10677: PPUSH
10678: CALL_OW 1
10682: ST_TO_ADDR
10683: GO 10645
10685: POP
10686: POP
// result := tmp ;
10687: LD_ADDR_VAR 0 6
10691: PUSH
10692: LD_VAR 0 9
10696: ST_TO_ADDR
// end ; end ;
10697: LD_VAR 0 6
10701: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10702: LD_INT 0
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
10708: PPUSH
10709: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10710: LD_ADDR_VAR 0 5
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: LD_INT 0
10720: PUSH
10721: LD_INT 0
10723: PUSH
10724: EMPTY
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: ST_TO_ADDR
// if not x or not y then
10732: LD_VAR 0 2
10736: NOT
10737: PUSH
10738: LD_VAR 0 3
10742: NOT
10743: OR
10744: IFFALSE 10748
// exit ;
10746: GO 12398
// if not range then
10748: LD_VAR 0 4
10752: NOT
10753: IFFALSE 10763
// range := 10 ;
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 10
10762: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10763: LD_ADDR_VAR 0 8
10767: PUSH
10768: LD_INT 81
10770: PUSH
10771: LD_VAR 0 1
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 92
10782: PUSH
10783: LD_VAR 0 2
10787: PUSH
10788: LD_VAR 0 3
10792: PUSH
10793: LD_VAR 0 4
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: LD_INT 21
10809: PUSH
10810: LD_INT 3
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: ST_TO_ADDR
// if not tmp then
10831: LD_VAR 0 8
10835: NOT
10836: IFFALSE 10840
// exit ;
10838: GO 12398
// for i in tmp do
10840: LD_ADDR_VAR 0 6
10844: PUSH
10845: LD_VAR 0 8
10849: PUSH
10850: FOR_IN
10851: IFFALSE 12373
// begin points := [ 0 , 0 , 0 ] ;
10853: LD_ADDR_VAR 0 9
10857: PUSH
10858: LD_INT 0
10860: PUSH
10861: LD_INT 0
10863: PUSH
10864: LD_INT 0
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
// bpoints := 1 ;
10872: LD_ADDR_VAR 0 10
10876: PUSH
10877: LD_INT 1
10879: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10880: LD_VAR 0 6
10884: PPUSH
10885: CALL_OW 247
10889: PUSH
10890: LD_INT 1
10892: DOUBLE
10893: EQUAL
10894: IFTRUE 10898
10896: GO 11476
10898: POP
// begin if GetClass ( i ) = 1 then
10899: LD_VAR 0 6
10903: PPUSH
10904: CALL_OW 257
10908: PUSH
10909: LD_INT 1
10911: EQUAL
10912: IFFALSE 10933
// points := [ 10 , 5 , 3 ] ;
10914: LD_ADDR_VAR 0 9
10918: PUSH
10919: LD_INT 10
10921: PUSH
10922: LD_INT 5
10924: PUSH
10925: LD_INT 3
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10933: LD_VAR 0 6
10937: PPUSH
10938: CALL_OW 257
10942: PUSH
10943: LD_INT 2
10945: PUSH
10946: LD_INT 3
10948: PUSH
10949: LD_INT 4
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: LIST
10956: IN
10957: IFFALSE 10978
// points := [ 3 , 2 , 1 ] ;
10959: LD_ADDR_VAR 0 9
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: LD_INT 2
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10978: LD_VAR 0 6
10982: PPUSH
10983: CALL_OW 257
10987: PUSH
10988: LD_INT 5
10990: EQUAL
10991: IFFALSE 11012
// points := [ 130 , 5 , 2 ] ;
10993: LD_ADDR_VAR 0 9
10997: PUSH
10998: LD_INT 130
11000: PUSH
11001: LD_INT 5
11003: PUSH
11004: LD_INT 2
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11012: LD_VAR 0 6
11016: PPUSH
11017: CALL_OW 257
11021: PUSH
11022: LD_INT 8
11024: EQUAL
11025: IFFALSE 11046
// points := [ 35 , 35 , 30 ] ;
11027: LD_ADDR_VAR 0 9
11031: PUSH
11032: LD_INT 35
11034: PUSH
11035: LD_INT 35
11037: PUSH
11038: LD_INT 30
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11046: LD_VAR 0 6
11050: PPUSH
11051: CALL_OW 257
11055: PUSH
11056: LD_INT 9
11058: EQUAL
11059: IFFALSE 11080
// points := [ 20 , 55 , 40 ] ;
11061: LD_ADDR_VAR 0 9
11065: PUSH
11066: LD_INT 20
11068: PUSH
11069: LD_INT 55
11071: PUSH
11072: LD_INT 40
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11080: LD_VAR 0 6
11084: PPUSH
11085: CALL_OW 257
11089: PUSH
11090: LD_INT 12
11092: PUSH
11093: LD_INT 16
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: IN
11100: IFFALSE 11121
// points := [ 5 , 3 , 2 ] ;
11102: LD_ADDR_VAR 0 9
11106: PUSH
11107: LD_INT 5
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11121: LD_VAR 0 6
11125: PPUSH
11126: CALL_OW 257
11130: PUSH
11131: LD_INT 17
11133: EQUAL
11134: IFFALSE 11155
// points := [ 100 , 50 , 75 ] ;
11136: LD_ADDR_VAR 0 9
11140: PUSH
11141: LD_INT 100
11143: PUSH
11144: LD_INT 50
11146: PUSH
11147: LD_INT 75
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11155: LD_VAR 0 6
11159: PPUSH
11160: CALL_OW 257
11164: PUSH
11165: LD_INT 15
11167: EQUAL
11168: IFFALSE 11189
// points := [ 10 , 5 , 3 ] ;
11170: LD_ADDR_VAR 0 9
11174: PUSH
11175: LD_INT 10
11177: PUSH
11178: LD_INT 5
11180: PUSH
11181: LD_INT 3
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11189: LD_VAR 0 6
11193: PPUSH
11194: CALL_OW 257
11198: PUSH
11199: LD_INT 14
11201: EQUAL
11202: IFFALSE 11223
// points := [ 10 , 0 , 0 ] ;
11204: LD_ADDR_VAR 0 9
11208: PUSH
11209: LD_INT 10
11211: PUSH
11212: LD_INT 0
11214: PUSH
11215: LD_INT 0
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11223: LD_VAR 0 6
11227: PPUSH
11228: CALL_OW 257
11232: PUSH
11233: LD_INT 11
11235: EQUAL
11236: IFFALSE 11257
// points := [ 30 , 10 , 5 ] ;
11238: LD_ADDR_VAR 0 9
11242: PUSH
11243: LD_INT 30
11245: PUSH
11246: LD_INT 10
11248: PUSH
11249: LD_INT 5
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11257: LD_VAR 0 1
11261: PPUSH
11262: LD_INT 5
11264: PPUSH
11265: CALL_OW 321
11269: PUSH
11270: LD_INT 2
11272: EQUAL
11273: IFFALSE 11290
// bpoints := bpoints * 1.8 ;
11275: LD_ADDR_VAR 0 10
11279: PUSH
11280: LD_VAR 0 10
11284: PUSH
11285: LD_REAL  1.80000000000000E+0000
11288: MUL
11289: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11290: LD_VAR 0 6
11294: PPUSH
11295: CALL_OW 257
11299: PUSH
11300: LD_INT 1
11302: PUSH
11303: LD_INT 2
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: LD_INT 4
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: IN
11318: PUSH
11319: LD_VAR 0 1
11323: PPUSH
11324: LD_INT 51
11326: PPUSH
11327: CALL_OW 321
11331: PUSH
11332: LD_INT 2
11334: EQUAL
11335: AND
11336: IFFALSE 11353
// bpoints := bpoints * 1.2 ;
11338: LD_ADDR_VAR 0 10
11342: PUSH
11343: LD_VAR 0 10
11347: PUSH
11348: LD_REAL  1.20000000000000E+0000
11351: MUL
11352: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 257
11362: PUSH
11363: LD_INT 5
11365: PUSH
11366: LD_INT 7
11368: PUSH
11369: LD_INT 9
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: IN
11377: PUSH
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 52
11385: PPUSH
11386: CALL_OW 321
11390: PUSH
11391: LD_INT 2
11393: EQUAL
11394: AND
11395: IFFALSE 11412
// bpoints := bpoints * 1.5 ;
11397: LD_ADDR_VAR 0 10
11401: PUSH
11402: LD_VAR 0 10
11406: PUSH
11407: LD_REAL  1.50000000000000E+0000
11410: MUL
11411: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 66
11419: PPUSH
11420: CALL_OW 321
11424: PUSH
11425: LD_INT 2
11427: EQUAL
11428: IFFALSE 11445
// bpoints := bpoints * 1.1 ;
11430: LD_ADDR_VAR 0 10
11434: PUSH
11435: LD_VAR 0 10
11439: PUSH
11440: LD_REAL  1.10000000000000E+0000
11443: MUL
11444: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11445: LD_ADDR_VAR 0 10
11449: PUSH
11450: LD_VAR 0 10
11454: PUSH
11455: LD_VAR 0 6
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 259
11467: PUSH
11468: LD_REAL  1.15000000000000E+0000
11471: MUL
11472: MUL
11473: ST_TO_ADDR
// end ; unit_vehicle :
11474: GO 12302
11476: LD_INT 2
11478: DOUBLE
11479: EQUAL
11480: IFTRUE 11484
11482: GO 12290
11484: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11485: LD_VAR 0 6
11489: PPUSH
11490: CALL_OW 264
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: LD_INT 42
11500: PUSH
11501: LD_INT 24
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: IN
11509: IFFALSE 11530
// points := [ 25 , 5 , 3 ] ;
11511: LD_ADDR_VAR 0 9
11515: PUSH
11516: LD_INT 25
11518: PUSH
11519: LD_INT 5
11521: PUSH
11522: LD_INT 3
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11530: LD_VAR 0 6
11534: PPUSH
11535: CALL_OW 264
11539: PUSH
11540: LD_INT 4
11542: PUSH
11543: LD_INT 43
11545: PUSH
11546: LD_INT 25
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: IN
11554: IFFALSE 11575
// points := [ 40 , 15 , 5 ] ;
11556: LD_ADDR_VAR 0 9
11560: PUSH
11561: LD_INT 40
11563: PUSH
11564: LD_INT 15
11566: PUSH
11567: LD_INT 5
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11575: LD_VAR 0 6
11579: PPUSH
11580: CALL_OW 264
11584: PUSH
11585: LD_INT 3
11587: PUSH
11588: LD_INT 23
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: IN
11595: IFFALSE 11616
// points := [ 7 , 25 , 8 ] ;
11597: LD_ADDR_VAR 0 9
11601: PUSH
11602: LD_INT 7
11604: PUSH
11605: LD_INT 25
11607: PUSH
11608: LD_INT 8
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11616: LD_VAR 0 6
11620: PPUSH
11621: CALL_OW 264
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: LD_INT 27
11631: PUSH
11632: LD_INT 44
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: IN
11640: IFFALSE 11661
// points := [ 14 , 50 , 16 ] ;
11642: LD_ADDR_VAR 0 9
11646: PUSH
11647: LD_INT 14
11649: PUSH
11650: LD_INT 50
11652: PUSH
11653: LD_INT 16
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11661: LD_VAR 0 6
11665: PPUSH
11666: CALL_OW 264
11670: PUSH
11671: LD_INT 6
11673: PUSH
11674: LD_INT 46
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: IN
11681: IFFALSE 11702
// points := [ 32 , 120 , 70 ] ;
11683: LD_ADDR_VAR 0 9
11687: PUSH
11688: LD_INT 32
11690: PUSH
11691: LD_INT 120
11693: PUSH
11694: LD_INT 70
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11702: LD_VAR 0 6
11706: PPUSH
11707: CALL_OW 264
11711: PUSH
11712: LD_INT 7
11714: PUSH
11715: LD_INT 28
11717: PUSH
11718: LD_INT 45
11720: PUSH
11721: LD_INT 92
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: IN
11730: IFFALSE 11751
// points := [ 35 , 20 , 45 ] ;
11732: LD_ADDR_VAR 0 9
11736: PUSH
11737: LD_INT 35
11739: PUSH
11740: LD_INT 20
11742: PUSH
11743: LD_INT 45
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11751: LD_VAR 0 6
11755: PPUSH
11756: CALL_OW 264
11760: PUSH
11761: LD_INT 47
11763: PUSH
11764: EMPTY
11765: LIST
11766: IN
11767: IFFALSE 11788
// points := [ 67 , 45 , 75 ] ;
11769: LD_ADDR_VAR 0 9
11773: PUSH
11774: LD_INT 67
11776: PUSH
11777: LD_INT 45
11779: PUSH
11780: LD_INT 75
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: LIST
11787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11788: LD_VAR 0 6
11792: PPUSH
11793: CALL_OW 264
11797: PUSH
11798: LD_INT 26
11800: PUSH
11801: EMPTY
11802: LIST
11803: IN
11804: IFFALSE 11825
// points := [ 120 , 30 , 80 ] ;
11806: LD_ADDR_VAR 0 9
11810: PUSH
11811: LD_INT 120
11813: PUSH
11814: LD_INT 30
11816: PUSH
11817: LD_INT 80
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: LIST
11824: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11825: LD_VAR 0 6
11829: PPUSH
11830: CALL_OW 264
11834: PUSH
11835: LD_INT 22
11837: PUSH
11838: EMPTY
11839: LIST
11840: IN
11841: IFFALSE 11862
// points := [ 40 , 1 , 1 ] ;
11843: LD_ADDR_VAR 0 9
11847: PUSH
11848: LD_INT 40
11850: PUSH
11851: LD_INT 1
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11862: LD_VAR 0 6
11866: PPUSH
11867: CALL_OW 264
11871: PUSH
11872: LD_INT 29
11874: PUSH
11875: EMPTY
11876: LIST
11877: IN
11878: IFFALSE 11899
// points := [ 70 , 200 , 400 ] ;
11880: LD_ADDR_VAR 0 9
11884: PUSH
11885: LD_INT 70
11887: PUSH
11888: LD_INT 200
11890: PUSH
11891: LD_INT 400
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11899: LD_VAR 0 6
11903: PPUSH
11904: CALL_OW 264
11908: PUSH
11909: LD_INT 14
11911: PUSH
11912: LD_INT 53
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: IN
11919: IFFALSE 11940
// points := [ 40 , 10 , 20 ] ;
11921: LD_ADDR_VAR 0 9
11925: PUSH
11926: LD_INT 40
11928: PUSH
11929: LD_INT 10
11931: PUSH
11932: LD_INT 20
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11940: LD_VAR 0 6
11944: PPUSH
11945: CALL_OW 264
11949: PUSH
11950: LD_INT 9
11952: PUSH
11953: EMPTY
11954: LIST
11955: IN
11956: IFFALSE 11977
// points := [ 5 , 70 , 20 ] ;
11958: LD_ADDR_VAR 0 9
11962: PUSH
11963: LD_INT 5
11965: PUSH
11966: LD_INT 70
11968: PUSH
11969: LD_INT 20
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11977: LD_VAR 0 6
11981: PPUSH
11982: CALL_OW 264
11986: PUSH
11987: LD_INT 10
11989: PUSH
11990: EMPTY
11991: LIST
11992: IN
11993: IFFALSE 12014
// points := [ 35 , 110 , 70 ] ;
11995: LD_ADDR_VAR 0 9
11999: PUSH
12000: LD_INT 35
12002: PUSH
12003: LD_INT 110
12005: PUSH
12006: LD_INT 70
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12014: LD_VAR 0 6
12018: PPUSH
12019: CALL_OW 265
12023: PUSH
12024: LD_INT 25
12026: EQUAL
12027: IFFALSE 12048
// points := [ 80 , 65 , 100 ] ;
12029: LD_ADDR_VAR 0 9
12033: PUSH
12034: LD_INT 80
12036: PUSH
12037: LD_INT 65
12039: PUSH
12040: LD_INT 100
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12048: LD_VAR 0 6
12052: PPUSH
12053: CALL_OW 263
12057: PUSH
12058: LD_INT 1
12060: EQUAL
12061: IFFALSE 12096
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12063: LD_ADDR_VAR 0 10
12067: PUSH
12068: LD_VAR 0 10
12072: PUSH
12073: LD_VAR 0 6
12077: PPUSH
12078: CALL_OW 311
12082: PPUSH
12083: LD_INT 3
12085: PPUSH
12086: CALL_OW 259
12090: PUSH
12091: LD_INT 4
12093: MUL
12094: MUL
12095: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12096: LD_VAR 0 6
12100: PPUSH
12101: CALL_OW 263
12105: PUSH
12106: LD_INT 2
12108: EQUAL
12109: IFFALSE 12160
// begin j := IsControledBy ( i ) ;
12111: LD_ADDR_VAR 0 7
12115: PUSH
12116: LD_VAR 0 6
12120: PPUSH
12121: CALL_OW 312
12125: ST_TO_ADDR
// if j then
12126: LD_VAR 0 7
12130: IFFALSE 12160
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12132: LD_ADDR_VAR 0 10
12136: PUSH
12137: LD_VAR 0 10
12141: PUSH
12142: LD_VAR 0 7
12146: PPUSH
12147: LD_INT 3
12149: PPUSH
12150: CALL_OW 259
12154: PUSH
12155: LD_INT 3
12157: MUL
12158: MUL
12159: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12160: LD_VAR 0 6
12164: PPUSH
12165: CALL_OW 264
12169: PUSH
12170: LD_INT 5
12172: PUSH
12173: LD_INT 6
12175: PUSH
12176: LD_INT 46
12178: PUSH
12179: LD_INT 44
12181: PUSH
12182: LD_INT 47
12184: PUSH
12185: LD_INT 45
12187: PUSH
12188: LD_INT 28
12190: PUSH
12191: LD_INT 7
12193: PUSH
12194: LD_INT 27
12196: PUSH
12197: LD_INT 29
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: IN
12212: PUSH
12213: LD_VAR 0 1
12217: PPUSH
12218: LD_INT 52
12220: PPUSH
12221: CALL_OW 321
12225: PUSH
12226: LD_INT 2
12228: EQUAL
12229: AND
12230: IFFALSE 12247
// bpoints := bpoints * 1.2 ;
12232: LD_ADDR_VAR 0 10
12236: PUSH
12237: LD_VAR 0 10
12241: PUSH
12242: LD_REAL  1.20000000000000E+0000
12245: MUL
12246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12247: LD_VAR 0 6
12251: PPUSH
12252: CALL_OW 264
12256: PUSH
12257: LD_INT 6
12259: PUSH
12260: LD_INT 46
12262: PUSH
12263: LD_INT 47
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: IN
12271: IFFALSE 12288
// bpoints := bpoints * 1.2 ;
12273: LD_ADDR_VAR 0 10
12277: PUSH
12278: LD_VAR 0 10
12282: PUSH
12283: LD_REAL  1.20000000000000E+0000
12286: MUL
12287: ST_TO_ADDR
// end ; unit_building :
12288: GO 12302
12290: LD_INT 3
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12301
12298: POP
// ; end ;
12299: GO 12302
12301: POP
// for j = 1 to 3 do
12302: LD_ADDR_VAR 0 7
12306: PUSH
12307: DOUBLE
12308: LD_INT 1
12310: DEC
12311: ST_TO_ADDR
12312: LD_INT 3
12314: PUSH
12315: FOR_TO
12316: IFFALSE 12369
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12318: LD_ADDR_VAR 0 5
12322: PUSH
12323: LD_VAR 0 5
12327: PPUSH
12328: LD_VAR 0 7
12332: PPUSH
12333: LD_VAR 0 5
12337: PUSH
12338: LD_VAR 0 7
12342: ARRAY
12343: PUSH
12344: LD_VAR 0 9
12348: PUSH
12349: LD_VAR 0 7
12353: ARRAY
12354: PUSH
12355: LD_VAR 0 10
12359: MUL
12360: PLUS
12361: PPUSH
12362: CALL_OW 1
12366: ST_TO_ADDR
12367: GO 12315
12369: POP
12370: POP
// end ;
12371: GO 10850
12373: POP
12374: POP
// result := Replace ( result , 4 , tmp ) ;
12375: LD_ADDR_VAR 0 5
12379: PUSH
12380: LD_VAR 0 5
12384: PPUSH
12385: LD_INT 4
12387: PPUSH
12388: LD_VAR 0 8
12392: PPUSH
12393: CALL_OW 1
12397: ST_TO_ADDR
// end ;
12398: LD_VAR 0 5
12402: RET
// export function DangerAtRange ( unit , range ) ; begin
12403: LD_INT 0
12405: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12406: LD_ADDR_VAR 0 3
12410: PUSH
12411: LD_VAR 0 1
12415: PPUSH
12416: CALL_OW 255
12420: PPUSH
12421: LD_VAR 0 1
12425: PPUSH
12426: CALL_OW 250
12430: PPUSH
12431: LD_VAR 0 1
12435: PPUSH
12436: CALL_OW 251
12440: PPUSH
12441: LD_VAR 0 2
12445: PPUSH
12446: CALL 10702 0 4
12450: ST_TO_ADDR
// end ;
12451: LD_VAR 0 3
12455: RET
// export function DangerInArea ( side , area ) ; begin
12456: LD_INT 0
12458: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12459: LD_ADDR_VAR 0 3
12463: PUSH
12464: LD_VAR 0 2
12468: PPUSH
12469: LD_INT 81
12471: PUSH
12472: LD_VAR 0 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PPUSH
12481: CALL_OW 70
12485: ST_TO_ADDR
// end ;
12486: LD_VAR 0 3
12490: RET
// export function IsExtension ( b ) ; begin
12491: LD_INT 0
12493: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12494: LD_ADDR_VAR 0 2
12498: PUSH
12499: LD_VAR 0 1
12503: PUSH
12504: LD_INT 23
12506: PUSH
12507: LD_INT 20
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_INT 17
12515: PUSH
12516: LD_INT 24
12518: PUSH
12519: LD_INT 21
12521: PUSH
12522: LD_INT 19
12524: PUSH
12525: LD_INT 16
12527: PUSH
12528: LD_INT 25
12530: PUSH
12531: LD_INT 18
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: IN
12546: ST_TO_ADDR
// end ;
12547: LD_VAR 0 2
12551: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
12556: PPUSH
// result := [ ] ;
12557: LD_ADDR_VAR 0 4
12561: PUSH
12562: EMPTY
12563: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12564: LD_ADDR_VAR 0 5
12568: PUSH
12569: LD_VAR 0 2
12573: PPUSH
12574: LD_INT 21
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 70
12588: ST_TO_ADDR
// if not tmp then
12589: LD_VAR 0 5
12593: NOT
12594: IFFALSE 12598
// exit ;
12596: GO 12662
// if checkLink then
12598: LD_VAR 0 3
12602: IFFALSE 12652
// begin for i in tmp do
12604: LD_ADDR_VAR 0 6
12608: PUSH
12609: LD_VAR 0 5
12613: PUSH
12614: FOR_IN
12615: IFFALSE 12650
// if GetBase ( i ) <> base then
12617: LD_VAR 0 6
12621: PPUSH
12622: CALL_OW 274
12626: PUSH
12627: LD_VAR 0 1
12631: NONEQUAL
12632: IFFALSE 12648
// ComLinkToBase ( base , i ) ;
12634: LD_VAR 0 1
12638: PPUSH
12639: LD_VAR 0 6
12643: PPUSH
12644: CALL_OW 169
12648: GO 12614
12650: POP
12651: POP
// end ; result := tmp ;
12652: LD_ADDR_VAR 0 4
12656: PUSH
12657: LD_VAR 0 5
12661: ST_TO_ADDR
// end ;
12662: LD_VAR 0 4
12666: RET
// export function ComComplete ( units , b ) ; var i ; begin
12667: LD_INT 0
12669: PPUSH
12670: PPUSH
// if not units then
12671: LD_VAR 0 1
12675: NOT
12676: IFFALSE 12680
// exit ;
12678: GO 12770
// for i in units do
12680: LD_ADDR_VAR 0 4
12684: PUSH
12685: LD_VAR 0 1
12689: PUSH
12690: FOR_IN
12691: IFFALSE 12768
// if BuildingStatus ( b ) = bs_build then
12693: LD_VAR 0 2
12697: PPUSH
12698: CALL_OW 461
12702: PUSH
12703: LD_INT 1
12705: EQUAL
12706: IFFALSE 12766
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12708: LD_VAR 0 4
12712: PPUSH
12713: LD_STRING h
12715: PUSH
12716: LD_VAR 0 2
12720: PPUSH
12721: CALL_OW 250
12725: PUSH
12726: LD_VAR 0 2
12730: PPUSH
12731: CALL_OW 251
12735: PUSH
12736: LD_VAR 0 2
12740: PUSH
12741: LD_INT 0
12743: PUSH
12744: LD_INT 0
12746: PUSH
12747: LD_INT 0
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: PPUSH
12762: CALL_OW 446
12766: GO 12690
12768: POP
12769: POP
// end ;
12770: LD_VAR 0 3
12774: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12775: LD_INT 0
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
12781: PPUSH
12782: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12783: LD_VAR 0 1
12787: NOT
12788: PUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 263
12798: PUSH
12799: LD_INT 2
12801: NONEQUAL
12802: OR
12803: IFFALSE 12807
// exit ;
12805: GO 13123
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12807: LD_ADDR_VAR 0 6
12811: PUSH
12812: LD_INT 22
12814: PUSH
12815: LD_VAR 0 1
12819: PPUSH
12820: CALL_OW 255
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: LD_INT 30
12834: PUSH
12835: LD_INT 36
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 34
12844: PUSH
12845: LD_INT 31
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 69
12865: ST_TO_ADDR
// if not tmp then
12866: LD_VAR 0 6
12870: NOT
12871: IFFALSE 12875
// exit ;
12873: GO 13123
// result := [ ] ;
12875: LD_ADDR_VAR 0 2
12879: PUSH
12880: EMPTY
12881: ST_TO_ADDR
// for i in tmp do
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: LD_VAR 0 6
12891: PUSH
12892: FOR_IN
12893: IFFALSE 12964
// begin t := UnitsInside ( i ) ;
12895: LD_ADDR_VAR 0 4
12899: PUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: CALL_OW 313
12909: ST_TO_ADDR
// if t then
12910: LD_VAR 0 4
12914: IFFALSE 12962
// for j in t do
12916: LD_ADDR_VAR 0 7
12920: PUSH
12921: LD_VAR 0 4
12925: PUSH
12926: FOR_IN
12927: IFFALSE 12960
// result := Replace ( result , result + 1 , j ) ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_VAR 0 2
12938: PPUSH
12939: LD_VAR 0 2
12943: PUSH
12944: LD_INT 1
12946: PLUS
12947: PPUSH
12948: LD_VAR 0 7
12952: PPUSH
12953: CALL_OW 1
12957: ST_TO_ADDR
12958: GO 12926
12960: POP
12961: POP
// end ;
12962: GO 12892
12964: POP
12965: POP
// if not result then
12966: LD_VAR 0 2
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 13123
// mech := result [ 1 ] ;
12975: LD_ADDR_VAR 0 5
12979: PUSH
12980: LD_VAR 0 2
12984: PUSH
12985: LD_INT 1
12987: ARRAY
12988: ST_TO_ADDR
// if result > 1 then
12989: LD_VAR 0 2
12993: PUSH
12994: LD_INT 1
12996: GREATER
12997: IFFALSE 13109
// begin for i = 2 to result do
12999: LD_ADDR_VAR 0 3
13003: PUSH
13004: DOUBLE
13005: LD_INT 2
13007: DEC
13008: ST_TO_ADDR
13009: LD_VAR 0 2
13013: PUSH
13014: FOR_TO
13015: IFFALSE 13107
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13017: LD_ADDR_VAR 0 4
13021: PUSH
13022: LD_VAR 0 2
13026: PUSH
13027: LD_VAR 0 3
13031: ARRAY
13032: PPUSH
13033: LD_INT 3
13035: PPUSH
13036: CALL_OW 259
13040: PUSH
13041: LD_VAR 0 2
13045: PUSH
13046: LD_VAR 0 3
13050: ARRAY
13051: PPUSH
13052: CALL_OW 432
13056: MINUS
13057: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13058: LD_VAR 0 4
13062: PUSH
13063: LD_VAR 0 5
13067: PPUSH
13068: LD_INT 3
13070: PPUSH
13071: CALL_OW 259
13075: PUSH
13076: LD_VAR 0 5
13080: PPUSH
13081: CALL_OW 432
13085: MINUS
13086: GREATEREQUAL
13087: IFFALSE 13105
// mech := result [ i ] ;
13089: LD_ADDR_VAR 0 5
13093: PUSH
13094: LD_VAR 0 2
13098: PUSH
13099: LD_VAR 0 3
13103: ARRAY
13104: ST_TO_ADDR
// end ;
13105: GO 13014
13107: POP
13108: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_VAR 0 5
13118: PPUSH
13119: CALL_OW 135
// end ;
13123: LD_VAR 0 2
13127: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
13142: PPUSH
// result := [ ] ;
13143: LD_ADDR_VAR 0 7
13147: PUSH
13148: EMPTY
13149: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13150: LD_VAR 0 1
13154: PPUSH
13155: CALL_OW 266
13159: PUSH
13160: LD_INT 0
13162: PUSH
13163: LD_INT 1
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: IN
13170: NOT
13171: IFFALSE 13175
// exit ;
13173: GO 14809
// if name then
13175: LD_VAR 0 3
13179: IFFALSE 13195
// SetBName ( base_dep , name ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_VAR 0 3
13190: PPUSH
13191: CALL_OW 500
// base := GetBase ( base_dep ) ;
13195: LD_ADDR_VAR 0 15
13199: PUSH
13200: LD_VAR 0 1
13204: PPUSH
13205: CALL_OW 274
13209: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13210: LD_ADDR_VAR 0 16
13214: PUSH
13215: LD_VAR 0 1
13219: PPUSH
13220: CALL_OW 255
13224: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13225: LD_ADDR_VAR 0 17
13229: PUSH
13230: LD_VAR 0 1
13234: PPUSH
13235: CALL_OW 248
13239: ST_TO_ADDR
// if sources then
13240: LD_VAR 0 5
13244: IFFALSE 13291
// for i = 1 to 3 do
13246: LD_ADDR_VAR 0 8
13250: PUSH
13251: DOUBLE
13252: LD_INT 1
13254: DEC
13255: ST_TO_ADDR
13256: LD_INT 3
13258: PUSH
13259: FOR_TO
13260: IFFALSE 13289
// AddResourceType ( base , i , sources [ i ] ) ;
13262: LD_VAR 0 15
13266: PPUSH
13267: LD_VAR 0 8
13271: PPUSH
13272: LD_VAR 0 5
13276: PUSH
13277: LD_VAR 0 8
13281: ARRAY
13282: PPUSH
13283: CALL_OW 276
13287: GO 13259
13289: POP
13290: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13291: LD_ADDR_VAR 0 18
13295: PUSH
13296: LD_VAR 0 15
13300: PPUSH
13301: LD_VAR 0 2
13305: PPUSH
13306: LD_INT 1
13308: PPUSH
13309: CALL 12552 0 3
13313: ST_TO_ADDR
// InitHc ;
13314: CALL_OW 19
// InitUc ;
13318: CALL_OW 18
// uc_side := side ;
13322: LD_ADDR_OWVAR 20
13326: PUSH
13327: LD_VAR 0 16
13331: ST_TO_ADDR
// uc_nation := nation ;
13332: LD_ADDR_OWVAR 21
13336: PUSH
13337: LD_VAR 0 17
13341: ST_TO_ADDR
// if buildings then
13342: LD_VAR 0 18
13346: IFFALSE 14668
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13348: LD_ADDR_VAR 0 19
13352: PUSH
13353: LD_VAR 0 18
13357: PPUSH
13358: LD_INT 2
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 29
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 30
13373: PUSH
13374: LD_INT 30
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 72
13390: ST_TO_ADDR
// if tmp then
13391: LD_VAR 0 19
13395: IFFALSE 13443
// for i in tmp do
13397: LD_ADDR_VAR 0 8
13401: PUSH
13402: LD_VAR 0 19
13406: PUSH
13407: FOR_IN
13408: IFFALSE 13441
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13410: LD_VAR 0 8
13414: PPUSH
13415: CALL_OW 250
13419: PPUSH
13420: LD_VAR 0 8
13424: PPUSH
13425: CALL_OW 251
13429: PPUSH
13430: LD_VAR 0 16
13434: PPUSH
13435: CALL_OW 441
13439: GO 13407
13441: POP
13442: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13443: LD_VAR 0 18
13447: PPUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 32
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 33
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: PPUSH
13476: CALL_OW 72
13480: IFFALSE 13568
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13482: LD_ADDR_VAR 0 8
13486: PUSH
13487: LD_VAR 0 18
13491: PPUSH
13492: LD_INT 2
13494: PUSH
13495: LD_INT 30
13497: PUSH
13498: LD_INT 32
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 30
13507: PUSH
13508: LD_INT 33
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: PPUSH
13520: CALL_OW 72
13524: PUSH
13525: FOR_IN
13526: IFFALSE 13566
// begin if not GetBWeapon ( i ) then
13528: LD_VAR 0 8
13532: PPUSH
13533: CALL_OW 269
13537: NOT
13538: IFFALSE 13564
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13540: LD_VAR 0 8
13544: PPUSH
13545: LD_VAR 0 8
13549: PPUSH
13550: LD_VAR 0 2
13554: PPUSH
13555: CALL 14814 0 2
13559: PPUSH
13560: CALL_OW 431
// end ;
13564: GO 13525
13566: POP
13567: POP
// end ; for i = 1 to personel do
13568: LD_ADDR_VAR 0 8
13572: PUSH
13573: DOUBLE
13574: LD_INT 1
13576: DEC
13577: ST_TO_ADDR
13578: LD_VAR 0 6
13582: PUSH
13583: FOR_TO
13584: IFFALSE 14648
// begin if i > 4 then
13586: LD_VAR 0 8
13590: PUSH
13591: LD_INT 4
13593: GREATER
13594: IFFALSE 13598
// break ;
13596: GO 14648
// case i of 1 :
13598: LD_VAR 0 8
13602: PUSH
13603: LD_INT 1
13605: DOUBLE
13606: EQUAL
13607: IFTRUE 13611
13609: GO 13691
13611: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13612: LD_ADDR_VAR 0 12
13616: PUSH
13617: LD_VAR 0 18
13621: PPUSH
13622: LD_INT 22
13624: PUSH
13625: LD_VAR 0 16
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 58
13636: PUSH
13637: EMPTY
13638: LIST
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: LD_INT 30
13645: PUSH
13646: LD_INT 32
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 30
13655: PUSH
13656: LD_INT 4
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 30
13665: PUSH
13666: LD_INT 5
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: LIST
13683: PPUSH
13684: CALL_OW 72
13688: ST_TO_ADDR
13689: GO 13913
13691: LD_INT 2
13693: DOUBLE
13694: EQUAL
13695: IFTRUE 13699
13697: GO 13761
13699: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13700: LD_ADDR_VAR 0 12
13704: PUSH
13705: LD_VAR 0 18
13709: PPUSH
13710: LD_INT 22
13712: PUSH
13713: LD_VAR 0 16
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: LD_INT 30
13727: PUSH
13728: LD_INT 0
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 30
13737: PUSH
13738: LD_INT 1
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PPUSH
13754: CALL_OW 72
13758: ST_TO_ADDR
13759: GO 13913
13761: LD_INT 3
13763: DOUBLE
13764: EQUAL
13765: IFTRUE 13769
13767: GO 13831
13769: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13770: LD_ADDR_VAR 0 12
13774: PUSH
13775: LD_VAR 0 18
13779: PPUSH
13780: LD_INT 22
13782: PUSH
13783: LD_VAR 0 16
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: LD_INT 30
13797: PUSH
13798: LD_INT 2
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: LD_INT 30
13807: PUSH
13808: LD_INT 3
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 72
13828: ST_TO_ADDR
13829: GO 13913
13831: LD_INT 4
13833: DOUBLE
13834: EQUAL
13835: IFTRUE 13839
13837: GO 13912
13839: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13840: LD_ADDR_VAR 0 12
13844: PUSH
13845: LD_VAR 0 18
13849: PPUSH
13850: LD_INT 22
13852: PUSH
13853: LD_VAR 0 16
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 2
13864: PUSH
13865: LD_INT 30
13867: PUSH
13868: LD_INT 6
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 30
13877: PUSH
13878: LD_INT 7
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: LD_INT 30
13887: PUSH
13888: LD_INT 8
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PPUSH
13905: CALL_OW 72
13909: ST_TO_ADDR
13910: GO 13913
13912: POP
// if i = 1 then
13913: LD_VAR 0 8
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: IFFALSE 14032
// begin tmp := [ ] ;
13923: LD_ADDR_VAR 0 19
13927: PUSH
13928: EMPTY
13929: ST_TO_ADDR
// for j in f do
13930: LD_ADDR_VAR 0 9
13934: PUSH
13935: LD_VAR 0 12
13939: PUSH
13940: FOR_IN
13941: IFFALSE 14014
// if GetBType ( j ) = b_bunker then
13943: LD_VAR 0 9
13947: PPUSH
13948: CALL_OW 266
13952: PUSH
13953: LD_INT 32
13955: EQUAL
13956: IFFALSE 13983
// tmp := Insert ( tmp , 1 , j ) else
13958: LD_ADDR_VAR 0 19
13962: PUSH
13963: LD_VAR 0 19
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_VAR 0 9
13975: PPUSH
13976: CALL_OW 2
13980: ST_TO_ADDR
13981: GO 14012
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13983: LD_ADDR_VAR 0 19
13987: PUSH
13988: LD_VAR 0 19
13992: PPUSH
13993: LD_VAR 0 19
13997: PUSH
13998: LD_INT 1
14000: PLUS
14001: PPUSH
14002: LD_VAR 0 9
14006: PPUSH
14007: CALL_OW 2
14011: ST_TO_ADDR
14012: GO 13940
14014: POP
14015: POP
// if tmp then
14016: LD_VAR 0 19
14020: IFFALSE 14032
// f := tmp ;
14022: LD_ADDR_VAR 0 12
14026: PUSH
14027: LD_VAR 0 19
14031: ST_TO_ADDR
// end ; x := personel [ i ] ;
14032: LD_ADDR_VAR 0 13
14036: PUSH
14037: LD_VAR 0 6
14041: PUSH
14042: LD_VAR 0 8
14046: ARRAY
14047: ST_TO_ADDR
// if x = - 1 then
14048: LD_VAR 0 13
14052: PUSH
14053: LD_INT 1
14055: NEG
14056: EQUAL
14057: IFFALSE 14266
// begin for j in f do
14059: LD_ADDR_VAR 0 9
14063: PUSH
14064: LD_VAR 0 12
14068: PUSH
14069: FOR_IN
14070: IFFALSE 14262
// repeat InitHc ;
14072: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14076: LD_VAR 0 9
14080: PPUSH
14081: CALL_OW 266
14085: PUSH
14086: LD_INT 5
14088: EQUAL
14089: IFFALSE 14159
// begin if UnitsInside ( j ) < 3 then
14091: LD_VAR 0 9
14095: PPUSH
14096: CALL_OW 313
14100: PUSH
14101: LD_INT 3
14103: LESS
14104: IFFALSE 14140
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14106: LD_INT 0
14108: PPUSH
14109: LD_INT 5
14111: PUSH
14112: LD_INT 8
14114: PUSH
14115: LD_INT 9
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: PUSH
14123: LD_VAR 0 17
14127: ARRAY
14128: PPUSH
14129: LD_VAR 0 4
14133: PPUSH
14134: CALL_OW 380
14138: GO 14157
// PrepareHuman ( false , i , skill ) ;
14140: LD_INT 0
14142: PPUSH
14143: LD_VAR 0 8
14147: PPUSH
14148: LD_VAR 0 4
14152: PPUSH
14153: CALL_OW 380
// end else
14157: GO 14176
// PrepareHuman ( false , i , skill ) ;
14159: LD_INT 0
14161: PPUSH
14162: LD_VAR 0 8
14166: PPUSH
14167: LD_VAR 0 4
14171: PPUSH
14172: CALL_OW 380
// un := CreateHuman ;
14176: LD_ADDR_VAR 0 14
14180: PUSH
14181: CALL_OW 44
14185: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14186: LD_ADDR_VAR 0 7
14190: PUSH
14191: LD_VAR 0 7
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: LD_VAR 0 14
14203: PPUSH
14204: CALL_OW 2
14208: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14209: LD_VAR 0 14
14213: PPUSH
14214: LD_VAR 0 9
14218: PPUSH
14219: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14223: LD_VAR 0 9
14227: PPUSH
14228: CALL_OW 313
14232: PUSH
14233: LD_INT 6
14235: EQUAL
14236: PUSH
14237: LD_VAR 0 9
14241: PPUSH
14242: CALL_OW 266
14246: PUSH
14247: LD_INT 32
14249: PUSH
14250: LD_INT 31
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: IN
14257: OR
14258: IFFALSE 14072
14260: GO 14069
14262: POP
14263: POP
// end else
14264: GO 14646
// for j = 1 to x do
14266: LD_ADDR_VAR 0 9
14270: PUSH
14271: DOUBLE
14272: LD_INT 1
14274: DEC
14275: ST_TO_ADDR
14276: LD_VAR 0 13
14280: PUSH
14281: FOR_TO
14282: IFFALSE 14644
// begin InitHc ;
14284: CALL_OW 19
// if not f then
14288: LD_VAR 0 12
14292: NOT
14293: IFFALSE 14382
// begin PrepareHuman ( false , i , skill ) ;
14295: LD_INT 0
14297: PPUSH
14298: LD_VAR 0 8
14302: PPUSH
14303: LD_VAR 0 4
14307: PPUSH
14308: CALL_OW 380
// un := CreateHuman ;
14312: LD_ADDR_VAR 0 14
14316: PUSH
14317: CALL_OW 44
14321: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14322: LD_ADDR_VAR 0 7
14326: PUSH
14327: LD_VAR 0 7
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: LD_VAR 0 14
14339: PPUSH
14340: CALL_OW 2
14344: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14345: LD_VAR 0 14
14349: PPUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 250
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 251
14369: PPUSH
14370: LD_INT 10
14372: PPUSH
14373: LD_INT 0
14375: PPUSH
14376: CALL_OW 50
// continue ;
14380: GO 14281
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14382: LD_VAR 0 12
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: PPUSH
14391: CALL_OW 313
14395: PUSH
14396: LD_VAR 0 12
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 266
14409: PUSH
14410: LD_INT 32
14412: PUSH
14413: LD_INT 31
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: IN
14420: AND
14421: PUSH
14422: LD_VAR 0 12
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: PPUSH
14431: CALL_OW 313
14435: PUSH
14436: LD_INT 6
14438: EQUAL
14439: OR
14440: IFFALSE 14460
// f := Delete ( f , 1 ) ;
14442: LD_ADDR_VAR 0 12
14446: PUSH
14447: LD_VAR 0 12
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 3
14459: ST_TO_ADDR
// if not f then
14460: LD_VAR 0 12
14464: NOT
14465: IFFALSE 14483
// begin x := x + 2 ;
14467: LD_ADDR_VAR 0 13
14471: PUSH
14472: LD_VAR 0 13
14476: PUSH
14477: LD_INT 2
14479: PLUS
14480: ST_TO_ADDR
// continue ;
14481: GO 14281
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14483: LD_VAR 0 12
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: CALL_OW 266
14496: PUSH
14497: LD_INT 5
14499: EQUAL
14500: IFFALSE 14574
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14502: LD_VAR 0 12
14506: PUSH
14507: LD_INT 1
14509: ARRAY
14510: PPUSH
14511: CALL_OW 313
14515: PUSH
14516: LD_INT 3
14518: LESS
14519: IFFALSE 14555
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14521: LD_INT 0
14523: PPUSH
14524: LD_INT 5
14526: PUSH
14527: LD_INT 8
14529: PUSH
14530: LD_INT 9
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: LD_VAR 0 17
14542: ARRAY
14543: PPUSH
14544: LD_VAR 0 4
14548: PPUSH
14549: CALL_OW 380
14553: GO 14572
// PrepareHuman ( false , i , skill ) ;
14555: LD_INT 0
14557: PPUSH
14558: LD_VAR 0 8
14562: PPUSH
14563: LD_VAR 0 4
14567: PPUSH
14568: CALL_OW 380
// end else
14572: GO 14591
// PrepareHuman ( false , i , skill ) ;
14574: LD_INT 0
14576: PPUSH
14577: LD_VAR 0 8
14581: PPUSH
14582: LD_VAR 0 4
14586: PPUSH
14587: CALL_OW 380
// un := CreateHuman ;
14591: LD_ADDR_VAR 0 14
14595: PUSH
14596: CALL_OW 44
14600: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14601: LD_ADDR_VAR 0 7
14605: PUSH
14606: LD_VAR 0 7
14610: PPUSH
14611: LD_INT 1
14613: PPUSH
14614: LD_VAR 0 14
14618: PPUSH
14619: CALL_OW 2
14623: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14624: LD_VAR 0 14
14628: PPUSH
14629: LD_VAR 0 12
14633: PUSH
14634: LD_INT 1
14636: ARRAY
14637: PPUSH
14638: CALL_OW 52
// end ;
14642: GO 14281
14644: POP
14645: POP
// end ;
14646: GO 13583
14648: POP
14649: POP
// result := result ^ buildings ;
14650: LD_ADDR_VAR 0 7
14654: PUSH
14655: LD_VAR 0 7
14659: PUSH
14660: LD_VAR 0 18
14664: ADD
14665: ST_TO_ADDR
// end else
14666: GO 14809
// begin for i = 1 to personel do
14668: LD_ADDR_VAR 0 8
14672: PUSH
14673: DOUBLE
14674: LD_INT 1
14676: DEC
14677: ST_TO_ADDR
14678: LD_VAR 0 6
14682: PUSH
14683: FOR_TO
14684: IFFALSE 14807
// begin if i > 4 then
14686: LD_VAR 0 8
14690: PUSH
14691: LD_INT 4
14693: GREATER
14694: IFFALSE 14698
// break ;
14696: GO 14807
// x := personel [ i ] ;
14698: LD_ADDR_VAR 0 13
14702: PUSH
14703: LD_VAR 0 6
14707: PUSH
14708: LD_VAR 0 8
14712: ARRAY
14713: ST_TO_ADDR
// if x = - 1 then
14714: LD_VAR 0 13
14718: PUSH
14719: LD_INT 1
14721: NEG
14722: EQUAL
14723: IFFALSE 14727
// continue ;
14725: GO 14683
// PrepareHuman ( false , i , skill ) ;
14727: LD_INT 0
14729: PPUSH
14730: LD_VAR 0 8
14734: PPUSH
14735: LD_VAR 0 4
14739: PPUSH
14740: CALL_OW 380
// un := CreateHuman ;
14744: LD_ADDR_VAR 0 14
14748: PUSH
14749: CALL_OW 44
14753: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14754: LD_VAR 0 14
14758: PPUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 250
14768: PPUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 251
14778: PPUSH
14779: LD_INT 10
14781: PPUSH
14782: LD_INT 0
14784: PPUSH
14785: CALL_OW 50
// result := result ^ un ;
14789: LD_ADDR_VAR 0 7
14793: PUSH
14794: LD_VAR 0 7
14798: PUSH
14799: LD_VAR 0 14
14803: ADD
14804: ST_TO_ADDR
// end ;
14805: GO 14683
14807: POP
14808: POP
// end ; end ;
14809: LD_VAR 0 7
14813: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14814: LD_INT 0
14816: PPUSH
14817: PPUSH
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
14831: PPUSH
// result := false ;
14832: LD_ADDR_VAR 0 3
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14840: LD_VAR 0 1
14844: NOT
14845: PUSH
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 266
14855: PUSH
14856: LD_INT 32
14858: PUSH
14859: LD_INT 33
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: IN
14866: NOT
14867: OR
14868: IFFALSE 14872
// exit ;
14870: GO 15981
// nat := GetNation ( tower ) ;
14872: LD_ADDR_VAR 0 12
14876: PUSH
14877: LD_VAR 0 1
14881: PPUSH
14882: CALL_OW 248
14886: ST_TO_ADDR
// side := GetSide ( tower ) ;
14887: LD_ADDR_VAR 0 16
14891: PUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 255
14901: ST_TO_ADDR
// x := GetX ( tower ) ;
14902: LD_ADDR_VAR 0 10
14906: PUSH
14907: LD_VAR 0 1
14911: PPUSH
14912: CALL_OW 250
14916: ST_TO_ADDR
// y := GetY ( tower ) ;
14917: LD_ADDR_VAR 0 11
14921: PUSH
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 251
14931: ST_TO_ADDR
// if not x or not y then
14932: LD_VAR 0 10
14936: NOT
14937: PUSH
14938: LD_VAR 0 11
14942: NOT
14943: OR
14944: IFFALSE 14948
// exit ;
14946: GO 15981
// weapon := 0 ;
14948: LD_ADDR_VAR 0 18
14952: PUSH
14953: LD_INT 0
14955: ST_TO_ADDR
// fac_list := [ ] ;
14956: LD_ADDR_VAR 0 17
14960: PUSH
14961: EMPTY
14962: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14963: LD_ADDR_VAR 0 6
14967: PUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 274
14977: PPUSH
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_INT 0
14985: PPUSH
14986: CALL 12552 0 3
14990: PPUSH
14991: LD_INT 30
14993: PUSH
14994: LD_INT 3
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 72
15005: ST_TO_ADDR
// if not factories then
15006: LD_VAR 0 6
15010: NOT
15011: IFFALSE 15015
// exit ;
15013: GO 15981
// for i in factories do
15015: LD_ADDR_VAR 0 8
15019: PUSH
15020: LD_VAR 0 6
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15051
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15028: LD_ADDR_VAR 0 17
15032: PUSH
15033: LD_VAR 0 17
15037: PUSH
15038: LD_VAR 0 8
15042: PPUSH
15043: CALL_OW 478
15047: UNION
15048: ST_TO_ADDR
15049: GO 15025
15051: POP
15052: POP
// if not fac_list then
15053: LD_VAR 0 17
15057: NOT
15058: IFFALSE 15062
// exit ;
15060: GO 15981
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15062: LD_ADDR_VAR 0 5
15066: PUSH
15067: LD_INT 4
15069: PUSH
15070: LD_INT 5
15072: PUSH
15073: LD_INT 9
15075: PUSH
15076: LD_INT 10
15078: PUSH
15079: LD_INT 6
15081: PUSH
15082: LD_INT 7
15084: PUSH
15085: LD_INT 11
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 27
15099: PUSH
15100: LD_INT 28
15102: PUSH
15103: LD_INT 26
15105: PUSH
15106: LD_INT 30
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 43
15117: PUSH
15118: LD_INT 44
15120: PUSH
15121: LD_INT 46
15123: PUSH
15124: LD_INT 45
15126: PUSH
15127: LD_INT 47
15129: PUSH
15130: LD_INT 49
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: PUSH
15146: LD_VAR 0 12
15150: ARRAY
15151: ST_TO_ADDR
// list := list isect fac_list ;
15152: LD_ADDR_VAR 0 5
15156: PUSH
15157: LD_VAR 0 5
15161: PUSH
15162: LD_VAR 0 17
15166: ISECT
15167: ST_TO_ADDR
// if not list then
15168: LD_VAR 0 5
15172: NOT
15173: IFFALSE 15177
// exit ;
15175: GO 15981
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15177: LD_VAR 0 12
15181: PUSH
15182: LD_INT 3
15184: EQUAL
15185: PUSH
15186: LD_INT 49
15188: PUSH
15189: LD_VAR 0 5
15193: IN
15194: AND
15195: PUSH
15196: LD_INT 31
15198: PPUSH
15199: LD_VAR 0 16
15203: PPUSH
15204: CALL_OW 321
15208: PUSH
15209: LD_INT 2
15211: EQUAL
15212: AND
15213: IFFALSE 15273
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15215: LD_INT 22
15217: PUSH
15218: LD_VAR 0 16
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 35
15229: PUSH
15230: LD_INT 49
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 91
15239: PUSH
15240: LD_VAR 0 1
15244: PUSH
15245: LD_INT 10
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: PPUSH
15258: CALL_OW 69
15262: NOT
15263: IFFALSE 15273
// weapon := ru_time_lapser ;
15265: LD_ADDR_VAR 0 18
15269: PUSH
15270: LD_INT 49
15272: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15273: LD_VAR 0 12
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: LD_INT 2
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: IN
15288: PUSH
15289: LD_INT 11
15291: PUSH
15292: LD_VAR 0 5
15296: IN
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_VAR 0 5
15305: IN
15306: OR
15307: AND
15308: PUSH
15309: LD_INT 6
15311: PPUSH
15312: LD_VAR 0 16
15316: PPUSH
15317: CALL_OW 321
15321: PUSH
15322: LD_INT 2
15324: EQUAL
15325: AND
15326: IFFALSE 15491
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15328: LD_INT 22
15330: PUSH
15331: LD_VAR 0 16
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 2
15342: PUSH
15343: LD_INT 35
15345: PUSH
15346: LD_INT 11
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 35
15355: PUSH
15356: LD_INT 30
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 91
15370: PUSH
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 18
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: LIST
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: LIST
15388: PPUSH
15389: CALL_OW 69
15393: NOT
15394: PUSH
15395: LD_INT 22
15397: PUSH
15398: LD_VAR 0 16
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 2
15409: PUSH
15410: LD_INT 30
15412: PUSH
15413: LD_INT 32
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 30
15422: PUSH
15423: LD_INT 33
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 91
15437: PUSH
15438: LD_VAR 0 1
15442: PUSH
15443: LD_INT 12
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: PPUSH
15459: CALL_OW 69
15463: PUSH
15464: LD_INT 2
15466: GREATER
15467: AND
15468: IFFALSE 15491
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15470: LD_ADDR_VAR 0 18
15474: PUSH
15475: LD_INT 11
15477: PUSH
15478: LD_INT 30
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_VAR 0 12
15489: ARRAY
15490: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15491: LD_VAR 0 18
15495: NOT
15496: PUSH
15497: LD_INT 40
15499: PPUSH
15500: LD_VAR 0 16
15504: PPUSH
15505: CALL_OW 321
15509: PUSH
15510: LD_INT 2
15512: EQUAL
15513: AND
15514: PUSH
15515: LD_INT 7
15517: PUSH
15518: LD_VAR 0 5
15522: IN
15523: PUSH
15524: LD_INT 28
15526: PUSH
15527: LD_VAR 0 5
15531: IN
15532: OR
15533: PUSH
15534: LD_INT 45
15536: PUSH
15537: LD_VAR 0 5
15541: IN
15542: OR
15543: AND
15544: IFFALSE 15798
// begin hex := GetHexInfo ( x , y ) ;
15546: LD_ADDR_VAR 0 4
15550: PUSH
15551: LD_VAR 0 10
15555: PPUSH
15556: LD_VAR 0 11
15560: PPUSH
15561: CALL_OW 546
15565: ST_TO_ADDR
// if hex [ 1 ] then
15566: LD_VAR 0 4
15570: PUSH
15571: LD_INT 1
15573: ARRAY
15574: IFFALSE 15578
// exit ;
15576: GO 15981
// height := hex [ 2 ] ;
15578: LD_ADDR_VAR 0 15
15582: PUSH
15583: LD_VAR 0 4
15587: PUSH
15588: LD_INT 2
15590: ARRAY
15591: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15592: LD_ADDR_VAR 0 14
15596: PUSH
15597: LD_INT 0
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: LD_INT 5
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: ST_TO_ADDR
// for i in tmp do
15615: LD_ADDR_VAR 0 8
15619: PUSH
15620: LD_VAR 0 14
15624: PUSH
15625: FOR_IN
15626: IFFALSE 15796
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15628: LD_ADDR_VAR 0 9
15632: PUSH
15633: LD_VAR 0 10
15637: PPUSH
15638: LD_VAR 0 8
15642: PPUSH
15643: LD_INT 5
15645: PPUSH
15646: CALL_OW 272
15650: PUSH
15651: LD_VAR 0 11
15655: PPUSH
15656: LD_VAR 0 8
15660: PPUSH
15661: LD_INT 5
15663: PPUSH
15664: CALL_OW 273
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15673: LD_VAR 0 9
15677: PUSH
15678: LD_INT 1
15680: ARRAY
15681: PPUSH
15682: LD_VAR 0 9
15686: PUSH
15687: LD_INT 2
15689: ARRAY
15690: PPUSH
15691: CALL_OW 488
15695: IFFALSE 15794
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15697: LD_ADDR_VAR 0 4
15701: PUSH
15702: LD_VAR 0 9
15706: PUSH
15707: LD_INT 1
15709: ARRAY
15710: PPUSH
15711: LD_VAR 0 9
15715: PUSH
15716: LD_INT 2
15718: ARRAY
15719: PPUSH
15720: CALL_OW 546
15724: ST_TO_ADDR
// if hex [ 1 ] then
15725: LD_VAR 0 4
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: IFFALSE 15737
// continue ;
15735: GO 15625
// h := hex [ 2 ] ;
15737: LD_ADDR_VAR 0 13
15741: PUSH
15742: LD_VAR 0 4
15746: PUSH
15747: LD_INT 2
15749: ARRAY
15750: ST_TO_ADDR
// if h + 7 < height then
15751: LD_VAR 0 13
15755: PUSH
15756: LD_INT 7
15758: PLUS
15759: PUSH
15760: LD_VAR 0 15
15764: LESS
15765: IFFALSE 15794
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15767: LD_ADDR_VAR 0 18
15771: PUSH
15772: LD_INT 7
15774: PUSH
15775: LD_INT 28
15777: PUSH
15778: LD_INT 45
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: LIST
15785: PUSH
15786: LD_VAR 0 12
15790: ARRAY
15791: ST_TO_ADDR
// break ;
15792: GO 15796
// end ; end ; end ;
15794: GO 15625
15796: POP
15797: POP
// end ; if not weapon then
15798: LD_VAR 0 18
15802: NOT
15803: IFFALSE 15863
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15805: LD_ADDR_VAR 0 5
15809: PUSH
15810: LD_VAR 0 5
15814: PUSH
15815: LD_INT 11
15817: PUSH
15818: LD_INT 30
15820: PUSH
15821: LD_INT 49
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: DIFF
15829: ST_TO_ADDR
// if not list then
15830: LD_VAR 0 5
15834: NOT
15835: IFFALSE 15839
// exit ;
15837: GO 15981
// weapon := list [ rand ( 1 , list ) ] ;
15839: LD_ADDR_VAR 0 18
15843: PUSH
15844: LD_VAR 0 5
15848: PUSH
15849: LD_INT 1
15851: PPUSH
15852: LD_VAR 0 5
15856: PPUSH
15857: CALL_OW 12
15861: ARRAY
15862: ST_TO_ADDR
// end ; if weapon then
15863: LD_VAR 0 18
15867: IFFALSE 15981
// begin tmp := CostOfWeapon ( weapon ) ;
15869: LD_ADDR_VAR 0 14
15873: PUSH
15874: LD_VAR 0 18
15878: PPUSH
15879: CALL_OW 451
15883: ST_TO_ADDR
// j := GetBase ( tower ) ;
15884: LD_ADDR_VAR 0 9
15888: PUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 274
15898: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15899: LD_VAR 0 9
15903: PPUSH
15904: LD_INT 1
15906: PPUSH
15907: CALL_OW 275
15911: PUSH
15912: LD_VAR 0 14
15916: PUSH
15917: LD_INT 1
15919: ARRAY
15920: GREATEREQUAL
15921: PUSH
15922: LD_VAR 0 9
15926: PPUSH
15927: LD_INT 2
15929: PPUSH
15930: CALL_OW 275
15934: PUSH
15935: LD_VAR 0 14
15939: PUSH
15940: LD_INT 2
15942: ARRAY
15943: GREATEREQUAL
15944: AND
15945: PUSH
15946: LD_VAR 0 9
15950: PPUSH
15951: LD_INT 3
15953: PPUSH
15954: CALL_OW 275
15958: PUSH
15959: LD_VAR 0 14
15963: PUSH
15964: LD_INT 3
15966: ARRAY
15967: GREATEREQUAL
15968: AND
15969: IFFALSE 15981
// result := weapon ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_VAR 0 18
15980: ST_TO_ADDR
// end ; end ;
15981: LD_VAR 0 3
15985: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15986: LD_INT 0
15988: PPUSH
15989: PPUSH
// result := true ;
15990: LD_ADDR_VAR 0 3
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if array1 = array2 then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_VAR 0 2
16007: EQUAL
16008: IFFALSE 16068
// begin for i = 1 to array1 do
16010: LD_ADDR_VAR 0 4
16014: PUSH
16015: DOUBLE
16016: LD_INT 1
16018: DEC
16019: ST_TO_ADDR
16020: LD_VAR 0 1
16024: PUSH
16025: FOR_TO
16026: IFFALSE 16064
// if array1 [ i ] <> array2 [ i ] then
16028: LD_VAR 0 1
16032: PUSH
16033: LD_VAR 0 4
16037: ARRAY
16038: PUSH
16039: LD_VAR 0 2
16043: PUSH
16044: LD_VAR 0 4
16048: ARRAY
16049: NONEQUAL
16050: IFFALSE 16062
// begin result := false ;
16052: LD_ADDR_VAR 0 3
16056: PUSH
16057: LD_INT 0
16059: ST_TO_ADDR
// break ;
16060: GO 16064
// end ;
16062: GO 16025
16064: POP
16065: POP
// end else
16066: GO 16076
// result := false ;
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_INT 0
16075: ST_TO_ADDR
// end ;
16076: LD_VAR 0 3
16080: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// if not array1 or not array2 then
16085: LD_VAR 0 1
16089: NOT
16090: PUSH
16091: LD_VAR 0 2
16095: NOT
16096: OR
16097: IFFALSE 16101
// exit ;
16099: GO 16165
// result := true ;
16101: LD_ADDR_VAR 0 3
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// for i = 1 to array1 do
16109: LD_ADDR_VAR 0 4
16113: PUSH
16114: DOUBLE
16115: LD_INT 1
16117: DEC
16118: ST_TO_ADDR
16119: LD_VAR 0 1
16123: PUSH
16124: FOR_TO
16125: IFFALSE 16163
// if array1 [ i ] <> array2 [ i ] then
16127: LD_VAR 0 1
16131: PUSH
16132: LD_VAR 0 4
16136: ARRAY
16137: PUSH
16138: LD_VAR 0 2
16142: PUSH
16143: LD_VAR 0 4
16147: ARRAY
16148: NONEQUAL
16149: IFFALSE 16161
// begin result := false ;
16151: LD_ADDR_VAR 0 3
16155: PUSH
16156: LD_INT 0
16158: ST_TO_ADDR
// break ;
16159: GO 16163
// end ;
16161: GO 16124
16163: POP
16164: POP
// end ;
16165: LD_VAR 0 3
16169: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16170: LD_INT 0
16172: PPUSH
16173: PPUSH
16174: PPUSH
// pom := GetBase ( fac ) ;
16175: LD_ADDR_VAR 0 5
16179: PUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 274
16189: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16190: LD_ADDR_VAR 0 4
16194: PUSH
16195: LD_VAR 0 2
16199: PUSH
16200: LD_INT 1
16202: ARRAY
16203: PPUSH
16204: LD_VAR 0 2
16208: PUSH
16209: LD_INT 2
16211: ARRAY
16212: PPUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 3
16220: ARRAY
16221: PPUSH
16222: LD_VAR 0 2
16226: PUSH
16227: LD_INT 4
16229: ARRAY
16230: PPUSH
16231: CALL_OW 449
16235: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16236: LD_ADDR_VAR 0 3
16240: PUSH
16241: LD_VAR 0 5
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 275
16253: PUSH
16254: LD_VAR 0 4
16258: PUSH
16259: LD_INT 1
16261: ARRAY
16262: GREATEREQUAL
16263: PUSH
16264: LD_VAR 0 5
16268: PPUSH
16269: LD_INT 2
16271: PPUSH
16272: CALL_OW 275
16276: PUSH
16277: LD_VAR 0 4
16281: PUSH
16282: LD_INT 2
16284: ARRAY
16285: GREATEREQUAL
16286: AND
16287: PUSH
16288: LD_VAR 0 5
16292: PPUSH
16293: LD_INT 3
16295: PPUSH
16296: CALL_OW 275
16300: PUSH
16301: LD_VAR 0 4
16305: PUSH
16306: LD_INT 3
16308: ARRAY
16309: GREATEREQUAL
16310: AND
16311: ST_TO_ADDR
// end ;
16312: LD_VAR 0 3
16316: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16317: LD_INT 0
16319: PPUSH
16320: PPUSH
16321: PPUSH
16322: PPUSH
// pom := GetBase ( building ) ;
16323: LD_ADDR_VAR 0 3
16327: PUSH
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 274
16337: ST_TO_ADDR
// if not pom then
16338: LD_VAR 0 3
16342: NOT
16343: IFFALSE 16347
// exit ;
16345: GO 16517
// btype := GetBType ( building ) ;
16347: LD_ADDR_VAR 0 5
16351: PUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 266
16361: ST_TO_ADDR
// if btype = b_armoury then
16362: LD_VAR 0 5
16366: PUSH
16367: LD_INT 4
16369: EQUAL
16370: IFFALSE 16380
// btype := b_barracks ;
16372: LD_ADDR_VAR 0 5
16376: PUSH
16377: LD_INT 5
16379: ST_TO_ADDR
// if btype = b_depot then
16380: LD_VAR 0 5
16384: PUSH
16385: LD_INT 0
16387: EQUAL
16388: IFFALSE 16398
// btype := b_warehouse ;
16390: LD_ADDR_VAR 0 5
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if btype = b_workshop then
16398: LD_VAR 0 5
16402: PUSH
16403: LD_INT 2
16405: EQUAL
16406: IFFALSE 16416
// btype := b_factory ;
16408: LD_ADDR_VAR 0 5
16412: PUSH
16413: LD_INT 3
16415: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16416: LD_ADDR_VAR 0 4
16420: PUSH
16421: LD_VAR 0 5
16425: PPUSH
16426: LD_VAR 0 1
16430: PPUSH
16431: CALL_OW 248
16435: PPUSH
16436: CALL_OW 450
16440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16441: LD_ADDR_VAR 0 2
16445: PUSH
16446: LD_VAR 0 3
16450: PPUSH
16451: LD_INT 1
16453: PPUSH
16454: CALL_OW 275
16458: PUSH
16459: LD_VAR 0 4
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: GREATEREQUAL
16468: PUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: LD_INT 2
16476: PPUSH
16477: CALL_OW 275
16481: PUSH
16482: LD_VAR 0 4
16486: PUSH
16487: LD_INT 2
16489: ARRAY
16490: GREATEREQUAL
16491: AND
16492: PUSH
16493: LD_VAR 0 3
16497: PPUSH
16498: LD_INT 3
16500: PPUSH
16501: CALL_OW 275
16505: PUSH
16506: LD_VAR 0 4
16510: PUSH
16511: LD_INT 3
16513: ARRAY
16514: GREATEREQUAL
16515: AND
16516: ST_TO_ADDR
// end ;
16517: LD_VAR 0 2
16521: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
// pom := GetBase ( building ) ;
16527: LD_ADDR_VAR 0 4
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 274
16541: ST_TO_ADDR
// if not pom then
16542: LD_VAR 0 4
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16652
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16551: LD_ADDR_VAR 0 5
16555: PUSH
16556: LD_VAR 0 2
16560: PPUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 248
16570: PPUSH
16571: CALL_OW 450
16575: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16576: LD_ADDR_VAR 0 3
16580: PUSH
16581: LD_VAR 0 4
16585: PPUSH
16586: LD_INT 1
16588: PPUSH
16589: CALL_OW 275
16593: PUSH
16594: LD_VAR 0 5
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: GREATEREQUAL
16603: PUSH
16604: LD_VAR 0 4
16608: PPUSH
16609: LD_INT 2
16611: PPUSH
16612: CALL_OW 275
16616: PUSH
16617: LD_VAR 0 5
16621: PUSH
16622: LD_INT 2
16624: ARRAY
16625: GREATEREQUAL
16626: AND
16627: PUSH
16628: LD_VAR 0 4
16632: PPUSH
16633: LD_INT 3
16635: PPUSH
16636: CALL_OW 275
16640: PUSH
16641: LD_VAR 0 5
16645: PUSH
16646: LD_INT 3
16648: ARRAY
16649: GREATEREQUAL
16650: AND
16651: ST_TO_ADDR
// end ;
16652: LD_VAR 0 3
16656: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16657: LD_INT 0
16659: PPUSH
16660: PPUSH
16661: PPUSH
16662: PPUSH
16663: PPUSH
16664: PPUSH
16665: PPUSH
16666: PPUSH
16667: PPUSH
16668: PPUSH
16669: PPUSH
// result := false ;
16670: LD_ADDR_VAR 0 8
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16678: LD_VAR 0 5
16682: NOT
16683: PUSH
16684: LD_VAR 0 1
16688: NOT
16689: OR
16690: PUSH
16691: LD_VAR 0 2
16695: NOT
16696: OR
16697: PUSH
16698: LD_VAR 0 3
16702: NOT
16703: OR
16704: IFFALSE 16708
// exit ;
16706: GO 17522
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16708: LD_ADDR_VAR 0 14
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: LD_VAR 0 2
16722: PPUSH
16723: LD_VAR 0 3
16727: PPUSH
16728: LD_VAR 0 4
16732: PPUSH
16733: LD_VAR 0 5
16737: PUSH
16738: LD_INT 1
16740: ARRAY
16741: PPUSH
16742: CALL_OW 248
16746: PPUSH
16747: LD_INT 0
16749: PPUSH
16750: CALL 18755 0 6
16754: ST_TO_ADDR
// if not hexes then
16755: LD_VAR 0 14
16759: NOT
16760: IFFALSE 16764
// exit ;
16762: GO 17522
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16764: LD_ADDR_VAR 0 17
16768: PUSH
16769: LD_VAR 0 5
16773: PPUSH
16774: LD_INT 22
16776: PUSH
16777: LD_VAR 0 13
16781: PPUSH
16782: CALL_OW 255
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: LD_INT 30
16796: PUSH
16797: LD_INT 0
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 30
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PPUSH
16823: CALL_OW 72
16827: ST_TO_ADDR
// for i = 1 to hexes do
16828: LD_ADDR_VAR 0 9
16832: PUSH
16833: DOUBLE
16834: LD_INT 1
16836: DEC
16837: ST_TO_ADDR
16838: LD_VAR 0 14
16842: PUSH
16843: FOR_TO
16844: IFFALSE 17520
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16846: LD_ADDR_VAR 0 13
16850: PUSH
16851: LD_VAR 0 14
16855: PUSH
16856: LD_VAR 0 9
16860: ARRAY
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_VAR 0 14
16870: PUSH
16871: LD_VAR 0 9
16875: ARRAY
16876: PUSH
16877: LD_INT 2
16879: ARRAY
16880: PPUSH
16881: CALL_OW 428
16885: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16886: LD_VAR 0 14
16890: PUSH
16891: LD_VAR 0 9
16895: ARRAY
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PPUSH
16901: LD_VAR 0 14
16905: PUSH
16906: LD_VAR 0 9
16910: ARRAY
16911: PUSH
16912: LD_INT 2
16914: ARRAY
16915: PPUSH
16916: CALL_OW 351
16920: PUSH
16921: LD_VAR 0 14
16925: PUSH
16926: LD_VAR 0 9
16930: ARRAY
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_VAR 0 14
16940: PUSH
16941: LD_VAR 0 9
16945: ARRAY
16946: PUSH
16947: LD_INT 2
16949: ARRAY
16950: PPUSH
16951: CALL_OW 488
16955: NOT
16956: OR
16957: PUSH
16958: LD_VAR 0 13
16962: PPUSH
16963: CALL_OW 247
16967: PUSH
16968: LD_INT 3
16970: EQUAL
16971: OR
16972: IFFALSE 16978
// exit ;
16974: POP
16975: POP
16976: GO 17522
// if not tmp then
16978: LD_VAR 0 13
16982: NOT
16983: IFFALSE 16987
// continue ;
16985: GO 16843
// result := true ;
16987: LD_ADDR_VAR 0 8
16991: PUSH
16992: LD_INT 1
16994: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16995: LD_VAR 0 6
16999: PUSH
17000: LD_VAR 0 13
17004: PPUSH
17005: CALL_OW 247
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: AND
17014: PUSH
17015: LD_VAR 0 13
17019: PPUSH
17020: CALL_OW 263
17024: PUSH
17025: LD_INT 1
17027: EQUAL
17028: AND
17029: IFFALSE 17193
// begin if IsDrivenBy ( tmp ) then
17031: LD_VAR 0 13
17035: PPUSH
17036: CALL_OW 311
17040: IFFALSE 17044
// continue ;
17042: GO 16843
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17044: LD_VAR 0 6
17048: PPUSH
17049: LD_INT 3
17051: PUSH
17052: LD_INT 60
17054: PUSH
17055: EMPTY
17056: LIST
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 3
17064: PUSH
17065: LD_INT 55
17067: PUSH
17068: EMPTY
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PPUSH
17079: CALL_OW 72
17083: IFFALSE 17191
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17085: LD_ADDR_VAR 0 18
17089: PUSH
17090: LD_VAR 0 6
17094: PPUSH
17095: LD_INT 3
17097: PUSH
17098: LD_INT 60
17100: PUSH
17101: EMPTY
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: LD_INT 55
17113: PUSH
17114: EMPTY
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PPUSH
17125: CALL_OW 72
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: ST_TO_ADDR
// if IsInUnit ( driver ) then
17134: LD_VAR 0 18
17138: PPUSH
17139: CALL_OW 310
17143: IFFALSE 17154
// ComExit ( driver ) ;
17145: LD_VAR 0 18
17149: PPUSH
17150: CALL 42534 0 1
// AddComEnterUnit ( driver , tmp ) ;
17154: LD_VAR 0 18
17158: PPUSH
17159: LD_VAR 0 13
17163: PPUSH
17164: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17168: LD_VAR 0 18
17172: PPUSH
17173: LD_VAR 0 7
17177: PPUSH
17178: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17182: LD_VAR 0 18
17186: PPUSH
17187: CALL_OW 181
// end ; continue ;
17191: GO 16843
// end ; if not cleaners or not tmp in cleaners then
17193: LD_VAR 0 6
17197: NOT
17198: PUSH
17199: LD_VAR 0 13
17203: PUSH
17204: LD_VAR 0 6
17208: IN
17209: NOT
17210: OR
17211: IFFALSE 17518
// begin if dep then
17213: LD_VAR 0 17
17217: IFFALSE 17353
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17219: LD_ADDR_VAR 0 16
17223: PUSH
17224: LD_VAR 0 17
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PPUSH
17233: CALL_OW 250
17237: PPUSH
17238: LD_VAR 0 17
17242: PUSH
17243: LD_INT 1
17245: ARRAY
17246: PPUSH
17247: CALL_OW 254
17251: PPUSH
17252: LD_INT 5
17254: PPUSH
17255: CALL_OW 272
17259: PUSH
17260: LD_VAR 0 17
17264: PUSH
17265: LD_INT 1
17267: ARRAY
17268: PPUSH
17269: CALL_OW 251
17273: PPUSH
17274: LD_VAR 0 17
17278: PUSH
17279: LD_INT 1
17281: ARRAY
17282: PPUSH
17283: CALL_OW 254
17287: PPUSH
17288: LD_INT 5
17290: PPUSH
17291: CALL_OW 273
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17300: LD_VAR 0 16
17304: PUSH
17305: LD_INT 1
17307: ARRAY
17308: PPUSH
17309: LD_VAR 0 16
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: PPUSH
17318: CALL_OW 488
17322: IFFALSE 17353
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17324: LD_VAR 0 13
17328: PPUSH
17329: LD_VAR 0 16
17333: PUSH
17334: LD_INT 1
17336: ARRAY
17337: PPUSH
17338: LD_VAR 0 16
17342: PUSH
17343: LD_INT 2
17345: ARRAY
17346: PPUSH
17347: CALL_OW 111
// continue ;
17351: GO 16843
// end ; end ; r := GetDir ( tmp ) ;
17353: LD_ADDR_VAR 0 15
17357: PUSH
17358: LD_VAR 0 13
17362: PPUSH
17363: CALL_OW 254
17367: ST_TO_ADDR
// if r = 5 then
17368: LD_VAR 0 15
17372: PUSH
17373: LD_INT 5
17375: EQUAL
17376: IFFALSE 17386
// r := 0 ;
17378: LD_ADDR_VAR 0 15
17382: PUSH
17383: LD_INT 0
17385: ST_TO_ADDR
// for j = r to 5 do
17386: LD_ADDR_VAR 0 10
17390: PUSH
17391: DOUBLE
17392: LD_VAR 0 15
17396: DEC
17397: ST_TO_ADDR
17398: LD_INT 5
17400: PUSH
17401: FOR_TO
17402: IFFALSE 17516
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17404: LD_ADDR_VAR 0 11
17408: PUSH
17409: LD_VAR 0 13
17413: PPUSH
17414: CALL_OW 250
17418: PPUSH
17419: LD_VAR 0 10
17423: PPUSH
17424: LD_INT 2
17426: PPUSH
17427: CALL_OW 272
17431: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17432: LD_ADDR_VAR 0 12
17436: PUSH
17437: LD_VAR 0 13
17441: PPUSH
17442: CALL_OW 251
17446: PPUSH
17447: LD_VAR 0 10
17451: PPUSH
17452: LD_INT 2
17454: PPUSH
17455: CALL_OW 273
17459: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17460: LD_VAR 0 11
17464: PPUSH
17465: LD_VAR 0 12
17469: PPUSH
17470: CALL_OW 488
17474: PUSH
17475: LD_VAR 0 11
17479: PPUSH
17480: LD_VAR 0 12
17484: PPUSH
17485: CALL_OW 428
17489: NOT
17490: AND
17491: IFFALSE 17514
// begin ComMoveXY ( tmp , _x , _y ) ;
17493: LD_VAR 0 13
17497: PPUSH
17498: LD_VAR 0 11
17502: PPUSH
17503: LD_VAR 0 12
17507: PPUSH
17508: CALL_OW 111
// break ;
17512: GO 17516
// end ; end ;
17514: GO 17401
17516: POP
17517: POP
// end ; end ;
17518: GO 16843
17520: POP
17521: POP
// end ;
17522: LD_VAR 0 8
17526: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17527: LD_INT 0
17529: PPUSH
// result := true ;
17530: LD_ADDR_VAR 0 3
17534: PUSH
17535: LD_INT 1
17537: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17538: LD_VAR 0 2
17542: PUSH
17543: LD_INT 24
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17557
17549: LD_INT 33
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17582
17557: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17558: LD_ADDR_VAR 0 3
17562: PUSH
17563: LD_INT 32
17565: PPUSH
17566: LD_VAR 0 1
17570: PPUSH
17571: CALL_OW 321
17575: PUSH
17576: LD_INT 2
17578: EQUAL
17579: ST_TO_ADDR
17580: GO 17898
17582: LD_INT 20
17584: DOUBLE
17585: EQUAL
17586: IFTRUE 17590
17588: GO 17615
17590: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17591: LD_ADDR_VAR 0 3
17595: PUSH
17596: LD_INT 6
17598: PPUSH
17599: LD_VAR 0 1
17603: PPUSH
17604: CALL_OW 321
17608: PUSH
17609: LD_INT 2
17611: EQUAL
17612: ST_TO_ADDR
17613: GO 17898
17615: LD_INT 22
17617: DOUBLE
17618: EQUAL
17619: IFTRUE 17629
17621: LD_INT 36
17623: DOUBLE
17624: EQUAL
17625: IFTRUE 17629
17627: GO 17654
17629: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17630: LD_ADDR_VAR 0 3
17634: PUSH
17635: LD_INT 15
17637: PPUSH
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 321
17647: PUSH
17648: LD_INT 2
17650: EQUAL
17651: ST_TO_ADDR
17652: GO 17898
17654: LD_INT 30
17656: DOUBLE
17657: EQUAL
17658: IFTRUE 17662
17660: GO 17687
17662: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17663: LD_ADDR_VAR 0 3
17667: PUSH
17668: LD_INT 20
17670: PPUSH
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 321
17680: PUSH
17681: LD_INT 2
17683: EQUAL
17684: ST_TO_ADDR
17685: GO 17898
17687: LD_INT 28
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17701
17693: LD_INT 21
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 17726
17701: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_INT 21
17709: PPUSH
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 321
17719: PUSH
17720: LD_INT 2
17722: EQUAL
17723: ST_TO_ADDR
17724: GO 17898
17726: LD_INT 16
17728: DOUBLE
17729: EQUAL
17730: IFTRUE 17734
17732: GO 17759
17734: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_INT 84
17742: PPUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 321
17752: PUSH
17753: LD_INT 2
17755: EQUAL
17756: ST_TO_ADDR
17757: GO 17898
17759: LD_INT 19
17761: DOUBLE
17762: EQUAL
17763: IFTRUE 17773
17765: LD_INT 23
17767: DOUBLE
17768: EQUAL
17769: IFTRUE 17773
17771: GO 17798
17773: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17774: LD_ADDR_VAR 0 3
17778: PUSH
17779: LD_INT 83
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 321
17791: PUSH
17792: LD_INT 2
17794: EQUAL
17795: ST_TO_ADDR
17796: GO 17898
17798: LD_INT 17
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 17831
17806: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17807: LD_ADDR_VAR 0 3
17811: PUSH
17812: LD_INT 39
17814: PPUSH
17815: LD_VAR 0 1
17819: PPUSH
17820: CALL_OW 321
17824: PUSH
17825: LD_INT 2
17827: EQUAL
17828: ST_TO_ADDR
17829: GO 17898
17831: LD_INT 18
17833: DOUBLE
17834: EQUAL
17835: IFTRUE 17839
17837: GO 17864
17839: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17840: LD_ADDR_VAR 0 3
17844: PUSH
17845: LD_INT 40
17847: PPUSH
17848: LD_VAR 0 1
17852: PPUSH
17853: CALL_OW 321
17857: PUSH
17858: LD_INT 2
17860: EQUAL
17861: ST_TO_ADDR
17862: GO 17898
17864: LD_INT 27
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 17897
17872: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17873: LD_ADDR_VAR 0 3
17877: PUSH
17878: LD_INT 35
17880: PPUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 321
17890: PUSH
17891: LD_INT 2
17893: EQUAL
17894: ST_TO_ADDR
17895: GO 17898
17897: POP
// end ;
17898: LD_VAR 0 3
17902: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17903: LD_INT 0
17905: PPUSH
17906: PPUSH
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
17914: PPUSH
17915: PPUSH
// result := false ;
17916: LD_ADDR_VAR 0 6
17920: PUSH
17921: LD_INT 0
17923: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17924: LD_VAR 0 1
17928: NOT
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 266
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: IN
17950: NOT
17951: OR
17952: PUSH
17953: LD_VAR 0 2
17957: NOT
17958: OR
17959: PUSH
17960: LD_VAR 0 5
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: LD_INT 3
17976: PUSH
17977: LD_INT 4
17979: PUSH
17980: LD_INT 5
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: IN
17991: NOT
17992: OR
17993: PUSH
17994: LD_VAR 0 3
17998: PPUSH
17999: LD_VAR 0 4
18003: PPUSH
18004: CALL_OW 488
18008: NOT
18009: OR
18010: IFFALSE 18014
// exit ;
18012: GO 18750
// side := GetSide ( depot ) ;
18014: LD_ADDR_VAR 0 9
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 255
18028: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18029: LD_VAR 0 9
18033: PPUSH
18034: LD_VAR 0 2
18038: PPUSH
18039: CALL 17527 0 2
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18750
// pom := GetBase ( depot ) ;
18048: LD_ADDR_VAR 0 10
18052: PUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 274
18062: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18063: LD_ADDR_VAR 0 11
18067: PUSH
18068: LD_VAR 0 2
18072: PPUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 248
18082: PPUSH
18083: CALL_OW 450
18087: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18088: LD_VAR 0 10
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: CALL_OW 275
18100: PUSH
18101: LD_VAR 0 11
18105: PUSH
18106: LD_INT 1
18108: ARRAY
18109: GREATEREQUAL
18110: PUSH
18111: LD_VAR 0 10
18115: PPUSH
18116: LD_INT 2
18118: PPUSH
18119: CALL_OW 275
18123: PUSH
18124: LD_VAR 0 11
18128: PUSH
18129: LD_INT 2
18131: ARRAY
18132: GREATEREQUAL
18133: AND
18134: PUSH
18135: LD_VAR 0 10
18139: PPUSH
18140: LD_INT 3
18142: PPUSH
18143: CALL_OW 275
18147: PUSH
18148: LD_VAR 0 11
18152: PUSH
18153: LD_INT 3
18155: ARRAY
18156: GREATEREQUAL
18157: AND
18158: NOT
18159: IFFALSE 18163
// exit ;
18161: GO 18750
// if GetBType ( depot ) = b_depot then
18163: LD_VAR 0 1
18167: PPUSH
18168: CALL_OW 266
18172: PUSH
18173: LD_INT 0
18175: EQUAL
18176: IFFALSE 18188
// dist := 28 else
18178: LD_ADDR_VAR 0 14
18182: PUSH
18183: LD_INT 28
18185: ST_TO_ADDR
18186: GO 18196
// dist := 36 ;
18188: LD_ADDR_VAR 0 14
18192: PUSH
18193: LD_INT 36
18195: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18196: LD_VAR 0 1
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: LD_VAR 0 4
18210: PPUSH
18211: CALL_OW 297
18215: PUSH
18216: LD_VAR 0 14
18220: GREATER
18221: IFFALSE 18225
// exit ;
18223: GO 18750
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18225: LD_ADDR_VAR 0 12
18229: PUSH
18230: LD_VAR 0 2
18234: PPUSH
18235: LD_VAR 0 3
18239: PPUSH
18240: LD_VAR 0 4
18244: PPUSH
18245: LD_VAR 0 5
18249: PPUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 248
18259: PPUSH
18260: LD_INT 0
18262: PPUSH
18263: CALL 18755 0 6
18267: ST_TO_ADDR
// if not hexes then
18268: LD_VAR 0 12
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18750
// hex := GetHexInfo ( x , y ) ;
18277: LD_ADDR_VAR 0 15
18281: PUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: LD_VAR 0 4
18291: PPUSH
18292: CALL_OW 546
18296: ST_TO_ADDR
// if hex [ 1 ] then
18297: LD_VAR 0 15
18301: PUSH
18302: LD_INT 1
18304: ARRAY
18305: IFFALSE 18309
// exit ;
18307: GO 18750
// height := hex [ 2 ] ;
18309: LD_ADDR_VAR 0 13
18313: PUSH
18314: LD_VAR 0 15
18318: PUSH
18319: LD_INT 2
18321: ARRAY
18322: ST_TO_ADDR
// for i = 1 to hexes do
18323: LD_ADDR_VAR 0 7
18327: PUSH
18328: DOUBLE
18329: LD_INT 1
18331: DEC
18332: ST_TO_ADDR
18333: LD_VAR 0 12
18337: PUSH
18338: FOR_TO
18339: IFFALSE 18669
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18341: LD_VAR 0 12
18345: PUSH
18346: LD_VAR 0 7
18350: ARRAY
18351: PUSH
18352: LD_INT 1
18354: ARRAY
18355: PPUSH
18356: LD_VAR 0 12
18360: PUSH
18361: LD_VAR 0 7
18365: ARRAY
18366: PUSH
18367: LD_INT 2
18369: ARRAY
18370: PPUSH
18371: CALL_OW 488
18375: NOT
18376: PUSH
18377: LD_VAR 0 12
18381: PUSH
18382: LD_VAR 0 7
18386: ARRAY
18387: PUSH
18388: LD_INT 1
18390: ARRAY
18391: PPUSH
18392: LD_VAR 0 12
18396: PUSH
18397: LD_VAR 0 7
18401: ARRAY
18402: PUSH
18403: LD_INT 2
18405: ARRAY
18406: PPUSH
18407: CALL_OW 428
18411: PUSH
18412: LD_INT 0
18414: GREATER
18415: OR
18416: PUSH
18417: LD_VAR 0 12
18421: PUSH
18422: LD_VAR 0 7
18426: ARRAY
18427: PUSH
18428: LD_INT 1
18430: ARRAY
18431: PPUSH
18432: LD_VAR 0 12
18436: PUSH
18437: LD_VAR 0 7
18441: ARRAY
18442: PUSH
18443: LD_INT 2
18445: ARRAY
18446: PPUSH
18447: CALL_OW 351
18451: OR
18452: IFFALSE 18458
// exit ;
18454: POP
18455: POP
18456: GO 18750
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18458: LD_ADDR_VAR 0 8
18462: PUSH
18463: LD_VAR 0 12
18467: PUSH
18468: LD_VAR 0 7
18472: ARRAY
18473: PUSH
18474: LD_INT 1
18476: ARRAY
18477: PPUSH
18478: LD_VAR 0 12
18482: PUSH
18483: LD_VAR 0 7
18487: ARRAY
18488: PUSH
18489: LD_INT 2
18491: ARRAY
18492: PPUSH
18493: CALL_OW 546
18497: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18498: LD_VAR 0 8
18502: PUSH
18503: LD_INT 1
18505: ARRAY
18506: PUSH
18507: LD_VAR 0 8
18511: PUSH
18512: LD_INT 2
18514: ARRAY
18515: PUSH
18516: LD_VAR 0 13
18520: PUSH
18521: LD_INT 2
18523: PLUS
18524: GREATER
18525: OR
18526: PUSH
18527: LD_VAR 0 8
18531: PUSH
18532: LD_INT 2
18534: ARRAY
18535: PUSH
18536: LD_VAR 0 13
18540: PUSH
18541: LD_INT 2
18543: MINUS
18544: LESS
18545: OR
18546: PUSH
18547: LD_VAR 0 8
18551: PUSH
18552: LD_INT 3
18554: ARRAY
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 8
18561: PUSH
18562: LD_INT 9
18564: PUSH
18565: LD_INT 10
18567: PUSH
18568: LD_INT 11
18570: PUSH
18571: LD_INT 12
18573: PUSH
18574: LD_INT 13
18576: PUSH
18577: LD_INT 16
18579: PUSH
18580: LD_INT 17
18582: PUSH
18583: LD_INT 18
18585: PUSH
18586: LD_INT 19
18588: PUSH
18589: LD_INT 20
18591: PUSH
18592: LD_INT 21
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: IN
18610: NOT
18611: OR
18612: PUSH
18613: LD_VAR 0 8
18617: PUSH
18618: LD_INT 5
18620: ARRAY
18621: NOT
18622: OR
18623: PUSH
18624: LD_VAR 0 8
18628: PUSH
18629: LD_INT 6
18631: ARRAY
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 2
18638: PUSH
18639: LD_INT 7
18641: PUSH
18642: LD_INT 9
18644: PUSH
18645: LD_INT 10
18647: PUSH
18648: LD_INT 11
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: IN
18659: NOT
18660: OR
18661: IFFALSE 18667
// exit ;
18663: POP
18664: POP
18665: GO 18750
// end ;
18667: GO 18338
18669: POP
18670: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18671: LD_VAR 0 9
18675: PPUSH
18676: LD_VAR 0 3
18680: PPUSH
18681: LD_VAR 0 4
18685: PPUSH
18686: LD_INT 20
18688: PPUSH
18689: CALL 10702 0 4
18693: PUSH
18694: LD_INT 4
18696: ARRAY
18697: IFFALSE 18701
// exit ;
18699: GO 18750
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18701: LD_VAR 0 2
18705: PUSH
18706: LD_INT 29
18708: PUSH
18709: LD_INT 30
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: IN
18716: PUSH
18717: LD_VAR 0 3
18721: PPUSH
18722: LD_VAR 0 4
18726: PPUSH
18727: LD_VAR 0 9
18731: PPUSH
18732: CALL_OW 440
18736: NOT
18737: AND
18738: IFFALSE 18742
// exit ;
18740: GO 18750
// result := true ;
18742: LD_ADDR_VAR 0 6
18746: PUSH
18747: LD_INT 1
18749: ST_TO_ADDR
// end ;
18750: LD_VAR 0 6
18754: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18755: LD_INT 0
18757: PPUSH
18758: PPUSH
18759: PPUSH
18760: PPUSH
18761: PPUSH
18762: PPUSH
18763: PPUSH
18764: PPUSH
18765: PPUSH
18766: PPUSH
18767: PPUSH
18768: PPUSH
18769: PPUSH
18770: PPUSH
18771: PPUSH
18772: PPUSH
18773: PPUSH
18774: PPUSH
18775: PPUSH
18776: PPUSH
18777: PPUSH
18778: PPUSH
18779: PPUSH
18780: PPUSH
18781: PPUSH
18782: PPUSH
18783: PPUSH
18784: PPUSH
18785: PPUSH
18786: PPUSH
18787: PPUSH
18788: PPUSH
18789: PPUSH
18790: PPUSH
18791: PPUSH
18792: PPUSH
18793: PPUSH
18794: PPUSH
18795: PPUSH
18796: PPUSH
18797: PPUSH
18798: PPUSH
18799: PPUSH
18800: PPUSH
18801: PPUSH
18802: PPUSH
18803: PPUSH
18804: PPUSH
18805: PPUSH
18806: PPUSH
18807: PPUSH
18808: PPUSH
18809: PPUSH
18810: PPUSH
18811: PPUSH
18812: PPUSH
18813: PPUSH
18814: PPUSH
// result = [ ] ;
18815: LD_ADDR_VAR 0 7
18819: PUSH
18820: EMPTY
18821: ST_TO_ADDR
// temp_list = [ ] ;
18822: LD_ADDR_VAR 0 9
18826: PUSH
18827: EMPTY
18828: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18829: LD_VAR 0 4
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 3
18845: PUSH
18846: LD_INT 4
18848: PUSH
18849: LD_INT 5
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: IN
18860: NOT
18861: PUSH
18862: LD_VAR 0 1
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: IN
18877: PUSH
18878: LD_VAR 0 5
18882: PUSH
18883: LD_INT 1
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: IN
18897: NOT
18898: AND
18899: OR
18900: IFFALSE 18904
// exit ;
18902: GO 37295
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 6
18911: PUSH
18912: LD_INT 7
18914: PUSH
18915: LD_INT 8
18917: PUSH
18918: LD_INT 13
18920: PUSH
18921: LD_INT 12
18923: PUSH
18924: LD_INT 15
18926: PUSH
18927: LD_INT 11
18929: PUSH
18930: LD_INT 14
18932: PUSH
18933: LD_INT 10
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: IN
18947: IFFALSE 18957
// btype = b_lab ;
18949: LD_ADDR_VAR 0 1
18953: PUSH
18954: LD_INT 6
18956: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18957: LD_VAR 0 6
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 2
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: IN
18976: NOT
18977: PUSH
18978: LD_VAR 0 1
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: LD_INT 2
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: LD_INT 6
18997: PUSH
18998: LD_INT 36
19000: PUSH
19001: LD_INT 4
19003: PUSH
19004: LD_INT 5
19006: PUSH
19007: LD_INT 31
19009: PUSH
19010: LD_INT 32
19012: PUSH
19013: LD_INT 33
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: IN
19029: NOT
19030: PUSH
19031: LD_VAR 0 6
19035: PUSH
19036: LD_INT 1
19038: EQUAL
19039: AND
19040: OR
19041: PUSH
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 2
19049: PUSH
19050: LD_INT 3
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: IN
19057: NOT
19058: PUSH
19059: LD_VAR 0 6
19063: PUSH
19064: LD_INT 2
19066: EQUAL
19067: AND
19068: OR
19069: IFFALSE 19079
// mode = 0 ;
19071: LD_ADDR_VAR 0 6
19075: PUSH
19076: LD_INT 0
19078: ST_TO_ADDR
// case mode of 0 :
19079: LD_VAR 0 6
19083: PUSH
19084: LD_INT 0
19086: DOUBLE
19087: EQUAL
19088: IFTRUE 19092
19090: GO 30545
19092: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19093: LD_ADDR_VAR 0 11
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 1
19162: NEG
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: LD_INT 2
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: LD_INT 3
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: LD_INT 3
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 1
19259: NEG
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19286: LD_ADDR_VAR 0 12
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 0
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: NEG
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: NEG
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 2
19420: NEG
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 2
19432: NEG
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 3
19443: NEG
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 3
19454: NEG
19455: PUSH
19456: LD_INT 1
19458: NEG
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19482: LD_ADDR_VAR 0 13
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 1
19551: NEG
19552: PUSH
19553: LD_INT 1
19555: NEG
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: NEG
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 3
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 3
19641: NEG
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 3
19653: NEG
19654: PUSH
19655: LD_INT 3
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19681: LD_ADDR_VAR 0 14
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: LD_INT 0
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 1
19739: NEG
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 1
19762: NEG
19763: PUSH
19764: LD_INT 2
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 0
19774: PUSH
19775: LD_INT 2
19777: NEG
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: LD_INT 1
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: LD_INT 2
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 0
19806: PUSH
19807: LD_INT 2
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: LD_INT 3
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: LD_INT 3
19842: NEG
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: LD_INT 2
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19877: LD_ADDR_VAR 0 15
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 0
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 1
19961: NEG
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 2
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: LD_INT 0
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: LD_INT 1
20026: NEG
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 3
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 3
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20070: LD_ADDR_VAR 0 16
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 0
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: LD_INT 1
20090: NEG
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: LD_INT 1
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: LD_INT 2
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 2
20193: NEG
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: NEG
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 3
20227: PUSH
20228: LD_INT 3
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 3
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20263: LD_ADDR_VAR 0 17
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: LD_INT 1
20283: NEG
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: NEG
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 2
20439: NEG
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20493: LD_ADDR_VAR 0 18
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 2
20669: NEG
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: NEG
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 2
20692: NEG
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20723: LD_ADDR_VAR 0 19
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 1
20804: NEG
20805: PUSH
20806: LD_INT 2
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: LD_INT 2
20819: NEG
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 2
20899: NEG
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: NEG
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 2
20922: NEG
20923: PUSH
20924: LD_INT 2
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20953: LD_ADDR_VAR 0 20
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: LD_INT 2
21038: NEG
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: LD_INT 2
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: LD_INT 2
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 0
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: NEG
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: NEG
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: NEG
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 2
21152: NEG
21153: PUSH
21154: LD_INT 2
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21183: LD_ADDR_VAR 0 21
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: LD_INT 1
21203: NEG
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: LD_INT 0
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: LD_INT 1
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: LD_INT 2
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: LD_INT 2
21279: NEG
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: LD_INT 1
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 2
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 2
21359: NEG
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 2
21370: NEG
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: LD_INT 2
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21413: LD_ADDR_VAR 0 22
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: NEG
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21643: LD_ADDR_VAR 0 23
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: LD_INT 1
21663: NEG
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 1
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: NEG
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: NEG
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 0
21736: PUSH
21737: LD_INT 2
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: LD_INT 1
21750: NEG
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 1
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 2
21819: NEG
21820: PUSH
21821: LD_INT 0
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 2
21830: NEG
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 2
21842: NEG
21843: PUSH
21844: LD_INT 2
21846: NEG
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: LD_INT 3
21858: NEG
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: LD_INT 3
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21923: LD_ADDR_VAR 0 24
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 2
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: LD_INT 2
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: NEG
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: NEG
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: LD_INT 2
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22199: LD_ADDR_VAR 0 25
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 2
22386: NEG
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: LD_INT 2
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 3
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 3
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 3
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22473: LD_ADDR_VAR 0 26
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: LD_INT 2
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 0
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: NEG
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: NEG
22673: PUSH
22674: LD_INT 2
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 3
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: LD_INT 3
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 1
22704: NEG
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: NEG
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22749: LD_ADDR_VAR 0 27
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: LD_INT 0
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 0
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: NEG
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: NEG
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: LD_INT 2
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 2
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 0
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: NEG
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 2
22936: NEG
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: LD_INT 2
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 2
22971: NEG
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 3
22982: NEG
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 3
22994: NEG
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23029: LD_ADDR_VAR 0 28
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: LD_INT 0
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: LD_INT 0
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 2
23144: PUSH
23145: LD_INT 0
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 2
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: LD_INT 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 2
23240: NEG
23241: PUSH
23242: LD_INT 3
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: LD_INT 3
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 3
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23311: LD_ADDR_VAR 0 29
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 2
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: NEG
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: NEG
23490: PUSH
23491: LD_INT 2
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: LD_INT 3
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: LD_INT 1
23516: NEG
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 3
23555: NEG
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23590: LD_ADDR_VAR 0 30
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: LD_INT 2
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: LD_INT 2
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 2
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 2
23756: NEG
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: NEG
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: LD_INT 3
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: LD_INT 2
23794: NEG
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 3
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 3
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 2
23822: NEG
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 3
23833: NEG
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23868: LD_ADDR_VAR 0 31
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 2
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 2
24033: NEG
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 2
24045: NEG
24046: PUSH
24047: LD_INT 2
24049: NEG
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 2
24057: NEG
24058: PUSH
24059: LD_INT 3
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 3
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 2
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 3
24111: NEG
24112: PUSH
24113: LD_INT 2
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24146: LD_ADDR_VAR 0 32
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: LD_INT 2
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: LD_INT 3
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 2
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 3
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 3
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: NEG
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 3
24389: NEG
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24424: LD_ADDR_VAR 0 33
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 1
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 2
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 2
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 2
24579: NEG
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 2
24590: NEG
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 2
24602: NEG
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 2
24614: NEG
24615: PUSH
24616: LD_INT 3
24618: NEG
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 1
24657: NEG
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 3
24668: NEG
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24703: LD_ADDR_VAR 0 34
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: LD_INT 2
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: NEG
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: NEG
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: LD_INT 3
24898: NEG
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 3
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 2
24937: NEG
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 3
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24983: LD_ADDR_VAR 0 35
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 2
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 2
25074: NEG
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25095: LD_ADDR_VAR 0 36
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 2
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25207: LD_ADDR_VAR 0 37
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25319: LD_ADDR_VAR 0 38
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: LD_INT 1
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25431: LD_ADDR_VAR 0 39
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 1
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: NEG
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 2
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25543: LD_ADDR_VAR 0 40
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25655: LD_ADDR_VAR 0 41
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: LD_INT 2
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: LD_INT 3
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 3
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: LD_INT 3
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: NEG
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 3
25929: NEG
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 3
25940: NEG
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 3
25952: NEG
25953: PUSH
25954: LD_INT 2
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 3
25964: NEG
25965: PUSH
25966: LD_INT 3
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26005: LD_ADDR_VAR 0 42
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: LD_INT 2
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: NEG
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: LD_INT 3
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: LD_INT 3
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 3
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 3
26251: PUSH
26252: LD_INT 3
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: LD_INT 3
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: LD_INT 3
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: LD_INT 2
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 3
26302: NEG
26303: PUSH
26304: LD_INT 2
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: NEG
26315: PUSH
26316: LD_INT 3
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26355: LD_ADDR_VAR 0 43
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: LD_INT 2
26440: NEG
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: LD_INT 2
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 3
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 3
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: LD_INT 2
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 3
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: LD_INT 3
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: NEG
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 3
26651: NEG
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 3
26662: NEG
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26703: LD_ADDR_VAR 0 44
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: LD_INT 2
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 2
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 2
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 2
26869: NEG
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: NEG
26882: PUSH
26883: LD_INT 2
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: NEG
26894: PUSH
26895: LD_INT 3
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 1
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 3
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 3
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: LD_INT 3
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 3
26977: NEG
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 3
26988: NEG
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 3
27000: NEG
27001: PUSH
27002: LD_INT 2
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 3
27012: NEG
27013: PUSH
27014: LD_INT 3
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27053: LD_ADDR_VAR 0 45
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 2
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: LD_INT 3
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: LD_INT 3
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 3
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 3
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 3
27299: PUSH
27300: LD_INT 3
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: LD_INT 3
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 3
27350: NEG
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 3
27362: NEG
27363: PUSH
27364: LD_INT 3
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27403: LD_ADDR_VAR 0 46
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: NEG
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: LD_INT 2
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 2
27580: NEG
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: LD_INT 3
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 3
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 3
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 3
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 3
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 2
27688: NEG
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 3
27699: NEG
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 3
27710: NEG
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27751: LD_ADDR_VAR 0 47
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 2
27878: NEG
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27902: LD_ADDR_VAR 0 48
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 2
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28049: LD_ADDR_VAR 0 49
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: LD_INT 0
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28193: LD_ADDR_VAR 0 50
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: LD_INT 2
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28337: LD_ADDR_VAR 0 51
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: LD_INT 1
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 2
28449: NEG
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 1
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28484: LD_ADDR_VAR 0 52
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: LD_INT 2
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28635: LD_ADDR_VAR 0 53
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 0
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: NEG
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 2
28834: NEG
28835: PUSH
28836: LD_INT 2
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28865: LD_ADDR_VAR 0 54
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 2
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29095: LD_ADDR_VAR 0 55
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: LD_INT 2
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29325: LD_ADDR_VAR 0 56
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: LD_INT 2
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 2
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 2
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: LD_INT 2
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: NEG
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 2
29524: NEG
29525: PUSH
29526: LD_INT 2
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29555: LD_ADDR_VAR 0 57
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 2
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: LD_INT 2
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29785: LD_ADDR_VAR 0 58
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: LD_INT 2
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: LD_INT 2
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 2
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: NEG
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 2
29984: NEG
29985: PUSH
29986: LD_INT 2
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30015: LD_ADDR_VAR 0 59
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 0
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30103: LD_ADDR_VAR 0 60
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30191: LD_ADDR_VAR 0 61
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30279: LD_ADDR_VAR 0 62
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30367: LD_ADDR_VAR 0 63
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: LD_INT 1
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30455: LD_ADDR_VAR 0 64
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: LD_INT 0
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// end ; 1 :
30543: GO 36440
30545: LD_INT 1
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 33176
30553: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30554: LD_ADDR_VAR 0 11
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30598: LD_ADDR_VAR 0 12
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30639: LD_ADDR_VAR 0 13
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30679: LD_ADDR_VAR 0 14
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30720: LD_ADDR_VAR 0 15
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30764: LD_ADDR_VAR 0 16
30768: PUSH
30769: LD_INT 2
30771: NEG
30772: PUSH
30773: LD_INT 3
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 3
30783: NEG
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: LIST
30809: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30810: LD_ADDR_VAR 0 17
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: LD_INT 3
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30854: LD_ADDR_VAR 0 18
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30895: LD_ADDR_VAR 0 19
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: LD_INT 3
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: LD_INT 3
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30935: LD_ADDR_VAR 0 20
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30976: LD_ADDR_VAR 0 21
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 3
30994: NEG
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: NEG
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31020: LD_ADDR_VAR 0 22
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 3
31039: NEG
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 3
31051: NEG
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31066: LD_ADDR_VAR 0 23
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 4
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: LD_INT 3
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31110: LD_ADDR_VAR 0 24
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 3
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 4
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31151: LD_ADDR_VAR 0 25
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: LD_INT 4
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31191: LD_ADDR_VAR 0 26
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 3
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 4
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31232: LD_ADDR_VAR 0 27
31236: PUSH
31237: LD_INT 3
31239: NEG
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: NEG
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 4
31261: NEG
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: LIST
31275: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31276: LD_ADDR_VAR 0 28
31280: PUSH
31281: LD_INT 3
31283: NEG
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 3
31295: NEG
31296: PUSH
31297: LD_INT 4
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 4
31307: NEG
31308: PUSH
31309: LD_INT 3
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31322: LD_ADDR_VAR 0 29
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: LD_INT 4
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 4
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: LD_INT 5
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 5
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: LD_INT 4
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 6
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 6
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: LD_INT 5
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31477: LD_ADDR_VAR 0 30
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 4
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 4
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 5
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 5
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 5
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 6
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 6
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31620: LD_ADDR_VAR 0 31
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 4
31657: PUSH
31658: LD_INT 3
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 4
31667: PUSH
31668: LD_INT 4
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: LD_INT 4
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 5
31687: PUSH
31688: LD_INT 4
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 5
31697: PUSH
31698: LD_INT 5
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 4
31707: PUSH
31708: LD_INT 5
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 6
31717: PUSH
31718: LD_INT 5
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 6
31727: PUSH
31728: LD_INT 6
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 5
31737: PUSH
31738: LD_INT 6
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31759: LD_ADDR_VAR 0 32
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 3
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 4
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: LD_INT 5
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: LD_INT 5
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: LD_INT 4
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: LD_INT 6
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 6
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: LD_INT 5
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31902: LD_ADDR_VAR 0 33
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 3
31920: NEG
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 3
31943: NEG
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 4
31954: NEG
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 4
31965: NEG
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 4
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 5
31988: NEG
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 5
31999: NEG
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 5
32011: NEG
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 6
32022: NEG
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 6
32033: NEG
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32057: LD_ADDR_VAR 0 34
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: LD_INT 3
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: LD_INT 3
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: NEG
32101: PUSH
32102: LD_INT 4
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 4
32112: NEG
32113: PUSH
32114: LD_INT 3
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 4
32124: NEG
32125: PUSH
32126: LD_INT 4
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 4
32136: NEG
32137: PUSH
32138: LD_INT 5
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 5
32148: NEG
32149: PUSH
32150: LD_INT 4
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 5
32160: NEG
32161: PUSH
32162: LD_INT 5
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 5
32172: NEG
32173: PUSH
32174: LD_INT 6
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 6
32184: NEG
32185: PUSH
32186: LD_INT 5
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 6
32196: NEG
32197: PUSH
32198: LD_INT 6
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32220: LD_ADDR_VAR 0 41
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 3
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32264: LD_ADDR_VAR 0 42
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32305: LD_ADDR_VAR 0 43
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 3
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32345: LD_ADDR_VAR 0 44
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32386: LD_ADDR_VAR 0 45
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32430: LD_ADDR_VAR 0 46
32434: PUSH
32435: LD_INT 2
32437: NEG
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: NEG
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32476: LD_ADDR_VAR 0 47
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: LD_INT 3
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32509: LD_ADDR_VAR 0 48
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: LD_INT 2
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32540: LD_ADDR_VAR 0 49
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32569: LD_ADDR_VAR 0 50
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: LD_INT 3
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32598: LD_ADDR_VAR 0 51
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32629: LD_ADDR_VAR 0 52
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 3
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32662: LD_ADDR_VAR 0 53
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 3
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 2
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32706: LD_ADDR_VAR 0 54
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 3
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32747: LD_ADDR_VAR 0 55
32751: PUSH
32752: LD_INT 3
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 3
32764: PUSH
32765: LD_INT 3
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 3
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32787: LD_ADDR_VAR 0 56
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: LD_INT 3
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32828: LD_ADDR_VAR 0 57
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 3
32846: NEG
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32872: LD_ADDR_VAR 0 58
32876: PUSH
32877: LD_INT 2
32879: NEG
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 3
32891: NEG
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 3
32903: NEG
32904: PUSH
32905: LD_INT 3
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: LIST
32917: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32918: LD_ADDR_VAR 0 59
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: LD_INT 2
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32962: LD_ADDR_VAR 0 60
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 1
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33003: LD_ADDR_VAR 0 61
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33043: LD_ADDR_VAR 0 62
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33084: LD_ADDR_VAR 0 63
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: NEG
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33128: LD_ADDR_VAR 0 64
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: LD_INT 2
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 2
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: ST_TO_ADDR
// end ; 2 :
33174: GO 36440
33176: LD_INT 2
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 36439
33184: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33185: LD_ADDR_VAR 0 29
33189: PUSH
33190: LD_INT 4
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 4
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 5
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 4
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 5
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 3
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 3
33295: PUSH
33296: LD_INT 2
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 4
33305: PUSH
33306: LD_INT 3
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: LD_INT 4
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 3
33325: PUSH
33326: LD_INT 4
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: LD_INT 3
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 4
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: LD_INT 4
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: LD_INT 4
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: LD_INT 3
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 4
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: LD_INT 5
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: LD_INT 5
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: LD_INT 4
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: NEG
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: LD_INT 5
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 2
33457: NEG
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 3
33468: NEG
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 3
33479: NEG
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 3
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 4
33524: NEG
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 4
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 4
33547: NEG
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 4
33570: NEG
33571: PUSH
33572: LD_INT 4
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 4
33582: NEG
33583: PUSH
33584: LD_INT 5
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: NEG
33595: PUSH
33596: LD_INT 4
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 3
33606: NEG
33607: PUSH
33608: LD_INT 3
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 4
33618: NEG
33619: PUSH
33620: LD_INT 3
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 5
33630: NEG
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 5
33642: NEG
33643: PUSH
33644: LD_INT 5
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: LD_INT 5
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 5
33666: NEG
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33723: LD_ADDR_VAR 0 30
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: LD_INT 4
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 4
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 5
33750: PUSH
33751: LD_INT 4
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: LD_INT 5
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 4
33770: PUSH
33771: LD_INT 5
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: LD_INT 4
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: LD_INT 3
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 5
33800: PUSH
33801: LD_INT 3
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 3
33810: PUSH
33811: LD_INT 5
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: LD_INT 4
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 4
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: LD_INT 3
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: LD_INT 4
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 4
33913: NEG
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 4
33924: NEG
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 3
33936: NEG
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 3
33947: NEG
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 4
33958: NEG
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 5
33969: NEG
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 5
33980: NEG
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 5
33992: NEG
33993: PUSH
33994: LD_INT 2
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 3
34004: NEG
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: NEG
34016: PUSH
34017: LD_INT 3
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: NEG
34028: PUSH
34029: LD_INT 4
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: LD_INT 3
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 2
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 3
34063: NEG
34064: PUSH
34065: LD_INT 2
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 4
34075: NEG
34076: PUSH
34077: LD_INT 3
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 4
34087: NEG
34088: PUSH
34089: LD_INT 4
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: LD_INT 4
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 4
34111: NEG
34112: PUSH
34113: LD_INT 2
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 4
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: LD_INT 5
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: LD_INT 4
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: LD_INT 3
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 3
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 4
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: NEG
34191: PUSH
34192: LD_INT 5
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: LD_INT 5
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34270: LD_ADDR_VAR 0 31
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 4
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: LD_INT 3
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 4
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 5
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 4
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 5
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 3
34370: NEG
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 3
34381: NEG
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 3
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 4
34426: NEG
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 4
34437: NEG
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 4
34449: NEG
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 4
34472: NEG
34473: PUSH
34474: LD_INT 4
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 4
34484: NEG
34485: PUSH
34486: LD_INT 5
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 3
34496: NEG
34497: PUSH
34498: LD_INT 4
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 3
34508: NEG
34509: PUSH
34510: LD_INT 3
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 4
34520: NEG
34521: PUSH
34522: LD_INT 3
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 5
34532: NEG
34533: PUSH
34534: LD_INT 4
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 5
34544: NEG
34545: PUSH
34546: LD_INT 5
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 3
34556: NEG
34557: PUSH
34558: LD_INT 5
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 5
34568: NEG
34569: PUSH
34570: LD_INT 3
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 3
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 4
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 3
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 2
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: LD_INT 3
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 4
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 2
34670: NEG
34671: PUSH
34672: LD_INT 4
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 4
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 4
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 5
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 5
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 4
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 3
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 3
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 3
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 5
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34820: LD_ADDR_VAR 0 32
34824: PUSH
34825: LD_INT 4
34827: NEG
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 4
34838: NEG
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 3
34850: NEG
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: NEG
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 4
34872: NEG
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 5
34883: NEG
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 5
34894: NEG
34895: PUSH
34896: LD_INT 1
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 5
34906: NEG
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 3
34929: NEG
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 3
34941: NEG
34942: PUSH
34943: LD_INT 4
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: LD_INT 3
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 4
34989: NEG
34990: PUSH
34991: LD_INT 3
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 4
35001: NEG
35002: PUSH
35003: LD_INT 4
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: LD_INT 4
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 4
35025: NEG
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 4
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 5
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 4
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 3
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: LD_INT 4
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: LD_INT 5
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: LD_INT 3
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 2
35127: NEG
35128: PUSH
35129: LD_INT 5
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 4
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 4
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 4
35232: PUSH
35233: LD_INT 4
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 4
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 5
35252: PUSH
35253: LD_INT 4
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 5
35262: PUSH
35263: LD_INT 5
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 4
35272: PUSH
35273: LD_INT 5
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 3
35282: PUSH
35283: LD_INT 4
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 3
35292: PUSH
35293: LD_INT 3
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 5
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 3
35312: PUSH
35313: LD_INT 5
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35367: LD_ADDR_VAR 0 33
35371: PUSH
35372: LD_INT 4
35374: NEG
35375: PUSH
35376: LD_INT 4
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 4
35386: NEG
35387: PUSH
35388: LD_INT 5
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 3
35398: NEG
35399: PUSH
35400: LD_INT 4
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: NEG
35411: PUSH
35412: LD_INT 3
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 4
35422: NEG
35423: PUSH
35424: LD_INT 3
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 5
35434: NEG
35435: PUSH
35436: LD_INT 4
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 5
35446: NEG
35447: PUSH
35448: LD_INT 5
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 3
35458: NEG
35459: PUSH
35460: LD_INT 5
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 5
35470: NEG
35471: PUSH
35472: LD_INT 3
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 3
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 4
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 3
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: LD_INT 3
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: LD_INT 4
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: LD_INT 4
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 4
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 4
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 5
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 5
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 4
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 3
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 3
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 3
35656: PUSH
35657: LD_INT 2
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 5
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 4
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 4
35707: PUSH
35708: LD_INT 4
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 3
35717: PUSH
35718: LD_INT 4
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: LD_INT 3
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 4
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 4
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: LD_INT 4
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 3
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 4
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 5
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 5
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: LD_INT 4
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: LD_INT 3
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 5
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35905: LD_ADDR_VAR 0 34
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: LD_INT 4
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 5
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 4
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 3
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 3
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 4
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: LD_INT 5
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 3
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: LD_INT 5
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 3
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 4
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 4
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 3
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 4
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 4
36107: PUSH
36108: LD_INT 4
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 4
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 5
36127: PUSH
36128: LD_INT 4
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 5
36137: PUSH
36138: LD_INT 5
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 4
36147: PUSH
36148: LD_INT 5
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 3
36157: PUSH
36158: LD_INT 4
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 3
36167: PUSH
36168: LD_INT 3
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 5
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 3
36187: PUSH
36188: LD_INT 5
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 3
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 3
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 4
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 4
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 3
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: LD_INT 4
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 4
36290: NEG
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 4
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 3
36313: NEG
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 3
36324: NEG
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 4
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 5
36346: NEG
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 5
36357: NEG
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 5
36369: NEG
36370: PUSH
36371: LD_INT 2
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 3
36381: NEG
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
// end ; end ;
36437: GO 36440
36439: POP
// case btype of b_depot , b_warehouse :
36440: LD_VAR 0 1
36444: PUSH
36445: LD_INT 0
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36459
36451: LD_INT 1
36453: DOUBLE
36454: EQUAL
36455: IFTRUE 36459
36457: GO 36660
36459: POP
// case nation of nation_american :
36460: LD_VAR 0 5
36464: PUSH
36465: LD_INT 1
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 36529
36473: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36474: LD_ADDR_VAR 0 9
36478: PUSH
36479: LD_VAR 0 11
36483: PUSH
36484: LD_VAR 0 12
36488: PUSH
36489: LD_VAR 0 13
36493: PUSH
36494: LD_VAR 0 14
36498: PUSH
36499: LD_VAR 0 15
36503: PUSH
36504: LD_VAR 0 16
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: PUSH
36517: LD_VAR 0 4
36521: PUSH
36522: LD_INT 1
36524: PLUS
36525: ARRAY
36526: ST_TO_ADDR
36527: GO 36658
36529: LD_INT 2
36531: DOUBLE
36532: EQUAL
36533: IFTRUE 36537
36535: GO 36593
36537: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36538: LD_ADDR_VAR 0 9
36542: PUSH
36543: LD_VAR 0 17
36547: PUSH
36548: LD_VAR 0 18
36552: PUSH
36553: LD_VAR 0 19
36557: PUSH
36558: LD_VAR 0 20
36562: PUSH
36563: LD_VAR 0 21
36567: PUSH
36568: LD_VAR 0 22
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: LD_VAR 0 4
36585: PUSH
36586: LD_INT 1
36588: PLUS
36589: ARRAY
36590: ST_TO_ADDR
36591: GO 36658
36593: LD_INT 3
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36657
36601: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36602: LD_ADDR_VAR 0 9
36606: PUSH
36607: LD_VAR 0 23
36611: PUSH
36612: LD_VAR 0 24
36616: PUSH
36617: LD_VAR 0 25
36621: PUSH
36622: LD_VAR 0 26
36626: PUSH
36627: LD_VAR 0 27
36631: PUSH
36632: LD_VAR 0 28
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: PUSH
36645: LD_VAR 0 4
36649: PUSH
36650: LD_INT 1
36652: PLUS
36653: ARRAY
36654: ST_TO_ADDR
36655: GO 36658
36657: POP
36658: GO 37213
36660: LD_INT 2
36662: DOUBLE
36663: EQUAL
36664: IFTRUE 36674
36666: LD_INT 3
36668: DOUBLE
36669: EQUAL
36670: IFTRUE 36674
36672: GO 36730
36674: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36675: LD_ADDR_VAR 0 9
36679: PUSH
36680: LD_VAR 0 29
36684: PUSH
36685: LD_VAR 0 30
36689: PUSH
36690: LD_VAR 0 31
36694: PUSH
36695: LD_VAR 0 32
36699: PUSH
36700: LD_VAR 0 33
36704: PUSH
36705: LD_VAR 0 34
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: PUSH
36718: LD_VAR 0 4
36722: PUSH
36723: LD_INT 1
36725: PLUS
36726: ARRAY
36727: ST_TO_ADDR
36728: GO 37213
36730: LD_INT 16
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36792
36736: LD_INT 17
36738: DOUBLE
36739: EQUAL
36740: IFTRUE 36792
36742: LD_INT 18
36744: DOUBLE
36745: EQUAL
36746: IFTRUE 36792
36748: LD_INT 19
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36792
36754: LD_INT 22
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36792
36760: LD_INT 20
36762: DOUBLE
36763: EQUAL
36764: IFTRUE 36792
36766: LD_INT 21
36768: DOUBLE
36769: EQUAL
36770: IFTRUE 36792
36772: LD_INT 23
36774: DOUBLE
36775: EQUAL
36776: IFTRUE 36792
36778: LD_INT 24
36780: DOUBLE
36781: EQUAL
36782: IFTRUE 36792
36784: LD_INT 25
36786: DOUBLE
36787: EQUAL
36788: IFTRUE 36792
36790: GO 36848
36792: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36793: LD_ADDR_VAR 0 9
36797: PUSH
36798: LD_VAR 0 35
36802: PUSH
36803: LD_VAR 0 36
36807: PUSH
36808: LD_VAR 0 37
36812: PUSH
36813: LD_VAR 0 38
36817: PUSH
36818: LD_VAR 0 39
36822: PUSH
36823: LD_VAR 0 40
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: PUSH
36836: LD_VAR 0 4
36840: PUSH
36841: LD_INT 1
36843: PLUS
36844: ARRAY
36845: ST_TO_ADDR
36846: GO 37213
36848: LD_INT 6
36850: DOUBLE
36851: EQUAL
36852: IFTRUE 36904
36854: LD_INT 7
36856: DOUBLE
36857: EQUAL
36858: IFTRUE 36904
36860: LD_INT 8
36862: DOUBLE
36863: EQUAL
36864: IFTRUE 36904
36866: LD_INT 13
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36904
36872: LD_INT 12
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36904
36878: LD_INT 15
36880: DOUBLE
36881: EQUAL
36882: IFTRUE 36904
36884: LD_INT 11
36886: DOUBLE
36887: EQUAL
36888: IFTRUE 36904
36890: LD_INT 14
36892: DOUBLE
36893: EQUAL
36894: IFTRUE 36904
36896: LD_INT 10
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36960
36904: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36905: LD_ADDR_VAR 0 9
36909: PUSH
36910: LD_VAR 0 41
36914: PUSH
36915: LD_VAR 0 42
36919: PUSH
36920: LD_VAR 0 43
36924: PUSH
36925: LD_VAR 0 44
36929: PUSH
36930: LD_VAR 0 45
36934: PUSH
36935: LD_VAR 0 46
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: PUSH
36948: LD_VAR 0 4
36952: PUSH
36953: LD_INT 1
36955: PLUS
36956: ARRAY
36957: ST_TO_ADDR
36958: GO 37213
36960: LD_INT 36
36962: DOUBLE
36963: EQUAL
36964: IFTRUE 36968
36966: GO 37024
36968: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36969: LD_ADDR_VAR 0 9
36973: PUSH
36974: LD_VAR 0 47
36978: PUSH
36979: LD_VAR 0 48
36983: PUSH
36984: LD_VAR 0 49
36988: PUSH
36989: LD_VAR 0 50
36993: PUSH
36994: LD_VAR 0 51
36998: PUSH
36999: LD_VAR 0 52
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: PUSH
37012: LD_VAR 0 4
37016: PUSH
37017: LD_INT 1
37019: PLUS
37020: ARRAY
37021: ST_TO_ADDR
37022: GO 37213
37024: LD_INT 4
37026: DOUBLE
37027: EQUAL
37028: IFTRUE 37050
37030: LD_INT 5
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37050
37036: LD_INT 34
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37050
37042: LD_INT 37
37044: DOUBLE
37045: EQUAL
37046: IFTRUE 37050
37048: GO 37106
37050: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37051: LD_ADDR_VAR 0 9
37055: PUSH
37056: LD_VAR 0 53
37060: PUSH
37061: LD_VAR 0 54
37065: PUSH
37066: LD_VAR 0 55
37070: PUSH
37071: LD_VAR 0 56
37075: PUSH
37076: LD_VAR 0 57
37080: PUSH
37081: LD_VAR 0 58
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: PUSH
37094: LD_VAR 0 4
37098: PUSH
37099: LD_INT 1
37101: PLUS
37102: ARRAY
37103: ST_TO_ADDR
37104: GO 37213
37106: LD_INT 31
37108: DOUBLE
37109: EQUAL
37110: IFTRUE 37156
37112: LD_INT 32
37114: DOUBLE
37115: EQUAL
37116: IFTRUE 37156
37118: LD_INT 33
37120: DOUBLE
37121: EQUAL
37122: IFTRUE 37156
37124: LD_INT 27
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37156
37130: LD_INT 26
37132: DOUBLE
37133: EQUAL
37134: IFTRUE 37156
37136: LD_INT 28
37138: DOUBLE
37139: EQUAL
37140: IFTRUE 37156
37142: LD_INT 29
37144: DOUBLE
37145: EQUAL
37146: IFTRUE 37156
37148: LD_INT 30
37150: DOUBLE
37151: EQUAL
37152: IFTRUE 37156
37154: GO 37212
37156: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37157: LD_ADDR_VAR 0 9
37161: PUSH
37162: LD_VAR 0 59
37166: PUSH
37167: LD_VAR 0 60
37171: PUSH
37172: LD_VAR 0 61
37176: PUSH
37177: LD_VAR 0 62
37181: PUSH
37182: LD_VAR 0 63
37186: PUSH
37187: LD_VAR 0 64
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: PUSH
37200: LD_VAR 0 4
37204: PUSH
37205: LD_INT 1
37207: PLUS
37208: ARRAY
37209: ST_TO_ADDR
37210: GO 37213
37212: POP
// temp_list2 = [ ] ;
37213: LD_ADDR_VAR 0 10
37217: PUSH
37218: EMPTY
37219: ST_TO_ADDR
// for i in temp_list do
37220: LD_ADDR_VAR 0 8
37224: PUSH
37225: LD_VAR 0 9
37229: PUSH
37230: FOR_IN
37231: IFFALSE 37283
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37233: LD_ADDR_VAR 0 10
37237: PUSH
37238: LD_VAR 0 10
37242: PUSH
37243: LD_VAR 0 8
37247: PUSH
37248: LD_INT 1
37250: ARRAY
37251: PUSH
37252: LD_VAR 0 2
37256: PLUS
37257: PUSH
37258: LD_VAR 0 8
37262: PUSH
37263: LD_INT 2
37265: ARRAY
37266: PUSH
37267: LD_VAR 0 3
37271: PLUS
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: ADD
37280: ST_TO_ADDR
37281: GO 37230
37283: POP
37284: POP
// result = temp_list2 ;
37285: LD_ADDR_VAR 0 7
37289: PUSH
37290: LD_VAR 0 10
37294: ST_TO_ADDR
// end ;
37295: LD_VAR 0 7
37299: RET
// export function EnemyInRange ( unit , dist ) ; begin
37300: LD_INT 0
37302: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37303: LD_ADDR_VAR 0 3
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 255
37317: PPUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 250
37327: PPUSH
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 251
37337: PPUSH
37338: LD_VAR 0 2
37342: PPUSH
37343: CALL 10702 0 4
37347: PUSH
37348: LD_INT 4
37350: ARRAY
37351: ST_TO_ADDR
// end ;
37352: LD_VAR 0 3
37356: RET
// export function PlayerSeeMe ( unit ) ; begin
37357: LD_INT 0
37359: PPUSH
// result := See ( your_side , unit ) ;
37360: LD_ADDR_VAR 0 2
37364: PUSH
37365: LD_OWVAR 2
37369: PPUSH
37370: LD_VAR 0 1
37374: PPUSH
37375: CALL_OW 292
37379: ST_TO_ADDR
// end ;
37380: LD_VAR 0 2
37384: RET
// export function ReverseDir ( unit ) ; begin
37385: LD_INT 0
37387: PPUSH
// if not unit then
37388: LD_VAR 0 1
37392: NOT
37393: IFFALSE 37397
// exit ;
37395: GO 37420
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37397: LD_ADDR_VAR 0 2
37401: PUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 254
37411: PUSH
37412: LD_INT 3
37414: PLUS
37415: PUSH
37416: LD_INT 6
37418: MOD
37419: ST_TO_ADDR
// end ;
37420: LD_VAR 0 2
37424: RET
// export function ReverseArray ( array ) ; var i ; begin
37425: LD_INT 0
37427: PPUSH
37428: PPUSH
// if not array then
37429: LD_VAR 0 1
37433: NOT
37434: IFFALSE 37438
// exit ;
37436: GO 37493
// result := [ ] ;
37438: LD_ADDR_VAR 0 2
37442: PUSH
37443: EMPTY
37444: ST_TO_ADDR
// for i := array downto 1 do
37445: LD_ADDR_VAR 0 3
37449: PUSH
37450: DOUBLE
37451: LD_VAR 0 1
37455: INC
37456: ST_TO_ADDR
37457: LD_INT 1
37459: PUSH
37460: FOR_DOWNTO
37461: IFFALSE 37491
// result := Join ( result , array [ i ] ) ;
37463: LD_ADDR_VAR 0 2
37467: PUSH
37468: LD_VAR 0 2
37472: PPUSH
37473: LD_VAR 0 1
37477: PUSH
37478: LD_VAR 0 3
37482: ARRAY
37483: PPUSH
37484: CALL 42136 0 2
37488: ST_TO_ADDR
37489: GO 37460
37491: POP
37492: POP
// end ;
37493: LD_VAR 0 2
37497: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37498: LD_INT 0
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
// if not unit or not hexes then
37506: LD_VAR 0 1
37510: NOT
37511: PUSH
37512: LD_VAR 0 2
37516: NOT
37517: OR
37518: IFFALSE 37522
// exit ;
37520: GO 37645
// dist := 9999 ;
37522: LD_ADDR_VAR 0 5
37526: PUSH
37527: LD_INT 9999
37529: ST_TO_ADDR
// for i = 1 to hexes do
37530: LD_ADDR_VAR 0 4
37534: PUSH
37535: DOUBLE
37536: LD_INT 1
37538: DEC
37539: ST_TO_ADDR
37540: LD_VAR 0 2
37544: PUSH
37545: FOR_TO
37546: IFFALSE 37633
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37548: LD_ADDR_VAR 0 6
37552: PUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: LD_VAR 0 2
37562: PUSH
37563: LD_VAR 0 4
37567: ARRAY
37568: PUSH
37569: LD_INT 1
37571: ARRAY
37572: PPUSH
37573: LD_VAR 0 2
37577: PUSH
37578: LD_VAR 0 4
37582: ARRAY
37583: PUSH
37584: LD_INT 2
37586: ARRAY
37587: PPUSH
37588: CALL_OW 297
37592: ST_TO_ADDR
// if tdist < dist then
37593: LD_VAR 0 6
37597: PUSH
37598: LD_VAR 0 5
37602: LESS
37603: IFFALSE 37631
// begin hex := hexes [ i ] ;
37605: LD_ADDR_VAR 0 8
37609: PUSH
37610: LD_VAR 0 2
37614: PUSH
37615: LD_VAR 0 4
37619: ARRAY
37620: ST_TO_ADDR
// dist := tdist ;
37621: LD_ADDR_VAR 0 5
37625: PUSH
37626: LD_VAR 0 6
37630: ST_TO_ADDR
// end ; end ;
37631: GO 37545
37633: POP
37634: POP
// result := hex ;
37635: LD_ADDR_VAR 0 3
37639: PUSH
37640: LD_VAR 0 8
37644: ST_TO_ADDR
// end ;
37645: LD_VAR 0 3
37649: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37650: LD_INT 0
37652: PPUSH
37653: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37654: LD_VAR 0 1
37658: NOT
37659: PUSH
37660: LD_VAR 0 1
37664: PUSH
37665: LD_INT 21
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 23
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PPUSH
37689: CALL_OW 69
37693: IN
37694: NOT
37695: OR
37696: IFFALSE 37700
// exit ;
37698: GO 37747
// for i = 1 to 3 do
37700: LD_ADDR_VAR 0 3
37704: PUSH
37705: DOUBLE
37706: LD_INT 1
37708: DEC
37709: ST_TO_ADDR
37710: LD_INT 3
37712: PUSH
37713: FOR_TO
37714: IFFALSE 37745
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37716: LD_VAR 0 1
37720: PPUSH
37721: CALL_OW 250
37725: PPUSH
37726: LD_VAR 0 1
37730: PPUSH
37731: CALL_OW 251
37735: PPUSH
37736: LD_INT 1
37738: PPUSH
37739: CALL_OW 453
37743: GO 37713
37745: POP
37746: POP
// end ;
37747: LD_VAR 0 2
37751: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37752: LD_INT 0
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37760: LD_VAR 0 1
37764: NOT
37765: PUSH
37766: LD_VAR 0 2
37770: NOT
37771: OR
37772: PUSH
37773: LD_VAR 0 1
37777: PPUSH
37778: CALL_OW 314
37782: OR
37783: IFFALSE 37787
// exit ;
37785: GO 38254
// if GetLives ( i ) < 250 then
37787: LD_VAR 0 4
37791: PPUSH
37792: CALL_OW 256
37796: PUSH
37797: LD_INT 250
37799: LESS
37800: IFFALSE 37813
// begin ComAutodestruct ( i ) ;
37802: LD_VAR 0 4
37806: PPUSH
37807: CALL 37650 0 1
// exit ;
37811: GO 38254
// end ; x := GetX ( enemy_unit ) ;
37813: LD_ADDR_VAR 0 7
37817: PUSH
37818: LD_VAR 0 2
37822: PPUSH
37823: CALL_OW 250
37827: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37828: LD_ADDR_VAR 0 8
37832: PUSH
37833: LD_VAR 0 2
37837: PPUSH
37838: CALL_OW 251
37842: ST_TO_ADDR
// if not x or not y then
37843: LD_VAR 0 7
37847: NOT
37848: PUSH
37849: LD_VAR 0 8
37853: NOT
37854: OR
37855: IFFALSE 37859
// exit ;
37857: GO 38254
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37859: LD_ADDR_VAR 0 6
37863: PUSH
37864: LD_VAR 0 7
37868: PPUSH
37869: LD_INT 0
37871: PPUSH
37872: LD_INT 4
37874: PPUSH
37875: CALL_OW 272
37879: PUSH
37880: LD_VAR 0 8
37884: PPUSH
37885: LD_INT 0
37887: PPUSH
37888: LD_INT 4
37890: PPUSH
37891: CALL_OW 273
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_VAR 0 7
37904: PPUSH
37905: LD_INT 1
37907: PPUSH
37908: LD_INT 4
37910: PPUSH
37911: CALL_OW 272
37915: PUSH
37916: LD_VAR 0 8
37920: PPUSH
37921: LD_INT 1
37923: PPUSH
37924: LD_INT 4
37926: PPUSH
37927: CALL_OW 273
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_VAR 0 7
37940: PPUSH
37941: LD_INT 2
37943: PPUSH
37944: LD_INT 4
37946: PPUSH
37947: CALL_OW 272
37951: PUSH
37952: LD_VAR 0 8
37956: PPUSH
37957: LD_INT 2
37959: PPUSH
37960: LD_INT 4
37962: PPUSH
37963: CALL_OW 273
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_VAR 0 7
37976: PPUSH
37977: LD_INT 3
37979: PPUSH
37980: LD_INT 4
37982: PPUSH
37983: CALL_OW 272
37987: PUSH
37988: LD_VAR 0 8
37992: PPUSH
37993: LD_INT 3
37995: PPUSH
37996: LD_INT 4
37998: PPUSH
37999: CALL_OW 273
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_VAR 0 7
38012: PPUSH
38013: LD_INT 4
38015: PPUSH
38016: LD_INT 4
38018: PPUSH
38019: CALL_OW 272
38023: PUSH
38024: LD_VAR 0 8
38028: PPUSH
38029: LD_INT 4
38031: PPUSH
38032: LD_INT 4
38034: PPUSH
38035: CALL_OW 273
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_VAR 0 7
38048: PPUSH
38049: LD_INT 5
38051: PPUSH
38052: LD_INT 4
38054: PPUSH
38055: CALL_OW 272
38059: PUSH
38060: LD_VAR 0 8
38064: PPUSH
38065: LD_INT 5
38067: PPUSH
38068: LD_INT 4
38070: PPUSH
38071: CALL_OW 273
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: ST_TO_ADDR
// for i = tmp downto 1 do
38088: LD_ADDR_VAR 0 4
38092: PUSH
38093: DOUBLE
38094: LD_VAR 0 6
38098: INC
38099: ST_TO_ADDR
38100: LD_INT 1
38102: PUSH
38103: FOR_DOWNTO
38104: IFFALSE 38205
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38106: LD_VAR 0 6
38110: PUSH
38111: LD_VAR 0 4
38115: ARRAY
38116: PUSH
38117: LD_INT 1
38119: ARRAY
38120: PPUSH
38121: LD_VAR 0 6
38125: PUSH
38126: LD_VAR 0 4
38130: ARRAY
38131: PUSH
38132: LD_INT 2
38134: ARRAY
38135: PPUSH
38136: CALL_OW 488
38140: NOT
38141: PUSH
38142: LD_VAR 0 6
38146: PUSH
38147: LD_VAR 0 4
38151: ARRAY
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: PPUSH
38157: LD_VAR 0 6
38161: PUSH
38162: LD_VAR 0 4
38166: ARRAY
38167: PUSH
38168: LD_INT 2
38170: ARRAY
38171: PPUSH
38172: CALL_OW 428
38176: PUSH
38177: LD_INT 0
38179: NONEQUAL
38180: OR
38181: IFFALSE 38203
// tmp := Delete ( tmp , i ) ;
38183: LD_ADDR_VAR 0 6
38187: PUSH
38188: LD_VAR 0 6
38192: PPUSH
38193: LD_VAR 0 4
38197: PPUSH
38198: CALL_OW 3
38202: ST_TO_ADDR
38203: GO 38103
38205: POP
38206: POP
// j := GetClosestHex ( unit , tmp ) ;
38207: LD_ADDR_VAR 0 5
38211: PUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: LD_VAR 0 6
38221: PPUSH
38222: CALL 37498 0 2
38226: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38227: LD_VAR 0 1
38231: PPUSH
38232: LD_VAR 0 5
38236: PUSH
38237: LD_INT 1
38239: ARRAY
38240: PPUSH
38241: LD_VAR 0 5
38245: PUSH
38246: LD_INT 2
38248: ARRAY
38249: PPUSH
38250: CALL_OW 111
// end ;
38254: LD_VAR 0 3
38258: RET
// export function PrepareApemanSoldier ( ) ; begin
38259: LD_INT 0
38261: PPUSH
// uc_nation := 0 ;
38262: LD_ADDR_OWVAR 21
38266: PUSH
38267: LD_INT 0
38269: ST_TO_ADDR
// hc_sex := sex_male ;
38270: LD_ADDR_OWVAR 27
38274: PUSH
38275: LD_INT 1
38277: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38278: LD_ADDR_OWVAR 28
38282: PUSH
38283: LD_INT 15
38285: ST_TO_ADDR
// hc_gallery :=  ;
38286: LD_ADDR_OWVAR 33
38290: PUSH
38291: LD_STRING 
38293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38294: LD_ADDR_OWVAR 31
38298: PUSH
38299: LD_INT 0
38301: PPUSH
38302: LD_INT 3
38304: PPUSH
38305: CALL_OW 12
38309: PUSH
38310: LD_INT 0
38312: PPUSH
38313: LD_INT 3
38315: PPUSH
38316: CALL_OW 12
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: ST_TO_ADDR
// end ;
38333: LD_VAR 0 1
38337: RET
// export function PrepareApemanEngineer ( ) ; begin
38338: LD_INT 0
38340: PPUSH
// uc_nation := 0 ;
38341: LD_ADDR_OWVAR 21
38345: PUSH
38346: LD_INT 0
38348: ST_TO_ADDR
// hc_sex := sex_male ;
38349: LD_ADDR_OWVAR 27
38353: PUSH
38354: LD_INT 1
38356: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38357: LD_ADDR_OWVAR 28
38361: PUSH
38362: LD_INT 16
38364: ST_TO_ADDR
// hc_gallery :=  ;
38365: LD_ADDR_OWVAR 33
38369: PUSH
38370: LD_STRING 
38372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38373: LD_ADDR_OWVAR 31
38377: PUSH
38378: LD_INT 0
38380: PPUSH
38381: LD_INT 3
38383: PPUSH
38384: CALL_OW 12
38388: PUSH
38389: LD_INT 0
38391: PPUSH
38392: LD_INT 3
38394: PPUSH
38395: CALL_OW 12
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// end ;
38412: LD_VAR 0 1
38416: RET
// export function PrepareApeman ( agressivity ) ; begin
38417: LD_INT 0
38419: PPUSH
// uc_side := 0 ;
38420: LD_ADDR_OWVAR 20
38424: PUSH
38425: LD_INT 0
38427: ST_TO_ADDR
// uc_nation := 0 ;
38428: LD_ADDR_OWVAR 21
38432: PUSH
38433: LD_INT 0
38435: ST_TO_ADDR
// hc_sex := sex_male ;
38436: LD_ADDR_OWVAR 27
38440: PUSH
38441: LD_INT 1
38443: ST_TO_ADDR
// hc_class := class_apeman ;
38444: LD_ADDR_OWVAR 28
38448: PUSH
38449: LD_INT 12
38451: ST_TO_ADDR
// hc_gallery :=  ;
38452: LD_ADDR_OWVAR 33
38456: PUSH
38457: LD_STRING 
38459: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38460: LD_ADDR_OWVAR 35
38464: PUSH
38465: LD_VAR 0 1
38469: NEG
38470: PPUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 12
38480: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38481: LD_ADDR_OWVAR 31
38485: PUSH
38486: LD_INT 0
38488: PPUSH
38489: LD_INT 3
38491: PPUSH
38492: CALL_OW 12
38496: PUSH
38497: LD_INT 0
38499: PPUSH
38500: LD_INT 3
38502: PPUSH
38503: CALL_OW 12
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// end ;
38520: LD_VAR 0 2
38524: RET
// export function PrepareTiger ( agressivity ) ; begin
38525: LD_INT 0
38527: PPUSH
// uc_side := 0 ;
38528: LD_ADDR_OWVAR 20
38532: PUSH
38533: LD_INT 0
38535: ST_TO_ADDR
// uc_nation := 0 ;
38536: LD_ADDR_OWVAR 21
38540: PUSH
38541: LD_INT 0
38543: ST_TO_ADDR
// hc_class := class_tiger ;
38544: LD_ADDR_OWVAR 28
38548: PUSH
38549: LD_INT 14
38551: ST_TO_ADDR
// hc_gallery :=  ;
38552: LD_ADDR_OWVAR 33
38556: PUSH
38557: LD_STRING 
38559: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38560: LD_ADDR_OWVAR 35
38564: PUSH
38565: LD_VAR 0 1
38569: NEG
38570: PPUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL_OW 12
38580: ST_TO_ADDR
// end ;
38581: LD_VAR 0 2
38585: RET
// export function PrepareEnchidna ( ) ; begin
38586: LD_INT 0
38588: PPUSH
// uc_side := 0 ;
38589: LD_ADDR_OWVAR 20
38593: PUSH
38594: LD_INT 0
38596: ST_TO_ADDR
// uc_nation := 0 ;
38597: LD_ADDR_OWVAR 21
38601: PUSH
38602: LD_INT 0
38604: ST_TO_ADDR
// hc_class := class_baggie ;
38605: LD_ADDR_OWVAR 28
38609: PUSH
38610: LD_INT 13
38612: ST_TO_ADDR
// hc_gallery :=  ;
38613: LD_ADDR_OWVAR 33
38617: PUSH
38618: LD_STRING 
38620: ST_TO_ADDR
// end ;
38621: LD_VAR 0 1
38625: RET
// export function PrepareFrog ( ) ; begin
38626: LD_INT 0
38628: PPUSH
// uc_side := 0 ;
38629: LD_ADDR_OWVAR 20
38633: PUSH
38634: LD_INT 0
38636: ST_TO_ADDR
// uc_nation := 0 ;
38637: LD_ADDR_OWVAR 21
38641: PUSH
38642: LD_INT 0
38644: ST_TO_ADDR
// hc_class := class_frog ;
38645: LD_ADDR_OWVAR 28
38649: PUSH
38650: LD_INT 19
38652: ST_TO_ADDR
// hc_gallery :=  ;
38653: LD_ADDR_OWVAR 33
38657: PUSH
38658: LD_STRING 
38660: ST_TO_ADDR
// end ;
38661: LD_VAR 0 1
38665: RET
// export function PrepareFish ( ) ; begin
38666: LD_INT 0
38668: PPUSH
// uc_side := 0 ;
38669: LD_ADDR_OWVAR 20
38673: PUSH
38674: LD_INT 0
38676: ST_TO_ADDR
// uc_nation := 0 ;
38677: LD_ADDR_OWVAR 21
38681: PUSH
38682: LD_INT 0
38684: ST_TO_ADDR
// hc_class := class_fish ;
38685: LD_ADDR_OWVAR 28
38689: PUSH
38690: LD_INT 20
38692: ST_TO_ADDR
// hc_gallery :=  ;
38693: LD_ADDR_OWVAR 33
38697: PUSH
38698: LD_STRING 
38700: ST_TO_ADDR
// end ;
38701: LD_VAR 0 1
38705: RET
// export function PrepareBird ( ) ; begin
38706: LD_INT 0
38708: PPUSH
// uc_side := 0 ;
38709: LD_ADDR_OWVAR 20
38713: PUSH
38714: LD_INT 0
38716: ST_TO_ADDR
// uc_nation := 0 ;
38717: LD_ADDR_OWVAR 21
38721: PUSH
38722: LD_INT 0
38724: ST_TO_ADDR
// hc_class := class_phororhacos ;
38725: LD_ADDR_OWVAR 28
38729: PUSH
38730: LD_INT 18
38732: ST_TO_ADDR
// hc_gallery :=  ;
38733: LD_ADDR_OWVAR 33
38737: PUSH
38738: LD_STRING 
38740: ST_TO_ADDR
// end ;
38741: LD_VAR 0 1
38745: RET
// export function PrepareHorse ( ) ; begin
38746: LD_INT 0
38748: PPUSH
// uc_side := 0 ;
38749: LD_ADDR_OWVAR 20
38753: PUSH
38754: LD_INT 0
38756: ST_TO_ADDR
// uc_nation := 0 ;
38757: LD_ADDR_OWVAR 21
38761: PUSH
38762: LD_INT 0
38764: ST_TO_ADDR
// hc_class := class_horse ;
38765: LD_ADDR_OWVAR 28
38769: PUSH
38770: LD_INT 21
38772: ST_TO_ADDR
// hc_gallery :=  ;
38773: LD_ADDR_OWVAR 33
38777: PUSH
38778: LD_STRING 
38780: ST_TO_ADDR
// end ;
38781: LD_VAR 0 1
38785: RET
// export function PrepareMastodont ( ) ; begin
38786: LD_INT 0
38788: PPUSH
// uc_side := 0 ;
38789: LD_ADDR_OWVAR 20
38793: PUSH
38794: LD_INT 0
38796: ST_TO_ADDR
// uc_nation := 0 ;
38797: LD_ADDR_OWVAR 21
38801: PUSH
38802: LD_INT 0
38804: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38805: LD_ADDR_OWVAR 37
38809: PUSH
38810: LD_INT 31
38812: ST_TO_ADDR
// vc_control := control_rider ;
38813: LD_ADDR_OWVAR 38
38817: PUSH
38818: LD_INT 4
38820: ST_TO_ADDR
// end ;
38821: LD_VAR 0 1
38825: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38826: LD_INT 0
38828: PPUSH
38829: PPUSH
38830: PPUSH
// uc_side = 0 ;
38831: LD_ADDR_OWVAR 20
38835: PUSH
38836: LD_INT 0
38838: ST_TO_ADDR
// uc_nation = 0 ;
38839: LD_ADDR_OWVAR 21
38843: PUSH
38844: LD_INT 0
38846: ST_TO_ADDR
// InitHc_All ( ) ;
38847: CALL_OW 584
// InitVc ;
38851: CALL_OW 20
// if mastodonts then
38855: LD_VAR 0 6
38859: IFFALSE 38926
// for i = 1 to mastodonts do
38861: LD_ADDR_VAR 0 11
38865: PUSH
38866: DOUBLE
38867: LD_INT 1
38869: DEC
38870: ST_TO_ADDR
38871: LD_VAR 0 6
38875: PUSH
38876: FOR_TO
38877: IFFALSE 38924
// begin vc_chassis := 31 ;
38879: LD_ADDR_OWVAR 37
38883: PUSH
38884: LD_INT 31
38886: ST_TO_ADDR
// vc_control := control_rider ;
38887: LD_ADDR_OWVAR 38
38891: PUSH
38892: LD_INT 4
38894: ST_TO_ADDR
// animal := CreateVehicle ;
38895: LD_ADDR_VAR 0 12
38899: PUSH
38900: CALL_OW 45
38904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38905: LD_VAR 0 12
38909: PPUSH
38910: LD_VAR 0 8
38914: PPUSH
38915: LD_INT 0
38917: PPUSH
38918: CALL 41054 0 3
// end ;
38922: GO 38876
38924: POP
38925: POP
// if horses then
38926: LD_VAR 0 5
38930: IFFALSE 38997
// for i = 1 to horses do
38932: LD_ADDR_VAR 0 11
38936: PUSH
38937: DOUBLE
38938: LD_INT 1
38940: DEC
38941: ST_TO_ADDR
38942: LD_VAR 0 5
38946: PUSH
38947: FOR_TO
38948: IFFALSE 38995
// begin hc_class := 21 ;
38950: LD_ADDR_OWVAR 28
38954: PUSH
38955: LD_INT 21
38957: ST_TO_ADDR
// hc_gallery :=  ;
38958: LD_ADDR_OWVAR 33
38962: PUSH
38963: LD_STRING 
38965: ST_TO_ADDR
// animal := CreateHuman ;
38966: LD_ADDR_VAR 0 12
38970: PUSH
38971: CALL_OW 44
38975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38976: LD_VAR 0 12
38980: PPUSH
38981: LD_VAR 0 8
38985: PPUSH
38986: LD_INT 0
38988: PPUSH
38989: CALL 41054 0 3
// end ;
38993: GO 38947
38995: POP
38996: POP
// if birds then
38997: LD_VAR 0 1
39001: IFFALSE 39068
// for i = 1 to birds do
39003: LD_ADDR_VAR 0 11
39007: PUSH
39008: DOUBLE
39009: LD_INT 1
39011: DEC
39012: ST_TO_ADDR
39013: LD_VAR 0 1
39017: PUSH
39018: FOR_TO
39019: IFFALSE 39066
// begin hc_class = 18 ;
39021: LD_ADDR_OWVAR 28
39025: PUSH
39026: LD_INT 18
39028: ST_TO_ADDR
// hc_gallery =  ;
39029: LD_ADDR_OWVAR 33
39033: PUSH
39034: LD_STRING 
39036: ST_TO_ADDR
// animal := CreateHuman ;
39037: LD_ADDR_VAR 0 12
39041: PUSH
39042: CALL_OW 44
39046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39047: LD_VAR 0 12
39051: PPUSH
39052: LD_VAR 0 8
39056: PPUSH
39057: LD_INT 0
39059: PPUSH
39060: CALL 41054 0 3
// end ;
39064: GO 39018
39066: POP
39067: POP
// if tigers then
39068: LD_VAR 0 2
39072: IFFALSE 39156
// for i = 1 to tigers do
39074: LD_ADDR_VAR 0 11
39078: PUSH
39079: DOUBLE
39080: LD_INT 1
39082: DEC
39083: ST_TO_ADDR
39084: LD_VAR 0 2
39088: PUSH
39089: FOR_TO
39090: IFFALSE 39154
// begin hc_class = class_tiger ;
39092: LD_ADDR_OWVAR 28
39096: PUSH
39097: LD_INT 14
39099: ST_TO_ADDR
// hc_gallery =  ;
39100: LD_ADDR_OWVAR 33
39104: PUSH
39105: LD_STRING 
39107: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39108: LD_ADDR_OWVAR 35
39112: PUSH
39113: LD_INT 7
39115: NEG
39116: PPUSH
39117: LD_INT 7
39119: PPUSH
39120: CALL_OW 12
39124: ST_TO_ADDR
// animal := CreateHuman ;
39125: LD_ADDR_VAR 0 12
39129: PUSH
39130: CALL_OW 44
39134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39135: LD_VAR 0 12
39139: PPUSH
39140: LD_VAR 0 8
39144: PPUSH
39145: LD_INT 0
39147: PPUSH
39148: CALL 41054 0 3
// end ;
39152: GO 39089
39154: POP
39155: POP
// if apemans then
39156: LD_VAR 0 3
39160: IFFALSE 39283
// for i = 1 to apemans do
39162: LD_ADDR_VAR 0 11
39166: PUSH
39167: DOUBLE
39168: LD_INT 1
39170: DEC
39171: ST_TO_ADDR
39172: LD_VAR 0 3
39176: PUSH
39177: FOR_TO
39178: IFFALSE 39281
// begin hc_class = class_apeman ;
39180: LD_ADDR_OWVAR 28
39184: PUSH
39185: LD_INT 12
39187: ST_TO_ADDR
// hc_gallery =  ;
39188: LD_ADDR_OWVAR 33
39192: PUSH
39193: LD_STRING 
39195: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39196: LD_ADDR_OWVAR 35
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PPUSH
39205: LD_INT 2
39207: PPUSH
39208: CALL_OW 12
39212: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39213: LD_ADDR_OWVAR 31
39217: PUSH
39218: LD_INT 1
39220: PPUSH
39221: LD_INT 3
39223: PPUSH
39224: CALL_OW 12
39228: PUSH
39229: LD_INT 1
39231: PPUSH
39232: LD_INT 3
39234: PPUSH
39235: CALL_OW 12
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// animal := CreateHuman ;
39252: LD_ADDR_VAR 0 12
39256: PUSH
39257: CALL_OW 44
39261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39262: LD_VAR 0 12
39266: PPUSH
39267: LD_VAR 0 8
39271: PPUSH
39272: LD_INT 0
39274: PPUSH
39275: CALL 41054 0 3
// end ;
39279: GO 39177
39281: POP
39282: POP
// if enchidnas then
39283: LD_VAR 0 4
39287: IFFALSE 39354
// for i = 1 to enchidnas do
39289: LD_ADDR_VAR 0 11
39293: PUSH
39294: DOUBLE
39295: LD_INT 1
39297: DEC
39298: ST_TO_ADDR
39299: LD_VAR 0 4
39303: PUSH
39304: FOR_TO
39305: IFFALSE 39352
// begin hc_class = 13 ;
39307: LD_ADDR_OWVAR 28
39311: PUSH
39312: LD_INT 13
39314: ST_TO_ADDR
// hc_gallery =  ;
39315: LD_ADDR_OWVAR 33
39319: PUSH
39320: LD_STRING 
39322: ST_TO_ADDR
// animal := CreateHuman ;
39323: LD_ADDR_VAR 0 12
39327: PUSH
39328: CALL_OW 44
39332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39333: LD_VAR 0 12
39337: PPUSH
39338: LD_VAR 0 8
39342: PPUSH
39343: LD_INT 0
39345: PPUSH
39346: CALL 41054 0 3
// end ;
39350: GO 39304
39352: POP
39353: POP
// if fishes then
39354: LD_VAR 0 7
39358: IFFALSE 39425
// for i = 1 to fishes do
39360: LD_ADDR_VAR 0 11
39364: PUSH
39365: DOUBLE
39366: LD_INT 1
39368: DEC
39369: ST_TO_ADDR
39370: LD_VAR 0 7
39374: PUSH
39375: FOR_TO
39376: IFFALSE 39423
// begin hc_class = 20 ;
39378: LD_ADDR_OWVAR 28
39382: PUSH
39383: LD_INT 20
39385: ST_TO_ADDR
// hc_gallery =  ;
39386: LD_ADDR_OWVAR 33
39390: PUSH
39391: LD_STRING 
39393: ST_TO_ADDR
// animal := CreateHuman ;
39394: LD_ADDR_VAR 0 12
39398: PUSH
39399: CALL_OW 44
39403: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39404: LD_VAR 0 12
39408: PPUSH
39409: LD_VAR 0 9
39413: PPUSH
39414: LD_INT 0
39416: PPUSH
39417: CALL 41054 0 3
// end ;
39421: GO 39375
39423: POP
39424: POP
// end ;
39425: LD_VAR 0 10
39429: RET
// export function WantHeal ( sci , unit ) ; begin
39430: LD_INT 0
39432: PPUSH
// if GetTaskList ( sci ) > 0 then
39433: LD_VAR 0 1
39437: PPUSH
39438: CALL_OW 437
39442: PUSH
39443: LD_INT 0
39445: GREATER
39446: IFFALSE 39516
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39448: LD_VAR 0 1
39452: PPUSH
39453: CALL_OW 437
39457: PUSH
39458: LD_INT 1
39460: ARRAY
39461: PUSH
39462: LD_INT 1
39464: ARRAY
39465: PUSH
39466: LD_STRING l
39468: EQUAL
39469: PUSH
39470: LD_VAR 0 1
39474: PPUSH
39475: CALL_OW 437
39479: PUSH
39480: LD_INT 1
39482: ARRAY
39483: PUSH
39484: LD_INT 4
39486: ARRAY
39487: PUSH
39488: LD_VAR 0 2
39492: EQUAL
39493: AND
39494: IFFALSE 39506
// result := true else
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_INT 1
39503: ST_TO_ADDR
39504: GO 39514
// result := false ;
39506: LD_ADDR_VAR 0 3
39510: PUSH
39511: LD_INT 0
39513: ST_TO_ADDR
// end else
39514: GO 39524
// result := false ;
39516: LD_ADDR_VAR 0 3
39520: PUSH
39521: LD_INT 0
39523: ST_TO_ADDR
// end ;
39524: LD_VAR 0 3
39528: RET
// export function HealTarget ( sci ) ; begin
39529: LD_INT 0
39531: PPUSH
// if not sci then
39532: LD_VAR 0 1
39536: NOT
39537: IFFALSE 39541
// exit ;
39539: GO 39606
// result := 0 ;
39541: LD_ADDR_VAR 0 2
39545: PUSH
39546: LD_INT 0
39548: ST_TO_ADDR
// if GetTaskList ( sci ) then
39549: LD_VAR 0 1
39553: PPUSH
39554: CALL_OW 437
39558: IFFALSE 39606
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39560: LD_VAR 0 1
39564: PPUSH
39565: CALL_OW 437
39569: PUSH
39570: LD_INT 1
39572: ARRAY
39573: PUSH
39574: LD_INT 1
39576: ARRAY
39577: PUSH
39578: LD_STRING l
39580: EQUAL
39581: IFFALSE 39606
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39583: LD_ADDR_VAR 0 2
39587: PUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: CALL_OW 437
39597: PUSH
39598: LD_INT 1
39600: ARRAY
39601: PUSH
39602: LD_INT 4
39604: ARRAY
39605: ST_TO_ADDR
// end ;
39606: LD_VAR 0 2
39610: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39611: LD_INT 0
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
// if not base_units then
39617: LD_VAR 0 1
39621: NOT
39622: IFFALSE 39626
// exit ;
39624: GO 39713
// result := false ;
39626: LD_ADDR_VAR 0 2
39630: PUSH
39631: LD_INT 0
39633: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39634: LD_ADDR_VAR 0 5
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: LD_INT 21
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PPUSH
39654: CALL_OW 72
39658: ST_TO_ADDR
// if not tmp then
39659: LD_VAR 0 5
39663: NOT
39664: IFFALSE 39668
// exit ;
39666: GO 39713
// for i in tmp do
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_VAR 0 5
39677: PUSH
39678: FOR_IN
39679: IFFALSE 39711
// begin result := EnemyInRange ( i , 22 ) ;
39681: LD_ADDR_VAR 0 2
39685: PUSH
39686: LD_VAR 0 3
39690: PPUSH
39691: LD_INT 22
39693: PPUSH
39694: CALL 37300 0 2
39698: ST_TO_ADDR
// if result then
39699: LD_VAR 0 2
39703: IFFALSE 39709
// exit ;
39705: POP
39706: POP
39707: GO 39713
// end ;
39709: GO 39678
39711: POP
39712: POP
// end ;
39713: LD_VAR 0 2
39717: RET
// export function FilterByTag ( units , tag ) ; begin
39718: LD_INT 0
39720: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: LD_INT 120
39733: PUSH
39734: LD_VAR 0 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 72
39747: ST_TO_ADDR
// end ;
39748: LD_VAR 0 3
39752: RET
// export function IsDriver ( un ) ; begin
39753: LD_INT 0
39755: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39756: LD_ADDR_VAR 0 2
39760: PUSH
39761: LD_VAR 0 1
39765: PUSH
39766: LD_INT 55
39768: PUSH
39769: EMPTY
39770: LIST
39771: PPUSH
39772: CALL_OW 69
39776: IN
39777: ST_TO_ADDR
// end ;
39778: LD_VAR 0 2
39782: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39783: LD_INT 0
39785: PPUSH
39786: PPUSH
// list := [ ] ;
39787: LD_ADDR_VAR 0 5
39791: PUSH
39792: EMPTY
39793: ST_TO_ADDR
// case d of 0 :
39794: LD_VAR 0 3
39798: PUSH
39799: LD_INT 0
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39807
39805: GO 39940
39807: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39808: LD_ADDR_VAR 0 5
39812: PUSH
39813: LD_VAR 0 1
39817: PUSH
39818: LD_INT 4
39820: MINUS
39821: PUSH
39822: LD_VAR 0 2
39826: PUSH
39827: LD_INT 4
39829: MINUS
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: PUSH
39839: LD_VAR 0 1
39843: PUSH
39844: LD_INT 3
39846: MINUS
39847: PUSH
39848: LD_VAR 0 2
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: PUSH
39861: LD_VAR 0 1
39865: PUSH
39866: LD_INT 4
39868: PLUS
39869: PUSH
39870: LD_VAR 0 2
39874: PUSH
39875: LD_INT 4
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: PUSH
39883: LD_VAR 0 1
39887: PUSH
39888: LD_INT 3
39890: PLUS
39891: PUSH
39892: LD_VAR 0 2
39896: PUSH
39897: LD_INT 3
39899: PLUS
39900: PUSH
39901: LD_INT 5
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: LIST
39908: PUSH
39909: LD_VAR 0 1
39913: PUSH
39914: LD_VAR 0 2
39918: PUSH
39919: LD_INT 4
39921: PLUS
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: ST_TO_ADDR
// end ; 1 :
39938: GO 40638
39940: LD_INT 1
39942: DOUBLE
39943: EQUAL
39944: IFTRUE 39948
39946: GO 40081
39948: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39949: LD_ADDR_VAR 0 5
39953: PUSH
39954: LD_VAR 0 1
39958: PUSH
39959: LD_VAR 0 2
39963: PUSH
39964: LD_INT 4
39966: MINUS
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: PUSH
39976: LD_VAR 0 1
39980: PUSH
39981: LD_INT 3
39983: MINUS
39984: PUSH
39985: LD_VAR 0 2
39989: PUSH
39990: LD_INT 3
39992: MINUS
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: PUSH
40002: LD_VAR 0 1
40006: PUSH
40007: LD_INT 4
40009: MINUS
40010: PUSH
40011: LD_VAR 0 2
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PUSH
40024: LD_VAR 0 1
40028: PUSH
40029: LD_VAR 0 2
40033: PUSH
40034: LD_INT 3
40036: PLUS
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: PUSH
40046: LD_VAR 0 1
40050: PUSH
40051: LD_INT 4
40053: PLUS
40054: PUSH
40055: LD_VAR 0 2
40059: PUSH
40060: LD_INT 4
40062: PLUS
40063: PUSH
40064: LD_INT 5
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// end ; 2 :
40079: GO 40638
40081: LD_INT 2
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40089
40087: GO 40218
40089: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40090: LD_ADDR_VAR 0 5
40094: PUSH
40095: LD_VAR 0 1
40099: PUSH
40100: LD_VAR 0 2
40104: PUSH
40105: LD_INT 3
40107: MINUS
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: PUSH
40117: LD_VAR 0 1
40121: PUSH
40122: LD_INT 4
40124: PLUS
40125: PUSH
40126: LD_VAR 0 2
40130: PUSH
40131: LD_INT 4
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: PUSH
40139: LD_VAR 0 1
40143: PUSH
40144: LD_VAR 0 2
40148: PUSH
40149: LD_INT 4
40151: PLUS
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: PUSH
40161: LD_VAR 0 1
40165: PUSH
40166: LD_INT 3
40168: MINUS
40169: PUSH
40170: LD_VAR 0 2
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: PUSH
40183: LD_VAR 0 1
40187: PUSH
40188: LD_INT 4
40190: MINUS
40191: PUSH
40192: LD_VAR 0 2
40196: PUSH
40197: LD_INT 4
40199: MINUS
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// end ; 3 :
40216: GO 40638
40218: LD_INT 3
40220: DOUBLE
40221: EQUAL
40222: IFTRUE 40226
40224: GO 40359
40226: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40227: LD_ADDR_VAR 0 5
40231: PUSH
40232: LD_VAR 0 1
40236: PUSH
40237: LD_INT 3
40239: PLUS
40240: PUSH
40241: LD_VAR 0 2
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: PUSH
40254: LD_VAR 0 1
40258: PUSH
40259: LD_INT 4
40261: PLUS
40262: PUSH
40263: LD_VAR 0 2
40267: PUSH
40268: LD_INT 4
40270: PLUS
40271: PUSH
40272: LD_INT 5
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: PUSH
40280: LD_VAR 0 1
40284: PUSH
40285: LD_INT 4
40287: MINUS
40288: PUSH
40289: LD_VAR 0 2
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: PUSH
40302: LD_VAR 0 1
40306: PUSH
40307: LD_VAR 0 2
40311: PUSH
40312: LD_INT 4
40314: MINUS
40315: PUSH
40316: LD_INT 3
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: PUSH
40324: LD_VAR 0 1
40328: PUSH
40329: LD_INT 3
40331: MINUS
40332: PUSH
40333: LD_VAR 0 2
40337: PUSH
40338: LD_INT 3
40340: MINUS
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: ST_TO_ADDR
// end ; 4 :
40357: GO 40638
40359: LD_INT 4
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40500
40367: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40368: LD_ADDR_VAR 0 5
40372: PUSH
40373: LD_VAR 0 1
40377: PUSH
40378: LD_VAR 0 2
40382: PUSH
40383: LD_INT 4
40385: PLUS
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: PUSH
40395: LD_VAR 0 1
40399: PUSH
40400: LD_INT 3
40402: PLUS
40403: PUSH
40404: LD_VAR 0 2
40408: PUSH
40409: LD_INT 3
40411: PLUS
40412: PUSH
40413: LD_INT 5
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: PUSH
40421: LD_VAR 0 1
40425: PUSH
40426: LD_INT 4
40428: PLUS
40429: PUSH
40430: LD_VAR 0 2
40434: PUSH
40435: LD_INT 4
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: PUSH
40443: LD_VAR 0 1
40447: PUSH
40448: LD_VAR 0 2
40452: PUSH
40453: LD_INT 3
40455: MINUS
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: LIST
40464: PUSH
40465: LD_VAR 0 1
40469: PUSH
40470: LD_INT 4
40472: MINUS
40473: PUSH
40474: LD_VAR 0 2
40478: PUSH
40479: LD_INT 4
40481: MINUS
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: ST_TO_ADDR
// end ; 5 :
40498: GO 40638
40500: LD_INT 5
40502: DOUBLE
40503: EQUAL
40504: IFTRUE 40508
40506: GO 40637
40508: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40509: LD_ADDR_VAR 0 5
40513: PUSH
40514: LD_VAR 0 1
40518: PUSH
40519: LD_INT 4
40521: MINUS
40522: PUSH
40523: LD_VAR 0 2
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: PUSH
40536: LD_VAR 0 1
40540: PUSH
40541: LD_VAR 0 2
40545: PUSH
40546: LD_INT 4
40548: MINUS
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: PUSH
40558: LD_VAR 0 1
40562: PUSH
40563: LD_INT 4
40565: PLUS
40566: PUSH
40567: LD_VAR 0 2
40571: PUSH
40572: LD_INT 4
40574: PLUS
40575: PUSH
40576: LD_INT 5
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: PUSH
40584: LD_VAR 0 1
40588: PUSH
40589: LD_INT 3
40591: PLUS
40592: PUSH
40593: LD_VAR 0 2
40597: PUSH
40598: LD_INT 4
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: PUSH
40606: LD_VAR 0 1
40610: PUSH
40611: LD_VAR 0 2
40615: PUSH
40616: LD_INT 3
40618: PLUS
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: ST_TO_ADDR
// end ; end ;
40635: GO 40638
40637: POP
// result := list ;
40638: LD_ADDR_VAR 0 4
40642: PUSH
40643: LD_VAR 0 5
40647: ST_TO_ADDR
// end ;
40648: LD_VAR 0 4
40652: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40653: LD_INT 0
40655: PPUSH
40656: PPUSH
40657: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40658: LD_VAR 0 1
40662: NOT
40663: PUSH
40664: LD_VAR 0 2
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 3
40677: PUSH
40678: LD_INT 4
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: IN
40687: NOT
40688: OR
40689: IFFALSE 40693
// exit ;
40691: GO 40776
// tmp := [ ] ;
40693: LD_ADDR_VAR 0 5
40697: PUSH
40698: EMPTY
40699: ST_TO_ADDR
// for i in units do
40700: LD_ADDR_VAR 0 4
40704: PUSH
40705: LD_VAR 0 1
40709: PUSH
40710: FOR_IN
40711: IFFALSE 40745
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40713: LD_ADDR_VAR 0 5
40717: PUSH
40718: LD_VAR 0 5
40722: PPUSH
40723: LD_VAR 0 4
40727: PPUSH
40728: LD_VAR 0 2
40732: PPUSH
40733: CALL_OW 259
40737: PPUSH
40738: CALL 42136 0 2
40742: ST_TO_ADDR
40743: GO 40710
40745: POP
40746: POP
// if not tmp then
40747: LD_VAR 0 5
40751: NOT
40752: IFFALSE 40756
// exit ;
40754: GO 40776
// result := SortListByListDesc ( units , tmp ) ;
40756: LD_ADDR_VAR 0 3
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: LD_VAR 0 5
40770: PPUSH
40771: CALL_OW 77
40775: ST_TO_ADDR
// end ;
40776: LD_VAR 0 3
40780: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40781: LD_INT 0
40783: PPUSH
40784: PPUSH
40785: PPUSH
// result := false ;
40786: LD_ADDR_VAR 0 3
40790: PUSH
40791: LD_INT 0
40793: ST_TO_ADDR
// if not building then
40794: LD_VAR 0 2
40798: NOT
40799: IFFALSE 40803
// exit ;
40801: GO 40941
// x := GetX ( building ) ;
40803: LD_ADDR_VAR 0 4
40807: PUSH
40808: LD_VAR 0 2
40812: PPUSH
40813: CALL_OW 250
40817: ST_TO_ADDR
// y := GetY ( building ) ;
40818: LD_ADDR_VAR 0 5
40822: PUSH
40823: LD_VAR 0 2
40827: PPUSH
40828: CALL_OW 251
40832: ST_TO_ADDR
// if not x or not y then
40833: LD_VAR 0 4
40837: NOT
40838: PUSH
40839: LD_VAR 0 5
40843: NOT
40844: OR
40845: IFFALSE 40849
// exit ;
40847: GO 40941
// if GetTaskList ( unit ) then
40849: LD_VAR 0 1
40853: PPUSH
40854: CALL_OW 437
40858: IFFALSE 40941
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40860: LD_STRING e
40862: PUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 437
40872: PUSH
40873: LD_INT 1
40875: ARRAY
40876: PUSH
40877: LD_INT 1
40879: ARRAY
40880: EQUAL
40881: PUSH
40882: LD_VAR 0 4
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 437
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PUSH
40901: LD_INT 2
40903: ARRAY
40904: EQUAL
40905: AND
40906: PUSH
40907: LD_VAR 0 5
40911: PUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 437
40921: PUSH
40922: LD_INT 1
40924: ARRAY
40925: PUSH
40926: LD_INT 3
40928: ARRAY
40929: EQUAL
40930: AND
40931: IFFALSE 40941
// result := true end ;
40933: LD_ADDR_VAR 0 3
40937: PUSH
40938: LD_INT 1
40940: ST_TO_ADDR
// end ;
40941: LD_VAR 0 3
40945: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40946: LD_INT 0
40948: PPUSH
// result := false ;
40949: LD_ADDR_VAR 0 4
40953: PUSH
40954: LD_INT 0
40956: ST_TO_ADDR
// if GetTaskList ( unit ) then
40957: LD_VAR 0 1
40961: PPUSH
40962: CALL_OW 437
40966: IFFALSE 41049
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40968: LD_STRING M
40970: PUSH
40971: LD_VAR 0 1
40975: PPUSH
40976: CALL_OW 437
40980: PUSH
40981: LD_INT 1
40983: ARRAY
40984: PUSH
40985: LD_INT 1
40987: ARRAY
40988: EQUAL
40989: PUSH
40990: LD_VAR 0 2
40994: PUSH
40995: LD_VAR 0 1
40999: PPUSH
41000: CALL_OW 437
41004: PUSH
41005: LD_INT 1
41007: ARRAY
41008: PUSH
41009: LD_INT 2
41011: ARRAY
41012: EQUAL
41013: AND
41014: PUSH
41015: LD_VAR 0 3
41019: PUSH
41020: LD_VAR 0 1
41024: PPUSH
41025: CALL_OW 437
41029: PUSH
41030: LD_INT 1
41032: ARRAY
41033: PUSH
41034: LD_INT 3
41036: ARRAY
41037: EQUAL
41038: AND
41039: IFFALSE 41049
// result := true ;
41041: LD_ADDR_VAR 0 4
41045: PUSH
41046: LD_INT 1
41048: ST_TO_ADDR
// end ; end ;
41049: LD_VAR 0 4
41053: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
41058: PPUSH
41059: PPUSH
// if not unit or not area then
41060: LD_VAR 0 1
41064: NOT
41065: PUSH
41066: LD_VAR 0 2
41070: NOT
41071: OR
41072: IFFALSE 41076
// exit ;
41074: GO 41239
// tmp := AreaToList ( area , i ) ;
41076: LD_ADDR_VAR 0 6
41080: PUSH
41081: LD_VAR 0 2
41085: PPUSH
41086: LD_VAR 0 5
41090: PPUSH
41091: CALL_OW 517
41095: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41096: LD_ADDR_VAR 0 5
41100: PUSH
41101: DOUBLE
41102: LD_INT 1
41104: DEC
41105: ST_TO_ADDR
41106: LD_VAR 0 6
41110: PUSH
41111: LD_INT 1
41113: ARRAY
41114: PUSH
41115: FOR_TO
41116: IFFALSE 41237
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41118: LD_ADDR_VAR 0 7
41122: PUSH
41123: LD_VAR 0 6
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PUSH
41132: LD_VAR 0 5
41136: ARRAY
41137: PUSH
41138: LD_VAR 0 6
41142: PUSH
41143: LD_INT 2
41145: ARRAY
41146: PUSH
41147: LD_VAR 0 5
41151: ARRAY
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
41157: LD_INT 92
41159: PUSH
41160: LD_VAR 0 7
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: PUSH
41169: LD_VAR 0 7
41173: PUSH
41174: LD_INT 2
41176: ARRAY
41177: PUSH
41178: LD_INT 3
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: PPUSH
41187: CALL_OW 69
41191: PUSH
41192: LD_INT 0
41194: EQUAL
41195: IFFALSE 41235
// begin PlaceUnitArea ( unit , area , mode ) ;
41197: LD_VAR 0 1
41201: PPUSH
41202: LD_VAR 0 2
41206: PPUSH
41207: LD_VAR 0 3
41211: PPUSH
41212: CALL_OW 49
// result := IsPlaced ( unit ) ;
41216: LD_ADDR_VAR 0 4
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 305
41230: ST_TO_ADDR
// exit ;
41231: POP
41232: POP
41233: GO 41239
// end ; end ;
41235: GO 41115
41237: POP
41238: POP
// end ;
41239: LD_VAR 0 4
41243: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41244: LD_INT 0
41246: PPUSH
41247: PPUSH
41248: PPUSH
// if not side or side > 8 then
41249: LD_VAR 0 1
41253: NOT
41254: PUSH
41255: LD_VAR 0 1
41259: PUSH
41260: LD_INT 8
41262: GREATER
41263: OR
41264: IFFALSE 41268
// exit ;
41266: GO 41455
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41268: LD_ADDR_VAR 0 4
41272: PUSH
41273: LD_INT 22
41275: PUSH
41276: LD_VAR 0 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 21
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PPUSH
41299: CALL_OW 69
41303: ST_TO_ADDR
// if not tmp then
41304: LD_VAR 0 4
41308: NOT
41309: IFFALSE 41313
// exit ;
41311: GO 41455
// enable_addtolog := true ;
41313: LD_ADDR_OWVAR 81
41317: PUSH
41318: LD_INT 1
41320: ST_TO_ADDR
// AddToLog ( [ ) ;
41321: LD_STRING [
41323: PPUSH
41324: CALL_OW 561
// for i in tmp do
41328: LD_ADDR_VAR 0 3
41332: PUSH
41333: LD_VAR 0 4
41337: PUSH
41338: FOR_IN
41339: IFFALSE 41446
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41341: LD_STRING [
41343: PUSH
41344: LD_VAR 0 3
41348: PPUSH
41349: CALL_OW 266
41353: STR
41354: PUSH
41355: LD_STRING , 
41357: STR
41358: PUSH
41359: LD_VAR 0 3
41363: PPUSH
41364: CALL_OW 250
41368: STR
41369: PUSH
41370: LD_STRING , 
41372: STR
41373: PUSH
41374: LD_VAR 0 3
41378: PPUSH
41379: CALL_OW 251
41383: STR
41384: PUSH
41385: LD_STRING , 
41387: STR
41388: PUSH
41389: LD_VAR 0 3
41393: PPUSH
41394: CALL_OW 254
41398: STR
41399: PUSH
41400: LD_STRING , 
41402: STR
41403: PUSH
41404: LD_VAR 0 3
41408: PPUSH
41409: LD_INT 1
41411: PPUSH
41412: CALL_OW 268
41416: STR
41417: PUSH
41418: LD_STRING , 
41420: STR
41421: PUSH
41422: LD_VAR 0 3
41426: PPUSH
41427: LD_INT 2
41429: PPUSH
41430: CALL_OW 268
41434: STR
41435: PUSH
41436: LD_STRING ],
41438: STR
41439: PPUSH
41440: CALL_OW 561
// end ;
41444: GO 41338
41446: POP
41447: POP
// AddToLog ( ]; ) ;
41448: LD_STRING ];
41450: PPUSH
41451: CALL_OW 561
// end ;
41455: LD_VAR 0 2
41459: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41460: LD_INT 0
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
// if not area or not rate or not max then
41467: LD_VAR 0 1
41471: NOT
41472: PUSH
41473: LD_VAR 0 2
41477: NOT
41478: OR
41479: PUSH
41480: LD_VAR 0 4
41484: NOT
41485: OR
41486: IFFALSE 41490
// exit ;
41488: GO 41679
// while 1 do
41490: LD_INT 1
41492: IFFALSE 41679
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41494: LD_ADDR_VAR 0 9
41498: PUSH
41499: LD_VAR 0 1
41503: PPUSH
41504: LD_INT 1
41506: PPUSH
41507: CALL_OW 287
41511: PUSH
41512: LD_INT 10
41514: MUL
41515: ST_TO_ADDR
// r := rate / 10 ;
41516: LD_ADDR_VAR 0 7
41520: PUSH
41521: LD_VAR 0 2
41525: PUSH
41526: LD_INT 10
41528: DIVREAL
41529: ST_TO_ADDR
// time := 1 1$00 ;
41530: LD_ADDR_VAR 0 8
41534: PUSH
41535: LD_INT 2100
41537: ST_TO_ADDR
// if amount < min then
41538: LD_VAR 0 9
41542: PUSH
41543: LD_VAR 0 3
41547: LESS
41548: IFFALSE 41566
// r := r * 2 else
41550: LD_ADDR_VAR 0 7
41554: PUSH
41555: LD_VAR 0 7
41559: PUSH
41560: LD_INT 2
41562: MUL
41563: ST_TO_ADDR
41564: GO 41592
// if amount > max then
41566: LD_VAR 0 9
41570: PUSH
41571: LD_VAR 0 4
41575: GREATER
41576: IFFALSE 41592
// r := r / 2 ;
41578: LD_ADDR_VAR 0 7
41582: PUSH
41583: LD_VAR 0 7
41587: PUSH
41588: LD_INT 2
41590: DIVREAL
41591: ST_TO_ADDR
// time := time / r ;
41592: LD_ADDR_VAR 0 8
41596: PUSH
41597: LD_VAR 0 8
41601: PUSH
41602: LD_VAR 0 7
41606: DIVREAL
41607: ST_TO_ADDR
// if time < 0 then
41608: LD_VAR 0 8
41612: PUSH
41613: LD_INT 0
41615: LESS
41616: IFFALSE 41633
// time := time * - 1 ;
41618: LD_ADDR_VAR 0 8
41622: PUSH
41623: LD_VAR 0 8
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: MUL
41632: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41633: LD_VAR 0 8
41637: PUSH
41638: LD_INT 35
41640: PPUSH
41641: LD_INT 875
41643: PPUSH
41644: CALL_OW 12
41648: PLUS
41649: PPUSH
41650: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41654: LD_INT 1
41656: PPUSH
41657: LD_INT 5
41659: PPUSH
41660: CALL_OW 12
41664: PPUSH
41665: LD_VAR 0 1
41669: PPUSH
41670: LD_INT 1
41672: PPUSH
41673: CALL_OW 55
// end ;
41677: GO 41490
// end ;
41679: LD_VAR 0 5
41683: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41684: LD_INT 0
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
// if not turrets or not factories then
41694: LD_VAR 0 1
41698: NOT
41699: PUSH
41700: LD_VAR 0 2
41704: NOT
41705: OR
41706: IFFALSE 41710
// exit ;
41708: GO 42017
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41710: LD_ADDR_VAR 0 10
41714: PUSH
41715: LD_INT 5
41717: PUSH
41718: LD_INT 6
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 3
41737: PUSH
41738: LD_INT 5
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 24
41752: PUSH
41753: LD_INT 25
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 23
41762: PUSH
41763: LD_INT 27
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 42
41776: PUSH
41777: LD_INT 43
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 44
41786: PUSH
41787: LD_INT 46
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 45
41796: PUSH
41797: LD_INT 47
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: ST_TO_ADDR
// result := [ ] ;
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: EMPTY
41820: ST_TO_ADDR
// for i in turrets do
41821: LD_ADDR_VAR 0 4
41825: PUSH
41826: LD_VAR 0 1
41830: PUSH
41831: FOR_IN
41832: IFFALSE 42015
// begin nat := GetNation ( i ) ;
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 4
41843: PPUSH
41844: CALL_OW 248
41848: ST_TO_ADDR
// weapon := 0 ;
41849: LD_ADDR_VAR 0 8
41853: PUSH
41854: LD_INT 0
41856: ST_TO_ADDR
// if not nat then
41857: LD_VAR 0 7
41861: NOT
41862: IFFALSE 41866
// continue ;
41864: GO 41831
// for j in list [ nat ] do
41866: LD_ADDR_VAR 0 5
41870: PUSH
41871: LD_VAR 0 10
41875: PUSH
41876: LD_VAR 0 7
41880: ARRAY
41881: PUSH
41882: FOR_IN
41883: IFFALSE 41924
// if GetBWeapon ( i ) = j [ 1 ] then
41885: LD_VAR 0 4
41889: PPUSH
41890: CALL_OW 269
41894: PUSH
41895: LD_VAR 0 5
41899: PUSH
41900: LD_INT 1
41902: ARRAY
41903: EQUAL
41904: IFFALSE 41922
// begin weapon := j [ 2 ] ;
41906: LD_ADDR_VAR 0 8
41910: PUSH
41911: LD_VAR 0 5
41915: PUSH
41916: LD_INT 2
41918: ARRAY
41919: ST_TO_ADDR
// break ;
41920: GO 41924
// end ;
41922: GO 41882
41924: POP
41925: POP
// if not weapon then
41926: LD_VAR 0 8
41930: NOT
41931: IFFALSE 41935
// continue ;
41933: GO 41831
// for k in factories do
41935: LD_ADDR_VAR 0 6
41939: PUSH
41940: LD_VAR 0 2
41944: PUSH
41945: FOR_IN
41946: IFFALSE 42011
// begin weapons := AvailableWeaponList ( k ) ;
41948: LD_ADDR_VAR 0 9
41952: PUSH
41953: LD_VAR 0 6
41957: PPUSH
41958: CALL_OW 478
41962: ST_TO_ADDR
// if not weapons then
41963: LD_VAR 0 9
41967: NOT
41968: IFFALSE 41972
// continue ;
41970: GO 41945
// if weapon in weapons then
41972: LD_VAR 0 8
41976: PUSH
41977: LD_VAR 0 9
41981: IN
41982: IFFALSE 42009
// begin result := [ i , weapon ] ;
41984: LD_ADDR_VAR 0 3
41988: PUSH
41989: LD_VAR 0 4
41993: PUSH
41994: LD_VAR 0 8
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: ST_TO_ADDR
// exit ;
42003: POP
42004: POP
42005: POP
42006: POP
42007: GO 42017
// end ; end ;
42009: GO 41945
42011: POP
42012: POP
// end ;
42013: GO 41831
42015: POP
42016: POP
// end ;
42017: LD_VAR 0 3
42021: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42022: LD_INT 0
42024: PPUSH
// if not side or side > 8 then
42025: LD_VAR 0 3
42029: NOT
42030: PUSH
42031: LD_VAR 0 3
42035: PUSH
42036: LD_INT 8
42038: GREATER
42039: OR
42040: IFFALSE 42044
// exit ;
42042: GO 42103
// if not range then
42044: LD_VAR 0 4
42048: NOT
42049: IFFALSE 42060
// range := - 12 ;
42051: LD_ADDR_VAR 0 4
42055: PUSH
42056: LD_INT 12
42058: NEG
42059: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42060: LD_VAR 0 1
42064: PPUSH
42065: LD_VAR 0 2
42069: PPUSH
42070: LD_VAR 0 3
42074: PPUSH
42075: LD_VAR 0 4
42079: PPUSH
42080: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42084: LD_VAR 0 1
42088: PPUSH
42089: LD_VAR 0 2
42093: PPUSH
42094: LD_VAR 0 3
42098: PPUSH
42099: CALL_OW 331
// end ;
42103: LD_VAR 0 5
42107: RET
// export function Video ( mode ) ; begin
42108: LD_INT 0
42110: PPUSH
// ingame_video = mode ;
42111: LD_ADDR_OWVAR 52
42115: PUSH
42116: LD_VAR 0 1
42120: ST_TO_ADDR
// interface_hidden = mode ;
42121: LD_ADDR_OWVAR 54
42125: PUSH
42126: LD_VAR 0 1
42130: ST_TO_ADDR
// end ;
42131: LD_VAR 0 2
42135: RET
// export function Join ( array , element ) ; begin
42136: LD_INT 0
42138: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42139: LD_ADDR_VAR 0 3
42143: PUSH
42144: LD_VAR 0 1
42148: PPUSH
42149: LD_VAR 0 1
42153: PUSH
42154: LD_INT 1
42156: PLUS
42157: PPUSH
42158: LD_VAR 0 2
42162: PPUSH
42163: CALL_OW 1
42167: ST_TO_ADDR
// end ;
42168: LD_VAR 0 3
42172: RET
// export function JoinUnion ( array , element ) ; begin
42173: LD_INT 0
42175: PPUSH
// result := array union element ;
42176: LD_ADDR_VAR 0 3
42180: PUSH
42181: LD_VAR 0 1
42185: PUSH
42186: LD_VAR 0 2
42190: UNION
42191: ST_TO_ADDR
// end ;
42192: LD_VAR 0 3
42196: RET
// export function GetBehemoths ( side ) ; begin
42197: LD_INT 0
42199: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42200: LD_ADDR_VAR 0 2
42204: PUSH
42205: LD_INT 22
42207: PUSH
42208: LD_VAR 0 1
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 31
42219: PUSH
42220: LD_INT 25
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PPUSH
42231: CALL_OW 69
42235: ST_TO_ADDR
// end ;
42236: LD_VAR 0 2
42240: RET
// export function Shuffle ( array ) ; var i , index ; begin
42241: LD_INT 0
42243: PPUSH
42244: PPUSH
42245: PPUSH
// result := [ ] ;
42246: LD_ADDR_VAR 0 2
42250: PUSH
42251: EMPTY
42252: ST_TO_ADDR
// if not array then
42253: LD_VAR 0 1
42257: NOT
42258: IFFALSE 42262
// exit ;
42260: GO 42361
// Randomize ;
42262: CALL_OW 10
// for i = array downto 1 do
42266: LD_ADDR_VAR 0 3
42270: PUSH
42271: DOUBLE
42272: LD_VAR 0 1
42276: INC
42277: ST_TO_ADDR
42278: LD_INT 1
42280: PUSH
42281: FOR_DOWNTO
42282: IFFALSE 42359
// begin index := rand ( 1 , array ) ;
42284: LD_ADDR_VAR 0 4
42288: PUSH
42289: LD_INT 1
42291: PPUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL_OW 12
42301: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42302: LD_ADDR_VAR 0 2
42306: PUSH
42307: LD_VAR 0 2
42311: PPUSH
42312: LD_VAR 0 2
42316: PUSH
42317: LD_INT 1
42319: PLUS
42320: PPUSH
42321: LD_VAR 0 1
42325: PUSH
42326: LD_VAR 0 4
42330: ARRAY
42331: PPUSH
42332: CALL_OW 2
42336: ST_TO_ADDR
// array := Delete ( array , index ) ;
42337: LD_ADDR_VAR 0 1
42341: PUSH
42342: LD_VAR 0 1
42346: PPUSH
42347: LD_VAR 0 4
42351: PPUSH
42352: CALL_OW 3
42356: ST_TO_ADDR
// end ;
42357: GO 42281
42359: POP
42360: POP
// end ;
42361: LD_VAR 0 2
42365: RET
// export function GetBaseMaterials ( base ) ; begin
42366: LD_INT 0
42368: PPUSH
// result := [ 0 , 0 , 0 ] ;
42369: LD_ADDR_VAR 0 2
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// if not base then
42388: LD_VAR 0 1
42392: NOT
42393: IFFALSE 42397
// exit ;
42395: GO 42446
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42397: LD_ADDR_VAR 0 2
42401: PUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: LD_INT 1
42409: PPUSH
42410: CALL_OW 275
42414: PUSH
42415: LD_VAR 0 1
42419: PPUSH
42420: LD_INT 2
42422: PPUSH
42423: CALL_OW 275
42427: PUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: LD_INT 3
42435: PPUSH
42436: CALL_OW 275
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
// end ;
42446: LD_VAR 0 2
42450: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42451: LD_INT 0
42453: PPUSH
42454: PPUSH
// result := array ;
42455: LD_ADDR_VAR 0 3
42459: PUSH
42460: LD_VAR 0 1
42464: ST_TO_ADDR
// if size >= result then
42465: LD_VAR 0 2
42469: PUSH
42470: LD_VAR 0 3
42474: GREATEREQUAL
42475: IFFALSE 42479
// exit ;
42477: GO 42529
// if size then
42479: LD_VAR 0 2
42483: IFFALSE 42529
// for i := array downto size do
42485: LD_ADDR_VAR 0 4
42489: PUSH
42490: DOUBLE
42491: LD_VAR 0 1
42495: INC
42496: ST_TO_ADDR
42497: LD_VAR 0 2
42501: PUSH
42502: FOR_DOWNTO
42503: IFFALSE 42527
// result := Delete ( result , result ) ;
42505: LD_ADDR_VAR 0 3
42509: PUSH
42510: LD_VAR 0 3
42514: PPUSH
42515: LD_VAR 0 3
42519: PPUSH
42520: CALL_OW 3
42524: ST_TO_ADDR
42525: GO 42502
42527: POP
42528: POP
// end ;
42529: LD_VAR 0 3
42533: RET
// export function ComExit ( unit ) ; var tmp ; begin
42534: LD_INT 0
42536: PPUSH
42537: PPUSH
// if not IsInUnit ( unit ) then
42538: LD_VAR 0 1
42542: PPUSH
42543: CALL_OW 310
42547: NOT
42548: IFFALSE 42552
// exit ;
42550: GO 42612
// tmp := IsInUnit ( unit ) ;
42552: LD_ADDR_VAR 0 3
42556: PUSH
42557: LD_VAR 0 1
42561: PPUSH
42562: CALL_OW 310
42566: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42567: LD_VAR 0 3
42571: PPUSH
42572: CALL_OW 247
42576: PUSH
42577: LD_INT 2
42579: EQUAL
42580: IFFALSE 42593
// ComExitVehicle ( unit ) else
42582: LD_VAR 0 1
42586: PPUSH
42587: CALL_OW 121
42591: GO 42602
// ComExitBuilding ( unit ) ;
42593: LD_VAR 0 1
42597: PPUSH
42598: CALL_OW 122
// result := tmp ;
42602: LD_ADDR_VAR 0 2
42606: PUSH
42607: LD_VAR 0 3
42611: ST_TO_ADDR
// end ;
42612: LD_VAR 0 2
42616: RET
// export function ComExitAll ( units ) ; var i ; begin
42617: LD_INT 0
42619: PPUSH
42620: PPUSH
// if not units then
42621: LD_VAR 0 1
42625: NOT
42626: IFFALSE 42630
// exit ;
42628: GO 42656
// for i in units do
42630: LD_ADDR_VAR 0 3
42634: PUSH
42635: LD_VAR 0 1
42639: PUSH
42640: FOR_IN
42641: IFFALSE 42654
// ComExit ( i ) ;
42643: LD_VAR 0 3
42647: PPUSH
42648: CALL 42534 0 1
42652: GO 42640
42654: POP
42655: POP
// end ;
42656: LD_VAR 0 2
42660: RET
// export function ResetHc ; begin
42661: LD_INT 0
42663: PPUSH
// InitHc ;
42664: CALL_OW 19
// hc_importance := 0 ;
42668: LD_ADDR_OWVAR 32
42672: PUSH
42673: LD_INT 0
42675: ST_TO_ADDR
// end ;
42676: LD_VAR 0 1
42680: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42681: LD_INT 0
42683: PPUSH
42684: PPUSH
42685: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42686: LD_ADDR_VAR 0 6
42690: PUSH
42691: LD_VAR 0 1
42695: PUSH
42696: LD_VAR 0 3
42700: PLUS
42701: PUSH
42702: LD_INT 2
42704: DIV
42705: ST_TO_ADDR
// if _x < 0 then
42706: LD_VAR 0 6
42710: PUSH
42711: LD_INT 0
42713: LESS
42714: IFFALSE 42731
// _x := _x * - 1 ;
42716: LD_ADDR_VAR 0 6
42720: PUSH
42721: LD_VAR 0 6
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: MUL
42730: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42731: LD_ADDR_VAR 0 7
42735: PUSH
42736: LD_VAR 0 2
42740: PUSH
42741: LD_VAR 0 4
42745: PLUS
42746: PUSH
42747: LD_INT 2
42749: DIV
42750: ST_TO_ADDR
// if _y < 0 then
42751: LD_VAR 0 7
42755: PUSH
42756: LD_INT 0
42758: LESS
42759: IFFALSE 42776
// _y := _y * - 1 ;
42761: LD_ADDR_VAR 0 7
42765: PUSH
42766: LD_VAR 0 7
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: MUL
42775: ST_TO_ADDR
// result := [ _x , _y ] ;
42776: LD_ADDR_VAR 0 5
42780: PUSH
42781: LD_VAR 0 6
42785: PUSH
42786: LD_VAR 0 7
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: ST_TO_ADDR
// end ;
42795: LD_VAR 0 5
42799: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42800: LD_INT 0
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
// task := GetTaskList ( unit ) ;
42806: LD_ADDR_VAR 0 7
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 437
42820: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42821: LD_VAR 0 7
42825: NOT
42826: PUSH
42827: LD_VAR 0 1
42831: PPUSH
42832: LD_VAR 0 2
42836: PPUSH
42837: CALL_OW 308
42841: NOT
42842: AND
42843: IFFALSE 42847
// exit ;
42845: GO 42965
// if IsInArea ( unit , area ) then
42847: LD_VAR 0 1
42851: PPUSH
42852: LD_VAR 0 2
42856: PPUSH
42857: CALL_OW 308
42861: IFFALSE 42879
// begin ComMoveToArea ( unit , goAway ) ;
42863: LD_VAR 0 1
42867: PPUSH
42868: LD_VAR 0 3
42872: PPUSH
42873: CALL_OW 113
// exit ;
42877: GO 42965
// end ; if task [ 1 ] [ 1 ] <> M then
42879: LD_VAR 0 7
42883: PUSH
42884: LD_INT 1
42886: ARRAY
42887: PUSH
42888: LD_INT 1
42890: ARRAY
42891: PUSH
42892: LD_STRING M
42894: NONEQUAL
42895: IFFALSE 42899
// exit ;
42897: GO 42965
// x := task [ 1 ] [ 2 ] ;
42899: LD_ADDR_VAR 0 5
42903: PUSH
42904: LD_VAR 0 7
42908: PUSH
42909: LD_INT 1
42911: ARRAY
42912: PUSH
42913: LD_INT 2
42915: ARRAY
42916: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42917: LD_ADDR_VAR 0 6
42921: PUSH
42922: LD_VAR 0 7
42926: PUSH
42927: LD_INT 1
42929: ARRAY
42930: PUSH
42931: LD_INT 3
42933: ARRAY
42934: ST_TO_ADDR
// if InArea ( x , y , area ) then
42935: LD_VAR 0 5
42939: PPUSH
42940: LD_VAR 0 6
42944: PPUSH
42945: LD_VAR 0 2
42949: PPUSH
42950: CALL_OW 309
42954: IFFALSE 42965
// ComStop ( unit ) ;
42956: LD_VAR 0 1
42960: PPUSH
42961: CALL_OW 141
// end ;
42965: LD_VAR 0 4
42969: RET
// export function Abs ( value ) ; begin
42970: LD_INT 0
42972: PPUSH
// result := value ;
42973: LD_ADDR_VAR 0 2
42977: PUSH
42978: LD_VAR 0 1
42982: ST_TO_ADDR
// if value < 0 then
42983: LD_VAR 0 1
42987: PUSH
42988: LD_INT 0
42990: LESS
42991: IFFALSE 43008
// result := value * - 1 ;
42993: LD_ADDR_VAR 0 2
42997: PUSH
42998: LD_VAR 0 1
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: MUL
43007: ST_TO_ADDR
// end ;
43008: LD_VAR 0 2
43012: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43013: LD_INT 0
43015: PPUSH
43016: PPUSH
43017: PPUSH
43018: PPUSH
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
// if not unit or not building then
43023: LD_VAR 0 1
43027: NOT
43028: PUSH
43029: LD_VAR 0 2
43033: NOT
43034: OR
43035: IFFALSE 43039
// exit ;
43037: GO 43265
// x := GetX ( building ) ;
43039: LD_ADDR_VAR 0 4
43043: PUSH
43044: LD_VAR 0 2
43048: PPUSH
43049: CALL_OW 250
43053: ST_TO_ADDR
// y := GetY ( building ) ;
43054: LD_ADDR_VAR 0 6
43058: PUSH
43059: LD_VAR 0 2
43063: PPUSH
43064: CALL_OW 251
43068: ST_TO_ADDR
// d := GetDir ( building ) ;
43069: LD_ADDR_VAR 0 8
43073: PUSH
43074: LD_VAR 0 2
43078: PPUSH
43079: CALL_OW 254
43083: ST_TO_ADDR
// r := 4 ;
43084: LD_ADDR_VAR 0 9
43088: PUSH
43089: LD_INT 4
43091: ST_TO_ADDR
// for i := 1 to 5 do
43092: LD_ADDR_VAR 0 10
43096: PUSH
43097: DOUBLE
43098: LD_INT 1
43100: DEC
43101: ST_TO_ADDR
43102: LD_INT 5
43104: PUSH
43105: FOR_TO
43106: IFFALSE 43263
// begin _x := ShiftX ( x , d , r + i ) ;
43108: LD_ADDR_VAR 0 5
43112: PUSH
43113: LD_VAR 0 4
43117: PPUSH
43118: LD_VAR 0 8
43122: PPUSH
43123: LD_VAR 0 9
43127: PUSH
43128: LD_VAR 0 10
43132: PLUS
43133: PPUSH
43134: CALL_OW 272
43138: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43139: LD_ADDR_VAR 0 7
43143: PUSH
43144: LD_VAR 0 6
43148: PPUSH
43149: LD_VAR 0 8
43153: PPUSH
43154: LD_VAR 0 9
43158: PUSH
43159: LD_VAR 0 10
43163: PLUS
43164: PPUSH
43165: CALL_OW 273
43169: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43170: LD_VAR 0 5
43174: PPUSH
43175: LD_VAR 0 7
43179: PPUSH
43180: CALL_OW 488
43184: PUSH
43185: LD_VAR 0 5
43189: PPUSH
43190: LD_VAR 0 7
43194: PPUSH
43195: CALL_OW 428
43199: PPUSH
43200: CALL_OW 247
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: IN
43215: NOT
43216: AND
43217: IFFALSE 43261
// begin ComMoveXY ( unit , _x , _y ) ;
43219: LD_VAR 0 1
43223: PPUSH
43224: LD_VAR 0 5
43228: PPUSH
43229: LD_VAR 0 7
43233: PPUSH
43234: CALL_OW 111
// result := [ _x , _y ] ;
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_VAR 0 5
43247: PUSH
43248: LD_VAR 0 7
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// exit ;
43257: POP
43258: POP
43259: GO 43265
// end ; end ;
43261: GO 43105
43263: POP
43264: POP
// end ;
43265: LD_VAR 0 3
43269: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43270: LD_INT 0
43272: PPUSH
43273: PPUSH
43274: PPUSH
// result := 0 ;
43275: LD_ADDR_VAR 0 3
43279: PUSH
43280: LD_INT 0
43282: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43283: LD_VAR 0 1
43287: PUSH
43288: LD_INT 0
43290: LESS
43291: PUSH
43292: LD_VAR 0 1
43296: PUSH
43297: LD_INT 8
43299: GREATER
43300: OR
43301: PUSH
43302: LD_VAR 0 2
43306: PUSH
43307: LD_INT 0
43309: LESS
43310: OR
43311: PUSH
43312: LD_VAR 0 2
43316: PUSH
43317: LD_INT 8
43319: GREATER
43320: OR
43321: IFFALSE 43325
// exit ;
43323: GO 43400
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43325: LD_ADDR_VAR 0 4
43329: PUSH
43330: LD_INT 22
43332: PUSH
43333: LD_VAR 0 2
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PPUSH
43342: CALL_OW 69
43346: PUSH
43347: FOR_IN
43348: IFFALSE 43398
// begin un := UnitShoot ( i ) ;
43350: LD_ADDR_VAR 0 5
43354: PUSH
43355: LD_VAR 0 4
43359: PPUSH
43360: CALL_OW 504
43364: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43365: LD_VAR 0 5
43369: PPUSH
43370: CALL_OW 255
43374: PUSH
43375: LD_VAR 0 1
43379: EQUAL
43380: IFFALSE 43396
// begin result := un ;
43382: LD_ADDR_VAR 0 3
43386: PUSH
43387: LD_VAR 0 5
43391: ST_TO_ADDR
// exit ;
43392: POP
43393: POP
43394: GO 43400
// end ; end ;
43396: GO 43347
43398: POP
43399: POP
// end ;
43400: LD_VAR 0 3
43404: RET
// export function GetCargoBay ( units ) ; begin
43405: LD_INT 0
43407: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43408: LD_ADDR_VAR 0 2
43412: PUSH
43413: LD_VAR 0 1
43417: PPUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 34
43423: PUSH
43424: LD_INT 12
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 34
43433: PUSH
43434: LD_INT 51
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 34
43443: PUSH
43444: LD_INT 32
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 34
43453: PUSH
43454: LD_INT 89
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: PPUSH
43468: CALL_OW 72
43472: ST_TO_ADDR
// end ;
43473: LD_VAR 0 2
43477: RET
// export function Negate ( value ) ; begin
43478: LD_INT 0
43480: PPUSH
// result := not value ;
43481: LD_ADDR_VAR 0 2
43485: PUSH
43486: LD_VAR 0 1
43490: NOT
43491: ST_TO_ADDR
// end ;
43492: LD_VAR 0 2
43496: RET
// export function Inc ( value ) ; begin
43497: LD_INT 0
43499: PPUSH
// result := value + 1 ;
43500: LD_ADDR_VAR 0 2
43504: PUSH
43505: LD_VAR 0 1
43509: PUSH
43510: LD_INT 1
43512: PLUS
43513: ST_TO_ADDR
// end ;
43514: LD_VAR 0 2
43518: RET
// export function Dec ( value ) ; begin
43519: LD_INT 0
43521: PPUSH
// result := value - 1 ;
43522: LD_ADDR_VAR 0 2
43526: PUSH
43527: LD_VAR 0 1
43531: PUSH
43532: LD_INT 1
43534: MINUS
43535: ST_TO_ADDR
// end ;
43536: LD_VAR 0 2
43540: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43541: LD_INT 0
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43551: LD_VAR 0 1
43555: PPUSH
43556: LD_VAR 0 2
43560: PPUSH
43561: CALL_OW 488
43565: NOT
43566: PUSH
43567: LD_VAR 0 3
43571: PPUSH
43572: LD_VAR 0 4
43576: PPUSH
43577: CALL_OW 488
43581: NOT
43582: OR
43583: IFFALSE 43596
// begin result := - 1 ;
43585: LD_ADDR_VAR 0 5
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: ST_TO_ADDR
// exit ;
43594: GO 43831
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43596: LD_ADDR_VAR 0 12
43600: PUSH
43601: LD_VAR 0 1
43605: PPUSH
43606: LD_VAR 0 2
43610: PPUSH
43611: LD_VAR 0 3
43615: PPUSH
43616: LD_VAR 0 4
43620: PPUSH
43621: CALL 42681 0 4
43625: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43626: LD_ADDR_VAR 0 11
43630: PUSH
43631: LD_VAR 0 1
43635: PPUSH
43636: LD_VAR 0 2
43640: PPUSH
43641: LD_VAR 0 12
43645: PUSH
43646: LD_INT 1
43648: ARRAY
43649: PPUSH
43650: LD_VAR 0 12
43654: PUSH
43655: LD_INT 2
43657: ARRAY
43658: PPUSH
43659: CALL_OW 298
43663: ST_TO_ADDR
// distance := 9999 ;
43664: LD_ADDR_VAR 0 10
43668: PUSH
43669: LD_INT 9999
43671: ST_TO_ADDR
// for i := 0 to 5 do
43672: LD_ADDR_VAR 0 6
43676: PUSH
43677: DOUBLE
43678: LD_INT 0
43680: DEC
43681: ST_TO_ADDR
43682: LD_INT 5
43684: PUSH
43685: FOR_TO
43686: IFFALSE 43829
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43688: LD_ADDR_VAR 0 7
43692: PUSH
43693: LD_VAR 0 1
43697: PPUSH
43698: LD_VAR 0 6
43702: PPUSH
43703: LD_VAR 0 11
43707: PPUSH
43708: CALL_OW 272
43712: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43713: LD_ADDR_VAR 0 8
43717: PUSH
43718: LD_VAR 0 2
43722: PPUSH
43723: LD_VAR 0 6
43727: PPUSH
43728: LD_VAR 0 11
43732: PPUSH
43733: CALL_OW 273
43737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43738: LD_VAR 0 7
43742: PPUSH
43743: LD_VAR 0 8
43747: PPUSH
43748: CALL_OW 488
43752: NOT
43753: IFFALSE 43757
// continue ;
43755: GO 43685
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43757: LD_ADDR_VAR 0 9
43761: PUSH
43762: LD_VAR 0 12
43766: PUSH
43767: LD_INT 1
43769: ARRAY
43770: PPUSH
43771: LD_VAR 0 12
43775: PUSH
43776: LD_INT 2
43778: ARRAY
43779: PPUSH
43780: LD_VAR 0 7
43784: PPUSH
43785: LD_VAR 0 8
43789: PPUSH
43790: CALL_OW 298
43794: ST_TO_ADDR
// if tmp < distance then
43795: LD_VAR 0 9
43799: PUSH
43800: LD_VAR 0 10
43804: LESS
43805: IFFALSE 43827
// begin result := i ;
43807: LD_ADDR_VAR 0 5
43811: PUSH
43812: LD_VAR 0 6
43816: ST_TO_ADDR
// distance := tmp ;
43817: LD_ADDR_VAR 0 10
43821: PUSH
43822: LD_VAR 0 9
43826: ST_TO_ADDR
// end ; end ;
43827: GO 43685
43829: POP
43830: POP
// end ;
43831: LD_VAR 0 5
43835: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43836: LD_INT 0
43838: PPUSH
43839: PPUSH
// if not driver or not IsInUnit ( driver ) then
43840: LD_VAR 0 1
43844: NOT
43845: PUSH
43846: LD_VAR 0 1
43850: PPUSH
43851: CALL_OW 310
43855: NOT
43856: OR
43857: IFFALSE 43861
// exit ;
43859: GO 43951
// vehicle := IsInUnit ( driver ) ;
43861: LD_ADDR_VAR 0 3
43865: PUSH
43866: LD_VAR 0 1
43870: PPUSH
43871: CALL_OW 310
43875: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43876: LD_VAR 0 1
43880: PPUSH
43881: LD_STRING \
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: PUSH
43911: LD_STRING E
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_VAR 0 3
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PPUSH
43947: CALL_OW 446
// end ;
43951: LD_VAR 0 2
43955: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43956: LD_INT 0
43958: PPUSH
43959: PPUSH
// if not driver or not IsInUnit ( driver ) then
43960: LD_VAR 0 1
43964: NOT
43965: PUSH
43966: LD_VAR 0 1
43970: PPUSH
43971: CALL_OW 310
43975: NOT
43976: OR
43977: IFFALSE 43981
// exit ;
43979: GO 44071
// vehicle := IsInUnit ( driver ) ;
43981: LD_ADDR_VAR 0 3
43985: PUSH
43986: LD_VAR 0 1
43990: PPUSH
43991: CALL_OW 310
43995: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43996: LD_VAR 0 1
44000: PPUSH
44001: LD_STRING \
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: PUSH
44031: LD_STRING E
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_VAR 0 3
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PPUSH
44067: CALL_OW 447
// end ;
44071: LD_VAR 0 2
44075: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44076: LD_INT 0
44078: PPUSH
44079: PPUSH
44080: PPUSH
// tmp := [ ] ;
44081: LD_ADDR_VAR 0 5
44085: PUSH
44086: EMPTY
44087: ST_TO_ADDR
// for i in units do
44088: LD_ADDR_VAR 0 4
44092: PUSH
44093: LD_VAR 0 1
44097: PUSH
44098: FOR_IN
44099: IFFALSE 44137
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44101: LD_ADDR_VAR 0 5
44105: PUSH
44106: LD_VAR 0 5
44110: PPUSH
44111: LD_VAR 0 5
44115: PUSH
44116: LD_INT 1
44118: PLUS
44119: PPUSH
44120: LD_VAR 0 4
44124: PPUSH
44125: CALL_OW 256
44129: PPUSH
44130: CALL_OW 2
44134: ST_TO_ADDR
44135: GO 44098
44137: POP
44138: POP
// if not tmp then
44139: LD_VAR 0 5
44143: NOT
44144: IFFALSE 44148
// exit ;
44146: GO 44196
// if asc then
44148: LD_VAR 0 2
44152: IFFALSE 44176
// result := SortListByListAsc ( units , tmp ) else
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: LD_VAR 0 5
44168: PPUSH
44169: CALL_OW 76
44173: ST_TO_ADDR
44174: GO 44196
// result := SortListByListDesc ( units , tmp ) ;
44176: LD_ADDR_VAR 0 3
44180: PUSH
44181: LD_VAR 0 1
44185: PPUSH
44186: LD_VAR 0 5
44190: PPUSH
44191: CALL_OW 77
44195: ST_TO_ADDR
// end ;
44196: LD_VAR 0 3
44200: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44201: LD_INT 0
44203: PPUSH
44204: PPUSH
// task := GetTaskList ( mech ) ;
44205: LD_ADDR_VAR 0 4
44209: PUSH
44210: LD_VAR 0 1
44214: PPUSH
44215: CALL_OW 437
44219: ST_TO_ADDR
// if not task then
44220: LD_VAR 0 4
44224: NOT
44225: IFFALSE 44229
// exit ;
44227: GO 44271
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44229: LD_ADDR_VAR 0 3
44233: PUSH
44234: LD_VAR 0 4
44238: PUSH
44239: LD_INT 1
44241: ARRAY
44242: PUSH
44243: LD_INT 1
44245: ARRAY
44246: PUSH
44247: LD_STRING r
44249: EQUAL
44250: PUSH
44251: LD_VAR 0 4
44255: PUSH
44256: LD_INT 1
44258: ARRAY
44259: PUSH
44260: LD_INT 4
44262: ARRAY
44263: PUSH
44264: LD_VAR 0 2
44268: EQUAL
44269: AND
44270: ST_TO_ADDR
// end ;
44271: LD_VAR 0 3
44275: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44276: LD_INT 0
44278: PPUSH
// SetDir ( unit , d ) ;
44279: LD_VAR 0 1
44283: PPUSH
44284: LD_VAR 0 4
44288: PPUSH
44289: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44293: LD_VAR 0 1
44297: PPUSH
44298: LD_VAR 0 2
44302: PPUSH
44303: LD_VAR 0 3
44307: PPUSH
44308: LD_VAR 0 5
44312: PPUSH
44313: CALL_OW 48
// end ;
44317: LD_VAR 0 6
44321: RET
// export function ToNaturalNumber ( number ) ; begin
44322: LD_INT 0
44324: PPUSH
// result := number div 1 ;
44325: LD_ADDR_VAR 0 2
44329: PUSH
44330: LD_VAR 0 1
44334: PUSH
44335: LD_INT 1
44337: DIV
44338: ST_TO_ADDR
// if number < 0 then
44339: LD_VAR 0 1
44343: PUSH
44344: LD_INT 0
44346: LESS
44347: IFFALSE 44357
// result := 0 ;
44349: LD_ADDR_VAR 0 2
44353: PUSH
44354: LD_INT 0
44356: ST_TO_ADDR
// end ;
44357: LD_VAR 0 2
44361: RET
// export function SortByClass ( units , class ) ; var un ; begin
44362: LD_INT 0
44364: PPUSH
44365: PPUSH
// if not units or not class then
44366: LD_VAR 0 1
44370: NOT
44371: PUSH
44372: LD_VAR 0 2
44376: NOT
44377: OR
44378: IFFALSE 44382
// exit ;
44380: GO 44477
// result := [ ] ;
44382: LD_ADDR_VAR 0 3
44386: PUSH
44387: EMPTY
44388: ST_TO_ADDR
// for un in units do
44389: LD_ADDR_VAR 0 4
44393: PUSH
44394: LD_VAR 0 1
44398: PUSH
44399: FOR_IN
44400: IFFALSE 44475
// if GetClass ( un ) = class then
44402: LD_VAR 0 4
44406: PPUSH
44407: CALL_OW 257
44411: PUSH
44412: LD_VAR 0 2
44416: EQUAL
44417: IFFALSE 44444
// result := Insert ( result , 1 , un ) else
44419: LD_ADDR_VAR 0 3
44423: PUSH
44424: LD_VAR 0 3
44428: PPUSH
44429: LD_INT 1
44431: PPUSH
44432: LD_VAR 0 4
44436: PPUSH
44437: CALL_OW 2
44441: ST_TO_ADDR
44442: GO 44473
// result := Replace ( result , result + 1 , un ) ;
44444: LD_ADDR_VAR 0 3
44448: PUSH
44449: LD_VAR 0 3
44453: PPUSH
44454: LD_VAR 0 3
44458: PUSH
44459: LD_INT 1
44461: PLUS
44462: PPUSH
44463: LD_VAR 0 4
44467: PPUSH
44468: CALL_OW 1
44472: ST_TO_ADDR
44473: GO 44399
44475: POP
44476: POP
// end ;
44477: LD_VAR 0 3
44481: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44482: LD_INT 0
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
44490: PPUSH
// result := [ ] ;
44491: LD_ADDR_VAR 0 4
44495: PUSH
44496: EMPTY
44497: ST_TO_ADDR
// if x - r < 0 then
44498: LD_VAR 0 1
44502: PUSH
44503: LD_VAR 0 3
44507: MINUS
44508: PUSH
44509: LD_INT 0
44511: LESS
44512: IFFALSE 44524
// min_x := 0 else
44514: LD_ADDR_VAR 0 8
44518: PUSH
44519: LD_INT 0
44521: ST_TO_ADDR
44522: GO 44540
// min_x := x - r ;
44524: LD_ADDR_VAR 0 8
44528: PUSH
44529: LD_VAR 0 1
44533: PUSH
44534: LD_VAR 0 3
44538: MINUS
44539: ST_TO_ADDR
// if y - r < 0 then
44540: LD_VAR 0 2
44544: PUSH
44545: LD_VAR 0 3
44549: MINUS
44550: PUSH
44551: LD_INT 0
44553: LESS
44554: IFFALSE 44566
// min_y := 0 else
44556: LD_ADDR_VAR 0 7
44560: PUSH
44561: LD_INT 0
44563: ST_TO_ADDR
44564: GO 44582
// min_y := y - r ;
44566: LD_ADDR_VAR 0 7
44570: PUSH
44571: LD_VAR 0 2
44575: PUSH
44576: LD_VAR 0 3
44580: MINUS
44581: ST_TO_ADDR
// max_x := x + r ;
44582: LD_ADDR_VAR 0 9
44586: PUSH
44587: LD_VAR 0 1
44591: PUSH
44592: LD_VAR 0 3
44596: PLUS
44597: ST_TO_ADDR
// max_y := y + r ;
44598: LD_ADDR_VAR 0 10
44602: PUSH
44603: LD_VAR 0 2
44607: PUSH
44608: LD_VAR 0 3
44612: PLUS
44613: ST_TO_ADDR
// for _x = min_x to max_x do
44614: LD_ADDR_VAR 0 5
44618: PUSH
44619: DOUBLE
44620: LD_VAR 0 8
44624: DEC
44625: ST_TO_ADDR
44626: LD_VAR 0 9
44630: PUSH
44631: FOR_TO
44632: IFFALSE 44733
// for _y = min_y to max_y do
44634: LD_ADDR_VAR 0 6
44638: PUSH
44639: DOUBLE
44640: LD_VAR 0 7
44644: DEC
44645: ST_TO_ADDR
44646: LD_VAR 0 10
44650: PUSH
44651: FOR_TO
44652: IFFALSE 44729
// begin if not ValidHex ( _x , _y ) then
44654: LD_VAR 0 5
44658: PPUSH
44659: LD_VAR 0 6
44663: PPUSH
44664: CALL_OW 488
44668: NOT
44669: IFFALSE 44673
// continue ;
44671: GO 44651
// if GetResourceTypeXY ( _x , _y ) then
44673: LD_VAR 0 5
44677: PPUSH
44678: LD_VAR 0 6
44682: PPUSH
44683: CALL_OW 283
44687: IFFALSE 44727
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44689: LD_ADDR_VAR 0 4
44693: PUSH
44694: LD_VAR 0 4
44698: PPUSH
44699: LD_VAR 0 4
44703: PUSH
44704: LD_INT 1
44706: PLUS
44707: PPUSH
44708: LD_VAR 0 5
44712: PUSH
44713: LD_VAR 0 6
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PPUSH
44722: CALL_OW 1
44726: ST_TO_ADDR
// end ;
44727: GO 44651
44729: POP
44730: POP
44731: GO 44631
44733: POP
44734: POP
// end ;
44735: LD_VAR 0 4
44739: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44740: LD_INT 0
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
// if not units then
44750: LD_VAR 0 1
44754: NOT
44755: IFFALSE 44759
// exit ;
44757: GO 45283
// result := UnitFilter ( units , [ f_ok ] ) ;
44759: LD_ADDR_VAR 0 3
44763: PUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: LD_INT 50
44771: PUSH
44772: EMPTY
44773: LIST
44774: PPUSH
44775: CALL_OW 72
44779: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44780: LD_ADDR_VAR 0 8
44784: PUSH
44785: LD_VAR 0 1
44789: PUSH
44790: LD_INT 1
44792: ARRAY
44793: PPUSH
44794: CALL_OW 255
44798: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44799: LD_ADDR_VAR 0 10
44803: PUSH
44804: LD_INT 29
44806: PUSH
44807: LD_INT 91
44809: PUSH
44810: LD_INT 49
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: ST_TO_ADDR
// if not result then
44818: LD_VAR 0 3
44822: NOT
44823: IFFALSE 44827
// exit ;
44825: GO 45283
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44827: LD_ADDR_VAR 0 5
44831: PUSH
44832: LD_INT 81
44834: PUSH
44835: LD_VAR 0 8
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PPUSH
44844: CALL_OW 69
44848: ST_TO_ADDR
// for i in result do
44849: LD_ADDR_VAR 0 4
44853: PUSH
44854: LD_VAR 0 3
44858: PUSH
44859: FOR_IN
44860: IFFALSE 45281
// begin tag := GetTag ( i ) + 1 ;
44862: LD_ADDR_VAR 0 9
44866: PUSH
44867: LD_VAR 0 4
44871: PPUSH
44872: CALL_OW 110
44876: PUSH
44877: LD_INT 1
44879: PLUS
44880: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44881: LD_ADDR_VAR 0 7
44885: PUSH
44886: LD_VAR 0 4
44890: PPUSH
44891: CALL_OW 250
44895: PPUSH
44896: LD_VAR 0 4
44900: PPUSH
44901: CALL_OW 251
44905: PPUSH
44906: LD_INT 6
44908: PPUSH
44909: CALL 44482 0 3
44913: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44914: LD_VAR 0 4
44918: PPUSH
44919: CALL_OW 247
44923: PUSH
44924: LD_INT 2
44926: EQUAL
44927: PUSH
44928: LD_VAR 0 7
44932: AND
44933: PUSH
44934: LD_VAR 0 4
44938: PPUSH
44939: CALL_OW 264
44943: PUSH
44944: LD_VAR 0 10
44948: IN
44949: NOT
44950: AND
44951: IFFALSE 44990
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44953: LD_VAR 0 4
44957: PPUSH
44958: LD_VAR 0 7
44962: PUSH
44963: LD_INT 1
44965: ARRAY
44966: PUSH
44967: LD_INT 1
44969: ARRAY
44970: PPUSH
44971: LD_VAR 0 7
44975: PUSH
44976: LD_INT 1
44978: ARRAY
44979: PUSH
44980: LD_INT 2
44982: ARRAY
44983: PPUSH
44984: CALL_OW 116
44988: GO 45279
// if path > tag then
44990: LD_VAR 0 2
44994: PUSH
44995: LD_VAR 0 9
44999: GREATER
45000: IFFALSE 45208
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45002: LD_ADDR_VAR 0 6
45006: PUSH
45007: LD_VAR 0 5
45011: PPUSH
45012: LD_INT 91
45014: PUSH
45015: LD_VAR 0 4
45019: PUSH
45020: LD_INT 8
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: PPUSH
45028: CALL_OW 72
45032: ST_TO_ADDR
// if nearEnemy then
45033: LD_VAR 0 6
45037: IFFALSE 45106
// begin if GetWeapon ( i ) = ru_time_lapser then
45039: LD_VAR 0 4
45043: PPUSH
45044: CALL_OW 264
45048: PUSH
45049: LD_INT 49
45051: EQUAL
45052: IFFALSE 45080
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45054: LD_VAR 0 4
45058: PPUSH
45059: LD_VAR 0 6
45063: PPUSH
45064: LD_VAR 0 4
45068: PPUSH
45069: CALL_OW 74
45073: PPUSH
45074: CALL_OW 112
45078: GO 45104
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45080: LD_VAR 0 4
45084: PPUSH
45085: LD_VAR 0 6
45089: PPUSH
45090: LD_VAR 0 4
45094: PPUSH
45095: CALL_OW 74
45099: PPUSH
45100: CALL_OW 115
// end else
45104: GO 45206
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45106: LD_VAR 0 4
45110: PPUSH
45111: LD_VAR 0 2
45115: PUSH
45116: LD_VAR 0 9
45120: ARRAY
45121: PUSH
45122: LD_INT 1
45124: ARRAY
45125: PPUSH
45126: LD_VAR 0 2
45130: PUSH
45131: LD_VAR 0 9
45135: ARRAY
45136: PUSH
45137: LD_INT 2
45139: ARRAY
45140: PPUSH
45141: CALL_OW 297
45145: PUSH
45146: LD_INT 6
45148: GREATER
45149: IFFALSE 45192
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45151: LD_VAR 0 4
45155: PPUSH
45156: LD_VAR 0 2
45160: PUSH
45161: LD_VAR 0 9
45165: ARRAY
45166: PUSH
45167: LD_INT 1
45169: ARRAY
45170: PPUSH
45171: LD_VAR 0 2
45175: PUSH
45176: LD_VAR 0 9
45180: ARRAY
45181: PUSH
45182: LD_INT 2
45184: ARRAY
45185: PPUSH
45186: CALL_OW 114
45190: GO 45206
// SetTag ( i , tag ) ;
45192: LD_VAR 0 4
45196: PPUSH
45197: LD_VAR 0 9
45201: PPUSH
45202: CALL_OW 109
// end else
45206: GO 45279
// if enemy then
45208: LD_VAR 0 5
45212: IFFALSE 45279
// begin if GetWeapon ( i ) = ru_time_lapser then
45214: LD_VAR 0 4
45218: PPUSH
45219: CALL_OW 264
45223: PUSH
45224: LD_INT 49
45226: EQUAL
45227: IFFALSE 45255
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45229: LD_VAR 0 4
45233: PPUSH
45234: LD_VAR 0 5
45238: PPUSH
45239: LD_VAR 0 4
45243: PPUSH
45244: CALL_OW 74
45248: PPUSH
45249: CALL_OW 112
45253: GO 45279
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45255: LD_VAR 0 4
45259: PPUSH
45260: LD_VAR 0 5
45264: PPUSH
45265: LD_VAR 0 4
45269: PPUSH
45270: CALL_OW 74
45274: PPUSH
45275: CALL_OW 115
// end ; end ;
45279: GO 44859
45281: POP
45282: POP
// end ;
45283: LD_VAR 0 3
45287: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45288: LD_INT 0
45290: PPUSH
45291: PPUSH
45292: PPUSH
// if not unit or IsInUnit ( unit ) then
45293: LD_VAR 0 1
45297: NOT
45298: PUSH
45299: LD_VAR 0 1
45303: PPUSH
45304: CALL_OW 310
45308: OR
45309: IFFALSE 45313
// exit ;
45311: GO 45404
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45313: LD_ADDR_VAR 0 4
45317: PUSH
45318: LD_VAR 0 1
45322: PPUSH
45323: CALL_OW 250
45327: PPUSH
45328: LD_VAR 0 2
45332: PPUSH
45333: LD_INT 1
45335: PPUSH
45336: CALL_OW 272
45340: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45341: LD_ADDR_VAR 0 5
45345: PUSH
45346: LD_VAR 0 1
45350: PPUSH
45351: CALL_OW 251
45355: PPUSH
45356: LD_VAR 0 2
45360: PPUSH
45361: LD_INT 1
45363: PPUSH
45364: CALL_OW 273
45368: ST_TO_ADDR
// if ValidHex ( x , y ) then
45369: LD_VAR 0 4
45373: PPUSH
45374: LD_VAR 0 5
45378: PPUSH
45379: CALL_OW 488
45383: IFFALSE 45404
// ComTurnXY ( unit , x , y ) ;
45385: LD_VAR 0 1
45389: PPUSH
45390: LD_VAR 0 4
45394: PPUSH
45395: LD_VAR 0 5
45399: PPUSH
45400: CALL_OW 118
// end ;
45404: LD_VAR 0 3
45408: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45409: LD_INT 0
45411: PPUSH
45412: PPUSH
// result := false ;
45413: LD_ADDR_VAR 0 3
45417: PUSH
45418: LD_INT 0
45420: ST_TO_ADDR
// if not units then
45421: LD_VAR 0 2
45425: NOT
45426: IFFALSE 45430
// exit ;
45428: GO 45475
// for i in units do
45430: LD_ADDR_VAR 0 4
45434: PUSH
45435: LD_VAR 0 2
45439: PUSH
45440: FOR_IN
45441: IFFALSE 45473
// if See ( side , i ) then
45443: LD_VAR 0 1
45447: PPUSH
45448: LD_VAR 0 4
45452: PPUSH
45453: CALL_OW 292
45457: IFFALSE 45471
// begin result := true ;
45459: LD_ADDR_VAR 0 3
45463: PUSH
45464: LD_INT 1
45466: ST_TO_ADDR
// exit ;
45467: POP
45468: POP
45469: GO 45475
// end ;
45471: GO 45440
45473: POP
45474: POP
// end ;
45475: LD_VAR 0 3
45479: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45480: LD_INT 0
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
// if not unit or not points then
45486: LD_VAR 0 1
45490: NOT
45491: PUSH
45492: LD_VAR 0 2
45496: NOT
45497: OR
45498: IFFALSE 45502
// exit ;
45500: GO 45592
// dist := 99999 ;
45502: LD_ADDR_VAR 0 5
45506: PUSH
45507: LD_INT 99999
45509: ST_TO_ADDR
// for i in points do
45510: LD_ADDR_VAR 0 4
45514: PUSH
45515: LD_VAR 0 2
45519: PUSH
45520: FOR_IN
45521: IFFALSE 45590
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45523: LD_ADDR_VAR 0 6
45527: PUSH
45528: LD_VAR 0 1
45532: PPUSH
45533: LD_VAR 0 4
45537: PUSH
45538: LD_INT 1
45540: ARRAY
45541: PPUSH
45542: LD_VAR 0 4
45546: PUSH
45547: LD_INT 2
45549: ARRAY
45550: PPUSH
45551: CALL_OW 297
45555: ST_TO_ADDR
// if tmpDist < dist then
45556: LD_VAR 0 6
45560: PUSH
45561: LD_VAR 0 5
45565: LESS
45566: IFFALSE 45588
// begin result := i ;
45568: LD_ADDR_VAR 0 3
45572: PUSH
45573: LD_VAR 0 4
45577: ST_TO_ADDR
// dist := tmpDist ;
45578: LD_ADDR_VAR 0 5
45582: PUSH
45583: LD_VAR 0 6
45587: ST_TO_ADDR
// end ; end ;
45588: GO 45520
45590: POP
45591: POP
// end ;
45592: LD_VAR 0 3
45596: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45597: LD_INT 0
45599: PPUSH
// uc_side := side ;
45600: LD_ADDR_OWVAR 20
45604: PUSH
45605: LD_VAR 0 1
45609: ST_TO_ADDR
// uc_nation := 3 ;
45610: LD_ADDR_OWVAR 21
45614: PUSH
45615: LD_INT 3
45617: ST_TO_ADDR
// vc_chassis := 25 ;
45618: LD_ADDR_OWVAR 37
45622: PUSH
45623: LD_INT 25
45625: ST_TO_ADDR
// vc_engine := engine_siberite ;
45626: LD_ADDR_OWVAR 39
45630: PUSH
45631: LD_INT 3
45633: ST_TO_ADDR
// vc_control := control_computer ;
45634: LD_ADDR_OWVAR 38
45638: PUSH
45639: LD_INT 3
45641: ST_TO_ADDR
// vc_weapon := 59 ;
45642: LD_ADDR_OWVAR 40
45646: PUSH
45647: LD_INT 59
45649: ST_TO_ADDR
// result := CreateVehicle ;
45650: LD_ADDR_VAR 0 5
45654: PUSH
45655: CALL_OW 45
45659: ST_TO_ADDR
// SetDir ( result , d ) ;
45660: LD_VAR 0 5
45664: PPUSH
45665: LD_VAR 0 4
45669: PPUSH
45670: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45674: LD_VAR 0 5
45678: PPUSH
45679: LD_VAR 0 2
45683: PPUSH
45684: LD_VAR 0 3
45688: PPUSH
45689: LD_INT 0
45691: PPUSH
45692: CALL_OW 48
// end ;
45696: LD_VAR 0 5
45700: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45701: LD_INT 0
45703: PPUSH
45704: PPUSH
45705: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45706: LD_ADDR_VAR 0 2
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45729: LD_VAR 0 1
45733: NOT
45734: PUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: CALL_OW 264
45744: PUSH
45745: LD_INT 12
45747: PUSH
45748: LD_INT 51
45750: PUSH
45751: LD_INT 32
45753: PUSH
45754: LD_INT 89
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: IN
45763: NOT
45764: OR
45765: IFFALSE 45769
// exit ;
45767: GO 45867
// for i := 1 to 3 do
45769: LD_ADDR_VAR 0 3
45773: PUSH
45774: DOUBLE
45775: LD_INT 1
45777: DEC
45778: ST_TO_ADDR
45779: LD_INT 3
45781: PUSH
45782: FOR_TO
45783: IFFALSE 45865
// begin tmp := GetCargo ( cargo , i ) ;
45785: LD_ADDR_VAR 0 4
45789: PUSH
45790: LD_VAR 0 1
45794: PPUSH
45795: LD_VAR 0 3
45799: PPUSH
45800: CALL_OW 289
45804: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45805: LD_ADDR_VAR 0 2
45809: PUSH
45810: LD_VAR 0 2
45814: PPUSH
45815: LD_VAR 0 3
45819: PPUSH
45820: LD_VAR 0 4
45824: PPUSH
45825: CALL_OW 1
45829: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45830: LD_ADDR_VAR 0 2
45834: PUSH
45835: LD_VAR 0 2
45839: PPUSH
45840: LD_INT 4
45842: PPUSH
45843: LD_VAR 0 2
45847: PUSH
45848: LD_INT 4
45850: ARRAY
45851: PUSH
45852: LD_VAR 0 4
45856: PLUS
45857: PPUSH
45858: CALL_OW 1
45862: ST_TO_ADDR
// end ;
45863: GO 45782
45865: POP
45866: POP
// end ;
45867: LD_VAR 0 2
45871: RET
// export function Length ( array ) ; begin
45872: LD_INT 0
45874: PPUSH
// result := array + 0 ;
45875: LD_ADDR_VAR 0 2
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_INT 0
45887: PLUS
45888: ST_TO_ADDR
// end ;
45889: LD_VAR 0 2
45893: RET
// export function PrepareArray ( array ) ; begin
45894: LD_INT 0
45896: PPUSH
// result := array diff 0 ;
45897: LD_ADDR_VAR 0 2
45901: PUSH
45902: LD_VAR 0 1
45906: PUSH
45907: LD_INT 0
45909: DIFF
45910: ST_TO_ADDR
// if not result [ 1 ] then
45911: LD_VAR 0 2
45915: PUSH
45916: LD_INT 1
45918: ARRAY
45919: NOT
45920: IFFALSE 45940
// result := Delete ( result , 1 ) ;
45922: LD_ADDR_VAR 0 2
45926: PUSH
45927: LD_VAR 0 2
45931: PPUSH
45932: LD_INT 1
45934: PPUSH
45935: CALL_OW 3
45939: ST_TO_ADDR
// end ;
45940: LD_VAR 0 2
45944: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45945: LD_INT 0
45947: PPUSH
45948: PPUSH
45949: PPUSH
45950: PPUSH
// sibRocketRange := 25 ;
45951: LD_ADDR_VAR 0 6
45955: PUSH
45956: LD_INT 25
45958: ST_TO_ADDR
// result := false ;
45959: LD_ADDR_VAR 0 4
45963: PUSH
45964: LD_INT 0
45966: ST_TO_ADDR
// for i := 0 to 5 do
45967: LD_ADDR_VAR 0 5
45971: PUSH
45972: DOUBLE
45973: LD_INT 0
45975: DEC
45976: ST_TO_ADDR
45977: LD_INT 5
45979: PUSH
45980: FOR_TO
45981: IFFALSE 46048
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45983: LD_VAR 0 1
45987: PPUSH
45988: LD_VAR 0 5
45992: PPUSH
45993: LD_VAR 0 6
45997: PPUSH
45998: CALL_OW 272
46002: PPUSH
46003: LD_VAR 0 2
46007: PPUSH
46008: LD_VAR 0 5
46012: PPUSH
46013: LD_VAR 0 6
46017: PPUSH
46018: CALL_OW 273
46022: PPUSH
46023: LD_VAR 0 3
46027: PPUSH
46028: CALL_OW 309
46032: IFFALSE 46046
// begin result := true ;
46034: LD_ADDR_VAR 0 4
46038: PUSH
46039: LD_INT 1
46041: ST_TO_ADDR
// exit ;
46042: POP
46043: POP
46044: GO 46050
// end ;
46046: GO 45980
46048: POP
46049: POP
// end ;
46050: LD_VAR 0 4
46054: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46055: LD_INT 0
46057: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46058: LD_VAR 0 1
46062: PPUSH
46063: LD_VAR 0 2
46067: PPUSH
46068: LD_INT 0
46070: PPUSH
46071: LD_INT 0
46073: PPUSH
46074: LD_INT 1
46076: PPUSH
46077: LD_INT 0
46079: PPUSH
46080: CALL_OW 587
// end ;
46084: LD_VAR 0 3
46088: RET
// export function CenterOnNow ( unit ) ; begin
46089: LD_INT 0
46091: PPUSH
// result := IsInUnit ( unit ) ;
46092: LD_ADDR_VAR 0 2
46096: PUSH
46097: LD_VAR 0 1
46101: PPUSH
46102: CALL_OW 310
46106: ST_TO_ADDR
// if not result then
46107: LD_VAR 0 2
46111: NOT
46112: IFFALSE 46124
// result := unit ;
46114: LD_ADDR_VAR 0 2
46118: PUSH
46119: LD_VAR 0 1
46123: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46124: LD_VAR 0 1
46128: PPUSH
46129: CALL_OW 87
// end ; end_of_file end_of_file
46133: LD_VAR 0 2
46137: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
46138: LD_VAR 0 1
46142: PPUSH
46143: LD_VAR 0 2
46147: PPUSH
46148: LD_VAR 0 3
46152: PPUSH
46153: LD_VAR 0 4
46157: PPUSH
46158: LD_VAR 0 5
46162: PPUSH
46163: LD_VAR 0 6
46167: PPUSH
46168: CALL 46352 0 6
// end ;
46172: PPOPN 6
46174: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
46175: LD_INT 0
46177: PPUSH
// begin if not units then
46178: LD_VAR 0 1
46182: NOT
46183: IFFALSE 46187
// exit ;
46185: GO 46187
// end ;
46187: PPOPN 7
46189: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
46190: CALL 46256 0 0
// end ; end_of_file
46194: PPOPN 1
46196: END
// export globalGameSaveCounter ; every 0 0$1 do
46197: GO 46199
46199: DISABLE
// begin enable ;
46200: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46201: LD_STRING updateTimer(
46203: PUSH
46204: LD_OWVAR 1
46208: STR
46209: PUSH
46210: LD_STRING );
46212: STR
46213: PPUSH
46214: CALL_OW 559
// end ;
46218: END
// every 0 0$1 do
46219: GO 46221
46221: DISABLE
// begin globalGameSaveCounter := 0 ;
46222: LD_ADDR_EXP 27
46226: PUSH
46227: LD_INT 0
46229: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
46230: LD_STRING setGameSaveCounter(0)
46232: PPUSH
46233: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
46237: LD_STRING initStreamRollete();
46239: PPUSH
46240: CALL_OW 559
// InitStreamMode ;
46244: CALL 47570 0 0
// DefineStreamItems ( false ) ;
46248: LD_INT 0
46250: PPUSH
46251: CALL 48034 0 1
// end ;
46255: END
// export function SOS_MapStart ( ) ; begin
46256: LD_INT 0
46258: PPUSH
// if streamModeActive then
46259: LD_EXP 28
46263: IFFALSE 46272
// DefineStreamItems ( true ) ;
46265: LD_INT 1
46267: PPUSH
46268: CALL 48034 0 1
// UpdateLuaVariables ( ) ;
46272: CALL 46289 0 0
// UpdateFactoryWaypoints ( ) ;
46276: CALL 60895 0 0
// UpdateWarehouseGatheringPoints ( ) ;
46280: CALL 61152 0 0
// end ;
46284: LD_VAR 0 1
46288: RET
// function UpdateLuaVariables ( ) ; begin
46289: LD_INT 0
46291: PPUSH
// if globalGameSaveCounter then
46292: LD_EXP 27
46296: IFFALSE 46330
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
46298: LD_ADDR_EXP 27
46302: PUSH
46303: LD_EXP 27
46307: PPUSH
46308: CALL 43497 0 1
46312: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46313: LD_STRING setGameSaveCounter(
46315: PUSH
46316: LD_EXP 27
46320: STR
46321: PUSH
46322: LD_STRING )
46324: STR
46325: PPUSH
46326: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46330: LD_STRING setGameDifficulty(
46332: PUSH
46333: LD_OWVAR 67
46337: STR
46338: PUSH
46339: LD_STRING )
46341: STR
46342: PPUSH
46343: CALL_OW 559
// end ;
46347: LD_VAR 0 1
46351: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46352: LD_INT 0
46354: PPUSH
// if p2 = stream_mode then
46355: LD_VAR 0 2
46359: PUSH
46360: LD_INT 100
46362: EQUAL
46363: IFFALSE 47366
// begin if not StreamModeActive then
46365: LD_EXP 28
46369: NOT
46370: IFFALSE 46380
// StreamModeActive := true ;
46372: LD_ADDR_EXP 28
46376: PUSH
46377: LD_INT 1
46379: ST_TO_ADDR
// if p3 = 0 then
46380: LD_VAR 0 3
46384: PUSH
46385: LD_INT 0
46387: EQUAL
46388: IFFALSE 46394
// InitStreamMode ;
46390: CALL 47570 0 0
// if p3 = 1 then
46394: LD_VAR 0 3
46398: PUSH
46399: LD_INT 1
46401: EQUAL
46402: IFFALSE 46412
// sRocket := true ;
46404: LD_ADDR_EXP 33
46408: PUSH
46409: LD_INT 1
46411: ST_TO_ADDR
// if p3 = 2 then
46412: LD_VAR 0 3
46416: PUSH
46417: LD_INT 2
46419: EQUAL
46420: IFFALSE 46430
// sSpeed := true ;
46422: LD_ADDR_EXP 32
46426: PUSH
46427: LD_INT 1
46429: ST_TO_ADDR
// if p3 = 3 then
46430: LD_VAR 0 3
46434: PUSH
46435: LD_INT 3
46437: EQUAL
46438: IFFALSE 46448
// sEngine := true ;
46440: LD_ADDR_EXP 34
46444: PUSH
46445: LD_INT 1
46447: ST_TO_ADDR
// if p3 = 4 then
46448: LD_VAR 0 3
46452: PUSH
46453: LD_INT 4
46455: EQUAL
46456: IFFALSE 46466
// sSpec := true ;
46458: LD_ADDR_EXP 31
46462: PUSH
46463: LD_INT 1
46465: ST_TO_ADDR
// if p3 = 5 then
46466: LD_VAR 0 3
46470: PUSH
46471: LD_INT 5
46473: EQUAL
46474: IFFALSE 46484
// sLevel := true ;
46476: LD_ADDR_EXP 35
46480: PUSH
46481: LD_INT 1
46483: ST_TO_ADDR
// if p3 = 6 then
46484: LD_VAR 0 3
46488: PUSH
46489: LD_INT 6
46491: EQUAL
46492: IFFALSE 46502
// sArmoury := true ;
46494: LD_ADDR_EXP 36
46498: PUSH
46499: LD_INT 1
46501: ST_TO_ADDR
// if p3 = 7 then
46502: LD_VAR 0 3
46506: PUSH
46507: LD_INT 7
46509: EQUAL
46510: IFFALSE 46520
// sRadar := true ;
46512: LD_ADDR_EXP 37
46516: PUSH
46517: LD_INT 1
46519: ST_TO_ADDR
// if p3 = 8 then
46520: LD_VAR 0 3
46524: PUSH
46525: LD_INT 8
46527: EQUAL
46528: IFFALSE 46538
// sBunker := true ;
46530: LD_ADDR_EXP 38
46534: PUSH
46535: LD_INT 1
46537: ST_TO_ADDR
// if p3 = 9 then
46538: LD_VAR 0 3
46542: PUSH
46543: LD_INT 9
46545: EQUAL
46546: IFFALSE 46556
// sHack := true ;
46548: LD_ADDR_EXP 39
46552: PUSH
46553: LD_INT 1
46555: ST_TO_ADDR
// if p3 = 10 then
46556: LD_VAR 0 3
46560: PUSH
46561: LD_INT 10
46563: EQUAL
46564: IFFALSE 46574
// sFire := true ;
46566: LD_ADDR_EXP 40
46570: PUSH
46571: LD_INT 1
46573: ST_TO_ADDR
// if p3 = 11 then
46574: LD_VAR 0 3
46578: PUSH
46579: LD_INT 11
46581: EQUAL
46582: IFFALSE 46592
// sRefresh := true ;
46584: LD_ADDR_EXP 41
46588: PUSH
46589: LD_INT 1
46591: ST_TO_ADDR
// if p3 = 12 then
46592: LD_VAR 0 3
46596: PUSH
46597: LD_INT 12
46599: EQUAL
46600: IFFALSE 46610
// sExp := true ;
46602: LD_ADDR_EXP 42
46606: PUSH
46607: LD_INT 1
46609: ST_TO_ADDR
// if p3 = 13 then
46610: LD_VAR 0 3
46614: PUSH
46615: LD_INT 13
46617: EQUAL
46618: IFFALSE 46628
// sDepot := true ;
46620: LD_ADDR_EXP 43
46624: PUSH
46625: LD_INT 1
46627: ST_TO_ADDR
// if p3 = 14 then
46628: LD_VAR 0 3
46632: PUSH
46633: LD_INT 14
46635: EQUAL
46636: IFFALSE 46646
// sFlag := true ;
46638: LD_ADDR_EXP 44
46642: PUSH
46643: LD_INT 1
46645: ST_TO_ADDR
// if p3 = 15 then
46646: LD_VAR 0 3
46650: PUSH
46651: LD_INT 15
46653: EQUAL
46654: IFFALSE 46664
// sKamikadze := true ;
46656: LD_ADDR_EXP 52
46660: PUSH
46661: LD_INT 1
46663: ST_TO_ADDR
// if p3 = 16 then
46664: LD_VAR 0 3
46668: PUSH
46669: LD_INT 16
46671: EQUAL
46672: IFFALSE 46682
// sTroll := true ;
46674: LD_ADDR_EXP 53
46678: PUSH
46679: LD_INT 1
46681: ST_TO_ADDR
// if p3 = 17 then
46682: LD_VAR 0 3
46686: PUSH
46687: LD_INT 17
46689: EQUAL
46690: IFFALSE 46700
// sSlow := true ;
46692: LD_ADDR_EXP 54
46696: PUSH
46697: LD_INT 1
46699: ST_TO_ADDR
// if p3 = 18 then
46700: LD_VAR 0 3
46704: PUSH
46705: LD_INT 18
46707: EQUAL
46708: IFFALSE 46718
// sLack := true ;
46710: LD_ADDR_EXP 55
46714: PUSH
46715: LD_INT 1
46717: ST_TO_ADDR
// if p3 = 19 then
46718: LD_VAR 0 3
46722: PUSH
46723: LD_INT 19
46725: EQUAL
46726: IFFALSE 46736
// sTank := true ;
46728: LD_ADDR_EXP 57
46732: PUSH
46733: LD_INT 1
46735: ST_TO_ADDR
// if p3 = 20 then
46736: LD_VAR 0 3
46740: PUSH
46741: LD_INT 20
46743: EQUAL
46744: IFFALSE 46754
// sRemote := true ;
46746: LD_ADDR_EXP 58
46750: PUSH
46751: LD_INT 1
46753: ST_TO_ADDR
// if p3 = 21 then
46754: LD_VAR 0 3
46758: PUSH
46759: LD_INT 21
46761: EQUAL
46762: IFFALSE 46772
// sPowell := true ;
46764: LD_ADDR_EXP 59
46768: PUSH
46769: LD_INT 1
46771: ST_TO_ADDR
// if p3 = 22 then
46772: LD_VAR 0 3
46776: PUSH
46777: LD_INT 22
46779: EQUAL
46780: IFFALSE 46790
// sTeleport := true ;
46782: LD_ADDR_EXP 62
46786: PUSH
46787: LD_INT 1
46789: ST_TO_ADDR
// if p3 = 23 then
46790: LD_VAR 0 3
46794: PUSH
46795: LD_INT 23
46797: EQUAL
46798: IFFALSE 46808
// sOilTower := true ;
46800: LD_ADDR_EXP 64
46804: PUSH
46805: LD_INT 1
46807: ST_TO_ADDR
// if p3 = 24 then
46808: LD_VAR 0 3
46812: PUSH
46813: LD_INT 24
46815: EQUAL
46816: IFFALSE 46826
// sShovel := true ;
46818: LD_ADDR_EXP 65
46822: PUSH
46823: LD_INT 1
46825: ST_TO_ADDR
// if p3 = 25 then
46826: LD_VAR 0 3
46830: PUSH
46831: LD_INT 25
46833: EQUAL
46834: IFFALSE 46844
// sSheik := true ;
46836: LD_ADDR_EXP 66
46840: PUSH
46841: LD_INT 1
46843: ST_TO_ADDR
// if p3 = 26 then
46844: LD_VAR 0 3
46848: PUSH
46849: LD_INT 26
46851: EQUAL
46852: IFFALSE 46862
// sEarthquake := true ;
46854: LD_ADDR_EXP 68
46858: PUSH
46859: LD_INT 1
46861: ST_TO_ADDR
// if p3 = 27 then
46862: LD_VAR 0 3
46866: PUSH
46867: LD_INT 27
46869: EQUAL
46870: IFFALSE 46880
// sAI := true ;
46872: LD_ADDR_EXP 69
46876: PUSH
46877: LD_INT 1
46879: ST_TO_ADDR
// if p3 = 28 then
46880: LD_VAR 0 3
46884: PUSH
46885: LD_INT 28
46887: EQUAL
46888: IFFALSE 46898
// sCargo := true ;
46890: LD_ADDR_EXP 72
46894: PUSH
46895: LD_INT 1
46897: ST_TO_ADDR
// if p3 = 29 then
46898: LD_VAR 0 3
46902: PUSH
46903: LD_INT 29
46905: EQUAL
46906: IFFALSE 46916
// sDLaser := true ;
46908: LD_ADDR_EXP 73
46912: PUSH
46913: LD_INT 1
46915: ST_TO_ADDR
// if p3 = 30 then
46916: LD_VAR 0 3
46920: PUSH
46921: LD_INT 30
46923: EQUAL
46924: IFFALSE 46934
// sExchange := true ;
46926: LD_ADDR_EXP 74
46930: PUSH
46931: LD_INT 1
46933: ST_TO_ADDR
// if p3 = 31 then
46934: LD_VAR 0 3
46938: PUSH
46939: LD_INT 31
46941: EQUAL
46942: IFFALSE 46952
// sFac := true ;
46944: LD_ADDR_EXP 75
46948: PUSH
46949: LD_INT 1
46951: ST_TO_ADDR
// if p3 = 32 then
46952: LD_VAR 0 3
46956: PUSH
46957: LD_INT 32
46959: EQUAL
46960: IFFALSE 46970
// sPower := true ;
46962: LD_ADDR_EXP 76
46966: PUSH
46967: LD_INT 1
46969: ST_TO_ADDR
// if p3 = 33 then
46970: LD_VAR 0 3
46974: PUSH
46975: LD_INT 33
46977: EQUAL
46978: IFFALSE 46988
// sRandom := true ;
46980: LD_ADDR_EXP 77
46984: PUSH
46985: LD_INT 1
46987: ST_TO_ADDR
// if p3 = 34 then
46988: LD_VAR 0 3
46992: PUSH
46993: LD_INT 34
46995: EQUAL
46996: IFFALSE 47006
// sShield := true ;
46998: LD_ADDR_EXP 78
47002: PUSH
47003: LD_INT 1
47005: ST_TO_ADDR
// if p3 = 35 then
47006: LD_VAR 0 3
47010: PUSH
47011: LD_INT 35
47013: EQUAL
47014: IFFALSE 47024
// sTime := true ;
47016: LD_ADDR_EXP 79
47020: PUSH
47021: LD_INT 1
47023: ST_TO_ADDR
// if p3 = 36 then
47024: LD_VAR 0 3
47028: PUSH
47029: LD_INT 36
47031: EQUAL
47032: IFFALSE 47042
// sTools := true ;
47034: LD_ADDR_EXP 80
47038: PUSH
47039: LD_INT 1
47041: ST_TO_ADDR
// if p3 = 101 then
47042: LD_VAR 0 3
47046: PUSH
47047: LD_INT 101
47049: EQUAL
47050: IFFALSE 47060
// sSold := true ;
47052: LD_ADDR_EXP 45
47056: PUSH
47057: LD_INT 1
47059: ST_TO_ADDR
// if p3 = 102 then
47060: LD_VAR 0 3
47064: PUSH
47065: LD_INT 102
47067: EQUAL
47068: IFFALSE 47078
// sDiff := true ;
47070: LD_ADDR_EXP 46
47074: PUSH
47075: LD_INT 1
47077: ST_TO_ADDR
// if p3 = 103 then
47078: LD_VAR 0 3
47082: PUSH
47083: LD_INT 103
47085: EQUAL
47086: IFFALSE 47096
// sFog := true ;
47088: LD_ADDR_EXP 49
47092: PUSH
47093: LD_INT 1
47095: ST_TO_ADDR
// if p3 = 104 then
47096: LD_VAR 0 3
47100: PUSH
47101: LD_INT 104
47103: EQUAL
47104: IFFALSE 47114
// sReset := true ;
47106: LD_ADDR_EXP 50
47110: PUSH
47111: LD_INT 1
47113: ST_TO_ADDR
// if p3 = 105 then
47114: LD_VAR 0 3
47118: PUSH
47119: LD_INT 105
47121: EQUAL
47122: IFFALSE 47132
// sSun := true ;
47124: LD_ADDR_EXP 51
47128: PUSH
47129: LD_INT 1
47131: ST_TO_ADDR
// if p3 = 106 then
47132: LD_VAR 0 3
47136: PUSH
47137: LD_INT 106
47139: EQUAL
47140: IFFALSE 47150
// sTiger := true ;
47142: LD_ADDR_EXP 47
47146: PUSH
47147: LD_INT 1
47149: ST_TO_ADDR
// if p3 = 107 then
47150: LD_VAR 0 3
47154: PUSH
47155: LD_INT 107
47157: EQUAL
47158: IFFALSE 47168
// sBomb := true ;
47160: LD_ADDR_EXP 48
47164: PUSH
47165: LD_INT 1
47167: ST_TO_ADDR
// if p3 = 108 then
47168: LD_VAR 0 3
47172: PUSH
47173: LD_INT 108
47175: EQUAL
47176: IFFALSE 47186
// sWound := true ;
47178: LD_ADDR_EXP 56
47182: PUSH
47183: LD_INT 1
47185: ST_TO_ADDR
// if p3 = 109 then
47186: LD_VAR 0 3
47190: PUSH
47191: LD_INT 109
47193: EQUAL
47194: IFFALSE 47204
// sBetray := true ;
47196: LD_ADDR_EXP 60
47200: PUSH
47201: LD_INT 1
47203: ST_TO_ADDR
// if p3 = 110 then
47204: LD_VAR 0 3
47208: PUSH
47209: LD_INT 110
47211: EQUAL
47212: IFFALSE 47222
// sContamin := true ;
47214: LD_ADDR_EXP 61
47218: PUSH
47219: LD_INT 1
47221: ST_TO_ADDR
// if p3 = 111 then
47222: LD_VAR 0 3
47226: PUSH
47227: LD_INT 111
47229: EQUAL
47230: IFFALSE 47240
// sOil := true ;
47232: LD_ADDR_EXP 63
47236: PUSH
47237: LD_INT 1
47239: ST_TO_ADDR
// if p3 = 112 then
47240: LD_VAR 0 3
47244: PUSH
47245: LD_INT 112
47247: EQUAL
47248: IFFALSE 47258
// sStu := true ;
47250: LD_ADDR_EXP 67
47254: PUSH
47255: LD_INT 1
47257: ST_TO_ADDR
// if p3 = 113 then
47258: LD_VAR 0 3
47262: PUSH
47263: LD_INT 113
47265: EQUAL
47266: IFFALSE 47276
// sBazooka := true ;
47268: LD_ADDR_EXP 70
47272: PUSH
47273: LD_INT 1
47275: ST_TO_ADDR
// if p3 = 114 then
47276: LD_VAR 0 3
47280: PUSH
47281: LD_INT 114
47283: EQUAL
47284: IFFALSE 47294
// sMortar := true ;
47286: LD_ADDR_EXP 71
47290: PUSH
47291: LD_INT 1
47293: ST_TO_ADDR
// if p3 = 115 then
47294: LD_VAR 0 3
47298: PUSH
47299: LD_INT 115
47301: EQUAL
47302: IFFALSE 47312
// sRanger := true ;
47304: LD_ADDR_EXP 81
47308: PUSH
47309: LD_INT 1
47311: ST_TO_ADDR
// if p3 = 116 then
47312: LD_VAR 0 3
47316: PUSH
47317: LD_INT 116
47319: EQUAL
47320: IFFALSE 47330
// sComputer := true ;
47322: LD_ADDR_EXP 82
47326: PUSH
47327: LD_INT 1
47329: ST_TO_ADDR
// if p3 = 117 then
47330: LD_VAR 0 3
47334: PUSH
47335: LD_INT 117
47337: EQUAL
47338: IFFALSE 47348
// s30 := true ;
47340: LD_ADDR_EXP 83
47344: PUSH
47345: LD_INT 1
47347: ST_TO_ADDR
// if p3 = 118 then
47348: LD_VAR 0 3
47352: PUSH
47353: LD_INT 118
47355: EQUAL
47356: IFFALSE 47366
// s60 := true ;
47358: LD_ADDR_EXP 84
47362: PUSH
47363: LD_INT 1
47365: ST_TO_ADDR
// end ; if p2 = hack_mode then
47366: LD_VAR 0 2
47370: PUSH
47371: LD_INT 101
47373: EQUAL
47374: IFFALSE 47502
// begin case p3 of 1 :
47376: LD_VAR 0 3
47380: PUSH
47381: LD_INT 1
47383: DOUBLE
47384: EQUAL
47385: IFTRUE 47389
47387: GO 47396
47389: POP
// hHackUnlimitedResources ; 2 :
47390: CALL 59641 0 0
47394: GO 47502
47396: LD_INT 2
47398: DOUBLE
47399: EQUAL
47400: IFTRUE 47404
47402: GO 47411
47404: POP
// hHackSetLevel10 ; 3 :
47405: CALL 59774 0 0
47409: GO 47502
47411: LD_INT 3
47413: DOUBLE
47414: EQUAL
47415: IFTRUE 47419
47417: GO 47426
47419: POP
// hHackSetLevel10YourUnits ; 4 :
47420: CALL 59859 0 0
47424: GO 47502
47426: LD_INT 4
47428: DOUBLE
47429: EQUAL
47430: IFTRUE 47434
47432: GO 47441
47434: POP
// hHackInvincible ; 5 :
47435: CALL 60307 0 0
47439: GO 47502
47441: LD_INT 5
47443: DOUBLE
47444: EQUAL
47445: IFTRUE 47449
47447: GO 47456
47449: POP
// hHackInvisible ; 6 :
47450: CALL 60418 0 0
47454: GO 47502
47456: LD_INT 6
47458: DOUBLE
47459: EQUAL
47460: IFTRUE 47464
47462: GO 47471
47464: POP
// hHackChangeYourSide ; 7 :
47465: CALL 60475 0 0
47469: GO 47502
47471: LD_INT 7
47473: DOUBLE
47474: EQUAL
47475: IFTRUE 47479
47477: GO 47486
47479: POP
// hHackChangeUnitSide ; 8 :
47480: CALL 60517 0 0
47484: GO 47502
47486: LD_INT 8
47488: DOUBLE
47489: EQUAL
47490: IFTRUE 47494
47492: GO 47501
47494: POP
// hHackFog ; end ;
47495: CALL 60618 0 0
47499: GO 47502
47501: POP
// end ; if p2 = game_save_mode then
47502: LD_VAR 0 2
47506: PUSH
47507: LD_INT 102
47509: EQUAL
47510: IFFALSE 47565
// begin if p3 = 1 then
47512: LD_VAR 0 3
47516: PUSH
47517: LD_INT 1
47519: EQUAL
47520: IFFALSE 47532
// globalGameSaveCounter := p4 ;
47522: LD_ADDR_EXP 27
47526: PUSH
47527: LD_VAR 0 4
47531: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
47532: LD_VAR 0 3
47536: PUSH
47537: LD_INT 2
47539: EQUAL
47540: PUSH
47541: LD_EXP 27
47545: AND
47546: IFFALSE 47565
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47548: LD_STRING setGameSaveCounter(
47550: PUSH
47551: LD_EXP 27
47555: STR
47556: PUSH
47557: LD_STRING )
47559: STR
47560: PPUSH
47561: CALL_OW 559
// end ; end ;
47565: LD_VAR 0 7
47569: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
47570: LD_INT 0
47572: PPUSH
// streamModeActive := false ;
47573: LD_ADDR_EXP 28
47577: PUSH
47578: LD_INT 0
47580: ST_TO_ADDR
// normalCounter := 36 ;
47581: LD_ADDR_EXP 29
47585: PUSH
47586: LD_INT 36
47588: ST_TO_ADDR
// hardcoreCounter := 18 ;
47589: LD_ADDR_EXP 30
47593: PUSH
47594: LD_INT 18
47596: ST_TO_ADDR
// sRocket := false ;
47597: LD_ADDR_EXP 33
47601: PUSH
47602: LD_INT 0
47604: ST_TO_ADDR
// sSpeed := false ;
47605: LD_ADDR_EXP 32
47609: PUSH
47610: LD_INT 0
47612: ST_TO_ADDR
// sEngine := false ;
47613: LD_ADDR_EXP 34
47617: PUSH
47618: LD_INT 0
47620: ST_TO_ADDR
// sSpec := false ;
47621: LD_ADDR_EXP 31
47625: PUSH
47626: LD_INT 0
47628: ST_TO_ADDR
// sLevel := false ;
47629: LD_ADDR_EXP 35
47633: PUSH
47634: LD_INT 0
47636: ST_TO_ADDR
// sArmoury := false ;
47637: LD_ADDR_EXP 36
47641: PUSH
47642: LD_INT 0
47644: ST_TO_ADDR
// sRadar := false ;
47645: LD_ADDR_EXP 37
47649: PUSH
47650: LD_INT 0
47652: ST_TO_ADDR
// sBunker := false ;
47653: LD_ADDR_EXP 38
47657: PUSH
47658: LD_INT 0
47660: ST_TO_ADDR
// sHack := false ;
47661: LD_ADDR_EXP 39
47665: PUSH
47666: LD_INT 0
47668: ST_TO_ADDR
// sFire := false ;
47669: LD_ADDR_EXP 40
47673: PUSH
47674: LD_INT 0
47676: ST_TO_ADDR
// sRefresh := false ;
47677: LD_ADDR_EXP 41
47681: PUSH
47682: LD_INT 0
47684: ST_TO_ADDR
// sExp := false ;
47685: LD_ADDR_EXP 42
47689: PUSH
47690: LD_INT 0
47692: ST_TO_ADDR
// sDepot := false ;
47693: LD_ADDR_EXP 43
47697: PUSH
47698: LD_INT 0
47700: ST_TO_ADDR
// sFlag := false ;
47701: LD_ADDR_EXP 44
47705: PUSH
47706: LD_INT 0
47708: ST_TO_ADDR
// sKamikadze := false ;
47709: LD_ADDR_EXP 52
47713: PUSH
47714: LD_INT 0
47716: ST_TO_ADDR
// sTroll := false ;
47717: LD_ADDR_EXP 53
47721: PUSH
47722: LD_INT 0
47724: ST_TO_ADDR
// sSlow := false ;
47725: LD_ADDR_EXP 54
47729: PUSH
47730: LD_INT 0
47732: ST_TO_ADDR
// sLack := false ;
47733: LD_ADDR_EXP 55
47737: PUSH
47738: LD_INT 0
47740: ST_TO_ADDR
// sTank := false ;
47741: LD_ADDR_EXP 57
47745: PUSH
47746: LD_INT 0
47748: ST_TO_ADDR
// sRemote := false ;
47749: LD_ADDR_EXP 58
47753: PUSH
47754: LD_INT 0
47756: ST_TO_ADDR
// sPowell := false ;
47757: LD_ADDR_EXP 59
47761: PUSH
47762: LD_INT 0
47764: ST_TO_ADDR
// sTeleport := false ;
47765: LD_ADDR_EXP 62
47769: PUSH
47770: LD_INT 0
47772: ST_TO_ADDR
// sOilTower := false ;
47773: LD_ADDR_EXP 64
47777: PUSH
47778: LD_INT 0
47780: ST_TO_ADDR
// sShovel := false ;
47781: LD_ADDR_EXP 65
47785: PUSH
47786: LD_INT 0
47788: ST_TO_ADDR
// sSheik := false ;
47789: LD_ADDR_EXP 66
47793: PUSH
47794: LD_INT 0
47796: ST_TO_ADDR
// sEarthquake := false ;
47797: LD_ADDR_EXP 68
47801: PUSH
47802: LD_INT 0
47804: ST_TO_ADDR
// sAI := false ;
47805: LD_ADDR_EXP 69
47809: PUSH
47810: LD_INT 0
47812: ST_TO_ADDR
// sCargo := false ;
47813: LD_ADDR_EXP 72
47817: PUSH
47818: LD_INT 0
47820: ST_TO_ADDR
// sDLaser := false ;
47821: LD_ADDR_EXP 73
47825: PUSH
47826: LD_INT 0
47828: ST_TO_ADDR
// sExchange := false ;
47829: LD_ADDR_EXP 74
47833: PUSH
47834: LD_INT 0
47836: ST_TO_ADDR
// sFac := false ;
47837: LD_ADDR_EXP 75
47841: PUSH
47842: LD_INT 0
47844: ST_TO_ADDR
// sPower := false ;
47845: LD_ADDR_EXP 76
47849: PUSH
47850: LD_INT 0
47852: ST_TO_ADDR
// sRandom := false ;
47853: LD_ADDR_EXP 77
47857: PUSH
47858: LD_INT 0
47860: ST_TO_ADDR
// sShield := false ;
47861: LD_ADDR_EXP 78
47865: PUSH
47866: LD_INT 0
47868: ST_TO_ADDR
// sTime := false ;
47869: LD_ADDR_EXP 79
47873: PUSH
47874: LD_INT 0
47876: ST_TO_ADDR
// sTools := false ;
47877: LD_ADDR_EXP 80
47881: PUSH
47882: LD_INT 0
47884: ST_TO_ADDR
// sSold := false ;
47885: LD_ADDR_EXP 45
47889: PUSH
47890: LD_INT 0
47892: ST_TO_ADDR
// sDiff := false ;
47893: LD_ADDR_EXP 46
47897: PUSH
47898: LD_INT 0
47900: ST_TO_ADDR
// sFog := false ;
47901: LD_ADDR_EXP 49
47905: PUSH
47906: LD_INT 0
47908: ST_TO_ADDR
// sReset := false ;
47909: LD_ADDR_EXP 50
47913: PUSH
47914: LD_INT 0
47916: ST_TO_ADDR
// sSun := false ;
47917: LD_ADDR_EXP 51
47921: PUSH
47922: LD_INT 0
47924: ST_TO_ADDR
// sTiger := false ;
47925: LD_ADDR_EXP 47
47929: PUSH
47930: LD_INT 0
47932: ST_TO_ADDR
// sBomb := false ;
47933: LD_ADDR_EXP 48
47937: PUSH
47938: LD_INT 0
47940: ST_TO_ADDR
// sWound := false ;
47941: LD_ADDR_EXP 56
47945: PUSH
47946: LD_INT 0
47948: ST_TO_ADDR
// sBetray := false ;
47949: LD_ADDR_EXP 60
47953: PUSH
47954: LD_INT 0
47956: ST_TO_ADDR
// sContamin := false ;
47957: LD_ADDR_EXP 61
47961: PUSH
47962: LD_INT 0
47964: ST_TO_ADDR
// sOil := false ;
47965: LD_ADDR_EXP 63
47969: PUSH
47970: LD_INT 0
47972: ST_TO_ADDR
// sStu := false ;
47973: LD_ADDR_EXP 67
47977: PUSH
47978: LD_INT 0
47980: ST_TO_ADDR
// sBazooka := false ;
47981: LD_ADDR_EXP 70
47985: PUSH
47986: LD_INT 0
47988: ST_TO_ADDR
// sMortar := false ;
47989: LD_ADDR_EXP 71
47993: PUSH
47994: LD_INT 0
47996: ST_TO_ADDR
// sRanger := false ;
47997: LD_ADDR_EXP 81
48001: PUSH
48002: LD_INT 0
48004: ST_TO_ADDR
// sComputer := false ;
48005: LD_ADDR_EXP 82
48009: PUSH
48010: LD_INT 0
48012: ST_TO_ADDR
// s30 := false ;
48013: LD_ADDR_EXP 83
48017: PUSH
48018: LD_INT 0
48020: ST_TO_ADDR
// s60 := false ;
48021: LD_ADDR_EXP 84
48025: PUSH
48026: LD_INT 0
48028: ST_TO_ADDR
// end ;
48029: LD_VAR 0 1
48033: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48034: LD_INT 0
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
48040: PPUSH
48041: PPUSH
48042: PPUSH
// result := [ ] ;
48043: LD_ADDR_VAR 0 2
48047: PUSH
48048: EMPTY
48049: ST_TO_ADDR
// if campaign_id = 1 then
48050: LD_OWVAR 69
48054: PUSH
48055: LD_INT 1
48057: EQUAL
48058: IFFALSE 51224
// begin case mission_number of 1 :
48060: LD_OWVAR 70
48064: PUSH
48065: LD_INT 1
48067: DOUBLE
48068: EQUAL
48069: IFTRUE 48073
48071: GO 48149
48073: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48074: LD_ADDR_VAR 0 2
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 4
48084: PUSH
48085: LD_INT 11
48087: PUSH
48088: LD_INT 12
48090: PUSH
48091: LD_INT 15
48093: PUSH
48094: LD_INT 16
48096: PUSH
48097: LD_INT 22
48099: PUSH
48100: LD_INT 23
48102: PUSH
48103: LD_INT 26
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 101
48119: PUSH
48120: LD_INT 102
48122: PUSH
48123: LD_INT 106
48125: PUSH
48126: LD_INT 116
48128: PUSH
48129: LD_INT 117
48131: PUSH
48132: LD_INT 118
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: ST_TO_ADDR
48147: GO 51222
48149: LD_INT 2
48151: DOUBLE
48152: EQUAL
48153: IFTRUE 48157
48155: GO 48241
48157: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48158: LD_ADDR_VAR 0 2
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 4
48168: PUSH
48169: LD_INT 11
48171: PUSH
48172: LD_INT 12
48174: PUSH
48175: LD_INT 15
48177: PUSH
48178: LD_INT 16
48180: PUSH
48181: LD_INT 22
48183: PUSH
48184: LD_INT 23
48186: PUSH
48187: LD_INT 26
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 101
48203: PUSH
48204: LD_INT 102
48206: PUSH
48207: LD_INT 105
48209: PUSH
48210: LD_INT 106
48212: PUSH
48213: LD_INT 108
48215: PUSH
48216: LD_INT 116
48218: PUSH
48219: LD_INT 117
48221: PUSH
48222: LD_INT 118
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: ST_TO_ADDR
48239: GO 51222
48241: LD_INT 3
48243: DOUBLE
48244: EQUAL
48245: IFTRUE 48249
48247: GO 48337
48249: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48250: LD_ADDR_VAR 0 2
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 4
48260: PUSH
48261: LD_INT 5
48263: PUSH
48264: LD_INT 11
48266: PUSH
48267: LD_INT 12
48269: PUSH
48270: LD_INT 15
48272: PUSH
48273: LD_INT 16
48275: PUSH
48276: LD_INT 22
48278: PUSH
48279: LD_INT 26
48281: PUSH
48282: LD_INT 36
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 101
48299: PUSH
48300: LD_INT 102
48302: PUSH
48303: LD_INT 105
48305: PUSH
48306: LD_INT 106
48308: PUSH
48309: LD_INT 108
48311: PUSH
48312: LD_INT 116
48314: PUSH
48315: LD_INT 117
48317: PUSH
48318: LD_INT 118
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: ST_TO_ADDR
48335: GO 51222
48337: LD_INT 4
48339: DOUBLE
48340: EQUAL
48341: IFTRUE 48345
48343: GO 48441
48345: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48346: LD_ADDR_VAR 0 2
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 4
48356: PUSH
48357: LD_INT 5
48359: PUSH
48360: LD_INT 8
48362: PUSH
48363: LD_INT 11
48365: PUSH
48366: LD_INT 12
48368: PUSH
48369: LD_INT 15
48371: PUSH
48372: LD_INT 16
48374: PUSH
48375: LD_INT 22
48377: PUSH
48378: LD_INT 23
48380: PUSH
48381: LD_INT 26
48383: PUSH
48384: LD_INT 36
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 101
48403: PUSH
48404: LD_INT 102
48406: PUSH
48407: LD_INT 105
48409: PUSH
48410: LD_INT 106
48412: PUSH
48413: LD_INT 108
48415: PUSH
48416: LD_INT 116
48418: PUSH
48419: LD_INT 117
48421: PUSH
48422: LD_INT 118
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: ST_TO_ADDR
48439: GO 51222
48441: LD_INT 5
48443: DOUBLE
48444: EQUAL
48445: IFTRUE 48449
48447: GO 48561
48449: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48450: LD_ADDR_VAR 0 2
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: LD_INT 5
48463: PUSH
48464: LD_INT 6
48466: PUSH
48467: LD_INT 8
48469: PUSH
48470: LD_INT 11
48472: PUSH
48473: LD_INT 12
48475: PUSH
48476: LD_INT 15
48478: PUSH
48479: LD_INT 16
48481: PUSH
48482: LD_INT 22
48484: PUSH
48485: LD_INT 23
48487: PUSH
48488: LD_INT 25
48490: PUSH
48491: LD_INT 26
48493: PUSH
48494: LD_INT 36
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 101
48515: PUSH
48516: LD_INT 102
48518: PUSH
48519: LD_INT 105
48521: PUSH
48522: LD_INT 106
48524: PUSH
48525: LD_INT 108
48527: PUSH
48528: LD_INT 109
48530: PUSH
48531: LD_INT 112
48533: PUSH
48534: LD_INT 116
48536: PUSH
48537: LD_INT 117
48539: PUSH
48540: LD_INT 118
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: ST_TO_ADDR
48559: GO 51222
48561: LD_INT 6
48563: DOUBLE
48564: EQUAL
48565: IFTRUE 48569
48567: GO 48701
48569: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48570: LD_ADDR_VAR 0 2
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 4
48580: PUSH
48581: LD_INT 5
48583: PUSH
48584: LD_INT 6
48586: PUSH
48587: LD_INT 8
48589: PUSH
48590: LD_INT 11
48592: PUSH
48593: LD_INT 12
48595: PUSH
48596: LD_INT 15
48598: PUSH
48599: LD_INT 16
48601: PUSH
48602: LD_INT 20
48604: PUSH
48605: LD_INT 21
48607: PUSH
48608: LD_INT 22
48610: PUSH
48611: LD_INT 23
48613: PUSH
48614: LD_INT 25
48616: PUSH
48617: LD_INT 26
48619: PUSH
48620: LD_INT 30
48622: PUSH
48623: LD_INT 31
48625: PUSH
48626: LD_INT 32
48628: PUSH
48629: LD_INT 36
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 101
48655: PUSH
48656: LD_INT 102
48658: PUSH
48659: LD_INT 105
48661: PUSH
48662: LD_INT 106
48664: PUSH
48665: LD_INT 108
48667: PUSH
48668: LD_INT 109
48670: PUSH
48671: LD_INT 112
48673: PUSH
48674: LD_INT 116
48676: PUSH
48677: LD_INT 117
48679: PUSH
48680: LD_INT 118
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: ST_TO_ADDR
48699: GO 51222
48701: LD_INT 7
48703: DOUBLE
48704: EQUAL
48705: IFTRUE 48709
48707: GO 48821
48709: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48710: LD_ADDR_VAR 0 2
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: LD_INT 4
48720: PUSH
48721: LD_INT 5
48723: PUSH
48724: LD_INT 7
48726: PUSH
48727: LD_INT 11
48729: PUSH
48730: LD_INT 12
48732: PUSH
48733: LD_INT 15
48735: PUSH
48736: LD_INT 16
48738: PUSH
48739: LD_INT 20
48741: PUSH
48742: LD_INT 21
48744: PUSH
48745: LD_INT 22
48747: PUSH
48748: LD_INT 23
48750: PUSH
48751: LD_INT 25
48753: PUSH
48754: LD_INT 26
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 101
48775: PUSH
48776: LD_INT 102
48778: PUSH
48779: LD_INT 103
48781: PUSH
48782: LD_INT 105
48784: PUSH
48785: LD_INT 106
48787: PUSH
48788: LD_INT 108
48790: PUSH
48791: LD_INT 112
48793: PUSH
48794: LD_INT 116
48796: PUSH
48797: LD_INT 117
48799: PUSH
48800: LD_INT 118
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: ST_TO_ADDR
48819: GO 51222
48821: LD_INT 8
48823: DOUBLE
48824: EQUAL
48825: IFTRUE 48829
48827: GO 48969
48829: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48830: LD_ADDR_VAR 0 2
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 4
48840: PUSH
48841: LD_INT 5
48843: PUSH
48844: LD_INT 6
48846: PUSH
48847: LD_INT 7
48849: PUSH
48850: LD_INT 8
48852: PUSH
48853: LD_INT 11
48855: PUSH
48856: LD_INT 12
48858: PUSH
48859: LD_INT 15
48861: PUSH
48862: LD_INT 16
48864: PUSH
48865: LD_INT 20
48867: PUSH
48868: LD_INT 21
48870: PUSH
48871: LD_INT 22
48873: PUSH
48874: LD_INT 23
48876: PUSH
48877: LD_INT 25
48879: PUSH
48880: LD_INT 26
48882: PUSH
48883: LD_INT 30
48885: PUSH
48886: LD_INT 31
48888: PUSH
48889: LD_INT 32
48891: PUSH
48892: LD_INT 36
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 101
48919: PUSH
48920: LD_INT 102
48922: PUSH
48923: LD_INT 103
48925: PUSH
48926: LD_INT 105
48928: PUSH
48929: LD_INT 106
48931: PUSH
48932: LD_INT 108
48934: PUSH
48935: LD_INT 109
48937: PUSH
48938: LD_INT 112
48940: PUSH
48941: LD_INT 116
48943: PUSH
48944: LD_INT 117
48946: PUSH
48947: LD_INT 118
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: ST_TO_ADDR
48967: GO 51222
48969: LD_INT 9
48971: DOUBLE
48972: EQUAL
48973: IFTRUE 48977
48975: GO 49125
48977: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48978: LD_ADDR_VAR 0 2
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 4
48988: PUSH
48989: LD_INT 5
48991: PUSH
48992: LD_INT 6
48994: PUSH
48995: LD_INT 7
48997: PUSH
48998: LD_INT 8
49000: PUSH
49001: LD_INT 11
49003: PUSH
49004: LD_INT 12
49006: PUSH
49007: LD_INT 15
49009: PUSH
49010: LD_INT 16
49012: PUSH
49013: LD_INT 20
49015: PUSH
49016: LD_INT 21
49018: PUSH
49019: LD_INT 22
49021: PUSH
49022: LD_INT 23
49024: PUSH
49025: LD_INT 25
49027: PUSH
49028: LD_INT 26
49030: PUSH
49031: LD_INT 28
49033: PUSH
49034: LD_INT 30
49036: PUSH
49037: LD_INT 31
49039: PUSH
49040: LD_INT 32
49042: PUSH
49043: LD_INT 36
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 101
49071: PUSH
49072: LD_INT 102
49074: PUSH
49075: LD_INT 103
49077: PUSH
49078: LD_INT 105
49080: PUSH
49081: LD_INT 106
49083: PUSH
49084: LD_INT 108
49086: PUSH
49087: LD_INT 109
49089: PUSH
49090: LD_INT 112
49092: PUSH
49093: LD_INT 114
49095: PUSH
49096: LD_INT 116
49098: PUSH
49099: LD_INT 117
49101: PUSH
49102: LD_INT 118
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: ST_TO_ADDR
49123: GO 51222
49125: LD_INT 10
49127: DOUBLE
49128: EQUAL
49129: IFTRUE 49133
49131: GO 49329
49133: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49134: LD_ADDR_VAR 0 2
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 4
49144: PUSH
49145: LD_INT 5
49147: PUSH
49148: LD_INT 6
49150: PUSH
49151: LD_INT 7
49153: PUSH
49154: LD_INT 8
49156: PUSH
49157: LD_INT 9
49159: PUSH
49160: LD_INT 10
49162: PUSH
49163: LD_INT 11
49165: PUSH
49166: LD_INT 12
49168: PUSH
49169: LD_INT 13
49171: PUSH
49172: LD_INT 14
49174: PUSH
49175: LD_INT 15
49177: PUSH
49178: LD_INT 16
49180: PUSH
49181: LD_INT 17
49183: PUSH
49184: LD_INT 18
49186: PUSH
49187: LD_INT 19
49189: PUSH
49190: LD_INT 20
49192: PUSH
49193: LD_INT 21
49195: PUSH
49196: LD_INT 22
49198: PUSH
49199: LD_INT 23
49201: PUSH
49202: LD_INT 24
49204: PUSH
49205: LD_INT 25
49207: PUSH
49208: LD_INT 26
49210: PUSH
49211: LD_INT 28
49213: PUSH
49214: LD_INT 30
49216: PUSH
49217: LD_INT 31
49219: PUSH
49220: LD_INT 32
49222: PUSH
49223: LD_INT 36
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 101
49259: PUSH
49260: LD_INT 102
49262: PUSH
49263: LD_INT 103
49265: PUSH
49266: LD_INT 104
49268: PUSH
49269: LD_INT 105
49271: PUSH
49272: LD_INT 106
49274: PUSH
49275: LD_INT 107
49277: PUSH
49278: LD_INT 108
49280: PUSH
49281: LD_INT 109
49283: PUSH
49284: LD_INT 110
49286: PUSH
49287: LD_INT 111
49289: PUSH
49290: LD_INT 112
49292: PUSH
49293: LD_INT 114
49295: PUSH
49296: LD_INT 116
49298: PUSH
49299: LD_INT 117
49301: PUSH
49302: LD_INT 118
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: ST_TO_ADDR
49327: GO 51222
49329: LD_INT 11
49331: DOUBLE
49332: EQUAL
49333: IFTRUE 49337
49335: GO 49541
49337: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49338: LD_ADDR_VAR 0 2
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: LD_INT 4
49351: PUSH
49352: LD_INT 5
49354: PUSH
49355: LD_INT 6
49357: PUSH
49358: LD_INT 7
49360: PUSH
49361: LD_INT 8
49363: PUSH
49364: LD_INT 9
49366: PUSH
49367: LD_INT 10
49369: PUSH
49370: LD_INT 11
49372: PUSH
49373: LD_INT 12
49375: PUSH
49376: LD_INT 13
49378: PUSH
49379: LD_INT 14
49381: PUSH
49382: LD_INT 15
49384: PUSH
49385: LD_INT 16
49387: PUSH
49388: LD_INT 17
49390: PUSH
49391: LD_INT 18
49393: PUSH
49394: LD_INT 19
49396: PUSH
49397: LD_INT 20
49399: PUSH
49400: LD_INT 21
49402: PUSH
49403: LD_INT 22
49405: PUSH
49406: LD_INT 23
49408: PUSH
49409: LD_INT 24
49411: PUSH
49412: LD_INT 25
49414: PUSH
49415: LD_INT 26
49417: PUSH
49418: LD_INT 28
49420: PUSH
49421: LD_INT 30
49423: PUSH
49424: LD_INT 31
49426: PUSH
49427: LD_INT 32
49429: PUSH
49430: LD_INT 34
49432: PUSH
49433: LD_INT 36
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 101
49471: PUSH
49472: LD_INT 102
49474: PUSH
49475: LD_INT 103
49477: PUSH
49478: LD_INT 104
49480: PUSH
49481: LD_INT 105
49483: PUSH
49484: LD_INT 106
49486: PUSH
49487: LD_INT 107
49489: PUSH
49490: LD_INT 108
49492: PUSH
49493: LD_INT 109
49495: PUSH
49496: LD_INT 110
49498: PUSH
49499: LD_INT 111
49501: PUSH
49502: LD_INT 112
49504: PUSH
49505: LD_INT 114
49507: PUSH
49508: LD_INT 116
49510: PUSH
49511: LD_INT 117
49513: PUSH
49514: LD_INT 118
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: ST_TO_ADDR
49539: GO 51222
49541: LD_INT 12
49543: DOUBLE
49544: EQUAL
49545: IFTRUE 49549
49547: GO 49769
49549: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49550: LD_ADDR_VAR 0 2
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 3
49563: PUSH
49564: LD_INT 4
49566: PUSH
49567: LD_INT 5
49569: PUSH
49570: LD_INT 6
49572: PUSH
49573: LD_INT 7
49575: PUSH
49576: LD_INT 8
49578: PUSH
49579: LD_INT 9
49581: PUSH
49582: LD_INT 10
49584: PUSH
49585: LD_INT 11
49587: PUSH
49588: LD_INT 12
49590: PUSH
49591: LD_INT 13
49593: PUSH
49594: LD_INT 14
49596: PUSH
49597: LD_INT 15
49599: PUSH
49600: LD_INT 16
49602: PUSH
49603: LD_INT 17
49605: PUSH
49606: LD_INT 18
49608: PUSH
49609: LD_INT 19
49611: PUSH
49612: LD_INT 20
49614: PUSH
49615: LD_INT 21
49617: PUSH
49618: LD_INT 22
49620: PUSH
49621: LD_INT 23
49623: PUSH
49624: LD_INT 24
49626: PUSH
49627: LD_INT 25
49629: PUSH
49630: LD_INT 26
49632: PUSH
49633: LD_INT 27
49635: PUSH
49636: LD_INT 28
49638: PUSH
49639: LD_INT 30
49641: PUSH
49642: LD_INT 31
49644: PUSH
49645: LD_INT 32
49647: PUSH
49648: LD_INT 33
49650: PUSH
49651: LD_INT 34
49653: PUSH
49654: LD_INT 36
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 101
49695: PUSH
49696: LD_INT 102
49698: PUSH
49699: LD_INT 103
49701: PUSH
49702: LD_INT 104
49704: PUSH
49705: LD_INT 105
49707: PUSH
49708: LD_INT 106
49710: PUSH
49711: LD_INT 107
49713: PUSH
49714: LD_INT 108
49716: PUSH
49717: LD_INT 109
49719: PUSH
49720: LD_INT 110
49722: PUSH
49723: LD_INT 111
49725: PUSH
49726: LD_INT 112
49728: PUSH
49729: LD_INT 113
49731: PUSH
49732: LD_INT 114
49734: PUSH
49735: LD_INT 116
49737: PUSH
49738: LD_INT 117
49740: PUSH
49741: LD_INT 118
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: ST_TO_ADDR
49767: GO 51222
49769: LD_INT 13
49771: DOUBLE
49772: EQUAL
49773: IFTRUE 49777
49775: GO 49985
49777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49778: LD_ADDR_VAR 0 2
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: LD_INT 5
49797: PUSH
49798: LD_INT 8
49800: PUSH
49801: LD_INT 9
49803: PUSH
49804: LD_INT 10
49806: PUSH
49807: LD_INT 11
49809: PUSH
49810: LD_INT 12
49812: PUSH
49813: LD_INT 14
49815: PUSH
49816: LD_INT 15
49818: PUSH
49819: LD_INT 16
49821: PUSH
49822: LD_INT 17
49824: PUSH
49825: LD_INT 18
49827: PUSH
49828: LD_INT 19
49830: PUSH
49831: LD_INT 20
49833: PUSH
49834: LD_INT 21
49836: PUSH
49837: LD_INT 22
49839: PUSH
49840: LD_INT 23
49842: PUSH
49843: LD_INT 24
49845: PUSH
49846: LD_INT 25
49848: PUSH
49849: LD_INT 26
49851: PUSH
49852: LD_INT 27
49854: PUSH
49855: LD_INT 28
49857: PUSH
49858: LD_INT 30
49860: PUSH
49861: LD_INT 31
49863: PUSH
49864: LD_INT 32
49866: PUSH
49867: LD_INT 33
49869: PUSH
49870: LD_INT 34
49872: PUSH
49873: LD_INT 36
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 101
49911: PUSH
49912: LD_INT 102
49914: PUSH
49915: LD_INT 103
49917: PUSH
49918: LD_INT 104
49920: PUSH
49921: LD_INT 105
49923: PUSH
49924: LD_INT 106
49926: PUSH
49927: LD_INT 107
49929: PUSH
49930: LD_INT 108
49932: PUSH
49933: LD_INT 109
49935: PUSH
49936: LD_INT 110
49938: PUSH
49939: LD_INT 111
49941: PUSH
49942: LD_INT 112
49944: PUSH
49945: LD_INT 113
49947: PUSH
49948: LD_INT 114
49950: PUSH
49951: LD_INT 116
49953: PUSH
49954: LD_INT 117
49956: PUSH
49957: LD_INT 118
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: ST_TO_ADDR
49983: GO 51222
49985: LD_INT 14
49987: DOUBLE
49988: EQUAL
49989: IFTRUE 49993
49991: GO 50217
49993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49994: LD_ADDR_VAR 0 2
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: LD_INT 4
50010: PUSH
50011: LD_INT 5
50013: PUSH
50014: LD_INT 6
50016: PUSH
50017: LD_INT 7
50019: PUSH
50020: LD_INT 8
50022: PUSH
50023: LD_INT 9
50025: PUSH
50026: LD_INT 10
50028: PUSH
50029: LD_INT 11
50031: PUSH
50032: LD_INT 12
50034: PUSH
50035: LD_INT 13
50037: PUSH
50038: LD_INT 14
50040: PUSH
50041: LD_INT 15
50043: PUSH
50044: LD_INT 16
50046: PUSH
50047: LD_INT 17
50049: PUSH
50050: LD_INT 18
50052: PUSH
50053: LD_INT 19
50055: PUSH
50056: LD_INT 20
50058: PUSH
50059: LD_INT 21
50061: PUSH
50062: LD_INT 22
50064: PUSH
50065: LD_INT 23
50067: PUSH
50068: LD_INT 24
50070: PUSH
50071: LD_INT 25
50073: PUSH
50074: LD_INT 26
50076: PUSH
50077: LD_INT 27
50079: PUSH
50080: LD_INT 28
50082: PUSH
50083: LD_INT 29
50085: PUSH
50086: LD_INT 30
50088: PUSH
50089: LD_INT 31
50091: PUSH
50092: LD_INT 32
50094: PUSH
50095: LD_INT 33
50097: PUSH
50098: LD_INT 34
50100: PUSH
50101: LD_INT 36
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 101
50143: PUSH
50144: LD_INT 102
50146: PUSH
50147: LD_INT 103
50149: PUSH
50150: LD_INT 104
50152: PUSH
50153: LD_INT 105
50155: PUSH
50156: LD_INT 106
50158: PUSH
50159: LD_INT 107
50161: PUSH
50162: LD_INT 108
50164: PUSH
50165: LD_INT 109
50167: PUSH
50168: LD_INT 110
50170: PUSH
50171: LD_INT 111
50173: PUSH
50174: LD_INT 112
50176: PUSH
50177: LD_INT 113
50179: PUSH
50180: LD_INT 114
50182: PUSH
50183: LD_INT 116
50185: PUSH
50186: LD_INT 117
50188: PUSH
50189: LD_INT 118
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: ST_TO_ADDR
50215: GO 51222
50217: LD_INT 15
50219: DOUBLE
50220: EQUAL
50221: IFTRUE 50225
50223: GO 50449
50225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50226: LD_ADDR_VAR 0 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 5
50245: PUSH
50246: LD_INT 6
50248: PUSH
50249: LD_INT 7
50251: PUSH
50252: LD_INT 8
50254: PUSH
50255: LD_INT 9
50257: PUSH
50258: LD_INT 10
50260: PUSH
50261: LD_INT 11
50263: PUSH
50264: LD_INT 12
50266: PUSH
50267: LD_INT 13
50269: PUSH
50270: LD_INT 14
50272: PUSH
50273: LD_INT 15
50275: PUSH
50276: LD_INT 16
50278: PUSH
50279: LD_INT 17
50281: PUSH
50282: LD_INT 18
50284: PUSH
50285: LD_INT 19
50287: PUSH
50288: LD_INT 20
50290: PUSH
50291: LD_INT 21
50293: PUSH
50294: LD_INT 22
50296: PUSH
50297: LD_INT 23
50299: PUSH
50300: LD_INT 24
50302: PUSH
50303: LD_INT 25
50305: PUSH
50306: LD_INT 26
50308: PUSH
50309: LD_INT 27
50311: PUSH
50312: LD_INT 28
50314: PUSH
50315: LD_INT 29
50317: PUSH
50318: LD_INT 30
50320: PUSH
50321: LD_INT 31
50323: PUSH
50324: LD_INT 32
50326: PUSH
50327: LD_INT 33
50329: PUSH
50330: LD_INT 34
50332: PUSH
50333: LD_INT 36
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 101
50375: PUSH
50376: LD_INT 102
50378: PUSH
50379: LD_INT 103
50381: PUSH
50382: LD_INT 104
50384: PUSH
50385: LD_INT 105
50387: PUSH
50388: LD_INT 106
50390: PUSH
50391: LD_INT 107
50393: PUSH
50394: LD_INT 108
50396: PUSH
50397: LD_INT 109
50399: PUSH
50400: LD_INT 110
50402: PUSH
50403: LD_INT 111
50405: PUSH
50406: LD_INT 112
50408: PUSH
50409: LD_INT 113
50411: PUSH
50412: LD_INT 114
50414: PUSH
50415: LD_INT 116
50417: PUSH
50418: LD_INT 117
50420: PUSH
50421: LD_INT 118
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: ST_TO_ADDR
50447: GO 51222
50449: LD_INT 16
50451: DOUBLE
50452: EQUAL
50453: IFTRUE 50457
50455: GO 50593
50457: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50458: LD_ADDR_VAR 0 2
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 4
50468: PUSH
50469: LD_INT 5
50471: PUSH
50472: LD_INT 7
50474: PUSH
50475: LD_INT 11
50477: PUSH
50478: LD_INT 12
50480: PUSH
50481: LD_INT 15
50483: PUSH
50484: LD_INT 16
50486: PUSH
50487: LD_INT 20
50489: PUSH
50490: LD_INT 21
50492: PUSH
50493: LD_INT 22
50495: PUSH
50496: LD_INT 23
50498: PUSH
50499: LD_INT 25
50501: PUSH
50502: LD_INT 26
50504: PUSH
50505: LD_INT 30
50507: PUSH
50508: LD_INT 31
50510: PUSH
50511: LD_INT 32
50513: PUSH
50514: LD_INT 33
50516: PUSH
50517: LD_INT 34
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 101
50543: PUSH
50544: LD_INT 102
50546: PUSH
50547: LD_INT 103
50549: PUSH
50550: LD_INT 106
50552: PUSH
50553: LD_INT 108
50555: PUSH
50556: LD_INT 112
50558: PUSH
50559: LD_INT 113
50561: PUSH
50562: LD_INT 114
50564: PUSH
50565: LD_INT 116
50567: PUSH
50568: LD_INT 117
50570: PUSH
50571: LD_INT 118
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: ST_TO_ADDR
50591: GO 51222
50593: LD_INT 17
50595: DOUBLE
50596: EQUAL
50597: IFTRUE 50601
50599: GO 50825
50601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50602: LD_ADDR_VAR 0 2
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 4
50618: PUSH
50619: LD_INT 5
50621: PUSH
50622: LD_INT 6
50624: PUSH
50625: LD_INT 7
50627: PUSH
50628: LD_INT 8
50630: PUSH
50631: LD_INT 9
50633: PUSH
50634: LD_INT 10
50636: PUSH
50637: LD_INT 11
50639: PUSH
50640: LD_INT 12
50642: PUSH
50643: LD_INT 13
50645: PUSH
50646: LD_INT 14
50648: PUSH
50649: LD_INT 15
50651: PUSH
50652: LD_INT 16
50654: PUSH
50655: LD_INT 17
50657: PUSH
50658: LD_INT 18
50660: PUSH
50661: LD_INT 19
50663: PUSH
50664: LD_INT 20
50666: PUSH
50667: LD_INT 21
50669: PUSH
50670: LD_INT 22
50672: PUSH
50673: LD_INT 23
50675: PUSH
50676: LD_INT 24
50678: PUSH
50679: LD_INT 25
50681: PUSH
50682: LD_INT 26
50684: PUSH
50685: LD_INT 27
50687: PUSH
50688: LD_INT 28
50690: PUSH
50691: LD_INT 29
50693: PUSH
50694: LD_INT 30
50696: PUSH
50697: LD_INT 31
50699: PUSH
50700: LD_INT 32
50702: PUSH
50703: LD_INT 33
50705: PUSH
50706: LD_INT 34
50708: PUSH
50709: LD_INT 36
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 101
50751: PUSH
50752: LD_INT 102
50754: PUSH
50755: LD_INT 103
50757: PUSH
50758: LD_INT 104
50760: PUSH
50761: LD_INT 105
50763: PUSH
50764: LD_INT 106
50766: PUSH
50767: LD_INT 107
50769: PUSH
50770: LD_INT 108
50772: PUSH
50773: LD_INT 109
50775: PUSH
50776: LD_INT 110
50778: PUSH
50779: LD_INT 111
50781: PUSH
50782: LD_INT 112
50784: PUSH
50785: LD_INT 113
50787: PUSH
50788: LD_INT 114
50790: PUSH
50791: LD_INT 116
50793: PUSH
50794: LD_INT 117
50796: PUSH
50797: LD_INT 118
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: ST_TO_ADDR
50823: GO 51222
50825: LD_INT 18
50827: DOUBLE
50828: EQUAL
50829: IFTRUE 50833
50831: GO 50981
50833: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50834: LD_ADDR_VAR 0 2
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 4
50844: PUSH
50845: LD_INT 5
50847: PUSH
50848: LD_INT 7
50850: PUSH
50851: LD_INT 11
50853: PUSH
50854: LD_INT 12
50856: PUSH
50857: LD_INT 15
50859: PUSH
50860: LD_INT 16
50862: PUSH
50863: LD_INT 20
50865: PUSH
50866: LD_INT 21
50868: PUSH
50869: LD_INT 22
50871: PUSH
50872: LD_INT 23
50874: PUSH
50875: LD_INT 25
50877: PUSH
50878: LD_INT 26
50880: PUSH
50881: LD_INT 30
50883: PUSH
50884: LD_INT 31
50886: PUSH
50887: LD_INT 32
50889: PUSH
50890: LD_INT 33
50892: PUSH
50893: LD_INT 34
50895: PUSH
50896: LD_INT 35
50898: PUSH
50899: LD_INT 36
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 101
50927: PUSH
50928: LD_INT 102
50930: PUSH
50931: LD_INT 103
50933: PUSH
50934: LD_INT 106
50936: PUSH
50937: LD_INT 108
50939: PUSH
50940: LD_INT 112
50942: PUSH
50943: LD_INT 113
50945: PUSH
50946: LD_INT 114
50948: PUSH
50949: LD_INT 115
50951: PUSH
50952: LD_INT 116
50954: PUSH
50955: LD_INT 117
50957: PUSH
50958: LD_INT 118
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: ST_TO_ADDR
50979: GO 51222
50981: LD_INT 19
50983: DOUBLE
50984: EQUAL
50985: IFTRUE 50989
50987: GO 51221
50989: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50990: LD_ADDR_VAR 0 2
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: LD_INT 4
51006: PUSH
51007: LD_INT 5
51009: PUSH
51010: LD_INT 6
51012: PUSH
51013: LD_INT 7
51015: PUSH
51016: LD_INT 8
51018: PUSH
51019: LD_INT 9
51021: PUSH
51022: LD_INT 10
51024: PUSH
51025: LD_INT 11
51027: PUSH
51028: LD_INT 12
51030: PUSH
51031: LD_INT 13
51033: PUSH
51034: LD_INT 14
51036: PUSH
51037: LD_INT 15
51039: PUSH
51040: LD_INT 16
51042: PUSH
51043: LD_INT 17
51045: PUSH
51046: LD_INT 18
51048: PUSH
51049: LD_INT 19
51051: PUSH
51052: LD_INT 20
51054: PUSH
51055: LD_INT 21
51057: PUSH
51058: LD_INT 22
51060: PUSH
51061: LD_INT 23
51063: PUSH
51064: LD_INT 24
51066: PUSH
51067: LD_INT 25
51069: PUSH
51070: LD_INT 26
51072: PUSH
51073: LD_INT 27
51075: PUSH
51076: LD_INT 28
51078: PUSH
51079: LD_INT 29
51081: PUSH
51082: LD_INT 30
51084: PUSH
51085: LD_INT 31
51087: PUSH
51088: LD_INT 32
51090: PUSH
51091: LD_INT 33
51093: PUSH
51094: LD_INT 34
51096: PUSH
51097: LD_INT 35
51099: PUSH
51100: LD_INT 36
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 101
51143: PUSH
51144: LD_INT 102
51146: PUSH
51147: LD_INT 103
51149: PUSH
51150: LD_INT 104
51152: PUSH
51153: LD_INT 105
51155: PUSH
51156: LD_INT 106
51158: PUSH
51159: LD_INT 107
51161: PUSH
51162: LD_INT 108
51164: PUSH
51165: LD_INT 109
51167: PUSH
51168: LD_INT 110
51170: PUSH
51171: LD_INT 111
51173: PUSH
51174: LD_INT 112
51176: PUSH
51177: LD_INT 113
51179: PUSH
51180: LD_INT 114
51182: PUSH
51183: LD_INT 115
51185: PUSH
51186: LD_INT 116
51188: PUSH
51189: LD_INT 117
51191: PUSH
51192: LD_INT 118
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: ST_TO_ADDR
51219: GO 51222
51221: POP
// end else
51222: GO 51453
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51224: LD_ADDR_VAR 0 2
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: LD_INT 4
51240: PUSH
51241: LD_INT 5
51243: PUSH
51244: LD_INT 6
51246: PUSH
51247: LD_INT 7
51249: PUSH
51250: LD_INT 8
51252: PUSH
51253: LD_INT 9
51255: PUSH
51256: LD_INT 10
51258: PUSH
51259: LD_INT 11
51261: PUSH
51262: LD_INT 12
51264: PUSH
51265: LD_INT 13
51267: PUSH
51268: LD_INT 14
51270: PUSH
51271: LD_INT 15
51273: PUSH
51274: LD_INT 16
51276: PUSH
51277: LD_INT 17
51279: PUSH
51280: LD_INT 18
51282: PUSH
51283: LD_INT 19
51285: PUSH
51286: LD_INT 20
51288: PUSH
51289: LD_INT 21
51291: PUSH
51292: LD_INT 22
51294: PUSH
51295: LD_INT 23
51297: PUSH
51298: LD_INT 24
51300: PUSH
51301: LD_INT 25
51303: PUSH
51304: LD_INT 26
51306: PUSH
51307: LD_INT 27
51309: PUSH
51310: LD_INT 28
51312: PUSH
51313: LD_INT 29
51315: PUSH
51316: LD_INT 30
51318: PUSH
51319: LD_INT 31
51321: PUSH
51322: LD_INT 32
51324: PUSH
51325: LD_INT 33
51327: PUSH
51328: LD_INT 34
51330: PUSH
51331: LD_INT 35
51333: PUSH
51334: LD_INT 36
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 101
51377: PUSH
51378: LD_INT 102
51380: PUSH
51381: LD_INT 103
51383: PUSH
51384: LD_INT 104
51386: PUSH
51387: LD_INT 105
51389: PUSH
51390: LD_INT 106
51392: PUSH
51393: LD_INT 107
51395: PUSH
51396: LD_INT 108
51398: PUSH
51399: LD_INT 109
51401: PUSH
51402: LD_INT 110
51404: PUSH
51405: LD_INT 111
51407: PUSH
51408: LD_INT 112
51410: PUSH
51411: LD_INT 113
51413: PUSH
51414: LD_INT 114
51416: PUSH
51417: LD_INT 115
51419: PUSH
51420: LD_INT 116
51422: PUSH
51423: LD_INT 117
51425: PUSH
51426: LD_INT 118
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: ST_TO_ADDR
// if result then
51453: LD_VAR 0 2
51457: IFFALSE 52243
// begin normal :=  ;
51459: LD_ADDR_VAR 0 5
51463: PUSH
51464: LD_STRING 
51466: ST_TO_ADDR
// hardcore :=  ;
51467: LD_ADDR_VAR 0 6
51471: PUSH
51472: LD_STRING 
51474: ST_TO_ADDR
// active :=  ;
51475: LD_ADDR_VAR 0 7
51479: PUSH
51480: LD_STRING 
51482: ST_TO_ADDR
// for i = 1 to normalCounter do
51483: LD_ADDR_VAR 0 8
51487: PUSH
51488: DOUBLE
51489: LD_INT 1
51491: DEC
51492: ST_TO_ADDR
51493: LD_EXP 29
51497: PUSH
51498: FOR_TO
51499: IFFALSE 51600
// begin tmp := 0 ;
51501: LD_ADDR_VAR 0 3
51505: PUSH
51506: LD_STRING 0
51508: ST_TO_ADDR
// if result [ 1 ] then
51509: LD_VAR 0 2
51513: PUSH
51514: LD_INT 1
51516: ARRAY
51517: IFFALSE 51582
// if result [ 1 ] [ 1 ] = i then
51519: LD_VAR 0 2
51523: PUSH
51524: LD_INT 1
51526: ARRAY
51527: PUSH
51528: LD_INT 1
51530: ARRAY
51531: PUSH
51532: LD_VAR 0 8
51536: EQUAL
51537: IFFALSE 51582
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51539: LD_ADDR_VAR 0 2
51543: PUSH
51544: LD_VAR 0 2
51548: PPUSH
51549: LD_INT 1
51551: PPUSH
51552: LD_VAR 0 2
51556: PUSH
51557: LD_INT 1
51559: ARRAY
51560: PPUSH
51561: LD_INT 1
51563: PPUSH
51564: CALL_OW 3
51568: PPUSH
51569: CALL_OW 1
51573: ST_TO_ADDR
// tmp := 1 ;
51574: LD_ADDR_VAR 0 3
51578: PUSH
51579: LD_STRING 1
51581: ST_TO_ADDR
// end ; normal := normal & tmp ;
51582: LD_ADDR_VAR 0 5
51586: PUSH
51587: LD_VAR 0 5
51591: PUSH
51592: LD_VAR 0 3
51596: STR
51597: ST_TO_ADDR
// end ;
51598: GO 51498
51600: POP
51601: POP
// for i = 1 to hardcoreCounter do
51602: LD_ADDR_VAR 0 8
51606: PUSH
51607: DOUBLE
51608: LD_INT 1
51610: DEC
51611: ST_TO_ADDR
51612: LD_EXP 30
51616: PUSH
51617: FOR_TO
51618: IFFALSE 51723
// begin tmp := 0 ;
51620: LD_ADDR_VAR 0 3
51624: PUSH
51625: LD_STRING 0
51627: ST_TO_ADDR
// if result [ 2 ] then
51628: LD_VAR 0 2
51632: PUSH
51633: LD_INT 2
51635: ARRAY
51636: IFFALSE 51705
// if result [ 2 ] [ 1 ] = 100 + i then
51638: LD_VAR 0 2
51642: PUSH
51643: LD_INT 2
51645: ARRAY
51646: PUSH
51647: LD_INT 1
51649: ARRAY
51650: PUSH
51651: LD_INT 100
51653: PUSH
51654: LD_VAR 0 8
51658: PLUS
51659: EQUAL
51660: IFFALSE 51705
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51662: LD_ADDR_VAR 0 2
51666: PUSH
51667: LD_VAR 0 2
51671: PPUSH
51672: LD_INT 2
51674: PPUSH
51675: LD_VAR 0 2
51679: PUSH
51680: LD_INT 2
51682: ARRAY
51683: PPUSH
51684: LD_INT 1
51686: PPUSH
51687: CALL_OW 3
51691: PPUSH
51692: CALL_OW 1
51696: ST_TO_ADDR
// tmp := 1 ;
51697: LD_ADDR_VAR 0 3
51701: PUSH
51702: LD_STRING 1
51704: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51705: LD_ADDR_VAR 0 6
51709: PUSH
51710: LD_VAR 0 6
51714: PUSH
51715: LD_VAR 0 3
51719: STR
51720: ST_TO_ADDR
// end ;
51721: GO 51617
51723: POP
51724: POP
// if isGameLoad then
51725: LD_VAR 0 1
51729: IFFALSE 52204
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51731: LD_ADDR_VAR 0 4
51735: PUSH
51736: LD_EXP 33
51740: PUSH
51741: LD_EXP 32
51745: PUSH
51746: LD_EXP 34
51750: PUSH
51751: LD_EXP 31
51755: PUSH
51756: LD_EXP 35
51760: PUSH
51761: LD_EXP 36
51765: PUSH
51766: LD_EXP 37
51770: PUSH
51771: LD_EXP 38
51775: PUSH
51776: LD_EXP 39
51780: PUSH
51781: LD_EXP 40
51785: PUSH
51786: LD_EXP 41
51790: PUSH
51791: LD_EXP 42
51795: PUSH
51796: LD_EXP 43
51800: PUSH
51801: LD_EXP 44
51805: PUSH
51806: LD_EXP 52
51810: PUSH
51811: LD_EXP 53
51815: PUSH
51816: LD_EXP 54
51820: PUSH
51821: LD_EXP 55
51825: PUSH
51826: LD_EXP 57
51830: PUSH
51831: LD_EXP 58
51835: PUSH
51836: LD_EXP 59
51840: PUSH
51841: LD_EXP 62
51845: PUSH
51846: LD_EXP 64
51850: PUSH
51851: LD_EXP 65
51855: PUSH
51856: LD_EXP 66
51860: PUSH
51861: LD_EXP 68
51865: PUSH
51866: LD_EXP 69
51870: PUSH
51871: LD_EXP 72
51875: PUSH
51876: LD_EXP 73
51880: PUSH
51881: LD_EXP 74
51885: PUSH
51886: LD_EXP 75
51890: PUSH
51891: LD_EXP 76
51895: PUSH
51896: LD_EXP 77
51900: PUSH
51901: LD_EXP 78
51905: PUSH
51906: LD_EXP 79
51910: PUSH
51911: LD_EXP 80
51915: PUSH
51916: LD_EXP 45
51920: PUSH
51921: LD_EXP 46
51925: PUSH
51926: LD_EXP 49
51930: PUSH
51931: LD_EXP 50
51935: PUSH
51936: LD_EXP 51
51940: PUSH
51941: LD_EXP 47
51945: PUSH
51946: LD_EXP 48
51950: PUSH
51951: LD_EXP 56
51955: PUSH
51956: LD_EXP 60
51960: PUSH
51961: LD_EXP 61
51965: PUSH
51966: LD_EXP 63
51970: PUSH
51971: LD_EXP 67
51975: PUSH
51976: LD_EXP 70
51980: PUSH
51981: LD_EXP 71
51985: PUSH
51986: LD_EXP 81
51990: PUSH
51991: LD_EXP 82
51995: PUSH
51996: LD_EXP 83
52000: PUSH
52001: LD_EXP 84
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// tmp :=  ;
52062: LD_ADDR_VAR 0 3
52066: PUSH
52067: LD_STRING 
52069: ST_TO_ADDR
// for i = 1 to normalCounter do
52070: LD_ADDR_VAR 0 8
52074: PUSH
52075: DOUBLE
52076: LD_INT 1
52078: DEC
52079: ST_TO_ADDR
52080: LD_EXP 29
52084: PUSH
52085: FOR_TO
52086: IFFALSE 52122
// begin if flags [ i ] then
52088: LD_VAR 0 4
52092: PUSH
52093: LD_VAR 0 8
52097: ARRAY
52098: IFFALSE 52120
// tmp := tmp & i & ; ;
52100: LD_ADDR_VAR 0 3
52104: PUSH
52105: LD_VAR 0 3
52109: PUSH
52110: LD_VAR 0 8
52114: STR
52115: PUSH
52116: LD_STRING ;
52118: STR
52119: ST_TO_ADDR
// end ;
52120: GO 52085
52122: POP
52123: POP
// for i = 1 to hardcoreCounter do
52124: LD_ADDR_VAR 0 8
52128: PUSH
52129: DOUBLE
52130: LD_INT 1
52132: DEC
52133: ST_TO_ADDR
52134: LD_EXP 30
52138: PUSH
52139: FOR_TO
52140: IFFALSE 52186
// begin if flags [ normalCounter + i ] then
52142: LD_VAR 0 4
52146: PUSH
52147: LD_EXP 29
52151: PUSH
52152: LD_VAR 0 8
52156: PLUS
52157: ARRAY
52158: IFFALSE 52184
// tmp := tmp & ( 100 + i ) & ; ;
52160: LD_ADDR_VAR 0 3
52164: PUSH
52165: LD_VAR 0 3
52169: PUSH
52170: LD_INT 100
52172: PUSH
52173: LD_VAR 0 8
52177: PLUS
52178: STR
52179: PUSH
52180: LD_STRING ;
52182: STR
52183: ST_TO_ADDR
// end ;
52184: GO 52139
52186: POP
52187: POP
// if tmp then
52188: LD_VAR 0 3
52192: IFFALSE 52204
// active := tmp ;
52194: LD_ADDR_VAR 0 7
52198: PUSH
52199: LD_VAR 0 3
52203: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52204: LD_STRING getStreamItemsFromMission("
52206: PUSH
52207: LD_VAR 0 5
52211: STR
52212: PUSH
52213: LD_STRING ","
52215: STR
52216: PUSH
52217: LD_VAR 0 6
52221: STR
52222: PUSH
52223: LD_STRING ","
52225: STR
52226: PUSH
52227: LD_VAR 0 7
52231: STR
52232: PUSH
52233: LD_STRING ")
52235: STR
52236: PPUSH
52237: CALL_OW 559
// end else
52241: GO 52250
// ToLua ( getStreamItemsFromMission("","","") ) ;
52243: LD_STRING getStreamItemsFromMission("","","")
52245: PPUSH
52246: CALL_OW 559
// end ;
52250: LD_VAR 0 2
52254: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52255: LD_EXP 28
52259: PUSH
52260: LD_EXP 33
52264: AND
52265: IFFALSE 52389
52267: GO 52269
52269: DISABLE
52270: LD_INT 0
52272: PPUSH
52273: PPUSH
// begin enable ;
52274: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52275: LD_ADDR_VAR 0 2
52279: PUSH
52280: LD_INT 22
52282: PUSH
52283: LD_OWVAR 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 34
52297: PUSH
52298: LD_INT 7
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 34
52307: PUSH
52308: LD_INT 45
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 34
52317: PUSH
52318: LD_INT 28
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 34
52327: PUSH
52328: LD_INT 47
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PPUSH
52346: CALL_OW 69
52350: ST_TO_ADDR
// if not tmp then
52351: LD_VAR 0 2
52355: NOT
52356: IFFALSE 52360
// exit ;
52358: GO 52389
// for i in tmp do
52360: LD_ADDR_VAR 0 1
52364: PUSH
52365: LD_VAR 0 2
52369: PUSH
52370: FOR_IN
52371: IFFALSE 52387
// begin SetLives ( i , 0 ) ;
52373: LD_VAR 0 1
52377: PPUSH
52378: LD_INT 0
52380: PPUSH
52381: CALL_OW 234
// end ;
52385: GO 52370
52387: POP
52388: POP
// end ;
52389: PPOPN 2
52391: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52392: LD_EXP 28
52396: PUSH
52397: LD_EXP 34
52401: AND
52402: IFFALSE 52486
52404: GO 52406
52406: DISABLE
52407: LD_INT 0
52409: PPUSH
52410: PPUSH
// begin enable ;
52411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52412: LD_ADDR_VAR 0 2
52416: PUSH
52417: LD_INT 22
52419: PUSH
52420: LD_OWVAR 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 32
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PPUSH
52443: CALL_OW 69
52447: ST_TO_ADDR
// if not tmp then
52448: LD_VAR 0 2
52452: NOT
52453: IFFALSE 52457
// exit ;
52455: GO 52486
// for i in tmp do
52457: LD_ADDR_VAR 0 1
52461: PUSH
52462: LD_VAR 0 2
52466: PUSH
52467: FOR_IN
52468: IFFALSE 52484
// begin SetLives ( i , 0 ) ;
52470: LD_VAR 0 1
52474: PPUSH
52475: LD_INT 0
52477: PPUSH
52478: CALL_OW 234
// end ;
52482: GO 52467
52484: POP
52485: POP
// end ;
52486: PPOPN 2
52488: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52489: LD_EXP 28
52493: PUSH
52494: LD_EXP 31
52498: AND
52499: IFFALSE 52592
52501: GO 52503
52503: DISABLE
52504: LD_INT 0
52506: PPUSH
// begin enable ;
52507: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52508: LD_ADDR_VAR 0 1
52512: PUSH
52513: LD_INT 22
52515: PUSH
52516: LD_OWVAR 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 25
52530: PUSH
52531: LD_INT 5
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 25
52540: PUSH
52541: LD_INT 9
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 25
52550: PUSH
52551: LD_INT 8
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PPUSH
52568: CALL_OW 69
52572: PUSH
52573: FOR_IN
52574: IFFALSE 52590
// begin SetClass ( i , 1 ) ;
52576: LD_VAR 0 1
52580: PPUSH
52581: LD_INT 1
52583: PPUSH
52584: CALL_OW 336
// end ;
52588: GO 52573
52590: POP
52591: POP
// end ;
52592: PPOPN 1
52594: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52595: LD_EXP 28
52599: PUSH
52600: LD_EXP 32
52604: AND
52605: PUSH
52606: LD_OWVAR 65
52610: PUSH
52611: LD_INT 7
52613: LESS
52614: AND
52615: IFFALSE 52629
52617: GO 52619
52619: DISABLE
// begin enable ;
52620: ENABLE
// game_speed := 7 ;
52621: LD_ADDR_OWVAR 65
52625: PUSH
52626: LD_INT 7
52628: ST_TO_ADDR
// end ;
52629: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52630: LD_EXP 28
52634: PUSH
52635: LD_EXP 35
52639: AND
52640: IFFALSE 52842
52642: GO 52644
52644: DISABLE
52645: LD_INT 0
52647: PPUSH
52648: PPUSH
52649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52650: LD_ADDR_VAR 0 3
52654: PUSH
52655: LD_INT 81
52657: PUSH
52658: LD_OWVAR 2
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 21
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PPUSH
52681: CALL_OW 69
52685: ST_TO_ADDR
// if not tmp then
52686: LD_VAR 0 3
52690: NOT
52691: IFFALSE 52695
// exit ;
52693: GO 52842
// if tmp > 5 then
52695: LD_VAR 0 3
52699: PUSH
52700: LD_INT 5
52702: GREATER
52703: IFFALSE 52715
// k := 5 else
52705: LD_ADDR_VAR 0 2
52709: PUSH
52710: LD_INT 5
52712: ST_TO_ADDR
52713: GO 52725
// k := tmp ;
52715: LD_ADDR_VAR 0 2
52719: PUSH
52720: LD_VAR 0 3
52724: ST_TO_ADDR
// for i := 1 to k do
52725: LD_ADDR_VAR 0 1
52729: PUSH
52730: DOUBLE
52731: LD_INT 1
52733: DEC
52734: ST_TO_ADDR
52735: LD_VAR 0 2
52739: PUSH
52740: FOR_TO
52741: IFFALSE 52840
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52743: LD_VAR 0 3
52747: PUSH
52748: LD_VAR 0 1
52752: ARRAY
52753: PPUSH
52754: LD_VAR 0 1
52758: PUSH
52759: LD_INT 4
52761: MOD
52762: PUSH
52763: LD_INT 1
52765: PLUS
52766: PPUSH
52767: CALL_OW 259
52771: PUSH
52772: LD_INT 10
52774: LESS
52775: IFFALSE 52838
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52777: LD_VAR 0 3
52781: PUSH
52782: LD_VAR 0 1
52786: ARRAY
52787: PPUSH
52788: LD_VAR 0 1
52792: PUSH
52793: LD_INT 4
52795: MOD
52796: PUSH
52797: LD_INT 1
52799: PLUS
52800: PPUSH
52801: LD_VAR 0 3
52805: PUSH
52806: LD_VAR 0 1
52810: ARRAY
52811: PPUSH
52812: LD_VAR 0 1
52816: PUSH
52817: LD_INT 4
52819: MOD
52820: PUSH
52821: LD_INT 1
52823: PLUS
52824: PPUSH
52825: CALL_OW 259
52829: PUSH
52830: LD_INT 1
52832: PLUS
52833: PPUSH
52834: CALL_OW 237
52838: GO 52740
52840: POP
52841: POP
// end ;
52842: PPOPN 3
52844: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52845: LD_EXP 28
52849: PUSH
52850: LD_EXP 36
52854: AND
52855: IFFALSE 52875
52857: GO 52859
52859: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52860: LD_INT 4
52862: PPUSH
52863: LD_OWVAR 2
52867: PPUSH
52868: LD_INT 0
52870: PPUSH
52871: CALL_OW 324
52875: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52876: LD_EXP 28
52880: PUSH
52881: LD_EXP 65
52885: AND
52886: IFFALSE 52906
52888: GO 52890
52890: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52891: LD_INT 19
52893: PPUSH
52894: LD_OWVAR 2
52898: PPUSH
52899: LD_INT 0
52901: PPUSH
52902: CALL_OW 324
52906: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52907: LD_EXP 28
52911: PUSH
52912: LD_EXP 37
52916: AND
52917: IFFALSE 53019
52919: GO 52921
52921: DISABLE
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
// begin enable ;
52926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52927: LD_ADDR_VAR 0 2
52931: PUSH
52932: LD_INT 22
52934: PUSH
52935: LD_OWVAR 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: LD_INT 34
52949: PUSH
52950: LD_INT 11
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 34
52959: PUSH
52960: LD_INT 30
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PPUSH
52976: CALL_OW 69
52980: ST_TO_ADDR
// if not tmp then
52981: LD_VAR 0 2
52985: NOT
52986: IFFALSE 52990
// exit ;
52988: GO 53019
// for i in tmp do
52990: LD_ADDR_VAR 0 1
52994: PUSH
52995: LD_VAR 0 2
52999: PUSH
53000: FOR_IN
53001: IFFALSE 53017
// begin SetLives ( i , 0 ) ;
53003: LD_VAR 0 1
53007: PPUSH
53008: LD_INT 0
53010: PPUSH
53011: CALL_OW 234
// end ;
53015: GO 53000
53017: POP
53018: POP
// end ;
53019: PPOPN 2
53021: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53022: LD_EXP 28
53026: PUSH
53027: LD_EXP 38
53031: AND
53032: IFFALSE 53052
53034: GO 53036
53036: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53037: LD_INT 32
53039: PPUSH
53040: LD_OWVAR 2
53044: PPUSH
53045: LD_INT 0
53047: PPUSH
53048: CALL_OW 324
53052: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53053: LD_EXP 28
53057: PUSH
53058: LD_EXP 39
53062: AND
53063: IFFALSE 53244
53065: GO 53067
53067: DISABLE
53068: LD_INT 0
53070: PPUSH
53071: PPUSH
53072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53073: LD_ADDR_VAR 0 2
53077: PUSH
53078: LD_INT 22
53080: PUSH
53081: LD_OWVAR 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 33
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PPUSH
53104: CALL_OW 69
53108: ST_TO_ADDR
// if not tmp then
53109: LD_VAR 0 2
53113: NOT
53114: IFFALSE 53118
// exit ;
53116: GO 53244
// side := 0 ;
53118: LD_ADDR_VAR 0 3
53122: PUSH
53123: LD_INT 0
53125: ST_TO_ADDR
// for i := 1 to 8 do
53126: LD_ADDR_VAR 0 1
53130: PUSH
53131: DOUBLE
53132: LD_INT 1
53134: DEC
53135: ST_TO_ADDR
53136: LD_INT 8
53138: PUSH
53139: FOR_TO
53140: IFFALSE 53188
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53142: LD_OWVAR 2
53146: PUSH
53147: LD_VAR 0 1
53151: NONEQUAL
53152: PUSH
53153: LD_OWVAR 2
53157: PPUSH
53158: LD_VAR 0 1
53162: PPUSH
53163: CALL_OW 81
53167: PUSH
53168: LD_INT 2
53170: EQUAL
53171: AND
53172: IFFALSE 53186
// begin side := i ;
53174: LD_ADDR_VAR 0 3
53178: PUSH
53179: LD_VAR 0 1
53183: ST_TO_ADDR
// break ;
53184: GO 53188
// end ;
53186: GO 53139
53188: POP
53189: POP
// if not side then
53190: LD_VAR 0 3
53194: NOT
53195: IFFALSE 53199
// exit ;
53197: GO 53244
// for i := 1 to tmp do
53199: LD_ADDR_VAR 0 1
53203: PUSH
53204: DOUBLE
53205: LD_INT 1
53207: DEC
53208: ST_TO_ADDR
53209: LD_VAR 0 2
53213: PUSH
53214: FOR_TO
53215: IFFALSE 53242
// if Prob ( 60 ) then
53217: LD_INT 60
53219: PPUSH
53220: CALL_OW 13
53224: IFFALSE 53240
// SetSide ( i , side ) ;
53226: LD_VAR 0 1
53230: PPUSH
53231: LD_VAR 0 3
53235: PPUSH
53236: CALL_OW 235
53240: GO 53214
53242: POP
53243: POP
// end ;
53244: PPOPN 3
53246: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53247: LD_EXP 28
53251: PUSH
53252: LD_EXP 41
53256: AND
53257: IFFALSE 53376
53259: GO 53261
53261: DISABLE
53262: LD_INT 0
53264: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53265: LD_ADDR_VAR 0 1
53269: PUSH
53270: LD_INT 22
53272: PUSH
53273: LD_OWVAR 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 21
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: LD_INT 23
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: PPUSH
53314: CALL_OW 69
53318: PUSH
53319: FOR_IN
53320: IFFALSE 53374
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53322: LD_VAR 0 1
53326: PPUSH
53327: CALL_OW 257
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: LD_INT 4
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: IN
53350: IFFALSE 53372
// SetClass ( un , rand ( 1 , 4 ) ) ;
53352: LD_VAR 0 1
53356: PPUSH
53357: LD_INT 1
53359: PPUSH
53360: LD_INT 4
53362: PPUSH
53363: CALL_OW 12
53367: PPUSH
53368: CALL_OW 336
53372: GO 53319
53374: POP
53375: POP
// end ;
53376: PPOPN 1
53378: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53379: LD_EXP 28
53383: PUSH
53384: LD_EXP 40
53388: AND
53389: IFFALSE 53468
53391: GO 53393
53393: DISABLE
53394: LD_INT 0
53396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53397: LD_ADDR_VAR 0 1
53401: PUSH
53402: LD_INT 22
53404: PUSH
53405: LD_OWVAR 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 21
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PPUSH
53428: CALL_OW 69
53432: ST_TO_ADDR
// if not tmp then
53433: LD_VAR 0 1
53437: NOT
53438: IFFALSE 53442
// exit ;
53440: GO 53468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53442: LD_VAR 0 1
53446: PUSH
53447: LD_INT 1
53449: PPUSH
53450: LD_VAR 0 1
53454: PPUSH
53455: CALL_OW 12
53459: ARRAY
53460: PPUSH
53461: LD_INT 100
53463: PPUSH
53464: CALL_OW 234
// end ;
53468: PPOPN 1
53470: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53471: LD_EXP 28
53475: PUSH
53476: LD_EXP 42
53480: AND
53481: IFFALSE 53579
53483: GO 53485
53485: DISABLE
53486: LD_INT 0
53488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53489: LD_ADDR_VAR 0 1
53493: PUSH
53494: LD_INT 22
53496: PUSH
53497: LD_OWVAR 2
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 21
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PPUSH
53520: CALL_OW 69
53524: ST_TO_ADDR
// if not tmp then
53525: LD_VAR 0 1
53529: NOT
53530: IFFALSE 53534
// exit ;
53532: GO 53579
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53534: LD_VAR 0 1
53538: PUSH
53539: LD_INT 1
53541: PPUSH
53542: LD_VAR 0 1
53546: PPUSH
53547: CALL_OW 12
53551: ARRAY
53552: PPUSH
53553: LD_INT 1
53555: PPUSH
53556: LD_INT 4
53558: PPUSH
53559: CALL_OW 12
53563: PPUSH
53564: LD_INT 3000
53566: PPUSH
53567: LD_INT 9000
53569: PPUSH
53570: CALL_OW 12
53574: PPUSH
53575: CALL_OW 492
// end ;
53579: PPOPN 1
53581: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53582: LD_EXP 28
53586: PUSH
53587: LD_EXP 43
53591: AND
53592: IFFALSE 53612
53594: GO 53596
53596: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53597: LD_INT 1
53599: PPUSH
53600: LD_OWVAR 2
53604: PPUSH
53605: LD_INT 0
53607: PPUSH
53608: CALL_OW 324
53612: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53613: LD_EXP 28
53617: PUSH
53618: LD_EXP 44
53622: AND
53623: IFFALSE 53706
53625: GO 53627
53627: DISABLE
53628: LD_INT 0
53630: PPUSH
53631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53632: LD_ADDR_VAR 0 2
53636: PUSH
53637: LD_INT 22
53639: PUSH
53640: LD_OWVAR 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 21
53651: PUSH
53652: LD_INT 3
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PPUSH
53663: CALL_OW 69
53667: ST_TO_ADDR
// if not tmp then
53668: LD_VAR 0 2
53672: NOT
53673: IFFALSE 53677
// exit ;
53675: GO 53706
// for i in tmp do
53677: LD_ADDR_VAR 0 1
53681: PUSH
53682: LD_VAR 0 2
53686: PUSH
53687: FOR_IN
53688: IFFALSE 53704
// SetBLevel ( i , 10 ) ;
53690: LD_VAR 0 1
53694: PPUSH
53695: LD_INT 10
53697: PPUSH
53698: CALL_OW 241
53702: GO 53687
53704: POP
53705: POP
// end ;
53706: PPOPN 2
53708: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53709: LD_EXP 28
53713: PUSH
53714: LD_EXP 45
53718: AND
53719: IFFALSE 53830
53721: GO 53723
53723: DISABLE
53724: LD_INT 0
53726: PPUSH
53727: PPUSH
53728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53729: LD_ADDR_VAR 0 3
53733: PUSH
53734: LD_INT 22
53736: PUSH
53737: LD_OWVAR 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 25
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PPUSH
53760: CALL_OW 69
53764: ST_TO_ADDR
// if not tmp then
53765: LD_VAR 0 3
53769: NOT
53770: IFFALSE 53774
// exit ;
53772: GO 53830
// un := tmp [ rand ( 1 , tmp ) ] ;
53774: LD_ADDR_VAR 0 2
53778: PUSH
53779: LD_VAR 0 3
53783: PUSH
53784: LD_INT 1
53786: PPUSH
53787: LD_VAR 0 3
53791: PPUSH
53792: CALL_OW 12
53796: ARRAY
53797: ST_TO_ADDR
// if Crawls ( un ) then
53798: LD_VAR 0 2
53802: PPUSH
53803: CALL_OW 318
53807: IFFALSE 53818
// ComWalk ( un ) ;
53809: LD_VAR 0 2
53813: PPUSH
53814: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53818: LD_VAR 0 2
53822: PPUSH
53823: LD_INT 5
53825: PPUSH
53826: CALL_OW 336
// end ;
53830: PPOPN 3
53832: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53833: LD_EXP 28
53837: PUSH
53838: LD_EXP 46
53842: AND
53843: PUSH
53844: LD_OWVAR 67
53848: PUSH
53849: LD_INT 4
53851: LESS
53852: AND
53853: IFFALSE 53872
53855: GO 53857
53857: DISABLE
// begin Difficulty := Difficulty + 1 ;
53858: LD_ADDR_OWVAR 67
53862: PUSH
53863: LD_OWVAR 67
53867: PUSH
53868: LD_INT 1
53870: PLUS
53871: ST_TO_ADDR
// end ;
53872: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53873: LD_EXP 28
53877: PUSH
53878: LD_EXP 47
53882: AND
53883: IFFALSE 53986
53885: GO 53887
53887: DISABLE
53888: LD_INT 0
53890: PPUSH
// begin for i := 1 to 5 do
53891: LD_ADDR_VAR 0 1
53895: PUSH
53896: DOUBLE
53897: LD_INT 1
53899: DEC
53900: ST_TO_ADDR
53901: LD_INT 5
53903: PUSH
53904: FOR_TO
53905: IFFALSE 53984
// begin uc_nation := nation_nature ;
53907: LD_ADDR_OWVAR 21
53911: PUSH
53912: LD_INT 0
53914: ST_TO_ADDR
// uc_side := 0 ;
53915: LD_ADDR_OWVAR 20
53919: PUSH
53920: LD_INT 0
53922: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53923: LD_ADDR_OWVAR 29
53927: PUSH
53928: LD_INT 12
53930: PUSH
53931: LD_INT 12
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: ST_TO_ADDR
// hc_agressivity := 20 ;
53938: LD_ADDR_OWVAR 35
53942: PUSH
53943: LD_INT 20
53945: ST_TO_ADDR
// hc_class := class_tiger ;
53946: LD_ADDR_OWVAR 28
53950: PUSH
53951: LD_INT 14
53953: ST_TO_ADDR
// hc_gallery :=  ;
53954: LD_ADDR_OWVAR 33
53958: PUSH
53959: LD_STRING 
53961: ST_TO_ADDR
// hc_name :=  ;
53962: LD_ADDR_OWVAR 26
53966: PUSH
53967: LD_STRING 
53969: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53970: CALL_OW 44
53974: PPUSH
53975: LD_INT 0
53977: PPUSH
53978: CALL_OW 51
// end ;
53982: GO 53904
53984: POP
53985: POP
// end ;
53986: PPOPN 1
53988: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53989: LD_EXP 28
53993: PUSH
53994: LD_EXP 48
53998: AND
53999: IFFALSE 54008
54001: GO 54003
54003: DISABLE
// StreamSibBomb ;
54004: CALL 54009 0 0
54008: END
// export function StreamSibBomb ; var i , x , y ; begin
54009: LD_INT 0
54011: PPUSH
54012: PPUSH
54013: PPUSH
54014: PPUSH
// result := false ;
54015: LD_ADDR_VAR 0 1
54019: PUSH
54020: LD_INT 0
54022: ST_TO_ADDR
// for i := 1 to 16 do
54023: LD_ADDR_VAR 0 2
54027: PUSH
54028: DOUBLE
54029: LD_INT 1
54031: DEC
54032: ST_TO_ADDR
54033: LD_INT 16
54035: PUSH
54036: FOR_TO
54037: IFFALSE 54236
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54039: LD_ADDR_VAR 0 3
54043: PUSH
54044: LD_INT 10
54046: PUSH
54047: LD_INT 20
54049: PUSH
54050: LD_INT 30
54052: PUSH
54053: LD_INT 40
54055: PUSH
54056: LD_INT 50
54058: PUSH
54059: LD_INT 60
54061: PUSH
54062: LD_INT 70
54064: PUSH
54065: LD_INT 80
54067: PUSH
54068: LD_INT 90
54070: PUSH
54071: LD_INT 100
54073: PUSH
54074: LD_INT 110
54076: PUSH
54077: LD_INT 120
54079: PUSH
54080: LD_INT 130
54082: PUSH
54083: LD_INT 140
54085: PUSH
54086: LD_INT 150
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PPUSH
54109: LD_INT 15
54111: PPUSH
54112: CALL_OW 12
54116: ARRAY
54117: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54118: LD_ADDR_VAR 0 4
54122: PUSH
54123: LD_INT 10
54125: PUSH
54126: LD_INT 20
54128: PUSH
54129: LD_INT 30
54131: PUSH
54132: LD_INT 40
54134: PUSH
54135: LD_INT 50
54137: PUSH
54138: LD_INT 60
54140: PUSH
54141: LD_INT 70
54143: PUSH
54144: LD_INT 80
54146: PUSH
54147: LD_INT 90
54149: PUSH
54150: LD_INT 100
54152: PUSH
54153: LD_INT 110
54155: PUSH
54156: LD_INT 120
54158: PUSH
54159: LD_INT 130
54161: PUSH
54162: LD_INT 140
54164: PUSH
54165: LD_INT 150
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PPUSH
54188: LD_INT 15
54190: PPUSH
54191: CALL_OW 12
54195: ARRAY
54196: ST_TO_ADDR
// if ValidHex ( x , y ) then
54197: LD_VAR 0 3
54201: PPUSH
54202: LD_VAR 0 4
54206: PPUSH
54207: CALL_OW 488
54211: IFFALSE 54234
// begin result := [ x , y ] ;
54213: LD_ADDR_VAR 0 1
54217: PUSH
54218: LD_VAR 0 3
54222: PUSH
54223: LD_VAR 0 4
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: ST_TO_ADDR
// break ;
54232: GO 54236
// end ; end ;
54234: GO 54036
54236: POP
54237: POP
// if result then
54238: LD_VAR 0 1
54242: IFFALSE 54302
// begin ToLua ( playSibBomb() ) ;
54244: LD_STRING playSibBomb()
54246: PPUSH
54247: CALL_OW 559
// wait ( 0 0$14 ) ;
54251: LD_INT 490
54253: PPUSH
54254: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54258: LD_VAR 0 1
54262: PUSH
54263: LD_INT 1
54265: ARRAY
54266: PPUSH
54267: LD_VAR 0 1
54271: PUSH
54272: LD_INT 2
54274: ARRAY
54275: PPUSH
54276: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54280: LD_VAR 0 1
54284: PUSH
54285: LD_INT 1
54287: ARRAY
54288: PPUSH
54289: LD_VAR 0 1
54293: PUSH
54294: LD_INT 2
54296: ARRAY
54297: PPUSH
54298: CALL_OW 429
// end ; end ;
54302: LD_VAR 0 1
54306: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54307: LD_EXP 28
54311: PUSH
54312: LD_EXP 50
54316: AND
54317: IFFALSE 54329
54319: GO 54321
54321: DISABLE
// YouLost (  ) ;
54322: LD_STRING 
54324: PPUSH
54325: CALL_OW 104
54329: END
// every 0 0$1 trigger StreamModeActive and sFog do
54330: LD_EXP 28
54334: PUSH
54335: LD_EXP 49
54339: AND
54340: IFFALSE 54354
54342: GO 54344
54344: DISABLE
// FogOff ( your_side ) ;
54345: LD_OWVAR 2
54349: PPUSH
54350: CALL_OW 344
54354: END
// every 0 0$1 trigger StreamModeActive and sSun do
54355: LD_EXP 28
54359: PUSH
54360: LD_EXP 51
54364: AND
54365: IFFALSE 54393
54367: GO 54369
54369: DISABLE
// begin solar_recharge_percent := 0 ;
54370: LD_ADDR_OWVAR 79
54374: PUSH
54375: LD_INT 0
54377: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54378: LD_INT 10500
54380: PPUSH
54381: CALL_OW 67
// solar_recharge_percent := 100 ;
54385: LD_ADDR_OWVAR 79
54389: PUSH
54390: LD_INT 100
54392: ST_TO_ADDR
// end ;
54393: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54394: LD_EXP 28
54398: PUSH
54399: LD_EXP 52
54403: AND
54404: IFFALSE 54643
54406: GO 54408
54408: DISABLE
54409: LD_INT 0
54411: PPUSH
54412: PPUSH
54413: PPUSH
// begin tmp := [ ] ;
54414: LD_ADDR_VAR 0 3
54418: PUSH
54419: EMPTY
54420: ST_TO_ADDR
// for i := 1 to 6 do
54421: LD_ADDR_VAR 0 1
54425: PUSH
54426: DOUBLE
54427: LD_INT 1
54429: DEC
54430: ST_TO_ADDR
54431: LD_INT 6
54433: PUSH
54434: FOR_TO
54435: IFFALSE 54540
// begin uc_nation := nation_nature ;
54437: LD_ADDR_OWVAR 21
54441: PUSH
54442: LD_INT 0
54444: ST_TO_ADDR
// uc_side := 0 ;
54445: LD_ADDR_OWVAR 20
54449: PUSH
54450: LD_INT 0
54452: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54453: LD_ADDR_OWVAR 29
54457: PUSH
54458: LD_INT 12
54460: PUSH
54461: LD_INT 12
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: ST_TO_ADDR
// hc_agressivity := 20 ;
54468: LD_ADDR_OWVAR 35
54472: PUSH
54473: LD_INT 20
54475: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54476: LD_ADDR_OWVAR 28
54480: PUSH
54481: LD_INT 17
54483: ST_TO_ADDR
// hc_gallery :=  ;
54484: LD_ADDR_OWVAR 33
54488: PUSH
54489: LD_STRING 
54491: ST_TO_ADDR
// hc_name :=  ;
54492: LD_ADDR_OWVAR 26
54496: PUSH
54497: LD_STRING 
54499: ST_TO_ADDR
// un := CreateHuman ;
54500: LD_ADDR_VAR 0 2
54504: PUSH
54505: CALL_OW 44
54509: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54510: LD_VAR 0 2
54514: PPUSH
54515: LD_INT 1
54517: PPUSH
54518: CALL_OW 51
// tmp := tmp ^ un ;
54522: LD_ADDR_VAR 0 3
54526: PUSH
54527: LD_VAR 0 3
54531: PUSH
54532: LD_VAR 0 2
54536: ADD
54537: ST_TO_ADDR
// end ;
54538: GO 54434
54540: POP
54541: POP
// repeat wait ( 0 0$1 ) ;
54542: LD_INT 35
54544: PPUSH
54545: CALL_OW 67
// for un in tmp do
54549: LD_ADDR_VAR 0 2
54553: PUSH
54554: LD_VAR 0 3
54558: PUSH
54559: FOR_IN
54560: IFFALSE 54634
// begin if IsDead ( un ) then
54562: LD_VAR 0 2
54566: PPUSH
54567: CALL_OW 301
54571: IFFALSE 54591
// begin tmp := tmp diff un ;
54573: LD_ADDR_VAR 0 3
54577: PUSH
54578: LD_VAR 0 3
54582: PUSH
54583: LD_VAR 0 2
54587: DIFF
54588: ST_TO_ADDR
// continue ;
54589: GO 54559
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54591: LD_VAR 0 2
54595: PPUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 22
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PPUSH
54613: CALL_OW 69
54617: PPUSH
54618: LD_VAR 0 2
54622: PPUSH
54623: CALL_OW 74
54627: PPUSH
54628: CALL_OW 115
// end ;
54632: GO 54559
54634: POP
54635: POP
// until not tmp ;
54636: LD_VAR 0 3
54640: NOT
54641: IFFALSE 54542
// end ;
54643: PPOPN 3
54645: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54646: LD_EXP 28
54650: PUSH
54651: LD_EXP 53
54655: AND
54656: IFFALSE 54710
54658: GO 54660
54660: DISABLE
// begin ToLua ( displayTroll(); ) ;
54661: LD_STRING displayTroll();
54663: PPUSH
54664: CALL_OW 559
// wait ( 3 3$00 ) ;
54668: LD_INT 6300
54670: PPUSH
54671: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54675: LD_STRING hideTroll();
54677: PPUSH
54678: CALL_OW 559
// wait ( 1 1$00 ) ;
54682: LD_INT 2100
54684: PPUSH
54685: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54689: LD_STRING displayTroll();
54691: PPUSH
54692: CALL_OW 559
// wait ( 1 1$00 ) ;
54696: LD_INT 2100
54698: PPUSH
54699: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54703: LD_STRING hideTroll();
54705: PPUSH
54706: CALL_OW 559
// end ;
54710: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54711: LD_EXP 28
54715: PUSH
54716: LD_EXP 54
54720: AND
54721: IFFALSE 54784
54723: GO 54725
54725: DISABLE
54726: LD_INT 0
54728: PPUSH
// begin p := 0 ;
54729: LD_ADDR_VAR 0 1
54733: PUSH
54734: LD_INT 0
54736: ST_TO_ADDR
// repeat game_speed := 1 ;
54737: LD_ADDR_OWVAR 65
54741: PUSH
54742: LD_INT 1
54744: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54745: LD_INT 35
54747: PPUSH
54748: CALL_OW 67
// p := p + 1 ;
54752: LD_ADDR_VAR 0 1
54756: PUSH
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 1
54764: PLUS
54765: ST_TO_ADDR
// until p >= 60 ;
54766: LD_VAR 0 1
54770: PUSH
54771: LD_INT 60
54773: GREATEREQUAL
54774: IFFALSE 54737
// game_speed := 4 ;
54776: LD_ADDR_OWVAR 65
54780: PUSH
54781: LD_INT 4
54783: ST_TO_ADDR
// end ;
54784: PPOPN 1
54786: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54787: LD_EXP 28
54791: PUSH
54792: LD_EXP 55
54796: AND
54797: IFFALSE 54943
54799: GO 54801
54801: DISABLE
54802: LD_INT 0
54804: PPUSH
54805: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54806: LD_ADDR_VAR 0 1
54810: PUSH
54811: LD_INT 22
54813: PUSH
54814: LD_OWVAR 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 30
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 30
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PPUSH
54855: CALL_OW 69
54859: ST_TO_ADDR
// if not depot then
54860: LD_VAR 0 1
54864: NOT
54865: IFFALSE 54869
// exit ;
54867: GO 54943
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54869: LD_ADDR_VAR 0 2
54873: PUSH
54874: LD_VAR 0 1
54878: PUSH
54879: LD_INT 1
54881: PPUSH
54882: LD_VAR 0 1
54886: PPUSH
54887: CALL_OW 12
54891: ARRAY
54892: PPUSH
54893: CALL_OW 274
54897: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54898: LD_VAR 0 2
54902: PPUSH
54903: LD_INT 1
54905: PPUSH
54906: LD_INT 0
54908: PPUSH
54909: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54913: LD_VAR 0 2
54917: PPUSH
54918: LD_INT 2
54920: PPUSH
54921: LD_INT 0
54923: PPUSH
54924: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54928: LD_VAR 0 2
54932: PPUSH
54933: LD_INT 3
54935: PPUSH
54936: LD_INT 0
54938: PPUSH
54939: CALL_OW 277
// end ;
54943: PPOPN 2
54945: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54946: LD_EXP 28
54950: PUSH
54951: LD_EXP 56
54955: AND
54956: IFFALSE 55053
54958: GO 54960
54960: DISABLE
54961: LD_INT 0
54963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54964: LD_ADDR_VAR 0 1
54968: PUSH
54969: LD_INT 22
54971: PUSH
54972: LD_OWVAR 2
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 21
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: LD_INT 23
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: PPUSH
55013: CALL_OW 69
55017: ST_TO_ADDR
// if not tmp then
55018: LD_VAR 0 1
55022: NOT
55023: IFFALSE 55027
// exit ;
55025: GO 55053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55027: LD_VAR 0 1
55031: PUSH
55032: LD_INT 1
55034: PPUSH
55035: LD_VAR 0 1
55039: PPUSH
55040: CALL_OW 12
55044: ARRAY
55045: PPUSH
55046: LD_INT 200
55048: PPUSH
55049: CALL_OW 234
// end ;
55053: PPOPN 1
55055: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55056: LD_EXP 28
55060: PUSH
55061: LD_EXP 57
55065: AND
55066: IFFALSE 55145
55068: GO 55070
55070: DISABLE
55071: LD_INT 0
55073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55074: LD_ADDR_VAR 0 1
55078: PUSH
55079: LD_INT 22
55081: PUSH
55082: LD_OWVAR 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 21
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PPUSH
55105: CALL_OW 69
55109: ST_TO_ADDR
// if not tmp then
55110: LD_VAR 0 1
55114: NOT
55115: IFFALSE 55119
// exit ;
55117: GO 55145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55119: LD_VAR 0 1
55123: PUSH
55124: LD_INT 1
55126: PPUSH
55127: LD_VAR 0 1
55131: PPUSH
55132: CALL_OW 12
55136: ARRAY
55137: PPUSH
55138: LD_INT 60
55140: PPUSH
55141: CALL_OW 234
// end ;
55145: PPOPN 1
55147: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55148: LD_EXP 28
55152: PUSH
55153: LD_EXP 58
55157: AND
55158: IFFALSE 55257
55160: GO 55162
55162: DISABLE
55163: LD_INT 0
55165: PPUSH
55166: PPUSH
// begin enable ;
55167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55168: LD_ADDR_VAR 0 1
55172: PUSH
55173: LD_INT 22
55175: PUSH
55176: LD_OWVAR 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 61
55187: PUSH
55188: EMPTY
55189: LIST
55190: PUSH
55191: LD_INT 33
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: PPUSH
55206: CALL_OW 69
55210: ST_TO_ADDR
// if not tmp then
55211: LD_VAR 0 1
55215: NOT
55216: IFFALSE 55220
// exit ;
55218: GO 55257
// for i in tmp do
55220: LD_ADDR_VAR 0 2
55224: PUSH
55225: LD_VAR 0 1
55229: PUSH
55230: FOR_IN
55231: IFFALSE 55255
// if IsControledBy ( i ) then
55233: LD_VAR 0 2
55237: PPUSH
55238: CALL_OW 312
55242: IFFALSE 55253
// ComUnlink ( i ) ;
55244: LD_VAR 0 2
55248: PPUSH
55249: CALL_OW 136
55253: GO 55230
55255: POP
55256: POP
// end ;
55257: PPOPN 2
55259: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55260: LD_EXP 28
55264: PUSH
55265: LD_EXP 59
55269: AND
55270: IFFALSE 55410
55272: GO 55274
55274: DISABLE
55275: LD_INT 0
55277: PPUSH
55278: PPUSH
// begin ToLua ( displayPowell(); ) ;
55279: LD_STRING displayPowell();
55281: PPUSH
55282: CALL_OW 559
// uc_side := 0 ;
55286: LD_ADDR_OWVAR 20
55290: PUSH
55291: LD_INT 0
55293: ST_TO_ADDR
// uc_nation := 2 ;
55294: LD_ADDR_OWVAR 21
55298: PUSH
55299: LD_INT 2
55301: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55302: LD_ADDR_OWVAR 37
55306: PUSH
55307: LD_INT 14
55309: ST_TO_ADDR
// vc_engine := engine_siberite ;
55310: LD_ADDR_OWVAR 39
55314: PUSH
55315: LD_INT 3
55317: ST_TO_ADDR
// vc_control := control_apeman ;
55318: LD_ADDR_OWVAR 38
55322: PUSH
55323: LD_INT 5
55325: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55326: LD_ADDR_OWVAR 40
55330: PUSH
55331: LD_INT 29
55333: ST_TO_ADDR
// un := CreateVehicle ;
55334: LD_ADDR_VAR 0 2
55338: PUSH
55339: CALL_OW 45
55343: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55344: LD_VAR 0 2
55348: PPUSH
55349: LD_INT 1
55351: PPUSH
55352: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55356: LD_INT 35
55358: PPUSH
55359: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55363: LD_VAR 0 2
55367: PPUSH
55368: LD_INT 22
55370: PUSH
55371: LD_OWVAR 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PPUSH
55380: CALL_OW 69
55384: PPUSH
55385: LD_VAR 0 2
55389: PPUSH
55390: CALL_OW 74
55394: PPUSH
55395: CALL_OW 115
// until IsDead ( un ) ;
55399: LD_VAR 0 2
55403: PPUSH
55404: CALL_OW 301
55408: IFFALSE 55356
// end ;
55410: PPOPN 2
55412: END
// every 0 0$1 trigger StreamModeActive and sStu do
55413: LD_EXP 28
55417: PUSH
55418: LD_EXP 67
55422: AND
55423: IFFALSE 55439
55425: GO 55427
55427: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55428: LD_STRING displayStucuk();
55430: PPUSH
55431: CALL_OW 559
// ResetFog ;
55435: CALL_OW 335
// end ;
55439: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55440: LD_EXP 28
55444: PUSH
55445: LD_EXP 60
55449: AND
55450: IFFALSE 55591
55452: GO 55454
55454: DISABLE
55455: LD_INT 0
55457: PPUSH
55458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55459: LD_ADDR_VAR 0 2
55463: PUSH
55464: LD_INT 22
55466: PUSH
55467: LD_OWVAR 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 21
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PPUSH
55490: CALL_OW 69
55494: ST_TO_ADDR
// if not tmp then
55495: LD_VAR 0 2
55499: NOT
55500: IFFALSE 55504
// exit ;
55502: GO 55591
// un := tmp [ rand ( 1 , tmp ) ] ;
55504: LD_ADDR_VAR 0 1
55508: PUSH
55509: LD_VAR 0 2
55513: PUSH
55514: LD_INT 1
55516: PPUSH
55517: LD_VAR 0 2
55521: PPUSH
55522: CALL_OW 12
55526: ARRAY
55527: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55528: LD_VAR 0 1
55532: PPUSH
55533: LD_INT 0
55535: PPUSH
55536: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55540: LD_VAR 0 1
55544: PPUSH
55545: LD_OWVAR 3
55549: PUSH
55550: LD_VAR 0 1
55554: DIFF
55555: PPUSH
55556: LD_VAR 0 1
55560: PPUSH
55561: CALL_OW 74
55565: PPUSH
55566: CALL_OW 115
// wait ( 0 0$20 ) ;
55570: LD_INT 700
55572: PPUSH
55573: CALL_OW 67
// SetSide ( un , your_side ) ;
55577: LD_VAR 0 1
55581: PPUSH
55582: LD_OWVAR 2
55586: PPUSH
55587: CALL_OW 235
// end ;
55591: PPOPN 2
55593: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55594: LD_EXP 28
55598: PUSH
55599: LD_EXP 61
55603: AND
55604: IFFALSE 55710
55606: GO 55608
55608: DISABLE
55609: LD_INT 0
55611: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55612: LD_ADDR_VAR 0 1
55616: PUSH
55617: LD_INT 22
55619: PUSH
55620: LD_OWVAR 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 30
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 30
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PPUSH
55661: CALL_OW 69
55665: ST_TO_ADDR
// if not depot then
55666: LD_VAR 0 1
55670: NOT
55671: IFFALSE 55675
// exit ;
55673: GO 55710
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55675: LD_VAR 0 1
55679: PUSH
55680: LD_INT 1
55682: ARRAY
55683: PPUSH
55684: CALL_OW 250
55688: PPUSH
55689: LD_VAR 0 1
55693: PUSH
55694: LD_INT 1
55696: ARRAY
55697: PPUSH
55698: CALL_OW 251
55702: PPUSH
55703: LD_INT 70
55705: PPUSH
55706: CALL_OW 495
// end ;
55710: PPOPN 1
55712: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55713: LD_EXP 28
55717: PUSH
55718: LD_EXP 62
55722: AND
55723: IFFALSE 55934
55725: GO 55727
55727: DISABLE
55728: LD_INT 0
55730: PPUSH
55731: PPUSH
55732: PPUSH
55733: PPUSH
55734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55735: LD_ADDR_VAR 0 5
55739: PUSH
55740: LD_INT 22
55742: PUSH
55743: LD_OWVAR 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 21
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PPUSH
55766: CALL_OW 69
55770: ST_TO_ADDR
// if not tmp then
55771: LD_VAR 0 5
55775: NOT
55776: IFFALSE 55780
// exit ;
55778: GO 55934
// for i in tmp do
55780: LD_ADDR_VAR 0 1
55784: PUSH
55785: LD_VAR 0 5
55789: PUSH
55790: FOR_IN
55791: IFFALSE 55932
// begin d := rand ( 0 , 5 ) ;
55793: LD_ADDR_VAR 0 4
55797: PUSH
55798: LD_INT 0
55800: PPUSH
55801: LD_INT 5
55803: PPUSH
55804: CALL_OW 12
55808: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55809: LD_ADDR_VAR 0 2
55813: PUSH
55814: LD_VAR 0 1
55818: PPUSH
55819: CALL_OW 250
55823: PPUSH
55824: LD_VAR 0 4
55828: PPUSH
55829: LD_INT 3
55831: PPUSH
55832: LD_INT 12
55834: PPUSH
55835: CALL_OW 12
55839: PPUSH
55840: CALL_OW 272
55844: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55845: LD_ADDR_VAR 0 3
55849: PUSH
55850: LD_VAR 0 1
55854: PPUSH
55855: CALL_OW 251
55859: PPUSH
55860: LD_VAR 0 4
55864: PPUSH
55865: LD_INT 3
55867: PPUSH
55868: LD_INT 12
55870: PPUSH
55871: CALL_OW 12
55875: PPUSH
55876: CALL_OW 273
55880: ST_TO_ADDR
// if ValidHex ( x , y ) then
55881: LD_VAR 0 2
55885: PPUSH
55886: LD_VAR 0 3
55890: PPUSH
55891: CALL_OW 488
55895: IFFALSE 55930
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55897: LD_VAR 0 1
55901: PPUSH
55902: LD_VAR 0 2
55906: PPUSH
55907: LD_VAR 0 3
55911: PPUSH
55912: LD_INT 3
55914: PPUSH
55915: LD_INT 6
55917: PPUSH
55918: CALL_OW 12
55922: PPUSH
55923: LD_INT 1
55925: PPUSH
55926: CALL_OW 483
// end ;
55930: GO 55790
55932: POP
55933: POP
// end ;
55934: PPOPN 5
55936: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55937: LD_EXP 28
55941: PUSH
55942: LD_EXP 63
55946: AND
55947: IFFALSE 56041
55949: GO 55951
55951: DISABLE
55952: LD_INT 0
55954: PPUSH
55955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55956: LD_ADDR_VAR 0 2
55960: PUSH
55961: LD_INT 22
55963: PUSH
55964: LD_OWVAR 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 32
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 21
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: PPUSH
55998: CALL_OW 69
56002: ST_TO_ADDR
// if not tmp then
56003: LD_VAR 0 2
56007: NOT
56008: IFFALSE 56012
// exit ;
56010: GO 56041
// for i in tmp do
56012: LD_ADDR_VAR 0 1
56016: PUSH
56017: LD_VAR 0 2
56021: PUSH
56022: FOR_IN
56023: IFFALSE 56039
// SetFuel ( i , 0 ) ;
56025: LD_VAR 0 1
56029: PPUSH
56030: LD_INT 0
56032: PPUSH
56033: CALL_OW 240
56037: GO 56022
56039: POP
56040: POP
// end ;
56041: PPOPN 2
56043: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56044: LD_EXP 28
56048: PUSH
56049: LD_EXP 64
56053: AND
56054: IFFALSE 56120
56056: GO 56058
56058: DISABLE
56059: LD_INT 0
56061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56062: LD_ADDR_VAR 0 1
56066: PUSH
56067: LD_INT 22
56069: PUSH
56070: LD_OWVAR 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 30
56081: PUSH
56082: LD_INT 29
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PPUSH
56093: CALL_OW 69
56097: ST_TO_ADDR
// if not tmp then
56098: LD_VAR 0 1
56102: NOT
56103: IFFALSE 56107
// exit ;
56105: GO 56120
// DestroyUnit ( tmp [ 1 ] ) ;
56107: LD_VAR 0 1
56111: PUSH
56112: LD_INT 1
56114: ARRAY
56115: PPUSH
56116: CALL_OW 65
// end ;
56120: PPOPN 1
56122: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56123: LD_EXP 28
56127: PUSH
56128: LD_EXP 66
56132: AND
56133: IFFALSE 56262
56135: GO 56137
56137: DISABLE
56138: LD_INT 0
56140: PPUSH
// begin uc_side := 0 ;
56141: LD_ADDR_OWVAR 20
56145: PUSH
56146: LD_INT 0
56148: ST_TO_ADDR
// uc_nation := nation_arabian ;
56149: LD_ADDR_OWVAR 21
56153: PUSH
56154: LD_INT 2
56156: ST_TO_ADDR
// hc_gallery :=  ;
56157: LD_ADDR_OWVAR 33
56161: PUSH
56162: LD_STRING 
56164: ST_TO_ADDR
// hc_name :=  ;
56165: LD_ADDR_OWVAR 26
56169: PUSH
56170: LD_STRING 
56172: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56173: LD_INT 1
56175: PPUSH
56176: LD_INT 11
56178: PPUSH
56179: LD_INT 10
56181: PPUSH
56182: CALL_OW 380
// un := CreateHuman ;
56186: LD_ADDR_VAR 0 1
56190: PUSH
56191: CALL_OW 44
56195: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56196: LD_VAR 0 1
56200: PPUSH
56201: LD_INT 1
56203: PPUSH
56204: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56208: LD_INT 35
56210: PPUSH
56211: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56215: LD_VAR 0 1
56219: PPUSH
56220: LD_INT 22
56222: PUSH
56223: LD_OWVAR 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PPUSH
56232: CALL_OW 69
56236: PPUSH
56237: LD_VAR 0 1
56241: PPUSH
56242: CALL_OW 74
56246: PPUSH
56247: CALL_OW 115
// until IsDead ( un ) ;
56251: LD_VAR 0 1
56255: PPUSH
56256: CALL_OW 301
56260: IFFALSE 56208
// end ;
56262: PPOPN 1
56264: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56265: LD_EXP 28
56269: PUSH
56270: LD_EXP 68
56274: AND
56275: IFFALSE 56287
56277: GO 56279
56279: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56280: LD_STRING earthquake(getX(game), 0, 32)
56282: PPUSH
56283: CALL_OW 559
56287: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56288: LD_EXP 28
56292: PUSH
56293: LD_EXP 69
56297: AND
56298: IFFALSE 56389
56300: GO 56302
56302: DISABLE
56303: LD_INT 0
56305: PPUSH
// begin enable ;
56306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56307: LD_ADDR_VAR 0 1
56311: PUSH
56312: LD_INT 22
56314: PUSH
56315: LD_OWVAR 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 21
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 33
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: PPUSH
56349: CALL_OW 69
56353: ST_TO_ADDR
// if not tmp then
56354: LD_VAR 0 1
56358: NOT
56359: IFFALSE 56363
// exit ;
56361: GO 56389
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56363: LD_VAR 0 1
56367: PUSH
56368: LD_INT 1
56370: PPUSH
56371: LD_VAR 0 1
56375: PPUSH
56376: CALL_OW 12
56380: ARRAY
56381: PPUSH
56382: LD_INT 1
56384: PPUSH
56385: CALL_OW 234
// end ;
56389: PPOPN 1
56391: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56392: LD_EXP 28
56396: PUSH
56397: LD_EXP 70
56401: AND
56402: IFFALSE 56543
56404: GO 56406
56406: DISABLE
56407: LD_INT 0
56409: PPUSH
56410: PPUSH
56411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56412: LD_ADDR_VAR 0 3
56416: PUSH
56417: LD_INT 22
56419: PUSH
56420: LD_OWVAR 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 25
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PPUSH
56443: CALL_OW 69
56447: ST_TO_ADDR
// if not tmp then
56448: LD_VAR 0 3
56452: NOT
56453: IFFALSE 56457
// exit ;
56455: GO 56543
// un := tmp [ rand ( 1 , tmp ) ] ;
56457: LD_ADDR_VAR 0 2
56461: PUSH
56462: LD_VAR 0 3
56466: PUSH
56467: LD_INT 1
56469: PPUSH
56470: LD_VAR 0 3
56474: PPUSH
56475: CALL_OW 12
56479: ARRAY
56480: ST_TO_ADDR
// if Crawls ( un ) then
56481: LD_VAR 0 2
56485: PPUSH
56486: CALL_OW 318
56490: IFFALSE 56501
// ComWalk ( un ) ;
56492: LD_VAR 0 2
56496: PPUSH
56497: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56501: LD_VAR 0 2
56505: PPUSH
56506: LD_INT 9
56508: PPUSH
56509: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56513: LD_INT 28
56515: PPUSH
56516: LD_OWVAR 2
56520: PPUSH
56521: LD_INT 2
56523: PPUSH
56524: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56528: LD_INT 29
56530: PPUSH
56531: LD_OWVAR 2
56535: PPUSH
56536: LD_INT 2
56538: PPUSH
56539: CALL_OW 322
// end ;
56543: PPOPN 3
56545: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56546: LD_EXP 28
56550: PUSH
56551: LD_EXP 71
56555: AND
56556: IFFALSE 56667
56558: GO 56560
56560: DISABLE
56561: LD_INT 0
56563: PPUSH
56564: PPUSH
56565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56566: LD_ADDR_VAR 0 3
56570: PUSH
56571: LD_INT 22
56573: PUSH
56574: LD_OWVAR 2
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 25
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PPUSH
56597: CALL_OW 69
56601: ST_TO_ADDR
// if not tmp then
56602: LD_VAR 0 3
56606: NOT
56607: IFFALSE 56611
// exit ;
56609: GO 56667
// un := tmp [ rand ( 1 , tmp ) ] ;
56611: LD_ADDR_VAR 0 2
56615: PUSH
56616: LD_VAR 0 3
56620: PUSH
56621: LD_INT 1
56623: PPUSH
56624: LD_VAR 0 3
56628: PPUSH
56629: CALL_OW 12
56633: ARRAY
56634: ST_TO_ADDR
// if Crawls ( un ) then
56635: LD_VAR 0 2
56639: PPUSH
56640: CALL_OW 318
56644: IFFALSE 56655
// ComWalk ( un ) ;
56646: LD_VAR 0 2
56650: PPUSH
56651: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56655: LD_VAR 0 2
56659: PPUSH
56660: LD_INT 8
56662: PPUSH
56663: CALL_OW 336
// end ;
56667: PPOPN 3
56669: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56670: LD_EXP 28
56674: PUSH
56675: LD_EXP 72
56679: AND
56680: IFFALSE 56824
56682: GO 56684
56684: DISABLE
56685: LD_INT 0
56687: PPUSH
56688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56689: LD_ADDR_VAR 0 2
56693: PUSH
56694: LD_INT 22
56696: PUSH
56697: LD_OWVAR 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 21
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 34
56721: PUSH
56722: LD_INT 12
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 34
56731: PUSH
56732: LD_INT 51
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 34
56741: PUSH
56742: LD_INT 32
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: LIST
56759: PPUSH
56760: CALL_OW 69
56764: ST_TO_ADDR
// if not tmp then
56765: LD_VAR 0 2
56769: NOT
56770: IFFALSE 56774
// exit ;
56772: GO 56824
// for i in tmp do
56774: LD_ADDR_VAR 0 1
56778: PUSH
56779: LD_VAR 0 2
56783: PUSH
56784: FOR_IN
56785: IFFALSE 56822
// if GetCargo ( i , mat_artifact ) = 0 then
56787: LD_VAR 0 1
56791: PPUSH
56792: LD_INT 4
56794: PPUSH
56795: CALL_OW 289
56799: PUSH
56800: LD_INT 0
56802: EQUAL
56803: IFFALSE 56820
// SetCargo ( i , mat_siberit , 100 ) ;
56805: LD_VAR 0 1
56809: PPUSH
56810: LD_INT 3
56812: PPUSH
56813: LD_INT 100
56815: PPUSH
56816: CALL_OW 290
56820: GO 56784
56822: POP
56823: POP
// end ;
56824: PPOPN 2
56826: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56827: LD_EXP 28
56831: PUSH
56832: LD_EXP 73
56836: AND
56837: IFFALSE 57020
56839: GO 56841
56841: DISABLE
56842: LD_INT 0
56844: PPUSH
56845: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56846: LD_ADDR_VAR 0 2
56850: PUSH
56851: LD_INT 22
56853: PUSH
56854: LD_OWVAR 2
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PPUSH
56863: CALL_OW 69
56867: ST_TO_ADDR
// if not tmp then
56868: LD_VAR 0 2
56872: NOT
56873: IFFALSE 56877
// exit ;
56875: GO 57020
// for i := 1 to 2 do
56877: LD_ADDR_VAR 0 1
56881: PUSH
56882: DOUBLE
56883: LD_INT 1
56885: DEC
56886: ST_TO_ADDR
56887: LD_INT 2
56889: PUSH
56890: FOR_TO
56891: IFFALSE 57018
// begin uc_side := your_side ;
56893: LD_ADDR_OWVAR 20
56897: PUSH
56898: LD_OWVAR 2
56902: ST_TO_ADDR
// uc_nation := nation_american ;
56903: LD_ADDR_OWVAR 21
56907: PUSH
56908: LD_INT 1
56910: ST_TO_ADDR
// vc_chassis := us_morphling ;
56911: LD_ADDR_OWVAR 37
56915: PUSH
56916: LD_INT 5
56918: ST_TO_ADDR
// vc_engine := engine_siberite ;
56919: LD_ADDR_OWVAR 39
56923: PUSH
56924: LD_INT 3
56926: ST_TO_ADDR
// vc_control := control_computer ;
56927: LD_ADDR_OWVAR 38
56931: PUSH
56932: LD_INT 3
56934: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56935: LD_ADDR_OWVAR 40
56939: PUSH
56940: LD_INT 10
56942: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56943: LD_VAR 0 2
56947: PUSH
56948: LD_INT 1
56950: ARRAY
56951: PPUSH
56952: CALL_OW 310
56956: NOT
56957: IFFALSE 57004
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56959: CALL_OW 45
56963: PPUSH
56964: LD_VAR 0 2
56968: PUSH
56969: LD_INT 1
56971: ARRAY
56972: PPUSH
56973: CALL_OW 250
56977: PPUSH
56978: LD_VAR 0 2
56982: PUSH
56983: LD_INT 1
56985: ARRAY
56986: PPUSH
56987: CALL_OW 251
56991: PPUSH
56992: LD_INT 12
56994: PPUSH
56995: LD_INT 1
56997: PPUSH
56998: CALL_OW 50
57002: GO 57016
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57004: CALL_OW 45
57008: PPUSH
57009: LD_INT 1
57011: PPUSH
57012: CALL_OW 51
// end ;
57016: GO 56890
57018: POP
57019: POP
// end ;
57020: PPOPN 2
57022: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57023: LD_EXP 28
57027: PUSH
57028: LD_EXP 74
57032: AND
57033: IFFALSE 57255
57035: GO 57037
57037: DISABLE
57038: LD_INT 0
57040: PPUSH
57041: PPUSH
57042: PPUSH
57043: PPUSH
57044: PPUSH
57045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57046: LD_ADDR_VAR 0 6
57050: PUSH
57051: LD_INT 22
57053: PUSH
57054: LD_OWVAR 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 21
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: LD_INT 23
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: PPUSH
57095: CALL_OW 69
57099: ST_TO_ADDR
// if not tmp then
57100: LD_VAR 0 6
57104: NOT
57105: IFFALSE 57109
// exit ;
57107: GO 57255
// s1 := rand ( 1 , 4 ) ;
57109: LD_ADDR_VAR 0 2
57113: PUSH
57114: LD_INT 1
57116: PPUSH
57117: LD_INT 4
57119: PPUSH
57120: CALL_OW 12
57124: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57125: LD_ADDR_VAR 0 4
57129: PUSH
57130: LD_VAR 0 6
57134: PUSH
57135: LD_INT 1
57137: ARRAY
57138: PPUSH
57139: LD_VAR 0 2
57143: PPUSH
57144: CALL_OW 259
57148: ST_TO_ADDR
// if s1 = 1 then
57149: LD_VAR 0 2
57153: PUSH
57154: LD_INT 1
57156: EQUAL
57157: IFFALSE 57177
// s2 := rand ( 2 , 4 ) else
57159: LD_ADDR_VAR 0 3
57163: PUSH
57164: LD_INT 2
57166: PPUSH
57167: LD_INT 4
57169: PPUSH
57170: CALL_OW 12
57174: ST_TO_ADDR
57175: GO 57185
// s2 := 1 ;
57177: LD_ADDR_VAR 0 3
57181: PUSH
57182: LD_INT 1
57184: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57185: LD_ADDR_VAR 0 5
57189: PUSH
57190: LD_VAR 0 6
57194: PUSH
57195: LD_INT 1
57197: ARRAY
57198: PPUSH
57199: LD_VAR 0 3
57203: PPUSH
57204: CALL_OW 259
57208: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57209: LD_VAR 0 6
57213: PUSH
57214: LD_INT 1
57216: ARRAY
57217: PPUSH
57218: LD_VAR 0 2
57222: PPUSH
57223: LD_VAR 0 5
57227: PPUSH
57228: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57232: LD_VAR 0 6
57236: PUSH
57237: LD_INT 1
57239: ARRAY
57240: PPUSH
57241: LD_VAR 0 3
57245: PPUSH
57246: LD_VAR 0 4
57250: PPUSH
57251: CALL_OW 237
// end ;
57255: PPOPN 6
57257: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57258: LD_EXP 28
57262: PUSH
57263: LD_EXP 75
57267: AND
57268: IFFALSE 57347
57270: GO 57272
57272: DISABLE
57273: LD_INT 0
57275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57276: LD_ADDR_VAR 0 1
57280: PUSH
57281: LD_INT 22
57283: PUSH
57284: LD_OWVAR 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 30
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PPUSH
57307: CALL_OW 69
57311: ST_TO_ADDR
// if not tmp then
57312: LD_VAR 0 1
57316: NOT
57317: IFFALSE 57321
// exit ;
57319: GO 57347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57321: LD_VAR 0 1
57325: PUSH
57326: LD_INT 1
57328: PPUSH
57329: LD_VAR 0 1
57333: PPUSH
57334: CALL_OW 12
57338: ARRAY
57339: PPUSH
57340: LD_INT 1
57342: PPUSH
57343: CALL_OW 234
// end ;
57347: PPOPN 1
57349: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57350: LD_EXP 28
57354: PUSH
57355: LD_EXP 76
57359: AND
57360: IFFALSE 57472
57362: GO 57364
57364: DISABLE
57365: LD_INT 0
57367: PPUSH
57368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57369: LD_ADDR_VAR 0 2
57373: PUSH
57374: LD_INT 22
57376: PUSH
57377: LD_OWVAR 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 30
57391: PUSH
57392: LD_INT 27
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 30
57401: PUSH
57402: LD_INT 26
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 30
57411: PUSH
57412: LD_INT 28
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PPUSH
57429: CALL_OW 69
57433: ST_TO_ADDR
// if not tmp then
57434: LD_VAR 0 2
57438: NOT
57439: IFFALSE 57443
// exit ;
57441: GO 57472
// for i in tmp do
57443: LD_ADDR_VAR 0 1
57447: PUSH
57448: LD_VAR 0 2
57452: PUSH
57453: FOR_IN
57454: IFFALSE 57470
// SetLives ( i , 1 ) ;
57456: LD_VAR 0 1
57460: PPUSH
57461: LD_INT 1
57463: PPUSH
57464: CALL_OW 234
57468: GO 57453
57470: POP
57471: POP
// end ;
57472: PPOPN 2
57474: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57475: LD_EXP 28
57479: PUSH
57480: LD_EXP 77
57484: AND
57485: IFFALSE 57772
57487: GO 57489
57489: DISABLE
57490: LD_INT 0
57492: PPUSH
57493: PPUSH
57494: PPUSH
// begin i := rand ( 1 , 7 ) ;
57495: LD_ADDR_VAR 0 1
57499: PUSH
57500: LD_INT 1
57502: PPUSH
57503: LD_INT 7
57505: PPUSH
57506: CALL_OW 12
57510: ST_TO_ADDR
// case i of 1 :
57511: LD_VAR 0 1
57515: PUSH
57516: LD_INT 1
57518: DOUBLE
57519: EQUAL
57520: IFTRUE 57524
57522: GO 57534
57524: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57525: LD_STRING earthquake(getX(game), 0, 32)
57527: PPUSH
57528: CALL_OW 559
57532: GO 57772
57534: LD_INT 2
57536: DOUBLE
57537: EQUAL
57538: IFTRUE 57542
57540: GO 57556
57542: POP
// begin ToLua ( displayStucuk(); ) ;
57543: LD_STRING displayStucuk();
57545: PPUSH
57546: CALL_OW 559
// ResetFog ;
57550: CALL_OW 335
// end ; 3 :
57554: GO 57772
57556: LD_INT 3
57558: DOUBLE
57559: EQUAL
57560: IFTRUE 57564
57562: GO 57668
57564: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57565: LD_ADDR_VAR 0 2
57569: PUSH
57570: LD_INT 22
57572: PUSH
57573: LD_OWVAR 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 25
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PPUSH
57596: CALL_OW 69
57600: ST_TO_ADDR
// if not tmp then
57601: LD_VAR 0 2
57605: NOT
57606: IFFALSE 57610
// exit ;
57608: GO 57772
// un := tmp [ rand ( 1 , tmp ) ] ;
57610: LD_ADDR_VAR 0 3
57614: PUSH
57615: LD_VAR 0 2
57619: PUSH
57620: LD_INT 1
57622: PPUSH
57623: LD_VAR 0 2
57627: PPUSH
57628: CALL_OW 12
57632: ARRAY
57633: ST_TO_ADDR
// if Crawls ( un ) then
57634: LD_VAR 0 3
57638: PPUSH
57639: CALL_OW 318
57643: IFFALSE 57654
// ComWalk ( un ) ;
57645: LD_VAR 0 3
57649: PPUSH
57650: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57654: LD_VAR 0 3
57658: PPUSH
57659: LD_INT 8
57661: PPUSH
57662: CALL_OW 336
// end ; 4 :
57666: GO 57772
57668: LD_INT 4
57670: DOUBLE
57671: EQUAL
57672: IFTRUE 57676
57674: GO 57750
57676: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57677: LD_ADDR_VAR 0 2
57681: PUSH
57682: LD_INT 22
57684: PUSH
57685: LD_OWVAR 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 30
57696: PUSH
57697: LD_INT 29
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PPUSH
57708: CALL_OW 69
57712: ST_TO_ADDR
// if not tmp then
57713: LD_VAR 0 2
57717: NOT
57718: IFFALSE 57722
// exit ;
57720: GO 57772
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57722: LD_VAR 0 2
57726: PUSH
57727: LD_INT 1
57729: ARRAY
57730: PPUSH
57731: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57735: LD_VAR 0 2
57739: PUSH
57740: LD_INT 1
57742: ARRAY
57743: PPUSH
57744: CALL_OW 65
// end ; 5 .. 7 :
57748: GO 57772
57750: LD_INT 5
57752: DOUBLE
57753: GREATEREQUAL
57754: IFFALSE 57762
57756: LD_INT 7
57758: DOUBLE
57759: LESSEQUAL
57760: IFTRUE 57764
57762: GO 57771
57764: POP
// StreamSibBomb ; end ;
57765: CALL 54009 0 0
57769: GO 57772
57771: POP
// end ;
57772: PPOPN 3
57774: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57775: LD_EXP 28
57779: PUSH
57780: LD_EXP 78
57784: AND
57785: IFFALSE 57941
57787: GO 57789
57789: DISABLE
57790: LD_INT 0
57792: PPUSH
57793: PPUSH
57794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57795: LD_ADDR_VAR 0 2
57799: PUSH
57800: LD_INT 81
57802: PUSH
57803: LD_OWVAR 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 21
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 21
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PPUSH
57844: CALL_OW 69
57848: ST_TO_ADDR
// if not tmp then
57849: LD_VAR 0 2
57853: NOT
57854: IFFALSE 57858
// exit ;
57856: GO 57941
// p := 0 ;
57858: LD_ADDR_VAR 0 3
57862: PUSH
57863: LD_INT 0
57865: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57866: LD_INT 35
57868: PPUSH
57869: CALL_OW 67
// p := p + 1 ;
57873: LD_ADDR_VAR 0 3
57877: PUSH
57878: LD_VAR 0 3
57882: PUSH
57883: LD_INT 1
57885: PLUS
57886: ST_TO_ADDR
// for i in tmp do
57887: LD_ADDR_VAR 0 1
57891: PUSH
57892: LD_VAR 0 2
57896: PUSH
57897: FOR_IN
57898: IFFALSE 57929
// if GetLives ( i ) < 1000 then
57900: LD_VAR 0 1
57904: PPUSH
57905: CALL_OW 256
57909: PUSH
57910: LD_INT 1000
57912: LESS
57913: IFFALSE 57927
// SetLives ( i , 1000 ) ;
57915: LD_VAR 0 1
57919: PPUSH
57920: LD_INT 1000
57922: PPUSH
57923: CALL_OW 234
57927: GO 57897
57929: POP
57930: POP
// until p > 20 ;
57931: LD_VAR 0 3
57935: PUSH
57936: LD_INT 20
57938: GREATER
57939: IFFALSE 57866
// end ;
57941: PPOPN 3
57943: END
// every 0 0$1 trigger StreamModeActive and sTime do
57944: LD_EXP 28
57948: PUSH
57949: LD_EXP 79
57953: AND
57954: IFFALSE 57989
57956: GO 57958
57958: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57959: LD_INT 28
57961: PPUSH
57962: LD_OWVAR 2
57966: PPUSH
57967: LD_INT 2
57969: PPUSH
57970: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57974: LD_INT 30
57976: PPUSH
57977: LD_OWVAR 2
57981: PPUSH
57982: LD_INT 2
57984: PPUSH
57985: CALL_OW 322
// end ;
57989: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57990: LD_EXP 28
57994: PUSH
57995: LD_EXP 80
57999: AND
58000: IFFALSE 58121
58002: GO 58004
58004: DISABLE
58005: LD_INT 0
58007: PPUSH
58008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58009: LD_ADDR_VAR 0 2
58013: PUSH
58014: LD_INT 22
58016: PUSH
58017: LD_OWVAR 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 21
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 3
58038: PUSH
58039: LD_INT 23
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: PPUSH
58058: CALL_OW 69
58062: ST_TO_ADDR
// if not tmp then
58063: LD_VAR 0 2
58067: NOT
58068: IFFALSE 58072
// exit ;
58070: GO 58121
// for i in tmp do
58072: LD_ADDR_VAR 0 1
58076: PUSH
58077: LD_VAR 0 2
58081: PUSH
58082: FOR_IN
58083: IFFALSE 58119
// begin if Crawls ( i ) then
58085: LD_VAR 0 1
58089: PPUSH
58090: CALL_OW 318
58094: IFFALSE 58105
// ComWalk ( i ) ;
58096: LD_VAR 0 1
58100: PPUSH
58101: CALL_OW 138
// SetClass ( i , 2 ) ;
58105: LD_VAR 0 1
58109: PPUSH
58110: LD_INT 2
58112: PPUSH
58113: CALL_OW 336
// end ;
58117: GO 58082
58119: POP
58120: POP
// end ;
58121: PPOPN 2
58123: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58124: LD_EXP 28
58128: PUSH
58129: LD_EXP 81
58133: AND
58134: IFFALSE 58422
58136: GO 58138
58138: DISABLE
58139: LD_INT 0
58141: PPUSH
58142: PPUSH
58143: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58144: LD_OWVAR 2
58148: PPUSH
58149: LD_INT 9
58151: PPUSH
58152: LD_INT 1
58154: PPUSH
58155: LD_INT 1
58157: PPUSH
58158: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58162: LD_INT 9
58164: PPUSH
58165: LD_OWVAR 2
58169: PPUSH
58170: CALL_OW 343
// uc_side := 9 ;
58174: LD_ADDR_OWVAR 20
58178: PUSH
58179: LD_INT 9
58181: ST_TO_ADDR
// uc_nation := 2 ;
58182: LD_ADDR_OWVAR 21
58186: PUSH
58187: LD_INT 2
58189: ST_TO_ADDR
// hc_name := Dark Warrior ;
58190: LD_ADDR_OWVAR 26
58194: PUSH
58195: LD_STRING Dark Warrior
58197: ST_TO_ADDR
// hc_gallery :=  ;
58198: LD_ADDR_OWVAR 33
58202: PUSH
58203: LD_STRING 
58205: ST_TO_ADDR
// hc_noskilllimit := true ;
58206: LD_ADDR_OWVAR 76
58210: PUSH
58211: LD_INT 1
58213: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58214: LD_ADDR_OWVAR 31
58218: PUSH
58219: LD_INT 30
58221: PUSH
58222: LD_INT 30
58224: PUSH
58225: LD_INT 30
58227: PUSH
58228: LD_INT 30
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// un := CreateHuman ;
58237: LD_ADDR_VAR 0 3
58241: PUSH
58242: CALL_OW 44
58246: ST_TO_ADDR
// hc_noskilllimit := false ;
58247: LD_ADDR_OWVAR 76
58251: PUSH
58252: LD_INT 0
58254: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58255: LD_VAR 0 3
58259: PPUSH
58260: LD_INT 1
58262: PPUSH
58263: CALL_OW 51
// ToLua ( playRanger() ) ;
58267: LD_STRING playRanger()
58269: PPUSH
58270: CALL_OW 559
// p := 0 ;
58274: LD_ADDR_VAR 0 2
58278: PUSH
58279: LD_INT 0
58281: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58282: LD_INT 35
58284: PPUSH
58285: CALL_OW 67
// p := p + 1 ;
58289: LD_ADDR_VAR 0 2
58293: PUSH
58294: LD_VAR 0 2
58298: PUSH
58299: LD_INT 1
58301: PLUS
58302: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58303: LD_VAR 0 3
58307: PPUSH
58308: CALL_OW 256
58312: PUSH
58313: LD_INT 1000
58315: LESS
58316: IFFALSE 58330
// SetLives ( un , 1000 ) ;
58318: LD_VAR 0 3
58322: PPUSH
58323: LD_INT 1000
58325: PPUSH
58326: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58330: LD_VAR 0 3
58334: PPUSH
58335: LD_INT 81
58337: PUSH
58338: LD_OWVAR 2
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 91
58349: PUSH
58350: LD_VAR 0 3
58354: PUSH
58355: LD_INT 30
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PPUSH
58367: CALL_OW 69
58371: PPUSH
58372: LD_VAR 0 3
58376: PPUSH
58377: CALL_OW 74
58381: PPUSH
58382: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58386: LD_VAR 0 2
58390: PUSH
58391: LD_INT 80
58393: GREATER
58394: PUSH
58395: LD_VAR 0 3
58399: PPUSH
58400: CALL_OW 301
58404: OR
58405: IFFALSE 58282
// if un then
58407: LD_VAR 0 3
58411: IFFALSE 58422
// RemoveUnit ( un ) ;
58413: LD_VAR 0 3
58417: PPUSH
58418: CALL_OW 64
// end ;
58422: PPOPN 3
58424: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58425: LD_EXP 82
58429: IFFALSE 58545
58431: GO 58433
58433: DISABLE
58434: LD_INT 0
58436: PPUSH
58437: PPUSH
58438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58439: LD_ADDR_VAR 0 2
58443: PUSH
58444: LD_INT 81
58446: PUSH
58447: LD_OWVAR 2
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 21
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PPUSH
58470: CALL_OW 69
58474: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58475: LD_STRING playComputer()
58477: PPUSH
58478: CALL_OW 559
// if not tmp then
58482: LD_VAR 0 2
58486: NOT
58487: IFFALSE 58491
// exit ;
58489: GO 58545
// for i in tmp do
58491: LD_ADDR_VAR 0 1
58495: PUSH
58496: LD_VAR 0 2
58500: PUSH
58501: FOR_IN
58502: IFFALSE 58543
// for j := 1 to 4 do
58504: LD_ADDR_VAR 0 3
58508: PUSH
58509: DOUBLE
58510: LD_INT 1
58512: DEC
58513: ST_TO_ADDR
58514: LD_INT 4
58516: PUSH
58517: FOR_TO
58518: IFFALSE 58539
// SetSkill ( i , j , 10 ) ;
58520: LD_VAR 0 1
58524: PPUSH
58525: LD_VAR 0 3
58529: PPUSH
58530: LD_INT 10
58532: PPUSH
58533: CALL_OW 237
58537: GO 58517
58539: POP
58540: POP
58541: GO 58501
58543: POP
58544: POP
// end ;
58545: PPOPN 3
58547: END
// every 0 0$1 trigger s30 do var i , tmp ;
58548: LD_EXP 83
58552: IFFALSE 58621
58554: GO 58556
58556: DISABLE
58557: LD_INT 0
58559: PPUSH
58560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58561: LD_ADDR_VAR 0 2
58565: PUSH
58566: LD_INT 22
58568: PUSH
58569: LD_OWVAR 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PPUSH
58578: CALL_OW 69
58582: ST_TO_ADDR
// if not tmp then
58583: LD_VAR 0 2
58587: NOT
58588: IFFALSE 58592
// exit ;
58590: GO 58621
// for i in tmp do
58592: LD_ADDR_VAR 0 1
58596: PUSH
58597: LD_VAR 0 2
58601: PUSH
58602: FOR_IN
58603: IFFALSE 58619
// SetLives ( i , 300 ) ;
58605: LD_VAR 0 1
58609: PPUSH
58610: LD_INT 300
58612: PPUSH
58613: CALL_OW 234
58617: GO 58602
58619: POP
58620: POP
// end ;
58621: PPOPN 2
58623: END
// every 0 0$1 trigger s60 do var i , tmp ;
58624: LD_EXP 84
58628: IFFALSE 58697
58630: GO 58632
58632: DISABLE
58633: LD_INT 0
58635: PPUSH
58636: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58637: LD_ADDR_VAR 0 2
58641: PUSH
58642: LD_INT 22
58644: PUSH
58645: LD_OWVAR 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PPUSH
58654: CALL_OW 69
58658: ST_TO_ADDR
// if not tmp then
58659: LD_VAR 0 2
58663: NOT
58664: IFFALSE 58668
// exit ;
58666: GO 58697
// for i in tmp do
58668: LD_ADDR_VAR 0 1
58672: PUSH
58673: LD_VAR 0 2
58677: PUSH
58678: FOR_IN
58679: IFFALSE 58695
// SetLives ( i , 600 ) ;
58681: LD_VAR 0 1
58685: PPUSH
58686: LD_INT 600
58688: PPUSH
58689: CALL_OW 234
58693: GO 58678
58695: POP
58696: POP
// end ;
58697: PPOPN 2
58699: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58700: LD_INT 0
58702: PPUSH
// case cmd of 301 :
58703: LD_VAR 0 1
58707: PUSH
58708: LD_INT 301
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58716
58714: GO 58748
58716: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58717: LD_VAR 0 6
58721: PPUSH
58722: LD_VAR 0 7
58726: PPUSH
58727: LD_VAR 0 8
58731: PPUSH
58732: LD_VAR 0 4
58736: PPUSH
58737: LD_VAR 0 5
58741: PPUSH
58742: CALL 59949 0 5
58746: GO 58869
58748: LD_INT 302
58750: DOUBLE
58751: EQUAL
58752: IFTRUE 58756
58754: GO 58793
58756: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58757: LD_VAR 0 6
58761: PPUSH
58762: LD_VAR 0 7
58766: PPUSH
58767: LD_VAR 0 8
58771: PPUSH
58772: LD_VAR 0 9
58776: PPUSH
58777: LD_VAR 0 4
58781: PPUSH
58782: LD_VAR 0 5
58786: PPUSH
58787: CALL 60040 0 6
58791: GO 58869
58793: LD_INT 303
58795: DOUBLE
58796: EQUAL
58797: IFTRUE 58801
58799: GO 58838
58801: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58802: LD_VAR 0 6
58806: PPUSH
58807: LD_VAR 0 7
58811: PPUSH
58812: LD_VAR 0 8
58816: PPUSH
58817: LD_VAR 0 9
58821: PPUSH
58822: LD_VAR 0 4
58826: PPUSH
58827: LD_VAR 0 5
58831: PPUSH
58832: CALL 58874 0 6
58836: GO 58869
58838: LD_INT 304
58840: DOUBLE
58841: EQUAL
58842: IFTRUE 58846
58844: GO 58868
58846: POP
// hHackTeleport ( unit , x , y ) ; end ;
58847: LD_VAR 0 2
58851: PPUSH
58852: LD_VAR 0 4
58856: PPUSH
58857: LD_VAR 0 5
58861: PPUSH
58862: CALL 60633 0 3
58866: GO 58869
58868: POP
// end ;
58869: LD_VAR 0 12
58873: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58874: LD_INT 0
58876: PPUSH
58877: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58878: LD_VAR 0 1
58882: PUSH
58883: LD_INT 1
58885: LESS
58886: PUSH
58887: LD_VAR 0 1
58891: PUSH
58892: LD_INT 3
58894: GREATER
58895: OR
58896: PUSH
58897: LD_VAR 0 5
58901: PPUSH
58902: LD_VAR 0 6
58906: PPUSH
58907: CALL_OW 428
58911: OR
58912: IFFALSE 58916
// exit ;
58914: GO 59636
// uc_side := your_side ;
58916: LD_ADDR_OWVAR 20
58920: PUSH
58921: LD_OWVAR 2
58925: ST_TO_ADDR
// uc_nation := nation ;
58926: LD_ADDR_OWVAR 21
58930: PUSH
58931: LD_VAR 0 1
58935: ST_TO_ADDR
// bc_level = 1 ;
58936: LD_ADDR_OWVAR 43
58940: PUSH
58941: LD_INT 1
58943: ST_TO_ADDR
// case btype of 1 :
58944: LD_VAR 0 2
58948: PUSH
58949: LD_INT 1
58951: DOUBLE
58952: EQUAL
58953: IFTRUE 58957
58955: GO 58968
58957: POP
// bc_type := b_depot ; 2 :
58958: LD_ADDR_OWVAR 42
58962: PUSH
58963: LD_INT 0
58965: ST_TO_ADDR
58966: GO 59580
58968: LD_INT 2
58970: DOUBLE
58971: EQUAL
58972: IFTRUE 58976
58974: GO 58987
58976: POP
// bc_type := b_warehouse ; 3 :
58977: LD_ADDR_OWVAR 42
58981: PUSH
58982: LD_INT 1
58984: ST_TO_ADDR
58985: GO 59580
58987: LD_INT 3
58989: DOUBLE
58990: EQUAL
58991: IFTRUE 58995
58993: GO 59006
58995: POP
// bc_type := b_lab ; 4 .. 9 :
58996: LD_ADDR_OWVAR 42
59000: PUSH
59001: LD_INT 6
59003: ST_TO_ADDR
59004: GO 59580
59006: LD_INT 4
59008: DOUBLE
59009: GREATEREQUAL
59010: IFFALSE 59018
59012: LD_INT 9
59014: DOUBLE
59015: LESSEQUAL
59016: IFTRUE 59020
59018: GO 59072
59020: POP
// begin bc_type := b_lab_half ;
59021: LD_ADDR_OWVAR 42
59025: PUSH
59026: LD_INT 7
59028: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59029: LD_ADDR_OWVAR 44
59033: PUSH
59034: LD_INT 10
59036: PUSH
59037: LD_INT 11
59039: PUSH
59040: LD_INT 12
59042: PUSH
59043: LD_INT 15
59045: PUSH
59046: LD_INT 14
59048: PUSH
59049: LD_INT 13
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: LD_VAR 0 2
59064: PUSH
59065: LD_INT 3
59067: MINUS
59068: ARRAY
59069: ST_TO_ADDR
// end ; 10 .. 13 :
59070: GO 59580
59072: LD_INT 10
59074: DOUBLE
59075: GREATEREQUAL
59076: IFFALSE 59084
59078: LD_INT 13
59080: DOUBLE
59081: LESSEQUAL
59082: IFTRUE 59086
59084: GO 59163
59086: POP
// begin bc_type := b_lab_full ;
59087: LD_ADDR_OWVAR 42
59091: PUSH
59092: LD_INT 8
59094: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59095: LD_ADDR_OWVAR 44
59099: PUSH
59100: LD_INT 10
59102: PUSH
59103: LD_INT 12
59105: PUSH
59106: LD_INT 14
59108: PUSH
59109: LD_INT 13
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: PUSH
59118: LD_VAR 0 2
59122: PUSH
59123: LD_INT 9
59125: MINUS
59126: ARRAY
59127: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59128: LD_ADDR_OWVAR 45
59132: PUSH
59133: LD_INT 11
59135: PUSH
59136: LD_INT 15
59138: PUSH
59139: LD_INT 12
59141: PUSH
59142: LD_INT 15
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: PUSH
59151: LD_VAR 0 2
59155: PUSH
59156: LD_INT 9
59158: MINUS
59159: ARRAY
59160: ST_TO_ADDR
// end ; 14 :
59161: GO 59580
59163: LD_INT 14
59165: DOUBLE
59166: EQUAL
59167: IFTRUE 59171
59169: GO 59182
59171: POP
// bc_type := b_workshop ; 15 :
59172: LD_ADDR_OWVAR 42
59176: PUSH
59177: LD_INT 2
59179: ST_TO_ADDR
59180: GO 59580
59182: LD_INT 15
59184: DOUBLE
59185: EQUAL
59186: IFTRUE 59190
59188: GO 59201
59190: POP
// bc_type := b_factory ; 16 :
59191: LD_ADDR_OWVAR 42
59195: PUSH
59196: LD_INT 3
59198: ST_TO_ADDR
59199: GO 59580
59201: LD_INT 16
59203: DOUBLE
59204: EQUAL
59205: IFTRUE 59209
59207: GO 59220
59209: POP
// bc_type := b_ext_gun ; 17 :
59210: LD_ADDR_OWVAR 42
59214: PUSH
59215: LD_INT 17
59217: ST_TO_ADDR
59218: GO 59580
59220: LD_INT 17
59222: DOUBLE
59223: EQUAL
59224: IFTRUE 59228
59226: GO 59256
59228: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59229: LD_ADDR_OWVAR 42
59233: PUSH
59234: LD_INT 19
59236: PUSH
59237: LD_INT 23
59239: PUSH
59240: LD_INT 19
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: LD_VAR 0 1
59252: ARRAY
59253: ST_TO_ADDR
59254: GO 59580
59256: LD_INT 18
59258: DOUBLE
59259: EQUAL
59260: IFTRUE 59264
59262: GO 59275
59264: POP
// bc_type := b_ext_radar ; 19 :
59265: LD_ADDR_OWVAR 42
59269: PUSH
59270: LD_INT 20
59272: ST_TO_ADDR
59273: GO 59580
59275: LD_INT 19
59277: DOUBLE
59278: EQUAL
59279: IFTRUE 59283
59281: GO 59294
59283: POP
// bc_type := b_ext_radio ; 20 :
59284: LD_ADDR_OWVAR 42
59288: PUSH
59289: LD_INT 22
59291: ST_TO_ADDR
59292: GO 59580
59294: LD_INT 20
59296: DOUBLE
59297: EQUAL
59298: IFTRUE 59302
59300: GO 59313
59302: POP
// bc_type := b_ext_siberium ; 21 :
59303: LD_ADDR_OWVAR 42
59307: PUSH
59308: LD_INT 21
59310: ST_TO_ADDR
59311: GO 59580
59313: LD_INT 21
59315: DOUBLE
59316: EQUAL
59317: IFTRUE 59321
59319: GO 59332
59321: POP
// bc_type := b_ext_computer ; 22 :
59322: LD_ADDR_OWVAR 42
59326: PUSH
59327: LD_INT 24
59329: ST_TO_ADDR
59330: GO 59580
59332: LD_INT 22
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59340
59338: GO 59351
59340: POP
// bc_type := b_ext_track ; 23 :
59341: LD_ADDR_OWVAR 42
59345: PUSH
59346: LD_INT 16
59348: ST_TO_ADDR
59349: GO 59580
59351: LD_INT 23
59353: DOUBLE
59354: EQUAL
59355: IFTRUE 59359
59357: GO 59370
59359: POP
// bc_type := b_ext_laser ; 24 :
59360: LD_ADDR_OWVAR 42
59364: PUSH
59365: LD_INT 25
59367: ST_TO_ADDR
59368: GO 59580
59370: LD_INT 24
59372: DOUBLE
59373: EQUAL
59374: IFTRUE 59378
59376: GO 59389
59378: POP
// bc_type := b_control_tower ; 25 :
59379: LD_ADDR_OWVAR 42
59383: PUSH
59384: LD_INT 36
59386: ST_TO_ADDR
59387: GO 59580
59389: LD_INT 25
59391: DOUBLE
59392: EQUAL
59393: IFTRUE 59397
59395: GO 59408
59397: POP
// bc_type := b_breastwork ; 26 :
59398: LD_ADDR_OWVAR 42
59402: PUSH
59403: LD_INT 31
59405: ST_TO_ADDR
59406: GO 59580
59408: LD_INT 26
59410: DOUBLE
59411: EQUAL
59412: IFTRUE 59416
59414: GO 59427
59416: POP
// bc_type := b_bunker ; 27 :
59417: LD_ADDR_OWVAR 42
59421: PUSH
59422: LD_INT 32
59424: ST_TO_ADDR
59425: GO 59580
59427: LD_INT 27
59429: DOUBLE
59430: EQUAL
59431: IFTRUE 59435
59433: GO 59446
59435: POP
// bc_type := b_turret ; 28 :
59436: LD_ADDR_OWVAR 42
59440: PUSH
59441: LD_INT 33
59443: ST_TO_ADDR
59444: GO 59580
59446: LD_INT 28
59448: DOUBLE
59449: EQUAL
59450: IFTRUE 59454
59452: GO 59465
59454: POP
// bc_type := b_armoury ; 29 :
59455: LD_ADDR_OWVAR 42
59459: PUSH
59460: LD_INT 4
59462: ST_TO_ADDR
59463: GO 59580
59465: LD_INT 29
59467: DOUBLE
59468: EQUAL
59469: IFTRUE 59473
59471: GO 59484
59473: POP
// bc_type := b_barracks ; 30 :
59474: LD_ADDR_OWVAR 42
59478: PUSH
59479: LD_INT 5
59481: ST_TO_ADDR
59482: GO 59580
59484: LD_INT 30
59486: DOUBLE
59487: EQUAL
59488: IFTRUE 59492
59490: GO 59503
59492: POP
// bc_type := b_solar_power ; 31 :
59493: LD_ADDR_OWVAR 42
59497: PUSH
59498: LD_INT 27
59500: ST_TO_ADDR
59501: GO 59580
59503: LD_INT 31
59505: DOUBLE
59506: EQUAL
59507: IFTRUE 59511
59509: GO 59522
59511: POP
// bc_type := b_oil_power ; 32 :
59512: LD_ADDR_OWVAR 42
59516: PUSH
59517: LD_INT 26
59519: ST_TO_ADDR
59520: GO 59580
59522: LD_INT 32
59524: DOUBLE
59525: EQUAL
59526: IFTRUE 59530
59528: GO 59541
59530: POP
// bc_type := b_siberite_power ; 33 :
59531: LD_ADDR_OWVAR 42
59535: PUSH
59536: LD_INT 28
59538: ST_TO_ADDR
59539: GO 59580
59541: LD_INT 33
59543: DOUBLE
59544: EQUAL
59545: IFTRUE 59549
59547: GO 59560
59549: POP
// bc_type := b_oil_mine ; 34 :
59550: LD_ADDR_OWVAR 42
59554: PUSH
59555: LD_INT 29
59557: ST_TO_ADDR
59558: GO 59580
59560: LD_INT 34
59562: DOUBLE
59563: EQUAL
59564: IFTRUE 59568
59566: GO 59579
59568: POP
// bc_type := b_siberite_mine ; end ;
59569: LD_ADDR_OWVAR 42
59573: PUSH
59574: LD_INT 30
59576: ST_TO_ADDR
59577: GO 59580
59579: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59580: LD_ADDR_VAR 0 8
59584: PUSH
59585: LD_VAR 0 5
59589: PPUSH
59590: LD_VAR 0 6
59594: PPUSH
59595: LD_VAR 0 3
59599: PPUSH
59600: CALL_OW 47
59604: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59605: LD_OWVAR 42
59609: PUSH
59610: LD_INT 32
59612: PUSH
59613: LD_INT 33
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: IN
59620: IFFALSE 59636
// PlaceWeaponTurret ( b , weapon ) ;
59622: LD_VAR 0 8
59626: PPUSH
59627: LD_VAR 0 4
59631: PPUSH
59632: CALL_OW 431
// end ;
59636: LD_VAR 0 7
59640: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59641: LD_INT 0
59643: PPUSH
59644: PPUSH
59645: PPUSH
59646: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59647: LD_ADDR_VAR 0 4
59651: PUSH
59652: LD_INT 22
59654: PUSH
59655: LD_OWVAR 2
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 30
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 30
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PPUSH
59696: CALL_OW 69
59700: ST_TO_ADDR
// if not tmp then
59701: LD_VAR 0 4
59705: NOT
59706: IFFALSE 59710
// exit ;
59708: GO 59769
// for i in tmp do
59710: LD_ADDR_VAR 0 2
59714: PUSH
59715: LD_VAR 0 4
59719: PUSH
59720: FOR_IN
59721: IFFALSE 59767
// for j = 1 to 3 do
59723: LD_ADDR_VAR 0 3
59727: PUSH
59728: DOUBLE
59729: LD_INT 1
59731: DEC
59732: ST_TO_ADDR
59733: LD_INT 3
59735: PUSH
59736: FOR_TO
59737: IFFALSE 59763
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59739: LD_VAR 0 2
59743: PPUSH
59744: CALL_OW 274
59748: PPUSH
59749: LD_VAR 0 3
59753: PPUSH
59754: LD_INT 99999
59756: PPUSH
59757: CALL_OW 277
59761: GO 59736
59763: POP
59764: POP
59765: GO 59720
59767: POP
59768: POP
// end ;
59769: LD_VAR 0 1
59773: RET
// export function hHackSetLevel10 ; var i , j ; begin
59774: LD_INT 0
59776: PPUSH
59777: PPUSH
59778: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59779: LD_ADDR_VAR 0 2
59783: PUSH
59784: LD_INT 21
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PPUSH
59794: CALL_OW 69
59798: PUSH
59799: FOR_IN
59800: IFFALSE 59852
// if IsSelected ( i ) then
59802: LD_VAR 0 2
59806: PPUSH
59807: CALL_OW 306
59811: IFFALSE 59850
// begin for j := 1 to 4 do
59813: LD_ADDR_VAR 0 3
59817: PUSH
59818: DOUBLE
59819: LD_INT 1
59821: DEC
59822: ST_TO_ADDR
59823: LD_INT 4
59825: PUSH
59826: FOR_TO
59827: IFFALSE 59848
// SetSkill ( i , j , 10 ) ;
59829: LD_VAR 0 2
59833: PPUSH
59834: LD_VAR 0 3
59838: PPUSH
59839: LD_INT 10
59841: PPUSH
59842: CALL_OW 237
59846: GO 59826
59848: POP
59849: POP
// end ;
59850: GO 59799
59852: POP
59853: POP
// end ;
59854: LD_VAR 0 1
59858: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59859: LD_INT 0
59861: PPUSH
59862: PPUSH
59863: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59864: LD_ADDR_VAR 0 2
59868: PUSH
59869: LD_INT 22
59871: PUSH
59872: LD_OWVAR 2
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 21
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PPUSH
59895: CALL_OW 69
59899: PUSH
59900: FOR_IN
59901: IFFALSE 59942
// begin for j := 1 to 4 do
59903: LD_ADDR_VAR 0 3
59907: PUSH
59908: DOUBLE
59909: LD_INT 1
59911: DEC
59912: ST_TO_ADDR
59913: LD_INT 4
59915: PUSH
59916: FOR_TO
59917: IFFALSE 59938
// SetSkill ( i , j , 10 ) ;
59919: LD_VAR 0 2
59923: PPUSH
59924: LD_VAR 0 3
59928: PPUSH
59929: LD_INT 10
59931: PPUSH
59932: CALL_OW 237
59936: GO 59916
59938: POP
59939: POP
// end ;
59940: GO 59900
59942: POP
59943: POP
// end ;
59944: LD_VAR 0 1
59948: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59949: LD_INT 0
59951: PPUSH
// uc_side := your_side ;
59952: LD_ADDR_OWVAR 20
59956: PUSH
59957: LD_OWVAR 2
59961: ST_TO_ADDR
// uc_nation := nation ;
59962: LD_ADDR_OWVAR 21
59966: PUSH
59967: LD_VAR 0 1
59971: ST_TO_ADDR
// InitHc ;
59972: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59976: LD_INT 0
59978: PPUSH
59979: LD_VAR 0 2
59983: PPUSH
59984: LD_VAR 0 3
59988: PPUSH
59989: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59993: LD_VAR 0 4
59997: PPUSH
59998: LD_VAR 0 5
60002: PPUSH
60003: CALL_OW 428
60007: PUSH
60008: LD_INT 0
60010: EQUAL
60011: IFFALSE 60035
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60013: CALL_OW 44
60017: PPUSH
60018: LD_VAR 0 4
60022: PPUSH
60023: LD_VAR 0 5
60027: PPUSH
60028: LD_INT 1
60030: PPUSH
60031: CALL_OW 48
// end ;
60035: LD_VAR 0 6
60039: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60040: LD_INT 0
60042: PPUSH
60043: PPUSH
// uc_side := your_side ;
60044: LD_ADDR_OWVAR 20
60048: PUSH
60049: LD_OWVAR 2
60053: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60054: LD_VAR 0 1
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 4
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: IN
60081: IFFALSE 60093
// uc_nation := nation_american else
60083: LD_ADDR_OWVAR 21
60087: PUSH
60088: LD_INT 1
60090: ST_TO_ADDR
60091: GO 60136
// if chassis in [ 11 , 12 , 13 , 14 ] then
60093: LD_VAR 0 1
60097: PUSH
60098: LD_INT 11
60100: PUSH
60101: LD_INT 12
60103: PUSH
60104: LD_INT 13
60106: PUSH
60107: LD_INT 14
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: IN
60116: IFFALSE 60128
// uc_nation := nation_arabian else
60118: LD_ADDR_OWVAR 21
60122: PUSH
60123: LD_INT 2
60125: ST_TO_ADDR
60126: GO 60136
// uc_nation := nation_russian ;
60128: LD_ADDR_OWVAR 21
60132: PUSH
60133: LD_INT 3
60135: ST_TO_ADDR
// vc_chassis := chassis ;
60136: LD_ADDR_OWVAR 37
60140: PUSH
60141: LD_VAR 0 1
60145: ST_TO_ADDR
// vc_engine := engine ;
60146: LD_ADDR_OWVAR 39
60150: PUSH
60151: LD_VAR 0 2
60155: ST_TO_ADDR
// vc_control := control ;
60156: LD_ADDR_OWVAR 38
60160: PUSH
60161: LD_VAR 0 3
60165: ST_TO_ADDR
// vc_weapon := weapon ;
60166: LD_ADDR_OWVAR 40
60170: PUSH
60171: LD_VAR 0 4
60175: ST_TO_ADDR
// un := CreateVehicle ;
60176: LD_ADDR_VAR 0 8
60180: PUSH
60181: CALL_OW 45
60185: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60186: LD_VAR 0 8
60190: PPUSH
60191: LD_INT 0
60193: PPUSH
60194: LD_INT 5
60196: PPUSH
60197: CALL_OW 12
60201: PPUSH
60202: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60206: LD_VAR 0 8
60210: PPUSH
60211: LD_VAR 0 5
60215: PPUSH
60216: LD_VAR 0 6
60220: PPUSH
60221: LD_INT 1
60223: PPUSH
60224: CALL_OW 48
// end ;
60228: LD_VAR 0 7
60232: RET
// export hInvincible ; every 1 do
60233: GO 60235
60235: DISABLE
// hInvincible := [ ] ;
60236: LD_ADDR_EXP 85
60240: PUSH
60241: EMPTY
60242: ST_TO_ADDR
60243: END
// every 10 do var i ;
60244: GO 60246
60246: DISABLE
60247: LD_INT 0
60249: PPUSH
// begin enable ;
60250: ENABLE
// if not hInvincible then
60251: LD_EXP 85
60255: NOT
60256: IFFALSE 60260
// exit ;
60258: GO 60304
// for i in hInvincible do
60260: LD_ADDR_VAR 0 1
60264: PUSH
60265: LD_EXP 85
60269: PUSH
60270: FOR_IN
60271: IFFALSE 60302
// if GetLives ( i ) < 1000 then
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL_OW 256
60282: PUSH
60283: LD_INT 1000
60285: LESS
60286: IFFALSE 60300
// SetLives ( i , 1000 ) ;
60288: LD_VAR 0 1
60292: PPUSH
60293: LD_INT 1000
60295: PPUSH
60296: CALL_OW 234
60300: GO 60270
60302: POP
60303: POP
// end ;
60304: PPOPN 1
60306: END
// export function hHackInvincible ; var i ; begin
60307: LD_INT 0
60309: PPUSH
60310: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60311: LD_ADDR_VAR 0 2
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 21
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 21
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: PPUSH
60344: CALL_OW 69
60348: PUSH
60349: FOR_IN
60350: IFFALSE 60411
// if IsSelected ( i ) then
60352: LD_VAR 0 2
60356: PPUSH
60357: CALL_OW 306
60361: IFFALSE 60409
// begin if i in hInvincible then
60363: LD_VAR 0 2
60367: PUSH
60368: LD_EXP 85
60372: IN
60373: IFFALSE 60393
// hInvincible := hInvincible diff i else
60375: LD_ADDR_EXP 85
60379: PUSH
60380: LD_EXP 85
60384: PUSH
60385: LD_VAR 0 2
60389: DIFF
60390: ST_TO_ADDR
60391: GO 60409
// hInvincible := hInvincible union i ;
60393: LD_ADDR_EXP 85
60397: PUSH
60398: LD_EXP 85
60402: PUSH
60403: LD_VAR 0 2
60407: UNION
60408: ST_TO_ADDR
// end ;
60409: GO 60349
60411: POP
60412: POP
// end ;
60413: LD_VAR 0 1
60417: RET
// export function hHackInvisible ; var i , j ; begin
60418: LD_INT 0
60420: PPUSH
60421: PPUSH
60422: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60423: LD_ADDR_VAR 0 2
60427: PUSH
60428: LD_INT 21
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PPUSH
60438: CALL_OW 69
60442: PUSH
60443: FOR_IN
60444: IFFALSE 60468
// if IsSelected ( i ) then
60446: LD_VAR 0 2
60450: PPUSH
60451: CALL_OW 306
60455: IFFALSE 60466
// ComForceInvisible ( i ) ;
60457: LD_VAR 0 2
60461: PPUSH
60462: CALL_OW 496
60466: GO 60443
60468: POP
60469: POP
// end ;
60470: LD_VAR 0 1
60474: RET
// export function hHackChangeYourSide ; begin
60475: LD_INT 0
60477: PPUSH
// if your_side = 8 then
60478: LD_OWVAR 2
60482: PUSH
60483: LD_INT 8
60485: EQUAL
60486: IFFALSE 60498
// your_side := 0 else
60488: LD_ADDR_OWVAR 2
60492: PUSH
60493: LD_INT 0
60495: ST_TO_ADDR
60496: GO 60512
// your_side := your_side + 1 ;
60498: LD_ADDR_OWVAR 2
60502: PUSH
60503: LD_OWVAR 2
60507: PUSH
60508: LD_INT 1
60510: PLUS
60511: ST_TO_ADDR
// end ;
60512: LD_VAR 0 1
60516: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60517: LD_INT 0
60519: PPUSH
60520: PPUSH
60521: PPUSH
// for i in all_units do
60522: LD_ADDR_VAR 0 2
60526: PUSH
60527: LD_OWVAR 3
60531: PUSH
60532: FOR_IN
60533: IFFALSE 60611
// if IsSelected ( i ) then
60535: LD_VAR 0 2
60539: PPUSH
60540: CALL_OW 306
60544: IFFALSE 60609
// begin j := GetSide ( i ) ;
60546: LD_ADDR_VAR 0 3
60550: PUSH
60551: LD_VAR 0 2
60555: PPUSH
60556: CALL_OW 255
60560: ST_TO_ADDR
// if j = 8 then
60561: LD_VAR 0 3
60565: PUSH
60566: LD_INT 8
60568: EQUAL
60569: IFFALSE 60581
// j := 0 else
60571: LD_ADDR_VAR 0 3
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
60579: GO 60595
// j := j + 1 ;
60581: LD_ADDR_VAR 0 3
60585: PUSH
60586: LD_VAR 0 3
60590: PUSH
60591: LD_INT 1
60593: PLUS
60594: ST_TO_ADDR
// SetSide ( i , j ) ;
60595: LD_VAR 0 2
60599: PPUSH
60600: LD_VAR 0 3
60604: PPUSH
60605: CALL_OW 235
// end ;
60609: GO 60532
60611: POP
60612: POP
// end ;
60613: LD_VAR 0 1
60617: RET
// export function hHackFog ; begin
60618: LD_INT 0
60620: PPUSH
// FogOff ( true ) ;
60621: LD_INT 1
60623: PPUSH
60624: CALL_OW 344
// end ;
60628: LD_VAR 0 1
60632: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60633: LD_INT 0
60635: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60636: LD_VAR 0 1
60640: PPUSH
60641: LD_VAR 0 2
60645: PPUSH
60646: LD_VAR 0 3
60650: PPUSH
60651: LD_INT 1
60653: PPUSH
60654: LD_INT 1
60656: PPUSH
60657: CALL_OW 483
// CenterOnXY ( x , y ) ;
60661: LD_VAR 0 2
60665: PPUSH
60666: LD_VAR 0 3
60670: PPUSH
60671: CALL_OW 84
// end ;
60675: LD_VAR 0 4
60679: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60680: LD_INT 0
60682: PPUSH
60683: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60684: LD_VAR 0 1
60688: NOT
60689: PUSH
60690: LD_VAR 0 2
60694: PPUSH
60695: LD_VAR 0 3
60699: PPUSH
60700: CALL_OW 488
60704: NOT
60705: OR
60706: PUSH
60707: LD_VAR 0 1
60711: PPUSH
60712: CALL_OW 266
60716: PUSH
60717: LD_INT 3
60719: NONEQUAL
60720: PUSH
60721: LD_VAR 0 1
60725: PPUSH
60726: CALL_OW 247
60730: PUSH
60731: LD_INT 1
60733: EQUAL
60734: NOT
60735: AND
60736: OR
60737: IFFALSE 60741
// exit ;
60739: GO 60890
// if GetType ( factory ) = unit_human then
60741: LD_VAR 0 1
60745: PPUSH
60746: CALL_OW 247
60750: PUSH
60751: LD_INT 1
60753: EQUAL
60754: IFFALSE 60771
// factory := IsInUnit ( factory ) ;
60756: LD_ADDR_VAR 0 1
60760: PUSH
60761: LD_VAR 0 1
60765: PPUSH
60766: CALL_OW 310
60770: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL_OW 266
60780: PUSH
60781: LD_INT 3
60783: NONEQUAL
60784: IFFALSE 60788
// exit ;
60786: GO 60890
// if HexInfo ( x , y ) = factory then
60788: LD_VAR 0 2
60792: PPUSH
60793: LD_VAR 0 3
60797: PPUSH
60798: CALL_OW 428
60802: PUSH
60803: LD_VAR 0 1
60807: EQUAL
60808: IFFALSE 60835
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60810: LD_ADDR_EXP 86
60814: PUSH
60815: LD_EXP 86
60819: PPUSH
60820: LD_VAR 0 1
60824: PPUSH
60825: LD_INT 0
60827: PPUSH
60828: CALL_OW 1
60832: ST_TO_ADDR
60833: GO 60886
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60835: LD_ADDR_EXP 86
60839: PUSH
60840: LD_EXP 86
60844: PPUSH
60845: LD_VAR 0 1
60849: PPUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 255
60859: PUSH
60860: LD_VAR 0 1
60864: PUSH
60865: LD_VAR 0 2
60869: PUSH
60870: LD_VAR 0 3
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: PPUSH
60881: CALL_OW 1
60885: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60886: CALL 60895 0 0
// end ;
60890: LD_VAR 0 4
60894: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60895: LD_INT 0
60897: PPUSH
60898: PPUSH
60899: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60900: LD_STRING resetFactoryWaypoint();
60902: PPUSH
60903: CALL_OW 559
// if factoryWaypoints then
60907: LD_EXP 86
60911: IFFALSE 61037
// begin list := PrepareArray ( factoryWaypoints ) ;
60913: LD_ADDR_VAR 0 3
60917: PUSH
60918: LD_EXP 86
60922: PPUSH
60923: CALL 45894 0 1
60927: ST_TO_ADDR
// for i := 1 to list do
60928: LD_ADDR_VAR 0 2
60932: PUSH
60933: DOUBLE
60934: LD_INT 1
60936: DEC
60937: ST_TO_ADDR
60938: LD_VAR 0 3
60942: PUSH
60943: FOR_TO
60944: IFFALSE 61035
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60946: LD_STRING setFactoryWaypointXY(
60948: PUSH
60949: LD_VAR 0 3
60953: PUSH
60954: LD_VAR 0 2
60958: ARRAY
60959: PUSH
60960: LD_INT 1
60962: ARRAY
60963: STR
60964: PUSH
60965: LD_STRING ,
60967: STR
60968: PUSH
60969: LD_VAR 0 3
60973: PUSH
60974: LD_VAR 0 2
60978: ARRAY
60979: PUSH
60980: LD_INT 2
60982: ARRAY
60983: STR
60984: PUSH
60985: LD_STRING ,
60987: STR
60988: PUSH
60989: LD_VAR 0 3
60993: PUSH
60994: LD_VAR 0 2
60998: ARRAY
60999: PUSH
61000: LD_INT 3
61002: ARRAY
61003: STR
61004: PUSH
61005: LD_STRING ,
61007: STR
61008: PUSH
61009: LD_VAR 0 3
61013: PUSH
61014: LD_VAR 0 2
61018: ARRAY
61019: PUSH
61020: LD_INT 4
61022: ARRAY
61023: STR
61024: PUSH
61025: LD_STRING )
61027: STR
61028: PPUSH
61029: CALL_OW 559
61033: GO 60943
61035: POP
61036: POP
// end ; end ;
61037: LD_VAR 0 1
61041: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61042: LD_INT 0
61044: PPUSH
// if HexInfo ( x , y ) = warehouse then
61045: LD_VAR 0 2
61049: PPUSH
61050: LD_VAR 0 3
61054: PPUSH
61055: CALL_OW 428
61059: PUSH
61060: LD_VAR 0 1
61064: EQUAL
61065: IFFALSE 61092
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61067: LD_ADDR_EXP 87
61071: PUSH
61072: LD_EXP 87
61076: PPUSH
61077: LD_VAR 0 1
61081: PPUSH
61082: LD_INT 0
61084: PPUSH
61085: CALL_OW 1
61089: ST_TO_ADDR
61090: GO 61143
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61092: LD_ADDR_EXP 87
61096: PUSH
61097: LD_EXP 87
61101: PPUSH
61102: LD_VAR 0 1
61106: PPUSH
61107: LD_VAR 0 1
61111: PPUSH
61112: CALL_OW 255
61116: PUSH
61117: LD_VAR 0 1
61121: PUSH
61122: LD_VAR 0 2
61126: PUSH
61127: LD_VAR 0 3
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: PPUSH
61138: CALL_OW 1
61142: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61143: CALL 61152 0 0
// end ;
61147: LD_VAR 0 4
61151: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61152: LD_INT 0
61154: PPUSH
61155: PPUSH
61156: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61157: LD_STRING resetWarehouseGatheringPoints();
61159: PPUSH
61160: CALL_OW 559
// if warehouseGatheringPoints then
61164: LD_EXP 87
61168: IFFALSE 61294
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61170: LD_ADDR_VAR 0 3
61174: PUSH
61175: LD_EXP 87
61179: PPUSH
61180: CALL 45894 0 1
61184: ST_TO_ADDR
// for i := 1 to list do
61185: LD_ADDR_VAR 0 2
61189: PUSH
61190: DOUBLE
61191: LD_INT 1
61193: DEC
61194: ST_TO_ADDR
61195: LD_VAR 0 3
61199: PUSH
61200: FOR_TO
61201: IFFALSE 61292
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61203: LD_STRING setWarehouseGatheringPointXY(
61205: PUSH
61206: LD_VAR 0 3
61210: PUSH
61211: LD_VAR 0 2
61215: ARRAY
61216: PUSH
61217: LD_INT 1
61219: ARRAY
61220: STR
61221: PUSH
61222: LD_STRING ,
61224: STR
61225: PUSH
61226: LD_VAR 0 3
61230: PUSH
61231: LD_VAR 0 2
61235: ARRAY
61236: PUSH
61237: LD_INT 2
61239: ARRAY
61240: STR
61241: PUSH
61242: LD_STRING ,
61244: STR
61245: PUSH
61246: LD_VAR 0 3
61250: PUSH
61251: LD_VAR 0 2
61255: ARRAY
61256: PUSH
61257: LD_INT 3
61259: ARRAY
61260: STR
61261: PUSH
61262: LD_STRING ,
61264: STR
61265: PUSH
61266: LD_VAR 0 3
61270: PUSH
61271: LD_VAR 0 2
61275: ARRAY
61276: PUSH
61277: LD_INT 4
61279: ARRAY
61280: STR
61281: PUSH
61282: LD_STRING )
61284: STR
61285: PPUSH
61286: CALL_OW 559
61290: GO 61200
61292: POP
61293: POP
// end ; end ;
61294: LD_VAR 0 1
61298: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61299: LD_EXP 87
61303: IFFALSE 61988
61305: GO 61307
61307: DISABLE
61308: LD_INT 0
61310: PPUSH
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
61315: PPUSH
61316: PPUSH
61317: PPUSH
61318: PPUSH
// begin enable ;
61319: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61320: LD_ADDR_VAR 0 3
61324: PUSH
61325: LD_EXP 87
61329: PPUSH
61330: CALL 45894 0 1
61334: ST_TO_ADDR
// if not list then
61335: LD_VAR 0 3
61339: NOT
61340: IFFALSE 61344
// exit ;
61342: GO 61988
// for i := 1 to list do
61344: LD_ADDR_VAR 0 1
61348: PUSH
61349: DOUBLE
61350: LD_INT 1
61352: DEC
61353: ST_TO_ADDR
61354: LD_VAR 0 3
61358: PUSH
61359: FOR_TO
61360: IFFALSE 61986
// begin depot := list [ i ] [ 2 ] ;
61362: LD_ADDR_VAR 0 8
61366: PUSH
61367: LD_VAR 0 3
61371: PUSH
61372: LD_VAR 0 1
61376: ARRAY
61377: PUSH
61378: LD_INT 2
61380: ARRAY
61381: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61382: LD_ADDR_VAR 0 5
61386: PUSH
61387: LD_VAR 0 3
61391: PUSH
61392: LD_VAR 0 1
61396: ARRAY
61397: PUSH
61398: LD_INT 1
61400: ARRAY
61401: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61402: LD_VAR 0 8
61406: PPUSH
61407: CALL_OW 301
61411: PUSH
61412: LD_VAR 0 5
61416: PUSH
61417: LD_VAR 0 8
61421: PPUSH
61422: CALL_OW 255
61426: NONEQUAL
61427: OR
61428: IFFALSE 61457
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61430: LD_ADDR_EXP 87
61434: PUSH
61435: LD_EXP 87
61439: PPUSH
61440: LD_VAR 0 8
61444: PPUSH
61445: LD_INT 0
61447: PPUSH
61448: CALL_OW 1
61452: ST_TO_ADDR
// exit ;
61453: POP
61454: POP
61455: GO 61988
// end ; x := list [ i ] [ 3 ] ;
61457: LD_ADDR_VAR 0 6
61461: PUSH
61462: LD_VAR 0 3
61466: PUSH
61467: LD_VAR 0 1
61471: ARRAY
61472: PUSH
61473: LD_INT 3
61475: ARRAY
61476: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61477: LD_ADDR_VAR 0 7
61481: PUSH
61482: LD_VAR 0 3
61486: PUSH
61487: LD_VAR 0 1
61491: ARRAY
61492: PUSH
61493: LD_INT 4
61495: ARRAY
61496: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61497: LD_ADDR_VAR 0 9
61501: PUSH
61502: LD_VAR 0 6
61506: PPUSH
61507: LD_VAR 0 7
61511: PPUSH
61512: LD_INT 16
61514: PPUSH
61515: CALL 44482 0 3
61519: ST_TO_ADDR
// if not cratesNearbyPoint then
61520: LD_VAR 0 9
61524: NOT
61525: IFFALSE 61531
// exit ;
61527: POP
61528: POP
61529: GO 61988
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
61531: LD_ADDR_VAR 0 4
61535: PUSH
61536: LD_INT 22
61538: PUSH
61539: LD_VAR 0 5
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: PUSH
61551: LD_INT 60
61553: PUSH
61554: EMPTY
61555: LIST
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 91
61563: PUSH
61564: LD_VAR 0 8
61568: PUSH
61569: LD_INT 6
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 25
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 25
61592: PUSH
61593: LD_INT 16
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: PPUSH
61611: CALL_OW 69
61615: PUSH
61616: LD_VAR 0 8
61620: PPUSH
61621: CALL_OW 313
61625: PPUSH
61626: LD_INT 3
61628: PUSH
61629: LD_INT 60
61631: PUSH
61632: EMPTY
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 25
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 25
61654: PUSH
61655: LD_INT 16
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PPUSH
61671: CALL_OW 72
61675: UNION
61676: ST_TO_ADDR
// if tmp then
61677: LD_VAR 0 4
61681: IFFALSE 61761
// begin tmp := ShrinkArray ( tmp , 3 ) ;
61683: LD_ADDR_VAR 0 4
61687: PUSH
61688: LD_VAR 0 4
61692: PPUSH
61693: LD_INT 3
61695: PPUSH
61696: CALL 42451 0 2
61700: ST_TO_ADDR
// for j in tmp do
61701: LD_ADDR_VAR 0 2
61705: PUSH
61706: LD_VAR 0 4
61710: PUSH
61711: FOR_IN
61712: IFFALSE 61755
// begin if IsInUnit ( j ) then
61714: LD_VAR 0 2
61718: PPUSH
61719: CALL_OW 310
61723: IFFALSE 61734
// ComExit ( j ) ;
61725: LD_VAR 0 2
61729: PPUSH
61730: CALL 42534 0 1
// AddComCollect ( j , x , y ) ;
61734: LD_VAR 0 2
61738: PPUSH
61739: LD_VAR 0 6
61743: PPUSH
61744: LD_VAR 0 7
61748: PPUSH
61749: CALL_OW 177
// end ;
61753: GO 61711
61755: POP
61756: POP
// exit ;
61757: POP
61758: POP
61759: GO 61988
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61761: LD_ADDR_VAR 0 4
61765: PUSH
61766: LD_INT 22
61768: PUSH
61769: LD_VAR 0 5
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 91
61780: PUSH
61781: LD_VAR 0 8
61785: PUSH
61786: LD_INT 8
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 34
61799: PUSH
61800: LD_INT 12
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 34
61809: PUSH
61810: LD_INT 51
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 34
61819: PUSH
61820: LD_INT 32
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 34
61829: PUSH
61830: LD_INT 89
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: PPUSH
61849: CALL_OW 69
61853: ST_TO_ADDR
// if tmp then
61854: LD_VAR 0 4
61858: IFFALSE 61984
// begin for j in tmp do
61860: LD_ADDR_VAR 0 2
61864: PUSH
61865: LD_VAR 0 4
61869: PUSH
61870: FOR_IN
61871: IFFALSE 61982
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61873: LD_VAR 0 2
61877: PPUSH
61878: CALL_OW 262
61882: PUSH
61883: LD_INT 3
61885: EQUAL
61886: PUSH
61887: LD_VAR 0 2
61891: PPUSH
61892: CALL_OW 261
61896: PUSH
61897: LD_INT 20
61899: GREATER
61900: OR
61901: PUSH
61902: LD_VAR 0 2
61906: PPUSH
61907: CALL_OW 314
61911: NOT
61912: AND
61913: PUSH
61914: LD_VAR 0 2
61918: PPUSH
61919: CALL_OW 263
61923: PUSH
61924: LD_INT 1
61926: NONEQUAL
61927: PUSH
61928: LD_VAR 0 2
61932: PPUSH
61933: CALL_OW 311
61937: OR
61938: AND
61939: IFFALSE 61980
// begin ComCollect ( j , x , y ) ;
61941: LD_VAR 0 2
61945: PPUSH
61946: LD_VAR 0 6
61950: PPUSH
61951: LD_VAR 0 7
61955: PPUSH
61956: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
61960: LD_VAR 0 2
61964: PPUSH
61965: LD_VAR 0 8
61969: PPUSH
61970: CALL_OW 172
// exit ;
61974: POP
61975: POP
61976: POP
61977: POP
61978: GO 61988
// end ;
61980: GO 61870
61982: POP
61983: POP
// end ; end ;
61984: GO 61359
61986: POP
61987: POP
// end ; end_of_file
61988: PPOPN 9
61990: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61991: LD_VAR 0 1
61995: PUSH
61996: LD_INT 200
61998: DOUBLE
61999: GREATEREQUAL
62000: IFFALSE 62008
62002: LD_INT 299
62004: DOUBLE
62005: LESSEQUAL
62006: IFTRUE 62010
62008: GO 62042
62010: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62011: LD_VAR 0 1
62015: PPUSH
62016: LD_VAR 0 2
62020: PPUSH
62021: LD_VAR 0 3
62025: PPUSH
62026: LD_VAR 0 4
62030: PPUSH
62031: LD_VAR 0 5
62035: PPUSH
62036: CALL 62530 0 5
62040: GO 62119
62042: LD_INT 300
62044: DOUBLE
62045: GREATEREQUAL
62046: IFFALSE 62054
62048: LD_INT 399
62050: DOUBLE
62051: LESSEQUAL
62052: IFTRUE 62056
62054: GO 62118
62056: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_VAR 0 2
62066: PPUSH
62067: LD_VAR 0 3
62071: PPUSH
62072: LD_VAR 0 4
62076: PPUSH
62077: LD_VAR 0 5
62081: PPUSH
62082: LD_VAR 0 6
62086: PPUSH
62087: LD_VAR 0 7
62091: PPUSH
62092: LD_VAR 0 8
62096: PPUSH
62097: LD_VAR 0 9
62101: PPUSH
62102: LD_VAR 0 10
62106: PPUSH
62107: LD_VAR 0 11
62111: PPUSH
62112: CALL 58700 0 11
62116: GO 62119
62118: POP
// end ;
62119: PPOPN 11
62121: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62122: LD_VAR 0 1
62126: PPUSH
62127: LD_VAR 0 2
62131: PPUSH
62132: LD_VAR 0 3
62136: PPUSH
62137: LD_VAR 0 4
62141: PPUSH
62142: LD_VAR 0 5
62146: PPUSH
62147: CALL 62266 0 5
// end ; end_of_file
62151: PPOPN 5
62153: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62154: LD_INT 0
62156: PPUSH
62157: PPUSH
62158: PPUSH
62159: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62160: LD_VAR 0 1
62164: PPUSH
62165: CALL_OW 264
62169: PUSH
62170: LD_INT 91
62172: EQUAL
62173: IFFALSE 62245
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62175: LD_INT 68
62177: PPUSH
62178: LD_VAR 0 1
62182: PPUSH
62183: CALL_OW 255
62187: PPUSH
62188: CALL_OW 321
62192: PUSH
62193: LD_INT 2
62195: EQUAL
62196: IFFALSE 62208
// eff := 70 else
62198: LD_ADDR_VAR 0 4
62202: PUSH
62203: LD_INT 70
62205: ST_TO_ADDR
62206: GO 62216
// eff := 30 ;
62208: LD_ADDR_VAR 0 4
62212: PUSH
62213: LD_INT 30
62215: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62216: LD_VAR 0 1
62220: PPUSH
62221: CALL_OW 250
62225: PPUSH
62226: LD_VAR 0 1
62230: PPUSH
62231: CALL_OW 251
62235: PPUSH
62236: LD_VAR 0 4
62240: PPUSH
62241: CALL_OW 495
// end ; end ;
62245: LD_VAR 0 2
62249: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62250: LD_INT 0
62252: PPUSH
// end ;
62253: LD_VAR 0 4
62257: RET
// export function SOS_Command ( cmd ) ; begin
62258: LD_INT 0
62260: PPUSH
// end ;
62261: LD_VAR 0 2
62265: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62266: LD_INT 0
62268: PPUSH
// end ;
62269: LD_VAR 0 6
62273: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62274: LD_INT 0
62276: PPUSH
62277: PPUSH
// if not vehicle or not factory then
62278: LD_VAR 0 1
62282: NOT
62283: PUSH
62284: LD_VAR 0 2
62288: NOT
62289: OR
62290: IFFALSE 62294
// exit ;
62292: GO 62525
// if factoryWaypoints >= factory then
62294: LD_EXP 86
62298: PUSH
62299: LD_VAR 0 2
62303: GREATEREQUAL
62304: IFFALSE 62525
// if factoryWaypoints [ factory ] then
62306: LD_EXP 86
62310: PUSH
62311: LD_VAR 0 2
62315: ARRAY
62316: IFFALSE 62525
// begin if GetControl ( vehicle ) = control_manual then
62318: LD_VAR 0 1
62322: PPUSH
62323: CALL_OW 263
62327: PUSH
62328: LD_INT 1
62330: EQUAL
62331: IFFALSE 62412
// begin driver := IsDrivenBy ( vehicle ) ;
62333: LD_ADDR_VAR 0 4
62337: PUSH
62338: LD_VAR 0 1
62342: PPUSH
62343: CALL_OW 311
62347: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62348: LD_VAR 0 4
62352: PPUSH
62353: LD_EXP 86
62357: PUSH
62358: LD_VAR 0 2
62362: ARRAY
62363: PUSH
62364: LD_INT 3
62366: ARRAY
62367: PPUSH
62368: LD_EXP 86
62372: PUSH
62373: LD_VAR 0 2
62377: ARRAY
62378: PUSH
62379: LD_INT 4
62381: ARRAY
62382: PPUSH
62383: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62387: LD_VAR 0 4
62391: PPUSH
62392: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62396: LD_VAR 0 4
62400: PPUSH
62401: LD_VAR 0 2
62405: PPUSH
62406: CALL_OW 180
// end else
62410: GO 62525
// if GetControl ( vehicle ) = control_remote then
62412: LD_VAR 0 1
62416: PPUSH
62417: CALL_OW 263
62421: PUSH
62422: LD_INT 2
62424: EQUAL
62425: IFFALSE 62486
// begin wait ( 0 0$2 ) ;
62427: LD_INT 70
62429: PPUSH
62430: CALL_OW 67
// if Connect ( vehicle ) then
62434: LD_VAR 0 1
62438: PPUSH
62439: CALL 12775 0 1
62443: IFFALSE 62484
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62445: LD_VAR 0 1
62449: PPUSH
62450: LD_EXP 86
62454: PUSH
62455: LD_VAR 0 2
62459: ARRAY
62460: PUSH
62461: LD_INT 3
62463: ARRAY
62464: PPUSH
62465: LD_EXP 86
62469: PUSH
62470: LD_VAR 0 2
62474: ARRAY
62475: PUSH
62476: LD_INT 4
62478: ARRAY
62479: PPUSH
62480: CALL_OW 171
// end else
62484: GO 62525
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62486: LD_VAR 0 1
62490: PPUSH
62491: LD_EXP 86
62495: PUSH
62496: LD_VAR 0 2
62500: ARRAY
62501: PUSH
62502: LD_INT 3
62504: ARRAY
62505: PPUSH
62506: LD_EXP 86
62510: PUSH
62511: LD_VAR 0 2
62515: ARRAY
62516: PUSH
62517: LD_INT 4
62519: ARRAY
62520: PPUSH
62521: CALL_OW 171
// end ; end ;
62525: LD_VAR 0 3
62529: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62530: LD_INT 0
62532: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62533: LD_VAR 0 1
62537: PUSH
62538: LD_INT 250
62540: EQUAL
62541: PUSH
62542: LD_VAR 0 2
62546: PPUSH
62547: CALL_OW 264
62551: PUSH
62552: LD_INT 81
62554: EQUAL
62555: AND
62556: IFFALSE 62577
// MinerPlaceMine ( unit , x , y ) ;
62558: LD_VAR 0 2
62562: PPUSH
62563: LD_VAR 0 4
62567: PPUSH
62568: LD_VAR 0 5
62572: PPUSH
62573: CALL 64962 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62577: LD_VAR 0 1
62581: PUSH
62582: LD_INT 251
62584: EQUAL
62585: PUSH
62586: LD_VAR 0 2
62590: PPUSH
62591: CALL_OW 264
62595: PUSH
62596: LD_INT 81
62598: EQUAL
62599: AND
62600: IFFALSE 62621
// MinerDetonateMine ( unit , x , y ) ;
62602: LD_VAR 0 2
62606: PPUSH
62607: LD_VAR 0 4
62611: PPUSH
62612: LD_VAR 0 5
62616: PPUSH
62617: CALL 65237 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62621: LD_VAR 0 1
62625: PUSH
62626: LD_INT 252
62628: EQUAL
62629: PUSH
62630: LD_VAR 0 2
62634: PPUSH
62635: CALL_OW 264
62639: PUSH
62640: LD_INT 81
62642: EQUAL
62643: AND
62644: IFFALSE 62665
// MinerCreateMinefield ( unit , x , y ) ;
62646: LD_VAR 0 2
62650: PPUSH
62651: LD_VAR 0 4
62655: PPUSH
62656: LD_VAR 0 5
62660: PPUSH
62661: CALL 65654 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62665: LD_VAR 0 1
62669: PUSH
62670: LD_INT 253
62672: EQUAL
62673: PUSH
62674: LD_VAR 0 2
62678: PPUSH
62679: CALL_OW 257
62683: PUSH
62684: LD_INT 5
62686: EQUAL
62687: AND
62688: IFFALSE 62709
// ComBinocular ( unit , x , y ) ;
62690: LD_VAR 0 2
62694: PPUSH
62695: LD_VAR 0 4
62699: PPUSH
62700: LD_VAR 0 5
62704: PPUSH
62705: CALL 66023 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62709: LD_VAR 0 1
62713: PUSH
62714: LD_INT 254
62716: EQUAL
62717: PUSH
62718: LD_VAR 0 2
62722: PPUSH
62723: CALL_OW 264
62727: PUSH
62728: LD_INT 99
62730: EQUAL
62731: AND
62732: PUSH
62733: LD_VAR 0 3
62737: PPUSH
62738: CALL_OW 263
62742: PUSH
62743: LD_INT 3
62745: EQUAL
62746: AND
62747: IFFALSE 62763
// HackDestroyVehicle ( unit , selectedUnit ) ;
62749: LD_VAR 0 2
62753: PPUSH
62754: LD_VAR 0 3
62758: PPUSH
62759: CALL 64326 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62763: LD_VAR 0 1
62767: PUSH
62768: LD_INT 255
62770: EQUAL
62771: PUSH
62772: LD_VAR 0 2
62776: PPUSH
62777: CALL_OW 264
62781: PUSH
62782: LD_INT 14
62784: PUSH
62785: LD_INT 53
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: IN
62792: AND
62793: PUSH
62794: LD_VAR 0 4
62798: PPUSH
62799: LD_VAR 0 5
62803: PPUSH
62804: CALL_OW 488
62808: AND
62809: IFFALSE 62833
// CutTreeXYR ( unit , x , y , 12 ) ;
62811: LD_VAR 0 2
62815: PPUSH
62816: LD_VAR 0 4
62820: PPUSH
62821: LD_VAR 0 5
62825: PPUSH
62826: LD_INT 12
62828: PPUSH
62829: CALL 62896 0 4
// if cmd = 256 then
62833: LD_VAR 0 1
62837: PUSH
62838: LD_INT 256
62840: EQUAL
62841: IFFALSE 62862
// SetFactoryWaypoint ( unit , x , y ) ;
62843: LD_VAR 0 2
62847: PPUSH
62848: LD_VAR 0 4
62852: PPUSH
62853: LD_VAR 0 5
62857: PPUSH
62858: CALL 60680 0 3
// if cmd = 257 then
62862: LD_VAR 0 1
62866: PUSH
62867: LD_INT 257
62869: EQUAL
62870: IFFALSE 62891
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62872: LD_VAR 0 2
62876: PPUSH
62877: LD_VAR 0 4
62881: PPUSH
62882: LD_VAR 0 5
62886: PPUSH
62887: CALL 61042 0 3
// end ;
62891: LD_VAR 0 6
62895: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62896: LD_INT 0
62898: PPUSH
62899: PPUSH
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
62904: PPUSH
62905: PPUSH
62906: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62907: LD_VAR 0 1
62911: NOT
62912: PUSH
62913: LD_VAR 0 2
62917: PPUSH
62918: LD_VAR 0 3
62922: PPUSH
62923: CALL_OW 488
62927: NOT
62928: OR
62929: PUSH
62930: LD_VAR 0 4
62934: NOT
62935: OR
62936: IFFALSE 62940
// exit ;
62938: GO 63280
// list := [ ] ;
62940: LD_ADDR_VAR 0 13
62944: PUSH
62945: EMPTY
62946: ST_TO_ADDR
// if x - r < 0 then
62947: LD_VAR 0 2
62951: PUSH
62952: LD_VAR 0 4
62956: MINUS
62957: PUSH
62958: LD_INT 0
62960: LESS
62961: IFFALSE 62973
// min_x := 0 else
62963: LD_ADDR_VAR 0 7
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
62971: GO 62989
// min_x := x - r ;
62973: LD_ADDR_VAR 0 7
62977: PUSH
62978: LD_VAR 0 2
62982: PUSH
62983: LD_VAR 0 4
62987: MINUS
62988: ST_TO_ADDR
// if y - r < 0 then
62989: LD_VAR 0 3
62993: PUSH
62994: LD_VAR 0 4
62998: MINUS
62999: PUSH
63000: LD_INT 0
63002: LESS
63003: IFFALSE 63015
// min_y := 0 else
63005: LD_ADDR_VAR 0 8
63009: PUSH
63010: LD_INT 0
63012: ST_TO_ADDR
63013: GO 63031
// min_y := y - r ;
63015: LD_ADDR_VAR 0 8
63019: PUSH
63020: LD_VAR 0 3
63024: PUSH
63025: LD_VAR 0 4
63029: MINUS
63030: ST_TO_ADDR
// max_x := x + r ;
63031: LD_ADDR_VAR 0 9
63035: PUSH
63036: LD_VAR 0 2
63040: PUSH
63041: LD_VAR 0 4
63045: PLUS
63046: ST_TO_ADDR
// max_y := y + r ;
63047: LD_ADDR_VAR 0 10
63051: PUSH
63052: LD_VAR 0 3
63056: PUSH
63057: LD_VAR 0 4
63061: PLUS
63062: ST_TO_ADDR
// for _x = min_x to max_x do
63063: LD_ADDR_VAR 0 11
63067: PUSH
63068: DOUBLE
63069: LD_VAR 0 7
63073: DEC
63074: ST_TO_ADDR
63075: LD_VAR 0 9
63079: PUSH
63080: FOR_TO
63081: IFFALSE 63198
// for _y = min_y to max_y do
63083: LD_ADDR_VAR 0 12
63087: PUSH
63088: DOUBLE
63089: LD_VAR 0 8
63093: DEC
63094: ST_TO_ADDR
63095: LD_VAR 0 10
63099: PUSH
63100: FOR_TO
63101: IFFALSE 63194
// begin if not ValidHex ( _x , _y ) then
63103: LD_VAR 0 11
63107: PPUSH
63108: LD_VAR 0 12
63112: PPUSH
63113: CALL_OW 488
63117: NOT
63118: IFFALSE 63122
// continue ;
63120: GO 63100
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63122: LD_VAR 0 11
63126: PPUSH
63127: LD_VAR 0 12
63131: PPUSH
63132: CALL_OW 351
63136: PUSH
63137: LD_VAR 0 11
63141: PPUSH
63142: LD_VAR 0 12
63146: PPUSH
63147: CALL_OW 554
63151: AND
63152: IFFALSE 63192
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63154: LD_ADDR_VAR 0 13
63158: PUSH
63159: LD_VAR 0 13
63163: PPUSH
63164: LD_VAR 0 13
63168: PUSH
63169: LD_INT 1
63171: PLUS
63172: PPUSH
63173: LD_VAR 0 11
63177: PUSH
63178: LD_VAR 0 12
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PPUSH
63187: CALL_OW 2
63191: ST_TO_ADDR
// end ;
63192: GO 63100
63194: POP
63195: POP
63196: GO 63080
63198: POP
63199: POP
// if not list then
63200: LD_VAR 0 13
63204: NOT
63205: IFFALSE 63209
// exit ;
63207: GO 63280
// for i in list do
63209: LD_ADDR_VAR 0 6
63213: PUSH
63214: LD_VAR 0 13
63218: PUSH
63219: FOR_IN
63220: IFFALSE 63278
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63222: LD_VAR 0 1
63226: PPUSH
63227: LD_STRING M
63229: PUSH
63230: LD_VAR 0 6
63234: PUSH
63235: LD_INT 1
63237: ARRAY
63238: PUSH
63239: LD_VAR 0 6
63243: PUSH
63244: LD_INT 2
63246: ARRAY
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: PPUSH
63272: CALL_OW 447
63276: GO 63219
63278: POP
63279: POP
// end ;
63280: LD_VAR 0 5
63284: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63285: LD_EXP 89
63289: NOT
63290: IFFALSE 63340
63292: GO 63294
63294: DISABLE
// begin initHack := true ;
63295: LD_ADDR_EXP 89
63299: PUSH
63300: LD_INT 1
63302: ST_TO_ADDR
// hackTanks := [ ] ;
63303: LD_ADDR_EXP 90
63307: PUSH
63308: EMPTY
63309: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63310: LD_ADDR_EXP 91
63314: PUSH
63315: EMPTY
63316: ST_TO_ADDR
// hackLimit := 3 ;
63317: LD_ADDR_EXP 92
63321: PUSH
63322: LD_INT 3
63324: ST_TO_ADDR
// hackDist := 12 ;
63325: LD_ADDR_EXP 93
63329: PUSH
63330: LD_INT 12
63332: ST_TO_ADDR
// hackCounter := [ ] ;
63333: LD_ADDR_EXP 94
63337: PUSH
63338: EMPTY
63339: ST_TO_ADDR
// end ;
63340: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63341: LD_EXP 89
63345: PUSH
63346: LD_INT 34
63348: PUSH
63349: LD_INT 99
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PPUSH
63356: CALL_OW 69
63360: AND
63361: IFFALSE 63614
63363: GO 63365
63365: DISABLE
63366: LD_INT 0
63368: PPUSH
63369: PPUSH
// begin enable ;
63370: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63371: LD_ADDR_VAR 0 1
63375: PUSH
63376: LD_INT 34
63378: PUSH
63379: LD_INT 99
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PPUSH
63386: CALL_OW 69
63390: PUSH
63391: FOR_IN
63392: IFFALSE 63612
// begin if not i in hackTanks then
63394: LD_VAR 0 1
63398: PUSH
63399: LD_EXP 90
63403: IN
63404: NOT
63405: IFFALSE 63488
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63407: LD_ADDR_EXP 90
63411: PUSH
63412: LD_EXP 90
63416: PPUSH
63417: LD_EXP 90
63421: PUSH
63422: LD_INT 1
63424: PLUS
63425: PPUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 1
63435: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63436: LD_ADDR_EXP 91
63440: PUSH
63441: LD_EXP 91
63445: PPUSH
63446: LD_EXP 91
63450: PUSH
63451: LD_INT 1
63453: PLUS
63454: PPUSH
63455: EMPTY
63456: PPUSH
63457: CALL_OW 1
63461: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63462: LD_ADDR_EXP 94
63466: PUSH
63467: LD_EXP 94
63471: PPUSH
63472: LD_EXP 94
63476: PUSH
63477: LD_INT 1
63479: PLUS
63480: PPUSH
63481: EMPTY
63482: PPUSH
63483: CALL_OW 1
63487: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63488: LD_VAR 0 1
63492: PPUSH
63493: CALL_OW 302
63497: NOT
63498: IFFALSE 63511
// begin HackUnlinkAll ( i ) ;
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL 63617 0 1
// continue ;
63509: GO 63391
// end ; HackCheckCapturedStatus ( i ) ;
63511: LD_VAR 0 1
63515: PPUSH
63516: CALL 64060 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63520: LD_ADDR_VAR 0 2
63524: PUSH
63525: LD_INT 81
63527: PUSH
63528: LD_VAR 0 1
63532: PPUSH
63533: CALL_OW 255
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 33
63544: PUSH
63545: LD_INT 3
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 91
63554: PUSH
63555: LD_VAR 0 1
63559: PUSH
63560: LD_EXP 93
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 50
63572: PUSH
63573: EMPTY
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: PPUSH
63582: CALL_OW 69
63586: ST_TO_ADDR
// if not tmp then
63587: LD_VAR 0 2
63591: NOT
63592: IFFALSE 63596
// continue ;
63594: GO 63391
// HackLink ( i , tmp ) ;
63596: LD_VAR 0 1
63600: PPUSH
63601: LD_VAR 0 2
63605: PPUSH
63606: CALL 63753 0 2
// end ;
63610: GO 63391
63612: POP
63613: POP
// end ;
63614: PPOPN 2
63616: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63617: LD_INT 0
63619: PPUSH
63620: PPUSH
63621: PPUSH
// if not hack in hackTanks then
63622: LD_VAR 0 1
63626: PUSH
63627: LD_EXP 90
63631: IN
63632: NOT
63633: IFFALSE 63637
// exit ;
63635: GO 63748
// index := GetElementIndex ( hackTanks , hack ) ;
63637: LD_ADDR_VAR 0 4
63641: PUSH
63642: LD_EXP 90
63646: PPUSH
63647: LD_VAR 0 1
63651: PPUSH
63652: CALL 9591 0 2
63656: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63657: LD_EXP 91
63661: PUSH
63662: LD_VAR 0 4
63666: ARRAY
63667: IFFALSE 63748
// begin for i in hackTanksCaptured [ index ] do
63669: LD_ADDR_VAR 0 3
63673: PUSH
63674: LD_EXP 91
63678: PUSH
63679: LD_VAR 0 4
63683: ARRAY
63684: PUSH
63685: FOR_IN
63686: IFFALSE 63712
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63688: LD_VAR 0 3
63692: PUSH
63693: LD_INT 1
63695: ARRAY
63696: PPUSH
63697: LD_VAR 0 3
63701: PUSH
63702: LD_INT 2
63704: ARRAY
63705: PPUSH
63706: CALL_OW 235
63710: GO 63685
63712: POP
63713: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63714: LD_ADDR_EXP 91
63718: PUSH
63719: LD_EXP 91
63723: PPUSH
63724: LD_VAR 0 4
63728: PPUSH
63729: EMPTY
63730: PPUSH
63731: CALL_OW 1
63735: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63736: LD_VAR 0 1
63740: PPUSH
63741: LD_INT 0
63743: PPUSH
63744: CALL_OW 505
// end ; end ;
63748: LD_VAR 0 2
63752: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63753: LD_INT 0
63755: PPUSH
63756: PPUSH
63757: PPUSH
// if not hack in hackTanks or not vehicles then
63758: LD_VAR 0 1
63762: PUSH
63763: LD_EXP 90
63767: IN
63768: NOT
63769: PUSH
63770: LD_VAR 0 2
63774: NOT
63775: OR
63776: IFFALSE 63780
// exit ;
63778: GO 64055
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63780: LD_ADDR_VAR 0 2
63784: PUSH
63785: LD_VAR 0 1
63789: PPUSH
63790: LD_VAR 0 2
63794: PPUSH
63795: LD_INT 1
63797: PPUSH
63798: LD_INT 1
63800: PPUSH
63801: CALL 10241 0 4
63805: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63806: LD_ADDR_VAR 0 5
63810: PUSH
63811: LD_EXP 90
63815: PPUSH
63816: LD_VAR 0 1
63820: PPUSH
63821: CALL 9591 0 2
63825: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63826: LD_EXP 91
63830: PUSH
63831: LD_VAR 0 5
63835: ARRAY
63836: PUSH
63837: LD_EXP 92
63841: LESS
63842: IFFALSE 64031
// begin for i := 1 to vehicles do
63844: LD_ADDR_VAR 0 4
63848: PUSH
63849: DOUBLE
63850: LD_INT 1
63852: DEC
63853: ST_TO_ADDR
63854: LD_VAR 0 2
63858: PUSH
63859: FOR_TO
63860: IFFALSE 64029
// begin if hackTanksCaptured [ index ] = hackLimit then
63862: LD_EXP 91
63866: PUSH
63867: LD_VAR 0 5
63871: ARRAY
63872: PUSH
63873: LD_EXP 92
63877: EQUAL
63878: IFFALSE 63882
// break ;
63880: GO 64029
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63882: LD_ADDR_EXP 94
63886: PUSH
63887: LD_EXP 94
63891: PPUSH
63892: LD_VAR 0 5
63896: PPUSH
63897: LD_EXP 94
63901: PUSH
63902: LD_VAR 0 5
63906: ARRAY
63907: PUSH
63908: LD_INT 1
63910: PLUS
63911: PPUSH
63912: CALL_OW 1
63916: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63917: LD_ADDR_EXP 91
63921: PUSH
63922: LD_EXP 91
63926: PPUSH
63927: LD_VAR 0 5
63931: PUSH
63932: LD_EXP 91
63936: PUSH
63937: LD_VAR 0 5
63941: ARRAY
63942: PUSH
63943: LD_INT 1
63945: PLUS
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PPUSH
63951: LD_VAR 0 2
63955: PUSH
63956: LD_VAR 0 4
63960: ARRAY
63961: PUSH
63962: LD_VAR 0 2
63966: PUSH
63967: LD_VAR 0 4
63971: ARRAY
63972: PPUSH
63973: CALL_OW 255
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PPUSH
63982: CALL 9806 0 3
63986: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63987: LD_VAR 0 2
63991: PUSH
63992: LD_VAR 0 4
63996: ARRAY
63997: PPUSH
63998: LD_VAR 0 1
64002: PPUSH
64003: CALL_OW 255
64007: PPUSH
64008: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64012: LD_VAR 0 2
64016: PUSH
64017: LD_VAR 0 4
64021: ARRAY
64022: PPUSH
64023: CALL_OW 141
// end ;
64027: GO 63859
64029: POP
64030: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64031: LD_VAR 0 1
64035: PPUSH
64036: LD_EXP 91
64040: PUSH
64041: LD_VAR 0 5
64045: ARRAY
64046: PUSH
64047: LD_INT 0
64049: PLUS
64050: PPUSH
64051: CALL_OW 505
// end ;
64055: LD_VAR 0 3
64059: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64060: LD_INT 0
64062: PPUSH
64063: PPUSH
64064: PPUSH
64065: PPUSH
// if not hack in hackTanks then
64066: LD_VAR 0 1
64070: PUSH
64071: LD_EXP 90
64075: IN
64076: NOT
64077: IFFALSE 64081
// exit ;
64079: GO 64321
// index := GetElementIndex ( hackTanks , hack ) ;
64081: LD_ADDR_VAR 0 4
64085: PUSH
64086: LD_EXP 90
64090: PPUSH
64091: LD_VAR 0 1
64095: PPUSH
64096: CALL 9591 0 2
64100: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64101: LD_ADDR_VAR 0 3
64105: PUSH
64106: DOUBLE
64107: LD_EXP 91
64111: PUSH
64112: LD_VAR 0 4
64116: ARRAY
64117: INC
64118: ST_TO_ADDR
64119: LD_INT 1
64121: PUSH
64122: FOR_DOWNTO
64123: IFFALSE 64295
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64125: LD_ADDR_VAR 0 5
64129: PUSH
64130: LD_EXP 91
64134: PUSH
64135: LD_VAR 0 4
64139: ARRAY
64140: PUSH
64141: LD_VAR 0 3
64145: ARRAY
64146: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64147: LD_VAR 0 5
64151: PUSH
64152: LD_INT 1
64154: ARRAY
64155: PPUSH
64156: CALL_OW 302
64160: NOT
64161: PUSH
64162: LD_VAR 0 5
64166: PUSH
64167: LD_INT 1
64169: ARRAY
64170: PPUSH
64171: CALL_OW 255
64175: PUSH
64176: LD_VAR 0 1
64180: PPUSH
64181: CALL_OW 255
64185: NONEQUAL
64186: OR
64187: IFFALSE 64293
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64189: LD_VAR 0 5
64193: PUSH
64194: LD_INT 1
64196: ARRAY
64197: PPUSH
64198: CALL_OW 305
64202: PUSH
64203: LD_VAR 0 5
64207: PUSH
64208: LD_INT 1
64210: ARRAY
64211: PPUSH
64212: CALL_OW 255
64216: PUSH
64217: LD_VAR 0 1
64221: PPUSH
64222: CALL_OW 255
64226: EQUAL
64227: AND
64228: IFFALSE 64252
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64230: LD_VAR 0 5
64234: PUSH
64235: LD_INT 1
64237: ARRAY
64238: PPUSH
64239: LD_VAR 0 5
64243: PUSH
64244: LD_INT 2
64246: ARRAY
64247: PPUSH
64248: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64252: LD_ADDR_EXP 91
64256: PUSH
64257: LD_EXP 91
64261: PPUSH
64262: LD_VAR 0 4
64266: PPUSH
64267: LD_EXP 91
64271: PUSH
64272: LD_VAR 0 4
64276: ARRAY
64277: PPUSH
64278: LD_VAR 0 3
64282: PPUSH
64283: CALL_OW 3
64287: PPUSH
64288: CALL_OW 1
64292: ST_TO_ADDR
// end ; end ;
64293: GO 64122
64295: POP
64296: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64297: LD_VAR 0 1
64301: PPUSH
64302: LD_EXP 91
64306: PUSH
64307: LD_VAR 0 4
64311: ARRAY
64312: PUSH
64313: LD_INT 0
64315: PLUS
64316: PPUSH
64317: CALL_OW 505
// end ;
64321: LD_VAR 0 2
64325: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64326: LD_INT 0
64328: PPUSH
64329: PPUSH
64330: PPUSH
64331: PPUSH
// if not hack in hackTanks then
64332: LD_VAR 0 1
64336: PUSH
64337: LD_EXP 90
64341: IN
64342: NOT
64343: IFFALSE 64347
// exit ;
64345: GO 64432
// index := GetElementIndex ( hackTanks , hack ) ;
64347: LD_ADDR_VAR 0 5
64351: PUSH
64352: LD_EXP 90
64356: PPUSH
64357: LD_VAR 0 1
64361: PPUSH
64362: CALL 9591 0 2
64366: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64367: LD_ADDR_VAR 0 4
64371: PUSH
64372: DOUBLE
64373: LD_INT 1
64375: DEC
64376: ST_TO_ADDR
64377: LD_EXP 91
64381: PUSH
64382: LD_VAR 0 5
64386: ARRAY
64387: PUSH
64388: FOR_TO
64389: IFFALSE 64430
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64391: LD_EXP 91
64395: PUSH
64396: LD_VAR 0 5
64400: ARRAY
64401: PUSH
64402: LD_VAR 0 4
64406: ARRAY
64407: PUSH
64408: LD_INT 1
64410: ARRAY
64411: PUSH
64412: LD_VAR 0 2
64416: EQUAL
64417: IFFALSE 64428
// KillUnit ( vehicle ) ;
64419: LD_VAR 0 2
64423: PPUSH
64424: CALL_OW 66
64428: GO 64388
64430: POP
64431: POP
// end ;
64432: LD_VAR 0 3
64436: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64437: LD_EXP 95
64441: NOT
64442: IFFALSE 64477
64444: GO 64446
64446: DISABLE
// begin initMiner := true ;
64447: LD_ADDR_EXP 95
64451: PUSH
64452: LD_INT 1
64454: ST_TO_ADDR
// minersList := [ ] ;
64455: LD_ADDR_EXP 96
64459: PUSH
64460: EMPTY
64461: ST_TO_ADDR
// minerMinesList := [ ] ;
64462: LD_ADDR_EXP 97
64466: PUSH
64467: EMPTY
64468: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64469: LD_ADDR_EXP 98
64473: PUSH
64474: LD_INT 5
64476: ST_TO_ADDR
// end ;
64477: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64478: LD_EXP 95
64482: PUSH
64483: LD_INT 34
64485: PUSH
64486: LD_INT 81
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PPUSH
64493: CALL_OW 69
64497: AND
64498: IFFALSE 64959
64500: GO 64502
64502: DISABLE
64503: LD_INT 0
64505: PPUSH
64506: PPUSH
64507: PPUSH
64508: PPUSH
// begin enable ;
64509: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64510: LD_ADDR_VAR 0 1
64514: PUSH
64515: LD_INT 34
64517: PUSH
64518: LD_INT 81
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PPUSH
64525: CALL_OW 69
64529: PUSH
64530: FOR_IN
64531: IFFALSE 64603
// begin if not i in minersList then
64533: LD_VAR 0 1
64537: PUSH
64538: LD_EXP 96
64542: IN
64543: NOT
64544: IFFALSE 64601
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64546: LD_ADDR_EXP 96
64550: PUSH
64551: LD_EXP 96
64555: PPUSH
64556: LD_EXP 96
64560: PUSH
64561: LD_INT 1
64563: PLUS
64564: PPUSH
64565: LD_VAR 0 1
64569: PPUSH
64570: CALL_OW 1
64574: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64575: LD_ADDR_EXP 97
64579: PUSH
64580: LD_EXP 97
64584: PPUSH
64585: LD_EXP 97
64589: PUSH
64590: LD_INT 1
64592: PLUS
64593: PPUSH
64594: EMPTY
64595: PPUSH
64596: CALL_OW 1
64600: ST_TO_ADDR
// end end ;
64601: GO 64530
64603: POP
64604: POP
// for i := minerMinesList downto 1 do
64605: LD_ADDR_VAR 0 1
64609: PUSH
64610: DOUBLE
64611: LD_EXP 97
64615: INC
64616: ST_TO_ADDR
64617: LD_INT 1
64619: PUSH
64620: FOR_DOWNTO
64621: IFFALSE 64957
// begin if IsLive ( minersList [ i ] ) then
64623: LD_EXP 96
64627: PUSH
64628: LD_VAR 0 1
64632: ARRAY
64633: PPUSH
64634: CALL_OW 300
64638: IFFALSE 64666
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64640: LD_EXP 96
64644: PUSH
64645: LD_VAR 0 1
64649: ARRAY
64650: PPUSH
64651: LD_EXP 97
64655: PUSH
64656: LD_VAR 0 1
64660: ARRAY
64661: PPUSH
64662: CALL_OW 505
// if not minerMinesList [ i ] then
64666: LD_EXP 97
64670: PUSH
64671: LD_VAR 0 1
64675: ARRAY
64676: NOT
64677: IFFALSE 64681
// continue ;
64679: GO 64620
// for j := minerMinesList [ i ] downto 1 do
64681: LD_ADDR_VAR 0 2
64685: PUSH
64686: DOUBLE
64687: LD_EXP 97
64691: PUSH
64692: LD_VAR 0 1
64696: ARRAY
64697: INC
64698: ST_TO_ADDR
64699: LD_INT 1
64701: PUSH
64702: FOR_DOWNTO
64703: IFFALSE 64953
// begin side := GetSide ( minersList [ i ] ) ;
64705: LD_ADDR_VAR 0 3
64709: PUSH
64710: LD_EXP 96
64714: PUSH
64715: LD_VAR 0 1
64719: ARRAY
64720: PPUSH
64721: CALL_OW 255
64725: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64726: LD_ADDR_VAR 0 4
64730: PUSH
64731: LD_EXP 97
64735: PUSH
64736: LD_VAR 0 1
64740: ARRAY
64741: PUSH
64742: LD_VAR 0 2
64746: ARRAY
64747: PUSH
64748: LD_INT 1
64750: ARRAY
64751: PPUSH
64752: LD_EXP 97
64756: PUSH
64757: LD_VAR 0 1
64761: ARRAY
64762: PUSH
64763: LD_VAR 0 2
64767: ARRAY
64768: PUSH
64769: LD_INT 2
64771: ARRAY
64772: PPUSH
64773: CALL_OW 428
64777: ST_TO_ADDR
// if not tmp then
64778: LD_VAR 0 4
64782: NOT
64783: IFFALSE 64787
// continue ;
64785: GO 64702
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64787: LD_VAR 0 4
64791: PUSH
64792: LD_INT 81
64794: PUSH
64795: LD_VAR 0 3
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PPUSH
64804: CALL_OW 69
64808: IN
64809: PUSH
64810: LD_EXP 97
64814: PUSH
64815: LD_VAR 0 1
64819: ARRAY
64820: PUSH
64821: LD_VAR 0 2
64825: ARRAY
64826: PUSH
64827: LD_INT 1
64829: ARRAY
64830: PPUSH
64831: LD_EXP 97
64835: PUSH
64836: LD_VAR 0 1
64840: ARRAY
64841: PUSH
64842: LD_VAR 0 2
64846: ARRAY
64847: PUSH
64848: LD_INT 2
64850: ARRAY
64851: PPUSH
64852: CALL_OW 458
64856: AND
64857: IFFALSE 64951
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64859: LD_EXP 97
64863: PUSH
64864: LD_VAR 0 1
64868: ARRAY
64869: PUSH
64870: LD_VAR 0 2
64874: ARRAY
64875: PUSH
64876: LD_INT 1
64878: ARRAY
64879: PPUSH
64880: LD_EXP 97
64884: PUSH
64885: LD_VAR 0 1
64889: ARRAY
64890: PUSH
64891: LD_VAR 0 2
64895: ARRAY
64896: PUSH
64897: LD_INT 2
64899: ARRAY
64900: PPUSH
64901: LD_VAR 0 3
64905: PPUSH
64906: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64910: LD_ADDR_EXP 97
64914: PUSH
64915: LD_EXP 97
64919: PPUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: LD_EXP 97
64929: PUSH
64930: LD_VAR 0 1
64934: ARRAY
64935: PPUSH
64936: LD_VAR 0 2
64940: PPUSH
64941: CALL_OW 3
64945: PPUSH
64946: CALL_OW 1
64950: ST_TO_ADDR
// end ; end ;
64951: GO 64702
64953: POP
64954: POP
// end ;
64955: GO 64620
64957: POP
64958: POP
// end ;
64959: PPOPN 4
64961: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64962: LD_INT 0
64964: PPUSH
64965: PPUSH
// result := false ;
64966: LD_ADDR_VAR 0 4
64970: PUSH
64971: LD_INT 0
64973: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64974: LD_VAR 0 1
64978: PPUSH
64979: CALL_OW 264
64983: PUSH
64984: LD_INT 81
64986: EQUAL
64987: NOT
64988: IFFALSE 64992
// exit ;
64990: GO 65232
// index := GetElementIndex ( minersList , unit ) ;
64992: LD_ADDR_VAR 0 5
64996: PUSH
64997: LD_EXP 96
65001: PPUSH
65002: LD_VAR 0 1
65006: PPUSH
65007: CALL 9591 0 2
65011: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65012: LD_EXP 97
65016: PUSH
65017: LD_VAR 0 5
65021: ARRAY
65022: PUSH
65023: LD_EXP 98
65027: GREATEREQUAL
65028: IFFALSE 65032
// exit ;
65030: GO 65232
// ComMoveXY ( unit , x , y ) ;
65032: LD_VAR 0 1
65036: PPUSH
65037: LD_VAR 0 2
65041: PPUSH
65042: LD_VAR 0 3
65046: PPUSH
65047: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65051: LD_INT 35
65053: PPUSH
65054: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65058: LD_VAR 0 1
65062: PPUSH
65063: LD_VAR 0 2
65067: PPUSH
65068: LD_VAR 0 3
65072: PPUSH
65073: CALL 40946 0 3
65077: NOT
65078: PUSH
65079: LD_VAR 0 1
65083: PPUSH
65084: CALL_OW 314
65088: AND
65089: IFFALSE 65093
// exit ;
65091: GO 65232
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65093: LD_VAR 0 2
65097: PPUSH
65098: LD_VAR 0 3
65102: PPUSH
65103: CALL_OW 428
65107: PUSH
65108: LD_VAR 0 1
65112: EQUAL
65113: PUSH
65114: LD_VAR 0 1
65118: PPUSH
65119: CALL_OW 314
65123: NOT
65124: AND
65125: IFFALSE 65051
// PlaySoundXY ( x , y , PlantMine ) ;
65127: LD_VAR 0 2
65131: PPUSH
65132: LD_VAR 0 3
65136: PPUSH
65137: LD_STRING PlantMine
65139: PPUSH
65140: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65144: LD_VAR 0 2
65148: PPUSH
65149: LD_VAR 0 3
65153: PPUSH
65154: LD_VAR 0 1
65158: PPUSH
65159: CALL_OW 255
65163: PPUSH
65164: LD_INT 0
65166: PPUSH
65167: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65171: LD_ADDR_EXP 97
65175: PUSH
65176: LD_EXP 97
65180: PPUSH
65181: LD_VAR 0 5
65185: PUSH
65186: LD_EXP 97
65190: PUSH
65191: LD_VAR 0 5
65195: ARRAY
65196: PUSH
65197: LD_INT 1
65199: PLUS
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PPUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_VAR 0 3
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PPUSH
65219: CALL 9806 0 3
65223: ST_TO_ADDR
// result := true ;
65224: LD_ADDR_VAR 0 4
65228: PUSH
65229: LD_INT 1
65231: ST_TO_ADDR
// end ;
65232: LD_VAR 0 4
65236: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65237: LD_INT 0
65239: PPUSH
65240: PPUSH
65241: PPUSH
// if not unit in minersList then
65242: LD_VAR 0 1
65246: PUSH
65247: LD_EXP 96
65251: IN
65252: NOT
65253: IFFALSE 65257
// exit ;
65255: GO 65649
// index := GetElementIndex ( minersList , unit ) ;
65257: LD_ADDR_VAR 0 6
65261: PUSH
65262: LD_EXP 96
65266: PPUSH
65267: LD_VAR 0 1
65271: PPUSH
65272: CALL 9591 0 2
65276: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65277: LD_ADDR_VAR 0 5
65281: PUSH
65282: DOUBLE
65283: LD_EXP 97
65287: PUSH
65288: LD_VAR 0 6
65292: ARRAY
65293: INC
65294: ST_TO_ADDR
65295: LD_INT 1
65297: PUSH
65298: FOR_DOWNTO
65299: IFFALSE 65460
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65301: LD_EXP 97
65305: PUSH
65306: LD_VAR 0 6
65310: ARRAY
65311: PUSH
65312: LD_VAR 0 5
65316: ARRAY
65317: PUSH
65318: LD_INT 1
65320: ARRAY
65321: PUSH
65322: LD_VAR 0 2
65326: EQUAL
65327: PUSH
65328: LD_EXP 97
65332: PUSH
65333: LD_VAR 0 6
65337: ARRAY
65338: PUSH
65339: LD_VAR 0 5
65343: ARRAY
65344: PUSH
65345: LD_INT 2
65347: ARRAY
65348: PUSH
65349: LD_VAR 0 3
65353: EQUAL
65354: AND
65355: IFFALSE 65458
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65357: LD_EXP 97
65361: PUSH
65362: LD_VAR 0 6
65366: ARRAY
65367: PUSH
65368: LD_VAR 0 5
65372: ARRAY
65373: PUSH
65374: LD_INT 1
65376: ARRAY
65377: PPUSH
65378: LD_EXP 97
65382: PUSH
65383: LD_VAR 0 6
65387: ARRAY
65388: PUSH
65389: LD_VAR 0 5
65393: ARRAY
65394: PUSH
65395: LD_INT 2
65397: ARRAY
65398: PPUSH
65399: LD_VAR 0 1
65403: PPUSH
65404: CALL_OW 255
65408: PPUSH
65409: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65413: LD_ADDR_EXP 97
65417: PUSH
65418: LD_EXP 97
65422: PPUSH
65423: LD_VAR 0 6
65427: PPUSH
65428: LD_EXP 97
65432: PUSH
65433: LD_VAR 0 6
65437: ARRAY
65438: PPUSH
65439: LD_VAR 0 5
65443: PPUSH
65444: CALL_OW 3
65448: PPUSH
65449: CALL_OW 1
65453: ST_TO_ADDR
// exit ;
65454: POP
65455: POP
65456: GO 65649
// end ; end ;
65458: GO 65298
65460: POP
65461: POP
// for i := minerMinesList [ index ] downto 1 do
65462: LD_ADDR_VAR 0 5
65466: PUSH
65467: DOUBLE
65468: LD_EXP 97
65472: PUSH
65473: LD_VAR 0 6
65477: ARRAY
65478: INC
65479: ST_TO_ADDR
65480: LD_INT 1
65482: PUSH
65483: FOR_DOWNTO
65484: IFFALSE 65647
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65486: LD_EXP 97
65490: PUSH
65491: LD_VAR 0 6
65495: ARRAY
65496: PUSH
65497: LD_VAR 0 5
65501: ARRAY
65502: PUSH
65503: LD_INT 1
65505: ARRAY
65506: PPUSH
65507: LD_EXP 97
65511: PUSH
65512: LD_VAR 0 6
65516: ARRAY
65517: PUSH
65518: LD_VAR 0 5
65522: ARRAY
65523: PUSH
65524: LD_INT 2
65526: ARRAY
65527: PPUSH
65528: LD_VAR 0 2
65532: PPUSH
65533: LD_VAR 0 3
65537: PPUSH
65538: CALL_OW 298
65542: PUSH
65543: LD_INT 6
65545: LESS
65546: IFFALSE 65645
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65548: LD_EXP 97
65552: PUSH
65553: LD_VAR 0 6
65557: ARRAY
65558: PUSH
65559: LD_VAR 0 5
65563: ARRAY
65564: PUSH
65565: LD_INT 1
65567: ARRAY
65568: PPUSH
65569: LD_EXP 97
65573: PUSH
65574: LD_VAR 0 6
65578: ARRAY
65579: PUSH
65580: LD_VAR 0 5
65584: ARRAY
65585: PUSH
65586: LD_INT 2
65588: ARRAY
65589: PPUSH
65590: LD_VAR 0 1
65594: PPUSH
65595: CALL_OW 255
65599: PPUSH
65600: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65604: LD_ADDR_EXP 97
65608: PUSH
65609: LD_EXP 97
65613: PPUSH
65614: LD_VAR 0 6
65618: PPUSH
65619: LD_EXP 97
65623: PUSH
65624: LD_VAR 0 6
65628: ARRAY
65629: PPUSH
65630: LD_VAR 0 5
65634: PPUSH
65635: CALL_OW 3
65639: PPUSH
65640: CALL_OW 1
65644: ST_TO_ADDR
// end ; end ;
65645: GO 65483
65647: POP
65648: POP
// end ;
65649: LD_VAR 0 4
65653: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65654: LD_INT 0
65656: PPUSH
65657: PPUSH
65658: PPUSH
65659: PPUSH
65660: PPUSH
65661: PPUSH
65662: PPUSH
65663: PPUSH
65664: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65665: LD_VAR 0 1
65669: PPUSH
65670: CALL_OW 264
65674: PUSH
65675: LD_INT 81
65677: EQUAL
65678: NOT
65679: PUSH
65680: LD_VAR 0 1
65684: PUSH
65685: LD_EXP 96
65689: IN
65690: NOT
65691: OR
65692: IFFALSE 65696
// exit ;
65694: GO 66018
// index := GetElementIndex ( minersList , unit ) ;
65696: LD_ADDR_VAR 0 6
65700: PUSH
65701: LD_EXP 96
65705: PPUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: CALL 9591 0 2
65715: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65716: LD_ADDR_VAR 0 8
65720: PUSH
65721: LD_EXP 98
65725: PUSH
65726: LD_EXP 97
65730: PUSH
65731: LD_VAR 0 6
65735: ARRAY
65736: MINUS
65737: ST_TO_ADDR
// if not minesFreeAmount then
65738: LD_VAR 0 8
65742: NOT
65743: IFFALSE 65747
// exit ;
65745: GO 66018
// tmp := [ ] ;
65747: LD_ADDR_VAR 0 7
65751: PUSH
65752: EMPTY
65753: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65754: LD_ADDR_VAR 0 5
65758: PUSH
65759: DOUBLE
65760: LD_INT 1
65762: DEC
65763: ST_TO_ADDR
65764: LD_VAR 0 8
65768: PUSH
65769: FOR_TO
65770: IFFALSE 65965
// begin _d := rand ( 0 , 5 ) ;
65772: LD_ADDR_VAR 0 11
65776: PUSH
65777: LD_INT 0
65779: PPUSH
65780: LD_INT 5
65782: PPUSH
65783: CALL_OW 12
65787: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65788: LD_ADDR_VAR 0 12
65792: PUSH
65793: LD_INT 2
65795: PPUSH
65796: LD_INT 6
65798: PPUSH
65799: CALL_OW 12
65803: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65804: LD_ADDR_VAR 0 9
65808: PUSH
65809: LD_VAR 0 2
65813: PPUSH
65814: LD_VAR 0 11
65818: PPUSH
65819: LD_VAR 0 12
65823: PPUSH
65824: CALL_OW 272
65828: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65829: LD_ADDR_VAR 0 10
65833: PUSH
65834: LD_VAR 0 3
65838: PPUSH
65839: LD_VAR 0 11
65843: PPUSH
65844: LD_VAR 0 12
65848: PPUSH
65849: CALL_OW 273
65853: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65854: LD_VAR 0 9
65858: PPUSH
65859: LD_VAR 0 10
65863: PPUSH
65864: CALL_OW 488
65868: PUSH
65869: LD_VAR 0 9
65873: PUSH
65874: LD_VAR 0 10
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_VAR 0 7
65887: IN
65888: NOT
65889: AND
65890: PUSH
65891: LD_VAR 0 9
65895: PPUSH
65896: LD_VAR 0 10
65900: PPUSH
65901: CALL_OW 458
65905: NOT
65906: AND
65907: IFFALSE 65949
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65909: LD_ADDR_VAR 0 7
65913: PUSH
65914: LD_VAR 0 7
65918: PPUSH
65919: LD_VAR 0 7
65923: PUSH
65924: LD_INT 1
65926: PLUS
65927: PPUSH
65928: LD_VAR 0 9
65932: PUSH
65933: LD_VAR 0 10
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PPUSH
65942: CALL_OW 1
65946: ST_TO_ADDR
65947: GO 65963
// i := i - 1 ;
65949: LD_ADDR_VAR 0 5
65953: PUSH
65954: LD_VAR 0 5
65958: PUSH
65959: LD_INT 1
65961: MINUS
65962: ST_TO_ADDR
// end ;
65963: GO 65769
65965: POP
65966: POP
// for i in tmp do
65967: LD_ADDR_VAR 0 5
65971: PUSH
65972: LD_VAR 0 7
65976: PUSH
65977: FOR_IN
65978: IFFALSE 66016
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65980: LD_VAR 0 1
65984: PPUSH
65985: LD_VAR 0 5
65989: PUSH
65990: LD_INT 1
65992: ARRAY
65993: PPUSH
65994: LD_VAR 0 5
65998: PUSH
65999: LD_INT 2
66001: ARRAY
66002: PPUSH
66003: CALL 64962 0 3
66007: NOT
66008: IFFALSE 66014
// exit ;
66010: POP
66011: POP
66012: GO 66018
66014: GO 65977
66016: POP
66017: POP
// end ;
66018: LD_VAR 0 4
66022: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66023: LD_INT 0
66025: PPUSH
66026: PPUSH
66027: PPUSH
66028: PPUSH
66029: PPUSH
66030: PPUSH
66031: PPUSH
// if not GetClass ( unit ) = class_sniper then
66032: LD_VAR 0 1
66036: PPUSH
66037: CALL_OW 257
66041: PUSH
66042: LD_INT 5
66044: EQUAL
66045: NOT
66046: IFFALSE 66050
// exit ;
66048: GO 66438
// dist := 8 ;
66050: LD_ADDR_VAR 0 5
66054: PUSH
66055: LD_INT 8
66057: ST_TO_ADDR
// viewRange := 12 ;
66058: LD_ADDR_VAR 0 7
66062: PUSH
66063: LD_INT 12
66065: ST_TO_ADDR
// side := GetSide ( unit ) ;
66066: LD_ADDR_VAR 0 6
66070: PUSH
66071: LD_VAR 0 1
66075: PPUSH
66076: CALL_OW 255
66080: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66081: LD_INT 61
66083: PPUSH
66084: LD_VAR 0 6
66088: PPUSH
66089: CALL_OW 321
66093: PUSH
66094: LD_INT 2
66096: EQUAL
66097: IFFALSE 66107
// viewRange := 16 ;
66099: LD_ADDR_VAR 0 7
66103: PUSH
66104: LD_INT 16
66106: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66107: LD_VAR 0 1
66111: PPUSH
66112: LD_VAR 0 2
66116: PPUSH
66117: LD_VAR 0 3
66121: PPUSH
66122: CALL_OW 297
66126: PUSH
66127: LD_VAR 0 5
66131: GREATER
66132: IFFALSE 66211
// begin ComMoveXY ( unit , x , y ) ;
66134: LD_VAR 0 1
66138: PPUSH
66139: LD_VAR 0 2
66143: PPUSH
66144: LD_VAR 0 3
66148: PPUSH
66149: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66153: LD_INT 35
66155: PPUSH
66156: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66160: LD_VAR 0 1
66164: PPUSH
66165: LD_VAR 0 2
66169: PPUSH
66170: LD_VAR 0 3
66174: PPUSH
66175: CALL 40946 0 3
66179: NOT
66180: IFFALSE 66184
// exit ;
66182: GO 66438
// until GetDistUnitXY ( unit , x , y ) < dist ;
66184: LD_VAR 0 1
66188: PPUSH
66189: LD_VAR 0 2
66193: PPUSH
66194: LD_VAR 0 3
66198: PPUSH
66199: CALL_OW 297
66203: PUSH
66204: LD_VAR 0 5
66208: LESS
66209: IFFALSE 66153
// end ; ComTurnXY ( unit , x , y ) ;
66211: LD_VAR 0 1
66215: PPUSH
66216: LD_VAR 0 2
66220: PPUSH
66221: LD_VAR 0 3
66225: PPUSH
66226: CALL_OW 118
// wait ( 5 ) ;
66230: LD_INT 5
66232: PPUSH
66233: CALL_OW 67
// _d := GetDir ( unit ) ;
66237: LD_ADDR_VAR 0 10
66241: PUSH
66242: LD_VAR 0 1
66246: PPUSH
66247: CALL_OW 254
66251: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66252: LD_ADDR_VAR 0 8
66256: PUSH
66257: LD_VAR 0 1
66261: PPUSH
66262: CALL_OW 250
66266: PPUSH
66267: LD_VAR 0 10
66271: PPUSH
66272: LD_VAR 0 5
66276: PPUSH
66277: CALL_OW 272
66281: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66282: LD_ADDR_VAR 0 9
66286: PUSH
66287: LD_VAR 0 1
66291: PPUSH
66292: CALL_OW 251
66296: PPUSH
66297: LD_VAR 0 10
66301: PPUSH
66302: LD_VAR 0 5
66306: PPUSH
66307: CALL_OW 273
66311: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66312: LD_VAR 0 8
66316: PPUSH
66317: LD_VAR 0 9
66321: PPUSH
66322: CALL_OW 488
66326: NOT
66327: IFFALSE 66331
// exit ;
66329: GO 66438
// ComAnimCustom ( unit , 1 ) ;
66331: LD_VAR 0 1
66335: PPUSH
66336: LD_INT 1
66338: PPUSH
66339: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66343: LD_VAR 0 8
66347: PPUSH
66348: LD_VAR 0 9
66352: PPUSH
66353: LD_VAR 0 6
66357: PPUSH
66358: LD_VAR 0 7
66362: PPUSH
66363: CALL_OW 330
// repeat wait ( 1 ) ;
66367: LD_INT 1
66369: PPUSH
66370: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66374: LD_VAR 0 1
66378: PPUSH
66379: CALL_OW 316
66383: PUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: CALL_OW 314
66393: OR
66394: PUSH
66395: LD_VAR 0 1
66399: PPUSH
66400: CALL_OW 302
66404: NOT
66405: OR
66406: PUSH
66407: LD_VAR 0 1
66411: PPUSH
66412: CALL_OW 301
66416: OR
66417: IFFALSE 66367
// RemoveSeeing ( _x , _y , side ) ;
66419: LD_VAR 0 8
66423: PPUSH
66424: LD_VAR 0 9
66428: PPUSH
66429: LD_VAR 0 6
66433: PPUSH
66434: CALL_OW 331
// end ;
66438: LD_VAR 0 4
66442: RET
