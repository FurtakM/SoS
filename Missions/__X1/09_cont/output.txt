// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 568 0 0
// CreateDeposits ;
  12: CALL 739 0 0
// PrepareArabian ;
  16: CALL 117 0 0
// Action ;
  20: CALL 1852 0 0
// end ;
  24: END
// export debug , prefix , hiddenCameras , timeToHeikeDead , baseDone , canGo ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 08_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 08_
  43: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  44: LD_ADDR_OWVAR 82
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  52: LD_ADDR_OWVAR 79
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// hiddenCameras := [ ] ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: EMPTY
  66: ST_TO_ADDR
// timeToHeikeDead := [ 25 25$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 52500
  74: PUSH
  75: LD_INT 42000
  77: PUSH
  78: LD_INT 39900
  80: PUSH
  81: LD_INT 37800
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// baseDone := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// canGo := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// end ; end_of_file
 112: LD_VAR 0 1
 116: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , Omar , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 5 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 5
 130: ST_TO_ADDR
// uc_nation := nation_arabian ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 2
 138: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 139: LD_ADDR_EXP 24
 143: PUSH
 144: LD_STRING Omar
 146: PPUSH
 147: CALL_OW 25
 151: ST_TO_ADDR
// uc_side := 2 ;
 152: LD_ADDR_OWVAR 20
 156: PUSH
 157: LD_INT 2
 159: ST_TO_ADDR
// uc_nation := nation_arabian ;
 160: LD_ADDR_OWVAR 21
 164: PUSH
 165: LD_INT 2
 167: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 168: LD_ADDR_EXP 18
 172: PUSH
 173: LD_STRING Schulz
 175: PPUSH
 176: CALL_OW 25
 180: ST_TO_ADDR
// Lemmy := NewCharacter ( Lemmy ) ;
 181: LD_ADDR_EXP 20
 185: PUSH
 186: LD_STRING Lemmy
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// Mia := NewCharacter ( Mia ) ;
 194: LD_ADDR_EXP 21
 198: PUSH
 199: LD_STRING Mia
 201: PPUSH
 202: CALL_OW 25
 206: ST_TO_ADDR
// Nia := NewCharacter ( Nia ) ;
 207: LD_ADDR_EXP 22
 211: PUSH
 212: LD_STRING Nia
 214: PPUSH
 215: CALL_OW 25
 219: ST_TO_ADDR
// Jenna := NewCharacter ( Jenna ) ;
 220: LD_ADDR_EXP 23
 224: PUSH
 225: LD_STRING Jenna
 227: PPUSH
 228: CALL_OW 25
 232: ST_TO_ADDR
// schulzSecondSquad := [ ] ;
 233: LD_ADDR_EXP 26
 237: PUSH
 238: EMPTY
 239: ST_TO_ADDR
// for i := 1 to 3 do
 240: LD_ADDR_VAR 0 2
 244: PUSH
 245: DOUBLE
 246: LD_INT 1
 248: DEC
 249: ST_TO_ADDR
 250: LD_INT 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 293
// begin PrepareHuman ( false , i , 6 ) ;
 256: LD_INT 0
 258: PPUSH
 259: LD_VAR 0 2
 263: PPUSH
 264: LD_INT 6
 266: PPUSH
 267: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_EXP 26
 280: PPUSH
 281: CALL_OW 44
 285: PPUSH
 286: CALL 41925 0 2
 290: ST_TO_ADDR
// end ;
 291: GO 253
 293: POP
 294: POP
// tmp := [ Lemmy , Mia , Nia , Jenna ] union schulzSecondSquad ;
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: LD_EXP 20
 304: PUSH
 305: LD_EXP 21
 309: PUSH
 310: LD_EXP 22
 314: PUSH
 315: LD_EXP 23
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_EXP 26
 330: UNION
 331: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
 332: LD_ADDR_VAR 0 2
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 4
 346: PPUSH
 347: CALL 6559 0 1
 351: PUSH
 352: FOR_TO
 353: IFFALSE 478
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_radar ] [ i mod 4 + 1 ] , 20 ) ;
 355: LD_INT 13
 357: PPUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 1
 363: PPUSH
 364: LD_INT 25
 366: PUSH
 367: LD_INT 27
 369: PUSH
 370: LD_INT 26
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: MOD
 390: PUSH
 391: LD_INT 1
 393: PLUS
 394: ARRAY
 395: PPUSH
 396: LD_INT 20
 398: PPUSH
 399: CALL 9472 0 5
// un := CreateVehicle ;
 403: LD_ADDR_VAR 0 3
 407: PUSH
 408: CALL_OW 45
 412: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 413: LD_VAR 0 3
 417: PPUSH
 418: LD_INT 2
 420: PPUSH
 421: CALL_OW 233
// PlaceUnitArea ( un , startArea , false ) ;
 425: LD_VAR 0 3
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , un ) ;
 440: LD_VAR 0 4
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: LD_VAR 0 3
 453: PPUSH
 454: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 4
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL_OW 3
 475: ST_TO_ADDR
// end ;
 476: GO 352
 478: POP
 479: POP
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 30 ) ;
 480: LD_INT 14
 482: PPUSH
 483: LD_INT 1
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: LD_INT 27
 491: PPUSH
 492: LD_INT 30
 494: PPUSH
 495: CALL 9472 0 5
// un := CreateVehicle ;
 499: LD_ADDR_VAR 0 3
 503: PUSH
 504: CALL_OW 45
 508: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 509: LD_VAR 0 3
 513: PPUSH
 514: LD_INT 2
 516: PPUSH
 517: CALL_OW 233
// PlaceUnitArea ( un , schulzStartArea , false ) ;
 521: LD_VAR 0 3
 525: PPUSH
 526: LD_INT 4
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// SetMark ( un , - 2 ) ;
 536: LD_VAR 0 3
 540: PPUSH
 541: LD_INT 2
 543: NEG
 544: PPUSH
 545: CALL_OW 242
// PlaceHumanInUnit ( Schulz , un ) ;
 549: LD_EXP 18
 553: PPUSH
 554: LD_VAR 0 3
 558: PPUSH
 559: CALL_OW 52
// end ; end_of_file end_of_file
 563: LD_VAR 0 1
 567: RET
// export function CreateNature ; var i ; begin
 568: LD_INT 0
 570: PPUSH
 571: PPUSH
// PrepareApeman ( 0 ) ;
 572: LD_INT 0
 574: PPUSH
 575: CALL 38205 0 1
// for i := 1 to 5 do
 579: LD_ADDR_VAR 0 2
 583: PUSH
 584: DOUBLE
 585: LD_INT 1
 587: DEC
 588: ST_TO_ADDR
 589: LD_INT 5
 591: PUSH
 592: FOR_TO
 593: IFFALSE 612
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 595: CALL_OW 44
 599: PPUSH
 600: LD_INT 8
 602: PPUSH
 603: LD_INT 0
 605: PPUSH
 606: CALL_OW 49
 610: GO 592
 612: POP
 613: POP
// PrepareTiger ( 0 ) ;
 614: LD_INT 0
 616: PPUSH
 617: CALL 38313 0 1
// for i := 1 to 2 do
 621: LD_ADDR_VAR 0 2
 625: PUSH
 626: DOUBLE
 627: LD_INT 1
 629: DEC
 630: ST_TO_ADDR
 631: LD_INT 2
 633: PUSH
 634: FOR_TO
 635: IFFALSE 654
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 637: CALL_OW 44
 641: PPUSH
 642: LD_INT 8
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
 652: GO 634
 654: POP
 655: POP
// PrepareBird ;
 656: CALL 38494 0 0
// for i := 1 to 3 do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_INT 3
 672: PUSH
 673: FOR_TO
 674: IFFALSE 693
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 676: CALL_OW 44
 680: PPUSH
 681: LD_INT 8
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: CALL_OW 49
 691: GO 673
 693: POP
 694: POP
// PrepareFrog ;
 695: CALL 38414 0 0
// for i := 1 to 3 do
 699: LD_ADDR_VAR 0 2
 703: PUSH
 704: DOUBLE
 705: LD_INT 1
 707: DEC
 708: ST_TO_ADDR
 709: LD_INT 3
 711: PUSH
 712: FOR_TO
 713: IFFALSE 732
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 715: CALL_OW 44
 719: PPUSH
 720: LD_INT 9
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 49
 730: GO 712
 732: POP
 733: POP
// end ;
 734: LD_VAR 0 1
 738: RET
// export function CreateDeposits ; var i , oil , sib ; begin
 739: LD_INT 0
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
 745: LD_ADDR_VAR 0 3
 749: PUSH
 750: LD_INT 91
 752: PUSH
 753: LD_INT 13
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 52
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: LD_INT 115
 772: PUSH
 773: LD_INT 150
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
 785: LD_ADDR_VAR 0 4
 789: PUSH
 790: LD_INT 82
 792: PUSH
 793: LD_INT 42
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 128
 802: PUSH
 803: LD_INT 132
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// for i in oil do
 814: LD_ADDR_VAR 0 2
 818: PUSH
 819: LD_VAR 0 3
 823: PUSH
 824: FOR_IN
 825: IFFALSE 854
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 2
 843: ARRAY
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: CALL_OW 62
 852: GO 824
 854: POP
 855: POP
// for i in sib do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: LD_VAR 0 4
 865: PUSH
 866: FOR_IN
 867: IFFALSE 896
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 1
 876: ARRAY
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 2
 885: ARRAY
 886: PPUSH
 887: LD_INT 3
 889: PPUSH
 890: CALL_OW 62
 894: GO 866
 896: POP
 897: POP
// end ;
 898: LD_VAR 0 1
 902: RET
// export function SaveEnvironment ( area , saveId ) ; begin
 903: LD_INT 0
 905: PPUSH
// result := ListEnvironmentArea ( area ) ;
 906: LD_ADDR_VAR 0 3
 910: PUSH
 911: LD_VAR 0 1
 915: PPUSH
 916: CALL_OW 353
 920: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
 921: LD_VAR 0 3
 925: PPUSH
 926: LD_VAR 0 2
 930: PPUSH
 931: CALL_OW 39
// end ;
 935: LD_VAR 0 3
 939: RET
// export function SaveMaterials ( side , saveId ) ; var i , base ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
// result := [ ] ;
 945: LD_ADDR_VAR 0 3
 949: PUSH
 950: EMPTY
 951: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 952: LD_ADDR_VAR 0 4
 956: PUSH
 957: LD_INT 22
 959: PUSH
 960: LD_INT 2
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 30
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 30
 982: PUSH
 983: LD_INT 1
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PPUSH
 999: CALL_OW 69
1003: PUSH
1004: FOR_IN
1005: IFFALSE 1049
// begin base := GetBase ( i ) ;
1007: LD_ADDR_VAR 0 5
1011: PUSH
1012: LD_VAR 0 4
1016: PPUSH
1017: CALL_OW 274
1021: ST_TO_ADDR
// result := Join ( result , GetResources ( base ) ) ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 3
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: CALL_OW 279
1041: PPUSH
1042: CALL 41925 0 2
1046: ST_TO_ADDR
// end ;
1047: GO 1004
1049: POP
1050: POP
// if not result then
1051: LD_VAR 0 3
1055: NOT
1056: IFFALSE 1060
// exit ;
1058: GO 1074
// SaveVariable ( result , saveId ) ;
1060: LD_VAR 0 3
1064: PPUSH
1065: LD_VAR 0 2
1069: PPUSH
1070: CALL_OW 39
// end ;
1074: LD_VAR 0 3
1078: RET
// export function SaveBase ( side , saveId ) ; var i ; begin
1079: LD_INT 0
1081: PPUSH
1082: PPUSH
// result := [ ] ;
1083: LD_ADDR_VAR 0 3
1087: PUSH
1088: EMPTY
1089: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) do
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: LD_INT 22
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 21
1107: PUSH
1108: LD_INT 3
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: PUSH
1115: LD_INT 50
1117: PUSH
1118: EMPTY
1119: LIST
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PPUSH
1126: CALL_OW 69
1130: PUSH
1131: FOR_IN
1132: IFFALSE 1258
// begin result := Join ( result , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
1134: LD_ADDR_VAR 0 3
1138: PUSH
1139: LD_VAR 0 3
1143: PPUSH
1144: LD_VAR 0 4
1148: PPUSH
1149: CALL_OW 266
1153: PUSH
1154: LD_VAR 0 4
1158: PPUSH
1159: CALL_OW 250
1163: PUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 251
1173: PUSH
1174: LD_VAR 0 4
1178: PPUSH
1179: CALL_OW 254
1183: PUSH
1184: LD_VAR 0 4
1188: PPUSH
1189: CALL_OW 267
1193: PUSH
1194: LD_VAR 0 4
1198: PPUSH
1199: CALL_OW 256
1203: PUSH
1204: LD_VAR 0 4
1208: PPUSH
1209: LD_INT 1
1211: PPUSH
1212: CALL_OW 268
1216: PUSH
1217: LD_VAR 0 4
1221: PPUSH
1222: LD_INT 2
1224: PPUSH
1225: CALL_OW 268
1229: PUSH
1230: LD_VAR 0 4
1234: PPUSH
1235: CALL_OW 269
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: PPUSH
1251: CALL 41925 0 2
1255: ST_TO_ADDR
// end ;
1256: GO 1131
1258: POP
1259: POP
// if not result then
1260: LD_VAR 0 3
1264: NOT
1265: IFFALSE 1269
// exit ;
1267: GO 1283
// SaveVariable ( result , saveId ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_VAR 0 2
1278: PPUSH
1279: CALL_OW 39
// end ;
1283: LD_VAR 0 3
1287: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// result := [ ] ;
1292: LD_ADDR_VAR 0 3
1296: PUSH
1297: EMPTY
1298: ST_TO_ADDR
// for i := 1 to 100 do
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: DOUBLE
1305: LD_INT 1
1307: DEC
1308: ST_TO_ADDR
1309: LD_INT 100
1311: PUSH
1312: FOR_TO
1313: IFFALSE 1347
// result := Join ( result , GetTech ( i , side ) ) ;
1315: LD_ADDR_VAR 0 3
1319: PUSH
1320: LD_VAR 0 3
1324: PPUSH
1325: LD_VAR 0 4
1329: PPUSH
1330: LD_VAR 0 1
1334: PPUSH
1335: CALL_OW 321
1339: PPUSH
1340: CALL 41925 0 2
1344: ST_TO_ADDR
1345: GO 1312
1347: POP
1348: POP
// SaveVariable ( result , saveId ) ;
1349: LD_VAR 0 3
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 39
// end ; end_of_file
1363: LD_VAR 0 3
1367: RET
// on UnitDestroyed ( un ) do begin if un = Schulz then
1368: LD_VAR 0 1
1372: PUSH
1373: LD_EXP 18
1377: EQUAL
1378: IFFALSE 1387
// YouLost ( Schulz ) ;
1380: LD_STRING Schulz
1382: PPUSH
1383: CALL_OW 104
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
1387: LD_VAR 0 1
1391: PPUSH
1392: CALL_OW 266
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 1
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: IN
1407: IFFALSE 1416
// YouLost ( Depot ) ;
1409: LD_STRING Depot
1411: PPUSH
1412: CALL_OW 104
// end ;
1416: PPOPN 1
1418: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitDestroyed ( un ) ;
1419: LD_VAR 0 1
1423: PPUSH
1424: CALL 61894 0 1
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) diff Schulz then
1428: LD_VAR 0 1
1432: PUSH
1433: LD_INT 22
1435: PUSH
1436: LD_INT 2
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 21
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 23
1455: PUSH
1456: LD_INT 2
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: PPUSH
1468: CALL_OW 69
1472: PUSH
1473: LD_EXP 18
1477: DIFF
1478: IN
1479: IFFALSE 1507
// if killerSide = 2 then
1481: LD_VAR 0 2
1485: PUSH
1486: LD_INT 2
1488: EQUAL
1489: IFFALSE 1500
// YouLost ( TeamKiller ) else
1491: LD_STRING TeamKiller
1493: PPUSH
1494: CALL_OW 104
1498: GO 1507
// YouLost ( SoldierKilled ) ;
1500: LD_STRING SoldierKilled
1502: PPUSH
1503: CALL_OW 104
// end ;
1507: PPOPN 3
1509: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
1510: LD_VAR 0 1
1514: PPUSH
1515: LD_VAR 0 2
1519: PPUSH
1520: CALL 62014 0 2
1524: PPOPN 2
1526: END
// on HiddenCameraPlaced ( side , eng , x , y ) do begin hiddenCameras := Join ( hiddenCameras , [ x , y ] ) ;
1527: LD_ADDR_EXP 3
1531: PUSH
1532: LD_EXP 3
1536: PPUSH
1537: LD_VAR 0 3
1541: PUSH
1542: LD_VAR 0 4
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PPUSH
1551: CALL 41925 0 2
1555: ST_TO_ADDR
// end ;
1556: PPOPN 4
1558: END
// on SailEvent ( event ) do var i , eng ;
1559: LD_INT 0
1561: PPUSH
1562: PPUSH
// begin if event = 1 then
1563: LD_VAR 0 1
1567: PUSH
1568: LD_INT 1
1570: EQUAL
1571: IFFALSE 1849
// begin repeat ComExitVehicle ( Lemmy ) ;
1573: LD_EXP 20
1577: PPUSH
1578: CALL_OW 121
// wait ( 0 0$1 ) ;
1582: LD_INT 35
1584: PPUSH
1585: CALL_OW 67
// until not IsInUnit ( Lemmy ) ;
1589: LD_EXP 20
1593: PPUSH
1594: CALL_OW 310
1598: NOT
1599: IFFALSE 1573
// wait ( 3 ) ;
1601: LD_INT 3
1603: PPUSH
1604: CALL_OW 67
// repeat if not HasTask ( Lemmy ) then
1608: LD_EXP 20
1612: PPUSH
1613: CALL_OW 314
1617: NOT
1618: IFFALSE 1641
// ComBuild ( Lemmy , b_depot , 69 , 14 , 2 ) ;
1620: LD_EXP 20
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 69
1630: PPUSH
1631: LD_INT 14
1633: PPUSH
1634: LD_INT 2
1636: PPUSH
1637: CALL_OW 145
// wait ( 0 0$1 ) ;
1641: LD_INT 35
1643: PPUSH
1644: CALL_OW 67
// until HasTask ( Lemmy ) ;
1648: LD_EXP 20
1652: PPUSH
1653: CALL_OW 314
1657: IFFALSE 1608
// wait ( 0 0$2 ) ;
1659: LD_INT 70
1661: PPUSH
1662: CALL_OW 67
// for i in UnitFilter ( schulzSecondSquad , [ f_not , [ f_class , 2 ] ] ) union Mia union Jenna union Nia do
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_EXP 26
1675: PPUSH
1676: LD_INT 3
1678: PUSH
1679: LD_INT 25
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL_OW 72
1697: PUSH
1698: LD_EXP 21
1702: UNION
1703: PUSH
1704: LD_EXP 23
1708: UNION
1709: PUSH
1710: LD_EXP 22
1714: UNION
1715: PUSH
1716: FOR_IN
1717: IFFALSE 1752
// begin ComExitVehicle ( i ) ;
1719: LD_VAR 0 2
1723: PPUSH
1724: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1728: LD_INT 10
1730: PPUSH
1731: CALL_OW 67
// AddComMoveXY ( i , 69 , 14 ) ;
1735: LD_VAR 0 2
1739: PPUSH
1740: LD_INT 69
1742: PPUSH
1743: LD_INT 14
1745: PPUSH
1746: CALL_OW 171
// end ;
1750: GO 1716
1752: POP
1753: POP
// eng := UnitFilter ( schulzSecondSquad , [ f_class , 2 ] ) ;
1754: LD_ADDR_VAR 0 3
1758: PUSH
1759: LD_EXP 26
1763: PPUSH
1764: LD_INT 25
1766: PUSH
1767: LD_INT 2
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PPUSH
1774: CALL_OW 72
1778: ST_TO_ADDR
// if not eng then
1779: LD_VAR 0 3
1783: NOT
1784: IFFALSE 1788
// exit ;
1786: GO 1849
// ComExitVehicle ( eng ) ;
1788: LD_VAR 0 3
1792: PPUSH
1793: CALL_OW 121
// wait ( 0 0$0.3 ) ;
1797: LD_INT 10
1799: PPUSH
1800: CALL_OW 67
// ComHiddenCamera ( eng , 55 , 42 ) ;
1804: LD_VAR 0 3
1808: PPUSH
1809: LD_INT 55
1811: PPUSH
1812: LD_INT 42
1814: PPUSH
1815: CALL_OW 157
// AddComHiddenCamera ( eng , 84 , 47 ) ;
1819: LD_VAR 0 3
1823: PPUSH
1824: LD_INT 84
1826: PPUSH
1827: LD_INT 47
1829: PPUSH
1830: CALL_OW 217
// AddComMoveXY ( eng , 70 , 19 ) ;
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 70
1841: PPUSH
1842: LD_INT 19
1844: PPUSH
1845: CALL_OW 171
// end ; end ; end_of_file
1849: PPOPN 3
1851: END
// export function Action ; var i ; begin
1852: LD_INT 0
1854: PPUSH
1855: PPUSH
// Video ( true ) ;
1856: LD_INT 1
1858: PPUSH
1859: CALL 41897 0 1
// CenterNowOnXY ( 18 , 15 ) ;
1863: LD_INT 18
1865: PPUSH
1866: LD_INT 15
1868: PPUSH
1869: CALL_OW 86
// ComMoveXY ( Schulz , 80 , 28 ) ;
1873: LD_EXP 18
1877: PPUSH
1878: LD_INT 80
1880: PPUSH
1881: LD_INT 28
1883: PPUSH
1884: CALL_OW 111
// ComMoveXY ( Lemmy , 61 , 17 ) ;
1888: LD_EXP 20
1892: PPUSH
1893: LD_INT 61
1895: PPUSH
1896: LD_INT 17
1898: PPUSH
1899: CALL_OW 111
// ComMoveXY ( Nia , 72 , 28 ) ;
1903: LD_EXP 22
1907: PPUSH
1908: LD_INT 72
1910: PPUSH
1911: LD_INT 28
1913: PPUSH
1914: CALL_OW 111
// ComMoveXY ( Jenna , 74 , 22 ) ;
1918: LD_EXP 23
1922: PPUSH
1923: LD_INT 74
1925: PPUSH
1926: LD_INT 22
1928: PPUSH
1929: CALL_OW 111
// ComMoveXY ( Mia , 68 , 22 ) ;
1933: LD_EXP 21
1937: PPUSH
1938: LD_INT 68
1940: PPUSH
1941: LD_INT 22
1943: PPUSH
1944: CALL_OW 111
// ComMoveXY ( schulzSecondSquad , 83 , 37 ) ;
1948: LD_EXP 26
1952: PPUSH
1953: LD_INT 83
1955: PPUSH
1956: LD_INT 37
1958: PPUSH
1959: CALL_OW 111
// Say ( Schulz , DL-Intro-8 ) ;
1963: LD_EXP 18
1967: PPUSH
1968: LD_STRING DL-Intro-8
1970: PPUSH
1971: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1975: LD_EXP 18
1979: PPUSH
1980: CALL_OW 85
// Say ( Schulz , DL-Intro-9 ) ;
1984: LD_EXP 18
1988: PPUSH
1989: LD_STRING DL-Intro-9
1991: PPUSH
1992: CALL_OW 88
// CenterOnUnits ( Schulz ) ;
1996: LD_EXP 18
2000: PPUSH
2001: CALL_OW 85
// Say ( Schulz , DL-Intro-10 ) ;
2005: LD_EXP 18
2009: PPUSH
2010: LD_STRING DL-Intro-10
2012: PPUSH
2013: CALL_OW 88
// CenterOnXY ( 80 , 28 ) ;
2017: LD_INT 80
2019: PPUSH
2020: LD_INT 28
2022: PPUSH
2023: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
2027: LD_INT 35
2029: PPUSH
2030: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 80 , 28 , 6 ] ] ) ;
2034: LD_INT 22
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 92
2046: PUSH
2047: LD_INT 80
2049: PUSH
2050: LD_INT 28
2052: PUSH
2053: LD_INT 6
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PPUSH
2066: CALL_OW 69
2070: IFFALSE 2027
// RaiseSailEvent ( 1 ) ;
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 427
// wait ( 0 0$0.3 ) ;
2079: LD_INT 10
2081: PPUSH
2082: CALL_OW 67
// Say ( Schulz , DL-Intro-11 ) ;
2086: LD_EXP 18
2090: PPUSH
2091: LD_STRING DL-Intro-11
2093: PPUSH
2094: CALL_OW 88
// SayRadio ( Omar , DOm-Intro-12 ) ;
2098: LD_EXP 24
2102: PPUSH
2103: LD_STRING DOm-Intro-12
2105: PPUSH
2106: CALL_OW 94
// SayRadio ( Omar , DOm-Intro-13 ) ;
2110: LD_EXP 24
2114: PPUSH
2115: LD_STRING DOm-Intro-13
2117: PPUSH
2118: CALL_OW 94
// Say ( Schulz , DL-Intro-14 ) ;
2122: LD_EXP 18
2126: PPUSH
2127: LD_STRING DL-Intro-14
2129: PPUSH
2130: CALL_OW 88
// ComExitVehicle ( Schulz ) ;
2134: LD_EXP 18
2138: PPUSH
2139: CALL_OW 121
// wait ( 0 0$0.3 ) ;
2143: LD_INT 10
2145: PPUSH
2146: CALL_OW 67
// ComMoveXY ( Schulz , 73 , 17 ) ;
2150: LD_EXP 18
2154: PPUSH
2155: LD_INT 73
2157: PPUSH
2158: LD_INT 17
2160: PPUSH
2161: CALL_OW 111
// wait ( 0 0$2 ) ;
2165: LD_INT 70
2167: PPUSH
2168: CALL_OW 67
// Say ( Schulz , DL-Intro-15 ) ;
2172: LD_EXP 18
2176: PPUSH
2177: LD_STRING DL-Intro-15
2179: PPUSH
2180: CALL_OW 88
// Say ( Lemmy , DLt-Intro-16 ) ;
2184: LD_EXP 20
2188: PPUSH
2189: LD_STRING DLt-Intro-16
2191: PPUSH
2192: CALL_OW 88
// Say ( Lemmy , DLt-Intro-17 ) ;
2196: LD_EXP 20
2200: PPUSH
2201: LD_STRING DLt-Intro-17
2203: PPUSH
2204: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2208: LD_INT 35
2210: PPUSH
2211: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) ;
2215: LD_INT 22
2217: PUSH
2218: LD_INT 2
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 30
2227: PUSH
2228: LD_INT 0
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PPUSH
2239: CALL_OW 69
2243: IFFALSE 2208
// wait ( 0 0$2 ) ;
2245: LD_INT 70
2247: PPUSH
2248: CALL_OW 67
// Video ( false ) ;
2252: LD_INT 0
2254: PPUSH
2255: CALL 41897 0 1
// tick := 0 ;
2259: LD_ADDR_OWVAR 1
2263: PUSH
2264: LD_INT 0
2266: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
2267: LD_STRING M1
2269: PPUSH
2270: CALL_OW 337
// SetRestrict ( b_depot , 2 , state_disabled ) ;
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 2
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 324
// repeat wait ( 0 0$1 ) ;
2287: LD_INT 35
2289: PPUSH
2290: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_constructed ] ] ) ;
2294: LD_INT 22
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 30
2306: PUSH
2307: LD_INT 0
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: LD_INT 57
2316: PUSH
2317: EMPTY
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: PPUSH
2325: CALL_OW 69
2329: IFFALSE 2287
// DialogueOn ;
2331: CALL_OW 6
// Say ( Schulz , DL-Intro-18 ) ;
2335: LD_EXP 18
2339: PPUSH
2340: LD_STRING DL-Intro-18
2342: PPUSH
2343: CALL_OW 88
// Say ( Schulz , DL-Intro-19 ) ;
2347: LD_EXP 18
2351: PPUSH
2352: LD_STRING DL-Intro-19
2354: PPUSH
2355: CALL_OW 88
// Say ( Schulz , DL-Intro-20 ) ;
2359: LD_EXP 18
2363: PPUSH
2364: LD_STRING DL-Intro-20
2366: PPUSH
2367: CALL_OW 88
// Say ( Lemmy , DLt-Intro-21 ) ;
2371: LD_EXP 20
2375: PPUSH
2376: LD_STRING DLt-Intro-21
2378: PPUSH
2379: CALL_OW 88
// Say ( Lemmy , DLt-Intro-22 ) ;
2383: LD_EXP 20
2387: PPUSH
2388: LD_STRING DLt-Intro-22
2390: PPUSH
2391: CALL_OW 88
// Say ( Lemmy , DLt-Intro-23 ) ;
2395: LD_EXP 20
2399: PPUSH
2400: LD_STRING DLt-Intro-23
2402: PPUSH
2403: CALL_OW 88
// Say ( Schulz , DL-Intro-24 ) ;
2407: LD_EXP 18
2411: PPUSH
2412: LD_STRING DL-Intro-24
2414: PPUSH
2415: CALL_OW 88
// Say ( Lemmy , DLt-Intro-25 ) ;
2419: LD_EXP 20
2423: PPUSH
2424: LD_STRING DLt-Intro-25
2426: PPUSH
2427: CALL_OW 88
// DialogueOff ;
2431: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2435: LD_STRING M2
2437: PPUSH
2438: CALL_OW 337
// Query ( Prepare ) ;
2442: LD_STRING Prepare
2444: PPUSH
2445: CALL_OW 97
// end ;
2449: LD_VAR 0 1
2453: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_opto ] ] ) do
2454: LD_INT 22
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 30
2466: PUSH
2467: LD_INT 15
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PPUSH
2478: CALL_OW 69
2482: IFFALSE 2499
2484: GO 2486
2486: DISABLE
// Say ( Schulz , DL-Cam-1 ) ;
2487: LD_EXP 18
2491: PPUSH
2492: LD_STRING DL-Cam-1
2494: PPUSH
2495: CALL_OW 88
2499: END
// every 0 0$1 trigger tick >= timeToHeikeDead div 2 do
2500: LD_OWVAR 1
2504: PUSH
2505: LD_EXP 4
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: GREATEREQUAL
2514: IFFALSE 2539
2516: GO 2518
2518: DISABLE
// begin DialogueOn ;
2519: CALL_OW 6
// Say ( Schulz , DL-Faster-1 ) ;
2523: LD_EXP 18
2527: PPUSH
2528: LD_STRING DL-Faster-1
2530: PPUSH
2531: CALL_OW 88
// DialogueOff ;
2535: CALL_OW 7
// end ;
2539: END
// every 0 0$1 trigger tick >= ( timeToHeikeDead div 2 ) + 5 5$00 do
2540: LD_OWVAR 1
2544: PUSH
2545: LD_EXP 4
2549: PUSH
2550: LD_INT 2
2552: DIV
2553: PUSH
2554: LD_INT 10500
2556: PLUS
2557: GREATEREQUAL
2558: IFFALSE 2583
2560: GO 2562
2562: DISABLE
// begin DialogueOn ;
2563: CALL_OW 6
// Say ( Schulz , DL-Faster-2 ) ;
2567: LD_EXP 18
2571: PPUSH
2572: LD_STRING DL-Faster-2
2574: PPUSH
2575: CALL_OW 88
// DialogueOff ;
2579: CALL_OW 7
// end ;
2583: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_btype , b_bunker ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_constructed ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) do
2584: LD_INT 22
2586: PUSH
2587: LD_INT 2
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 57
2596: PUSH
2597: EMPTY
2598: LIST
2599: PUSH
2600: LD_INT 2
2602: PUSH
2603: LD_INT 30
2605: PUSH
2606: LD_INT 6
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 30
2615: PUSH
2616: LD_INT 7
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 30
2625: PUSH
2626: LD_INT 8
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 69
2648: PUSH
2649: LD_INT 22
2651: PUSH
2652: LD_INT 2
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_INT 3
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: AND
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 2
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 57
2698: PUSH
2699: EMPTY
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 32
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: PPUSH
2717: CALL_OW 69
2721: PUSH
2722: LD_INT 3
2724: GREATEREQUAL
2725: AND
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 57
2739: PUSH
2740: EMPTY
2741: LIST
2742: PUSH
2743: LD_INT 30
2745: PUSH
2746: LD_INT 5
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 69
2762: AND
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 2
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 57
2776: PUSH
2777: EMPTY
2778: LIST
2779: PUSH
2780: LD_INT 30
2782: PUSH
2783: LD_INT 30
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: PPUSH
2795: CALL_OW 69
2799: AND
2800: PUSH
2801: LD_INT 22
2803: PUSH
2804: LD_INT 2
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 57
2813: PUSH
2814: EMPTY
2815: LIST
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 26
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 30
2832: PUSH
2833: LD_INT 28
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: PPUSH
2850: CALL_OW 69
2854: AND
2855: IFFALSE 2892
2857: GO 2859
2859: DISABLE
// begin if tick <= 10 10$00 then
2860: LD_OWVAR 1
2864: PUSH
2865: LD_INT 21000
2867: LESSEQUAL
2868: IFFALSE 2877
// SetAchievement ( ACH_BOB ) ;
2870: LD_STRING ACH_BOB
2872: PPUSH
2873: CALL_OW 543
// baseDone := true ;
2877: LD_ADDR_EXP 5
2881: PUSH
2882: LD_INT 1
2884: ST_TO_ADDR
// ChangeMissionObjectives ( M1out ) ;
2885: LD_STRING M1out
2887: PPUSH
2888: CALL_OW 337
// end ;
2892: END
// every 0 0$1 trigger baseDone and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] ] ] ] ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) do
2893: LD_EXP 5
2897: PUSH
2898: LD_INT 22
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 21
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 3
2920: PUSH
2921: LD_INT 2
2923: PUSH
2924: LD_INT 34
2926: PUSH
2927: LD_INT 32
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 34
2936: PUSH
2937: LD_INT 88
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: PPUSH
2958: CALL_OW 69
2962: PUSH
2963: LD_INT 22
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 21
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 23
2985: PUSH
2986: LD_INT 2
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PPUSH
2998: CALL_OW 69
3002: PPUSH
3003: CALL 6559 0 1
3007: GREATEREQUAL
3008: AND
3009: IFFALSE 3101
3011: GO 3013
3013: DISABLE
// begin DialogueOn ;
3014: CALL_OW 6
// Say ( Schulz , DL-Ready-1 ) ;
3018: LD_EXP 18
3022: PPUSH
3023: LD_STRING DL-Ready-1
3025: PPUSH
3026: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , nation_nature ] ] ) then
3030: LD_INT 22
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 23
3042: PUSH
3043: LD_INT 0
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 69
3058: IFFALSE 3072
// Say ( Schulz , DL-Ready-2 ) ;
3060: LD_EXP 18
3064: PPUSH
3065: LD_STRING DL-Ready-2
3067: PPUSH
3068: CALL_OW 88
// DialogueOff ;
3072: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3076: LD_STRING M3
3078: PPUSH
3079: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
3083: LD_INT 7
3085: PPUSH
3086: LD_INT 1
3088: PPUSH
3089: CALL_OW 424
// canGo := true ;
3093: LD_ADDR_EXP 6
3097: PUSH
3098: LD_INT 1
3100: ST_TO_ADDR
// end ;
3101: END
// every 0 0$3 trigger canGo and Count ( FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) ) >= Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] , [ f_nation , nation_arabian ] ] ) ) = 0 do var i , tmp , saveVehicles , otherVehicles , animals ;
3102: LD_EXP 6
3106: PUSH
3107: LD_INT 7
3109: PPUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 2
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 21
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 33
3132: PUSH
3133: LD_INT 1
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: LD_INT 58
3145: PUSH
3146: EMPTY
3147: LIST
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 70
3163: PPUSH
3164: CALL 6559 0 1
3168: PUSH
3169: LD_INT 22
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 21
3181: PUSH
3182: LD_INT 1
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 23
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 69
3208: PPUSH
3209: CALL 6559 0 1
3213: GREATEREQUAL
3214: AND
3215: PUSH
3216: LD_INT 22
3218: PUSH
3219: LD_INT 2
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_INT 21
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: LD_INT 55
3241: PUSH
3242: EMPTY
3243: LIST
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: LD_INT 23
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: PPUSH
3265: CALL_OW 69
3269: PPUSH
3270: CALL 6559 0 1
3274: PUSH
3275: LD_INT 0
3277: EQUAL
3278: AND
3279: IFFALSE 4332
3281: GO 3283
3283: DISABLE
3284: LD_INT 0
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// begin enable ;
3291: ENABLE
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
3292: LD_ADDR_VAR 0 2
3296: PUSH
3297: LD_INT 7
3299: PPUSH
3300: LD_INT 22
3302: PUSH
3303: LD_INT 2
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 21
3312: PUSH
3313: LD_INT 2
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PPUSH
3324: CALL_OW 70
3328: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ) then
3329: LD_VAR 0 2
3333: PPUSH
3334: LD_INT 2
3336: PUSH
3337: LD_INT 34
3339: PUSH
3340: LD_INT 88
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 34
3349: PUSH
3350: LD_INT 32
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 72
3366: IFFALSE 3377
// begin Query ( InvalidWeapon ) ;
3368: LD_STRING InvalidWeapon
3370: PPUSH
3371: CALL_OW 97
// exit ;
3375: GO 4332
// end ; if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
3377: LD_VAR 0 2
3381: PPUSH
3382: LD_INT 3
3384: PUSH
3385: LD_INT 24
3387: PUSH
3388: LD_INT 1000
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 72
3403: IFFALSE 3414
// begin Query ( HealthLevel ) ;
3405: LD_STRING HealthLevel
3407: PPUSH
3408: CALL_OW 97
// exit ;
3412: GO 4332
// end ; for i in tmp do
3414: LD_ADDR_VAR 0 1
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: FOR_IN
3425: IFFALSE 3470
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 80 then
3427: LD_VAR 0 1
3431: PPUSH
3432: CALL_OW 262
3436: PUSH
3437: LD_INT 1
3439: EQUAL
3440: PUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 261
3450: PUSH
3451: LD_INT 80
3453: LESS
3454: AND
3455: IFFALSE 3468
// begin Query ( FuelLevel ) ;
3457: LD_STRING FuelLevel
3459: PPUSH
3460: CALL_OW 97
// exit ;
3464: POP
3465: POP
3466: GO 4332
// end ;
3468: GO 3424
3470: POP
3471: POP
// disable ;
3472: DISABLE
// saveVehicles := [ ] ;
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: EMPTY
3479: ST_TO_ADDR
// for i in tmp do
3480: LD_ADDR_VAR 0 1
3484: PUSH
3485: LD_VAR 0 2
3489: PUSH
3490: FOR_IN
3491: IFFALSE 3600
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
3493: LD_ADDR_VAR 0 3
3497: PUSH
3498: LD_VAR 0 3
3502: PPUSH
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 265
3512: PUSH
3513: LD_VAR 0 1
3517: PPUSH
3518: CALL_OW 262
3522: PUSH
3523: LD_VAR 0 1
3527: PPUSH
3528: CALL_OW 263
3532: PUSH
3533: LD_VAR 0 1
3537: PPUSH
3538: CALL_OW 264
3542: PUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 248
3552: PUSH
3553: LD_VAR 0 1
3557: PPUSH
3558: CALL_OW 261
3562: PUSH
3563: LD_VAR 0 1
3567: PPUSH
3568: CALL_OW 271
3572: PUSH
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 311
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: PPUSH
3593: CALL 41925 0 2
3597: ST_TO_ADDR
3598: GO 3490
3600: POP
3601: POP
// otherVehicles := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) diff tmp ;
3602: LD_ADDR_VAR 0 4
3606: PUSH
3607: LD_INT 22
3609: PUSH
3610: LD_INT 2
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 21
3619: PUSH
3620: LD_INT 2
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 50
3629: PUSH
3630: EMPTY
3631: LIST
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: DIFF
3648: ST_TO_ADDR
// if otherVehicles then
3649: LD_VAR 0 4
3653: IFFALSE 3829
// begin tmp := [ ] ;
3655: LD_ADDR_VAR 0 2
3659: PUSH
3660: EMPTY
3661: ST_TO_ADDR
// for i in otherVehicles do
3662: LD_ADDR_VAR 0 1
3666: PUSH
3667: LD_VAR 0 4
3671: PUSH
3672: FOR_IN
3673: IFFALSE 3815
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
3675: LD_ADDR_VAR 0 2
3679: PUSH
3680: LD_VAR 0 2
3684: PPUSH
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 265
3694: PUSH
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL_OW 262
3704: PUSH
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL_OW 263
3714: PUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 264
3724: PUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 248
3734: PUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 261
3744: PUSH
3745: LD_VAR 0 1
3749: PPUSH
3750: CALL_OW 271
3754: PUSH
3755: LD_VAR 0 1
3759: PPUSH
3760: CALL_OW 250
3764: PUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: CALL_OW 251
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 254
3784: PUSH
3785: LD_VAR 0 1
3789: PPUSH
3790: CALL_OW 256
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: PPUSH
3808: CALL 41925 0 2
3812: ST_TO_ADDR
3813: GO 3672
3815: POP
3816: POP
// SaveVariable ( tmp , 09_otherVehicles ) ;
3817: LD_VAR 0 2
3821: PPUSH
3822: LD_STRING 09_otherVehicles
3824: PPUSH
3825: CALL_OW 39
// end ; if not UnitFilter ( saveVehicles , [ f_engine , engine_combustion ] ) then
3829: LD_VAR 0 3
3833: PPUSH
3834: LD_INT 32
3836: PUSH
3837: LD_INT 1
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL_OW 72
3848: NOT
3849: IFFALSE 3858
// SetAchievement ( ACH_GREEN ) ;
3851: LD_STRING ACH_GREEN
3853: PPUSH
3854: CALL_OW 543
// SaveCharacters ( Schulz , 09_Schulz ) ;
3858: LD_EXP 18
3862: PPUSH
3863: LD_STRING 09_Schulz
3865: PPUSH
3866: CALL_OW 38
// SaveVariable ( Schulz , 09_Schulz_ID ) ;
3870: LD_EXP 18
3874: PPUSH
3875: LD_STRING 09_Schulz_ID
3877: PPUSH
3878: CALL_OW 39
// SaveCharacters ( Lemmy , 09_Lemmy ) ;
3882: LD_EXP 20
3886: PPUSH
3887: LD_STRING 09_Lemmy
3889: PPUSH
3890: CALL_OW 38
// SaveVariable ( Lemmy , 09_Lemmy_ID ) ;
3894: LD_EXP 20
3898: PPUSH
3899: LD_STRING 09_Lemmy_ID
3901: PPUSH
3902: CALL_OW 39
// SaveCharacters ( Nia , 09_Nia ) ;
3906: LD_EXP 22
3910: PPUSH
3911: LD_STRING 09_Nia
3913: PPUSH
3914: CALL_OW 38
// SaveVariable ( Nia , 09_Nia_ID ) ;
3918: LD_EXP 22
3922: PPUSH
3923: LD_STRING 09_Nia_ID
3925: PPUSH
3926: CALL_OW 39
// SaveCharacters ( Mia , 09_Mia ) ;
3930: LD_EXP 21
3934: PPUSH
3935: LD_STRING 09_Mia
3937: PPUSH
3938: CALL_OW 38
// SaveVariable ( Mia , 09_Mia_ID ) ;
3942: LD_EXP 21
3946: PPUSH
3947: LD_STRING 09_Mia_ID
3949: PPUSH
3950: CALL_OW 39
// SaveCharacters ( Jenna , 09_Jenna ) ;
3954: LD_EXP 23
3958: PPUSH
3959: LD_STRING 09_Jenna
3961: PPUSH
3962: CALL_OW 38
// SaveVariable ( Jenna , 09_Jenna_ID ) ;
3966: LD_EXP 23
3970: PPUSH
3971: LD_STRING 09_Jenna_ID
3973: PPUSH
3974: CALL_OW 39
// SaveCharacters ( schulzSecondSquad , 09_schulzSecondSquad ) ;
3978: LD_EXP 26
3982: PPUSH
3983: LD_STRING 09_schulzSecondSquad
3985: PPUSH
3986: CALL_OW 38
// for i := 1 to schulzSecondSquad do
3990: LD_ADDR_VAR 0 1
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_EXP 26
4004: PUSH
4005: FOR_TO
4006: IFFALSE 4034
// SaveVariable ( schulzSecondSquad [ i ] , 09_random_ID_ & i ) ;
4008: LD_EXP 26
4012: PUSH
4013: LD_VAR 0 1
4017: ARRAY
4018: PPUSH
4019: LD_STRING 09_random_ID_
4021: PUSH
4022: LD_VAR 0 1
4026: STR
4027: PPUSH
4028: CALL_OW 39
4032: GO 4005
4034: POP
4035: POP
// SaveVariable ( saveVehicles , 09_vehicles ) ;
4036: LD_VAR 0 3
4040: PPUSH
4041: LD_STRING 09_vehicles
4043: PPUSH
4044: CALL_OW 39
// SaveVariable ( tick , 09_tick ) ;
4048: LD_OWVAR 1
4052: PPUSH
4053: LD_STRING 09_tick
4055: PPUSH
4056: CALL_OW 39
// SaveEnvironment ( mapArea , 09_env ) ;
4060: LD_INT 6
4062: PPUSH
4063: LD_STRING 09_env
4065: PPUSH
4066: CALL 903 0 2
// SaveTech ( 2 , 09_tech ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_STRING 09_tech
4075: PPUSH
4076: CALL 1288 0 2
// SaveMaterials ( 2 , 09_materials ) ;
4080: LD_INT 2
4082: PPUSH
4083: LD_STRING 09_materials
4085: PPUSH
4086: CALL 940 0 2
// SaveBase ( 2 , 09_buildings ) ;
4090: LD_INT 2
4092: PPUSH
4093: LD_STRING 09_buildings
4095: PPUSH
4096: CALL 1079 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09_apes ) ;
4100: LD_INT 22
4102: PUSH
4103: LD_INT 2
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 23
4112: PUSH
4113: LD_INT 0
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PPUSH
4124: CALL_OW 69
4128: PPUSH
4129: LD_STRING 09_apes
4131: PPUSH
4132: CALL_OW 38
// SaveVariable ( timeToHeikeDead , 09_timeToHeikeDead ) ;
4136: LD_EXP 4
4140: PPUSH
4141: LD_STRING 09_timeToHeikeDead
4143: PPUSH
4144: CALL_OW 39
// SaveVariable ( hiddenCameras , 09_cameras ) ;
4148: LD_EXP 3
4152: PPUSH
4153: LD_STRING 09_cameras
4155: PPUSH
4156: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_ok ] ] ) ;
4160: LD_ADDR_VAR 0 2
4164: PUSH
4165: LD_INT 22
4167: PUSH
4168: LD_INT 0
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 23
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 50
4187: PUSH
4188: EMPTY
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 69
4200: ST_TO_ADDR
// if tmp then
4201: LD_VAR 0 2
4205: IFFALSE 4315
// begin animals := [ ] ;
4207: LD_ADDR_VAR 0 5
4211: PUSH
4212: EMPTY
4213: ST_TO_ADDR
// for i in tmp do
4214: LD_ADDR_VAR 0 1
4218: PUSH
4219: LD_VAR 0 2
4223: PUSH
4224: FOR_IN
4225: IFFALSE 4301
// animals := Join ( animals , [ GetClass ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
4227: LD_ADDR_VAR 0 5
4231: PUSH
4232: LD_VAR 0 5
4236: PPUSH
4237: LD_VAR 0 1
4241: PPUSH
4242: CALL_OW 257
4246: PUSH
4247: LD_VAR 0 1
4251: PPUSH
4252: CALL_OW 250
4256: PUSH
4257: LD_VAR 0 1
4261: PPUSH
4262: CALL_OW 251
4266: PUSH
4267: LD_VAR 0 1
4271: PPUSH
4272: CALL_OW 254
4276: PUSH
4277: LD_VAR 0 1
4281: PPUSH
4282: CALL_OW 256
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: PPUSH
4294: CALL 41925 0 2
4298: ST_TO_ADDR
4299: GO 4224
4301: POP
4302: POP
// SaveVariable ( animals , 09_animals ) ;
4303: LD_VAR 0 5
4307: PPUSH
4308: LD_STRING 09_animals
4310: PPUSH
4311: CALL_OW 39
// end ; wait ( 3 ) ;
4315: LD_INT 3
4317: PPUSH
4318: CALL_OW 67
// ChangeMap ( 1 , %2 ) ;
4322: LD_INT 1
4324: PPUSH
4325: LD_STRING %2
4327: PPUSH
4328: CALL_OW 340
// end ; end_of_file
4332: PPOPN 5
4334: END
// every 0 0$20 + 0 0$30 trigger tick < 7 7$00 do
4335: LD_OWVAR 1
4339: PUSH
4340: LD_INT 14700
4342: LESS
4343: IFFALSE 4376
4345: GO 4347
4347: DISABLE
// begin enable ;
4348: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 85 , 44 , 30 , true ) ;
4349: LD_INT 1
4351: PPUSH
4352: LD_INT 5
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: LD_INT 85
4362: PPUSH
4363: LD_INT 44
4365: PPUSH
4366: LD_INT 30
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 56
// end ;
4376: END
// every 0 0$29 trigger tick < 20 20$00 do
4377: LD_OWVAR 1
4381: PUSH
4382: LD_INT 42000
4384: LESS
4385: IFFALSE 4456
4387: GO 4389
4389: DISABLE
// begin enable ;
4390: ENABLE
// if Prob ( 50 ) then
4391: LD_INT 50
4393: PPUSH
4394: CALL_OW 13
4398: IFFALSE 4429
// CreateCratesXYR ( rand ( 1 , 5 ) , 72 , 109 , 22 , true ) else
4400: LD_INT 1
4402: PPUSH
4403: LD_INT 5
4405: PPUSH
4406: CALL_OW 12
4410: PPUSH
4411: LD_INT 72
4413: PPUSH
4414: LD_INT 109
4416: PPUSH
4417: LD_INT 22
4419: PPUSH
4420: LD_INT 1
4422: PPUSH
4423: CALL_OW 56
4427: GO 4456
// CreateCratesXYR ( rand ( 1 , 5 ) , 140 , 73 , 22 , true ) end ; end_of_file
4429: LD_INT 1
4431: PPUSH
4432: LD_INT 5
4434: PPUSH
4435: CALL_OW 12
4439: PPUSH
4440: LD_INT 140
4442: PPUSH
4443: LD_INT 73
4445: PPUSH
4446: LD_INT 22
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: CALL_OW 56
4456: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
// if exist_mode then
4461: LD_VAR 0 2
4465: IFFALSE 4490
// unit := CreateCharacter ( prefix & ident ) else
4467: LD_ADDR_VAR 0 5
4471: PUSH
4472: LD_VAR 0 3
4476: PUSH
4477: LD_VAR 0 1
4481: STR
4482: PPUSH
4483: CALL_OW 34
4487: ST_TO_ADDR
4488: GO 4505
// unit := NewCharacter ( ident ) ;
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: LD_VAR 0 1
4499: PPUSH
4500: CALL_OW 25
4504: ST_TO_ADDR
// result := unit ;
4505: LD_ADDR_VAR 0 4
4509: PUSH
4510: LD_VAR 0 5
4514: ST_TO_ADDR
// end ;
4515: LD_VAR 0 4
4519: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4520: LD_INT 0
4522: PPUSH
4523: PPUSH
// if not side or not nation then
4524: LD_VAR 0 1
4528: NOT
4529: PUSH
4530: LD_VAR 0 2
4534: NOT
4535: OR
4536: IFFALSE 4540
// exit ;
4538: GO 5308
// case nation of nation_american :
4540: LD_VAR 0 2
4544: PUSH
4545: LD_INT 1
4547: DOUBLE
4548: EQUAL
4549: IFTRUE 4553
4551: GO 4767
4553: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4554: LD_ADDR_VAR 0 4
4558: PUSH
4559: LD_INT 35
4561: PUSH
4562: LD_INT 45
4564: PUSH
4565: LD_INT 46
4567: PUSH
4568: LD_INT 47
4570: PUSH
4571: LD_INT 82
4573: PUSH
4574: LD_INT 83
4576: PUSH
4577: LD_INT 84
4579: PUSH
4580: LD_INT 85
4582: PUSH
4583: LD_INT 86
4585: PUSH
4586: LD_INT 1
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: LD_INT 6
4594: PUSH
4595: LD_INT 15
4597: PUSH
4598: LD_INT 16
4600: PUSH
4601: LD_INT 7
4603: PUSH
4604: LD_INT 12
4606: PUSH
4607: LD_INT 13
4609: PUSH
4610: LD_INT 10
4612: PUSH
4613: LD_INT 14
4615: PUSH
4616: LD_INT 20
4618: PUSH
4619: LD_INT 21
4621: PUSH
4622: LD_INT 22
4624: PUSH
4625: LD_INT 25
4627: PUSH
4628: LD_INT 32
4630: PUSH
4631: LD_INT 27
4633: PUSH
4634: LD_INT 36
4636: PUSH
4637: LD_INT 69
4639: PUSH
4640: LD_INT 39
4642: PUSH
4643: LD_INT 34
4645: PUSH
4646: LD_INT 40
4648: PUSH
4649: LD_INT 48
4651: PUSH
4652: LD_INT 49
4654: PUSH
4655: LD_INT 50
4657: PUSH
4658: LD_INT 51
4660: PUSH
4661: LD_INT 52
4663: PUSH
4664: LD_INT 53
4666: PUSH
4667: LD_INT 54
4669: PUSH
4670: LD_INT 55
4672: PUSH
4673: LD_INT 56
4675: PUSH
4676: LD_INT 57
4678: PUSH
4679: LD_INT 58
4681: PUSH
4682: LD_INT 59
4684: PUSH
4685: LD_INT 60
4687: PUSH
4688: LD_INT 61
4690: PUSH
4691: LD_INT 62
4693: PUSH
4694: LD_INT 80
4696: PUSH
4697: LD_INT 82
4699: PUSH
4700: LD_INT 83
4702: PUSH
4703: LD_INT 84
4705: PUSH
4706: LD_INT 85
4708: PUSH
4709: LD_INT 86
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 5232
4767: LD_INT 2
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 5001
4775: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4776: LD_ADDR_VAR 0 4
4780: PUSH
4781: LD_INT 35
4783: PUSH
4784: LD_INT 45
4786: PUSH
4787: LD_INT 46
4789: PUSH
4790: LD_INT 47
4792: PUSH
4793: LD_INT 82
4795: PUSH
4796: LD_INT 83
4798: PUSH
4799: LD_INT 84
4801: PUSH
4802: LD_INT 85
4804: PUSH
4805: LD_INT 87
4807: PUSH
4808: LD_INT 70
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: LD_INT 11
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: LD_INT 4
4822: PUSH
4823: LD_INT 5
4825: PUSH
4826: LD_INT 6
4828: PUSH
4829: LD_INT 15
4831: PUSH
4832: LD_INT 18
4834: PUSH
4835: LD_INT 7
4837: PUSH
4838: LD_INT 17
4840: PUSH
4841: LD_INT 8
4843: PUSH
4844: LD_INT 20
4846: PUSH
4847: LD_INT 21
4849: PUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 72
4855: PUSH
4856: LD_INT 26
4858: PUSH
4859: LD_INT 69
4861: PUSH
4862: LD_INT 39
4864: PUSH
4865: LD_INT 40
4867: PUSH
4868: LD_INT 41
4870: PUSH
4871: LD_INT 42
4873: PUSH
4874: LD_INT 43
4876: PUSH
4877: LD_INT 48
4879: PUSH
4880: LD_INT 49
4882: PUSH
4883: LD_INT 50
4885: PUSH
4886: LD_INT 51
4888: PUSH
4889: LD_INT 52
4891: PUSH
4892: LD_INT 53
4894: PUSH
4895: LD_INT 54
4897: PUSH
4898: LD_INT 55
4900: PUSH
4901: LD_INT 56
4903: PUSH
4904: LD_INT 60
4906: PUSH
4907: LD_INT 61
4909: PUSH
4910: LD_INT 62
4912: PUSH
4913: LD_INT 66
4915: PUSH
4916: LD_INT 67
4918: PUSH
4919: LD_INT 68
4921: PUSH
4922: LD_INT 81
4924: PUSH
4925: LD_INT 82
4927: PUSH
4928: LD_INT 83
4930: PUSH
4931: LD_INT 84
4933: PUSH
4934: LD_INT 85
4936: PUSH
4937: LD_INT 87
4939: PUSH
4940: LD_INT 88
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: ST_TO_ADDR
4999: GO 5232
5001: LD_INT 3
5003: DOUBLE
5004: EQUAL
5005: IFTRUE 5009
5007: GO 5231
5009: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5010: LD_ADDR_VAR 0 4
5014: PUSH
5015: LD_INT 46
5017: PUSH
5018: LD_INT 47
5020: PUSH
5021: LD_INT 1
5023: PUSH
5024: LD_INT 2
5026: PUSH
5027: LD_INT 82
5029: PUSH
5030: LD_INT 83
5032: PUSH
5033: LD_INT 84
5035: PUSH
5036: LD_INT 85
5038: PUSH
5039: LD_INT 86
5041: PUSH
5042: LD_INT 11
5044: PUSH
5045: LD_INT 9
5047: PUSH
5048: LD_INT 20
5050: PUSH
5051: LD_INT 19
5053: PUSH
5054: LD_INT 21
5056: PUSH
5057: LD_INT 24
5059: PUSH
5060: LD_INT 22
5062: PUSH
5063: LD_INT 25
5065: PUSH
5066: LD_INT 28
5068: PUSH
5069: LD_INT 29
5071: PUSH
5072: LD_INT 30
5074: PUSH
5075: LD_INT 31
5077: PUSH
5078: LD_INT 37
5080: PUSH
5081: LD_INT 38
5083: PUSH
5084: LD_INT 32
5086: PUSH
5087: LD_INT 27
5089: PUSH
5090: LD_INT 33
5092: PUSH
5093: LD_INT 69
5095: PUSH
5096: LD_INT 39
5098: PUSH
5099: LD_INT 34
5101: PUSH
5102: LD_INT 40
5104: PUSH
5105: LD_INT 71
5107: PUSH
5108: LD_INT 23
5110: PUSH
5111: LD_INT 44
5113: PUSH
5114: LD_INT 48
5116: PUSH
5117: LD_INT 49
5119: PUSH
5120: LD_INT 50
5122: PUSH
5123: LD_INT 51
5125: PUSH
5126: LD_INT 52
5128: PUSH
5129: LD_INT 53
5131: PUSH
5132: LD_INT 54
5134: PUSH
5135: LD_INT 55
5137: PUSH
5138: LD_INT 56
5140: PUSH
5141: LD_INT 57
5143: PUSH
5144: LD_INT 58
5146: PUSH
5147: LD_INT 59
5149: PUSH
5150: LD_INT 63
5152: PUSH
5153: LD_INT 64
5155: PUSH
5156: LD_INT 65
5158: PUSH
5159: LD_INT 82
5161: PUSH
5162: LD_INT 83
5164: PUSH
5165: LD_INT 84
5167: PUSH
5168: LD_INT 85
5170: PUSH
5171: LD_INT 86
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: ST_TO_ADDR
5229: GO 5232
5231: POP
// if state > - 1 and state < 3 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 1
5239: NEG
5240: GREATER
5241: PUSH
5242: LD_VAR 0 3
5246: PUSH
5247: LD_INT 3
5249: LESS
5250: AND
5251: IFFALSE 5308
// for i in result do
5253: LD_ADDR_VAR 0 5
5257: PUSH
5258: LD_VAR 0 4
5262: PUSH
5263: FOR_IN
5264: IFFALSE 5306
// if GetTech ( i , side ) <> state then
5266: LD_VAR 0 5
5270: PPUSH
5271: LD_VAR 0 1
5275: PPUSH
5276: CALL_OW 321
5280: PUSH
5281: LD_VAR 0 3
5285: NONEQUAL
5286: IFFALSE 5304
// result := result diff i ;
5288: LD_ADDR_VAR 0 4
5292: PUSH
5293: LD_VAR 0 4
5297: PUSH
5298: LD_VAR 0 5
5302: DIFF
5303: ST_TO_ADDR
5304: GO 5263
5306: POP
5307: POP
// end ;
5308: LD_VAR 0 4
5312: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5313: LD_INT 0
5315: PPUSH
5316: PPUSH
5317: PPUSH
// result := true ;
5318: LD_ADDR_VAR 0 3
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5326: LD_ADDR_VAR 0 5
5330: PUSH
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 480
5340: ST_TO_ADDR
// if not tmp then
5341: LD_VAR 0 5
5345: NOT
5346: IFFALSE 5350
// exit ;
5348: GO 5399
// for i in tmp do
5350: LD_ADDR_VAR 0 4
5354: PUSH
5355: LD_VAR 0 5
5359: PUSH
5360: FOR_IN
5361: IFFALSE 5397
// if GetTech ( i , side ) <> state_researched then
5363: LD_VAR 0 4
5367: PPUSH
5368: LD_VAR 0 1
5372: PPUSH
5373: CALL_OW 321
5377: PUSH
5378: LD_INT 2
5380: NONEQUAL
5381: IFFALSE 5395
// begin result := false ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: LD_INT 0
5390: ST_TO_ADDR
// exit ;
5391: POP
5392: POP
5393: GO 5399
// end ;
5395: GO 5360
5397: POP
5398: POP
// end ;
5399: LD_VAR 0 3
5403: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5404: LD_INT 0
5406: PPUSH
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
5417: PPUSH
5418: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5419: LD_VAR 0 1
5423: NOT
5424: PUSH
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 257
5434: PUSH
5435: LD_INT 9
5437: NONEQUAL
5438: OR
5439: IFFALSE 5443
// exit ;
5441: GO 6016
// side := GetSide ( unit ) ;
5443: LD_ADDR_VAR 0 9
5447: PUSH
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 255
5457: ST_TO_ADDR
// tech_space := tech_spacanom ;
5458: LD_ADDR_VAR 0 12
5462: PUSH
5463: LD_INT 29
5465: ST_TO_ADDR
// tech_time := tech_taurad ;
5466: LD_ADDR_VAR 0 13
5470: PUSH
5471: LD_INT 28
5473: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5474: LD_ADDR_VAR 0 11
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5489: LD_VAR 0 11
5493: PPUSH
5494: CALL_OW 247
5498: PUSH
5499: LD_INT 2
5501: EQUAL
5502: IFFALSE 5506
// exit ;
5504: GO 6016
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5506: LD_ADDR_VAR 0 8
5510: PUSH
5511: LD_INT 81
5513: PUSH
5514: LD_VAR 0 9
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: LD_INT 21
5528: PUSH
5529: LD_INT 3
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// if not tmp then
5549: LD_VAR 0 8
5553: NOT
5554: IFFALSE 5558
// exit ;
5556: GO 6016
// if in_unit then
5558: LD_VAR 0 11
5562: IFFALSE 5586
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5564: LD_ADDR_VAR 0 10
5568: PUSH
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 11
5578: PPUSH
5579: CALL_OW 74
5583: ST_TO_ADDR
5584: GO 5606
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_VAR 0 8
5595: PPUSH
5596: LD_VAR 0 1
5600: PPUSH
5601: CALL_OW 74
5605: ST_TO_ADDR
// if not enemy then
5606: LD_VAR 0 10
5610: NOT
5611: IFFALSE 5615
// exit ;
5613: GO 6016
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5615: LD_VAR 0 11
5619: PUSH
5620: LD_VAR 0 11
5624: PPUSH
5625: LD_VAR 0 10
5629: PPUSH
5630: CALL_OW 296
5634: PUSH
5635: LD_INT 13
5637: GREATER
5638: AND
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_VAR 0 10
5649: PPUSH
5650: CALL_OW 296
5654: PUSH
5655: LD_INT 12
5657: GREATER
5658: OR
5659: IFFALSE 5663
// exit ;
5661: GO 6016
// missile := [ 1 ] ;
5663: LD_ADDR_VAR 0 14
5667: PUSH
5668: LD_INT 1
5670: PUSH
5671: EMPTY
5672: LIST
5673: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5674: LD_VAR 0 9
5678: PPUSH
5679: LD_VAR 0 12
5683: PPUSH
5684: CALL_OW 325
5688: IFFALSE 5717
// missile := Replace ( missile , missile + 1 , 2 ) ;
5690: LD_ADDR_VAR 0 14
5694: PUSH
5695: LD_VAR 0 14
5699: PPUSH
5700: LD_VAR 0 14
5704: PUSH
5705: LD_INT 1
5707: PLUS
5708: PPUSH
5709: LD_INT 2
5711: PPUSH
5712: CALL_OW 1
5716: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5717: LD_VAR 0 9
5721: PPUSH
5722: LD_VAR 0 13
5726: PPUSH
5727: CALL_OW 325
5731: PUSH
5732: LD_VAR 0 10
5736: PPUSH
5737: CALL_OW 255
5741: PPUSH
5742: LD_VAR 0 13
5746: PPUSH
5747: CALL_OW 325
5751: NOT
5752: AND
5753: IFFALSE 5782
// missile := Replace ( missile , missile + 1 , 3 ) ;
5755: LD_ADDR_VAR 0 14
5759: PUSH
5760: LD_VAR 0 14
5764: PPUSH
5765: LD_VAR 0 14
5769: PUSH
5770: LD_INT 1
5772: PLUS
5773: PPUSH
5774: LD_INT 3
5776: PPUSH
5777: CALL_OW 1
5781: ST_TO_ADDR
// if missile < 2 then
5782: LD_VAR 0 14
5786: PUSH
5787: LD_INT 2
5789: LESS
5790: IFFALSE 5794
// exit ;
5792: GO 6016
// x := GetX ( enemy ) ;
5794: LD_ADDR_VAR 0 4
5798: PUSH
5799: LD_VAR 0 10
5803: PPUSH
5804: CALL_OW 250
5808: ST_TO_ADDR
// y := GetY ( enemy ) ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: LD_VAR 0 10
5818: PPUSH
5819: CALL_OW 251
5823: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5824: LD_ADDR_VAR 0 6
5828: PUSH
5829: LD_VAR 0 4
5833: PUSH
5834: LD_INT 1
5836: NEG
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: CALL_OW 12
5845: PLUS
5846: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: LD_VAR 0 5
5856: PUSH
5857: LD_INT 1
5859: NEG
5860: PPUSH
5861: LD_INT 1
5863: PPUSH
5864: CALL_OW 12
5868: PLUS
5869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5870: LD_VAR 0 6
5874: PPUSH
5875: LD_VAR 0 7
5879: PPUSH
5880: CALL_OW 488
5884: NOT
5885: IFFALSE 5907
// begin _x := x ;
5887: LD_ADDR_VAR 0 6
5891: PUSH
5892: LD_VAR 0 4
5896: ST_TO_ADDR
// _y := y ;
5897: LD_ADDR_VAR 0 7
5901: PUSH
5902: LD_VAR 0 5
5906: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5907: LD_ADDR_VAR 0 3
5911: PUSH
5912: LD_INT 1
5914: PPUSH
5915: LD_VAR 0 14
5919: PPUSH
5920: CALL_OW 12
5924: ST_TO_ADDR
// case i of 1 :
5925: LD_VAR 0 3
5929: PUSH
5930: LD_INT 1
5932: DOUBLE
5933: EQUAL
5934: IFTRUE 5938
5936: GO 5955
5938: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5939: LD_VAR 0 1
5943: PPUSH
5944: LD_VAR 0 10
5948: PPUSH
5949: CALL_OW 115
5953: GO 6016
5955: LD_INT 2
5957: DOUBLE
5958: EQUAL
5959: IFTRUE 5963
5961: GO 5985
5963: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_VAR 0 6
5973: PPUSH
5974: LD_VAR 0 7
5978: PPUSH
5979: CALL_OW 153
5983: GO 6016
5985: LD_INT 3
5987: DOUBLE
5988: EQUAL
5989: IFTRUE 5993
5991: GO 6015
5993: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5994: LD_VAR 0 1
5998: PPUSH
5999: LD_VAR 0 6
6003: PPUSH
6004: LD_VAR 0 7
6008: PPUSH
6009: CALL_OW 154
6013: GO 6016
6015: POP
// end ;
6016: LD_VAR 0 2
6020: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
// if not unit or not building then
6029: LD_VAR 0 1
6033: NOT
6034: PUSH
6035: LD_VAR 0 2
6039: NOT
6040: OR
6041: IFFALSE 6045
// exit ;
6043: GO 6203
// x := GetX ( building ) ;
6045: LD_ADDR_VAR 0 5
6049: PUSH
6050: LD_VAR 0 2
6054: PPUSH
6055: CALL_OW 250
6059: ST_TO_ADDR
// y := GetY ( building ) ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: LD_VAR 0 2
6069: PPUSH
6070: CALL_OW 251
6074: ST_TO_ADDR
// for i = 0 to 5 do
6075: LD_ADDR_VAR 0 4
6079: PUSH
6080: DOUBLE
6081: LD_INT 0
6083: DEC
6084: ST_TO_ADDR
6085: LD_INT 5
6087: PUSH
6088: FOR_TO
6089: IFFALSE 6201
// begin _x := ShiftX ( x , i , 3 ) ;
6091: LD_ADDR_VAR 0 7
6095: PUSH
6096: LD_VAR 0 5
6100: PPUSH
6101: LD_VAR 0 4
6105: PPUSH
6106: LD_INT 3
6108: PPUSH
6109: CALL_OW 272
6113: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6114: LD_ADDR_VAR 0 8
6118: PUSH
6119: LD_VAR 0 6
6123: PPUSH
6124: LD_VAR 0 4
6128: PPUSH
6129: LD_INT 3
6131: PPUSH
6132: CALL_OW 273
6136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6137: LD_VAR 0 7
6141: PPUSH
6142: LD_VAR 0 8
6146: PPUSH
6147: CALL_OW 488
6151: NOT
6152: IFFALSE 6156
// continue ;
6154: GO 6088
// if HexInfo ( _x , _y ) = 0 then
6156: LD_VAR 0 7
6160: PPUSH
6161: LD_VAR 0 8
6165: PPUSH
6166: CALL_OW 428
6170: PUSH
6171: LD_INT 0
6173: EQUAL
6174: IFFALSE 6199
// begin ComMoveXY ( unit , _x , _y ) ;
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_VAR 0 7
6185: PPUSH
6186: LD_VAR 0 8
6190: PPUSH
6191: CALL_OW 111
// exit ;
6195: POP
6196: POP
6197: GO 6203
// end ; end ;
6199: GO 6088
6201: POP
6202: POP
// end ;
6203: LD_VAR 0 3
6207: RET
// export function ScanBase ( side , base_area ) ; begin
6208: LD_INT 0
6210: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6211: LD_ADDR_VAR 0 3
6215: PUSH
6216: LD_VAR 0 2
6220: PPUSH
6221: LD_INT 81
6223: PUSH
6224: LD_VAR 0 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 70
6237: ST_TO_ADDR
// end ;
6238: LD_VAR 0 3
6242: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6243: LD_INT 0
6245: PPUSH
6246: PPUSH
6247: PPUSH
6248: PPUSH
// result := false ;
6249: LD_ADDR_VAR 0 2
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// side := GetSide ( unit ) ;
6257: LD_ADDR_VAR 0 3
6261: PUSH
6262: LD_VAR 0 1
6266: PPUSH
6267: CALL_OW 255
6271: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: CALL_OW 248
6286: ST_TO_ADDR
// case nat of 1 :
6287: LD_VAR 0 4
6291: PUSH
6292: LD_INT 1
6294: DOUBLE
6295: EQUAL
6296: IFTRUE 6300
6298: GO 6311
6300: POP
// tech := tech_lassight ; 2 :
6301: LD_ADDR_VAR 0 5
6305: PUSH
6306: LD_INT 12
6308: ST_TO_ADDR
6309: GO 6350
6311: LD_INT 2
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6330
6319: POP
// tech := tech_mortar ; 3 :
6320: LD_ADDR_VAR 0 5
6324: PUSH
6325: LD_INT 41
6327: ST_TO_ADDR
6328: GO 6350
6330: LD_INT 3
6332: DOUBLE
6333: EQUAL
6334: IFTRUE 6338
6336: GO 6349
6338: POP
// tech := tech_bazooka ; end ;
6339: LD_ADDR_VAR 0 5
6343: PUSH
6344: LD_INT 44
6346: ST_TO_ADDR
6347: GO 6350
6349: POP
// if Researched ( side , tech ) then
6350: LD_VAR 0 3
6354: PPUSH
6355: LD_VAR 0 5
6359: PPUSH
6360: CALL_OW 325
6364: IFFALSE 6391
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_INT 5
6373: PUSH
6374: LD_INT 8
6376: PUSH
6377: LD_INT 9
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_VAR 0 4
6389: ARRAY
6390: ST_TO_ADDR
// end ;
6391: LD_VAR 0 2
6395: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6396: LD_INT 0
6398: PPUSH
6399: PPUSH
6400: PPUSH
// if not mines then
6401: LD_VAR 0 2
6405: NOT
6406: IFFALSE 6410
// exit ;
6408: GO 6554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6410: LD_ADDR_VAR 0 5
6414: PUSH
6415: LD_INT 81
6417: PUSH
6418: LD_VAR 0 1
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 21
6432: PUSH
6433: LD_INT 3
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// for i in mines do
6453: LD_ADDR_VAR 0 4
6457: PUSH
6458: LD_VAR 0 2
6462: PUSH
6463: FOR_IN
6464: IFFALSE 6552
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6466: LD_VAR 0 4
6470: PUSH
6471: LD_INT 1
6473: ARRAY
6474: PPUSH
6475: LD_VAR 0 4
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: CALL_OW 458
6488: NOT
6489: IFFALSE 6493
// continue ;
6491: GO 6463
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6493: LD_VAR 0 4
6497: PUSH
6498: LD_INT 1
6500: ARRAY
6501: PPUSH
6502: LD_VAR 0 4
6506: PUSH
6507: LD_INT 2
6509: ARRAY
6510: PPUSH
6511: CALL_OW 428
6515: PUSH
6516: LD_VAR 0 5
6520: IN
6521: IFFALSE 6550
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6523: LD_VAR 0 4
6527: PUSH
6528: LD_INT 1
6530: ARRAY
6531: PPUSH
6532: LD_VAR 0 4
6536: PUSH
6537: LD_INT 2
6539: ARRAY
6540: PPUSH
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 456
// end ;
6550: GO 6463
6552: POP
6553: POP
// end ;
6554: LD_VAR 0 3
6558: RET
// export function Count ( array ) ; var i ; begin
6559: LD_INT 0
6561: PPUSH
6562: PPUSH
// result := 0 ;
6563: LD_ADDR_VAR 0 2
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// for i in array do
6571: LD_ADDR_VAR 0 3
6575: PUSH
6576: LD_VAR 0 1
6580: PUSH
6581: FOR_IN
6582: IFFALSE 6606
// if i then
6584: LD_VAR 0 3
6588: IFFALSE 6604
// result := result + 1 ;
6590: LD_ADDR_VAR 0 2
6594: PUSH
6595: LD_VAR 0 2
6599: PUSH
6600: LD_INT 1
6602: PLUS
6603: ST_TO_ADDR
6604: GO 6581
6606: POP
6607: POP
// end ;
6608: LD_VAR 0 2
6612: RET
// export function IsEmpty ( building ) ; begin
6613: LD_INT 0
6615: PPUSH
// if not building then
6616: LD_VAR 0 1
6620: NOT
6621: IFFALSE 6625
// exit ;
6623: GO 6668
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6625: LD_ADDR_VAR 0 2
6629: PUSH
6630: LD_VAR 0 1
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_VAR 0 1
6642: PPUSH
6643: CALL_OW 255
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 58
6654: PUSH
6655: EMPTY
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: IN
6667: ST_TO_ADDR
// end ;
6668: LD_VAR 0 2
6672: RET
// export function IsNotFull ( building ) ; var places ; begin
6673: LD_INT 0
6675: PPUSH
6676: PPUSH
// if not building then
6677: LD_VAR 0 1
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6857
// result := false ;
6686: LD_ADDR_VAR 0 2
6690: PUSH
6691: LD_INT 0
6693: ST_TO_ADDR
// places := 0 ;
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: LD_INT 0
6701: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 266
6711: PUSH
6712: LD_INT 0
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6774
6718: LD_INT 1
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6774
6724: LD_INT 6
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6774
6730: LD_INT 7
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6774
6736: LD_INT 8
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6774
6742: LD_INT 4
6744: DOUBLE
6745: EQUAL
6746: IFTRUE 6774
6748: LD_INT 5
6750: DOUBLE
6751: EQUAL
6752: IFTRUE 6774
6754: LD_INT 2
6756: DOUBLE
6757: EQUAL
6758: IFTRUE 6774
6760: LD_INT 3
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6774
6766: LD_INT 35
6768: DOUBLE
6769: EQUAL
6770: IFTRUE 6774
6772: GO 6785
6774: POP
// places := 6 ; b_bunker , b_breastwork :
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: LD_INT 6
6782: ST_TO_ADDR
6783: GO 6830
6785: LD_INT 32
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6799
6791: LD_INT 31
6793: DOUBLE
6794: EQUAL
6795: IFTRUE 6799
6797: GO 6810
6799: POP
// places := 1 ; b_control_tower :
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_INT 1
6807: ST_TO_ADDR
6808: GO 6830
6810: LD_INT 36
6812: DOUBLE
6813: EQUAL
6814: IFTRUE 6818
6816: GO 6829
6818: POP
// places := 3 ; end ;
6819: LD_ADDR_VAR 0 3
6823: PUSH
6824: LD_INT 3
6826: ST_TO_ADDR
6827: GO 6830
6829: POP
// if places then
6830: LD_VAR 0 3
6834: IFFALSE 6857
// result := UnitsInside ( building ) < places ;
6836: LD_ADDR_VAR 0 2
6840: PUSH
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 313
6850: PUSH
6851: LD_VAR 0 3
6855: LESS
6856: ST_TO_ADDR
// end ;
6857: LD_VAR 0 2
6861: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
6866: PPUSH
6867: PPUSH
// tmp := [ ] ;
6868: LD_ADDR_VAR 0 3
6872: PUSH
6873: EMPTY
6874: ST_TO_ADDR
// list := [ ] ;
6875: LD_ADDR_VAR 0 5
6879: PUSH
6880: EMPTY
6881: ST_TO_ADDR
// for i = 16 to 25 do
6882: LD_ADDR_VAR 0 4
6886: PUSH
6887: DOUBLE
6888: LD_INT 16
6890: DEC
6891: ST_TO_ADDR
6892: LD_INT 25
6894: PUSH
6895: FOR_TO
6896: IFFALSE 6969
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6898: LD_ADDR_VAR 0 3
6902: PUSH
6903: LD_VAR 0 3
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 1
6915: PPUSH
6916: CALL_OW 255
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 91
6927: PUSH
6928: LD_VAR 0 1
6932: PUSH
6933: LD_INT 6
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 30
6943: PUSH
6944: LD_VAR 0 4
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: ADD
6966: ST_TO_ADDR
6967: GO 6895
6969: POP
6970: POP
// for i = 1 to tmp do
6971: LD_ADDR_VAR 0 4
6975: PUSH
6976: DOUBLE
6977: LD_INT 1
6979: DEC
6980: ST_TO_ADDR
6981: LD_VAR 0 3
6985: PUSH
6986: FOR_TO
6987: IFFALSE 7075
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6989: LD_ADDR_VAR 0 5
6993: PUSH
6994: LD_VAR 0 5
6998: PUSH
6999: LD_VAR 0 3
7003: PUSH
7004: LD_VAR 0 4
7008: ARRAY
7009: PPUSH
7010: CALL_OW 266
7014: PUSH
7015: LD_VAR 0 3
7019: PUSH
7020: LD_VAR 0 4
7024: ARRAY
7025: PPUSH
7026: CALL_OW 250
7030: PUSH
7031: LD_VAR 0 3
7035: PUSH
7036: LD_VAR 0 4
7040: ARRAY
7041: PPUSH
7042: CALL_OW 251
7046: PUSH
7047: LD_VAR 0 3
7051: PUSH
7052: LD_VAR 0 4
7056: ARRAY
7057: PPUSH
7058: CALL_OW 254
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: ADD
7072: ST_TO_ADDR
7073: GO 6986
7075: POP
7076: POP
// result := list ;
7077: LD_ADDR_VAR 0 2
7081: PUSH
7082: LD_VAR 0 5
7086: ST_TO_ADDR
// end ;
7087: LD_VAR 0 2
7091: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7092: LD_INT 0
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
7099: PPUSH
7100: PPUSH
// if not factory then
7101: LD_VAR 0 1
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7703
// if control = control_apeman then
7110: LD_VAR 0 4
7114: PUSH
7115: LD_INT 5
7117: EQUAL
7118: IFFALSE 7227
// begin tmp := UnitsInside ( factory ) ;
7120: LD_ADDR_VAR 0 8
7124: PUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: CALL_OW 313
7134: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7135: LD_VAR 0 8
7139: PPUSH
7140: LD_INT 25
7142: PUSH
7143: LD_INT 12
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 72
7154: NOT
7155: IFFALSE 7165
// control := control_manual ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_INT 1
7164: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7165: LD_ADDR_VAR 0 8
7169: PUSH
7170: LD_VAR 0 1
7174: PPUSH
7175: CALL 6862 0 1
7179: ST_TO_ADDR
// if tmp then
7180: LD_VAR 0 8
7184: IFFALSE 7227
// begin for i in tmp do
7186: LD_ADDR_VAR 0 7
7190: PUSH
7191: LD_VAR 0 8
7195: PUSH
7196: FOR_IN
7197: IFFALSE 7225
// if i [ 1 ] = b_ext_radio then
7199: LD_VAR 0 7
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PUSH
7208: LD_INT 22
7210: EQUAL
7211: IFFALSE 7223
// begin control := control_remote ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_INT 2
7220: ST_TO_ADDR
// break ;
7221: GO 7225
// end ;
7223: GO 7196
7225: POP
7226: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: LD_VAR 0 3
7241: PPUSH
7242: LD_VAR 0 4
7246: PPUSH
7247: LD_VAR 0 5
7251: PPUSH
7252: CALL_OW 448
7256: IFFALSE 7291
// begin result := [ chassis , engine , control , weapon ] ;
7258: LD_ADDR_VAR 0 6
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: LD_VAR 0 3
7272: PUSH
7273: LD_VAR 0 4
7277: PUSH
7278: LD_VAR 0 5
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: ST_TO_ADDR
// exit ;
7289: GO 7703
// end ; _chassis := AvailableChassisList ( factory ) ;
7291: LD_ADDR_VAR 0 9
7295: PUSH
7296: LD_VAR 0 1
7300: PPUSH
7301: CALL_OW 475
7305: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7306: LD_ADDR_VAR 0 11
7310: PUSH
7311: LD_VAR 0 1
7315: PPUSH
7316: CALL_OW 476
7320: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7321: LD_ADDR_VAR 0 12
7325: PUSH
7326: LD_VAR 0 1
7330: PPUSH
7331: CALL_OW 477
7335: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7336: LD_ADDR_VAR 0 10
7340: PUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 478
7350: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7351: LD_VAR 0 9
7355: NOT
7356: PUSH
7357: LD_VAR 0 11
7361: NOT
7362: OR
7363: PUSH
7364: LD_VAR 0 12
7368: NOT
7369: OR
7370: PUSH
7371: LD_VAR 0 10
7375: NOT
7376: OR
7377: IFFALSE 7412
// begin result := [ chassis , engine , control , weapon ] ;
7379: LD_ADDR_VAR 0 6
7383: PUSH
7384: LD_VAR 0 2
7388: PUSH
7389: LD_VAR 0 3
7393: PUSH
7394: LD_VAR 0 4
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: ST_TO_ADDR
// exit ;
7410: GO 7703
// end ; if not chassis in _chassis then
7412: LD_VAR 0 2
7416: PUSH
7417: LD_VAR 0 9
7421: IN
7422: NOT
7423: IFFALSE 7449
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7425: LD_ADDR_VAR 0 2
7429: PUSH
7430: LD_VAR 0 9
7434: PUSH
7435: LD_INT 1
7437: PPUSH
7438: LD_VAR 0 9
7442: PPUSH
7443: CALL_OW 12
7447: ARRAY
7448: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7449: LD_VAR 0 2
7453: PPUSH
7454: LD_VAR 0 3
7458: PPUSH
7459: CALL 7708 0 2
7463: NOT
7464: IFFALSE 7523
// repeat engine := _engine [ 1 ] ;
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: LD_VAR 0 11
7475: PUSH
7476: LD_INT 1
7478: ARRAY
7479: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7480: LD_ADDR_VAR 0 11
7484: PUSH
7485: LD_VAR 0 11
7489: PPUSH
7490: LD_INT 1
7492: PPUSH
7493: CALL_OW 3
7497: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: CALL 7708 0 2
7512: PUSH
7513: LD_VAR 0 11
7517: PUSH
7518: EMPTY
7519: EQUAL
7520: OR
7521: IFFALSE 7466
// if not control in _control then
7523: LD_VAR 0 4
7527: PUSH
7528: LD_VAR 0 12
7532: IN
7533: NOT
7534: IFFALSE 7560
// control := _control [ rand ( 1 , _control ) ] ;
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: LD_VAR 0 12
7545: PUSH
7546: LD_INT 1
7548: PPUSH
7549: LD_VAR 0 12
7553: PPUSH
7554: CALL_OW 12
7558: ARRAY
7559: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7560: LD_VAR 0 2
7564: PPUSH
7565: LD_VAR 0 5
7569: PPUSH
7570: CALL 7928 0 2
7574: NOT
7575: IFFALSE 7634
// repeat weapon := _weapon [ 1 ] ;
7577: LD_ADDR_VAR 0 5
7581: PUSH
7582: LD_VAR 0 10
7586: PUSH
7587: LD_INT 1
7589: ARRAY
7590: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7591: LD_ADDR_VAR 0 10
7595: PUSH
7596: LD_VAR 0 10
7600: PPUSH
7601: LD_INT 1
7603: PPUSH
7604: CALL_OW 3
7608: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_VAR 0 5
7618: PPUSH
7619: CALL 7928 0 2
7623: PUSH
7624: LD_VAR 0 10
7628: PUSH
7629: EMPTY
7630: EQUAL
7631: OR
7632: IFFALSE 7577
// result := [ ] ;
7634: LD_ADDR_VAR 0 6
7638: PUSH
7639: EMPTY
7640: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7641: LD_VAR 0 1
7645: PPUSH
7646: LD_VAR 0 2
7650: PPUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: LD_VAR 0 4
7660: PPUSH
7661: LD_VAR 0 5
7665: PPUSH
7666: CALL_OW 448
7670: IFFALSE 7703
// result := [ chassis , engine , control , weapon ] ;
7672: LD_ADDR_VAR 0 6
7676: PUSH
7677: LD_VAR 0 2
7681: PUSH
7682: LD_VAR 0 3
7686: PUSH
7687: LD_VAR 0 4
7691: PUSH
7692: LD_VAR 0 5
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: ST_TO_ADDR
// end ;
7703: LD_VAR 0 6
7707: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7708: LD_INT 0
7710: PPUSH
// if not chassis or not engine then
7711: LD_VAR 0 1
7715: NOT
7716: PUSH
7717: LD_VAR 0 2
7721: NOT
7722: OR
7723: IFFALSE 7727
// exit ;
7725: GO 7923
// case engine of engine_solar :
7727: LD_VAR 0 2
7731: PUSH
7732: LD_INT 2
7734: DOUBLE
7735: EQUAL
7736: IFTRUE 7740
7738: GO 7778
7740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7741: LD_ADDR_VAR 0 3
7745: PUSH
7746: LD_INT 11
7748: PUSH
7749: LD_INT 12
7751: PUSH
7752: LD_INT 13
7754: PUSH
7755: LD_INT 14
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: LD_INT 2
7763: PUSH
7764: LD_INT 3
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: ST_TO_ADDR
7776: GO 7907
7778: LD_INT 1
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7848
7786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7787: LD_ADDR_VAR 0 3
7791: PUSH
7792: LD_INT 11
7794: PUSH
7795: LD_INT 12
7797: PUSH
7798: LD_INT 13
7800: PUSH
7801: LD_INT 14
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: LD_INT 3
7812: PUSH
7813: LD_INT 4
7815: PUSH
7816: LD_INT 5
7818: PUSH
7819: LD_INT 21
7821: PUSH
7822: LD_INT 23
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_INT 24
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: ST_TO_ADDR
7846: GO 7907
7848: LD_INT 3
7850: DOUBLE
7851: EQUAL
7852: IFTRUE 7856
7854: GO 7906
7856: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7857: LD_ADDR_VAR 0 3
7861: PUSH
7862: LD_INT 13
7864: PUSH
7865: LD_INT 14
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 3
7873: PUSH
7874: LD_INT 4
7876: PUSH
7877: LD_INT 5
7879: PUSH
7880: LD_INT 21
7882: PUSH
7883: LD_INT 22
7885: PUSH
7886: LD_INT 23
7888: PUSH
7889: LD_INT 24
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: ST_TO_ADDR
7904: GO 7907
7906: POP
// result := ( chassis in result ) ;
7907: LD_ADDR_VAR 0 3
7911: PUSH
7912: LD_VAR 0 1
7916: PUSH
7917: LD_VAR 0 3
7921: IN
7922: ST_TO_ADDR
// end ;
7923: LD_VAR 0 3
7927: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7928: LD_INT 0
7930: PPUSH
// if not chassis or not weapon then
7931: LD_VAR 0 1
7935: NOT
7936: PUSH
7937: LD_VAR 0 2
7941: NOT
7942: OR
7943: IFFALSE 7947
// exit ;
7945: GO 9007
// case weapon of us_machine_gun :
7947: LD_VAR 0 2
7951: PUSH
7952: LD_INT 2
7954: DOUBLE
7955: EQUAL
7956: IFTRUE 7960
7958: GO 7990
7960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7961: LD_ADDR_VAR 0 3
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: LD_INT 3
7974: PUSH
7975: LD_INT 4
7977: PUSH
7978: LD_INT 5
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ST_TO_ADDR
7988: GO 8991
7990: LD_INT 3
7992: DOUBLE
7993: EQUAL
7994: IFTRUE 7998
7996: GO 8028
7998: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: LD_INT 1
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: LD_INT 3
8012: PUSH
8013: LD_INT 4
8015: PUSH
8016: LD_INT 5
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: ST_TO_ADDR
8026: GO 8991
8028: LD_INT 11
8030: DOUBLE
8031: EQUAL
8032: IFTRUE 8036
8034: GO 8066
8036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8037: LD_ADDR_VAR 0 3
8041: PUSH
8042: LD_INT 1
8044: PUSH
8045: LD_INT 2
8047: PUSH
8048: LD_INT 3
8050: PUSH
8051: LD_INT 4
8053: PUSH
8054: LD_INT 5
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
8064: GO 8991
8066: LD_INT 4
8068: DOUBLE
8069: EQUAL
8070: IFTRUE 8074
8072: GO 8100
8074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8075: LD_ADDR_VAR 0 3
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: LD_INT 4
8088: PUSH
8089: LD_INT 5
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: ST_TO_ADDR
8098: GO 8991
8100: LD_INT 5
8102: DOUBLE
8103: EQUAL
8104: IFTRUE 8108
8106: GO 8134
8108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8109: LD_ADDR_VAR 0 3
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: LD_INT 5
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: ST_TO_ADDR
8132: GO 8991
8134: LD_INT 9
8136: DOUBLE
8137: EQUAL
8138: IFTRUE 8142
8140: GO 8168
8142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8143: LD_ADDR_VAR 0 3
8147: PUSH
8148: LD_INT 2
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: LD_INT 4
8156: PUSH
8157: LD_INT 5
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: ST_TO_ADDR
8166: GO 8991
8168: LD_INT 7
8170: DOUBLE
8171: EQUAL
8172: IFTRUE 8176
8174: GO 8202
8176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8177: LD_ADDR_VAR 0 3
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: LD_INT 3
8187: PUSH
8188: LD_INT 4
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: ST_TO_ADDR
8200: GO 8991
8202: LD_INT 12
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8236
8210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8211: LD_ADDR_VAR 0 3
8215: PUSH
8216: LD_INT 2
8218: PUSH
8219: LD_INT 3
8221: PUSH
8222: LD_INT 4
8224: PUSH
8225: LD_INT 5
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: ST_TO_ADDR
8234: GO 8991
8236: LD_INT 13
8238: DOUBLE
8239: EQUAL
8240: IFTRUE 8244
8242: GO 8270
8244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8245: LD_ADDR_VAR 0 3
8249: PUSH
8250: LD_INT 2
8252: PUSH
8253: LD_INT 3
8255: PUSH
8256: LD_INT 4
8258: PUSH
8259: LD_INT 5
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: ST_TO_ADDR
8268: GO 8991
8270: LD_INT 14
8272: DOUBLE
8273: EQUAL
8274: IFTRUE 8278
8276: GO 8296
8278: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8279: LD_ADDR_VAR 0 3
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: ST_TO_ADDR
8294: GO 8991
8296: LD_INT 6
8298: DOUBLE
8299: EQUAL
8300: IFTRUE 8304
8302: GO 8322
8304: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 4
8312: PUSH
8313: LD_INT 5
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: ST_TO_ADDR
8320: GO 8991
8322: LD_INT 10
8324: DOUBLE
8325: EQUAL
8326: IFTRUE 8330
8328: GO 8348
8330: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 4
8338: PUSH
8339: LD_INT 5
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: ST_TO_ADDR
8346: GO 8991
8348: LD_INT 22
8350: DOUBLE
8351: EQUAL
8352: IFTRUE 8356
8354: GO 8382
8356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8357: LD_ADDR_VAR 0 3
8361: PUSH
8362: LD_INT 11
8364: PUSH
8365: LD_INT 12
8367: PUSH
8368: LD_INT 13
8370: PUSH
8371: LD_INT 14
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
8380: GO 8991
8382: LD_INT 23
8384: DOUBLE
8385: EQUAL
8386: IFTRUE 8390
8388: GO 8416
8390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8391: LD_ADDR_VAR 0 3
8395: PUSH
8396: LD_INT 11
8398: PUSH
8399: LD_INT 12
8401: PUSH
8402: LD_INT 13
8404: PUSH
8405: LD_INT 14
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: ST_TO_ADDR
8414: GO 8991
8416: LD_INT 24
8418: DOUBLE
8419: EQUAL
8420: IFTRUE 8424
8422: GO 8450
8424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8425: LD_ADDR_VAR 0 3
8429: PUSH
8430: LD_INT 11
8432: PUSH
8433: LD_INT 12
8435: PUSH
8436: LD_INT 13
8438: PUSH
8439: LD_INT 14
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: ST_TO_ADDR
8448: GO 8991
8450: LD_INT 30
8452: DOUBLE
8453: EQUAL
8454: IFTRUE 8458
8456: GO 8484
8458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8459: LD_ADDR_VAR 0 3
8463: PUSH
8464: LD_INT 11
8466: PUSH
8467: LD_INT 12
8469: PUSH
8470: LD_INT 13
8472: PUSH
8473: LD_INT 14
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: ST_TO_ADDR
8482: GO 8991
8484: LD_INT 25
8486: DOUBLE
8487: EQUAL
8488: IFTRUE 8492
8490: GO 8510
8492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8493: LD_ADDR_VAR 0 3
8497: PUSH
8498: LD_INT 13
8500: PUSH
8501: LD_INT 14
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: ST_TO_ADDR
8508: GO 8991
8510: LD_INT 27
8512: DOUBLE
8513: EQUAL
8514: IFTRUE 8518
8516: GO 8536
8518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8519: LD_ADDR_VAR 0 3
8523: PUSH
8524: LD_INT 13
8526: PUSH
8527: LD_INT 14
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: ST_TO_ADDR
8534: GO 8991
8536: LD_INT 92
8538: DOUBLE
8539: EQUAL
8540: IFTRUE 8544
8542: GO 8570
8544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8545: LD_ADDR_VAR 0 3
8549: PUSH
8550: LD_INT 11
8552: PUSH
8553: LD_INT 12
8555: PUSH
8556: LD_INT 13
8558: PUSH
8559: LD_INT 14
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: ST_TO_ADDR
8568: GO 8991
8570: LD_INT 28
8572: DOUBLE
8573: EQUAL
8574: IFTRUE 8578
8576: GO 8596
8578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8579: LD_ADDR_VAR 0 3
8583: PUSH
8584: LD_INT 13
8586: PUSH
8587: LD_INT 14
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: ST_TO_ADDR
8594: GO 8991
8596: LD_INT 29
8598: DOUBLE
8599: EQUAL
8600: IFTRUE 8604
8602: GO 8622
8604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8605: LD_ADDR_VAR 0 3
8609: PUSH
8610: LD_INT 13
8612: PUSH
8613: LD_INT 14
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
8620: GO 8991
8622: LD_INT 31
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8648
8630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_INT 13
8638: PUSH
8639: LD_INT 14
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: ST_TO_ADDR
8646: GO 8991
8648: LD_INT 26
8650: DOUBLE
8651: EQUAL
8652: IFTRUE 8656
8654: GO 8674
8656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: LD_INT 13
8664: PUSH
8665: LD_INT 14
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: ST_TO_ADDR
8672: GO 8991
8674: LD_INT 42
8676: DOUBLE
8677: EQUAL
8678: IFTRUE 8682
8680: GO 8708
8682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 21
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: LD_INT 23
8696: PUSH
8697: LD_INT 24
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: ST_TO_ADDR
8706: GO 8991
8708: LD_INT 43
8710: DOUBLE
8711: EQUAL
8712: IFTRUE 8716
8714: GO 8742
8716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8717: LD_ADDR_VAR 0 3
8721: PUSH
8722: LD_INT 21
8724: PUSH
8725: LD_INT 22
8727: PUSH
8728: LD_INT 23
8730: PUSH
8731: LD_INT 24
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: ST_TO_ADDR
8740: GO 8991
8742: LD_INT 44
8744: DOUBLE
8745: EQUAL
8746: IFTRUE 8750
8748: GO 8776
8750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8751: LD_ADDR_VAR 0 3
8755: PUSH
8756: LD_INT 21
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_INT 23
8764: PUSH
8765: LD_INT 24
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: ST_TO_ADDR
8774: GO 8991
8776: LD_INT 45
8778: DOUBLE
8779: EQUAL
8780: IFTRUE 8784
8782: GO 8810
8784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8785: LD_ADDR_VAR 0 3
8789: PUSH
8790: LD_INT 21
8792: PUSH
8793: LD_INT 22
8795: PUSH
8796: LD_INT 23
8798: PUSH
8799: LD_INT 24
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: ST_TO_ADDR
8808: GO 8991
8810: LD_INT 49
8812: DOUBLE
8813: EQUAL
8814: IFTRUE 8818
8816: GO 8844
8818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 22
8829: PUSH
8830: LD_INT 23
8832: PUSH
8833: LD_INT 24
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: ST_TO_ADDR
8842: GO 8991
8844: LD_INT 51
8846: DOUBLE
8847: EQUAL
8848: IFTRUE 8852
8850: GO 8878
8852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: LD_INT 21
8860: PUSH
8861: LD_INT 22
8863: PUSH
8864: LD_INT 23
8866: PUSH
8867: LD_INT 24
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: ST_TO_ADDR
8876: GO 8991
8878: LD_INT 52
8880: DOUBLE
8881: EQUAL
8882: IFTRUE 8886
8884: GO 8912
8886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8887: LD_ADDR_VAR 0 3
8891: PUSH
8892: LD_INT 21
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 23
8900: PUSH
8901: LD_INT 24
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: ST_TO_ADDR
8910: GO 8991
8912: LD_INT 53
8914: DOUBLE
8915: EQUAL
8916: IFTRUE 8920
8918: GO 8938
8920: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_INT 23
8928: PUSH
8929: LD_INT 24
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: ST_TO_ADDR
8936: GO 8991
8938: LD_INT 46
8940: DOUBLE
8941: EQUAL
8942: IFTRUE 8946
8944: GO 8964
8946: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8947: LD_ADDR_VAR 0 3
8951: PUSH
8952: LD_INT 23
8954: PUSH
8955: LD_INT 24
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: ST_TO_ADDR
8962: GO 8991
8964: LD_INT 47
8966: DOUBLE
8967: EQUAL
8968: IFTRUE 8972
8970: GO 8990
8972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 23
8980: PUSH
8981: LD_INT 24
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: ST_TO_ADDR
8988: GO 8991
8990: POP
// result := ( chassis in result ) ;
8991: LD_ADDR_VAR 0 3
8995: PUSH
8996: LD_VAR 0 1
9000: PUSH
9001: LD_VAR 0 3
9005: IN
9006: ST_TO_ADDR
// end ;
9007: LD_VAR 0 3
9011: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9012: LD_INT 0
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
// result := array ;
9021: LD_ADDR_VAR 0 5
9025: PUSH
9026: LD_VAR 0 1
9030: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9031: LD_VAR 0 1
9035: NOT
9036: PUSH
9037: LD_VAR 0 2
9041: NOT
9042: OR
9043: PUSH
9044: LD_VAR 0 3
9048: NOT
9049: OR
9050: PUSH
9051: LD_VAR 0 2
9055: PUSH
9056: LD_VAR 0 1
9060: GREATER
9061: OR
9062: PUSH
9063: LD_VAR 0 3
9067: PUSH
9068: LD_VAR 0 1
9072: GREATER
9073: OR
9074: IFFALSE 9078
// exit ;
9076: GO 9374
// if direction then
9078: LD_VAR 0 4
9082: IFFALSE 9146
// begin d := 1 ;
9084: LD_ADDR_VAR 0 9
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// if i_from > i_to then
9092: LD_VAR 0 2
9096: PUSH
9097: LD_VAR 0 3
9101: GREATER
9102: IFFALSE 9128
// length := ( array - i_from ) + i_to else
9104: LD_ADDR_VAR 0 11
9108: PUSH
9109: LD_VAR 0 1
9113: PUSH
9114: LD_VAR 0 2
9118: MINUS
9119: PUSH
9120: LD_VAR 0 3
9124: PLUS
9125: ST_TO_ADDR
9126: GO 9144
// length := i_to - i_from ;
9128: LD_ADDR_VAR 0 11
9132: PUSH
9133: LD_VAR 0 3
9137: PUSH
9138: LD_VAR 0 2
9142: MINUS
9143: ST_TO_ADDR
// end else
9144: GO 9207
// begin d := - 1 ;
9146: LD_ADDR_VAR 0 9
9150: PUSH
9151: LD_INT 1
9153: NEG
9154: ST_TO_ADDR
// if i_from > i_to then
9155: LD_VAR 0 2
9159: PUSH
9160: LD_VAR 0 3
9164: GREATER
9165: IFFALSE 9185
// length := i_from - i_to else
9167: LD_ADDR_VAR 0 11
9171: PUSH
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 3
9181: MINUS
9182: ST_TO_ADDR
9183: GO 9207
// length := ( array - i_to ) + i_from ;
9185: LD_ADDR_VAR 0 11
9189: PUSH
9190: LD_VAR 0 1
9194: PUSH
9195: LD_VAR 0 3
9199: MINUS
9200: PUSH
9201: LD_VAR 0 2
9205: PLUS
9206: ST_TO_ADDR
// end ; if not length then
9207: LD_VAR 0 11
9211: NOT
9212: IFFALSE 9216
// exit ;
9214: GO 9374
// tmp := array ;
9216: LD_ADDR_VAR 0 10
9220: PUSH
9221: LD_VAR 0 1
9225: ST_TO_ADDR
// for i = 1 to length do
9226: LD_ADDR_VAR 0 6
9230: PUSH
9231: DOUBLE
9232: LD_INT 1
9234: DEC
9235: ST_TO_ADDR
9236: LD_VAR 0 11
9240: PUSH
9241: FOR_TO
9242: IFFALSE 9362
// begin for j = 1 to array do
9244: LD_ADDR_VAR 0 7
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_VAR 0 1
9258: PUSH
9259: FOR_TO
9260: IFFALSE 9348
// begin k := j + d ;
9262: LD_ADDR_VAR 0 8
9266: PUSH
9267: LD_VAR 0 7
9271: PUSH
9272: LD_VAR 0 9
9276: PLUS
9277: ST_TO_ADDR
// if k > array then
9278: LD_VAR 0 8
9282: PUSH
9283: LD_VAR 0 1
9287: GREATER
9288: IFFALSE 9298
// k := 1 ;
9290: LD_ADDR_VAR 0 8
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// if not k then
9298: LD_VAR 0 8
9302: NOT
9303: IFFALSE 9315
// k := array ;
9305: LD_ADDR_VAR 0 8
9309: PUSH
9310: LD_VAR 0 1
9314: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9315: LD_ADDR_VAR 0 10
9319: PUSH
9320: LD_VAR 0 10
9324: PPUSH
9325: LD_VAR 0 8
9329: PPUSH
9330: LD_VAR 0 1
9334: PUSH
9335: LD_VAR 0 7
9339: ARRAY
9340: PPUSH
9341: CALL_OW 1
9345: ST_TO_ADDR
// end ;
9346: GO 9259
9348: POP
9349: POP
// array := tmp ;
9350: LD_ADDR_VAR 0 1
9354: PUSH
9355: LD_VAR 0 10
9359: ST_TO_ADDR
// end ;
9360: GO 9241
9362: POP
9363: POP
// result := array ;
9364: LD_ADDR_VAR 0 5
9368: PUSH
9369: LD_VAR 0 1
9373: ST_TO_ADDR
// end ;
9374: LD_VAR 0 5
9378: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9379: LD_INT 0
9381: PPUSH
9382: PPUSH
// result := 0 ;
9383: LD_ADDR_VAR 0 3
9387: PUSH
9388: LD_INT 0
9390: ST_TO_ADDR
// if not array or not value in array then
9391: LD_VAR 0 1
9395: NOT
9396: PUSH
9397: LD_VAR 0 2
9401: PUSH
9402: LD_VAR 0 1
9406: IN
9407: NOT
9408: OR
9409: IFFALSE 9413
// exit ;
9411: GO 9467
// for i = 1 to array do
9413: LD_ADDR_VAR 0 4
9417: PUSH
9418: DOUBLE
9419: LD_INT 1
9421: DEC
9422: ST_TO_ADDR
9423: LD_VAR 0 1
9427: PUSH
9428: FOR_TO
9429: IFFALSE 9465
// if value = array [ i ] then
9431: LD_VAR 0 2
9435: PUSH
9436: LD_VAR 0 1
9440: PUSH
9441: LD_VAR 0 4
9445: ARRAY
9446: EQUAL
9447: IFFALSE 9463
// begin result := i ;
9449: LD_ADDR_VAR 0 3
9453: PUSH
9454: LD_VAR 0 4
9458: ST_TO_ADDR
// exit ;
9459: POP
9460: POP
9461: GO 9467
// end ;
9463: GO 9428
9465: POP
9466: POP
// end ;
9467: LD_VAR 0 3
9471: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9472: LD_INT 0
9474: PPUSH
// vc_chassis := chassis ;
9475: LD_ADDR_OWVAR 37
9479: PUSH
9480: LD_VAR 0 1
9484: ST_TO_ADDR
// vc_engine := engine ;
9485: LD_ADDR_OWVAR 39
9489: PUSH
9490: LD_VAR 0 2
9494: ST_TO_ADDR
// vc_control := control ;
9495: LD_ADDR_OWVAR 38
9499: PUSH
9500: LD_VAR 0 3
9504: ST_TO_ADDR
// vc_weapon := weapon ;
9505: LD_ADDR_OWVAR 40
9509: PUSH
9510: LD_VAR 0 4
9514: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9515: LD_ADDR_OWVAR 41
9519: PUSH
9520: LD_VAR 0 5
9524: ST_TO_ADDR
// end ;
9525: LD_VAR 0 6
9529: RET
// export function WantPlant ( unit ) ; var task ; begin
9530: LD_INT 0
9532: PPUSH
9533: PPUSH
// result := false ;
9534: LD_ADDR_VAR 0 2
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9542: LD_ADDR_VAR 0 3
9546: PUSH
9547: LD_VAR 0 1
9551: PPUSH
9552: CALL_OW 437
9556: ST_TO_ADDR
// if task then
9557: LD_VAR 0 3
9561: IFFALSE 9589
// if task [ 1 ] [ 1 ] = p then
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 1
9570: ARRAY
9571: PUSH
9572: LD_INT 1
9574: ARRAY
9575: PUSH
9576: LD_STRING p
9578: EQUAL
9579: IFFALSE 9589
// result := true ;
9581: LD_ADDR_VAR 0 2
9585: PUSH
9586: LD_INT 1
9588: ST_TO_ADDR
// end ;
9589: LD_VAR 0 2
9593: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9594: LD_INT 0
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
// if pos < 1 then
9600: LD_VAR 0 2
9604: PUSH
9605: LD_INT 1
9607: LESS
9608: IFFALSE 9612
// exit ;
9610: GO 9915
// if pos = 1 then
9612: LD_VAR 0 2
9616: PUSH
9617: LD_INT 1
9619: EQUAL
9620: IFFALSE 9653
// result := Replace ( arr , pos [ 1 ] , value ) else
9622: LD_ADDR_VAR 0 4
9626: PUSH
9627: LD_VAR 0 1
9631: PPUSH
9632: LD_VAR 0 2
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: PPUSH
9641: LD_VAR 0 3
9645: PPUSH
9646: CALL_OW 1
9650: ST_TO_ADDR
9651: GO 9915
// begin tmp := arr ;
9653: LD_ADDR_VAR 0 6
9657: PUSH
9658: LD_VAR 0 1
9662: ST_TO_ADDR
// s_arr := [ tmp ] ;
9663: LD_ADDR_VAR 0 7
9667: PUSH
9668: LD_VAR 0 6
9672: PUSH
9673: EMPTY
9674: LIST
9675: ST_TO_ADDR
// for i = 1 to pos - 1 do
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: DOUBLE
9682: LD_INT 1
9684: DEC
9685: ST_TO_ADDR
9686: LD_VAR 0 2
9690: PUSH
9691: LD_INT 1
9693: MINUS
9694: PUSH
9695: FOR_TO
9696: IFFALSE 9741
// begin tmp := tmp [ pos [ i ] ] ;
9698: LD_ADDR_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_VAR 0 2
9712: PUSH
9713: LD_VAR 0 5
9717: ARRAY
9718: ARRAY
9719: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9720: LD_ADDR_VAR 0 7
9724: PUSH
9725: LD_VAR 0 7
9729: PUSH
9730: LD_VAR 0 6
9734: PUSH
9735: EMPTY
9736: LIST
9737: ADD
9738: ST_TO_ADDR
// end ;
9739: GO 9695
9741: POP
9742: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9743: LD_ADDR_VAR 0 6
9747: PUSH
9748: LD_VAR 0 6
9752: PPUSH
9753: LD_VAR 0 2
9757: PUSH
9758: LD_VAR 0 2
9762: ARRAY
9763: PPUSH
9764: LD_VAR 0 3
9768: PPUSH
9769: CALL_OW 1
9773: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9774: LD_ADDR_VAR 0 7
9778: PUSH
9779: LD_VAR 0 7
9783: PPUSH
9784: LD_VAR 0 7
9788: PPUSH
9789: LD_VAR 0 6
9793: PPUSH
9794: CALL_OW 1
9798: ST_TO_ADDR
// for i = s_arr downto 2 do
9799: LD_ADDR_VAR 0 5
9803: PUSH
9804: DOUBLE
9805: LD_VAR 0 7
9809: INC
9810: ST_TO_ADDR
9811: LD_INT 2
9813: PUSH
9814: FOR_DOWNTO
9815: IFFALSE 9899
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9817: LD_ADDR_VAR 0 6
9821: PUSH
9822: LD_VAR 0 7
9826: PUSH
9827: LD_VAR 0 5
9831: PUSH
9832: LD_INT 1
9834: MINUS
9835: ARRAY
9836: PPUSH
9837: LD_VAR 0 2
9841: PUSH
9842: LD_VAR 0 5
9846: PUSH
9847: LD_INT 1
9849: MINUS
9850: ARRAY
9851: PPUSH
9852: LD_VAR 0 7
9856: PUSH
9857: LD_VAR 0 5
9861: ARRAY
9862: PPUSH
9863: CALL_OW 1
9867: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9868: LD_ADDR_VAR 0 7
9872: PUSH
9873: LD_VAR 0 7
9877: PPUSH
9878: LD_VAR 0 5
9882: PUSH
9883: LD_INT 1
9885: MINUS
9886: PPUSH
9887: LD_VAR 0 6
9891: PPUSH
9892: CALL_OW 1
9896: ST_TO_ADDR
// end ;
9897: GO 9814
9899: POP
9900: POP
// result := s_arr [ 1 ] ;
9901: LD_ADDR_VAR 0 4
9905: PUSH
9906: LD_VAR 0 7
9910: PUSH
9911: LD_INT 1
9913: ARRAY
9914: ST_TO_ADDR
// end ; end ;
9915: LD_VAR 0 4
9919: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9920: LD_INT 0
9922: PPUSH
9923: PPUSH
// if not list then
9924: LD_VAR 0 1
9928: NOT
9929: IFFALSE 9933
// exit ;
9931: GO 10024
// i := list [ pos1 ] ;
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 1
9942: PUSH
9943: LD_VAR 0 2
9947: ARRAY
9948: ST_TO_ADDR
// if not i then
9949: LD_VAR 0 5
9953: NOT
9954: IFFALSE 9958
// exit ;
9956: GO 10024
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9958: LD_ADDR_VAR 0 1
9962: PUSH
9963: LD_VAR 0 1
9967: PPUSH
9968: LD_VAR 0 2
9972: PPUSH
9973: LD_VAR 0 1
9977: PUSH
9978: LD_VAR 0 3
9982: ARRAY
9983: PPUSH
9984: CALL_OW 1
9988: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9989: LD_ADDR_VAR 0 1
9993: PUSH
9994: LD_VAR 0 1
9998: PPUSH
9999: LD_VAR 0 3
10003: PPUSH
10004: LD_VAR 0 5
10008: PPUSH
10009: CALL_OW 1
10013: ST_TO_ADDR
// result := list ;
10014: LD_ADDR_VAR 0 4
10018: PUSH
10019: LD_VAR 0 1
10023: ST_TO_ADDR
// end ;
10024: LD_VAR 0 4
10028: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10029: LD_INT 0
10031: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10032: LD_ADDR_VAR 0 5
10036: PUSH
10037: LD_VAR 0 1
10041: PPUSH
10042: CALL_OW 250
10046: PPUSH
10047: LD_VAR 0 1
10051: PPUSH
10052: CALL_OW 251
10056: PPUSH
10057: LD_VAR 0 2
10061: PPUSH
10062: LD_VAR 0 3
10066: PPUSH
10067: LD_VAR 0 4
10071: PPUSH
10072: CALL 10082 0 5
10076: ST_TO_ADDR
// end ;
10077: LD_VAR 0 5
10081: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10082: LD_INT 0
10084: PPUSH
10085: PPUSH
10086: PPUSH
10087: PPUSH
// if not list then
10088: LD_VAR 0 3
10092: NOT
10093: IFFALSE 10097
// exit ;
10095: GO 10485
// result := [ ] ;
10097: LD_ADDR_VAR 0 6
10101: PUSH
10102: EMPTY
10103: ST_TO_ADDR
// for i in list do
10104: LD_ADDR_VAR 0 7
10108: PUSH
10109: LD_VAR 0 3
10113: PUSH
10114: FOR_IN
10115: IFFALSE 10317
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10117: LD_ADDR_VAR 0 9
10121: PUSH
10122: LD_VAR 0 7
10126: PPUSH
10127: LD_VAR 0 1
10131: PPUSH
10132: LD_VAR 0 2
10136: PPUSH
10137: CALL_OW 297
10141: ST_TO_ADDR
// if not result then
10142: LD_VAR 0 6
10146: NOT
10147: IFFALSE 10173
// result := [ [ i , tmp ] ] else
10149: LD_ADDR_VAR 0 6
10153: PUSH
10154: LD_VAR 0 7
10158: PUSH
10159: LD_VAR 0 9
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: EMPTY
10169: LIST
10170: ST_TO_ADDR
10171: GO 10315
// begin if result [ result ] [ 2 ] < tmp then
10173: LD_VAR 0 6
10177: PUSH
10178: LD_VAR 0 6
10182: ARRAY
10183: PUSH
10184: LD_INT 2
10186: ARRAY
10187: PUSH
10188: LD_VAR 0 9
10192: LESS
10193: IFFALSE 10235
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10195: LD_ADDR_VAR 0 6
10199: PUSH
10200: LD_VAR 0 6
10204: PPUSH
10205: LD_VAR 0 6
10209: PUSH
10210: LD_INT 1
10212: PLUS
10213: PPUSH
10214: LD_VAR 0 7
10218: PUSH
10219: LD_VAR 0 9
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 2
10232: ST_TO_ADDR
10233: GO 10315
// for j = 1 to result do
10235: LD_ADDR_VAR 0 8
10239: PUSH
10240: DOUBLE
10241: LD_INT 1
10243: DEC
10244: ST_TO_ADDR
10245: LD_VAR 0 6
10249: PUSH
10250: FOR_TO
10251: IFFALSE 10313
// begin if tmp < result [ j ] [ 2 ] then
10253: LD_VAR 0 9
10257: PUSH
10258: LD_VAR 0 6
10262: PUSH
10263: LD_VAR 0 8
10267: ARRAY
10268: PUSH
10269: LD_INT 2
10271: ARRAY
10272: LESS
10273: IFFALSE 10311
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10275: LD_ADDR_VAR 0 6
10279: PUSH
10280: LD_VAR 0 6
10284: PPUSH
10285: LD_VAR 0 8
10289: PPUSH
10290: LD_VAR 0 7
10294: PUSH
10295: LD_VAR 0 9
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 2
10308: ST_TO_ADDR
// break ;
10309: GO 10313
// end ; end ;
10311: GO 10250
10313: POP
10314: POP
// end ; end ;
10315: GO 10114
10317: POP
10318: POP
// if result and not asc then
10319: LD_VAR 0 6
10323: PUSH
10324: LD_VAR 0 4
10328: NOT
10329: AND
10330: IFFALSE 10405
// begin tmp := result ;
10332: LD_ADDR_VAR 0 9
10336: PUSH
10337: LD_VAR 0 6
10341: ST_TO_ADDR
// for i = tmp downto 1 do
10342: LD_ADDR_VAR 0 7
10346: PUSH
10347: DOUBLE
10348: LD_VAR 0 9
10352: INC
10353: ST_TO_ADDR
10354: LD_INT 1
10356: PUSH
10357: FOR_DOWNTO
10358: IFFALSE 10403
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10360: LD_ADDR_VAR 0 6
10364: PUSH
10365: LD_VAR 0 6
10369: PPUSH
10370: LD_VAR 0 9
10374: PUSH
10375: LD_VAR 0 7
10379: MINUS
10380: PUSH
10381: LD_INT 1
10383: PLUS
10384: PPUSH
10385: LD_VAR 0 9
10389: PUSH
10390: LD_VAR 0 7
10394: ARRAY
10395: PPUSH
10396: CALL_OW 1
10400: ST_TO_ADDR
10401: GO 10357
10403: POP
10404: POP
// end ; tmp := [ ] ;
10405: LD_ADDR_VAR 0 9
10409: PUSH
10410: EMPTY
10411: ST_TO_ADDR
// if mode then
10412: LD_VAR 0 5
10416: IFFALSE 10485
// begin for i = 1 to result do
10418: LD_ADDR_VAR 0 7
10422: PUSH
10423: DOUBLE
10424: LD_INT 1
10426: DEC
10427: ST_TO_ADDR
10428: LD_VAR 0 6
10432: PUSH
10433: FOR_TO
10434: IFFALSE 10473
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10436: LD_ADDR_VAR 0 9
10440: PUSH
10441: LD_VAR 0 9
10445: PPUSH
10446: LD_VAR 0 7
10450: PPUSH
10451: LD_VAR 0 6
10455: PUSH
10456: LD_VAR 0 7
10460: ARRAY
10461: PUSH
10462: LD_INT 1
10464: ARRAY
10465: PPUSH
10466: CALL_OW 1
10470: ST_TO_ADDR
10471: GO 10433
10473: POP
10474: POP
// result := tmp ;
10475: LD_ADDR_VAR 0 6
10479: PUSH
10480: LD_VAR 0 9
10484: ST_TO_ADDR
// end ; end ;
10485: LD_VAR 0 6
10489: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10490: LD_INT 0
10492: PPUSH
10493: PPUSH
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10498: LD_ADDR_VAR 0 5
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: LD_INT 0
10511: PUSH
10512: EMPTY
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
// if not x or not y then
10520: LD_VAR 0 2
10524: NOT
10525: PUSH
10526: LD_VAR 0 3
10530: NOT
10531: OR
10532: IFFALSE 10536
// exit ;
10534: GO 12186
// if not range then
10536: LD_VAR 0 4
10540: NOT
10541: IFFALSE 10551
// range := 10 ;
10543: LD_ADDR_VAR 0 4
10547: PUSH
10548: LD_INT 10
10550: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10551: LD_ADDR_VAR 0 8
10555: PUSH
10556: LD_INT 81
10558: PUSH
10559: LD_VAR 0 1
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 92
10570: PUSH
10571: LD_VAR 0 2
10575: PUSH
10576: LD_VAR 0 3
10580: PUSH
10581: LD_VAR 0 4
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 21
10597: PUSH
10598: LD_INT 3
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: ST_TO_ADDR
// if not tmp then
10619: LD_VAR 0 8
10623: NOT
10624: IFFALSE 10628
// exit ;
10626: GO 12186
// for i in tmp do
10628: LD_ADDR_VAR 0 6
10632: PUSH
10633: LD_VAR 0 8
10637: PUSH
10638: FOR_IN
10639: IFFALSE 12161
// begin points := [ 0 , 0 , 0 ] ;
10641: LD_ADDR_VAR 0 9
10645: PUSH
10646: LD_INT 0
10648: PUSH
10649: LD_INT 0
10651: PUSH
10652: LD_INT 0
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: ST_TO_ADDR
// bpoints := 1 ;
10660: LD_ADDR_VAR 0 10
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10668: LD_VAR 0 6
10672: PPUSH
10673: CALL_OW 247
10677: PUSH
10678: LD_INT 1
10680: DOUBLE
10681: EQUAL
10682: IFTRUE 10686
10684: GO 11264
10686: POP
// begin if GetClass ( i ) = 1 then
10687: LD_VAR 0 6
10691: PPUSH
10692: CALL_OW 257
10696: PUSH
10697: LD_INT 1
10699: EQUAL
10700: IFFALSE 10721
// points := [ 10 , 5 , 3 ] ;
10702: LD_ADDR_VAR 0 9
10706: PUSH
10707: LD_INT 10
10709: PUSH
10710: LD_INT 5
10712: PUSH
10713: LD_INT 3
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10721: LD_VAR 0 6
10725: PPUSH
10726: CALL_OW 257
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 3
10736: PUSH
10737: LD_INT 4
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: IN
10745: IFFALSE 10766
// points := [ 3 , 2 , 1 ] ;
10747: LD_ADDR_VAR 0 9
10751: PUSH
10752: LD_INT 3
10754: PUSH
10755: LD_INT 2
10757: PUSH
10758: LD_INT 1
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10766: LD_VAR 0 6
10770: PPUSH
10771: CALL_OW 257
10775: PUSH
10776: LD_INT 5
10778: EQUAL
10779: IFFALSE 10800
// points := [ 130 , 5 , 2 ] ;
10781: LD_ADDR_VAR 0 9
10785: PUSH
10786: LD_INT 130
10788: PUSH
10789: LD_INT 5
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10800: LD_VAR 0 6
10804: PPUSH
10805: CALL_OW 257
10809: PUSH
10810: LD_INT 8
10812: EQUAL
10813: IFFALSE 10834
// points := [ 35 , 35 , 30 ] ;
10815: LD_ADDR_VAR 0 9
10819: PUSH
10820: LD_INT 35
10822: PUSH
10823: LD_INT 35
10825: PUSH
10826: LD_INT 30
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10834: LD_VAR 0 6
10838: PPUSH
10839: CALL_OW 257
10843: PUSH
10844: LD_INT 9
10846: EQUAL
10847: IFFALSE 10868
// points := [ 20 , 55 , 40 ] ;
10849: LD_ADDR_VAR 0 9
10853: PUSH
10854: LD_INT 20
10856: PUSH
10857: LD_INT 55
10859: PUSH
10860: LD_INT 40
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10868: LD_VAR 0 6
10872: PPUSH
10873: CALL_OW 257
10877: PUSH
10878: LD_INT 12
10880: PUSH
10881: LD_INT 16
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: IN
10888: IFFALSE 10909
// points := [ 5 , 3 , 2 ] ;
10890: LD_ADDR_VAR 0 9
10894: PUSH
10895: LD_INT 5
10897: PUSH
10898: LD_INT 3
10900: PUSH
10901: LD_INT 2
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10909: LD_VAR 0 6
10913: PPUSH
10914: CALL_OW 257
10918: PUSH
10919: LD_INT 17
10921: EQUAL
10922: IFFALSE 10943
// points := [ 100 , 50 , 75 ] ;
10924: LD_ADDR_VAR 0 9
10928: PUSH
10929: LD_INT 100
10931: PUSH
10932: LD_INT 50
10934: PUSH
10935: LD_INT 75
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10943: LD_VAR 0 6
10947: PPUSH
10948: CALL_OW 257
10952: PUSH
10953: LD_INT 15
10955: EQUAL
10956: IFFALSE 10977
// points := [ 10 , 5 , 3 ] ;
10958: LD_ADDR_VAR 0 9
10962: PUSH
10963: LD_INT 10
10965: PUSH
10966: LD_INT 5
10968: PUSH
10969: LD_INT 3
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10977: LD_VAR 0 6
10981: PPUSH
10982: CALL_OW 257
10986: PUSH
10987: LD_INT 14
10989: EQUAL
10990: IFFALSE 11011
// points := [ 10 , 0 , 0 ] ;
10992: LD_ADDR_VAR 0 9
10996: PUSH
10997: LD_INT 10
10999: PUSH
11000: LD_INT 0
11002: PUSH
11003: LD_INT 0
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11011: LD_VAR 0 6
11015: PPUSH
11016: CALL_OW 257
11020: PUSH
11021: LD_INT 11
11023: EQUAL
11024: IFFALSE 11045
// points := [ 30 , 10 , 5 ] ;
11026: LD_ADDR_VAR 0 9
11030: PUSH
11031: LD_INT 30
11033: PUSH
11034: LD_INT 10
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_INT 5
11052: PPUSH
11053: CALL_OW 321
11057: PUSH
11058: LD_INT 2
11060: EQUAL
11061: IFFALSE 11078
// bpoints := bpoints * 1.8 ;
11063: LD_ADDR_VAR 0 10
11067: PUSH
11068: LD_VAR 0 10
11072: PUSH
11073: LD_REAL  1.80000000000000E+0000
11076: MUL
11077: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11078: LD_VAR 0 6
11082: PPUSH
11083: CALL_OW 257
11087: PUSH
11088: LD_INT 1
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 4
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: IN
11106: PUSH
11107: LD_VAR 0 1
11111: PPUSH
11112: LD_INT 51
11114: PPUSH
11115: CALL_OW 321
11119: PUSH
11120: LD_INT 2
11122: EQUAL
11123: AND
11124: IFFALSE 11141
// bpoints := bpoints * 1.2 ;
11126: LD_ADDR_VAR 0 10
11130: PUSH
11131: LD_VAR 0 10
11135: PUSH
11136: LD_REAL  1.20000000000000E+0000
11139: MUL
11140: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11141: LD_VAR 0 6
11145: PPUSH
11146: CALL_OW 257
11150: PUSH
11151: LD_INT 5
11153: PUSH
11154: LD_INT 7
11156: PUSH
11157: LD_INT 9
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: IN
11165: PUSH
11166: LD_VAR 0 1
11170: PPUSH
11171: LD_INT 52
11173: PPUSH
11174: CALL_OW 321
11178: PUSH
11179: LD_INT 2
11181: EQUAL
11182: AND
11183: IFFALSE 11200
// bpoints := bpoints * 1.5 ;
11185: LD_ADDR_VAR 0 10
11189: PUSH
11190: LD_VAR 0 10
11194: PUSH
11195: LD_REAL  1.50000000000000E+0000
11198: MUL
11199: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11200: LD_VAR 0 1
11204: PPUSH
11205: LD_INT 66
11207: PPUSH
11208: CALL_OW 321
11212: PUSH
11213: LD_INT 2
11215: EQUAL
11216: IFFALSE 11233
// bpoints := bpoints * 1.1 ;
11218: LD_ADDR_VAR 0 10
11222: PUSH
11223: LD_VAR 0 10
11227: PUSH
11228: LD_REAL  1.10000000000000E+0000
11231: MUL
11232: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11233: LD_ADDR_VAR 0 10
11237: PUSH
11238: LD_VAR 0 10
11242: PUSH
11243: LD_VAR 0 6
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 259
11255: PUSH
11256: LD_REAL  1.15000000000000E+0000
11259: MUL
11260: MUL
11261: ST_TO_ADDR
// end ; unit_vehicle :
11262: GO 12090
11264: LD_INT 2
11266: DOUBLE
11267: EQUAL
11268: IFTRUE 11272
11270: GO 12078
11272: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11273: LD_VAR 0 6
11277: PPUSH
11278: CALL_OW 264
11282: PUSH
11283: LD_INT 2
11285: PUSH
11286: LD_INT 42
11288: PUSH
11289: LD_INT 24
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: IN
11297: IFFALSE 11318
// points := [ 25 , 5 , 3 ] ;
11299: LD_ADDR_VAR 0 9
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 5
11309: PUSH
11310: LD_INT 3
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11318: LD_VAR 0 6
11322: PPUSH
11323: CALL_OW 264
11327: PUSH
11328: LD_INT 4
11330: PUSH
11331: LD_INT 43
11333: PUSH
11334: LD_INT 25
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: IN
11342: IFFALSE 11363
// points := [ 40 , 15 , 5 ] ;
11344: LD_ADDR_VAR 0 9
11348: PUSH
11349: LD_INT 40
11351: PUSH
11352: LD_INT 15
11354: PUSH
11355: LD_INT 5
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11363: LD_VAR 0 6
11367: PPUSH
11368: CALL_OW 264
11372: PUSH
11373: LD_INT 3
11375: PUSH
11376: LD_INT 23
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: IN
11383: IFFALSE 11404
// points := [ 7 , 25 , 8 ] ;
11385: LD_ADDR_VAR 0 9
11389: PUSH
11390: LD_INT 7
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 8
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11404: LD_VAR 0 6
11408: PPUSH
11409: CALL_OW 264
11413: PUSH
11414: LD_INT 5
11416: PUSH
11417: LD_INT 27
11419: PUSH
11420: LD_INT 44
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: IN
11428: IFFALSE 11449
// points := [ 14 , 50 , 16 ] ;
11430: LD_ADDR_VAR 0 9
11434: PUSH
11435: LD_INT 14
11437: PUSH
11438: LD_INT 50
11440: PUSH
11441: LD_INT 16
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11449: LD_VAR 0 6
11453: PPUSH
11454: CALL_OW 264
11458: PUSH
11459: LD_INT 6
11461: PUSH
11462: LD_INT 46
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: IN
11469: IFFALSE 11490
// points := [ 32 , 120 , 70 ] ;
11471: LD_ADDR_VAR 0 9
11475: PUSH
11476: LD_INT 32
11478: PUSH
11479: LD_INT 120
11481: PUSH
11482: LD_INT 70
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11490: LD_VAR 0 6
11494: PPUSH
11495: CALL_OW 264
11499: PUSH
11500: LD_INT 7
11502: PUSH
11503: LD_INT 28
11505: PUSH
11506: LD_INT 45
11508: PUSH
11509: LD_INT 92
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: IN
11518: IFFALSE 11539
// points := [ 35 , 20 , 45 ] ;
11520: LD_ADDR_VAR 0 9
11524: PUSH
11525: LD_INT 35
11527: PUSH
11528: LD_INT 20
11530: PUSH
11531: LD_INT 45
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11539: LD_VAR 0 6
11543: PPUSH
11544: CALL_OW 264
11548: PUSH
11549: LD_INT 47
11551: PUSH
11552: EMPTY
11553: LIST
11554: IN
11555: IFFALSE 11576
// points := [ 67 , 45 , 75 ] ;
11557: LD_ADDR_VAR 0 9
11561: PUSH
11562: LD_INT 67
11564: PUSH
11565: LD_INT 45
11567: PUSH
11568: LD_INT 75
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11576: LD_VAR 0 6
11580: PPUSH
11581: CALL_OW 264
11585: PUSH
11586: LD_INT 26
11588: PUSH
11589: EMPTY
11590: LIST
11591: IN
11592: IFFALSE 11613
// points := [ 120 , 30 , 80 ] ;
11594: LD_ADDR_VAR 0 9
11598: PUSH
11599: LD_INT 120
11601: PUSH
11602: LD_INT 30
11604: PUSH
11605: LD_INT 80
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11613: LD_VAR 0 6
11617: PPUSH
11618: CALL_OW 264
11622: PUSH
11623: LD_INT 22
11625: PUSH
11626: EMPTY
11627: LIST
11628: IN
11629: IFFALSE 11650
// points := [ 40 , 1 , 1 ] ;
11631: LD_ADDR_VAR 0 9
11635: PUSH
11636: LD_INT 40
11638: PUSH
11639: LD_INT 1
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11650: LD_VAR 0 6
11654: PPUSH
11655: CALL_OW 264
11659: PUSH
11660: LD_INT 29
11662: PUSH
11663: EMPTY
11664: LIST
11665: IN
11666: IFFALSE 11687
// points := [ 70 , 200 , 400 ] ;
11668: LD_ADDR_VAR 0 9
11672: PUSH
11673: LD_INT 70
11675: PUSH
11676: LD_INT 200
11678: PUSH
11679: LD_INT 400
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11687: LD_VAR 0 6
11691: PPUSH
11692: CALL_OW 264
11696: PUSH
11697: LD_INT 14
11699: PUSH
11700: LD_INT 53
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: IN
11707: IFFALSE 11728
// points := [ 40 , 10 , 20 ] ;
11709: LD_ADDR_VAR 0 9
11713: PUSH
11714: LD_INT 40
11716: PUSH
11717: LD_INT 10
11719: PUSH
11720: LD_INT 20
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11728: LD_VAR 0 6
11732: PPUSH
11733: CALL_OW 264
11737: PUSH
11738: LD_INT 9
11740: PUSH
11741: EMPTY
11742: LIST
11743: IN
11744: IFFALSE 11765
// points := [ 5 , 70 , 20 ] ;
11746: LD_ADDR_VAR 0 9
11750: PUSH
11751: LD_INT 5
11753: PUSH
11754: LD_INT 70
11756: PUSH
11757: LD_INT 20
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11765: LD_VAR 0 6
11769: PPUSH
11770: CALL_OW 264
11774: PUSH
11775: LD_INT 10
11777: PUSH
11778: EMPTY
11779: LIST
11780: IN
11781: IFFALSE 11802
// points := [ 35 , 110 , 70 ] ;
11783: LD_ADDR_VAR 0 9
11787: PUSH
11788: LD_INT 35
11790: PUSH
11791: LD_INT 110
11793: PUSH
11794: LD_INT 70
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11802: LD_VAR 0 6
11806: PPUSH
11807: CALL_OW 265
11811: PUSH
11812: LD_INT 25
11814: EQUAL
11815: IFFALSE 11836
// points := [ 80 , 65 , 100 ] ;
11817: LD_ADDR_VAR 0 9
11821: PUSH
11822: LD_INT 80
11824: PUSH
11825: LD_INT 65
11827: PUSH
11828: LD_INT 100
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11836: LD_VAR 0 6
11840: PPUSH
11841: CALL_OW 263
11845: PUSH
11846: LD_INT 1
11848: EQUAL
11849: IFFALSE 11884
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11851: LD_ADDR_VAR 0 10
11855: PUSH
11856: LD_VAR 0 10
11860: PUSH
11861: LD_VAR 0 6
11865: PPUSH
11866: CALL_OW 311
11870: PPUSH
11871: LD_INT 3
11873: PPUSH
11874: CALL_OW 259
11878: PUSH
11879: LD_INT 4
11881: MUL
11882: MUL
11883: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11884: LD_VAR 0 6
11888: PPUSH
11889: CALL_OW 263
11893: PUSH
11894: LD_INT 2
11896: EQUAL
11897: IFFALSE 11948
// begin j := IsControledBy ( i ) ;
11899: LD_ADDR_VAR 0 7
11903: PUSH
11904: LD_VAR 0 6
11908: PPUSH
11909: CALL_OW 312
11913: ST_TO_ADDR
// if j then
11914: LD_VAR 0 7
11918: IFFALSE 11948
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11920: LD_ADDR_VAR 0 10
11924: PUSH
11925: LD_VAR 0 10
11929: PUSH
11930: LD_VAR 0 7
11934: PPUSH
11935: LD_INT 3
11937: PPUSH
11938: CALL_OW 259
11942: PUSH
11943: LD_INT 3
11945: MUL
11946: MUL
11947: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11948: LD_VAR 0 6
11952: PPUSH
11953: CALL_OW 264
11957: PUSH
11958: LD_INT 5
11960: PUSH
11961: LD_INT 6
11963: PUSH
11964: LD_INT 46
11966: PUSH
11967: LD_INT 44
11969: PUSH
11970: LD_INT 47
11972: PUSH
11973: LD_INT 45
11975: PUSH
11976: LD_INT 28
11978: PUSH
11979: LD_INT 7
11981: PUSH
11982: LD_INT 27
11984: PUSH
11985: LD_INT 29
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: IN
12000: PUSH
12001: LD_VAR 0 1
12005: PPUSH
12006: LD_INT 52
12008: PPUSH
12009: CALL_OW 321
12013: PUSH
12014: LD_INT 2
12016: EQUAL
12017: AND
12018: IFFALSE 12035
// bpoints := bpoints * 1.2 ;
12020: LD_ADDR_VAR 0 10
12024: PUSH
12025: LD_VAR 0 10
12029: PUSH
12030: LD_REAL  1.20000000000000E+0000
12033: MUL
12034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12035: LD_VAR 0 6
12039: PPUSH
12040: CALL_OW 264
12044: PUSH
12045: LD_INT 6
12047: PUSH
12048: LD_INT 46
12050: PUSH
12051: LD_INT 47
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: IN
12059: IFFALSE 12076
// bpoints := bpoints * 1.2 ;
12061: LD_ADDR_VAR 0 10
12065: PUSH
12066: LD_VAR 0 10
12070: PUSH
12071: LD_REAL  1.20000000000000E+0000
12074: MUL
12075: ST_TO_ADDR
// end ; unit_building :
12076: GO 12090
12078: LD_INT 3
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12089
12086: POP
// ; end ;
12087: GO 12090
12089: POP
// for j = 1 to 3 do
12090: LD_ADDR_VAR 0 7
12094: PUSH
12095: DOUBLE
12096: LD_INT 1
12098: DEC
12099: ST_TO_ADDR
12100: LD_INT 3
12102: PUSH
12103: FOR_TO
12104: IFFALSE 12157
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12106: LD_ADDR_VAR 0 5
12110: PUSH
12111: LD_VAR 0 5
12115: PPUSH
12116: LD_VAR 0 7
12120: PPUSH
12121: LD_VAR 0 5
12125: PUSH
12126: LD_VAR 0 7
12130: ARRAY
12131: PUSH
12132: LD_VAR 0 9
12136: PUSH
12137: LD_VAR 0 7
12141: ARRAY
12142: PUSH
12143: LD_VAR 0 10
12147: MUL
12148: PLUS
12149: PPUSH
12150: CALL_OW 1
12154: ST_TO_ADDR
12155: GO 12103
12157: POP
12158: POP
// end ;
12159: GO 10638
12161: POP
12162: POP
// result := Replace ( result , 4 , tmp ) ;
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: LD_VAR 0 5
12172: PPUSH
12173: LD_INT 4
12175: PPUSH
12176: LD_VAR 0 8
12180: PPUSH
12181: CALL_OW 1
12185: ST_TO_ADDR
// end ;
12186: LD_VAR 0 5
12190: RET
// export function DangerAtRange ( unit , range ) ; begin
12191: LD_INT 0
12193: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 255
12208: PPUSH
12209: LD_VAR 0 1
12213: PPUSH
12214: CALL_OW 250
12218: PPUSH
12219: LD_VAR 0 1
12223: PPUSH
12224: CALL_OW 251
12228: PPUSH
12229: LD_VAR 0 2
12233: PPUSH
12234: CALL 10490 0 4
12238: ST_TO_ADDR
// end ;
12239: LD_VAR 0 3
12243: RET
// export function DangerInArea ( side , area ) ; begin
12244: LD_INT 0
12246: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12247: LD_ADDR_VAR 0 3
12251: PUSH
12252: LD_VAR 0 2
12256: PPUSH
12257: LD_INT 81
12259: PUSH
12260: LD_VAR 0 1
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PPUSH
12269: CALL_OW 70
12273: ST_TO_ADDR
// end ;
12274: LD_VAR 0 3
12278: RET
// export function IsExtension ( b ) ; begin
12279: LD_INT 0
12281: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12282: LD_ADDR_VAR 0 2
12286: PUSH
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 23
12294: PUSH
12295: LD_INT 20
12297: PUSH
12298: LD_INT 22
12300: PUSH
12301: LD_INT 17
12303: PUSH
12304: LD_INT 24
12306: PUSH
12307: LD_INT 21
12309: PUSH
12310: LD_INT 19
12312: PUSH
12313: LD_INT 16
12315: PUSH
12316: LD_INT 25
12318: PUSH
12319: LD_INT 18
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: IN
12334: ST_TO_ADDR
// end ;
12335: LD_VAR 0 2
12339: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
// result := [ ] ;
12345: LD_ADDR_VAR 0 4
12349: PUSH
12350: EMPTY
12351: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12352: LD_ADDR_VAR 0 5
12356: PUSH
12357: LD_VAR 0 2
12361: PPUSH
12362: LD_INT 21
12364: PUSH
12365: LD_INT 3
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 70
12376: ST_TO_ADDR
// if not tmp then
12377: LD_VAR 0 5
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12450
// if checkLink then
12386: LD_VAR 0 3
12390: IFFALSE 12440
// begin for i in tmp do
12392: LD_ADDR_VAR 0 6
12396: PUSH
12397: LD_VAR 0 5
12401: PUSH
12402: FOR_IN
12403: IFFALSE 12438
// if GetBase ( i ) <> base then
12405: LD_VAR 0 6
12409: PPUSH
12410: CALL_OW 274
12414: PUSH
12415: LD_VAR 0 1
12419: NONEQUAL
12420: IFFALSE 12436
// ComLinkToBase ( base , i ) ;
12422: LD_VAR 0 1
12426: PPUSH
12427: LD_VAR 0 6
12431: PPUSH
12432: CALL_OW 169
12436: GO 12402
12438: POP
12439: POP
// end ; result := tmp ;
12440: LD_ADDR_VAR 0 4
12444: PUSH
12445: LD_VAR 0 5
12449: ST_TO_ADDR
// end ;
12450: LD_VAR 0 4
12454: RET
// export function ComComplete ( units , b ) ; var i ; begin
12455: LD_INT 0
12457: PPUSH
12458: PPUSH
// if not units then
12459: LD_VAR 0 1
12463: NOT
12464: IFFALSE 12468
// exit ;
12466: GO 12558
// for i in units do
12468: LD_ADDR_VAR 0 4
12472: PUSH
12473: LD_VAR 0 1
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12556
// if BuildingStatus ( b ) = bs_build then
12481: LD_VAR 0 2
12485: PPUSH
12486: CALL_OW 461
12490: PUSH
12491: LD_INT 1
12493: EQUAL
12494: IFFALSE 12554
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12496: LD_VAR 0 4
12500: PPUSH
12501: LD_STRING h
12503: PUSH
12504: LD_VAR 0 2
12508: PPUSH
12509: CALL_OW 250
12513: PUSH
12514: LD_VAR 0 2
12518: PPUSH
12519: CALL_OW 251
12523: PUSH
12524: LD_VAR 0 2
12528: PUSH
12529: LD_INT 0
12531: PUSH
12532: LD_INT 0
12534: PUSH
12535: LD_INT 0
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: PPUSH
12550: CALL_OW 446
12554: GO 12478
12556: POP
12557: POP
// end ;
12558: LD_VAR 0 3
12562: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
12567: PPUSH
12568: PPUSH
12569: PPUSH
12570: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12571: LD_VAR 0 1
12575: NOT
12576: PUSH
12577: LD_VAR 0 1
12581: PPUSH
12582: CALL_OW 263
12586: PUSH
12587: LD_INT 2
12589: NONEQUAL
12590: OR
12591: IFFALSE 12595
// exit ;
12593: GO 12911
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12595: LD_ADDR_VAR 0 6
12599: PUSH
12600: LD_INT 22
12602: PUSH
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL_OW 255
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 2
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 36
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 34
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 69
12653: ST_TO_ADDR
// if not tmp then
12654: LD_VAR 0 6
12658: NOT
12659: IFFALSE 12663
// exit ;
12661: GO 12911
// result := [ ] ;
12663: LD_ADDR_VAR 0 2
12667: PUSH
12668: EMPTY
12669: ST_TO_ADDR
// for i in tmp do
12670: LD_ADDR_VAR 0 3
12674: PUSH
12675: LD_VAR 0 6
12679: PUSH
12680: FOR_IN
12681: IFFALSE 12752
// begin t := UnitsInside ( i ) ;
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: LD_VAR 0 3
12692: PPUSH
12693: CALL_OW 313
12697: ST_TO_ADDR
// if t then
12698: LD_VAR 0 4
12702: IFFALSE 12750
// for j in t do
12704: LD_ADDR_VAR 0 7
12708: PUSH
12709: LD_VAR 0 4
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12748
// result := Replace ( result , result + 1 , j ) ;
12717: LD_ADDR_VAR 0 2
12721: PUSH
12722: LD_VAR 0 2
12726: PPUSH
12727: LD_VAR 0 2
12731: PUSH
12732: LD_INT 1
12734: PLUS
12735: PPUSH
12736: LD_VAR 0 7
12740: PPUSH
12741: CALL_OW 1
12745: ST_TO_ADDR
12746: GO 12714
12748: POP
12749: POP
// end ;
12750: GO 12680
12752: POP
12753: POP
// if not result then
12754: LD_VAR 0 2
12758: NOT
12759: IFFALSE 12763
// exit ;
12761: GO 12911
// mech := result [ 1 ] ;
12763: LD_ADDR_VAR 0 5
12767: PUSH
12768: LD_VAR 0 2
12772: PUSH
12773: LD_INT 1
12775: ARRAY
12776: ST_TO_ADDR
// if result > 1 then
12777: LD_VAR 0 2
12781: PUSH
12782: LD_INT 1
12784: GREATER
12785: IFFALSE 12897
// begin for i = 2 to result do
12787: LD_ADDR_VAR 0 3
12791: PUSH
12792: DOUBLE
12793: LD_INT 2
12795: DEC
12796: ST_TO_ADDR
12797: LD_VAR 0 2
12801: PUSH
12802: FOR_TO
12803: IFFALSE 12895
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12805: LD_ADDR_VAR 0 4
12809: PUSH
12810: LD_VAR 0 2
12814: PUSH
12815: LD_VAR 0 3
12819: ARRAY
12820: PPUSH
12821: LD_INT 3
12823: PPUSH
12824: CALL_OW 259
12828: PUSH
12829: LD_VAR 0 2
12833: PUSH
12834: LD_VAR 0 3
12838: ARRAY
12839: PPUSH
12840: CALL_OW 432
12844: MINUS
12845: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12846: LD_VAR 0 4
12850: PUSH
12851: LD_VAR 0 5
12855: PPUSH
12856: LD_INT 3
12858: PPUSH
12859: CALL_OW 259
12863: PUSH
12864: LD_VAR 0 5
12868: PPUSH
12869: CALL_OW 432
12873: MINUS
12874: GREATEREQUAL
12875: IFFALSE 12893
// mech := result [ i ] ;
12877: LD_ADDR_VAR 0 5
12881: PUSH
12882: LD_VAR 0 2
12886: PUSH
12887: LD_VAR 0 3
12891: ARRAY
12892: ST_TO_ADDR
// end ;
12893: GO 12802
12895: POP
12896: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12897: LD_VAR 0 1
12901: PPUSH
12902: LD_VAR 0 5
12906: PPUSH
12907: CALL_OW 135
// end ;
12911: LD_VAR 0 2
12915: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12916: LD_INT 0
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
12929: PPUSH
12930: PPUSH
// result := [ ] ;
12931: LD_ADDR_VAR 0 7
12935: PUSH
12936: EMPTY
12937: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12938: LD_VAR 0 1
12942: PPUSH
12943: CALL_OW 266
12947: PUSH
12948: LD_INT 0
12950: PUSH
12951: LD_INT 1
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: IN
12958: NOT
12959: IFFALSE 12963
// exit ;
12961: GO 14597
// if name then
12963: LD_VAR 0 3
12967: IFFALSE 12983
// SetBName ( base_dep , name ) ;
12969: LD_VAR 0 1
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: CALL_OW 500
// base := GetBase ( base_dep ) ;
12983: LD_ADDR_VAR 0 15
12987: PUSH
12988: LD_VAR 0 1
12992: PPUSH
12993: CALL_OW 274
12997: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12998: LD_ADDR_VAR 0 16
13002: PUSH
13003: LD_VAR 0 1
13007: PPUSH
13008: CALL_OW 255
13012: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13013: LD_ADDR_VAR 0 17
13017: PUSH
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 248
13027: ST_TO_ADDR
// if sources then
13028: LD_VAR 0 5
13032: IFFALSE 13079
// for i = 1 to 3 do
13034: LD_ADDR_VAR 0 8
13038: PUSH
13039: DOUBLE
13040: LD_INT 1
13042: DEC
13043: ST_TO_ADDR
13044: LD_INT 3
13046: PUSH
13047: FOR_TO
13048: IFFALSE 13077
// AddResourceType ( base , i , sources [ i ] ) ;
13050: LD_VAR 0 15
13054: PPUSH
13055: LD_VAR 0 8
13059: PPUSH
13060: LD_VAR 0 5
13064: PUSH
13065: LD_VAR 0 8
13069: ARRAY
13070: PPUSH
13071: CALL_OW 276
13075: GO 13047
13077: POP
13078: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13079: LD_ADDR_VAR 0 18
13083: PUSH
13084: LD_VAR 0 15
13088: PPUSH
13089: LD_VAR 0 2
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL 12340 0 3
13101: ST_TO_ADDR
// InitHc ;
13102: CALL_OW 19
// InitUc ;
13106: CALL_OW 18
// uc_side := side ;
13110: LD_ADDR_OWVAR 20
13114: PUSH
13115: LD_VAR 0 16
13119: ST_TO_ADDR
// uc_nation := nation ;
13120: LD_ADDR_OWVAR 21
13124: PUSH
13125: LD_VAR 0 17
13129: ST_TO_ADDR
// if buildings then
13130: LD_VAR 0 18
13134: IFFALSE 14456
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13136: LD_ADDR_VAR 0 19
13140: PUSH
13141: LD_VAR 0 18
13145: PPUSH
13146: LD_INT 2
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 29
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 30
13161: PUSH
13162: LD_INT 30
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 72
13178: ST_TO_ADDR
// if tmp then
13179: LD_VAR 0 19
13183: IFFALSE 13231
// for i in tmp do
13185: LD_ADDR_VAR 0 8
13189: PUSH
13190: LD_VAR 0 19
13194: PUSH
13195: FOR_IN
13196: IFFALSE 13229
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13198: LD_VAR 0 8
13202: PPUSH
13203: CALL_OW 250
13207: PPUSH
13208: LD_VAR 0 8
13212: PPUSH
13213: CALL_OW 251
13217: PPUSH
13218: LD_VAR 0 16
13222: PPUSH
13223: CALL_OW 441
13227: GO 13195
13229: POP
13230: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13231: LD_VAR 0 18
13235: PPUSH
13236: LD_INT 2
13238: PUSH
13239: LD_INT 30
13241: PUSH
13242: LD_INT 32
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 30
13251: PUSH
13252: LD_INT 33
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 72
13268: IFFALSE 13356
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13270: LD_ADDR_VAR 0 8
13274: PUSH
13275: LD_VAR 0 18
13279: PPUSH
13280: LD_INT 2
13282: PUSH
13283: LD_INT 30
13285: PUSH
13286: LD_INT 32
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 30
13295: PUSH
13296: LD_INT 33
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: PPUSH
13308: CALL_OW 72
13312: PUSH
13313: FOR_IN
13314: IFFALSE 13354
// begin if not GetBWeapon ( i ) then
13316: LD_VAR 0 8
13320: PPUSH
13321: CALL_OW 269
13325: NOT
13326: IFFALSE 13352
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13328: LD_VAR 0 8
13332: PPUSH
13333: LD_VAR 0 8
13337: PPUSH
13338: LD_VAR 0 2
13342: PPUSH
13343: CALL 14602 0 2
13347: PPUSH
13348: CALL_OW 431
// end ;
13352: GO 13313
13354: POP
13355: POP
// end ; for i = 1 to personel do
13356: LD_ADDR_VAR 0 8
13360: PUSH
13361: DOUBLE
13362: LD_INT 1
13364: DEC
13365: ST_TO_ADDR
13366: LD_VAR 0 6
13370: PUSH
13371: FOR_TO
13372: IFFALSE 14436
// begin if i > 4 then
13374: LD_VAR 0 8
13378: PUSH
13379: LD_INT 4
13381: GREATER
13382: IFFALSE 13386
// break ;
13384: GO 14436
// case i of 1 :
13386: LD_VAR 0 8
13390: PUSH
13391: LD_INT 1
13393: DOUBLE
13394: EQUAL
13395: IFTRUE 13399
13397: GO 13479
13399: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13400: LD_ADDR_VAR 0 12
13404: PUSH
13405: LD_VAR 0 18
13409: PPUSH
13410: LD_INT 22
13412: PUSH
13413: LD_VAR 0 16
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 58
13424: PUSH
13425: EMPTY
13426: LIST
13427: PUSH
13428: LD_INT 2
13430: PUSH
13431: LD_INT 30
13433: PUSH
13434: LD_INT 32
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 30
13443: PUSH
13444: LD_INT 4
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 5
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 72
13476: ST_TO_ADDR
13477: GO 13701
13479: LD_INT 2
13481: DOUBLE
13482: EQUAL
13483: IFTRUE 13487
13485: GO 13549
13487: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13488: LD_ADDR_VAR 0 12
13492: PUSH
13493: LD_VAR 0 18
13497: PPUSH
13498: LD_INT 22
13500: PUSH
13501: LD_VAR 0 16
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: LD_INT 30
13515: PUSH
13516: LD_INT 0
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 30
13525: PUSH
13526: LD_INT 1
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PPUSH
13542: CALL_OW 72
13546: ST_TO_ADDR
13547: GO 13701
13549: LD_INT 3
13551: DOUBLE
13552: EQUAL
13553: IFTRUE 13557
13555: GO 13619
13557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13558: LD_ADDR_VAR 0 12
13562: PUSH
13563: LD_VAR 0 18
13567: PPUSH
13568: LD_INT 22
13570: PUSH
13571: LD_VAR 0 16
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: LD_INT 30
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 30
13595: PUSH
13596: LD_INT 3
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 72
13616: ST_TO_ADDR
13617: GO 13701
13619: LD_INT 4
13621: DOUBLE
13622: EQUAL
13623: IFTRUE 13627
13625: GO 13700
13627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13628: LD_ADDR_VAR 0 12
13632: PUSH
13633: LD_VAR 0 18
13637: PPUSH
13638: LD_INT 22
13640: PUSH
13641: LD_VAR 0 16
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 2
13652: PUSH
13653: LD_INT 30
13655: PUSH
13656: LD_INT 6
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 30
13665: PUSH
13666: LD_INT 7
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 30
13675: PUSH
13676: LD_INT 8
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PPUSH
13693: CALL_OW 72
13697: ST_TO_ADDR
13698: GO 13701
13700: POP
// if i = 1 then
13701: LD_VAR 0 8
13705: PUSH
13706: LD_INT 1
13708: EQUAL
13709: IFFALSE 13820
// begin tmp := [ ] ;
13711: LD_ADDR_VAR 0 19
13715: PUSH
13716: EMPTY
13717: ST_TO_ADDR
// for j in f do
13718: LD_ADDR_VAR 0 9
13722: PUSH
13723: LD_VAR 0 12
13727: PUSH
13728: FOR_IN
13729: IFFALSE 13802
// if GetBType ( j ) = b_bunker then
13731: LD_VAR 0 9
13735: PPUSH
13736: CALL_OW 266
13740: PUSH
13741: LD_INT 32
13743: EQUAL
13744: IFFALSE 13771
// tmp := Insert ( tmp , 1 , j ) else
13746: LD_ADDR_VAR 0 19
13750: PUSH
13751: LD_VAR 0 19
13755: PPUSH
13756: LD_INT 1
13758: PPUSH
13759: LD_VAR 0 9
13763: PPUSH
13764: CALL_OW 2
13768: ST_TO_ADDR
13769: GO 13800
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13771: LD_ADDR_VAR 0 19
13775: PUSH
13776: LD_VAR 0 19
13780: PPUSH
13781: LD_VAR 0 19
13785: PUSH
13786: LD_INT 1
13788: PLUS
13789: PPUSH
13790: LD_VAR 0 9
13794: PPUSH
13795: CALL_OW 2
13799: ST_TO_ADDR
13800: GO 13728
13802: POP
13803: POP
// if tmp then
13804: LD_VAR 0 19
13808: IFFALSE 13820
// f := tmp ;
13810: LD_ADDR_VAR 0 12
13814: PUSH
13815: LD_VAR 0 19
13819: ST_TO_ADDR
// end ; x := personel [ i ] ;
13820: LD_ADDR_VAR 0 13
13824: PUSH
13825: LD_VAR 0 6
13829: PUSH
13830: LD_VAR 0 8
13834: ARRAY
13835: ST_TO_ADDR
// if x = - 1 then
13836: LD_VAR 0 13
13840: PUSH
13841: LD_INT 1
13843: NEG
13844: EQUAL
13845: IFFALSE 14054
// begin for j in f do
13847: LD_ADDR_VAR 0 9
13851: PUSH
13852: LD_VAR 0 12
13856: PUSH
13857: FOR_IN
13858: IFFALSE 14050
// repeat InitHc ;
13860: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13864: LD_VAR 0 9
13868: PPUSH
13869: CALL_OW 266
13873: PUSH
13874: LD_INT 5
13876: EQUAL
13877: IFFALSE 13947
// begin if UnitsInside ( j ) < 3 then
13879: LD_VAR 0 9
13883: PPUSH
13884: CALL_OW 313
13888: PUSH
13889: LD_INT 3
13891: LESS
13892: IFFALSE 13928
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13894: LD_INT 0
13896: PPUSH
13897: LD_INT 5
13899: PUSH
13900: LD_INT 8
13902: PUSH
13903: LD_INT 9
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: LD_VAR 0 17
13915: ARRAY
13916: PPUSH
13917: LD_VAR 0 4
13921: PPUSH
13922: CALL_OW 380
13926: GO 13945
// PrepareHuman ( false , i , skill ) ;
13928: LD_INT 0
13930: PPUSH
13931: LD_VAR 0 8
13935: PPUSH
13936: LD_VAR 0 4
13940: PPUSH
13941: CALL_OW 380
// end else
13945: GO 13964
// PrepareHuman ( false , i , skill ) ;
13947: LD_INT 0
13949: PPUSH
13950: LD_VAR 0 8
13954: PPUSH
13955: LD_VAR 0 4
13959: PPUSH
13960: CALL_OW 380
// un := CreateHuman ;
13964: LD_ADDR_VAR 0 14
13968: PUSH
13969: CALL_OW 44
13973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13974: LD_ADDR_VAR 0 7
13978: PUSH
13979: LD_VAR 0 7
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_VAR 0 14
13991: PPUSH
13992: CALL_OW 2
13996: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13997: LD_VAR 0 14
14001: PPUSH
14002: LD_VAR 0 9
14006: PPUSH
14007: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14011: LD_VAR 0 9
14015: PPUSH
14016: CALL_OW 313
14020: PUSH
14021: LD_INT 6
14023: EQUAL
14024: PUSH
14025: LD_VAR 0 9
14029: PPUSH
14030: CALL_OW 266
14034: PUSH
14035: LD_INT 32
14037: PUSH
14038: LD_INT 31
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: IN
14045: OR
14046: IFFALSE 13860
14048: GO 13857
14050: POP
14051: POP
// end else
14052: GO 14434
// for j = 1 to x do
14054: LD_ADDR_VAR 0 9
14058: PUSH
14059: DOUBLE
14060: LD_INT 1
14062: DEC
14063: ST_TO_ADDR
14064: LD_VAR 0 13
14068: PUSH
14069: FOR_TO
14070: IFFALSE 14432
// begin InitHc ;
14072: CALL_OW 19
// if not f then
14076: LD_VAR 0 12
14080: NOT
14081: IFFALSE 14170
// begin PrepareHuman ( false , i , skill ) ;
14083: LD_INT 0
14085: PPUSH
14086: LD_VAR 0 8
14090: PPUSH
14091: LD_VAR 0 4
14095: PPUSH
14096: CALL_OW 380
// un := CreateHuman ;
14100: LD_ADDR_VAR 0 14
14104: PUSH
14105: CALL_OW 44
14109: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14110: LD_ADDR_VAR 0 7
14114: PUSH
14115: LD_VAR 0 7
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: LD_VAR 0 14
14127: PPUSH
14128: CALL_OW 2
14132: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14133: LD_VAR 0 14
14137: PPUSH
14138: LD_VAR 0 1
14142: PPUSH
14143: CALL_OW 250
14147: PPUSH
14148: LD_VAR 0 1
14152: PPUSH
14153: CALL_OW 251
14157: PPUSH
14158: LD_INT 10
14160: PPUSH
14161: LD_INT 0
14163: PPUSH
14164: CALL_OW 50
// continue ;
14168: GO 14069
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14170: LD_VAR 0 12
14174: PUSH
14175: LD_INT 1
14177: ARRAY
14178: PPUSH
14179: CALL_OW 313
14183: PUSH
14184: LD_VAR 0 12
14188: PUSH
14189: LD_INT 1
14191: ARRAY
14192: PPUSH
14193: CALL_OW 266
14197: PUSH
14198: LD_INT 32
14200: PUSH
14201: LD_INT 31
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: IN
14208: AND
14209: PUSH
14210: LD_VAR 0 12
14214: PUSH
14215: LD_INT 1
14217: ARRAY
14218: PPUSH
14219: CALL_OW 313
14223: PUSH
14224: LD_INT 6
14226: EQUAL
14227: OR
14228: IFFALSE 14248
// f := Delete ( f , 1 ) ;
14230: LD_ADDR_VAR 0 12
14234: PUSH
14235: LD_VAR 0 12
14239: PPUSH
14240: LD_INT 1
14242: PPUSH
14243: CALL_OW 3
14247: ST_TO_ADDR
// if not f then
14248: LD_VAR 0 12
14252: NOT
14253: IFFALSE 14271
// begin x := x + 2 ;
14255: LD_ADDR_VAR 0 13
14259: PUSH
14260: LD_VAR 0 13
14264: PUSH
14265: LD_INT 2
14267: PLUS
14268: ST_TO_ADDR
// continue ;
14269: GO 14069
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14271: LD_VAR 0 12
14275: PUSH
14276: LD_INT 1
14278: ARRAY
14279: PPUSH
14280: CALL_OW 266
14284: PUSH
14285: LD_INT 5
14287: EQUAL
14288: IFFALSE 14362
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14290: LD_VAR 0 12
14294: PUSH
14295: LD_INT 1
14297: ARRAY
14298: PPUSH
14299: CALL_OW 313
14303: PUSH
14304: LD_INT 3
14306: LESS
14307: IFFALSE 14343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14309: LD_INT 0
14311: PPUSH
14312: LD_INT 5
14314: PUSH
14315: LD_INT 8
14317: PUSH
14318: LD_INT 9
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_VAR 0 17
14330: ARRAY
14331: PPUSH
14332: LD_VAR 0 4
14336: PPUSH
14337: CALL_OW 380
14341: GO 14360
// PrepareHuman ( false , i , skill ) ;
14343: LD_INT 0
14345: PPUSH
14346: LD_VAR 0 8
14350: PPUSH
14351: LD_VAR 0 4
14355: PPUSH
14356: CALL_OW 380
// end else
14360: GO 14379
// PrepareHuman ( false , i , skill ) ;
14362: LD_INT 0
14364: PPUSH
14365: LD_VAR 0 8
14369: PPUSH
14370: LD_VAR 0 4
14374: PPUSH
14375: CALL_OW 380
// un := CreateHuman ;
14379: LD_ADDR_VAR 0 14
14383: PUSH
14384: CALL_OW 44
14388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14389: LD_ADDR_VAR 0 7
14393: PUSH
14394: LD_VAR 0 7
14398: PPUSH
14399: LD_INT 1
14401: PPUSH
14402: LD_VAR 0 14
14406: PPUSH
14407: CALL_OW 2
14411: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14412: LD_VAR 0 14
14416: PPUSH
14417: LD_VAR 0 12
14421: PUSH
14422: LD_INT 1
14424: ARRAY
14425: PPUSH
14426: CALL_OW 52
// end ;
14430: GO 14069
14432: POP
14433: POP
// end ;
14434: GO 13371
14436: POP
14437: POP
// result := result ^ buildings ;
14438: LD_ADDR_VAR 0 7
14442: PUSH
14443: LD_VAR 0 7
14447: PUSH
14448: LD_VAR 0 18
14452: ADD
14453: ST_TO_ADDR
// end else
14454: GO 14597
// begin for i = 1 to personel do
14456: LD_ADDR_VAR 0 8
14460: PUSH
14461: DOUBLE
14462: LD_INT 1
14464: DEC
14465: ST_TO_ADDR
14466: LD_VAR 0 6
14470: PUSH
14471: FOR_TO
14472: IFFALSE 14595
// begin if i > 4 then
14474: LD_VAR 0 8
14478: PUSH
14479: LD_INT 4
14481: GREATER
14482: IFFALSE 14486
// break ;
14484: GO 14595
// x := personel [ i ] ;
14486: LD_ADDR_VAR 0 13
14490: PUSH
14491: LD_VAR 0 6
14495: PUSH
14496: LD_VAR 0 8
14500: ARRAY
14501: ST_TO_ADDR
// if x = - 1 then
14502: LD_VAR 0 13
14506: PUSH
14507: LD_INT 1
14509: NEG
14510: EQUAL
14511: IFFALSE 14515
// continue ;
14513: GO 14471
// PrepareHuman ( false , i , skill ) ;
14515: LD_INT 0
14517: PPUSH
14518: LD_VAR 0 8
14522: PPUSH
14523: LD_VAR 0 4
14527: PPUSH
14528: CALL_OW 380
// un := CreateHuman ;
14532: LD_ADDR_VAR 0 14
14536: PUSH
14537: CALL_OW 44
14541: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14542: LD_VAR 0 14
14546: PPUSH
14547: LD_VAR 0 1
14551: PPUSH
14552: CALL_OW 250
14556: PPUSH
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 251
14566: PPUSH
14567: LD_INT 10
14569: PPUSH
14570: LD_INT 0
14572: PPUSH
14573: CALL_OW 50
// result := result ^ un ;
14577: LD_ADDR_VAR 0 7
14581: PUSH
14582: LD_VAR 0 7
14586: PUSH
14587: LD_VAR 0 14
14591: ADD
14592: ST_TO_ADDR
// end ;
14593: GO 14471
14595: POP
14596: POP
// end ; end ;
14597: LD_VAR 0 7
14601: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
14611: PPUSH
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
14619: PPUSH
// result := false ;
14620: LD_ADDR_VAR 0 3
14624: PUSH
14625: LD_INT 0
14627: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14628: LD_VAR 0 1
14632: NOT
14633: PUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 266
14643: PUSH
14644: LD_INT 32
14646: PUSH
14647: LD_INT 33
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: IN
14654: NOT
14655: OR
14656: IFFALSE 14660
// exit ;
14658: GO 15769
// nat := GetNation ( tower ) ;
14660: LD_ADDR_VAR 0 12
14664: PUSH
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 248
14674: ST_TO_ADDR
// side := GetSide ( tower ) ;
14675: LD_ADDR_VAR 0 16
14679: PUSH
14680: LD_VAR 0 1
14684: PPUSH
14685: CALL_OW 255
14689: ST_TO_ADDR
// x := GetX ( tower ) ;
14690: LD_ADDR_VAR 0 10
14694: PUSH
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 250
14704: ST_TO_ADDR
// y := GetY ( tower ) ;
14705: LD_ADDR_VAR 0 11
14709: PUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 251
14719: ST_TO_ADDR
// if not x or not y then
14720: LD_VAR 0 10
14724: NOT
14725: PUSH
14726: LD_VAR 0 11
14730: NOT
14731: OR
14732: IFFALSE 14736
// exit ;
14734: GO 15769
// weapon := 0 ;
14736: LD_ADDR_VAR 0 18
14740: PUSH
14741: LD_INT 0
14743: ST_TO_ADDR
// fac_list := [ ] ;
14744: LD_ADDR_VAR 0 17
14748: PUSH
14749: EMPTY
14750: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14751: LD_ADDR_VAR 0 6
14755: PUSH
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 274
14765: PPUSH
14766: LD_VAR 0 2
14770: PPUSH
14771: LD_INT 0
14773: PPUSH
14774: CALL 12340 0 3
14778: PPUSH
14779: LD_INT 30
14781: PUSH
14782: LD_INT 3
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PPUSH
14789: CALL_OW 72
14793: ST_TO_ADDR
// if not factories then
14794: LD_VAR 0 6
14798: NOT
14799: IFFALSE 14803
// exit ;
14801: GO 15769
// for i in factories do
14803: LD_ADDR_VAR 0 8
14807: PUSH
14808: LD_VAR 0 6
14812: PUSH
14813: FOR_IN
14814: IFFALSE 14839
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14816: LD_ADDR_VAR 0 17
14820: PUSH
14821: LD_VAR 0 17
14825: PUSH
14826: LD_VAR 0 8
14830: PPUSH
14831: CALL_OW 478
14835: UNION
14836: ST_TO_ADDR
14837: GO 14813
14839: POP
14840: POP
// if not fac_list then
14841: LD_VAR 0 17
14845: NOT
14846: IFFALSE 14850
// exit ;
14848: GO 15769
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14850: LD_ADDR_VAR 0 5
14854: PUSH
14855: LD_INT 4
14857: PUSH
14858: LD_INT 5
14860: PUSH
14861: LD_INT 9
14863: PUSH
14864: LD_INT 10
14866: PUSH
14867: LD_INT 6
14869: PUSH
14870: LD_INT 7
14872: PUSH
14873: LD_INT 11
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 27
14887: PUSH
14888: LD_INT 28
14890: PUSH
14891: LD_INT 26
14893: PUSH
14894: LD_INT 30
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 43
14905: PUSH
14906: LD_INT 44
14908: PUSH
14909: LD_INT 46
14911: PUSH
14912: LD_INT 45
14914: PUSH
14915: LD_INT 47
14917: PUSH
14918: LD_INT 49
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: PUSH
14934: LD_VAR 0 12
14938: ARRAY
14939: ST_TO_ADDR
// list := list isect fac_list ;
14940: LD_ADDR_VAR 0 5
14944: PUSH
14945: LD_VAR 0 5
14949: PUSH
14950: LD_VAR 0 17
14954: ISECT
14955: ST_TO_ADDR
// if not list then
14956: LD_VAR 0 5
14960: NOT
14961: IFFALSE 14965
// exit ;
14963: GO 15769
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14965: LD_VAR 0 12
14969: PUSH
14970: LD_INT 3
14972: EQUAL
14973: PUSH
14974: LD_INT 49
14976: PUSH
14977: LD_VAR 0 5
14981: IN
14982: AND
14983: PUSH
14984: LD_INT 31
14986: PPUSH
14987: LD_VAR 0 16
14991: PPUSH
14992: CALL_OW 321
14996: PUSH
14997: LD_INT 2
14999: EQUAL
15000: AND
15001: IFFALSE 15061
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15003: LD_INT 22
15005: PUSH
15006: LD_VAR 0 16
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 35
15017: PUSH
15018: LD_INT 49
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 91
15027: PUSH
15028: LD_VAR 0 1
15032: PUSH
15033: LD_INT 10
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 69
15050: NOT
15051: IFFALSE 15061
// weapon := ru_time_lapser ;
15053: LD_ADDR_VAR 0 18
15057: PUSH
15058: LD_INT 49
15060: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15061: LD_VAR 0 12
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: IN
15076: PUSH
15077: LD_INT 11
15079: PUSH
15080: LD_VAR 0 5
15084: IN
15085: PUSH
15086: LD_INT 30
15088: PUSH
15089: LD_VAR 0 5
15093: IN
15094: OR
15095: AND
15096: PUSH
15097: LD_INT 6
15099: PPUSH
15100: LD_VAR 0 16
15104: PPUSH
15105: CALL_OW 321
15109: PUSH
15110: LD_INT 2
15112: EQUAL
15113: AND
15114: IFFALSE 15279
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15116: LD_INT 22
15118: PUSH
15119: LD_VAR 0 16
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 2
15130: PUSH
15131: LD_INT 35
15133: PUSH
15134: LD_INT 11
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 35
15143: PUSH
15144: LD_INT 30
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 91
15158: PUSH
15159: LD_VAR 0 1
15163: PUSH
15164: LD_INT 18
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: LIST
15176: PPUSH
15177: CALL_OW 69
15181: NOT
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_VAR 0 16
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: LD_INT 30
15200: PUSH
15201: LD_INT 32
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 30
15210: PUSH
15211: LD_INT 33
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 91
15225: PUSH
15226: LD_VAR 0 1
15230: PUSH
15231: LD_INT 12
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PUSH
15252: LD_INT 2
15254: GREATER
15255: AND
15256: IFFALSE 15279
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15258: LD_ADDR_VAR 0 18
15262: PUSH
15263: LD_INT 11
15265: PUSH
15266: LD_INT 30
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_VAR 0 12
15277: ARRAY
15278: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15279: LD_VAR 0 18
15283: NOT
15284: PUSH
15285: LD_INT 40
15287: PPUSH
15288: LD_VAR 0 16
15292: PPUSH
15293: CALL_OW 321
15297: PUSH
15298: LD_INT 2
15300: EQUAL
15301: AND
15302: PUSH
15303: LD_INT 7
15305: PUSH
15306: LD_VAR 0 5
15310: IN
15311: PUSH
15312: LD_INT 28
15314: PUSH
15315: LD_VAR 0 5
15319: IN
15320: OR
15321: PUSH
15322: LD_INT 45
15324: PUSH
15325: LD_VAR 0 5
15329: IN
15330: OR
15331: AND
15332: IFFALSE 15586
// begin hex := GetHexInfo ( x , y ) ;
15334: LD_ADDR_VAR 0 4
15338: PUSH
15339: LD_VAR 0 10
15343: PPUSH
15344: LD_VAR 0 11
15348: PPUSH
15349: CALL_OW 546
15353: ST_TO_ADDR
// if hex [ 1 ] then
15354: LD_VAR 0 4
15358: PUSH
15359: LD_INT 1
15361: ARRAY
15362: IFFALSE 15366
// exit ;
15364: GO 15769
// height := hex [ 2 ] ;
15366: LD_ADDR_VAR 0 15
15370: PUSH
15371: LD_VAR 0 4
15375: PUSH
15376: LD_INT 2
15378: ARRAY
15379: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15380: LD_ADDR_VAR 0 14
15384: PUSH
15385: LD_INT 0
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: LD_INT 5
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: ST_TO_ADDR
// for i in tmp do
15403: LD_ADDR_VAR 0 8
15407: PUSH
15408: LD_VAR 0 14
15412: PUSH
15413: FOR_IN
15414: IFFALSE 15584
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15416: LD_ADDR_VAR 0 9
15420: PUSH
15421: LD_VAR 0 10
15425: PPUSH
15426: LD_VAR 0 8
15430: PPUSH
15431: LD_INT 5
15433: PPUSH
15434: CALL_OW 272
15438: PUSH
15439: LD_VAR 0 11
15443: PPUSH
15444: LD_VAR 0 8
15448: PPUSH
15449: LD_INT 5
15451: PPUSH
15452: CALL_OW 273
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15461: LD_VAR 0 9
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: PPUSH
15470: LD_VAR 0 9
15474: PUSH
15475: LD_INT 2
15477: ARRAY
15478: PPUSH
15479: CALL_OW 488
15483: IFFALSE 15582
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15485: LD_ADDR_VAR 0 4
15489: PUSH
15490: LD_VAR 0 9
15494: PUSH
15495: LD_INT 1
15497: ARRAY
15498: PPUSH
15499: LD_VAR 0 9
15503: PUSH
15504: LD_INT 2
15506: ARRAY
15507: PPUSH
15508: CALL_OW 546
15512: ST_TO_ADDR
// if hex [ 1 ] then
15513: LD_VAR 0 4
15517: PUSH
15518: LD_INT 1
15520: ARRAY
15521: IFFALSE 15525
// continue ;
15523: GO 15413
// h := hex [ 2 ] ;
15525: LD_ADDR_VAR 0 13
15529: PUSH
15530: LD_VAR 0 4
15534: PUSH
15535: LD_INT 2
15537: ARRAY
15538: ST_TO_ADDR
// if h + 7 < height then
15539: LD_VAR 0 13
15543: PUSH
15544: LD_INT 7
15546: PLUS
15547: PUSH
15548: LD_VAR 0 15
15552: LESS
15553: IFFALSE 15582
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15555: LD_ADDR_VAR 0 18
15559: PUSH
15560: LD_INT 7
15562: PUSH
15563: LD_INT 28
15565: PUSH
15566: LD_INT 45
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: PUSH
15574: LD_VAR 0 12
15578: ARRAY
15579: ST_TO_ADDR
// break ;
15580: GO 15584
// end ; end ; end ;
15582: GO 15413
15584: POP
15585: POP
// end ; if not weapon then
15586: LD_VAR 0 18
15590: NOT
15591: IFFALSE 15651
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15593: LD_ADDR_VAR 0 5
15597: PUSH
15598: LD_VAR 0 5
15602: PUSH
15603: LD_INT 11
15605: PUSH
15606: LD_INT 30
15608: PUSH
15609: LD_INT 49
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: DIFF
15617: ST_TO_ADDR
// if not list then
15618: LD_VAR 0 5
15622: NOT
15623: IFFALSE 15627
// exit ;
15625: GO 15769
// weapon := list [ rand ( 1 , list ) ] ;
15627: LD_ADDR_VAR 0 18
15631: PUSH
15632: LD_VAR 0 5
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_VAR 0 5
15644: PPUSH
15645: CALL_OW 12
15649: ARRAY
15650: ST_TO_ADDR
// end ; if weapon then
15651: LD_VAR 0 18
15655: IFFALSE 15769
// begin tmp := CostOfWeapon ( weapon ) ;
15657: LD_ADDR_VAR 0 14
15661: PUSH
15662: LD_VAR 0 18
15666: PPUSH
15667: CALL_OW 451
15671: ST_TO_ADDR
// j := GetBase ( tower ) ;
15672: LD_ADDR_VAR 0 9
15676: PUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 274
15686: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15687: LD_VAR 0 9
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 275
15699: PUSH
15700: LD_VAR 0 14
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: GREATEREQUAL
15709: PUSH
15710: LD_VAR 0 9
15714: PPUSH
15715: LD_INT 2
15717: PPUSH
15718: CALL_OW 275
15722: PUSH
15723: LD_VAR 0 14
15727: PUSH
15728: LD_INT 2
15730: ARRAY
15731: GREATEREQUAL
15732: AND
15733: PUSH
15734: LD_VAR 0 9
15738: PPUSH
15739: LD_INT 3
15741: PPUSH
15742: CALL_OW 275
15746: PUSH
15747: LD_VAR 0 14
15751: PUSH
15752: LD_INT 3
15754: ARRAY
15755: GREATEREQUAL
15756: AND
15757: IFFALSE 15769
// result := weapon ;
15759: LD_ADDR_VAR 0 3
15763: PUSH
15764: LD_VAR 0 18
15768: ST_TO_ADDR
// end ; end ;
15769: LD_VAR 0 3
15773: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15774: LD_INT 0
15776: PPUSH
15777: PPUSH
// result := true ;
15778: LD_ADDR_VAR 0 3
15782: PUSH
15783: LD_INT 1
15785: ST_TO_ADDR
// if array1 = array2 then
15786: LD_VAR 0 1
15790: PUSH
15791: LD_VAR 0 2
15795: EQUAL
15796: IFFALSE 15856
// begin for i = 1 to array1 do
15798: LD_ADDR_VAR 0 4
15802: PUSH
15803: DOUBLE
15804: LD_INT 1
15806: DEC
15807: ST_TO_ADDR
15808: LD_VAR 0 1
15812: PUSH
15813: FOR_TO
15814: IFFALSE 15852
// if array1 [ i ] <> array2 [ i ] then
15816: LD_VAR 0 1
15820: PUSH
15821: LD_VAR 0 4
15825: ARRAY
15826: PUSH
15827: LD_VAR 0 2
15831: PUSH
15832: LD_VAR 0 4
15836: ARRAY
15837: NONEQUAL
15838: IFFALSE 15850
// begin result := false ;
15840: LD_ADDR_VAR 0 3
15844: PUSH
15845: LD_INT 0
15847: ST_TO_ADDR
// break ;
15848: GO 15852
// end ;
15850: GO 15813
15852: POP
15853: POP
// end else
15854: GO 15864
// result := false ;
15856: LD_ADDR_VAR 0 3
15860: PUSH
15861: LD_INT 0
15863: ST_TO_ADDR
// end ;
15864: LD_VAR 0 3
15868: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15869: LD_INT 0
15871: PPUSH
15872: PPUSH
// if not array1 or not array2 then
15873: LD_VAR 0 1
15877: NOT
15878: PUSH
15879: LD_VAR 0 2
15883: NOT
15884: OR
15885: IFFALSE 15889
// exit ;
15887: GO 15953
// result := true ;
15889: LD_ADDR_VAR 0 3
15893: PUSH
15894: LD_INT 1
15896: ST_TO_ADDR
// for i = 1 to array1 do
15897: LD_ADDR_VAR 0 4
15901: PUSH
15902: DOUBLE
15903: LD_INT 1
15905: DEC
15906: ST_TO_ADDR
15907: LD_VAR 0 1
15911: PUSH
15912: FOR_TO
15913: IFFALSE 15951
// if array1 [ i ] <> array2 [ i ] then
15915: LD_VAR 0 1
15919: PUSH
15920: LD_VAR 0 4
15924: ARRAY
15925: PUSH
15926: LD_VAR 0 2
15930: PUSH
15931: LD_VAR 0 4
15935: ARRAY
15936: NONEQUAL
15937: IFFALSE 15949
// begin result := false ;
15939: LD_ADDR_VAR 0 3
15943: PUSH
15944: LD_INT 0
15946: ST_TO_ADDR
// break ;
15947: GO 15951
// end ;
15949: GO 15912
15951: POP
15952: POP
// end ;
15953: LD_VAR 0 3
15957: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15958: LD_INT 0
15960: PPUSH
15961: PPUSH
15962: PPUSH
// pom := GetBase ( fac ) ;
15963: LD_ADDR_VAR 0 5
15967: PUSH
15968: LD_VAR 0 1
15972: PPUSH
15973: CALL_OW 274
15977: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15978: LD_ADDR_VAR 0 4
15982: PUSH
15983: LD_VAR 0 2
15987: PUSH
15988: LD_INT 1
15990: ARRAY
15991: PPUSH
15992: LD_VAR 0 2
15996: PUSH
15997: LD_INT 2
15999: ARRAY
16000: PPUSH
16001: LD_VAR 0 2
16005: PUSH
16006: LD_INT 3
16008: ARRAY
16009: PPUSH
16010: LD_VAR 0 2
16014: PUSH
16015: LD_INT 4
16017: ARRAY
16018: PPUSH
16019: CALL_OW 449
16023: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: LD_VAR 0 5
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 275
16041: PUSH
16042: LD_VAR 0 4
16046: PUSH
16047: LD_INT 1
16049: ARRAY
16050: GREATEREQUAL
16051: PUSH
16052: LD_VAR 0 5
16056: PPUSH
16057: LD_INT 2
16059: PPUSH
16060: CALL_OW 275
16064: PUSH
16065: LD_VAR 0 4
16069: PUSH
16070: LD_INT 2
16072: ARRAY
16073: GREATEREQUAL
16074: AND
16075: PUSH
16076: LD_VAR 0 5
16080: PPUSH
16081: LD_INT 3
16083: PPUSH
16084: CALL_OW 275
16088: PUSH
16089: LD_VAR 0 4
16093: PUSH
16094: LD_INT 3
16096: ARRAY
16097: GREATEREQUAL
16098: AND
16099: ST_TO_ADDR
// end ;
16100: LD_VAR 0 3
16104: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16105: LD_INT 0
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
// pom := GetBase ( building ) ;
16111: LD_ADDR_VAR 0 3
16115: PUSH
16116: LD_VAR 0 1
16120: PPUSH
16121: CALL_OW 274
16125: ST_TO_ADDR
// if not pom then
16126: LD_VAR 0 3
16130: NOT
16131: IFFALSE 16135
// exit ;
16133: GO 16305
// btype := GetBType ( building ) ;
16135: LD_ADDR_VAR 0 5
16139: PUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 266
16149: ST_TO_ADDR
// if btype = b_armoury then
16150: LD_VAR 0 5
16154: PUSH
16155: LD_INT 4
16157: EQUAL
16158: IFFALSE 16168
// btype := b_barracks ;
16160: LD_ADDR_VAR 0 5
16164: PUSH
16165: LD_INT 5
16167: ST_TO_ADDR
// if btype = b_depot then
16168: LD_VAR 0 5
16172: PUSH
16173: LD_INT 0
16175: EQUAL
16176: IFFALSE 16186
// btype := b_warehouse ;
16178: LD_ADDR_VAR 0 5
16182: PUSH
16183: LD_INT 1
16185: ST_TO_ADDR
// if btype = b_workshop then
16186: LD_VAR 0 5
16190: PUSH
16191: LD_INT 2
16193: EQUAL
16194: IFFALSE 16204
// btype := b_factory ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 3
16203: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16204: LD_ADDR_VAR 0 4
16208: PUSH
16209: LD_VAR 0 5
16213: PPUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 248
16223: PPUSH
16224: CALL_OW 450
16228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16229: LD_ADDR_VAR 0 2
16233: PUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 275
16246: PUSH
16247: LD_VAR 0 4
16251: PUSH
16252: LD_INT 1
16254: ARRAY
16255: GREATEREQUAL
16256: PUSH
16257: LD_VAR 0 3
16261: PPUSH
16262: LD_INT 2
16264: PPUSH
16265: CALL_OW 275
16269: PUSH
16270: LD_VAR 0 4
16274: PUSH
16275: LD_INT 2
16277: ARRAY
16278: GREATEREQUAL
16279: AND
16280: PUSH
16281: LD_VAR 0 3
16285: PPUSH
16286: LD_INT 3
16288: PPUSH
16289: CALL_OW 275
16293: PUSH
16294: LD_VAR 0 4
16298: PUSH
16299: LD_INT 3
16301: ARRAY
16302: GREATEREQUAL
16303: AND
16304: ST_TO_ADDR
// end ;
16305: LD_VAR 0 2
16309: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16310: LD_INT 0
16312: PPUSH
16313: PPUSH
16314: PPUSH
// pom := GetBase ( building ) ;
16315: LD_ADDR_VAR 0 4
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 274
16329: ST_TO_ADDR
// if not pom then
16330: LD_VAR 0 4
16334: NOT
16335: IFFALSE 16339
// exit ;
16337: GO 16440
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16339: LD_ADDR_VAR 0 5
16343: PUSH
16344: LD_VAR 0 2
16348: PPUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 248
16358: PPUSH
16359: CALL_OW 450
16363: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16364: LD_ADDR_VAR 0 3
16368: PUSH
16369: LD_VAR 0 4
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 275
16381: PUSH
16382: LD_VAR 0 5
16386: PUSH
16387: LD_INT 1
16389: ARRAY
16390: GREATEREQUAL
16391: PUSH
16392: LD_VAR 0 4
16396: PPUSH
16397: LD_INT 2
16399: PPUSH
16400: CALL_OW 275
16404: PUSH
16405: LD_VAR 0 5
16409: PUSH
16410: LD_INT 2
16412: ARRAY
16413: GREATEREQUAL
16414: AND
16415: PUSH
16416: LD_VAR 0 4
16420: PPUSH
16421: LD_INT 3
16423: PPUSH
16424: CALL_OW 275
16428: PUSH
16429: LD_VAR 0 5
16433: PUSH
16434: LD_INT 3
16436: ARRAY
16437: GREATEREQUAL
16438: AND
16439: ST_TO_ADDR
// end ;
16440: LD_VAR 0 3
16444: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16445: LD_INT 0
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
// result := false ;
16458: LD_ADDR_VAR 0 8
16462: PUSH
16463: LD_INT 0
16465: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16466: LD_VAR 0 5
16470: NOT
16471: PUSH
16472: LD_VAR 0 1
16476: NOT
16477: OR
16478: PUSH
16479: LD_VAR 0 2
16483: NOT
16484: OR
16485: PUSH
16486: LD_VAR 0 3
16490: NOT
16491: OR
16492: IFFALSE 16496
// exit ;
16494: GO 17310
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16496: LD_ADDR_VAR 0 14
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: LD_VAR 0 4
16520: PPUSH
16521: LD_VAR 0 5
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PPUSH
16530: CALL_OW 248
16534: PPUSH
16535: LD_INT 0
16537: PPUSH
16538: CALL 18543 0 6
16542: ST_TO_ADDR
// if not hexes then
16543: LD_VAR 0 14
16547: NOT
16548: IFFALSE 16552
// exit ;
16550: GO 17310
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16552: LD_ADDR_VAR 0 17
16556: PUSH
16557: LD_VAR 0 5
16561: PPUSH
16562: LD_INT 22
16564: PUSH
16565: LD_VAR 0 13
16569: PPUSH
16570: CALL_OW 255
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 2
16581: PUSH
16582: LD_INT 30
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 30
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PPUSH
16611: CALL_OW 72
16615: ST_TO_ADDR
// for i = 1 to hexes do
16616: LD_ADDR_VAR 0 9
16620: PUSH
16621: DOUBLE
16622: LD_INT 1
16624: DEC
16625: ST_TO_ADDR
16626: LD_VAR 0 14
16630: PUSH
16631: FOR_TO
16632: IFFALSE 17308
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16634: LD_ADDR_VAR 0 13
16638: PUSH
16639: LD_VAR 0 14
16643: PUSH
16644: LD_VAR 0 9
16648: ARRAY
16649: PUSH
16650: LD_INT 1
16652: ARRAY
16653: PPUSH
16654: LD_VAR 0 14
16658: PUSH
16659: LD_VAR 0 9
16663: ARRAY
16664: PUSH
16665: LD_INT 2
16667: ARRAY
16668: PPUSH
16669: CALL_OW 428
16673: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16674: LD_VAR 0 14
16678: PUSH
16679: LD_VAR 0 9
16683: ARRAY
16684: PUSH
16685: LD_INT 1
16687: ARRAY
16688: PPUSH
16689: LD_VAR 0 14
16693: PUSH
16694: LD_VAR 0 9
16698: ARRAY
16699: PUSH
16700: LD_INT 2
16702: ARRAY
16703: PPUSH
16704: CALL_OW 351
16708: PUSH
16709: LD_VAR 0 14
16713: PUSH
16714: LD_VAR 0 9
16718: ARRAY
16719: PUSH
16720: LD_INT 1
16722: ARRAY
16723: PPUSH
16724: LD_VAR 0 14
16728: PUSH
16729: LD_VAR 0 9
16733: ARRAY
16734: PUSH
16735: LD_INT 2
16737: ARRAY
16738: PPUSH
16739: CALL_OW 488
16743: NOT
16744: OR
16745: PUSH
16746: LD_VAR 0 13
16750: PPUSH
16751: CALL_OW 247
16755: PUSH
16756: LD_INT 3
16758: EQUAL
16759: OR
16760: IFFALSE 16766
// exit ;
16762: POP
16763: POP
16764: GO 17310
// if not tmp then
16766: LD_VAR 0 13
16770: NOT
16771: IFFALSE 16775
// continue ;
16773: GO 16631
// result := true ;
16775: LD_ADDR_VAR 0 8
16779: PUSH
16780: LD_INT 1
16782: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16783: LD_VAR 0 6
16787: PUSH
16788: LD_VAR 0 13
16792: PPUSH
16793: CALL_OW 247
16797: PUSH
16798: LD_INT 2
16800: EQUAL
16801: AND
16802: PUSH
16803: LD_VAR 0 13
16807: PPUSH
16808: CALL_OW 263
16812: PUSH
16813: LD_INT 1
16815: EQUAL
16816: AND
16817: IFFALSE 16981
// begin if IsDrivenBy ( tmp ) then
16819: LD_VAR 0 13
16823: PPUSH
16824: CALL_OW 311
16828: IFFALSE 16832
// continue ;
16830: GO 16631
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16832: LD_VAR 0 6
16836: PPUSH
16837: LD_INT 3
16839: PUSH
16840: LD_INT 60
16842: PUSH
16843: EMPTY
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: LD_INT 55
16855: PUSH
16856: EMPTY
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL_OW 72
16871: IFFALSE 16979
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16873: LD_ADDR_VAR 0 18
16877: PUSH
16878: LD_VAR 0 6
16882: PPUSH
16883: LD_INT 3
16885: PUSH
16886: LD_INT 60
16888: PUSH
16889: EMPTY
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 3
16898: PUSH
16899: LD_INT 55
16901: PUSH
16902: EMPTY
16903: LIST
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PPUSH
16913: CALL_OW 72
16917: PUSH
16918: LD_INT 1
16920: ARRAY
16921: ST_TO_ADDR
// if IsInUnit ( driver ) then
16922: LD_VAR 0 18
16926: PPUSH
16927: CALL_OW 310
16931: IFFALSE 16942
// ComExit ( driver ) ;
16933: LD_VAR 0 18
16937: PPUSH
16938: CALL 42323 0 1
// AddComEnterUnit ( driver , tmp ) ;
16942: LD_VAR 0 18
16946: PPUSH
16947: LD_VAR 0 13
16951: PPUSH
16952: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16956: LD_VAR 0 18
16960: PPUSH
16961: LD_VAR 0 7
16965: PPUSH
16966: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16970: LD_VAR 0 18
16974: PPUSH
16975: CALL_OW 181
// end ; continue ;
16979: GO 16631
// end ; if not cleaners or not tmp in cleaners then
16981: LD_VAR 0 6
16985: NOT
16986: PUSH
16987: LD_VAR 0 13
16991: PUSH
16992: LD_VAR 0 6
16996: IN
16997: NOT
16998: OR
16999: IFFALSE 17306
// begin if dep then
17001: LD_VAR 0 17
17005: IFFALSE 17141
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17007: LD_ADDR_VAR 0 16
17011: PUSH
17012: LD_VAR 0 17
17016: PUSH
17017: LD_INT 1
17019: ARRAY
17020: PPUSH
17021: CALL_OW 250
17025: PPUSH
17026: LD_VAR 0 17
17030: PUSH
17031: LD_INT 1
17033: ARRAY
17034: PPUSH
17035: CALL_OW 254
17039: PPUSH
17040: LD_INT 5
17042: PPUSH
17043: CALL_OW 272
17047: PUSH
17048: LD_VAR 0 17
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PPUSH
17057: CALL_OW 251
17061: PPUSH
17062: LD_VAR 0 17
17066: PUSH
17067: LD_INT 1
17069: ARRAY
17070: PPUSH
17071: CALL_OW 254
17075: PPUSH
17076: LD_INT 5
17078: PPUSH
17079: CALL_OW 273
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17088: LD_VAR 0 16
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: PPUSH
17097: LD_VAR 0 16
17101: PUSH
17102: LD_INT 2
17104: ARRAY
17105: PPUSH
17106: CALL_OW 488
17110: IFFALSE 17141
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17112: LD_VAR 0 13
17116: PPUSH
17117: LD_VAR 0 16
17121: PUSH
17122: LD_INT 1
17124: ARRAY
17125: PPUSH
17126: LD_VAR 0 16
17130: PUSH
17131: LD_INT 2
17133: ARRAY
17134: PPUSH
17135: CALL_OW 111
// continue ;
17139: GO 16631
// end ; end ; r := GetDir ( tmp ) ;
17141: LD_ADDR_VAR 0 15
17145: PUSH
17146: LD_VAR 0 13
17150: PPUSH
17151: CALL_OW 254
17155: ST_TO_ADDR
// if r = 5 then
17156: LD_VAR 0 15
17160: PUSH
17161: LD_INT 5
17163: EQUAL
17164: IFFALSE 17174
// r := 0 ;
17166: LD_ADDR_VAR 0 15
17170: PUSH
17171: LD_INT 0
17173: ST_TO_ADDR
// for j = r to 5 do
17174: LD_ADDR_VAR 0 10
17178: PUSH
17179: DOUBLE
17180: LD_VAR 0 15
17184: DEC
17185: ST_TO_ADDR
17186: LD_INT 5
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17304
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17192: LD_ADDR_VAR 0 11
17196: PUSH
17197: LD_VAR 0 13
17201: PPUSH
17202: CALL_OW 250
17206: PPUSH
17207: LD_VAR 0 10
17211: PPUSH
17212: LD_INT 2
17214: PPUSH
17215: CALL_OW 272
17219: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17220: LD_ADDR_VAR 0 12
17224: PUSH
17225: LD_VAR 0 13
17229: PPUSH
17230: CALL_OW 251
17234: PPUSH
17235: LD_VAR 0 10
17239: PPUSH
17240: LD_INT 2
17242: PPUSH
17243: CALL_OW 273
17247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17248: LD_VAR 0 11
17252: PPUSH
17253: LD_VAR 0 12
17257: PPUSH
17258: CALL_OW 488
17262: PUSH
17263: LD_VAR 0 11
17267: PPUSH
17268: LD_VAR 0 12
17272: PPUSH
17273: CALL_OW 428
17277: NOT
17278: AND
17279: IFFALSE 17302
// begin ComMoveXY ( tmp , _x , _y ) ;
17281: LD_VAR 0 13
17285: PPUSH
17286: LD_VAR 0 11
17290: PPUSH
17291: LD_VAR 0 12
17295: PPUSH
17296: CALL_OW 111
// break ;
17300: GO 17304
// end ; end ;
17302: GO 17189
17304: POP
17305: POP
// end ; end ;
17306: GO 16631
17308: POP
17309: POP
// end ;
17310: LD_VAR 0 8
17314: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17315: LD_INT 0
17317: PPUSH
// result := true ;
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_INT 1
17325: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17326: LD_VAR 0 2
17330: PUSH
17331: LD_INT 24
17333: DOUBLE
17334: EQUAL
17335: IFTRUE 17345
17337: LD_INT 33
17339: DOUBLE
17340: EQUAL
17341: IFTRUE 17345
17343: GO 17370
17345: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17346: LD_ADDR_VAR 0 3
17350: PUSH
17351: LD_INT 32
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 321
17363: PUSH
17364: LD_INT 2
17366: EQUAL
17367: ST_TO_ADDR
17368: GO 17686
17370: LD_INT 20
17372: DOUBLE
17373: EQUAL
17374: IFTRUE 17378
17376: GO 17403
17378: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17379: LD_ADDR_VAR 0 3
17383: PUSH
17384: LD_INT 6
17386: PPUSH
17387: LD_VAR 0 1
17391: PPUSH
17392: CALL_OW 321
17396: PUSH
17397: LD_INT 2
17399: EQUAL
17400: ST_TO_ADDR
17401: GO 17686
17403: LD_INT 22
17405: DOUBLE
17406: EQUAL
17407: IFTRUE 17417
17409: LD_INT 36
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17442
17417: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17418: LD_ADDR_VAR 0 3
17422: PUSH
17423: LD_INT 15
17425: PPUSH
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL_OW 321
17435: PUSH
17436: LD_INT 2
17438: EQUAL
17439: ST_TO_ADDR
17440: GO 17686
17442: LD_INT 30
17444: DOUBLE
17445: EQUAL
17446: IFTRUE 17450
17448: GO 17475
17450: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17451: LD_ADDR_VAR 0 3
17455: PUSH
17456: LD_INT 20
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 321
17468: PUSH
17469: LD_INT 2
17471: EQUAL
17472: ST_TO_ADDR
17473: GO 17686
17475: LD_INT 28
17477: DOUBLE
17478: EQUAL
17479: IFTRUE 17489
17481: LD_INT 21
17483: DOUBLE
17484: EQUAL
17485: IFTRUE 17489
17487: GO 17514
17489: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17490: LD_ADDR_VAR 0 3
17494: PUSH
17495: LD_INT 21
17497: PPUSH
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 321
17507: PUSH
17508: LD_INT 2
17510: EQUAL
17511: ST_TO_ADDR
17512: GO 17686
17514: LD_INT 16
17516: DOUBLE
17517: EQUAL
17518: IFTRUE 17522
17520: GO 17547
17522: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17523: LD_ADDR_VAR 0 3
17527: PUSH
17528: LD_INT 84
17530: PPUSH
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 321
17540: PUSH
17541: LD_INT 2
17543: EQUAL
17544: ST_TO_ADDR
17545: GO 17686
17547: LD_INT 19
17549: DOUBLE
17550: EQUAL
17551: IFTRUE 17561
17553: LD_INT 23
17555: DOUBLE
17556: EQUAL
17557: IFTRUE 17561
17559: GO 17586
17561: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17562: LD_ADDR_VAR 0 3
17566: PUSH
17567: LD_INT 83
17569: PPUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 321
17579: PUSH
17580: LD_INT 2
17582: EQUAL
17583: ST_TO_ADDR
17584: GO 17686
17586: LD_INT 17
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17619
17594: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: LD_INT 39
17602: PPUSH
17603: LD_VAR 0 1
17607: PPUSH
17608: CALL_OW 321
17612: PUSH
17613: LD_INT 2
17615: EQUAL
17616: ST_TO_ADDR
17617: GO 17686
17619: LD_INT 18
17621: DOUBLE
17622: EQUAL
17623: IFTRUE 17627
17625: GO 17652
17627: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: LD_INT 40
17635: PPUSH
17636: LD_VAR 0 1
17640: PPUSH
17641: CALL_OW 321
17645: PUSH
17646: LD_INT 2
17648: EQUAL
17649: ST_TO_ADDR
17650: GO 17686
17652: LD_INT 27
17654: DOUBLE
17655: EQUAL
17656: IFTRUE 17660
17658: GO 17685
17660: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17661: LD_ADDR_VAR 0 3
17665: PUSH
17666: LD_INT 35
17668: PPUSH
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL_OW 321
17678: PUSH
17679: LD_INT 2
17681: EQUAL
17682: ST_TO_ADDR
17683: GO 17686
17685: POP
// end ;
17686: LD_VAR 0 3
17690: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17691: LD_INT 0
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
// result := false ;
17704: LD_ADDR_VAR 0 6
17708: PUSH
17709: LD_INT 0
17711: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17712: LD_VAR 0 1
17716: NOT
17717: PUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: CALL_OW 266
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: IN
17738: NOT
17739: OR
17740: PUSH
17741: LD_VAR 0 2
17745: NOT
17746: OR
17747: PUSH
17748: LD_VAR 0 5
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: LD_INT 2
17761: PUSH
17762: LD_INT 3
17764: PUSH
17765: LD_INT 4
17767: PUSH
17768: LD_INT 5
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: IN
17779: NOT
17780: OR
17781: PUSH
17782: LD_VAR 0 3
17786: PPUSH
17787: LD_VAR 0 4
17791: PPUSH
17792: CALL_OW 488
17796: NOT
17797: OR
17798: IFFALSE 17802
// exit ;
17800: GO 18538
// side := GetSide ( depot ) ;
17802: LD_ADDR_VAR 0 9
17806: PUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 255
17816: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17817: LD_VAR 0 9
17821: PPUSH
17822: LD_VAR 0 2
17826: PPUSH
17827: CALL 17315 0 2
17831: NOT
17832: IFFALSE 17836
// exit ;
17834: GO 18538
// pom := GetBase ( depot ) ;
17836: LD_ADDR_VAR 0 10
17840: PUSH
17841: LD_VAR 0 1
17845: PPUSH
17846: CALL_OW 274
17850: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17851: LD_ADDR_VAR 0 11
17855: PUSH
17856: LD_VAR 0 2
17860: PPUSH
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 248
17870: PPUSH
17871: CALL_OW 450
17875: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17876: LD_VAR 0 10
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 275
17888: PUSH
17889: LD_VAR 0 11
17893: PUSH
17894: LD_INT 1
17896: ARRAY
17897: GREATEREQUAL
17898: PUSH
17899: LD_VAR 0 10
17903: PPUSH
17904: LD_INT 2
17906: PPUSH
17907: CALL_OW 275
17911: PUSH
17912: LD_VAR 0 11
17916: PUSH
17917: LD_INT 2
17919: ARRAY
17920: GREATEREQUAL
17921: AND
17922: PUSH
17923: LD_VAR 0 10
17927: PPUSH
17928: LD_INT 3
17930: PPUSH
17931: CALL_OW 275
17935: PUSH
17936: LD_VAR 0 11
17940: PUSH
17941: LD_INT 3
17943: ARRAY
17944: GREATEREQUAL
17945: AND
17946: NOT
17947: IFFALSE 17951
// exit ;
17949: GO 18538
// if GetBType ( depot ) = b_depot then
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 266
17960: PUSH
17961: LD_INT 0
17963: EQUAL
17964: IFFALSE 17976
// dist := 28 else
17966: LD_ADDR_VAR 0 14
17970: PUSH
17971: LD_INT 28
17973: ST_TO_ADDR
17974: GO 17984
// dist := 36 ;
17976: LD_ADDR_VAR 0 14
17980: PUSH
17981: LD_INT 36
17983: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17984: LD_VAR 0 1
17988: PPUSH
17989: LD_VAR 0 3
17993: PPUSH
17994: LD_VAR 0 4
17998: PPUSH
17999: CALL_OW 297
18003: PUSH
18004: LD_VAR 0 14
18008: GREATER
18009: IFFALSE 18013
// exit ;
18011: GO 18538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18013: LD_ADDR_VAR 0 12
18017: PUSH
18018: LD_VAR 0 2
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: LD_VAR 0 4
18032: PPUSH
18033: LD_VAR 0 5
18037: PPUSH
18038: LD_VAR 0 1
18042: PPUSH
18043: CALL_OW 248
18047: PPUSH
18048: LD_INT 0
18050: PPUSH
18051: CALL 18543 0 6
18055: ST_TO_ADDR
// if not hexes then
18056: LD_VAR 0 12
18060: NOT
18061: IFFALSE 18065
// exit ;
18063: GO 18538
// hex := GetHexInfo ( x , y ) ;
18065: LD_ADDR_VAR 0 15
18069: PUSH
18070: LD_VAR 0 3
18074: PPUSH
18075: LD_VAR 0 4
18079: PPUSH
18080: CALL_OW 546
18084: ST_TO_ADDR
// if hex [ 1 ] then
18085: LD_VAR 0 15
18089: PUSH
18090: LD_INT 1
18092: ARRAY
18093: IFFALSE 18097
// exit ;
18095: GO 18538
// height := hex [ 2 ] ;
18097: LD_ADDR_VAR 0 13
18101: PUSH
18102: LD_VAR 0 15
18106: PUSH
18107: LD_INT 2
18109: ARRAY
18110: ST_TO_ADDR
// for i = 1 to hexes do
18111: LD_ADDR_VAR 0 7
18115: PUSH
18116: DOUBLE
18117: LD_INT 1
18119: DEC
18120: ST_TO_ADDR
18121: LD_VAR 0 12
18125: PUSH
18126: FOR_TO
18127: IFFALSE 18457
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18129: LD_VAR 0 12
18133: PUSH
18134: LD_VAR 0 7
18138: ARRAY
18139: PUSH
18140: LD_INT 1
18142: ARRAY
18143: PPUSH
18144: LD_VAR 0 12
18148: PUSH
18149: LD_VAR 0 7
18153: ARRAY
18154: PUSH
18155: LD_INT 2
18157: ARRAY
18158: PPUSH
18159: CALL_OW 488
18163: NOT
18164: PUSH
18165: LD_VAR 0 12
18169: PUSH
18170: LD_VAR 0 7
18174: ARRAY
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: PPUSH
18180: LD_VAR 0 12
18184: PUSH
18185: LD_VAR 0 7
18189: ARRAY
18190: PUSH
18191: LD_INT 2
18193: ARRAY
18194: PPUSH
18195: CALL_OW 428
18199: PUSH
18200: LD_INT 0
18202: GREATER
18203: OR
18204: PUSH
18205: LD_VAR 0 12
18209: PUSH
18210: LD_VAR 0 7
18214: ARRAY
18215: PUSH
18216: LD_INT 1
18218: ARRAY
18219: PPUSH
18220: LD_VAR 0 12
18224: PUSH
18225: LD_VAR 0 7
18229: ARRAY
18230: PUSH
18231: LD_INT 2
18233: ARRAY
18234: PPUSH
18235: CALL_OW 351
18239: OR
18240: IFFALSE 18246
// exit ;
18242: POP
18243: POP
18244: GO 18538
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18246: LD_ADDR_VAR 0 8
18250: PUSH
18251: LD_VAR 0 12
18255: PUSH
18256: LD_VAR 0 7
18260: ARRAY
18261: PUSH
18262: LD_INT 1
18264: ARRAY
18265: PPUSH
18266: LD_VAR 0 12
18270: PUSH
18271: LD_VAR 0 7
18275: ARRAY
18276: PUSH
18277: LD_INT 2
18279: ARRAY
18280: PPUSH
18281: CALL_OW 546
18285: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18286: LD_VAR 0 8
18290: PUSH
18291: LD_INT 1
18293: ARRAY
18294: PUSH
18295: LD_VAR 0 8
18299: PUSH
18300: LD_INT 2
18302: ARRAY
18303: PUSH
18304: LD_VAR 0 13
18308: PUSH
18309: LD_INT 2
18311: PLUS
18312: GREATER
18313: OR
18314: PUSH
18315: LD_VAR 0 8
18319: PUSH
18320: LD_INT 2
18322: ARRAY
18323: PUSH
18324: LD_VAR 0 13
18328: PUSH
18329: LD_INT 2
18331: MINUS
18332: LESS
18333: OR
18334: PUSH
18335: LD_VAR 0 8
18339: PUSH
18340: LD_INT 3
18342: ARRAY
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: LD_INT 8
18349: PUSH
18350: LD_INT 9
18352: PUSH
18353: LD_INT 10
18355: PUSH
18356: LD_INT 11
18358: PUSH
18359: LD_INT 12
18361: PUSH
18362: LD_INT 13
18364: PUSH
18365: LD_INT 16
18367: PUSH
18368: LD_INT 17
18370: PUSH
18371: LD_INT 18
18373: PUSH
18374: LD_INT 19
18376: PUSH
18377: LD_INT 20
18379: PUSH
18380: LD_INT 21
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: IN
18398: NOT
18399: OR
18400: PUSH
18401: LD_VAR 0 8
18405: PUSH
18406: LD_INT 5
18408: ARRAY
18409: NOT
18410: OR
18411: PUSH
18412: LD_VAR 0 8
18416: PUSH
18417: LD_INT 6
18419: ARRAY
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: LD_INT 7
18429: PUSH
18430: LD_INT 9
18432: PUSH
18433: LD_INT 10
18435: PUSH
18436: LD_INT 11
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: IN
18447: NOT
18448: OR
18449: IFFALSE 18455
// exit ;
18451: POP
18452: POP
18453: GO 18538
// end ;
18455: GO 18126
18457: POP
18458: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18459: LD_VAR 0 9
18463: PPUSH
18464: LD_VAR 0 3
18468: PPUSH
18469: LD_VAR 0 4
18473: PPUSH
18474: LD_INT 20
18476: PPUSH
18477: CALL 10490 0 4
18481: PUSH
18482: LD_INT 4
18484: ARRAY
18485: IFFALSE 18489
// exit ;
18487: GO 18538
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18489: LD_VAR 0 2
18493: PUSH
18494: LD_INT 29
18496: PUSH
18497: LD_INT 30
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: IN
18504: PUSH
18505: LD_VAR 0 3
18509: PPUSH
18510: LD_VAR 0 4
18514: PPUSH
18515: LD_VAR 0 9
18519: PPUSH
18520: CALL_OW 440
18524: NOT
18525: AND
18526: IFFALSE 18530
// exit ;
18528: GO 18538
// result := true ;
18530: LD_ADDR_VAR 0 6
18534: PUSH
18535: LD_INT 1
18537: ST_TO_ADDR
// end ;
18538: LD_VAR 0 6
18542: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18543: LD_INT 0
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
18578: PPUSH
18579: PPUSH
18580: PPUSH
18581: PPUSH
18582: PPUSH
18583: PPUSH
18584: PPUSH
18585: PPUSH
18586: PPUSH
18587: PPUSH
18588: PPUSH
18589: PPUSH
18590: PPUSH
18591: PPUSH
18592: PPUSH
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
18602: PPUSH
// result = [ ] ;
18603: LD_ADDR_VAR 0 7
18607: PUSH
18608: EMPTY
18609: ST_TO_ADDR
// temp_list = [ ] ;
18610: LD_ADDR_VAR 0 9
18614: PUSH
18615: EMPTY
18616: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18617: LD_VAR 0 4
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: LD_INT 3
18633: PUSH
18634: LD_INT 4
18636: PUSH
18637: LD_INT 5
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: IN
18648: NOT
18649: PUSH
18650: LD_VAR 0 1
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: IN
18665: PUSH
18666: LD_VAR 0 5
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: IN
18685: NOT
18686: AND
18687: OR
18688: IFFALSE 18692
// exit ;
18690: GO 37083
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18692: LD_VAR 0 1
18696: PUSH
18697: LD_INT 6
18699: PUSH
18700: LD_INT 7
18702: PUSH
18703: LD_INT 8
18705: PUSH
18706: LD_INT 13
18708: PUSH
18709: LD_INT 12
18711: PUSH
18712: LD_INT 15
18714: PUSH
18715: LD_INT 11
18717: PUSH
18718: LD_INT 14
18720: PUSH
18721: LD_INT 10
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: IN
18735: IFFALSE 18745
// btype = b_lab ;
18737: LD_ADDR_VAR 0 1
18741: PUSH
18742: LD_INT 6
18744: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18745: LD_VAR 0 6
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: IN
18764: NOT
18765: PUSH
18766: LD_VAR 0 1
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 2
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: LD_INT 6
18785: PUSH
18786: LD_INT 36
18788: PUSH
18789: LD_INT 4
18791: PUSH
18792: LD_INT 5
18794: PUSH
18795: LD_INT 31
18797: PUSH
18798: LD_INT 32
18800: PUSH
18801: LD_INT 33
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: IN
18817: NOT
18818: PUSH
18819: LD_VAR 0 6
18823: PUSH
18824: LD_INT 1
18826: EQUAL
18827: AND
18828: OR
18829: PUSH
18830: LD_VAR 0 1
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: IN
18845: NOT
18846: PUSH
18847: LD_VAR 0 6
18851: PUSH
18852: LD_INT 2
18854: EQUAL
18855: AND
18856: OR
18857: IFFALSE 18867
// mode = 0 ;
18859: LD_ADDR_VAR 0 6
18863: PUSH
18864: LD_INT 0
18866: ST_TO_ADDR
// case mode of 0 :
18867: LD_VAR 0 6
18871: PUSH
18872: LD_INT 0
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 30333
18880: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18881: LD_ADDR_VAR 0 11
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: NEG
18951: PUSH
18952: LD_INT 1
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: NEG
18963: PUSH
18964: LD_INT 2
18966: NEG
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 2
18977: NEG
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: LD_INT 1
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: LD_INT 3
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: LD_INT 3
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: NEG
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19074: LD_ADDR_VAR 0 12
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: LD_INT 0
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 1
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: NEG
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 1
19158: NEG
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 2
19208: NEG
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: NEG
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 3
19231: NEG
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 3
19242: NEG
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19270: LD_ADDR_VAR 0 13
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: NEG
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: NEG
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: NEG
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: LD_INT 2
19409: NEG
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: NEG
19418: PUSH
19419: LD_INT 3
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 3
19429: NEG
19430: PUSH
19431: LD_INT 2
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 3
19441: NEG
19442: PUSH
19443: LD_INT 3
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19469: LD_ADDR_VAR 0 14
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: NEG
19616: PUSH
19617: LD_INT 3
19619: NEG
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: LD_INT 3
19630: NEG
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: LD_INT 2
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19665: LD_ADDR_VAR 0 15
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: NEG
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 1
19777: NEG
19778: PUSH
19779: LD_INT 1
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 2
19799: NEG
19800: PUSH
19801: LD_INT 1
19803: NEG
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 3
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 3
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19858: LD_ADDR_VAR 0 16
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 0
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 2
19981: NEG
19982: PUSH
19983: LD_INT 1
19985: NEG
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: LD_INT 2
19997: NEG
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 3
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 3
20015: PUSH
20016: LD_INT 3
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 2
20025: PUSH
20026: LD_INT 3
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20051: LD_ADDR_VAR 0 17
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: NEG
20133: PUSH
20134: LD_INT 2
20136: NEG
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: LD_INT 2
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 0
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: NEG
20251: PUSH
20252: LD_INT 2
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20281: LD_ADDR_VAR 0 18
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: LD_INT 0
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: NEG
20363: PUSH
20364: LD_INT 2
20366: NEG
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: LD_INT 2
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 0
20436: PUSH
20437: LD_INT 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: LD_INT 2
20484: NEG
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20511: LD_ADDR_VAR 0 19
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: LD_INT 2
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: LD_INT 2
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: LD_INT 2
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: LD_INT 1
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: LD_INT 2
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20741: LD_ADDR_VAR 0 20
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 0
20758: PUSH
20759: LD_INT 1
20761: NEG
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 1
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: LD_INT 2
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: LD_INT 2
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: NEG
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 2
20917: NEG
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: NEG
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 2
20940: NEG
20941: PUSH
20942: LD_INT 2
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20971: LD_ADDR_VAR 0 21
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: LD_INT 1
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: NEG
21053: PUSH
21054: LD_INT 2
21056: NEG
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 0
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: LD_INT 2
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 2
21147: NEG
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 2
21158: NEG
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 2
21170: NEG
21171: PUSH
21172: LD_INT 2
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21201: LD_ADDR_VAR 0 22
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 1
21259: NEG
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 1
21282: NEG
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 1
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 2
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: NEG
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21431: LD_ADDR_VAR 0 23
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: LD_INT 2
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 1
21538: NEG
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 2
21618: NEG
21619: PUSH
21620: LD_INT 1
21622: NEG
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: LD_INT 2
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 2
21642: NEG
21643: PUSH
21644: LD_INT 3
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: LD_INT 3
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: LD_INT 2
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: LD_INT 1
21680: NEG
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21711: LD_ADDR_VAR 0 24
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: LD_INT 1
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: LD_INT 2
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: NEG
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 2
21910: NEG
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: LD_INT 2
21925: NEG
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: LD_INT 1
21936: NEG
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 3
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 3
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21987: LD_ADDR_VAR 0 25
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 2
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: NEG
22153: PUSH
22154: LD_INT 1
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: NEG
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: LD_INT 2
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: LD_INT 1
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: LD_INT 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 3
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: LD_INT 3
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22261: LD_ADDR_VAR 0 26
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: LD_INT 1
22281: NEG
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 1
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: NEG
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 2
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: LD_INT 2
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: NEG
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: NEG
22438: PUSH
22439: LD_INT 0
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: LD_INT 1
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: NEG
22461: PUSH
22462: LD_INT 2
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 3
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 3
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22537: LD_ADDR_VAR 0 27
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: LD_INT 2
22622: NEG
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 0
22630: PUSH
22631: LD_INT 2
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 0
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: LD_INT 0
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: LD_INT 2
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 2
22759: NEG
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 3
22770: NEG
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 3
22782: NEG
22783: PUSH
22784: LD_INT 2
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22817: LD_ADDR_VAR 0 28
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: LD_INT 2
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: NEG
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: NEG
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: LD_INT 2
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: NEG
23029: PUSH
23030: LD_INT 3
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: LD_INT 3
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 3
23052: NEG
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 3
23064: NEG
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23099: LD_ADDR_VAR 0 29
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 0
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 0
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: LD_INT 0
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: LD_INT 2
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: LD_INT 1
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: LD_INT 0
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 2
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: NEG
23290: PUSH
23291: LD_INT 3
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 3
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: LD_INT 3
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 3
23343: NEG
23344: PUSH
23345: LD_INT 2
23347: NEG
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23378: LD_ADDR_VAR 0 30
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: LD_INT 2
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 2
23555: NEG
23556: PUSH
23557: LD_INT 1
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: LD_INT 3
23571: NEG
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: LD_INT 2
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 3
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 2
23600: PUSH
23601: LD_INT 3
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 3
23621: NEG
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23656: LD_ADDR_VAR 0 31
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: LD_INT 1
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: NEG
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: LD_INT 2
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 1
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 2
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 2
23821: NEG
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 2
23833: NEG
23834: PUSH
23835: LD_INT 2
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: LD_INT 3
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 3
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: LD_INT 3
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 3
23899: NEG
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23934: LD_ADDR_VAR 0 32
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: LD_INT 1
24007: NEG
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: LD_INT 2
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 2
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: LD_INT 1
24041: NEG
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 2
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 0
24079: PUSH
24080: LD_INT 2
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: NEG
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 2
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 3
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: LD_INT 2
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: NEG
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 3
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24212: LD_ADDR_VAR 0 33
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 1
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: LD_INT 2
24297: NEG
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: NEG
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: NEG
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 2
24390: NEG
24391: PUSH
24392: LD_INT 2
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 2
24402: NEG
24403: PUSH
24404: LD_INT 3
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 3
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 3
24456: NEG
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24491: LD_ADDR_VAR 0 34
24495: PUSH
24496: LD_INT 0
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: NEG
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 2
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 2
24670: NEG
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 3
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 3
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: LD_INT 3
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 2
24725: NEG
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 3
24736: NEG
24737: PUSH
24738: LD_INT 1
24740: NEG
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24771: LD_ADDR_VAR 0 35
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24883: LD_ADDR_VAR 0 36
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: LD_INT 2
24968: NEG
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: LD_INT 2
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24995: LD_ADDR_VAR 0 37
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25107: LD_ADDR_VAR 0 38
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25219: LD_ADDR_VAR 0 39
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25331: LD_ADDR_VAR 0 40
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25443: LD_ADDR_VAR 0 41
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: LD_INT 2
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: NEG
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: NEG
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 3
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 3
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 3
25686: PUSH
25687: LD_INT 3
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 3
25717: NEG
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 3
25728: NEG
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 3
25740: NEG
25741: PUSH
25742: LD_INT 2
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 3
25752: NEG
25753: PUSH
25754: LD_INT 3
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25793: LD_ADDR_VAR 0 42
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 2
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 2
25971: NEG
25972: PUSH
25973: LD_INT 2
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: LD_INT 3
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 3
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: LD_INT 3
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: LD_INT 2
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 3
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 3
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 3
26090: NEG
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 3
26102: NEG
26103: PUSH
26104: LD_INT 3
26106: NEG
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26143: LD_ADDR_VAR 0 43
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: LD_INT 2
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: LD_INT 2
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 3
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 3
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 3
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: LD_INT 3
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 3
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 2
26428: NEG
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 3
26439: NEG
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 3
26450: NEG
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26491: LD_ADDR_VAR 0 44
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: LD_INT 2
26576: NEG
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 2
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: LD_INT 2
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 2
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 2
26646: NEG
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 2
26657: NEG
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: LD_INT 2
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: LD_INT 3
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 3
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 3
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 3
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 3
26734: PUSH
26735: LD_INT 3
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: LD_INT 3
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 3
26765: NEG
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 3
26776: NEG
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 3
26788: NEG
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: NEG
26801: PUSH
26802: LD_INT 3
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26841: LD_ADDR_VAR 0 45
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 2
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: LD_INT 2
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 2
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 2
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 2
27031: NEG
27032: PUSH
27033: LD_INT 3
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 3
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 3
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: LD_INT 3
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 3
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 3
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 3
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 3
27138: NEG
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 3
27150: NEG
27151: PUSH
27152: LD_INT 3
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27191: LD_ADDR_VAR 0 46
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 2
27276: NEG
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 2
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 2
27357: NEG
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: LD_INT 3
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 3
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 3
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 3
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 3
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 2
27476: NEG
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 3
27487: NEG
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 3
27498: NEG
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27539: LD_ADDR_VAR 0 47
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 2
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27690: LD_ADDR_VAR 0 48
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: LD_INT 2
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: LD_INT 2
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: PUSH
27795: LD_INT 1
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27837: LD_ADDR_VAR 0 49
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27981: LD_ADDR_VAR 0 50
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28125: LD_ADDR_VAR 0 51
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: LD_INT 1
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28272: LD_ADDR_VAR 0 52
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28423: LD_ADDR_VAR 0 53
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: LD_INT 2
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 2
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: LD_INT 2
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: LD_INT 2
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: NEG
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: LD_INT 2
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28653: LD_ADDR_VAR 0 54
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: LD_INT 1
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 0
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: LD_INT 2
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28883: LD_ADDR_VAR 0 55
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29113: LD_ADDR_VAR 0 56
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29343: LD_ADDR_VAR 0 57
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: NEG
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 2
29542: NEG
29543: PUSH
29544: LD_INT 2
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29573: LD_ADDR_VAR 0 58
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 2
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 2
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 1
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 2
29760: NEG
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 2
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29803: LD_ADDR_VAR 0 59
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29891: LD_ADDR_VAR 0 60
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29979: LD_ADDR_VAR 0 61
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30067: LD_ADDR_VAR 0 62
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30155: LD_ADDR_VAR 0 63
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30243: LD_ADDR_VAR 0 64
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: ST_TO_ADDR
// end ; 1 :
30331: GO 36228
30333: LD_INT 1
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 32964
30341: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30342: LD_ADDR_VAR 0 11
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: LD_INT 3
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: LD_INT 3
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: LD_INT 2
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: LIST
30385: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30386: LD_ADDR_VAR 0 12
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30427: LD_ADDR_VAR 0 13
30431: PUSH
30432: LD_INT 3
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30467: LD_ADDR_VAR 0 14
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 3
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 2
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30508: LD_ADDR_VAR 0 15
30512: PUSH
30513: LD_INT 2
30515: NEG
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30552: LD_ADDR_VAR 0 16
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: LD_INT 2
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 3
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30598: LD_ADDR_VAR 0 17
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: LD_INT 3
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30642: LD_ADDR_VAR 0 18
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 3
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30683: LD_ADDR_VAR 0 19
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30723: LD_ADDR_VAR 0 20
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 3
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30764: LD_ADDR_VAR 0 21
30768: PUSH
30769: LD_INT 2
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: NEG
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: NEG
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30808: LD_ADDR_VAR 0 22
30812: PUSH
30813: LD_INT 2
30815: NEG
30816: PUSH
30817: LD_INT 3
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30854: LD_ADDR_VAR 0 23
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: LD_INT 3
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30898: LD_ADDR_VAR 0 24
30902: PUSH
30903: LD_INT 3
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 3
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 4
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30939: LD_ADDR_VAR 0 25
30943: PUSH
30944: LD_INT 3
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 4
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: LD_INT 4
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30979: LD_ADDR_VAR 0 26
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: LD_INT 4
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: LD_INT 3
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31020: LD_ADDR_VAR 0 27
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 4
31049: NEG
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31064: LD_ADDR_VAR 0 28
31068: PUSH
31069: LD_INT 3
31071: NEG
31072: PUSH
31073: LD_INT 3
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 3
31083: NEG
31084: PUSH
31085: LD_INT 4
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 4
31095: NEG
31096: PUSH
31097: LD_INT 3
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31110: LD_ADDR_VAR 0 29
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: LD_INT 3
31121: NEG
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 3
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: LD_INT 4
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 4
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 3
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: LD_INT 5
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 5
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 4
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: LD_INT 6
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: LD_INT 6
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: LD_INT 5
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31265: LD_ADDR_VAR 0 30
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 4
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 4
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 5
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 5
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 5
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 6
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 6
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31408: LD_ADDR_VAR 0 31
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: LD_INT 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 4
31445: PUSH
31446: LD_INT 3
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 4
31455: PUSH
31456: LD_INT 4
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 3
31465: PUSH
31466: LD_INT 4
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 5
31475: PUSH
31476: LD_INT 4
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 5
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 4
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 6
31505: PUSH
31506: LD_INT 5
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 6
31515: PUSH
31516: LD_INT 6
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 5
31525: PUSH
31526: LD_INT 6
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31547: LD_ADDR_VAR 0 32
31551: PUSH
31552: LD_INT 1
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: LD_INT 2
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: LD_INT 4
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 4
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 5
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 5
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 4
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 6
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 6
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 5
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31690: LD_ADDR_VAR 0 33
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 3
31708: NEG
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 3
31719: NEG
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: NEG
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 4
31742: NEG
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 4
31753: NEG
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 4
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 5
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 5
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 5
31799: NEG
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 6
31810: NEG
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 6
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31845: LD_ADDR_VAR 0 34
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 3
31864: NEG
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 3
31876: NEG
31877: PUSH
31878: LD_INT 3
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 3
31888: NEG
31889: PUSH
31890: LD_INT 4
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 4
31900: NEG
31901: PUSH
31902: LD_INT 3
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 4
31912: NEG
31913: PUSH
31914: LD_INT 4
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 4
31924: NEG
31925: PUSH
31926: LD_INT 5
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 5
31936: NEG
31937: PUSH
31938: LD_INT 4
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 5
31948: NEG
31949: PUSH
31950: LD_INT 5
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 5
31960: NEG
31961: PUSH
31962: LD_INT 6
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 6
31972: NEG
31973: PUSH
31974: LD_INT 5
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 6
31984: NEG
31985: PUSH
31986: LD_INT 6
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32008: LD_ADDR_VAR 0 41
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: LD_INT 3
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: LD_INT 2
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32052: LD_ADDR_VAR 0 42
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 3
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: LIST
32092: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32093: LD_ADDR_VAR 0 43
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32133: LD_ADDR_VAR 0 44
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 3
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32174: LD_ADDR_VAR 0 45
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32218: LD_ADDR_VAR 0 46
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: NEG
32238: PUSH
32239: LD_INT 3
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32264: LD_ADDR_VAR 0 47
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: LD_INT 3
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 3
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32297: LD_ADDR_VAR 0 48
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: LD_INT 2
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32328: LD_ADDR_VAR 0 49
32332: PUSH
32333: LD_INT 3
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 3
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32357: LD_ADDR_VAR 0 50
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: LD_INT 3
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 3
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32386: LD_ADDR_VAR 0 51
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: LD_INT 2
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32417: LD_ADDR_VAR 0 52
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 3
32436: NEG
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32450: LD_ADDR_VAR 0 53
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32494: LD_ADDR_VAR 0 54
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32535: LD_ADDR_VAR 0 55
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: LD_INT 3
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32575: LD_ADDR_VAR 0 56
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 3
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32616: LD_ADDR_VAR 0 57
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 3
32634: NEG
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: NEG
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32660: LD_ADDR_VAR 0 58
32664: PUSH
32665: LD_INT 2
32667: NEG
32668: PUSH
32669: LD_INT 3
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 3
32679: NEG
32680: PUSH
32681: LD_INT 2
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 3
32691: NEG
32692: PUSH
32693: LD_INT 3
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32706: LD_ADDR_VAR 0 59
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32750: LD_ADDR_VAR 0 60
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32791: LD_ADDR_VAR 0 61
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32831: LD_ADDR_VAR 0 62
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32872: LD_ADDR_VAR 0 63
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: NEG
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32916: LD_ADDR_VAR 0 64
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
// end ; 2 :
32962: GO 36228
32964: LD_INT 2
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 36227
32972: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32973: LD_ADDR_VAR 0 29
32977: PUSH
32978: LD_INT 4
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 4
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 5
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 5
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 4
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 3
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: LD_INT 2
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 5
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 3
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 4
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 4
33103: PUSH
33104: LD_INT 4
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 3
33113: PUSH
33114: LD_INT 4
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 4
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: LD_INT 4
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 4
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: LD_INT 4
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: LD_INT 5
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 5
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: LD_INT 4
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 5
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 3
33256: NEG
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 3
33267: NEG
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 3
33301: NEG
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: NEG
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 4
33323: NEG
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: LD_INT 2
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 2
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 4
33358: NEG
33359: PUSH
33360: LD_INT 4
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 4
33370: NEG
33371: PUSH
33372: LD_INT 5
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 3
33382: NEG
33383: PUSH
33384: LD_INT 4
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 3
33394: NEG
33395: PUSH
33396: LD_INT 3
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 4
33406: NEG
33407: PUSH
33408: LD_INT 3
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 5
33418: NEG
33419: PUSH
33420: LD_INT 4
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 5
33430: NEG
33431: PUSH
33432: LD_INT 5
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 3
33442: NEG
33443: PUSH
33444: LD_INT 5
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 5
33454: NEG
33455: PUSH
33456: LD_INT 3
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33511: LD_ADDR_VAR 0 30
33515: PUSH
33516: LD_INT 4
33518: PUSH
33519: LD_INT 4
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 4
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 5
33538: PUSH
33539: LD_INT 4
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 5
33548: PUSH
33549: LD_INT 5
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 4
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: LD_INT 4
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 3
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 5
33588: PUSH
33589: LD_INT 3
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: LD_INT 5
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: LD_INT 4
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: LD_INT 4
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: NEG
33659: PUSH
33660: LD_INT 3
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: LD_INT 4
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 4
33701: NEG
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 4
33712: NEG
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 3
33724: NEG
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 3
33735: NEG
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 4
33746: NEG
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 5
33757: NEG
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 5
33768: NEG
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 5
33780: NEG
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 3
33803: NEG
33804: PUSH
33805: LD_INT 3
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 3
33815: NEG
33816: PUSH
33817: LD_INT 4
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 2
33827: NEG
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 2
33839: NEG
33840: PUSH
33841: LD_INT 2
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 4
33863: NEG
33864: PUSH
33865: LD_INT 3
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 4
33875: NEG
33876: PUSH
33877: LD_INT 4
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 4
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 4
33899: NEG
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 4
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: LD_INT 5
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: LD_INT 4
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 3
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: LD_INT 4
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 5
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 3
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: LD_INT 5
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34058: LD_ADDR_VAR 0 31
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 4
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: LD_INT 5
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 5
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: LD_INT 3
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: LD_INT 5
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 3
34158: NEG
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 3
34169: NEG
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 3
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 4
34214: NEG
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 4
34225: NEG
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 4
34237: NEG
34238: PUSH
34239: LD_INT 2
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 4
34260: NEG
34261: PUSH
34262: LD_INT 4
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 4
34272: NEG
34273: PUSH
34274: LD_INT 5
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 3
34284: NEG
34285: PUSH
34286: LD_INT 4
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 3
34296: NEG
34297: PUSH
34298: LD_INT 3
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 4
34308: NEG
34309: PUSH
34310: LD_INT 3
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 5
34320: NEG
34321: PUSH
34322: LD_INT 4
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 5
34332: NEG
34333: PUSH
34334: LD_INT 5
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 3
34344: NEG
34345: PUSH
34346: LD_INT 5
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 5
34356: NEG
34357: PUSH
34358: LD_INT 3
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 3
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 4
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: LD_INT 3
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 4
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 2
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: LD_INT 4
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 4
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 5
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 5
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 4
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: LD_INT 2
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 5
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34608: LD_ADDR_VAR 0 32
34612: PUSH
34613: LD_INT 4
34615: NEG
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 4
34626: NEG
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 3
34638: NEG
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 3
34649: NEG
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 4
34660: NEG
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 5
34671: NEG
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 5
34682: NEG
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 5
34694: NEG
34695: PUSH
34696: LD_INT 2
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 3
34706: NEG
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 3
34717: NEG
34718: PUSH
34719: LD_INT 3
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 3
34729: NEG
34730: PUSH
34731: LD_INT 4
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: LD_INT 3
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: LD_INT 3
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 4
34789: NEG
34790: PUSH
34791: LD_INT 4
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: NEG
34802: PUSH
34803: LD_INT 4
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 4
34813: NEG
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: LD_INT 4
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 5
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 4
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: LD_INT 3
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 3
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 4
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: LD_INT 5
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: LD_INT 3
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 5
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 3
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 4
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 4
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 3
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 4
35010: PUSH
35011: LD_INT 2
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 4
35020: PUSH
35021: LD_INT 4
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 4
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 5
35040: PUSH
35041: LD_INT 4
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 5
35050: PUSH
35051: LD_INT 5
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 4
35060: PUSH
35061: LD_INT 5
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: LD_INT 4
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 5
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: LD_INT 5
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35155: LD_ADDR_VAR 0 33
35159: PUSH
35160: LD_INT 4
35162: NEG
35163: PUSH
35164: LD_INT 4
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 4
35174: NEG
35175: PUSH
35176: LD_INT 5
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 3
35186: NEG
35187: PUSH
35188: LD_INT 4
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 3
35198: NEG
35199: PUSH
35200: LD_INT 3
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 4
35210: NEG
35211: PUSH
35212: LD_INT 3
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 5
35222: NEG
35223: PUSH
35224: LD_INT 4
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 5
35234: NEG
35235: PUSH
35236: LD_INT 5
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: NEG
35247: PUSH
35248: LD_INT 5
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 5
35258: NEG
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 3
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: LD_INT 4
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 3
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 2
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: LD_INT 3
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 4
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 2
35360: NEG
35361: PUSH
35362: LD_INT 4
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 4
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 4
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 5
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 5
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 4
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 5
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 4
35485: PUSH
35486: LD_INT 3
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 4
35495: PUSH
35496: LD_INT 4
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 4
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 3
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 4
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 4
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: LD_INT 4
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 3
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: LD_INT 4
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: LD_INT 5
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: LD_INT 5
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: LD_INT 4
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 5
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: NEG
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35693: LD_ADDR_VAR 0 34
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 4
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: LD_INT 5
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: LD_INT 4
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: LD_INT 3
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: LD_INT 3
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 4
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 5
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 3
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: LD_INT 5
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 3
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 3
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 4
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 4
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 4
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 4
35895: PUSH
35896: LD_INT 4
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 4
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 5
35915: PUSH
35916: LD_INT 4
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 5
35925: PUSH
35926: LD_INT 5
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 4
35935: PUSH
35936: LD_INT 5
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 3
35945: PUSH
35946: LD_INT 4
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 3
35955: PUSH
35956: LD_INT 3
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 5
35965: PUSH
35966: LD_INT 3
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 3
35975: PUSH
35976: LD_INT 5
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 3
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 3
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 4
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 4
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 3
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 4
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 2
36067: NEG
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 4
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 4
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 3
36101: NEG
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 3
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 4
36123: NEG
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 5
36134: NEG
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 5
36145: NEG
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 5
36157: NEG
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 3
36169: NEG
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
// end ; end ;
36225: GO 36228
36227: POP
// case btype of b_depot , b_warehouse :
36228: LD_VAR 0 1
36232: PUSH
36233: LD_INT 0
36235: DOUBLE
36236: EQUAL
36237: IFTRUE 36247
36239: LD_INT 1
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36247
36245: GO 36448
36247: POP
// case nation of nation_american :
36248: LD_VAR 0 5
36252: PUSH
36253: LD_INT 1
36255: DOUBLE
36256: EQUAL
36257: IFTRUE 36261
36259: GO 36317
36261: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36262: LD_ADDR_VAR 0 9
36266: PUSH
36267: LD_VAR 0 11
36271: PUSH
36272: LD_VAR 0 12
36276: PUSH
36277: LD_VAR 0 13
36281: PUSH
36282: LD_VAR 0 14
36286: PUSH
36287: LD_VAR 0 15
36291: PUSH
36292: LD_VAR 0 16
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: PUSH
36305: LD_VAR 0 4
36309: PUSH
36310: LD_INT 1
36312: PLUS
36313: ARRAY
36314: ST_TO_ADDR
36315: GO 36446
36317: LD_INT 2
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36325
36323: GO 36381
36325: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36326: LD_ADDR_VAR 0 9
36330: PUSH
36331: LD_VAR 0 17
36335: PUSH
36336: LD_VAR 0 18
36340: PUSH
36341: LD_VAR 0 19
36345: PUSH
36346: LD_VAR 0 20
36350: PUSH
36351: LD_VAR 0 21
36355: PUSH
36356: LD_VAR 0 22
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: PUSH
36369: LD_VAR 0 4
36373: PUSH
36374: LD_INT 1
36376: PLUS
36377: ARRAY
36378: ST_TO_ADDR
36379: GO 36446
36381: LD_INT 3
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36445
36389: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36390: LD_ADDR_VAR 0 9
36394: PUSH
36395: LD_VAR 0 23
36399: PUSH
36400: LD_VAR 0 24
36404: PUSH
36405: LD_VAR 0 25
36409: PUSH
36410: LD_VAR 0 26
36414: PUSH
36415: LD_VAR 0 27
36419: PUSH
36420: LD_VAR 0 28
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_INT 1
36440: PLUS
36441: ARRAY
36442: ST_TO_ADDR
36443: GO 36446
36445: POP
36446: GO 37001
36448: LD_INT 2
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36462
36454: LD_INT 3
36456: DOUBLE
36457: EQUAL
36458: IFTRUE 36462
36460: GO 36518
36462: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36463: LD_ADDR_VAR 0 9
36467: PUSH
36468: LD_VAR 0 29
36472: PUSH
36473: LD_VAR 0 30
36477: PUSH
36478: LD_VAR 0 31
36482: PUSH
36483: LD_VAR 0 32
36487: PUSH
36488: LD_VAR 0 33
36492: PUSH
36493: LD_VAR 0 34
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: PUSH
36506: LD_VAR 0 4
36510: PUSH
36511: LD_INT 1
36513: PLUS
36514: ARRAY
36515: ST_TO_ADDR
36516: GO 37001
36518: LD_INT 16
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36580
36524: LD_INT 17
36526: DOUBLE
36527: EQUAL
36528: IFTRUE 36580
36530: LD_INT 18
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36580
36536: LD_INT 19
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36580
36542: LD_INT 22
36544: DOUBLE
36545: EQUAL
36546: IFTRUE 36580
36548: LD_INT 20
36550: DOUBLE
36551: EQUAL
36552: IFTRUE 36580
36554: LD_INT 21
36556: DOUBLE
36557: EQUAL
36558: IFTRUE 36580
36560: LD_INT 23
36562: DOUBLE
36563: EQUAL
36564: IFTRUE 36580
36566: LD_INT 24
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36580
36572: LD_INT 25
36574: DOUBLE
36575: EQUAL
36576: IFTRUE 36580
36578: GO 36636
36580: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36581: LD_ADDR_VAR 0 9
36585: PUSH
36586: LD_VAR 0 35
36590: PUSH
36591: LD_VAR 0 36
36595: PUSH
36596: LD_VAR 0 37
36600: PUSH
36601: LD_VAR 0 38
36605: PUSH
36606: LD_VAR 0 39
36610: PUSH
36611: LD_VAR 0 40
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: PUSH
36624: LD_VAR 0 4
36628: PUSH
36629: LD_INT 1
36631: PLUS
36632: ARRAY
36633: ST_TO_ADDR
36634: GO 37001
36636: LD_INT 6
36638: DOUBLE
36639: EQUAL
36640: IFTRUE 36692
36642: LD_INT 7
36644: DOUBLE
36645: EQUAL
36646: IFTRUE 36692
36648: LD_INT 8
36650: DOUBLE
36651: EQUAL
36652: IFTRUE 36692
36654: LD_INT 13
36656: DOUBLE
36657: EQUAL
36658: IFTRUE 36692
36660: LD_INT 12
36662: DOUBLE
36663: EQUAL
36664: IFTRUE 36692
36666: LD_INT 15
36668: DOUBLE
36669: EQUAL
36670: IFTRUE 36692
36672: LD_INT 11
36674: DOUBLE
36675: EQUAL
36676: IFTRUE 36692
36678: LD_INT 14
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36692
36684: LD_INT 10
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36748
36692: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36693: LD_ADDR_VAR 0 9
36697: PUSH
36698: LD_VAR 0 41
36702: PUSH
36703: LD_VAR 0 42
36707: PUSH
36708: LD_VAR 0 43
36712: PUSH
36713: LD_VAR 0 44
36717: PUSH
36718: LD_VAR 0 45
36722: PUSH
36723: LD_VAR 0 46
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: PUSH
36736: LD_VAR 0 4
36740: PUSH
36741: LD_INT 1
36743: PLUS
36744: ARRAY
36745: ST_TO_ADDR
36746: GO 37001
36748: LD_INT 36
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36756
36754: GO 36812
36756: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36757: LD_ADDR_VAR 0 9
36761: PUSH
36762: LD_VAR 0 47
36766: PUSH
36767: LD_VAR 0 48
36771: PUSH
36772: LD_VAR 0 49
36776: PUSH
36777: LD_VAR 0 50
36781: PUSH
36782: LD_VAR 0 51
36786: PUSH
36787: LD_VAR 0 52
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: PUSH
36800: LD_VAR 0 4
36804: PUSH
36805: LD_INT 1
36807: PLUS
36808: ARRAY
36809: ST_TO_ADDR
36810: GO 37001
36812: LD_INT 4
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36838
36818: LD_INT 5
36820: DOUBLE
36821: EQUAL
36822: IFTRUE 36838
36824: LD_INT 34
36826: DOUBLE
36827: EQUAL
36828: IFTRUE 36838
36830: LD_INT 37
36832: DOUBLE
36833: EQUAL
36834: IFTRUE 36838
36836: GO 36894
36838: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36839: LD_ADDR_VAR 0 9
36843: PUSH
36844: LD_VAR 0 53
36848: PUSH
36849: LD_VAR 0 54
36853: PUSH
36854: LD_VAR 0 55
36858: PUSH
36859: LD_VAR 0 56
36863: PUSH
36864: LD_VAR 0 57
36868: PUSH
36869: LD_VAR 0 58
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: PUSH
36882: LD_VAR 0 4
36886: PUSH
36887: LD_INT 1
36889: PLUS
36890: ARRAY
36891: ST_TO_ADDR
36892: GO 37001
36894: LD_INT 31
36896: DOUBLE
36897: EQUAL
36898: IFTRUE 36944
36900: LD_INT 32
36902: DOUBLE
36903: EQUAL
36904: IFTRUE 36944
36906: LD_INT 33
36908: DOUBLE
36909: EQUAL
36910: IFTRUE 36944
36912: LD_INT 27
36914: DOUBLE
36915: EQUAL
36916: IFTRUE 36944
36918: LD_INT 26
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36944
36924: LD_INT 28
36926: DOUBLE
36927: EQUAL
36928: IFTRUE 36944
36930: LD_INT 29
36932: DOUBLE
36933: EQUAL
36934: IFTRUE 36944
36936: LD_INT 30
36938: DOUBLE
36939: EQUAL
36940: IFTRUE 36944
36942: GO 37000
36944: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36945: LD_ADDR_VAR 0 9
36949: PUSH
36950: LD_VAR 0 59
36954: PUSH
36955: LD_VAR 0 60
36959: PUSH
36960: LD_VAR 0 61
36964: PUSH
36965: LD_VAR 0 62
36969: PUSH
36970: LD_VAR 0 63
36974: PUSH
36975: LD_VAR 0 64
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: PUSH
36988: LD_VAR 0 4
36992: PUSH
36993: LD_INT 1
36995: PLUS
36996: ARRAY
36997: ST_TO_ADDR
36998: GO 37001
37000: POP
// temp_list2 = [ ] ;
37001: LD_ADDR_VAR 0 10
37005: PUSH
37006: EMPTY
37007: ST_TO_ADDR
// for i in temp_list do
37008: LD_ADDR_VAR 0 8
37012: PUSH
37013: LD_VAR 0 9
37017: PUSH
37018: FOR_IN
37019: IFFALSE 37071
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37021: LD_ADDR_VAR 0 10
37025: PUSH
37026: LD_VAR 0 10
37030: PUSH
37031: LD_VAR 0 8
37035: PUSH
37036: LD_INT 1
37038: ARRAY
37039: PUSH
37040: LD_VAR 0 2
37044: PLUS
37045: PUSH
37046: LD_VAR 0 8
37050: PUSH
37051: LD_INT 2
37053: ARRAY
37054: PUSH
37055: LD_VAR 0 3
37059: PLUS
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: EMPTY
37066: LIST
37067: ADD
37068: ST_TO_ADDR
37069: GO 37018
37071: POP
37072: POP
// result = temp_list2 ;
37073: LD_ADDR_VAR 0 7
37077: PUSH
37078: LD_VAR 0 10
37082: ST_TO_ADDR
// end ;
37083: LD_VAR 0 7
37087: RET
// export function EnemyInRange ( unit , dist ) ; begin
37088: LD_INT 0
37090: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37091: LD_ADDR_VAR 0 3
37095: PUSH
37096: LD_VAR 0 1
37100: PPUSH
37101: CALL_OW 255
37105: PPUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 250
37115: PPUSH
37116: LD_VAR 0 1
37120: PPUSH
37121: CALL_OW 251
37125: PPUSH
37126: LD_VAR 0 2
37130: PPUSH
37131: CALL 10490 0 4
37135: PUSH
37136: LD_INT 4
37138: ARRAY
37139: ST_TO_ADDR
// end ;
37140: LD_VAR 0 3
37144: RET
// export function PlayerSeeMe ( unit ) ; begin
37145: LD_INT 0
37147: PPUSH
// result := See ( your_side , unit ) ;
37148: LD_ADDR_VAR 0 2
37152: PUSH
37153: LD_OWVAR 2
37157: PPUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: CALL_OW 292
37167: ST_TO_ADDR
// end ;
37168: LD_VAR 0 2
37172: RET
// export function ReverseDir ( unit ) ; begin
37173: LD_INT 0
37175: PPUSH
// if not unit then
37176: LD_VAR 0 1
37180: NOT
37181: IFFALSE 37185
// exit ;
37183: GO 37208
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37185: LD_ADDR_VAR 0 2
37189: PUSH
37190: LD_VAR 0 1
37194: PPUSH
37195: CALL_OW 254
37199: PUSH
37200: LD_INT 3
37202: PLUS
37203: PUSH
37204: LD_INT 6
37206: MOD
37207: ST_TO_ADDR
// end ;
37208: LD_VAR 0 2
37212: RET
// export function ReverseArray ( array ) ; var i ; begin
37213: LD_INT 0
37215: PPUSH
37216: PPUSH
// if not array then
37217: LD_VAR 0 1
37221: NOT
37222: IFFALSE 37226
// exit ;
37224: GO 37281
// result := [ ] ;
37226: LD_ADDR_VAR 0 2
37230: PUSH
37231: EMPTY
37232: ST_TO_ADDR
// for i := array downto 1 do
37233: LD_ADDR_VAR 0 3
37237: PUSH
37238: DOUBLE
37239: LD_VAR 0 1
37243: INC
37244: ST_TO_ADDR
37245: LD_INT 1
37247: PUSH
37248: FOR_DOWNTO
37249: IFFALSE 37279
// result := Join ( result , array [ i ] ) ;
37251: LD_ADDR_VAR 0 2
37255: PUSH
37256: LD_VAR 0 2
37260: PPUSH
37261: LD_VAR 0 1
37265: PUSH
37266: LD_VAR 0 3
37270: ARRAY
37271: PPUSH
37272: CALL 41925 0 2
37276: ST_TO_ADDR
37277: GO 37248
37279: POP
37280: POP
// end ;
37281: LD_VAR 0 2
37285: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37286: LD_INT 0
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
// if not unit or not hexes then
37294: LD_VAR 0 1
37298: NOT
37299: PUSH
37300: LD_VAR 0 2
37304: NOT
37305: OR
37306: IFFALSE 37310
// exit ;
37308: GO 37433
// dist := 9999 ;
37310: LD_ADDR_VAR 0 5
37314: PUSH
37315: LD_INT 9999
37317: ST_TO_ADDR
// for i = 1 to hexes do
37318: LD_ADDR_VAR 0 4
37322: PUSH
37323: DOUBLE
37324: LD_INT 1
37326: DEC
37327: ST_TO_ADDR
37328: LD_VAR 0 2
37332: PUSH
37333: FOR_TO
37334: IFFALSE 37421
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37336: LD_ADDR_VAR 0 6
37340: PUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: LD_VAR 0 2
37350: PUSH
37351: LD_VAR 0 4
37355: ARRAY
37356: PUSH
37357: LD_INT 1
37359: ARRAY
37360: PPUSH
37361: LD_VAR 0 2
37365: PUSH
37366: LD_VAR 0 4
37370: ARRAY
37371: PUSH
37372: LD_INT 2
37374: ARRAY
37375: PPUSH
37376: CALL_OW 297
37380: ST_TO_ADDR
// if tdist < dist then
37381: LD_VAR 0 6
37385: PUSH
37386: LD_VAR 0 5
37390: LESS
37391: IFFALSE 37419
// begin hex := hexes [ i ] ;
37393: LD_ADDR_VAR 0 8
37397: PUSH
37398: LD_VAR 0 2
37402: PUSH
37403: LD_VAR 0 4
37407: ARRAY
37408: ST_TO_ADDR
// dist := tdist ;
37409: LD_ADDR_VAR 0 5
37413: PUSH
37414: LD_VAR 0 6
37418: ST_TO_ADDR
// end ; end ;
37419: GO 37333
37421: POP
37422: POP
// result := hex ;
37423: LD_ADDR_VAR 0 3
37427: PUSH
37428: LD_VAR 0 8
37432: ST_TO_ADDR
// end ;
37433: LD_VAR 0 3
37437: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37438: LD_INT 0
37440: PPUSH
37441: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37442: LD_VAR 0 1
37446: NOT
37447: PUSH
37448: LD_VAR 0 1
37452: PUSH
37453: LD_INT 21
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 23
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PPUSH
37477: CALL_OW 69
37481: IN
37482: NOT
37483: OR
37484: IFFALSE 37488
// exit ;
37486: GO 37535
// for i = 1 to 3 do
37488: LD_ADDR_VAR 0 3
37492: PUSH
37493: DOUBLE
37494: LD_INT 1
37496: DEC
37497: ST_TO_ADDR
37498: LD_INT 3
37500: PUSH
37501: FOR_TO
37502: IFFALSE 37533
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 250
37513: PPUSH
37514: LD_VAR 0 1
37518: PPUSH
37519: CALL_OW 251
37523: PPUSH
37524: LD_INT 1
37526: PPUSH
37527: CALL_OW 453
37531: GO 37501
37533: POP
37534: POP
// end ;
37535: LD_VAR 0 2
37539: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37540: LD_INT 0
37542: PPUSH
37543: PPUSH
37544: PPUSH
37545: PPUSH
37546: PPUSH
37547: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37548: LD_VAR 0 1
37552: NOT
37553: PUSH
37554: LD_VAR 0 2
37558: NOT
37559: OR
37560: PUSH
37561: LD_VAR 0 1
37565: PPUSH
37566: CALL_OW 314
37570: OR
37571: IFFALSE 37575
// exit ;
37573: GO 38042
// if GetLives ( i ) < 250 then
37575: LD_VAR 0 4
37579: PPUSH
37580: CALL_OW 256
37584: PUSH
37585: LD_INT 250
37587: LESS
37588: IFFALSE 37601
// begin ComAutodestruct ( i ) ;
37590: LD_VAR 0 4
37594: PPUSH
37595: CALL 37438 0 1
// exit ;
37599: GO 38042
// end ; x := GetX ( enemy_unit ) ;
37601: LD_ADDR_VAR 0 7
37605: PUSH
37606: LD_VAR 0 2
37610: PPUSH
37611: CALL_OW 250
37615: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37616: LD_ADDR_VAR 0 8
37620: PUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: CALL_OW 251
37630: ST_TO_ADDR
// if not x or not y then
37631: LD_VAR 0 7
37635: NOT
37636: PUSH
37637: LD_VAR 0 8
37641: NOT
37642: OR
37643: IFFALSE 37647
// exit ;
37645: GO 38042
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37647: LD_ADDR_VAR 0 6
37651: PUSH
37652: LD_VAR 0 7
37656: PPUSH
37657: LD_INT 0
37659: PPUSH
37660: LD_INT 4
37662: PPUSH
37663: CALL_OW 272
37667: PUSH
37668: LD_VAR 0 8
37672: PPUSH
37673: LD_INT 0
37675: PPUSH
37676: LD_INT 4
37678: PPUSH
37679: CALL_OW 273
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_VAR 0 7
37692: PPUSH
37693: LD_INT 1
37695: PPUSH
37696: LD_INT 4
37698: PPUSH
37699: CALL_OW 272
37703: PUSH
37704: LD_VAR 0 8
37708: PPUSH
37709: LD_INT 1
37711: PPUSH
37712: LD_INT 4
37714: PPUSH
37715: CALL_OW 273
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_VAR 0 7
37728: PPUSH
37729: LD_INT 2
37731: PPUSH
37732: LD_INT 4
37734: PPUSH
37735: CALL_OW 272
37739: PUSH
37740: LD_VAR 0 8
37744: PPUSH
37745: LD_INT 2
37747: PPUSH
37748: LD_INT 4
37750: PPUSH
37751: CALL_OW 273
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_VAR 0 7
37764: PPUSH
37765: LD_INT 3
37767: PPUSH
37768: LD_INT 4
37770: PPUSH
37771: CALL_OW 272
37775: PUSH
37776: LD_VAR 0 8
37780: PPUSH
37781: LD_INT 3
37783: PPUSH
37784: LD_INT 4
37786: PPUSH
37787: CALL_OW 273
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_VAR 0 7
37800: PPUSH
37801: LD_INT 4
37803: PPUSH
37804: LD_INT 4
37806: PPUSH
37807: CALL_OW 272
37811: PUSH
37812: LD_VAR 0 8
37816: PPUSH
37817: LD_INT 4
37819: PPUSH
37820: LD_INT 4
37822: PPUSH
37823: CALL_OW 273
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_VAR 0 7
37836: PPUSH
37837: LD_INT 5
37839: PPUSH
37840: LD_INT 4
37842: PPUSH
37843: CALL_OW 272
37847: PUSH
37848: LD_VAR 0 8
37852: PPUSH
37853: LD_INT 5
37855: PPUSH
37856: LD_INT 4
37858: PPUSH
37859: CALL_OW 273
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: ST_TO_ADDR
// for i = tmp downto 1 do
37876: LD_ADDR_VAR 0 4
37880: PUSH
37881: DOUBLE
37882: LD_VAR 0 6
37886: INC
37887: ST_TO_ADDR
37888: LD_INT 1
37890: PUSH
37891: FOR_DOWNTO
37892: IFFALSE 37993
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37894: LD_VAR 0 6
37898: PUSH
37899: LD_VAR 0 4
37903: ARRAY
37904: PUSH
37905: LD_INT 1
37907: ARRAY
37908: PPUSH
37909: LD_VAR 0 6
37913: PUSH
37914: LD_VAR 0 4
37918: ARRAY
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: PPUSH
37924: CALL_OW 488
37928: NOT
37929: PUSH
37930: LD_VAR 0 6
37934: PUSH
37935: LD_VAR 0 4
37939: ARRAY
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: PPUSH
37945: LD_VAR 0 6
37949: PUSH
37950: LD_VAR 0 4
37954: ARRAY
37955: PUSH
37956: LD_INT 2
37958: ARRAY
37959: PPUSH
37960: CALL_OW 428
37964: PUSH
37965: LD_INT 0
37967: NONEQUAL
37968: OR
37969: IFFALSE 37991
// tmp := Delete ( tmp , i ) ;
37971: LD_ADDR_VAR 0 6
37975: PUSH
37976: LD_VAR 0 6
37980: PPUSH
37981: LD_VAR 0 4
37985: PPUSH
37986: CALL_OW 3
37990: ST_TO_ADDR
37991: GO 37891
37993: POP
37994: POP
// j := GetClosestHex ( unit , tmp ) ;
37995: LD_ADDR_VAR 0 5
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: LD_VAR 0 6
38009: PPUSH
38010: CALL 37286 0 2
38014: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38015: LD_VAR 0 1
38019: PPUSH
38020: LD_VAR 0 5
38024: PUSH
38025: LD_INT 1
38027: ARRAY
38028: PPUSH
38029: LD_VAR 0 5
38033: PUSH
38034: LD_INT 2
38036: ARRAY
38037: PPUSH
38038: CALL_OW 111
// end ;
38042: LD_VAR 0 3
38046: RET
// export function PrepareApemanSoldier ( ) ; begin
38047: LD_INT 0
38049: PPUSH
// uc_nation := 0 ;
38050: LD_ADDR_OWVAR 21
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
// hc_sex := sex_male ;
38058: LD_ADDR_OWVAR 27
38062: PUSH
38063: LD_INT 1
38065: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38066: LD_ADDR_OWVAR 28
38070: PUSH
38071: LD_INT 15
38073: ST_TO_ADDR
// hc_gallery :=  ;
38074: LD_ADDR_OWVAR 33
38078: PUSH
38079: LD_STRING 
38081: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38082: LD_ADDR_OWVAR 31
38086: PUSH
38087: LD_INT 0
38089: PPUSH
38090: LD_INT 3
38092: PPUSH
38093: CALL_OW 12
38097: PUSH
38098: LD_INT 0
38100: PPUSH
38101: LD_INT 3
38103: PPUSH
38104: CALL_OW 12
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// end ;
38121: LD_VAR 0 1
38125: RET
// export function PrepareApemanEngineer ( ) ; begin
38126: LD_INT 0
38128: PPUSH
// uc_nation := 0 ;
38129: LD_ADDR_OWVAR 21
38133: PUSH
38134: LD_INT 0
38136: ST_TO_ADDR
// hc_sex := sex_male ;
38137: LD_ADDR_OWVAR 27
38141: PUSH
38142: LD_INT 1
38144: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38145: LD_ADDR_OWVAR 28
38149: PUSH
38150: LD_INT 16
38152: ST_TO_ADDR
// hc_gallery :=  ;
38153: LD_ADDR_OWVAR 33
38157: PUSH
38158: LD_STRING 
38160: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38161: LD_ADDR_OWVAR 31
38165: PUSH
38166: LD_INT 0
38168: PPUSH
38169: LD_INT 3
38171: PPUSH
38172: CALL_OW 12
38176: PUSH
38177: LD_INT 0
38179: PPUSH
38180: LD_INT 3
38182: PPUSH
38183: CALL_OW 12
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: ST_TO_ADDR
// end ;
38200: LD_VAR 0 1
38204: RET
// export function PrepareApeman ( agressivity ) ; begin
38205: LD_INT 0
38207: PPUSH
// uc_side := 0 ;
38208: LD_ADDR_OWVAR 20
38212: PUSH
38213: LD_INT 0
38215: ST_TO_ADDR
// uc_nation := 0 ;
38216: LD_ADDR_OWVAR 21
38220: PUSH
38221: LD_INT 0
38223: ST_TO_ADDR
// hc_sex := sex_male ;
38224: LD_ADDR_OWVAR 27
38228: PUSH
38229: LD_INT 1
38231: ST_TO_ADDR
// hc_class := class_apeman ;
38232: LD_ADDR_OWVAR 28
38236: PUSH
38237: LD_INT 12
38239: ST_TO_ADDR
// hc_gallery :=  ;
38240: LD_ADDR_OWVAR 33
38244: PUSH
38245: LD_STRING 
38247: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38248: LD_ADDR_OWVAR 35
38252: PUSH
38253: LD_VAR 0 1
38257: NEG
38258: PPUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: CALL_OW 12
38268: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38269: LD_ADDR_OWVAR 31
38273: PUSH
38274: LD_INT 0
38276: PPUSH
38277: LD_INT 3
38279: PPUSH
38280: CALL_OW 12
38284: PUSH
38285: LD_INT 0
38287: PPUSH
38288: LD_INT 3
38290: PPUSH
38291: CALL_OW 12
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: ST_TO_ADDR
// end ;
38308: LD_VAR 0 2
38312: RET
// export function PrepareTiger ( agressivity ) ; begin
38313: LD_INT 0
38315: PPUSH
// uc_side := 0 ;
38316: LD_ADDR_OWVAR 20
38320: PUSH
38321: LD_INT 0
38323: ST_TO_ADDR
// uc_nation := 0 ;
38324: LD_ADDR_OWVAR 21
38328: PUSH
38329: LD_INT 0
38331: ST_TO_ADDR
// hc_class := class_tiger ;
38332: LD_ADDR_OWVAR 28
38336: PUSH
38337: LD_INT 14
38339: ST_TO_ADDR
// hc_gallery :=  ;
38340: LD_ADDR_OWVAR 33
38344: PUSH
38345: LD_STRING 
38347: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38348: LD_ADDR_OWVAR 35
38352: PUSH
38353: LD_VAR 0 1
38357: NEG
38358: PPUSH
38359: LD_VAR 0 1
38363: PPUSH
38364: CALL_OW 12
38368: ST_TO_ADDR
// end ;
38369: LD_VAR 0 2
38373: RET
// export function PrepareEnchidna ( ) ; begin
38374: LD_INT 0
38376: PPUSH
// uc_side := 0 ;
38377: LD_ADDR_OWVAR 20
38381: PUSH
38382: LD_INT 0
38384: ST_TO_ADDR
// uc_nation := 0 ;
38385: LD_ADDR_OWVAR 21
38389: PUSH
38390: LD_INT 0
38392: ST_TO_ADDR
// hc_class := class_baggie ;
38393: LD_ADDR_OWVAR 28
38397: PUSH
38398: LD_INT 13
38400: ST_TO_ADDR
// hc_gallery :=  ;
38401: LD_ADDR_OWVAR 33
38405: PUSH
38406: LD_STRING 
38408: ST_TO_ADDR
// end ;
38409: LD_VAR 0 1
38413: RET
// export function PrepareFrog ( ) ; begin
38414: LD_INT 0
38416: PPUSH
// uc_side := 0 ;
38417: LD_ADDR_OWVAR 20
38421: PUSH
38422: LD_INT 0
38424: ST_TO_ADDR
// uc_nation := 0 ;
38425: LD_ADDR_OWVAR 21
38429: PUSH
38430: LD_INT 0
38432: ST_TO_ADDR
// hc_class := class_frog ;
38433: LD_ADDR_OWVAR 28
38437: PUSH
38438: LD_INT 19
38440: ST_TO_ADDR
// hc_gallery :=  ;
38441: LD_ADDR_OWVAR 33
38445: PUSH
38446: LD_STRING 
38448: ST_TO_ADDR
// end ;
38449: LD_VAR 0 1
38453: RET
// export function PrepareFish ( ) ; begin
38454: LD_INT 0
38456: PPUSH
// uc_side := 0 ;
38457: LD_ADDR_OWVAR 20
38461: PUSH
38462: LD_INT 0
38464: ST_TO_ADDR
// uc_nation := 0 ;
38465: LD_ADDR_OWVAR 21
38469: PUSH
38470: LD_INT 0
38472: ST_TO_ADDR
// hc_class := class_fish ;
38473: LD_ADDR_OWVAR 28
38477: PUSH
38478: LD_INT 20
38480: ST_TO_ADDR
// hc_gallery :=  ;
38481: LD_ADDR_OWVAR 33
38485: PUSH
38486: LD_STRING 
38488: ST_TO_ADDR
// end ;
38489: LD_VAR 0 1
38493: RET
// export function PrepareBird ( ) ; begin
38494: LD_INT 0
38496: PPUSH
// uc_side := 0 ;
38497: LD_ADDR_OWVAR 20
38501: PUSH
38502: LD_INT 0
38504: ST_TO_ADDR
// uc_nation := 0 ;
38505: LD_ADDR_OWVAR 21
38509: PUSH
38510: LD_INT 0
38512: ST_TO_ADDR
// hc_class := class_phororhacos ;
38513: LD_ADDR_OWVAR 28
38517: PUSH
38518: LD_INT 18
38520: ST_TO_ADDR
// hc_gallery :=  ;
38521: LD_ADDR_OWVAR 33
38525: PUSH
38526: LD_STRING 
38528: ST_TO_ADDR
// end ;
38529: LD_VAR 0 1
38533: RET
// export function PrepareHorse ( ) ; begin
38534: LD_INT 0
38536: PPUSH
// uc_side := 0 ;
38537: LD_ADDR_OWVAR 20
38541: PUSH
38542: LD_INT 0
38544: ST_TO_ADDR
// uc_nation := 0 ;
38545: LD_ADDR_OWVAR 21
38549: PUSH
38550: LD_INT 0
38552: ST_TO_ADDR
// hc_class := class_horse ;
38553: LD_ADDR_OWVAR 28
38557: PUSH
38558: LD_INT 21
38560: ST_TO_ADDR
// hc_gallery :=  ;
38561: LD_ADDR_OWVAR 33
38565: PUSH
38566: LD_STRING 
38568: ST_TO_ADDR
// end ;
38569: LD_VAR 0 1
38573: RET
// export function PrepareMastodont ( ) ; begin
38574: LD_INT 0
38576: PPUSH
// uc_side := 0 ;
38577: LD_ADDR_OWVAR 20
38581: PUSH
38582: LD_INT 0
38584: ST_TO_ADDR
// uc_nation := 0 ;
38585: LD_ADDR_OWVAR 21
38589: PUSH
38590: LD_INT 0
38592: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38593: LD_ADDR_OWVAR 37
38597: PUSH
38598: LD_INT 31
38600: ST_TO_ADDR
// vc_control := control_rider ;
38601: LD_ADDR_OWVAR 38
38605: PUSH
38606: LD_INT 4
38608: ST_TO_ADDR
// end ;
38609: LD_VAR 0 1
38613: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
38618: PPUSH
// uc_side = 0 ;
38619: LD_ADDR_OWVAR 20
38623: PUSH
38624: LD_INT 0
38626: ST_TO_ADDR
// uc_nation = 0 ;
38627: LD_ADDR_OWVAR 21
38631: PUSH
38632: LD_INT 0
38634: ST_TO_ADDR
// InitHc_All ( ) ;
38635: CALL_OW 584
// InitVc ;
38639: CALL_OW 20
// if mastodonts then
38643: LD_VAR 0 6
38647: IFFALSE 38714
// for i = 1 to mastodonts do
38649: LD_ADDR_VAR 0 11
38653: PUSH
38654: DOUBLE
38655: LD_INT 1
38657: DEC
38658: ST_TO_ADDR
38659: LD_VAR 0 6
38663: PUSH
38664: FOR_TO
38665: IFFALSE 38712
// begin vc_chassis := 31 ;
38667: LD_ADDR_OWVAR 37
38671: PUSH
38672: LD_INT 31
38674: ST_TO_ADDR
// vc_control := control_rider ;
38675: LD_ADDR_OWVAR 38
38679: PUSH
38680: LD_INT 4
38682: ST_TO_ADDR
// animal := CreateVehicle ;
38683: LD_ADDR_VAR 0 12
38687: PUSH
38688: CALL_OW 45
38692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38693: LD_VAR 0 12
38697: PPUSH
38698: LD_VAR 0 8
38702: PPUSH
38703: LD_INT 0
38705: PPUSH
38706: CALL 40842 0 3
// end ;
38710: GO 38664
38712: POP
38713: POP
// if horses then
38714: LD_VAR 0 5
38718: IFFALSE 38785
// for i = 1 to horses do
38720: LD_ADDR_VAR 0 11
38724: PUSH
38725: DOUBLE
38726: LD_INT 1
38728: DEC
38729: ST_TO_ADDR
38730: LD_VAR 0 5
38734: PUSH
38735: FOR_TO
38736: IFFALSE 38783
// begin hc_class := 21 ;
38738: LD_ADDR_OWVAR 28
38742: PUSH
38743: LD_INT 21
38745: ST_TO_ADDR
// hc_gallery :=  ;
38746: LD_ADDR_OWVAR 33
38750: PUSH
38751: LD_STRING 
38753: ST_TO_ADDR
// animal := CreateHuman ;
38754: LD_ADDR_VAR 0 12
38758: PUSH
38759: CALL_OW 44
38763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38764: LD_VAR 0 12
38768: PPUSH
38769: LD_VAR 0 8
38773: PPUSH
38774: LD_INT 0
38776: PPUSH
38777: CALL 40842 0 3
// end ;
38781: GO 38735
38783: POP
38784: POP
// if birds then
38785: LD_VAR 0 1
38789: IFFALSE 38856
// for i = 1 to birds do
38791: LD_ADDR_VAR 0 11
38795: PUSH
38796: DOUBLE
38797: LD_INT 1
38799: DEC
38800: ST_TO_ADDR
38801: LD_VAR 0 1
38805: PUSH
38806: FOR_TO
38807: IFFALSE 38854
// begin hc_class = 18 ;
38809: LD_ADDR_OWVAR 28
38813: PUSH
38814: LD_INT 18
38816: ST_TO_ADDR
// hc_gallery =  ;
38817: LD_ADDR_OWVAR 33
38821: PUSH
38822: LD_STRING 
38824: ST_TO_ADDR
// animal := CreateHuman ;
38825: LD_ADDR_VAR 0 12
38829: PUSH
38830: CALL_OW 44
38834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38835: LD_VAR 0 12
38839: PPUSH
38840: LD_VAR 0 8
38844: PPUSH
38845: LD_INT 0
38847: PPUSH
38848: CALL 40842 0 3
// end ;
38852: GO 38806
38854: POP
38855: POP
// if tigers then
38856: LD_VAR 0 2
38860: IFFALSE 38944
// for i = 1 to tigers do
38862: LD_ADDR_VAR 0 11
38866: PUSH
38867: DOUBLE
38868: LD_INT 1
38870: DEC
38871: ST_TO_ADDR
38872: LD_VAR 0 2
38876: PUSH
38877: FOR_TO
38878: IFFALSE 38942
// begin hc_class = class_tiger ;
38880: LD_ADDR_OWVAR 28
38884: PUSH
38885: LD_INT 14
38887: ST_TO_ADDR
// hc_gallery =  ;
38888: LD_ADDR_OWVAR 33
38892: PUSH
38893: LD_STRING 
38895: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38896: LD_ADDR_OWVAR 35
38900: PUSH
38901: LD_INT 7
38903: NEG
38904: PPUSH
38905: LD_INT 7
38907: PPUSH
38908: CALL_OW 12
38912: ST_TO_ADDR
// animal := CreateHuman ;
38913: LD_ADDR_VAR 0 12
38917: PUSH
38918: CALL_OW 44
38922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38923: LD_VAR 0 12
38927: PPUSH
38928: LD_VAR 0 8
38932: PPUSH
38933: LD_INT 0
38935: PPUSH
38936: CALL 40842 0 3
// end ;
38940: GO 38877
38942: POP
38943: POP
// if apemans then
38944: LD_VAR 0 3
38948: IFFALSE 39071
// for i = 1 to apemans do
38950: LD_ADDR_VAR 0 11
38954: PUSH
38955: DOUBLE
38956: LD_INT 1
38958: DEC
38959: ST_TO_ADDR
38960: LD_VAR 0 3
38964: PUSH
38965: FOR_TO
38966: IFFALSE 39069
// begin hc_class = class_apeman ;
38968: LD_ADDR_OWVAR 28
38972: PUSH
38973: LD_INT 12
38975: ST_TO_ADDR
// hc_gallery =  ;
38976: LD_ADDR_OWVAR 33
38980: PUSH
38981: LD_STRING 
38983: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38984: LD_ADDR_OWVAR 35
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PPUSH
38993: LD_INT 2
38995: PPUSH
38996: CALL_OW 12
39000: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39001: LD_ADDR_OWVAR 31
39005: PUSH
39006: LD_INT 1
39008: PPUSH
39009: LD_INT 3
39011: PPUSH
39012: CALL_OW 12
39016: PUSH
39017: LD_INT 1
39019: PPUSH
39020: LD_INT 3
39022: PPUSH
39023: CALL_OW 12
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: ST_TO_ADDR
// animal := CreateHuman ;
39040: LD_ADDR_VAR 0 12
39044: PUSH
39045: CALL_OW 44
39049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39050: LD_VAR 0 12
39054: PPUSH
39055: LD_VAR 0 8
39059: PPUSH
39060: LD_INT 0
39062: PPUSH
39063: CALL 40842 0 3
// end ;
39067: GO 38965
39069: POP
39070: POP
// if enchidnas then
39071: LD_VAR 0 4
39075: IFFALSE 39142
// for i = 1 to enchidnas do
39077: LD_ADDR_VAR 0 11
39081: PUSH
39082: DOUBLE
39083: LD_INT 1
39085: DEC
39086: ST_TO_ADDR
39087: LD_VAR 0 4
39091: PUSH
39092: FOR_TO
39093: IFFALSE 39140
// begin hc_class = 13 ;
39095: LD_ADDR_OWVAR 28
39099: PUSH
39100: LD_INT 13
39102: ST_TO_ADDR
// hc_gallery =  ;
39103: LD_ADDR_OWVAR 33
39107: PUSH
39108: LD_STRING 
39110: ST_TO_ADDR
// animal := CreateHuman ;
39111: LD_ADDR_VAR 0 12
39115: PUSH
39116: CALL_OW 44
39120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39121: LD_VAR 0 12
39125: PPUSH
39126: LD_VAR 0 8
39130: PPUSH
39131: LD_INT 0
39133: PPUSH
39134: CALL 40842 0 3
// end ;
39138: GO 39092
39140: POP
39141: POP
// if fishes then
39142: LD_VAR 0 7
39146: IFFALSE 39213
// for i = 1 to fishes do
39148: LD_ADDR_VAR 0 11
39152: PUSH
39153: DOUBLE
39154: LD_INT 1
39156: DEC
39157: ST_TO_ADDR
39158: LD_VAR 0 7
39162: PUSH
39163: FOR_TO
39164: IFFALSE 39211
// begin hc_class = 20 ;
39166: LD_ADDR_OWVAR 28
39170: PUSH
39171: LD_INT 20
39173: ST_TO_ADDR
// hc_gallery =  ;
39174: LD_ADDR_OWVAR 33
39178: PUSH
39179: LD_STRING 
39181: ST_TO_ADDR
// animal := CreateHuman ;
39182: LD_ADDR_VAR 0 12
39186: PUSH
39187: CALL_OW 44
39191: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39192: LD_VAR 0 12
39196: PPUSH
39197: LD_VAR 0 9
39201: PPUSH
39202: LD_INT 0
39204: PPUSH
39205: CALL 40842 0 3
// end ;
39209: GO 39163
39211: POP
39212: POP
// end ;
39213: LD_VAR 0 10
39217: RET
// export function WantHeal ( sci , unit ) ; begin
39218: LD_INT 0
39220: PPUSH
// if GetTaskList ( sci ) > 0 then
39221: LD_VAR 0 1
39225: PPUSH
39226: CALL_OW 437
39230: PUSH
39231: LD_INT 0
39233: GREATER
39234: IFFALSE 39304
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 437
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PUSH
39254: LD_STRING l
39256: EQUAL
39257: PUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: CALL_OW 437
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PUSH
39272: LD_INT 4
39274: ARRAY
39275: PUSH
39276: LD_VAR 0 2
39280: EQUAL
39281: AND
39282: IFFALSE 39294
// result := true else
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_INT 1
39291: ST_TO_ADDR
39292: GO 39302
// result := false ;
39294: LD_ADDR_VAR 0 3
39298: PUSH
39299: LD_INT 0
39301: ST_TO_ADDR
// end else
39302: GO 39312
// result := false ;
39304: LD_ADDR_VAR 0 3
39308: PUSH
39309: LD_INT 0
39311: ST_TO_ADDR
// end ;
39312: LD_VAR 0 3
39316: RET
// export function HealTarget ( sci ) ; begin
39317: LD_INT 0
39319: PPUSH
// if not sci then
39320: LD_VAR 0 1
39324: NOT
39325: IFFALSE 39329
// exit ;
39327: GO 39394
// result := 0 ;
39329: LD_ADDR_VAR 0 2
39333: PUSH
39334: LD_INT 0
39336: ST_TO_ADDR
// if GetTaskList ( sci ) then
39337: LD_VAR 0 1
39341: PPUSH
39342: CALL_OW 437
39346: IFFALSE 39394
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39348: LD_VAR 0 1
39352: PPUSH
39353: CALL_OW 437
39357: PUSH
39358: LD_INT 1
39360: ARRAY
39361: PUSH
39362: LD_INT 1
39364: ARRAY
39365: PUSH
39366: LD_STRING l
39368: EQUAL
39369: IFFALSE 39394
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39371: LD_ADDR_VAR 0 2
39375: PUSH
39376: LD_VAR 0 1
39380: PPUSH
39381: CALL_OW 437
39385: PUSH
39386: LD_INT 1
39388: ARRAY
39389: PUSH
39390: LD_INT 4
39392: ARRAY
39393: ST_TO_ADDR
// end ;
39394: LD_VAR 0 2
39398: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39399: LD_INT 0
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
// if not base_units then
39405: LD_VAR 0 1
39409: NOT
39410: IFFALSE 39414
// exit ;
39412: GO 39501
// result := false ;
39414: LD_ADDR_VAR 0 2
39418: PUSH
39419: LD_INT 0
39421: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39422: LD_ADDR_VAR 0 5
39426: PUSH
39427: LD_VAR 0 1
39431: PPUSH
39432: LD_INT 21
39434: PUSH
39435: LD_INT 3
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PPUSH
39442: CALL_OW 72
39446: ST_TO_ADDR
// if not tmp then
39447: LD_VAR 0 5
39451: NOT
39452: IFFALSE 39456
// exit ;
39454: GO 39501
// for i in tmp do
39456: LD_ADDR_VAR 0 3
39460: PUSH
39461: LD_VAR 0 5
39465: PUSH
39466: FOR_IN
39467: IFFALSE 39499
// begin result := EnemyInRange ( i , 22 ) ;
39469: LD_ADDR_VAR 0 2
39473: PUSH
39474: LD_VAR 0 3
39478: PPUSH
39479: LD_INT 22
39481: PPUSH
39482: CALL 37088 0 2
39486: ST_TO_ADDR
// if result then
39487: LD_VAR 0 2
39491: IFFALSE 39497
// exit ;
39493: POP
39494: POP
39495: GO 39501
// end ;
39497: GO 39466
39499: POP
39500: POP
// end ;
39501: LD_VAR 0 2
39505: RET
// export function FilterByTag ( units , tag ) ; begin
39506: LD_INT 0
39508: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39509: LD_ADDR_VAR 0 3
39513: PUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: LD_INT 120
39521: PUSH
39522: LD_VAR 0 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PPUSH
39531: CALL_OW 72
39535: ST_TO_ADDR
// end ;
39536: LD_VAR 0 3
39540: RET
// export function IsDriver ( un ) ; begin
39541: LD_INT 0
39543: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39544: LD_ADDR_VAR 0 2
39548: PUSH
39549: LD_VAR 0 1
39553: PUSH
39554: LD_INT 55
39556: PUSH
39557: EMPTY
39558: LIST
39559: PPUSH
39560: CALL_OW 69
39564: IN
39565: ST_TO_ADDR
// end ;
39566: LD_VAR 0 2
39570: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39571: LD_INT 0
39573: PPUSH
39574: PPUSH
// list := [ ] ;
39575: LD_ADDR_VAR 0 5
39579: PUSH
39580: EMPTY
39581: ST_TO_ADDR
// case d of 0 :
39582: LD_VAR 0 3
39586: PUSH
39587: LD_INT 0
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39595
39593: GO 39728
39595: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39596: LD_ADDR_VAR 0 5
39600: PUSH
39601: LD_VAR 0 1
39605: PUSH
39606: LD_INT 4
39608: MINUS
39609: PUSH
39610: LD_VAR 0 2
39614: PUSH
39615: LD_INT 4
39617: MINUS
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: LIST
39626: PUSH
39627: LD_VAR 0 1
39631: PUSH
39632: LD_INT 3
39634: MINUS
39635: PUSH
39636: LD_VAR 0 2
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: PUSH
39649: LD_VAR 0 1
39653: PUSH
39654: LD_INT 4
39656: PLUS
39657: PUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_INT 4
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: PUSH
39671: LD_VAR 0 1
39675: PUSH
39676: LD_INT 3
39678: PLUS
39679: PUSH
39680: LD_VAR 0 2
39684: PUSH
39685: LD_INT 3
39687: PLUS
39688: PUSH
39689: LD_INT 5
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: PUSH
39697: LD_VAR 0 1
39701: PUSH
39702: LD_VAR 0 2
39706: PUSH
39707: LD_INT 4
39709: PLUS
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: LIST
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: ST_TO_ADDR
// end ; 1 :
39726: GO 40426
39728: LD_INT 1
39730: DOUBLE
39731: EQUAL
39732: IFTRUE 39736
39734: GO 39869
39736: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39737: LD_ADDR_VAR 0 5
39741: PUSH
39742: LD_VAR 0 1
39746: PUSH
39747: LD_VAR 0 2
39751: PUSH
39752: LD_INT 4
39754: MINUS
39755: PUSH
39756: LD_INT 3
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: PUSH
39764: LD_VAR 0 1
39768: PUSH
39769: LD_INT 3
39771: MINUS
39772: PUSH
39773: LD_VAR 0 2
39777: PUSH
39778: LD_INT 3
39780: MINUS
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: PUSH
39790: LD_VAR 0 1
39794: PUSH
39795: LD_INT 4
39797: MINUS
39798: PUSH
39799: LD_VAR 0 2
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: PUSH
39812: LD_VAR 0 1
39816: PUSH
39817: LD_VAR 0 2
39821: PUSH
39822: LD_INT 3
39824: PLUS
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: PUSH
39834: LD_VAR 0 1
39838: PUSH
39839: LD_INT 4
39841: PLUS
39842: PUSH
39843: LD_VAR 0 2
39847: PUSH
39848: LD_INT 4
39850: PLUS
39851: PUSH
39852: LD_INT 5
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// end ; 2 :
39867: GO 40426
39869: LD_INT 2
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39877
39875: GO 40006
39877: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39878: LD_ADDR_VAR 0 5
39882: PUSH
39883: LD_VAR 0 1
39887: PUSH
39888: LD_VAR 0 2
39892: PUSH
39893: LD_INT 3
39895: MINUS
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: PUSH
39905: LD_VAR 0 1
39909: PUSH
39910: LD_INT 4
39912: PLUS
39913: PUSH
39914: LD_VAR 0 2
39918: PUSH
39919: LD_INT 4
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: PUSH
39927: LD_VAR 0 1
39931: PUSH
39932: LD_VAR 0 2
39936: PUSH
39937: LD_INT 4
39939: PLUS
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: PUSH
39949: LD_VAR 0 1
39953: PUSH
39954: LD_INT 3
39956: MINUS
39957: PUSH
39958: LD_VAR 0 2
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: PUSH
39971: LD_VAR 0 1
39975: PUSH
39976: LD_INT 4
39978: MINUS
39979: PUSH
39980: LD_VAR 0 2
39984: PUSH
39985: LD_INT 4
39987: MINUS
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// end ; 3 :
40004: GO 40426
40006: LD_INT 3
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40014
40012: GO 40147
40014: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40015: LD_ADDR_VAR 0 5
40019: PUSH
40020: LD_VAR 0 1
40024: PUSH
40025: LD_INT 3
40027: PLUS
40028: PUSH
40029: LD_VAR 0 2
40033: PUSH
40034: LD_INT 4
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: LIST
40041: PUSH
40042: LD_VAR 0 1
40046: PUSH
40047: LD_INT 4
40049: PLUS
40050: PUSH
40051: LD_VAR 0 2
40055: PUSH
40056: LD_INT 4
40058: PLUS
40059: PUSH
40060: LD_INT 5
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: PUSH
40068: LD_VAR 0 1
40072: PUSH
40073: LD_INT 4
40075: MINUS
40076: PUSH
40077: LD_VAR 0 2
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: PUSH
40090: LD_VAR 0 1
40094: PUSH
40095: LD_VAR 0 2
40099: PUSH
40100: LD_INT 4
40102: MINUS
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: PUSH
40112: LD_VAR 0 1
40116: PUSH
40117: LD_INT 3
40119: MINUS
40120: PUSH
40121: LD_VAR 0 2
40125: PUSH
40126: LD_INT 3
40128: MINUS
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: ST_TO_ADDR
// end ; 4 :
40145: GO 40426
40147: LD_INT 4
40149: DOUBLE
40150: EQUAL
40151: IFTRUE 40155
40153: GO 40288
40155: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40156: LD_ADDR_VAR 0 5
40160: PUSH
40161: LD_VAR 0 1
40165: PUSH
40166: LD_VAR 0 2
40170: PUSH
40171: LD_INT 4
40173: PLUS
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: PUSH
40183: LD_VAR 0 1
40187: PUSH
40188: LD_INT 3
40190: PLUS
40191: PUSH
40192: LD_VAR 0 2
40196: PUSH
40197: LD_INT 3
40199: PLUS
40200: PUSH
40201: LD_INT 5
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: PUSH
40209: LD_VAR 0 1
40213: PUSH
40214: LD_INT 4
40216: PLUS
40217: PUSH
40218: LD_VAR 0 2
40222: PUSH
40223: LD_INT 4
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: LD_VAR 0 1
40235: PUSH
40236: LD_VAR 0 2
40240: PUSH
40241: LD_INT 3
40243: MINUS
40244: PUSH
40245: LD_INT 3
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PUSH
40253: LD_VAR 0 1
40257: PUSH
40258: LD_INT 4
40260: MINUS
40261: PUSH
40262: LD_VAR 0 2
40266: PUSH
40267: LD_INT 4
40269: MINUS
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// end ; 5 :
40286: GO 40426
40288: LD_INT 5
40290: DOUBLE
40291: EQUAL
40292: IFTRUE 40296
40294: GO 40425
40296: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40297: LD_ADDR_VAR 0 5
40301: PUSH
40302: LD_VAR 0 1
40306: PUSH
40307: LD_INT 4
40309: MINUS
40310: PUSH
40311: LD_VAR 0 2
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: PUSH
40324: LD_VAR 0 1
40328: PUSH
40329: LD_VAR 0 2
40333: PUSH
40334: LD_INT 4
40336: MINUS
40337: PUSH
40338: LD_INT 3
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: PUSH
40346: LD_VAR 0 1
40350: PUSH
40351: LD_INT 4
40353: PLUS
40354: PUSH
40355: LD_VAR 0 2
40359: PUSH
40360: LD_INT 4
40362: PLUS
40363: PUSH
40364: LD_INT 5
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: PUSH
40372: LD_VAR 0 1
40376: PUSH
40377: LD_INT 3
40379: PLUS
40380: PUSH
40381: LD_VAR 0 2
40385: PUSH
40386: LD_INT 4
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: PUSH
40394: LD_VAR 0 1
40398: PUSH
40399: LD_VAR 0 2
40403: PUSH
40404: LD_INT 3
40406: PLUS
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: ST_TO_ADDR
// end ; end ;
40423: GO 40426
40425: POP
// result := list ;
40426: LD_ADDR_VAR 0 4
40430: PUSH
40431: LD_VAR 0 5
40435: ST_TO_ADDR
// end ;
40436: LD_VAR 0 4
40440: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40441: LD_INT 0
40443: PPUSH
40444: PPUSH
40445: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40446: LD_VAR 0 1
40450: NOT
40451: PUSH
40452: LD_VAR 0 2
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: LD_INT 4
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: IN
40475: NOT
40476: OR
40477: IFFALSE 40481
// exit ;
40479: GO 40564
// tmp := [ ] ;
40481: LD_ADDR_VAR 0 5
40485: PUSH
40486: EMPTY
40487: ST_TO_ADDR
// for i in units do
40488: LD_ADDR_VAR 0 4
40492: PUSH
40493: LD_VAR 0 1
40497: PUSH
40498: FOR_IN
40499: IFFALSE 40533
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40501: LD_ADDR_VAR 0 5
40505: PUSH
40506: LD_VAR 0 5
40510: PPUSH
40511: LD_VAR 0 4
40515: PPUSH
40516: LD_VAR 0 2
40520: PPUSH
40521: CALL_OW 259
40525: PPUSH
40526: CALL 41925 0 2
40530: ST_TO_ADDR
40531: GO 40498
40533: POP
40534: POP
// if not tmp then
40535: LD_VAR 0 5
40539: NOT
40540: IFFALSE 40544
// exit ;
40542: GO 40564
// result := SortListByListDesc ( units , tmp ) ;
40544: LD_ADDR_VAR 0 3
40548: PUSH
40549: LD_VAR 0 1
40553: PPUSH
40554: LD_VAR 0 5
40558: PPUSH
40559: CALL_OW 77
40563: ST_TO_ADDR
// end ;
40564: LD_VAR 0 3
40568: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40569: LD_INT 0
40571: PPUSH
40572: PPUSH
40573: PPUSH
// result := false ;
40574: LD_ADDR_VAR 0 3
40578: PUSH
40579: LD_INT 0
40581: ST_TO_ADDR
// if not building then
40582: LD_VAR 0 2
40586: NOT
40587: IFFALSE 40591
// exit ;
40589: GO 40729
// x := GetX ( building ) ;
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: LD_VAR 0 2
40600: PPUSH
40601: CALL_OW 250
40605: ST_TO_ADDR
// y := GetY ( building ) ;
40606: LD_ADDR_VAR 0 5
40610: PUSH
40611: LD_VAR 0 2
40615: PPUSH
40616: CALL_OW 251
40620: ST_TO_ADDR
// if not x or not y then
40621: LD_VAR 0 4
40625: NOT
40626: PUSH
40627: LD_VAR 0 5
40631: NOT
40632: OR
40633: IFFALSE 40637
// exit ;
40635: GO 40729
// if GetTaskList ( unit ) then
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 437
40646: IFFALSE 40729
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40648: LD_STRING e
40650: PUSH
40651: LD_VAR 0 1
40655: PPUSH
40656: CALL_OW 437
40660: PUSH
40661: LD_INT 1
40663: ARRAY
40664: PUSH
40665: LD_INT 1
40667: ARRAY
40668: EQUAL
40669: PUSH
40670: LD_VAR 0 4
40674: PUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 437
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: PUSH
40689: LD_INT 2
40691: ARRAY
40692: EQUAL
40693: AND
40694: PUSH
40695: LD_VAR 0 5
40699: PUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: CALL_OW 437
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: PUSH
40714: LD_INT 3
40716: ARRAY
40717: EQUAL
40718: AND
40719: IFFALSE 40729
// result := true end ;
40721: LD_ADDR_VAR 0 3
40725: PUSH
40726: LD_INT 1
40728: ST_TO_ADDR
// end ;
40729: LD_VAR 0 3
40733: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40734: LD_INT 0
40736: PPUSH
// result := false ;
40737: LD_ADDR_VAR 0 4
40741: PUSH
40742: LD_INT 0
40744: ST_TO_ADDR
// if GetTaskList ( unit ) then
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 437
40754: IFFALSE 40837
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40756: LD_STRING M
40758: PUSH
40759: LD_VAR 0 1
40763: PPUSH
40764: CALL_OW 437
40768: PUSH
40769: LD_INT 1
40771: ARRAY
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: EQUAL
40777: PUSH
40778: LD_VAR 0 2
40782: PUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 437
40792: PUSH
40793: LD_INT 1
40795: ARRAY
40796: PUSH
40797: LD_INT 2
40799: ARRAY
40800: EQUAL
40801: AND
40802: PUSH
40803: LD_VAR 0 3
40807: PUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: CALL_OW 437
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PUSH
40822: LD_INT 3
40824: ARRAY
40825: EQUAL
40826: AND
40827: IFFALSE 40837
// result := true ;
40829: LD_ADDR_VAR 0 4
40833: PUSH
40834: LD_INT 1
40836: ST_TO_ADDR
// end ; end ;
40837: LD_VAR 0 4
40841: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40842: LD_INT 0
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
// if not unit or not area then
40848: LD_VAR 0 1
40852: NOT
40853: PUSH
40854: LD_VAR 0 2
40858: NOT
40859: OR
40860: IFFALSE 40864
// exit ;
40862: GO 41028
// tmp := AreaToList ( area , i ) ;
40864: LD_ADDR_VAR 0 6
40868: PUSH
40869: LD_VAR 0 2
40873: PPUSH
40874: LD_VAR 0 5
40878: PPUSH
40879: CALL_OW 517
40883: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40884: LD_ADDR_VAR 0 5
40888: PUSH
40889: DOUBLE
40890: LD_INT 1
40892: DEC
40893: ST_TO_ADDR
40894: LD_VAR 0 6
40898: PUSH
40899: LD_INT 1
40901: ARRAY
40902: PUSH
40903: FOR_TO
40904: IFFALSE 41026
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40906: LD_ADDR_VAR 0 7
40910: PUSH
40911: LD_VAR 0 6
40915: PUSH
40916: LD_INT 1
40918: ARRAY
40919: PUSH
40920: LD_VAR 0 5
40924: ARRAY
40925: PUSH
40926: LD_VAR 0 6
40930: PUSH
40931: LD_INT 2
40933: ARRAY
40934: PUSH
40935: LD_VAR 0 5
40939: ARRAY
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40945: LD_VAR 0 7
40949: PUSH
40950: LD_INT 1
40952: ARRAY
40953: PPUSH
40954: LD_VAR 0 7
40958: PUSH
40959: LD_INT 2
40961: ARRAY
40962: PPUSH
40963: CALL_OW 428
40967: PUSH
40968: LD_INT 0
40970: EQUAL
40971: IFFALSE 41024
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40973: LD_VAR 0 1
40977: PPUSH
40978: LD_VAR 0 7
40982: PUSH
40983: LD_INT 1
40985: ARRAY
40986: PPUSH
40987: LD_VAR 0 7
40991: PUSH
40992: LD_INT 2
40994: ARRAY
40995: PPUSH
40996: LD_VAR 0 3
41000: PPUSH
41001: CALL_OW 48
// result := IsPlaced ( unit ) ;
41005: LD_ADDR_VAR 0 4
41009: PUSH
41010: LD_VAR 0 1
41014: PPUSH
41015: CALL_OW 305
41019: ST_TO_ADDR
// exit ;
41020: POP
41021: POP
41022: GO 41028
// end ; end ;
41024: GO 40903
41026: POP
41027: POP
// end ;
41028: LD_VAR 0 4
41032: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41033: LD_INT 0
41035: PPUSH
41036: PPUSH
41037: PPUSH
// if not side or side > 8 then
41038: LD_VAR 0 1
41042: NOT
41043: PUSH
41044: LD_VAR 0 1
41048: PUSH
41049: LD_INT 8
41051: GREATER
41052: OR
41053: IFFALSE 41057
// exit ;
41055: GO 41244
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41057: LD_ADDR_VAR 0 4
41061: PUSH
41062: LD_INT 22
41064: PUSH
41065: LD_VAR 0 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 21
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PPUSH
41088: CALL_OW 69
41092: ST_TO_ADDR
// if not tmp then
41093: LD_VAR 0 4
41097: NOT
41098: IFFALSE 41102
// exit ;
41100: GO 41244
// enable_addtolog := true ;
41102: LD_ADDR_OWVAR 81
41106: PUSH
41107: LD_INT 1
41109: ST_TO_ADDR
// AddToLog ( [ ) ;
41110: LD_STRING [
41112: PPUSH
41113: CALL_OW 561
// for i in tmp do
41117: LD_ADDR_VAR 0 3
41121: PUSH
41122: LD_VAR 0 4
41126: PUSH
41127: FOR_IN
41128: IFFALSE 41235
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41130: LD_STRING [
41132: PUSH
41133: LD_VAR 0 3
41137: PPUSH
41138: CALL_OW 266
41142: STR
41143: PUSH
41144: LD_STRING , 
41146: STR
41147: PUSH
41148: LD_VAR 0 3
41152: PPUSH
41153: CALL_OW 250
41157: STR
41158: PUSH
41159: LD_STRING , 
41161: STR
41162: PUSH
41163: LD_VAR 0 3
41167: PPUSH
41168: CALL_OW 251
41172: STR
41173: PUSH
41174: LD_STRING , 
41176: STR
41177: PUSH
41178: LD_VAR 0 3
41182: PPUSH
41183: CALL_OW 254
41187: STR
41188: PUSH
41189: LD_STRING , 
41191: STR
41192: PUSH
41193: LD_VAR 0 3
41197: PPUSH
41198: LD_INT 1
41200: PPUSH
41201: CALL_OW 268
41205: STR
41206: PUSH
41207: LD_STRING , 
41209: STR
41210: PUSH
41211: LD_VAR 0 3
41215: PPUSH
41216: LD_INT 2
41218: PPUSH
41219: CALL_OW 268
41223: STR
41224: PUSH
41225: LD_STRING ],
41227: STR
41228: PPUSH
41229: CALL_OW 561
// end ;
41233: GO 41127
41235: POP
41236: POP
// AddToLog ( ]; ) ;
41237: LD_STRING ];
41239: PPUSH
41240: CALL_OW 561
// end ;
41244: LD_VAR 0 2
41248: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41249: LD_INT 0
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
// if not area or not rate or not max then
41256: LD_VAR 0 1
41260: NOT
41261: PUSH
41262: LD_VAR 0 2
41266: NOT
41267: OR
41268: PUSH
41269: LD_VAR 0 4
41273: NOT
41274: OR
41275: IFFALSE 41279
// exit ;
41277: GO 41468
// while 1 do
41279: LD_INT 1
41281: IFFALSE 41468
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41283: LD_ADDR_VAR 0 9
41287: PUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: LD_INT 1
41295: PPUSH
41296: CALL_OW 287
41300: PUSH
41301: LD_INT 10
41303: MUL
41304: ST_TO_ADDR
// r := rate / 10 ;
41305: LD_ADDR_VAR 0 7
41309: PUSH
41310: LD_VAR 0 2
41314: PUSH
41315: LD_INT 10
41317: DIVREAL
41318: ST_TO_ADDR
// time := 1 1$00 ;
41319: LD_ADDR_VAR 0 8
41323: PUSH
41324: LD_INT 2100
41326: ST_TO_ADDR
// if amount < min then
41327: LD_VAR 0 9
41331: PUSH
41332: LD_VAR 0 3
41336: LESS
41337: IFFALSE 41355
// r := r * 2 else
41339: LD_ADDR_VAR 0 7
41343: PUSH
41344: LD_VAR 0 7
41348: PUSH
41349: LD_INT 2
41351: MUL
41352: ST_TO_ADDR
41353: GO 41381
// if amount > max then
41355: LD_VAR 0 9
41359: PUSH
41360: LD_VAR 0 4
41364: GREATER
41365: IFFALSE 41381
// r := r / 2 ;
41367: LD_ADDR_VAR 0 7
41371: PUSH
41372: LD_VAR 0 7
41376: PUSH
41377: LD_INT 2
41379: DIVREAL
41380: ST_TO_ADDR
// time := time / r ;
41381: LD_ADDR_VAR 0 8
41385: PUSH
41386: LD_VAR 0 8
41390: PUSH
41391: LD_VAR 0 7
41395: DIVREAL
41396: ST_TO_ADDR
// if time < 0 then
41397: LD_VAR 0 8
41401: PUSH
41402: LD_INT 0
41404: LESS
41405: IFFALSE 41422
// time := time * - 1 ;
41407: LD_ADDR_VAR 0 8
41411: PUSH
41412: LD_VAR 0 8
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: MUL
41421: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41422: LD_VAR 0 8
41426: PUSH
41427: LD_INT 35
41429: PPUSH
41430: LD_INT 875
41432: PPUSH
41433: CALL_OW 12
41437: PLUS
41438: PPUSH
41439: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41443: LD_INT 1
41445: PPUSH
41446: LD_INT 5
41448: PPUSH
41449: CALL_OW 12
41453: PPUSH
41454: LD_VAR 0 1
41458: PPUSH
41459: LD_INT 1
41461: PPUSH
41462: CALL_OW 55
// end ;
41466: GO 41279
// end ;
41468: LD_VAR 0 5
41472: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
// if not turrets or not factories then
41483: LD_VAR 0 1
41487: NOT
41488: PUSH
41489: LD_VAR 0 2
41493: NOT
41494: OR
41495: IFFALSE 41499
// exit ;
41497: GO 41806
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41499: LD_ADDR_VAR 0 10
41503: PUSH
41504: LD_INT 5
41506: PUSH
41507: LD_INT 6
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: LD_INT 4
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: LD_INT 5
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 24
41541: PUSH
41542: LD_INT 25
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 23
41551: PUSH
41552: LD_INT 27
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 42
41565: PUSH
41566: LD_INT 43
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 44
41575: PUSH
41576: LD_INT 46
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 45
41585: PUSH
41586: LD_INT 47
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
// result := [ ] ;
41603: LD_ADDR_VAR 0 3
41607: PUSH
41608: EMPTY
41609: ST_TO_ADDR
// for i in turrets do
41610: LD_ADDR_VAR 0 4
41614: PUSH
41615: LD_VAR 0 1
41619: PUSH
41620: FOR_IN
41621: IFFALSE 41804
// begin nat := GetNation ( i ) ;
41623: LD_ADDR_VAR 0 7
41627: PUSH
41628: LD_VAR 0 4
41632: PPUSH
41633: CALL_OW 248
41637: ST_TO_ADDR
// weapon := 0 ;
41638: LD_ADDR_VAR 0 8
41642: PUSH
41643: LD_INT 0
41645: ST_TO_ADDR
// if not nat then
41646: LD_VAR 0 7
41650: NOT
41651: IFFALSE 41655
// continue ;
41653: GO 41620
// for j in list [ nat ] do
41655: LD_ADDR_VAR 0 5
41659: PUSH
41660: LD_VAR 0 10
41664: PUSH
41665: LD_VAR 0 7
41669: ARRAY
41670: PUSH
41671: FOR_IN
41672: IFFALSE 41713
// if GetBWeapon ( i ) = j [ 1 ] then
41674: LD_VAR 0 4
41678: PPUSH
41679: CALL_OW 269
41683: PUSH
41684: LD_VAR 0 5
41688: PUSH
41689: LD_INT 1
41691: ARRAY
41692: EQUAL
41693: IFFALSE 41711
// begin weapon := j [ 2 ] ;
41695: LD_ADDR_VAR 0 8
41699: PUSH
41700: LD_VAR 0 5
41704: PUSH
41705: LD_INT 2
41707: ARRAY
41708: ST_TO_ADDR
// break ;
41709: GO 41713
// end ;
41711: GO 41671
41713: POP
41714: POP
// if not weapon then
41715: LD_VAR 0 8
41719: NOT
41720: IFFALSE 41724
// continue ;
41722: GO 41620
// for k in factories do
41724: LD_ADDR_VAR 0 6
41728: PUSH
41729: LD_VAR 0 2
41733: PUSH
41734: FOR_IN
41735: IFFALSE 41800
// begin weapons := AvailableWeaponList ( k ) ;
41737: LD_ADDR_VAR 0 9
41741: PUSH
41742: LD_VAR 0 6
41746: PPUSH
41747: CALL_OW 478
41751: ST_TO_ADDR
// if not weapons then
41752: LD_VAR 0 9
41756: NOT
41757: IFFALSE 41761
// continue ;
41759: GO 41734
// if weapon in weapons then
41761: LD_VAR 0 8
41765: PUSH
41766: LD_VAR 0 9
41770: IN
41771: IFFALSE 41798
// begin result := [ i , weapon ] ;
41773: LD_ADDR_VAR 0 3
41777: PUSH
41778: LD_VAR 0 4
41782: PUSH
41783: LD_VAR 0 8
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: ST_TO_ADDR
// exit ;
41792: POP
41793: POP
41794: POP
41795: POP
41796: GO 41806
// end ; end ;
41798: GO 41734
41800: POP
41801: POP
// end ;
41802: GO 41620
41804: POP
41805: POP
// end ;
41806: LD_VAR 0 3
41810: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41811: LD_INT 0
41813: PPUSH
// if not side or side > 8 then
41814: LD_VAR 0 3
41818: NOT
41819: PUSH
41820: LD_VAR 0 3
41824: PUSH
41825: LD_INT 8
41827: GREATER
41828: OR
41829: IFFALSE 41833
// exit ;
41831: GO 41892
// if not range then
41833: LD_VAR 0 4
41837: NOT
41838: IFFALSE 41849
// range := - 12 ;
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_INT 12
41847: NEG
41848: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41849: LD_VAR 0 1
41853: PPUSH
41854: LD_VAR 0 2
41858: PPUSH
41859: LD_VAR 0 3
41863: PPUSH
41864: LD_VAR 0 4
41868: PPUSH
41869: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41873: LD_VAR 0 1
41877: PPUSH
41878: LD_VAR 0 2
41882: PPUSH
41883: LD_VAR 0 3
41887: PPUSH
41888: CALL_OW 331
// end ;
41892: LD_VAR 0 5
41896: RET
// export function Video ( mode ) ; begin
41897: LD_INT 0
41899: PPUSH
// ingame_video = mode ;
41900: LD_ADDR_OWVAR 52
41904: PUSH
41905: LD_VAR 0 1
41909: ST_TO_ADDR
// interface_hidden = mode ;
41910: LD_ADDR_OWVAR 54
41914: PUSH
41915: LD_VAR 0 1
41919: ST_TO_ADDR
// end ;
41920: LD_VAR 0 2
41924: RET
// export function Join ( array , element ) ; begin
41925: LD_INT 0
41927: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41928: LD_ADDR_VAR 0 3
41932: PUSH
41933: LD_VAR 0 1
41937: PPUSH
41938: LD_VAR 0 1
41942: PUSH
41943: LD_INT 1
41945: PLUS
41946: PPUSH
41947: LD_VAR 0 2
41951: PPUSH
41952: CALL_OW 1
41956: ST_TO_ADDR
// end ;
41957: LD_VAR 0 3
41961: RET
// export function JoinUnion ( array , element ) ; begin
41962: LD_INT 0
41964: PPUSH
// result := array union element ;
41965: LD_ADDR_VAR 0 3
41969: PUSH
41970: LD_VAR 0 1
41974: PUSH
41975: LD_VAR 0 2
41979: UNION
41980: ST_TO_ADDR
// end ;
41981: LD_VAR 0 3
41985: RET
// export function GetBehemoths ( side ) ; begin
41986: LD_INT 0
41988: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41989: LD_ADDR_VAR 0 2
41993: PUSH
41994: LD_INT 22
41996: PUSH
41997: LD_VAR 0 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 31
42008: PUSH
42009: LD_INT 25
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PPUSH
42020: CALL_OW 69
42024: ST_TO_ADDR
// end ;
42025: LD_VAR 0 2
42029: RET
// export function Shuffle ( array ) ; var i , index ; begin
42030: LD_INT 0
42032: PPUSH
42033: PPUSH
42034: PPUSH
// result := [ ] ;
42035: LD_ADDR_VAR 0 2
42039: PUSH
42040: EMPTY
42041: ST_TO_ADDR
// if not array then
42042: LD_VAR 0 1
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 42150
// Randomize ;
42051: CALL_OW 10
// for i = array downto 1 do
42055: LD_ADDR_VAR 0 3
42059: PUSH
42060: DOUBLE
42061: LD_VAR 0 1
42065: INC
42066: ST_TO_ADDR
42067: LD_INT 1
42069: PUSH
42070: FOR_DOWNTO
42071: IFFALSE 42148
// begin index := rand ( 1 , array ) ;
42073: LD_ADDR_VAR 0 4
42077: PUSH
42078: LD_INT 1
42080: PPUSH
42081: LD_VAR 0 1
42085: PPUSH
42086: CALL_OW 12
42090: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42091: LD_ADDR_VAR 0 2
42095: PUSH
42096: LD_VAR 0 2
42100: PPUSH
42101: LD_VAR 0 2
42105: PUSH
42106: LD_INT 1
42108: PLUS
42109: PPUSH
42110: LD_VAR 0 1
42114: PUSH
42115: LD_VAR 0 4
42119: ARRAY
42120: PPUSH
42121: CALL_OW 2
42125: ST_TO_ADDR
// array := Delete ( array , index ) ;
42126: LD_ADDR_VAR 0 1
42130: PUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: LD_VAR 0 4
42140: PPUSH
42141: CALL_OW 3
42145: ST_TO_ADDR
// end ;
42146: GO 42070
42148: POP
42149: POP
// end ;
42150: LD_VAR 0 2
42154: RET
// export function GetBaseMaterials ( base ) ; begin
42155: LD_INT 0
42157: PPUSH
// result := [ 0 , 0 , 0 ] ;
42158: LD_ADDR_VAR 0 2
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// if not base then
42177: LD_VAR 0 1
42181: NOT
42182: IFFALSE 42186
// exit ;
42184: GO 42235
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42186: LD_ADDR_VAR 0 2
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: LD_INT 1
42198: PPUSH
42199: CALL_OW 275
42203: PUSH
42204: LD_VAR 0 1
42208: PPUSH
42209: LD_INT 2
42211: PPUSH
42212: CALL_OW 275
42216: PUSH
42217: LD_VAR 0 1
42221: PPUSH
42222: LD_INT 3
42224: PPUSH
42225: CALL_OW 275
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
// end ;
42235: LD_VAR 0 2
42239: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42240: LD_INT 0
42242: PPUSH
42243: PPUSH
// result := array ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 1
42253: ST_TO_ADDR
// if size >= result then
42254: LD_VAR 0 2
42258: PUSH
42259: LD_VAR 0 3
42263: GREATEREQUAL
42264: IFFALSE 42268
// exit ;
42266: GO 42318
// if size then
42268: LD_VAR 0 2
42272: IFFALSE 42318
// for i := array downto size do
42274: LD_ADDR_VAR 0 4
42278: PUSH
42279: DOUBLE
42280: LD_VAR 0 1
42284: INC
42285: ST_TO_ADDR
42286: LD_VAR 0 2
42290: PUSH
42291: FOR_DOWNTO
42292: IFFALSE 42316
// result := Delete ( result , result ) ;
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_VAR 0 3
42303: PPUSH
42304: LD_VAR 0 3
42308: PPUSH
42309: CALL_OW 3
42313: ST_TO_ADDR
42314: GO 42291
42316: POP
42317: POP
// end ;
42318: LD_VAR 0 3
42322: RET
// export function ComExit ( unit ) ; var tmp ; begin
42323: LD_INT 0
42325: PPUSH
42326: PPUSH
// if not IsInUnit ( unit ) then
42327: LD_VAR 0 1
42331: PPUSH
42332: CALL_OW 310
42336: NOT
42337: IFFALSE 42341
// exit ;
42339: GO 42401
// tmp := IsInUnit ( unit ) ;
42341: LD_ADDR_VAR 0 3
42345: PUSH
42346: LD_VAR 0 1
42350: PPUSH
42351: CALL_OW 310
42355: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42356: LD_VAR 0 3
42360: PPUSH
42361: CALL_OW 247
42365: PUSH
42366: LD_INT 2
42368: EQUAL
42369: IFFALSE 42382
// ComExitVehicle ( unit ) else
42371: LD_VAR 0 1
42375: PPUSH
42376: CALL_OW 121
42380: GO 42391
// ComExitBuilding ( unit ) ;
42382: LD_VAR 0 1
42386: PPUSH
42387: CALL_OW 122
// result := tmp ;
42391: LD_ADDR_VAR 0 2
42395: PUSH
42396: LD_VAR 0 3
42400: ST_TO_ADDR
// end ;
42401: LD_VAR 0 2
42405: RET
// export function ComExitAll ( units ) ; var i ; begin
42406: LD_INT 0
42408: PPUSH
42409: PPUSH
// if not units then
42410: LD_VAR 0 1
42414: NOT
42415: IFFALSE 42419
// exit ;
42417: GO 42445
// for i in units do
42419: LD_ADDR_VAR 0 3
42423: PUSH
42424: LD_VAR 0 1
42428: PUSH
42429: FOR_IN
42430: IFFALSE 42443
// ComExit ( i ) ;
42432: LD_VAR 0 3
42436: PPUSH
42437: CALL 42323 0 1
42441: GO 42429
42443: POP
42444: POP
// end ;
42445: LD_VAR 0 2
42449: RET
// export function ResetHc ; begin
42450: LD_INT 0
42452: PPUSH
// InitHc ;
42453: CALL_OW 19
// hc_importance := 0 ;
42457: LD_ADDR_OWVAR 32
42461: PUSH
42462: LD_INT 0
42464: ST_TO_ADDR
// end ;
42465: LD_VAR 0 1
42469: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42470: LD_INT 0
42472: PPUSH
42473: PPUSH
42474: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42475: LD_ADDR_VAR 0 6
42479: PUSH
42480: LD_VAR 0 1
42484: PUSH
42485: LD_VAR 0 3
42489: PLUS
42490: PUSH
42491: LD_INT 2
42493: DIV
42494: ST_TO_ADDR
// if _x < 0 then
42495: LD_VAR 0 6
42499: PUSH
42500: LD_INT 0
42502: LESS
42503: IFFALSE 42520
// _x := _x * - 1 ;
42505: LD_ADDR_VAR 0 6
42509: PUSH
42510: LD_VAR 0 6
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: MUL
42519: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42520: LD_ADDR_VAR 0 7
42524: PUSH
42525: LD_VAR 0 2
42529: PUSH
42530: LD_VAR 0 4
42534: PLUS
42535: PUSH
42536: LD_INT 2
42538: DIV
42539: ST_TO_ADDR
// if _y < 0 then
42540: LD_VAR 0 7
42544: PUSH
42545: LD_INT 0
42547: LESS
42548: IFFALSE 42565
// _y := _y * - 1 ;
42550: LD_ADDR_VAR 0 7
42554: PUSH
42555: LD_VAR 0 7
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: MUL
42564: ST_TO_ADDR
// result := [ _x , _y ] ;
42565: LD_ADDR_VAR 0 5
42569: PUSH
42570: LD_VAR 0 6
42574: PUSH
42575: LD_VAR 0 7
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: ST_TO_ADDR
// end ;
42584: LD_VAR 0 5
42588: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42589: LD_INT 0
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
// task := GetTaskList ( unit ) ;
42595: LD_ADDR_VAR 0 7
42599: PUSH
42600: LD_VAR 0 1
42604: PPUSH
42605: CALL_OW 437
42609: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42610: LD_VAR 0 7
42614: NOT
42615: PUSH
42616: LD_VAR 0 1
42620: PPUSH
42621: LD_VAR 0 2
42625: PPUSH
42626: CALL_OW 308
42630: NOT
42631: AND
42632: IFFALSE 42636
// exit ;
42634: GO 42754
// if IsInArea ( unit , area ) then
42636: LD_VAR 0 1
42640: PPUSH
42641: LD_VAR 0 2
42645: PPUSH
42646: CALL_OW 308
42650: IFFALSE 42668
// begin ComMoveToArea ( unit , goAway ) ;
42652: LD_VAR 0 1
42656: PPUSH
42657: LD_VAR 0 3
42661: PPUSH
42662: CALL_OW 113
// exit ;
42666: GO 42754
// end ; if task [ 1 ] [ 1 ] <> M then
42668: LD_VAR 0 7
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: PUSH
42677: LD_INT 1
42679: ARRAY
42680: PUSH
42681: LD_STRING M
42683: NONEQUAL
42684: IFFALSE 42688
// exit ;
42686: GO 42754
// x := task [ 1 ] [ 2 ] ;
42688: LD_ADDR_VAR 0 5
42692: PUSH
42693: LD_VAR 0 7
42697: PUSH
42698: LD_INT 1
42700: ARRAY
42701: PUSH
42702: LD_INT 2
42704: ARRAY
42705: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42706: LD_ADDR_VAR 0 6
42710: PUSH
42711: LD_VAR 0 7
42715: PUSH
42716: LD_INT 1
42718: ARRAY
42719: PUSH
42720: LD_INT 3
42722: ARRAY
42723: ST_TO_ADDR
// if InArea ( x , y , area ) then
42724: LD_VAR 0 5
42728: PPUSH
42729: LD_VAR 0 6
42733: PPUSH
42734: LD_VAR 0 2
42738: PPUSH
42739: CALL_OW 309
42743: IFFALSE 42754
// ComStop ( unit ) ;
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 141
// end ;
42754: LD_VAR 0 4
42758: RET
// export function Abs ( value ) ; begin
42759: LD_INT 0
42761: PPUSH
// result := value ;
42762: LD_ADDR_VAR 0 2
42766: PUSH
42767: LD_VAR 0 1
42771: ST_TO_ADDR
// if value < 0 then
42772: LD_VAR 0 1
42776: PUSH
42777: LD_INT 0
42779: LESS
42780: IFFALSE 42797
// result := value * - 1 ;
42782: LD_ADDR_VAR 0 2
42786: PUSH
42787: LD_VAR 0 1
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: MUL
42796: ST_TO_ADDR
// end ;
42797: LD_VAR 0 2
42801: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42802: LD_INT 0
42804: PPUSH
42805: PPUSH
42806: PPUSH
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
42811: PPUSH
// if not unit or not building then
42812: LD_VAR 0 1
42816: NOT
42817: PUSH
42818: LD_VAR 0 2
42822: NOT
42823: OR
42824: IFFALSE 42828
// exit ;
42826: GO 43054
// x := GetX ( building ) ;
42828: LD_ADDR_VAR 0 4
42832: PUSH
42833: LD_VAR 0 2
42837: PPUSH
42838: CALL_OW 250
42842: ST_TO_ADDR
// y := GetY ( building ) ;
42843: LD_ADDR_VAR 0 6
42847: PUSH
42848: LD_VAR 0 2
42852: PPUSH
42853: CALL_OW 251
42857: ST_TO_ADDR
// d := GetDir ( building ) ;
42858: LD_ADDR_VAR 0 8
42862: PUSH
42863: LD_VAR 0 2
42867: PPUSH
42868: CALL_OW 254
42872: ST_TO_ADDR
// r := 4 ;
42873: LD_ADDR_VAR 0 9
42877: PUSH
42878: LD_INT 4
42880: ST_TO_ADDR
// for i := 1 to 5 do
42881: LD_ADDR_VAR 0 10
42885: PUSH
42886: DOUBLE
42887: LD_INT 1
42889: DEC
42890: ST_TO_ADDR
42891: LD_INT 5
42893: PUSH
42894: FOR_TO
42895: IFFALSE 43052
// begin _x := ShiftX ( x , d , r + i ) ;
42897: LD_ADDR_VAR 0 5
42901: PUSH
42902: LD_VAR 0 4
42906: PPUSH
42907: LD_VAR 0 8
42911: PPUSH
42912: LD_VAR 0 9
42916: PUSH
42917: LD_VAR 0 10
42921: PLUS
42922: PPUSH
42923: CALL_OW 272
42927: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42928: LD_ADDR_VAR 0 7
42932: PUSH
42933: LD_VAR 0 6
42937: PPUSH
42938: LD_VAR 0 8
42942: PPUSH
42943: LD_VAR 0 9
42947: PUSH
42948: LD_VAR 0 10
42952: PLUS
42953: PPUSH
42954: CALL_OW 273
42958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42959: LD_VAR 0 5
42963: PPUSH
42964: LD_VAR 0 7
42968: PPUSH
42969: CALL_OW 488
42973: PUSH
42974: LD_VAR 0 5
42978: PPUSH
42979: LD_VAR 0 7
42983: PPUSH
42984: CALL_OW 428
42988: PPUSH
42989: CALL_OW 247
42993: PUSH
42994: LD_INT 3
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: IN
43004: NOT
43005: AND
43006: IFFALSE 43050
// begin ComMoveXY ( unit , _x , _y ) ;
43008: LD_VAR 0 1
43012: PPUSH
43013: LD_VAR 0 5
43017: PPUSH
43018: LD_VAR 0 7
43022: PPUSH
43023: CALL_OW 111
// result := [ _x , _y ] ;
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: LD_VAR 0 5
43036: PUSH
43037: LD_VAR 0 7
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: ST_TO_ADDR
// exit ;
43046: POP
43047: POP
43048: GO 43054
// end ; end ;
43050: GO 42894
43052: POP
43053: POP
// end ;
43054: LD_VAR 0 3
43058: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43059: LD_INT 0
43061: PPUSH
43062: PPUSH
43063: PPUSH
// result := 0 ;
43064: LD_ADDR_VAR 0 3
43068: PUSH
43069: LD_INT 0
43071: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43072: LD_VAR 0 1
43076: PUSH
43077: LD_INT 0
43079: LESS
43080: PUSH
43081: LD_VAR 0 1
43085: PUSH
43086: LD_INT 8
43088: GREATER
43089: OR
43090: PUSH
43091: LD_VAR 0 2
43095: PUSH
43096: LD_INT 0
43098: LESS
43099: OR
43100: PUSH
43101: LD_VAR 0 2
43105: PUSH
43106: LD_INT 8
43108: GREATER
43109: OR
43110: IFFALSE 43114
// exit ;
43112: GO 43189
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43114: LD_ADDR_VAR 0 4
43118: PUSH
43119: LD_INT 22
43121: PUSH
43122: LD_VAR 0 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PPUSH
43131: CALL_OW 69
43135: PUSH
43136: FOR_IN
43137: IFFALSE 43187
// begin un := UnitShoot ( i ) ;
43139: LD_ADDR_VAR 0 5
43143: PUSH
43144: LD_VAR 0 4
43148: PPUSH
43149: CALL_OW 504
43153: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43154: LD_VAR 0 5
43158: PPUSH
43159: CALL_OW 255
43163: PUSH
43164: LD_VAR 0 1
43168: EQUAL
43169: IFFALSE 43185
// begin result := un ;
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_VAR 0 5
43180: ST_TO_ADDR
// exit ;
43181: POP
43182: POP
43183: GO 43189
// end ; end ;
43185: GO 43136
43187: POP
43188: POP
// end ;
43189: LD_VAR 0 3
43193: RET
// export function GetCargoBay ( units ) ; begin
43194: LD_INT 0
43196: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43197: LD_ADDR_VAR 0 2
43201: PUSH
43202: LD_VAR 0 1
43206: PPUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 34
43212: PUSH
43213: LD_INT 12
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 34
43222: PUSH
43223: LD_INT 51
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 34
43232: PUSH
43233: LD_INT 32
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 34
43242: PUSH
43243: LD_INT 89
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: PPUSH
43257: CALL_OW 72
43261: ST_TO_ADDR
// end ;
43262: LD_VAR 0 2
43266: RET
// export function Negate ( value ) ; begin
43267: LD_INT 0
43269: PPUSH
// result := not value ;
43270: LD_ADDR_VAR 0 2
43274: PUSH
43275: LD_VAR 0 1
43279: NOT
43280: ST_TO_ADDR
// end ;
43281: LD_VAR 0 2
43285: RET
// export function Inc ( value ) ; begin
43286: LD_INT 0
43288: PPUSH
// result := value + 1 ;
43289: LD_ADDR_VAR 0 2
43293: PUSH
43294: LD_VAR 0 1
43298: PUSH
43299: LD_INT 1
43301: PLUS
43302: ST_TO_ADDR
// end ;
43303: LD_VAR 0 2
43307: RET
// export function Dec ( value ) ; begin
43308: LD_INT 0
43310: PPUSH
// result := value - 1 ;
43311: LD_ADDR_VAR 0 2
43315: PUSH
43316: LD_VAR 0 1
43320: PUSH
43321: LD_INT 1
43323: MINUS
43324: ST_TO_ADDR
// end ;
43325: LD_VAR 0 2
43329: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43330: LD_INT 0
43332: PPUSH
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43340: LD_VAR 0 1
43344: PPUSH
43345: LD_VAR 0 2
43349: PPUSH
43350: CALL_OW 488
43354: NOT
43355: PUSH
43356: LD_VAR 0 3
43360: PPUSH
43361: LD_VAR 0 4
43365: PPUSH
43366: CALL_OW 488
43370: NOT
43371: OR
43372: IFFALSE 43385
// begin result := - 1 ;
43374: LD_ADDR_VAR 0 5
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: ST_TO_ADDR
// exit ;
43383: GO 43620
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43385: LD_ADDR_VAR 0 12
43389: PUSH
43390: LD_VAR 0 1
43394: PPUSH
43395: LD_VAR 0 2
43399: PPUSH
43400: LD_VAR 0 3
43404: PPUSH
43405: LD_VAR 0 4
43409: PPUSH
43410: CALL 42470 0 4
43414: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43415: LD_ADDR_VAR 0 11
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: LD_VAR 0 2
43429: PPUSH
43430: LD_VAR 0 12
43434: PUSH
43435: LD_INT 1
43437: ARRAY
43438: PPUSH
43439: LD_VAR 0 12
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: PPUSH
43448: CALL_OW 298
43452: ST_TO_ADDR
// distance := 9999 ;
43453: LD_ADDR_VAR 0 10
43457: PUSH
43458: LD_INT 9999
43460: ST_TO_ADDR
// for i := 0 to 5 do
43461: LD_ADDR_VAR 0 6
43465: PUSH
43466: DOUBLE
43467: LD_INT 0
43469: DEC
43470: ST_TO_ADDR
43471: LD_INT 5
43473: PUSH
43474: FOR_TO
43475: IFFALSE 43618
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43477: LD_ADDR_VAR 0 7
43481: PUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: LD_VAR 0 6
43491: PPUSH
43492: LD_VAR 0 11
43496: PPUSH
43497: CALL_OW 272
43501: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43502: LD_ADDR_VAR 0 8
43506: PUSH
43507: LD_VAR 0 2
43511: PPUSH
43512: LD_VAR 0 6
43516: PPUSH
43517: LD_VAR 0 11
43521: PPUSH
43522: CALL_OW 273
43526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43527: LD_VAR 0 7
43531: PPUSH
43532: LD_VAR 0 8
43536: PPUSH
43537: CALL_OW 488
43541: NOT
43542: IFFALSE 43546
// continue ;
43544: GO 43474
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43546: LD_ADDR_VAR 0 9
43550: PUSH
43551: LD_VAR 0 12
43555: PUSH
43556: LD_INT 1
43558: ARRAY
43559: PPUSH
43560: LD_VAR 0 12
43564: PUSH
43565: LD_INT 2
43567: ARRAY
43568: PPUSH
43569: LD_VAR 0 7
43573: PPUSH
43574: LD_VAR 0 8
43578: PPUSH
43579: CALL_OW 298
43583: ST_TO_ADDR
// if tmp < distance then
43584: LD_VAR 0 9
43588: PUSH
43589: LD_VAR 0 10
43593: LESS
43594: IFFALSE 43616
// begin result := i ;
43596: LD_ADDR_VAR 0 5
43600: PUSH
43601: LD_VAR 0 6
43605: ST_TO_ADDR
// distance := tmp ;
43606: LD_ADDR_VAR 0 10
43610: PUSH
43611: LD_VAR 0 9
43615: ST_TO_ADDR
// end ; end ;
43616: GO 43474
43618: POP
43619: POP
// end ;
43620: LD_VAR 0 5
43624: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43625: LD_INT 0
43627: PPUSH
43628: PPUSH
// if not driver or not IsInUnit ( driver ) then
43629: LD_VAR 0 1
43633: NOT
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 310
43644: NOT
43645: OR
43646: IFFALSE 43650
// exit ;
43648: GO 43740
// vehicle := IsInUnit ( driver ) ;
43650: LD_ADDR_VAR 0 3
43654: PUSH
43655: LD_VAR 0 1
43659: PPUSH
43660: CALL_OW 310
43664: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43665: LD_VAR 0 1
43669: PPUSH
43670: LD_STRING \
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: PUSH
43700: LD_STRING E
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_VAR 0 3
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PPUSH
43736: CALL_OW 446
// end ;
43740: LD_VAR 0 2
43744: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43745: LD_INT 0
43747: PPUSH
43748: PPUSH
// if not driver or not IsInUnit ( driver ) then
43749: LD_VAR 0 1
43753: NOT
43754: PUSH
43755: LD_VAR 0 1
43759: PPUSH
43760: CALL_OW 310
43764: NOT
43765: OR
43766: IFFALSE 43770
// exit ;
43768: GO 43860
// vehicle := IsInUnit ( driver ) ;
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: CALL_OW 310
43784: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43785: LD_VAR 0 1
43789: PPUSH
43790: LD_STRING \
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: PUSH
43820: LD_STRING E
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_VAR 0 3
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PPUSH
43856: CALL_OW 447
// end ;
43860: LD_VAR 0 2
43864: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43865: LD_INT 0
43867: PPUSH
43868: PPUSH
43869: PPUSH
// tmp := [ ] ;
43870: LD_ADDR_VAR 0 5
43874: PUSH
43875: EMPTY
43876: ST_TO_ADDR
// for i in units do
43877: LD_ADDR_VAR 0 4
43881: PUSH
43882: LD_VAR 0 1
43886: PUSH
43887: FOR_IN
43888: IFFALSE 43926
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43890: LD_ADDR_VAR 0 5
43894: PUSH
43895: LD_VAR 0 5
43899: PPUSH
43900: LD_VAR 0 5
43904: PUSH
43905: LD_INT 1
43907: PLUS
43908: PPUSH
43909: LD_VAR 0 4
43913: PPUSH
43914: CALL_OW 256
43918: PPUSH
43919: CALL_OW 2
43923: ST_TO_ADDR
43924: GO 43887
43926: POP
43927: POP
// if not tmp then
43928: LD_VAR 0 5
43932: NOT
43933: IFFALSE 43937
// exit ;
43935: GO 43985
// if asc then
43937: LD_VAR 0 2
43941: IFFALSE 43965
// result := SortListByListAsc ( units , tmp ) else
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: LD_VAR 0 5
43957: PPUSH
43958: CALL_OW 76
43962: ST_TO_ADDR
43963: GO 43985
// result := SortListByListDesc ( units , tmp ) ;
43965: LD_ADDR_VAR 0 3
43969: PUSH
43970: LD_VAR 0 1
43974: PPUSH
43975: LD_VAR 0 5
43979: PPUSH
43980: CALL_OW 77
43984: ST_TO_ADDR
// end ;
43985: LD_VAR 0 3
43989: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43990: LD_INT 0
43992: PPUSH
43993: PPUSH
// task := GetTaskList ( mech ) ;
43994: LD_ADDR_VAR 0 4
43998: PUSH
43999: LD_VAR 0 1
44003: PPUSH
44004: CALL_OW 437
44008: ST_TO_ADDR
// if not task then
44009: LD_VAR 0 4
44013: NOT
44014: IFFALSE 44018
// exit ;
44016: GO 44060
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44018: LD_ADDR_VAR 0 3
44022: PUSH
44023: LD_VAR 0 4
44027: PUSH
44028: LD_INT 1
44030: ARRAY
44031: PUSH
44032: LD_INT 1
44034: ARRAY
44035: PUSH
44036: LD_STRING r
44038: EQUAL
44039: PUSH
44040: LD_VAR 0 4
44044: PUSH
44045: LD_INT 1
44047: ARRAY
44048: PUSH
44049: LD_INT 4
44051: ARRAY
44052: PUSH
44053: LD_VAR 0 2
44057: EQUAL
44058: AND
44059: ST_TO_ADDR
// end ;
44060: LD_VAR 0 3
44064: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44065: LD_INT 0
44067: PPUSH
// SetDir ( unit , d ) ;
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_VAR 0 4
44077: PPUSH
44078: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44082: LD_VAR 0 1
44086: PPUSH
44087: LD_VAR 0 2
44091: PPUSH
44092: LD_VAR 0 3
44096: PPUSH
44097: LD_VAR 0 5
44101: PPUSH
44102: CALL_OW 48
// end ;
44106: LD_VAR 0 6
44110: RET
// export function ToNaturalNumber ( number ) ; begin
44111: LD_INT 0
44113: PPUSH
// result := number div 1 ;
44114: LD_ADDR_VAR 0 2
44118: PUSH
44119: LD_VAR 0 1
44123: PUSH
44124: LD_INT 1
44126: DIV
44127: ST_TO_ADDR
// if number < 0 then
44128: LD_VAR 0 1
44132: PUSH
44133: LD_INT 0
44135: LESS
44136: IFFALSE 44146
// result := 0 ;
44138: LD_ADDR_VAR 0 2
44142: PUSH
44143: LD_INT 0
44145: ST_TO_ADDR
// end ;
44146: LD_VAR 0 2
44150: RET
// export function SortByClass ( units , class ) ; var un ; begin
44151: LD_INT 0
44153: PPUSH
44154: PPUSH
// if not units or not class then
44155: LD_VAR 0 1
44159: NOT
44160: PUSH
44161: LD_VAR 0 2
44165: NOT
44166: OR
44167: IFFALSE 44171
// exit ;
44169: GO 44266
// result := [ ] ;
44171: LD_ADDR_VAR 0 3
44175: PUSH
44176: EMPTY
44177: ST_TO_ADDR
// for un in units do
44178: LD_ADDR_VAR 0 4
44182: PUSH
44183: LD_VAR 0 1
44187: PUSH
44188: FOR_IN
44189: IFFALSE 44264
// if GetClass ( un ) = class then
44191: LD_VAR 0 4
44195: PPUSH
44196: CALL_OW 257
44200: PUSH
44201: LD_VAR 0 2
44205: EQUAL
44206: IFFALSE 44233
// result := Insert ( result , 1 , un ) else
44208: LD_ADDR_VAR 0 3
44212: PUSH
44213: LD_VAR 0 3
44217: PPUSH
44218: LD_INT 1
44220: PPUSH
44221: LD_VAR 0 4
44225: PPUSH
44226: CALL_OW 2
44230: ST_TO_ADDR
44231: GO 44262
// result := Replace ( result , result + 1 , un ) ;
44233: LD_ADDR_VAR 0 3
44237: PUSH
44238: LD_VAR 0 3
44242: PPUSH
44243: LD_VAR 0 3
44247: PUSH
44248: LD_INT 1
44250: PLUS
44251: PPUSH
44252: LD_VAR 0 4
44256: PPUSH
44257: CALL_OW 1
44261: ST_TO_ADDR
44262: GO 44188
44264: POP
44265: POP
// end ;
44266: LD_VAR 0 3
44270: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44271: LD_INT 0
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
// result := [ ] ;
44280: LD_ADDR_VAR 0 4
44284: PUSH
44285: EMPTY
44286: ST_TO_ADDR
// if x - r < 0 then
44287: LD_VAR 0 1
44291: PUSH
44292: LD_VAR 0 3
44296: MINUS
44297: PUSH
44298: LD_INT 0
44300: LESS
44301: IFFALSE 44313
// min_x := 0 else
44303: LD_ADDR_VAR 0 8
44307: PUSH
44308: LD_INT 0
44310: ST_TO_ADDR
44311: GO 44329
// min_x := x - r ;
44313: LD_ADDR_VAR 0 8
44317: PUSH
44318: LD_VAR 0 1
44322: PUSH
44323: LD_VAR 0 3
44327: MINUS
44328: ST_TO_ADDR
// if y - r < 0 then
44329: LD_VAR 0 2
44333: PUSH
44334: LD_VAR 0 3
44338: MINUS
44339: PUSH
44340: LD_INT 0
44342: LESS
44343: IFFALSE 44355
// min_y := 0 else
44345: LD_ADDR_VAR 0 7
44349: PUSH
44350: LD_INT 0
44352: ST_TO_ADDR
44353: GO 44371
// min_y := y - r ;
44355: LD_ADDR_VAR 0 7
44359: PUSH
44360: LD_VAR 0 2
44364: PUSH
44365: LD_VAR 0 3
44369: MINUS
44370: ST_TO_ADDR
// max_x := x + r ;
44371: LD_ADDR_VAR 0 9
44375: PUSH
44376: LD_VAR 0 1
44380: PUSH
44381: LD_VAR 0 3
44385: PLUS
44386: ST_TO_ADDR
// max_y := y + r ;
44387: LD_ADDR_VAR 0 10
44391: PUSH
44392: LD_VAR 0 2
44396: PUSH
44397: LD_VAR 0 3
44401: PLUS
44402: ST_TO_ADDR
// for _x = min_x to max_x do
44403: LD_ADDR_VAR 0 5
44407: PUSH
44408: DOUBLE
44409: LD_VAR 0 8
44413: DEC
44414: ST_TO_ADDR
44415: LD_VAR 0 9
44419: PUSH
44420: FOR_TO
44421: IFFALSE 44522
// for _y = min_y to max_y do
44423: LD_ADDR_VAR 0 6
44427: PUSH
44428: DOUBLE
44429: LD_VAR 0 7
44433: DEC
44434: ST_TO_ADDR
44435: LD_VAR 0 10
44439: PUSH
44440: FOR_TO
44441: IFFALSE 44518
// begin if not ValidHex ( _x , _y ) then
44443: LD_VAR 0 5
44447: PPUSH
44448: LD_VAR 0 6
44452: PPUSH
44453: CALL_OW 488
44457: NOT
44458: IFFALSE 44462
// continue ;
44460: GO 44440
// if GetResourceTypeXY ( _x , _y ) then
44462: LD_VAR 0 5
44466: PPUSH
44467: LD_VAR 0 6
44471: PPUSH
44472: CALL_OW 283
44476: IFFALSE 44516
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44478: LD_ADDR_VAR 0 4
44482: PUSH
44483: LD_VAR 0 4
44487: PPUSH
44488: LD_VAR 0 4
44492: PUSH
44493: LD_INT 1
44495: PLUS
44496: PPUSH
44497: LD_VAR 0 5
44501: PUSH
44502: LD_VAR 0 6
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PPUSH
44511: CALL_OW 1
44515: ST_TO_ADDR
// end ;
44516: GO 44440
44518: POP
44519: POP
44520: GO 44420
44522: POP
44523: POP
// end ;
44524: LD_VAR 0 4
44528: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44529: LD_INT 0
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
// if not units then
44539: LD_VAR 0 1
44543: NOT
44544: IFFALSE 44548
// exit ;
44546: GO 45072
// result := UnitFilter ( units , [ f_ok ] ) ;
44548: LD_ADDR_VAR 0 3
44552: PUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: LD_INT 50
44560: PUSH
44561: EMPTY
44562: LIST
44563: PPUSH
44564: CALL_OW 72
44568: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44569: LD_ADDR_VAR 0 8
44573: PUSH
44574: LD_VAR 0 1
44578: PUSH
44579: LD_INT 1
44581: ARRAY
44582: PPUSH
44583: CALL_OW 255
44587: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44588: LD_ADDR_VAR 0 10
44592: PUSH
44593: LD_INT 29
44595: PUSH
44596: LD_INT 91
44598: PUSH
44599: LD_INT 49
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: ST_TO_ADDR
// if not result then
44607: LD_VAR 0 3
44611: NOT
44612: IFFALSE 44616
// exit ;
44614: GO 45072
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44616: LD_ADDR_VAR 0 5
44620: PUSH
44621: LD_INT 81
44623: PUSH
44624: LD_VAR 0 8
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PPUSH
44633: CALL_OW 69
44637: ST_TO_ADDR
// for i in result do
44638: LD_ADDR_VAR 0 4
44642: PUSH
44643: LD_VAR 0 3
44647: PUSH
44648: FOR_IN
44649: IFFALSE 45070
// begin tag := GetTag ( i ) + 1 ;
44651: LD_ADDR_VAR 0 9
44655: PUSH
44656: LD_VAR 0 4
44660: PPUSH
44661: CALL_OW 110
44665: PUSH
44666: LD_INT 1
44668: PLUS
44669: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44670: LD_ADDR_VAR 0 7
44674: PUSH
44675: LD_VAR 0 4
44679: PPUSH
44680: CALL_OW 250
44684: PPUSH
44685: LD_VAR 0 4
44689: PPUSH
44690: CALL_OW 251
44694: PPUSH
44695: LD_INT 6
44697: PPUSH
44698: CALL 44271 0 3
44702: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44703: LD_VAR 0 4
44707: PPUSH
44708: CALL_OW 247
44712: PUSH
44713: LD_INT 2
44715: EQUAL
44716: PUSH
44717: LD_VAR 0 7
44721: AND
44722: PUSH
44723: LD_VAR 0 4
44727: PPUSH
44728: CALL_OW 264
44732: PUSH
44733: LD_VAR 0 10
44737: IN
44738: NOT
44739: AND
44740: IFFALSE 44779
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44742: LD_VAR 0 4
44746: PPUSH
44747: LD_VAR 0 7
44751: PUSH
44752: LD_INT 1
44754: ARRAY
44755: PUSH
44756: LD_INT 1
44758: ARRAY
44759: PPUSH
44760: LD_VAR 0 7
44764: PUSH
44765: LD_INT 1
44767: ARRAY
44768: PUSH
44769: LD_INT 2
44771: ARRAY
44772: PPUSH
44773: CALL_OW 116
44777: GO 45068
// if path > tag then
44779: LD_VAR 0 2
44783: PUSH
44784: LD_VAR 0 9
44788: GREATER
44789: IFFALSE 44997
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44791: LD_ADDR_VAR 0 6
44795: PUSH
44796: LD_VAR 0 5
44800: PPUSH
44801: LD_INT 91
44803: PUSH
44804: LD_VAR 0 4
44808: PUSH
44809: LD_INT 8
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 72
44821: ST_TO_ADDR
// if nearEnemy then
44822: LD_VAR 0 6
44826: IFFALSE 44895
// begin if GetWeapon ( i ) = ru_time_lapser then
44828: LD_VAR 0 4
44832: PPUSH
44833: CALL_OW 264
44837: PUSH
44838: LD_INT 49
44840: EQUAL
44841: IFFALSE 44869
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44843: LD_VAR 0 4
44847: PPUSH
44848: LD_VAR 0 6
44852: PPUSH
44853: LD_VAR 0 4
44857: PPUSH
44858: CALL_OW 74
44862: PPUSH
44863: CALL_OW 112
44867: GO 44893
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44869: LD_VAR 0 4
44873: PPUSH
44874: LD_VAR 0 6
44878: PPUSH
44879: LD_VAR 0 4
44883: PPUSH
44884: CALL_OW 74
44888: PPUSH
44889: CALL_OW 115
// end else
44893: GO 44995
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44895: LD_VAR 0 4
44899: PPUSH
44900: LD_VAR 0 2
44904: PUSH
44905: LD_VAR 0 9
44909: ARRAY
44910: PUSH
44911: LD_INT 1
44913: ARRAY
44914: PPUSH
44915: LD_VAR 0 2
44919: PUSH
44920: LD_VAR 0 9
44924: ARRAY
44925: PUSH
44926: LD_INT 2
44928: ARRAY
44929: PPUSH
44930: CALL_OW 297
44934: PUSH
44935: LD_INT 6
44937: GREATER
44938: IFFALSE 44981
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44940: LD_VAR 0 4
44944: PPUSH
44945: LD_VAR 0 2
44949: PUSH
44950: LD_VAR 0 9
44954: ARRAY
44955: PUSH
44956: LD_INT 1
44958: ARRAY
44959: PPUSH
44960: LD_VAR 0 2
44964: PUSH
44965: LD_VAR 0 9
44969: ARRAY
44970: PUSH
44971: LD_INT 2
44973: ARRAY
44974: PPUSH
44975: CALL_OW 114
44979: GO 44995
// SetTag ( i , tag ) ;
44981: LD_VAR 0 4
44985: PPUSH
44986: LD_VAR 0 9
44990: PPUSH
44991: CALL_OW 109
// end else
44995: GO 45068
// if enemy then
44997: LD_VAR 0 5
45001: IFFALSE 45068
// begin if GetWeapon ( i ) = ru_time_lapser then
45003: LD_VAR 0 4
45007: PPUSH
45008: CALL_OW 264
45012: PUSH
45013: LD_INT 49
45015: EQUAL
45016: IFFALSE 45044
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45018: LD_VAR 0 4
45022: PPUSH
45023: LD_VAR 0 5
45027: PPUSH
45028: LD_VAR 0 4
45032: PPUSH
45033: CALL_OW 74
45037: PPUSH
45038: CALL_OW 112
45042: GO 45068
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45044: LD_VAR 0 4
45048: PPUSH
45049: LD_VAR 0 5
45053: PPUSH
45054: LD_VAR 0 4
45058: PPUSH
45059: CALL_OW 74
45063: PPUSH
45064: CALL_OW 115
// end ; end ;
45068: GO 44648
45070: POP
45071: POP
// end ;
45072: LD_VAR 0 3
45076: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45077: LD_INT 0
45079: PPUSH
45080: PPUSH
45081: PPUSH
// if not unit or IsInUnit ( unit ) then
45082: LD_VAR 0 1
45086: NOT
45087: PUSH
45088: LD_VAR 0 1
45092: PPUSH
45093: CALL_OW 310
45097: OR
45098: IFFALSE 45102
// exit ;
45100: GO 45193
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45102: LD_ADDR_VAR 0 4
45106: PUSH
45107: LD_VAR 0 1
45111: PPUSH
45112: CALL_OW 250
45116: PPUSH
45117: LD_VAR 0 2
45121: PPUSH
45122: LD_INT 1
45124: PPUSH
45125: CALL_OW 272
45129: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45130: LD_ADDR_VAR 0 5
45134: PUSH
45135: LD_VAR 0 1
45139: PPUSH
45140: CALL_OW 251
45144: PPUSH
45145: LD_VAR 0 2
45149: PPUSH
45150: LD_INT 1
45152: PPUSH
45153: CALL_OW 273
45157: ST_TO_ADDR
// if ValidHex ( x , y ) then
45158: LD_VAR 0 4
45162: PPUSH
45163: LD_VAR 0 5
45167: PPUSH
45168: CALL_OW 488
45172: IFFALSE 45193
// ComTurnXY ( unit , x , y ) ;
45174: LD_VAR 0 1
45178: PPUSH
45179: LD_VAR 0 4
45183: PPUSH
45184: LD_VAR 0 5
45188: PPUSH
45189: CALL_OW 118
// end ;
45193: LD_VAR 0 3
45197: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45198: LD_INT 0
45200: PPUSH
45201: PPUSH
// result := false ;
45202: LD_ADDR_VAR 0 3
45206: PUSH
45207: LD_INT 0
45209: ST_TO_ADDR
// if not units then
45210: LD_VAR 0 2
45214: NOT
45215: IFFALSE 45219
// exit ;
45217: GO 45264
// for i in units do
45219: LD_ADDR_VAR 0 4
45223: PUSH
45224: LD_VAR 0 2
45228: PUSH
45229: FOR_IN
45230: IFFALSE 45262
// if See ( side , i ) then
45232: LD_VAR 0 1
45236: PPUSH
45237: LD_VAR 0 4
45241: PPUSH
45242: CALL_OW 292
45246: IFFALSE 45260
// begin result := true ;
45248: LD_ADDR_VAR 0 3
45252: PUSH
45253: LD_INT 1
45255: ST_TO_ADDR
// exit ;
45256: POP
45257: POP
45258: GO 45264
// end ;
45260: GO 45229
45262: POP
45263: POP
// end ;
45264: LD_VAR 0 3
45268: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45269: LD_INT 0
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
// if not unit or not points then
45275: LD_VAR 0 1
45279: NOT
45280: PUSH
45281: LD_VAR 0 2
45285: NOT
45286: OR
45287: IFFALSE 45291
// exit ;
45289: GO 45381
// dist := 99999 ;
45291: LD_ADDR_VAR 0 5
45295: PUSH
45296: LD_INT 99999
45298: ST_TO_ADDR
// for i in points do
45299: LD_ADDR_VAR 0 4
45303: PUSH
45304: LD_VAR 0 2
45308: PUSH
45309: FOR_IN
45310: IFFALSE 45379
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45312: LD_ADDR_VAR 0 6
45316: PUSH
45317: LD_VAR 0 1
45321: PPUSH
45322: LD_VAR 0 4
45326: PUSH
45327: LD_INT 1
45329: ARRAY
45330: PPUSH
45331: LD_VAR 0 4
45335: PUSH
45336: LD_INT 2
45338: ARRAY
45339: PPUSH
45340: CALL_OW 297
45344: ST_TO_ADDR
// if tmpDist < dist then
45345: LD_VAR 0 6
45349: PUSH
45350: LD_VAR 0 5
45354: LESS
45355: IFFALSE 45377
// begin result := i ;
45357: LD_ADDR_VAR 0 3
45361: PUSH
45362: LD_VAR 0 4
45366: ST_TO_ADDR
// dist := tmpDist ;
45367: LD_ADDR_VAR 0 5
45371: PUSH
45372: LD_VAR 0 6
45376: ST_TO_ADDR
// end ; end ;
45377: GO 45309
45379: POP
45380: POP
// end ;
45381: LD_VAR 0 3
45385: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45386: LD_INT 0
45388: PPUSH
// uc_side := side ;
45389: LD_ADDR_OWVAR 20
45393: PUSH
45394: LD_VAR 0 1
45398: ST_TO_ADDR
// uc_nation := 3 ;
45399: LD_ADDR_OWVAR 21
45403: PUSH
45404: LD_INT 3
45406: ST_TO_ADDR
// vc_chassis := 25 ;
45407: LD_ADDR_OWVAR 37
45411: PUSH
45412: LD_INT 25
45414: ST_TO_ADDR
// vc_engine := engine_siberite ;
45415: LD_ADDR_OWVAR 39
45419: PUSH
45420: LD_INT 3
45422: ST_TO_ADDR
// vc_control := control_computer ;
45423: LD_ADDR_OWVAR 38
45427: PUSH
45428: LD_INT 3
45430: ST_TO_ADDR
// vc_weapon := 59 ;
45431: LD_ADDR_OWVAR 40
45435: PUSH
45436: LD_INT 59
45438: ST_TO_ADDR
// result := CreateVehicle ;
45439: LD_ADDR_VAR 0 5
45443: PUSH
45444: CALL_OW 45
45448: ST_TO_ADDR
// SetDir ( result , d ) ;
45449: LD_VAR 0 5
45453: PPUSH
45454: LD_VAR 0 4
45458: PPUSH
45459: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45463: LD_VAR 0 5
45467: PPUSH
45468: LD_VAR 0 2
45472: PPUSH
45473: LD_VAR 0 3
45477: PPUSH
45478: LD_INT 0
45480: PPUSH
45481: CALL_OW 48
// end ;
45485: LD_VAR 0 5
45489: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45490: LD_INT 0
45492: PPUSH
45493: PPUSH
45494: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45495: LD_ADDR_VAR 0 2
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45518: LD_VAR 0 1
45522: NOT
45523: PUSH
45524: LD_VAR 0 1
45528: PPUSH
45529: CALL_OW 264
45533: PUSH
45534: LD_INT 12
45536: PUSH
45537: LD_INT 51
45539: PUSH
45540: LD_INT 32
45542: PUSH
45543: LD_INT 89
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: IN
45552: NOT
45553: OR
45554: IFFALSE 45558
// exit ;
45556: GO 45656
// for i := 1 to 3 do
45558: LD_ADDR_VAR 0 3
45562: PUSH
45563: DOUBLE
45564: LD_INT 1
45566: DEC
45567: ST_TO_ADDR
45568: LD_INT 3
45570: PUSH
45571: FOR_TO
45572: IFFALSE 45654
// begin tmp := GetCargo ( cargo , i ) ;
45574: LD_ADDR_VAR 0 4
45578: PUSH
45579: LD_VAR 0 1
45583: PPUSH
45584: LD_VAR 0 3
45588: PPUSH
45589: CALL_OW 289
45593: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45594: LD_ADDR_VAR 0 2
45598: PUSH
45599: LD_VAR 0 2
45603: PPUSH
45604: LD_VAR 0 3
45608: PPUSH
45609: LD_VAR 0 4
45613: PPUSH
45614: CALL_OW 1
45618: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45619: LD_ADDR_VAR 0 2
45623: PUSH
45624: LD_VAR 0 2
45628: PPUSH
45629: LD_INT 4
45631: PPUSH
45632: LD_VAR 0 2
45636: PUSH
45637: LD_INT 4
45639: ARRAY
45640: PUSH
45641: LD_VAR 0 4
45645: PLUS
45646: PPUSH
45647: CALL_OW 1
45651: ST_TO_ADDR
// end ;
45652: GO 45571
45654: POP
45655: POP
// end ;
45656: LD_VAR 0 2
45660: RET
// export function Length ( array ) ; begin
45661: LD_INT 0
45663: PPUSH
// result := array + 0 ;
45664: LD_ADDR_VAR 0 2
45668: PUSH
45669: LD_VAR 0 1
45673: PUSH
45674: LD_INT 0
45676: PLUS
45677: ST_TO_ADDR
// end ;
45678: LD_VAR 0 2
45682: RET
// export function PrepareArray ( array ) ; begin
45683: LD_INT 0
45685: PPUSH
// result := array diff 0 ;
45686: LD_ADDR_VAR 0 2
45690: PUSH
45691: LD_VAR 0 1
45695: PUSH
45696: LD_INT 0
45698: DIFF
45699: ST_TO_ADDR
// if not result [ 1 ] then
45700: LD_VAR 0 2
45704: PUSH
45705: LD_INT 1
45707: ARRAY
45708: NOT
45709: IFFALSE 45729
// result := Delete ( result , 1 ) ;
45711: LD_ADDR_VAR 0 2
45715: PUSH
45716: LD_VAR 0 2
45720: PPUSH
45721: LD_INT 1
45723: PPUSH
45724: CALL_OW 3
45728: ST_TO_ADDR
// end ;
45729: LD_VAR 0 2
45733: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45734: LD_INT 0
45736: PPUSH
45737: PPUSH
45738: PPUSH
45739: PPUSH
// sibRocketRange := 25 ;
45740: LD_ADDR_VAR 0 6
45744: PUSH
45745: LD_INT 25
45747: ST_TO_ADDR
// result := false ;
45748: LD_ADDR_VAR 0 4
45752: PUSH
45753: LD_INT 0
45755: ST_TO_ADDR
// for i := 0 to 5 do
45756: LD_ADDR_VAR 0 5
45760: PUSH
45761: DOUBLE
45762: LD_INT 0
45764: DEC
45765: ST_TO_ADDR
45766: LD_INT 5
45768: PUSH
45769: FOR_TO
45770: IFFALSE 45837
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45772: LD_VAR 0 1
45776: PPUSH
45777: LD_VAR 0 5
45781: PPUSH
45782: LD_VAR 0 6
45786: PPUSH
45787: CALL_OW 272
45791: PPUSH
45792: LD_VAR 0 2
45796: PPUSH
45797: LD_VAR 0 5
45801: PPUSH
45802: LD_VAR 0 6
45806: PPUSH
45807: CALL_OW 273
45811: PPUSH
45812: LD_VAR 0 3
45816: PPUSH
45817: CALL_OW 309
45821: IFFALSE 45835
// begin result := true ;
45823: LD_ADDR_VAR 0 4
45827: PUSH
45828: LD_INT 1
45830: ST_TO_ADDR
// exit ;
45831: POP
45832: POP
45833: GO 45839
// end ;
45835: GO 45769
45837: POP
45838: POP
// end ;
45839: LD_VAR 0 4
45843: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45844: LD_INT 0
45846: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45847: LD_VAR 0 1
45851: PPUSH
45852: LD_VAR 0 2
45856: PPUSH
45857: LD_INT 0
45859: PPUSH
45860: LD_INT 0
45862: PPUSH
45863: LD_INT 1
45865: PPUSH
45866: LD_INT 0
45868: PPUSH
45869: CALL_OW 587
// end ; end_of_file end_of_file
45873: LD_VAR 0 3
45877: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45878: LD_VAR 0 1
45882: PPUSH
45883: LD_VAR 0 2
45887: PPUSH
45888: LD_VAR 0 3
45892: PPUSH
45893: LD_VAR 0 4
45897: PPUSH
45898: LD_VAR 0 5
45902: PPUSH
45903: LD_VAR 0 6
45907: PPUSH
45908: CALL 46092 0 6
// end ;
45912: PPOPN 6
45914: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
45915: LD_INT 0
45917: PPUSH
// begin if not units then
45918: LD_VAR 0 1
45922: NOT
45923: IFFALSE 45927
// exit ;
45925: GO 45927
// end ;
45927: PPOPN 7
45929: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
45930: CALL 45996 0 0
// end ; end_of_file
45934: PPOPN 1
45936: END
// export globalGameSaveCounter ; every 0 0$1 do
45937: GO 45939
45939: DISABLE
// begin enable ;
45940: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45941: LD_STRING updateTimer(
45943: PUSH
45944: LD_OWVAR 1
45948: STR
45949: PUSH
45950: LD_STRING );
45952: STR
45953: PPUSH
45954: CALL_OW 559
// end ;
45958: END
// every 0 0$1 do
45959: GO 45961
45961: DISABLE
// begin globalGameSaveCounter := 0 ;
45962: LD_ADDR_EXP 27
45966: PUSH
45967: LD_INT 0
45969: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
45970: LD_STRING setGameSaveCounter(0)
45972: PPUSH
45973: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
45977: LD_STRING initStreamRollete();
45979: PPUSH
45980: CALL_OW 559
// InitStreamMode ;
45984: CALL 47310 0 0
// DefineStreamItems ( false ) ;
45988: LD_INT 0
45990: PPUSH
45991: CALL 47774 0 1
// end ;
45995: END
// export function SOS_MapStart ( ) ; begin
45996: LD_INT 0
45998: PPUSH
// if streamModeActive then
45999: LD_EXP 28
46003: IFFALSE 46012
// DefineStreamItems ( true ) ;
46005: LD_INT 1
46007: PPUSH
46008: CALL 47774 0 1
// UpdateLuaVariables ( ) ;
46012: CALL 46029 0 0
// UpdateFactoryWaypoints ( ) ;
46016: CALL 60635 0 0
// UpdateWarehouseGatheringPoints ( ) ;
46020: CALL 60892 0 0
// end ;
46024: LD_VAR 0 1
46028: RET
// function UpdateLuaVariables ( ) ; begin
46029: LD_INT 0
46031: PPUSH
// if globalGameSaveCounter then
46032: LD_EXP 27
46036: IFFALSE 46070
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
46038: LD_ADDR_EXP 27
46042: PUSH
46043: LD_EXP 27
46047: PPUSH
46048: CALL 43286 0 1
46052: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46053: LD_STRING setGameSaveCounter(
46055: PUSH
46056: LD_EXP 27
46060: STR
46061: PUSH
46062: LD_STRING )
46064: STR
46065: PPUSH
46066: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46070: LD_STRING setGameDifficulty(
46072: PUSH
46073: LD_OWVAR 67
46077: STR
46078: PUSH
46079: LD_STRING )
46081: STR
46082: PPUSH
46083: CALL_OW 559
// end ;
46087: LD_VAR 0 1
46091: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46092: LD_INT 0
46094: PPUSH
// if p2 = stream_mode then
46095: LD_VAR 0 2
46099: PUSH
46100: LD_INT 100
46102: EQUAL
46103: IFFALSE 47106
// begin if not StreamModeActive then
46105: LD_EXP 28
46109: NOT
46110: IFFALSE 46120
// StreamModeActive := true ;
46112: LD_ADDR_EXP 28
46116: PUSH
46117: LD_INT 1
46119: ST_TO_ADDR
// if p3 = 0 then
46120: LD_VAR 0 3
46124: PUSH
46125: LD_INT 0
46127: EQUAL
46128: IFFALSE 46134
// InitStreamMode ;
46130: CALL 47310 0 0
// if p3 = 1 then
46134: LD_VAR 0 3
46138: PUSH
46139: LD_INT 1
46141: EQUAL
46142: IFFALSE 46152
// sRocket := true ;
46144: LD_ADDR_EXP 33
46148: PUSH
46149: LD_INT 1
46151: ST_TO_ADDR
// if p3 = 2 then
46152: LD_VAR 0 3
46156: PUSH
46157: LD_INT 2
46159: EQUAL
46160: IFFALSE 46170
// sSpeed := true ;
46162: LD_ADDR_EXP 32
46166: PUSH
46167: LD_INT 1
46169: ST_TO_ADDR
// if p3 = 3 then
46170: LD_VAR 0 3
46174: PUSH
46175: LD_INT 3
46177: EQUAL
46178: IFFALSE 46188
// sEngine := true ;
46180: LD_ADDR_EXP 34
46184: PUSH
46185: LD_INT 1
46187: ST_TO_ADDR
// if p3 = 4 then
46188: LD_VAR 0 3
46192: PUSH
46193: LD_INT 4
46195: EQUAL
46196: IFFALSE 46206
// sSpec := true ;
46198: LD_ADDR_EXP 31
46202: PUSH
46203: LD_INT 1
46205: ST_TO_ADDR
// if p3 = 5 then
46206: LD_VAR 0 3
46210: PUSH
46211: LD_INT 5
46213: EQUAL
46214: IFFALSE 46224
// sLevel := true ;
46216: LD_ADDR_EXP 35
46220: PUSH
46221: LD_INT 1
46223: ST_TO_ADDR
// if p3 = 6 then
46224: LD_VAR 0 3
46228: PUSH
46229: LD_INT 6
46231: EQUAL
46232: IFFALSE 46242
// sArmoury := true ;
46234: LD_ADDR_EXP 36
46238: PUSH
46239: LD_INT 1
46241: ST_TO_ADDR
// if p3 = 7 then
46242: LD_VAR 0 3
46246: PUSH
46247: LD_INT 7
46249: EQUAL
46250: IFFALSE 46260
// sRadar := true ;
46252: LD_ADDR_EXP 37
46256: PUSH
46257: LD_INT 1
46259: ST_TO_ADDR
// if p3 = 8 then
46260: LD_VAR 0 3
46264: PUSH
46265: LD_INT 8
46267: EQUAL
46268: IFFALSE 46278
// sBunker := true ;
46270: LD_ADDR_EXP 38
46274: PUSH
46275: LD_INT 1
46277: ST_TO_ADDR
// if p3 = 9 then
46278: LD_VAR 0 3
46282: PUSH
46283: LD_INT 9
46285: EQUAL
46286: IFFALSE 46296
// sHack := true ;
46288: LD_ADDR_EXP 39
46292: PUSH
46293: LD_INT 1
46295: ST_TO_ADDR
// if p3 = 10 then
46296: LD_VAR 0 3
46300: PUSH
46301: LD_INT 10
46303: EQUAL
46304: IFFALSE 46314
// sFire := true ;
46306: LD_ADDR_EXP 40
46310: PUSH
46311: LD_INT 1
46313: ST_TO_ADDR
// if p3 = 11 then
46314: LD_VAR 0 3
46318: PUSH
46319: LD_INT 11
46321: EQUAL
46322: IFFALSE 46332
// sRefresh := true ;
46324: LD_ADDR_EXP 41
46328: PUSH
46329: LD_INT 1
46331: ST_TO_ADDR
// if p3 = 12 then
46332: LD_VAR 0 3
46336: PUSH
46337: LD_INT 12
46339: EQUAL
46340: IFFALSE 46350
// sExp := true ;
46342: LD_ADDR_EXP 42
46346: PUSH
46347: LD_INT 1
46349: ST_TO_ADDR
// if p3 = 13 then
46350: LD_VAR 0 3
46354: PUSH
46355: LD_INT 13
46357: EQUAL
46358: IFFALSE 46368
// sDepot := true ;
46360: LD_ADDR_EXP 43
46364: PUSH
46365: LD_INT 1
46367: ST_TO_ADDR
// if p3 = 14 then
46368: LD_VAR 0 3
46372: PUSH
46373: LD_INT 14
46375: EQUAL
46376: IFFALSE 46386
// sFlag := true ;
46378: LD_ADDR_EXP 44
46382: PUSH
46383: LD_INT 1
46385: ST_TO_ADDR
// if p3 = 15 then
46386: LD_VAR 0 3
46390: PUSH
46391: LD_INT 15
46393: EQUAL
46394: IFFALSE 46404
// sKamikadze := true ;
46396: LD_ADDR_EXP 52
46400: PUSH
46401: LD_INT 1
46403: ST_TO_ADDR
// if p3 = 16 then
46404: LD_VAR 0 3
46408: PUSH
46409: LD_INT 16
46411: EQUAL
46412: IFFALSE 46422
// sTroll := true ;
46414: LD_ADDR_EXP 53
46418: PUSH
46419: LD_INT 1
46421: ST_TO_ADDR
// if p3 = 17 then
46422: LD_VAR 0 3
46426: PUSH
46427: LD_INT 17
46429: EQUAL
46430: IFFALSE 46440
// sSlow := true ;
46432: LD_ADDR_EXP 54
46436: PUSH
46437: LD_INT 1
46439: ST_TO_ADDR
// if p3 = 18 then
46440: LD_VAR 0 3
46444: PUSH
46445: LD_INT 18
46447: EQUAL
46448: IFFALSE 46458
// sLack := true ;
46450: LD_ADDR_EXP 55
46454: PUSH
46455: LD_INT 1
46457: ST_TO_ADDR
// if p3 = 19 then
46458: LD_VAR 0 3
46462: PUSH
46463: LD_INT 19
46465: EQUAL
46466: IFFALSE 46476
// sTank := true ;
46468: LD_ADDR_EXP 57
46472: PUSH
46473: LD_INT 1
46475: ST_TO_ADDR
// if p3 = 20 then
46476: LD_VAR 0 3
46480: PUSH
46481: LD_INT 20
46483: EQUAL
46484: IFFALSE 46494
// sRemote := true ;
46486: LD_ADDR_EXP 58
46490: PUSH
46491: LD_INT 1
46493: ST_TO_ADDR
// if p3 = 21 then
46494: LD_VAR 0 3
46498: PUSH
46499: LD_INT 21
46501: EQUAL
46502: IFFALSE 46512
// sPowell := true ;
46504: LD_ADDR_EXP 59
46508: PUSH
46509: LD_INT 1
46511: ST_TO_ADDR
// if p3 = 22 then
46512: LD_VAR 0 3
46516: PUSH
46517: LD_INT 22
46519: EQUAL
46520: IFFALSE 46530
// sTeleport := true ;
46522: LD_ADDR_EXP 62
46526: PUSH
46527: LD_INT 1
46529: ST_TO_ADDR
// if p3 = 23 then
46530: LD_VAR 0 3
46534: PUSH
46535: LD_INT 23
46537: EQUAL
46538: IFFALSE 46548
// sOilTower := true ;
46540: LD_ADDR_EXP 64
46544: PUSH
46545: LD_INT 1
46547: ST_TO_ADDR
// if p3 = 24 then
46548: LD_VAR 0 3
46552: PUSH
46553: LD_INT 24
46555: EQUAL
46556: IFFALSE 46566
// sShovel := true ;
46558: LD_ADDR_EXP 65
46562: PUSH
46563: LD_INT 1
46565: ST_TO_ADDR
// if p3 = 25 then
46566: LD_VAR 0 3
46570: PUSH
46571: LD_INT 25
46573: EQUAL
46574: IFFALSE 46584
// sSheik := true ;
46576: LD_ADDR_EXP 66
46580: PUSH
46581: LD_INT 1
46583: ST_TO_ADDR
// if p3 = 26 then
46584: LD_VAR 0 3
46588: PUSH
46589: LD_INT 26
46591: EQUAL
46592: IFFALSE 46602
// sEarthquake := true ;
46594: LD_ADDR_EXP 68
46598: PUSH
46599: LD_INT 1
46601: ST_TO_ADDR
// if p3 = 27 then
46602: LD_VAR 0 3
46606: PUSH
46607: LD_INT 27
46609: EQUAL
46610: IFFALSE 46620
// sAI := true ;
46612: LD_ADDR_EXP 69
46616: PUSH
46617: LD_INT 1
46619: ST_TO_ADDR
// if p3 = 28 then
46620: LD_VAR 0 3
46624: PUSH
46625: LD_INT 28
46627: EQUAL
46628: IFFALSE 46638
// sCargo := true ;
46630: LD_ADDR_EXP 72
46634: PUSH
46635: LD_INT 1
46637: ST_TO_ADDR
// if p3 = 29 then
46638: LD_VAR 0 3
46642: PUSH
46643: LD_INT 29
46645: EQUAL
46646: IFFALSE 46656
// sDLaser := true ;
46648: LD_ADDR_EXP 73
46652: PUSH
46653: LD_INT 1
46655: ST_TO_ADDR
// if p3 = 30 then
46656: LD_VAR 0 3
46660: PUSH
46661: LD_INT 30
46663: EQUAL
46664: IFFALSE 46674
// sExchange := true ;
46666: LD_ADDR_EXP 74
46670: PUSH
46671: LD_INT 1
46673: ST_TO_ADDR
// if p3 = 31 then
46674: LD_VAR 0 3
46678: PUSH
46679: LD_INT 31
46681: EQUAL
46682: IFFALSE 46692
// sFac := true ;
46684: LD_ADDR_EXP 75
46688: PUSH
46689: LD_INT 1
46691: ST_TO_ADDR
// if p3 = 32 then
46692: LD_VAR 0 3
46696: PUSH
46697: LD_INT 32
46699: EQUAL
46700: IFFALSE 46710
// sPower := true ;
46702: LD_ADDR_EXP 76
46706: PUSH
46707: LD_INT 1
46709: ST_TO_ADDR
// if p3 = 33 then
46710: LD_VAR 0 3
46714: PUSH
46715: LD_INT 33
46717: EQUAL
46718: IFFALSE 46728
// sRandom := true ;
46720: LD_ADDR_EXP 77
46724: PUSH
46725: LD_INT 1
46727: ST_TO_ADDR
// if p3 = 34 then
46728: LD_VAR 0 3
46732: PUSH
46733: LD_INT 34
46735: EQUAL
46736: IFFALSE 46746
// sShield := true ;
46738: LD_ADDR_EXP 78
46742: PUSH
46743: LD_INT 1
46745: ST_TO_ADDR
// if p3 = 35 then
46746: LD_VAR 0 3
46750: PUSH
46751: LD_INT 35
46753: EQUAL
46754: IFFALSE 46764
// sTime := true ;
46756: LD_ADDR_EXP 79
46760: PUSH
46761: LD_INT 1
46763: ST_TO_ADDR
// if p3 = 36 then
46764: LD_VAR 0 3
46768: PUSH
46769: LD_INT 36
46771: EQUAL
46772: IFFALSE 46782
// sTools := true ;
46774: LD_ADDR_EXP 80
46778: PUSH
46779: LD_INT 1
46781: ST_TO_ADDR
// if p3 = 101 then
46782: LD_VAR 0 3
46786: PUSH
46787: LD_INT 101
46789: EQUAL
46790: IFFALSE 46800
// sSold := true ;
46792: LD_ADDR_EXP 45
46796: PUSH
46797: LD_INT 1
46799: ST_TO_ADDR
// if p3 = 102 then
46800: LD_VAR 0 3
46804: PUSH
46805: LD_INT 102
46807: EQUAL
46808: IFFALSE 46818
// sDiff := true ;
46810: LD_ADDR_EXP 46
46814: PUSH
46815: LD_INT 1
46817: ST_TO_ADDR
// if p3 = 103 then
46818: LD_VAR 0 3
46822: PUSH
46823: LD_INT 103
46825: EQUAL
46826: IFFALSE 46836
// sFog := true ;
46828: LD_ADDR_EXP 49
46832: PUSH
46833: LD_INT 1
46835: ST_TO_ADDR
// if p3 = 104 then
46836: LD_VAR 0 3
46840: PUSH
46841: LD_INT 104
46843: EQUAL
46844: IFFALSE 46854
// sReset := true ;
46846: LD_ADDR_EXP 50
46850: PUSH
46851: LD_INT 1
46853: ST_TO_ADDR
// if p3 = 105 then
46854: LD_VAR 0 3
46858: PUSH
46859: LD_INT 105
46861: EQUAL
46862: IFFALSE 46872
// sSun := true ;
46864: LD_ADDR_EXP 51
46868: PUSH
46869: LD_INT 1
46871: ST_TO_ADDR
// if p3 = 106 then
46872: LD_VAR 0 3
46876: PUSH
46877: LD_INT 106
46879: EQUAL
46880: IFFALSE 46890
// sTiger := true ;
46882: LD_ADDR_EXP 47
46886: PUSH
46887: LD_INT 1
46889: ST_TO_ADDR
// if p3 = 107 then
46890: LD_VAR 0 3
46894: PUSH
46895: LD_INT 107
46897: EQUAL
46898: IFFALSE 46908
// sBomb := true ;
46900: LD_ADDR_EXP 48
46904: PUSH
46905: LD_INT 1
46907: ST_TO_ADDR
// if p3 = 108 then
46908: LD_VAR 0 3
46912: PUSH
46913: LD_INT 108
46915: EQUAL
46916: IFFALSE 46926
// sWound := true ;
46918: LD_ADDR_EXP 56
46922: PUSH
46923: LD_INT 1
46925: ST_TO_ADDR
// if p3 = 109 then
46926: LD_VAR 0 3
46930: PUSH
46931: LD_INT 109
46933: EQUAL
46934: IFFALSE 46944
// sBetray := true ;
46936: LD_ADDR_EXP 60
46940: PUSH
46941: LD_INT 1
46943: ST_TO_ADDR
// if p3 = 110 then
46944: LD_VAR 0 3
46948: PUSH
46949: LD_INT 110
46951: EQUAL
46952: IFFALSE 46962
// sContamin := true ;
46954: LD_ADDR_EXP 61
46958: PUSH
46959: LD_INT 1
46961: ST_TO_ADDR
// if p3 = 111 then
46962: LD_VAR 0 3
46966: PUSH
46967: LD_INT 111
46969: EQUAL
46970: IFFALSE 46980
// sOil := true ;
46972: LD_ADDR_EXP 63
46976: PUSH
46977: LD_INT 1
46979: ST_TO_ADDR
// if p3 = 112 then
46980: LD_VAR 0 3
46984: PUSH
46985: LD_INT 112
46987: EQUAL
46988: IFFALSE 46998
// sStu := true ;
46990: LD_ADDR_EXP 67
46994: PUSH
46995: LD_INT 1
46997: ST_TO_ADDR
// if p3 = 113 then
46998: LD_VAR 0 3
47002: PUSH
47003: LD_INT 113
47005: EQUAL
47006: IFFALSE 47016
// sBazooka := true ;
47008: LD_ADDR_EXP 70
47012: PUSH
47013: LD_INT 1
47015: ST_TO_ADDR
// if p3 = 114 then
47016: LD_VAR 0 3
47020: PUSH
47021: LD_INT 114
47023: EQUAL
47024: IFFALSE 47034
// sMortar := true ;
47026: LD_ADDR_EXP 71
47030: PUSH
47031: LD_INT 1
47033: ST_TO_ADDR
// if p3 = 115 then
47034: LD_VAR 0 3
47038: PUSH
47039: LD_INT 115
47041: EQUAL
47042: IFFALSE 47052
// sRanger := true ;
47044: LD_ADDR_EXP 81
47048: PUSH
47049: LD_INT 1
47051: ST_TO_ADDR
// if p3 = 116 then
47052: LD_VAR 0 3
47056: PUSH
47057: LD_INT 116
47059: EQUAL
47060: IFFALSE 47070
// sComputer := true ;
47062: LD_ADDR_EXP 82
47066: PUSH
47067: LD_INT 1
47069: ST_TO_ADDR
// if p3 = 117 then
47070: LD_VAR 0 3
47074: PUSH
47075: LD_INT 117
47077: EQUAL
47078: IFFALSE 47088
// s30 := true ;
47080: LD_ADDR_EXP 83
47084: PUSH
47085: LD_INT 1
47087: ST_TO_ADDR
// if p3 = 118 then
47088: LD_VAR 0 3
47092: PUSH
47093: LD_INT 118
47095: EQUAL
47096: IFFALSE 47106
// s60 := true ;
47098: LD_ADDR_EXP 84
47102: PUSH
47103: LD_INT 1
47105: ST_TO_ADDR
// end ; if p2 = hack_mode then
47106: LD_VAR 0 2
47110: PUSH
47111: LD_INT 101
47113: EQUAL
47114: IFFALSE 47242
// begin case p3 of 1 :
47116: LD_VAR 0 3
47120: PUSH
47121: LD_INT 1
47123: DOUBLE
47124: EQUAL
47125: IFTRUE 47129
47127: GO 47136
47129: POP
// hHackUnlimitedResources ; 2 :
47130: CALL 59381 0 0
47134: GO 47242
47136: LD_INT 2
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47144
47142: GO 47151
47144: POP
// hHackSetLevel10 ; 3 :
47145: CALL 59514 0 0
47149: GO 47242
47151: LD_INT 3
47153: DOUBLE
47154: EQUAL
47155: IFTRUE 47159
47157: GO 47166
47159: POP
// hHackSetLevel10YourUnits ; 4 :
47160: CALL 59599 0 0
47164: GO 47242
47166: LD_INT 4
47168: DOUBLE
47169: EQUAL
47170: IFTRUE 47174
47172: GO 47181
47174: POP
// hHackInvincible ; 5 :
47175: CALL 60047 0 0
47179: GO 47242
47181: LD_INT 5
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 47196
47189: POP
// hHackInvisible ; 6 :
47190: CALL 60158 0 0
47194: GO 47242
47196: LD_INT 6
47198: DOUBLE
47199: EQUAL
47200: IFTRUE 47204
47202: GO 47211
47204: POP
// hHackChangeYourSide ; 7 :
47205: CALL 60215 0 0
47209: GO 47242
47211: LD_INT 7
47213: DOUBLE
47214: EQUAL
47215: IFTRUE 47219
47217: GO 47226
47219: POP
// hHackChangeUnitSide ; 8 :
47220: CALL 60257 0 0
47224: GO 47242
47226: LD_INT 8
47228: DOUBLE
47229: EQUAL
47230: IFTRUE 47234
47232: GO 47241
47234: POP
// hHackFog ; end ;
47235: CALL 60358 0 0
47239: GO 47242
47241: POP
// end ; if p2 = game_save_mode then
47242: LD_VAR 0 2
47246: PUSH
47247: LD_INT 102
47249: EQUAL
47250: IFFALSE 47305
// begin if p3 = 1 then
47252: LD_VAR 0 3
47256: PUSH
47257: LD_INT 1
47259: EQUAL
47260: IFFALSE 47272
// globalGameSaveCounter := p4 ;
47262: LD_ADDR_EXP 27
47266: PUSH
47267: LD_VAR 0 4
47271: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
47272: LD_VAR 0 3
47276: PUSH
47277: LD_INT 2
47279: EQUAL
47280: PUSH
47281: LD_EXP 27
47285: AND
47286: IFFALSE 47305
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47288: LD_STRING setGameSaveCounter(
47290: PUSH
47291: LD_EXP 27
47295: STR
47296: PUSH
47297: LD_STRING )
47299: STR
47300: PPUSH
47301: CALL_OW 559
// end ; end ;
47305: LD_VAR 0 7
47309: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
47310: LD_INT 0
47312: PPUSH
// streamModeActive := false ;
47313: LD_ADDR_EXP 28
47317: PUSH
47318: LD_INT 0
47320: ST_TO_ADDR
// normalCounter := 36 ;
47321: LD_ADDR_EXP 29
47325: PUSH
47326: LD_INT 36
47328: ST_TO_ADDR
// hardcoreCounter := 18 ;
47329: LD_ADDR_EXP 30
47333: PUSH
47334: LD_INT 18
47336: ST_TO_ADDR
// sRocket := false ;
47337: LD_ADDR_EXP 33
47341: PUSH
47342: LD_INT 0
47344: ST_TO_ADDR
// sSpeed := false ;
47345: LD_ADDR_EXP 32
47349: PUSH
47350: LD_INT 0
47352: ST_TO_ADDR
// sEngine := false ;
47353: LD_ADDR_EXP 34
47357: PUSH
47358: LD_INT 0
47360: ST_TO_ADDR
// sSpec := false ;
47361: LD_ADDR_EXP 31
47365: PUSH
47366: LD_INT 0
47368: ST_TO_ADDR
// sLevel := false ;
47369: LD_ADDR_EXP 35
47373: PUSH
47374: LD_INT 0
47376: ST_TO_ADDR
// sArmoury := false ;
47377: LD_ADDR_EXP 36
47381: PUSH
47382: LD_INT 0
47384: ST_TO_ADDR
// sRadar := false ;
47385: LD_ADDR_EXP 37
47389: PUSH
47390: LD_INT 0
47392: ST_TO_ADDR
// sBunker := false ;
47393: LD_ADDR_EXP 38
47397: PUSH
47398: LD_INT 0
47400: ST_TO_ADDR
// sHack := false ;
47401: LD_ADDR_EXP 39
47405: PUSH
47406: LD_INT 0
47408: ST_TO_ADDR
// sFire := false ;
47409: LD_ADDR_EXP 40
47413: PUSH
47414: LD_INT 0
47416: ST_TO_ADDR
// sRefresh := false ;
47417: LD_ADDR_EXP 41
47421: PUSH
47422: LD_INT 0
47424: ST_TO_ADDR
// sExp := false ;
47425: LD_ADDR_EXP 42
47429: PUSH
47430: LD_INT 0
47432: ST_TO_ADDR
// sDepot := false ;
47433: LD_ADDR_EXP 43
47437: PUSH
47438: LD_INT 0
47440: ST_TO_ADDR
// sFlag := false ;
47441: LD_ADDR_EXP 44
47445: PUSH
47446: LD_INT 0
47448: ST_TO_ADDR
// sKamikadze := false ;
47449: LD_ADDR_EXP 52
47453: PUSH
47454: LD_INT 0
47456: ST_TO_ADDR
// sTroll := false ;
47457: LD_ADDR_EXP 53
47461: PUSH
47462: LD_INT 0
47464: ST_TO_ADDR
// sSlow := false ;
47465: LD_ADDR_EXP 54
47469: PUSH
47470: LD_INT 0
47472: ST_TO_ADDR
// sLack := false ;
47473: LD_ADDR_EXP 55
47477: PUSH
47478: LD_INT 0
47480: ST_TO_ADDR
// sTank := false ;
47481: LD_ADDR_EXP 57
47485: PUSH
47486: LD_INT 0
47488: ST_TO_ADDR
// sRemote := false ;
47489: LD_ADDR_EXP 58
47493: PUSH
47494: LD_INT 0
47496: ST_TO_ADDR
// sPowell := false ;
47497: LD_ADDR_EXP 59
47501: PUSH
47502: LD_INT 0
47504: ST_TO_ADDR
// sTeleport := false ;
47505: LD_ADDR_EXP 62
47509: PUSH
47510: LD_INT 0
47512: ST_TO_ADDR
// sOilTower := false ;
47513: LD_ADDR_EXP 64
47517: PUSH
47518: LD_INT 0
47520: ST_TO_ADDR
// sShovel := false ;
47521: LD_ADDR_EXP 65
47525: PUSH
47526: LD_INT 0
47528: ST_TO_ADDR
// sSheik := false ;
47529: LD_ADDR_EXP 66
47533: PUSH
47534: LD_INT 0
47536: ST_TO_ADDR
// sEarthquake := false ;
47537: LD_ADDR_EXP 68
47541: PUSH
47542: LD_INT 0
47544: ST_TO_ADDR
// sAI := false ;
47545: LD_ADDR_EXP 69
47549: PUSH
47550: LD_INT 0
47552: ST_TO_ADDR
// sCargo := false ;
47553: LD_ADDR_EXP 72
47557: PUSH
47558: LD_INT 0
47560: ST_TO_ADDR
// sDLaser := false ;
47561: LD_ADDR_EXP 73
47565: PUSH
47566: LD_INT 0
47568: ST_TO_ADDR
// sExchange := false ;
47569: LD_ADDR_EXP 74
47573: PUSH
47574: LD_INT 0
47576: ST_TO_ADDR
// sFac := false ;
47577: LD_ADDR_EXP 75
47581: PUSH
47582: LD_INT 0
47584: ST_TO_ADDR
// sPower := false ;
47585: LD_ADDR_EXP 76
47589: PUSH
47590: LD_INT 0
47592: ST_TO_ADDR
// sRandom := false ;
47593: LD_ADDR_EXP 77
47597: PUSH
47598: LD_INT 0
47600: ST_TO_ADDR
// sShield := false ;
47601: LD_ADDR_EXP 78
47605: PUSH
47606: LD_INT 0
47608: ST_TO_ADDR
// sTime := false ;
47609: LD_ADDR_EXP 79
47613: PUSH
47614: LD_INT 0
47616: ST_TO_ADDR
// sTools := false ;
47617: LD_ADDR_EXP 80
47621: PUSH
47622: LD_INT 0
47624: ST_TO_ADDR
// sSold := false ;
47625: LD_ADDR_EXP 45
47629: PUSH
47630: LD_INT 0
47632: ST_TO_ADDR
// sDiff := false ;
47633: LD_ADDR_EXP 46
47637: PUSH
47638: LD_INT 0
47640: ST_TO_ADDR
// sFog := false ;
47641: LD_ADDR_EXP 49
47645: PUSH
47646: LD_INT 0
47648: ST_TO_ADDR
// sReset := false ;
47649: LD_ADDR_EXP 50
47653: PUSH
47654: LD_INT 0
47656: ST_TO_ADDR
// sSun := false ;
47657: LD_ADDR_EXP 51
47661: PUSH
47662: LD_INT 0
47664: ST_TO_ADDR
// sTiger := false ;
47665: LD_ADDR_EXP 47
47669: PUSH
47670: LD_INT 0
47672: ST_TO_ADDR
// sBomb := false ;
47673: LD_ADDR_EXP 48
47677: PUSH
47678: LD_INT 0
47680: ST_TO_ADDR
// sWound := false ;
47681: LD_ADDR_EXP 56
47685: PUSH
47686: LD_INT 0
47688: ST_TO_ADDR
// sBetray := false ;
47689: LD_ADDR_EXP 60
47693: PUSH
47694: LD_INT 0
47696: ST_TO_ADDR
// sContamin := false ;
47697: LD_ADDR_EXP 61
47701: PUSH
47702: LD_INT 0
47704: ST_TO_ADDR
// sOil := false ;
47705: LD_ADDR_EXP 63
47709: PUSH
47710: LD_INT 0
47712: ST_TO_ADDR
// sStu := false ;
47713: LD_ADDR_EXP 67
47717: PUSH
47718: LD_INT 0
47720: ST_TO_ADDR
// sBazooka := false ;
47721: LD_ADDR_EXP 70
47725: PUSH
47726: LD_INT 0
47728: ST_TO_ADDR
// sMortar := false ;
47729: LD_ADDR_EXP 71
47733: PUSH
47734: LD_INT 0
47736: ST_TO_ADDR
// sRanger := false ;
47737: LD_ADDR_EXP 81
47741: PUSH
47742: LD_INT 0
47744: ST_TO_ADDR
// sComputer := false ;
47745: LD_ADDR_EXP 82
47749: PUSH
47750: LD_INT 0
47752: ST_TO_ADDR
// s30 := false ;
47753: LD_ADDR_EXP 83
47757: PUSH
47758: LD_INT 0
47760: ST_TO_ADDR
// s60 := false ;
47761: LD_ADDR_EXP 84
47765: PUSH
47766: LD_INT 0
47768: ST_TO_ADDR
// end ;
47769: LD_VAR 0 1
47773: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47774: LD_INT 0
47776: PPUSH
47777: PPUSH
47778: PPUSH
47779: PPUSH
47780: PPUSH
47781: PPUSH
47782: PPUSH
// result := [ ] ;
47783: LD_ADDR_VAR 0 2
47787: PUSH
47788: EMPTY
47789: ST_TO_ADDR
// if campaign_id = 1 then
47790: LD_OWVAR 69
47794: PUSH
47795: LD_INT 1
47797: EQUAL
47798: IFFALSE 50964
// begin case mission_number of 1 :
47800: LD_OWVAR 70
47804: PUSH
47805: LD_INT 1
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47813
47811: GO 47889
47813: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47814: LD_ADDR_VAR 0 2
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: LD_INT 11
47827: PUSH
47828: LD_INT 12
47830: PUSH
47831: LD_INT 15
47833: PUSH
47834: LD_INT 16
47836: PUSH
47837: LD_INT 22
47839: PUSH
47840: LD_INT 23
47842: PUSH
47843: LD_INT 26
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 101
47859: PUSH
47860: LD_INT 102
47862: PUSH
47863: LD_INT 106
47865: PUSH
47866: LD_INT 116
47868: PUSH
47869: LD_INT 117
47871: PUSH
47872: LD_INT 118
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: ST_TO_ADDR
47887: GO 50962
47889: LD_INT 2
47891: DOUBLE
47892: EQUAL
47893: IFTRUE 47897
47895: GO 47981
47897: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47898: LD_ADDR_VAR 0 2
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 4
47908: PUSH
47909: LD_INT 11
47911: PUSH
47912: LD_INT 12
47914: PUSH
47915: LD_INT 15
47917: PUSH
47918: LD_INT 16
47920: PUSH
47921: LD_INT 22
47923: PUSH
47924: LD_INT 23
47926: PUSH
47927: LD_INT 26
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 101
47943: PUSH
47944: LD_INT 102
47946: PUSH
47947: LD_INT 105
47949: PUSH
47950: LD_INT 106
47952: PUSH
47953: LD_INT 108
47955: PUSH
47956: LD_INT 116
47958: PUSH
47959: LD_INT 117
47961: PUSH
47962: LD_INT 118
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: ST_TO_ADDR
47979: GO 50962
47981: LD_INT 3
47983: DOUBLE
47984: EQUAL
47985: IFTRUE 47989
47987: GO 48077
47989: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47990: LD_ADDR_VAR 0 2
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 4
48000: PUSH
48001: LD_INT 5
48003: PUSH
48004: LD_INT 11
48006: PUSH
48007: LD_INT 12
48009: PUSH
48010: LD_INT 15
48012: PUSH
48013: LD_INT 16
48015: PUSH
48016: LD_INT 22
48018: PUSH
48019: LD_INT 26
48021: PUSH
48022: LD_INT 36
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 101
48039: PUSH
48040: LD_INT 102
48042: PUSH
48043: LD_INT 105
48045: PUSH
48046: LD_INT 106
48048: PUSH
48049: LD_INT 108
48051: PUSH
48052: LD_INT 116
48054: PUSH
48055: LD_INT 117
48057: PUSH
48058: LD_INT 118
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: ST_TO_ADDR
48075: GO 50962
48077: LD_INT 4
48079: DOUBLE
48080: EQUAL
48081: IFTRUE 48085
48083: GO 48181
48085: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48086: LD_ADDR_VAR 0 2
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 4
48096: PUSH
48097: LD_INT 5
48099: PUSH
48100: LD_INT 8
48102: PUSH
48103: LD_INT 11
48105: PUSH
48106: LD_INT 12
48108: PUSH
48109: LD_INT 15
48111: PUSH
48112: LD_INT 16
48114: PUSH
48115: LD_INT 22
48117: PUSH
48118: LD_INT 23
48120: PUSH
48121: LD_INT 26
48123: PUSH
48124: LD_INT 36
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 101
48143: PUSH
48144: LD_INT 102
48146: PUSH
48147: LD_INT 105
48149: PUSH
48150: LD_INT 106
48152: PUSH
48153: LD_INT 108
48155: PUSH
48156: LD_INT 116
48158: PUSH
48159: LD_INT 117
48161: PUSH
48162: LD_INT 118
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: ST_TO_ADDR
48179: GO 50962
48181: LD_INT 5
48183: DOUBLE
48184: EQUAL
48185: IFTRUE 48189
48187: GO 48301
48189: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48190: LD_ADDR_VAR 0 2
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 4
48200: PUSH
48201: LD_INT 5
48203: PUSH
48204: LD_INT 6
48206: PUSH
48207: LD_INT 8
48209: PUSH
48210: LD_INT 11
48212: PUSH
48213: LD_INT 12
48215: PUSH
48216: LD_INT 15
48218: PUSH
48219: LD_INT 16
48221: PUSH
48222: LD_INT 22
48224: PUSH
48225: LD_INT 23
48227: PUSH
48228: LD_INT 25
48230: PUSH
48231: LD_INT 26
48233: PUSH
48234: LD_INT 36
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 101
48255: PUSH
48256: LD_INT 102
48258: PUSH
48259: LD_INT 105
48261: PUSH
48262: LD_INT 106
48264: PUSH
48265: LD_INT 108
48267: PUSH
48268: LD_INT 109
48270: PUSH
48271: LD_INT 112
48273: PUSH
48274: LD_INT 116
48276: PUSH
48277: LD_INT 117
48279: PUSH
48280: LD_INT 118
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: ST_TO_ADDR
48299: GO 50962
48301: LD_INT 6
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48309
48307: GO 48441
48309: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 4
48320: PUSH
48321: LD_INT 5
48323: PUSH
48324: LD_INT 6
48326: PUSH
48327: LD_INT 8
48329: PUSH
48330: LD_INT 11
48332: PUSH
48333: LD_INT 12
48335: PUSH
48336: LD_INT 15
48338: PUSH
48339: LD_INT 16
48341: PUSH
48342: LD_INT 20
48344: PUSH
48345: LD_INT 21
48347: PUSH
48348: LD_INT 22
48350: PUSH
48351: LD_INT 23
48353: PUSH
48354: LD_INT 25
48356: PUSH
48357: LD_INT 26
48359: PUSH
48360: LD_INT 30
48362: PUSH
48363: LD_INT 31
48365: PUSH
48366: LD_INT 32
48368: PUSH
48369: LD_INT 36
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 101
48395: PUSH
48396: LD_INT 102
48398: PUSH
48399: LD_INT 105
48401: PUSH
48402: LD_INT 106
48404: PUSH
48405: LD_INT 108
48407: PUSH
48408: LD_INT 109
48410: PUSH
48411: LD_INT 112
48413: PUSH
48414: LD_INT 116
48416: PUSH
48417: LD_INT 117
48419: PUSH
48420: LD_INT 118
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: ST_TO_ADDR
48439: GO 50962
48441: LD_INT 7
48443: DOUBLE
48444: EQUAL
48445: IFTRUE 48449
48447: GO 48561
48449: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48450: LD_ADDR_VAR 0 2
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: LD_INT 5
48463: PUSH
48464: LD_INT 7
48466: PUSH
48467: LD_INT 11
48469: PUSH
48470: LD_INT 12
48472: PUSH
48473: LD_INT 15
48475: PUSH
48476: LD_INT 16
48478: PUSH
48479: LD_INT 20
48481: PUSH
48482: LD_INT 21
48484: PUSH
48485: LD_INT 22
48487: PUSH
48488: LD_INT 23
48490: PUSH
48491: LD_INT 25
48493: PUSH
48494: LD_INT 26
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 101
48515: PUSH
48516: LD_INT 102
48518: PUSH
48519: LD_INT 103
48521: PUSH
48522: LD_INT 105
48524: PUSH
48525: LD_INT 106
48527: PUSH
48528: LD_INT 108
48530: PUSH
48531: LD_INT 112
48533: PUSH
48534: LD_INT 116
48536: PUSH
48537: LD_INT 117
48539: PUSH
48540: LD_INT 118
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: ST_TO_ADDR
48559: GO 50962
48561: LD_INT 8
48563: DOUBLE
48564: EQUAL
48565: IFTRUE 48569
48567: GO 48709
48569: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48570: LD_ADDR_VAR 0 2
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 4
48580: PUSH
48581: LD_INT 5
48583: PUSH
48584: LD_INT 6
48586: PUSH
48587: LD_INT 7
48589: PUSH
48590: LD_INT 8
48592: PUSH
48593: LD_INT 11
48595: PUSH
48596: LD_INT 12
48598: PUSH
48599: LD_INT 15
48601: PUSH
48602: LD_INT 16
48604: PUSH
48605: LD_INT 20
48607: PUSH
48608: LD_INT 21
48610: PUSH
48611: LD_INT 22
48613: PUSH
48614: LD_INT 23
48616: PUSH
48617: LD_INT 25
48619: PUSH
48620: LD_INT 26
48622: PUSH
48623: LD_INT 30
48625: PUSH
48626: LD_INT 31
48628: PUSH
48629: LD_INT 32
48631: PUSH
48632: LD_INT 36
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 101
48659: PUSH
48660: LD_INT 102
48662: PUSH
48663: LD_INT 103
48665: PUSH
48666: LD_INT 105
48668: PUSH
48669: LD_INT 106
48671: PUSH
48672: LD_INT 108
48674: PUSH
48675: LD_INT 109
48677: PUSH
48678: LD_INT 112
48680: PUSH
48681: LD_INT 116
48683: PUSH
48684: LD_INT 117
48686: PUSH
48687: LD_INT 118
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: ST_TO_ADDR
48707: GO 50962
48709: LD_INT 9
48711: DOUBLE
48712: EQUAL
48713: IFTRUE 48717
48715: GO 48865
48717: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48718: LD_ADDR_VAR 0 2
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 4
48728: PUSH
48729: LD_INT 5
48731: PUSH
48732: LD_INT 6
48734: PUSH
48735: LD_INT 7
48737: PUSH
48738: LD_INT 8
48740: PUSH
48741: LD_INT 11
48743: PUSH
48744: LD_INT 12
48746: PUSH
48747: LD_INT 15
48749: PUSH
48750: LD_INT 16
48752: PUSH
48753: LD_INT 20
48755: PUSH
48756: LD_INT 21
48758: PUSH
48759: LD_INT 22
48761: PUSH
48762: LD_INT 23
48764: PUSH
48765: LD_INT 25
48767: PUSH
48768: LD_INT 26
48770: PUSH
48771: LD_INT 28
48773: PUSH
48774: LD_INT 30
48776: PUSH
48777: LD_INT 31
48779: PUSH
48780: LD_INT 32
48782: PUSH
48783: LD_INT 36
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 101
48811: PUSH
48812: LD_INT 102
48814: PUSH
48815: LD_INT 103
48817: PUSH
48818: LD_INT 105
48820: PUSH
48821: LD_INT 106
48823: PUSH
48824: LD_INT 108
48826: PUSH
48827: LD_INT 109
48829: PUSH
48830: LD_INT 112
48832: PUSH
48833: LD_INT 114
48835: PUSH
48836: LD_INT 116
48838: PUSH
48839: LD_INT 117
48841: PUSH
48842: LD_INT 118
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: ST_TO_ADDR
48863: GO 50962
48865: LD_INT 10
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48873
48871: GO 49069
48873: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48874: LD_ADDR_VAR 0 2
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 4
48884: PUSH
48885: LD_INT 5
48887: PUSH
48888: LD_INT 6
48890: PUSH
48891: LD_INT 7
48893: PUSH
48894: LD_INT 8
48896: PUSH
48897: LD_INT 9
48899: PUSH
48900: LD_INT 10
48902: PUSH
48903: LD_INT 11
48905: PUSH
48906: LD_INT 12
48908: PUSH
48909: LD_INT 13
48911: PUSH
48912: LD_INT 14
48914: PUSH
48915: LD_INT 15
48917: PUSH
48918: LD_INT 16
48920: PUSH
48921: LD_INT 17
48923: PUSH
48924: LD_INT 18
48926: PUSH
48927: LD_INT 19
48929: PUSH
48930: LD_INT 20
48932: PUSH
48933: LD_INT 21
48935: PUSH
48936: LD_INT 22
48938: PUSH
48939: LD_INT 23
48941: PUSH
48942: LD_INT 24
48944: PUSH
48945: LD_INT 25
48947: PUSH
48948: LD_INT 26
48950: PUSH
48951: LD_INT 28
48953: PUSH
48954: LD_INT 30
48956: PUSH
48957: LD_INT 31
48959: PUSH
48960: LD_INT 32
48962: PUSH
48963: LD_INT 36
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 101
48999: PUSH
49000: LD_INT 102
49002: PUSH
49003: LD_INT 103
49005: PUSH
49006: LD_INT 104
49008: PUSH
49009: LD_INT 105
49011: PUSH
49012: LD_INT 106
49014: PUSH
49015: LD_INT 107
49017: PUSH
49018: LD_INT 108
49020: PUSH
49021: LD_INT 109
49023: PUSH
49024: LD_INT 110
49026: PUSH
49027: LD_INT 111
49029: PUSH
49030: LD_INT 112
49032: PUSH
49033: LD_INT 114
49035: PUSH
49036: LD_INT 116
49038: PUSH
49039: LD_INT 117
49041: PUSH
49042: LD_INT 118
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: ST_TO_ADDR
49067: GO 50962
49069: LD_INT 11
49071: DOUBLE
49072: EQUAL
49073: IFTRUE 49077
49075: GO 49281
49077: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49078: LD_ADDR_VAR 0 2
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: LD_INT 4
49091: PUSH
49092: LD_INT 5
49094: PUSH
49095: LD_INT 6
49097: PUSH
49098: LD_INT 7
49100: PUSH
49101: LD_INT 8
49103: PUSH
49104: LD_INT 9
49106: PUSH
49107: LD_INT 10
49109: PUSH
49110: LD_INT 11
49112: PUSH
49113: LD_INT 12
49115: PUSH
49116: LD_INT 13
49118: PUSH
49119: LD_INT 14
49121: PUSH
49122: LD_INT 15
49124: PUSH
49125: LD_INT 16
49127: PUSH
49128: LD_INT 17
49130: PUSH
49131: LD_INT 18
49133: PUSH
49134: LD_INT 19
49136: PUSH
49137: LD_INT 20
49139: PUSH
49140: LD_INT 21
49142: PUSH
49143: LD_INT 22
49145: PUSH
49146: LD_INT 23
49148: PUSH
49149: LD_INT 24
49151: PUSH
49152: LD_INT 25
49154: PUSH
49155: LD_INT 26
49157: PUSH
49158: LD_INT 28
49160: PUSH
49161: LD_INT 30
49163: PUSH
49164: LD_INT 31
49166: PUSH
49167: LD_INT 32
49169: PUSH
49170: LD_INT 34
49172: PUSH
49173: LD_INT 36
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 101
49211: PUSH
49212: LD_INT 102
49214: PUSH
49215: LD_INT 103
49217: PUSH
49218: LD_INT 104
49220: PUSH
49221: LD_INT 105
49223: PUSH
49224: LD_INT 106
49226: PUSH
49227: LD_INT 107
49229: PUSH
49230: LD_INT 108
49232: PUSH
49233: LD_INT 109
49235: PUSH
49236: LD_INT 110
49238: PUSH
49239: LD_INT 111
49241: PUSH
49242: LD_INT 112
49244: PUSH
49245: LD_INT 114
49247: PUSH
49248: LD_INT 116
49250: PUSH
49251: LD_INT 117
49253: PUSH
49254: LD_INT 118
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: ST_TO_ADDR
49279: GO 50962
49281: LD_INT 12
49283: DOUBLE
49284: EQUAL
49285: IFTRUE 49289
49287: GO 49509
49289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49290: LD_ADDR_VAR 0 2
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: LD_INT 4
49306: PUSH
49307: LD_INT 5
49309: PUSH
49310: LD_INT 6
49312: PUSH
49313: LD_INT 7
49315: PUSH
49316: LD_INT 8
49318: PUSH
49319: LD_INT 9
49321: PUSH
49322: LD_INT 10
49324: PUSH
49325: LD_INT 11
49327: PUSH
49328: LD_INT 12
49330: PUSH
49331: LD_INT 13
49333: PUSH
49334: LD_INT 14
49336: PUSH
49337: LD_INT 15
49339: PUSH
49340: LD_INT 16
49342: PUSH
49343: LD_INT 17
49345: PUSH
49346: LD_INT 18
49348: PUSH
49349: LD_INT 19
49351: PUSH
49352: LD_INT 20
49354: PUSH
49355: LD_INT 21
49357: PUSH
49358: LD_INT 22
49360: PUSH
49361: LD_INT 23
49363: PUSH
49364: LD_INT 24
49366: PUSH
49367: LD_INT 25
49369: PUSH
49370: LD_INT 26
49372: PUSH
49373: LD_INT 27
49375: PUSH
49376: LD_INT 28
49378: PUSH
49379: LD_INT 30
49381: PUSH
49382: LD_INT 31
49384: PUSH
49385: LD_INT 32
49387: PUSH
49388: LD_INT 33
49390: PUSH
49391: LD_INT 34
49393: PUSH
49394: LD_INT 36
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 101
49435: PUSH
49436: LD_INT 102
49438: PUSH
49439: LD_INT 103
49441: PUSH
49442: LD_INT 104
49444: PUSH
49445: LD_INT 105
49447: PUSH
49448: LD_INT 106
49450: PUSH
49451: LD_INT 107
49453: PUSH
49454: LD_INT 108
49456: PUSH
49457: LD_INT 109
49459: PUSH
49460: LD_INT 110
49462: PUSH
49463: LD_INT 111
49465: PUSH
49466: LD_INT 112
49468: PUSH
49469: LD_INT 113
49471: PUSH
49472: LD_INT 114
49474: PUSH
49475: LD_INT 116
49477: PUSH
49478: LD_INT 117
49480: PUSH
49481: LD_INT 118
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: ST_TO_ADDR
49507: GO 50962
49509: LD_INT 13
49511: DOUBLE
49512: EQUAL
49513: IFTRUE 49517
49515: GO 49725
49517: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49518: LD_ADDR_VAR 0 2
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: LD_INT 4
49534: PUSH
49535: LD_INT 5
49537: PUSH
49538: LD_INT 8
49540: PUSH
49541: LD_INT 9
49543: PUSH
49544: LD_INT 10
49546: PUSH
49547: LD_INT 11
49549: PUSH
49550: LD_INT 12
49552: PUSH
49553: LD_INT 14
49555: PUSH
49556: LD_INT 15
49558: PUSH
49559: LD_INT 16
49561: PUSH
49562: LD_INT 17
49564: PUSH
49565: LD_INT 18
49567: PUSH
49568: LD_INT 19
49570: PUSH
49571: LD_INT 20
49573: PUSH
49574: LD_INT 21
49576: PUSH
49577: LD_INT 22
49579: PUSH
49580: LD_INT 23
49582: PUSH
49583: LD_INT 24
49585: PUSH
49586: LD_INT 25
49588: PUSH
49589: LD_INT 26
49591: PUSH
49592: LD_INT 27
49594: PUSH
49595: LD_INT 28
49597: PUSH
49598: LD_INT 30
49600: PUSH
49601: LD_INT 31
49603: PUSH
49604: LD_INT 32
49606: PUSH
49607: LD_INT 33
49609: PUSH
49610: LD_INT 34
49612: PUSH
49613: LD_INT 36
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 101
49651: PUSH
49652: LD_INT 102
49654: PUSH
49655: LD_INT 103
49657: PUSH
49658: LD_INT 104
49660: PUSH
49661: LD_INT 105
49663: PUSH
49664: LD_INT 106
49666: PUSH
49667: LD_INT 107
49669: PUSH
49670: LD_INT 108
49672: PUSH
49673: LD_INT 109
49675: PUSH
49676: LD_INT 110
49678: PUSH
49679: LD_INT 111
49681: PUSH
49682: LD_INT 112
49684: PUSH
49685: LD_INT 113
49687: PUSH
49688: LD_INT 114
49690: PUSH
49691: LD_INT 116
49693: PUSH
49694: LD_INT 117
49696: PUSH
49697: LD_INT 118
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: ST_TO_ADDR
49723: GO 50962
49725: LD_INT 14
49727: DOUBLE
49728: EQUAL
49729: IFTRUE 49733
49731: GO 49957
49733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49734: LD_ADDR_VAR 0 2
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: LD_INT 5
49753: PUSH
49754: LD_INT 6
49756: PUSH
49757: LD_INT 7
49759: PUSH
49760: LD_INT 8
49762: PUSH
49763: LD_INT 9
49765: PUSH
49766: LD_INT 10
49768: PUSH
49769: LD_INT 11
49771: PUSH
49772: LD_INT 12
49774: PUSH
49775: LD_INT 13
49777: PUSH
49778: LD_INT 14
49780: PUSH
49781: LD_INT 15
49783: PUSH
49784: LD_INT 16
49786: PUSH
49787: LD_INT 17
49789: PUSH
49790: LD_INT 18
49792: PUSH
49793: LD_INT 19
49795: PUSH
49796: LD_INT 20
49798: PUSH
49799: LD_INT 21
49801: PUSH
49802: LD_INT 22
49804: PUSH
49805: LD_INT 23
49807: PUSH
49808: LD_INT 24
49810: PUSH
49811: LD_INT 25
49813: PUSH
49814: LD_INT 26
49816: PUSH
49817: LD_INT 27
49819: PUSH
49820: LD_INT 28
49822: PUSH
49823: LD_INT 29
49825: PUSH
49826: LD_INT 30
49828: PUSH
49829: LD_INT 31
49831: PUSH
49832: LD_INT 32
49834: PUSH
49835: LD_INT 33
49837: PUSH
49838: LD_INT 34
49840: PUSH
49841: LD_INT 36
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 101
49883: PUSH
49884: LD_INT 102
49886: PUSH
49887: LD_INT 103
49889: PUSH
49890: LD_INT 104
49892: PUSH
49893: LD_INT 105
49895: PUSH
49896: LD_INT 106
49898: PUSH
49899: LD_INT 107
49901: PUSH
49902: LD_INT 108
49904: PUSH
49905: LD_INT 109
49907: PUSH
49908: LD_INT 110
49910: PUSH
49911: LD_INT 111
49913: PUSH
49914: LD_INT 112
49916: PUSH
49917: LD_INT 113
49919: PUSH
49920: LD_INT 114
49922: PUSH
49923: LD_INT 116
49925: PUSH
49926: LD_INT 117
49928: PUSH
49929: LD_INT 118
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: ST_TO_ADDR
49955: GO 50962
49957: LD_INT 15
49959: DOUBLE
49960: EQUAL
49961: IFTRUE 49965
49963: GO 50189
49965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49966: LD_ADDR_VAR 0 2
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: LD_INT 4
49982: PUSH
49983: LD_INT 5
49985: PUSH
49986: LD_INT 6
49988: PUSH
49989: LD_INT 7
49991: PUSH
49992: LD_INT 8
49994: PUSH
49995: LD_INT 9
49997: PUSH
49998: LD_INT 10
50000: PUSH
50001: LD_INT 11
50003: PUSH
50004: LD_INT 12
50006: PUSH
50007: LD_INT 13
50009: PUSH
50010: LD_INT 14
50012: PUSH
50013: LD_INT 15
50015: PUSH
50016: LD_INT 16
50018: PUSH
50019: LD_INT 17
50021: PUSH
50022: LD_INT 18
50024: PUSH
50025: LD_INT 19
50027: PUSH
50028: LD_INT 20
50030: PUSH
50031: LD_INT 21
50033: PUSH
50034: LD_INT 22
50036: PUSH
50037: LD_INT 23
50039: PUSH
50040: LD_INT 24
50042: PUSH
50043: LD_INT 25
50045: PUSH
50046: LD_INT 26
50048: PUSH
50049: LD_INT 27
50051: PUSH
50052: LD_INT 28
50054: PUSH
50055: LD_INT 29
50057: PUSH
50058: LD_INT 30
50060: PUSH
50061: LD_INT 31
50063: PUSH
50064: LD_INT 32
50066: PUSH
50067: LD_INT 33
50069: PUSH
50070: LD_INT 34
50072: PUSH
50073: LD_INT 36
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 101
50115: PUSH
50116: LD_INT 102
50118: PUSH
50119: LD_INT 103
50121: PUSH
50122: LD_INT 104
50124: PUSH
50125: LD_INT 105
50127: PUSH
50128: LD_INT 106
50130: PUSH
50131: LD_INT 107
50133: PUSH
50134: LD_INT 108
50136: PUSH
50137: LD_INT 109
50139: PUSH
50140: LD_INT 110
50142: PUSH
50143: LD_INT 111
50145: PUSH
50146: LD_INT 112
50148: PUSH
50149: LD_INT 113
50151: PUSH
50152: LD_INT 114
50154: PUSH
50155: LD_INT 116
50157: PUSH
50158: LD_INT 117
50160: PUSH
50161: LD_INT 118
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: ST_TO_ADDR
50187: GO 50962
50189: LD_INT 16
50191: DOUBLE
50192: EQUAL
50193: IFTRUE 50197
50195: GO 50333
50197: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50198: LD_ADDR_VAR 0 2
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 4
50208: PUSH
50209: LD_INT 5
50211: PUSH
50212: LD_INT 7
50214: PUSH
50215: LD_INT 11
50217: PUSH
50218: LD_INT 12
50220: PUSH
50221: LD_INT 15
50223: PUSH
50224: LD_INT 16
50226: PUSH
50227: LD_INT 20
50229: PUSH
50230: LD_INT 21
50232: PUSH
50233: LD_INT 22
50235: PUSH
50236: LD_INT 23
50238: PUSH
50239: LD_INT 25
50241: PUSH
50242: LD_INT 26
50244: PUSH
50245: LD_INT 30
50247: PUSH
50248: LD_INT 31
50250: PUSH
50251: LD_INT 32
50253: PUSH
50254: LD_INT 33
50256: PUSH
50257: LD_INT 34
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 101
50283: PUSH
50284: LD_INT 102
50286: PUSH
50287: LD_INT 103
50289: PUSH
50290: LD_INT 106
50292: PUSH
50293: LD_INT 108
50295: PUSH
50296: LD_INT 112
50298: PUSH
50299: LD_INT 113
50301: PUSH
50302: LD_INT 114
50304: PUSH
50305: LD_INT 116
50307: PUSH
50308: LD_INT 117
50310: PUSH
50311: LD_INT 118
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: ST_TO_ADDR
50331: GO 50962
50333: LD_INT 17
50335: DOUBLE
50336: EQUAL
50337: IFTRUE 50341
50339: GO 50565
50341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50342: LD_ADDR_VAR 0 2
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 3
50355: PUSH
50356: LD_INT 4
50358: PUSH
50359: LD_INT 5
50361: PUSH
50362: LD_INT 6
50364: PUSH
50365: LD_INT 7
50367: PUSH
50368: LD_INT 8
50370: PUSH
50371: LD_INT 9
50373: PUSH
50374: LD_INT 10
50376: PUSH
50377: LD_INT 11
50379: PUSH
50380: LD_INT 12
50382: PUSH
50383: LD_INT 13
50385: PUSH
50386: LD_INT 14
50388: PUSH
50389: LD_INT 15
50391: PUSH
50392: LD_INT 16
50394: PUSH
50395: LD_INT 17
50397: PUSH
50398: LD_INT 18
50400: PUSH
50401: LD_INT 19
50403: PUSH
50404: LD_INT 20
50406: PUSH
50407: LD_INT 21
50409: PUSH
50410: LD_INT 22
50412: PUSH
50413: LD_INT 23
50415: PUSH
50416: LD_INT 24
50418: PUSH
50419: LD_INT 25
50421: PUSH
50422: LD_INT 26
50424: PUSH
50425: LD_INT 27
50427: PUSH
50428: LD_INT 28
50430: PUSH
50431: LD_INT 29
50433: PUSH
50434: LD_INT 30
50436: PUSH
50437: LD_INT 31
50439: PUSH
50440: LD_INT 32
50442: PUSH
50443: LD_INT 33
50445: PUSH
50446: LD_INT 34
50448: PUSH
50449: LD_INT 36
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 101
50491: PUSH
50492: LD_INT 102
50494: PUSH
50495: LD_INT 103
50497: PUSH
50498: LD_INT 104
50500: PUSH
50501: LD_INT 105
50503: PUSH
50504: LD_INT 106
50506: PUSH
50507: LD_INT 107
50509: PUSH
50510: LD_INT 108
50512: PUSH
50513: LD_INT 109
50515: PUSH
50516: LD_INT 110
50518: PUSH
50519: LD_INT 111
50521: PUSH
50522: LD_INT 112
50524: PUSH
50525: LD_INT 113
50527: PUSH
50528: LD_INT 114
50530: PUSH
50531: LD_INT 116
50533: PUSH
50534: LD_INT 117
50536: PUSH
50537: LD_INT 118
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: ST_TO_ADDR
50563: GO 50962
50565: LD_INT 18
50567: DOUBLE
50568: EQUAL
50569: IFTRUE 50573
50571: GO 50721
50573: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50574: LD_ADDR_VAR 0 2
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: LD_INT 4
50584: PUSH
50585: LD_INT 5
50587: PUSH
50588: LD_INT 7
50590: PUSH
50591: LD_INT 11
50593: PUSH
50594: LD_INT 12
50596: PUSH
50597: LD_INT 15
50599: PUSH
50600: LD_INT 16
50602: PUSH
50603: LD_INT 20
50605: PUSH
50606: LD_INT 21
50608: PUSH
50609: LD_INT 22
50611: PUSH
50612: LD_INT 23
50614: PUSH
50615: LD_INT 25
50617: PUSH
50618: LD_INT 26
50620: PUSH
50621: LD_INT 30
50623: PUSH
50624: LD_INT 31
50626: PUSH
50627: LD_INT 32
50629: PUSH
50630: LD_INT 33
50632: PUSH
50633: LD_INT 34
50635: PUSH
50636: LD_INT 35
50638: PUSH
50639: LD_INT 36
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 101
50667: PUSH
50668: LD_INT 102
50670: PUSH
50671: LD_INT 103
50673: PUSH
50674: LD_INT 106
50676: PUSH
50677: LD_INT 108
50679: PUSH
50680: LD_INT 112
50682: PUSH
50683: LD_INT 113
50685: PUSH
50686: LD_INT 114
50688: PUSH
50689: LD_INT 115
50691: PUSH
50692: LD_INT 116
50694: PUSH
50695: LD_INT 117
50697: PUSH
50698: LD_INT 118
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: ST_TO_ADDR
50719: GO 50962
50721: LD_INT 19
50723: DOUBLE
50724: EQUAL
50725: IFTRUE 50729
50727: GO 50961
50729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50730: LD_ADDR_VAR 0 2
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: LD_INT 4
50746: PUSH
50747: LD_INT 5
50749: PUSH
50750: LD_INT 6
50752: PUSH
50753: LD_INT 7
50755: PUSH
50756: LD_INT 8
50758: PUSH
50759: LD_INT 9
50761: PUSH
50762: LD_INT 10
50764: PUSH
50765: LD_INT 11
50767: PUSH
50768: LD_INT 12
50770: PUSH
50771: LD_INT 13
50773: PUSH
50774: LD_INT 14
50776: PUSH
50777: LD_INT 15
50779: PUSH
50780: LD_INT 16
50782: PUSH
50783: LD_INT 17
50785: PUSH
50786: LD_INT 18
50788: PUSH
50789: LD_INT 19
50791: PUSH
50792: LD_INT 20
50794: PUSH
50795: LD_INT 21
50797: PUSH
50798: LD_INT 22
50800: PUSH
50801: LD_INT 23
50803: PUSH
50804: LD_INT 24
50806: PUSH
50807: LD_INT 25
50809: PUSH
50810: LD_INT 26
50812: PUSH
50813: LD_INT 27
50815: PUSH
50816: LD_INT 28
50818: PUSH
50819: LD_INT 29
50821: PUSH
50822: LD_INT 30
50824: PUSH
50825: LD_INT 31
50827: PUSH
50828: LD_INT 32
50830: PUSH
50831: LD_INT 33
50833: PUSH
50834: LD_INT 34
50836: PUSH
50837: LD_INT 35
50839: PUSH
50840: LD_INT 36
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 101
50883: PUSH
50884: LD_INT 102
50886: PUSH
50887: LD_INT 103
50889: PUSH
50890: LD_INT 104
50892: PUSH
50893: LD_INT 105
50895: PUSH
50896: LD_INT 106
50898: PUSH
50899: LD_INT 107
50901: PUSH
50902: LD_INT 108
50904: PUSH
50905: LD_INT 109
50907: PUSH
50908: LD_INT 110
50910: PUSH
50911: LD_INT 111
50913: PUSH
50914: LD_INT 112
50916: PUSH
50917: LD_INT 113
50919: PUSH
50920: LD_INT 114
50922: PUSH
50923: LD_INT 115
50925: PUSH
50926: LD_INT 116
50928: PUSH
50929: LD_INT 117
50931: PUSH
50932: LD_INT 118
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: ST_TO_ADDR
50959: GO 50962
50961: POP
// end else
50962: GO 51193
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50964: LD_ADDR_VAR 0 2
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 4
50980: PUSH
50981: LD_INT 5
50983: PUSH
50984: LD_INT 6
50986: PUSH
50987: LD_INT 7
50989: PUSH
50990: LD_INT 8
50992: PUSH
50993: LD_INT 9
50995: PUSH
50996: LD_INT 10
50998: PUSH
50999: LD_INT 11
51001: PUSH
51002: LD_INT 12
51004: PUSH
51005: LD_INT 13
51007: PUSH
51008: LD_INT 14
51010: PUSH
51011: LD_INT 15
51013: PUSH
51014: LD_INT 16
51016: PUSH
51017: LD_INT 17
51019: PUSH
51020: LD_INT 18
51022: PUSH
51023: LD_INT 19
51025: PUSH
51026: LD_INT 20
51028: PUSH
51029: LD_INT 21
51031: PUSH
51032: LD_INT 22
51034: PUSH
51035: LD_INT 23
51037: PUSH
51038: LD_INT 24
51040: PUSH
51041: LD_INT 25
51043: PUSH
51044: LD_INT 26
51046: PUSH
51047: LD_INT 27
51049: PUSH
51050: LD_INT 28
51052: PUSH
51053: LD_INT 29
51055: PUSH
51056: LD_INT 30
51058: PUSH
51059: LD_INT 31
51061: PUSH
51062: LD_INT 32
51064: PUSH
51065: LD_INT 33
51067: PUSH
51068: LD_INT 34
51070: PUSH
51071: LD_INT 35
51073: PUSH
51074: LD_INT 36
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 101
51117: PUSH
51118: LD_INT 102
51120: PUSH
51121: LD_INT 103
51123: PUSH
51124: LD_INT 104
51126: PUSH
51127: LD_INT 105
51129: PUSH
51130: LD_INT 106
51132: PUSH
51133: LD_INT 107
51135: PUSH
51136: LD_INT 108
51138: PUSH
51139: LD_INT 109
51141: PUSH
51142: LD_INT 110
51144: PUSH
51145: LD_INT 111
51147: PUSH
51148: LD_INT 112
51150: PUSH
51151: LD_INT 113
51153: PUSH
51154: LD_INT 114
51156: PUSH
51157: LD_INT 115
51159: PUSH
51160: LD_INT 116
51162: PUSH
51163: LD_INT 117
51165: PUSH
51166: LD_INT 118
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: ST_TO_ADDR
// if result then
51193: LD_VAR 0 2
51197: IFFALSE 51983
// begin normal :=  ;
51199: LD_ADDR_VAR 0 5
51203: PUSH
51204: LD_STRING 
51206: ST_TO_ADDR
// hardcore :=  ;
51207: LD_ADDR_VAR 0 6
51211: PUSH
51212: LD_STRING 
51214: ST_TO_ADDR
// active :=  ;
51215: LD_ADDR_VAR 0 7
51219: PUSH
51220: LD_STRING 
51222: ST_TO_ADDR
// for i = 1 to normalCounter do
51223: LD_ADDR_VAR 0 8
51227: PUSH
51228: DOUBLE
51229: LD_INT 1
51231: DEC
51232: ST_TO_ADDR
51233: LD_EXP 29
51237: PUSH
51238: FOR_TO
51239: IFFALSE 51340
// begin tmp := 0 ;
51241: LD_ADDR_VAR 0 3
51245: PUSH
51246: LD_STRING 0
51248: ST_TO_ADDR
// if result [ 1 ] then
51249: LD_VAR 0 2
51253: PUSH
51254: LD_INT 1
51256: ARRAY
51257: IFFALSE 51322
// if result [ 1 ] [ 1 ] = i then
51259: LD_VAR 0 2
51263: PUSH
51264: LD_INT 1
51266: ARRAY
51267: PUSH
51268: LD_INT 1
51270: ARRAY
51271: PUSH
51272: LD_VAR 0 8
51276: EQUAL
51277: IFFALSE 51322
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51279: LD_ADDR_VAR 0 2
51283: PUSH
51284: LD_VAR 0 2
51288: PPUSH
51289: LD_INT 1
51291: PPUSH
51292: LD_VAR 0 2
51296: PUSH
51297: LD_INT 1
51299: ARRAY
51300: PPUSH
51301: LD_INT 1
51303: PPUSH
51304: CALL_OW 3
51308: PPUSH
51309: CALL_OW 1
51313: ST_TO_ADDR
// tmp := 1 ;
51314: LD_ADDR_VAR 0 3
51318: PUSH
51319: LD_STRING 1
51321: ST_TO_ADDR
// end ; normal := normal & tmp ;
51322: LD_ADDR_VAR 0 5
51326: PUSH
51327: LD_VAR 0 5
51331: PUSH
51332: LD_VAR 0 3
51336: STR
51337: ST_TO_ADDR
// end ;
51338: GO 51238
51340: POP
51341: POP
// for i = 1 to hardcoreCounter do
51342: LD_ADDR_VAR 0 8
51346: PUSH
51347: DOUBLE
51348: LD_INT 1
51350: DEC
51351: ST_TO_ADDR
51352: LD_EXP 30
51356: PUSH
51357: FOR_TO
51358: IFFALSE 51463
// begin tmp := 0 ;
51360: LD_ADDR_VAR 0 3
51364: PUSH
51365: LD_STRING 0
51367: ST_TO_ADDR
// if result [ 2 ] then
51368: LD_VAR 0 2
51372: PUSH
51373: LD_INT 2
51375: ARRAY
51376: IFFALSE 51445
// if result [ 2 ] [ 1 ] = 100 + i then
51378: LD_VAR 0 2
51382: PUSH
51383: LD_INT 2
51385: ARRAY
51386: PUSH
51387: LD_INT 1
51389: ARRAY
51390: PUSH
51391: LD_INT 100
51393: PUSH
51394: LD_VAR 0 8
51398: PLUS
51399: EQUAL
51400: IFFALSE 51445
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51402: LD_ADDR_VAR 0 2
51406: PUSH
51407: LD_VAR 0 2
51411: PPUSH
51412: LD_INT 2
51414: PPUSH
51415: LD_VAR 0 2
51419: PUSH
51420: LD_INT 2
51422: ARRAY
51423: PPUSH
51424: LD_INT 1
51426: PPUSH
51427: CALL_OW 3
51431: PPUSH
51432: CALL_OW 1
51436: ST_TO_ADDR
// tmp := 1 ;
51437: LD_ADDR_VAR 0 3
51441: PUSH
51442: LD_STRING 1
51444: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51445: LD_ADDR_VAR 0 6
51449: PUSH
51450: LD_VAR 0 6
51454: PUSH
51455: LD_VAR 0 3
51459: STR
51460: ST_TO_ADDR
// end ;
51461: GO 51357
51463: POP
51464: POP
// if isGameLoad then
51465: LD_VAR 0 1
51469: IFFALSE 51944
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51471: LD_ADDR_VAR 0 4
51475: PUSH
51476: LD_EXP 33
51480: PUSH
51481: LD_EXP 32
51485: PUSH
51486: LD_EXP 34
51490: PUSH
51491: LD_EXP 31
51495: PUSH
51496: LD_EXP 35
51500: PUSH
51501: LD_EXP 36
51505: PUSH
51506: LD_EXP 37
51510: PUSH
51511: LD_EXP 38
51515: PUSH
51516: LD_EXP 39
51520: PUSH
51521: LD_EXP 40
51525: PUSH
51526: LD_EXP 41
51530: PUSH
51531: LD_EXP 42
51535: PUSH
51536: LD_EXP 43
51540: PUSH
51541: LD_EXP 44
51545: PUSH
51546: LD_EXP 52
51550: PUSH
51551: LD_EXP 53
51555: PUSH
51556: LD_EXP 54
51560: PUSH
51561: LD_EXP 55
51565: PUSH
51566: LD_EXP 57
51570: PUSH
51571: LD_EXP 58
51575: PUSH
51576: LD_EXP 59
51580: PUSH
51581: LD_EXP 62
51585: PUSH
51586: LD_EXP 64
51590: PUSH
51591: LD_EXP 65
51595: PUSH
51596: LD_EXP 66
51600: PUSH
51601: LD_EXP 68
51605: PUSH
51606: LD_EXP 69
51610: PUSH
51611: LD_EXP 72
51615: PUSH
51616: LD_EXP 73
51620: PUSH
51621: LD_EXP 74
51625: PUSH
51626: LD_EXP 75
51630: PUSH
51631: LD_EXP 76
51635: PUSH
51636: LD_EXP 77
51640: PUSH
51641: LD_EXP 78
51645: PUSH
51646: LD_EXP 79
51650: PUSH
51651: LD_EXP 80
51655: PUSH
51656: LD_EXP 45
51660: PUSH
51661: LD_EXP 46
51665: PUSH
51666: LD_EXP 49
51670: PUSH
51671: LD_EXP 50
51675: PUSH
51676: LD_EXP 51
51680: PUSH
51681: LD_EXP 47
51685: PUSH
51686: LD_EXP 48
51690: PUSH
51691: LD_EXP 56
51695: PUSH
51696: LD_EXP 60
51700: PUSH
51701: LD_EXP 61
51705: PUSH
51706: LD_EXP 63
51710: PUSH
51711: LD_EXP 67
51715: PUSH
51716: LD_EXP 70
51720: PUSH
51721: LD_EXP 71
51725: PUSH
51726: LD_EXP 81
51730: PUSH
51731: LD_EXP 82
51735: PUSH
51736: LD_EXP 83
51740: PUSH
51741: LD_EXP 84
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// tmp :=  ;
51802: LD_ADDR_VAR 0 3
51806: PUSH
51807: LD_STRING 
51809: ST_TO_ADDR
// for i = 1 to normalCounter do
51810: LD_ADDR_VAR 0 8
51814: PUSH
51815: DOUBLE
51816: LD_INT 1
51818: DEC
51819: ST_TO_ADDR
51820: LD_EXP 29
51824: PUSH
51825: FOR_TO
51826: IFFALSE 51862
// begin if flags [ i ] then
51828: LD_VAR 0 4
51832: PUSH
51833: LD_VAR 0 8
51837: ARRAY
51838: IFFALSE 51860
// tmp := tmp & i & ; ;
51840: LD_ADDR_VAR 0 3
51844: PUSH
51845: LD_VAR 0 3
51849: PUSH
51850: LD_VAR 0 8
51854: STR
51855: PUSH
51856: LD_STRING ;
51858: STR
51859: ST_TO_ADDR
// end ;
51860: GO 51825
51862: POP
51863: POP
// for i = 1 to hardcoreCounter do
51864: LD_ADDR_VAR 0 8
51868: PUSH
51869: DOUBLE
51870: LD_INT 1
51872: DEC
51873: ST_TO_ADDR
51874: LD_EXP 30
51878: PUSH
51879: FOR_TO
51880: IFFALSE 51926
// begin if flags [ normalCounter + i ] then
51882: LD_VAR 0 4
51886: PUSH
51887: LD_EXP 29
51891: PUSH
51892: LD_VAR 0 8
51896: PLUS
51897: ARRAY
51898: IFFALSE 51924
// tmp := tmp & ( 100 + i ) & ; ;
51900: LD_ADDR_VAR 0 3
51904: PUSH
51905: LD_VAR 0 3
51909: PUSH
51910: LD_INT 100
51912: PUSH
51913: LD_VAR 0 8
51917: PLUS
51918: STR
51919: PUSH
51920: LD_STRING ;
51922: STR
51923: ST_TO_ADDR
// end ;
51924: GO 51879
51926: POP
51927: POP
// if tmp then
51928: LD_VAR 0 3
51932: IFFALSE 51944
// active := tmp ;
51934: LD_ADDR_VAR 0 7
51938: PUSH
51939: LD_VAR 0 3
51943: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51944: LD_STRING getStreamItemsFromMission("
51946: PUSH
51947: LD_VAR 0 5
51951: STR
51952: PUSH
51953: LD_STRING ","
51955: STR
51956: PUSH
51957: LD_VAR 0 6
51961: STR
51962: PUSH
51963: LD_STRING ","
51965: STR
51966: PUSH
51967: LD_VAR 0 7
51971: STR
51972: PUSH
51973: LD_STRING ")
51975: STR
51976: PPUSH
51977: CALL_OW 559
// end else
51981: GO 51990
// ToLua ( getStreamItemsFromMission("","","") ) ;
51983: LD_STRING getStreamItemsFromMission("","","")
51985: PPUSH
51986: CALL_OW 559
// end ;
51990: LD_VAR 0 2
51994: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51995: LD_EXP 28
51999: PUSH
52000: LD_EXP 33
52004: AND
52005: IFFALSE 52129
52007: GO 52009
52009: DISABLE
52010: LD_INT 0
52012: PPUSH
52013: PPUSH
// begin enable ;
52014: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52015: LD_ADDR_VAR 0 2
52019: PUSH
52020: LD_INT 22
52022: PUSH
52023: LD_OWVAR 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 34
52037: PUSH
52038: LD_INT 7
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 34
52047: PUSH
52048: LD_INT 45
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 34
52057: PUSH
52058: LD_INT 28
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 34
52067: PUSH
52068: LD_INT 47
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PPUSH
52086: CALL_OW 69
52090: ST_TO_ADDR
// if not tmp then
52091: LD_VAR 0 2
52095: NOT
52096: IFFALSE 52100
// exit ;
52098: GO 52129
// for i in tmp do
52100: LD_ADDR_VAR 0 1
52104: PUSH
52105: LD_VAR 0 2
52109: PUSH
52110: FOR_IN
52111: IFFALSE 52127
// begin SetLives ( i , 0 ) ;
52113: LD_VAR 0 1
52117: PPUSH
52118: LD_INT 0
52120: PPUSH
52121: CALL_OW 234
// end ;
52125: GO 52110
52127: POP
52128: POP
// end ;
52129: PPOPN 2
52131: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52132: LD_EXP 28
52136: PUSH
52137: LD_EXP 34
52141: AND
52142: IFFALSE 52226
52144: GO 52146
52146: DISABLE
52147: LD_INT 0
52149: PPUSH
52150: PPUSH
// begin enable ;
52151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52152: LD_ADDR_VAR 0 2
52156: PUSH
52157: LD_INT 22
52159: PUSH
52160: LD_OWVAR 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 32
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PPUSH
52183: CALL_OW 69
52187: ST_TO_ADDR
// if not tmp then
52188: LD_VAR 0 2
52192: NOT
52193: IFFALSE 52197
// exit ;
52195: GO 52226
// for i in tmp do
52197: LD_ADDR_VAR 0 1
52201: PUSH
52202: LD_VAR 0 2
52206: PUSH
52207: FOR_IN
52208: IFFALSE 52224
// begin SetLives ( i , 0 ) ;
52210: LD_VAR 0 1
52214: PPUSH
52215: LD_INT 0
52217: PPUSH
52218: CALL_OW 234
// end ;
52222: GO 52207
52224: POP
52225: POP
// end ;
52226: PPOPN 2
52228: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52229: LD_EXP 28
52233: PUSH
52234: LD_EXP 31
52238: AND
52239: IFFALSE 52332
52241: GO 52243
52243: DISABLE
52244: LD_INT 0
52246: PPUSH
// begin enable ;
52247: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52248: LD_ADDR_VAR 0 1
52252: PUSH
52253: LD_INT 22
52255: PUSH
52256: LD_OWVAR 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 25
52270: PUSH
52271: LD_INT 5
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 25
52280: PUSH
52281: LD_INT 9
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 25
52290: PUSH
52291: LD_INT 8
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PPUSH
52308: CALL_OW 69
52312: PUSH
52313: FOR_IN
52314: IFFALSE 52330
// begin SetClass ( i , 1 ) ;
52316: LD_VAR 0 1
52320: PPUSH
52321: LD_INT 1
52323: PPUSH
52324: CALL_OW 336
// end ;
52328: GO 52313
52330: POP
52331: POP
// end ;
52332: PPOPN 1
52334: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52335: LD_EXP 28
52339: PUSH
52340: LD_EXP 32
52344: AND
52345: PUSH
52346: LD_OWVAR 65
52350: PUSH
52351: LD_INT 7
52353: LESS
52354: AND
52355: IFFALSE 52369
52357: GO 52359
52359: DISABLE
// begin enable ;
52360: ENABLE
// game_speed := 7 ;
52361: LD_ADDR_OWVAR 65
52365: PUSH
52366: LD_INT 7
52368: ST_TO_ADDR
// end ;
52369: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52370: LD_EXP 28
52374: PUSH
52375: LD_EXP 35
52379: AND
52380: IFFALSE 52582
52382: GO 52384
52384: DISABLE
52385: LD_INT 0
52387: PPUSH
52388: PPUSH
52389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52390: LD_ADDR_VAR 0 3
52394: PUSH
52395: LD_INT 81
52397: PUSH
52398: LD_OWVAR 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 21
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PPUSH
52421: CALL_OW 69
52425: ST_TO_ADDR
// if not tmp then
52426: LD_VAR 0 3
52430: NOT
52431: IFFALSE 52435
// exit ;
52433: GO 52582
// if tmp > 5 then
52435: LD_VAR 0 3
52439: PUSH
52440: LD_INT 5
52442: GREATER
52443: IFFALSE 52455
// k := 5 else
52445: LD_ADDR_VAR 0 2
52449: PUSH
52450: LD_INT 5
52452: ST_TO_ADDR
52453: GO 52465
// k := tmp ;
52455: LD_ADDR_VAR 0 2
52459: PUSH
52460: LD_VAR 0 3
52464: ST_TO_ADDR
// for i := 1 to k do
52465: LD_ADDR_VAR 0 1
52469: PUSH
52470: DOUBLE
52471: LD_INT 1
52473: DEC
52474: ST_TO_ADDR
52475: LD_VAR 0 2
52479: PUSH
52480: FOR_TO
52481: IFFALSE 52580
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52483: LD_VAR 0 3
52487: PUSH
52488: LD_VAR 0 1
52492: ARRAY
52493: PPUSH
52494: LD_VAR 0 1
52498: PUSH
52499: LD_INT 4
52501: MOD
52502: PUSH
52503: LD_INT 1
52505: PLUS
52506: PPUSH
52507: CALL_OW 259
52511: PUSH
52512: LD_INT 10
52514: LESS
52515: IFFALSE 52578
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52517: LD_VAR 0 3
52521: PUSH
52522: LD_VAR 0 1
52526: ARRAY
52527: PPUSH
52528: LD_VAR 0 1
52532: PUSH
52533: LD_INT 4
52535: MOD
52536: PUSH
52537: LD_INT 1
52539: PLUS
52540: PPUSH
52541: LD_VAR 0 3
52545: PUSH
52546: LD_VAR 0 1
52550: ARRAY
52551: PPUSH
52552: LD_VAR 0 1
52556: PUSH
52557: LD_INT 4
52559: MOD
52560: PUSH
52561: LD_INT 1
52563: PLUS
52564: PPUSH
52565: CALL_OW 259
52569: PUSH
52570: LD_INT 1
52572: PLUS
52573: PPUSH
52574: CALL_OW 237
52578: GO 52480
52580: POP
52581: POP
// end ;
52582: PPOPN 3
52584: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52585: LD_EXP 28
52589: PUSH
52590: LD_EXP 36
52594: AND
52595: IFFALSE 52615
52597: GO 52599
52599: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52600: LD_INT 4
52602: PPUSH
52603: LD_OWVAR 2
52607: PPUSH
52608: LD_INT 0
52610: PPUSH
52611: CALL_OW 324
52615: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52616: LD_EXP 28
52620: PUSH
52621: LD_EXP 65
52625: AND
52626: IFFALSE 52646
52628: GO 52630
52630: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52631: LD_INT 19
52633: PPUSH
52634: LD_OWVAR 2
52638: PPUSH
52639: LD_INT 0
52641: PPUSH
52642: CALL_OW 324
52646: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52647: LD_EXP 28
52651: PUSH
52652: LD_EXP 37
52656: AND
52657: IFFALSE 52759
52659: GO 52661
52661: DISABLE
52662: LD_INT 0
52664: PPUSH
52665: PPUSH
// begin enable ;
52666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52667: LD_ADDR_VAR 0 2
52671: PUSH
52672: LD_INT 22
52674: PUSH
52675: LD_OWVAR 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: LD_INT 34
52689: PUSH
52690: LD_INT 11
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 34
52699: PUSH
52700: LD_INT 30
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PPUSH
52716: CALL_OW 69
52720: ST_TO_ADDR
// if not tmp then
52721: LD_VAR 0 2
52725: NOT
52726: IFFALSE 52730
// exit ;
52728: GO 52759
// for i in tmp do
52730: LD_ADDR_VAR 0 1
52734: PUSH
52735: LD_VAR 0 2
52739: PUSH
52740: FOR_IN
52741: IFFALSE 52757
// begin SetLives ( i , 0 ) ;
52743: LD_VAR 0 1
52747: PPUSH
52748: LD_INT 0
52750: PPUSH
52751: CALL_OW 234
// end ;
52755: GO 52740
52757: POP
52758: POP
// end ;
52759: PPOPN 2
52761: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52762: LD_EXP 28
52766: PUSH
52767: LD_EXP 38
52771: AND
52772: IFFALSE 52792
52774: GO 52776
52776: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52777: LD_INT 32
52779: PPUSH
52780: LD_OWVAR 2
52784: PPUSH
52785: LD_INT 0
52787: PPUSH
52788: CALL_OW 324
52792: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52793: LD_EXP 28
52797: PUSH
52798: LD_EXP 39
52802: AND
52803: IFFALSE 52984
52805: GO 52807
52807: DISABLE
52808: LD_INT 0
52810: PPUSH
52811: PPUSH
52812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52813: LD_ADDR_VAR 0 2
52817: PUSH
52818: LD_INT 22
52820: PUSH
52821: LD_OWVAR 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 33
52832: PUSH
52833: LD_INT 3
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PPUSH
52844: CALL_OW 69
52848: ST_TO_ADDR
// if not tmp then
52849: LD_VAR 0 2
52853: NOT
52854: IFFALSE 52858
// exit ;
52856: GO 52984
// side := 0 ;
52858: LD_ADDR_VAR 0 3
52862: PUSH
52863: LD_INT 0
52865: ST_TO_ADDR
// for i := 1 to 8 do
52866: LD_ADDR_VAR 0 1
52870: PUSH
52871: DOUBLE
52872: LD_INT 1
52874: DEC
52875: ST_TO_ADDR
52876: LD_INT 8
52878: PUSH
52879: FOR_TO
52880: IFFALSE 52928
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52882: LD_OWVAR 2
52886: PUSH
52887: LD_VAR 0 1
52891: NONEQUAL
52892: PUSH
52893: LD_OWVAR 2
52897: PPUSH
52898: LD_VAR 0 1
52902: PPUSH
52903: CALL_OW 81
52907: PUSH
52908: LD_INT 2
52910: EQUAL
52911: AND
52912: IFFALSE 52926
// begin side := i ;
52914: LD_ADDR_VAR 0 3
52918: PUSH
52919: LD_VAR 0 1
52923: ST_TO_ADDR
// break ;
52924: GO 52928
// end ;
52926: GO 52879
52928: POP
52929: POP
// if not side then
52930: LD_VAR 0 3
52934: NOT
52935: IFFALSE 52939
// exit ;
52937: GO 52984
// for i := 1 to tmp do
52939: LD_ADDR_VAR 0 1
52943: PUSH
52944: DOUBLE
52945: LD_INT 1
52947: DEC
52948: ST_TO_ADDR
52949: LD_VAR 0 2
52953: PUSH
52954: FOR_TO
52955: IFFALSE 52982
// if Prob ( 60 ) then
52957: LD_INT 60
52959: PPUSH
52960: CALL_OW 13
52964: IFFALSE 52980
// SetSide ( i , side ) ;
52966: LD_VAR 0 1
52970: PPUSH
52971: LD_VAR 0 3
52975: PPUSH
52976: CALL_OW 235
52980: GO 52954
52982: POP
52983: POP
// end ;
52984: PPOPN 3
52986: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52987: LD_EXP 28
52991: PUSH
52992: LD_EXP 41
52996: AND
52997: IFFALSE 53116
52999: GO 53001
53001: DISABLE
53002: LD_INT 0
53004: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53005: LD_ADDR_VAR 0 1
53009: PUSH
53010: LD_INT 22
53012: PUSH
53013: LD_OWVAR 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 21
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: LD_INT 23
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: PPUSH
53054: CALL_OW 69
53058: PUSH
53059: FOR_IN
53060: IFFALSE 53114
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 257
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 3
53080: PUSH
53081: LD_INT 4
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: IN
53090: IFFALSE 53112
// SetClass ( un , rand ( 1 , 4 ) ) ;
53092: LD_VAR 0 1
53096: PPUSH
53097: LD_INT 1
53099: PPUSH
53100: LD_INT 4
53102: PPUSH
53103: CALL_OW 12
53107: PPUSH
53108: CALL_OW 336
53112: GO 53059
53114: POP
53115: POP
// end ;
53116: PPOPN 1
53118: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53119: LD_EXP 28
53123: PUSH
53124: LD_EXP 40
53128: AND
53129: IFFALSE 53208
53131: GO 53133
53133: DISABLE
53134: LD_INT 0
53136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53137: LD_ADDR_VAR 0 1
53141: PUSH
53142: LD_INT 22
53144: PUSH
53145: LD_OWVAR 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 21
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PPUSH
53168: CALL_OW 69
53172: ST_TO_ADDR
// if not tmp then
53173: LD_VAR 0 1
53177: NOT
53178: IFFALSE 53182
// exit ;
53180: GO 53208
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53182: LD_VAR 0 1
53186: PUSH
53187: LD_INT 1
53189: PPUSH
53190: LD_VAR 0 1
53194: PPUSH
53195: CALL_OW 12
53199: ARRAY
53200: PPUSH
53201: LD_INT 100
53203: PPUSH
53204: CALL_OW 234
// end ;
53208: PPOPN 1
53210: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53211: LD_EXP 28
53215: PUSH
53216: LD_EXP 42
53220: AND
53221: IFFALSE 53319
53223: GO 53225
53225: DISABLE
53226: LD_INT 0
53228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53229: LD_ADDR_VAR 0 1
53233: PUSH
53234: LD_INT 22
53236: PUSH
53237: LD_OWVAR 2
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 21
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PPUSH
53260: CALL_OW 69
53264: ST_TO_ADDR
// if not tmp then
53265: LD_VAR 0 1
53269: NOT
53270: IFFALSE 53274
// exit ;
53272: GO 53319
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53274: LD_VAR 0 1
53278: PUSH
53279: LD_INT 1
53281: PPUSH
53282: LD_VAR 0 1
53286: PPUSH
53287: CALL_OW 12
53291: ARRAY
53292: PPUSH
53293: LD_INT 1
53295: PPUSH
53296: LD_INT 4
53298: PPUSH
53299: CALL_OW 12
53303: PPUSH
53304: LD_INT 3000
53306: PPUSH
53307: LD_INT 9000
53309: PPUSH
53310: CALL_OW 12
53314: PPUSH
53315: CALL_OW 492
// end ;
53319: PPOPN 1
53321: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53322: LD_EXP 28
53326: PUSH
53327: LD_EXP 43
53331: AND
53332: IFFALSE 53352
53334: GO 53336
53336: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53337: LD_INT 1
53339: PPUSH
53340: LD_OWVAR 2
53344: PPUSH
53345: LD_INT 0
53347: PPUSH
53348: CALL_OW 324
53352: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53353: LD_EXP 28
53357: PUSH
53358: LD_EXP 44
53362: AND
53363: IFFALSE 53446
53365: GO 53367
53367: DISABLE
53368: LD_INT 0
53370: PPUSH
53371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53372: LD_ADDR_VAR 0 2
53376: PUSH
53377: LD_INT 22
53379: PUSH
53380: LD_OWVAR 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 21
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PPUSH
53403: CALL_OW 69
53407: ST_TO_ADDR
// if not tmp then
53408: LD_VAR 0 2
53412: NOT
53413: IFFALSE 53417
// exit ;
53415: GO 53446
// for i in tmp do
53417: LD_ADDR_VAR 0 1
53421: PUSH
53422: LD_VAR 0 2
53426: PUSH
53427: FOR_IN
53428: IFFALSE 53444
// SetBLevel ( i , 10 ) ;
53430: LD_VAR 0 1
53434: PPUSH
53435: LD_INT 10
53437: PPUSH
53438: CALL_OW 241
53442: GO 53427
53444: POP
53445: POP
// end ;
53446: PPOPN 2
53448: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53449: LD_EXP 28
53453: PUSH
53454: LD_EXP 45
53458: AND
53459: IFFALSE 53570
53461: GO 53463
53463: DISABLE
53464: LD_INT 0
53466: PPUSH
53467: PPUSH
53468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53469: LD_ADDR_VAR 0 3
53473: PUSH
53474: LD_INT 22
53476: PUSH
53477: LD_OWVAR 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 25
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PPUSH
53500: CALL_OW 69
53504: ST_TO_ADDR
// if not tmp then
53505: LD_VAR 0 3
53509: NOT
53510: IFFALSE 53514
// exit ;
53512: GO 53570
// un := tmp [ rand ( 1 , tmp ) ] ;
53514: LD_ADDR_VAR 0 2
53518: PUSH
53519: LD_VAR 0 3
53523: PUSH
53524: LD_INT 1
53526: PPUSH
53527: LD_VAR 0 3
53531: PPUSH
53532: CALL_OW 12
53536: ARRAY
53537: ST_TO_ADDR
// if Crawls ( un ) then
53538: LD_VAR 0 2
53542: PPUSH
53543: CALL_OW 318
53547: IFFALSE 53558
// ComWalk ( un ) ;
53549: LD_VAR 0 2
53553: PPUSH
53554: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53558: LD_VAR 0 2
53562: PPUSH
53563: LD_INT 5
53565: PPUSH
53566: CALL_OW 336
// end ;
53570: PPOPN 3
53572: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53573: LD_EXP 28
53577: PUSH
53578: LD_EXP 46
53582: AND
53583: PUSH
53584: LD_OWVAR 67
53588: PUSH
53589: LD_INT 4
53591: LESS
53592: AND
53593: IFFALSE 53612
53595: GO 53597
53597: DISABLE
// begin Difficulty := Difficulty + 1 ;
53598: LD_ADDR_OWVAR 67
53602: PUSH
53603: LD_OWVAR 67
53607: PUSH
53608: LD_INT 1
53610: PLUS
53611: ST_TO_ADDR
// end ;
53612: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53613: LD_EXP 28
53617: PUSH
53618: LD_EXP 47
53622: AND
53623: IFFALSE 53726
53625: GO 53627
53627: DISABLE
53628: LD_INT 0
53630: PPUSH
// begin for i := 1 to 5 do
53631: LD_ADDR_VAR 0 1
53635: PUSH
53636: DOUBLE
53637: LD_INT 1
53639: DEC
53640: ST_TO_ADDR
53641: LD_INT 5
53643: PUSH
53644: FOR_TO
53645: IFFALSE 53724
// begin uc_nation := nation_nature ;
53647: LD_ADDR_OWVAR 21
53651: PUSH
53652: LD_INT 0
53654: ST_TO_ADDR
// uc_side := 0 ;
53655: LD_ADDR_OWVAR 20
53659: PUSH
53660: LD_INT 0
53662: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53663: LD_ADDR_OWVAR 29
53667: PUSH
53668: LD_INT 12
53670: PUSH
53671: LD_INT 12
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: ST_TO_ADDR
// hc_agressivity := 20 ;
53678: LD_ADDR_OWVAR 35
53682: PUSH
53683: LD_INT 20
53685: ST_TO_ADDR
// hc_class := class_tiger ;
53686: LD_ADDR_OWVAR 28
53690: PUSH
53691: LD_INT 14
53693: ST_TO_ADDR
// hc_gallery :=  ;
53694: LD_ADDR_OWVAR 33
53698: PUSH
53699: LD_STRING 
53701: ST_TO_ADDR
// hc_name :=  ;
53702: LD_ADDR_OWVAR 26
53706: PUSH
53707: LD_STRING 
53709: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53710: CALL_OW 44
53714: PPUSH
53715: LD_INT 0
53717: PPUSH
53718: CALL_OW 51
// end ;
53722: GO 53644
53724: POP
53725: POP
// end ;
53726: PPOPN 1
53728: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53729: LD_EXP 28
53733: PUSH
53734: LD_EXP 48
53738: AND
53739: IFFALSE 53748
53741: GO 53743
53743: DISABLE
// StreamSibBomb ;
53744: CALL 53749 0 0
53748: END
// export function StreamSibBomb ; var i , x , y ; begin
53749: LD_INT 0
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
// result := false ;
53755: LD_ADDR_VAR 0 1
53759: PUSH
53760: LD_INT 0
53762: ST_TO_ADDR
// for i := 1 to 16 do
53763: LD_ADDR_VAR 0 2
53767: PUSH
53768: DOUBLE
53769: LD_INT 1
53771: DEC
53772: ST_TO_ADDR
53773: LD_INT 16
53775: PUSH
53776: FOR_TO
53777: IFFALSE 53976
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53779: LD_ADDR_VAR 0 3
53783: PUSH
53784: LD_INT 10
53786: PUSH
53787: LD_INT 20
53789: PUSH
53790: LD_INT 30
53792: PUSH
53793: LD_INT 40
53795: PUSH
53796: LD_INT 50
53798: PUSH
53799: LD_INT 60
53801: PUSH
53802: LD_INT 70
53804: PUSH
53805: LD_INT 80
53807: PUSH
53808: LD_INT 90
53810: PUSH
53811: LD_INT 100
53813: PUSH
53814: LD_INT 110
53816: PUSH
53817: LD_INT 120
53819: PUSH
53820: LD_INT 130
53822: PUSH
53823: LD_INT 140
53825: PUSH
53826: LD_INT 150
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PPUSH
53849: LD_INT 15
53851: PPUSH
53852: CALL_OW 12
53856: ARRAY
53857: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53858: LD_ADDR_VAR 0 4
53862: PUSH
53863: LD_INT 10
53865: PUSH
53866: LD_INT 20
53868: PUSH
53869: LD_INT 30
53871: PUSH
53872: LD_INT 40
53874: PUSH
53875: LD_INT 50
53877: PUSH
53878: LD_INT 60
53880: PUSH
53881: LD_INT 70
53883: PUSH
53884: LD_INT 80
53886: PUSH
53887: LD_INT 90
53889: PUSH
53890: LD_INT 100
53892: PUSH
53893: LD_INT 110
53895: PUSH
53896: LD_INT 120
53898: PUSH
53899: LD_INT 130
53901: PUSH
53902: LD_INT 140
53904: PUSH
53905: LD_INT 150
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PPUSH
53928: LD_INT 15
53930: PPUSH
53931: CALL_OW 12
53935: ARRAY
53936: ST_TO_ADDR
// if ValidHex ( x , y ) then
53937: LD_VAR 0 3
53941: PPUSH
53942: LD_VAR 0 4
53946: PPUSH
53947: CALL_OW 488
53951: IFFALSE 53974
// begin result := [ x , y ] ;
53953: LD_ADDR_VAR 0 1
53957: PUSH
53958: LD_VAR 0 3
53962: PUSH
53963: LD_VAR 0 4
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: ST_TO_ADDR
// break ;
53972: GO 53976
// end ; end ;
53974: GO 53776
53976: POP
53977: POP
// if result then
53978: LD_VAR 0 1
53982: IFFALSE 54042
// begin ToLua ( playSibBomb() ) ;
53984: LD_STRING playSibBomb()
53986: PPUSH
53987: CALL_OW 559
// wait ( 0 0$14 ) ;
53991: LD_INT 490
53993: PPUSH
53994: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53998: LD_VAR 0 1
54002: PUSH
54003: LD_INT 1
54005: ARRAY
54006: PPUSH
54007: LD_VAR 0 1
54011: PUSH
54012: LD_INT 2
54014: ARRAY
54015: PPUSH
54016: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54020: LD_VAR 0 1
54024: PUSH
54025: LD_INT 1
54027: ARRAY
54028: PPUSH
54029: LD_VAR 0 1
54033: PUSH
54034: LD_INT 2
54036: ARRAY
54037: PPUSH
54038: CALL_OW 429
// end ; end ;
54042: LD_VAR 0 1
54046: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54047: LD_EXP 28
54051: PUSH
54052: LD_EXP 50
54056: AND
54057: IFFALSE 54069
54059: GO 54061
54061: DISABLE
// YouLost (  ) ;
54062: LD_STRING 
54064: PPUSH
54065: CALL_OW 104
54069: END
// every 0 0$1 trigger StreamModeActive and sFog do
54070: LD_EXP 28
54074: PUSH
54075: LD_EXP 49
54079: AND
54080: IFFALSE 54094
54082: GO 54084
54084: DISABLE
// FogOff ( your_side ) ;
54085: LD_OWVAR 2
54089: PPUSH
54090: CALL_OW 344
54094: END
// every 0 0$1 trigger StreamModeActive and sSun do
54095: LD_EXP 28
54099: PUSH
54100: LD_EXP 51
54104: AND
54105: IFFALSE 54133
54107: GO 54109
54109: DISABLE
// begin solar_recharge_percent := 0 ;
54110: LD_ADDR_OWVAR 79
54114: PUSH
54115: LD_INT 0
54117: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54118: LD_INT 10500
54120: PPUSH
54121: CALL_OW 67
// solar_recharge_percent := 100 ;
54125: LD_ADDR_OWVAR 79
54129: PUSH
54130: LD_INT 100
54132: ST_TO_ADDR
// end ;
54133: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54134: LD_EXP 28
54138: PUSH
54139: LD_EXP 52
54143: AND
54144: IFFALSE 54383
54146: GO 54148
54148: DISABLE
54149: LD_INT 0
54151: PPUSH
54152: PPUSH
54153: PPUSH
// begin tmp := [ ] ;
54154: LD_ADDR_VAR 0 3
54158: PUSH
54159: EMPTY
54160: ST_TO_ADDR
// for i := 1 to 6 do
54161: LD_ADDR_VAR 0 1
54165: PUSH
54166: DOUBLE
54167: LD_INT 1
54169: DEC
54170: ST_TO_ADDR
54171: LD_INT 6
54173: PUSH
54174: FOR_TO
54175: IFFALSE 54280
// begin uc_nation := nation_nature ;
54177: LD_ADDR_OWVAR 21
54181: PUSH
54182: LD_INT 0
54184: ST_TO_ADDR
// uc_side := 0 ;
54185: LD_ADDR_OWVAR 20
54189: PUSH
54190: LD_INT 0
54192: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54193: LD_ADDR_OWVAR 29
54197: PUSH
54198: LD_INT 12
54200: PUSH
54201: LD_INT 12
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// hc_agressivity := 20 ;
54208: LD_ADDR_OWVAR 35
54212: PUSH
54213: LD_INT 20
54215: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54216: LD_ADDR_OWVAR 28
54220: PUSH
54221: LD_INT 17
54223: ST_TO_ADDR
// hc_gallery :=  ;
54224: LD_ADDR_OWVAR 33
54228: PUSH
54229: LD_STRING 
54231: ST_TO_ADDR
// hc_name :=  ;
54232: LD_ADDR_OWVAR 26
54236: PUSH
54237: LD_STRING 
54239: ST_TO_ADDR
// un := CreateHuman ;
54240: LD_ADDR_VAR 0 2
54244: PUSH
54245: CALL_OW 44
54249: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54250: LD_VAR 0 2
54254: PPUSH
54255: LD_INT 1
54257: PPUSH
54258: CALL_OW 51
// tmp := tmp ^ un ;
54262: LD_ADDR_VAR 0 3
54266: PUSH
54267: LD_VAR 0 3
54271: PUSH
54272: LD_VAR 0 2
54276: ADD
54277: ST_TO_ADDR
// end ;
54278: GO 54174
54280: POP
54281: POP
// repeat wait ( 0 0$1 ) ;
54282: LD_INT 35
54284: PPUSH
54285: CALL_OW 67
// for un in tmp do
54289: LD_ADDR_VAR 0 2
54293: PUSH
54294: LD_VAR 0 3
54298: PUSH
54299: FOR_IN
54300: IFFALSE 54374
// begin if IsDead ( un ) then
54302: LD_VAR 0 2
54306: PPUSH
54307: CALL_OW 301
54311: IFFALSE 54331
// begin tmp := tmp diff un ;
54313: LD_ADDR_VAR 0 3
54317: PUSH
54318: LD_VAR 0 3
54322: PUSH
54323: LD_VAR 0 2
54327: DIFF
54328: ST_TO_ADDR
// continue ;
54329: GO 54299
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54331: LD_VAR 0 2
54335: PPUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 22
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PPUSH
54353: CALL_OW 69
54357: PPUSH
54358: LD_VAR 0 2
54362: PPUSH
54363: CALL_OW 74
54367: PPUSH
54368: CALL_OW 115
// end ;
54372: GO 54299
54374: POP
54375: POP
// until not tmp ;
54376: LD_VAR 0 3
54380: NOT
54381: IFFALSE 54282
// end ;
54383: PPOPN 3
54385: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54386: LD_EXP 28
54390: PUSH
54391: LD_EXP 53
54395: AND
54396: IFFALSE 54450
54398: GO 54400
54400: DISABLE
// begin ToLua ( displayTroll(); ) ;
54401: LD_STRING displayTroll();
54403: PPUSH
54404: CALL_OW 559
// wait ( 3 3$00 ) ;
54408: LD_INT 6300
54410: PPUSH
54411: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54415: LD_STRING hideTroll();
54417: PPUSH
54418: CALL_OW 559
// wait ( 1 1$00 ) ;
54422: LD_INT 2100
54424: PPUSH
54425: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54429: LD_STRING displayTroll();
54431: PPUSH
54432: CALL_OW 559
// wait ( 1 1$00 ) ;
54436: LD_INT 2100
54438: PPUSH
54439: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54443: LD_STRING hideTroll();
54445: PPUSH
54446: CALL_OW 559
// end ;
54450: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54451: LD_EXP 28
54455: PUSH
54456: LD_EXP 54
54460: AND
54461: IFFALSE 54524
54463: GO 54465
54465: DISABLE
54466: LD_INT 0
54468: PPUSH
// begin p := 0 ;
54469: LD_ADDR_VAR 0 1
54473: PUSH
54474: LD_INT 0
54476: ST_TO_ADDR
// repeat game_speed := 1 ;
54477: LD_ADDR_OWVAR 65
54481: PUSH
54482: LD_INT 1
54484: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54485: LD_INT 35
54487: PPUSH
54488: CALL_OW 67
// p := p + 1 ;
54492: LD_ADDR_VAR 0 1
54496: PUSH
54497: LD_VAR 0 1
54501: PUSH
54502: LD_INT 1
54504: PLUS
54505: ST_TO_ADDR
// until p >= 60 ;
54506: LD_VAR 0 1
54510: PUSH
54511: LD_INT 60
54513: GREATEREQUAL
54514: IFFALSE 54477
// game_speed := 4 ;
54516: LD_ADDR_OWVAR 65
54520: PUSH
54521: LD_INT 4
54523: ST_TO_ADDR
// end ;
54524: PPOPN 1
54526: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54527: LD_EXP 28
54531: PUSH
54532: LD_EXP 55
54536: AND
54537: IFFALSE 54683
54539: GO 54541
54541: DISABLE
54542: LD_INT 0
54544: PPUSH
54545: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54546: LD_ADDR_VAR 0 1
54550: PUSH
54551: LD_INT 22
54553: PUSH
54554: LD_OWVAR 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 30
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 30
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PPUSH
54595: CALL_OW 69
54599: ST_TO_ADDR
// if not depot then
54600: LD_VAR 0 1
54604: NOT
54605: IFFALSE 54609
// exit ;
54607: GO 54683
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54609: LD_ADDR_VAR 0 2
54613: PUSH
54614: LD_VAR 0 1
54618: PUSH
54619: LD_INT 1
54621: PPUSH
54622: LD_VAR 0 1
54626: PPUSH
54627: CALL_OW 12
54631: ARRAY
54632: PPUSH
54633: CALL_OW 274
54637: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54638: LD_VAR 0 2
54642: PPUSH
54643: LD_INT 1
54645: PPUSH
54646: LD_INT 0
54648: PPUSH
54649: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54653: LD_VAR 0 2
54657: PPUSH
54658: LD_INT 2
54660: PPUSH
54661: LD_INT 0
54663: PPUSH
54664: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54668: LD_VAR 0 2
54672: PPUSH
54673: LD_INT 3
54675: PPUSH
54676: LD_INT 0
54678: PPUSH
54679: CALL_OW 277
// end ;
54683: PPOPN 2
54685: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54686: LD_EXP 28
54690: PUSH
54691: LD_EXP 56
54695: AND
54696: IFFALSE 54793
54698: GO 54700
54700: DISABLE
54701: LD_INT 0
54703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54704: LD_ADDR_VAR 0 1
54708: PUSH
54709: LD_INT 22
54711: PUSH
54712: LD_OWVAR 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 21
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: LD_INT 23
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: PPUSH
54753: CALL_OW 69
54757: ST_TO_ADDR
// if not tmp then
54758: LD_VAR 0 1
54762: NOT
54763: IFFALSE 54767
// exit ;
54765: GO 54793
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54767: LD_VAR 0 1
54771: PUSH
54772: LD_INT 1
54774: PPUSH
54775: LD_VAR 0 1
54779: PPUSH
54780: CALL_OW 12
54784: ARRAY
54785: PPUSH
54786: LD_INT 200
54788: PPUSH
54789: CALL_OW 234
// end ;
54793: PPOPN 1
54795: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54796: LD_EXP 28
54800: PUSH
54801: LD_EXP 57
54805: AND
54806: IFFALSE 54885
54808: GO 54810
54810: DISABLE
54811: LD_INT 0
54813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54814: LD_ADDR_VAR 0 1
54818: PUSH
54819: LD_INT 22
54821: PUSH
54822: LD_OWVAR 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 21
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PPUSH
54845: CALL_OW 69
54849: ST_TO_ADDR
// if not tmp then
54850: LD_VAR 0 1
54854: NOT
54855: IFFALSE 54859
// exit ;
54857: GO 54885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54859: LD_VAR 0 1
54863: PUSH
54864: LD_INT 1
54866: PPUSH
54867: LD_VAR 0 1
54871: PPUSH
54872: CALL_OW 12
54876: ARRAY
54877: PPUSH
54878: LD_INT 60
54880: PPUSH
54881: CALL_OW 234
// end ;
54885: PPOPN 1
54887: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54888: LD_EXP 28
54892: PUSH
54893: LD_EXP 58
54897: AND
54898: IFFALSE 54997
54900: GO 54902
54902: DISABLE
54903: LD_INT 0
54905: PPUSH
54906: PPUSH
// begin enable ;
54907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54908: LD_ADDR_VAR 0 1
54912: PUSH
54913: LD_INT 22
54915: PUSH
54916: LD_OWVAR 2
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 61
54927: PUSH
54928: EMPTY
54929: LIST
54930: PUSH
54931: LD_INT 33
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: PPUSH
54946: CALL_OW 69
54950: ST_TO_ADDR
// if not tmp then
54951: LD_VAR 0 1
54955: NOT
54956: IFFALSE 54960
// exit ;
54958: GO 54997
// for i in tmp do
54960: LD_ADDR_VAR 0 2
54964: PUSH
54965: LD_VAR 0 1
54969: PUSH
54970: FOR_IN
54971: IFFALSE 54995
// if IsControledBy ( i ) then
54973: LD_VAR 0 2
54977: PPUSH
54978: CALL_OW 312
54982: IFFALSE 54993
// ComUnlink ( i ) ;
54984: LD_VAR 0 2
54988: PPUSH
54989: CALL_OW 136
54993: GO 54970
54995: POP
54996: POP
// end ;
54997: PPOPN 2
54999: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55000: LD_EXP 28
55004: PUSH
55005: LD_EXP 59
55009: AND
55010: IFFALSE 55150
55012: GO 55014
55014: DISABLE
55015: LD_INT 0
55017: PPUSH
55018: PPUSH
// begin ToLua ( displayPowell(); ) ;
55019: LD_STRING displayPowell();
55021: PPUSH
55022: CALL_OW 559
// uc_side := 0 ;
55026: LD_ADDR_OWVAR 20
55030: PUSH
55031: LD_INT 0
55033: ST_TO_ADDR
// uc_nation := 2 ;
55034: LD_ADDR_OWVAR 21
55038: PUSH
55039: LD_INT 2
55041: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55042: LD_ADDR_OWVAR 37
55046: PUSH
55047: LD_INT 14
55049: ST_TO_ADDR
// vc_engine := engine_siberite ;
55050: LD_ADDR_OWVAR 39
55054: PUSH
55055: LD_INT 3
55057: ST_TO_ADDR
// vc_control := control_apeman ;
55058: LD_ADDR_OWVAR 38
55062: PUSH
55063: LD_INT 5
55065: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55066: LD_ADDR_OWVAR 40
55070: PUSH
55071: LD_INT 29
55073: ST_TO_ADDR
// un := CreateVehicle ;
55074: LD_ADDR_VAR 0 2
55078: PUSH
55079: CALL_OW 45
55083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55084: LD_VAR 0 2
55088: PPUSH
55089: LD_INT 1
55091: PPUSH
55092: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55096: LD_INT 35
55098: PPUSH
55099: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55103: LD_VAR 0 2
55107: PPUSH
55108: LD_INT 22
55110: PUSH
55111: LD_OWVAR 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PPUSH
55120: CALL_OW 69
55124: PPUSH
55125: LD_VAR 0 2
55129: PPUSH
55130: CALL_OW 74
55134: PPUSH
55135: CALL_OW 115
// until IsDead ( un ) ;
55139: LD_VAR 0 2
55143: PPUSH
55144: CALL_OW 301
55148: IFFALSE 55096
// end ;
55150: PPOPN 2
55152: END
// every 0 0$1 trigger StreamModeActive and sStu do
55153: LD_EXP 28
55157: PUSH
55158: LD_EXP 67
55162: AND
55163: IFFALSE 55179
55165: GO 55167
55167: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55168: LD_STRING displayStucuk();
55170: PPUSH
55171: CALL_OW 559
// ResetFog ;
55175: CALL_OW 335
// end ;
55179: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55180: LD_EXP 28
55184: PUSH
55185: LD_EXP 60
55189: AND
55190: IFFALSE 55331
55192: GO 55194
55194: DISABLE
55195: LD_INT 0
55197: PPUSH
55198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55199: LD_ADDR_VAR 0 2
55203: PUSH
55204: LD_INT 22
55206: PUSH
55207: LD_OWVAR 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 21
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PPUSH
55230: CALL_OW 69
55234: ST_TO_ADDR
// if not tmp then
55235: LD_VAR 0 2
55239: NOT
55240: IFFALSE 55244
// exit ;
55242: GO 55331
// un := tmp [ rand ( 1 , tmp ) ] ;
55244: LD_ADDR_VAR 0 1
55248: PUSH
55249: LD_VAR 0 2
55253: PUSH
55254: LD_INT 1
55256: PPUSH
55257: LD_VAR 0 2
55261: PPUSH
55262: CALL_OW 12
55266: ARRAY
55267: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55268: LD_VAR 0 1
55272: PPUSH
55273: LD_INT 0
55275: PPUSH
55276: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55280: LD_VAR 0 1
55284: PPUSH
55285: LD_OWVAR 3
55289: PUSH
55290: LD_VAR 0 1
55294: DIFF
55295: PPUSH
55296: LD_VAR 0 1
55300: PPUSH
55301: CALL_OW 74
55305: PPUSH
55306: CALL_OW 115
// wait ( 0 0$20 ) ;
55310: LD_INT 700
55312: PPUSH
55313: CALL_OW 67
// SetSide ( un , your_side ) ;
55317: LD_VAR 0 1
55321: PPUSH
55322: LD_OWVAR 2
55326: PPUSH
55327: CALL_OW 235
// end ;
55331: PPOPN 2
55333: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55334: LD_EXP 28
55338: PUSH
55339: LD_EXP 61
55343: AND
55344: IFFALSE 55450
55346: GO 55348
55348: DISABLE
55349: LD_INT 0
55351: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55352: LD_ADDR_VAR 0 1
55356: PUSH
55357: LD_INT 22
55359: PUSH
55360: LD_OWVAR 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 30
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 30
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PPUSH
55401: CALL_OW 69
55405: ST_TO_ADDR
// if not depot then
55406: LD_VAR 0 1
55410: NOT
55411: IFFALSE 55415
// exit ;
55413: GO 55450
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55415: LD_VAR 0 1
55419: PUSH
55420: LD_INT 1
55422: ARRAY
55423: PPUSH
55424: CALL_OW 250
55428: PPUSH
55429: LD_VAR 0 1
55433: PUSH
55434: LD_INT 1
55436: ARRAY
55437: PPUSH
55438: CALL_OW 251
55442: PPUSH
55443: LD_INT 70
55445: PPUSH
55446: CALL_OW 495
// end ;
55450: PPOPN 1
55452: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55453: LD_EXP 28
55457: PUSH
55458: LD_EXP 62
55462: AND
55463: IFFALSE 55674
55465: GO 55467
55467: DISABLE
55468: LD_INT 0
55470: PPUSH
55471: PPUSH
55472: PPUSH
55473: PPUSH
55474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55475: LD_ADDR_VAR 0 5
55479: PUSH
55480: LD_INT 22
55482: PUSH
55483: LD_OWVAR 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 21
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PPUSH
55506: CALL_OW 69
55510: ST_TO_ADDR
// if not tmp then
55511: LD_VAR 0 5
55515: NOT
55516: IFFALSE 55520
// exit ;
55518: GO 55674
// for i in tmp do
55520: LD_ADDR_VAR 0 1
55524: PUSH
55525: LD_VAR 0 5
55529: PUSH
55530: FOR_IN
55531: IFFALSE 55672
// begin d := rand ( 0 , 5 ) ;
55533: LD_ADDR_VAR 0 4
55537: PUSH
55538: LD_INT 0
55540: PPUSH
55541: LD_INT 5
55543: PPUSH
55544: CALL_OW 12
55548: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55549: LD_ADDR_VAR 0 2
55553: PUSH
55554: LD_VAR 0 1
55558: PPUSH
55559: CALL_OW 250
55563: PPUSH
55564: LD_VAR 0 4
55568: PPUSH
55569: LD_INT 3
55571: PPUSH
55572: LD_INT 12
55574: PPUSH
55575: CALL_OW 12
55579: PPUSH
55580: CALL_OW 272
55584: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55585: LD_ADDR_VAR 0 3
55589: PUSH
55590: LD_VAR 0 1
55594: PPUSH
55595: CALL_OW 251
55599: PPUSH
55600: LD_VAR 0 4
55604: PPUSH
55605: LD_INT 3
55607: PPUSH
55608: LD_INT 12
55610: PPUSH
55611: CALL_OW 12
55615: PPUSH
55616: CALL_OW 273
55620: ST_TO_ADDR
// if ValidHex ( x , y ) then
55621: LD_VAR 0 2
55625: PPUSH
55626: LD_VAR 0 3
55630: PPUSH
55631: CALL_OW 488
55635: IFFALSE 55670
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55637: LD_VAR 0 1
55641: PPUSH
55642: LD_VAR 0 2
55646: PPUSH
55647: LD_VAR 0 3
55651: PPUSH
55652: LD_INT 3
55654: PPUSH
55655: LD_INT 6
55657: PPUSH
55658: CALL_OW 12
55662: PPUSH
55663: LD_INT 1
55665: PPUSH
55666: CALL_OW 483
// end ;
55670: GO 55530
55672: POP
55673: POP
// end ;
55674: PPOPN 5
55676: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55677: LD_EXP 28
55681: PUSH
55682: LD_EXP 63
55686: AND
55687: IFFALSE 55781
55689: GO 55691
55691: DISABLE
55692: LD_INT 0
55694: PPUSH
55695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55696: LD_ADDR_VAR 0 2
55700: PUSH
55701: LD_INT 22
55703: PUSH
55704: LD_OWVAR 2
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 32
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 21
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: PPUSH
55738: CALL_OW 69
55742: ST_TO_ADDR
// if not tmp then
55743: LD_VAR 0 2
55747: NOT
55748: IFFALSE 55752
// exit ;
55750: GO 55781
// for i in tmp do
55752: LD_ADDR_VAR 0 1
55756: PUSH
55757: LD_VAR 0 2
55761: PUSH
55762: FOR_IN
55763: IFFALSE 55779
// SetFuel ( i , 0 ) ;
55765: LD_VAR 0 1
55769: PPUSH
55770: LD_INT 0
55772: PPUSH
55773: CALL_OW 240
55777: GO 55762
55779: POP
55780: POP
// end ;
55781: PPOPN 2
55783: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55784: LD_EXP 28
55788: PUSH
55789: LD_EXP 64
55793: AND
55794: IFFALSE 55860
55796: GO 55798
55798: DISABLE
55799: LD_INT 0
55801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55802: LD_ADDR_VAR 0 1
55806: PUSH
55807: LD_INT 22
55809: PUSH
55810: LD_OWVAR 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 30
55821: PUSH
55822: LD_INT 29
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PPUSH
55833: CALL_OW 69
55837: ST_TO_ADDR
// if not tmp then
55838: LD_VAR 0 1
55842: NOT
55843: IFFALSE 55847
// exit ;
55845: GO 55860
// DestroyUnit ( tmp [ 1 ] ) ;
55847: LD_VAR 0 1
55851: PUSH
55852: LD_INT 1
55854: ARRAY
55855: PPUSH
55856: CALL_OW 65
// end ;
55860: PPOPN 1
55862: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55863: LD_EXP 28
55867: PUSH
55868: LD_EXP 66
55872: AND
55873: IFFALSE 56002
55875: GO 55877
55877: DISABLE
55878: LD_INT 0
55880: PPUSH
// begin uc_side := 0 ;
55881: LD_ADDR_OWVAR 20
55885: PUSH
55886: LD_INT 0
55888: ST_TO_ADDR
// uc_nation := nation_arabian ;
55889: LD_ADDR_OWVAR 21
55893: PUSH
55894: LD_INT 2
55896: ST_TO_ADDR
// hc_gallery :=  ;
55897: LD_ADDR_OWVAR 33
55901: PUSH
55902: LD_STRING 
55904: ST_TO_ADDR
// hc_name :=  ;
55905: LD_ADDR_OWVAR 26
55909: PUSH
55910: LD_STRING 
55912: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55913: LD_INT 1
55915: PPUSH
55916: LD_INT 11
55918: PPUSH
55919: LD_INT 10
55921: PPUSH
55922: CALL_OW 380
// un := CreateHuman ;
55926: LD_ADDR_VAR 0 1
55930: PUSH
55931: CALL_OW 44
55935: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55936: LD_VAR 0 1
55940: PPUSH
55941: LD_INT 1
55943: PPUSH
55944: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55948: LD_INT 35
55950: PPUSH
55951: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55955: LD_VAR 0 1
55959: PPUSH
55960: LD_INT 22
55962: PUSH
55963: LD_OWVAR 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PPUSH
55972: CALL_OW 69
55976: PPUSH
55977: LD_VAR 0 1
55981: PPUSH
55982: CALL_OW 74
55986: PPUSH
55987: CALL_OW 115
// until IsDead ( un ) ;
55991: LD_VAR 0 1
55995: PPUSH
55996: CALL_OW 301
56000: IFFALSE 55948
// end ;
56002: PPOPN 1
56004: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56005: LD_EXP 28
56009: PUSH
56010: LD_EXP 68
56014: AND
56015: IFFALSE 56027
56017: GO 56019
56019: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56020: LD_STRING earthquake(getX(game), 0, 32)
56022: PPUSH
56023: CALL_OW 559
56027: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56028: LD_EXP 28
56032: PUSH
56033: LD_EXP 69
56037: AND
56038: IFFALSE 56129
56040: GO 56042
56042: DISABLE
56043: LD_INT 0
56045: PPUSH
// begin enable ;
56046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56047: LD_ADDR_VAR 0 1
56051: PUSH
56052: LD_INT 22
56054: PUSH
56055: LD_OWVAR 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 21
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 33
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: PPUSH
56089: CALL_OW 69
56093: ST_TO_ADDR
// if not tmp then
56094: LD_VAR 0 1
56098: NOT
56099: IFFALSE 56103
// exit ;
56101: GO 56129
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56103: LD_VAR 0 1
56107: PUSH
56108: LD_INT 1
56110: PPUSH
56111: LD_VAR 0 1
56115: PPUSH
56116: CALL_OW 12
56120: ARRAY
56121: PPUSH
56122: LD_INT 1
56124: PPUSH
56125: CALL_OW 234
// end ;
56129: PPOPN 1
56131: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56132: LD_EXP 28
56136: PUSH
56137: LD_EXP 70
56141: AND
56142: IFFALSE 56283
56144: GO 56146
56146: DISABLE
56147: LD_INT 0
56149: PPUSH
56150: PPUSH
56151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56152: LD_ADDR_VAR 0 3
56156: PUSH
56157: LD_INT 22
56159: PUSH
56160: LD_OWVAR 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 25
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PPUSH
56183: CALL_OW 69
56187: ST_TO_ADDR
// if not tmp then
56188: LD_VAR 0 3
56192: NOT
56193: IFFALSE 56197
// exit ;
56195: GO 56283
// un := tmp [ rand ( 1 , tmp ) ] ;
56197: LD_ADDR_VAR 0 2
56201: PUSH
56202: LD_VAR 0 3
56206: PUSH
56207: LD_INT 1
56209: PPUSH
56210: LD_VAR 0 3
56214: PPUSH
56215: CALL_OW 12
56219: ARRAY
56220: ST_TO_ADDR
// if Crawls ( un ) then
56221: LD_VAR 0 2
56225: PPUSH
56226: CALL_OW 318
56230: IFFALSE 56241
// ComWalk ( un ) ;
56232: LD_VAR 0 2
56236: PPUSH
56237: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56241: LD_VAR 0 2
56245: PPUSH
56246: LD_INT 9
56248: PPUSH
56249: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56253: LD_INT 28
56255: PPUSH
56256: LD_OWVAR 2
56260: PPUSH
56261: LD_INT 2
56263: PPUSH
56264: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56268: LD_INT 29
56270: PPUSH
56271: LD_OWVAR 2
56275: PPUSH
56276: LD_INT 2
56278: PPUSH
56279: CALL_OW 322
// end ;
56283: PPOPN 3
56285: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56286: LD_EXP 28
56290: PUSH
56291: LD_EXP 71
56295: AND
56296: IFFALSE 56407
56298: GO 56300
56300: DISABLE
56301: LD_INT 0
56303: PPUSH
56304: PPUSH
56305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56306: LD_ADDR_VAR 0 3
56310: PUSH
56311: LD_INT 22
56313: PUSH
56314: LD_OWVAR 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 25
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PPUSH
56337: CALL_OW 69
56341: ST_TO_ADDR
// if not tmp then
56342: LD_VAR 0 3
56346: NOT
56347: IFFALSE 56351
// exit ;
56349: GO 56407
// un := tmp [ rand ( 1 , tmp ) ] ;
56351: LD_ADDR_VAR 0 2
56355: PUSH
56356: LD_VAR 0 3
56360: PUSH
56361: LD_INT 1
56363: PPUSH
56364: LD_VAR 0 3
56368: PPUSH
56369: CALL_OW 12
56373: ARRAY
56374: ST_TO_ADDR
// if Crawls ( un ) then
56375: LD_VAR 0 2
56379: PPUSH
56380: CALL_OW 318
56384: IFFALSE 56395
// ComWalk ( un ) ;
56386: LD_VAR 0 2
56390: PPUSH
56391: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56395: LD_VAR 0 2
56399: PPUSH
56400: LD_INT 8
56402: PPUSH
56403: CALL_OW 336
// end ;
56407: PPOPN 3
56409: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56410: LD_EXP 28
56414: PUSH
56415: LD_EXP 72
56419: AND
56420: IFFALSE 56564
56422: GO 56424
56424: DISABLE
56425: LD_INT 0
56427: PPUSH
56428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56429: LD_ADDR_VAR 0 2
56433: PUSH
56434: LD_INT 22
56436: PUSH
56437: LD_OWVAR 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 21
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 34
56461: PUSH
56462: LD_INT 12
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 34
56471: PUSH
56472: LD_INT 51
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 34
56481: PUSH
56482: LD_INT 32
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: PPUSH
56500: CALL_OW 69
56504: ST_TO_ADDR
// if not tmp then
56505: LD_VAR 0 2
56509: NOT
56510: IFFALSE 56514
// exit ;
56512: GO 56564
// for i in tmp do
56514: LD_ADDR_VAR 0 1
56518: PUSH
56519: LD_VAR 0 2
56523: PUSH
56524: FOR_IN
56525: IFFALSE 56562
// if GetCargo ( i , mat_artifact ) = 0 then
56527: LD_VAR 0 1
56531: PPUSH
56532: LD_INT 4
56534: PPUSH
56535: CALL_OW 289
56539: PUSH
56540: LD_INT 0
56542: EQUAL
56543: IFFALSE 56560
// SetCargo ( i , mat_siberit , 100 ) ;
56545: LD_VAR 0 1
56549: PPUSH
56550: LD_INT 3
56552: PPUSH
56553: LD_INT 100
56555: PPUSH
56556: CALL_OW 290
56560: GO 56524
56562: POP
56563: POP
// end ;
56564: PPOPN 2
56566: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56567: LD_EXP 28
56571: PUSH
56572: LD_EXP 73
56576: AND
56577: IFFALSE 56760
56579: GO 56581
56581: DISABLE
56582: LD_INT 0
56584: PPUSH
56585: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56586: LD_ADDR_VAR 0 2
56590: PUSH
56591: LD_INT 22
56593: PUSH
56594: LD_OWVAR 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PPUSH
56603: CALL_OW 69
56607: ST_TO_ADDR
// if not tmp then
56608: LD_VAR 0 2
56612: NOT
56613: IFFALSE 56617
// exit ;
56615: GO 56760
// for i := 1 to 2 do
56617: LD_ADDR_VAR 0 1
56621: PUSH
56622: DOUBLE
56623: LD_INT 1
56625: DEC
56626: ST_TO_ADDR
56627: LD_INT 2
56629: PUSH
56630: FOR_TO
56631: IFFALSE 56758
// begin uc_side := your_side ;
56633: LD_ADDR_OWVAR 20
56637: PUSH
56638: LD_OWVAR 2
56642: ST_TO_ADDR
// uc_nation := nation_american ;
56643: LD_ADDR_OWVAR 21
56647: PUSH
56648: LD_INT 1
56650: ST_TO_ADDR
// vc_chassis := us_morphling ;
56651: LD_ADDR_OWVAR 37
56655: PUSH
56656: LD_INT 5
56658: ST_TO_ADDR
// vc_engine := engine_siberite ;
56659: LD_ADDR_OWVAR 39
56663: PUSH
56664: LD_INT 3
56666: ST_TO_ADDR
// vc_control := control_computer ;
56667: LD_ADDR_OWVAR 38
56671: PUSH
56672: LD_INT 3
56674: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56675: LD_ADDR_OWVAR 40
56679: PUSH
56680: LD_INT 10
56682: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56683: LD_VAR 0 2
56687: PUSH
56688: LD_INT 1
56690: ARRAY
56691: PPUSH
56692: CALL_OW 310
56696: NOT
56697: IFFALSE 56744
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56699: CALL_OW 45
56703: PPUSH
56704: LD_VAR 0 2
56708: PUSH
56709: LD_INT 1
56711: ARRAY
56712: PPUSH
56713: CALL_OW 250
56717: PPUSH
56718: LD_VAR 0 2
56722: PUSH
56723: LD_INT 1
56725: ARRAY
56726: PPUSH
56727: CALL_OW 251
56731: PPUSH
56732: LD_INT 12
56734: PPUSH
56735: LD_INT 1
56737: PPUSH
56738: CALL_OW 50
56742: GO 56756
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56744: CALL_OW 45
56748: PPUSH
56749: LD_INT 1
56751: PPUSH
56752: CALL_OW 51
// end ;
56756: GO 56630
56758: POP
56759: POP
// end ;
56760: PPOPN 2
56762: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56763: LD_EXP 28
56767: PUSH
56768: LD_EXP 74
56772: AND
56773: IFFALSE 56995
56775: GO 56777
56777: DISABLE
56778: LD_INT 0
56780: PPUSH
56781: PPUSH
56782: PPUSH
56783: PPUSH
56784: PPUSH
56785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56786: LD_ADDR_VAR 0 6
56790: PUSH
56791: LD_INT 22
56793: PUSH
56794: LD_OWVAR 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 21
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: LD_INT 23
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: LIST
56834: PPUSH
56835: CALL_OW 69
56839: ST_TO_ADDR
// if not tmp then
56840: LD_VAR 0 6
56844: NOT
56845: IFFALSE 56849
// exit ;
56847: GO 56995
// s1 := rand ( 1 , 4 ) ;
56849: LD_ADDR_VAR 0 2
56853: PUSH
56854: LD_INT 1
56856: PPUSH
56857: LD_INT 4
56859: PPUSH
56860: CALL_OW 12
56864: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56865: LD_ADDR_VAR 0 4
56869: PUSH
56870: LD_VAR 0 6
56874: PUSH
56875: LD_INT 1
56877: ARRAY
56878: PPUSH
56879: LD_VAR 0 2
56883: PPUSH
56884: CALL_OW 259
56888: ST_TO_ADDR
// if s1 = 1 then
56889: LD_VAR 0 2
56893: PUSH
56894: LD_INT 1
56896: EQUAL
56897: IFFALSE 56917
// s2 := rand ( 2 , 4 ) else
56899: LD_ADDR_VAR 0 3
56903: PUSH
56904: LD_INT 2
56906: PPUSH
56907: LD_INT 4
56909: PPUSH
56910: CALL_OW 12
56914: ST_TO_ADDR
56915: GO 56925
// s2 := 1 ;
56917: LD_ADDR_VAR 0 3
56921: PUSH
56922: LD_INT 1
56924: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56925: LD_ADDR_VAR 0 5
56929: PUSH
56930: LD_VAR 0 6
56934: PUSH
56935: LD_INT 1
56937: ARRAY
56938: PPUSH
56939: LD_VAR 0 3
56943: PPUSH
56944: CALL_OW 259
56948: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56949: LD_VAR 0 6
56953: PUSH
56954: LD_INT 1
56956: ARRAY
56957: PPUSH
56958: LD_VAR 0 2
56962: PPUSH
56963: LD_VAR 0 5
56967: PPUSH
56968: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56972: LD_VAR 0 6
56976: PUSH
56977: LD_INT 1
56979: ARRAY
56980: PPUSH
56981: LD_VAR 0 3
56985: PPUSH
56986: LD_VAR 0 4
56990: PPUSH
56991: CALL_OW 237
// end ;
56995: PPOPN 6
56997: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56998: LD_EXP 28
57002: PUSH
57003: LD_EXP 75
57007: AND
57008: IFFALSE 57087
57010: GO 57012
57012: DISABLE
57013: LD_INT 0
57015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57016: LD_ADDR_VAR 0 1
57020: PUSH
57021: LD_INT 22
57023: PUSH
57024: LD_OWVAR 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 30
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PPUSH
57047: CALL_OW 69
57051: ST_TO_ADDR
// if not tmp then
57052: LD_VAR 0 1
57056: NOT
57057: IFFALSE 57061
// exit ;
57059: GO 57087
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57061: LD_VAR 0 1
57065: PUSH
57066: LD_INT 1
57068: PPUSH
57069: LD_VAR 0 1
57073: PPUSH
57074: CALL_OW 12
57078: ARRAY
57079: PPUSH
57080: LD_INT 1
57082: PPUSH
57083: CALL_OW 234
// end ;
57087: PPOPN 1
57089: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57090: LD_EXP 28
57094: PUSH
57095: LD_EXP 76
57099: AND
57100: IFFALSE 57212
57102: GO 57104
57104: DISABLE
57105: LD_INT 0
57107: PPUSH
57108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57109: LD_ADDR_VAR 0 2
57113: PUSH
57114: LD_INT 22
57116: PUSH
57117: LD_OWVAR 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 30
57131: PUSH
57132: LD_INT 27
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 30
57141: PUSH
57142: LD_INT 26
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 30
57151: PUSH
57152: LD_INT 28
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PPUSH
57169: CALL_OW 69
57173: ST_TO_ADDR
// if not tmp then
57174: LD_VAR 0 2
57178: NOT
57179: IFFALSE 57183
// exit ;
57181: GO 57212
// for i in tmp do
57183: LD_ADDR_VAR 0 1
57187: PUSH
57188: LD_VAR 0 2
57192: PUSH
57193: FOR_IN
57194: IFFALSE 57210
// SetLives ( i , 1 ) ;
57196: LD_VAR 0 1
57200: PPUSH
57201: LD_INT 1
57203: PPUSH
57204: CALL_OW 234
57208: GO 57193
57210: POP
57211: POP
// end ;
57212: PPOPN 2
57214: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57215: LD_EXP 28
57219: PUSH
57220: LD_EXP 77
57224: AND
57225: IFFALSE 57512
57227: GO 57229
57229: DISABLE
57230: LD_INT 0
57232: PPUSH
57233: PPUSH
57234: PPUSH
// begin i := rand ( 1 , 7 ) ;
57235: LD_ADDR_VAR 0 1
57239: PUSH
57240: LD_INT 1
57242: PPUSH
57243: LD_INT 7
57245: PPUSH
57246: CALL_OW 12
57250: ST_TO_ADDR
// case i of 1 :
57251: LD_VAR 0 1
57255: PUSH
57256: LD_INT 1
57258: DOUBLE
57259: EQUAL
57260: IFTRUE 57264
57262: GO 57274
57264: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57265: LD_STRING earthquake(getX(game), 0, 32)
57267: PPUSH
57268: CALL_OW 559
57272: GO 57512
57274: LD_INT 2
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57282
57280: GO 57296
57282: POP
// begin ToLua ( displayStucuk(); ) ;
57283: LD_STRING displayStucuk();
57285: PPUSH
57286: CALL_OW 559
// ResetFog ;
57290: CALL_OW 335
// end ; 3 :
57294: GO 57512
57296: LD_INT 3
57298: DOUBLE
57299: EQUAL
57300: IFTRUE 57304
57302: GO 57408
57304: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57305: LD_ADDR_VAR 0 2
57309: PUSH
57310: LD_INT 22
57312: PUSH
57313: LD_OWVAR 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 25
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PPUSH
57336: CALL_OW 69
57340: ST_TO_ADDR
// if not tmp then
57341: LD_VAR 0 2
57345: NOT
57346: IFFALSE 57350
// exit ;
57348: GO 57512
// un := tmp [ rand ( 1 , tmp ) ] ;
57350: LD_ADDR_VAR 0 3
57354: PUSH
57355: LD_VAR 0 2
57359: PUSH
57360: LD_INT 1
57362: PPUSH
57363: LD_VAR 0 2
57367: PPUSH
57368: CALL_OW 12
57372: ARRAY
57373: ST_TO_ADDR
// if Crawls ( un ) then
57374: LD_VAR 0 3
57378: PPUSH
57379: CALL_OW 318
57383: IFFALSE 57394
// ComWalk ( un ) ;
57385: LD_VAR 0 3
57389: PPUSH
57390: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57394: LD_VAR 0 3
57398: PPUSH
57399: LD_INT 8
57401: PPUSH
57402: CALL_OW 336
// end ; 4 :
57406: GO 57512
57408: LD_INT 4
57410: DOUBLE
57411: EQUAL
57412: IFTRUE 57416
57414: GO 57490
57416: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57417: LD_ADDR_VAR 0 2
57421: PUSH
57422: LD_INT 22
57424: PUSH
57425: LD_OWVAR 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 30
57436: PUSH
57437: LD_INT 29
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PPUSH
57448: CALL_OW 69
57452: ST_TO_ADDR
// if not tmp then
57453: LD_VAR 0 2
57457: NOT
57458: IFFALSE 57462
// exit ;
57460: GO 57512
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57462: LD_VAR 0 2
57466: PUSH
57467: LD_INT 1
57469: ARRAY
57470: PPUSH
57471: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57475: LD_VAR 0 2
57479: PUSH
57480: LD_INT 1
57482: ARRAY
57483: PPUSH
57484: CALL_OW 65
// end ; 5 .. 7 :
57488: GO 57512
57490: LD_INT 5
57492: DOUBLE
57493: GREATEREQUAL
57494: IFFALSE 57502
57496: LD_INT 7
57498: DOUBLE
57499: LESSEQUAL
57500: IFTRUE 57504
57502: GO 57511
57504: POP
// StreamSibBomb ; end ;
57505: CALL 53749 0 0
57509: GO 57512
57511: POP
// end ;
57512: PPOPN 3
57514: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57515: LD_EXP 28
57519: PUSH
57520: LD_EXP 78
57524: AND
57525: IFFALSE 57681
57527: GO 57529
57529: DISABLE
57530: LD_INT 0
57532: PPUSH
57533: PPUSH
57534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57535: LD_ADDR_VAR 0 2
57539: PUSH
57540: LD_INT 81
57542: PUSH
57543: LD_OWVAR 2
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 21
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 21
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PPUSH
57584: CALL_OW 69
57588: ST_TO_ADDR
// if not tmp then
57589: LD_VAR 0 2
57593: NOT
57594: IFFALSE 57598
// exit ;
57596: GO 57681
// p := 0 ;
57598: LD_ADDR_VAR 0 3
57602: PUSH
57603: LD_INT 0
57605: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57606: LD_INT 35
57608: PPUSH
57609: CALL_OW 67
// p := p + 1 ;
57613: LD_ADDR_VAR 0 3
57617: PUSH
57618: LD_VAR 0 3
57622: PUSH
57623: LD_INT 1
57625: PLUS
57626: ST_TO_ADDR
// for i in tmp do
57627: LD_ADDR_VAR 0 1
57631: PUSH
57632: LD_VAR 0 2
57636: PUSH
57637: FOR_IN
57638: IFFALSE 57669
// if GetLives ( i ) < 1000 then
57640: LD_VAR 0 1
57644: PPUSH
57645: CALL_OW 256
57649: PUSH
57650: LD_INT 1000
57652: LESS
57653: IFFALSE 57667
// SetLives ( i , 1000 ) ;
57655: LD_VAR 0 1
57659: PPUSH
57660: LD_INT 1000
57662: PPUSH
57663: CALL_OW 234
57667: GO 57637
57669: POP
57670: POP
// until p > 20 ;
57671: LD_VAR 0 3
57675: PUSH
57676: LD_INT 20
57678: GREATER
57679: IFFALSE 57606
// end ;
57681: PPOPN 3
57683: END
// every 0 0$1 trigger StreamModeActive and sTime do
57684: LD_EXP 28
57688: PUSH
57689: LD_EXP 79
57693: AND
57694: IFFALSE 57729
57696: GO 57698
57698: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57699: LD_INT 28
57701: PPUSH
57702: LD_OWVAR 2
57706: PPUSH
57707: LD_INT 2
57709: PPUSH
57710: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57714: LD_INT 30
57716: PPUSH
57717: LD_OWVAR 2
57721: PPUSH
57722: LD_INT 2
57724: PPUSH
57725: CALL_OW 322
// end ;
57729: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57730: LD_EXP 28
57734: PUSH
57735: LD_EXP 80
57739: AND
57740: IFFALSE 57861
57742: GO 57744
57744: DISABLE
57745: LD_INT 0
57747: PPUSH
57748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57749: LD_ADDR_VAR 0 2
57753: PUSH
57754: LD_INT 22
57756: PUSH
57757: LD_OWVAR 2
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 21
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: LD_INT 23
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: PPUSH
57798: CALL_OW 69
57802: ST_TO_ADDR
// if not tmp then
57803: LD_VAR 0 2
57807: NOT
57808: IFFALSE 57812
// exit ;
57810: GO 57861
// for i in tmp do
57812: LD_ADDR_VAR 0 1
57816: PUSH
57817: LD_VAR 0 2
57821: PUSH
57822: FOR_IN
57823: IFFALSE 57859
// begin if Crawls ( i ) then
57825: LD_VAR 0 1
57829: PPUSH
57830: CALL_OW 318
57834: IFFALSE 57845
// ComWalk ( i ) ;
57836: LD_VAR 0 1
57840: PPUSH
57841: CALL_OW 138
// SetClass ( i , 2 ) ;
57845: LD_VAR 0 1
57849: PPUSH
57850: LD_INT 2
57852: PPUSH
57853: CALL_OW 336
// end ;
57857: GO 57822
57859: POP
57860: POP
// end ;
57861: PPOPN 2
57863: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57864: LD_EXP 28
57868: PUSH
57869: LD_EXP 81
57873: AND
57874: IFFALSE 58162
57876: GO 57878
57878: DISABLE
57879: LD_INT 0
57881: PPUSH
57882: PPUSH
57883: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57884: LD_OWVAR 2
57888: PPUSH
57889: LD_INT 9
57891: PPUSH
57892: LD_INT 1
57894: PPUSH
57895: LD_INT 1
57897: PPUSH
57898: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57902: LD_INT 9
57904: PPUSH
57905: LD_OWVAR 2
57909: PPUSH
57910: CALL_OW 343
// uc_side := 9 ;
57914: LD_ADDR_OWVAR 20
57918: PUSH
57919: LD_INT 9
57921: ST_TO_ADDR
// uc_nation := 2 ;
57922: LD_ADDR_OWVAR 21
57926: PUSH
57927: LD_INT 2
57929: ST_TO_ADDR
// hc_name := Dark Warrior ;
57930: LD_ADDR_OWVAR 26
57934: PUSH
57935: LD_STRING Dark Warrior
57937: ST_TO_ADDR
// hc_gallery :=  ;
57938: LD_ADDR_OWVAR 33
57942: PUSH
57943: LD_STRING 
57945: ST_TO_ADDR
// hc_noskilllimit := true ;
57946: LD_ADDR_OWVAR 76
57950: PUSH
57951: LD_INT 1
57953: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57954: LD_ADDR_OWVAR 31
57958: PUSH
57959: LD_INT 30
57961: PUSH
57962: LD_INT 30
57964: PUSH
57965: LD_INT 30
57967: PUSH
57968: LD_INT 30
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// un := CreateHuman ;
57977: LD_ADDR_VAR 0 3
57981: PUSH
57982: CALL_OW 44
57986: ST_TO_ADDR
// hc_noskilllimit := false ;
57987: LD_ADDR_OWVAR 76
57991: PUSH
57992: LD_INT 0
57994: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57995: LD_VAR 0 3
57999: PPUSH
58000: LD_INT 1
58002: PPUSH
58003: CALL_OW 51
// ToLua ( playRanger() ) ;
58007: LD_STRING playRanger()
58009: PPUSH
58010: CALL_OW 559
// p := 0 ;
58014: LD_ADDR_VAR 0 2
58018: PUSH
58019: LD_INT 0
58021: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58022: LD_INT 35
58024: PPUSH
58025: CALL_OW 67
// p := p + 1 ;
58029: LD_ADDR_VAR 0 2
58033: PUSH
58034: LD_VAR 0 2
58038: PUSH
58039: LD_INT 1
58041: PLUS
58042: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58043: LD_VAR 0 3
58047: PPUSH
58048: CALL_OW 256
58052: PUSH
58053: LD_INT 1000
58055: LESS
58056: IFFALSE 58070
// SetLives ( un , 1000 ) ;
58058: LD_VAR 0 3
58062: PPUSH
58063: LD_INT 1000
58065: PPUSH
58066: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58070: LD_VAR 0 3
58074: PPUSH
58075: LD_INT 81
58077: PUSH
58078: LD_OWVAR 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 91
58089: PUSH
58090: LD_VAR 0 3
58094: PUSH
58095: LD_INT 30
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PPUSH
58107: CALL_OW 69
58111: PPUSH
58112: LD_VAR 0 3
58116: PPUSH
58117: CALL_OW 74
58121: PPUSH
58122: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58126: LD_VAR 0 2
58130: PUSH
58131: LD_INT 80
58133: GREATER
58134: PUSH
58135: LD_VAR 0 3
58139: PPUSH
58140: CALL_OW 301
58144: OR
58145: IFFALSE 58022
// if un then
58147: LD_VAR 0 3
58151: IFFALSE 58162
// RemoveUnit ( un ) ;
58153: LD_VAR 0 3
58157: PPUSH
58158: CALL_OW 64
// end ;
58162: PPOPN 3
58164: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58165: LD_EXP 82
58169: IFFALSE 58285
58171: GO 58173
58173: DISABLE
58174: LD_INT 0
58176: PPUSH
58177: PPUSH
58178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: LD_INT 81
58186: PUSH
58187: LD_OWVAR 2
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 21
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PPUSH
58210: CALL_OW 69
58214: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58215: LD_STRING playComputer()
58217: PPUSH
58218: CALL_OW 559
// if not tmp then
58222: LD_VAR 0 2
58226: NOT
58227: IFFALSE 58231
// exit ;
58229: GO 58285
// for i in tmp do
58231: LD_ADDR_VAR 0 1
58235: PUSH
58236: LD_VAR 0 2
58240: PUSH
58241: FOR_IN
58242: IFFALSE 58283
// for j := 1 to 4 do
58244: LD_ADDR_VAR 0 3
58248: PUSH
58249: DOUBLE
58250: LD_INT 1
58252: DEC
58253: ST_TO_ADDR
58254: LD_INT 4
58256: PUSH
58257: FOR_TO
58258: IFFALSE 58279
// SetSkill ( i , j , 10 ) ;
58260: LD_VAR 0 1
58264: PPUSH
58265: LD_VAR 0 3
58269: PPUSH
58270: LD_INT 10
58272: PPUSH
58273: CALL_OW 237
58277: GO 58257
58279: POP
58280: POP
58281: GO 58241
58283: POP
58284: POP
// end ;
58285: PPOPN 3
58287: END
// every 0 0$1 trigger s30 do var i , tmp ;
58288: LD_EXP 83
58292: IFFALSE 58361
58294: GO 58296
58296: DISABLE
58297: LD_INT 0
58299: PPUSH
58300: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58301: LD_ADDR_VAR 0 2
58305: PUSH
58306: LD_INT 22
58308: PUSH
58309: LD_OWVAR 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PPUSH
58318: CALL_OW 69
58322: ST_TO_ADDR
// if not tmp then
58323: LD_VAR 0 2
58327: NOT
58328: IFFALSE 58332
// exit ;
58330: GO 58361
// for i in tmp do
58332: LD_ADDR_VAR 0 1
58336: PUSH
58337: LD_VAR 0 2
58341: PUSH
58342: FOR_IN
58343: IFFALSE 58359
// SetLives ( i , 300 ) ;
58345: LD_VAR 0 1
58349: PPUSH
58350: LD_INT 300
58352: PPUSH
58353: CALL_OW 234
58357: GO 58342
58359: POP
58360: POP
// end ;
58361: PPOPN 2
58363: END
// every 0 0$1 trigger s60 do var i , tmp ;
58364: LD_EXP 84
58368: IFFALSE 58437
58370: GO 58372
58372: DISABLE
58373: LD_INT 0
58375: PPUSH
58376: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58377: LD_ADDR_VAR 0 2
58381: PUSH
58382: LD_INT 22
58384: PUSH
58385: LD_OWVAR 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PPUSH
58394: CALL_OW 69
58398: ST_TO_ADDR
// if not tmp then
58399: LD_VAR 0 2
58403: NOT
58404: IFFALSE 58408
// exit ;
58406: GO 58437
// for i in tmp do
58408: LD_ADDR_VAR 0 1
58412: PUSH
58413: LD_VAR 0 2
58417: PUSH
58418: FOR_IN
58419: IFFALSE 58435
// SetLives ( i , 600 ) ;
58421: LD_VAR 0 1
58425: PPUSH
58426: LD_INT 600
58428: PPUSH
58429: CALL_OW 234
58433: GO 58418
58435: POP
58436: POP
// end ;
58437: PPOPN 2
58439: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58440: LD_INT 0
58442: PPUSH
// case cmd of 301 :
58443: LD_VAR 0 1
58447: PUSH
58448: LD_INT 301
58450: DOUBLE
58451: EQUAL
58452: IFTRUE 58456
58454: GO 58488
58456: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58457: LD_VAR 0 6
58461: PPUSH
58462: LD_VAR 0 7
58466: PPUSH
58467: LD_VAR 0 8
58471: PPUSH
58472: LD_VAR 0 4
58476: PPUSH
58477: LD_VAR 0 5
58481: PPUSH
58482: CALL 59689 0 5
58486: GO 58609
58488: LD_INT 302
58490: DOUBLE
58491: EQUAL
58492: IFTRUE 58496
58494: GO 58533
58496: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58497: LD_VAR 0 6
58501: PPUSH
58502: LD_VAR 0 7
58506: PPUSH
58507: LD_VAR 0 8
58511: PPUSH
58512: LD_VAR 0 9
58516: PPUSH
58517: LD_VAR 0 4
58521: PPUSH
58522: LD_VAR 0 5
58526: PPUSH
58527: CALL 59780 0 6
58531: GO 58609
58533: LD_INT 303
58535: DOUBLE
58536: EQUAL
58537: IFTRUE 58541
58539: GO 58578
58541: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58542: LD_VAR 0 6
58546: PPUSH
58547: LD_VAR 0 7
58551: PPUSH
58552: LD_VAR 0 8
58556: PPUSH
58557: LD_VAR 0 9
58561: PPUSH
58562: LD_VAR 0 4
58566: PPUSH
58567: LD_VAR 0 5
58571: PPUSH
58572: CALL 58614 0 6
58576: GO 58609
58578: LD_INT 304
58580: DOUBLE
58581: EQUAL
58582: IFTRUE 58586
58584: GO 58608
58586: POP
// hHackTeleport ( unit , x , y ) ; end ;
58587: LD_VAR 0 2
58591: PPUSH
58592: LD_VAR 0 4
58596: PPUSH
58597: LD_VAR 0 5
58601: PPUSH
58602: CALL 60373 0 3
58606: GO 58609
58608: POP
// end ;
58609: LD_VAR 0 12
58613: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58614: LD_INT 0
58616: PPUSH
58617: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58618: LD_VAR 0 1
58622: PUSH
58623: LD_INT 1
58625: LESS
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_INT 3
58634: GREATER
58635: OR
58636: PUSH
58637: LD_VAR 0 5
58641: PPUSH
58642: LD_VAR 0 6
58646: PPUSH
58647: CALL_OW 428
58651: OR
58652: IFFALSE 58656
// exit ;
58654: GO 59376
// uc_side := your_side ;
58656: LD_ADDR_OWVAR 20
58660: PUSH
58661: LD_OWVAR 2
58665: ST_TO_ADDR
// uc_nation := nation ;
58666: LD_ADDR_OWVAR 21
58670: PUSH
58671: LD_VAR 0 1
58675: ST_TO_ADDR
// bc_level = 1 ;
58676: LD_ADDR_OWVAR 43
58680: PUSH
58681: LD_INT 1
58683: ST_TO_ADDR
// case btype of 1 :
58684: LD_VAR 0 2
58688: PUSH
58689: LD_INT 1
58691: DOUBLE
58692: EQUAL
58693: IFTRUE 58697
58695: GO 58708
58697: POP
// bc_type := b_depot ; 2 :
58698: LD_ADDR_OWVAR 42
58702: PUSH
58703: LD_INT 0
58705: ST_TO_ADDR
58706: GO 59320
58708: LD_INT 2
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58716
58714: GO 58727
58716: POP
// bc_type := b_warehouse ; 3 :
58717: LD_ADDR_OWVAR 42
58721: PUSH
58722: LD_INT 1
58724: ST_TO_ADDR
58725: GO 59320
58727: LD_INT 3
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58735
58733: GO 58746
58735: POP
// bc_type := b_lab ; 4 .. 9 :
58736: LD_ADDR_OWVAR 42
58740: PUSH
58741: LD_INT 6
58743: ST_TO_ADDR
58744: GO 59320
58746: LD_INT 4
58748: DOUBLE
58749: GREATEREQUAL
58750: IFFALSE 58758
58752: LD_INT 9
58754: DOUBLE
58755: LESSEQUAL
58756: IFTRUE 58760
58758: GO 58812
58760: POP
// begin bc_type := b_lab_half ;
58761: LD_ADDR_OWVAR 42
58765: PUSH
58766: LD_INT 7
58768: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58769: LD_ADDR_OWVAR 44
58773: PUSH
58774: LD_INT 10
58776: PUSH
58777: LD_INT 11
58779: PUSH
58780: LD_INT 12
58782: PUSH
58783: LD_INT 15
58785: PUSH
58786: LD_INT 14
58788: PUSH
58789: LD_INT 13
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: PUSH
58800: LD_VAR 0 2
58804: PUSH
58805: LD_INT 3
58807: MINUS
58808: ARRAY
58809: ST_TO_ADDR
// end ; 10 .. 13 :
58810: GO 59320
58812: LD_INT 10
58814: DOUBLE
58815: GREATEREQUAL
58816: IFFALSE 58824
58818: LD_INT 13
58820: DOUBLE
58821: LESSEQUAL
58822: IFTRUE 58826
58824: GO 58903
58826: POP
// begin bc_type := b_lab_full ;
58827: LD_ADDR_OWVAR 42
58831: PUSH
58832: LD_INT 8
58834: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58835: LD_ADDR_OWVAR 44
58839: PUSH
58840: LD_INT 10
58842: PUSH
58843: LD_INT 12
58845: PUSH
58846: LD_INT 14
58848: PUSH
58849: LD_INT 13
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: PUSH
58858: LD_VAR 0 2
58862: PUSH
58863: LD_INT 9
58865: MINUS
58866: ARRAY
58867: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58868: LD_ADDR_OWVAR 45
58872: PUSH
58873: LD_INT 11
58875: PUSH
58876: LD_INT 15
58878: PUSH
58879: LD_INT 12
58881: PUSH
58882: LD_INT 15
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: PUSH
58891: LD_VAR 0 2
58895: PUSH
58896: LD_INT 9
58898: MINUS
58899: ARRAY
58900: ST_TO_ADDR
// end ; 14 :
58901: GO 59320
58903: LD_INT 14
58905: DOUBLE
58906: EQUAL
58907: IFTRUE 58911
58909: GO 58922
58911: POP
// bc_type := b_workshop ; 15 :
58912: LD_ADDR_OWVAR 42
58916: PUSH
58917: LD_INT 2
58919: ST_TO_ADDR
58920: GO 59320
58922: LD_INT 15
58924: DOUBLE
58925: EQUAL
58926: IFTRUE 58930
58928: GO 58941
58930: POP
// bc_type := b_factory ; 16 :
58931: LD_ADDR_OWVAR 42
58935: PUSH
58936: LD_INT 3
58938: ST_TO_ADDR
58939: GO 59320
58941: LD_INT 16
58943: DOUBLE
58944: EQUAL
58945: IFTRUE 58949
58947: GO 58960
58949: POP
// bc_type := b_ext_gun ; 17 :
58950: LD_ADDR_OWVAR 42
58954: PUSH
58955: LD_INT 17
58957: ST_TO_ADDR
58958: GO 59320
58960: LD_INT 17
58962: DOUBLE
58963: EQUAL
58964: IFTRUE 58968
58966: GO 58996
58968: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58969: LD_ADDR_OWVAR 42
58973: PUSH
58974: LD_INT 19
58976: PUSH
58977: LD_INT 23
58979: PUSH
58980: LD_INT 19
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: PUSH
58988: LD_VAR 0 1
58992: ARRAY
58993: ST_TO_ADDR
58994: GO 59320
58996: LD_INT 18
58998: DOUBLE
58999: EQUAL
59000: IFTRUE 59004
59002: GO 59015
59004: POP
// bc_type := b_ext_radar ; 19 :
59005: LD_ADDR_OWVAR 42
59009: PUSH
59010: LD_INT 20
59012: ST_TO_ADDR
59013: GO 59320
59015: LD_INT 19
59017: DOUBLE
59018: EQUAL
59019: IFTRUE 59023
59021: GO 59034
59023: POP
// bc_type := b_ext_radio ; 20 :
59024: LD_ADDR_OWVAR 42
59028: PUSH
59029: LD_INT 22
59031: ST_TO_ADDR
59032: GO 59320
59034: LD_INT 20
59036: DOUBLE
59037: EQUAL
59038: IFTRUE 59042
59040: GO 59053
59042: POP
// bc_type := b_ext_siberium ; 21 :
59043: LD_ADDR_OWVAR 42
59047: PUSH
59048: LD_INT 21
59050: ST_TO_ADDR
59051: GO 59320
59053: LD_INT 21
59055: DOUBLE
59056: EQUAL
59057: IFTRUE 59061
59059: GO 59072
59061: POP
// bc_type := b_ext_computer ; 22 :
59062: LD_ADDR_OWVAR 42
59066: PUSH
59067: LD_INT 24
59069: ST_TO_ADDR
59070: GO 59320
59072: LD_INT 22
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59080
59078: GO 59091
59080: POP
// bc_type := b_ext_track ; 23 :
59081: LD_ADDR_OWVAR 42
59085: PUSH
59086: LD_INT 16
59088: ST_TO_ADDR
59089: GO 59320
59091: LD_INT 23
59093: DOUBLE
59094: EQUAL
59095: IFTRUE 59099
59097: GO 59110
59099: POP
// bc_type := b_ext_laser ; 24 :
59100: LD_ADDR_OWVAR 42
59104: PUSH
59105: LD_INT 25
59107: ST_TO_ADDR
59108: GO 59320
59110: LD_INT 24
59112: DOUBLE
59113: EQUAL
59114: IFTRUE 59118
59116: GO 59129
59118: POP
// bc_type := b_control_tower ; 25 :
59119: LD_ADDR_OWVAR 42
59123: PUSH
59124: LD_INT 36
59126: ST_TO_ADDR
59127: GO 59320
59129: LD_INT 25
59131: DOUBLE
59132: EQUAL
59133: IFTRUE 59137
59135: GO 59148
59137: POP
// bc_type := b_breastwork ; 26 :
59138: LD_ADDR_OWVAR 42
59142: PUSH
59143: LD_INT 31
59145: ST_TO_ADDR
59146: GO 59320
59148: LD_INT 26
59150: DOUBLE
59151: EQUAL
59152: IFTRUE 59156
59154: GO 59167
59156: POP
// bc_type := b_bunker ; 27 :
59157: LD_ADDR_OWVAR 42
59161: PUSH
59162: LD_INT 32
59164: ST_TO_ADDR
59165: GO 59320
59167: LD_INT 27
59169: DOUBLE
59170: EQUAL
59171: IFTRUE 59175
59173: GO 59186
59175: POP
// bc_type := b_turret ; 28 :
59176: LD_ADDR_OWVAR 42
59180: PUSH
59181: LD_INT 33
59183: ST_TO_ADDR
59184: GO 59320
59186: LD_INT 28
59188: DOUBLE
59189: EQUAL
59190: IFTRUE 59194
59192: GO 59205
59194: POP
// bc_type := b_armoury ; 29 :
59195: LD_ADDR_OWVAR 42
59199: PUSH
59200: LD_INT 4
59202: ST_TO_ADDR
59203: GO 59320
59205: LD_INT 29
59207: DOUBLE
59208: EQUAL
59209: IFTRUE 59213
59211: GO 59224
59213: POP
// bc_type := b_barracks ; 30 :
59214: LD_ADDR_OWVAR 42
59218: PUSH
59219: LD_INT 5
59221: ST_TO_ADDR
59222: GO 59320
59224: LD_INT 30
59226: DOUBLE
59227: EQUAL
59228: IFTRUE 59232
59230: GO 59243
59232: POP
// bc_type := b_solar_power ; 31 :
59233: LD_ADDR_OWVAR 42
59237: PUSH
59238: LD_INT 27
59240: ST_TO_ADDR
59241: GO 59320
59243: LD_INT 31
59245: DOUBLE
59246: EQUAL
59247: IFTRUE 59251
59249: GO 59262
59251: POP
// bc_type := b_oil_power ; 32 :
59252: LD_ADDR_OWVAR 42
59256: PUSH
59257: LD_INT 26
59259: ST_TO_ADDR
59260: GO 59320
59262: LD_INT 32
59264: DOUBLE
59265: EQUAL
59266: IFTRUE 59270
59268: GO 59281
59270: POP
// bc_type := b_siberite_power ; 33 :
59271: LD_ADDR_OWVAR 42
59275: PUSH
59276: LD_INT 28
59278: ST_TO_ADDR
59279: GO 59320
59281: LD_INT 33
59283: DOUBLE
59284: EQUAL
59285: IFTRUE 59289
59287: GO 59300
59289: POP
// bc_type := b_oil_mine ; 34 :
59290: LD_ADDR_OWVAR 42
59294: PUSH
59295: LD_INT 29
59297: ST_TO_ADDR
59298: GO 59320
59300: LD_INT 34
59302: DOUBLE
59303: EQUAL
59304: IFTRUE 59308
59306: GO 59319
59308: POP
// bc_type := b_siberite_mine ; end ;
59309: LD_ADDR_OWVAR 42
59313: PUSH
59314: LD_INT 30
59316: ST_TO_ADDR
59317: GO 59320
59319: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59320: LD_ADDR_VAR 0 8
59324: PUSH
59325: LD_VAR 0 5
59329: PPUSH
59330: LD_VAR 0 6
59334: PPUSH
59335: LD_VAR 0 3
59339: PPUSH
59340: CALL_OW 47
59344: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59345: LD_OWVAR 42
59349: PUSH
59350: LD_INT 32
59352: PUSH
59353: LD_INT 33
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: IN
59360: IFFALSE 59376
// PlaceWeaponTurret ( b , weapon ) ;
59362: LD_VAR 0 8
59366: PPUSH
59367: LD_VAR 0 4
59371: PPUSH
59372: CALL_OW 431
// end ;
59376: LD_VAR 0 7
59380: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59381: LD_INT 0
59383: PPUSH
59384: PPUSH
59385: PPUSH
59386: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59387: LD_ADDR_VAR 0 4
59391: PUSH
59392: LD_INT 22
59394: PUSH
59395: LD_OWVAR 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 30
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 30
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PPUSH
59436: CALL_OW 69
59440: ST_TO_ADDR
// if not tmp then
59441: LD_VAR 0 4
59445: NOT
59446: IFFALSE 59450
// exit ;
59448: GO 59509
// for i in tmp do
59450: LD_ADDR_VAR 0 2
59454: PUSH
59455: LD_VAR 0 4
59459: PUSH
59460: FOR_IN
59461: IFFALSE 59507
// for j = 1 to 3 do
59463: LD_ADDR_VAR 0 3
59467: PUSH
59468: DOUBLE
59469: LD_INT 1
59471: DEC
59472: ST_TO_ADDR
59473: LD_INT 3
59475: PUSH
59476: FOR_TO
59477: IFFALSE 59503
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59479: LD_VAR 0 2
59483: PPUSH
59484: CALL_OW 274
59488: PPUSH
59489: LD_VAR 0 3
59493: PPUSH
59494: LD_INT 99999
59496: PPUSH
59497: CALL_OW 277
59501: GO 59476
59503: POP
59504: POP
59505: GO 59460
59507: POP
59508: POP
// end ;
59509: LD_VAR 0 1
59513: RET
// export function hHackSetLevel10 ; var i , j ; begin
59514: LD_INT 0
59516: PPUSH
59517: PPUSH
59518: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59519: LD_ADDR_VAR 0 2
59523: PUSH
59524: LD_INT 21
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PPUSH
59534: CALL_OW 69
59538: PUSH
59539: FOR_IN
59540: IFFALSE 59592
// if IsSelected ( i ) then
59542: LD_VAR 0 2
59546: PPUSH
59547: CALL_OW 306
59551: IFFALSE 59590
// begin for j := 1 to 4 do
59553: LD_ADDR_VAR 0 3
59557: PUSH
59558: DOUBLE
59559: LD_INT 1
59561: DEC
59562: ST_TO_ADDR
59563: LD_INT 4
59565: PUSH
59566: FOR_TO
59567: IFFALSE 59588
// SetSkill ( i , j , 10 ) ;
59569: LD_VAR 0 2
59573: PPUSH
59574: LD_VAR 0 3
59578: PPUSH
59579: LD_INT 10
59581: PPUSH
59582: CALL_OW 237
59586: GO 59566
59588: POP
59589: POP
// end ;
59590: GO 59539
59592: POP
59593: POP
// end ;
59594: LD_VAR 0 1
59598: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59599: LD_INT 0
59601: PPUSH
59602: PPUSH
59603: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59604: LD_ADDR_VAR 0 2
59608: PUSH
59609: LD_INT 22
59611: PUSH
59612: LD_OWVAR 2
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 21
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PPUSH
59635: CALL_OW 69
59639: PUSH
59640: FOR_IN
59641: IFFALSE 59682
// begin for j := 1 to 4 do
59643: LD_ADDR_VAR 0 3
59647: PUSH
59648: DOUBLE
59649: LD_INT 1
59651: DEC
59652: ST_TO_ADDR
59653: LD_INT 4
59655: PUSH
59656: FOR_TO
59657: IFFALSE 59678
// SetSkill ( i , j , 10 ) ;
59659: LD_VAR 0 2
59663: PPUSH
59664: LD_VAR 0 3
59668: PPUSH
59669: LD_INT 10
59671: PPUSH
59672: CALL_OW 237
59676: GO 59656
59678: POP
59679: POP
// end ;
59680: GO 59640
59682: POP
59683: POP
// end ;
59684: LD_VAR 0 1
59688: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59689: LD_INT 0
59691: PPUSH
// uc_side := your_side ;
59692: LD_ADDR_OWVAR 20
59696: PUSH
59697: LD_OWVAR 2
59701: ST_TO_ADDR
// uc_nation := nation ;
59702: LD_ADDR_OWVAR 21
59706: PUSH
59707: LD_VAR 0 1
59711: ST_TO_ADDR
// InitHc ;
59712: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59716: LD_INT 0
59718: PPUSH
59719: LD_VAR 0 2
59723: PPUSH
59724: LD_VAR 0 3
59728: PPUSH
59729: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59733: LD_VAR 0 4
59737: PPUSH
59738: LD_VAR 0 5
59742: PPUSH
59743: CALL_OW 428
59747: PUSH
59748: LD_INT 0
59750: EQUAL
59751: IFFALSE 59775
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59753: CALL_OW 44
59757: PPUSH
59758: LD_VAR 0 4
59762: PPUSH
59763: LD_VAR 0 5
59767: PPUSH
59768: LD_INT 1
59770: PPUSH
59771: CALL_OW 48
// end ;
59775: LD_VAR 0 6
59779: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59780: LD_INT 0
59782: PPUSH
59783: PPUSH
// uc_side := your_side ;
59784: LD_ADDR_OWVAR 20
59788: PUSH
59789: LD_OWVAR 2
59793: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59794: LD_VAR 0 1
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: LD_INT 4
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: IN
59821: IFFALSE 59833
// uc_nation := nation_american else
59823: LD_ADDR_OWVAR 21
59827: PUSH
59828: LD_INT 1
59830: ST_TO_ADDR
59831: GO 59876
// if chassis in [ 11 , 12 , 13 , 14 ] then
59833: LD_VAR 0 1
59837: PUSH
59838: LD_INT 11
59840: PUSH
59841: LD_INT 12
59843: PUSH
59844: LD_INT 13
59846: PUSH
59847: LD_INT 14
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: IN
59856: IFFALSE 59868
// uc_nation := nation_arabian else
59858: LD_ADDR_OWVAR 21
59862: PUSH
59863: LD_INT 2
59865: ST_TO_ADDR
59866: GO 59876
// uc_nation := nation_russian ;
59868: LD_ADDR_OWVAR 21
59872: PUSH
59873: LD_INT 3
59875: ST_TO_ADDR
// vc_chassis := chassis ;
59876: LD_ADDR_OWVAR 37
59880: PUSH
59881: LD_VAR 0 1
59885: ST_TO_ADDR
// vc_engine := engine ;
59886: LD_ADDR_OWVAR 39
59890: PUSH
59891: LD_VAR 0 2
59895: ST_TO_ADDR
// vc_control := control ;
59896: LD_ADDR_OWVAR 38
59900: PUSH
59901: LD_VAR 0 3
59905: ST_TO_ADDR
// vc_weapon := weapon ;
59906: LD_ADDR_OWVAR 40
59910: PUSH
59911: LD_VAR 0 4
59915: ST_TO_ADDR
// un := CreateVehicle ;
59916: LD_ADDR_VAR 0 8
59920: PUSH
59921: CALL_OW 45
59925: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59926: LD_VAR 0 8
59930: PPUSH
59931: LD_INT 0
59933: PPUSH
59934: LD_INT 5
59936: PPUSH
59937: CALL_OW 12
59941: PPUSH
59942: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59946: LD_VAR 0 8
59950: PPUSH
59951: LD_VAR 0 5
59955: PPUSH
59956: LD_VAR 0 6
59960: PPUSH
59961: LD_INT 1
59963: PPUSH
59964: CALL_OW 48
// end ;
59968: LD_VAR 0 7
59972: RET
// export hInvincible ; every 1 do
59973: GO 59975
59975: DISABLE
// hInvincible := [ ] ;
59976: LD_ADDR_EXP 85
59980: PUSH
59981: EMPTY
59982: ST_TO_ADDR
59983: END
// every 10 do var i ;
59984: GO 59986
59986: DISABLE
59987: LD_INT 0
59989: PPUSH
// begin enable ;
59990: ENABLE
// if not hInvincible then
59991: LD_EXP 85
59995: NOT
59996: IFFALSE 60000
// exit ;
59998: GO 60044
// for i in hInvincible do
60000: LD_ADDR_VAR 0 1
60004: PUSH
60005: LD_EXP 85
60009: PUSH
60010: FOR_IN
60011: IFFALSE 60042
// if GetLives ( i ) < 1000 then
60013: LD_VAR 0 1
60017: PPUSH
60018: CALL_OW 256
60022: PUSH
60023: LD_INT 1000
60025: LESS
60026: IFFALSE 60040
// SetLives ( i , 1000 ) ;
60028: LD_VAR 0 1
60032: PPUSH
60033: LD_INT 1000
60035: PPUSH
60036: CALL_OW 234
60040: GO 60010
60042: POP
60043: POP
// end ;
60044: PPOPN 1
60046: END
// export function hHackInvincible ; var i ; begin
60047: LD_INT 0
60049: PPUSH
60050: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60051: LD_ADDR_VAR 0 2
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 21
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 21
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: PPUSH
60084: CALL_OW 69
60088: PUSH
60089: FOR_IN
60090: IFFALSE 60151
// if IsSelected ( i ) then
60092: LD_VAR 0 2
60096: PPUSH
60097: CALL_OW 306
60101: IFFALSE 60149
// begin if i in hInvincible then
60103: LD_VAR 0 2
60107: PUSH
60108: LD_EXP 85
60112: IN
60113: IFFALSE 60133
// hInvincible := hInvincible diff i else
60115: LD_ADDR_EXP 85
60119: PUSH
60120: LD_EXP 85
60124: PUSH
60125: LD_VAR 0 2
60129: DIFF
60130: ST_TO_ADDR
60131: GO 60149
// hInvincible := hInvincible union i ;
60133: LD_ADDR_EXP 85
60137: PUSH
60138: LD_EXP 85
60142: PUSH
60143: LD_VAR 0 2
60147: UNION
60148: ST_TO_ADDR
// end ;
60149: GO 60089
60151: POP
60152: POP
// end ;
60153: LD_VAR 0 1
60157: RET
// export function hHackInvisible ; var i , j ; begin
60158: LD_INT 0
60160: PPUSH
60161: PPUSH
60162: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60163: LD_ADDR_VAR 0 2
60167: PUSH
60168: LD_INT 21
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PPUSH
60178: CALL_OW 69
60182: PUSH
60183: FOR_IN
60184: IFFALSE 60208
// if IsSelected ( i ) then
60186: LD_VAR 0 2
60190: PPUSH
60191: CALL_OW 306
60195: IFFALSE 60206
// ComForceInvisible ( i ) ;
60197: LD_VAR 0 2
60201: PPUSH
60202: CALL_OW 496
60206: GO 60183
60208: POP
60209: POP
// end ;
60210: LD_VAR 0 1
60214: RET
// export function hHackChangeYourSide ; begin
60215: LD_INT 0
60217: PPUSH
// if your_side = 8 then
60218: LD_OWVAR 2
60222: PUSH
60223: LD_INT 8
60225: EQUAL
60226: IFFALSE 60238
// your_side := 0 else
60228: LD_ADDR_OWVAR 2
60232: PUSH
60233: LD_INT 0
60235: ST_TO_ADDR
60236: GO 60252
// your_side := your_side + 1 ;
60238: LD_ADDR_OWVAR 2
60242: PUSH
60243: LD_OWVAR 2
60247: PUSH
60248: LD_INT 1
60250: PLUS
60251: ST_TO_ADDR
// end ;
60252: LD_VAR 0 1
60256: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60257: LD_INT 0
60259: PPUSH
60260: PPUSH
60261: PPUSH
// for i in all_units do
60262: LD_ADDR_VAR 0 2
60266: PUSH
60267: LD_OWVAR 3
60271: PUSH
60272: FOR_IN
60273: IFFALSE 60351
// if IsSelected ( i ) then
60275: LD_VAR 0 2
60279: PPUSH
60280: CALL_OW 306
60284: IFFALSE 60349
// begin j := GetSide ( i ) ;
60286: LD_ADDR_VAR 0 3
60290: PUSH
60291: LD_VAR 0 2
60295: PPUSH
60296: CALL_OW 255
60300: ST_TO_ADDR
// if j = 8 then
60301: LD_VAR 0 3
60305: PUSH
60306: LD_INT 8
60308: EQUAL
60309: IFFALSE 60321
// j := 0 else
60311: LD_ADDR_VAR 0 3
60315: PUSH
60316: LD_INT 0
60318: ST_TO_ADDR
60319: GO 60335
// j := j + 1 ;
60321: LD_ADDR_VAR 0 3
60325: PUSH
60326: LD_VAR 0 3
60330: PUSH
60331: LD_INT 1
60333: PLUS
60334: ST_TO_ADDR
// SetSide ( i , j ) ;
60335: LD_VAR 0 2
60339: PPUSH
60340: LD_VAR 0 3
60344: PPUSH
60345: CALL_OW 235
// end ;
60349: GO 60272
60351: POP
60352: POP
// end ;
60353: LD_VAR 0 1
60357: RET
// export function hHackFog ; begin
60358: LD_INT 0
60360: PPUSH
// FogOff ( true ) ;
60361: LD_INT 1
60363: PPUSH
60364: CALL_OW 344
// end ;
60368: LD_VAR 0 1
60372: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60373: LD_INT 0
60375: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60376: LD_VAR 0 1
60380: PPUSH
60381: LD_VAR 0 2
60385: PPUSH
60386: LD_VAR 0 3
60390: PPUSH
60391: LD_INT 1
60393: PPUSH
60394: LD_INT 1
60396: PPUSH
60397: CALL_OW 483
// CenterOnXY ( x , y ) ;
60401: LD_VAR 0 2
60405: PPUSH
60406: LD_VAR 0 3
60410: PPUSH
60411: CALL_OW 84
// end ;
60415: LD_VAR 0 4
60419: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60420: LD_INT 0
60422: PPUSH
60423: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60424: LD_VAR 0 1
60428: NOT
60429: PUSH
60430: LD_VAR 0 2
60434: PPUSH
60435: LD_VAR 0 3
60439: PPUSH
60440: CALL_OW 488
60444: NOT
60445: OR
60446: PUSH
60447: LD_VAR 0 1
60451: PPUSH
60452: CALL_OW 266
60456: PUSH
60457: LD_INT 3
60459: NONEQUAL
60460: PUSH
60461: LD_VAR 0 1
60465: PPUSH
60466: CALL_OW 247
60470: PUSH
60471: LD_INT 1
60473: EQUAL
60474: NOT
60475: AND
60476: OR
60477: IFFALSE 60481
// exit ;
60479: GO 60630
// if GetType ( factory ) = unit_human then
60481: LD_VAR 0 1
60485: PPUSH
60486: CALL_OW 247
60490: PUSH
60491: LD_INT 1
60493: EQUAL
60494: IFFALSE 60511
// factory := IsInUnit ( factory ) ;
60496: LD_ADDR_VAR 0 1
60500: PUSH
60501: LD_VAR 0 1
60505: PPUSH
60506: CALL_OW 310
60510: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60511: LD_VAR 0 1
60515: PPUSH
60516: CALL_OW 266
60520: PUSH
60521: LD_INT 3
60523: NONEQUAL
60524: IFFALSE 60528
// exit ;
60526: GO 60630
// if HexInfo ( x , y ) = factory then
60528: LD_VAR 0 2
60532: PPUSH
60533: LD_VAR 0 3
60537: PPUSH
60538: CALL_OW 428
60542: PUSH
60543: LD_VAR 0 1
60547: EQUAL
60548: IFFALSE 60575
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60550: LD_ADDR_EXP 86
60554: PUSH
60555: LD_EXP 86
60559: PPUSH
60560: LD_VAR 0 1
60564: PPUSH
60565: LD_INT 0
60567: PPUSH
60568: CALL_OW 1
60572: ST_TO_ADDR
60573: GO 60626
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60575: LD_ADDR_EXP 86
60579: PUSH
60580: LD_EXP 86
60584: PPUSH
60585: LD_VAR 0 1
60589: PPUSH
60590: LD_VAR 0 1
60594: PPUSH
60595: CALL_OW 255
60599: PUSH
60600: LD_VAR 0 1
60604: PUSH
60605: LD_VAR 0 2
60609: PUSH
60610: LD_VAR 0 3
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: PPUSH
60621: CALL_OW 1
60625: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60626: CALL 60635 0 0
// end ;
60630: LD_VAR 0 4
60634: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60635: LD_INT 0
60637: PPUSH
60638: PPUSH
60639: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60640: LD_STRING resetFactoryWaypoint();
60642: PPUSH
60643: CALL_OW 559
// if factoryWaypoints then
60647: LD_EXP 86
60651: IFFALSE 60777
// begin list := PrepareArray ( factoryWaypoints ) ;
60653: LD_ADDR_VAR 0 3
60657: PUSH
60658: LD_EXP 86
60662: PPUSH
60663: CALL 45683 0 1
60667: ST_TO_ADDR
// for i := 1 to list do
60668: LD_ADDR_VAR 0 2
60672: PUSH
60673: DOUBLE
60674: LD_INT 1
60676: DEC
60677: ST_TO_ADDR
60678: LD_VAR 0 3
60682: PUSH
60683: FOR_TO
60684: IFFALSE 60775
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60686: LD_STRING setFactoryWaypointXY(
60688: PUSH
60689: LD_VAR 0 3
60693: PUSH
60694: LD_VAR 0 2
60698: ARRAY
60699: PUSH
60700: LD_INT 1
60702: ARRAY
60703: STR
60704: PUSH
60705: LD_STRING ,
60707: STR
60708: PUSH
60709: LD_VAR 0 3
60713: PUSH
60714: LD_VAR 0 2
60718: ARRAY
60719: PUSH
60720: LD_INT 2
60722: ARRAY
60723: STR
60724: PUSH
60725: LD_STRING ,
60727: STR
60728: PUSH
60729: LD_VAR 0 3
60733: PUSH
60734: LD_VAR 0 2
60738: ARRAY
60739: PUSH
60740: LD_INT 3
60742: ARRAY
60743: STR
60744: PUSH
60745: LD_STRING ,
60747: STR
60748: PUSH
60749: LD_VAR 0 3
60753: PUSH
60754: LD_VAR 0 2
60758: ARRAY
60759: PUSH
60760: LD_INT 4
60762: ARRAY
60763: STR
60764: PUSH
60765: LD_STRING )
60767: STR
60768: PPUSH
60769: CALL_OW 559
60773: GO 60683
60775: POP
60776: POP
// end ; end ;
60777: LD_VAR 0 1
60781: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60782: LD_INT 0
60784: PPUSH
// if HexInfo ( x , y ) = warehouse then
60785: LD_VAR 0 2
60789: PPUSH
60790: LD_VAR 0 3
60794: PPUSH
60795: CALL_OW 428
60799: PUSH
60800: LD_VAR 0 1
60804: EQUAL
60805: IFFALSE 60832
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60807: LD_ADDR_EXP 87
60811: PUSH
60812: LD_EXP 87
60816: PPUSH
60817: LD_VAR 0 1
60821: PPUSH
60822: LD_INT 0
60824: PPUSH
60825: CALL_OW 1
60829: ST_TO_ADDR
60830: GO 60883
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60832: LD_ADDR_EXP 87
60836: PUSH
60837: LD_EXP 87
60841: PPUSH
60842: LD_VAR 0 1
60846: PPUSH
60847: LD_VAR 0 1
60851: PPUSH
60852: CALL_OW 255
60856: PUSH
60857: LD_VAR 0 1
60861: PUSH
60862: LD_VAR 0 2
60866: PUSH
60867: LD_VAR 0 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: PPUSH
60878: CALL_OW 1
60882: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60883: CALL 60892 0 0
// end ;
60887: LD_VAR 0 4
60891: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60892: LD_INT 0
60894: PPUSH
60895: PPUSH
60896: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60897: LD_STRING resetWarehouseGatheringPoints();
60899: PPUSH
60900: CALL_OW 559
// if warehouseGatheringPoints then
60904: LD_EXP 87
60908: IFFALSE 61034
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60910: LD_ADDR_VAR 0 3
60914: PUSH
60915: LD_EXP 87
60919: PPUSH
60920: CALL 45683 0 1
60924: ST_TO_ADDR
// for i := 1 to list do
60925: LD_ADDR_VAR 0 2
60929: PUSH
60930: DOUBLE
60931: LD_INT 1
60933: DEC
60934: ST_TO_ADDR
60935: LD_VAR 0 3
60939: PUSH
60940: FOR_TO
60941: IFFALSE 61032
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60943: LD_STRING setWarehouseGatheringPointXY(
60945: PUSH
60946: LD_VAR 0 3
60950: PUSH
60951: LD_VAR 0 2
60955: ARRAY
60956: PUSH
60957: LD_INT 1
60959: ARRAY
60960: STR
60961: PUSH
60962: LD_STRING ,
60964: STR
60965: PUSH
60966: LD_VAR 0 3
60970: PUSH
60971: LD_VAR 0 2
60975: ARRAY
60976: PUSH
60977: LD_INT 2
60979: ARRAY
60980: STR
60981: PUSH
60982: LD_STRING ,
60984: STR
60985: PUSH
60986: LD_VAR 0 3
60990: PUSH
60991: LD_VAR 0 2
60995: ARRAY
60996: PUSH
60997: LD_INT 3
60999: ARRAY
61000: STR
61001: PUSH
61002: LD_STRING ,
61004: STR
61005: PUSH
61006: LD_VAR 0 3
61010: PUSH
61011: LD_VAR 0 2
61015: ARRAY
61016: PUSH
61017: LD_INT 4
61019: ARRAY
61020: STR
61021: PUSH
61022: LD_STRING )
61024: STR
61025: PPUSH
61026: CALL_OW 559
61030: GO 60940
61032: POP
61033: POP
// end ; end ;
61034: LD_VAR 0 1
61038: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61039: LD_EXP 87
61043: IFFALSE 61728
61045: GO 61047
61047: DISABLE
61048: LD_INT 0
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
61054: PPUSH
61055: PPUSH
61056: PPUSH
61057: PPUSH
61058: PPUSH
// begin enable ;
61059: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61060: LD_ADDR_VAR 0 3
61064: PUSH
61065: LD_EXP 87
61069: PPUSH
61070: CALL 45683 0 1
61074: ST_TO_ADDR
// if not list then
61075: LD_VAR 0 3
61079: NOT
61080: IFFALSE 61084
// exit ;
61082: GO 61728
// for i := 1 to list do
61084: LD_ADDR_VAR 0 1
61088: PUSH
61089: DOUBLE
61090: LD_INT 1
61092: DEC
61093: ST_TO_ADDR
61094: LD_VAR 0 3
61098: PUSH
61099: FOR_TO
61100: IFFALSE 61726
// begin depot := list [ i ] [ 2 ] ;
61102: LD_ADDR_VAR 0 8
61106: PUSH
61107: LD_VAR 0 3
61111: PUSH
61112: LD_VAR 0 1
61116: ARRAY
61117: PUSH
61118: LD_INT 2
61120: ARRAY
61121: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61122: LD_ADDR_VAR 0 5
61126: PUSH
61127: LD_VAR 0 3
61131: PUSH
61132: LD_VAR 0 1
61136: ARRAY
61137: PUSH
61138: LD_INT 1
61140: ARRAY
61141: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61142: LD_VAR 0 8
61146: PPUSH
61147: CALL_OW 301
61151: PUSH
61152: LD_VAR 0 5
61156: PUSH
61157: LD_VAR 0 8
61161: PPUSH
61162: CALL_OW 255
61166: NONEQUAL
61167: OR
61168: IFFALSE 61197
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61170: LD_ADDR_EXP 87
61174: PUSH
61175: LD_EXP 87
61179: PPUSH
61180: LD_VAR 0 8
61184: PPUSH
61185: LD_INT 0
61187: PPUSH
61188: CALL_OW 1
61192: ST_TO_ADDR
// exit ;
61193: POP
61194: POP
61195: GO 61728
// end ; x := list [ i ] [ 3 ] ;
61197: LD_ADDR_VAR 0 6
61201: PUSH
61202: LD_VAR 0 3
61206: PUSH
61207: LD_VAR 0 1
61211: ARRAY
61212: PUSH
61213: LD_INT 3
61215: ARRAY
61216: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61217: LD_ADDR_VAR 0 7
61221: PUSH
61222: LD_VAR 0 3
61226: PUSH
61227: LD_VAR 0 1
61231: ARRAY
61232: PUSH
61233: LD_INT 4
61235: ARRAY
61236: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61237: LD_ADDR_VAR 0 9
61241: PUSH
61242: LD_VAR 0 6
61246: PPUSH
61247: LD_VAR 0 7
61251: PPUSH
61252: LD_INT 16
61254: PPUSH
61255: CALL 44271 0 3
61259: ST_TO_ADDR
// if not cratesNearbyPoint then
61260: LD_VAR 0 9
61264: NOT
61265: IFFALSE 61271
// exit ;
61267: POP
61268: POP
61269: GO 61728
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
61271: LD_ADDR_VAR 0 4
61275: PUSH
61276: LD_INT 22
61278: PUSH
61279: LD_VAR 0 5
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 60
61293: PUSH
61294: EMPTY
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 91
61303: PUSH
61304: LD_VAR 0 8
61308: PUSH
61309: LD_INT 6
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 25
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 25
61332: PUSH
61333: LD_INT 16
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: PPUSH
61351: CALL_OW 69
61355: PUSH
61356: LD_VAR 0 8
61360: PPUSH
61361: CALL_OW 313
61365: PPUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 60
61371: PUSH
61372: EMPTY
61373: LIST
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 25
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 25
61394: PUSH
61395: LD_INT 16
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PPUSH
61411: CALL_OW 72
61415: UNION
61416: ST_TO_ADDR
// if tmp then
61417: LD_VAR 0 4
61421: IFFALSE 61501
// begin tmp := ShrinkArray ( tmp , 3 ) ;
61423: LD_ADDR_VAR 0 4
61427: PUSH
61428: LD_VAR 0 4
61432: PPUSH
61433: LD_INT 3
61435: PPUSH
61436: CALL 42240 0 2
61440: ST_TO_ADDR
// for j in tmp do
61441: LD_ADDR_VAR 0 2
61445: PUSH
61446: LD_VAR 0 4
61450: PUSH
61451: FOR_IN
61452: IFFALSE 61495
// begin if IsInUnit ( j ) then
61454: LD_VAR 0 2
61458: PPUSH
61459: CALL_OW 310
61463: IFFALSE 61474
// ComExit ( j ) ;
61465: LD_VAR 0 2
61469: PPUSH
61470: CALL 42323 0 1
// AddComCollect ( j , x , y ) ;
61474: LD_VAR 0 2
61478: PPUSH
61479: LD_VAR 0 6
61483: PPUSH
61484: LD_VAR 0 7
61488: PPUSH
61489: CALL_OW 177
// end ;
61493: GO 61451
61495: POP
61496: POP
// exit ;
61497: POP
61498: POP
61499: GO 61728
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61501: LD_ADDR_VAR 0 4
61505: PUSH
61506: LD_INT 22
61508: PUSH
61509: LD_VAR 0 5
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 91
61520: PUSH
61521: LD_VAR 0 8
61525: PUSH
61526: LD_INT 8
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: LD_INT 34
61539: PUSH
61540: LD_INT 12
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 34
61549: PUSH
61550: LD_INT 51
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 34
61559: PUSH
61560: LD_INT 32
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 34
61569: PUSH
61570: LD_INT 89
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: PPUSH
61589: CALL_OW 69
61593: ST_TO_ADDR
// if tmp then
61594: LD_VAR 0 4
61598: IFFALSE 61724
// begin for j in tmp do
61600: LD_ADDR_VAR 0 2
61604: PUSH
61605: LD_VAR 0 4
61609: PUSH
61610: FOR_IN
61611: IFFALSE 61722
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61613: LD_VAR 0 2
61617: PPUSH
61618: CALL_OW 262
61622: PUSH
61623: LD_INT 3
61625: EQUAL
61626: PUSH
61627: LD_VAR 0 2
61631: PPUSH
61632: CALL_OW 261
61636: PUSH
61637: LD_INT 20
61639: GREATER
61640: OR
61641: PUSH
61642: LD_VAR 0 2
61646: PPUSH
61647: CALL_OW 314
61651: NOT
61652: AND
61653: PUSH
61654: LD_VAR 0 2
61658: PPUSH
61659: CALL_OW 263
61663: PUSH
61664: LD_INT 1
61666: NONEQUAL
61667: PUSH
61668: LD_VAR 0 2
61672: PPUSH
61673: CALL_OW 311
61677: OR
61678: AND
61679: IFFALSE 61720
// begin ComCollect ( j , x , y ) ;
61681: LD_VAR 0 2
61685: PPUSH
61686: LD_VAR 0 6
61690: PPUSH
61691: LD_VAR 0 7
61695: PPUSH
61696: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
61700: LD_VAR 0 2
61704: PPUSH
61705: LD_VAR 0 8
61709: PPUSH
61710: CALL_OW 172
// exit ;
61714: POP
61715: POP
61716: POP
61717: POP
61718: GO 61728
// end ;
61720: GO 61610
61722: POP
61723: POP
// end ; end ;
61724: GO 61099
61726: POP
61727: POP
// end ; end_of_file
61728: PPOPN 9
61730: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61731: LD_VAR 0 1
61735: PUSH
61736: LD_INT 200
61738: DOUBLE
61739: GREATEREQUAL
61740: IFFALSE 61748
61742: LD_INT 299
61744: DOUBLE
61745: LESSEQUAL
61746: IFTRUE 61750
61748: GO 61782
61750: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61751: LD_VAR 0 1
61755: PPUSH
61756: LD_VAR 0 2
61760: PPUSH
61761: LD_VAR 0 3
61765: PPUSH
61766: LD_VAR 0 4
61770: PPUSH
61771: LD_VAR 0 5
61775: PPUSH
61776: CALL 62270 0 5
61780: GO 61859
61782: LD_INT 300
61784: DOUBLE
61785: GREATEREQUAL
61786: IFFALSE 61794
61788: LD_INT 399
61790: DOUBLE
61791: LESSEQUAL
61792: IFTRUE 61796
61794: GO 61858
61796: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61797: LD_VAR 0 1
61801: PPUSH
61802: LD_VAR 0 2
61806: PPUSH
61807: LD_VAR 0 3
61811: PPUSH
61812: LD_VAR 0 4
61816: PPUSH
61817: LD_VAR 0 5
61821: PPUSH
61822: LD_VAR 0 6
61826: PPUSH
61827: LD_VAR 0 7
61831: PPUSH
61832: LD_VAR 0 8
61836: PPUSH
61837: LD_VAR 0 9
61841: PPUSH
61842: LD_VAR 0 10
61846: PPUSH
61847: LD_VAR 0 11
61851: PPUSH
61852: CALL 58440 0 11
61856: GO 61859
61858: POP
// end ;
61859: PPOPN 11
61861: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61862: LD_VAR 0 1
61866: PPUSH
61867: LD_VAR 0 2
61871: PPUSH
61872: LD_VAR 0 3
61876: PPUSH
61877: LD_VAR 0 4
61881: PPUSH
61882: LD_VAR 0 5
61886: PPUSH
61887: CALL 62006 0 5
// end ; end_of_file
61891: PPOPN 5
61893: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61894: LD_INT 0
61896: PPUSH
61897: PPUSH
61898: PPUSH
61899: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61900: LD_VAR 0 1
61904: PPUSH
61905: CALL_OW 264
61909: PUSH
61910: LD_INT 91
61912: EQUAL
61913: IFFALSE 61985
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61915: LD_INT 68
61917: PPUSH
61918: LD_VAR 0 1
61922: PPUSH
61923: CALL_OW 255
61927: PPUSH
61928: CALL_OW 321
61932: PUSH
61933: LD_INT 2
61935: EQUAL
61936: IFFALSE 61948
// eff := 70 else
61938: LD_ADDR_VAR 0 4
61942: PUSH
61943: LD_INT 70
61945: ST_TO_ADDR
61946: GO 61956
// eff := 30 ;
61948: LD_ADDR_VAR 0 4
61952: PUSH
61953: LD_INT 30
61955: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61956: LD_VAR 0 1
61960: PPUSH
61961: CALL_OW 250
61965: PPUSH
61966: LD_VAR 0 1
61970: PPUSH
61971: CALL_OW 251
61975: PPUSH
61976: LD_VAR 0 4
61980: PPUSH
61981: CALL_OW 495
// end ; end ;
61985: LD_VAR 0 2
61989: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61990: LD_INT 0
61992: PPUSH
// end ;
61993: LD_VAR 0 4
61997: RET
// export function SOS_Command ( cmd ) ; begin
61998: LD_INT 0
62000: PPUSH
// end ;
62001: LD_VAR 0 2
62005: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62006: LD_INT 0
62008: PPUSH
// end ;
62009: LD_VAR 0 6
62013: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62014: LD_INT 0
62016: PPUSH
62017: PPUSH
// if not vehicle or not factory then
62018: LD_VAR 0 1
62022: NOT
62023: PUSH
62024: LD_VAR 0 2
62028: NOT
62029: OR
62030: IFFALSE 62034
// exit ;
62032: GO 62265
// if factoryWaypoints >= factory then
62034: LD_EXP 86
62038: PUSH
62039: LD_VAR 0 2
62043: GREATEREQUAL
62044: IFFALSE 62265
// if factoryWaypoints [ factory ] then
62046: LD_EXP 86
62050: PUSH
62051: LD_VAR 0 2
62055: ARRAY
62056: IFFALSE 62265
// begin if GetControl ( vehicle ) = control_manual then
62058: LD_VAR 0 1
62062: PPUSH
62063: CALL_OW 263
62067: PUSH
62068: LD_INT 1
62070: EQUAL
62071: IFFALSE 62152
// begin driver := IsDrivenBy ( vehicle ) ;
62073: LD_ADDR_VAR 0 4
62077: PUSH
62078: LD_VAR 0 1
62082: PPUSH
62083: CALL_OW 311
62087: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62088: LD_VAR 0 4
62092: PPUSH
62093: LD_EXP 86
62097: PUSH
62098: LD_VAR 0 2
62102: ARRAY
62103: PUSH
62104: LD_INT 3
62106: ARRAY
62107: PPUSH
62108: LD_EXP 86
62112: PUSH
62113: LD_VAR 0 2
62117: ARRAY
62118: PUSH
62119: LD_INT 4
62121: ARRAY
62122: PPUSH
62123: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62127: LD_VAR 0 4
62131: PPUSH
62132: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62136: LD_VAR 0 4
62140: PPUSH
62141: LD_VAR 0 2
62145: PPUSH
62146: CALL_OW 180
// end else
62150: GO 62265
// if GetControl ( vehicle ) = control_remote then
62152: LD_VAR 0 1
62156: PPUSH
62157: CALL_OW 263
62161: PUSH
62162: LD_INT 2
62164: EQUAL
62165: IFFALSE 62226
// begin wait ( 0 0$2 ) ;
62167: LD_INT 70
62169: PPUSH
62170: CALL_OW 67
// if Connect ( vehicle ) then
62174: LD_VAR 0 1
62178: PPUSH
62179: CALL 12563 0 1
62183: IFFALSE 62224
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62185: LD_VAR 0 1
62189: PPUSH
62190: LD_EXP 86
62194: PUSH
62195: LD_VAR 0 2
62199: ARRAY
62200: PUSH
62201: LD_INT 3
62203: ARRAY
62204: PPUSH
62205: LD_EXP 86
62209: PUSH
62210: LD_VAR 0 2
62214: ARRAY
62215: PUSH
62216: LD_INT 4
62218: ARRAY
62219: PPUSH
62220: CALL_OW 171
// end else
62224: GO 62265
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62226: LD_VAR 0 1
62230: PPUSH
62231: LD_EXP 86
62235: PUSH
62236: LD_VAR 0 2
62240: ARRAY
62241: PUSH
62242: LD_INT 3
62244: ARRAY
62245: PPUSH
62246: LD_EXP 86
62250: PUSH
62251: LD_VAR 0 2
62255: ARRAY
62256: PUSH
62257: LD_INT 4
62259: ARRAY
62260: PPUSH
62261: CALL_OW 171
// end ; end ;
62265: LD_VAR 0 3
62269: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62270: LD_INT 0
62272: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62273: LD_VAR 0 1
62277: PUSH
62278: LD_INT 250
62280: EQUAL
62281: PUSH
62282: LD_VAR 0 2
62286: PPUSH
62287: CALL_OW 264
62291: PUSH
62292: LD_INT 81
62294: EQUAL
62295: AND
62296: IFFALSE 62317
// MinerPlaceMine ( unit , x , y ) ;
62298: LD_VAR 0 2
62302: PPUSH
62303: LD_VAR 0 4
62307: PPUSH
62308: LD_VAR 0 5
62312: PPUSH
62313: CALL 64702 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62317: LD_VAR 0 1
62321: PUSH
62322: LD_INT 251
62324: EQUAL
62325: PUSH
62326: LD_VAR 0 2
62330: PPUSH
62331: CALL_OW 264
62335: PUSH
62336: LD_INT 81
62338: EQUAL
62339: AND
62340: IFFALSE 62361
// MinerDetonateMine ( unit , x , y ) ;
62342: LD_VAR 0 2
62346: PPUSH
62347: LD_VAR 0 4
62351: PPUSH
62352: LD_VAR 0 5
62356: PPUSH
62357: CALL 64977 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 252
62368: EQUAL
62369: PUSH
62370: LD_VAR 0 2
62374: PPUSH
62375: CALL_OW 264
62379: PUSH
62380: LD_INT 81
62382: EQUAL
62383: AND
62384: IFFALSE 62405
// MinerCreateMinefield ( unit , x , y ) ;
62386: LD_VAR 0 2
62390: PPUSH
62391: LD_VAR 0 4
62395: PPUSH
62396: LD_VAR 0 5
62400: PPUSH
62401: CALL 65394 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62405: LD_VAR 0 1
62409: PUSH
62410: LD_INT 253
62412: EQUAL
62413: PUSH
62414: LD_VAR 0 2
62418: PPUSH
62419: CALL_OW 257
62423: PUSH
62424: LD_INT 5
62426: EQUAL
62427: AND
62428: IFFALSE 62449
// ComBinocular ( unit , x , y ) ;
62430: LD_VAR 0 2
62434: PPUSH
62435: LD_VAR 0 4
62439: PPUSH
62440: LD_VAR 0 5
62444: PPUSH
62445: CALL 65763 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62449: LD_VAR 0 1
62453: PUSH
62454: LD_INT 254
62456: EQUAL
62457: PUSH
62458: LD_VAR 0 2
62462: PPUSH
62463: CALL_OW 264
62467: PUSH
62468: LD_INT 99
62470: EQUAL
62471: AND
62472: PUSH
62473: LD_VAR 0 3
62477: PPUSH
62478: CALL_OW 263
62482: PUSH
62483: LD_INT 3
62485: EQUAL
62486: AND
62487: IFFALSE 62503
// HackDestroyVehicle ( unit , selectedUnit ) ;
62489: LD_VAR 0 2
62493: PPUSH
62494: LD_VAR 0 3
62498: PPUSH
62499: CALL 64066 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62503: LD_VAR 0 1
62507: PUSH
62508: LD_INT 255
62510: EQUAL
62511: PUSH
62512: LD_VAR 0 2
62516: PPUSH
62517: CALL_OW 264
62521: PUSH
62522: LD_INT 14
62524: PUSH
62525: LD_INT 53
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: IN
62532: AND
62533: PUSH
62534: LD_VAR 0 4
62538: PPUSH
62539: LD_VAR 0 5
62543: PPUSH
62544: CALL_OW 488
62548: AND
62549: IFFALSE 62573
// CutTreeXYR ( unit , x , y , 12 ) ;
62551: LD_VAR 0 2
62555: PPUSH
62556: LD_VAR 0 4
62560: PPUSH
62561: LD_VAR 0 5
62565: PPUSH
62566: LD_INT 12
62568: PPUSH
62569: CALL 62636 0 4
// if cmd = 256 then
62573: LD_VAR 0 1
62577: PUSH
62578: LD_INT 256
62580: EQUAL
62581: IFFALSE 62602
// SetFactoryWaypoint ( unit , x , y ) ;
62583: LD_VAR 0 2
62587: PPUSH
62588: LD_VAR 0 4
62592: PPUSH
62593: LD_VAR 0 5
62597: PPUSH
62598: CALL 60420 0 3
// if cmd = 257 then
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 257
62609: EQUAL
62610: IFFALSE 62631
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62612: LD_VAR 0 2
62616: PPUSH
62617: LD_VAR 0 4
62621: PPUSH
62622: LD_VAR 0 5
62626: PPUSH
62627: CALL 60782 0 3
// end ;
62631: LD_VAR 0 6
62635: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62636: LD_INT 0
62638: PPUSH
62639: PPUSH
62640: PPUSH
62641: PPUSH
62642: PPUSH
62643: PPUSH
62644: PPUSH
62645: PPUSH
62646: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62647: LD_VAR 0 1
62651: NOT
62652: PUSH
62653: LD_VAR 0 2
62657: PPUSH
62658: LD_VAR 0 3
62662: PPUSH
62663: CALL_OW 488
62667: NOT
62668: OR
62669: PUSH
62670: LD_VAR 0 4
62674: NOT
62675: OR
62676: IFFALSE 62680
// exit ;
62678: GO 63020
// list := [ ] ;
62680: LD_ADDR_VAR 0 13
62684: PUSH
62685: EMPTY
62686: ST_TO_ADDR
// if x - r < 0 then
62687: LD_VAR 0 2
62691: PUSH
62692: LD_VAR 0 4
62696: MINUS
62697: PUSH
62698: LD_INT 0
62700: LESS
62701: IFFALSE 62713
// min_x := 0 else
62703: LD_ADDR_VAR 0 7
62707: PUSH
62708: LD_INT 0
62710: ST_TO_ADDR
62711: GO 62729
// min_x := x - r ;
62713: LD_ADDR_VAR 0 7
62717: PUSH
62718: LD_VAR 0 2
62722: PUSH
62723: LD_VAR 0 4
62727: MINUS
62728: ST_TO_ADDR
// if y - r < 0 then
62729: LD_VAR 0 3
62733: PUSH
62734: LD_VAR 0 4
62738: MINUS
62739: PUSH
62740: LD_INT 0
62742: LESS
62743: IFFALSE 62755
// min_y := 0 else
62745: LD_ADDR_VAR 0 8
62749: PUSH
62750: LD_INT 0
62752: ST_TO_ADDR
62753: GO 62771
// min_y := y - r ;
62755: LD_ADDR_VAR 0 8
62759: PUSH
62760: LD_VAR 0 3
62764: PUSH
62765: LD_VAR 0 4
62769: MINUS
62770: ST_TO_ADDR
// max_x := x + r ;
62771: LD_ADDR_VAR 0 9
62775: PUSH
62776: LD_VAR 0 2
62780: PUSH
62781: LD_VAR 0 4
62785: PLUS
62786: ST_TO_ADDR
// max_y := y + r ;
62787: LD_ADDR_VAR 0 10
62791: PUSH
62792: LD_VAR 0 3
62796: PUSH
62797: LD_VAR 0 4
62801: PLUS
62802: ST_TO_ADDR
// for _x = min_x to max_x do
62803: LD_ADDR_VAR 0 11
62807: PUSH
62808: DOUBLE
62809: LD_VAR 0 7
62813: DEC
62814: ST_TO_ADDR
62815: LD_VAR 0 9
62819: PUSH
62820: FOR_TO
62821: IFFALSE 62938
// for _y = min_y to max_y do
62823: LD_ADDR_VAR 0 12
62827: PUSH
62828: DOUBLE
62829: LD_VAR 0 8
62833: DEC
62834: ST_TO_ADDR
62835: LD_VAR 0 10
62839: PUSH
62840: FOR_TO
62841: IFFALSE 62934
// begin if not ValidHex ( _x , _y ) then
62843: LD_VAR 0 11
62847: PPUSH
62848: LD_VAR 0 12
62852: PPUSH
62853: CALL_OW 488
62857: NOT
62858: IFFALSE 62862
// continue ;
62860: GO 62840
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62862: LD_VAR 0 11
62866: PPUSH
62867: LD_VAR 0 12
62871: PPUSH
62872: CALL_OW 351
62876: PUSH
62877: LD_VAR 0 11
62881: PPUSH
62882: LD_VAR 0 12
62886: PPUSH
62887: CALL_OW 554
62891: AND
62892: IFFALSE 62932
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62894: LD_ADDR_VAR 0 13
62898: PUSH
62899: LD_VAR 0 13
62903: PPUSH
62904: LD_VAR 0 13
62908: PUSH
62909: LD_INT 1
62911: PLUS
62912: PPUSH
62913: LD_VAR 0 11
62917: PUSH
62918: LD_VAR 0 12
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PPUSH
62927: CALL_OW 2
62931: ST_TO_ADDR
// end ;
62932: GO 62840
62934: POP
62935: POP
62936: GO 62820
62938: POP
62939: POP
// if not list then
62940: LD_VAR 0 13
62944: NOT
62945: IFFALSE 62949
// exit ;
62947: GO 63020
// for i in list do
62949: LD_ADDR_VAR 0 6
62953: PUSH
62954: LD_VAR 0 13
62958: PUSH
62959: FOR_IN
62960: IFFALSE 63018
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62962: LD_VAR 0 1
62966: PPUSH
62967: LD_STRING M
62969: PUSH
62970: LD_VAR 0 6
62974: PUSH
62975: LD_INT 1
62977: ARRAY
62978: PUSH
62979: LD_VAR 0 6
62983: PUSH
62984: LD_INT 2
62986: ARRAY
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: PPUSH
63012: CALL_OW 447
63016: GO 62959
63018: POP
63019: POP
// end ;
63020: LD_VAR 0 5
63024: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63025: LD_EXP 89
63029: NOT
63030: IFFALSE 63080
63032: GO 63034
63034: DISABLE
// begin initHack := true ;
63035: LD_ADDR_EXP 89
63039: PUSH
63040: LD_INT 1
63042: ST_TO_ADDR
// hackTanks := [ ] ;
63043: LD_ADDR_EXP 90
63047: PUSH
63048: EMPTY
63049: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63050: LD_ADDR_EXP 91
63054: PUSH
63055: EMPTY
63056: ST_TO_ADDR
// hackLimit := 3 ;
63057: LD_ADDR_EXP 92
63061: PUSH
63062: LD_INT 3
63064: ST_TO_ADDR
// hackDist := 12 ;
63065: LD_ADDR_EXP 93
63069: PUSH
63070: LD_INT 12
63072: ST_TO_ADDR
// hackCounter := [ ] ;
63073: LD_ADDR_EXP 94
63077: PUSH
63078: EMPTY
63079: ST_TO_ADDR
// end ;
63080: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63081: LD_EXP 89
63085: PUSH
63086: LD_INT 34
63088: PUSH
63089: LD_INT 99
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PPUSH
63096: CALL_OW 69
63100: AND
63101: IFFALSE 63354
63103: GO 63105
63105: DISABLE
63106: LD_INT 0
63108: PPUSH
63109: PPUSH
// begin enable ;
63110: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63111: LD_ADDR_VAR 0 1
63115: PUSH
63116: LD_INT 34
63118: PUSH
63119: LD_INT 99
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PPUSH
63126: CALL_OW 69
63130: PUSH
63131: FOR_IN
63132: IFFALSE 63352
// begin if not i in hackTanks then
63134: LD_VAR 0 1
63138: PUSH
63139: LD_EXP 90
63143: IN
63144: NOT
63145: IFFALSE 63228
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63147: LD_ADDR_EXP 90
63151: PUSH
63152: LD_EXP 90
63156: PPUSH
63157: LD_EXP 90
63161: PUSH
63162: LD_INT 1
63164: PLUS
63165: PPUSH
63166: LD_VAR 0 1
63170: PPUSH
63171: CALL_OW 1
63175: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63176: LD_ADDR_EXP 91
63180: PUSH
63181: LD_EXP 91
63185: PPUSH
63186: LD_EXP 91
63190: PUSH
63191: LD_INT 1
63193: PLUS
63194: PPUSH
63195: EMPTY
63196: PPUSH
63197: CALL_OW 1
63201: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63202: LD_ADDR_EXP 94
63206: PUSH
63207: LD_EXP 94
63211: PPUSH
63212: LD_EXP 94
63216: PUSH
63217: LD_INT 1
63219: PLUS
63220: PPUSH
63221: EMPTY
63222: PPUSH
63223: CALL_OW 1
63227: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63228: LD_VAR 0 1
63232: PPUSH
63233: CALL_OW 302
63237: NOT
63238: IFFALSE 63251
// begin HackUnlinkAll ( i ) ;
63240: LD_VAR 0 1
63244: PPUSH
63245: CALL 63357 0 1
// continue ;
63249: GO 63131
// end ; HackCheckCapturedStatus ( i ) ;
63251: LD_VAR 0 1
63255: PPUSH
63256: CALL 63800 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63260: LD_ADDR_VAR 0 2
63264: PUSH
63265: LD_INT 81
63267: PUSH
63268: LD_VAR 0 1
63272: PPUSH
63273: CALL_OW 255
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 33
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 91
63294: PUSH
63295: LD_VAR 0 1
63299: PUSH
63300: LD_EXP 93
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 50
63312: PUSH
63313: EMPTY
63314: LIST
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: PPUSH
63322: CALL_OW 69
63326: ST_TO_ADDR
// if not tmp then
63327: LD_VAR 0 2
63331: NOT
63332: IFFALSE 63336
// continue ;
63334: GO 63131
// HackLink ( i , tmp ) ;
63336: LD_VAR 0 1
63340: PPUSH
63341: LD_VAR 0 2
63345: PPUSH
63346: CALL 63493 0 2
// end ;
63350: GO 63131
63352: POP
63353: POP
// end ;
63354: PPOPN 2
63356: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63357: LD_INT 0
63359: PPUSH
63360: PPUSH
63361: PPUSH
// if not hack in hackTanks then
63362: LD_VAR 0 1
63366: PUSH
63367: LD_EXP 90
63371: IN
63372: NOT
63373: IFFALSE 63377
// exit ;
63375: GO 63488
// index := GetElementIndex ( hackTanks , hack ) ;
63377: LD_ADDR_VAR 0 4
63381: PUSH
63382: LD_EXP 90
63386: PPUSH
63387: LD_VAR 0 1
63391: PPUSH
63392: CALL 9379 0 2
63396: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63397: LD_EXP 91
63401: PUSH
63402: LD_VAR 0 4
63406: ARRAY
63407: IFFALSE 63488
// begin for i in hackTanksCaptured [ index ] do
63409: LD_ADDR_VAR 0 3
63413: PUSH
63414: LD_EXP 91
63418: PUSH
63419: LD_VAR 0 4
63423: ARRAY
63424: PUSH
63425: FOR_IN
63426: IFFALSE 63452
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63428: LD_VAR 0 3
63432: PUSH
63433: LD_INT 1
63435: ARRAY
63436: PPUSH
63437: LD_VAR 0 3
63441: PUSH
63442: LD_INT 2
63444: ARRAY
63445: PPUSH
63446: CALL_OW 235
63450: GO 63425
63452: POP
63453: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63454: LD_ADDR_EXP 91
63458: PUSH
63459: LD_EXP 91
63463: PPUSH
63464: LD_VAR 0 4
63468: PPUSH
63469: EMPTY
63470: PPUSH
63471: CALL_OW 1
63475: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63476: LD_VAR 0 1
63480: PPUSH
63481: LD_INT 0
63483: PPUSH
63484: CALL_OW 505
// end ; end ;
63488: LD_VAR 0 2
63492: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63493: LD_INT 0
63495: PPUSH
63496: PPUSH
63497: PPUSH
// if not hack in hackTanks or not vehicles then
63498: LD_VAR 0 1
63502: PUSH
63503: LD_EXP 90
63507: IN
63508: NOT
63509: PUSH
63510: LD_VAR 0 2
63514: NOT
63515: OR
63516: IFFALSE 63520
// exit ;
63518: GO 63795
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63520: LD_ADDR_VAR 0 2
63524: PUSH
63525: LD_VAR 0 1
63529: PPUSH
63530: LD_VAR 0 2
63534: PPUSH
63535: LD_INT 1
63537: PPUSH
63538: LD_INT 1
63540: PPUSH
63541: CALL 10029 0 4
63545: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63546: LD_ADDR_VAR 0 5
63550: PUSH
63551: LD_EXP 90
63555: PPUSH
63556: LD_VAR 0 1
63560: PPUSH
63561: CALL 9379 0 2
63565: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63566: LD_EXP 91
63570: PUSH
63571: LD_VAR 0 5
63575: ARRAY
63576: PUSH
63577: LD_EXP 92
63581: LESS
63582: IFFALSE 63771
// begin for i := 1 to vehicles do
63584: LD_ADDR_VAR 0 4
63588: PUSH
63589: DOUBLE
63590: LD_INT 1
63592: DEC
63593: ST_TO_ADDR
63594: LD_VAR 0 2
63598: PUSH
63599: FOR_TO
63600: IFFALSE 63769
// begin if hackTanksCaptured [ index ] = hackLimit then
63602: LD_EXP 91
63606: PUSH
63607: LD_VAR 0 5
63611: ARRAY
63612: PUSH
63613: LD_EXP 92
63617: EQUAL
63618: IFFALSE 63622
// break ;
63620: GO 63769
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63622: LD_ADDR_EXP 94
63626: PUSH
63627: LD_EXP 94
63631: PPUSH
63632: LD_VAR 0 5
63636: PPUSH
63637: LD_EXP 94
63641: PUSH
63642: LD_VAR 0 5
63646: ARRAY
63647: PUSH
63648: LD_INT 1
63650: PLUS
63651: PPUSH
63652: CALL_OW 1
63656: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63657: LD_ADDR_EXP 91
63661: PUSH
63662: LD_EXP 91
63666: PPUSH
63667: LD_VAR 0 5
63671: PUSH
63672: LD_EXP 91
63676: PUSH
63677: LD_VAR 0 5
63681: ARRAY
63682: PUSH
63683: LD_INT 1
63685: PLUS
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PPUSH
63691: LD_VAR 0 2
63695: PUSH
63696: LD_VAR 0 4
63700: ARRAY
63701: PUSH
63702: LD_VAR 0 2
63706: PUSH
63707: LD_VAR 0 4
63711: ARRAY
63712: PPUSH
63713: CALL_OW 255
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PPUSH
63722: CALL 9594 0 3
63726: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63727: LD_VAR 0 2
63731: PUSH
63732: LD_VAR 0 4
63736: ARRAY
63737: PPUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: CALL_OW 255
63747: PPUSH
63748: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63752: LD_VAR 0 2
63756: PUSH
63757: LD_VAR 0 4
63761: ARRAY
63762: PPUSH
63763: CALL_OW 141
// end ;
63767: GO 63599
63769: POP
63770: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63771: LD_VAR 0 1
63775: PPUSH
63776: LD_EXP 91
63780: PUSH
63781: LD_VAR 0 5
63785: ARRAY
63786: PUSH
63787: LD_INT 0
63789: PLUS
63790: PPUSH
63791: CALL_OW 505
// end ;
63795: LD_VAR 0 3
63799: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63800: LD_INT 0
63802: PPUSH
63803: PPUSH
63804: PPUSH
63805: PPUSH
// if not hack in hackTanks then
63806: LD_VAR 0 1
63810: PUSH
63811: LD_EXP 90
63815: IN
63816: NOT
63817: IFFALSE 63821
// exit ;
63819: GO 64061
// index := GetElementIndex ( hackTanks , hack ) ;
63821: LD_ADDR_VAR 0 4
63825: PUSH
63826: LD_EXP 90
63830: PPUSH
63831: LD_VAR 0 1
63835: PPUSH
63836: CALL 9379 0 2
63840: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63841: LD_ADDR_VAR 0 3
63845: PUSH
63846: DOUBLE
63847: LD_EXP 91
63851: PUSH
63852: LD_VAR 0 4
63856: ARRAY
63857: INC
63858: ST_TO_ADDR
63859: LD_INT 1
63861: PUSH
63862: FOR_DOWNTO
63863: IFFALSE 64035
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63865: LD_ADDR_VAR 0 5
63869: PUSH
63870: LD_EXP 91
63874: PUSH
63875: LD_VAR 0 4
63879: ARRAY
63880: PUSH
63881: LD_VAR 0 3
63885: ARRAY
63886: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63887: LD_VAR 0 5
63891: PUSH
63892: LD_INT 1
63894: ARRAY
63895: PPUSH
63896: CALL_OW 302
63900: NOT
63901: PUSH
63902: LD_VAR 0 5
63906: PUSH
63907: LD_INT 1
63909: ARRAY
63910: PPUSH
63911: CALL_OW 255
63915: PUSH
63916: LD_VAR 0 1
63920: PPUSH
63921: CALL_OW 255
63925: NONEQUAL
63926: OR
63927: IFFALSE 64033
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63929: LD_VAR 0 5
63933: PUSH
63934: LD_INT 1
63936: ARRAY
63937: PPUSH
63938: CALL_OW 305
63942: PUSH
63943: LD_VAR 0 5
63947: PUSH
63948: LD_INT 1
63950: ARRAY
63951: PPUSH
63952: CALL_OW 255
63956: PUSH
63957: LD_VAR 0 1
63961: PPUSH
63962: CALL_OW 255
63966: EQUAL
63967: AND
63968: IFFALSE 63992
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63970: LD_VAR 0 5
63974: PUSH
63975: LD_INT 1
63977: ARRAY
63978: PPUSH
63979: LD_VAR 0 5
63983: PUSH
63984: LD_INT 2
63986: ARRAY
63987: PPUSH
63988: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63992: LD_ADDR_EXP 91
63996: PUSH
63997: LD_EXP 91
64001: PPUSH
64002: LD_VAR 0 4
64006: PPUSH
64007: LD_EXP 91
64011: PUSH
64012: LD_VAR 0 4
64016: ARRAY
64017: PPUSH
64018: LD_VAR 0 3
64022: PPUSH
64023: CALL_OW 3
64027: PPUSH
64028: CALL_OW 1
64032: ST_TO_ADDR
// end ; end ;
64033: GO 63862
64035: POP
64036: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64037: LD_VAR 0 1
64041: PPUSH
64042: LD_EXP 91
64046: PUSH
64047: LD_VAR 0 4
64051: ARRAY
64052: PUSH
64053: LD_INT 0
64055: PLUS
64056: PPUSH
64057: CALL_OW 505
// end ;
64061: LD_VAR 0 2
64065: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64066: LD_INT 0
64068: PPUSH
64069: PPUSH
64070: PPUSH
64071: PPUSH
// if not hack in hackTanks then
64072: LD_VAR 0 1
64076: PUSH
64077: LD_EXP 90
64081: IN
64082: NOT
64083: IFFALSE 64087
// exit ;
64085: GO 64172
// index := GetElementIndex ( hackTanks , hack ) ;
64087: LD_ADDR_VAR 0 5
64091: PUSH
64092: LD_EXP 90
64096: PPUSH
64097: LD_VAR 0 1
64101: PPUSH
64102: CALL 9379 0 2
64106: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64107: LD_ADDR_VAR 0 4
64111: PUSH
64112: DOUBLE
64113: LD_INT 1
64115: DEC
64116: ST_TO_ADDR
64117: LD_EXP 91
64121: PUSH
64122: LD_VAR 0 5
64126: ARRAY
64127: PUSH
64128: FOR_TO
64129: IFFALSE 64170
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64131: LD_EXP 91
64135: PUSH
64136: LD_VAR 0 5
64140: ARRAY
64141: PUSH
64142: LD_VAR 0 4
64146: ARRAY
64147: PUSH
64148: LD_INT 1
64150: ARRAY
64151: PUSH
64152: LD_VAR 0 2
64156: EQUAL
64157: IFFALSE 64168
// KillUnit ( vehicle ) ;
64159: LD_VAR 0 2
64163: PPUSH
64164: CALL_OW 66
64168: GO 64128
64170: POP
64171: POP
// end ;
64172: LD_VAR 0 3
64176: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64177: LD_EXP 95
64181: NOT
64182: IFFALSE 64217
64184: GO 64186
64186: DISABLE
// begin initMiner := true ;
64187: LD_ADDR_EXP 95
64191: PUSH
64192: LD_INT 1
64194: ST_TO_ADDR
// minersList := [ ] ;
64195: LD_ADDR_EXP 96
64199: PUSH
64200: EMPTY
64201: ST_TO_ADDR
// minerMinesList := [ ] ;
64202: LD_ADDR_EXP 97
64206: PUSH
64207: EMPTY
64208: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64209: LD_ADDR_EXP 98
64213: PUSH
64214: LD_INT 5
64216: ST_TO_ADDR
// end ;
64217: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64218: LD_EXP 95
64222: PUSH
64223: LD_INT 34
64225: PUSH
64226: LD_INT 81
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PPUSH
64233: CALL_OW 69
64237: AND
64238: IFFALSE 64699
64240: GO 64242
64242: DISABLE
64243: LD_INT 0
64245: PPUSH
64246: PPUSH
64247: PPUSH
64248: PPUSH
// begin enable ;
64249: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64250: LD_ADDR_VAR 0 1
64254: PUSH
64255: LD_INT 34
64257: PUSH
64258: LD_INT 81
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PPUSH
64265: CALL_OW 69
64269: PUSH
64270: FOR_IN
64271: IFFALSE 64343
// begin if not i in minersList then
64273: LD_VAR 0 1
64277: PUSH
64278: LD_EXP 96
64282: IN
64283: NOT
64284: IFFALSE 64341
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64286: LD_ADDR_EXP 96
64290: PUSH
64291: LD_EXP 96
64295: PPUSH
64296: LD_EXP 96
64300: PUSH
64301: LD_INT 1
64303: PLUS
64304: PPUSH
64305: LD_VAR 0 1
64309: PPUSH
64310: CALL_OW 1
64314: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64315: LD_ADDR_EXP 97
64319: PUSH
64320: LD_EXP 97
64324: PPUSH
64325: LD_EXP 97
64329: PUSH
64330: LD_INT 1
64332: PLUS
64333: PPUSH
64334: EMPTY
64335: PPUSH
64336: CALL_OW 1
64340: ST_TO_ADDR
// end end ;
64341: GO 64270
64343: POP
64344: POP
// for i := minerMinesList downto 1 do
64345: LD_ADDR_VAR 0 1
64349: PUSH
64350: DOUBLE
64351: LD_EXP 97
64355: INC
64356: ST_TO_ADDR
64357: LD_INT 1
64359: PUSH
64360: FOR_DOWNTO
64361: IFFALSE 64697
// begin if IsLive ( minersList [ i ] ) then
64363: LD_EXP 96
64367: PUSH
64368: LD_VAR 0 1
64372: ARRAY
64373: PPUSH
64374: CALL_OW 300
64378: IFFALSE 64406
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64380: LD_EXP 96
64384: PUSH
64385: LD_VAR 0 1
64389: ARRAY
64390: PPUSH
64391: LD_EXP 97
64395: PUSH
64396: LD_VAR 0 1
64400: ARRAY
64401: PPUSH
64402: CALL_OW 505
// if not minerMinesList [ i ] then
64406: LD_EXP 97
64410: PUSH
64411: LD_VAR 0 1
64415: ARRAY
64416: NOT
64417: IFFALSE 64421
// continue ;
64419: GO 64360
// for j := minerMinesList [ i ] downto 1 do
64421: LD_ADDR_VAR 0 2
64425: PUSH
64426: DOUBLE
64427: LD_EXP 97
64431: PUSH
64432: LD_VAR 0 1
64436: ARRAY
64437: INC
64438: ST_TO_ADDR
64439: LD_INT 1
64441: PUSH
64442: FOR_DOWNTO
64443: IFFALSE 64693
// begin side := GetSide ( minersList [ i ] ) ;
64445: LD_ADDR_VAR 0 3
64449: PUSH
64450: LD_EXP 96
64454: PUSH
64455: LD_VAR 0 1
64459: ARRAY
64460: PPUSH
64461: CALL_OW 255
64465: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64466: LD_ADDR_VAR 0 4
64470: PUSH
64471: LD_EXP 97
64475: PUSH
64476: LD_VAR 0 1
64480: ARRAY
64481: PUSH
64482: LD_VAR 0 2
64486: ARRAY
64487: PUSH
64488: LD_INT 1
64490: ARRAY
64491: PPUSH
64492: LD_EXP 97
64496: PUSH
64497: LD_VAR 0 1
64501: ARRAY
64502: PUSH
64503: LD_VAR 0 2
64507: ARRAY
64508: PUSH
64509: LD_INT 2
64511: ARRAY
64512: PPUSH
64513: CALL_OW 428
64517: ST_TO_ADDR
// if not tmp then
64518: LD_VAR 0 4
64522: NOT
64523: IFFALSE 64527
// continue ;
64525: GO 64442
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64527: LD_VAR 0 4
64531: PUSH
64532: LD_INT 81
64534: PUSH
64535: LD_VAR 0 3
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PPUSH
64544: CALL_OW 69
64548: IN
64549: PUSH
64550: LD_EXP 97
64554: PUSH
64555: LD_VAR 0 1
64559: ARRAY
64560: PUSH
64561: LD_VAR 0 2
64565: ARRAY
64566: PUSH
64567: LD_INT 1
64569: ARRAY
64570: PPUSH
64571: LD_EXP 97
64575: PUSH
64576: LD_VAR 0 1
64580: ARRAY
64581: PUSH
64582: LD_VAR 0 2
64586: ARRAY
64587: PUSH
64588: LD_INT 2
64590: ARRAY
64591: PPUSH
64592: CALL_OW 458
64596: AND
64597: IFFALSE 64691
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64599: LD_EXP 97
64603: PUSH
64604: LD_VAR 0 1
64608: ARRAY
64609: PUSH
64610: LD_VAR 0 2
64614: ARRAY
64615: PUSH
64616: LD_INT 1
64618: ARRAY
64619: PPUSH
64620: LD_EXP 97
64624: PUSH
64625: LD_VAR 0 1
64629: ARRAY
64630: PUSH
64631: LD_VAR 0 2
64635: ARRAY
64636: PUSH
64637: LD_INT 2
64639: ARRAY
64640: PPUSH
64641: LD_VAR 0 3
64645: PPUSH
64646: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64650: LD_ADDR_EXP 97
64654: PUSH
64655: LD_EXP 97
64659: PPUSH
64660: LD_VAR 0 1
64664: PPUSH
64665: LD_EXP 97
64669: PUSH
64670: LD_VAR 0 1
64674: ARRAY
64675: PPUSH
64676: LD_VAR 0 2
64680: PPUSH
64681: CALL_OW 3
64685: PPUSH
64686: CALL_OW 1
64690: ST_TO_ADDR
// end ; end ;
64691: GO 64442
64693: POP
64694: POP
// end ;
64695: GO 64360
64697: POP
64698: POP
// end ;
64699: PPOPN 4
64701: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64702: LD_INT 0
64704: PPUSH
64705: PPUSH
// result := false ;
64706: LD_ADDR_VAR 0 4
64710: PUSH
64711: LD_INT 0
64713: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64714: LD_VAR 0 1
64718: PPUSH
64719: CALL_OW 264
64723: PUSH
64724: LD_INT 81
64726: EQUAL
64727: NOT
64728: IFFALSE 64732
// exit ;
64730: GO 64972
// index := GetElementIndex ( minersList , unit ) ;
64732: LD_ADDR_VAR 0 5
64736: PUSH
64737: LD_EXP 96
64741: PPUSH
64742: LD_VAR 0 1
64746: PPUSH
64747: CALL 9379 0 2
64751: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64752: LD_EXP 97
64756: PUSH
64757: LD_VAR 0 5
64761: ARRAY
64762: PUSH
64763: LD_EXP 98
64767: GREATEREQUAL
64768: IFFALSE 64772
// exit ;
64770: GO 64972
// ComMoveXY ( unit , x , y ) ;
64772: LD_VAR 0 1
64776: PPUSH
64777: LD_VAR 0 2
64781: PPUSH
64782: LD_VAR 0 3
64786: PPUSH
64787: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64791: LD_INT 35
64793: PPUSH
64794: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64798: LD_VAR 0 1
64802: PPUSH
64803: LD_VAR 0 2
64807: PPUSH
64808: LD_VAR 0 3
64812: PPUSH
64813: CALL 40734 0 3
64817: NOT
64818: PUSH
64819: LD_VAR 0 1
64823: PPUSH
64824: CALL_OW 314
64828: AND
64829: IFFALSE 64833
// exit ;
64831: GO 64972
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64833: LD_VAR 0 2
64837: PPUSH
64838: LD_VAR 0 3
64842: PPUSH
64843: CALL_OW 428
64847: PUSH
64848: LD_VAR 0 1
64852: EQUAL
64853: PUSH
64854: LD_VAR 0 1
64858: PPUSH
64859: CALL_OW 314
64863: NOT
64864: AND
64865: IFFALSE 64791
// PlaySoundXY ( x , y , PlantMine ) ;
64867: LD_VAR 0 2
64871: PPUSH
64872: LD_VAR 0 3
64876: PPUSH
64877: LD_STRING PlantMine
64879: PPUSH
64880: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64884: LD_VAR 0 2
64888: PPUSH
64889: LD_VAR 0 3
64893: PPUSH
64894: LD_VAR 0 1
64898: PPUSH
64899: CALL_OW 255
64903: PPUSH
64904: LD_INT 0
64906: PPUSH
64907: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64911: LD_ADDR_EXP 97
64915: PUSH
64916: LD_EXP 97
64920: PPUSH
64921: LD_VAR 0 5
64925: PUSH
64926: LD_EXP 97
64930: PUSH
64931: LD_VAR 0 5
64935: ARRAY
64936: PUSH
64937: LD_INT 1
64939: PLUS
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PPUSH
64945: LD_VAR 0 2
64949: PUSH
64950: LD_VAR 0 3
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PPUSH
64959: CALL 9594 0 3
64963: ST_TO_ADDR
// result := true ;
64964: LD_ADDR_VAR 0 4
64968: PUSH
64969: LD_INT 1
64971: ST_TO_ADDR
// end ;
64972: LD_VAR 0 4
64976: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64977: LD_INT 0
64979: PPUSH
64980: PPUSH
64981: PPUSH
// if not unit in minersList then
64982: LD_VAR 0 1
64986: PUSH
64987: LD_EXP 96
64991: IN
64992: NOT
64993: IFFALSE 64997
// exit ;
64995: GO 65389
// index := GetElementIndex ( minersList , unit ) ;
64997: LD_ADDR_VAR 0 6
65001: PUSH
65002: LD_EXP 96
65006: PPUSH
65007: LD_VAR 0 1
65011: PPUSH
65012: CALL 9379 0 2
65016: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65017: LD_ADDR_VAR 0 5
65021: PUSH
65022: DOUBLE
65023: LD_EXP 97
65027: PUSH
65028: LD_VAR 0 6
65032: ARRAY
65033: INC
65034: ST_TO_ADDR
65035: LD_INT 1
65037: PUSH
65038: FOR_DOWNTO
65039: IFFALSE 65200
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65041: LD_EXP 97
65045: PUSH
65046: LD_VAR 0 6
65050: ARRAY
65051: PUSH
65052: LD_VAR 0 5
65056: ARRAY
65057: PUSH
65058: LD_INT 1
65060: ARRAY
65061: PUSH
65062: LD_VAR 0 2
65066: EQUAL
65067: PUSH
65068: LD_EXP 97
65072: PUSH
65073: LD_VAR 0 6
65077: ARRAY
65078: PUSH
65079: LD_VAR 0 5
65083: ARRAY
65084: PUSH
65085: LD_INT 2
65087: ARRAY
65088: PUSH
65089: LD_VAR 0 3
65093: EQUAL
65094: AND
65095: IFFALSE 65198
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65097: LD_EXP 97
65101: PUSH
65102: LD_VAR 0 6
65106: ARRAY
65107: PUSH
65108: LD_VAR 0 5
65112: ARRAY
65113: PUSH
65114: LD_INT 1
65116: ARRAY
65117: PPUSH
65118: LD_EXP 97
65122: PUSH
65123: LD_VAR 0 6
65127: ARRAY
65128: PUSH
65129: LD_VAR 0 5
65133: ARRAY
65134: PUSH
65135: LD_INT 2
65137: ARRAY
65138: PPUSH
65139: LD_VAR 0 1
65143: PPUSH
65144: CALL_OW 255
65148: PPUSH
65149: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65153: LD_ADDR_EXP 97
65157: PUSH
65158: LD_EXP 97
65162: PPUSH
65163: LD_VAR 0 6
65167: PPUSH
65168: LD_EXP 97
65172: PUSH
65173: LD_VAR 0 6
65177: ARRAY
65178: PPUSH
65179: LD_VAR 0 5
65183: PPUSH
65184: CALL_OW 3
65188: PPUSH
65189: CALL_OW 1
65193: ST_TO_ADDR
// exit ;
65194: POP
65195: POP
65196: GO 65389
// end ; end ;
65198: GO 65038
65200: POP
65201: POP
// for i := minerMinesList [ index ] downto 1 do
65202: LD_ADDR_VAR 0 5
65206: PUSH
65207: DOUBLE
65208: LD_EXP 97
65212: PUSH
65213: LD_VAR 0 6
65217: ARRAY
65218: INC
65219: ST_TO_ADDR
65220: LD_INT 1
65222: PUSH
65223: FOR_DOWNTO
65224: IFFALSE 65387
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65226: LD_EXP 97
65230: PUSH
65231: LD_VAR 0 6
65235: ARRAY
65236: PUSH
65237: LD_VAR 0 5
65241: ARRAY
65242: PUSH
65243: LD_INT 1
65245: ARRAY
65246: PPUSH
65247: LD_EXP 97
65251: PUSH
65252: LD_VAR 0 6
65256: ARRAY
65257: PUSH
65258: LD_VAR 0 5
65262: ARRAY
65263: PUSH
65264: LD_INT 2
65266: ARRAY
65267: PPUSH
65268: LD_VAR 0 2
65272: PPUSH
65273: LD_VAR 0 3
65277: PPUSH
65278: CALL_OW 298
65282: PUSH
65283: LD_INT 6
65285: LESS
65286: IFFALSE 65385
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65288: LD_EXP 97
65292: PUSH
65293: LD_VAR 0 6
65297: ARRAY
65298: PUSH
65299: LD_VAR 0 5
65303: ARRAY
65304: PUSH
65305: LD_INT 1
65307: ARRAY
65308: PPUSH
65309: LD_EXP 97
65313: PUSH
65314: LD_VAR 0 6
65318: ARRAY
65319: PUSH
65320: LD_VAR 0 5
65324: ARRAY
65325: PUSH
65326: LD_INT 2
65328: ARRAY
65329: PPUSH
65330: LD_VAR 0 1
65334: PPUSH
65335: CALL_OW 255
65339: PPUSH
65340: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65344: LD_ADDR_EXP 97
65348: PUSH
65349: LD_EXP 97
65353: PPUSH
65354: LD_VAR 0 6
65358: PPUSH
65359: LD_EXP 97
65363: PUSH
65364: LD_VAR 0 6
65368: ARRAY
65369: PPUSH
65370: LD_VAR 0 5
65374: PPUSH
65375: CALL_OW 3
65379: PPUSH
65380: CALL_OW 1
65384: ST_TO_ADDR
// end ; end ;
65385: GO 65223
65387: POP
65388: POP
// end ;
65389: LD_VAR 0 4
65393: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65394: LD_INT 0
65396: PPUSH
65397: PPUSH
65398: PPUSH
65399: PPUSH
65400: PPUSH
65401: PPUSH
65402: PPUSH
65403: PPUSH
65404: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65405: LD_VAR 0 1
65409: PPUSH
65410: CALL_OW 264
65414: PUSH
65415: LD_INT 81
65417: EQUAL
65418: NOT
65419: PUSH
65420: LD_VAR 0 1
65424: PUSH
65425: LD_EXP 96
65429: IN
65430: NOT
65431: OR
65432: IFFALSE 65436
// exit ;
65434: GO 65758
// index := GetElementIndex ( minersList , unit ) ;
65436: LD_ADDR_VAR 0 6
65440: PUSH
65441: LD_EXP 96
65445: PPUSH
65446: LD_VAR 0 1
65450: PPUSH
65451: CALL 9379 0 2
65455: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65456: LD_ADDR_VAR 0 8
65460: PUSH
65461: LD_EXP 98
65465: PUSH
65466: LD_EXP 97
65470: PUSH
65471: LD_VAR 0 6
65475: ARRAY
65476: MINUS
65477: ST_TO_ADDR
// if not minesFreeAmount then
65478: LD_VAR 0 8
65482: NOT
65483: IFFALSE 65487
// exit ;
65485: GO 65758
// tmp := [ ] ;
65487: LD_ADDR_VAR 0 7
65491: PUSH
65492: EMPTY
65493: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65494: LD_ADDR_VAR 0 5
65498: PUSH
65499: DOUBLE
65500: LD_INT 1
65502: DEC
65503: ST_TO_ADDR
65504: LD_VAR 0 8
65508: PUSH
65509: FOR_TO
65510: IFFALSE 65705
// begin _d := rand ( 0 , 5 ) ;
65512: LD_ADDR_VAR 0 11
65516: PUSH
65517: LD_INT 0
65519: PPUSH
65520: LD_INT 5
65522: PPUSH
65523: CALL_OW 12
65527: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65528: LD_ADDR_VAR 0 12
65532: PUSH
65533: LD_INT 2
65535: PPUSH
65536: LD_INT 6
65538: PPUSH
65539: CALL_OW 12
65543: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65544: LD_ADDR_VAR 0 9
65548: PUSH
65549: LD_VAR 0 2
65553: PPUSH
65554: LD_VAR 0 11
65558: PPUSH
65559: LD_VAR 0 12
65563: PPUSH
65564: CALL_OW 272
65568: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65569: LD_ADDR_VAR 0 10
65573: PUSH
65574: LD_VAR 0 3
65578: PPUSH
65579: LD_VAR 0 11
65583: PPUSH
65584: LD_VAR 0 12
65588: PPUSH
65589: CALL_OW 273
65593: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65594: LD_VAR 0 9
65598: PPUSH
65599: LD_VAR 0 10
65603: PPUSH
65604: CALL_OW 488
65608: PUSH
65609: LD_VAR 0 9
65613: PUSH
65614: LD_VAR 0 10
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_VAR 0 7
65627: IN
65628: NOT
65629: AND
65630: PUSH
65631: LD_VAR 0 9
65635: PPUSH
65636: LD_VAR 0 10
65640: PPUSH
65641: CALL_OW 458
65645: NOT
65646: AND
65647: IFFALSE 65689
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65649: LD_ADDR_VAR 0 7
65653: PUSH
65654: LD_VAR 0 7
65658: PPUSH
65659: LD_VAR 0 7
65663: PUSH
65664: LD_INT 1
65666: PLUS
65667: PPUSH
65668: LD_VAR 0 9
65672: PUSH
65673: LD_VAR 0 10
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PPUSH
65682: CALL_OW 1
65686: ST_TO_ADDR
65687: GO 65703
// i := i - 1 ;
65689: LD_ADDR_VAR 0 5
65693: PUSH
65694: LD_VAR 0 5
65698: PUSH
65699: LD_INT 1
65701: MINUS
65702: ST_TO_ADDR
// end ;
65703: GO 65509
65705: POP
65706: POP
// for i in tmp do
65707: LD_ADDR_VAR 0 5
65711: PUSH
65712: LD_VAR 0 7
65716: PUSH
65717: FOR_IN
65718: IFFALSE 65756
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65720: LD_VAR 0 1
65724: PPUSH
65725: LD_VAR 0 5
65729: PUSH
65730: LD_INT 1
65732: ARRAY
65733: PPUSH
65734: LD_VAR 0 5
65738: PUSH
65739: LD_INT 2
65741: ARRAY
65742: PPUSH
65743: CALL 64702 0 3
65747: NOT
65748: IFFALSE 65754
// exit ;
65750: POP
65751: POP
65752: GO 65758
65754: GO 65717
65756: POP
65757: POP
// end ;
65758: LD_VAR 0 4
65762: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65763: LD_INT 0
65765: PPUSH
65766: PPUSH
65767: PPUSH
65768: PPUSH
65769: PPUSH
65770: PPUSH
65771: PPUSH
// if not GetClass ( unit ) = class_sniper then
65772: LD_VAR 0 1
65776: PPUSH
65777: CALL_OW 257
65781: PUSH
65782: LD_INT 5
65784: EQUAL
65785: NOT
65786: IFFALSE 65790
// exit ;
65788: GO 66178
// dist := 8 ;
65790: LD_ADDR_VAR 0 5
65794: PUSH
65795: LD_INT 8
65797: ST_TO_ADDR
// viewRange := 12 ;
65798: LD_ADDR_VAR 0 7
65802: PUSH
65803: LD_INT 12
65805: ST_TO_ADDR
// side := GetSide ( unit ) ;
65806: LD_ADDR_VAR 0 6
65810: PUSH
65811: LD_VAR 0 1
65815: PPUSH
65816: CALL_OW 255
65820: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65821: LD_INT 61
65823: PPUSH
65824: LD_VAR 0 6
65828: PPUSH
65829: CALL_OW 321
65833: PUSH
65834: LD_INT 2
65836: EQUAL
65837: IFFALSE 65847
// viewRange := 16 ;
65839: LD_ADDR_VAR 0 7
65843: PUSH
65844: LD_INT 16
65846: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65847: LD_VAR 0 1
65851: PPUSH
65852: LD_VAR 0 2
65856: PPUSH
65857: LD_VAR 0 3
65861: PPUSH
65862: CALL_OW 297
65866: PUSH
65867: LD_VAR 0 5
65871: GREATER
65872: IFFALSE 65951
// begin ComMoveXY ( unit , x , y ) ;
65874: LD_VAR 0 1
65878: PPUSH
65879: LD_VAR 0 2
65883: PPUSH
65884: LD_VAR 0 3
65888: PPUSH
65889: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65893: LD_INT 35
65895: PPUSH
65896: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65900: LD_VAR 0 1
65904: PPUSH
65905: LD_VAR 0 2
65909: PPUSH
65910: LD_VAR 0 3
65914: PPUSH
65915: CALL 40734 0 3
65919: NOT
65920: IFFALSE 65924
// exit ;
65922: GO 66178
// until GetDistUnitXY ( unit , x , y ) < dist ;
65924: LD_VAR 0 1
65928: PPUSH
65929: LD_VAR 0 2
65933: PPUSH
65934: LD_VAR 0 3
65938: PPUSH
65939: CALL_OW 297
65943: PUSH
65944: LD_VAR 0 5
65948: LESS
65949: IFFALSE 65893
// end ; ComTurnXY ( unit , x , y ) ;
65951: LD_VAR 0 1
65955: PPUSH
65956: LD_VAR 0 2
65960: PPUSH
65961: LD_VAR 0 3
65965: PPUSH
65966: CALL_OW 118
// wait ( 5 ) ;
65970: LD_INT 5
65972: PPUSH
65973: CALL_OW 67
// _d := GetDir ( unit ) ;
65977: LD_ADDR_VAR 0 10
65981: PUSH
65982: LD_VAR 0 1
65986: PPUSH
65987: CALL_OW 254
65991: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65992: LD_ADDR_VAR 0 8
65996: PUSH
65997: LD_VAR 0 1
66001: PPUSH
66002: CALL_OW 250
66006: PPUSH
66007: LD_VAR 0 10
66011: PPUSH
66012: LD_VAR 0 5
66016: PPUSH
66017: CALL_OW 272
66021: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66022: LD_ADDR_VAR 0 9
66026: PUSH
66027: LD_VAR 0 1
66031: PPUSH
66032: CALL_OW 251
66036: PPUSH
66037: LD_VAR 0 10
66041: PPUSH
66042: LD_VAR 0 5
66046: PPUSH
66047: CALL_OW 273
66051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66052: LD_VAR 0 8
66056: PPUSH
66057: LD_VAR 0 9
66061: PPUSH
66062: CALL_OW 488
66066: NOT
66067: IFFALSE 66071
// exit ;
66069: GO 66178
// ComAnimCustom ( unit , 1 ) ;
66071: LD_VAR 0 1
66075: PPUSH
66076: LD_INT 1
66078: PPUSH
66079: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66083: LD_VAR 0 8
66087: PPUSH
66088: LD_VAR 0 9
66092: PPUSH
66093: LD_VAR 0 6
66097: PPUSH
66098: LD_VAR 0 7
66102: PPUSH
66103: CALL_OW 330
// repeat wait ( 1 ) ;
66107: LD_INT 1
66109: PPUSH
66110: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66114: LD_VAR 0 1
66118: PPUSH
66119: CALL_OW 316
66123: PUSH
66124: LD_VAR 0 1
66128: PPUSH
66129: CALL_OW 314
66133: OR
66134: PUSH
66135: LD_VAR 0 1
66139: PPUSH
66140: CALL_OW 302
66144: NOT
66145: OR
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: CALL_OW 301
66156: OR
66157: IFFALSE 66107
// RemoveSeeing ( _x , _y , side ) ;
66159: LD_VAR 0 8
66163: PPUSH
66164: LD_VAR 0 9
66168: PPUSH
66169: LD_VAR 0 6
66173: PPUSH
66174: CALL_OW 331
// end ;
66178: LD_VAR 0 4
66182: RET
